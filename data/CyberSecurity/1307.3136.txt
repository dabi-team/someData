Linking Correlated Network Flows through Packet
Timing: a Game-Theoretic Approach

Juan A. Elices
University of New Mexico
Email: jelices@ece.unm.edu

Fernando P´erez-Gonz´alez
Universidad de Vigo
Email: fperez@gts.uvigo.es

3
1
0
2

l
u
J

1
1

]

R
C
.
s
c
[

1
v
6
3
1
3
.
7
0
3
1
:
v
i
X
r
a

Abstract—Deciding that two network ﬂows are essentially the
same is an important problem in intrusion detection or in tracing
anonymous connections. A stepping stone or an anonymity
network may try to prevent ﬂow correlation by delaying the
packets, introducing chaff trafﬁc, or even splitting the ﬂow in
several subﬂows.

We introduce a game-theoretic framework for this problem.
The framework is used to derive the Nash equilibrium under two
different adversary models: the ﬁrst one, when the adversary is
limited to delaying packets, and the second, when the adversary
also adds dummy packets and removes packets from the ﬂow. As
the optimal decoder is not computationally feasible, we restrict
the possible decoder to one that estimates and compensates the
attack. Our analysis can be used for understanding the limits of
ﬂow correlation based on packet timings under an active attacker.

Index Terms—trafﬁc analysis, game theory, ﬂow watermark,

network security

I. INTRODUCTION

Network attackers intentionally hide their identity to avoid
prosecution. A broadly-used way of achieving this anonymity
is relaying the trafﬁc through a chain of compromised hosts
called stepping stones [1]. Intrusion detection and tracing
back an attack require deciding that two ﬂows are correlated.
Linking network ﬂows can also be used to compromise low-
latency anonymous networks, such as Tor.

Two approaches exist for ﬁnding correlated ﬂows: passive
analysis and active watermarks. They differ in whether the
ﬂow is modiﬁed or not. In general, an active watermark needs
shorter sequences but at the expense of being detectable [2].
An adversary (AD), for instance a stepping stone or an
anonymous network, may take countermeasures to prevent the
correlation such as introducing delays to packets or adding
dummy packets to the ﬂow, or even more drastic measures, e.g.
dividing the ﬂow into different subﬂows each taking different
paths. To the best of our knowledge, in previous works, only
[3] and [4] consider an AD, and in both the AD is limited to
delaying packets.

This paper studies the limits of trafﬁc analysis, passive
or active, in an adversarial environment. The most natural
solution to avoid the loop of proposing an attack and creating
an ad-hoc solution is to cast
the problem into a game-
theoretic framework and look for the optimum strategies that
the players, trafﬁc analyst (TA) and AD, should adopt. A
game-theoretic framework similar to the proposed one has

been used in other contexts such as Information Hiding [5]
or Source Identiﬁcation [6].

The rest of the paper is organized as follows: in Section II
we introduce the notation, together with some basic concepts
of game theory. Section III presents a rigorous denition of the
trafﬁc analysis game. Section IV solves the problem under an
AD model that only introduces delays. Section V deals with
a stronger AD problem that also adds chaff trafﬁc and divides
the ﬂow. Conclusions are presented in Section VI.

II. NOTATION AND BASIC CONCEPTS

We use the following notation. Random variables are de-
noted by capital letters (e.g., X), and their individual realiza-
tions by lower case letters (e.g., x). The domains over which
random variables are deﬁned are denoted by script letters (e.g.,
X ). Sequences of n random variables are denoted with X n if
they have random nature or by xn if they are deterministic. Xi
or xi indicate the ith element of X n or xn, respectively. The
probability distribution function (pdf) of a random variable
X is denoted by fX (x), x ∈ X . We use the same notation
to refer to pdf of sequences, i.e. fX n(xn), xn ∈ X n. When
no confusion is possible, we drop the subscript
in order
to simplify the notation. We denote with ∆ the difference
operation of a sequence, i.e ∆xn = {x2 − x1, . . . , xn − xn−1}
and with ∆xi = xi+1 − xi the ith element of this sequence.

A. Game Theory

: A1 × A2 (cid:55)→ R,

Game theory is the mathematical study of interaction among
independent, self-interested agents. Formally, a two-player
game is deﬁned as a quadruple G(A1, A2, u1, u2), where
Ai = {ai,1, . . . ai,ni} are the actions available to the ith player,
and ui
i = 1, 2 is the utility function
or payoff of the game for player i. An action proﬁle is the
double a ∈ A1 × A2. We are interested in zero-sum games,
where u1(a) + u2(a) = 0, ∀a ∈ A1 × A2, which means that
the gain (or loss) of utility of player 1 is exactly balanced by
the losses (or gains) of the utility of player 2. In this case,
we can simplify the game notation to a triplet G(A1, A2, u),
where u = u1 = −u2.

We say that an action proﬁle (a1,i∗ ; a2,j∗ ) represents a Nash
equilibrium (NE) if u(a1,i∗ ; a2,j∗ ) ≥ u(a1,i; a2,j∗ ) ∀a1,i ∈
A1 and u(a1,i∗ ; a2,j∗ ) ≤ u(a1,i∗ ; a2,j) ∀a2,j ∈ A2, intu-
itively, this means that none of the players can improve its

 
 
 
 
 
 
Fig. 1: Model of the TAG game

utility by modifying his strategy assuming the other player
does not change his own.

Games can be classiﬁed in simultaneous games, where
both players move unaware of the other player action, and
sequential games, where later players have some knowledge
about earlier actions. In sequential games an action proﬁle is
a subgame perfect equilibrium (SPE) if it represents a NE of
every subgame of the original game. Therefore, a SPE is a
reﬁnement of the NE that eliminates non-credible threats.

III. TRAFFIC ANALYSIS GAME

The Trafﬁc Analysis game (TAG) is represented in Figure 1.

In this game, there are two players: TA and AD.

The task of the TA is to create a test to accept or reject
the hypothesis that a ﬂow wm is indeed the same ﬂow as a
known one, xn, that can be the original ﬂow (passive trafﬁc
analysis) or the output of a watermarker. In this paper we
do not consider the problem of how to create the watermark.
Furthermore, all the simulations are done in a passive analysis
situation.

On the other side, the goal of the AD is to modify the
ﬂow in such a way that the TA decides that this sequence is
not a modiﬁed version of xn. In order to do this, AD can
delay any packet at most Amax seconds. We denote by an the
sequence of delays added by AD. In Section V, we propose
a more powerful attacker model that can add up to PA · n
dummy packets and remove PL · n packets, assuming they
are sent through a different path, hence PA is the maximum
ratio between chaff trafﬁc and original trafﬁc and PL is the
maximum probability of a packet being removed.

As shown in Figure 1 the ﬂow suffers two additional delays
Dn
2 that are due to the network between where xn is
1 and Dm
measured (TA-1) and AD, and between AD and where wm is
measured (TA-2), respectively. We represent by D the delay
that suffers a packet from TA-1 to TA-2, i.e. D = D1 + D2.
Note that ∆D is the packet delay variation (PDV), also called
jitter.

Let Y m represent ﬂows without any relation to xn, but from
the same application. We assume that f∆Y (∆y) is known by
both players, and deﬁne the hypotheses: H0: wm is not a
modiﬁed version of xn, and H1: wm is a modiﬁed version
of xn.

We deﬁne the TAG game as follows:

Deﬁnition 1. The T AG(AT A; AAD; u) is a simultaneous,
zero-sum game played by the FA and the AD, where

• The set of actions the FA can choose from, i.e. AT A,
is the set of acceptance regions for H1 for which the
probability of false positive (i.e., accepting H1 when H0
is true) is below a certain threshold η. Note that the

acceptance region can be different for each sequence.
Therefore, AT A = {Λ1(xn) : P r(ym ∈ Λ1(xn)) < η}.
• The set of possible attacks that the AD can choose from,
i.e. AAD. It depends on the assumed adversary model.

• The utility function is

the probability of detec-
tion, (i.e., accepting H1 when H1 is true), namely:
u(Λ1(xn), AAD) = P r(wm|H1 ∈ Λ1(xn)).

As the TA can choose its action Λ1(xn) after knowing wn,

the solution to the game is

u = min
AAD

max
AT A

u(AT A, AAD).

(1)

IV. DELAYING ADVERSARY MODEL

is
This section derives the detector under an AD that
limited to delaying the packets constrained to Amax seconds.
Under this condition, there exists a one-to-one correspondence
between xn and wm, consequently m = n.

We conﬁne the detector to those based on ﬁrst-order statis-
tics of the inter-packet delay (IPD), i.e., ∆x and ∆w, for fea-
sibility reasons. Among those, the FA constructs the optimal
detector which, according to Neyman-Pearson Lemma, is the
likelihood ratio test

(cid:18)(cid:90) (cid:90)

ˆA2

(cid:19)

ΛAD(wn, xn, f ˆAn|X n ) =

(cid:96)(H1|∆wn, ∆xn)
(cid:96)(H0|∆wn, ∆xn)

=

n−1
(cid:88)

i=1

log

f∆D(∆ri − ∆ˆai)f ˆAi,i+1|Xi,i+1
f∆Y (∆wi)

(ˆai, ˆai+1|xi,i+1)

dˆaidˆai+1

,

(2)
where rn is wn − xn, (cid:96) represents the log-likelihood function,
and f ˆAn the estimated joint pdf for An. Hence,
the test
chooses H1 when ΛAD(wn, xn, f ˆAn|X n ) ≥ (cid:15) where (cid:15) is a
threshold that we ﬁx to achieve a certain probability of false
positive. In this case,
the possible
joint pdfs for ˆAn given xn, i.e. AT A = f ˆAn|X n (an|xn).
Unfortunately, calculating the joint pdf that maximizes ΛAD
is a computationally intractable problem.

the TA actions are all

Therefore, we restrict the detector, at the expense of losing
the optimality, to one that estimates the sequence ˆan instead
of its joint pdf. In this case, the likelihood ratio test is
(cid:19)

n−1
(cid:88)

i=1

log

(cid:18) f∆D(∆i(rn − ˆan))
f∆Y (∆iwn)

,

(3)

ΛAD(wn, xn, ˆan) =

and the TAG game is modiﬁed as follows:

AT A = {ˆan : ∀i ∈ [0, n], 0 ≤ ˆai ≤ Amax }
AAD = {an : ∀i ∈ [0, n], 0 ≤ ai ≤ Amax}
u(ˆan, an) = P r(ΛAD(xn + an + Dn, xn, ˆan) > (cid:15)),

where P r(ΛAD(Y n, xn, ˆan) ≤ (cid:15)) = η.

From (1), we obtain the solution to the game

AT A = arg max

ˆa

ΛAD(wn, xn, ˆan)

(4)

(5)

(6)

(7)

(8)

AAD = arg min

an

P r(max

ˆan

ΛAD(xn + an + Dn, xn, ˆan) > (cid:15)).

(9)

ADTADetectorTAFingerprinterAs the AD must decide its action in real time and (9) is

computationally expensive, we approximate it by

AAD ≈ arg min

an

n−1
(cid:88)

i=1

log f∆Y (∆xi + ∆ai).

(10)

which is a good approximation when ∆D has zero-mean
and its variance is much smaller than ∆Y (as it
is the
case in practice). Note that under this approximation AD is
maximizing the likelihood of xn + an coming from yn, i.e.,
making the sequence as typical as possible.

A. Performance

In this section we construct a simulator and present the
scenarios we use in the remaining of the paper. Afterwards, we
compare the detector performance between the AD choosing
its action optimally and an AD that selects its attack randomly.
1) Simulator and Scenarios: Simulations are carried out in
the following way. First, we randomly generate one sequence,
X n. Then we generate 106 sequences Y n and we calculate
(cid:15) such that (7) holds. To deal with the probabilistic nature
of the delay, we repeat the following 50 times: we apply
Dn
1 , next, we implement the adversary action according to
(10). Subsequently, we introduce another delay Dn
2 . Finally,
we calculate the utility for this X n using (6). We repeat
the whole process for 1000 different X n, the plots show
the average utility for the 1000 sequences, ¯u. Recall that the
utility function is the probability of detection. In order to show
that AD is acting rationally we compare it with an AD that
introduces delays randomly, i.e., an is an independent and
identically distributed (i.i.d.) sequence uniformly distributed
between 0 and Amax.

Note that (3) needs an estimation of f∆D and f∆Y , to
this end we apply kernel smoothing techniques [7]. As it is
customary, we separate the data into two subsets: training, to
obtain the pdfs, and test, used in the simulator, using 50% of
the samples for each.

Scenario A represents a stepping stone that forwards SSH
trafﬁc inside the Amazon Web Services network. TA-1, AD
and TA-2 (cf. Figure 1) are EC2 instances located in Vir-
ginia, Oregon and California, respectively. We use the IPDs
from 8746 replayed SSH connection captures with 64 million
packets from [8] and [9]. The simulated delays correspond to
Scenario 10 from [10].

Scenario B simulates a web page accessed from Tor network
whose real origin is to be found. In it, TA-1 corresponds to
the web server, AD to the Tor entry relay, and TA-2 to the
client. For instance, this case can correspond to a company
in whose forum an anonymous insulting post has been placed
using Tor and it is to be known whether the source comes
from an employee within the company. We use the IPDs
of 113690 replayed HTTP connections that sum around 139
million packets taken from the same repositories. The delays
correspond to the measurements of Scenario 11 from [10].

Results are depicted in Figures 2a and 2b for Scenario A
and B, respectively. We see that if AD chooses the delays

(a) Scenario 1

(b) Scenario 2
Fig. 2: Performance under a delaying AD model.

optimally, the impact of the attack is much larger than using
random delays.

V. CHAFF TRAFFIC AND FLOW SPLITTING

Hitherto, we have assumed that there exists a one-to-one
relation between the ﬂows at the creator and detector; i.e.,
no packets are added or removed. In this section, we make
a robust test to repacketization and study the game when, in
addition to random delays, AD can also insert chaff trafﬁc and
divide the ﬂow, and TA-2 observes only one subﬂow.

To deal with packet addition and removal, TA matches each
packet from xn with the most likely from wm, m ≤ (1 +
PA)n, denoting this as i → j, as follows: |xi − (wj − ρ)| <
|xi − (wk − ρ)|, ∀k (cid:54)= j, and to avoid considering it lost
|xi − (wj − ρ)| > γ, where ρ is a synchronization constant
obtained through an exhaustive search (auto-synchronization
property), and γ is a threshold for which a packet is considered
lost. To prevent that two packets i1 and i2 are matched to the
same j packet, the set of possible matching candidates for
the later packet is reduced to the non-matched ones. Also γ
should be big enough so that the probability that a packet
is considered lost when it actually is not is very small, for
instance our simulation uses γ = Q|∆D|,0.999 + Amax where
Q|∆D|,0.999 means the 0.999-quantile of the absolute value of
∆D. This procedure outputs two subsequences, wn2 and xn2,
where n2 ≤ n.

After this matching we apply a modiﬁcation to ΛAD in (3)

10−610−510−410−310−210−110000.10.20.30.40.50.60.70.80.91PF¯uOpt. AD (L=5, Amax=0.5s)Non Opt. AD (L=5, Amax=0.5s)Opt. AD (L=10, Amax=0.1s)Non Opt. AD (L=10, Amax=0.1s)Opt. AD (L=10, Amax=0.5s)Non Opt. AD (L=10, Amax=0.5s)10−610−510−410−310−210−110000.10.20.30.40.50.60.70.80.91PFuOpt. AD (L=10, Amax=0.5s)Non−Opt.AD(L=10,Amax=0.5s)Opt. AD (L=25, Amax=0.1s)Non−Opt. AD (L=25, Amax=0.1s)Opt.AD(L=25,Amax=0.5s)Non−Opt. AD (L=25, Amax=0.5s)that takes into account the new sequence length as follows:

ΛAD(wn2 , xn2 , ˆan2 ) = (n − n2) log(PL) +

n2−1
(cid:88)

log (PL

+(1 − PL)

i=1
f∆D(∆wi − ∆xi − ∆ˆai)
f∆Y (∆wi)

(cid:19)

,

(11)

We propose a new AD model that apart from adding delays
as previously, it can remove up to PL · n packets and add at
most PA · n dummy packets. Formally, the available actions
for the adversary are:

AAD = {an × ln × cnA : 0 ≤ ai ≤ Amax, li = {0, 1}

n
(cid:88)

i=1

li
n

≤ PL,

nA
n

≤ PA, m = n + nA −

n
(cid:88)

i=1

li},

(12)

where ln is a binary sequence that represents which packets
are removed from the ﬂow, and cnA is the sequence with the
timing of the nA introduced dummy packets.

A. Results

To evaluate the proposed robust algorithm, we modify
the simulator using the matching process as follows: longer
sequences, i.e. Y n+(cid:98)PAn(cid:99), are needed to calculate (cid:15). After-
wards, AD chooses its action such that (11) is minimized. We
compare the optimal AD with two non-optimal ADs: a) NO1
AD chooses its attack randomly, i.e an is an i.i.d. sequence
uniformly distributed between 0 and Amax, ln is a binary
random sequence that contains (cid:98)nPL(cid:99) ‘1’s, and cnA is an i.i.d.
sequence uniformly distributed between the timing of the ﬁrst
packet and the timing of the last packet. The b) NO2 AD
selects an to minimize (11) (optimally) but chooses ln and
cnA identically as the previous AD.

Results are depicted in Figures 3a and 3b. We see that the
chaff trafﬁc location when there are no losses does not make
a big impact (the Opt-AD and NO-2 AD lines difference is
very small). The rest of the data conﬁrm that AD can harm
the TA considerably more when deciding its actions logically
than acting randomly.

VI. CONCLUSIONS

Using a game theoretic framework we have analyzed the
ﬂow linking problem. This problem consists in deciding if
two ﬂows are linked, having an adversary in the middle that
tries to impair the correlation. Using this framework we obtain
the optimal choices if both players act rationally. However,
in a real implementation ﬁnding these optimal choices is not
computationally feasible. This made us restrict the decoder to
those that estimate the attack. We apply it to two different
adversaries, one that only delays packets and another that can
also add and drop packets from the ﬂow. While in the present
work the original ﬂow is given, a future work will allow this
ﬂow to be modiﬁed through a watermark.

ACKNOWLEDGMENT

Research supported by Iberdrola Foundation through the
Prince of Asturias Endowed Chair in Information Science and

(a) Scenario 1, L=20, Amax = 500ms

(b) Scenario 2, L=30, Amax = 500ms
Fig. 3: Performance under chaff packets and removed packets.

Related Technologies.

REFERENCES

[1] S. Staniford-Chen and L. Heberlein, “Holding intruders accountable on
the internet,” in Security and Privacy, 1995. Proceedings., 1995 IEEE
Symposium on, may 1995, pp. 39 –49.

[2] X. Luo, P. Zhou, J. Zhang, R. Perdisci, W. Lee, and R. K. C. Chang,
“Exposing invisible timing-based trafﬁc watermarks with BACKLIT,”
in Proceedings of
the 27th Annual Computer Security Applications
Conference. ACM, 2011, pp. 197–206.

[3] D. L. Donoho, A. G. Flesia, U. Shankar, V. Paxson, J. Coit, and
S. Staniford, “Multiscale stepping-stone detection: detecting pairs of
jittered interactive streams by exploiting maximum tolerable delay,” in
Proceedings of the 5th international conference on Recent advances in
intrusion detection, ser. RAID’02. Berlin, Heidelberg: Springer-Verlag,
2002, pp. 17–35.

[4] A. Blum, D. Song, and S. Venkataraman, “Detection of interactive step-
ping stones: Algorithms and conﬁdence bounds,” in Recent Advances in
Intrusion Detection, ser. Lecture Notes in Computer Science. Springer
Berlin / Heidelberg, 2004, vol. 3224, pp. 258–277.

[5] P. Moulin and J. O’Sullivan, “Information-theoretic analysis of informa-
tion hiding,” Information Theory, IEEE Transactions on, vol. 49, no. 3,
pp. 563–593, 2003.

[6] M. Barni and B. Tondi, “The source identiﬁcation game: An information-
theoretic perspective,” IEEE Transactions on Information Forensics and
Security, vol. 8, no. 3, pp. 450–463, 2013.

[7] A. W. Bowman and A. Azzalini, Applied Smoothing Techniques for
Data Analysis: The Kernel Approach with S-Plus Illustrations (Oxford
Statistical Science Series). Oxford University Press, USA, Nov. 1997.
[8] D. Kotz, T. Henderson, I. Abyzov, and J. Yeo, “CRAWDAD trace
set dartmouth/campus/tcpdump (v. 2004-11-09),” http://crawdad.cs.
dartmouth.edu/dartmouth/campus/tcpdump, Nov. 2004.

[9] R. R. R. Barbosa, R. Sadre, A. Pras, and R. van de Meent, “Sim-
pleweb/university of twente trafﬁc traces data repository,” Centre for
Telematics and Information Technology University of Twente, Enschede,
Technical Report, 2010.

[10] J. A. Elices and F. P´erez-Gonz´alez, “Measures to model delays on
internet,” http://www.unm.edu/∼elices/captures.html, Jan. 2013.

10−610−510−410−310−210−110000.10.20.30.40.50.60.70.80.91PFuOpt. AD (PA=1, PL=0.5)NO1 AD (PA=1, PL=0.5)NO2 AD (PA=1, PL=0.5)Opt. AD (PA=1, PL=0)NO1 AD (PA=1, PL=0)NO2 AD (PA=1, PL=0)Opt. AD (PA=0, PL=0.5)NO1 AD (PA=0, PL=0.5)NO2 AD (PA=0, PL=0.5)10−610−510−410−310−210−110000.10.20.30.40.50.60.70.80.91PFuOpt. AD (PA=1, PL=0.5)NO1 AD (PA=1, PL=0.5)NO2 AD (PA=1, PL=0.5)Opt. AD (PA=1, PL=0)NO1 AD (PA=1, PL=0)NO2 AD (PA=1, PL=0)Opt. AD (PA=0, PL=0.5)NO1 AD (PA=0, PL=0.5)NO2 AD (PA=0, PL=0.5)