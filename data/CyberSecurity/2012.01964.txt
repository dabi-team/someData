Proactive DDoS Attack Mitigation in Cloud-Fog
Environment using Moving Target Defense

1

Vaishali Kansal
Department of Computer Science and Engineering
Indian Institute of Technology, Roorkee, Uttarakhand, India
veshukansal@gmail.com
Mayank Dave
Department of Computer Engineering
National Institute of Technology, Kurukshetra, Haryana, India
mdave@nitkkr.ac.in

(cid:70)

Abstract—Distributed Denial of Service (DDoS) attacks are serious
cyber attacks and mitigating DDoS attacks in cloud is a topic of ongoing
research interest which remains a major security challenge. Fog comput-
ing is an extension of cloud computing which has been used to secure
cloud. Moving Target Defense (MTD) is a newly recognized, proactive
security defense that can be used to mitigate DDoS attacks on cloud.
MTD intends to make a system dynamic in nature and uncertain by
changing attack surface continuously to confuse attackers. In this paper,
a novel DDoS mitigation framework is presented to support Cloud-Fog
Platform using MTD technique (CFPM). CFPM applies migration MTD
technique at fog layer to mitigate DDoS attacks in cloud. It detects
attacker among all the legitimate clients proactively at the fog layer
and isolate it from innocent clients. CFPM uses an effective request
handling procedure for load balancing and attacker isolation procedure
which aims to minimize disruption to cloud server as well as serving fog
servers. In addition, effectiveness of CFPM is evaluated by analyzing
the behaviour of the system before and after attack, considering different
possible scenarios. This approach is effective as it uses the advantage
of both MTD technique and Fog computing paradigm supporting cloud
environment.

Keywords—Active Fog server, Attack Fog server, CFPM, Cloud servers,
DDoS attack, Fog Computing, Load Balancing, Migration, MTD.

1 INTRODUCTION
Amongst the diverse threats to cyber security Distributed
denial-of-service (DDoS) attack [1]–[3] is most prevailing
nowadays. In DDoS attacks, target is overloaded with
enormous trafﬁc by a large number of connected devices
that are distributed across the Internet. This results in
loss of equipment resources and network bandwidth.

Securing cloud from these attacks has become a big
challenge [4]–[6]. Cloud servers have the potential to
perform computing and storage tasks, without the di-
rect involvement of user. But as they are faraway, it is
required to send all the raw data (could be sensitive)

to the cloud servers over the internet which may have
some privacy and security issues. Various DDoS attack
handling techniques in cloud [7]–[9] are proposed.

Fog computing or fogging [10],

is a decentralized
computing infrastructure that distributes data, services
of computing, storage, networking and communications
between the cloud and the data source. Fog computing
is basically an extension of cloud computing. In order
to provide faster ICT services to the end users, it brings
cloud computing capabilities to the edge of the network.
The goal of fogging is to enhance efﬁciency by reducing
the total amount of sensitive data that is transported to
the cloud for analysis, storage and processing [11].

Though fog computing conserves network bandwidth
and improves system response time but at the same time
it is also prone to cyber attacks such as DDoS attacks.
As the capacity of each fog node is restricted, these
attacks can be detrimental to fog computing’s availability
also [12]. As of now it is critical to secure cloud with
additional measures as fog layer alone is not sufﬁcient
enough.

One newly recognized cyber defense strategy, which
helps in mitigating DDoS attacks is introduced i.e. Mov-
ing Target Defense (MTD) [13]–[15]. MTD keeps the net-
work environment less deterministic and unpredictable
by continuously changing the attack surface. This uncer-
tainity induces confusion for attackers, simultaneously
increasing the attacker’s time, efforts, and cost while
decreasing the cost of defensive strategies. MTD has its
potential applications in various areas. In the literature
Fog computing and MTD has been used separately for
cloud security. Also MTD techniques have not been
applied to fog computing paradigm.

In this paper an approach CFPM is presented, which
mitigates DDoS attacks in Cloud-Fog Platform using
Moving Target Defense(MTD) as the underlying tech-

0
2
0
2

c
e
D
3

]

R
C
.
s
c
[

1
v
4
6
9
1
0
.
2
1
0
2
:
v
i
X
r
a

 
 
 
 
 
 
nique. CFPM monitors the trafﬁc generated from all the
connected users to look for abnormalities. It handles the
DDoS attack at fog layer using the concept of migration
MTD. Migration MTD is a dynamic platform diversiﬁ-
cation MTD technique. This approach is effective as it
takes the advantage of both Fog computing and MTD to
secure cloud.

2 RELATED WORK
Several techniques have been developed to mitigate the
impact of DDoS attacks in cloud [7], [8]. Ahmed et al. [9]
investigated such mitigation techniques and compared
them in cloud environment. Fog computing [10] is one
of the promising way to deal with such attacks in cloud.
Decoy information technology called Fog computing has
been used by the authors in [11] to secure the cloud. But
fog computing itself is susceptible to such attacks, which
is investigated by the authors in [12] as fog devices work
at the bottom/edge of networks.

MTD emerged as a promising approach to network
security. Li Jason et al. [15] productized MTD research
technology, called Self-shielding Dynamic Network Ar-
chitecture (SDNA) technology, now known as Cryptonite
NXT. MTD intends to create asymmetric uncertainty on
the attacker’s side by constantly changing the attack
surface. Zheng et al. [16] presented a comprehensive
survey on MTD and its implementation strategies from
architectural perspective.

Based on the kind of changes MTD is making to the
system it has been classiﬁed into four categories i.e.,
Software based diversiﬁcation , Runtime based diver-
siﬁcation, Communication diversiﬁcation and Dynamic
Platform diversiﬁcation by the authors in [17]. MTD has
its potential applications in various areas. Different MTD
techniques have been applied in different domains. Au-
thors in [18], [19] have applied runtime based diversiﬁca-
tion MTD techniques i.e., instruction-set randomization
and address-space randomization to counter attack. Jack-
son et al. [20] have used software based diversiﬁcation
MTD techniques i.e., software diversity and compiler
generated diversity and evaluated their effectiveness. Al-
Saher et al. [21] presented a MTD architecture called
mutable networks(MUTE) which uses communication
diversiﬁcation MTD technique i.e., IP address random-
ization. Thompson et al. [22] proposes an approach that
applies rotation of multiple operating systems to enhance
security i.e. diversity technique has been used which
comes under dynamic platform diversiﬁcation MTD.

Zhuang et al. [23] applied simulation-based experi-
ments to explain enhanced efﬁciency due to the introduc-
tion of diversiﬁcation and randomization in the system.
Comparison of different MTD techniques has been pro-
posed by the authors in [24]. Authors in [25], [26] studied
the effectiveness of MTD using security models and
investigated applications of MTD to network security.
Okhravi et al. [27], [28] has applied dynamic platform
diversiﬁcation MTD technique as defense mechansim on

2

critical infrastructure. MTD has been used for mitigation
of DDoS attacks against a proxy based architecture by
the authors in [29]–[32]. Authors in [33], [34] have used
dynamic platform diversiﬁcation i.e. shufﬂe MTD as
the underlying MTD technique to mitigate DDoS attack
proactively at proxy layer.

Peng et al. [35] ascertained whether MTD is effective
in protecting Cloud-based services and if yes, upto what
extent, with heterogeneous and dynamic attack surfaces.
Wang et al. [36] proposed a cost effective defense against
DDoS and Covert channel attacks using MTD. Authors
in [37] have used IP address randomization as MTD
technique for cloud computing platform. The authors
in [38], [39] have combined differnt dynamic platform
diversiﬁcation MTD techniques i.e, Shufﬂe and Diversity
and evaluated it for cloud computing. This combined
approach is very efﬁcient as it ampliﬁes randomization.
So due to its promising capabilities MTD is a suitable
strategy for addressing cloud computing security issues.
But MTD has not been applied to fog paradigm in the
ﬁeld of research in past. Bazm et al. [40] evaluated that
MTD can be applied to both multi-cloud and decentral-
ized cloud infrastructures such as Fog.

This paper presents an approach CFPM that mitigates
DDoS attack in a combined Cloud-Fog Platform using
dynamic platform diversiﬁcation MTD technique i.e.,
migration MTD technique.

3 SYSTEM MODEL
3.1 Overview
The proposed approach CFPM, mitigates DDoS attacks
in the cloud by using the concept of fog computing
with migration moving target defense technique. Fig.
1 shows the proposed architecture, which consists of 3
components:

(a) cloud servers
(b) fog layer comprising of many fog servers
(c) users (both innocent and malicious)

1)
2)
3)
Fog servers present in the fog layer are in two modes
i.e. sleep mode or active mode. Active fog servers are
used for serving the users and the grey colored fog server
i.e., sleeping fog server is activated only if any attacker
is detected so sleeping fog server is named as Attack
Fog server. Number of sleeping fog servers are very less
compared to active fog servers.

This architecture permits the user to access the services
provided by fog servers only after successful authentica-
tion. User before connecting to any fog server mention
the maximum requests it can send per second and at the
time of requesting it passes its current need.

A fog server can serve many users and a user can
request any number of times in a second until or unless
it has reached its limit i.e., it has requested the maximum
number of requests in total that it has mentioned at the
time of connection. If the request can not be handled at
the fog layer i.e., all fog servers are fully occupied, then
only the request is passed to the cloud server.

∙

If set to 1, then it signiﬁes the fog server is in
active mode.

3

2) Free Bit:
∙

If set to 0, then it signiﬁes the fog server is
fully occupied.
If set to 1, then it signiﬁes the fog server can
serve more requests.

∙

3) Sum: It is the sum of the entries in countﬁd[ ]
array maintained for each fog server i.e., the total
number of requests served by a fog server.

Figure 1: System Model

Figure 2: Structure of Flag[ ] variable

3.2 Preliminaries
Table 1 shows various notations used in the CFPM
approach presented in this paper.

4 PROPOSED SCHEME
In this section details of the proposed scheme are dis-
cussed.

Table 1: Main Notations

Notation

Meaning

4.1 Initial Assignment

uid

ﬁd

thresh

𝐹𝑐𝑎𝑝

𝑁𝑢𝑠𝑟

𝑅𝑒𝑞𝑠𝑧

max[i]

user id

fog id

data processing speed of fog server

For the initial assignment of all the local and global vari-
ables used in CFPM approach, Algorithm 1 is executed.

maximum requests a fog server can handle per second

Algorithm 1 Initial Assignment

total number of users

size of the request

maximum requests that a user "i" can send per second

for int i = 1 to 𝑁𝑢𝑠𝑟 do

1: function GLOBAL-ASSIGN
2:
3:
4:

account[i] = 0;
max[i] = max requests user can send per sec-

limit[i]

maximum usage of a user "i"

ond;

countﬁd[i]

number of requests served by a fog server for a user
"i"

ﬂag[i]

state of each fog server "i"

account[i]

number of requests handled for a particular user "i"
by either one fog server or a number of fog servers or
cloud server collectively

score[i]

current usage of user "i"

Fig. 2 shows the structure of Flag[ ] variable, which
deﬁnes the state of each fog server using 3 ﬁelds as
follows:

1) Mode Bit:
∙

If set to 0, then it signiﬁes the fog server is in
sleep mode.

limit[i] = 𝑚𝑎𝑥[𝑖] × 𝑅𝑒𝑞𝑠𝑧

end for

end for
for every ﬁd do

Flag[ﬁd].sum = 0;
Flag[ﬁd].free = 1;

5:
6:
7:
8:
9:
10:
11: end function
12: function LOCAL-ASSIGN
for every ﬁd do
13:
14:
15:
16:
17:
18: end function

countﬁd[i] = 0;

end for

end for

for int i = 1 to 𝑁𝑢𝑠𝑟 do

After each second GLOBAL-ASSIGN() and LOCAL-
ASSIGN() functions are called to initialize the variables.
For all fog servers mode bit in Flag[ ] variable is initial-
ized at the time of fog server creation.

4.2 Request Sending Procedure
Whenever any user sends a request to a fog server or
a fog server sends a request to another fog server, then
Algorithm 2 is executed.

Algorithm 2 Send Request

1: function SEND-REQUEST(uid, need)
2:
3:

For any ﬁd
if Flag[ﬁd].mode = = 1 && Flag[ﬁd].free = = 1

then

if user request then

HANDLE-REQUEST(uid, need);

SERVE(uid, need);

Forward Request-CloudServer(uid, need);

else

4:
5:
6:
7:
8:
9:
10:
11:
12: end function

end if

end if

else

Firstly it is checked whether there is any active free
fog server available or not by accessing the mode bit
and free bit of Flag[ ] variable for all fog servers. If for
all fog servers free bit is 0 i.e., no fog server is free to
serve the request, then the request is send to the cloud
server.

Otherwise if for any fog server mode bit and free
bit is 1, then it is checked whether the request is from
user or neighboring fog server. If request is from user,
then HANDLE-REQUEST(uid, need) function is called
in which the user id of the user to be served is passed
along with its current need. Otherwise if the request is
from another fog server, then SERVE(uid, rem) function
is called and, the user id of the user is passed for which
the requested fog server was unable to serve along with
the remaining need of the user.

4.3 Request Handling Procedure
Whenever any fog server receives a request from a user
or any other neighboring fog server it runs Algorithm 3.
then HANDLE-
function is called otherwise if
then only

is
REQUEST(uid, need)
the request
SERVE(uid, need) function is called.

is from another fog server,

from user,

request

the

If

In HANDLE-REQUEST(uid, need) function the ac-
count[uid] value of the user to be served is accessed.
If the value is not null i.e, the user is not present in
blacklist, then the fog server updates the account[uid]
value by adding the current need of the user into it. Then
it calculate the score[uid] value using Eq. 1.

𝑠𝑐𝑜𝑟𝑒[𝑢𝑖𝑑] = 𝑎𝑐𝑐𝑜𝑢𝑛𝑡[𝑢𝑖𝑑] × 𝑅𝑒𝑞𝑠𝑖𝑧𝑒

(1)

Algorithm 3 Request Handling

4

else

then

end if

end if

SERVE(uid, need);

ACTIVATE-ATTACKFOG(uid);

account[uid] = account[uid] + need;
score[uid] = 𝑎𝑐𝑐𝑜𝑢𝑛𝑡[𝑢𝑖𝑑] × 𝑅𝑒𝑞𝑠𝑧
if score[uid] > limit[uid]

countﬁd[uid] = countﬁd[uid] + need;
int sum = 0;
for int i = 1 to 𝑁𝑢𝑠𝑟 do

1: function HANDLE-REQUEST(uid, need)
if account[uid] != NULL then
2:
3:
4:
5:
6:
7:
8:
9:
10:
11: end function
12: function SERVE(uid, need)
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31: end function

Flag[ﬁd].sum = sum;
Set Flag[ﬁd].free = 0;
else if sum > 𝐹𝑐𝑎𝑝 then
rem = sum - 𝐹𝑐𝑎𝑝;
countﬁd[uid] = countﬁd[uid] - rem;
Flag[ﬁd].sum = 𝐹𝑐𝑎𝑝;
Set Flag[ﬁd].free = 0;
SEND-REQUEST(uid, rem);
exit( );

end for
if sum = = 𝐹𝑐𝑎𝑝 then

sum = sum + countﬁd[i];

Flag[ﬁd].sum = sum;

end if

else

It then compares the score[uid] value with the limit[uid]
value. If score[uid] value is greater than the limit[uid]
value, then ACTIVATE-ATTACKFOG(uid) function is
called by the fog server to deal with the attacker who is
trying to send more requests than its maximum requests.
Otherwise if score[uid] value is less than or equal to the
limit[uid] value, then fog server accepts the user request
and calls SERVE(uid, need) function.

In SERVE(uid, need) function fog server updates the
count[uid] value by adding the need value. It then calcu-
lates the total number of requests it is currently serving
i.e., sum of the entries of its countﬁd[ ] variable.

All the fog servers have the same data processing
speed so maximum requests it can serve per second i.e.,
𝐹𝑐𝑎𝑝 would also be same that can be calculated using Eq.
2.

𝐹𝑐𝑎𝑝 =

𝑡ℎ𝑟𝑒𝑠ℎ
𝑅𝑒𝑞𝑠𝑖𝑧𝑒

(2)

A fog server is performing many functions so to pre-
vent it from getting overloaded, the number of requests
that it can serve should be restricted to a certain number.
We are assuming that all the fog servers have a certain
capacity 𝐹𝑐𝑎𝑝 depicting the number of requests it can

serve in total. Using this constraint the CFPM approach
balances the load among all the available fog servers.

Further, the fog server compares its capacity with the
total requests it has served. If its capacity has reached
to its limit value i.e., if sum value is equal to 𝐹𝑐𝑎𝑝,
then it updates Flag[ﬁd].sum equal to sum and sets its
Flag[ﬁd].free value to 0 and exit.

Otherwise if sum value is greater than 𝐹𝑐𝑎𝑝, then
it means the fog server is unable to serve the user
completely. It then calculate the remaining number of
requests and updates the count[uid] value equal to the
number of requests it has served for the user. It updates
Flag[ﬁd].sum equal to 𝐹𝑐𝑎𝑝 and sets its Flag[ﬁd].free value
to 0. Further,
it calls the SEND-REQUEST(uid, rem)
function to request to another available fog server to
serve the remaining need of the user.

But if sum is less than 𝐹𝑐𝑎𝑝, then it signiﬁes the normal
execution where the fog server is able to serve the user
completely or serves its remaining need completely. So
in this it only updates Flag[ﬁd].sum equal to sum.

4.4 Attacker Isolation Procedure

The proposed approach CFPM, uses Attack Fog servers
to handle attack. Algorithm 4 is executed if ACTIVATE-
ATTACKFOG(uid) function is called by any fog server.

Algorithm 4 Attack Fog Activation and Attacker Isola-
tion

Activate any fog server with Flag[ﬁd].mode = 0;
Flag[ﬁd].mode = 1;
ATTACKER-ISOLATION(uid, ﬁd);

1: function ACTIVATE-ATTACKFOG(uid)
2:
3:
4:
5: end function
6: function ATTACKER-ISOLATION(uid, ﬁd)
7:
8:
9:
10:
11:
12: end function

uid ← attacker;
Add uid to blacklist;
account[uid] = NULL;
Assign uid to ﬁd;
Flag[ﬁd].mode = 0;

In this a sleeping fog server having Flag[ﬁd].mode as 0
is activated by changing Flag[ﬁd].mode value to 1. Further,
ATTACKER-ISOLATION(uid, ﬁd) function is called in
which user id received in the function is declared as
attacker and is added to the blacklist. The account value
of the attacker is set to NULL to signify that it would no
longer be served by any fog server.

After that

the attacker is migrated to the attack
fog server and the activated fog server again sets its
Flag[ﬁd].mode value to 0, which results in isolation of the
attacker.

5

Figure 3: Flowchart showing Request Handling and Attacker
Isolation Procedure

Fig. 3 provides a brief overview with the help of
ﬂowchart representing the execution of all cases and
the actions taken in all the cases as mentioned in the
algorithms.

5 RESULT AND ANALYSIS

In this paper a conceptual approach CFPM is proposed,
in which DDoS attack is mitigated at fog layer using
migration MTD technique with the aim of minimizing
disruption to serving fog servers.

Various cases are possible based on the need of the
users and current capability of the fog servers which
are handled using the proposed algorithms. MATLAB
is used to experimentally evaluate the CFPM approach.

5.1 Possible Scenarios

Considering a system with ’n’, as the total number of
clients where each client is allowed to send maximum
100 requests per second, assuming Reqsize to be 10 Mb.
So max[i] entry and limit[i] for all users "i" would be 100
and 1000 respectively.

The network parameters that are used during the

simulation are listed in Table 2.

6

Figure 5: Comparison of Max[ ] and Account[ ]

Table 3: Flag variable for case A

Fields

F1.mode

F1.free

Values

1

1

F1.sum

0

50

140

180

230

260

360

F2.mode

F2.free

F2.sum

0

F3.mode

F3.free

F3.sum

0

0

1

1

1

(b) Case B:

Fig. 6 shows the case when the total number of
requests served by a fog server is equal to capacity
of fog server.

Table 2: Simulation Parameters

Parameter

Value

thresh

5 Gbps

𝑅𝑒𝑞𝑠𝑖𝑧𝑒

10 Mb

𝐹𝑐𝑎𝑝

500 requests/second.

max[i]

100 requests/second

limit[i]

1000 Mbps

account[i]

Number of requests generated in a second

score[i]

calculated

F1, F2 and F3 are the fog servers present at fog layer
in which F1 and F3 are active fog servers while F2 is
a sleeping fog server. All the fog servers are having
data processing speed as 5 Gbps. So using (2) we can
calculate maximum number of requests that a fog server
can handle efﬁciently i.e., 𝐹𝑐𝑎𝑝 = 500.

For a user "i" the value of account[i] is updated at the
time of request generation and further using (1) score[i]
is calculated. Then score[i] is compared to limit[i], which
results in following two possible cases 1 and 2:

(1) Case 1:

It is executed when the score[i] value is either equal
to or less than limit[i] value. In this case SERVE()
function is called which further compares sum
value and 𝐹𝐶𝑎𝑝 value resulting in four possible
cases - A, B, C and D:

(a) Case A:

Fig. 4 shows the case when the total number of
requests served by a fog server is less than capacity
of fog server. Fig. 5 shows the comparison of
max[] and account[] values. Table 3 shows the ﬁnal
updated values in Flag[ ] variable for all respective
fog servers.

Figure 6: Case B : 𝑆𝑢𝑚 = 𝐹𝐶𝑎𝑝

Figure 4: Case A : 𝑆𝑢𝑚 < 𝐹𝐶𝑎𝑝

F1

fog

this

case

server

In
serve users
U1,U2,U3,U4,U5 and U6 and updates the value
of all the variables. Comparison of max[] and
account[] is as shown in Fig. 7. After serving it
gets fully occupied so it updates its Flag[F1].free
value to 0 as shown in Table 4 depicting that it
has reached its limit and can no longer serve any
user.

7

updates the variables accordingly and their com-
parison is as shown in Fig. 9. When U6 generates
100 requests then sum value is incremented to 550
which is greater than the capacity of fog server.
So F1 server calculates the remaining need of user
U6 which it was unable to serve and update its
count[U6] value to the number of requests it has
served for user U6. It then updates its Flag[F1].sum
value to 𝐹𝐶𝑎𝑝 and Flag[F1].free value to 0 as shown
in Table 5, which signiﬁes that it has reached to its
limit. Further, to serve the remaining need of the
user U6 it calls SEND-REQUEST(U6, 50) function
and sends request to another available fog server
F3. F3 then serve user U6. In this case F1 and F3
fog servers collectively serves the need of user U6
as shown in Fig. 8.

Figure 9: Comparison of various variables for case C

Table 5: Flag variable for case C

Fields

F1.mode

F1.free

F1.sum

F2.mode

F2.free

1

0

F2.sum

0

F3.mode

F3.free

Values

1

0

100

185

260

355

450

500

0

1

1

1

F3.sum

0

50

(d) Case D:

Fig. 10 shows the case when the total number of
requests served by a fog server is greater than the
capacity of fog server and all the active fog servers
collectively are unable to serve the requests of
the user completely. So to handle the case request
is forwarded to cloud server. Fig. 11 shows the
comparison of all the variables for all users. Final
value of Flag[ ] variable for all fog servers is shown
in Table 6 .

Figure 7: Comparison of Max[ ] and Account[ ]

Table 4: Flag variable for case B

Fields

F1.mode

F1.free

F1.sum

F2.mode

F2.free

1

0

F2.sum

0

F3.mode

F3.free

F3.sum

0

Values

1

0

100

200

250

300

400

500

0

1

1

1

(c) Case C:

Fig. 8 shows the case when the total number of
requests served by a fog server is greater than the
capacity of fog server so the requests are served
by some active fog servers collectively.

Figure 8: Case C : 𝑆𝑢𝑚 > 𝐹𝐶𝑎𝑝 and request served by fog
servers collectively

In this case after serving users U1,U2,U3,U4 and
U5, fog server F1 serves 450 requests in total and

8

Table 6: Flag variable for case D

Fields

F1.mode

F1.free

F1.sum

F2.mode

F2.free

F2.sum

F3.mode

F3.free

F3.sum

1

0

0

1

0

Values

1

0

100

200

285

380

480

500

0

1

1

0

85

185

285

360

460

500

attacker.
After this attacker U2 is assigned to the attack fog
server and again it is send to the sleeping mode
by changing its Flag[F2].mode bit value to 0. This
results in the isolation of attacker U2 from the
system. Same procedure is executed for user U5
also. Updations made to the Flag[ ] variable are
shown in Table 7.

Figure 10: Case D : 𝑆𝑢𝑚 > 𝐹𝐶𝑎𝑝 and request served by cloud
server

Figure 11: Comparison of various variables for case D

(2) Case 2:

This case is executed when the score[i] value is
greater than limit[i] value for any user "i". Fig. 12
shows how the attacker isolation procedure works.
Fig. 13 shows the comparison of all the variables
for the users and updated blacklist.
In this U2 is generating 200 requests that results
in its score[U2] value as 2000 which is greater than
its limit[U2] value. So ACTIVATE-ATTACKFOG
function is called, which activates a sleeping fog
server F2 also named as attack fog server by
changing Flag[F2].mode bit value to 1. F2 fog server
declares U2 as attacker and add U2 to blacklist. It
then updates account[U2] value to NULL, which
act as a notiﬁcation for all the fog servers that no
one has to serve user U2 as it is observed as an

Figure 12: Case 2 : Attacker Isolation

Figure 13: Comparison of the variables for case 2

Table 7: Flag variable for case 2

Fields

F1.mode

F1.free

F1.sum

F2.mode

F2.free

F2.sum

F3.mode

F3.free

0

0

0

F3.sum

0

Values

1

1

100

150

200

300

1

0

1

1

1

Fig.14 shows the comparison of Cases A,B,C and D
under Case 1 with respect to Sum and 𝐹𝐶𝑎𝑝 and number
of fog servers needed (for case C, two fog servers would
be needed and for case D even two fog servers would not
sufﬁce. Therefore remaining need is forwarded to cloud
server).

Figure 14: Comparison of Cases A,B,C and D

5.2 Evaluation

Fig. 15 shows the evaluation of the system on imple-
mentation of CFPM approach before and after attack. A
fog server can handle 500 requests per second so in one
second 1000 requests can be served by two fog servers.
In case there is no attacker present, after every second
same number of requests are handled.

But if there is an attacker present in the system, say the
attacker arrives at 4th second, then the fog server detect
it by comparing certain values and call ACTIVATE-
ATTACKFOG function.

Detection and function calling will take very less
time (fraction of seconds), so for only that amount of
time there would be a minor decrease in the number
of requests served by fog server. After that fog server
can process the request in the usual manner. As after
detection of attacker, attack fog server is responsible
for handling the attacker without any involvement of
the detecting fog server. This evaluation proves that the
proposed approach CFPM is very effective.

9

Figure 15: Evaluation of the system before and after attack

6 CONCLUSION

For mitigating DDoS attacks in the cloud, different ap-
proaches were proposed in the literature. Fog computing
and MTD has been used separately to address the secu-
rity issues in cloud. MTD has never been applied to fog
paradigm. After evaluating the effectiveness of MTD it
has been observed that MTD can be applied to decentral-
ized cloud infrastructure such as fog. This paper presents
a proactive novel approach CFPM, that mitigates DDoS
attacks in cloud using fog layer with applied migration
MTD technique. CFPM detects and isolate the attacker
based on certain network parameters at fog layer. By
using migration MTD technique it migrates the attacker
to attack fog server minimizing disruption to serving fog
servers and requiring no involvement of cloud server.
Attack fog server is an activated fog server which after
migration of attacker again goes into the sleep mode
resulting in the isolation of the attacker. CFPM approach
is analyzed under different cases and performance of the
system before and after attack is evaluated. CFPM uses
the idea of load balancing to prevent fog servers from
getting overloaded.

REFERENCES

[1]

I. Kotenko and A. Ulanov, “Simulation of internet ddos attacks
and defense,” in International Conference on Information Security.
Springer, 2006, pp. 327–342.

[2] A. Srivastava, B. Gupta, A. Tyagi, A. Sharma, and A. Mishra,
“A recent survey on ddos attacks and defense mechanisms,” in
Advances in Parallel Distributed Computing.
Springer, 2011, pp.
570–580.
S. T. Zargar, J. Joshi, and D. Tipper, “A survey of defense
mechanisms against distributed denial of service (ddos) ﬂooding
attacks,” IEEE communications surveys & tutorials, vol. 15, no. 4,
pp. 2046–2069, 2013.

[3]

[4] A. Behl, “Emerging security challenges in cloud computing: An
insight to cloud security challenges and their mitigation,” in 2011
World Congress on Information and Communication Technologies, Dec
2011, pp. 217–222.
S. Yu, Y. Tian, S. Guo, and D. O. Wu, “Can we beat ddos attacks
in clouds?” IEEE Transactions on parallel and distributed systems,
vol. 25, no. 9, pp. 2245–2254, 2014.

[5]

[6] G. Somani, M. S. Gaur, D. Sanghi, M. Conti, and R. Buyya,
“Ddos attacks in cloud computing: issues, taxonomy, and future
directions,” Computer Communications, 2017.

[7] Q. Jia, H. Wang, D. Fleck, F. Li, A. Stavrou, and W. Powell, “Catch
me if you can: A cloud-enabled ddos defense,” in Dependable Sys-
tems and Networks (DSN), 2014 44th Annual IEEE/IFIP International
Conference on.

IEEE, 2014, pp. 264–275.

[8]

B. Wang, Y. Zheng, W. Lou, and Y. T. Hou, “Ddos attack
protection in the era of cloud computing and software-deﬁned
networking,” Computer Networks, vol. 81, pp. 308–319, 2015.

[9] A. Baker and A. El-Aziz, “A survey on mitigation techniques
against ddos attacks on cloud computing architecture,” Interna-
tional journal of Advanced Sciene and Technology (IJAST), vol. 28,
pp. 187–200, 2019.

[10] L. M. Vaquero and L. Rodero-Merino, “Finding your way in
the fog: Towards a comprehensive deﬁnition of fog computing,”
ACM SIGCOMM Computer Communication Review, vol. 44, no. 5,
pp. 27–32, 2014.

[11] S. J. Stolfo, M. B. Salem, and A. D. Keromytis, “Fog computing:
Mitigating insider data theft attacks in the cloud,” in Security and
Privacy Workshops (SPW), 2012 IEEE Symposium on.
IEEE, 2012,
pp. 125–128.

[12]

I. Stojmenovic and S. Wen, “The fog computing paradigm: Sce-
narios and security issues,” in Computer Science and Information
Systems (FedCSIS), 2014 Federated Conference on.
IEEE, 2014, pp.
1–8.

[13] S. Jajodia, A. K. Ghosh, V. Swarup, C. Wang, and X. S. Wang,
Moving target defense: creating asymmetric uncertainty for cyber
threats. Springer Science & Business Media, 2011, vol. 54.

[14] R. Zhuang, S. A. DeLoach, and X. Ou, “Towards a theory of
moving target defense,” in Proceedings of the First ACM Workshop
on Moving Target Defense. ACM, 2014, pp. 31–40.

[15]

[16]

J. Li, J. Yackoski, and N. Evancich, “Moving target defense: a
journey from idea to product,” in Proceedings of the 2016 ACM
Workshop on Moving Target Defense. ACM, 2016, pp. 69–79.

J. Zheng and A. S. Namin, “A survey on the moving target
defense strategies: An architectural perspective,” Journal of
Computer Science and Technology, vol. 34, no. 1, pp. 207–
[Online]. Available: https://doi.org/10.1007/
233,
s11390-019-1906-z

Jan 2019.

[17] V. Kansal and M. Dave, “Improving the effectiveness of moving
target defenses by amplifying randomization,” in International
Conference on Intelligent Computing and Smart Communication 2019,
G. Singh Tomar, N. S. Chaudhari, J. L. V. Barbosa, and M. K.
Aghwariya, Eds.
Singapore: Springer Singapore, 2020, pp. 27–
36.

[18] G. S. Kc, A. D. Keromytis, and V. Prevelakis, “Countering code-
injection attacks with instruction-set randomization,” in Proceed-
ings of the 10th ACM conference on Computer and communications
security. ACM, 2003, pp. 272–280.

[19] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and
D. Boneh, “On the effectiveness of address-space randomization,”
in Proceedings of the 11th ACM conference on Computer and commu-
nications security. ACM, 2004, pp. 298–307.

[20] T. Jackson, B. Salamat, A. Homescu, K. Manivannan, G. Wagner,
A. Gal, S. Brunthaler, C. Wimmer, and M. Franz, “Compiler-
generated software diversity,” in Moving Target Defense. Springer,
2011, pp. 77–98.

[21] E. Al-Shaer, “Toward network conﬁguration randomization for
moving target defense,” in Moving Target Defense. Springer, 2011,
pp. 153–159.

[22] M. Thompson, N. Evans, and V. Kisekka, “Multiple os rotational
environment an implemented moving target defense,” in Resilient
Control Systems (ISRCS), 2014 7th International Symposium on.
IEEE, 2014, pp. 1–6.

10

[23] R. Zhuang, S. Zhang, S. A. DeLoach, X. Ou, and A. Sing-
hal, “Simulation-based approaches to studying effectiveness of
moving-target network defense,” in National symposium on moving
target research, 2012, pp. 1–12.

[24]

[25]

J. Xu, P. Guo, M. Zhao, R. F. Erbacher, M. Zhu, and P. Liu, “Com-
paring different moving target defense techniques,” in Proceedings
of the First ACM Workshop on Moving Target Defense. ACM, 2014,
pp. 97–107.

J. B. Hong and D. S. Kim, “Assessing the effectiveness of moving
target defenses using security models,” IEEE Transactions on
Dependable and Secure Computing, vol. 13, no. 2, pp. 163–177, 2016.

[26] M. Carvalho and R. Ford, “Moving-target defenses for computer
networks,” IEEE Security & Privacy, vol. 12, no. 2, pp. 73–76, 2014.

[27] H. Okhravi, A. Comella, E. Robinson, and J. Haines, “Creating a
cyber moving target for critical infrastructure applications using
platform diversity,” International Journal of Critical Infrastructure
Protection, vol. 5, no. 1, pp. 30–39, 2012.

[28] H. Okhravi, J. Riordan, and K. Carter, “Quantitative evaluation
of dynamic platform techniques as a defensive mechanism,” in
International Workshop on Recent Advances in Intrusion Detection.
Springer, 2014, pp. 405–425.

[29] Q. Jia, K. Sun, and A. Stavrou, “Motag: Moving target defense
against internet denial of service attacks,” in Computer Communi-
cations and Networks (ICCCN), 2013 22nd International Conference
on.

IEEE, 2013, pp. 1–9.

[30] H. Wang, Q. Jia, D. Fleck, W. Powell, F. Li, and A. Stavrou, “A
moving target ddos defense mechanism,” Computer Communica-
tions, vol. 46, pp. 10–21, 2014.

[31] P. Wood, C. Gutierrez, and S. Bagchi, “Denial of service elusion
(dose): Keeping clients connected for less,” in Reliable Distributed
Systems (SRDS), 2015 IEEE 34th Symposium on.
IEEE, 2015, pp.
94–103.

[32] S. Venkatesan, M. Albanese, K. Amin, S. Jajodia, and M. Wright,
“A moving target defense approach to mitigate ddos attacks
against proxy-based architectures,” in IEEE Conference on Com-
munications and Network Security, 2016.

[33] V. Kansal and M. Dave, “Ddos attack isolation using moving
target defense,” in 2017 International Conference on Computing,
Communication and Automation (ICCCA), May 2017, pp. 511–514.

[34] ——, “Proactive ddos attack detection and isolation,” in 2017 In-
ternational Conference on Computer, Communications and Electronics
(Comptelix), July 2017, pp. 334–338.

[35] W. Peng, F. Li, C.-T. Huang, and X. Zou, “A moving-target
defense strategy for cloud-based services with heterogeneous and
dynamic attack surfaces,” in Communications (ICC), 2014 IEEE
International Conference on.

IEEE, 2014, pp. 804–809.

[36] H. Wang, F. Li, and S. Chen, “Towards cost-effective moving
target defense against ddos and covert channel attacks,” in
Proceedings of the 2016 ACM Workshop on Moving Target Defense.
ACM, 2016, pp. 15–25.

[37] H. M. J. Almohri, L. T. Watson, and D. Evans, “Predictability
of ip address allocations for cloud computing platforms,” IEEE
Transactions on Information Forensics and Security, vol. 15, pp. 500–
511, 2020.

[38] H. Alavizadeh,

J.

J. B. Hong,

Jang-Jaccard, and D. S.
Kim, “Comprehensive security assessment of combined mtd
techniques for the cloud,” in Proceedings of the 5th ACM Workshop
on Moving Target Defense, ser. MTD ’18. New York, NY, USA:
Association for Computing Machinery, 2018, p. 11–20. [Online].
Available: https://doi.org/10.1145/3268966.3268967

[39] H. Alavizadeh, J. Jang-Jaccard, and D. Kim, “Evaluation for
combination of shufﬂe and diversity on moving target defense
strategy for cloud computing,” 08 2018, pp. 573–578.

[40] M. S. J.-M. M. Mohammad Mahdi Bazm, Marc Lacoste, “Isolation

in cloud computing infrastructures: new security challenges,”
Annals of Telecommunications, vol. 74, pp. 197–209, 2019.

11

