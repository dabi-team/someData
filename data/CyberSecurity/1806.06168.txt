8
1
0
2

n
u
J

6
1

]

R
C
.
s
c
[

1
v
8
6
1
6
0
.
6
0
8
1
:
v
i
X
r
a

Attack Surface Metrics and Privilege-based Reduction Strategies
for Cyber-Physical Systems

Ali Tamimi
Washington State University
Pullman, Washington
ali.tamimi@wsu.edu

Jinyoung Lee
Washington State University
Pullman, Washington
jinyoung.lee@wsu.edu

Ozgur Oksuz
Washington State University
Pullman, Washington
ozgur.oksuz@wsu.edu

Adam Hahn
Washington State University
Pullman, Washington
a.hahn@wsu.edu

ABSTRACT
Cybersecurity risks are often managed by reducing the system’s
attack surface, which includes minimizing the number of intercon-
nections, privileges, and impacts of an attack. While attack surface
reduction techniques have been frequently deployed in more tra-
ditional information technology (IT) domains, metrics tailored to
cyber-physical systems (CPS) have not yet been identified. This
paper introduces attack surface analysis metrics and algorithms to
evaluate the attack surface of a CPS. The proposed approach in-
cludes both physical system impact metrics, along with a variety of
cyber system properties from the software (network connections,
methods) and operating system (privileges, exploit mitigations).
The proposed algorithm is defined to incorporate with the Archi-
tecture Analysis & Design Language (AADL), which is commonly
used to many CPS industries to model their control system archi-
tecture, and tools have been developed to automate this analysis
on an AADL model. Furthermore, the proposed approach is eval-
uated on a distribution power grid case study, which includes a
7 feeder distribution system, AADL model of the SCADA control
centers, and analysis of the OpenDNP3 protocol library used in
many real-world SCADA systems.

1 INTRODUCTION
Modern cyber-physical systems (CPS) increasingly depend on large,
complex software platforms to monitor and control complex envi-
ronments. Often the physical domains being controlled are large,
distributed systems (e.g., air traffic control, electric power grid),
that depend on a significant number of sensor measurements and
actuators, requiring critical centralized platforms where operators
can monitor and control these environments. However, while the
cybersecurity of these systems is increasingly important, their com-
plexity presents many challenges to the risk assessment process.
Both the bulk transmission and distribution segments of the
electric power grid provide examples of this. The bulk transmis-
sion system is controlled from a large number of control centers,
each with a Supervisory Control and Data Acquisition (SCADA)
server that communicates with a large array of distributed sensors
(e.g., current/voltage transformers) and actuators (circuit breakers)
deployed within geographically disperse substations. The SCADA
server collects data from the substations, which consist of IEDs,

RTUs, sensors, relays, circuit breakers, while the energy manage-
ment system (EMS) performs higher-level analysis and optimization
algorithms (e.g., state estimate, AGC) to inform operator decisions.
Furthermore, distribution-level control centers also utilize SCADA
servers and distribution management systems (DMS) to perform
a unique set of control applications (e.g., Volt-VAR control, load
flow).

Recent events have demonstrated that control centers are key
targets of attacks, as the 2015 Ukrainian attack targeted distribution-
level control centers and in 2018 reports surfaced that attackers
targeted U.S. power grid control centers [17] [34]. Furthermore,
these events also demonstrated that attacks to the control center
could result in a significantly greater impact than those to individ-
ual substations. While significant work has focused on assessing
system vulnerabilities from malicious data to applications (e.g., state
estimation, AGC), there has been insufficient work exploring the
vulnerability of such systems to attacks that manipulate the control
platform (e.g., software exploits). This concern has been recently
validated through the discovery of software vulnerabilities in key
protocols used to support the wide-area communication between
these devices [1]. Such vulnerabilities could allow an attacker to
escalate privileges from a poorly protected substation or pole-top
device into the control center, which would provide the attacker
with the ability to manipulate large amounts of control and sensor
data.

Furthermore, while attacks to control systems platforms are an
increasingly serious threat, these systems are also seeing a con-
tinually expanding attack surface. On the transmission side, sub-
stations are adding additional PMU devices and new wide-area
communication networks [33]. On the distribution side, substations
increasingly contain remotely controlled devices (e.g., switches,
transformer taps), while systems are increasingly interconnected
with more vulnerable pole-top devices (e.g., voltage regulators),
consumer-owned distributed energy resources (smart inverters),
and smart meters [35].

To protect against false data injection attacks, researchers have
demonstrated that control applications can be enhanced by ro-
bust control techniques [18], along with traditional efforts such
as cryptographic authentication (e.g., HMAC, digital signatures).
However, to protect against software vulnerabilities, protection
methods commonly include (i) protecting memory (ALSR, DEP),
and (ii) deploying mechanisms to improve the isolation between

 
 
 
 
 
 
software components (e.g., privileges, visualization, trusted exe-
cution environments). While these mechanisms are increasingly
important for the protection of complex cyber-physical systems,
there is currently limited work exploring how the cyber-physical
properties of the system influence the allocation of these security
mechanisms in a manner to best protect the system.

To address this challenges, this paper introduces the following
contributions. First, it presents attack surface metrics and analy-
sis algorithms for cyber-physical systems which incorporates the
impact of an attack, the degree of system connectivity, and a vari-
ety of cybersecurity properties of the system’s software. Second,
it demonstrates the proposed metric based on a cyber-physical
AADL system model which enables broader adoption to many dif-
ferent systems and introduces a tool to automates this analysis [31].
Third, it presents a use-case based on a cyber-physical distribu-
tion power system model using a seven feeder model control using
the OpenDNP3 protocol library [3]. Fourth, it demonstrates the
proposed techniques on various system privilege models to demon-
strate techniques to strategically reduce system’s attack surface.

2 RELATED WORK
The challenge of growing system attack surfaces is well defined
within security literature [12]. Early attempts to define metrics for
attack surface included work by [15] which introduces a Relative
Attack Surface Quotient (RASQ) metric that enables multiple system
configurations to be measured against each other, such as sockets,
named pipes, RPC endpoints, running services, weak ACLs, and user
accounts. In [21], the authors extend this formal model for attack
surface based on system privileges, access rights, and methods
which were then evaluated on a various open-source software
package.

Similarly, many research efforts have introduced attack surface
evaluation techniques to help identify more secure system configu-
rations and assist in the comparison of various system architectures.
For example, work in [16] utilized graph-based models to analyze
the attack surface of Linux kernel configuration while incorporat-
ing both the lines of code and call graphs for various functions. In
[25] the authors present a system-level view to compare the attack
surface of two different certificate validation approaches, DANE
and X.509. Attack surface metrics have also been explored to pro-
vide techniques to reduce privileges in Android apps by minimizing
the permissions given to each app. In [30] the authors explored
the attack surface of modern hypervisors to evaluate the security
of cloud-based applications. From a CPS perspective, work in [13]
explored graph-based models and algorithms to explore the attack
surface of various key information objects used to control the grid,
while in [23] the authors propose a technique to reduce the attack
surface by dynamically controlling network paths.

In addition to attack surface efforts, many researches have ex-
plored both vulnerabilities and mitigations of power center control
center applications through false data injection attacks. For exam-
ple work in [20] and many others have explored false data injection
in state estimation algorithms, while in [29] the authors explore
techniques to prevent false data injection in AGC. Further work has
explored the attack impact to economic dispatch algorithms [28],

Ali Tamimi, Ozgur Oksuz, Jinyoung Lee, and Adam Hahn

Table 1: Expansion of work in [21]. to CPS

Resources
Data

Channel

Method

[21]
Data damage potential based
only on datatypes (e.g., files, db)
Unknown number of external
connections and unclear impact
of data manipulations
Focuses on methods within
single software platform, not
system-level impacts

CPS Unique Properties
Data has quantifiable system im-
pact to physical processes
Typically well defined intercon-
nections and impact metrics for
data in messages
Analysis incorporates propaga-
tive impact of attack to other pro-
cesses within a system

power system market operations [37], and smart meter deploy-
ments [11]. In [10], the authors present a cyber-physical access
control solution to mitigate threats in cyber-physical environment.
They provide information flow analysis and logic-based policy con-
trol to stop harmful operation in the industrial control systems.
While there is significant work in these areas, there has been little
work explore the security of the software platforms that execute
these algorithms and must connect with various untrusted systems
and networks.

This paper will utilize AADL to provide a standard model for the
cyber security and extends other research efforts which use AADL
to define and analyze system security properties. A report by [9] dis-
cusses a variety of use-case applications to improve cyber-physical
security through the implementation of AADL, including model-
ing techniques for threats and access levels. The authors in [14]
have demonstrated that AADL can be used to perform modeling-
checking on information flows to protect both data confidentiality
and integrity, work in [36] has demonstrated multiple independent
levels of security (MILS) validation using AADL. Furthermore, [7]
introduced attack tree and impact analysis tools for AADL along
with a standard for a Security Annex.

2.1 Comparison to Related Work
Our work expands upon the software-based attack surface met-
rics introduced by [21] which aggregates the risk from the various
methods, channels, and data within software to compute a quanti-
tative score. Specifically, it explores entry-exit points of the system
through the methods (e,g., API) that allow the attacker to exchange
data directly with the system. The channels (e.g., TCP) that are used
to send and receive data between the attacker and the system, and
data (e.g., file) that is used to exchange information between the at-
tacker and the system. A unique metric is identified for each factor
based on its attackability, which is defined as damage potential-
effort ratio based on each resource. The damage potential can be
seen as the level of harm the attacker can cause to the system in
using the resource in the attack. Effort measures the attacker’s dif-
ficulty to acquire the necessary access rights to be able to use the
resource in an attack. The higher the ratio, the higher the resource’s
contribution. Damage potential is defined as a method’s privilege
(root, authorized user, unauthorized user), a channel’s type (TCP,
UNIX SOCKET, SSL) and a data type (file, registry) while the effort
is defined as the access rights of a method, channel, and data.

2.2 Contributions CPS Attack Surface
This work expands upon previous work to define CPS attack surface
metrics, as explained in Table 1. First, in a cyber-physical system,

Attack Surface Metrics and Privilege-based Reduction Strategies for Cyber-Physical Systems

the impact of manipulations to data (e.g., sensor measurements,
actuator commands) should be quantified based on their manifes-
tation within a physical domain. Therefore, we utilize physical
system impact metrics to evaluate the damage potential of attacks.
Second, compared to pure software-based attack surface metrics
which cannot make assumptions about the number of interconnec-
tions or the operating environment, a CPS will typically have a
defined set of devices or external resources that it interacts with.
Third, a CPS commonly must aggregate many software platforms
within a single environment to perform various functions including
(i) monitoring and state estimation, (ii) control and feedback, (iii)
human operator interfaces, (iv) network communication, (v) data
storage and archiving. While only some of these functions perform
direct cyber-physical functions, all are necessary to support the
system’s operation and therefore, contribute directly or indirectly
to the attack surface.

3 MODEL FOR CPS ATTACK SURFACE
In this section, we introduce a system model and then define at-
tack surface metrics that incorporate both the cyber and physical
system properties. The metric will emphasize the criticality and
vulnerabilities of the interconnectivity between a system and its
external connections. The metrics will also explore the negative
impact that an attack could have on the physical process.

For the cyber-layer model, it will assume systems are defined
using AADL [27], which is a highly standardized system modeling
language that is widely used within many CPS industries, including
both aerospace and automotive [24]. In AADL, the system model
incorporates both hardware and software components. Hardware
components include memory, processors, buses, and devices, while
software components include processes, threads, and data. A com-
ponent is a set of software (processes, threads, thread groups, data,
subprograms) and execution platform (processor, memory, devices,
bus) mechanisms [8]. A component can also be a subsystem which
can include a composite of these sub-components. A system then
defines the set of connections between the components and also in-
troduces a mapping of various software components to the physical
devices (e.g., hardware components). Furthermore, connections can
be used to define communications between systems, subsystems,
and devices, while flows can represent the data that traverses from
a source to a sink. Moreover, we could define security properties in
the AADL model and assign them to different components.

3.1 Definitions

Definition 3.1 (System). A system, s, is defined similarly as in
AADL, where it contains a set of software components, hardware
components, and subsystems. A system can be divided into a set of
trusted st and untrusted su components.

Definition 3.2 (Attack Paths). The attack paths for trusted sub-
system st is defined as ap(st ) = {c1, ..., cn } and represents the set
of connections that connect st to the components of the untrusted
subsystem (su ).

Definition 3.3 (Privilege). Most operating systems enforce access
control by defining privileдes and assigning them with access rights
to the various objects (programs, data) on the system. Therefore, a
1 , . . . , vsi
system will be defined with a set of privileges V (s) = {vsi
n },

where each privilege, vsi
= d1, . . . , dk , which defines what data
j
items (d1, . . . , dk ) a specific process can access. Furthermore, we
define a mapping Priv : P → V that assigns a privilege to each
process.

3.2 Attack Surface Metrics
The attack surface metrics will be computed for the trusted subsys-
tem, st , based on the number of available attack paths (ap(st )) that
connect the trusted system to its untrusted components. The total
attack surface measurement is defined as T ASM(s, ap(st )), which
is calculated as the summation of the individual attack surfaces of
each connection within ap(st ) as defined below.

T ASM(s, ap(st )) = (cid:213)
i ∈ap(st )

ASC (i) + ASP (i)

(1)

The metric for each connection incorporates the attack surface
contributions of the connections (ASC (i)) and the process (ASP (i))
in st that is connected to that system. Each AS metric is defined a
value imp × exp, where imp (impact) is defined based on attackers
ability to impact the physical system based on the manipulation of
some data and the exp (exposure) is defined based on how vulnera-
ble the component is to attack.

3.2.1 Data. As defined in the previous sections, the impact of
an attack to a component is evaluated based on the set of data it
processes, stores, or transmits. However, the impact of an attack
would be quantified differently across different cyber-physical sys-
tem domains, furthermore, it can also be quantified different within
the same domain. For example, the following list provides a brief
survey of papers analyzing various cybersecurity attacks to differ-
ent applications within the smart grid where the attack impact is
measured through different variables, including costs, estimated
states, or operational values (e.g., load, frequency, voltage).

1) Power system loss of load (MW) [32]
2) Generation cost ($/MWh) [28]
3) DC State Est. (volt., power) [20]
4) Locational marginal price ($/MWh) [37]
5) AC State Est. (volt. mag., phase) [26]
6) Stability Factors (freq., volt., angle) [19]

To address this challenge, we introduce a generic attack impact
metric, imp(d), which must be defined based on domain-specific
methods to quantify the impact of the manipulation of data d. A
case study in Section 4 will be provided to demonstrate how the
loss-of-load metric can be used to analyze the attack surface of a
distribution grid’s control center.

3.2.2 Connection. For each connection, the attack surface will
analyze the impact of the data that traverses that connection along
with the exposure of that channel to various network-based threats.
The connection’s attack surface is then defined as ASC (i) = expc ×
impc , where expc and impc represent the exposure and impact of
that channel.

A connection’s exposure is be determined by whether it is phys-
ically exposed (e.g., wireless) and also based on the extent to which
it includes security mechanisms to protect the communication (e.g.,

Table 2: connection’s exposure factors and scores

Encryption
Algorithm

Key
Exchange
Mechanism

Hash
Function

Media
Type

Alg.
AES
3DES
DES
Null

Sco. Mech.

3
2
1
0

2048 bits
1024 bits
512 bits
Null

Sco.
3
2
1
0

Func.
SHA-2
SHA-1
MD5
Null

Sco.
3
2
1
0

Type
Wired
Wireless

Sco.
1
0

IPSec, TLS). There are four factors considered for evaluation of con-
nection’s exposure including encryption algorithm, key exchange
mechanism, hash function and type of connection. Table 2 shows
different values of the factors.

Using the scores, we define tc in Equation 2. Values from Table 2
are assigned to parameters based on the communication protecting
mechanisms. The encryption parameter defines the algorithm used
for encrypting the data. The values of the parameter for AES, Triple
DES (3DES), and DES are 3, 2, and 1 respectively. If there is no
encryption algorithm, the value of the parameter is set to zero.
The key_exchanдe parameter shows that what kind of prime is
used for exchanging the key. We give the values 3, 2, and 1 to
2048-bit, 1024-bit and 512-bit prime respectively. If there is no
key exchange mechanism, the value is zero. The hash_f unction
shows what kind of cryptographic hash is used for generating the
signature. The value 3, 2, and 1 are assigned to SHA-2, SHA-1, and
MD5 hash algorithm respectively. If there is not any hash algorithm,
the value of the parameter is zero. Finally, if we use a wired media for
communication, we assign 1 to media_type parameter; Otherwise,
the value is set to zero. If the mechanisms are more secure, the
value of tc is larger. It results in a smaller value of expc which is
calculated in Equation 3.
tc = encryption + key_exchanдe + hash_f unction + media_type
(2)

expc =

1
1 + tc

(3)

In addition to the exposure metrics, methods are also needed
to evaluate the impact of an attack that can tamper any data that
traverses this channel and would be vulnerable to a false-data in-
jection (FDI) attack. Therefore, the impact of this attack is defined
as the set of data that traverses the channel.

Ali Tamimi, Ozgur Oksuz, Jinyoung Lee, and Adam Hahn

(1) Address Space Layout Randomization (ASLR) protects mem-
ory against buffer overflow attacks by randomizing the mem-
ory location of processes. By using this mechanism, the at-
tacker is unable to find correct address space location neces-
sary to control of a process execution [4].

(2) Data Execution Protection (DEP) marks certain pages of mem-
ory non-executables so that if the code that is potentially
injected into memory, such as through a buffer overflow,
cannot be executed [22].

(3) Control Flow Integrity (CFI) protects against invalid execution
traces for an application by restricting the flow-control of
the application to the known paths of a Control-Flow Graph
(CFG) [2].

(4) Code signing utilizes a certificate-based digital signature to
sign executables and scripts to guarantee executed code is
protected from any change or corruption since it is signed
[6].

(5) 64-bit process provides improved security as it increases the
address space for a process (compared to 32-bit architecture)
and makes other security techniques, such as ASLR, more
effective.

Using these factors, we evaluate tp in Equation 5.

tp = ASLR + DEP + code_siдninд + 64_bit + CF I
For each mechanism, if it is implemented the value in the formula
is 1. Otherwise, it is equal to 0. Therefore, tp is a number between
0 and 5. Then, expc is calculated in Equation 6.

(5)

expp = M
1 + tp

(6)

Where M is the number of methods of the process. We could
analyze the code of a process using the tools such as cflow [5], and
evaluate the number of methods.

While an attack to a channel (Section3.2.2) only allows the ma-
nipulation of any data communicated over that channel, an attack
to a process could allow manipulations of all data defined by the
privilege(vs
p ) of that process. Therefore, a process attack’s impact
should include all data accessible by that process privileges and is
therefore defined as follows.

impp = (cid:213)
d ∈v s
p

imp(d)

(7)

impc = (cid:213)

imp(d)

d ∈conni (d )

(4)

3.3 AADL-based Attack Surface Analysis

Algorithm

3.2.3 Process. The attack surface for a process will incorporate
a variety of factors including its privilege, the set of exploit mitiga-
tions enabled to protect it, and the criticality of the data accessible
by it (vs
p ). The attack surface for a process is defined similarly to the
definition for a connection, ASP (i) = expp × impp , where p is the
trusted process in the connection i.

The exposure of a process is based on multiple factors, includ-
ing the set of protection mechanisms enabled by the operating
system along with the complexity of the process. The protection
mechanisms will include common best-practices implemented by
operating systems to protect processes from exploitation. These
include:

In this section introduced a propose an attack surface analysis
algorithm based on the previously defined metrics. The algorithm
assumes the system is modeled utilizing AADL and requires that
the user specifies the system model, attack paths, and the security
properties of processes and communications. It also assumes the
model includes a number of other defined system variables, such as
the physical system impacts (that depends on the open switches on
the system) and the number of methods for subprograms. While
these are not natively defined in AADL but could be added through
the AADL properties file.

The Algorithm is implemented as a plug-in which developed by
Eclipse modeling framework. The plug-in uses the AADL model

Attack Surface Metrics and Privilege-based Reduction Strategies for Cyber-Physical Systems

as input and categorizes the components of the model including
substations, processes, etc. based on their attack paths. For each
component, the security properties are extracted. If the type of com-
ponent is "connection", the security properties are including impact,
encryption algorithm, key exchange mechanism, hash function,
and media type. By using Equation 2 and 3 the attack metric for
the component is calculated. If the type of component is "process",
the security properties are ASLR, DEP, code signing, 64 bit, and
CFI. The attack metric is calculated based on security properties
of the process and Equation 5 and 6. Finally, by summing up the
attack surface metric of the components of a path, we evaluate the
path attack surface metric. Algorithm 1 shows how the total attack
surface metric is calculated.

ALGORITHM 1: Find Total Attack Surface Metric (TASM)

1: calculate_metric(AttackPath[] ap){
2: T ASM ← 0
3: for each path in ap do
4: path_metric ← 0
5: for each component in path do

if Type_o f (component) == ”connection” then
6: properties ← Extract(component .properties)
7: tc ← component(encryption) +
component(key_exchanдe) +
component(hash_f unction) +
component(media_type))

8: expc ← 1/(1 + tc)
9: component(metric) ← expc ∗ component(impact)
end
if Type_o f (component) == ”process” then
10: properties ← Extract(component .properties)
11: tp ← component(ASLR) + component(DEP) +

component(code_siдninд) + component(64_bit) +
component(CF I )

12: expp ← component(M)/(1 + tp)
13: component(metric) ← expp ∗ component(impact)
end
path_metric ← path_metric + component(metric) ;
// calculate attack surface metric of a path

end
T ASM ← T ASM + path_metric ;
attack surface metric
end

14: Return T ASM
15: }

// calculate total

4 CASE STUDY: ELECTRIC POWER

DISTRIBUTION CONTROL CENTER

This section will explore the proposed attack surface metrics on
a cyber-physical electric power distribution system’s control cen-
ter. The system will consist of (i) a simulated distribution power
system model, (ii) an AADL model of a control center and SCADA
communication, and (iii) an open-source DNP3 software platform

(OpenDNP3). The section will also explore different system ar-
chitectures that can be used to reduce the attack surface of the
proposed system by implementing more granular privileges models
to improve the isolation of various SCADA system processes.

Fig. 1 provides an overview of the control center components
along with the remote network connectivity to the substations and
field devices that monitor and control the grid. Within the con-
trol center, there are four subsystems, the SCADA server, human-
machine interface (HMI), distribution management system (DMS),
and the historian server/database. The SCADA server performs the
communication with a large number of remote devices, including
voltage and current transformers, circuit breakers, protection relays,
remote switches, transformer taps, and voltage regulators. Typi-
cally measurements from these devices are aggregated by a single
remote terminal unit (RTU) within a substation and are collected at
a 2-4 second interval by the SCADA server and stored in the histo-
rian. Furthermore, the SCADA server can also send commands to
various devices to control the flow of power through the operation
of circuit breakers and the adjustment of transformer tap positions
to modify voltage levels. Because the server must maintain a re-
mote communication session with each device, it typically has a
front end processor (FEP) process that performs all the SCADA
communication with the substation RTUs. The DMS then uses data
collected by the SCADA server to execute various algorithms to
analysis and optimization grid operation, including power flow,
fault identification, and voltage analysis. The HMI is a workstation
used by operators to see system measurements and alarms, while
also sending control messages.

As demonstrated in Fig. 1, this environment can have a broad
attack surface due to the high degree of connectivity to remote
devices. More specifically, the FEP is the most interconnected pro-
cess and therefore is the main contributor of the system’s attack
surface due to its communication with a large number of external
systems. If one of these devices is malicious, perhaps due to a pre-
vious attack to that device, this connectivity could potentially be
used to compromise the SCADA server. Software vulnerabilities
that would enable such an attack have already been discovered on
popular industry platforms [1]. The remainder of this section will
explore both the physical and cyber model used in this case study
in more detail.

4.1 Physical System Model
The physical system for this case-study is a low voltage distribu-
tion system model showed in Fig. 2 (left). The model includes 7
substations with one external feeder. Fig. 2 (right) provides a de-
tailed model of a single substation. There are total 6 feeders at the
system, and the total inter-grid power flow is 4744.87 kW. Within
the system, there are a number of devices that can be remotely
controlled from the control center, including (i) circuit breakers in
each substation, (ii) remote switches along certain lines, and (iii)
transformer taps changers, each of these are identified in Fig. 1.
Circuit breakers are available within each substation, along with
multiple breakers or remote switches on the lines connected to
other substations or feeders. Therefore, if an attacker can send a
malicious disconnect message, they can cause a loss of load to lower
feeders. In addition to feeders, the transformer tap changers can

Ali Tamimi, Ozgur Oksuz, Jinyoung Lee, and Adam Hahn

Figure 1: Distribution System Architecture (left) with Controllable Field Devices (right)

also be remotely controlled to help stabilize the voltage. Transform-
ers in Fig. 3 are connected to the upper feeder which is substation
7 to control the voltage of the system.

4.2 Cyber System Model
The control center architecture is modeled using AADL to identify
the various processes, buses, subsystems, data, and flows within
the cyber system. The high-level architecture including the con-
trol center and substation is shown in Fig. 3. The control center
includes a SCADA process, FEP process, DMS, HMI, Database, and
alarm processor; all which communicate across a local Ethernet
bus. The communication between processes is modeled by a virtual
bus. Each process consists of some threads that are responsible for
sending or receiving data to/from other components. Fig. 4 shows
each components of control center, while Fig. 5 shows the broader
SCADA communication and control center, where the FEP process
communicates across a wide area network bus to all 7 remote sub-
stations. Figure 8 in Appendix 1 shows detailed architecture of the
system.

Table 3 defines the data-flows within the architecture that are
used to remotely monitor and control all the field equipment in
the physical grid model. The first three rows show how telemetry
data is read from the field devices in the various substations, into
the control center. First, the data transfer from the substations
to FEP, then the FEP sends the data to SCADA process. Finally,
SCADA process is responsible for sending the data to different
parts of control center including HMI, DMS, and database. The
last row shows how control messages, which originate at the HMI,
are passes through SCADA process and FEP to the substations to
actuate the breakers, switches, and transformer taps.

Furthermore, The communication between substations and FEP
are modeled using OpenDNP3, which is a reference implementation
of IEEE-1815 (DNP3) protocol and is commonly used to support
power grid SCADA communications. The OpenDNP3 libraries are
modeled as a subprogram of FEP to communicate with substations.
Since OpenDNP3 provides event-oriented communication, it uses
two modes (event polling and unsolicited responses) instead of

scanning the outstations continuously by the master [3]. In event
polling mode, the master asks outstations about changing the data;
However, with unsolicited responses, the outstation pushes events
to the master when there is a change in the data. Since the number
of methods of a process has a direct effect on the exposure of it,
the implementation of OpenDNP3 is important. We analyze the
OpenDNP3 libraries using the tools such as cflow to find the number
of input and output methods are necessary to communicate with
the remote devices.

In addition to the data flows, we also define the system privileges
for the SCADA server, which determine what data each process can
access. For this model both processes, FEP and SCADA, will possess
their own processes defined as vf ep and vscada respectively. For
each FEP in the system, vf ep could be the subset of the data that
are presented in Table 5. For SCADA, vscada is the union of all the
vf ep of the system.

4.3 Attack Surface Metrics
This section will demonstrate the attack surface metrics for the case
study system; however, this requires that the trust boundary and
attack paths be identified. Furthermore, it requires that the physical
impact metrics be computed to assess the risk of an attack to the
system. Each of these will be discussed further below.

4.3.1 Physical Impact. The physical system impact metrics will
be quantified by measuring the loss of load that malicious con-
trol messages from control center would have to the grid. While
system telemetry data, such as voltage and current measurements
can be manipulated, neither is commonly used for direct feedback
control and can only impact the grid by deceiving the operating
and encouraging a wrong action. Therefore, this work focuses on
the manipulation of the actuation commands to (i) operation the
switches and (ii) operated transformer tap positions, as discussed
in Section 4.1. The following two sections will discuss the resulting
loss of load the control center is compromised, and the attacker can
manipulate these messages.

To quantify the loss of load from both malicious switching and
transformer taps operations, we simulate the system in steady-state

Attack Surface Metrics and Privilege-based Reduction Strategies for Cyber-Physical Systems

Figure 2: Distribution Feeder Model

Table 3: AADL Data Flows

Name
Substations[1-6] to HMI
Substations[1-6] to DMS
Substations[1-6] to DB
HMI to Substations[1-6]

Flow
Subst at ions[1 − 6] → F EP → SCADA → H M I
Subst at ions[1 − 6] → F EP → SCADA → DMS
Subst at ions[1 − 6] → F EP → SCADA → DB
H M I → SCADA → F EP → Subst at ions[1 − 6]

Data
Current [1-6] and Voltage [1-6] Measurement
Current [1-6] and Voltage [1-6] Measurement
Current [1-6] and Voltage [1-6] Measurement
Switch Status[1-6], Switch Control[1-6]

Figure 3: High-level architecture of the system

Figure 4: Control Center’s components

and the operate each switch and tap individually to measure the
loss of load from manipulation of that data within either the control
center or the SCADA communication to the device.

Figure 5: Control center architecture

Table 4: Power Loss After Simulations

Substation

Substation 1
Substation 2
Substation 3
Substation 4
Substation 5
Substation 6
Substation 7

Inner Grid Power
After Simulation 1
3164.08 kW, 651 kVar
4431.61 kW, 998.74 kVar
4236.29 kW, 927.15 kVar
4414.58 kW, 1017.84 kVar
4046.96 kW, 953.37 kVar
3420.81 kW, 766.86 kVar
0 kW, 0 kVar

Inner Grid Power
After Simuation 2
3164.08 kW, 651.44 kVar
4441.58 kW, 1040.22 kVar
4236.29 kW, 927.15 kVar
4236.29 kW, 927.15 kVar
4046.99 kW, 953.46 kVar
3420.81 kW, 766.86 kVar
3906.01 kW, 873.58 kVar

Table 5: Switch Control Data Impact (imp) in KW

Data
Sub1_All
Sub1_SwL1
Sub1_SwR1
Sub1_SwL2
Sub1_SwR2
Sub2_All
Sub2_SwL
Sub2_SwM
Sub2_SwR

Load
3164
4031
4123
4601
4642
4441
4600
4656
4674

Loss
1580
713
621
143
102
303
144
88
70

Load
Data
4236
Sub3_All
4364
Sub3_SwL
4616
Sub3_SwR
4414
Sub4_All
Sub4_SwL
4552
Sub4_SwM 4636
4715
Sub4_SwR
4046
Sub5_All
4412
Sub5_SwL

Loss
508
380
128
330
192
108
29
697
332

Data
Sub5_SwM
Sub5_SwR
Sub6_All
Sub6_SwL1
Sub6_SwR1
Sub6_SwL2
Sub6_SwR2
Sub7_Sw

Load
4407
4716
3420
4623
4607
382
4599
0

Loss
337
27
1324
121
137
919
145
4744

Switch Operation: To evaluate the impact of various malicious
control center commands, we perform state-state system simu-
lations and then open each switch to calculate the loss of load,
emulating the impact of a malicious command to that switch. The
results of the switch analysis are displayed in Table 5. These results
suggest that a malicious operation of switches in Substation 7 will
provide the most harmful impact has it controls power flow for the
entire feeder and produces a loss of 4744.87 MW. Comparatively,
the malicious operation of substation 5’s switches have a reduced
impact of only 27.91 MW in the case of malicious switch operation.
Transformer Tap Operations: In addition to switch control data,
an attacker could also remotely operate transformer tap positions
to manipulate the voltage on the feeder. An example is shown for
Substation 4 (Fig. 7) targeting transformers T RF − 49 and T RF − 48.
To negatively impact the voltage, the attacker must have the ability
to control both the transformer tap outside of substation 4, along
with the one inside substation 4; otherwise, the operator may be
able to balance the voltage at the substation. If the voltage deviation
of transformers is over plus or minus 5 percent, that transformer is
considered having voltage issue.

If the attacker can manipulate the tap value at substation 4, which
is highlighted as red rectangular in Fig. 7, sub transformers outside
of substation 4 that are highlighted in the red circle and connected
to the substation, have the same over or under voltage issue. Once
substation 4 detects over or under voltage issue, it trips the breaker
to protect the substation devices. Therefore, SU BST AT − 04 at Fig. 7
loses all the connection to sub transformers. To complete the attack,
it is assumed that an attacker can control the substation tap changer
so that the operator cannot stabilize the voltage. As a result of this
occurrence, the loss of load for transformer tap operation will be
equivalent to the breaker operation results displayed in Table 5
except the power loss for substation 7.

4.3.2 Cyber Metrics. This section will demonstrate the attack
surface analysis for the cyber model, including the OpenDNP3
software subprogram. The APs for the system includes 6 attack
paths from substations to FEP process. To demonstrate how dif-
ferent attack surfaces metrics will be produced based on different
system features and properties (as shown in Table 2) explores how
different values for each variable produces a unique attack surface
score (T ASM). Therefore, different values of the variables for ASLR,
DEP, code_siдn, 64_bit, and CF I have been assigned to explore
their attack surface impact. For each of these mechanisms, if it is
applied the value is 1 (True). Otherwise, zero (false) is assigned to
the mechanism. We investigate different case studies with different
values for the mechanisms.

Ali Tamimi, Ozgur Oksuz, Jinyoung Lee, and Adam Hahn

Figure 6: Substation 4 Map

Figure 7: Compromised Substation 4 and Sub Transformers

OpenDNP3 Subprogram: The OpenDNP3 program is analyzed to
identify the number of input/output methods (M). To analyze the
number of methods in OpenDNP3, we use the GNU cflow program,
which analyzes a collection of C source files and generates outputs
in control flow graph format [5]. By analyzing DNP3 libraries,
we identify that there are 14 methods applied for sending and
receiving data, so M = 14. Furthermore, this program will be used to
communicate with remote substations, so we define various values
for the encryption_alдorithm, key_exchanдe, hash_f unction, and
media_type.

4.3.3 Total Attack Surface Metrics. In this part, we investigate
the calculation of the T ASM metric on this proposed test system
while varying a number of security properties. In the first case, we
assume that the control center only has one FEP whose privileges,

Attack Surface Metrics and Privilege-based Reduction Strategies for Cyber-Physical Systems

= D, has complete access to all control data for the substation
vf ep
switches. For this privilege and data model, we define 5 different
sub-scenarios varying the security mechanism of substations and
FEP. In the first scenario, we evaluate attack surface metric with
the highest level of connection and process security. Then, in the
second scenario, we apply the highest connection security, but
without process security enabled. In the third scenario, we calculate
the metric with the highest process security mechanism without
any connection security implemented. In the fourth scenario, we
evaluate the system without any security mechanism for both the
connection and process. Finally, In the fifth scenario, we apply a
random security mechanism. The results show that the total attack
surface metric is the lowest level when we use the highest security
mechanism for the connection and FEP. Moreover, we can find
that the process security mechanism is more significant than the
connection security mechanism by comparing the second and third
scenarios.

In other case studies, the attack surface metric is evaluated for the
system where the FEP is divided into two processes with separate
privileges (vf ep1, vf ep2), such that an attack to one process has a
limited ability to manipulate data to only the data of the devices in
that row. We define security properties for each process similar to
the approach used in the first case study. We allocate high-security
properties to one process and assign the other one low-security
properties. Each device communicates with one of the processes
depend on the data that they transfer. If the process needs improved
security, they interact with the FEP with high-security properties.
Otherwise, They communicate with the FEP with low-security
properties. Table 6 shows different case studies. In each case study,
the F EP1 has more security mechanism compared with F EP2 except
two last case studies which have same security mechanism.

In the second case study, the first four substations that have
the highest security mechanism communicate with F EP1 and the
substations 5 and 6 communicate with F EP2. In this case study,
F EP1 has the highest security mechanism and F EP2 has no security
mechanism. In the third and fourth case studies, substations 1 and 6
communicate with F EP1 and substations 2 to 5 communicate with
F EP2. There are two differences between these two case studies.
In the third case study, substations 2 to 5 do not have any security
mechanism. However, In the fourth case study, they have highest
security mechanism. Moreover, In the third case study, F EP2 does
not have any security mechanism. However, in the fourth case
study, it supports code signing and CFI. The case studies 5 and 6
show the condition in which some switches of each substation com-
municate with F EP1 and other switches of substation communicate
with F EP2. For example, switch L1 and switch L2 of substation 1
communicate with F EP1 and switch R1 and switch R2 of substation
1 communicate with F EP2 in the sixth case study. In the two last
case studies, we show the cases that both FEPs have the highest
security mechanism and substations have the highest connection
security mechanism. The results show that the T ASM is smaller in
these cases compared with the first scenario of the first case study
where we have only one FEP.

5 CONCLUSIONS
Modern cyber-physical systems are growing increasingly complex
and interconnected, which expands their attack surface to remote
cyber intrusions. While a number of research efforts have explored
techniques to protect these systems from false data attacks, there
has been limited work research in understanding the risk to remote
exploitations and intrusions resulting from this connectivity. This
paper introduces attack surface analysis metrics and algorithms for
cyber-physical systems that incorporate physical system impact
metrics, along with a variety of cyber factors across system security,
communications security, and software complexity. Software has
been developed to automate this analysis through AADL-based
models to enable the analysis to perform on an arrange real industry
CPS projects. Furthermore, a case study has been demonstrated on
a cyber-physical distribution grid system models, which include a
cyber model consisting of an AADL model for a control center and
an OpenDNP3 software library, along with a physical distribution
power grid with 7 substations.

A AADL MODEL
In this part, we explain the AADL model that used for analyzing the
attack surface. Seven substations communicate to control center
through a bus. Each substation has four ports that transfer voltage,
current, breaker, and transformer between the control center and
them. Control center has same ports for transferring the data. The
first part of the control center is a front-end process(FEP) that is
responsible for communicating to the substations. FEP send and
receive data to/from the SCADA process. SCADA process is the
main process in the control center. It receives the data from FEP and
sends them to Database, DMS, and HMI. Moreover, It processes the
data and sends an alarm signal if it is needed. SCADA process is also
responsible for sending the command from HMI to FEP. SCADA
communicates with other parts of control center using an internal
bus. Figure 8 shows the AADL detailed model.

REFERENCES
[1] 2014. Advisory (ICSA-13-291-01B) DNP3 Implementation Vulnerability (Up-
Retrieved Jan 1, 2018 from https://ics-cert.us-cert.gov/advisories/

date B).
ICSA-13-291-01B

[2] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-flow
Integrity. In Proceedings of the 12th ACM Conference on Computer and Com-
munications Security (CCS ’05). ACM, New York, NY, USA, 340–353. https:
//doi.org/10.1145/1102120.1102165

[3] Atomatak. 2013. OpenDNP3. https://www.automatak.com/opendnp3/
[4] Hristo Bojinov, Dan Boneh, Rich Cannings, and Iliyan Malchev. 2011. Address
Space Randomization for Mobile Devices. In Proceedings of the Fourth ACM
Conference on Wireless Network Security (WiSec ’11). ACM, New York, NY, USA,
127–138. https://doi.org/10.1145/1998412.1998434

[5] GNU cflow. 2011. Introduction to cflow. http://www.gnu.org/software/cflow/
[6] David Cooper, Andrew Regenscheid, Murugiah Souppaya, Christopher Bean,
Mike Boyle, Dorothy Cooley, and Michael Jenkins. 2018. Security Considerations
for Code Signing. Technical Report.

[7] Julien Delange. [n. d.]. Automated Assurance of Security Policy Enforcement

(AASPE). https://github.com/cmu-sei/AASPE

[8] Julien Delange. 2017. AADL In Practice. Reblochon Development Company.
[9] Robert Ellison, Allen Householder, John Hudak, Rick Kazman, and Carol Woody.
2015. CMU/SEI-2015-TR-014: Extending AADL for Security Design Assurance of
Cyber-Physical Systems . Technical Report. Carnegie Mellon University (CMU)
Software Engineering Institute (SEI).

[10] Sriharsha Etigowni, Dave Jing Tian, Grant Hernandez, Saman Zonouz, and Kevin
Butler. 2016. CPAC: securing critical infrastructure with cyber-physical access
control. In Proceedings of the 32nd Annual Conference on Computer Security Appli-
cations. ACM, 139–152.

Table 6: Total Attack Surface value for different case studies

Ali Tamimi, Ozgur Oksuz, Jinyoung Lee, and Adam Hahn

Priv.
(V (s))

Data (D)

Connection Parameters (expc )

Process Parameters (expp )

Sub1

Sub2

Sub3

Sub4

Sub5

Sub6

FEP1

L1,L2,R1,R2

L,M,R

L,R

L,M,R

L,M,R

L1,L2,R1,R2

FEP1
FEP2
FEP1
FEP2
FEP1
FEP2
FEP1
FEP2
FEP1
FEP2
FEP1
FEP2
FEP1
FEP2

L1,L2,R1,R2

L,M,R

L,R

L,M,R

L,M,R

L1,L2,R1,R2

L1,L2,R1,R2

R1,L1
R2,L2
L1,L2
R1,R2
L1,L2,R1,R2

L1,L2
R1,R2

L,M,R

L,R

L,M,R

L,M,R

L,M,R
L
M,R
L,M
R

L,M,R
L,M
R

L,R
L
R
L
R

L,R
L
R

L,M,R
L,M
R
L
M,R

L,M,R
L
M,R

L,M,R
L,M
R
L,M
R

L,M,R
L,M
R

L1,L2,R1,R2
L1,L2,R1,R2

L1,L2,R1,R2

L2
L1,R1,R2
L2,R2
L1,R1
L1,L2,R1,R2

L2,R2
L1,R1

enc.
AES
NULL
AES
NULL
3DES
AES
NULL
AES
NULL
AES
AES
AES
AES
AES
AES
AES
AES
AES
AES

key_ex.
2048bits
NULL
2048bits
NULL
1024bits
2048bits
NULL
2048bits
NULL
2048bits
2048bits
2048bits
2048bits
2048bits
2048bits
2048bits
2048bits
2048bits
2048bits

hash_func. media_type ASLR DEP code_sig. 64_bit CFI
SHA-2
NULL
SHA-2
NULL
SHA-1
SHA-2
NULL
SHA-2
NULL
SHA-2
SHA-2
SHA-2
SHA-2
SHA-2
SHA-2
SHA-2
SHA-2
SHA-2
SHA-2

wired
wireless
wired
wireless
wireless
wired
wireless
wired
wireless
wired
wired
wired
wired
wired
wired
wired
wired
wired
wired

Y
Y
N
N
N
Y
N
Y
N
Y
N
Y
N
Y
N
Y
Y
Y
Y

Y
Y
N
N
Y
Y
N
Y
N
Y
N
Y
N
Y
N
Y
Y
Y
Y

Y
Y
N
N
Y
Y
N
Y
N
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y

Y
Y
N
N
Y
Y
N
Y
N
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y

Y
Y
N
N
N
Y
N
Y
N
Y
N
Y
N
Y
N
Y
Y
Y
Y

Total
Attack
surface
metric
(T AS M )

13,609
39,500
68,948
94,840
20,580
39,655

40,373

16,534

15,908

16,734

24,829

13,592

International Conference on Dependable Systems and Networks (DSN). 531–542.
https://doi.org/10.1109/DSN.2017.60

[29] S. Sridhar and M. Govindarasu. 2014. Model-Based Attack Detection and Miti-
gation for Automatic Generation Control. IEEE Transactions on Smart Grid 5, 2
(March 2014), 580–591. https://doi.org/10.1109/TSG.2014.2298195

[30] Jakub Szefer, Eric Keller, Ruby B. Lee, and Jennifer Rexford. 2011. Eliminating
the Hypervisor Attack Surface for a More Secure Cloud. In Proceedings of the
18th ACM Conference on Computer and Communications Security (CCS ’11). ACM,
New York, NY, USA, 401–412. https://doi.org/10.1145/2046707.2046754

[31] A. Tamimi. 2018. AADL Attack Surface Analysis Tool.

https://github.com/

wsu-smartcity/

[32] C.-W. Ten, G. Manimaran, and C.-C. Liu. 2008. Cybersecurity for Critical Infras-
tructures: Attack and Defense Modeling. IEEE Transactions on Systems, Man and
Cybernetics, Part A: Systems and Humans 23, 4 (November 2008), 1836 – 1846.

[33] V. Terzija. 2007. Wide Area Monitoring Protection and Control - WAMPAC. In
2007 IET-UK International Conference on Information and Communication Tech-
nology in Electrical Sciences (ICTES 2007). I–1–I–1.

[34] U.S.CERT. 2018. Russian Government Cyber Activity Targeting Energy and Other
Critical Infrastructure Sectors. https://www.us-cert.gov/ncas/alerts/TA18-074A
[35] W. Jewell V. Namboodiri, V. Aravinthan. 2012. Communication Needs and In-
tegration Options for AMI in the Smart Grid (PSERC Publication 12-05). Power
Systems Engineering Research Center (PSERC) (May 2012).

[36] Kevin van der Pol and Thomas Noll. 2015. Security Type Checking for MILS-
AADL Specifications. International Workshop on MILS: Architecture and Assurance
for Security Systems (2015).

[37] L. Xie, Y. Mo, and B. Sinopoli. 2011. Integrity Data Attacks in Power Market
Operations. IEEE Transactions on Smart Grid 2, 4 (Dec 2011), 659–666. https:
//doi.org/10.1109/TSG.2011.2161892

[11] James Christopher Foreman and Dheeraj Gurugubelli. 2016. Cyber Attack Surface
Analysis of Advanced Metering Infrastructure. CoRR abs/1607.04811 (2016).
arXiv:1607.04811 http://arxiv.org/abs/1607.04811

[12] Daniel E. Geer Jr. 2011. Attack Surface Inflation. IEEE Security and Privacy 9, 4

(July 2011), 85–86. https://doi.org/10.1109/MSP.2011.78

[13] A. Hahn and M. Govindarasu. 2011. Cyber Attack Exposure Evaluation Frame-
work for the Smart Grid. IEEE Transactions on Smart Grid 2, 4 (Dec 2011), 835–843.
https://doi.org/10.1109/TSG.2011.2163829

[14] J. Hansson, B. Lewis, J. Hugues, L. Wrage, P. Feiler, and J. Morley. 2016. Model-
Based Verification of Security and Non-Functional Behavior using AADL. IEEE
Security Privacy PP, 99 (2016), 1–1. https://doi.org/10.1109/MSP.2009.143
[15] Michael Howard, Jon Pincus, and Jeannette M. Wing. 2003. Measuring Relative
Attack Surfaces. Proceedings of Workshop on Advanced Developments in Software
and Systems Security (December 2003).

[16] Anil Kurmus, Reinhard Tartler, Daniela Dorneanu, Bernhard Heinloth, Valentin
Rothberg, Andreas Ruprecht, and Daniel Lohmann. 2013. Attack Surface Metrics
and Automated Compile-Time OS Kernel Tailoring. In Proceedings of the Network
and Distributed System Security Symposium (NDSS).

[17] Robert M. Lee, Michael J. Assante, and Tim Conway. 2016. TLP: White Analysis of
the Cyber Attack on the Ukrainian Power Grid: Defense Use Case. Retrieved Sept.
13, 2017 from https://ics.sans.org/media/E-ISAC_SANS_Ukraine_DUC_5.pdf

[18] G. Liang, J. Zhao, F. Luo, S. R. Weller, and Z. Y. Dong. 2017. A Review of False
Data Injection Attacks Against Modern Power Systems. IEEE Transactions on
Smart Grid 8, 4 (July 2017), 1630–1638. https://doi.org/10.1109/TSG.2015.2495133
[19] S. Liu, B. Chen, T. Zourntos, D. Kundur, and K. Butler-Purry. 2014. A Coordinated
Multi-Switch Attack for Cascading Failures in Smart Grid. IEEE Transactions on
Smart Grid 5, 3 (May 2014), 1183–1195. https://doi.org/10.1109/TSG.2014.2302476
[20] Yao Liu, Peng Ning, and Michael K. Reiter. 2011. False Data Injection Attacks
Against State Estimation in Electric Power Grids. ACM Trans. Inf. Syst. Secur. 14,
1, Article 13 (June 2011), 33 pages. https://doi.org/10.1145/1952982.1952995
[21] P. K. Manadhata and J. M. Wing. 2011. An Attack Surface Metric. IEEE Transactions
on Software Engineering 37, 3 (May 2011), 371–386. https://doi.org/10.1109/TSE.
2010.60

[22] Microsoft. 2004. Data Execution Prevention. https://msdn.microsoft.com/en-us/

library/windows/desktop/aa366553.aspx

[23] S. Obermeier, M. Wahler, T. Sivanthi, R. Schlegel, and A. Monot. 2014. Automatic
attack surface reduction in next-generation industrial control systems. In 2014
IEEE Symposium on Computational Intelligence in Cyber Security (CICS). 1–8.
https://doi.org/10.1109/CICYBS.2014.7013366

[24] OSATE. 2018. https://github.com/osate
[25] E. Osterweil, D. McPherson, and L. Zhang. 2014. The Shape and Size of Threats:
Defining a Networked System’s Attack Surface. In 2014 IEEE 22nd International
Conference on Network Protocols. 636–641. https://doi.org/10.1109/ICNP.2014.101
[26] M. A. Rahman and H. Mohsenian-Rad. 2013. False data injection attacks against
nonlinear state estimation in smart power grids. In 2013 IEEE Power Energy Society
General Meeting. 1–5. https://doi.org/10.1109/PESMG.2013.6672638

[27] Carnegie Mellon SEI. 2015. Architecture Analysis and Design Language A Model-
ing Language for Safety-Critical Systems. http://www.aadl.info/aadl/currentsite
[28] D. Shelar, P. Sun, S. Amin, and S. Zonouz. 2017. Compromising Security of
Economic Dispatch in Power System Operations. In 2017 47th Annual IEEE/IFIP

Attack Surface Metrics and Privilege-based Reduction Strategies for Cyber-Physical Systems

Figure 8: Detail Architecture of the system

