Preventing Outages under Coordinated
Cyber-Physical Attack with Secured PMUs

Yudi Huang, Student Member, IEEE, Ting He, Senior Member, IEEE, Nilanjan Ray Chaudhuri,

Senior Member, IEEE, and Thomas La Porta Fellow, IEEE

1

2
2
0
2

r
a

M
6
2

]
F
P
.
s
c
[

1
v
9
6
9
3
1
.
3
0
2
2
:
v
i
X
r
a

Abstract—Due to the potentially severe consequences of coordi-
nated cyber-physical attacks (CCPA), the design of defenses has
gained signiﬁcant attention. A popular approach is to eliminate
the existence of attacks by either securing existing sensors
or deploying secured PMUs. In this work, we improve this
approach by lowering the defense target from eliminating attacks
to preventing outages and reducing the required number of PMUs.
To this end, we formulate the problem of PMU Placement for
Outage Prevention (PPOP) under DC power ﬂow model as a
tri-level non-linear optimization problem and transform it into
a bi-level mixed-integer linear programming (MILP) problem.
Then, we propose an alternating optimization framework to solve
PPOP by iteratively adding constraints, for which we develop
two constraint generation algorithms. In addition, for large-scale
grids, we propose a polynomial-time heuristic algorithm to obtain
suboptimal solutions. Next, we extend our solution to achieve the
defense goal under AC power ﬂow model. Finally, we evaluate our
algorithm on IEEE 30-bus, 57-bus, 118-bus, and 300-bus systems,
which demonstrates the potential of the proposed approach in
greatly reducing the required number of PMUs.

I. INTRODUCTION
Coordinated cyber-physical attacks (CCPA) [2] have gained
a great deal of attention due to the stealthiness of such attacks
and the potential for severe damage on to the smart grid. The
power of CCPA is that its physical component damages the grid
while its cyber component masks such damage from the control
center (CC) to prolong outages and potentially enable cascades.
For instance, in the Ukrainian power grid attack [3], attackers
remotely switched off substations (damaging the physical
system) while disrupting the control through telephonic ﬂoods
and KillDisk server wiping (damaging the cyber system).

Defenses against CCPA can be broadly categorized into
detection and prevention. Attack detection mechanisms aim
at detecting attacks that are otherwise undetectable using
traditional bad data detection (BDD) by exploiting knowledge
unknown to the attacker [4]. However, the knowledge gap
between the attacker and the defender may disappear due to
more advanced attacks, and relying on detection alone risks
severe consequences in case of misses. Therefore, in this work,
we focus on preventing attacks using secured sensors.

We consider a powerful attacker with full knowledge of
the pre-attack state of the grid and the locations of secured
PMUs. The attacker launches an optimized CCPA where the

The authors are with the School of Electrical Engineering and Computer
Science, Pennsylvania State University, University Park, PA 16802, USA
(e-mail: {yxh5389, tzh58, nuc88, tﬂ12}@psu.edu).

A preliminary version of this work was presented at SmartGridComm’21 [1].
This work was supported by the National Science Foundation under award

ECCS-1836827.

physical attack disconnects a limited number of lines and the
cyber attack falsiﬁes the breaker status and the measurements
from unsecured sensors to mask the physical attack while
misleading security constrained economic dispatch (SCED)
at the CC. Such attacks can result in severe cascading failures.
For example, under the setting in Section V, CCPA in absence
of secured PMUs can cause initial overload-induced tripping
at 2, 1, and 2 lines in IEEE 30-bus, 57-bus, and 118-bus
systems, respectively. Moreover, the re-distribution of power
ﬂows on the initially tripped lines may cause cascading
outages. Take IEEE 118-bus system as an example. There is
an attack that physically disconnects line 144 and manipulates
the measurements to cause overload-induced tripping at line
109. These initial outages will trigger a cascade that eventually
results in outages at 82 lines. This observation highlights the
importance of defending against such attacks.

While attack prevention traditionally aims at eliminating
undetectable attacks by deploying secured PMUs to achieve
full observability [5], this approach can require a large number
of PMUs. Little is known about how to achieve a good tradeoff
between the efﬁcacy of protection and the cost of PMU place-
ment during the deployment process before full observability is
achieved. In addition, the operators may be only interested in
using secured PMUs to prevent severe consequences, while leav-
ing the defense of less severe attacks to other mechanisms [6].
To ﬁll this gap, we lower the goal of PMU placement to pre-
venting undetectable attacks from causing outages. Speciﬁcally,
we want to deploy the minimum number of secured PMUs such
that the attacker will not be able to cause overload-induced line
tripping due to overcurrent protection devices. The key novelty
of our approach is that we allow undetectable attacks to exist but
prevent them from causing any outages, hence potentially requir-
ing fewer secured PMUs. For instance, we can prevent overload-
induced tripping using 71% fewer secured PMUs compared to
the requirement of full observability in IEEE 118-bus system.

A. Related Work

Attacks: False data injection (FDI) [7], [8] is widely adopted
to launch cyber attacks in CCPA to bypass the traditional BDD
[2]. A typical form of FDI is load redistribution attack [9],
which together with physical attacks [2], [10], [11] that alter
grid topology, aims to mislead SCED by injecting false data
for economic loss or severe physical consequences such
as sequential outages [11]. Bi-level optimization is widely
adopted for analyzing the impact of CCPA on state deviation
[12] or line ﬂow changes [13]. In this work, we extend them

 
 
 
 
 
 
2

into a stronger attacker that jointly optimizes the location
of physical attacks and the attack target. Besides misleading
SCED, similar physical consequences can also be achieved
by attacking the commands issued by the control center [14],
[15], which is not the focus of this work.

Defenses: Defending against CCPA requires a systematic
mechanism [6], which can be decomposed into three modules:
prevention that postpones the onset of attacks [10], detection
that identiﬁes the attack before it starts affecting the system
[5], [14], [16]–[21], and resilience which limits the impact
of the attacks that successfully bypass the detection [18],
[22]–[24]. Our focus is on an intermediate stage of PMU
deployment where not enough PMUs are installed to achieve
perfect detection of all FDI attacks.

To eliminate the existence of FDI by detection, different
strategies have been studied, such as directly protecting meters
[16]–[20], [25] or deploying secured PMUs [5], [21]. Due to
the connection between observability of the grid and FDI [17],
solutions on achieving full observability through PMUs [26] can
also be leveraged to defend against FDI. Unlike the aforemen-
tioned works, our work only aims to prevent attacks from caus-
ing outages, which can signiﬁcantly reduce the required number
of secured PMUs while maintaining the system resilience.

Tri-level optimization is widely used for modeling interac-
tions among the defender, the attacker and the operator in smart
grid. To name a few, a tri-level model is proposed in [23] to
ﬁnd the optimal set of lines to protect from physical attacks to
minimize load shedding. In [18], [22], [24], the measurements
to protect were chosen by solving a budget-constrained
optimization problem, which was also adopted in [27] for
distribution networks. However, existing works are limited in
the following aspects. From the formulation perspective, their
solution may become sub-optimal if the cost vector in SCED
changes due to the dependence of their methods on the KKT
conditions of linear programming. Such dependence also limits
the extension of their formulation to the AC power ﬂow model.
From the computational perspective, the method in [18] solves
a MIP for each possible physical attack and thus is not scalable
to multi-line physical attacks. The method in [23] introduces
bilinear terms, which leads to a high computational cost. To
overcome such limitations, we will develop a formulation for
CCPA that can (i) model multi-line physical attacks without
bilinear terms, and (ii) be extended to the AC power ﬂow model.
Moreover, the PMU placement obtained from our solution can
prevent overloading-induced line tripping regardless of the cost
vector in SCED. Furthermore, securing PMU measurements
instead of (legacy) measurements for individual nodes/lines has
the advantage that it aligns with the ongoing trend of deploying
PMU-based power grid monitoring systems.

Power ﬂow models: Due to the nonlinear and nonconvex na-
ture of AC power ﬂow equations, it is a common practice [28] to
develop FDI/CCPA or its countermeasure under the DC power
ﬂow model and validate the solutions under the AC power ﬂow
model. Although much efforts [29]–[31] have been devoted into
directly formulating FDI under the AC model, most of them
targeted at causing erroneous state estimation, with very limited
results on load redistribution attack aiming at causing outages.
The works [29] formulated FDI under the AC model through

convex relaxation, but did not accurately model the impact of
FDI on SCED. In [25], [28], [32], the design of FDI was based
on the DC model, although the feasibility of the attack was
tested under the AC model. In [30], [31], a formulation based
on convex relaxation was proposed to model load redistribution
attack under the AC model. They adopted DC-based line outage
distribution factors (LODF) to infer the impact of attacks on
SCED, which leads to the use of active power ﬂows as the
criterion to determine overloading. This is inaccurate as the true
criterion should be the magnitude of current. To the best of our
knowledge, it remains an open problem to compute the optimal
load redistribution attack under the AC power ﬂow model. Our
approach is to circumvent this problem by (i) ﬁrst ﬁnding
a PMU placement to prevent load redistribution attack from
causing outages under the DC model, (ii) then developing a
method to test the feasibility of the found PMU placement under
the AC model based on a recently developed approximation
of AC power ﬂow equations [33], and (iii) ﬁnally reﬁning the
PMU placement to prevent outages under the AC model.

B. Summary of Contributions

We summarize our contributions as follows:

1) Instead of eliminating the existence of FDI, we
investigate the optimal secured PMU Placement for
Outage Prevention (PPOP) problem to defend against
CCPA, where we formulate a strong attacker that jointly
optimizes physical attack locations and target lines. The
proposed approach can potentially require fewer PMUs
than approaches that eliminate FDI.

2) We propose an alternating optimization algorithm
to solve PPOP by generating additional constraints
from each infeasible PMU placement. Speciﬁcally, we
demonstrate how to generate “No-Good” constraints and
“Attack-Denial” constraints to solve PPOP optimally.
3) We develop a heuristic algorithm for PPOP to produce
a possibly suboptimal solution. The complexity of the
proposed heuristic is polynomial in the grid size, which
makes it scalable to large networks.

4) We develop an algorithm to test whether a given PMU
placement can achieve our defense goal under the AC
power ﬂow model. In addition, we propose a heuristic
to augment the given PMU placement to pass the test.
5) We systematically evaluate the proposed solution on
IEEE 30-bus, IEEE 57-bus, IEEE 118-bus, and IEEE
300-bus systems. The results demonstrate that
the
proposed solution can substantially reduce the number
of required PMUs while preventing CCPA from causing
outages, even with the AC-based augmentation.

Roadmap: We formulate the PPOP problem under the DC
model in Section II and present both optimal algorithms and
heuristics to solve PPOP in Section III. We then show how
the DC-based solution can be reﬁned to work under the AC
model in Section IV. We evaluate the performance of PPOP
in Section V and conclude the paper in Section VI. Additional
contents and proofs are given in the appendices.

II. PROBLEM FORMULATION

Notations: For a matrix A, we denote by ai its i-th column
and Ak its k-th row. We slightly abuse the notation | · | in that
|A| indicates the cardinality if A is a set and the element-wise
absolute value if A is a vector or matrix. Logical expression ↔
indicates the “if and only if” logic, while → denotes the “if then”
logic. When the operators ≥, ≤, = are applied to two vectors,
they indicate element-wise operations. Let a ∈ Rna , b ∈ Rnb
be two vectors, then a ⊕ b ∈ Rna+nb indicates the vertical
concatenation of a and b. Let (cid:100)a(cid:101) denote the element-wise
ceiling. If na = nb = n, then a (cid:12) b := (aibi)n
i=1 denotes
the Hadamard product, i.e., the element-wise product. We use
Λ(·) ∈ {0, 1}m×n with one nonzero element in each row to
select entries from a vector such that Λ(·)x is a subvector of x.

A. Power Grid Modeling

We model the power grid as a connected undirected graph
N = (V, E), where E denotes the set of lines (lines) and
V the set of nodes (buses). Majority of our results will be
based on the DC power ﬂow model, which is an approximation
widely adopted for studying security issues in power grids [2],
[5], [9]–[13], [18]; extension to the AC power ﬂow model is
deferred to Section IV. Under this approximation, each line
e = (s, t) is characterized by reactance re = rst = rts. The
grid topology can be represented by the admittance matrix
B := (Buv)u,v∈V ∈ R|V |×|V |, deﬁned as

Buv =






0
−1/ruv
− (cid:80)

if u (cid:54)= v, (u, v) (cid:54)∈ E,
if u (cid:54)= v, (u, v) ∈ E,

(1)

w∈V \{u} Buw if u = v.
Besides B, the grid topology can also be described by incidence
matrix D ∈ {−1, 0, 1}|V |×|E|, which is deﬁned as follows:

Dij =






1
−1
0

if line ej comes out of node vi,
if line ej goes into node vi,
otherwise,

(2)

where the orientation of each line is assigned arbitrarily. By
deﬁning Γ ∈ R|E|×|E| as a diagonal matrix with diagonal
entries Γe = 1
(e ∈ E), we have B = DΓDT and f =
re
ΓDT θ ∈ R|E| where f denotes the line ﬂows. By deﬁning net-
work states as phase angles θ := (θu)u∈V and active powers as
p = (pu)u∈V , the relationship between p, θ and f is given as

p = Bθ = Df ,

(3)

N , zT

The CC will periodically conduct state estimation, whose results
will be used for SCED to re-plan the power generation [9], [11].
L ]T ∈ Rm denote the unsecured meter
Formally, let z = [zT
measurements, where zN ∈ RmN denotes the power injection
measurements over (a subset of) nodes and zL ∈ RmL denotes
the power ﬂow measurements over (a subset of) lines. Let ΛN
and Λp be two row selection matrices such that zN = ΛN z =
Λpp. Similarly, we deﬁne row selection matrices ΛL and Λf
such that zL = ΛLz = Λf f . Then, we have
(cid:20) ΛpB
Λf ΓDT

z = Hθ + (cid:15) for H :=

(4)

(cid:21)

,

3

where H is the measurement matrix based on the meter
locations and the reported breaker status, and (cid:15) is the
measurement noise. In the rest of the paper, we assume that
the measurements satisfy the conditions of [34, Theorem 5]
such that H has full column rank to support unique recovery
of θ from (4) (before attack). If ¯θ is the estimated phase
angle from z and H, then BDD will raise alarm if (cid:107)z − H ¯θ(cid:107)
is greater than a predeﬁned threshold.

Given p0 := B ¯θ, the CC will conduct SCED to calculate
new generation to meet
the demand with minimal cost.
Speciﬁcally, let Λg ∈ {0, 1}|Vg|×|V |, Λd ∈ {0, 1}|Vd|×|V | be
row selection matrices for generator/load buses in p, where
Vd and Vg denote the sets of load buses and generator buses,
respectively. Denote ˆθ as the decision variable where B ˆθ
represents the new power injection after SCED, and φ ∈ R|Vg|
as the cost vector for power generation. Then, SCED can be
formulated as follows [11]:

ψs(p0, D) = arg min

ˆθ

φT (ΛgB ˆθ)

s.t. ΛdB ˆθ = Λdp0,

ΓDT ˆθ ∈ [−fmax, fmax],
ΛgB ˆθ ∈ [pg,min, pg,max],

(5a)

(5b)

(5c)

(5d)

where fmax ∈ R|E|
indicates the normal line ﬂow limits,
pg,min and pg,max denote lower/upper bounds on generation,
and (5b) indicates that demands on all load buses are satisﬁed.

B. Modeling Coordinated Cyber-Physical Attack (CCPA)

In this section, we formulate the attack model according
to a load redistribution attack [9] that aims at causing the
maximum outages, so that a defense against this attack can
prevent outage under any attack under the same constraints. In
the sequel, “ground truth” means the estimated value based on
unmanipulated measurements, which may contain noise.

For ease of presentation, we summarize the timeline of the

entire attack process, as shown in Fig 1. Speciﬁcally,

• At t0, the attacker estimates θ0 and p0 := ˜Bθ0 by

eavesdropping on z0 and ˜H.

• At t1, CCPA is deployed to change the ground-truth from

z0, ˜H, θ0 to z1, H and θ1, respectively.

• At t2, the CC receives falsiﬁed information, i.e., ˜H and
˜z2, which leads to ˜θ2. Then the CC will deploy a new
dispatch of power generation as ˜p3 := ˜B ˜θ3, where ˜θ3
denotes the associated predicted phase angles.

• At t3, the new dispatch takes effect and reaches steady
state, with the true phase angles θ3 and power ﬂows f3.
Key notations at different time instances are summarized in
Table I, where “—” means that the information is not available
to the CC at the given time instance.

Figure 1. Timeline of an instance of CCPA

First, we model the inﬂuence of attacks on SCED. We
deﬁne ac ∈ Rm to be the cyber-attack vector, which changes
the measurements received by the CC to ˜z2 = z2 + ac, and

t0t1t2timet3෩𝐻,෨𝐵,෩𝐷𝐻,𝐵,𝐷Physical attackBefore attackCCPA deployedSCED at CCPost-SCED steady state𝑢0𝑢5𝑢1𝑢3𝑢4𝑢2Table I
NOTATIONS V.S. TIMELINE

forecasting [9], [11], which can be modeled by 1

t1
t0
time
˜H H
True measurement matrix
Measurement matrix at CC — —
θ0
θ1
— —
z0
z1
— —

True phase angle
Phase angle at CC
True measurement
measurement at CC

t2
H
˜H
θ2 = θ1
˜θ2
z2 = z1
˜z2

t3
H
˜H
θ3
˜θ3
z3
—

−α|p0| ≤ ˜B ˜θ2 − p0 ≤ α|p0|.

(12)

Following the convention in [9], [23], the attack is con-
strained by a predeﬁned constant ξp denoting the maximum
number of attacked lines and another constant ξc denoting the
maximum number of manipulated measurements, i.e.,

(cid:107)ap(cid:107)0 ≤ ξp,

(cid:107)ac(cid:107)0 ≤ ξc.

(13)

4

ap ∈ {0, 1}|E| the physical-attack vector, where ap,e = 1
indicates that line e is disconnected by the physical attack.
As the physical attack changes the topology, we use ˜N to
denote the pre-attack topology and N the post-attack topology.
Accordingly, ˜B, ˜D, ˜H denote the pre-attack admittance, inci-
dence, and measurement matrices, and B, D, H their (true)
post-attack counterparts, related by

B = ˜B − ˜DΓdiag(ap) ˜DT , D = ˜D − ˜Ddiag(ap),
and H = ˜H − [(Λp ˜DΓdiag(ap) ˜DT )T , (Λf ˜Ddiag(ap))T ]T .
Falsiﬁed measurements in ˜z2 and breaker status will mislead
CC to an incorrect state estimation and thus falsiﬁed SCED de-
cisions. Hence, overload-induced line tripping can happen at t3.

(6)

To bypass BDD, the attacker has to manipulate breaker status
information to mask the physical attack, misleading the CC to
believe that the measurement matrix is ˜H instead of H. Also,
measurements have to be modiﬁed into ˜z2 such that BDD
with ˜z2 and ˜H as input will not raise any alarm. Below, we
will derive constraints on ap and ac such that the modiﬁed
data can pass BDD under the assumption that the pre-attack
data can pass BDD as assumed in FDI [2]. Considering that
˜z2 = z2 + ac, ac should be constructed such that
(cid:107) ˜z2 − ˜H ˜θ2(cid:107) = (cid:107)z0 − ˜Hθ0 + z2 + ac − z0 + ˜Hθ0 − ˜H ˜θ2(cid:107)
(7)

(pre-attack residual)

= (cid:107)z0 − ˜Hθ0(cid:107),

which leads to the following construction of ac:

ac = z0 − z2 + ˜H( ˜θ2 − θ0)

= ˜Hθ0 + (cid:15)0 − (Hθ2 + (cid:15)0) + ˜H( ˜θ2 − θ0)

=

(cid:20) Λp ˜B
Λf Γ ˜DT

(cid:21)

˜θ2 −

(cid:20) ΛpB
Λf ΓDT

(cid:21)

θ2.

(8)

(9)

(10)

Besides (8), there may be additional constraints on ac to avoid
causing suspicion. Speciﬁcally, following [9], we assume that
all the power injections at generator buses are measured and
not subject to attacks, i.e.,

Λg ˜D ˜f2 = Λg ˜B ˜θ2 = ΛgBθ2 = ΛgDf2 = Λgp0,

(11)

recalling that Λg is the row selection matrix corresponding
to generator buses. Moreover, by representing the maximum
normal load ﬂuctuation through α ≥ 0, the magnitude of
falsiﬁcation at load buses needs to be constrained due to load

In addition, we constrain ap so that the graph after physical
attack remains connected, which is needed for stealth of the
attack according to [11], [12]. Speciﬁcally, deﬁning fcon ∈
R|E| as a pseudo ﬂow and u0 as the reference node, we can
guarantee network connectivity at t2 by ensuring
(cid:40)

˜Dufcon =

|V | − 1,
−1,

if u = u0,
if u ∈ V \ {u0},

−|V | · (1 − ap,e) ≤ fcon,e ≤ |V | · (1 − ap,e).

(14a)

(14b)

With lines oriented as in ˜D, (14a) (ﬂow conservation constraint)
and (14b) (line capacity constraint) ensure the existence of a
unit pseudo ﬂow from u0 to every other node in the post-attack
grid and hence the connectivity of the post-attack grid, where
fcon,e > 0 if the ﬂow on e is in the same direction of the line
and fcon,e < 0 otherwise.

In practice, transmission lines are equipped with overcurrent
protection devices, which will trip the lines when the power
ﬂow exceeds the tripping threshold. Thus, heavy overloading
caused by the SCED misled by cyber attacks can lead to
initial outages at t3, which can create cascading outages [11].
Speciﬁcally, let fmax ∈ R|E| be the normal power ﬂow limits
imposed in SCED [35]. Then, a line e ∈ E will be tripped by
protection devices (i.e., having an outage) if

|fe| > γefmax,e,

(15)

where γe denotes the tripping threshold based on the thermal
limit of the line. In practice, although [36] suggests γe ≥ 1.5,
the operator may choose higher fmax,e, which leads to a smaller
γe. As discussed in [11], [37], a small γe implies that the system
is operating with a low margin of overload. A large γe may
contribute to robustness to cascading failure [37], but leads to
underutilization of transmission lines.

C. Modeling the Protection Effect of Secured PMUs

Let β ∈ {0, 1}|V | be the indicator vector for PMU placement
such that βu = 1 if and only if a secured PMU is installed at
node u. We deﬁne Ω(β) := {u|βu > 0} and the inverse process
β(Ω) : βu = 1 if u ∈ Ω and βu = 0 otherwise. Let Vu be the
node set containing neighbors of node u (including u) and Eu
be the line set composed of lines incident on u. According to
[21], by measuring both voltage and current phasor, a PMU
on node u can guarantee the correctness of phase angles in Vu

1In contrast to [1] that only imposes the magnitude constraint on measured
buses, constraint (12) is imposed on all buses (although subsumed by (11)
for generator buses). This is because under the assumption of full-rank
measurement matrix (Section II-A), the CC can recover all the phase angles
and hence the power injections at all the buses, and thus the attacker needs to
avoid causing too much deviation in the power injections at all the buses.

and protect lines in Eu from both cyber and physical attacks.
Formally, we deﬁne xN ∈ {0, 1}|V | such that (xN,u = 1) ↔
(∃v ∈ Vu such that βv = 1), which can be modeled as

∆−1Aβ ≤ xN ≤ ∆−1Aβ +

(cid:107)∆(cid:107)∞ − 1
(cid:107)∆(cid:107)∞

,

(16)

where ∆ ∈ Z|V |×|V | is a diagonal matrix with ∆uu = |Vu|,
while A := A+I is the adjacency matrix of the grid with added
self-loops at all nodes. Similarly, we deﬁne ζ to be any constant
within [0.5, 1) and xL ∈ {0, 1}|E| satisfying (xL,e = 1) ↔
(∃v with e ∈ Ev and βv = 1), which can be linearlized as

0.5|D|T β ≤ xL ≤ 0.5|D|T β + ζ.

(17)

We assume that the PMU locations are known to the attacker,

thus the cyber attack is constrained as follows:
xN,u = 1 → ˜θ2,u = θ2,u,∀u ∈ V,
∀e ∈ E.
xL,e = 1 → ap,e = 0,

(18a)

(18b)

Note that (16)-(18) implicitly protect the power ﬂow measure-
ments on lines incident to a PMU. To see this, suppose that e =
(s, t) and βs = 1. Then we must have xN,s = xN,t = xL,e = 1
due to (16)-(17). By (18), it is guaranteed that ˜z2,e := (˜θ2,s −
˜θ2,t)/rst = (θ2,s − θ2,t)/rst =: z2,e. In addition, PMU data
are usually collected at a high frequency (e.g., around 60-200
samples per second). Thus, the PMUs can “instantly” detect any
attack violating (18) even though they cannot prevent the attack
from happening. In this way, the PMUs can reduce the potential
damage by restricting the attacker’s choices of attack vectors.

D. Optimal PMU Placement Problem

Our main problem, named PMU Placement for Outage
Prevention (PPOP), aims at placing the minimum number
of secured PMUs so that no undetectable CCPA can cause
overload-induced tripping. To achieve this, we model the
problem as a tri-level optimization problem (an overview of
PPOP is given in Fig. 4 in Appendix A).

The middle-level optimization is the attacker’s problem,
which aims to maximize the number of overloaded lines without
being detected. Instead of using ac as decision variable, we
propose to formulate over ˜fi, fi and ˜θi, θi where i ∈ {2, 3}. In
the rest of the paper, we will apply big-M modeling technique
that introduces sufﬁciently large constants denoted as M(·) for
linearization. The calculation of M(·) is given in Appendix B.
Speciﬁcally, the constraints on θ2 and f2 are:

−M2,a,e (1 − ap) ≤ f2 ≤ M2,a,e (1 − ap) ,
˜Df2 = p0,
− M2,f ap ≤ ΓDθ2 − f2 ≤ M2,f ap.

(19a)

(19b)

(19c)

The constraints (19a) and (19b) guarantee the consistency
between f2 and p0 given ap, where ap,e = 1 will force
f2,e = 0. The role of (19c) is to force the consistency between
f2 and θ2 for all e with ap,e = 0, which is necessary for the
uniqueness of f2. Similarly, we can transform (7)-(13) into
constraints over ˜f2, ˜θ2, and ap, which are

− fmax ≤ ˜f2 ≤ fmax,

(20a)

Γ ˜DT ˜θ2 − ˜f2 = 0,
˜θ2,u − θ2,u ≤ M2,θ · (1 − xN,u),
˜θ2,u − θ2,u ≥ −M2,θ · (1 − xN,u),
− α|p0| ≤ ˜D ˜f2 − p0 ≤ α|p0|,
Λg ˜D ˜f2 = Λgp0,
(cid:16) ˜f2 − f2
(cid:107)Λf
(cid:107)ap(cid:107)0 ≤ ξp,

(cid:107)0 + (cid:107)Λp

(cid:17)

(cid:16) ˜D ˜f2 − p0

5

(20b)

(20c)

(20d)

(20e)

(20f)

(20g)

(cid:17)

(cid:107)0 ≤ ξc,

(20h)
where (20a)-(20b) guarantee the validity of ˜f2 as in (19a)-(19c),
(20c)-(20d) linearize (18a) (M2,θ deﬁned in Appendix B), while
(20e), (20f), and (20g)–(20h) correspond to (12), (11), and (13),
respectively. It is worth noting that there exists an ac in the
form of (10) for any ˜f2 and ˜θ2 satisfying (20) due to the
relationship between ˜f2, ˜θ2 and ac shown in (10) and (20b).
Moreover, the constraints on θ3, ˜θ3, and f3 are

pg,min ≤ Λg ˜B ˜θ3 ≤ pg,max
− fmax ≤ ΓDT ˜θ3 ≤ fmax,
Λd ˜B ˜θ3 = Λd ˜D ˜f2
− M3,a(1 − ap) ≤ f3 ≤ M3,a(1 − ap),
Λd ˜Df3 = Λdp0, Λg ˜Df3 = Λg ˜B ˜θ3,
− M3,f ap ≤ Γ ˜DT θ3 − f3 ≤ M3,f ap,

(21a)

(21b)

(21c)

(21d)

(21e)

(21f)
where (21a)-(21c) describe the feasible region of ˜θ3 under
false data injection, and (21d)–(21f) are used to enforce the
power ﬂow equation (3) at t3, where Λg ˜B ˜θ3 is the post-SCED
generation predicted by the attacker. While a straightforward
formulation of the power ﬂow equation should be
ΓDT θ3 = f3, ΛdDf3 = Λdp0, ΛgDf3 = Λg ˜B ˜θ3, (22)
such a formulation will introduce bilinear terms DT θ3 and
Df3, as the post-attack incidence matrix D is a function
of the physical-attack vector ap that
is also a decision
variable for the attacker. To avoid the bilinear terms, we
use (21d) to force f3,e = 0 when ap,e = 1 (line e is
e θ3 = f3,e
disconnected), and (21f) to force Γe
when ap,e = 0. Moreover, under (21d), we observe that Df3 =
(cid:80)
˜def3,e = ˜Df3, as de = ˜de if ap,e = 0
and def3,e = ˜def3,e = 0 if ap,e = 1, which explains (21e).

e∈E def3,e = (cid:80)

˜dT
e θ3 = ΓedT

e∈E

Thus, the attacker’s problem, which deﬁnes the optimal

attack strategy, can be formulated as:

ψa(β) := max (cid:107)π(cid:107)0

s.t.

(14), (16) − (21),
θ2,u0 = θ3,u0 = ˜θ2,u0 = ˜θ3,u0 = 0,
˜θ3 = ψs( ˜B ˜θ2, ˜D),
|f3,e|
fmax,e

> γe ↔ πe = 1, ∀e ∈ E,

(23a)

(23b)

(23c)

(23d)

(23e)

where yc := ˜θ2 ⊕ ˜θ3 ⊕ θ2 ⊕ θ3 ⊕ f2 ⊕ f3 ⊕ ˜f2 ⊕ fcon and
yb := π ⊕ ap ⊕ xN ⊕ xL are continuous and binary decision
variables, respectively. Here, πe = 1 if and only if line e is
overloaded to be tripped, which is ensured by (23e). Thus,
the objective is to maximize the number of overload-induced
tripped lines due to the attack-induced load redistribution. The

constraints (23c) ﬁxes the phase angle at the reference node,
denoted as node u0. The constraint (23d) incorporates the lower-
level optimization of SCED (5) by specifying the post-SCED
generation, determined by ˜θ3.

We formulate the upper-level PMU placement problem as

min (cid:107)β(cid:107)0

s.t. ψa(β) = 0

(24a)

(24b)

where the decision variable is β ∈ {0, 1}|V |, and ψa(x)
deﬁned in (23) denotes the maximum number of lines that
will be tripped according to (15) at t3. In the sequel, we call
(ap, ac, e) an attack tuple, which is called “successful” under
PMU placement β if there exists a feasible solution to (23)
with physical attack ap and cyber attack ac such that πe = 1.
Moreover, we call (ap, e) a successful attack pair under β if
it can form a successful attack tuple under β.

Remark 1: While the above formulation treats the load proﬁle
p0 as a constant, it can be easily extended to handle the
ﬂuctuations in loads. This can be modeled by treating p0 as a
decision variable in the attacker’s optimization, constrained by
the expected range of ﬂuctuation, e.g., p0 ∈ [κp(0), κp(0)], or
the union of ranges around multiple operating points:

i0(cid:91)

p0 ∈

{κip(i) ≤ p ≤ κip(i)}.

(25)

i=1

This enlarges the solution space for the attacker, which changes
the meaning of ψa(β) to the maximum number of tripped lines
under the worst load proﬁle and the worst attack under this
load proﬁle. Clearly, a PMU placement that avoids overload-
induced tripping in this worst scenario can avoid overload-
induced tripping in any scenario encountered during operation,
as long as the load proﬁle stays within the predicted range.

Remark 2: In practice, PMUs are often deployed in stages.
Thus, it may be desirable that a temporary PMU placement
designed to prevent outages can be augmented into an optimal
PMU placement βopt
in the long run (e.g., a minimum
placement that provides full observability). This can be modeled
by adding a constraint in (24) that requires β ≤ βopt.

III. SOLVING PPOP

The PPOP problem (23)-(24) is a tri-level non-linear mixed
integer problem, which is notoriously hard [12]. In this section,
we ﬁrst formally prove that the problem is NP-hard, and
then demonstrate how to transform it into a bi-level mixed-
integer linear programming (MILP) problem. Next, we propose
an alternating optimization framework based on constraint
generation to solve the problem optimally. Finally, to accelerate
the computation, we develop a polynomial-time heuristic.

A. Hardness and Conversion to Bi-Level MILP

Although multi-level non-linear mixed integer programming
is generally hard, PPOP is only a special case and hence needs
to be analyzed separately. Nevertheless, we show that PPOP
is NP-hard (see proof in Appendix H).

6

The attacker’s problem (23) can be linearized into a MILP
(see details in Appendix A), which implies that PPOP can be
converted into a bi-level MILP.

B. An Alternating Optimization Framework

Algorithm 1: Alternating Optimization
1 Initialization: k = 1, ˆβ(k) = 0;
2 while True do

3

4

5

6

Solve (23) under ˆβ(k) to obtain ψa( ˆβ(k));
if ψa( ˆβ(k)) > 0 then

Add constraints to (24);
k ← k + 1, obtain ˆβ(k) by solving (24), with
(24b) replaced by the generated constraints

else break ;

7
8 Return ˆβ(k), indicators of the selected PMU placement;

As a bi-level MILP, PPOP is still difﬁcult to solve due to the
integer variables in (23) and (24). Since one of the fundamental
challenges in solving bi-level MILPs is the lack of explicit
description of the upper-level optimization’s feasible region, we
propose an alternating optimization framework shown in Alg. 1
to solve PPOP by gradually approximating the feasible region
of the upper-level optimization through constraint generation. In
Sections III-C–III-D, we will give two concrete constraint gen-
eration methods for Line 5 of Alg. 1 based on the results of (23).
In the sequel, we assume that solving (23) returns a

successful attack tuple (a(k)

p , a(k)

c

, e(k)) if ψa( ˆβ(k)) > 0.

C. Alternating Optimization with No-Good Constraints
(AONG)

In this section, we give the ﬁrst speciﬁc algorithm under the
framework of Alg. 1, in which the added constraints in Line 5
are motivated by the following observation:
Lemma III.1. Given ˆβ and Ω( ˆβ) := {u ∈ V : ˆβu > 0}, if
there exists a successful attack tuple (ap, ac, e), then for all
β with Ω(β) ⊆ Ω( ˆβ), there exists a successful attack tuple.
Proof. For any β with Ω(β) ⊆ Ω( ˆβ), (ap, ac, e) remains a
successful attack tuple.

The above observation indicates that at least one PMU must
be placed in Ω( ˆβ)c := V \ Ω( ˆβ). Therefore, the optimal β can
be obtained in an iterative manner: during each iteration, we
use the PMU placement ˆβ from the previous iteration (initially,
ˆβ = 0) to solve (23) for ψa( ˆβ). If ψa( ˆβ) = 0, ˆβ is the
ﬁnal solution; otherwise, we will add the following “No-Good”
constraint: (cid:80)
i: ˆβi=0 βi ≥ 1 to (24) for the next iteration to rule
out the infeasible solution ˆβ.

However, the above procedure will converge very slowly as
|Ω( ˆβ)c| is usually large. To speed up convergence, we augment
each discovered infeasible solution ˆβ into a maximal infeasible
solution ˆβ(cid:48) to narrow down candidate solutions. This can be
achieved by solving the following problem:

Theorem III.1. The PPOP problem (24) is NP-hard.

max (cid:107) ˆβ(cid:48)(cid:107)0

(26a)

s.t.

ψa( ˆβ(cid:48)) ≥ 1,
u = 1, ∀u ∈ V with ˆβu = 1,
ˆβ(cid:48)

(26b)

(26c)

which has the same decision variables as (23) and the additional
ˆβ(cid:48). Algorithm AONG adds the following “No-Good” constraint
in Line 5 of Alg. 1:

βi ≥ 1.

(cid:88)

i: ˆβ(cid:48)

i=0

(27)

AONG solves PPOP optimally, as proved in Appendix H.

Theorem III.2. AONG converges in ﬁnite time to an optimal
solution to (24).

Given the MILP formulation of (23) in Appendix A, it is
easy to write (26) as a MILP and solve it by existing MILP
solvers. It is worth noting that solving (26) suboptimally does
not affect the optimality of AONG. Thus, we can also apply
heuristic algorithms (e.g., LP relaxation with rounding).

D. Alternating Optimization with Double Constraints (AODC)

Building on AONG, we develop an additional constraint as
a complement of (27) to accelerate convergence, in the special
case where ξc = ∞ and ψs(p, D) returns the set of θ’s satisfy-
ing (5b)-(5d), i.e., it returns the feasible region of SCED rather
than a single solution. Such a special case is worth consideration
because (i) ξc = ∞ represents the strongest cyber attack, and
(ii) relaxing the optimality requirement in (23d) means that
the attacker is allowed to pick a solution for SCED within its
feasible region, both making the attack stronger and hence the
resulting PMU placement more robust in preventing outages.
Below we will ﬁrst introduce the new constraints, called
“Attack-Denial” constraints, and then give the AODC algorithm,
in which both “No-Good” constraints and “Attack-Denial”
constraints are added in Line 5 of Alg. 1. The new constraints
are motivated by the following observations about AONG:
many PMU placements enumerated by AONG are vulnerable
to attacks formed from the same attack pair (ap, e), indicating
that
to generate constraints that can
invalidate the identiﬁed attack pairs. More discussions are
given in Appendix C.

is more efﬁcient

it

The above observations motivate the following idea of
“Attack-Denial” constraints: given a successful attack pair
(a(k)
p , e(k)) under β(k), the added constraints should guarantee
that any PMU placement satisfying the constraints can prevent
attacks that fail lines according to a(k)
from causing overload-
induced tripping at line e(k). We focus on (a(k)
p , e(k)) instead
of (a(k)

, e(k)) due to the following observations:

p , a(k)

p

c

2) Given xN and (a(k)

1) The number of (a(k)

c

c

p , a(k)

is continuous, but the number of (a(k)

, e(k))’s is inﬁnite since a(k)
p , e(k))’s is ﬁnite.
p , e(k)), (23b)-(23e) reduce to a linear
system with only the continuous variables contained in
yc under the assumptions that ξc = ∞ and ψs(p, D)
returns the set of θ’s satisfying (5b)-(5d). The linear
system can be summarized as
1 yc = s(k)
F (k)
1 ,
2 yc ≤ s(k)
F (k)
2 + F3xN ,

(28b)

(28a)

7

1

, F (k)
2

where F (k)
, F3, s(k)
are constant
matrices/vectors deﬁned in Appendix D. An attack pair
(a(k)
p , e(k)) can form a successful attack if and only if
(28) has a feasible solution.

1 , s(k)

2

The above assumptions (i.e., ξc = ∞ and ψs(p, D) returns all
the θ’s satisfying (5b)-(5d)) are needed because: (i) ξc = ∞
implies that we no longer need the binary variables used to
linearize (20g) (i.e., wf and wp in (40) in Appendix A); (ii)
when the lower-level optimization returns the feasible region
of (5), (23d) can be replaced by (5b)-(5d) without introducing
binary variables required for transforming (5) into its KKT
conditions [9].

l:a(k)

Our key observation is that a PMU placement β can defend
against an attack pair (a(k)
p , e(k)) by either preventing the
physical attack a(k)
or making (28) infeasible. The former can
p
be achieved by adding constraint (cid:80)
p,l =1 xL,l ≥ 1 (i.e., at
least one attacked line must be incident to a PMU). The latter
holds according to Gale’s theorem of alternative [38] if and
only if there exists q(k)

1
(F (k)
)T q(k)
1
1 + (s(k)
1 ∈ Rm1 and q(k)

1 )T q(k)

and q(k)
2 ≥ 0 satisfying
1 + (F (k)
)T q(k)
2 = 0,
2 + F3xN )T q(k)
2 < 0,
2 ∈ Rm2 can be treated as the dual

where q(k)
variables for (28a) and (28b), respectively.

(s(k)

(29b)

(29a)

2

Based on the above observation, the “Attack-Denial” con-

p , e(k)) are:

straints for defending against (a(k)
1 + (F (k)
1 + (s(k)
xL,l ≥ wa,k,

)T q(k)
(F (k)
1
(s(k)
1 )T q(k)
(cid:88)

)T q(k)
2 + F3xN )T q(k)

2 = 0,

2

2 ≤ wa,k − 1,

p,l =1

l:a(k)
q(k)
2 ≥ 0, wa,k ∈ {0, 1},

(30a)

(30b)

(30c)

(30d)

2

1

and q(k)

1 , q(k)

where q(k)
2 , and wa,k are newly introduced variables. Note
that (29b) and (30b) are equivalent when wk = 0 since we can
scale q(k)
to satisfy (30b) if (29b) holds. The binary
variable wa,k indicates which approach to use for defending
against (a(k)
p , e(k)). When wa,k = 0, (30c) holds trivially, in
which case β defends against (a(k)
p , e(k)) by satisfying (29),
i.e., preventing the cyber attack from causing overload-induced
tripping at line e(k). When wa,k = 1, q(k)
2 = 0
will satisfy the constraints (30a)-(30b), in which case β defends
against (a(k)

p , e(k)) by preventing the physical attack a(k)
p .

1 = 0 and q(k)

Now, we are ready to present the AODC algorithm, where

ˆβ(K+1) in Line 6 of Alg. 1 is obtained by solving:

min (cid:107)β(cid:107)0

s.t.

(16) − (17), (30) for k = 1, · · · , K,

(cid:88)

βi ≥ 1, k = 1, · · · , K,

i =0

i: ˆβ(cid:48)(k)
β ∈ {0, 1}|V |,

(31a)

(31b)

(31c)

(31d)

where the decision variables are β, xN , xL, q(k)
wa,k for k = 1, · · · , K.

1 , q(k)

2 , and

To convert (31) to a MILP, we linearize (F3xN )T q(k)

2

using McCormick’s relaxation. Concretely, note that

(F3xN )T q(k)

2 =

(cid:88)

u∈V

xN,u

(cid:32) m2(cid:88)

i=1

(cid:33)

F3,i,uq(k)
2,i

, ∀k.

(32)

Assuming that (cid:80)
2,i ∈ [M F , M F ], we introduce a
continuous auxiliary variable yu and the following constraints:

i F3,i,uq(k)

M F xN,u ≤ yu ≤ M F xN,u,
(cid:32) m2(cid:88)

(cid:33)

F3,i,uq(k)
2,i

yu ≤

i=1

(cid:32) m2(cid:88)

i=1

yu ≥

(cid:33)

F3,i,uq(k)
2,i

(33a)

+ M F xN,u − M F ,

(33b)

+ M F xN,u − M F .

(33c)

Note that yu = (cid:80)m2
wise, i.e., yu = xN,u
in (30b) can be replaced by (cid:80)

i=1 F3,i,uq(k)
(cid:16)(cid:80)m2

2,i if xN,u = 1 and yu = 0 other-
. Then, (F3xN )T q(k)

i=1 F3,i,uq(k)

2,i

(cid:17)

2

u∈V yu subject to (33).

AODC guarantees an optimal solution at convergence in the

considered special case (see proof in Appendix H).

Theorem III.3. If ξc = ∞ and ψs(p, D) returns the feasible
region of (5), then AODC will converge in ﬁnite time to an
optimal solution to (24).

Although in the worst case AODC may still enumerate all the
attack pairs, which can be exponential in |E|, we have observed
that in practice it usually converges after identifying a relatively
small set of “typical attack pairs”, as shown in Table V.

E. Efﬁcient Heuristics

Although Alg. 1 is guaranteed to ﬁnd the optimal solution,
the computational complexity can grow exponentially with
the network size due to the requirement of solving MILPs in
each iteration, which motivates us to develop polynomial-time
heuristics. A scenario of particular interest is when ξp is small,
i.e., ξp = O(1). In this case, the total number of attack pairs is
polynomial in |E|, and thus the number of iterations in AODC
and the complexity of computing a new attack pair in each
iteration are both polynomial in |E|. Our focus in this case is
thus on solving (31) approximately in polynomial time.

Relaxation: One idea is to directly relax the MILP version of
(31) into an LP. However, simple LP relaxation will not work:
1) The LP relaxation will invalidate the McCormick relax-

ation (33) for the bilinear term (F3xN )T q(k)
2 .

2) The feasible region is signiﬁcantly extended by the LP
relaxation due to the adopted big-M modeling technique.
3) Given a continuous solution ˜β obtained from the LP
relaxation, it is non-trivial to determine which subset of
Ω( ˜β), if any, can achieve our defense goal.

We have developed a polynomial-time heuristic that can
ﬁnd a better PMU placement. The core of our heuristic is a
different “LP relaxation” of (31). Recall that the main challenge
in directly relaxing the MILP version of (31) is the invalidation
of (33) for linearizing (F3xN )T q(k)
2 . To overcome this issue,
we make the following observation (see proof in Appendix H):

8

Lemma III.2. Deﬁne Λx,p, Λx,n ∈ {0, 1}|V |×m2 such that
(Λx,pq2)u is the dual variable for (20c) and (Λx,nq2)u is the
dual variable for (20d). Suppose that the linear system
1 + (F (k)
(F (k)
1
1 + (s(k)
(s(k)
(Λx,p + Λx,n)q2 ≤ MqAβ,
q(k)
2 ≥ 0, 1 ≥ β ≥ 0

)T q(k)
2 = 0,
2 + F3)T q(k)

)T q(k)
1 )T q(k)

2 ≤ −1,

(34b)

(34d)

(34a)

(34c)

2

for attack pair (a(k)
p , e(k)) is feasible under β = ˇβ, where Mq
is a large constant (deﬁned in Appendix B). Then, β = (cid:100) ˇβ(cid:101)
satisﬁes (16)–(17) and (30) with wa,k = 0 for the attack pair
(a(k)

p , e(k)).
Lemma III.2 suggests that given an attack pair (a(k)

p , e(k)),
we can relax the mixed integer “Attach-Denial” constraints
(30) into the linear constraints (34) and round up the fractional
solution to obtain a valid PMU placement, which is guaranteed
to prevent the given attack pair from forming successful
attack tuples. According to Gale’s theorem of alternative,
(cid:16)
(Λx,p + Λx,n)q(k)
> 0 only if at least one of (20c)
and (20d) is effective for making (28) infeasible2. Since
(20c)-(20d) is effective if and only if xN,u = 1 (under the
constraint of xN,u ∈ {0, 1}), we use (Λx,p + Λx,n)q(k)
as a
proxy of xN in Lemma III.2.

(cid:17)

u

2

2

Lemma III.2 motivates us to formulate the following LP
based on a given set C of infeasible PMU placements and a
given set {(a(k)

p , e(k))}K

min

s.t.

k=1 of attack pairs:
(cid:88)

βu

u∈V
(34) for k = 1, · · · , K,
βi ≥ 1, ∀ ˆβ ∈ C,

(cid:88)

i: ˆβi=0

(35a)

(35b)

(35c)

where (35b) models relaxed “Attack-Denial” constraints and
(35c) models relaxed “No-Good” constraints. In this sense,
(35) is a “LP relaxation” of (31). However, instead of directly
computing a PMU placement from (35) which still faces some
of the issues for simple LP relaxation, our idea is to use the
result of (35) to identify important nodes for PMU placement
to defend against the given attack pairs in the case of wa,k = 0
in (30). We will account for the case of wa,k = 1 separately in
the proposed algorithm to avoid scaling and numerical issues.
Algorithm: The details of the proposed heuristic is given
in Alg. 2, which relies on the function UpdateCandidate(·)
shown in Alg. 3. The logic behind the heuristic is similar to
that in AODC, i.e., iteratively updating PMU placements based
on newly found attack pairs. The questions are: (i) how to
generate initial placements, (ii) how to ﬁnd attack pairs that
can cause outages under given placements, and (iii) how to
update the given placements to defend against the newly found
attack pairs, all in polynomial time. Since this algorithm is
designed for the case of ξp = O(1), under which question (ii)
is easily solvable, our focus will be on questions (i) and (iii).

2We say that an inequality in (28) is effective for making (28) infeasible if

removing it will change the feasibility of (28).

Algorithm 2: 3-phase Secured PMU Placement
/* Phase-1: find a set A0 of attack

pairs

1 Initialization: k = 1, ˆβ(k) = 0, A0 = ∅, C = ∅;
2 while ψa( ˆβ(k)) > 0 do
A0 ← A0 ∪ {(a(k)
p , e(k))}, where (a(k)
3
obtained by solving (23) under ˆβ(k);
C ← C ∪ { ˆβ(k)}, k ← k + 1;
obtain ˇβ(k) by solving (35) over C and A0;
Rounding: ˆβ(k) ← (cid:100) ˇβ(k)(cid:101);

5

4

6

p , e(k)) is

*/

/* Phase-2: find candidate placements
i=1 to defend against A0

{Ωi}Kc

7 Set Ωi := {ui}, i = 1, · · · , Kc, where {ui}Kc

indices of the largest Kc elements of ˇβ(k) that is
obtained in the last iteration of phase-1;
{Ωi}Kc
i=1, A0, C
i=1 to find a

i=1, C ← UpdateCandidate
/* Phase-3: augment {Ωi}Kc

(cid:17)

(cid:16)

8 {Ωi}Kc

;

*/
i=1 are the

placement Ω with ψa (β(Ω)) = 0

*/

9 while True do
10

A ← ∅;
for i ← 1 to Kc do

11

12

13

14

p , e(i))

if ψa (β(Ωi)) > 0 then Generate (a(i)
and A ← A ∪ (a(i)
p , e(i));
else Return Ω∗ = arg minΩj :ψa(β(Ωj ))=0 |Ωj| if
|Ω∗| ≤ 1 + minΩj :ψa(β(Ωj ))>0 |Ωj|;
{Ωi}Kc
i=1, C ← UpdateCandidate

i=1, A, C

(cid:16)

(cid:17)

;

{Ωi}Kc

We answer question (i) in two phases. Speciﬁcally, in
phase-1, we iteratively ﬁnd a set of attack pairs A0 such
that solving (35) over A0 leads to a fractional solution ˇβ
(cid:0)(cid:100) ˇβ(cid:101)(cid:1) = 0. Then in phase-2, we search for a set of
with ψa
candidate PMU placements {Ωi}Kc
i=1 to defend against A0 in
the hope that |Ωi| < |Ω((cid:100) ˇβ(cid:101))|. The motivation for maintaining
Kc > 1 candidates is to avoid the situation where the computed
placement is effective in defending against the given attacks
but ineffective for other attacks.

We answer (iii) in Alg. 3, which iteratively augments a
given set of candidate placements {Ωi}Kc
i=1 to defend against a
given set A of attack pairs. For each candidate placement not
effective against all the attack pairs in A, Alg. 3 will generate
KL and KA new candidate placements in Line 7 and Lines 8-9,
respectively. Then, Line 10 will select the Kc placements most
effective in defending against the attack pairs in A from the pool
of Kc · (KA + KL) candidate placements. We now characterize
the complexity of Alg. 2 (see proof in Appendix H).

Theorem III.4. If ξp = O(1), then the complexity of Alg. 2
is polynomial in |V |, |E|, and Kc.

IV. EXTENSION TO AC POWER FLOW MODEL

So far we have assumed the DC power ﬂow approximation
for the power grid given in Section II-A. It remains to validate
the resulting PMU placement under the AC power ﬂow model

9

Algorithm 3: UpdateCandidate(cid:0){Ωi}Kc
1 Initialization: Ai = A, i = 1, · · · , Kc;
2 while ∃i such that Ai (cid:54)= ∅ do
3

Q ← ∅;
for i ← 1 to Kc do

i=1, A, C(cid:1)

4

5

6

7

8

9

10

11

if Ai = ∅ then Q ← Q (cid:83){Ωi} and continue;
else C ← C ∪ {β(Ωi)} ;
Q ← Q (cid:83)(Ωi ∪ {vj}) for j = 1, · · · , KL,
where vj can prevent the j-th most physical
attacks in Ai ;
Solve (35) over A, C, and the constraints
βu = 1, ∀u ∈ Ωi, which results in ˇβ;
Q ← Q (cid:83)(Ωi ∪ {uj}) for j = 1, · · · , KA,
where uj is the index of the j-th largest
element in { ˇβu}u∈V \Ωi;

i=1 as the Kc elements in Q that can

Update {Ωi}Kc
defend against the most attack pairs in A;
Ai ← {(ap, e) ∈ A|Ωi cannot defend against
(ap, e)}, ∀i = 1, . . . , Kc;
i=1 and C;

12 Return {Ωi}Kc

that describes the grid state more accurately. To this end, we
will address the following questions: given a PMU placement
ΩDC ⊆ V obtained under the DC power ﬂow model, (i) how
to test the feasibility of ΩDC in preventing outages under the
AC power ﬂow model, and (ii) how to reﬁne ΩDC if needed to
achieve our defense goal under the AC power ﬂow model.

A. Testing a PMU Placement under AC Model

One challenge to answer the ﬁrst question is the nonlinear
and nonconvex nature of AC power ﬂow based SCED (AC-
SCED), which invalidates the transformation of (23) into a
single-level MILP through KKT conditions. Another challenge
lies in formulating a single optimization to maximize the
overloading of a target line after SCED (at t3 in Fig. 1).
Speciﬁcally, since solving nonlinear AC power ﬂow equations
usually requires iterative methods (e.g., Newton-Raphson
method [39]), we cannot directly formulate the AC-SCED
at t2 and the corresponding ground-truth grid state at t3 in an
optimization problem. Existing works handled this challenge
by approximating the grid state at t3 by the DC power ﬂow
model [28], [32] or DC-based line outage distribution factors
[30], [31]. However, such DC-based approximations cannot
be directly used to compute the magnitude of currents, which
determines the overloading and related tripping of lines.

In the following, we provide a method, as shown in Alg. 4,
to check the existence of an AC-based CCPA that can cause
overloading under a given PMU placement. To overcome the
challenges discussed before, we ﬁrst remove the optimality
requirement in AC-SCED, similar to our derivation of “Attack-
Denial” constraints in Section III-D. Omitting this optimality
requirement is equivalent to allowing the attacker to choose the
objective for AC-SCED, which enlarges the feasible region for
the attacker’s optimization. To jointly model the current at t3
and the AC-SCED at t2, we adopt the linearized approximation

of AC power ﬂow equations [33]. Based on these two strategies,
we formulate the following optimization problem for the
attacker to maximize the magnitude of current on a given
target line et under a given physical attack (i.e., ap):

max | ˆI3,et|2

s.t.

Constraints on ˜v2, ˜θ2 to bypass BDD,
ACOPF constraints on ˜v3, ˜θ3,
Constraints to solve ˆv3, ˆθ3, | ˆI3|,

(36a)

(36b)

(36c)

(36d)

where ˜v2, ˜θ2 denote the voltage magnitudes and phase
angles estimated at t2 by the control center based on falsiﬁed
measurements, ˜v3, ˜θ3 denote the same variables predicted by
AC-SCED for t3 (computed at t2), and ˆv3, ˆθ3, | ˆI3| denote the
approximated ground-truth of voltage magnitudes, phase angles
and line current magnitude at t3. The details of (36) are given
in Appendix E. Similar to Table I, for a given variable x, we
use ˜x2 to denote its estimate based on falsiﬁed measurements
at t2, x2 to denote its ground-truth value at t2, ˜x3 to denote the
value predicted by AC-SCED (at t2) for t3, and x3 to denote
the ground-truth value at t3. Given the voltage magnitudes ˜v3
and the phase angles ˜θ3, the approximated values of x at t3 is
denoted as ˆx3.

In (36), we have the following three types of constraints and

decision variables:

1) Constraint (36b) is the counterpart of (20) under the AC
power ﬂow model, in which the main decision variables
are ˜v2 and ˜θ2. Similar to (20), we use ˜v2 and ˜θ2 as
the decision variables to model the cyber attack that can
bypass the BDD. Following [30], we adopt the quadratic
convex (QC) relaxation [40] in (36b) to model the AC
power ﬂow equations.

2) As the counterpart of (21a)-(21c) under the AC power
ﬂow model, (36c) models the reaction of AC-SCED to
the falsiﬁed measurements based on the QC relaxation.
3) The real grid state at t3 is formulated in (36d) as the
counterpart of (21d)-(21f), based on the approximation
of AC power ﬂow equations proposed in [33].

As we have enlarged the feasible region for the attacker in
(36b)-(36c) by using the QC relaxation, (36) models a stronger
attack, and hence a PMU placement that prevents overloading
under this attack can prevent overloading under the original
attack. We will use x∗ to denote the value of decision variable
x in the optimal solution to (36).

Based on (36), we develop an algorithm to check the
feasibility of a PMU placement Ω ⊆ V in preventing outages
under AC-based CCPA, shown in Algorithm 4. Speciﬁcally,
at Lines 2, we compute v2, θ2, |I2| by solving power ﬂow
equations. Thus, the counterpart of (19) is no longer needed
to compute the real grid states after physical attacks. Then,
3, ˜θ∗
at Line 3, we obtain the optimal solution (| ˆI ∗
3) to
(36) for the given attack pair (ap, et) (recall that | ˆI ∗
| is the
3,et
approximated current magnitude on line et at time t3 while
|I ∗
| is the corresponding true value). Alg. 4 considers the
PMU placement Ω to successfully defend against (ap, et) (i.e.,
preventing overloading at line et under physical attack ap) if
one of the following conditions hold:

|, ˜v∗

3,et

3,et

1) no cyber attack ac can bypass the BDD, i.e., (36) is

10

infeasible, as checked in Line 9, or

3,et

3,et

2) | ˆI ∗

| ≤ ˆImax,et and |I ∗

| ≤ γeImax,et, as checked in
Lines 4–7, where ˆImax,et (derived in Theorem IV.1) is
the threshold used by Alg. 4 to detect the tripping of line
et based on the approximated current magnitude | ˆI ∗
|.
3,et
The use of ˆImax,e rather than γeImax,e allows us to
compensate for the approximation error at t3. As stated in
Theorem IV.1, under a properly-set ˆImax,e, a PMU placement
Ω is guaranteed to achieve our defense goal under the AC
model if Ω can pass the test of Alg. 4, i.e., no overloading is
reported. How to bound the approximation errors as assumed in
Theorem IV.1 is not the focus of this work; we refer interested
readers to [33] for details.

Theorem IV.1. Assume that the approximation used in (36d)
satisﬁes |ˆv3,u − v3,u| ≤ (cid:15)v,u, |ˆθ3,u − θ3,u| ≤ (cid:15)θ,u, ∀u ∈ V and
|ˆp3,f,e − p3,f,e| ≤ (cid:15)p,e, |ˆq3,f,e − q3,f,e| ≤ (cid:15)q,e, ∀e ∈ E. Then,
there exists (cid:15)I,e, ∀e ∈ E (see proof in Appendix H for details)
and ˆImax,e := γeImax,e − (cid:15)I,e such that any PMU placement
passing the test of Alg. 4 can prevent overload-induced tripping
under the AC power ﬂow model.

Algorithm 4: Test Feasibility of Ω under AC Model
1 for each possible attack pair (ap, et) under the given

PMU placement Ω do

2

3

4

5

6

7

8

9

10

11

Obtain v2, θ2, |I2| from AC power ﬂow equations;
Solve (36) to obtain | ˆI ∗
3,et
if (36) is feasible AND | ˆI ∗

3, ˜θ∗
3;
| ≤ ˆImax,et then

|, ˜v∗

3,et

| from AC power ﬂow equations;

3,et

Compute |I ∗
if |I ∗

3,et
Continue;

| ≤ γeImax,et then

else Terminate and report overloading;

else if (36) is infeasible then

Continue;

else Terminate and report overloading;

B. Reﬁning PMU Placement

In the case that the DC-based PMU placement ΩDC fails the
test by Alg. 4, we provide a simple heuristic to augment it into a
new placement ΩAC that can achieve our defense goal under the
AC model. The intuition is to iteratively augment ΩDC by placing
more PMUs until the resulting placement ΩAC can pass the test
of Alg. 4. The key question is which node to add. To answer this
question, we ﬁrst augment ΩDC into a PMU placement ΩC :=
Ω(βC) that can achieve full observability by solving (37):

min
βC ∈ {0, 1}|V |
s.t.

(cid:107)βC(cid:107)1

βC ≥ β(ΩDC),
AβC ≥ 1,

(37a)

(37b)

(37c)

where (37b) guarantees ΩDC ⊆ ΩC, and (37c) forces ΩC
to achieve full observability. Then equipped with ΩC, we
augment ΩDC into ΩAC by Alg. 5. If a PMU placement cannot

defend against an attack pair (ap, et) (Line 6), then we update
the PMU placement by the following rules:

1) If there exists a node u ∈ ΩC that can prevent the
physical attack ap as in (18b), we add node u to the
current PMU placement (Line 8).

2) Otherwise, we add the node in ΩC with the maximum
deviation in phase angle due to false data injection
(Line 11), with ties broken arbitrarily.

Algorithm 5: Augment PMU Placement for AC Model
1 Initialization: ΩAC = ΩDC;
2 while True do
3

Test ΩAC through Alg. 4;
if No overloading is reported then Return ΩAC;
else

Let (ap, et) be the attack pair under which
overloading is reported, and
U := {u ∈ V : ∃e with ap,e = 1, Du,e (cid:54)= 0}
(all end-nodes of physically-attacked lines);
if ΩC ∩ U (cid:54)= ∅ then

Arbitrarily choose a node u ∈ ΩC ∩ U ;

else

Let ˜θ2, θ2 be the falsiﬁed/true phase angles
at t2 under attack pair (ap, et);
Set u := arg maxv∈ΩC |˜θ2,v − θ2,v|;

ΩAC ← ΩAC ∪ {u};

4

5

6

7

8

9

10

11

12

V. NUMERICAL EXPERIMENTS

Simulation Settings: We evaluate our solution against bench-
marks in several standard systems: IEEE 30-bus, IEEE 57-bus,
IEEE 118-bus, and IEEE 300-bus system, where the system
parameters as well as load proﬁles are obtained from [41].
The parameters for our evaluation are set as follows unless
speciﬁed otherwise: We set α = 0.25 according to [11]. We
allow ˜θ3 to take any value speciﬁed by the attacker subject to
(5b)-(5d), which makes our defense effective under any SCED
cost vector. The attacker’s capability is set as ξp = 2, ξc = ∞
(no constraint on the number of manipulated meters). We set
the overload-induced tripping threshold to γe = 1.2, ∀e ∈ E,
which is slightly smaller than the one used in [11] to make the
solution more robust. For Alg. 2, we set Kc = KA = KL = 10.
In the rest of this section, we will compare the performance
of Alg. 1 (AONG or AODC) and Alg. 2 with the following
benchmarks: (i) PMU placement to achieve full observability as
proposed in [26]; (ii) greedily placing PMUs in the descending
order of node degrees until attack-induced overload-induced
tripping is prevented, referred to as “GreedyDegree”. Bench-
mark (i) represents the current approach, and benchmark (ii)
represents a baseline solution under the lowered goal of defense.
Savings in the Number of PMUs: In Table II, we compare the
number of secured PMUs required by the proposed algorithms
(Alg. 1, Alg. 2) with the benchmarks under the nominal
operating point [41]. The minimum number of PMUs required
to avoid outages, given by Alg. 1 (either AONG or AODC),
is signiﬁcantly smaller than what is required to achieve full

11

observability. Alg. 2 closely approximates the minimum for the
tested systems, but a simple heuristic such as GreedyDegree
does not. For IEEE 300-bus system, we have skipped Alg. 1
as neither AODC nor AONG can converge within 72 hours.
The details of PMU locations are given in Appendix F.

Table II
COMPARISON OF THE REQUIRED NUMBER OF PMUS

Alg. 1 (optimal)
Alg. 2
GreedyDegree
Full observability

30-bus
2
2
3
10

57-bus
3
3
3
17

118-bus
9
10
14
32

300-bus
—
31
85
87

Then, we evaluate the scenario when the solution by PPOP
is used as a temporary PMU placement that will eventually
be augmented into a placement achieving full observability,
as discussed at the end of Section II (Remark 2). To this end,
we evaluate the following metrics: (i) the minimum number
of PMUs required by PPOP |ΩPPOP|, (ii) the minimum number
of PMUs for achieving full observability |ΩFO|, (iii) the size
of a full-observability placement ΩC augmented from ΩPPOP
given by (37), and (iv) the size of the optimal solution Ω(cid:48)
PPOP
to a variation of PPOP with the additional constraint that
Ω(cid:48)
PPOP| is only
slightly larger than |ΩPPOP|, i.e., most of the cost savings by
PPOP is still achievable when its solution is required to be
consistent with the optimal long-term solution that achieves full
observability, but (ii) |ΩC| can be notably larger than |ΩFO| for
large systems, i.e., augmenting an arbitrary solution to PPOP
to achieve full observability may require notably more PMUs
compared to a clean-slate solution.

PPOP ⊆ ΩFO. In Table III, we observe that (i) |Ω(cid:48)

Table III
COMPARISON OF #PMUS UNDER TEMPORARY/LONG-TERM PLACEMENT

|ΩPPOP|
|Ω(cid:48)
PPOP|
|ΩC |
|ΩFO|

30-bus
2
2
10
10

57-bus
3
3
17
17

118-bus
9
10
33
32

300-bus
31
34
95
87

Impact of System Parameters: We evaluate the impact of
various system parameters on the number of PMUs required
by PPOP, given by Alg. 1 (by Alg. 2 for the 300-bus system).
First, we study the effect of α introduced in (12), where
a larger α implies a larger feasible region for the attacker. It
can be seen from Table IV that (i) PPOP can still signiﬁcantly
reduce the required number of PMUs compared to “Full
observability” (see Table II) even if α is large, and (ii) PPOP
beneﬁts from a small value of α, which signiﬁes the importance
of precise load forecasting in defending against CCPA.

Table IV
NUMBER OF PMUS IN PPOP UNDER VARYING α

α = 0.01
α = 0.10
α = 0.25
α = 0.50

30-bus
1
1
2
3

57-bus
1
2
3
3

118-bus
4
6
9
11

300-bus
24
30
31
34

Then, we vary ξp and ξc to evaluate the impact of the
attacker’s capability. As shown in Figure 2, (i) defending

12

(a) Effect of ξp

(b) Effect of ξc

(a) Number of secured PMUs

(b) Computation time

Figure 2.

#PMUs required by PPOP

#PMUs required by full observability (ξc =|V |+|E| means no ξc-constraint).

Figure 3. The performance of Alg. 2 under different Kc, KA, and KL.

against a stronger attacker requires more PMUs as expected,
(ii) PPOP still
requires much fewer PMUs than “Full
observability” when the attacker can disconnect multiple lines
and manipulate all the meters (except for the secured PMUs),
which is stronger than the attack model considered in [11],
[18], and (iii) PPOP can save a larger fraction of PMUs in
IEEE 57-bus system since fmax given in [41] is large.

In addition, we consider the case that the load proﬁle p0
can vary as shown in (25). We assume p0 ∈ [κp(0), κp(0)],
where p(0) is the nominal load proﬁle from [41], κ = 0.5 and
κ is set to the maximum value that keeps (5) feasible under
κp(0). In our evaluations, we set κ as 1.95, 2.69, 2.41 and
1.61 for IEEE 30-bus, 57-bus, 118-bus and 300-bus systems,
respectively. For the given range, PPOP requires 3, 4, 19,
and 33 PMUs for the 30-bus, 57-bus, 118-bus, and 300-bus
systems, which is more than what is required under a single
load proﬁle as expected. Nevertheless, PPOP can still save
PMUs compared to “Full observability” as shown in Table II.
Computational Efﬁciency: We compare AODC and AONG in
terms of the number of iterations (which is also the number of
examined attack pairs) and the running time, which is evaluated
in a platform with Intel i7-8700 CPU with Gurobi as the solver.
Since any feasible solution to (26) can form an “No-Good”
constraint, we set an upper-bound on the time for solving
(26), which is 1200 seconds. As shown in Table V, while the
two algorithms perform similarly for small systems, AODC
converges notably faster for larger systems such as the 118-bus
system thanks to its reduced solution space due to the adoption
of both “No-Good” and “Attack-Denial” constraints. Note that
both algorithms converge after examining a small fraction of
possible attack pairs (the total number of attack pairs is 33620,
252800, and 3200130 for these systems, respectively).

Table V
NUMBER OF ITERATIONS/CONVERGENCE TIME (103 SEC)

30-bus
AODC
8/0.021
AONG 7/0.014

57-bus
3/2.188
4/2.163

118-bus
16/26.64
78/74.44

Moreover, we use IEEE 118-bus system as an example to
demonstrate the trade-off in tuning the parameters Kc, KA, KL
for Alg. 2 (assuming KA = KL). We run Alg. 2 for 5 times
under each setting due to the randomness in solving (23)
and breaking ties. The results are given in Fig. 3, where
the bar denotes the mean and the error bar denotes the
minimum/maximum. In Fig. 3 (b), we show the speedup
of the heuristic compared to AODC in convergence time,
i.e., (time of AODC)/(time of heuristic). We observe that (i)

Alg. 2 can return a good solution when Kc ≥ %10 · |V | and
KA = KL ≥ Kc, and (ii) under this conﬁguration, Alg. 2 is
signiﬁcantly faster than AODC at a small cost of requiring
a couple of more PMUs.

Extension to AC model: We compare the solution ΩAC
obtained by Alg. 5 with the best previous solution ΩDC obtained
under the DC approximation. As shown in Table VI, although
the DC-based solution may need augmentation to defend against
AC-based CCPA, the gap (i.e., |ΩAC| − |ΩDC|) is small. More
importantly, |ΩAC| is still much smaller (by 60–80%) than the
number of PMUs |ΩFO| required to achieve full observability
(see Table III), indicating the efﬁcacy of our approach of ﬁrst
computing an initial solution under the DC approximation and
then augmenting it to achieve our defense goal under the AC
model. We note that the values of |ΩAC| in Table VI are only
upper bounds on the number of PMUs required to prevent
outages under AC-based CCPA, suggesting great potential of
saving PMUs by adopting the proposed defense goal.

Table VI
NUMBER OF PMUS UNDER AC POWER FLOW MODEL

|ΩAC|
|ΩDC|

30-bus
3
2

57-bus
3
3

118-bus
10
9

300-bus
34
31

VI. CONCLUSION

We formulate a tri-level optimization problem under the DC
power ﬂow model to ﬁnd the optimal secured PMU placement
to defend against the coordinated cyber-physical attack (CCPA)
in the smart grid. Rather than completely eliminating the attack,
we propose to limit the impact of the attack by preventing
overload-induced outages. To solve the proposed problem, we
ﬁrst transform it into a bi-level MILP and then propose an
alternating optimization algorithm framework to obtain optimal
solutions. The core of the proposed algorithm framework is
constraint generation based on infeasible placements, for which
we develop two constraint generation approaches. Furthermore,
we propose a polynomial-time heuristic algorithm that can
scale to large-scale grids. In addition, we demonstrate how to
extend the obtained PMU placement to achieve our defense
goal under the AC power ﬂow model. Our experimental results
on standard test systems demonstrate great promise of the
proposed approach in reducing the requirement of PMUs. Our
work lays the foundation for tackling a number of further
questions in future work, e.g., how to characterize the optimal
attack without solving MILPs, how to directly optimize the

30-bus57-bus118-bus300-busTest systems00.10.20.30.4Fraction of secured PMUsp = 1p = 2p = 330-bus57-bus118-bus300-busTest systems00.10.20.30.4Fraction of secured PMUsc = 0.7(|V|+|E|)c = 0.8(|V|+|E|)c = 0.9(|V|+|E|)c = (|V|+|E|)15101520The value of Ka and KL05101520Number of PMUsKc = 1Kc = 4Kc = 7Kc = 10AODC15101520The value of Ka and KL0510152025SpeedupKc = 1Kc = 4Kc = 7Kc = 10PMU placement for outage prevention under the AC model,
and how to improve the robustness of the solution against the
failures of PMUs themselves.

REFERENCES

[1] Y. Huang, T. He, N. R. Chaudhuri, and T. L. Porta, “Preventing outages
under coordinated cyber-physical attack with secured PMUs,” in IEEE
SmartGridComm.

IEEE, 2021.

[2] R. Deng, P. Zhuang, and H. Liang, “Ccpa: Coordinated cyber-physical
attacks and countermeasures in smart grid,” IEEE Transactions on Smart
Grid, vol. 8, no. 5, pp. 2420–2430, 2017.

[3] P. Fairley, “Cybersecurity at U.S. utilities due for an upgrade: Tech to
detect intrusions into industrial control systems will be mandatory,” IEEE
Spectrum, vol. 53, no. 5, pp. 11–13, May 2016.

[4] G. Chaojun, P. Jirutitijaroen, and M. Motani, “Detecting false data
injection attacks in AC state estimation,” IEEE Transactions on Smart
Grid, vol. 6, no. 5, pp. 2476–2483, 2015.

[5] K. C. Sou, “Protection placement for power system state estimation
measurement data integrity,” IEEE Transactions on Control of Network
Systems, vol. 7, no. 2, pp. 638–647, 2019.

[6] S. M. Dibaji, M. Pirani, D. B. Flamholz, A. M. Annaswamy, K. H.
Johansson, and A. Chakrabortty, “A systems and control perspective of
CPS security,” Annual reviews in control, vol. 47, pp. 394–411, 2019.
[7] M. Ozay, I. Esnaola, F. T. Y. Vural, S. R. Kulkarni, and H. V. Poor, “Sparse
attack construction and state estimation in the smart grid: Centralized and
distributed models,” IEEE Journal on Selected Areas in Communications,
vol. 31, no. 7, pp. 1306–1318, 2013.

[8] T. A. Alexopoulos, G. N. Korres, and N. M. Manousakis, “Complemen-
tarity reformulations for false data injection attacks on pmu-only state
estimation,” Electric Power Systems Research, vol. 189, p. 106796, 2020.
[9] Y. Yuan, Z. Li, and K. Ren, “Modeling load redistribution attacks in
power systems,” IEEE Transactions on Smart Grid, vol. 2, no. 2, pp.
382–390, 2011.

[10] S. Lakshminarayana, E. V. Belmega, and H. V. Poor, “Moving-target
defense against cyber-physical attacks in power grids via game theory,”
IEEE Transactions on Smart Grid, 2021.

[11] L. Che, X. Liu, Z. Li, and Y. Wen, “False data injection attacks induced
sequential outages in power systems,” IEEE Transactions on Power
Systems, vol. 34, no. 2, pp. 1513–1523, 2018.

[12] X. Liu, Z. Li, X. Liu, and Z. Li, “Masking transmission line outages via
false data injection attacks,” IEEE Transactions on Information Forensics
and Security, vol. 11, no. 7, pp. 1592–1602, 2016.

[13] Z. Li, M. Shahidehpour, A. Alabdulwahab, and A. Abusorrah, “Bilevel
model for analyzing coordinated cyber-physical attacks on power systems,”
IEEE Transactions on Smart Grid, vol. 7, no. 5, pp. 2260–2272, 2015.
[14] H. Lin, A. Slagell, Z. T. Kalbarczyk, P. W. Sauer, and R. K. Iyer,
“Runtime semantic security analysis to detect and mitigate control-related
attacks in power grids,” IEEE Transactions on Smart Grid, vol. 9, no. 1,
pp. 163–178, 2016.

[15] L. Garcia, F. Brasser, M. H. Cintuglu, A.-R. Sadeghi, O. A. Mohammed,
and S. A. Zonouz, “Hey, my malware knows physics! attacking PLCs
with physical model aware rootkit.” in NDSS, 2017.

[16] R. Deng, G. Xiao, and R. Lu, “Defending against false data injection
attacks on power system state estimation,” IEEE Transactions on
Industrial Informatics, vol. 13, no. 1, pp. 198–207, 2015.

[17] X. Liu, Z. Li, and Z. Li, “Optimal protection strategy against false data
injection attacks in power systems,” IEEE Transactions on Smart Grid,
vol. 8, no. 4, pp. 1802–1810, 2016.

[18] M. Tian, M. Cui, Z. Dong, X. Wang, S. Yin, and L. Zhao, “Multilevel
programming-based coordinated cyber physical attacks and countermea-
sures in smart grid,” IEEE Access, vol. 7, pp. 9836–9847, 2019.
[19] T. T. Kim and H. V. Poor, “Strategic protection against data injection
attacks on power grids,” IEEE Transactions on Smart Grid, vol. 2, no. 2,
pp. 326–333, 2011.

[20] J. Hao, R. J. Piechocki, D. Kaleshi, W. H. Chin, and Z. Fan, “Sparse
malicious false data injection attacks and defense mechanisms in smart
grids,” IEEE Transactions on Industrial Informatics, vol. 11, no. 5, pp.
1–12, 2015.

[21] Q. Yang, D. An, R. Min, W. Yu, X. Yang, and W. Zhao, “On optimal
pmu placement-based defense against data integrity attacks in smart grid,”
IEEE Transactions on Information Forensics and Security, vol. 12, no. 7,
pp. 1735–1750, 2017.

[22] Y. Xiang and L. Wang, “A game-theoretic study of load redistribution
attack and defense in power systems,” Electric Power Systems Research,
vol. 151, pp. 12–25, 2017.

13

[23] X. Wu and A. J. Conejo, “An efﬁcient tri-level optimization model for
electric grid defense planning,” IEEE Transactions on Power Systems,
vol. 32, no. 4, pp. 2984–2994, 2016.

[24] Y. Yao, T. Edmunds, D. Papageorgiou, and R. Alvarez, “Trilevel
optimization in power network defense,” IEEE Transactions on Systems,
Man, and Cybernetics, Part C (Applications and Reviews), vol. 37, no. 4,
pp. 712–718, 2007.

[25] R. B. Bobba, K. M. Rogers, Q. Wang, H. Khurana, K. Nahrstedt, and T. J.
Overbye, “Detecting false data injection attacks on DC state estimation,”
in First Workshop on Secure Control Systems, vol. 2010. Stockholm,
Sweden, 2010.

[26] S. Chakrabarti, E. Kyriakides, and D. G. Eliades, “Placement of
synchronized measurements for power system observability,” IEEE
Transactions on power delivery, vol. 24, no. 1, pp. 12–19, 2008.
[27] W. Yuan, J. Wang, F. Qiu, C. Chen, C. Kang, and B. Zeng, “Robust
optimization-based resilient distribution network planning against natural
disasters,” IEEE Transactions on Smart Grid, vol. 7, no. 6, pp. 2817–2826,
2016.

[28] J. Liang, L. Sankar, and O. Kosut, “Vulnerability analysis and conse-
quences of false data injection attack on power system state estimation,”
IEEE Transactions on Power Systems, vol. 31, no. 5, pp. 3864–3872,
2015.

[29] M. Jin, J. Lavaei, and K. H. Johansson, “Power grid ac-based state esti-
mation: Vulnerability analysis against cyber attacks,” IEEE Transactions
on Automatic Control, vol. 64, no. 5, pp. 1784–1799, 2019.

[30] H.-M. Chung, W.-T. Li, C. Yuen, W.-H. Chung, Y. Zhang, and C.-K.
Wen, “Local cyber-physical attack for masking line outage and topology
attack in smart grid,” IEEE Transactions on Smart Grid, vol. 10, no. 4,
pp. 4577–4588, 2018.

[31] Z. Chu, J. Zhang, O. Kosut, and L. Sankar, “N-1 reliability makes it
difﬁcult for false data injection attacks to cause physical consequences,”
IEEE Transactions on Power Systems, 2021.

[32] ——, “Vulnerability assessment of large-scale power systems to false
data injection attacks,” in 2020 IEEE International Conference on
Communications, Control, and Computing Technologies for Smart Grids
(SmartGridComm).

IEEE, 2020, pp. 1–6.
[33] Z. Yang, K. Xie, J. Yu, H. Zhong, N. Zhang, and Q. Xia, “A general
formulation of linear power ﬂow models: Basic theory and error analysis,”
IEEE Transactions on Power Systems, vol. 34, no. 2, pp. 1315–1324,
2018.

[34] G. Krumpholz, K. Clements, and P. Davis, “Power system observability:
a practical algorithm using network topology,” IEEE Transactions on
Power Apparatus and Systems, no. 4, pp. 1534–1542, 1980.
exceedance
clariﬁca-
https://www.nerc.com/pa/Stand/

deﬁnition
tion,”
2014,
Prjct201403RvsnstoTOPandIROStndrds/2014 03 fourth posting
white paper sol exceedance 20141201 clean.pdf.

[35] “System operating

Online, March

limit

and

[36] “Nerc standard prc-023-1,” Online, February 2008, https://www.nerc.

com/ﬁles/prc-023-1.pdf.

[37] M. H. Athari and Z. Wang, “Impacts of wind power uncertainty on
grid vulnerability to cascading overload failures,” IEEE Transactions on
Sustainable Energy, vol. 9, no. 1, pp. 128–137, 2017.
[38] O. L. Mangasarian, Nonlinear programming. SIAM, 1994.
[39] A. Monticelli, “Electric power system state estimation,” Proceedings of

the IEEE, vol. 88, no. 2, pp. 262–282, 2000.

[40] C. Coffrin, H. L. Hijazi, and P. Van Hentenryck, “The qc relaxation:
A theoretical and computational study on optimal power ﬂow,” IEEE
Transactions on Power Systems, vol. 31, no. 4, pp. 3008–3018, 2015.

[41] S. Babaeinejadsarookolaee, A. Birchﬁeld, R. D. Christie, C. Coffrin,
C. DeMarco, R. Diao, M. Ferris, S. Fliscounakis, S. Greene, R. Huang
et al., “The power grid library for benchmarking ac optimal power ﬂow
algorithms,” arXiv preprint arXiv:1908.02788, 2019.

[42] C. Coffrin, H. L. Hijazi, and P. Van Hentenryck, “Distﬂow extensions

for ac transmission systems,” arXiv preprint arXiv:1506.04773, 2015.

[43] M. Porter, P. Hespanhol, A. Aswani, M. Johnson-Roberson, and R. Va-
sudevan, “Detecting generalized replay attacks via time-varying dynamic
watermarking,” IEEE Transactions on Automatic Control, vol. 66, no. 8,
pp. 3502–3517, 2020.

[44] L. Liu, M. Esmalifalak, Q. Ding, V. A. Emesih, and Z. Han, “Detecting
false data injection attacks on power grid by sparse optimization,” IEEE
Transactions on Smart Grid, vol. 5, no. 2, pp. 612–621, 2014.

[45] J. P. Vielma, “Mixed integer linear programming formulation techniques,”

Siam Review, vol. 57, no. 1, pp. 3–57, 2015.

[46] T. Terlaky, Interior point methods of mathematical programming.

Springer Science & Business Media, 2013, vol. 5.

APPENDIX A
MILP FORMULATION OF ATTACKER’S PROBLEM

In this section, we will demonstrate how to transform (23)
into a MILP, which can be efﬁciently solved by existing solver
such as Gurobi.

To begin with, we give an overview of the PPOP, as shown

in Fig. 4.

Figure 4. Overview of the PPOP

We ﬁrst consider the case that lower-level optimization (5)
returns the set of θ’s satisfying (5b)-(5d), i.e., it returns the
feasible region of SCED rather than a single solution. In this
case, (23) becomes a single-level problem.

Below, we show how to convert the single-level formulation
of (23) into a MILP. To convert (18) and (23e) into linear con-
straints, we introduce a constant M2,θ (deﬁned in Appendix B)
such that (18a) holds if and only if the following holds:
˜θ2,u − θ2,u ≤ M2,θ · (1 − xN,u),
˜θ2,u − θ2,u ≥ −M2,θ · (1 − xN,u),

(38b)

(38a)

and similar conversion applies to (18b). As for (23e), by
deﬁning a sufﬁciently large constant Mπ,e (see Appendix B)
and two binary auxiliary variables πn,e, πp,e to get rid of the
absolute value operation, (23e) is transformed into

−Mπ,e · (1 − πp,e) <

−Mπ,e · (1 − πn,e) <

f3,e
fmax,e
−f3,e
fmax,e

− γe ≤ Mπ,e · πp,e,

(39a)

− γe ≤ Mπ,e · πn,e.

(39b)

We claim that πe = πn,e + πp,e. To see this, suppose that
f3,e ≥ 0. Then, we must have − f3,e
− γe ≤ 0 and thus
fmax,e
πn,e = 0, while |f3,e|
− γe and thus πp,e = πe.
fmax,e
Notice that we must have πe = 1 if |f3,e| − γe · fmax,e > 0,
while |f3,e| − γe · fmax,e ≤ 0 leads to πe = 0.

− γe = f3,e
fmax,e

To linearize (20g), we introduce binary variables wf ∈
{0, 1}|mL| and wp ∈ {0, 1}|mN | for data injection on line
measurements and node measurements, respectively. Then,
(20g) can be transformed into (see deﬁnitions of Mc,f , Mc,p
in Appendix B)

(cid:17)

(cid:16) ˜f2 − f2
(cid:16) ˜B ˜θ2 − p0

− Mc,f wf ≤ Λf

− Mc,pwp ≤ Λp
1T wf + 1T wp ≤ ξc.

≤ Mc,f wf ,
(cid:17)

≤ Mc,pwp,

(40a)

(40b)

(40c)

14

{πn, πp, ap, wf , wp},

are
are
{ ˜θ2, ˜θ3, θ2, θ3, f2, f3, ˜f2, fcon}, where wf , wp are introduced
formulation without
auxiliary variables. Then,
considering the optimality of (5) is given as follows.

continuous

variables

the full

max (cid:107)πp + πn(cid:107)0
s.t.

∆−1Aβ ≤ xN ≤ ∆−1Aβ +

(cid:107)∆(cid:107)∞ − 1
(cid:107)∆(cid:107)∞

,

(cid:17)

1
2

≤ Mc,f wf ,

|D|T β + ζ,

(cid:16) ˜f2 − f2

1
|D|T β ≤ xL ≤
2
− (1 − ap) ≤ diag (γ (cid:12) fmax)−1 f2 ≤ 1 − ap,
˜Df2 = p0, −M2,f ap ≤ ΓDθ2 − f2 ≤ M2,f ap,
− fmax ≤ ˜f2 ≤ fmax, Γ ˜DT ˜θ2 − ˜f2 = 0,
− α|p0| ≤ ˜D ˜f2 − p0 ≤ α|p0|,
Λg ˜D ˜f2 = Λgp0,
− Mc,f wf ≤ Λf
− Mc,pwp ≤ ˜B ˜θ2 − p0 ≤ Mc,pwp,
1T wf + 1T wp ≤ ξc, (cid:107)ap(cid:107)0 ≤ ξp,
˜θ2,u − θ2,u ≤ M2,θ · (1 − xN,u),
˜θ2,u − θ2,u ≥ −M2,θ · (1 − xN,u),
pg,min ≤ Λg ˜B ˜θ3 ≤ pg,max,
− fmax ≤ ΓDT ˜θ3 ≤ fmax,
Λd ˜B ˜θ3 = Λd ˜D ˜f2,
− M3,a(1 − ap) ≤ f3 ≤ M3,a(1 − ap),
Λd ˜Df3 = Λdp0, Λg ˜Df3 = Λg ˜B ˜θ3,
− M3,f ap ≤ Γ ˜DT θ3 − f3 ≤ M3,f ap,
θ2,u0 = θ3,u0 = ˜θ2,u0 = ˜θ3,u0 = 0,
γe
Mπ,e
γe
Mπ,e

f3,e
Mπ,efmax,e
−f3,e
Mπ,efmax,e

− ·(1 − πn,e) <

− ·(1 − πp,e) <

−

−

≤ ·πp,e, ∀e,

≤ ·πn,e, ∀e,

(cid:40)

˜Dufcon =

|V | − 1,
−1,

if u = u0,
if u ∈ V \ {u0},

,

− |V | · (1 − ap,e) ≤ fcon,e ≤ |V | · (1 − ap,e)

(41a)

(41b)

(41c)

(41d)

(41e)

(41f)

(41g)

(41h)

(41i)

(41j)

(41k)

(41l)

(41m)

(41n)

(41o)

(41p)

(41q)

(41r)

(41s)

(41t)

(41u)

(41v)

(41w)

(41x)

The constraints (41b)-(41c) correspond to (16)-(17), (41d)-
(41e) correspond to (19a)-(19c), (41f)-(41k) correspond to (20),
(41l)-(41m) correspond to (38), (41n)-(41s) correspond to (21),
(41t) corresponds to (23c), (41u)-(41v) correspond to (23e),
(41w)-(41x) correspond to (14).

If we do not relax the optimality requirements in (5), we need
to introduce additional binary variables {rf l, rf u, rgl, rgu} and
continuous dual variables {µb, µc, µd, µe, µg} to transform
(5) into a linear system by using its KKT conditions [9].
Speciﬁcally, we add the following linear system into (41) for
the completeness of KKT conditions of (5):
d µb + ˜DΓµc + ˜DΓµd + ˜BΛT
˜BΛT

g µe − ˜BΛT

g φ

g µg = − ˜BΛT
(42a)
(42b)

(42c)

Together,

the above techniques

transform (23)

a MILP. Speciﬁcally,

the

binary

decision

into
variables

µc − M rf l ≤ 0,
Γ ˜DT ˜θ3 + M rf l ≤ M − fmax

The Proposed Formulation (PPOP) •Framework•Tri-level optimization problemPMU deployment OptimizationAttacker’s problemSCEDWhether successful attack existsPMU placementResult of SCED under the given attackAn attackµd − M rf u ≤ 0,
− Γ ˜DT ˜θ3 + M rf l ≤ M − fmax
µe − M rgl ≤ 0,
Λg ˜B ˜θ3 + M rgl ≤ pg,min + M 1
µg − M rgu ≤ 0,
− Λg ˜B ˜θ3 + M rgu ≤ −pg,max + M 1
rgl + rgu ≤ 1
rf l + rf u ≤ 1
µc, µd, µe, µg ≥ 0

(42d)

(42e)

(42f)

(42g)

(42h)

(42i)

(42j)

(42k)

(42l)

Compared to the attacker’s formulations in [1], [13] that also
optimize the location of physical attacks, the key advantage
of (23) is avoiding McCormick’s relaxation for bilinear terms
(22) and reducing the numbers of variables and constraints.
Speciﬁcally, McCormick’s relaxation in [1] will introduce
2|E||V | additional continuous variables and 8|E||V | additional
constrains. The cost of avoiding bilinear term in (23) is the
additional variables f2, f3, ˜f2 and the associated constraints,
although the beneﬁt usually outweighs the cost. For example,
for the IEEE 118-bus system, the formulation in [1] has 44436
continuous variables and 178, 596 constraints, while (23) only
has 1216 continuous variables and 5, 802 constraints.

APPENDIX B
CALCULATION OF BIG-M

In this section, we will explain how to calculate M2,a,e in
(19a), M2,f in (19c), M3,a in (21d), M2,θ in (38), M3,f in
(21f), Mπ,e in (39), M F , M F in (33), Mc,f , Mc,p in (40) and
Mq in (34c). In this section, we denote N = (V, E) as the
graph before physical attack while N (cid:48) = (V, E(cid:48)) as the graph
after attack.

We ﬁrst show how to calculate M2,a, M2,f and M2,θ.
Suppose that the power grid is designed to be robust to
N − k contingency. Then, the value of M2,a depends on
ξp − k. If ξp − k ≤ 0, then we can set M2,a,e := fmax,e
or M2,a,e := γefmax,e, since no ap can cause overloading.
Otherwise, we set M2,a,e := C2,aγefmax,e with a parameter
C2,a > 1. In our simulations, we ﬁnd that C2,a := 3 sufﬁces
since ξp − k is usually small. Next, we bound |θ2| by deﬁning
Mθ2,u ≥ maxap |θ2,u| and Mθ2 ≥ maxap maxu |θ2,u| since
the value of θ2 depends on ap. An intuitive way of obtaining
Mθ2,u is enumerating all possible values of ap, whose time
complexity is polynomial in |E| and |V | if ξp = O(1).
Here we provide another way of bounding Mθ2,u. Due to
our assumption of the connected N , there exists at least
one path in N connecting the reference node u0 to each
node u ∈ V . Moreover, for each path connecting u0 and
u, say P a(u0, u) := (e0, e1, · · · , eJ ) where e0 = (u0, v1),
ej = (vj, vj+1) and eJ = (vJ , u), we have θ2,u − θ2,u0 =
θ2,s − θ2,v1 + θ2,v1 − · · · + θ2,vJ − θ2,t, which leads to

max
ap

|θ2,u| = max
ap

|θ2,u − θ2,u0 |

≤

J
(cid:88)

j=0

rej M2,a,ej := MP a(θ2,u)

(43)

15

i=1

since θ2,u0 = 0 in our assumption and |θ2,vj − θ2,vj+1| ≤
rej M2,a,ej due to (19a). Denote np as the number of dif-
ferent paths connecting u and u0. Then, since the physical
attack will disconnect at most ξp lines, we set Mθ2,u :=
max{MP ai(θ2,u)}min{ξp+1,np}
.
Equipped with Mθ2,u, u ∈ V , we can calculate M2,f and
M2,θ. We deﬁne an intermediate constant M2,f,e for each line
such that M2,f = maxe∈E M2,f,e. Then, for e = (u, v) we can
˜dT
set M2,f,e := re(Mθ2,u + Mθ2,v) since |Γe
e θ2 − f2,e| > 0
only if ap,e = 1 and f2,e = 0.
obtain M2,θ, we

≥
maxap,ac |˜θ2,u|, u ∈ V in a similar way as that in (43).
Speciﬁcally, since ˜θ2 is estimated by CC based on the topology
N , we can arbitrarily choose one path (e0, e1, · · · , eJ ) in N
that connects u and u0 and set

bound M˜θ2,u

ﬁrst

To

M˜θ2,u :=

J
(cid:88)

j=0

rej fmax,ej ≥ max
ap,ac

|˜θ2,u|.

(44)

Then, we can set M2,θ := maxu∈V (M˜θ2,u + Mθ2,u).

Now, we are ready to demonstrate the calculation of M3,a
and M3,f . As for M3,a, we only require M3,a,e > γefmax,e
and M3,a ≥ maxe∈E γefmax,e so that the attacker can cause
outages over any lines. In practice, we can set M3,a :=
c maxe∈E γefmax,e with c > 1. As for M3,f , we again ﬁrst
show that we can bound |θ3,u| ≤ Mθ3,u without hurting the
attacker’s objective. We notice that the topology of grid at t3
before lines facing outage automatically disconnect themselves
is still N (cid:48). Thus, we can set Mθ3,u similarly as Mθ2,u, except
that (43) becomes:

max
ap

|θ3,u| ≤

J
(cid:88)

j=0

rej Ma,ej := MP a(θ3,u).

(45)

Then, we can set Mθ3,u := max{MP ai(θ3,u)}min{ξp+1,np}
,
M3,f,e := re(Mθ3,u + Mθ3,v) for e = (u, v) ∈ E, and M3,f =
maxe∈E M3,f,e.

i=1

Equipped with M3,a,e, Mπ,e can be easily set as c · ( M3,a,e
fmax,e

+

γe) with any constant c > 1.

We can set M F as 0 since q2 ≥ 0 and F3,i,u ∈ {0, −M2,θ},
∀i, u. There is no simple guidelines for M F in (33) since it is
the bound for dual variables. In practice, we can initialize M F
to a given value and solve (31) for each attack pair separately.
Then, we iteratively decrease M F until (31) is feasible under
each attack pair separately. In our simulations, we set M F :=
−M 2

2,θ. Equipped with M F , we can set Mq := 2M F
M2,θ
Finally, we demonstrate how to set Mc,f and Mc,p. Due
to (19a) and (20a), we have | ˜f2,e − f2,e| ≤ (1 + γe)fmax,e,
which implies that we can set Mc,f := maxe∈E(1 + γe)fmax,e.
Similarly, we can set Mc,p := α(cid:107)p0(cid:107)∞ due to (20e).

.

APPENDIX C
EFFICIENCY ANALYSIS OF “NO-GOOD” CONSTRAINTS

We have the following observations about AONG:
1) Cold start. The efﬁciency of (27) can be characterized
by the number of infeasible β’s that are cut out. Let
{ ˆβ(k)}K
k=1 be the PMU placements obtained in the ﬁrst

K iterations of Alg. 1 and { ˆβ
k=1 the corresponding
augmented placements obtained from (26). Then, the
number of feasible β’s for the next iteration is at least

(cid:48)(k)}K

(cid:16)

2| (cid:84)K

k=1 Ω( ˆβ

(cid:48)(k))c| − 1

(cid:17)

· 2|V |−| (cid:84)K

k=1 Ω( ˆβ

(cid:48) (k))c|

(46)

k=1 Ω( ˆβ

k=1 Ω( ˆβ
(cid:48)(k)}K

if (cid:84)K
(cid:48)(k))c (cid:54)= ∅, as placing at least one PMU in
(cid:84)K
(cid:48)(k))c will satisfy (27) for every placement in
{ ˆβ
k=1. This implies that the number of β’s that are
(cid:48) (k))c|. Therefore, the
cut out is at most 2|V |−| (cid:84)K
k=1 Ω( ˆβ
ﬁrst K “No-Good” constraints (27) added in Alg. 1 will
be inefﬁcient if | (cid:84)K
(cid:48)(k))c| is large. We observe
that | (cid:84)K
k=1 Ω( ˆβ
(cid:48)(k))c| is large at the beginning of Alg. 1
and decreases quickly as (cid:107) ˆβ(k)(cid:107)0 increases.

k=1 Ω( ˆβ

2) Repeated successful attacks. Another cause of inefﬁciency
is that for many PMU placements enumerated by AONG,
there exist successful attacks based on the same attack
pair (ap, e), indicating that new constraints are needed
to better defend against identiﬁed attacks.

APPENDIX D
THE DETAILS OF COEFFICIENTS IN ATTACKER’S PROBLEM

The linear system (28a) is the composition of (20f), (21e)

and (21c), which can be expanded into:







Λg ˜B
0
0

0
0

0
ΛdB
−Λg ˜B ΛgB

Λd ˜B −Λd ˜B

0











˜θ2
˜θ3
θ3



 =













Λgp0
Λdp0
0
0

(47)

as well as ˜θ2,u0 = ˜θ3,u0 = θ3,u0 = 0. For a given attack pair
(ap, e) and the corresponding θ2, the expansion of (28b) is





















˜θ2
˜B
− ˜B
I|V |
−I|V |
0
0
0
0
0
˜DT Γ
− ˜DT Γ

˜θ3
0
0
0
0
0
˜DT Γ
− ˜DT Γ
Λg ˜B
−Λg ˜B
0
0

θ3
0
0
0
0
−ΓedT
e
0
0
0
0
0
0

s2 + F3xN
p0 + α|p0|
−p0 + α|p0|
θ2 + Mθ(1 − xN )
−θ2 + Mθ(1 − xN )
−γefmax,e
fmax
fmax
pg,max
−pg,min
fmax
fmax





















(48)

Speciﬁcally, the ﬁrst two rows of (48) correspond to (20e), the
next two rows correspond to (38), the 5-th row indicates the
outage at the target line, the 6-th and 7-th rows correspond to
(21b), the 8-th and 9-th rows correspond to (21a), and the last
two rows correspond to (20a).

APPENDIX E
DETAILS OF THE ATTACKER’S PROBLEM UNDER AC POWER
FLOW MODEL

For completeness, we summarize the necessary notations for
presenting AC power ﬂow model in Table VII. Speciﬁcally,

16

Table VII
NOTATIONS FOR AC POWER FLOW
Description

Notation
p/q ∈ C|V |
(cid:126)vu = vuej·θu
˜Ybus = ˜Gbus + j ˜Bbus
˜Yf / ˜Yt ∈ C|E|×|V |
Cf /Ct ∈ {0, 1}|E|×|V |
pf /pt ∈ C|E|
qf /qt ∈ C|E|
|If |2/|It|2 ∈ C|E|
Imax ∈ R|E|
ˆImax ∈ R|E|
˜Yc = ˜Gc + j ˜Bc ∈ C|E|
˜Z = ˜ZR + j ˜ZI ∈ C|E|
˜YL = ˜GL + j ˜BL ∈ C|E|
Vmax/Vmin ∈ R|V |
θmax/θmin ∈ R|E|
ˆp3/ ˆq3 ∈ R|V |
ˆpf,3/ ˆqf,3 ∈ R|E|

Active/reactive power injection

node voltage

Bus admittance matrix
From/to end admittance matrix
From/to end incidence matrix
From/to end active power ﬂow
From/to end reactive power ﬂow
Square of from/to end current magnitude

Limit on line current magnitude

Threshold for line tripping

line charging

line impedance

line admittance

Limit on node voltage magnitude

Limit on phase angle difference for lines
approximated power injections at t3
approximated line power ﬂow at t3

we denote Cf as the From end incidence matrix, in which
Cf,e,i = 1 if and only if we have e = (i, k) ∈ E. The To end
incidence matrix Ct is deﬁned similarly, where Ct,e,k = 1 if
and only if we have e = (i, k) ∈ E.

We provide details about (36), where we adopt QC relaxation
proposed in [40] for (36c) and linearized approximation
proposed in [33] for (36d). As for the constraint on false data
injection to bypass BDD (36b), we follow [30] to formulate
QC relaxation-based constraints.

To begin with, we demonstrate the basics on QC relaxation
for AC power ﬂow equations. Recall from Table VII that the
complex voltage on node i is (cid:126)vi := viej·θi. Then, we introduce
auxiliary variables cii, cik and sik in the hope that
cii = v2
i ,
cik = vivk cos θik
sik = vivk sin θik,

(49b)

(49a)

(49c)

where θik = θi − θk. As proposed in [40], we ﬁrst introduce
the notation (cid:104)x(cid:105)·, which indicates an auxiliary variable as well
as the associated constraints with x as input. Concretely, (cid:10)x2(cid:11)T
indicates the auxiliary variable ˘x together with the following
constraints:

(cid:10)x2(cid:11)T

≡

(cid:26) ˘x (cid:62) x2

˘x (cid:54) (xu + xl) x − xuxl

,

(50)

where x ∈ [xl, xu] is pre-assigned bound. Similarly, we have




(cid:104)xy(cid:105)M :=

(cid:104)sin x(cid:105)S :=

(cid:104)cos x(cid:105)C :=

˘xy (cid:62) xly + ylx − xlyl
˘xy (cid:62) xuy + yux − xuyu
˘xy (cid:54) xly + yux − xlyu
˘xy (cid:54) xuy + ylx − xuyl
(cid:1) (cid:0)x − xu
(cid:1) (cid:0)x + xu
(xu)2 x2


(cid:26) ˘sx (cid:54) cos (cid:0) xu
˘sx (cid:62) cos (cid:0) xu
cx (cid:54) 1 − 1−cos(xu)
˘cx (cid:62) cos (xu)

(cid:40)

2

2

2

2

(cid:1) + sin (cid:0) xu
(cid:1) − sin (cid:0) xu

2

2

(cid:1)
(cid:1)

(51a)

(51b)

(51c)

Equipped with (50) and (51), the QC relaxation-based con-
(cid:11)T
straints on cii for each i ∈ V can be written as cii ∈ (cid:10)v2
,
while the constraints on cik and sik for each e = (i, k) ∈ E
are

i

cik = cki,
sik = −ski,
ik + s2
c2
ik ≤ ciickk,
(cid:104)vivk(cid:105)M · (cid:104)cos θik(cid:105)C(cid:69)M
(cid:68)
(cid:104)vivk(cid:105)M · (cid:104)sin θik(cid:105)S(cid:69)M
(cid:68)

sik ∈

cik ∈

(52a)

(52b)

(52c)

(52d)

(52e)

,

.

For simplicity, we will omit the auxiliary variables and
the associated constraints for modeling (52d) and (52e). We
assume that (52d) and (52e) are imposed when QC relaxation
is adopted. For (36b), the decision variables we focus are
˜c2,ii, ∀i ∈ V, ˜c2,ik, ˜s2,ik, ∀e = (i, k) ∈ E, e = (k, i) ∈ E,
˜θ2, ˜v2 and | ˜I2,f |2, | ˜I2,t|2. Then, the constraints (36b) can be
written as

2,i, ∀i ∈ Vg,

Λg( ˜p2 − p0) = 0, Λg( ˜q2 − q2) = 0
Λg(˜v2 − v2) = 0,
˜c2,ii = v2
− Λd| ˜p0| ≤ αΛd( ˜p2,i − ˜p0) ≤ αΛd| ˜p0|,
− Λd| ˜q0| ≤ αΛd( ˜q2,i − ˜q0) ≤ αΛd| ˜q0|,
(1 − η)Vmin ≤ ˜v2 ≤ (1 + η)Vmax
(1 − η)θmin,e ≤ ˜θ2,e ≤ (1 + η)θmax,e, ∀e ∈ E
| ˜I2,f | ≤ Imax, | ˜I2,t| ≤ Imax
˜p2,i =

˜Gik˜c2,ik − ˜Bik ˜s2,ik,

(cid:88)

˜q2,i =

k=1,...,n
(cid:88)

k=1,...,n

− ˜Bik˜c2,ik − ˜Gik ˜s2,ik,

(53a)

(53b)

(53c)

(53d)

(53e)

(53f)

(53g)

(53h)

(53i)

(53j)

t,e,k˜c2,kk + ˜Gt,e,i˜c2,ik + ˜Bt,e,i˜s2,ik,
t,e,k˜c2,kk − ˜Bt,e,i˜c2,ik + ˜Gt,e,i˜s2,ik,
f,i ˜pf,2 + cT
t,i ˜pt,2 + R(Ysh,i˜c2,ii)
f,i ˜qf,2 + cT
t,i ˜qt,2 − I(Ysh,i˜c2,ii)
2,i, ˜v2,i = v2,i, ˜θ2,i = θ2,i, ∀i with xN,i = 1,

˜p2,f,e = ˜Gf,e,i˜c2,ii + ˜Gf,e,k˜c2,ik − ˜Bf,e,k ˜s2,ik,
˜q2,f,e = − ˜Bf,e,i˜c2,ii − ˜Bf,e,k˜c2,ik − ˜Gf,e,k ˜s2,ik,
˜p2,t,e = ˜G∗
˜q2,t,e = − ˜B∗
˜p2,i = cT
˜q2,i = cT
˜c2,ii = v2
˜c2,ik = v2,iv2,k cos θik, ∀e = (i, k) with xL,e = 1,
˜p2,e = p2,e, ˜q2,e = q2,e, ∀e = (i, k) with xL,e = 1,
˜I2,f,e = I2,f,e, ˜I2,t,e = I2,t,e, ∀e = (i, k) with xL,e = 1,

(53k)

(53l)

(53m)

(53n)

(53o)

(53p)

(53q)

(53r)

(53s)

(53t)

where p0 and q0 indicates the ground-truth power injections
at t0, (53i)-(53j) are imposed for each node i ∈ V , (53k)-
(53n) are imposed for all e = (i, k) ∈ E, cf,i/ct,i is the
i-th column of Cf /Ct, Ysh denotes the diagonal matrix of
node shunt, R(x)/I(x) denotes the real/imaginary part of
x, (53q)-(53t) indicates the protection effect of PMUs, and
η ∈ [0, 1) is a manually assigned factor for ˜v2 and ˜θ2 not to
raise alarms in control center. Besides (53), we impose the

following constraints according to [42, Chapter 5] for each
e = (i, k) ∈ E into (36b) :

17

| ˜I2,f,e|2 =

1

|Ze|2 (˜c2,ii + ˜c2,kk − 2˜c2,ik) + 2 ˜Gc,e ˜p2,f,e
− 2 ˜Bc,e ˜q2,f,e − |Yc,e|2 ˜c2,ii,

˜p2,f,e + ˜q2,f,e = ˜ZR,e
+ |Yc,e|2 ˜c2,ii
˜p2,f,e + ˜q2,f,e = ˜ZI,e

(54a)
(cid:0)| ˜I2,f,e|2 − 2( ˜Gc,e ˜p2,f,e − ˜Bc,e ˜q2,f,e)
(cid:1) + ˜Gc,e(˜c2,ii + ˜c2,kk),
(54b)
(cid:0)| ˜I2,f,e|2 − 2( ˜Gc,e ˜p2,f,e − ˜Bc,e ˜q2,f,e)
(54c)

(cid:1) − ˜Bc,e(˜c2,ii + ˜c2,kk),

(cid:16)

+ |Yc,e|2 ˜c2,ii
1 + 2 ˜ZR,e ˜Gc,e − 2 ˜ZI,e ˜Bc,e
˜c2,ii − ˜c2,kk = 2( ˜ZR,e ˜p2,f,e
+ ˜ZI,e ˜q2,f,e) − | ˜Ze|2(cid:0)| ˜I2,f,e|2 − 2( ˜Gc,e ˜p2,f,e − ˜Bc,e ˜q2,f,e)
(cid:1)

(cid:17)

2

+

˜Yc,e

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)

˜c2,ii

(54d)

All equations in (54) should hold simultaneously.

Similarly, the decision variables we will focus on in (36c)
are ˜c3,ii, ∀i ∈ V, ˜32,ik, ˜s3,ik, ∀e = (i, k) ∈ E, e = (k, i) ∈
E, ˜θ3, ˜v3 and | ˜I3,f |2, | ˜I3,t|2. Then, the constraints (36c) are
similar to (53) and (54), with (53a)-(53h) changed into

pg,min ≤ Λg ˜p3 ≤ pg,max, qg,min ≤ Λg ˜q3 ≤ qg,max, (55a)
Λd( ˜p3,i − ˜p2,i) = 0, Λd( ˜q3,i − ˜q2,i) = 0,
(55b)
Λg( ˜p3,i − ˜p2,i) = 0
(55c)
Vmin ≤ ˜v3 ≤ Vmax, θmin,e ≤ ˜θ3,e ≤ θmax,e, ∀e ∈ E, (55d)
| ˜I3,f | ≤ Imax, | ˜I3,t| ≤ Imax.
(55e)

the decision variables

Following [33],
in (36d) are
3,i, ˆθ3,i, ˆp3,i, ˆq3,i, ∀i ∈ V , ˆpf,3 ∈ R|E|, ˆqf,3 ∈ R|E| and
ˆv2
| ˆI3|2 ∈ R|E|. Next, we deﬁne pL
f,3,e for e = (i, k) ∈
E with ap,e = 0 as follows:

f,3,e and qL

f,3,e = ˜GL,e
pL

(cid:18)

ˆθik,0

ˆθ3,ik −

ˆθ2
ik,0
2

f,3,e = − ˜BL,e
qL

−

(ˆvi,0 − ˆvk,0)2
2

(cid:18)

ˆθik,0

ˆθ3,ik −

ˆθ2
ik,0
2

−

(ˆvi,0 − ˆvk,0)2
2

+

ˆvi,0 − ˆvk,0
ˆvi,0 + ˆvk,0
(cid:19)

(ˆv2

3,i − ˆv2

3,k)

+ R( ˜Yc,e)ˆv2
3,i

(56a)

+

(cid:19)

ˆvi,0 − ˆvk,0
ˆvi,0 + ˆvk,0

(ˆv2

3,i − ˆv2

3,k)

− I( ˜Yc,e)ˆv2

3,i,

(56b)

where ˆvik,0 and ˆθik,0 are obtained from any base case system
operating condition. In our work, we set it as ˆvik,0 = v2,ik
and ˆθik,0 = θ2,ik for each given (ap, et). Then, we have three
types of constraints in (36d). Speciﬁcally, by appropriately
setting η3,p,i and η3,q,i (see proof of Theorem IV.1 for details)
to tolerate the approximation error, for each i ∈ V , we have

−η3,p,i ≤ Di ˆp3,f + ˆv2
3,i

|V |
(cid:88)

k=1

˜Gik − p0,i ≤ η3,p,i.

(57)

For each i ∈ Vd, we have

−η3,q,i ≤ Di ˆq3,f − ˆv2
3,i

|V |
(cid:88)

k=1

˜Bik − ˜q3,i ≤ η3,q,i, .

(58)

For each e = (i, k) ∈ E with ap,e = 0, we have

pf,3,e = ˜GL,e

− ˜BL,e

ˆθik + pL

f,3,e,

3,i − ˆv2
ˆv2
3,k
2
3,i − ˆv2
ˆv2
3,k
2

qf,3,e = − ˜BL,e
(cid:16)

ˆθik + qL

f,3,e,

− ˜GL,e
(cid:17)

1 + 2 ˜ZR,e ˜Gc,e − 2 ˜ZI,e ˜Bc,e

3,k = 2( ˜ZR,e ˆp3,f,e
3,i − ˆv2
ˆv2
+ ˜ZI,e ˆq3,f,e) − | ˜Ze|2(cid:0)| ˆI3,f,e|2 − 2( ˜Gc,e ˆp3,f,e
(cid:12)
˜Yc,e
(cid:12)
(cid:12)

− ˜Bc,e ˆq3,f,e) +

ˆv2
3,i

(cid:12)
(cid:12)
(cid:12)

(cid:1)

2

(59c)

(59a)

(59b)

APPENDIX F
DETAILS OF PMU LOCATIONS OBTAINED IN PPOP

Here, we present the location of PMUs obtained in the
proposed PPOP. First, in Table VIII, we give the PMU locations
according to the best proposed solution ΩPPOP to PPOP, which
is consistent with Table II.

Table VIII
PMU LOCATIONS OF PPOP UNDER DC MODEL

IEEE 30-bus system
IEEE 57-bus system
IEEE 118-bus system

IEEE 300-bus system

Location of PMUs
15, 23
12,13,25
17,34,37,42,49,72,85,100,118
8,20,22,34,38,43,44,48,49,54,64,68,
74,77,79,89,90,94,99,109,119,132,
138,152,185,190,203,216,221,270,271

Then, in Table IX, we present the PMU locations of the
solution that can pass the test of Alg. 4 under AC power ﬂow
model, obtained by Alg. 5.

Table IX
PMU LOCATIONS OF PPOP UNDER AC MODEL

IEEE 30-bus system
IEEE 57-bus system
IEEE 118-bus system

IEEE 300-bus system

Location of PMUs
5,15,23
12,13,25
17,34,37,42,49,62,72,85,100,118
8,20,22,34,38,43,44,48,49,54,64,68,
74,77,79,81,89,90,94,99,109,119,132,
138,152,175,185,190,197,203,216,
221,270,271

APPENDIX G
MORE DISCUSSION OF RELATED WORKS

Different defense techniques against CCPA/FDI: Follow-
ing [6], we classify defense techniques against CCPAs into the
following categories:

1) Prevention: Due to the requirements of network infor-
mation and measurements, prevention methods defend
against CCPAs by reducing or postponing the information
leakage. Moving target defense (MTD) approach [10]
is a typical
technique in this category. Speciﬁcally,
MTD methods will strategically impose random change
to network components (such as line admittance) to
mislead the attacker. The CCPAs with falsiﬁed network
parameters have a higher chance to be detected. Another

18

typical method in this category is dynamic watermarking
[43], which shares a similar spirit of MTD.

2) Detection: The methods in this category manage to
detect the existence of attacks under some assumption on
information exposure and attack capability. Traditional
BDD is one of the approaches in this category. There
are some advanced detection techniques, such as low
rank-based detection [44]. Securing measurements or de-
ploying PMUs can also be used for detection. Speciﬁcally,
an attack that tries to alter the measurements secured by
PMUs will be detected by the control center. However,
to achieve full detection, full observability by PMUs is
required.

3) Resilience: It is critical to keep the system stable when
there exist CCPAs that can bypass the detection. In other
words, resilience approaches aim at limiting the impact of
the attacks. Game-theoretic methods can be regarded as
typical ones, such as the budget-constrained formulations
in [18], [22]–[24], [27]. Our solution lies in this category.

APPENDIX H
ADDITIONAL PROOFS

Theorem III.1. We will reduce the dominating set problem to
PPOP. Given a graph N = (V, E), the dominating set problem
aims to ﬁnd a minimum set of vertices V1 ∈ V such that
∀u ∈ V \V1, u has at least one neighbor in V1. The dominating
set problem is known to be NP-hard. Notice that given the grid
N = (V, E) the parameters for the proposed problem (24)-(23)
are p0, Γ, ξp, ξc, α and {γe}e∈E. We will prove for any given
connected grid and the associated dominating set problem,
there exists a parameter setting for the proposed problem such
that V1 is a minimal dominating set if and only if V1 is an
optimal solution to (24), i.e., ∀u ∈ V, xN,u = 1.

Given any p0, suppose that θ0 is the associated phase angle
without attack, i.e., p0 = ˜Bθ0, and ˆθ0 is the the solution to
(5), i.e., ˆθ0 = ψs(p0, ˜D), which gives ˆf0 := Γ ˜DT ˆθ0.

Then, we set p0 = 0, ξp = 0, ξc = ∞, α = ∞ and Γ as
identity matrix, which results in θ0 = ˆθ0 = 0 and ˆf0 = 0. In
addition, we set γe = 0, ∀e ∈ E, which transform (23e) to

|ΓedT

(60)

e θ3| = 0 ↔ πe = 0.
Next, we show by contradiction that |ΓedT
e θ3| = 0 holds for
all e ∈ E only if ˜θ2 = 0 = θ0. Suppose ˜θ2 (cid:54)= 0, we must
have ˜B ˜θ2 (cid:54)= 0, which leads to 0 (cid:54)= ˜θ3 = ψs( ˜B ˜θ2, ˜D) and
thus Λg ˜B ˜θ3 (cid:54)= 0 due to the constraint (23c). The non-zero
Λg ˜B ˜θ3 implies that ∃e ∈ E such that ΓedT
e θ3 (cid:54)= 0. That is to
say, the constraint (24b) holds only when ˜θ2 = θ0 = 0, which
indicates that the defender has to place PMUs to guarantee
that the only feasible solution to (23) is ac = 0. In another
word, β needs to satisfy ∀u ∈ V, xN,u = 1, which completes
the proof.

Theorem III.2. First, we introduce some deﬁnitions: B :=
{β|ψa(β) = 0} denotes the set of
feasible solutions,
Bc := {β|ψa(β) ≥ 1} the infeasible solutions, M(Bc) :=
{β|(β, β(cid:48) ∈ Bc) ∧ (β(cid:48) ≥ β) → (β(cid:48) = β)} the maximal
infeasible solutions, and P := { ˇβ ∈ [0, 1]|V ||∀β ∈ M(Bc) :

(cid:80)

u:βu=0

ˇβu ≥ 1} the polytope excluding all the maximal

infeasible solutions.

Then, based on the results in [45], we have the following

characterization:

Lemma H.1. The following statements hold:
{0, 1}|V | = B; (ii) ∀β(cid:48) ∈ M(Bc), (cid:80)
facet of P.

(i) P ∩
u=0 βu ≥ 1 deﬁnes a

u:β(cid:48)

u:β(cid:48)

1,u=0 β1,u = 0, which implies Ω(β1) ⊆ Ω(β(cid:48)

Proof. To prove statement (i), we ﬁrst prove that B ⊆
(P ∩{0, 1}|V |) by contradiction. Suppose ∃β1 ∈ B but β1 /∈ P.
1 ∈ Bc such
Then by deﬁnition of P, there must exist β(cid:48)
that (cid:80)
1). By
Lemma III.1, we must have β1 ∈ Bc, which contradicts with
the assumption that β1 ∈ B. Thus, B ⊆ (P ∩ {0, 1}|V |). Then,
we prove (P ∩ {0, 1}|V |) ⊆ B by contradiction. Suppose there
exists ˇβ ∈ (P ∩ {0, 1}|V |) but ˇβ /∈ B, which implies that
ˇβ ∈ Bc. That is to say, ∃ ˇβ(cid:48) ≥ ˇβ such that ˇβ(cid:48) ∈ M(Bc). Then
by deﬁnition of P, we have (cid:80)
ˇβu ≥ 1. However, since
ˇβ(cid:48) ≥ ˇβ, ∀u : ˇβu = 0, we must have ˇβu = 0 and leads to
(cid:80)
ˇβu = 0, which introduces contradiction. In summary,

u=0

u: ˇβ(cid:48)

u: ˇβ(cid:48)

u=0

P ∩ {0, 1}|V | = B.

u: ˇβ(cid:48)

(ii) by contradiction,

We then prove statement

i.e.,
∃ ˇβ(cid:48) ∈ M(Bc) such that when we remove the inequality
(cid:80)
u=0 βu ≥ 1 from P, we still have P. By deﬁnition of
M(Bc), we must have ˇβ(cid:48) ∈ Bc, which implies (cid:80)
ˇβ(cid:48)
u =
0, i.e., ˇβ(cid:48) /∈ P. That is to say, there exists some inequality
to cut ˇβ(cid:48) out from P, i.e., ∃ ˇβ(cid:48)(cid:48) ∈ M(Bc) and ˇβ(cid:48)(cid:48) (cid:54)= ˇβ(cid:48) such
that (cid:80)
u = 0. Notice that ∀u : ( ˇβ(cid:48)(cid:48)
ˇβ(cid:48)
u = 0),
which implies Ω( ˇβ(cid:48)) ⊆ Ω( ˇβ(cid:48)(cid:48)). By deﬁnition of M(Bc), we
u = ˇβ(cid:48)
must have ˇβ(cid:48)(cid:48)
u and
completes the proof.

u, which contradicts with ˇβ(cid:48)(cid:48)

u = 0) → ( ˇβ(cid:48)

u (cid:54)= ˇβ(cid:48)

u: ˇβ(cid:48)(cid:48)

u =0

u=0

u: ˇβ(cid:48)

We now prove Theorem III.2 based on Lemma H.1. First
notice that each ˆβ ∈ Bc will be enumerated at most once in
Alg. 1 due to the “no-good” constraints, and hence the algorithm
will converge in ﬁnite time. Then, consider an arbitrary ˆβ(cid:48)
obtained through (26). The generated “no-good” constraint
(cid:80)
i=0 βi ≥ 1 must be satisﬁed by all the feasible solutions
in B, as any PMU placement violating this constraint must be
infeasible according to Lemma III.1. Finally, for any β1, β2 ∈
B with (cid:107)β1(cid:107)0 < (cid:107)β2(cid:107)0, β1 will be found by Alg. 1 before β2,
since each guess of PMU placement is obtained by minimizing
(cid:107)β(cid:107)0 in (24), which completes the proof.

i: ˆβ(cid:48)

Theorem III.3. As Alg. 1 always returns a feasible solution
that defends against all attack pairs, we only need to prove
that the solution β1 returned by AODC requires the minimum
number of PMUs. We will prove this by contradiction.
Suppose that there exists β2 such that (cid:107)β2(cid:107)0 < (cid:107)β1(cid:107)0 and
ψa(β2) = 0. Then β2 must be feasible to the instance of (31)
constructed based on the attack pairs {(a(k)
k=1 and
the maximal infeasible solutions { ˆβ
k=1 found by AODC
as it defends against all attacks. This contradicts with the fact
that β1 is optimal to (31).

p , e(k))}K

(cid:48)(k)}K

Lemma III.2. We ﬁrst observe that xN and xL are unique
under the constraints (16)-(17). Thus, we will use xN (β) and

19

xL(β) to denote the values of xN and xL satisfying (16)-(17)
for a given β ∈ {0, 1}|V |.

For a given attack pair (ap, e), ( ˇq1, ˇq2, ˇβ) can be feasible

to (34) in two different cases. The ﬁrst case is that

(cid:88)

ap,e=1

xL,e((cid:100) ˇβ(cid:101)) ≥ 1,

(61)

which makes (q1 = 0, q2 = 0, (cid:100) ˇβ(cid:101), xN ((cid:100) ˇβ(cid:101)), xL((cid:100) ˇβ(cid:101)))
feasible for (30) with wa = 1.
The second case is

that xL,e((cid:100) ˇβ(cid:101)) = 0 for all
e with ap,e = 1,
in which case we must have
( ˇq1, ˇq2, (cid:100) ˇβ(cid:101), xN ((cid:100) ˇβ(cid:101)), xL((cid:100) ˇβ(cid:101))) feasible to (30) with wa = 0.
To prove this, we only need to show that

(cid:0)F3xN ((cid:100) ˇβ(cid:101))(cid:1)T

ˇq2 ≤ F3 ˇq2.

(62)

According to (48), F3,i,u is either 0 or −Mθ, which together
with the fact that xN,u((cid:100) ˇβ(cid:101)) ≥ 0 and ˇq2,i ≥ 0 implies that

(cid:0)F3xN ((cid:100) ˇβ(cid:101))(cid:1)T

ˇq2 =

≤

(cid:88)

u∈V

(cid:88)

(cid:32) m2(cid:88)

xN,u((cid:100) ˇβ(cid:101))

(cid:33)

F3,i,u ˇq2,i

(63)

(cid:32) m2(cid:88)

1

i=1

(cid:33)

F3,i,u ˇq2,i

= F3 ˇq2,

(64)

u∈V

i=1

which completes the proof.

Theorem III.4. Under the assumption of ξp = O(1),
the
(cid:1)(cid:17)
number of possible attack pairs is |E|
≤
ξp|E|ξp+1 = O (cid:0)|E|ξp+1(cid:1). Therefore, the time complexity
of solving (23) for a given β is polynomial in |E| and |V |,
since in the worst case (23) can be solved by checking the
feasibility of (28) for all the O (cid:0)|E|ξp+1(cid:1) attack pairs.

(cid:16)(cid:80)ξp
i=1

(cid:0)|E|
i

We ﬁrst characterize the complexity of Alg. 3. Since each
candidate placement Ωi either has one more node or can defend
against all attack pairs in A after one iteration of the while loop,
Alg. 3 converges within |V | iterations. Each iteration of Alg. 3
is dominated by solving (35) (Line 8) for at most Kc times.
Since the numbers of variables and constraints of (35) are both
O((|E| + |V |)|A|) and |A| = O (cid:0)|E|ξp+1(cid:1), the complexity
of solving (35) is polynomial 3 in |V | and |E|. In summary,
the complexity of Alg. 3 is polynomial in |V |, |E|, and Kc
since it solves a polynomial-sized LP for at most Kc|V | times.
It is worth noting that the effect of KA and KL in Alg. 3’s
complexity is dominated by |V | and |E|. To see this, we note
that KL only appears in Line 7 of Alg. 3, in which we must
have KL ≤ |E|. Then, KA only appears in Line 9 of Alg. 3, in
which we must have KA ≤ |V |. Thus, we do not consider the
effect of KA and KL in Alg. 3’s computational complexity.

The complexity of Alg. 2 comes from: (i) solving (23)
O(|E|ξp+1) times (Line 3 and Line 12); (ii) solving (35) for
|A0| = O(|E|ξp+1) times (Line 5), each of which deals with
an LP containing O((|E| + |V |)|A0|) variables and constraints
and thus takes polynomial time; (iii) calling Alg. 3 at Line 8 for
1 time and at Line 14 for O(|E|ξp+1) times, whose complexity
is polynomial in |V |, |E|, and Kc. In summary, Alg. 2 is a
polynomial-time algorithm in terms of |V |, |E|, and Kc.

3The exact order depends on the speciﬁc algorithm used to solve LP [46].

Theorem IV.1. According to [33], [42] and (59), we have

20

| ˆI3,f,e|2 =

1
|Ze|2

(cid:0)2( ˜ZR,e ˆp3,f,e + ˜ZI,e ˆq3,f,e) + ˆv2

(1 + 2 ˜ZR,e ˜Gc,e − 2 ˜ZI,e ˜Bc,e)ˆv2
i
˜Bc,e ˆq3,f,e) − | ˜Yc,e|2ˆv2
i

k−
(cid:1) + 2( ˜Gc,e ˆp3,f,e−

(65)

for each e = (i, k) ∈ E with ap,e = 0. Based on (65)
and the assumption on (cid:15)θ = ((cid:15)θ,u)u∈V , (cid:15)v = ((cid:15)v,u)u∈V ,
(cid:15)p = ((cid:15)p,e)e∈E and (cid:15)q = ((cid:15)q,e)e∈E, we can easily derive
an upperbound (cid:15)I,e ≥ || ˆI3,e| − |I3,e||, ∀e ∈ E. Speciﬁcally, we
can set

(cid:15)I,e :=

1
|Ze|2

(cid:0)2(| ˜ZR,e|(cid:15)p,e + | ˜ZI,e|(cid:15)q,e) + (cid:15)2

|1 + 2 ˜ZR,e ˜Gc,e + 2 ˜ZI,e ˜Bc,e|(cid:15)2
v,i
| ˜Bc,e|(cid:15)q,e) + | ˜Yc,e|2(cid:15)2

v,i.

v,i+
(cid:1) + 2(| ˜Gc,e|(cid:15)p,e+

(66)

If there exists an successful attack pair (ap, e) that cannot
be found by Alg. 4 for a given PMU placement, we must have
one of the following cases:

1) There exists ˜v2, ˜θ2 such that |I3,e| > γeImax,e. In the
meantime, at least one of (57) and (58) are violated.

2) Let

3 , ˜θ(1)

2 , ˜v(1)

| ˆI ∗
3,f,e| be the optimal solution of (36). There
exists ˜v(1)
2 , ˜θ(1)
3,e | > γeImax,e.
Let | ˆI (1)
3,f,e| be the corresponding approximated solution
for ˜v(1)
2 , ˜θ(1)
3 . Then we must have ˆImax,e ≥
3,f,e| ≥ | ˆI (1)
| ˆI ∗

2 , ˜v(1)
3,f,e|.

such that |I (1)

3 , ˜θ(1)

3

We ﬁrst show that the case one can be avoided if we properly
set η3,p,i in (57) and η3,q,i in (58). Speciﬁcally, according to
(57), we must have

Di ˆp3,f + ˆv2
3,i

|V |
(cid:88)

k=1

˜Gik − p0,i ≤ η3,p,i

(67)

if we set

η3,p,i ≥ (∆ii − 1)(cid:15)p,i + |

|V |
(cid:88)

k=1

˜Gik|(cid:15)v,i,

(68)

where (∆ii − 1) denotes the number of neighbors of node i
as deﬁned in (16). Similarly, we can deﬁne η3,q,i to avoid the
ﬁrst case. Then, we will show how to set ˆImax,e so that the
second case will not happen. In case two, we must have
3,f,e| ≥ |I (1)
ˆImax,e ≥ | ˆI ∗

3,f,e| ≥ | ˆI (1)

3,e | − (cid:15)I,e > γeImax,e − (cid:15)I,e
(69)

Thus, if we set ˆImax,e ≤ γeImax,e − (cid:15)I,e, (69) cannot hold,
which rules out the possibility of case two. In summary, by
properly setting η3,p,i, η3,q,i and set ˆImax,e ≤ γeImax,e − (cid:15)I,e,
a PMU placement that can pass the test of Alg. 4 will achieve
our defense goal.

