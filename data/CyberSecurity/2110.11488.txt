2
2
0
2

g
u
A
8

]

R
C
.
s
c
[

2
v
8
8
4
1
1
.
0
1
1
2
:
v
i
X
r
a

Position Paper: Certificate Root Stores—An Area of Unity or
Disparity?

Jegan Purushothaman
Carleton University
Ottawa, Canada

Ethan Thompson
Carleton University
Ottawa, Canada

AbdelRahman Abdou
Carleton University
Ottawa, Canada

ABSTRACT
Organizations like Apple, Microsoft, Mozilla and Google maintain
certificate root stores, which are used as trust anchors by their
popular software platforms. Is there sufficient consensus on their
root-store inclusion and trust policies? We measure disparities
among their root stores, accounting for various aspects such as
inclusion policies, delivery methods, trust context, and the certifi-
cates themselves. Disparities appear astounding, including in the
government-owned certificates that they trust. We believe such a
status-quo is alarming, and warrants more attention from the wider
community.

KEYWORDS
Certificate root stores, PKI, Trust Anchors.

ACM Reference Format:
Jegan Purushothaman, Ethan Thompson, and AbdelRahman Abdou. 2022.
Position Paper: Certificate Root Stores—An Area of Unity or Disparity?. In
Cyber Security Experimentation and Test Workshop (CSET 2022), August 8,
2022, Virtual, CA, USA. ACM, New York, NY, USA, 6 pages. https://doi.org/
10.1145/3546096.3546110

1 INTRODUCTION
A web browser must obtain a web server’s cryptographic public
key to verify the identify of that server. To prevent an intercepting
attacker from substituting the server’s key with their own, the
server sends the browser a certificate—a document binding the
server’s domain name to a public key. This document is digitally
signed and issued by a third party, called a Certificate Authority
(CA). For a browser to validate the document’s signature, the CA’s
own public key must be accessible to the browser. This key is
included in another certificate, which is either stored locally on
the machine that the browser is running on, or is sent along with
the server’s certificate. Browsers trust locally-stored certificates, so
such certificates need not be signed by another CA; they are thus
signed by the same CA that owns the enclosed public key, i.e., a
self-signed certificate. But when a CA is not trusted, its certificate
must be sent along with the server’s, and it needs to be validated
in the same manner as the server’s certificate. Instead of validating
one certificate, the browser thus validates a chain of certificates.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CSET 2022, August 8, 2022, Virtual, CA, USA
© 2022 Association for Computing Machinery.
ACM ISBN 978-1-4503-9684-4/22/08. . . $15.00
https://doi.org/10.1145/3546096.3546110

Regardless of the chain’s length, it must lead to a locally-stored
(i.e., client-trusted) certificate, or else the browser fails to verify the
server’s identity. The collection of the locally-stored certificates is
called the root store. They constitute the anchor of trust.

The above process is not exclusive to web browsers. It applies to
any network application that relies on certificates for establishing
secure sessions with a verified server, including secure email (when
a local mail client is used, such as Apple’s Mail application for iOS
or Thunderbird), remote logins (like SSH), and more recently the
Domain Name System (DNS) [6]. The standard format for such
certificates is called X.509, which is standardized by the Interna-
tional Telecommunications Union (ITU). Application builders have
a choice: either rely on the root store of the Operating System (OS)
upon-which the application will run, or build and maintain their
own root store. In the latter, the root store is typically part of the
application’s software package, downloaded when the application
is first installed. Mozilla has long maintained its own root store,
and the organization’s products, famously the Firefox browser, rely
on this store. Apple Safari and Microsoft Edge rely on the OS’s root
store. Google runs a root store for Android. Its Chrome browser
had been relying on the OS’s root store; it recently got its own root
store.1

One quickly realizes how critical root stores are to an ecosystem.
A malicious CA whose certificate is in the root store can, in theory,
substitute any server’s public key (not just a server that has asked
this CA for a certificate), thus impersonate any website [1]. Root
store management is thus of extreme importance. For example,
unused/untrusted certificates should be removed [9] to reduce the
trust base—cf., the Small-Trusted-Bases security principle [11]. In
practice, each vendor maintaining a root store has its own standards
to determine policies like who to trust (i.e., which organization will
have its certificate included in the root store), what applications will
a root certificate be trusted for, how the root store is communicated
to clients, and when to distrust an organization. Ideally, a user
would understand the effect of their decision, e.g., to use Chrome
on Linux or Firefox on Windows, on their realm of trust. But this is
unlikely to be the case in practice.

Root store management policies are influenced by a variety of
factors, like ethical principles, politics, and business considerations,
which have resulted in increasingly widening deltas between pop-
ular root stores in the Public Key Infrastructure (PKI) ecosystem.
Root store sizes were compared in 2015 [4], where it was found
that back then their sizes already varied widely.

Beyond the differences in root store sizes, a few question arise.
Taking a current snapshot in time, to what degree is the variation
among the trusted certificates themselves? Do such differences di-
vide the Internet into distinct trust zones? Can a user’s choice to

1https://www.chromium.org/Home/chromium-security/root-ca-policy

 
 
 
 
 
 
CSET 2022, August 8, 2022, Virtual, CA, USA

Jegan Purushothaman, Ethan Thompson, and AbdelRahman Abdou

use one platform over another substantially change the realm they
(implicitly) trust? We shed some light on these questions, focusing
on five major root stores maintained by five vendors: Apple (Ma-
cOS/iOS), Microsoft (Windows OS), Mozilla (Firefox/Thunderbird),
Canonical (Ubuntu henceforth), and Google (Android). Recent re-
search confirms that Apple, Microsoft, and Mozilla constitute the
most popular root stores [8]. We will refer to Google’s root store
as Android from this point on, to avoid confusion with Google’s
recent Chrome Root Program.

2 DISPARITIES BETWEEN VENDORS
We breakdown this section by the four stages in the life of a potential
root-store certificate (or root certificate for short). Specifically, we
discuss: (1) root-store inclusion policies, (2) methods of delivering
root stores to clients, (3) the root certificates themselves, and (4)
root certificate usage across applications.

2.1 Differences in policies of inclusion
A noticeable difference exists in the level of details provided by
each vendor on their root-store inclusion policy. Mozilla’s process
is relatively transparent, where discussions pertaining to a root
certificate’s inclusion occurs on a publicly accessible forum.2 Mi-
crosoft has made available a significant amount of information
detailing the application process and requirements for a CA to join
the Microsoft Trusted Root Program,3 but final inclusion decisions
are ultimately under the company’s control. Apple makes available
relatively the least amount of information on root-store inclusion
policies.4 Not much information is provided, beyond listing a few
brief criteria that an organization has to satisfy for including its
certificate into Apple’s root store.

The root stores of Ubuntu, Android, and many other open-source
platforms are primarily based on Mozilla’s, which allows them
to push the administrative burden to Mozilla.5 To include a root
certificate in Ubuntu and Android, firstly a CA must add their
certificate to the Mozilla Root Store, upon which they contact the
respective vendor requesting an inclusion and provide details about
their root certificate inclusion by Mozilla.

Apple, Microsoft, Mozilla, and Google are part of the CA/Browser
(CAB) Forum, as a result much of the technical details pertaining
to the certificate and administrative regulations of a CA’s behav-
ior have been standardized among the four. A common aspect for
root-store inclusion among them is the requirement for the CA
to be audited by an independent and qualified authority. CAs are
typically expected to complete a WebTrust Principles and Criteria for
Certification Authorities audit, or an equivalent from the European
Telecommunications Standards Institute (ETSI). These audits must
be run by accredited organizations, which include large accounting
firms like Ernst&Young (EY) and PriceWaterhouseCoopers (PwC).6
A CA can also provide audits of equivalent standards, however it is

2https://groups.google.com/g/mozilla.dev.security.policy and https://wiki.mozilla.org/
CA
3https://docs.microsoft.com/en-us/security/trusted-root/program-requirements
4https://www.apple.com/certificateauthority/ca_program.html
5https://answers.launchpad.net/ubuntu/+source/ca-certificates/+question/693748
6A list of Webtrust practitioners can be found here: https://www.cpacanada.ca/en/
business-and-accounting-resources/audit-and-assurance/overview-of-webtrust-
services/licensed-webtrust-practitioners-international

unclear exactly under what circumstances would this be accepted
over a WebTrust/ETSI audit, or how an equivalent audit may in-
fluence restrictions on a commercial CA. There are different types
of WebTrust/ETSI audits available, and all vendors appear to be
generally in agreement on which audits need to be conducted.

Interesting differences were noticed between Microsoft and the
others when we look at the inclusion of government root certifi-
cates. Of the five vendors, Microsoft appears to be the only one
explicitly differentiating between a government root certificate and
a commercial one (i.e., CA), with the option for a government to
have their certificates domain restricted if they did not submit an
audit that meets the WebTrust/ETSI standard. Microsoft states:

“Government CAs must restrict server authentication to
government-issued top level domains and may only issue other
certificates to the ISO3166 country codes that the country has
sovereign control over [..]. These government-issued TLDs are referred
to in each CA’s respective contract.”
It appears that such a contract, between a government and Mi-
crosoft, is intended to legally bind the government to issue certifi-
cates only to its domains. The Name Constraint field of an X.509
certificate is designed for such a purpose, but it does not apply to
self-issued certificates (typically root certificates) [3, p.40], and so
it is unclear if this part of the contract is technically enforced.

Mozilla solicits the broader community’s input on concerns about
a root certificate inclusion. A government’s record on areas such
as human rights, domestic surveillance, freedom of speech, and
foreign policy can impact its likelihood of root-store inclusion. For
Microsoft, governments can be included in the root store with the
understanding that their certificate will be domain-restricted. This
contributes to the differences in the number of government root
certificates, as we show below.

2.2 Root Store Delivery
Unlike the root stores of Android, Apple, and Ubuntu, which are
fully included in the OS upon installation, Microsoft’s is not fully in-
cluded on a fresh installation of Windows [4]. Since Windows Vista,
each Windows installation contains only a subset of Microsoft’s
root store. The full store is available in an online repository, which
is accessed as needed by applications through OS-update avenues,
thus providing Windows with the capability of expanding its local
root store on the fly. Mozilla’s root store is contained within the
Network Security Services (NSS) libraries, which support Mozilla’s
Transport Layer Security (TLS) and other security standards. NSS is
used across Mozilla’s products, including Firefox and Thunderbird.

2.3 Root Store Differences
An X.509 certificate has a unique serial number, included in the
Serial Number field. The number is unique per organization. Ac-
cordingly, a certificate can be uniquely identified (world-wide) by
combining the Issuer field with Serial Number.

We use Venn Diagrams to visualize the degree of overlap be-
tween root stores. Because Android’s and Ubuntu’s root stores are
slight variations of Mozilla’s, we plot two Venn Diagrams: one for
Microsoft, Mozilla, and Apple, and the other for Mozilla, Android
and Ubuntu. Figure 1 shows the two diagrams, drawn on different
scales.

Position Paper: Certificate Root Stores—An Area of Unity or Disparity?

CSET 2022, August 8, 2022, Virtual, CA, USA

To investigate overlaps in trusted organizations, we look at the
organizations that issued the root certificates in each root store.
This also eliminates alternate, expired, or newer versions of the
same root certificate, which would be counted as exclusive in Fig. 1.
Figure 2 contains Venn Diagrams showing organization overlaps
between the root stores. Again, Microsoft dominates over the three
major root stores when it comes to the organizations represented.
Microsoft’s root certificates are issued by 133 different organiza-
tions, 69 of which are exclusively represented on Microsoft’s root
store. Many of these are government organizations. Mozilla’s root
certificates are issued by 55 organizations, two of which are ex-
clusively trusted by Mozilla. Apple once again sits in the middle,
trusting 59 different organizations, none of which are exclusively
trusted by Apple.

2.4 Differences in trust context
The existence of a certificate in a root store does not automatically
mean it would be trusted for all applications—the trust context.
While there is a Key Usage extension in an X.509 standard that
enables the issuer to indicate how the key should be used, this
is different from indicating the trust context. To elaborate, the
standard defines 9 key usage options [3]:

• digitalSignature
• nonRepudiation
• keyEncipherment
• dataEncipherment
• keyAgreement
• keyCertSign
• cRLSign
• encipherOnly
• decipherOnly

A vendor can choose to use a CA certificate only for emails, or only
for web, but this is independent from using the key as specified by
the Key Usage extension in the certificate following the above 9
options. For specifying an application, another X.509 extension can
be used: the Extended Key Usage extension. However, accord-
ing to the standard, “this extension will appear only in end entity
certificates” [3], and so is not typically used for root certificates.

So how do vendors implement trust context for root certificates?
This is vendor-specific. Mozilla7 and Microsoft8 associate Trust
Bits for each certificate. Examples of trust bits include: Server-
Authentication (for website/server/host authentication), Code-
Signing and Secure-Email (for S/MIME email encryption). Even
though both vendors use the same “trust-bits” concept, they have
different such bits. For example, Mozilla has CRL-Signing, but
Microsoft does not. Microsoft’s root store supports a total of 12
trust bits—Mozilla 11. Apple, on the other hand, has 7 options:9
SSL, Secure-Email (S/MIME), Extensible Authentication (EAP),
IPsec, Code Signing, Time Stamping, and X.509 Basic Policy. It is
worth noting that the standard defines six options for the Extended
Key Usage extension.

7https://udn.realityripple.com/docs/NSS/PKCS_11_Netscape_Trust
8https://docs.microsoft.com/en-us/windows/win32/api/certenroll/nn-certenroll-
ix509extensionenhancedkeyusage
9These are not given a specific name; they are listed in the system settings as trust
options given to the user.

Figure 1: Root Certificate Overlap

Microsoft’s root store is the largest. It contains 432 certificates,
247 of which are present only in Microsoft’s root store. Mozilla’s
root store (green) is the smallest of all three, with only 158 certifi-
cates, and has the highest degree of overlap with the other two.
Almost 95% of Mozilla’s trusted certificates are also trusted by one
(or both) of the other two vendors. Mozilla’s root store is almost
fully contained within Microsoft’s with 145 certificates overlap-
ping. It has ten certificates that are neither trusted by Apple nor
Microsoft. Apple’s root store (orange) size sits close to Mozilla’s.. It
has 159 certificates, 7 of which are trusted only by Apple; 94% of
Apple’s root store overlaps with Microsoft’s, but only 78% overlaps
with Mozilla’s. The three sets intersect in 123 certificates, which is
24.5% of their union (503 certificates).

For the overlap between NSS-based root stores, namely Mozilla,
Ubuntu, and Android (the diagram to the right of Fig. 1), An-
droid’s root store (purple) contains about as many certificates as
Mozilla’s. It has 156 certificates, 11 of which are exclusive to An-
droid’s (i.e., only trusted by Android). Mozilla’s root store contains
the second largest number of exclusive certificates: 10. Ubuntu’s
root store has a higher overlap with Mozilla’s. Ubuntu has the
smallest root store—127 certificates, and there are no certificates
exclusively trusted by Ubuntu. The slight differences between the
three sets make it clear that being based on NSS does not necessarily
mean an exact replica. Occasionally, each vendor creates exceptions
for some certificates that it exclusively trusts (or distrusts). Note
that each such occasional exception potentially affects the trust
realm of millions of users world-wide.

Figure 2: Root Organization Overlap

CSET 2022, August 8, 2022, Virtual, CA, USA

Jegan Purushothaman, Ethan Thompson, and AbdelRahman Abdou

A more urgent question is how vendors decide such trust context
for root certificates, since it is not typically specified in such certifi-
cates. Unclear, but the policy is at their discretion. Apple states that
it “uses a number of trust policies to determine whether a certificate
is trusted. Each certificate can have a different policy”.

Figure 3: Server Authentication Trust Bit Overlap (charts on
different scales for clarity).

We noticed that the option of modifying the trust context of a
root certificate is often given to users, including on Ubuntu and
Apple (MacOS). But the default trust context for each certificate
appears to be yet another area of difference across vendors. For
example, comparing Microsoft and Mozilla, Fig. 3 (top) shows the
proportion of root certificates trusted for server authentication on
both vendors. Not all root certificates are trusted for server authen-
tication. To measure the disparity in trust for server authentication,
we create a set of certificates from the intersection of both root
stores, such that each certificate in that set is trusted for server
authentication by either Mozilla or Microsoft or both. The large
Venn Diagram at the bottom of Fig. 3 shows that the intersection
between both sets (certificates trusted for server authentication by
both vendors) is large, but not 100%.

Figure 4 shows trust for secure email, again for Microsoft and
Mozilla. A very large portion of root certificates in Microsoft’s root
store are trusted for secure email. The situation is slightly different
for Mozilla, where only two-thirds of Mozilla’s root certificates are
trusted for that application. In terms of the overlap, 93% Mozilla’s

Figure 4: Secure Email Trust Bit Overlap (charts on different
scales for clarity).

root certificates that were trusted for secure email were also trusted
for secure email by Microsoft. In contrast, 250 certificates were
trusted by Microsoft for secure email but not by Mozilla (though
220 of these are also in Mozilla’s root store).

Summary. The above charts show that root store overlaps is
not enough to show unity between vendors; a certificate that exists
in both root stores may not be trusted for the same applications.

3 CONSEQUENCES OF TRUST DISPARITIES
Do the root-store disparities noted above cause substantial dispari-
ties in trusted leaf certificates across vendors? We use Censys to
approach this question. Censys10 collects certificates using multiple
means, which include relying on CT-logs, and routinely scanning
the IPv4 space. In the process, Censys validates certificate chains.
It starts with the issuers of the certificates it finds, and follows
the chain to determine which root store contains the chain’s root
(i.e., which vendor would trust this certificate). Censys performs
such scans and measurements on regular intervals, and makes the
data available through a powerful search engine and API for secu-
rity professionals and researchers. The search engine has multiple
criteria for fine-tuning queries and filtering results. Currently, Cen-
sys only determines if a leaf certificate is trusted by Apple, Mozilla,
and Microsoft.

10https://censys.io

Position Paper: Certificate Root Stores—An Area of Unity or Disparity?

CSET 2022, August 8, 2022, Virtual, CA, USA

We used the following example search queries to extract the data

we are interested in from Censys’ certificate search:

tags.raw: "leaf" AND tags.raw: "trusted" AND
validation.nss.valid: "true" AND NOT tags.raw: "precert"

This returns currently valid leaf certificates that chain back to
Mozilla’s root store (trusted by Firefox). Likewise, the query:

tags.raw: "leaf" AND tags.raw: "trusted" AND
(validation.nss.valid: "true" AND
validation.microsoft.valid:"false" AND
validation.apple.valid:"false") AND (NOT tags.raw: "precert")

returns currently valid leaf certificates that only chain back to
Mozilla’s root store (only trusted by Firefox).

There are 2.4 million valid (including unexpired) leaf certificates
recorded on Censys as of this writing, a little over around 585 thou-
sand of them are trusted. Almost all certificates are trusted by all
three vendors (Fig. 5), which means the stark root-store disparities
discussed in the previous section diminish in leaf certificates. This
is likely because CAs’ popularity is not uniform (a small number of
CAs is responsible for the majority of certificates issued worldwide).
Because the overlap in trusted leaf certificates is significant, the
three sets in the Venn Diagram of Fig. 5 appear as a single set. We
thus show the number of exclusively-trusted leaf certificates by
vendor in Table 1.

Table 1: Trusted certificates reported by Censys.

Total certs trusted
Exclusively trusted

Apple Microsoft Mozilla
584,854
585,595
585,567
0
26
1

4 GOVERNMENT CERTIFICATES
Counting the number of government-issued root certificates, we
find that Microsoft has 61, Apple has 11, NSS-based stores have 7,
and Mozilla has 9. The overlap of such certificates between vendors
is shown in Fig. 6, and of government organizations in Fig. 7. Note
that even though Mozilla appears to have some exclusively-trusted
government certificates in Fig. 6, these are issued by governments
that are trusted by the other vendors (notice how Mozilla’s set is
fully enclosed within the others in Fig. 7). We found that 49 of the
61 government root certificates in Microsoft’s store are exclusively
trusted by Microsoft. Such certificates belong to the governments of
Brazil, France, India, South Africa, Saudi Arabia, Uruguay, among
others. We also found that Microsoft is the only vendor that trusts
the U.S. government, but no government was found to be exclusively
trusted by Mozilla, Apple, and the other NSS-based vendors. All
root stores do contain certificates issued by the governments of
Hong Kong, Spain, the Netherlands, and Turkey.

The above data accounts for certificates that have the words
Government, National, Federal, GRCA,11 and a government name
in the subject field of the certificate. We manually verified that
all resultant certificates do belong to governments. However, it is
possible that we missed other government-controlled certificates.
The are two reasons for that.

First, even if a certificate is not directly issued by a govern-
ment, the issuing organization could be partially owned by the
government. For example, Deutsche Telekom is ∼32% owned by
the German government, and has at least two root certificates in
all root stores.12 This is not counted in Fig. 7.

Figure 5: Leaf certificate overlap (ref: Censys)

Upon investigating the 1 leaf certificate exclusively trusted by
Apple, we found that it is a Developer ID certificate issued by Apple
for code signing purposes. Unsurprisingly, Microsoft has the largest
number of exclusively trusted leaf certificates (26). The issuers are
largely among the 69 organizations that are uniquely represented
on the Microsoft root store.

Figure 6: Government certificates in root stores.

Second, certificate cross-signing leads to the indirect expansion
of trust. However, CT-logs can alleviate this concern. Hiller et al. [5]
highlight that certificates signed by the US government’s Federal
PKI (FPKI) organizations were being trusted on Mozilla products
despite the absence of FPKI certificates from Mozilla’s root store.
Data on government certificates in root stores alone is thus inad-
equate to identify the full extent of trusted governments, and the
impact of cross-signatures on expanding the trust of government
roots requires further investigation.

For the above two reasons, the numbers on government root
certificates we report herein reflect a lower bound on the extent of
government control over the vendors’ root stores.

11Stands for Government Root Certification Authority.
12https://wiki.mozilla.org/CA:GovernmentCAs

CSET 2022, August 8, 2022, Virtual, CA, USA

Jegan Purushothaman, Ethan Thompson, and AbdelRahman Abdou

Finally, it is worth noting that root stores evolve rapidly. Over
the course of our data collection and analysis (few months), some
root stores did get updated. Unfortunately, disparities in all the as-
pects we shed light on remain in place: inclusion policies, delivery
methods, root certificates, trust context, and trusted government
organizations. We hope this position paper musters wider involve-
ment from the community in discussing the path forward to allow
for greater transparency about vetting practices, and wider com-
munity involvement in trust-related decision making.

REFERENCES
[1] Laurent Chuat, AbdelRahman Abdou, Ralf Sasse, Christoph Sprenger, David
Basin, and Adrian Perrig. 2020. SoK: Delegation and Revocation, the Missing
Links in the Web’s Chain of Trust. In IEEE European Symposium on Security and
Privacy (EuroS&P).

[2] David Clark and KC Claffy. 2021. Trust Zones: A Path to a More Secure Internet

Infrastructure. Journal of Information Policy 11, 1 (2021), 26–62.

[3] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W. Polk. 2008.
Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation
List (CRL) Profile. RFC 5280 (Proposed Standard). http://www.ietf.org/rfc/
rfc5280.txt Updated by RFC 6818.

[4] Tariq Fadai, Sebastian Schrittwieser, Peter Kieseberg, and Martin Mulazzani. 2015.
Trust me, I’m a Root CA! Analyzing SSL Root CAs in Modern Browsers and
Operating Systems. In IEEE International Conference on Availability, Reliability
and Security.

[5] Jens Hiller, Johanna Amann, and Oliver Hohlfeld. 2020. The Boon and Bane of
Cross-Signing: Shedding Light on a Common Practice in Public Key Infrastruc-
tures. In ACM conference on Computer and Communications Security (CCS).
[6] Ali Jahromi and AbdelRahman Abdou. 2021. Comparative Analysis of DoT and
HTTPS Certificate Ecosystems. In NDSS Measurements, Attacks, and Defenses for
the Web (MADWeb) Workshop.

[7] Nikita Korzhitskii and Niklas Carlsson. 2020. Characterizing the root landscape of
Certificate Transparency logs. In IEEE IFIP Networking Conference (Networking).
[8] Zane Ma, James Austgen, Joshua Mason, Zakir Durumeric, and Michael Bailey.
2021. Tracing Your Roots: Exploring the TLS Trust Anchor Ecosystem. In ACM
Internet Measurement Conference (IMC).

[9] Henning Perl, Sascha Fahl, and Matthew Smith. 2014. You won’t be needing
these any more: On removing unused certificates from trust stores. In Financial
Cryptography and Data Security. Springer.

[10] Ram Sundara Raman, Leonid Evdokimov, Eric Wurstrow, J Alex Halderman, and
Roya Ensafi. 2020. Investigating Large Scale HTTPS Interception in Kazakhstan.
In ACM Internet Measurement Conference (IMC).

[11] Paul C van Oorschot. 2020. Computer Security and the Internet: Tools and Jewels.

Springer.

[12] Zack Whittaker. 2019. Mozilla blocks spy firm DarkMatter from Firefox citing
’significant risk’ to users. https://techcrunch.com/2019/07/09/darkmatter-firefox-
certificates/

[13] Kathleen Wilson. 2016. Distrusting New WoSign and StartCom Certifi-
https://blog.mozilla.org/security/2016/10/24/distrusting-new-wosign-

cates.
and-startcom-certificates/

[14] Yiming Zhang, Baojun Liu, Chaoyi Lu, Zhou Li, Haixin Duan, Jiachen Li, and
Zaifeng Zhang. 2021. Rusted Anchors: A National Client-Side View of Hid-
den Root CAs in the Web PKI Ecosystem. In ACM conference on Computer and
Communications Security (CCS).

Figure 7: Governments trusted by vendors.

5 CLOSING REMARKS
We find that the overwhelming majority of leaf certificates extracted
from Censys are trusted by all vendors. However, we argue that the
disparities across vendors’ root stores remain concerning. While
some degree of root-store differences is expected because vendors
and device manufacturers use their own certificates to support their
platforms (e.g., code signing for software updates, including browser
extensions and smartphone apps), the differences we noticed are
much deeper than their exclusively-trusted certificates. What are
the consequences of Microsoft choosing to trust that many govern-
ment organizations, which others have not? How does a user access
the services of one of these governments using another browser
where said government has no root certificate? The disparities go
beyond the root certificates themselves; the lack of transparency of
some vendors, and the lack of unity in root-store inclusion policies
result in disproportionate susceptibility to trust-abuse.

In our personal view, government certificates in root stores are
dangerous, and hardly justifiable. We believe that a government or-
ganization should simply request a certificate for its domains from
a trusted CA, just like any organization. The issuing CA has no
control over the private key of the entity requesting the certificate.
Governments around the world attempt to spy on citizens time
and again through TLS interceptions and ISP coercions. (In 2019,
the government of Kazakhstan forced users to install government-
owned root certificates [10].) While a non-government-owned CA
can still be subjected to coercion to act in the government’s in-
terest [2] (e.g., Dark Matter [12] and StartCom [13]), we believe it
still raises the bar because a CA typically undergoes trust-approval
tracks that often include gaining popularity, building reputation,
complying with audits, and committing to various forms of corpo-
rate transparency.

Research focus on root stores started to pick-up momentum re-
cently. Ma et al. [8] analyzed several root stores and their inclusion
policies, focusing more on root-store changes over time (a longi-
tudinal view). The authors also identified questionable practices
in root store management, such as unjustified trust of controver-
sial CAs/organizations. Korzhitskii et al. [7] looked at the list of
root CAs allowed to append certificates to CT logs (CT root stores).
Zhang et al. [14] investigated root stores from a large number of vol-
unteering users, and compared them with the expected root stores
that they should have on their systems. Such increased attention
from the research community is promising.

