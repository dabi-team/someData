Dynamic Information Flow Tracking for Detection of Advanced
Persistent Threats: A Stochastic Game Approach

Shana Moothedath, Dinuka Sahabandu, Joey Allen, Andrew Clark, Member, IEEE,

Linda Bushnell, Fellow, IEEE, Wenke Lee, Fellow, IEEE and Radha Poovendran, Fellow, IEEE

1
2
0
2

n
u
J

5
2

]
T
G
.
s
c
[

2
v
7
2
3
2
1
.
6
0
0
2
:
v
i
X
r
a

Abstract—Advanced Persistent Threats (APTs) are stealthy at-
tacks by intelligent adversaries. This paper studies the detection
of APTs that inﬁltrate cyber systems and compromise speciﬁcally
targeted data and/or infrastructures. Dynamic information ﬂow
tracking is an information trace-based detection mechanism
against APTs that tags suspicious information ﬂows in the system
and performs security analysis for unauthorized use of tagged
data. In this paper, we develop an analytical model for resource-
efﬁcient detection of APTs using an information ﬂow tracking
game. The game is a nonzero-sum, turn-based, stochastic game
with asymmetric information as the defender cannot distinguish
whether an incoming ﬂow is malicious or benign. The payoff
functions of the game capture the cost for performing security
analysis and the rewards and penalties received by the players.
We analyze equilibrium of the game and prove that a Nash
equilibrium is given by a solution to the minimum capacity
cut set problem on a ﬂow-network derived from the system.
The edge capacities of the ﬂow-network are obtained from
the cost of performing security analysis. Finally, we implement
our algorithm on a real-world dataset for a data exﬁltration
attack augmented with false-negative and false-positive rates and
compute an optimal defender strategy.

Index Terms—Advanced Persistent Threats (APTs), Informa-

tion ﬂow tracking, Stochastic games, Minimum-cut problem

I. INTRODUCTION

An advanced persistent threat (APT) is a prolonged and
targeted cyber attack in which an intruder gains illicit access
to a system and remains undetected for an extended period
of time. The intention of an APT is to monitor system
activity and continuously mine highly sensitive data rather
than causing damage to the system or organization. APT
attacks consist of multiple stages that are initiated by an
initial compromise and reconnaissance stage to establish a
foothold in the system. Attackers then progress through the
system, exploring and planning an attack strategy to obtain
the desired data. This is followed by exﬁltration of sensitive
data, which is continued over a long period of time. Defending
against APTs is a challenging task since APTs are speciﬁcally
designed to evade conventional security mechanisms such as
ﬁrewalls, anti-virus software and intrusion-detection systems
that rely on signatures and can, therefore, guard only against

S. Moothedath, D. Sahabandu, L. Bushnell, and R. Poovendran are
with the Department of Electrical and Computer Engineering, University
of Washington, Seattle, WA 98195, USA. {sm15, sdinuka, lb2,
rp3}@uw.edu.

J. Allen and W. Lee are with the College of Computing, Georgia Institute
of Technology, Atlanta, GA 30332 USA. jallen309@gatech.edu,
wenke@cc.gatech.edu.

A. Clark is with the Department of Electrical and Computer En-
gineering, Worcester Polytechnic Institute, Worcester, MA 01609 USA.
aclark@wpi.edu.

known threats. However, APTs introduce information ﬂows in
the form of data-ﬂow commands and control-ﬂow commands
while interacting with the system and these are continuously
recorded in the log ﬁle of the system.

After an APT attack, when the consequences of the attack
has been identiﬁed, a forensic investigation is conducted using
the data from the log ﬁles. The purpose of this postmortem
investigation is to understand the incident’s root cause, and
construct appropriate defense strategies against such APTs and
its variants [1]. During the forensic analysis, the system log
data is analyzed in an ofﬂine setting.

Dynamic Information Flow Tracking (DIFT) [2] is a widely
used detection mechanism for ofﬂine analysis of APT. DIFT
uses the information traces recorded in the system log for
performing the security analysis [1]. The key idea behind
DIFT is that it tags all suspicious input/data channels and
tracks the propagation of the tagged information ﬂows through
the system. DIFT generates security analysis using a pre-
speciﬁed set of heuristic security rules whenever it observes
an unauthorized use of tagged data. These heuristic rules are
typically deﬁned by practicing experts based on the histori-
cal attack knowledge and knowledge about nominal system
behavior [1].

Although, security rules incorporated in the DIFT mecha-
nism cover a wide range of attacks, these security rules may
not be capable of verifying the authenticity of information
ﬂows against all possible attacks, resulting in the generation
of false-negatives and false-positives. Incorrectly identifying
a benign (nominal user) ﬂow as malicious is a false-positive
(FP) and failing to identify a malicious (adversarial) ﬂow is a
false-negative (FN). For instance, while the security rules for
buffer overﬂow protection [3] can be veriﬁed accurately, the
security rules for web application vulnerabilities [4] cannot
be accurately veriﬁed. Consequently, attacks that exploit web
application may lead to incorrect conclusions by DIFT thereby
generating FPs and FNs.

Additionally, limited availability of resources for defense
along with the performance and memory overhead imposed
by the defense mechanism on the system demands a resource-
efﬁcient detection technique. An analytical model of DIFT
that captures the cost for performing security analysis and
the effectiveness of ﬂow-tagging mechanisms will facilitate
the trade-off between the effectiveness of defense and the
resource efﬁciency. Further, such a model would enable the
design of optimal security strategies while taking into account
the generation of FP and FN.

In this paper, we provide an analytical model to enable
DIFT to optimally select locations in the system to perform

 
 
 
 
 
 
security analysis so as to maximize the probability of detection
while minimizing the cost of detection. Our framework is
based on the following insights. First, although both APT
and DIFT are unaware of the other player’s strategy,
the
effectiveness of the DIFT depends on the APT’s strategy and
the APT’s probability of evading detection depends on the
DIFT’s strategy. This strategic interaction motivates a game-
theoretic approach. Second, the efﬁciency of detection also
depends on the effectiveness of performing security analysis
at different locations in the system, and hence is determined
by rates of FP and FN. Third, the game unfolds at multiple
states between the entry points and the exit points of the
attack where each state corresponds to the position of the
tagged ﬂows in the system. At each state, the defender decides
whether to analyze a tagged ﬂow and which one of the
tagged ﬂows to analyze (to avoid generation of FP and FN)
while the adversary decides which process to transition to,
at the cost of spending the defense resources. We formulate
a stochastic game model that is played on an information
ﬂow graph (IFG). An IFG is a directed graph that expresses
the history of a system’s execution in terms of the spatio-
temporal relationships between processes and subjects. The
contributions of this paper are the following.

• We model the interaction of APT and DIFT as a nonzero-
sum, two-player, turn-based stochastic game (G) with
ﬁnite state and action spaces. In the APT vs. DIFT game,
the state of the game is the nodes of the IFG at which the
tagged ﬂows arrive. The location of the tagged ﬂows is
known to both players (APT and DIFT), and this makes
the state of the game observable. However, each player
is unaware of the other player’s strategy. Also, before
performing security analysis, DIFT cannot distinguish
malicious and benign ﬂows. This results in an asymmetric
information structure.

• We analyze Nash equilibrium (NE) strategy of the game
and show that an NE can be obtained from a solution to
the minimum capacity cut-set problem on a ﬂow-network
constructed from the IFG of the system.

• We implement our algorithms and results on real-world
data obtained for a data exﬁltration attack using the
Reﬁnable Attack INvestigation (RAIN) system [1] aug-
mented with FN and FP rates of the system.

The rest of the paper is organized as follows. Section II
presents related work. Section III introduces preliminary con-
cepts on information ﬂow graph, APT attack, and a descrip-
tion of DIFT-based defense mechanism. Section IV describes
the formulation of the turn-based stochastic game model.
Section V gives the solution concept of the game and the
equilibrium analysis results for computing optimal strategies
of the players. Section VI illustrates the numerical results
using data exﬁltration attack data set collected using RAIN
and augmented with FN and FP rates. Section VII concludes
the paper.

II. RELATED WORK

Stochastic games model

interactions of multiple agents
that jointly control the evolution of states of a stochastic

dynamical system [5]. Stochastic games have been widely
used to model security games [6], economic games [7], and
resilience of cyber-physical systems [8], where each player
tries to maximize its individual payoff. A brief overview of
the existing results in stochastic games is given in [9].

Stochastic games have been used to address system security
related problems. The interaction between malicious attackers
and the intrusion detection system (IDS) is modeled using
a stochastic game in [10]. A nonzero-sum stochastic game
model is given in [11] to model network security conﬁguration
problem in distributed IDS. Then a value iteration based algo-
rithm is proposed in [11] to ﬁnd an ε-NE for an attacker model
where multiple adversaries simultaneously attack a network.
A zero-sum stochastic game is formulated in [12] for IDS in
a communication or computer network with interdependent
nodes and correlated security assets and vulnerabilities. Note
that, [13] considered a ﬁnite-horizon game and [10]-[12] dealt
with zero-sum stochastic games for IDS.

Game-theoretic models for resource-efﬁcient detection of
APTs are given in [14], [15], [16], and [17]. DIFT models
with ﬁxed trapping nodes are introduced and analyzed in
[14], [15]. Paper [16] extended the models in [14], [15] by
considering a DIFT model which selects the trapping nodes
in a dynamic manner rather than being ﬁxed and proposed a
min-cut based solution approach. Reference [17] considered
the detection of APTs when the attack consists of multiple
attackers possibly with different capabilities and analyzed the
best responses of the players. Note that, the focus in [14], [15],
and [16] is resource-efﬁcient detection of APTs and they do
not consider the false-positives and false-negatives generated
in the system. In other words, the game models in [14]-[17]
assume that security analysis performed by DIFT can verify
the authenticity of tagged information ﬂows accurately.

A stochastic game model for detecting APTs was recently
introduced in the conference version of this work [18]. The
proposed method in [18] analyzed a discounted stochastic
game and presented a value iteration based algorithm to obtain
an ε-NE of the discounted game. Due to the discounted nature
of the payoff, the Nash equilibrium analysis of the game in
[18] reduces to a nonlinear program (NLP). Solving an NLP is
computationally challenging and the convergence of the algo-
rithm in [18] is not guaranteed. This necessitates an alternate
solution approach for solving the DIFT vs. APT game. In this
paper, we solve an average reward (undiscounted) stochastic
game and present a min-cut based approach with guaranteed
convergence to compute optimal defense strategies.

In this paper we consider that the trapping nodes are gener-
ated dynamically and we extend our previous results on min-
cut analysis in [16] in the following aspects. (i) Since there can
be a wide range of possible APT attacks, we recognize that
the security rules of DIFT may not be capable of verifying
the authenticity of the information ﬂows accurately thereby
resulting in the generation of FP and FN. Consequently,
the game model in this paper is stochastic unlike in [16].
(ii) We introduce a model with multiple information ﬂows
out of which one is malicious and the remaining are benign
unlike in [16] which dealt with one information ﬂow. Note
that, while DIFT knows there is exactly one malicious ﬂow

in the system, it is unaware which ﬂow is the malicious
ﬂow before performing security analysis. This results in an
asymmetric information between players and hence the game
is imperfect information game. (iii) In the current game model,
although an information ﬂow is concluded as benign at an
initial inspection, it can be inspected again later during its
propagation. The model in [16] inspects the ﬂow exactly once
as FN and FP rates are assumed to be zero. However, DIFT
may analyze a ﬂow multiple times and this will result in
added resource cost. The game model considered in this paper
captures the added resource cost incurred from reevaluation of
the ﬂows.

III. PRELIMINARIES

In this section, we ﬁrst describe the graphical representation
of the system, denoted as the information ﬂow graph, and then
present the models of the attacker and the ﬂow tracking-based
defense.

A. Information Flow Graph (IFG)

Let G = (VG , EG ) represent the IFG of the system. VG =
{v1, . . . , vN} consists of the processes (e.g., an instance of
a computer program), ﬁles, and objects in the system and
EG ⊆ VG × VG represents the information ﬂows (directed) in
the system from one node to the other. IFG-based auditing is
heavily desired by large enterprises and government agencies
to detect APTs. We perform our game-theoretic analysis on
the IFG of the system and use DIFT as the defense mechanism
to detect APTs.

B. Attack Model: Advanced Persistent Threats (APTs)

APTs are intelligent attacks with speciﬁc targets. APTs are
stealthy attacks that perform data exﬁltration at an ultra-low-
rate to avoid detection. Unlike classical malware, APT cam-
paigns tend to involve multiple hosts, multiple systems, and
extend over a long period of time, up to several months [19].
APTs are characterized by their abilities to render existing
security mechanisms ineffective. APTs can evade security pro-
tection because existing mechanisms lack sufﬁcient visibility
into user, program, and operating system activities to ascertain
the authenticity of an activity and the provenance of its data.
The timeline and key stages of the APT lifecycle is described
below and presented in Figure 1.

1. Reconnaissance: During the reconnaissance phase, the
attacker will try to gain information about the system,
such as what nodes are accessible on the system and the
security defenses that are being used.

2. Initial Compromise: During the initial compromise stage,
the attacker’s goal is to gain access to an enterprise’s
network. In most cases, the attacker achieves this by
exploiting a vulnerability or a social engineering trick,
such as a phishing email.

3. Foothold Establishment: Once the attacker has completed
the initial compromise,
it will establish a persistent
presence by opening up a communication channel with
their Command & Control (C&C) server.

4. Lateral Movement: The attacker will increase its control
of the system by moving laterally to new nodes in the
system.

5. Target Attainment: Next, the attacker will try and escalate
its privileges which may be necessary in order to access
sensitive information, such as a proprietary source code
or customer information.

6. Attack Completion: The ﬁnal goal of the attacker is to
deconstruct the attack, hopefully in a way to minimize
its footprint in order to evade detection. For example,
attackers may rely on deleting the system’s log.

Figure 1: Schematic diagram of an APT attack timeline.

Let the set of possible entry points of the APT be denoted
as λ ⊂ VG . During an attack, the goal of the APT is to capture
a subset of nodes of the IFG referred to as destinations and
denoted as D ⊂ VG . Here, λ ∩ D = /0. Once a foothold is
established in the system, APT tries to elevate the privileges
and proceeds to the destinations through more internal com-
promises and performs data exﬁltration at an ultra-low-rate.
In order to achieve this the APT performs operations in the
system to transition through the nodes in VG and arrive at
some node in D. In other words, the adversary (APT) selects
paths in the IFG and performs transitions along the paths to
reach the set D from the set λ .

The adversary in the DIFT vs. APT game has the following
properties. We consider an APT attack that generates a single
malicious information ﬂow. The malicious ﬂow originates at
an entry point of the attack and the objective of the ﬂow is to
reach a destination. The state of the game is the set of nodes
of the information ﬂow graph at which the tagged ﬂows arrive.
APT observes the tagged ﬂows and hence the state of the game
is observable to APT. However, APT is unaware of the actions
and the strategy of DIFT. Thus the information structure of
APT is asymmetric with respect to that of the defender.

C. Defender Model: Dynamic Information Flow Tracking
(DIFT)

The objective of the defender is to prevent any adversarial
information ﬂow traversing to the destination nodes. DIFT
is a dynamic taint analysis based detection mechanism that
consists of three main components: (i) tag sources, (ii) tag
propagation rules, and (iii) trapping nodes. Trapping nodes
are processes and objects (ﬁles and network endpoints) in the
system that are considered as suspicious sources of informa-
tion by the system. All data originating from a tag source is

labeled or tagged and DIFT tracks the propagation of a tagged
data through the system. Propagation of a tagged information
ﬂow through the system results in tagging of more information
ﬂows based on the tag propagation rules speciﬁed by the DIFT
[20]. Tag propagation rules are deﬁned based on two kinds of
information ﬂows in the system: explicit information ﬂows
and implicit information ﬂows [21].

During the execution of a program in the system, DIFT
keeps track of the tagged information ﬂows and generates
trapping nodes for any unauthorized use of tagged data that
indicate a possible attack. DIFT invokes security analysis
at the trapping nodes using the speciﬁed security rules to
verify the authenticity of the tagged ﬂow thereby concluding
whether there is an attack or not. These security rules are pre-
speciﬁed depending on the application running on the system
[3]. Note that tagged (suspicious) ﬂows consist of both benign
and malicious ﬂows. As the speciﬁed security rules may not
necessarily cover all possible attacks by APTs, DIFT generates
false-positives and false-negatives. An optimal selection of
trapping nodes in the IFG is hence critical to detect a wide
range of attacks in the system with minimum false-positives
and false-negatives. Note that while tag sources and tag
propagation rules are known to the attacker,
the trapping
nodes are dynamically generated during the operation of the
system and hence is unknown to the attacker. Figure 2 shows
a schematic diagram of the DIFT-based detection framework
considered in this paper.

Figure 2: Schematic diagram of the DIFT detection framework. The
nodes in the ﬁgure denote system components such as processes,
ﬁles, and subjects.

The defender in the DIFT vs. APT game has the following
properties. The state of the game, which is the nodes of the
information ﬂow graph at which the tagged ﬂows arrive, is
known to DIFT. Thus DIFT observes the state of the game.
However, DIFT cannot distinguish a malicious and a benign
ﬂow before performing security analysis. Also, while DIFT
knows that there is an APT in the system, DIFT is unaware
of the actions and the strategy of APT.

IV. TURN-BASED APT VS. DIFT GAME G

In this section, we model the interaction of the APT with
the system during the different stages of the attack as a
dynamic stochastic game between the defender (DIFT) and
the adversary (APT). Let PD be the defender player and PA be

the adversarial player. We consider a nonzero-sum turn-based
game. The information structure of the players is asymmetric
as the defender player does not know if a tagged (suspicious)
ﬂow is malicious or benign while the adversarial player knows
this information. The game G = {S, s0, Σ , ∆ , P} unfolds on a
ﬁnite state space, S, with initial state, s0, ﬁnite action space of
players, Σ , labeled transitions ∆ ⊆ S × Σ × S, and transition
probability matrix P.

A. State Space

We consider a turn-based game with the state of the game
at time t ∈ {0, 1, 2, . . .} denoted by the random variable st . Let
T denote the time horizon of the game, i.e., the game ends
at time T and st(cid:48) = sT , for all t(cid:48) (cid:62) T . The state space S is
partitioned into two sets, SA and SD, such that SA ∩ SD = /0 and
SA ∪ SD = S. The states that belong to the set SA are referred
to as the adversary-controlled states and the states in SD are
referred to as the defender-controlled states. Speciﬁcally, Sx
is the subset of states at which player Px, where x ∈ {A, D},
controls the transitions. The state of the game at time t is
the state of the system which corresponds to the position of
the tagged (suspicious) ﬂows at time t. Let W be the number
of tagged ﬂows that arrive into the system at time t = 1. In
practice (from the analysis of log data), only a small fraction
of nodes in the system receive a system call at the same time.
Hence in our model we assume that W << N. We denote the
state of the game at time t using the location of the W ﬂows
in the system and one additional bit which represents whether
that state belong to SA or SD.
t,

st = (x, vi1, . . . , viW ), where
{vi1, . . . , viW } ∈ VG ∪{φ , τ} and x ∈ {A, D}. Here, x = A implies
that st ∈ SA and x = D implies that st ∈ SD. Moreover, vik = φ
if the kth information ﬂow drops out, and vik = τ if the kth
information ﬂow is trapped by DIFT. At time t (cid:62) 1, the state
of the game is st = (x, vi1, . . . , viW ), where x ∈ {A, D} and
{vi1, . . . , viW } ∈ VG ∪ {φ , τ}. Note that, out of the W ﬂows one
is a malicious ﬂow and the remaining (W − 1) are benign
ﬂows. For notational convenience we consider the ﬁrst ﬂow is
malicious (note that, defender does not have this information).
While DIFT observes all the W ﬂows, it cannot distinguish
malicious and benign ﬂows. APT, on the other hand, knows
which ﬂow is the malicious ﬂow. Thus in the DIFT vs. APT
game, APT and DIFT have asymmetric information.

Speciﬁcally,

time

at

Also, corresponding to a state st if vik = φ , for some k ∈
{1, . . . ,W }, then for all time t(cid:48) > t the state corresponding to
the kth ﬂow remains φ , i.e., if a ﬂow is dropped at time t it
remains dropped through out the rest of the game.

B. Action Spaces

We ﬁrst construct a directed ﬂow-network F = (VF , EF )
from the IFG G by introducing a source node sF with an
outgoing edge to all the entry points and a sink node tF with
an incoming edge from all the destination nodes. Here VF =
VG ∪ {sF ,tF } and EF = EG ∪ {sF × λ } ∪ {D × tF }.

Deﬁnition IV.1. An attack path in the ﬂow-network F is a
simple directed path1 from sF to tF . The set of attack paths in
F is denoted as ΩD.

security analysis on an information ﬂow and also concluded it
as malicious, i.e., a ﬂow is trapped, and case (iii) corresponds
to all W ﬂows dropping out.

The objective of the APT attack is to capture a destination
node in set D. To achieve the same, APT chooses transitions
along a path from the set λ to the set D which translates
into an attack path in the ﬂow-network F . Since APT is a
stealthy attack, APT performs minimum amount of activities
in the system in order to avoid detection. Thus, there are no
cycles in the transition path of the APT through the IFG. We
also note that, any IFG with set of cycles can be converted
into an acyclic IFG without losing any causal relationships
between the components given in the original IFG. One such
dependency preserving conversion is node versioning given in
[22]. Hence all ω ∈ ΩD are simple directed paths.

Using the construction of the ﬂow-network, we denote
the initial state of the game at t = 0 is denoted as s0 =
(A, sF , . . . , sF ), since at t = 0 all ﬂows originate at the source
node sF . At a state st , either PD or PA chooses an action from
their respective action sets denoted by AD and AA, depending
on whether st ∈ SD or st ∈ SA. If st ∈ SA, the adversary decides
whether to quit the attack by dropping the information ﬂow
or to continue the attack. If the adversary decides not to
quit the attack, then it selects which neighboring node of the
IFG to transition from the current node so as to reach set
D. In other words, the adversary either drops the malicious
ﬂow or performs a transition along a path in ΩD and hence
AA := {φ } ∪ VG . Speciﬁcally, at state st = (A, vi1, . . . , viW ),
where vi1 ∈ VG and vi1 /∈ D, AA(st ) ∈ {φ } ∪ N (vi1), where
N (vi1) = {v j ∈ VG : (vi1, v j) ∈ EG }. On the other hand, if
st ∈ SD, the action of the defender is to decide whether to
perform security analysis on an information ﬂow or not. If
the defender chooses to perform security analysis, it also
selects a ﬂow to analyze. A node at which security analysis
is performed is referred to as a trapping node. Consider a
state st = (D, vi1, . . . , viW ) and let defender decides to perform
security analysis on the ﬂow at vi1. Then vi1 is chosen as a
trapping node. Thus, AD := {0} ∪VG , where 0 represents not
analyzing any ﬂow. The defender performs security analysis
on at most one ﬂow in a state as there is only malicious
ﬂow and also it is not possible to perform analysis on the
information ﬂows at the entry points of the attack, λ . Thus
at state st = (D, vi1, . . . , viW ), AD(st ) ∈ {0} ∪ {vik : vik /∈ λ , k ∈
{1, . . . ,W }}. We also note that the information ﬂow chosen
by the DIFT to perform security analysis can be either the
malicious ﬂow or a benign ﬂow.

A state st

is said to be an absorbing state if the game
terminates at st and the action sets of the players are empty,
i.e., AA(st ) = AD(st ) = /0. In G a state st = (x, vi1, . . . , viW ),
where x ∈ {A, D}, is absorbing if one of the three cases hold:
(i) vi1 ∈ D ⊂ VG ,
(ii) vik = τ for some k ∈ {1, . . . ,W },
(iii vik = φ for all k ∈ {1, . . . ,W }.

Case (i) corresponds to adversary reaching a destination,
case (ii) corresponds to the case where DIFT performed

1A directed path is said to be a simple directed path if there are no cycles

or loops in the path.

C. State Transitions

Deﬁnition IV.2. Time t is said to be the termination time
of the game G if it satisﬁes one of the following condition:
(a) t = T and (b) the state of the game st = (x, vi1, . . . , viW ),
where x ∈ {A, D}, is an absorbing state.

We use the notation W to denote the number of tagged
information ﬂows that are recorded at the ﬁrst instant of time,
i.e., t = 1. The log recording system (RAIN) used in our
work uses the system call in [23] to create a timestamp for
each audit log. At every instant of the log recording, RAIN
records at most one system call for each system component
(processes, ﬁles). As a result, the W information ﬂows arrive
at distinct nodes of the information ﬂow graph as it is not
the
possible for multiple ﬂows to arrive at one node at
same instant of time. Let the state of the game at t = 1
be st = (D, vi1, . . . , viW ). Here {vi1, . . . , viW } are the nodes of
the IFG at which the ﬂows arrive. The DIFT-based defense
mechanism observes the ﬂows. The player PD now chooses
an action from the set AD(st ) ∈ {0, vi1, . . . , viW }. At state st ,
there are three possibilities: (1) PD does not analyze any ﬂow,
(2) PD analyze the malicious ﬂow, and (3) PD analyze a
benign ﬂow. Based on the action chosen by PD, i.e., AD(st ),
the next possible state of the game st+1 is deﬁned. At st+1 PA
has two possibilities to choose from: (a) to quit the ﬂow, φ
and (b) to transition to an out-neighbor of node vi1, N (vi1 ),
i.e., AA(st+1) ∈ {φ } ∪ N (vi1). Based on the action of PA and
the distribution of the benign ﬂows in the system, the next
state st+2 is arrived. At t + 2, PD again chooses its action
and the game continues in a turn-based fashion. Note that the
DIFT will analyze only one information ﬂow at a time t as
we consider a single malicious ﬂow in the system.

For case (1) the action of PD is AD(st ) = 0, i.e., DIFT does
not perform security analysis on any of the W information
ﬂows. Then the next state of the game st+1 = (A, vi1, . . . , viW ).
For case (2), PD chooses action AD(st ) = vi1 and the next
state of the game is st+1 = (A, vi1, . . . , viW ) with probability
FN and st+1 = (A, τ, vi2, . . . , viW ) with probability 1 − FN.
the player PD chooses action AD(st ) = vik ,
For case (3),
k (cid:54)= 1, i.e., k ∈ {2, . . . ,W }. Then the next state of the game
is st+1 = (A, vi1, . . . , vik−1, τ, vik+1, . . . , viW ) with probability FP
and st+1 = (A, vi1, . . . , viW ) with probability 1 − FP. Here, FN
and FP are the rate of false-negatives and false-positives in
the DIFT-architecture which are empirically computed. The
values of FP and FN depend on the security rules and vary
across the different DIFT-architectures and they determine the
transition probabilities P of the stochastic game. In order to
reduce false-positives and false-negatives in the system, the
security rules must be capable of identifying the behavior
and predicting the intend of information ﬂows, i.e., determine
whether an unknown ﬂow is indeed malicious, or whether it
is benign ﬂow that is exhibiting malware-like behavior [24].
If t +1 is not a terminating time instant, then the adversarial
player PA chooses action AA(st+1) ∈ {φ } ∪ N (vi1). The

remaining W − 1 ﬂows follow the benign ﬂow distribution in
the system, which is computed empirically from the nominal
system operation and known. Let πB : vi ∈ VG → [0, 1]|N (vi)|+1
denote the benign ﬂow distribution. If the action of PA is φ ,
then st+2 = (D, φ , v j2, . . . , v jW ), where v j2, . . . , v jW depend on
the distribution πB. Here {v j2, . . . , v jW } ∈ {φ }∪VG . Note that a
benign ﬂow can also drop out. Now PD chooses its action and
the game continues. To summarize, given st = (D, vi1, . . . , viW )
(w.p stands for with probability), state transitions and the
corresponding transition probabilities, given by P, are

st+1 =






(A, vi1 , . . . , viW ),
(A, vi1 , . . . , viW ),
(A, τ, . . . , viW ),
(A, vi1 , . . . , viW ),
(A, vi1 , . . . , τ, . . . , viW ),w.p FP,

if AD(st ) = 0,
w.p 1,
if AD(st ) = vi1 ,
w.p FN,
w.p 1 − FN, if AD(st ) = vi1 ,
w.p 1 − FP, if AD(st ) = vik , k (cid:54)= 1
if AD(st ) = vik , k (cid:54)= 1.
(1)

and

(cid:40)

st+2 =

(D, v j1 , . . . , v jW ),
(D, φ , v j2 , . . . , v jW ),

if AA(st+1) ∈ N (vi1 ),
if AA(st+1) = φ .

(2)

D. Strategies of the Players

A strategy is a rule that each player uses to select actions
at every step of the game. We consider mixed (stochastic) and
behavioral player strategies. Since the strategy is mixed, at
a state, PD and PA select an action from the action set AD
and AA, respectively, based on some probability distribution.
Further, since the strategy is behavioral, the probability dis-
tribution on the action set at a time instant t depends on all
the states traversed by the game and the actions taken by the
players until time t.

Let dt , at be the action of the defender and the attacker,
respectively, at time t. We denote the information available to
the players PD and PA at time t (cid:54) T by Yt and Zt , respectively.
Then

Yt
Zt

:= {s0, d0, s1, d1, . . . , st−1, dt−1, st },
:= {s0, a0, s1, a1, . . . , st−1, at−1, st }.

(3)

We denote the set of all possible outcomes for Yt and Zt at
time t using Y (cid:63) and Z (cid:63), respectively. Let the set of all pure
strategies of PD and PA for game G be ¯PD and ¯PA, respectively.
Deﬁne ∆ ¯PD (∆ ¯PA) as the simplex of ¯PD ( ¯PA) or, the set of
probability distributions over ¯PD ( ¯PA). A mixed strategy for PD
is an element pD ∈ ∆ ¯PD, so that pD is a probability distribution
over ¯PD. Similarly, a mixed strategy for PA is an element
pA ∈ ∆ ¯PA, so that pA is a probability distribution over ¯PA. A
behavioral mixed strategy of player PD is given by pD : Y (cid:63) →
∆ ¯PD and of player PA is given by pA : Z (cid:63) → ∆ ¯PA.

the adversary. Similarly, UA consists of two components: (i) a
reward βA > 0 for reaching a destination node in the set D, and
(ii) penalty αA < 0 for getting detected by the defender. The
reward and penalty parameters and the resource cost of DIFT
and APT do not necessarily induce a zero-sum scenario where
the payoff that is gained by one player is lost by the other.
Therefore, we considered a non-zero sum payoff structure for
the DIFT vs. APT game.

Let the payoff of player Px at an absorbing state st be
denoted as cx(st ), where x ∈ {A, D}. Also, let the payoff of PD
at a non-absorbing defense-controlled state st with action dt be
rD(st , dt ), and the payoff of PA at a non-absorbing adversary-
controlled state st with action at be rA(st , at ). At each state in
the game, st at time t, where t < T and st is a non-absorbing
state, player chooses its action (dt for st ∈ SD and at for st ∈ SA)
and receives payoff rD(st , dt ) and rA(st , at ), respectively, and
the game transitions to a next state st+1. This is continued
until they reach an absorbing state and incur cA(st ) and cD(st ),
respectively, or the game arrives at the horizon, i.e., t = T .
Then,

rA(st , at ) = 0 for all st , at ,

cA(st ) =






αA,
βA,
0,

st ∈ SA, st = (A, τ, . . . , viW )
st ∈ SA, st = (A, vi1, . . . , τ, . . . , viW )
otherwise

cD(st ) =






βD,
αD,
0,

st ∈ SD, st = (D, vi1, . . . , viW ), vi1 ∈ D
st ∈ SD, st = (A, τ, . . . , viW )
otherwise

(4)

(5)

(6)

rD(st , dt ) =

(cid:40)

0,
CD(vik ),

st ∈ SD, dt = 0
st ∈ SD, dt = vik , k ∈ {1, . . . ,W }.

(7)

As the initial state of the game is s0, for a strategy pair

(pD, pA) the expected payoffs of the players are
(cid:35)
(RA
t )

UA(pD, pA) = Es0,pA,pD

and

(cid:34) T
∑
t=0
(cid:34) T
∑
t=0

(cid:35)
(RD
t )

,

(8)

(9)

UD(pD, pA) = Es0,pA,pD

where Es0,pA,pD denotes the expectation with respect to s0, pA,
and pD and from Eqs. (4)-(7)

Rx
t =





rD(st , dt ),
rA(st , at ),
cD(st ),
cA(st ),

x = D, st ∈ SD, t < T
x = A, st ∈ SA, t < T
st ∈ SD, t = T,
st ∈ SA, t = T.

(10)

E. Payoffs to the Players

The payoff functions of PD and PA are denoted by UD and
UA, respectively. UD consists of three components: (i) resource
cost CD(vi) < 0 for performing security analysis of a ﬂow at
a node vi ∈ VG , (ii) penalty βD < 0 for adversary reaching a
destination node in D, and (iii) reward αD > 0 for detecting

We incorporate the idea of maximizing the probability of
detection and minimizing the probability of adversary evading
detection using the terms pT and pR, respectively. Further, we
capture the false-positives generated in the system using the
term pFP. Note that, generation of false-positive implies that
the defender failed to capture the adversary and concluded a

benign ﬂow is malicious. This means that the adversary will
attain the target as the malicious ﬂow evaded detection. Given
a set of strategies (pD, pA), where pD ∈ PD and pA ∈ PA, and
benign distribution πB, the payoff functions of the players, i.e.,
Eqs.(8), (9), can be rewritten using Eqs. (4)-(7), (10) as

UD(pD, pA) = pT αD + (pR + pFP) βD+∑
s∈SD
(cid:17)
.

(cid:16)
UA(pD, pA) =

pT αA + (pR + pFP) βA

pD(vi)CD(vi)

(cid:17)
,(11)

(cid:16)

∑
vi∈s

(12)

Here pT is the cumulative probability that the adversarial
ﬂow is detected by the defender. The term pT αD captures
the reward received by DIFT for detecting the attack and the
term pT αA captures the penalty incurred by APT for getting
detected. Also, pR denotes the cumulative probability that the
adversarial ﬂow reaches a destination and pFP denotes the
cumulative probability that a benign ﬂow is concluded as
malicious (i.e., trapped) by the defender, i.e., false-positive.
The term (pR + pFP) βD captures the penalty incurred by
DIFT for not detecting the attack and the term (pR + pFP) βA
captures the reward received by the APT for not getting
detected. Recall that pD(vi) denotes the probability with which
DIFT selects node vi as a security check point (trap). The
term ∑s∈SD ∑vi∈s(pD(vi)CD(vi)) captures the total resource cost
associated with DIFT for performing security analysis. Note
that pT , pR are functions of pD and pA, and pFP is a function
of pD and πB. Our focus is to compute a limiting average
equilibrium of the nonzero-sum stochastic game.

V. COMPUTATION OF OPTIMAL STRATEGY

A. Solution Concept

In this subsection, we present the solution concept of the

game.
Deﬁnition V.1. Let pA : Z (cid:63) → [0, 1]|AA| denote a strategy of
the adversary. Also let pD : Y (cid:63) → [0, 1]|AD| denote a strategy
of the defender, i.e., the probability of performing security
analysis at a state. Then the best response of the defender is
given by

BR(pA) = arg max
pD∈PD

{U D(pD, pA)}.

Similarly, the best responses of the adversary are given by

BR(pD) = arg max
pA∈PA

{U A(pD, pA)}.

The best response of the defender is the set of defense
strategies that maximize the payoff of the defender for a
given adversarial strategy and known benign ﬂow distribution.
The best response of the adversary is a set of transition
strategies, for a given defender strategy and known benign
ﬂow distribution, that maximizes the probability of adversary
reaching a destination node without getting detected.

Deﬁnition V.2. A pair of strategies (pD, pA) is said to be a
Nash equilibrium (NE) if

pD ∈ BR(pA) and pA ∈ BR(pD).

an arbitrary state

Lemma V.3. Consider the APT vs. DIFT game G =
{S, s0, Σ , ∆ , P}. Let N be the number of nodes in the IFG
and W be the number of ﬂows that arrive into the system at
time t = 1. Then |S| = O(NW ).
Proof. We prove the result by showing that |SA| = O(NW )
and |SD| = O(NW ). Consider
s =
(x, vi1 , . . . , viW ) ∈ S \ s0, where x ∈ {A, D}. Here, vik ∈ VG ∪
{φ , τ} for all k ∈ {1, . . . ,W }. All the W tagged ﬂows arrive at
distinct nodes in the set VG of the IFG as a process or ﬁle in
the system receive exactly one information ﬂow at a particular
time. Therefore, for a state s = (x, vi1, . . . , viW ), where vik ∈ VG
for all k ∈ {1, . . . ,W }, ia (cid:54)= ib for a, b ∈ {1, . . . ,W }. Also,
the defender performs security analysis on one tagged ﬂow
at a time and hence there is no state s = (x, vi1, . . . , viW )
with via = vib = τ for a (cid:54)= b. Repetition of vik ’s is possible
only for states with φ . Hence s belongs to one of the two
types: (a) {s = (x, vi1, . . . , viW ) : vik ∈ VG ∪ {τ}} and (b) {s =
(x, vi1, . . . , viW ) : vik ∈ VG ∪ {φ } such that vik = φ for at least
some k ∈ {1, . . . ,W }}.

(N+1)!

(cid:1) =

Case (a) corresponds to selecting W items from a set of
N + 1 items without any repetitions. The cardinality of this
set is (cid:0)N+1
(W )!(N+1−W )! = O(NW ). Case (b) corresponds
W
to states with one or more φ entries. Note that, here repetitions
are allowed only for φ . The cardinality of this set is (cid:0)N+1
(cid:1) +
W −1
(cid:1) = O(NW −2). Additionally, there
(cid:0)N+1
W −2
is an initial state s0. From (a) and (b), the number of possible
cases for s is O(NW ). Since s = (x, vi1, . . . , viW ), where x ∈
{A, D}, we get |SA| = O(NW ) and |SD| = O(NW ). As S =
SA ∪ SD, we get |S| = O(NW ).

(cid:1) + . . . + (cid:0)N+1
2

(cid:1) + (cid:0)N+1
1

It is shown that there exists an NE for nonzero-sum dis-
counted stochastic games [25]. However, the existence of NE
for nonzero-sum undiscounted stochastic games is open when
the time horizon is inﬁnite, i.e., T = ∞. In the result below
we prove the existence of NE for the game G. The existence
is shown by proving that time horizon is indeed ﬁnite for
G and then invoking the existence of NE for ﬁnite horizon
undiscounted games.

Proposition V.4. Let T denote the termination time of the
APT vs. DIFT game. The APT vs. DIFT game, G, terminates
in at most is 2N steps, i.e., T (cid:54) 2N.

Proof. The action set AA of the adversary player (APT) is to
choose a transition along an attack path of the ﬂow-network F
(Deﬁnition IV.1) or to drop out at some point. Let ΩD denote
the set of attack paths in F . Consider an arbitrary attack path
ˆω ∈ ΩD. Recall that
ˆω is a simple path as an APT due to
its stealthy behavior will not traverse in cycles through the
system. Hence the length of ˆω is at most N, as ˆω is a simple
directed path. Thus in any run of the game, the adversary can
take at most N transitions. As G is a turn-based game, the
game terminates in at most 2N steps.

Proposition V.5. There exists a Nash equilibrium for the APT
vs. DIFT game G.

An NE is a pair of strategies such that no player can beneﬁt
through unilateral deviation, i.e., by changing the strategy
while the other player keeps the strategy unchanged.

Proof. It is shown in [13] that there exists a Nash equilibrium
for a nonzero-sum stochastic game with asymmetric informa-
tion structure, under stochastic behavioral strategies, when the

time horizon is ﬁnite. Proposition V.4 prove that the APT vs.
DIFT game will terminate in 2N number of steps. Further,
the behavioral strategy space is a subset of the strategy space
PA × PD. Hence by the result in [13], the proof follows.

B. Solution Approach

In this section, we compute an NE of the DIFT vs. APT
game G. Our approach is based on a minimum capacity
cut-set formulation on a ﬂow-network constructed from the
information ﬂow graph of the system. Consider the ﬂow-
network F = (VF , EF ), where VF = VG ∪ {sF ,tF } and EF =
EG ∪ {sF × λ } ∪ {D × tF }. Then, a cut of F is deﬁned below.

Deﬁnition V.6. In a ﬂow-network F with vertex set VF and
directed edge set EF , the cut induced by ˆS ⊂ VF is a subset of
edges κ( ˆS) ⊆ EF such that for every (u, v) ∈ κ( ˆS), |{u, v} ∩
ˆS| = 1. Further, given edge capacity vector cF : EF → R+, the
capacity of a cut κ( ˆS), is deﬁned as the sum of the capacities
of the edges in the cut, i.e., cF (κ( ˆS)) = ∑e∈κ( ˆS) cF (e).

The (source-sink)-min-cut problem aims to ﬁnd a cut κ( ˆS (cid:63))
of ˆS (cid:63) ⊂ VF such that cF (κ( ˆS (cid:63))) (cid:54) cF (κ( ˆS)) for any cut κ( ˆS)
ˆS ⊂ VF satisfying sF ∈ ˆS and tF /∈ ˆS. The (source-sink)-
of
min-cut problem is well studied and there exist algorithms
to ﬁnd a min-cut in time polynomial in |VF | and |EF | [26].
In our approach to compute NE, which is detailed later in
the section, we ﬁnd a min-cut through nodes of the ﬂow-
network instead of the edges. Hence we transform the node
version of the min-cut problem to an equivalent edge version.
For this, we introduce an edge corresponding to each node in
F except the source and sink nodes. The transformed ﬂow-
network is denoted as F = (V F , E F ), where V F = VF ∪ V (cid:48)
G
and E F = E(cid:48)
F =
{(v(cid:48)
i,tF ) :
vi ∈ D}, and E(cid:48)
G = {(vi, v(cid:48)
i) : i = 1, . . . , N}. The capacity vector
associated with the edges in F is given by

N}, E(cid:48)
i, v j) : (vi, v j) ∈ EG }, Eλ = {(sF , vi) : vi ∈ λ }, ED = {(v(cid:48)

G ∪ Eλ ∪ ED with V (cid:48)

G = {v(cid:48)

1, . . . , v(cid:48)

F ∪ E(cid:48)

(cid:40)

cF (e) :=

CD(vi),
∞,

e ∈ E(cid:48)
G
otherwise

(13)

G

Note that E(cid:48)

G is a cut of F and ∑e∈E(cid:48)

cF (e) < ∞. Hence any
minimum capacity cut in F corresponds to edges from the set
E(cid:48)
G as the capacity of the remaining edges is ∞ as shown in
Eq. (13). Further, the capacity of an edge in set (vi, v(cid:48)
i) ∈ E(cid:48)
G
corresponds to the cost of conducting the security analysis at
node vi. Thus a minimum capacity cut in F corresponds to a
cut node set of the IFG with minimum total cost of performing
security analysis.

Let κ( ˆS (cid:63)) denotes an optimal solution to the (source-sink)-
G and cF (κ( ˆS (cid:63))) < ∞.

min-cut problem on F . Then κ( ˆS (cid:63)) ⊆ E(cid:48)
The nodes corresponding to the min-cut is

ˆS (cid:63) := {vi : (vi, v(cid:48)

i) ∈ κ( ˆS (cid:63))}.

(14)

In the APT vs. DIFT game, the aim of the defender is
to optimally select trapping nodes in the IFG, i.e., nodes of
IFG to perform security analysis, such that no adversarial ﬂow
reaches some node in D. In other words, defender ensures that
all adversarial ﬂows that originate in node sF gets detected

before reaching node tF . In order to ensure security,
the
defender must select at least one node in all possible paths
from sF to tF as a trapping node. In the equilibrium analysis
of the game we prove that an optimal strategy of the defender
is indeed to select the min-cut nodes of the ﬂow-network as
trapping nodes. The objective of the adversary is to optimally
the probability
choose the transitions in such a way that
of reaching tF is maximum. The adversary hence plans its
transitions to select an attack path with least probability of
detection.

The result below proves that an NE of game G is repre-
sented by the nodes corresponding to a minimum capacity cut
in the ﬂow-network F . Note that, the solution to the min-cut
problem may not be unique. Consequently, there may exist
multiple NE for the game G.

Theorem V.7. Every NE (pA, pD) of the APT vs. DIFT game
G satisﬁes the following properties:

1) The defender’s strategy pD selects all the nodes in ˆS (cid:63) as
trapping nodes, where ˆS (cid:63) is a set of min-cut nodes of
the ﬂow network F .

2) The adversary’s strategy pA chooses transitions such that
each attack path passes through exactly one node in the
set

ˆS (cid:63).

We prove Theorem V.7 by invoking the property that at NE
every player plays a best response against the other players
simultaneously. We ﬁrst present prove the best response re-
sults, Lemma V.8, Lemma V.10, and Lemma V.11, and then
present the proof of Theorem V.7.

Lemma V.8 gives the best response of the adversary for a
given defender strategy that selects the min-cut nodes of F
as the trapping nodes for analyzing the ﬂows.

ˆS (cid:63) of

Lemma V.8. Let ΩD be the set of all attack paths in F .
Consider a defender strategy pD in which only the min-cut
the ﬂow-network F are chosen as trapping
nodes
nodes with nonzero probability. Then, the best response of
the adversary, BR(pD), is to choose the transitions in such a
way that all attack paths which has nonzero probability under
BR(pD) pass through exactly one node in ˆS (cid:63).

the payoff

function of

Proof. Consider
the adversary,
UA(pD, pA) = (pT αA + (pR + pFP) βA). Here, pT and pR are
functions of pD and pA. However, pFP depends only on pD
and πB. Thus for a given pD, πB, the probabilities pT and pR
vary depending on pA, however, pFP is a constant. We prove
the result using a contradiction argument. Suppose the best
response of PA is a strategy p(cid:48)
A such that there exists a path
ˆω ∈ ΩD that passes through two nodes, say vi, v j ∈ ˆS (cid:63) ⊂ VG ,
and πA( ˆω) (cid:54)= 0, where πA( ˆω) is the probability of attack path
A. Note that ˆS (cid:63) is a min-cut and vi, v j ∈ ˆS (cid:63). Further,
ˆω under p(cid:48)
CD(vi) (cid:54)= 0 and CD(v j) (cid:54)= 0. Thus there exists at least one
directed path, say ˆω (cid:48), from vi to tF that does not pass through
any node in ˆS (cid:63) \ {vi}. Similarly, there exists at least one
directed path, say ˆω (cid:48)(cid:48), from v j to tF that does not pass through
any node in ˆS (cid:63) \ {v j}. As per the given defender strategy
pD the only trapping node in ˆω (cid:48), ˆω (cid:48)(cid:48) is vi, v j, respectively.
Thus there exists a strategy pA such that all paths in ΩD with
nonzero probability under pA pass through exactly one node

in ˆS (cid:63) and UA(pD, pA) > UA(pD, p(cid:48)
A) (since pFP remains same
and pT is higher and pR is lower under p(cid:48)
A when compared to
the values under strategy pA). This contradicts the assumption
that p(cid:48)

A is a best response and completes the proof.

Recall that ΩD is the set of all source-to-sink paths in the
ﬂow-network F (Deﬁnition IV.1). Note that, any path in F
that does not belong to ΩD is not a valid attack, as the attacker
cannot reach a destination node. Every attack path in ΩD,
depending on the defender strategy and the transition structure
of the game, induces a set of paths in the state space graph
of the APT vs. DIFT game. Let Ω be the set of all paths
induced by ΩD. In other words, Ω is the set of all possible
state transition paths in the state space graph corresponding
to all attack paths in F .

Deﬁnition V.9. Let the set of paths induced in the state
space S by the attack paths ΩD in F be denoted as Ω .
Then the probability of selecting a path ω ∈ Ω , denoted by
π(ω), is π(ω) = πA(ω)πB(ω), where πA(ω) is the probability
with which an adversary chooses ω (product of the adversary
transition probabilities along path ω) and πB(ω) is the
probability of benign ﬂows in ω under distribution πB.

The following result proves that, under certain conditions,
for a given adversary strategy the best response of the defender
is to select one node in every attack path as a trapping node.

Lemma V.10. Let ΩD be the set of attack paths in F ,
Ω be the set of paths in S induced by ΩD, and pA be a
given strategy of PA. For ω ∈ Ω , let ω(A) denote the set
of nodes in ω corresponding to the adversarial (malicious)
ﬂow and ω(B) denote the set of nodes in ω corresponding
let p(ω) denote the probabil-
to the benign ﬂows. Also,
ity of detecting the adversary along path ω, i.e., p(ω) =
(cid:105)
(cid:104)
f (ω) denote
(1 − FN). Also, let
1 − ∏vi∈ω(A)(1 − pD(vi))
trapping a benign ﬂow (false-positive),
the probability of
(cid:104)
(cid:105)
f (ω) =
i.e.,
FP. If the defender’s
1 − ∏vi∈ω(B)(1 − pD(vi))
strategy satisﬁes the following two conditions:
(a) p(ω) = p(ω (cid:48)), for all ω, ω (cid:48) ∈ Ω and
(b) f (ω) = f (ω (cid:48)), for all ω, ω (cid:48) ∈ Ω ,
then the best response of the defender, BR(pA), is to select
with nonzero probability exactly one node in every ˆω ∈ ΩD
as a trapping node.

Proof. Let π(ω) denote the probability of a path ω ∈ Ω under
the given strategy pA and benign distribution πB. For a path ω
in the state space S, ω(A) denotes the set of nodes in ω corre-
sponding to the adversarial (malicious) ﬂow and ω(B) denotes
the set of nodes in ω corresponding to the benign ﬂows. Let
p(ω) denote the probability of detecting the adversary along
(cid:105)
(cid:104)
path ω, i.e., p(ω) =
(1−FN). Also,
1−∏vi∈ω(A)(1− pD(vi))
let f (ω) denote the probability of trapping a benign ﬂow, i.e.,
(cid:105)
(cid:104)
FP.
1 − ∏vi∈ω(B)(1 − pD(vi))
false-positive. Then f (ω) =
The defender’s payoff

UD(pD, pA) = ∑
ω∈Ω
+ ∑
ω∈Ω

(cid:104)
π(ω)

p(ω) αD + (1 − p(ω) + f (ω))βD

(cid:105)

pD(vi)CD(vi)

(cid:17)

(cid:16)

∑
vi∈ω

Given p(ω)’s and f (ω)’s are equal for all ω ∈ Ω . Thus

UD(pD, pA) =

(cid:104)

p(ω) (αD − βD) + (1 + f (ω))βD

+ ∑
ω∈Ω

(cid:16)

∑
vi∈ω

pD(vi)CD(vi)

(cid:17)

(cid:105)(cid:16)

∑
ω∈Ω

(cid:17)

π(ω)

(cid:104)

=

p(ω) αD +(1− p(ω)+ f (ω))βD

(cid:105)

(cid:16)

+ ∑
ω∈Ω

∑
vi∈ω

pD(vi)CD(vi)

(cid:17)

(15)
Eq. (15) holds as ∑ω∈Ω π(ω) = 1. Consider a defender
strategy pD in which exactly one node in every ˆω ∈ ΩD is
chosen as the trapping node. Assume that the defender strategy
is modiﬁed to p(cid:48)
D such that more than one node in some
path are chosen as trapping nodes. This variation updates the
probabilities of nodes in a set of paths in Ω . Note that, due to
the constraints on p(ω) and f (ω) (conditions (a) and (b)), the
defender’s probabilities (strategy) at two nodes in a path are
dependent. Hence for all paths ω ∈ Ω whose probabilities are
modiﬁed in p(cid:48)
D(vi)CD(vi) < ∑vi∈ω pD(vi)CD(vi). This
holds as the probability in the single node case is less than
the sum of the probabilities of more than one node case as the
events are dependent and the sum of the values of CD(·) < 0
are also minimum (since min-cut). This implies

D, ∑vi∈ω p(cid:48)

∑
ω∈Ω

(cid:16)

∑
vi∈VG

(cid:17)
p(cid:48)
D(vi)CD(vi)

< ∑
ω∈Ω

(cid:16)

∑
vi∈VG

pD(vi)CD(vi)

(cid:17)
.

(16)

D, pA) < UD(pD, pA). Therefore, p(cid:48)

From Eq.
(15) and by conditions (a) and (b), we get
UD(p(cid:48)
D is not a best response
for the defender and no best response of the defender has
more than one node chosen as trapping node, if p(ω)’s and
f (ω)’s are equal for all ω ∈ Ω .

The result below proves that if Lemma V.10 holds, then for
a given adversary strategy the best response of the defender
is to select the min-cut nodes of F as trapping nodes.

Lemma V.11. Let ΩD be the set of attack paths in F . Assume
that the defender’s strategy satisﬁes conditions (a) and (b) in
Lemma V.10 for a given adversary strategy pA. Then the best
response of the defender, BR(pA), is to select with nonzero
probability a min-cut node set of the ﬂow-network F as the
trapping nodes.

Proof. Under conditions (a) and (b) in Lemma V.10, the best
response of the defender is to select one node in every attack
path as trapping node. Note that all attack paths in F pass
ˆS (cid:63). By selecting
through some node in the min-cut node set
the nodes in ˆS (cid:63) as trapping nodes, all possible attack paths
have some nonzero probability of getting detected. We prove
the result using a contradiction argument. Suppose that the
best response of the defender is not to select the nodes in ˆS (cid:63)
as trapping nodes. Then, there exists a subset of nodes ˆS ⊂ VG
such that ∑vi∈ ˆS CD(vi) < ∑v j∈ ˆS (cid:63) CD(v j). Further, all possible
attack paths in F pass through some node in ˆS. Then, ˆS is a
(source-sink)-cut-set and let κ( ˆS) := {(vi, v(cid:48)
i) : vi ∈ ˆS}. Then,
κ( ˆS) is a cut set and cF (κ( ˆS)) < cF (κ( ˆS (cid:63))). This contradicts
the fact that κ( ˆS (cid:63)) is an optimal solution to the (source-sink)-
min-cut problem. Hence under Lemma V.10 the best response

of the defender is to select the nodes in ˆS (cid:63) as trapping nodes.

Using Lemma V.8, Lemma V.10, and Lemma V.11, we

present below the proof of Theorem V.7.
Proof of Theorem V.7: Consider a defender’s strategy that
selects the min-cut nodes as the trapping nodes. Then, by
Lemma V.8 the best response of the adversary is to select
transitions in such a way that all attack paths with nonzero
probability pass through exactly one node in the min-cut.
Further Let ΩD be the set of attack paths in F and Ω be
the set of paths in S induced by ΩD. Lemma V.11 concludes
that the best response of the defender is to select the min-
cut nodes of F as trapping nodes, provided the probability
of detecting the adversary and the probability of trapping a
benign ﬂow are equal for all ω ∈ Ω . This implies that, if NE
strategy pair satisfy the conditions that p(ω)’s and f (ω)’s
are equal for all ω ∈ Ω , then the defender’s strategy at NE
is to select the min-cut nodes as the trapping nodes and the
adversary’s strategy is to choose an attack path such that it
passes through exactly one node in the min-cut node set. By
Proposition V.5, there exists an NE for G. Consequently, if
p(ω)’s and f (ω)’s are equal at NE, the proof follows.

Let (pA, pD) be an NE of G. Consider a unilateral deviation
in the strategy of the adversary. Let π(ω)’s for ω ∈ Ω are
modiﬁed due to change in transition probabilities of the adver-
sary such that the updated probabilities of the attack paths are
π(ωi) + εi, for i = 1, . . . , |Ω |. Here, εi’s can take positive val-
|Ω |
i=1 εi = 0. Consider two
ues, negative values or zero such that ∑
arbitrary paths, say ω1 ∈ Ω and ω2 ∈ Ω , such that a unilateral
change in the adversary strategy changes π(ω1) and π(ω2) and
the probabilities of the other paths remain unchanged. Without
loss of generality, assume that π(ω1) increases by ε while
π(ω2) decreases by ε and all other π(ω)’s remain the same.
p(ω1)(αA − βA) + βA +
As (pD, pA) is an NE, (π(ω1) + ε)
(cid:54)

p(ω2)(αA − βA) + βA + f (ω2) βA

+ (π(ω2) − ε)

(cid:17)

(cid:16)

(cid:17)

(cid:16)

p(ω1)(αA −βA)+βA + f (ω1) βA

+π(ω2)

p(ω2)(αA −

(cid:17)

(cid:16)

f (ω1) βA
(cid:16)

π(ω1)

βA) + βA + f (ω2) βA

. Thus

(cid:17)

(p(ω1) − p(ω2))(αA − βA) + ( f (ω1) − f (ω2))βA (cid:54) 0.

(17)

Now consider another unilateral deviation of adversary strat-
egy such that π(ω1) decreases by ε while π(ω2) increases by
ε and all other π(ω)’s remain the same. This gives

(p(ω1) − p(ω2))(αA − βA) + ( f (ω1) − f (ω2))βA (cid:62) 0.

(18)

Eqs. (17) and (18) imply

(p(ω1) − p(ω2))(αA − βA) + ( f (ω1) − f (ω2))βA = 0.

(19)

Note that (α A − β A) < 0 and βA > 0. Therefore, there are three
possible cases where Eq. (19) holds.

(i) (p(ω1) − p(ω2)) > 0 and ( f (ω1) − f (ω2)) > 0,
(ii) (p(ω1) − p(ω2)) < 0 and ( f (ω1) − f (ω2)) < 0, and
(iii) (p(ω1) − p(ω2)) = 0 and ( f (ω1) − f (ω2)) = 0.
Consider case (i). For a path ω in the state space let ω(A)
denote the set of nodes in ω corresponding to the adversarial

ﬂow and ω(B) denote the set of nodes in ω corresponding to
the benign ﬂows. Rewriting(p(ω1) − p(ω2)) > 0, we get
(cid:16)(cid:104)

(cid:105)(cid:17)

1− ∏

vi∈ω1(A)

(cid:105)
(1− pD(vi))

−

(cid:104)
1− ∏

v j∈ω2(A)

(1− pD(v j))

(1−FN) > 0

(20)

Similarly rewriting( f (ω1) − f (ω2)) > 0, we get
(cid:105)
(cid:16)(cid:104)
(1 − pD(vi))

(cid:104)
1 − ∏

1 − ∏

(1 − pD(v j))

−

(cid:105)(cid:17)

vi∈ω1(B)

v j∈ω2(B)

FP > 0

As 0 < FP < 1 and 0 < FN < 1, Eqs. (20) and (21) imply

(cid:104)

(cid:104)

∏
vi∈ω2(A)
∏
vi∈ω2(B)

(1 − pD(vi)) − ∏

v j∈ω1(A)

(1 − pD(vi)) − ∏

v j∈ω1(B)

(cid:105)
(1 − pD(vi))

> 0

(cid:105)
(1 − pD(v j))

> 0

Eqs. (22) and (23) imply

(21)

(22)

(23)

∏
vi∈ω2(A)
∏
vi∈ω2(B)

(1 − pD(vi)) > ∏

(1 − pD(vi)) and (24)

(1 − pD(vi)) > ∏

(1 − pD(v j))

(25)

v j∈ω1(A)

v j∈ω1(B)

Note that at every state in s ∈ S with s = {vi1, . . . , vik } 0 (cid:54)
∈s pD(vik ) (cid:54) 1. Thus Eqs. (24) and (25) cannot be together
∑vik
satisﬁed. Thus case (i) does not hold at an NE. Following
the similar arguments one can show that case (ii) also does
not hold at an NE. This implies (p(ω1) − p(ω2)) = 0 and
( f (ω1) − f (ω2)) = 0.

Since ω1 and ω2 are arbitrary, one can show that for the

general case

|Ω |
∑
i=1

εi p(ωi) = 0 and

|Ω |
∑
i=1

εi f (ωi) = 0.

(26)

Eq. (26) should hold for all possible values of εi’s satisfying
|Ω |
i=1 εi = 0. This gives p(ωi) = p(ω j) and f (ωi) = f (ω j), for

∑
all i, j ∈ {1, . . . , |Ω |}, at NE. This completes the proof.

Theorem V.7 concludes that the set of all solutions to the
min-cut problem characterizes the set of NE of game G. Two
key properties of an equilibrium strategy pair is that defender
chooses the min-cut nodes as trapping nodes and indeed with
equal probability, which is proved in Lemma V.12.

Lemma V.12. Consider the APT vs. DIFT game G and let
(pA, pD) be an NE of G. Then under pD all the min-cut nodes
of the ﬂow-network have equal probability of selecting as a
trapping node.

Proof. At NE, all the paths in the state space have equal
probability of getting detected, i.e., p(ω)’s are same for all
ω ∈ Ω (by Theorem V.7). For a path ω ∈ Ω with ω(A)
denoting the set of nodes corresponding to the adversarial
ﬂow, we know

p(ω) =

(cid:104)
1 − ∏

vi∈ω(A)

(cid:105)
(1 − FN), for all ω ∈ Ω .
(1 − pD(vi))

(27)
Also, there is exactly one node corresponding to an attack
path that has nonzero probability of selecting as a trapping
node (Theorem V.7). Hence in set ω(A) exactly one node, say

vi ∈ ω(A), has nonzero value of pD. Eq. (27) hence implies
that at NE all the min-cut nodes of the ﬂow-network have
equal probability of selecting as a trapping node.

As a consequence of Theorem V.7 and Lemma V.12, the

following corollary holds.
Corollary V.13. Let ˆS (cid:63) be a set of min-cut nodes of the ﬂow-
network F . Then, at an NE of the game G, the defender’s
strategy is to choose all the nodes in ˆS (cid:63) as trapping nodes with
equal probability and the adversary’s strategy is to choose
transitions in such a way that each attack path passes through
exactly one node in ˆS (cid:63).

Proof. By Theorem V.7 and Lemma V.12 the defender’s
strategy at NE is to select min-cut nodes as trapping nodes
with equal probability. We know adversary’s payoff

UA(pD, pA) = ∑
ω∈Ω

(cid:104)
π(ω)

p(ω) αA + (1 − p(ω) + f (ω))βA

(cid:105)
,

and at NE p(ω)’s and f (ω)’s are equal for all ω ∈ Ω . Thus
the adversary’s optimal strategy is to select any path (or set
of paths if mixed) that passes through exactly one min-cut
node.

Using Theorem V.7 and Corollary V.13 we present below
an approach to compute an equilibrium strategy pair of G.
Firstly, we solve the node version of the (source-sink)-min-
cut problem on F . Let an optimal solution be κ( ˆS (cid:63)) and
ˆS (cid:63) = { ˜v1, . . . , ˜vr}, where
the corresponding vertex set be
ˆS (cid:63) := {vi : (vi, v(cid:48)
i) ∈ κ( ˆS (cid:63))}. By Theorem V.7, at NE the
defender only selects the nodes in ˆS (cid:63) as trapping nodes,
with equal probability, and the adversary chooses transitions
such that each attack path passes through only one node in
ˆS (cid:63). Therefore, the attack paths chosen by the adversary is
characterized by the nodes in ˆS (cid:63). The set of paths in the
state space S can also be characterized by the nodes in ˆS (cid:63). In
other words, the set of paths in the set Ω can be grouped
such that each group corresponds to a set of paths in Ω
in which attack path (not necessarily benign ﬂows) passes
through exactly one node in ˆS (cid:63), i.e., at least one among the
W tagged ﬂows passes through exactly one min-cut node. We
denote the set of paths in Ω that correspond to node ˜vi ∈ ˆS (cid:63)
as Ω ( ˜vi). By Corollary V.13 any distribution over paths in
Ω ( ˜vi), for i ∈ {1, . . . , r} is an optimal strategy for PA.

Remark V.14. At NE, all attack paths in F with nonzero
probability pass through exactly one node in the min-cut node
ˆS (cid:63) = { ˜v1, . . . , ˜vr}. Further, the probabilities of selecting
set
them as trapping nodes are also equal (since p(ω)’s are
equal). Thus, without loss of generality, one can characterize
the action space of the adversary as the set of attack paths in
F that pass through ˆS (cid:63), disjoint with respect to nodes in ˆS (cid:63),
and the adversary strategizes over this set of paths.

In the theorem below, we derive a closed-form expression

for the optimal defender strategy for the game G.

Theorem V.15. Consider the APT vs. DIFT game G. At NE
the defender selects all the min-cut nodes as trapping nodes

with probability

, where W, r respectively denote

1
min{W, r}

the number of tagged ﬂows at a time in the system and the
cardinality of the min-cut nodes.

Proof. Consider a non-terminal state s ∈ S, where s =
{vi1, . . . , viW }. The action set of PD at s is AD(s) = {0} ∪
{vi1, . . . , viW }, for{vi1, . . . , viW } ⊂ VG . Any defender strategy
must satisfy for all s ∈ S, pD(0) + ∑W
j=1 pD(vi j ) = 1 if vi j (cid:54)= φ .
By Corollary V.13, at NE, PD only selects min-cut nodes as
ˆS (cid:63) = { ˜v1, . . . , ˜vr} be the solution obtained
trapping nodes. Let
for the min-cut problem. Thus the constraint on pD (that it
should add upto 1 at all states) boils down to the following.
For all states s = {vi1, . . . , viW } ⊆ { ˜v1, . . . , ˜vr},

pD(0) +

∑
vi j :vi j ∈{ ˜v1,..., ˜vr}
j∈{1,...,W }

pD(vi j ) = 1,

(28)

Moreover, we know all min-cut nodes are chosen as trapping
nodes with equal probability (Corollary V.13), i.e., pD( ˜v1) =
. . . = pD( ˜vr) := θ . For all states s = {vi1, . . . , viW } ⊆ { ˜v1, . . . , ˜vr}

(cid:16)

pD(0) + θ

∑
vi j :vi j ∈{ ˜v1,..., ˜vr}
j∈{1,...,W }

(cid:17)
1

= 1,

(29)

For all states s ∈ S with s = {vi1, . . . , viW } ⊆ { ˜v1, . . . , ˜vr},

1 (cid:54) min{W, r}.

(30)

∑
vi j :vi j ∈{ ˜v1,..., ˜vr}
j∈{1,...,W }

Eq. (30) must hold for all states and hence the maximum value
that θ can take is when pD(0) = 0 and ∑vi j :vi j ∈{ ˜v1,..., ˜vr}
1 =

min{W, r} at a state s ∈ S. Thus θ =

As the defender’s and adversary’s action sets are character-

ized by the min-cut nodes, the defender’s payoff is

j∈{1,...,W }

1
min{W, r}

.

UD(pD, pA) =

+

=

+

r
∑
i=1

r
∑
i=1

∑
ω∈Ω ( ˜vi)
r
∑
i=1

∑
ω∈Ω ( ˜vi)

(cid:16)

∑
ω∈Ω ( ˜vi)
r
∑
i=1

∑
ω∈Ω ( ˜vi)

(cid:104)
π(ω)

p(ω) αD + (1 − p(ω) + f (ω))βD

(cid:105)

(cid:17)

pD( ˜vi)CD( ˜vi)

∑
˜vi∈ω
(cid:104)
θ (1 − FN) (αD − βD) + βD + f (ω)βD
π(ω)

(cid:105)

(cid:17)

θ CD( ˜vi)

(cid:16)

∑
˜vi∈ω

(31)

Eq. (31) holds from Lemma V.12 by substituting p(ω) =
[1 − ∏ ˜vi∈ω(A)(1 − pD( ˜vi))](1 − FN) = (1 − (1 − θ ))(1 − FN) =
θ (1 − FN). Here 0 (cid:54) θ (1 − FN) (cid:54) 1 and 0 (cid:54) f (ω) (cid:54) 1. Also,
(αD − βD) >> βD with (αD − βD) >> 1 and βD < 0. Also
note that any distribution, π(ω), over paths in Ω ( ˜vi), for
i ∈ {1, . . . , r}, is optimal for adversary (Corollary V.13). Thus
Eq. (31) is maximum for the maximum possible θ . Hence at
NE the defender selects a set of min-cut nodes as trapping
nodes with probability 1/ min{W, r}.

In this work, we provide a characterization for the equilib-
rium of the DIFT vs. APT game using the min-cut analysis.
Min-cut of a ﬂow-network need not necessarily be unique.
For an application whose IFG results in a ﬂow-network with

multiple min-cut sets, equilibrium of the DIFT vs. APT game
will be nonunique. The game considers a strategic adversary
and the defense strategy computed as equilibrium solution
to the game provides a selection of the trapping nodes that
maximizes the probability of detection while minimizing the
cost of security analysis. During a real attack scenario, the
adversary may choose an attack path which is different from
the equilibrium of the game. We note that, by deﬁnition of
Nash equilibrium, such a strategy will not improve the payoff
of the adversary. Moreover, for a defender that is unaware
of the actions of the adversary, implementing a solution to
the game as the trapping nodes maximizes the probability of
detection.

VI. NUMERICAL STUDY

We validate our theoretical results using real-world attack
data obtained using RAIN [1] for a data exﬁltration attack.
We use system log data collected during DARPA Transparent
computing (DARPA-TC) red team engagement that evaluated
the RAIN log recording system. A brief description of the
dataset used and the steps involved in the construction of the
IFG for that attack is given below.

The goal of the attack is to exﬁltrate sensitive information
from the system. The attack uses stolen credentials to exﬁltrate
sensitive ﬁles from the targeted machine. The attack exﬁltrates
sensitive system ﬁles using scp. The resulting IFG of the
data consists of 299 nodes and 6398 edges. Figure 3 shows
a portion of the IFG, obtained after performing a pruning
technique, that captures all possible attack paths in the IFG.
The details of the type of the nodes in the IFG in Figure 3 is
presented in Table I. Entry points of the attack are identiﬁed
as /bin/bash and /usr/sbin/sshd (nodes 1 and 5 in Figure 3).
Destination node of the attack is /etc/passwd (node 3 in
Figure 3).

Figure 3: Portion of the IFG that captures all attack paths in IFG.

Table I: Description of the nodes of the IFG for the data
exﬁltration attack

Node ID Node Name
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17

/bin/bash
/usr/bin/sudo
/etc/passwd
Unknown
/usr/sbin/sshd
/etc/group
/usr/sbin/console-kit-daemon
Unknown
/usr/sbin/avahi-daemon
Unknown
/run/ConsoleKit/database∼
/usr/lib/policykit-1/polkitd
/bin/run-parts
/run/motd.new
/home/theia/secrets.tar.gz
/bin/dash
/usr/bin/apt-conﬁg

Node Type
Process
Process
Files
IPC Object
Process
File
Process
IPC Object
Process
IPC Object
File
Process
File
File
File
File
File

Then we simulate an attack in the IFG and perform security
analysis to evaluate the performance of the DIFT model.
We conduct two experiments which are detailed below. Each
payoff value represented in Figure 4 and Figure 5 are obtained
after averaging over 1000 trials. We have identiﬁed 13 distinct
attack paths related to the adversary in the underlying IFG and
uniformly picked one attack path in each trial. Each of these
attack paths consist only one min-cut node (Theorem V.7).
Further, we set αA = −1000, βA = 1000, αD = 1000, and
βA = −1000. CD(vi) values are set to be proportional to the
number of information ﬂows passing through each node, vi
for i ∈ {1, . . . , N}, in the IFG through out the logging period.

A. Case Study 1

In this experiment setup, we vary the probability of se-
that any
lecting min-cut nodes as trapping nodes. Recall
probability greater than θ is not a valid defender’s strategy
(Theorem V.15). Hence for comparing the performance we
select probabilities θ (cid:54) 1/ min{W, r} = 0.5. Note that at NE
θ = 0.5. Figures 4 (a) and 4 (b) plot the payoff values for both
players averaged over 1000 trials for different values of false-
positives and false-negatives. Figure 4 (a) shows that defender
performs better when following NE strategy, i.e., θ = 0.5,
which validates the theoretical analysis.

First we solve the min-cut problem on the ﬂow-network
constructed from the IFG of the data. Resulting min-cut nodes,
/usr/bin/sudo and /run/consolekit/data, are indicated in red
color in Figure 3. The min-cut nodes are chosen as trapping
nodes with probability θ = 1/ min{W, r}. W and r denote
the number of tagged ﬂows at a time in the system and the
cardinality of the obtained solution to the min-cut problem,
respectively. Here W = 3 and r = 2. Thus θ = 0.5.

B. Case Study 2

In this case study we compare the performance of the DIFT
by varying the locations of trapping nodes. In provenance-
based analysis, various heuristics have been proposed for
selecting the trapping nodes [27], [28]. In [27], a heuristic
that assigns weights to the nodes of the IFG is proposed. In
this case study, we compare the performance of the defense
strategy obtained as solution to the DIFT vs. APT game with

θ = 0.5 θ = 0.4 θ = 0.2

0

−19.1

−100.7

−223.7

−232.9

−280.4

−295

−421.7

−439.1

f
f
o
y
a
p

s
’
r
e
d
n
e
f
e
D

−200

−400

−600

−800

−636.7

−618.6

−718

−676.8

12

0

800

600

400

200

f
f
o
y
a
p

s
’
y
r
a
s
r
e
v
d
A

θ = 0.5 θ = 0.4 θ = 0.2

716

674

634

616

416

434

218

226

274

290

94

FP = 0
FN = 0

FP = 0
FN = 0.2

FP = 0.2
FN = 0.2

FP = 0.2
FN = 0

FP = 0
FN = 0

FP = 0
FN = 0.2

FP = 0.2
FN = 0.2

FP = 0.2
FN = 0

(a)

(b)

Figure 4: The parameters chosen are: αA = −1000, βA = 1000, αD = 1000, βA = −1000. The resource cost for the nodes are chosen such that
CD(vi) is proportional to the total number of information ﬂows at node vi for the whole logging period, where i ∈ {1, . . . , N}. Figures 4 (a)
and 4 (b) shows the payoffs of the defender and adversary, respectively, for different values of false-positives (FP) and false-negatives
(FN) when min-cut nodes are chosen as trapping nodes. The probability of selecting a min-cut nodes as trapping node is varied from
θ = 1/ min{W, r} = 1/ min{3, 2} = 0.5, θ = 0.4 and θ = 0.2 for all the experiments. Also, each case is averaged over 1000 runs.

Min-cut Cut Not a cut

1,000

Min-cut Cut Not a cut

928

0

−19.1

−500

−446.4

f
f
o
y
a
p

s
’
r
e
d
n
e
f
e
D

−1,000

−1,500

−2,000

−100.7

−232.9

−280.4

−600.8

−984.2

−914.6

−1,594.5

−1,545.4

−1,751.1

−1,873.1

768

876

698

424

306

226

234

274

84

12

94

f
f
o
y
a
p

s
’
y
r
a
s
r
e
v
d
A

800

600

400

200

0

FP = 0
FN = 0

FP = 0
FN = 0.2

FP = 0.2
FN = 0.2

FP = 0.2
FN = 0

FP = 0
FN = 0

FP = 0
FN = 0.2

FP = 0.2
FN = 0.2

FP = 0.2
FN = 0

(a)

(b)

Figure 5: The parameters chosen are: αA = −1000, βA = 1000, αD = 1000, βA = −1000. The resource cost for the nodes are chosen such that
CD(vi) is proportional to the total number of information ﬂows at node vi for the whole logging period, where i ∈ {1, . . . , N}. Figures 5 (a)
and 5 (b) shows the payoffs of the defender and adversary, respectively, for different values of false-positives (FP) and false-negatives (FN)
when (i) min-cut nodes are chosen as trapping nodes, (ii) cut nodes (not min-cut), and (iii) nodes that are not a cut. Also, each case is
averaged over 1000 runs.

two cases. For the ﬁrst case, we assign nonzero weights to
the cut nodes of the IFG, since cut nodes are the smallest
set of nodes through which all the ﬂows pass through, and
assign zero weights to all non-cut nodes. For the second case,
we select the non-cut nodes as the trapping nodes, since all
information ﬂows will pass through the non-cut nodes, by
assigning nonzero weights to all non-cut nodes and assign
zero weights to all cut nodes. Figures 5 (a) and 5 (b) show
that the expected payoff of the defender takes higher values
when the min-cut nodes are chosen as the trapping nodes.
Also note that choosing a cut is better than selecting set of
nodes that are not a cut.

C. Case Study 3

comparing the two approaches, we use the knowledge of the
actual attack path as the ground truth. The attack path for the
data exﬁltration attack is 1 → 15 → 5 → 16 → 17 → 4 → 2 → 3
in the IFG given in Figure 3. The heuristic rules used for
identifying the trapping nodes are presented in Table III. Using
these rules, for the data exﬁltration attack, we identiﬁed the set
of nodes {2, 6, 12, 13, 16, 17} as the trapping nodes. Solution
to the DIFT vs. APT game returns the min-cut node set {2, 11}
as the trapping nodes. In this case study, we set W = 1 and
consequently θ = 1. The parameters of the game are set as
αD = 1, βD = −1, FN = 0.2, and FP = 0.

Resource cost for performing security analysis at a node vi

is given by

CD(vi) = c q(vi),

(32)

In this case study we compare the performance of the game
theoretic approach with a heuristic rule-based method. For

where c is the cost parameter for performing security analysis
and q(vi) is the fraction of information ﬂows passing through

Heuristic
Game solution

Table III: Heuristic rules used for identifying trapping nodes in
Case study 3

1

0.5

0

−0.5

f
f
o
y
a
p

s
’
T
F
I
D

−1

0

4

2
8
Resource cost parameter c

6

10

Figure 6: Plot shows variation of DIFT’s payoff for (i) min-cut
solution obtained as equilibrium of the game and (ii) heuristic rules-
based method, with respect to c.

node vi. The resource cost for conducting security analysis
is more for a node with higher fraction of ﬂows, i.e., a busy
node. Figure 6 presents a plot showing the variation of the
DIFT’s payoff with respect to c. For the data exﬁltration
attack considered and for the selection of the trapping nodes
{2, 6, 12, 13, 16, 17}, heuristic rule-based method will conduct
security analysis on the ﬂow at nodes 2, 16, and 17. On
the other hand, the game theoretic modeling will conduct
security analysis on the ﬂow at node 2. Table II presents the
fraction of the information ﬂows passing through nodes 2, 16,
and 17. Figure 6 shows that the hueristic rule-based method
performs better for lower values of c. This is expected since
when cost for conducting security analysis is negligible it is
better to analyze the ﬂow at multiple locations, as it increases
the probability of detection. As the cost parameter increases,
the game theoretic solution outperforms the heuristic. The
performance of the heuristic decreases drastically for higher
values of c as heuristic conducts security analysis at node
16 which is a busier node and hence incurs high resource
cost. The game, on the other hand, considers the resource
cost while computing the min-cut and hence chooses node
2 for conducting the security analysis. This validates that
the game theoretic approach provides a trade-off between the
effectiveness of detection and the cost of detection.

Table II: Fraction of ﬂows traversing nodes in IFG

Node vi
q(vi)

2
0.005705

16
0.167162

17
0.016177

VII. CONCLUSION

This paper provided a game-theoretic model for the detec-
tion of Advanced Persistent Threats (APTs) using Dynamic
Information Flow Tracking (DIFT). The interaction of APT
and DIFT is modeled as a stochastic game in which the
defender dynamically chooses locations (trapping nodes) to

System Call
read
read
read

Performed on File
/dev/mem
/etc/passwd
/etc/shadow

read

read
read
read
write
write
write
write
write
write
write
write
write
write
write
write
write
write
write
write
write
write
write

write

write

open
exec
exec
exec

exec

exec

*.ssh/id rsa

*.default/key3.db
*.default/logins.json
*.default/signons.sqlite
/dev/mem
/etc/*
/usr/local/*
/usr/local/bin/*
/var/spool/cron/crontabs/root
/bin/*
/boot/*
/var/*
/usr/bin/*
/dev/*
/etc/security/*
/usr/spool/*
/usr/etc/*
/usr/kvm/*
/usr/*
/usr/lib/*
*.default/key3.db
*.default/logins.json
*.default/signons.sqlite

/etc/hosts

*.default/extensions

*libpam*
bin/ip
/bin/ifconﬁg
/bin/netstat

/bin/chmod

/bin/chown

Description

Potentially
anomalous actions
on sensitive ﬁles/folder
Potentially
anomalous actions
on sensitive SSH ﬁles

Potentially

anomalous actions

on sensitive SSH ﬁles

Important
DNS information
Stores extensions
for Firefox
Used for
authentication
Used for gathering
information about
network
Changes permissions
of ﬁles/folders
Changes ownership
of ﬁles/folders

perform security analysis and the adversary chooses transi-
tions along attack paths in order to maximize the probability
of reaching the desired target. Before performing security
the defender is unable to distinguish whether a
analysis,
tagged information ﬂow at a node in the information ﬂow
graph is malicious or not and this results in the information
asymmetry of the players. Further, the defender is not accurate
in its detection process, which results in the generation of
false-positives and false-negatives. We modeled the strategic
interactions between DIFT and APT as a nonzero-sum, turn-
based stochastic game. The game captures the information
asymmetry among the players along with false-positives and
false-negatives of DIFT. Then we provided an approach to
compute Nash equilibrium of the game, using a minimum
capacity cut-set formulation. Finally, we implemented our
algorithm on real-world data for a data exﬁltration attack
obtained using the Reﬁnable Attack INvestigation (RAIN)
system. Extending the game model to address a multi-attacker

[24] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda, “Panorama:
Capturing system-wide information ﬂow for malware detection and
analysis,” ACM conference on Computer and communications security,
pp. 116–127, 2007.

[25] M. J. Sobel, “Noncooperative stochastic games,” The Annals of Math-

ematical Statistics, vol. 42, no. 6, pp. 1930–1935, 1971.

[26] J. B. Orlin, “A faster strongly polynomial minimum cost ﬂow algo-
rithm,” Operations Research, vol. 41, no. 2, pp. 338–350, 1993.
[27] S. M. Milajerdi, R. Gjomemo, B. Eshete, R. Sekar, and V. Venkatakr-
ishnan, “Holmes: Real-time APT detection through correlation of sus-
picious information ﬂows,” IEEE Symposium on Security and Privacy,
pp. 1137–1152, 2019.

[28] T. Chen, L.-A. Tang, Y. Sun, Z. Chen, and K. Zhang, “Entity embedding-
based anomaly detection for heterogeneous categorical events,” Interna-
tional Joint Conference on Artiﬁcial Intelligence, pp. 1396–1403, 2016.

case with multiple malicious ﬂows is a part of future work.

REFERENCES

[1] Y. Ji, S. Lee, E. Downing, W. Wang, M. Fazzini, T. Kim, A. Orso,
and W. Lee, “RAIN: Reﬁnable attack investigation with on-demand
inter-process information ﬂow tracking,” ACM SIGSAC Conference on
Computer and Communications Security, pp. 377–390, 2017.

[2] J. Newsome and D. Song, “Dynamic taint analysis: Automatic detection,
analysis, and signature generation of exploit attacks on commodity
software,” Network and Distributed Systems Security Symposium, 2005.
[3] M. Dalton, H. Kannan, and C. Kozyrakis, “Real-world buffer overﬂow
protection for userspace and kernelspace.” USENIX Security Symposium,
pp. 395–410, 2008.

[4] M. Dalton, C. Kozyrakis, and N. Zeldovich, “Nemesis: Preventing
authentication & access control vulnerabilities in web applications,”
USENIX Security Symposium, pp. 267–282, 2009.

[5] L. S. Shapley, “Stochastic games,” Proceedings of the National Academy

of Sciences, vol. 39, no. 10, pp. 1095–1100, 1953.

[6] K.-w. Lye and J. M. Wing, “Game strategies in network security,”
International Journal of Information Security, vol. 4, no. 1-2, pp. 71–86,
2005.

[7] R. Amir, “Stochastic games in economics and related ﬁelds: An
overview,” Stochastic Games and Applications, pp. 455–470, 2003.
[8] Q. Zhu and T. Bas¸ar, “Robust and resilient control design for cyber-
physical systems with an application to power systems,” IEEE Decision
and Control and European Control Conference (CDC-ECC), pp. 4066–
4071, 2011.

[9] A. Ja´skiewicz and A. S. Nowak, “Non-zero-sum stochastic games,”

Handbook of Dynamic Game Theory, pp. 1–64, 2016.

[10] T. Alpcan and T. Bas¸ar, “An intrusion detection game with limited
observations,” International Symposium on Dynamic Games and Ap-
plications, vol. 26, 2006.

[11] Q. Zhu, H. Tembine, and T. Bas¸ar, “Network security conﬁgurations: A
nonzero-sum stochastic game approach,” American Control Conference
(ACC), pp. 1059–1064, 2010.

[12] K. C. Nguyen, T. Alpcan, and T. Bas¸ar, “Stochastic games for security
in networks with interdependent nodes,” International Conference on
Game Theory for Networks, pp. 697–703, 2009.

[13] J. P. Hespanha and M. Prandini, “Nash equilibria in partial-information
games on Markov chains,” IEEE Conference on Decision and Control
(CDC), vol. 3, pp. 2102–2107, 2001.

[14] D. Sahabandu, B. Xiao, A. Clark, S. Lee, W. Lee, and R. Poovendran,
“DIFT games: dynamic information ﬂow tracking games for advanced
persistent threats,” IEEE Conference on Decision and Control (CDC),
pp. 1136–1143, 2018.

[15] S. Moothedath, D. Sahabandu, A. Clark, S. Lee, W. Lee, and R. Pooven-
dran, “Multi-stage dynamic information ﬂow tracking game,” Confer-
ence on Decision and Game Theory for Security, vol. 11199, pp. 80–
101, 2018.

[16] S. Moothedath, D. Sahabandu, J. Allen, A. Clark, L. Bushnell, W. Lee,
and R. Poovendran, “A game-theoretic approach for dynamic informa-
tion ﬂow tracking to detect multi-stage advanced persistent threats,”
IEEE Transactions on Automatic Control, 2020.

[17] D. Sahabandu, S. Moothedath, J. Allen, A. Clark, L. Bushnell, W. Lee,
and R. Poovendran, “Dynamic information ﬂow tracking games for
simultaneous detection of multiple attackers,” IEEE Conference on
Decision and Control (CDC), pp. 567–574, 2019.

[18] D. Sahabandu, S. Moothedath, J. Allen, A. Clark, L. Bushnell, W. Lee,
and R. Poovendran, “A game theoretic approach for dynamic infor-
mation ﬂow tracking with conditional branching,” American Control
Conference (ACC), pp. 2289–2296, 2019.

[19] R. Langner, “Stuxnet: Dissecting a cyberwarfare weapon,” IEEE Secu-

rity & Privacy, vol. 9, no. 3, pp. 49–51, 2011.

[20] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas, “Secure program
execution via dynamic information ﬂow tracking,” ACM SIGPLAN
Notices, vol. 39, no. 11, pp. 85–96, 2004.

[21] J. Clause, W. Li, and A. Orso, “Dytan: a generic dynamic taint analysis
framework,” International Symposium on Software Testing and Analysis,
pp. 196–206, 2007.

[22] M. N. Hossain, J. Wang, R. Sekar, and S. D. Stoller, “Dependence-
preserving data compaction for scalable forensic analysis,” USENIX
Security Symposium, pp. 1723–1740, 2018.
June
3.7.1.

[Online]. Avail-
able: https://docs.huihoo.com/doxygen/linux/kernel/3.7/timekeeping 8c.
html#a43b6023a02e25bd465f61768418271b1

[23] Linux Kernel

(2021,

17).

