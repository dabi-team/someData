9
1
0
2

v
o
N
1

]

R
C
.
s
c
[

1
v
6
1
5
0
0
.
1
1
9
1
:
v
i
X
r
a

MaxSAT Evaluation 2019 - Benchmark:
Identifying Security-Critical Cyber-Physical
Components in Weighted AND/OR Graphs

Mart´ın Barr`ere∗, Chris Hankin∗, Nicolas Nicolaou†, Demetrios G. Eliades†, Thomas Parisini‡
∗Institute for Security Science and Technology, Imperial College London, UK
{m.barrere, c.hankin}@imperial.ac.uk
†KIOS Research and Innovation Centre of Excellence, University of Cyprus
{nicolasn, eldemet}@ucy.ac.cy
‡Department of Electrical and Electronic Engineering, Imperial College London, UK
{t.parisini}@imperial.ac.uk

Abstract—This paper presents a MaxSAT benchmark focused
on identifying critical nodes in AND/OR graphs. We use AND/OR
graphs to model Industrial Control Systems (ICS) as they are able
to semantically grasp intricate logical interdependencies among
ICS components. However, identifying critical nodes in AND/OR
graphs is an NP-complete problem. We address this problem by
efﬁciently transforming the input AND/OR graph-based model
into a weighted logical formula that is then used to build and solve
a Weighted Partial MaxSAT problem. The benchmark includes
80 cases with AND/OR graphs of different size and composition
as well as the optimal cost and solution for each case.

I. PROBLEM OVERVIEW

Over the last years, Industrial Control Systems (ICS) such
as water treatment plants and energy facilities have become
increasingly exposed to a wide range of cyber-physical threats,
having massive destructive consequences. Our work is focused
on security metrics and techniques that can be used to measure
and improve the security posture of ICS environments [1].
these systems as they
We use AND/OR graphs to model
allow more realistic representations of the complex interdepen-
dencies among cyber-physical components that are normally
involved in real-world settings [2], [3]. In that context, we have
designed a security metric, detailed in [1], whose objective is
to identify the set of critical AND/OR nodes (ICS network
components) that must be compromised in order to disrupt the
operation of the system, with minimal cost for the attacker.

From a graph-theoretical perspective, our security metric
looks for a minimal weighted vertex cut in AND/OR graphs.
This is an NP-complete problem as shown in [3], [4], [5].
While well-known algorithms such as Max-ﬂow Min-cut [6]
and variants of it could be used to estimate such metric over
OR graphs in polynomial time, their use for general AND/OR
graphs is not evident nor trivial as they may fail to capture
the underlying logical semantics of the graph. In that context,

This work has been supported by the European Union’s Horizon 2020
research and innovation programme under grant No 739551 (KIOS CoE).
To appear in Proceedings of the MaxSAT Evaluation 2019 (MSE’19), https:
//maxsat-evaluations.github.io/2019/.

we take advantage of state-of-the-art MaxSAT techniques to
address our problem.

II. SIMPLE EXAMPLE
Let us consider a simple ICS network whose operational
dependencies are represented by the AND/OR graph shown in
Figure 1. The graph reads as follows: the actuator c1 depends
on the output of software agent d. Agent d in turn has two
alternatives to work properly; it can use either the readings of
sensor a and the output from agent b together, or the output
from agent b and the readings of sensor c together. In addition,
each cyber-physical component has an associated attack cost
that represents the effort required by an attacker to compromise
that component. Now, considering these costs, the question we
are trying to answer is: which nodes should be compromised
in order to disrupt the operation of actuator c1, with minimal
effort (cost) for the attacker? In other words, what is the least-
effort attack strategy to disable actuator c1?

Fig. 1. AND/OR graph with sensors, software agents and actuators

Our example involves many attack alternatives, however,
only one is minimal. The optimal strategy is to compromise
nodes a and c with a total cost of 4. The compromise of these
sensors will disable both AND nodes and consecutively the OR
node, which in turn will affect node d and ﬁnally node c1.

 
 
 
 
 
 
III. MAXSAT FORMULATION STRATEGY

Given a target node t, the input graph G can be used
as a map to decode the dependencies that node t relies on.
Therefore, G can be traversed backwards in order to produce
a propositional formula that represents the different ways in
which node t can be fulﬁlled. We call this transformation
fG(t). In our example, fG(c1) is as follows:

fG(c1) = c1 ∧ (d ∧ ((a ∧ b) ∨ (b ∧ c)))

The goal of the attacker, however, is precisely the opposite,
i.e., to disrupt node c1 somewhere along the graph. There-
fore, we are actually interested in satisfying ¬fG(c1), which
describes the means to disable c1. After applying a few logical
rules, the conjunctive normal form (CNF) of ¬fG(c1) is:

¬fG(c1) = (¬c1 ∨ ¬d ∨ ¬a ∨ ¬b) ∧ (¬c1 ∨ ¬d ∨ ¬b ∨ ¬c)

In practice, we do not use the naive CNF conversion
approach since it might lead to exponential computation times
over large graphs. Instead, we use the Tseitin transforma-
tion [7], which can be done in polynomial time and essentially
produces a new formula in CNF that is not strictly equivalent
to the original formula (because there are new variables) but
is equisatisﬁable. This means that, given an assignment of
truth values, the new formula is satisﬁed if and only if the
original formula is also satisﬁed. Under that perspective, a
logical assignment such that ¬fG(t) = true will indicate
which nodes must be compromised (i.e. logically falsiﬁed) in
order to disrupt the operation of the system.

Considering the CNF formula produced by the Tseitin
transformation and a cost function ϕ(n) that indicates the
attack cost of a node n, we model our problem as a Weighted
Partial MaxSAT problem [8]. Hard clauses are essentially the
clauses within the CNF formula:

¬c1 ∨ ¬d ∨ ¬a ∨ ¬b

¬c1 ∨ ¬d ∨ ¬b ∨ ¬c

whereas soft clauses correspond to each atomic node in the
graph with their corresponding penalties (costs) as follows:

a
ϕ(a) = 2

b
ϕ(b) = 5

c
ϕ(c) = 2

d
ϕ(d) = 10

c1
ϕ(c1) = inf

Therefore, a MaxSAT solver will try to minimise the number
of falsiﬁed variables as well as their weights, which in our
problem equals to minimise the compromise cost for the
attacker. Note:
the additional variables introduced by the
Tseitin transformation have cost/weight 0 in the formulation.

IV. AND/OR GRAPH GENERATION

The benchmark presented in this paper

relies on
META4ICS, a Java-based security metric analyser for ICS [1],
[9]. We have used META4ICS to produce and analyse syn-
thetic pseudo-random AND/OR graphs of different size and
composition. To create an AND/OR graph of size n, we ﬁrst
create the target node. Afterwards, we create a predecessor
which has one of the three types (atomic, AND, OR) accord-
ing to a probability given by a compositional conﬁguration
predeﬁned for the experiment. For example, a conﬁguration of

(60, 20, 20) means 60% of atomic nodes, 20% of AND nodes
and 20% of OR nodes. We repeat this process creating children
on the respective nodes until we approximate the desired size
of the graph n. Node costs, represented by ϕ(n), are integer
values randomly selected between 1 and 100.

The benchmark also includes the solutions obtained by
META4ICS for each case, including resolution time, total cost
and critical nodes. Currently, META4ICS uses SAT4J [10]
and a Python-based linear programming approach as MaxSAT
solvers. The tool runs all available solvers in parallel and picks
the ﬁrst one that comes up with a valid solution.

V. BENCHMARK DESCRIPTION

Out dataset includes 80 cases in total, and can be obtained
at [9]. There are four different sizes of AND/OR graphs
involving 5000, 10000, 15000, and 20000 nodes (20 cases
each). For each graph size, we consider two different graph
conﬁgurations, 80/10/10 and 60/20/20, which determine the
composition of the graphs (10 cases each). Table I shows the
identiﬁers of the cases within each one of these categories.

Nodes/Conﬁgurations

80/10/10 conﬁg

60/20/20 conﬁg

5000

10000

15000

20000

1 to 10

21 to 30

41 to 50

61 to 70

11 to 20

31 to 40

51 to 60

71 to 80

TABLE I
BENCHMARK CASES AND CONFIGURATIONS

Each case is speciﬁed in an individual .wcnf (DIMACS-like,
weighted CNF) ﬁle named with the case id and the number of
nodes involved. The weight for hard clauses (top value) has
been set to 1.0 × 106. Tables II and III detail each case as well
as the results obtained with our tool. The ﬁeld id identiﬁes
each case; gNodes indicates the total number of nodes in
the original AND/OR graph; gAT, gAND and gOR indicate
the approximate composition of the graph in terms of atomic
(cyber-physical components), AND and OR nodes; tsVars
and tsClauses show the number of variables and clauses
involved in the MaxSAT formulation after applying the Tseitin
transformation; cost and time show the total solution cost
reported by META4ICS and the time needed for its resolution
in milliseconds; solution shows the set of critical nodes ex-
pressed as a list of nodes with their respective costs (weights).
These experiments have performed on a MacBook Pro (15-
inch, 2018), 2.9 GHz Intel Core i9, 32 GB 2400 MHz DDR4.
As a ﬁnal remark, it can be observed that some cases with
the same size and composition parameters have very different
resolution times. This is an interesting phenomenon and it is
due to the internal logical composition of the AND/OR graph
and how well the underlying solver performs with each case.
Within our experiments, we have observed that none of the two
solvers used in META4ICS is faster than the other in all of the
cases. We believe this is an interesting problem that should be
further investigated in the context of MaxSAT solvers.

2

id

gNodes

gAT

gAND

gOR

tsVars

tsClauses

cost

time

solution

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

5000

10000

10000

10000

10000

10000

10000

10000

10000

10000

10000

10000

10000

10000

10000

10000

10000

10000

10000

3986

4015

3997

3982

4018

4013

4004

3999

4010

3973

3008

3020

3017

3026

3027

3004

3017

3021

3022

3011

8017

7991

8023

8035

7996

7967

7954

8013

8008

8026

6035

6028

6058

6012

6055

5993

6064

6015

540

515

514

506

503

514

500

508

502

531

1025

1020

969

981

971

1013

1053

996

991

988

1021

1003

987

967

1054

1006

1038

1011

967

1023

1996

1989

2015

2001

1958

1954

1927

1993

475

471

490

513

480

474

497

494

489

497

968

961

1015

994

1003

984

931

984

988

1002

8987

9016

8998

8983

9019

9014

9005

9000

9011

8974

8009

8021

8018

8027

8028

8005

8018

8022

8023

8012

963

18018

1007

17992

991

999

18024

18036

951

17997

1028

1009

17968

17955

977

18014

1026

18009

952

18027

1970

16036

1984

1928

1988

1988

2054

2010

1993

16029

16059

16013

16056

15994

16065

16016

23990

24019

24001

23986

24022

24017

24008

24003

24014

23977

23012

23024

23021

23030

23031

23008

23021

23025

23026

23015

48021

47995

48027

48039

48000

47971

47958

48017

48012

48030

46039

46032

46062

46016

46059

45997

46068

46019

20

1045

[(2:9),(5120:4),(8900:4),(8904:3)]

3

1

3

2

3

1

5

2

9

8

1

863

847

850

837

855

840

831

827

838

825

820

[(940:1),(3390:1),(3424:1)]

[(7950:1)]

[(874:2),(5081:1)]

[(6:2)]

[(5235:3)]

[(4:1)]

[(8796:5)]

[(6219:2)]

[(7:3),(6319:1),(6859:5)]

[(1033:6),(4416:2)]

[(3366:1)]

100

2157

[(2:6),(5192:7),(6527:28),(7195:3),(7236:20),(7500:7),
(7556:10),(7919:10),(7943:3),(7950:2),(7972:4)]

3

16

2

7

22

26

17

1

17

2

57

4

9

2

22

5

1

823

823

826

827

822

828

816

1033

911

894

4398

927

908

858

917

862

884

289

4206

22

1

3

8

33

4

859

849

850

851

855

850

289

4965

[(2:3)]

[(2:16)]

[(7497:2)]

[(5844:7)]

[(6103:5),(6119:17)]

[(4118:7),(4144:19)]

[(17:10),(549:4),(5846:3)]

[(456:1)]

[(2:17)]

[(365:2)]

[(10137:2),(11192:2),(14319:1),(4:14),(607:2),(7746:9),
(7780:2),(7871:2),(8108:12),(8307:5),(9879:2),(9909:4)]

[(6:4)]

[(11920:7),(17849:2)]

[(14335:2)]

[(9:6),(428:1),(549:4),(679:7),(8781:2),(15313:2)]

[(149:3),(190:2)]

[(4553:1)]

[(13217:8),(15933:12),(2:29),(2362:2),(2573:1),(3452:20),
(3510:8),(3552:35),(4168:12),(4187:29),(4226:1),(4438:78),
(4664:51),(5550:2),(6920:1)]

[(3:22)]

[(13604:1)]

[(11999:3)]

[(2:8)]

[(14291:2),(14602:28),(14991:3)]

[(6:4)]

[(10212:1),(10217:41),(10224:14),(10253:21),(10303:4),(10588:8),
(11576:19),(11974:36),(12267:10),(12396:3),(12724:1),(12794:21),
(12846:4),(12934:15),(13374:1),(13850:17),(14318:19),(15239:1),
(15272:2),(3169:2),(3794:20),(3862:1),(3934:8),(4090:8),
(8243:5),(8248:4),(9905:3)]

39

40

10000

10000

6012

6042

1946

1956

2043

2003

16013

16043

46016

46046

4

1

856

858

[(11750:4)]

[(4548:1)]

TABLE II
BENCHMARK DESCRIPTION - CASES 1 TO 40

3

id

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

gNodes

gAT

gAND

gOR

tsVars

tsClauses

cost

time

solution

15000

11999

15000

12016

15000

11983

15000

11936

15000

12006

15000

11995

15000

11973

15000

12021

15000

11957

15000

12009

15000

9057

15000

15000

15000

15000

15000

15000

15000

15000

15000

9072

9023

9062

9006

9050

9039

9057

9047

9036

20000

16012

20000

15998

20000

15962

20000

15961

20000

16053

20000

16028

20000

15983

20000

15979

20000

16008

20000

16119

20000

12068

20000

12028

20000

12054

20000

12051

20000

12103

20000

12000

20000

12127

20000

11957

20000

12073

20000

12048

1498

1527

1454

1561

1528

1465

1507

1490

1528

1518

2979

2949

3072

2973

2983

2936

2996

2967

3034

2963

2010

2039

2045

2026

1999

1983

2050

2006

1990

1921

3848

3962

4046

4033

3993

4004

3851

4006

3964

3940

1504

1458

1564

1504

1467

1541

1521

1490

1516

1474

2965

2980

2906

2966

3012

3015

2966

2977

2920

3002

1979

1964

1994

2014

1949

1990

1968

2016

2003

1961

4085

4011

3901

3917

3905

3997

4023

4038

3964

4013

27000

27017

26984

26937

27007

26996

26974

27022

26958

27010

24058

24073

24024

24063

24007

24051

24040

24058

24048

24037

36013

35999

35963

35962

36054

36029

35984

35980

36009

36120

32069

32029

32055

32052

32104

32001

32128

31958

32074

32049

72003

72020

71987

71940

72010

71999

71977

72025

71961

72013

69061

69076

69027

69066

69010

69054

69043

69061

69051

69040

96016

96002

95966

95965

96057

96032

95987

95983

96012

96123

92072

92032

92058

92055

92107

92004

92131

91961

92077

92052

5

2

6

1

1

34

2

36

4

10

1152

982

1095

939

955

2968

932

1092

916

992

[(3095:2),(25236:1),(25957:2)]

[(26790:2)]

[(23:4),(25147:2)]

[(6:1)]

[(4963:1)]

[(6:25),(22122:1),(22891:6),(23040:2)]

[(4:2)]

[(76:4),(416:20),(2148:1),(9656:4),(17438:1),(23881:6)]

[(14464:2),(24824:2)]

[(10163:1),(19872:1),(22070:3),(26038:5)]

214

6335

[(11377:5),(16191:11),(17087:52),(17422:3),(18195:16),(18367:4),
(18383:1),(18593:6),(18991:3),(19054:5),(19448:3),(19551:32),
(21785:1),(21807:10),(22034:8),(22087:32),(23437:15),
(6815:3),(6919:4)]

49

10

45

100

138

11

66

11

116

16

1

14

4

2

1

1

20

18

5

25

3

7

28

5

9

18

2

49

50

1024

940

2000

4397

7839

924

8208

1015

8376

4456

1020

1134

1004

1014

960

1020

4334

2736

978

1034

983

1006

1094

965

995

976

938

1757

1432

[(2:1),(14480:7),(17852:41)]

[(1425:6),(20681:4)]

[(6912:4),(9199:25),(12387:13),(13814:2),(14190:1)]

[(1496:1),(4027:6),(5220:2),(5781:1),(16796:89),(21242:1)]

[(11358:4),(1460:7),(16765:3),(3845:81),(666:8),
(7936:1),(8733:8),(8870:18),(8959:8)]

[(12114:9),(12732:2)]

[(16552:13),(2:53)]

[(3226:4),(21769:7)]

[(11185:6),(12042:16),(12906:26),(13556:1),
(13652:7),(14234:8),(2:52)]

[(77:2),(7769:5),(18831:1),(24368:8)]

[(12:1)]

[(1370:6),(2437:1),(9642:1),(26442:4),(28443:2)]

[(14:4)]

[(11:2)]

[(30735:1)]

[(8:1)]

[(1147:2),(3275:2),(7063:1),(7351:5),(9616:3),
(14569:1),(23153:4),(25514:1),(26598:1)]

[(5:18)]

[(4:5)]

[(2:25)]

[(31797:3)]

[(22596:5),(22673:1),(24195:1)]

[(26825:4),(29603:3),(30184:20),(30210:1)]

[(19799:5)]

[(15575:3),(17158:6)]

[(2821:3),(4451:13),(9408:2)]

[(12459:1),(20894:1)]

[(20965:47),(24362:2)]

[(2537:4),(7471:2),(7483:8),(15594:5),(22496:1),(23848:2),
(27795:9),(28554:19)]

TABLE III
BENCHMARK DESCRIPTION - CASES 41 TO 80

4

REFERENCES

[1] M. Barr`ere, C. Hankin, N. Nicolaou, D. Eliades, and T. Parisini,
“Identifying Security-Critical Cyber-Physical Components in Industrial
Control Systems,” https://arxiv.org/abs/1905.04796, May 2019.

[2] Y. Desmedt and Y. Wang, “Maximum Flows and Critical Vertices in
AND/OR Graphs,” in Computing and Combinatorics, O. H. Ibarra and
L. Zhang, Eds. Springer Berlin Heidelberg, 2002, pp. 238–248.
[3] ——, “Analyzing Vulnerabilities Of Critical Infrastructures Using Flows
And Critical Vertices In And/Or Graphs,” Int. J. Found. Comput. Sci.,
vol. 15, no. 1, pp. 107–125, 2004.

[4] G. Jakimoski and M. Burmester, “Using Faulty Flows in AND/OR
Graphs to Model Survivability and Reliability in Distr. Systems,” 2004.
[5] U. dos Santos Souza, F. Protti, and M. D. da Silva, “Revisiting the
complexity of and/or graph solution,” Journal of Computer and System
Sciences, vol. 79, no. 7, pp. 1156 – 1163, 2013.

[6] L. R. Ford and D. R. Fulkerson, Flows in Networks, ser. RAND

Corporation research study. University Press, 1962.

[7] G. S. Tseitin, “On the Complexity of Derivation in Propositional
Calculus,” in Studies in Constructive Mathematics and Mathematical
Logic, Part II, A. Slisenko, Ed., 1970, pp. 234–259.

[8] J. Davies and F. Bacchus, “Solving MAXSAT by Solving a Sequence
of Simpler SAT Instances,” in Principles and Practice of Constraint
Programming – CP 2011, J. Lee, Ed. Springer, 2011, pp. 225–239.
[9] M. Barr`ere, “META4ICS - Metric Analyser for Industrial Control

Systems,” https://github.com/mbarrere/meta4ics, May 2019.

[10] “SAT4J,” http://www.sat4j.org/, Cited June 2019.

5

