8
1
0
2

r
p
A
7
2

]

O
L
.
s
c
[

1
v
6
8
4
0
1
.
4
0
8
1
:
v
i
X
r
a

Consistency Checking of Functional
Requirements

Simone Vuotto

1

2

Universit`a degli Studi di Genova
simone.vuotto@edu.unige.it
Universit`a degli Studi di Sassari

svuotto@uniss.it

Abstract. Requirements are informal and semi-formal descriptions of
the expected behavior of a system. They are usually expressed in the
form of natural language sentences and checked for errors manually, e.g.,
by peer reviews. Manual checks are error-prone, time-consuming and not
scalable. With the increasing complexity of cyber-physical systems and
the need of operating in safety- and security-critical environments, it
became essential to automatize the consistency check of requirements
and build artifacts to help system engineers in the design process.

1

Introduction

The assessment of requirements is an important yet costly and complex task,
still largely carried manually. The Requirements Engineering (RE)[7] research
ﬁeld aims at developing tools and techniques to analyze and handle requirements
in a more eﬃcient and automatic way. One of the main challenges is to evaluate
requirements consistency: informally, it means detecting errors, missing informa-
tion and deﬁciencies that can compromise the interpretation and implementation
of the intended system behavior. At a syntactic level, this may involve the check
for compliance with standards and guidelines, such as the use of a restricted
grammar and vocabulary. We call this task Compliance Checking.

However, most of the inconsistencies reside at a semantic level, i.e. in their
intended meaning. This call for an interpretation and reasoning of requirements
semantics. The formalization and translation of requirements into a formal rep-
resentation is an interesting and open research question. A recurrent solution
in the literature is the use of Property Speciﬁcation Patterns (PSPs), ﬁrst in-
troduced by [3]. PSPs provide a direct mapping from English-like structured
natural languages to one or more logics. A survey of all available patterns and
their translation has been made by [2]. Other approaches, like [4], employ Nat-
ural Language Processing techniques to extract the representation directly from
fully natural language requirements.

Given the set of requirements represented in a formal logic, the main research
question is what kind of reasoning we can employ and how to do that. We for-
mally deﬁne this task Consistency Checking analysis [5]. Consistency Checking

 
 
 
 
 
 
can range from simple variables type and domain checks to more complex activi-
ties, like the evaluation of the intended system behavior over time. In particular,
we are interested in checking if the set of requirements together “make sense”,
namely answering the question:

Given the set of requirements, does a system exist that can satisfy them all at
the same time?

The choice of which logic to use is a key research question and it largely aﬀects
the reasoning power and the kind of requirements that can be formalized: quali-
tative, real-time and/or probabilistic. We decided to use Linear Temporal Logic
(LTL)[8] because it is widely used in the literature and it has a good balance
between expressiveness and complexity. In particular, answering the aforemen-
tioned question can be easily translated in a LTL satisﬁability check, largely
studied and with many eﬃcient tools available [9].

The satisﬁability check in turn brings other two research questions:

– Vacuity Check : if the formula is satisﬁable, is it satisﬁable in a meaningful
way? For example, the linear temporal logic (LTL) speciﬁcation (cid:3)(msg →
♦rcv) (“every message is eventually received”) is satisﬁed vacuously in a
model with no messages, probably not the expected behavior.

– Inconsistent Requirements Explanation: if the requirements are inconsistent,
which is the minimum set of them that create the inconsistency? The number
of requirements may be really large, but only few of them making the system
unfeasible.

Finally, the formalization of requirements and the consistency checking are
enablers for other tasks we would like to tackle in this Ph.D. project, namely
the automatic generation of test suites and runtime monitors. The full overview
of the tool that we are designing is depicted in Figure 1. We are now focusing
on the NL2FL and Consistency Checker modules.

2 Consistency of Property Speciﬁcation Patterns

Our ﬁrst contribution [6], developed in the context of the H2020 CERBERO
European Project [1], presented a tool for the consistency checking of qualitative
requirements expressed in form of PSPs with constrained numerical signals. An
example of requirement that we can handle is:

Globally, it is always the case that if proximity sensor < 20 holds, then
arm idle eventually holds.

We ﬁrst translate every requirement ri ∈ R in LTL(DC ), an extension of LTL
over a constraint system DC = (R,<,=), with atomic constraints of the form
x < c and x = c (where c ∈ R is a constant real number and ‘<” and “=” have
the usual interpretation). We then show how the new problem can be reduced
to LTL satisﬁability. Let X(φ) be the set of numerical variables and C(φ) be the
set of constants that occur in φ. We compute:

Knowledge Base

g

Requirements

Compliance
Checker

NL2FL

Feedback

Report

Test Suit

Monitor

Consistency
Checker

Automatic
Test Generator

Runtime
Monitor Builder

Formal
Representation

Fig. 1. General framework of the requirement analysis tool

– the LTL(DC ) formula φi for every requirement ri ∈ R;
– the conjunctive formula φ = φ1 ∧ ... ∧ φn;
– a set Mx(φ) of boolean propositions representing possible values of x ∈ X(φ);
– the formula QM encoding the constraints over Mx(φ) ∀x ∈ X(φ);
– the formula φ′ that substitute all x ∈ X(φ) in φ with a set of boolean

propositions from Mx(φ);

Given the LTL(DC ) formula φ over the set of Boolean atoms P rop and the
terms C(φ) ∪ X(φ) we have that φ is satisﬁable if and only if the LTL formula
φM → φ′ is satisﬁable. This result is important because it shows that LTL(DC )
is decidable and that we can exploit state-of-the-art LTL model checkers.

In the second part of the paper we translate our encoding in diﬀerent formats
for of-the-shelf model checkers and we compare their performance. We conclude
with the scalability analysis and the methodology application to a robotic arm
use-case.

3 Future work

In order to reduce the number of errors in the speciﬁcation, we have partially
implemented an algorithm to check the relationship among requirements. This
is a ﬁrst step to prevent vacuous results, but more work is needed.

Connected Requirements Check Given a set of requirements R = {r1, ..., rn}, we
want to check if one or more of them are completely unrelated from the others,
meaning that they describe some behaviors that don’t interact with the main
bulk of the system. This may happen in an underspeciﬁed requirements set or for
some spelling errors (e.g. armidle is written in place of arm idle in the previous
example). To ﬁnd these faulty requirements we ﬁrst build the undirected graph
G = (V, E) representing the connections in R, such that:

– vi ∈ V ∀ri ∈ R;
– (i, j) ∈ E if X(ri) ∩ X(rj) 6= ∅ ∀ri, rj ∈ R, i 6= j

where X(ri) is set of variables, boolean or numerical, that appear in ri. We
then compute all the connected components in G. If the number of components
in greater then one, we ﬁnd the smallest one (i.e. the component with the lowest
number of vertex) and report it to the user.

Currently we are also focusing our attention on the Inconsistent Require-
ments Explanation problem. We implemented a simple algorithm that iterate
over all ri ∈ R and perform the consistency check on the set R \ ri. We keep ri
in R only if the new set is shown consistent, and we discard it otherwise. The
algorithm terminates when all the requirements in the original set are checked.
This algorithm eﬀectively ﬁnd a solution, but it is quite ineﬃcient. Therefore, we
are seeking for a better algorithm which exploits the structure of the problem.
Finally, for future works we would also like to both extend the natural lan-
guage interface with less restrictive constraints and adopt a more expressive
logic. In particular, we are interested in probabilistic logics such PCTL, but the
consistency checking problem is diﬃcult to deﬁne in this case and more research
is needed.

Acknowledgments The research of Simone Vuotto is funded by the EU Commis-
sion H2020 Programme under grant agreement N.732105 (CERBERO project).

References

1. H2020 Cerbero Project Website. http://www.cerbero-h2020.eu/
2. Autili, M., Grunske, L., Lumpe, M., Pelliccione, P., Tang, A.: Aligning qualitative,
real-time, and probabilistic property speciﬁcation patterns using a structured en-
glish grammar. IEEE Transactions on Software Engineering 41(7), 620–638 (2015)
3. Dwyer, M.B., Avrunin, G.S., Corbett, J.C.: Patterns in property speciﬁcations for
ﬁnite-state veriﬁcation. In: Proceedings of the 21st International conference on Soft-
ware engineering. pp. 411–420 (1999)

4. Ghosh, S., Elenius, D., Li, W., Lincoln, P., Shankar, N., Steiner, W.: Arsenal: auto-
matic requirements speciﬁcation extraction from natural language. In: NASA For-
mal Methods Symposium. pp. 41–46. Springer (2016)

5. Heitmeyer, C.L., Jeﬀords, R.D., Labaw, B.G.: Automated consistency checking of re-
quirements speciﬁcations. ACM Transactions on Software Engineering and Method-
ology (TOSEM) 5(3), 231–261 (1996)

6. Narizzano, M., Pulina, L., Tacchella, A., Vuotto, S.: Consistency of property speci-
ﬁcation patterns with boolean and constrained numerical signals. In: NASA Formal
Methods Symposium. pp. 383–398. Springer (2018)

7. Nuseibeh, B., Easterbrook, S.: Requirements engineering: a roadmap. In: Proceed-
ings of the Conference on the Future of Software Engineering. pp. 35–46. ACM
(2000)

8. Pnueli, A.: The temporal logic of programs. In: Foundations of Computer Science,

1977., 18th Annual Symposium on. pp. 46–57. IEEE (1977)

9. Rozier, K.Y., Vardi, M.Y.: Ltl satisﬁability checking. International journal on soft-

ware tools for technology transfer 12(2), 123–137 (2010)

