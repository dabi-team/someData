This is authors accepted copy, for final version of the paper please refer to: Mohd Najwadi Yusoff, Ali 
Dehghantanha, Ramlan Mahmod, “Forensic Investigation of Social Media and Instant Messaging 
Services in Firefox OS: Facebook, Twitter, Google+, Telegram, OpenWapp, and Line as Case Studies” 
Pages 41-62, Chapter 4, (Elsevier) Contemporary Digital Forensic Investigations Of Cloud And Mobile 
Applications, 2017 
Forensic  Investigation  of  Social  Media  and  Instant  Messaging  Services  in 
Firefox  OS:  Facebook,  Twitter,  Google+,  Telegram,  OpenWapp and  Line as 
Case Studies  

Mohd Najwadi Yusoff 
School of Computer Science, Universiti Sains Malaysia, Penang, Malaysia. 
mohd.najwadi@gmail.com 

Ali Dehghantanha 
School  of  Computing,  Science  and  Engineering,  University  of  Salford,  Manchester,  United 
Kingdom.  
A.Dehghantanha@Salford.ac.uk 

Ramlan Mahmod 
Faculty of Computer Science and Information Technology, Universiti Putra Malaysia, Serdang, 
Malaysia.  
ramlan@upm.edu.my 

Abstract 

Mobile devices are increasingly  utilized to access social media and instant messaging services, 
which allow users to communicate with others easily and quickly. However, the misuse of social 
media and instant messaging services facilitated conducting different cybercrimes such as cyber 
stalking, cyber bullying, slander spreading and sexual harassment. Therefore, mobile devices are 
an important evidentiary piece in digital investigation. In this chapter, we report the results of our 
investigation  and  analysis  of  social  media  and  instant  messaging  services  in  Firefox  OS.  We 
examined three social media services (Facebook, Twitter and Google+) as well as  three instant 
messaging services (Telegram, OpenWapp and Line). Our analysis may pave the way for future 
forensic investigators to trace and examine residual remnants of forensics value in FireFox OS. 

Keywords:  Firefox  OS  forensics;  mobile  forensics;  social  media  forensics;  instant  messaging 
investigation
forensics; 

applications 

mobile 

 
 
 
 
 
 
1. Introduction 

The  exponential  growth  of  social  media  and  instant  messaging  applications  facilitated 
development  of  many  serious  cybercrime  and  malicious  activities 
(Mohtasebi  and 
Dehghantanha, 2011a). Cybercriminals are constantly changing their strategies to target rapidly 
growing  social  media  and  instant  messaging  users.  The  misuse  of  social  media  and  instant 
messaging  in  mobile  devices  may  allow  cybercriminals  to  utilize  these  services  for  malicious 
purposes  (Mohtasebi  and  Dehghantanha,  2011b)  such  as  spreading  malicious  codes,  obtaining 
and  disseminating  confidential  information  etc.  Many  social  media  and  instant  messaging 
providers have extended their services to mobile platforms (Dezfouli et al., 2015) which worsen 
the situation as users are in danger of losing even more private information (Taylor et al., 2012). 
Copyright infringement, cyber stalking, cyber bullying, slander spreading and sexual harassment 
are becoming serious threats to social media and instant messaging mobile users (Dezfouli et al., 
2013). Therefore, it is common to confront with different types of mobile devices during variety 
of forensics investigation cases (Damshenas et al., 2014). Mobile devices are now an important 
source  of  forensic  remnants  relevant  to  users  social  media  and  instant  messaging  activities 
(Mohtasebi  and  Dehghantanha,  2013).  However,  difference  between  mobile  devices  mandate 
forensics  investigators  to  develop  customized  methods  and  techniques  for  investigation  of 
different phones (Mohtasebi et al., 2012).  

With the emergence of smartphones, almost all parts of phones such as internal storage, 
flash  memory  and  internal  volatile  memory  contains  valuable  evidences  (Yang  et  al.,  2016). 
Chen  extracted  SMS,  phone  book,  call  recording,  scheduling,  and  documents  from  Windows 
Mobile OS via Bluetooth, Infrared and USB using Microsoft ActiveSync (Chen et al., 2009). The 
acquired data were extracted from mobile phone internal storage, SIM card as well as removable 
memory.  Irwin and Hunt  have  successfully mapped internal  and external  memory of Windows 
Mobile ver.5 running on IPAQ Pocket PC over wireless connections using their own developed 
forensic  tools  (Irwin  and  Hunt,  2009).  Pooters  has  developed  a  forensic  tool  called  Symbian 
Memory  Imaging  Tool  (SMIT)  to  create  bit-by-bit  copies  of  the  internal  flash  memory  of 
Symbian  OS  phones  such  as  Nokia  E65,  E70  and  N78  model  (Pooters,  2010).  Lessard  and 
Kessler  (Lessard  and  Kessler,  2010)  have  acquired  a  bit-by-bit  logical  image  of  a  HTC  Hero 
memory using UNIX dd command and analyzed the resulted images using AccessData Forensic 
Toolkit  (FTK)  Imager  v2.5.1  (Accessdata,  2007).  Gómez-Miralles  and  Arnedo-Moreno  have 
utilized  a  Jailbroken  iPad’s  camera  connection  kit  to  acquire  an  image  of  the  device  via  USB 
connection  (Gómez-Miralles  and  Arnedo-Moreno,  2012).  Iqbal  has  enhanced  Gómez-Miralles 
and  Arnedo-Moreno  method  by  developing  a  method  to  acquire  iOS  memory  images  without 
jail-breaking the device  (Iqbal et al., 2012). Sylve has presented a methodology and toolset for 
acquisition  volatile  physical  memory  of  Android  devices  by  creating  a  new  kernel  module  for 
dumping the memory (Sylve et al., 2012). 

Beyond evidence acquisition, many researchers have shown big interest in investigating 
social  media and instant messaging services on different  mobile platforms.  Husain  and Sridhar 
have  analyzed  AIM,  Yahoo!  Messenger  and  Google  Talk  instant  messaging  applications  in 
Apple  iOS  to  detect  potential  application  of  these  instant  messaging  services,  particularly  in 

 
 
 
 
 
 
cyber  bullying  and  cyber  stalking  (Husain  and  Sridhar,  2010).  They  have  managed  to  detect 
username,  password,  buddy  list,  last  login  time  and  conversation  contents  together  with 
timestamp.  Jung  has  analyzed  eight  social  media  applications  in  Apple  iOS  namely  Cyworld, 
Me2Day, Daum Yozm, Twitter, Facebook, NateOn UC., KakaoTalk and MyPeople (Jung et al., 
2011)  and  managed  to  retrive  user  info,  friend  list,  message,  contact  and  media  informtion  of 
each  application.  Tso  has  observed  the  diversification  of  the  backup  files  for  Facebook, 
WhatsApp  Messenger,  Skype,  Windows  Live  Messenger  and  Viber  in  Apple  iOS  (Tso  et  al., 
2012).  Anglano  has  analyzed  WhatsApp  Messenger  application  remnants  on  an  Android 
smartphone and reconstructed the list of contacts and the chronology of communicated messages 
(Anglano,  2014).  Karpisek  has  successfully  decrypted  the  network  traffic  of  WhatsApp 
Messenger and managed t obtain forensic artifact related to call features and visualized messages 
that  have  been  exchanged  between  users  (Karpisek  et  al.,  2015).  Walnycky  has  examined  20 
popular instant messaging applications on Android platform and  has  reconstructed some or the 
entire  message  content  of  16  applications  (Walnycky  et  al.,  2015).  Said  has  conducted  a 
comparative study of Facebook and Twitter remnants on Apple iOS, Windows Mobile and RIM 
BlackBerry (Said et al., 2011) and extracted Facebook and Twitter remnants of Apple iOS, and 
Facebook. Mutawa has compared evidences of Facebook, Twitter and MySpace in three different 
operating  systems  namely  Apple  iOS,  Google  Android  and  RIM  BlackBerry  and  could  not 
recover  any  artifact  from  Blackberry  while  iPhones  and  Android  contained  many  valuable 
artefacts (Al Mutawa et al., 2012). Iqbal (Iqbal et al., 2014) has compared artifacts of Samsung’s 
ChatON application between a Samsung Galaxy Note running Android 4.1 and an Apple iPhone 
running with iOS 6  and managed to detect all sent and received messages with timestamp and 
location of the sent  files  on both  platforms. Dezfouli  investigated  Facebook, Twitter,  LinkedIn 
and  Google+  on  Android  and  Apple  iOS  platforms  and  managed  to  recover  many  artifacts 
including  username,  contact  information,  location,  friend  list,  social  media  post,  messages, 
comments and IP addresses of selected social media applications on both platforms (Dezfouli et 
al.,  2015).  Table  1  is  summarizing  the  literature  on  social  media  and  instant  messaging 
investigation forensics.  

Table 1 - Summary of Social Media and Instant Messaging Investigation on  
Multiple Mobile Platforms 

Researcher(s) 
Husain and Sridhar 2010 

Jung et al. 2011 

Tso et al. 2012 

Anglano 2014 
Karpisek et al. 2015  
Walnycky et al. 2016 

Application(s) 
AIM, Yahoo! Messenger, 
Google Talk 
Cyworld, Me2Day, Daum 
Yozm, Twitter, Facebook, 
NateOn UC., KakaoTalk, 
MyPeople 
Facebook, WhatsApp 
Messenger, Skype, Windows 
Live Messenger, Viber 
WhatsApp Messenger 
WhatsApp Messenger 
WhatsApp Messenger, Viber, 
Instagram, Okcupid, ooVoo, 

Platform(s) 
Apple iOS 

Apple iOS 

Apple iOS 

Google Android 
Google Android  
Google Android 

 
 
 
Tango, Kik, Nimbuzz, eetMe, 
MessageMe, TextMe, Grindr, 
HeyWire, Hike, textPlus, 
Facebook Messenger, Tinder, 
Wickr, Snapchat, Blackberry 
Messenger 
Facebook, Twitter 

Said et al. 2011 

Apple iOS, Windows Mobile, 
RIM BlackBerry 

Al Mutawa et al. 2012 

Facebook, Twitter, MySpace  Apple iOS, Google Android, 

Iqbal et al. 2014 
Dezfouli et al. 2015 

Samsung’s ChatON 
Facebook, Twitter, LinkedIn, 
Google+  

RIM Blackberry 
Apple iOS, Google Android 
Apple iOS, Google Android 

As  can  be  seen  from  Table  1,  there  was  no  previous  work  investigating  remnants  of 
Facebook, Twitter, Google+, Telegram, OpenWapp and Line applications on Firefox OS (FxOS) 
which is the gap targeted in this paper. In this chapter, we present investigation of a Geeksphone, 
model  name  Peak  (Geeksphone,  2013)  running  FxOS  1.1.1  as  the  main  subject  of  the 
investigation.  Two  binary  images  were  taken  from  the  phone  internal  storage  and  internal 
memory  and  then  valuable  forensics  remnants  were  examined.  We  have  mainly  interested  in 
evidential  remnants  of  user  activities  with  Facebook,  Twitter,  Google+,  Telegram,  OpenWapp 
and Line applications.  

The  rest  of  this  chapter  is  organized  as  follows.  In  section  2,  we  will  explain  the 
methodology used in our research and in section 3, we will outline the setup for our experiment. 
In section 4, we will present our research findings and conclude our research in section 5. 

2. Methodology 

This  research  has  performed  an  investigation  on  Mozilla  FxOS  running  on  a  phone 
released by Geeksphone, called Peak (Geeksphone, 2013). Released in April 2013, this phone is 
equipped with FxOS version 1.1.1. Table 2 shows the full specification of Geeksphone Peak. 

Table 2 - Geeksphone Peak Full Specification 

Hardware 
Processor 

Memory 
Storage 

Battery 

Data Inputs 
Display 
Sensor 

Camera 

Detail 
1.2 GHz Qualcomm Snapdragon S4 8225 
processor (ARMv7) 
512 MB Ram 
-Internal 4GB 
-Micro SD up to 16GB 
- 1800 mAh 
- micro-USB charging 
Capacitive multi-touch IPS display 
540 × 960 px (qHD) capacitive touchscreen, 4.3" 
-Ambient light sensor 
-Proximity sensor 
-Accelerometer 
8 MP (Rear), 2 MP (Front) 

 
 
 
 
 
 
Connectivity 

Compatible Network 

Dimension 

-WLAN IEEE 802.11 a/b/g/n 
-Bluetooth 2.1 +EDR 
-micro-USB 2.0 
-GPS 
-mini-SIM card 
-FM receiver 
- GSM 850 / 900 / 1800 / 1900 
- HSPA (Tri-band) 
- HSPA/UMTS 850 / 1900 / 2100 
-Width: 133.6 millimetres (5.26 in) 
-Height: 66 millimetres (2.6 in) 
-Thickness: 8.9 millimetres (0.35 in) 

As illustrated in the Figure 1, initially the device setting were wiped and restored to the 
default factory setting. The acquisition process was then executed to acquire FxOS phone image 
(.ffp) and memory image (.ffm). The  first  two binary  images were then  marked  as base image 
and  their  MD5  hash  values  were  preserved.  Next,  the  investigator  installed  social  media  or 
instant messaging applications to the phone via Mozilla Market Place. The investigator simulate 
the  actual  use  of  the  application  by  running  communication  activities  such  as  posting,  sending 
private  message,  received  reply,  upload  picture,  mentioning,  following,  and  many  more  social 
media  and  instant  messaging  activities.  Each  of  detail  steps,  credentials  and  communication 
activities  were  documented  properly  in  forensically  sound  manner.  Finally,  second  acquisition 
process  performed  to  identify  and  investigate  what  artifact  are  likely  to  remain,  what  type  of 
credential  can  be  extracted,  and  what  data  remnants  could  be  recovered.  Both  images  were 
named according to the type of application installed and its MD5 hash values were taken. This 
step  meant  for  comparison  to  the  earlier  data  acquisition,  to  see  if  there  were  any  differences 
with the other MD5 hash values.  

 
 
 
 
Figure 1 - Method to Create Forensic Evidences 

Our method to create forensic evidences in Figure 1 were performed by using Facebook, 
Twitter,  Telegram,  OpenWapp  and  Line  applications.  We  also  repeat  this  method  using 
Facebook,  Twitter,  Google+  and  Telegram  mobile  web,  in  order  to  compare  both  FxOS 
applications artifacts and mobile web activities artifacts. However, comparison was not possible 
for OpenWapp and Line application artifacts, since both applications were not offered in mobile 
web  platforms.  It  is  vital  to  include  the  mobile  web  activities  in  this  investigation  since  FxOS 
application were designed based on web application. Therefore, this research was attempting to 
proof that the investigation result of web-centric OS are totally different  with other mobile OS 
investigation.  

3. Experiment Setup 

The research experiment was divided into five stages; (1) Preparing the host machine for 
acquisition process and analysis work; (2) Acquisition of phone image and memory image; (3) 
Installing  the  phone  with  targeted  application;  (4)  Executed  the  activities  and  documenting  all 
steps taken; and (5) Comparing base image with activities images 

3.1 Preparing the Host Machine for Acquisition Process and Analysis Work 

The evidences were acquired using Ubuntu 14.04 LTS and then analyzed in Windows 8.1 
machine. The need to use separated operating system is due to the fact that memory acquisition 
will  only  work  on  Linux  environment;  whereas  most  of  the  analysis  tools  were  design  under 
Windows  operating  system.  To  successfully  capture  the  phone  image  using  Ubuntu,  the  host 
machine need to be running under Android Debug Bridge (ADB) (Yusoff et al., 2014a, 2014b, 
2014c, 2014d). Following command was used to configure ADB package in Ubuntu: 

# sudo apt-get install android-tools-adb 

As  for  the  volatile  memory  acquisition,  we  configure  Linux  Memory  Extractor  (LiME) 

(Sylve et al., 2012) using the following command: 

# sudo apt-get install lime-forensics-dkms 

AccessData  Forensic  Toolkit  (FTK)  version  3.1.2  (Accessdata,  2007)  and  HxD  Hex 
Editor  1.7.7.0  (Maël  Hörz,  2009)  were  installed  in  Windows  machine  to  analyze  captured 
forensic  images  and  QtADB  0.81  Android  Manager  (QtADB,  2011)  was  used  to  browse  the 
system files in the Geeksphone Peak. 

3.2 Acquisition of Phone Image and Memory Image 

Two types of binary images were extracted, meant to be used as forensic evidence in our 
case studies. The first binary image were extracted from FxOS phone internal memory using dd 
command. FxOS phone was first connected to the host machine and then ADB connection was 

 
 
 
 
 
 
 
 
 
 
 
 
 
started before we proceed to execute dd command. We have used the following command to start 
ADB connection between the phone and the host machine. 

# adb shell 

Once  the  connection  is  established,  we  have  performed  the  following  dd  command  to 
copy bit-by-bit of phone internal memory into SD card and we named it as FxOS phone memory 
(.ffp): 

# dd if=/dev/block/mmcblk0 of=/mnt/emmc/base.ffp bs=2048 

The whole binary image of FxOS internal memory was then copied from SD card into the 
host  machine  and  we  named  it  as  base.ffp.  We  used  block  size  2MB  during  dd  command 
execution as per suggested in previous studies (Yusoff et al., 2014b).  

The next step was the extraction of the second binary image from FxOS phone volatile 
memory  using  LiME.  LiME  were  design  as  such  to  allow  the  acquisition  of  volatile  memory 
from Linux-based devices and originally tested using Android phones (Sylve et al., 2012). ADB 
was then used to load LiME, and the way of volatile memory acquisition at this step is similar to 
the dd command. We used the following command in ADB to load LiME from phone SD card: 

# adb push lime.ko /mnt/emmc/lime.ko 

After LiME were loaded, we run insmod to copy live bit-by-bit of volatile memory into 

SD card. For volatile memory, we named it as FxOS memory (.ffm) 

# insmod /mnt/emmc/lime.ko "path=/mnt/emmc/base.ffm format=lime" 

Both internal phone images  (.ffp) and memory images (.ffm)  were directed to SD card. 
After the acquisition process  has  completed, we killed the ADB connection, and then mounted 
the SD card to copy both images. We set the same name for both images and only the extension 
and  file  size  are  left  as  the  differences.  The  steps  were  repeated  for  every  action  in  our 
experiment.  

3.3 Installing the Phone with Targeted Application 

The objective of this experiment is to investigate both social media network and instant 
messaging  platform  in  FxOS.  Due  to  the  limited  number  of  applications  offered  in  Mozilla 
Market Place, we have only managed to investigate 5 applications and 4 mobile webs as shows 
in Table 3 

Table 3 - Selected Applications and Mobile Web 

Group 
Social Media  

Application 
1. Facebook 
2. Twitter 

Mobile Web 
1. Facebook 
2. Twitter 
3. Google+ 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
Instant Messaging 

1. Telegram 
2. OpenWapp 
3. Line 

1. Telegram 

The investigation were performed on both application and the mobile web. The purpose 
of  investigating  both  applications  and  mobile  web,  were  to  list  out  the  differences  and 
similarities between FxOS applications with its mobile web. 

3.4 Executed the Activities and Documenting All Steps Taken 

Our investigation in this experiment has started the moment we installed the applications 
in  to  the  phone.  We  have  also  created  a  few  dummy  accounts  for  the  experiments.  All  detail 
steps, credentials and communication activities were properly documented. In order to facilitate 
the use of credential during our experiment, we created all social media account using the same 
email  address  and  password  which  are  “mohd.najwadi@gmail.com”  and  “najwadi87” 
respectively.  In general,  all social media  and instant messaging application will have one extra 
step;  which  is  installation  of  the  application.  In  contrary  for  mobile  web,  we  can  just  browse 
directly from the site. Table 4 shows all steps and activities taken for social media experiment 

Table 4 - Detail Steps for Social Media Experiment 

Social Media 
Facebook 
Application 

Facebook Web 

Twitter 
Application 

Twitter Web 

Google+ Web 

Steps and Action 
Installing Facebook Application 
Login Facebook Account (ID : Root Wadi) 
- Email : mohd.najwadi@gmail.com 
- Password : najwadi87 
Facebook Activities 
- Post Status : Posting with love 
- PM Mohd Najwadi : Hi. Test send msg 
- Received Reply : received with thanks 
Login Facebook thru web www.facebook.com 
- Email - mohd.najwadi@gmail.com 
- Password - najwadi87 
Facebook Activities 
- Post : Posting from web 
- PM Mohd Najwadi : Test again 
- Received Reply : received second time 
Installing Twitter Application 
Login Twitter Account (ID : @wadieq) 
- Email : mohd.najwadi@gmail.com 
- Password : najwadi87 
Twitter Activities 
- Tweet : My first tweet 
- Mention : @wadieq test mention 
- Favourites : @wadieq Taman tepi rumah  
Login Twitter thru web www.twitter.com 
- Email : mohd.najwadi@gmail.com 
- Password : najwadi87 
Twitter Activities 
- Tweet : My second tweet 
- Reply : @wadieq Reply comment 
- Unfollow @MunirRashid 
Login Google+ thru web plus.google.com 

Image Filename 
Facebook-Install 
Facebook-Login 

Facebook-Post 

Facebook-Browse 

Facebook-xtvt 

Twitter-Install 
Twitter-Login 

Twitter-Tweet 

Twitter-Browse 

Twitter-xtvt 

Google-Login 

 
 
 
 
 
 
 
- Email : mohd.najwadi@gmail.com 
- Password : najwadi87 
Google+ Activties 
- Follow people : tomska, british motogp 
- create circle : firefox plus 
- post : google plus firefox 
- comment : komen sendiri 

Google-xtvt 

There were 12 time acquisition processes were performed for each internal phone image 
and memory image altogether; and the files were name according to the steps taken as shown in 
Table 4. We have also tested with Facebook and Twitter, both on applications and mobile web, 
while for Google+ we can only test it on web since there is no application supported for Google+ 
in Mozilla Market Place at the moment we conducted the experiment. The phones were restored 
back  to  their  factory  setting  only  after  we  want  to  start  with  new  application  or  mobile  web 
experiments.  For  social  media  investigation,  we  restored  the  phones  5  times,  the  number  of 
experiment conducted. After the completion of the social media investigation, we then proceeded 
with instant messaging step. Instant messaging accounts were tied to different mobile numbers. 
In 
instant  messaging  account  using  mobile  number 
“+60162444415” and we performed the communication with mobile number “+60125999159”. 
Table 5 shows all the steps and activities taken for instant messaging experiment 

this  experiment,  we  registered 

Table 5 - Detail Steps for Instant Messaging Experiment 

Instant 
Messaging 
Telegram 
Application 

Telegram Web 

OpenWapp 

Steps and Action 

Installing Telegram Applications 
Register Telegram account 
- select Malaysia +60162444415 
- generating telegram code : 99246  
- received sms from +93450009276 
Telegram Activities 
- Sent to +60125999159 : Hi 
- Received from +60125999159 : Hello 
- Received from +60125999159 : InstaSize_2015_4_36453.jpg 
- Save picture - asking for access picture > 
- Received from +60125999159 : 200507000.pdf 
- Save file : asking for access memory card > 
Login Telegram thru web web.telegram.org 
- select Malaysia +60162444415 
- generating telegram code 34303  
- received sms from +93450009276 
Telegram Activities 
- Sent to +60125999159 : Hi from web 
- Received from +60125999159 : Hi back 
- Received from +60125999159 : IMG_20150508_200905.jpg 
- Save picture : failed 
- Sent to +60125999159 : Thanks for the picture 
Installing OpenWapp Application  
Register WhatsApp 
- select Malaysia +60162444415 
- generating WhatsApp code 560-103 
- received sms from 63365 
OpenWapp Activties 
- Received from +60125999159 : Hello 

Image Filename 

Telegram-Install 
Telegram-Register 

Telegram-chat 

Telegram-Browse 

Telegram-webxtvt 

OpenWapp-install 
OpenWapp-reg 

OpenWapp-chat 

 
 
 
 
 
Line 
Application 

- Sent to +60125999159 : Testing openwapp from Firefox phone 
- Received from +60125999159 : IMG_20150508_171904.jpg 
- Save picture : 
agxahpqv0gm3suwkv7glgnxz6ig4k_bh6jq_bivja5q0.jpg 
Installing Line Application 
Register Line Account 
- select Malaysia +60162444415 
- Reg code 1877 
- Received sms from +601117224258 
Line Activities 
- najwadi added syamsaziela as friend 
- najwadi sent msg : Hi syamsaziela (6.15PM) 
- syamsaziela replied : send to firefox phone (6.15PM) 
- syamsaziela sent : IMG_8933.jpg 
- najwadi received, saved (read 6.18PM) : New folder name LINE - 
2015412_185355518.jpg 

Line-Install 
Line-Reg 

Line-xtvt 

In instant messaging experiment, we  have performed the acquisition processes 11 times 
for each internal phone image and memory image. The files were also named according to the 
step  taken  as  shown  in  Table  5.  The  experiment  were  performed  using  OpenWapp  and  Line 
applications,  and  both  Telegram  application  and  mobile  web.  OpenWapp  is  the  third  party 
application  for  WhatsApp  in  FxOS  because  WhatsApp  was  not  officially  offered  in  Mozilla 
Market  Place.  Both  WhatsApp  and  Line  does  not  offer  mobile  web  support.  During  our 
investigation, we  restored the phone to their  factory setting 4 times, the  number of experiment 
conducted.  

3.5 Comparing Base Image with Activities Images 

Acquired  forensic  images  were  analyzed  using  AccessData  Forensic  Toolkit  (FTK) 
version 3.1.2 and HxD Hex Editor 1.7.7.0. Our major analysis technique were solely rely on the 
actions and execution to the phone during experiment. The base image were then compared with 
the captured forensic images according to the detail steps and actions taken. MD5 hash value of 
all images were recorded as shows in Table 6.  

Table 6 - MD5 Hash Value for Acquired Images 

Filename 
Base 
Facebook-Install 
Facebook-Login 
Facebook-Post 
Facebook-Browse 
Facebook-xtvt 
Twitter-Install 
Twitter-Login 
Twitter-Tweet 
Twitter-Browse 
Twitter-xtvt 
Google-Login 
Google-xtvt 
Telegram-Install 
Telegram-Register  A46445F6DB4A79C6FFD354CED983DF0A 

Phone Image (.ffp) 
F080B51EDBCCA1DFB85023A96C86B95D 
94A4CCEB5333D5A8D7E8498E531DFCF7 
755811F684ED0A987E07C2B27D047560 
51ABC84775AEA4326814707450D21D23 
FCB0C5CFEEDC292185B340C809B63391 
486719D871E0B71D198099E82C13D959 
BF63A51A105A6DDA94FC6A55D511FD76 
6B7F1035F1B2C4DECA3B793F3AF36CF5 
6A18EDCAD1A2AF26CA274067D1F27B34 
57F6990C23DF171C32EF8BF81FF550A3 
4CE51367D17FD6FDE29EAC744E763A3B 
C5B877501D82C2CA6998219FF3767FFD 
5BCBBD245F29662C7127B20B8341952B 
B15D74872C6E42244F859A73AD24C25B 

Memory Image (.ffm) 
7D93024506D837EB85682AC6C2DAE7A9 
24E0273A4CB7C852E20230E823675A50 
DA9A48B9F04F73415BE37E26F23B4612 
84EDE34F2059CE45CE55C195E6B4F116 
A040D89CBFBBD3F8A908F2E9F9ED4C3E 
3C3F778E0FA59A93B4274265E4515967 
E3178BA282723C70DBBB65DE9CBA2FFB 
987C447CC2B7651D283B53021121E93F 
516FB1B243A47AB1256B121321BF98E6 
242247A35D866D8E9F642D171457EC52 
872975E4C17319CCD44E0AF7E968CF33 
E94A7D2141E3CF18A146AAA8BCB6D181 
CDD22BA569641831292E85C9C8F860E1 
079F5A0CBEDB4DD920B90A8CA26E3FCB 
A43650BD2947C1CEF6AB1117C7F4070F 

 
 
 
 
 
 
  
Telegram-chat 
Telegram-Browse 
Telegram-webxtvt 
OpenWapp-install 
OpenWapp-reg 
OpenWapp-chat 
Line-Install 
Line-Reg 
Line-xtvt 

2424B5DE62DBE83F6BB8DAD19753A84D 
B3DE5669770CEAAF61F602499513328D 
F261B40B276A572C93C3D34AD9738444 
1BD68D8D6BD787AC41AC67E9CD1726AC 
EFE5DB509CEFFA005F4A60337AA3CF2F 
56590158061E662FCAED3BC1A5C773ED 
C5E85B3BA980E8DA7130DBB9556C6501 
992818E14DD9684715EACB812CBB6FED 
D13BF7662CB491E73DB6ABF7E193F401 

55F5E5BD6B575113F3600F3A381F0D16 
3EB424F3D1D575F3E7A86A31948A83AB 
A0E12223ADD6BC1C7845B12527B1581C 
B4F80CF7E711D4FBD595673DB3DE84CB 
BD6F684E93D53DE79E616088165A306E 
517D345BE8FBAD1FFFF45ED5CA7345F5 
29908DE05F3B7DECEA3B17ADF1EDD946 
EF641273ABF57E76F4516803DEDE8216 
56C0CBE3B8DD306EBFFEDA68EEBDF5C3 

MD5 hash value were taken and preserved. Any modification of forensic images will be 
easily detected by looking at their hash value. In our experiment, none of these forensic images 
shared the same hash  values. This  conclude that our forensic images was giving differences in 
value, modification and evidence in it. 

4. Discussion and Analysis 

In this section, we have divided our analysis into two parts. The first analysis has focused 
on  social  media  investigation,  while  the  second  part  has  focused  on  instant  messaging 
investigation.  For  both  analysis,  we  started  with  the  internal  phone  images  (.ffp)  and  then 
proceeded  with  memory  images  (.ffm).  The  purpose  of  separating  the  two  analysis  was  to 
differentiate between both analysis results. By doing this analysis separately, we have discovered 
that certain information which was not recoverable in the phone images, was able to be retrieved 
from memory images.  

4.1 Social Media Investigation 

In  social  media  experiment,  we  were  focusing  the  investigation  for  2  social  media 
applications  and  3  social  media  mobile  web.  We  have  successfully  separating  the  captured 
images based on major steps and details as shown in Table 3. There were several forensic worth 
of  evidence  that  we  were  trying  to  recover  and  trace.  First,  we  have  explored  the  residual 
artifacts  generated  by  application  and  URL  involved  for  mobile  web.  Second,  we  were  trying 
find  any  ID  name  that  able  to  be  captured  after  we  login  into  social  media.  Third,  we  have 
searched for any credential involving username and password after login process. Forth, we have 
traced back what activities that has been captured in the images. Lastly we have checked for the 
data remnant and left over after complete uninstallation of the application. 

4.1.1 Social Media Phone Image 

Each of the phone images were opened using AccessData Forensic Toolkit (FTK) version 
3.1.2 and HxD Hex Editor 1.7.7.0. The analysis were conducted manually by searching several 
keyword  related  to  previous  experiment  in  forensically  sounds  manner.  The  first  binary  search 
performed  was  the  application  keyword.  This  search  executed  once  the  selected  application 
successfully installed from Mozilla Market Place. Since our factory setting base image was only 
comes with preinstalled application and none of it were used in our investigation, we cannot find 

 
 
 
 
 
 
 
 
 
any  keyword  of  selected  social  media  from  the  base  image.  Figure  2  shows  Twitter  keyword 
appear when we executed the first search. 

Figure 2 - Application Keyword Found After Installation in Phone Image 

The  second  search  were  performed  to  find  URL  for  social  media  mobile  web.  Mobile 
web is totally different with application. We do not had to install it but only need to browse using 
preinstalled Firefox browser. Figure 3 shows Twitter URL was found in the images and the result 
has also showing the visited date and time. 

Figure 3 - URL for Social Media Mobile Web Found in Phone Image 

The third search were to find our profile name or user ID once we logged into the social 
media.  Profile  name  is  different  with  username.  Username  used  to  login  into  the  social  media 

 
 
 
 
 
 
 
 
 
while  profile  name  were  the  name  displayed  in  our  social  media  account.  Figure  4  shows  our 
profile name together with the user ID and Facebook profile path that we managed to find. 

Figure 4 - Facebook Profile Name Appear in Phone Image. 

One of the most valuable information that we need to protect in social media, were the 
account  credentials.  In  the  event  that  the  account  credentials  fall  into  wrong  hands,  they  can 
definitely log in into our account and pretended to be us. When they commit any crime using our 
account,  prosecution  will  be  charged  under  our  name.  Next  search  were  to  find  username  and 
password that we used during our login process.  Username rules were different between social 
media.  Facebook  and  Google+  only  accept  email  as  username,  while  twitter  can  accept  either 
email or selected string. Figure 5 shows Twitter username appear in our search. 

Figure 5 - Username in Twitter Phone Image 

 
 
 
 
 
 
 
 
 
Activities  and  communication  in  social  media  have  contributed  a  massive  valuable 
information  in  forensic  investigation.  From  the  communication  pattern,  we  might  be  able  to 
identify if there is any cyber bullying as well as cyber stalking. We also can also investigate if 
any sexual harassment had occurred. In the next search, we were trying to find activities that can 
be recovered in our experiment. We purposely used a certain communication string in Malaysian 
language so  that the search will not  redundant  with  common word like “hello” and “hi” in  the 
images.  Figure  6  below  shows  the  communication  string  that  we  use  earlier  in  Twitter 
experiment, appearing in the search result. 

Figure 6 - Communication String That Able to Recover from Phone Image 

The search process were executed by using prepared detail steps with the phone images 
accordingly. If the information were able to be found and recovered, we marked it as right. After 
all search has been executed and completed, the findings were recorded as shows in Table 7 

Table 7 - Social Media Phone Image Finding Summary 

Evidences 

Application keyword 

Web URL 

Name after login 

Username after login 

Password after login 

Activities 

Uninstalled data remnant 

Facebook 
Application 
✓ 
N/A 

✓ 

✘ 

✘ 

✘ 

✓ 

Facebook 
Web 
N/A 

✓ 

✓ 

✘ 

✘ 

✘ 
N/A 

Twitter 
Application 
✓ 
N/A 

✓ 

✓ 

✘ 

✓ 

✓ 

Twitter 
Web 
N/A 

Google+ 
Web 
N/A 

✓ 

✓ 

✓ 

✘ 

✓ 
N/A 

✓ 

✘ 

✘ 

✘ 

✘ 
N/A 

In  general,  all  application  keyword  will  appear  in  the  search  once  we  successfully 
installed  the  application.  These  result  show  that,  there  were  changes  in  application  list  once  it 
was installed. The same search result happened to web URL keyword. Once we visited the web, 

 
 
 
 
 
 
 
 
the  keyword  will  be  stored  in  the  browsing  history,  including  date  and  time  stamp.  When  we 
login  into  the  selected  social  media,  all  profile  names  were  recorded  in  the  phone  except 
Google+ mobile web. As for social media username, only Twitter application and Twitter mobile 
web were able for retrieval. No password can be seen for all social media. By the same token, the 
communications  and  activities  only  appear  in  Twitter  application  and  Twitter  mobile  web.  No 
activities  can  be  seen  in  Facebook  and  Google+.  Data  remnant  were  able  to  be  retrieved  from 
both Facebook and Twitter application.  

4.1.2 Social Media Phone and Memory Images 

Analysis of the memory images were the same with the previous analysis. We have also 
performed  the  keyword  search  by  using  a  prepared  detail  steps.  The  search  were  repeated,  but 
confined to only for the value that does not appear in our first search using phone images. Each 
of the memory images were also opened using AccessData FTK and HxD Hex Editor. For this 
analysis, we focused more on social media credential and communication activities, since most 
of  this  part  were  not  recovered  from  the  phone  images  analysis.  Figure  7  shows  Facebook 
credential that we used to login appearing in our first search attempt. 

Figure 7 - Facebook Credential Found Without Encrypted in Memory Image 

The  search  was  continued  with  other  social  media  credential  and  communication 
activities. The summary in Table 8 show the result of what evidences can be retrieved from both 
phone images and memory images. 

Table 8 - Social Media Phone Images and Memory Images Finding Summary 

Evidences 

Keyword after install 

Web URL 

Facebook 
Application 
✓ 
N/A 

Facebook 
Web 
N/A 

✓ 

Twitter 
Application 
✓ 
N/A 

Twitter 
Web 
N/A 

✓ 

Google+ 
Web 
N/A 

✓ 

 
 
 
 
 
 
 
 
 
Name after login 

Username after login 

Password after login 

Activities 

Uninstalled data remnant 

✓ 

✓ 

✓ 

✘ 

✓ 

✓ 

✓ 

✓ 

✘ 
N/A 

✓ 

✓ 

✓ 

✓ 
✓ 

✓ 

✓ 

✓ 

✓ 
N/A 

✓ 

✘ 

✘ 

✘ 
N/A 

The finding of this analysis has shown that, all credentials especially password cannot be 
seen in phone images, but we were able to retrieve it in memory images except for the Google+. 
As for the communication activities, we still do not find any keyword matching in Facebook and 
Google+. We then randomly checked with Facebook and Google+ memory images to find any 
communication occurrence other than what we recorded, but failed to find any. The result of the 
study was suggesting that the communication activities in Facebook and Google+ for FxOS were 
either encrypted or stored in their respective server only.   

4.2 Instant Messaging Investigation 

For  instant  messaging  experiment  and  investigations,  we  have  managed  to  acquire  3 
instant  messaging  applications  and  1  instant  messaging  mobile  web  activities.  First,  we  have 
explored  the  residual  artifacts  generated  by  application  and  URL  involved  for  mobile  web. 
Second,  we  have  tried  to  find  the  user  phone  number  used  during  registration.  Third,  we  have 
tried  to  get  the  registration  code  and  SMS  or  call  verification  received.  Forth,  we  have  traced 
back  what  activities  that  has  been  captured  in  the  images.  Lastly,  we  have  checked  for  data 
remnant after we complete the uninstallation the application. 

4.2.1 Instant Messaging Phone Image 

Like the previous experiment, each of the phone images were opened using  AccessData 
Forensic  Toolkit  (FTK)  version  3.1.2  and  HxD  Hex  Editor  1.7.7.0.  The  analysis  has  also 
conducted by manually searching several keyword related to previous experiment in forensically 
sounds  manner.  The  first  binary  search  performed  was  the  application  keyword.  This  search 
executed once the selected application successfully installed from  Mozilla Market  Place. Since 
our factory setting base image was only comes with preinstalled application and none of it were 
used  in  our  investigation,  we  cannot  find  any  keyword  of  selected  instant  messaging  from  the 
base image. Figure 8 shows Telegram keyword appear when we executed the first search. 

 
 
 
 
 
 
 
 
Figure 8 - Application keyword Found After Installation in Phone Memory 

The second search were executed to find URL for instant messaging mobile web, in this 
experiment  only  Telegram  we  tested  for  mobile  web.  Mobile  web  is  totally  different  with  the 
application. We do not had to install, instead we only need to browse using preinstalled Firefox 
browser.  Figure  9  shows  Telegram  URL  was  found  in  the  images  and  the  result  was  also 
showing the visited date and time. 

Figure 9 - URL for Instant Messaging Mobile Web Found in Phone Image 

The  third  search  were  to  find  the  phone  number  used  during  registration.  Most  of  our 
selected instant messaging services asked the phone number to be tied with account registration. 
Instant messaging services like Telegram and WhatsApp will display the phone number together 
with selected name when we send private message to other user, while Line will not display any 
number but only selected name. The confirmation during registration were either code from SMS 

 
 
 
 
 
 
 
 
or  received  call  from  the  providers.  Figure  10  and  Figure  11  shows  the  phone  number  and 
registration code for WhatsApp services respectively. 

Figure 10 - Phone Number Used During Registration Found in Phone Memory 

Figure 11 - Registration Code Received During Account Confirmation Found in Phone Memory 

The search process were executed by using a prepared detail steps with the phone images 
accordingly. If the information were able to be found and recovered, we marked it as right. After 
all search has been executed and completed, the findings were recorded as shows in Table 9 

Table 9 - Instant Messaging Phone Image Finding Summary 

Evidences 

Telegram 
Application 

Telegram Web 

OpenWapp 
Application 

Line 
Application 

 
 
 
 
 
 
 
 
 
 
Keyword after install 

Web URL 

Number after register 

Registration code 

SMS/Call verification 

Activities 

Uninstalled data remnant 

✓ 
N/A 

✘ 

✓ 

✓ 

✘ 

✓ 

N/A 

✓ 

✘ 

✓ 

✓ 

✘ 
N/A 

✓ 
N/A 

✓ 

✓ 

✓ 

✘ 

✓ 

✓ 
N/A 

✘ 

✓ 

✓ 

✘ 

✓ 

In general, all application keyword will appear in the search once we  have successfully 
installed the application. These result shows that, there were changes in application list once it 
was installed. The same search result happened to web URL keyword. Once we visited the web, 
the keyword were stored in the browsing history, including date and time stamp. We try to find 
the phone number we were used during registration but we only manage to find it in OpenWapp 
phone images. However, all registration code, SMS as well as call verification were manage to 
find  in  all  instant  messaging  phone  images.  In  contrary,  no  communication  activities  were 
manage to trace in this analysis. Data remnant were able to be retrieved from both Facebook and 
Twitter application.  

4.2.2 Instant Messaging Phone and Memory Images 

Analysis of the memory images were the same with the previous analysis. We have also 
performed  the  keyword  search  using  a  prepared  detail  steps.  The  search  were  repeated,  but 
confined to only for the value that does not appear in our first search using phone images. Each 
of the memory images were also opened using AccessData Forensic Toolkit (FTK) version 3.1.2 
and  HxD  Hex  Editor  1.7.7.0.  For  this  analysis,  we  focused  more  on  registration  number  and 
instant messaging communication activities, since most of this part were not recovered from the 
phone images analysis. Figure 12 shows OpenWapp communication string that we used during 
this experiment. 

Figure 12 - OpenWapp Communication String Found in Memory Image 

 
 
 
 
 
 
 
The search were continued with other instant messaging communication activities and the 
phone  number  used  in  Telegram  and  Line.  The  summary  in  Table  9  shows  the  result  of  what 
evidences can be retrieved from both phone images and memory images. 

Evidences 

Table 9 - Instant Messaging Phone Images and Memory Images Finding Summary 
Line 
Application 
✓ 
N/A 

OpenWapp 
Application 
✓ 
N/A 

Telegram 
Application 
✓ 
N/A 

Telegram Web 

Keyword after install 

Web URL 

N/A 

✓ 

Number after register 

Registration code 

SMS/Call verification 

Activities 

Uninstalled data remnant 

✓ 

✓ 

✓ 

✘ 

✓ 

✓ 

✓ 

✓ 

✘ 
N/A 

✓ 

✓ 

✓ 

✓ 

✓ 

✓ 

✓ 

✓ 

✘ 

✓ 

The finding of this analysis has shown that, all registration phone numbers that were not 
able  to  be  seen  in  phone  images,  were  able  to  be  traced  in  memory  images.  As  for  the 
communication activities, we have only manage to find the communication string in OpenWapp 
and still do not find any keyword matching in Telegram  and Line. We then randomly checked 
with Telegram and Line memory images to find any communication occurrence other than what 
we  recorded,  but  also  failed  to  find  any.  The  result  of  the  studies  suggested  that  the 
communication activities in Telegram and Line for FxOS were either encrypted or stored in their 
respective server only.   

6. Conclusion  

In  this  research,  we  have  successfully  acquired  24  forensic  images,  each  from  FxOS 
internal  phone  and  volatile  memory.  The  acquired  images  were  then  extracted  based  on  the 
action performed as per documented in detail steps, and were named accordingly. These images 
were  then  analyzed  and  the  result  was  presented  and  tabled.  The  result  of  this  research  has 
indicated  that  most  of  valuable  forensic  information  were  residing  in  volatile  memory.  The 
finding  of  this  study  also  suggested  that  memory  in  FxOS  phone  were  not  encrypted,  hence  it 
was readable with our forensic tools. Therefore, we managed to recover and trace social media 
account  credential  especially  on  Facebook  and  Twitter  services.  In  contrary,  all  untraced 
information  in  phone images such as  profile name on Google+ and phone number used during 
registration for Telegram and Line, were traceable in memory images.  

The  other  conclusion  drawn  from  this  research  were,  FxOS  applications  behaving  the 
same  way  of  its  counterpart  in  mobile  web.  Therefore,  we  managed  to  get  the  exact  same 
forensic  traces  and  evidences  when  we  analyzed  the  same  services,  both  in  application  and 
mobile web platform. For example Facebook, Twitter and Telegram applications are producing 
the same forensic trace with its mobile web. In short, these findings have significantly enhanced 
our understanding of the similarity of FxOS application which design based on WebAPI, with its 
mobile  web  platforms.  By  using  WebAPI,  FxOS  application  can  executed  under  very  minimal 
memory requirement, just like opening the web browser.  

 
 
 
 
 
 
 
On  the  other  hand,  the  analysis  of  the  acquired  images  has  shown  that  application 
artifacts were remained in FxOS device after it has been uninstalled. The data remnant and left 
over  from  the  application  folders  and  browser  history  will  be  value  added  to  the  investigation 
and  many  more  information  have  been  successfully  retrieved.  Further,  the  findings  from  this 
research have also make several contributions to the current set of mobile forensic investigation 
standard. It is recommend that further research to be undertaken with more broad application and 
mobile web platform. More forensic investigation of FxOS application would help us to establish 
greater degree of accuracy in this study.  

References 

Accessdata, 2007. Forensic Toolkit (FTK). 

Al  Mutawa,  N.,  Baggili,  I.,  Marrington,  A.,  2012.  Forensic  analysis  of  social  networking 
applications on mobile devices. Digit. Investig. 9, S24–S33. doi:10.1016/j.diin.2012.05.007 

Anglano, C., 2014. Forensic analysis of WhatsApp Messenger on Android smartphones. Digit. 

Investig. 11, 1–13. doi:10.1016/j.diin.2014.04.003 

Chen,  S.,  Hao,  X.,  Luo,  M.,  2009.  Research  of  Mobile  Forensic  Software  System  Based  on 
Windows Mobile, in: 2009 International Conference on Wireless Networks and Information 
Systems. IEEE, pp. 366–369. doi:10.1109/WNIS.2009.32 

Damshenas, M., Dehghantanha, A., Mahmoud, R., 2014. A Survey on Digital Forensics Trends. 

Int. J. Cyber-Security Digit. Forensics 3, 1–26. 

Dezfouli, F.N., Dehghantanha, A., Eterovic-Soric, B., Choo, K.-K.R., 2015. Investigating Social 
Networking  applications  on  smartphones  detecting  Facebook,  Twitter,  LinkedIn  and 
Google+  artefacts  on  Android  and  iOS  platforms.  Aust.  J.  Forensic  Sci.  0618,  1–20. 
doi:10.1080/00450618.2015.1066854 

Dezfouli,  F.N.,  Dehghantanha,  A.,  Mahmod,  R.,  Mohd  Sani,  N.F.,  Shamsuddin,  S.,  2013.  A 
Data-centric  Model  for  Smartphone  Security.  Int.  J.  Adv.  Comput.  Technol.  5,  9–17. 
doi:10.4156/ijact.vol5.issue9.2 

Geeksphone, 2013. Geeksphone Peak [WWW Document]. URL 

http://www.geeksphone.com/other-devices-2/ 

Gómez-Miralles,  L.,  Arnedo-Moreno,  J.,  2012.  Versatile  iPad  forensic  acquisition  using  the 
Apple  Camera  Connection  Kit.  Comput.  Math.  with  Appl.  63,  544–553. 
doi:10.1016/j.camwa.2011.09.053 

Husain,  M.I.,  Sridhar,  R.,  2010.  iForensics :  Forensic  Analysis  of  Instant  Messaging  on.  Lect. 
Notes  Inst.  Comput.  Sci.  Soc.  Informatics  Telecommun.  Eng.  -  Digit.  Forensics  Cyber 
Crime 31, 9–18. doi:10.1007/978-3-642-11534-9_2 

Iqbal, A., Marrington, A., Baggili, I., 2014. Forensic artifacts of the ChatON Instant Messaging 
Int.  Work.  Syst.  Approaches  Digit.  Forensics  Eng.,  SADFE. 

application. 
doi:10.1109/SADFE.2013.6911538 

Iqbal,  B.,  Iqbal,  A.,  Obaidli,  H.  Al,  2012.  A  novel  method  of  iDevice  (iPhone,  iPad,  iPod) 
forensics  without  jailbreaking,  in:  2012  International  Conference  on  Innovations  in 

 
 
 
 
 
Information 
doi:10.1109/INNOVATIONS.2012.6207740 

Technology 

(IIT). 

IEEE, 

pp. 

238–243. 

Irwin, D., Hunt, R., 2009. Forensic information  acquisition in mobile networks, in: 2009 IEEE 
Pacific Rim Conference on Communications, Computers and Signal Processing. IEEE, pp. 
163–168. doi:10.1109/PACRIM.2009.5291378 

Jung, J., Jeong, C., Byun, K., Lee, S., 2011. Sensitive Privacy Data Acquisition in the iPhone for 
Digital Forensic Analysis. Commun. Comput. Inf. Sci. - Secur. Trust Comput. Data Manag. 
Appl. 186, 172–186. doi:10.1007/978-3-642-22339-6_21 

Karpisek,  F.,  Baggili,  I.,  Breitinger,  F.,  2015.  WhatsApp  network  forensics:  Decrypting  and 
Investig.  1–9. 

signaling  messages.  Digit. 

the  WhatsApp 

call 

understanding 
doi:10.1016/j.diin.2015.09.002 

Lessard,  J.,  Kessler,  G.C.,  2010.  Android  Forensics :  Simplifying  Cell  Phone  Examinations. 

Small Scale Digit. Device Forensics J. 4, 1–12. 

Maël Hörz, 2009. HxD Hex Editor. 

Mohtasebi, S., Dehghantanha, A., 2013. Towards a Unified Forensic Investigation Framework of 
Smartphones. Int. J. Comput. Theory Eng. 5, 351–355. doi:10.7763/IJCTE.2013.V5.708 

Mohtasebi, S., Dehghantanha, A., 2011a. Defusing the Hazards of Social Network Services. Int. 

J. Digit. Inf. Wirel. Commun. 1, 504–516. 

Mohtasebi,  S.,  Dehghantanha,  A.,  2011b.  A  Mitigation  Approach  to  the  Privacy  and  Malware 
Information  Processing  and 

Threats  of  Social  Network  Services, 
Communications. pp. 448–459. doi:10.1007/978-3-642-22410-2_39 

in:  Digital 

Mohtasebi, S., Dehghantanha, A., Broujerdi, H.G., 2012. Smartphone Forensics : A Case Study 

with Nokia E5-00 Mobile Phone. Int. J. Digit. Inf. Wirel. Commun. 1, 651–655. 

Pooters, I., 2010. Full user data acquisition from Symbian smart phones. Digit. Investig. 6, 125–

135. doi:10.1016/j.diin.2010.01.001 

QtADB, 2011. QtADB Android Manager [WWW Document]. URL http://qtadb.wordpress.com 

Said, H., Yousif, A., Humaid, H., 2011. IPhone forensics techniques and crime investigation, in: 
The  2011  International  Conference  and  Workshop  on  Current  Trends  in  Information 
Technology (CTIT 11). IEEE, pp. 120–125. doi:10.1109/CTIT.2011.6107946 

Sylve,  J.,  Case,  A.,  Marziale,  L.,  Richard,  G.G.,  2012.  Acquisition  and  analysis  of  volatile 

memory from android devices. Digit. Investig. 8, 175–184. doi:10.1016/j.diin.2011.10.003 

Taylor,  M.,  Hughes,  G.,  Haggerty,  J.,  Gresty,  D.,  Almond,  P.,  2012.  Digital  evidence  from 
335–339. 

applications.  Comput.  Law  Secur.  Rev. 

28, 

mobile 
telephone 
doi:10.1016/j.clsr.2012.03.006 

Tso,  Y.-C.,  Wang,  S.-J.,  Huang,  C.-T.,  Wang,  W.-J.,  2012.  iPhone  social  networking  for 
evidence  investigations  using  iTunes  forensics,  in:  Proceedings  of  the  6th  International 
Conference  on  Ubiquitous  Information  Management  and  Communication  -  ICUIMC  ’12. 
ACM Press, New York, New York, USA, p. 1. doi:10.1145/2184751.2184827 

Walnycky, D., Baggili,  I., Marrington, A., Moore, J., Breitinger, F., 2015. Network and device 
forensic  analysis  of  Android  social-messaging  applications.  Digit.  Investig.  14,  S77–S84. 
doi:10.1016/j.diin.2015.05.009 

 
Yang,  T.Y.,  Dehghantanha,  A.,  Choo,  K.-K.R.,  Muda,  Z.,  2016.  Windows  Instant  Messaging 
App  Forensics:  Facebook  and  Skype  as  Case  Studies.  PLoS  One  11,  e0150300. 
doi:10.1371/journal.pone.0150300 

Yusoff,  M.N.,  Mahmod,  R.,  Abdullah,  M.T.,  Dehghantanha,  A.,  2014a.  Mobile  Forensic  Data 
Acquisition in Firefox OS, in: The Third International Conference on Cyber Security, Cyber 
Warfare, and Digital Forensic (CyberSec2014). pp. 27–31. 

Yusoff,  M.N.,  Mahmod,  R.,  Abdullah,  M.T.,  Dehghantanha,  A.,  2014b.  Performance 
Measurement  for  Mobile  Forensic  Data  Acquisition  in  Firefox  OS.  Int.  J.  Cyber-Security 
Digit. Forensics 3, 130–140. 

Yusoff,  M.N.,  Mahmod,  R.,  Dehghantanha,  A.,  Abdullah,  M.T.,  2014c.  An  Approach  for 
Forensic  Investigation  in  Firefox  OS,  in:  The  Third  International  Conference  on  Cyber 
Security, Cyber Warfare, and Digital Forensic (CyberSec2014). IEEE, pp. 22–26. 

Yusoff,  M.N.,  Mahmod,  R.,  Dehghantanha,  A.,  Abdullah,  M.T.,  2014d.  Advances  of  Mobile 
Forensic Procedures in Firefox OS. Int. J. Cyber-Security Digit. Forensics 3, 141–157. 

 
 
