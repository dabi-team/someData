9
1
0
2

y
a
M
6
1

]

R
C
.
s
c
[

2
v
2
4
1
0
0
.
1
1
8
1
:
v
i
X
r
a

Improving ICS Cyber Resilience through Optimal
Diversification of Network Resources

TINGTING LI, Imperial College London, United Kingdom
CHENG FENG, Siemens Corporate Technology
CHRIS HANKIN, Imperial College London, United Kingdom

Network diversity has been widely recognized as an effective defense strategy to mitigate the spread of
malware. Optimally diversifying network resources can improve the resilience of a network against malware
propagation. This work proposes an efficient method to compute such an optimal deployment, in the context of
upgrading a legacy Industrial Control System with modern IT infrastructure. Our approach can tolerate various
constraints when searching for an optimal diversification, such as outdated products and strict configuration
policies. We explicitly measure the vulnerability similarity of products based on the CVE/NVD, to estimate the
infection rate of malware between products. A Stuxnet-inspired case demonstrates our optimal diversification
in practice, particularly when constrained by various requirements. We then measure the improved resilience
of the diversified network in terms of a well-defined diversity metric and Mean-time-to-compromise (MTTC), to
verify the effectiveness of our approach. We further evaluate three factors affecting the performance of the
optimization, such as the network structure, the variety of products and constraints. Finally, we show the
competitive scalability of our approach in finding optimal solutions within a couple of seconds to minutes for
networks of large scales (up to 10,000 hosts) and high densities (up to 240,000 edges).
CCS Concepts: • Security and privacy → Network security; Malware and its mitigation; • Information
systems → Process control systems; • Applied computing → Command and control.

Additional Key Words and Phrases: Network Diversity, ICS/SCADA Security, Optimal Diversification, Malware
Propagation, CVE Vulnerability Analysis

ACM Reference Format:
Tingting Li, Cheng Feng, and Chris Hankin. 2018. Improving ICS Cyber Resilience through Optimal Diver-
sification of Network Resources. J. ACM 37, 4, Article 111 (August 2018), 26 pages. https://doi.org/10.1145/
1122445.1122456

1 INTRODUCTION

Industrial Control Systems (ICS) are cyber-physical systems that are responsible for maintaining
normal operation of industrial plants such as water treatment, gas pipelines, power plants and
industrial manufacture. Modern industrial organizations perform an increasing large amount of
operations across IT and Operational technology (OT) infrastructures, resulting in inter-connected
ICS. It also creates new challenges for protecting such integrated industrial environments, and makes
cyber-physical security threats even more difficult to mitigate [28]. Therefore, many industrial
organizations started looking for methods to converge IT and OT infrastructures in more secure and

Authors’ addresses: Tingting Li, Imperial College London, South Kensington, London, United Kingdom, tingting.li@imperial.
ac.uk; Cheng Feng, Siemens Corporate Technology, cheng.feng@siemens.com; Chris Hankin, Imperial College London,
South Kensington, London, United Kingdom, c.hankin@imperial.ac.uk.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee
provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and
the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored.
Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires
prior specific permission and/or a fee. Request permissions from permissions@acm.org.
© 2018 Association for Computing Machinery.
0004-5411/2018/8-ART111 $15.00
https://doi.org/10.1145/1122445.1122456

111

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

 
 
 
 
 
 
111:2

Tingting Li, Cheng Feng, and Chris Hankin

resilient ways. In this paper, we consider software diversification as a way of deploying products
across ICS and improving the resilience of the integrated systems. However, there are various
real-world constraints we might encounter when finding an optimal diversification strategy, for
instance, limited flexibility of diversification for legacy systems, strict configuration policies and
other (un)desirable configuration requirements. Therefore, our approach particularly considers
these constraints into optimization and evaluates the impact of these constraints on the optimal
diversification.

Software mono-culture has been recognized as one of the key factors that promote and accelerate
the spread of malware. It is widely acknowledged that diversifying network resources (e.g. software
packages, hardware, protocols, connectivity etc.) significantly mitigates the infection of malware
between similar products and reduces the likelihood of repeating application of single exploits
[13]. When facing attacks using zero-day exploits (i.e. unknown exploits), the situation becomes
even worse as there are no available defense countermeasures to stop them. Stuxnet, as the first
cyber weapon against ICS, leveraged four zero-day vulnerabilities. Until September 2010, there
were about 100,000 hosts over 155 countries infected by Stuxnet [10]. The invariability or high
similarity of products used in most affected hosts accounts for the rapid infection and prevalence
of Stuxnet. Therefore, diversity-inspired countermeasures have been introduced to improve the
resilience of a network against malware propagation. However, it is not very clear about (i) how
much diversification is required to reach an optimal/maximal resilience, (ii) how exactly to deploy
diverse resources across a network, and (iii) how configuration constraints would harm the optimal
diversification. In this paper, we aim to mitigate stuxnet-like worm propagation by optimally
diversifying resources. We consider a variety of off-the-shelf products to provide services at each
host, and find the optimal assignment of them to maximize the network resilience.

There are two main trends of research investigating diversity as an effective defense mechanism.
One trend seeks for solutions from software development such as n-version programming [1],
program obfuscation [3] and code randomization [25]. The other trend studies diversity-inspired
defense strategies from the perspective of security management. Specifically, the goal of this trend is
to find an optimal assignment of diverse products for each host in a network. For example, O’Donnell
and Sethu proposed to diversify products in a network by a distributed coloring algorithm in [23].
Newell et al. focused on diversifying routing nodes and found an efficient way to compute the
optimal solutions in [21]. A set of security metrics have been introduced by Zhang et al. [32] to
evaluate network diversity and its impact on the resilience against zero-day attacks. More details
about related work are provided in Section 2.

Our work lies in the second trend of research, in which we aim to find the optimal assignment of

products to diversify a network. Most of the existing work has made three critical assumptions:

(i) there is no configuration constraints when searching for an optimal assignment of products.
(ii) each node (or host) in a network was modelled by a single label, indicating that there is only
one vulnerable product (or service) running on a node, namely there is only one attack vector
on each node that requires diversification.

(iii) each individual product shares no vulnerability with any other, which implies that unique

exploits are necessary to compromise different products.

Nevertheless, we contend that these assumptions are unrealistic, and thus we drop these assumptions
in this work. We specifically defined any configuration constraints into the process of optimization.
Also we considered a more realistic infection model of malware. In the following subsection, a
simple example demonstrates how these assumptions prevent us from modelling the actual infection
model of malware.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:3

Fig. 1. Motivational example about diversifying products in a network

In this paper, we start with formally defining the similarity of vulnerabilities between products
to reflect the similar exploitability of products. We conduct a statistical study to estimate such
vulnerability similarities by using public vulnerability databases such as Common Vulnerabilities
and Exposures (CVE) [18] and the National Vulnerability Database (NVD) [22]. Furthermore, we
represent each host in a network by a multi-label node, which can be formally mapped to a discrete
Markov Random Field (MRF) model. By combining the similarity metric and the MRF model, we
can construct the corresponding infection model of potential zero-day exploits across a network
with a given product assignment. We then focus on computing an optimal product assignment to
minimize the prevalence of zero-day exploits. Before our main contributions are enumerated in
Section 1.2, we present an illustrative example in Section 1.1 to further explain the motivation.

1.1 Motivational Example

We use a simple example in Figure 1 to explain the motivation of this work, where a simplified
network with 8 hosts is presented. Most of the existing work models the network as in Figure 1(a),
where each host is represented by a single-label node. A zero-day exploit breaks into the network
from the entry node. In order to prevent the exploit (which exploits circle labels) from infecting
more hosts, most existing work suggests to diversify all hosts in the way indicated by triangle and
circle labels respectively in Figure 1(a). The illustrated configuration is effective because the spread
of the exploit is stopped after it compromises the entry node and hence the chance of the target
node being infected is 0.

Nevertheless, it is assumed that different products share no vulnerabilities between each other,
which is however not always the case according to our statistical study on the CVE/NVD database
in Section 3. We discover that most vulnerabilities reported to NVD can actually affect multiple
products. Therefore, we improve the model by considering the vulnerability similarities between
different products. Figure 1(b) demonstrates the zero-day propagation when the two products
(circle and triangle labels) have a 0.5 vulnerability similarity between each other, namely there is
a 50% chance that the same zero-day vulnerability exploited at circle labels can also be exploited
at triangle labels, and vice versa. In this case, the probability of the target node being breached is
increased to approximately 0.125.

In most realistic scenarios, a host is supposed to deliver multiple services (e.g. operating systems,
web servers, email servers, databases, etc), each of which is potentially vulnerable to zero-day
attacks. That means each host actually offers several alternative attack vectors, and as a result,
sophisticated attackers can choose the vulnerability with higher success rate to exploit the host.
Therefore, we represent each host by multiple labels corresponding to different services on the

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

0000011000100.50.50.50.50.5110.50.50.510.50.50.50.50.5 10.5110.50.50.5 110.5exploitsexploitsexploitsexploitsentrytargetentrytargetentrytarget(a) diversifying single-label hosts(b) diversifying single-label hosts with similarity(c) diversifying multi-label hosts with similarity111:4

Tingting Li, Cheng Feng, and Chris Hankin

host. As shown in Figure1(c), we add another shape of labels (i.e. red squares) to some hosts, and
introduce a sophisticated attacker in possession of two zero-day exploits (one for round labels and
the other for square labels). It can be seen from Figure1(c), the attacker uses the square label exploit
(rather than the round label exploit) to infect its adjacent node, which gives a greater chance of
success. Consequently, with the collaboration of two zero-day exploits, the risk of the target node
being compromised is further increased to approximately 0.5.

1.2 Main Contributions

From the example above, we learn that in order to find the optimal way to diversify network
resources, we first need to model the resources accurately, based on which we can determine
precisely the infection model of potential exploits across a network and find the optimal assignment
of products to minimize the prevalence of exploits. We summarize the main contributions of this
paper as follow:

(i) We demonstrate that our optimization approach is directly applicable in practice to find the
optimal diversification strategy when integrating ICS with modern IT infrastructure. We
use a real-world case study inspired by Stuxnet propagation, to find optimal diversification
solutions to IT-OT convergence of ICS, particularly accommodating real-world configuration
constraints and limited flexibility of diversification in certain areas.

(ii) To the best of our knowledge, our work is the first attempt to explicitly consider the vul-
nerability similarity between products when finding the optimal diversification solutions.
Specifically, we represent each host by a multi-labelling model with each label corresponding
to a service on the host. A variety of products for each service is also modelled to render
different assignments of products. By means of the vulnerability similarity between assigned
products, the infection of malware across the network can be accurately estimated.

(iii) In order to compute the optimal assignment of products, we model the network by a discrete
Markov Random Field (MRF), which then can be optimized by an efficient sequential tree-
reweighted message passing (TRW-S) algorithm [15]. In this way, our approach can scale up
well to analyze large-scale and high-density networks.

1.3 Paper Organization

The rest of the paper is organized as follows. We discuss related work in Section 2. The similarity
metric is introduced in Section 3, as well as the statistical analysis based on CVE/NVD databases. We
formally represent the network and the addressed research problem in Section 4. The computation
of optimal solutions is given in Section 5. A diversity metric based on Bayesian Networks (BN) is
given in Section 6 to evaluate our solutions. The case study about mitigating Stuxnet propagation
in integrated ICS is presented in Section 7 to demonstrate the practical usage of our optimization
approach, and an in-depth evaluation of our optimization approach is given in Section 8. The
scalability analysis can be found in Section 9. The paper finishes with a discussion and conclusion
in Section 10.

2 RELATED WORK

Software diversity has long been recognized as a mechanism for improving resilience and security
of networked computing systems [2, 13, 16]. The rationale is that it forces attackers to develop an
unique exploit to compromise an individual product at each node in a network, thus substantially
increasing the attacking time and cost needed to penetrate a networked system at a massive scale.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:5

A variety of methodologies for software diversity have been studied in the literature, among
which the first direction of research focuses on software development diversity. Examples include
n-version programming [1], execution environment diversity [24] and code randomization [25].

The second direction, which is also the focus of this paper, is the strategies for diversified
deployment of resources in a networked system. For instance, based on the assumption that different
variants of products share no common vulnerabilities, O’Donnell and Sethu [23] proposed to assign
diverse software packages in a communication network by a distributed coloring algorithm to limit
the total number of nodes an attacker can compromise using a limited attack toolkit. Newell et al.
[21] found an efficient approach to compute the optimal solution for placing diverse software/OS
variants on routing nodes to improve overall network resilience given the assumption that each
variant is compromised independently with some probability metrics. Besides, there were some
work defining formal security metrics for software diversity. For example, Wang et al. [29] defined a
network security metric, k-zero day safety, for measuring the risk of unknown vulnerabilities based
on the number of unknown vulnerabilities required for compromising network assets. Furthermore,
Zhang et al. [32] introduced three security metrics to evaluate the resilience against zero-day attacks
using different diversity strategies based on the number and distribution of distinct resources inside
a network, the least attacking effort required for compromising certain important resources, and
the average attacking effort required for compromising critical assets, respectively. Borbor et al.
[4] explicitly considered cost constraints on optimizing software diversity strategies. It is noticed
that most existing work assumes that there is a very limited attack surface provided at each host,
namely there is only one vulnerable product at each host for attackers to exploit. By contrast, we
explicitly model various attack vectors (offered by multiple products) at each host.

Vulnerability databases such as CVE/NVD can provide statistical evidence for measuring software
diversity. For example, Garcia et al. [11] presented a study on the overlap of vulnerabilities in
11 different OSes with OS vulnerability data from NVD. In [5], Bozorgi et al. trained classifiers
to predict whether and how soon a vulnerability is likely to be exploited by applying machine
learning techniques on CVE data. On the validity issue of CVE/NVD, Johnson et al. conducted the
assessment of several well-known vulnerability databases and concluded that NVD was actually
the most trustworthy database [14]; we used NVD in this paper.

Some existing work [29][32][17] studied malware propagation based on attack graphs to assess
the risk of malware along with specific attack paths and network topology. Attack graphs have
been extensively studied in the community to express the exploitation conditions of vulnerabilities.
However, due to the unknown nature of zero-day vulnerabilities, we contend that such approaches
are not always feasible to model zero-day malware. In contrast to existing work using attack
graphs, our work focuses on the speed of zero-day exploits across a network configured by similar
products. Highly similar configurations (in terms of potential vulnerabilities) would accelerate
the prevalence of zero-day exploits. Instead of producing specific propagation paths, we use more
general undirected edges to symbolize the connections (rather than directed information flow)
between different hosts. We then use the proposed similarity metric to estimate the infection of
zero-day exploits on each edge and find optimal diversification solutions.

3 SIMILARITY OF PRODUCT VULNERABILITY

In this section, we formally introduce the notion of vulnerability similarity between a pair of
products, namely the likelihood of an exploit compromising both products.

Definition 1 (Similarity of Product Vulnerability). Let xi , xj be a pair of products, Vx1
and
are sets of vulnerabilities of xi and xj respectively. The vulnerability similarity between xi and xj

Vx j

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:6

Tingting Li, Cheng Feng, and Chris Hankin

can be obtained by the Jaccard similarity coefficient [8]:

sim(xi , xj ) =

|Vxi ∩ Vx j |
|Vxi ∪ Vx j |

Given a pair of products, the vulnerability similarity is estimated by the ratio of the number of
shared vulnerabilities between the two products to the total number of vulnerabilities. The rationale
for this is to capture statistically how similar the vulnerabilities found on two products are.

To provide a more realistic sense, we can use the data from the NVD database [22] to calculate the
similarity metric for any pair of off-the-shelf products. There are more than 116,120 vulnerabilities
published by NVD at the time of this paper. Each NVD vulnerability feed contains information about
a specific vulnerability. An example of an NVD entry is given in Table 1, which includes a unique
identifier by the Common Vulnerability Enumeration (CVE) with the format “CVE-YEAR-NUMBER”,
the attack scenarios using the vulnerability, and the affected products sorted by Common Platform
Enumerations (CPEs). CPE provides a well-formed naming scheme for IT systems, platforms and
packages. Table 1 shows that if the vulnerability CVE-2016-7153 is exploited, a number of web
browsers from different vendors are affected such as IE, Chrome, Firefox, Opera, etc.

CVE-ID

Overview

Release
Date

CVSS v3.0
Severity and
Metrics:

Vulnerable
software
&Versions

Table 1. Simplified NVD Vulnerability Summary for CVE-2016-7153

CVE-2016-7153

The HTTP2 protocol does not consider the role of the TCP congestion window in providing information
about content length, which makes it easier for remote attackers to obtain cleartext data by leveraging a
web-browser configuration in which third-party cookies are sent, aka a "HEIST" attack.

September 6th, 2016

Base Score: 5.3 MEDIUM ;
Impact Score: 1.4 ;
Access Vector: Network;
User Interaction (UI): None;
Integrity (I): None;

Vector: AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N ;
Exploitability Score: 3.9
Access Complexity: Low ;
Scope (S): Unchanged;
Availability (A): None

Privileges Required (PR): None;
Confidentiality (C): Low;

cpe:/a:microsoft:edge:-
cpe:/a:microsoft:internet_explorer:-
cpe:/a:google:chrome:-
cpe:/a:apple:safari
cpe:/a:mozilla:firefox
cpe:/a:opera:opera_browser:-

Given the large number of vulnerabilities in NVD, CPE serves the role of sorting vulnerabilities
according to their affected products. We developed a program based on cve-search[19] to fetch
necessary data from NVD, filter out vulnerabilities for each studied product, and calculate the
similarity of vulnerabilities between products. The pairwise similarities are stored as Similarity
Tables. In this way, we can calculate the similarity of vulnerabilities between any pair of products
listed in NVD.

For the purpose of illustration, here we use operating systems and web browsers as examples.
We collect vulnerabilities for 9 common OS products and 8 common web browsers reported in the
period between 1999 and 2016. Table 2 enumerates the pairwise similarity between the chosen
OS products and Table 3 for the chosen web browsers. The reason for choosing these products is
mainly because they have been ranked as most vulnerable products by CVE Details [9]. Each entry
of the two tables contains the pairwise similarity calculated by Def.(1) and the number of shared
vulnerabilities between products in brackets. The diagonal entries in tables are the total number
of vulnerabilities of the row/column product. As the pairwise similarity is symmetric, the other
half of a similarity table is omitted. For reserving the generality and flexibility of our study, we

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:7

Table 2. Similarity Table for Common OS Products from CVE/NVD

WinXP2

Win7

Win 8.1

Win10

Ubt14.04

Deb8.0

Mac10.5

Suse13.2

Fedora

WinXP2

1.00 (479)

Win7

0.278 (328)

1.00 (1028)

Win8.1

Win10

Ubt14.04

Deb8.0

Mac10.5

Suse13.2

Fedora

0.009 (10)

0.228 (298)

1.00 (572)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

0.124 (164)

0.697 (421)

1.00 (453)

0 (0)

0 (0)

0.081 (109)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

0 (0)

1.00 (612)

0.208(195)

1.00 (519)

0 (0)

0 (0)

1.00(424)

0.170(161)

0.112 (102)

0 (0)

1.00(492)

0.083(75)

0.049 (41)

0.001(1)

0.116 (89)

1.00(367)

implicitly consider each different release/version of a product as a distinct product to compare. For
instance, Windows 8.1 and Windows 7 are treated as two individual products and sorted by two
different CPE queries cpe:/o:microsoft:windows_7 and cpe:/o:microsoft:windows_8.1.

From the tables, we can observe that products of the same vendor tend to have higher similarities.
Two exceptions are observed in Table 2: Mac OS X 10.5 and Windows 7 shares 8.1% vulnerabilities,
and Ubuntu 14.04 and Debian 8.0 have 20.8% vulnerabilities in common, despite these two pairs of
products being from different vendors. It is also noticed that products with a longer gap between
their release dates have a lower similarity.

Based on the statistical studies in both tables, we conclude that a single vulnerability is likely to
affect multiple products across different versions, different vendors and different platforms, which
implies that a single zero-day vulnerability could probably be exploited on heterogeneous hosts in a
network. Therefore, to maximize the resilience of a network against zero-day exploits, it is desirable
to use the up-to-date products from diverse vendors across a network. For instance, Windows 10
has much lower similarities of vulnerabilities with the other Windows OS, and even shares no
vulnerability with Windows XP. However, it is not always feasible to deploy the latest and diverse
products due to their incompatibilities with other services. For instance, SIMATIC WinCC is one
of the most widely applied SCADA systems, but it can only operate on Windows OS, and most
releases of WinCC do not fully support Windows 10 yet [27].

It is worth mentioning that the versions of selected software in both tables are constrained by
the granularity of CPE search engine. The CPE entries for many vulnerabilities in NVD are not
complete or of different granularities.

In this section, we demonstrated the usage of CVE data to calculate the vulnerability similarity.
The NVD database is one of the most well-known publicly accessible vulnerability databases, which
also covers most off-the-shelf products and up-to-date vulnerability information.

4 DIVERSE PRODUCT ASSIGNMENT

In this section, we present the formal model of a product assignment for a given network, which is to
find a diversification solution to assigning products to each host such that the malware propagation
between similar products can be effectively mitigated.

Each host has to provide a set of services S, such as an operating system, a web browser and
a database server. Each service can be provided by a range of diverse products P. Therefore, we
formally define a network in terms of hosts, links, services and products as below.

Definition 2 (Network). Let N = ⟨H, L, S, P⟩ be a network,
• H = {h0, . . . , hn } is a set of hosts.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:8

Tingting Li, Cheng Feng, and Chris Hankin

Table 3. Similarity Table for Common Web Browser from CVE/NVD

IE8

IE10

Edge

Chrome

Firefox

Safari

SM

Opera

IE8
IE10
Edge
Chrome
Firefox
Safari
SeaMonkey
Opera

1.0 (349)
0.386 (240)
0.014 (7)
0 (0)
0 (0)
0 (0)
0 (0)
0 (0)

1.0 (513)
0.121 (73)
0 (0)
0 (0)
0 (0)
0 (0)
0 (0)

1.0 (194)
0.001 (2)
0.001 (2)
0.002 (2)
0 (0)
0.003 (1)

1.0 (1661)
0.005 (15)
0.009 (21)
0.001 (3)
0.003 (6)

1.0 (1502)
0.003 (6)
0.450 (683)
0.004 (7)

1.0 (766)
0.001(1)
0.004(4)

1.0(492)
1.00(492)

1.00(225)

Fig. 2. A network with an assignment α by red circles

• L captures the links between a pair of hosts, L ⊆ H × H
• S = {s1, . . . , sm } is a set of services, and Shi ∈ 2S denotes a set of services provided by a host hi .
= {s1, . . . , sk }, where Shi ∈ 2S , k ⩽ m
(1)
• P is a set of off-the-shelf products, and hence each service sj can be provided by a range of diverse

Shi

products,

, . . . , pl
(2)
sj
Assigning one product for each service on a host is termed as an assignment of products for a

}, where px
sj

p(sj ) = {p1
sj

∈ P .

host.

Definition 3 (Product Assignment). Given a network N = ⟨H, L, S, P⟩, an assignment of
products is captured by α ′ : H × S → P, such that α ′(hi , sj ) is the product assignment for a service
. The assignment for all services at a host hi ∈ H can be derived
sj ∈ Shi
by α : H × 2S → 2P :

at the host hi : α ′(hi , sj ) = px
sj

α(hi , Shi ) = (α ′(hi , s1), . . . α ′(hi , sk ))

= (pm
, . . . , pn
)
sk
s1
∈ p(s1), . . . , pn
sk
Therefore α allocates products to all services running on a host, whilst α ′ assigns a product to a
specific service of a host. An example network is illustrated in Figure 2, where a network consisting
of 6 hosts H = {h0, . . . h5} is modelled. Each host provides up to two essential services web browser

where pm
s1

∈ p(sk )

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

h0h1h2h3h5h4db1db2db3db1db2db3wb1wb2wb3wb1wb2db2db3wb2wb3db1db2wb1wb2db1db2db3wb1wb2wb3Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:9

and database. Three diverse web browser products {wb1, wb2, wb3} and three database products
{db1, db2, db3} are available to choose. Each host might have different ranges of products to choose.
A possible product assignment α is highlighted by red circles in Figure 2

Now the problem is to find an optimal assignment which allocates most diverse products for each
pair of connected hosts, so that the likelihood of a malware propagation between two hosts can
be minimized. Nevertheless, some configuration requirements might hinder us from choosing the
most optimal product assignment in practice. Therefore, we formally introduce local and global
constraints to represent those requirements into the optimization process.

A local constraint indicates that for a particular host, a product pj is required to either config-
ure with another product pl (expressed by cy ), or avoid the product pk (expressed by cx ). Such
requirements can also be applied to all hosts by using global constraints.

Definition 4 (Configuration Constraints). Given a network N = ⟨H, L, S, P⟩, a set of
constraints C expresses any (un)desirable product combinations in the solution. A constrained solution
α C allocates products subject to C.

• a local constraint is applied to a specific host hi ∈ H in the form of: cx := ⟨hi , sm, sn, +pj , −pk ⟩

or cy := ⟨hi , sm, sn, +pj , +pl ⟩ such that the constrained solution α C satisfies:

C(hi , sm) = pj ∧ α ′
C(hi , sm) = pj ∧ α ′
• a global constraint is applied to all hosts in H in the form of: cx := ⟨ALL, sm, sn, +pj , −pk ⟩ or

∀cx ∈ C : α ′
∀cy ∈ C : α ′

C(hi , sn) (cid:44) pk
C(hi , sn) = pl

cy := ⟨ALL, sm, sn, +pj , +pl ⟩ such that α C satisfies:
∀cx ∈ C , ∀hi ∈ H : α ′
∀cy ∈ C , ∀hi ∈ H : α ′

C(hi , sm) = pj ∧ α ′
C(hi , sm) = pj ∧ α ′
The usage of constraints is demonstrated in the later case study (Section 7.2). Now we can define

C(hi , sn) (cid:44) pk
C(hi , sn) = pl

the optimal assignment of products (cid:98)α and the constrained optimal assignment (cid:98)α C as follows.

Definition 5 (Optimal Diversification). Given a network N = ⟨H, L, S, P⟩, an optimal
(cid:98)α(hi , Shi ) is the optimal product
(cid:98)α : H × 2S → 2P , such that
(cid:98)α C which provides an

assignment of products is captured by
assignment for a host hi ∈ H . A constrained optimal solution is denoted by
optimal product assignment subject to a set of local and global constraints C.

We adopt the following notation convention throughout this paper. α denotes an assignment of
products for a network in general. (cid:98)α is for an optimal assignment without constraints, and (cid:98)α C is
for a constrained optimal assignment. Specifically, α(hi , Shi ) includes the products assigned to a
host hi , and α ′(hi , sm) is the product assigned to a particular service sm at the host hi .

In the next section, we focus on finding such an optimal assignment of products (cid:98)α for a given

network, as well as computing constrained optimal solutions in Section 5.2.

5 FINDING THE OPTIMAL DIVERSIFICATION

First of all, we need a model to accurately represent a network in which each host has multiple
services and each service can be provided by a range of products. More importantly, this model has
to offer sufficient flexibility, because each host runs a customized set of services and even the same
service has various selections of products at different hosts due to any compatibility requirements.
Furthermore, we have to consider whether there is any existing efficient optimization algorithm to
such a model. For these purposes, the optimal diversification problem can be represented by using
a discrete Markov Random Field (MRF), which is converted into an optimal assignment problem of
MRF that can be solved by an efficient message passing algorithm.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:10

Tingting Li, Cheng Feng, and Chris Hankin

Specifically, we model this problem as a discrete MRF where each host has up to |S | services, and
there are up to |P | products for each service sk ∈ S. The optimization assigns up to |S | products –
one for each service on each host – to reach the global minima of the propagation. Given a network
N = ⟨H, L, S, P⟩, we derive the energy function E to denote the unary cost for each host and pairwise
cost between a pair of connected hosts.

E(N ) = (cid:213)
hi ∈H
sk ∈Shi

ϕ(hi , sk ) + (cid:213)

(hi,hj )∈L

ψ (α(hi , Shi ), α(hj , Shj ))

(3)

where ϕ(·) denotes how likely a product is preferred by a host hi to deliver the service sk , and
ψ (·, ·) is a pairwise cost between the products assigned to a pair of connected hosts, which in our
context would be the pairwise similarity between products. Our problem is then mapped to the
context of Conditional Random Fields [12], with regard to a minimum of energy E corresponding to
a maximum a-posteriori (MAP) labeling of the service sk . In the following subsections, we discuss
the formulation of the unary cost ϕ(·, ·) and pairwise cost ψ (·, ·) in more detail.

5.1 Unary Cost ϕ(·)
The unary cost is derived from the preference of a specific product for a host. By considering one
product being assigned to each host, our unary cost ϕ(·) is expressed as

(cid:213)

(cid:213)

hi ∈H

sk ∈Shi

Pr (α ′(hi , sk )|hi )

(4)

where Pr (·) presents the probability that a product is assigned to hi . In general cases, there is no
specific preference amongst available products for each host to deliver a service. Therefore this
term can be replaced by a small constant Prconst for optimization. Although such a unified cost
provides fast convergence in optimization, the real-world networks would be more complex and
constrained by practical requirements as discussed in Section 4. Therefore, the unary cost is further
refined subject to any constraints in the next subsection.

5.2 Unary Cost ϕ(·) with Constraints
In our system, constraints are implemented as conditional patches to our energy function, in
particular the unary cost. For a local constraint c ∈ C expressing an undesirable requirement
c := ⟨hi , sm, sn, +pj , −pk ⟩ or a desirable requirement c := ⟨hi , sm, sn, +pj , +pk ⟩, our unary cost ϕ(·)
can be represented as follows:

Pr (α ′(hi , sj )|hi )




=

Pc (α |α ′(hi , sm) = pj , α ′(hi , sn) = pk )
Prconst

if sj = sm
otherwise

For unconstrained services, there is no preference amongst products and the unary cost is given
by a small constant Prconst . For the constrained services (when sj = sm ), the unary cost is given
by Pc (·) which is interpreted as below according to the two types of local constraints above:
Pc (α |α ′(hi , sm) = pj , α ′(hi , sn) = pk )

if c := ⟨hi , sm, sn, +pj , +pk ⟩
0
∞ if c := ⟨hi , sm, sn, +pj , −pk ⟩

∝





J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:11

where the desirable constraint contributes no additional cost whilst the undesirable constraint
introduces a large cost. In this case, the optimization is induced to reach desirable assignments, but
avoid undesirable ones in energy minimization. Note that such customized unary cost can also be
applied for any global constraint, which is equivalent to applying a local constraint to all hosts.

5.3 Pairwise Cost ψ (·, ·)
The pairwise cost is derived from the similarity between the assigned products that provide the
same service. As mentioned previously, a pair of connected hosts being assigned with more similar
products would have greater infection rate, namely a zero-day exploit at one host is more likely to
infect the other. When defining the pairwise cost, we penalize such similarities in order to provide
a more diverse product assignment for the network. To achieve that, we define the pairwise cost
term ψ (·, ·) as:

(cid:213)

(cid:213)

(hi,hj )∈L

sk ∈Shi

∩Shj

sim(α ′(hi , sk ), α ′(hj , sk ))

(5)

where hi and hj denote a pair of connected hosts, and sim(·, ·) presents the similarity between two
products providing the same service on a pair of connected hosts. It serves as a strong regularization
on the product assignment as it ideally prevents the same product from being assigned to connected
hosts.

5.4 Energy Optimization
Based on the unary cost and pairwise cost, we can determine the optimal assignment (cid:98)α for N by
minimizing the energy function as below:

(cid:98)α = argmin
= argmin

α

E(N )

(cid:213)

(cid:213)

α
+ (cid:213)

hi ∈H

sj ∈Shi
(cid:213)

Pr (α ′(hi , sj )|hi )

sim(α ′(hi , sk ), α ′(hj , sk ))

(hi,hj )∈L

sk ∈Shi

∩Shj

Solving such an energy is NP-Hard, and the alternative way is to use an approximate minimization
algorithm to achieve a solution. The well-known techniques for solving such problems are based
on graph-cuts and belief propagation (BP). The former is currently considered as the most accurate
minimization approach for energy functions arising in many complex scenarios but it can be applied
to a limited range of energy forms. If the form is outside the class, like our energy function in Eq. 3,
BP is the common alternative. However, BP might not converge when applying to a wide range
of convex functions. Instead, we employ a sequential tree-reweighted message passing algorithm
(TRW-S) [15]. Similar to BP, TRW-S can be applied to the type of problems with the energy form in
Eq. 3. It is also guaranteed to give an optimal MAP solution in most cases [15]. TRW-S outperforms
BP and graph-cuts on many heavy tasks. It also demonstrates a great potential for the cases of
labeling of nearly flat probabilities, as well as the cases of large-scale networks.

Our optimization scheme mainly follows [15], which is also extended to a multi-level fashion
to better fit our problem. Specifically, we enable the possibility of the parallel computation and
even GPU acceleration. In addition, the optimization of the constrained energy is straightforward
because our constraints are efficiently encoded into the unary cost by manipulating the cost for
specific hosts and assignments. More details about the scalability analysis are given in Section 9. A
case study using our optimization approach in practice can be found in the later Section 7.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:12

Tingting Li, Cheng Feng, and Chris Hankin

6 EVALUATION OF NETWORK DIVERSITY

The purpose of this section is to evaluate how much diversity a specific product assignment can
bring about into a network, and we achieve this by using a network diversity metric based on
Bayesian Networks [32]. Given a network N and a specific product assignment α, we first construct
its corresponding Bayesian Network (in Section 6.1) to estimate the infection rate on each edge
between hosts, based on which we can evaluate the network diversify by calculating the value of
the metric (in Section 6.2).

6.1 Bayesian Network Evaluation Model

Before we define the complete Bayesian Network, we need a way to capture the impact of the
attacker’s behaviour on malware propagation. From an attack entry host, there are different ways
to reach the final target by continuously exploiting a number of stepping-stone hosts. At each
attack step from one host to another, there are often more than one vulnerable products to exploit
and induce further spread of the malware. Therefore, we introduce the notion of exploitation paths
and attack nodes. A conventional attack path chains a number of hosts from an entry to the final
target, whereas an exploitation path explicitly illustrates the product that is exploited at each host
along with an attack path. Attack nodes then capture which product is chosen to exploit between a
pair of connected hosts.

Definition 6 (Attack Nodes). Given a network N = ⟨H, L, S, P⟩ with a specific product assign-
ment α, E = {eh0h1, . . . , ehmhn } denotes a set of attack nodes connecting a pair of connected hosts.
Each attack node ehi hj
includes a set of products on the destination host hj , which can be exploited
from a source host hi , and a silent action (i.e. none). Therefore the domain states of an attack node is
Ω(ehi hj ) ∈ α(hj , Shj ) ∪ {none}.

Attackers can choose one of the products to exploit or keep silent. Different choices lead to

different propagating rates to the destination host.

Now we can formally define the Bayesian Network (BN) for a given network N subject to a
specific assignment α. Attack nodes E are added into the BN. PE defines for each attack node the
likelihood of a product being selected to exploit. For instance, PE = {Peh0h1
} defines
the conditional probability tables (CPT) for attack nodes in Figure 3 and in this example attackers
choose products to exploit uniformly. P ′
, P ′
} defines the risk distribution of each host
H
h3
without considering the vulnerability similarities of products, i.e. products share no vulnerabilities
with each other, while PH = {Ph1, Ph3, Ph5 } takes the similarities into account. Therefore, P ′
H
is constant for a given static network, regardless of the assigned products, while PH is directly
influenced by α.

= {P ′
h1

, Peh1h3

, Peh3h3

, P ′
h5

Definition 7. Let B = ⟨⟨N , α⟩, E, Pr oot , Pavд, PE, PH , P ′

network N = ⟨H, L, S, P⟩ with a specific product assignment α, where

H ⟩ be a Bayesian Network for a given

• E is the associated set of attack nodes.
• Pr oot is the prior probability distribution of root hosts.
• Pavд is the average infection rate of a zero-day exploit.
• PE = {Peh0h1

, . . . , Pehm hn

nodes such that Pehj hi
to exploit next.
= {P ′
h1

, . . . , P ′
hn
preceding attack nodes. P ′

• P ′
H

} includes conditional probability distribution (CPT) for all attack
| hi ), the probability distribution over a set of products

denotes Pr (ehj hi

} includes conditional probabilities of all non-root host nodes given their
hj ∈H ehj hk ), and subject to noisy-OR

denotes Pr (hk = T | (cid:208)

hk =T

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:13

Fig. 3. Partial Bayesian Network for the running example

operator [26],

Pr (hk = T |

(cid:216)

hj ∈H

ehj hk ) = 1 −

(cid:214)

hj ∈H

1 − Pr (hk = T |ehj hk )

where P(hk = T |ehj hk ) is the probability of the host hk being compromised from hj .

• PH = {Ph1, . . . , Phn } includes conditional probabilities of all non-root host nodes by considering
hj,hi ∈H ehj hk , ehi hj ),

the vulnerability similarity between products. Phk =T denotes Pr (hk = T | (cid:208)
and subject to noisy-OR operator,

Pr (hk = T |

(cid:216)

ehj hk , ehi hj )

(cid:214)

hj,hi ∈H
1 − Pr (hk = T |ehj hk , ehi hj )

= 1 −

hj,hi ∈H

where Pr (hk = T |ehi hj , ehj hk ) is the probability of the host hk being compromised by considering
the exploited products at the preceding hosts hj and hi , and the probability is estimated as follows:

Pr (hk = T | ehi hj




Pavд
sim(p j

=

= p j

sm , ehj hk

= pk
sn

)

if sm (cid:44) sn
otherwise

)

sm , pk
sn

Without considering the similarity, the probability of a host being infected P ′

hk =T only depends
on the products being chosen to exploit at the host and the infection rate is set to the average
zero-day propagation rate Pavд. To model the scenario of reusing exploits on similar products, we
introduce an extra set of links into the BN, which are indicated by red dashed lines in Figure 3.
These links connect the preceding attack nodes with the current host such that we can represent
Phk . As demonstrated in Figure 3, the probability distribution of h3 is conditional on the current
attack node eh1h3 as well as its preceding attack node eh0h1. If both attack nodes exploit the same

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:14

Tingting Li, Cheng Feng, and Chris Hankin

type of products such as wb1 and wb3, then the chance of h3 being compromised is the vulnerability
similarity of wb1 and wb3, which is assumed to be 0.9. If different types of products are exploited,
such as wb1 and db1, then the Pavд = 0.08 is used. Here we use the same value for Pavд as in the
existing work [32][30]. It is a nominal value but reasonably low for zero-day vulnerabilities, which
is subject to change, depending on the assessment of the actual application scenarios.

From this simple example, we can see that different assignments would yield BN models with
different infection rates on edges. Given a product assignment, we can construct the corresponding
BN model to estimate the risk of the target node, which can be used to evaluate the current
diversification introduced by the given assignment.

6.2 Network Diversity Metrics

In this subsection, we present the diversity metric used in this paper to evaluate product assignments
for a network. The network diversity metric was proposed by Zhang et. al. [32] to evaluate a
diversified network by measuring the average attacking effort needed to compromise the network.
We adapt the metric to fit our model considering the vulnerability similarity of products.

Definition 8 (BN-based Diversity Metric dbn). Given a Bayesian Network B = ⟨⟨N , α⟩, E,
H ⟩ constructed for a diversified network N , and a specific target host ht , the
Pr oot , Pavд, PE, PH , P ′
network diversity based on B can be defined as below in term of the probability of the target host being
compromised: dbn = P ′
) is the probability of ht being infected with (without)
where Pht =T (P ′
considering the vulnerability similarity of products w.r.t Definition 7.

ht =T
Pht =T

ht =T

The probabilistic metric dbn estimates the average attacking effort by combining all valid ex-
ploitation paths. Naturally, the diversity metric dbn is always less than 1.0 and the greater value
indicates higher diversity. With the help of Bayesian Networks, Pht =T captures the risk of the
target host when the vulnerability similarity of products is considered. Pht =T reflects the current
robustness of the network, which is provided by the given product assignment, against repeating
ht =T indicates the maximum potential of the network diversity. More
uses of zero-day exploits. P ′
explanations about this metric can be found in [32].

7 CASE STUDY - UPGRADING LEGACY ICS WITH MODERN INDUSTRIAL

NETWORKS

In this section, we present a case study on upgrading legacy control systems with interconnected
IT systems, to achieve the convergence of IT and OT in modern industrial networks. Such an
integration can facilitate highly interconnected Industrial Internet of Things (IIoT) applications,
but also leave ICS more vulnerable by introducing more attack vectors, i.e. as the control networks
are no longer isolated, malware can propagate itself across IT systems to breach the core control
units causing physical damage.

Therefore, in this case study, we demonstrate the usage of our approach in finding an optimal
diversification strategy to improve the resilience of the integrated systems. Particularly we consider
three main constraints that might arise when applying the approach in practice:

(i) Most hosts in OT networks run legacy software, which have no flexibility to diversify or

upgrade.

(ii) Some hosts in various networks are required to run specific software and hence cannot be

diversified.

(iii) Some desirable and undesirable product combinations should be taken into account.

We start with a brief description of the case study in Section 7.1. An optimal solution and two
constrained optimal solutions are then computed and illustrated in Section 7.2. In Section 7.3 we

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:15

Fig. 4. A typical structure of integrated modern ICS

evaluated the produced optimal solutions in terms of (i) the diversity metric discussed in Section
6, and (ii) the Mean-time-to-compromise (MTTC) obtained from NetLogo simulations we have
developed.

7.1 Experiment Configuration

The example is adapted from the Stuxnet-like worm propagation analysis in [6]. Figure 4 depicts a
typical ICS architecture integrating existing OT zones (e.g. Operation Network, Control Network)
with new IT zones (e.g. Corporate Sub-Network, Clients Network, Vendors Support Network). We use
gray shading to indicate that OT zones have no flexibility to diversify or upgrade deployed software.
Specific firewall white-list access rules are also given in Figure 4 to provide perimeter protection
between different zones.

We use the example to demonstrate the Stuxnet worm propagation across an ICS. The primary
intrusion can be introduced from the Corporate Network, Clients Network or Vendors Support Network.
Once a host has been exploited as a foothold, the worm can continue scanning other connected
hosts for similar vulnerabilities, by which the worm can propagate itself through the network.
Stuxnet eventually breached the hosts in Control Network, such as t4, t5 and t6 in Figure 4, which
can access field devices.

In the following experiments, we consider the optimal assignment of products to provide three
key services, i.e. an Operating System (OS), a Web Browser(WB) and a Database Server(DB). These
services are distributed across all the hosts in the network according to the key role each host plays
(indicated in Figure 4). For instance, the host c1 in the Corporate Network is configured as a WinCC
Web Client, which runs WinCC V7.x as the main application. The essential requirements for this
application are a Windows OS and an IE web browser [27], and hence a range of available products
that we can choose to install on c1 is provided in Table 4. The host z2 in DMZ requires a Windows
OS and a Microsoft Database Server to run the WSUS server, which is reflected accordingly in

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

c1: WinCC Web Clientc2: OS Web Clientc3: Data Monitor Web Clientc4: Historian Web Clientz1: Virusscan Severz2: WSUS Severz3: Web Navigator Server z4: OS Web Severp1: Historian Web Clientp2: SIMATIC IT Serverp3: SIMATIC SQL Severt3: WinCC Clientt2: OS Clientt1: Maintenance Servert6: WinCC ServerCorporate (Sub)NetworkDMZOperations NetworkControl Networke1: WinCC Web Cliente2: OS Web ClientClients Networkr1: WinCC Web Clientr2: OS Web ClientRemote Clientse3: Client Workstatione4: Client Historianr3: Client Workstationr5: Client Historianr4: Client Workstationv1: Historian Web Clientv2: Vendors Workstationv3: Vendors Workstation Vendors Support Networkc2,c4z4p2,p3z4z4t1,t2p1t1,e1,r1,v1t1,t2e1,r1,v1t5: WinCC Servert4: OS ServerS7-300S7-300S7-400S7-400111:16

Tingting Li, Cheng Feng, and Chris Hankin

the table. As a result, Table 4 lists essential services required at each host and the corresponding
selections of products for each service.

Table 4. Available products for essential services in the case study

Serv.

Products

c1

c2

c3

c4

z1

z2

z3

z4

p1

p2

p3

t1

t2

t3

t4

t5

t6

e1

e2

e3

e4

r1

r2

r3

r4

r5

v1

v2

v3

Windows XP
Windows 7 ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓
Ubuntu 14.04

✓ ✓

✓

✓ ✓

✓ ✓ ✓

✓ ✓ ✓ ✓

✓

✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓

✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓

Debian 8.0

✓

✓ ✓

✓

✓

✓ ✓ ✓

✓ ✓ ✓ ✓ ✓ ✓

✓ ✓ ✓ ✓

✓ ✓

✓ ✓ ✓

✓ ✓ ✓ ✓

✓

✓

✓ ✓ ✓ ✓ ✓

✓

✓

✓ ✓ ✓ ✓

✓

✓ ✓ ✓

✓ ✓ ✓

✓

✓

✓ ✓

✓

✓ ✓ ✓

✓

✓ ✓

✓

✓

✓

✓

✓

✓

✓

✓

✓ ✓

✓ ✓

✓ ✓

✓ ✓

✓ ✓

✓ ✓

s1

s2

s3

IE8

IE10

Chrome 50

MS SQL 2008

MS SQL 2014

MySQL 5.5

MariaDB 10

We highlight the legacy hosts in grey in Table 4, which run outdated software and cannot be
diversified (e.g. the host p2, p3 in the Operations Network). The example also includes several
outdated versions of software running on legacy hosts such as Windows XP, MS SQL 2008. All of
these introduce extra constraints in finding the optimal diversification strategy. The other chosen
products in Table 4 are either frequently suggested in WinCC manuals or rated as one of the most
vulnerable products by CVE Details [9].

The similarities of web browsers and operating systems refer to Table 2 and 3, and the similarities
for DB products are obtained in the same way as described in Section 3. Given the products for
each host in Table 4, we can compute the optimal solution to diversifying the networked ICS by
the approach discussed in Section 5. It is worth noticing that our approach offers high generality
and flexibility, by which each host can have a customized range of services, and each service can
have various ranges of products to deploy.

7.2 Optimal Assignment of Products
The optimal assignment (cid:98)α for the case study is computed by the approach introduced in Section 5
and illustrated in Figure 5(a). The assignment indicates the optimal strategy to deploy the software in
IT networks when integrating with OT systems. The solution attempts to minimize the vulnerability
similarity between each pair of connected hosts. From the figure, we can find that each pair of
connected hosts is generally assigned with different products from each other.

As mentioned in the beginning of this section, the second type of constraints we might encounter
is that some hosts are required to run specific software according to certain company policies. For
this case study, we specify that the host z4, e1, r1 and v1 are required to run specific products. We
outline fixed choices for these hosts in Table 4 in grey. Having adding those constraints into the
optimisation, we now compute the constrained optimal assignment (cid:98)αC1 , which is given in Figure
5(b). It can be seen that whilst we fixed the products of the four hosts, the new solution accordingly
updates assignments of products for several hosts to find new optimal diversification, as highlighted
by red squares.

We can also specify undesirable product combinations to avoid during optimisation. For instance,
the solution (cid:98)αC1 in Figure 5(b) uses the IE10 on Ubuntu14.04 at host v2. If we want to eliminate
such undesirable assignments, we can specify and embed product constraints in the computation of
optimal solutions, as introduced in Definition 4.

For instance, the following set of global constraints C2 = {c1, c2, c3, c4} captures the exclusive

requirement between Ubuntu (Debian) OS and IE across all hosts:

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:17

Fig. 5. Optimal Assignment of products for the case study

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Win7IE10Ubt14ChromeDebian8IE10MySQLWin7IE10MSSQL14f1Debian8Win7MSSQL14Win7IE10Ubt14Chromef2c1c2c3c4z1z2z4z3PLCsp1p3p2t1t2t3t5t4t6f3Win7IE10MariaDBe1Win7IE10e2Ubt14Chromee3Debian8MSSQL14e4Win7IE10MariaDBr1Win7IE10r2Ubt14Chromer3Ubt14Chromer4Debian8MSSQL14r5Debian8Chromev3Win7IE10v1Ubt14IE10v2MariaDBWin7IE10DebianIE10Ubt14ChromeMySQLWin7IE10MSSQL14f1Ubt14Win7MSSQL14Win7IE10Win7Chromef2c1c2c3c4z1z2z4z3PLCsp1p3p2t1t2t3t5t4t6f3Win7IE8MSSQL14e1Win7IE10e2Ubt14Chromee3Debian8MySQLe4Win7IE8MSSQL14r1Win7IE10r2Ubt14Chromer3Ubt14Chromer4Debian8MSSQL14r5Debian8Chromev3Win7IE8v1Ubt14IE10v2MSSQL14Win7IE10DebianChromeUbt14ChromeMySQLWin7IE10MSSQL14f1Ubt14Win7MSSQL14Win7IE8Win7Chromef2c1c2c3c4z1z2z4z3PLCsp1p3p2t1t2t3t5t4t6f3Win7IE8MSSQL14e1Win7IE8e2Ubt14Chromee3Debian8MySQLe4Win7IE8MSSQL14r1Win7IE8r2Ubt14Chromer3Ubt14Chromer4Debian8MSSQL14r5Debian8Chromev3Win7IE8v1Ubt14Chromev2MSSQL14(b) Optimal assignment of products         with host constraints (a) Optimal assignment of products (c) Optimal assignment of products        with product constraints  111:18

Tingting Li, Cheng Feng, and Chris Hankin

c1 := < ALL, OS, WB, +Ubuntu 14.04, -IE8 >
c2 := < ALL, OS, WB, +Ubuntu 14.04, -IE10 >
c3 := < ALL, OS, WB, +Debian 8.0, -IE8 >
c4 := < ALL, OS, WB, +Debian 8.0, -IE10 >

With the constraints in C2, we can compute the constrained optimal solution (cid:98)αC2 that is illustrated
in Figure 5(c). It can be found that the web browsers at c2 and v2 are changed to Chrome as required.
The optimal solution (cid:98)α is produced by minimizing the energy function presented in Section
5.4, and hence it guarantees the minimal infection rate of the worm and the most diverse product
assignment possible. In order to accommodate the host and product constraints, the constrained
solutions (cid:98)αC1 and (cid:98)αC2 have to sacrifice a certain amount of diversity. In the next section, we evaluate
all these optimal solutions and quantify the compromised diversity of the constrained solutions in
terms of the diversity metric proposed in Section 6.2 and MTTC by our NetLogo simulation.

7.3 Case study analysis
7.3.1 Evaluation by Network Diversity Metric. First of all, we construct a Bayesian Network for the
case study with a given assignment of products in order to estimate the propagation of malware. In
the following experiments, we consider an attacker breaks into the system from c4 in Corporate
Network, and hence we set c4 to be the root being infected with a prior probability 1.0. The final
target of the attack is set to the host t5 which has the direct access to controlling the critical field
devices. Therefore, the probability of the target t5 being infected becomes the key element to
calculate the network diversity metric dbn = P ′

t 5=T /Pt 5=T , as defined in Definition 8.

Given an assignment of products (e.g. the optimal one (cid:98)α), we can determine the possible infection
rate of zero-day malware at each edge with the help of the constructed Bayesian Network. As we
investigate the infection of multiple zero-day exploits, we assume that the attacker is in possession
of three unique zero-day exploits, each of which exploits a particular type of product respectively
(i.e. OS, WB and DB). Once a host is infected, attackers search for similar products/vulnerabilities
to exploit amongst the connected hosts and proceed. When multiple exploits are feasible, attackers
evenly choose one to use, which defines the CPT for attack nodes associated with each edge. The
similarity between the source and chosen product decides the likelihood of infecting the chosen
product.

Table 5. Diversity metric dbn of different product assignments

Label

Description

log P ′

t 5=T

log Pt 5=T

ˆα
ˆαC1
ˆαC2
αr
αm

optimal assign.
host constr.
product constr.
random assign.
mono assign.

-3.151
-3.151
-3.151
-3.151
-3.151

-3.062
-2.838
-2.833
-2.576
-1.978

t 5=T
Pt 5=T

dbn = P ′
0.81457
0.48590
0.48119
0.26622
0.06709

The first row of Table 5 is the evaluation of the optimal assignment (cid:98)α which reaches a very high
diversity dbn = 0.81457. The constrained optimal solutions ˆαC1 and ˆαC2 produce lower diversities
as the two solutions are required to accommodate certain constraints. Discussion about the impact
of such constraints on the optimal diversification continues in Section 8.3.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:19

For the purpose of comparison, we also generate a homogeneous assignment αm which generally
allocates the same operating system, the same web browser and the same database server for all
non-constrained hosts. Such mono-assignment provides the worst possible diversity for the ICS
case. It also shows how vulnerable the network would become if we use homogeneous products.
Besides, a randomly diversified assignment αr is also provided, which delivers a limited diversity
that is significantly lower than our optimal solution.

The notation P ′

t 5=T denotes the probability of the target t5 being infected without considering the
vulnerability similarities between products. Therefore, P ′
t 5=T has a constant value for all different
assignments. When we take similarities into consideration, the probability of t5 being infected
P ′
t 5=T increases with less diverse assignments of products.
7.3.2 Evaluation by NetLogo Simulation. NetLogo is an agent-based modelling tool that enables
a programmable modelling environment for simulating natural phenomena and behaviours of
complex systems over time [31]. We use NetLogo to construct the networked ICS as shown in
Figure 4 and simulate the propagation of malware. After breaking into the system from a host,
attackers can further spread the worm across the network. Given an assignment of products (e.g.
the one in Figure 5(a)), we can determine the possible infection rate of zero-day exploits at each
edge in NetLogo.

Figure 6 provides the simulation views for four different assignments ˆα, ˆαC1 , ˆαC2 and αm
respectively. The numbers on edges are the highest possible infection rate of exploits between a pair
of hosts. As we considered the sophisticated attackers who conduct reconnaissance activities before
launching attacks, at each step attackers always chooses the exploits with the highest success rate.
It can been seen from Figure 6(a) that the optimal assignment without constraints ˆα guarantees
relatively low infection rate for most edges except those with legacy hosts. Due to rigid constraints,
the ˆαC1 and ˆαC2 have to leave the infection rates on some edges to be 1, as the connected hosts are
assigned with the same product, e.g. IE10 on c1 and c2, and Window 7 on z2 and z4 in Figure 6(b).
Having set up the simulation with a given product assignment, we can determine how much
time (MTTC) is required by attackers to penetrate the diversified network, which implies the
average effort required to compromise the network. More optimal assignment should provide more
resilience to the network against the penetration.

To test the resilience provided by the diversification, we designed five sets of experiment to
simulate the malware propagation from five different entry points respectively – c1 and c4 from the
Corporate Network, e3 from the Clients Network, r4 from the Remote Clients, and v1 from the Vendors
Support Network. Once the entry host is infected, attackers search for similar products/vulnerablities
to exploit from the connected hosts.

Table 6. MTTC (in ticks) against different assignments

Assignment MTTC
from c1

MTTC
from c4

MTTC
from e3

MTTC
from r4

MTTC
from v1

ˆα
ˆαC1
ˆαC2
αm

45.313
28.041
14.549
14.345

37.561
16.812
15.817
12.654

52.663
44.359
45.118
19.338

52.491
48.472
46.257
18.865

24.053
15.243
14.749
15.916

For each set of experiments, we deployed the network according to the three optimal assignments
ˆα, ˆαC1 and ˆαC2, as well as the mono-assignment αm. Each experiment ran the simulation for 1,000

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:20

Tingting Li, Cheng Feng, and Chris Hankin

Fig. 6. NetLogo simulation views for the case study

times. The average MTTC for each test is given in Table 6. The MTTC is the time steps (i.e. ticks in
NetLogo) consumed by attackers to successfully reaching the final target. The results show that the
optimal assignment ˆα provides the strongest resilience to the network, as it requires the longest
period of time to be compromised in the all five attack scenarios, while the other two constrained
optimal assignments can be compromised in a shorter period of time. The mono-assignment
provides the weakest resilience to the network.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

(b) NetLogo Simulation of MTTC with optimal assignment        (d) NetLogo Simulation of MTTC with mono assignment        (c) NetLogo Simulation of MTTC with optimal assignment        (a) NetLogo Simulation of MTTC with the optimal assignment  Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:21

8 NETWORK DIVERSITY ANALYSIS

In addition to the vulnerability similarity of products, there are other factors affecting the optimiza-
tion of network diversity. In this section, we focus on three key factors – the network structure
(Section 8.1), the variety of products per service (Section 8.2) and the number of configuration
constraints (Section 8.3). We use an artificial network N in which 30 hosts H = {h1, . . . , h30}
are created, each host runs three different services S = {s1, s2, s3} and at least three products are
provided for each service to choose. We set three entry nodes and a target h30. The diversity metric
is calculated in terms of the probability of h30 being compromised. In the following sections, we
create a number of variants of the network N to examine the impact of the aforementioned factors
on the optimal network diversity.

8.1 Impact of Network Structure

We create different network structures with various numbers of routing nodes. Routing nodes
are generally hosts with heavy traffic flows. Diversifying routing nodes is of great importance to
improve the network robustness [21]. We define routing nodes as the hosts of at least degree 3,
i.e. there are at least three edges connecting to the host. We create different numbers of routing
nodes by randomly adding a number of edges to the network. The number of routing nodes in the
following experiments are 6, 10, 12 and 14 respectively.

Table 7. Diversity metric dbn of different # routing nodes

# Routing
Nodes

# Attack
Paths

log P ′

h30=T

log Ph30=T

dbn = P ′

h30=T
Ph30=T

6
10
12
14

15
48
60
66

-3.896
-6.239
-6.238
-5.829

-3.814
-5.496
-5.495
-5.238

0.82682
0.18095
0.18093
0.25628

Table 7 gives the evaluation of the optimal diversification for each case. At a low number of
routing nodes (i.e. 6), the optimal diversification provides a remarkable improvement to network
diversity with dbn = 0.82682. As the increasing number of attack paths, the optimal diversity
metric has been reduced. Despite the growing number of attack paths, our optimal solutions
can still maintain the similar network diversity at the 10, 12 and 14 routing nodes. It should be
noticed that the increasing number of routing nodes are created by adding random edges to the
network. Therefore, the trend of the diversity dbn could be fluctuate as the number of routing nodes
increases. The optimal solutions also improve the network robustness against the expanding attack
vector, which is reflected by the generally decreasing probability of the target being infected Ph30=T .
Another noticeable observation is that the optimal diversification tends to be more necessary when
protecting dense network with larger number of exploitation paths.

8.2 Impact of the Variety of Products

The variety of products can also influence the optimal diversity. A wide variety of candidate products
can introduce more diversity and flexibility when assigning products, which more importantly, can
reduce the chance of a pair of connected nodes being assigned highly similar products. We still use
the network N of 30 hosts with 10 routing nodes, 3 services per host. The variety of products we
tested is from 3 to 7 and the detailed evaluation is provided in Table 8.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:22

Tingting Li, Cheng Feng, and Chris Hankin

Table 8. Diversity metric dbn of various # products per service

# Products
per Service

log P ′

h30=T

log Ph30=T

dbn = P ′

h30=T
Ph30=T

3
4
5
6
7

-6.239
-6.239
-6.239
-6.239
-6.239

-5.062
-5.216
-5.392
-5.655
-5.950

0.06653
0.09481
0.14226
0.26053
0.51437

The decreasing value of Ph30=T indicates that with a higher variety of products, the network
can provide better protection to the target. We also observe that the diversity dbn is improved
with more available products. However, when applying the optimal diversification in practice,
as demonstrated by the ICS case study in Section 7.2, a number of configuration constraints can
stop us from using the most optimal assignment. In the next section, we study the impact of the
increasing number of constraints on the optimization.

8.3 Impact of Configuration Constraints
We specify different numbers of local constraints (i.e. 5, 10, 15) to compute the constrained optimal
solution. The added constraints for each run of the experiment are randomly generated. It is possible
that the added constraints are not in conflict with the optimal solution, in which case the resulting
constrained optimal solution can still provide the same diversity as the optimal solution. Therefore,
we intentionally add constraints to against the optimal solution generated in Table 7 (at 10 routing
nodes), so that we can evaluate how the constraints compromise the optimal diversity.

Table 9. Diversity metric dbn of various # constraints

# Local Constraints

log P ′

h30=T

log Ph30=T

0
5
10
15

-6.239
-6.239
-6.239
-6.239

-5.497
-5.490
-5.443
-5.224

h30=T
Ph30=T

dbn = P ′
0.18095
0.17838
0.15996
0.09669

The results are then compared with the optimal solution with no constraint in Table 9. The
results clearly show that the increasing number of constraints can compromise the optimized
diversity and reduce the protection to the target.

9 SCALABILITY ANALYSIS

In this section, we focus on analyzing the scalability of our optimization approach. We run the
optimization against a series of randomly generated networks. Figure 7 illustrates a numerical
analysis when optimizing networks of varying numbers of hosts in Figure 7(A), varying degrees of
hosts (edges per host) in Figure 7(B) and varying numbers of services per host in Figure 7(C).

For the best performance, our optimizer is implemented using C++ and enables the multi-threading
mechanism to provide high convergence speed in multi-level optimization. We apply a GPU-friendly
compute unified device architecture to gain extra efficiency on complex matrix operation. All the
experiments run on a mid-range computer with an Intel i5 2.8GHz CPU, a 8GB RAM and an Nvidia

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:23

Fig. 7. Scalability with randomly generated networks. (A) analysis by fixing 3 degrees and 3 services per host;
(B) analysis by fixing 100 hosts and 3 services per host; (C) analysis by fixing 100 hosts and 30 degrees per
host.

Table 10. Computational time (in seconds) for networks of various densities over different # hosts

# deg.

# serv.

100

200

400

600

# hosts
800

1000

2000

4000

6000

mid-density

high-density

20

40

15

25

0.239

0.640

0.438

1.766

1.099

3.553

1.478

5.881

1.944

8.135

2.784

6.706

16.517

33.392

10.999

27.484

82.500

151.110

Table 11. Computational time (in seconds) for various sizes of networks over different # degrees

# hosts

# serv.

5

10

15

20

25

# degree
30

35

40

45

50

mid-scale
large-scale

1000
6000

15
25

0.759
21.239

1.577
40.940

1.954
59.216

2.693
77.583

3.294
95.750

4.040
117.810

4.652
144.470

5.174
152.040

5.758
167.190

6.309
189.710

Table 12. Computational time (in seconds) for various sizes of networks over different # services

# hosts

# deg.

# edges

5

10

# services
20

15

25

30

mid-scale

large-scale

1000

6000

20

40

∼ 20,000
∼ 240,000

0.603

10.306

1.608

27.214

2.709

51.587

4.008

5.253

6.974

90.407

134.340

188.050

GTX 750. The optimization in all the following experiments can be achieved within a reasonably
short time from a couple of seconds to minutes.

We observe that the number of hosts has a major impact on the computational consumption. As
shown in Figure 7(A), the time increases nonlinearly with the increasing number of hosts. However,
our method still provides a high efficiency on mid-scale networks – the optimization converges
within 0.24 seconds when the network size is up to 1000 hosts. A reasonably high speed is also
provided on the large-scale networks – the optimal assignment for 10,000 hosts can be obtained
within 7.342 seconds on average.

Figure 7 (B) and (C) show that the computational time of our approach increases linearly along
with the increment of either the degree of nodes or the number of services. By fixing the network
size (#100) and the number of services (#3) of each host, our optimization converges within 0.253
seconds for the large degree (#50) that results in more than 2900 edges. Our method behaves
similarly on the experiments with varying numbers of services. The optimal solution is found

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

1002004006008001000200040006000800010000Number of Hosts012345678Time (seconds)7.34 s3.55 s0.24 s5101520253035404550Number of Degrees00.050.10.150.20.250.3Time (seconds)0.127 s0.253 s51015202530Number of Services00.20.40.60.81.01.2Time (seconds)0.39 s1.01 sABC111:24

Tingting Li, Cheng Feng, and Chris Hankin

within 1.01 seconds given a large number of services (#30) on a network with 100 hosts. Such
computational time is highly promising for most networks in the real world.

We further test our optimization approach against high density and large-scale networks that we
might encounter in practice. Table 10 provides the computational time of optimizing networks with
the middle (20 degrees and 15 services per host) and high density (40 degrees and 25 services per
host). Again we observe that the number of hosts has a major impact on the computational time,
but our method still finds the optimal solution within 3 minutes for large-scale (6000 hosts) high-
density network. Moreover, we run experiments on mid-scale and large-scale networks with various
densities and the results in Table 11 show that the degree has less influence on the computational
time than the number of hosts. Finally, we vary the number of services for each host on both
mid-scale and large-scale networks in Table 12. For a large-scale network of 6000 hosts with up to
240,000 edges and 30 services per host, our method still performs well and converges at about 3
minutes.

10 DISCUSSION AND CONCLUSION

Moving towards integrated ICS enables an efficient way to operate these systems, but also provides
new attack vectors for adversaries to breach them. It is now a challenging and urgent issue for
many industrial organizations to find a secure way to converge OT and IT systems to provide
an efficient and also resilient industrial environment. Furthermore, there are other constraints
hindering us from finding an optimal solution, such as outdated legacy systems, strict company
policies and other configuration requirements. In this paper, we proposed an approach based on
software diversification to increase the system resilience of the integrated ICS against malware
propagation.

We introduced the similarity metric to capture how similar the vulnerabilities of two products
are, which was then applied in a statistical study on CVE/NVD databases. The study showed that
most vulnerabilities could affect multiple products, even from different vendors. Therefore, when
finding the diverse assignment of products, we explicitly considered such vulnerability similarities
of products. The similarity metric can estimate the likelihood of a zero-day exploit successfully
propagating itself between two products. By assigning diverse products for a pair of connected
hosts, such propagation can be effectively reduced. Unlike most existing work, we do not assume
that there is only one vulnerable product on each host, and instead we adopted a multi-label model
to represent various attack vectors on each host, offered by different products. Such a model is of
great help to investigate the collaboration of multiple exploits.

We formally represented the network by a MRF model with different services (encoded as labels)
and products (encoded as values) for each host. Such a model can then be efficiently optimized by
the TRW-S algorithm. Thus, we can obtain an optimal assignment of products for a given network.
The optimal solution is able to maximize the defense strength of the network against malware
propagation. Compared to random diversification plans, the optimal solution is more effective in
cutting off valid attack paths. In the scalability analysis, we illustrated that our method scaled well
in large-scale high-density networks.

We contend that our approach has great value and potential in practical applications, by which we
can advise on the best diversification strategy for a system operator to decide the most robust way
to upgrade an existing ICS. We also demonstrated the practical usage of our optimization approach
in a realistic case study. Furthermore, we provided a way to specify configuration constraints that
we might encounter in practice. Constrained optimal solutions can be produced to accommodate
these constraints.

There are several promising lines of research to carry on. The vulnerability similarity of products
in this work is estimated by data from CVE/NVD database. We are aware of the potential “publication

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

Improving ICS Cyber Resilience through Optimal Diversification of Network Resources

111:25

bias” of CVE/NVD. However, as discussed in [14], NVD is currently the most trustworthy database,
compared to the others. One of our key contributions is the introduction of the similarity metric
and the actual use of the metric in our optimization in a way that we can more accurately capture
the spread of zero-day malware. We will keep working on finding more convincing sources to
provide values for this metric. Besides, we are also working on a more systematic way to estimate
the vulnerability similarity between two products, such as (i) from the perspective of software
engineering to analyze difference of the exploits for different products [7]; or (ii) by estimating
how diverse two products are [20]. Besides, as our approach provides highly competitive efficiency
and scalability, we are looking at optimal diversification for dynamic networks.

REFERENCES
[1] Algirdas Avizienis. 1985. The N-version approach to fault-tolerant software. IEEE Transactions on software engineering

12 (1985), 1491–1501.

[2] Benoit Baudry and Martin Monperrus. 2015. The multiple facets of software diversity: Recent developments in year

2000 and beyond. ACM Computing Surveys (CSUR) 48, 1 (2015), 16.

[3] Sandeep Bhatkar, Daniel C DuVarney, and Ron Sekar. 2003. Address Obfuscation: An Efficient Approach to Combat a

Broad Range of Memory Error Exploits.. In USENIX Security Symposium, Vol. 12. 291–301.

[4] Daniel Borbor, Lingyu Wang, Sushil Jajodia, and Anoop Singhal. 2016. Diversifying Network Services Under Cost
Constraints for Better Resilience Against Unknown Attacks. In IFIP Annual Conference on Data and Applications
Security and Privacy. Springer, 295–312.

[5] Mehran Bozorgi, Lawrence K Saul, Stefan Savage, and Geoffrey M Voelker. 2010. Beyond heuristics: learning to classify
vulnerabilities and predict exploits. In Proceedings of the 16th ACM SIGKDD international conference on Knowledge
discovery and data mining. ACM, 105–114.

[6] Eric Byres, Andrew Ginter, and Joel Langill. [n.d.]. How Stuxnet Spreads âĂŞ A Study of Infection Paths in Best Practice

Systems. Available at https://www.tofinosecurity.com/how-stuxnet-spreads, access date: February 09, 2018.

[7] Alejandro Calleja, Juan Tapiador, and Juan Caballero. 2016. A Look into 30 Years of Malware Development from a
Software Metrics Perspective. In International Symposium on Research in Attacks, Intrusions, and Defenses. Springer,
325–345.

[8] Seung-Seok Choi, Sung-Hyuk Cha, and Charles C Tappert. 2010. A survey of binary similarity and distance measures.

Journal of Systemics, Cybernetics and Informatics 8, 1 (2010), 43–48.

[9] CVE-Details. [n.d.]. Top 50 Products By Total Number Of "Distinct" Vulnerabilities. Available at http://www.cvedetails.
com/top-50-products.php and http://www.cvedetails.com/top-50-versions.php, access date: February 09, 2018.
[10] Nicolas Falliere, Liam O Murchu, and Eric Chien. 2011. W32. stuxnet dossier. White paper, Symantec Corp., Security

Response 5 (2011).

[11] Miguel Garcia, Alysson Bessani, Ilir Gashi, Nuno Neves, and Rafael Obelheiro. 2011. OS diversity for intrusion
tolerance: Myth or reality?. In Dependable Systems & Networks (DSN), 2011 IEEE/IFIP 41st International Conference on.
IEEE, 383–394.

[12] Stuart Geman and Donald Geman. 1984. Stochastic relaxation, Gibbs distributions, and the Bayesian restoration of

images. IEEE Transactions on pattern analysis and machine intelligence 6 (1984), 721–741.

[13] Kjell Jørgen Hole. 2015. Diversity reduces the impact of malware. IEEE Security & Privacy 13, 3 (2015), 48–54.
[14] Pontus Johnson, Robert Lagerstrom, Mathias Ekstedt, and Ulrik Franke. 2016. Can the Common Vulnerability Scoring

System be Trusted? A Bayesian Analysis. IEEE Transactions on Dependable and Secure Computing (2016).

[15] Vladimir Kolmogorov. 2015. A new look at reweighted message passing. IEEE transactions on pattern analysis and

machine intelligence 37, 5 (2015), 919–930.

[16] Per Larsen, Andrei Homescu, Stefan Brunthaler, and Michael Franz. 2014. SoK: Automated software diversity. In

Security and Privacy (SP), 2014 IEEE Symposium on. IEEE, 276–291.

[17] Tingting Li and Chris Hankin. 2016. Effective Defence Against Zero-Day Exploits Using Bayesian Networks. In

International Conference on Critical Information Infrastructures Security. Springer.

[18] MITRE. [n.d.]. Common vulnerabilities and exposures. Available at https://cve.mitre.org/, last acceessed on February 09,

2018.

[19] Pieter-Jan Moreels and Alexandre Dulaunoy. [n.d.]. cve-search. GitHub repository at https://github.com/cve-

search/cve-search, access date: February 09, 2018.

[20] Kartik Nayak, Daniel Marino, Petros Efstathopoulos, and Tudor Dumitraş. 2014. Some vulnerabilities are different

than others. In International Workshop on Recent Advances in Intrusion Detection. Springer, 426–446.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

111:26

Tingting Li, Cheng Feng, and Chris Hankin

[21] Andrew Newell, Daniel Obenshain, Thomas Tantillo, Cristina Nita-Rotaru, and Yair Amir. 2015. Increasing network
IEEE Transactions on Dependable and Secure

resiliency by optimally assigning diverse variants to routing nodes.
Computing 12, 6 (2015), 602–614.

[22] NIST. [n.d.]. National Vulnerability Database. Available at https://nvd.nist.gov/, access date: February 09, 2018.
[23] Adam J O’Donnell and Harish Sethu. 2004. On achieving software diversity for improved network security using
distributed coloring algorithms. In Proceedings of the 11th ACM conference on Computer and communications security.
ACM, 121–131.

[24] Partha Pal, Richard Schantz, Aaron Paulos, and Brett Benyo. 2014. Managed execution environment as a moving-target

defense infrastructure. IEEE Security & Privacy 12, 2 (2014), 51–59.

[25] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2012. Smashing the gadgets: Hindering return-
oriented programming using in-place code randomization. In Security and Privacy (SP), 2012 IEEE Symposium on. IEEE,
601–615.

[26] Judea Pearl. 2014. Probabilistic reasoning in intelligent systems: networks of plausible inference. Morgan Kaufmann.
[27] SIEMENS. [n.d.]. WinCC v7.4: General information and installation. Available at https://cache.industry.siemens.com/dl/
files/216/109736216/att_879785/v1/WinCC_GeneralInfo_Installation_Readme_en-US_en-US.pdf, access date: February
09, 2018.

[28] Keith Stouffer, Victoria Pillitteri, Suzanne Lightman, Marshall Abrams, and Adam Hahn. 2015. Guide to Industrial

Control Systems (ICS) Security. NIST Special Publication 800 (2015), 82.

[29] Lingyu Wang, Sushil Jajodia, Anoop Singhal, and Steven Noel. 2010. k-zero day safety: Measuring the security risk of

networks against unknown attacks. In Computer Security–ESORICS 2010. Springer, 573–587.

[30] Lingyu Wang, Mengyuan Zhang, Sushil Jajodia, Anoop Singhal, and Massimiliano Albanese. 2014. Modeling Network
Diversity for Evaluating the Robustness of Networks against Zero-Day Attacks. In Computer Security-ESORICS 2014.
Springer, 494–511.

[31] U. Wilensky. [n.d.]. NetLogo. Available at http://ccl.northwestern.edu/netlogo/., access date: February 09, 2018.
[32] Mengyuan Zhang, Lingyu Wang, Sushil Jajodia, Anoop Singhal, and Massimiliano Albanese. 2016. Network diversity:
a security metric for evaluating the resilience of networks against zero-day attacks. IEEE Transactions on Information
Forensics and Security 11, 5 (2016), 1071–1086.

J. ACM, Vol. 37, No. 4, Article 111. Publication date: August 2018.

