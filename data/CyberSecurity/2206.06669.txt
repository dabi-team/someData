Highlights

Snakes and Ladder Logic: PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool
Sam Maesschalck,Alexander Staves,Richard Derbyshire,Benjamin Green,David Hutchison

• A previously unconsidered approach towards the understanding of PLC vulnerabilities.

• A tool, PLC-VBS, supporting the identiﬁcation of vulnerable PLC memory.

• The results of a vulnerability scan conducted against a vendor-provided PLC code base commonly used in practice.

2
2
0
2

g
u
A
7
1

]

R
C
.
s
c
[

2
v
9
6
6
6
0
.
6
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
Snakes and Ladder Logic: PLC-VBS, a PLC Control Logic
Vulnerability Discovery Tool

Sam Maesschalcka,∗, Alexander Stavesa, Richard Derbyshirea,b, Benjamin Greena and
David Hutchisona

aLancaster University, InfoLab21, Lancaster, LA1 4WA, United Kingdom
bCapula, Orion House, Stone Business Park, Stone, ST15 0LT, United Kingdom

A R T I C L E I N F O

Keywords:
ICS
SCADA
PLC
Cyber Security
PLC Vulnerability Scanner
PLC Programming Practices

A B S T R A C T

Cyber security risk assessments provide a pivotal starting point towards the understanding of existing
risk exposure, through which suitable mitigation strategies can be formed. Where risk is viewed as a
product of threat, vulnerability, and impact, understanding each element is of equal importance. This
can be a challenge in Industrial Control System (ICS) environments, where adopted technologies are
typically not only bespoke, but interact directly with the physical world. To date, existing vulnerability
identiﬁcation has focused on traditional vulnerability categories. While this provides risk assessors
with a baseline understanding, and the ability to hypothesize on potential resulting impacts, it is
high level, operating at a level of abstraction that would be viewed as incomplete within a traditional
information system context. The work presented in this paper takes the understanding of ICS device
vulnerabilities one step further. It oﬀers a tool, PLC-VBS, that helps identify Programmable Logic
Controller (PLC) vulnerabilities, speciﬁcally within logic used to monitor, control, and automate
operational processes. PLC-VBS gives risk assessors a more coherent picture about the potential
impact should the identiﬁed vulnerabilities be exploited; this applies speciﬁcally to operational process
elements.

1. Introduction

Critical National Infrastructure (CNI) can be seen as the
supporting backbone of everyday life, typically categorised
across 13 sectors, such as energy and water (CPNI, 2020).
Underpinning the core operational elements of these envi-
ronments are Industrial Control Systems (ICSs). The Purdue
Enterprise Reference Architecture (Figure 1) provides a
clear depiction of an ICS split into hierarchical levels. From
this model a deﬁned set of operational functions is outlined,
each of which plays its role in the uninterrupted operation of
physical operational processes (treatment of water, distribu-
tion of electricity, etc.), of paramount importance to societal
well-being. The lower the level within this model, the closer
to physical operational processes the associated devices
become, with an increasing deviation from traditional IT
towards more bespoke industrial technologies.

Over recent years we have observed an increasing level
of sophistication in attacks targeting ICSs that underpin
CNI (Miller, Staves, Maesschalck, Sturdee and Green, 2021).
While legislation has been introduced to support the contin-
ued development of defensive strategies (European Com-
mission, 2019), there remains a challenge using available
resources to accurately identify and assess risk. Where
risk is viewed as the product of threat, vulnerability, and

∗Corresponding author

s.maesschalck@lancaster.ac.uk (S. Maesschalck);

a.staves@lancaster.ac.uk (A. Staves); r.derbyshire1@lancaster.ac.uk (R.
Derbyshire); b.green2@lancaster.ac.uk (B. Green);
d.hutchison@lancaster.ac.uk (D. Hutchison)

ORCID(s): 0000-0003-4609-3487 (S. Maesschalck);

0000-0002-9861-0477 (A. Staves); 0000-0003-3902-5056 (R. Derbyshire);
0000-0001-6052-0559 (D. Hutchison)

Figure 1: Purdue Model Didier et al. (2011)

impact, understanding each element is of equal impor-
tance (Derbyshire, Green and Hutchison, 2021). Vulner-
ability and impact can present a signiﬁcant challenge to
be fully comprehended within an ICS context, as current
tooling focuses on traditional vulnerability categorisation
at a device level (Denial of Service, protocol limitations,
etc.). This limits an assessor’s ability to focus on how an
attacker could impact operational process behaviour, which
is of particular importance when one considers Advanced
Persistent Threats (Ahmad, Webb, Desouza and Boorman,
2019).

The work presented in this paper takes the understanding
of ICS device vulnerabilities a step further, and oﬀers a
tool that we call PLC-VBS (Programmable Logic Controller

S Maesschalck et al.: Preprint submitted to Elsevier

Page 1 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

Variable Block Scanner) that helps identify Programmable
Logic Controller (PLC) vulnerabilities. More speciﬁcally,
it can identify vulnerabilities within control logic (program
code) used to monitor, control, and automate operational
processes (e.g., a water tank level). The insights it aﬀords
to risk assessors also allow for a more coherent picture on
the potential impacts should the identiﬁed vulnerabilities be
exploited, with direct links to speciﬁc operational process
elements (e.g., a valve within a water tank level control
process). We present the results of a practical usecase study
with commercial-grade PLCs and publicly available control
logic, demonstrating the value of our approach and how
it can enhance risk assessment processes when compared
to traditional vulnerability scanning tools. In this research
we have focused on vendor-provided library functions as
these are widely used in practice (Ljungkrantz and Akesson,
2007).

The primary contributions of this paper are:

• A previously unconsidered approach towards the un-

derstanding of PLC vulnerabilities.

• A tool, PLC-VBS, supporting the identiﬁcation of

vulnerable PLC memory.

• The results of a vulnerability scan conducted against
a vendor-provided PLC code base commonly used in
practice.

The remainder of this paper is structured as follows. Sec-
tion 3 covers related work. Section 4 provides a background
on PLC program structures. Section 5 develops our main
contribution, which is subsequently validated in Section 6.
Section 7 provides a discussion of the results, with Section 8
concluding the paper and suggesting areas for future work.

2. Industrial Control Systems

When looking at national infrastructure, we can see that
critical parts of it are underpinned by industrial control
systems. These systems are designed to control and automate
industrial processes used within many industries, including
water and nuclear (Green, Lee, Antrobus, Roedig, Hutchison
and Rashid, 2017b; McLaughlin, Konstantinou, Wang, Davi,
Sadeghi, Maniatakos and Karri, 2016). Critical infrastruc-
ture consists of 13 national infrastructure sectors (Centre for
the Protection of National Infrastructure, 2021): Chemicals,
Civil Nuclear, Communications, Defence, Emergency Ser-
vices, Energy, Finance, Food, Government, Health, Space,
Transport and Water. Of these sectors, ICSs can be found
in nearly all of them, for example, as part of manufacturing
plants to control robots or the health sector to control HVAC
(Heating, Ventilation, and Air Conditioning) systems.

Any adverse impact on the operation of ICSs within
organisations that host critical infrastructure can severely
impact society. Therefore, any vulnerabilities that can be
found within these systems pose a potential danger. Over
the past decade, we can see a trend of Internet-connected
ICSs, expanding the attack surface on these devices as it

would allow adversaries from anywhere on the Internet
to interact with these systems. Many ICSs were generally
not designed with this Internet connectivity in mind, and
the proprietary protocols they use may be susceptible to
attack (Ahmed, Obermeier, Sudhakaran and Roussev, 2017);
also, the software running on these systems is often not
regularly patched and can stay vulnerable for a long time.

This paper mainly focuses on PLCs (Erickson, 1996),
which are used to control physical devices such as valves
and actuators. In addition to this, they provide management
of processes within the environment and monitor the status
of the system. PLC logic can, for example, be used to
trigger an alarm when an event (e.g. water level rises to
90%) happens. The logic of the PLC is written in ladder
logic. These systems are often paired with a Human Machine
Interface (HMI) (Cybersecurity & Infrastructure Security
Agency) which allows an operator to control the physical
device using a graphical user interface, rather than having
to send a speciﬁc command to the PLC as the HMI sends
this command instead based on the input it has been given.
The way this is done is by directly interacting with the PLC
memory structure and changing values related to the oper-
ation that is requested, e.g. changing the valve from closed
(0) to open (1). An HMI can also be used to display sensor
information in a graphical manner, such as the water level
within a tank or historical data from within the environment.

3. Related Work

Research into vulnerabilities within traditional IT sys-
tems/software has been at the forefront of security research
for several decades. This is in direct contrast with work in
ICSs, which has seen an increased focus only in recent years.
This aligns with the shift towards more integrated IT and
ICS environments, removing the isolation between the two,
rendering ICS environments more vulnerable to external
adversaries, including those from nation states (Derbyshire,
Green, Prince, Mauthe and Hutchison, 2018; Miller et al.,
2021). Due to ICS deployment issues, there exists a conse-
quent plethora of vulnerabilities. However, research within
the ICS vulnerability space has tended to focus on operating
systems, ﬁrmware, industrial protocols and circumventing
traditional security measures (Abbasi, Hashemi, Zambon
and Etalle, 2016; Nochvay, 2019; Drias, Serhrouchni and
Vogel, 2015; Wardak, Zhioua and Almulhem, 2016; Biham,
Bitan, Carmel, Dankner, Malin and Woo, 2019). This in-
cludes research and development into vulnerability scan-
ning tools designed with ICSs in mind (Antrobus, Frey,
Green and Rashid, 2016; Antrobus, Green, Frey and Rashid,
2019). These tools are critical in providing information on
exploitable vulnerabilities within operational environments
during risk assessments.

Two notable vulnerabilty scanners have been developed
by Antrobus et al. (2016, 2019). One, SimaticScan, focuses
on vulnerability scanning of Siemens PLCs, with the other,
PIVoT Scan, focusing on scanning Industrial Internet of
Things (IIoT) environments. SimaticScan is designed to
detect a range of vulnerabilities within a Siemens PLC,

S Maesschalck et al.: Preprint submitted to Elsevier

Page 2 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

including Web vulnerabilities and unauthorised read/write
requests. Within its evaluation, this tool identiﬁed multiple
vulnerabilities across the researchers’ testbed environment,
including one that was previously unknown. In the evalu-
ation of PIvoT Scan it was seen to outperform a popular
vulnerability scanner, Nessus. Although Nessus (Tenable,
2022) does contain plugins that support the scanning of ICS
devices, it remains a tool primarily developed for use within
traditional IT environments. OpenVAS (Greenbone, 2022),
another well known vulnerability scanner, lacks ICS speciﬁc
scanning capabilitites, limiting its value in a similar way to
Nessus. While both OpenVAS and Nessus are able to ﬁnd
basic vulnerabilities (e.g., DoS, HTTP-based, and SMTP-
based) (McMahon, Patton, Samtani and Chen, 2018), they
fail to identify vulnerabilities directly linked to operational
process monitoring, control, and automation. Two additional
ICS speciﬁc port scanners that can be used to assess vulnera-
bilities are PLCScan (Searle, 2015) and ModScan (Bristow,
2008). These tools are not vulnerability scanners; however,
their output (software and hardware focused) can be used
in conjunction with vulnerability databases to identify the
existence of known vulnerabilities. Therefore, they can not
be used in the identiﬁcation of new vulnerabilities that might
aﬀect the system under consideration.

PLC programs are developed across ﬁve special pro-
gramming languages (see Section 4), one of which is com-
monly referred to as "ladder logic" (ladder diagrams). Lad-
der logic was originally designed to document the design
and construction of relay racks in a sequential process. Over
time, ladder logic evolved into a full programming lan-
guage, and with it, related research. Research on ladder logic
by Kottler, Khayamy, Hasan and Elkeelany (2017) intro-
duces formal veriﬁcation, where Eckhart, Ekelhart, Lüder,
Biﬄ and Weippl (2019) allow us to consider wider impli-
cations of vulnerabilities within systems through the use of
a security development lifecycle. As with conventional pro-
grams, adversaries could identify and exploit issues within a
PLCs program. Therefore, the ability to identify and assess
vulnerabilities within programs running on these systems is
of crucial importance.

When evaluating PLC programs, speciﬁc programming
practices have to be taken into account (Fluchs, 2020).
Current programming practice includes the use of library
functions developed and provided by device vendors. This
can be seen in Ljungkrantz and Akesson (2007), in which
the authors explore programming practices and the use of
library functions. We can assert that these functions, and
consequently associated memory use, behave in the same
way across all devices in which they are deployed. Addi-
tionally, not only do PLC programmers rely on these library
functions, but they also create their own custom functions,
written for use across an entire organisation. Identifying vul-
nerabilities within these functions would render all systems
in which they are deployed vulnerable. Vulnerabilities on
this scale would be very considerable, given the international
breath of their deployment.

Tools such as PCaaD (Green, Derbyshire, Krotoﬁl,
Knowles, Prince and Suri, 2021) (Process Comprehension
at a Distance) take an initial step towards the identiﬁcation
of vulnerabilities within PLC programs and allow for the
development of process comprehension (Green, Krotoﬁl and
Abbasi, 2017a) without any pre-existing knowledge about
the target system; however, they are highly focused and fail
to assess previously unseen PLC programs due to their use
of signature-based recognition. This, along with the other
work discussed throughout this section, provides the primary
motivation for the development of a PLC vulnerability
scanning tool capable of holistically identifying issues in
PLC programs, whether created by vendors as part of public
libraries, or developed in-house by PLC programmers.

Thus, we propose such a new tool, Programmable Logic
Controller Variable Block Scanner (PLC-VBS), which pro-
vides a comprehensive overview of the vulnerabilities within
the control logic of the PLC. Due to the focus on ladder logic,
our tool is vendor agnostic and speciﬁcally designed for
PLCs rather than re-purposed from IT-based tools. With this
tool, programming practices can be improved and evaluated
to create a more secure system, as will be explained in the
subsequent sections of this paper.

4. PLC Program Structures

In setting out an approach by which vulnerabilities de-
rived from current PLC programming practices can be iden-
tiﬁed, it is important ﬁrst to understand the baseline con-
struction of PLC programs.

While PLCs are available from multiple vendors, and
are deployed across diverse industrial contexts (e.g., water,
electricity, and gas) (Stouﬀer, Pillitteri, Lightman, Abrams
and Hahn, 2014), they all execute a series of instructions,
referred to as a "Program". This program is, however, more
commonly referred to as "control logic", and thus will be the
adopted term throughout the remainder of this paper.

Control logic acts as the intelligence behind opera-
tional process monitoring, control, and automation, enacted
through its ability to interface with sensors and actuators.
While this may be its primary function, the way in which it
can be achieved, and the range of additional capabilities it
oﬀers, is often overlooked; for example, it can also include
the conﬁguration and operation of network protocols, hard-
ware interfaces, SMS alerting, PLC-to-PLC data exchanges,
and so on.

Using BSI/IEC standard 61131-3:2013 (British Stan-
dards Institute, 2013) as a guide, ﬁve control logic pro-
gramming languages are deﬁned for use on PLCs (Ladder
Diagrams, Function Block Diagrams, Sequential Function
Charts, Instruction Lists, and Structured Text). While ven-
dors may choose to develop their own custom languages,
they are typically subtle variations of those deﬁned by
BSI/IEC. Moving one step further into the control logic
ecosystem, we have Program Organization Units (POUs),
applicable across all of the aforementioned languages. The
following POU deﬁnitions are taken from Green et al. (2021)

S Maesschalck et al.: Preprint submitted to Elsevier

Page 3 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

who use and expand on BSI/IEC 61131-3. We have opted to
include this extended deﬁnition as it captures one critical
element not well covered by BSI/IEC 61131-3, that of
variables.

• Programs: are the highest level of organizational
unit. They control the operation sequence, enabling
responses to cyclic, time-based, or interrupt-driven
events during program execution. They are composed
of speciﬁc instructions but also Function Blocks and
Functions.

• Function Blocks (FB): contain code that stores their
values permanently in memory, remaining available
post Function Block execution.

• Functions: provide discrete common functionality,
for example, ADD or SQRT. Function POUs can
use global variables to permanently store data, but
do not have their own dedicated memory (i.e., local
variables).

• Variable Blocks (VB): store program data in the
PLCs memory and can be global (gVB) or local (fVB).
The latter of these are associated with Function Blocks
to provide long term data storage. The VB is an
addition to the POU model as deﬁned by IEC 61131-
3. This standard describes the use of variables in a
general way, with limited links to their storage.

Control logic can be written in three POUs: these are
Programs, FBs, and Functions. Figure 2 depicts a basic Lad-
der Diagram example. This control logic represents two ’if’
statements. (1) If Example_Input_1 and Example_Input_2
== 1, then Set Example_Output to 1, and (2) If Exam-
ple_Input_1 and Example_Input_2 == 0, then Reset Exam-
ple_Output to 0. While this example was constructed using
a Ladder Diagram, any of the ﬁve programming languages
deﬁned in BSI/IEC 61131-3 could have been adopted here
(dependent on device/vendor support). Furthermore, despite
any variation in language, the inputs and output variables
would have remained constant. In this example, the inputs
and output represent three Boolean variables stored within a
gVB.

Figure 2: Ladder Diagram Example

Additional specialist control logic elements for accessing
and addressing system components may also exist depending
on the device/vendor; these include peripherals, timers, and
pointers. Pointers are perhaps the most common and well
understood, due to their use within conventional program-
ming languages. They assist in the reduction of common data
replication across a control logic base (induced through other
data access/processing methods).

To support the development of control logic, vendors of-
ten produce libraries of Functions and FBs (Siemens, 2019);
these are also referred to as "instruction sets" (Allen Bradley,
2008). Libraries contain pre-written control logic supporting
a wide range of functions, from converter operations to com-
munication exchanges. Due to the beneﬁts brought about
through the use of libraries (tested, trusted, standardised
code snippets that provide signiﬁcant time and performance
eﬃciencies); their adoption is widespread (Ljungkrantz and
Akesson, 2007).

5. Scanning for Vulnerabilities

Based on the already mentioned POUs, we have two op-
tions when it comes to the development of a scanner capable
of identifying control logic vulnerabilities; (1) focus directly
on the control logic itself, or (2) examine how PLC memory
is being used within the control logic to store variable data
(gVBs and fVBs). The following subsection will introduce a
threat model, deﬁning vulnerabilities a scanner should seek
to identify. This will be used to ground discussions on the
two alternative scanner approaches.

5.1. Threat Model

Existing work has demonstrated that attacks targeting
PLCs can be executed at both the network and hardware
level (Green et al., 2017a). These have been witnessed across
a range of real-world events dating back to the 1980s (Miller
et al., 2021). One of the most commonly discussed attacks,
operating at the network level, exploits the use of PLC
network protocols to inject unauthorised command mes-
sages into a PLC’s memory (VBs) (MITRE, 2021; Robles-
Durazno, Moradpoor, McWhinnie, Russell and Maneru-
Marin, 2019). Figure 3 depicts normal/trusted operational
use of a Human Machine Interface (HMI) by a system
operator. In simple terms, an operator will use HMIs (these
can be compact touch screen devices (Siemens, 2022), or
larger desktop/server based systems (Siemens, 2020b)) to
send requests to PLCs. These requests are stored in the PLCs
VBs (gVBs and/or fVBs), which in turn are ingested and
processed as part of the PLC control logic. The control
logic will then operate underlying physical processes (e.g.,
starting/stopping a pump) via output cards (See the Digital
Output "DO" card in Figure 3). It is this trusted HMI func-
tionality that attackers mimic when adopting unauthorised
command message attack techniques.

As this type of attack can be challenging to mitigate at the
network layer (Green et al., 2021), it oﬀers a compelling ar-
gument towards identiﬁcation and remediation at the device
level (i.e., within the control logic), and therefore forms the

S Maesschalck et al.: Preprint submitted to Elsevier

Page 4 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

should "Example_Output" be when "Example_Input_1" and
"Example_Input_2" are in opposing states (i.e., one is in
a 1 state and the other a 0)? There is no control logic to
manage this state combination; therefore, this would induce
a vulnerability whereby an attacker is able to manipulate
"Example_Output" via unauthorised command messages
(during time periods where the Example_Inputs are in op-
posing states). This type of vulnerability would need to be
included as part of a pre-deﬁned set of signatures.

A vulnerability scanner adopting this approach would be

expected to meet the following set of requirements:

• Support all ﬁve PLC programming languages as de-
ﬁned by BSI/IEC 61131-3:2013 (British Standards
Institute, 2013), and any subtle vendor-speciﬁc oﬀ-
shoots.

• Develop and maintain a database of PLC programing

practices that can induce vulnerabilities.

• Allow for the extraction of control logic directly from

a PLC or via a project ﬁle.

These requirements present several challenges. As ven-
dors typically use their own custom PLC programming
software (Siemens, 2020c), they will compile control logic
for use on their devices alone. Therefore, when PLC code is
extracted from a PLC, normalisation of data will be required
to provide a standardised output for which vulnerabilities
can then be identiﬁed. In addition, the development and
maintenance of a comprehensive vulnerability database will
require signiﬁcant upkeep, and must be compatible with all
ﬁve PLC programming languages.

Despite these challenges, there are clear beneﬁts in
adopting this approach. Primarily, upon the identiﬁcation of
a vulnerability, it will be possible to provide focused and
proportionate guidance on its impact, and how it can be
remediated.

5.3. Scanning PLC Memory

As previously noted, PLCs provide direct access to mem-
ory over the network as part of their core operational func-
tionality. This forms the basis of our threat model. Therefore,
examining the construction and scope for manipulation of
PLC memory, in a similar way to that of an attacker, provides
an alternative approach to vulnerability identiﬁcation.

Taking the example from Section 5.2, whereby the ma-
nipulation of "Example_Output" in Figure 2 is made pos-
sible during time periods in which the "Example_Inputs"
are in opposing states, a tool scanning PLC memory would
be required to identify this vulnerability through the direct
manipulation of "Example_Output" during a scan.

A vulnerability scanner adopting this approach would be

expected to meet the following set of requirements:

• Support for all major PLC communication protocols

that provide direct access to memory.

Figure 3: HMI - PLC Interaction Process

Figure 4: Threat Model

basis for vulnerability identiﬁcation through the remainder
of this paper.

Attacking a PLC via the injection of malicious data into
its memory requires network-level access via the device’s
supported network protocol and function (e.g., S7-Comm
and Write requests (Molenaar and Preeker, 2013)). This can
be achieved in a number of ways, with Figure 4 included as
a point of reference across the following examples:

• (1) The PLC has been conﬁgured with a public IP
address. Examples of this type of deployment can be
seen in Shodan (Shodan, 2020). As the PLC resides
directly on a public IP address with no network-based
defensive controls, an attacker with Internet access
can directly inject malicious data into the PLC’s mem-
ory with no restrictions.

• (2) The PLC has been conﬁgured to sit behind a
ﬁrewall that ﬁlters incoming requests. In this scenario,
an attacker would be required to compromise a trusted
device that is permitted to traverse the ﬁrewall and
communicate with the PLC.

• (3) The PLC is within a network segment that has
a poorly protected WiFi network. Once access has
been obtained, an attacker would have direct network
connectivity to the PLC.

5.2. Scanning control logic

Figure 2 provides an example of a Ladder Diagram, in
which an output (Example_Output) is controlled via the use
of two inputs (Example_Input_1 and Example_Input_2). A
vulnerability scanner capable of identifying vulnerabilities
within control logic would be required to interpret this, and
ﬂag the presence of known vulnerabilities based on a set
of pre-deﬁned signatures. For example, using the control
logic from Figure 2 as a base for discussion, what state

S Maesschalck et al.: Preprint submitted to Elsevier

Page 5 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

• Identiﬁcation of memory that can be directly manipu-
lated as well as indirectly (i.e., can "example_output"
be directly manipulated or can it only be manipulated
via the two "example_inputs"?).

All evaluation was undertaken within a physical environ-
ment deployed following the guidance provided by (Green,
Derbyshire, Knowles, Boorman, Ciholas, Prince and Hutchi-
son, 2020).

• Account for control logic overwriting manipulated
memory with correct/true data within a given time-
period.

The primary challenge in meeting these requirements
comes in the form of protocol support. As existing proto-
cols vary in their associated open-source documentation,
practical manual dissection of their structure may ﬁrst be
required. In addition, unlike direct scanning pf control logic,
even where all requirements are met, a scanner adopting this
approach will still rely on manual examination of the control
logic to better understand why areas of memory are open
to manipulation, and how appropriate remediation activities
can then be undertaken.

5.4. Summary

Section 3 identiﬁed various existing works and tooling,
developed for the identiﬁcation of PLC vulnerabilities. How-
ever, while these approaches adopt techniques that may be
more suitable for use in an industrial, safety-driven context,
they still focus on traditional sorts of vulnerabilities. While
there are exceptions, they still fail to explore control logic in-
duced vulnerabilities, instead oﬀering other related features,
such as code veriﬁcation and process comprehension.

In deﬁning a threat model, we have focused the func-
tionality of a control logic vulnerability scanner down to
the use of a speciﬁc attack vector, namely unauthorised
command messages injecting malicious data into PLC mem-
ory MITRE (2021).

By reviewing the two scanning techniques presented
here, we believe scanning PLC memory oﬀers a lower bar-
rier to entry in the identiﬁcation of control logic vulnerabil-
ities, and aﬀords a greater level of scalability. This is due to
the commonality of memory use/access across PLCs from
multiple vendors (Green et al., 2021), alongside commonly
adopted network protocols (Feld, 2004; Tamboli, Rawale,
Thoraiet and Agashe, 2015). A tool developed on one device
could be used directly on another with no requirement for
further adaptation. Furthermore, as this approach operates in
a similar way to the attack vector deﬁned within our threat
model, the scanner could be executed from speciﬁc network
segments, thus adding to the users’ overall understanding
of risk exposure where an attacker has an assumed level
of system access. This would allow for the simultaneous
evaluation of control logic and access controls.

6. Scanner Proof of Concept

To facilitate practical proof-of-concept exploration of
our scanner a Siemens 300 series PLC was used based
on its global adoption (making it a representative use-
case) (Siemens, 2020a), and the Siemens TIA v13 (Profes-
sional) platform as a programming agent (Siemens, 2020c).

6.1. Siemens PLC Ecosystem

The Siemens 300 series PLC used during our evaluation
supports Ladder Diagrams, Statement List (Instruction List),
Function Block Diagram, Graph, and Structured Text pro-
gramming languages. During programming, four primary
blocks are used to build the control logic: Organisation
Blocks (OB), Function Blocks (FB), Functions (FC), and
Data Blocks (DB) (i.e., Variable Block POUs). These four
blocks map directly with the POUs deﬁned within Section 4.
Within these blocks, aside from DBs, an engineer can
write control logic. As DBs in the Siemens Ecosystem
represent VBs, they are used to store variables called OBs,
FCs, and FBs. There are additional symbol types where data
can be generated, output, and stored, such as I/O Signals (I
and Q), Marker Memory (M, MB, etc.), Peripheral I/O (PIW,
PQB, etc.), and Timers and Counters (T & C) (PLCDev,
2020). However, for the purposes of this work we will be
focusing on DBs as these store the variables related to the
linked function which we seek to evaluate.

Figure 5 has been included to better explain the use of
gVBs and fVBs within a Siemens context. To the left of this
ﬁgure is a single rung of ladder logic. On this rung is the
AS_MAIL FB, part of the Siemens TIA Communications
library. Once triggered, this FB will send a pre-constructed
email to a pre-deﬁned recipient. This could be used as part
of an emergency alerting system, notifying system operators
of issues with the underlying operational process (e.g., a
pump tripping). To the right of this ﬁgure is the AS_MAIL
FB’s associated fVB (DB100), where data for all of its local
variables are stored. The left hand side of AS_MAIL in
Figure 5 depicts a set of inputs, required in order for the FB to
operate. These inputs can be speciﬁed using four techniques:

• gVBs - As can be seen in "REQ", where the value

stored in "bMailTrigger" (gVB address DB1.DBX558.0)
is copied/pasted into "REQ" (fVB address DB100.DBX0.0)
during every control logic cycle.

• Pointers - As can be seen in "USERNAME", where
the gVB address of "sUsername" (P#DB1.DBX38.0)
is copied and pasted into "USERNAME" (starting at
fVB address DB100.DBX10.0) during every control
logic cycle. Here the value is simply read from the
gVB via the pointer address on every cycle, rather than
being copied/pasted from the gVB into the fVB.

• Defaults - As can be seen in "WATCH_DOG_TIME"
(T#0ms in a grey font). Here, instead of specifying an
input value, the fVBs default value of 0ms has been
left in place.

• Direct Inputs - Figure 5 does not contain an example
of this input type; however, it would look the same as
a default input, but with a blue font. Here the value

S Maesschalck et al.: Preprint submitted to Elsevier

Page 6 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

Figure 5: Email Function and Associated VB (DB 100)

is input directly within the ladder logic, and would
be copied/pasted into "WATCH_DOG_TIME" (fVB
Address DB100.DBD6) on every cpu-cycle, in the
same way as if conﬁgured via a gVB.

As previously noted, PLC-VBS will focus speciﬁcally on
VBs (i.e., DBs in the Siemens ecosystem), and the ability
to manipulate data stored within them via unauthorised
command message attacks. From the example provided in
Figure 5, this would include DB1 and DB100 VBs.

6.2. Vulnerability Scanner

Within this subsection we ﬁrst provide a high-level
overview of PLC-VBS, before deconstructing it into multi-
ple phases where we provide further in-depth detail about its
functionality. Figure 6 provides an overview of the scanner’s
operation, as a high-level reference point.

When starting the scanner, the user is required to provide
the PLC’s IP address, the location of its CPU (rack and slot
numbers), target VB (DB number), the time period between
writing a new test value to a VB and then reading it back
(Read 2 Time), and the wait-time between each byte being
tested (Next Byte Time). Also, before starting the scanner,
the user must ﬁrst conﬁrm the system is in a safe state.
This typically involves removing any physical outputs to
operational equipment (e.g., pumps and valves) and other

devices (e.g., PLCs and HMIs), that could enact operational
change based on its actions. Once a connection to the PLC is
established, the scanner begins testing each byte sequentially
within the VB. The scanner uses S7Comm read and write
requests, the same requests used by engineers and HMIs
to communicate with Siemens PLCs (Green et al., 2021).
For each byte it scans, the scanner attempts to invert each
bit in the target byte, before reading it back to conﬁrm if
the inversion request has been accepted and retained by the
PLC. If the states of bits within the byte have changed, they,
and the byte itself, are classiﬁed as vulnerable. The scanner
then waits until the time speciﬁed by the user has elapsed
(Read 2 Time), before reading the byte again. If the bits have
remained in the inverted state, we know the inversion request
has persistence (i.e., you only need to send one write request
to change the state of the bits). If the bits have reverted
back to their original state, they have been overridden by the
control logic, and therefore any attempts to change their state
will not be persistent with a single write request. Finally, we
revert the byte back to its original state and wait until the
deﬁned time period has elapsed (Next Byte Time) to begin
testing the next byte. When the ﬁnal byte has been reached
a report is shown and the scanning ends.

S Maesschalck et al.: Preprint submitted to Elsevier

Page 7 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

the memory space (S7Comm read request) and stores its
state (the byte’s original state). Then, each bit within the
target byte is inverted (S7Comm write request) and the byte
is read again. The current state of the byte is stored, and
used as a comparison against the original state. If these
states match, there are no vulnerable bits within this byte,
and the byte as a whole cannot be manipulated. Where the
states do not match, the byte is identiﬁed as vulnerable. The
scanner then logs both the vulnerable byte and the individual
vulnerable bits.

Once the ﬁrst wait-time (Read 2 Time) has elapsed, the
scanner reads the target byte for a third time and stores its
current state. Then, as before, the current state is compared
with the original state. The results of this will determine
whether or not the inversion has persistence, and if so, across
which bits. The scanner logs both the vulnerable byte and
the individual bits. Finally, the byte is reverted back to its
original state (S7Comm write request).

6.2.3. Scanner Phase 3 (Reporting)

has two functions. If the ﬁnal byte of target memory
has not yet been reached, the scanner waits until the second
wait-time (Next Byte Time) has elapsed. It then returns the
scanner back to phase two where it begins testing the next
byte. Once the ﬁnal byte has been reached, the tool generates
a report identifying the vulnerable bits and bytes within the
scanner memory space. The tool then exits.

6.3. Experimentation
6.3.1. Method

In order to evaluate the eﬀectiveness of PLC-VBS we
require access to real-world control logic. This presents a
signiﬁcant challenge, particularly when seeking to identify
vulnerabilities, as an organisation sharing internally devel-
oped control logic would be unlikely to provide approval for
its discussion within the public domain. Therefore, we opted
to use Library FBs written by Siemens, included as part of
their PLC programming agent TIA Portal (Siemens, 2019).
As per our ﬁndings from Section 3, vendor provided control
logic is extremely common, is context agnostic (it can be ap-
plied to water treatment, energy distribution, manufacturing
processes, etc.), and is internationally adopted, making it an
ideal candidate for exploration.

We selected ten FBs, oﬀering a range of functionality,
from basic counts, to more complex data exchanges. Each
FB has its own associated fVB, as per the example shown in
Figure 5 and discussions across Section 6.1. Furthermore,
these fVBs are accessible over the network, so are directly
applicable to the approach adopted by our scanner. Where
possible, each FB was conﬁgured multiple times, adopting
three of the four conﬁguration input techniques described in
Section 6.1:

• gVBs

• Defaults

• Direct Inputs

Figure 6: Vulnerability Scanner Process

6.2.1. Scanner Phase 1 (Setup)

involves evaluating the current PLC state and preparing
the scanner for use. Ensuring the PLC is in a safe state is
important to reduce the risk of inadvertent operational im-
pact. Once veriﬁed, the user can continue with the scanner’s
baseline setup, which determines what the scanner will target
and how it will operate. Aside from the target PLC’s IP
address and CPU details, two timers must be conﬁgured.
The ﬁrst is a wait-time (Read 2 Time) between inverting
each bit within a byte and then reading it back (to check for
inversion persistence); second (Next Byte Time) is the wait-
time between each byte under test (only a single byte is tested
at any one time). Checking for persistence is vital, as some
bits will be overridden by other control logic operations,
which would then require a consistent ﬂow of write requests
in an attempt to achieve the desired level of persistence
(an unreliable approach which may be more noticeable on
network monitoring solutions). The wait-time between each
byte under test is used to reduce load on the PLC, and setting
this to 0 could impact the results as the PLC cannot respond
in a timely manner or may fail to process scanner requests.
We recommend this to be at least 1 second. Finally, the user
is required to specify the VB under review, thus constraining
the scanner to an approved area of PLC memory. Once the
user has completed these actions, the scanner attempts to
connect to the PLC, should the connection fail, the user is
asked to verify the information provided.

6.2.2. Scanner Phase 2 (Scanning)

begins once the scanner’s initial setup has been com-
pleted and a connection to the PLC has been established.
Within this phase, the scanner’s main objective is to iterate
through each byte within the memory space deﬁned during
its setup. The scanner starts by reading the ﬁrst byte within

S Maesschalck et al.: Preprint submitted to Elsevier

Page 8 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

As each FB dictates the type of input it is willing to
accept, it was only possible to use pointers where they
were speciﬁcally requested (hence their exclusion here). This
means if a FB requests a pointer as an input, no other input
type can be applied, preventing us from assessing alterna-
tives. Some fVB variables did not include default values, so
where possible we left these empty (optional inputs), and
some fVB variables did not allow for direct inputs. Where
direct inputs were not permitted, we used gVBs. We ran our
tool once per conﬁguration setup, and logged the ﬁndings
before moving on to the next FB.

6.3.2. Results

We ran our scanner across ten fVBs, see Table 4 in the
appendix for a brief summary of each FB. As per our method,
each FB was conﬁgured three times, with associated results
shown in Tables 1 and 2 (i.e., defaults, direct inputs, and
gVBs).

High-level results for direct reads (checking if the bit
state inversions have been applied immediately after the
inversion request was sent) can be found in Table 1. High-
level results for delayed reads (checking if the bit state
inversions have been retained after the 5 second Read 2
Time has elapsed) can be found in Table 2. We can see
that for each of the three conﬁguration options, the quantity
of vulnerable bytes diﬀers. We can also see there is little
diﬀerence between direct and delayed reads, aside from the
MODBUSPN function. This means, in a holistic sense, that
we can manipulate the behavior of FBs via their dedicated
memory (fVBs). While our experiment was limited to invert-
ing each bit within a byte, it highlights vulnerable areas of
memory that an attack could target in a more elaborate way.
Overall, based on the FBs selected as part of our ex-
periment, we can see that the use of direct inputs and
gVBs does reduce the number of vulnerable bytes by around
6%, though this is not a signiﬁcant diﬀerence, as 90% of
bytes remain vulnerable. However, what is important to
note is that for speciﬁc functions (GENERATE_PULSE,
WRITE_DATA, and REMOTE_CONN) a signiﬁcant drop
in vulnerable bytes was observed when not using default val-
ues. The PORT_CONFIG_DB function also saw a notable
reduction from 97.7% vulnerable bytes with default values,
to 73.3% vulnerable bytes with direct inputs, and 45.3%
vulnerable bytes with gVB inputs. Excluding the use of
default values can therefore help in reducing vulnerabilities
in control logic; this is a PLC programming practice that
should be applied as part of baseline defensive measures.

Taking the COUNT_UP FB as an example, when we
examine the scan results in more depth (see Table 3), we
can evaluate what variables the vulnerable bits and bytes are
mapped to, and what impact this could have on its operations
should they be targeted by an attacker. Within COUNT_UP
several critical variables can be manipulated across the three
conﬁguration types, including CU (counter input), which
is used as a trigger for the counter to count up, and CV
(count value), which is the current count value. Only the PV
variable changes from vulnerable to non-vulnerable when

a direct input or gVB input is used compared to default
values. An adversary could use these vulnerable variables to
stop the control logic from counting, or modify the overall
count value with a single request (S7Comms Write). An
attack of this nature could prevent the control logic from
performing additional critical operations, such as notifying
an engineer with an alarm when a given count limit has been
reached. Further to this, even though Q (counter output) is
not vulnerable, an adversary could manipulate this boolean
variable by manipulating the input bytes which are vulnera-
ble. Fundamentally, once the scanner has returned its results,
an analysis similar to this must be undertaken by the user to
evaluate the list of vulnerable bits and bytes, and identify the
impact of their manipulation. This is a critical task, where
results are fed into risk assessment processes, with a goal of
bridging the vulnerability-impact gap.

During our experimentation we established that pointer-
based inputs are less susceptible to attack (e.g., MOD-
BUSPN where variables storing pointer addresses could not
be inverted). However, this does not mean the variable is
not indirectly vulnerable, as it could point to a vulnerable
area of memory. We have undertaken a proof-of-concept
attack to examine this possibility further (see Figure 8),
by ﬁrst reading the pointer address (a gVB address) stored
in a fVB linked to the REG_KEY variable (this stores a
registration key for use by the MODBUSPN function). Once
the gVB address has been obtained, we are able to target it
and successfully invert the state of its bits. This bit inversion
was then observed by the fVB.

Our scanner was able to identify these previously un-
known vulnerabilities within the Siemens TIA libraries,
which could enable an attacker to manipulate fVB data and
therefore impact FB behavior. This could create wide-spread
impact to physical operational processes, communication
and alerting functions, and more.

We also ran Nessus and OpenVAS on the same PLC
used for this evaluation. These tools identiﬁed vulnerabili-
ties such as CVE-1999-0517 (related to SNMP); however,
they did not oﬀer insight into any control logic derived
vulnerabilities, or the targeted manipulation of control logic
behaviour. Additionally, the use of Nessus did cause our PLC
to crash during one scan. The results provided by both tools
oﬀered basic high-level generic vulnerability information,
thus failing to bridge the vulnerability-impact gap in the
same way as our approach.

6.4. Example Attack Scenario

Based on our proof of concept, performed on Siemens
library functions, there are several attack vectors based on
our identiﬁed control logic vulnerability that could be iden-
tiﬁed. As we are sending unauthorised command messages
to the PLC in order to change the state of the memory and
impact control logic, we can change the behaviour of the
PLC. What can be changed depends on the function and
how the variables are written to it. Looking at four library
functions (COUNT_UP, AS_MAIL, GENERATE_PULSE

S Maesschalck et al.: Preprint submitted to Elsevier

Page 9 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

Function
MODBUSPN
AS_MAIL
CTU
CTD
TP
WRREC
TSEND
PUT
TCON
PORT_CONFIG
TOTAL

Bytes Variables Defaults Direct Input
1544
990
9
9
23
26
22
598
20
86
3327

1444
889
4
4
0
4
8
572
6
63
2994

1484
977
6
6
4
20
20
594
18
84
3213

82
42
10
10
11
12
14
106
13
39
339

Table 1
Overview of Tested Library Functions - Direct Read

Function
MODBUSPN
AS_MAIL
CTU
CTD
TP
WRREC
TSEND
PUT
TCON
PORT_CONFIG
TOTAL

Bytes Variables Defaults Direct Inputs
1544
990
9
9
23
26
22
598
20
86
3327

1482
977
6
6
4
20
20
594
18
84
3211

1439
889
4
4
0
4
8
572
6
63
2989

82
42
10
10
11
12
14
106
13
39
339

Table 2
Overview of Tested Library Functions - 5 Second Delayed Read

gVBs
1470
889
4
4
0
4
8
572
6
39
2990

gVBs
1465
889
4
4
0
4
8
572
6
39
2991

Variable Vuln. Type Description
CU
R
PV
Q
CV

Counter input
Reset
Max count before Q is triggered
Indicates if CV is greater than PV
Count value

Bool
Bool
Int
Bool
Int

✓
✓
(✓)

✓

Table 3
COUNT_UP

and TCON), we can explore one of the potential attack
scenarios.

If we have a program that utilises the COUNT_UP
function to count (CV) how many times a valve has opened
(CU) within a speciﬁc period which is reset when the GEN-
ERATE_PULSE function sends a pulse to the COUNT_UP
function (R). When the counter reaches 10 (PV), a pulse
(Q) is sent to the AS_MAIL and TCON functions. The
AS_MAIL function, within this example, is conﬁgured to
send an email to an engineer and the operations centre, and
the TCON function writes data to a web server over TCP.
An attacker would only need to interfere with the operation
of the COUNT_UP function to interfere with the operation
of the other two functions and by proxy the operation of
the PLC and the associated alarm reporting processes. By
continuously writing a FALSE value to the CU variable, the

function might never trigger the counter input; therefore, the
count value (CV) will not increase when it should. Given
that the CV variable is also vulnerable, the attacker could
continuously write 0 to this value so it would never reach
the max count (PV) value that is required for the function
to send a pulse to AS_MAIL and TCON. An attacker could
also repeatedly write a TRUE value to the reset (R) variable,
which would reset the count value to 0. Finally, the attacker
could also interfere with the max count (PV) value if this
value was left as default (0), which we deem to be unlikely
as an engineer would set this value to enable the function
to perform. An attack like this could allow other attacks to
be executed without alerting the OT engineer, as reporting
processes would be impacted and could eventually result in
the activation of safety systems which could cause the plant
to shut down.

However, an adversary with access to the PLC could
adversely impact the function in multiple ways by exploiting
this vulnerability. All three other functions have vulnerable
bytes, which can also be used to aﬀect the operation of this
example program. For example, the BUSY variable for the
TCON and AS MAIL function is vulnerable; this variable
is used to identify if the function is busy, and if so, a new
job cannot be started. If an attacker overwrites the BUSY
variable with a TRUE value, the PLC will halt the function’s

S Maesschalck et al.: Preprint submitted to Elsevier

Page 10 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

operation. Some of the vulnerable bytes can become non-
vulnerable if direct inputs or gVB is used to provide values.
Therefore, good programming practice might mitigate some
of the attack vectors.

7. Lessons Learned

As observed from the results of our experiment, we
can see that identifying vulnerable areas of PLC memory
oﬀers a new perspective on vulnerability scanning that is
not currently provided by traditional scanning techniques.
If PLC memory can be manipulated via the use of unau-
thorised command messages, malicious actors are able to
change the behaviour of control logic, leading to undesirable
operational impact. From scanning 10 distinct library fVBs,
we concluded that even vendor provided control logic can
be vulnerable. This therefore raises further concerns; more
speciﬁcally, if vendor provided library functions cannot be
considered secure against memory manipulation attacks,
what level of vulnerabilities could be exploited within code
written by PLC engineers, who are less likely to follow
secure programming practices? Not only would this code
rely on vulnerable vendor written libraries, but also on self-
written sections of code.

To mitigate a number of the identiﬁed vulnerable bytes
discussed in Section 6.3.2, we have identiﬁed that input
parameters should always be set (not left as default), as
this results in fewer vulnerable bytes. When left unset (de-
fault) these values are only set when the PLC initializes,
which makes it easy for the values to be overwritten with
persistence. The use of concepts such as ’stack canaries’
and other similar alerts could also be adopted to monitor
predictable data structures indicating the presence of unau-
thorized command messages targeting vulnerable memory
areas. However, at a fundamental level, the control logic
itself needs to be reviewed to better understand why certain
areas of memory and their associated variables are vulnera-
ble to begin with, and whether modiﬁcations can be made to
mitigate the risk within the baseline code itself (as described
in the example from Sections 5.2 and 5.3).

7.1. The Impact of PLC-VBS on cyber risk

assessment

What we aim to achieve with the development of the
PLC-VBS scanner is to improve the understanding of vul-
nerable PLC control logic, something we believe would be
a valuable addition to both cyber risk assessment and eval-
uating the eﬃcacy of cyber security controls. Traditionally,
such endeavors of cyber risk assessment in an ICS environ-
ment would rely on vulnerability scanning tools designed
for the distinctly diﬀerent environments of enterprise IT,
rendering them less eﬀective, or even ineﬀective (Tenable,
2022; Greenbone, 2022) (as we found during our experimen-
tation). Such non-speciﬁc vulnerability scanning tools do not
investigate a PLC’s memory, often stopping at discerning the
ports open on a device, and perhaps the services running on
those ports. Conversely, using the tool we have presented
would allow cyber risk assessment practitioners to delve

deeper into the vulnerabilities within the PLC control logic
itself, providing granular contextual data and the ability
to link back to physical operational processes (e.g., the
identiﬁcation of vulnerabilities in control logic responsible
for controlling a valve to maintain a water tank level), and
therefore enrich the output of the cyber risk assessment for
decision-making recipients.

7.2. Cross Vendor Generalization

Although we have focused on Siemens PLCs and use of
the S7 protocol within our proof of concept, unauthorised
command message attacks are equally applicable to other
vendors, such as Allen Bradley (Green et al., 2021), and
protocols, such as Modbus. As HMIs operate using memory
access (see Figure 3), we can shift the focus of this scanner
from vendors to protocols. In its current form our scanner
can be used against any device that leverages the S7 protocol;
however, it could be expanded on by implementing support
for additional protocols such as Modbus or OPC Uniﬁed Ar-
chitecture through existing corresponding libraries (pymod-
bus or opcua-asyncio respectively (Riptide, 2021; Library,
2021)).

8. Conclusion and Future Work

In this paper we have introduced and evaluated PLC-
VBS. We have shown that our scanner is able to identify vul-
nerable bits and bytes within PLC memory, through which
adversaries can interact with the device and its associated
underlying operational processes. During the evaluation we
tested 10 vendor-provided library functions, and identiﬁed
that they are vulnerable to manipulation through the use
of unauthorised command message attacks. This proves
that anyone able to access the PLC over the network can
change values within memory reserved for commonly used
functions. This could result in a disastrous impact and allow
adversaries to interact with the PLC while hiding alerts from
system operators. For example, if operators are to be notiﬁed
when a counter reaches a certain value, an adversary could
keep resetting this to a lower value, and therefore prevent
alerts from being generated, while also impacting other areas
of control logic that may require this value to operate (e.g.,
to start a pump when the count reaches a given threshold).

We believe PLC-VBS can be used to enhance risk as-
sessment activities compared to conventional IT-system fo-
cused scanners (e.g., Nessus and OpenVAS), and should
inform PLC programming practices to provide device-level
mitigation. For example, it is important to take into account
that keeping default values as FB inputs leads to more
vulnerable FBs, when compared to the use of direct or
gVB inputs. By identifying and addressing control logic
vulnerabilities we are able to provide a more complete
and holistic level of defensive measures. However, other
appropriate mitigation techniques such as network-based
detection and honeypots (Maesschalck, Giotsas, Green and
Race, 2022) can also be provided to deliver a defence-in-
depth strategy. For example, honeypots could be used to
identify if adversaries are actively exploiting the identiﬁed

S Maesschalck et al.: Preprint submitted to Elsevier

Page 11 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

Figure 7: Pointer Re-direction Example

vulnerabilities when conﬁgured with appropriate levels of
interactivity (Maesschalck, Giotsas and Race, 2021). To
begin mitigating the vulnerabilities discussed in this paper
we would encourage PLC engineers to avoid reliance on
default input values and public libraries. This could form
part of a devsecops approach, where security is an inherent
part of the development and operational process. In addition,
we advise protection of VBs from direct manipulation over
the network where this level of connectivity is not required
for operational purposes (e.g., HMI access).

While we have shown that there is a multitude of vulner-
able bytes within the tested fVBs, potential misuse of these
is not necessarily avoided when a byte is not vulnerable.
We can also identify pointer addresses within functions
that are potentially vulnerable to being overwritten, which
would then point to an address of the adversary’s choosing,
i.e. performing a pointer re-direction. This can be seen in
Figure 7 where we show a function with a pointer in DB1 that
used to point to an address in DB 10 but is now redirected to
point to an address in DB 11.

Further to this, if the pointer itself cannot be overwritten,
the address it is pointing to might be vulnerable. Hence,
the pointer can be viewed as vulnerable by proxy. Further-
more, if we can identify multiple pointer addresses across
VBs pointing towards the same gVB, we can establish the
"primary gVB"/gVB of high importance across the control
logic base. We can then investigate this VB (e.g., DB 10 in
Figure 8) and monitor changes across multiple other VBs
(e.g. DB 1, DB 2, DB 3, and DB 4) potentially interfering
with previously non-vulnerable addresses. However, it is
important to note that when we refer to pointers, we only
have the pointer start address, and would need to establish
the length of data stored at that address. An example of this
can be seen in Figure 8 where we depict a function that stores
values in DB 1 and has a pointer that points to a value stored
in DB 10.

Additionally, we have not

investigated whether bits
and/or bytes (non-pointers) are vulnerable by association to
other bits and bytes. How this future work ﬁts into PLC-
VBS is indicated in Figure 6; this will focus on addresses
of high importance, such as "plant shutdown", which might
be protected against overwriting directly. However, ﬂipping
other bits might aﬀect this address. For example, bit C might

Figure 8: Indirect Vulnerable Pointer Example

not be vulnerable but bits A and B are; while we cannot ﬂip
bit C, we could investigate if bit C changes state after ﬂipping
bit A and B. This would mean bit C is indirectly vulnerable.
If so we could then focus our eﬀorts on simultaneously
manipulating multiple variables within a VB to change the
state of operator-speciﬁed critical variables.

Other future work will cover additional network pro-
tocols to target diﬀerent devices, and the previously noted
extensions of work to explore indirect address manipulation
vulnerabilities (including the role of pointers).

Acknowledgement

The authors gratefully acknowledge the support of the
Next Generation Converged Digital Infrastructure (NG-
CDI) Prosperity Partnership funded by UK’s EPSRC and
British Telecom plc (award number EP/R004935/1)

CRediT authorship contribution statement

Sam Maesschalck: Conceptualization, Methodology,
Validation, Investigation, Data Curation, Writing - Orig-
inal Draft, Writing - Review & Editing, Visualization.
Alexander Staves: Conceptualization, Methodology, Inves-
tigation, Writing - Original Draft. Richard Derbyshire:
Conceptualization, Methodology, Writing - Original Draft.
Benjamin Green: Conceptualization, Methodology, Inves-
tigation, Software, Writing - Original Draft, Visualization,
Writing - Review & Editing, Supervision. David Hutchi-
son: Conceptualization, Methodology, Writing - Review &
Editing, Supervision.

References
Abbasi, A., Hashemi, M., Zambon, E., Etalle, S., 2016. Stealth low-
level manipulation of programmable logic controllers i/o by pin control
exploitation, in: International Conference on Critical Information Infras-
tructures Security, Springer, New York. pp. 1–12.

Ahmad, A., Webb, J., Desouza, K.C., Boorman, J., 2019. Strategically-
motivated advanced persistent threat: Deﬁnition, process, tactics and a
disinformation model of counterattack. Computers & Security 86, 402–
418.

Ahmed, I., Obermeier, S., Sudhakaran, S., Roussev, V., 2017.

Pro-
grammable Logic Controller Forensics. IEEE Security and Privacy 15,
18–24.

Allen Bradley, 2008. SLC 500 Instruction Set. Technical Report. Allan
Bradley. URL: https://literature.rockwellautomation.com/idc/groups/
literature/documents/rm/1747-rm001{_}-en-p.pdf.

Antrobus, R., Frey, S., Green, B., Rashid, A., 2016. Simaticscan: Towards
a specialised vulnerability scanner for industrial control systems, in: 4th

S Maesschalck et al.: Preprint submitted to Elsevier

Page 12 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

International Symposium for ICS & SCADA Cyber Security Research
2016 4, BCS Learning & Development Ltd., Swindon. pp. 11–18.
Antrobus, R., Green, B., Frey, S., Rashid, A., 2019. The forgotten i in iiot: a
vulnerability scanner for industrial internet of things, in: IET Conference
Proceedings, IET, London.

Biham, E., Bitan, S., Carmel, A., Dankner, A., Malin, U., Woo, A., 2019.
Rogue7: Rogue Engineering-Station Attacks on S7Simatic PLCs. Tech-
nical Report. Black Hat USA.

Bristow, M., 2008.

ModScan - A SCADA MODBUS Network

Scanner.
defcon-16-bristow.pdf.

https://defcon.org/images/defcon-16/dc16-presentations/

British Standards Institute, 2013.

61132-3:2013 - Programmable
Technical Re-
Controllers - Part 3: Programming Languages.
port. BSI. URL: https://bsol.bsigroup.com/Search/Search?searchKey=
61131-3{&}OriginPage=Header+Search+Box{&}autoSuggestion=false.

Centre

for

the

Protection

of National

Infrastructure,

2021.

Infrastructure.

Critical National
critical-national-infrastructure-0. Last Accessed: 2022-06-16.
CPNI, 2020. Critical National Infrastructure. https://www.cpni.gov.uk/
critical-national-infrastructure-0. URL: https://www.cpni.gov.uk/
critical-national-infrastructure-0.

https://www.cpni.gov.uk/

Cybersecurity & Infrastructure Security Agency,

.

Control System

HMI Computers.
HMI_Computers-Definition.html. Last Accessed: 2022-06-24.

https://www.cisa.gov/uscert/ics/Control_System_

Derbyshire, R., Green, B., Hutchison, D., 2021.

“Talking a diﬀerent
Language”: Anticipating adversary attack cost for cyber risk assessment.
Computers & Security 103, 102163.

Derbyshire, R., Green, B., Prince, D., Mauthe, A., Hutchison, D., 2018. An
Analysis of Cyber Security Attack Taxonomies, in: Security and Privacy
Workshops (EuroS&PW), 2018 IEEE European Symposium on, IEEE,
New Jersey. pp. 153–161.

Didier, P., Macias, F., Harstad, J., Antholine, R., Johnston, S.A., Piyevsky,
S., Zaniewski, D., Zuponcic, S., Schillace, M., Wilcox, G., 2011. Con-
verged Plantwide Ethernet (CPwE) Design and Implementation Guide.
Rockwell Automation 9, 564.

Drias, Z., Serhrouchni, A., Vogel, O., 2015. Taxonomy of attacks on in-
dustrial control protocols, in: 2015 International Conference on Protocol
Engineering (ICPE) and International Conference on New Technologies
of Distributed Systems (NTDS), IEEE, New Jersey. pp. 1–6.

Eckhart, M., Ekelhart, A., Lüder, A., Biﬄ, S., Weippl, E., 2019. Security
development lifecycle for cyber-physical production systems, in: IECON
2019-45th Annual Conference of the IEEE Industrial Electronics Soci-
ety, IEEE, New Jersey. pp. 3004–3011.

Erickson, K.T., 1996. Programmable logic Controllers. IEEE Potentials 15,

14–17.

European Commission,

2019.
and

The Directive

on
(NIS

secu-
Di-

https://ec.europa.eu/digital-single-market/

network

information

rity
of
rective).
en/network-and-information-security-nis-directive.
URL:
network-and-information-security-nis-directive.

systems

https://ec.europa.eu/digital-single-market/en/

Feld, J., 2004. Proﬁnet-scalable factory communication for all applications,
in: IEEE International Workshop on Factory Communication Systems,
2004. Proceedings., IEEE, New Jersey. pp. 33–38.

Fluchs, S., 2020. The Top 20 Secure PLC Coding Practices Project.

https://bit.ly/34DqoHi.

Green, B., Derbyshire, R., Knowles, W., Boorman, J., Ciholas, P., Prince,
{ICS} testbed tetris: Practical building
D., Hutchison, D., 2020.
blocks towards a cyber security resource, in: 13th {USENIX} Workshop
on Cyber Security Experimentation and Test ({CSET} 20), USENIX,
Berkeley, CA.

Green, B., Derbyshire, R., Krotoﬁl, M., Knowles, W., Prince, D., Suri, N.,
2021. PCaaD: Towards automated determination and exploitation of
industrial systems. Computers & Security 110, 102424.

Green, B., Krotoﬁl, M., Abbasi, A., 2017a. On the Signiﬁcance of Process
Comprehension for Conducting Targeted ICS Attacks, in: Proceedings
of the 3nd ACM Workshop on Cyber-Physical Systems Security and
Privacy, ACM, New York. pp. 57–67.

Green, B., Lee, A., Antrobus, R., Roedig, U., Hutchison, D., Rashid, A.,
2017b. Pains, Gains and PLCs: Ten Lessons from Building an Industrial
Control Systems Testbed for Security Research, in: 10th USENIX Work-
shop on Cyber Security Experimentation and Test (CSET 17), USENIX
Association.

Greenbone, 2022. Openvas - open vulnerability assessment scanner. https:

//www.openvas.org/.

Kottler, S., Khayamy, M., Hasan, S.R., Elkeelany, O., 2017.

Formal
veriﬁcation of ladder logic programs using nusmv, in: SoutheastCon
2017, IEEE, New Jersey. pp. 1–5.

Library, F.O.U., 2021. Opc ua / iec 62541 client and server for python.

https://github.com/FreeOpcUa/opcua-asyncio.

Ljungkrantz, O., Akesson, K., 2007. A study of industrial logic control
programming using library components, in: 2007 IEEE International
Conference on Automation Science and Engineering, IEEE, New Jersey.
pp. 117–122.

Maesschalck, S., Giotsas, V., Green, B., Race, N., 2022. Don’t get stung,
cover your ICS in honey: How do honeypots ﬁt within industrial control
system security. Computers & Security 114, 102598.

Maesschalck, S., Giotsas, V., Race, N., 2021. World wide ICS honeypots:
A study into the deployment of conpot honeypots, in: Seventh Annual
Industrial Control System Security (ICSS) Workshop, ACSAC, Mary-
land.

McLaughlin, S., Konstantinou, C., Wang, X., Davi, L., Sadeghi, A.R.,
Maniatakos, M., Karri, R., 2016. The Cybersecurity Landscape in
Industrial Control Systems. Proceedings of the IEEE 104, 1039–1057.
McMahon, E., Patton, M., Samtani, S., Chen, H., 2018. Benchmarking
vulnerability assessment tools for enhanced cyber-physical system (cps)
resiliency, in: 2018 IEEE International Conference on Intelligence and
Security Informatics (ISI), IEEE, New Jersey. pp. 100–105.

Miller, T., Staves, A., Maesschalck, S., Sturdee, M., Green, B., 2021.
Looking back to look forward: Lessons learnt from cyber-attacks on in-
dustrial control systems. International Journal of Critical Infrastructure
Protection 35, 100464.

MITRE, 2021. Unauthorized Command Message. https://collaborate.

mitre.org/attackics/index.php/Technique/T0855.

Molenaar, G., Preeker, S., 2013. Welcome to python-snap7’s documen-
tation! https://python-snap7.readthedocs.io/en/latest/. URL: https:
//python-snap7.readthedocs.io/en/latest/.

Nochvay, A., 2019. CODESYS Runtime, a PLC control framework.

Technical Report. Kaspersky.

PLCDev, 2020. Symbol Table Allowed Addresses and Data Types. http:
//www.plcdev.com/symbol_table_allowed_addresses_and_data_types.
Riptide, 2021. Pymodbus - a python modbus stack. https://github.com/

riptideio/pymodbus.

Robles-Durazno, A., Moradpoor, N., McWhinnie, J., Russell, G., Maneru-
Marin, I., 2019. PLC memory attack detection and response in a clean
water supply system.
International Journal of Critical Infrastructure
Protection 26, 100300.

Searle, J., 2015. Plcscan. https://github.com/meeas/plcscan. Last accessed:

21 March 2022.

Shodan, 2020. Industrial Control Systems. https://bit.ly/3Jh3kAG.
Siemens, 2019. Library of general functions (LGF) for SIMATIC STEP 7
(TIA Portal) and SIMATIC S7-1200 / S7-1500. https://sie.ag/3aeTFKz.
URL: https://sie.ag/3aeTFKz.

Siemens, 2020a. SIMATIC S7-300 - Proven Multiple Times!

https:

//sie.ag/3ol428k.

Siemens, 2020b. SIMATIC WinCC V7. https://new.siemens.com/global/

en/products/automation/industry-software/automation-software/
scada/simatic-wincc-v7.html.

Siemens, 2020c. Totally Integrated Automation Portal. URL: https:
//new.siemens.com/global/en/products/automation/industry-software/
automation-software/tia-portal.html.

Siemens, 2022. Machine level hmi. https://new.siemens.com/global/en/
products/automation/simatic-hmi/panels.html. Last accessed: 21 March
2022.

Stouﬀer, K., Pillitteri, V., Lightman, S., Abrams, M., Hahn, A., 2014.
Guide to Industrial Control Systems (ICS) Security. Technical Report.

S Maesschalck et al.: Preprint submitted to Elsevier

Page 13 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

NIST. URL: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/
NIST.SP.800-82r2.pdf.

Tamboli, S., Rawale, M., Thoraiet, R., Agashe, S., 2015. Implementation of
modbus rtu and modbus tcp communication using siemens s7-1200 plc
for batch process, in: 2015 international conference on smart technolo-
gies and management for computing, communication, controls, energy
and materials (ICSTM), IEEE, New Jersey. pp. 258–263.

Tenable, 2022. Nessus Vulnerability Assessment. https://www.tenable.

com/products/nessus.

Wardak, H., Zhioua, S., Almulhem, A., 2016. Plc access control: a security
analysis, in: 2016 World Congress on Industrial Control Systems Secu-
rity (WCICSS), IEEE, New Jersey. pp. 1–6.

Sam Maesschalck is a PhD student within the Lancaster University School
of Computing and Communications and the Security Lancaster Institute.
His research involves both technical (systems and networks) and non-
technical (cyberspace and international relations) aspects of cyber security,
mainly focused within a critical infrastructure environment. Currently his
main focus is on the use on honeypots within ICS environments.

Alexander Staves is a PhD student at the Lancaster University School of
Computing and Communications and the Security Lancaster Institute. His
research interests involve both penetration testing and cyber incident re-
sponse and recovery for ICS/OT, in particular within critical infrastructure
environments.

Richard Derbyshire is an OT Cyber Security Engineer at Capula and
obtained his PhD in computer science at Lancaster University, UK. His
research involves both oﬀensive and defensive elements cyber security, with
a focus on penetration testing, risk assessment, and operational technology.

Benjamin Green is an academic fellow in the School of Computing and
Communications at Lancaster University, UK. His research involves both
oﬀensive and defensive elements of Industrial Control System security.
He is involved in several related research projects, including Operational
Technology Management after Cyber Incident (OT-MCI).

David Hutchison is Emeritus Professor of Computing at Lancaster Univer-
sity, UK, and the Founding Director of InfoLab21. His work is well known
internationally for contributions in a range of areas including Quality of Ser-
vice, active and programmable networking, content distribution networks,
and testbed activities. His current research focuses on the resilience of
networked computer systems, and the protection of critical infrastructures
and services.

S Maesschalck et al.: Preprint submitted to Elsevier

Page 14 of 15

PLC-VBS, a PLC Control Logic Vulnerability Discovery Tool

Function
MODBUSPN

Automation System Mail (AS_MAIL)
Count Up (CTU)
Count Down (CTD)
Generate Time Pulse (TP)
Write Data Record (WRREC)
Send Data (TSEND)
Remote Write (PUT)
Communication Connection (TCON)
Conﬁgure Communication Port (PORT_CONFIG)

Description
Enables communication between a CPU
and a device which supports the Modbus/TCP protocol
Sends an e-mail from the CPU via a mail server
Increments the value at a given output
Decrements the value at a given output
Outputs a pulse for a programmed period
Writes a data record to the addressed module
Sends data over an existing communication connection
Writes data to a remote CPU
Establishes a connection of type TCP or UDP from the user program
change port parameters (such as data transmission rate) in runtime

Table 4
Library Functions Tested with PLC-VBS (Siemens TIA v13) (Siemens, 2020c)

A. Evaluated Library Functions

S Maesschalck et al.: Preprint submitted to Elsevier

Page 15 of 15

