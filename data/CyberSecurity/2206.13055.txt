Decentralized Identiﬁer-based Privacy-preserving
Authenticated Key Exchange Protocol for Electric
Vehicle Charging in Smart Grid

Rohini Poolat Parameswarath, Prosanta Gope, Senior Member, IEEE and Biplab Sikdar, Senior Member, IEEE

1

2
2
0
2

n
u
J

7
2

]

R
C
.
s
c
[

1
v
5
5
0
3
1
.
6
0
2
2
:
v
i
X
r
a

Abstract—The popularity of Electric Vehicles (EVs) has been
rising across the globe in recent years. Smart grids will be the
backbone for EV charging and enable efﬁcient consumption of
electricity by the EVs. With the demand for EVs, associated
cyber threats are also increasing. Users expose their personal
information while charging their EVs, leading to privacy threats.
This paper proposes a user-empowered, privacy-aware authen-
ticated key exchange protocol for EV charging in smart grid.
The proposed protocol is based on the concept of Decentralized
Identiﬁer (DID) and Veriﬁable Credentials (VCs). The use of
DIDs empowers users by helping them to have complete control
over their identities. The charging station and the user verify
that the other party is legitimate before proceeding with the
charging services using VC. Key recovery is another issue
we address in this paper. A method to recover lost keys is
incorporated into the proposed protocol. We present formal
security proof and informal analysis to show that protocol’s
robustness against several attacks. We also provide a detailed
performance analysis to show that the proposed protocol is
efﬁcient.

Index Terms—Electric vehicle (EV) charging, Smart grid, Pri-
vacy, User-empowered authentication, Decentralized Identiﬁer,
Veriﬁable Credential.

I. INTRODUCTION

There has been an increased interest in the use of Electric
Vehicles (EVs) in recent years. While the registrations of
the conventional cars fell in 2020, electric car registrations
increased in 2020 despite the Covid pandemic [1]. There are
various reasons for this trend. Traditional vehicles run on
internal combustion engines that burn hydrocarbons, resulting
in air pollution and greenhouse effect. Since EVs use elec-
tricity, they result in almost no air pollution [2] compared
to the traditional gasoline-powered vehicles and are more
environmentally friendly. Hence, authorities across the globe
encourage the use of EVs [3] and provide incentives to car
users to make the switch to EVs.

A smart grid is an electrical grid that allows the monitoring
of power ﬂow from generation to consumption, and load
regulation to match power generation. Advanced technologies
are employed in smart grids to improve power generation and

R.P Parameswarath and B. Sikdar are with the Department of
Electrical and Computer Engineering, College of Design and Engineering,
National University of Singapore, Singapore. (Email: rohini.p@nus.edu.sg,
bsikdar@nus.edu.sg)
Prosanta Gope is with the Department of Computer Science, University of
Shefﬁeld, United Kingdom. (E-mail: p.gope@shefﬁeld.ac.uk)

transmission. Coupling EV charging with smart grid infras-
tructure has several advantages. As EVs need a signiﬁcant
amount of electricity for charging, they add load to the power
distribution network. Smart grid infrastructure enables the
efﬁcient consumption of electricity by EVs. EVs support the
concept of vehicle-to-grid (V2G) technology, where they take
electricity from the grid while charging and give it back
to the power grid from the battery when demand is high
[4]. As a result, EVs can also help lessen the smart grid’s
burden during periods of high power demand. Smart grid
technologies also allow EVs to be identiﬁed by charging
stations, and the electricity consumed can be automatically
billed to the owner’s account. The participants in the EV
charging ecosystem are Utility Service Providers (USPs),
Charging Stations (CSs), and vehicles. The USP generates
and distributes power to CSs [5].

Though EVs are better for the environment and paves the
path to a sustainable transport system, security and privacy
concerns have surfaced with the increased usage of EVs.
An attacker may track where users charge their EVs, and
gather personal details of the users. Tracking the activities
of EV users allows the attacker to obtain their footprints.
There have been studies on how an attacker can misuse
such sensitive information for stalking or physical attacks [6],
[7]. Marketing and advertising companies can leverage such
information to send unsolicited advertisements. To address
such privacy threats, this paper proposes a privacy-aware
protocol based on Decentralized Identiﬁer (DID) and Veriﬁ-
able Credential (VC) for EV charging. To remain anonymous
and to protect privacy, the use of pseudo-IDs instead of real
identities of users has been proposed in literature [5]. The
pseudo-IDs have been assigned by a central authority to
the users. The World Wide Web Consortium (W3C) DID
Working Group has created a DID standard that allows the
users to create and manage their identities. Thus, in the DID
mechanism, the users create and manage their IDs and they
have complete control over their IDs. They do not have to
rely on a central authority to assign IDs. A trusted party can
check the legitimacy of the user and sign credentials that
other parties can verify digitally before providing services.
VCs have been introduced for this purpose. When DID is
combined with the concept of VC, any third party can verify
the legitimacy of the user. As a result, by combining DID
and VC, the proposed protocol ensures that users remain
anonymous and their identity can be veriﬁed by others.

 
 
 
 
 
 
A. Related Work

To protect the communication between different entities
in smart grids from attacks, many authentication schemes
have been proposed. Researchers have been looking at the
security and privacy issues in EV charging as well. The
authors of [8] presented a security evaluation of the EV
charging framework. The cyber threats faced by different
entities, together with the available defences available dis-
cussed in [8]. Privacy threats that exist
in EV charging
infrastructure and recommendations to protect the privacy
of users were presented in [9]. A role-dependent privacy
preservation scheme was proposed in [10] based on whether
the EV is a customer or supplier of energy. In each role,
the privacy concerns are different and addressed separately.
An authentication scheme for V2G networks using elliptic
curve cryptosystem and bilinear pairing was proposed in [11].
An identity-based sequential aggregate signed data based
on homomorphic encryption was proposed in [12]. In the
scheme proposed in [13] for EV charging, hashing and XOR
operations are used. An authentication scheme when EVs
roam from one network to another in V2G networks was
proposed in [14]. An authentication scheme where the power
grid ensures the conﬁdentiality and integrity of the messages
was proposed in [15]. However, their scheme does not pro-
vide mutual authentication. Without mutual authentication,
one party is not sure whether the person on the other side is
legitimate. A privacy-preserving V2G authentication scheme
based on Public Unclonable Functions (PUFs) was presented
in [16]. Another PUF-based authentication protocol for the
V2G framework was proposed by [17]. However, such pro-
tocols require the additional hardware, PUF. While charging
EVs, another solution to protect users’ privacy is to use
pseudonyms rather than their real names. The authors of [18]
proposed an authentication scheme where the pseudonyms of
users are generated by the smart grid servers. CSs generate
pseudonyms for EVs in the anonymity-based authentication
proposed in [19]. A V2G authentication scheme with pseudo-
identities of users was was proposed in [5]. The pseudo-
identities are generated by service providers. The electricity
suppliers assign pseudonyms in [20]. In the authentication
scheme in [21], certiﬁcate authorities issue pseudo-ids to the
EVs. The pseudo-identities of vehicles are issued by third-
party authorities in [22].

B. Motivation

We can see that several works have been proposed in the
literature to achieve security and privacy in EV charging.
However, none of them provides a user-empowered authen-
tication for V2G. In the existing works, the pseudo-identities
are managed by CSs or other servers where the IDs are
created and stored on central servers. Because all sensitive
information is stored on a central server in centralized
systems, there is a risk of information leakage. There is
also a risk of a single point of failure in such centralized
systems. To address the above issues, a user-empowered
privacy-aware authenticated key exchange protocol for EV
charging by combining DID and VC is proposed in this paper.

2

The users do not need to rely on a central issuing authority
for their IDs because DIDs are created and controlled by
themselves. As a result, DIDs assist users in creating, man-
aging, and controlling their identities without the assistance
of a central issuing authority. The authors of [23] presented
an authentication scheme for EV charging that discussed the
importance of user empowerment. However, they have not
considered some key issues such as the usability problem
and the unauthorized use of mobile devices. The usability
problem refers to the scenario where an adversary has access
to the mobile device of a user for a short duration and tries to
delete the private key before being noticed by the user. This
will result in the loss of the private key and identity loss
of the user. The proposed protocol addresses this problem
and incorporates a solution for key recovery. To prevent the
unauthorized use of the mobile device of a legitimate user for
EV authentication, biometric veriﬁcation to access the mobile
device is also included in the proposed protocol. Instead of
the Rivest–Shamir–Adleman (RSA) algorithm used in [23],
the proposed protocol is based on Elliptic Curve Digital
Signature Algorithm (ECDSA) that uses small key size.

C. Our Contributions

This paper makes the following key contributions:
1. A new user-empowerment based privacy-aware au-
thenticated key exchange protocol based on DID and VC:
We propose a new protocol for EV charging in smart grids
by combining DID and VC. The proposed protocol enables
users to create, manage, and control their IDs, which not
only empowers them but also helps to preserve privacy. The
decentralized nature of DID eliminates the dependency on a
centralized system. The USP issues VCs to legitimate users.
The CS allows users who show the VCs issued by the USP.
The proposed protocol provides several important security
properties and establishment of a secure session key after
completing successful authentication.

2. Key recovery employing secret sharing technique:
The proposed protocol includes a key recovery mechanism
so that the user’s private key can be stored securely and
recovered if it is lost. We employ Shamir’s (k, n) threshold
secret sharing scheme [24] for private key recovery.

3. Two-factor authentication: The user inputs his/her
biometrics (e.g., ﬁngerprint) to access the mobile device
before initiating the authentication process. This biometric
veriﬁcation on the mobile device ensures the user’s legiti-
macy. Even if an adversary gets the mobile device, he/she
cannot use it for EV charging authentication as the biometric
veriﬁcation will fail.

4. Security analysis: We provide formal security proof
based on [25] and informal security analysis to demonstrate
the proposed scheme’s robustness against common attacks.

5. Performance analysis: We provide detailed perfor-
mance analysis and comparison of the performance of the
proposed method with other existing methods.

The rest of the paper is organized as follows. In Section
II, we introduce the preliminaries. In Section III, the system
the
and the adversary models are presented. We present

3

Fig. 1. An example of a DID document in JSON representation.

proposed protocol in Section IV. The formal security proof is
presented in Section V and the informal security analysis is
presented in Section VI. We provide performance evaluation
and comparison with other schemes in Section VII. The
conclusions are drawn in Section VIII.

II. PRELIMINARIES

This section begins with a discussion of the concepts
of Decentralized Identiﬁer and Veriﬁable Credentials. After
that, we discuss the cryptographic and mathematical concepts
behind the proposed protocol.

Decentralized Identiﬁer: DID is a type of identiﬁer which
is created and controlled by the user. As no centralized
authority is required to issue a DID, DID empowers users
to have complete control and ownership over their IDs. W3C
has developed the standard for DID [26]. A person can have
different DIDs to ensure that they are not tracked by correlat-
ing their activities. A DID resolves to a DID document. The
DID document contains information about the DID owner,
such as the owner’s public key. The DID document can be
stored on a public ledger such as a blockchain. A DID is of
the form did:<DID method>:<method-speciﬁc identiﬁer>.
The DID method is a reference to the underlying distributed
ledger. The method-speciﬁc identiﬁer resolves the DID to the
DID document on the ledger. An example of a DID document
for the DID did:<example>:<abcdefghijk> is shown in in
Figure 1.

Veriﬁable Credential: A VC is a set of claims that can
be veriﬁed using cryptographic techniques such as digital
signatures [26]. The users create their DIDs themselves. The
concept of VC can be used to ensure the claims of the user
by another party. The VC ecosystem consists of an Issuer,
a Holder, and a Veriﬁer. A trusted Issuer issues credentials
about the VC Holder and signs it digitally. Another party,
Veriﬁer, can verify the statements about the Holder [26],
[27]. Since cryptographic techniques are used, VCs are
tamper-resistant and can be veriﬁed digitally by others. An
example of a VC is shown in Figure 2. Veriﬁable Presentation
(VP), deﬁned by W3C, enables a user to present the VC to a
veriﬁer. VP can be presented using Zero-Knowledge Proof.
Figure 3 illustrates the workﬂow of the interaction between
DID and VC [26]. A DID subject creates his/her own DID.
The DID resolves to a DID document as shown in Figure
1 that resides on decentralized systems such as blockchain.

Fig. 2. An example of a Veriﬁable Credential.

Fig. 3. DID and Veriﬁable Credential.

A trusted Issuer veriﬁes the user’s identity, then signs and
issues a VC to the user. To get services, users disclose their
DIDs to the Veriﬁer. Then, the user presents the signed VC.
After that, the Veriﬁer veriﬁes the signed VC by using the
public key of the Issuer.

Zero-Knowledge Proof (ZKP): The ZKP enables a per-
son (Prover) to present the knowledge of a value to someone
else (Veriﬁer) but without revealing any other information.
Non-interactive zero-knowledge proof (NIZKP) is a type
of ZKP that requires reduced interaction between the two
parties. A common reference string is shared between the
Prover and the Veriﬁer to achieve ZKP [28], [29], [30]. A
ZKP consists of the algorithms presented in Table I [28].
In the algorithms mentioned in Table I, a relation generator
returns a polynomial-time decidable binary relation R for
a security parameter λ. For pairs (st, w) ∈ R, st is the
‘statement’ and w is the ‘witness’. crs is a common reference
string and td indicates the simulation trapdoor. There are
three properties for ZKPs [28]. They are completeness, Zero-
Knowledge, and soundness.

Completeness: An honest prover can convince a true

statement to an honest veriﬁerL

P r[(crs, td)] ← Setup(R); π ← P rove(R, crs, st, w) :

Verify(R, crs, st, π) = 1] = 1.

Zero-Knowledge: The proof does not reveal anything
other than the truthfulness of the statement. For all λ ∈ N ,

TABLE I
ZKP ALGORITHMS

Algorithm
(crs, td) ← Setup(R)
π← P rove(R, crs, st, w)
0/1 ← V erif y(R, crs, st, π)
π ← Sim(R, td, st)

Description
For the relation R, crs and td are generated.
This algorithm takes crs and (st, w) ∈ R as inputs and returns an argument π.
This algorithm takes crs, st and π as inputs and returns 0 or 1 for reject or accept, respectively.
The simulator takes td and st as inputs and returns π.

4

(R, z) ← R(1λ), (st, w) ∈ R and adversary A, we can write:

Algorithm
1
SignECDSA(m, priKey) -> (r, s)

ECDSA

Signature

Generation,

P r[(crs, td)] ← Setup(R); π ← P rove(R, crs, st, w) :

A(R, z, crs, td, π) = 1]

= P r[(crs, td)] ← Setup(R); π ← Sim(R, td, st)

: A(R, z, crs, td, π) = 1].

Calculate h = hash(m)
Generate a random number k in the range [1..n − 1]
Calculate R = r × G and its x-coordinate r = R.x
The signature s = k−1 × (h + r × priKey)( mod n)
Signature is (R, s)

Soundness: A prover cannot prove a false statement to the

veriﬁer:

P r[(R, z) ← R(1λ); (crs, td) ← Setup(R);

(st, π) ← A(R, z, crs) : st /∈ LR ∧Verify(R, crs, st, π)] = 1.

Asymmetric Cryptography and ECDSA: Asymmetric
cryptographic technique can be used to encrypt or sign data
using a pair of keys (public and private). The private key is
solely known by the owner and is not shared with anyone
else. Others have access to the public key. Elliptic-Curve
Cryptography (ECC) [31] is a public key cryptography tech-
nique. ECC is considered to be secure due to the difﬁculty of
the Elliptic Curve Discrete Logarithm Problem (ECDLP) and
Elliptic Curve Decisional Difﬁe–Hellman problem (ECD-
DHP) [32], [33] that are deﬁned below.

Elliptic-Curve Discrete Logarithm Problem (ECDLP):
Let p be a prime number and q = pn. Let E be an elliptic
curve over a ﬁnite ﬁeld Fq. If points P, Q ∈ E(Fq) are given,
ECDLP is the computational problem to ﬁnd the integer a,
if it exists, such that Q = aP .

Elliptic-Curve Decisional Difﬁe-Hellman Problem
(ECDDHP): Given P, aP, bP, Q ∈ E(Fq), ECDDHP is to
determine if Q = abP .

ECDSA is a popular algorithm used in asymmetric cryp-
tography based on ECC. In the proposed protocol, we use
ECDSA. Cryptosystems based on elliptic curves use small
key size. They have low memory usage and need less
processor resources. Due to these properties, they are ideal
even for resource-constrained devices. ECDSA signature gen-
eration and veriﬁcation algorithms are shown in Algorithms
1 and 2, respectively [34]. The public key is calculated as
pubKey = priKey × G. In Algorithm 1, a message m is
signed with priKey to get the signature (r, s). In Algorithm
2, the message m, the signature, and the public key are the
inputs and based on whether the signature is valid or not, it
is accepted or rejected.

Key Recovery and Shamir’s Secret Sharing: The DID
ecosystem is built on a public key infrastructure where users
need to manage their private keys. Users should have a
secure backup of their private keys. Hence, key possession
and recovery of the lost key are crucial in maintaining trust

Algorithm 2 ECDSA Signature Veriﬁcation,
V erif yECDSA(m, pubKey, Signature)->
(Accept, Reject)

(cid:48)

Calculate h = hash(m)
Calculate s
Calculate R
x-coordinate r
= r then
if r

= s−1( mod n)
(cid:48)
= (h × s
(cid:48)
= R

× x

(cid:48)

(cid:48)

(cid:48)

(cid:48)
) × G + (r × s

) × pubKey and its

Accept

else

Reject

end if

[35]. Key recovery refers to methods for securely backing up
private keys so that they can be recovered if the private key
is lost in events such as the device containing the private
key is damaged. We use the famous Shamir’s threshold
scheme [24] for private key recovery. The key is encoded
into a polynomial. After that, it is divided into pieces. Using
polynomial interpolation, the key can be computed with a
threshold value of the pieces.

In this method, a key D is

split

into n pieces

D1, D2, · · · , Dn such that:

(1) D can be computed from any k (threshold value) or

more pieces and

(2) D cannot be calculated when there are only k − 1 or

fewer pieces.

To divide D into k shares, the holder of the key selects a

a random k − 1 degree polynomial as:

f (x) = D + a1(x) + · · · + ak−1(x)k−1.

(1)

In (1), a1, a2, · · · , ak−1 are random polynomial coefﬁ-
cients. After that, the n values are evaluated as D1 = f (1),
D2 = f (2), · · · , Dn = f (n). With any subset of k of these
n values, the key can be calculated as

D = Σk

j=1f (ij)Πj(cid:54)=m

ij
ij − im

.

(2)

By knowing k − 1 of these values, D cannot be calculated.
This method of secret sharing can be employed for key
recovery.

III. SYSTEM AND ADVERSARY MODEL

A. System Model

The EV charging system model considered in this paper
is illustrated in Figure 4. The USP, the CS and the users
are the participants in this model. The USP is in charge
of power generation, distribution to different CSs, and also
data management. Electricity is generated from different
sources such as wind farms, solar farms, and hydroelectric
plants. Then, it is transmitted and distributed to the CSs. The
charging rate at a CS depends on its location. The users use
their mobile devices (MDs) to connect to the Internet. All
the participants in the model communicate with each other
through the Internet.

Fig. 4. System model.

B. Adversary Model

During authentication, the participants exchange messages
over an insecure channel, the Internet over which attackers
may launch multiple attacks. According to Dolev-Yao threat
model, an adversary can listen, modify or delete the messages
sent between different parties. Hence, the following threats
exist against the system model:

Data Modiﬁcation Threat: Since the attacker is able to
eavesdrop, edit or delete the messages exchanged, there is a
threat of data modiﬁcation. A legitimate user may be denied
access due to such data modiﬁcation.

Unauthorized Access Threat: The attacker can capture
legitimate messages and replay it later to get authenticated
as a legitimate user. An attacker may impersonate a registered
user to charge the vehicle.

Privacy Threat:An adversary may gether information
about the user’s presence in a location at a particular time,
his/her daily routines and trajectory, and charging pattern,
from the data related to the user’s EV charging.

Stealing of Mobile Device Threat: The adversary has
the capability to steal the mobile device of a legitimate user.

5

Then, the adversary may use it to initiate EV authentication
while impersonating the user.

Loss of Private Key Threat: We also consider the
scenario of ‘Usability Problem’ where the adversary has
access to the mobile device of a legitimate user for a couple
of minutes, and tries to delete the private key before being
noticed by the owner of the device. This will result in loss
of private key and identity loss of the user.

Location Forgery Threat: The USP can be trusted in
the proposed model, but the the other two parties may not
be trustworthy. A dishonest user may provide the incorrect
location area identiﬁer (LAI) of the CS where he/she wishes
to charge EV in order to pay a lower price than the actual
rates. A dishonest CS may also provide an incorrect LAI in
order to obtain higher EV charging rates from users. As a
result, location forgery threat also exists.

IV. PROPOSED AUTHENTICATION PROTOCOL

The privacy-aware authenticated key exchange protocol for
EV charging is presented in this section. The participants in
this protocol are the USP, the user, and the CS. The USP
issues a VC to the user, and the CS veriﬁes the VC of the user
before providing charging services. The three phases in the
proposed protocol are: system setup and registration, authen-
tication, and key recovery. The system setup and registration
phase is only performed once. Before charging their vehicles,
registered users are required to go through the authentication
process. The key recovery phase is executed if the user wants
to retrieve a lost private key. The proposed protocol is built
on the DID and VC standard given in [26]. The high-level
workﬂow of the EV charging protocol can be explained based
on Figure 3. The user creates his/her DID that resolves to
a DID document. Then, the user submits a signed digital
identity to the USP for veriﬁcation. The USP veriﬁes the
user’s digital identity. If the digital identity veriﬁcation is
successful, the USP generates a credential. Then, the USP
signs it with its public key and issues the signed VC to
the user. The user generates the ZKP of the signed VC and
presents it to the CS together with the charging request. The
CS veriﬁes the signature using the USP’s public key. After
successful veriﬁcation, the CS provides service to the user.
The notations used in the proposed authentication protocol
are presented in Table II.

A. Assumptions

We assume that a secure channel is used for communica-
tion between the parties in the registration phase. We assume
that the USP can be trusted. The CS and the USP do not
collude to learn additional information about the users. The
users have to be authenticated before charging their EVs
each time, even if they have charged from the same charging
station previously. The proposed protocol is also applicable
in shared vehicle environments. In this scenario, each user
must be a valid registered user. Following that, users must
use their own VCs to get authenticated.

6

2) Registration:

the registration of the
electric vehicles and the charging stations with the USP takes
place.

In this phase,

EV Registration: The registration of the EV consists of

the following steps:

Step 1: U seri generates a pseudo-identity P DIDuseri
and a set of unlinkable shadow identities Duseri which will
be used later to restore synchronization with the USP if
required. The user holds [V CDigIDuseri]Kpr
, the VC of
his/her digital identity issued by a trusted party (e.g., a gov-
ernment agency). Then, the user generates a message MREV 1
with a registration request, DIDuseri, the pseudo-identity
P DIDuseri, Duseri, and [V CDigIDuseri]Kpr
. After that,
U seri sends MREV 1 to the USP.

Gov

Gov

Step 2: The USP needs to authenticate the user. The USP
veriﬁes the user’s digital identity using ECDSA’s signature
veriﬁcation algorithm as mentioned in Algorithm 2. After
that, the USP generates a nonce n and a credential cred. After
that, cred, the user’s public key, and n are combined and its
hash value hashV alue is calculated. Then, the USP signs
cred with its private key using ECDSA’s signature generation
algorithm as mentioned in Algorithm 1. For that, the USP
generates a random number k in the range [1, m − 1]. The
random point R and its x-coordinate are calculated as:

R = k × G; r = R.x.

(3)

Then, the USP calculates the signature as:

k−1 × (hashV alue + r × K pr

U SP )(mod m).

(4)

The veriﬁable credential [V Cuseri]Kpr

of U seri given
in (4) indicates that U seri is a valid registered user. It can
be veriﬁed using the corresponding public key K pu
U SP of
the USP. Thus, the USP certiﬁes the user by signing the
hash value with K pr
U SP using ECDSA’s signature generation
algorithm as mentioned in Algorithm 1.

U SP

The USP generates a key Kuseri and then stores
DIDuseri, P DIDuseri, set of pseudo-IDs, and Kuseri in its
database for future communication with the user. After that,

Fig. 5. EV registration phase.

TABLE II
NOTATIONS

Symbol
G
a1, a2, .., ak−1
DIDx
P DIDuseri
Duseri
Kpr
x
Kpu
x
M Duseri
r
Kuseri
KCSj
[V Cuseri]Kpr
SK
(cid:107)
⊕
h(X)

U SP

Description
Generator Point
Polynomial Coefﬁcients for key recovery
DID of the entity x
Pseudo-identity of U seri
Set of unlinkable shadow identities of U seri
Private key of the entity x
Public key of the entity x
Mobile device of U seri
Nonce generated by the USP
Secret key between USP and U seri
Secret between USP and CSj
VC of U seri signed by the USP
Session key
Concatenation operation
XOR operation
Hash of X

B. System Setup and Registration Phase

1) System Setup: The system setup consists of the follow-

ing steps:

Step 1: The USP’s DID DIDU SP is stored on the
blockchain. The USP generates its private key K pr
U SP as
a random integer. The public key is generated through
ECDSA key generation function. Let G be the generator
point. The public key K pu
U SP is a point on the elliptic curve,
calculated by the Elliptic Curve (EC) point multiplication as
K pu
U SP × G. The USP’s public key is stored in its
DID on the blockchain.

U SP = K pr

Step 2: U seri generates a DID (DIDuseri) and stores
it on the blockchain, following which U seri generates a
pair of private (K pr
useri) and public (K pu
useri) keys using the
ECDSA key generation function similar to the key generation
mentioned in Step 1. The user stores K pr
useri in the digital
wallet on the mobile device M Duseri. The public key K pu
useri
is stored in the user’s DID document on the blockchain.

Step 3: Similarly, the charging station, CSj (the Veriﬁer),
generates its DID (DIDCSj) and stores its public key im-
mutably in its DID document on the blockchain.

7

of the CS’s VC. Then, MA1 is sent to CSj. CSj composes
and sends a message MA2 to U seri with DIDCSj, its signed
VC, and request of proof of the user’s VC.

Step 2: Upon receiving MA2 from the CS,

the user
veriﬁes the signed VC received from the CS by verifying the
signature on it with K pu
U SP using ECDSA’s verify algorithm
as mentioned in Algorithm 2. Then, credential cred, the
user’s public key K pu
useri, and nonce n are combined and
its hash value is calculated.

Then, U seri generates a nonce Nuseri and computes
ELuseri = LAI useri ⊕ h(Kuseri (cid:107) Nuseri) where LAI useri
is the location identiﬁer of U seri. Then, U seri computes
V1 = h(P DIDuseri (cid:107) Nuseri (cid:107) Kuseri (cid:107) ELuseri). Next,
the user produces a ZKP of the VC using the Prove algorithm
with an output π as mentioned in Table I. This is the ZKP
of the VC the user presents to the CS to prove in Zero-
Knowledge that it holds a valid VC. Then, the user composes
MA3 : {hashvalue, π, Nuseri, ELuseri, V1} and sends it to
CSj. When CSj receives MA3, it veriﬁes π using the Verify
algorithm as mentioned in Table I.

Thus, U seri presents the credential to CSj using ZKP.
The CS is not able to learn anything other than the fact that
U seri holds the credential. Once both parties verify that the
credentials are legitimate, CSj generates a nonce NCSj and
sends the request to the USP with its location information
LAICSj. For that, CSj computes V2 = h(DIDCSj (cid:107)
NCSj (cid:107) KCSj (cid:107) LAICSj). Next,
the CS composes a
message MA4 : {MA3, DIDCSj, NCSj, LAICSj, V2} and
sends it to the USP.

Step 3: The location identiﬁer received from U seri,
LAIuseri, and from CSj, LAICSj, are compared by the
USP. The USP wants to verify that they are the same before
proceeding further. This step prevents the location forgery

Fig. 6. Authentication phase.

the USP generates a message MREV 2 with Kuseri, cred, n,
and the signed VC and sends it to the user.

Step 3: The user, U seri, receives MREV 2 from the USP.
Then, U seri inputs his/her biometrics (e.g., ﬁngerprint) βi
and password pswi. This stored input will be used during
authentication phase to ensure the user’s legitimacy. Then,
U seri computes K ∗
useri = Kuseri ⊕ h(βi (cid:107) pswi). After
that, U seri stores K ∗
in
the digital wallet on M Duseri.

useri, cred, n, and [V Cuseri]Kpr

U SP

Figure 5 depicts the EV registration step in detail. .
CS Registration: The following are the steps involved in

CS registration:

Step 1: Similar to EV registration, CSj registers with the
USP and receives a veriﬁable credential V CCSj signed by
the USP with its private key K pr
U SP . The USP produces a
key KCSj and sends it to the CS. The CS stores KCSj to
use during the the authentication phase.

C. Authentication Phase

The user U seri must go through the authentication process
in order to charge the vehicle at CSj. U seri also authenti-
cates CSj.

Step 1: U seri inputs his/her biometrics βi and password
pswi into his/her mobile device, M Duseri. Then, M Duseri
computes δ(cid:48)
i = h(βi (cid:107) pswi) and compares δ(cid:48)
i with δi
to verify U seri’s legitimacy. This biometric veriﬁcation at
the mobile device is to ensure the user’s legitimacy. If
the biometric veriﬁcation is successful, M Duseri calculates
Kuseri = K ∗
useri ⊕ h(βi (cid:107) pswi). Then, U seri generates
a public and private key pair (K (cid:48)pu
useri) correspond-
ing to P DIDuseri. After that, U seri generates MA1 with
P DIDuseri, request for EV charging, and request of proof

useri, K (cid:48)pr

attack. Then, the USP generates a session key SK and a
nonce nnew. After that, cred, the user’s public key, and
nnew are combined and its hash value, hashvaluenew, is
calculated. After that, the USP generates a new VC for U seri
based on the new hash value hashvaluenew that the user
can use in the next charging authentication process. Since
the VC for each charging event is different, the user cannot
be tracked.

The user’s PDID for the next round is stored at the USP as
P DIDnew
useri = h(P DIDuseri (cid:107) Kuseri). The session key for
U seri is computed as SKuseri = h(P DIDuseri (cid:107) Nuseri (cid:107)
Kuseri)⊕SK. Similarly, the session key for CSj is computed
as SKCSj = h(DIDCSj (cid:107) NCSj (cid:107) KCSj) ⊕ SK. Then, the
USP generates a response V3 for CSj and a response V4 for
U seri. V3 is computed as V3 = h(SKCSj (cid:107) NCSj (cid:107) KCSj)
and V4 as V4 = h(SKuseri (cid:107) Nuseri (cid:107) Kuseri). The nonce
and the signed VC are XORed with Kuseri and sent to the
user.

After

that,

useri. Then,

the USP generates a message MA5useri
)} with

the USP generates a message MA5

by encrypting {(SK useri, V4, n∗new, [V Cuseri]∗new
Kpr
K pub
{MA5useri (cid:107) (SK CSj, V3)}. Then, MA5 is sent to the CS.
Step 4: The CS receives MA5 and veriﬁes V3. Then, the CS
calculates the SK as SK = h(DIDCSj (cid:107) NCSj (cid:107) KCSj) ⊕
SKCSj and sends MA6 : MA5useri to U seri.

U SP

:

Step 5: After receiving MA6, the user decrypts MA5useri
with his/her private key K pr
useri and veriﬁes the key-hash
response V4. If the veriﬁcation is successful, the user decodes
SK as SK = h(P DIDuseri (cid:107) Nuseri (cid:107) Kuseri) ⊕ SKuseri.
The user creates a new ID, P DIDnew
useri = h(P DIDuseri (cid:107)
Kuseri). The nonce and the signed VC received from the
USP are XORed with Kuseri and stored by the user for
next round of authentication. Thus, a session key SK is
established among all the parties. The authentication phase
is illustrated in Figure 6.

D. Key Recovery

Step 1: This step is required for key recovery if the private
key is lost. The private key K pr
useri is divided into n shares
with a (k, n) secret sharing scheme as explained in Section
II. A random k − 1 degree polynomial is selected as:

f (x) = K pr

useri + a1(x) + · · · + akt−1(x)k−1.

(5)

useri]2 = f (2), · · · , [K pr

In (5), a1, a2, · · · , ak−1 are random polynomial coefﬁ-
cients. After that, the USP evaluates n values as [K pr
useri]1 =
f (1), [K pr
useri]n = f (n). The shares
of the private key calculated as mentioned above can be
encrypted and stored in such a way that an adversary cannot
correlate the shares.

Step 2: With any subset of k of these n values, the USP’s

private key can be calculated as

K pr

useri = Σk

j=1f (ij)Πj(cid:54)=m

ij
ij − im

.

(6)

With the knowledge of k−1 of these values, K pr

useri cannot
be calculated. Note that during authentication, MA5useri is

8

encrypted with K pu
useri. If
the private key is lost, it can be reconstituted from the backup
using the (k, n) mechanism as mentioned in (6).

useri. The user decrypts it with K pr

Remarks: During authentication, if the synchronization
is lost, the user U seri selects one of the unused shadow
identities from the set Duseri, and sends it to the CS in MA1.
After that, the used shadow identity will be deleted.

V. FORMAL SECURITY PROOF

A. Deﬁnitions and assumptions

The proposed protocol’s security is assessed using the
Real-Or-Random (RoR) model [25] Under the RoR model,
we show that the proposed protocol can ensure session key
security.

First, we will discuss the RoR model brieﬂy. The protocol
is secure if the established session key cannot be differenti-
ated from a random string. In this model, security is deﬁned
through a series of games played between the participants and
an adversary A. In our proof, we use imperative properties
like collision resistant one-way hash function h(·) which is a
pseudo random function and Elliptic Curve Decisional Difﬁe-
Hellman Problem (ECDDHP). In the RoR model, we use the
following queries to simulate the attacks.

Queries to model the attacks: During the authentication
phase, VCs of the user and the CS are veriﬁed by each other.
The channel through which the authentication messages are
exchanged is not secure. An adversary A can control the
insecure channel between the user and the CS by eavesdrop-
ping and modifying the messages sent between them. Let us
EV as the tth instance of the EV and P t
denote P t
CS as the
tth instance of the CS. The following queries can be used to
model these attack scenarios:

EV , P t2

Execute(P t1

CS): Models attacker A’s ability to eaves-
drop and intercept the messages communicated between tth
1
instance of EV and tth
instance of CS in a session of the
2
protocol.

Reveal(P t): Models A’s ability to obtain the session key
SK established between P t and its partner in a session of
the protocol.

Test(P t): The adversary is allowed to call this query to
get the session key, and the output is either the session key
SK or a random key based on an unbiased coin or hidden
bit c. If c = 1, P t returns SK. If c = 0, P t returns a random
number. Otherwise, P t returns null.

A one-way hash function h(·) is also modelled as a random

oracle. It is accessible to all the parties and A.

A

Theorem 1. Let A be an adversary trying to break the
semantic security of the protocol. A asks at most qh hash
queries. Let |Hash| denote the length of the hash output
and let AdvECDSA
represent A’s advantage in breaking
ECDDHP problem. Then, the advantage of A in breaking
the security of the session key in the proposed scheme is
AdvA(t) ≤ (qh)2

|Hash| + 2 AdvECDSA

which is negligible.

Proof: Let Gi denote a sequence of games where i =
0, 1, · · · , 2. Let AdvA,Gi denote A’s advantage in the game
Gi. Let SuccessGi
A be the event when A correctly guesses

A

the bit c in game Gi. Hence, AdvA,Gi = P r[SuccessGi
A ].
We want the advantage of A to be negligible.

The details of the games Gi where i = 0, 1, 2 are given

below:

Game G0: This game corresponds to an actual attack by
A against the proposed protocol. Since a bit c is selected
randomly in G0, we get:

From (9), (10), and (11), we have:

1
2

AdvA(t) = | AdvA,G1 −

1
2

|

= | AdvA,G1 − AdvA,G2 |

≤

(qh)2
2 | Hash |

+ AdvECDSA
A

(t).

(12)

AdvA(t) =| 2AdvA,G0 − 1 | .

(7)

By multiplying both sides of (12), by 2, we get:

9

Game G1: In this game, A executes an eavesdropping
attack in which A has the capability to intercept all the
communicated messages. A calls the Execute query to inter-
cept the transmitted messages MA5 and MA6. Then, A calls
Reveal and Test queries to check if the captured session
key is real or random. Session key SK is generated by the
USP. SKCSj and SKuseri, which are transmitted through
the messages MA5 and MA6, respectively, are computed as
SKuseri = h(P DIDuseri (cid:107) Nuseri (cid:107) Kuseri) ⊕ SK and
SKCSj = h(DIDCSj (cid:107) NCSj (cid:107) KCSj) ⊕ SK. A does not
know the secret keys KCSj and Kuseri to compute SK from
SKCSj and SKuseri. To calculate the session key, A should
also know the random nonce values NCSj and Nuseri as well
as the pseudo-identity of the user P DIDuseri and the DID
of the charging station DIDCSj. Hence, eavesdropping the
messages MA5 and MA6 does not increase A’s probability
to win the game G1. In other words, G0 and G1 are
indistinguishable and

AdvA,G1 = AdvA,G0.

(8)

Game G2: In this game, A makes multiple hash queries
and tries to ﬁnd a message digest collision. A one-way
hash function is used for composing the messages MA3,
MA4, MA5, and MA6. Further, in our protocol, the veriﬁable
credentials change during each iteration of the protocol. They
are signed by the private key of the USP using ECDSA. It
is a computationally infeasible problem to ﬁnd the private
key from the public key due to intractability property of
ECDDHP. Hence, knowing the public key of the USP also
does not give any advantage to A. A should also know the
other required secret parameters in order to compute the
session key. Hence, from the birthday paradox of the hash
function and intractability of ECDDHP, we get:

| AdvA,G1 −AdvA,G2 |≤

(qh)2
2 | Hash |

+AdvECDSA
A

(t). (9)

After all the above games are executed, A guesses the bit
c and calls T est query to win the game. Then, we get the
following:

AdvA,G2 =

1
2

.

Combining (7) and (8), we get the following:

1
2

AdvA(t) = | AdvA,G0 −

= | AdvA,G1 −

1
2
1
2

|

| .

(10)

(11)

AdvA(t) ≤

(qh)2
| Hash |

+ 2AdvECDSA
A

(t).

(13)

Hence,

this shows that

session key security.

the proposed protocol ensures
(cid:4)

VI. INFORMAL SECURITY ANALYSIS

In this section, we demonstrate how the proposed protocol
achieves some of the important security properties for EV
charging. We also discuss how the proposed protocol prevents
the threats mentioned in the adversary model.

A. Security Properties

The key security features of the scheme are discussed

below.

User-empowerment: The proposed scheme is based on
DID. The users create and manage their IDs. Their IDs are
not issued by any centralised issuing authority. Hence, the
users have control over their IDs which empowers them.

Biometric Authentication: The user inputs his/her bio-
metrics (e.g., ﬁngerprint) βi and password pswi to access
the mobile device M Di. Then, M Di computes δ(cid:48)
i = h(βi (cid:107)
pswi) and compares δ(cid:48)
i with δi to verify U seri’s legitimacy.
This biometric veriﬁcation at the mobile device is to ensure
the user’s legitimacy. The remianing steps of authentication
will be carried out only if the biometric veriﬁcation is
successful. Even if an adversary gets the mobile device,
he/she cannot use it for EV charging authentication as the
biometric veriﬁcation will fail.

Mutual Authentication: The user presents his/her VC to
CSj. The charging station presents its VCs to U seri. The
user veriﬁes the VC of CSj. Then, the user presents ZKP
of his/her VC to the CS and the CS veriﬁes it. Only a
legitimate user and legitimate CS can provide a valid VC,
signed with the private key of the USP K pr
U SP . Thus, both
the parties verify VC of the other party and the proposed
protocol achieves mutual authentication.

Anonymity: Users reveal their real identities only to the
the user uses a pseudo-ID
USP. To charge the vehicle,
P DIDuseri and ZKP of a VC signed by the USP that
the charging station veriﬁes. The user’s real identity is not
revealed during the charging process. Thus, the proposed
scheme maintains anonymity of the users.

Unlinkability: During authentication, the user provides
pseudo ID P DIDuseri and ZKP of a veriﬁable credential
signed by the USP that the CS veriﬁes. For two consecutive
sessions x and x + 1, P DIDx
useri. Thus, the
identities of the users are unlinkable.

useri (cid:54)= P DIDx+1

TABLE III
COMPARISON BASED ON SECURITY FEATURES

10

SF2
Yes
Yes
Yes
Yes
Yes
Yes

SF1
Yes
Yes
Yes
Yes
Yes
Yes

Scheme
Roman et al. [4]
Gope et al. [5]
Zhang et al. [11]
Bansal et al. [17]
Saxena et al. [21]
P roposed Scheme

SF3
Yes
Yes
Yes
Yes
Yes
Yes
SF1: Privacy of the user; SF2: Anonymity of the user; SF3: Session key;
SF4: Protection against replay attacks; SF5: Mutual authentication;
SF6: Protection against location forgery attacks;
SF7: Non-repudiation; SF8: User-empowerment

SF7
No
No
No
No
No
Yes

SF6
Yes
Yes
No
No
No
Yes

SF5
Yes
Yes
Yes
Yes
Yes
Yes

SF4
Yes
Yes
Yes
Yes
Yes
Yes

SF8
No
No
No
No
No
Yes

TABLE IV
COMPARISON BASED ON COMPUTATION COST

Scheme
Roman et al. [4]
Gope et al. [5]
Zhang et al. [11]
Bansal et al. [17]
Saxena et al. [21]
P roposed Scheme

User’s Device
3M + B = 26.13 ms
6H = 6.84 ms
3M + EXP + 5H = 24.58 ms
1P + 2M AC + 4EXP + 2S + 2M = 31.874 ms
1M + 3EXP + 1B = 25.13 ms
6H + V erif yECDSA = 28.06 ms

USP/CS
16M + 3B = 86.84 ms
8H = 9.12 ms
3M + B + 4H = 30.69 ms
1P + 6M AC + 4S + 6EXP + 4M = 65.814 ms
5M + 8EXP + 1B = 61.89 ms
8H +SignECDSA +V erif yECDSA = 45.95 ms

M : Multiplication Operation =5.24 ms; M P : Multiplication Point Operation = 3.21 ms; P : PUF Operation; H: Hash Operation =1.14 ms;
EXP : Modular Exponential Operation =3.16 ms; S: Symmetric Encryption/Decryption Operation =0.17 ms; M AC: MAC Operation =1.3 ms;
B: Bilinear Pairing Operation =10.41 ms; SignECDSA: ECDSA Signing = 15.61 ms; V erif yECDSA: ECDSA Signature Veriﬁcation =21.22 ms

U SP

Privacy of

the User: To charge the EVs,

the users
request service with their pseudo-identities. The user also
presents a ZKP of veriﬁable credential signed by the USP
([V Cuseri]Kpr
) that the CS veriﬁes. By using ZKP, the
CS is not able to learn anything about the user. The ZKP
provides proof about the VC to show that the user is a valid
registered user but without disclosing anything about the user.
Further, the pseudo-identities are different in two consecutive
sesssions. Only the trusted party (the USP) knows the actual
identity of the user. The pseudo identity of the user and the
VC are changed during each session. For two consecutive
sessions x and x + 1, P DIDx
useri. An
adversary will not be able to link a user’s real identity with
his/her pseudo ID or VC, and will not be able to track the
user’s trajectory or routines. Thus, the proposed protocol
provides privacy.

(cid:54)= P DIDx+1

useri

Accountability: During registration, the USP veriﬁes the
VC of the digital identity that is signed by a trusted organiza-
tion such as a government agency e.g., [V CDigIDuseri]Kpr
.
Gov
Thus, the USP conﬁrms the legitimacy of the user. This legit-
imacy check of the user by the USP ensures accountability.

Session Key Agreement: During authentication, a ses-
sion key SK is generated by the USP. The USP sends
SKCSj = h(DIDCSj (cid:107) NCSj (cid:107) KCSj) ⊕ SK and
V3 = h(SKCSj (cid:107) NCSj (cid:107) KCSj) to the CS through
MA5. When the CS receives MA5, SK is calculated as
SK = h(DIDCSj (cid:107) NCSj (cid:107) KCSj) ⊕ SKCSj. Similarly,
the USP sends SKuseri = h(P DIDuseri (cid:107) Nuseri (cid:107)
Kuseri) ⊕ SK and V4 = h(SKuseri (cid:107) Nuseri (cid:107) Kuseri) to
the user. When the user receives MA6, SK is calculated as
SK = h(P DIDuseri (cid:107) Nuseri (cid:107) Kuseri) ⊕ SKuseri. Thus,
there is a session key agreement among the participants of

the proposed protocol.

Non-Repudiation: After signing a statement with its pri-
vate key, a party cannot deny having signed it (i.e., non-
repudiation). The VC signing and veriﬁcation is based on
asymmetric cryptography. The USP signs the VC for the user
and the CS with its private key ([V Cuseri]Kpr
). The private
key K pr
U SP used to sign the VC is only known to the USP.
This ensures non-repudiation.

U SP

U SP

Protection Against Impersonation Attacks: To imper-
sonate a legitimate user U seri, the adversary needs to send
MA3 : {hashvalue, π, Nuseri, ELuseri, V1} to the CS. Only
the user knows [V Cuseri]Kpr
and the parameter Kuseri to
compute ELuseri = LAI useri ⊕ h(Kuseri (cid:107) Nuseri) and
V1 = h(P DIDuseri (cid:107) Nuseri (cid:107) Kuseri (cid:107) ELuseri) which
are used to compose MA3. Hence, an adversary’s attempt
to impersonate a registered user will not be successful.
Similarly, to impersonate a registered CS, the adversary needs
to generate MA4 : {MA3, DIDCSj, NCSj, LAICSj, V2}.
Only the CS knows the secret parameter Kcsj to compute
V2 = h(DIDCSj (cid:107) NCSj (cid:107) Kcsj (cid:107) LAICSj). To imperson-
ate the USP, the attacker needs to have the knowledge of Kcsj
and Kuseri to generate V3 = h(SKCSj (cid:107) NCSj (cid:107) KCSj)
and V4 as V4 = h(SKuseri (cid:107) Nuseri (cid:107) Kuseri). The
adversary does not have the knowledge of Kcsj and Kuseri
to generate valid key-hash responses. Thus, the proposed
protocol is robust against impersonation attacks.

Protection Against Location Forgery Attacks: The EV
charging price depends on the location of the CS. A dishonest
user or a dishonest CS may provide a false location identiﬁer
to the USP. When the USP receives message MA4, it de-
codes LAI useri from ELuseri and compares LAI useri with
LAICSj. If the comparison of location identities fails, the

authentication process will be terminated. Thus, the proposed
authentication protocol prevents location forgery attacks.

U SP

Protection Against Replay Attacks: An adversary may
capture the messages transmitted between different enti-
later to get authenticated. How-
ties and may replay it
and Nuseri
ever, in the proposed scheme, [V Cuseri]Kpr
in MA3 : {hashvalue, π, Nuseri, ELuseri, V1} are not re-
peated in two sessions. Similarly, the parameter NCSj in
MA4 : {MA3, DIDCSj, NCSj, LAICSj, V2} is not repeated.
Hence, an adversary’s attempt
to capture and replay the
messages MA3 and MA4 to get authenticated will not be
successful. Similarly, the key-hash responses V3 and V4 from
the USP depend on the values NCSj and Nuseri are not
repeated. This ensures that the adversary’s attempt to replay
the captured messages MA5 and MA6 from the USP will
not be successful as well since they are composed of V3 and
V4, respectively. Thus, the proposed scheme prevents replay
attacks.

VII. PERFORMANCE ANALYSIS AND COMPARISON
This section compares the proposed scheme’s security
features with that of other similar solutions in the liter-
ature. Then, we evaluate the proposed protocol’s compu-
tation cost. After that, we perform a comparison of the
results with that of other similar protocols. A comparison
of the security features is given in Table III. The proposed
scheme’s main distinguishing feature from other works is
user-empowerment. For EV charging in the smart grid, none
of the existing authentication schemes leveraged DID to
empower the users. Also, while most similar works ensure
privacy and anonymity for the user, they do not provide non-
repudiation. The proposed scheme provides non-repudiation.
The proposed scheme prevents location forgery attacks. Most
of the other schemes do not protect against location forgery
attacks. Hence, the proposed scheme achieves all the essential
security requirements together with user empowerment.

Now, we evaluate the computation cost of the proposed
scheme. The registration process is executed only once.
Hence, the computation cost during the registration phase is
not signiﬁcant for the performance of the proposed scheme.
However, the authentication process is executed each time
the user wants to charge the vehicle. Hence, we discuss
the computation cost during the authentication phase of the
protocol in this section while omitting the computation cost
during the initial registration. Since the time taken by the
XOR operation and concatenation operation is negligible,
the time taken by these operations is not considered when
evaluating the computation cost of the protocols. To simulate
the experiments, we employ a personal computer with an
Intel Core i5 CPU, 2.90 GHz clock, and 4 GB of RAM as the
CS/USP. The time taken by various cryptographic operations
is given in Table IV. Then, we compare the computational
cost of the proposed scheme with other schemes. The perfor-
mance comparison based on computation cost is presented in
Table IV.

To compare the computation time taken by the user’s
device in different schemes during authentication, the compu-
tation time is calculated and is plotted in Figure 7. Similarly,

11

Fig. 7. Comparison of computation cost at EV.

Fig. 8. Comparison of computation cost at CS/USP.

the computation time taken by the CS/USP and the total time
taken during authentication in different schemes is plotted in
Figure 8 and Figure 9, respectively. We now look at how
the computation time increases when the number of EVs is
increased. The computation cost as a function of the number
of EVs is plotted in Figure 10. When a user’s VC is veriﬁed,
the USP sends the user a new VC for the next round. This
step is required to provide unlinkability between the VCs in
consecutive sessions. The computation cost at the USP in the
proposed scheme is slightly higher than that in some other
schemes, since generating a new VC adds to the computation
cost at USP in the proposed scheme. Considering the fact
that the USP has sufﬁcient resources to do the computation
and the security properties the proposed scheme offers, the
computation cost at the USP is reasonable. As a result, we
can conclude that the proposed scheme has a reasonable
computation time.

12

the user at a reasonable computational cost.

REFERENCES

[1] Iea (2021), global ev outlook 2021, iea, paris. [Online]. Available:

https://www.iea.org/reports/global-ev-outlook-2021

[2] H. Li, D. Han, and M. Tang, “A privacy-preserving charging scheme for
electric vehicles using blockchain and fog computing,” IEEE Systems
Journal, 2020.

[3] J. Antoun, M. E. Kabir, B. Moussa, R. Atallah, and C. Assi, “A detailed
security assessment of the ev charging ecosystem,” IEEE Network,
vol. 34, no. 3, pp. 200–207, 2020.

[4] L. F. Roman, P. R. Gondim, and J. Lloret, “Pairing-based authentication
protocol for v2g networks in smart grid,” Ad Hoc Networks, vol. 90,
p. 101745, 2019.

[5] P. Gope and B. Sikdar, “An efﬁcient privacy-preserving authentica-
tion scheme for energy internet-based vehicle-to-grid communication,”
IEEE Transactions on Smart Grid, vol. 10, no. 6, pp. 6607–6618, 2019.
[6] J. Krumm, “Inference attacks on location tracks,” in International
Conference on Pervasive Computing, vol. 4480 LNCS. Microsoft
Research, 2007, pp. 127–143.

[7] B. Schilit, J. Hong, and M. Gruteser, “Wireless location privacy

protection,” Computer, vol. 36, no. 12, pp. 135–137, 2003.

[8] J. Antoun, M. E. Kabir, B. Moussa, R. Atallah, and C. Assi, “A detailed
security assessment of the ev charging ecosystem,” IEEE Network,
vol. 34, no. 3, pp. 200–207, 2020.

[9] A. Unterweger, F. Knirsch, D. Engel, D. Musikhina, A. Alyousef, and
H. de Meer, “An analysis of privacy preservation in electric vehicle
charging,” Energy Informatics, vol. 5, no. 1, pp. 1–27, 2022.

[10] H. Liu, H. Ning, Y. Zhang, Q. Xiong, and L. T. Yang, “Role-dependent
privacy preservation for secure v2g networks in the smart grid,” IEEE
Transactions on Information Forensics and Security, vol. 9, no. 2, pp.
208–220, 2014.

[11] Y. Zhang, J. Zou, and R. Guo, “Efﬁcient privacy-preserving authenti-
cation for v2g networks,” Peer-to-Peer Networking and Applications,
vol. 14, no. 3, pp. 1366–1378, 2021.

[12] L. Chen, J. Zhou, Y. Chen, Z. Cao, X. Dong, and K.-K. R. Choo, “Padp:
Efﬁcient privacy-preserving data aggregation and dynamic pricing for
vehicle-to-grid networks,” IEEE Internet of Things Journal, vol. 8,
no. 10, pp. 7863–7873, 2021.

[13] S. Gunukula, A. B. T. Sherif, M. Pazos-Revilla, B. Ausby, M. Mah-
moud, and X. S. Shen, “Efﬁcient scheme for secure and privacy-
preserving electric vehicle dynamic charging system,” in 2017 IEEE
International Conference on Communications (ICC), 2017, pp. 1–6.

[14] N. Saxena and B. J. Choi, “Authentication scheme for ﬂexible charging
and discharging of mobile vehicles in the v2g networks,” IEEE
Transactions on Information Forensics and Security, vol. 11, no. 7,
pp. 1438–1452, 2016.

[15] A. Abdallah and X. S. Shen, “Lightweight authentication and privacy-
preserving scheme for v2g connections,” IEEE Transactions on Vehic-
ular Technology, vol. 66, no. 3, pp. 2615–2629, 2017.

[16] M. Kaveh, D. Martín, and M. R. Mosavi, “A lightweight authentication
scheme for v2g communications: A puf-based approach ensuring cy-
ber/physical security and identity/location privacy,” Electronics, vol. 9,
no. 9, p. 1479, 2020.

[17] G. Bansal, N. Naren, V. Chamola, B. Sikdar, N. Kumar, and
M. Guizani, “Lightweight mutual authentication protocol for v2g
using physical unclonable function,” IEEE Transactions on Vehicular
Technology, vol. 69, no. 7, pp. 7234–7246, 2020.

[18] H. Nicanfar, S. Hosseininezhad, P. TalebiFard, and V. C. Leung,
“Robust privacy-preserving authentication scheme for communication
between electric vehicle as power energy storage and power stations,”
in 2013 Proceedings IEEE INFOCOM.
IEEE, 2013, pp. 3429–3434.
[19] V. T. Kilari, S. Misra, and G. Xue, “Revocable anonymity based
authentication for vehicle to grid (v2g) communications,” in 2016 IEEE
International Conference on Smart Grid Communications (SmartGrid-
Comm).

IEEE, 2016, pp. 351–356.

[20] M. A. Mustafa, N. Zhang, G. Kalogridis, and Z. Fan, “Roaming electric
vehicle charging and billing: An anonymous multi-user protocol,” in
2014 IEEE International Conference on Smart Grid Communications
(SmartGridComm), 2014, pp. 939–945.

[21] N. Saxena, B. J. Choi, and S. Cho, “Lightweight privacy-preserving
authentication scheme for v2g networks in the smart grid,” in 2015
IEEE Trustcom/BigDataSE/ISPA, vol. 1.
IEEE, 2015, pp. 604–611.
[22] Y. Su, G. Shen, and M. Zhang, “A novel privacy-preserving authentica-
tion scheme for v2g networks,” IEEE Systems Journal, vol. 14, no. 2,
pp. 1963–1971, 2020.

Fig. 9. Comparison of total computation cost.

Fig. 10. Computation cost as a function of the number of EVs.

VIII. CONCLUSION

In this paper, we presented a DID, VC, and ZKP-based
authenticated key exchange protocol for EV charging in smart
grid that allows users to create and control their IDs. They
can charge their electtric vehicles without revealing their
identities. The user presents the ZKP of the VC to prove
his/her legitimacy before charging the vehicle. By making
use of ZPK, the CS is not able to learn anything about the
user in this protocol. The proposed protocol also provides an
option to recover the private key of the user in the event it
is lost. The key recovery mechanism makes the proposed
protocol resilient to accidental loss of a private key. We
provided informal and formal security analyses to show that
the proposed mechanism is robust. The proposed mechanism
achieves security properties such as session key security,
mutual authentication, privacy, anonymity, unlinkability, and
protection against many attacks. We compared the proposed
scheme with other similar works regarding performance and
security properties. Our analysis reveals that the proposed
scheme provides all major security features and privacy for

[23] R. P. Parameswarath, P. Gope, and B. Sikdar, “User-empowered
privacy-preserving authentication protocol for electric vehicle charging
based on decentralized identity and veriﬁable credential,” ACM
Transactions on Management Information Systems (TMIS), 2022.
[Online]. Available: https://doi.org/10.1145/3532869

[24] A. Shamir, “How to share a secret,” Communications of the ACM,

vol. 22, no. 11, pp. 612–613, 1979.

[25] M. Abdalla, P.-A. Fouque, and D. Pointcheval, “Password-based
authenticated key exchange in the three-party setting,” in International
workshop on public key cryptography. Springer, 2005, pp. 65–84.
[Online]. Available: https://doi.org/10.1007/978-3-540-30580-4_6
[26] Decentralized identiﬁers (dids). [Online]. Available: https://www.w3.

13

org/TR/did-core/
your

[27] Own

digital

identity.

[Online]. Available:

https://www.

microsoft.com/en-sg/security/business/identity-access-management/
decentralized-identity-blockchain

[28] J. Groth, “On the size of pairing-based non-interactive arguments,”
in Annual international conference on the theory and applications of
cryptographic techniques. Springer, 2016, pp. 305–326.

[29] M. de Vasconcelos Barros, F. Schardong, and R. Felipe Custódio,
“Leveraging self-sovereign identity, blockchain, and zero-knowledge
proof to build a privacy-preserving vaccination pass,” Blockchain, and
Zero-Knowledge Proof to Build a Privacy-Preserving Vaccination Pass,
2022.

[30] X. Salleras and V. Daza, “Zpie: Zero-knowledge proofs in embedded

systems,” Mathematics, vol. 9, no. 20, p. 2569, 2021.

[31] N. Koblitz, “Elliptic curve cryptosystems,” Mathematics of computa-

tion, vol. 48, no. 177, pp. 203–209, 1987.
Jung,

[32] Y. Choi, D. Lee,

J. Kim,

J.

J. Nam, and D. Won,
“Security enhanced user authentication protocol for wireless sensor
networks using elliptic curves cryptography,” Sensors (Switzerland),
vol. 14, no. 6, pp. 10 081 – 10 106, 2014. [Online]. Available:
http://dx.doi.org/10.3390/s140610081

[33] S. D. Galbraith and P. Gaudry, “Recent progress on the elliptic
curve discrete logarithm problem,” Des. Codes Cryptography,
vol. 78, no. 1, p. 51–72,
[Online]. Available: https:
jan 2016.
//doi.org/10.1007/s10623-015-0146-7
signatures.

https:
//cryptobook.nakov.com/digital-signatures/ecdsa-sign-verify-messages
[35] S. M. Smith, “Key event receipt infrastructure (keri),” 2021. [Online].

[34] Ecdsa: Elliptic

[Online]. Available:

curve

Available: https://arxiv.org/abs/1907.02143

