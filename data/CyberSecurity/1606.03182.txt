Cyber Attack Thread: A Control-ﬂow Based
Approach to Deconstruct and Mitigate Cyber
Threats

Koustav Sadhukhan∗, Rao Arvind Mallari†
Scientist, Defence Research and
Development Organisation, INDIA
Email: ∗koustavsadhukhan@hqr.drdo.in, †arvindrao@hqr.drdo.in

Tarun Yadav
Scientist, Scientiﬁc Analysis Group
Defence R & D Organisation, INDIA
Email: tarunyadav@sag.drdo.in

6
1
0
2

n
u
J

0
1

]
I

N
.
s
c
[

1
v
2
8
1
3
0
.
6
0
6
1
:
v
i
X
r
a

Abstract—Attacks in cyberspace have got attention due to risk
at privacy, breach of trust and ﬁnancial losses for individuals
as well as organizations. In recent years, these attacks have
become more complex to analyze technically, as well as to
detect and prevent from accessing conﬁdential data. Although
there are many methodologies and mechanisms which have been
suggested for cyber-attack detection and prevention, but not from
the perspective of an attacker. This paper presents the cyber-
defence as hindrances, faced by the attacker, by understanding
attack thread and defence possibilities with existing security
mechanisms. Seven phases of Cyber Attack Thread are introduced
and technical aspects are discussed with reference to APT attacks.
The paper aims for security practitioner and administrators as
well as for the general audience to understand the attack scenario
and defensive security measures.

Index Terms—Attack Thread, Prevention, IDPS, Firewall,

Exploit, Antivirus, Exﬁltration

I. INTRODUCTION

Cyberspace is the most dominant form of communication
and data sharing. The privacy of communication depends not
only on the trust between two parties, but also depends on
trust in the underlying cyberspace where the information is
communicated. To maintain this trust
information security
practitioners implement various security measures on the
infrastructure involved. This infrastructure includes various
kind of digital systems and networking equipment which
are designed with security parameters in mind.A majority
of information sharing and communication happening over
this infrastructure is conﬁdential, there are attackers, who are
interested and skilled to breach the vulnerable systems to ex-
ﬁltrate conﬁdential data.

This paper traverses the attack as it is unleashed by the
attacker and tries to explore the path followed by the attacker
in context with Cyber Attack Thread, which is a derived
version of Cyber Kill Chain. The paper discusses hindrances
faced and methodologies used by the attacker to successfully
reach the other end of attack thread. The paper also suggests
countermeasures and security mechanisms that a security
administrator can deploy to counter the threat from each phase
of the attack thread. Suggested Security mechanisms are in a

generic form and hence it can be scaled to most platforms of
interest.

The paper is organized into 4 sections. Section II deﬁnes the
term Cyber Attack Thread and discusses its need over Cyber
Kill Chain, Section III discusses the technical aspects of Cyber
Attack Thread and corresponding defences with available
security mechanisms. The paper ends with concluding remarks
in Section IV.

II. CYBER ATTACK THREAD VS. CYBER KILL CHAIN

Cyber Kill Chain [1] is a process based model used by
cybersecurity analysts to analyze APT attacks in a chained
manner. Such a model enables the analysts to tackle smaller
and easier problems, it also helps the defenders to design and
develop mitigations and defences for each phase. It describes
the 7 stages of an attack with various components [2] [3]
as shown in Fig. 1. Understanding Cyber Kill Chain helps
a security practitioner to develop defensive counter measures
[4] to the actions of a cyber attacker.

There are many articles [1][6][7] which describe the cyber
kill chain in detail, but are unable to provide a common process
model which has the capability to map attack methodology
as well as security defences at each stage of the cyber kill
chain. Although in [5] authors discuss technical components
and tools involved in Cyber Kill Chain, but it does not help
much for a security analyst to understand that at which stage
attack could be prevented and detected in an infrastructure
set-up. So there is need for a more generic process model
which not only incorporates Cyber Kill Chain, but also helps
defender by discussing attacks from his perspective as well.

Cyber Kill Chain explains attacker’s strategy[7] and com-
ponents for an attack, but it is not capable enough to map
corresponding defence mechanisms in a convenient way. To
implement effective securities in the cyberspace it is better to
understand the control ﬂow of cyber-attack rather than just its
components. To explore the attack there is a need to traverse
along with the attack stages and understand evasion techniques
for the security mechanisms and impediments faced by the
attack during this process. Once the defender knows about the
existing security holes which facilitates attacks, and security

 
 
 
 
 
 
Reconnaissance

Attack Vector
Veriﬁcation and
Reconnaissance

Weaponize

Enticing the End-User

Delivery

Exploitation

Security Penetration
to Reach the
Target System

Execution on
Target System

Installation

Internal Reconnaissance

Command and Control

Information Ex-ﬁltration

Act on Objective

Covering Tracks

Fig. 1: A Shift from Cyber Kill Chain to Cyber Attack Thread

measures which prevent attacks,
defences implemented by him for the infrastructure.

is easier to strengthen

it

We deﬁne control-ﬂow of a cyber-attack as Cyber Attack
Thread. Cyber Attack Thread gives a simple but insightful
methodology to explore the strategy, objectives and techni-
cality of the attack. In this paper a parallel walk with attack
thread is executed to analyze how the attack enters, executes,
affects and leaves the target with desired information. Security
implemented by defenders at network and system layers and
hindrances created to attacks are also discussed in detail in the
next section.

We suggest 7 phases of Cyber Attack Thread as shown
in ﬁg 1. The ﬁrst phase which is attack design and the last
phase covering tracks are oriented towards the attacker rather
than the defender. Therefore transition from and to these
phases are shown as dashed lines. The remaining 5 phases
of Cyber Attack Thread are dominant stages of attack where
the defender tries to prevent or detect the attack and the
attacker tries to evade securities implemented. A mapping of
Cyber Kill Chain to Cyber Attack Thread is also shown in
ﬁg 1, which clearly presents control-ﬂow of an attack, which
we have deﬁned as Cyber Attack Thread, is different and
partially derived from Cyber Kill Chain. In the next section,
technical details of Cyber Attack Thread and existing defence
mechanisms to prevent and detect attacks are discussed for
each of the 7 phases.

III. TECHNICAL ASPECTS OF CYBER ATTACK THREAD
AND CORRESPONDING DEFENCES

In the previous section we have discussed about the term
Cyber Attack Thread. Furthermore, there is a need to correlate
security measures with attack thread phases for better under-
standing. In this section technical aspects of attack strategy
and existing defence measures are discussed. Attack thread is
explained as a 7 stage process in which ﬁrst and last stages are
not much critical from defender’s perspective, but are included
and discussed for completeness.

A. Attack Vector Veriﬁcation and Reconnaissance

A multi-staged cyber-attack has many components like
exploit, RAT, rootkits, etc., which are designed and developed
by the attacker to achieve a malicious end result. Before
carrying out the actual cyber-attack on the intended target, the
attacker integrates all the components and tests it according
to a speciﬁc target scenario. Target Scenario is deﬁned by the
hardware and software conﬁguration of the target.

For targeted cyber-attacks, attackers develop speciﬁc com-
ponents according to speciﬁc target scenarios and conﬁg-
urations. A typical scenario includes network components,
Operating System major and minor versions, software appli-
cation versions, anti-viruses and other security mechanisms.
An attacker does the initial groundwork by testing all the
attack components in an emulated environment similar to the
target scenario. The attacker also veriﬁes the command &
control communication, data ex-ﬁltration, etc. and minimizes
all attribution proofs in the emulated environment. The target
scenario is created, using the information gathered by carrying
out reconnaissance against the target infrastructure. There are
basically two types of reconnaissance:

1) Passive Reconnaissance: Gathering information about
the target, without letting the target know about it, is
called Passive Reconnaissance. Attackers can gain useful
information from the Internet especially social-media
about an organization and its employees. This information
is used by the attackers to determine the management
hierarchy and targets of interest, which is generally used
by attackers to plan subsequent attacks.

One approach to minimize the damage from such
information is to do an internal assessment. The task
of internal team is to act like an adversary to identify
valuable information from internet and social media, and
then estimate the damage which can be caused by using
the information. Another approach can be to create and
spread information about fake personas to deceive the
attackers about an organization and its employees. This
approach will make the attack more costly by misleading
the attackers in the wrong direction. [9]

2) Active Reconnaissance: When attackers directly engage
with the target and scan its network to determine open
ports, running services, network security posture etc.
to make a list of likely attack vectors, it is known as
active reconnaissance. It is deeper proﬁling of the target

which might trigger an alert to the target. The usual
method of preventing active reconnaissance is to place
a ﬁrewall between the internal and external network. The
services are conﬁgured so that they do not give complete
information about version, type and system conﬁguration.
Active reconnaissance can also be detected by placing a
passive network snifﬁng device between the ﬁrewall and
the external network. This passive device will log all the
trafﬁc coming in and out of the network and can detect
any attempt of active reconnaissance. [10].

B. Enticing the End-User

After Phase A, an attacker has sufﬁcient knowledge about
the target’s afﬁnity and interests. Equipped with this knowl-
edge the attacker will now initiate penetrating target’s pe-
riphery by enticing him/her. In an attack scenario, periphery
is the environment surrounding the target system which is a
combination of network and network devices, system software
and human interface. Entering into the target’s periphery
depends on the method of delivery of attack. Any afﬁnity
shown by the user towards the attack delivery medium is less
prone to detection, because of the user’s trust in the content.
Attacks are targeted on an organization, particular user or the
masses. In case of organizations, common interest of content
to the employees is used to increase the afﬁnity towards the
attack’s delivery. For attacks targeting a particular user, an
attacker uses the personal information harvested from stage
A. There are two ways how an attacker enters into the target’s
virtual periphery:

1) Targeting User: This mode of operation directly interacts
with the user and tries to convince him/her to do the
desired activity, widely known as Social Engineering. In
almost all cases, some kind of user interaction is needed
to deliver the attack’s exploit and payload. This interac-
tion is performed by various kind of methods [5] mainly
phishing, emails, drive-by-downloads, USB/Removal Me-
dia and DNS Cache Poisoning.

There are various techniques like spam ﬁlers, web-
ﬁltering software, heuristic analysis by mail servers and
ﬁrewall, Google or Bing webmasters, DNSSEC [11]
which give protection against such delivery methods, but
there are several ways to bypass such protections, most
of the times due to inefﬁcient implementation of these
techniques. Other than these techniques, the attacker faces
hindrances due to strict policies implemented by secu-
rity administration which restricts user to use removable
media, public domain websites and gives limited access.
If an attack passes through the defences explained, then
the best protection is user awareness. A user, who is well
aware about the common security risks is less likely to be
fooled or enticed by any of the mentioned attacker’s mode
of delivery. Attackers use active and passive reconnais-
sance to gather enough information about the target and
use this information to serve an appealing content via one
of the available delivery modes. Reconnaissance enables
the attacker to craft contents according to user afﬁnity,

and maximize the necessity of user interaction, which
leads to breach into the system or network periphery.
2) Targeting Third-Party Interactions with User: Target-
ing third-party is an easier and reliable option for an
attacker. These third-parties are mainly online websites,
organizational/internal portals and network services. As
soon as the attacker gets control of these third parties,
it alters the content to be served. These altered contents
are exploits and payloads. In this case, if any user uses
services provided by these third-parties, he will be served
with the attacker’s crafted content which has the ability to
compromise a vulnerable target system. For an attacker it
is a better option, but due to segregation of internal portals
from the Internet, strict ﬁrewall policies for network
services, continuous updates and upgrade policies it is not
an easy task to ﬁnd a viable and exploitable third party.
As we can clearly understand that in this case there is
no direct interaction with targeted user so user awareness
at this stage doesn’t apply directly, but an aware user is
likely to detect abnormal behavior in the system to trigger
the alarm.

C. Security Penetration to Reach the Target System

As soon as the attacker gains access to the target’s periphery,
he tries to compromise the target, but many obstacles exist in
this process. The attacker has to bypass a variety of security
mechanisms implemented by security professionals. Defences
in this phase can be primarily categorized into 3 parts:

1) Inbound Network Security: The ﬁrst step of an attacker
is to penetrate the network perimeter of the target. There
are many systems available to protect the network perimeter,
which assure high reliability, if implemented and conﬁgured
properly. Some of the systems are being discussed here.

a) Intrusion Detection and Prevention Systems: An intru-
sion detection and prevention system can be software only
or mixture of dedicated hardware and software, which
is used to monitor suspicious events in end-points or
networks. Generally IDPS has the capability to detect
and prevent reconnaissance, exploitation and exﬁltration
events [18].
IDS is responsible for automating the process of detection
of intrusion. IPS includes all the functionality of IDS and
it also contains features to stop and prevent malicious
events. Most of the IDPS systems employ the following
techniques to detect and prevent malicious activities:
• Signature Based - This generally relies on pattern
recognition techniques, which includes comparison of
observed events with the database of signatures for
known threats. This approach often proves to be very
effective for detecting known threats, but mostly inef-
fective for unknown threats and zero-days. [19][20]
• Anomaly Based - Anomaly based IDS is based on
underlying principle that the normal behaviour of the
network trafﬁc is different from that of the behavior of
the attack trafﬁc. The major advantage of this approach
is that it has the ability to detect previously unknown

attacks for which signatures are not available. But on
the other side,
its disadvantage is that the number
of false positives in anomaly based systems is much
higher, when compared to the signature based systems.
[21]

• Stateful protocol Analysis - The system ﬁrst identiﬁes
the protocol in use, then it compares the observed
events with the stored proﬁles of benign protocol
activity. If it detects any deviations from the normal
protocol states, then it raises an alarm. The drawback
of the stateful protocol analysis is that it very resource
intensive, as it has to continuously keep track of the
different states of a protocol for multiple simultaneous
connections. Another drawback of this approach is that
it cannot detect an attack which does not involve any
deviation from normal protocol states. [22][23][24]
Network Based IDPS Technologies- SNORT, Suri-
cata and Bro IDS are three major technologies used
for network based IDPS. SNORT is the most popu-
lar open source network based IPS which can capture
network packets as well as perform malicious trafﬁc
analysis in real-time[25]. Suricata is also based on sig-
natures, but
includes some advanced features such
as high performance due to multithreading. It also has
the ability of automatically recognizing commonly used
protocols[26][27]. The main design goal of Bro IDS is
to separate policy and mechanism. The working principle
of Bro is based on events with custom policies, which is
an abstraction of network activity [28].

it

b) Network Based Firewall: It

is used to protect

the
perimeter of a network by monitoring inbound and out-
bound trafﬁc. Network ﬁrewalls protect the perimeter of
the network by ﬁltering the trafﬁc based on the criteria
and conﬁguration the administrator has deﬁned. Network
ﬁrewalls also include additional features compare to
host-based ﬁrewalls like Network adapter input ﬁlters,
Network address translation (NAT), Static packet ﬁlters,
Circuit-level inspection,Stateful inspection and Applica-
tion layer ﬁltering [12].

2) Inbound System Security: After successfully evading
network security, the target system is exposed to the attacker’s
threat. The attacker now drops and tries to execute a malicious
payload on the target system, but before executing on the
system, its presence can be detected and prevented, using the
defensive measures implemented by the target. We categorize
these measures into 4 major types:

a) Anti-Virus Static Detection: Static detection uses the
information of already analyzed malware patterns to
categorize, whether a piece of code is malicious or not.
These malware patterns are updated by anti-virus engines
regularly, to detect a variant or combination of malware.
We categorize static detection technique as follows[14]:
• Signature Based -It uses static patterns of an analyzed
ﬁle to generate ﬁngerprints of known malware compo-
nent of an attack. The signature could represent a series

of bytes or a hash of the ﬁle or selected parts. Static
detection is an essential component of every anti-virus
tool because before execution it alerts for malicious ﬁle
or program. There are various methods used for static
scan e.g. String Scanning method, Wildcards method,
Mismatches method,Bookmarks method,Smart Scan-
ning,Skeleton detection. [13]
Limitation of signature based detection is that it is
not able to categorize newly developed malware or
malicious ﬁles for which signatures have not yet been
developed. Therefore, modern attackers mutate attack
components often to retain malicious functionality by
changing the signatures.

• Heuristics Based - Heuristic detection detects new
malware and variants of old malware by statically
examining ﬁles for suspicious characteristics where
static detection give no exact signature match. For ex-
ample, an anti-virus might look for the presence of rare
instructions or junk code in the analyzed ﬁle. The tool
might also emulate running the ﬁle to see what it would
do if executed, attempting to do this without noticeably
slowing down the system. A single suspicious attribute
might not be enough to ﬂag the ﬁle as malicious.
However, several such characteristics might exceed the
expected risk threshold, leading the tool to classify the
ﬁle as malware. The biggest downside of heuristics is
the high rate of false positives for legitimate ﬁles.
b) Host Based IDS: Like network based IDS, host based
IDS tries to detect and protect the host system from vari-
ous kinds of malware and malicious activities. The major
features of Host based IDPS are ﬁle integrity checking,
event log analysis, OS conﬁguration monitoring, rootkit
detection, port monitoring, detecting hidden processes
and generating real-time alerts. OSSEC [25]and Samhain
[26] are the two famous host based open source IDS
compatible with various operating systems.

c) Host Based Firewall: Traditional ﬁrewall architectures
protect only the network perimeter. Host based ﬁrewalls
are very effective in preventing attackers from attacking
an individual computer. Generally host based ﬁrewall
can perform stateful analysis of network trafﬁc and
are designed to drop any incoming trafﬁc which does
not conform to the rules conﬁgured in the ﬁrewall. A
stateful analysis of network trafﬁc means that ﬁrewall
keeps track of the state of network connections. The
ﬁrewall monitors trafﬁc for network connections initiated
by the host and allow responses corresponding to the
sent trafﬁc by adding exceptions dynamically to its rules.
Due to this behaviour, host based ﬁrewalls can prevent
attackers from attacking computers by blocking incoming
malicious network trafﬁc.

d) Application Security: Although the OS implements var-
ious security mechanisms to prevent attacks as explained
in the previous section, but these days, applications also
have their own security mechanisms to prevent malicious

ﬁles to be downloaded to the system. In most of the
browsers, protection against online malicious contents
is implemented. Google Chrome, Firefox and Internet
Explorer alert users regarding expired certiﬁcates, black-
listed websites having phishing pages or malicious con-
tents, unsigned executable and other unsafe downloads.
Attacker needs to consider all these detection parameters,
while designing and delivering the attack components,
mainly the exploit and the payload. Hosting attack com-
ponents on genuine publicly accessible compromised
websites, signing payload with stolen certiﬁcates, and use
of crypter and packers to change the signature of ﬁle are
methods, which are used to bypass application security to
allow the user to access the content served by the attacker.
3) User Awareness: User awareness is the security which
is not easy to break. Nowadays, cyber security has become
an international topic of discussion, so more and more people
are well-aware about it, and they keep their system updated
and upgraded. In such scenario, it is not easy for the attacker
to bypass user awareness, although most of the times social
engineering, user history, organization objectives and current
topics of interest to user helps a lot for the attacker to deceive
the user with the content served. A security aware user will
detect malicious activity like crashing applications, modiﬁed
URL of phishing pages and websites with expired certiﬁcates
easily and they may scan and report such activities either to
administrator or online virus scanner services e.g. Virus Total.
So, nowadays attackers are becoming more careful and putting
more effort to hide the attack from users, because it may lead
to destroy the whole attack campaign.

D. Execution on Target System

The attacker now acquires the ability to execute the crafted
malicious content on the target system. This implies that the
attacker has already bypassed all static detection mechanism
as we explained in the previous section. Now execution of
attack’s initial component is initiated. At this stage we break
the cyber-attack components into 2 parts:

1) Exploit: An exploit works as a carrier for the payload.
Exploits are developed using vulnerabilities in various types of
software applications or hardware devices e.g. Ofﬁce software,
PDF Readers, Web-Browsers, Operating System and routers.
Most of the exploits use memory corruption vulnerabilities,
but there are protection techniques, which are implemented
by operating system to prevent successful exploitation of
vulnerabilities:

a) Mitigations for Stack Based Exploits:

• Stack Cookies or Stackguard - The stack cookie (as
known in Windows) or stackguard (as known in Linux)
is a random value which is placed between the stack
local variables and stack meta data such as return
address. Whenever a function returns,
the program
veriﬁes the integrity of the stack cookie value. In case,
if the value of the stack cookie fails to match the
program determines that a stack based buffer-overﬂow
has happened and terminates itself. [29]

• Structured Exception Handler Overwrite Protection
(SEHOP) - When a user-mode thread begins its ex-
ecution, a symbolic exception registration record is
inserted as the last entry in the exception handler list.
The subsequent exception registration records are ap-
pended to the head of the list, thus the symbolic record
always remains the last entry of the list. Whenever
an exception dispatcher is notiﬁed that an exception
has occurred in user mode, it walks the exception
handler list to check whether the symbolic record can
be reached and is valid. If the exception dispatcher is
unable to reach the symbolic record, then it deduces
that the exception handler list is corrupt. The process
is then safely terminated by the exception dispatcher.

b) Mitigations for Heap Based Exploits:

• Safe Unlinking - Whenever a free operation happens in
a chunk of heap memory, a veriﬁcation check occurs,
to make sure that the list entry stored in the chunk
being freed, is a valid doubly linked list entry. This
mitigation prevents exploitation techniques, that rely
on the unlinking performed for the coalescing of freed
heap chunks to write arbitrary value at an arbitrary
location.

• Allocation Order Randomization - When exploiting
heap corruption bugs, attackers often rely on determin-
istic heap allocations, so that they can position heap
chunks adjacent to each other, or at a desired location.
This technique popularly known as heap massaging or
heap normalization [31], is widely used for exploiting
heap-overﬂow [32] and use-after-free vulnerabilities
[33]. These kinds of exploitation are mitigated, by
randomizing the order of heap chunk allocations, which
means that it is no longer guaranteed, that subsequent
heap allocations will be placed next to each other. [35]
• Virtual Table Guard - Use-after-free vulnerabilities are
generally exploited by creating a fake instance of a
C++ object that has a fake virtual function table which
contains attacker controlled data. The attacker hijacks
the control-ﬂow by forcing a call to the controlled
virtual method. Virtual Table Guard is a compiler
security feature, which places a randomized secret
value in the Virtual Function Table. A check is made
to verify the integrity of the secret value before a call
is made to one of the virtual functions. In case, if the
secret value fails to match the application is terminated.
[34]

c) System-wide Exploit Mitigations:

• ASLR - Address Space Layout Randomization ran-
domizes the base address of the various segments,
such as stack, heap, libraries and the executable it-
self. Randomized base address of different segments
make the location of code and data unpredictable.
layout randomization mitigates code
Code segment
reuse attacks; data randomization hinders control-ﬂow
hijacking by making it difﬁcult to predict the location

of the attacker injected code. [36][37]

• DEP or NX - Data Execution Prevention is a combina-
tion of hardware and software which marks all mem-
ory locations in a process as non-executable, unless
the location is speciﬁcally marked for execution. The
application terminates as soon as the attacker tries to
hijack control by executing from the non-executable
pages. [38]

• Control Flow Integrity - Control ﬂow Integrity is a
compile and link time exploit mitigation technology,
which analyzes a program and discovers every location
in the program that can be reached by any indirect
branch. This information is then stored as a part of
the executable in a separate data structure known
as Control Flow Graph. A check is made while the
program is running before every indirect branching, to
ensure that the target is one of the expected locations. If
the program detects an indirect branching to a location,
other than the legal
it detects an attempt
targets,
of control-ﬂow hijack, and terminates immediately.
[39][40]

2) Payload: Payload is the core component of the cyber-
attack which executes on the system. Many kinds of payloads
exist e.g. Remote Access Toolkit, rootkit , bootkit, dropper,
downloader etc. These payloads optionally have persistent
and stealthy installation characteristics to evade detection.
Objectives for most of the payloads are to open a back-
door to exﬁltrate the data(ﬁles,keylogs,user credentials) , gain
persistent access and administrator access to modify secu-
rity conﬁgurations, propagation by infecting other systems in
network, and sometime attacker aims to damage the system
by increasing resource usage to the maximum. There are
various techniques used by the attacker to prevent detection
e.g. developing polymorphic and metamorphic payloads, use
of crypter and packers, etc.

Anti-Viruses analysis engine is one of the popular security
mechanism for a system which tries to prevent and detect
malware, during the execution of payload. It basically does
3 types of analysis and then detection [14] during execution
of payload:

a) Heuristic based Analysis and Detection: A dynamic
heuristic scanner performs CPU emulation of malicious
code as it happens in an actual system and monitors the
control ﬂow to guess the characteristics.

Many times malware use crypter and packers as wrap-
pers, which modify the signature as well as initial be-
havior of the program by means of adding delay or
changing the code execution path. The dynamic heuristic
engine emulates running the ﬁle to analyze the behavior,
if executed. Most of the time single suspicious attribute
is not be enough to label the ﬁle as malicious, therefore
multiple attributes are used to check the expected risk
threshold, leading to classify the ﬁle as a malware. The
biggest downside of heuristics is the high number of false
positives which ﬂag legitimate ﬁles as malicious.

b) Behavioral Analysis and Detection: Behavioral Anal-
ysis observes the execution of program on the system
rather than emulating its execution. This method at-
tempts to detect malware by observing and analysing for
suspicious behaviors, such as decryption and unpacking
of malicious code, modifying the hosts ﬁle properties,
and observing uses of system API for keystrokes, ﬁle
access, network connections, removable media access
and modifying process properties, etc. This suspicious
behavior is categorized using analysis of the database of
detected malware. Monitoring such malicious behavior
allows an anti-virus to detect the presence of unknown
malware on the protected system.

As happens with heuristics detection, one malicious
activity might not be enough to classify the ﬁle or code
as malware. Whereas collective analysis of such activities
could be indicative of the presence of malicious code in
a program. Behavioral detection techniques ﬁll the gap
between anti-virus tools and host intrusion prevention
systems (HIPS), which have traditionally existed as a
separate category of security mechanism.

c) Cloud based detection: The process of cloud based
detection is based on collecting malware data from pro-
tected systems, and analyzing it on the cloud infras-
tructure, instead of local system where malware resides.
The relevant properties of ﬁle and context of execution
are captured, and submitted to cloud based analysis
engine for processing. Then the cloud engine derives
patterns related to malware characteristics and behavior,
by correlating data from multiple systems. Motivation for
cloud-based analysis is to get beneﬁted from the malware
experiences of other systems, connected to the cloud,
submitting malicious ﬁles to the same engine

Other than anti-viruses, Sandboxing is a security technique
that isolates programs using a tightly controlled environment,
preventing malicious programs from modifying system conﬁg-
uration and data exﬁltration. Sandboxes restrict the capabilities
of a running program, so that it cannot abuse certain privileged
actions on the system. [16]

Other programs like browsers e.g. Google Chrome and
Internet Explorer both run in a sandbox themselves. of the
browser, which deals with untrusted content from the internet,
runs at a low or untrusted privilege. So, even if the attacker
exploits a vulnerability in the sandboxed process of the
browser, he cannot perform any privileged action which can
compromise the system, without escaping from the sandbox.

Content like web pages, browser plug-ins, PDFs and Ofﬁce
documents are sandboxed by software applications used to
open such content while mobile apps and windows programs
are sandboxed using User Access Control mechanism. There
are many techniques like virtual machine, sanboxie, AirGap,
spoon.net[17] which are used to implement a sandbox envi-
ronment.

E. Internal Reconnaissance

At this phase of the attack thread, the payload developed by
the attacker has been delivered and deployed by the exploit.
Using one of the persistence mechanisms explained earlier,
the payload also has gained partial or complete persistence,
depending on the type of privilege escalation achieved. Once
the payload has gained a foothold, the ﬁrst and foremost
step it is programmed to do, is to inform the attacker of its
success, using the command and control infrastructure set up
by the attackers. Based on the way the payload is programmed,
it may wait for command from the command and control
server, or start collecting conﬁdential information like system
conﬁgurations, document ﬁles, stored passwords etc. For an
attacker, there are basically two classes of information that a
compromised target can yield:

1) Primary Tactical Information: Usually,

the main in-
tent behind targeted cyber espionage is to compromise
the conﬁdentiality of the target. Such attacks aims at
smuggling out information regarding the target machine
owners ﬁnancial, organizational, academic and/or per-
sonal interests. This class of information usually includes
conﬁdential documents, presentations, ﬁnancial records,
keylogs, stored credentials, screen shots, stored emails,
browsing habits, encryption keys, chat logs, [47] etc.
Such information gathered are called primary tactical
information.

2) Secondary Strategic Information: This is another class
of information that can be yielded from a target. Sec-
ondary Strategic information is used by the attackers to
establish a stronger foothold, and establish a means to
spread the payload, to other systems it can connect to.
To achieve this objective, the payload surveys the system
for the processes running, software installed, services
enabled, update history, network conﬁguration, cached
DNS servers, etc. The payload can also initiate the
installation of more functionalities, like port forwarding,
execution of remote exploit, proxy to the internal network
and proxy to the World Wide Web.

To protect sensitive data and reduce the risk of data leakage,
organizations use Security Information and Event Manage-
ment(SIEM) technology. SIEM is equipped with features like
Real-Time Event correlation, embedded ﬁle integrity moni-
toring and log/event manager[48] to detect and prevent data
loss. Organizations also tackle data leak by means of labelling
data. Depending on the required conﬁdentiality, policies are in
place for each of the label. For example, Top Secret documents
should always be password protected while restricted docu-
ments don’t need to be protected by passwords. As a security
practice, storage of credentials should be minimized and
two-factor authentication should be used wherever available.
Browser Cache should be cleared regularly, and access to
system logs should be restricted to speciﬁc applications.

F. Information Ex-ﬁltration

The attacker by now is using the command and control
infrastructure, and the payload‘s functionality to exﬁltrate con-

ﬁdential data. In order to exﬁltrate the data, the attacker sets
up single or multiple channels to for data exﬁltration on the
basis of one or more exﬁltration methods as described below.
The attacker aims at having the most possible bandwidth with
a very low likelihood of being discovered. To achieve this, the
attacker usually uses methods which have legitimate uses and
are hard to detect among normal network trafﬁc. Following[49]
are the services/features that an attacker abuses to achieve data
exﬁltration:

1) FTP: The attacker sets up an FTP server to collect all the
ﬁles/data the payload wants to send. The payload running
at the target will encapsulate the data in some kind of bi-
nary format(possibly compressed and/or encrypted),login
to the attacker controlled FTP server and upload the
ﬁles. Authentication details, ftp server ip addresses are
either hard coded or dynamically determined. Such data
leak can be detected and stopped by examining packet
headers and ﬂow information of FTP trafﬁc. Whitelisting
is usually used and network administrators can implement
a ceiling on the amount of data any machine in the
organization uploads using FTP.

2) HTTP POST: HTTP POST is a part of HTTP by which
data in forms can be sent to the server. The payload can
easily perform a HTTP POST request using TCP sockets.
Usually ﬁle/data is chunked to tackle the inefﬁciencies of
transferring huge data and to behave in line with benign
POST requests. The attacker has to setup a web server to
accept this POST request and send a response. A typical
POST request involves the client requesting an HTML
object containing a form from the server following which
the client constitutes a POST request with the ﬁlled form.
In case of data exﬁltration there is no initial HTML
request. This can be used to detect and prevent HTTP
POST exﬁltration. A POST request to unknown servers
can also be marked suspicious. If not encrypted, POST
data can be examined and using regular expressions data
leak can be stopped. Attackers nowadays are using SSL to
encrypt HTTP POST requests. The attacker implements
SSL handshake protocol in the payload, and once the keys
are exchanged, the payload sends the data, by encrypting
it with the server’s public key.This kind of data leak is the
most difﬁcult to detect. To defend against such breaches,
some kind of behavioral system which detects anomalies
should be placed at the perimeter.

The above mentioned two mechanisms are the ones, that are
traditionally used by the attackers. Apart from these methods,
there exist data exﬁltration methods which rely on EMAIL,
SSH, Instant Messages, Social Media, etc. These methods
don’t support huge volume of data but are used to exﬁltrate
data of strategic nature. Attackers also make use of public
ﬁle uploading repositories like Dropbox to upload ﬁles at
some central location which is then retrieved by the attacker.
Attackers can also rely on covert channels. The attacker uses
optional ﬁelds of the DNS, ICMP, IP, TCP, etc protocols to
hide control data. The bandwidth offered by these techniques

are very low, but it provides high covertness. Detecting such
covert[50] channels require statistical analysis. Statistical pro-
ﬁles of regular trafﬁc are created and any deviation from
this regular proﬁle is deemed as malicious. Packet header
mangling, deploying DMZ,
limiting protocol support and
packet regeneration at the perimeter are some of the techniques
used to eliminate covert channels.

G. Covering Tracks

This phase explains the activity of the attacker to cover
his tracks, which has been generated in the course of attack.
Analysis of this phase may seem to be unnecessary because the
attacker has already succeeded in his objectives. But one can
gain insightful knowledge of the attacker’s tools, techniques
and procedures, as well as the weaknesses in the existing
security mechanisms, by analyzing this phase. This can be
helpful in preparation for countering the future attacks. This
phase can be broadly divided into the following parts:

1) Data Elimination: yaIn this technique, the attackers try
to delete the data which can help an analyst to do a
post-mortem analysis of the attack. This data can include
event log ﬁles, dropped binaries, etc. The attackers can
directly eliminate the data by safely deleting it or they
can disable the source for generating the data itself.
The various methods of achieving this are disabling
event logging, modifying system conﬁguration to disable
browser history, etc. [45]

2) Data Manipulation: Attackers can manipulate actual
facts to frustrate and mislead analysts. This is a more
effective technique when compared to data elimination
because it is very difﬁcult to detect if done properly. The
attackers can manipulate logs and ﬁles to obfuscate their
identity as well as they can plant evidences which can
lead to misattribution. [44]

3) Direct Attacks on Tools and Techniques: There are some
standard tools, which are used for forensics investigation
by analysts. These types of attacks are intended to cause
a denial of service condition, where a tool will fail
to perform its desired function. [43] Apart from this,
attackers can use various anti memory forensics, anti-
debugging and anti-VM techniques to hamper dynamic
analysis.

An analyst should not rely totally on the logs obtained from
the compromised system because an attacker can always delete
or manipulate logs of the system to make the analyst’s life
tougher. One of the best practices is to send and store logs
remotely on a hardened system continuously. This practice
may defeat the attacker’s intentions of covering his tracks. The
usual approach taken by organizations is to look at security
logs after the breach is reported. This approach should be
avoided, instead log ﬁles should be analyzed from network
and end-points continuously on a regular basis. This makes
sure that an analyst can identify an anomaly in the logs as
soon as the attacker tries to delete or manipulate them. An
effective way of monitoring the logs is to correlate logs from
different sources such as ﬁle, communication and process.

Another essential approach is to monitor endpoints for breach
and respond with distributed forensics and incident response
framework such as GRR. [46]

IV. SUMMARY

This paper discusses cyber-attacks from an attacker’s per-
spective to help security professionals to have in-depth un-
derstanding of Cyber Attack Thread. Control Flow of Cyber
Attack Thread is explained with technical components and
corresponding methodologies. Moreover, security mechanisms
against attack thread are discussed with effective implemen-
tation using existing solutions. Various techniques for mitiga-
tion, prevention and detection at network and system layer are
also discussed in detail to help the defender in implementing
effective defences.

REFERENCES

[1] MALWARE RISKS AND MITIGATION REPORT. 1st ed. BITS
- The Financial Services Roundtable; 2011. [Online]. Available at:
http://www.nist.gov/itl/upload/BITS-Malware-Report-Jun2011.pdf.
[Ac-
cessed: 26- Mar- 2015].

[2] Hartley M. Strengthening Cyber Kill Chain with Cyber Threat
at:

Intelligence.
http://www.isightpartners.com/2014/09/strenghtening-cyber-kill-chain-cyber-threat-intellige
[Accessed: 26- Mar- 2015].

[Online]. Available

Partners.

iSIGHT

2014.

[3] Hartley M. The Cyber Threat Kill Chain

iSIGHT Partners.
http://www.isightpartners.com/2014/10/cyber-threat-kill-chain-part-2-2/.
[Accessed: 26- Mar- 2015].

iSIGHT Partners. 2014.

Part 2 of 2 -
[Online]. Available at:

[4] Sager T. Killing Advanced Threats in Their Tracks: An Intelligent
Approach to Attack Prevention. Sansorg. 2014. [Online]. Available at:
http://www.sans.org/reading-room/whitepapers/detection/killing-advanced-threats-tracks-int
[Accessed: 26- Mar- 2015].

[5] Yadav, Tarun, and Arvind Mallari Rao. ”Technical Aspects of Cyber Kill
Chain.” Security in Computing and Communications. Springer Interna-
tional Publishing, 2015. 438-452.

[6] The

Cyber

Attack

Cycle.[Online]..

http://www.eur.army.mil/vigilance/Cyber Attack Cycle.pdf.
26- Mar- 2015].

Available

at:
[Accessed:

R.
Start.

[7] Davis
cal
http://www.criticalstart.com/2014/01/exploit-kill-chain-with-controls/.
[Accessed: 26- Mar- 2015].

Exploit Kill
Criticalstartcom.

Controls — Criti-
at:
Available

Chain with
2015.

[Online].

[8] D.

Mourer,
Invincea’,

’Rethinking
Invincea,

the
2014.

-
http://www.invincea.com/2014/11/rethinking-the-cyber-kill-chain/.
[Accessed: 31- Jul- 2015]

[Online].

Cyber

Kill

Chain
Available:

[9] Cyber

Counterintelligence:

From

Theory

to

Practice

-

http://www.tripwire.com/state-of-security/security-data-protection/cyber-counterintelligence
Early

Warning

Attack

and

[10] Worm

-

http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1306976

[11] R.

Paul,

’How to

Prevent DNS Attacks

-

Esecurityplanet.com,

2015.
Planet’,
http://www.esecurityplanet.com/network-security/how-to-prevent-dns-attacks.html.
[Accessed: 31- Jul- 2015]

[Online].

eSecurity
Available:

[12] T. Northrup,
Available:
[Accessed: 31- Jul- 2015]

’Firewalls’, Technet.microsoft.com, 2015.

[Online].
https://technet.microsoft.com/en-us/library/cc700820.aspx.

[13] Al Daoud, Essam, Iqbal H. Jebril, and Belal Zaqaibeh. ”Computer virus
strategies and detection methods.” Int. J. Open Problems Compt. Math
1.2 (2008): 12-20.

[14] Rad, Babak Bashari, Maslin Masrom, and Suhaimi Ibrahim. ”Evolution
of computer virus concealment and anti-virus techniques: a short survey.”
arXiv preprint arXiv:1104.1070 (2011).

[15] Lenny
Virus
http://searchsecurity.techtarget.com/tip/How-antivirus-software-works-Virus-detection-techniq

antivirus
techniques”.[Online].

works:
Available:

detection

software

Zeltser,

”How

[16] Chris Hoffman,

”Sandboxes Explained: How Theyre Already
Protecting You and How to Sandbox Any Program”.[Online]. Available:
http://www.howtogeek.com/169139/sandboxes-explained-how-theyre-already-protecting-you-and-how-to-sandbox-any-program/

Digital Forensics Conference. 2007.

[44] Kessler, Gary C. ”Anti-forensics and the digital investigator.” Australian

[45] Pajek, Przemyslaw, and Elias Pimenidis. ”Computer anti-forensics meth-
ods and their impact on computer forensic investigation.” Global Security,
Safety, and Sustainability. Springer Berlin Heidelberg, 2009. 145-155.
[46] Cohen, M. I., D. Bilby, and G. Caronni. ”Distributed forensics and
incident response in the enterprise.” digital investigation 8 (2011): S101-
S110.

[47] Pentest-standard.org,
Execution

Penetration
Available:
Testing
http://www.pentest-standard.org/index.php/Post Exploitation. [Accessed:
31- Jul- 2015].

Exploitation
2015.

’Post
Standard’,

-
The
[Online].

[48] K. Kent and M. Souppaya, Guide to Computer Security Log Manage-
ment, 1st ed. Gaithersburg: NIST, Technology Administration, 2006.
[49] R. C. Van Antwerp, EXFILTRATION TECHNIQUES: AN EXAMINA-
TION AND EMULATION, 1st ed. Delaware: University of Delaware,
2011, pp. 11-34.

[50] Zander, S., Armitage, G., & Branch, P. (2007). A survey of covert
channels and countermeasures in computer network protocols. Commu-
nications Surveys & Tutorials, IEEE, 9(3), 44-57.

[17] Top Three Sandbox Tools You Should Be Using”.[Online]. Available:

http://socialdriver.com/2014/04/17/top-three-sandboxing-tools/

[18] Scarfone, Karen, and Peter Mell. ”Guide to intrusion detection and
prevention systems (idps).” NIST special publication 800.2007 (2007):
94.

[19] Sommer, Robin, and Vern Paxson. ”Enhancing byte-level network in-
trusion detection signatures with context.” Proceedings of the 10th ACM
conference on Computer and communications security. ACM, 2003.
[20] Wang, Helen J., et al. ”Shield: Vulnerability-driven network ﬁlters for
preventing known vulnerability exploits.” ACM SIGCOMM Computer
Communication Review 34.4 (2004): 193-204.

[21] Garcia-Teodoro, Pedro, et al. ”Anomaly-based network intrusion detec-
tion: Techniques, systems and challenges.” computers & security 28.1
(2009): 18-28.

[22] Dreger, Holger, et al. ”Dynamic Application-Layer Protocol Analysis

for Network Intrusion Detection.” USENIX Security. 2006.

[23] Vallentin, Matthias, et al. ”The NIDS cluster: Scalable, stateful network
intrusion detection on commodity hardware.” Recent Advances in Intru-
sion Detection. Springer Berlin Heidelberg, 2007.

[24] Kruegel, Christopher, et al. ”Stateful

intrusion detection for high-
speed network’s.” Security and Privacy, 2002. Proceedings. 2002 IEEE
Symposium on. IEEE, 2002.

[25] Roesch, Martin. ”Snort: Lightweight Intrusion Detection for Networks.”

LISA. Vol. 99. No. 1. 1999.

[26] Albin, Eugene. A comparative analysis of the snort and suricata
intrusion-detection systems. Diss. Monterey, California. Naval Postgrad-
uate School, 2011.

[27] White, Joshua S., Thomas Fitzsimmons, and Jeanna N. Matthews.
”Quantitative analysis of intrusion detection systems: Snort and Suricata.”
SPIE Defense, Security, and Sensing. International Society for Optics and
Photonics, 2013.

[28] Sommer, Robin. ”Bro: An Open Source Network Intrusion Detection

System.” DFN-Arbeitstagung ber Kommunikationsnetze. 2003.

[29] Wagle, Perry, and Crispin Cowan. ”Stackguard: Simple stack smash
protection for gcc.” Proceedings of the GCC Developers Summit. 2003.
[30] Miller, Matt. ’Preventing The Exploitation Of Structured Exception
Handler (SEH) Overwrites With SEHOP’. Microsoft Security Research
and Defense Blog. N.p., 2009. Web. 15 July 2015.

[31] McDonald, John, and Chris Valasek. Practical Windows XP/2003 Heap

Exploitation. IBM ISS X-Force, 2009. Web. 16 July 2015.

[32] Daniel, Mark, Jake Honoroff, and Charlie Miller. ”Engineering Heap

Overﬂow Exploits with JavaScript.” WOOT 8 (2008): 1-6.

[33] Valasek, Chris. Understanding The Low Fragmentation Heap. 2010.
[Online]. Available at: http://illmatics.com/Understanding the LFH.pdf.
[Accessed: 20-Jun-2015].

[34] Nagaraju, Swamy Shivaganga et al. Software Vulnerability Exploitation

Trends. Microsoft Corporation, 2013. Web. 17 July 2015.

[35] Miller, Matt. ’Software Defense: Mitigating Heap Corruption Vulnera-
bilities - Security Research & Defense - Site Home - Technet Blogs’.
Blogs.technet.com. N.p., 2013. Web. 18 July 2015.

[36] Bhatkar, Sandeep, Daniel C. DuVarney, and Ron Sekar. ”Address Ob-
fuscation: An Efﬁcient Approach to Combat a Broad Range of Memory
Error Exploits.” USENIX Security. Vol. 3. 2003.

[37] Giuffrida, Cristiano, Anton Kuijsten, and Andrew S. Tanenbaum. ”En-
hanced Operating System Security Through Efﬁcient and Fine-grained
Address Space Randomization.” USENIX Security Symposium. 2012.
[38] Hensing, Robert. ’Understanding DEP As A Mitigation Technology
Part 1 - Security Research & Defense - Site Home - Technet Blogs’.
Blogs.technet.com. N.p., 2009. Web. 18 July 2015.

[39] Abadi, Martn, et al. ”Control-ﬂow integrity.” Proceedings of the 12th
ACM conference on Computer and communications security. ACM, 2005.
[40] Abadi, Martn, et al. ”Control-ﬂow integrity principles, implementations,
and applications.” ACM Transactions on Information and System Security
(TISSEC) 13.1 (2009): 4.

[41] Ossec.net,. ’OSSEC — Home — Open Source Security’. N.p., 2015.
[Online]. Available at: http://www.ossec.net/. [Accessed: 17- Mar- 2015]
Samhain’.
at:

La-samhna.de.
http://www.la-samhna.de/samhain/.[Accessed: 14- Mar- 2015].

—
Available

’Samhain
2015.

Labs
[Online].

[42] Wichmann,

Rainer.
N.p.,

[43] Garﬁnkel, Simson. ”Anti-forensics: Techniques, detection and counter-
measures.” 2nd International Conference on i-Warfare and Security. 2007.

