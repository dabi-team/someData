ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

1

MTH-IDS: A Multi-Tiered Hybrid Intrusion
Detection System for Internet of Vehicles

Li Yang, Abdallah Moubayed, and Abdallah Shami
Western University, London, Ontario, Canada
e-mails: {lyang339, amoubaye, abdallah.shami}@uwo.ca

1
2
0
2

y
a
M
6
2

]

R
C
.
s
c
[

1
v
9
8
2
3
1
.
5
0
1
2
:
v
i
X
r
a

Abstract—Modern vehicles, including connected vehicles and
autonomous vehicles, nowadays involve many electronic control
units connected through intra-vehicle networks to implement
various functionalities and perform actions. Modern vehicles
are also connected to external networks through vehicle-to-
everything technologies, enabling their communications with
other vehicles, infrastructures, and smart devices. However, the
improving functionality and connectivity of modern vehicles
also increase their vulnerabilities to cyber-attacks targeting both
intra-vehicle and external networks due to the large attack
surfaces. To secure vehicular networks, many researchers have
focused on developing intrusion detection systems (IDSs) that
capitalize on machine learning methods to detect malicious cyber-
attacks. In this paper, the vulnerabilities of intra-vehicle and
external networks are discussed, and a multi-tiered hybrid IDS
that incorporates a signature-based IDS and an anomaly-based
IDS is proposed to detect both known and unknown attacks
on vehicular networks. Experimental results illustrate that the
proposed system can detect various types of known attacks
with 99.99% accuracy on the CAN-intrusion-dataset representing
the intra-vehicle network data and 99.88% accuracy on the
CICIDS2017 dataset illustrating the external vehicular network
data. For the zero-day attack detection, the proposed system
achieves high F1-scores of 0.963 and 0.800 on the above two
datasets, respectively. The average processing time of each data
packet on a vehicle-level machine is less than 0.6 ms, which shows
the feasibility of implementing the proposed system in real-time
vehicle systems. This emphasizes the effectiveness and efﬁciency
of the proposed IDS.

Index Terms—Intrusion detection system, Internet of Vehicles,
CAN bus, Anomaly detection, Zero-day attacks, Bayesian opti-
mization.

I. INTRODUCTION

With the increasing research and rapid development of
the Internet of Vehicles (IoV) technology, connected vehi-
cles (CVs) and autonomous vehicles (AVs) are becoming
increasingly popular in the modern world [1]. IoV serves as a
primary vehicular communication framework that enables reli-
able communications between vehicles and other IoV entities,
such as infrastructures, pedestrians, and smart devices. [1].

IoV consists mainly of intra-vehicle networks (IVNs) and
external vehicular networks [1]. IVNs involve an increasing
number of electronic control units (ECUs) to adopt various
functionalities [2]. All ECUs in a vehicle are connected by
a controller area network (CAN) bus to transmit messages
and perform actions [3]. On the other hand, external networks
connect modern vehicles to the outer environment by vehicle-
to-everything (V2X) technologies. V2X technology allows

modern vehicles to communicate with other vehicles, roadside
infrastructures, and road users [4] [5].

However, with the increasing level of connectivity and
complexity of modern vehicles,
their security risks have
become a signiﬁcant concern. Cyber threats may decrease
the stability and robustness of IoV, as well as cause vehicle
unavailability or trafﬁc accidents. A real-life example can be
found in [6]: two attackers compromised and fooled a jeep
car into performing dangerous actions, including turning the
steering wheel and activating the parking brake at highway
speeds, causing severe accidents. In IVNs, CANs are mainly
vulnerable to message injection attacks due to their broadcast
communication strategy and the lack of authentication [4].
In external networks of IoV, vehicle systems are exposed to
various common cyber-attacks, like denial-of-service (DoS),
snifﬁng, and global positioning system (GPS) spooﬁng attacks
[7]. This is because,
in large external vehicular networks
comprising various types of networks and entities, every node
is a potential entry point for cyber-attacks.

Many traditional security mechanisms, like certain authen-
tication and cryptographic techniques, are unsuitable for intra-
vehicle networks because they are not supported in CANs
or may violate timing constraints of CAN communications
[8]. Thus, intrusion detection systems (IDSs) have become
an essential component in modern IoV to identify malicious
threats on vehicular networks [9]. IDSs are often incorpo-
rated into external networks as an essential component of
the defense system to identify malicious attacks that can
breach ﬁrewalls and authentication mechanisms. Although
many previous works have made some success developing
IDSs, intrusion detection is still a challenging problem due to
the high volume of network trafﬁc data, numerous available
network features, and various cyber-attack patterns [7].

Machine learning (ML) and data mining algorithms have
been recognized as effective models to design IDSs [10]. In
this paper, a multi-tiered hybrid intrusion detection system
(MTH-IDS) is proposed to efﬁciently identify known and
zero-day cyber-attacks on both intra-vehicle and external net-
works using multiple ML algorithms. The proposed MTH-IDS
framework consists of two traditional ML stages (data pre-
processing and feature engineering) and four tiers of learning
models:

1) Four tree-based supervised learners — decision tree
(DT), random forest (RF), extra trees (ET), and extreme
gradient boosting (XGBoost) — used as multi-class
classiﬁers for known attack detection;

 
 
 
 
 
 
ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

2

2) A stacking ensemble model and a Bayesian optimiza-
tion with tree Parzen estimator (BO-TPE) method for
supervised learner optimization;

3) A cluster labeling (CL) k-means used as an unsupervised

learner for zero-day attack detection;

4) Two biased classiﬁers and a Bayesian optimization with
Gaussian process (BO-GP) method for unsupervised
learner optimization.

Therefore, tiers 1 and 3 of the MTH-IDS are designed for
basic known and unknown attack detection functionalities,
respectively, while tiers 2 and 4 are designed to optimize
the base learners in tiers 1 and 3 for model performance
enhancement. A comprehensive and robust IDS with both
known and unknown attack detection functionalities can be
obtained after the model learning and optimization procedures.
Additionally, the quality of the used datasets can be improved
by data pre-processing and feature engineering procedures to
achieve more accurate attack detection.

The performance of the proposed MTH-IDS is evaluated
on two public network datasets, the CAN-intrusion-dataset
[9] and the CICIDS2017 dataset [11], representing the intra-
vehicle and external network trafﬁc data, respectively. The
model’s feasibility, effectiveness, and efﬁciency are evaluated
using various metrics, including accuracy, detection rates, false
alarm rates, F1-scores, and model execution time.

To our knowledge, no previous work proposed such a
hybrid IDS that optimizes learning models to accurately detect
existing and zero-day attack patterns on both intra-vehicle and
external vehicular networks.

The main contributions of this paper are as follows:

1) It proposes a novel multi-tiered hybrid IDS that can
accurately detect the various surveyed types of cyber-
attacks launched on both intra-vehicle and external ve-
hicular networks;

2) It proposes a novel feature engineering model based
on information gain (IG), fast correlation-based ﬁl-
ter (FCBF), and kernel principal component analysis
(KPCA) algorithms;

3) It proposes a novel anomaly-based IDS based on CL-k-
means and biased classiﬁers to detect zero-day attacks;
4) It discusses the use of Bayesian optimization techniques
to automatically tune the parameters of each tier in the
proposed IDS for model optimization;

5) It evaluates the performance and overall efﬁciency of
the proposed model on two state-of-the-art datasets,
CAN-intrusion-dataset and CICIDS2017, and discusses
its feasibility in real-world IoV devices.

The remainder of this paper is organized as follows: Section
II discusses the related work. Section III presents the vulner-
abilities of intra-vehicle and external vehicular networks, as
well as the attack scenarios and IDS deployment. In Section
IV, all the tiers and algorithms in the proposed MTH-IDS
are discussed in detail. Section V presents and discusses the
experimental results. Section VI concludes the paper.

II. RELATED WORK

A. CAN Intrusion Detection

The research on IDS development for IoV and connected
vehicles has been considered critical in recent years. Many
research works have a focus on detecting attacks on CAN-
based intra-vehicle networks. Alshammari et al. [12] proposed
an intrusion classiﬁcation model to identify CAN intrusions on
in-vehicle networks utilizing support vector machine (SVM)
and k-nearest neighbors (KNN) algorithms. Barletta et al. [13]
proposed a distance-based IDS for CAN intrusion detection
using a X–Y fused Kohonen network with the k-means algo-
rithm (XYF-K). The proposed method shows high accuracy
on the CAN-intrusion dataset, but its main limitation is the
high computational complexity. Olufowobi et al. [14] proposed
a speciﬁcation-based real-time IDS named SAIDuCANT to
detect the in-vehicle network attacks. The effectiveness of
SAIDuCANT is evaluated on a synthetic dataset and the CAN-
intrusion dataset. Olufowobi et al. [15] proposed an anomaly-
based IDS for CAN attack detection using the adaptive cumu-
lative sum (CUSUM) algorithm. This technique can effectively
detect intrusions with low delay based on statistical changes.
Lee et al. [16] proposed an Offset Ratio and Time Interval
based IDS (OTIDS) to detect CAN attacks in in-vehicle
networks. They also created a CAN dataset by simulating DoS,
fuzzy, and impersonation attacks for IDS evaluation.

Deep learning (DL) methods are also widely used for
intra-vehicle network IDS development. Lokman et al. [17]
proposed an unsupervised DL-based anomaly detection model
named stacked sparse autoencoders (SSAEs)
to discover
anomalies in CAN-bus data for intra-vehicle network security
enhancement. Song et al. [18] proposed a deep convolutional
neural network (DCNN) method named Reduced Inception-
ResNet to detect intra-vehicle attacks and achieve high detec-
tion performance on the CAN-intrusion dataset. Ashraf et al.
[19] proposed a DL-based IDS for IoV using a long-short term
memory (LSTM) autoencoder algorithm. The effectiveness of
the proposed model is evaluated on the CAN-intrusion-dataset
and UNSW-NB15 dataset, representing in-vehicle network and
external network datasets, respectively. DL methods can often
achieve high accuracy, but they are computationally expensive
due to high model complexity.

B. External Network Intrusion Detection

Intrusion detection in IoV or external vehicular networks has
also attracted signiﬁcant attention. Alheeti et al. [20] proposed
an intelligent IDS using back-propagation neural networks
to detect DoS attacks in external vehicular networks using
the Kyoto 2006+ dataset, but did not consider other attack
types. Rosay et al. [21] proposed a multi-layer perceptron
(MLP) based network IDS for cyber-attack detection in IoT
and connected vehicles. The proposed model has been imple-
mented on an automotive microprocessor, and its performance
is evaluated on the two variants of the CICIDS2017 dataset.
Aswal et al. [22] analyzed the applicability of six classical
ML algorithms for Bot attack detection on IoV. They used
the Bot attack ﬁles in the CICIDS2017 dataset to represent
the Botnets in vehicular networks, but they did not consider

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

3

other attacks. Aloqaily et al. [23] proposed a network IDS for
IoV and connected vehicles using deep belief network (DBN)
and decision tree (DT) algorithms. This method shows high
accuracy on the NSL-KDD dataset. Gao et al. [24] proposed
a distributed network IDS for distributed DoS (DDoS) attack
detection in vehicular networks and V2X systems. Two general
network benchmark datasets, the NSL-KDD and UNSW-NB15
datasets, are used to present the vehicular network datasets and
evaluate the IDS. Schmidt et al. [25] proposed a spline-based
IDS for vehicular networks using the knot ﬂow classiﬁcation
(KFC) method and used the NSL-KDD dataset to represent
vehicle networks for model evaluation.

Several other research works also pay attention to the IDS
development of general networks and use benchmark datasets
for method evaluation. Min et al. [26] proposed a semi-
supervised learning model, named SU-IDS, by combining the
auto-encoder algorithm with k-means to detect cyber-attacks
using the NSL-KDD and CICIDS2017 datasets. Yao et al. [27]
proposed a DL model named spatial-temporal deep learning
on communication graphs (STDeepGraph) by combining the
convolutional neural network (CNN) and long short-term
memory (LSTM) methods. The performance of STDeepGraph
is evaluated on the UNSW-NB15 and CICIDS2017 datasets.
Injadat et al. [28] proposed a novel multi-stage optimized
ML-based IDS for network attack detection and evaluated the
model’s performance on the CICIDS2017 and UNSW-NB15
datasets. The ML models used in this paper are optimized by
hyper-parameter optimization (HPO) methods.

C. Literature Comparison

Although various studies about vehicular network IDS de-
velopment have been published, most of them are only de-
signed for known attack detection on either intra-vehicle ([12]-
[18]) or external networks ([20]-[26]). Additionally, several
papers [20] [22] [24] only consider a speciﬁc type of attack,
like Botnets or DoS attacks. However, in real-world applica-
tions, both intra-vehicle and external networks are vulnerable
to various types of attacks with both existing and new patterns.
The IDS proposed in [19] is the only research that considers
both CAN bus and external networks, and the IDS proposed
in [20] is the only technique that can detect both known and
unknown attacks. Thus, there still should an IDS designed
for the detection of both known and zero-day attacks on both
intra-vehicle and external vehicular networks. Our proposed
IDS aims to achieve this.

On the other hand, for the deployment of IDSs in real-
world vehicle systems, vehicle-level model testing and real-
time analysis should be performed to validate the feasibility
of the IDSs. However, only ﬁve papers [14] [16] [18] [21] [23]
did vehicle-level testing or real-time analysis, so the feasibility
of other techniques in real-world IoVs is not proven. There-
fore, our proposed IDS has been evaluated in a vehicle-level
machine to verify whether it meets the real-time requirements
of vehicular networks.

An effective IDS should achieve a high detection rate
and a low false alarm rate. Moreover, to meet the real-time
requirements of IoV, an IDS should have low computational

Fig. 1. CAN packet structure.

complexity and high efﬁciency. Thus, three important proce-
dures, including data sampling, feature engineering, and model
optimization, are implemented in our proposed MTH-IDS to
improve the efﬁciency and accuracy of IoV attack detection.
The details of how these three procedures can improve the
model’s performance are provided in Sections IV-B to IV-
D. However, only six existing techniques [12] [19]-[22] [28]
performed feature engineering and only one research work
[28] implemented model optimization. The use of efﬁciency
and accuracy enhancement techniques enables our proposed
MTH-IDS to outperform most existing research works in terms
of detection rate, false alarm rate, and execution speed.

To summarize, the main functionalities and components
of the proposed MTH-IDS are listed in Table I. Table I
also clearly compares 17 existing literature with the proposed
MTH-IDS based on the important functionalities that an
effective and efﬁcient vehicular network IDS should have.

III. VEHICULAR NETWORKS, VULNERABILITIES, AND
IDS DEPLOYMENT

A. Vulnerabilities of Intra-vehicle Networks

Modern vehicles often contain 70-100 ECUs that are in-
vehicle components used to enable various functionalities [2].
CAN [9] is a bus communication protocol that deﬁnes an
international standard for efﬁcient and reliable intra-vehicle
communications among ECUs. A CAN-bus is built based on
differential signaling and comprises a pair of channels, CAN-
High and CAN-Low, representing the two signals, 1 and 0,
respectively [29]. CAN is the most common type of IVN
due to its low cost and complexity, high reliability, noise-
resistance, and fault-tolerance properties [7] [9]. However,
CAN is vulnerable to various cyber threats due to its broadcast
transmission strategy, lack of authentication and encryption,
and unsecured priority scheme [3].

CAN messages, or packets, are transmitted via CAN-bus.
The data frame is the most important type of CAN packet
used to transmit user data [30]. Fig. 1 shows the structure
of a CAN packet, which consists of seven ﬁelds [4]: start of
frame, arbitration ﬁeld, control ﬁeld, data ﬁeld, CRC (cyclic
redundancy code) ﬁeld, acknowledge (ACK) ﬁeld, and end
of frame. Among all ﬁelds, the data ﬁeld with the size of
0-8 bytes is the most important and vulnerable one, since it
contains the actual transmitted data that determines the node
actions [9]. An attacker can intrude or take control of a vehicle
by injecting malicious messages into the data ﬁeld of CAN
packets, resulting in compromised nodes or vehicles; so-called
message injection attacks.

Message injection attacks are the primary type of intra-
vehicle attack and can be further classiﬁed as DoS attacks,

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

4

TABLE I
COMPARISON OF RECENT INTRUSION DETECTION TECHNIQUES FOR IOVS

Paper

Alshammari et al. [12]
Barletta et al. [13]
Olufowobi et al. [14]
Olufowobi et al.[15]
Lee et al. [16]
Lokman et al. [17]
Song et al. [18]
Ashraf et al. [19]
Alheeti et al. [20]
Rosay et al. [21]
Aswal et al. [22]
Aloqaily et al. [23]
Gao et al. [24]
Schmidt et al. [25]
Min et al. [26]
Yao et al. [27]
Injadat et al. [28]
Proposed MTH-IDS

In-vehicle
Network Attack
Detection
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)

(cid:33)

External
Network Attack
Detection

(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)

Multiple Types
of Known
Attack Detection
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)

(cid:33)

(cid:33)

(cid:33)
(cid:33)
(cid:33)
(cid:33)
(cid:33)

fuzzy attacks, and spooﬁng attacks by their objectives [9]. In
DoS attacks, a CAN is ﬂooded with massive high-priority mes-
sages to cause latencies or unavailability of other legitimate
messages. Similarly, fuzzy attacks can be launched by inject-
ing arbitrary messages with randomly spoofed identiﬁers or
packets, causing compromised vehicles to exhibit unintended
behaviors, like sudden braking or gear shift changes. Spooﬁng
or impersonation attacks, such as gear spooﬁng and revolutions
per minute (RPM) spooﬁng attacks, are launched by injecting
messages with certain CAN identiﬁers (IDs) to masquerade as
legitimate users and take control of the vehicles.

B. Vulnerabilities of External Vehicular Networks

In a similar fashion, V2X technology enables interactions
and communications between vehicles and other IoV entities,
including pedestrians, infrastructures, smart devices, and net-
work systems [4] [31]. With the increasing connectivity of
modern IoV, external vehicular networks are becoming large
networks that involve various other networks and devices.
Thus, external vehicular networks are vulnerable to various
general cyber threats because each vehicle or device is a
potential entry point for intrusions. Typical attacks in IoV
include DoS, GPS spooﬁng, jamming, snifﬁng, brute-force,
Botnets, inﬁltration, and web attacks [11] [32]. The description
and IoV scenarios of these common external vehicular network
attacks are summarized in Table II.

C. Attack Scenarios and IDS Deployment

The attack scenarios and general architecture of a vehicle
protected by IDS are shown in Fig. 2. As the physical interface
for ECU communications, the on-board diagnostics II (OBD-
II) interface is often exploited by internal attacks to inject
malicious CAN messages into the vehicle systems, therefore
taking control of the CAN nodes to perform malicious actions,
like sudden braking. On the other hand, the external attackers
can launch the cyber-attacks listed in Table II through various

Zero-Day
Attack
Detection

Vehicle-Level
Model Testing or
Real-time Analysis

Data Pre-
Processing
and Sampling

Feature
Engineering

Model
Optimization

(cid:33)

(cid:33)

(cid:33)

(cid:33)

(cid:33)

(cid:33)

(cid:33)

(cid:33)

(cid:33)

(cid:33)
(cid:33)
(cid:33)
(cid:33)

(cid:33)
(cid:33)

(cid:33)
(cid:33)

(cid:33)

TABLE II
COMMON ATTACK TYPES ON EXTERNAL VEHICULAR NETWORKS

Attack Type

DoS [32]

GPS Spooﬁng
[32]

Jamming [32]

Snifﬁng [32]

Brute-force
[11]

Botnets [11]

Inﬁltration [11]

Web Attack
[11]

Description and IoV Scenarios
Send a large number of requests to exhaust the compromised
nodes’ resources, causing vehicle unavailability or accidents.
Masquerade as authorized IoV users to provide a node with false
information, like false geographic information, therefore causing
fake evidence, event delay, or property losses.
Jam signals to prevent legitimate IoV devices from communicating
with connected vehicles.
Capture vehicular network packets to steal conﬁdential or sensitive
information of vehicles, users, or enterprises.
Crack passwords in vehicle systems to take control of vehicles or
machines and perform malicious actions.
Infect multiple connected vehicles and IoV devices with Bot
viruses to breach them and launch other attacks.
Traverse the compromised vehicle systems and create a backdoor
for future attacks.
Hack IoV servers or web interfaces of connected vehicles to gain
conﬁdential information or perform malicious actions.

Fig. 2. The proposed IDS-protected vehicle architecture.

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

5

wireless interfaces,
Bluetooth [19].

including WiFi, cellular network, and

To secure IoV, the proposed IDS can be placed in different
locations in vehicular networks. In intra-vehicle networks,
the IDS can be deployed on top of the CAN-bus to detect
malicious messages [33]. Since every message is broadcasted
to all nodes, it will also be transmitted through the IDS when
its signal changes from CAN-High to CAN-Low. The IDS will
monitor the CAN packets and identify potential intrusions. If
an attack is detected, alarms will be triggered on every node.
On the other hand, the central gateways are common net-
work devices to incorporate IDSs, so the proposed IDS can
be placed inside the gateway to monitor the external network
trafﬁc [34]. Thus, abnormal network trafﬁc can be detected
when it is passed through the gateways in external vehicular
networks. The potential deployment of the proposed IDS is
also shown in Fig. 2.

To protect the vehicle from being breached, all packets or
messages transmitted in the protected vehicular network are
captured by packet taps or sniffers (e.g., NetFlow), and then
analyzed by the proposed IDS before being forwarded to the
protected vehicle [35]. For example, if an attacker is launching
a DoS attack by sending a large volume of malicious trafﬁc
to a vehicle system, the malicious trafﬁc will be detected by
the proposed IDS by processing the trafﬁc data captured by
the sniffer; alarms will then be generated, and the attacker’s
access will be denied, therefore protecting the vehicle from
being breached [36]-[38].

D. Real-Time Requirements of Vehicle Systems

The standardized vehicular communications specify the
performance requirements of vehicle safety services based on
two primary metrics: packet-delivery-ratio (PDR) and latency
[39]. For IDS development, the latency metric should be con-
sidered to meet the real-time requirements. Latency indicates
the time needed to transmit a packet from its source to its
destination. According to the United States (US) department
of transportation, the highest priority vehicle safety services,
like collision and attack warnings, should have a latency of
10 to 100 ms at the utmost [39]. On the other hand, for
autonomous or cooperative driving, the V2X trafﬁc safety
applications require a stringent latency requirement of 10 to 20
ms [38] [40]. Thus, for a vehicle-level IDS, the time needed to
process each network packet is required to be less than 10ms
to meet the real-time or latency requirements.

IV. PROPOSED MTH-IDS FRAMEWORK

A. System Architecture

The purpose of this work is to develop an IDS that can
protect both intra-vehicle and external networks from being
breached by the various common attacks presented in Sections
III-A and III-B. In this paper, a novel multi-tiered hybrid
IDS is proposed to detect both known and unknown cyber-
attacks on vehicular networks with optimal performance. Fig. 3
demonstrates the architecture of the proposed system, compris-
ing four main stages: data pre-processing, feature engineering,
a signature-based IDS, and an anomaly-based IDS.

Firstly, intra-vehicle and external network trafﬁc datasets are
collected for the purpose of system performance evaluation
on both types of vehicular networks. Data pre-processing
consists of a k-means-based cluster sampling method used
to generate a highly-representative subset, and a SMOTE
method used to avoid class-imbalance. In the feature engi-
neering process, the datasets are processed by information-
gain-based and correlation-based feature selection methods to
remove irrelevant and redundant features, and then passed
to the KPCA model
to further reduce dimensionality and
noisy features. The proposed data pre-processing and feature
engineering procedures can greatly improve the quality of the
network data for more accurate model learning. The signature-
based IDS is then developed to detect known attacks by
training four tree-based machine learners as the ﬁrst tier of
the proposed MTH-IDS: DT, RF, ET, XGBoost. In the second
tier, a stacking ensemble model and the BO-TPE method are
used to further improve the intrusion detection accuracy by
combining the output of the four base learners from the ﬁrst
tier and optimizing the learners. In the next stage, an anomaly-
based IDS is constructed to detect unknown attacks. In the
anomaly-based IDS, the suspicious instances are passed to
a cluster-labeling (CL) k-means model as the third tier to
effectively separate attack samples from normal samples. The
fourth tier of the MTH-IDS comprises the BO-GP method and
two biased classiﬁers used to optimize the model and reduce
the classiﬁcation errors of the CL-k-means. Ultimately, the
detection result of each test sample is returned, which could be
a known attack with its type, an unknown attack, or a normal
packet. To summarize the rationale behind the algorithms used
in the proposed IDS, the brief description and performance
impact of each algorithm are presented in Table III. A detailed
description is provided in Sections IV-B to IV-D.

B. Data Pre-processing

In real

1) Data Sampling by K-means Clustering:

life,
training ML models on massive amounts of network trafﬁc
data is unrealistic and may cost a massive amount of time,
especially in the hyper-parameter tuning process that needs to
train a ML model multiple times. For model training efﬁciency
improvement purposes, data sampling is a common technique
that can generate a subset of the original data to reduce the
training complexity of a model [41].

In the proposed system, to obtain a highly-representative
subset, a k-means-based cluster sampling method is utilized.
Cluster sampling is a common data sampling method by which
the original data points are grouped into multiple clusters;
then, a proportion of data is sampled from each cluster to form
a representative subset [41]. Unlike random sampling, which
randomly selects every data sample with an equal probability,
cluster sampling can generate a highly-representative subset
because the discarded data points are mostly redundant data.
Among all clustering algorithms, k-means is the most com-
mon one for data sampling due to its simple implementation
and low computational complexity [42]. K-means clustering
algorithms are used to divide the data points into k clusters
based on their Euclidean, Manhattan, or Mahalanobis distances

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

6

Fig. 3. The framework of the proposed MTH-IDS.

TABLE III
RATIONALE AND PERFORMANCE IMPACT OF EACH COMPONENT OF THE MTH-IDS

Stage

Data
pre-processing

Feature
engineering

The signature-
based IDS

The anomaly-
based IDS

Algorithm
K-means
cluster
sampling

SMOTE

Z-score

IG

FCBF

KPCA

DT, RF, ET,
and XGBoost

BO-TPE

Stacking

CL-k-means

BO-GP

Two biased
classiﬁers

Rationale and Description
Network trafﬁc data is often large, while IoV devices often have limited computational
power and resources. The k-means sampling method can generate highly representative
subsets for more efﬁcient training because the removed data is mostly redundant data.
Network trafﬁc data is often imbalanced data because most data samples are collected under
normal conditions in real-world vehicle systems. SMOTE can create high-quality samples
for minority classes to avoid class-imbalance and ineffective classiﬁers.
Different features often have different ranges, which can bias the model training. The Z-
score method can normalize features to a similar scale and handle outliers.
For certain tasks like intrusion detection, many collected features can be irrelevant, causing
additional training time. The IG method can remove those unimportant features.
Certain features are redundant because they contain very similar information. FCBF can
remove redundant features by calculating the correlation between each pair of features.
The anomaly-based IDSs are sensitive to the quality of features. KPCA can further extract
the most relevant features to reduce dimensionality and noisy information.
Tree-based ML algorithms often perform better than other ML algorithms on complex
tabular data to which IoV data belong. Four tree-based supervised algorithms are used to
train base classiﬁers for known intrusion detection.
The default hyper-parameters of ML algorithms often cannot return the best model. BO-TPE
can optimize the models’ hyper-parameters to obtain the optimized base classiﬁers.
Ensemble models can often achieve higher accuracy than any single model. Stacking
ensemble can combine the base classiﬁers to obtain a meta-learner with better performance.
For unknown attack detection, CL-k-means can generate a sufﬁcient number of normal and
attack clusters to identify zero-day attacks from the newly arriving data.
CL-k-means has an important hyper-parameter, the number of clusters, k. BO-GP is an
effective HPO method to optimize k and obtain the optimized CL-k-means model.
CL-k-means may return many errors when detecting complex unknown attacks. Two biased
classiﬁers are trained on the FPs and FNs of CL-k-means to reduce the errors.

Performance Impact

Improve model training efﬁciency.

Improve detection rate.

Improve model accuracy and training efﬁciency.

Improve model training efﬁciency.

Improve model accuracy and training efﬁciency.

Improve model accuracy and training efﬁciency.

Detect various types of known attacks.

Improve accuracy of known attack detection.

Improve accuracy of known attack detection.

Detect unknown attacks.

Improve accuracy of unknown attack detection.

Improve accuracy of unknown attack detection.

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

7

[43] [44]. The data samples in the same group can be consid-
ered similar samples, so sampling from each group can greatly
reduce the size of data without losing important information.
K-means aims to minimize the sum of squares of distances
between all the data points and the corresponding centroid of
the cluster, denoted by [42]:

nk(cid:88)

i=0

min
uj ∈Ck

(xi − uj)2 ,

(1)

where (x1, · · · ,xn) is the data matrix; uj, also called the
centroid of a cluster Ck, is the mean of all the samples in
Ck; and nk is the total number of sample points in the cluster
Ck. K-means has a linear time complexity of O(nkt), where
n is the data size, k is the number of clusters, and t is the
number of iterations [42].

After implementing the k-means to cluster the original data
samples into k clusters, random sampling is then applied to
each cluster to select 10% of the data as the sampled subset.
The percentage of data sampling can vary, depending on the
data scale and resource limitations. Additionally, the main
hyper-parameter of k-means, the number of clusters [45], k, is
tuned by Bayesian Optimization (BO) to improve the quality
of the subset.

Hyper-parameter optimization (HPO) is the process of
building an optimized ML model for a speciﬁc problem or
dataset using an optimization algorithm [46]. BO algorithms
are an efﬁcient group of HPO algorithms that determine the
next hyper-parameter value based on the previous evaluation
results [47]. In BO, a surrogate model is used to ﬁt all the
currently tested data points into the objective function; an
acquisition function is then used to locate the next point. Two
common surrogate models for BO are the Gaussian process
(GP) and the tree Parzen Estimator (TPE) [45].

In GP surrogate models, the predictions follow a Gaussian

distribution [45]:

p(y|x, D) = N (cid:0)y|ˆµ, ˆσ2(cid:1) ,

(2)

where D is the hyper-parameter conﬁguration space, y = f (x)
is the value of the objective function for each hyper-parameter
conﬁguration with its mean as µ and covariance as σ. The
BO method with GP (BO-GP) exhibits great performance on
optimizing a small number of continuous or discrete hyper-
parameters due to its fast convergence speed, but is inefﬁcient
for conditional hyper-parameters since it treats each hyper-
parameter independently [45]. BO-GP has a time complexity
of O(n3) and space complexity of O(n2) [45].

Since k-means methods generally only have one discrete
hyper-parameter, k, that needs to be tuned, BO-GP serves
as an effective HPO method for k-means because of its
fast convergence speed. The silhouette coefﬁcient, a common
distance-based metric that can effectively evaluate clustering
performance, is chosen to be the metric of the k-means model
and used as the objective function of BO-GP. It measures how
similar a data point is to other data points within the same
cluster and how different the data point is from the data points
in other clusters [43].

2) Reduce Class-Imbalance by Oversampling: Class-
imbalance issues often occur in network trafﬁc data, since
the percentage of normal samples is often much larger than
the percentage of attack samples in real-world network data,
resulting in biased models and low detection rate [48].

Class-imbalance problems are mainly solved by resampling
methods, including random sampling and synthetic minority
oversampling techniques (SMOTE), which can create new
instances for the minority classes to balance the dataset [48].
Unlike random sampling, which simply replicates the instances
and may cause over-ﬁtting, SMOTE [49] can synthesize high-
quality instances based on the concept of KNN; thus, SMOTE
is chosen in the proposed IDS to solve class-imbalance. For
each instance X in the minority class, assuming Xi is a sample
randomly selected from the k nearest neighbors of X, a new
synthetic instance Xn can be denoted by [28]:

Xn = X + rand(0, 1) ∗ (Xi − X) , i = 1, 2, · · · , k,

(3)

where rand(0, 1) represents a random number in the range of
(0, 1). Thus, SMOTE is utilized in the proposed IDS to create
high-quality instances for minority classes.

3) Data Normalization: After implementing the k-means
and SMOTE methods to obtain a representative and bal-
anced dataset, several additional data pre-processing steps
are completed for the next steps. Firstly, the network trafﬁc
datasets are encoded with a label encoder used to transform
categorical features into numerical features to support
the
inputs of ML algorithms, because many ML algorithms cannot
support string features directly. After that, the network datasets
are normalized by the Z-score algorithm since the collected
features in network trafﬁc data often have largely different
ranges, and ML models often perform better on normalized
datasets [20]. An unnormalized dataset with largely different
feature scales may result in a biased ML model that only lays
emphasis on large-scale features. Through the Z-score method,
the features can be normalized to have a mean of 0 and a
standard deviation of 1. By implementing the Z-score method,
each normalized feature value, xn, is denoted by:

xn =

x − µ
σ

,

(4)

where x is the original feature value, µ and σ are the mean
and standard deviation of the feature values, respectively.

C. Feature Engineering

A high-quality and highly representative dataset can be gen-
erated after data pre-processing. On the other hand, obtaining
an optimal feature list by appropriate feature engineering can
also improve the quality of datasets for more accurate and
efﬁcient model learning. A comprehensive feature engineering
method that consists of IG, FCBF, and KPCA, is implemented
before ML model training to remove irrelevant, redundant, and
noisy features while retaining the important features [50].

1) Feature Selection by Information Gain: As a common
feature selection (FS) method,
the information gain (IG)
method is used to select important features. IG, the amount
of information gained or the changes in entropy, can be used
to measure how much information a feature can bring to the

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

8

targeted variable [51]. IG is chosen in the proposed system
since it can obtain an importance score for each feature at a
fast speed due to its low computational complexity of O(n)
[51]. The importance score of each feature enables us to select
the most relevant features for the task. Assuming T is the
target variable, for each feature denoted by a random variable
X, the IG value of using the feature X, is denoted by [51]:

IG(T |X) = H(T ) − H(T |X),

(5)

where H(T ) is the entropy of the target variable T , and
H(T |X) is the conditional entropy of T over X.

Therefore, the feature importance of a feature X, or the
correlation between X and the target T , can be represented
by the IG value of T over X, IG(T |X). A feature X is
considered more important to the target T than another feature
Y if IG(T |X) > IG(T |Y ) [51].

To implement the IG-based FS method, the importance of
each feature is calculated based on eq. (5) and normalized
to have a sum of 1.0, denoting the relative importance. The
features are then ranked by their importance and are selected
from top to bottom until the total importance of selected
features reaches the correlation threshold, α. The remaining
features, with the total feature importance less than 1 − α, are
discarded. To obtain an appropriate correlation threshold, α is
optimized by BO-GP that uses the validation accuracy as the
objective function for HPO. After this process, the irrelevant
features are eliminated, and a reduced number of informative
features with high importance are obtained for the next step.
2) Fast Correlation Based Filter (FCBF): Although the
IG-based FS method eliminates the unimportant features to
reduce time complexity, many redundant features still exist.
Feature redundancy may increase time and space complexity,
and degrade model performance by increasing the probability
of being misled by noisy data, as well as increasing the risk
of over-ﬁtting [50]. Thus, removing redundant features by
calculating the correlations of input features is beneﬁcial for
model performance and efﬁciency.

Among the correlation-based FS algorithms,

the fast
correlation-based ﬁlter (FCBF) [52] algorithm is selected
since it has shown great performance on high dimensional
datasets by effectively removing redundant features while
retaining informative features, and has a low time complexity
of O(nlogn) [53]. In FCBF, the symmetrical uncertainty (SU)
is calculated to measure the correlations between features by
normalizing the IG values [52]:

SU (X, Y ) = 2

(cid:20)

IG(X|Y )
H(X) + H(Y )

(cid:21)

.

(6)

SU (X, Y ) is in the range [0, 1] with the value 1 indicating
a perfect correlation between the two features X and Y , while
the value 0 indicates the two features are fully independent.

The FCBF method searches the features in the feature space
based on their SU values until the entire feature space has
been explored. The highly correlated features are regarded as
redundant features, and only one of them will be retained.

In the proposed FS approach, the SU value of each pair
of features is calculated as their correlations. The correlation

threshold, α, is also optimized by BO-GP. When the corre-
lation value between two features is larger than α, the one
with higher feature importance is retained while the other
is discarded. The correlation calculation and feature deletion
procedures are repeated until each pair of features in the
feature list are not highly correlated (SU <= α). The FS
model that combines the IG method and the FCBF algorithm
is named IG-FCBF.

3) Kernel Principal Component Analysis (KPCA): Al-
though utilizing IG-FCBF can return a better feature set
it
than only using IG, FCBF has a major limitation that
only calculates the correlation between pairs of features, but
does not consider correlations among three or more different
features, resulting in undiscovered noisy features [53]. On the
other hand, the unsupervised learning models in the anomaly-
based IDS are more sensitive to appropriate features than
supervised learning models since they rely on the changes
of feature values instead of the ground truth labels to process
data [43] [50]. Hence, kernel principal component analysis
(KPCA) is utilized after implementing the IG-FCBF method
for the anomaly-based IDS.

PCA [54] is a feature extraction algorithm that uses orthog-
onal transformations to transform a set of correlated features
onto a smaller subset of uncorrelated features, named principal
components. KPCA is an improved version of PCA that uses
the kernel trick to learn a non-linear function or decision
boundary to reduce the dimensionality of non-linear data [55].
KPCA is selected due to its adaptability to non-linear data, as
well as its capacity to reduce computational complexity, the
risk of over-ﬁtting, and distracting noise [50].

Additionally, the two essential hyper-parameters in KPCA,
the number of extracted features and the kernel type, are
optimized by the BO-GP method using validation accuracy as
the objective function to improve the model performance. It is
efﬁcient for BO-GP to optimize these discrete and categorical
hyper-parameters. KPCA is used with IG-FCBF to construct
the IG-FCBF-KPCA method to obtain an optimal dataset with
extracted features as the input of the anomaly-based IDS.

D. The Proposed Hybrid IDS

IDSs are mainly classiﬁed as signature-based IDSs and
anomaly-based IDSs. Signature-based IDSs are designed to
detect the known attack patterns by training supervised ML
models on labeled datasets. However,
they often lack the
capacity to detect new attack patterns that are not previously
stored in the databases [56]. On the other hand, anomaly-based
IDSs can distinguish unknown attack data from normal data
by unsupervised learning algorithms based on the assumption
that new attack data are more statistically similar to the known
attack data than normal data, but they often return many false
alarms [57]. Thus, a hybrid IDS that consists of a signature-
based IDS and an anomaly-based IDS is proposed in this paper
to effectively detect both known and zero-day attacks.

1) The Signature-based IDS: After the data pre-processing
and feature engineering procedures,
the obtained labeled
datasets are trained by an ensemble learning model to develop
a signature-based IDS. In the proposed signature-based IDS,

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

9

four tree-based ML algorithms — decision tree (DT), random
forest (RF), extra trees (ET), and extreme gradient boosting
(XGBoost) — are selected as the base learners.

DT [58] is a common ML algorithm that uses a tree-
structure to ﬁt data and make predictions. DT algorithms
have multiple hyper-parameters that require tuning, including
the tree depth, minimum sample split, minimum sample leaf,
maximum sample nodes, and minimum weight fraction leaf,
etc. [45]. RF [59] is an ensemble learning model that uses
the majority voting rule to combine multiple decision tree
classiﬁers, while ET [60] combines a collection of randomized
decision trees built on different subsets of a dataset. XGBoost
[61] is a gradient-boosted decision tree (GBDT) based al-
gorithm designed for speed and performance improvement.
For RF, ET, and XGBoost, the hyper-parameters of DT are
also the important hyper-parameters for them because they
are all constructed by integrating multiple DTs. Additionally,
they have an essential hyper-parameter that needs to be tuned,
being the number of base DTs to be built for each model,
“n estimators”, which has a direct impact on model perfor-
mance. XGBoost has another hyper-parameter, the learning
rate, which determines the convergence speed [45].

Assuming the number of instances is n, the number of
features is f , and the number of DTs in ensemble models is t,
the time complexity of DT, RF, ET, and XGBoost is O(n2f ),
O(n2√

f t), O(nf t), and O(nf t), respectively [7].

The algorithm choosing reasons are as follows [7] [62]:
1) RF, ET, and XGBoost are all ensemble models that
combine multiple DTs and can effectively work on non-
linear and complex data to which network trafﬁc data
belongs; hence, they often perform better than other
ML algorithms, like na¨ıve Bayes (NB) and KNN, which
often do not perform well on complex datasets.

2) They enable parallel execution, which signiﬁcantly re-
duces model training time and improves efﬁciency.
3) They calculate feature importance during the model
training process, which is beneﬁcial for feature engi-
neering procedures.

4) The tree-based algorithms have randomness in their
construction process, which enables us to build a robust
ensemble model
that has better generalizability than
using other ML algorithms.

After obtaining the four tree-based ML models, they are
combined using stacking, an ensemble learning method, to
improve model performance because the generalizability of a
combination of multiple base learners is usually better than
that of a single model [63]. Stacking is a standard ensemble
learning technique that uses the output labels estimated by
four base learners (DT, RF, ET, and XGBoost) as the input
features to train a strong meta-learner that makes the ﬁnal
prediction [63]. Using stacking can learn the information from
all four base learners to reduce the errors of single learners
and obtain a more reliable and robust meta-classiﬁer. In the
proposed system, the best-performing one among the four base
models is chosen as the algorithm to build the meta-learner
because it is most likely to achieve the best performance.

The important hyper-parameters of the four tree-based ML
algorithms are optimized by a HPO method, BO with tree-

Parzen estimator (BO-TPE). BO-TPE creates two density
functions, l(x) and g(x), to act as the generative models for
variables. With a pre-speciﬁed threshold y∗ to separate the
relatively good and poor results, the objective function of TPE
is modeled by the Parzen windows [45]:

p(x|y, D) =

(cid:26) l(x),
g(x),

if y < y∗
if y > y∗

,

(7)

where l(x) and g(x) indicate the probability of detecting the
next hyper-parameter value in the well-performing regions
and in the poor-performing regions, respectively. BO-TPE
detects the optimal hyper-parameter values by maximizing
the ratio l(x)/g(x). The Parzen estimators are organized in
a tree structure, so the speciﬁed conditional dependencies
of hyper-parameters can be retained. Additionally, BO-TPE
can optimize all types of hyper-parameters effectively [45].
Therefore, BO-TPE is used to optimize the hyper-parameters
of the tree-based ML models that have many hyper-parameters.
2) The Anomaly-based IDS: The proposed signature-based
IDS can detect multiple types of known attacks effectively.
However, attackers can still carry out zero-day attacks that
are not included in the known attack patterns and can be
misclassiﬁed as normal states. Therefore, the instances la-
beled “normal” by the signature-based IDS will be considered
suspicious instances because some of them can be unknown
attack samples. A novel anomaly-based IDS architecture is
then developed to identify zero-day attacks by processing the
suspicious instances.

After feature engineering, the optimized dataset obtained
from the output of the IG-FCBF-KPCA method is used to train
the anomaly-based IDS. The ﬁrst tier of the proposed anomaly-
based IDS comprises the cluster labeling (CL) k-means devel-
oped by improving the k-means model introduced in Section
IV-B1. Since there are millions of instances collected under
many different situations in network trafﬁc datasets, a sufﬁ-
cient number of clusters should be used to distinguish between
normal and attack data. The main procedures of the proposed
CL-k-means method are as follows:

1) Split the dataset into a sufﬁcient number of clusters using

k-means.

2) Label each cluster by the majority label of data samples.
In each cluster, the class label to which most of the
instances belong, “normal” or “attack”, is assigned to
this cluster.

3) Label each sample in the test set as “normal” or “attack”
based on the label of the cluster that this instance is
classiﬁed into by k-means.

4) For each test sample i that is classiﬁed into a cluster,
calculate the percentage of majority class samples in this
cluster as the conﬁdence or clustering probability, pi.
5) Optimize the number of clusters (k) and distance metric
as the major hyper-parameters of k-means, by the BO-
GP algorithm to obtain the optimal CL-k-means model.
The validation accuracy on the test set is used as the
objective function for BO-GP.

K-means is selected to distinguish between attack and
normal data mainly due to the real-time requirements of
vehicle-level systems. K-means is computationally faster than

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

10

most other clustering algorithms because it has a linear time
complexity of O(nkt), where n is the data size, k is the
number of clusters, and t is the number of iterations [42].
The model training time is further reduced by using mini-
batch k-means, which uses randomly sampled subsets as mini-
batches in each training iteration [64]. Additionally, k-means
guarantees convergence and easily adapts to new samples.

To increase the detection rate and reduce the false alarm rate
of the CL-k-means method, the second tier of the proposed
anomaly-based IDS uses two biased classiﬁers to reduce the
false negatives (FNs) and false positives (FPs), respectively.
Biased classiﬁers are developed by the following procedures:

1) Collect the FNs and FPs obtained from the training set

using the proposed CL-k-means method.

2) Select the best-performing singular supervised learning
in the signature-based IDS (e.g., RF) as the

model
algorithm to construct biased classiﬁers.

3) Train the ﬁrst biased classiﬁer, B1, on all the FNs along
with the same amount of randomly sampled normal data
to build a model that aims to reduce FNs.

4) Train the second biased classiﬁer, B2, on all the FPs
along with the same amount of randomly sampled attack
data to build a model that aims to reduce FPs.

After implementing the proposed CL-k-means model, each
data sample whose clustering probability (pi) is less than
a threshold p∗
is regarded as an uncertain instance. The
i ,
threshold p∗
i is a continuous variable and has been optimized
to be 0.933 by BO-GP that uses the validation accuracy as the
objective function. After obtaining the two trained classiﬁers,
the uncertain instances will be passed to B1 (if labeled
“normal” by the CL-k-means) or B2 (if labeled “attack” by
the CL-k-means) to obtain its ﬁnal classiﬁcation result.

The proposed anomaly-based IDS is constructed under the
assumption that new attack patterns are unknown and future
incoming data samples are unlabeled; hence, only the FNs
and FPs obtained during the training phase are used to build
biased classiﬁers. This enables the proposed IDS to detect new
attack patterns without additional procedures that are difﬁcult
to perform, like constant data labeling and model updates.

Compared to other unsupervised anomaly detection algo-
rithms like isolation forest (iForest) and one-class SVM (OC-
SVM) [65], the proposed CL-k-means method with biased
classiﬁers has the following advantages to achieving high
accuracy and efﬁciency:

1) The proposed CL-k-means model has the capacity of
using a sufﬁcient number of clusters to model the data
samples with various attack and normal patterns. This
makes the proposed method have better generalizability
and data pattern modeling capability than other outlier
detection methods, like iForest and OC-SVM, which are
mostly binary models.

2) The number of clusters in CL-k-means, k, is automat-
ically optimized by BO-GP. This enables the proposed
model to automatically ﬁt different datasets and tasks
according to the complexity of data patterns.

3) The main difﬁculty of unknown attack detection is
that unsupervised learning models often return more

misclassiﬁed samples than supervised learning models.
Thus, using the biased classiﬁers can effectively reduce
the FPs and FNs because they can learn the patterns
of misclassiﬁed data samples that are difﬁcult to be
identiﬁed by the CL-k-means.

4) The use of the cluster probability, pi, can greatly im-
prove the model efﬁciency. This is because the new
samples that are very similar to existing attack or
normal patterns (with high conﬁdence) can be labeled
directly, and only the uncertain samples (with relatively
low probability) are passed to the biased classiﬁers for
further identiﬁcation.

5) The use of mini-batch k-means can signiﬁcantly reduce
the execution time of the MTH-IDS to meet the real-
time requirements of IoV.

However, certain attack patterns are very similar to nor-
mal patterns, which makes it difﬁcult to distinguish them.
Additionally, the samples collected under certain legitimate
network events, like crowd events, may still be misclassiﬁed
as attack samples because the new patterns they have are
largely different from existing normal patterns. Additionally,
although k-means is more suitable for IoV IDS development
than other unsupervised learning algorithms due to its low
complexity, the data distribution modeling limitation of k-
means is another potential issue to be better addressed [42].
If time and budget permits, k-means can be replaced by other
clustering algorithms with the same cluster labeling technique
based on the speciﬁc data shape and distribution to further
improve the system performance. Online learning techniques
that can keep updating learning models based on the new
attack patterns may also improve the generalizability and
accuracy of the IDS, which will be our future work.

E. Runtime Complexity

The training process of the proposed MTH-IDS can be done
at a server machine with high computational speed, while the
testing process should be implemented in vehicle systems.
Developing models with low runtime complexity enables the
proposed IDS to reduce the latency of vehicle systems and
meet real-time requirements. In the implementations, each test
sample will be passed through the stacking model constructed
with four tree-based algorithms, the CL-k-means method, and
one of the biased classiﬁers. Since the runtime complexity of
DT is O(df ) and the runtime complexity of RF, ET, XGBoost
is O(df t), where d is the maximum depth of the trees, f is the
number of features and t is the number of trees, the maximum
runtime complexity of the signature-based IDS is only O(df t)
[66]. For the proposed CL-k-means method in the anomaly-
based IDS, its runtime complexity is O(f k), where k is the
number of clusters [67]. The biased classiﬁer in the anomaly-
based IDS is also the best-performing tree-based algorithm, so
its maximum runtime complexity is also O(df t).

Therefore, the maximum overall runtime complexity of the
proposed IDS is at a low-level, only O(2df t + f k), since the
values of d, f , t, and k, are a few dozens at most. The model
test time will be calculated in the experiments to evaluate the
feasibility of the proposed IDS in vehicle systems.

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

11

F. Validation Metrics

To evaluate the generalizability of the proposed framework
and avoid over-ﬁtting, both cross-validation and hold-out
methods are used in the known attack detection experiments.
Speciﬁcally, the train-test-validation split and model evaluation
procedures for each dataset are as follows:

1) Use 70%-30% train-test split to generate a training set
with 70% of data samples and a test set with 30% of
data samples. The test set will remain untouched before
the ﬁnal hold-out validation.

2) Implement 10-fold cross-validation on the training set
to evaluate the proposed model on different regions of
the dataset. In each iteration/fold of the 10-fold cross-
validation, 90% of the original training set is used for
model training, and 10% of the original training set is
used as the validation set for model testing.

3) Test the trained model obtained from Step 2 on the
untouched test set to evaluate the model performance
on a new dataset.

70%-30% train-test split and 10-fold cross-validation were
chosen because they are standard and sufﬁcient numbers to
construct powerful validation methods to avoid over-ﬁtting
and concept drift issues [68]. If the proposed method can
accurately detect intrusions in both cross-validation and hold-
out validation, there are no underﬁtting or overﬁtting issues
[69].

On the other hand, hold-out validation is used to evaluate
the proposed system for unknown attack detection. For each
attack type as a zero-day attack, a validation set consisting
of all the instances of this attack type and the same amount
of randomly sampled normal data is generated; all the other
samples are used as the training set. Therefore, the validation
results can be used to evaluate whether the proposed system
has the capacity to detect the patterns of each type of unknown
attack. This validation process is based on the assumption that
new attack data is more statistically similar to certain other
known attack data than normal data [57].

Several metrics, including accuracy (Acc), detection rate
(DR), false alarm rate (FAR), and F1-score, are used to
comprehensively evaluate the performance of the proposed
IDS [28]. By calculating the true positives (TPs), true negatives
(TNs), false positives (FPs), and false negatives (FNs) of
the proposed model, the used metrics are calculated by the
following equations [28]:

Acc =

T P + T N
T P + T N + F P + F N

DR =

F AR =

T P
T P + F N

F P
T N + F P

F 1 =

2 × T P
2 × T P + F P + F N

(8)

(9)

(10)

(11)

Model execution time, calculated by the average of the
training and validation time in the 10-fold cross-
model
validation or hold-out validation, is used to evaluate model

efﬁciency. An efﬁcient IDS should be able to achieve a high
F1-score and low execution time simultaneously.

V. PERFORMANCE EVALUATION

A. Experimental Setup

To develop the proposed MTH-IDS, the feature engineering
and ML algorithms were implemented using the Pandas [70],
Scikit-learn [71], Xgboost [72] libraries in Python, while the
HPO methods were implemented by extending the Skopt [73]
and Hyperopt [74] libraries1. The experiments were carried
out on a Dell Precision 3630 Tower machine with an i7-8700
central processing unit (CPU) (6-Core, 3.20 GHz) and 16
Gigabytes (GB) of memory, and a Raspberry Pi 3 machine
with a BCM2837B0 64-bit CPU and 1 GB of memory,
representing a server machine for model training and a vehicle-
level machine for model testing, respectively.

The experiments are divided into three parts, one for the
known intrusion detection by evaluating the signature-based
IDS component on the labeled datasets, one for unknown
intrusion detection by evaluating the anomaly-based IDS com-
ponent on the unlabeled datasets, and one for the entire model
evaluation by analyzing the CPU resource usage on a vehicle-
level machine.

B. Data Description

For the purpose of intra-vehicle network IDS development,
the ﬁrst used dataset is the CAN-intrusion-dataset proposed in
2018 [9]. The dataset is generated by logging CAN trafﬁc
via the OBD-II port of a vehicle when CAN attacks are
launched. The features of this dataset include timestamp, CAN
ID, data length code (DLC), and the 8-bit data ﬁeld of CAN
packets (DATA[0]-DATA[7]). Since the feature “timestamp”
has a strong correlation with cyber-attack simulation periods
and can lead to biased models and results, this feature was
removed from the feature space. As the authors in [9] created
the CAN-intrusion-dataset by injecting attacks into random
CAN IDs, this CAN ID feature is retained. Based on the CAN
packet structure shown in Fig. 1, ten features extracted from
the identiﬁer ﬁeld and data ﬁeld of CAN packets, including
CAN ID, DLC, and DATA[0]-DATA[7], were preliminarily
selected for IDS development. The attack types of the CAN-
intrusion-dataset are shown in Table IV. Moreover, the label
distributions of the original dataset, the training set, and the
test set are shown in Table IV. As the minority classes have
large numbers of samples (at least 491,847 samples), SMOTE
is not required for balancing the CAN-intrusion-dataset.

For external network IDS development, there is a short-
age of public IoV benchmark datasets due to populariza-
tion, privacy, and commercialization issues [21] [75] [76].
On the other hand, wireless local area networks (WLANs)
and cellular networks are common communication strategies
for IoV and connected vehicles, so the attacks launched on
conventional computer networks can be considered similar
to the intrusions carried out on external vehicular networks

1code for the major modules is available at: https://github.com/Western-

OC2-Lab/Intrusion-Detection-System-Using-Machine-Learning

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

12

TABLE IV
CLASS LABEL AND SIZE OF THE CAN-INTRUSION-DATASET

Class Label

Normal
DoS
Fuzzy
RPM Spooﬁng
Gear Spooﬁng

Original
Number of
Samples
14,037,293
587,521
491,847
654,897
597,252

Number of
Training Set
Samples
9,826,105
411,265
344,293
458,428
418,076

Number of
Test Set
Samples
4,211,188
176,256
147,554
196,469
179,176

TABLE V
CLASS LABEL, ATTACK TYPE, AND SIZE OF THE CICIDS2017 DATASET

Corresponding
Attack Type
in Table II
[78]
-
Botnets

Original
Number of
Samples

2,273,097
1,966

Number of
Training Set
Samples After
Balancing
1,591,168
100,000

Number
of Test
Set
Samples
681,929
590

DoS

380,699

266,489

114,210

Snifﬁng

158,930

Brute-Force

13,835

Inﬁltration

36

111,251

100,000

100,000

47,679

4,150

11

Web Attack

2,180

100,000

654

Class Label

BENIGN
Bot
DDoS
DoS
GoldenEye
DoS Hulk
DoS
Slow-httptest
DoS Slowloris
Heartbleed
Port-Scan
SSH-Patator
FTP-Patator
Inﬁltration
Web Attack –
Brute Force
Web Attack –
Sql Injection
Web Attack –
XSS

[21] [77]. Therefore, many research projects and papers [19] -
[25] develop external vehicular network IDSs using general
network security datasets,
including KDD-99, NSL-KDD,
Kyoto 2006+, UNSW-NB15, and CICIDS2017 [77]. Among
these cyber-security datasets, CICIDS2017 [11] is the most
representative dataset of current external networks because it
is the most state-of-the-art dataset and contains more features,
instances, and cyber-attack types than other datasets [21].
Thus, the network trafﬁc ﬂow data in the CICIDS2017 dataset
is chosen in the proposed MTH-IDS to represent the complex
external vehicular network data. Moreover, to better relate the
CICIDS2017 dataset to IoV applications, we have associated
each type of attack in the CICIDS2017 dataset with the exter-
nal vehicular network threats described in Table II based on
the detailed analysis of the CICIDS2017 dataset in [78]. The
speciﬁcs of the CICIDS2017 dataset and the corresponding
external vehicular attack types are shown in Table V. Since
the Bot, brute-force, inﬁltration, and web attack classes are
minority classes with small numbers of samples (from 36
to 13,835), the SMOTE method described in Section IV-B2
was implemented to synthesize more samples to enable the
minority classes to have at least 100,000 samples. Addressing
class-imbalance can avoid obtaining biased models with low
attack detection rates.

TABLE VI
PERFORMANCE EVALUATION OF CLASSIFIERS ON THE
CAN-INTRUSION-DATASET

Method

KNN [12]
SVM [12]
XYF-K [13]
SAIDuCANT [14]
SSAE [17]
DCNN [18]
LSTM-Autoencoder
[19]
MTH-IDS

Acc
(%)
97.4
96.5
99.1
87.21
-
99.93

99.0

DR
(%)
96.3
95.7
98.39
86.66
98.5
99.84

99.0

FAR
(%)
5.3
4.8
0.0
1.76
2.0
0.16

0.0

F1

0.934
0.933
0.9879
0.92
0.98
0.9991

0.99

Execution
Time (S)
911.6
13765.6
-
-
-
-

-

99.999

99.999

0.0006

0.99999

365.3

TABLE VII
PERFORMANCE EVALUATION OF CLASSIFIERS ON THE CICIDS2017
DATASET

Method

KNN [11]
RF [11]
SU-IDS [26]
STDeepGraph [27]
DBN [79]
GAN-RF [80]
DeepCoin [81]
Multi-SVM [82]
PCA-RF [83]
MTH-IDS
(Without FS &
HPO)
MTH-IDS
(Multi-Class
Model)
MTH-IDS
(Binary Model)

Acc
(%)
96.3
98.82
99.13
99.4
98.95
99.83
99.811
98.55
99.6

DR
(%)
96.2
98.8
99.65
98.6
95.82
98.68
94.10
98.22
99.6

FAR
(%)
6.3
0.145
1.4
1.3
4.19
7.24
0.986
0.41
1.0

F1

0.963
0.988
-
-
0.9581
0.9504
-
0.983
0.996

Execution
Time (S)
15243.6
1848.3
-
-
-
-
-
34896.5
-

99.861

99.753

0.110

0.99860

5238.4

99.879

99.818

0.101

0.99879

1563.4

99.895

99.806

0.084

0.99895

478.2

C. Performance Analysis of Known Intrusion Detection

To evaluate the proposed IDS for known intrusion detection,
the ML models in the signature-based IDS are trained and
tested on the two labeled datasets that represent intra-vehicle
and external vehicular network trafﬁc data. The results of 10-
fold cross-validation of the proposed models on the CAN-
intrusion dataset [9] and the CICIDS2017 dataset [11] are
shown in Tables VI and VII, respectively.

As shown in Table VI, after utilizing the proposed IG-
FCBF feature selection method with the optimized correlation
threshold (α = 0.9) to select the top four signiﬁcant features
(“CAN ID”, “DATA[5]”, “DATA[3]”, and “DATA[1]”), the
proposed signature-based IDS can reach high accuracy of
99.999% on the CAN-intrusion dataset. The proposed method
is compared with recent promising approaches proposed in
the literature [12]–[14], [17]–[19], as shown in Table VI. As
the attack and normal patterns in this dataset can be obviously
distinguished, most of the compared methods also achieve high
accuracy. The authors in [18] proposed a deep convolutional
neural network (DCNN) method that can achieve a high
average F1-score of 0.9991, but it requires the model training
machines to have graphics processing units (GPUs), making
it difﬁcult to be used in vehicle-level systems due to budget
constraints. For six other compared approaches proposed in the
recent literature, our proposed system achieves at least 0.89%
accuracy and F1-score improvement.

The experimental results on the CICIDS2017 dataset are

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

13

shown in Table VII. By implementing the proposed IG-FCBF
method with the optimized correlation threshold (α = 0.9) to
select 20 features from 80 original features and using HPO
methods to obtain optimized ML models, the F1-score of
the proposed IDS has improved from 99.861% to 99.879%,
and the execution time has decreased by 70.2%, as shown in
Table VII. This justiﬁes the proposed FS method and the BO-
TPE method can greatly improve the system efﬁciency and
slightly improve the model accuracy. In addition to the multi-
classiﬁcation results used to evaluate the IDS’s capacity to
detect various types of attacks, the IDS is also implemented to
train a binary classiﬁcation model that can distinguish between
normal and abnormal network trafﬁc data and return one of
these two labels. As shown in Table VII, the proposed IDS
reaches 99.895% accuracy and saves 69.4% of the execution
time by training the binary classiﬁcation model. Binary clas-
siﬁers and multi-classiﬁers can be chosen according to the
speciﬁc needs of users.

Although there are many existing works that evaluate their
models on the CICIDS2017 dataset, most of them have
different or inexplicit validation conﬁgurations. Nevertheless,
the proposed model is quantitatively compared with recent
promising methods that achieve good performance on the
CICIDS2017 dataset and have a similar validation conﬁgura-
tion, proposed in the literature [11], [26]-[27], [79]-[83]. The
approaches proposed in the literature [79]-[81] have achieved
high accuracy (98.95%-99.83%), but a relatively low detection
rate (94.10%-98.68%) and F1-score (0.9504-0.9581) due to the
imbalanced dataset. Other methods proposed in the literature
[11], [26]-[27], [82]-[83] have also achieved high accuracy or
F1-scores, but still slightly lower than our proposed model.
To summarize, even though the comparison with existing
the proposed
approaches is not a straightforward process,
system shows better performance by at
least achieving a
0.279% higher F1-score than of the same-level validation
conﬁguration approaches by quantitative comparison.

Therefore, the experimental results show that the proposed
IDS can efﬁciently separate normal and malicious network
trafﬁc data and effectively detect various types of known
cyber-attacks in vehicle systems.

D. Performance Analysis of Unknown Intrusion Detection

At this stage, all the models in the anomaly-based IDS are
trained for binary classiﬁcation by labeling the instances of all
attack types as “attack” and normal instances as “normal”. In
the proposed system, after being evaluated by the signature-
based IDS, all data samples of known attack types will be re-
turned, and other normal instances will be labeled “suspicious”
and passed to the anomaly-based IDS to determine whether
any unknown attacks exist.

For the CAN-intrusion-dataset that represents intra-vehicle
network trafﬁc data, each type of CAN attack is regarded as
a new attack type in each experiment. The evaluation results
of unknown CAN attack detection are shown in Table VIII.
For DoS, gear spooﬁng, and RPM spooﬁng attack types, the
proposed system can reach 100% detection rates, very low
false alarm rates (0.0%-0.449%), and very high F1-scores

TABLE VIII
PERFORMANCE EVALUATION ON EACH TYPE OF UNKNOWN ATTACK OF
THE CAN-INTRUSION-DATASET

Attack Type

DoS
Fuzzy
Gear Spooﬁng
RPM Spooﬁng
Average (MTH-IDS)
Average (CL-k-means)

Validation
Instances
1,289,386
1,193,712
1,299,117
1,356,762
5,138,977
5,138,977

DR (%)

FAR (%)

F1

100.0
73.053
100.0
100.0
93.740
79.233

0.0
0.057
0.449
0.003
0.128
0.261

1.0
0.84389
0.99736
0.99998
0.96307
0.82643

TABLE IX
PERFORMANCE EVALUATION ON EACH TYPE OF UNKNOWN ATTACK OF
THE CICIDS2017 DATASET

Attack Type

Bot
DDoS
DoS GoldenEye
DoS Hulk
DoS Slow-httptest
DoS Slowloris
FTP-Patator
Heartbleed
Inﬁltration
Port-Scan
SSH-Patator
Web Attack – Brute
Force
Web Attack – Sql
Injection
Web Attack – XSS
Average (MTH-IDS)
Average (CL-k-means)

Validation
Instances
3,932
256,054
20,586
462,146
10,998
11,592
15,876
22
72
317,860
11,794

3,014

42

1,304
1,115,292
1,115,292

DR (%)

FAR (%)

F1

63.276
62.697
83.931
67.440
76.687
83.834
51.298
100.0
72.222
98.962
95.828

89.516

95.238

3.681
75.943
72.682

21.669
11.698
20.461
11.806
19.094
7.902
12.686
18.182
5.556
17.849
23.351

0.68426
0.71902
0.82127
0.75248
0.78339
0.87447
0.62564
0.91667
0.81250
0.91288
0.87443

17.319

0.86558

23.810

0.86957

14.417
13.882
15.357

0.06233
0.80013
0.77305

(more than 0.997). However, the DR and F1 for the fuzzy
attack are much lower (73.053% and 0.84389). This is because
the feature values of the fuzzy attack packets are random nu-
merical values, and certain random values can be very similar
to normal packets, making it difﬁcult for unsupervised learning
algorithms to distinguish them. Moreover, the performance of
the proposed anomaly-based IDS is compared to the CL-k-
means model without biased classiﬁers. Table VIII shows that
the F1 score of the proposed MTH-IDS on the CAN-intrusion-
dataset can be largely improved from 0.82643 to 0.96307 by
implementing the two biased classiﬁers after the CL-k-means
model. To summarize, the proposed system can effectively
detect most unknown attacks on intra-vehicle networks except
fuzzy attacks.

On the other hand, training on more different types of
attack samples enables us to design a more comprehensive
IDS that can detect more unknown attack types effectively
[84]. Therefore, several experiments were conducted on the
CICIDS2017 dataset that contains data samples of 14 different
common cyber-attacks types to illustrate potential attacks
launched on external vehicular networks. In each experiment
of the validation process, each type of attack is regarded as
an unknown attack, and the results are shown in Table IX.

From Table IX, it can be seen that the proposed system
exhibits different performances when applied to the experi-
ments of different types of unknown attacks. By implementing
the proposed methods, the false alarm rates for most of the
attack types are at a low level of less than 20%. The detection

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

14

TABLE X
PERFORMANCE EVALUATION ON THE UNTOUCHED TEST SET

Dataset
CAN-intrusion-dataset
CICIDS2017

Acc (%)
99.99
99.88

DR (%)
100.0
99.77

FAR (%)
0.00005
0.10

F1
0.9999
0.9988

TABLE XI
MODEL EVALUATION ON A VEHICLE-LEVEL SYSTEM

System
Component

Z-score
KPCA
Stacking
CL-k-means
Biased
Classiﬁers
Sum

Dataset 1:
Avg Test
Time (ms)
0.028
0.005
0.389
0.145

0.007

0.574

Dataset 2:
Avg Test
Time (ms)
0.031
0.009
0.297
0.157

0.015

0.509

Dataset 1:
Model
Space (MB)
-
0.002
2.02
0.48

0.11

2.61

Dataset 2:
Model
Space (MB)
-
0.006
14.36
0.78

1.06

16.21

rates for the “Heartbleed”, “Port-Scan”, “SSH-Patator”, “Web
Attack – Brute Force”, and “Web Attack – Sql Injection”
attacks are high (from 89.516% to 100%), while the detection
rates for other types of attacks are relatively lower (from
51.298% to 83.931%). The F1-scores for most of the attack
types are larger than 0.80. The only type of attack that the
proposed system cannot detect effectively is the “Web Attack
– XSS” whose results show a very low F1-score (0.062),
because their data distribution is very similar to normal data
distributions. The average F1-score of the proposed MTH-IDS
on all the attacks is 0.80013, which is higher than the CL-k-
means model without biased classiﬁers (0.77305).

Thus, the proposed IDS can detect most of the previously-
unseen types of attacks with a relatively high detection rate
and a relatively low false alarm rate on both intra-vehicle
and external vehicular networks. Nevertheless, there is still
some room for improvement since effectively detecting zero-
day attacks is still an unsolved research problem.

E. Vehicle-Level Model Evaluation and Discussion

The proposed IDS with all trained models are tested on
Raspberry Pi 3, a vehicle-level machine, to evaluate its feasi-
bility in vehicular environments. Moreover, implementing the

Fig. 4. Confusion matrix for the test set of CAN-intrusion-dataset.

Fig. 5. Confusion matrix for the test set of CICIDS2017 dataset.

proposed model on the untouched test sets can evaluate its
generalizability.

The experimental results on the test sets are shown in
Table X. As shown in Table X, the F1-scores of the proposed
IDS on the 30% test sets of the CAN-intrusion-dataset and
CICIDS2017 dataset are 99.99% and 99.88%, respectively.
Moreover, the confusion matrices of evaluating the proposed
method on the test sets of the CAN-intrusion-dataset and
CICIDS2017 dataset are shown in Fig. 4 and Fig. 5, respec-
tively. For the CAN-intrusion-dataset, as shown in Fig. 4,
the proposed method can accurately detect all the DoS, RPM
spooﬁng, and gear spooﬁng attack samples, and only has two
false alarms for the fuzzy attack detection. These results are in
line with other similar works from the literature that used the
same dataset. For example, the authors in [18] also achieved
high accuracy of 99.93%. The main reason for achieving
high accuracy is that the large difference between the attack
and normal patterns in the CAN-intrusion-dataset can be
obviously distinguished. For the CICIDS2017 results shown
in Table X and Fig. 5, the attack patterns are more difﬁcult
to be distinguished than the CAN-intrusion-dataset, but the
classiﬁcation error rate is still at a very low level (0.12%),
except for the inﬁltration attack type that has 7 misclassiﬁed
samples out of 11 test samples. This is because the number
of data samples for the inﬁltration attack is only 36, which is
insufﬁcient to train an effective classiﬁer to accurately identify
this attack. Nevertheless, the proposed model can accurately
detect other attacks with an overall F1-score of 99.88%. As
the test sets were untouched before the hold-out validation,
the high performance indicates the strong generalizability of
the proposed framework on new datasets.

The proposed model can achieve high performance without

over-ﬁtting mainly due to the following reasons [85]:

1) It trains on large-sized datasets, as using more data
samples can improve the generalizability of the proposed
method.

2) It

implements a comprehensive feature engineering
method to improve the generalizability by removing
irrelevant and misleading features that may cause over-

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

15

ﬁtting.

3) It uses the stacking ensemble method to combine the re-
sults of base learners. Ensemble models often have better
generalizability than single models because combining
the single learners can reduce the variance of estimation
and prevent over-ﬁtting.

On the other hand, to deploy the proposed IDS in real-
world vehicle systems, the real-time requirements of vehicle
safety services should be met. For each packet transmitted on
vehicular networks, the alarm generation time should be less
than 10ms to meet the real-time requirements, as described
in Section III-D. For each packet passed to the proposed
IDS, it will be processed by Z-score normalization and four
trained models: KPCA, stacking, CL-k-means, and a biased
classiﬁer (either FN-based or FP-based). As shown in Table
XI, the average of the processing time for each packet in
the CAN-intrusion-dataset (Dataset 1) and the CICIDS2017
dataset (Dataset 2) is only 0.574 ms and 0.509 ms, respectively,
which is much lower than the vehicular network security
latency requirement (10ms). Moreover, since we trained the
models on the small-size subsets obtained by the proposed k-
means cluster sampling method, the total size of the trained
models for the intra-vehicle network IDS and external network
IDS is only 2.61 MB and 16.21 MB, respectively, which is
much less than the memory limit of vehicle-level machines
that often have more than 1 GB RAM, like Raspberry Pi 3.
Thus, the experimental results show the feasibility of applying
the proposed system to real-time vehicle systems.

VI. CONCLUSION

To enhance IoV security, this work proposed a multi-tiered
hybrid intrusion detection system (MTH-IDS) model that can
detect various types of known and zero-day cyber-attacks on
both intra-vehicle and external-vehicular networks for modern
vehicles. The proposed MTH-IDS consists of two traditional
ML stages (data pre-processing and feature engineering) and
four main tiers of learners utilizing multiple machine learning
algorithms. Through data pre-processing and feature engi-
neering, the quality of the input data can be signiﬁcantly
improved for more accurate model learning. The ﬁrst tier of
the proposed system consists of four tree-based supervised
learners used for known attack detection, while the second
tier comprises the BO-TPE and stacking models for supervised
base learner optimization to achieve higher accuracy. The third
tier consists of a novel CL-k-means unsupervised model used
for unknown/zero-day attack detection. Lastly, BO-GP and
two biased classiﬁers are used to construct the fourth tier for
unsupervised learner optimization. The four tiers of learning
models enable the proposed MTH-IDS to achieve optimal
performance for both known and unknown attack detection
in vehicular networks.

Through the performance evaluation of the proposed IDS
on the two public datasets that represent intra-vehicle and
external vehicular network data,
the proposed system can
effectively detect various types of known attacks with accu-
racies of 99.99% and 99.88% on the CAN-intrusion-dataset
and CICIDS2017 dataset, respectively. Moreover, the proposed

system can detect various types of unknown attacks with
average F1-scores of 0.963 and 0.800 on the CAN-intrusion-
dataset and CICIDS2017 dataset, respectively. The experimen-
tal results on a vehicle-level machine also show the feasibility
of the proposed system in real-time environments. In future
work, the proposed anomaly-based IDS framework can be
further improved by doing research on other unsupervised
learning and online learning methods.

REFERENCES

[1] H. Liang et al., “Network and system level security in connected vehicle
applications,” IEEE/ACM Int. Conf. Comput. Des. Dig. Tech. Pap. ICCAD,
pp. 1–7, 2018.

[2] M. Gmiden, M. H. Gmiden, and H. Trabelsi, “An intrusion detection
method for securing in-vehicle CAN bus,” 2016 17th Int. Conf. Sci. Tech.
Autom. Control Comput. Eng. STA 2016 - Proc., pp. 176–180, 2017.
[3] J. Liu, S. Zhang, W. Sun, and Y. Shi, “In-vehicle network attacks and
countermeasures: Challenges and future directions,” IEEE Netw., vol. 31,
no. 5, pp. 50–58, 2017.

[4] O. Y. Al-Jarrah, C. Maple, M. Dianati, D. Oxtoby, and A. Mouzakitis,
“Intrusion Detection Systems for Intra-Vehicle Networks: A Review,”
IEEE Access, vol. 7, pp. 21266–21289, 2019.

[5] L. Yang, ”Comprehensive Visibility Indicator Algorithm for Adaptable
Speed Limit Control in Intelligent Transportation Systems”, M.A.Sc.
thesis, University of Guelph, 2018.

it again,

[6] J. Golson, “Jeep hackers at

steering and braking systems,” The Verge, Aug. 2016.

time taking control
[On-
of
line]. Available: https://www.theverge.com/2016/8/2/12353186/car-hack-
jeep-cherokee-vulnerability-miller-valasek. [Accessed: 11-Nov-2020].
[7] L. Yang, A. Moubayed, I. Hamieh, and A. Shami, “Tree-based Intelligent
Intrusion Detection System in Internet of Vehicles,” proc. 2019 IEEE
Glob. Commun. Conf., pp. 1–6, Hawaii, USA, 2019.

this

[8] Q. Wang, Y. Qian, Z. Lu, Y. Shoukry, and G. Qu, “A delay based plug-in-
monitor for Intrusion Detection in Controller Area Network,” Proc. 2018
Asian Hardw. Oriented Secur. Trust Symp. AsianHOST 2018, pp. 86–91,
2019.

[9] E. Seo, H. M. Song, and H. K. Kim, “GIDS: GAN based Intrusion De-
tection System for In-Vehicle Network,” 2018 16th Annu. Conf. Privacy,
Secur. Trust. PST 2018, pp. 1–6, 2018.

[10] M. Injadat, A. Moubayed, A. B. Nassif, and A. Shami, “Machine
learning towards intelligent systems: applications, challenges, and oppor-
tunities,” Artif. Intell. Rev., 2021.

[11] I. Sharafaldin, A. H. Lashkari, and A. A. Ghorbani, “Toward generating
a new intrusion detection dataset and intrusion trafﬁc characterization,”
in Proc. Int. Conf. Inf. Syst. Secur. Privacy, 2018, pp. 108–116.

[12] A. Alshammari, M. A. Zohdy, D. Debnath, and G. Corser, “Classiﬁca-
tion Approach for Intrusion Detection in Vehicle Systems,” Wirel. Eng.
Technol., vol. 09, no. 04, pp. 79–94, 2018.

[13] V. S. Barletta, D. Caivano, A. Nannavecchia, and M. Scalera, “A
Kohonen SOM Architecture for Intrusion Detection on In-Vehicle Com-
munication Networks,” Appl. Sci., vol. 10, no. 15, 2020.

[14] H. Olufowobi, C. Young, J. Zambreno, and G. Bloom, “SAIDuCANT:
Speciﬁcation-Based Automotive Intrusion Detection Using Controller
Area Network (CAN) Timing,” IEEE Trans. Veh. Technol., vol. 69, no.
2, pp. 1484–1494, 2020.

[15] H. Olufowobi et al., “Anomaly Detection Approach Using Adaptive
Cumulative Sum Algorithm for Controller Area Network,” AutoSec 2019
- Proc. ACM Work. Automot. Cybersecurity, co-located with CODASPY
2019, pp. 25–30, 2019.

[16] H. Lee, S. H. Jeong, and H. K. Kim, “OTIDS: A novel intrusion
detection system for in-vehicle network by using remote frame,” Proc. -
2017 15th Annu. Conf. Privacy, Secur. Trust. PST 2017, pp. 57–66, 2018.
[17] S. F. Lokman et al., “Stacked Sparse Autoencoders-Based Outlier
Discovery for In-Vehicle Controller Area Network (CAN),” Int. J. Eng.
Technol., vol. 7, no. 4.33, pp. 375-380, 2018.

[18] H. M. Song, J. Woo, and H. K. Kim, “In-vehicle network intrusion
detection using deep convolutional neural network,” Veh. Commun., vol.
21, p. 100198, 2020.

[19] J. Ashraf, A. D. Bakhshi, N. Moustafa, H. Khurshid, A. Javed, and A.
Beheshti, “Novel Deep Learning-Enabled LSTM Autoencoder Architec-
ture for Discovering Anomalous Events From Intelligent Transportation
Systems,” IEEE Trans. Intell. Transp. Syst., pp. 1–12, 2020.

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

16

[20] K. M. Ali Alheeti and K. Mc Donald-Maier, “Intelligent

intrusion
detection in external communication systems for autonomous vehicles,”
Syst. Sci. Control Eng., vol. 6, no. 1, pp. 48–56, 2018.

[21] A. Rosay, F. Carlier, and P. Leroux, “Feed-forward neural network for
Network Intrusion Detection,” in 2020 IEEE 91st Vehicular Technology
Conference (VTC2020-Spring), May 2020, pp. 1–6.

[22] K. Aswal, D. C. Dobhal, and H. Pathak, “Comparative analysis of
machine learning algorithms for identiﬁcation of BOT attack on the
Internet of Vehicles (IoV),” in 2020 International Conference on Inventive
Computation Technologies (ICICT), Feb. 2020, pp. 312–317.

[23] M. Aloqaily, S. Otoum, I. Al Ridhawi, and Y. Jararweh, “An intrusion
detection system for connected vehicles in smart cities,” Ad Hoc Net-
works, vol. 90, p. 101842, 2019.

[24] Y. Gao, H. Wu, B. Song, Y. Jin, X. Luo, and X. Zeng, “A Distributed
Network Intrusion Detection System for Distributed Denial of Service
Attacks in Vehicular Ad Hoc Network,” IEEE Access, vol. 7, pp.
154560–154571, 2019.

[25] D. A. Schmidt, M. S. Khan, and B. T. Bennett, “Spline-based intrusion
detection for VANET utilizing knot ﬂow classiﬁcation,” Internet Technol.
Lett., vol. 3, no. 3, pp. 2–7, 2020.

[26] E. Min, J. Long, Q. Liu, J. Cui, Z. Cai, and J. Ma, “SU-IDS: A semi-
supervised and unsupervised framework for network intrusion detection,”
Lect. Notes Comput. Sci. (including Subser. Lect. Notes Artif. Intell. Lect.
Notes Bioinformatics), vol. 11065 LNCS, pp. 322–334, 2018.

[27] Y. Yao, L. Su, Z. Lu, and B. Liu, “STDeepGraph: Spatial-temporal
deep learning on communication graphs for long-term network attack
detection,” Proc. - 2019 18th IEEE Int. Conf. Trust. Secur. Priv. Comput.
Commun. IEEE Int. Conf. Big Data Sci. Eng. Trust. 2019, pp. 120–127,
2019.

[28] M. Injadat, A. Moubayed, A. B. Nassif, and A. Shami, “Multi-Stage Op-
timized Machine Learning Framework for Network Intrusion Detection,”
IEEE Trans. Netw. Serv. Manag., 2020.

[29] K. Zdenˇek and S. Jiˇr´ı, “Simulation of CAN bus physical layer using

SPICE,” Int. Conf. Appl. Electron., pp. 8–11, 2013.

[30] S. F. Lokman, A. T. Othman, and M. H. Abu-Bakar, “Intrusion detection
system for automotive Controller Area Network (CAN) bus system: a
review,” Eurasip J. Wirel. Commun. Netw., vol. 2019, no. 1, 2019.
[31] L. Yang, R. Muresan, A. Al-Dweik and L. J. Hadjileontiadis, ”Image-
Based Visibility Estimation Algorithm for Intelligent Transportation Sys-
tems,” in IEEE Access, vol. 6, pp. 76728-76740, 2018.

[32] Y. Fraiji, L. Ben Azzouz, W. Trojet, and L. A. Saidane, “Cyber security
issues of Internet of electric vehicles,” IEEE Wirel. Commun. Netw. Conf.
WCNC, vol. 2018-April, pp. 1–6, 2018.

[33] B. Groza and P. S. Murvay, “Efﬁcient Intrusion Detection with Bloom
Filtering in Controller Area Networks,” IEEE Trans. Inf. Forensics Secur.,
vol. 14, no. 4, pp. 1037–1051, 2019.

[34] U. E. Larson, D. K. Nilsson, and E. Jonsson, “An approach to
speciﬁcation-based attack detection for in-vehicle networks,” IEEE Intell.
Veh. Symp. Proc., pp. 220–225, 2008.

[35] D. Zhou, Z. Yan, Y. Fu, and Z. Yao, “A survey on network data
collection,” J. Netw. Comput. Appl., vol. 116, no. May, pp. 9–23, 2018.
[36] A. Moubayed, A. Refaey, and A. Shami, “Software-Deﬁned Perimeter
(SDP): State of the Art Secure Solution for Modern Networks,” IEEE
Netw., vol. 33, no. 5, pp. 226–233, 2019.

[37] P. Kumar, A. Moubayed, A. Refaey, A. Shami, and J. Koilpillai,
“Performance Analysis of SDP For Secure Internal Enterprises,” IEEE
Wirel. Commun. Netw. Conf. WCNC, vol. 2019-April, 2019.

[38] A. Moubayed and A. Shami, “Softwarization, Virtualization, & Machine
Learning For Intelligent & Effective V2X Communications,” IEEE Intell.
Transp. Syst. Mag., pp. 1–14, 2020.

[39] M. Y. Abualhoul, O. Shagdar, and F. Nashashibi, “Visible Light inter-
vehicle Communication for platooning of autonomous vehicles,” IEEE
Intell. Veh. Symp. Proc., vol. 2016-Augus, no. IV, pp. 508–513, 2016.
[40] A. Moubayed, A. Shami, P. Heidari, A. Larabi, and R. Brunner, “Edge-
enabled V2X Service Placement for Intelligent Transportation Systems,”
IEEE Trans. Mob. Comput., vol. 1233, pp. 1–13, 2020.

[41] K. M. Faraoun and A. Boukelif, “Neural Networks Learning Im-
provement using the K-Means Clustering Algorithm to Detect Network
Intrusions,” INFOCOMP J. Comput. Sci., vol. 5, no. 3, pp. 28–36, 2006.
[42] N. Shi, X. Liu, and Y. Guan, “Research on k-means clustering algorithm:
An improved k-means clustering algorithm,” 3rd Int. Symp. Intell. Inf.
Technol. Secur. Informatics, IITSI 2010, pp. 63–67, 2010.

[44] A. Moubayed, M. Injadat, A. Shami, and H. Lutﬁyya, “DNS Typo-
Squatting Domain Detection: A Data Analytics & Machine Learning
Based Approach,” 2018 IEEE Glob. Commun. Conf. GLOBECOM 2018
- Proc., 2018.

[45] L. Yang and A. Shami, “On Hyperparameter Optimization of Machine
Learning Algorithms: Theory and Practice,” Neurocomputing, vol. 415,
pp. 295–316, 2020.

[46] M. Injadat, A. Moubayed, A. B. Nassif, and A. Shami, “Multi-split Op-
timized Bagging Ensemble Model Selection for Multi-class Educational
Data Mining,” Springer’s Appl. Intell., 2020.

[47] M. Injadat, F. Salo, A. B. Nassif, A. Essex, and A. Shami, “Bayesian
Optimization with Machine Learning Algorithms Towards Anomaly De-
tection,” 2018 IEEE Glob. Commun. Conf. GLOBECOM 2018 - Proc.,
2018.

[48] Z. Chen et al., “Machine learning based mobile malware detection using
highly imbalanced network trafﬁc,” Inf. Sci. (Ny)., vol. 433–434, pp.
346–364, 2018.

[49] N.V. Chawla, K.W. Bowyer, L.O. Hall, and W.P. Kegelmeyer, ”SMOTE:
Synthetic Minority Over-Sampling Technique,” J. Artiﬁcial Intelligence
Research, vol. 16, pp. 321-357, 2002.

[50] F. Salo, A. B. Nassif, and A. Essex, “Dimensionality reduction with IG-
PCA and ensemble classiﬁer for network intrusion detection,” Comput.
Networks, vol. 148, pp. 164–175, 2019.

[51] L. Yu and H. Liu, “Efﬁciently handling feature redundancy in high-
dimensional data,” Proc. ACM SIGKDD Int. Conf. Knowl. Discov. Data
Min., pp. 685–690, 2003.

[52] L. Yu and H. Liu, “Feature Selection for High-Dimensional Data: A Fast
Correlation-Based Filter Solution,” Proceedings, Twent. Int. Conf. Mach.
Learn., vol. 2, pp. 856–863, 2003.

[53] S. Egea, A. Rego Manez, B. Carro, A. Sanchez-Esguevillas, and J.
Lloret, “Intelligent IoT trafﬁc classiﬁcation using novel search strategy for
fast-based-correlation feature selection in industrial environments,” IEEE
Internet Things J., vol. 5, no. 3, pp. 1616–1624, 2018.

[54] M. N. Injadat, A. Moubayed, A. B. Nassif, and A. Shami, “System-
atic ensemble model selection approach for educational data mining,”
Knowledge-Based Syst., vol. 200, p. 105992, 2020.

[55] B. Sch¨olkopf, A. Smola, and K.-R. M¨uller, “Kernel principal component
analysis,” in Artiﬁcial Neural Networks — ICANN’97, 1997, pp. 583–588.
[56] A. Garg and P. Maheshwari, “Performance analysis of Snort-based
Intrusion Detection System,” ICACCS 2016 - 3rd Int. Conf. Adv. Comput.
Commun. Syst. Bringing to Table, Futur. Technol. from Arround Globe,
vol. 01, pp. 1–5, 2016.

[57] K. Leung and C. Leckie, “Unsupervised anomaly detection in network
intrusion detection using clusters,” Conf. Res. Pract. Inf. Technol. Ser.,
vol. 38, no. January, pp. 333–342, 2005.

[58] S. Sahu and B. M. Mehtre, “Network intrusion detection system using
J48 Decision Tree,” 2015 Int. Conf. Adv. Comput. Commun. Informatics,
ICACCI 2015, pp. 2023–2026, 2015.

[59] A. Tesfahun and D. Lalitha Bhaskari, “Intrusion detection using random
forests classiﬁer with SMOTE and feature reduction,” Proc. - 2013
Int. Conf. Cloud Ubiquitous Comput. Emerg. Technol. CUBE 2013, pp.
127–132, 2013.

[60] P. Geurts, D. Ernst, and L. Wehenkel, “Extremely randomized trees,”

Mach. Learn., vol. 63, no. 1, pp. 3–42, 2006.

[61] Y. Xia, C. Liu, Y. Y. Li, and N. Liu, “A boosted decision tree approach
using Bayesian hyper-parameter optimization for credit scoring,” Expert
Syst. Appl., vol. 78, pp. 225–241, 2017.

[62] L. Yang and A. Shami, “A Lightweight Concept Drift Detection and
Adaptation Framework for IoT Data Streams,” IEEE Internet Things
Mag., 2021.

[63] M. Mohammed, H. Mwambi, B. Omolo, and M. K. Elbashir, “Using
stacking ensemble for microarray-based cancer classiﬁcation,” 2018 Int.
Conf. Comput. Control. Electr. Electron. Eng. ICCCEEE 2018, pp. 1–8,
2018.

[64] A. Feizollah, N. B. Anuar, R. Salleh, and F. Amalina, “Comparative
study of k-means and mini batch k-means clustering algorithms in android
malware detection using network trafﬁc analysis,” Proc. - 2014 Int. Symp.
Biometrics Secur. Technol. ISBAST 2014, pp. 193–197, 2015.

[65] A. Vikram and Mohana, “Anomaly detection in Network Trafﬁc Using
Unsupervised Machine learning Approach,” in 2020 5th International
Conference on Communication and Electronics Systems (ICCES), Jun.
2020, pp. 476–479.

[66] MJ. Kearns, ”The computational complexity of machine learning,” MIT

press, 1990.

[43] A. Moubayed, M. Injadat, A. Shami, and H. Lutﬁyya, “Student Engage-
ment Level in e-Learning Environment: Clustering Using K-means,” Am.
J. Distance Educ., vol. 34, no. 02, pp. 1–20, 2020.

[67] N. Shi, X. Liu, and Y. Guan, “Research on k-means clustering algorithm:
An improved k-means clustering algorithm,” 3rd Int. Symp. Intell. Inf.
Technol. Secur. Informatics, IITSI 2010, pp. 63–67, 2010.

ACCEPTED AND TO APPEAR IN IEEE INTERNET OF THINGS JOURNAL

17

Abdallah Moubayed received his Ph.D. in Electri-
cal & Computer Engineering from the University of
Western Ontario in August 2018, his M.Sc. degree
in Electrical Engineering from King Abdullah Uni-
versity of Science and Technology, Thuwal, Saudi
Arabia in 2014, and his B.E. degree in Electrical
Engineering from the Lebanese American Univer-
sity, Beirut, Lebanon in 2012. Currently, he is a
Postdoctoral Associate in the Optimized Comput-
ing and Communications (OC2) lab at University
of Western Ontario. His research interests include
wireless communication, resource allocation, wireless network virtualization,
performance & optimization modeling, machine learning & data analytics,
computer network security, cloud computing, and e-learning.

Abdallah Shami is a professor with the ECE De-
partment at Western University, Ontario, Canada. He
is the Director of the Optimized Computing and
Communications Laboratory at Western University
(https://www.eng.uwo.ca/oc2/). He is currently an
associate editor for IEEE Transactions on Mobile
Computing, IEEE Network, and IEEE Communi-
cations Surveys and Tutorials. He has chaired key
symposia for IEEE GLOBECOM, IEEE ICC, IEEE
ICNC, and ICCIT. He was the elected Chair of the
IEEE Communications Society Technical Commit-
tee on Communications Software (2016-2017) and the IEEE London Ontario
Section Chair (2016-2018).

[68] D. Kim, Y. Tao, S. Kim, and A. Zeller, “Where should we ﬁx this bug?
A two-phase recommendation model,” IEEE Trans. Softw. Eng., vol. 39,
no. 11, pp. 1597–1610, 2013.

[69] S. Yadav and S. Shukla, “Analysis of k-Fold Cross-Validation over Hold-
Out Validation on Colossal Datasets for Quality Classiﬁcation,” Proc. -
6th Int. Adv. Comput. Conf. IACC 2016, no. Cv, pp. 78–83, 2016.
[70] The pandas development team, “pandas-dev/pandas: Pandas.” Zenodo,

Feb. 2020.

[71] F. Pedregosa et al., “Scikit-learn: Machine Learning in Python,” J.
Mach. Learn. Res., vol. 12, pp. 2825–2830, 2011, [Online]. Available:
http://scikit-learn.sourceforge.net.

[72] T. Chen and T. He, “xgboost: eXtreme Gradient Boosting,” R Packag.

version 0.4-2, pp. 1–4, 2015.

[73] T. Head, MechCoder, G. Louppe, et al., “scikitoptimize/scikit-optimize:

v0.5.2,” 2018.

[74] B. Komer, J. Bergstra, and C. Eliasmith, “Hyperopt-Sklearn: Automatic
Hyperparameter Conﬁguration for Scikit-Learn,” Proc. 13th Python Sci.
Conf., no. Scipy, pp. 32–37, 2014.

[75] N. Kaja, “Artiﬁcial Intelligence and Cybersecurity: Building an Auto-
motive Cybersecurity Framework Using Machine Learning Algorithms,”
University of Michigan-Dearborn, 2019.

[76] O. Y. Al-Jarrah, C. Maple, M. Dianati, D. Oxtoby, and A. Mouzakitis,
“Intrusion Detection Systems for Intra-Vehicle Networks: A Review,”
IEEE Access, vol. 7, pp. 21266–21289, 2019.

[77] A. Rosay, F. Carlier, and P. Leroux, “MLP4NIDS: An Efﬁcient MLP-
Based Network Intrusion Detection for CICIDS2017 Dataset,” in Machine
Learning for Networking, 2020, pp. 240–254.

[78] R. Panigrahi and S. Borah, “A detailed analysis of CICIDS2017 dataset
for designing Intrusion Detection Systems,” Int. J. Eng. Technol., vol. 7,
no. 3.24, pp. 479-482, 2018.

[79] W. Elmasry, A. Akbulut, and A. H. Zaim, “Evolving deep learning
architectures for network intrusion detection using a double PSO meta-
heuristic,” Comput. Networks, vol. 168, 2020.

[80] J. H. Lee and K. H. Park, “GAN-based imbalanced data intrusion

detection system,” Pers. Ubiquitous Comput., 2019.

[81] M. A. Ferrag and L. Maglaras, “DeepCoin: A Novel Deep Learning and
Blockchain-Based Energy Exchange Framework for Smart Grids,” IEEE
Trans. Eng. Manag., pp. 1–13, 2019.

[82] R. Vijayanand, D. Devaraj, and B. Kannapiran, “Intrusion detection
system for wireless mesh network using multiple support vector machine
classiﬁers with genetic-algorithm-based feature selection,” Comput. Se-
cur., vol. 77, pp. 304–314, 2018.

[83] R. Abdulhammed, M. Faezipour, H. Musafer, and A. Abuzneid, “Efﬁ-
cient network intrusion detection using PCA-based dimensionality reduc-
tion of features,” 2019 Int. Symp. Networks, Comput. Commun. ISNCC
2019, 2019.

[84] A. Khraisat, I. Gondal, P. Vamplew, and J. Kamruzzaman, “Survey
techniques, datasets and challenges,”

of intrusion detection systems:
Cybersecurity, vol. 2, no. 1, 2019.

[85] B. Ghojogh and M. Crowley, “The theory behind overﬁtting, cross
validation, regularization, bagging, and boosting: tutorial,” arXiv, pp.
1–23, 2019.

Li Yang received the B.E. degree in computer
science from Wuhan University of Science and
Technology, Wuhan, China in 2016 and the MASc
degree in Engineering from University of Guelph,
Guelph, Canada, 2018. Since 2018 he has been
working toward the Ph.D. degree in the Department
of Electrical and Computer Engineering, Western
University, London, Canada. His research interests
include cybersecurity, machine learning, time-series
data analytics, and intelligent transportation systems.

