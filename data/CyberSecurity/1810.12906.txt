Finding Cryptocurrency Attack Indicators Using
Temporal Logic and Darkweb Data

Mohammed Almukaynizi1, Vivin Paliath2, Malay Shah2, Malav Shah2, Paulo Shakarian1,2
1Arizona State University
2Cyber Reconnaissance, Inc.
Tempe, AZ, USA
{malmukay, vivin, msshah11, mpshah5, shak}@asu.edu

8
1
0
2

t
c
O
0
3

]

R
C
.
s
c
[

1
v
6
0
9
2
1
.
0
1
8
1
:
v
i
X
r
a

Abstract—With the recent prevalence of darkweb/deepweb
(D2web) sites specializing in the trade of exploit kits and
malware, malicious actors have easy-access to a wide-range of
tools that can empower their offensive capability. In this study,
we apply concepts from causal reasoning, itemset mining, and
logic programming on historical cryptocurrency-related cyber
incidents with intelligence collected from over 400 D2web hacker
forums. Our goal was to ﬁnd indicators of cyber threats targeting
cryptocurrency traders and exchange platforms from hacker
activity. Our approach found interesting activities that, when
observed together in the D2web, subsequent cryptocurrency-
related incidents are at least twice as likely to occur than
they would if no activity was observed. We also present an
algorithmic extension to a previously-introduced algorithm called
APT-Extract that allows to model new semantic structures that
are speciﬁc to our application.

I. INTRODUCTION AND DATASET

Cryptocurrencies are digital currencies that mostly use the
blockchain concept to record transactions. Perhaps the most
well-known one is Bitcoin. It was estimated that the market
capitalization of cryptocurrencies has exceeded 400 billion
dollars, after peaking at over 700 billion dollars1.

With the high reliance on technology, increasing adoption
from businesses and traders, and due to the inherent anonymity
associated with transactions and wallet owners, malicious
threat actors (including hackers and scammers) aiming for
ﬁnancial gain have been highly motivated to hack and scam
to gain control over cryptocurrency wallets and perform
transactions. In this research effort, we have encoded and
recorded over 50 major incidents of cyberattacks and fraud
campaigns targeting multiple cryptocurrencies and traders2. A
few examples are reported in Table I. We also queried postings
from over 400 hacker forums in the D2web using an API that
is commercially provided by a threat intelligence ﬁrm3. The
database is collected from D2web sites that were identiﬁed to
be serving hacking-related content. Using both databases, we
mine for sequential patterns to identify indicators of attacks
from the D2web database, which can then be monitored to

1https://cointelegraph.com/news/combined-crypto-market-capitalization-

races-past-800-bln.

2These

incidents
repositories

rity
https://www.cryptoaware.org/resources/notable-cryptocurrency-hacks,
https://www.livecoinwatch.com, and others.

including

were

extracted

from various

secu-
https://www.hackmageddon.com,

IT

3Cyber Reconnaissance, Inc. (CYR3CON), https://www.cyr3con.ai.

1

reason about risks that are likely to occur in the future.
Speciﬁcally, we found that when certain D2web activities are
observed together, subsequent cryptocurrency-related incidents
are at least twice more likely to occur than they would if no
activity was observed and signiﬁcantly more likely to occur
than when individual activity is observed.

Name of Attack
Mt Gox Hack
NiceHash Hack
Parity Wallet Hacks
Tether Token Hack

TABLE I
EXAMPLE ATTACKS

Targeted Currency
Bitcoin
Bitcoin
Ethereum
Tether

Estimated Loss (in USD)
450 Millions
62 Millions
160 Millions
30 Millions

To learn such patterns, we sought to derive temporal logic
rules of the form “A cryptocurrency G will be targeted by
hackers/scammers with a probability p within ∆tact
time
units after itemset F is observed on the D2web within ∆tcon
time units”. To do so, we combine concepts from logic pro-
gramming (in particular, the concepts of existential frequency
function (efr) from APT logic [1], [2]) with frequent itemset
mining [3] and temporal causal reasoning [4]. Table II shows
some of the interesting efr rules obtained from the algorithm.

II. TECHNICAL APPROACH

A. APT-Logic

Concepts. We use the same syntax and semantics that were
previously introduced in our work [1], [2], [5]. Here, we
informally review a subset of those concepts.

A thread is a sequence of worlds (events). Each world cor-
responds to a discrete time point. Time points are represented
by natural numbers in the range 1, . . . , tmax. A formula F can
be any itemset (in this paper, atoms can only be predicates with
arities of 2 or 3, e.g., {attacked(Bitcoin), mentioned(Coinbase,
software, 9), mentioned(Gmail, software, 13)}). The atoms
used in this study are partitioned into two disjoint subsets:
condition atoms from D2web activities (Acon), and action
atoms from the database of observed incidents (Aact).

Satisfaction. We say a thread (T h) satisﬁes a formula F
at a time-point t (denoted T h(t) ⊧ F ) if and only if:
∀a∈F (T h(t) ⊧ a).

 
 
 
 
 
 
Rule

%increase in likelihood of occurrence

Description

TABLE II
EXAMPLE OF SIGNIFICANT RULES

Mentioned(Coinbase,

ﬁnancial,

10)

Mentioned(Gmail,
Attacked(general): [21, 0.94, 5]

software,

13)

Mentioned(SQL,

software,

19)

Mentioned(Windows Registry,
Attacked(Ethereum): [21, 0.39, 5]

software, 19)

∧
ef r
↝

∧
ef r
↝

201%

206%

When “Coinbase” as a ﬁnancial tag and “Gmail” as
a software tag are mentioned more than 10 and 13
times, respectively, within any window of 5 days,
there is a 94% chance that a cryptocurrency-related
incident would happen in the next 21 days. This
is 201% more likely to occur than the chance of
occurring in any sequence of 21 days.

When “SQL” as a software tag and “Windows Reg-
istry” as a software tag are mentioned more then 19
times, there is a 39% chance that a Ethereum event
would happen in the next 21 days, 206% increase in
likelihood of occurrence.

Rule probability. The probability is determined based on the
fraction of times where a rule r is satisﬁed from the times
where the precondition is satisﬁed4.
Signiﬁcance. We determine whether a rule is statistically
signiﬁcant based on relative likelihood, i.e., the percentage
increase in likelihood of occurrence when the precondition is
observed.

B. D2web Activity

Tagging. The D2web API supplies tags with each post. Each
tag should belong to one of three categories: ﬁnancial, soft-
ware, or general topic tags. The tagging algorithm leverages
document similarity techniques on doc2vec representations
of posts to assign tags that are most relevant to each post.
Our approach uses the count of tags per day, i.e., when a
tag is observed with a count that exceeds certain threshold,
an atom respective to that condition becomes true. The said
threshold is tag-dependent; meaning each tag has a threshold.
We determined thresholds based on average and standard
deviation of tag mentions per day in the historical data5.
Sliding Window. The current semantic structure of APT-
logic does not capture the concept of efr whose precondition
atoms occur in any order within a sequence of ∆tcon time
points. However, the efr rules we sought to obtain need such
semantics. Therefore, we make a new thread T h′
is
derived from T h according to Algorithm 1. Essentially, this
algorithm iterates over T h once; at each time point t it assigns
T h′(t) the condition atoms that T h(ti) satisﬁes for every ti
in the sequence of time-points t − (∆tcon − 1), . . . , t.
Itemsets. The preconditions of our efr rules are frequent
itemsets, obtained from running the Apriori algorithm [3].
The input to the Apriori algorithm is a database of transac-
tions—each world corresponding to a time-point in T h′ can
be regarded as a transaction. The output is all itemsets that are
satisﬁed by the thread with a frequency exceeding a minimum
support6. We run the Apriori algorithm on T h′. The algorithm

that

4If the precondition is not satisﬁed by Th at any time-point, p to set to 1.
5An atom becomes true if, on a given day, its respective tag is mentioned

more than the average added to (1.5 * standard deviation).

Algorithm 1 Forward rolling condition atoms
Input: Thread T h, an empty thread T h′, length of threads
tmax, condition atoms Acon, and length of rolling window
∆tcon

Output: Forward-rolled thread T h′
1: window size ← ∆tcon − 1
2: for t ∈ {1, . . . , tmax} do
3:
4:
5:

for ti ∈ {max(1, t − window size), . . . , t} do
for g ∈ {a ∈ Acon where T h(ti) ⊧ a} do

Assign(T h′(t), g) ▷ assigns g to T h′(t) if

T h′(t) ⊭ g

end for

end for

6:
7:
8: end for
9: return T h′

returns frequent itemsets (denoted f reqItemsets). Then we
make a thread T hitemsets only containing atoms (frequent
itemsets) that T h′ satisﬁes at each time point as illustrated
in Algorithm 2.

Algorithm 2 Construct T hitemsets
Input: Thread T h, thread T h′, an empty thread T hitemsets,
length of thread tmax, f reqItemsets, and action atoms
Aact

Output: T hitemsets

1: for t ∈ {1, . . . , tmax} do
2:

for I ∈ f reqItemsets do
if I ⊆ T h′(t) then

3:
4:
5:
6:
7:

Assign(T hitemsets(t), I)

end if

end for
for g ∈ {a ∈ Aact where T h(t) ⊧ a} do

Assign(T hitemsets(t), g)

end for

8:
9:
10: end for
11: return T hitemsets

6min support is experimentally determined and set to (0.13 ∗ tmax).

efr Rule-Learning. We use the algorithm APT-EXTRACT to

2

mine for efr rules [1]. Essentially, APT-EXTRACT produces
all rules whose precondition is any of the itemsets that are
satisﬁed by the thread at n or more time points, i.e., n is
greater than a minimum (lower bound) support (speciﬁed by
the argument SuppLB [1]).

III. EXPERIMENTS AND ANALYSIS

We show in this section: (1) the rules that are preconditioned
on itemsets tend to have higher correlations with future inci-
dents than the rules that are preconditioned on single atoms,
and (2) the performance of our approach change linearly when
∆tact is extended.
Itemset Rules vs. Atomic Rules. Interestingly, the efr rules
whose precondition is itemsets have notably higher probabili-
ties than those whose precondition is single tags. It is evident
(from Figure 1) that the usage of the Apriori algorithm with
APT-logic added considerable value to the generated rules.

Fig. 1. Box plot showing precondition type (itemset rules, single-atom-rules)
vs. probability.

Although the single atoms that are used as preconditions of
the generated rules may not be in any of the frequent itemsets,
the single-atom-rules have on average higher support than the
frequent-itemset-rules as depicted in Figure 2. This suggests
that an atom of an itemset does not necessarily occur when
another atom in that same itemset is observed i.e., less co-
occurrence.

Fig. 2. Box plot showing precondition type (itemset rules, single-atom rules)
vs. support

Run-time Analysis. Figure 3 shows that when the length
∆tact increases, the time taken for APT-EXTRACT to generate
rules increases linearly, because the number of time points
for which APT-EXTRACT needs to check the satisfaction
of the consequence increases. This shows that our approach
is ﬂexible to applications where the user wants to extend
the length of time-units for which efr rules are computed.

3

However, we shall note that the Apriori algorithm runs in
exponential time, and for all analysis in this study, we restrict
the number of items to 2 in each itemset, and we do not
introduce more types of atoms (tags).

Fig. 3. Time taken to generate rules when varying ∆tact.

IV. CONCLUSION
This study presents an approach that combines concepts
from causal reasoning, itemset mining, and logic program-
ming. Our approach identiﬁes indicators of cyber threats to
cryptocurrency traders and exchange platforms from hacker
activity in D2web. Examples of interesting rules are presented
in this paper. In the future, we plan to use the approach with
other sources such as social media platforms. Additionally, we
look to incorporate the learned rules into an alert system that
generates and visualizes warnings.

ACKNOWLEDGMENT
Some of the authors were supported by the Ofﬁce of Naval
Research (ONR) Neptune program. Paulo Shakarian, Vivin
Paliath, Malay Shah, and Malav Shah are supported by the
Ofﬁce of the Director of National Intelligence (ODNI) and the
Intelligence Advanced Research Projects Activity (IARPA) via
the Air Force Research Laboratory (AFRL) contract number
FA8750-16-C-0112. The U.S. Government is authorized to
reproduce and distribute reprints for Governmental purposes
notwithstanding any copyright annotation thereon. Disclaimer:
The views and conclusions contained herein are those of the
authors and should not be interpreted as necessarily represent-
ing the ofﬁcial policies or endorsements, either expressed or
implied, of ODNI, IARPA, AFRL, or the U.S. Government.

REFERENCES

[1] P. Shakarian, A. Parker, G. I. Simari, and V. S. Subrahmanian, “Annotated
probabilistic temporal logic,” ACM Trans. Comput. Logic, vol. 12, no. 2,
pp. 14:1–14:44, Jan. 2011.

[2] P. Shakarian, G. I. Simari, and V. S. Subrahmanian, “Annotated probabilis-
tic temporal logic: Approximate ﬁxpoint implementation,” ACM Trans.
Comput. Logic, vol. 13, no. 2, pp. 13:1–13:33, Apr. 2012.

[3] J. Han, J. Pei, and Y. Yin, “Mining frequent patterns without candidate
generation,” in ACM sigmod record, vol. 29, no. 2. ACM, 2000, pp.
1–12.

[4] S. Kleinberg and B. Mishra, “The temporal logic of causal structures,” in
Proceedings of the Twenty-Fifth Conference on Uncertainty in Artiﬁcial
Intelligence. AUAI Press, 2009, pp. 303–312.

[5] A. Stanton, A. Thart, A. Jain, P. Vyas, A. Chatterjee, and P. Shakarian,
“Mining for causal relationships: A data-driven study of the islamic state,”
in Proceedings of the 21th ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining. ACM, 2015, pp. 2137–2146.

 6 L Q J O H W R Q , W H P V H W 3 U H F R Q G L W L R Q                   3 U R E D E L O L W \ 6 L Q J O H W R Q , W H P V H W 3 U H F R Q G L W L R Q             6 X S S R U W