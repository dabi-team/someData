8
1
0
2

t
c
O
1
1

]
h
p
-
t
n
a
u
q
[

1
v
9
3
6
5
0
.
0
1
8
1
:
v
i
X
r
a

Quantum Systems for Monte Carlo Methods
and Applications to Fractional Stochastic Processes

Sebastian F. Tudor

School of Business, Financial Engineering Division, Hanlon Financial Systems Center,
Stevens Institute of Technology, Hoboken, NJ 07030, USA

Department of Physics, Center for Quantum Science and Engineering,
Hanlon Financial Systems Center, Stevens Institute of Technology, Hoboken, NJ 07030, USA

Rupak Chatterjee

Lac Nguyen, Yuping Huang

Department of Physics, Center for Quantum Science and Engineering,
Stevens Institute of Technology, Hoboken, NJ 07030, USA

Abstract

Random numbers are a fundamental and useful resource in science and engineering with important

applications in simulation, machine learning and cyber-security. Quantum systems can produce

true random numbers because of the inherent randomness at the core of quantum mechanics. As

a consequence, quantum random number generators are an eﬃcient method to generate random

numbers on a large scale. We study in this paper the applications of a viable source of unbiased

quantum random numbers (QRNs) whose statistical properties can be arbitrarily programmed

without the need for any post-processing and that pass all standard randomness tests of the NIST

and Dieharder test suites without any randomness extraction. Our method is based on measuring

the arrival time of single photons in shaped temporal modes that are tailored with an electro-optical

modulator. The advantages of our QRNs are shown via two applications: simulation of a fractional

Brownian motion, which is a non-Markovian process, and option pricing under the fractional SABR

model where the stochastic volatility process is assumed to be driven by a fractional Brownian

motion. The results indicate that using the same number of random units, our QRNs achieve

greater accuracy than those produced by standard pseudo-random number generators. Moreover,

we demonstrate the advantages of our method via an increase in computational speed, eﬃciency,

and convergence.

Keywords: Quantum Random Number Generators, Option Pricing, Monte Carlo Simulation,

Fractional Brownian Motion, Fractional SABR Model, Stochastic Processes, Volatility Models

Preprint submitted to Elsevier

October 16, 2018

 
 
 
 
 
 
1. Introduction

The motivation for creating an unbiased quantum random number generator is in its wide range

of applications in not only secure communication and cryptography, but also in its widespread use

in Monte-Carlo (MC) simulations. It is well known that pseudo-random number (PRN) generators

are not random at all such that seed-based generators can be used to generate identical strings of

random numbers based on the same seed and similar computational systems. Furthermore, it has

been shown that the entropy rate also approaches zero when viable random seeds are used up [16].

In contrast, quantum random numbers (QRN) are physically created by quantum processes that

are inherently stochastic. That is, one can by no means can predict a sequence of numbers before

they are acquired from the source, even if one has full knowledge about the state of the system.

In recent years, many methods have been proposed for QRNs producing a uniform distribution,

see e.g.

[19], [28]. Compared to other methods of implementation, which focus on high data

rate and test suite scores, our approach is notable where we also demonstrate that QRNs can

be generated directly in arbitrary probability distributions, with high-dimensionality, and free of

post-processing. It is based on the random arrival time measurement of single photons that have

temporal wave-forms shaped by an electro-optical modulator [22]. A key application area of such

random numbers is for MC simulations for stochastic processes.

An important task in ﬁnancial and risk engineering is to study stochastic processes [15]. The

wide spread use of Monte Carlo simulations of these stochastic processes in enterprise level risk

management has led to an ever insatiable need for computing power and speed. The creation of

these simulation paths using true random number generators is precisely where these quantum

random numbers can play a critical role.

Simulation of stochastic processes in general, and of fractional stochastic processes in partic-

ular, is an important problem in engineering and science. A fractional Brownian motion oﬀers

a convenient modeling approach for non-stationary and non-Markovian stochastic processes with

statistical self-similarity, and makes natural the use of wavelets for both its analysis and synthesis

[13]. Fractal feature analysis and classiﬁcation in medical imagining can be studied by using a

fractional Brownian motion, since the fractal dimension in medical images may be obtained from

the Hurst exponent [9]. Furthermore, traﬃc phenomena is connectionless networks can be modeled

and analyzed via a fractional Brownian motion [23].

Having the motivation that simulation of fractional stochastic processes and MC techniques

are widely applied in science, engineering, and ﬁnance, we present in this paper the advantages

of using a QRN generator versus its classical counterpart (pseudo-random numbers) for increased

2

computational eﬃciency and accuracy. Our purpose is to simulate faster and more eﬃciently

stochastic processes that are not analytically tractable.

We begin with a short description of our QRN generator and show the advances of our exper-

imental device as it compares with similar products available in the industry and other research

laboratories. We discuss in Section 3 the fractional Brownian motion (fBM) and its properties,

present some well-known simulation methods, and compare the outcomes of the simulation via

PRNs versus QRNs in terms of speed and performance. Thereafter, we present in Section 4 some

relevant applications to fractional stochastic processes. We ﬁrst discuss the Rough Fractional

Stochastic Volatility (RFSV) model from a seminal paper [14] and show the applicability of frac-

tional stochastic processes in volatility modeling in ﬁnance.

In a similar manner, we deﬁne a

fractional SABR (fSABR) model and price some path dependent/exotic volatility options under

the fSABR model. Finally, we use our QRNs to price these same ﬁnancial instruments under the

fSABR model and compare them to pseudo random number methods. The paper ends with several

conclusions and directions for future research.

2. The Quantum Random Number Generator

Random numbers are key for a wide range of applications, spanning issues like encryption,

cryptography, and numerical simulations in physics, biochemistry, molecular biology or ﬁnance,

see [18], [1]. Classical approaches for generating random numbers (the so-called pseudo-random

numbers, which are generated by complex yet deterministic numerical algorithms on classical/non-

quantum computers) are often insuﬃcient to meet the growing demands in data security and

accuracy, see for instance [10].

2.1. Experimental setup

In a recent paper [22], we present a viable source of unbiased quantum random numbers whose

statistical properties can be programmed without need for post-processing. The device is based on

measuring the arrival times of single photons in shaped temporal modes, as illustrated in Figure

1. We also demonstrate direct generation of genuine QRNs in user-deﬁned, arbitrary distribution

functions, with superior statistical properties than existing devices.

2.2. NIST and Dieharder tests

To assess the quality of our QRN generator, we ﬁrst generate a large amount of random num-

bers. The data (QRNs) contains 2.07732758 × 108 random integers in the set

ni ∈ [0, 4.294967288 × 109] ∩ Z, i = 1, 2, . . . , 207732758

3

Figure 1: (a) The laser source; (b) diagram of the experimental setup for the QRN Generator

written on 32 bits. The histogram and the normalized histogram of the sample are given in

Figure 2. Note that the generated numbers are uniformly distributed. By applying the Ziggurat

algorithm or the Box–Muller transform, one can transform the uniform distribution into a standard

normal distribution. The summary of results is given in Figure 3.

In particular, generating

normally distributed samples is straightforward from the experimental point of view which makes

preprocessing/transformation of our data unnecessary.

The NIST tests [25] and Dieharder tests1,2 were applied to our QRNs.

In order to repeat

a test that returns “weak”, we used the option -Y 1 in the Dieharder routine, also known as

“resolve ambiguity mode”. We observed that our QRNs exhibit the desired statistical properties.

NIST and Dieharder tests were applied (see Figure 4 for a summary of results). As it turns out,

our QRNs pass all Dieharder tests for randomness, with all the p–values consistently above the

signiﬁcance level with high conﬁdence. Moreover, our QRN generator can produce samples with

any preassigned distribution as illustrated in ﬁgure 5, where we show the histograms of QRNs in

a modiﬁed Bessel distribution and an arbitrary distribution, respectively.

We present in Table 1 a comprehensive comparison between QuEST QRNs, ID Quantique

(IDQ)3, and Australian National University (ANU) Quantum Random Numbers Server4 QRNs.

The random sample from IDQ and ANU were obtained via publicly available sources. In addition,

several QRN samples were obtained by using the ID Quantique device Quantis-USB Model: USB-

1Dieharder tests are presented here: http://webhome.phy.duke.edu/ rgb/General/dieharder.php
2Linux manual for Dieharder routines is available here: https://linux.die.net/man/1/dieharder
3Swiss company ID Quantique oﬃcial website: http://www.idquantique.com/
4Australian National University Quantum Random Numbers Server: https://qrng.anu.edu.au/

4

Source

Data Size

Sample Size

Range

Distribution

NIST

Dieharder

(MB)

(32-bit int)

pass rate

pass rate

QuEST Lab

ANU 1

ANU 2

IDQ (web data)

IDQ Quantis Device 1

IDQ Quantis Device 2

830.9

1050

104.9

125

100

100

2.077 ×108

[35, 4.295 ×109]

2.621 ×108

[20, 4.295 ×109]

0.262×108

[143, 4.295 ×109]

0.3125 ×108

[38, 4.295 ×109]

0.25 ×108

[13, 4.295 ×109]

0.25 ×108

[118, 4.295 ×109]

Uniform

Uniform

Uniform

Uniform

Uniform

Uniform

15/15

15/15

15/15

15/15

15/15

15/15

31/31

31/31

28/31

28/31

29/31

28/31

Table 1: Comparison of our QRNs with their ANU and IDQ counterparts in terms of randomness tests.

4M.V.13.11.08. Note that the QRNs generated at SIT outperform their counterparts, since our

random numbers pass all the required statistical tests. By comparison, the IDQ numbers fail some

Dieharder tests. The ANU numbers have similar quality as SIT QRNs, the only major diﬀerence

being the generation speed (ANU has 5.7 Gbits/sec, while we can generate at 8 Gbits/sec). More-

over, our QRN generator can generate samples in any pre-speciﬁed distribution.

In particular,

generating normally distributed samples is straightforward from the experimental point of view.

Furthermore, the functionality of our device can be extended to ensure secure encryption, fast

communication, and more reliable and eﬃcient Monte Carlo simulations.

3. Fractional Brownian motion

We present in this section some well-known properties of the fractional Brownian motion (fBM),

and we implement several simulation algorithms using both pseudo and quantum random numbers.

3.1. Properties

Let Wt and Bt, t ≥ 0 be two independent Brownian motions (fBM), and denote with W H
t

and BH
t

the fBMs driven by Wt and Bt, respectively. By deﬁnition, a fractional Brownian motion

(fBM) with Hurst parameter H ∈ (0, 1) is a zero mean Gaussian process W H = {W H

t , t ≥ 0} with

a temporal covariance function given by

γ(s, t) = E (cid:2)W H

s W H
t

(cid:3) =

1
2

(cid:0)t2H + s2H − |t − s|2H (cid:3) , ∀s, t ≥ 0.

(1)

This process was ﬁrst introduced by Kolmogorov in [17] and later studied by Mandelbrot and Van

Ness in the pioneering work [20]. The fBM is deﬁned via the following stochastic representation:

W H
t

:=

1
Γ (cid:0)H + 1

2

(cid:1)

(cid:20)(cid:90) 0

−∞

(cid:16)

(t − s)H−1/2 − (−s)H−1/2(cid:17)

dWs +

(t − s)H−1/2dWs,

(cid:21)

(2)

(cid:90) t

0

5

Figure 2: The histogram and the normalized histogram for allRandomNum.bin

Figure 3: Probability density functions obtained from a sample of 2 × 108 uniformly distributed random integers via

Box–Muller and Ziggurat transform, respectively. The algorithms were implemented in C++ on a 2.4 GHz 6-Core

Intel Xeon Processor. The execution time is 173.011 and 142.731 seconds, respectively.

6

00.511.522.533.544.5Random numbers×10900.511.522.5Frequency×106Histogram for allRandomNum.bin00.511.522.533.544.5Random numbers×10900.511.522.5Normalized frequency×10-10Normalized histogram having computed area = 1-6-4-20246Random Numbers00.050.10.150.20.250.30.350.4FrequencyProbability Density obtained via Box-MullerNormalized Histogram from sampleStandard normal pdf-6-4-20246Random Numbers00.050.10.150.20.250.30.350.40.45FrequencyProbability Density obtained via ZigguratNormalized Histogram from sampleStandard normal pdfFigure 4: (a) Histogram of photon arrival times; (b) P-values for Dieharder test routines. Note that our QRNs pass

all the statistical tests from the Dieharder test suite. This ﬁgure is a reproduction of Figure 2 in [22].

7

Figure 5: Modiﬁed Bessel distribution (top) or arbitrary distribution (bottom). We note that our QRN generator

can produce samples in real–time from any given distribution with high speed and accuracy. This ﬁgure is a

reproduction of Figure 2 in [22].

8

where {Ws, s ≥ 0} is a Brownian motion and Γ(·) represents the Gamma function. Note that W
is recovered by taking H = 1

2 in (2). We further remark that this representation in terms of an
integral with respect to Brownian motion is non-unique; see e.g. [26]. A representation in terms

of the Molchan-Golosov kernel will also be used in the sequel. That is,

BH

t =

(cid:90) t

0

K(t, s)dBs,

where K is the Molchan-Golosov kernel

K(t, s) = cH (t − s)H− 1

2 F

(cid:18)

H −

1
2

,

1
2

− H, H +

1
2

; 1 −

(cid:19)

t
s

1[0,t](s),

(3)

with

(cid:34)

cH =

2HΓ (cid:0) 3

2 − H(cid:1)

Γ(2 − 2H)Γ (cid:0)H + 1

2

(cid:35)1/2

(cid:1)

,

and F is the Gauss hypergeometric function.

It can be shown that a normalized fractional Brownian motion {W H

t }t≥0 with H ∈ (0, 1) is

uniquely characterized by the following properties:

(i) W H

t has stationary increments

(ii) W H

0 = 0, E[W H

t ] = 0, Var(W H

t ) = E[(W H

t )2] = t2H , ∀t ≥ 0

(iii) W H

t has a Gaussian distribution for t > 0.

From (1) we deduce that

E[|W H

t − W H

s |] = |t − s|2H

and, as a consequence, the trajectories of W H are almost surely locally α−H¨older continuous for

all α ∈ (0, H). Since W H is not a semi-martingale nor Markovian if H (cid:54)= 1/2, we cannot use the

stochastic calculus of Itˆo with respect to the fBM. Over the past years, some new techniques have

been developed in order to deﬁne stochastic integrals with respect to a fBM, e.g. the Skorokhod

integral deﬁned in the framework of the Malliavin calculus [24], [4], or the pathwise Riemann-

Stieltjes integral [27].

3.2. Simulation and comparison

A plethora of methods are available for simulating sample paths of fBMs, and we refer the

reader to [12] for a good review of properties and algorithms. Let

Π = {0 = t0, t1, . . . , tn = T }

such that t0 < t1 < · · · < tn be a partition of the ﬁxed time interval [0, T ]. We consider here two

methods for testing purposes:

9

(i) The Davies and Harte method for generating fBM samples {W H
t0

, W H
t1

, . . . , W H
tn

} on the par-

tition Π was implemented. The algorithm was originally proposed by [11] and it is presented

in detail in Section 2.1.3 of [12].

(ii) The hybrid scheme for Brownian semistationary processes given in [5] was used to generate

sample paths for fBMs {BH
tk

, k = 0, 1, 2, . . . , n} using the Molchan–Golosov kernel. The

algorithm is based on discretizing the stochastic integral representation of the process in the

time domain. More recently, [21] considered methods for turbocharging Monte Carlo pricing

under the so–called rough Bergomi model.

In order to evaluate the algorithms, several test routines calculating moments and errors for

fractional processes have been implemented: mean µ and variance v as a function of time via

Monte Carlo simulations, a chi–square test for fractional Gaussian noise [12], [6], as well as the 2D

correlation structure γM C via sample paths:

µk ≡ µ(tk)

:=

vk ≡ v(tk)

:=

γM C
kj ≡ γM C(tk, tj)

:=

1
N

N
(cid:88)

i=1

1
N − 1

1
N − 1

BH

i (tk),

N
(cid:88)

(cid:16)

i=1

N
(cid:88)

(cid:16)

i=1

BH

i (tk) − µ(tk)

(cid:17)2

,

BH

i (tk) − µ(tk)

(cid:17)(cid:16)

BH

i (tj) − µ(tj)

(cid:17)

(4)

(5)

(6)

where k, j = 0, 1, 2, . . . , n and N is the number of MC paths. The results are presented in Figure 6

(Davies and Harte method), and Figures 7 and 8 (hybrid scheme). By inspection, we notice that

the generated sample paths have the required properties that are speciﬁc to fBMs.

We employ now for comparison purposes the same simulation methods using this time QuEST

QRNs. Fractional BM paths are generated via the hybrid scheme using both QRNs and PRNs.

Statistical properties for sample fBM paths using both PRNs and QRNs are shown in Figure 9.

To measure our QRNs performance, we introduce the following errors:

(cid:118)
(cid:117)
(cid:117)
(cid:116)

(cid:118)
(cid:117)
(cid:117)
(cid:116)

(cid:118)
(cid:117)
(cid:117)
(cid:116)

ε1 =

ε2 =

ε3 =

1
n + 1

1
n + 1

n
(cid:88)

k=0

n
(cid:88)

k=0

µ2
k

(cid:0)vk − t2H

k

(cid:1)2

1
(n + 1)2

n
(cid:88)

n
(cid:88)

(cid:16)

k=0

j=0

γM C
kj − γ(tk, tj)

(cid:17)2

10

(7)

(8)

(9)

Source of randomness N

ε1

ε2

ε3

10,000

50,000

0.00931595

0.00631624

0.08907148

0.00399428

0.00322211

0.08883075

PRN

100,000

0.00187179

0.00215443

0.08904862

500,000

0.00079351

0.00118751

0.08925236

1,000,000

0.00063936

0.00063936

0.08935881

10,000

50,000

0.00210541

0.00427726

0.030099337

0.00107404

0.00204733

0.030027625

QRN

100,000

0.00071814

0.00105875

0.030092520

500,000

0.00039584

0.00050180

0.030153221

1,000,000

0.00028751

0.00041583

0.030184910

Table 2: Comparison between RMSEs for PRN versus QRN as a function of the number of MC paths N .

Note that εi, i = 1, 2, 3 are the root mean squared errors with respect to the ﬁrst two moments

and covariance in time of our simulated fBM paths. We present in Table 2 the errors for diﬀerent

numbers of MC paths N and diﬀerent source of randomness (quantum versus classical). The

corresponding plots are given in Figure 10. We note that the QRN rate of convergence is superior

to its classical counterpart, thus yielding similar performance with less random samples. Moreover,

it is clear that the execution time is smaller when using QRNs, since no post-processing algorithm

is applied (as opposed to PRNs, where Box-Muller or Ziggurat transformations need to be applied)

and the random numbers are fed in real–time to the path generation algorithm. The function ε3(N )

is almost constant, but we note once again that QRNs provide superior results.

4. Applications to fractional stochastic processes

We discuss now some interesting applications of our QRNs in ﬁnancial engineering: the rough

fractional stochastic volatility model and pricing of a volatility dependent option assuming the

fractional SABR model.

4.1. The Rough Fractional Stochastic Volatility model

The analysis presented in this section is based on [14], where the authors propose the so–called

Rough Fractional Stochastic Volatility (RFSV) model, which was shown to be compatible with

the empirical smoothness of volatility in ﬁnancial markets. Moreover, it was shown via empirical

analysis that the log–volatility process estimated from high–frequency ﬁnancial data behaves like

a fBM with Hurst exponent of order 0.1.

11

Figure 6: One path of simulated fBM via Davies and Harte method (left) and its variance structure using PRNs

(right). Parameters are H = 0.2, T = 1 year, n = 252 samples, N = 106 paths.

Figure 7: Mean (left) and variance (right) for fBM paths generated via the hybrid scheme and PRNs. Parameters

are H = 0.2, T = 1 year, n = 252 samples, N = 50, 000 paths.

Figure 8: Covariance function of fBM γ(s, t) := 1
2
on the domain Π × Π. Parameters are H = 0.2, T = 1 year, n = 252 samples, N = 50, 000 paths.

(cid:0)t2H + s2H − |t − s|2H (cid:1) (left) and error γ(s, t) − γM C (s, t) (right)

12

00.10.20.30.40.50.60.70.80.91Time-1-0.500.511.522.53WH(t)Fractional Brownian Motion with Hurst parameter H = 0.200.10.20.30.40.50.60.70.80.91Time-0.00500.0050.010.0150.020.0250.030.035E[WH(t)]Var[WH(t)] - t2H0.00.20.40.60.81.0t−0.0100−0.0075−0.0050−0.00250.00000.00250.00500.00750.0100E[WHt]Expected value of simulated fBM for N = 50000 paths0.00.20.40.60.81.0t0.00.20.40.60.81.0Var(WHt)Variance of simulated fBM for N = 50000 pathst2HMonte Carlot0.00.20.40.60.81.0s0.00.20.40.60.81.0γ-1.0-0.7-0.4-0.20.10.40.71.01.21.5Covariance function γ(s,t)t0.00.20.40.60.81.0s0.00.20.40.60.81.0-0.05-0.04-0.03-0.02-0.010.010.020.030.040.05Absolute error surfaceFigure 9: Comparison between fBM statistical properties via PRNs and QRNs. It is easy to notice that similar

accuracy may be obtained with a smaller number of MC trials.

Figure 10: RMSE for mean and variance on the partition Π versus N . Plot corresponds to Table 2. Parameters are

H = 0.1, T = 0.5, n = 500.

13

0.00.10.20.30.40.5t−0.004−0.0020.0000.0020.0040.0060.008E[WHt]Expected value of simulated fBMy = 0MC via PRN with N = 100,000MC via QRN with N = 25,0000.00.10.20.30.40.5t0.00.10.20.30.40.50.60.7Var(WHt)Variance of simulated fBMt2HMC via PRN with N = 100,000MC via QRN with N = 25,0000.00.10.20.30.40.5t−0.0050.0000.0050.0100.015E[WHt]Expected value of simulated fBMy = 0MC via PRN with N = 25,000MC via QRN with N = 25,0000.00.10.20.30.40.5t0.00.10.20.30.40.50.60.70.8Var(WHt)Variance of simulated fBMt2HMC via PRN with N = 25,000MC via QRN with N = 25,00002000004000006000008000001000000N (number of MC paths)0.0000.0020.0040.0060.008ε1(N)RMSE 1. Parameters: H = 0.10, T = 0.5, n = 500PRNQRN02000004000006000008000001000000N (number of MC paths)0.0010.0020.0030.0040.0050.006ε2(N)RMSE 2. Parameters: H = 0.10, T = 0.5, n = 500PRNQRNConsider the following model from [14]:

σt = σ0 exp{Xt}

dXt = νdW H

t − α(Xt − m)dt, X0 = x0 > 0,

(10)

with m ∈ R, and α, ν, σ0 as positive parameters. Note that by choosing the fractional Ornstein-

Uhlenbeck process (fOU) for the log volatility above ensures a stationary model. Recall that the

fBM can be alternatively characterized by:

(cid:12)
(cid:12)W H

t+∆ − W H
t

(cid:12)
(cid:12)

q

= Kq∆qH ,

(11)

for any t ∈ R, ∆ ≥ 0, q > 0, where Kq is the qth-moment of the absolute value of a standard

Gaussian variable.

4.1.1. Full circle calibration and estimation

We implement now a full circle calibration and estimation analysis of the RFSV model, which

can be summarized in the following steps:

(i) Initialize the parameters and simulate one path of fBM using QuEST QRN generator.

(ii) Construct one path for a stationary fOU process {Xt}t≥0 and for the fractional stochastic

volatility process {σt}t≥0 given in (10).

(iii) Compute the function m(q, ∆) deﬁned as:

m(q, ∆) =

1
N

N
(cid:88)

k=1

(cid:12)log(σk∆) − log(σ(k−1)∆)(cid:12)
(cid:12)
(cid:12)

q

The plot of log m(q, ∆) versus log ∆ for diﬀerent values of q is given in Figure 11.

(iv) Note that for a given q, the points lie on a straight line. Thus the log volatility increments

have the following scaling property in expectation:

(cid:12)
(cid:12)log(σk∆) − log(σ(k−1)∆)(cid:12)
(cid:12)

q

= Kq∆ζq , k = 1, 2, . . . , N

where ζq > 0 is the slope associated with q. Compare this with (11) and further note that ζq

is linear with respect to q, i.e. ζq ∼ qH. Thus the slope of this line is the Hurst parameter.

From our simulations, we obtained H = 0.1354 (in order to generate the sample path, we

used H = 0.14).

(v) We estimate the Hurst parameter from log σt samples via diﬀerence variance method and the

Peng method, see [12]. We obtain H = 0.1121 and H = 0.1385, respectively. The results are

plotted in Figure 12.

14

Figure 11:

log m(q, ∆) as a function of log ∆ for simulated data and estimating the Hurst parameter by using

ζq ∼ Hq. We obtain H = 0.1354 (the true value is H = 0.14)

Figure 12: Estimating the Hurst parameter from log σt samples via diﬀerence variance method and Peng method.

We obtain H = 0.1121 and H = 0.1385, respectively (the true value is H = 0.14).

15

100101102103104105log(∆)10-410-310-210-1100log m(q,∆)Simulation based analysisq = 0.5q = 1q = 1.5q = 2q = 30.511.522.53q0.050.10.150.20.250.30.350.40.45ζq0123456Log10(Aggregate Level)-4-3.5-3-2.5-2-1.5Log10(Difference Variance)Difference Variance Method1.522.533.544.555.56Log of Aggregate Level-20246810Log of Residual VariancePeng Method4.1.2. Empirical Analysis

We repeat the analysis from above for several well know equity indices and market indica-

tors: S&P500, DAX30, Swiss Market Index, and the NASDAQ100. We use precomputed real-

ized variance estimates from the Oxford-Man Institute of Quantitative Finance Realized Library

(OMIQF)5. The results are given in Figures 13 to 15. Note that we always obtain H < 0.5 (of

order 0.1) thus conﬁrming the results in [14]. We also present in Figure 17 a sample path of the

RSFV model–generated volatility together with a graph of DAX volatility. It can be noted by

simple visual inspection the striking similarity between the paths. We observe that while some

data points of the function m(q, ∆) for ﬁxed q may have a poorer linear ﬁt, the main conclusion is

always the same: H < 0.5, thus conﬁrming the rough nature of the stochastic volatility process.

Furthermore, we implement our own procedure for estimating the realized volatility based on

daily prices, which we obtain from the Bloomberg terminal. Let 0 = t0 < t1 < · · · < tn = T
be a partition of the time interval [0, T ] into n equal segments of length ∆t, i.e., ti = iT

n for

i = 0, 1, . . . , n. The majority of traded contracts deﬁne realized variance to be [7]:

Vd(0, n, T ) =

AF
n − 1

n−1
(cid:88)

(cid:18)

i=0

ln

Si+1
Si

(cid:19)2

for n return observations, where AF is the annualized factor usually set to AF = 252. Vd(0, n, T )

is called the discretely sampled realized variance from 0 to T > 0. We implement the formula

above for SPX, DAX, NASDAQ, and the Swiss Market Index. Our data consists in daily closing

prices from August 16 2000 to August 16 2017. The results are plotted in Figure 18.Our results

are consistent with the live data for realized variance from the Oxford-Man Institute for Quanti-

tative Finance. Further, we implemented the procedure described above for estimating the Hurst

exponent using our own computed realized volatility. Once more, the results are consistent with

the previous experiments.

Let Vc(0, T ) be the so–called continuous realized variance where one has

Vc(0, T ) = lim
n→∞

Vd(0, n, T ).

Furthermore, assuming a stochastic volatility model σt, t ≥ 0, it can be proved that the continuous

realized variance is given by:

Vc(0, T ) =

1
T

(cid:90) T

0

σ2
t dt.

5http://realized.oxford-man.ox.ac.uk/data/download

16

Similar to [14], we conclude from our market analysis that the volatility is indeed rough, i.e.,

can be successfully modeled as an exponential of a scaled fBM. Estimation of the Hurst parameter,

which is essential to the nature of fBMs, turns out to be reliable, robust, and numerically eﬃcient.

4.2. The lognormal fractional SABR model

The price of underlying asset St and its instantaneous volatility αt in the lognormal fSABR

model are governed by the following stochastic diﬀerential equation:

= αt(ρdBt + ρdWt),

dSt
St
αt = α0eνBH
t ,

(12)

(13)

is the fractional

where Bt and Wt are independent Brownian motions, ρ = (cid:112)1 − ρ2, and BH
Brownian motion driven by Bt. For ﬁxed K > 0, we deﬁne Xt = log St

t

K and Yt = αt. Then we

have

dXt = Yt(ρdBt + ρdWt) −
Yt = Y0eνBH
t .

1
2

Y 2
t dt = Ytd(cid:102)Wt −

1
2

Y 2
t dt,

(14)

(15)

In [2] the authors derive a bridge representation for the joint transition probability density

p(t, xt, yt|x0, y0) of (Xt, Yt) from fSABR. Furthermore, the authors have also shown that their

bridge representation can be regarded as a generalization of the McKean kernel density with

respect to the Riemannian volume from 1
y2
t

dxtdyt.

4.3. Target Volatility Options Pricing via Quantum Random Numbers

We price target volatility options (TVO) under a fBM stochastic process via MC methods using

the QRNs described in the previous sections. A similar problem was approached in [3], where the

authors derived two analytic approximations of TVO prices. The Python implementation using

PRNs (similar to our MC pricing presented here) is available online on the GitHub platform6.

We indicate here that our method is more eﬃcient from a numerical point of view than its

classical counterpart using pseudo-random numbers generated on a classical computer. The fSABR

model is used where fBM paths are generated using both QRNs and PRNs.

A target volatility (TV) call struck at K > 0 pays oﬀ at expiry T > 0 the amount

√

T

(cid:0)eXT − 1(cid:1)+

,

(16)

K σ
(cid:113)(cid:82) T

0 Y 2

t dt

σ
(cid:82) T
0 α2

t dt

(cid:113)

1
T

(ST − K)+ =

6https://github.com/studor/TVO pricing fSABR

17

Figure 13: log m(q, ∆) vs.

log ∆ for S&P 500 realized variance estimates from OMIQF and estimating the Hurst

parameter by ζq ∼ Hq. We have H = 0.10091

Figure 14: log m(q, ∆) as a function of log ∆ for DAX realized variance estimates from OMIQF and estimating the

Hurst parameter by ζq ∼ Hq. We have H = 0.11878

18
Figure 15: log m(q, ∆) vs. log ∆ for Swiss Market Index. We estimate H = 0.11714

100101102103log(∆)10-210-1100101log m(q,∆)S&P Indexq = 0.5q = 1q = 1.5q = 2q = 2.5q=30.511.522.53q00.050.10.150.20.250.30.35ζq100101102103log(∆)10-210-1100101log m(q,∆)DAX Indexq = 0.5q = 1q = 1.5q = 2q = 2.5q=30.511.522.53q0.050.10.150.20.250.30.35ζq100101102103log(∆)10-210-1100101log m(q,∆)Swiss Market Indexq = 0.5q = 1q = 1.5q = 2q = 2.5q=30.511.522.53q0.050.10.150.20.250.30.350.4ζqFigure 16: log m(q, ∆) vs. log ∆ for NASDAQ. We obtain H = 0.098903

Figure 17: Volatility of the DAX and of the model

Figure 18: S&P 500 daily closing prices and calculated realized volatility. Our results match the realized volatility

data from the Oxford–Man Institute for QF.

19

100101102103log(∆)10-210-1100101log m(q,∆)NASDAQ Indexq = 0.5q = 1q = 1.5q = 2q = 2.5q=30.511.522.53q00.050.10.150.20.250.3ζq5001000150020002500300035004000Sample0.010.020.030.040.050.060.07Volatiltiy σDAX Data0.511.522.533.54Sample×1060.0050.010.0150.020.0250.030.0350.040.045Volatiltiy σModel050010001500200025003000350040004500Sample (Days)600800100012001400160018002000220024002600PriceSPX Index from August 16 2000 to August 16 2017050010001500200025003000350040004500Sample (Days)00.010.020.030.040.050.060.070.080.09Realized VolComputed Realized Volatility for SPX using daily priceswhere σ > 0 is the (preassigned) target volatility level and ∀x ∈ R, (x)+ := max{x, 0}. Note that,

if at expiry the realized volatility is higher (lower) than the target volatility, the payoﬀ is scaled

down (up) by the ratio between target volatility and realized volatility. For t ≤ T , the price at

time t of a TVO call struck at K with expiry T is hence given by the conditional expectation under

the risk neutral probability Q as

√

T E

K σ





1

(cid:0)eXT − 1(cid:1)+

(cid:113)(cid:82) T

0 Y 2

τ dτ



Ft



(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(17)

provided the expectation is ﬁnite. Finally, we price both TVO call options and the following new

contract type called a target volatility put option, having the payoﬀ:

(cid:115)

1
σ

1
T

(cid:90) T

0

t dt (K − ST )+ =
α2

(cid:115)

(cid:90) T

0

K
√

T

σ

t dt (1 − eXT )+.
Y 2

(18)

Note that the target volatility is in the denominator instead of the numerator, see [3] for compar-

ison. MC methods via PRNs and QRNs were implemented and the results are shown in Figures

19 and 20. Note that once again, we observe more accurate pricing using QRN generated MC

paths. Speciﬁcally, Figure 19 compares the convergence a MC simulation based on QRNs using

25k paths versus MC PRNs using 100k paths. Figure 20 shows faster convergence of MC QRN as

a function of the number of MC paths N . We conclude that by using QRNs, MC simulations for

TVO pricing become far more eﬃcient than its classical counterpart.

5. Conclusions and future research

In this paper, we showed a novel use of quantum random numbers for simulating stochastic

processes. The photonic quantum system used here produced truly random numbers that passed all

standard randomness tests such as NIST and Dieharder. Furthermore, the eﬃciency, accuracy, and

execution time of our QRNs were demonstrated by the rapid convergence and robustness of using

these numbers to simulate fractional Brownian motion – a highly nontrivial stochastic process being

both non-Markovian while maintaining strict scaling properties. Finally, we successfully priced

target volatility options under the fractional SABR model, a relevant and interesting application

for both academics and quantitative ﬁnance practitioners.

The results of this paper can be easily generalized: we conjecture that QRN MC trials for

path dependent-exotic options and multi-asset correlated options will turn out to be computation-

ally less expensive and more accurate. Some future applications include: (i) multi-dimensional

correlated simulation paths following arbitrary distributions may be eﬃciently created via the

20

Figure 19: Comparison between TVO calls/puts pricing via PRNs and QRNs. We used 44 strikes and ﬁxed maturity

T . It is clear that the same performance can be obtained with a smaller number of MC trials using QRNs

Figure 20: Convergence of TVO call and put price with the number of MC paths N . We notice that QRN have

superior properties, as the price reaches convergence faster than its classical counterpart (PRN). Parameters are

H = 0.1, S0 = K = 1, σ0 = σ = 0.3, ρ = −0.5, T = 0.5, n = 500.

21

0.80.91.01.11.2K/S00.0000.0250.0500.0750.1000.1250.1500.1750.200TVO Call PriceT=1.00,H=0.20,ρ=−0.90,ν=0.15,σ0=0.10,̄σ=0.10MC via PRN with N = 100,000MC via QRN with N = 25,0000.80.91.01.11.2K/S00.000.050.100.150.20TVO Putt PriceT=0.50,H=0.20,ρ=0.40,ν=0.05,σ0=0.10,̄σ=0.10MC via PRN with N = 100,000MC via QRN with N = 25,0000.80.91.01.11.2K/S00.0000.0250.0500.0750.1000.1250.1500.1750.200TVO Call PriceT=0.50,H=0.20,ρ=0.40,ν=0.05,σ0=0.10,̄σ=0.10MC via PRN with N = 25,000MC via QRN with N = 25,0000.80.91.01.11.2K/S00.000.050.100.150.20TVO Putt PriceT=0.50,H=0.20,ρ=0.40,ν=0.05,σ0=0.10,̄σ=0.10MC via PRN with N = 25,000MC via QRN with N = 25,00002000004000006000008000001000000N (number of MC paths)0.084500.084750.085000.085250.085500.085750.086000.086250.08650TVO callTVO call price as a function of NPRNQRN02000004000006000008000001000000N (number of MC paths)0.08520.08540.08560.08580.08600.0862TVO putTVO put price as a function of NPRNQRNquantum methods described in this paper; (ii) the paths generated in (i) are crucial for pricing

both multi-asset derivatives but more importantly, for use in the risk analysis for large portfolios

of such options [8]; (iii) enterprise wide regulatory risk calculations (Basel III, CVA, XVA, etc.,

see [8]) require and enormous amounts of multi-dimensional correlated simulation paths following

arbitrary distributions. QRN will show their true strength under such pricing scenarios which is a

future research.

22

References

[1] Antonio Ac´ın, Serge Massar, and Stefano Pironio. Randomness versus nonlocality and entan-

glement. Physical review letters, 108(10):100402, 2012.

[2] Jiro Akahori, Xiaoming Song, and Tai-Ho Wang. Probability density of lognormal fractional

sabr model. arXiv preprint arXiv:1702.08081, 2017.

[3] Elisa Alos, Rupak Chatterjee, Sebastian Tudor, and Tai-Ho Wang. Target volatility option

pricing in lognormal fractional sabr model. arXiv preprint arXiv:1801.08215, 2018.

[4] Elisa Alos, Olivier Mazet, and David Nualart. Stochastic calculus with respect to gaussian

processes. Annals of probability, pages 766–801, 2001.

[5] Mikkel Bennedsen, Asger Lunde, and Mikko S Pakkanen. Hybrid scheme for brownian semis-

tationary processes. Finance and Stochastics, 21(4):931–965, 2017.

[6] Jan Beran. Statistics for long-memory processes, volume 61. CRC press, 1994.

[7] Mark Broadie and Ashish Jain. Pricing and hedging volatility derivatives. The Journal of

Derivatives, 15(3):7–24, 2008.

[8] Rupak Chatterjee. Practical Methods of Financial Engineering and Risk Management.

Springer-Apress, 2014.

[9] C-C Chen, John S DaPonte, and Martin D Fox. Fractal feature analysis and classiﬁcation in

medical imaging. IEEE transactions on medical imaging, 8(2):133–142, 1989.

[10] Timothy H Click, Aibing Liu, and George A Kaminski. Quality of random number generators

signiﬁcantly aﬀects results of monte carlo simulations for organic and biological systems.

Journal of computational chemistry, 32(3):513–524, 2011.

[11] Robert B. Davies and D.S. Harte. Tests for Hurst eﬀect. Biometrika, 74(1):95–101, 1987.

[12] Ton Dieker. Simulation of fractional Brownian motion. MSc theses, University of Twente,

Amsterdam, The Netherlands, 2004.

[13] Patrick Flandrin. Wavelet analysis and synthesis of fractional brownian motion. IEEE Trans-

actions on information theory, 38(2):910–917, 1992.

[14] Jim Gatheral, Thibault Jaisson, and Mathieu Rosenbaum. Volatility is rough. Quantitative

Finance, pages 1–17, 2018.

23

[15] Paul Glasserman. Monte Carlo methods in ﬁnancial engineering, volume 53. Springer Science

& Business Media, 2013.

[16] Miguel Herrero-Collantes and Juan Carlos Garcia-Escartin. Quantum random number gener-

ators. Reviews of Modern Physics, 89(1):015004, 2017.

[17] Andrei N Kolmogorov. Wienersche spiralen und einige andere interessante kurven in

hilbertscen raum, cr (doklady). Acad. Sci. URSS (NS), 26:115–118, 1940.

[18] Christian Kurtsiefer, P Zarda, Matthus Halder, H Weinfurter, PM Gorman, PR Tapster,

and JG Rarity. Quantum cryptography: A step towards global key distribution. Nature,

419(6906):450, 2002.

[19] Xiongfeng Ma, Xiao Yuan, Zhu Cao, Bing Qi, and Zhen Zhang. Quantum random number

generation. npj Quantum Information, 2:16021, 2016.

[20] Benoit B Mandelbrot and John W Van Ness. Fractional brownian motions, fractional noises

and applications. SIAM review, 10(4):422–437, 1968.

[21] Ryan McCrickerd and Mikko S Pakkanen. Turbocharging monte carlo pricing for the rough

bergomi model. arXiv preprint arXiv:1708.02563, 2017.

[22] Lac Nguyen, Patrick Rehain, Yong Meng Sua, and Yu-Ping Huang. Programmable quantum

random number generator without postprocessing. Optics letters, 43(4):631–634, 2018.

[23] Ilkka Norros. On the use of fractional brownian motion in the theory of connectionless net-

works. IEEE Journal on selected areas in communications, 13(6):953–962, 1995.

[24] David Nualart. The Malliavin calculus and related topics, volume 1995. Springer, 2006.

[25] Andrew Rukhin, Juan Soto, James Nechvatal, Miles Smid, and Elaine Barker. A statistical

test suite for random and pseudorandom number generators for cryptographic applications.

Booz-Allen and Hamilton Inc Mclean Va, 2001.

[26] Gennady Samoradnitsky. Stable non-Gaussian random processes: stochastic models with inﬁ-

nite variance. Routledge, 2017.

[27] Martine Z¨ahle. Integration with respect to fractal functions and stochastic calculus. i. Prob-

ability theory and related ﬁelds, 111(3):333–374, 1998.

[28] Qiang Zhang, Xiaowei Deng, Caixing Tian, and Xiaolong Su. Quantum random number

generator based on twin beams. Optics letters, 42(5):895–898, 2017.

24

