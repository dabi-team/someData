Towards Automated Classiﬁcation of Attackers’
TTPs by combining NLP with ML Techniques

Clemens Sauerwein and Alexander Pfohl
Department of Computer Science
University of Innsbruck
Innsbruck, Austria
Firstname.Secondname@uibk.ac.at

2
2
0
2

l
u
J

8
1

]

R
C
.
s
c
[

1
v
8
7
4
8
0
.
7
0
2
2
:
v
i
X
r
a

Abstract—The increasingly sophisticated and growing number
of threat actors along with the sheer speed at which cyber
attacks unfold, make timely identiﬁcation of attacks imperative to
an organisations’ security. Consequently, persons responsible for
security employ a large variety of information sources concerning
emerging attacks, attackers’ course of actions or indicators of
compromise. However, a vast amount of the needed security
information is available in unstructured textual form, which
complicates the automated and timely extraction of attackers’
Tactics, Techniques and Procedures (TTPs). In order to address
this problem we systematically evaluate and compare different
Natural Language Processing (NLP) and machine learning tech-
niques used for security information extraction in research. Based
on our investigations we propose a data processing pipeline that
automatically classiﬁes unstructured text according to attackers’
tactics and techniques derived from a knowledge base of adver-
sary tactics, techniques and procedures.

Index Terms—Cyber Threat Intelligence, Natural Language

Processing, Machine Learning

I. INTRODUCTION

The increasing complexity, heterogeneity and globally dis-
tribution of modern IT systems combined with the increas-
ing number of sophisticated cyber-attacks manifest serious
threats harming an IT system’s security. Recent high-proﬁle
cyber security events (e.g. WannaCry [1], Meltdown [2] or
Spectre [3]) have shown that the spectrum of possible attacks
steadily increases and that the time frame for organizations
to react shrinks constantly [4]. Accordingly, stakeholders’
responsible for cyber security employ a large variety of
security information sources to obtain information regarding
attackers’ tactics, techniques and procedures (TTPs) [5]. These
sources range from unstructured publicly available information
sources [5] (e.g. mailing lists, expert blogs, social media)
to inter-organizational cyber threat intelligence sharing plat-
forms [6]–[8]. In this context, a tactic can be considered as
a high-level description of an attacker’s behavior, techniques
provide a more detailed description of a behavior in the context
of a tactic, and procedures an even low-level and detailed
description in the context of a technique [9].

Although there are standards (e.g. STIX, OpenIoC,...) for
describing TTPs, the needed information is usually available
in unstructured textual form and cannot be automatically
processed or analysed. However, the situation is exacerbated
by the presence of a large amount of security data, which
makes it difﬁcult to capture TTPs in a timely manner through

manual processes and makes security a big data problem [10].
Accordingly, former research suggests to implement the intel-
ligence cycle [11], including a Processing & Exploitation step
that translates security information into machine-readable for-
mat, to automatically extract TTPs from unstructured security
data [12], [13]. While there are some approaches that deal with
the extraction of security information from unstructured text in
general, it is unclear which approach is suitable for extracting
TTPs from unstructured text. Furthermore, this challenge is
highlighted by the fact that the OSINT goldmine of threat
intelligence has not yet been comprehensively tapped and
offers great potential for future research and practice [14].
To address this research gap, we seek to answer the following
research questions: (1) What are the current approaches to
extract security information from unstructured text by using
NLP and ML techniques? (2) Which NLP and ML techniques
are suitable to extract attackers’ tactics, techniques and pro-
cedures from unstructured threat information?

In order to address these research questions, we conducted a
systematic literature study to identify how research combines
NLP and ML techniques to automatically extract security
information from unstructured text. In a further step, we
evaluated and compared the most commonly used techniques
in order to identify those approaches which are most suitable
to automatically extract attackers’ TTPs. In doing so, we
created a training set as input for these techniques based on
the ATT&CK [15] framework. Last but not least, we propose
a processing pipeline which might be used to automatically
extract attackers’ tactics and techniques. The remainder of this
paper is structured as follows: Section II discusses related
work regarding security information extraction. Section III
outlines the applied research methodology to identify, evaluate
and compare NLP and corresponding ML techniques for the
automated extraction of attackers’ TTPs. Section IV provides
an overview of the used NLP and ML techniques, evaluates
them and proposes an information processing pipeline to
automatically extract attackers’ TTPs. Section V discusses the
key ﬁndings and limitations of the research at hand. Section VI
concludes the paper and provides outlook on future work.

II. RELATED WORK

In the past several authors focused on the detection, ex-
traction and analysis of security information from different

 
 
 
 
 
 
data sources [16]. They primarily focused on the extraction of
indicators of compromise [17], [18], vulnerabilities [19]–[23],
security events [24], exploits [25] and other security related
information [26]–[32]. In doing so, they rely on sources like
hacker forums [33]–[39], social media [19], [24], [25], [27]–
[30] and other sources [31], [40]–[43].

However, only a few contributions focused on the detection
and extraction of TTPs in the last few years. For example,
TTPDrill automatically extracts TTPs from unstructured cyber
threat intelligence reports based on a manually created threat
ontology [44]. The same authors developed ActionMiner a
framework that is able to extract a structured list of threat
actions from unstructured threat reports [45]. The MITRE
corporation developed the Threat Report ATT&CK Mapper
(TRAM)1, a web based tool for extracting adversary tech-
intelligence reports in order to
niques from cyber threat
map the extracted information to ATT&CK [15]. Moreover,
the rcATT2 tool bases on an old version of the ATT&CK
framework and automatically extracts tactics and techniques
from unstructured threat reports [46]. Last but not least, [16]
provides a literature review to understand the source, purpose,
and approaches for mining cyberthreat intelligence from un-
structured text.

A variety of approaches and data sources have been used to
extract security information from structured and unstructured
texts in the past. Most of them focus on one speciﬁc method
for each task (e.g. using TF-IDF for vectorization), but do not
consider other methods and compare them among each other.
Our research addresses this gap by evaluating and comparing
different approaches that combine NLP and ML techniques to
extract relevant security information. Finally, based on these
evaluations we propose a processing pipeline for extracting
TTPs from unstructured texts.

III. APPLIED RESEARCH METHODOLOGY

In order to investigate the used NLP and ML techniques to
extract TTPs from unstructured texts, we we conducted a sys-
tematic literature study (see Section III-A) to identify different
approaches combining NLP and ML techniques followed by
an evaluation of the identiﬁed techniques (see Section IV-C)
by using an adversary training data set generated from the
ATT&CK [15] knowledge base. Based on our investigations
we propose a data processing pipeline for the classiﬁcation of
TTPs from unstructured text.

A. Systematic Literature Study

The goal of this literature study was to systematize cur-
rent approaches that combine NLP and ML techniques to
extract security-related information form unstructured texts.
To achieve this goal we conducted a systematic literature
study based on the methodologies by [47] and [48] between
January 2021 and February 2021. In doing so, we applied
the following procedure: deﬁnition of search strategy, initial
search, paper selection, snowballing and data extraction. In

1https://github.com/mitre-attack/tram (Accessed: August 2nd, 2021)
2https://github.com/vlegoy/rcATT (Accessed: August 2nd, 2021)

order to guarantee repeatability and traceability of the research
methodology, a review protocol,
including search strategy,
search results, selection criteria, selection procedure and data
extraction was developed. In the course of the deﬁnition of the
search strategy and with respect to our research objective and
questions, we deﬁned the following search term for our initial
search: (”information security” OR ”vulnerability” OR ”vul-
nerabilities” OR ”cyber security” OR ”cybersecurity” OR
”threat intelligence” OR ”threat” OR ”threats” OR ”cyber
threat intelligence” ) AND (”data mining” OR ”information
extraction” OR ”extracting” OR ”extraction OR ”natural
language processing” OR ”NLP” OR ”machine learning”).
We used the databases ACM Digital Library, AIS Electronic
Library, EBSCOhost, IEEE Xplore Digital Library, Springer
Link, Taylor & Francis Online and Wiley Online Library. Only
papers published between 2009 and 2020 were considered.
Our initial search delivered 5307 papers in total. In the next
step we performed the paper selection. In doing so, we (i)
eliminated all duplicates and excluded all papers that (ii) were
not peer-reviewed or are grey or white literature, (iii) were not
available in full text and (iv) have not used a combination of
NLP and ML techniques. By reading the title, abstracts, and
keywords and by skim reading of full texts of all papers, we (v)
assessed their relevance for answering our research questions
(see Section I). The paper selection resulted in a set of 20 pa-
pers. To avoid overlooking relevant papers, we performed one
iteration of backward snowballing based on [48]. By reviewing
the citations of our 20 selected papers on Google Scholar
with respect to our paper selection procedure, we identiﬁed
additional 6 relevant papers. This procedure resulted in a ﬁnal
set of 26 papers. Finally, we performed data extraction on the
ﬁnal set of 26 papers based on a concept matrix. This matrix
included the following classiﬁcation categories: (i) used NLP
techniques and (ii) ML techniques.

B. Evaluation of NLP and ML Techniques

Based on the results of the systematic literature study we
selected the most common NLP and ML techniques to evaluate
their use for the extraction of TTPs from unstructured texts. In
doing so, different processing pipelines have been built based
on all possible combinations of the identiﬁed NLP and most
widely used ML techniques (see Section IV-B). In order to
implement the NLP techniques we used NLTK3 and gensim4.
For the the ML classiﬁcation task we used scikit-learn5. A
training set was automatically created based on the ATT&CK
framework [15] (see Section IV-B). In order to evaluate the
whole processing pipeline we used performance measures and
ﬁve-fold cross-validation (see Section IV-C. In doing so we
used measures like micro- and macro-averaging scores of
precision, recall and F0.5-score as well as Hamming loss of
the different models.

3https://www.nltk.org/ (Accessed: August 2nd, 2021)
4https://pypi.org/project/gensim/ (Accessed: August 2nd, 2021)
5https://scikit-learn.org/ (Accessed: August 2nd, 2021)

TABLE I
OVERVIEW OF NLP AND ML TECHNIQUES USED IN RELEVANT WORKS TO EXTRACT SECURITY-RELATED INFORMATION FORM UNSTRUCTURED TEXTS

]
4
4
[

]
9
4
[

]
0
5
[

]
0
3
[

]
1
5
[

]
7
1
[

]
8
1
[

]
0
2
[

]
1
2
[

]
6
2
[

]
1
3
[

]
3
2
[

]
2
2
[

]
2
3
[

]
2
5
[

]
3
5
[

]
4
3
[

]
6
3
[

]
7
3
[

]
8
3
[

]
4
2
[

]
7
2
[

]
9
2
[

]
4
5
[

]
1
4
[

]
2
4
[

Tokenization
POS Tagging
NER
Stemming
Lemmatization
Bag-of-Words
TF-IDF
Word Embedding

SVM
NB
Other

1

1

1

1
1
1

1
1

1
1

1
1

1

1

1

1

1

1

1

1

1
1
1

1

1
1
1

1

1

1
1

1

1

1
1

1

1

1

P
L
N

L
M

1
1
1

1

1

1
1

1
1

1

1

1

1
1

1

1

1

1

1

1

1

1

1

1
1

1
1

1
1
1

1

1

1 1

1

1

1

1

1

1
1

1 1
1
1
1
1
1

1

1
1
1

1

1

1

1

1

1

1

1

1

1

IV. RESULTS
In this section we provide a comprehensive overview of
approaches combining NLP and ML techniques to extract
security information from unstructured text (see Section IV-A),
present a processing pipeline combining the most common
NLP and ML techniques identiﬁed in literature (see Sec-
tion IV-B) and its evaluation (see Section IV-C).

A. Techniques to extract security information from unstruc-
tured text

Firstly, our analysis reveals that a plethora of NLP ap-
proaches were used in the identiﬁed literature. As depicted
in table I the following NLP techniques were used in the
analyzed papers: Tokenization (16), Part-of-Speech (POS) Tag-
ging (15), Named-Entity-Recognition (NER) (14), Stemming
(5) and Lemmatization (2). Moreover, we identiﬁed addi-
tional approaches like lower-casing [22], customized extrac-
tion algorithms (e.g. [17]) or the creation of a context-free
grammar [30]. These results indicate that NLP approaches
are used frequently, yet not all steps are reported in the
papers. For example POS by implication is always preceded
by Tokenization, yet this stage wasn’t mentioned in [44].

Secondly, during our analysis, we grouped ML approaches
according to the frequency of their use in the identiﬁed
literature. Accordingly, we elicted the following categories:
Support Vector Machine (SVM) (12), Naive Bayes (NB) (4)
and others. Among the latter were approaches like Neural
Network (NN) based Approaches, Conditional Random Fields
(CRF), Logistic Regression and Random Forest. The reason
why SVMs are the ﬁrst choice might be trace back to their
easy-to-use nature and aptitude for classiﬁcation problems.

B. Processing Pipeline to extract attackers’ TTPs

Based on the identiﬁed NLP and ML techniques, we deﬁned
an evaluation processing pipeline to extract attackers’ tactics
and techniques from unstructured text and transform them to
a standardized data format. It is worth mentioning that we
did not consider attackers’ procedures since our training set
doesn’t provide labeled data on them. As depicted in Figure 1
our evaluation processing pipeline consists of four processes -
TTP Labeling, Processing, Classiﬁcation and STIX Exporting.

Fig. 1. Processing pipeline to extract attackers’ tactics and techniques

As mentioned in Section IV-A, all identiﬁed approaches
used a form of supervised learning. Therefore, we imple-
mented a TTP Labeling process that generates a labeled data
set as input for the Classiﬁcation and ﬁnal cross-validation.
However, our analyzed papers and related work indicated a
lack of publicly available training set for classifying TTPs.
Therefore, we decided to rely on the ATT&CK [15] framework
to automatically create the needed training set. Within the
ATT&CK Knowledge base, reports and threat descriptions
are already part of the descriptions of speciﬁc tactics and
techniques. Accordingly, their labels are implicitly given and
manual labeling is not needed. Therefore we extracted the
data from the ATT&CK GitHub Repository, extracted the
content of each document, ﬁltered them and stored them for
further processing. In doing so we processed 534 documents,
including 417 HTML and 117 PDF documents from 139
different sources.

The next step includes the Pre-processing, Normalization,
Vectorization and Transformation of the security and ATT&CK
based training set. The aim of this Processing step is the
preparation of the data for Classiﬁcation. In order to use
appropriate techniques, the most common NLP techniques
in the analyzed literature (cf. Section III-A) were used. For
the Pre-processing we use Tokenization, POS Tagging and

IoC Replacement. Accordingly, after each IoC in the para-
graphs was replaced by the appropriate natural language term,
tokenization was performed and each token was tagged by
its part-of-speech (POS). This process was performed for
each paragraph in the security and training data set. On the
obtained results Normalization was applied, which can be
achieved by Stemming or Lemmatization. In order to improve
Normalization, additional functionalities,
like lower-casing,
stopwords removal, single-charcater and non-word token re-
moval were implemented. After Normalization we performed
Vectorization by implementing several alternative Vectoriza-
tion techniques. During our systematic literature review several
Vectorization techniques were identiﬁed, namely Bag-of-word
features, TF-IDF and Word Embeddings. Since Bag-of-words
usually refer to word frequencies, but none of the analyzed
papers mentioned the used technique explicitly, we decided to
implement One-hot-endocing, Term Frequency and TF-IDF.
Moreover, since Word Embeddings were discussed quite often
in the literature we decided to implement Doc2Vec as well.
Accordingly, we implemented four possibilities to perform
Vectorization.

As shown by our systematic literature study (cf Sec-
tion III-A, for Classiﬁcation current research primarily focus
on Support Vector Machines (SVM) and Naive Bayes (NB).
Therefore, we decided to include all of the SVM and NB
classiﬁers provided by the scikit-learn library considering that
they are compatible with our previous Vectorization techniques
and the multi-label classiﬁcation problem. In order to fulﬁll
this, we implemented a Transformation process for the Vec-
torization results. In doing so we implemented the Transfor-
mation to the following representations: Binary Relevance,
Classiﬁer Chain and Distributed Representation. For each
of the representations, we used the following classiﬁers for
evaluation: MutlinominialNB, ComplementNB, GaussianNB,
SVC, LinearSVC and SGDClassiﬁer. In doing so, the Classiﬁ-
cation consists of Model training based on the vectorized and
labeled ATT&CK training set and the Prediction of TTPs from
unstructured security data based on the Trained Classiﬁer.

Finally, we transformed the Prediction Results to STIX
format using the STIX Exporting process. In doing so, each of
the resulting predictions was annotated with respective labels
for tactics and techniques. These labels were then used to
query the ATT&CK Repository for the corresponding STIX
Objects to those labels.

C. Proposed processing pipeline to extract attackers’ tactics

In order to ﬁnd the most suitable processing pipeline for the
extraction of tactics and techniques, the processing and classi-
ﬁcation was closely scrutinized. In the course of this, all possi-
ble combinations of processing and classiﬁcations techniques
were evaluated and compared. The following expression de-
scribes all possible combinations that were considered for the
evaluation: Preprocessing AND (Steamming XOR Lemmatiza-
tion) AND (One-hot encoding XOR Term-Frequency XOR TF-
IDF OR Doc2Vec) AND (Binary Relevance XOR Classiﬁer-
Chain XOR Distributed-Representations) AND (Mutlino-

minialNB XOR ComplementNB XOR GaussianNB XOR SVC
XOR LinearSVC XOR SGDClassiﬁer). In this context it is
worth mentioning that all combinations were possible, except
MultinominialNB and ComplementNB were not compatible
with Doc2Vec. Overall, these combinations resulted in 156 dif-
ferent pipelines for evaluation. As described in Section IV-C,
we used performance measures and ﬁve-fold cross-validation
to evaluate these pipelines and ﬁnd the best performing combi-
nation of NLP and ML techniques for the extraction of tactics
and techniques.

Finally, our evaluations showed that Lemmatization, One-
hot encoding combined with Binary Relevance for tactics
and techniques classiﬁcation are best suited for the proposed
processing pipeline. For the classiﬁcation of tactics it turned
out that SGDClassiﬁer performed best, with a prescision of
71.09%, recall of 62.55%, F0.5 score of 69.06% and hamming-
loss of 26.70%. For the classiﬁcation of techniques the most
appropriate classiﬁer was LinearSVC with a precision of
53.43%, recall of 14.88%, F0.5 of 33.68% and hamming-loss
of 5.55%.

V. DISCUSSION
In this section we discuss our key ﬁndings (see Section V-A)

and limitations of our research (see Section V-B).

A. Key Findings

Our research has shown that the most powerful processing
pipeline that combines NLP and ML techniques to extract
attackers’ techniques and tactics from unstructured text uses
the following techniques: (1) Tokenization, (2) POS Tagging,
(3) IoC Replacement, (4) Lemmatization, (5) One-hot encoding
Vectorization, (6) Binary Relevance Transformation and (7)
Support Vector Machine Classiﬁcation. For the latter it turned
out that for tactics the SGDClassiﬁer and for techniques the
LinearSVC performed best. Unfortunately, it was not possible
to classify attackers’ procedures due to a lack of corresponding
training data. Moreover the classiﬁcation of attackers’ tactics
and techniques was complicated by an imbalanced training set.
However, these issues might be traced back to the fact that we
used the ATT&CK framework as basis for our automatically
generated training set. Nonetheless, the lack of a publicly
available training data set and the need for publicly available
labeled and balanced training data sets was highlighted by
other security researchers as well [16].

In addition, during the evaluation of our processing
pipelines, it became apparent that there is no real baseline
or publicly available source code of comparable approaches.
Therefore,
the evaluation of our 156 different processing
pipelines was complicated, and we decided to use the dummy
classiﬁer of the skicit-learn6 as baseline. This baseline worked
well for classifying tactics, but unfortunately was not able to
classify techniques properly. The latter might be due to the
already discussed problem of an imbalanced training set.

Finally, we tried to compare our approach with related work.
Unfortunately, as mentioned above, this was only possible to

6https://scikit-learn.org/ (Accessed: August 2nd, 2021)

a limited extent due to the lack of a general baseline and
different training data sets. For example, a comparison of
the TRAM tool7 with our approach showed that they only
focus in the classiﬁcation of techniques based in the ATT&CK
framework. In addition, we analyzed at the rcaTT tool [46],
which also classiﬁes tactics and techniques. Unfortunately, it
was very difﬁcult to compare our approach the rcaTT tool,
as it builds on an older version of ATT&CK and integrates a
lot of noise through their automatic method of generating the
training data set by considering external references as well.
These comparative trials and the problems associated with
them, once again highlight the need for publicly available
labeled training data sets and baselines.

B. Limitations

The research at hand might be limited by a (i) selection bias
and (ii) wrong classiﬁcation of relevant publications dealing
with NLP and ML techniques used for security information
extraction. Moreover, it might be (iii) limited training set
primarily focusing on tactics and techniques based on the
ATT&CK framework and a (iv) missing baseline to compare
the performance of ML techniques for TTP classiﬁcation. In
order to counteract (i) and guarantee a complete list of relevant
papers focusing in NLP and ML techniques we conducted a
systematic literature study based on [47] combined with the
snowballing method [48]. In order to counteract (ii) a concept
matrix was created, as described in [47], to systematically
information on the used NLP and ML techniques
extract
and a review protocol was kept. Two of the authors of this
publication did the classiﬁcation of each paper. In a ﬁnal step
the concept matrices and the review protocols were compared.
If a conﬂict occurred, consensus based on a re-reading of
the publication and a subsequent discussion was reached.
Limitation (iii) was deliberately chosen because the automatic
generation of a labeled training set based on the ATT&CK
framework was the only efﬁcient solution and the generation
of a manual labeled data set was too time-consuming. In
order to counteract (iv) we compared our processing pipeline
to related work. A detailed comparison was made difﬁcult
because comparable contributions only made their evaluation
data available to a limited extent.

VI. CONCLUSION & OUTLOOK

In this paper we investigated, how current NLP and ML
approaches can be combined to extract attackers’ TTPs from
unstructured text. Therefore, we analyzed the state of the art
regarding the combination of NLP with ML techniques to
extract security-related information from unstructured text. We
evaluated and compared the different techniques described in
26 publications. In doing so we evaluated all possible com-
binations of the identiﬁed NLP and ML techniques with 156
processing pipelines and an automatically generated training
set based on the ATT&CK framework. It turned out that a
combination of Tokenization, POS Tagging, IoC Replacement,

7https://github.com/mitre-attack/tram (Accessed: August 2nd, 2021)

Lemmatization, One-hot encoding, Binary Relevance and Sup-
port Vector Machine performed best for the classiﬁcation of
techniques and tactics. However, due to a lack of training date
we were not able to classify attackers’ procedures. Finally,
our investigations highlighted the need for publicly available
labeled training set and a baseline for evaluation. Future work
will include a comprehensive evaluation of further machine
learning techniques and the creation of a publicly available
training data set to classify attackers’ TTPs. Moreover, we
will focus on a processing pipeline and labeled training data
set to extract attacker’s procedures.

REFERENCES

[1] S. Mohurle and M. Patil, “A brief study of wannacry threat: Ransomware
attack 2017,” International Journal of Advanced Research in Computer
Science, vol. 8, no. 5, 2017.

[2] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn,
S. Mangard, P. Kocher, D. Genkin, et al., “Meltdown: Reading kernel
memory from user space,” in 27th {USENIX} Security Symposium
({USENIX} Security 18), pp. 973–990, 2018.

[3] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher, et al., “Spectre attacks:
Exploiting speculative execution,” in 2019 IEEE Symposium on Security
and Privacy (SP), pp. 1–19, IEEE, 2019.

[4] J. Jang-Jaccard and S. Nepal, “A survey of emerging threats in cyber-
security,” Journal of Computer and System Sciences, vol. 80, no. 5,
pp. 973–993, 2014.

[5] C. Sauerwein, I. Pekaric, M. Felderer, and R. Breu, “An analysis and
classiﬁcation of public information security data sources used in research
and practice,” Computers & security, vol. 82, pp. 140–155, 2019.
[6] C. Sauerwein, C. Sillaber, A. Mussmann, and R. Breu, “Threat intel-
ligence sharing platforms: An exploratory study of software vendors
and research perspectives,” in Proceedings of the 13th International
Conference on Wirtschaftsinformatik, 2017.

[7] W. Tounsi and H. Rais, “A survey on technical threat intelligence in
the age of sophisticated cyber attacks,” Computers & security, vol. 72,
pp. 212–233, 2018.

[8] C. Wagner, A. Dulaunoy, G. Wagener, and A. Iklody, “Misp: The
design and implementation of a collaborative threat intelligence sharing
platform,” in Proceedings of the 2016 ACM on Workshop on Information
Sharing and Collaborative Security, pp. 49–56, ACM, 2016.

[9] C. Johnson, L. Badger, D. Waltermire, J. Snyder, and C. Skorupka,
“Guide to cyber threat information sharing,” NIST special publication,
vol. 800, no. 150, 2016.

[10] N. MacDonald, “Information security is becoming a big data analytics
problem,” Gartner,(23 March 2012), DOI= http://www. gartner. com/id,
vol. 1960615, 2012.

[11] M. Dempsey, “Joint intelligence,” Joint Publication, pp. 2–0, 2013.
[12] S. Bauer, D. Fischer, C. Sauerwein, S. Latzel, D. Stelzer, and R. Breu,
“Towards an evaluation framework for threat intelligence sharing plat-
forms,” in Proceedings of the 53rd Hawaii International Conference on
System Sciences, 2020.

[13] A. de Melo e Silva, J. J. Costa Gondim, R. de Oliveira Albuquerque,
and L. J. Garc´ıa Villalba, “A methodology to evaluate standards and
platforms within cyber threat intelligence,” Future Internet, p. 108, 2020.
[14] J. Pastor-Galindo, P. Nespoli, F. G. M´armol, and G. M. P´erez, “The
not yet exploited goldmine of osint: Opportunities, open challenges and
future trends,” IEEE Access, vol. 8, pp. 10282–10304, 2020.

[15] B. E. Strom, A. Applebaum, D. P. Miller, K. C. Nickels, A. G.
Pennington, and C. B. Thomas, “Mitre att&ck: Design and philosophy,”
Technical report, 2018.

[16] M. R. Rahman, R. Mahdavi-Hezaveh, and L. Williams, “A literature
review on mining cyberthreat intelligence from unstructured texts,” in
2020 International Conference on Data Mining Workshops (ICDMW),
pp. 516–525, IEEE, 2020.

[17] X. Liao, K. Yuan, X. Wang, Z. Li, L. Xing, and R. Beyah, “Acing
the ioc game: Toward automatic discovery and analysis of open-source
cyber threat intelligence,” in Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, pp. 755–766,
2016.

[18] J. Zhao, Q. Yan, J. Li, M. Shao, Z. He, and B. Li, “Timiner: Automati-
cally extracting and analyzing categorized cyber threat intelligence from
social data,” Computers & Security, vol. 95, p. 101867, 2020.

[19] C. Sauerwein, C. Sillaber, M. M. Huber, A. Mussmann, and R. Breu,
“The tweet advantage: An empirical analysis of 0-day vulnerability
information shared on twitter,” in IFIP International Conference on ICT
Systems Security and Privacy Protection, pp. 201–215, Springer, 2018.
[20] V. Mulwad, W. Li, A. Joshi, T. Finin, and K. Viswanathan, “Extracting
information about security vulnerabilities from web text,” in 2011
IEEE/WIC/ACM International Conferences on Web Intelligence and
Intelligent Agent Technology, vol. 3, pp. 257–260, IEEE, 2011.
[21] C. Liu, J. Li, and X. Chen, “Network vulnerability analysis using text
mining,” in Asian Conference on Intelligent Information and Database
Systems, pp. 274–283, Springer, 2012.

[22] M. Gawron, F. Cheng, and C. Meinel, “Automatic vulnerability classi-
ﬁcation using machine learning,” in International Conference on Risks
and Security of Internet and Systems, pp. 3–17, Springer, 2017.
[23] Z. Han, X. Li, Z. Xing, H. Liu, and Z. Feng, “Learning to predict severity
of software vulnerability using only vulnerability description,” in 2017
IEEE International conference on software maintenance and evolution
(ICSME), pp. 125–136, IEEE, 2017.

[24] A. Ritter, E. Wright, W. Casey, and T. Mitchell, “Weakly supervised
extraction of computer security events from twitter,” in Proceedings of
the 24th International Conference on World Wide Web, pp. 896–905,
2015.

[25] C. Sabottke, O. Suciu, and T. Dumitras, , “Vulnerability disclosure in
the age of social media: Exploiting twitter for predicting real-world
exploits,” in 24th {USENIX} Security Symposium ({USENIX} Security
15), pp. 1041–1056, 2015.

[26] A. Joshi, R. Lal, T. Finin, and A. Joshi, “Extracting cybersecurity related
linked data from text,” in 2013 IEEE Seventh International Conference
on Semantic Computing, pp. 252–259, IEEE, 2013.

[27] S. Mittal, P. K. Das, V. Mulwad, A. Joshi, and T. Finin, “Cybertwitter:
Using twitter to generate alerts for cybersecurity threats and vulnera-
bilities,” in 2016 IEEE/ACM International Conference on Advances in
Social Networks Analysis and Mining (ASONAM), pp. 860–867, IEEE,
2016.

[28] S. Gharge and M. Chavan, “An integrated approach for malicious tweets
detection using nlp,” in 2017 International Conference on Inventive
Communication and Computational Technologies (ICICCT), pp. 435–
438, IEEE, 2017.

[29] S. R. Vadapalli, G. Hsieh, and K. S. Nauer, “Twitterosint: automated
cybersecurity threat intelligence collection and analysis using twitter
data,” in Proceedings of the International Conference on Security and
Management (SAM), pp. 220–226, The Steering Committee of The
World Congress in Computer Science, Computer . . . , 2018.

[30] A. Niakanlahiji, J. Wei, and B.-T. Chu, “A natural language processing
based trend analysis of advanced persistent threat techniques,” in 2018
IEEE International Conference on Big Data (Big Data), pp. 2995–3000,
IEEE, 2018.

[31] C. Suh-Lee, J.-Y. Jo, and Y. Kim, “Text mining for security threat
detection discovering hidden information in unstructured log messages,”
in 2016 IEEE Conference on Communications and Network Security
(CNS), pp. 252–260, IEEE, 2016.

[32] T. Peng, I. Harris, and Y. Sawa, “Detecting phishing attacks using
natural language processing and machine learning,” in 2018 ieee 12th
international conference on semantic computing (icsc), pp. 300–301,
IEEE, 2018.

[33] M. Macdonald, R. Frank, J. Mei, and B. Monk, “Identifying digital
threats in a hacker web forum,” in Proceedings of the 2015 IEEE/ACM
international conference on advances in social networks analysis and
mining 2015, pp. 926–933, 2015.

[34] V. Benjamin, W. Li, T. Holt, and H. Chen, “Exploring threats and
vulnerabilities in hacker web: Forums, irc and carding shops,” in 2015
IEEE international conference on intelligence and security informatics
(ISI), pp. 85–90, IEEE, 2015.

[35] E. Nunes, A. Diab, A. Gunn, E. Marin, V. Mishra, V. Paliath, J. Robert-
son, J. Shakarian, A. Thart, and P. Shakarian, “Darknet and deepnet
mining for proactive cybersecurity threat intelligence,” in 2016 IEEE
Conference on Intelligence and Security Informatics (ISI), pp. 7–12,
IEEE, 2016.

[36] S. Samtani, K. Chinn, C. Larson, and H. Chen, “Azsecure hacker assets
portal: Cyber threat intelligence and malware analysis,” in 2016 IEEE

conference on intelligence and security informatics (ISI), pp. 19–24,
Ieee, 2016.

[37] I. Deliu, C. Leichter, and K. Franke, “Extracting cyber threat intelligence
from hacker forums: Support vector machines versus convolutional
neural networks,” in 2017 IEEE International Conference on Big Data
(Big Data), pp. 3648–3656, IEEE, 2017.

[38] N. Tavabi, P. Goyal, M. Almukaynizi, P. Shakarian, and K. Lerman,
“Darkembed: Exploit prediction with neural language models,” in Pro-
ceedings of the AAAI Conference on Artiﬁcial Intelligence, vol. 32, 2018.
[39] R. Williams, S. Samtani, M. Patton, and H. Chen, “Incremental hacker
forum exploit collection and classiﬁcation for proactive cyber threat
intelligence: An exploratory study,” in 2018 IEEE International Con-
ference on Intelligence and Security Informatics (ISI), pp. 94–99, IEEE,
2018.

[40] T. Buldakova and A. S. Dzhalolov, “Development of an information
security data-mining system for a situation center,” Automatic Documen-
tation and Mathematical Linguistics, vol. 48, no. 2, pp. 71–77, 2014.

[41] C. L. Jones, R. A. Bridges, K. M. Huffer, and J. R. Goodall, “Towards
a relation extraction framework for cyber-security concepts,” in Pro-
ceedings of the 10th Annual Cyber and Information Security Research
Conference, pp. 1–4, 2015.

[42] K. Li, H. Wen, H. Li, H. Zhu, and L. Sun, “Security osif: Toward auto-
matic discovery and analysis of event based cyber threat intelligence,”
in 2018 IEEE SmartWorld, Ubiquitous Intelligence & Computing, Ad-
vanced & Trusted Computing, Scalable Computing & Communications,
Cloud & Big Data Computing, Internet of People and Smart City Inno-
vation (SmartWorld/SCALCOM/UIC/ATC/CBDCom/IOP/SCI), pp. 741–
747, IEEE, 2018.

[43] L. Neil, S. Mittal, and A. Joshi, “Mining threat

intelligence about
open-source projects and libraries from code repository issues and bug
reports,” in 2018 IEEE International Conference on Intelligence and
Security Informatics (ISI), pp. 7–12, IEEE, 2018.

[44] G. Husari, E. Al-Shaer, M. Ahmed, B. Chu, and X. Niu, “Ttpdrill:
Automatic and accurate extraction of threat actions from unstructured
text of cti sources,” in Proceedings of
the 33rd Annual Computer
Security Applications Conference, pp. 103–115, 2017.

[45] G. Husari, X. Niu, B. Chu, and E. Al-Shaer, “Using entropy and mutual
information to extract threat actions from cyber threat intelligence,”
in 2018 IEEE International Conference on Intelligence and Security
Informatics (ISI), pp. 1–6, IEEE, 2018.

[46] V. Legoy, M. Caselli, C. Seifert, and A. Peter, “Automated retrieval of
att&ck tactics and techniques for cyber threat reports,” arXiv preprint
arXiv:2004.14322, 2020.

[47] B. Kitchenham, “Procedures for performing systematic reviews,” Keele,

UK, Keele University, vol. 33, no. 2004, pp. 1–26, 2004.

[48] C. Wohlin, “Guidelines for snowballing in systematic literature studies
and a replication in software engineering,” in Proceedings of the 18th
international conference on evaluation and assessment
in software
engineering, pp. 1–10, 2014.

[49] M. D. Purba, B. Chu, and E. Al-Shaer, “From word embedding to
cyber-phrase embedding: Comparison of processing cybersecurity texts,”
in 2020 IEEE International Conference on Intelligence and Security
Informatics (ISI), pp. 1–6, IEEE, 2020.

[50] S. Xun, X. Li, and Y. Gao, “Aiti: An automatic identiﬁcation model
of threat intelligence based on convolutional neural network,” in Pro-
ceedings of the 2020 the 4th International Conference on Innovation in
Artiﬁcial Intelligence, pp. 20–24, 2020.

[51] Y. Ghazi, Z. Anwar, R. Mumtaz, S. Saleem, and A. Tahir, “A supervised
machine learning based approach for automatically extracting high-level
threat intelligence from unstructured sources,” in 2018 International
Conference on Frontiers of Information Technology (FIT), pp. 129–134,
IEEE, 2018.

[52] D. Iorga, D. Corl˘atescu, O. Grigorescu, C. S˘andescu, M. Dasc˘alu, and
R. Rughinis¸, “Early detection of vulnerabilities from news websites
using machine learning models,” in 2020 19th RoEduNet Conference:
Networking in Education and Research (RoEduNet), pp. 1–6, IEEE,
2020.

[53] T. Satyapanich, F. Ferraro, and T. Finin, “Casie: Extracting cybersecurity
event information from text,” in Proceedings of the AAAI Conference on
Artiﬁcial Intelligence, vol. 34, pp. 8749–8757, 2020.

[54] A. Niakanlahiji, L. Safarnejad, R. Harper, and B.-T. Chu, “Iocminer:
Automatic extraction of indicators of compromise from twitter,” in 2019
IEEE International Conference on Big Data (Big Data), pp. 4747–4754,
IEEE, 2019.

