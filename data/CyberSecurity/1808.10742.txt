Anomaly Detection in Cyber Network Data Using a Cyber Language Approach∗

Bartley D. Richardson,1, † Benjamin J. Radford,1, ‡ Shawn E. Davis,1, § Keegan Hines,2 and David Pekarek3

DISTRIBUTION STATEMENT A.
Approved for public release.

1KeyW Corporation

2Capital One

3IronNet Cybersecurity

8
1
0
2

g
u
A
5
1

]

R
C
.
s
c
[

1
v
2
4
7
0
1
.
8
0
8
1
:
v
i
X
r
a

I.

INTRODUCTION

As the amount of cyber data continues to grow, cyber
network defenders are faced with increasing amounts of
data they must analyze to ensure the security of their net-
works. In addition, new types of attacks are constantly
being created and executed globally. Current rules-based
approaches are eﬀective at characterizing and ﬂagging
known attacks, but they typically fail when presented
with a new attack or new types of data. By compari-
son, unsupervised machine learning oﬀers distinct advan-
tages by not requiring labeled data to learn from large
amounts of network traﬃc. In this paper, we present a
natural language-based technique (suﬃx trees) as applied
to cyber anomaly detection. We illustrate one method-
ology to generate a language using cyber data features,
and our experimental results illustrate positive prelimi-
nary results in applying this technique to ﬂow-type data.
As an underlying assumption to this work, we make the
claim that malicious cyber actors leave observables in
the data as they execute their attacks. This work seeks
to identify those artifacts and exploit them to identify a
wide range of cyber attacks without the need for labeled
ground-truth data.

II. PREVIOUS WORK

Previous work has investigated network data for pattern-
of-life and anomaly detection that informs the ap-
proaches taken in this paper. In terms of pattern-of-life,
work focuses on identifying and classifying users within
a network [1–4]. Clustering for anomaly detection [5–7]
is a common technique for network data due to the fact
that most network datasets are unlabeled and contain no
ground truth. The focus of these works is largely centered
around intrusion detection and make the assumption that

∗This research was developed with funding from the Defense
Advanced Research Projects Agency (DARPA). The views, opin-
ions and/or ﬁndings expressed are those of the authors and should
not be interpreted as representing the oﬃcial views or policies of
the Department of Defense or the U.S. Government.
†bartley.richardson@gmail.com
‡benjamin.radford@gmail.com
§shawn.davis@keywcorp.com

intrusions should be anomalous relative to the network as
a whole. Likewise, there exists previous work around the
probabilistic suﬃx tree (PST) and using it to model and
predict protein families [8] as well as determine anoma-
lous user behavior from event logs [9].

III. DATA SOURCES AND EXPERIMENTAL
CONFIGURATION

Our data for this eﬀort consists of network traﬃc data
collected in a traditional compute environment. Speciﬁ-
cally, we utilize the University of New Brunswick Infor-
mation Security Centre of Excellence (ISCX) Intrusion
Detection Evaluation DataSet [10]. The reason we se-
lected this dataset is that it contains labeled data for
known attacks, and this permits us to produce ROC
curves and calculate AUC in order to evaluate the eﬀec-
tiveness of the technique. We concentrate on Bro netﬂow
data. By default, Bro creates separate log ﬁles for diﬀer-
ent actions. For example, the DNS log ﬁle contains DNS
resolution requests and associated metadata while the
HTTP log ﬁle contains, among other things, GET and
POST requests (with the associated URLs) for activity
over HTTP and HTTPS ports. The Bro CONN (connec-
tion) log contains high-level metadata for other log types,
including: IP addresses, ports used, bytes transferred,
packets transferred, duration, TCP ﬂags, and protocol.
Bro netﬂow is aggregated to the session level and is bidi-
rectional, enabling it to represent many PCAP frames in
a single row of information. The relationship between
PCAP and ﬂow-type data is illustrated in Figure 1. The
ISCX dataset contains 2,028,053 labeled Netﬂow records,
with 96.6% of them labeled normal and the remaining
3.4% labeled as attack. The volume of traﬃc is shown
Figure 2. Statistical analysis of real network traﬃc is
used to create agent-based background traﬃc in a testbed
environment, and the attacks are real and planned by a
white hat team based on the architecture of the testbed
environment.

Our analytics run on a cloud compute environment us-
ing Cloudera CDH v5.11.0 and a heavily modiﬁed Spark
v.2.1.0.cloudera1. The physical machine contains 6.15TB
of addressable RAM with 420 VCores. Actual physical
servers include: 8x24 cores, 22x40 cores, 1x12 core, and
1x4 cores. HDFS is currently conﬁgured for a total ca-
pacity of 260.4TiB. Our analytics utilize Spark MLLib

 
 
 
 
 
 
V MODELING CYBER DATA USING A PROBABILISTIC SUFFIX TREE

(e.g., bytes, KB, MB, GB) while reducing the number of
tokens produced.

FIG. 1: Flow-type data (top) compared with PCAP
data (bottom). Flow data is aggregated and contains
information across multiple PCAP frames, and raw
PCAP data provides access to the application payload
that may not be represented in aggregated ﬂow data.

FIG. 2: Volume of attack (top) and normal (bottom)
traﬃc in the ISCX dataset

heavily, and input/output is managed via Hive tables in
HDFS. It is important to note that this is a research
cloud and is not a production environment.

IV. CREATING SEQUENCES OF CYBER DATA

Before we can apply the analytic to the cyber data, we
must transform it into a sequence of activity (i.e., create
the communication language). Figure 3 illustrates this
process in detail. In general, some feature engineering is
performed a priori to sequence creation. Various combi-
nations of protocol, port, bytes, packets, and other fea-
tures can be encoded into discrete tokens, and sequences
of these tokens eﬀectively compress the communication
between two networked computers. For this work, we fo-
cus on proto-bytes (a protocol identiﬁer with the sum of
the bytes transferred) and proto-density (a protocol iden-
tiﬁer with the sum of bytes/packet transferred). In order
to keep the vocabulary at a manageable size, we also bin
the quantitative features in some way. One method that
has shown promise is to take the ﬂoor of the log2 feature
value. This allows us to keep some sense of magnitude

2

FIG. 3: Construction of cyber language sequences from
ﬂow data

Another issue to consider when creating sequences of cy-
ber data is the sequence length. Sequence length di-
rectly relates to time and how long the communication
remains open. Various ways to sessionize exist, including
by hour, day, week, and after 30 minutes of no activity
between two IP addresses. For this work, we construct
sequences that terminate after an hour. This has the
added beneﬁt of keeping most sequences to a relatively
similar length, so there is not the issue of normalizing all
sequences to account for widely varying lengths. These
sequences are created using a parallelized Spark-based
approach that can construct multiple types of sequences
relatively quickly.

V. MODELING CYBER DATA USING A
PROBABILISTIC SUFFIX TREE

Creating the PST model is relatively straightforward.
The cyber language sequences are fed into a slightly mod-
iﬁed PST code model that distributes the learning across
a Spark cluster. Typical starting hyperparemeter values
set the depth of the tree to 14, the minimum probability
to 0.0001, the probability threshold (specifying the min-
imum probability necessary for inclusion of the suﬃx in
the tree) to 0.0005, and the two smoothing parameters
at τ = 10 and (cid:15) = 0.0.

After creating the sequences and the PST model, we then
score each sequence using the model. The overall process
is shown in Figure 4. Each sequence receives a likeli-
hood score (a probability between 0 and 1), and we ﬂag
for investigation those sequences that receive a non-zero
likelihood score below a set limit. These sequences rep-
resent those less likely to exist in the data (i.e., anoma-
lous sequences). To build intuition, we present Figure 5.
In this ﬁgure, the application of PST modeling to En-
glish words is on the left while the cyber application is
on the right. In the traditional application, we seek to
quantify a words conformity to traditional spelling pat-
terns. Notice that words like actions and stations are

VI EXPERIMENTAL RESULTS

bytes as a feature signiﬁcantly outperformed using proto-
density.

FIG. 4: Analytic ﬂow for creating PST models from
cyber network data

more likely (therefore further to the right on the his-
togram) while words like chutzpah and syzygy are less
likely (further to the left). In our application to cyber
data via construction of a cyber language, we seek to add
interpretability to ﬁndings using similar intuition. Our
application necessitates an additional step to transform
the data and sequence the tokens. Instead of analyzing
English spelling patterns, we are quantifying spelling pat-
terns of our tokenized sequences representing machine-to-
machine communication. The underlying assumption is
that sequences of less-likely spellings are anomalous to
the network environment where they are observed, and
these events warrant increased scrutiny by a cyber ex-
pert.

FIG. 6: The eﬀect of tokenization on the performance
of the PST analytic

Another factor in PST performance is the tuning of the
analytic hyperparameters. As implemented, the PST has
several hyperparameters. The tree depth speciﬁes the
maximum depth of the model generated while the prob-
ability threshold value is used to determine if a sequence
is signiﬁcant and is a candidate to add to the PST. Rais-
ing the probability threshold makes the PST more re-
strictive. The other parameters (tau, epsilon, and proba-
bility minimum) are essentially used together to remove
useless nodes from the PST model and as a smoothing
factor. Figure 7 illustrates the eﬀect of tuning these PST
hyperparameters to a speciﬁc dataset.

FIG. 5: Application of PST to natural language (left)
and cyber data (right)

VI. EXPERIMENTAL RESULTS

This section presents experimental results of the PST ap-
proach to cyber anomaly detection on the ISCX dataset.
Figure 6 shows the results for two diﬀerent types of tokens
and their respective ROC curves. We experimented with
two main types of tokenization including proto-density
binned in buckets of 10 (left) and proto-bytes binned
using log2 (right). For the ISCX dataset, using proto-

3

FIG. 7: The eﬀect of tuning PST hyperparameters to
increase the AUC

By tuning the PST hyperparameters, we are able to in-
crease the AUC from 0.545 (shown on the right side of
Figure 6) to 0.748. It should also be noted that the shape
of the ROC curve is of interest from the view of a cyber
analyst. By noting the sharp rise in the ROC curve at the
beginning, we observe that the results presented to a cy-
ber analyst (assuming this same ordering) are less likely
to be false positives (i.e., less likely to degrade trust in
the system). In an operational environment, we would
typically not have ground truth labels for our data. It
is important to build trust in the system by presenting
minimal false positives to the cyber security analyst.

VII. CONCLUSIONS AND FUTURE WORK

This work demonstrates that there is a method to view
and interpret cyber communications as a language and
that applying language-based analytic techniques to this
new synthetic language has potential. We have shown
that there is value in viewing network traﬃc as a lan-
guage, and that PSTs can be used to characterize that
language. By selectively engineering the input features
and tuning the PST hyperparameters, we can substan-
tially increase the AUC while maintaining a favorable
ROC curve shape.

Future work in this area includes how to best retain the
labels when aggregating ﬂows into sessions. While we

VII CONCLUSIONS AND FUTURE WORK

have characterized on attack vs. non-attack (normal),
there are various types of attacks that exist and gener-
ating more nuanced labels than these binary indicators
would be useful. Additional research and experimenta-
tion should be devoted to the correct evaluation crite-
ria for results. Do cyber analysts care about the overall
AUC or, perhaps more importantly, the true positive rate
for the ﬁrst n predicted anomalies/attacks? In addition,
experiments that evaluate how generalizable the results
from applying this methodology on the ISCX data are
necessary. One method to do this is to use additional
labeled datasets from ISCX and then generate model-ﬁt
comparisons on labeled and unlabeled data to show cor-
relation.

[1] Xiaodan Gu, Ming Yang, Jiaxuan Fei, Zhen Ling, and
Junzhou Luo. A novel behavior-based tracking attack
for user identiﬁcation. In Advanced Cloud and Big Data,
2015 Third International Conference on, pages 227–233.
IEEE, 2015.

[2] Esam Sharafuddin, Nan Jiang, Yu Jin, and Zhi-Li Zhang.
Know your enemy, know yourself: Block-level network
behavior proﬁling and tracking.
In Global Telecommu-
nications Conference (GLOBECOM 2010), 2010 IEEE,
pages 1–6. IEEE, 2010.

[3] Nino Vincenzo Verde, Giuseppe Ateniese, Emanuele
Gabrielli, Luigi Vincenzo Mancini, and Angelo Spog-
nardi. No nat’d user left behind: Fingerprinting users
behind nat from netﬂow records alone.
In Distributed
Computing Systems (ICDCS), 2014 IEEE 34th Interna-
tional Conference on, pages 218–227. IEEE, 2014.

[4] Sebastian Abt, Sebastian G¨artner, and Harald Baier. A
small data approach to identiﬁcation of individuals on the
transport layer using statistical behaviour templates. In
Proceedings of the 7th International Conference on Secu-
rity of Information and Networks, page 25. ACM, 2014.
[5] Kingsly Leung and Christopher Leckie. Unsupervised
anomaly detection in network intrusion detection us-

[6] Leonid Portnoy, Eleazar Eskin, and Sal Stolfo.

In Proceedings of the Twenty-eighth Aus-
ing clusters.
tralasian conference on Computer Science-Volume 38,
pages 333–342. Australian Computer Society, Inc., 2005.
Intru-
sion detection with unlabeled data using clustering. In
In Proceedings of ACM CSS Workshop on Data Mining
Applied to Security (DMSA-2001. Citeseer, 2001.

[7] Gerhard M¨unz, Sa Li, and Georg Carle. Traﬃc anomaly
detection using k-means clustering. In GI/ITG Workshop
MMBnet, 2007.

[8] Gill Bejerano and Golan Yona. Variations on probabilis-
tic suﬃx trees: statistical modeling and prediction of pro-
tein families. Bioinformatics, 17(1):23–43, 2001.

[9] Xumin Liu, Hua Liu, and Chen Ding. Incorporating user
behavior patterns to discover workﬂow models from event
logs. In Web Services (ICWS), 2013 IEEE 20th Interna-
tional Conference on, pages 171–178. IEEE, 2013.
[10] Ali Shiravi, Hadi Shiravi, Mahbod Tavallaee, and Ali A.
Ghorbani. Toward developing a systematic approach
to generate benchmark datasets for intrusion detection.
Computers and Security, 31(3):357 – 374, 2012.

4

