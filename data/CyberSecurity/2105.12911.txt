1
2
0
2

t
c
O
9

]

Y
S
.
s
s
e
e
[

2
v
1
1
9
2
1
.
5
0
1
2
:
v
i
X
r
a

Compositional Thinking
in Cyberphysical Systems
Theory

Georgios Bakirtzis
University of Virginia

Eswaran Subrahmanian
Carnegie Mellon University

Cody H. Fleming
Iowa State University

Abstract—Engineering safe and secure cyber-physical systems requires system engineers to
develop and maintain a number of model views, both dynamic and static, which can be seen as
algebras. We posit that verifying the composition of requirement, behavioral, and architectural
models using category theory gives rise to a strictly compositional interpretation of
cyber-physical systems theory, which can assist in the modeling and analysis of safety-critical
cyber-physical systems.

APPLIED COMPOSITIONAL THINKING
Lee [2], among others, recognized early in the
development of the ﬁeld of cyber-physical sys-
tems that there is a need for developing competing
methods to hybrid systems and process algebras.
While this is true, an important observation is
that both these formalisms form algebras. In fact,
the design of cyber-physical systems involves the
study of diﬀerent algebras (Figure 1).

There is signiﬁcant research in developing
these individual algebras and implementing com-
position within a particular algebra. However,
there is still an open problem about how to
relate those paradigms that in practice represent
individual models and to examine the behavior
of the system as a whole must be composed too.
Compositional cyber-physical systems theory [3],
[4] uses category theory to transform data from
one algebra to another and to ultimately relate
them formally, such that we can compose across
domains. This provides one solution to the open

problem of composition between formal methods
and their corresponding model views in cyber-
physical system design [5], [6].

The study of compositionality is not new
and certainly not only possible with categories.
For example, compositionality is formalized and
addressed with tools from control
theory [7],
contract-based design [8], or monotone co-
design [9]. This is to say that we recognize
that
the cyber-physical systems ﬁeld has had
a long tradition in formalization for the study
of correctness and the management of design
complexity. But the idea of category theory in
system science and formal methods is that those
approaches may be seen as operating implicitly
within a category and making that explicit can be
of use in developing scalable and general purpose
modeling tools that can operate across categories.

Recently all these three areas of control [10],
contracts [4], and co-design [11, chapter 4] have
been described, generalized, and uniﬁed with fun-

Published by the IEEE Computer Society

© IEEE

1

 
 
 
 
 
 
Economics in the Loop

•

Humans in the Loop

Environmentals in the Loop

Networked & Distributed

POSSIBLY WITH

Wireless Sensing & Actuation

H

W IT

L Y

P O S SI B

Feedback
Systems

THAT ARE

Resilience

•

Adaptive & Predictive

A R E

Cybersecurity

Privacy

Cyber-Physical
Systems

REQUIRE

•

Malicious Attack

Intrusion Detection

S
L
I

R
E
P
M

I

Intelligent

Real Time

Hazard Analysis

IDENTIFIES

Unsafe Control Actions

Interoperability

Hybrid &
Heterogeneous
Models

Clock Synchronization

Models
of Computation

Continuous
& Discrete

Speciﬁcation,
Modeling,
& Analysis

OF

•

Networking

Safety

Safety Constraint

Losses

Improved Design Tools

E
N
A
B
L
E
S

H

A

V

E

A

P

P

L

I

C

A

T

I

O

N

S

I

N

Design Methodology

THAT SUPPORTS

•

Scalability
& Complexity
Management

THROUGH

•

Robotics

Military

Consumer

Energy

Transportation

Infrastructure

•

Veriﬁcation
& Validation

Communications

Health Care

Smart Buildings

Manufacturing

Physical Security

Assurance

Certiﬁcation

Simulation

Stochastic Models

Modularity
& Composability

Synthesis

Interfacing with
Legacy Systems

Figure 1: A cyber-physical systems concept map showing what these systems are, what they require,
and where they are being used (adapted from Asare et al. [1]). Individual leaf nodes in this context
map have been studied in detail but formal relationships between leaf node concepts are still sparse.

damental notions of category theory and mainly
using the notion of functoriality – structure pre-
serving maps between categories that can trans-
late a general syntax to the particular semantics of
the application domain. This means that we need
not reconstruct the progress that has occurred in
each individual ﬁeld or model view because we
can use the algebras already in existence, but with
the added beneﬁt that we can compose between
categories and, therefore, between model views.
thinking brings for-
ward the practical dissemination of categorical

Applied compositional

results in the ﬁeld of engineering in general.
We will particularly concern ourselves with how
research directions in applied category theory
can be leveraged in system science and formal
methods. Composition can mean diﬀerent things
both depending on the engineering ﬁeld as well
as the particular context in which composition is
studied. In cyber-physical systems the term com-
position can be understood as either horizontal or
vertical.

Horizontal composition is relatively well stud-
ied and refers to things like the block diagram al-

2

gebra widely used in the control community. Ver-
tical composition, in our deﬁnition, instead spans
diﬀerent domains; a clear example in the appli-
cation of systems modeling and formal methods
is how components compose and are abstracted
or reﬁned between requirements, behaviors, and
architectures. In order to do this right we need
to formally relate and verify the composition of
diﬀerent types of algebras present in the design
and analysis of cyber-physical systems (the leaf
nodes of Figure 1). At the moment, engineering
researchers and practitioners attempt to address
this issue by developing naming spaces and con-
ventions. The need to capture the relationships
between heterogeneous system representations in
contract-based design has led to the notion of
vertical contracts [12]. The congruence between
our framework and contract-based design is that
contracts in both senses are extensions of be-
havior types. Across paradigms, as long as types
agree, composition is possible.

Each of the individual formalisms or algebras
used in the design of cyber-physical systems have
had whole ﬁelds dedicated to them with steady
research progress before and after the term cyber-
physical systems came to existence. However,
the relationship between those algebras at
the
moment is either ad-hoc or quasi-formal. Relating
algebras formally can lead to new insights, meth-
ods, and tools for the design of cyber-physical
systems that operate as we expect.

Speciﬁcally, category theory is one mathe-
matical tool that can verify the composition of
diﬀering views and therefore lead to another
dynamical computation systems theory founded
on the recognition that addressing composition is
important in understand the (mis-)behavior of the
system as a whole. Category theory is the study
of mathematical structures from the perspective
that, to better determine an object’s purpose and
behavior, we ought to study its relationship with
other objects instead of examining the object only
in itself. Categories are intuitively congruent with
engineering cyber-physical systems because of
the existence of both dynamics and computation
in those systems, which are modeled through a
multitude of perspectives that need to be related.
Formal methods have taken an increasingly
important role in the design of systems both
in academic [13] and industry [14] settings. In

system modeling, the SysML V2 standard is a
glimpse of the possible future of formal and com-
positional methods in a practice where the gap
between requirement, behavioral, and structural
formalisms is bridged. However, it is not clear
how this relationship will be formally deﬁned.
This shows an increasing need for formal and
compositional methods that verify the composi-
tion and scale system models.

While there are several applications of cate-
gory theory in engineering, in this paper we will
examine precisely this gap between requirements,
behaviors, and architectures from the eye of com-
positional cyber-physical systems theory. This is
possible because composition here fundamentally
gives us modularity and interoperability within
types of models for free,
and across diﬀerent
things within the stricter
provided we model
paradigm of categories and algebras. Speciﬁcally,
we will show how horizontal and vertical compo-
sition can be expressed as a formal method using
categories.

Compositional Cyber-Physical Systems
Theory

Engineers and system designers use exper-
tise, intuition and inertia to decide how diﬀerent
analyses factor into higher-level, harder questions
about safety, resiliency, proﬁtability and risk. We
can formalize (some of) that expertise by recon-
structing existing workﬂows and best practices
in categorical
terms. Though many individual
features of cyber-physical systems are formal,
the relationship between these pieces has not yet
been mapped. In general, putting systems together
requires two things per Kalman [15]:

1) Getting the physics right.
2) The rest is mathematics.

But that sparked Willems [15] to ask if we are us-
ing the right mathematics to describe the science
of interconnection and he concludes that we need
to represent systems as algebras. Category theory
goes even further by composing those algebras
together.

Instead of describing category theory in full,
we want the reader to focus on the categorical
toolkit and refer to the many formal treatments
on the topic, including books such as Fong and
Spivak [11]. However, we will give an intuitive

3

(a) A functor maps objects.

(b) A functor also maps morphisms.

Figure 2: A functor is a structure-preserving map.

explanation of the fundamental concepts of cate-
gory theory.

product functor, which models processes and/or
operations that need to happen in parallel.

The most general notion of a category is that
of an algebraic structure on a graph. A category
contains a collection of objects and a collection
of arrows (including an identity arrow) which can
formally be joined by a composition rule. Ex-
amples of useful categories include the category
of sets and functions, of graphs and graph trans-
formations, and of states and transitions between
them.

The notion of functoriality between syntax
and semantics we talked about previously is im-
plemented through a structure preserving map
between categories. Functors are a predeﬁned way
of tranforming some data and their associated
interconnections to another form (ﬁgure 2). For
example, a functor can be taking the powerset
of a set, where we have predeﬁned operations on
how to do that between the same category, namely
the category of sets. We can think of a functor in
the application of cyber-physical system design as
preserving semantics across the currently distinct
algebras that deﬁne diﬀerent interpretations of
requirements, system behaviors, and system ar-
chitectures, meaning that they assign a particular
algebra to a speciﬁc model view.

Often we would like to model operations
happening in parallel when speaking about cyber-
physical systems. The constrained deﬁnition of
a category is capable of modeling sequential
processes but not parallel ones. A particularly
useful
type of category in system science is
one that is monoidal. Monoidal categories extend
this deﬁnition precisely to equip with a tensor

As a representation of some data in a category,
see below a commutative diagram involving ob-
jects 𝑋, 𝑌 , and 𝑍 identity morphism on objects,
id, as well as two morphisms 𝑓 and 𝑔 along with
their composition rule 𝑔◦𝑓 .

id

𝑋

𝑋

𝑓

𝑔◦𝑓

id
𝑌

id

𝑍

𝑌

𝑔

𝑍

The objects and morphisms can take several
forms,
the most familiar of which is perhaps
the category of sets and functions, where objects
are sets and morphisms are functions and com-
position is function composition. The example
of a category we will use to show the utility
of category theory in engineering is the labeled
boxes and wiring diagrams category [16], where
the objects are empty placeholders for processes,
and the morphisms are functions or relations that
construct
interfaces for each
labeled box.

input and output

By having the mathematical structure of a
category it is now possible to translate between
model views as long as they form categories and
their behavior can be represented as an algebra.
This is achieved by deﬁning a precise way, that
can also be implemented algorithmically, of trans-
lating the objects from one category to another
(Figure 2a) and similarly for the morphisms (Fig-
ure 2b). An example of a functorial operation

4

𝐂𝐂𝐹←←←←←←←←→𝐃id𝐴id𝐵id𝐶id𝑋id𝑌𝐴𝐵𝑋𝐶𝑌𝐂𝐂𝐹←←←←←←←←→𝐃𝐴𝐵𝐶𝑌𝑋id𝐶id𝐴id𝐵id𝑋id𝑌𝑒

ℝ

𝑑

ℝ

ℝ

sensor
𝐿

𝑠′

ℝ

ℝ

controller
𝐶

𝑐

dynamics
𝐷

𝑠

UAV

ℝ

𝑒

𝑑

𝑠′

𝑐

𝑠

𝐿

𝐶

𝐷

𝜙in ∶ ℝ3 × ℝ2 → ℝ5, (𝑠′, 𝑐, 𝑠, 𝑒, 𝑑) ↦ (𝑠, 𝑒, 𝑠′, 𝑑, 𝑐)
𝜙out ∶ ℝ3 → ℝ, (𝑠′, 𝑐, 𝑠) ↦ 𝑠

Figure 3: A compositional model of an unmanned aerial vehicle (UAV) requires us to add extra data.
The functions 𝜙in and 𝜙out create the interfaces of expected types of inputs and outputs of each box
and then combine them. They are in a sense the architecture of the wiring diagram. In this case 𝑠′
represents the calculated state, 𝑠 the current state, 𝑒 the environment, 𝑑 the desired state, and 𝑐 the
control action. This operation does not tell us what processes actually inhabit the boxes, an additional
step is needed by functorially assigning behavior algebras, in this case the algebra of linear time-
invariant systems  to each box, parallelizing the operation, and then completely determining the

(𝑓 )
←←←←←←←←←←←←←←←←←→ (UAV).
operation of the overall box UAV, as in (𝐿) × (𝐶) × (𝐷)
Both the left and right pictures form wiring diagrams. The left representation is better suited for
incorporating this diagrammatic reasoning within modeling tools.

𝜙𝐿,𝐶,𝐷
←←←←←←←←←←←←←←←←←←←←←←→ (𝐿 ⊗ 𝐶 ⊗ 𝐷)

between categories of sets is transforming a set
to its power set. A monoidal functor comes with
comparison morphisms that
involve the tensor
product, allowing us to use the same idea in
the setting of parallel operations. This might
seem like new and confusing jargon for those
unfamiliar with category theory but once it is
understood it allows us to summarize a vast num-
ber of mathematical techniques as well as formal
methods and system models by allowing us to
assign algebras that contain parallel processes.

We use these algebraic structures to describe
the syntax and semantics for cyber-physical sys-
tems compositionally. We show how a wiring
diagram has an architecture; that is, how inter-
faces are constructed, and a behavior; that is,
how the notion of functorial semantics takes the
architecture – the syntax – and assigns multiple
semantics, in this case of linear time-invariant
system models.

In other cases we could use the same struc-
tures to assign other models of cyber-physical
system behavior, such as labelled transitioned sys-
tems or Moore machines. Hierarchical decompo-

sitions are also necessary to construct the desired
vertical composition structure. To achieves this,
we are going to use the slice category of a wiring
diagram to decompose the model to a particular
system architecture – the hardware composition
of the embedded system that implements the be-
haviors we have assigned, particularly for a model
of an unmanned aerial vehicle (UAV). Finally, we
will restrict the behavior of the system using a
categorical description of contract-based design
for behavior. In this respect, we regard contracts
as representations of the system requirements.
However, note that those requirements operate
both as restrictions in behavioral and architectural
system models.

The general principle of applied composi-

tional thinking is the following.

1) Wiring diagrams deﬁne how things ought

to be connected and in what way.

2) Algebras assign a particular formalism or
behavior to the empty processes (boxes)
inhabiting the wiring diagram.

Wiring diagrams are the theory of the class

5

of systems we want to model but only insofar
as they are assigned a behavioral model through
an algebra (monoidal functor). The implication
of this statement is that for each wiring diagram,
we can deﬁne many algebras and, therefore, can
capture – in the same arrangement of components
– a number of formalisms as well as translate
between formalisms. Additionally, any algebra is
a monoidal functor from the category of wiring
diagrams to the category of sets. To deal with the
disparate leaf nodes (Figure 1) that are needed for
the design of a complete cyber-physical system it
is useful to work in higher levels of abstraction,
for example, topological spaces, graphs, vector
bundles, but it is crucial to translate to a realizable
design, which usually means that even if we do
not do the original operations in the category
of sets, the result should be translatable to the
category of sets.

Adding this extra information is important but
the solution is straightforward: reduce sensor and
controller to trivial functions because they will
compose to the form of the linear time-invariant
system representing the dynamics we expect (Fig-
ure 3). The main beneﬁt of implementing this
algebra machinery is that it uniquely determines
the description of the composite system in terms
of its subsystems and their interconnections.

One way of assigning requirements to this
behavior is to translate them into contracts [17],
[18]. As with behavior using the algebra of con-
tract we can ﬁrst think of contracts as a relation
of inputs and outputs of each box in the wiring
diagram.

Then to each complex arrangement of boxes
assign the following pullback, which given sub-
systems contracts produces a composite contract
of the system model.

Horizontal Composition

As an example we model an unmanned aerial
vehicle compositionally (Figure 3). There are two
observations stemming from our UAV example:

1) The functions 𝜙in and 𝜙out create the in-
terfaces of input-output relationships that
completely determine the block UAV.
2) But by knowing the types and values ex-
pected at interfaces we do not really know
how the system transforms this type of data.
We, therefore, need an algebra  that as-
signs precisely the behavior of linear time-
invariant systems.

A result of doing this categorically is the real-
ization that extra information is often necessary,
which is often omitted or glossed over by other
composition operators and methods. In order for
the system to compose nicely it is paramount that
the type of system residing within all boxes in a
wiring diagram are either the same, for example,
Moore machines inhabit all boxes, or that we
know the results of the composition of two types,
for example, ordinary diﬀerential equations and
Moore machines.

This means that in our example, all boxes
must
take the form of a linear time-invariant
system of the standard form, even though in
the block diagram algebra used in control de-
scribes the totality of the control system behavior.

∙

𝑅𝑋

𝑅𝑌

𝑌in × 𝑋out

𝑋in × 𝑋out

(𝜙in,𝜋2)

id×𝜙out

𝑌in × 𝑌out

For a restriction in each subsystem in the com-
posite we can represent that restriction as a set of
allowable pairs that can be observed as inputs and
outputs and from this formulation we will always
be able to calculate the allowable input/output
pairs for the composite system in terms of the
speciﬁc wiring given by the architecture of the
wiring diagram.

Horizontal composition is deﬁned as the in-
terconnection of operations in one model type.
The two step process is to use the theory of
interconnection to deﬁne the architecture of the
base wiring diagram and then inhabit the boxes
of this arrangement with a particular behavioral
model [4]. This brings our compositional model
into the same realm as behavioral diagrams in
SysML but with the possibility of simulated
behavior as in MATLAB Simulink. The main
beneﬁt of this approach is that we can assign
a number of algebras by describing models in
categories. In this case, we assigned part of our

6

𝐿

processor
𝑃1

IMU
𝐼1

IMU
𝐼2

processor
𝑃2

servos
𝑉

𝐶

aileron
𝑋

rudder
𝑌

throttle
𝑍

elevator
𝑊

𝐷

airframe
𝐹

UAV

Figure 4: The architecture of the system resides within the slice category of our initial system
behavior diagram (Figure 3) producing a formal trace between the two, thereby allowing us to perform
more analyses formally. While this decomposition focuses on the one possible implementation of the
embedded system aspects, this is only because it was modeled by a computer engineer. An aerospace
engineer could augment this model with further decompositions of the airframe or motors as long as
they got the physics right.

requirements using the contracts algebra over the
same model.

Vertical Decomposition

There are cases where the behavioral inter-
pretation of the system is not suﬃcient to exam-
ine certain properties about a system. One such
case is security, where one approach to ﬁnding
vulnerabilities is to traverse a graph of the ex-
pected or implemented system architecture [19].
However, those approaches are static and often
are behaviorally unaware, meaning that there is
no way to know what behavior is being aﬀected
by a particular successful exploit. This is not
necessarily an issue in information technology
(IT) systems but in the case of cyber-physical
systems, where the dynamics are richer it
is
necessary to know what physical behaviors the
exploit might aﬀect.

One way of understanding what a slice cate-
gory is in a given wiring diagram is to think about
it as splitting. We split or open up morphisms
(the arrows) within the wiring diagram category
in order to allow a higher degree of reﬁnement.
We can think of this as working with hyper graphs
but with the extra structure of a category. Visually
this morphism split is opening up the model of
system behavioral (Figure 3) to a model of system

architecture (Figure 4). The splitting is a form
of reﬁnement, but by using the slice category
it forms a formal trace between behaviors and
architectures.

Vertical decomposition not only refers to de-
composing system models, but at the same time it
can mean the relation of diﬀerent algebras, in this
case, for example, the algebra of behavior with the
algebra of contracts. A similar argument could
be made for applying contracts to the eventual
architecture and its associated algebra (with its
own corresponding architecture and behavior in
the wiring diagram representation).

To understand the disjointedness of the cur-
rent modeling process we can think about how
we might mathematically assign behaviors and
restrictions to an empty process. To the same
wiring diagram (a collection of empty processes
and wired between them) we can assign diﬀerent
formalisms. This is the reason for studying empty
it gives us a way of
processes, namely that
decoupling syntax from semantics.

7

𝑋

𝑓

𝑌

(𝑋)

(𝑓 )

(𝑌 )

(𝑋)

(𝑓 )

(𝑌 )

This represents the way a system design-
ers might approach developing contracts over
an already known behavior. We would instead
prefer a more formal relationship of these two
algebras. In the categorical case we have been
explicit in assigning behavior and contracts in
the form of algebras. This allows us to use a
natural transformation – a map between functors
– to reﬂect changes from the behavioral paradigm
to the contracts paradigm, which can be seen
as the relationship between (distinct) algebraic
representations, precisely as the behavior algebra
() and contracts algebra () in our work.

𝐹 𝐴

𝜂𝐴

𝐹 𝑓

𝐹 ℎ

𝐹 𝐵

𝜂𝐵

𝐹 𝑔

𝐹 𝐶

𝜂𝐶

𝐺𝐴

𝐺𝑓

𝐺ℎ

𝐺𝐵

𝐺𝑔

𝐺𝐶

Assume that we assign to an empty process
a particular formalism of behavior and contracts
in the form of algebras. But, then, as it so often
happens within design a change must occur in
the behavior, a range of outputs from one box
has changed. By having a clearly deﬁned natural
transformation – that moreover behaves well with
the parallel operation – it is possible to reﬂect
what that means in the contracts we have deﬁned
for the same system model. By using the above
relationship between functors; that is, the natural
transformation, we are doing precisely that.

(𝑋)

(𝑓 )

(𝑌 )

𝛼𝑋

𝛼𝑌

(𝑋)

(𝑓 )

(𝑌 )

The same argument has also implications
for scalability. Knowing when a change in one
modeling paradigm causes something else to be
changed, augmented, or rethought within a mod-
eling tool could reduce errors and increase eﬃ-
ciency in the system modeling process. However,
while we can make a clear mathematical argu-
ment for veriﬁed composition, scalability requires
that we build the tools and test our assumptions
with practicioners in the ﬁeld.

The promise of category theory is not that
it will change the mathematics of a particular
application ﬁeld but, rather, that it will organize
the information such that there might be new
insights and techniques associated with trans-
lating between data (veriﬁed composition) and
managing complexity (scalability).

Category Theory for the Engineer

Compositionality is one of the open problems
in cyber-physical system design, as is argued in
the NIST cyber-physical system framework [5,
pages 11-12]. In general, we perceive that cate-
gorical models in engineering are currently rather
unﬂedged and category theory is a ripe ﬁeld with
developed mathematical tools that can be transi-
tioned to formal methods in the design of cyber-
physical systems. The main beneﬁts of applied
compositional
thinking is veriﬁed composition
and scalability of diﬀerent system models.

As practitioners of formal methods, we would
like to know if our contracts or linear temporal
speciﬁcations agree with our linear time-invariant
system or labelled transition state space models.
Therefore, the problem in cyber-physical systems
is not only contained on which algebra to use
to examine or assure a particular property of the
system but also how to relate those algebras. The
importance of this perspective is that algebras,
even implicitly, exist at any given level of system
design and their composition gives rise to well-
deﬁned traces in models.

Further, as we move throughout the lifecycle,
system architecture models must be developed
and tested for behavioral bisimilarity with the

8

models we construct in the early concept design
phase, for example,
to assure that our safety
that
analysis holds. Additionally, we might at
point want to check qualities that heavily depend
upon the composition of the system in hardware
and software, such as security [20]. Additionally,
even later in the lifecycle we want to test our
models with data harvested from the designed and
deployed system. Here too, the same algebraic
structures can be extended by this data gathered
in the ﬁeld.

One way to partially combat the increasing
but necessary complexity of those systems we
need to make sure that all these algebras are
traceable. By being traceable we are therefore
able to apply several lightweight formal methods
within one overarching model. The recent devel-
opment of algebraic software based on category
theory can assist us in developing modeling tools.
By developing compositional modeling tools we
can manage and make formal all diverse views
for design, thereby bringing to practice all this
theoretical work.

REFERENCES

1. P. Asare, G. Bakirtzis, R. Bernard, D. Broman,

E. Lee, G. Prinsloo, M. Torngren, and S. Sunder,

“Cyber-physical systems – a concept map,” URL

https://cyberphysicalsystems.org or https://perma.cc/

NQ6T-AVH5, 2020.

6. J. B. Michael, G. W. Dinolt, and D. Drusinsky, “Open

questions in formal methods,” Computer, 2020.

7. R. Alur, S. Moarref, and U. Topcu, “Compositional and

symbolic synthesis of reactive controllers for multi-agent

systems,” Information and Computation, 2018.

8. P. Nuzzo, A. Sangiovanni-Vincentelli, D. Bresolin,

L. Geretti, and T. Villa,

“A platform-based design

methodology with contracts and related tools for the

design of cyber-physical systems,” Proceedings of the

IEEE, vol. 103, no. 11, Nov. 2015.

9. A. Censi, “Uncertainty in monotone codesign problems,”

IEEE Robotics and Automation Letters, 2017.

10. J. Culbertson, P. Gustafson, D. E. Koditschek, and P. F.

Stiller, “Formal composition of hybrid systems,” Theory

and Applications of Categories, 2019.

11. B. Fong and D.

I. Spivak, An invitation to applied

category theory: seven sketches in compositionality.

Cambridge University Press, 2019.

12. P. Nuzzo and A. L. Sangiovanni-Vincentelli, “Hierarchi-

cal system design with vertical contracts,” in Principles

of Modeling. Springer, 2018.

13. M. Sirjani, E. A. Lee, and E. Khamespanah, “Veriﬁcation

of cyberphysical systems,” Mathematics, 2020.

14. C. Newcombe, T. Rath, F. Zhang, B. Munteanu,

M. Brooker, and M. Deardeuff,

“Use of

formal

methods at Amazon web services,” 2014.

[On-

line]. Available: http://research.microsoft.com/en-us/

um/people/lamport/tla/formal-methods-amazon.pdf

15. J. C. Willems, “The behavioral approach to open and

interconnected systems,” IEEE Control Systems Maga-

2. E. A. Lee, “Cyber-physical systems – Are computing

zine, 2007.

foundations adequate,” Position paper for NSF work-

shop on cyber-physical systems: Research motivation,

techniques and roadmap, 2006.

16. P. Schultz, D. I. Spivak, and C. Vasilakopoulou, “Dynam-

ical systems and sheaves,” Applied Categorical Struc-

tures, 2020.

3. G. Bakirtzis, C. Vasilakopoulou, and C. H. Fleming,

17. A. Benveniste, B. Caillaud, D. Nickovic, R. Passerone,

“Compositional cyber-physical systems modeling,” in

Proceedings of

the 2020 Applied Category Theory

Conference (ACT 2020), ser. Electronic Proceedings

in Theoretical Computer Science. Open Publishing

Association, 2020.

4. G. Bakirtzis, C. H. Fleming, and C. Vasilakopoulou,

“Categorical semantics of cyber-physical systems the-

ory,” ACM Transactions on Cyber-Physical Systems,

2021.

5. E. R. Griffor, C. Greer, D. A. Wollman, and M. J.

Burns, “Framework for cyber-physical systems: Volume

1, overview,” NIST, Special Publication (NIST SP) -

1500-201, 2017.

J. Raclet, P. Reinkemeier, A. L. Sangiovanni-Vincentelli,

W. Damm, T. A. Henzinger, and K. G. Larsen, “Con-

tracts for system design,” Foundations and Trends in

Electronic Design Automation, 2018.

18.

I. Filippidis and R. M. Murray,

“Layering assume-

guarantee contracts for hierarchical system design,”

Proceedings of the IEEE, 2018.

19. G. Bakirtzis, B. J. Simon, A. G. Collins, C. H. Fleming,

and C. R. Elks, “Data-driven vulnerability exploration for

design phase system analysis,” IEEE Systems Journal,

2020.

20. G. Bakirtzis, F. Genovese, and C. H. Fleming, “Yoneda

hacking: The algebra of attacker actions,” 2021.

9

