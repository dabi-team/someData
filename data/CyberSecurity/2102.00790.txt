1
2
0
2

p
e
S
0
3

]

R
C
.
s
c
[

2
v
0
9
7
0
0
.
2
0
1
2
:
v
i
X
r
a

Using a Cyber Digital Twin for
Continuous Automotive
Security Requirements
Veriﬁcation

Ana Cristina Franco da Silva
University of Stuttgart

Stefan Wagner
University of Stuttgart

Eddie Lazebnik
Cybellum

Eyal Traitel
Cybellum

Abstract—A Digital Twin (DT) is a digital representation of a physical object used to simulate it
before it is built or to predict failures after the object is deployed. In this article, we introduce our
approach, which applies the concept of a Cyber Digital Twin (CDT) to automotive software for the
purpose of security analysis. In our approach, automotive ﬁrmware is transformed into a CDT,
which contains automatically extracted, security-relevant information from the ﬁrmware. Based
on the CDT, we evaluate security requirements through automated analysis and requirements
veriﬁcation using policy enforcement checks and vulnerabilities detection. The evaluation of a
CDT is conducted continuously integrating new checks derived from new security requirements
and from newly disclosed vulnerabilities. We applied our approach to about 100 automotive
ﬁrmwares. In average, about 600 publicly disclosed vulnerabilities and 80 unknown weaknesses
were detected per ﬁrmware in the pre-production phase. Therefore, the use of a CDT enables
efﬁcient continuous veriﬁcation of security requirements.

A COMMON CHALLENGE in verifying security
requirements is that they are often abstract and,
thereby, underspeciﬁed [1]. Examples of such
security requirements in the automotive domain
are those provided by the UNECE WP.29 regu-
lation [2] and the ISO/SAE 21434 standard [3].
They mostly prescribe processes and methods but
do not specify how security can be achieved in
a concrete system. This leads to various prob-
lems in the development but also in the quality

assurance of these systems. Cruzes et al. [4]
testing non-functional requirements,
argue that
such as security,
is a great challenge due to
cross-functional aspects of testing and the lack of
clarity of their needs. Concrete requirements help
us to better check the security of our systems,
however, we also need solutions that are able to
cope with abstract requirements as well, such as
those within the UNECE WP.29 regulation and
the ISO/SAE 21434 standard.

1

 
 
 
 
 
 
Department Head

A further challenge in verifying security re-
quirements results from outsourcing practices and
use of third-party software in the automotive
industry [5]. Due to theses practices, the complete
source code is usually not available, but rather
only the binaries are available for security anal-
yses. In this case, techniques that do not require
source code, such as black-box techniques [6],
need to be used in verifying security requirements
of automotive software. However, to efﬁciently
identify vulnerabilities in the ﬁrmware, relevant
information, such as hardware and software con-
ﬁgurations, used software packages, operating
system (OS) and application-speciﬁc settings,
need to be extracted from these binaries.

In this article, we present our approach to
verify security requirements by tackling the afore-
mentioned challenges. Our approach is based
on the automated creation of a Cyber Digital
Twin (CDT) for an automotive ﬁrmware, which is
used to conduct continuous security vulnerability
analyses and policy enforcement checks. Found
vulnerabilities and policy violations are used to
identify which security requirements have not
been satisﬁed by the analyzed ﬁrmware. The
Digital Twin (DT) is a concept to digitally rep-
resent physical objects to simulate them before
they are built or to enable predictive mainte-
nance [7]. The CDT transfers the concept of the
DT to software as well [8] (cf. Section 1). In
this article, a CDT is a digital representation
of an automotive ﬁrmware, which is a class
of software stored and executed on Electronic
Control Units (ECUs). Such CDTs provide many
advantages with respect
to automated security
evaluation of automotive ﬁrmwares, especially
considering that large parts of software are built
based on other software libraries and frameworks,
which are not available as source code. In the case
of automotive Original Equipment Manufacturers
(OEMs), this even means most of the software in
the ECUs in the cars they build have software on
them that they can only evaluate as black boxes.
Our approach automatically extracts important
information from ﬁrmware binaries, such as bill
of materials, interfaces, control and data ﬂow,
which are needed for security analysis activities.
This extracted information, which constitutes the
CDT, enables us to discover security vulnerabil-
ities in the ﬁrmware, and furthermore, to check

Sidebar 1: Black-Box Vulnerability Analysis

There are alternatives to the CDT approach to
perform black-box analyses for vulnerabilities
in software. The main approaches to vulnera-
bility analysis are static analysis of the source
code or black-box testing often using fuzzing
techniques [6]. Static analysis usually requires
access to the source code of the software and,
hence, cannot be used in a black-box way.

In case of black-box testing, there is a com-
mon focus, for example, on crawling and
then testing web applications for side-channel
vulnerabilities [9] or SQL injection vulnera-
bilities [10]. Yet, these approaches need an
executable system often installed in a real or
realistic environment.

Regarding penetration tests, we do not pri-
marily evaluate security requirements by sim-
ulating attacks to the ﬁrmware, but rather by
conducting different analyses on the CDT of
the ﬁrmware based on pattern matching tech-
niques. However, once the analyses detect that
the ﬁrmware uses a software library affected
by a known vulnerability in Common Vulner-
abilities and Exposures (CVE) databases, the
CDT is executed in a sandbox and penetration
tests are carried out to trigger the vulnerability
as described in the CVE record.

if certain security requirements of the ﬁrmware
are not fulﬁlled. In this context, a vulnerabil-
ity (https://cve.mitre.org/about/terminology.html#
vulnerability) is deﬁned as a weak spot in the
automotive ﬁrmware, which can be exploited by
intruders and negatively affect the conﬁdentiality,
integrity or availability of the ﬁrmware. We dis-
cuss alternative approaches to our CDT approach
in Sidebar 1.

The CDT approach has been applied to hun-
dreds of automotive ﬁrmware to detect known
vulnerabilities in the used libraries, which are
publicly disclosed in Common Vulnerabilities and
Exposures (CVE) databases. Furthermore, it has
also been applied to discover unknown weak-
nesses, such as heap overﬂow and use after free,
based on the classiﬁcation provided by the Com-
mon Weakness Enumeration (CWE). We describe

2

our approach including the analysis method and
how it can be used to verify security requirements
in the following.

1. DIGITAL TWIN AND CYBER
DIGITAL TWIN

The DT concept comprises not only simu-
lation but also monitoring of existing physical
objects including their current states and pro-
cesses, so that DTs are always in-sync with their
physical counterparts to enable reliable monitor-
ing [11]. The concept of using twins has emerged
within NASA’s Apollo program and is still in
use today, where space vehicle twins are used
for training and simulation purposes [12]. The
DT concept has been applied to manufacturing,
introduced by Michael Grieves in 2002, and has
gained attention in further areas such as automo-
tive and IoT. An exemplary software solution in
manufacturing is the GE Digital Predix Platform
(https://www.ge.com/digital/iiot-platform), which
is an IIoT platform for creating and tracking DTs
of industrial systems.

The CDT extends the DT concept

to also
represent software objects that can be regarded
only as black-boxes. We deﬁne a CDT as a digital
representation of an automotive ﬁrmware, which
only consists of binaries. This digital represen-
tation is enhanced with critical information for
security analyses in both pre-production and post-
production phases. Hence, the CDT enables vul-
nerability management and security requirements
evaluation of a ﬁrmware throughout its lifecycle.

The use of DTs for software has also been
proposed in other works to identify cybersecu-
rity issues. Hadar et al. [13] use the term Cy-
in which a CDT
ber Digital Twin Simulator,
is created based on active networks and attack
graph analytics. This CDT automatically col-
lects information about
the computer network
infrastructure, associates it with attack tactics,
measures the efﬁciency of implemented security
controls requirements and automatically detects
missing ones. The resulting CDT corresponds to a
knowledge graph inferencing model of the active
network.

2. THE CYBER DIGITAL TWIN
APPROACH

In this section, we present our CDT approach,

which is depicted in Figure 1.

2.1. Transformation of a Firmware into a CDT

As ﬁrst step, an automotive ﬁrmware binary,
such as an infotainment system, is automatically
transformed into a corresponding CDT.

During the creation of the CDT, all avail-
able interfaces, all used software libraries and
further information are discovered automatically
and added to the model underlying the CDT. If
available, software inventories of suppliers are
also used. Not only interfaces and employed
software libraries are automatically extracted, but
a much more comprehensive set of information is
extracted and added to the CDT as summarized
in Table 1. Possible interfaces are for example
Bluetooth, Controller Area Network (CAN bus)
and GPS. Examples of normally used software
libraries in automotive ﬁrmwares are the openssl
and sqllite libraries. In addition, the CDT also in-
cludes the interactions among all items in Table 1,
and any additional conﬁguration information and
metadata describing the ﬁrmware and its behav-
ior. At the core of the CDT – as in a normal
Digital Twin – is the software bill of materials
(SBoM) that lists the software components of the
ﬁrmware.

The creation of the CDT consists of:

the
ﬁrmware extraction,
the software composition
analysis (SCA) and the licensing analysis. Auto-
motive ﬁrmwares are available in many different
formats, such as ﬂash device dumps, ﬁle sys-
tem images, virtual machine images, container
images, compressed ﬁles, or, in most cases, a
hierarchical combination of different formats. The
ﬁrmware extraction process identiﬁes the correct
format of each ﬁle, recursively iterates through
the ﬁle tree and extracts information using the
suitable extraction code. This extraction code
does not know if the result of a speciﬁc ﬁle’s ex-
traction is correct, therefore this process requires
validation steps to ensure that the result resembles
the ﬁle tree structure and contents of the original
ﬁrmware.

In the SCA, the extracted ﬁles are scanned
thoroughly to detect unique software components.
This is performed by pre-processing executable

3

Department Head

Figure 1: Using Cyber Digital Twins for continuous automotive security requirements veriﬁcation

objects, cleaning up irrelevant ﬁle sections, then
comparing contents and attributes of the ﬁles with
a large database of mapped components. Software
components can be uniquely identiﬁed through
certain ﬁle paths, ﬁle names, or unique strings.
Others can be detected using direct parsing of
conﬁguration data of installed software within the
ﬁrmware, for example, package management con-
ﬁguration databases in the ﬁrmware. The result of
this analysis is the SBoM.

In the licensing analysis, the SBoM is ana-
lyzed to determine the software licenses, copy-
rights and legal notices related to each software
component. This is important for licensing prac-
tices such as the ones deﬁned by the OpenChain
standard (https://www.openchainproject.org).

2.2. Analysis of the Cyber Digital Twin

In this step, the resulting CDT of a ﬁrmware
is ﬁrst analyzed in the pre-production phase to
discover threats, security vulnerabilities, and se-
curity policy violations. In this way, OEMs can
solve issues before the ﬁrmware is released.

Based on the hardware and software bill of
the CDT is analyzed using pattern
materials,
recognition techniques, to ﬁnd potential vulnera-
bilities, which are published in Common Vulnera-
bilities and Exposures (CVE) databases. For each
software library in the SBoM, all related CVEs
are automatically identiﬁed by querying the CVE

database through APIs.

Each CVE is tagged by the numbering au-
thorities to speciﬁc software components accord-
ing to the Common Platform Enumeration (CPE,
https://nvd.nist.gov/products/cpe). The CPEs that
make up a ﬁrmware result from the SCA in the
CDT creation. This matching process between the
list of software components (CPEs) and vulner-
abilities (CVEs) is performed by querying the
vulnerability databases. However, this matching
is not enough, since it creates a CVE list which
is very generic. Many of the CVEs will not be
relevant for the analyzed ﬁrmware. The existence
of a certain software component in a speciﬁc
version does not imply that all the vulnerabilities
listed for that component are relevant. Therefore,
the vulnerability analysis engine also considers
context information of the ﬁrmware. The context
information of the component itself is analyzed
from the ﬁrmware, e.g., from its operating system,
speciﬁc OS and kernel conﬁgurations, or the
ﬁle’s CPU instruction set. In addition, security
analysts provide additional input on additional
context information that cannot be detected from
the ﬁrmware itself. The context information is
analyzed from metadata available in the vulnera-
bility database, from the vulnerability description,
and from further information about the vulnera-
bility available on the Internet. This analysis is
performed using various text analysis techniques.

4

FirmwareCyberDigital TwinVerifierCybersecurity Requirements:•Encryption•Secure boot•Allowed interfaces•Vulnerabilities management •Hardening•Coding standards•PrivacyIPs, emails, hashed passwords3Retracing of Vulnerabilities to Requirements1TransformationAnalysis24RequirementsVerificationHardware bill of materials
(HW BoM)

Network interfaces

Software
(SBoM)

bill

of materials

The detected hardware components and hardware conﬁguration: (i) CPU
architecture, (ii) CPU bit size, (iii) video card, (iv) network interfaces,
(v) other peripheral components. This conﬁguration can be derived
from static analysis of conﬁguration ﬁles, drivers and software libraries
detected from the ﬁrmware.

The detected network interfaces, including physical communication in-
terfaces such as Ethernet, USB, Wiﬁ, Bluetooth, CAN bus, cellular
(3G/4G/5G), radio and Zigbee, as well as logical communication pro-
tocols such as SMS.

The detected list of distinct software components including libraries
names and used versions. These components can be a mixture of open-
source software (OSS),
third-party commercial software, or ﬁrst-part
developed software libraries or applications.

Operating system

The operating system - open-source (Linux, Android) or commercial
(QNX, VxWorks etc.).

Operating system settings

Operating system conﬁgurations and settings. For example, the Linux /etc
ﬁles.

Kernel conﬁguration

The detected kernel conﬁguration - the list of enabled modules and
settings (such as sysctl parameters in Linux).

OS-level security conﬁguration

Speciﬁc operating system security conﬁgurations, for authentication or
other security mechanisms.

Memory management
mapping

and

The operating system memory management system, its conﬁguration and
actual usage pattern by the executables within the ﬁrmware.

User credentials

All the user authentication details - user names, passwords, tokens etc.

Firewall conﬁguration

The built-in ﬁrewall conﬁguration and rules.

Application frameworks

Application frameworks in use in the ﬁrmware and their conﬁguration.
For example - some commercial frameworks exist which provide addi-
tional application-level support.

APIs

The API sets that are available to use and the actual ones in use.

Application conﬁguration

Application-speciﬁc conﬁgurations and settings. For practicality purposes,
the focus is mostly on settings that have an impact on security.

Encryption mechanisms and
ﬂows

All encryption services and communication protocols using encryption,
and their use by different systems and applications in the ﬁrmware.

Encryption keys

Public and private encryption keys that are used to access internal and
external services.

Control and data ﬂow graph
representation

The actual applications code - the control and data ﬂows.

Table 1: The Cyber Digital Twin model

5

Department Head

The CDT approach also performs a binary
code analysis to ﬁnd unknown vulnerabilities.
This analysis consists of many phases. Some of
these run concurrently with others, and some rely
on information from others. They are in serial
order:

1) Binary File Loading: The proprietary ﬁles
are loaded one at a time to the unknown
detection engine, and the appropriate CPU
architecture is detected.

2) Section Mapping: Mapping the data and

code sections.

3) Instruction Set Disassembler: The assembly
code is disassembled and mapped to an
Intermediate Language (IL). This enables
the analysis engine to support a variety of
CPU instruction sets independently from
the vulnerability analysis itself, which is
performed on the IL.

4) Function Reconstruction: The functions are
reconstructed from the instructions stream.
5) Function Parameters and Stack Analysis:
Detection of function parameters and the
stack usage.

6) Control Flow Graph (CFG): Building the
intra-function control ﬂow, and direct inter-
function control ﬂow transitions.

7) Data ﬂow analysis: Analyzing the data ﬂow
in and out of functions. This phase includes
variable tracing and taint checking.

8) Remediation Analysis: Analysis and identi-
ﬁcation of possible remediations to detected
vulnerabilities.

9) Dynamic Execution: Dynamic execution of
the models for the purpose of determining
the validity of a given vulnerability.

through updates),

After the ﬁrmware has been released, the cor-
responding CDT is maintained and continuously
monitored to detect and evaluate changes: in the
in the CVE
ﬁrmware (e.g.,
databases (e.g., through newly disclosed vulner-
abilities), and in the security requirements (e.g.,
through introduction of new security policy reg-
ulations). That is, upon the mentioned changes,
further analyses are necessary to be conducted.
For example, in case of a newly disclosed CVE
in a used software library, the CDT is re-analyzed
as described above to check if the ﬁrmware is
affected by it.

The CDT enables vulnerability management
of an automotive ﬁrmware throughout its lifecy-
cle. The continuous monitoring of the CDT is
highly helpful and necessary since new vulnera-
bilities are discovered every day, and furthermore,
already in production ﬁrmware might need to be
updated a few times a year, what might in turn
introduce further vulnerabilities. Consequently,
the results of the analysis in pre-production will
become deprecated over time.

2.3. Requirements Veriﬁcation

From experiences of working and conducting
research on security solutions for the automotive
industry, we identiﬁed several common security
requirements. Examples for such requirements are
the employment of data encryption, secure boot
and system hardening techniques. Furthermore,
coding standards, such as from AUTOSAR, and
data privacy measures, such as hashed passwords,
should also be used. The management of vulner-
abilities throughout the whole ﬁrmware lifecycle
is a common requirement as well, since new
vulnerabilities are discovered from time to time
and consequently databases of publicly known
cybersecurity vulnerabilities are continuously ex-
panded. The fulﬁllment of such requirements as
well as the compliance to security standards en-
ables higher levels of security in the ﬁrmware.
Consequently, the veriﬁcation and evaluation of
security requirements of the ﬁrmware is a crucial
task.

In this context, cybersecurity requirements
for an automotive ﬁrmware are speciﬁed from
security policies, such as those in UNECE WP.29
and ISO/SAE 21434, or from discussions with
stakeholders. To check if the analyzed ﬁrmware
meets its speciﬁed cybersecurity requirements, we
have designed the component Veriﬁer (cf. Fig-
ure 1), which receives as input the CDT analysis
results as CSV report ﬁles. Such a report includes
a comprehensive list of known vulnerabilities
with corresponding CVE IDs and CWE IDs and
unknown weaknesses with corresponding CWE
IDs. We use algorithms to retrace the discov-
ered vulnerabilities based on their CWE IDs to
cybersecurity requirements. That is, we check if
a speciﬁc vulnerability can be traced back to
one or more requirements, and thereby identify
the non-fulﬁllment of the retraced requirements.

6

For this, mappings of CWEs to the speciﬁed
requirements for the ﬁrmware need to be created.
In this work, we have used mappings that were
created manually for a subset of requirements
based on the UNECE WP.29 regulation.

For example for the software library sqlite
v3.31.1, the CVE-2020-11656 was published in
the NIST national vulnerability database (NVD).
This CVE reports referencing memory after it
has been freed and is classiﬁed under the CWE-
416 (use after free). This issue might enable the
execution of arbitrary code that can be exploited
by attackers. Based on the classiﬁcation provided
by the CWE of the CVE, this kind of vulner-
ability can be traced back to system hardening
requirements (mapping “CWE-416: use after free
↔ system hardening requirement”). That is, an
automotive ﬁrmware using the mentioned library
and version does not fulﬁll a system hardening
requirement,
in case such a requirement was
speciﬁed for the ﬁrmware.

Abstract requirements are still challenging,
however. Yet, through the mapping of them to
concrete CVEs and CWEs, such requirements
are enriched with valuable information that can
be leveraged within requirement veriﬁcation and
also for the creation or update of further test
cases. As in the analysis of the CDT described in
Section 2.2, the requirement veriﬁcation is also
conducted continuously as response to changes
in the ﬁrmware,
in the CVE databases or in
the speciﬁed requirements, which results in the
generation of new reports.

In future work, we plan to automate the
creation of the mappings based on established
techniques, such as keyword extraction in Natural
Language Processing (NLP), to process and better
match CWE descriptions to requirements pro-
vided in cybersecurity regulations or in software
requirements speciﬁcations (SRS).

In summary, the component Veriﬁer evaluates
security requirements based on the SBoM, their
identiﬁed vulnerabilities, and mappings from cor-
responding CWEs to speciﬁed requirements. For
example, it checks if the ﬁrmware uses hardening
techniques helping to avoid security attacks, such
as address space layout randomization (ASLR).
The mappings of CWEs and requirements are cre-
ated and reviewed manually by security experts.
Currently, we are designing a semi-automated

solution to reduce the manual effort, in which
such mappings are created automatically and re-
viewed by security experts to correct possible
mismatches.

3. RESULTS

To comply with cybersecurity regulations,
OEMs need to demonstrate that they use a cyber-
security management system capable of ensuring
adequate security of vehicles [2]. The CDT ap-
proach supports OEMs thereby through security
analysis and vulnerabilities management in the
development and post-production phase.

To explain how the CDT approach is used
to continuously verify requirements, we walk
through the steps taken to verify a cybersecu-
rity requirement, which was derived from the
UNECE WP.29 cybersecurity regulation (4.3.6
Threats to vehicle data/code, in Annex A, Ta-
ble A1: List of vulnerability or attack method
related to the threats) [2]. In the exemplary re-
quirement, ﬁrmwares shall prevent unauthorized
access to privacy information. More concretely,
to avoid privacy information leakage, adequate
security technologies and mechanisms should be
employed that validate and prevent privacy infor-
mation leakage to happen. Examples of privacy
information are personal
identity, payment ac-
count information, passwords, e-mail addresses,
or IP addresses.

First, the CDT is created for the ﬁrmware
is
in question. Second, a security analysis
in which known vulnerabilities are
conducted,
searched for the libraries in the software bill of
materials. In this analysis, the CDT in general is
also checked for unknown vulnerabilities and se-
curity policies violations, such as system harden-
ing misconﬁgurations. Afterwards, each discov-
ered vulnerability is traced back to corresponding
requirements based on its threats, vulnerabilities
and attack methods. If no vulnerabilities could
be traced back to the aforementioned exemplary
requirement, this requirement will be veriﬁed as
fulﬁlled. If at least one vulnerability can be traced
back to the requirement, this requirement will not
be fulﬁlled. Finally, the security analysis results,
e.g., the uncovered vulnerabilities of the ﬁrmware
in question, are described in a comprehensive
report, which is generated automatically. Note
that security analyses are also realized in post-

7

Department Head

i.e.,

production,
the software bill of materials
and CVE databases are continuously monitored
to catch newly disclosed vulnerabilities. In this
way,
the CDT approach enables vulnerability
management of the entire lifecycle of a ﬁrmware.
Our approach has been implemented in the
CDT Platform [8]. We applied our approach to
about 100 automotive-oriented ﬁrmwares, which
exist in almost every car nowadays, such as in-
vehicle infotainment (IVI) systems, telematics or
advanced driver assistance systems (ADAS).

Most of the analyzed ﬁrmwares are rich com-
ponents, which are ﬁrmwares that include an op-
erating system (OS), several interfaces and many
open-source libraries. Furthermore, they usually
have an ARM CPU architecture and a Linux,
QNX, or Android OS. The other kind of analyzed
ﬁrmwares are lower-level microcontrollers. Such
ﬁrmwares are usually of smaller size, have no OS
nor open-source libraries, and have a Renesas or
Tricore CPU architecture.

The main characteristics that inﬂuence cre-
ation and analysis time of a CDT are the ﬁrmware
ﬁle size and the number of ﬁles. The ﬁle size
typically ranges from a few megabytes for small,
microcontroller based components, up to tens of
gigabytes for complex infotainment systems. The
number of ﬁles typically ranges from one ﬁle up
to hundreds of thousands of ﬁles. We typically
have run times for a complete CDT creation and
analysis that take minutes for small components
and a few hours for the largest components.

The presented results in the following are
from the third quarter of 2020. The top 3 most
used open-source libraries on the analyzed auto-
motive ﬁrmwares were:

1) Zlib 1.2.8 (or older), version date: 2013-04-
29, latest release: 2017-01-15, age: 3 years
2) Bzip 1.0.6, version date: 2010-09-06, latest

release: 2019-07-13, age: 8 years

3) Expat 2.2.0, version date: 2016-06-21, lat-

est release: 2019-09-25, age: 3 years

these libraries are at least 3 years outdated, Bzip
is even 8 years old. This is a serious concern,
since using outdated libraries expose ﬁrmwares
to a higher risk of vulnerabilities than using up-
to-date libraries.

The average number of used libraries per
ﬁrmware (rich components) corresponds to about
150 libraries. We can see that amongst the top
3, there are the Zlib and Bzip libraries that are
used for data compression. They are very likely
to be used in any kind of ﬁrmware, i.e., not only
in automotive-oriented ﬁrmwares. Libraries that
have this kind of characteristic and that can be
used across different OS’s are naturally going to
appear in many components, and therefore, are
very popular.

With respect to security vulnerabilities, the
two most common publicly known vulnerabilities
(CVEs) detected in the analysed ﬁrmwares were
both found in the library sqlite and are use-after-
free vulnerabilities (CVE-2020-11656 and CVE-
2020-13631). The average number of detected
CVEs per ﬁrmware (rich component) was about
600 vulnerabilities, from which about 20 were of
critical severity.
Finally,

the average number of discovered
unknown vulnerabilities per ﬁrmware is about
80, from which 10 are of high severity. Un-
known vulnerabilities are classiﬁed based on
the types deﬁned by the common weakness
enumeration (CWE) database. The three most
common unknown vulnerabilities identiﬁed in
the analyzed ﬁrmwares are related to memory
corruption (CWE-119), buffer overﬂow (CWE-
125) and access control (CWE-338). The lat-
ter unknown vulnerability can lead to the non-
fulﬁllment of the aforementioned exemplary re-
quirement (ﬁrmwares shall prevent unauthorized
access to privacy information), since inadequate
access control can facilitate unauthorized access
to privacy information.

4. CONCLUSION

The version date indicates when the used
library version was released, while the latest re-
lease indicates the date of the latest version of the
library (at the time the results were processed).

Zlib and Bzip are libraries for data compres-
sion, while Expat is a library for parsing XML
documents. One important observation is that all

In future work, we plan to extend our ap-
proach to automatically generate test cases for
the CDT based on common cybersecurity require-
ments of automotive software. From the software
bill of materials, we get a list of libraries used and
the deployed versions. We can use this informa-
tion to generate fuzz test cases in several ways.

8

The ﬁrst and most straightforward way would
be to use speciﬁc protocol fuzzers for libraries
that use known protocols. Second, for the open-
source libraries, we can retrieve the interfaces and
potentially mine input grammars from the repos-
itories directly. Third, for commercial libraries,
the further control and data ﬂow analyses on
the binaries can be used for fuzzing. Fourth, we
could build a database of popular libraries, their
interfaces and interesting attach surfaces to fuzz
corresponding tests.

REFERENCES

1. D. M. Fern ´andez, S. Wagner, M. Kalinowski,

M. Felderer, P. Mafra, A. Vetr `o, T. Conte, M.-T.

Christiansson, D. Greer, C. Lassenius, et al., “Naming

the pain in requirements engineering,” Empirical

software engineering, vol. 22, no. 5, pp. 2298–2338,

2017.

2. United Nations, “UNECE WP.29 regulation,” 2020.

3.

International Organization

for

Standardization.,

“ISO/SAE DIS 21434 Road vehicles - Cybersecurity

engineering,” 2020.

4. D. S. Cruzes, M. Felderer, T. D. Oyetoyan, M. Gander,

and I. Pekaric, “How is security testing done in agile

teams? a cross-case analysis of four software teams,”

in International Conference on Agile Software Develop-

ment, pp. 201–216, Springer, Cham, 2017.

5. L. Ciravegna, P. Romano, and A. Pilkington, “Outsourc-

ing practices in automotive supply networks: an ex-

ploratory study of full service vehicle suppliers,” Inter-

national Journal of Production Research, vol. 51, no. 8,

pp. 2478–2490, 2013.

6. B. Liu, L. Shi, Z. Cai, and M. Li, “Software Vulnerability

Discovery Techniques: A Survey,” in 2012 Fourth In-

ternational Conference on Multimedia Information Net-

working and Security, pp. 152–156, 2012.

7. S. Boschert and R. Rosen, Digital Twin–The Simulation

Aspect, pp. 59–74. Cham: Springer International Pub-

lishing, 2016.

8. Cybellum Technologies Ltd, “Introduction to Cybellum

Security Suite – Risk Assessment for Automotive Soft-

ware,” 2020.

9. P. Chapman and D. Evans, “Automated black-box detec-

tion of side-channel vulnerabilities in web applications,”

in Proceedings of the 18th ACM conference on Com-

puter and communications security, pp. 263–274, 2011.

10. Z. Djuric,

“A black-box testing tool

for detecting

SQL injection vulnerabilities,” in 2013 Second interna-

tional conference on informatics & applications (ICIA),

pp. 216–221, IEEE, 2013.

11. M. Grieves and J. Vickers, “Digital twin: Mitigating un-

predictable, undesirable emergent behavior in complex

systems,” in Transdisciplinary perspectives on complex

systems, pp. 85–113, Springer, 2017.

12. E. Glaessgen and D. Stargel,

“The digital

twin

paradigm for future NASA and US Air Force vehi-

cles,” in 53rd AIAA/ASME/ASCE/AHS/ASC structures,

structural dynamics and materials conference 20th

AIAA/ASME/AHS adaptive structures conference 14th

AIAA, p. 1818, 2012.

13. E. Hadar, D. Kravchenko, and A. Basovskiy, “Cyber

Digital Twin Simulator for Automatic Gathering and

Prioritization of Security Controls’ Requirements,” in

2020 IEEE 28th International Requirements Engineer-

ing Conference (RE), pp. 250–259, IEEE, 2020.

Ana Cristina Franco da
Silva is a postdoc at the
Software
of
Institute
at
Engineering
the
of
Stuttgart.
University
interests
research
Her
include
the
in
testing
IoT, data processing in
IoT
and
environments,
software quality. She holds
in
a
computing engineering, a master degree in software
engineering, and defended her Ph.D.
in the ﬁeld
of data processing in the IoT at the University of
Stuttgart. Contact her at ana-cristina.franco-da-
silva@iste.uni-stuttgart.de.

bachelor

degree

of

is a full
Stefan Wagner
professor
empirical
of
software engineering and
the
managing director of
Software
Institute
at
Engineering
the
University
Stuttgart.
of
His research interests are
requirements engineering,
software quality, safety and
security engineering, agile
and continuous software
development. He studied computer science in
Augsburg and Edinburgh and received a doctoral
degree from the Technical University of Munich.

9

Department Head

Contact him at stefan.wagner@iste.uni-stuttgart.de.

Eddie Lazebnik is Global
Partners Director at Cybel-
lum, leading the company’s
strategic partnerships ac-
tivity. Eddie has 15 years
of experience in cyberse-
curity, both in the private
and public sectors including
the Israeli government and
military organizations. Ed-
die holds a B.Sc. in Electri-
cal Engineering and Electronics, B.Sc. in Physics and
an MBA, all from Tel Aviv University. Contact him at
eddie@cybellum.com.

is VP Prod-
Eyal Traitel
uct Management at Cybel-
lum. In his role, he is man-
aging the product planning,
from requirements to de-
sign and UX/UI, working
closely with customers to
understand their needs in
product security, and fol-
lowing regulatory require-
ments, analyzing standards
such as WP.29, ISO 21434 and others. Eyal has
over 24 years of global experience in the enterprise
software industry,
in early stage startups and the
largest corporations. Eyal has co-authored books
for O’Reilly and IBM Redbooks. Contact him at
eyal@cybellum.com.

10

