Supervised Feature Selection Techniques in
Network Intrusion Detection: a Critical Review

M. Di Mauroa,‚àó, G. Galatrob, G. Fortinoc and A. Liottad

aDepartment of Information and Electrical Engineering and Applied Mathematics (DIEM), University of Salerno, 84084, Fisciano, Italy
bAmazon AWS, Belgard Retail Park, Tallaght, Dublin, Ireland
cDepartment of Informatics, Modeling, Electronics and Systems, University of Calabria, Italy
dFaculty of Computer Science, Free University of Bozen-Bolzano, Italy

1
2
0
2

r
p
A
1
1

]

R
C
.
s
c
[

1
v
8
5
9
4
0
.
4
0
1
2
:
v
i
X
r
a

A R T I C L E I N F O

Keywords:
Feature Selection
Machine Learning
Network Intrusion Detection
Network Performance

A B S T R A C T

Machine Learning (ML) techniques are becoming an invaluable support for network intrusion de-
tection, especially in revealing anomalous Ô¨Çows, which often hide cyber-threats. Typically, ML al-
gorithms are exploited to classify/recognize data traÔ¨Éc on the basis of statistical features such as
inter-arrival times, packets length distribution, mean number of Ô¨Çows, etc. Dealing with the vast
diversity and number of features that typically characterize data traÔ¨Éc is a hard problem. This re-
sults in the following issues: i) the presence of so many features leads to lengthy training processes
(particularly when features are highly correlated), while prediction accuracy does not proportionally
improve; ii) some of the features may introduce bias during the classiÔ¨Åcation process, particularly
those that have scarce relation with the data traÔ¨Éc to be classiÔ¨Åed. To this end, by reducing the fea-
ture space and retaining only the most signiÔ¨Åcant features, Feature Selection (FS) becomes a crucial
pre-processing step in network management and, speciÔ¨Åcally, for the purposes of network intrusion
detection. In this review paper, we complement other surveys in multiple ways: i) evaluating more
recent datasets (updated w.r.t. obsolete KDD 99) by means of a designed-from-scratch Python-based
procedure; ii) providing a synopsis of most credited FS approaches in the Ô¨Åeld of intrusion detection,
including Multi-Objective Evolutionary techniques; iii) assessing various experimental analyses such
as feature correlation, time complexity, and performance. Our comparisons oÔ¨Äer useful guidelines
to network/security managers who are considering the incorporation of ML concepts into network
intrusion detection, where trade-oÔ¨Äs between performance and resource consumption are crucial.

1. Introduction

With the rapid growth of digital technology and com-
munications, we are overwhelmed by network data traÔ¨Éc,
which are diverse for media type (e.g. video, voice, text, sen-
sory, etc.), and originate from (and are transported through)
a broad range of sources (e.g. mobile networks, cloud infras-
tructures, Internet of Things, etc.). Consequently, we handle
high-dimensionality data, calling for increasingly more so-
phisticated classiÔ¨Åcation methods [1, 2].

Typically, we refer to high dimensionality when we deal
with data whereby a large number of features may be ex-
tracted, to the point that the features may even exceed the
number of observations. This leads to major issues, particu-
larly the massive increase in training times.

To this end, Feature Selection (FS) is a promising re-
search direction, looking at ways to reduce the feature space
in order to pinpoint only the most signiÔ¨Åcant features. As
a fundamental pre-processing step in machine learning, FS
is gaining prominence in network management and, specif-
ically, for the purposes of network intrusion detection and
network traÔ¨Éc classiÔ¨Åcation problems [3, 4, 5, 6].

More generally, FS Ô¨Ånds an even much broader applica-
bility in Ô¨Åeld as diverse as bioinformatics [7, 8, 9, 10],image
recognition/retrieval [11, 12, 13, 14, 15, 16, 17], fault diag-

‚àóCorresponding author

mdimauro@unisa.it (M. Di Mauro); galatrogiovanni@gmail.com (G.

Galatro); g.fortino@unical.it (G. Fortino); antonio.liotta@unibz.it (A.
Liotta)

nosis [18, 19], text mining [20, 21, 22] and, interestingly, in
network traÔ¨Éc analysis/classiÔ¨Åcation, whose pertinent bib-
liography will be covered more closely in the following.

Machine learning engines can be easily embedded in net-
work intrusion detection systems (IDS), which represent an
essential part of network infrastructures to guarantee secu-
rity [23, 24, 25] and availability [26, 27, 28, 29, 30, 31, 32,
33, 34]. SpeciÔ¨Åcally, modern NIDS can be equipped with
software probes in charge of analyzing network traÔ¨Éc on the
basis of some characterizing features such as: distribution
of inter-arrival times, distribution of packet sizes, presence
of speciÔ¨Åc TCP/IP Ô¨Çags, percentage of forward/backward
Ô¨Çows. Such statistical information is instrumental to reveal-
ing anomalous traÔ¨Éc, which is often behind Distributed De-
nial of Service (DDoS) attacks [35, 36], covert Voice-over-
IP sessions [37], threat diÔ¨Äusion [38] and Peer-2-Peer traÔ¨Éc
[39, 40, 41]. In many cases, these Ô¨Çows would pass unob-
served through other conventional signature-based analyses.
In principle, a larger number of features would allow to
perform more granular analyses; yet, two main drawbacks
emerge. First, a proliferation of correlated features leads to
levels of redundancy that are useless, while resulting in in-
creasingly longer training times. Also, not all features are
valuable in characterizing traÔ¨Éc, incurring bias during the
classiÔ¨Åcation step.

If we consider, as an example, some novel probes such as
ISCXFlowMeter [42], these can actually generate more than
80 features to characterize data traÔ¨Éc, which makes it ex-

Di Mauro et al.: Preprint submitted to Elsevier

Page 1 of 19

 
 
 
 
 
 
Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

tremely diÔ¨Écult for the network analyst to deal with this vast
amount of information. This is where an FS pre-processing
step becomes invaluable.

Across the scientiÔ¨Åc literature, many works are devoted
to surveying machine learning algorithms with applications
to internet traÔ¨Éc classiÔ¨Åcation. Yet, few attempts have been
made in the Ô¨Åeld of FS techniques, where two main short-
comings emerge: i) many works analyze and compare FS
algorithms applied to non-speciÔ¨Åc datasets [43, 44, 45]; ii)
are either based on outdated datasets, or lack the experimen-
tal dimension. Overall, not much novel algorithms have been
compared (refer to details provided in Table 1, discussed fur-
ther ahead). Aimed at Ô¨Ålling these gaps, our paper provides
the main following contributions:

‚Ä¢ We perform an experimental analysis of more re-
cent datasets (classic literature focuses on the 20-year
old KDD99 dataset) by means of our designed-from-
scratch Python based routine. This allows us to i) per-
form cleaning, re-balancing, and data mixing opera-
tions, and ii) automatically interact with speciÔ¨Åc ML-
based engines.

‚Ä¢ We present a variety of experimental results (in-
cluding: feature correlation, time complexity, perfor-
mance) aimed at critically comparing selected fam-
ilies of FS algorithms, ranging from classic ones
(rank search, linear forwarding selection) to modern
bio-inspired algorithms (genetic search, ant colonies,
multi-objective evolutionary), thus going well beyond
a conventional literature survey.

Our experimental-based, comparative assessment Ô¨Ånds
fruitful applications in the Ô¨Åeld of network/security manage-
ment, where machine learning techniques are proved to of-
fer a precious support to intrusion detection tasks, and where
critical trade-oÔ¨Äs between performance classiÔ¨Åcation and re-
source consumption arise.

The paper is organized as follows: Section 2 oÔ¨Äers a gen-
eral perspective on FS methods, in line with other accredited
taxonomies. In Section 3 we analyze how diverse FS tech-
niques have been applied in the literature, often based on the
old KDD99 dataset. Section 4 proposes an excursus of pop-
ular FS algorithms (classic and modern) along with some
necessary technical details. In Section 5 we analyze the ex-
ploited novel datasets by grouping the most relevant features
in families. In Section 6 we perform an experimental-based
comparative analysis of prominent FS algorithms, provid-
ing performance, feature correlation, and time-complexity
Ô¨Ågures. Finally, Section 7 draws conclusions and provides
future-direction indications.

2. Overview of Feature Selection

Feature Selection refers to that set of techniques and
strategies that allow to optimize the feature space, namely,
an ùëõ-dimensional space where each sample is represented as
a point. When dealing with large feature spaces, the anal-
ysis of data, which starts from their representative features,

can be tremendously time and resource consuming. Hence,
the need to devise suitable FS strategies aimed at eliminat-
ing ùëñ) irrelevant features, namely, those features that are not
actually needed to build an optimal feature subset; and ùëñùëñ)
redundant features, namely, those features that strongly de-
pend on other features [46].

Feature selection can be considered as a special case of
feature extraction methods [47]. The latter refer to a set of
techniques (e.g. PCA, Single Value Decomposition, Linear
Discriminant Analysis and others) useful to transform the
original feature space in a new one aimed at alleviating the
eÔ¨Äects of the notorious curse of dimensionality problem [48,
49]. It is important to note that feature extraction comes with
the critical risk of obtaining a transformed feature space that
could lose its original physical meaning, whereas classic FS
aims at preserving it [50, 51].

A more formal deÔ¨Ånition of the FS problem follows.
Given a feature set ùëã = {ùë•ùëñ ‚à∂ ùëñ = 1, ‚Ä¶ , ùëÅ}, Ô¨Ånd a subset
} with ùêæ < ùëÅ, where an objective
, ‚Ä¶ , ùë•ùëñùêæ
ùëÜùêæ = {ùë•ùëñ1
function Y(‚ãÖ) is optimized, namely:

, ùë•ùëñ2

{ùë•ùëñ1

, ùë•ùëñ2

, ‚Ä¶ , ùë•ùëñùêæ

} = arg max

ùêæ,ùëñùëò

[ùëå {ùë•ùëñ ‚à∂ ùëñ = 1, ‚Ä¶ , ùëÅ}]. (1)

Unless otherwise stated, the problem is to select the optimal
subset of features (according to a speciÔ¨Åc criterion) from the
initial set, where two steps are typically performed: the Ô¨Årst
one involves a search strategy to pinpoint candidate subsets;
the second one involves an objective function to evaluate the
selected candidate subsets. The latter can be split in two
types [52, 53, 54, 55]: ùëñ) Ô¨Ålters, referring to objective func-
tions that rely on properties of the data by evaluating the
information content (e.g. correlation measures, inter-class
distance); ùëñùëñ) wrappers, referring to objective functions that
exploit training models by starting from a subset of features
and, then, adding or removing features based on the previous
model.

A commonly accepted taxonomy of FS methods is pre-
sented in [56], where three classic approaches have been
identiÔ¨Åed as supervised, unsupervised, and semi-supervised.
According to the supervised approach, labeled data are ex-
ploited to single out a feature subset, considering speciÔ¨Åc cri-
teria for measuring the features importance. Conversely, un-
supervised techniques seek to unveil the intrinsic data struc-
ture to select the most signiÔ¨Åcant features, without assuming
any a priori knowledge [57].

Finally,

the semi-supervised approach is based on a
mixed strategy, striving to enrich an unlabeled set with some
labeled data, so as to improve the FS phase. Both the un-
supervised and the semi-supervised approaches exhibit the
drawback of neglecting potential correlations among fea-
tures, resulting in the analysis of sub-optimal sets. This
may prove critical when dealing with traÔ¨Éc analysis, where
we need to take into account statistical-based features (e.g.
inter-arrival times variance, average packet length, etc.) and
deterministic ones (e.g. IP addresses, port numbers, etc.).
Let us consider, for example, a particular kind of traÔ¨Éc di-
rected towards a Ô¨Åxed destination port for a certain period

Di Mauro et al.: Preprint submitted to Elsevier

Page 2 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

Table 1
Prominent related work surveying FS techniques applied to Network Intrusion Detection.

Authors
Wang et al. [58]

Experiments
Performance analysis

Single/Multi Class
Single Class

Janarthanan et al.
[59]

Performance analysis

Single/Multi Class

El-Khatib [60]

Performance analysis

Single/Multi Class

Chen et al. [61]

Nisioti et al. [62]

Performance analysis, Time
analysis
N/A

Single Class

N/A

Iglesias et al. [63]

Performance analysis

Single/Multi Class

Singh et al. [64]

Bahrololum et al.
[65]

Performance analysis, Time
analysis
Performance analysis

Single Class

Single/Multi Class

Dhote et al. [66]

N/A

N/A

This work

Performance analysis, Feature
Correlation analysis, Time
analysis

Single/Multi Class

Description
Feature Selection performed on the KDD99
dataset, by applying C4.5 and Bayesian Net-
work algorithms
Empirical selection of features by performing
tests on KDD99 and UNSW-NB15 datasets
by means of Random Forest algorithm
Feature selection combining Filter/Wrapper
methods for Wireless IDS. Tests have been
performed on a WLAN environment
Correlation-based Feature selection using the
KDD99 dataset
Classic survey on ML-based techniques (in-
cluding FS) with pointers to detailed sources,
but with no experiments
Comparison among 4 FS algorithms on the
NSL-KDD dataset
Comparison among various FS algorithms on
the KDD99 dataset
Comparison among PSO, Decision Tree,
Flexible neural tree algorithms on the KDD99
dataset
Limited survey of FS techniques applied to
network traÔ¨Éc, with pointers to detailed
sources, but with no experiments
Feature Selection performed on the CIC-IDS-
2017/2018 dataset, by considering 9 FS algo-
rithms from classic (Rank, Scatter) to mod-
ern (Genetic, Multi-Objective Evolutionary)

of time. An unsupervised approach could lead to a subset of
features which does not include the destination port. Thus,
a crucial (as well as deterministic) piece of information gets
lost.

On the other hand, a supervised approach can oÔ¨Äer opti-
mal results, provided that the data are correctly labeled. This
case typically occurs in a controlled network environment,
where, with the help of network analyzers, it is possible to
automatically label the type of passing data traÔ¨Éc.

Because of the great potential of supervised methods,
and thanks to the availability of suitable labeled datasets, we
have decided to focus our experimental-based comparative
evaluation on supervised FS methods.

3. Related Work on Feature Selection applied

to ML-based Intrusion Detection
Most scientiÔ¨Åc literature involving ML approaches is
typically focused on the proposal of algorithms or tech-
niques for classiÔ¨Åcation/detection of speciÔ¨Åc network traÔ¨Éc
([67, 68, 69, 70, 71, 72, 73, 74]). Unfortunately, the straight
application of machine learning to network traÔ¨Éc analysis is
not always feasible, due to the broad variety of traÔ¨Éc types,
which leads to unmanageable feature spaces. Intuitively, in
fact, a highly diversiÔ¨Åed traÔ¨Éc (multimedia, asynchronous,

bursty, etc.) requires a large set of features able to capture
the variegated ‚Äúnature" of the diÔ¨Äerent Ô¨Çows. That is why
appropriate pre-processing steps (i.e. FS) play a crucial role,
thus a signiÔ¨Åcant portion of ML-based literature has shown
interest in FS techniques.

For instance, to improve the performance of IDS frame-
works, the authors of [75] propose a mixed strategy in-
volving Principal Component Analysis and fuzzy clustering
with KNN-based FS techniques. A correlation-based FS ap-
proach coupled with a Support Vector Machine (SVM) clas-
siÔ¨Åer is proposed in [76] to build a cloud-based IDS. An IDS
based on deep learning methods, along with a Ô¨Ålter-based
FS algorithm, is introduced in [77]. Similarly, a Convolu-
tional Neural Network (CNN) approach is exploited in [78]
to select traÔ¨Éc features from raw data sets, improving the
accuracy of an intrusion detector. Yu and Liu propose a
mutual information-based algorithm that can analytically se-
lect optimal features for classiÔ¨Åcation, by handling linearly
and non-linearly dependent data [79]. Again, FS is exploited
jointly with ArtiÔ¨Åcial Neural Networks [80] and Deep Neural
Networks [81], respectively, to improve IDS performance.
Furthermore, authors in [82] embed in an IDS two FS algo-
rithms that are compared against mutual information-based
methods.

A major shortcoming of these works is that methods

Di Mauro et al.: Preprint submitted to Elsevier

Page 3 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

are validated and compared through the outdated KDD99
dataset. This contains information about older network at-
tacks (that have been mitigated by now) or, in some cases,
adopts an updated version of KDD99, namely NSL-KDD
[83]. Yet, although NSL-KDD adds some improvements
onto KDD99 (e.g. no redundant records, better balancing
between training and test set, etc.), it does not take into ac-
count features that characterize novel cyber attacks. Other
works in the Ô¨Åeld of machine learning applied to intrusion
detection rely on more recent datasets such as UNSW-NB15
[84, 85, 86, 87]. Although quite recent, such a dataset has
two limitations: Ô¨Årst, the traÔ¨Éc has been collected in a re-
duced testbed; and secondly, the number of features is lim-
ited to 49, which is too small to appreciate the eÔ¨Äectiveness
of feature selection techniques. In contrast, in our work we
rely on an up-to-date dataset from the Canadian Institute for
Cybersecurity [88] which has the following beneÔ¨Åts: ùëñ) it
contains data traÔ¨Éc gathered over a vast network area; and ùëñùëñ)
it accounts for about 80 features, allowing to extensively test
the feature selection algorithms. Additional details about
this dataset are provided in Section 5.

Going more speciÔ¨Åcally into the set of works that share
with this paper the aim to compare or survey FS methods for
intrusion detection, we have collected the signiÔ¨Åcant papers
in Table 1. In it, we have identiÔ¨Åed the material covered in
the literature, which helps appreciating the contributions of
our paper. The Ô¨Årst column of Table 1 points to the source;
the second column highlights the type of experimental anal-
ysis (if any); the third column pinpoints the type of datasets
utilized (single or multi-class); the last column provides a
concise description of the surveyed material.

4. Review of Feature Selection Algorithms

under Scrutiny
In this section, we brieÔ¨Çy describe the algorithms under
scrutiny, which belong to diÔ¨Äerent families of FS techniques,
ranging from classic rank-guided (Rank, Linear Forward Se-
lection) and meta-heuristic (Tabu, Scatter, Particle Swarm)
ones, to nature-inspired algorithms (Ant, Cuckoo), and up
to modern techniques (Genetic, Multi-Objective Evolution-
ary).

For each algorithm, we provide a brief recap along with
its pertinent application in network traÔ¨Éc analysis and secu-
rity in literature.

4.1. Rank-based Feature Selection

Algorithms belonging to this family follow an approach
based on two macro-steps: in the Ô¨Årst one, the features are
ranked according to a certain statistical measure, whereas in
the second step the algorithm chooses the top ranked features
(eventually partitioned in clusters). We investigate and put
to test two representative algorithms of this family: Rank
Search and Linear Forward Selection.

4.1.1. Rank Search

The Rank Search technique refers not only to a single al-
gorithm, but, to an umbrella of methods able to produce a list

of attributes ranked with some criteria. One of the most ap-
plied rank-based techniques in FS relies on the Information
Gain (IG) concept [89]. Given an attribute A and a class C,
the entropy of the class without and with prior observation
of the attribute are, respectively:

ùêª(ùê∂) = ‚àí

‚àë

ùëê‚ààùê∂

ùëù(ùëê)ùëôùëúùëî2ùëù(ùëê),

and

ùêª(ùê∂|ùê¥) = ‚àí

‚àë

‚àë

ùëù(ùëé)

ùëù(ùëê|ùëé)ùëôùëúùëî2ùëù(ùëê|ùëé).

(2)

(3)

ùëé‚ààùê¥

ùëê‚ààùê∂
The IG is given by ùêª(ùê∂) ‚àí ùêª(ùê∂|ùê¥ùëñ), and represents the
amount of the class entropy decreasing due to the a priori
knowledge introduced by ùëñ-th attribute.

Over network traÔ¨Éc analysis literature, the rank search
method has been widely exploited in conjunction with stan-
dard machine learning algorithms typically used during the
classiÔ¨Åcation step. In [90], having the NSL-KDD dataset as
input, the proposed algorithm ùëñ) evaluates the information
gain value, ùëñùëñ) applies fuzzy rules to remove unwanted fea-
tures, ùëñùëñùëñ) calculates the mean value of IG across the new sub-
set of features, ùëñùë£) reÔ¨Ånes the feature subsets by applying an
algorithm based on conditional probability evaluation. Au-
thors in [91] propose a detection model able to cope with
network attacks based on the feature IG ranking; once ob-
tained a satisfying feature set, a triangle area based KNN,
combining both SVM and greedy techniques, is exploited to
single out even more discriminative and useful features. A
combination between an IG-based feature selection method
and a C4.5-based classiÔ¨Åer is advanced in [92], where the re-
sulting algorithm has been optimized (in terms of power con-
sumption) to reveal DoS attacks in ad hoc networks. Simi-
lar ensemble has been exploited in [93], where authors con-
sider a broader set of classiÔ¨Åers (C4.5, Random Forest, Naive
Bayes, etc.) and where the analysis focuses on generic mal-
ware detection. Again, a mixed Genetic/KNN approach for
intrusion detection presented in [94] beneÔ¨Åts from a feature
reduction procedure obtained applying ID3 algorithm to Ô¨Ånd
higher IG.

4.1.2. Linear Forward Selection

Such a technique to reduce the feature space dimension-
ality has been presented in [95]. Linear Forward Selection
(LFS) can be considered as an improvement of Sequential
Forward Selection (SFS) method which starts with an empty
set of features and sequentially adds one feature at a time.
In order to face the Óàª(ùëÅ 2) complexity of SFS, in LFS the
number of considered features at each step does not exceed
a certain user-speciÔ¨Åed constant, thus, the resulting perfor-
mance is impressively ameliorated. Two methods for limit-
ing the number of features have been implemented in LFS
algorithm: ùëñ) Fixed Set, where a score obtained by means of
a wrapper evaluator is used to choose the top-ùëò ranked at-
tributes, thus, the maximum number of evaluations reduces
to ùëò‚àï2(ùëò + 1) ; ùëñùëñ) Fixed Width, where, at each forward

Di Mauro et al.: Preprint submitted to Elsevier

Page 4 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

selection step, the number of features is increased by one,
such that the set of candidate expansions consists of the best
In
ùëò features not been selected so far during the search.
such case, the maximum number of evaluations amounts to
ùëÅ ‚ãÖùëò‚àíùëò‚àï2(ùëò+1). Forward Selection-based techniques have
been exploited across the traÔ¨Éc classiÔ¨Åcation domain for de-
tection of malicious application on Android [96], detection
of zero day attacks [97], designing novel anomaly detection
systems [98].

4.2. Meta-heuristic Feature Selection

Techniques belonging to this family rely on the principle
that it is possible to select heuristics, namely, approximate
algorithms searching for a suÔ¨Éciently good solution to an
optimization problem, useful when some constraints arise
(e.g. limited computational resources, incomplete informa-
tion). We select three representative algorithms of this fam-
ily: Tabu Search, Scatter Search, and Particle Swarm Opti-
mization.

4.2.1. Tabu Search

Tabu Search (TS) algorithm has been originally pro-
posed in [99], and, then, it has been extended and exploited
to solve practical optimization problems [100, 101, 102].
TS is based on a metaheuristic method able to pilot a lo-
cal heuristic search in exploring the space of solutions be-
yond the local optimality. Two main features characterize
TS: adaptive memory and responsive exploration. The for-
mer allows to perform local choices guided by information
collected during the search, whereas, the latter allows to
make strategic choices. In other words, TS exploits a local
search procedure combined with memory-based strategies,
thus, the issue of getting trapped in local optimal solutions is
avoided. To implement the memory-based mechanism, TS
builds a map of recently visited solutions called Tabu List
(TL). A simpliÔ¨Åed TS algorithm is illustrated below:

Algorithm 1: Tabu Search

1. Given a function ùëì (ùë•) to be optimized over a set
ÓâÑ, start from initial solution ùë•0 ‚àà ÓâÑ, initialize
Tabu List (TL), and initialize a counter ùëñ = 0.
2. Given ùëÅ(ùë•ùëñ) ‚äÇ ÓâÑ the neighborhood of ùë•ùëñ
can be reached by ùë•ùëñ
operation. Thus, generate a neighborhood move
list ùëÄ(ùëãùëñ
).
3. Given ùë•ùëñ+1
TL.
4. In case stopping conditions are met, terminate.
Otherwise, repeat Step 2.

the best solution in ùëÄ(ùëãùëñ

by means of a move

), update

, ùëÅ(ùë•ùëñ)

It is interesting to notice that, the memory structures char-
acterizing TS method operate according four dimensions
[100]:

‚Ä¢ Recency: concerns the ability of keeping track of so-
lutions attributes that have changed across the recent
past.

‚Ä¢ Frequency:

involves the mechanism exploited to

broad the foundation for selecting preferred moves.

‚Ä¢ Quality: pertains to the capacity of discriminating the
merit of solutions visited during the search operation.

‚Ä¢ InÔ¨Çuence:

takes into account the impact of choices

performed during the search.

In the Ô¨Åeld of network traÔ¨Éc classiÔ¨Åcation, TS has been
exploited in [103] jointly with fuzzy techniques aimed at op-
timizing the exploration of feature search space in intrusion
detection problems. A combination of TS technique and
KNN is presented in [104], where KNN is initially exploited
to generate a subset of non-redundant features, whereas, TS
is used to reÔ¨Åne the obtained subset. Again, authors in [105]
propose a wrapper FS algorithm, dubbed GATS-C4.5, that
embeds an hybrid Genetic and Tabu-based method as feature
selection strategy and a supervised ML algorithm (C4.5) as
the evaluation function. Similar combinations between TS
and Genetic techniques have been used in [106] where some
tests (vs pure Genetic algorithms) across DARPA dataset
have been carried out, and in [107] where SVM has been
adopted as a classiÔ¨Åcation criterion.

4.2.2. Scatter Search

Scatter Search is a metaheuristic algorithm involving
memory-based mechanisms similar to those exploited in
Tabu Search [108]. The main strategy relies on an iterative
process that organizes high-quality optimal solutions into
subsets, and where Ô¨Åve ‚Äúmethods" emerge: ùëñ) DiversiÔ¨Åca-
tion, to create a set of diÔ¨Äerent trial solutions by exploiting a
seed solution; ùëñùëñ) Improvement, to convert a trial solution in
one or more improved solutions; ùëñùëñùëñ) Reference Set Update,
to create and keep update a reference set of best solutions;
ùëñùë£) Subset Generation, to manipulate the reference set aimed
at deriving a subset of solutions; ùë£) Solution Combination,
to linearly re-combine the solutions on the basis of subsets
obtained with the previous methods.

As an eÔ¨Äective FS procedure, Scatter Search has been
exploited together with NLP solvers for global optimization
[109], with rough sets for the implementation of credit scor-
ing mechanisms [110], or in a parallelized fashion to im-
prove the feature subset selection problem [111]. Again,
Scatter Search has been proÔ¨Åtably exploited in issues involv-
ing credit cards fraud detection [112], and software security
characterization [113].

4.2.3. PSO Search

The Particle Swarm Optimization (PSO) algorithm has
been originally discovered in [114], through simulations car-
ried out across a simpliÔ¨Åed social model aimed at reproduc-
ing the behavior of birds Ô¨Çocking.

Then, the population of agents became more similar to a
swarm than Ô¨Çock, and single individuals were named parti-
cles that represent the candidate solutions. In a mathemat-
ical form, given Óà≠ ‚äÇ ùêëùëõ the search space, and ùëì ‚à∂ Óà≠ ‚Üê‚Üê‚Üí
ùëå ‚äÜ ùêë, the swarm is deÔ¨Åned by a set ùêí = {ùë•1, ùë•2, ‚Ä¶ , ùë•ùëÅ }
of ùëÅ particles, where ùë•ùëñ = (ùë•ùëñ1, ùë•ùëñ2, ‚Ä¶ , ùë•ùëñùëõ)ùëá ‚àà Óà≠ with

Di Mauro et al.: Preprint submitted to Elsevier

Page 5 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

ùëñ = 1, 2, ‚Ä¶ , ùëÅ. It is assumed that particles are able to it-
eratively move within search space Óà≠ by means of a ve-
locity parameter deÔ¨Åned as ùë£ùëñ = (ùë£ùëñ1, ùë£ùëñ2, ‚Ä¶ , ùë£ùëñùëõ)ùëá with
ùëñ = 1, 2, ‚Ä¶ , ùëÅ. In PSO method, it is also deÔ¨Åned a mem-
ory set ùêè = {ùëù1, ùëù2, ‚Ä¶ , ùëùùëÅ } containing the best positions
ùëùùëñ = (ùëùùëñ1, ùëùùëñ2, ‚Ä¶ , ùëùùëñùëõ)ùëá (with ùëñ = 1, 2, ‚Ä¶ , ùëÅ) visited by
each particle. Given ùë° the time counter, the current position
and velocity for particle ùëñ are, respectively, ùë•ùëñ(ùë°) and ùë£ùëñ(ùë°),
whereas ùëùùëñ(ùë°) = arg minùë° ùëìùëñ(ùë°). Accordingly, PSO is deÔ¨Åned
by the following equations:

ùë£ùëñùëó(ùë° + 1) = ùë£ùëñùëó(ùë°) + ùõæ1ùëü1[ùëùùëñùëó(ùë°) ‚àí ùë•ùëñùëó(ùë°)]
+ ùõæ2ùëü2[ùëî(ùë°) ‚àí ùë•ùëñùëó(ùë°)],
ùë•ùëñùëó(ùë° + 1) = ùë•ùëñùëó(ùë°) + ùë£ùëñùëó(ùë° + 1),

(4)

(5)

denote random variables uniformly dis-
where: ùëü1
and ùëü2
tributed in [0,1], ùõæ1
is the cognitive parameter which aÔ¨Äects
the step size that the particle takes towards its best candidate
solution ùëùùëñùëó(ùë°), and ùõæ2
is the social parameter which aÔ¨Äects
the step size that the particle takes towards the swarm‚Äôs best
solution ùëî(ùë°). At each iteration, best positions ùëùùëñ(ùë° + 1) are
updated as well, namely

ùëùùëñ(ùë°+1) =

‚éß
‚é™
‚é®
‚é™
‚é©

ùë•ùëñ(ùë° + 1)

if ùëì (ùë•ùëñ(ùë° + 1)) ‚â§ ùëì (ùëùùëñ(ùë°)),

(6)

ùëùùëñ(ùë°)

otherwise.

In the Ô¨Åeld of FS applied to network traÔ¨Éc analysis, PSO
has been proÔ¨Åtably exploited jointly with classiÔ¨Åcation tech-
niques. It is the case of [115, 116], where a particle swarm
selection method has been exploited with SVM-based classi-
Ô¨Åers. Again, a hybrid FS model based on PSO and Random
Forest has been exploited in [117], where independent mea-
sures and a learning algorithm are exploited to evaluate fea-
ture subsets. Interesting is also an evolution of classic PSO
advanced in [118], and dubbed Accelerated PSO, amenable
to deal with FS on Big Data streams.

4.3. Nature-inspired Feature Selection

Although relying on meta-heuristic concepts, this fam-
ily of algorithms takes inspiration from the nature ecosys-
tem, where many animal species exhibit impressive behav-
iors aimed at optimizing their life cycle. We assess Ant Op-
timization and Cuckoo search as representative algorithms
of such family.

4.3.1. Ant Search

This technique, originally proposed in [119], is inspired
by ants colonies behavior, where the optimization problem is
solved by a ‚Äúcolony" of cooperating agents. Analyses carried
out by ethologists showed that, following pheromone trails,
each ant is able to follow a preceding ant which releases such
substance, thus, a whole ant colony is able to self-organize
itself. The emerging collective behavior relies on a positive
feedback loop: the probability which an ant chooses a cer-
tain path increases with the number of ants that choosing the

same path, since the trail is continuously reinforced with new
pheromone. The Ant algorithm can be proÔ¨Åtably exploited
in feature selection problems by evaluating the probability
that the ùëò-th ‚Äúant" could arrive to feature ùëó by starting
ùëùùëò
ùëñùëó
from feature ùëñ, namely,

[ùúèùëñùëó ]ùõº‚ãÖ[ùúÇùëñùëó ]ùõΩ

0

‚àë

ùëò‚ààùí∞ùëò

ùëùùëò
ùëñùëó =

[ùúèùëñùëò]ùõº‚ãÖ[ùúÇùëñùëò]ùõΩ

if ùëó ‚àà ùí∞ùëò,

otherwise,

‚éß
‚é™
‚é®
‚é™
‚é©
is the set of feasible attributes (not visited yet), ùúèùëñùëó
where, ùí∞ùëò
is the amount of pheromone across the ùëñùëó path, ùúÇùëñùëó
represents
the heuristic information for the selected attribute ùëó, ùõº and ùõΩ
are parameters in charge of controlling pheromone trials and
heuristic information, respectively.

(7)

As regards the FS problem in network traÔ¨Éc analysis,
Ant-based methods have been used in: [120] where a SVM
classiÔ¨Åer is adopted on KDD99 dataset, after a feature re-
duction obtained through ACO (Ant Colony Optimization)
technique; in [121] where an ACO-based feature selection
method allows to deal with big streamed data; [122] where
an improved ACO-based algorithm (named FACO) has been
designed and tested across the classic KDD99 dataset.

4.3.2. Cuckoo Search

This technique is inspired to the brood parasitism strat-
egy characterizing some cuckoos species. In particular, such
species lay their eggs in the nests of other birds (hosts). Since
host birds can engage a conÔ¨Çict as they recognize alien eggs,
particular cuckoo species have evolved in such a way that fe-
males are able in mimicking colour and size of eggs of some
host species, thus the hosts are cheated, and the probabil-
ity of cuckoos reproductivity grows. Considering an egg in
a nest as a solution, three idealized rules emerge in Cuckoo
Search procedure [123]: ùëñ) each cuckoo lays one egg at time,
in a randomly chosen nest; ùëñùëñ) the bests nests (having high-
quality eggs) are candidate to carry over next generations;
ùëñùëñùëñ) the number of nests is Ô¨Åxed and, as a host bird discovers
, it gets rid of it. The
alien (cuckoo) eggs with a probability ùëùùëë
aim of the algorithm is to exploit new (and eventually better)
solutions in place of not-so-good solutions in the nest. New
solutions ùê±ùë°+1
for cuckoo ùëñ are obtained through the follow-
ing expression which represents the stochastic equation for
random walk, namely,

ùëñ

ùëñ = ùê±ùë°
ùê±ùë°+1

ùëñ + ùõº ‚äó ‚Ñí (ùúÜ),

(8)

where, ùõº > 0 is a scale factor, the product ‚äó refers to en-
trywise multiplications, whereas ‚Ñí is the L√©vy distribution
with (1 < ùúÜ ‚â§ 3).

Cuckoo search method has been exploited in network
traÔ¨Éc analysis paired with various techniques and technolo-
gies. In [124], authors propose an algorithm that uses PCA
and Cuckoo Search to reduce the feature space and to op-
timize the clustering center selection. A Cuckoo-based FS
algorithm is proposed in [125] to preprocess network data

Di Mauro et al.: Preprint submitted to Elsevier

Page 6 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

aimed at improving the IDS detection accuracy in cloud en-
vironments. A Cuckoo search strategy has been also used
in [126] to optimize ArtiÔ¨Åcial Neural Networks when deal-
ing with traÔ¨Éc anomaly detection issues. Again, coupled
with SVM, Cuckoo search has been adopted in FS to deal
with problem of phishing mail detection [127]. Recently,
extended versions of Cuckoo Search algorithm have been
advanced to cope with classiÔ¨Åcation of tweets in sentiment
analysis [128], or to defeat attacks in Software DeÔ¨Åned Net-
work infrastructures [129].

4.4. Evolutionary Feature Selection

Such family of algorithms is inspired by natural selection
theory, claiming that living organisms survived across mil-
lions of years thanks to an adaptation process. In a similar
way, this aptitude can be translated in search for optimal so-
lutions to a problem. Two exemplary tested algorithms are:
Genetic search and Multi Objective Evolutionary search.

4.4.1. Genetic Search

Genetic Algorithms (GAs) have been designed around
the mid-1950s, when biologists started to perform computer-
based simulations aimed at analyzing more in deep the
evolution of genetic processes [130]. Then, GAs have
been extended to face problems ranging from neural net-
works weight estimation [131] to inequalities-based prob-
lems [132]. A pioneering work in this Ô¨Åeld has been carried
out by Holland [133, 134], and, today, many variants of GAs
exist [135] and are applied in economy, computer science,
sociology.

The basic skeleton of a GA includes three operators

[136]: Reproduction, Crossover and Mutation.

Reproduction refers to a process in charge of evaluating
the ability of an individual to be selected (among others) for
reproduction, on the basis of a Ô¨Åtness score.

Crossover concerns the capability of a genetic operator
in recombining information to create new oÔ¨Äspring. Typi-
cally, oÔ¨Äspring is generated by exchanging genes of parents
until a crossover point is reached.

Mutation pertains to the probability that some oÔ¨Äspring

genes could be modiÔ¨Åed or altered.

Genetic-based feature selection in network traÔ¨Éc analy-
sis has been used in conjunction with many ML-based meth-
ods. Authors in [137] exploit a GA-based FS approach to
optimize network traÔ¨Éc data before applying an artiÔ¨Åcial
neural network to perform attacks detection across cloud in-
frastructures. A combination of a genetic FS method and a
supervised classiÔ¨Åer based on J48 algorithm is proposed in
[138]. More frequent across the scientiÔ¨Åc literature is the
coupling between genetic FS and SVM classiÔ¨Åers applied to
network traÔ¨Éc classiÔ¨Åcation problems (see [139, 140, 141]).
When dealing with FS problems, GAs allow to explore
the solution space by selecting the most promising regions,
thus, avoiding a costly exhaustive search. In our domain, the
initial population is represented by the whole feature space
and the Ô¨Åtness function relies on the correlation among fea-

tures and expressed by means of a merit indicator deÔ¨Åned
further ahead in eq. (12).

Once entered the cycle represented in Fig. 1, the algo-
rithm calculates the Ô¨Åtness of each candidate solution per
iteration, selects individuals to reproduce, and generates a
new population by taking into account crossover (feature re-
combination with a certain probability), and mutation (one
feature can be turned into another feature with a certain prob-
ability).

Figure 1: Genetic Algorithms life cycle.

4.4.2. Multi-Objective Evolutionary Search

The family of solutions concerning a multiobjective op-
timization problem (MO) includes all the elements of the
search space whose objective vectors cannot be simultane-
ously improved (Pareto optimality concept) [142]. The set
of such objective vectors is said non-dominated.

More formally, a MO problem can be formulated as fol-
lows: given a vector of ùëõ objective functions ùêü of a vector
variable ùê± in a domain Óà∞ deÔ¨Åned as

ùêü (ùê±) = (ùëì1(ùê±), ùëì2(ùê±), ‚Ä¶ , ùëìùëõ(ùê±),

(9)

a decision vector ùê±‚Ñé ‚àà Óà∞ is Pareto-optimal iÔ¨Ä there is no
ùê±ùëò ‚àà Óà∞ such that:

‚àÄùëñ ‚àà {1, ‚Ä¶ , ùëõ}, ùëòùëñ

‚â§ ‚Ñéùëñ

‚àß

(10)

‚àÉùëñ ‚àà {1, ‚Ä¶ , ùëõ} ‚à∂ ùëòùëñ < ‚Ñéùëñ.

‚éß
‚é™
‚é™
‚é®
‚é™
‚é™
‚é©

On the other hand, Evolutionary Algortihms (EAs)
can be proÔ¨Åtably exploited in MO-based problems since
many ‚Äúindividuals" can search in parallel for multiple so-
lutions, with the possibility of taking advantage of similari-
ties among solutions belonging to the same family. Possible
implementations of MO-EA techniques are ENORA (Evolu-
tionary NOn-dominated Radial slots based Algorithm), and
NSGA (Non-dominated Sorted Genetic Algorithm) com-
pared in [143].

Applied to the FS problem, the purpose of a multi-
objective search algorithm is to discover a subset of fea-
tures (a family of solutions) being a good approximation of
the Pareto front. The MO-EA approach has been exploited

Di Mauro et al.: Preprint submitted to Elsevier

Page 7 of 19

!"#$#%&‚Äô()*&%$#("!"#"$%&"‚Äô%#‚Äô(#(&(%)*+*,)%&(+#+-‚Äô(#.(/(.,%)0+,%&*%$#("1/%),%&"&2"‚Äô-(&#"00‚Äô-,#3&(+#4+567‚Äô-,#3&78-#$".//01%&*./900(:#&2"‚Äô%**$+*$(%&"‚Äô-(&#"00‚Äô/%),"02.&.3$#(";(#:)"‚Äô+,&‚Äô&2"‚Äô(#.(/(.,%)0-+$‚Äô$"*$+.,3&(+#4.)5(6*3$#("!"#"$%&"‚Äô#"<‚Äô(#.(/(.,%)043$+00+/"$=‚Äô>,&%&(+#8‚ÄôSupervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

in network traÔ¨Éc classiÔ¨Åcation jointly with ensemble ML-
based methods [144], where some objectives such as max-
imizing true positive rate, maximizing classiÔ¨Åcation accu-
racy, minimizing feature number, and minimizing false pos-
itive rate, are satisÔ¨Åed simultaneously and with no conÔ¨Çicts.
An NSGA-based approach to ameliorate the performance
classiÔ¨Åcation of IDS platforms has been adopted in [145] and
in [146]. Again, a MO-EA technique jointly with fuzzy clas-
siÔ¨Åers for coping with the traÔ¨Éc classiÔ¨Åcation problem has
been introduced in [147].

5. The considered Datasets

One of the great issues when dealing with supervised
FS approaches in traÔ¨Éc analysis, is Ô¨Ånding training sets that
are both recent and labeled. As remarked in Sect. 3, many
works rely on the obsolete KDD99 dataset [148]. Created
about 20 years ago, KDD99 has been broadly employed to
validate machine learning algorithms, particularly to diÔ¨Äer-
entiate malicious data traÔ¨Éc from benign one. However, the
KDD99 dataset does no longer reÔ¨Çect the characteristics of
modern data traÔ¨Éc, which has sensibly changed across time.
This is very much the case of multimedia traÔ¨Éc (e.g. voice,
video), being the principle revenue-making stream for ser-
vice providers but also the vehicle of covert malicious data.
Per contra, in this work we consider more recent datasets ob-
tained by means of CICFlowMeter [42, 149], an open-source
engine that can both gather and label network traÔ¨Éc in a con-
trolled environment. Each dataset contains records labeled
either as Benign or Malicious (malicious traÔ¨Éc is often split
in sub-labeled traÔ¨Éc representing diÔ¨Äerent kinds of attacks).
SpeciÔ¨Åcally, we consider the following datasets:

‚Ä¢ DDoS which contains traÔ¨Éc relating to distributed de-
nial of service attacks, aimed at saturating the network
resources of speciÔ¨Åc targets;

‚Ä¢ Portscan which contains traÔ¨Éc relating to Portscan
attacks, aimed at discovering open, network device
ports;

‚Ä¢ Webattack, including malicious traÔ¨Éc which imple-
ments various web-based attacks such as Brute Force,
Cross-Site Scripting, and Sql Injection;

‚Ä¢ TOR which includes traÔ¨Éc passing over the TOR net-
work, an anonymous and private data circuit often ex-
ploited to carry dangerous information or malicious
encrypted traÔ¨Éc;

‚Ä¢ Android which embeds various families of Android-

based threats (adwares, ransomwares, etc.).

We want to notice that the Ô¨Årst four datasets are exploited
into the single class analysis, whereas the Android dataset
is exploited in the forthcoming multi-class analysis. In this
latter analysis, we build a new dataset called MultiAndroid
(see Sect. 6.2), obtained by selecting the most relevant mo-
bile threats from the Android dataset mixed with some be-
nign traÔ¨Éc.
In order to avoid the issue of bias that typi-
cally arises during classiÔ¨Åcation in imbalanced datasets, we

have Ô¨Årst re-arranged the datasets. We have achieved well-
balanced benign/malicious features, spanning across about
50ùëò instances for each dataset. Each one contains up to 78
features, except for the TOR dataset including 30 features.
For the sake of convenience, we found it useful to group the
features in 5 macro-classes (the complete list of features can
be found in [150]):

‚Ä¢ Time-based features:

Forward/Backward inter-
arrival times (IAT) between two Ô¨Çows, duration of ac-
tive Ô¨Çow (min, max, mean, std), duration of idle Ô¨Çow
(min, max, mean, std), etc.;

‚Ä¢ Byte-based features: Forward/Backward number of
bytes in a Ô¨Çow, Forward/Backward number of bytes
used for headers, etc.;

‚Ä¢ Packet-based features: Forward/Backward number
of packets in a Ô¨Çow, Forward/Backward length of
packets in a Ô¨Çow (min, max, mean, std), etc.;

‚Ä¢ Flow-based features: Length of a Ô¨Çow (mean, max,

etc.);

‚Ä¢ Flag-based features: Number of packets with active
TCP/IP Ô¨Çags (FIN, SYN, RST, PUSH, URG, etc.).

6. Experimental Results

Herein we describe our analytical study, which required
the development of a dedicated Python routine, to normal-
ize/balance the datasets and to automate the comparison
among FS algorithms. We have validated the scrutinized
search algorithms using the Correlation-based Feature Se-
lector (CFS) as objective function [151, 152].

The main idea behind CFS is that a good feature sub-
set includes those features that are highly correlated with the
class, while being strongly uncorrelated among them. A for-
mal deÔ¨Ånition is oÔ¨Äered in [153]: a feature ùëãùëñ
is relevant iÔ¨Ä
there is some ùë•ùëñ

and ùë¶ for which ùëù(ùëãùëñ = ùë•ùëñ) > 0 such that

ùëù(ùëå = ùë¶|ùëãùëñ = ùë•ùëñ) ‚â† ùëù(ùëå = ùë¶).

(11)

is relevant if ùëå is conditionally dependent on
Namely, ùëãùëñ
. Thus, CFS is a Ô¨Ålter algorithm that can rank feature
ùëãùëñ
subsets according to a correlation-based heuristic function.
Precisely, given a subset ùëÜ including ùëò features, the heuristic
merit ùëÄùëÜ,ùëò

is deÔ¨Åned as:

ùëÄùëÜ,ùëò =

ùëòùëüùëì ùëê

‚àö

ùëò + ùëò(ùëò ‚àí 1)ùëüùëì ùëì

,

(12)

is the average value of feature/class correlations,
where ùëüùëì ùëê
and ùëüùëì ùëì
is the average value of feature/feature correlations.
The numerator of (12) may be seen as an indicator of how
far a set of features is predictive of a class; whereas, the
denominator contains information about how much redun-
dancy there is among features.

Di Mauro et al.: Preprint submitted to Elsevier

Page 8 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

(a) Ant (21 fts)

(b) Scatter (4 fts)

(c) MO-EA (5 fts)

(d) Ranking (10 fts)

(e) Cuckoo (7 fts)

(f) Tabu/LFS (6 fts)

(g) Genetic (27 fts)

(h) PSO (18 fts)

Figure 2: Correlation maps for diÔ¨Äerent algorithms - DDoS dataset.
reported the number of features surviving after the FS process.

In parenthesis is

Our assessment is split into two parts: the Ô¨Årst one con-
cerns a single class analysis, where we evaluate datasets ex-
hibiting dichotomous information (malign/benign); the sec-
ond one is focused on multi class problems, where we eval-
uate the eÔ¨Äectiveness of FS in the presence of multiple
classes.

6.1. Single Class Analysis

Let us consider the Distributed Denial of Service
(DDoS) attack which, recently, is also aÔ¨Äecting modern
SDN-based networks [154, 155]. DDoS attacks are designed

to overwhelm the target network resources by means of a
botnet, namely, a network composed of a large number of
malicious nodes sending tiny packets towards the target, ul-
timately coordinated by a botmaster.

Let us now analyze the results obtained by pre-
processing the DDoS dataset through the set of FS algo-
rithms introduced above. In Fig. 2 we report, for each al-
gorithm, the correlation map corresponding to a graphical
representation of covariance matrices. This representation
embeds three important pieces of information: i) the number
of features surviving after the FS processing step; ii) the type

Di Mauro et al.: Preprint submitted to Elsevier

Page 9 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

Figure 3: FS times - DDoS dataset (a); Training times - DDoS dataset (b).

of features; and iii) the relationship existing among surviving
features. The latter is taken into account by means of a gray
scale, in which darker shades indicate higher levels of cor-
relation. Thus, each (ùëñ, ùëó) ‚Äúpixel" gives the correlation level
between feature ùëñ and feature ùëó. Accordingly, the pixels on
the main diagonal are always black (maximum correlation,
corr=1), due to the self-correlation. As was to be expected,
higher correlation are found among those features belonging
to the same family (Time-based, Flow-based, etc.).

Some interesting considerations about the various cor-
relation maps arise. First, the number of features retained
by diÔ¨Äerent algorithms may signiÔ¨Åcantly diverge, which is
due to the speciÔ¨Åc approaches adopted by each algorithm.
The Genetic algorithm is the one retaining the most features.
This is to be ascribed to the particular strategy of this al-
gorithm, which strives to escape local optima by applying
the mutation operator, thus allowing to consider more paths,
namely, more features. Second, some common features re-
tained by all the algorithms can be recognized. For in-
stance, the destination port feature is always present since, in
a DDoS attack, a target victim is typically reached on a par-
ticular exposed TCP/UDP port. Moreover, since DDoS at-
tacks are characterized by a large amount of small-size pack-
ets, features embodying information about packet lengths
are retained. The diÔ¨Äerence is that, some algorithms (e.g.
Scatter, MO-EA, Cuckoo, Tabu, LFS) just keep the essen-
tial features related to packet length (e.g. total packet length,
total number of bytes sent in initial window); whereas,
other algorithms (e.g. Ranking, Genetic, PSO, Ant) pre-
fer to retain more features belonging to the same family.
DDoS is also characterized by some kind of synchronization
among the bots, which are coordinated to launch an almost-
simultaneous attack. This means that time-related features
will often provide useful information to detect DDoS. Inter-
estingly, the Genetic algorithm retains 5 features relating to
the inter-arrival Ô¨Çow times, resulting in a dark gray cluster
at the center of the correlation map (Fig. 2(g)).

It is also possible for DDoS attacks to be even more eÔ¨Äec-
tive through the modiÔ¨Åcation of the IP Ô¨Çags (e.g. SYN/RST
Ô¨Çooding). Accordingly, features embodying information
about IP Ô¨Çags (e.g. RST-SYN-URG Ô¨Çag count) are retained
by algorithms such as Ant (Fig. 2(a)), MO-EA (Fig. 2(c)),
Cuckoo (Fig. 2(e)), Genetic (Fig. 2(g)), and PSO (Fig.
2(h)). Let us note that many algorithms opt for selecting
features that are uncorrelated among them (few dark gray or
black clusters are present) since they convey more variegated
information.

Let us now analyze some Ô¨Åndings obtained from the
time-complexity evaluation. To this aim, we use a PC
equipped with Intel CoreTM i5-7200U CPU@ 2.50GHz
CPU and 16 GB of RAM. In Fig. 3(a), we show how the FS
time varies with training size, for the DDoS dataset. No dra-
matic diÔ¨Äerences are observed across the various algorithms,
even more signiÔ¨Åcantly as the training size grows. Consid-
ering a relatively large training size (with 5 ‚ãÖ 104 training
instances), FS times range from about 10 seconds (Scatter
algorithm) to almost 26 seconds (MO-EA algorithm). Sur-
prisingly, the FS times are rather uniform, in spite of the
broad variation in number of retained features (by each of the
algorithms). For instance, remaining in the case of 5 ‚ãÖ 104
training instances, Scatter retains the minimum number of
features (4), while Genetic retains the maximum number of
features (27); yet FS times are comparable (16.19 and 10.18
seconds, respectively). Although it is legitimate to expect
that higher FS time could be justiÔ¨Åed to produce a more re-
duced feature space, the scarce correlation between such ob-
servables is due to the particular logic implemented in each
FS algorithm.

On the other hand, Fig. 3(b) provides the training times
obtained by applying the J48 benchmark algorithm, down-
stream of the FS processing step. Here, the black line (with
empty circles) gives the training times obtained when no FS
processing is employed. We can observe how FS leads to
signiÔ¨Åcant improvements, in terms of both times and trends.

Di Mauro et al.: Preprint submitted to Elsevier

Page 10 of 19

012345TrainingSize√ó104100101102Feat.Sel.Time(sec)MO-EARankAntTabuGeneticParticle SwarmCuckooLin.Fwd.Sel.Scatter012345TrainingSize√ó104100101102TrainingTime(sec)NO Feat. Sel.MO-EARankAntTabuGeneticParticle SwarmCuckooLin.Fwd.Sel.ScatterSupervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

(a)

(b)

(c)

(d)

Figure 4: Performance in terms of Accuracy/F-Measures for diÔ¨Äerent single class datasets:
DDoS (a), Portscan (b), WebAttack (c), TOR (d).

The black (benchmark) line grows rapidly to almost 80 sec-
onds, while most algorithms peak to almost 5 seconds, with
the exception of the Genetic algorithm (yellow line) and the
Particle Swarm algorithm (light blue line) that take over 10
seconds to complete. This indicates that the FS process, on
the whole, brings gains in the range of about one order of
magnitude, which may become even more signiÔ¨Åcant as the
dataset grows.

Let us now analyze the performance of the proposed FS
algorithms in terms of Accuracy and F-Measure. These two
metrics, widely used in the Ô¨Åeld of traÔ¨Éc classiÔ¨Åcation [156,
157], are deÔ¨Åned as follows:

‚Ä¢ Accuracy: the ratio of the correctly predicted obser-
vations to the total observations. This is the most in-
tuitive indicator.

‚Ä¢ F-Measure: the weighted average of precision (ratio
of correctly classiÔ¨Åed Ô¨Çows over all predicted Ô¨Çows in

a class) and recall (ratio of correctly classiÔ¨Åed Ô¨Çows
over all ground truth Ô¨Çows in a class). This is an indi-
cator of a per-class performance.

To verify that the eÔ¨Äectiveness of the FS algorithms is
not linked to speciÔ¨Åc datasets, we have considered the 4 dif-
ferent datasets introduced in Sect. 5 (DDoS, Portscan, We-
bAttack, and TOR), reporting our Ô¨Åndings in Fig. 4. Just
like for the previous experiments, we have used the tree-
based J48 algorithm as a benchmark. We have adopted a
10-fold cross-validation which is typical in applied ML, and
oÔ¨Äers a good trade-oÔ¨Ä between training time and robustness.
Noticeably, all FS algorithms perform satisfactorily (both in
accuracy and F-measure) in comparison to the benchmark
(Ô¨Årst bars in all the histograms, labeled as ‚ÄúNO F.S.‚Äù) for the
four datasets.

In some instances the FS algorithms performed even bet-
ter than the benchmark (e.g., Rank and Genetic algorithms
in the WebAttack dataset). This can be explained by a phe-

Di Mauro et al.: Preprint submitted to Elsevier

Page 11 of 19

  NO F.S.       MO-EA         Rank          Ant         Tabu        Genetic        PSO        Cuckoo         LFS        Scatter   0.970.9750.980.9850.990.99511.0051.01DDoS DatasetAccuracy (DDoS)F-Measure (DDoS)Accuracy (Benign)F-Measure (Benign)  NO F.S.       MO-EA         Rank          Ant         Tabu        Genetic        PSO        Cuckoo         LFS        Scatter   0.970.9750.980.9850.990.99511.0051.01Portscan DatasetAccuracy (Portscan)F-Measure (Portscan)Accuracy (Benign)F-Measure (Benign)  NO F.S.       MO-EA         Rank          Ant         Tabu        Genetic        PSO        Cuckoo         LFS        Scatter   0.970.9750.980.9850.990.99511.005WebAttack DatasetAccuracy (WebAttack)F-Measure (WebAttack)Accuracy (Benign)F-Measure (Benign)  NO F.S.       MO-EA         Rank          Ant         Tabu        Genetic        PSO        Cuckoo         LFS        Scatter   0.970.9750.980.9850.990.99511.005TOR DatasetAccuracy (TOR)F-Measure (TOR)Accuracy (Non TOR)F-Measure (Non TOR)Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

(a) Ant (22 fts)

(b) Scatter/Tabu (9 fts)

(c) MO-EA (6 fts)

(d) Ranking (28 fts)

(e) Cuckoo (17 fts)

(f) LFS (9 fts)

(g) Genetic (31 fts)

(h) PSO (23 fts)

Figure 5: Correlation maps - MultiAndroid dataset. In parenthesis is reported the number
of features surviving after the FS process.

nomenon that is well-known in ML, whereby models based
on too many features may lead to biased classiÔ¨Åcation. On
the other hand, when FS manages to retain a suÔ¨Éciently high
number of meaningful features, there is a positive eÔ¨Äect on
accuracy. This is the case of the Genetic algorithm applied
to the TOR dataset (Fig. 4(d)) that performs better than the
other methods.

6.2. Multi Class Analysis

Another fruitful analysis is aimed at evaluating FS al-
gorithms when multi-instance datasets are considered. This
turns out to be particularly useful when it is not possible to
discern diÔ¨Äerent types of data traÔ¨Éc via some pre-processing
Ô¨Ålter (e.g. IP/Port-based Ô¨Åltering). To assess this case, we
consider two datasets: the MultiAndroid dataset, containing
benign traÔ¨Éc mixed up with Ô¨Åve diÔ¨Äerent types of Android-
based threats; and the DDoS/Portscan dataset, including a

Di Mauro et al.: Preprint submitted to Elsevier

Page 12 of 19

Tot Lenof BwdPktsFwdPktLenStdBwdPktLenMeanInit_Win_bytes_FwdInit_Win_bytes_BwdFlow Pkt/sTot Lenof BwdPktsFwdPktLenStdBwdPktLenMeanInit_Win_bytes_FwdInit_Win_bytes_BwdFlow Pkt/sTot Lenof BwdPktsFwdPktLenStdAvgBwdSegmentSizeInit_Win_bytes_FwdInit_Win_bytes_BwdFlow IAT MaxFwdPktLenMaxBwdPktLenStdFlow IAT MinTot Lenof BwdPktsFwdPktLenStdAvgBwdSegmentSizeInit_Win_bytes_FwdInit_Win_bytes_BwdFlow IAT MaxFwdPktLenMaxBwdPktLenStdFlow IAT MinSupervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

(a)

(b)

Figure 6: FS times - MultiAndroid dataset (a); Training times - MultiAndroid dataset (b).

mix of DDoS, Portscan, and benign traÔ¨Éc. The MultiAn-
droid dataset, includes the following types of malign traÔ¨Éc:

‚Ä¢ FakeApp.AL: a scareware hidden inside a fake
Minecraft application, one of the most popular game
applications;

‚Ä¢ Android Defender:

a malware which, once acci-
dentally downloaded and installed, raises some fake
alerts;

‚Ä¢ Gooligam: an insidious malware that has already in-
fected more than 1 million Android-based devices,
aimed at stealing Google accounts for Drive, Docs,
Gmail, etc.;

‚Ä¢ Feiwo: belonging to the adware family, it acts by
showing advertisements in the system notiÔ¨Åcation bar,
and by sending device GPS coordinates to a remote
server;

‚Ä¢ Charger: a ransomware hidden in some Google Play
applications, which gains root privileges and steals
contacts before asking for a ransom.

Let us analyze how FS algorithms impact on the Mul-
tiAndroid dataset in terms of feature correlation referring
Ô¨Årst to the panels of Fig. 5. Comparing these results with
the ones of Fig. 2, an interesting diÔ¨Äerence emerges: all FS
algorithms retain more features w.r.t. the single-class case.
This behavior is coherent with the fact that, to deal with dif-
ferent types of threats (ransomware, adware, malware) we
need more features, to be able to capture this higher vari-
ability. This eÔ¨Äect is even more evident in time-based fea-
tures (mainly inter-arrival times) and in size-based features
(mainly packet lengths).

Looking at DDoS, we observe a diÔ¨Äerence between
single- and multi-class analysis. In the latter, the destina-

tion port is not retained as a crucial feature. This is possi-
bly because malwares exploit diÔ¨Äerent mechanisms to create
damage: rather than directly overwhelming a particular tar-
get port, they Ô¨Årst act in the background (e.g. by stealing pri-
vacy data) and then produce malicious traÔ¨Éc in egress. On
the other hand, DDoS attacks generate ingress traÔ¨Éc from
the infected device.

It is worth noticing that, when applied to multi-class
problems, all algorithms have preserved their original logic.
For instance, with 31 surviving features, the Genetic algo-
rithm is still the algorithm that saves more features, thanks
to the role played by the mutation operator. Another example
is the MO-EA algorithm that, just like in the single-class ex-
periment, retains the smallest number of features (6). This is
mainly due to the diversity-preservation mechanism, which
forces the selection of a representative subset of the whole
Pareto front.
It optimizes conÔ¨Çicting objective functions,
thus few solutions survive.

The time-complexity evaluation is reported in Fig. 6,
which evaluates the usual FS algorithms onto the MultiAn-
droid dataset. FS times exhibit the same order of magni-
tude as in single-class analysis (Figs.3(a)). For a training
size amounting to 5 ‚ãÖ 104 instances, the fastest algorithm is
Scatter (FS time amounting to 9.541 seconds); whereas the
slowest one is MO-EA (FS time amounting to 24.827 sec-
onds).

The situation changes dramatically when we consider
training times for the J48 benchmark algorithm (Fig. 6(b)).
Notably, multi-class algorithms are roughly one order of
magnitude slower than their single-class counterpart. For in-
stance, let us consider the Genetic algorithm (yellow curve).
For a 103 training size, Genetic FS reduces the training time
to 1.861 seconds, growing to the following (X;Y) points:
(104; 10.731); (2 ‚àó 104; 56.748); (3 ‚àó 104; 133.346);
(5 ‚àó 104; 301.997). The longer training times arise from the
process of training multiple classes. Nevertheless, signiÔ¨Å-

Di Mauro et al.: Preprint submitted to Elsevier

Page 13 of 19

012345TrainingSize√ó104100101102Feat.Sel.Time(sec)MO-EARankAntTabuGeneticParticle SwarmCuckooLin.Fwd.Sel.Scatter0.511.522.533.544.55TrainingSize√ó104100101102103TrainingTime(sec)NO Feat. Sel.MO-EARankAntTabuGeneticParticle SwarmCuckooLin.Fwd.Sel.ScatterSupervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

(a)

(b)

(c)

(d)

Figure 7: MultiAndroid dataset: Accuracy (a), F-Measure (b); DDoS/Portscan dataset:
Accuracy (c), F-Measure (d);

cant gains are still obtained by all FS algorithms compared
to the ‚ÄúNO F.S.‚Äù benchmark, which peaks at 446.329 secs.
Turning now to the performance analysis, in Fig. 7
we compare the two multi-class datasets, MultiAndroid and
DDoS/Portscan, drawing some interesting considerations. It
is comparably more diÔ¨Écult to detect Android threats than
DDoS/Portscan attacks - MultiAndroid accuracy is below
0.7 and F-Measure is below 0.5. However, this issue is
not generated by the FS processes, since the ‚ÄúNO F.S.‚Äù per-
formance is poor too, particularly with the ‚ÄúBenign‚Äù class.
This issue arises from two facts. First, mobile network at-
tacks are often accompanied by activities that do not di-
rectly/immediately generate network anomalies. Examples
are ransomware and malware, whereby the anomalies arise
after the user has downloaded the malicious application.
There is typically a lag between infection and anomalies,
as the malicious program initially establishes a secret/silent
communication with a remote server, and then gradually

steals/sends private user data. Another example is adware,
where those annoying banners actually incur very little data,
thus making it hard to detect from the regular traÔ¨Éc. A sec-
ond reason for the poor MultiAndroid performance is the
strong similarity among diÔ¨Äerent malign classes (e.g., scare-
ware, adware, ransomware). Similar considerations hold
true in the case in which we consider a dataset including We-
battack and TOR traÔ¨Éc (not reported for space constraints),
whereby the high similarity between the two classes re-
sulted in poor classiÔ¨Åcation performance. We should how-
ever stress that FS algorithms are still very beneÔ¨Åcial, since
the time-complexity beneÔ¨Åts identiÔ¨Åed are achieved with no
dramatic loss in accuracy.

By contrast,

the DDoS/Portscan multi-class case
achieves outstanding performance (Figs.7(c) and (d)). This
is because these types of attacks are radically distinct in
the way they exploit network vulnerabilities: DDoS falls
under the umbrella of volumetric attacks; whereas Portscan

Di Mauro et al.: Preprint submitted to Elsevier

Page 14 of 19

   NO F.S.       MO-EA        Rank         Ant          Tabu        Genetic       PSO         Cuckoo      LFS/Scat   0.20.30.40.50.60.70.80.9Multi-Class Dataset (Android threats) - AccuracyFakeAppalAndr.DefenderGooliganFeiwoChargerBenign   NO F.S.       MO-EA        Rank         Ant          Tabu        Genetic       PSO         Cuckoo      LFS/Scat   0.20.250.30.350.40.450.50.550.6Multi-Class Dataset (Android threats) - F-MeasureFakeAppalAndr.DefenderGooliganFeiwoChargerBenign  NO F.S.       MO-EA         Rank          Ant         Tabu        Genetic        PSO        Cuckoo         LFS        Scatter   0.980.9850.990.99511.005Multi-Class Dataset (DDoS/Portscan) - AccuracyDDoSPortscanBenign  NO F.S.       MO-EA         Rank          Ant         Tabu        Genetic        PSO        Cuckoo         LFS        Scatter   0.980.9850.990.99511.005Multi-Class Dataset (DDoS/Portscan) - F-MeasureDDoSPortscanBenignSupervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

attacks employ monitoring strategies to unveil possible
open ports. In other words, a peculiar symptom of a DDoS
attack is the presence of an exceptionally large number
of connections coming from diÔ¨Äerent nodes and heading
towards one network target‚Äôs port. Conversely, a symptom
of Portscan attacks is the presence of just a single node (or
a few nodes in case of simultaneous Portscans) opening a
considerably large number of connections towards multiple
ports of a certain network target. Thus it is relatively easier
to diÔ¨Äerentiate between these two attacks.

6.3. General Remarks

Overall, we can observe that FS algorithms do lead to
an eÔ¨Äective reduction in feature space, ranging from 65%
(Single Class, Genetic) to 95% (Single Class, Scatter) and
from 60% (Multi Class, Genetic) to 92% (Multi Class, MO-
EA). Such feature-space reduction translates into signiÔ¨Å-
cant computational-time improvements, which become even
more remarked as the training size grows. For instance,
with a training set of 50ùëò samples (single-class DDoS) the
MO-EA algorithm takes 24.8 secs to perform FS, while the
training time compared to the benchmark drops from 72.2 to
5.13 secs. At the same time, performance is not signiÔ¨Åcantly
degraded by the feature reduction process - accuracy drops
from 0.9993 to 0.9971. Similar considerations hold for all
other algorithms.

The performed assessment provides invaluable guide-
lines for network/security management practitioners dealing
with traÔ¨Éc classiÔ¨Åcation problems. Our evaluation frame-
work aims at weighing the practical beneÔ¨Åts of the vari-
ous FS techniques in terms of time-complexity reduction
and performance guarantees. For instance, if we aimed at
minimizing the overall processing time (i.e., FS plus train-
ing times), the Scatter algorithm would be the best choice.
This incurs a total processing time amounting to 14.338 sec-
onds for the single-class case (FS= 10.178 secs plus train-
ing= 4.16 secs), and to 219.963 seconds for multi-class (FS=
9.541 secs plus training= 210.422 secs). Conversely, the Ge-
netic method would be preferable to maximize performance.

7. Conclusion and Future Direction

A prominent research direction for network intrusion de-
tection is the adoption of machine learning methods, partic-
ularly for the detection of anomalous (and often malicious)
network-traÔ¨Éc Ô¨Çows. Looking at the literature, we Ô¨Ånd am-
ple examples of network classiÔ¨Åcation problems. Yet, little
attention has been turned towards feature selection, which
is an essential classiÔ¨Åcation pre-processing step. We argue
that the main reason for this overlook is that most studies
have been based on the obsolete KDD99 dataset, which in-
cludes few features, thus making FS irrelevant. On the other
hand, we consider that modern network engines generate
much richer features (in fact, hundreds of features), which
allow more Ô¨Åne and granular network traÔ¨Éc analyses. How-
ever, this extra capability results into impractical ML train-
ing times, making it necessary to understand how FS may be
realized eÔ¨Äectively.

To this end, herein we have carried out an experimental
comparative evaluation of prominent methods, with the view
to provide insights as to how the diÔ¨Äerent FS algorithms
perform in the peculiar context of network-traÔ¨Éc classiÔ¨Åca-
tion. Our assessment shows how few, relevant features are
retained, but also that the FS reduction process is virtually
lossless, with a signiÔ¨Åcant acceleration of the overall train-
ing process.

To sum up, the novelties of our work are:
i) we carry out an experimental-based review, consider-
ing recent datasets (including DDoS, Portscan, WebAttacks,
and Android threats), as opposed to the obsolete KDD99
dataset adopted in most literature;

ii) we compare and contrast a representative number
of alternative FS algorithm types, including classic rank-
guided methods (LFS, Ranking), meta-heuristic methods
(Particle Swarm, Tabu, Scatter), nature-inspired methods
(Ant, Cuckoo), and evolutionary methods (Genetic, MO-
EA);

iii) we provide actual experimental results, unveiling
trade-oÔ¨Äs between performance (Accuracy/F-Measure) and
computational time, at diÔ¨Äerent scales (training set size).

Ultimately, our analysis shows the beneÔ¨Åts linked to em-
bedding the FS process into network analysis, providing a
valuable tool for identifying the most useful features out of
hundreds of possibilities. This will prove invaluable to the
Ô¨Åelds of network management, security management, intru-
sion detection and incident response. We should note that,
the purpose of our comparative evaluation was not to claim
the predominance of some FS algorithms over others but,
rather, to suggest a methodical framework to work with FS.
As a byproduct of our investigation, some interesting
open research directions emerge:
i) extending the present
analysis to unsupervised FS techniques, which would be use-
ful to deal with datasets lacking class labels, or with new
types of (unknown) malicious traÔ¨Éc - this is the case of so
called zero-day attacks that have no prior information; ii)
considering the case of streamed data analysis, which is nec-
essary when dealing with extremely time-variant streams,
whereby the FS process should be repeated across time (e.g.
by using a mobile time window), so as to periodically update
the resulting dataset with the freshest features; iii) designing
routines to automatically manage the best FS strategies to
be applied in accordance to speciÔ¨Åc criteria (e.g. accuracy
target, latency needs, etc.). Our investigation goes into the
direction of the 6G paradigm that, according to most net-
work scientists, will be characterized by intelligent resource
management, smart adjustments, and automatic service pro-
visioning.

References

[1] F. Camastra and A. Staiano, ‚ÄúIntrinsic dimension estimation: Ad-
vances and open problems,‚Äù Information Sciences, vol. 328, pp. 26
‚Äì 41, 2016.

[2] F. Camastra, ‚ÄúData dimensionality estimation methods: a survey,‚Äù
Pattern Recognition, vol. 36, no. 12, pp. 2945 ‚Äì 2954, 2003.
[3] I. Possebon, A. Santos da Silva, L. Zambenedetti Granville,
A. SchaeÔ¨Äer-Filho, and A. Marnerides, ‚ÄúImproved network traÔ¨Éc

Di Mauro et al.: Preprint submitted to Elsevier

Page 15 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

classiÔ¨Åcation using ensemble learning,‚Äù in 2019 IEEE Symposium
on Computers and Communications (ISCC), 2019.

[4] F. Grando, L. Zambenedetti Granville, and L. Lamb, ‚ÄúMachine
learning in network centrality measures: Tutorial and outlook,‚Äù ACM
Comput. Surv., vol. 51, no. 5, pp. 102:1‚Äì102:32, 2018.

[5] R. Stadler, R. Pasquini, and V. Fodor, ‚ÄúLearning from network
device statistics,‚Äù Journal of Network and Systems Management,
vol. 25, no. 4, pp. 672‚Äì698, 2017.

[6] A. A. Daya, M. A. Salahuddin, N. Limam, and R. Boutaba, ‚ÄúA
graph-based machine learning approach for bot detection,‚Äù in 2019
IFIP/IEEE Symposium on Integrated Network and Service Manage-
ment (IM), 2019, pp. 144‚Äì152.

[7] G. Li, X. Hu, X. Shen, X. Chen, and Z. Li, ‚ÄúA novel unsupervised
feature selection method for bioinformatics data sets through fea-
ture clustering,‚Äù in 2008 IEEE International Conference on Granu-
lar Computing, 2008, pp. 41‚Äì47.

[8] C. Zheng, D. Huang, L. Zhang, and X. Kong, ‚ÄúTumor clustering
using nonnegative matrix factorization with gene selection,‚Äù IEEE
Transactions on Information Technology in Biomedicine, vol. 13,
no. 4, pp. 599‚Äì607, 2009.

[9] D. Huang and H. Yu, ‚ÄúNormalized feature vectors: A novel
alignment-free sequence comparison method based on the numbers
of adjacent amino acids,‚Äù IEEE/ACM Transactions on Computa-
tional Biology and Bioinformatics, vol. 10, no. 2, pp. 457‚Äì467, 2013.
[10] H. Abusamra, ‚ÄúA comparative study of feature selection and classiÔ¨Å-
cation methods for gene expression data of glioma,‚Äù Procedia Com-
puter Science, vol. 23, pp. 5 ‚Äì 14, 2013.

[11] A. Khotanzad and Y. Hong, ‚ÄúRotation invariant image recognition
using features selected via a systematic method,‚Äù Pattern Recogni-
tion, vol. 23, no. 10, pp. 1089 ‚Äì 1101, 1990.

[12] J. Y. Choi, Y. M. Ro, and K. N. Plataniotis, ‚ÄúBoosting color feature
selection for color face recognition,‚Äù IEEE Transactions on Image
Processing, vol. 20, no. 5, pp. 1425‚Äì1434, 2011.

[13] A. Goltsev and V. Gritsenko, ‚ÄúInvestigation of eÔ¨Écient features for
image recognition by neural networks,‚Äù Neural Networks, vol. 28,
pp. 15 ‚Äì 23, 2012.

[14] D. L. Swets and J. J. Weng, ‚ÄúUsing discriminant eigenfeatures for
image retrieval,‚Äù IEEE Transactions on Pattern Analysis and Ma-
chine Intelligence, vol. 18, no. 8, pp. 831‚Äì836, 1996.

[15] E. Rashedi, H. Nezamabadi-pour, and S. Saryazdi, ‚ÄúA simultaneous
feature adaptation and feature selection method for content-based
image retrieval systems,‚Äù Knowledge-Based Systems, vol. 39, pp. 85
‚Äì 94, 2013.

[16] Y. Liang, M. Zhang, and W. Browne, ‚ÄúImage feature selection using
genetic programming for Ô¨Ågure-ground segmentation,‚Äù Engineering
Applications of ArtiÔ¨Åcial Intelligence, vol. 62, pp. 96‚Äì108, 2017.
[17] R. Chatterjee, T. Maitra, S. HaÔ¨Åzul Islam, M. Mehedi Hassan,
A. Alamri, and G. Fortino, ‚ÄúA novel machine learning based fea-
ture selection for motor imagery eeg signal classiÔ¨Åcation in internet
of medical things environment,‚Äù Future Generation Computer Sys-
tems, vol. 98, pp. 419‚Äì434, 2019.

[18] K. Zhang, Y. Li, P. Scarf, and A. Ball, ‚ÄúFeature selection for high-
dimensional machinery fault diagnosis data using multiple mod-
els and radial basis function networks,‚Äù Neurocomputing, vol. 74,
no. 17, pp. 2941 ‚Äì 2952, 2011.

[19] T. W. Rauber, F. de Assis Boldt, and F. M. Varejao, ‚ÄúHeterogeneous
feature models and feature selection applied to bearing fault diagno-
sis,‚Äù IEEE Transactions on Industrial Electronics, vol. 62, no. 1, pp.
637‚Äì646, 2015.

[20] D. Lewis, Y. Yang, T. Rose, and F. Li, ‚ÄúRcv1: A new benchmark col-
lection for text categorization research,‚Äù Journal of Machine Learn-
ing Research, vol. 5, pp. 361‚Äì397, 2004.

[21] S. V. Landeghem, T. Abeel, Y. Saeys, and Y. V. de Peer, ‚ÄúDiscrim-
inative and informative features for biomolecular text mining with
ensemble feature selection,‚Äù Bioinformatics, vol. 26, no. 18, pp. 554‚Äì
560, 2010.

[22] M. Labani, P. Moradi, F. Ahmadizar, and M. Jalili, ‚ÄúA novel multi-
variate Ô¨Ålter method for feature selection in text classiÔ¨Åcation prob-

lems,‚Äù Engineering Applications of ArtiÔ¨Åcial Intelligence, vol. 70,
pp. 25‚Äì37, 2018.

[23] M. Injadat, A. Moubayed, A. B. Nassif, and A. Shami, ‚ÄúMulti-stage
optimized machine learning framework for network intrusion detec-
tion,‚Äù IEEE Transactions on Network and Service Management, pp.
1‚Äì1, 2020.

[24] C. Xu, R. Zhang, M. Xie, and L. Yang, ‚ÄúNetwork intrusion detection
system as a service in openstack cloud,‚Äù in 2020 International Con-
ference on Computing, Networking and Communications (ICNC),
2020, pp. 450‚Äì455.

[25] A. Shahraki, M. Abbasi, and O. Haugen, ‚ÄúBoosting algorithms for
network intrusion detection: A comparative evaluation of real ad-
aboost, gentle adaboost and modest adaboost,‚Äù Engineering Appli-
cations of ArtiÔ¨Åcial Intelligence, vol. 94, 2020.

[26] M. Di Mauro, M. Longo, F. Postiglione, G. Carullo, and M. Tam-
basco, ‚ÄúService function chaining deployed in an NFV environment:
An availability modeling,‚Äù in 2017 IEEE Conference on Standards
for Communications and Networking (CSCN), 2017, pp. 42‚Äì47.
[27] M. Di Mauro, M. Longo, F. Postiglione, and M. Tambasco, ‚ÄúAvail-
ability modeling and evaluation of a network service deployed via
NFV,‚Äù in Digital Communication. Towards a Smart and Secure Fu-
ture Internet, 2017, pp. 31‚Äì44.

[28] M. Di Mauro, M. Longo, and F. Postiglione, ‚ÄúAvailability evaluation
of multi-tenant service function chaining infrastructures by multi-
dimensional universal generating function,‚Äù IEEE Transactions on
Services Computing, pp. 1‚Äì1, 2018.

[29] M. Di Mauro, M. Longo, F. Postiglione, R. Restaino, and M. Tam-
basco, ‚ÄúAvailability evaluation of the virtualized infrastructure man-
ager in network function virtualization environments,‚Äù in Proc. of
the 26th European Safety and Reliability Conference, ESREL 2016,
2017, pp. 2591‚Äì2596.

[30] M. Di Mauro, M. Longo, and F. Postiglione, ‚ÄúReliability analysis of
the controller architecture in software deÔ¨Åned networks,‚Äù in Proc. of
the 26th European Safety and Reliability Conference, ESREL 2015,
2015, pp. 1503‚Äì1510.

[31] M. Di Mauro, G. Galatro, M. Longo, F. Postiglione, and M. Tam-
basco, ‚ÄúAvailability evaluation of a virtualized IP Multimedia Sub-
system for 5G network architectures,‚Äù in Proc. of the 26th European
Safety and Reliability Conference, ESREL 2017, 2017, pp. 2203‚Äì
2210.

[32] ‚Äî‚Äî, ‚ÄúComparative performability assessment of SFCs: The case of
containerized IP Multimedia Subsystem,‚Äù IEEE Trans. Netw. Service
Manag., 2020.

[33] ‚Äî‚Äî, ‚ÄúPerformability management of softwarized IP Multimedia
Subsystem,‚Äù in IEEE/IFIP Network Operations and Management
Symposium, 2020, 2020, pp. 1‚Äì6.

[34] M. Di Mauro, G. Galatro, M. Longo, A. Palma, F. Postiglione,
and M. Tambasco, ‚ÄúAutomated generation of availability models
for SFCs: The case of virtualized IP Multimedia Subsystem,‚Äù in
IEEE/IFIP Network Operations and Management Symposium, 2020,
2020, pp. 1‚Äì6.

[35] V. Matta, M. Di Mauro, and M. Longo, ‚ÄúBotnet identiÔ¨Åcation in ran-
domized DDoS attacks,‚Äù in Proceedings of the 24th European Signal
Processing Conference, 2016, pp. 2260‚Äì2264.

[36] ‚Äî‚Äî, ‚ÄúBotnet identiÔ¨Åcation in multi-clustered DDoS attacks,‚Äù in
2017 25th European Signal Processing Conference (EUSIPCO),
2017, pp. 2171‚Äì2175.

[37] P. Addesso, M. Cirillo, M. Di Mauro, and V. Matta, ‚ÄúADVoIP: Ad-
versarial detection of encrypted and concealed voip,‚Äù IEEE Transac-
tions on Information Forensics and Security, vol. 15, pp. 943‚Äì958,
2020.

[38] V. Matta, M. Di Mauro, M. Longo, and A. Farina, ‚ÄúCyber-threat mit-
igation exploiting the birth‚Äìdeath‚Äìimmigration model,‚Äù IEEE Trans-
actions on Information Forensics and Security, vol. 13, no. 12, pp.
3137‚Äì3152, 2018.

[39] W. Cerroni, G. Moro, R. Pasolini, and M. Ramilli, ‚ÄúDecentralized
detection of network attacks through p2p data clustering of snmp
data,‚Äù Computers & Security, vol. 52, pp. 1 ‚Äì 16, 2015.

Di Mauro et al.: Preprint submitted to Elsevier

Page 16 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

[40] ‚Äî‚Äî, ‚ÄúNetwork attack detection based on peer-to-peer clustering of
snmp data,‚Äù in Lecture Notes of the Institute for Computer Sciences,
vol. 22, 2009.

[41] W. Cerroni, G. Moro, T. Pirini, and M. Ramilli, ‚ÄúPeer-to-peer data
mining classiÔ¨Åers for decentralized detection of network attacks,‚Äù in
Proceedings of the Twenty-Fourth Australasian Database Confer-
ence - Volume 137, 2013, pp. 101‚Äì107.

[42] ‚ÄúThe CSE-CIC-IDS2018 Dataset,‚Äù https://github.com/alekzandr/

Ô¨Çowmeter, accessed: 2020-10-01.

[43] G. Chandrashekar and F. Sahin, ‚ÄúA survey on feature selection meth-
ods,‚Äù Computers & Electrical Engineering, vol. 40, no. 1, pp. 16 ‚Äì
28, 2014.

[44] S. Khalid, T. Khalil, and S. Nasreen, ‚ÄúA survey of feature selection
and feature extraction techniques in machine learning,‚Äù in 2014 Sci-
ence and Information Conference, 2014, pp. 372‚Äì378.

[45] L. C. Molina, L. Belanche, and A. Nebot, ‚ÄúFeature selection algo-
rithms: a survey and experimental evaluation,‚Äù in 2002 IEEE Inter-
national Conference on Data Mining, 2002. Proceedings., 2002, pp.
306‚Äì313.

[46] L. Yu and H. Liu, ‚ÄúEÔ¨Écient feature selection via analysis of rele-
vance and redundancy,‚Äù The Journal of Machine Learning Research,
vol. 5, pp. 1205‚Äì1224, 2004.

[47] F. Camastra and A. Vinciarelli, Feature Extraction Methods and

Manifold Learning Methods. Springer London, 2008.

[48] A. L. Blum and P. Langley, ‚ÄúSelection of relevant features and ex-
amples in machine learning,‚Äù ArtiÔ¨Åcial Intelligence, vol. 97, no. 1,
pp. 245 ‚Äì 271, 1997.

[49] M. Dash and H. Liu, ‚ÄúFeature selection for classiÔ¨Åcation,‚Äù Intelligent

Data Analysis, vol. 1, no. 1, pp. 131 ‚Äì 156, 1997.

[50] S. Alelyani, J. Tang, and H. Liu, ‚ÄúFeature selection for clustering: A

review,‚Äù in Data Clustering: Algorithms and Applications, 2013.

[51] L. Rendell and R. Seshu, ‚ÄúLearning hard concepts through con-
structive induction: Framework and rationale,‚Äù in Proceedings of a
Workshop on Computational Learning Theory and Natural Learn-
ing Systems (Vol. 1) : Constraints and Prospects: Constraints and
Prospects, 1994, pp. 83‚Äì141.

[52] L. Talavera, ‚ÄúAn evaluation of Ô¨Ålter and wrapper methods for feature
selection in categorical clustering,‚Äù in Advances in Intelligent Data
Analysis VI, 2005, pp. 440‚Äì451.

[53] M. A. Hall and L. A. Smith, ‚ÄúFeature selection for machine learn-
ing: Comparing a correlation-based Ô¨Ålter approach to the wrapper,‚Äù
in Proceedings of the Twelfth International Florida ArtiÔ¨Åcial Intel-
ligence Research Society Conference, 1999, pp. 235‚Äì239.

[54] R. Kohavi and G. H. John, ‚ÄúWrappers for feature subset selection,‚Äù

ArtiÔ¨Åcial Intelligence, vol. 97, no. 1, pp. 273 ‚Äì 324, 1997.

[55] I. Guyon, ‚ÄúAn introduction to variable and feature selection,‚Äù Jour-
nal of Machine Learning Research, vol. 3, pp. 1157‚Äì1182, 2003.
[56] J. C. Ang, A. Mirzal, H. Haron, and H. N. A. Hamed, ‚ÄúSupervised,
unsupervised, and semi-supervised feature selection: A review on
gene selection,‚Äù IEEE/ACM Transactions on Computational Biology
and Bioinformatics, vol. 13, no. 5, pp. 971‚Äì989, 2016.

[57] J. Dromard, G. Roudi√®re, and P. Owezarski, ‚ÄúOnline and scalable un-
supervised network anomaly detection method,‚Äù IEEE Trans. Netw.
Service Manag., vol. 14, no. 1, pp. 34‚Äì47, 2017.

[58] W. Wang, Y. He, J. Liu, and S. Gombault, ‚ÄúConstructing important
features from massive network traÔ¨Éc for lightweight intrusion de-
tection,‚Äù IET Information Security, vol. 9, no. 6, pp. 374‚Äì379, 2015.
[59] T. Janarthanan and S. Zargari, ‚ÄúFeature selection in unsw-nb15 and
kddcup‚Äô99 datasets,‚Äù in 2017 IEEE 26th International Symposium
on Industrial Electronics (ISIE), 2017, pp. 1881‚Äì1886.

[60] K. El-Khatib, ‚ÄúImpact of feature reduction on the eÔ¨Éciency of wire-
less intrusion detection systems,‚Äù IEEE Transactions on Parallel and
Distributed Systems, vol. 21, no. 8, pp. 1143‚Äì1149, 2010.

[61] Y. Chen, Y. Li, X. Cheng, and L. Guo, ‚ÄúSurvey and taxonomy of
feature selection algorithms in intrusion detection system,‚Äù in Pro-
ceedings of the Second SKLOIS Conference on Information Security
and Cryptology, 2006, pp. 153‚Äì167.

[62] A. Nisioti, A. Mylonas, P. D. Yoo, and V. Katos, ‚ÄúFrom intrusion de-

tection to attacker attribution: A comprehensive survey of unsuper-
vised methods,‚Äù IEEE Communications Surveys Tutorials, vol. 20,
no. 4, pp. 3369‚Äì3388, 2018.

[63] F. Iglesias and T. Zseby, ‚ÄúAnalysis of network traÔ¨Éc features for
anomaly detection,‚Äù Machine Learning, vol. 101, no. 1, pp. 59‚Äì84,
2015.

[64] R. Singh, H. Kumar, and R. K. Singla, ‚ÄúAnalysis of feature selection
techniques for network traÔ¨Éc dataset,‚Äù in 2013 International Con-
ference on Machine Intelligence and Research Advancement, 2013,
pp. 42‚Äì46.

[65] M. Bahrololum, E. Salahi, and M. Khaleghi, ‚ÄúMachine learning
techniques for feature reduction in intrusion detection systems: A
comparison,‚Äù in Progress in Computing, Analytics and Networking.
Advances in Intelligent Systems and Computing, 2009, pp. 1091‚Äì
1095.

[66] Y. Dhote, S. Agrawal, and A. J. Deen, ‚ÄúA survey on feature selection
techniques for internet traÔ¨Éc classiÔ¨Åcation,‚Äù in 2015 International
Conference on Computational Intelligence and Communication Net-
works (CICN), 2015, pp. 1375‚Äì1380.

[67] A. L. Buczak and E. Guven, ‚ÄúA survey of data mining and machine
learning methods for cyber security intrusion detection,‚Äù IEEE Com-
munications Surveys Tutorials, vol. 18, no. 2, pp. 1153‚Äì1176, 2016.
[68] P. Mishra, V. Varadharajan, U. Tupakula, and E. S. Pilli, ‚ÄúA de-
tailed investigation and analysis of using machine learning tech-
niques for intrusion detection,‚Äù IEEE Communications Surveys Tu-
torials, vol. 21, no. 1, pp. 686‚Äì728, 2019.

[69] M. Di Mauro and C. Di Sarno, ‚ÄúImproving SIEM capabilities
through an enhanced probe for encrypted skype traÔ¨Éc detection,‚Äù
Journal of Information Security and Applications, vol. 38, pp. 85‚Äì
95, 2018.

[70] M. Di Mauro and M. Longo, ‚ÄúSkype traÔ¨Éc detection: A decision
theory based tool,‚Äù in 2014 International Carnahan Conference on
Security Technology (ICCST), 2014, pp. 1‚Äì6.

[71] M. Di Mauro and C. Di Sarno, ‚ÄúA framework for internet data real-
time processing: A machine-learning approach,‚Äù in 2014 Interna-
tional Carnahan Conference on Security Technology (ICCST), 2014,
pp. 1‚Äì6.

[72] F. Cauteruccio, G. Fortino, A. Guerrieri, A. Liotta, D. Mocanu,
C. Perra, G. Terracina, and M. Torres Vega, ‚ÄúShort-long term
anomaly detection in wireless sensor networks based on machine
learning and multi-parameterized edit distance,‚Äù Information Fu-
sion, vol. 52, pp. 13 ‚Äì 30, 2019.

[73] M. Di Mauro, G. Galatro, and A. Liotta, ‚ÄúExperimental review of
neural-based approaches for network intrusion management,‚Äù IEEE
Transactions on Network and Service Management, pp. 1‚Äì1, 2020.
[74] M. Di Mauro and M. Longo, ‚ÄúRevealing encrypted webrtc traÔ¨Éc
via machine learning tools,‚Äù in 2015 12th International Joint Confer-
ence on e-Business and Telecommunications (ICETE), vol. 04, 2015,
pp. 259‚Äì266.

[75] H. Benaddi, K. Ibrahimi, and A. Benslimane, ‚ÄúImproving the in-
trusion detection system for nsl-kdd dataset based on pca-fuzzy
clustering-knn,‚Äù in 2018 6th International Conference on Wireless
Networks and Mobile Communications (WINCOM), 2018, pp. 1‚Äì6.
[76] W. Wang, X. Du, and N. Wang, ‚ÄúBuilding a cloud ids using an ef-
Ô¨Åcient feature selection method and svm,‚Äù IEEE Access, vol. 7, pp.
1345‚Äì1354, 2019.

[77] S. M. Kasongo and Y. Sun, ‚ÄúA deep learning method with Ô¨Ålter based
feature engineering for wireless intrusion detection system,‚Äù IEEE
Access, vol. 7, pp. 38 597‚Äì38 607, 2019.

[78] K. Wu, Z. Chen, and W. Li, ‚ÄúA novel intrusion detection model for
a massive network using convolutional neural networks,‚Äù IEEE Ac-
cess, vol. 6, pp. 50 850‚Äì50 859, 2018.

[79] M. A. Ambusaidi, X. He, P. Nanda, and Z. Tan, ‚ÄúBuilding an in-
trusion detection system using a Ô¨Ålter-based feature selection algo-
rithm,‚Äù IEEE Transactions on Computers, vol. 65, no. 10, pp. 2986‚Äì
2998, 2016.

[80] K. A. Taher, B. Mohammed Yasin Jisan, and M. M. Rahman, ‚ÄúNet-
work intrusion detection using supervised machine learning tech-

Di Mauro et al.: Preprint submitted to Elsevier

Page 17 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

nique with feature selection,‚Äù in 2019 International Conference on
Robotics,Electrical and Signal Processing Techniques (ICREST),
2019, pp. 643‚Äì646.

[81] J. Woo, J. Song, and Y. Choi, ‚ÄúPerformance enhancement of deep
neural network using feature selection and preprocessing for intru-
sion detection,‚Äù in 2019 International Conference on ArtiÔ¨Åcial In-
telligence in Information and Communication (ICAIIC), 2019, pp.
415‚Äì417.

[82] F. Amiri, M. R. YouseÔ¨Å, C. Lucas, A. Shakery, and N. Yazdani,
‚ÄúMutual information-based feature selection for intrusion detection
systems,‚Äù Journal of Network and Computer Applications, vol. 34,
no. 4, pp. 1184 ‚Äì 1199, 2011.

[83] M. Tavallaee, E. Bagheri, W. Lu, and A. A. Ghorbani, ‚ÄúA detailed
analysis of the kdd cup 99 data set,‚Äù in 2009 IEEE Symposium on
Computational Intelligence for Security and Defense Applications,
2009, pp. 1‚Äì6.

[84] N. Moustafa and J. Slay, ‚ÄúUnsw-nb15: a comprehensive data set for
network intrusion detection systems (unsw-nb15 network data set),‚Äù
in 2015 Military Communications and Information Systems Confer-
ence (MilCIS), 2015, pp. 1‚Äì6.

[85] N. Moustafa, J. Slay, and G. Creech, ‚ÄúNovel geometric area analysis
technique for anomaly detection using trapezoidal area estimation on
large-scale networks,‚Äù IEEE Transactions on Big Data, vol. 5, no. 4,
pp. 481‚Äì494, 2019.

[86] Doreswamy, M. K. Hooshmand, and I. Gad, ‚ÄúFeature selection ap-
proach using ensemble learning for network anomaly detection,‚Äù
CAAI Transactions on Intelligence Technology, vol. 5, no. 4, pp.
283‚Äì293, 2020.

[87] A. Binbusayyis and T. Vaiyapuri, ‚ÄúIdentifying and benchmarking
key features for cyber intrusion detection: An ensemble approach,‚Äù
IEEE Access, vol. 7, pp. 106 495‚Äì106 513, 2019.

[88] ‚Äúcanadian institute for cybersecurity,‚Äù https://www.unb.ca/cic/, ac-

cessed: 2020-10-01.

[89] M. A. Hall and G. Holmes, ‚ÄúBenchmarking attribute selection tech-
niques for discrete class data mining,‚Äù IEEE Transactions on Knowl-
edge and Data Engineering, vol. 15, no. 6, pp. 1437‚Äì1447, 2003.

[90] R. B and G. S, ‚ÄúAn intelligent fuzzy rule based feature selection for
eÔ¨Äective intrusion detection,‚Äù in 2018 International Conference on
Recent Trends in Advance Computing (ICRTAC), 2018, pp. 206‚Äì211.
[91] V. S. Takkellapati and G. V. Prasad, ‚ÄúNetwork intrusion detection
system based on feature selection and triangle area support vector
machine,‚Äù International Journal of Engineering Trends and Tech-
nology, vol. 3, no. 4, pp. 466‚Äì470, 2012.

[92] S. Ganapathy, K. Kulothungan, P. Yogesh, and A. Kannan, ‚ÄúAn intel-
ligent intrusion detection system for ad hoc networks,‚Äù in IET Chen-
nai 3rd International on Sustainable Energy and Intelligent Systems
(SEISCON 2012), 2012, pp. 1‚Äì5.

[93] J. M. Hern√É¬°ndez Jim√É¬©nez and K. Goseva-Popstojanova, ‚ÄúThe ef-
fect on network Ô¨Çows-based features and training set size on malware
detection,‚Äù in 2018 IEEE 17th International Symposium on Network
Computing and Applications (NCA), 2018, pp. 1‚Äì9.

[94] P. Singh and A. Tiwari, ‚ÄúAn eÔ¨Écient approach for intrusion detec-
tion in reduced features of kdd99 using id3 and classiÔ¨Åcation with
knnga,‚Äù in 2015 Second International Conference on Advances in
Computing and Communication Engineering, 2015, pp. 445‚Äì452.

[95] M. Gutlein, E. Frank, M. Hall, and A. Karwath, ‚ÄúLarge-scale at-
tribute selection using wrappers,‚Äù in 2009 IEEE Symposium on Com-
putational Intelligence and Data Mining, 2009, pp. 332‚Äì339.
[96] W. Wang, X. Wang, D. Feng, J. Liu, Z. Han, and X. Zhang, ‚ÄúExplor-
ing permission-induced risk in android applications for malicious
application detection,‚Äù IEEE Transactions on Information Forensics
and Security, vol. 9, no. 11, pp. 1869‚Äì1882, 2014.

[97] I. Finizio, C. Mazzariello, and C. Sansone, ‚ÄúCombining genetic-
based misuse and anomaly detection for reliably detecting intrusions
in computer networks,‚Äù in Proceedings of the 13th International
Conference on Image Analysis and Processing, 2005, pp. 66‚Äì74.
[98] Y. Liu, Z. Xu, J. Yang, L. Wang, C. Song, and K. Chen, ‚ÄúA novel
meta-heuristic-based sequential forward feature selection approach

for anomaly detection systems,‚Äù in 2016 International Conference
on Network and Information Systems for Computers (ICNISC), 2016,
pp. 218‚Äì227.

[99] F. Glover, ‚ÄúFuture paths for integer programming and links to artiÔ¨Å-
cial intelligence,‚Äù Computers & Operations Research, vol. 13, no. 5,
pp. 533 ‚Äì 549, 1986.

[100] G. F.W. and L. M., Tabu Search. New York, USA: Springer, 1997.
[101] C. Rego and B. Alidaee, Metaheuristic Optimization via Memory
and Evolution: Tabu Search and Scatter Search (Operations Re-
search/Computer Science Interfaces Series). Berlin, Heidelberg:
Springer-Verlag, 2005.

[102] A.-R. Hedar, J. Wang, and M. Fukushima, ‚ÄúTabu search for attribute
reduction in rough set theory,‚Äù Soft Computing, vol. 12, no. 9, pp.
909‚Äì918, 2008.

[103] H. Mohamadi, J. Habibi, and H. Saadi, ‚ÄúIntrusion detection in com-
puter networks using tabu search based fuzzy system,‚Äù in 2008 7th
IEEE International Conference on Cybernetic Intelligent Systems,
2008, pp. 1‚Äì6.

[104] W. Jian-guang, T. Ran, and L. Zhi-Yong, ‚ÄúAn improving tabu search
algorithm for intrusion detection,‚Äù in 2011 Third International Con-
ference on Measuring Technology and Mechatronics Automation,
vol. 1, 2011, pp. 435‚Äì439.

[105] Y. Chen, L. Dai, and X. Cheng, ‚ÄúGats-c4.5: An algorithm for opti-
mizing features in Ô¨Çow classiÔ¨Åcation,‚Äù in 2008 5th IEEE Consumer
Communications and Networking Conference, 2008, pp. 466‚Äì470.
[106] K. Bakour, G. S. Das, and H. M. Unver, ‚ÄúAn intrusion detection sys-
tem based on a hybrid tabu-genetic algorithm,‚Äù in 2017 International
Conference on Computer Science and Engineering (UBMK), 2017,
pp. 215‚Äì220.

[107] Xiaocong Z., Dongling L., and Yang Y., ‚ÄúImproved incremental sup-
port vector machine with hybrid feature selection for network intru-
sion detection,‚Äù in 2013 International Conference on Information
and Network Security (ICINS 2013), 2013, pp. 1‚Äì6.

[108] F. Glover, ‚ÄúHeuristics for integer programming using surrogate con-

straints,‚Äù Decision Sciences, vol. 8, pp. 156‚Äì166, 1977.

[109] Z. Ugray, L. Lasdon, J. Plummer, F. Glover, J. Kelly, and R. Marti,
‚ÄúScatter search and local nlp solvers: a multistart framework for
global optimization,‚Äù Informs Journal on Computing, vol. 19, no. 3,
pp. 328 ‚Äì 340, 2007.

[110] J. Wang, A. R. Hedar, S. Wang, and J. Ma, ‚ÄúRough set and scat-
ter search metaheuristic based feature selection for credit scoring,‚Äù
Expert Systems with Applications, vol. 39, no. 6, pp. 6123 ‚Äì 6128,
2012.

[111] F. G. Lopez, M. G. Torres, B. M. Batista, J. A. M. Perez, and J. M.
Moreno-Vega, ‚ÄúSolving feature subset selection problem by a paral-
lel scatter search,‚Äù European Journal of Operational Research, vol.
169, no. 2, pp. 477 ‚Äì 489, 2006.

[112] E. Duman and M. H. Ozcelik, ‚ÄúDetecting credit card fraud by ge-
netic algorithm and scatter search,‚Äù Expert Systems with Applica-
tions, vol. 38, no. 10, pp. 13 057 ‚Äì 13 063, 2011.

[113] D. Byers and N. Shahmehri, ‚ÄúPrioritisation and selection of software
security activities,‚Äù in 2009 International Conference on Availabil-
ity, Reliability and Security, 2009, pp. 201‚Äì207.

[114] J. Kennedy and R. Eberhart, ‚ÄúParticle swarm optimization,‚Äù in Pro-
ceedings of ICNN‚Äô95 - International Conference on Neural Net-
works, vol. 4, 1995, pp. 1942‚Äì1948 vol.4.

[115] Q. Yao, J. Cai, and J. Zhang, ‚ÄúSimultaneous feature selection and ls-
svm parameters optimization algorithm based on PSO,‚Äù in 2009 WRI
World Congress on Computer Science and Information Engineering,
vol. 5, 2009, pp. 723‚Äì727.

[116] W. Hu, J. Gao, Y. Wang, O. Wu, and S. Maybank, ‚ÄúOnline adaboost-
based parameterized methods for dynamic distributed network intru-
sion detection,‚Äù IEEE Transactions on Cybernetics, vol. 44, no. 1,
pp. 66‚Äì82, 2014.

[117] H. Li, W. Guo, G. Wu, and Y. Li, ‚ÄúA RF-PSO based hybrid feature se-
lection model in intrusion detection system,‚Äù in 2018 IEEE Third In-
ternational Conference on Data Science in Cyberspace (DSC), 2018,
pp. 795‚Äì802.

Di Mauro et al.: Preprint submitted to Elsevier

Page 18 of 19

Supervised Feature Selection Techniques in Network Intrusion Detection: a Critical Review

[118] S. Fong, R. Wong, and A. V. Vasilakos, ‚ÄúAccelerated PSO swarm
search feature selection for data stream mining big data,‚Äù IEEE
Transactions on Services Computing, vol. 9, no. 1, pp. 33‚Äì45, 2016.
[119] M. Dorigo, V. Maniezzo, and A. Colorni, ‚ÄúAnt system: optimization
by a colony of cooperating agents,‚Äù IEEE Transactions on Systems,
Man, and Cybernetics, Part B (Cybernetics), vol. 26, no. 1, pp. 29‚Äì
41, 1996.

[120] T. Mehmood and H. B. M. Rais, ‚ÄúSvm for network anomaly detec-
tion using aco feature subset,‚Äù in 2015 International Symposium on
Mathematical Sciences and Computing Research (iSMSC), 2015, pp.
121‚Äì126.

[121] S. Harde and V. Sahare, ‚ÄúDesign and implementation of aco feature
selection algorithm for data stream mining,‚Äù in 2016 International
Conference on Automatic Control and Dynamic Optimization Tech-
niques (ICACDOT), 2016, pp. 1047‚Äì1051.

[122] H. Peng, C. Ying, S. Tan, B. Hu, and Z. Sun, ‚ÄúAn improved feature
selection algorithm based on ant colony optimization,‚Äù IEEE Access,
vol. 6, pp. 69 203‚Äì69 209, 2018.

[123] X. Yang, Cuckoo Search and FireÔ¨Çy Algorithm: Theory and Appli-

cations. London, UK: Springer, 2013.

[124] Z. Li, Y. Su, and Q. Han, ‚ÄúIntrusion detection based on pca and fuzzy
clustering optimized by cs,‚Äù in 2017 Chinese Automation Congress
(CAC), 2017, pp. 6334‚Äì6339.

[125] E. J. L. D. Asir Antony Gnana Singh, R. Priyadharshini, ‚ÄúCuckoo
optimisation based intrusion detection system for cloud computing,‚Äù
Internation Journal of Computer Network and Information Security,
vol. 11, pp. 42‚Äì49, 2018.

[126] K. Rithesh, ‚ÄúAnomaly-based nids using artiÔ¨Åcial neural networks
optimised with cuckoo search optimizer,‚Äù in Emerging Research in
Electronics, Computer Science and Technology, 2019, pp. 23‚Äì35.

[127] W. Niu, X. Zhang, G. Yang, Z. Ma, and Z. Zhuo, ‚ÄúPhishing emails
detection using cs-svm,‚Äù in 2017 IEEE International Symposium
on Parallel and Distributed Processing with Applications and 2017
IEEE International Conference on Ubiquitous Computing and Com-
munications (ISPA/IUCC), 2017, pp. 1054‚Äì1059.

[128] M. Redmond, S. Salesi, and G. Cosma, ‚ÄúA novel approach based on
an extended cuckoo search algorithm for the classiÔ¨Åcation of tweets
which contain emoticon and emoji,‚Äù in 2017 2nd International
Conference on Knowledge Engineering and Applications (ICKEA),
2017, pp. 13‚Äì19.

[129] I. H. Abdulqadder, D. Zou, I. T. Aziz, B. Yuan, and W. Li, ‚ÄúSecsdn-
cloud: Defeating vulnerable attacks through secure software-deÔ¨Åned
networks,‚Äù IEEE Access, vol. 6, pp. 8292‚Äì8301, 2018.

[130] T. Weise, ‚ÄúGlobal optimization algorithms ‚Äì theory and applica-

tion,‚Äù 2009.

[131] W. W. Bledsoe and I. Browning, ‚ÄúPattern recognition and reading by
machine,‚Äù in Papers Presented at the December 1-3, 1959, Eastern
Joint IRE-AIEE-ACM Computer Conference, 1959, pp. 225‚Äì232.

[132] H. J. Bremermann, ‚ÄúOptimization through evolution and recombina-
tion,‚Äù in Self-Organizing Systems, M. C. Yovits, G. T. Jacobi, , and
G. D. Goldstein, Eds. Spartan Books, 1962.

[133] J. Holland, ‚ÄúOutline for a logical theory of adaptive systems,‚Äù Jour-

nal of ACM, vol. 9, no. 3, pp. 297‚Äì314, 1962.

[134] ‚Äî‚Äî, Adaptation in Natural and ArtiÔ¨Åcial Systems: An Introductory
Analysis with Applications to Biology, Control and ArtiÔ¨Åcial Intelli-
gence. Cambridge, MA, USA: MIT Press, 1992.

[135] C. Coello, ‚ÄúAn updated survey of ga-based multiobjective optimiza-
tion techniques,‚Äù ACM Computing Surveys, vol. 32, no. 2, pp. 109‚Äì
143, 2000.

[136] D. Goldberg, Genetic Algorithms in Search, Optimization and Ma-
chine Learning, 1st ed. Boston, MA, USA: Addison-Wesley Long-
man Publishing Co., Inc., 1989.

[137] S. Guha, S. S. Yau, and A. B. Buduru, ‚ÄúAttack detection in cloud
infrastructures using artiÔ¨Åcial neural network with genetic feature
selection,‚Äù in 2016 IEEE 14th Intl Conf on Dependable, Autonomic
and Secure Computing, 2016, pp. 414‚Äì419.

[138] B. Senthilnayaki, K. Venkatalakshmi, and A. Kannan, ‚ÄúAn intelli-
gent intrusion detection system using genetic based feature selection

and modiÔ¨Åed J48 decision tree classiÔ¨Åer,‚Äù in 2013 Fifth International
Conference on Advanced Computing (ICoAC), 2013, pp. 1‚Äì7.
[139] ‚Äî‚Äî, ‚ÄúIntrusion detection using optimal genetic feature selection
and svm based classiÔ¨Åer,‚Äù in 2015 3rd International Conference on
Signal Processing, Communication and Networking (ICSCN), 2015,
pp. 1‚Äì4.

[140] H. Gharaee and H. Hosseinvand, ‚ÄúA new feature selection ids based
on genetic algorithm and svm,‚Äù in 2016 8th International Symposium
on Telecommunications (IST), 2016, pp. 139‚Äì144.

[141] P. Tao, Z. Sun, and Z. Sun, ‚ÄúAn improved intrusion detection al-
gorithm based on GA and SVM,‚Äù IEEE Access, vol. 6, pp. 13 624‚Äì
13 631, 2018.

[142] C. M. Fonseca and P. J. Fleming, ‚ÄúAn overview of evolutionary algo-
rithms in multiobjective optimization,‚Äù Evolutionary Computation,
vol. 3, no. 1, pp. 1‚Äì16, 1995.

[143] F. Jimenez, G. Sanchez, J. Garcia, G. Sciavicco, and L. Miralles,
‚ÄúMulti-objective evolutionary feature selection for online sales fore-
casting,‚Äù Neurocomputing, vol. 234, pp. 75 ‚Äì 92, 2017.

[144] M. S. Aliakbarian and A. Fanian, ‚ÄúInternet traÔ¨Éc classiÔ¨Åcation using
moea and online reÔ¨Ånement in voting on ensemble methods,‚Äù in 2013
21st Iranian Conference on Electrical Engineering (ICEE), 2013,
pp. 1‚Äì6.

[145] Y. Zhu, J. Liang, J. Chen, and Z. Ming, ‚ÄúAn improved nsga-iii algo-
rithm for feature selection used in intrusion detection,‚Äù Knowledge-
Based Systems, vol. 116, pp. 74‚Äì85, 2017.

[146] ‚ÄúBuilding an eÔ¨Äective intrusion detection system using unsupervised
feature selection in multi-objective optimization framework,‚Äù arxiv.
org/pdf/1905.06562.pdf, accessed: 2020-10-01.

[147] P. Ducange, G. Mannara, F. Marcelloni, R. Pecori, and M. Vecchio,
‚ÄúA novel approach for internet traÔ¨Éc classiÔ¨Åcation based on multi-
objective evolutionary fuzzy classiÔ¨Åers,‚Äù in 2017 IEEE International
Conference on Fuzzy Systems (FUZZ-IEEE), 2017, pp. 1‚Äì6.
[148] ‚ÄúThe KDD99 Dataset,‚Äù http://kdd.ics.uci.edu/databases/kddcup99\

/kddcup99.html, accessed: 2020-10-01.

[149] G. Draper-Gil, A. H. Lashkari, M. S. I. Mamun, and A. A. Ghorbani,
‚ÄúCharacterization of encrypted and vpn traÔ¨Éc using time-related
features,‚Äù in International Conference on Information Systems Se-
curity and Privacy, 2016.

[150] ‚ÄúCicÔ¨Çowmeter network analyzer,‚Äù https://www.unb.ca/cic/datasets/

ids-2018.html, accessed: 2020-10-01.

[151] ‚ÄúCorrelation-based feature selection for machine learning,‚Äù cs.

waikato.ac.nz/~mhall/thesis.pdf, accessed: 2020-10-01.

[152] F. Fabris, A. A. Freitas, and J. M. A. Tullet, ‚ÄúAn extensive empiri-
cal comparison of probabilistic hierarchical classiÔ¨Åers in datasets of
ageing-related genes,‚Äù IEEE/ACM Transactions on Computational
Biology and Bioinformatics, vol. 13, no. 6, pp. 1045‚Äì1058, 2016.

[153] R. Kohavi and G. H. John, ‚ÄúWrappers for feature subset selection,‚Äù
ArtiÔ¨Åcial Intelligence, vol. 97, no. 1, pp. 273 ‚Äì 324, 1997.
[154] L. Zhu, X. Tang, M. Shen, X. Du, and M. Guizani, ‚ÄúPrivacy-
preserving ddos attack detection using cross-domain traÔ¨Éc in soft-
ware deÔ¨Åned networks,‚Äù IEEE Journal on Selected Areas in Com-
munications, vol. 36, no. 3, pp. 628‚Äì643, 2018.

[155] K. Kalkan, L. Altay, G. G√ºr, and F. Alag√∂z, ‚ÄúJess: Joint entropy-
based ddos defense scheme in sdn,‚Äù IEEE Journal on Selected Areas
in Communications, vol. 36, no. 10, pp. 2358‚Äì2372, 2018.
[156] H. Kim, K. ClaÔ¨Äy, M. Fomenkov, D. Barman, M. Faloutsos, and
K. Lee, ‚ÄúInternet traÔ¨Éc classiÔ¨Åcation demystiÔ¨Åed: Myths, caveats,
and the best practices,‚Äù in Proceedings of the 2008 ACM CoNEXT
Conference, 2008, pp. 11:1‚Äì11:12.

[157] J. Zhang, Y. Xiang, Y. Wang, W. Zhou, Y. Xiang, and Y. Guan,
‚ÄúNetwork traÔ¨Éc classiÔ¨Åcation using correlation information,‚Äù IEEE
Transactions on Parallel and Distributed Systems, vol. 24, no. 1, pp.
104‚Äì117, 2013.

Di Mauro et al.: Preprint submitted to Elsevier

Page 19 of 19

