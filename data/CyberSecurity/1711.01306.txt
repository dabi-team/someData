7
1
0
2

v
o
N
3

]
T
I
.
s
c
[

1
v
6
0
3
1
0
.
1
1
7
1
:
v
i
X
r
a

Deep Learning-Based Dynamic Watermarking for Secure
Signal Authentication in the Internet of Things

Aidin Ferdowsi∗ and Walid Saad∗
∗ Wireless@VT, Bradley Department of Electrical and Computer Engineering,
Virginia Tech, Blacksburg, VA, USA, Emails: {aidin,walids}@vt.edu

Abstract—Securing the Internet of Things (IoT) is a necessary
milestone toward expediting the deployment of its applications
and services. In particular, the functionality of the IoT devices
are extremely dependent on the reliability of their message trans-
mission. Cyber attacks such as data injection, eavesdropping,
and man-in-the-middle threats can lead to security challenges.
Securing IoT devices against such attacks requires accounting
for their stringent computational power and need for low-latency
operations. In this paper, a novel deep learning method is
proposed for dynamic watermarking of IoT signals to detect
cyber attacks. The proposed learning framework, based on a long
short-term memory (LSTM) structure, enables the IoT devices
to extract a set of stochastic features from their generated signal
and dynamically watermark these features into the signal. This
method enables the IoT’s cloud center, which collects signals from
the IoT devices, to effectively authenticate the reliability of the
signals. Furthermore, the proposed method prevents complicated
attack scenarios such as eavesdropping in which the cyber
attacker collects the data from the IoT devices and aims to break
the watermarking algorithm. Simulation results show that, with
an attack detection delay of under 1 second the messages can be
transmitted from IoT devices with an almost 100% reliability.

I. INTRODUCTION

The Internet of Things (IoT) will encompass a massive
number of devices that must reliably transmit a diverse set
of messages observed from their environment [1]. The IoT
will have applications in multiple areas including health care
[2], smart grids [3], drones [4] and industrial monitoring [5].
However, an effective deployment of these diverse IoT services
near real-time, reliable, secure, and low complexity message
transmission from the IoT devices.

Most IoT architectures consist of four layers: perceptual,
network, support, and application layer [6]. The perceptual
layer is the most fundamental layer which collects all kind
of information from the physical world using RFID, GPS,
accelerometer, and gyroscope data. The other three layers
are centered around communication and computation of IoT
signals as well as personalized services for end users. Due
to simplicity of the devices and components at the perceptual
layer, their resource-constrained nature, and their low compu-
tational and storage capabilities, securing the IoT signals at
this layer is notoriously challenging.

Recently, a number of security solutions have been pro-
posed for IoT signal protection [7]–[10]. The work in [7]
investigated physical layer security techniques in IoT scenario
and presented some methods that are suitable for protecting
IoT applications. These physical layer security methods in-
clude optimal sensor censoring, channel-based bit ﬂipping,
This research was supported by the U.S. National Science Foundation under

Grants OAC-1541105 and CNS-1524634.

probabilistic ciphering of quantized IoT signals, and artiﬁcial
noise signal transmission. In [8], the author suggested bridging
the security gap in IoT devices by applying information
theory and cryptography at the physical layer of the IoT.
An authentication protocol for the IoT is presented in [9],
using lightweight encryption method in order to cope with
constrained IoT devices. Moreover, in [10], authors developed
a learning mechanisms for ﬁngerprinting and authenticating
IoT devices and their environment.

However,

To provide further security to IoT-like cyber-physical sys-
tems (CPSs), the idea of watermarking has been studied in
[11]–[14]. In [11], a method was proposed to watermark
a predeﬁned signal unto a CPS input signal
that enables
detection of replay attacks in which an adversary repeats a
sequence of past measurements. A dynamic watermarking
algorithm was proposed in [12] for integrity attack detection
in networked CPSs. In [13], the authors introduced a security
scheme that ensures detection of attacks that add a nonzero-
average-power signal to sensor measurements using a non-
stationary watermarking technique. Finally,
the authors in
[14] analyzed the optimality of Gaussian watermarked signals
against cyber attacks in linear time-variant IoT-like systems.
the solutions of [7]–[10] remain highly com-
plex for deployment at the IoT perceptual layer, and require
high computational power. Moreover, these methods do not
take into account complex attacks such as eavesdropping in
which the attacker collects data for a long time duration
and uses it for designing undetectable attacks. Furthermore,
the watermarking algorithms introduced in [11]–[14], can be
detrimental to the performance of the CPS since the augmented
watermark is applied in parallel
to the control signal of
the system. This can, in turn, cause non-optimality in the
performance of the system. In addition, the input signals to
a CPS, in most cases, are physical signals such as a sensor or
the mechanical power input to a generator, and therefore, are
not applicable to IoT devices since altering the physical input
to an IoT device such as thermometer requires changing the
IoT devices’ environment.

The main contribution of this paper is a deep learning
framework for dynamic watermarking of IoT signals. This
framework enables the IoT’s cloud to authenticate the reli-
ability of signals and detect existence of a cyber attacker who
seeks to degrade the performance of the IoT by changing
the devices’ output signal. The proposed deep learning algo-
rithm uses long short-term memory (LSTM) [15] blocks to
extract stochastic features such as spectral ﬂatness, skewness,
kurtosis, and central moments from IoT signal and water-

 
 
 
 
 
 
marks these features inside the original signal. This dynamic
feature extraction allows the cloud to detect sophisticated
eavesdropping attacks, since the attacker will not be able to
extract the watermarked information. Moreover, the proposed
LSTM reduces complexity and latency of the attack detection
compared to other security methods such as encryption. This
allows LSTM to effectively complement the cryptographic and
security solutions of an IoT. Simulation results show that,
using the proposed approach and for under 1 second latency,
the IoT signals can be reliably transmitted from IoT devices
to the cloud.

The rest of the paper is organized as follows. Section
II introduces spread spectrum watermarking for IoT attack
detection. Section III presents the proposed learning algorithm.
Section IV analyzes the simulation and conclusions are drawn
in Section V.

II. SIGNAL AUTHENTICATION AND ATTACK DETECTION
USING WATERMARKING

Consider an IoT device (IoTD) which generates a signal
y(t) at time step t with sampling frequency fs, and transmits
this signal to a cloud, that uses the received signal is used
for estimation and control of the IoTD operation. In this
system, we consider an adversary who seeks to compromise
the IoTD or the communication link between the IoTD and
cloud, and, then, manipulates the transmitted signal. In this
case, the transmitted signal will be ¯y(t) (cid:54)= y(t) which will
cause an estimation error at the cloud. Therefore, the cloud
must implement an attack detection mechanism to differentiate
between the honest and false signal received from an IoTD.
Here, we propose a watermarking scheme for effective IoTD
signal authentication and attack detection.

A. Spread Spectrum Watermarking

w(t) = y(t) + βbp(t)

Watermarking uses a hidden, predeﬁned non-perceptual
code (bit stream) inside a multimedia signal to authenticate
the ownership of such signals. One of the widely used wa-
termarking methods is spread spectrum (SS) [16] in which a
key pseudo-noise sequence is added to the original signal. The
watermarked signal can then be written as follows:
for t = 1, . . . , n,

(1)
where w is the watermarked signal, p is a pseudo-noise binary
sequence of +1 and −1, β is the relative power of the pseudo-
noise signal to the original signal, b is the hidden bit in the
signal which can take values +1 and −1, and n is the number
of samples (frame length) of the original signal used to hide a
single bit. To extract the watermarked bit, the cloud receives
the watermarked signal and correlates it with the key pseudo-
noise sequence. The extraction process will be:
< y, p >n +βb < p, p >n
βn

< w, p >n
βn

= ˜y + b,

˜b =

(2)

=

where, for ˜b > 0 the extracted bit is 1 and for ˜b < 0 the
extracted bit is −1 and < w, p >n is the inner production of
n samples of w and p. p(t) and y(t) are independent stochastic
variables at time t and we consider y(t) having mean µ and

variance σ2. Next, we analyze the bit error rate of the extracted
bit.

Theorem 1. In the proposed SS watermarking scheme the bit
(cid:17)
n
extraction error is 1
2

2 erfc

(cid:16) β
σ

√
√

.

Proof. For ˜y, we can write:
n
(cid:88)

y(t)p(t) =

˜y =

1
βn

=

n+
βn

(cid:32)

(cid:88)

y(t) −

(cid:88)

y(t)

(cid:33)

1
βn

t=1
1
n+

(cid:88)

t∈P +

y(t) −

nP −
βn

t∈P +
1
n−

t∈P −

t∈P −

(cid:88)

y(t),

(3)

where P + = {t|p(t) = 1}, P − = {t|p(t) = −1}, n+ (cid:44) |P +|,
and n− (cid:44) |P −|. Since (3) can be expressed as sum of i.i.d
variables for large values of n+ and n− , then, using the central
limit theorem, we can write (3) as linear combination of two
Gaussian distributions as ˜y = Y1 − Y2, where
n+
β2n2 σ2

n−
β2n2 σ2

(cid:18) µ
βn

(cid:18) µ
βn

, Y2 ∼ N

Y1 ∼ N

(4)

(cid:19)

(cid:19)

.

,

,

Since ˜y is a linear combination of two independent Gaussian
distributions, then we have:
µ
βn

n+
β2n2 σ2 +

n−
β2n2 σ2

(cid:18) µ
βn

˜y ∼ N

−

(cid:19)

,

,

(cid:18)

˜y ∼ N

0,

(cid:19)

.

σ2

1
β2n

(5)

Now, we can show that ˜b is a Gaussian variable since it is a
summation of a constant value with a Gaussian variables:
E(˜b) = b, σ2

˜b ∼ N

(cid:19)

(cid:18)

(6)

.

˜b =

σ2
β2n

Then, to analyze the probability of error we consider b = 1. In
this case an error occurs when ˜b < 0, therefore, the probability
of an error is:

(cid:111)
(cid:110)˜b < 0|b = 1

=

Pr

1
2

erfc

(cid:32)

(cid:33)

E(˜b)
√
2
σ˜b

=

1
2

erfc

(cid:18) β
σ

√
√

n
2

(cid:19)

.

(7)
The same error probability can be obtained for b = −1. (cid:4)

From (7) we can observe that for large values of β and n,
the bit extraction error goes to zero. However, selecting large
values for β and n will cause some latency and computational
challenges for IoT devices which will be discussed later.

B. Static Watermarking for Attack Detection in IoTD

Now, using the SS method we present a technique for
authentication of the signals transmitted from an IoTD to
the cloud. We ﬁrst generate a random pseudo-noise binary
sequence with n samples. Also, for every IoTD, we deﬁne a
bit stream s with ns samples. Then using (1), we embed every
bit of s in n samples of y. Therefore, for any bit stream s,
we use nns samples of y, and this embedding procedure will
repeat every nns samples of y. At the cloud, using (2), we
extract the bit stream. In case of a cyber attack, the received
signal in the cloud will be ¯y(t) rather than w(t), and, hence,
the extracted bit stream will differ from s. Thus, the cloud
will trigger an alarm for declaring the existence of a cyber

√

n

(cid:33)

1
2

erfc

(cid:32) (1 + µ1
(cid:112)2(σ2

β2n2 )β2n
1 + 2σ2)
where P is our desired probability of unsuccessful attack.
Moreover we want to have a small extraction error for cloud
as in (7). Thus, we have:
(cid:111)
(cid:110)˜b < 0|b = 1

≤ ¯P, ⇒

≥ 1 − P,

≤ ¯P,

√
√

(12)

(11)

erfc

Pr

(cid:19)

1
2

(cid:18) β
σ

n
2

where ¯P is our desired bit extraction error probability. There-
fore, from (11) and (12) we can derive the values for β and n
which satisfy the security and performance requirement of the
proposed watermarking scheme. Now, to analyze the attack
detection delay, if we consider d as the acceptable delay in
seconds for attack detection, we can ﬁnd the value of ns:

ns ≤

dfs
n

.

(13)

Using (11), (12), and (13) we can ﬁnd the values for the
three parameters which satisfy our performance and delay
constraints. The proposed SS watermarking method can detect
the cyber attacks which only have the ability to change the
transmitted data from an IoTD to the cloud. By choosing
optimal values for the three parameters of watermarking, the
cloud can identify the reliability of the transmitted attack.

Now, consider a case in which an attacker can also collect
data from the IoTDs. In this case, the attacher can launch more
complex attacks by eavesdropping the legitimate transmitted
data from the IoTD. For instance, if the attacker starts to record
the transmitted data from the IoTD and sum the recorded data
for a long time, it can potentially reveal the key p. As an
example, if the attacker collects the data for m windows of
size nns and adds this data together, it will end up having the
following signal:

¯wm(t) =

m
(cid:88)

i=1

yi(t) + mβbp(t),

(14)

where yi is the signal received in window i from an IoTD, and
¯wm is the summation of collected data. If we consider σ2
m as
the variance of the sum of m random variable y1(t), . . . , ym(t)
then there will exists a value for m where m2β2 >> σ2
m.
Therefore, the attacker can use ¯wm (cid:39) mβbp as the key for
watermarked signal. The reason for the success of this eaves-
dropping attack is due to embedding a static bit stream s in all
the windows. However, if the bit stream s changes dynamically
in each window of nns samples then, the eavesdropping attack
will not succeed anymore. In the following section, we propose
a dynamic bit stream generation using a deep learning method.

III. DEEP LEARNING FOR DYNAMIC IOT WATERMARKING

To improve our security scheme, we propose a novel deep
learning watermarking method for dynamically generating the
bit stream y which can thwart eavesdropping attacks. In our
new dynamic watermarking scheme, we use the ﬁngerprints
of the signal y generated by an IoTD to update the bit stream
s, dynamically. Signal ﬁngerprints can be seen as unique
identiﬁers of a signal that can be mapped to a bit stream.
Signal processing methods such as spectral ﬂatness, central
moments, skewness, and kurtosis can be used for extraction

Fig. 1: Static watermarking for attack detection.

attack. Fig. 1 shows the block diagram of static watermarking
for attack detection in an IoTD.

In our proposed watermarking scheme, β, n, and ns play
crucial roles in the security of a given IoTD. The value of β
must be very smaller than the value of σ. The reason is that, for
comparable values of β, an attacker can extract the key p and
bit stream s, since w(t) (cid:39) βbp(t) if |βbp(t)| = β >> |y(t)|.
Therefore, we must choose small values for β. However, from
Theorem 1, we know that, for small values of β, we will
have higher bit error rate. To overcome this issue, we have
to increase the length of the pseudo-noise key, n. Although
increasing the value of n will reduce the bit error rate, for
large values of n, the bit extraction procedure in (2) will result
in higher computation load and will also cause higher latency
since the cloud must wait for nns samples from the IoTD to
detect the attack. Moreover, large values of ns will also cause
larger delay in the cloud. Therefore, next, we propose a method
to choose suitable values for these three parameters. β must
be chosen such that the attacker cannot use w instead of p to
extract the embedded bit. Therefore, we have to adjust β to
cause a high bit error rate during the extraction of the hidden
bit using the w sequence. Thus, for two different watermarked
signals w1 and w2 with equal embedded bit b = 1, we have:
ˆb =

< y1 + βbp, y2 + βbp >
β2n2

< w1, w2 >n
β2n2

=

=

< y1, y2 > + < y1, βbp >, < βbp, y2 >, < βbp, βbp >
β2n2

(cid:16)

(cid:17)

(cid:17)

(cid:17)

(cid:16)

, N

1
β4n3

0, σ2
β4n3

0, σ2
β4n3

= Z1 + Z2 + Z3 + b2,

(cid:16) µ1
β2n2 , σ2

(8)
where Z1, Z2, and Z3 are Gaussian random variables with
distributions N
, N
, re-
spectively (the proof is analogous to Theorem 1). µ1 and σ2
1
are the mean and variance of the multiplication of random
variables y1(t) and y2(t). Then, we can write ˆb as follows:
ˆb = b2 + Z4 = b + Z4,
(cid:17)
(cid:16) µ1
β2n2 , σ2
where Z4 ∼ N
incurred during the extraction of ˆb will be:
(cid:111)
(cid:110)ˆb < 0|b = 1

. Therefore, the bit error rate

1 +2σ2
β4n3

(9)

erfc

Pr

(cid:32)

(cid:33)

=

1
2

=

1
2

erfc

E(ˆb)
√
2
σˆb
β2n2 )β2n
1 + 2σ2)

(cid:32) (1 + µ1
(cid:112)2(σ2

√

(cid:33)

n

.

(10)

Since we want to have a high bit error rate for the attacker,
we can write:

(cid:111)
(cid:110)ˆb < 0|b = 1

Pr

≥ 1 − P,

Fig. 3: Training phase of an LSTM at the cloud.

Fig. 2: Training phase of an LSTM in an IoTD.

of ﬁngerprints from signals [17]–[20]. Here, we use a deep
learning framework to extract these kind of stochastic features
the IoTD signals. Deep learning has been successfully applied
in a wide range of areas with signiﬁcant performance improve-
ment, including computer vision, natural language processing,
and speech recognition [15]. One of the widely-used deep
learning methods for sequence classiﬁcation is called LSTM
[15] and [21]. In the following, we explain how we use LSTM
to extract the ﬁngerprints from the IoTD signals.

A. LSTM for Signal Fingerprinting in IoTD

To dynamically extract ﬁngerprints from IoTD signals, we
propose an LSTM algorithm that allows an IoTD to update
the bit stream based on the sequence of generated data.

LSTMs are one of the deep recurrent neural networks
(RNNs) that can store information for long periods of time and
thus can learn long-term dependency of a given sequence [21].
Essentially, LSTMs processes an input (y(1), . . . , y(nns))
by adding new information into a memory, and using gates
which control the extent to which new information should be
memorized, old information should be forgotten, and current
information should be used. Therefore, the output of LSTMs
will be impacted by the network activation in previous time
steps and thus LSTMs are suitable for our IoT application in
which we want to extract ﬁngerprints from signals which are
dependent to previous time steps and LSTMs are a sequence
to sequence mapping.

During the training phase, the parameters of the algorithm
are learned from a given training dataset of different IoTD
such as accelerometer, gyroscope and positioning devices.
As in [17]–[20] we choose spectral ﬂatness, mean, variance,
skewness, and kurtosis as features that are extracted from a
signal with length nns and then map these values to a bit
stream with length n. Next, we watermark this extracted bit
stream into the original signal using a key. To train the LSTM,
we use the original signal y and pseudo noise key p as input
stream and the watermarked signal w as output stream. Fig. 2
shows the training phase using a block diagram model. Next,
we illustrate how we use the trained LSTM to dynamically
watermark an IoT signal.

Fig. 4: Dynamic watermarking for attack detection.

B. LSTM for Dynamic IoTD Watermarking

At the cloud, we use an LSTM for bit extraction. To train
this LSTM, we use the watermarked signal w and key p as
inputs to the neural network and the features of the original
signal and extracted bit stream as outputs. The block diagram
model for training phase of LSTM in the cloud is shown in
Fig. 3. Using the LSTM block of Fig. 2 at the IoTD and the
LSTM block of Fig. 3 at the cloud, we propose a dynamic
LSTM watermarking scheme to implement an attack detector
at the cloud.

In this method, a predeﬁned bit stream is not used since a
bit stream is dynamically generated inside the LSTM blocks at
the IoTD and the cloud. This dynamic bit stream generation at
the hidden layers of LSTMs solves the eavesdropping attack
problem, since recording and summing the IoTD signals will
not increase the power of the key sequence and the attacker
will not be able to extract the key and bit stream. Using this
method, the IoTD inserts the generated signal and key in its
LSTM block in each window of nns samples and produces
a watermarked signal with different bit stream s in each
window. At the cloud, the received watermarked signal and
key are passed from the LSTM. Then, the two outputs (the
extracted bits, and extracted features) are compared. In the
case of dissimilarity of two sequences, the attack alarm is
triggered. Fig. 4 shows the block diagram of dynamic LSTM
watermarking for attack detection.

IV. SIMULATION RESULTS AND ANALYSIS

For our simulations, we use a real dataset from an ac-
celerometer with sampling frequency fs = 1kHz. In each
simulation, we derive the optimal values for β, n, and ns
using the method proposed in Section II such that they satisfy
the reliability and delay constraints.

Fig. 5 shows the output of the LSTM trainer with n =
25, ns = 25, and β = 0.5. It can be seen from Fig. 5
that the trained output of the LSTM, which is the dynamic
watermarked signal, is very close to the training target w.
Moreover, Fig. 6 shows the performance of training, in which
the training converges after 269 epochs. Here, an epoch is

Fig. 5: Comparison of IoT signal, static watermarked signal,
dynamic watermarked signal, and train error.

Fig. 6: Training performance.

a measure of the number of times all the training vectors
are used once to update the weights of the neural network.
The training error is 0.0055 which is calculated using mean
squared error. Moreover, we tested the trained LSTM on
another accelerometer data, and the testing error is close to
0.02 which is acceptable for our IoT application.

Fig. 7 illustrates the higher performance of LSTM compared
to to static watermarking in bit extraction. From (7), we know
that higher β/σ results in lower bit error. We can see from Fig.
7 that the extraction error rate for LSTM is approximately 1
order of magnitude lower than the static watermarking when
β/σ = 1. This ratio gets better for higher β/σ, since we
can observe that the error rate of LSTM is almost 2 orders
of magnitude lower than static watermarking when β/σ =
10. This result allows designing attack detectors with lower
delay, since we can choose lower n for LSTM which results
in smaller window size and reduces the detection delay.

To analyze the functionality of our proposed watermarking
schemes in attack detection, we choose a static watermarking
block with n = 10, ns = 10 and β = 0.5. We also train our
LSTM block with these features. Then, we implement two

Fig. 7: Bit error rate of proposed watermarking algorithms.

types of attack to the signal: a) a data injection attack in which
the attacker starts to change the IoT device signal, and b) an
eavesdropping attack, in which the attacker records the data
from the IoT device, extracts the bit stream and implements an
attack with the the same watermarking bit stream. In Fig. 8,
the attack detectors compare the extracted bit stream with the
actual hidden bit stream and the percentage of difference be-
tween these two is considered as a metric for attack detection.
In other words, high difference between the two bit streams, an
attack detection alarm is triggered. Fig. 8 shows that, for the
ﬁrst attack, both watermarking schemes can detect the attack.
However, for eavesdropping, static watermarking cannot detect
the existence of attack while the LSTM performs well. The
reason is that in static watermarking the bit stream is the same
for all the time windows, while in LSTM the watermarked bit
stream dynamically changes for each time window.

Fig. 9 illustrates how an eavesdropping attack operates
against the two watermarking schemes. We can see that, in
static watermarking, the attacker records the signal and by
summing the recorded data of each window, increases the
ratio of pseudo-noise key power to the signal power and
extracts the bit stream. However, since in LSTM, the bit stream
dynamically changes in each window, the summation of the
recorded data will not increase the ratio of the key power to the
signal power. Therefore, the attacker will not be able to extract
the bit stream and key from the recorded data. In addition, we
can see from Fig. 8 that the delay of attack detection is 0.1
seconds since the attacks starts at 0.5s and the attack detector
triggers the alarm at 0.6s. The reason is that, for the window
size of n × ns/fs = 0.1 seconds, the cloud must wait for one
time window to collect the data from the IoTD.

V. CONCLUSION

In this paper, we have proposed a novel deep learning
method based on LSTM blocks for enabling attack detection
of data injection and eavesdropping in IoT devices. We have
introduced two watermarking schemes in which the IoT’s
cloud, which collects the data from the IoT devices, can
authenticate the reliability of received signals. We have shown
that our proposed LSTM method is suitable for IoT security

-1.5-1-0.500.511.522.5OutputandtargetErrorsReponsewTrainingoutputsTesttargetsTestoutputsy0.10.110.120.130.140.150.160.170.180.190.2Time(s)-0.4-0.200.20.4ErrorTesttargets050100150200250300350400450Epochs10-310-210-1100101102Mean-squarederror(MSE)Besttrainingperformanceis0.0055067atepoch269TrainTestBest0.0010.010.1110β/σ10-5010-4010-3010-2010-101BiterrorrateTheoreticalBERStaticwatermarkingBERLSTMwatermarkingBERFig. 8: Attack detection analysis of static and LSTM watermarking schemes. The y-axis in the lower ﬁgures show the
percentage of difference between the extracted bit stream and the hidden bit stream. This difference is used at the cloud as a
metric to detect attacks on the IoTDs.

[6] H. Suo, J. Wan, C. Zou, and J. Liu, “Security in the internet of things:
A review,” in 2012 International Conference on Computer Science and
Electronics Engineering, vol. 3, March 2012, pp. 648–651.

[7] A. Mukherjee, “Physical-layer security in the internet of things: Sensing
and communication conﬁdentiality under resource constraints,” Proceed-
ings of the IEEE, vol. 103, no. 10, pp. 1747–1761, Oct 2015.

[8] W. Trappe, “The challenges facing physical layer security,” IEEE Com-

munications Magazine, vol. 53, no. 6, pp. 16–20, June 2015.

[9] J. Y. Lee, W. C. Lin, and Y. H. Huang, “A lightweight authentication
protocol for internet of things,” in 2014 International Symposium on
Next-Generation Electronics (ISNE), May 2014, pp. 1–2.

[10] Y. Sharaf-Dabbagh and W. Saad, “On the authentication of devices in
the internet of things,” in 2016 IEEE 17th International Symposium on A
World of Wireless, Mobile and Multimedia Networks (WoWMoM), June
2016, pp. 1–3.

[11] Y. Mo, S. Weerakkody, and B. Sinopoli, “Physical authentication of con-
trol systems: Designing watermarked control inputs to detect counterfeit
sensor outputs,” IEEE Control Systems, vol. 35, no. 1, pp. 93–109, Feb
2015.

[12] B. Satchidanandan and P. R. Kumar, “Dynamic watermarking: Active
defense of networked cyber-physical systems,” Proceedings of the IEEE,
vol. 105, no. 2, pp. 219–240, Feb 2017.

[13] P. Hespanhol, M. Porter, R. Vasudevan, and A. Aswani, “Dynamic wa-
termarking for general LTI systems,” arXiv preprint arXiv:1703.07760,
2017.

[14] M. Hosseini, T. Tanaka, and V. Gupta, “Designing optimal watermark
signal for a stealthy attacker,” in 2016 European Control Conference
(ECC), June 2016, pp. 2258–2262.

[15] M. Chen, U. Challita, W. Saad, C. Yin, and M. Debbah, “Machine
learning for wireless networks with artiﬁcial intelligence: A tutorial on
neural networks,” arXiv preprint arXiv:1710.02913, 2017.

[16] H. S. Malvar and D. A. F. Florencio, “Improved spread spectrum: a new
modulation technique for robust watermarking,” IEEE Transactions on
Signal Processing, vol. 51, no. 4, pp. 898–905, Apr 2003.

[17] J. Haitsma and A. Kalker, “A highly robust audio ﬁngerprinting system,”
in Proc. of International Symposium on Music Information Retrieval
(ISMIR), Paris, France, October 2002, pp. 107–115.

[18] C. Bertoncini, K. Rudd, B. Nousain, and M. Hinders, “Wavelet ﬁnger-
printing of radio-frequency identiﬁcation (rﬁd) tags,” IEEE Transactions
on Industrial Electronics, vol. 59, no. 12, pp. 4843–4850, Dec 2012.

[19] R. E. Learned and A. S. Willsky, “A wavelet packet approach to transient
signal classiﬁcation,” Applied and Computational Harmonic Analysis,
vol. 2, no. 3, pp. 265 – 278, 1995.

[20] J. B. Harley, Y. Ying, J. M. F. Moura, I. J. Oppenheim, L. Sobelman,
and J. H. Garrett, “Application of mellin transform features for robust
ultrasonic guided wave structural health monitoring,” AIP Conference
Proceedings, vol. 1430, no. 1, pp. 1551–1558, 2012.

[21] A. Graves, A. R. Mohamed, and G. Hinton, “Speech recognition with
deep recurrent neural networks,” in 2013 IEEE International Conference
on Acoustics, Speech and Signal Processing, May 2013, pp. 6645–6649.

Fig. 9: The ratio of key power to signal power in
eavesdropping attack.
due to low complexity, small delay, and high accuracy in attack
detection. Simulation results have shown that dynamic LSTM
watermarking can also detect existence of complicated attacks
such as eavesdropping in which the attacker collects data from
the IoT devices and designs an undetectable attack.

REFERENCES

[1] Z. Dawy, W. Saad, A. Ghosh, J. G. Andrews, and E. Yaacoub, “To-
ward massive machine type cellular communications,” IEEE Wireless
Communications, vol. 24, no. 1, pp. 120–128, February 2017.

[2] S. M. R. Islam, D. Kwak, M. H. Kabir, M. Hossain, and K. S. Kwak,
“The internet of things for health care: A comprehensive survey,” IEEE
Access, vol. 3, pp. 678–708, 2015.

[3] H. Farhangi, “The path of the smart grid,” IEEE Power and Energy

Magazine, vol. 8, no. 1, pp. 18–28, January 2010.

[4] M. Mozaffari, W. Saad, M. Bennis, and M. Debbah, “Unmanned aerial
vehicle with underlaid device-to-device communications: Performance
and tradeoffs,” IEEE Transactions on Wireless Communications, vol. 15,
no. 6, pp. 3949–3963, June 2016.

[5] L. D. Xu, W. He, and S. Li, “Internet of things in industries: A survey,”
IEEE Transactions on Industrial Informatics, vol. 10, no. 4, pp. 2233–
2243, Nov 2014.

050100150200250Numberofeavesdroppedwindows00.511.522.533.54Ratioofkeysequencepowertosignalpower(β/σ2)StaticwatermarkingLSTMwatermarking