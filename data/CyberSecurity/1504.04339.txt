5
1
0
2

y
a
M
2
1

]

O
R
.
s
c
[

2
v
9
3
3
4
0
.
4
0
5
1
:
v
i
X
r
a

To Make a Robot Secure:
An Experimental Analysis of Cyber Security Threats Against
Teleoperated Surgical Robotics∗

Tamara Bonaci†, Jeffrey Herron †, Tariq Yusuf‡, Junjie Yan†, Tadayoshi Kohno‡, Howard Jay Chizeck††‡

May 13, 2015

Abstract

Teleoperated robots are playing an increasingly important role in military actions and medical services. In the
future, remotely operated surgical robots will likely be used in more scenarios such as battleﬁelds and emergency
response. But rapidly growing applications of teleoperated surgery raise the question; what if the computer systems
for these robots are attacked, taken over and even turned into weapons?

Our work seeks to answer this question by systematically analyzing possible cyber security attacks against Raven
II R(cid:13), an advanced teleoperated robotic surgery system. We identify a slew of possible cyber security threats, and
experimentally evaluate their scopes and impacts. We demonstrate the ability to maliciously control a wide range of
robots functions, and even to completely ignore or override command inputs from the surgeon. We further ﬁnd that
it is possible to abuse the robot’s existing emergency stop (E-stop) mechanism to execute efﬁcient (single packet)
attacks.

We then consider steps to mitigate these identiﬁed attacks, and experimentally evaluate the feasibility of applying
the existing security solutions against these threats. The broader goal of our paper, however, is to raise awareness
and increase understanding of these emerging threats. We anticipate that the majority of attacks against telerobotic
surgery will also be relevant to other teleoperated robotic and co-robotic systems.

1 Introduction

Recent developments in robotics have had a profound impact in medicine. There has been a 20% yearly increase rate
in the number of medical robots sold [3]. The use of robots in medical procedures has been shown to result in better
surgical outcomes and faster recovery, thus enhancing the delivery of medical services to the patients [16].

The research and development of teleoperated robotic surgery systems is recognized as the next step in medi-
cal robotics [26]. Teleoperated surgical robots will be expected to use a combination of existing publicly available
networks and temporary ad-hoc wireless and satellite networks to send video, audio and other sensory information
between surgeons and remote robots [20]. It is envisioned these systems will be used to provide immediate medical
relief in under-developed rural terrains, areas of natural and human-caused disasters, and in battleﬁeld scenarios [15].
But what if these robotic systems are attacked and compromised? Recent examples, such as Stuxnet worm, specif-
ically designed to target programmable logic controllers, and blamed for ruining a signiﬁcant part of Iran’s nuclear
centrifuges [11], exemplify possible issues when a cyber-physical system is targeted explicitly.

To date, security has not been a concern for telereobotic surgery. Yet researchers have recognized that the open
and uncontrollable nature of the communication medium opens these systems to a variety of possible cyber security
vulnerabilities [19]. While a few approaches, focusing mainly on private communication [27] and the ability to verify
the robot’s side code [9], have recently been proposed, there is currently little understanding of what the actual risks
are.

∗This work is supported by the National Science Foundation, Grant # CNS-1329751.
†Department of Electrical Engineering, University of Washington, 185 Stevens Way, Seattle, WA, 98195, USA {tbonaci, jeffherr,

junjiey, chizeck}@uw.edu

‡Department of Computer Science and Engineering, University of Washington, 185 Stevens Way, Seattle, WA, 98195, USA {yusuft,

yoshi}@cs.washington.edu

1

 
 
 
 
 
 
This lack of understanding of the actual risks is a function of two factors. At the moment, it is not known: (1)
how easy it would be for an attacker to compromise a teleoperated surgery system, and (2) what the applications of
such a cyber security attack might be. Not being able to answer these questions makes it hard to understand what the
challenges to improving cyber security of telerobotic surgery are, much less to address them.

In this paper, we seek to answer the above questions through an empirical analysis of the robotic surgery platform,
Raven II R(cid:13). Our work is experimental, along the lines of much past work that explored the security and privacy
properties of emerging technologies, including modern automobiles [18, 8] and medical devices [12, 13].

We seek to provide an informed understanding of risks and defenses, based on an evaluation of real technologies.

We make the following speciﬁc contributions:

Attack identiﬁcation and characterization: We identify possible cyber security attacks against teleoperated
robotic surgery, and classify them, based on the impact they have on a surgeon, into three clasees: intention manipula-
tion, intention modiﬁcation and hijacking attacks. For each of these classes, we characterize the attack surface exposed
in teleoperated robotic surgery.

Vulnerability analysis: For each characterized attack surface, we thoroughly analyze one or more practical ex-
amples, and assess the level of the actual impact on the surgical procedure. We demonstrate the ability to maliciously
control a wide range of robots functions, and even to completely ignore or override surgeon’s inputs. We further
ﬁnd that it is possible to abuse the robot’s emergency stop (E-stop) to execute efﬁcient (one packet) denial-of-service
attacks.

Risk assessment and defense directions: For the uncovered vulnerabilities, we consider the question of the cost
and the beneﬁt for an attacker. Our results, unfortunately, show that an attacker can easily and quite efﬁciently disrupt
a surgical procedure. We thus propose a few simple ﬁrst steps towards making telerobotic surgery resilient to some
of the identiﬁed attacks. We experimentally investigate the feasibility of the proposed security solutions to telerobotic
surgery, and ﬁnd that they can easily be applied without any signiﬁcant impact on a system’s usability and performance.
Finally, we discuss some possible legal implications that the identiﬁed attacks may impose on a surgeon, a hospital,
and manufacturer.

Challenges speciﬁc to teleoperated procedures: During our experimental analysis, we observe several cyber
security challenges speciﬁc to teleoperated surgery (and other teleoperated robotic systems). The most surprising
among them may be the tension between the role of the E-stop feature in the benign scenario and under attack. While
under normal circumstances, the existence of E-stop increases the safety of patients, nearby human operators, and the
robot, the same E-stop feature may be abused by an attacker to decrease the safety and security of patients, operators
and robots.

2 Related Work

2.1 Raven II R(cid:13) Surgical Robot

The Raven II is a teleoperated robotic system designed to support research in advanced techniques of robotic-assisted
surgery [26, 14]. It is the ﬁrst experimental platform in surgical robotics capable of supporting both software develop-
ment, experimental testing, and medical (surgical) training. It is commercially available from Applied Dexterity [1],
and it is currently a research platform at 12 universities across the U.S., Canada, France and United Kingdom.

As depicted in Figure1, the Raven II consists of two 7-degrees-of-freedom (DOF) surgical manipulators, divided
into three main subsystems: the static base that holds all seven actuators, the spherical mechanism that positions the
tool, and the tool interface. The motion axes of the robot are: shoulder joint (rotational), elbow joint (rotational), tool
insertion/retraction (linear), tool roll (rotational), tool grasping (rotational), tool wrist 1 actuation (rotational), and
tool wrist 2 actuation (rotational). DC motors mounted to the base actuate all motion axes, and the motors of the ﬁrst
three axes have power-off brakes to prevent tool motion in the event of a power failure.

The Raven II software is based on open standards, including Linux and Robot Operating System (ROS) [25].
The low-level control system includes real-time Linux processes (modiﬁed by the RT-Prempt Conﬁg kernel patch),
running at a deterministic rate of 1000 Hz. Key functions running inside the 1000 Hz servo-loop are: (i) coordinate
transformations, (ii) forward and inverse kinematics, (iii) gravity compensation, and (iv) joint-level closed-loop feed-
back control. The link between the control software and the motor controllers is a USB 2.0 interface board, designed
with eight channels of high-resolution 16-bit digital-to-analog conversion for control signal output to each joint con-
troller, and eight 24-bit quadrature encoder readers. The board can perform a read/write cycle for all 8 channels in 125
microseconds. The two Raven II arms are controlled by a single PC with two USB 2.0 boards.

2

Figure 1: The Raven II system consists of two 7-degrees-of-freedom surgical manipulators. The motion axes of the
robot are: shoulder joint, elbow joint, tool insertion/retraction, tool roll, tool grasping, tool wrist 1 actuation and tool
2 wrist actuation.

In the Raven II system, surgeon control inputs are collected through a surgical control console. Control inputs and
robot feedback, which include video and haptic information, are transmitted using the communication standard for sur-
gical teleoperation, Interoperable Telesurgery Protocol (ITP) [17]. ITP allows communication between heterogeneous
surgical consoles (masters) and manipulators (slaves), regardless of their individual hardware and software.

In recent years, the Raven II has been evaluated in several extreme environments scenarios [20, 15].

In the
HAPs/MRT ﬁeld experiment [20], the Raven II robot was deployed in the Mojave desert. It was controlled across
the internet, with the ﬁnal link being a UAV-enabled wireless network. In that experiment, the following network
states were recognized as critical for reliable performance [22]: (i) communication latency, (ii) jitters, (iii) packet
delays, out-of-order arrivals and losses, and (iv) devices failures.

In addition to these stochastic but benign network patterns, surgeon-robot communication over publicly available
networks expose telerobotic surgery to problems most likely not present in hospital settings. Due to the open and
uncontrollable nature of communication networks, it becomes easy for malicious entities to jam, disrupt, or take over
the communication between a robot and a surgeon.

2.2 Security of Cyber-Physical Systems

In recent years, several research initiatives have begun to address security and privacy issues of a variety of cyber-
physical systems (CPS). We give a brief overview of the state-of-the-art for CPS classes closely related to telerobotic
surgery: networked control, medical and robotic surgery.

2.2.1 Security of Networked Control Systems

Researchers recently showed that attacks against networked control systems and wireless sensor networks can be
mitigated by relying on the system’s dynamics (see, e.g., [5, 7, 24]). In [24], for example, authors assumed that the
system’s dynamics are linear, and showed that a simple optimal controller and a Kalman ﬁlter can be used to guarantee
the desired probability of detecting attacks, such as replay, false data injection and integrity attacks, under a certain
model. Their proposed approach is based on trading off the cost assumption with the probability of attack detection.

2.2.2 Security of Medical Systems

The importance of privacy and security for tele-medical applications was ﬁrst recognized in the mid-1990s, in [23, 28].
After the establishment of the Health Insurance Portability and Accountability Act (HIPAA) [2], patients privacy be-
came for a while the primary concern, and researchers typically focused on protecting the conﬁdentiality of transmitted
and stored patient data. For example, in [29], the authors consider security issues related to the medical data in mul-
timedia form. They present a simulated surgery procedure, and introduce an idea of a smart surgery room, with
monitoring actions of participating medical personnel.

More recently, researchers recognized that many modern implantable medical devices, including pacemakers and
implantable cardioverter-deﬁbrillators, are vulnerable to a variety of attacks, allowing attackers to wirelessly obtain
private patient information and change device settings in ways that can directly impact patient health [12, 13].

3

2.2.3 Security of Telereobotic Surgery

Very recently, motivated by the Raven II extreme operation experiments [15, 20], researchers recognized importance
of cyber security for telerobotic surgery [19, 27, 9]. In [9], authors developed a light-weight software tool to verify
the robot’s side code. In [27], authors developed an information coding approach to protect communication privacy
and reliability. In [19], the use of the Transport Layer Security (TLS) protocol was proposed to ensure conﬁdentiality,
authentication and authorization of the ITP.

3 Vulnerability Analysis

3.1 Attacker Model

Telerobotic surgery is envisioned to be used in extreme conditions, where robots will have to operate in low-power
and harsh conditions, with potentially lossy connection to the internet. The last communication link may potentially
even be a wireless link to a drone or a satellite, providing connection to a trusted facility (potentially a large hospital
with an established infrastructure), as depicted in Figure 2.

Figure 2: Visualization of a typical telerobotic surgery setup. Dashed lines indicate wireless links, solid lines pre-
established network connections (either wired or wireless). Orange color indicates surgeon’s control messages, and
green color robot’s feedback messages.

In such operating conditions, we recognize two attack vectors are feasible: (1) endpoint compromise, where either
a surgeon’s control console or a robot can be compromised, and (2) network and communication-based attacks, where
an attacker may intercept the existing network trafﬁc, inject new malicious trafﬁc, or both.

Endpoint compromises are less interesting since physical access to either side will likely be strictly monitored.
Network and communication-based attacks thus represent a more feasible way to compromise the system. Moreover,
due to their abundance and variability, mitigating these attacks is likely to be intellectually challenging, making this
the most difﬁcult part of the system to protect. The most likely point of attack appears to be between the network
uplink and a surgical robot. Since communication will likely be wireless, on-the-ﬁeld attackers will be able to disrupt
the link or manipulate trafﬁc contents. In the rest of the paper, we thus focus on disruption and manipulation attacks
against surgeon-robot communication links.

3.2 Attack Classiﬁcation

Based on their impact on surgeons, we categorize possible attacks into three categories: (a) intention modiﬁcation, (b)
intention manipulation, and (c) hijacking attacks.

Intention modiﬁcation attacks occur when an attacker directly impacts a surgeon’s intended actions by modifying
his/her messages while packets are in-ﬂight, and a surgeon has no control over them. These attacks are relatively easy
to observe when executed correctly, through e.g., unusual robot movements, robot becoming randomly engaged or
disengaged, or unusual delays in movements.

Intention manipulation attacks occur when an attacker only modiﬁes feedback messages (e.g., video feed, haptic
feedback), originating from a robot. A surgeon’s messages (and his/her intent) are assumed to be valid. These attacks

4

Surgeon’s control inputForce and video feedbackLEGENDHOSPITALSURGICAL ROBOTCOMMUNICATION CHANNELcan prove to be more difﬁcult to mount, simply because of the amount of data that a robot transmits, but if executed
correctly, these attacks may be harder to detect and prevent, since they are quite subtle. As the feedback is assumed to
be valid, a surgeon’s (valid) actions may unintentionally end up becoming harmful to a patient.

In hijacking attacks, a malicious entity causes the robot to completely ignore the intentions of a surgeon, and to
instead perform some other, potentially harmful actions. Some possible attacks includes both temporary and permanent
takeovers of the robot, and depending on the actions executed by the robot after being hijacked, these attacks can be
either very discreet or very noticeable.

In addition, we consider the role an attacker needs to assume within the system in order to be able to mount
an attack, and with respect to that, we classify attackers into two groups: (1) network observer, and (2) network
intermediary.

A network observer initially eavesdrops on information exchange between a surgeon and a robot, and based on
the collected information, starts inserting false messages into the network, while still allowing both the benign parties
to communicate directly.

A network intermediary (i.e., a man-in-the-middle (MitM) attacker) assumes a role of an intermediary between
a robot and a surgeon, thus completely preventing the benign parties from communicating directly. In a real life attack
scenarios, this can be done using methods such as ARP poisoning [4].

4 Experimental Analysis

4.1 Experimental Setup

To experimentally investigate possible attacks against teleoperated surgery, we establish communication between the
surgical control console and the Raven II robot through a network hub, as depicted in Figure 3.

Figure 3: Experimental setup: the attacking machine is running either Kali Linux or Windows 7 SP3, with attack
implementations written in C# or Python with the Scapy framework.

This allows us to connect an external computer to the same subnetwork, and use it to observe and modify commu-
nication between a surgeon and a robot. Our attacking computer is running either Kali Linux, or Windows 7 SP3, and
all of the analyzed attacks are implemented either in C#, or in Python with the Scapy framework [6].

4.2 Experiment Description

Our analysis is based on the data collected from experiments involving twenty human participants. This study was
approved by the University of Washington Institutional Review Board approval (#46946 - EB), and all of our subjects
were undergraduate and graduate Electrical Engineering and Computer Science and Engineering students, ranging in
age from 19 to 28 years. We acknowledge that an engineering student’s behavior may differ from a surgeon’s behavior,
but that is acceptable (and an established experimentation method in surgical robotics) since it has been shown in [22],
that both surgical and non-surgical subjects, upon gaining proﬁciency, achieve similar results in simple surgical robotic
tasks, such as the Fundamentals of Laporoscopic Surgery (FLS) block transfer task.

The FLS block transfer task is a standard test used to train and test surgeons [21], where a subject uses robot’s
graspers to move six rubber blocks, one at the time, from the left side of the FLS pegborad to the right, and then back
to the left side. When moving from left to right, a block is picked up from the peg with the left hand, transferred in the
air to the right hand, and then placed on the right peg. Hands are reversed when moving from right to left. One trial
consists of moving all blocks from left to right and then back from right to left, totaling in twelve transfers.

Due to the nature of our investigation, where we focus on the impact of attacks, rather than on subjects’ proﬁciency,

we make three simpliﬁcations to the FLS block transfer task:

• Instead of six rubber blocks, we only use three.

5

Network HubRavenSurgical controlconsoleAttacking machine• The subjects are asked to move pegs only from left to right, and the right-to-left movement is not needed.

• The subjects are allowed to pick up blocks with a grasper of their choosing, and they are not required to transfer

blocks in the air from one hand in the other.

With these simpliﬁcations, our trial consists of moving all blocks only from left to right, totaling in three transfers.
The pegborad we use is depicted in Figure 4.

Figure 4: A pegboard used in experiments. Each participant was asked to move a rubber block from one of the
positions 4, 5, 6 on the left-hand side to one of the positions 2, 3, 6 on the right-hand side.

4.3

Intent Modiﬁcation Attacks

We consider four subgroups of intent modiﬁcation attacks: (i) reordering, (ii) packet loss, (iii) packet delay and (iv)
content modiﬁcation. In all of these attacks, an attacker is assuming a role of network intermediary (man-in-the-
middle), and we achieve that by setting up a direct connection between the surgical control console and the attacking
machine, Eve, which then forwards all the surgeon’s messages to the Raven. For all attacks, except packet delay, Eve
is running a simple UDP proxy written in Python with packet interpretation and modiﬁcation done using Scapy [6].

4.3.1 Surgeon’s Intent Reordering

Intent reordering is a simple zero-knowledge attack where, instead of forwarding a surgeon’s packet to the Raven, we
add it to a queue on Eve, that pops items out in a random order once it reaches the maximum length. As a result,
all surgeon’s messages are delivered to the Raven with a negligible delay (caused by the time spent in the queue).
The Raven, however, does not implement all of the received messages. It skips the messages with sequence numbers
received out of order, and the effect of skipped messages is a jerky motion of robot’s arms, immediately observable by
experiment participants.

4.3.2 Surgeon’s Intent Loss

Intent loss is another zero-knowledge attack, where we randomly drop individual surgeon’s packets or groups of
packets. As a result of packets being dropped, Raven’s motion becomes delayed and jerky. We investigate what are
the largest tolerable packets dropping rates, η, that still result in a reasonably compliant robot. To do so, we wrote a
Python script that sweeps the space of allowed η, 0 ≤ η ≤ 1.

For individual packet drops, we observe that η ≥ 0.55 generally makes the robot operable, but difﬁcult to use,
because grasping becomes challenging. When η increases to 0.9, the robot becomes almost unusable, in particular
when the required movements are small and precise. For group packet drops, we consider groups consisting of 100
packets (10% of packets transmitted every second), and we ﬁnd that packet dropping rate η ≤ 0.2 results in a generally
operable robot, but the robot’s movements are still jerky.

Uni, 100-500 Uni, 400-600 Uni, 300-700 No delay Gauss, 0-200 Gauss, 100 Gauss, 100-250

Subj. A
Subj. B
Subj. C

361
154
350

248
620
261

632
745
229

40
33
65

118
72
292

100
100
137

520
87
555

Table 1: Time (in seconds) needed to ﬁnish one simpliﬁed FLS block transfer task under different types of surgeon intent delays. ‘Uni’ denotes
uniformly and ‘Gauss’ normally distributed delay. Numbers x-x denote the delay range in ms.

6

4.3.3 Surgeon’s Intent Delay

To mount a surgeon’s intent delay attack, we developed our own C# toolbox that allowed us to control different
characteristics of the per-packet delay, including the amount of delay imposed on an individual packet and a type of
the delay. We modeled a delay as a random variable, where in every FLS block transfer task, we assumed delays are
independent, identically distributed (iid) random variables, and a delay (a single random variable) is added to every
surgeon’s command and robot’s feedback messages. We consider three types of delay: (a) constant, (b) uniformly
distributed, and (c) normally (Gaussian) distributed, resulting in ten different simpliﬁed FLS block transfer tasks: (1)
no delay, (2) constant delay of 300ms, (3) constant delay of 500ms, (4) uniform delay between 100-500ms, (5) uniform
delay between 400-600ms, (6) uniform delay between 300-700ms, (7) no delay, (8) Gaussian delay between 0-200ms,
(9) Gaussian delay of 100ms, and (10) Gaussian delay between 100-250ms. For each of these tasks, we measure the
time needed to complete the task, and we record subjects’ assessment of the task difﬁculty.

Time Needed to Complete the Task: Table 1 presents time needed to complete one simpliﬁed version of FLS block
transfer task under seven different cases of surgeon intent delay attacks (tasks (4)–(10)). Comparing the case of no
delay (column 4) with all of the delay cases, we observe that, on average, delay attack increases the time to complete
the task by 5 times. Further, based on these preliminary results, Gaussian delay with delay ranging between 100-250ms
seems to have the most severe impact on subjects.

Subjective Assessment of Task Difﬁculties: For each of the simpliﬁed FLS tasks (1)–(10), we further ask subjects
to evaluate the difﬁculties of: (i) reaching each of the three blocks, (ii) grabbing the blocks, (iii) moving between the
pick-up and put-down locations and (iv) performing the task as a whole, where the allowed difﬁculties ranged from 0
(easy) to 7 (hard). We collect these self-reported results from 10 subjects.

In order to evaluate the collected results, for each delay attack and each subject, we sum up the four reported
difﬁculty categories, thus obtaining a single number as a representation of the perceived difﬁculty of an attack. We
refer to this number as the delay difﬁculty score. We evaluate if there exists a statistically signiﬁcant difference between
delay difﬁculty scores for different types of attacks. In doing so, we apply the Wilcoxon signed-rank test, since the
sample size was small (10 subjects) and the obtained delay difﬁculty scores were not normally distributed.

Not surprisingly, the cases with no delay are statistically signiﬁcantly different (largest P value for trial 1: p1 =
2.34 · 10−2; largest P value for trial 7: p7 = 3.91−3.) With the given sample size, however, we were not able to
distinguish between the difﬁculties of different types of delay attacks. Yet, the obtained delay difﬁculty scores indicate
that the Gaussian delay with delay ranging between 100-250ms was perceived to be the hardest by the majority of
subjects (reported delay difﬁculties per subjects: 0, 6, 25, 20, 28, 10, 25, 27, 19, 25, with the ﬁrst result clearly an
outlier).

4.3.4 Surgeon’s Intent Modiﬁcation

Leveraging knowledge about the structure of surgeon’s packets [17], we next modify surgeon’s packets on-the-ﬂy
before forwarding them to the Raven through our proxy, Eve. Some of the attacks we consider:

• Changing the commanded changes in position,

• Changing the commanded changes in rotation,

• Inverting the grasping states of robotic arms,

• Inverting a combination of the above attacks to fully invert left and right robotic arm, and

• Randomly scaling the commanded changes in position and rotation.

Most of these attacks had a noticeable impact on the Raven immediately upon launch.
In particular, if an attack
involved any changes to grasping state, even a modiﬁcation of a single packet had a profound impact on the FLS block
transfer task. Unsurprisingly, the least noticeable case was the attack affecting the positions of robot’s arms, as long as
the modiﬁed changes are within the allowed region. Once the modiﬁed changes required too large or too fast changes
in the positions of robotic arms, thus effectively requiring too high currents, the robot’s safety mechanism clipped the
currents, resulting in a noticeable slower robot motion.

We next analyze subject responses to these attacks. As in the delay attack, subjects were aware that attacks might
be mounted while they are executing the task, but they did not know when they were being targeted nor which attack
was being mounted against them. Detailed results, collected from ﬁve subjects, are depicted in Figure 5.

7

Figure 5: Subjective assessment results for surgeons’ intent modiﬁcation attack. The difﬁculties ranged from 0 (easy)
to 7 (hard).

Subjects were asked to evaluate the difﬁculties of: (i) reaching each of the three blocks, (ii) grabbing the blocks,
(iii) moving between the pick-up and put-down locations and (iv) performing the task as a whole, and difﬁculties
ranged from 0 (easy) to 7 (hard). The case of Subject 3 is quite peculiar, since it seems that subject did not notice
the attack. Based on the reported results, we conclude that other subjects did notice attacks occurring. However, all
of them carried the task to completion. Moreover, they were able to adjust to the attacks within 1-1.5 seconds time
period (even in the case of complete inversions of robot’s arms). Performing a random combination of the described
attacks did, however, result in several typical errors, such as dropping the block, moving the robotic arms outside of
the allowed workspace, or triggering E-stop, in order to avoid undesirable robot’s movements.

4.4 Hijacking Attacks

In hijacking attacks, an attacker assumes a role of a network observer, who can eavesdrop on packets between a
surgeon and a robot, without modifying them. After sufﬁcient reconnaissance, an attacker then inject new, malicious
packets into the network, in order to impact the surgical procedure. In our case, the reconnaissance phase required
only capturing the current packet sequence number, at which point we were able to take over control of the robot. We
consider several subgroups of hijacking attacks, namely (1) sequence number leading attack and (2) force reset.
Sequence Number Leading: Leveraging again prior knowledge about the structure of surgeon’s packet [17], we con-
duct the following sequence number leading attack: we ﬁrst read a single surgeon’s packet, and extracted the current
sequence number, seqN um, from it. We then added a random offset, rand, to the sequence number,
seqN um =
seqN um + rand, where the only requirement is that the offset needs to be less than 1000. We composed a new
seqN um and sent it to the Raven. At that point, we took over
(empty) surgeon packet with the new sequence number,
the control of the robot, since the robot attributed the large jump in sequence numbers to packet drops, and as long as
the system did not lose more than a second of data, the operation continued. From this point on (until the sequence
number wraps back to the beginning), our malicious leading packets were implemented and the surgeon’s packets
were ignored due to the difference in the sequence numbers, and we effectively took control over the teleoperated
procedure.
Force Reset: A interesting extension to the described sequence number leading attack, where we abused the way
packet drops are handled and sequence numbers are processed, is the force reset attack, we were abused the robot’s
inherent safety mechanism, preventing the robot’s arms from moving too fast or moving them outside of the allowed
area. Every time the Raven’s arms are commanded to move too fast, or go to an unsafe position, the robot’s software
imposes a system-wide halt, referred to as software E-stop. This is to protect both the electrical and mechanical
components of the robot, as well as to ensure an extra level of safety for patients, and human operators standing near
the robot.

˜

˜

By sending a leading packet to the robot, where at least one of the changes in position or rotation is too large, and
would cause the Raven to either go too fast or to go to a forbidden region, we are able to E-stop the robot. Moreover,
by repeatedly sending a malicious leading packet as the one just described, we are able to easily stop the robot from
ever being properly reset, thus effectively making a surgical procedure impossible.

5 Mitigation Strategies

While the attacks that we demonstrated primarily target speciﬁc vulnerabilities of the Raven II’s codebase, the iden-
tiﬁed exploits will have to be addressed for any teleoperated robotic system. There are several avenues for extended
development to help secure these systems from the identiﬁed attacks. The ﬁrst of these is maintaining a standard of
communication robustness. The most important feature here is to provide a layer of security for all information passing
between an operator and a teleoperated system.

The injection attacks we demonstrated were successful due to the fact that valid packets were accepted by the robot
from any source. For the Raven II, this was almost certainly a development oversight and is easy to ﬁx. However,

8

Difficulty of:No attackAttackAttackAttackAttackSubject 156767Subject 232543Subject 321325Subject 44576Subject 5565553352Reaching a blockPicking up a blockMoving a block No attackNo attackNo attack Completing the task74511272544we need to consider the larger problem of how to protect against a more sophisticated packet spooﬁng attacks that
also spoofs source IP and port information. One straightforward answer is to encrypt all data streams between the
two endpoints rendering all but the man-in-the middle attacks impossible. An advantage that teleoperated systems
have over many other network communication security problems is that there are likely dedicated staff at both ends
of the system. This means that there exists an out-of-band communication method, such as texting or talking on the
phone, to exchange a private piece of information that can be used to authenticate data streams. By encrypting and
authenticating data streams between the surgeon’s terminal and the robot, the ability of an attacker to initiate an attack
that comprises an intention modiﬁcation, manipulation, or hijack becomes severely hampered.

In order to investigate the cost of encrypting all data exchanged between an operator and the Raven, that is, all
data in the network, but not the side out-of-band communications, we used an intermediary computer with Intel Core2
Quad CPU processor running at 2.5GHz, to execute cryptographic tasks on. We acknowledge that the results obtained
through this analysis do not necessarily represent the exact results we would have observed had we encrypted all
packets closer to a surgeon and to the Raven, but for this analysis we only wanted to measure the added overhead of
cryptographic operations. We used the Advanced Encryption Standard (AES) encryption method [10], and considered
three different key lengths:128-bit, 192-bit and 256-bit. For all key lengths, no noticeable increase in CPU usage was
observed, compared to the baseline case where the intermediary computer only received packet and forwarded them
further. However, we observed an increase in memory usage, with the average increase of 3000KB. This increase
value will likely be acceptable for the majority of teleoperated systems. As expected, we did not observe a signiﬁcant
memory usage difference between different key lengths. Thus the use of encryption and authentication has low cost
and high beneﬁts to telerobotic surgery, mitigating many analyzed attacks.

6 Discussion

6.1

Implications of Presented Attacks

Intention modiﬁcation, manipulation and hijacking attacks pose not only technical challenges, but also considerable
risks to patients, surgeons and robots. A compromised surgical robot in the midst of even a routine operation could
potentially be used to inﬂict considerable internal wounds to a patient. Moreover, any extra procedure time, caused
by a compromised system, may have severe consequences on a procedure outcome, as well as a patient’s recovery.
Finally, compromised data and video streams could pose a risk to patient privacy. A surgeon’s actions, haptic feedback
and robot’s video feed may all contain private and protected patient-related information. For instance, the images in
the video stream may contain patient identifying features or may expose portions of the body that the patient would
prefer to keep private.

For surgeons, the possibility of surgery systems being compromised complicates the issue of legal responsibility
for their actions during procedures. In intention modiﬁcation or manipulation attacks, a surgeon does not have direct
access to a robot and can only operate based on the exchanged information. In a compromised system, for example,
haptic feedback may be modiﬁed to cause a surgeon to harm a patient. If one can claim that it was reasonable to expect
that the surgeon should have noticed that haptic feedback was modiﬁed, than the resulting malpractice lawsuit might
be strengthened.

Teleoperation security threats may have further implications for surgical robots themselves, since mounted attacks
may cause robots to break, or to damage other nearby equipment in the operating room. Finally, any security holes in
teleoperated systems present an existential threat to the ﬁeld of surgical robotics as a whole. Even if attacks are rare,
any harm caused by a surgical robot could undermine the public’s faith in these systems. From a patient perspective,
all the advantages in recovery or success rate that come from teleoperated surgery may not be worth the risk of having
a potentially hijacked machine operate on them.

6.2 Challenges and Recommendations

In addition to the stated implications, in these experiments we have encountered a few rather interesting challenges.
We present those next, starting with the E-stop feature.

E-stop feature: In a benign case, an E-stop is a mechanism designed to improve safety of patients, near-by
equipment and operators, and a robot. Our experiments have shown, however, that the existence of E-stop may actually
lead to decreased safety and security of a robot and people in the case of a compromised system. An attacker with
sufﬁcient knowledge of the system may easily abuse E-stop to render a robot unusable. For example, by occasionally

9

sending leading packets, where at least one of the changes is sufﬁciently large, an attacker may cause the system to
be permanently E-stopped. The challenge thus arises to reconcile the beneﬁts of E-stop in the benign case with its
possible negative consequences in the adversarial setting.

Packets processing rate: Another observed feature that can be turned into a security vulnerability is the fact that
teleoperated robots (including Raven II) typically execute command packets as soon as they are received. This means
that if a burst of packets is received, a robot may start moving very fast and in jerky motions. This may increase
the wear on a robot’s joints and motors, but more importantly, it may pose danger to a patient in surgery. And at the
moment, an attacker can deliberately cause control commands to be received in bursts. To protect against burst attacks,
we propose limiting a robot’s processing rate to a value sufﬁciently large to never be reached in benign scenarios, but
low enough to protect the robot and the patient from harm due to a ﬂood of commands.

Tension between real-time operation and security: In order to ensure fast enough operation, many teleoperated
systems resort to using datagram protocols. It is typically assumed that surgical tools’ motions are continuous, and that
transmission rates are sufﬁciently high, so that occasional benign packet losses have negligible effects on the overall
procedure. Yet, in a hostile setting, an attacker with sufﬁcient knowledge of the system may abuse the protocol,
and speciﬁcally drop certain packets in order to cause maximal damage (harm), while being cautious about his own
resources. Since datagram-based protocols are likely to remain the preferred choice for teleoperated systems, an
appropriate strategy to mitigate this type of threats will have to be found.

Tension between fast feedback and privacy: Many of the attacks we presented may be mitigated by encrypting
and authenticating all communication between a surgeon and a robot. Yet, due to sheer quantity of video data from the
robot, and the real-time operation requirement, encrypting the entire feedback channel may not be feasible. In this case
a trade-off between the real-time feedback and patient’s privacy arises. Based on the experimental results, however, we
propose that authenticating all packets should be the minimum required feature for any teleoperated robotic system
operating over a public network, so as to assure that packets from any other sources are never accepted as real.

Security update to ITP: We further consider the Interoperable telesurgery protocol (ITP). Some of the attacks
we have mounted could have been easily prevented had the packets’ sequence number processing been implemented
differently (for example, sequence number leading attack), and had the protocol had checksum checking implemented
(e.g., operator intent modiﬁcation attack). Sequence number processing and checksum checking are the minimal
changes needed to increase security. Moreover, implementing these changes would not impact the interoperability.

Monitoring link and network status: The presented hijacking attack relied on the fact that the Raven II ignores
all out-of-order packets and only acts upon those packets that have a higher sequence number than the latest received
packet. This essentially means that in addition to a surgeon’s commands, an attacker can create one or more malicious
packet streams and send those to a robot, and the robot will always execute packets with a higher sequence number.
In order to prevent these attacks, we propose that a mechanism to monitor link and network status should be used.
Such a mechanism should be able to notice that there are two or more streams of data, or that the number of out-or-
order packets has increased, and should rise an alarm. A more advanced version of this mechanism could also prevent
possible denial-of-service attacks that cannot be prevented though the use of the existing cryptographic methods.
These attacks saturate network resources and cause packets to be delayed or dropped.

7 Conclusion

In conclusion, the purpose of this paper is to increase awareness of security issues in cyber-physical systems. In the
Raven II, we were able to breach several concerning elements of the system over a wide attack surface, and some
extremely efﬁciently (with a single packet). Yet, some of these attacks could have easily been prevented by using
well-established and readily-available security mechanisms, including encryption and authentication. Our experi-
mental results show that incorporating these mechanisms into a telerobotic surgery system with an average-quality
computer increases memory usage by only about 3000KB, while maintaining the system’s real-time responsiveness.
This increase is likely to be acceptable in telerobotic surgery.

We caution, however, that tensions between cyber security, safety and usability requirements of teleoperated
robotic surgery will render many existing security solutions infeasible for telerobotic surgery, thus requiring new
security approaches to be developed. For example, encrypting and authenticating video feedback will likely cause
an unacceptable decrease in packet throughput rate. Finally, we believe that presented concerns are not unique to
teleoperated surgery, but are common to all teleoperated robots. Because of the wide variety of physical and digital
capabilities these systems wield, telerobotic security needs to become front-and-center.

10

ACKNOWLEDGMENT

The authors thank UW Electrical Engineering undergraduate students, F. Ibrahim, L. Nguyen, and X. Ouyang for their help with
the experimental part of this project. We also gratefully acknowledge AppliedDexterity, and our colleagues, L. Cheng, D. Hu, K.
Huang and A. Lewis, for their help with the Raven II.

References

[1] Applied Dexterity (last accessed: May 14, 2014).

[2] The Health Insurance Portability and Accountability Act of 1996 (HIPPA) Privacy and Security Rules,” U.S. Department of Health and Human Services (last

accessed: May 14, 2014).

[3]

IRF Statistical News - World Robotics News (last accessed: September 27, 2014).

[4] C.L. Abad and R.I. Bonilla. An Analysis on the Schemes for Detecting and Preventing ARP Cache Poisoning Attacks.

In in the Proceedings of the 27th

International Conference on Distributed Computing Systems Workshops. IEEE, 2007.

[5] S. Amin, A.A. C´ardenas, and S.S Sastry. Safe and Secure Networked Control Systems Under Denial-of-Service Attacks. In Hybrid Systems: Computation and

Control, pages 31–45. Springer, 2009.

[6] P. Biondi. Scapy documentation, 2010.

[7] A.A. C´ardenas, S. Amin, and S.S. Sastry. Research Challenges for the Security of Control Systems. In the Proceedings of the 3rd Conference on Hot Topics in

Security, 2008.

[8] S. Checkoway, D. McCoy, B. Kantor, D. Anderson, H. Shacham, S. Savage, K. Koscher, A. Czeskis, F. Roesner, and T. Kohno. Comprehensive Experimental

Analyses of Automotive Attack Surfaces. In the Proceedings of the USENIX Security Symposium, 2011.

[9] K. Coble, W. Wang, B. Chu, and Z. Li. Secure Software Attestation for Military Telesurgical Robot Systems. In the Proceedings of the Miitary Communications

Conference, pages 965–970. IEEE, 2010.

[10] J. Daemen and V. Rijmen. The Design of Rijndael: AES-the Advanced Encryption Standard. Springer, 2002.

[11] N. Falliere, L.O. Murchu, and E. Chien. W32. Stuxnet Dossier. White paper, Symantec Corp., Security Response, 2011.

[12] S. Gollakota, H. Hassanieh, B. Ransford, D. Katabi, and K. Fu. They Can Hear Your Heartbeats: Non-Invasive Security for Implantable Medical Devices. ACM

SIGCOMM Computer Communication Review, 41(4):2–13, 2011.

[13] D. Halperin, T.S. Heydt-Benjamin, B. Ransford, S.S. Clark, B. Defend, W. Morgan, K. Fu, T. Kohno, and W. Maisel. Pacemakers and Implantable Cardiac

Deﬁbrillators: Software Radio Attacks and Zero-power Defenses. In IEEE Symposium on Security and Privacy, pages 129–142. IEEE, 2008.

[14] B. Hannaford, J. Rosen, D.W. Friedman, H. King, P. Roan, L. Cheng, D. Glozman, J. Ma, S.N. Kosari, and L. White. Raven-II: An Open Platform for Surgical

Robotics Research. IEEE Transactions on Biomedical Engineering, 60(4):954–959, 2013.

[15] B.M. Harnett, C.R. Doarn, J. Rosen, B. Hannaford, and T.J. Broderick. Evaluation of unmanned airborne vehicles and mobile robotic telesurgery in an extreme

environment. Telemedicine and e-Health, 14(6):539–544, 2008.

[16] J.C. Hu, X. Gu, S.R. Lipsitz, M.J. Barry, A.V. D’Amico, A.C. Weinberg, and N.L. Keating. Comparative Effectiveness of Minimally Invasive vs Open Radical

Prostatectomy. The Journal of the American Medical Association, 302(14):1557–1564, 2009.

[17] H. H. King, K. Tadano, R. Donlin, D. Friedman, M.J.H. Lum, V. Asch, C. Wang, K. Kawashima, and B. Hannaford. Preliminary Protocol for Interoperable

Telesurgery. In the Proceedings of the International Conference on Advanced Robotics, pages 1–6. IEEE, 2009.

[18] K. Koscher, A. Czeskis, F. Roesner, S. Patel, T. Kohno, S. Checkoway, D. McCoy, B. Kantor, D. Anderson, and H. Shacham. Experimental Security Analysis of a

Modern Automobile. In the Proceedings of the IEEE Symposium on Security and Privacy, pages 447–462. IEEE, 2010.

[19] G.S. Lee and B. Thuraisingham. Cyberphysical Systems Security Applied to Telesurgical Robotics. Computer Standards & Interfaces, 34(1):225–229, 2012.

[20] M.J.H. Lum, D.C.W. Friedman, H.H. King, T. Broderick, M.N. Sinanan, J. Rosen, and B. Hannaford. Field operation of a surgical robot via airborne wireless

radio link. In the Proceedings of the IEEE International Conference on Field and Service Robotics, 2007.

[21] M.J.H. Lum, D.C.W. Friedman, G. Sankaranarayanan, H.H. King, A. Wright, M. Sinanan, T. Lendvay, J. Rosen, and B. Hannaford. Objective assessment of

telesurgical robot systems: Telerobotic FLS. Studies in Health Technology and Informatics, 132:260–263, 2008.

[22] M.J.H. Lum, J. Rosen, T.S. Lendvay, M.N. Sinanan, and B. Hannaford. Effect of time delay on telesurgical performance.

In the Proceeding of the IEEE

International Conference on Robotics and Automation, pages 4246–4252, 2009.

[23] L. Makris, N. Argiriou, and M.G. Strintzis. Network and Data Security Design for Telemedicine Applications. Informatics for Health and Social Care, 22(2):133–

142, 1997.

[24] Y. Mo and B. Sinopoli. Secure Control Against Replay Attacks. In the Proceedings of the 47th Annual Allerton Conference on Communication, Control, and

Computing, pages 911–918. IEEE, 2009.

[25] M. Quigley, K. Conley, B. Gerkey, J. Faust, T. Foote, J. Leibs, R. Wheeler, and A.Y. Ng. ROS: An Open-source Robot Operating System. In the Proceedings of

ICRA Workshop on Open Source Software, volume 3, 2009.

[26] J. Rosen and B. Hannaford. Doc at a Distance. IEEE Spectrum, 43(10):34–39, 2006.

[27] M.E. Tozal, Y. Wang, E. Al-Shaer, K. Sarac, B. Thuraisingham, and B.-T. Chu. Adaptive Information Coding for Secure and Reliable Wireless Telesurgery

Communications. Mobile Networks and Applications, 18(5):697–711, 2013.

[28] F. Wozak, T. Schabetsberger, and E. Ammmenwerth. End-to-end Security in Telemedical Networks–A Practical Guideline. International Journal of Medical

Informatics, 76(5):484–490, 2007.

[29] Y. Yang, Z. Wang, F. Bao, and R.H. Deng. Secure the Image-based Simulated Telesurgery System. In the Proceedings of the 2003 International Symposium on

Circuits and Systems, volume 2, pages II–596. IEEE, 2003.

11

