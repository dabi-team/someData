Power Grid Defense Against Malicious Cascading Failure

Paulo Shakarian
Dept. EECS and
Network Science Center
U.S. Military Academy
West Point, NY, 10996
paulo[at]shakarian.net

Hansheng Lei
Dept. EECS and
Network Science Center
U.S. Military Academy
West Point, NY, 10996
hansheng.lei[at]usma.edu

Roy Lindelauf
Netherlands Defence
Academy
Faculty of Military Science
Military Operational Art and
Science
rha.lindelauf.01[at]nlda.nl

4
1
0
2

n
a
J

6

]

R
C
.
s
c
[

1
v
6
8
0
1
.
1
0
4
1
:
v
i
X
r
a

ABSTRACT
An adversary looking to disrupt a power grid may look
to target certain substations and sources of power genera-
tion to initiate a cascading failure that maximizes the num-
ber of customers without electricity. This is particularly
an important concern when the enemy has the capability
to launch cyber-attacks as practical concerns (i.e. avoid-
ing disruption of service, presence of legacy systems, etc.)
may hinder security. Hence, a defender can harden the se-
curity posture at certain power stations but may lack the
time and resources to do this for the entire power grid. We
model a power grid as a graph and introduce the cascad-
ing failure game in which both the defender and attacker
choose a subset of power stations such as to minimize (max-
imize) the number of consumers having access to producers
of power. We formalize problems for identifying both mixed
and deterministic strategies for both players, prove com-
plexity results under a variety of diﬀerent scenarios, iden-
tify tractable cases, and develop algorithms for these prob-
lems. We also perform an experimental evaluation of the
model and game on a real-world power grid network. Em-
pirically, we noted that the game favors the attacker as he
beneﬁts more from increased resources than the defender.
Further, the minimax defense produces roughly the same
expected payoﬀ as an easy-to-compute deterministic load
based (DLB) defense when played against a minimax attack
strategy. However, DLB performs more poorly than mini-
max defense when faced with the attacker’s best response to
DLB. This is likely due to the presence of low-load yet high-
payoﬀ nodes, which we also found in our empirical analysis.

Categories and Subject Descriptors
I.2.11 [Artiﬁcial Intelligence]: Distributed Artiﬁcial In-
telligence

General Terms
Algorithms Security

Keywords
power grid defense, game theory, complex networks

1.

INTRODUCTION

Rapid cascading failure in a power grid caused by a suc-
cession of overloading lines can lead to very large outages,
as observed in the United States in 2003 [1]. Studies on cas-
cading failure [7, 8, 16] have illustrated that such a failure
can be initiated with only a small number of initial node fail-
ures. Further, power grid infrastructure is often particularly
vulnerable with respect to cyber-security due to a variety of
issues, including the use of legacy and proprietary computer
hardware and software [26].

In this paper, we extend the work on cascading failure
models to a two-player game where an attacker attempts to
create a cascade that maximizes the number of customers
without power while the defender defends key nodes to avoid
a major outage. In Section 2, we introduce an extension to
the failure model of [8] to not only consider the attacker and
defender, but also the diﬀerent types of nodes in the power
grid (i.e. power generation vs. power consumers). In Sec-
tion 3, we explore the computational complexity of ﬁnding
deterministic best-response strategies for the attacker and
defender under several diﬀerent scenarios depending on the
relative number of resources each player has and whether
the opponent has a deterministic or mixed strategy. Here we
found that, in general, these problems are NP-hard, though
we do identify some tractable cases.
In Section 4, we ex-
plore heuristic algorithms for ﬁnding determinsitic “best re-
sponses” as well as minimax mixed strategies. We introduce
a “high-load” strategy for defense (based on the observa-
tions of [8]), greedy heuristics for deterministic strategies,
and a double-oracle approach based on [15] for ﬁnding a
mixed strategy. In Section 5 we perform experiments on a
real-world dataset of a power grid [20] and ﬁnd that this
game seems to favor the attacker as he beneﬁts more from
increased resources than the defender. Further, our experi-
ments revealed that the minimax defense produces roughly
the same expected payoﬀ as an easy-to-compute determin-
istic load based (DLB) defense when played against a min-
imax attack strategy, though the load based defense does
more poorly than minimax when faced with the attacker’s
best response to DLB. This is likely due to the presence
of low-load yet high-payoﬀ nodes, which we also found in
our empirical analysis of the model. Finally, related work is
discussed in Section 6.

 
 
 
 
 
 
2. TECHNICAL PRELIMINARIES

Consider a power-grid network modeled as an undirected
graph G = (V, E). Let Vsrc, Vld ⊆ V be source (producers of
power) and load (consumers of power) on the network. We
shall use the notation discVld,Vsrc (G) to denote the number
of nodes in Vld which are not connected to any node in Vsrc
in graph G. Let G be the set of all subgraphs of G. For
a given node i, let NG(i) be the set of nodes in Vsrc − {i}
that are closest to that node (based on path length in G).
From this, we deﬁne edge load (similar to the idea of edge
betweenness [25]).

Definition 2.1

(Edge Load). Given edge ij ∈ E, the

edge load, loadG(ij) is deﬁned as follows:

loadG(ij) =

(cid:88)

(cid:88)

t∈Vld

s∈NG(t)

σG(s, t|ij)
|NG(t)| σG(s, t)

,

where σG(s, t) is the number of shortest paths between s, t ∈
V and σG(s, t|ij) is the subset of these paths that pass through
edge ij ∈ E.

Starting from initial network G0 = (V0, E0) we use cij to
denote the capacity edge ij ∈ E0. In a real-world setting,
we would expect to have this information. However, in this
paper, we use the following proxy (similar to [8]).

cij(G0) = (1 + α)loadG0 (ij)

where α is a non-negative real that speciﬁes the excess ca-
pacity available on that line. We shall refer to α as the
capacity margin. We assume that an edge ij ∈ E fails in
G = (V, E), with E ⊂ E0, if loadG(ij) > cij(G0). Once
nodes (and adjacent edges) in V0 are removed from G0, this
results in a change of shortest paths between sources and
loads, hence more edges will potentially fail. This cascading
power failure is modeled by a “failure” operator denoted with
F (based on the failure model of [8] - though we note that
our model is a new contribution due to the consideration of
source and load nodes) that maps networks to networks. We
deﬁne it as follows.

Definition 2.2

(Failure Operator). The failure op-

erator, F : G → G, is deﬁned as follows:

attacker is unable to destroy them - though these nodes can
be taken oﬄine as a result of the cascading failure1. The at-
tacker can destroy ka nodes while the defender can harden
kd nodes. Thus the strategy space of both the attacker and
defender consists of all subsets Va, Vd ⊆ V of size |Va| ≤ ka
(|Vd| ≤ kd respectively). We denote these strategy spaces
by AT K (DEF respectively), i.e., if we allow the attacker
to consider all strategies of size ka or less we have:

AT K = {S ∈ 2V : |S| ≤ ka}

We now have all of the components to deﬁne the payoﬀ

function.

Definition 2.3

(Payoff Function). Given initial net-

work G = (V, E) with edge capacities cij(G), attack (defend)
strategy Va(Vd), the payoﬀ function is deﬁned by

pG(Va, Vd) = discVld,Vsrc (F∗((V − (Va − Vd), E)).

Now, in reality, the defender will have real-world limi-
tations on the number of nodes (i.e. substations) he may
harden. For instance, with regard to smart grid defense, ap-
plying the most up-to-date patches on all systems may not
be realistic as it could potentially require system down-time -
aﬀecting customer service. Further, it would also likely not
make sense for the defender to only harden certain nodes
and ignore others. Hence, it is reasonable to consider a sit-
uation where the defender can only harden certain nodes
against attack (and may do so probabilistically - i.e. ap-
plying hardware or software updates according to a sched-
ule). Therefore, we study mixed strategies. Such strate-
gies will be speciﬁed by probability distributions Pra, Prd
for the attacker and defender respectively. We shall denote
the number of strategies assigned a non-zero probability as
|Pra|, |Prd|. We can deﬁne expected payoﬀ as follows.

Definition 2.4

(Expected Payoff). Let Pra, Prd be
probability distributions over all subsets of V of sizes ka
(resp. kd) or less. These probability distributions correspond
to a mixed strategy for the attacker and defender respectively.
Hence, given such probability distributions, the expected pay-
oﬀ can be computed as follows:

F((V, E)) = (V, {ij ∈ E|load(V,E)(ij) ≤ cij(G0)})

ExP(Pra, Prd) =

Intuitively, one application of the failure operator removes
all edges that have exceeded their maximum capacity. We
can deﬁne multiple applications of this operator as follows:

Fi(G) =

(cid:40)

G
F(Fi−1(G)) otherwise

if i = 0

Clearly, there must exist a ﬁxed point that is reached in
no more than |E| + 1 applications of F. Hence, we shall use
the following notation:

F∗(G) = Fi(G) s.t. Fi(G) = Fi+1(G)

We now consider two agents: an attacker and a defender.
The attacker’s strategy is to destroy nodes (and their ad-
jacent edges) in an eﬀort to cause a cascading failure that
maximizes the number of load nodes (Vld) that are discon-
nected from all source nodes (Vsrc). Meanwhile, the de-
fender’s strategy is to harden certain nodes such that the

(cid:88)

Va∈2V

Pra(Va)

(cid:88)

Vd∈2V

Prd(Vd)pG(Va, Vd)

In this work our goal is to ﬁnd the minimax strategy for
the defender - that is the mixed strategy for the defender
that minimizes the attacker’s maximum expected payoﬀ -
as well as deterministic “best responses” for both players
given the other’s strategy.

3. COMPUTATIONAL COMPLEXITY

In this section, we analyze the computational complexity
of determining the best response for each of the agents to
a strategy of its opponent. First, we shall discuss the case
for ﬁnding a deterministic strategy for the defender and at-
tacker. Then we shall explore the computational complexity
of ﬁnding a mixed strategy. We summarize our complexity
results in Table 3.

1Note that this would likely be the case where the attack
and defense occurs in cyber-space, while the cascade occurs
in the physical world.

Opponent Strategy
Mixed w. 1 resource

Det. w. fewer resources

Det. w. greater resources

Attacker
NP-Compl.
Thm. 3
NP-Compl.
Thm. 3

Defender
PTIME
Prop. 3.2
PTIME
Prop. 3.1
NP-Compl. NP-Compl.

Thm. 3

Thm. 1

Mixed w. fewer resources

NP-Compl. NP-Compl.

Thm. 3

Thm. 2

Mixed w. greater resources NP-Compl. NP-Compl.

Thm. 3

Thm. 1

Table 1: Complexity Results for Finding a Deter-
ministic Best Response

We frame the formal combinatorial problem of ﬁnding the

best-response for the defender as follows:

Grid-Defend Deterministic Best Response (GD-DBR)
INPUT: Network G = (V, E), attacker mixed strategy Pra
(where each option is of size no greater than ka), natural
number kd, real numbers X, α
OUTPUT: “Yes” if there exists a set Vd ⊆ V s.t. |Vd| ≤ kd
and (cid:80)
Va∈AT K Pra(Va)pG(Va, Vd) ≤ X and “no” otherwise.

We shall study this case under several conditions. The
ﬁrst, and easiest case is when Pra = 1 (the attacker uses a
deterministic strategy) and ka ≤ kd.

Proposition 3.1. When ka ≤ kd and |Pra| = 1 then

GD-DBR is solvable in polynomial time.

Proof. As the attacker plays only one strategy and the
defender can defend at least as many nodes as are being
attacked, the defender simply defends all the nodes in the
attacker’s strategy.

However, even with |Pra| = 1, the problem becomes NP-

hard in the case where ka > kd.

Theorem 1. When ka > kd then GD-DBR is NP-complete,

even when |Pra| = 1 and X is an integer.

Proof. Clearly, checking if a given deterministic defender
strategy Vd meets the requirements of the “output” of GD-
DBR can be completed in polynomial-time, providing mem-
bership in the class NP.

For NP-hardness consider the known NP-hard “set cover”
problem [11] that takes as input a natural number k, set
of elements S = {s1, . . . , sn}, family of subsets of S, H =
{h1, . . . , hm} and returns “yes” if there is a k-sized (or smaller)
subset of H s.t. their union is equal to S. We can embed
Set Cover into an instance of GD-DBR in polynomial time
with the following embedding: set ka = |H|, kd = k, X = 0,
α = |H| + |S|, create G = (V, E) as follows:

• For each h ∈ H create a node vh and for each s ∈ S create

node vs

• If s ∈ h, create edge (vh, vs), for each ij ∈ E
• Set Vsrc = {vh|h ∈ H}, Vld = {vs|s ∈ S}, Va = V − Vld

Suppose, by way of contradiction (BWOC), that there is
a “yes” answer to Set Cover but a “no” answer to GD-DBR.
Consider set H (cid:48) a subset of H that is the certiﬁcate for Set
Cover and the corresponding set V (cid:48) = {vh|h ∈ H (cid:48)} in the

instance of GD-DBR. Suppose the defender utilizes this as
a strategy. The attacker then eﬀectively attacks the set V −
Vld −V (cid:48). Note that as the graph is bi-bipartite, this does not
cause any cascading failure. By the construction, each load
node must be connected to a source node, hence the number
of oﬄine load nodes is X. This gives us a contradiction.

Suppose, BWOC, that there is a “yes” answer to GD-DBR
but a “no” answer to the corresponding instance of Set Cover.
Let V (cid:48) be the certiﬁcate for GD-DBR. We note that any el-
ement of Vld ∩ V (cid:48) in V (cid:48) can be replaced by a neighboring
node from Vsrc without changing the size of this set and that
such a set would still allow for all load nodes to remain on-
line, let V (cid:48)(cid:48) be this new set. Consider the set {h|vh ∈ V (cid:48)(cid:48)}.
By the contra-positive of the claim, this cannot be a cover
of all elements of S. However, this would also imply that
there is some element vs ∈ Vld that is not connected to V (cid:48)(cid:48)
meaning that it fails (as the attacker successfully destroys
all its neighbors). This means that the adversary has a pay-
oﬀ greater than 0 (which is what X was set to) – hence a
contradiction.

Hence, the presence of a more advantageous attacker is
a source of complexity. The next question would be if the
attacker’s behavior, i.e. deterministic vs. non-deterministic,
also aﬀects the complexity of the problem, even if the de-
fender has the advantage. First, let us examine the case
where the attacker has a mixed strategy with ka = 1.

Proposition 3.2. When ka = 1 then GD-DBR is solv-
able in polynomial time (w.r.t. |Pra|), even when |Pra| ≥ 0.
Proof. In this case, we can re-write the payoﬀ function
as pG({v}, Vd) = 0 if v ∈ Vd and pG({v}, Vd) = pG({v}, ∅)
otherwise. Let V (cid:48) = ∪{Va ∈ AT K|Pra(Va) > 0}. Note
that each element of V (cid:48) is also a strategy the attacker plays
with a non-zero probability (as the attacker only plays sin-
gletons). Hence, the expected payoﬀ can be re-written as
(cid:80)
Pra({v})pG({v}, ∅). Therefore, the best a de-
fender can do is defend the top kd nodes in V (cid:48) where
Pra({v})pG({v}, ∅) is the greatest - which can be easily com-
puted in polynomial time and allows us to determine the
answer to GD-DBR.

v∈V (cid:48)−Vd

However, if the defender is playing a mixed strategy with

ka > 1, then the problem again becomes NP-complete.

Theorem 2. When |Pra| > 1 and ka > 1, GD-DBR is

NP-complete, even when kd > ka and X is an integer.

Proof. NP-completeness mirrors that of Theorem 1. For
NP-hardness, we again consider a reduction from set-cover
(deﬁned in the proof of Theorem 1. The embedding can
again be performed in polynomial time as follows: set ka =
maxs∈S |{h|s ∈ h}|, set kd = k, X = 0, α = |H| + |S|,
create G = (V, E), Vsrc, and Vld as per the construction in
Theorem 1. We then set up the mixed strategy as follows:
for each s ∈ S, let V s

a = {h|s ∈ h} and Pra(V s

a ) = 1/|S|.

Suppose, BWOC, that there is a “yes” answer to set cover
and a “no” answer to the instance of GD-DBR. Consider
set cover solution H ∗ and set Vd = {vh|h ∈ H ∗}. Note
that Vd meets the cardinality requirement. Note that by
the construction, a source node becomes disconnected only
if all of the load nodes connected to it are attacked, hence
there is some node in the set Vld that is totally disconnected
under at least one attacker strategy - let vs be this node.

However, as set H ∗ covers S, then regardless of the attacker
strategy, there is always some node vh that is connected and
never attacked (giving the attacker a payoﬀ of zero) - hence
a contradiction.

Suppose, BWOC, that there is a “yes” answer to GD-DBR
and a “no” answer to the instance of set cover. Consider GD-
DBR solution V (cid:48). We note that any element of Vld ∩ V (cid:48) in
V (cid:48) can be replaced by a neighboring node from Vsrc without
changing the size of this set and that such a set would still
allow for all load nodes to remain online, let V (cid:48)(cid:48) be this
new set. Consider the set H ∗ = {h|vh ∈ V (cid:48)(cid:48)}. Note that
|H ∗| ≤ k. By the contra-positive, there must be at least
one element of S not covered by H ∗. Let node vs be a node
associated with uncovered element s. As GD-DBR returned
“yes” then there is no attacker strategy where vs becomes
disconnected from some node in Vsrc. As attack strategy
V s
a includes all nodes that are connected to vs, then at least
one of these nodes must be included in V (cid:48)(cid:48). Therefore, for
every node vs ∈ Vld there is some node vh ∈ Vld ∩ V (cid:48)(cid:48) that is
connected to it, which means, by the construction, that H ∗
must cover all elements of S - a contradiction.

We now frame the formal problem for ﬁnding a determin-

istic best-response for the attacker below.

Grid-Attack Deterministic Best Response (GA-DBR)
INPUT: Network G = (V, E), defender mixed strategy Prd
(where each option is of size no greater than kd), natural
number ka, real numbers X, α
OUTPUT: “Yes” if there exists a set Va ⊆ V s.t. |Va| ≤ ka
and (cid:80)
Vd∈DEF Prd(Vd)pG(Va, Vd) ≥ X and “no” otherwise.

In the case of ka = 1, this problem is solvable in poly-
nomial time: simply consider each v ∈ V . The attacker
computes (cid:80)
Vd∈DEF Prd(Vd)pG({v}, Vd) until one is found
that causes the payoﬀ to exceed or be equal to X. However,
for strategies of larger size, the problem becomes NP-hard,
regardless of the size of the defender strategy.

Fact 3.1. When ka = 1, GA-DBR is solvable in polyno-

mial time (w.r.t. |Prd|).

Theorem 3. GA-DBR is NP-complete.

Proof. Clearly, a certiﬁcate consisting of a set Va ⊆ V
can be veriﬁed in polynomial time, giving us membership in
NP. For NP-hardness consider the known NP-hard “vertex
cover” problem [11] that takes as input a graph G(cid:48) = (V (cid:48), E(cid:48))
(with no self-loops) and natural number k and returns “yes”
iﬀ there is a set of k or fewer vertices that are adjacent
to each edge in E. We can embed vertex cover into an
instance of GD-DBR in polynomial time with the following
embedding: set ka = k, kd = 0, Vd = ∅, X = |V (cid:48)|, α = |E|,
G = G(cid:48), and Vsrc = Vld = V (cid:48).

Suppose, BWOC, the above problem instance provides a
“yes” answer to the vertex cover problem but a “no” answer
to GA-DBR. Let V (cid:48)(cid:48) be a vertex cover of size k or less for G(cid:48).
Consider the corresponding set of vertices in G (we shall call
this V ∗). Note that |V ∗| ≤ ka. As an attacker attacking V ∗
disconnects those nodes from the network, all edges adjacent
to V ∗ fail. As V ∗ is a vertex cover for G, this means that
there are no edges in the graph once V ∗ is removed. Hence,
no load node is connected to any source node - giving the
attacker a payoﬀ of at least X – hence a contradiction.

Suppose, BWOC, the above problem instance provides a
“yes” answer to GA-DBR but a “no” answer to the vertex
cover problem. Let Va be the set of nodes the attacker at-
tacks in GA-DBR. As α = |E| and as Vsrc = V , nodes only
fail in a cascade if they are either targeted by the attacker
or become totally disconnected. Further, as X = |V |, all
nodes in G are either in Va or disconnected - meaning that
Va must be a vertex cover of size ka or less. As ka = k we
have a contradiction.

Due to the use of covering problems for the complexity
results in Theorems 1, 2, and 3, it may seem reasonable to
frame the problem as a sub- or super- modularity optimiza-
tion where the objective function is monotonic. However,
here we show (unfortunately) that these properties do not
hold for either player. First, we shall make statements re-
garding the monotonicity of the payoﬀ function.

Proposition 3.3. Iﬀ ∀V ∗

then ∀V ∗

a , Vd ⊆ V (cid:48)

d: pG(V ∗

d , Va ⊆ V (cid:48)
a , Vd) ≥ pG(V ∗

a: pG(Va, V ∗
d).

a , V (cid:48)

d ) ≤ pG(V (cid:48)

a, V ∗
d )

The idea of submodularity can be thought of as “dimin-
ishing returns.” Given a set of elements S and a function
f : 2S → (cid:60)+, we say a f is submodular if for any sets
S1 ⊆ S2 and element s /∈ S2, we have the following relation-
ship:

f (S1 ∪ {s}) − F (S1) ≥ f (S2 ∪ {s}) − F (S2)

A complementary idea of supermodularity is also often
studied - in this case the inequality is reversed. Unfortu-
nately, when we ﬁx the strategy for the defender, the at-
tacker strategy is neither submodular nor supermodular -
making the dynamics of this model signiﬁcantly diﬀerent
from others (i.e. [24]). Let consider strategies Va, Vd where
Va causes some load node v /∈ (Va ∪ Vd) ∩ Vld to disconnect
and any node the strategy {v} causes to disconnect will also
become disconnected with strategy Va (such a case is easy to
contrive, particularly with a bi-partite network). Therefore,
we get the following relationship:

pG(Va ∪ {v}, Vd) − pG(Va, Vd) < pG({v}, Vd) − pG(∅, Vd)

This arises from the fact that the left-hand side of the above
equation becomes zero and the right hand side of the equa-
tion is equal to pG({v}, Vd) which must be at least one. Now
consider another example. Suppose we have a simple V-
shaped network of three nodes. The angle of the V is a load
node, while the other two nodes are source nodes. With
α = 1, the load node receives power if at least one of the
source nodes is connected to it. However, it does not require
both. Let Va be a strategy consisting of one source node and
v be the other source node, and Vd consist of the load node.
From this, we have the following relationship:

pG(Va ∪ {v}, Vd) − pG(Va, Vd) > pG({v}, Vd) − pG(∅, Vd)

In this case, the right-hand side becomes zero while the left
hand side becomes one. This leads us to the following fact:

Fact 3.2. When Vd is ﬁxed, pG is neither submodular nor

supermodular.

Now let us consider when we ﬁx the attacker’s strategy.
If the payoﬀ is submodular when the attacker’s strategy is
ﬁxed, then we have the following for Vd ⊆ V (cid:48)
d if

d and v /∈ V (cid:48)

the payoﬀ subtracted from the number of nodes is submod-
ular:
pG(Va, V (cid:48)

d ∪ {v}) − pG(Va, V (cid:48)

d) ≥ pG(Va, Vd ∪ {v}) − pG(Va, Vd)

This is equivalent to the following:

pG(Va − (V (cid:48)

d ∪ {v}), ∅) − pG(Va − V (cid:48)

d, ∅) ≥

pG(Va − (Vd ∪ {v}), ∅) − pG(Va − Vd, ∅)

d ∪ {v}) and V (cid:48)(cid:48)

Now let V (cid:48)
Clearly V (cid:48)(cid:48)
pG(V (cid:48)
pG(V (cid:48)

a = Va − (V (cid:48)
a ⊇ V (cid:48)
a, ∅) − pG(V (cid:48)
a ∪ {v}, ∅) − pG(V (cid:48)

a and v /∈ V (cid:48)(cid:48)
a ∪ {v}, ∅) ≥ pG(V (cid:48)(cid:48)
a, ∅) ≤ pG(V (cid:48)(cid:48)

a = V (cid:48)
a . Now we get the following:

a ∪ (V (cid:48)

d − Vd).

a , ∅) − pG(V (cid:48)(cid:48)
a ∪ {v}, ∅) − pG(V (cid:48)(cid:48)

a ∪ {v}, ∅)
a , ∅)

Hence, submodualrity of the payoﬀ function when the at-
tacker’s strategy is ﬁxed would give us supermodualrity of
the payoﬀ function when the defender’s strategy is ﬁxed at
the empty set. However, this clearly violates Fact 3.2 and
gives rise to the following:

Fact 3.3. When Va is ﬁxed, pG is neither submodular

nor supermodular.

4. ALGORITHMS

In this section, we present heuristic algorithms for ﬁnding
the deterministic best response of each player as the results
of the previous section generally preclude a polynomial time
algorithm for an exact solution. We ﬁrst introduce a version
of a “high load” strategy for the defender based on the ideas
of [8]. Then we introduce a greedy heuristic for each player.
This is followed by our approach for ﬁnding mixed strategies
based on the double-oracle algorithm of [15].

Hi-Load Node Approach. In [8], the authors study “high
load” nodes: nodes through which the greatest number of
shortest paths pass. They show that attacks on these nodes
tend to initiate cascading failures – suggesting that they
should be a priority for defense. We formalize the deﬁnition
of nodal load in our framework (essentially an extended def-
inition of node betweenness [25]) by extending our function
loadG for nodes as follows.

Definition 4.1

(Nodal Load). For a given node, the
nodal load is deﬁned as the sum of the fraction of shortest
paths for each pair that pass through that node. Formally:

loadG(i) =

(cid:88)

s∈Vsrc,t∈Vld

σG(s, t|i)
σG(s, t)

,

where σG(s, t|i) is the number of shortest paths between s, t ∈
V that pass through node i.

Hence, we shall refer to the Deterministic Load-Based or
DLB strategy for the defender as one in which he determin-
istically protects the kd nodes with the greatest load. We
note that this is not necessarily a “best response” but the in-
tuition is that defense will occur at nodes that are perceived
to be critical to the adversary. This intuition is similar to
that of the “most vital arc” idea seen in other failure model
games [2, 21].

Greedy Heuristics for Finding Deterministic Strate-
gies. Here we present a simple greedy heuristic to ﬁnd the
defender’s best-response (GREEDY DEFENDER RESP). The

analogous heuristic for the attacker is not shown due to space
constraints, but we shall refer to it as
GREEDY ATTACKER RESP. We note that while we do not
make general approximation guarantees (due to the results
in Section 3), we note that by Proposition 3.3, that nodes
added in step 18 will always cause an increase in payoﬀ to the
defender (and in the analogous greedy approach for the at-
tacker, this holds true as well). Further, by Proposition 3.2,
when ka = 1, we can be sure that GREEDY DEFENDER RESP
returns an exact solution, even when the attacker has a
mixed strategy. Unfortunately, by Theorem 3, the same can-
not be said if the greedy heuristic is used for the attacker’s
best response.

Algorithm 1 GREEDY DEFENDER RESP
Require: Mixed strategy Pra, Natural number kd
Ensure: Set of nodes Vd

1: Vd = ∅
2: Let AT K be the set of strategies associated with Pra
3: Set f lag = True, p∗ = −∞
4: while |Vd| ≤ kd and f lag and p∗ < 0 do
5:
Va∈AT K Prd(Va)pG(Va, Vd)
6:

p∗ = − (cid:80)
curBest = null, curBestScore = 0, haveV alidScore =
False
for i ∈ V − Vd do

curScore = p∗ − (cid:80)
if curScore ≥ curBestScore then

Va∈AT K Prd(Va)pG(Va, Vd ∪ {i})

7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: end while
21: return Vd.

end if

else

curBest = i
curBestScore = curScore
haveV alidScore = True

end if
end for
if haveV alidScore = False then

f lag = False

Vd = Vd ∪ {curBest}

|Vld| , i.e., x ≥ ka(1 − kd

Finding Mixed Strategies. If the attacker uses a mixed
strategy that consists of uniformly attacking elements of
{S ⊂ Vld : |S| = ka} then the best any pure defender strat-
egy can do is defending Vd ⊂ Vld. The attacker’s strategy im-
plies that any node in Vld is attacked with probability ka
|Vld| .
Each of the |Vld| − ka remaining nodes in Vld is then discon-
nected with probability ka
|Vld| ). Clearly
due to the cascading the value of the game will probably
be higher, illustrating the disadvantage the defender has in
this game. To determine both player’s optimal strategies
and the value of the game we resort to an algorithmic ap-
proach. We ﬁnd the defender’s optimal strategy with the
following linear program. We can ﬁnd minimax strategy for
the defender with the following linear program. It simply
assigns a probability to each of the defenders strategies in a
manner that minimizes the maximum payoﬀ for the adver-
sary. As a consequence, the solution to the following linear
program, DEF LP can provide the mixed minimax strategy
for the defender. An analogous linear program, ATK LP (not
shown), which mirrors DEF LP, will provide that result for
the attacker.

Definition 4.2

(DEF LP).

subj.to

p∗ ≥ (cid:80)

min p∗

(1)
Vd∈DEF XVd pG(Va, Vd) ∀Va ∈ AT K (2)
(3)

1 = (cid:80)

Vd∈DEF XVd

XVd ∈ [0, 1]

∀Vd ∈ DEF (4)

Note that the above linear program requires one variable
for each of the defender’s strategies and one constraint for
each of the attacker’s strategies. However, as there are a
combinatorial number of strategies, even writing down such
a linear program is not practical except for very small prob-
lem instances. To address this issue of intractability, we
employ the double-oracle framework for zero-sum games in-
troduced in [15] and has been applied in more recent work
as well [5, 12]. We present the algorithm DOUBLE ORACLE
as follows:

Algorithm 2 DOUBLE ORACLE
Require: Network G = (V, E), natural number maxIters
Ensure: Mixed defender strategy Prd

1: Initialize numIters = 0, f lag = True
2: Initialize the sets of strategies AT K, DEF to both be {∅}
3: while f lag and numIters ≤ maxIters do
4:

Create Pra, Prd based on the solutions to ATK LP and
DEF LP respectively.
IF numIters < maxIters THEN let Va be the attacker’s
best response to Prd and Vd be the defender’s best re-
sponse to Pra
IF Va ∈ AT K and Vd ∈ DEF THEN f lag = False ELSE
AT K = AT K ∪ {Va}, DEF = DEF ∪ {Vd}
numIters+ = 1

5:

6:

7:
8: end while
9: return Pra.

The intuition behind the above algorithm is that it itera-
tively creates mixed strategies for both the attacker and de-
fender based on a solution to a linear program over the sets
of current possible strategies for both players (AT K, DEF ).
This is followed by ﬁnding (for each player) the best deter-
ministic response to it’s opponent’s strategy. If these new
strategies are both already in the set of possible strategies
for the respective players, the algorithm terminates. Other-
wise, they are added to AT K, DEF respectively. We note
that by Theorem 1 of [15] that the above algorithm will guar-
antee an exact solution if maxIters is set to the number of
possible strategies. In practice, [15] demonstrates that the
algorithm converges much faster.

In DOUBLE ORACLE, the ﬁnding the solutions to DEF LP,
ATK LP will be tractable provided that the algorithm con-
verges in a polynomial number of steps (either through con-
vergence or after the speciﬁed maxIters). However, as we
have shown, computing the best responses is usually com-
putationally diﬃcult. Although, we note in the case where
ka = 1, that by Proposition 3.2 and Fact 3.1, the double ora-
cle algorithm will return an optimal solution, even if greedy
approximations are used for the oracles (provided it runs
until convergence).

5. EXPERIMENTAL EVALUATION

All experiments were run on a computer equipped with
an Intel X5677 Xeon Processor operating at 3.46 GHz with
a 12 MB Cache and 288 GB of physical memory. The ma-
chine was running Red Hat Enterprise Linux version 6.1.

Figure 1: Left: Nodal load vs. payoﬀ (note hi-payoﬀ,
low-load nodes in the dashed box), Right: Capacity
margin (α) vs. payoﬀ

Only one core was used for experiments. All algorithms
were coded using Python 2.7 and leveraged the NetworkX
library2 as well as the PuLP library for linear programming3.
All statistics presented in this section were calculated using
the R statistics software.

In our experiments, we utilized a dataset of an Italian 380
kV power transmission grid [20]. This power grid network
consisted of 310 nodes of which 113 were source, 96 were
load, and the remainder were transmission nodes. The nodes
were connected with 361 edges representing the power lines.
In our initial experiments, we examined the properties
In Figure 1
of the model when no defense is employed.
(left) we show results concerning nodal load vs. the payoﬀ
achieved by the adversary if that node is attacked (and no
others).
Interestingly, we noticed a signiﬁcant number of
nodes with low nodal load yet high-payoﬀ if attacked (see
nodes in dashed box). This may suggest that the DLB strat-
egy may be insuﬃcient in some cases. Later we see how DLB
fails to provide adequate in a defense against the attacker
best response to DLB. This is likely due to these hi-payoﬀ,
low-load nodes. In Figure 1 (right) we examine α (capacity
margin) vs. attacker payoﬀ for various settings of ka (using
the GREEDY ATTACKER RESP heuristic). Here we found
that, in general, payoﬀ decreases linearly with capacity mar-
gin (R2 ≥ 0.84 for each trial).

Next, we examined the relative performance of the min-
imax (mixed) defense strategy and the DLB strategy un-
der diﬀerent resource constraints and against the minimax
(mixed) attack strategy as well as the attacker’s (determin-
istic) greedy response to the DLB defense. In these experi-
ments, we considered the case where both players have equal
resources, the attacker has one resource (which by Propo-
sition 3.2 and Fact 3.1 we are guaranteed an optimal solu-
tion), and the defender has one resource. These results are
displayed in Figure 2.
In these trials we set the capacity
margin α = 0.5, meaning that all edges had an excess ca-
pacity of 50%. We did not use the maxIters parameter of
the DOUBLE ORACLE algorithm, but instead allowed it to
run until convergence.

With regard to the comparison between DLB and mini-
max defense, both performed comparably against the mini-
max attack strategy. In fact, an analysis of variance (ANOVA)
indicated little variance between the two when faced with the
minimax attacker (p ≥ 0.74 for these trials). Yet, a defender
known to be playing a single strategy would likely not face
an attacker who plays the minimax strategy, but rather the

2http://networkx.lanl.gov/
3http://pythonhosted.org/PuLP/

05101520253035404550024681012Payoff (Disconnected Nodes)Nodal Load0102030405060708090100123456Payoff (Disconnected Nodes)Capacity Marginka=1ka=2ka=3ka=4ka=5ka=6Figure 3: Strategy size vs. run-time in hours (left)
and the run-time of each iteration for the experi-
ments where ka = kd

each iteration, not a cumulative time). This increase is
likely the combined result of the growing linear program
and the growing size of the mixed strategies considered by
the greedy approximation sub-routines. We are currently
exploring reliable methods to limit the number of iterations
while maintaining defender payoﬀ.

6. RELATED WORK

Network security has received much attention from the re-
search community in the past two decades. Recent incidents
have shown that due to their internet connectedness such
networks can come under cyber attack, causing severe prob-
lems4. See [26] for a discussion of cyber-security issues rele-
vant to smart grid grids. The utilization of game theory in
designing defense solutions seems ubiquitous. For instance
[13] model the interaction between a DDoS attacker and
the network administrator while [14] considers a game theo-
retic formulation for intrusion detection. Other formulations
consist include stochastic games [17], signaling games [19],
allocation games [4] and repeated games [3]. Game the-
ory is also being used in monitoring and decision making
in smart grids, see for instance [9] or the survey by Fadlul-
lah et al. [10]. However to date no game theoretic approach
has been given for the speciﬁc problem where the attacker
explicitly sets of a cascading power failure to maximize the
damage to the defender.

Cascading failure models applied to power grid infrastruc-
ture have been studied in the past [7, 8, 16]. The model of
[8] introduces the idea of edge failure based on excessive
loads. The goal of the research presented in these papers
was to illustrate properties of the cascade, rather than ex-
plore strategies for attack and defense as this work does.
There has been work on attack and defense of a power-grid
network under the DC power-ﬂow mode [2, 21, 20, 6]. How-
ever, the DC power ﬂow model is not designed to model the
more rapid cascading failures (i.e. the 2003 cascading failure
in the eastern United States [1]).

The application of game theory to security situations was
made popular by [18] where it used for airport security pa-
trol scheduling. Since then, other applications have emerged
including port protection [23], ﬁnding weapons caches [22],
and security checkpoint placement [12]. One that bears sim-
ilarity to this work is [24] - studying games for controlling
contagions on a network. However, as previously discussed,
that model operates under very diﬀerent dynamics.

4http://www.wired.com/threatlevel/2009/10/smartgrid/

Figure 2: Minimax and DLB defense strategies vs.
minimax attack strategy (left) and the attacker’s
greedy best response to DLB (right). Examined are
the cases where ka = kd (top), ka = 1, kd varies (mid-
dle) and kd = 1, ka varies (bottom).

best response to the DLB. In this case, DLB play resulted
in signiﬁcantly greater payoﬀ to the attacker than the de-
fender (p ≤ 0.29 for these trials, the DLB defense results in
15.6 more disconnected nodes on average). This failure of
the DLB strategy to perform well against a deterministic at-
tacker best response is likely due to the presence of low-load
yet high-payoﬀ nodes as shown in Figure 1.

We also noticed that an increase in resources seems to fa-
vor the attacker more than the defender. When both play-
ers played their respective minimax strategy, the expected
payoﬀ for the attacker increased monotonically with the car-
dinality of the strategies. Further, when kd = 1 and ka was
greater, the attacker’s payoﬀ tripled when his resources in-
creased from 1 to 6. However, when ka = 1 and kd was
greater, the defender’s payoﬀ only increased by a factor of
1.7. Hence, the attacker can cause more damage than the
defender can mitigate with the same amount of extra re-
sources. We suspect that this is likely because a defended
node can still fail during a cascade - which would likely be
the case if the attack and defense operations are restricted to
cyber-space, where physical system failure may still be pos-
sible as the result of a cascade initiated by virtual means.

We also examined the run-time of our approach, as dis-
played in Figure 3 (left). Though run-time did seem to scale
linearly with strategy size (R2 = 0.90 ± 0.2 for each experi-
ment), it appears that run-time will in general prohibit the
study of larger strategies or networks (our longest experi-
ment ran for 12 days). In examining the iterations of the
DOUBLE ORACLE algorithm, Figure 3 (left), we ﬁnd that
run-time of an iteration of the algorithm progressively in-
creases (note that this ﬁgure is showing the run-time for

0102030405060708090123456Expected Payoff (Disconnected Nodes)Resources (ka=kd)MinimaxDefenseDLB Defense0102030405060708090100123456Expected Payoff (Disconnected Nodes)Resources (ka=kd)MinimaxAttack Strategy                                                               Greedy Attacker Response to DLB05101520253013456Expected Payoff (Disconnected Nodes)Resources (kd)MinimaxDefenseDLB Defense05101520253035404550123456Expected Payoff (Disconnected Nodes)Resources (kd)0102030405060708090100123456Expected Payoff (Disconnected Nodes)Resources (ka)MinimaxDefenseDLB Defense0102030405060708090100123456Expected Payoff (Disconnected Nodes)Resources (ka)0246810121414710131619222528313437404346Run-time (hours)Iteration Numberka=kd=1ka=kd=2ka=kd=3ka=kd=4ka=kd=5ka=kd=6ka=kdka=1kd=1050100150200250300350123456Run-time (hours)max(ka,kd)Equal resourcesAdvantageousdefenderAdvantageousAttacker7. CONCLUSION

In this paper, we explored complexity, algorithmic, and
implementation issues in a two-player security game where
the attacker/defender look to create/mitigate cascading fail-
ure on a power grid. Future work includes an examination
of scalability issues (larger networks and strategies), adding
uncertainty to the model, and the consideration of more real-
world information about the power grid network (i.e. actual
line capacities, etc.) in order to create a richer model.

8. ACKNOWLEDGMENTS

We would like to thank D. Alderson for his input on re-
lated work and V. Rosato for providing us the power grid
dataset. Some of the authors are supported by ARO project
2GDATXR042. The opinions in this paper are those of the
authors and do not necessarily reﬂect the opinions of the
funders, the U.S. Military Academy, or the U.S. Army.

NP-Completeness. W. H. Freeman & Co., New York,
NY, USA, 1979.

[12] M. Jain, V. Conitzer, and M. Tambe. Security

scheduling for real-world networks. In International
Conference on Autonomous Agents and Multiagent
Systems (AAMAS), 2013.

[13] P. Liu, W. Zang, and M. Yu. Incentive-based modeling

and inference of attacker intent, objectives, and
strategies. ACM Trans. Inf. Syst. Secur., 8(1):78–118,
Feb. 2005.

[14] Y. Liu, C. Comaniciu, and H. Man. A bayesian game
approach for intrusion detection in wireless ad hoc
networks. In Proceeding from the 2006 workshop on
Game theory for communications and networks,
GameNets ’06, New York, NY, USA, 2006. ACM.

[15] H. B. McMahan, G. J. Gordon, and A. Blum.

Planning in the presence of cost functions controlled
by an adversary. In T. Fawcett and N. Mishra, editors,
ICML, pages 536–543. AAAI Press, 2003.

9. REFERENCES
[1] Final Report on the August 14, 2003 Blackout in the

[16] A. E. Motter and Y. C. Lai. Cascade-based attacks on
complex networks. Phys. Rev. E, 66(6), Dec. 2002.

United States and Canada: Causes and
Recommendations. U.S.-Canada Power System
Outage Task Force, April 2004.

[2] D. L. Alderson, G. G. Brown, M. W. Carlyle, and

L. Anthony Cox. Sometimes there is no ”most-vital”
arc: Assessing and improving the operational
resilience of systems. Military Operations Research,
18(1):21–37, 2013-03-01T00:00:00.

[3] T. Alpcan and T. Basar. A game theoretic analysis of

intrusion detection in access control systems. In
Decision and Control, 2004. CDC. 43rd IEEE
Conference on, volume 2, pages 1568–1573 Vol.2, 2004.

[4] M. Bloem, T. Alpcan, and T. Ba¸sar. Intrusion

Response as a Resource Allocation Problem. Decision
and Control, 2006 45th IEEE Conference on, pages
6283–6288, Dec. 2006.

[5] B. Bosansk´y, C. Kiekintveld, V. Lis´y, J. Cermak, and
M. Pechoucek. Double-oracle algorithm for computing
an exact nash equilibrium in zero-sum extensive-form
games. In AAMAS, pages 335–342, 2013.

[6] G. Brown, M. Carlyle, J. Salmeron, and K. Wood.

Defending critical infrastructure. Interfaces,
36(6):530–544, Nov. 2006.

[7] S. V. Buldyrev, R. Parshani, G. Paul, H. E. Stanley,
and S. Havlin. Catastrophic cascade of failures in
interdependent networks. Nature,
464(7291):1025–1028, Apr. 2010.

[8] P. Crucitti, V. Latora, and M. Marchiori. Model for

cascading failures in complex networks. Phys. Rev. E,
69(4):45104, 2004.

[17] K. C. Nguyen, T. Alpcan, and T. Basar. Security
games with incomplete information. In ICC, pages
1–6. IEEE, 2009.

[18] P. Paruchuri, J. P. Pearce, J. Marecki, M. Tambe,

F. Ordonez, and S. Kraus. Playing games for security:
an eﬃcient exact algorithm for solving bayesian
stackelberg games. In AAMAS, pages 895–902,
Richland, SC, 2008.

[19] A. Patcha and J.-M. Park. A game theoretic approach
to modeling intrusion detection in mobile ad hoc
networks. In Information Assurance Workshop, 2004.
Proc. from the Fifth Annual IEEE SMC, pages
280–284, 2004.

[20] V. Rosato, L. Issacharoﬀ, F. Tiriticco, S. Meloni, S. D.

Porcellinis, and R. Setola. Modelling interdependent
infrastructures using interacting dynamical models.
IJCIS, 4(1/2):63–79, 2008.

[21] J. Salmeron, K. Wood, and R. Baldick. Analysis of
electric grid security under terrorist threat. Power
Systems, IEEE Transactions on, 19(2):905–912, May
2004.

[22] P. Shakarian, J. P. Dickerson, and V. S.

Subrahmanian. Adversarial geospatial abduction
problems. ACM Trans. Intell. Syst. Technol.,
3(2):34:1–34:35, Feb. 2012.

[23] E. Shieh, B. An, R. Yang, M. Tambe, C. Baldwin,

J. DiRenzo, B. Maule, and G. Meyer. Protect: a
deployed game theoretic system to protect the ports of
the united states. In AAMAS, pages 13–20, Richland,
SC, 2012.

[9] M. Esmalifalak, G. Shi, Z. Han, and L. Song. Bad

[24] J. Tsai, T. H. Nguyen, and M. Tambe. Security games

data injection attack and defense in electricity market
using game theory study. IEEE Trans. Smart Grid,
4(1):160–169, 2013.

[10] Z. Fadlullah, Y. Nozaki, A. Takeuchi, and N. Kato. A
survey of game theoretic approaches in smart grid. In
Wireless Communications and Signal Processing
(WCSP), 2011 International Conference on, pages
1–4, 2011.

[11] M. R. Garey and D. S. Johnson. Computers and

Intractability; A Guide to the Theory of

for controlling contagion. In J. Hoﬀmann and
B. Selman, editors, AAAI. AAAI Press, 2012.

[25] S. Wasserman and K. Faust. Social Network Analysis:
Methods and Applications. Number 8 in Structural
analysis in the social sciences. Cambridge University
Press, 1 edition, 1994.

[26] D. Wei, Y. Lu, M. Jafari, P. Skare, and K. Rohde.
Protecting smart grid automation systems against
cyberattacks. Smart Grid, IEEE Transactions on,
2(4):782–795, 2011.

