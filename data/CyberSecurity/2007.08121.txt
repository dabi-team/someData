Skip to Secure: Securing Cyber-physical Control Loops with
Intentionally Skipped Executions

Sunandan Adhikary∗, Ipsita Koley∗, Sumana Ghosh∗, Saurav Kumar Ghosh∗, Soumyajit Dey∗,
Debdeep Mukhopadhyay∗
*Indian Institute of Technology, Kharagpur
{sunandana,ipsitakoley,soumyajit,debdeep}@iitkgp.ac.in,{sumanaghosh,saurav.kumar.ghosh }@cse.iitkgp.ernet.in

0
2
0
2

l
u
J

6
1

]

R
C
.
s
c
[

1
v
1
2
1
8
0
.
7
0
0
2
:
v
i
X
r
a

ABSTRACT
We consider the problem of provably securing a given control loop
implementation in the presence of adversarial interventions on data
exchange between plant and controller. Such interventions can be
thwarted using continuously operating monitoring systems and
also cryptographic techniques, both of which consume network
and computational resources. We provide a principled approach for
intentional skipping of control loop executions which may qualify
as a useful control theoretic countermeasure against stealthy attacks
which violate message integrity and authenticity. As is evident
from our experiments, such a control theoretic counter-measure
helps in lowering the cryptographic security measure overhead and
resulting resource consumption in Control Area Network (CAN)
based automotive CPS without compromising performance and
safety.

1 INTRODUCTION
The proliferation of network connectivity has increased the applica-
tion domain for cyber-physical systems (CPS) in today’s connected
world. However, increased connectivity manifests security vulnera-
bility in terms of increased number of possible attack surfaces for
such systems. Recent results have established that network based
Man-in-the-Middle type attacks, like false data injection on cyber-
physical control systems are quite capable of disturbing closed loop
stability as well as degrading the control performance of such sys-
tems [25]. In such an attack, an adversary injects false data in the
communication medium between the plant and the controller with
the intention of driving the system to an unsafe state by changing
the set point of the system.

State-of-the-art detection systems: In order to detect such
attacks, the most common control theoretic countermeasures put
in place are threshold based anomaly detectors that generate an
alarm if the estimation error crosses the threshold over a single
or multiple control loop iterations. Though such control theoretic
primitives can limit the attacks, it has been observed that stealthy
attacks are possible even in the presence of such state estimation
based lightweight control theoretic intrusion detectors [24]. Hence,
the standard way to secure a system against such attack is the use
of security primitives like Message Authentication Codes (MACs)
[21], Message Encryption [21], Physically Unclonable Functions
(PUFs) [8] etc. Some recent efforts also focus on learning based
[15, 26] intrusion detection mechanisms. However, the options for
implementing such security primitives in CPS is often limited by
the available compute resources in the on-board platforms. Hence,
there have been proposals [11] for sporadic usage of such Intrusion

Detection Systems (IDS) for securing messages exchanged between
software-based controllers and physical plants.

CPS operation under Sporadic IDS: A sporadic IDS can be
specified by a pair (nup , ndown ) such that the IDS is active for
nup consecutive control samples and inactive for ndown
consec-
utive control iterations, and this behavior repeats in a cycle. As
shown in Fig.1, let for a control system, there exists an initial re-
gion C which is composed of the initial range of plant state values.
Starting from C, consider that the
preferable operating region for the
system is given by an inner safety
region C1(C ⊆ C1) in the absence
of any external attacks. The safety
guarantee offered by a sporadic IDS
is based on the existence of an outer
safety region C2 (C1 ⊂ C2) which
meets the safety requirements of the
system, but may not be a preferable
operating region for unsatisfactory
control performance. The IDS parameters, nup , ndown
mally defined as,

Figure 1: Sporadic IDS

can be for-

x [k] ∈ C1 =⇒ ∀i ≤ ndow n, x [k + i] ∈ C2 when IDS is off
x [k] ∈ C2 =⇒ ∀i ≥ nup, x [k + i] ∈ C1 when IDS is on

where x[k] denotes the plant state at any time instant k. When
an IDS is not available for ndown
consecutive control iterations,
stealthy attacks (similar to [11]) which the control system is hood-
winked to think as environmental noise are possible. The period
should be small enough to ensure that starting from ∈ C1,
ndown
such attacks should not steer the system outside C2. When the IDS
is active for nup consecutive control iterations, no false data injec-
tion attack is possible. The period nup needs to be large enough to
ensure that the system is brought inside C1 starting from anywhere
∈ C2. This ensures that the system duly recovers from the effect of
false data injected during the period when IDS was inactive thus
nullifying attacker’s efforts.

Attack resilience of a system: Attack resilience of an IDS en-
abled CPS is measured by the value of ndown /nup . Let dmin be the
minimum attack-length, i.e., the minimum number of consecutive
control samples required by an attacker to drive the system out
of C2 (starting ∈ C1) while remaining undetected (thus defining a
minimum effort successful attack). We can bound the down-time
of an IDS as ndown < dmin . This allows us to set a maximum
ndown
= dmin − 1 in order to stop the attacker before
down time of ndown
being successful. Thus, increasing dmin with suitable choice of CPS
parameters in-turn increases the attack resilience (i.e., ndown /nup )
of the system. Furthermore, the increment in ndown
proportion-
ally reduces the computational and communication requirement

nupndownCC1C2 
 
 
 
 
 
of the IDS. Considering resource-constrained CPS implementation
platforms, it is always desirable to go for lightweight provably se-
cure IDS schemes by maximizing down-time (i.e., ndown
) without
sacrificing safety and and performance in the presence of stealthy
attacks, which is the focus of this work.

Motivation and Problem statement: Computing control law
over falsified sensor measurements can actually drive a CPS to-
wards an unsafe state. Hence, in order to minimize the effect of
false data injection in sensor measurements, it may be useful to skip
the control law computation in some carefully chosen sampling
instants while ensuring that such occasional execution skips do not
hamper the desired control performance. The system does not get
affected by malicious data injected by the attacker into the commu-
nication channel at sampling instants when the control executions
are skipped. So, even if the attacker is aware of the positions of
skipped executions, it has to try longer to make the system unsafe
by fault data injection. When the system is running following some
carefully chosen control skipping pattern unknown to attacker, the
attacker may potentially require longer periods of attack efforts
to guess the skip positions and efficiently inject faulty data into
the system in order to succeed. In the present work, we motivate
employing execution skips as a secure control mechanism. Our pro-
posed framework considers a CPS specification and automatically
synthesizes control skipping patterns which maximize the attack re-
silience without compromising the desired control performance of
the system. The synthesis process also provides us an IDS activation
schedule with minimized computational cost as a by-product.

Proposed approach and Contributions: The above mentioned
goals require setting up and solving a non-linear multi-objective
optimization problem. The problem is non-trivial since we want to
1) maximize attack resilience, while also retaining 2) the control
performance as much as possible. Note that both these objectives
are highly dependent on the positions of execution skips in the
control schedule and they do not follow a monotonic relationship.
The pattern exhibiting best control performance may lack in at-
tack resilience. Also, the dependence of control performance on
the skipping pattern of a control schedule is nonlinear [7]. Hence,
formulating a single step optimization framework for maximizing
both control performance and attack resilience of a CPS is not a scal-
able approach. For this reason, we propose a two-step optimization
framework. In the first step, we synthesize a set of control skipping
patterns that are ranked based on their control performance. In
the next step, we analyze the attack resilience of these patterns
using Satisfiability Modulo Theory (SMT) based techniques. Higher
attack resilience in-turn guarantees less usage of IDS along with the
underlying computing and communication platforms. In summary,
our contributions can be listed as follows.
(1) We present the first work that motivates the use of intentional
execution skips as a control-theoretic security measure.
(2) In order to formally analyze the robustness of this measure,
we build an SMT based algorithmic framework for synthesizing
successful but stealthy false data injection attack vectors.
(3) We leverage this framework for designing sporadic IDS with
increased down-time (or more attack resilience) when compared
with existing sporadic IDS schemes used with period control im-
plementations (i.e., without execution skips) [11].

(4) Since the pattern search space is exponential in pattern length,
we develop a pruning mechanism for classifying control skipping
patterns based on their offered performance. This step is instru-
mental in rendering our method scalable for sporadic IDS design.
(5) We establish the usefulness of our approach by considering
automotive system examples where sporadic IDS solutions gener-
ated by our tool set provided performance and security guarantees
similar to previously reported schemes while consuming less com-
munication bandwidth and computational resources.

2 MODEL DESCRIPTION
This section briefly describes the model of the plant and controller,
followed by mathematical description of CPS under attack.

2.1 Control System Modeling
A physical plant can be represented as a linear discrete-time invari-
ant system (LTI) having the dynamical equations given as follows.

(1)

x [k + 1] = Ax [k] + Bu[k], y[k + 1] = Cx [k + 1]
ˆx [k + 1] = A ˆx [k] + Bu[k] + L(y[k ] − C ˆx [k ]), u[k + 1] = K ˆx [k + 1]
Here x[k] is the value of state variable at k-th iteration, which is
being controlled by control input u[k] calculated by the controller
based on the estimated state ˆx[k]. In this work, we consider Kalman
Filter [13] for state estimation and Linear Quadratic Regulator (LQR)
based optimal control technique for calculating the control input.
The control input is received by actuators in plant side and control
action can not be exerted beyond the actuator saturation limit.
In Eq. 1, the estimated state is calculated using the Kalman Gain,
L and output measurement y[k]. Plant outputs are sampled by
sensors and transmitted provided they are within supported sensing
ranges. The matrices A, B, C, D are system matrices and constant in
nature. For a plant-control loop (P, K) with K as the state feedback
gain, we define X [k] = [x T[k] ˆx T[k] u[k]T]T as state vector for the
augmented system comprising both the plant and estimator states
along with control inputs. The augmented system helps analyze
the effect of execution skips on the closed loop. The dynamical
equation for the augmented system is given by, X [k + 1] = A1 X [k],

where A1 =

(cid:34) A
LC
K LC K A − K LC − K BK

0
A − LC − BK

(cid:35)

B
0
0

. If the execution of

the controller is intentionally skipped inside a sampling interval
[k, k + 1), no new control update is communicated to the plant and
state estimation unit in that sampling instance but sensor update
is received. Therefore, the plant state is updated using the last
communicated control input from previous iteration i.e., u[k + 1] =
u[k] and state space equations change as follows.

x [k + 1] =A x [k ] + B u[k], u[k + 1] = u[k]
ˆx [k + 1] =LC x [k] + (A − LC) ˆx [k] + Bu[k ]
Following Eq.(2), during control skips the augmented system pro-
0

(2)

(cid:35)

(cid:34) A

gresses with A0 =

LC A − LC − BK
0

0

instead of A1. Next,

B
0
I

we define the notion of control skipping pattern as follows.

Definition 1. Control Skipping Pattern : An l-length control
skipping pattern for a given control loop (P, K), is an l length sequence
ρ ∈ {0, 1}l such that it can be used to define an infinite length control
schedule π = ρω , repeating with period l, i.e., π [k] = π [k + l] =
ρ[k%l], ∀k ∈ Z+
□

.

2

The evolution of the closed loop system according to a control
skipping pattern can be exemplified as: for ρ = 110010, we have,

X [6] = A1X [5] = A1A1A0X [3] = . . . = A1A1A0A0A1A0X [0].

2.2 Control Design and Performance Metrics
The control design metric represents the control objective while
designing the controller. One such design metric that we use in this
work is settling time. It is the time needed by the system output
to fall and stay around the reference value (e.g., within 2 % error
band). Hence, the controller has to be designed in such a way
that given settling time requirement is always met. On the other
side, the control performance is the measure of quality of control
(QoC), i.e., how efficiently the design requirement is met. In this
work we consider LQR-based controller design technique. So we
use LQR cost function J as the performance metric given by, J =
k =0(x T[k]Qx [k] + u T[k ]Ru[k ]), [1], with Q ≽ 0 and R ≻ 0 being
(cid:205)∞
symmetric weighing matrices capturing the relative importance
that the control designer can give to the state deviation and control
effort respectively. Lower the LQR cost better the performance.

A significant amount of work
exists in the literature addressing
the issue of control design and
performance in the presence of
execution skips [7, 23, 28]. Given
the settling time requirement, Ts ,
we follow Theorem 4.1 of [7] to
calculate the minimum execution
rate, rmin , from Ts . This essen-
Figure 2: CPS attack model
tially means, to maintain Ts , the controller has to be executed at
least ⌈l × rmin ⌉ times in l-length consecutive control samples, i.e.,
in an l-length control skipping pattern, ρ, there has to be at least
⌈l × rmin ⌉ number of ‘1’s. On the other hand, control performance
varies with relative positions of the execution skips in a pattern
(i.e., distribution of ‘0’s over ρ) [10].

2.3 Attack Modeling
A schematic of a cyber-physical system under stealthy false data
injection attacks is given in Fig. 2. We consider a stealthy attack
scenario where the communication network has been compromised
and an adversary can (i) provide false sensor measurements to the
controller, denoted by ˜y[k] = y[k] + △y[k] and (ii) tamper with
the control input resulting in ˜u[k] = u[k] + △u[k] received by
the actuators. Here, △y[k] and △u[k] are the amount of measure-
ment and actuation errors respectively, induced by the attacker
at the k-th iteration, and we express this with an attack vector,
A[k] = [△uT[k] △yT[k]]T. Under these circumstances, the estima-
tor estimates corrupted ˆx[k + 1] (i.e., ˜ˆx[k + 1]) to minimize the
residue r [k] = ˜y[k] − C ˆx[k] (i.e., the difference between the mea-
surement received and the estimated measurement). Due to such a
compromised control sample, the plant states are polluted by the
attacker-induced errors. As a result, the manipulated states ˜x[k] are
driven towards an unsafe region (outside of C2). We can formalize
the state progression in attacked situation using our augmented
˜X [k + 1] = A1 ˜X [k] + B1 A[k ]
system with manipulated state vector,

where, BT

1 =

(cid:20)0
0

LT
0

LTK T
I

(cid:21)

. In presence of execution skip, BT
1

(cid:21)

(cid:20)0
0

0
0

0 =

LT
, causing minimized per-
can be replaced with BT
0
turbations during skipped executions. Note that to the plant and
controller these false data injections may get disguised as process
and measurement noises. Following existing techniques for physics
based attack detection [9], we assume the following system protec-
tion and attack model.

(1) In our protection system model, the threshold-based intru-
sion detector flags an attack whenever the residue r [k] surpasses
the detector threshold given by some constant Th, i.e., ∥r [k]∥ > Th,
which in turn limits the attacker’s effort of manipulation (∥.∥ de-
notes vector 2-norm). We can also consider the system to be fitted
2 based attack detectors since detection cri-
with popularly used χ
teria in such probabilistic detectors can as well be interpreted as
non-probabilistic threshold-based detection techniques [11].

(2) The attacker has full knowledge of the system dynamics and
threshold-based detectors present in the system. The attacker can
observe the system closely and choose proper false data irrespective
of knowing the control skipping pattern. The system supported
sensor range and actuator saturation limit impose a bound on at-
tacker’s stealthy efforts.

.

· · ·
· · ·

△ud
△yd

(cid:20)△u1
△y1

(3) The goal of the attacker is to alter the operating point of the
system thereby driving it to an unsafe state x (cid:60) C2 in the least
amount of time possible while remaining stealthy. An attack vector
(cid:21)

of length d can be defined as Ad = A[1 : d ] =
The attack vector Ad launched on a protected control system exe-
cuting its k-th iteration is deemed 1) stealthy if ∥r [i]∥ ≤ Th for all
i ∈ [k + 1, k + d + nup ] where nup is the up-time of the IDS, and
2) successful if ∃j ∈ [k + 1, k + d + nup ] such that x[j] (cid:60) C2, i.e., it
violates the safety criterion of the system. Note that we define the
stealthiness and success of an attack of length d over a window of
d + nup control samples, because an attack of d-iterations can drive
the system to an unsafe state even after the attack is over. So, we
check the safety criteria for a period equal to the attack duration d
followed by the time nup between the attacker’s two consecutive
attempts. This setting works because of our additional constraint
that during IDS operation for period nup we ensure that the system
will converge back inside C1.

3 A MOTIVATING EXAMPLE
We consider a trajectory tracking control (TTC) example to demon-
strate the advantage of using control skipping pattern in improving
the attack resilience of the system. TTC system regulates deviation
(denoted by D) of a vehicle from a given trajectory and deviation
(denoted by V ) from a reference velocity by applying proper amount
of acceleration as control input. To cope up with the space we refer
to Tab. 1 for the system matrices and initial safety regions. Fol-
lowing [7], the settling time criterion of 5 s allows maximum 50%
execution skips, i.e., rmin = 0.5 for this system. The protection
system considered in place is a threshold-based anomaly detector
having Th = 2. The attacker model is as described in Sec. 2.3.

In Fig. 3a, we consider two possible control schedule scenar-
ios. With the periodic pattern 1ω , there exists an attack vector
of length 11 for which the system becomes unsafe at the 6-th

3

SensorPlantEstimator~u4uy~yx^x4yrDetectorukrk>ThAttackerControlleriteration. However, this attack vector is stealthy as the residue
is never higher than the threshold. The reason that the attack
length need to be much larger than the point of safety violation
is because, suddenly stopping the attack after the 6-th iteration
will lead to large residue and thereby detection. Hence the at-
tack needs to gradually decrease without drastic modification in
system dynamics. In fact, it can be checked that for this system,
11 is the minimum attack length (dmin ), i.e. there does not exist
any attack vector of length < 11 which is stealthy but successful.
Next, we choose an
8-length control skip-
ping pattern, ρ1 =
11010011 that satis-
fies rmin = 0.5.
With the same choice
of attack vector as
used earlier in the
periodic execution,
this time, running
the system with the
pattern ρ1, we ob-
serve the following
cases.

(a) Attack vector for periodic not stealthy on
11010011

(b) Stealthy and successful attack for 11010011 with
more ndow n

O1. While the 11-
length attack could
drive the system to
an unsafe state and
remain stealthy for
fully periodic exe-
cution,
in case of
execution with the
pattern ρ1, it is de-
tected at 9-th itera-
tion just after driv-
ing the system to an
unsafe state at 8-th
iteration. This happens because due to the control skips the at-
tacker’s efforts in those samples are not affecting the system. This
leads to better unbiased estimation in such iterations which may
create a large residue resulting detection in future iterations that
are under attack.

Figure 3: Plotting V (in blue) in left y-axis
and residue r (in red) in right y-axis (in cor-
responding scales) to demonstrate the effect
of stealthy attack on TTC with and without
pattern-based execution. V crossing the blue
dashed line (safety boundary of V ) leads to vi-
olation of safety and r crossing the red dashed
line (T h) indicates attack is detected.

O2. We also find that no successful but stealthy attack of length
d < 15 is possible for this system running with the pattern ρ1.
System response for this pattern-based execution (ρω
1 ) of the system,
with a successful and stealthy attack vector of length d = 15 is
depicted in Fig. 3b. The control skips reduce the amount of attack
that could have been injected while remaining stealthy. In general,
the value of dmin is dependent on the choice of pattern because
system-behaviour under a control skipping pattern depends on the
positions of the control skips and the nature of the system.

O3. Since the minimum attack-length dmin = 15 in this case, we
= 14 increasing the attack resilience (i.e., ndown /nup )
= 10)
in-turns reduces

can set ndown
by ≈ 30% in comparison with the periodic execution (ndown
for a fixed value of nup . This increment in ndown
the computation time of the IDS saving the resource bandwidth.

O4. In general, there may exist multiple patterns that are equally
resilient (i.e. with similar dmin ). Among such patterns with similar

4

resilience, it makes sense to choose the one providing better control
performance, e.g. lower LQR cost in our setting. The observations
indicate that it is possible for a CPS to be more resilient to false data
injection attacks when running with a control skipping pattern
when compared with fully periodic execution. However, we need
an efficient algorithmic framework in order to search for such
performance preserving attack resilient patterns. The next section
describes such a framework in detail.

4 PROPOSED METHODOLOGY
As motivated earlier, our framework has two distinct steps which
are discussed next.

• Step-1: We synthesize a set of control skipping patterns P, and
rank them according to their control performance (ref. Algo. 1). This
helps in filtering upfront all the patterns that violate the desired
control performance.

• Step-2: In this step, we synthesize the set PR ⊂ P of most attack
resilient control skipping pattern(s), which guarantee minimal re-
source usage and best ranked control performance (ref. Algo. 3). For
this, we compute successful yet stealthy attack vectors for control
schedules ∈ P using Algo. 2.

4.1 Synthesizing and Ranking Patterns based

on Control Performance

Recall that in Sec. 2.2, we already limit the number of allowable exe-
cution skips by imposing the constraint of minimum execution rate
rmin . Yet, for a large l, the number of patterns is still very large for
testing attack resilience. Moreover w.r.t. resilience, it is important
to remember that a pattern under repeated execution is equivalent
to any of its cyclic shifts as the attack can start at any point of exe-
cution. For example, the patterns 1110 and 0111 are equivalent since
one can be derived from another using cyclic shifts. Both represent
the same infinite control schedule, i.e. (1110)ω = (0111)ω . Thus, we
need a measure which i) considers any two patterns that are cyclic
shifts of each other as equivalent and ii) is also indicative of the
control performance of a candidate pattern. Using such a measure
to rank patterns provides the following advantage. Patterns whose
cyclic shifts are already tested for resilience need not be tested again
thus eliminating expensive computation. Since the computation of
control performance index J for every pattern requires evaluating
a complex quadratic expression, a lightweight equivalent index can
help in ranking of patterns w.r.t. performance thus ensuring that
our method outputs patterns which are both resilient as well as
performance preserving.

In order to model these strategies in the pattern-synthesis ap-
proach, we use the correlation between the structure of a pattern
(i.e. relative position of skips) and its LQR cost. A well known the-
ory [10] establishes that a pattern having most uniform execution
skips (i.e., uniform distribution of ‘0’s) exhibits the lowest LQR cost.
The uniformity of binary patterns is defined in literature using the
notion of upper mechanical binary word [3]. Following the same we
can define the notion of most uniform skipping pattern as follows.

Definition 2. Uniform Control Skipping Pattern: An l-length
control skipping pattern ρ with number of control execution skips =
⌊(1 −rmin ) ×l⌋ (where rmin is as discussed earlier), is considered to be

1020304050# iterations02040V024rsafe VV for (1)V for (11010011)Thr for (1)r for (11010011)Unsafe & stealthy for (1)Detected at next iteration for pattern11 length attack10203040# iterations0102030V024rsafe VV for (11010011)Thr for (11010011)Unsafe State15 length attackfully uniform when the number of skips in each overlapping q-length
sub-sequence of ρ is exactly one, where q = ⌈l/{l × (1 − rmin )}⌉. □
For example, consider ρ1 = 101010 and ρ2 = 111000 which are
l = 6 length patterns satisfying rmin = 0.5. We can claim ρ1 is a
uniform pattern but ρ2 is not. Because, all 6 overlapping q = 6/3 = 2
length sub-sequences ⟨10, 01, 10, 01, 10, 01⟩ of ρ1 contain exactly
one ‘0’(i.e., skip), whereas ρ2 has only 2 such sub-sequences (3-rd
and 6-th) among ⟨11, 11, 10, 00, 00, 01⟩. It is understood that the
trailing sub-sequences are derived by cyclic rotation of the pattern.
With this observation we try to rank the patterns of a given length
based on how much they deviate from absolute uniformity. For this
we define a function skipCount(ρ, i, q) which outputs the number
of ‘0’s in a q-length sub-sequence of ρ starting from ρ[i] (i.e. the
i-th term of ρ). In case i + q − 1 > l, the sub-sequence under
consideration will wrap back to the front, i.e., it will be given by
ρ[i]ρ[i + 1] · · · ρ[l − 1] · · · ρ[(i + q − 1)%l]. Based on this, we employ
the following metric of non-uniformity for patterns in our work.

Definition 3. LQR-Distance(): Consider an l-length control
skipping pattern ρ with minimum execution rate rmin and q = ⌈l/{l ×
(1 − rmin )}⌉. For a given ρ, the index LQR-Distance(ρ) is defined
as, LQR-Distance(ρ) = (cid:205)l −1
i=0 |min(0, skipCount(ρ, i, q)−1)|. Given
patterns ρi and ρj , ρi is considered more non-uniform than ρj if
□
LQR-Distance(ρi ) > LQR-Distance(ρj ).
The subtraction of 1 is done since skipCount is expected as ‘1’ in
all cases for perfect uniformity. Considering the previously used
patterns ρ1 = 101010, ρ2 = 111000 (l = 6, q = 2), we have
LQR-Distance(ρ1) = 0, and LQR-Distance(ρ2) = 2. This gives
a measure that among these two patterns with same amount of
skip, the control performance of ρ1 will be better. Also, the measure
will be same for all cyclic shifts of a pattern since the definition
itself accounts for it. In that way, all patterns with equal length and
equal number of execution skips which evaluate to same value of
LQR-Distance will be similar in control performance.

We use the measure defined to rank and classify patterns in
Algorithm 1. In this algorithm, we consider a user specified pattern
length l and number of skips fixed as θ . With this, we first gen-
erate all possible l-length patterns (Line 3) with θ skips. Then we
group patterns with same LQR-Distance in the same set (Line 6).
Patterns with cyclic equivalence get automatically grouped with
same LQR-Distance value in the data structures called pattern-lists
denoted by s ∈ Sl
is the overall collection of l length
patterns with θ skips. For patterns with same LQR-Distance, i.e., in
the same pattern-list, we carry out the following pruning operation.
For any ρ ∈ s, we eliminate all other patterns which are cyclic
shift equivalent of ρ (Line 10) since they are equivalent w.r.t. both
performance as well as resilience (as we shall see). Next, we include
this pruned set in S′ (Line 11). After the pruning is completed for
each pattern-list, the collective set is inserted into the final set of
patterns P (Line 12).

where Sl

4.2 Attack Vector Synthesis
In order to synthesize patterns having best attack-resilience, an
important step is to verify the existence of successful and stealthy
attack vectors for patterns under test. We develop a formal approach
to synthesize attack vectors for control skipping patterns as outlined

Algorithm 1 Performance-based Pattern Synthesis
Require: pattern length: l ,Exact no. of skips: θ ,
Ensure: Set of pattern, P, sorted in ascending order of the LQR cost
1: function Rank_Pattern(l, θ )
P, S′, ¯Sl ← Φ;
2:
3:
Sl ← all possible l length pattern with l − θ number of ‘1’s;
4:
q ← ⌈{l /θ }⌉;
5:
for each pattern ρ ∈ Sl do
6:
7:
8:
9:
10:
11:
12:
13:

for each pattern-list s ∈ ¯Sl do

¯Sl [LQR-Distance(ρ, q)] ← ρ

for each cyclic shift ρ′ ∈ s do

for each ρ ∈ s do

P ← P ∪ S′;
return P;

S′ ← S′ ∪ s

s ← s \ ρ′

▷ Initialized with NULL
▷ performance criteria
▷ the uniformity condition

▷ group patterns w.r.t. LQR-Distance

▷ omitting cyclic shifts of ρ

in Algorithm 2. We build on earlier work on attack vector synthesis
for periodic controllers [14].
Algorithm 2 Attack Vector Synthesis for Pattern-based Execution
Require: Attack length: d , pattern: ρ, IDS up-time: nup , detector threshold: T h, inner safety

of length d (if it exists, otherwise NULL)

region: C1, outer safety region: C2

Ensure: Attack vector Ad
1: function SynAttVec(d, ρ, nup, T h)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:

x [0] ∈ C1; ˆx [0] ← 0; u[0] ← K ˆx [0] ← 0; y[0] ← Cx [0];
r [0] ← y[0] − C ˆx [0]; ˜u[0] ← u[0]; ˜y[0] ← y[0];
for k = 1 to d + nup do

▷ Starting from C1

x [k ] ← Ax [k − 1] + B ˜u[k − 1]; ˆx [k] ← A ˆx [k − 1] + Bu[k − 1] + Lr [k − 1];
if k ≤ d then △u[k] ← nondet(); △y[k] ← nondet();
else △u[k] ← 0; △y[k] ← 0;
if ρ[k] = 1 then u[k ] ← K ˆx [k]; ˜u[k] ← u[k ] + △u[k ];
else u[k ] ← u[k − 1];
˜y[k] ← y[k ] + △y[k]; r [k] ← ˜y[k ] − C ˆx [k];

˜u[k ] ← ˜u[k − 1];

▷ Skip Execution

;

13:

· · ·
· · ·

(cid:20)△u1
△y1

else return Ad ←

Φ ←assert(( |r [1]| ≤ T h∧.. |r [d +nup ]| ≤ T h) ∧ (x [1] (cid:60) C2 ∨..∨x [d +nup ] (cid:60) C2));
if Φ is unsat isf iabl e then return NULL;
(cid:21)
△ud
△yd
The function SynAttVec in Algo. 2, symbolically executes the
system starting from any initial state x[0] inside the inner safety
region C1(Line 2) for d + nup control samples following Eqn. (1).
In each sample k, we introduce two non-deterministic variables
△u[k] and △y[k] to model the actuation and measurement errors
introduced by the adversary (Line 6). Attack length is bounded to
d by setting these variables to zero for each iteration k > d. In case
of the skip in k-th control execution (i.e., ρ[k] = 0), x[k], r [k], y[k]
are calculated following Eq. (2) (u[k], ˜u[k] are updated using the
last calculated u[k − 1], ˜u[k − 1] , in line 9). The function at the
end validates an assertion using the SMT solver Z3 [5] to check if
any attack of length d that is stealthy over d + nup samples (i.e.,
until further activation of IDS), violates the safety requirements of
the system in any control sample (Line 11). On getting satisfiable
solution from the solver, SynAttVec() returns a successful attack
vector Ad
of length d (Line 13). Otherwise it returns NULL. This
guarantees that no attack vector of length d exists that remains
stealthy over d + nup control samples and successfully violates the
safety of the system in any of those samples.

4.3 Synthesizing Attack Resilient Patterns
As described earlier, given a control system, we compute a reduced
set P with fixed length control skipping patterns and fixed num-
ber of skips, ranked according to their control performance using
Algo. 1. We use the set P to find a further pruned set of patterns
has a sporadic IDS specification ⟨nρ
,
Pl ⊂ P where each ρ ∈ Pl
up
nρ
⟩ for a detector threshold Th, ensuring the following.
down
1) The ranking of the l length patterns (w.r.t. descending order of

5

Algorithm 3 Most Attack Resilient Pattern Synthesis
Require: Desired pattern length l , 1-length pattern for periodic control execution: ρ ∗, detec-
tor Threshold: T h, inner and outer safety regions: C1 and C2, plant and controller matrices:
A, B, C, K , Min. execution rate: rmin

▷ initializing with maximum number of skips allowed

▷ Finding ontime of the IDS, Initializing d

▷ Initializing with minimum attack length for

r at eρ ∗ ← n

rate

ρ ∗
up /(n

ρ ∗
dow n

+ n

ρ ∗
up ); r at emin ← r at eρ ∗ ; ▷ Initializing with 1ω IDS

ρ
up ←FindOnTime(ρ, C1, C2); d ← MinAttLen(ρ, dmin, n
n
if d ≥ dmin then

ρ
up, T h);

ρ
← d − 1; r at eρ ← n
n
d ow n
if r at eρ > r at emin then P ← P \ ρ
else r at emin ← r at eρ ; dmin ← d ;

ρ
up /(n

ρ
dow n

+ n

ρ
up );

if r at eρ == r at emin then Pl ← ρ;

▷ Store l length most attack resilient patterns performance wise

Ensure: Set of most attack resilient l length patterns PR
1: θmax ← ⌊l × (1 − rmin )⌋;
2: for each θ ∈ [1, θmax ] do
3:
4:

P ← RankPattern(l, θ );
ρ ∗
up ←FindOnTime(ρ ∗, C1, C2); d ← 1;
n
d ∗
min
ρ
n
d ow n

←MinAttLen(ρ ∗, d, n

− 1; dmin ← d ∗

ρ ∗
up, T h);

← d ∗

min

min

5:
6:

7:

1ω

PR [θ ] ← Pl

for i = 0 to |ρ | − 1 do

for each pattern ρ ∈ P do

d ← dm ;
repeat d ← d + 1

else P ← P \ ρ
for each pattern ρ ∈ P do

8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: return PR
19: function MinAttLen(ρ, dm , nup , T h)
20:
21:
22:
23:
24:
25:
26: function FindOnTime(ρ, C1, C2)
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:

until Φ is unsat isf iabl e
n ← n − 1

n ← 1
for i = 0 to |ρ | − 1 do

return n

ρ′ ← i -times left cyclic shift of pattern ρ;
repeat

x [0] ∈ C2; u[0] = 0; r [0] = 0;
for k = 1 to n do

r [k − 1] ← y[k − 1] − C ˆx [k − 1];
ˆx [k ] ← A ˆx [k − 1] + Bu[k − 1] + Lr [k − 1]; x [k ] ← Ax [k − 1] + Bu[k − 1];
if ρ′[k] = 1 then u[k] = K ˆx [k ];
else u[k] ← u[k − 1];

▷ Skip Execution

Φ ← assert(|r [1]| ≤ T h ∧ · · · ∧ |r [n]| ≤ T h ∧ x [n] (cid:60) C1);
n ← n + 1

ρ′ ← i -times left cyclic shift of pattern ρ;
if SynAttVec(d, ρ′, nup, T h) (cid:44) N U LL then return d − 1;

until SynAttVec(d, ρ′, nup, T h)= N U LL

.

down

/nρ

up ) will be maximum and same
ensuring minimum IDS execution rate, i.e.,

iterations.
+ 1) is minimum attack length required to drive the sys-

Quality of Control (QoC)) as set by Algo. 1 is maintained in Pl
2) Given the inner and outer safety regions, C1 and C2, (ref. Fig. 1),
starting from anywhere inside C2, the system will reach C1 under
a safe scenario with no stealthy attack as guaranteed by an IDS
within nρ
up
3) (nρ
tem to an unsafe state while remaining stealthy.
4) Attack resilience, i.e., (nρ
for all the patterns in Pl
up /(nρ
nρ
We derive such a set Pl
for all allowable number of skips θ ∈
[1, ⌊l × (1 − rmin )⌋] (for certain l length) and arrange them in in-
creasing order of control skips. The method is outlined in Algo. 3.
Here, our goal is to output set of patterns, PR , with most attack
resilience that would help us design better sporadic IDS schemes
with provable security, improved resource utilization ensuring best
performance. We define ρ∗ = 1 as the 1-length pattern represent-
ing the periodic execution, i.e., (ρ∗)ω = 1ω in order to represent
existing IDS schemes in literature.

+ nρ

up ).

down

down

In Algo. 3, we compute IDS up and down time for any pattern
using FindOnTime() and MinAttLen() function respectively. Find-
OnTime() returns the minimum number of iterations required by
following the pattern ρ to formally guarantee that the system start-
ing from any state x[k] in the outer safety region C2 (as a result of
successful attack) will be in a state inside the inner safety region
C1 (Lines 26-41). We symbolically simulate attack-free closed loop
iterations of the system starting from an initial state x[0] ∈ C2
according to the pattern ρ ′ (where ρ ′ represents a left cyclic shift
of the pattern ρ) (Lines 29-31). We use the clause x[k] (cid:60) C1 which
implies that the system is not inside the inner safety region C1
after k iterations (Line 37). This assertion is the negation of our
design requirement for the up-time nup of the IDS. If the assertion
Φ is found to be unsatisfiable using SMT solver, then our design
requirement is valid (Line 39-40). However, if Φ is satisfiable, then
we infer that the present IDS up-time, n, is not sufficient to bring
the system to the inner safety region C1 starting from any point
in the outer safety region C2, and we increase n until Φ becomes
unsatisfiable (Line 38). We now repeat this procedure to find the
maximum value of n that satisfies our design requirement over all
possible cyclic shifts of the pattern ρ (Lines 30-38). We check for
all possible such shifts since the system can start from C2 while
executing any position in the pattern. The value of n thus found is a
safe up-time of the sporadic IDS designed using an attack resilient
control skipping pattern ρ, i.e. nρ
up

= n (Line 41).

The MinAttLen() function on the other hand computes all pos-
sible cyclic shifts of the input pattern as ρ ′ (Line 23) and calls the
function SynAttVec() (Line 24) which checks for existence of pos-
sible stealthy and successful attack vector of length d (initialized
with input length dm in line 20). If no attack vector of length d
exists, we can claim that the system can not be made unsafe with
stealthy attack of length d. Hence, we search again for an attack
vector by increasing the attack length by 1 (Line 21). Otherwise,
on finding a successful and stealthy attack vector of d length, we
terminate by decreasing the length by 1 and return the length as
minimum attack length (Line 24).

We start Algo. 3 by choosing a certain number of control skips
θ ≤ θmax ,which is the maximum number of allowed control skips
for l length pattern, calculated using the length input l and mini-
mum execution rate criteria for a system i.e. rmin (θmax = ⌊l × (1 −
rmin )⌋, Lines 1- 2). For this ⟨l, θ ⟩ pair we call RankPattern(l, θ )
to get the pruned and Quality of Control (QoC) wise ordered set
of l length patterns P. Our aim here is to make the IDS scheme as
much sporadic as possible i.e. minimizing the IDS execution rate
(nup /(nup +ndown ))) w.r.t. their periodic counterpart by examining
all l length patterns. So we start our attack resilience analysis with
the periodic pattern ρ∗. We derive d∗
i.e., minimum attack length
for ρ∗ (periodic execution) and update dmin with it first. Then we
calculate down time for ρ∗, i.e., nρ ∗
min − 1 (Line 5-6). We
compute IDS up-time for ρ∗ in line 4. Then we initialize ratemin
with IDS execution rate for periodic execution i.e., rateρ ∗ (Line 7).
Next, for every pattern ρ ∈ P, we first calculate the up-time (nρ
)
up
and minimum attack length (d) for ρ using the functions FindOn-
Time() and MinAttLen() respectively (Line 9). If d is larger than or
equal to dmin indicating better attack resilience (nρ
) than
last found most attack resilient pattern (Line 10), we compute rateρ ,

/nρ
up

= d∗

down

down

min

6

the execution rate for the pattern ρ (Line 11). A pattern ρ is removed
from P if rateρ > ratemin since ρ can not reduce IDS utilization
when compared to last found best candidate (Line 12). Otherwise,
ratemin and dmin are updated with rateρ and d respectively (Line
13).

has following properties, i.e. ∀ρ ∈ Pl

While repeating the above procedure for all patterns (∀ρ ∈ P),
we pick the patterns with least IDS execution rate ratemin from
maintaining their actual order (Line
P and insert them into Pl
, (i)
16). This sorted set Pl
rateρ = ratemin among all l length patterns with θ number of
are sorted in increasing order of
skips and (ii) all patterns in Pl
LQR-Distance. We store Pl
derived for all possible skips (≤ θmax )
for a fixed length l in PR , indexing them with number of skips (Line
17) and finally returning this set (Line 18). In PR , the set of patterns
with smaller number of skips are better in control performance
and patterns with same number of skips are internally sorted (in
each entry of PR ) following uniformity measure. A system running
with any of the l length control skipping patterns ∈ PR meets
the desired performance criteria with best QoC and a sporadic
IDS can be designed for this system having a formal guarantee of
the security against false data injection attack with minimum IDS
activation.

5 RESULTS
We demonstrate the efficacy of our proposed approach considering
two systems from the automotive domain. The systems are Vehicle
Dynamic Controller (VDC) and Trajectory Tracking Controller (TTC).

5.1 Case Studies
VDC regulates the lateral dynamics of a vehicle by controlling
its side slip (β) and yaw rate (γ ) [29]. The control input in this
case is the steering angle. For TTC [11], details about the system
specifications are given in Sec. 3. For both the systems, system
matrices (A, B, C), sampling period (h), outer (C2), inner (C1) safety
regions of the state variables and detector thresholds (Th) are given
in Tab. 1. Safety regions are determined following [19, 20].

Table 1: System Specifications

System

VDC

TTC

Specifications
A = [0.4450,-0.0458;1.2939,0.4402];
B = [0.0550;4.5607]; C = [0,1];
h = 0.1sec; K = [-0.0987;0.1420];
L = [-0.0390;0.4339]
A = [1.0000, 0.1000;0, 1.0000];
B = [0.0050;0.1000]; C = [1 0];
h = 0.1sec; K = [16.0302, 5.6622];
L = [1.8721;9.6532]

C2

C1

β ∈ [-1, 1]
γ ∈ [-2, 2]

β ∈ [-0.1, 0.1]
γ ∈ [-0.2, 0.2]

T h

0.003

D ∈ [-25, 25]
V ∈ [-30, 30]

D ∈ [-15, 15]
V ∈ [-18, 18]

2

For the above systems, we first report in Row 1 of both parts of
Tab. 2 the results for sporadic IDS design with fully periodic execu-
tion (1ω ) similar to [11]. For periodic execution, our method com-
putes IDS up-time nup = 3, 3, and minimum attack length dmin =
11, 3 for TTC and VDC respectively. These are given in Row 1, Col.
= dmin − 1). Using these, IDS exe-
4 of both parts in Tab. 2 (ndown
cution rates (rate) of periodic execution are calculated and reported
in Col. 5 of Tab. 2. We now apply Algo. 3 considering rmin = 0.5 for
both VDC and TTC as derived from their respective settling time re-
quirements. The value of rmin combined with different possible val-
ues of l provide us multiple combinations of (l, θ ) as given in Col. 2.
For each case, Algo. 3 outputs the patterns with maximum resilience
as provided in Col. 3 of Tab. 2. If there are multiple such patterns

7

Table 2: Designed Sporadic IDS schemes for VDC and TTC

Sys.

TTC

VDC
VDC

⟨l, θ ⟩
-
10,3
10,4
10,5
11,4

11,5

-
2,1
5,2

6,3

10,5

12,6

pattern
1
1010011111
1101011100
1101001010
11010111100
10100101011
10100111010

1
10
11010
110010
110100
100011
1100101010
1101001010
1000111001
110001110010
110100111000

⟨ndown, nup ⟩
10,3
15,3
14,3
13,3
15,3
13,3
13,3

2,3
5,3
4,3
5,3
5,3
5,3
4,3
4,3
4,3
4,3
4,3

rate
0.2308
0.1667
0.1765
0.1875
0.1667
0.1875
0.1875

0.6
0.375
0.4286
0.375
0.375
0.375
0.4286
0.4286
0.4286
0.4286
0.4286

LQR-D
-
3
1
1
2
1
1

-
0
0
1
1
2
1
1
2
3
3

(a) Stealthy attack on VDC

with same resilience, the algorithm provides them in decreasing or-
der of control performance (i.e. increasing LQR-D for the same (l, θ )
in col. 6). For each pattern, the corresponding safe IDS configuration
⟨nup , ndown ⟩ is given in Col. 4 with the IDS execution rate in Col. 5.
For each system, the
patterns reported by
our automated method
as most attack re-
silient
(i.e. requir-
ing lowest IDS us-
age) are marked in
bold. As one may re-
call, the input l and
rmin provides the
maximum number
of skips, i.e. θmax .
For TTC, running
our method with
l = 10, we find the
most attack resilient
=
pattern as ρ
1010011111 (with IDS
rate 0.1667) showing a 27.78% improvement w.r.t. existing periodic
IDS with rate = 0.2307 ( ref. Col. 5, Row 1). For l = 11, we have
ρ = 11010111100 with similar resilience. For a given l, Algo. 3
(Lines 2-17), automatically tries for different values of θ ∈ [1, θmax ]
and reports only those values which provide better resilience w.r.t.
periodic control. So, we do not have entries like (l, θ ) = (10, 2) and
many others. Similarly for VDC, our methodology was tried with
different values of l and the most resilient solutions are shown in
bold resulting in about 37.5% reduction in IDS rate.
For comparison, we consider the effect of a stealthy and successful
attack on VDC when it is executing the closed loop following 1ω
(periodic) and (10)ω (best pattern returned by Algo. 3 for l = 2). Our
method reveals the the minimum attack length for VDC following
1ω and (10)ω as 3 and 5 respectively. Fig. 4a shows the residue of
the VDC considering an attack scenario which is stealthy since
||r || ≤ Th is always satisfied for both 1ω and (10)ω . For the same
attack scenario, we plot system states (i.e., side slip β and yaw rate
γ ) of the VDC in Fig. 4b considering both 1ω and (10)ω . The attack

(b) Higher IDS Off time (ndow n ) for control skipping

12345678# Iterations024residue10-3Th|| r || in 1|| r || in (10)12345678# Iterations0123 (rad),  (rad/s)safe  in 1 in (10)safe  in 1 in (10)On time in (10)Off time in (10)On time in 1Off timein 1inflicted during the IDS off time is unable to cross the safety limits
(of value 1 and 2 in Y axis) as we activate IDS from 2-nd iteration
in case of 1ω and from 5-th iteration in case of (10)ω depending on
their corresponding minimum attack lengths as mentioned earlier.
The plot clearly demonstrates that due to the deployment of pattern
based execution, the safety of the system is maintained in spite of
increasing the down-time of the IDS (from 2 to 5). This validates our
principal claim of potential increment in system attack resilience
provably improving security by judiciously skipping some control
executions. Next, we demonstrate a useful application of the abil-
ity to implement provably safe sporadic IDS leveraging control
skipping patterns in automotive systems.

such that p1 > p2 > · · · > pk

5.2 Manifestation on CAN bandwidth
Let us consider an automotive system where the CAN messages
are communicated through the bus with a speed of B bps at peri-
odicity p1, p2, . . . , pk
. The number
of message types with rate pi is given by mi , i ∈ {1, · · · , k }. As-
sume that IDS is implemented for messages with periodicity pk ′
and there are mk ′ > 0 number of such types of messages. Similar
to [4], we consider a p1-length observation window (≥ the largest
period) and compute bandwidth consumption in CAN bus for the
aforementioned setup through the following steps.
A. We find out the number of messages communicated over the
observation window p1. For any mi it is ci = ⌈p1/pi ⌉∀i ∈ [0, k]. We
consider maximum CAN payload for each message, i.e. 64 bits.
B. For each of the m′
different type of messages, the IDS rate is
k
ratei , i ∈ [1, m′
]. If we design the IDS with CMAC/AES-128 (with
k
a-bit CMAC) [27] encryption to provide confidentiality and au-
thenticity, payload will be of size (64+a) bits. This will convert
to ⌈(64+a)/128⌉ AES blocks or b= (⌈(64+a)/128⌉ × 128)/64 CAN
frames (CAN payload size=64). In such an arrangement, each CAN
frame will be replaced by b CAN frames when IDS is active (refer
Fig. 5a where b = 4). Hence, over the observation window, each of
the mk ′ messages is transmitted (1 − ratei ) × ck ′ times without IDS
active and b × ratei × ck ′ times with IDS active giving a total count
of (1 + (b − 1)ratei ) × ck ′.
C. Additional 47 bits are added to the payload to form one CAN
frame (SOF + Arbitration + RTR + Control + CRC + Acknowledg-
ment + EOF + Interframe Space = 1 + 11 + 1 + 6 + 16 + 2 + 7 + 3 =
47 bits)[4]. Thus, in our consideration, size of each CAN frame is
(64+47) bits = 111 bits. Following this, total bandwidth consump-
tion over observation window is computed as T = 111 × [m1 +
m2 × c2 + .. + (cid:205)mk′
i=1 (1 + (b − 1)ratei ) × ck ′ + .. + mk × ck ]/B. Let
the IDS rates for some control skipping pattern, output by Algo. 3
be rate ′
i , ∀i ∈ [1, mk ′]. Since Algorithm 3 ensures if proposed pat-
terns are used rate ′
i < ratei (∀i ∈ [1, mk ′]), the improvement in
bandwidth consumption when executing a pattern based sched-
ule compared to a periodic schedule is given as, (T − T ′)/T =
111 · (cid:205)mk′
i )) · c3)/T considering T ′ as the
bandwidth consumed by pattern based schedule.
Example: Let us consider the following setup of (#message, period-
icity): ⟨m1, p1⟩ = ⟨10, 1⟩, ⟨m2,p2⟩ = ⟨20, 0.2⟩, ⟨m3, p3⟩ = ⟨2, 0.1⟩(V DC),
⟨m4, p4⟩ = ⟨2, 0.1⟩(TTC) in CAN bus. So, the VDC and TTC both
require two types of messages (sensor o/p, control i/p) of period p3
and p4 respectively. These are denoted by CAN IDs 1 · · · 4(Fig. 5a).

i=1 ((1 + (b − 1)(ratei − rate ′

8

Figure 5: a) CAN Transmissions with sporadic IDS in presence of adversary,
b) Message flow for periodic execution, c) Message flow for skipped execution

During skips in the control execution, actuation signals are not
communicated as we can see in Fig. 5c, which also frees bandwidth.
If the IDS scheme in place uses 128 bit CMAC (i.e. a = 128), it
replaces each CAN frame with b = 4 CAN frames when IDS is
active (refer Fig. 5a). Following the derived formula for the afore-
mentioned setup, we get 16.25% net improvement in CAN bandwidth
consumption using the secure control schedule 10ω for VDC and
1010011111ω for TTC. Considering our methodology to design such
pattern based secure control schedules for a significant number
of control loops has an additive effect on the bandwidth saving.
Thus our methodology helps to design sporadic IDS schemes based
on intentional control loop skips which promise better resource
utilization in terms of communication bandwidth.

6 RELATED WORK
We provide a brief survey on existing works in the area of secure
control which are relevant in the context of the current work. In
[17], the authors discuss suitable conditions under which a control
2 based detectors is stealthily attackable. The per-
system with χ
2 detector enabled systems in the
formance degradation of such χ
presence of stealthy attacks has been quantified in [6]. In [18], the
authors report such ‘fake disturbance attacks’ and their implications
in Network Control Systems (NCS) in the presence of deterministic
monitoring algorithms. The idea of stealthy attacks on both sensor
and actuator sides being able to destabilize automated power gen-
eration systems with threshold based detectors has been discussed
in [25]. Authors in [2] also discuss security vulnerabilities in auto-
motive CPS domain. Designing resilient control implementations
by leveraging secure state estimation techniques, more specifically
in the automotive context has been reported in [22]. The idea of
sporadically using IDS schemes like MAC computation has been
investigated in a different line of works [11, 12, 16], but in the
context of periodic control only. In [8], the authors explore the ad-
vantage of employing lightweight periodic authentication schemes
like Physically Unclonable Functions (PUFs) in the context of cyber
physical security as a sporadically available IDS mechanism, again
for periodic control. In that work, the periodic availability of the
authentication scheme depends on the PUF delay (PUF with high
reliability incurs higher delay due to reliability peripherals like
error correction, helper data etc). In the current work, we assume
that the IDS security primitive is available for nup consecutive iter-
ations followed by an off time for which we are able to establish a
guarantee that the performance degradation due to stealthy attacks
is inside recoverable limits.

[27] Springer Fachmedien Wiesbaden. 2013. AUTOSAR — The Worldwide Automotive

Standard for E/E Systems. ATZextra worldwide 18, 9 (Oct 2013), 5–12.

[28] Wei Zhang et al. 2001. Stability of networked control systems. IEEE Control

Systems 21, 1 (Feb 2001), 84–99.

[29] Shuibo Zheng, Houjun Tang, Zhengzhi Han, and Yong Zhang. 2006. Controller
design for vehicle stability enhancement. Control Engineering Practice 14, 12
(2006), 1413–1421.

7 CONCLUSION
The present work demonstrates how control skipping patterns can
be synthesized guaranteeing desired performance with increased
resilience. The safe and resilient patterns generated by the method
helped in reducing the computation and communication overhead
of IDS schemes employed in Automotive CPS. Integrating our SMT
based technique with safe but approximate analysis (e.g. using
‘Barrier functions’) can help increase the scalability of the approach
for applicability in complex industrial test cases. This along with
controller synthesis for the joint objective of performance and
security are important future extensions possible for this work.

REFERENCES
[1] Karl J Åström and Björn Wittenmark. 1997. Computer-controlled systems. Prentice-

Hall, Inc.

[2] Paul Carsten and et al. 2015. In-vehicle networks: Attacks, vulnerabilities, and

proposed solutions. In CISRC. ACM.

[3] Christian Choffrut and Juhani Karhumäki. 1997. Combinatorics of words, Hand-

book of formal languages, vol. 1: word, language, grammar. (1997).

[4] JA Cook and JS Freudenberg. 2007. Controller Area Network (CAN). EECS 461

(2007), 1–5.

[5] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An efficient SMT solver. In

TACAS. Springer.

[6] Benjamin Gerard et al. 2018. Cyber Security and Vulnerability Analysis of
Networked Control System subject to False-Data injection. In ACC. IEEE.
[7] Sumana Ghosh et al. 2017. A structured methodology for pattern based adaptive

scheduling in embedded control. ACM TECS 16, 5s (2017), 189.

[8] Saurav K. Ghosh et al. 2018. Performance, Security Trade-offs in Secure Control.

IEEE ESL (2018).

[9] Jairo Giraldo et al. 2018. A survey of physics-based attack detection in cyber-

physical systems. ACM Computing Surveys (CSUR) 51, 4 (2018), 76.

[10] Ning Jia, Ye-Qiong Song, and Françoise Simonot-Lion. 2007. Graceful degradation
of the quality of control through data drop policy. In 2007 European Control
Conference (ECC). IEEE.

[11] Ilija Jovanov and Miroslav Pajic. 2017. Sporadic data integrity for secure state

estimation. In CDC. IEEE.

[12] Ilija Jovanov and Miroslav Pajic. 2018. Secure State Estimation with Cumulative

Message Authentication. In CDC. IEEE.

[13] Rudolph Emil Kalman. 1960. A new approach to linear filtering and prediction

problems. J. Basic Eng. 82, 1 (1960), 35–45.

[14] Ipsita Koley et al. 2020. Formal Synthesis of Monitoring and Detection Systems

for Secure CPS Implementations. (2020). arXiv:cs.CR/2002.12412

[15] Philipp Kreimel et al. 2017. Anomaly-Based Detection and Classification of

Attacks in Cyber-Physical Systems. In ARES. ACM.

[16] Vuk Lesi et al. 2017. Security-Aware Scheduling of Embedded Control Tasks.

ACM TECS 16, 5 (2017).

[17] Yilin Mo and Bruno Sinopoli. 2010. False data injection attacks in control systems.

In SCS.

[18] Yilin Mo and Bruno Sinopoli. 2016. On the Performance Degradation of Cyber-
Physical Systems Under Stealthy Integrity Attacks. IEEE TAC 61, 9 (2016), 2618–
2624.

[19] Bosch Motorsport. 2020. Acceleration Sensor MM5.10. (May 2020). Retrieved May
28, 2020 from http://www.bosch-motorsport.de/content/downloads/Raceparts/
en-GB/51546379119226251.html

[20] Bosch Motorsport. 2020. Steering Wheel Angle Sensor LWS. (May 2020). Re-
trieved May 28, 2020 from http://www.bosch-motorsport.de/content/downloads/
Raceparts/en-GB/54425995191962507.html

[21] Arslan Munir and Farinaz Koushanfar. 2018. Design and analysis of secure and
dependable automotive CPS: A steer-by-wire case study. IEEE Transactions on
Dependable and Secure Computing (2018).

[22] Miroslav Pajic et al. 2017. Design and Implementation of Attack-Resilient Cy-
berphysical Systems: With a Focus on Attack-Resilient State Estimators. IEEE
Control Systems Magazine 37, 2 (April 2017), 66–81.

[23] Damoon Soudbakhsh et al. 2013. Co-design of control and platform with dropped

signals. In ICCPS. ACM.

[24] Andre Teixeira et al. 2015. A secure control framework for resource-limited

adversaries. Automatica 51 (2015), 135–148.

[25] Andre Teixeira et al. 2015. Secure control systems: A quantitative risk manage-

ment approach. IEEE Control Systems Magazine 35, 1 (2015), 24–45.

[26] Korosh Vatanparvar and Mohammad Abdullah Al Faruque. 2019. Self-Secured
Control with Anomaly Detection and Recovery in Automotive Cyber-Physical
Systems. In DATE. IEEE.

9

