Two Can Play That Game: An Adversarial Evaluation of a Cyber-alert
Inspection System

Ankit Shah†∗, Arunesh Sinha¶∗, Rajesh Ganesan†, Sushil Jajodia†, Hasan Cam‡
†George Mason Univerity, USA, ¶University of Michigan, USA, ‡Army Research Lab, USA
ashah20@gmu.edu, arunesh@umich.edu, {rganesan,jajodia}@gmu.edu, hasan.cam.civ@mail.mil

8
1
0
2

t
c
O
3
1

]

R
C
.
s
c
[

1
v
1
2
9
5
0
.
0
1
8
1
:
v
i
X
r
a

Abstract

Cyber-security is an important societal concern. Cyber-attacks have increased in numbers as well as in the extent of
damage caused in every attack. Large organizations operate a Cyber Security Operation Center (CSOC), which form
the ﬁrst line of cyber-defense. The inspection of cyber-alerts is a critical part of CSOC operations. A recent work, in
collaboration with Army Research Lab, USA proposed a reinforcement learning (RL) based approach to prevent the cyber-
alert queue length from growing large and overwhelming the defender. Given the potential deployment of this approach
to CSOCs run by US defense agencies, we perform a red team (adversarial) evaluation of this approach. Further, with the
recent attacks on learning systems, it is even more important to test the limits of this RL approach. Towards that end,
we learn an adversarial alert generation policy that is a best response to the defender inspection policy. Surprisingly, we
ﬁnd the defender policy to be quite robust to the best response of the attacker. In order to explain this observation, we
extend the earlier RL model to a game model and show that there exists defender policies that can be robust against any
adversarial policy. We also derive a competitive baseline from the game theory model and compare it to the RL approach.
However, we go further to exploit assumptions made in the MDP in the RL model and discover an attacker policy that
overwhelms the defender. We use a double oracle approach to retrain the defender with episodes from this discovered
attacker policy. This made the defender robust to the discovered attacker policy and no further harmful attacker policies
were discovered. Overall, the adversarial RL and double oracle approach in RL are general techniques that are applicable
to other RL usage in adversarial environments.

1 Introduction
In this era of truly pervasive computing, cyber-security has emerged as a major concern. Cyber-attacks have crippled
large hospitals (Ackerman 2017) and resulted in stolen sensitive information from large companies as well as defense
agencies (Underwood 2017). Most large organization, including defense agencies, operate a Cyber Security Operation
Center (CSOC). A CSOC is a team of specialized analysts, engineers and responders, responsible for maintaining
and improving cyber-security. A critical task in the CSOC is to inspect cyber-alerts generated by various sensing
software such as SNORT or tools such as ArcSight. Given the high false positive rates of cyber-alerts (Manion 2016),
it is important to screen the alerts eﬀectively to identify any real attack signal from these alerts, which requires
maintaining the queue length of alerts within acceptable limits.

A recent work (Shah et al. 2018a), in collaboration with Army Research Lab, USA (ARL), proposed a reinforcement
learning based approach (called CSOC-RL) to manage inspection of cyber-alerts at ARL. The model in the CSOC-
RL work is quite detailed to match actual operations at ARL, but, the adversary was modeled as a ﬁxed stochastic
agent. Distinct from CSOC-RL, another work (Schlenker et al. 2017) uses a game theoretic approach for cyber-alerts
inspection, but, the model used simplifying assumptions such as ﬁxed number of analysts and alerts arriving every
hour, as well as a single shot interaction. In this work, we collaborate with ARL to perform a red team evaluation of
the CSOC-RL approach, using both empirical and theoretical techniques.

Our ﬁrst contribution is to pose the strategy learning problem of an attacker as a reinforcement learning (RL)
problem itself, given a ﬁxed deployed defender policy. The CSOC-RL model is based on an underlying queuing
process of cyber-alerts (explained in § 2). The defender has a base number of analysts and a given budget of
additional analysts. His action is to allocate (or not) additional analysts in every hour depending on the state of
system, where the state is roughly the amount of backlog of alerts. The defender aims to keep the backlog of alerts
below a threshold provided by ARL. We model the attacker analogously as choosing to send extra alerts over and
above the stochastic arrival of alerts based on the underlying queuing process, given a ﬁxed total budget of additional
alerts. The attacker aims to push the backlog of alerts above the given threshold. Surprisingly, our experiments reveal
that the attacker fails to overwhelm the system (deﬁned quantitatively in § 4) when its budget of additional alerts

∗Ankit and Arunesh contributed equally to this work.

1

 
 
 
 
 
 
is less than the defender’s budget of additional inspections, even though the defender policy was learned against a
stochastic adversary.

In order to understand the failure of the above attacker policy, we formulate a zero-sum game version of the
CSOC-RL model as our second contribution. This CSOC-GAME model is a partially observable stochastic game but
where the total reward is the maximum of the reward in every time step, as opposed to the standard discounted
sum of rewards. Building on recent results in stochastic games (Gimbert et al. 2016), we show that the minimax
theorem holds for this non-standard game, which reveals that there exists a defender’s policy that is robust against
any attacker policy. The experimentally observed failure of the attacker’s best response to the learned defender
policy implies that the defender is learning a policy close to its minimax policy (discussed later in § 3.2). Digging
further into queuing theory, we derive simple rule based defender policies that guarantee certain minimum reward
for the defender. We ﬁnd experimentally that these rule based policies, while simple and interpretable, are inferior
in performance to the RL learned defender policy.

Our third contribution is a successful attacker policy that works by exploiting a modeling assumption in the
CSOC-RL model and a defense against this attack. In the CSOC-RL model, operational considerations restricted the
number of inspections allocated by the defender to be in discrete chunks of ﬁxed size. Importantly, the CSOC-RL
work also assumed that the adversary sends alerts in discrete chunks of exactly the same size as the defender’s
inspection chunks, which we exploit in our attack. By relaxing the assumption on the attacker, we ﬁnd an attacker
policy that exhausts the defender budget of additional inspections using a small number of additional alerts, which
then allows the attacker to overwhelm the system arbitrarily. Inspired by the double oracle method from game theory,
we retrain the defender using additional episodes from the discovered attacker policy and ﬁnd that the defender’s
policy becomes robust to the discovered policy. In the next double oracle iteration, no harmful attacker policies were
discovered, thus, providing evidence that the relearned defender policy is robust to any adversarial generation policy.

2 Background, Prior Work and Notation
In this section, we provide a brief summary of the prior work CSOC-RL as well as a brief background about the
queuing process used in that work. The arrival of alerts was modeled as a Poisson process with nominal rate of
λ0 = 1919 alerts/hour, which was chosen based on past data from the CSOC that was studied in that work. The
adversary was modeled as a ﬁxed stochastic adversary that changed the actual alert arrival rate λ (λ ≥ λ0) according
to an unknown stochastic distribution. This CSOC-RL work modeled the ﬁrst level of inspection in a CSOC. The ﬁrst
level of inspection is a fast inspection that decides the severity of the alert and whether a followup second detailed
inspection is required. Given the almost same steps for all alerts in this ﬁrst level of inspection, the inspection time
for every alert is same. Based on the arrival nominal rate λ0 and the time to service an alert, a nominal number of
analysts were chosen so that the aggregate nominal service rate of alert was µ0 = 1920 alerts/hour. However, the
actual service rate µ varied stochastically with an unknown distribution (always ≤ µ0) due to factors such as analyst
absenteeism, failure of sensors, etc. We skip the details of analyst scheduling in (Shah et al. 2018a), as that is not
required for this exposition; for completeness, this detail is in the appendix.

Background on queuing theory: The above model with ﬁxed rates (µ = µ0, λ = λ0) is exactly a M/D/1/FCFS
queue (this notation is the standard Kendall notation from queuing theory). M stands for Poisson arrival, D for
deterministic service time, 1 for the number of servers (here all analyst are clubbed together as one server), and
FCFS means that the alerts are inspected on a ﬁrst come ﬁrst serve basis. The M/D/1/FCFS queue has been studied
a lot and can be viewed as a discrete time Markov chain with inﬁnite state space {0, 1, . . .} that represents the queue
length. The transition probability of this Markov chain depends on λ0, µ0. Let At, Zt be the random variable that
denotes the number of arrivals and number of alerts serviced in the tth hour. With ﬁxed nominal rate, P (Zt = µ0) = 1
(deterministic service) and P (At = n) = λn
(Poisson distribution). Given queue length bt−1 at time t − 1, the
transition probability can be expressed as a function h of λ0, µ0 as follows P (bt | bt−1) = P (At − Zt = bt − bt−1) =
h(λ0, µ0, bt − bt−1). An important aspect of M/D/1/FCFS queue is the ratio ρ0 = λ0
. The queue is stable with ﬁnite
µ0
expected queue length only when ρ0 < 1. With the given nominal rates we have ρ0 = 0.999479.

0 exp(−λ0)
n!

MDP of the CSOC-RL problem: However, note that with varying λ, µ (with unknown distribution) the CSOC-
RL model is not exactly a M/D/1/FCFS queue. Yet, it can still be described by a Markov decision process with the
unknown transition probability as P (bt | bt−1) = P (At − St = bt − bt−1) = (cid:82) h(λ, µ, bt − bt−1)p(λ, µ) dλ dµ, where
p(λ, µ) is the joint (unknown) density of the randomly varying λ, µ. As the transition probability is unknown, the
CSOC-RL work modeled the defender’s problem as a RL problem. Note that as λ ≥ λ0 and µ ≤ µ0 the instantaneous
ρ = λ
µ can be > 1. Thus, the defender is provided with a total of X = 28, 800 additional inspections to be used
over N time steps, and the λ, µ are so controlled so that the additional alerts (counted as total additional alerts due
to higher λ and fewer inspections due to lower µ) is also not more than X. The defender-adversary interaction was
modeled over N = 336 hours (two weeks) as the staﬃng changes every two weeks. In every hour, the defender could
call up to 10 extra analysts, which translated to at most E = 2400 additional inspections per hour. Also, an analyst
has to be allocated for a minimum of 15 minutes, which translated to a discrete allocation of additional inspection

2

in chunks of M = 60 alerts. Formally, the RL problem was modeled with
• State: s ∈ S is a tuple s = (cid:104)b, n, x(cid:105), where b is the backlog of alerts at the end of time interval t, n is the number
of time intervals remaining, x is the resources remaining for the defender. The initial budget for the defender is
X. The initial value of n is the time horizon N .

• Action: The defender action is to allocate d (d ≤ x) additional inspection resources at the start of the time interval.

d is a multiple of M and an integer between 0 and E.

• Transition: In the next state, n decreases by one, x decreases by d, and the next b(cid:48) is given by P (b(cid:48) | s, d) =

P (At − Zt = d + b(cid:48) − b) = (cid:82) h(λ, µ, d + b(cid:48) − b)p(λ, µ) dλ dµ, where At, Zt are deﬁned above.

• Rewards: The immediate reward has two terms. The ﬁrst is due to the cost incurred by the defender from the
backlog after allocating additional inspections given by C(s, d) = f (b − d), where function f normalizes the cost
to lie between [0, 1] with the value increasing (not strictly) with its argument. The second term is q(x, n) which
incentivizes preserving additional resources per time remaining, i.e., q increases with increasing ratio x/n and
normalized to lie in [0, 1]. Thus, the immediate reward is −f (b − d) + q(x, n).

Details of the RL training, the function q, and the size of the problem are provided in the CSOC-RL paper.

Measuring performance: While the RL model described above includes reward for preserving budget, the
eﬀective reward for the defender is only from backlog. The purpose of the term q for preserving budget was to
converge quickly to learn to not exhaust all budget. Thus, as presented in the CSOC-RL work, we also show rewards
only for the backlog term. In more details, the function f (x) is a piecewise linear function deﬁned as

f (x) =


0


x−1175
4350−1175

1

for x ≤ 1175
for 1175 < x < 4350
for 4350 ≤ x

The 1175 (4350) alerts corresponds to one hour (four hours) worth of average wait time to inspect an alert (AvgTTA)
for the CSOC studied in the CSOC-RL paper. The results in the CSOC-RL paper show the backlog in terms of
AvgTTA, which we elaborate on further in the experiments section. From our conversation with ARL, the defender’s
aim is to keep the maximum AvgTTA over the time horizon N as low as possible, with anything over 4 hours being
unacceptable.

3 Adversarial Evaluation Methodology
In this section, we present our approach to the red team evaluation. The approach has three distinct parts that are
presented in the sub-sections.

3.1 Adversarial RL
Recall that the attacker in the CSOC-RL work was a ﬁxed stochastic agent that changed the actual alert arrival rate
λ (λ ≥ λ0) according to an unknown stochastic distribution. We make the attacker truly adversarial by allowing him
to send his choice of a number of alerts in every time step subject to a total budget constraint Y . The attacker’s
optimal attack problem can be set-up as a RL problem itself. The MDP of the adversarial RL problem is described
as:
• State space: s ∈ S is a tuple s = (cid:104)b, n, x, y(cid:105), where b, n, x are same as for the defender MDP. y is the additional

alerts remaining for the attacker. The initial budget for the attacker is Y .

• Action space: The adversary action is to send a (a ≤ y) additional alerts at the start of the time interval. a is a

multiple of M and an integer between 0 and Y .

• Transition: In the next state, n decreases by one, x decreases by d (d given by the ﬁxed and known defender policy),
y decreases by a, and the next b(cid:48) is given by P (b(cid:48) | s, a) = P (At−Zt−d+a = b(cid:48)−b) = (cid:82) h(λ0, µ, b(cid:48)−b+d−a)p(µ) dµ.
• Rewards: The immediate reward has two terms. The ﬁrst is exactly the cost incurred by the defender C(s, d) =
f (b − d). The second term is q(y, n) which incentivizes preserving additional alerts per time remaining, i.e., q
increases with increasing ratio y/n and normalized to lie in [0, 1]. Thus, the immediate reward is f (b − d) + q(y, n).
Few points to note about the adversary model are: (1) the adversary is very powerful as it has complete knowledge
of the backlog b and the defender state x, (2) the arrival rate λ is ﬁxed to λ0, since the additional alerts are all
controlled by the attacker but the µ still varies randomly, (3) the adversary has no hard bound on the number of
additional alerts per hour (like E for defender), but, the q function acts as a soft bound for the number of additional
alerts/hour, and (4) the adversary model assumed here allows attacks only by sending additional alerts.

As we show later in experiments, the defender policy learned from the prior RL approach is robust to this attack
when Y ≤ X. This is surprising as learning methods, including RL, have been shown to be vulnerable to attacks.
In order to understand and explain this robustness, we analyze the defender-adversary interaction in a game theory
model in the next sub-section.

3

3.2 Game Theoretic Model
We start by presenting a uniﬁed model of a two player zero-sum repeated games formulated in a recent book
by (Mertens, Sorin, and Zamir 2015). Our CSOC-GAME will be presented as an instance of such games. A zero-sum
uniﬁed repeated game with signals (S, I, J, C, D, π, q, g) is deﬁned by a set of states S, two ﬁnite sets of actions I
(for player 1) and J (for player 2), two sets of signals C (for player 1) and D (for player 2), an initial distribution
π ∈ ∆(S×C ×D), and a transition function q from S×I ×J to ∆(S×C ×D), where ∆(S) denotes the set of probability
distributions on given set S. The reward function for player 1 is given by function g : X × I × J → [0, 1]. The reward
for player 2 is −g. At each stage t players choose actions it and jt and a triple (st+1, ct+1, dt+1) is drawn according to
q(st, it, jt) (for t = 1 the draw is according to π), where st is the current state, inducing the signals ct+1, dt+1 received
by the players and the state st+1 at the next stage. Player 1’s history at stage t is c1, i1, . . . , ct−1, it−1, ct and similarly
player 2’s history is d1, j1, . . . , dt−1, jt−1, dt. The history of the game is c1, d1, i1, j1, . . . , ct−1, dt−1, it−1, jt−1, ct, dt.
Given perfect recall, a behavioral strategy for player 1 is a sequence σ = (σt)t≥1, where σn, the strategy at stage t,
is a mapping from possible histories to ∆(I), with the interpretation that σt(h1) is the mixed action used by player
1 after its history h1. Similarly, a behavioral strategy for player 2 is a sequence τ = (τt)t≥1. This game model is
very general and a suitable choice of signal space can model repeated and stochastic games with perfect or imperfect
information. Given the above model, an evaluation function maps inﬁnite game histories to total reward. In typical
repeated game, this evaluation function is a discounted sum of the per stage rewards given by g.

The defender adversary interaction is a game on top of an underlying stochastic process of arrival and processing
of cyber-alerts, with varying rates of arrival λ and service µ (stated in § 2). In order to model the defender attacker
interaction as a uniﬁed repeated game model, we remove two heuristic choices made in the RL models. We ﬁrst
remove the term q in the defender reward as that term was used only for faster convergence. Next, we remove term
q in the adversary reward, and instead place a hard bound E on the number of additional alerts per hour. The game
model is as follows:

• Player 1 is attacker and player 2 is defender.

• State space: Each state s ∈ S is a tuple s = (cid:104)b, n, x, y(cid:105) with the exact same speciﬁcation as the MDP of the

adversary RL.

• Action spaces I and J: The adversary action is to send a additional alerts over at the end of the time interval.
The defender action is to allocate d additional inspection resources at the start of the time interval. a and d are
both multiples of M , and both are integers between 0 and E.1

• State transition: Recall that At is the random number of alerts arriving due to the underlying Poisson process
with random rate λ in the time interval t. Similarly, Zt is the number of alerts processed at random service
rate µ. Given s = (cid:104)b, n, x, y(cid:105) with n > 0 and actions d and a the resultant state s(cid:48) = (cid:104)b(cid:48), n(cid:48), x(cid:48), y(cid:48)(cid:105) satisﬁes
n(cid:48) = n − 1 if n > 0, x(cid:48) = max(0, x − d), y(cid:48) = max(0, y − a), and b(cid:48) = b − min(d, x) + min(a, y) + At − Zt. Let
E denote b(cid:48) − b + min(d, x) − min(a, y). It can be seen that P (s(cid:48) | s, d, a) = P (b(cid:48) | s, d, a) = P (At − Zt = E) =
(cid:82) h(λ0, µ, E)p(µ) dµ. States with n = 0 are sink states.

• Time horizon: While the game is of ﬁnite horizon N , we model it as inﬁnite horizon by ﬁxing the rewards for both

players in any state with n = 0 to 0 (see the next item).

• Rewards: The cost incurred by the defender is the backlog after allocating additional inspections, i.e., C(s, d) =

f (b − d). The immediate reward for players is:

– Attacker: g(s, d, a) = C(s, d) when n > 0, else 0
– Defender: −g(s, d, a) = −C(s, d) when n > 0, else 0

The game is clearly zero-sum.

• Signal space C and D: Both players observe separate signals after their actions. The attacker has complete obser-
vation, thus, the attacker’s signal after the current time step is the next state s(cid:48) and d, a. The defender does not
observe the attacker’s action a and the y part of the state. However, the defender receives signals for these, which
is the backlog b(cid:48). Thus, the signal for the defender is b(cid:48), n(cid:48), x(cid:48), d. The signal probability for the defender is deﬁned
exactly like the state transition probability P (b(cid:48) | s, d, a).

• History of signals: At any time point T the history observed by the adversary is a history st, dt, at for all t ≤ T .
For the defender, the observed history is bt, nt, xt, dt for all t ≤ T . A play of the game till time T is deﬁned as
st, dt, at for all t ≤ T (this is same as observed history of attacker as adversary observes all the past). All inﬁnite
plays of the game are denoted by the set H∞.

1The game model is well-deﬁned when the action space does not change over time. The budget constraint on action is

indirectly imposed in the state transition using the min functions.

4

• Strategy: As deﬁned earlier, strategies are functions of observed player histories to mixed actions. For attacker,
strategy σ is a function from all past states and both players action. For defender, strategy τ is a function of all
past b, n, x and d.

• Evaluation function: In contrast to standard stochastic game, the defender (ARL here) only cares about the
maximum length of queue of alerts over the time intervals. Thus, the long term reward for the defender is the inf
of the rewards over all time intervals (note that defender stage reward is negation of cost, hence, inf captures worst
backlog over time). For the attacker, due to the antagonistic nature of interaction, the long term reward is then
sup(h) = supt≥1 g(st, dt, at) for h ∈ H∞
Fortunately, even for such a complex game a minimax theorem holds for sup evaluation (Gimbert et al. 2016)

(which is not true for many other evaluation functions), thus,

sup
σ

inf
τ

Eσ,τ (sup(h)) = inf
τ

sup
σ

Eσ,τ (sup(h)) = V

The above result can also be interpreted from the defender’s perspective that there is a strategy (policy) τ ∗ that
can achieve value −V irrespective of the strategy used by the adversary. However, the magnitude of the value V is
important (e.g., V = 1 is not very good for defender). Next, we show that the budgets of the players decide what V
will be achieved for the special case of ﬁxed service rate. Fixed service rate is a mild assumption as analyst absentism
is rare and accounted for by a buﬀer of additional analyst time (see the analyst scheduling details in appendix).
Theorem 1. Given ﬁxed µ = µ0, the defender can guarantee himself a long term reward of (a) at most −0.95, if
Y − X > 4800, and (b) at least (1 + f (B))(1 − 1/B)N µ/B − 1, if Y ≤ X. Further, the guarantee of case (b) is provided
by a simple rule based policy: (S1) whenever the backlog exceeds B by x, allocate x additional inspections.

Proof Sketch. If Y − X > 4800, then the attacker will dump E additional alerts for 14 hours at the start. W.h.p.
the number of normal alerts arriving in 14 hours is also high, thus, the queue will build up to 4350 w.h.p. The case
Y ≤ X involves concepts from queuing theory. Roughly, it is shown that by its own the backlog for the M/D/1 queue
will not exceed B with high probability. Next, it is shown that for any trace in which the backlog due to the M/D/1
process does not exceed B and for any attacker policy, the stated simple rule above is enough to ensure that the
backlog is within B. Thus, w.h.p. the defender cost is bounded to f (B), which provides the required result with low
expected reward. For example, B = 1500 yields around −0.3 utility.

The analysis above reveals that there exists robust defender polices that are robust to any attacker policy only
when the resources (budget) of attacker is lower. Thus, robustness is highly dependent on the resources of the players,
that is, the player with a resource advantage wins the game. The observed robustness of the CSOC-RL defender
policy in experiments can be explained as the learned defender policy being one of the robust policies (or being close
enough).

Further, the theorem provides a simple rule based baseline policy S1. We further propose a more aggressive rule
based policy: (S2) whenever the backlog exceeds B by x, allocate x + (B − 1175) additional inspections. S2 is more
aggressive as it brings the backlog down to 1175 whenever it exceeds B. We compare the RL approach against both
S1 and S2 in our experiments.

3.3 Attacking Modeling Assumptions
The last two sub-sections followed the assumption from the CSOC-RL work that the attacker generates alerts with
the same discretization in the action-space as the defender, which was ﬁxed to multiples of M = 60 alerts. This
models a practical constraint for the defender that an additional analyst must be allocated for a minimum amount of
time once engaged. However, this constraint in the action-space is too restrictive for the attacker. Thus, we relax this
constraint for the attacker allowing him to have a ﬁner discretization by sending alerts in multiples of 30. We attack
using the same adversarial RL set-up of Section 3.1 with this new chunk size of 30 for adversary. We show in the
experiments that this attack succeeds in building up a large backlog (high AvgTTA). The result is explained by the
observation that the attacker uses few additional alerts to elicit a disproportionate response of additional resources
from the defender, resulting in the defender resources getting exhausted while the attacker still has additional alerts
left. Then, the attacker uses the leftover additional alerts to push the backlog to a high value.

The ﬁx for the above attack is inferred from the game theoretic nature of the problem. In particular, this new
attack policy is an adversary best response that was not considered when learning the defender RL policy. Thus,
using a double oracle like approach we retrain the defender by including episodes from this new attacker policy in
the defender RL training. We ﬁnd the new relearned defender policy is robust to the discovered attacker policy, and
no new harmful attacker policies were discovered when the adversarial RL approach was used to attack the relearned
defender policy.

5

(a) Daily bound worst run

(b) Unbounded worst run

(c) 10% extra budget worst run

(d) Daily bound proportions

(e) Unbounded proportions

(f) 10% extra budget proportions

Figure 1: Results for Adversarial RL attacks

4 Experiments
We explain the experimental setup including our measurement metrics. First, the experimental setup is to simulate
the arrival and processing of alerts. The simulation model we use is exactly same as in the previous CSOC-RL work.
At a high level, the simulator simulates the underlying queuing process as well as uncertain events such as analysts
absentism, etc. Other signiﬁcant realistic aspects simulated are that additional analysts time is obtained by ﬁrst
making regular analysts work overtime and then bringing in additional analysts, if required. As in the prevous work,
we ﬁx the defender budget as 28,800 additional inspections over the N = 336 hours. For completeness, further details
of the experimental set-up is in the appendix.

In the same CSOC-RL work, the authors rely on a metric called average total time for alert investigation (AvgTTA).
The time for alert investigation of an alert is the waiting time in the queue and the analyst investigation time after
its arrival in the CSOC database. The AvgTTA/hr is estimated as the average of the time for alert investigation
values of all the alerts that were investigated in an hour. It is a requirement of the CSOC under study that the
AvgTTA/hr remain within four hours. One hour or less was determined to be ideal, and anything within 1-4 hours
is acceptable.

The CSOC-RL application uses a color-coded representation of AvgTTA/hr, which was developed in a prior
work (Shah et al. 2018b). Diﬀerent color-coded tolerance bands are created below the four hours and above the one
hour value of AvgTTA, for example as shown in Fig. 1(a). As stated earlier, the AvgTTA value directly corresponds
to amount of backlog (1 hour is 1175 alerts, 4 hours is 4350 alerts, and is linearly interpolated). 1-2 hours is green
(acceptable), followed by yellow for 2-3 hour (acceptable), orange for 3-4 hour (acceptable), and red (unacceptable)
above 4 hours. Any value below 1 hour is rounded up to 1 hour. Our results show the hour by hour backlog for the
worst run (run with maximum backlog ever) among 500 runs using the color-coded representation, for example, the
line in Fig. 1(a).

It is known that interpretability and usable interfaces are among the main issues in the adoption of AI technologies
in the real world (Ribeiro, Singh, and Guestrin 2016; Stein et al. 2017). Towards that end, the color-coded visual-
ization was found to be extremely useful in displaying and explaining the CSOC-RL results to non-mathematical
experts (Shah et al. 2018a). While the visualization is coarser than numerical results expressed using the function f ,
they are much more easily interpretable by humans.

In this work, we introduce another easily interpretable metric that we call the AvgTTA proportions. Given the
stochastic arrivals of alerts due to the queuing process, it is not suﬃcient to look at a worst case run of the system.
Thus, we show a pie-chart with the proportion of hours among the 500N hours over 500 distinct runs corresponding
to backlog in one of the four color bands.

6

12345121416181101121141161181201221241261281301321AvgTTA (hours)Time (hours)12345121416181101121141161181201221241261281301321AvgTTA (hours)Time (hours)12345121416181101121141161181201221241261281301321AvgTTA (hours)Time (hours)100%97%3%68%10%22%(a) S1 policy worst run

(b) S2 policy worst run

(c) Model assumption attack worst run

(d) S1 policy proportions

(e) S2 policy proportions

(f) Model assumption attack propor-
tions

Figure 2: Results for attack on baseline policies S1, S2 and attack against model assumption

4.1 Adversarial RL
We attack the learned defender RL using our adversarial RL method stated earlier. We try three diﬀerent variations
on the adversary budget: (1) adversary budget same as defender budget, but constrained by a daily bound 28800/14 ≈
2057 of additional alerts, (2) adversary budget same as defender budget with no bounds, and (3) adversary budget
10% more than defender budget with daily bounds.

The results for the worst case (maximum overall backlog) run of the system as well the AvgTTA distribution are
shown in Fig. 1. The adversary with lower budget is unable to push the backlog beyond the green band in any of
the 500 runs (1(d)) with the daily bounds. Fig. 1(a) shows that the attacker dumps all additional alerts allowed in
a day at the start of the day. Even with no bounds, the attacker with lower budget is unable to push the backlog
beyond the yellow band in the worst case (Fig. 1(b)), with 97% of 500N hours remaining in green band (Fig. 1(e)).
Again all additional alerts are dumped in a few hours at the start of the time horizon. However, with just an extra
10% budget even the restricted attacker with a daily bound 1.1 ∗ 28800/14 ≈ 2262 is able to push the backlog into
the red zone in 22% of the 500N hours (Fig. 1(f)). Fig. 1(c) shows that towards the end the backlog builds up and
stays high since the defender resources get exhausted (see defender resources with time in appendix).

These results provide an empirical evidence that the learned defender RL policy is robust to the best response
of the attacker. Further, the results also reveal the subtle relation between robustness of defender and budgets of
players as claimed in Theorem 1.

4.2 Theoretical Baseline
Our next set of experiments are for the baselines S1 and S2 that we derived in Section 3.2. We choose the threshold
B corresponding to 2 hours. We experiment with the more powerful unbounded attacker (i.e., no daily bound). The
worst case runs (Fig. 2(a) and 2(b)) show that the baselines perform reasonably and are able to recover from the
initial barrage of alerts sent by the unbounded attacker. Yet, the backlog still goes to the orange band, and compared
to the proportions for RL policy (Fig. 1(e)) the proportions are worse for the rule based policy (Fig. 2(d) and 2(e)).
However, the rule based policy is much simpler and interpretable than a large RL policy. In literature, there is
evidence for the phenomenon that sub-optimal but simple decision aids are more convincing for human users and
more likely to be trusted and adopted (Elmalech et al. 2015). Thus, while sub-optimal, the rule based policy is still
a competitive candidate for deployment.

4.3 Attacking Modeling Assumptions
Finally, we show results for our attack that exploited modeling assumptions in the prior CSOC-RL work. Fig. 2(c)
shows that even the restricted attacker with a daily bound is able to successfully push the backlog into the red zone.

7

12345121416181101121141161181201221241261281301321AvgTTA (hours)Time (hours)12345121416181101121141161181201221241261281301321AvgTTA (hours)Time (hours)12345121416181101121141161181201221241261281301321AvgTTA (hours)Time (hours)78%18%4%87%10%3%86%1%1%12%Figure 3: Defense against attack on model assumptions. Left is worst case run and right is proportions.

We observe that the attacker is able to elicit a disproportionate response by defender, which results in the defender
additional resources getting exhausted towards the end of the time horizon (see defender resources with time in
appendix). Overall, the attacker is able to keep the backlog in the red zone in 12% of the 500N hours (Fig. 2(f)). The
corresponding robust defender policy learned by retraining the defender by including episodes from the attack found
has performance as shown in Fig. 3. Intuitively, the relearned defender policy exhibits more patience by allowing
backlog to be higher on average (worst run in Fig. 3), yet manages to keep the backlog in green zone over the time
horizon for 95% of the 500N hours (piechart in Fig. 3). We also show the same attack against S1 and S2 in the
appendix. We also attacked the relearned defender policy using various diﬀerent chunk sizes for the adversary (all
the way down to one) and found the defender to be robust against all of the chunk sizes less than 30.

5 Related Work
Game theoretic inspection or auditing has appeared in many papers (Yan et al. 2018; Blocki et al. 2013; Brown et al.
2016), however, all these works have a single shot interaction model and are not focused on cyber-alert inspection.
As stated already, one game based work (Schlenker et al. 2017) on cyber-alert inspection is single shot, and has
other stringent assumptions such as ﬁxed number of analysts and alerts per hour. Another recent game theoretic
work (Noah Dunstatter and Tahsini 2018) uses a zero-sum Markov game model for cyber-alert inspection, but
the model assumes complete information for both the players and hence solves the game using standard minimax
value iteration. Our approach accounts for the realistic scenario of incomplete information and signals, and explains
theoretically and empirically the subtle relation between the budget of the players. Game theory has also been used
for other problems in cyber-security such as deception (Schlenker et al. 2018), attack graphs (Durkota et al. 2015),
man in the middle attacks (Li et al. 2017), and spear ﬁshing (Zhao, An, and Kiekintveld 2016; Laszka, Lou, and
Vorobeychik 2016), which are quite diﬀerent from our cyber-security problem. Also, scalability is still an issue in
solving partially observable stochastic games (Hansen, Bernstein, and Zilberstein 2004). Further, our game has a
non-standard long term utility.

The previous CSOC-RL work (Shah et al. 2018a) missed out on the strategic interaction by modeling the problem
as a RL problem. Along same lines, recent work on adversarial attacks on learning techniques have found attacks
on deep RL systems (Huang et al. 2017; Behzadan and Munir 2017; Lin et al. 2017). A recent work (Pinto et al.
2017) looks at the adversarial problem as a zero-sum stochastic game with complete information for both players and
proposes a best response dynamics approach to solve the problem, that is, alternatively each player plays its best
response ﬁxing the other player’s last policy. However, there is no guarantee of best response dynamics converging to
an equilibrium, even in zero-sum games (for example, matching pennies). Our problem is harder due to the partial
observation of current state. We utilize a diﬀerent technique where the best response of a player is incorporated as
episodes in the RL training of the other player, which is inspired by the double oracle technique in game theory. We
also show that robust performance does not mean just reaching the equilibrium but also depends on the value of the
equilibrium, which in our case relates to the resources (budget) of players.

Next, queuing processes are well established as a natural model for arrivals and service (Cohen 2012; Cohen and
Browne 1982). Some work extend the classic queuing processes to deal with multiple rational customers who can
opt-out of joining a queue (Altman 2005) or strategic selection of scheduling criteria such as FCFS (Ashlagi, Lucier,
and Tennenholtz 2013). However, our model has a adversarial interaction of two players on top of the queuing process,
which, as far as we know, has not been addressed in the queuing theory literature.

6 Conclusion
We performed a red team evaluation of a cyber-alert inspection system that is under consideration for deployment.
We observed the system to be robust to the best responding adversarial alert generation policy, but we also showed
that a weakness in the model assumption could be exploited by an attacker. We provided a game theoretic formulation
of the problem, which allowed us to understand the defender-adversary interaction. In particular, we showed that

8

12345121416181101121141161181201221241261281301321AvgTTA (hours)Time (hours)95%5%players’ resources (budget) are a critical factor in deciding whether the defender policy can be robust. The theory
also yielded simple, and sub-optimal but usable defender policies. Further, using game theoretic insight we made
the defender RL approach robust to the discovered successful attacker policy. The adversarial RL and double oracle
approach in RL are general techniques that are applicable to other RL usage in adversarial environments.

7 Acknowledgement
This work was supported in part by the Army Research Oﬃce under MURI grant W911NF-13-1-0421.

9

In

In

References
[Ackerman 2017] Ackerman, B. 2017. The healthcare industry is in a world of cybersecurity hurt. https://tcrn.
ch/2OqmOX9. techcrunch.com, accessed Aug 10, 2018.
[Altman 2005] Altman, E. 2005. Applications of Dynamic Games in Queues. Birkh¨auser Boston. 309–342.
[Ashlagi, Lucier, and Tennenholtz 2013] Ashlagi, I.; Lucier, B.; and Tennenholtz, M. 2013. Equilibria of online
scheduling algorithms. In AAAI.
[Behzadan and Munir 2017] Behzadan, V., and Munir, A. 2017. Vulnerability of deep reinforcement learning to policy
induction attacks. In International Conference on Machine Learning and Data Mining in Pattern Recognition, 262–
275. Springer.
[Blocki et al. 2013] Blocki, J.; Christin, N.; Datta, A.; Procaccia, A. D.; and Sinha, A. 2013. Audit games.
Proceedings of IJCAI.
[Brown et al. 2016] Brown, M.; Sinha, A.; Schlenker, A.; and Tambe, M. 2016. One size does not ﬁt all: A game-
theoretic approach for dynamically and eﬀectively screening for threats. In Proceedings of AAAI.
[Cohen and Browne 1982] Cohen, J. W., and Browne, A. 1982. The single server queue, volume 8. North-Holland
Amsterdam.
[Cohen 2012] Cohen, J. W. 2012. On regenerative processes in queueing theory, volume 121. Springer Science &
Business Media.
[Durkota et al. 2015] Durkota, K.; Lisy, V.; Boˇsansky, B.; and Kiekintveld, C. 2015. Optimal network security
hardening using attack graph games. In International Conference on Artiﬁcial Intelligence, 526–532.
[Elmalech et al. 2015] Elmalech, A.; Sarne, D.; Rosenfeld, A.; and Erez, E. S. 2015. When suboptimal rules.
Proceedings of AAAI.
[Gimbert et al. 2016] Gimbert, H.; Renault, J.; Sorin, S.; Venel, X.; and Zielonka, W. 2016. On values of repeated
games with signals. The Annals of Applied Probability 26(1):402–424.
[Hansen, Bernstein, and Zilberstein 2004] Hansen, E. A.; Bernstein, D. S.; and Zilberstein, S. 2004. Dynamic program-
ming for partially observable stochastic games. In Proceedings of the Nineteenth National Conference on Artiﬁcial
Intelligence, 709–715.
[Huang et al. 2017] Huang, S.; Papernot, N.; Goodfellow, I.; Duan, Y.; and Abbeel, P. 2017. Adversarial attacks on
neural network policies. arXiv preprint arXiv:1702.02284.
[Laszka, Lou, and Vorobeychik 2016] Laszka, A.; Lou, J.; and Vorobeychik, Y. 2016. Multi-defender strategic ﬁltering
against spear-phishing attacks. In AAAI.
[Li et al. 2017] Li, S.; Li, X.; Hao, J.; An, B.; Feng, Z.; Chen, K.; and Zhang, C. 2017. Defending against man-in-the-
middle attack in repeated games. In International Joint Conference on Artiﬁcial Intelligence.
[Lin et al. 2017] Lin, Y.-C.; Hong, Z.-W.; Liao, Y.-H.; Shih, M.-L.; Liu, M.-Y.; and Sun, M. 2017. Tactics of adversarial
attack on deep reinforcement learning agents. In Proceedings of ICJAI.
[Manion 2016] Manion, C.
https://www.rsaconference.com/blogs/how-to-avoid-wasting-time-on-false-positives.
curity, accessed Aug 10, 2018.
[Mertens, Sorin, and Zamir 2015] Mertens, J.-F.; Sorin, S.; and Zamir, S. 2015. Repeated Games. Cambridge Univer-
sity Press.
[Noah Dunstatter and Tahsini 2018] Noah Dunstatter, M. G., and Tahsini, A. 2018. Allocating security analysts to
cyber alerts using markov games. In Proceedings of National Cyber Summit.
[Pinto et al. 2017] Pinto, L.; Davidson, J.; Sukthankar, R.; and Gupta, A. 2017. Robust adversarial reinforcement
learning. In International Conference on Machine Learning, 2817–2826.
[Pollard 2015] Pollard, D. 2015. A few good inequalities. http://www.stat.yale.edu/~pollard/Books/Mini/
Basic.pdf.
[Ribeiro, Singh, and Guestrin 2016] Ribeiro, M. T.; Singh, S.; and Guestrin, C. 2016. Why should i trust you?:
Explaining the predictions of any classiﬁer. In SIGKDD international conference on knowledge discovery and data
mining. ACM.
[Schlenker et al. 2017] Schlenker, A.; Xu, H.; Guirguis, M.; Kiekintveld, C.; Sinha, A.; Tambe, M.; Sonya, S.; Balderas,
D.; and Dunstatter, N. 2017. Don’t bury your head in warnings: A game-theoretic approach for intelligent allocation
of cyber-security alerts. In Proceedings of IJCAI.
[Schlenker et al. 2018] Schlenker, A.; Thakoor, O.; Xu, H.; Fang, F.; Tambe, M.; Tran-Thanh, L.; Vayanos, P.; and
Vorobeychik, Y. 2018. Deceiving cyber adversaries: A game theoretic approach. In International Conference on
Autonomous Agents and MultiAgent Systems.

Positives.
Raytheon Foreground Se-

How to Avoid Wasting Time

2016.

False

on

10

[Shah et al. 2018a] Shah, A.; Ganesan, R.; Jajodia, S.; and Cam, H. 2018a. Dynamic Optimization of the Level of
Operational Eﬀectiveness of a CSOC Under Adverse Conditions. ACM Trans. Intell. Syst. Technol. 9(5).
[Shah et al. 2018b] Shah, A.; Ganesan, R.; Jajodia, S.; and Cam, H. 2018b. A methodology to measure and monitor
level of operational eﬀectiveness of a csoc. International Journal of Information Security 17(2):121–134.
[Stein et al. 2017] Stein, S.; Gerding, E. H.; Nedea, A.; Rosenfeld, A.; and Jennings, N. R. 2017. Market interfaces
for electric vehicle charging. Journal of Artiﬁcial Intelligence Research 59:175–227.
[Underwood 2017] Underwood, K.
https://www.afcea.org/content/cyber-attacks-government-agencies-rise. accessed Aug 10, 2018.
[Yan et al. 2018] Yan, C.; Li, B.; Vorobeychik, Y.; Laszka, A.; Fabbri, D.; and Malin, B. 2018. Get your workload in
order: Game theoretic prioritization of database auditing. In International Conference on Data Engineering.
[Zhao, An, and Kiekintveld 2016] Zhao, M.; An, B.; and Kiekintveld, C. 2016. Optimizing personalized email ﬁltering
thresholds to mitigate sequential spear phishing attacks. In AAAI.

on Government Agencies On the Rise.

Cyber Attacks

2017.

11

Proof of Theorem 1
Proof. First, the case when Y = X + 4800. Consider the attacker sending B = 2400 alerts every hour from the
start. In 14 hours, the attackers sends 28, 800 + 4, 800 = 33, 600 additional alerts. In 14 hours, the number of arrivals
S from the Poisson process form a Poisson distribution with rate 14λ. The following concentration inequality is
known (Pollard 2015)

P (S ≤ 14λ − 0.3λ) ≤ exp(−

0.32λ2
2 × 14λ

) ≤ 0.002

Thus, with probability ≥ 0.998 the number of arrivals in 14 hours more than 13.7λ ≥ 26, 290. The number that can
be served by normal analysts in 14 hours is 14 × 1920 = 26, 880, that is 590 of the additional alerts could be served
by normal inspections. Thus, by the 14th hour even if the defender has used all additional resources X, there are still
33, 600 − 28, 800 − 590 = 4210 alerts in the queue, which corresponds to f (4210) = 0.955. Thus, the utility is worse
than −0.955 ∗ 0.998 = −0.953

Next, we consider the case when Y < X. In this case we ﬁrst prove that the probability of the backlog being more

than B over the N ﬁnite horizon is small.

A busy cycle for a M/D/1 queue is deﬁned as a time period in which the queue length ﬁrst goes to 0 starting from
0. It is known that all busy cycles are i.i.d., since a M/D/1 queue is a regenerative process (Cohen and Browne 1982).
A busy cycle with time length less than B/µ hour will not have more than B alerts in the queue, since by deﬁnition
the server is busy and it can serve < B alert in less than B/µ hour, so the max queue length cannot be ≥ B. Thus,
we focus on busy cycles of time length ≥ B/µ hour. There can only be N µ/B such busy cycles in N hours.

In each busy cycle the probability of the queue length being at most j is given by Pj, where it is known that
j (Cohen and Browne 1982). Due to i.i.d. busy cycles the probability of queue length being less than B

Pj ≥ 1 − 1
over all the N hours is then more than (PB)N µ/B.

Next, consider the event where the queue length remains below B for all N hours. Consider one run of the
underlying queuing process with the queue lengths x1 to x336 at every hour. Any additional alerts k sent by the
adversary in the jth hour raises the subsequent queue lengths to xi + k for i ≥ j. Let the adversary send alerts
quantity k1, k2, . . . at j1, j2, . . . respectively. According to the defender’s policy the queue length will always remain
below B after the defender action as long as the defender has enough resources to allocate. Thus, we will argue
that the defender resources are not exhausted. Consider the maximum queue length without defender intervention
between j1 and j2: Q = max{xi + k1 | j1 ≤ i < j2}. Let the total defender intervention within j1, j2 be d1. At
any time, if the total defender intervention within j1, j2 is equal to Q − B, then the queue length remains below
max{xi | j1 ≤ i < j2} ≤ B beyond this point. The defender intervention also is never more than Q − B because if
so then the last time that the defender intervenes, he can reduce his resource allocation to be exactly Q − B and
achieve the goal of keeping queue below B. Thus, d1 ≤ Q − B. Next, since each xi ≤ B, we have k1 ≥ Q − B ≥ d1.
In a similar manner, it can be seen that ki ≥ di for all i. Thus, the total additional resources used by defender will
always be less than the additional alerts sent by adversary. Since the budgets are same, the defender will not run of
resources.

Given the maximum queue length remains below B, providing defender utility −f (B) with probability more than
(PB)N µ/B and assuming the worst case utility of −1 otherwise, we obtain the expected reward: (1+f (B))(PB)N µ/B −
1

Analyst Scheduling and Experimental Setup
We directly quote from the previous CSOC-RL work (Shah et al. 2018a):
Extra inspections: On page 8

“It is assumed that all analysts spend 80% of their eﬀort in a shift toward alert analysis, and the rest of the time
is spent on report writing, training, and on generating signatures. Hence, an analyst could increase their eﬀort
on alert analysis up to 20% when the need arises, which will increase the service rate of alerts investigated in a
day.”

Then again on page 9:

“When a disruptive event occurs, a CSOC manager, in the order of preference as determined through our
discussions with CSOC managers at the Army Research Lab, would utilize the remainder 20% of analyst time
on alert analysis, spend some of their own time to assist the analysts in clearing the alert backlog, and bring
on-call analysts to supplement the regular analyst workforce.”

Experimental Setup: First, we present the setup for the M/D/1 queue. This quote below is from page 13; the
equations and citations in the quoted text refer to ones in the CSOC-RL paper; more details are in the CSOC-RL
paper.

12

(a) Defender resources for Fig. 1(c)

(b) Defender resources for Fig. 2(c)

Figure 4: Remaining defender resources over time

“There are 10 clusters of sensors considered for the experiment. Typically, each cluster has about 10 to 12
sensors. Based on Equation (5) (see Electronic Appendix for equations), the average arrival rate λ = 1,919 alerts
per hour, and based on Equation (6), the average service rate µ = 1,920 alerts per hour for the entire system (U
= 0.8), which combines all the sensors and analysts in the system. Hence, traﬃc intensity ρ < 1 for the baseline
case scenario, where ρ = λ/µ . It should be noted that the service rate is based on 80% eﬀort spent on alert
analysis, and at this eﬀort value, the alert service rate is slightly greater than the alert arrival rate (prevents
the formation of an inﬁnite queue length of alerts). A larger diﬀerence between λ and µ (λ << µ) at U = 0.8
would suggest that the analysts have idle time. Hence, it is customary at the CSOC to set the value of λ close
to µ at U = 0.8 (ρ < 1), and deal with ρ ≥ 1 situations by utilizing a) the remaining 20% of analysts time on
alert analysis, b) portions of managers time, and c) on-call analysts if needed. The above parameter values were
obtained through discussions with the CSOC managers of both distributed and centralized CSOCs [Zimmerman
2014], however, diﬀerent values of λ and µ could be used to set the baseline value of avgTTA/hr for a CSOC with
ρ < 1. After a few days of CSOC operations, upon reaching a steady state under normal operating conditions,
the acceptable value of avgTTA/hr was determined to be 1 hour and the nominal average queue length was
1,175 alerts at any given point in time.”

Defender Remaining Resources Results
Figure 4 shows the defender resources corresponding to the runs in Figure 1(c) and 2(c). In both cases the defender
resources get exhausted before the N hours, and then the attacker is able to successfully push the backlog high.

Modeling assumption attack for S1 and S2
Figure 5 shows the results of attacking S1 and S2 using the restricted daily bounded adversary with a ﬁner dis-
cretization. It can be seen S1 is quite robust to the attack, whereas the more aggressive S2 suﬀers from the attack,
which highlights our observation that a more patient policy is beneﬁcial against this attack. For S2 the defender
resources get exhausted before the N hours, and then the attacker is able to successfully push the backlog high. Note
that the piechart for S1 looks better than Fig. 2(d) because this attack used a daily bounded adversary, unlike the
unbounded adversary attack on S1 and S2 in Fig. 2(d) and 2(e) respectively.

13

050001000015000200002500030000121416181101121141161181201221241261281301321050001000015000200002500030000121416181101121141161181201221241261281301321(a) Modeling assumption attack (S1) worst run

(b) Modeling assumption attack (S2) worst run

(c) Modeling assumption attack (S1) pro-
portions

(d) Modeling assumption attack (S2) pro-
portions

Figure 5: Modeling assumption attack on S1 and S2

14

12345121416181101121141161181201221241261281301321AvgTTA (hours)Time (hours)12345121416181101121141161181201221241261281301321AvgTTA (hours)Time (hours)100%0%94%2%2%2%