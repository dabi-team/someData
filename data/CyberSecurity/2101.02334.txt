Machine Learning on Cloud with Blockchain: A
Secure, Veriﬁable and Fair Approach to Outsource
the Linear Regression

Hanlin Zhang, Peng Gao, Jia Yu, Jie Lin, and Neal N. Xiong, Senior Member, IEEE

1

1
2
0
2

v
o
N
2
2

]

R
C
.
s
c
[

2
v
4
3
3
2
0
.
1
0
1
2
:
v
i
X
r
a

Abstract—Linear Regression (LR) is a classical machine learn-
ing algorithm which has many applications in the cyber physical
social systems (CPSS) to shape and simplify the way we live,
work and communicate. This paper focuses on the data analysis
for CPSS when the Linear Regression is applied. The training
process of LR is time-consuming since it involves complex matrix
operations, especially when it gets a large scale training dataset
In the CPSS. Thus, how to enable devices to efﬁciently perform
the training process of the Linear Regression is of signiﬁcant
importance. To address this issue,
in this paper, we present
a secure, veriﬁable and fair approach to outsource LR to an
untrustworthy cloud-server. In the proposed scheme, computation
inputs/outputs are obscured so that the privacy of sensitive infor-
mation is protected against cloud-server. Meanwhile, computation
result from cloud-server is veriﬁable. Also, fairness is guaranteed
by the blockchain, which ensures that the cloud gets paid only if
he correctly performed the outsourced workload. Based on the
presented approach, we exploited the fair, secure outsourcing
system on the Ethereum blockchain. We analysed our presented
scheme on theoretical and experimental, all of which indicate
that the presented scheme is valid, secure and efﬁcient.

Index Terms—Secure outsourcing, Machine learning, Data

analysis for CPSS, Linear regression, Blockchain

I. INTRODUCTION

Cyber physical social systems (CPSS), as an emerging
paradigm, is providing efﬁcient, convenient, and personalized
services and beneﬁting human lives. Machine Learning (ML)
techniques have been widely implemented in the CPSS for
providing new predictive models for large scale data analysis
in various applications. Linear Regression (LR) is a classical
supervised learning algorithm, which is widely used to estab-
lish the relationship between the target variable and the input
variable based on a trained model. The training process of
the linear regression involves the matrix multiplications and
the matrix inversion, which are time-consuming operations.
On the other hand, in the age of big data, the LR is often
applied to a large-scale training dataset, which will require

Hanlin Zhang, Peng Gao and Jia Yu are with the College of Computer
Science and Technology, Qingdao University, Qingdao 266071, China, also
with the State Key Laboratory of Cryptology, Beijing 100878, China (Emails:
hanlin@qdu.edu.cn; 1033986392@qq.com; qduyujia@gmail.com).

Hanlin Zhang is also with the business school, Qingdao University, Qingdao

266071, China.

Jie Lin is with the School of Electronic and Information Engineering, Xi’an
Jiaotong University, Xi’an 710049, China (E-mail: jielin@mail.xjtu.edu.cn).
Neal N. Xiong is with the Department of Mathematics and Computer Sci-
ence, Northeastern State University, USA. (E-mail:xiongnaixue@gmail.com).

In this paper, J. Yu is the corresponding author.

unaffordable computation power for individuals. Thus, how to
enable devices to efﬁciently perform the training process of
the linear regression is a critical problem.

In the age of cloud computing, outsourcing training process
to an untrusted cloud can be an alternative solution. Cloud
computing is providing fast and secure computing and data
storage services over the internet. With cloud computing, users
can avoid the upfront cost and complexity of owning and
maintaining their own hardware, and instead simply pay for
what they use. Although outsourcing the heavy workload to a
cloud server has many advantages, it also brings some new
challenges [1, 2]. First, the outsourced data might include
private information such as patients’ health records, which
should not be leaked to a public cloud. How to enable the
cloud to perform the computation on privacy-preserved input
is a critical challenge. Second, cloud server may return invalid
computation outputs prepensely or unconsciously. The incor-
rect results might be caused by a software bug, a malicious
attack on the cloud, or ﬁnancial incentives to save computation
power. Thus, how to enable outsourcer to detect malicious
behavior from cloud servers is another challenge. Third, if
cloud server performs computation task before outsourcer
paying the services fee, the outsourcer might not pay after
receiving the results. If the outsourcer pays the service fee
ﬁrst, the cloud might not conduct the computation and return
random and invalid results. Thus, how to guarantee fairness for
both the cloud server and the outsourcer is the last challenge.
As far as we know, no existing research achieves secure,
veriﬁable, and fair outsourcing for the linear regression.

To address the above challenges, in this article, we make
research on how to safely implement a linear regression model
on an untrustworthy cloud, in a way that guarantees fairness
for both parties. To be speciﬁc, we propose a new elementary
transformation based technique to obscure the computation
input and output. To achieve fairness, taking advantage of
traceable nature of the blockchain, we
the decentralized,
employ the blockchain as the middleman, which veriﬁes the
calculation results and guarantees the fairness. Notice that
the veriﬁcation process of secure outsourcing schemes often
involves private data of the outsourcer, while the blockchain is
a public ledger that anyone can have access to the data on it.
Thus, we propose a veriﬁcation method that does not involve
any private information (i.e., the proposed outsourcing scheme
is publicly veriﬁable). Based on the designed scheme, we
implement the fair, secure outsourcing system on the Ethereum

 
 
 
 
 
 
blockchain [3], which includes a veriﬁcation system and a
payment system. We develop the smart contract as well as
the graphical user interface and introduce the implementation
details. To evaluate our presented scheme, we analyze the cor-
rectness, security and efﬁciency of our approach on theoretical.
Also, we perform experiment to assess the efﬁciency of our
presented scheme.

The rest of the paper is organized as follows: Section II in-
troduces some essential preliminaries for the proposed scheme.
Section III provides the system model. Section IV describes
the design rationale, the generic framework and the detailed
scheme. Also, we analyses the correctness, security and ef-
ﬁciency of the presented scheme. Section V introduces the
implementation of the developed system in detail. Section VI
evaluates the practical performance of the proposed scheme
through experiments. In Section VII, we discuss some possible
applications where our proposed algorithm can be applied.
Section VIII overviews the related work. Finally, Section IX
draws conclusions to the paper.

II. PRELIMINARIES

In this section, we introduce some background knowledge of
Linear Regression, Blockchain and Ethereum smart contract.

A. Linear Regression

Linear Regression is a regression model that can make
regression forecasting in machine learning. It predicts a nu-
merical value as accurately as possible through learning a
linear model. There are variety of applications such as pre-
dicting the fuel efﬁciency of a car in terms of cylinders,
displacement, horsepower, weight, etc.. Given a training set
D = {(x1, y1), (x2, y2), ..., (xn, yn)}, where xi ∈ R1×m,
yi ∈ R. A typical linear regression model in machine learning
is deﬁned as:

y = Xω,

(1)

where y ∈ D is the vector (y1, y2, ..., yn)T , ω ∈ Rn×1 is
the vector (ω1, ω2, ..., ωn)T , X ∈ D is a m × n matrix
[x1, x2, ..., xm]T which is the ith row xi = (xi1, xi2, ..., xin).
In this model, each vector xi in X is taken as an input and
the scalar yi is an output corresponding to xi. The ωi is the
coefﬁcient of xij(1 ≤ j ≤ n). We view it as a set of weights
that determines the degree of prediction accuracy. The optimal
coefﬁcient ω is calculated as:

ω = (X T X)−1X T y

(2)

In eq.(2), We need to execute a matrix inversion and two
matrix multiplications. In the age of big data, the scale of
training set generally becomes increasingly enormous. The
is not able to conduct such expensive computation
client
locally especially for the resource-constraint client.

B. Blockchain and Ethereum Smart Contract

Since Nakamoto et al. ﬁrst presented Bitcoin system in
2008 [4], blockchain has attracted extensive attention of many

2

researchers and enterprises. The blockchain is a decentralized
shared ledger which is composed of many blocks in terms
of chronological order and uses cryptography to guarantee
tamper-resistance, traceability and unforgetablity. In Bitcoin,
each block is composed of the block header and the block
body. The block header describes the information of the block
including Block Version, Time Stamp, Nonce, Parent Block
Hash, Difﬁcult and Merkle Tree Root Hash. The block body
is a set of transactions in the block.

Nick et al. ﬁrst proposed the conception of smart contract
in 1995 [5]. Smart contract is a digital protocol that is aimed
at propagating, verifying or executing in an information way.
Ethereum is the ﬁrst platform that permits the developers
to deploy their own smart contract [3]. It provides a smart
contract programming language named Solidity and a smart
contract execution environment named Ethereum Virtual Ma-
chine (EVM). EVM is the core innovation of Ethereum and
is a Turing complete software that runs on the Ethereum
network. Smart contract developers write smart contract codes
in Solidity and deploy it on Ethereum blockchain. Then the
smart contracts are saved in a block. The smart contracts will
be executed automatically only if the smart contract receives a
speciﬁc trigger condition. Smart contract execution results are
veriﬁed by all the Ethereum nodes and are stored on Ethereum
blockchain.

III. SYSTEM MODEL AND DEFINITIONS

In this section, we ﬁrst provide the system model. Then, we

describe the security deﬁnitions.

A. System Model

Fig. 1 shows the system model. As we can observe, a
secure and fair outsourcing scheme includes three entities: the
client C, the cloud server CS and the fair payment platform
F P P . C cannot carry out the heavy computation tasks with
computation-constraint devices. Thus, he/she outsources com-
putation tasks to CS. It is an untrustworthy entity that offers
computation services. F P P ensures the fairness of transaction
between C and CS. F P P has two subsystems including a
veriﬁcation system and a payment system. The veriﬁcation
system is used to verify results from CS while the payment
system is used to ensure the fairness of payment.

(cid:48)

(cid:48)

(cid:48)

The workﬂow of the proposed scheme is deﬁned the follow-
ing process: C needs to leave computation tasks F (x) to CS.
First, C blinds the input x into x
and uploads the computation
) to F P P . Meanwhile, C pays the service fee to
task F (x
) on F P P and makes deposits to
F P P . CS accepts F (x
) and submits the result R
F P P . Then, CS computes F (x
to F P P . F P P veriﬁes R
is an invalid
result, F P P transfers the service fee and the deposits to C.
Otherwise, F P P transfers the service fee and the deposits to
from F P P , C
to C. After receiving R
CS and sends R
recovers the real result R from R

from CS. If R

.

(cid:48)

(cid:48)

(cid:48)

(cid:48)

(cid:48)

(cid:48)

(cid:48)

3

Fig. 1: System Model

B. Security Deﬁnitions

We introduce some security deﬁnitions for secure outsourc-
ing computation including framework, privacy, checkability
and efﬁciency. Researchers have similar deﬁnitions on security
properties of secure outsourcing computations [6, 7], in which
security, veriﬁability and efﬁciency are included. According
to their theories, we summarize that a secure outsourcing
algorithm satisﬁes the following properties:

Deﬁnition 1: A secure outsourcing computation algorithm
SOC = (KeyGen, ProbGen, Compute, Verify, Recover) con-
tains ﬁve algorithms deﬁned belows.

• KeyGen(F , λ) → (P K, SK): Given the security param-
eter λ, the randomized KeyGen algorithm generates a
public key P K used to encode the target function F and a
secret key SK, which is used to obfuscate to computation
inputs.

• ProbGenSK(x) → (σx, τx): Using the secret key SK,
the ProbGen algorithm encodes the function input x as a
public value σx which is submitted to server, and a secret
value τx which is kept private by the client.

• ComputeP K(σx) → σy: Using the public key P K and
the encoded value σx, the server computes an encoded
version σy of the function’s output y = F (x).

• VerifySK(τx, σy) → 1 (cid:83) 0: Given the secret key SK and
the secret decoding τx, the Verify algorithm checks the
correctness of σy. If the encoded output σy is valid, this

algorithm outputs 1. Otherwise it outputs 0.

• Recover(τx, σy) → y: Using the secret key SK, the
secret value τx and the encoded answer σy, the Recover
algorithm recovers the original result y = F (x).

Deﬁnition 2 (Privacy [6]): Privacy requires server cannot get
any sensitive information in terms of the encoded input/output
from client. We consider the following experiment:

(P K, SK) R← KeyGen(F, λ);

(x0, x1) ← AP ubP roGenSK (·)(P K);
(σ0, τ0) ← P roGenSK(x0);
(σ1, τ1) ← P roGenSK(x1);

b ← {0, 1};
(cid:48)

b

← AP ubP roGenSK (·)(P K, x0, x1, σb)

the

the

experiment,

In
to
the Oracle on any input he desires. The oracle
request
P ubP robGenSK(x) executes P robGenSK(x) to generate
(σx, τx) and returns only the public part σx.

adversary A is

able

For a secure outsourcing computation algorithm SOC, it is
deﬁned that advantage of an adversary A in the experiment as
below:

AdvCS

A (F, λ) = |P rob[b = b

(cid:48)

] −

1
2

|

We deﬁne that a secure outsourcing computation algorithm

SOC is privacy if for any probabilistic polynomial
adversary A,

AdvCS

A (F, λ) (cid:54) negli(λ),

time

where negli() is a negligible function of its input.

Deﬁnition 3 (α–Efﬁcient [7]): A pair of algorithms (C, CS)
is considered to be an α-efﬁcient execution of an algorithm
A if (1) the client and the cloud server correctly execute the
algorithms and (2) for any inputs x, the execution time of
C CS is less than or equal to an α-multiplicative factor of the
execution time of A(x).

Deﬁnition 4 (β-checkable [7]): A pair of algorithms
(C, CS) is considered to be a β-checkable execution of an
algorithm A if (1) the client and the cloud server correctly
execute the algorithms and (2) for any inputs x if a vicious
server CS
depart from its preinstall functionality during the
execution of C CS
(x), C will catch the error with probability
greater than or equal to β.

(cid:48)

(cid:48)

4

Algorithm 1 The EFP-SOLR algorithm
Input: X ∈ Rm×n, a large-scale matrix; X T ∈ Rn×m, the

transpose of X; y ∈ Rm×1, a vector.

Output: ω ∈ Rn×1, a vector such that ω = Ry.

Step 1. KeyGen(λ)→(SK):

• Client chooses 2k elementary transformation matrices:

P1, P2...Pk, Q1, Q2, ...Qk.

• Client sets two secret keys as follows:

SKP = {P1, P2, ..., Pk}
SKQ = {Q1, Q2, ..., Qk}

Step 2. ProbGenSK(X, X T ) → (X1, X2):

• Client computes X1 and X2 as:

X1 = XP1P2...Pk
X2 = Qk...Q2Q1X T

Step 3. Compute(X1, X2) → (R
• Cloud server calculates R

(cid:48)

(cid:48)

):

as follows:

(3)

(4)

(5)

(6)

(7)

IV. PROPOSED SCHEME

Firstly, we express the design rationale. Then, we describe

our proposed scheme in detail.

Step 4. Verify(R

(cid:48)

= (X2X1)−1X2

(cid:48)

R
) → 1 (cid:83) 0:

A. Design Rationale

Our idea is to devise a novel scheme which allows client
to securely perform linear regression model on cloud server.
According to eq.(2), matrix inversion and matrix multipli-
cations are the most time-consuming operations. Thus, we
consider to outsource (X T X)−1X T , and leave the matrix-
vector production to be calculated locally. To maintain the
conﬁdence of inputs, we consider to apply a series of elemen-
tary transformations to X. By doing so, the position and the
value of each element in X and X T will be fully obscured. To
guarantee the fairness of the outsourcing scheme, we develop a
fair payment platform based on the blockchain. Client uploads
computation tasks to the platform and cloud server accepts the
computation task platform from the platform. The blockchain
veriﬁes the outputs which calculated by cloud server and
guarantees the fairness. However, blockchain is a public ledger
that anyone can have access to the data on it. Thus, we
design a veriﬁcation mechanism which does not involve any
private information of the client. In other words, the proposed
outsourcing scheme is publicly veriﬁable.

B. Detailed Scheme

Algorithm 1 shows our detailed proposed scheme EF P −
SOLR. To protect the privacy of X and X T , client uses
2k(3 < k (cid:28) min(m, n)) n × n elementary transformation
matrices to blind X and X T . These elementary transformation
matrices conduct the following three types of operations to a
matrix:

• M ultiplication: A multiplication operation multiplies
the i-th row (resp. column) of a matrix by a non-zero
scalar.

• Fair payment platform chooses a random vector r ∈

R1×n and calculates V1, V2 as:

V1 = rX2
V2 = V1X1

(8)

(9)

• Fair payment platform checks whether the following

equation holds to verify validity of the result.

V1 = V2R

(cid:48)

Step 5. Recover(SK, R

(cid:48)

, y) → ω:

• Client calculates R with the secret key SKP as:

R = P1P2...PkR

(cid:48)

• Client calculates the real output ω with R as:

ω = Ry

(10)

(11)

(12)

• P ermutation: A permutation operation makes the two
rows (resp. columns) of a matrix exchange their location.
• Addition: An addition operation makes a matrix add j-
th row (resp. column) multiplied by a non-zero scalar to
the i-th row (resp. column).

These elementary transformation matrices are invertible
and their inverse matrices are easy to be calculated. In
our scheme, P1 and Q1 are the elementary matrix of
M ultiplication operations. Client chooses 2n random scalars
p1, p2, ..., pn, q1, q2, ..., qn and constructs the following ele-

mentary transformation matrices:



p1









P1 =

p2

. . .



q1









, Q1 =











pn

q2

. . .











qn

(13)

P2 and Q2 are the elementary matrix of P ermutation op-
erations. Client randomly generates a permutation π1 and
constructs P2 as:

• For each row i in P2, the value of π1(i)-th element is 1

and the value of the other elements is 0.

We use a 4×4 matrix to show the construction process of P2.
We assume permutation π1 is as:

π1 =


1

3





2 3 4

4 2 1

Then, P2 is constructed as:


0 0

P2 =









0 0

0 1

1 0


0


1



0


0

1

0

0

0

(14)

(15)

construction

to P2.
of Q2
The
P3, ..., Pk, Q3, ..., Qk
of
the
Addition operations. Client chooses 2k − 4 random scalars
r1, r2, ..., r2k−4 and constructs P3 as:

elementary matrices

process
are

similar

is

• Set the value of a randomly chosen element which is not

on the main diagonal as r1.

• Set the value of each element on the main diagonal as 1.
• Set the values of other elements as 0.

For example, we use a 4×4 matrix to show the construction
process of P3. Assuming r1 = 3, constructe P3 as follows:

5

(cid:48)

(cid:48)

(cid:48)

On receiving R
from cloud server, fair payment platform
chooses a random vector r ∈ R1×n and calculates V1, V2 as in
eq.(8) and eq.(9). Then the fair payment platform inspects the
validity of R
by checking whether the eq.(10) holds. If the
result R
is valid, fair payment platform transfers the service
(cid:48)
fee and the deposits to cloud server and stores the result R
.
Otherwise, fair payment platform transfers the service fee and
the deposits to the client. The client downloads the valid result
R
on fair payment platform and recovers the result ω as
ω = P1P2...PkR

y.

(cid:48)

(cid:48)

Remark 1: Note that we use the elementary transformation
matrices to illustrate the elementary transformations. In fact,
when implementing the scheme, we directly conduct elemen-
tary transform a matrix instead of multiplying the matrix by
a elementary transformation matrix. The reason is that multi-
plying the input matrix by a elementary transformation matrix
will produce many unnecessary extra scalar multiplications.
For example, if we multiply the input X by P3 in eq.(15), the
elements of X will be multiplied by the elements 0 and 1 in
P3. However, these scalar multiplications are unnecessary and
time-consuming. Thus, we directly add the elements of the
ﬁrst column multiplied by three to the elements of the third
column.

C. Correctness Analysis

We denote P as P = P1P2...Pk and Q as Q = Qk...Q2Q1,
respectively. Notice that the client recovers the results R from
R(cid:48) as R = P1P2...PkR(cid:48), where

P1P2...PkR(cid:48) = P R

(cid:48)

= P (X2X1)−1X2
= P (QX T XP )−1QX T
= P P −1(X T X)−1Q−1QX T
= (X T X)−1X T

Thus, the recovered R is the original computation output.
We now prove the correctness of the veriﬁcation process.
Blockchain inspects the validity of R(cid:48) by checking whether
V1 = V2R

, where

(cid:48)

P3 =


1


0



0


0











0 3 0

1 0 0

0 1 0

0 0 1

(16)

(cid:48)

V2R

= rX2X1(X2X1)−1X2
= rX2
= V1

The constructions of P4, ..., Pk, Q4, ..., Qk share the same
logic with P3. Then the client preserves these elementary
transformation matrices as privacy keys. To blind the com-
putation input X and X T , the client computes X1 and X2 as
in eq.(5) and eq.(6). Note that the eq.(5) is calculated from
left to right, while the eq.(6) is calculated from right to left.
Then, client uploads the computation task F (X1, X2) and pays
service fee to fair payment platform. Cloud server accepts
F (X1, X2) on fair payment platform and makes deposits to
fair payment platform. Then, the cloud server performs the
computation task as in eq.(7). After solving F (X1, X2), the
cloud server submits the result R
to the fair payment platform.

(cid:48)

Thus, if V1 = V2R

(cid:48)

, the returned result is correct.

D. Security Analysis

Theorem 1: The presented algorithms EF P − SOLR is

input/output private.

Proof. We ﬁrst analyze the privacy of inputs in our scheme,
which are X and X T . In our scheme, the client transforms X
into X1 via multiplying a series of elementary transformation
matrices. Note that these elementary transformation matrices
are randomly chosen. Each element in X is obscured com-
pletely. Thus, cloud server is not able to retrieve X from X1

TABLE I: Time cost of phases.

ProbGen

Compute

Verify

Recover

SM

AS

2(k − 1)mn + (k − 2)(m + n) m2n + n3 + mn2

3mn

kmn + (k − 2)n

2mn

0

0

mn

6

without the series of elementary transformation matrices. No-
tice that X T is also obscured by the elementary transformation
matrices. We assume that the cloud server can correctly guess
an element of input/output matrices with a probability of 1
δ .
In fact, the probability is very small because the elements of
input/output matrices are real number. Therefore, for the inputs
X and X T , the probability that cloud could correctly guess
the input X or X T is negli(mn) = 1
δmn . For the output R, R
is equal to P R
. The cloud server can reveal the real result R
only if the cloud server gets the private key SKP . However,
the SKP is stored at the client side. The probability that cloud
is able to correctly guess the result R is negli(mn) = 1
δmn .
As we all have observed, for any valid input (X, X T ) and
output (R), the probability that cloud could correctly guess the
inputs or outputs both are nonpolynomial-time function. Thus,
the probability that the cloud server reveals input (X, X T ) or
output (R

) is negligible.

(cid:48)

(cid:48)

E. Efﬁciency Analysis

Theorem 2: The proposed algorithm EF P − SOLR is
(3(k − 1)mn + (k − 2)(m + 2n))/(m2n + n3 + mn2) efﬁcient.
Proof. We analyze the efﬁciency of our scheme as shown
in Table I. We assume scalar multiplication as SM and
assignment operation as AS. We ignore calculating light
computations such as scalar addition. Actually, AS consumes
less time than SM . In the step ProbGen, client executes
2(k − 1)mn + (k − 2)(m + n) SM and 2mn AS. In the
step Compute, cloud server executes m2n + n3 + mn2 SM .
In the step Verify, fair payment platform executes 3mn SM .
In the step Recover, client executes (k −1)mn+(k −2)n SM
and mn AS. Therefore, client executes total 3(k−1)mn+(k−
2)(m + 2n) SM and 3mn AS. Cloud server executes total
m2n + n3 + mn2 SM . The complexity of client executing
without outsourcing algrithm is as high as the complexity
of cloud server executing the step Compute. Fair payment
platform executes 3mn SM . Thus, according to deﬁnition 3,
EF P − SOLR is ((3(k − 1)mn + (k − 2)(m + 2n))/(m2n +
n3 + mn2)) efﬁcient.

Theorem 3: The proposed algorithms EF P − SOLR is

100 %-veriﬁable secure outsourcing algorithm

Proof. According to deﬁnition 4, we need to prove that if
a cloud server performs malicious behavior, the probability
that fair payment platform can detect the malicious behavior
is 1. Fair payment platform performing V erif ication sub-
algorithm needs four parameters including r, X1, X2 and R
.
Parameter r is produced by himself. Parameter X1 and X2 are
produced by client. Only parameter R
is produced by cloud
server. Thus, fair payment platform can completely detect
the malicious behavior by checking if the eq.(10) not holds.

(cid:48)

(cid:48)

Communication cost. Table. II. shows communication cost
of EF P − SOLR alogorithms. In EF P − SOLR algorithm,
client sends the blind matrix X1 ∈ Rm×n and X2 ∈ Rn×m to
cloud server in the phase P robGen. In the phase Compute,
∈ Rn×m in terms of
cloud server computes the result R
= (X2X1)−1X2. And then, cloud server returns R
R
to
client. Client conducts phase V erif y and Recover locally.
Thus, there is no communication cost in V erif y and Recover.

(cid:48)

(cid:48)

(cid:48)

TABLE II: Communication cost

EF P − SOLR

ProbGen

Compute

Verify

Recover

C

X1,X2−−−−→ CS
CS R

(cid:48)
−→ C

0

0

V. SYSTEM IMPLEMENTATION

In this section, we introduce the implementation details of
the developed system. We ﬁrst describe the system archi-
tecture, then we show an example of the developed smart
contract.

A. System Implementation Architecture Diagram

Fig. 2 shows the architecture of the developed fair payment
system, which consists four layers. The front-end UI layer
provides the graphical user interface for users. We develop
a series of scripts written in AngularJS to realize ajax in-
teraction. Ajax uses HTTP requests to realize asynchronous
data transmission between the browser and the web server.
Web3.JS is a JavaScript library provided by Ethereum, which
provides the interface for front-end javascripts to interact with
the smart contract functions. We use MetaMask to manage
the ethereum account. MetaMask is a plug-in wallet for web
browsers that allows users to interact with the Ethereum
blockchain; The logical layer includes a series of functions. It
receives requests from UI layer and executes the corresponding
functions. These functions are provided by the web server
and smart contract. We develop the web server in NodeJS
and develop the smart contract in Solidity. The web server
interacts with the database while the smart contract interacts
with the Ethereum Blockchain; Data Storage Layer provides
data interaction to the Logical layer. The data is stored in
database or Ethereum Blockchain. Speciﬁcally, it stores the

7

ID. Flag f lag is the veriﬁcation outcome, which determines
whether the calculation result passed the veriﬁcation. When
the value of f lag is 1, smart contract will transfer the service
fee and deposits to cloud server. When the value of f lag is
0, smart contract will transfer the service fee and deposits to
client. The variable task is a structural body which contains
all the information of a task. status is an attribute of task,
which represents the status of task. When status equals 0,
it means that the task is uploaded by the client and has not
been taken by any cloud server yet. When the value of status
is 1, it represents that the task has been taken but not solved
yet. When the value of status is 2, it means that the task has
been correctly conducted by a cloud server. When the value
of status is 3, it means that a cloud server returned an invalid
result of the task. T asks is a mapping which maps the variable
type uint to the variable type struct. addr is a variable of type
address, which represents an Ethereum address to receive
ether. e is an ether unit. SerP lusDep represents the sum of
service fee and deposits.

B. System Demonstration

Fig. 3 demonstrates the developed system. To outsource
a computation task, the client submits the computation task
as shown in Fig. 3(a). The client input the service fee and
two matrices. In this example the client pays ﬁve ethers for
a LR computation task. When the client clicks the Submit
button, MetaMask will package the transaction as shown
in Fig. 3(b). In Fig. 3(b), client uses an ethereum address
(0x8fO61A...2963) to transfer ﬁve ethers as serve fee to smart
contract address (0xc86d77...1347). Client and cloud server
can view all tasks in the task list as shown in Fig. 3(c). The
task list shows all task information including Taskid, Serve
Fee and Matrix. Client and cloud server can view detailed
matrix by clicking on the following link. In Fig. 3(d), the cloud
server input the task ID to claim a computation task. Then the
fair payment system will show the deposits, which is equal to
the service fee. When the cloud server clicks the COMFIRM
button, MetaMask also packages the transaction, which is
similar to Fig. 3(b). In this transaction, the cloud server uses
an ethereum address (0xb2b04a...240B) to transfer ﬁve ethers
as deposits to smart contract address (0xc86d77...1347). After
completing the task, cloud server submits the result as shown
in Fig. 3(e). Cloud server input the task ID and uploads a
txt ﬁle which stores the result. After cloud server clicks the
CONFIRM button, MetaMask still packages the transaction
which is similar to Fig. 3(b). Finally, smart contract checks
the validity of result and transfers deposits and service fee to
the corresponding address.

VI. EXPERIMENTAL PERFORMANCE EVALUATION

Fig. 2: System Implementation Architecture

basic information (e.g. user-name, user-password and user-
ID) in the database, and stores crucial calculation related
data (e.g. task-parameters and server fee) on the blockchain.
Our fair payment system runs on Ubuntu 18.04 LTS. We use
Ganache to simulate Ethereum Blockchain, which is a private
Ethereum blockchain for developers that can be used for local
deployment of smart contracts.

Listing. 1: Solidity code of the Payment function

t a s k i d ,

t a s k = T a s k s [ t a s k i d ] ;

v a r
a d d r e s s a d d r ;
u i n t e = 1 e t h e r ;
u i n t S e r P l u s D e p = t a s k . S e r v F e e +
t a s k . D e p o s i t ;
i f ( f l a g == 1 ) {

1 f u n c t i o n Payment ( u i n t
2 u i n t CID , u i n t 8 f l a g ) p a y a b l e {
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17 }

t a s k . s t a t u s = 3 ;
a d d r = t a s k . C l i e n t a d d r ;
a d d r . t r a n s f e r ( S e r P l u s D e p * e ) ;

t a s k . s t a t u s = 2 ;
a d d r = t a s k . C l o u d a d d r ;
a d d r . t r a n s f e r ( S e r P l u s D e p * e ) ;

} e l s e {

}

Listing. 1 shows the Solidity code of function P ayment,
which takes three input parameters including taskid, CID,
f lag. taskid is the task ID and CID is the cloud server

In this section, we evaluate the practical performance of our
proposed scheme. We ﬁrst describe the evaluation methodol-
ogy, then show the evaluation results.

8

(a) Submit Task

(b) Transaction

(c) Tasks List

(d) Claim Task

(e) Submit Result

Fig. 3: System Demonstration

A. Evaluation Methodology

In our experiments, we conduct the simulation of all phases
of our scheme on a Windows machine. Speciﬁcally, the testbed
is with the Windows 10 on an i5-6500 at 3.20GHz with
8GB memory. We use python to implement our proposed
algorithms. We execute the experiment 20 times and calculate
the average execution time.

B. Evaluation Results

We present the evaluation results for EF P − SOLR in
Fig. 4. The size of the matrix X ranges from 2000 × 1500
to 5500 × 5000. Fig. 4(a) compares time cost between
EF P − SOLR and conducting the LR without-outsourcing at
the client. We can observe that our proposed EF P − SOLR
costs much less time. Fig. 4(b) shows time cost comparison
among different phases. Obviously phase P robGen is the
most
time-consuming. The reason is that as discussed in
Section IV, the P robGen phase requires more scalar mul-
tiplications than other phases. In the Fig. 4(c), we com-
pare the time cost among three elementary transformations.
M ultiplication and Addition are mainly composed of scalar
multiplications, while P ermutation is mainly composed of
assignment operations. M ultiplication performs much few
scalar multiplications than Addition. Thus, there is a sig-
niﬁcant difference between M ultiplication and Addition.
P ermutation consumes less time than M ultiplication. The
reason is that the assignment operation consumes less time
than scalar multiplication.

VII. APPLICATIONS

In this section, we discuss possible applications where our
proposed scheme can be applied. Linear regression has been
applied in many applications, such as face recognition [8] and
disease prediction [9]. In these applications, data involved in
machine learning often contain some sensitive information.
Thus, when users use a cloud server to accomplish time-
consuming machine learning, data security faces critical chal-
lenges. To protect the data security while leveraging the cloud
server, our proposed scheme can be applied.

For example, Naseema et al.

in [8] proposed a novel
approach of face identiﬁcation by formulating the pattern
recognition problem in terms of linear regression. The data-
set is shown is Fig. 5. The features of a person’s face are
supposed to be private information, especially when the face
identiﬁcation is applied in military uses, the leak of the training
data may cause serious losses. Thus, to ensure data security,
we can apply our proposed secure outsourcing algorithm to
accomplish the face identiﬁcation. By doing so, the user can
efﬁciently accomplish the face identiﬁcation with the help of
a cloud server, while the data privacy, result veriﬁability and
payment fairness are ensured.

Fig. 6 shows a map of an Australia coastal site. Ali et al. in
[10] applied linear regression to develop a real-time signiﬁcant
wave height forecasting system. The geography data involved
in the forecasting system should be kept secret because of its
commercial value. Thus, we can apply our proposed secure
outsourcing algorithm to accomplish the signiﬁcant wave
height forecasting. Our algorithm can also be applied in many
other applications where the linear regression is in used, so
that the data security in those applications can be guaranteed.

VIII. RELATED WORK

A. Machine Learning And Linear Regression

Applying machine

learning approaches

to efﬁciently
analyze large scale of matrix data has allured increased
attention due to their special feature for facilitating pattern
recognition, classiﬁcation, and prediction. Regression and
multilevel/hierarchical models are widely implemented to
conduct data processing with linear or nonlinear regression
and multilevel models [11, 12]. In the past, a number of
machine learning and statistical methods have been proposed
to generate meaningful information on different datasets [13–
21]. For example, Huang et al.
[22] presented a novel
approach to compute special label features of multiple label.
They proposed a new augmented matrix using advanced
order label correlations and implement a multi-label classiﬁer
simultaneously to enhance multi-label classiﬁcation. Tu et al.
[17] proposed a multiple label answer aggregation method
which applied the Joint Matrix Factorization (JMF) to picky

9

(a) Time cost on the client

(b) Time cost comparison among phases

(c) Time cost comparison among phases

Fig. 4: Evaluation results for EF P − SOLR

Fig. 5: Georgia Tech face database [8]

Fig. 6: Map of Australia Coastal Sites [10]

and mutually factorizes the sample label bond matrices
collected from products of individual by different annotators.
There are also many research efforts focusing on improving
the efﬁciency and effectiveness of linear regression models
[13, 16, 16, 23, 24]. In a linear regression model, it is often
assumed that
the explanatory variables are independent.
Lukmanand et al. [24] proposed estimators based on Hoerl
and Kennard estimation techniques to improve the ridge
parameter. Fasoranbaku et al. [16] evaluated the basis of six
parameters and helped to improve more powerful experiment
appropriate for better parameters estimation of the LR. Chen
et al. [25] presented an approach to securely performing linear
regression on a cloud. However, their scheme can not hide
the number of element 0 in the process of blinding inputs.
Zhou et al. [26] introduced a secure method to outsourcing
linear regression. The proposed scheme protected the privacy
of inputs and outputs.

B. Secure Outsourcing Computations

There are extensive research efforts on a variety of secure
outsourcing schemes for scientiﬁc computations. For example,
Atallah et al. in [27] ﬁrst presented a generic structure for
the secure outsourcing of scientiﬁc computations. However,
their presented framework could not verify the correctness
of the result which calculated by cloud server. Chen et
al. in [28] designed a secure outsourcing approach for the
large-scale linear equations. Their approach used some special
sparse matrixes to blind the inputs and outputs. And the
approach allowed client to detect cheating behavior of cloud
servers with a probability of 100%. Salinas et al. in [29]
proposed a secure outsourcing method which allows resource-
constrained devices to solve large-scale sparse linear systems
of equations (SLSEs). The proposed method protected the
privacy of inputs/outputs and is efﬁcient comparing with other
schemes simultaneously. The computation cost of some basic
cryptographic operations is too heavy for resource-constrained
devices. To free these devices from such computations, a

number of research efforts have been conducted on how
to securely outsource cryptographic computations [30–34].
Hohenberger et al. in [32] proposed a security framework
for outsourcing cryptographic computations. Based on the
frameworkm, they proposed two practical outsource-secure
approaches. Zhang et al.
in [35] proposed two practical
algorithms to securely outsource the Cippola’s algorithm. The
proposed two schemes enable IoT devices to accomplish the
Cippola’s algorithm efﬁciently. Also, IoT devices can detect
the misbehavior of cloud servers with a probability of 1.
Yu et al. in [2] designed a cloud storage auditing scheme
which achieved the veriﬁable outsourcing of key updates.
In the presented scheme, the key updates was be able to
securely outsourced to an authorized entity, which reduced
the key-update burden on the user.

C. Blockchain

Blockchain technology enables secure, trusted, and decen-
tralized autonomous ecosystems for various scenarios. The
advanced blockchain technology has been widely leveraged in
machine learning to securely and efﬁciently collect, organzine
and audit the extensive quantities of data for model building
and accurate prediction [36–43]. Li et al. [37] presented a
security mechanics for distributed cloud storage based on
blockchain. In their framework, client could distribute all their
data into encrypted data blocks and send these data blocks
randomly to blockchain network. Juneja et al. in [41] imple-
mented blockchain technology to develop an access control
system in which classiﬁer can safely store and access data
during retraining in real-time using Stacked Denoising Au-
toencoders (SDA) networks. Kurtulmus et al. in [43] proposed
a blockchain-based model for exchanging machine learning
models. They used the Ethereum blockchain to create contracts
that offer a reward in exchange for a trained machine learning
model for a particular data set.

Shafagh in et al. [44] proposed a blockchain-based auditable
storage and sharing scheme of IoT Data. Their proposed
scheme provides distributed access control and data manage-
ment. Different from existing trust model that delegates access
control of our data to a centralized trusted authority, their
proposed scheme empowers the users with data ownership.
To provide a systematic review of blockchain technology in
IoT, Christidis et al. [45] explored how the combination of
Blockchain and Internet of Thing (IoT). In their research,
they stated that it will has a bright prospect and will lead
to signiﬁcant changes in multiple industries When Blockchain
and IoT are combined. In this paper, we employ the blockchain
as the middleman, which veriﬁes the calculation results and
guarantees the fairness and further ensure the security and
accuracy of our outsourcing algorithm. Lin et al.
in [46]
proposed a blockchain-based system to securely outsource the
billinear pairing. In the proposed system, the cloud server
can get paid for the computation task only when he correctly
performed the outsourced workload from the client.

10

IX. CONCLUSION AND FUTURE WORK

In this paper, we designed a secure, veriﬁable and fair
scheme to outsource a classical statistical machine learning
models: the linear regression. Similar practices can be applied
to other statistical machine learning models. The presented
scheme prevents the computation input and output from leak-
ing to cloud server, and the computation result is veriﬁable.
Also, fairness is guaranteed by the blockchain. We introduced
the presented approach detailedly and analyzed correctness,
security and efﬁciency of it. In addition, we developed the
fair, veriﬁable system on the Ethereum blockchain. To evaluate
our presented scheme, we carried out some experiments. The
experimental data indicate that our presented algorithm is
efﬁcient.

The cloud-aided machine learning faces security challenges,
including data privacy, result veriﬁability and payment fair-
ness. In this work, we studied the classic linear regression
as an example to show how to address these challenges.
To the best of our knowledge, there is no generic secure
outsourcing approach for all machine learning algorithms.
Fully homomorphic encryption (FHE) is a possible solution
for a generic secure outsourcing approach, but the efﬁciency
of the FHE is too low such that the FHE-based approach is not
practical. Thus, current researches focus on designing speciﬁc
outsourcing approaches for particular machine learning algo-
rithms. In our future work, we plan to explore other speciﬁc
machine learning algorithms, in which data privacy, result
veriﬁability and payment fairness are guaranteed. To enable
fair payment, we employ the blockchain technology, which
plays a role in our scheme to verify the computation result
and make a judgment accordingly. Notice that the blockchain
is a public ledger that anyone can view the content. Thus,
when designing such outsourcing algorithms,
the task on
the blockchain (the veriﬁcation process) cannot involve any
sensitive data. The outsourcing algorithms have to be publicly
veriﬁable.

ACKNOWLEDGMENTS

This research is supported by National Natural Sci-
ence Foundation of China (61572267), National Develop-
ment Foundation of Cryptography (MMJJ20170118), Key
Research and Development Project of Shandong Province
(2019GGX101051).

REFERENCES

[1] P. Zhao, J. Yu, H. Zhang, Z. Qin, and C. Wang, “How
to securely outsource the min-cut of undirected edge-
weighted graphs,” IEEE Transactions on Information
Forensics and Security, 2019.

[2] J. Yu, K. Ren, and C. Wang, “Enabling cloud storage
auditing with veriﬁable outsourcing of key updates,”
IEEE Transactions on Information Forensics and Secu-
rity, vol. 11, no. 6, pp. 1362–1375, 2016.

[3] G. Wood et al., “Ethereum: A secure decentralised gener-
alised transaction ledger,” Ethereum project yellow paper,
vol. 151, no. 2014, pp. 1–32, 2014.

[4] S. Nakamoto et al., “Bitcoin: A peer-to-peer electronic

cash system,” 2008.

[5] N. Szabo, “Formalizing and securing relationships on
public networks,” First Monday, vol. 2, no. 9, 1997.
[6] R. Gennaro, C. Gentry, and B. Parno, “Non-interactive
veriﬁable computing: Outsourcing computation to un-
trusted workers,” in Annual Cryptology Conference,
pp. 465–482, Springer, 2010.

[7] S. Hohenberger and A. Lysyanskaya, “How to se-
curely outsource cryptographic computations,” in Theory
of Cryptography (J. Kilian, ed.), (Berlin, Heidelberg),
pp. 264–282, Springer Berlin Heidelberg, 2005.

[8] I. Naseem, R. Togneri, and M. Bennamoun, “Linear
regression for face recognition,” IEEE Transactions on
Pattern Analysis and Machine Intelligence, vol. 32,
no. 11, pp. 2106–2112, 2010.

[9] S. Rath, A. Tripathy, and A. R. Tripathy, “Prediction of
new active cases of coronavirus disease (covid-19) pan-
demic using multiple linear regression model,” Diabetes
and Metabolic Syndrome Clinical Research and Reviews,
vol. 14, no. 5, 2020.

[10] M. Ali, P. Ramendra, X. Yong, and C. D. Ravinesh,
“Near real-time signiﬁcant wave height forecasting with
hybridized multiple linear regression algorithms,” Renew-
able and Sustainable Energy Reviews, vol. 132, 2020.

[11] H. Andrew, “Introduction to mediation, moderation, and
conditional process analysis : a regression-based ap-
proach,” 2013.

[12] A. Leona, W. Stephen G, and R. Raymond R., “Multiple
regression: Testing and interpreting interactions,” Journal
the Operational Research Society, vol. 45, no. 1,
of
pp. 119–120, 1994.

[13] Y. Eika, “Asymptotic properties of rank estimators in
a simple spatial linear regression model under spatial
sampling designs,” Japanese Journal of Statistics and
Data Science, vol. 1, no. 2, pp. 247–270, 2018.

[14] Z. Muhan and C. Yixin, “Inductive graph pattern learn-
ing for recommender systems based on a graph neural
network.,” arXiv preprint arXiv:1904.12058, 2019.
[15] G. Junning, Y. Shuwei, M. Hiroshi, and Z. Shanfeng,
“Aiproannotator: Low-rank approximation with network
side information for high-performance, large-scale hu-
man protein abnormality annotator,” in 2018 IEEE Inter-
national Conference on Bioinformatics and Biomedicine
(BIBM), pp. 13–20, 2018.

[16] F. O A and D. G O, “Towards a better estimation of
the parameters of linear regression models: The optimal
designed experiment approach,” International Journal of
New Technology and Research, vol. 4, no. 5, 2018.
[17] T. Jinzheng, Y. Guoxian, D. Carlotta, W. Jun, X. Guo-
qiang, and G. Maozu, “Multi-label answer aggregation
based on joint matrix factorization,” in 2018 IEEE Inter-
national Conference on Data Mining (ICDM), pp. 517–
526, 2018.

[18] B. Thirunavukarasu, N. Richi, and Y. Chau, “Understand-
ing urban spatio-temporal usage patterns using matrix

11

tensor factorization,” in 2018 IEEE International Confer-
ence on Data Mining Workshops (ICDMW), pp. 1497–
1498, 2018.

[19] L. Khanh, B. Thirunavukarasu, and N. Richi, “A novel
technique of using coupled matrix and greedy coor-
dinate descent for multi-view data representation,” in
International Conference on Web Information Systems
Engineering, pp. 285–300, 2018.

[20] Z. Rong, L. Guangshun, L. Jin-Xing, D. Ling-Yun,
Y. Shasha, and G. Ying, “A fast quantum clustering
approach for cancer gene clustering,” in 2018 IEEE Inter-
national Conference on Bioinformatics and Biomedicine
(BIBM), pp. 1610–1613, 2018.

[21] Z. Fengqing and L. Xingming, “The analysis of network
operation situation based on link trafﬁc matrices,” in
2018 11th International Symposium on Computational
Intelligence and Design (ISCID), pp. 370–373, 2018.
[22] H. Jun, Q. Feng, Z. Xiao, C. Zekai, Y. Zhixiang,
Z. Weigang, and H. Qingming, “Improving multi-
label classiﬁcation with missing labels by learning
label-speciﬁc features,” Information Sciences, vol. 492,
pp. 124–146, 2019.

[23] G. Alexandra M., M. Jean-Bernard, and M. Mihai-
Cosmin, “Towards better efﬁciency of interatomic linear
machine learning potentials,” Computational Materials
Science, vol. 166, pp. 200–209, 2019.

[24] F. L. Adewale and A. Kayode, “Some improved
classiﬁcation-based ridge parameter of hoerl and kennard
estimation techniques,” West African Journal of Indus-
trial and Academic Research, vol. 16, no. 1, 2016.
[25] F. Chen, T. Xiang, X. Lei, and J. Chen, “Highly efﬁcient
linear regression outsourcing to a cloud,” IEEE transac-
tions on cloud computing, vol. 2, no. 4, pp. 499–508,
2014.

[26] L. Zhou, Y. Zhu, and K.-K. R. Choo, “Efﬁciently and
securely harnessing cloud to solve linear regression and
other matrix operations,” Future Generation Computer
Systems, vol. 81, pp. 404–413, 2018.

[27] M. J. Atallah, K. N. Pantazopoulos, J. R. Rice, and
E. E. Spafford, “Secure outsourcing of scientiﬁc compu-
tations,” Advances in Computers, vol. 54, pp. 215–272,
2002.

[28] X. Chen, X. Huang, J. Li, J. Ma, W. Lou, and D. S.
Wong, “New algorithms for secure outsourcing of large-
scale systems of linear equations,” IEEE Transactions
on Information Forensics and Security, vol. 10, no. 1,
pp. 69–78, 2015.

[29] S. Salinas, C. Luo, X. Chen, W. Liao, and P. Li, “Efﬁcient
secure outsourcing of large-scale sparse linear systems
of equations,” IEEE Transactions on Big Data, vol. PP,
no. 99, pp. 1–1, 2017.

[30] X. Chen, W. Susilo, J. Li, D. S. Wong, J. Ma, S. Tang,
and Q. Tang, “Efﬁcient algorithms for secure outsourc-
ing of bilinear pairings,” Theoretical Computer Science,
vol. 562, pp. 112–121, 2015.

[31] D. Chaum and T. P. Pedersen, “Wallet databases with

12

[45] C. Konstantinos and D. Michael, “Blockchains and smart
contracts for the internet of things,” IEEE Access, vol. 4,
pp. 2292–2303, 2016.

[46] C. Lin, D. He, X. Huang, X. Xie, and K.-K. R. Choo,
“Blockchain-based system for secure outsourcing of bi-
linear pairings,” Information Sciences, vol. 527, pp. 590–
601, 2020.

observers,” in Proceedings of Annual International Cryp-
tology Conference, pp. 89–105, Springer, 1992.

[32] S. Hohenberger and A. Lysyanskaya, “How to securely
outsource cryptographic computations,” in Proceedings
of Theory of Cryptography Conference, pp. 264–282,
Springer, 2005.

[33] H. Tian, F. Zhang, and K. Ren, “Secure bilinear pairing
outsourcing made more efﬁcient and ﬂexible,” in Pro-
ceedings of the 10th ACM Symposium on Information,
Computer and Communications Security, pp. 417–426,
ACM, 2015.

[34] B. Chevallier-Mames,

J.-S. Coron, N. McCullagh,
D. Naccache, and M. Scott, “Secure delegation of
elliptic-curve pairing,” in Proceedings of International
Conference on Smart Card Research and Advanced Ap-
plications, pp. 24–35, Springer, 2010.

[35] H. Zhang, J. Yu, C. Tian, G. Xu, P. Gao, and J. Lin,
“Practical and secure outsourcing algorithms for solving
quadratic congruences in internet of things,” IEEE In-
ternet of Things Journal, vol. 7, no. 4, pp. 2968–2981,
2020.

[36] Y. Yong and W. Fei-Yue, “Blockchain and cryptocurren-
cies: Model, techniques, and applications,” systems man
and cybernetics, vol. 48, no. 9, pp. 1421–1428, 2018.

[37] L. Jiaxing, W. Jigang, and C. Long, “Block-secure:
Blockchain based scheme for secure p2p cloud storage,”
Information Sciences, vol. 465, pp. 219–231, 2018.
[38] W. Shuai, O. Liwei, Y. Yong, N. Xiaochun, H. Xuan, and
W. Fei-Yue, “Blockchain-enabled smart contracts: Archi-
tecture, applications, and future trends,” IEEE Transac-
tions on Systems, Man, and Cybernetics, pp. 1–12, 2019.
[39] T. Zhihong, L. Mohan, Q. Meikang, S. Yanbin, and
S. Shen, “Block-def: A secure digital evidence frame-
work using blockchain,” Information Sciences, vol. 491,
pp. 151–165, 2019.

[40] H. Butian, L. Zhenguang, C. Jianhai, L. Anan, L. Qi, and
H. Qinming, “Behavior pattern clustering in blockchain
networks,” Multimedia Tools and Applications, vol. 76,
no. 19, pp. 20099–20110, 2017.

[41] J. Amit and M. M. Michael, “Leveraging blockchain for
retraining deep learning architecture in patient-speciﬁc
arrhythmia classiﬁcation,” in 2018 IEEE EMBS Interna-
tional Conference on Biomedical and Health Informatics
(BHI), pp. 393–397, 2018.

[42] I. Tsuyoshi,

“Collaborative

anomaly detection on
blockchain from noisy sensor data,” in 2018 IEEE
International Conference on Data Mining Workshops
(ICDMW), pp. 120–127, 2018.

[43] K. A. dBesir and D. Kenny, “Trustless machine learning
contracts; evaluating and exchanging machine learning
models on the ethereum blockchain.,” arXiv preprint
arXiv:1802.10185, 2018.

[44] H. Shafagh, B. Lukas, H. Anwar, and D. Simon, “To-
wards blockchain-based auditable storage and sharing
the 2017 on Cloud
of iot data,” in Proceedings of
Computing Security, pp. 44–50, 2017.

