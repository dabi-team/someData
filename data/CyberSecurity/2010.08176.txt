0
2
0
2

t
c
O
6
1

]

R
C
.
s
c
[

1
v
6
7
1
8
0
.
0
1
0
2
:
v
i
X
r
a

Flexible, Decentralized Access Control for Smart Buildings
with Smart Contracts

LEEPAKSHI BINDRA, KALVIN ENG, OMID ARDAKANIAN, and ELENI STROULIA, Univer-
sity of Alberta, Canada, Canada

Large commercial buildings are complex cyber-physical systems containing expensive and critical equipment
that ensure the safety and comfort of their numerous occupants. Yet occupant and visitor access to spaces and
equipment within these buildings are still managed through unsystematic, inefficient, and human-intensive
processes. As a standard practice, long-term building occupants are given access privileges to rooms and
equipment based on their organizational roles, while visitors have to be escorted by their hosts. This ap-
proach is conservative and inflexible. In this paper, we describe a methodology that can flexibly and securely
manage building access privileges for long-term occupants and short-term visitors alike, taking into account
the risk associated with accessing each space within the building. Our methodology relies on blockchain
smart contracts to describe, grant, audit, and revoke fine-grained permissions for building occupants and
visitors, in a decentralized fashion. The smart contracts are specified through a process that leverages the
information compiled from Brick and BOT models of the building. We illustrate the proposed method through
a typical application scenario in the context of a real office building and argue that it can greatly reduce the
administration overhead, while, at the same time, providing fine-grained, auditable access control.

CCS Concepts: • Security and privacy → Security services; • Computer systems organization → Em-
bedded and cyber-physical systems; Sensors and actuators.
Additional Key Words and Phrases: Blockchain; Smart Contracts; Access Control; Ontology; Smart Buildings

1 INTRODUCTION
Modern commercial buildings are complex cyber-physical systems. They are increasingly being
equipped with sensors and actuators, ranging from surveillance cameras and card readers for secu-
rity and access control, to thermostats and air-quality sensors feeding into the Heating, Ventilation,
and Air Conditioning (HVAC) system, which controls the indoor environment while maintaining
occupants comfort [5, 16]. These buildings represent substantial financial investments and the
management of their security is even more critical compared to older buildings.

Reasoning about and managing access to these buildings require different access policies for
different types of users. For example, as a standard practice, long-term building occupants such as
employees who work in the building are given access privileges to their offices and shared spaces,
based on their organizational roles; on the other hand, facilities-management personnel typically
have access to the more restricted spaces where equipment is installed and also to the Building
Management System (BMS) which enables them to monitor and control the equipment settings.
Occupants may access the sensing and control devices, such as light switches and thermostats, in
the spaces to which they have physical access even though these devices may impact building areas
beyond the room in which they are physically located; for example, a thermostat located in a room
can determine the temperature setpoint of multiple adjacent rooms. Finally, visitors tend to have
limited access, and are frequently required to be escorted by building occupants to the meeting
rooms where their business is taking place; they might control equipment in these rooms, but only
for the duration of their meeting. In large commercial buildings, this approach implies substantial
administrative overhead and exposes the building infrastructure to various security threats.

Ideally, an automated solution is needed to efficiently manage the access privileges of a building’s
occupants. Traditional role-based access-control models adopted in existing access control systems

Authors’ address: Leepakshi Bindra, leepaksh@ualberta.ca; Kalvin Eng, kalvin.eng@ualberta.ca; Omid Ardakanian,
ardakanian@ualberta.ca; Eleni Stroulia, University of Alberta, Canada, Edmonton, Canada, stroulia@ualberta.ca.

 
 
 
 
 
 
2

Bindra, et al.

are unwieldy, in that they require the specification of all roles and their relative authority, which is
a challenge in large buildings occupied by multiple organizations, each one with their own different
role hierarchy [10]. In this paper, we propose a methodology for managing building access control
inspired by the concept of airline boarding-passes and the workflows around them. At any point in
time, the airport is used by numerous airlines that manage their own flights at their corresponding
gates and are responsible for issuing boarding passes to their passengers. Boarding passes become
available shortly before passengers travel, enabling passengers to go through security, access their
gate, and board their plane at the right time. Each boarding pass is associated with an individual
traveller, and is valid only during a short period before the flight departure. During this period,
security personnel are able to scan and verify the boarding pass. This methodology is envisioned
to be implemented independent of any pre-existing access control delegation strategies, but still be
co-existent with already implemented access control systems.

Our methodology can flexibly and securely manage building access privileges for long-term
occupants and short-term visitors alike, addressing the challenges and risks mentioned above. We
establish a set of services for fine-grained decentralized management of people’s access privileges
within a commercial building. We use the term fine-grained to mean (a) person-centric instead of
role-based, (b) tailored to different space/system granularities, and (c) spanning multiple timescales.
The underlying intuition for this work is that if a person is authorized to have physical access to a
particular location in a building, then they also have access and opportunity to manipulate the sensors
and control points in this space. This is because, in most cases, there is no additional access-control
beyond placing the equipment behind a locked door. Also by implication, if a person should not have
access to some control points, they should not be authorized to access the space where this equipment is
located.

Our methodology relies on blockchain smart contracts to describe, grant, audit, and revoke
fine-grained permissions for building occupants and visitors in a decentralized fashion [3]. The
smart contracts are specified through a process that leverages the information compiled from the
BOT [32] and Brick [6] models of the building’s spatial structure, equipment, and their relations.
This information enables our methodology to grant an individual with just the right access privileges
to let them reach their destination within the building. We implement this intuition in the form of
smart contracts, through which space-access privileges are given to (and revoked from) individuals
using an API that can be invoked by different software applications. The underlying access-control
service is responsible for accepting or rejecting individual access requests based on the currently
valid smart contracts and their implications regarding access to sensors and actuators. We illustrate
the proposed method through a typical use case in the context of a real building and we argue that
it can greatly reduce the administration overhead, while at the same time providing fine-grained,
auditable access control.

The rest of this paper is organized as follows. Section 2 provides an overview of the context around
our work. Section 4 describes in detail our methodology for smart-building access control using a
graph model for reasoning, and blockchain smart contracts for managing access. Section 5 examines
the implementation of the proposed work along with use cases in which the proposed solution
can greatly enhance the authorization and access control procedures in a real building. Section 6
evaluates the performance of the proposed solution in terms of throughput and delay. Section 7
presents practical considerations for using blockchain-based access control. Section 3 discusses
related work on authorization and access-control solutions developed for the built environment.
The paper concludes with an overview of the key contributions of our work and our plans for
future work in Section 8.

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

3

2 BACKGROUND
We review key concepts and technologies on which our method relies in this section. Access-control
privileges are managed through smart contracts implemented on a private Ethereum blockchain [11].
The reasoning process producing the smart contract as a sequence of doors, spaces and devices
accessible to the visitor relies on the building’s information captured in the BOT and Brick models.

2.1 Access-Control Paradigms
Access control regulates what resources users may use, based on their assigned privileges. In
principle, there are three general mechanisms for reasoning about what permissions should be
given to a user. Extensions to these paradigms include risk-aware access control which associates
a cost to providing access, and access control using building information models (BIMs) which
incorporates the knowledge of building into access control.

Role-based access control relies on an explicit, and fairly static, list of organization roles associ-
ated with privileges. In this model, each user is associated with a role, which entitles them to a
set of privileges corresponding to their role(s) [36]. Commercial buildings usually host multiple
organizations, each of which defines its own role hierarchy which is relevant to the areas of the
building that it occupies; as a result, there is no single role hierarchy that pertains to the building
as a whole. Furthermore, often times there is no single central authority who can manage roles for
all building spaces.

Risk-based access control is a model where users are granted access to resources based on a
scoring function that dynamically and contextually quantifies risk implicit in this privilege [23].
This approach to access control is more relevant in dynamic environments, where the specific
context of the access request should inform whether the request may be honored or not. Buildings
are not that dynamic and, in principle, a more explicit, less contextual, access-control mechanism
is desirable.

Attribute-based access control grants access rights to users through the use of policies that
combine together (with logical operators) different user, resource, object, and environment at-
tributes [41]. In our work, we adopt this paradigm to develop a cost function that represents the
sensitivity of building spaces based on their function and equipment they contain. A room with
many control points, occupied by an employee in a position of authority in the organization, is more
sensitive (and is, therefore, associated with a higher cost) than the building’s reception for example.
In principle, this cost function enables access-control policies to be defined based on sensitivity
ranges. It also enables one to reason about the relative sensitivity of spaces and rationalize the
access-granting process.

2.1.1 Risk-Aware Access Control. In risk-aware access control, a risk (defined by a cost function) is
associated to each user who wishes to access resources. It is then compared against a predetermined
threshold, before the user is granted access. This differs from traditional access control models that
have predefined policies set for granting access and can be more permissive. The problem arises
when “low-risk” users are automatically granted access to resources that were never intended to be
accessed by them. In this work, instead of associating risks to users, we adopt a cost function to
help develop access control policies where the acceptable risk level can be defined a priori.

Several cost functions have been proposed for access control. Chen et al. [14] propose cost
functions for defining risk that incorporate the trustworthiness of a user, the degree of competence
of a user with respect to a particular user-role assignment, and the degree of appropriateness
of a permission-role assignment for a given role. Salim et al. [35] consider the monetary value
of a resource or an inferred impact of misusing it (when monetary value is unavailable) as a
basis for their cost function. Bijon et al. [9] propose a risk-based access control framework that

4

Bindra, et al.

incorporates the quantified risk for granting access and specific thresholds calculated based on
attributes, purpose, and situational factors. Inspired by these cost functions, we take semantics and
relationships of spaces and resources into account when defining the amount of risk associated
with accessing spaces and resources therein.

2.1.2 BIM-based Access Control. Access control policies can be developed leveraging BIM. Skand-
hakumar et al. [39] provide a review of spatio-temporal access control models and propose an
authorization framework that involves (a) modeling of spatial data in BIM, (b) creation of access
policies based on BIM, and (c) authorization of these policies. In particular, the authors introduce
‘contains’, ‘connected’, ‘adjacent’, and ‘accessible’ relationships between building elements which
are accounted for when reasoning about access policies. To capture the relationships between
spaces in a building, BIM is transferred to a graph model in [37]. Despite the novelty of this model,
it does not incorporate concepts such as sensors, actuators, and building subsystems which can be
affected by people who are given access to the building spaces. To specify access control policies,
the use of ‘eXtensible access control markup language’ (XACML) is proposed in [38]. XACML is
a standard language for specifying and evaluating access requests. Our proposed smart contract
solution is similar to XACML in that we separate authorization across different services and provide
a template smart contract to execute access requests.

2.2 Blockchain and Smart Contracts
Blockchain is a distributed and shared ledger that serves as an irreversible and incorruptible public
repository [27]. It enables the occurrence of a particular transaction without requiring a central
authority. Compared to traditional database systems, it offers three major advantages:

• As a distributed system, blockchain eliminates the need for a costly infrastructure that relies
on prox cards for occupants and requires one of these occupants (or dedicated security
personnel) to escort visitors to their meeting locations using their own prox cards.

• Blockchain does not require a trusted third party to certify transactions, thanks to public-key
cryptography and a consensus mechanism. This allows digital transactions to occur between
parties that do not have pre-established trust relations, i.e., trustlessness.

• The state stored in blockchain is immutable due to the use of cryptographic hash functions.
A smart contract is executable code that runs on a blockchain to facilitate, execute, and enforce
the terms of an agreement between different parties. It can also be used to encode an arbitrary
state-transition function. Each contract is assigned a unique address. Users can send a transaction
to this address for execution. A callback function is executed when a transaction execution request
is received. If the transaction is successfully completed, the contract’s state is updated. Otherwise,
any changes made to the state are reverted.

The development of smart contracts is supported by many blockchain platforms, Ethereum [11]
being the most well known and, perhaps, the most broadly adopted one. Ethereum provides an
abstract foundation layer for smart-contract development: a blockchain with a built-in Turing-
complete programming language for the specification of smart contracts, with arbitrary rules for
ownership, transaction formats and state-transition functions. Ethereum has its own cryptocurrency
called ether and an internal currency to pay for computations and transaction fees called gas.

Drawing on [2] that argues for democratized access to the physical resources in buildings using
a blockchain, we utilize a private Ethereum blockchain to store the authorization graph of a specific
building. Executing a transaction (e.g., for adding or revoking users’ accesses) leads to a state
change and updates this graph. The delegation of trust can be performed by any user without
communicating with a central authority. The state can be read from the blockchain to verify access
for any user at any time.

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

5

Our proof-of-concept implementation uses a private Ethereum blockchain over a public blockchain
for performance and privacy reasons1. The private blockchain network is comprised of several
nodes representing different groups within an organization or different organizations housed in the
same commercial building. Compared to a centralized access control system which runs a private
server, it provides better transparency, availability, and robustness; there is no single trusted entity
and no single point of failure, the integrity of access-related data is always maintained and tenant
organizations can easily audit transactions. Although privacy is easier to achieve in centralized
systems, the private blockchain helps preserve privacy to some extent as only specific nodes
within the organization are allowed to connect to the network. We note that private permissioned
blockchains, such as the Hyperledger Fabric, and hybrid blockchains could provide advantages
similar to a private Ethereum blockchain and can be considered as alternative solutions.

2.3 Building Models
The lack of a common representation for buildings has historically hindered the development of
portable building applications. To address this issue, several standards for modelling building data
have been conceived in recent years, examples of which are Project Haystack [1] and Brick [6]. The
Brick schema [6] defines an ontology for describing the various building spaces and subsystems,
their components, and relationships between them. It defines three types of entities: locations,
equipment, and points. Locations are hierarchically organized, in terms of buildings, floors, and
rooms. Equipment may be composed of many parts and may be connected to other equipment
with certain functional relationships. They comprise complex building subsystems, such as HVAC,
lighting, and plumbing. Sensors and setpoints are two types of physical points that can generate
timeseries data and are used in control loops of different equipment.

Brick describes a building through a collection of triples (subject - predicate - object), following the
Resource Description Framework (RDF) data model. Each triple consists of two entities connected
with a relationship, which can be feeds, controls, hasPart, hasPoint, or isLocationOf. The
collection of such triples forms a directed graph, where nodes represent the entities and edges
represent the relationships between them. Figure 1 shows a subset of Brick entities and their
relationships in an example building. The RDF syntax allows for using SPARQL (the RDF query
language) to reason about various entities and relationships. For example, it is possible to retrieve
sensors and control points that are located in a specific room or floor of a building, and are used to
control the operation of a given Variable Air Volume (VAV) system.

Despite the effort to make Brick expressive enough to capture all important relationships between
different building entities, it does not capture the adjacency relationship between different spaces
in a building. This information is essential for building applications such as indoor path planning.
The Building Information Model (BIM) [40], which supports computational methods for designing
and constructing buildings, captures information about the building interior layout and adjacency
of rooms, but unlike Brick, it lacks mechanisms for describing functional relationships between
different entities [6]. BIM has been traditionally represented using the Industry Foundation Classes
(IFC) [7] data model designed to facilitate interoperability in the building industry. BIM exhaustively
describes composition of building subsystems, it leads to unnecessary complexity when capturing
information about a building. This has motivated the Linked Building Data (LBD) Community
Group2 to create the Building Topology Ontology (BOT) [32]. BOT is a minimal ontology for
describing the spatial structure of a building. It defines three types of entities, namely zones,

1Private blockchains can achieve better scalability than public blockchains, thanks to the limited number of participants
they have, and can minimize privacy concerns since only authorized users are allowed to connect and perform transactions.
Furthermore, the transaction cost can be less of a concern as it is not tied to the volatile cryptocurrency market.
2https://www.w3.org/community/lbd/

6

Bindra, et al.

elements, and interfaces, and captures relationships, such as adjacency and containment between
these entities. Zones are hierarchically organized in terms of sites, buildings, storeys, and spaces,
which are spatial 3D divisions used to model rooms. Elements are physical building components
such as doors and walls. An interface is the surface where two elements, two zones, or an element
and a zone meet. A subset of BOT entities and their relationships are depicted in Figure 1 for an
example building. Aligning BOT with Brick allows for creating a unified RDF model of building’s
structure and equipment, thereby enabling the use of SPARQL to reason about the sequence of
doors and rooms that need to be traversed to go from one location to another location in a building,
and equipment that can be accessed in these rooms.

3 RELATED WORK
Conventional methods for authentication, authorization, and revocation rely on a trusted central
authority. For example, the existing authorization method LDAP [43] uses Role-Based Access
Control (RBAC) with a single central authority. Kerberos [28] and Jabber [34] are similar in that
respect. Several systems are also developed to eliminate the central authority, examples of which
are CCN [21] and the Web of Trust [12, 13]. They adopt a decentralized peer-to-peer trust model
in which a principal, denoted by a public key, can publish a signature of another public key to
denote trust. SmartTokens [18] relies on a token-based access control system for NFC-enabled
smartphones, in which the delegation of access to other smartphone users can be accomplished
without a central authority. Although SmartTokens uses symmetric cryptography, users need to
present all delegated tokens through the delegation chain in order to be verified. In recent work [26],
a lightweight distributed authorization protocol is proposed supporting delegation of access right
to a smart device in the form of a Bloom filter. This method of delegation uses secured hashing to
prevent the permission from being forged.

RBAC-SC [15] performs role-based access control using blockchain and a challenge-response
protocol for authentication. FairAccess is a cryptocurrency blockchain-based access control frame-
work [30]. This work is different from ours as a distinct smart contract is created for the access
control policy of every resource-requester pair. Furthermore, they include the IoT devices in the
blockchain, whereas there are IoT devices that do not have the capabilities to run the blockchain
on them. In another line of work, a distributed architecture called ControlChain is proposed [31].
ControlChain enables the expression of a wide variety of access control models, such as RBAC [19],
OrBAC [22] and ABAC [20], deployed on IoT. This mapping is enabled due to the use of a Decoder
entity that automates the translation of access control model and rules to their supported mecha-
nisms. However, none of the these decentralized systems addresses how building metadata can be
linked with smart contracts to extend access control to spaces and equipment in the building.

3.1 Access Control in Buildings
Using smart contracts for authorization and delegation of trust was originally proposed in WAVE [2].
WAVE uses smart contracts and blockchain as a global ledger for all authorizations, Delegation
of Trust (DoT), and revocations, guaranteeing that all participants know the current state of all
permissions. The same transparency is achieved by our work. WAVE also supports out-of-order
and non-interactive delegation, which is replicated in our smart contracts. In [4], the authors’
experiments reveal that a Blockchain-based access control system will not scale to a global size.
They state that Blockchain introduces about a minute of latency when adding objects to Ethereum.
However, with a private blockchain for a small number of buildings, our solution works well
as described in our implementation since managing permissions is infrequent as compared to
accessing permission data. Also, the calendar application helps provide access well in advance,
reducing the effect of latency. To address the scalability issue that may arise in a large campus

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

7

comprised of several commercial buildings, other access control methods could be considered in
future work.

BOSSWAVE [3] builds on WAVE to provide democratized access to the physical resources in
buildings. Our system is similar to WAVE in that they both leverage blockchain technology. However,
using smart contracts for authorization to spaces and doorways apart from building subsystems
and equipment is novel in this work. We develop APIs to help interact with the smart contracts;
this will define fine-grained access control for any type of user.

4 METHODOLOGY
Our access-control methodology involves four steps: (1) creating a unified RDF graph of a building
by aligning the building’s BOT and Brick models; (2) identifying all possible paths between two
locations using a graph traversal algorithm which is implemented by a sequence of SPARQL
queries; (3) determining the cost of each path by running a number of SPARQL queries; (4) granting,
revoking, and verifying user permissions to access rooms and equipment therein using smart
contracts. These steps are implemented using three services [16]:

• Building-Representation Service determines the cost of an indoor-path using information

captured in the Brick model.

• Path-Planning Service relies on the BOT model to find all possible paths between two
given locations. These paths are presented to the user along with their costs, enabling the
user to choose a desired path.

• Access-Control Service specifies a smart contract, given a delegator, a delegate, a path
corresponding to a sequence of building spaces and doors between them, and a time period
during which the delegate should be able to access the resources on this path. It also handles
validation of a delegate’s authority to access a door, at run-time.

Below we explain our methodology using an application scenario and discuss how the above
services facilitate this application.

4.1 An Illustrative Application Scenario
Consider a simple application scenario, where a group of individuals are invited to a meeting that
takes place in a specific room of an office building. The process starts with a calendar invitation
created by the meeting host, listing the invitees using their email addresses, the room where the
meeting is to be held, and the time when it is to take place. The first step is to examine whether the
invited individuals are known to the access-control service: if not, new entities need to be created
to represent their credentials (Section 4.4). Next, the possible paths in the building to reach the
meeting room are computed (Section 4.2). In this paper, we only consider the problem of indoor
path planning, from a main building entrance to a meeting room; nevertheless, our methodology
can be extended to the overall problem of planning a path from each individual’s location, taking
into account their route preferences and parking needs, as long as the relevant information is
captured by some geospatial model. Each of these indoor paths is presented to the meeting host
along with a cost that represents the overall risk of giving the invited individuals access to the rooms
located on this path (Section 4.3) and the building elements (equipment, sensors, and setpoints) that
contribute to it. The host reviews the possible paths and selects the preferred pathway, which is by
default the path that has the lowest cost. The selected pathway is then transformed into a smart
contract (Section 4.4), where the meeting host delegates each invitee with the necessary privileges
to access the various doorways on the path, and a personalized QR code (akin to a boarding pass)
is generated to represent each contract. These QR codes are shared with each participant in the
calendar invitation.

8

Bindra, et al.

Fig. 1. The process of aligning Brick and BOT models. A sub-graph of the the Building Graph Model that
captures a complete use case in turtle format can be found in Appendix A.1.

Before the meeting occurs, each meeting participant arrives to the building and scans their
individual QR code to open doors on the path from the building entrance to the designated meeting
room. Each QR code scan invokes a request to the Ethereum ledger (Section 4.5) to verify that
the bearer is authorized to access the corresponding door at the present time, given that they
have already opened some other doors in a the order pre-specified by the indoor path selected by
the meeting host. If the meeting host has access to these rooms and had authorized the meeting
participants to access these rooms before the meeting, the access is verified and a control signal
is sent to the actuator, i.e., the electric door strike, to open the door. The process repeats for each
door along the path. We elaborate on these steps in the following.

4.2 Building Modeling for Access Control
The first step of our methodology is to create the BOT and Brick models of the building (if they do
not exist already) and align them to create a RDF graph queryable via SPARQL. This RDF graph
represents the relationships defined in both Brick and BOT. It allows for identifying pathways in
the building using a graph traversal algorithm and quantifying the cost-sensitivity of each pathway.
Figure 2 depicts the floor plan of an example commercial building occupied by a single organiza-
tion. We manually converted this floor plan into a RDF graph model of the building based on the
BOT ontology3. This model describes the building’s topology in terms of where rooms, doors, walls,
and other physical elements are located and their adjacency relations. The left panel of Figure 1
shows a small subset of nodes in the resulting RDF graph: two rooms of type Zone (subclass of
Space) and a door between them of type Element. Each room is connected to the door with the
adjacentElement relationship.

Similarly, we created the Brick model of the building in RDF. This involves extracting point names
and their types from the BMS, inferring functional relationships between different equipment, and
identifying their location from blueprints of the building. The middle panel of Figure 1 shows a small
subset of nodes in the resulting RDF graph: two rooms and a HVAC zone of type Location, a VAV
system of type Eqipment, and a temperature sensor, a temperature setpoint, and a reheat command

3Generating this model can be automated by using information from building information modeling software.

Room_1-1-120Room_1-1-121hasPartHVAC Zone_1-12feedsVAV_1-12hasPartTemperatureSensor_1-12TemperatureSetpoint_1-12Reheat Command_1-12hasPointisLocationOfisLocationOfcontrolshasPointhasPointRoom_1-1-120Room_1-1-121Door_1-1-12adjacentElementadjacentElementBOT NamespaceBrick NamespaceDelegateOccupantBuildingManagerAuthorization GraphDelegatorZoneElementEquipmentPointLocationcontrolsFlexible, Decentralized Access Control for Smart Buildings with Smart Contracts

9

Fig. 2. A Building’s floor plan showing 2 example pathways to a meeting room and the cost-sensitivity of
every room on these pathways.

of type Point. The VAV system is connected to the HVAC zone with the feeds relationship, as it
supplies air to this zone. The HVAC zone is comprised of the two rooms, so it is connected to them
with hasPart relationship. The temperature sensor and setpoint are located in one of these rooms
and are therefore connected to it via isLocationOf relationship. The reheat command is computed
based on the difference between the measured and setpoint temperatures and is used to actuate
the VAV system; thus, the temperature sensor and setpoint are connected to the command via
controls relationship, and the VAV is connected to all three of them via hasPoint relationship.
Once the Brick and BOT models are created, the next step is to align the two models that is
to ensure the entities corresponding to the same building location (e.g., room) in Brick and BOT
models are the same in both sets of triples. Otherwise, it would be impossible to reason about
which pathway enables access to which equipment, which is necessary for establishing our cost
function as discussed in Section 4.3. To this end, we identify syntactic entities that represent the
same semantic entity in the two graphs and join them to create a new entity. This new entity is a
subclass of Location in Brick and Space in BOT and therefore can be connected to entities defined
in both Brick and BOT. The borders around Room_1-1-120 and Room_1-1-121 in Figure 1 show the
new entities created by merging respective entities in Brick and BOT models.

4.3 Quantifying Sensitivity of a Space
The issue of facility security is quite complex, especially when buildings house expensive or sensitive
equipment. Intuitively, the characterization of the sensitivity of a space in terms of standard zones
defined in Section 4.3.1 considers the activities taking place in the space and possibly the role of its
occupants, but it does not consider the equipment housed in, or accessible through, the space. This
is why, our access-control methodology proposes a composite sensitivity function for each space
that integrates information about (a) equipment and subsystems a user may be able to potentially
control by accessing this space, (b) sensor readings a user may be able to read by accessing this

251011133332Room 1-1-102Room 1-1-101Room 1-1-100Room 1-1-112Room 1-1-114Room 1-1-178Room 1-1-184Room 1-1-152Room 1-1-150Room 1-1-ST3Room 1-1-144Room 1-1-1445Pathway 1Pathway 210

Bindra, et al.

Table 1. Zones and their corresponding requirements

Requirements

Monitoring
Screening Required
Clearly Separated

Public (0) Reception (1) Operations (2)

Security (3) High Security (4)

Security Zones

×

×
×

×
×
×

×
×
×

space, and (c) the security zone classification of this space according to Table 1. Through this
sensitivity quantification, we aim to help a delegator, such as the meeting host in our example
scenario, make informed decisions about providing access to the building spaces.

The RDF model of the building can be used to annotate each building location with its sensitivity
level. We assume that there are some broadly shared and agreed-upon principles for quantifying
the sensitivity of locations. This is a realistic assumption in this domain; in our work, we have
adopted the ‘Hierarchy of Zones’ as described in the ‘Operational Security Standard on Physical
Security’ of the Government of Canada4. We note that similar specifications exist in several other
countries, such as the United States5 and New Zealand6.

4.3.1 Defining Sensitivity of Security Zones. The Canadian standard defines five zones, as seen in
Table 1. Access to public zones, such as the grounds surrounding the building, do not need to be
controlled. Reception areas may be inaccessible to visitors, except during specific times of the day
or for specific reasons. Access to operations zones is limited to personnel who work there and to
properly escorted visitors. Security areas are limited to authorized personnel and to authorized
and properly escorted visitors. Finally, high-security areas are limited to authorized, appropriately-
screened personnel and authorized and properly-escorted visitors. The standard advises that both
security and high-security zones should be monitored 24 hours a day, and that zone levels should be
accessed in order, i.e., a high-security zone can only be accessed from a security zone.

We use the Zone entity in BOT to model different security zones that exist in a building. Consider
for example the rooms 1-1-100, 1-1-101, 1-1-102, 1-1-112, 1-1-114, 1-1-144, 1-1-150 in Appendix A.3.
Rooms 1-1-102, 1-1-101, 1-1-100 are considered as reception zones, since they are the locations
that visitors can access when coming from a public zone without any credentials. Room 1-1-112
is considered an operations zone, as only employees are allowed to access the area with proper
credentials. Connected to room 1-1-112 is room 1-1-114, which is considered to be a security zone,
as it is physically restricted from room 1-1-112 and additional credentials are required to access the
area. It should be noted that room 1-1-114 must be accessed from room 1-1-112, as a security zone
should only be accessed through an operations zone. Room 1-1-144 is an example of a high-security
zone that must be accessed from room 1-1-150 which is classified as a security zone.

To quantify the sensitivity of the five security zones mentioned above, we map them to an ordinal
scale of 0 to 4, with 0 being a public zone, which is not at all sensitive, and 4 being a high-security
zone, where access should be carefully controlled. We choose the ordinal scale because the order
of security zones signifies their relative importance (e.g., a high-security zone, labelled 4, is more
important than a public zone, labelled 3). Thus, each room/space in the building is associated with
the cost of its zone.

4https://www.tpsgc-pwgsc.gc.ca/esc-src/msi-ism/chap4-eng.html
5https://www.esd.whs.mil/Portals/54/Documents/DD/issuances/dodm/522022M.pdf
6https://www.protectivesecurity.govt.nz/physical-security/understand-the-physical-security-lifecycle/design/apply-
good-practices/security/

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

11

SELECT ?entity ?x
WHERE {

?entity rdfs:subClassOf ?x .
?x rdfs:subClassOf brick:Point .

}

Fig. 3. We obtain all the point types based
on the following SPARQL query which ob-
tains the first sub-class of the brick point
class in the graph model

Table 2. Weights of the two types of points modeled:
sensors and setpoints.
Sensors
Temperature_Sensor
Damper_Position_Sensor
Occupancy_Sensor
Humidity_Sensor
Setpoints
Temperature_Setpoint
Humidity_Setpoint
Air_Flow_Setpoint

Weight
0.347
0.204
0.246
0.204

0.413
0.260
0.328

4.3.2 Defining Sensitivity of Equipment and Points. Building subsystems and points should have
different sensitivity costs assigned to them. This is because some subsystems may control more
critical aspects of a building (e.g., the lighting system is less critical than the HVAC system), and
some points in a subsystem may be more important than others (e.g., using the thermostat to adjust
the temperature setpoint is more impactful to the building occupants than simply reading the value
of a temperature sensor).

To account for the fact that some equipment and points are more sensitive than others, we used
the Analytic Hierarchy Process (AHP) [33] to create a suitable scheme for weighting the sensitivity
of each type of equipment and sensing/control points. AHP is a decision-making technique that can
be used to prioritize the attributes relevant to a decision-making task: by pairwise comparing these
attributes, it helps stakeholders decide on the importance of each attribute relative to others. It has
been used for a wide variety of applications, including assessing risk in operating pipelines [17]
and quantifying the overall quality of software systems [25]. In principle, this process should be
undertaken by facility-management personnel in collaboration with building owners and occupants.
For this work, we answered the questions specified in Appendix B.1 on the scale defined in
Appendix B.2 to develop a list of weights for all types of points (sensors and setpoints) in our model.
These weights are shown in Table 2.

In addition to its type, the sensitivity cost of a particular piece of equipment or a sensing/control
point depends on what other, and how many, physical components they could impact. This intuition
is illustrated in Figure 1. In this figure, Temperature_Setpoint_1-12 is a Point element of type Setpoint
and Temperature_Sensor_1-12 is a Point element of type Temperature_Sensor. These are points
of the VAV_1-12 Equipment and are both located in Room_1-1-121. VAV_1-12 feeds fresh air into
HVAC Zone_1-12 which is of type Location. Room_1-1-120 and Room_1-1-121, which are also of type
Location, are parts of the HVAC Zone_1-12. In estimating the sensitivity of this room, we argue
that one would have to take into account the fact that VAV equipment can be impacted by the
actions of the room occupants, who may read the Temperature_Sensor_1-12 value and control the
Temperature_Setpoint_1-12. Thus, Room_1-1-121 is more sensitive than Room_1-1-120 and occupants
need to be aware of this when granting permissions to other occupants and visitors.

4.3.3 Defining Sensitivity of an Indoor Path. Finally, the overall sensitivity cost of a potential indoor
𝑝𝑎𝑡ℎ is calculated as the sum of all the costs of the rooms 𝑟 it includes based on their security zone
classification, plus the costs of all points 𝑝 located in the rooms 𝑟 . The total cost of each point 𝑝 is
initially assumed to be the value of 1, and increases with the number of rooms 𝑟 affected by point
𝑝. Furthermore, the cost is scaled by weight(𝑝), the sensitivity of the point as established through

12

Bindra, et al.

the AHP process and seen in Table 2. This intuition is captured by the following function:

(1)

,

(2)

cost(𝑝𝑎𝑡ℎ) =

∑︁

cost(𝑟 )

𝑟 ∈𝑝𝑎𝑡ℎ

∑︁

=

𝑟 ∈𝑝𝑎𝑡ℎ

sensitivity(𝑟 ) +
(cid:169)
(cid:173)
(cid:171)

∑︁

𝑝 hasLocation 𝑟

weight(𝑝) × (1 + 𝑐𝑜𝑛𝑡𝑟𝑜𝑙 (𝑝))(cid:170)
(cid:174)
(cid:172)

where 𝑝𝑎𝑡ℎ is a sequence of rooms 𝑟 , sensitivity(𝑟 ) is the numerical value of security zone classifi-
cation for room 𝑟 , 𝑝 is a point (e.g., a setpoint or a sensor) that is part of a subsystem, weight(𝑝)
is the weight given to point 𝑝 (determined by AHP), and control(𝑝) is the number of locations or
zones affected by point 𝑝. For example, in Figure 1, we see that Temperature_Setpoint_1-12 has
control(𝑝) = 2 as ambient air temperature of two rooms would be affected by adjusting this setpoint.
A complete calculation for the costs of Pathway 1 and Pathway 2 can be found in Appendix A.4.
It is important to explain here the role of the building model in computing the path-sensitivity
cost function above. We have developed a set of SPARQL queries based on the building’s RDF
model (see sub-graph in Appendix A.1) to compute:

• the sequence of adjacent rooms leading from one location to another, e.g., the main building

door to the meeting room; and

• the set of points located in a room, their types, and the locations they influence through

control.

We seek to answer the following questions with SPARQL queries in the namespaces found in
Appendix A.2:

Q1 – what are the possible sequences of adjacent resources (locations or doors), starting
at main entrance and reaching a specific meeting room?

SELECT ?element
WHERE { ?element bot:adjacentElement <Resource>. }

SELECT ?element # reverse query of lines 1-2
WHERE { <Resource> bot:adjacentElement ?element. }

The two queries above are repeatedly invoked, starting with the building’s main entrance as
< 𝑅𝑒𝑠𝑜𝑢𝑟𝑐𝑒 > to find an adjacent door or room ?𝑒𝑙𝑒𝑚𝑒𝑛𝑡 using the query from lines 1-2. For each
of the ?𝑒𝑙𝑒𝑚𝑒𝑛𝑡s, if ?𝑒𝑙𝑒𝑚𝑒𝑛𝑡 is a door, then the query from lines 3-4 is executed next using
?𝑒𝑙𝑒𝑚𝑒𝑛𝑡 as < 𝑅𝑒𝑠𝑜𝑢𝑟𝑐𝑒 > to find more doors or rooms. Otherwise, the query from lines 1-2 are
repeated with the ?𝑒𝑙𝑒𝑚𝑒𝑛𝑡 as the new < 𝑅𝑒𝑠𝑜𝑢𝑟𝑐𝑒 >. This process is repeated until the
destination meeting room < 𝑅𝑒𝑠𝑜𝑢𝑟𝑐𝑒 > has been reached. Note that when a query returns
multiple rooms or doors, we need to repeat this process for each of them separately. Using these
two queries allows the Path-Planning Service to perform a recursive depth-first search by finding
adjacent resources to each ‘Room’.

Q2 – what is the sensitivity of a location based on its security zone classification?

SELECT ?seczone
WHERE {

?seczone bot:hasSpace <location> .

}

1

2

3

4

5

1

2

3

4

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

13

This query helps to determine the 𝑠𝑒𝑛𝑠𝑖𝑡𝑖𝑣𝑖𝑡𝑦 of <location> where ?𝑠𝑒𝑐𝑧𝑜𝑛𝑒 is subsequently
translated into a number based on its ordinal property described in Section 4.3.

Q3 – what points are in a location? What kinds of points are they? Can the points
influence other locations through controls relationship?

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

SELECT ?point ?subsubtype ?subtype
WHERE {

<location> bf:isLocationOf ?point .
?point rdf:type ?type .
?type rdfs:subClassOf* ?subsubtype .
?subsubtype rdfs:subClassOf ?subtype .
?subtype rdfs:subClassOf brick:Point .

}

SELECT ?point ?location
WHERE {

<location> bf:isLocationOf ?point .
?point bf:controls ?command .
?equipment bf:hasPoint ?command .
?equipment bf:feeds ?zone .
?zone bf:hasPart ?location .

}

The first query from lines 1-7 determines the points that are located in <location> and their types
(subsubtype = Temperature_Setpoint and subtype = Setpoint). The second query from lines 9-16
decides whether the point influences any other locations by determining the equipment of the
command that the point controls and seeing if the equipment feeds any locations. These queries
are executed by the Building-Representation Service to determine the cost of an indoor-path.

4.4 Managing Smart Contracts
Upon selecting an indoor path that meeting participants can follow to reach the meeting room, a
smart contract must be specified and run by the Access-Control Service to authorize the participants
to open the required sequence of doors and access certain spaces shortly before the meeting starts.
Users who already have access to (some of) the building’s systems and spaces can delegate access
to other individuals. This creates a tree-like structure of an authorization graph, as depicted in
Figure 1. This implies that the process has to be bootstrapped with some original space manager(s),
e.g., the Building Manager in Figure 1. Traditionally, they might be the building-security personnel,
or (some of) the long-term building occupants.

In our application scenario, the meeting host (the delegator in Figure 1) is assumed to have access
to the whole floor (including Room_1-1-120 and Room_1-1-121) and can thus delegate access to
the spaces and doorways in the path leading to the meeting room (i.e., Room_1-1-120). Hence, the
delegator grants the meeting participant (the delegate in Figure 1) access to all the doors and rooms
in the path they have selected, which implies that all the rules mentioned in the smart contracts
should be satisfied for the delegation to succeed. To that end, the delegator first uses the smart
contract to create a new unique entity for the delegate, assuming that she is not already known to
the system (otherwise the existing entity is used to add a new access rule). Each entity is a node in
the authorization graph, therefore creating a new node for Visitor B. The delegator provides the
delegate’s address, which is the public key of the delegate, along with the sequence of permissions

14

Bindra, et al.

implicit in the chosen path and the period during which these permissions should be valid, in effect,
a period covering the meeting duration. If no failure is encountered in the creation of entity and all
the requirements of the contract are fulfilled, a valid entity is created for the delegate.

Next, a new access rule has to be created, containing the delegator’s entity (the meeting host)
as the source, the delegate’s entity as the target, the expiry time after which the access rule will
become invalid, and the list of resources that the delegate is allowed to access. This creates the
relationship between two nodes, Occupant A and Visitor B in Figure 1, i.e., the delegator and the
delegate, which describes the access rule. The list of resources received from the Path-Planning
Service are stored in the order they should be invoked, starting from the building’s main entrance
and concluding with the meeting room. At run time, the in-order access of the list of locations
and doors is evaluated, which helps the delegate to navigate in the right path. The destination and
equipment that can be accessed by the delegate are also stored.

Once all the requirements to create a new access rule in the smart contract are fulfilled, a
successful transaction is executed. A failure would revert any changes that were made to the
contract’s data.

An important advantage of smart contracts is the flexibility they afford in the revocation process.
Once a smart contract has been issued to authorize a delegate with access to some spaces, it cannot
be deleted; the blockchain is immutable and anything stored on the blockchain as a transaction
cannot be deleted. To revoke this authorization, the access rule assigned to that user must be made
invalid. Similarly, to remove a user from accessing any system or space in the building, for instance
when an employee leaves the organization, the entity belonging to that user is made invalid. This
is enough to make sure that this user can no longer access building spaces and equipment therein.
Once a rule or entity is made invalid, it can no longer be reused for the same address of the delegate.

4.5 Checking Credentials at Run-Time
Upon arrival, when the delegate tries to access any space or equipment, the data from smart
contracts need to be read by the Access-Control Service to validate whether the delegate’s credentials
authorize them to access the spaces they attempt to access. To that end, the access rule assigned to
the delegate is read from the blockchain. From this data, the duration and validity is first checked.
If the access rule is valid, the set of accessible resources assigned for the delegate are checked and
the permissions granted to the delegate, as a part of the access rule, are verified. If the requested
action is included in the set of permissions and the requested resource is included in the set of
accessible resources, then the user will be allowed to access the requested resource. Similar is the
case for accessing points and equipment. In order to read or modify the temperature setting in the
room, the accessibility needs to be checked and the smart contract decides if the requested action
can be taken.

5 IMPLEMENTATION
In this Section, we describe the prototype implementation of our methodology on our own private
blockchain using the Ethereum network. Ethereum is a blockchain platform that includes a Turing
complete scripting language called Solidity for building, deploying, and implementing smart con-
tracts. These contracts have no restrictions in terms of size and are stored in the blockchain. Our
methodology relies on three smart contracts, namely Archives, Implications and Exclusions. They
are defined as follows:

• The Archives contract manages and stores the entities and access rules for each user. Any
creation or deletion of entities or access rules leads to a state change. The state of the Archives
contract is read to verify access.

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

15

• The Implications contract cross-verifies the validity of access rules and processes the path
resources that should be accessible to an entity for a specific access rule. A state change takes
place only when a new rule is created.

• The Exclusions contract is used when the delegator chooses to provide a list of all the
resources that the delegate is not allowed to access, even though they are in spaces that the
delegate is allowed to reach.

These smart contracts are compiled and deployed using scripts. For each contract, a unique
bytecode and contract address is created. The contract address is used to access a contract in the
private blockchain network, either from external functions or from another smart contract. An
API, illustrated in Figure 4, enable the client applications, such as our meeting-planning example
scenario, to interact with the deployed smart contracts. The API exposes a number of operations,
receiving (or producing) JSON objects as input (or output).

5.1 Adding a New User
As shown in Figure 4a, the delegator provides the address of the delegate to the meeting-planning
application to create a calendar invitation. This address is used to verify if an entity exists already
for the delegate, or a new entity needs to be created by the Access-Control Service7. The start and
expiry times for the entity should also be provided by the delegator. If no expiry time is specified,
the implication is that the contract is valid for the foreseeable future until it is explicitly revoked. In
our application scenario, meeting participants should only have access to the building for a specific
time period. Hence, the expiry time must be provided.

In addition to the delegate’s address, and start and expiry times, the set of permissions that the
delegator intends the delegate to possess must be provided as input to the API. These include read
(for accessing sensor measurements) and write (for changing the value of a setpoint) permissions for
points and equipment resources. The permissions set also includes a flag to indicate whether the new
delegate entity is allowed to further delegate access to other users. The meeting-planning application
interacts with the Access-Control Service, providing the required information as depicted in Step 3
of Figure 4a. This information is sent to the Archives contract to create a new entity. The contract
checks validity of the input and creates an entity for the given delegate’s address.

Once all the checks of the smart contract are successful, the delegator has to sign the transaction
using their private key. Any failure in the transaction would revert all the changes made. If a valid
response is not returned from the smart contract, the entity is not created for the delegate. The API
reads the transaction hash received from the contract’s callback function and finds out whether a
valid entity was created for the delegate. Every entity created has a unique address assigned to it.

5.2 Adding a New Access Rule
After creating a new entity for the delegate, the delegator can proceed to create an access rule,
based on the spaces and equipment resources that the delegate is authorized to access. In our
application scenario, the meeting participants must be allowed to access all spaces they need to
go through to reach the meeting room, and all sensing and control points located in this meeting
room. This is exactly the information that the path-planning queries Q1 and Q3 deliver (refer to the
discussion in Section 4.3.3). If the delegate is already known to the system and has previously had

7Note that there are commercial solutions for decentralized identity management such as Civic (https://www.civic.com/),
Sovrin (https://sovrin.org/), and uPort (https://www.uport.me/). These solutions allow for users to manage their own
identities, and can be integrated with our system to eliminate the need for independently managing and verifying the
identity of building occupants and visitors. However, due to the commercial nature of these solutions, we do not use them
in our proof-of-concept implementation. As a future direction, it would be interesting to see the performance impacts of
using a third-party decentralized identity management service.

16

Bindra, et al.

(a) Adding a new Entity.

(b) Adding a new Access Rule.

(c) Verifying an Access Rule for accessibility information.

Fig. 4. Three APIs for smart-contracts

access to some resources in the building, access must only be provided for the additional spaces
that are on the selected path.

The delegator has two options with respect to the various points located in the destination room:
(a) they may authorize the delegate to access all of them, except an explicitly excluded set, or (b)
they may include all of them in the contract (default behaviour). The Exclusions contract is used to
implement the former. The permissions set mentioned in the previous section determines if the
delegate can read sensor measurements or write control setpoints in the destination space.

The smart contract’s function requires information such as the delegator’s and delegate’s ad-
dresses. The contract verifies the entities through these addresses. In addition, the contract checks
if the delegator’s entity has the permission to grant access to new users.

For each access rule, the Path-Planning Service provides a list of resources for the delegate to
access as shown in Figure 4b. This list is generated when the delegator selects a path (likely the
one that has the lowest sensitivity cost). The associated list of path resources and inaccessible

DelegatorCalendarApplicationTime3. Delegate's Address, Permissions, Grant Flag,Start and End time4. If valid, create entity for Delegate5. Sign Transaction6. Valid Entity Created for Delegate1. Delegate's AddressDelegator'sGrant Flag ==1?Access ControlService2. Check if Delegate's entity existsPath PlanningServiceDelegatorAccess ControlServiceCalendarApplicationTime2. Main Resource4. Path Resources, Excluded Resources5. Delegator's Entity, Delegate's Entity, Main Resource,Excluded Resources, Start time, Expiry time6. If valid, create Access Rule7. Sign Transaction8. Valid Access Rule created for Delegate1. Delegate's EntityDelegator's GrantFlag ==1?3. Main ResourcePath PlanningServiceDelegateResourceTime5. Return Permission set6. Return Accessibility2. Delegate's Access Rule and entity, Resource to accessCheck Expiry andPermission setAccess ControlServicePath PlanningService1. Main resource, Delegate'sAccess Rule and entity3. Main resource and relationship4. Return list of resourcesFlexible, Decentralized Access Control for Smart Buildings with Smart Contracts

17

equipment (that could be specified by the delegator) is stored with the Implications and Exclusions
contracts. These contracts identify a unique access rule using its hash. The two contracts are called
from the Archives contract when a new access rule is being created to add the path resources and
excluded equipment list. In our application scenario, the Implications contract defines the order in
which the visitor should access the doors to reach the meeting room. But if access is being granted
for an occupant, there needs to be no restriction on the order of the path that should be followed.
This processing is also done by the contract apart from storing the list.

Other parameters required by the contract’s function include the start and expiry times for the
access rule being created and the main or destination resource, as in Step 5 of Figure 4b. All the
fields are packaged into the request in JSON format. The API runs a callback function to the smart
contract to create the new access rule with the provided fields. The access rule is uniquely identified
with a hash created using the delegator and delegate’s information. The Archives contract is called
to create the access rule. It verifies the entities, checks the granting rights of the delegator, and also
validates that such an access rule was not defined earlier and is a new access rule for the delegate.
A valid access rule is created with the required fields as shown in Steps 6-7 the delegator signs
the transaction using their private key. If the response returned from the smart contract is not a
success value then the new access rule for the delegate is not created. The API reads the transaction
hash received from the callback function of the contract and responds if a valid access rule was
created for the delegate.

5.3 Verifying User’s Access Privileges
While accessing a resource, the existing entities and access rules are read from the smart contract.
It is important to note that the run-time verification of the user’s credentials simply queries the
private blockchain and does not cause a state change. Thus, it does not require any “gas” (i.e., has
zero transaction fee). However, creating a new entity for the delegate or adding new access rules
costs a specific amount of “gas” since they result in state changes on the private blockchain.

When the meeting participant arrives to the building and tries to access a specific resource, e.g.,
the meeting room, a request is sent to the API endpoint to verify if they indeed are authorized to
access this resource. As in Steps 1-2 of Figure 4c, the API request requires the entity and access rule
of the delegate, the resource name, and the action to perform. The state of the smart contract is
read to retrieve the details of the entity and access rule for the delegate. The functions of the smart
contract check the validity of the entity and access rule, and verify its start and expiry times. Next,
the permission set is inferred from the entity, the main resource, the implication and excluded
resources are found from the access rule. This process is described in the Figure 4c.

After receiving this data from the contract, the requested resource is looked up in the implications
and excluded resources. If it is not found, a query is invoked (Q3 in Section 4.3.3) to identify all the
resources related to the main resource with the required type of relationship, shown in Steps 3-4 of
Figure 4c. If the requested resource is included in the returned resources, then the delegate has
access to the requested resource. Otherwise, the delegate is not authorized to access the requested
resource.

If the resource is equipment or a point in Brick, then the permissions from the delegate’s entity
are verified to see if they can read or write (control) the requested resource. Once the validation
process is completed, the API returns a JSON response indicating whether the requested action
is allowed or not. Since these actions do not need to be mined, they are performed immediately
without any delay.

Similarly, whenever a visitor enters the building through the main door, they have to follow the
path to which the access was provided. Hence, the delegate has to follow a sequence of doors in order
to reach the destination room. For this, the smart contract function reads the set of implications

18

Bindra, et al.

(a) Busy Day Schedule

(b) Average Day Schedule

(c) Quiet Day Schedule

Fig. 5. Meeting schedules in 3 different types of days

(a) Busy Day Occupancy

(b) Average Day Occupancy

(c) Quiet Day Occupancy

Fig. 6. Occupants in the building during 3 different schedules

that lead to the destination room. The implications are stored as in the order of the path. This leads
to verifying a sequence of access requests.

A user pointer is used to store the current location of the delegate. When a delegate tries to
access a resource present in the set of implications, the pointer’s current value and the requested
resource are verified in the sequence of the path. If the order of requested access matches the path,
the delegate is allowed to unlock the door through hardware control of the smart lock. If there is a
mismatch, it would imply that the delegate has either tried to enter a wrong door or has skipped a
door on the way. This method enforces that the delegate follows the path he is supposed to and not
get lost on his way to the destination.

The time to access the implications should also be considered when specifying the start time. For
instance, access could be provided to the delegate 30 minutes in advance so that they can come in
early and reach the designated room. Requests invoked to check access for a user at different stages
are logged. In future work, we plan to add new smart contracts for tracking the number of times the
state of the contract is read to verify access to a certain zone, and the users who requested access.

6 EVALUATION
We simulate a number of concurrent meetings in the example building depicted in Figure 2 to
evaluate the performance of the proposed system in realistic scenarios. This building has five
conference rooms that could be used to hold meetings in parallel. To create different load levels, we
consider 3 types of days: busy, average, and quiet days. We assume that there are more concurrent
meetings with more participants on a busy day than an average day or a quite day. For each type of
day, we model the number of meetings held in each conference room by a Poisson process. Hence,
the intervals between successive meetings held in the same conference room are exponentially
distributed. We assume that the duration of a meeting could span from 60 minutes to 150 minutes,
so we sample the length of each meeting from this uniform distribution.

The next step is to model arrivals and departures of meeting participants. We consider a window
of 30 minutes before the meeting starts and after it ends, and use a Poisson process to simulate

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

19

arrivals and departures in these two windows. Figure 5 shows example schedules for all meeting
rooms in the 3 types of days we considered. The color intensity depicts the number of participants
of each meeting; the darker the color is the more people attend the meeting. Figure 6 shows the
cumulative number of people in the building throughout the day for the 3 types of days. We have
a maximum of around 70 meeting participants on busy and average days, and a maximum of 30
meeting participants on quite days.

When access is delegated to an attendee, the paths to these meeting rooms are received from
the path planning service. Accordingly, we calculate the number of requests a participant makes
to receive and verify access. The average number of requests is between 4.5 and 5.5 requests per
participant in our simulations.

6.1 Analyzing Delay and Cost
Performance evaluation is done on a private blockchain network consisting of 2 mining nodes. The
API sends simultaneous and parallel requests to these nodes and transactions are executed by the
miner nodes. We measure the latency of transactions as perceived by the user, i.e., the time between
the user issuing a request to the access control service and receiving a response from the service.
As described in Section 5, the access control service interacts with the blockchain mining nodes to
issue transactions. Table 3 describes the average delay for adding a new entity for a user unknown
to the system and adding access rules for each participant of the meetings to the blockchain. It also
shows the cost associated with transactions to add new entities and access rules. At the time of
evaluation, one ether was equal to approximately 143.68 USD.

Table 3. Summary of transaction delays and costs.

Type of day

Busy Day
Average Day
Quiet Day

avg. delay of
adding entity
0.76 seconds
1.2 seconds
1.16 seconds

avg.
of
delay
adding access rule
17.3 seconds
14.3 seconds
12.8 seconds

for

avg. cost
adding entity
0.019 USD
0.019 USD
0.019 USD

avg.
for
cost
adding access rule
0.0044 USD
0.0045 USD
0.0044 USD

We now present the distribution of delays obtained for verifying user’s access privileges, e.g.,
when meeting participants arrive to the building. Our simulations indicate that this type of request
is completed between 0.26 and 0.37 seconds. Thus, we can expect a maximum delay of 0.37 seconds
to decide whether or not to grant an access request. This delay is within the acceptable range in
real applications.

6.2 Scalability
Lastly, we increase the number of mining nodes in the private blockchain network from 1 to 4.
We consider two performance metrics, namely throughput and average latency, and we measure
performance as the system load (the total number of transactions) increases in each case. We
assume that transactions are evenly distributed among the nodes in the network. Figure 7 shows
the performance evaluation results obtained from 5 independent runs for an average day schedule.
It can be seen from the figure that (a) the average latency decreases in most cases as we increase the
offered load, and (b) throughput increases linearly with the offered load until it reaches a maximum,
which depends on the number of nodes. When the load exceeds this threshold, performance starts
to fall apart. Observe that increasing the number of nodes improves performance in terms of both
throughput and latency in general. With 4 nodes in the blockchain network, according to Figure 7,
we can handle around 2400 requests per minute with an average latency as low as 30 milliseconds.

20

Bindra, et al.

Fig. 7. Comparison of throughput and latency for different numbers of nodes and amounts of offered load

7 PRACTICAL CONSIDERATIONS
Privacy: Maintaining privacy on blockchain is a complicated issue because transactions and
user’s balances in a blockchain are open to public viewing. To tackle the privacy issue, Kosba
et al. [24] build a tool, called ‘Hawk’, which helps developers create privacy-preserving smart
contracts without the need of cryptography. The tool is responsible for compiling smart-contract
code to a privacy-preserving version. Watanabe et al. [42] propose encrypting smart contracts
before deploying them to the blockchain network so only those participants who have the key can
access the contract’s content (i.e., the state). Bernable et al. [8] provide a comprehensive review
of privacy preserving blockchain approaches. For example, secure multi-party computation splits
the smart contract between a number of parties with secret keys to compute parts of the smart
contract so that a complete picture of a smart contract is not given. Zero-knowledge proofs can
provide verification of smart contracts without revealing any information except for the proof to
be true; this process can be quite costly. Commitment schemes allow for proofs to be verified with
minimal disclosure of secrets. Mixing is also an option where transactions are hidden by generating
additional transactions to create noise and hide the original transaction. Furthermore, user privacy
can also be maintained in a hybrid blockchain solution where identity is managed by an external
public blockchain service, while access smart contracts are maintained on a private blockchain.
Our proof-of-concept implementation uses a private Ethereum network which addresses privacy
concerns to some extent as all participating nodes are within the organization. Nevertheless, any of
the above approaches can be implemented on top of our access-control service when the meeting
participants and times are sensitive and must be protected from some nodes in the network.
Transaction fees: Cryptocurrency fees are a fundamental part of blockchain-based software
platforms. In some public ledgers there is a minimum fee required for a transaction to be accepted,
which helps avoid unwanted and inappropriate transactions. In our work, the creation of entities and
access rules require a fee, which has to be paid by the entity initiating and signing the transaction.
However, checking access privileges does not cost transaction fees, which constitute the most
common type of operations. When a user tries to access a resource, the API is called to query
information from the smart contract and decide whether the requested access is allowed. This can

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

21

be done from any resource and does not incur any fee. It should also be noted that with a private
Ethereum network, the difficulty of the mining process can be decided by the management, and
ether could be mined and potentially transferred to the accounts of participating nodes as needed.
Block time: Transactions take time to get accepted into the blockchain. However, verifying access
privileges does not need to execute transactions to query information from the smart contract’s
data. The information can be retrieved immediately from the blockchain by the devices when the
API is called. Apart from this, the creation of new entities and access rules can have long delays in
execution. This implies that users may have to wait for some time till their access privileges are
granted, since this process requires the execution of two transactions, namely (a) the creation of a
new entity and (b) the creation of a new access rule. To mitigate the potentially long wait times,
one might raise the transaction fees for the creation and revocation operations to minimize the
time spent adding or removing the entities and access rules into the blockchain network [29].

8 CONCLUSION AND FUTURE WORK
In this paper we proposed a methodology that supports reasoning about and flexibly managing the
access privileges of occupants and visitors in smart buildings. Our methodology combines the Brick
and BOT models of a building to plan an indoor path between two locations and determine the
path’s “cost”, in terms of the sensitivity of the spaces it goes through and the equipment contained
in these spaces. Furthermore, our method uses smart contracts to manage the space and equipment
access privileges of users, at specific times and subject to specific constraints. The unification of
RDF graphs that portray building metadata and smart contracts for authorization is done through
the use of API endpoints to interact with the smart contracts. We demonstrated through an example
use case that the proposed access-control methodology is suitable for managing access privileges
in large multi-tenant commercial buildings and can greatly simplify the labor-intensive security
protocol that is currently being followed in such buildings.

With small modifications to interact with the actual building’s BMS, the system can be extended
to enable real-world applications without changing the authorizing smart contracts. Furthermore,
incorporating the use of roles instead of individual users receiving access is another extension that
we plan to make in future work. Using role-based access control could help group similar types of
users into one role and provide them with identical access. For example, all the occupants of an
office room with multiple workstations should have access to the same set of physical resources.
This approach would be applicable in single-tenant buildings.

Finally, we plan to investigate how to reduce the cost (ether) of using smart contracts. A compar-
ative study of using data from RRS and smart contracts directly will be performed in terms of cost
and time. Apart from authorization, authentication, and revocation, it is possible to build several
other applications on top of the existing authorizing smart contracts and the building metadata
schema, thanks to adaptability and flexibility of the proposed solution.

APPENDICES

A EXAMPLE BUILDING

A.1 Building Graph Model
Below is a small sub-graph of the building’s model (in RDF syntax) that can be queried using
SPARQL as discussed in Section 4.3.3.

@prefix bf: <https://brickschema.org/schema/1.0.3/BrickFrame#> .
@prefix bot: <https://w3id.org/bot#> .
@prefix brick: <https://brickschema.org/schema/1.0.3/Brick#> .
@prefix building1: <http://building1.com#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

22

Bindra, et al.

@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

building1:AHU-1 a brick:AHU ;
bf:feeds brick:VAV-1-12 .

building1:HVAC-Zone-1-12 a brick:HVAC ;
bf:hasPart building1:Room-1-1-120,
building1:Room-1-1-121 .

building1:Operations-Zone a bot:Zone ;

bot:hasSpace building1:Room-1-1-120,

building1:Room-1-1-121 .

building1:Room-B-100 bf:isLocationOf brick:AHU .

building1:VAV-1-12 a brick:VAV ;

bf:feeds brick:HVAC-Zone-1-12 ;
bf:hasPoint building1:Reheat-Command-1-12,
building1:Temperature-Sensor-1-12,
building1:Temperature-Setpoint-1-12 .

building1:Temperature-Sensor-1-12 a brick:Temperature_Sensor ;

bf:controls building1:Reheat-Command-1-12 .

building1:Temperature-Setpoint-1-12 a brick:Temperature_Setpoint ;

bf:controls building1:Reheat-Command-1-12 .

building1:Door-1-1-12 a bot:Element .

building1:Room-1-1-120 a brick:Room,

bot:Space ;

bot:adjacentElement building1:Door-1-1-12 .

building1:Room-1-1-121 a brick:Room,

bot:Space ;

bf:isLocationOf brick:Temperature-Sensor-1-12,

brick:Temperature-Setpoint-1-12 ;
bot:adjacentElement building1:Door-1-1-12 .

building1:Reheat-Command-1-12 a brick:Heating_Command .

A.2 Namespaces for Queries
PREFIX bf: <https://brickschema.org/schema/1.0.3/BrickFrame#> .
PREFIX building1: <http://building1.com#> .
PREFIX brick: <https://brickschema.org/schema/1.0.3/Brick#> .
PREFIX bot: <https://w3id.org/bot#> .
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

A.3 Building Security Zones
The classification of security zones is carried out by the building manager based on the function of
each room in the example building. Figure 8 illustrates this classification.

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

23

Fig. 8. The floor plan of our example building showing the classification of security zones

A.4 Example Pathways
A.4.1 Pathway 1. Below is the cost calculation for Pathway 1 from Figure 2 using the cost function
defined in Section 4.3.3.

Pathway 1 ≡ {Room_1-1-102, Room_1-1-101, Room_1-1-100, Room_1-1-112, Room_1-1-114,
Room_1-1-178, Room_1-1-184, Room_1-1-152, Room_1-1-150, Room_1-1-144}

cost(Room_1-1-102) = 1 + 0
cost(Room_1-1-101) = 1 + 0
cost(Room_1-1-100) = 1 + 0
cost(Room_1-1-112) = 3 + 0
cost(Room_1-1-114) = 3 + 0
cost(Room_1-1-178) = 3 + 0
cost(Room_1-1-184) = 3 + ( (0.204 × (1 + 5)) + (0.246 × (1 + 5)) + (0.347 × (1 + 5)) + (0.413 × (1 + 5)))
cost(Room_1-1-152) = 3 + 0
cost(Room_1-1-150) = 3 + (0.413 × (1 + 4))
cost(Room_1-1-144) = 4 + ( (0.413 × (1 + 20)) + (0.260 × (1 + 20)) + (0.328 × (1 + 20)))

cost(Pathway 1) = 55.35

A.4.2 Pathway 2. Below is the cost calculation for Pathway 2 from Figure 2 using the cost function
defined in Section 4.3.3.

Pathway 2 ≡ {Room_1-1-1ST3, Room_1-1-184, Room_1-1-150, Room_1-1-144}

cost(Room_1-1-1ST3) = 2 + 0

cost(Room_1-1-184) = 3 + ( (0.204 × (1 + 5)) + (0.246 × (1 + 5)) + (0.347 × (1 + 5)) + (0.413 × (1 + 5)))
cost(Room_1-1-150) = 3 + (0.413 × (1 + 4))
cost(Room_1-1-144) = 4 + ( (0.413 × (1 + 20)) + (0.260 × (1 + 20)) + (0.328 × (1 + 20)))

cost(Pathway 2) = 42.35

PublicReceptionOperationsSecurityHigh SecuritySecurity ZonesRoom 1-1-102Room 1-1-103Room 1-1-104Room 1-1-106Room 1-1-108Room 1-1-118Room1-1-120Room 1-1-121Room 1-1-122Room 1-1-123Room 1-1-124Room 1-1-125Room 1-1-126Room 1-1-128Room 1-1-130Room 1-1-131Room 1-1-132Room 1-1-136Room 1-1-140Room 1-1-142Room 1-1-141Room 1-1-143Room 1-1-154Room 1-1-155Room 1-1-156Room 1-1-160Room 1-1-158Room 1-1-164Room 1-1-166Room 1-1-172Room 1-1-185Room 1-1-188Room 1-1-163Room 1-1-165Room 1-1-162Room 1-1-105Room 1-1-167Room 1-1-169Room 1-1-116Room 1-1-1ST2Room 1-1-101Room 1-1-100Room 1-1-112Room 1-1-114Room 1-1-178Room 1-1-184Room 1-1-152Room 1-1-150Room 1-1-ST3Room 1-1-144Room 1-1-14424

Bindra, et al.

B ANALYTIC HIERARCHY PROCESS

B.1 Questions and Answers
We ask questions to compare the importance of different types of Points, e.g., sensors and setpoints.
The sensors installed in our example building are temperature, damper position, humidity, and
occupancy sensors. The setpoints available in our example building are temperature, humidity, and
airflow setpoints. For each set of Points, we do a pairwise comparison of its elements using questions,
such as How important/critical is element 𝑥 compared to element 𝑦 in the building?. We
answer these questions using the rating scale described in Appendix B.2. Each set of questions
achieve a consistency ratio of less than 0.10 as recommended for the AHP process.

For the sensors, we achieve a consistency ratio of 0.024 answering the following questions:

• How important is Temperature Sensor compared to Damper Sensor? 2
• How important is Temperature Sensor compared to Occupancy Sensor? 1
• How important is Temperature Sensor compared to Humidity Sensor? 2
• How important is Damper Sensor compared to Occupancy Sensor? 1
• How important is Damper Sensor compared to Humidity Sensor? 1
• How important is Occupancy Sensor compared to Humidity Sensor? 1

For the setpoints, we achieve a consistency ratio of 0.055 answering the following questions:

• How important is Temperature Setpoint compared to Airflow Setpoint? 2
• How important is Temperature Setpoint compared to Humidity Setpoint? 1
• How important is Airflow Setpoint compared to Humidity Setpoint? 1

The resulting weights from answering these questions are shown in Table 2.

B.2 Rating Scale

Table 4. This rating scale is taken from [33] and used to compare two elements relative to each other in terms
of their importance. Note that the reciprocal can also be used to compare elements in the other direction.

Rating Definition

1
2
3
4
5
6
7
8
9

Equal importance
Equal to moderate importance of one over another
Moderate importance
Moderate to essential importance
Essential or strong importance
Essential to very strong importance
Very strong importance
Very strong to extreme importance
Extreme importance

REFERENCES
[1] [n. d.]. Project Haystack. http://project-haystack.org/.
[2] Michael P Andersen et al. 2017. WAVE: A Decentralized Authorization System for IoT via Blockchain Smart Contracts.
Technical Report UCB/EECS-2017-234. UC Berkeley. http://www2.eecs.berkeley.edu/Pubs/TechRpts/2017/EECS-2017-
234.html

[3] Michael P Andersen et al. 2018. Democratizing authority in the built environment. ACM Transactions on Sensor

Networks (TOSN) 14, 3-4 (2018), 17.

[4] Michael P Andersen et al. 2019. WAVE: A decentralized authorization framework with transitive delegation. In 28th

USENIX Security Symposium. USENIX Association, 1375–1392.

[5] Omid Ardakanian, Arka Bhattacharya, and David Culler. 2018. Non-intrusive occupancy monitoring for energy

conservation in commercial buildings. Energy and Buildings 179 (2018), 311–323.

[6] Bharathan Balaji et al. 2018. Brick: Metadata schema for portable smart building applications. Applied Energy 226

(2018), 1273–1292.

Flexible, Decentralized Access Control for Smart Buildings with Smart Contracts

25

[7] Vladimir Bazjanac and DB Crawley. 1999. Industry foundation classes and interoperable commercial software in

support of design of energy-efficient buildings. In Proceedings of Building Simulation, Vol. 2. 661–667.

[8] J. Bernal Bernabe et al. 2019. Privacy-Preserving Solutions for Blockchain: Review and Challenges. IEEE Access 7

(2019), 164908–164940.

[9] Khalid Zaman Bijon, Ram Krishnan, and Ravi Sandhu. 2013. A framework for risk-aware role based access control. In

2013 IEEE Conference on Communications and Network Security (CNS). IEEE, 462–469.

[10] Leepakshi Bindra, Changyuan Lin, Eleni Stroulia, and Omid Ardakanian. 2019. Decentralized Access Control for
Smart Buildings Using Metadata and Smart Contracts. In Proceedings of the 5th International Workshop on Software
Engineering for Smart Cyber-Physical Systems. IEEE, 32–38.

[11] Vitalik Buterin. 2014. A next-generation smart contract and decentralized application platform. White paper (2014),

1–37.

[12] Jon Callas et al. 2007. OpenPGP message format. Technical Report.
[13] Germano Caronni. 2000. Walking the web of trust. In Proceedings of the 9th International Workshops on Enabling

Technologies: Infrastructure for Collaborative Enterprises. IEEE, 153–158.

[14] Liang Chen and Jason Crampton. 2011. Risk-aware role-based access control. In International Workshop on Security

and Trust Management. Springer, 140–156.

[15] Jason Cruz et al. 2018. RBAC-SC: Role-Based Access Control Using Smart Contract. IEEE Access 6 (2018), 12240–12251.
[16] Stephen Dawson-Haggerty et al. 2013. BOSS: Building Operating System Services. In Proceedings of the 10th USENIX

Symposium on Networked Systems Design and Implementation. USENIX, 443–457.

[17] Prasanta Kumar Dey. 2003. Analytic Hierarchy Process Analyzes Risk of Operating Cross-Country Petroleum Pipelines
in India. Natural Hazards Review 4, 4 (2003), 213–221. https://doi.org/10.1061/(ASCE)1527-6988(2003)4:4(213)
[18] Alexandra Dmitrienko et al. 2012. SmartTokens: Delegable access control with NFC-enabled smartphones. In Interna-

tional Conference on Trust and Trustworthy Computing. Springer, 219–238.

[19] David Ferraiolo, Janet Cugini, and D Richard Kuhn. 1995. Role-based access control (RBAC): Features and motivations.

In Proceedings of the 11th annual computer security application conference. 241–48.

[20] Vincent C Hu et al. 2014. Guide to attribute based access control (ABAC) definition and considerations. NIST Special

Publication 800, 162 (2014).

[21] Van Jacobson et al. 2009. Networking named content. In Proceedings of the 5th International Conference on Emerging

Networking Experiments and Technologies. ACM, 1–12.

[22] Anas Abou El Kalam et al. 2003. Organization based access control. In Proceedings of the 4th International Workshop on

Policies for Distributed Systems and Networks. IEEE, 120–131.

[23] Savith Kandala, Ravi Sandhu, and Venkata Bhamidipati. 2011. An attribute based framework for risk-adaptive access
control models. In Proceedings of the 6th International Conference on Availability, Reliability and Security. IEEE, 236–241.
[24] Ahmed Kosba et al. 2016. Hawk: The blockchain model of cryptography and privacy-preserving smart contracts. In

Symposium on Security and Privacy (SP). IEEE, 839–858.

[25] P. Kumar and S. K. Singh. 2016. A comprehensive evaluation of aspect-oriented software quality (AOSQ) model
using analytic hierarchy process (AHP) technique. In Proceedings of the 2nd International Conference on Advances in
Computing, Communication, Automation. 1–7.

[26] Tam Le and Matt W Mutka. 2019. Access control with delegation for smart home applications. In Proceedings of the

International Conference on Internet of Things Design and Implementation (IoTDI). ACM, 142–147.

[27] Arvind Narayanan et al. 2016. Bitcoin and cryptocurrency technologies: a comprehensive introduction. Princeton

University Press.

[28] B Clifford Neuman and Theodore Ts’o. 1994. Kerberos: An authentication service for computer networks.

IEEE

Communications magazine 32, 9 (1994), 33–38.

[29] Oscar Novo. 2018. Blockchain meets IoT: An architecture for scalable access management in IoT. IEEE Internet of

Things Journal 5, 2 (2018), 1184–1195.

[30] Aafaf Ouaddah, Anas Abou Elkalam, and Abdellah Ait Ouahman. 2016. FairAccess: a new Blockchain-based access
control framework for the Internet of Things. Security and Communication Networks 9, 18 (2016), 5943–5964.
[31] Otto Pinno et al. 2017. Controlchain: Blockchain as a central enabler for access control authorizations in the IoT. In

Proceedings of IEEE Global Communications Conference (GLOBECOM). IEEE, 1–6.

[32] Mads Holten Rasmussen et al. 2017. Recent changes in the building topology ontology. In LDAC2017-5th Linked Data

in Architecture and Construction Workshop.

[33] Thomas L Saaty. 1990. The Analytic Hierarchy Process. European Journal of Operational Research 48 (1990), 9–26.
[34] Peter Saint-Andre. 2005. Streaming XML with Jabber/XMPP. IEEE Internet Computing 9, 5 (2005), 82–89.
[35] Farzad Salim et al. 2013. Budget-aware role based access control. Computers & Security 35 (2013), 37–50.
[36] Ravi S Sandhu et al. 1996. Role-based access control models. Computer 29, 2 (1996), 38–47.

26

Bindra, et al.

[37] Nimalaprakasan Skandhakumar et al. 2016. Graph theory based representation of building information models for

access control applications. Automation in Construction 68 (2016), 44–51.

[38] Nimalaprakasan Skandhakumar et al. 2018. A policy model for access control using building information models.

International Journal of Critical Infrastructure Protection 23 (2018), 1–10.

[39] Nimalaprakasan Skandhakumar, Jason Reid, Ed Dawson, Robin Drogemuller, and Farzad Salim. 2012. An authorization

framework using building information models. Comput. J. 55, 10 (2012), 1244–1264.

[40] Bilal Succar. 2009. Building information modelling framework: A research and delivery foundation for industry

stakeholders. Automation in Construction 18, 3 (2009), 357–375.

[41] Lingyu Wang, Duminda Wijesekera, and Sushil Jajodia. 2004. A logic-based framework for attribute based access

control. In Proceedings of the ACM workshop on formal methods in security engineering. ACM, 45–55.

[42] Hiroki Watanabe et al. 2015. Blockchain contract: A complete consensus using blockchain. In Proceedings of the 4th

global conference on consumer electronics (GCCE). IEEE, 577–578.

[43] Kurt Zeilenga. 2006. Lightweight directory access protocol (LDAP): Technical specification road map. Technical Report.

