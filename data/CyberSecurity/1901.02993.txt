9
1
0
2

n
a
J

0
1

]

R
C
.
s
c
[

1
v
3
9
9
2
0
.
1
0
9
1
:
v
i
X
r
a

Secure and Computationally-Eﬃcient
Cryptographic Primitive based on Cellular
Automation

Rade Vuckovac

January 11, 2019

Abstract

Mageto, a random number generator based on one-dimensional cellular
automaton (CA) is presented. Three procedures of secure implementation
using Mageto is proposed and discussed. Implementations are very eﬃ-
cient in a wide range of hardware and software scenarios. It includes the
advanced application of the Internet of Things (IoT) and cyber-physical
systems which are both needed for computationally-eﬃcient cryptographic
primitives. Furthermore, the proposed primitive is inherently resistant
against the Side Channel Attack (SCA), where many currently available
ciphers, such as AES, require additional hardware or software eﬀort to
prevent SCA line of attack.

1

Introduction

Cellular automaton (CA) cryptographic use is limited. One signiﬁcant reason
is performance. A survey of CA stream ciphers [14] shows that encrypting one
megabyte of data requires ﬁve seconds at best. One exception is MAG (My
Array Generator) [5], which is a Mageto predecessor. It is a one-dimensional
cellular automaton (CA). It belongs to a class of three complexity classiﬁcation
schemes p.12 [9]. That means, nearly every initial state evolves in pseudo-
random or chaotic fashion. Two signiﬁcant attributes which make MAG so
exceptional are:

• MAG is invariant to the cell size. Both 32-bit and 64-bit cells are inves-
tigated, and they show the same behaviour. That fact has a huge impact
on performance.

• MAG update rule is not entirely boolean and SAT solvers tools, which are

generally better than brute force [14], could not be applied.

Apart from that, there are many more important reasons for revisiting MAG
and build Mageto on MAG foundations:

1

 
 
 
 
 
 
• MAG was the main building block for stream cipher entry (eSTREAM;
ECRYPT Stream Cipher Project [16]). That entry did not progress to
the second round because of the available analysis at that time. In the
second round of decision making, the analysis consisted of two attacks [13,
10]. Other attacks [7, 6] are variants of the previous two. More analyses
were published [12] after round two. Those cryptanalysis contest attacks
from [13, 7].
In the same analysis, it suggests that the second type of
attacks [10, 6] are avoidable using one minor alternation proposed in [15].
According to the published analysis, at least one MAG variant remains
secure.

• The second reason for the renewed interest in MAG is excellent software
performance, see testing published on eSTREAM web page [11]. For a
short set of results see Table 1. It compares MAG with some well-known
stream cipher algorithms.

• Another reason is MAG compactness. While Advanced Encryption Stan-
dard (AES) is widely used in symmetrical encryption, the emergence of
IoT (The Internet of things), with constrained computation power, limits
AES usability in that area. Therefore lightweight symmetrical encryption
schemes are sought. MAG hardware footprint is a 512 bytes of memory
for automation state, plus a couple of variables. Operational cost is a cel-
lular automation updating rule consisting of one conditional branching, a
couple of exclusive or logical operation, one of one’s complement and one
addition (ﬁve basic operations). That should match an extensive range of
IoT hardware limited capabilities. See Listing A 1 for details.

• MAG, like other cellular automata, has inherent resistance on side channel
attacks (SCA) where AES and many other block ciphers implementations
in that regard are relatively complex [1]. The lightweight cipher designs
using S-boxes are aﬀected by SCA as well [8].

Please note that the predecessor of our cryptographic primitive Mageto,
namely, MAG, and its design choices for various parameters was never discussed
or published before. Thus, in this paper, these issues will be addressed as well.

Primitive
MAG-v3
TRIVIUM
Salsa20
RC4
AES-CTR

Stream (cycles per byte)
2.20
4.14
7.64
14.52
18.51

Table 1: An extract of eSTREAM software performance table [11].

The rest of paper is organised as follows: Section 2 introduces one dimen-
sional CA and deﬁnes Mageto proposition. It also shows where Mageto improves

2

over MAG making the Mageto proposition even simpler. Appendix A include
C language general implementation. Section 3 shows three diﬀerent ways to
implement the proposed Mageto securely. Section 4 deals with an analysis of
MAG known attacks and how they might impact the Mageto proposal. Section 5
discusses Mageto and its potential usage to a variety of applications, SCA and
input ﬂexibility.

2 Mageto Cellular Automation

Mageto is a one-dimensional CA. The concept of CA was ﬁrst discovered in the
1940s by Stanislaw Ulam and John von Neumann. CA is used as a modelling
tool in various scientiﬁc ﬁelds: computer and complexity science, mathematics,
physics and biology. Stephen Wolfram is the ﬁrst to propose the use of CA (rule
30) in cryptography [18].

Figure 1: Rule 30 one-dimensional CA example.

Figure 1 showing Wolfram’s rule 30 is used to explain the general working of
one-dimensional CA. The particular example uses cells with two possible states
(black and white). One-dimensional CA initial state is a row. For example, it
is the binary string (row 1):

0000000000000001000000000000000

3

Row 2 is derived from row 1 and so on, with ﬁnal row 16:

1101111001101001011111001111111

Rules to determine an update of a cell are shown as eight cases. Each case
shows one combination of three cells on the top and the derivative cell on the
bottom. Three cells from the row above (positioned above right, immediately
above and above left) are looked at, and one of the cases are applied to create
a cell. For example, a cell from row 2 column 14 is derived by case 8, cell from
row 2 column 15 is acquired by case 7, cell from row 2 column 16 is obtained by
case 6 and so on. Edge cells do not have above left or above right cells to choose
a case. In that situation, the ﬁrst or the last cell from the previous column are
used for the ruling. For example, left edge cell from row 16 column 1 looks at
cells from row 15, columns 31, 1, 2 and use case 7 to create the cell. The right
edge cell from row 16 column 31 use the cells from row 15 columns 30, 31, 1
for lookup and case 4 for cell determination. Derived rows (rows 2, 3, ...) are
outputs of CA.

If a random stream of bits is required, column 16 could be used:

1101110011000101...

A stream generated in this fashion passes many randomness statistical tests and
it is used as a random number generator in Wolfram’s Mathematica software.
Mageto is also a one-dimensional CA, but it diﬀers from the example by:

• Cells are multi-bit words (32 or 64 bits in size).

• The update of Mageto cells is serial, left to right, because the rule needs

the outcome of the previous cell update (carry).

• The Mageto rule also appears to be invariant to cell size because it shows

the same random behaviour for 32 and 64 bit size cells.

Mageto CA is governed by the CA rule and the state of neighbouring cells.
A row of cells, in a Mageto case array of elements, are updated from left to
right. One evolution cycle is when all items in the array are updated. The
next generation is another evolution cycle and so on. The original and modiﬁed
parameters are shown in Table 2.
Mageto parameters deﬁnitions:

• The number of cells is a = 128. That choice forces 2128 possible execution
paths during one evolution cycle and assumes at least 128 bit level security
if the stream is used as a basis for the cipher.

• The cell size is b = 32 bits. The Mageto CA rule appears to be invariant
concerning the cell size. b = 64 bits is used and tested for randomness [17]
and there are no biases, although the performance doubles because the
same generating cost produces double the stream.

4

MAG
a = 127
b = 32
c calculated
d = 0x11111111 (HEX)
e = 1.5a

Mageto
a = 128
b = 32
c = 987654321
d = 010101... (binary)
e = 4a

Table 2: MAG / Mageto parameters.

• Instead of taking the carry value from the array element in the original ver-
sion, it is initialised as c = 987654321 (decimal). The value of 987654321
was chosen, and there is no special meaning behind this choice.

• The constant d is now initialised as d = 01010101... (32 bitsbinary). Again
there is nothing special in the constant value. In MAG d was described as
an arbitrary value (which it is). Related to this, an initialisation attack [13,
7] where d = 0 was proposed. It eliminates any adding procedure which
simpliﬁes the whole process signiﬁcantly. The analysis [12] showed that
any non zero value of d is suﬃcient to prevent initialisation attacks.

• In a modiﬁed version, the mixing period e is four evolutions e = 4 ∗ a =
512. It assures proper mixing because the original one and half evolutions
occasionally produced biases in the ﬁrst couple of generated rows. The
same could be observed in the rule 30 case (Figure 1) where the ﬁrst
several rows still retain some patterns.

• The seed f is any binary string equal or smaller than a row of cells fsize ≤
a ∗ b and f = k + s + ... meaning that the key k, the salt s and ... (IV,
pepper and so on) are concatenated to form seed f .

Mageto operation is divided into initialisation and update.

Mageto initialisation; Originally, the array of 128 elements 32 bits wide is ini-
tialised to 0. The seed f is repeatedly concatenated until the resulting concate-
nation is equal or greater in size than the array. MAG array’s ﬁrst 127 elements
are the initial row, and remaining elements becomes the carry c. For example,
the seed is f = seed and array is 10 cells (one byte each), the resulting initial
array will be:

seedseedse

In the Mageto modiﬁed version, the seed f is simply copied to zero initialised
array and the carry is given as an initial value c = 987654321. The pattern,
with f = seed and array of 10 bytes, looks like:

seed000000

Mageto update; when initialised, the rows are created by updating cells from
left to right. The edge cases (Ai happens to be on the array end) are handled

5

as rule 30 edge cell cases. The rule elements are shown in Figure 2. The cell
update consists of three steps:

• 1st step is to create a new state of carry c(cid:48).

c(cid:48) =

(cid:40)

c ⊕ Ai+1,
c ⊕ Ai+1, otherwise

if Ai+2 > Ai+3

(1)

Carry c(cid:48) is updated by ⊕ (exclusive or) with previous value of c and one
state of the ﬁrst element to the right Ai+1, depending on the relation
between the other two cells on the right (Ai+2, Ai+3). States of Ai+1 are:
current value (Ai+1) or it’s one complement (Ai+1). In one evolution cycle
(whole array is updated) each cell is changed once and carry is calculated
for every cell transformation. Note that the ﬁrst cell update uses the initial
value of carry c = 987654321.

• 2nd step is the actual change of element Ai to A(cid:48)
i.

A(cid:48)

i = Ai ⊕ c(cid:48)

• 3rd step is updating current c(cid:48) value for next cell transformation.

c(cid:48) = c(cid:48) + d

(2)

(3)

Figure 2: Mageto cell update rule.

6

3 Mageto as A Secure Stream Generator

Knowledge of the array state renders the Mageto algorithm cryptographically
unsound. Three strategies for concealing CA state to make a secure stream from
Mageto, are proposed and discussed.

3.1 Reducing output (Mageto-v1)

One of the concealing methods was already used by S. Wolfram on his cellular
automata rule 30 (section 10.10[19]). For example, column 16 from Figure 1

1101110011000101...

is transformed by taking bits 1, 3, 5, 7, 9, ... and producing secure stream

1 0 1 0 1 0 0 0 ...

The similar approach was used in the MAG eSTREAM proposal. The small
change in operation is added to achieve a secure stream property. Instead of
copying every updated cell to the stream, only the ﬁrst byte of the cell is added
to the secure stream s (now array of bytes).

Figure 3: Mageto evolution history; one pixel represents one byte (256 grey
scale).

7

For example, Figure 3 shows updated cells as a stream of bytes where each
pixel represents a byte and four bytes are an updated cell. To make a secure
stream every 5th byte (every 5th pixel from left to right) is taken and fed to
the secure stream. That is bytes:

1, 5, 9, 13, 17, ...

Consequently b1b5b9... bytes create a secure stream. This approach was found
insecure, and details are shown in Section 4.
Again the small change in pattern avoids weaknesses from the previous design.
If the series of bytes taken is changed to: from ﬁrst cell ﬁrst byte, second cell
second byte, third cell third byte, fourth cell fourth byte, ﬁfth cell ﬁrst byte and
so on...

1, 6, 11, 16, 17, 22, 27, 32...

The stream of bytes b1b6b11b16b17b22b27b32... from Figure 3 will form a secure
stream.

3.2 Combining streams (Mageto-v2)

One way of making a stream secure is to combine two or more streams. For
example, LFSR (Linear-feedback shift register) outputs were combined to make
a shrinking generator (planned to be used as a stream cipher [3]). The shrinking
generator uses two streams, one is a source, and the other is used to decide which
bits of the source stream is output.

In the Mageto case the idea is to apply exclusive or between two generated

streams (stream α and β) to produce a secure stream s:

si = αi ⊕ βi

(4)

Mageto stream
α stream
β stream
γ stream

stream IV
1234567890/3
9876543210/3
...

Table 3: Combined stream parameters.

One implementation attempt at combined MAG approach was published
here [17].
It includes source code. The easiest way to implement combined
Mageto is to initialise streams separately. Table 3 contains initial parameters.
The seed f for each stream now includes corresponding IV. For example, the
seed for α is fα = k + s + IV where k is the key, s is the salt, IV initialisation
vector from Table 3 and + is the concatenation of strings.

8

3.3 Stream Masking (Mageto-v3)

The idea with masking is to combine (xor) Mageto output with a secret string.
The original idea is to use a key as the secret string but Dr Daniel J. Bernstein
and prof.dr.Tanja Lange noted that the same attacks ([10, 6]) apply for that
proposal as well. Alternatively, the secret could be sourced from the execution
path history. The branching from the previous evolution can generate string m.
In the case of 128 elements array, there is 128 branching in one evolution cycle
making a 128 bit string m. Bits of m are determined by branching; if branch
will concatenate 0 and else 1 to the mask m. From m the four 32 bit element
mask array M is created.

M = [B1; B2; B3; B4]

(5)

The secure stream s is now obtained by exclusive or result from Mageto

output cells (A) and mask array of four elements (M ):

si = Ai%a ⊕ Bi%4

(6)

The new mask M is calculated for every evolution cycle and is used as a mask
for next cycle.

4 Mageto Analysis

Mageto-v1; The eSTREAM proposal to strengthen CA MAG was to output just
the ﬁrst byte from the every updated cell. It did not work. CA can continue
updating on just that part of the cell without information from the hidden part:

• Since the ﬁrst bytes of Ai%a and A(cid:48)

i%a are known the ﬁrst byte of c(cid:48) is

known as well because:

A(cid:48)

i%a = Ai%a ⊕ c(cid:48)

(7)

• Knowing the ﬁrst byte of c, predicting the next unknown value of the
carry c(cid:48) takes guessing the branching outcome. That guess is even easier
because of knowledge of the ﬁrst byte which is compared.

Series of bytes used in the stream Status
1, 5, 9, 13, 17, ...
1, 2, 7, 8, 9, 10, 15, 16...
1, 6, 11, 16, 17, 22, 27, 32...

×
×
(cid:88)

Table 4: Mageto secure stream extraction patterns.

This kind of attack is detailed in [10, 6]. Two amendments are proposed
in [15] to avoid this line of attack. The idea was to alternate extraction points
because the original design did not hide the evolution of the ﬁrst-byte cell.

9

Table 4 shows various extraction patterns for the proposed MAG secure stream.
The ﬁrst amendment (second-row Table 4) is broken as well. The one gap
between exposed bytes of the cell did not prevent the same attack although the
guessing cost was increased [12]. The second amendment (third-row Figure 4)
does have three gaps between visible bytes and is still resisting analysis.

Mageto-v2; The result from exclusive or of two Mageto streams is secure
stream s. The relevant relations of knowns and unknowns are shown below.
Stream s is known and streams α and β and carry c are unknown.

row wise si = αi ⊕ βi; si+1 = αi+1 ⊕ βi+1; ...

evolution wise c(cid:48)

αi ⊕ c(cid:48)

βi = si ⊕ s(cid:48)
i

Both relations are used to attack Mageto Subsection 3.1 [10, 6]. Additional
streams could be included to strengthen two stream variant. The combination
of three Mageto streams producing secure stream might look like:

si = αi ⊕ βi ⊕ γi

(8)

Mageto-v3; The relations with known s only are shown below concerning

the Mageto attacks [10, 6].

row wise si ⊕ si+4 = Ai ⊕ Bi ⊕ Ai+4 ⊕ Bi = Ai ⊕ Ai+4

evolution wise c(cid:48)

i = si ⊕ s(cid:48)

i = Ai ⊕ Bi ⊕ A(cid:48)

i ⊕ B(cid:48)
i

5 Mageto Advantages

In this section a few important Mageto features are discussed. One highlight
is applicability with the respect to various hardware platforms. There is also
Mageto resistance to the side channel attack and Mageto ﬂexibility to the inputs
other than key.

5.1 Mageto Implementation and Performance

Three Mageto cipher variants are presented:

• Mageto-v1 from subsection 3.1 is the simplest. For producing one byte,
only the set of operations from Table 5 are needed plus the overhead of
extracting byte from the cell A(cid:48) and array navigation. The array contain-
ing Mageto cells is only 512 bytes in size and with the mentioned set of
operation, lowers the entry hardware requirements bar signiﬁcantly. That
includes a wide array of IoT implementations. The Mageto-v1 perfor-
mance, the same eﬃciency as mag-v1, is very comparable with AES, see
Table 6.

• Mageto-v2 approach subsection 3.2, is a little bit more complex. On the
other hand, eﬃciency is improved. By roughly doubling eﬀort, output

10

Mageto single cell update

(cid:40)

c(cid:48) =

c ⊕ A(i+1),
c ⊕ A(i+1),

if A(i+2) > A(i+3)
otherwise

i = Ai ⊕ c(cid:48)

A(cid:48)
c(cid:48) = c(cid:48) + d

Table 5: The operations needed for one step cell update.

Crypto primitive
RC4
AES-CTR
MAG-v1

Stream (cycles per byte)
14.52
18.51
20.43

Table 6: An extract of eSTREAM software performance table [11].

increases four times. That is 4 bytes per 2 CA steps comparing 1 byte per
1 CA step (subsection 3.1). There are other ways to improve performance.
One way relies on the fact that combining streams could be created in
parallel. By that technique performance is 4 bytes / 1 CA step (2 steps
in parallel). This technique also enables adding streams if needed without
aﬀecting performance. Another eﬃciency approach could be increasing
the size of the CA cell from 32 to 64 bits producing 8 bytes per step. For
details see Table 7.

MAG variants
Mageto-v1
Mageto-v2
Mageto-v2 parallel
Mageto-v2 parallel 64 bit
Mageto-v3
Mageto-v3 64 bit

Performance
1byte/1step
2byte/1step
4byte/1step
8byte/1step
4byte/1step
8byte/1step

Table 7: Various performance details.

• Mageto-v3 from subsection 3.3 is a notch more complex than previous
variants. Developing mask for each evolution step is the reason. This
approach also improves performance concerning Mageto-v1. That im-
provement does not need parallelism. Although Mageto-v3 is relatively
more complex, it is still signiﬁcantly simpler than AES from a hardware
and software point of view, delivering better performance. Table 1 shows
mag-v3 (the same as Mageto-v3) 64-bit implementation versus AES and
other primitives. Table 7 shows performances between various Mageto

11

variants where one step from Table 5 produces 1 − 8 bytes towards secure
stream depending on the variant used.

5.2 Side Channel Resistance

When discussing side channel attack on AES, the quite often cited work [2]
cannot be avoided. There is an assertion mentioned in the abstract that attacks
come from the AES design ﬂaw rather than AES implementation. Furthermore,
this report is also a call for research into functions with constant time execution.
Mageto as CA appears to have the rule which runs in constant time, but some
attention is still needed. When implementing Mageto in SCA resistant mode,
the algorithm branching structure should be addressed. There are two issues:

• The ﬁrst one is to compare secret cells in constant time. By measuring
comparing operations, some properties of the Mageto cells could be de-
termined. For example, comparing the equal cells byte by byte will take
the longest time to execute. The solution is to use constant time compar-
ison functions. Some cases can be found here [4]. Note, the solutions are
not entirely portable therefore ﬁnished program assemblies for particular
hardware should be checked for correctness in any case.

• The second Mageto issue is branching execution times. For example,
Mageto timing for each branch diﬀers, consequently the mask parity of
Mageto-v3 3.3 could be readily determined. The solution is equal exe-
cution time for each branch. That is accomplished by introducing two
pre-calculated intermediate variables v and w before branching. The up-
date of Mageto carry with v, and w has equal execution of branches:

v = Ai+1

w = Ai+1

(cid:40)

c(cid:48) =

if Ai+2 > Ai+3

c ⊕ v,
c ⊕ w, otherwise

(9)

(10)

(11)

5.3

Input Flexibility

Generally, there is a requirement of an initialisation vector (IV) in symmetrical
encryption. For example, AES CBC (AES in Cipher Block Chaining) needs
a unique 128 bit IV for every message processing. If more than 128 bit IV is
required for some reason, the key derivation function (KDF) is necessary to
deliver properly sized key and IV.

In that respect, Mageto allows an additional 480 bytes for a nonce, salt,
pepper and so on... if needed. It can be used for resisting various repeat attacks
for example. That can be accomplished without using KDF as it is the case
with AES.

12

5.4 Conclusion

Mageto oﬀers an entirely new cryptographic primitive. It has a straightforward
and compact implementation.
It also provides SCA resistance which is very
important for not physically secured hardware such as IoT. Variant Mageto-v1
also beneﬁts from the fact that its predecessor mag-v1 had in-depth analysis
and remains secure [12].

References

[1] Tony Arcieri. Cream: the scary ssl attack you´ve probably never heard
https://tonyarcieri.com/cream-the-scary-ssl-attack-youve-probably-

of.
never-heard-of.

[2] Daniel J Bernstein. Cache-timing attacks on aes, 2005.

[3] Don Coppersmith, Hugo Krawczyk, and Yishay Mansour. The shrinking
In Annual International Cryptology Conference, pages 22–39.

generator.
Springer, 1993.

[4] Cryptography. Coding Standard

https://cryptocoding.net/index.php/Coding rules.

[5] eSTREAM. ECRYPT Stream Cypher Project,

http://www.ecrypt.eu.org/stream.

[6] S. Fischer. Analysis of lightweight stream ciphers. Ph. D. thesis, Lund

University (Sweden), 2008.

[7] Matt Henricksen and Ed Dawson.

implementa-
symmetric ciphers on the intel pentium 4 and beyond.

Ensuring fast

tions of
http://eprints.qut.edu.au/24788/.

[8] A. Heuser, S. Picek, S. Guilley, and N. Mentens. Lightweight ciphers and
their side-channel resilience. IEEE Transactions on Computers, PP(99):1–
1, 2017.

[9] Andrew Ilachinski. Cellular automata: a discrete universe. World Scientiﬁc

Publishing Company, 2001.

[10] Simon Kunzli and Willi Meier. Distinguishing attack on mag.

eS-
TREAM, ECRYPT Stream Cypher Project, Report 2005/053, 2005.
http://www.ecrypt.eu.org/stream.

[11] MAG. Performance Figures, AMD Athlon 64 X2 4200+ 2.20GHz,

http://www.ecrypt.eu.org/stream/perf/#results.

13

[12] Arash Mirzaei, Mohammad Dakhil Alian,

res Hashemi.
of mag
ference
http://dakhilalian.iut.ac.ir/sites/dakhilalian.iut.ac.ir/ﬁles/u32
/c26.pdf.

attack
6th
and Cryptology

Distinguishing
2009.
Security

stream cipher,
Information

on
International

on

a modiﬁed

and Mahmoud Modar-
version
ISC Con-
(ISCISC’09)

[13] L. Simpson and M. Henricksen. Improved cryptanalysis of mag. In L. Bat-
ten and R. Safavi-Naini, editors, ACISP, LNCS 4058, pp. 64-75, Springer-
Verlag Berlin Heideberg 2006.

[14] Joseph S Testa.

Investigations of cellular automata-based stream ci-
phers, 2008. Thesis. Rochester Institute of Technology. Accessed from
http://scholarworks.rit.edu/theses/129.

[15] Rade Vuckovac.

Mag

alternating methods

notes.

TREAM, ECRYPT Stream Cipher Project, Report
http://www.ecrypt.eu.org/stream.

eS-
2005/068,

[16] Rade Vuckovac. Mag: My array generator (a new strategy for random
number generation). eSTREAM, ECRYPT Stream Cipher Project, Report
2005/014, 2005. http://www.ecrypt.eu.org/stream.

[17] Rade Vuckovac. A new kind of complexity. arXiv preprint arXiv:1309.0296,

2013.

[18] Stephen Wolfram. Computation theory of cellular automata. Communica-

tions in mathematical physics, 96(1):15–57, 1984.

[19] Stephen Wolfram. A New Kind of Science. Wolfram Media, 2002.

A Mageto inplementation details

Implementation is written in C language and source code is in Listing 1.

Listing 1: mageto.c

void s t i r ( u i n t 3 2 t ∗ a r r a y , u i n t 3 2 t updates ,
{

i n t i n i t )

// 0 1 0 1 0 1 . . .

1 #include <s t d i o . h>
2 #include <s t d i n t . h>
3 #include < s t r i n g . h>
4 #include < s t d l i b . h>
5
6
7
8
9
10
11
12
13
14
15

const u i n t 3 2 t mixer = 1 4 3 1 6 5 5 7 6 5 ;
u i n t 3 2 t c a r r y = 9 8 7 6 5 4 3 2 1 ;
i n t a = 1 2 8 ;
u i n t 3 2 t
f o r ( i = 0 ;
{

// a r r a y s i z e

i < u p d a t e s ;

i ++)

i ;

i f ( a r r a y [ ( i +2)%a]> a r r a y [ ( i +3)%a ] )

c a r r y ˆ= a r r a y [ ( i +1)%a ] ;

14

16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42

e l s e

c a r r y ˆ= ˜ a r r a y [ ( i +1)%a ] ;

a r r a y [ i%a ] ˆ= c a r r y ;
c a r r y += mixer ;

i f ( i n i t == 1 )

f w r i t e (& a r r a y [ i%a ]

, s i z e o f

( a r r a y [ i ] )

, 1 ,

s t d o u t

) ;

}

}

i n t main ( i n t arg c , char ∗∗ a r g v )
{

u i n t 3 2 t b y t e s f o u r ;
u i n t 3 2 t
u i n t 3 2 t a r r a y [ 1 2 8 ] = { 0 } ;

s k i p = 5 1 2 ;

s i z e t

l e n g t h = s t r l e n ( a r g v [ 2 ] )

;

b y t e s f o u r = a t o i ( a r g v [ 1 ] ) ;
memcpy ( a r r a y , a r g v [ 2 ] ,

l e n g t h ) ;

s t i r ( a r r a y ,
s t i r ( a r r a y , b y t e s f o u r , 1 ) ;

s k i p , 0 ) ;

return 0 ;

}

Lets assume that the Listing 1 is compiled to mageto. The execution com-

mand might look like Figure 4:

Figure 4: How to run mageto.

Where the ﬁrst argument 1024 represents how many cells are sent to the
standard output (4096 bytes). The second argument is the seed entropy0 and
> entropy0.raw redirects standard output to the ﬁle.

Figure 5 and 6 are showing graphical representations of the outputs when
input diﬀers by one bit only. The seeds are strings ”entropy0” and ”entropy1”
respectively. Every pixel is one byte shown in 8-bit grayscale.

15

Figure 5: Seed ”entropy0”, (argv[2]).

Figure 6: Seed ”entropy1”, (argv[2]).

16

