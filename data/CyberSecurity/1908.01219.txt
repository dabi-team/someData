On the Veracity of Cyber Intrusion Alerts
Synthesized by Generative Adversarial Networks

Christopher Sweet, Stephen Moskal, Shanchieh Jay Yang
Department of Computer Engineering
Rochester Institute of Technology
Rochester, New York 14623
Email: Jay.Yang@rit.edu

9
1
0
2

g
u
A
3

]

G
L
.
s
c
[

1
v
9
1
2
1
0
.
8
0
9
1
:
v
i
X
r
a

Abstract—Recreating cyber-attack alert data with a high level
of ﬁdelity is challenging due to the intricate interaction between
features, non-homogeneity of alerts, and potential for rare yet
critical samples. Generative Adversarial Networks (GANs) have
been shown to effectively learn complex data distributions with
the intent of creating increasingly realistic data. This paper
presents the application of GANs to cyber-attack alert data and
shows that GANs not only successfully learn to generate realistic
alerts, but also reveal feature dependencies within alerts. This
is accomplished by reviewing the intersection of histograms for
varying alert-feature combinations between the ground truth
and generated datsets. Traditional statistical metrics, such as
conditional and joint entropy, are also employed to verify the
accuracy of these dependencies. Finally, it is shown that a Mutual
Information constraint on the network can be used to increase the
generation of low probability, critical, alert values. By mapping
alerts to a set of attack stages it is shown that the output of
these low probability alerts has a direct contextual meaning for
Cyber Security analysts. Overall, this work provides the basis for
generating new cyber intrusion alerts and provides evidence that
synthesized alerts emulate critical dependencies from the source
dataset.

Keywords—GAN, Cyber-Attack Alerts, Feature Dependency,

Histogram Intersection, Conditional Entropy, Joint Entropy

I.

INTRODUCTION

Classifying, predicting, and generating cyber-attack alert
data provides a unique set of challenges due to imbalance
and a lack of homogeneity in alert datasets. Furthering these
challenges critical exploits in a network are often rare and
difﬁcult to identify. Despite this is has been shown that alert
data can be used to identify anomalous trafﬁc [1] [2] [3],
network vulnerabilities [4], and bad actor behavior proﬁling
[5]. However, to fully realize the potential of cyber-attack
alert data, a means to acquire more data and analyze critical
dependencies within alerts is needed.

This work seeks to provide solutions to these challenges by
showing that deep learning models are able to recreate cyber-
attack alert data when given representative real world data.
This includes a means for driving better coverage of the feature
domain in model outputs, allowing more rare but critical events
to be synthesized.

First proposed by Goodfellow et al. , Generative Adversar-
ial Networks (GANs) [6] are a semisupervised deep learning
model that learn to emulate data from a ground truth dataset.
This framework was subsequently improved by Arjovsky et al.
[7] and Gulrajani et al. [8] by optimizing models via the
Earthmover Distance. Finally, Belghazi et al. [9] introduced an

This research is supported by NSF SaTC Award #1526383.

additional loss term to drive diverse model outputs. Through
these improvements, GANs have achieved state of the art
results in generating data with respect to images [10] [11]
[12], text [13], and sound [14] [15].

Additionally, GANs have been applied to network trafﬁc
to modify and obfuscate malicious trafﬁc [16] [17] [18] [19].
These adversarial samples are created to avoid being ﬂagged
by Network Intrusion Detection Systems (NIDS). However,
despite the usage of GANs to create data in other ﬁelds and
modify alerts for malicious intent in Cyber Security, there is a
lack of research in using GANs to synthesize NIDS alerts for
analysis from the target IP perspective. Given the low signal
to noise ratio for malicious alerts, a means to generate new
data based off historical data could enable researchers to better
understand network vulnerabilities and potential attack paths.

This research applies GANs to NIDS data collected via
Suricata (https://suricata-ids.org/) from the 2017
and 2018 Collegiate Penetration Testing Competition (CPTC
- https://nationalcptc.org/). CPTC’17 had ten stu-
dent teams attempt to penetrate and exploit vulnerabilities of a
virtualized network that manages election systems. CPTC’18
tasked new student teams with penetration into an autonomous
driving framework including virtualized embedded systems,
mobile applications, and processing servers. Rather than di-
rectly focusing on the speciﬁc behaviors exhibited by each
team for the two datasets, the data is segmented based off
the IP address being attacked. Doing so allows for alert
introspection on a target by target basis when comparing
ground truth data to that synthesized by a GAN.

Statistical analysis of these samples is shown to reveal
the challenge of generating cyber-attack alert data and natural
dependencies between alert features. For example, can the alert
signature and destination port category be used to identify
when in the competition the alert occurred? And to what degree
of accuracy? These dependencies may then be conﬁrmed
through direct computation of conditional entropy. By showing
GAN learns these intra-alert feature dependencies we show
that GAN is successful at learning latent interactions between
feature values when data is limited, non stationary, and lacks
homogeneity.

The remainder of the paper is structured as follows: Section
II provides an overview of some of the existing challenges
in Machine Learning for cyber-security as well as existing
applications of GANs for Cyber Security data. Section III and
Section IV discusses the GAN model as well as preprocess-
ing and analysis methods employed for generating synthetic
intrusion alerts. Finally, Section V discusses the observations

 
 
 
 
 
 
made from reviewing generated data and Section VI gives the
concluding remarks and future works of this research.

II. RELATED WORK

With the regularity and complexity of cyber attacks in-
creasing, so has the interest in applying Machine Learning
techniques to classify and predict attack actions. However, with
the use of Deep Learning models comes the need for massive
amounts of quality training data; several ongoing works in this
ﬁeld cite the need for more data as a limitation to their current
research [20] [21] [22] [23].

In particular, LSTM models are shown by Perry et al.
[20] to suffer signiﬁcantly lower accuracy when the dataset
provided for training is not large enough to be representative
of previous observations. This holds true for both classifying
cyber attackers and for predicting the next attack action taken.

This message is echoed by Faber and Malloy [22] despite
having a dataset of over 600,000 alerts and promising clas-
siﬁcation accuracy. They note that the availability of quality
labeled data and a low signal to noise ratio for malicious
activity are both outstanding issues.

Another avenue for research applying Machine Learning to
cyber-security data has been the generation of adversarial traf-
ﬁc. Speciﬁcally, GANs have been used to obfuscate malicious
trafﬁc through the modiﬁcation of packet behavior.

Rigaki et al. [16] proposed the use of GANs in generating
network trafﬁc which mimics other types of network trafﬁc.
In particular, real malware trafﬁc was modiﬁed by a GAN to
appear as legitimate network trafﬁc. This allowed the malware
to avoid detection from the Stratosphere Behavioral Intrusion
Prevention System through the modiﬁcation of three network
trafﬁc parameters; total byte size, duration of network ﬂow,
and time delta between current network ﬂow and the last
network ﬂow. They showed that through the modiﬁcation of
these parameters detection rate could be dropped down to 0%.

Similarly, Lin et al. [17] apply GANs to obfuscate trafﬁc
with the intention of directly deceiving a NIDS. Their model
makes use of 9 discrete features and 32 continuous features
to modify attack actions to avoid detection. Available attack
actions include denial of service and privilege escalation. Their
model is shown to drastically increase the evasion rate of
malicious network trafﬁc across several different classiﬁers
when benchmarked using the NSL-KDD benchmark provided
by [24].

Despite the successes of these works, no current GAN
model has been applied to recreation or expansion of cyber-
attack alert data from the target perspective. This research
aims at recreating malicious NIDS samples from the target
perspective to expand and better understand attack actions
taken against each machine in a network.

Applying GANs to Cyber Intrusion Alerts is non trivial
as the challenges posed by the data directly affect GANs.
The distribution of alert features cannot be modeled trivially
and critical alert features may occur with low probability.
The potential for mode dropping is simultaneously high and
problematic to the contextual meaning of results. In order to
try and address this in other ﬁelds Belghazi et al. [9] propose

adding a Mutual Information constraint on the Generator.
Applied to Cyber Intrusion Alerts, the Mutual Information
constraint would encourage the generation of all alert features,
including the rare actions that are indicative of targeted attacker
behavior.

Training on a per target IP basis from the CPTC’17 and
CPTC’18 datasets shows the promise of GAN as a means
to synthesize alerts with limited and non-stationary data.
Additionally, intra-alert feature dependencies are captured and
revealed by the data sampled from the GANs’ output, showing
that critical interactions between feature values are preserved
by GANs. Finally, using a mapping of alert signatures to
believed attack stages shows that the generated results have
a direct contextual meaning for cyber analysts.

III. GAN MODEL

A Generative Adversarial Network is a class of neural
network where two neural networks are pitted against each
the generator (G), attempts to create
other. One network,
samples which seem to belong to a ground truth dataset. The
other network, the discriminator (D), takes inputs from the
ground truth dataset as well as G, and ﬂags samples as either
real or fake. This structure minimizes the generator loss each
time G successfully generates a sample that tricks D into
marking the sample as real. Conversely, the discriminator loss
is minimized when all samples from the ground truth set are
marked as real and all samples created by G are marked as
fake.

The Wasserstein GAN, ﬁrst proposed by Arjovsky et al.
[7] extends the concept of a GAN but with increased stability
during training. This was subsequently improved by Gulrajani
et al. [8] by adding a gradient penalty term to regularize the
gradients of D. The gradient penalty creates a 1-Lipschitz
constraint on the discriminator during training by sampling
noise from Pz and constraining the gradient of the L2 norm
of D(Pz) to 1. Additionally, D is given real samples Pr and
generated samples Pg in a 5:1 ratio per epoch of training;
this is done to increase the utility of gradients provided by D.
These modiﬁcations resulted in the discriminator loss function
provided in (1). This model is referred to as Wasserstein GAN
with Gradient Penalty (WGAN-GP).

DLoss = E[D(Pr)] − E[D(Pg)]
(cid:125)

(cid:123)(cid:122)
Wasserstein Distance

(cid:124)

(cid:124)

+ λE[(||∇

(cid:98)xD(Pz)||2 − 1)2]
(cid:125)
(1)

(cid:123)(cid:122)
Gradient Penalty

Despite these improvements to the loss function for the
discriminator, the generator loss was left unmodiﬁed. Belghazi
et al. [9] changed this by adding a mutual information term
to the generator’s loss. This contribution maximized an ap-
proximation of the mutual information between the generator’s
noise input Pz and it’s output samples Pg by minimizing the
Donsker-Varadhan (DV) representation of the Kullback-Leibler
(KL) divergence. This modiﬁcation is shown in (2).

The DV KL term was added by using a neural network
to learn how to estimate Mutual Information between two
distributions. The rationale behind this added constraint was
that it would force the generator to further explore the domain

of the data when generating new samples; not exploring the
dataset would result
to the amount of mutual
information which could be found between input noise and
the output samples. Herein this model will be referred to as
the WGAN-GPMI model.

in a limit

GLoss = −E[D(Pg)]
(cid:124)
(cid:125)
(cid:123)(cid:122)
Adversarial Loss

+ E[Pgz] + log(E[ePg⊗Pz ])
(cid:125)
(cid:123)(cid:122)
DV KL Divergence

(cid:124)

(2)

Since mutual information is theoretically unbounded, gradi-
ent updates resulting from it could overwhelm the adversarial
gradients resulting from the WGAN-GP’s discriminator loss
function. In order to address this all of the gradient updates
to the generator were adaptively clipped to ensure that the
Frobenius norm of the gradient resulting from the mutual
information was at most equal to the adversarial gradient [9],
as shown in (3).

gnorm = ga + min(||ga||, ||gm||)(

gm
||gm||

)

(3)

Note that gnorm is the normalized gradient, ga is the
adversarial gradient resulting from (1), and gm is the gradient
resulting from the DV KL portion of (2).

A WGAN-GP and WGAN-GPMI model were imple-
mented to generate cyber intrusion alerts from historical data.
Given the propensity for the WGAN-GPMI model to explore
the feature space it should follow that the WGAN-GPMI model
will produce superior results to the WGAN model. Each model
was conﬁgured with a hidden dimension size of 128, batch
size of 100, and learning rate of 5e − 4. G was conﬁgured to
sample 64 points of noise per sample batch. Both G and D
were two-layer fully connected neural networks.

The generator featured 4 independent fully connected lay-
ers in parallel on the output. These generate each of the 4
features tested. The mutual information estimator network also
consisted of 2 layers. The ﬁrst layer took input from each of the
aforementioned sources and mapped them to separate hidden
representation layers and added together. Then the second layer
mapped the hidden representation to a single output value
representing the mutual information estimate. The network
architecture for WGAN-GP may be seen visually in Fig. 1
and the addition of the estimator in WGAN-GPMI may be
seen in Fig. 2.

Due to the categorical nature of the data being generated all
features were one hot encoded and concatenated into a single
vector per alert. These values were then transformed into real-
world values by segmenting the vector into subcomponents
whose length’s equal the number of unique values for the given
feature. The argmax of each of these subcomponents was then
taken as a post-processing step to ﬁnd the corresponding real
world value generated. These discrete values were utilized for
all analytics applied in Section V-C.

In both ﬁgures yellow boxes represent inputs to the net-
work. The blue boxes represent weight layers of the network
which are updated via back-propagation. The concatenation
box at the end of the generator is a post processing step to form
the aforementioned one hot encoded alert vector from each

of the feature outputs. And the red boxes and lines represent
feedback paths which update network parameters during each
step of training.

Fig. 1: WGAN-GP Model Architecture: The real samples provided to
the Discriminator are one hot encoded in the same fashion as the
Generator’s output

Fig. 2: WGAN-GPMI Model Architecture: The Generator and Dis-
criminator are left unmodiﬁed from the WGAN-GP model

IV. DESIGN OF EXPERIMENTS

Training and testing of the CPTC dataset was broken
up into four stages. First, a GAN was trained to learn the
distribution of the input data on a per target IP basis and
emulate it. Then the intersection of histograms was calculated
for all combinations of features to express how well
the
GAN had learned to emulate the dataset and identify feature
dependencies. Next, feature dependencies for varying numbers
of feature permutations were veriﬁed using the weighted,
normalized, conditional entropy. Finally, the number of output
modes dropped for each model was compared to show that
the WGAN-GPMI model covered a larger percentage of the
alert feature domain. Additionally, we show that the additional

output modes captured by the WGAN-GPMI model pertain to
attack stages that the WGAN-GP model fails to capture.

A. CPTC Dataset & Preprocessing

The data used for these experiments comes from the Na-
tional Collegiate Penetration Testing Competition from 2017
and 2018. In 2017, teams were tasked with penetrating and
exploiting network vulnerabilities in a virtualized network
managing election systems. In 2018 teams were required to
attack a multifaceted system handling autonomous cars which
included host based systems, servers, and mobile assets such as
cell phones running an app. Each team had around 9 hours to
scan, inﬁltrate the network, and exﬁltrate information from the
target. Both datasets provide a unique opportunity for Machine
Learning experimentation as they are completely comprised of
malicious actions as teams attempt to compromise the target
network.

Prior to being input to the models as training data, sig-
niﬁcant preprocessing was done. This not only reduced the
dimensionality of each of the features but also increased
the contextual utility of generated alerts. Though this data
is unique to the competition it
the
preprocessing described herein is applicable to any dataset
consisting of NIDS alerts.

is worth noting that

The ﬁrst preprocessing step applied to the data was to
separate alerts on a per-Destination IP basis. This allowed
individual models to be trained for each system on the network,
typifying the type of trafﬁc seen at that target. Additionally,
data from all of the teams could be compounded, more unique
attacker behaviors to be captured for each target.

Segmentation on a per-target basis has several intuitive
beneﬁts: First,
it allows for different vulnerabilities to be
highlighted on each machine given commonly occurring alert
features at that target. Secondly, it helps to remove noisy
alert inﬂuence from critical nodes in the network. For ex-
ample, internet facing IPs may contain a signiﬁcant amount
of scanning activity, drowning out exﬁltration related alert
features at nodes further embedded in the network. Finally,
the information extracted from alerts on a per target basis
is actionable, as network administrators can use commonly
targeted vulnerabilities to tune network settings for future
defense. Table I shows 4 target IP addresses selected for
experimentation from the CPTC’17 dataset as an example; the
operating system and high-level purpose of the machine is also
given.

TABLE I: CPTC 2017 Mapping of IP Address to Machine Us-
age/Purpose

IP Address
10.0.0.100
10.0.0.27
10.0.0.22
10.0.99.143

Operating System
Windows
Ubuntu
Ubuntu
Ubuntu

Machine Usage
Active Directory Server
HTTP Server
MySQL Server
HTTP Server

Next, the dimensionality of the destination port feature was
reduced based off common service categories run across a
collection of ports provided by the Internet Assigned Numbers
Authority [25]. This reduction drops the number of unique
values from 1516 destination ports to 69 destination services
this has the effect
for the CPTC’17 dataset. Contextually,

of indicating what service is being targeted by attackers,
rather than just knowing a speciﬁc port number. Herein the
processed Destination Ports are referred to as Destination
Services. Additionally, the dimensionality reduction step can
easily be expanded or customized on a per network basis given
a corporation’s conﬁguration of services.

Finally, a set of simple statistical criterion were used to
segment timestamps into bins. Traditional modeling of cyber
attacks use attack stages to segment actions into a series of
contiguous stages with dependencies on previous stages. The
beginning of an attack may consist of reconnaissance based
actions, yielding information about which IP to target in later
attack stages. Similarly, the CPTC dataset may be segmented
to try and capture unique behaviors into different Time Bins.

Following the methodology shown by [20] bins were
generated by smoothing the histogram timestamps and taking
the ﬁrst derivative to identify local minima and maxima. Then
stages were cut if they contained at least 10% of the total
data and consecutive events at the candidate point contained
less than 0.5% of the total data. The goal of this ruleset was
to capture signiﬁcantly different types of trafﬁc that does not
split bursts of data into multiple stages.

Table II shows the number of unique values present for
each target IP address tested after preprocessing the data for
CPTC 2017. Additionally a single character symbol is deﬁned
for each feature in parenthesis to compact future plot labels.
The same set of features and preprocessing steps were used
for CPTC 2018.

TABLE II: Number of Unique Feature Values for Assorted Target IPs

Alerts
Alert Signatures (A)
Destination Service (D)
Source IPs (S)
Timebins (T)

10.0.0.100
3388
53
25
6
36

Machine IP Address
10.0.0.22
10.0.0.27
2974
3186
34
41
21
27
6
6
30
28

10.0.99.143
2182
38
23
7
31

It is worth noting that if applied to real world attack data,
segmenting Source IP addresses by subnet could provide useful
context to the originator of the attack. However, if an attack
was well planned or socially engineered to look like normal
behavior within that portion of the network then no alerts
would be generated. These shortcomings remain outstanding
challenges of NIDS as a whole and fall outside the scope of
this work.

B. Histogram Intersection

The Histogram Intersection metric compares the similarity
of two histograms within the same domain by computing
the amount of overlap between them. It is naturally bounded
between 0 and 1, intuitive to understand, extends to joint dis-
tributions of features, and may be graphed to directly visualize
results. Let P represent the ground truth data histogram and Q
represent the generated data histogram, each with N samples.
The Histogram Intersection (G) is then deﬁned as shown in
(4).

G(P, Q) =

(cid:80)N
max((cid:80)N

i=0 min(Pi, Qi)
i=0 Pi, (cid:80)N

i=0 Qi)

(4)

Additionally, combinations of features were considered in
both the ground truth and generated datasets. For example,
the histogram of all possible combinations of values for Alert
Signature and Destination Service is one class of combi-
nations. The intersection of these combinations of features
was also taken by representing feature combinations as joint
distributions; Herein, the number of features included in each
histogram is referred to as an m-tuple. The intersection scores
of varying m-tuple histograms were then reviewed to judge
the performance of the generator in recreating increasingly
complex data.

C. Dependencies within Alert Features

An additional property of the intersection of histograms
is that it reveals intra-alert feature dependencies, which helps
explain and assess the performance of GAN models. This
is accomplished by reviewing the difference in histogram
intersection as new features are introduced to the histogram.
if the intersection for feature X is 0.8 and the
That
intersection for 2-tuple histogram of features X and Y is 0.79
then X is expected to predict Y well; this relationship is not
necessarily to be bidirectional.

is,

To conﬁrm that

these scores correctly indicate feature
dependencies the conditional entropy of Y given X can be
computed directly. It is important to extend the previous m-
tuple notation to include a conditional equivalent. This is
deﬁned as the Y |X-tuple, which deﬁnes a single feature Y
given a vector of features X.

The conditional entropy was ﬁrst weighted such that a
single value could be obtained to represent all possible input
condition values for a ﬁxed set of features. It was computed
using (5). In this equation the weight term |wi|
represents
|w|
the number of times the conditional input values at index i
occurred in the dataset, divided by the total number of alerts.
pi|j represents the probability of the output feature value at
index j occurring given the input feature values at index i.

(cid:98)HY |X0,X1,...,Xm =

N
(cid:88)

i=0

(cid:18) |wi|
|w|

∗

Z
(cid:88)

(cid:16)

j=0

pi|j ∗ log(

(cid:17)(cid:19)
)

1
pi|j

(5)

This score was then normalized in (6) by dividing the
weighted entropy by the entropy maximizing distribution for a
discrete dataset with ﬁnite support; the uniform distribution U
with cardinality equivalent to the number of unique elements
in the joint distribution considered. Using this metric, entropy
values close to 0 indicated that a given input resulted in a
particular output with near determinism. Entropy values close
to 1 indicated that given a particular input condition all outputs
were equally probable.

H Y |X0,X1,...,Xm =

(cid:98)HY |X0,X1,...,Xm
H(U)

(6)

Similarly, the joint entropy was computed and normalized
for all m-tuples using (7) and dividing by a uniform dis-
tribution. This metric provides a baseline for analyzing the
results of the weighted normalized conditional entropy by

illustrating the randomness of the data if feature dependence
is not considered.

HXm = −

(cid:88)

xm

p(x0, x1, ..., xm) ∗ log (cid:0)p(x0, x1, ..., xm)(cid:1) (7)

input condition features, different

Most importantly, comparing the weighted normalized con-
ditional entropy of the ground truth and generated data pro-
vided a numerical way to evaluate how well the GAN learned
to mimic feature interactions seen in real data. Normalizing
the entropies makes it possible to draw comparisons between
different
input condition
feature vector sizes, and different target IP addresses. Similarly,
normalizing the joint entropy of the varying m-tuple feature
combinations allows for a universal method to compare the
challenge of recreating increasingly complex data. The direct
comparison of normalized joint entropy and normalized con-
ditional entropy further illustrates the importance of capturing
feature dependencies with GANs.

D. Output Modes and Attack Stages

Finally, the purpose of adding in the mutual information
constrained model (WGAN-GPMI) was to palliate mode drop-
ping. In order to evaluate this, a two step analysis process
was employed. First, the number of output modes dropped
for all feature combinations was collected. Then, to provide
a result with direct contextual meaning to cybersecurity, the
generated alerts were mapped to attack stages to show that
WGAN-GPMI is capable of synthesizing alerts pertaining to
more attack stages than the WGAN-GP model is.

We deﬁne the attack stages based off the type of actions
taken, such as reconnaissance and data exﬁltration. Alert
attributes such as category or signature gives the inclination
of attack type; however, the category is an arbitrary high-level
description of the attack type that may not accurately represent
the outcome of the action whereas the signature may be at too
ﬁne of granularity to depict the attack behavior. Thus, this work
also assesses the synthetically generated alerts by mapping the
alert signatures to one of the deﬁned attack stages given in
Table III, by manually examining the objective and outcome
described in the signature description.

TABLE III: Attack Stage Types

Attack Stage

IP Scan
Service Scan
Targeted Scan
Social Engineering
Surﬁng
Speciﬁc Exploits
Escalate Privledges
Zero Day
Malware Injection
Degrade Operations
Data Exﬁltration

Description

Scan to reveal IP addresses
Scan to reveal services active on a target
A targeted and speciﬁc scan on a machine
Deceiving / manipulating individuals for malicious intent
Browsing publicly available information to research target
Using a speciﬁc vulnerability on a target
Gaining unauthorized privileges
Conducting an action not recorded and/or observed before
Delivering malware to target
Reduce or interrupt “normal” functionality of a target
Steal and extract sensitive information

Using this mapping we can see if GANs capture latent
behaviors within the dataset even when it fails to output
speciﬁc alert signatures that occurred explicitly in the dataset.
Additionally, the output domain coverage for each model is
shown to compare the model’s performance on ﬁne grained
generation to that of the attack action distribution.

TABLE IV: Histogram Intersection for all Feature Combinations: CPTC’17

WGAN-GP

WGAN-GPMI

Target Machine IP Address

Features
A
D
S
T
A,T
A,S
S,D
D,T
S,T
A,D
A,S,T
A,S,D
A,D,T
S,D,T
A,S,D,T

10.0.0.100
0.697 ± 0.002
0.772 ± 0.007
0.717 ± 0.007
0.814 ± 0.008
0.668 ± 0.007
0.634 ± 0.007
0.698 ± 0.007
0.710 ± 0.007
0.710 ± 0.007
0.693 ± 0.002
0.599 ± 0.007
0.627 ± 0.007
0.653 ± 0.007
0.611 ± 0.007
0.584 ± 0.007

10.0.0.27
0.658 ± 0.007
0.660 ± 0.006
0.867 ± 0.009
0.760 ± 0.007
0.630 ± 0.007
0.590 ± 0.007
0.598 ± 0.007
0.631 ± 0.006
0.702 ± 0.008
0.637 ± 0.006
0.558 ± 0.007
0.573 ± 0.007
0.615 ± 0.006
0.569 ± 0.007
0.548 ± 0.007

10.0.0.22
0.844 ± 0.005
0.843 ± 0.005
0.846 ± 0.008
0.818 ± 0.008
0.741 ± 0.007
0.774 ± 0.004
0.768 ± 0.004
0.768 ± 0.004
0.741 ± 0.007
0.828 ± 0.005
0.686 ± 0.007
0.761 ± 0.004
0.756 ± 0.007
0.690 ± 0.007
0.601 ± 0.007

10.0.99.143
0.858 ± 0.009
0.905 ± 0.009
0.843 ± 0.009
0.723 ± 0.009
0.630 ± 0.008
0.757 ± 0.008
0.779 ± 0.009
0.659 ± 0.009
0.698 ± 0.009
0.830 ± 0.008
0.580 ± 0.008
0.734 ± 0.009
0.612 ± 0.008
0.597 ± 0.008
0.571 ± 0.008

10.0.0.100
0.890 ± 0.006
0.899 ± 0.006
0.906 ± 0.008
0.892 ± 0.008
0.774 ± 0.008
0.791 ± 0.008
0.829 ± 0.007
0.790 ± 0.008
0.778 ± 0.008
0.825 ± 0.008
0.655 ± 0.008
0.733 ± 0.008
0.715 ± 0.008
0.652 ± 0.008
0.607 ± 0.008

10.0.0.27
0.833 ± 0.005
0.846 ± 0.005
0.909 ± 0.005
0.815 ± 0.007
0.774 ± 0.007
0.747 ± 0.007
0.758 ± 0.005
0.777 ± 0.007
0.791 ± 0.006
0.822 ± 0.006
0.727 ± 0.006
0.737 ± 0.006
0.731 ± 0.006
0.734 ± 0.007
0.718 ± 0.006

10.0.0.22
0.847 ± 0.006
0.823 ± 0.007
0.755 ± 0.005
0.844 ± 0.008
0.754 ± 0.008
0.718 ± 0.008
0.715 ± 0.005
0.736 ± 0.008
0.701 ± 0.007
0.820 ± 0.008
0.683 ± 0.008
0.697 ± 0.008
0.731 ± 0.007
0.632 ± 0.008
0.626 ± 0.008

10.0.99.143
0.808 ± 0.009
0.827 ± 0.009
0.881 ± 0.010
0.819 ± 0.009
0.717 ± 0.010
0.771 ± 0.010
0.800 ± 0.010
0.726 ± 0.009
0.782 ± 0.010
0.777 ± 0.010
0.632 ± 0.010
0.740 ± 0.010
0.685 ± 0.010
0.635 ± 0.010
0.615 ± 0.010

TABLE V: Histogram Intersection for all Feature Combinations: CPTC’18

WGAN-GP

WGAN-GPMI

Target Machine IP Address

Features
A
D
S
T
A,T
A,S
S,D
D,T
S,T
A,D
A,S,T
A,S,D
A,D,T
S,D,T
A,S,D,T

10.0.1.46
0.752 ± 0.005
0.764 ± 0.004
0.744 ± 0.005
0.782 ± 0.007
0.764 ± 0.006
0.744 ± 0.005
0.782 ± 0.006
0.679 ± 0.004
0.667 ± 0.005
0.646 ± 0.007
0.679 ± 0.006
0.667 ± 0.005
0.646 ± 0.007
0.536 ± 0.006
0.536 ± 0.006

10.0.1.5
0.810 ± 0.003
0.954 ± 0.005
0.740 ± 0.006
0.718 ± 0.005
0.954 ± 0.004
0.740 ± 0.006
0.718 ± 0.006
0.701 ± 0.005
0.734 ± 0.006
0.644 ± 0.007
0.701 ± 0.004
0.734 ± 0.004
0.644 ± 0.007
0.617 ± 0.006
0.617 ± 0.005

10.0.0.24
0.801 ± 0.004
0.800 ± 0.006
0.789 ± 0.005
0.851 ± 0.006
0.800 ± 0.006
0.789 ± 0.007
0.851 ± 0.005
0.784 ± 0.005
0.766 ± 0.007
0.774 ± 0.006
0.784 ± 0.005
0.766 ± 0.003
0.774 ± 0.005
0.750 ± 0.005
0.750 ± 0.004

10.0.0.22
0.815 ± 0.004
0.820 ± 0.006
0.812 ± 0.006
0.811 ± 0.007
0.820 ± 0.005
0.812 ± 0.006
0.811 ± 0.004
0.793 ± 0.006
0.789 ± 0.005
0.796 ± 0.007
0.793 ± 0.006
0.789 ± 0.004
0.796 ± 0.006
0.769 ± 0.005
0.769 ± 0.005

10.0.1.46
0.852 ± 0.006
0.859 ± 0.005
0.844 ± 0.006
0.826 ± 0.005
0.859 ± 0.006
0.844 ± 0.004
0.826 ± 0.005
0.746 ± 0.005
0.753 ± 0.006
0.694 ± 0.006
0.746 ± 0.006
0.753 ± 0.005
0.694 ± 0.006
0.580 ± 0.006
0.580 ± 0.006

10.0.1.5
0.765 ± 0.005
0.909 ± 0.004
0.785 ± 0.004
0.766 ± 0.006
0.909 ± 0.004
0.785 ± 0.005
0.766 ± 0.006
0.744 ± 0.006
0.773 ± 0.006
0.646 ± 0.005
0.744 ± 0.005
0.773 ± 0.006
0.646 ± 0.007
0.616 ± 0.005
0.616 ± 0.007

10.0.0.24
0.825 ± 0.004
0.918 ± 0.003
0.872 ± 0.005
0.928 ± 0.004
0.918 ± 0.007
0.872 ± 0.004
0.928 ± 0.005
0.898 ± 0.007
0.848 ± 0.007
0.862 ± 0.006
0.898 ±0.005
0.848 ± 0.006
0.862 ± 0.005
0.820 ± 0.005
0.820 ± 0.006

10.0.0.22
0.863 ± 0.003
0.874 ± 0.005
0.867 ± 0.003
0.857 ± 0.005
0.874 ± 0.004
0.867 ± 0.006
0.857 ± 0.006
0.811 ± 0.006
0.816 ± 0.005
0.807 ± 0.004
0.811 ± 0.006
0.816 ± 0.005
0.807 ± 0.005
0.762 ± 0.005
0.762± 0.006

V. RESULTS AND ANALYSIS

Each the models used were trained using slightly different
hyper parameter settings. WGAN-GP was trained for a total
of 200 epochs, while the WGAN-GPMI model was trained for
300 epochs. This increase in the number of epochs used was
to account for the added complexity of training the Estimator
network in conjunction with the Discriminator and Generator.
Additionally, the lambda value controlling the gradient penalty
term was set to 0.1 and 0.4 for the WGAN-GP and WGAN-
GPMI models respectively. All other hyperparameter values
were held constant for both models. The ADAM optimizer was
used with learning rate = 5e − 5, β1 = 0.5 and β2 = 0.8
for batches of 100 alerts.

A. Histogram Intersection

The accuracy of each model was observed using the inter-
section of histograms metric discussed in Section IV-B. The
Histogram Intersections (G-scores) were computed for several
targets when using both WGAN-GP and WGAN-GPMI. The
maximum intersection score for each combination of features
was bolded if the given score was at least 0.05 greater than the
intersection score of the corresponding result from the other
model. Each model was sampled 1000 times to compute the
standard deviation of the G-scores. Table IV and Table V
show the G-scores and standard deviation for CPTC’17 and
CPTC’18 respectively.

First, note that both WGAN-GP and WGAN-GPMI
achieves reasonably good performance, even when considering
the combination of all 4 feature values; Samples from WGAN-
GP are able to achieve up to 60% intersection with the ground
truth distribution while samples generated by the WGAN-
GPMI model achieve up to 71% intersection in CPTC’17;
similarly the CPTC’18 data shows improvements when using
the WGAN-GPMI model and a maximum G-score of 82%.
Secondly, note that for both IP addresses the Mutual Informa-
tion constraint in the WGAN-GPMI model is able to increase
the G-score. This is a result of the model learning a probability
distribution which is closer to that of the ground truth data.

It

is interesting to note that

the effect of the mutual
information constraint varies from target IP address to target IP
address. For example, target 10.0.0.22 only has small improve-
ments to Histogram Intersection when using the WGAN-GPMI
model. In several cases, such as Source IP and Destination
Service, the intersection score actually drops. On the other
hand Target IP addresses such as 10.0.0.27 see a large beneﬁt
from using the mutual information constraint. On average,
the Histogram Intersection is 14.63% higher for the WGAN-
GPMI model than it’s WGAN-GP counterpart when trained on
the CPTC’17 dataset. When trained on CPTC’18 the average
increase in G-score is 5.6%. These results are particularly
interesting, as the intent of the mutual information constraint
is to improve mode dropping in the generator, not to directly
improve Histogram Intersection. Palliating mode dropping is

indirectly related to increasing Histogram Intersection in many
cases because it distributes output sample entropy across more
output values than standard GAN models do when exhibiting
mode dropping.

Another interesting result of Table IV is that the intersec-
tion of histograms is resilient to earlier score bias. Consider
the intersection score of Timestamp (T) on target IP 10.0.0.22.
This feature has a high G-score of 81.8%, potentially leading to
the fallacious expectation that any combination with T will also
score high. When moving to testing 2-tuple combinations such
as Timestamp (T) + Source IP (S) however the intersection
drops signiﬁcantly. This is due to a lack of dependence
between T and S.

Finally, it is important to note that the Histogram Intersec-
tions are generally higher for the data synthesized to emulate
CPTC’18 than the data emulating CPTC’17. One cause of
this is the increased number of alerts available for each of
the targets in CPTC’18 however further study is needed to
determine the exact effects of data set size on model output.
Additionally, these results demonstrate the promise of applying
these network architectures to various cyber alert datasets, not
just the one’s presented here.

B. Dependencies within Alert Features

Given the intersection scores in Tables IV and V it is
possible to construct a graph of intersection scores as varying
values of m are used for the m-tuple histograms. By repre-
senting the data is this manner it becomes easier to visualize
feature dependencies based off the difference between the m-
tuple intersection scores and m + 1-tuple intersection scores.
Such a graph was constructed for target IP 10.0.0.22, using
the WGAN-GP model results, in Fig. 3.

Fig. 3: Intersection of Histogram Scores for combinations of feature
inputs on target IP 10.0.0.22.

Beginning from the outer edges of the graph, single-
feature histograms are considered. Then each non-labeled
vertex represents a union operator and connects to an m + 1

Fig. 4: Intersection of Histogram Scores for combinations of feature
inputs on target IP 10.0.0.24.

feature joint distribution node closer to the center of the
graph. This process continues until the center of the graph
is reached. At the central node all four features are considered
in the histogram computation. Lines are color coded such that
blue lines indicate feature unions which result in less than
5% difference between histogram scores. Conversely, lines
which are red indicate an difference that is greater than 5%.
Recall that the standard deviation for individual scores was
never higher than 0.01%, meaning that the 5% cutoffs here
are notably outside the margin of noise. Lines which are
purple indicate that only one of the original m-tuples has a
drop in intersection greater than 5%. All dashed lines are
bounding boxes added to clearly segment the varying m-tuple
histograms.

Note that

in order to maintain planarity of the graph,
two of the 2-tuple intersections were removed in each graph.
This was done to increase readability of the graph for the
aforementioned explanation; the results for all combinations
are still important to consider for the subsequent analysis.

To verify the aforementioned feature dependencies the
weighted normalized conditional entropy is computed for all
target IPs from the CPTC’17 dataset, across all potential
Y |X feature-tuples. These results are shown in Table VI.
Additionally, all normalized joint entropy values are computed
for all target IPs in VII to provide a baseline representation of
the amount of randomness in the data.

By computing the conditional entropy in Table VI it is
apparent that the WGAN-GPMI model closely imitates the
dependencies of the ground truth. In fact, several of the small
valued m-tuples such as A|T, T|D, and D|S,T all have identical
conditional entropy values to the ground truth distribution.
These values, as well as those within within 10% of the ground
truth entropy value, are highlighted for clarity.

Using the graph presented in Fig. 3 along with Table VI and
Table VII, several 3-tuple feature dependencies are reviewed

TABLE VI: Weighted Normalized Conditional Entropy Values for all target IPs: WGAN-GPMI Result

Target Machine IP Address

Features
A|T
T|S
T|A
S|T
S|A
D|S
A|D
T|D
D|T
A|S
S|D
D|A
S|A,D
D|S,T
S|D,T
T|A,D
A|S,D
A|S,T
A|D,T
D|A,S
T|S,D
D|A,T
S|A,T
T|A,S
A|S,D,T
D|A,S,T
T|A,D,S
S|A,T,D

10.0.0.100
0.244
0.593
0.330
0.262
0.800
0.346
0.080
0.479
0.287
0.346
0.822
0.006
0.799
0.171
0.107
0.316
0.069
0.131
0.038
0.005
0.393
0.004
0.211
0.365
0.041
0.002
0.209
0.362

Ground Truth Results
10.0.0.27
0.238
0.463
0.339
0.252
0.752
0.445
0.222
0.346
0.234
0.385
0.779
0.246
0.747
0.118
0.025
0.335
0.206
0.117
0.018
0.243
0.340
0.238
0.178
0.312
0.172
0.232
0.167
0.302

10.0.0.22
0.153
0.515
0.695
0.263
0.831
0.253
0.070
0.655
0.152
0.271
0.856
0.006
0.829
0.013
0.101
0.650
0.056
0.013
0.001
0.005
0.587
0.003
0.100
0.561
0.028
0.002
0.498
0.558

10.0.99.143
0.333
0.695
0.246
0.405
0.711
0.278
0.288
0.383
0.379
0.475
0.785
0.016
0.705
0.149
0.024
0.246
0.245
0.130
0.004
0.012
0.348
0.007
0.228
0.302
0.195
0.004
0.222
0.294

10.0.0.100
0.244
0.593
0.330
0.263
0.229
0.509
0.149
0.479
0.287
0.403
0.436
0.055
0.228
0.171
0.107
0.316
0.018
0.112
0.038
0.054
0.176
0.044
0.055
0.170
0.005
0.044
0.157
0.055

Generated Results
10.0.0.22
0.153
0.516
0.695
0.252
0.526
0.207
0.007
0.655
0.152
0.214
0.474
0.048
0.474
0.013
0.101
0.650
0.007
0.013
0.001
0.000
0.334
0.000
0.100
0.328
0.000
0.000
0.328
0.100

10.0.0.27
0.238
0.463
0.339
0.186
0.239
0.385
0.026
0.346
0.234
0.376
0.260
0.009
0.226
0.118
0.025
0.335
0.003
0.117
0.018
0.000
0.144
0.006
0.012
0.144
0.003
0.000
0.144
0.004

10.0.99.143
0.334
0.695
0.246
0.406
0.222
0.558
0.097
0.383
0.379
0.543
0.301
0.000
0.222
0.149
0.024
0.246
0.055
0.131
0.004
0.000
0.170
0.000
0.019
0.089
0.001
0.000
0.089
0.019

TABLE VII: Normalized Joint Entropy Values for all target IPs: WGAN-GPMI Result

Target Machine IP Address

Features
A,D
A,S
A,T
D,T
S,D
S,T
A,D,T
A,S,D
A,S,T
S,D,T
A,S,D,T

10.0.0.100
0.715
0.704
0.783
0.811
0.764
0.816
0.805
0.735
0.780
0.806
0.803

Ground Truth Results
10.0.0.22
10.0.0.27
0.469
0.652
0.674
0.683
0.839
0.781
0.858
0.807
0.686
0.711
0.842
0.801
0.839
0.775
0.674
0.683
0.810
0.750
0.810
0.775
0.810
0.750

10.0.99.143
0.747
0.749
0.750
0.767
0.738
0.773
0.750
0.749
0.740
0.748
0.740

10.0.0.100
0.492
0.462
0.617
0.682
0.553
0.672
0.603
0.508
0.595
0.646
0.605

Generated Results

10.0.0.27
0.398
0.531
0.603
0.592
0.533
0.642
0.538
0.478
0.595
0.595
0.563

10.0.0.22
0.191
0.456
0.648
0.608
0.444
0.665
0.547
0.389
0.595
0.581
0.553

10.0.99.143
0.553
0.652
0.638
0.672
0.652
0.593
0.595
0.579
0.620
0.647
0.611

for target IP 10.0.0.22. The joint features of interest include
A + D + T and A + D + S and all potential conditional inputs
utilizing these features.

Beginning with the joint of A, D, S, the graph from Fig. 3
highlights two conditional entropy values of interest; S|A, D
and D|A, S. Observing the graph and difference in histogram
intersection scores, D should be easily predicted given A and
S. The conditional entropy for D|A, S is low, as well as
signiﬁcantly lower than the joint entropy for A, D, S, matching
expectation. Similarly S|A, D matches expectations as the
conditional entropy is much higher along with the difference
in histogram intersection scores.

The joint of A, D, T is less clear to analyze given that
the conditional entropy of T |A, D is high while the difference
of intersection scores is low. One potential explanation for
this comes from Table VII. The joint distribution of A, D has
low entropy in both the ground truth and generated datasets.
Then, the addition of feature T drastically raises the entropy
for both dataset. Given that both the conditional entropy and
joint entropy are high it may be concluded that the distribution

of T is both stochastic and independent of the joint distribution
A, D. Given this information the generator could learn to
output values of T randomly, maintaining a high intersection
score score despite a lack of dependence with other alert
features.

These graphs were also generated to analyze dependencies
in the CPTC’18 data. Fig. 4 shows the results for target IP
10.0.0.24. Note that the feature dependencies for this data are
considerably stronger than in the example from CPTC’17. The
intersection scores have a much lower amount of variability
between each level of m-tuples, indicating a higher level of
intra-alert feature dependencies. In fact the delta from the
highest G-score in the graph to the lowest is only an 11.1%
decrease. Three out of the four target IPs tested from CPTC’18
demonstrated small overall variability.

C. Output Modes and Attack Stages

Finally, to assess output modes captured by each model,
we examine the number of output modes dropped or added
by WGAN-GPMI. This was done by looking at all the unique

TABLE VIII: Output Modes Dropped and Noisy Outputs: CPTC’17

Target Machine IP Address

Features
Noise
Dropped

# Alerts
# Unique Modes
% Modes Dropped
Noise Ratio

10.0.0.100
168
21
3388
32
0.6563
5.250

WGAN-GP

10.0.0.27
235
15
3166
27
0.5556
8.704

10.0.0.22
76
9
2974
22
0.4091
3.455

10.0.99.143
321
10
2182
27
0.3704
11.889

10.0.0.100
213
10

WGAN-GPMI

10.0.0.27
97
14

10.0.0.22
107
4

10.0.99.143
98
8

0.3125
6.656

0.5185
3.593

0.1818
4.864

0.2963
3.630

TABLE IX: Output Modes Dropped and Noisy Outputs: CPTC’18

Target Machine IP Address

Features
Noise
Dropped

# Alerts
# Unique Modes
% Modes Dropped
Noise Ratio

10.0.1.46
138
7
7475
33
0.2121
4.182

WGAN-GP

10.0.1.5
59
14
8695
31
0.4516
1.903

10.0.0.24
69
10
9861
22
0.4545
3.136

10.0.0.22
69
8
7996
29
0.2759
2.379

WGAN-GPMI

10.0.1.46
92
29

10.0.1.5
37
12

10.0.0.24
87
18

10.0.0.22
34
18

0.8788
2.788

0.3871
1.194

0.8182
3.955

0.6201
1.172

alert feature combinations across A/D/S/T values that existed
in the ground truth dataset versus those existed in the generated
dataset. These sets of unique values were compared to see
which modes were dropped, which were covered, and which
the ground truth set.
existed in the generated set but not
We refer to these values as Dropped, Covered, and Noisy
respectively.

Table VIII shows the number of Dropped and Noisy outputs
for each GAN model when trained on CPTC’17 data. The
bottom four rows show the number of alerts, the number of
unique 4-feature combinations, % of output modes dropped,
and ratio of noisy outputs to outputs within the domain of
the ground truth. Note that this table shows the direct beneﬁt
of mutual information maximization, as the number of output
modes missed by the model decreases across the board for the
WGAN-GPMI model. Some of the target IP addresses learn
more output modes than others when moving to the WGAN-
GPMI model; 10.0.0.100, as well as 10.0.0.22, halve the
number of output modes dropped. On the other hand, 10.0.0.27
and 10.0.99.143 only see a minor improvement when adding in
the mutual information constraint. These IP addresses instead
see a large decrease in the number of noisy output modes
when used for training the WGAN-GPMI model instead of the
WGAN-GP model. It’s also important to note that these output
modes aren’t inherently wrong since the individual feature
value do exist in the ground truth dataset. However, there
should be no gradient feedback to encourage the generation
of these combinations of feature values since they don’t occur
in the ground truth dataset.

Table IX shows the equivalent information for each gen-
trained on the CPTC’18 data. Interestingly
erative model
for all but target IP 10.0.0.24 the inverse relationship be-
tween Dropped and Noisy output modes holds true. Overall,
the WGAN-GPMI model contributes to signiﬁcantly lower
amounts of noisy outputs when trained on the CPTC’18 data
rather than palliating mode dropping. Despite this, Table V
showed an increase in the intersection between the ground truth
and generated histograms for the WGAN-GPMI model. This
points to the decreased noisy alerts of this model resulting
in a probability distribution that is signiﬁcantly closer to the

ground truth distribution despite missing more output modes.

One potential explanation for this would be that the missing
output modes occur with such low probability that the loss
score beneﬁts when the model learns to overemphasize outputs
which occur frequently in the ground truth. Methods to recreate
rare samples remains an ongoing challenge that is incredibly
important to the ﬁeld of Cyber Security. It is possible that
critical actions, such as data exﬁltration may only generate a
small number of alerts rarely over the course of an attack.
Being able to model such behaviors would be extremely bene-
ﬁcial to proactive Cyber Defense, where critical vulnerabilities
are identiﬁed and patched.

Finally, a means to identify the type of behavior associated
with the additional output modes captured would provide
contextual information to what type of network behaviors are
most recoverable from data driven models such as GANs.
To accomplish this Alert Signatures are mapped to one of
the 12 attack stages provide in Table III. Figure 5 shows
the attack stage coverage within the ground truth data as
well as those generated from WGAN-GP and WGAN-GPMI
for the CPTC’17 dataset. Note that the WGAN-GPMI model
shows almost identical attack stage distribution as the ground
truth data, exhibiting improvement over the WGAN-GP case.
Speciﬁcally, it synthesized alerts pertaining to the Targeted
Scanning stage with probability very close to the ground truth
distribution. Meanwhile, the standard WGAN-GP model could
not capture this output mode with probability greater than
1.8%, leaving a large gap in the generated data sample.

Figure 6 shows these results for the two target IPs as a
series of bars. The bars marked ”Coverage” show the number
of unique alert combinations (modes) that fall
into each
category. The bars marked ”Distribution” show the percentage
of alerts from the generated distribution belonging to each
category.

First, note that a large percentage of alerts were covered
for both target IP cases, whereas 17∼20% alerts with modes
not seen in the ground truth data. A detailed look at the
results reveal differences in the two target IP cases. Target
10.0.0.22 shows superior coverage with only 4 output modes

Fig. 5: Distribution of Attack Stages (AS) on target IP 10.0.0.22 from CPTC’17. Note that the WGAN-GPMI model results [C] have a much
closer probability distribution to the ground truth data [A] then the WGAN-GP Model [B].

being dropped while adding a larger number of novel modes
(though the percentage of alerts is still a minority). On the
other hand, Target 10.0.0.27 has less noisy modes and alerts but
still drops 14 modes from the ground truth data. It is possible
that these dropped modes represent samples which have an
extremely low probability of occurring; so much so that the
mutual information constraint is insufﬁcient to encourage the
generation of these values. Further supporting this is the fact
that even with less than half of the total output modes covered
there is still an 83% chance that the outputs from this model
do exist in the ground truth distribution.

detection rule-sets automatically and continuously on a per
system basis; all based off the trafﬁc previously seen. Further-
more, the analysis methods provided here are applicable to any
discrete dataset, not just cyber-security alert data.

Finally, future experimentation with a GAN model conﬁg-
ured to capture temporal dependencies through the usage of
LSTM or CNN architectures would be of great beneﬁt. Such
a model would have the ability to ﬁnd long term patterns in
network behavior for a given machine, help to build attacker
models, rather than identifying attack stage based off a single
Alert Signature, and allow for complex multistep attacks to be
learned.

Fig. 6: CPTC’17 Target IPs 10.0.0.22 and 10.0.0.23: The WGAN-
GPMI model features less mode dropping than the WGAN-GP model,
however the amount of probability mass assigned to noisy samples
also increases.

VI. CONCLUDING REMARKS

This research showed the promise of using GAN to recre-
ate target based cyber-alert data from known malicious alert
datasets. Additionally, intra-alert dependencies are shown to
be easily revealed through the usage of histogram intersection
score between ground truth and generated alerts. Even when
histogram complexity rises and intersection scores fall below
60% the feature dependencies identiﬁed by GAN are shown to
be accurate through conditional and joint entropy computation.

The ability to identify intra-alert feature dependencies
opens the door to many practical uses and future work. One
such example would be increasing the utility and respon-
siveness of network intrusion prevention systems by updating

[16] M. Rigaki and S. Garca, “Bringing a gan to a knife-ﬁght: Adapting
malware communication to avoid detection,” in Proceedings of IEEE
Security and Privacy Workshops (SPW), San Francisco, California,
USA, May 24 2018.

[17] Z. Lin, Y. Shi, and Z. Xue, “IDSGAN: generative adversarial
networks for attack generation against intrusion detection,” CoRR, vol.
abs/1809.02077, 2018. [Online]. Available: http://arxiv.org/abs/1809.
02077

[18] W. Hu and Y. Tan, “Black-box attacks against RNN based malware
detection algorithms,” in Proccedings of AAAI Conference on Artiﬁcial
Intelligence, New Orleans, Louisiana, USA, February 2-7 2018.
[19] H. S. Anderson, A. Kharkar, B. Filar, and P. Roth, “Evading machine
learning malware detection,” in Proceedings of Blackhat, Mandalay Bay,
Las Vegas, NV, July 22-27 2017.
I. Perry, L. Li, C. Sweet, S. J. Yang, and A. Okutan, “Differentiating
and predicting cyberattack behaviors using lstm,” in IEEE Conference
on Dependable and Secure Computing, Kaohsiung, Taiwan, December
10-13 2018.

[20]

[22]

[21] Y. Shen, E. Mariconti, P. A. Vervier, and G. Stringhini, “Tiresias:
Predicting security events through deep learning,” in Proceedings of
the 2018 ACM SIGSAC Conference on Computer and Communications
Security, ser. CCS ’18. New York, NY, USA: ACM, 2018, pp. 592–
605. [Online]. Available: http://doi.acm.org/10.1145/3243734.3243811
I. Faber and G. Malloy, “Deep security: Cyber security threat behavior
classiﬁcation,” ”http://cs230.stanford.edu/projects spring 2018/reports/
8285947.pdf”, 2018.
I. Amit, J. Matherly, W. Hewlett, Z. Xu, Y. Meshi, and Y. Weinberger,
“Machine learning in cyber-security - problems, challenges and
[Online]. Available: http:
data sets,” vol. abs/1812.07858, 2019.
//arxiv.org/abs/1812.07858

[23]

[25]

[24] L. Hu, Z. Zhang, H. Tang, and N. Xie, “An improved intrusion detection
framework based on artiﬁcial neural networks,” in Proceedings of
2015 11th International Conference on Natural Computation (ICNC),
Zhangjiajie, China, August 15-17 2015, pp. 1115–1120.
J.
Lear, A. Mankin, M. Kojo, K. Ono,
M. Stiemerling, L. Eggert, A. Melnikov, W. Eddy, A. Zimmermann,
B. Trammell, J. Iyengar, A. Mankin, M. Tuexen, E. Kohler, and
Y. Nishida, “Service name and transport protocol port number
registry,” 2018. [Online]. Available: https://www.iana.org/assignments/
service-names-port-numbers/service-names-port-numbers.xhtml

Touch,

E.

REFERENCES

[1] K. Veeramachaneni, I. Arnaldo, V. Korrapati, C. Bassias, and K. Li,
“AI2 : Training a big data machine to defend,” in Proceedings of IEEE
2nd International Conference on Big Data Security on Cloud, Beijing,
China, June 2016, pp. 49–54.

[2] P. Filonov, F. Kitashov, and A. Lavrentyev, “RNN-based early cyber-
attack detection for the tennessee eastman process,” in Proceedings of
ICML Time Series Workshop, Sydney, Australia, August 11 2017.
[3] P. Filonov, A. Lavrentyev, and A. Vorontsov, “Multivariate industrial
time series with cyber-attack simulation: Fault detection using an
LSTM-based predictive data model,” in Proceedings of NIPS Time
Series Workshop, Barcelona, Spain, December 9 2016.

[4] S. Noel and S. Jajodia, “Advanced vulnerability analysis and intrusion
detection through predictive attack graphs,” Critical Issues in C4I,
AFCEA Solutions Series. International Journal of Command and Con-
trol, 2009.

[6]

[5] D. S. Fava, S. R. Byers, and S. J. Yang, “Projecting cyberattacks through
variable-length markov models,” IEEE Transactions on Information
Forensics and Security, vol. Vol. 3, no. Num. 3, pp. 359–369, September
2008.
I. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-Farley,
S. Ozair, A. Courville, and Y. Bengio, “Generative adversarial
nets,” in Proceedings of Advances in Neural Information Processing
Systems 27, Z. Ghahramani, M. Welling, C. Cortes, N. D.
Lawrence, and K. Q. Weinberger, Eds. Curran Associates, Inc.,
2014, pp. 2672–2680. [Online]. Available: http://papers.nips.cc/paper/
5423-generative-adversarial-nets.pdf

[8]

[7] M. Arjovsky, S. Chintala, and L. Bottou, “Wasserstein generative
the 34th International
adversarial networks,” in Proceedings of
Conference on Machine Learning, ICML, Sydney, NSW, Australia,
August 6-11 2017, pp. 214–223. [Online]. Available: http://proceedings.
mlr.press/v70/arjovsky17a.html
I. Gulrajani, F. Ahmed, M. Arjovsky, V. Dumoulin, and A. Courville,
“Improved training of wasserstein gans,” in Proceedings of Advances
in Neural Information Processing Systems 30, Long Beach, California,
USA, December 4-9 2017, pp. 5769–5779. [Online]. Available: https:
//papers.nips.cc/paper/7159-improved-training-of-wasserstein-gans
I. Belghazi, S. Rajeswar, A. Baratin, R. D. Hjelm, and A. C. Courville,
information neural estimation,” in Proceedings of
“MINE: mutual
International Conference on Machine Learning, Stockholmsmssan,
Stockholm Sweden, July 10-15 2018.
[Online]. Available: http:
//arxiv.org/abs/1801.04062

[9]

[11]

[10] T. Karras, S. Laine, and T. Aila, “A style-based generator architecture
for generative adversarial networks,” in Proceedings of The IEEE
Conference on Computer Vision and Pattern Recognition (CVPR), (To
Appear), vol. abs/1812.04948, Long Beach, California, USA, June
15-21 2019. [Online]. Available: http://arxiv.org/abs/1812.04948
J.-Y. Zhu, T. Park, P. Isola, and A. A. Efros, “Unpaired image-to-image
translation using cycle-consistent adversarial networks,” Venice, Italy,
October 22-29 2017, pp. 2242–2251.
[12] C. Ledig, L. Theis, F. Huszar,
J.
single

J. Caballero, A. P. Aitken,
“Photo-
A.
realistic
generative
adversarial network,” in Proceedings of The IEEE Conference
on Computer Vision
vol.
abs/1609.04802, Honolulu, Hawaii, USA,
2017.
[Online]. Available: http://openaccess.thecvf.com/content cvpr 2017/
papers/Ledig Photo-Realistic Single Image CVPR 2017 paper.pdf

and Pattern Recognition
July

Z. Wang,
super-resolution

and W.
using

(CVPR),
22-25

Totz,
image

Shi,
a

Tejani,

[13] H. Su, X. Shen, P. Hu, W. Li, and Y. Chen, “Dialogue generation with
gan,” in Proccedings of AAAI Conference on Artiﬁcial Intelligence,
New Orleans, Louisiana, USA, February 2-7 2018. [Online]. Available:
https://aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/16508
[14] H.-W. Dong, W.-Y. Hsiao, L.-C. Yang, and Y.-H. Yang, “Musegan:
Multi-track sequential generative adversarial networks for symbolic mu-
sic generation and accompaniment,” in Proccedings of AAAI Conference
on Artiﬁcial Intelligence, New Orleans, Louisiana, USA, February 2-7
2018.

[15] Y. Gao, R. Singh, and B. Raj, “Voice impersonation using generative
adversarial networks,” in Proceedings of IEEE International Conference
on Acoustics, Speech and Signal Processing (ICASSP), Calgary, Alberta,
Canada, April 15-20 2018, pp. 2506–2510.

