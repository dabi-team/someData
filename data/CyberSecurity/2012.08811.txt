0
2
0
2

c
e
D
6
1

]

R
C
.
s
c
[

1
v
1
1
8
8
0
.
2
1
0
2
:
v
i
X
r
a

Investigating the Ecosystem of Offensive
Information Security Tools

Simon D Duque Anton∗†, Daniel Fraunholz∗†, and Daniel Schneider∗†

∗Intelligent Networks Research Group
German Research Center for Artiﬁcial Intelligence
Kaiserslautern, Germany

†Chair for Wireless Communication and Navigation
University of Kaiserslautern
Kaiserslautern, Germany

Email: {ﬁrstname}.{lastname}@dfki.de

Abstract—The internet landscape is growing and at the same
time becoming more heterogeneous. Services are performed via
computers and networks, critical data is stored digitally. This
enables freedom for the user, and ﬂexibility for operators. Data is
easier to manage and distribute. However, every device connected
to a network is potentially susceptible to cyber attacks. Security
solutions, such as antivirus software or ﬁrewalls, are widely
established. However, certain types of attacks cannot be prevented
with defensive measures alone. Offensive security describes the
practice of security professionals using methods and tools of cyber
criminals. This allows them to ﬁnd vulnerabilities before they
become the point of entry in a real attack. Furthermore, following
the methods of cyber criminals enables security professionals to
adapt to a criminal’s point of view and potentially discover attack
angles formerly ignored. As cyber criminals often employ freely
available security tools, having knowledge about these provides
additional insight for professionals. This work categorises and
compares tools regarding metrics concerning maintainability,
usability and technical details. Generally, several well-established
tools are available for the ﬁrst phases, while phases after the
initial breach lack a variety of tools.

Index Terms—Security Assessment, Penetration Testing, Secu-

rity Tools, Information Security, Survey

I. INTRODUCTION

The Internet of Things (IoT) provides a number of beneﬁts,
to consumers as well as business organisations. Flexibility
and ease of use, coupled with low management overhead and
cost make it a desirable concept. Smart cities, for example,
can beneﬁt from IoT solutions [1], as well as cloud applica-
tions [2]. For business organisations, logistics and asset man-
agement can be aided by the IoT [3]. The IoT is characterised
by its heterogeneity, as an abundance of different devices

This work has been supported by the German Federal Ministry of Education
and Research (BMBF) (Foerderkennzeichen 01IS18062E, SCRATCh). The
authors alone are responsible for the content of the paper. This work is
a preprint of a paper accepted at the 1st Workshop on Next Generation
Networks and Applications (NGNA-2020). Please cite as: SD Duque Anton,
D Fraunholz, and D Schneider. “Investigating the Ecosystem of Offensive
Information Security Tools”, in: 1st Workshop on Next Generation Networks
and Applications (NGNA-2020), Kaiserslautern, Germany (December 2020)

can constitute an IoT. Communication as well as embedded
computation capabilities mark the common denominator on
which IoT devices and networks depend. While these features
are a given in the age of constant mobile connectivity and
they also
open Wireless Local Area Networks (WLANs),
constitute the vulnerabilities of IoT networks. Being connected
to networks leads to an increased attack surface. Furthermore,
IoT devices are often cheap and manufactured in large num-
bers for short periods of time, until they become obsolete.
After that, newer versions are produced, often for small
prices. Consequently, re-use of hard- and software as well as
low effort in programming contribute to insecure operating
conditions [4]. The IoT is but a part of the development
towards increased connectivity that inherently carries higher
risks of cyber attacks. Botnets targeting IoT devices, such as
Mirai [5], industrial environments falling prey to attackers,
such as the power grid in the Ukraine in December 2015 [6],
and ransomware attacks on healthcare infrastructure [7] and
consumers [8] alike show the need for increased automated
security in this brave new digital world. As the networking
paradigms are shifting from classic home and ofﬁce networks
to heterogeneous ad hoc networks, security solutions have
to adapt as well [9]. Offensive security measures become
an administrators friend to discover vulnerabilities along the
attack phases. By preemptive security, such as vulnerability
threats can be mitigated before an attacker can
checking,
exploit
in the
them. These capabilities are more relevant
heterogeneous environments presented today. Furthermore, an
insight regarding methods as well as tools of cyber criminals
is becoming crucial for Information Technology (IT) security
professionals. Since criminals often rely on publicly available
tools, an understanding of those allows security professionals
to gain insight about the threat potential and possible attack
vectors. Furthermore, if IT security professionals adapt to the
methodology of a cyber criminal, they obtain a new under-
standing of attacking a system, potentially allowing for a more
suited defense against attacks. Additionally, any vulnerability

 
 
 
 
 
 
found by methods and tools of attackers is a vulnerability that
can be mitigated before a real attack occurs. The contribution
of this work is

• the identiﬁcation and collection of the most well-known
and used open source security assessment tools and
• the mapping of these tools to well-established attack

models and.

• the analysis, comparison and discussion of the capabili-

ties of these tools.

The remainder of this work is structured as follows. The
state of the art is presented in Section II. The methodology
underlying this paper is introduced in Section III. The tools
are introduced and evaluated in Section IV. A conclusion is
drawn in Section V.

without further software, except for operating system and
corresponding environment. A tool can consist of related parts
that could be used in a stand alone-fashion, but are distributed
and commonly used together as they follow purposes along
the path of a security assessment.

Freeware: In the context of this work, this term describes
tools which can be obtained by private persons and profession-
als alike free of charge. The free usage is not limited regarding
the time of usage, so trial versions of commercial software are
not considered. They are not speciﬁc to organisations.

Enterprise networks: Consisting of IT infrastructures, such
as computers and servers. Speciﬁcally excluded are Operation
Technology (OT) environments as found in industrial environ-
ments.

II. STATE OF THE ART

B. Data Sources

There is an abundance in literature regarding tools for
offensive security purposes, in numerous blogs, but also in
specialist books. However, an objective indication why the
tools were chosen to be presented is not provided. Either they
are used and recommended by the author, who usually is a
security professional that has built a tool-box for themselves.
Or the tools are contained in a suite, such as Kali Linux [10].
Velu presents the usage of Kali Linux for penetration testing
in his book, discussing the tools he deems most relevant [11].
Oakley introduces red teaming in his book, where tools are
introduced in the respective stages based on experience of the
author [12]. Kim presents practical penetration testing with
the tools chosen in a similar fashion [13]. Forshaw reduces
the focus to tools for attacking network protocols, thus setting
a scope [14]. However, the tools chosen are derived from
his long experience. In general, it is beneﬁcial to have tools
introduced by professionals with a long experience in the
ﬁelds, as they took a long time to chose the right tool-box and
become acquainted with it. In this work, however, the focus
is on creating tangible, objective criteria for rating offensive
security tools.

III. METHODOLOGY

This section presents the methodology on which this work is
founded. First, deﬁnitions of the terms are presented, after that,
the sources from which the tools are collected. Furthermore,
the scope of tools and applications is discussed, a metric for
attack stages is presented as well as the feature criteria of the
tools.

A. Deﬁnitons

This paragraph presents the deﬁnitions of terms used in this

work that are underlying to the evaluation.

Offensive information security: Often called red teaming or
penetration testing. It is a concept that describes using tools
and methods of an attacker to detect security vulnerabilities
which then can be ﬁxed before an attacker can exploit them.
Tool: Finding a deﬁnition of the term tool in the context
of software is exceedingly difﬁcult. For this work, a tool
is deﬁned as a software program that can be used as such

As the collection of exhaustive, consistent lists of security
tools with their attribution to a speciﬁc attack phase is difﬁcult,
several sources were considered when identifying tools to
evaluate in this work. First, the literature presented in Sec-
tion II was used to extract the tools the authors used. Second,
comprehensive lists that can be found online were employed.
The nmap project [15] provides a list of security tools, called
sectools [16]. Furthermore, r0lan provides an overview of
tools that is attributed to the phases they are used in [17].
From these sources, the most relevant tools were extracted.
Third, well-known security distributions such as Kali [10] and
Parrot [18] Linux contain the tools that are most established
in the security community.

C. Scope

The scope of this work are enterprise networks as discussed
in Section III-A, consisting of computers, servers and auxiliary
devices. Furthermore, the scope regarding the tools is limited
on tools with a security focus. Since there is a trend in
security research as well as cyber criminals to use tools that
are already installed on the target machine for exploitation
purposes, many tasks in security assessment can be performed
without security-speciﬁc tools. This technique is called living
off the land. An example is the use of Microsoft PowerShell
for enumerating users and directories.

D. Attack Metrics: MITRE ATT&CK

The MITRE ATT&CK matrix [19] was developed based on
the well-established Lockheed Martin Cyber Kill Chain [20].
Both aim at splitting a cyber attack into distinct phases during
which an attacker follows a certain goal. This is used to aid
in comprehending the objectives of an attack and ultimately
mitigating it. The structure of the MITRE ATT&CK model is
shown in Figure 1. Each of these phases requires a different
set of tools, so the aim of this work is mapping tools to these
phases as discussed in Section IV. The phases used in the
MITRE ATT&CK Enterprise matrix are as follows, with the
description according to the MITRE-homepage [19].

Reconnaissance: The phase during which an adversary col-
lects information about the target. Generally, reconnaissance

Fig. 1. MITRE ATT&CK Model

techniques are categorised in active, i.e. with the adversary
interacting with the target system in an unexpected way, and
passive, i.e. the adversary not directly interacting with the
target system.

Resource Development: The adversary is obtaining re-
sources that can aid in attacking the system, such as accounts,
systems, and other capabilities. The resources might be used
in later phases, such as Command and Control (C&C).

Initial Access: The adversary attempts to gain an initial
foothold on the target system. This is the ﬁrst phase with direct
adversarial action on the target.

Execution: The adversary executes malicious code on the
target system. This code execution usually follows an under-
lying goal. Often, on-board capabilities of the target system,
such as compilers and interpreters, aid in the execution of
malicious code.

Persistence: The phase in which the adversary aims to
secure the foothold. Persistence allows re-entry and access
to the system after the adversary logged out or the system
rebooted.

Privilege Escalation: In this phase, the adversary aims at
obtaining higher privileges. Often, certain users are restricted
from performing security-critical tasks, and the ﬁrst foothold
was performed with such restricted accounts. Elevating priv-
ileges allows the adversary to perform a wider variety of
actions.

Defense Evasion: After gaining access and elevating the
privileges, the adversary actively evades detection by Intrusion
Detection System (IDS). Obfuscation of the tools as well as
deactivation of security measures are performed in this phase.
Credential Access: The adversary aims at stealing account

credentials for further use and to aid in following phases.

Discovery: In this phase, the adversary is gaining infor-
mation about the environment in which the target system is
located. This includes machines and services, accounts and
users.

Lateral Movement: In this phase, the adversary is moving
through the target environment and infecting new systems.
Often, the foothold with which entry to the network was gained
does not contain the desired target, so lateral movement is
necessary to reach devices that are not directly reachable from
the outside.

Collection: In this phase, the adversary gathers the desired

information from the target machine.

Command and Control (C&C): In this phase, the adversary
executes control over the targeted systems and communicates
with them.

Exﬁltration: The phase in which the adversary attempts to
steal and obtain data without the owner of the target system
noticing. The data has to be sent in a fashion that does not
cause suspicion.

Impact: In this phase, the adversary maliciously impacts the
target system by destroying or restricting its functionality. This
activity can easily be detected by the owner of the system.

E. Tool Features

In order to evaluate and rate the tools, a metric needs to
be deﬁned. This metric should contain tangible, veriﬁable
features. The features used in this work are listed as follows:
• Actively maintained: This feature is evaluated according
to the latest release and the average number of releases
per year. Actively maintained tools provide bug ﬁxes and
the integration of new features and protocols as well as
a more active support.

• Usage: This feature discusses the licence a tool is pub-
lished under, the support a user can expect and whether
or not a paid version of the tool is available.

• Technical: This feature describes the interface of the tool
for a user as well as the programming language the
tool is programmed in. This is important as the way of
interaction can make a tool more difﬁcult or easier to
apply, while the programming language in open source

2345678910111213141timePre-attack1. Reconnaissance2. Resouce Devel.Enterprise Attack3. Initial Access4. Execution5. Persistence6. Privilege Escalation7. Defense Evasion8. Credential Access9. Discovery10. Lateral MovementPost-attack11. Collection12. Command and Control (C&C)13. Exfiltration14. Impacttools describes whether or not a user could adapt and
extend the tool.

and shellter [33], provide their code for a user to extend and
adapt.

These features allow an assessment of the tools according to
several dimensions. It can be derived if the tool is actively
developed and likely to be adapted to new technologies.
Furthermore, the capabilities for extending and embedding the
tool into a toolchain can be obtained from these features.

IV. ANALYSIS

In this section the relevant tools are identiﬁed and the metric
is applied for comparison. Then, the results for the comparison
are discussed.

A. Identiﬁcation

For the evaluation, well-established, commonly used se-
curity tools tailored for each of the phases as presented in
Section III-D were identiﬁed, collected and compared. As it
is not trivial to ﬁnd an exhaustive overview of security tools,
several sources were used to obtain information. Apart from
books presented in Section II, web resources were considered
as well. The nmap network scanner [15] hosts a list of security
tools [16]. Every tool that ﬁts the scope of this work in the top
50 tools of the sectools-list is evaluated in this work. Thus,
a good coverage of relevant tools is expected. Furthermore,
r0lan provides an overview of tools commonly used for the
individual phases [17]. Among links to tools, r0lan provides an
abundance of sources that describe methods rather than tools,
and information how to employ tools without a ﬁrst focus
on security, such as PowerShell, to perform security-relevant
tasks. From these sources, the most used tools were extracted.
They are listed in Table I, categorised according to the phases
of the MITRE ATT&CK metric.

B. Comparison

The tools identiﬁed in the previous subsection are listed in
Table I, with the criteria alongside which they are evaluated. It
can be seen that the ﬁrst stage has the most extensive number
of tools available. Most tools are still actively maintained,
meaning new releases are provided at the time of this work.
However, a few tools, empire [42] and Responder [35], are
indicated to be deprecated. Furthermore, several tools, Veil-
Evasion [32], Veil-Pillage [41] shellter [33], windows-privesc-
check [38], and Cloakify-Facory [44] have their latest releases
older than a year, which indicates limited maintenance of
these tools. Since most versions are free, do not have a paid
version and are developed by members of the community, most
support is provided in terms of forums or mailing lists. Every
tool provides a Command Line Interface (CLI), some tools
additionally provide a Graphical User Interface (GUI) or Web-
based User Interface (WUI). The CLI-capabilities allow for
the tool to be integrated into toolchains, with the output being
piped into other applications. Furthermore, since a number of
tools is written in Python, integration of the source code into
user tools is easily possible. All tools, except for Maltego [22]

1These tools are indicated to be no longer actively maintained.

C. Discussion

The features based on which the tools are evaluated are in-
tended to provide information for a user to pick a tool that ﬁts
her need. Furthermore, the quality and suitability of tools, as
well as their versatility is evaluated. For example, msf [27] can
be used in nine of 14 phases, making it the most versatile and
powerful tool in this comparision. This is due to the toolbox-
approach that allows msf to load different modules for speciﬁc
tasks. Furthermore, research underlying this work shows that
some phases have signiﬁcantly more tools created for them
than others. For example, the execution phase does not have
a singular tool dedicated to it. Instead, board measures of the
target system are used, or tools that are not security-speciﬁc,
such as web servers or communication tools. Furthermore,
the variety of tools, especially in the reconnaissance-phase,
is an indicator of knowledge and experience an IT security
professional should have.

V. CONCLUSION

This work highlights a few insights. First, there is a plethora
of IT security assessment tools available that can be used
by professionals as well as cyber criminals. Being aware of
these tools and gaining familiarity is therefore crucial for
security experts. The majority is freely available and actively
maintained, with examples and help readily available. Second,
some phases have more tools dedicated to them than others.
Reconnaissance has an abundance of publicly available tools
solely for the purpose of gathering information that can be
used to exploit a target. The initial access phase has several
tools as well, as attacks can be aimed at different types of
targets. For example, there is a number of tools to attack
websites, a different set of tools for attacking databases and
further tools for other attack vectors. Understanding these as a
professional is crucial for hardening any potential attack vector
and preventing attacks from happening in the ﬁrst place. Other
phases rely on tools already available on the target systems,
such as programming compilers and interpreters, PowerShell,
netcat and other tools. These can be misused to perform mali-
cious activity, a fact of which IT security professionals need to
be aware of as well. This living off the land can be discussed
in a future work, as there is an abundance of tools that can
be misused under the right circumstances. Furthermore, tools
for cracking passwords and for monitoring and exploiting
wireless devices were not considered in this work, as they
would exceed the scope. An exhaustive overview of such tools
can be discussed in a future work as well. This work shows that
gaining insight about attacks is crucial for defense. A method
commonly used to obtain information about attackers, their
tools and aims is honeypots [45], [46]. Attributing attackers
in order to implement
and attacks is similarly important
counter measures suitable for the attacks which are identiﬁed
as most likely or having most impact [47]. In general, detecting
attacks is becoming increasingly difﬁcult due to the changes in

[28] M. Cermak, “C99 webshell with php7 and mysql support,” last
visited 06-11-2020. [Online]. Available: https://github.com/cermmik/
C99-WebShell

[29] I. Augusto, “Reptile,” last visited 06-11-2020. [Online]. Available:

https://github.com/f0rb1dd3n/Reptile

[30] B. Hawkins, “Sharpersist,” last visited 06-11-2020. [Online]. Available:

https://github.com/ﬁreeye/SharPersist

[31] Offensive Security, “The Exploit Database Git Repository,” last visited
05-11-2020. [Online]. Available: https://github.com/offensive-security/
exploitdb

[32] The Veil-Framework, “Veil-Evasion,” last visited 05-11-2020. [Online].

Available: https://github.com/Veil-Framework/Veil-Evasion

[33] Economou, Kyriakos, “Shellter,” last visited 05-11-2020. [Online].

Available: https://www.shellterproject.com/

[34] AlessandroZ, “LaZagne,” last visited 05-11-2020. [Online]. Available:

https://github.com/AlessandroZ/LaZagne

[35] SpiderLabs, “Responder,” last visited 05-11-2020. [Online]. Available:

https://github.com/SpiderLabs/Responder

[36] B. Delpy, “mimikatz,” last visited 05-11-2020. [Online]. Available:

https://github.com/gentilkiwi/mimikatz

[37] M. Contino, “linuxprivchecker,” last visited 05-11-2020.
Available: https://github.com/sleventyeleven/linuxprivcheckers

[Online].

[38] pentestmonkey,
11-2020.
windows-privesc-check

“windows-privesc-check,”

05-
https://github.com/pentestmonkey/

visited

last

[Online]. Available:

[39] BloodHoundAD, “BloodHound,” last visited 05-11-2020.

[Online].

Available: https://github.com/BloodHoundAD/BloodHound

[40] GhostPack, “Rubeus,” last visited 05-11-2020. [Online]. Available:

https://github.com/GhostPack/Rubeus

[41] The Veil-Framework, “Veil-Pillage,” last visited 05-11-2020. [Online].

Available: https://github.com/Veil-Framework/Veil-Pillage

[42] EmpireProject, “Empire,” last visited 05-11-2020. [Online]. Available:

https://github.com/EmpireProject/Empire

[43] PaulSec, “DET (extensible) Data Exﬁltration Toolkit,” last visited
05-11-2020. [Online]. Available: https://github.com/PaulSec/DET
[44] TryCatchHCF, “Cloakify,” last visited 05-11-2020. [Online]. Available:

https://github.com/TryCatchHCF/Cloakify

[45] D. Fraunholz, M. Zimmermann, A. Hafner, and H. D. Schotten, “Data
mining in long-term honeypot data,” IEEE International Conference on
Data Mining series - Workshop on Data Mining for Cyber-Security,
2017.

[46] D. Fraunholz, M. Zimmermann, S. Duque Anton, J. Schneider, and H. D.
Schotten, “Distributed and highly-scalable wan network attack sensing
and sophisticated analysing framework based on honeypot technology,”
International Conference on Cloud Computing, Data Science & Engi-
neering, vol. 7, 2017.

[47] D. Fraunholz, D. Krohmer, S. Duque Anton, and H. D. Schotten, “Yaas
- on the attribution of honeypot data,” International Journal on Cyber
Situational Awareness, vol. 2, no. 1, pp. 31–48, 2017.

[48] S. Duque Anton, D. Fraunholz, S. Teuber, and H. D. Schotten, “A
question of context: Enhancing intrusion detection by providing context
information,” in 13th Conference of Telecommunication, Media and
Internet Techno-Economics (CTTE-17), 2017.

[49] S. D. Duque Anton, S. Sinha, and H. D. Schotten, “Anomaly-based
intrusion detection in industrial data with SVM and random forests,”
in 2019 International Conference on Software, Telecommunications and
Computer Networks (SoftCOM).

IEEE, 2019, pp. 1–6.

[50] S. Duque Anton, M. Gundall, D. Fraunholz, and H. D. Schotten,
“Implementing scada scenarios and introducing attacks to obtain training
data for intrusion detection methods,” in International Conference on
Cyber Warfare and Security (ICCWS), 2019.

IT infrastructure. Using context information [48], employing
novel machine learning approaches [49] and creating and
providing data to train IDSs [50] on are required to secure
IT network against current and future attacks.

REFERENCES

[1] C. Formisano, D. Pavia, L. Gurgen, T. Yonezawa, J. A. Galache,
K. Doguchi, and I. Matranga, “The advantages of iot and cloud applied
to smart cities,” in 2015 3rd International Conference on Future Internet
of Things and Cloud.
IEEE, 2015, pp. 325–332.

[2] S. Nastic, S. Sehic, D.-H. Le, H.-L. Truong, and S. Dustdar, “Pro-
visioning software-deﬁned iot cloud systems,” in 2014 international
conference on future internet of things and cloud.
IEEE, 2014, pp.
288–295.

[3] W. Ding, “Study of smart warehouse management system based on
the iot,” in Intelligence computation and evolutionary computation.
Springer, 2013, pp. 203–207.

reuse

“Code

[4] T.

Spring,

software
a
development,” threatpost, 2016. [Online]. Available: https://threatpost.
com/code-reuse-a-peril-for-secure-software-development/122476/
[5] C. Kolias, G. Kambourakis, A. Stavrou, and J. Voas, “Ddos in the iot:
Mirai and other botnets,” Computer, vol. 50, no. 7, pp. 80–84, 2017.
[6] A. Cherepanov, “Win32/Industroyer - a new threat for industrial control

secure

peril

for

systems,” ESET, Tech. Rep., June 2017.

[7] T. B. Slayton, “Ransomware: the virus attacking the healthcare industry,”

Journal of Legal Medicine, vol. 38, no. 2, pp. 287–311, 2018.

[8] R. Richardson and M. M. North, “Ransomware: Evolution, mitigation
and prevention,” International Management Review, vol. 13, no. 1, p. 10,
2017.

[9] S. Plaga, N. Wiedermann, S. Duque Anton, S. Tatschner, H. D. Schotten,
and T. Newe, “Securing future decentralised industrial IoT infrastruc-
tures: Challenges and free open source solutions,” Future Generation
Computer Systems, vol. 93, pp. 596–608, 2019.

[10] Offensive Security, “Our most advanced penetration testing distribution,
ever.” last visited 03-11-2020. [Online]. Available: https://www.kali.org/
[11] V. K. Velu, Mastering Kali Linux for Advanced Penetration Testing,

2nd ed. Birmingham, Mumbay: packt, 2016.

[12] J. G. Oakyley, Professional Red Teaming. Apress, 2019.
[13] P. Kim, The Hacker Playbook 3. Secure Planet, 2018.
[14] J. Forshaw, Attacking Network Protocols.

San Francisco: no starch

press, 2017.
[15] G. Lyon, “nmap:

the network mapper,” last visited 06-11-2020.

[Online]. Available: https://nmap.org/

[16] ——, “Top Network Security Tools,” last visited 06-11-2020. [Online].

Available: https://sectools.org/

[17] r0lan, “Awesome-Red-Teaming,” last visited 05-11-2020.

[Online].
Available: https://github.com/yeyintminthuhtut/Awesome-Red-Teaming
[18] Parrot Security CIC, “Parrot os,” last visited 03-11-2020. [Online].

Available: https://parrotlinux.org/

[19] “Mitre att&ck enterprise matrix,” last visited 03-11-2020. [Online].

Available: https://attack.mitre.org/matrices/enterprise/

[20] Lokheed Martin, “The cyber kill chain,” last visited 03-11-2020.
[Online]. Available: https://www.lockheedmartin.com/en-us/capabilities/
cyber/cyber-kill-chain.html

[21] Greenbone, “OpenVAS - Open Vulnerability Assessment Scanner,”
last visited 06-11-2020. [Online]. Available: https://www.openvas.org/
index-de.html

[22] Paterva, “Maltego,” last visited 06-11-2020.

[Online]. Available:

https://www.maltego.com/

[23] Shodan, “The search engine for the web,” last visited 06-11-2020.

[Online]. Available: https://www.shodan.io/

[24] C. Martorella, “theHarvester,” last visited 06-11-2020.

[Online].

Available: https://github.com/laramies/theHarvester

[25] Aircrack-ng, “Aircrack-ng,” last visited 06-11-2020. [Online]. Available:

https://www.aircrack-ng.org/

[26] J. Wright, “Open-source phishing framework,” last visited 06-11-2020.

[Online]. Available: https://getgophish.com/

[27] Rapid7, “metasploit

- The world’s most used penetration testing
[Online]. Available: https:

last visited 06-11-2020.

framework,”
//www.metasploit.com/

TABLE I
SECURITY ASSESSMENT TOOLS CATEGORISED ACCORDING TO THE PHASES THEY ARE USED DURING

Tools

Reconnaissance
nmap [15]
OpenVAS [21]
Maltego [22]
Shodan [23]
TheHarvester [24]

Initial Access
Aircrack-ng [25]
GoPhish [26]
msf [27]

Persistence
C99 webshell [28]
Reptile [29]
SharPersist [30]

Privilege Escalation
searchsploit [31]
msf [27]

Defense Evasion
veil-evasion [32]
shellter [33]
msf [27]

Credential Access
LaZange [34]
Responder [35]
Mimikatz [36]
msf [27]

Discovery
linuxprivchecker [37]
windows-privesc-check [38]
Bloodhound [39]

Lateral Movement
Mimikatz [36]
Rubeus [40]
msf [27]

Collection
Veil-Pillage [41]
msf [27]

Command and Control
empire [42]
msf [27]

Exﬁltration
DET [43]
Cloakify-Factory [44]
msf [27]

Impact
Veil-Pillage [41]
msf [27]

Releases
p.a.

Latest

First

Usage aspects

Licence

Supp.

Paid

Interf.

Technical aspects
Lang.

1997
2006
2007
2009
2011

2006
2013
2014

2005
2018
2019

2014
2014

2015
2014
2014

2015
2014
2007
2014

2015
2010
2016

2007
2018
2014

2014
2014

10
9
11
n/a
3

2
2
2

n/a
1
1

n/a
2

21
14.7
2

3.6
7.5
0.5
2

n/a
n/a
7

0.5
n/a
2

n/a
2

2020
2020
2020
2020
2020

2020
2020
2020

n/a
2020
2020

2020
2020

2016
2017
2020

2019
20151
2020
2020

2020
2015
2020

2020
2020
2020

2015
2020

Nmap Publ. Src.
GNU GPLv2 2.0
Proprietary
Proprietary
GPLv2

GPLv2
MIT
Apache 2.0

n/a
n/a
Apache 2.0

GPL-2.0
Apache 2.0

GPL-3.0
special
Apache 2.0

LGPL-3.0
GPL-3.0
CC-BY 4.0
Apache 2.0

-
GPL-2.0
GPL-3.0

CC-BY 4.0
BSD 3-clause
Apache 2.0

GPL-3.0
Apache 2.0

Forum
Forum
Forum
Forum
Forum

Forum
GitHub
Forum

n/a
n/a
Forum

Forum
Forum

Forum
Forum
Forum

Forum
Forum
Forum
Forum

Forum
Forum
Forum

Forum
Forum
Forum

Forum
Forum

2015
2014

4.33
2

20181
2020

BSD 3-clause
Apache 2.0

Forum
Forum

2016
2018
2014

2014
2014

n/a
4
2

n/a
2

2019
2018
2020

2015
2020

MIT
MIT
Apache 2.0

GPL-3.0
Apache 2.0

Forum
Forum
Forum

Forum
Forum

no
no
yes
yes
no

no
no
no

no
no
no

no
yes

no
yes
yes

no
no
no
no

no
no
no

no
no
yes

no
yes

no
yes

no
no
yes

no
yes

GUI, CLI
GUI, CLI
GUI
WUI, CLI
CLI

Lua, C, C++, Python, Shell
C, NASL, Yacc, Shell, C++
Java
n/a
Python

GUI, CLI
WUI, CLI
GUI, CLI

C, M4, C#, Shell, Python, Roff
Go, JavaScript
C++

CLI
CLI
CLI

PHP
C, C++, Yacc, Perl, Shell
C#

CLI
GUI, CLI

C, Python, Ruby, Perl, PHP
C++

CLI
CLI
GUI, CLI

CLI
CLI
CLI
GUI, CLI

CLI
CLI
GUI, CLI

CLI
CLI
GUI, CLI

Python, C, Shell, C++
n/a
C++

Python
Python
C
C++

Python
Python
C++

C
C#
C++

CLI
GUI, CLI

PowerShell, Python
C++

CLI
GUI, CLI

PowerShell, Python
C++

CLI
GUI, CLI
GUI, CLI

Python
Python
C++

CLI
GUI, CLI

PowerShell, Python
C++

