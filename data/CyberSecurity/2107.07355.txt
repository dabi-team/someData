Using Cyber Digital 

Twins for Automated 

Automotive 

Cybersecurity 

Testing 

Marksteiner 

Slava Bronfman 

Stefan 
AVL  List  GmbH 
Graz, Austria 
stefan.marksteiner@avl.com 

Cybellum Ltd 
Tel Aviv, Israel 
slava@cybellum.com 

Markus Wolf 
AVL List  GmbH 
Graz, Austria 
markus.wolj@avl.com 

Eddie Lazebnik 

Cybellum Ltd 
Tel Aviv, Israel 
eddie@cybellum.com 

systems 

require 

bodies, 

driving 

assistance 

but also provide 

and validation 

and regulation 

technologies 

the effectiveness 

and communication 

testing 
necessity, 

abilities, 
Theses circumstances 

and vehicular 
the inte­
These functionalities 

of automotive 
with the wide adoption 
functions 

of on-the-fly 
config­
for 
a huge surface 
have also been recognized 

Abstract-Cybersecurity 
has become a practical 
of advanced 
communications. 
gration 
of information 
that not only allow for a plethora 
uration 
attacks. 
making the 
by standardization 
need for not only proper cybersecurity 
but 
engineering 
of security  measures 
also proving 
by 
also a for­
verification 
mal necessity. 
growing demand of neutral-party 
vehicular 
paper therefore 
execute 
setting 
and translation 
to formal 
as well as model-checking 
to generate 
is intended 
system with next-to-zero a 
Index Terms-automotive, 
twin, model-based 

of 
are needed. 
This 
and 
to create 
a methodology 
test cases on the fly in a black box 

The approach 
on a 
knowledge. 

cybersecurity 
by using pattem matching-based 

analysis 
descriptions 

In order to keep pace with the rapidly 

testing, 
cybersecurity, 

novel approaches 

techniques. 

mechanisms 

meaningful 

security 

presents 

systems, 

testing 

through 

vectors 

digital 

testing 

testing 

binary 

priori 

attack 

attack 

1.  Introduction 

The upcoming 

UNECE regulation 

R.155 [1] man­

of a cybersecurity 

dates not only the introduction 
security 
system (CSMS) and according 
management 
but also evidence 
systems, 
measures 
which is 
of their appropriateness 
and effectiveness, 
becomes 
The regulation 
to be furnished 
in Europe for new models in 2022 and for all 
effective 

for automotive 

by testing. 

structured 
(as well as the Japanese 

cybersecurity 

many sub-suppliers 
manufacturer 

While 
standard 

In order to industrialize 
testing, 

this paper outlines 

with non­

efficient 

solution 

solution 

testing. 

impos­
virtually 

it is evident 

this solution 

are therefore 

which involves 

test execution. 

in 2024, making it 

and the underlying 

comprehensive, 

will have an interest 

to industrialize 

dynamic black 
-Test (SUT) 

software 
to be capable 

equipment 
proprietary 

testing 
of a common automotive 

an automatic 
of a System-under

to the European 
market in the very near future. 

auto­
and scalable 
Due 
is needed. 
sup­
de­
(OEM) 

of black 
even more as also regulators 
and other 
in security 
con­
automo­
an ap­

new registrations 
sible to sell vehicles 
without 
engineering 
and Korean) 
the regulation 
security 
ISO/SAE 21434 [2] do not elaborately 
how 
specify 
to test vehicular 
that an au­
systems, 
tomated, 
motive cybersecurity 
to the characteristics 
ply chain, 
an original 
livering 
with heterogeneous, 
disclosed 
source, 
box testing, 
third parties 
formance 
tive cybersecurity 
proach that combines 
box security 
analysis 
with an automated 
for a technical 
testing 
cases in  a black box, automated 
automate 
This is valuable 
certification 
as for OEMs and TIERl-x 
claims of their suppliers 
them as black box components. 
Section 
outlines 
(1.1) and highlights 
this paper (1.2). Section 
known attacks 
other using an own domain specific 
and a test case generation 
execution 
describes 
tion engine to perform 
As this static 
approach 
Cybersecurity Testing -AACT)  requires 
information, 
Digital  Twin  (CDT)  for dyn amic model creation 
and 
that 
flow representation 
data and control 
serves 
proaches 
approaches 

instructions 
a system that uses this code in an execu­
tests on an SUT. 
the actual 
( called 

as a basis for security 
the latter 
for the synthesis 

for external 
bodies to test complete 

producing 
is described, 

(see Section 
of the dynamic 

and 
as well 
systems, 

system to an­
language 

to verify the 
that come to 

from one automotive 

test case execution 

the additional 

the capability 

on subsystems 

we also discuss 

of a Cyber 
the concept 

suppliers 

analysis, 

preceding 

Automated Automotive 

to perform 

as well as ap­

generation 

(DSL) 
JSON-based 
3 

while Section 

of this 
The remainder 
work 
as well as distinct 
contributions 
by 
to transfer 
2 a static approach 

as much as possible. 
testers, 

regulators 

4). Three 
analysis 

much a-priori 

The requirements 

cybersecurity 
to a) generate 
test 
manner and b) to 

has received 

of the Austrian 
Ministry 

Research 
for Transport, 
No. 867558 (project 

This research 
Future" 
Austrian 
grant agreement 
ECSEL Joint Undertaking 
(project 
Horizon 
Italy, 
den, Spain, 
Turkey. 
Netherlands, 
the Commission 
information 
NB: appendices, 
this paper has been deposited 

InSecTT).  The JU receives 
2020 research 
France, 

The document 
is not responsible 

support 
and innovation 

if any, did not benefit 

it contains. 

Portugal, 

on Ar Xiv. 

funding from the program 
Promotion 
Innovation 

"ICT of the 
Agency (FFG) and the 
under 
and Technology 
the  the 

TRUSTED)  and within 
(JU) under grant agreement 

No. 876038 

Union's 

from the European 
Swe­

programme 

and Austria, 
Slovenia, 
view only and 
for any use that may be made of the 

Finland, 
the author's 

Ireland, 
reflects 

Poland, 

of 
from peer review.A 
preprint 

© 2021 IEEE. Personal 
uses, in any current 
promotional 
any copyrighted 

use of this material 
media, 

or future 

including 
new collective 
works, 
of this work in other works. 

component 

purposes,creating 

for resale 

to servers 
or redistribution 

or 
reprinting/republishing 

this material 

for advertising 
or reuse of 
or lists, 

is permitted. Permission 

from IEEE must be obtained 

for all other 

and  the  automated  testing  are  outlined  in  Section  5, 
while  Section  6  concludes  the  paper. 

latter  (described  in  2)  also  orients  on  an  automotive 
cybersecurity  testing  architecture  outlined  in  [12]. 

1.1. Related  Work 

1.2. Research 

Contribution 

There  are  several  known  works  concerning  the 
usage of digital twins for  cybersecurity  analysis.  The 
work  in  [3]  applies  the  digital  twins  concept  to  the 
cybersecurity  analysis  of  smart  grids  by  manually 
modeling  the  grid  infrastructure  and  test  attack  vec­
tors  from  a  threat  intelligence  system  on  the  digital 
twin  improve  the  grid  architecture's  cybersecurity. 
Another  paper  [4]  provides  a  method  to  model  a 
system  specification  and  respective  tests  for  indus­
trial  control  systems  under  strict  budget  constraints. 
Gehrmann  &  Gunnarsson  [5]  describe  a  method 
that  allows  for  protecting  industrial  control  systems 
while  being  accessible  for  data  sharing  by  creating 
a  digital  twin,  using  direct  state  replication  through 
active  state  monitoring,  that  can  be  monitored  and 
acts  as  a  shield  for  the  physical  twin.  Due  to  some 
drawbacks  of  active  monitoring,  two  related  works 
[6],  [7]  present  a  passive  state  replication  approach 
utilizing  the  specification  of  the  respective  cyber­
physical  system  (CPS)  to  clone.  All  of  the  last  three 
works allow for real-time monitoring systems, which 
is,  however,  not  a  required  property  of  a  digital 
twin  that  serves  for  security  analysis  with  the  goal 
of  creating  test  cases.  Furthermore,  all  of  the  work 
described so far does not have a focus on automotive 
systems. The authors of  [8] present an approach sim­
ilar to Gehrmann & Gunnarsson's for the usage in an 
autonomous driving use case by using sensor data as 
source  of  data  for  the  digital  twin.  Veledar  et  al.  [9] 
describe a method to model a digital twin in an auto­
motive  use  case,  defining  its  assets  and  metrics  and 
facilitate  risk  management  and  machine  leaming­
based  security-related  forecasting.  However,  all  of 
the  works  described  so  far  are  suitable  for  perform­
ing  verification  and  validation  activities  in  a  white­
box  setting  only,  as  they  need  very  detailed  infor­
mation  on  the  physical  system  for  the  synthesiz­
ing  the  digital  twin.  Aichemig  et  al.  [10]  provide  a 
methodology to black box leam a finite state machine 
via  abstract  automata  learning  and  derive  test  cases 
by  executing  the  model  symbolically.  This  method, 
however, is meant  and  only feasible  for  testing  SUTs 
that  contain  white  and  black  box  components,  as 
the  white  box  components  imposes  restrictions  that 
allow for the  symbolic  execution  to produce  sensible 
test cases. lt is therefore not suitable for purely black 
box  systems. 

As  the  requirements  for  industrialized  automo­
tive  cybersecurity  testing  (as  outlined  in  Section  1) 
are  not  met  by  any  of  these  approaches  (combining 
automation  of  black  box  test  case  generation  and 
execution),  this  paper  describes it own  methodology 
that  bases  on  black  box  generating  a  digital  twin 
using  pattem  matching  techniques  as  outlined  in 
[11]  (see  also  Section  4)  and  using  the  a  security 
analysis  for  generating  and  executing  test  cases  (see 
Section  5).  The  groundwork  static  process  for  the 

The presented work contributes and approach for 
fully  automated  black  box  security  testing  virtually 
no  a  priori  knowledge  using  three  strategies.  Based 
on  existing  work  for  deriving  a  cyber  digital  twin 
and  performing  security  analysis  based  on  pattem 
matching  [11],  we  discuss  to 

a)  Transform  an  existing  data  flow  representation 
in a finite state model and evaluate faults on that 
model  to  derive  test  cases; 

b)  Find 

interesting  edge  cases  by  performing 

model  checking  on  that  model; 

c)  Transform the analysis results into generic attack 
descriptions  that  be  used  to  generate  test  cases. 

The  test  case  generation  and  execution 

2.  Static  Approach  to  Automating  Auto­
motive  Cybersecurity  Testing 

One  of  the  key  issues  in  security  test  industri­
alization  is  portability,  i.e.  to  be  able  to  transfer  a 
cybersecurity  attack  (or  test  case)  from  one  system 
to  another.  The  reason  is: 

a)  To  expand  the  usage  of  one  engineered  attack 
vector  beyond  a  single  system  (scalability); 
b)  To allow for benchmarking different SUTs (com­

parability); 

c)  To  improve  pattems  for  single  steps  of  a  tests 
and  easily  re-use  that  improvement  (efficiency); 
d)  To put  the  test  cases  in  a  defined  workflow  that 
needs  only  minimal  user  interaction  (automa­
tion). 

In  order  to  fulfill  these  targets,  our  methodology 
is  to  abstract  a  concrete  test  case  and  turn  it  into 
a  generic  test  scenario  by  stripping  it  of  all  SUT­
specific  information.  Single  executable  steps  of  a 
test  case  (test  scripts)  become  generic  test  pattems 
[13].  At  the  test  case  generation,  the  abstract  test 
scenario  is  concretized  using  information  from  an 
SUT  database  (see  Figure  1),  generating  a  test  case 
out  of  a  scenario. 

For  modeling  and  storing  these  generic  attacks, 
we  developed  a  domain-specific  language  (DSL), 
called  Agnostic  Language  for  Implementing  Attacks 
(ALIA)  [14].  For  (a  simplified)  example,  an  attack 
that  captures  an  infotainment  head  unit  and  issues 
a  fake  speed  signal  onto  a  connected  CAN  bus 
would  not  contain  any  specifics  of  the  SUT,  rather 
a  CAN  message  for  the  speed  signal  would  generi­
cally  called  CAN_SPD,  while  a  test  case  generation 
fuses  the  script  with  information  about  the  SUT 
(in  this  exemplary  case,  the  concrete  CAN  message, 
e.g.  5Al#ll.2233.44556677.881).  Usting  1  shows  an 

1.  This is just an example. In this case, SAl is the object identifier 
that determines the  message  content (e.g. 'brake', 'RPM', 'steering 
torque'), while  the rest is the  message  content. Which 1D  belongs 
to which function, as well as the meaning of set bits is proprietory 
and  defined  solely  by  the  manufacturer. 

dongle)  is  necessary,  as  a  those  allow  for  changing 
the  MAC  address  arbitrarily.  By  providing  various 
resources  via  a  restful  API,  the  application  takes 
HTTPS  POST  requests  that  contain  JSON  objects  as 
input  via  and processes  them  according to  the  spec­
ified  URL  path.  The  JSON  data  interchange  format 
is  a  subset  of  JavaScript  and  allows  transfer  data  as 
name/value  pairs  between  applications in  an  easily 
readable  and  writable  manner  [15].  Input  requests 
for  the  application  contain  an  array  of  executable 
commands,  which  each  consist  of  the  tool  to  use, 
its  parameters,  the environment and a time  duration 
that  specifies  how  lang  the  output  collection  phase 
takes.  The  parameter  list  for  each  command  may 
include  placeholders  that  are  either  determined  by 
the  application  at  runtime  or  are  loaded  from  the 
global  configuration  of  the  application  before  exe­
cution.  The  Test  Case  Generator  (TCG)  uses  scripts 
that are  defined  in the attack  DSL  as a blueprint and 
outputs  corresponding  JSON  objects  that  can  be  di­
rectly used for execution and consist of the respective 
Precondition  and  Action  block,  whereas  the  post­
condition  block  is  forwarded  to  a  test  oracle.  Each 
step  in  the  Action  block  is  executed  subsequently. 
Before  execution,  the  application  checks  if  all  cor­
responding  preconditions  are  matched.  Depending 
on  the  necessary  execution  environment,  commands 
can  be  executed  in  different  shells  than  the  initial 
bash  shell  as  well,  for  example  if  an  exploit  returns 
a  reverse  shell,  it  is  stored  onto  an  object  and  new 
commands  can  be  piped  into  that  shell  as  an  input. 
After  the  execution,  the  output  of  each  command 
is  collected  and  stored  into  the  HTTPS  response  of 
the application. Verification of Postconditions is clone 
by  the  Test  Oracle,  which  is  implemented  as  a  rule­
based engine that runs on an existing automotive test 
control  solution.  The  Oracle  receives  the  condition 
block  from  the  TCG  and  monitors  the  SUT  and  the 
tool  output  received  from  the  AXE  accordingly.  If 
a  condition  is  met,  it  reports  this  back  to  the  Or­
chestration  Software.  Through  the  rules,  it  asserts 
whether  the  SUT  has  failed  or  passed  a  specific  test 
of  the  complete  test  case  and  reports  this  result  to 
the  orchestration  software  and  GUI. 

4. Dynamic  Digital 

Twin Generation 

A  Digital Twin  (DT)  produces  a  virtual  model  of 
a  physical  object  as  a  digital  representation  with  the 
purpose of simulating them before construction to fa­
cilitate  predictive  maintenance  [16].  A  Cyber  Digital 
Twin  (CDT)  transfers  this  idea  of the  DT  to  automo­
tive  software  [11].  As  such,  a  CDT  digitally  repre­
sents  the  firmware  of  a  vehicular  component,  e.g.  of 
an electronic control unit  (ECU)  or  a  head  unit of an 
infotainment  system  and  can  be  used  for  thorough 
security  analysis.  In  general,  most  software  utilizes 
widespread  software  packages  to  build  on.  This  is 
particularly  true  for  the  automotive  industry,  where 
original  equipment manufacturers  (OEMs) assemble 
parts  of  suppliers  (TIER  1),  which  in  turn  use  parts 
of  sub  suppliers  and  so  on  (TIER  2-X).  This  applies 
also for the software in ECUs and other integral parts 

BT-Scanning: 
BT-Exploiting: 
Install Script: attackScript 

target = scan(type:BlueBorne, 

shell = exploit (type: Blueborne, 

interface BT_IF) 
target: target) 

= exploit (type: InstallAndroidCANDosScript 

Figure  1.  Test  Abstraction  as  in  [13] 

example  DSL  attack  script,  where  the  Actions  part 
contains  the  actual  attack  (while  the  PreConditions 
define  when  to  omit  a  step  ant  the  Postconditions 
contain information for the test evaluation):  First can 
for  a  potential  victim  to  a  BlueBorne  attack  (line  5), 
then  exploit  a  found  target  to  get  access  (line  6), 
install  a  malicious  script  (line  7  - in  this  case  a  DoS 
on  the  CAN  bus)  and  execute  the  attack  (line  8)  by 
using the script from the line above. The outcome is a 
semi-executable  JSON  script  that  will  be  interpreted 
and  executed  by  a  dedicated  execution  engine  (see 
next  Section). 

Listing  1.  DSL  Attack Script  Example  from  [14] 

1 PreConditions

: 

BT-Scanning: 
BT-Exploiting: 

BT_IF 

target 

Actions: 

, target:target) 

can_attack

: exploit (type: ScriptExecution, 

target: target, shell: shell, 

file: attackScript) 

9 PostConditions

: 

shell 
BT-Exploiting: 

11  can_attack

: CAN_MESSAGE 

(CAN_SPD) 

3. Test Execution 

The  AACT  Test  Execution  is  runs  on  the  At­
tack Execution Engine (AXE), a platform independent 
python  application,  which  is  based  on  the  Flask 
framework,  a  lightweight  Web  Server  Gateway  In­
terface  (W SGI)  framework  that  is  designed  to  en­
able  an  easy  start  for  web  applications  but  also  to 
allow  easy  upscaling  for  complex  applications.  The 
core  functionality  of  flask  is  a  wrapper  around  the 
Werkzeug  framework  and  the  Jinja  template  engine 
.  For  our  scenario,  the  AXE  runs  on  Kali  Linux,  a 
Debian-based  Linux  distribution  which  is  optimized 
for  Security  Auditing  and  Penetration  testing.  lt  in­
cludes over six hundred tools for penetration testing, 
security  research,  computer  forensics  and  reverse 
engineering,  which  means  that  most  of  the  software 
utilities  needed  to  execute  the  security  cases  is  al­
ready  installed  out-of-the-box.  The  hardware  could 
be an ordinary PC or even a Raspberry Pi that posses 
a  direct  CAN  connection  for  testing  (e.g.  a  PiCAN2 
board  for  the  Raspberry).  For  Bluetooth  connection, 
a  Cambridge  Silicon  Radio  (CSR)  USB  device  (i.e. 

Known Vulnerabilities

- CVEs
- Context-based Filtering

Firmware

Transition

Cyber Digital Twin

Analysis

Unknown Weaknesses

- Binary file
- In on of 60+ formats

-  Different languages
-  Different Architectures
-  Different OSs

- HW BoM
- Network Interfaces
- SBoM
- Operating System
- Operating System settings
- Kernel configuration
- OS-level security 
 configurations

- Memory mgmt. and 

 mapping

- User Credentials
- Firewall configuration
- Application frameworks
- Available, accessible and

 in-use APIs

- Encryption mechanisms

 and flows

- Control and data flow 
 graph representation

- CWEs: Buffer overflow,
stack overflow, 
double free, etc.

Regulation Incompliances

- Standards: ISO 21434
- Regulation: WP 29
- Best practices: ENISA

Figure 

2. Digital 

Twin Derivation 

SUT (and the interaction  between  them): 

•Software 

& Hardware 

bill of materials 

(S&H

BoM);

attack 

system. 

into a corre­

an SUT's (e.g. 

analysis. 

rendering 

transformed 

that can be converted 

(see next  section) 

them into ALIA statements 

test cases 
or induced 

CDT to be used for cybersecurity 

which can be used for 
to generate 

is necessary. 
that extracts 

essentially 
the part in question 
analysis, 
a 
security 
an 
key attributes 

Mostly in these settings 
firmware is not 

into 
code. To do so, the firmware of 

of the automotive 
above and the fact that the automo­

of an automotive 
the source code of the respective 
available, 
a black box. For comprehensive 
system that is capable 
of extracting 
ECU's) behavior-defining 
This is given by the CDT approach, 
automatically, 
these attributes 
the analysis 
and, subsequently, 
by converting 
faults 
executable 
the SUT is automatically 
sponding 
Due to the circumstances 
chain described 
tive domain predominantly 
closed-source 
the firmware 
the CDT 
in binary 
available 
to source 
approach 
access 
to be operational 
The 
of the firmware. 
code or deeper inside-details 
a software 
CDT creation 
bill of 
and com­
materials 
all libraries 
of the SUT by using pattem recognition 
ponents 
al­
gorithms 
of the SUT 
software 
that compare 
with known applications 
gine automatically 
discovers 
(e.g., 
(e.g., 
ware libraries 
To create 
information. 
analysis 
security 
engine 
also extracts 
the CDT encompasses 

a model that is suitable 
based on dyn amic executions, 

form, which mandates 
without 

The CDT en­
all available 

pattems 
and modules. 

(BOM) that contains 

engine generates 

and data flow. Mainly 

interfaces 

products, 

the control 

only 
is usually 

for 
the 

OpenSSL 

supply 

works with proprietary, 

CAN Bus, GPS or Bluetooth),  employed 
or SQLite) 

soft­
and further 

the following attributes 

of the 

•Network 
•Operating 

interfaces;
system and the Operating 

system set-

security 

configuration;

tings;
•Kernel 
•OS-level 
•Memory management 
•User credentials;
•Firewall 
•Application 

configuration;
frameworks 

configuration;

and mapping;

in use and their config-

and in-use 

APis;
configuration;
mechanisms 
keys;

uration;
•Available 
•Application 
•Encryption 
•Encryption 
•Control 
and data flow representation.
Using the very same pattem  recognition 
for 
derived 
and Exposures 

the CDT is the analyzed 
a)Known vulnerabilities 

Vulnerabilities 

(CVE) databases;

from Common

and flows;

tech­

niques, 

b)Unknown weaknesses 
mon Weakness enumeration 

as classified 

(CWE) scheme;

by the Com­

c)Policies 

rules.
and compliance 
on the CDT generation 

2 gives an overview 

Figure 
and analysis. 

5.Digital 

Twin-based 

Security 

Testing

In order to transition 

the model of the Cyber 

Digital 

Twin into test cases (that can eventually 

be 

Binary Analysis

SUT

Test Case Execution

Binary Code Injection

Fault Injection
(Coverage-based)

Faulty
StateFau
lty
Mutiple Faulty
State Machines

Ma

Fault
Propagation
Analysis

Fault Vector
Descriptions

Concretization

Edge Case 
Input for Fuzzing

Transformation

State Machine

Test Case  Generation

Model Checking

Model
Checking
Results

Concretization

Edge Case 
Input for Fuzzing

Test Case 
Generation

Test Cases

Cyber Digital Twin

Automated Anaysis

Security
Analysis
Results

Transformation

Attack Vectors
DSL Description

Concretization

Attack Script 
Sequence

Test Case Generation

Figure 3. Test Case Generation 

Strategies 

executed on the AXE) we follow two different 
ciple approaches: 

prin­

rithms [17] and potential 
of the latter using  distance 

heuristics 

[18]. 

paths to outside interfaces 

•Transforming 

the CDT security 

analysis 

results

into attack vectors;

•Transforming 

the CDT model into a state ma­
and

chine and using this as input fault injection 
model checking.

to it and b) using building  block 

results 

analysis 

in the CDT security 

that would, for instance, 

the analysis 
This occurs by a) referring 
identified 

The former approach mandates a mechanical 
algo­
into a DSL 
rithm that transforms 
to the vul­
description. 
nerabilities 
and mapping proper attack vectors (and later in the 
toolchain  exploits) 
attack vectors and exploits 
try to issue a payload into an identified 
flow attack. 
This resembles 
ever, with a dynamically 
Still, 
there are building 
essary to be in place a priori. 
uses methods traditionally 
test case generation 
spectively. 
ods, we transform 
chine. This state machine allows for two operations: 

The second approach 
to automated 
and to formal verification, 

the static workflow, how­
starting 
generated 
code nec­
blocks and exploit 

To fully utilize already 

the CDT model into a state ma­

established 

re­
meth­

attributed 

buffer over­

point. 

•Inject faults into the model using mutation­

based algorithms;

•Examine security-relevant 

parts of the machine

through model checking.

The first operation 
testing methodology. 
injection 

uses state-of-the-art 

model-based 

This includes 

input and fault 

to the model using  mutation-based 

algo-

firstly  extracting 

includes 

the respective 

by the 
These 

parts, which are identified 
(BOM) provided by the  CDT. 
parts of the model are then checked by a 

The second operation 
security-relevant 
bill of materials 
relevant 
model checker [19]. At those points where the model 
input is taken to form 
checking fails, 
tests [20], [21]. Figure 
input for directed  fuzzing 
with blue boxes being 
3 depicts these approaches 
purple being 
models, cyan being checking  results, 
concrete 
The result of the binary (pattern 
therefore 
state machine for model-based 
for an agnostic 

analysis 
serves either as a basis for syn thesizing 
a 

test case parts and orange being the SUT. 

attack description  using 

or as a basis 

matching) 

testing 

a DSL. 

usion
6. Concl 

an industrial­
is heavily 

of vehicular 

cybersecurity 

and standards, 

testing 
an approach to pro­

and effi­
comprehensive 
The 
systems. 

testing 
how test automation 

Due to regulations 
ization 
of automotive 
needed. This paper outlined 
vide a tool for automated, 
cient cybersecurity 
approach displays 
by transferring 
through generalization 
derive a Cyber Digital Twin model of an SUT that 
can be analyzed for cybersecurity 
model and result of this dyn amic, black box model 
building 
into 
can then be transformed 
test cases for the automated testing system using 

is possible 
attacks from one system to another 

using a DSL, but also how to 

properties. 

and analysis 

The 

fault injection, model checking as well as transforma­
tion into the DSL and appropriate attack script selec­
tion in the test case generation, as well as automated 
execution.  This  way,  the  complete  system  is  capable 
of  automatically  analyzing  the  cybersecurity  of  an 
automotive  component  and  subsequently  generat­
ing  and  executing  tests  to  verify  its  security,  which 
makes  this  approach  most  suitable  for  external  test­
ing  facilities  to  test  vehicular  systems  with  minimal 
or no a priori knowledge about the SUT. Future work 
includes,  apart  from  implementation  tasks,  mainly 
methodologies  for  advanced  case  generation  out  of 
the derived attack descriptions, as well as methods to 
automating  code  transfer  between  SUTs  (e.g. address 
estimation  for  exploits). 

References 

[1]  United  Nations  Economic  and  Social  Council  - Economic 
Commission for Europe, "Cyber security and cyber security 
management  system,"  United  Nations  Economic  and  So­
cial Council - Economic Commission for Europe, Regulation 
"155", 2020. 

[2] 

International Organization for Standardization and Society of 
Automotive Engineers, "Road Vehicles - Cybersecurity Engi­
neering," International Standard, International Organization 
for Standardization, ISO/SAE Standard "FDIS 21434", 2021. 

[3]  M. Atalay and P. Angin, "A digital twins approach to smart 

grid security testing and standardization," in 2020 IEEE In­
ternational 
pp. 435-440. 

an Metrology 

for Industry 

Workshap 

4.0 IoT, 2020, 

[4]  R. Bitton, T. Gluck, 0. Stan, M. Inokuchi, Y. Ohta, Y. Yamada, 
T. Yagyu, Y. Elovici, and A. Shabtai, "Deriving a cost-effective 
digital  twin  of  an  ics  to  facilitate  security  evaluation,"  in 
Computer 
J.  Lopez, J.  Zhou,  and  M.  Soriano, Eds. 
Cham: Springer International Publishing, 2018, pp. 533-554. 

Security, 

[5]  C.  Gehrmann  and  M.  Gunnarsson,  "A  digital  twin  based 
industrial  automation and  control  system  security  architec­
vol. 16, no. 1, 
ture," IEEE Transactions 
pp. 669-680, 2020. 

an Industrial 

Informatics, 

[12]  S. Marksteiner and Z.  Ma,  "Approaching the automation of 

cyber security testing of connected vehicles," in Proceedings 
the Central 
Conference 
Cybersecurity 
2019.  New York, NY, USA: ACM, 2019. 

European 

2019, ser. CECC 

of 

[13]  S.  Marksteiner,  N.  Marko,  A.  Smulders,  S.  Karagiannis, 
F.  Stahl,  H.  Hamazaryan,  R. Schlick,  S.  Kraxberger,  and 
A.  Vasenev,  "A  process  to  facilitate  automated  automotive 
cybersecurity  testing,"  in  2021 IEEE 93rd Vehicular 
ogy Conference (VTC Spring). 
New  York,  NY,  USA:  IEEE, 
2021, paper presented, published pending, preprint on arXiv: 
https:/ / arxiv.org/ abs/2101.10048. 

Technol­

[14]  C.  Wolschke,  S.  Marksteiner,  T.  Braun,  and  M.  Wolf,  "An 
agnostic  domain specific language forimplementing attacks 
in  an  automotive  use case," in  Proceedings 
national 
ARES  '21.  New York, NY,  USA:  ACM, 2021. 

an Availability, 

Conference 

Reliability 

of the 16th Inter­
ser. 
and Security, 

[15]  B. Bray, "The JavaScript Object Notation  (JSON) Data Inter­
change  Format,"  Internet  Requests  for  Comments,  Internet 
Engineering Task Force, RFC 7159, 2014. 
[16]  S. Boschert and R. Rosen, Digital 

Twin-The Simulation Aspect. 

Cham: Springer International Publishing, 2016, pp. 59-74. 

[17]  Y. Jia  and  M.  Harman,  "An analysis and  survey of  the de­

velopment of mutation testing," IEEE Transactions 
Engineering, 

vol. 37, no. 5, pp. 649--678, 2011. 
[18]  B.  K.  Aichernig,  H.  Brandl,  E. Jöbstl, W.  Krenn,  R. Schlick, 
and  S.  Tiran,  "Killing  strategies  for  model-based  mutation 
vol.  25, 
and Reliability, 
testing,"  Software 
no. 8, pp. 716-748, 2015. 

Verification 

an Software 

Testing, 

[19]  R. Ameur-Boulifa, F.  Lugou, and L. Apvrille, "Sysml model 

transformation for  safety and  security analysis," in Security 
and Safety Interplay 
B. Hamid, 
B.  Gallina, A.  Shabtai, Y.  Elovici, and J.  Garcia-Alfaro,  Eds. 
Cham: Springer International Publishing, 2019, pp. 35-49. 

Software 
of Intelligent 

Systems, 

[20]  L.  Daniel,  E. Poll,  and  J.  de  Ruiter,  "Inferring  openvpn 

state  machines  using  protocol  state  fuzzing,"  in  2018 IEEE 
European 
an Security 
PW), 2018, pp. 11-19. 

Symposium 

and Privacy 

Workshaps (Euros 

[21]  R. Zhang, C. Deutschbein, P. Huang, and C. Sturton, "End-to­
end automated exploit generation for validating the security 
of processor designs," in 2018 51st Annual IEEE/ACM 
national 
815-827. 

an Microarchitecture 

Symposium 

2018,  pp. 
(MICRO), 

Inter­

[6]  M.  Eckhart  and  A.  Ekelhart,  "A  specification-based  state 

replication  approach  for  digital  twins," in Proceedings 
2018 Workshop 
Security and 
ser.  CPS-SPC  '18.  New  York,  NY,  USA:  Association  for 
Computing  Machinery, 2018, pp. 36--47. 

an Cyber-Physical 

Systems 

PrivaCy, 

of the 

[7]  --, "Towards security-aware virtual environments for dig­

ital twins," in Proceedings 
Physical 
Security, 
Association for  Computing Machinery, 2018, pp. 61-72. 

of the 4th ACM Workshop 
ser. CPSS '18.  New York, NY, USA: 

System 

an Cyber­

[8]  S.  Almeaibed, S.  Al-Rubaye, A.  Tsourdos, and  N.  P.  Avde­
lidis, "Digital twin analysis to promote safety and security in 
autonomous vehicles," IEEE Communications 
azine, 

vol. 5, no. 1, pp.  40-46,  2021. 

Standards 

Mag­

[9]  0. Veledar, V. Damjanovic-Behrendt, and G. Macher, "Digital 
twins for  dependability improvement  of autonomous  driv­
ing,"  in  Systems, 
Process 
A. Walker, R. V.  O'Connor, and R. Messnarz,  Eds.  Cham: 
Springer International Publishing, 2019, pp. 415-426. 

and Services 

Software 

Improvement, 

[10]  B.  K.  Aichernig,  R. Bloem,  M.  Ebrahimi,  M.  Tappler,  and 
J.  Winter,  "Automata leaming  for  symbolic  execution,"  in 
2018 Formal Methods 
2018, pp. 1-9. 

in Computer 

Aided Design (FMCAD), 

[11]  A.  C.  Franco da  Silva, S. Wagner,  E.  Lazebnik, and  E.  Trai­
tel,  "Using  a  cyber  digital  twin  for  continuous  auto­
motive  security  requirements  verification,"  arXiv preprint 
arXiv:2102.00790, 
ware. 

2021,  article  under  review  for  IEEE  Soft­

