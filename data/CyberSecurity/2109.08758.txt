Denial-of-Service Attack Detection via Differential
Analysis of Generalized Entropy Progressions

Omer Subasi, Joseph Manzano, Kevin Barker
Paciﬁc Northwest National Laboratory (PNNL), Richland, WA, USA

1
2
0
2

p
e
S
7
1

]

R
C
.
s
c
[

1
v
8
5
7
8
0
.
9
0
1
2
:
v
i
X
r
a

Abstract—Denial-of-Service (DoS) attacks are one the most
common and consequential cyber attacks in computer networks.
While existing research offers a plethora of detection methods,
the issue of achieving both scalability and high detection accu-
racy remains open. In this work, we address this problem by
developing a differential method based on generalized entropy
progression. In this method, we continuously ﬁt the line of best
ﬁt to the entropy progression and check if the derivative, that is,
the slope of this line is less than the negative of the dynamically
computed standard deviation of the derivatives. As a result,
we omit the usage of the thresholds and the results with ﬁve
real-world network trafﬁc datasets conﬁrm that our method
outperforms threshold-based DoS attack detection by two orders
of magnitude on average. Our method achieves false positive
rates that are up to 7% where the arithmetic mean is 3% with
Tsallis entropy and only 5% sampling of the total network ﬂow.
Moreover, since the main computation cost of our method is the
entropy computation, which is linear in the volume of the unit-
time network ﬂow and it uses integer only operations and a small
fraction of the total ﬂow, it is therefore lightweight and scalable.

Index Terms—Distributed Denial-of-Service Attacks, DoS De-
tection, Entropy, Generalized Entropy, Differential, Derivative.

I. INTRODUCTION

As the ﬁfth generation mobile and wireless networks (5G)
are on their way to become mainstream, the cyber-security of
these networks becomes a ﬁrst-class consideration [1]. Among
many types of cyber attacks, Denial-of-Service (DoS) attacks
[2] are the most common and one of the most consequential
types. The capabilities 5G networks offer only make these
attacks more difﬁcult to defend against. This stems from the
immense network bandwidth and density that 5G networks
will provide and support. Therefore, in this work, we study
the detection of DoS attacks which is the ﬁrst line of defense
against them.

There exists an abundance of research on the detection of
DoS attacks [2] and [3]. There are many different approaches
ranging from statistical approaches [4] [5] to machine and deep
learning [6], [7] to information-theoretical ones [8] [9] [10].
Each type of these approaches has its own drawbacks. While
machine and deep learning based methods perform relatively
well in general, they are very expensive to train and require
lots of data. Often there is a lack of sufﬁcient amount of data
to train them. This in effect hinders their scalability. Contrary
to these methods, statistical and information-theoretical are
relatively computationally cheap and scalable, however they
require the explicit optimization of hyper-parameters such

as window size and thresholds. In addition, usually their
performance in terms of accuracy is lesser than that of learning
based methods.

In this work, we propose an entropy based information-
theoretical method that outperforms threshold-based methods
by two orders of magnitude on average. Moreover, contrary
to learning based methods, our method is lightweight and
scalable by having a linear time and memory complexity. Our
method performs differential analysis of entropy progression.
Our method is built upon the postulation that when a DoS
attack happens, the entropy of destination addresses decreases.
This postulate is justiﬁed since DoS attacks by construction
target speciﬁc destination addresses thereby decreasing the
entropy of such addresses. This justiﬁcation is nearly always
observed in real-world scenarios. As we analyze the drawback
of existing information-theoretical approaches, we develop a
method having the following key features: i) to detect an
attack, that is, to detect a decrease in entropy, we compute
the derivative of the entropy progression which is deﬁned as a
time series of recent entropies. ii) to compute the progression’s
derivative, we apply a linear regression model to the progres-
sion. iii) to signal an attack, we require the derivative to be
outstandingly negative. A derivative is said to be outstandingly
negative when it is less than the dynamical standard deviation
of the derivatives. iv) By using the standard deviation, we
remove all
thresholds. The experimental results with real-
world network trafﬁc data conﬁrm that omission of thresholds
is the key contributor for the success of the method. v) We use
generalized entropy measures [11] [12] rather than traditional
Shannon entropy [13]. This is to amplify the magnitude of
entropies, which in turn leads to better detection accuracy. vi)
We remove the hyper-parameter of window size by using a unit
time window. The unit time can be set anything that the system
administers prefer: 30 seconds, 1 minute, 10 minute etc. This
is another signiﬁcant hyper-parameter omission. While other
methods need to optimize window size, our method does not. It
checks attacks by the unit time. vii) Since the method depends
solely on local data, it can be deployed in a variety of devices
(including 5G IoT devices) which makes it which makes it
embarrassingly parallel. This is achieved by the fact that it
makes use of integer only operations and a small fraction of the
total network ﬂow. Results conﬁrm its success with sampling
and integer only operations. viii) Finally, we use Welford’s
method [14] to dynamically compute the standard deviation
of the derivatives.

In summary, the main contributions of our study are:

 
 
 
 
 
 
• We develop an entropy based DoS attack detection algo-
rithm utilizing differential analysis. We remove the usage
of the window size and threshold hyper-parameters.
• Our method employs generalized entropies measures
which are shown to be superior to Shannon entropy in
terms of detection performance by the results.

• Results show that, on average, our method outperforms
threshold-based methods by two orders of magnitude
with with ﬁve real-world network trafﬁc datasets. It also
achieves false positive rates that are up to 7% where the
arithmetic mean is 3% with only 5% sampling of the total
ﬂow.

• Our method uses only local data and as a result it can be
deployed in the 5G edge nodes and Internet routers. In
effect, this placement makes it embarrassingly parallel.
Our paper is organized as follows: Section II provides
background on the concept of entropy and its generalized
measures. Section III presents our novel DoS attack detection
algorithm. Section IV discusses the experimental results. Sec-
tion V overviews the related work. Finally, Section VI presents
concluding remarks.

II. BACKGROUND

The notion of entropy appears in many areas such as
thermodynamics, information theory and statistical mechanics.
It generally refers to a measure of disorder, randomness
and uncertainty. In information theory, the most well-known
entropy is Shannon entropy [13]:
n
(cid:88)

H(X) = −

pi log(pi)

(1)

i
where X is a discrete random variable which has possible
outcomes xi with probability pi.

Complex dynamical systems having multifractality, systems
with long range forces and entanglement in quantum systems
require generalized entropy measures with weaker assumptions
such as nonadditivity [15]. Multifractal systems are those
whose dynamics can be described by its subsystems such
as turbulence, human brain activity, and geophysics. Renyi
entropy is one of the most well-known generalized entropy
measures [12]. The Renyi entropy of order α, α ≥ 0 and
α (cid:54)= 1 is deﬁned as

Hα(X) =

1
1 − α

(cid:32) n
(cid:88)

(cid:33)
.

pα
i

log

i=1

(2)

We note that as α → 1, Renyi entropy reduces to Shannon
entropy.

Another important generalized entropy is Tsallis entropy
[11], which we use as the entropy measure in the proposed
method. The Tsallis entropy is deﬁned as

Sq(X) =

1
1 − q

(cid:32)

1 −

(cid:33)

n
(cid:88)

pq
i

i

(3)

where q, q (cid:54)= 1, is a real parameter. Similar to Renyi entropy,
as q → 1, Tsallis entropy converges to Shannon entropy.

In this work, we leverage the parameter q as a tool to
magnify and highlight the entropies of network addresses.
Speciﬁcally, it can be used to highlight the entropy of:

• network addresses with no or low activity for q < 1,
• a large portion of network addresses for q in the vicinity

of 1, and

• network addresses with high activity for q > 1.

The last bullet explains why we use Tsallis parameter values
that are 5 and 8 - well bigger than 1, that is, to prevent false
positives.

III. DOS ATTACK DETECTION METHOD

In this section, we discuss the design of our algorithm. Then
we detail the implementation based on sampling and solely
integer operations. Finally, we study the computational and
memory complexity of our method.

A. Design of the Algorithm

The DoS attack detection algorithm is based on calculating
the derivative of the progression of recent entropies. The en-
tropy progression is the time series of the entropies computed
based on destination IPs. The progression is a small number
of past entropies, such as the last ﬁve entropies. Figure 1
shows an example entropy progression which is synthetically
generated with Tsallis entropy.

To detect a decrease in entropy, we check if the derivative of
the entropy progression is negative. To calculate the derivative,
we use the simplest model: line of best ﬁt. We ﬁnd the line of
best ﬁt for the entropy progression. The slope of this line is
the derivative of the progression. If the derivative is negative,
then the entropy is decreasing. Figure 1 shows an example
of positive and negative derivatives of two best-ﬁt lines with
synthetically generated data. Here, the x-axis represents the
input and the y-axis represents the output.

We not only look for a negative derivative but also an
outstandingly negative derivative. For this purpose, we com-
pute dynamically the standard deviation of the derivatives to
increase the precision of attack detection. An attack is signaled
when the derivative of the progression is less than the negative
of the standard deviation. Figure 2 shows an example attack
detection with the line derivatives and their standard deviation
are plotted.

In our design, in addition to Shannon entropy [13], we
employ and experiment with two generalized entropies: Renyi
[12] and Tsallis [11] entropy. We use generalized entropies to
amplify the magnitude of the computed entropy. This improves
the precision and accuracy of attack detection. In Section IV,
we include results that demonstrate this effect.

By using the unit time as a constant window size, we ﬁxed
this hyper-parameter and remove it from the search space. The
unit time is set 1 minute in this study. Moreover, our method
does not use any thresholds to signal an attack. This is because
of the inherent limitations of threshold-based attack detection
methods. They often produce sub-optimal results (as seen in
section IV) which our method alleviates.

Fig. 1. On the left, an entropy progression of size 5 is shown. On the right, an example of positive and negative derivatives are shown.

Algorithm 1: Detection algorithm based on the deriva-
tive of the entropy progression
Data: The Progression {EPi}
Data: Current Window W
Data: Entropy Function H
Result: True if a DoS attack is detected

4

5

6

7

8

9

10

11

12

where

Fig. 2. Exemplary derivatives of entropy progression is shown for the Benign
dataset with Tsallis entropy. The dynamically maintained standard deviation
and the points in time that an attack is detected are also shown. That is, where
the derivative is less than the negative derivative.

Algorithm 1 shows the pseudo code for our DoS attack
detection approach. Given an entropy progression, a window
and an entropy function, the algorithm computes the entropy
of the current window (Line 3). It updates the progression
queue with the newly computed entropy (Lines 4 - 5). Then it
computes the derivative of the line of best ﬁt to the progression
(Line 6). After that, it uses Welford’s method to compute the
standard deviation of the derivatives (Lines 7 - 9). Finally, it
checks if the derivative of the line of best ﬁt is less than the
negative standard deviation (Line 12). If it is, then an attack
is signaled.

We note that there will be a problem regarding the numerical
stability of the computation of the standard deviation if care
is not taken: The standard deviation is deﬁned as follows for
data {xi}

1 mean prev = mean curr = cnt = var = 0
2 while (False) do
3

current entropy = H(W )
{EPi}.pop()
{EPi}.push(current entropy)
m, b = line of best ﬁt({EPi}) /* Compute
the line of best fit with slope
m and intercept b

*/

mean prev = mean curr
mean curr =

mean curr + (m − mean curr)/cnt

var = var +(m−mean curr)∗(m−mean prev)
*/

/* Welford’s method

σ = math.sqrt(var/cnt)
cnt = cnt + 1
if m < −σ then return True

µ =

1
N

N
(cid:88)

i=1

xi

(5)

σ2 =

(cid:80)N

i=1(xi − µ)2
N

(4)

In our method, we need to compute the standard deviation
of the derivatives dynamically. An easy way to compute it is

012345678910111213141516171819Time (Unit)0.0350.0400.0450.0500.0550.0600.065Entropy42024Input0510152025Outputderivative < 0derivative > 0020406080100Time2.01.51.00.50.00.51.01.52.0Derivative1e4DerivatiesNegative StdDetectionsN σ2

N − (N − 1)σ2

N −1 = (xN − µN )(xN − µN −1)

(7)

nqSq(X) =

to accumulate the sums of xi and x2
i :
i − 2µxi + µ2)

i=1(x2

(cid:80)N

σ2 =

N

(cid:80)N

i=1 x2

i − 2N µ2 + N µ2

(cid:80)N

N
i − N µ2
i=1 x2
N

(6)

=

=

However, this way computing has numerical instability when
the square of the mean is much bigger than the variance. To
remove this numerical stability problem, we use Welford’s
method [14]:

We derive the Welford’s formula in Appendix Section VI.

B. Implementation based on Sampling and Integer Operations

Our method samples the network ﬂow randomly and per-
forms analysis on the sample. Sampling reduces the compu-
tational and memory costs signiﬁcantly. We set the sampling
ratio to 5% in our design. The results in Section IV conﬁrm
that sampling does not decrease the accuracy, contrarily, it
improves the accuracy while decreasing the costs about 20×.
This stems from the fact that the decrease of the volume
and diversity of network activities considered within unit time
removes the trafﬁc that is relatively insigniﬁcant in terms of
the overall trend after an attack is initiated.

def best_fit_slope(x,y):
length = len(x)
mean_x = int(sum(x)/length)
mean_y = int(sum(y)/length)
sum_xy = 0
sum_xx = 0
for i in range(len(x)):

sum_xy = sum_xy + x[i]*y[i]
sum_xx = sum_xx + x[i]*x[i]

mean_xy = int(sum_xy/length)
mean_xx = int(sum_xx/length)
m = int((mean_x*mean_y - mean_xy)/
(mean_x*mean_x - mean_xx))

return m

def tsallis_ent(data, q):
length = len(data)
data = [pow(x, q) for x in data]
res = int((pow(length,q)-sum(data))

/((q-1)*pow(length,q)))

return res

def dynamic_var(m, mean, var, cnt):

tmp = mean
mean = mean + int((m-mean)/cnt)
var = var + (m-mean) * (m-tmp)
cnt = cnt + 1
return mean, var, cnt

def check(m, var):

return m < 0 and m*m > var

Listing 1. Best-ﬁt Slope, Tsallis Entropy, Dynamic Standard Deviation and
Attack Check Condition.

Listing 1 exempliﬁes the implementation of the computation
of best-ﬁt slope, Tsallis entropy, dynamic variance and the
condition to check an attack based on solely integer operations

in Python. Listing 1 does not include the data structure and
its operations that keeps track of the frequency fi of i-th
destination IP address in the current unit-time window. This
data structure can be implemented with a Hashmap.

As seen in the listing, when computing Tsallis entropy, we

scale it as follows:

Sq(X) =

1
1 − q

(cid:32)

1 −

(cid:33)

n
(cid:88)

pq
i

nqSq(X) = np

1
1 − q
(cid:32)

1
1 − q

i

(cid:32)

1 −

(cid:33)

n
(cid:88)

pq
i

i

n
(cid:88)

i
n
(cid:88)

i
n
(cid:88)

i
n
(cid:88)

(cid:33)

nqpq
i

(cid:32)

(cid:33)q(cid:33)

nq

fi
n
(cid:33)
nq f q
i
nq
(cid:33)

f q
i

nq −

(cid:32)

nq −

(cid:32)

nq −

(cid:32)

nq −

nqSq(X) =

nqSq(X) =

nqSq(X) =

1
1 − q

1
1 − q

1
1 − q

Sq(X) =

1
nq(1 − q)

(cid:32)

nq −

i

n
(cid:88)

i

(cid:33)

f q
i

(8)

where

pi =

fi
n

and fi is the frequency of i-th destination IP address in the
current unit-time window. This way we remove the ﬂoating
point operations.

As the listing shows, the check condition omits the usage

of a square root function.

C. Complexity Analysis

The computational complexity of our method is linear in the
size of network ﬂow in the unit-time window. The computa-
tional cost of our method results from the entropy computation,
ﬁtting the line of best ﬁt to the entropy progression, computing
the standard deviation dynamically and checking the detection
condition (See Listing 1). Let N be size of network ﬂow
in the unit-time window. The entropy computation is O(N )
(tsallis_ent function in Listing 1). Fitting the line of best
ﬁt to the entropy progression which has a ﬁxed small number
of entropies is O(1) (best_fit_slope function in Listing
1). Computing the standard deviation of the derivatives on-the-
ﬂy is O(1) (dynamic_var function in Listing 1) . Checking
the detection condition is O(1) (check function in Listing
1). Finally, computing the frequencies of the IP addresses
via a Hashmap is O(N ). Therefore, the total computational
complexity is O(N ). We note that sampling will reduce this
linear complexity with a constant. In our case, it is about 20
which is the multiplicative reciprocal of 5% sampling ratio.

Memory complexity is also linear in the size of network
ﬂow in the unit-time window. Same as above, let N be the
size of network ﬂow in the unit-time window. The memory for
the unit-time window is O(N ). The memory for the temporary
variables needed for the method is O(1). Therefore, the total
memory complexity is O(N ).

IV. EVALUATION

In this section, we present the experimental setup (Sec-
tion IV-A), the threshold-based detection framework (Section
IV-B), and ﬁnally main results (Section IV-C).

A. Experimental Setup

The datasets are [16], [17], and [18]. We have an application
layer dataset, which we name ”Application”, from [16]. 26
DoS attacks were intermixed with the attack-free traces from
[19] . These attacks were generated using a set of existing of
tools such as ddossim [20], Goldeneye [21] and Slowhttptest
[22]. This dataset contains 24 hours of network trafﬁc with
total size of 4.6 GB.

We have two datasets from [17] which are UDP and TCP
trafﬁc. We name them ”UDP” and ”TCP” datasets respectively.
The dataset
includes two different attack scenarios. Both
datasets lasts 8 minutes. In both scenarios, randomly generated
spoofed destination IP addresses are used in a ﬂooding manner.
The TCP SYN ﬂood and UDP ﬂood attacks were carried out
towards a server connected to the campus backbone. More
than 4000 internet users were active over the campus router
simultaneously to the attack trafﬁc. The size of the dataset is
166 MB.

Finally, we have two datasets from [18] which consist
of benign and mixed trafﬁc. We name them ”Benign” and
”Mixed” datasets respectively. The Benign dataset includes
only benign internet trafﬁc for 8 hours. Its size is 267 MB. The
Mixed dataset includes DoS attack trafﬁc which lasts about 3
hours. It is 286 MB of mixed attack and benign trafﬁc. The
attacks were carried out by one Linux server against another.
They were generated by HULK [23], Goldeneye [21] and
Slowhttptest [22] tools.

Table I shows the parameter values used in the simulations.

TABLE I
PARAMETERS OF THE SIMULATIONS

Parameter
Tsallis q
Renyi α
Unit time
Size of the progression queue
Number of past thresholds k

Value
8 and 5
0
1 minute
5
∞

based methods that use dynamic thresholds. Results in Section
IV conﬁrm that no matter how general the method is, this
method simply fails with producing very high number of false
positives.

First, this method uses the notion of bidirectional entropy
which incorporates both the entropy of source and destina-
tion trafﬁc ﬂows. Our assumption regarding the bidirectional
entropy is the following: When there is a DoS attack, the
entropy calculated on the destination IPs and on the source IPs
decreases. Second, it maintains both short-term and long-term
entropies. Short-term entropy is the entropy of recent windows,
meanwhile long-term entropy is the entropy of windows that
are further in the past.

Third,

this general method maintains dynamic thresh-
olds and accommodates different decision strategies (decision
logic). There are many possibilities for dynamic thresholds.
For instance,

thresholdt =

1
k

t−1
(cid:88)

j=t−k

thresholdj

where t is the current time and k is some positive integer. Here,
the threshold is the moving average of the last k thresholds. We
use all past thresholds, so we take k = ∞ in the simulations.
A decision strategy is needed to decide when to signal an
attack. It is used to raise an attack alert or not. A decision
strategy is deﬁned as a Boolean-valued function whose input
is a vector of entropies and thresholds. As an example,

S = (dstste < dststthr & dstlte < dstltthr)||

(srcste < srcstthr & srclte < srcltthr)

where dstste, dstlte, dststthr, dstltthr, and dstltthr are des-
tination addresses’ short term and long term entropy, and
short term and long term threshold respectively. Similarly,
srcste, srclte, srcstthr, and srcltthr source addresses’ short
term and long term entropy, and short term and long term
threshold respectively.

In our experimentation, we test the following seven strate-

gies:

S1 = (dstste < dststthr) & (dstlte < dstltthr)
S2 = (srcste < srcstthr) & (srclte < srcltthr)
S3 = (dstste < dststthr) & (srclte < srcltthr)
S4 = dstste < dststthr
S5 = srcste < srcstthr
S6 = dstlte < dstltthr
S7 = srclte < srcltthr

(9)

B. A Bidirectional Short and Long-term Entropy Method with
Dynamic Thresholds

We evaluate our method against a general method en-
capsulating various entropies, decision logic and dynamic
thresholds. Our aim is to explore the design space of entropy

We implement a python simulator framework to evaluate all
strategies.

C. Results

Figure 3 shows the entropies and thresholds computed, and
the detections made by the threshold-based approaches. The

Fig. 3. Entropy and detection results for the threshold-based approaches. The ﬁgure shows the entropies and thresholds computed over time. It also shows
the timing of detections made by these approaches and the actual attacks.

ﬁgure also includes the timing of the actual attacks and the
detections made by these approaches with error bars. This
error bars approximates the timing of actual attacks over the
unit-time intervals. The ﬁgure plots the best results for these
approaches. They are achieved by Tsallis entropy however
with different strategies. The number of false positives are
at least one of magnitude bigger than the actual number of
attacks - up to two orders of magnitude. For instance, there
are 372 false positives vs 4 actual attacks for the TCP Dataset.
Even in the best performance, we see that these approaches
fail and this shows that simply using a threshold to detect
attacks does not work.

Figure 4 shows the derivatives and the standard deviations
computed by our algorithm using Tsallis entropy (with its
parameter being 8) without sampling. We set
the Tsallis
parameter to 8 by initial empirical tests. It also shows the
timing of the actual attacks and the detections made by our

algorithm. We see that our algorithm produces low number of
false positives with the help of the derivatives of line of best
ﬁt and the standard deviation of the derivatives. The number
of false positives of our algorithm are 3, 14, 8, 14 and 14
for the Application, UDP, TCP, Benign and Mixed dataset
respectively. Moreover, we see that although there is delay,
the timing of the detections of our algorithm is close to the
timing of the actual attacks.

Figure 5 shows the derivatives and the standard devia-
tions computed by our algorithm with 5% sampling ratio
and integer operations. We see that sampling improved the
detection performance compared to the case with no sampling
by decreasing the volume and diversity of network activities.
When utilizing sampling, we use a smaller Tsallis parameter. It
is set to 5 after initial tests. We note that since sampling dilutes
the unit time network trafﬁc, a smaller Tsallis parameter would
be sufﬁcient to magnify the computed entropies as much as

0200400600800100012001400Time0.70.80.91.01.11.21.31.4Entropy / Thresholds1e1Application_Dataset with TsallisEntropiesThresholdsDetections (523)Truth 2601020304050607080Time6768697071Entropy / Thresholds1e7+1.4285e1UDP_Dataset with TsallisEntropiesThresholdsDetections (33)Truth 40200400600800Time1.42501.42551.42601.42651.42701.42751.42801.4285Entropy / Thresholds1e1TCP_Dataset with TsallisEntropiesThresholdsDetections (376)Truth 40255075100125150175Time0.14200.14220.14240.14260.1428Entropy / ThresholdsBenign_Dataset with TsallisEntropiesThresholdsDetections (60)Truth 0050100150200250Time0.000.020.040.060.080.100.120.14Entropy / ThresholdsMixed_Dataset with TsallisEntropiesThresholdsDetections (105)Truth 5Fig. 4. The timing of the detections and derivatives of our algorithm. The derivatives and the standard deviations which are computed during the course of
our algorithm are shown. In addition, the timing of the actual attacks and the detections made by our algorithm are shown.

the case with no sampling.

During our evaluation, we simulated our method contin-
uously over the full datasets without skipping any network
trafﬁc after an attack detection. A more fair evaluation would
be to skip immediate network trafﬁc following the detection
in the datasets. This would remove the confusion caused by
the trafﬁc immediately following the detection time. However,
since it is not clear how long one should skip network trafﬁc
after a detection, we chose to continuously run and detect. In
any case, the detection performance attained in this manner is
a worst-case one.

We see the effect of the non-stop detection, i.e, no skipping
of network trafﬁc after a detection, when we analyze the timing
results in Figure 5. We see that the timing (timelines) of actual
attacks and the detections differs. We use the timelines to see
if there is an overlap of a detection and an actual attack. If
there is a detection but no actual attack that overlaps with

this detection, then we classify this case as a false positive.
Conversely, if there is an actual attack but no detection that
overlaps with this actual attack, we classify this case as a false
negative. In addition to analyzing the timelines, we also report
the false positives by the raw numbers of all detections. For
the Application dataset, in terms of raw numbers, the number
of false positives is 38-26=12 (38 detections and 26 actual
attacks). A close look at the timelines, we see that actually
there are 3 false positives and 14 false negatives. For the
UDP dataset, in terms of raw numbers, the number of false
positives is 10-4=6. However, considering the error bars of the
actual attacks and timing of detections, we see that the number
of both false positives and false negatives are zero. This is
because - looking at the timelines - there is no actual attack
that does not overlap with a detection and no detection that
does not overlap with an actual attack. For the TCP dataset,
similar analysis shows that the number of false positives is

0200400600800100012001400Time1.51.00.50.00.51.01.5Derivative / STDs1e2Application_Dataset with TsallisDerivatiesStandard DeviationsDetections (29)Truth 26010203040506070Time1.00.50.00.51.0Derivative / STDs1e7UDP_Dataset with TsallisDerivatiesStandard DeviationsDetections (18)Truth 40200400600800Time420246Derivative / STDs1e5TCP_Dataset with TsallisDerivatiesStandard DeviationsDetections (12)Truth 40255075100125150175Time2.01.51.00.50.00.51.01.52.0Derivative / STDs1e4Benign_Dataset with TsallisDerivatiesStandard DeviationsDetections (14)Truth 0050100150200Time43210123Derivative / STDs1e2Mixed_Dataset with TsallisDerivatiesStandard DeviationsDetections (19)Truth 5Fig. 5. The detections and derivatives of our algorithm with 5% sampling ratio and only integer operations.

4-4=0 in terms of raw numbers. Its timelines show there are
2 false positives and 2 false negatives. For the Mixed dataset,
raw numbers show 15-5=10 false positives. Timelines indicate
only 1 false positive and zero false negatives. Finally, for the
Benign dataset, this analysis does not apply since there are no
actual attacks.

Figure 6 shows the number of detections that our algorithm
and the threshold-based approaches with different strategies
make using the three entropy deﬁnitions. We see that the
threshold-based approaches falsely detect attacks that are
about two-orders of magnitude bigger than the actual number
of attacks. They fail clearly across all settings and strategies.
This approach is not sufﬁcient
to effectively discover the
attacks for the datasets evaluated. On the other hand, our
algorithm, especially with Tsallis entropy, decreases the false
positive rates by about two-orders of magnitude. As a result,
the number of detections it makes are close to the number of

actual attacks.

Figure 7 shows the time-based false positive rates for our
algorithm and the threshold-based approaches. The time-based
false positive rates are calculated by dividing the total number
of detections minus the number of actual attacks by the total
number of windows. This rate quantiﬁes the fraction of the
false detections made by an approach over time. We see that
these rates for the threshold-based approaches range from
10% to 60%. This means that these approaches make a false
detection at least every 10 windows up to more frequently
than every other window. On the other hand, our algorithm
with Tsallis entropy has rates that are from 0% to 7%. The
arithmetic mean is 3%. These results clearly indicate the
success and usability of our algorithm. We see that due to
the challenges inherited by the threshold based approaches,
our method is superior with our experimental workﬂow.

Figure 8 shows the comparison of the Tsallis and Shannon

0200400600800100012001400Time1.51.00.50.00.51.01.5Derivative / STDs1e8Application_Dataset with TsallisDerivatiesStandard DeviationsDetections (38)Truth 26010203040506070Time86420246Derivative / STDsUDP_Dataset with TsallisDerivatiesStandard DeviationsDetections (10)Truth 40200400600800Time0.750.500.250.000.250.500.751.00Derivative / STDs1e3TCP_Dataset with TsallisDerivatiesStandard DeviationsDetections (4)Truth 40255075100125150175Time2.01.51.00.50.00.51.0Derivative / STDsBenign_Dataset with TsallisDerivatiesStandard DeviationsDetections (9)Truth 0050100150200Time3210123Derivative / STDs1e9Mixed_Dataset with TsallisDerivatiesStandard DeviationsDetections (15)Truth 5Fig. 6. Detection results. The number of actual attacks are: 26 for the Application, 4 for the UDP, 4 for the TCP, 0 for the Benign and 5 for the Mixed
dataset. Our algorithm was run with 5% sampling ratio and only integer operations.

Fig. 7. Time-based false positive rates. The time-based false positive rates are calculated by dividing the total number of detections minus the number of
actual attacks by the total number of windows. Our algorithm was run with 5% sampling ratio and only integer operations.

entropies and the resulting derivatives of the Application
dataset. We see that Tsallis entropy, as a generalized measure,
ampliﬁes entropies and highlights and magniﬁes the change
in an entropy progression.

V. RELATED WORK

[2] is an excellent survey of DoS detection and mitigation
methods. In this work, we focus on information-theoretical

ShannonRenyiTsallisS1S2S3S4S5S6S7# Detections0200400600ApplicationShannonRenyiTsallisS1S2S3S4S5S6S7# Detections0102030405060UDPShannonRenyiTsallisS1S2S3S4S5S6S7# Detections0100200300400500TCPShannonRenyiTsallisS1S2S3S4S5S6S7# Detections020406080BenignShannonRenyiTsallisS1S2S3S4S5S6S7# Detections0255075100125MixedShannonRenyiTsallisApplicationUDPTCPBenignMixed# Detections050100150Our Algorithm with Tsallis (38, 10, 4, 9, 15)ShannonRenyiTsallisS1S2S3S4S5S6S7False Positive Rate0.00.10.20.30.4ApplicationShannonRenyiTsallisS1S2S3S4S5S6S7False Positive Rate0.00.20.40.6UDPShannonRenyiTsallisS1S2S3S4S5S6S7False Positive Rate0.00.10.20.30.40.5TCPShannonRenyiTsallisS1S2S3S4S5S6S7False Positive Rate0.00.10.20.30.40.5BenignShannonRenyiTsallisS1S2S3S4S5S6S7False Positive Rate0.00.10.20.30.40.5MixedShannonRenyiTsallisApplicationUDPTCPBenignMixedFalse Positive Rate0.00.10.20.30.40.5Our Algorithm with Tsallis (0.01, 0.07, 0.00, 0.05, 0.04)Fig. 8. Comparison of the Tsallis and Shannon entropies and the resulting derivatives of the Application dataset.

approaches.

[10] and [24] propose an entropy-based approach to detect
DoS attacks. The entropy used in these studies is Shannon
entropy. Similar to our method, the entropy is deﬁned based
on destination address. In our work, we differently use general-
ized entropy measures with differential analysis to improve the
detection performance while removing the usage of thresholds.
In terms of the usage of generalized entropies in the
existing literature, Behal and Kumar [9] introduce φ-entropy
and φ-divergence metrics based on Csiszar’s f-divergence [25]
measure to detect and distinguish various types of DoS attacks
and ﬂash events. They report the φ metrics perform better
than traditional generalized entropy and divergence metrics.
Moreover, φ-divergence exceeds φ-entropy in detection accu-
racy. Basicevic et. al. [8] study various DoS attack detectors
based on different entropy types using source side features
and report that detectors based on Tsallis [11] - in agreement
with our study - and Bhatia-Singh [25] entropies perform best.
Compared to their approach, we use differential and statistical
analysis to signal an attack which is hyper-parameter free
and thus is robust. Moreover, we study many real-world DoS
attack types whereas they study only SYN ﬂoods. Similar
works are [26], [27], and [28]. For instance, [27] and [28]
propose detectors based on Tsallis [11] and Renyi entropy
[12] respectively.

Some research studies use other aspects of entropy such
as joint and conditional entropy. Mao et. al. [29] propose
a joint-entropy based detector for DoS ﬂood attacks. While

they report that joint-entropy generally leads to better per-
formance compared to single entropy, the overall algorithm
requires more memory and although not asymptotically, it
is also slower than single entropy calculations. One major
drawback of their approach is the threshold is static. [30] is a
similar study which has a quadratic complexity making it non-
scalable. [31] proposes using conditional entropy to detect DoS
attacks. However, conditional entropy is not scalable because
it has quadratic time and memory complexity.

Other

than entropy,

some information-theoretical ap-
proaches make use of different metrics. Behal et. al. [32]
studies φ-divergence and develops an distributed method. This
mechanism is distributed over the Point of Presence of ISPs.
A centralized server aggregates the entropies and decides if
there is an DoS attack or a ﬂash event. In case of DoS
attacks, they are further classiﬁed as low-rate or high-rate. The
main drawback of this approach is that the centralized server
becomes single-point-of-failure. As with the existing research,
the success of their method depends on the optimization of
window size and thresholds. [33] proposes a new metric,
LeCam, and compares it to other divergence metrics. While it
is reportedly better-performing, the detection rates are low and
around 54%. [16] presents a cumulative sum metric for high
and low volume DoS attacks while also studying the impact
of various types of sampling on the detection performance.
Their method requires the optimization of window size and
thresholds which inhibits the performance of their method in
general settings.

02004006008001000120014000.000.020.040.060.080.100.120.14EntropyTsallis EntropiesShannon Entropies02004006008001000120014000.0150.0100.0050.0000.0050.0100.015DerivativeTsallis DerivatiesShannon Derivaties0200400600800100012001400Time2004006008001000Entropies Ratio0200400600800100012001400Time800060004000200002000Derivaties Ratio[12] Alfr´ed R´enyi et al. On measures of entropy and information. In Pro-
ceedings of the Fourth Berkeley Symposium on Mathematical Statistics
and Probability, Volume 1: Contributions to the Theory of Statistics. The
Regents of the University of California, 1961.

[13] C. E. Shannon. A mathematical theory of communication. Bell System

Technical Journal, 27(3):379–423, 1948.

[14] Author(s) B. P. Welford and B. P. Welford. Note on a method for
calculating corrected sums of squares and products. Technometrics,
pages 419–420, 1962.

[15] Jos´e M. Amig´o, S´amuel G. Balogh, and Sergio Hern´andez. A brief

review of generalized entropies. Entropy, 20(11), 2018.

[16] Hossein Hadian Jazi, Hugo Gonzalez, Natalia Stakhanova, and Ali A.
Ghorbani. Detecting http-based application layer dos attacks on web
servers in the presence of sampling. Computer Networks, 121:25–36,
2017.

[17] Derya Erhan and Emin Anarım. Bo˘gazic¸i university distributed denial

of service dataset. Data in Brief, 32:106187, 2020.

[18] Iman Sharafaldin, Arash Habibi Lashkari, and Ali Ghorbani. Toward
generating a new intrusion detection dataset and intrusion trafﬁc char-
acterization. pages 108–116, 01 2018.

[19] Ali Shiravi, Hadi Shiravi, Mahbod Tavallaee, and Ali A. Ghorbani. To-
ward developing a systematic approach to generate benchmark datasets
for intrusion detection. Computers and Security, 31(3):357–374, 2012.

[20] Ddosim, layer 7 ddos simulator. Last Accessed: 2021-09-06.
[21] J. seidl, goldeneye layer 7 dos test tool. Last Accessed: 2021-09-06.
[22] Slowhttptest, application layer dos attack simulator. Last Accessed:

2021-09-06.

[23] Hulk, http unbearable load king. Last Accessed: 2021-09-06.
[24] Ognjen Joldzic, Zoran Djuric, and Pavle Vuletic.

A transparent
and scalable anomaly-based dos detection method. Comput. Netw.,
104(C):27–42, July 2016.

[25] Pradeep Bhatia and Surender Singh. On a new csiszar’s f-divergence
measure. Cybernetics and Information Technologies, 13, 05 2013.
[26] Przemysław Berezi´nski, Bartosz Jasiul, and Marcin Szpyrka. An
entropy-based network anomaly detection method. Entropy, 17(4):2367–
2408, 2015.

[27] Accurate network anomaly classiﬁcation with generalized entropy met-

rics. Computer Networks, 55(15):3485–3502, 2011.

[28] Monowar H. Bhuyan, D. K. Bhattacharyya, and J. K. Kalita. E-ldat: a
lightweight system for ddos ﬂooding attack detection and ip traceback
using extended entropy metric. Security and Communication Networks,
9(16):3251–3270, 2016.

[29] Jiewen Mao, Weijun Deng, and Fuke Shen.

ddos ﬂooding attack
detection based on joint-entropy with multiple trafﬁc features. In 2018
17th IEEE International Conference On Trust, Security And Privacy In
Computing And Communications/ 12th IEEE International Conference
On Big Data Science And Engineering (TrustCom/BigDataSE), pages
237–243, 2018.

[30] K¨ubra Kalkan, Levent Altay, G¨urkan G¨ur, and Fatih Alag¨oz. Jess: Joint
entropy-based ddos defense scheme in SDN. IEEE Journal on Selected
Areas in Communications, 36(10):2358–2372, 2018.

[31] Ming Xuanyuan, Visham Ramsurrun, and Amar Seeam. Detection
and mitigation of ddos attacks using conditional entropy in software-
deﬁned networking. In 2019 11th International Conference on Advanced
Computing (ICoAC), pages 66–71, 2019.

[32] Sunny Behal, Krishan Kumar, and Monika Sachdeva. D-fac: A novel
φ-divergence based distributed ddos defense system. Journal of King
Saud University - Computer and Information Sciences, 33(3):291–303,
2021.

[33] Sunny Behal and Parvinder Singh. Lecam: A novel metric for detecting
In 2019 3rd International conference on Electronics,
ddos attacks.
Communication and Aerospace Technology (ICECA), pages 1400–1405,
2019.

VI. CONCLUSION

In this work, we propose a novel method based on general-
ized entropy measures to detect DoS attacks. The method pro-
gressively computes the line-of-best to the unit-time entropy
progression. IT checks the slope of this line to the dynamically
computed standard deviation of all slopes. It signals an attack
when the slope is less than the negative of the standard.
Results demonstrate the success of our method. It achieves
false positive rates that are less than 7% in all cases and on
average 3%.

Our method encompass several original key ideas. It re-
moves the hyper-parameters of window size and thresholds.
It uses generalized entropy measures as opposed to Shannon
measure to amplify the computed entropy. Our method is by
construction is embarrassingly distributed: it is to be deployed
to 5G edge nodes or Internet routers. We achieve this by
analyzing a small fraction of the network ﬂow and using only
integer operations.

As future work, we plan to ﬁt higher-order curves to
the entropy progression to investigate the accuracy of such
variants. We also consider to extend our work to explore
generalized divergence measures.

REFERENCES

[1] Aaron Yi Ding and Marijn Janssen. Opportunities for applications using
In Proceedings
5g networks: Requirements, challenges, and outlook.
of the Seventh International Conference on Telecommunications and
Remote Sensing, ICTRS ’18, page 27–34, New York, NY, USA, 2018.
Association for Computing Machinery.

[2] Tasnuva Mahjabin, Yang Xiao, Guang Sun, and Wangdong Jiang. A
survey of distributed denial-of-service attack, prevention, and mitigation
International Journal of Distributed Sensor Networks,
techniques.
13(12):1550147717741463, 2017.

[3] Mikail Mohammed Salim, Shailendra Rathore, and J. Park. Distributed
denial of service attacks and its defenses in iot: a survey. The Journal
of Supercomputing, 76:5320–5363, 2019.

[4] N. G. Bhuvaneswari Amma, S. Selvakumar, and R. Leela Velusamy. A
statistical approach for detection of denial of service attacks in computer
IEEE Transactions on Network and Service Management,
networks.
17(4):2511–2522, 2020.

[5] Mahsa Nooribakhsh and Mahdi Mollamotalebi. A review on statistical
approaches for anomaly detection in ddos attacks. Information Security
Journal: A Global Perspective, 29(3):118–133, 2020.

[6] Chuanhuang Li, Yan Wu, Xiaoyong Yuan, Zhengjun Sun, Weiming
Wang, Xiaolin Li, and Liang Gong. Detection and defense of ddos
International
attack–based on deep learning in openﬂow-based sdn.
Journal of Communication Systems, 31(5):e3497, 2018. e3497 IJCS-
17-0848.R1.

[7] Francesco Musumeci, Valentina Ionata, Francesco Paolucci, Filippo
Cugini, and Massimo Tornatore. Machine-learning-assisted ddos attack
In ICC 2020 - 2020 IEEE International
detection with p4 language.
Conference on Communications (ICC), pages 1–6, 2020.

[8] Ilija Basicevic, Nikola Blazic, and Stanislav Ocovaj. On the use of
generalized entropy formulas in detection of denial-of-service attacks.
Security and Privacy, 4(1):e134, 2021.

[9] Sunny Behal and Krishan Kumar. Detection of ddos attacks and ﬂash
events using novel information theory metrics. Computer Networks,
116:96–110, 2017.

[10] Ranyelson Neres Carvalho, Jacir Luiz Bordim, and Eduardo Adilio
Pelinson Alchieri. Entropy-based dos attack identiﬁcation in SDN. In
2019 IEEE International Parallel and Distributed Processing Sympo-
sium Workshops (IPDPSW), pages 627–634, 2019.

[11] Constantino Tsallis. Possible generalization of boltzmann-gibbs statis-

tics. Journal of statistical physics, 52(1):479–487, 1988.

APPENDIX

Finally, we derive the Welford’s formula:

To derive the Welford’s formula, ﬁrst, we note the following

algebraic identity:

N
(cid:88)

(xi − µN ) = 0

i=1

N − (N − 1)σ2
N σ2
N
(cid:88)

(xi − µN )2 −

=

N −1

N −1
(cid:88)

(xi − µN −1)2

i=1

i=1

= (xN − µN )2 +

N −1
(cid:88)

(cid:0)(xi − µN )2 − (xi − µN −1)2(cid:1)

i=1
N −1
(cid:88)

(xi − µN + xi − µN −1)(µN −1 − µN )

Next, we derive the following identity:

= (xN − µN )2 +

N −1
(cid:88)

(xi − µN + xi − µN −1) = µN − xN

i=1

We note that

i=1

= (xN − µN )2 + (µN − xN )(µN −1 − µN )
= (xN − µN )(xN − µN − µN −1 + µN )
= (xN − µN )(xN − µN −1)

where we use Equation 10.

(11)

N −1
(cid:88)

(xi − µN + xi − µN −1) =

i=1
N −1
(cid:88)

(xi − µN ) +

N −1
(cid:88)

(xi − µN −1)

i=1

i=1

and

N −1
(cid:88)

(xi − µN ) +

N −1
(cid:88)

(xi − µN −1) =

N −1
(cid:88)

(xi − µN ) + 0

i=1

i=1

i=1

Hence,

N −1
(cid:88)

(xi − µN + xi − µN −1) =

i=1

N −1
(cid:88)

(xi − µN )

i=1

On the other hand,

N −1
(cid:88)

(xi − µN )

i=1

(cid:32)N −1
(cid:88)

i=1
(cid:32)N −1
(cid:88)

i=1

(cid:32) N
(cid:88)

=

=

=

(xi − µN )

(cid:33)

+ (xN − µN ) − (xN − µN )

(cid:33)

(xi − µN ) + (xN − µN )

− (xN − µN )

(cid:33)

(xi − µN )

− (xN − µN )

i=1
= µN − xN

Therefore,

N −1
(cid:88)

(xi − µN + xi − µN −1) = µN − xN

(10)

i=1

