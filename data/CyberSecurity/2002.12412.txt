Formal Synthesis of Monitoring and Detection
Systems for Secure CPS Implementations

Ipsita Koley1, Saurav Kumar Ghosh1, Soumyajit Dey1, Debdeep Mukhopadhyay1,
Amogh Kashyap K N2, Sachin Kumar Singh2, Lavanya Lokesh2, Jithin Nalu Purakkal2, Nishant Sinha2
1Indian Institute of Technology,Kharagpur, 2Robert Bosch Engineering and Business Solutions Private Limited
{ipsitakoley, soumyajit, debdeep}@iitkgp.ac.in, saurav.kumar.ghosh@cse.iitkgp.ernet.in
{Amogh.Kashyap, SachinKumar.Singh, Lokesh.Lavanya, Jithin.NaluPurakkal2,Sinha.Nishant}@in.bosch.com

0
2
0
2

b
e
F
7
2

]

R
C
.
s
c
[

1
v
2
1
4
2
1
.
2
0
0
2
:
v
i
X
r
a

Abstract—We consider the problem of securing a given control
loop implementation of a cyber-physical system (CPS) in the
presence of Man-in-the-Middle attacks on data exchange between
plant and controller over a compromised network. To this end,
there exists various detection schemes which provide mathemat-
ical guarantees against such attacks for the theoretical control
model. However, such guarantees may not hold for the actual
control software implementation. In this article, we propose
a formal approach towards synthesizing attack detectors with
varying thresholds which can prevent performance degrading
stealthy attacks while minimizing false alarms.

Index Terms—Cyber Physical System, False data injection

attack, Formal method, Residue based detector.

I. INTRODUCTION

Unattended communication among devices in distributed
CPS implementations makes new pathways for malicious
interference. Given that such systems often need to perform
safety critical functionalities with real time deadlines within
stringent power, energy requirements, the impact of attacks on
safety-critical CPS may have catastrophic consequences. In the
past decade, many such high proﬁle attacks have been reported
spanning a variety of application domains ( [1]–[4]). It is infea-
sible to physically secure every packet transmission between
CPS components due to limited communication bandwidth as
well as lightweight nature of computing nodes. This rules out
using heavyweight cryptographic encryption techniques (like
RSA, AES) along with MACs for securing all intra-vehicular
communication [5]. Hence, it makes sense to enhance the
security of CPS implementations by using suitable lightweight
monitoring primitives considering that an attacker has already
breached into the CPS communication infrastructure.

In this work, we focus on residue-based monitoring and
detection systems which compute the difference between
plant output measurements received through a communication
network and the estimates of the same based on earlier
measurements and knowledge about system dynamics, raising
an alarm if the difference (i.e. the residue) exceeds a pre-
deﬁned threshold. Since this type of anomaly detector uses
the properties of the control system to detect an adversarial
action, it does not impose any signiﬁcant overhead to the
system’s resource consumption in terms of communication
and computation. Although there exists signiﬁcant literature on

The authors acknowledge generous support from Robert Bosch Engineering

and Business Solutions Private Limited.

residue-based detectors [6]–[8], none of these works discusses
an effective methodology for synthesizing thresholds given
a control system speciﬁcation. Also existing works consider
static thresholds only, i.e. the difference in measurement and
estimate is compared with a constant pre-ﬁxed threshold for
all closed loop iterations of the system.

As a potential example of targeted performance degrading
attack, consider the situation when the reference point of a
controller changes due to occurrence of some event. For such
systems, with a comparatively smaller fault injection at the
later stage of dynamics (i.e. when nearing the reference),
an attacker can prevent the system from reaching the close
vicinity of the reference. This brings in interesting trade-offs
from the detector design point of view. In a static threshold-
based detection scheme, if the threshold is decided based on
the required attack amount at the later phase of settling time,
it may be the case that any process or measurement noise
induced by environmental disturbance in the system is con-
sidered an attack and a false alarm is generated. This implies
the False Alarm Rate (FAR) will increase. If the threshold
is decided based on the attacker’s effort at the earlier phase
of settling time, the attacker can easily bypass the detection
scheme by injecting sufﬁciently small anomalies whenever
the system is very close to the reference and deteriorate the
system’s performance. This motivates the case for a variable
threshold based anomaly detection method which may ensure
reduced FAR while identifying even small attack efforts that
may lead to potential performance degradation.

residue under noise

residue under attack

th Th v

th

)

m
(
n
o
i
t
a
v
e
d

i

0.6

0.4

0.2

0

-0.2

deviation under no noise
deviation under noise
deviation under attack

0.1

e
u
d
s
e
r

i

0.05

2

4
Time(x10 -1)(s)

6

8

10

0

2

4
Time(x10 -1)(s)

6

8

10

(a) Effect of noise and attack

(b) Static vs dynamic threshold

Fig. 1: Trajectory tracking system

As a motivational example, we consider a trajectory tracking
system (Fig. 1) taken from [9]. A suitably crafted attack can
steer the system towards instability as shown in the same
ﬁgure. In Fig. 1b, we consider three possible residue based
detectors, with the smaller threshold th, the bigger threshold
T h and the variable threshold curve vth. Note that with th,

 
 
 
 
 
 
the detector considers even the harmless noise as an attack, as
shown (Fig. 1b). On the other hand, with T h, the actual attack
could easily bypass the detector. However using the variable
threshold curve vth (dotted red line in Fig. 1b), the attack
does not remain stealthy while harmless noise is allowed to
pass reducing the FAR.

In this article, we propose a formal approach for synthe-
sizing residue based attack detectors with variable thresholds
for CPS implementations that can prevent stealthy attacks.
These detectors are also guaranteed to have smaller FAR w.r.t.
provably safe static threshold based detector options.

II. SYSTEM MODEL AND PROBLEM FORMULATION

Consider a discrete linear time invariant (LTI) plant model
S given as, xk+1 = Axk + Buk + wk, yk = Cxk + Duk + vk,
where xk ∈ Rn, yk ∈ Rm, wk ∈ Rn ∼ N (0, Q) and
vk ∈ Rm ∼ N (0, R) represent system state variables, sensor
measurements of plant, zero mean Gaussian process and
measurement noise at kth sampling instance respectively. Also
A, B and C are transition matrix, input map and output map
for the plant model respectively. To estimate the system states
ˆxk from the observed ones, a Kalman ﬁlter based observer is
deployed, given by, zk = yk−C ˆxk, ˆxk+1 = Aˆxk +Buk+Lzk,
where residue zk = yk − C ˆxk is the difference between
measured and estimated output at kth time instance, and
L is Kalman gain. The controller output uk is computed
as, uk = −K ˆxk. In this paper we contemplate false data
injection based attack scenario in which the attacker falsiﬁes
the sensor measurements by injecting ak ∈ Rm to sensor
output yk at kth sampling instance. The resulting altered
sensor measurements ˜yk = yk + ak are fed to the estimator
which in turn affects the control input calculation. Due to this,
the closed loop dynamics deviates from the expected behavior.
For this system description, we consider a threshold based
detection scheme such that the detector will raise an alarm
whenever kzkk ≥ T h[k] where T h[k] is threshold at kth
sampling instance. We say an attack is stealthy if some given
safety or performance criteria of the system is violated by the
attacker while kzkk remains below T h[k] for all k.
Formal Problem Statement: Consider the plant model S
as discussed earlier, a controller implemented as a software
program C running on an ECU, and a safety or performance
criteria pf c. The objective of C is to satisfy pf c withing some
(j + T )th samples starting from any sampling instance j. An
l length threshold speciﬁcation T h is represented by a vector
∈ Rl. Threshold is said to be static if T h[i] is same for all i,
else it is variable. We formally deﬁne the threshold synthesis
problem as follows.
Given hS, C, pf ci, what would be an optimal threshold spec-
iﬁcation T h such that any stealthy attack is guaranteed to be
detected as well as FAR is minimized ?

III. THRESHOLD SYNTHESIS AND METHODOLOGY

As a ﬁrst step in our approach, we propose Algorithm 1
which formally checks the implementation C and identiﬁes
whether there exists any possible attack vector that can violate

the target properties of the system. Given S, C, let xdes be the
reference point for the system and the target property pf c is to
reach xT ∈ {xdes + ǫ} for some ǫ ∈ R within a ﬁnite number
of iterations, say T starting from any initial state x1 ∈ V ⊆
Rn. An attacker would want to achieve xT 6∈ {xdes + ǫ} after
T such closed loop iterations. Some CPS implementations
often incorporate certain monitoring constraints in addition to
residue based attack detectors to check the sanity of the sensor
measurements. Such constraints are captured using suitable
predicates denoted as mdc. Algorithm 1 takes as input mdc,
pf c, a threshold vector T h and a ﬁnite duration T allotted
for achieving pf c. The variable ak signifying false data is
assigned a value nondeterministically (Line 4) and is added
with measurements subsequently. We say that an attack is
stealthy but successful when predicates kzkk ≤ T h[k] and
mdc are satisﬁed, but pf c is violated. This is modeled by the
assertion A in Line 9. A is given as input to an SMT tool with
the assert clause. It returns a successful attack vector A if the
assertion A is satisﬁed (Line 11). Otherwise, it returns NULL
(Line 13) which guarantees that no attack vector exists that
remains stealthy over T iterations and violates the performance
criteria pf c of the system.

Input Control property pf c, existing monitoring constraint mdc, computed threshold

vector T h, attack duration T

⊲ Initialization

x1 ← V; ˆx1 ← 0; u1 ← 0;
for k = 1 to T do

Output Attack vector A(if it exists, otherwise NULL)
1: function ATTVECSYN(T h, pf c, mdc, T )
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:

ak ← nondeterministic choice;
yk ← Cxk + Duk + ak; ˆyk ← C ˆxk + Duk;
zk ← yk − ˆyk;
xk+1 ← Axk + Buk; ˆxk+1 ← Aˆxk + Buk + Lzk;
uk+1 ← −K ˆxk+1;

A ←assert((∀T h[p] ∈ T h, kzpk < T h[p] && mdc) 6→ pf c);
if A is valid then

return A ← [a1 · · · aT ];

return NULL;

else

Algorithm 1: Attack vector synthesis

We now propose a methodology in Algorithm 2 to syn-
thesize a monotonically decreasing vector of thresholds to
provably secure a given CPS against attacks. Given the state
space of possible l-length variable threshold functions (l ∈ N),
we formulate heuristic approaches guided by our hypothesis
of monotonically decreasing thresholds. To verify whether
existing monitoring constraint (if any) sufﬁces to detect any
stealthy attack we generate an attack vector without any
threshold based detector (Line 2−3) using Algorithm 1. If any
attack vector is retrieved, we make a greedy choice and select
the sampling instance i where maximum residue is generated
due to this attack (Line 4) as a pivot point. A threshold at i
is introduced to thwart the current attack (Line 5). With this
new threshold we call Algorithm 1 (Line 6) to check if any
attack can bypass this detector. If found, we now search for
new thresholds to be added to T h to stop this new attack in
the following manner.
Case 1a [Line 9 − 11]: For any of the existing thresholds
T h[p] ∈ T h, we try to ﬁnd out whether the current attack has
produced any residue kzkk ≥ T h[p] before the pth instance,

i.e. k ≤ p. If any such zk exists, we consider the maximum of
them and include it to T h while ensuring monotonicity (Line
9 − 10). If we get such a new threshold T h[i] that keeps the
monotonic decreasing order in T h intact, we stop searching
(Line 11). Otherwise, we consider Case 1b.

staircase is created by setting ∀1 ≤ j ≤ i, T h[j] = Steps[i]
where Steps[i] = kzik (Line 5 − 6). With this new threshold
vector T h, we call Algorithm 1 to check if any attack can
bypass this detector. If yes, we generate new threshold steps
in the following ways.

Input Performance criteria pf c, existing monitoring constraint mdc, number of sam-

pling instances T required by the controller to attain pf c

Output Threshold Vector T h = { T h[i]: threshold required at ith sampling instance

to thwart false data injection attack} of length T

⊲ Initialization

∃i ∈ [1, T ] , ∀ k ∈ [1, T ], i 6= k ∧ kzik ≥ kzkk
T h[i] ← kzik;

while ATTVECSYN(T h, pf c, mdc, T ) do

f ound ← f alse;
for each p ∈ [1, T ] s.t. T h[p] 6= 0 do

T h ← N ULL;
if ATTVECSYN(T h, pf c, mdc, T ) then

1: function PIVOTBASEDTHRESHOLDSYN(pf c, mdc, T )
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:

if ∀k ∈ [i + 1, T ] kzik ≥ T h[k] then

if f ound = f alse then

if ∃i kzik ← max(∀k ∈ [p + 1, T ] kzkk) then

T h[i] ← min(∀k ∈ [1, i − 1] T h[k] 6= 0, kzik);
f ound ← true; break;

T h[i] ← min(∀k ∈ [1, i − 1] T h[k] 6= 0, kzik);
f ound ← true; break;

⊲ New threshold addition
if ∃i kzik ← max(∀k ∈ [1, p − 1] kzkk ∧ kzkk ≥ T h[p]) then

⊲ Threshold reduction step
∃i ∈ [1, T ] ∀k ∈ [1, T ] i 6= k ∧ T h[i] 6= 0 ∧ T h[k] 6= 0 ∧

((T h[i] − kzik) ≤ (T h[k] − kzkk));
T h[i] ← kzik;
for all k ∈ [i + 1, T ] do

if T h[k] > T h[i] then
T h[k] ← T h[i]

return T h

18:
19:
20:
21:
22:

Algorithm 2: Pivot Based Threshold Synthesis

Case 1b [Line 12 − 15]: For any of the thresholds T h[p] ∈
T h, we try to ﬁnd out whether the current attack has produced
any residue kzkk ≥ T h[j] for all j ∈ [k + 1, T ] where k > p.
In that case, we consider the maximum of them (Line 12) and
include it to T h while ensuring monotonicity (Line 13 − 14).
Otherwise, one or more existing thresholds in T h need to be
reduced to detect the current attack (Case 1c).
Case 1c [Line 16 − 21]: We choose the candidate threshold
T h[i] from T h which can be reduced with minimum effort i.e.
the minimum difference between the current threshold value
T h[i] and the residue kzik generated by the attack (Line 17).
For that i, we set T h[i] = kzik (Line 18) and adjust subsequent
thresholds in order to ensure monotonicity (Line 19 − 21).
Once a new threshold is introduced or existing thresholds are
modiﬁed to detect the current attack, we call Algorithm 1 (Line
6) with the modiﬁed T h. If it returns NULL, it is ensured that
the latest T h is enough to thwart any stealthy attack. If not,
we repeat the process with Case 1a, 1b or 1c with the newly
generated attack vector. While Algorithm 2 can be used to
synthesize monotonically decreasing thresholds, it can take a
long time to converge. Hence we propose Algorithm 3 which
also starts with generating an attack vector without considering
any threshold using Algorithm 1 and ﬁnds the sampling
instance i at which maximum residue is generated (Line 3−4).
Considering a staircase approximation of the target variable
threshold vector, we maintain the vector Steps to keep track
of the heights of the step edges of the staircase where Steps[k]
denotes height of the kth step. In this algorithm, a step captures
a subsequence of consecutive constant thresholds. First step of

Input Performance criteria pf c, existing monitoring constraint mdc, number of sam-

pling instances T required by the controller to attain pf c

Output Threshold Vector T h = { T h[i]: threshold required at ith sampling instance

to thwart false data injection attack}

⊲ Initialization

while ATTVECSYN(T h, pf c, mdc, T ) ∧ k 6= T do ⊲ Initial steps formation

∃i ∈ [1, T ] ∀ k ∈ [1, T ] i 6= k ∧ kzik ≥ kzkk
Steps[i] ← kzik;
∀1 ≤ j ≤ i, T h[j] ← Steps[i];k ← i;

T h ← N ULL; Steps ← N ULL;
if ATTVECSYN(T h, pf c, mdc, T ) then

1: function STEPWISETHRESHOLDSYN(pf c, mdc, T )
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:

∃i i < T ∧ T h[i] 6= 0 ∧ T h[i + 1] = 0;
∃k i < k < T ∀j i < j < T ∧ j 6= k ∧ kzj k ≤ kzkk ≤ T h[i];
Steps[k] ← kzkk;
∀i < j ≤ k T h[j] ← Steps[k];

k ←MINAREARECTANGLE(A,Steps,T );
∃p k < p < T ∀q k < q < T ∧ p 6= q ∧ Steps[p] ≤ kzkk ∧

while A ← ATTVECSYN(T h, pf c, mdc, T ) do ⊲ Reducing height of steps

Steps[q] ≤ kzkk ∧ Steps[p] ≥ Steps[q];

return T h

Steps[k] ← T h[k]; Steps[p] ← kzkk;
∀i k < i ≤ p, T h[i] ← Steps[p];

15:
16:
17:
18: function MINAREARECTANGLE(A,Steps′
19: MinArea ← ∞; MinAreaP ositon ← N ULL;
20:
21:
22:

for i = 1 to T do
Areai ← 0;
while ∃j i < j < T ∀k i < k < T ∧ j 6= k ∧ Steps′
[k] ∧ Steps′

[j] > kzik do;

Steps′

,T )

Areai ← Areai + (Steps′
Steps′
[j] ← N ULL;

[j] − kzik) × (j − i);

[j] ≥

if Areai < MinArea then

MinArea ← Area; MinAreaP osition ← i;

return MinAreaP osition;

Algorithm 3: Step-wise Threshold Synthesis

23:
24:
25:
26:
27:

Case 2a [Line 7 − 11]: Let i be the last step with non-zero
threshold (Line 8). To generate a new step after i, we ﬁnd
out the sampling instance k at which the maximum residue
is generated by the current attack vector such that k > i.
The record of new step edge Steps[k] = kzkk is added to
Steps vector (Line 10) and the new step is enforced by setting
∀ j ∈ (i, k], T h[j] = Steps[k] (Line 11). If the last step edge
is at i = T or no stealthy attack can be found that bypasses
the current threshold steps, we proceed to Case 2b to build
new steps by ﬁne-graining the existing ones.
Case 2b [Line 12 − 17]: In this case, we have two possibil-
ities. If no attack vector exists (Line 12), then the algorithm
terminates. If any attack is found that bypasses the current
detector threshold T h, heights of the existing steps need to be
reduced. Instead of diminishing the height of an entire step, we
break a portion or the whole step whichever involves minimum
effort i.e. the minimum area from under the threshold curve
that can be removed to detect the current attack. The function
MINAREARECTANGLE (Line 18 − 27) computes such mini-
mum area ensuring both staircase like structure and monotonic
decreasing property.

IV. CASE STUDY AND OBSERVATIONS

We demonstrate the efﬁcacy of our approach using a Ve-
hicle Stability Controller (VSC) case study. The VSC system
receives data from four wheel speed sensors (WSS), lateral

acceleration (Ay),
longitudinal acceleration (Ax), yaw rate
sensor (Yrs) and steering angle sensor (SaS). Generated ac-
tuator command is sent to the hydraulic unit of a vehicle.
Wheel speed sensors are hardwired between the wheels and
the controller unit. However, data from Ay, Ax, Yrs, SaS, along
with actuator signal, are transferred through CAN bus and is
considered vulnerable to attack. In this work, we use VSC
model of [10]. Sampling period is considered as Ts = 40ms.
Relevant variables are taken from [11]. We consider an attack
model where the attacker forges output of both Y rs and Ay
sensors. However, most modern automobiles have monitoring
systems already in place to detect any abnormal behavior
of VSC. We consider one such monitoring system which
performs the following checks for all measurements: 1) Range
and gradient based monitors check if range and gradient of
yaw rate γ and lateral acceleration ay are within permissible
limit; 2) Relation based monitor checks if difference between
measured yaw rate γ from Yrs and estimated yaw rate γest
from Ay is less than allowedDif f . An immediate violation of
both the schemes does not raise an alarm. It waits for certain
duration, called dead zone. Continuous violation during the
dead zone causes the monitoring system to raise an alarm.
The allowedDif f , range of γ, gradient of γ, range of ay and
gradient of ay are considered 0.035 rad/s, 0.2 rad/s, 0.175
rad/s2, 15 m/s2 and 2 m/s3 respectively. The dead zone is
considered to be 300 ms i.e. ⌊ 300
⌋ = 7 samples. We deﬁne
Ts
pf c of the system as: yaw rate must reach within 80% of
desired value within 50 sampling instances.

0.3

s
/
d
a
r

0.2

0.1

0
0

 under attack

20
40
Time(x40x10-3)(s)

(a) Plant state γ
[1]

-

est

allowed difference[1]

)
1

f
o

l

e
a
c
s
(

2

s
/
m

80

60

40

20

0

60

[1]

[1]

a

y

gradient of a

[2]

y

allowed range of a

[1]

y

allowed gradient of a

[2]

y

4

2

10

20
40
30
Time(x40x10-3)(s)

50

0
60

)
2

f

o

l

e
a
c
s
(

3

s
/
m

(b) Monitoring on ay
gradient of  [2]
allowed gradient of  [2]

allowed range of  [1]

)
1

f
o

l

e
a
c
s
(

s
/
d
a
r

0.3

0.2

0.1

0

0

0.2

0.1

10

20
40
30
Time(x40x10-3)(s)

(c) Monitoring on γ

50

0
60

)
2

f
o

l

e
a
c
s
(

2

s
/
d
a
R

Fig. 2: Attack demonstration on VSC

To verify whether this apparently efﬁcient monitoring sys-
tem can be bypassed by an attacker, we formulate an SMT
problem in Algorithm 1. We model all monitors as predicate
mdc in Algorithm 1. We include pf c and mdc in the assertion
clause A (Line 9 of Algorithm 1) and use the popular SMT
if
solver Z3 [12]. The output array A,
nonempty, reports attack vectors for the system. The effect
of one such synthesized vector for the VSC system is demon-
strated in Fig. 2a. The attack bypasses the existing monitoring

in Algorithm 1,

schemes (Fig. 2b,c). For mitigating these vulnerabilities, we
synthesize suitable residue based detectors using our methods.

l

6

2

8

4

0

10

50

40

60

d
o
h
s
e
r
h
T

20
30
Time(x40x10 -3)(s)

Pivot Based Threshold Synthesis
Step-wise Threshold Synthesis

Fig. 3: Output of variable
threshold synthesis Algorithms

With pf c, mdc of VSC
and T as input, we execute
Algorithms 2 and 3 with
a timeout of 12 hours for
each SMT call. Based on the
greedy choices made during
simulation, Algorithm 2 ter-
minates in the 56th round
while Algorithm 3 termi-
nates much faster,
in the
37th round. The ﬁnal threshold sets computed by both al-
gorithms are presented in Fig. 3. For comparison purpose,
we also synthesize a static threshold based detector for VSC.
We generate 1000 random measurement noise vectors of
bounded length with each value sampled from a suitably
small range such that pf c is maintained. Among these, we
discard the noise vectors that are detected by mdc. From the
remaining, we compute false alarm rate of the three threshold
based detectors as: a) 61.5% for Algorithm 2, b) 45.6% for
Algorithm 3, and c) 98.9% for static threshold based detector.
We can see that both our proposed algorithms outperform
static threshold based detector in terms of FAR.

V. CONCLUSION

In the present work, we provide a synthesis mechanism
for variable threshold based detectors in the context of se-
curing CPS implementations. Our approach, based on formal
techniques, can provide provable guarantees for an actual
controller implementation instead of probabilistic guarantees
as is standard for mathematical control models. In future, we
would like to perform more exhaustive experimental as well
as analytical evaluation of our proposed techniques.

REFERENCES

[1] S. Karnouskos, “Stuxnet worm impact on industrial cyber-physical

system security,” in IECON.

IEEE, 2011.

[2] J. Slay et al., “Lessons learned from the maroochy water breach,” in

ICCIP. Springer, 2007.

[3] R. Khan et al., “Threat analysis of blackenergy malware for synchropha-
sor based real-time control and monitoring in smart grid.” ICS-CSR,
vol. 16, pp. 1–11, 2016.

[4] Y. Shoukry et al., “Non-invasive spooﬁng attacks for anti-lock braking

systems,” in CHES. Springer, 2013.

authentication,” in CDC.

[5] I. Jovanov et al., “Secure state estimation with cumulative message
IEEE, 2018.
[6] Y. Liu, et al., “False data injection attacks against state estimation in
electric power grids,” ACM Transactions on Information and System
Security, vol. 14, no. 1, p. 13, 2011.

[7] H. Sandberg et al., “On security indices for state estimators in power

networks,” in SCS, Stockholm, 2010.

[8] Y. Mo and B. Sinopoli, “False data injection attacks in cyber physical

systems,” in SCS, Stockholm, 2010.

[9] A. J. Kerns et al., “Unmanned aircraft capture and control via gps
spooﬁng,” Journal of Field Robotics, vol. 31, no. 4, pp. 617–636, 2014.
[10] Y. Aoki et al., “Experimental demonstration of body slip angle control
based on a novel linear observer for electric vehicle,” in IECON.
IEEE,
2005.

[11] S. Zheng et al., “Controller design for vehicle stability enhancement,”

Control Engineering Practice, vol. 14, no. 12, pp. 1413–1421, 2006.

[12] L. De Moura et al., “Z3: An efﬁcient smt solver,” in TACAS. Springer,

2008.

 
 
 
 
 
 
 
 
 
