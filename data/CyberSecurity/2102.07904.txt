SK-Tree: a systematic malware detection algorithm
on streaming trees via the signature kernel

Thomas Cochrane, Peter Foster,
and Varun Chhabra
The Alan Turing Institute
{thomasc,pfoster,vchhabra}@turing.ac.uk

Maud Lemercier
University of Warwick
The Alan Turing Institute
maud.lemercier@warwick.ac.uk

Terry Lyons and Cristopher Salvi
University of Oxford
The Alan Turing Institute
{tlyons,salvi}@maths.ox.ac.uk

1
2
0
2

p
e
S
9
2

]

R
C
.
s
c
[

4
v
4
0
9
7
0
.
2
0
1
2
:
v
i
X
r
a

Abstract—The development of machine learning algorithms in
the cyber security domain has been impeded by the complex,
the data
hierarchical, sequential and multimodal nature of
involved. In this paper we introduce the notion of a streaming tree
as a generic data structure encompassing a large portion of real-
world cyber security data. Starting from host-based event logs
we represent computer processes as streaming trees that evolve
in continuous time. Leveraging the properties of the signature
kernel, a machine learning tool that recently emerged as a leading
technology for learning with complex sequences of data, we
develop the SK-Tree algorithm. SK-Tree is a supervised learning
method for systematic malware detection on streaming trees that
is robust to irregular sampling and high dimensionality of the
underlying streams. We demonstrate the effectiveness of SK-Tree
to detect malicious events on a portion of the publicly available
DARPA OpTC dataset, achieving an AUROC score of 98%.

Keywords— cyber security, path signature, kernel method,
sequential data, tree data-structure, process tree

I. INTRODUCTION

The design and deployment of sophisticated cyber-attacks such
as advanced persistent threats [1] has grown dramatically over
the last few years. This has been facilitated by the appearance
of new varieties of malware, and new adversary tactics and
techniques, which are designed to evade existing defensive
products used by enterprises such as anti-virus, ﬁrewalls and
intrusion detection systems. Modern cyber security systems
are generally rule-based and rely on a team of security
analysts monitoring network activities and manually investi-
gating suspected malicious activities, to determine the scope
of the potential threats. This investigation phase is particularly
labour-intensive. In order to defend against the inﬂux of new
malware variants and increasingly sophisticated attacks, it is
imperative to develop systematic mechanisms to detect them.
One of the main challenges in creating effective and systematic
malware detection systems is the complex nature of the
data. The relevant datasets consist of multimodal streams of
information, i.e. sequences of data generated by a large set
of heterogeneous sources (servers, routers, workstations etc.),
and representing various types of activity such as logons,
ﬁle accesses, and network connections. Such data streams are
often recorded at irregular intervals, span different time periods
and exhibit missing observations, all aspects that make the
design of systematic methods even more complicated.

A common characteristic of this data that cannot be ignored
in the analysis is their hierarchical structure. For example, a
given process may set off child processes, which themselves
may spawn more children, producing a process tree. In this
paper we account for how activity occurs within this tree-based
structure over time. Speciﬁcally we represent the behaviour of
computer processes, as observed in host-based event logs, as
streaming trees evolving in continuous time. A representation
of some selected channels of a single streaming tree is depicted
in Fig. 1. The notion of a streaming tree we introduce is a
fairly generic data structure encompassing a large portion of
real-world sequential data encountered in the cyber security
domain. The structure of a streaming tree is signiﬁcantly more
complex than that of a multivariate time series, as it accounts
for the hierarchy of the data; to our knowledge no systematic
method has been proposed in the literature (summarised in
Sec. II) to deal with such a data structure.
Our main contribution (Sec. III) is a systematic malware
detection algorithm on streaming trees that we call SK-Tree.
The core component of SK-Tree is the signature kernel,
a machine learning tool introduced in [2] that can process
complex sequences of data. The signature kernel is based on
the path-signature [3], [4] which is a well-known transform
from stochastic analysis that recently emerged as a leading
technology for learning with time series data. SK-Tree is to
our knowledge the ﬁrst systematic malware classiﬁcation al-
gorithm on streaming trees that is robust to irregular sampling
and missing data. We test SK-Tree (Sec. IV) on a portion
of the DARPA’s Operationally Transparent Cyber dataset [5],
which is available openly and one of the largest datasets
released to date, achieving an AUROC score of 98%. We make
our python implementation of SK-Tree publicly available at
https://github.com/crispitagorico/SK-Tree.

II. RELATED WORK

Many machine learning methods developed in the cyber secu-
rity literature have focused on the processing of network data,
with only few techniques having been designed to consume
host event data as we do in this work. Among publicly-
two released by Los Alamos National
available datasets,
Laboratory (LANL) are the most widely used [6], [7]. As far as
we are aware, our work is the ﬁrst to make use of the DARPA
OpTC dataset [5]. Compared to earlier datasets, events in

 
 
 
 
 
 
Fig. 1. Visual representation of selected channels of one single streaming tree. Each plot represents the evolution in time of the value of a given channel of
the streaming tree, on its various branches. A red dot indicates a point where the currently-tracked process sets off a child process, causing the tree to branch.

OpTC give a much more detailed summary of host activity, and
contain more varied red-team behaviour. The heterogeneity of
the data is one of the major bottlenecks.

On the one hand, some of the existing techniques aim to detect
malicious activity from streams of events without taking into
account any hierarchical structure. There has been a prolifera-
tion of work in anomaly detection for the purposes of ﬁnding
malicious activity [8]–[14]. In particular [10] took a host-based
approach and considered the authentication events in the 2015
LANL dataset using a RNN language model. Auto-encoders
were used in [15] to recognise lateral movement
through
a network manually engineer features based on conditional
probabilities deﬁned by event counts.

On the other hand, another line of thoughts tries to detect
malware or suspicious behaviour using the graph-like structure
of the data, but without taking into account the sequential
nature of the events. Utilised features include connections
between computers on a network or relations of processes to
those that they spawn. Tree and graph kernels were ﬁrst intro-
duced for malware analysis in [16], comparing the similarity of
subtrees and subgraphs respectively, and achieving promising
results on data obtained from a honeypot. Process trees were
further studied in [17], where structures from process trees
were compared against reference trees known to be non-
malicious. A similar technique was used by [18], comparing
star structures with templates extracted from uninfected trees.

III. METHOD

A. Streaming trees
A multivariate time series x of dimension d ∈ N is a collection
of points xi ∈ Rd−1 with corresponding time-stamps ti ∈ R
such that t0 < ... < tn and deﬁned as follows

x = ((t0, x0), (t1, x1), ..., (tn, xn))

(1)

A tree τ is deﬁned recursively as a tuple of the form
τ = (xτ , Fτ ), where xτ is a multivariate time series and
Fτ = (τ1, ..., τk) is a (possibly empty) collection of trees.
Concatenating to the time series xτ of a tree τ the values of the
time series xτ1, ..., xτk of its children subtrees τ1, ..., τk, and
repeating this operation recursively for each children subtree
τi, we end up with an equivalent representation of the tree τ as
a collection of branches τ = (x1
τ ), where each branch
xi
τ is a multivariate time series starting at t0. For the sequel,
it is important to keep both representations in mind.
Example 1. Consider the tree τ = (xτ , ((xτ1 , ∅), (xτ2, ∅))),
where ∅ denotes the empty list and where xτ , xτ1, xτ2 are the
following multivariate time series of dimension d

τ , ..., xn

xτ = ((t0, x0), (t1, x1), ..., (tn, xn))
xτ1 = ((tn+1, y0), (tn+2, y1), ..., (tn+i, yi−1))
xτ2 = ((tn+1, z0), (tn+2, z1), ..., (tn+j, zj−1))
It is easy to see that τ has two branches. Indeed, consider a
ﬁrst multivariate time series of dimension d

However, none of the aforementioned approaches are designed
to process complex data structures that are hierarchical and
sequential simultaneously. The main objective of this paper is
to provide a general procedure ﬂexible enough to handle such
complex data structures, formalised in the next section.

where

x1

τ = ((t0, x0), (t1, x1), ..., (tn+i, xn+i))

xk =

(cid:40)

xk,
yk−n−1,

if k ≤ n,
if n + 1 ≤ k ≤ n + i

05101520time0200400600800channel 105101520time05101520channel 205101520time020406080100120channel 405101520time020406080channel 505101520time020406080100120channel 705101520time0100200300channel 905101520time05101520channel 1305101520time0204060channel 14and a second multivariate time series of dimension d

x2

τ = ((t0, x0), (t1, x1), ..., (tn+j, xn+j))

where

xk =

(cid:40)

xk,
zk−n−1,

if k ≤ n,
if n + 1 ≤ k ≤ n + j

τ , x2

τ ) in

Then, τ has the equivalent representation τ = (x1
terms of its two branches x1

τ , x2
τ .
Given a multivariate time series x of the form of eq. (1), deﬁne
the path X : [t0, tn] → Rd as the the continous piecewise
linear interpolation of the data such that Xti = (ti, xi). A
streaming tree T is the data structure obtained by replacing
all the time series appearing in the deﬁnition of a tree τ (and in
all its children subtrees) by their continuous piecewise linear
interpolation. Analogously to the equivalent representation of
a tree in terms of its branches that we discussed above, a
streaming tree T can also be represented as a collection of
branches T = (X 1
T is the
continuous piecewise linear interpolation of the ith branch
xi
τ of the tree τ . The resulting branches X 1
T form
a collection of paths with common history.

T ) where each branch X i

T , ..., X n

T , ..., X n

Example 2. Consider again the same tree as in Example 1,
i.e. τ = (xτ , ((xτ1 , ∅), (xτ2, ∅))). We saw that τ can be
represented in terms of its two branches as τ = (x1
τ ).
[t0, tn+j] → Rd
Let X 1
T
τ , x2
be the continuous piecewise linear interpolation of x1
τ
respectively. Then the streaming tree T can be represented
in terms of its two branches as T = (X 1

[t0, tn+i] → Rd and X 2
T

τ , x2

:

:

T , X 2

T ).

B. The signature

Here we describe a well-known path-transform called the
signature that allows us to extract meaningful features from
a multivariate time series in a systematic way. The signature
has been deployed as a machine learning tool in many data
science applications dealing with sequential data [19]–[22].
For any coordinate α ∈ {1, ..., d} and any continuous piece-
wise linear path X : [0, T ] → Rd we denote its αth channel
by X (α) so that at any time t ∈ [0, T ]

X(t) = (X (1)(t), ..., X (d)(t)).

(2)

We denote by X the set of all continuous piecewise linear
paths with values in Rd. The signature S : X → H is a
feature map deﬁned for any path X ∈ X as the following
inﬁnite collection of features [3]
S(X)(α1)(cid:111)d
(cid:16)
(cid:110)
S(X)(α1,α2)(cid:111)d
(cid:110)
S(X)(α1,α2,α3)(cid:111)d
(cid:110)

S(X) =

α1,α2=1

α1=1

, ...

1,

(3)

(cid:17)

,

,

α1,α2,α3=1

where every term is a scalar deﬁned as the iterated integral

S(X)(α1,...,αj ) =

(cid:90)

(cid:90)

...

dX (α1)(s1)...dX (αj )(sj)

(4)

0<s1<...<sj <T

The feature space H associated to the signature is a Hilbert
space deﬁned as the direct sum of tensor powers of Rd

∞
(cid:77)

(Rd)⊗k = R ⊕ Rd ⊕ (Rd)⊗2 ⊕ ...

H =

(5)

k=0

where ⊗ denotes the outer product [4].

C. The expected signature

Here we describe another transform for sequential data called
the expected signature that generalises the signature in the
sense that it allows to extract useful features from an ensemble
of time series. The sequence of moments (E[Z ⊗m])m≥0 of
any ﬁnite dimensional random variable Z is classically known
to characterize its law µZ = P ◦ Z −1. It turns out that in
the inﬁnite dimensional case of path-valued random variables
an analogous result holds [23]; it says that one can fully
characterise such path-valued random variables by replacing
moments by the expected signature, that we deﬁne next.
Assume that X is compact and let µ be a probability measure
supported on X . The expected signature of µ is deﬁned as the
following inﬁnite collection of statistics
(cid:110)
ES(µ)(α1)(cid:111)d
ES(µ)(α1,α2)(cid:111)d
(cid:110)
(cid:110)
ES(µ)(α1,α2,α3)(cid:111)d

ES(µ) =

α1,α2=1

α1=1

, ...

1,

(cid:16)

(cid:17)

,

,

α1,α2,α3=1

where each term is a scalar deﬁned as the following integral

ES(µ)(α1,...,αj ) =

(cid:90)

X∈X

S(X)(α1,...,αk)µ(dX).

(6)

As explained in section III-A, a streaming tree T can be rep-
resented in terms of its branches as a collection of continuous
piecewise linear paths T = (X 1
T ). Denoting by δX i
the Dirac measure indexed on the path X i
T we can represent
the streaming tree T as the following empirical measure

T , ..., X n

T

µT =

1
n

n
(cid:88)

i=1

δX i

T

(7)

We refer the reader to [24] for further details on the proba-
bilistic setup. Therefore, any streaming tree T can be faithfully
represented by means of its expected signature ES(µT ). Given
the special recursive structure of a streaming tree as collection
of paths with common history, the expected signature ES(µT )
can be computed via a convenient recursive formula: consider
a streaming tree T = (XT , FT ), where FT = (T1, ..., Tn) is
a (possibly empty) list of streaming trees. Then, the expected
signature ES(µT ) satisﬁes the following recursive formula

ES(µT ) =

(cid:40)

S(XT ),
(cid:80)n
1
n

i=1 S(XT ) ⊗ ES(µTi), otherwise

if FT = ∅,

(8)

where S(XT ) is the signature of the path XT , ∅ is the
empty list, ⊗ is the outer product and ES(µTi) is the expected
signature of the streaming tree Ti.

D. A measure of similarity between streaming trees

Consider two streaming trees T1 and T2 with corresponding
probability measures µT1 and µT2 . An appropriate measure
of similarity between the trees T1 and T2 can be obtained by
considering a distance between the probability measures µT1
and µT2 . The maximum mean discrepancy (MMD) distance
between µT1 and µT2 is deﬁned as

dMMD(µT1, µT2) = sup
f ∈G

(cid:12)
(cid:12)EµT1

[f (XT1)] − EµT2

[f (XT2)](cid:12)

(cid:12) (9)

where XTi ∼ µTi
is a sample path from the probability
measure µTi (for i = 1, 2), where G is a space of real valued
functions on the path space X deﬁned as the unit ball of the
reproducing kernel Hilbert space (RKHS) Hk associated to an
appropriate kernel on paths k : X × X → R, in other words

G = {f : X → R : ||f ||Hk ≤ 1}

(10)

For a detailed account of RKHSs and MMD distance we refer
the interested reader to [25]. Thanks to the main result in [25],
the MMD distance of equation (9) can be expressed as the sum
of the following three terms

dMMD(µT1 , µT2 )2 = E(µT1 ,µT1 )[k(XT1, (cid:101)XT1)]
+ E(µT2 ,µT2 )[k(XT2, (cid:101)XT2)]
− 2E(µT1 ,µT2 )[k(XT1 , XT2)]

(11)

where each term is expressed in terms of sample paths from
the underlying measures µT1 , µT2 and kernel evaluations on
those samples. If the streaming tree T1 = (X 1
, ..., X m
) has
T1
T1
, ..., X n
m branches and the streaming tree T2 = (X 1
) has n
T2
T2
branches, the MMD distance can be computed explicitly as

1
m(m − 1)

m
(cid:88)

m
(cid:88)

k(X i
T1

, X j
T1

)

dMMD(µT1 , µT2 )2 =

+

−

i=1
n
(cid:88)

j(cid:54)=i
n
(cid:88)

1
n(n − 1)

j(cid:54)=i

i=1
n
(cid:88)

m
(cid:88)

i=1

j=1

2
mn

k(X i
T2

, X j
T2

)

k(X i
T1

, X j
T2

)

(12)

Therefore, in order to quantify the similarity between two
streaming trees T1, T2 using (12) it is paramount to specify
an appropriate kernel k acting on paths from X .

E. The signature kernel
The signature kernel k : X × X → R is a reproducing kernel
associated to the signature feature map S and deﬁned for any
pair of paths X : [0, T ] → Rd and Y : [0, T ] → Rd as the
following inner product [23]

k(X, Y ) = (cid:104)S(X), S(Y )(cid:105)H

(13)

In the recent article [26] the authors show that the signature
kernel can be computed explicitly; they provide a kernel trick
for the signature kernel by proving the following relation

k(X, Y ) = U (T, T )

(14)

where the function U : [0, T ] × [0, T ] → R is the solution of
the following partial differential equation (PDE)

∂2U
∂s∂t

=

∂2κ(X(s), Y (t))
∂s∂t

U

(15)

with boundary conditions U (0, ·) = 1 and U (·, 0) = 1, where
κ : Rd × Rd → R is any base kernel on Rd. In this paper
we will be using the Gaussian RBF kernel as base kernel κ.
Therefore, the MMD distance between two streaming trees
T1, T2 can be computed explicitly via equation (12). We will
make use of this distance in our malware detection algorithm
SK-Tree that we introduce next.

F. SK-Tree: a kernel based malware detection algorithm

In [24] the authors construct a universal kernel indexed on
probability measures on paths deﬁned as a combination of
the signature kernel, MMD distance of equation (9), and a
Gaussian kernel. Given the representation of a streaming tree
as a probability measure on paths, we can leverage their
construction and propose the following kernel for streaming
trees: let T1 = (X 1
) be two
T1
streaming trees with associated probability measures µT1, µT2
respectively. We deﬁne the kernel kσ on streaming trees as
kσ(µT1, µT2) = exp (cid:0)−σ2dMMD(µT1, µT2)2(cid:1)

) and T2 = (X 1
T1

, ..., X n
T1

, ..., X m
T1

(16)

where σ > 0 is a scalar hyperparameter. By equation (12),
the kernel kσ can be explicitly computed by evaluating the
signature kernel k at the branches of T1, T2 as follows

kσ(µT1, µT2) = exp

(cid:16)

−

−

+

σ2
m(m − 1)

m
(cid:88)

m
(cid:88)

k(X i
T1

, X j
T1

)

i=1
n
(cid:88)

j(cid:54)=i
n
(cid:88)

σ2
n(n − 1)

j(cid:54)=i

i=1
n
(cid:88)

m
(cid:88)

i=1

j=1

2σ2
mn

k(X i
T2

, X j
T2

)

k(X i
T1

(cid:17)

, X j
T2

)

(17)

Performing classiﬁcation (or regression) tasks on streaming
trees is easily achieved thanks to the explicit expression of
the kernel kσ as per equation (17). In this paper we are
interested in binary classiﬁcation of streaming trees as non-
malicious (class 0) or malicious (class 1) events. We are given
a dataset of input-output pairs {Ti, yi}M
i=1 where the inputs
Ti are streaming trees and the outputs yi are in {0, 1}. To
carry out the classiﬁcation we make use of a support vector
machine (SVM) classiﬁer [27] equipped with the kernel kσ on
streaming trees of equation (17). The binary SVM classiﬁca-
tion algorithm aims at solving the following minimisation

min
f ∈Hkσ

M
(cid:88)

i=1

L(yi, f (Ti)) + λ||f ||Hkσ

(18)

where L(yi, f (xi)) = max(0, 1 − yif (xi)), and λ is the
penalty hyperparameter. Following [28], the optimal solution

to this minimisation can be expressed in terms of the kernel
kσ as follows: for any streaming tree T

f ∗(T ) = sgn

(cid:16)

α0 +

M
(cid:88)

i=1

yiαikσ(T , Ti)

(cid:17)

(19)

where αi are scalar coefﬁcients computed from solving a
quadratic programming problem. Our algorithm, that we call
SK-Tree, consists of an SVM classiﬁer that uses the Gram
matrix associated to the kernel kσ and computed via Algorithm
1. In the latter, PDESolve stands for a call to a PDE solver to
evaluate the signature kernel k (see Sec. III-E) and the notation
0m×n indicates the zero-matrix in Rm×n. We implemented the
full SK-Tree algorithm as a ready-to-use estimator using the
popular python library scikit-learn [29] and we make it pub-
licly available at https://github.com/crispitagorico/SK-Tree.

Algorithm 1 SK-Tree Gram matrix

(cid:110)

(cid:16)

Ti =

1: Input: M str. trees
2: Initialize G ← 0M ×M
3: for each pair (i, j) ∈ {1, ..., M }2 do
4:

X 1
Ti

, ..., X ki
Ti

(cid:17)(cid:111)M

i=1

, σ > 0

Initialize K1 ← 0ki×ki , K2 ← 0kj ×kj , K3 ← 0ki×kj
for (p, q) ∈ {1, ..., ki}2 do

K1[p, q] ← PDESolve(X p
Ti

, X q
Ti

)

for (p, q) ∈ {1, ..., kj}2 do

K2[p, q] ← PDESolve(X p
Tj

, X q
Tj

)

for (p, q) ∈ {1, ..., ki} × {1, ..., kj} do

K3[p, q] ← PDESolve(X p
Ti
ki(ki−1) + sum(K2)

, X q
Tj
kj (kj −1) − 2 × sum(K3)

G[i, j] ← sum(K1)

kikj

)

5:

6:

7:
8:

9:
10:

11:

12: G ← exp(−σ2G)
13: Output: The Gram matrix G.

IV. DATA AND EXPERIMENTS

The Operationally Transparent Cyber (OpTC) dataset [5] was
released by DARPA in June 2020. It consists of data collected
from an isolated network of 1000 hosts over a multi-day
period. We use OpTC’s ecar data, which records endpoint
activity in an extended CAR format based on MITRE’s CAR
data model [30]. For example, a process creation event appears
as follows (some ﬁelds omitted for clarity):

{"action":"CREATE",
"actorID":"437acfc7-d9ef-4c60-a108-...",
"hostname":"SysClient0201.systemia.com",
"object":"PROCESS",
"objectID":"b9d06a48-0968-4bda-b743-...",
"properties":...,
"timestamp":1569245579591}

A. Modelling the data as streaming trees

These events can be interpreted as trees in a natural way,
where each branch follows the events that are associated
with a particular process. At a process creation event, the
tree splits into two branches: one following the continuing
parent process, the other following the new child process.
Speciﬁcally, we produce a tree in 23 dimensions:

• The ﬁrst dimension represents time.
• The next two dimensions encode the structure of the
process tree: they represent the depth in the tree, and
the number of processes that this branch has set off. At a
process creation event, the child branch and parent branch
immediately increment in these dimensions respectively.
• We take 20 other types of events deﬁned by (object, ac-
tion) pairs, eg (MODULE, LOAD) or (FILE, DELETE).
Each event type is associated a dimension. Whenever an
event of this type is observed along a branch, the branch
increments in the appropriate dimension.

The method easily extends to other sources of host data: the
only requirement is that process creation events are logged
(including the identity of the parent and child processes),
enabling a process tree to be built. Even in the OpTC ecar data
there is much more information available in the properties
of each event: e.g. the identities of processes and ﬁles; source
and destination ports of network connections. We currently
ignore these properties, but they could be used to select a set
of event types that better summarises the data.

B. Results

The vast majority of activity in the OpTC dataset is benign:
this activity continues throughout the period. However on three
days, red-team attackers are active on the network, providing
a source of known malicious activity that we aim to detect.
The attackers’ actions are detailed in a PDF document that
accompanies the OpTC dataset. We take all processes that
correspond to activity listed in the document, together with
their descendants, and mark these processes as malicious.
To form the trees, we take all activity on the ﬁrst day of mali-
cious activity from host 0201 (since this host has the greatest
proportion of malicious activity). We split each process into
15-minute windows of activity and create a streaming tree for
each. The associated label is 1 if the root process is malicious,
0 otherwise. All branches are scaled to have mean 0, sd 1. We
discard any tree with fewer than 2 or more than 200 events.
As a result, the ﬁnal dataset contains 4 199 streaming trees.
The SK-Tree binary classiﬁer is run on random 5 fold train-
test partitions and we report the mean and standard deviation
of the AUROC score on Fig. 2. The hyperparameters of SK-
Tree are selected by cross-validation via a grid search on the
training set of each fold. As it can be observed, we achieve a
98% AUROC score.

Here actorID and objectID uniquely identify the parent
and child processes. In events of other types, such as ﬁle and
network activity, the actorID similarly provides a unique
identiﬁer of the process responsible for the event.

V. CONCLUSION
In this paper we introduced the notion of a streaming tree to
describe computer process activity as a generic data struc-
ture that encompasses most of the complex, hierarchical,

[9] M. Whitehouse, M. Evangelou, and N. M. Adams, “Activity-based
temporal anomaly detection in enterprise-cyber security,” in 2016 IEEE
Conference on Intelligence and Security Informatics (ISI).
IEEE, 2016,
pp. 248–250.

[10] A. Brown, A. Tuor, B. Hutchinson, and N. Nichols, “Recurrent neural
network attention mechanisms for interpretable system log anomaly
detection,” in Proceedings of the First Workshop on Machine Learning
for Computing Systems, 2018, pp. 1–8.

[11] E. Riddle-Workman, M. Evangelou, and N. M. Adams, “Adaptive
anomaly detection on network data streams,” in 2018 IEEE International
Conference on Intelligence and Security Informatics (ISI).
IEEE, 2018,
pp. 19–24.

[12] M. E. Eren, J. S. Moore, and B. S. Alexandro, “Multi-dimensional
anomalous entity detection via poisson tensor factorization,” in 2020
IEEE International Conference on Intelligence and Security Informatics
(ISI).

IEEE, 2020, pp. 1–6.

[13] A. Tuor, S. Kaplan, B. Hutchinson, N. Nichols, and S. Robinson,
“Deep learning for unsupervised insider threat detection in structured
cybersecurity data streams,” arXiv preprint arXiv:1710.00811, 2017.

[14] F. S. Passino and N. A. Heard, “Classiﬁcation of periodic arrivals in
event time data for ﬁltering computer network trafﬁc,” Statistics and
Computing, vol. 30, no. 5, pp. 1241–1254, 2020.

[15] R. Holt, S. Aubrey, A. DeVille, W. Haight, T. Gary, and Q. Wang, “Deep
autoencoder neural networks for detecting lateral movement in computer
networks,” in Proceedings on the International Conference on Artiﬁcial
Intelligence (ICAI). The Steering Committee of The World Congress
in Computer Science, Computer . . . , 2019, pp. 277–283.

[16] C. Wagner, G. Wagener, R. State, and T. Engel, “Malware analysis with
graph kernels and support vector machines,” in 2009 4th International
Conference on Malicious and Unwanted Software (Malware).
IEEE,
2009, pp. 63–68.

[17] K. Wijands, “Detecting malware using process tree and process activity

data,” Master’s thesis, Technische Universiteit Delft, 2015.

[18] R. Luh and S. Schrittwieser, “Advanced threat intelligence: detection
and classiﬁcation of anomalous behaviour in system processes,” Elek-
trotechnik & Informationstechnik, vol. 137, pp. 38–44, 2020.

[19] I. P. Arribas, G. M. Goodwin, J. R. Geddes, T. Lyons, and K. E.
Saunders, “A signature-based machine learning model for distinguish-
ing bipolar disorder and borderline personality disorder,” Translational
psychiatry, vol. 8, no. 1, pp. 1–7, 2018.

[20] J. Kalsi, T. Lyons, and I. P. Arribas, “Optimal execution with rough path
signatures,” SIAM Journal on Financial Mathematics, vol. 11, no. 2, pp.
470–493, 2020.

[21] P. Moore, T. Lyons, J. Gallacher, and A. D. N. Initiative, “Using path
signatures to predict a diagnosis of alzheimer’s disease,” PloS one,
vol. 14, no. 9, p. e0222212, 2019.

[22] C. Li, X. Zhang, L. Liao, L. Jin, and W. Yang, “Skeleton-based gesture
recognition using several fully connected layers with path signature
features and temporal transformer module,” in Proceedings of the AAAI
Conference on Artiﬁcial Intelligence, vol. 33, no. 01, 2019, pp. 8585–
8593.

[23] I. Chevyrev and H. Oberhauser, “Signature moments to characterize laws
of stochastic processes,” arXiv preprint arXiv:1810.10971, 2018.
[24] M. Lemercier, C. Salvi, T. Damoulas, E. V. Bonilla, and T. Lyons,
“Distribution regression for continuous-time processes via the expected
signature,” in Artiﬁcial Intelligence and Statistics (AISTATS), 2021.
[25] A. Gretton, K. M. Borgwardt, M. J. Rasch, B. Sch¨olkopf, and A. Smola,
“A kernel two-sample test,” Journal of Machine Learning Research,
vol. 13, no. Mar, pp. 723–773, 2012.

[26] T. Cass, T. Lyons, C. Salvi, and W. Yang, “Computing the full sig-
nature kernel as the solution of a goursat problem,” arXiv preprint
arXiv:2006.14794, 2020.

[27] L. Wang, Support vector machines: theory and applications. Springer

Science & Business Media, 2005, vol. 177.

[28] B. Scholkopf and A. J. Smola, Learning with kernels: support vector
machines, regularization, optimization, and beyond. Adaptive Compu-
tation and Machine Learning series, 2018.

[29] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion,
O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vander-
plas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duch-
esnay, “Scikit-learn: Machine learning in Python,” Journal of Machine
Learning Research, vol. 12, pp. 2825–2830, 2011.

[30] MITRE. CAR data model. [Online]. Available: https://car.mitre.org/

data model/

Fig. 2. ROC evaluation of the SK-Tree binary classiﬁer on the OpTC data

sequential and multimodal nature of the data involved. We
then introduced SK-Tree, a new supervised learning method
for systematic malware detection on streaming trees that is
robust to the irregular sampling and high dimensionality of
the underlying streams. SK-Tree is based on the signature
kernel, which recently emerged as a leading machine learning
tool for learning with complex sequences of data. We ﬁnally
demonstrated the effectiveness of SK-Tree at detecting ma-
licious events on a portion of the publicly available OpTC
dataset [5] achieving a AUROC score of 98%.

ACKNOWLEDGEMENT

C.S. was supported by the EPSRC grant EP/R513295/1.
M.L. was supported by the OxWaSP CDT EPSRC grant
EP/L016710/1. All authors were supported by the Alan Tur-
ing Institute under the EPSRC grant EP/N510129/1 and the
Defence and Security Programme and by DataSig under the
EPSRC grant EP/S026347/1.

REFERENCES

[1] P. Chen, L. Desmet, and C. Huygens, “A study on advanced persistent
threats,” in IFIP International Conference on Communications and
Multimedia Security. Springer, 2014, pp. 63–72.

[2] F. J. Kir´aly and H. Oberhauser, “Kernels for sequentially ordered data,”
Journal of Machine Learning Research, vol. 20, no. 31, pp. 1–45, 2019.
[3] I. Chevyrev and A. Kormilitzin, “A primer on the signature method in

machine learning,” arXiv preprint arXiv:1603.03788, 2016.

[4] T. J. Lyons, M. Caruana, and T. L´evy, Differential equations driven by

rough paths. Springer, 2007.

[5] DARPA. (2020) Operationally Transparent Cyber data release. [Online].

Available: https://github.com/FiveDirections/OpTC-data

[6] A. D. Kent, “Comprehensive, Multi-Source Cyber-Security Events,” Los

Alamos National Laboratory, 2015.

[7] M. J. M. Turcotte, A. D. Kent, and C. Hash, Uniﬁed Host and Network

Data Set. World Scientiﬁc, Nov 2018, ch. 1, pp. 1–22.

[8] A. Walker and S. Sengupta, “Malware family ﬁngerprinting through
behavioral analysis,” in 2020 IEEE International Conference on Intelli-
gence and Security Informatics (ISI).

IEEE, 2020, pp. 1–5.

0.00.20.40.60.81.0False Positive Rate0.00.20.40.60.81.0True Positive RateSK-Tree malware detection ROCROC fold 0 (AUC = 0.95)ROC fold 1 (AUC = 1.00)ROC fold 2 (AUC = 1.00)ROC fold 3 (AUC = 0.99)ROC fold 4 (AUC = 0.99)ChanceMean ROC (AUC = 0.98 ± 0.02)± 1 std. dev.