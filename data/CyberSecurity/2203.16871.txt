Ransomware Detection using Process Memory 

Avinash Singh1, Richard Adeyemi Ikuesan2 and Hein Venter1 
1University of Pretoria, South Africa 
2Community College Qatar, Doha, Qatar 
asingh@cs.up.ac.za 
richard.ikuesan@ccq.edu.qa 
hventer@cs.up.ac.za  

Abstract: Ransomware attacks have increased significantly in recent years, causing great destruction and damage to critical 
systems and business operations. Attackers are unfailingly finding innovative ways to bypass detection mechanisms, which 
encouraged the adoption of artificial intelligence. However, most research summarizes the general features of AI and induces 
many false positives, as the behavior of ransomware constantly differs to bypass detection. Focusing on the key indicating 
features of ransomware becomes vital as this guides the investigator to the inner workings and main function of ransomware 
itself. By utilizing access privileges in process memory, the main function of the ransomware can be detected more easily 
and  accurately.  Furthermore,  new  signatures  and  fingerprints  of  ransomware  families  can  be  identified  to  classify  novel 
ransomware attacks correctly. The current research  used the process memory access privileges  of the different memory 
regions of the behavior of an executable to quickly determine its intent before serious harm can occur. To achieve this aim, 
several well-known machine learning algorithms were explored with an accuracy range of 81.38% – 96.28%. The study thus 
confirms the feasibility of utilizing process memory as a detection mechanism for ransomware. 

Keywords: Ransomware detection, process memory, memory-based malware analysis, machine learning, Cuckoo Sandbox 

1.  Introduction 

Detecting ransomware attacks has always been a significant problem for organizations (Singh, Ikuesan & Venter, 
2019a,b). Ransomware is the most dominant form of malware that causes major disruptions to daily business 
operations  (Hampton,  Baig  &  Zeadally,  2018;  Newman,  2018;  Sienko,  2021).  The  primary  objective  of 
ransomware is to encrypt sensitive files and hold the decryption of those files as a ransom for large amounts of 
money  (Singh  et  al.,  2019a).  In  most  instances,  ransomware  is  delivered  through  major  exploits  or  social 
engineering. According to the State of Ransomware 2021 report (Sophos, 2021), 54% of organizations that were 
hit by ransomware had their data encrypted. However, it is estimated that the average ransom payment made 
by  mid-sized  organizations  was  approximately  USD  170,404  (Sophos,  2021).  The  report  (Sophos,  2021)  also 
calculated the average cost to recover from a ransomware attack to be around USD 1.8 million. Despite such 
attacks being a growing concern, the good news is that they have decreased slightly since 2017. This was the 
time when WannaCry wreaked havoc over the internet with more than 54% of organizations hit, but the number 
of attacks gradually decreased to around 51% in 2020 and 37% in 2021 (Sophos, 2021).  

An  alarming  fact  in  the  Sophos  (2021)  report  is  that  47%  of  respondents  expected  ransomware  to  hit  their 
organization  because  “Ransomware  attacks  are  increasingly  hard  to  stop  due  to  their  sophistication”.  Even 
though recovery from ransomware attacks has increased through implicit and immutable backups, there have 
been significant improvements in methods to detect ransomware attacks. Unfortunately, these methods are 
easily  bypassed  by sophisticated  ransomware,  which  leaves  security  researchers  in  disarray  to  find  effective 
detection methods. For instance, to achieve speed and efficiency in detection, anti-virus programs use static and 
signature-based  detection  methods.  Static  analysis  is  limited  to  known  signatures  and  snippets  of  codes. 
Furthermore,  the  concept  of  signature-based  detection  suggests  that  only  known  attributes  and  unique 
behaviour  can  be  identified.  Thus,  both  signature-based  and  static  analysis  are  not  efficient  against  novel 
ransomware, making these  methods inefficient  in detecting ransomware attacks. This  is due to ransomware 
being more behavioural based. Since ransomware utilizes security features like encryption, it is difficult to detect 
new never-seen-before ransomware (Bromium Labs, Kotov & Rajpal, 2014). To solve these issues, researchers 
have adopted Artificial Intelligence (AI) to detect ransomware attacks more accurately. However, there are many 
ways AI can be used to detect ransomware, and many researchers make use of automated feature extraction. 
Certain aspects may sometimes be overlooked, as the features are sourced from techniques and patterns/trends 
seen in the dataset that the researchers have – thus making it less accurate or slightly biased. It is important for 
experts or through rigorous experimentation to identify and hand select features that would provide the most 
insight and that cannot be mocked or influenced. In this paper, process memory was examined to determine 

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 413 
 
 
 
 
Avinash Singh, Richard Adeyemi Ikuesan and Hein Venter 

how accurately it can detect ransomware. Process memory is behaviour-based and one of the core functions of 
ransomware to encrypt files (Subedi, Budhathoki & Dasgupta, 2018).  

Going  forward,  Section  2  provides  the  necessary  background  and  related  works,  while  Section  3  details  the 
proposed method and results of ransomware detection. Section 4 evaluates the performance of the proposed 
method. The conclusion and future works are presented in Section 5. 

2.  Related Work 

Over the years, significant advances have been made in ransomware detection, especially after the devastation 
that WannaCry caused in 2017 (Adamov & Carlsson, 2017; Berrueta, Morato, Magana, et al., 2020; Fernando, 
Komninos  &  Chen,  2020;  Molina,  Torabi,  Sarieddine,  et  al.,  2021;  Singh  et  al.,  2019a).  Although  researchers 
explored avenues for detection such as static and dynamic information, ransomware has managed to evade 
static  analysis  (Subedi  et  al.,  2018).  Due  to  this  limitation,  typically  active  behavioural-based  detection 
techniques are used, such as API calls, registry information, opcodes, manual analysis, and dissection (Molina et 
al., 2021). Manual analysis is quite time-consuming and has led to several sandbox environments with analysis 
packages like Cuckoo Sandbox (Guarnieri, 2014), which is widely used by security researchers. Machine Learning 
(ML) has been widely utilized for the detection of malware as well as ransomware (Dang, Di Troia & Stamp, 2021; 
Dua & Du, 2016; Singh & Singh, 2021). For example, Blackberry Cylance Anti-Virus leverages ML techniques to 
provide  more  robust  production  against  unknown  attacks  (BlackBerry,  2021).  This  causes  challenges  with 
detection  rates  and  the  way  detection  happens,  as  researchers  were  able  to  bypass  Cylance  protection 
(SCMagazine, 2019). There is a plethora of research that uses various features for ransomware detection, for 
example, the work by Ashraf et al. (2019) explores static and dynamic information for detection such as API calls, 
registry, file operations, strings, DLLs. Using these features, Ashraf et al. (2019) managed to obtain an accuracy 
of 92% for a support vector machine and 91% for a random forest using the dynamic information. The work by 
Fernando,  Komninos,  and  Chen  (2020)  explored  many  ML  algorithms  that  produced  accuracies  of  between 
33.1% and 96.4%, with the lowest being an SVM and the highest being a multi-layer perceptron with 10 hidden 
layers.   

Findings in Arabo et al. (2017) explored malware detection using memory analysis of API calls, DLLs, process 
handles, network, code injection, and privilege as features in their dataset. The results obtained ranged from 
95.94% to 98.50%, with the lowest being a random forest and the highest an SVM. However, the results for the 
random forest had a recall of 87.68%, which means it did not perform well in prediction. The SVM classifier on 
the other hand performed well and gave a low false-positive rate and recall. The study considered weighted 
features and had a large dataset  of 3468 records. Similarly, Grégio et al. (2013) explored memory writes for 
malware classification and code-reuse identification. Clustering techniques were explored with a precision value 
of 84.3% using pre- and inter-clustering. To the best of the Author’s knowledge, no research has been done using 
process memory specifically, rather process behaviour as seen in the work by Arabo et al. (2017). Their work 
involved collecting computer metrics such as the CPU, RAM, and disk usage, as well as the API calls and files 
open. The results of Arabo et al. (2017) were extremely poor and ranged from 52.85% for a neural network to 
75.01% for a random forest. Existing literature (Dang et al., 2021; Molina et al., 2021; Rughani, 2017; Shah & 
Issac, 2018) shows there has been great reliance on the following ML algorithms: neural network; k-nearest 
neighbours; decision tree; random forest; Naïve Bayes; SVM; and boosted learners.  

Exploring process memory specifically has been overlooked in the research space, since more data-rich features 
were available. However, these data-rich features often pose a degree of bias or allow attackers to easily bypass 
detection methods through deterrence mechanisms and obfuscation (Bashari Rad, Masrom & Ibrahim, 2012; 
Grégio et al., 2013). Process memory can help identify the inner workings of any executable and with the power 
of machine learning, this can become simpler thereby minimizing manual analysis of large amounts of data. The 
current  research  paper  aims  to  leverage  process  memory  to  distinguish  ransomware  more  accurately  from 
benignware. It also aims towards active detection without the need of utilizing a sandboxed environment. 

3.  Ransomware Detection using Process Memory 

The proposed method of ransomware detection involved exploring the different memory regions that occur in 
process memory. The overall process employed in this research is modelled and shown in Figure 1. The process 
model  starts  with  capturing  the  process's  memory  using  the  Cuckoo  Sandbox  (Guarnieri,  2014).  Thereafter, 
Cuckoo runs a default reporting module that analyses the collected memory dump and produces a raw report 

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 414 
 
 
Avinash Singh, Richard Adeyemi Ikuesan and Hein Venter 

with each memory region from process memory along with metadata. The access privileges that are occurring 
in  each  memory  region  are  captured  from  each  region.  These  privileges  include  Read  (r),  Read/Write  (rw), 
Read/Execute  (rx),  Read/Write/Copy  (rwc),  Read/Write/Execute  (rwx)  and  Read/Write/Execute/Copy  (rwxc). 
The privileges determine what operations and what types of data are stored in memory to help find patterns in 
subroutines that can be attributed to specific operations. For example, if a segment within the memory region 
has an access privilege of rx and the type is code, this could be a subroutine involved with reading a file and then 
performing some computation on it. However, the privilege levels include several aspects, and one of the most 
interesting and rarely seen privileges is rwxc. Using this highest privilege level could mean that the executable 
can persist, extract, and execute code in memory. On the other hand, Read/Write/Execute (rwx) could indicate 
a  dynamic  subroutine-like  encryption  cipher.  Process  memory  consists  of  many  segments  within  a  memory 
region and therefore the approach adopted in this research is a summation of each segment's privileges per 
memory  region.  Once  the  data  has  been  collected,  the  next  phase  is to  conduct  the  Machine  Learning  (ML) 
exploratory phase, which involves exploring various ML techniques for classification. The techniques this study 
explored are classifiers such as decision tree, random forest, gradient boost, XGBoost, tree ensemble, neural 
network, Naïve Bayes, and support vector machine (Fernando et al., 2020). These algorithms were tested to see 
which provides the best accuracy in detecting ransomware and produces the least number of false negatives.  

Figure 1: Ransomware Detection Process Model using Processor Memory 

The  subsections  below  discuss  how  the  data  was  collected  and  pre-processed  for  the  machine  learning 
exploration phase. The results from the machine learning phase are also discussed. 

3.1  Dataset   
The  most  important  aspect  of  machine  learning  is  the  feature  engineering.  Having  enough  information  that 
represents all classes is extremely important to ensure a fair result in the learning phase. For this purpose, two 
classes were chosen for detection, namely benign and malicious.  

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 415 
 
Avinash Singh, Richard Adeyemi Ikuesan and Hein Venter 

3.1.1  Data Acquisition and Extraction Process 
Acquiring the data involved a major process, which had to be done manually as there are no existing datasets 
that comprise process memory. Benign samples were obtained from various sources, with most originating from 
Portable  Apps  (Haller,  2021).  A  total  of  354  benign  samples  were  collected  across  different  categories  of 
executables.  The  categories  explored  were  accessibility,  development,  education,  games,  image  software, 
music/video software, office, security, utilities, internet, encryption, and general-purpose. These benign samples 
were taken at random from each category.  

Malicious samples were sourced mainly from Malware Bazaar (Abuse.ch, 2020) and theZoo (Yuval Nativ, 2015). 
A total of 117 ransomware samples were sourced from over 70 categories of ransomware families. A snippet of 
the breakdown of each benign sample and malicious ransomware category is given in Table 1. The full dataset 
can be found at https://github.com/ICFL-UP/RDPM.  

Table 1: Summary of samples in each category 

Benign 

Malicious 

Category 

accessibility 

development 

education 

games 

graphics_pictures 

internet 

music_video 

office 

security 

utilities 

Count 

Category 

Count 

Category 

Count 

Category 

Count 

7 

20 

11 

20 

32 

48 

33 

29 

17 

#Other 

4444 

ArkeiStealer 

Avaddon 

BB 

Babuk 

Balaclava 

BlackKingdom 

BlackRose 

137 

Cerber 

5 

1 

4 

3 

1 

4 

4 

2 

1 

1 

Clay 

Clop 

CobaltStrike 

Conti 

CryLock 

Crypt888 

CryptoDarkRubix 

CryptoLocker 

Cryptowall 

Cuba 

1 

3 

1 

3 

3 

1 

1 

1 

1 

1 

DarkSide 

DeathHiddenTear 

Demonware 

Dharma 

DoejoCrypt 

Dridex 

EKANS 

ESCAL 

Egregor 

Encrpt3d 

3 

1 

3 

3 

3 

1 

1 

3 

3 

1 

Cuckoo Sandbox (Guarnieri, 2014) was used to generate the process memory for each sample. Each sample was 
analysed  with  the  default  Cuckoo  settings  and  the  process  memory  was  dumped  and  analysed  with  Cuckoo 
reporting modules to extract the process memory. The report  included the regions, segments as well as the 
access privileges and type of content stored, start and end address, state, offset, and size. A snippet of the data 
obtained from Cuckoo can be seen in Figure 2. The current study explored the protect field, which contains the 
access privilege. It was observed to be suitable, as the other attributes remained constant or were dependant 
on how the operating system assigned memory (start/end addresses, and the offset).  

Figure 2: Process memory data from Cuckoo 

3.1.2  Data Pre-Processing and Metrics 
Each sample's memory region constituted a single record in the dataset. Some samples had multiple memory 
regions, while some only had one. Each memory region segment’s access privileges from the Cuckoo reports 
were summed up for each privilege, thus resulting in the dataset as shown in Table 2. The dataset contained 476 
benign records and 461 malicious records for a total dataset of 937 records and a total of 80 categories. 

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 416 
  
 
 
 
Avinash Singh, Richard Adeyemi Ikuesan and Hein Venter 

Table 2: Dataset sample 

R 
367 
107 
62 
13 
124 
239 

RW 

RX 

RWC 

RWX 

RWXC 

LABEL 

CATEGORY 

307 
96 
59 
13 
94 
289 

117 
43 
18 
4 
54 
79 

84 
31 
21 
5 
32 
104 

70 
5 
49 
4 
6 
98 

0 
0 
0 
0 
0 
22 

B 
B 
B 
M 
M 
M 

Utilities 
Utilities 
Utilities 
Cryptowall 
DarkSide 
DeathHiddenTear 

3.2  Machine Learning Exploration Phase 
Several classifiers (machine learning techniques) were explored with a training/testing ratio of 80/20 as the de 
facto standard (Ashraf et al., 2019; Fernando et al., 2020). Stratified sampling was used to ensure that the split 
was  not  biased  or  uneven  in  terms  of  the  label  distribution.  Each  algorithm  was  evaluated  using  the  Knime 
Analytics Platform (Knime, 2021) on a Microsoft Windows machine. Metrics such as True Positive (TP), False 
Positive (FP), True Negative (TN), Recall, Precision, Sensitivity, Specificity, F-Measure, and Accuracy, were used 
to evaluate the result. The details of the explored algorithms are presented in the subsections that follow. 

3.2.1  Decision Tree (DT) 
A Decision Tree is one of the most commonly used classification algorithms in the security domain (Berrueta, 
Morato, Magana, et al., 2019; Molina et al., 2021). Trees provide a rule-based approach to classification, and 
since  security  relies  on  rules,  this  is  often  the  preferred  approach  (Adeyemi,  Razak,  Salleh,  et  al.,  2016; 
Ernsberger, Ikuesan, Venter, et al., 2017; Mohlala, Ikuesan & Venter, 2018). The parameters used for the DT 
comprised the quality measure that integrates the Gini Index, with no pruning, and a minimum number of five 
records per node. An accuracy of 93.62% (see Table 3) was observed. The number of incorrect classifications 
was 6:6 for benign:malicious samples respectively. This provides a fair misclassification. The Cohen’s Kappa score 
of  0.8723  implies  that  although  the  DT  model  performed  relatively  better  in  classification.  However,  it  is 
inefficient for detecting ransomware as there would be a 6.38% chance it would go undetected. 

Table 3: Decision Tree Results 

TP 
90 
86 

FP 
6 
6 

TN 
86 
90 

FN 
6 
6 

Recall 
0.9375 
0.9347 

Precision 
0.9375 
0.9347 

Sensitivity 
0.9375 
0.9347 

Specificity 
0.9347 
0.9375 

F-measure 
0.9375 
0.9347 

Label 
B 
M 
Overall 

Accuracy 

0.9362 

3.2.2  Tree Ensemble (TE) 
Ensemble learning is a technique that leverages concrete finite sets of models and evaluates them to find the 
best-performing model. Tree Ensemble is a model that builds multiple tree models and then evaluates each to 
find the best one. For the TE, the information gain ratio split criteria were utilized with the number of models 
set to 100 with square root attribute sampling. Increasing the number of models did not affect the accuracy, and 
a test was done with 10 models, which only affected the accuracy by 0.22%. Changing the split criteria and the 
sampling attributes had little to no effect on the accuracy of 95.74% (see Table 4). This is an improvement over 
the  DT  classifier,  thereby  providing  better  classification  and  a  decrease  in  the  confusion  matrix  of  just  two 
misclassifications for each label. 

Table 4. Tree Ensemble Results 

Label 
B 
M 
Overall 

TP 
90 
90 

FP 
2 
6 

TN 
90 
90 

FN 
6 
2 

Recall 
0.9375 
0.9783 

Precision 
0.9783 
0.9375 

Sensitivity 
0.9375 
0.9783 

Specificity 
0.9783 
0.9375 

F-measure 
0.9574 
0.9574 

Accuracy 

0.9574 

3.2.3  Random Forest (RF) 
Unlike a Tree Ensemble (TE), a Random Forest builds multiple tree structures within one model building a forest 
of trees. This classification algorithm is very useful for a complex hierarchy of rules and is particularly used often 
in the security domain for classification. While the RF did perform well it is slightly less accurate than the TE. This 
can  be  due  to  the  dataset  not  having  too  many  patterns  from  the  different  occurrences  of  the  data  points, 
resulting in a rather small  forest, achieving a similar result as the TE. An RF and TE are very similar from an 

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 417 
 
 
 
 
 
 
 
 
 
 
 
 
Avinash Singh, Richard Adeyemi Ikuesan and Hein Venter 

algorithm point of view, therefore, having accuracy in the same range is expected. The accuracy statistics of the 
RF are shown in Table 5. 

Table 5: Random Forest Results 

Label 
B 
M 
Overall 

TP 
89 
90 

FP 
2 
7 

TN 
90 
89 

FN 
7 
2 

Recall 
0.9271 
0.9783 

Precision 
0.9780 
0.9278 

Sensitivity 
0.9271 
0.9783 

Specificity 
0.9783 
0.9271 

F-measure 
0.9519 
0.9524 

Accuracy 

0.9521 

3.2.4  Gradient-Boosted Tree (GBT) 
A  Gradient-Boosted  Tree  is  an  ensemble  learning  where  the  notion  of  combining  previous  models  would 
increase prediction. Hence, the goal is to minimize the gradient of the prediction error. Based on the results in 
Table 8, the accuracy is 94.68% with a false-positive misclassification of only four records. In comparison, DT had 
6,  whereas  TE  and  RF  had  two,  which  means  that  GBT  does  not  perform  better.  This  is  also  verified  by  the 
accuracy  score  is  lower  than  the  other  classifiers.  Generally,  it  is  said  that  gradient  boosting  gives  a  higher 
performance than a random forest, due to the optimization technique of reducing the prediction error. 

Table 6: Gradient-Boosted Tree Results 

TP 
90 
88 

FP 
4 
6 

TN 
88 
90 

FN 
6 
4 

Recall 
0.9375 
0.9565 

Precision 
0.9574 
0.9362 

Sensitivity 
0.9375 
0.9565 

Specificity 
0.9565 
0.9375 

F-measure 
0.9474 
0.9462 

Label 
B 
M 
Overall 

Accuracy 

0.9468 

3.2.5  XGBoost 
The  XGBoost  is  a  gradient  boost  algorithm  with  additional  features  that  allow  for  better  performance  and 
accuracy. These features include a robust penalty function on the tree models, shrinking of leaf nodes, and the 
ability to deal with large data. While GBT did not perform well (see Table 7), the results of the XGBoost algorithm 
delivered better results, with a 96.28% accuracy and a relatively high precision and F-measure score  further 
validating the accuracy results obtained. The XGBoost algorithm was configured with the softprob option to give 
the probability for each data point. A boost of 1000 rounds improved the accuracy. 

Table 7: XGBoost Results 

Label 
B 
M 
Overall 

TP 
93 
88 

FP 
4 
3 

TN 
88 
93 

FN 
3 
4 

Recall 
0.9688 
0.9565 

Precision 
0.9588 
0.9670 

Sensitivity 
0.9688 
0.9565 

Specificity 
0.9565 
0.9688 

F-measure 
0.9637 
0.9617 

Accuracy 

0.9628 

3.2.6  Naïve Bayes (NB) 
The Naïve Bayes algorithm tends to perform well, which results in higher accuracy than other algorithms. This is 
because  the  NB  algorithm  treats  features  individually,  and  these  features  are  not  related  to  each  other. 
However, in this case, it performed poorly, which can be attributed partly to the smaller feature space and the 
fact that the features are related to one another. A Cohen’s Kappa score of 0.6288 was obtained. The relatively 
low output indicates that this classification is not reliable. An accuracy score of 81.38% (see Table 6) further 
confirms that the NB algorithm is not efficient in detecting ransomware. 

Table 8: Naive Bayes Results 

Label 
B 
M 
Overall 

TP 
71 
82 

FP 
10 
25 

TN 
82 
71 

FN 
25 
10 

Recall 
0.7396 
0.8913 

Precision 
0.8765 
0.7664 

Sensitivity 
0.7396 
0.8913 

Specificity 
0.8913 
0.7396 

F-measure 
0.8023 
0.8241 

Accuracy 

0.8138 

3.2.7  Support Vector Machine (SVM) 
The Support Vector Machine algorithm was tested given that SVM works well with small datasets such as the 
one used in the current study. The SVM performs classification based on hyperplanes so that each label can be 
isolated from the other. However, the SVM algorithm did not perform well with this dataset, and it achieved an 
accuracy of 85.64% (see Table 10). A test was done using the configuration of a polynomial kernel where the 

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 418 
 
 
 
 
 
 
 
Avinash Singh, Richard Adeyemi Ikuesan and Hein Venter 

power, bias, gamma, and penalty were set to 1, which resulted in an accuracy of 52.45%. The final configuration 
(see the results in Table 10) used a radial basis function kernel with a sigma of 0.1.  

Table 9: Support Vector Machine Results 

Label 
B 
M 
Overall 

TP 
94 
67 

FP 
25 
2 

TN 
67 
94 

FN 
2 
25 

Recall 
0.9792 
0.7283 

Precision 
0.7899 
0.9710 

Sensitivity 
0.9792 
0.7283 

Specificity 
0.7283 
0.9792 

F-measure 
0.8744 
0.8323 

Accuracy 

0.8564 

3.2.8  Neural Network (NN) 
To compare a simple supervised learning classification to deep learning algorithms, a Neural Network was also 
explored. Resilient Propagation Multi-Layer Perceptron (RProp MLP) as defined by Riedmiller and Braun (1993) 
was used instead of a normal NN, because RProp MLP adjusts the weights of the network based on the behaviour 
of the error function. Since the data could not be used in its raw form, further pre-processing was needed for 
the NN training and all the features were normalised to values between 0 and 1. Different configurations of the 
parameters were explored, and the best performing parameters were 10000 iterations, two hidden layers, and 
15 hidden neurons per layer. This resulted in an accuracy of 93.62% (see Table 11), which is on par with the tree 
classifiers. 

Table 10: Neural Network Results 

TP 
120 
144 

FP 
8 
10 

TN 
144 
120 

FN 
10 
8 

Recall 
0.9231 
0.9474 

Precision 
0.9375 
0.9351 

Sensitivity 
0.9231 
0.9474 

Specificity 
0.9474 
0.9231 

F-measure 
0.9302 
0.9412 

Label 
B 
M 
Overall 

Accuracy 

0.9362 

4.  Discussion 

Overall,  process  memory  gave  a  good  measure  for  ransomware  detection  as  most  ML  algorithms  gave  an 
accuracy of 93-96% (see Table 12). The Neural Network classifier also provided a relatively good performance. 
However, further exploration of other deep learning classifiers was discouraged in this study. A deep learning 
algorithm requires a relatively larger dataset, whereas the dataset used in this study was insufficient for typical 
deep learning algorithms to make good predictions. For instance, NN needs a larger dataset to generate a more 
accurate classification. Getting more data is a difficult process, as samples need to be manually run and a Cuckoo 
report can easily extend over 1 GB for each ransomware sample. Expanding on the dataset would also need 
more benign samples to maintain the class balance, in which case benign samples do not generate much process 
memory information – as opposed to ransomware. Machine learning algorithms suggested in (Berrueta et al., 
2019; Molina et al., 2021; Rughani, 2017; Vinayakumar, Soman, Velan, et al., 2017) obtained accuracy scores 
that  ranged  between  88-98%,  which  are  good  results.  In  comparison,  the  proposed  research  achieved  the 
highest  accuracy  of  96.28%  using  the  XGBoost  algorithm.  The  limitation  of  the  current  research  is  that  the 
dataset did not contain significantly larger training data. This can be attributed to the lack of resources and the 
absence of timeous acquisition, processing, and extraction of the process memory. Furthermore, the region of 
memory  considered  in  this  study  is  relatively  measurable  and  logically  feasible  to  provide  a  measure  of 
dissimilarity between benignware and ransomware. The exploration of these memory-rich features presents a 
novel approach to ransomware investigation, consequently,  improving ransomware  mitigation when used in 
digital forensic readiness.  

Table 11: Summary of Accuracy Statistics 

TECHNIQUE 
Accuracy (%) 

DT 
93.62 

TE 
95.74 

RF 
95.21 

NB 
81.38 

XG 
96.28 

GB 
94.68 

SVM 
85.64 

NN 
93.62 

To further evaluate the degree of reliability, the area under the Receiver Operating Characteristic (ROC) curve – 
AUC – was explored. The ROC measures binary classifiers on their discriminative threshold based on the ratio of 
a  true  positive  rate  to  a  false  positive  rate.  The  AUC  provides  a  basis  for  an  unbiased  evaluation  of  the 
performance of a classifier relative to the baseline (random) classifier. The AUC typically ranges from 0 to 1, with 
0 being the worst classifier performance. Figure 3 shows the ROC curve for the classifiers explored in this study, 
with the AUC for each classifier shown in parenthesis in the legend. Looking at Figure 3, the worst-performing 
model in terms of the AUC output is the NN. Overall, the best performing model in terms of accuracy and AUC 

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 419 
 
 
 
 
Avinash Singh, Richard Adeyemi Ikuesan and Hein Venter 

is  XGBoost  (XG),  with  an  AUC  of  0.992  and  an  accuracy  of  96.28%.  Similarly,  the  performance  of  RF  and  TE 
respectively rivals XG. This echoes the observed accuracy in Tables 4 and 5, where both classifiers demonstrated 
similar performance.  

Figure 3: Area Under the ROC Curve of the Explored Classifiers 

5.  Conclusion and Future Work 

In this paper, process memory was utilized for ransomware detection with the dataset comprising 937 records 
from 117 ransomware and 354 benign samples.  The study observed, by leveraging several machine learning 
algorithms,  that  process  memory  does  provide  very  meaningful  information  to  assist  with  ransomware 
detection, and accuracy scores of between 93.62 and 96.28% were obtained, with the best performing model 
being XGBoost. Since static analysis often does not pick up ransomware attacks and behavioural analysis can be 
time-consuming,  monitoring  process  memory  is  the  most  effective  solution  to  actively  detect  ransomware 
attacks.  Once  process  memory  has  been  allocated,  the  access  levels  of  the  memory  can  provide  meaningful 
information about the inner workings of the process. Data within the memory regions were not explored, as 
attackers  would  then  make  use  of  encryption  to  disguise  their  activity.  Furthermore,  the  permissions  of  the 
access level cannot be hidden or encrypted, as this is done on an OS level. However, exploring the access level 
of a memory region is not sufficient for ransomware detection, therefore, future work would involve looking at 
the patterns in which these access levels occur for a more accurate and distinguishable mechanism for detection. 
Exploring the type of memory segments for each privilege can further provide more useful information to be 
used in prediction models. The paper in hand contributes to the security community by finding more novel ways 
for ransomware detection through automated behavioural analysis. 

References 

Abuse.ch. 2020. Malware Bazaar. [Online], Available: https://bazaar.abuse.ch/ [2021, June 11]. 
Adamov, A. & Carlsson, A. 2017. The state of ransomware. Trends and mitigation techniques. in Proceedings of 

2017 IEEE East-West Design and Test Symposium, EWDTS 2017. 

Adeyemi,  I.R.,  Razak,  S.A.,  Salleh,  M.  &  Venter,  H.S.  2016.  Observing  consistency  in  online  communication 

patterns for user re-identification. PLoS ONE. 11(12):1–27. 

Ashraf,  A.,  Aziz,  A.,  Zahoora, U.  &  Khan,  A.  2019.  Ransomware  Analysis  using  Feature Engineering  and  Deep 

Neural Networks. 1–15. [Online], Available: http://arxiv.org/abs/1910.00286. 

Bashari Rad, B., Masrom, M. & Ibrahim, S. 2012. Camouflage In Malware: From Encryption To Metamorphism. 
International Journal Of Computer Science And Network Security (IJCSNS). 12(8):74–83. [Online], Available: 
http://paper.ijcsns.org/07_book/201208/20120813.pdf. 

Berrueta,  E.,  Morato,  D.,  Magana,  E.  &  Izal,  M.  2019.  A  Survey  on  Detection  Techniques  for  Cryptographic 

Ransomware. IEEE Access. 7:144925–144944. 

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 420 
 
Avinash Singh, Richard Adeyemi Ikuesan and Hein Venter 

Berrueta,  E.,  Morato,  D.,  Magana,  E.  &  Izal,  M.  2020.  Open  Repository  for  the  Evaluation  of  Ransomware 

Detection Tools. IEEE Access. 8:65658–65669. 

BlackBerry. 2021. Cylance. [Online], Available: https://www.cylance.com/ [2019, October 05]. 
Bromium Labs, Kotov, V. & Rajpal,  mantej S. 2014. Understanding Crypto-Ransomware. Bromium. 35. [Online], 
Available: www.bromium.com/sites/.../bromium-report-ransomware.pdf%5CnCached%5CnSimilar%5Cn. 
Dang, D., Di Troia, F. & Stamp, M. 2021. Malware classification using long short-term memory models. ICISSP 
2021 - Proceedings of the 7th International Conference on Information Systems Security and Privacy. 743–
752. 

Dua, S. & Du, X. 2016. Data Mining and Machine Learning in Cybersecurity. Auerbach Publications. 
Ernsberger, D., Ikuesan, A.R., Venter, H.S. & Zugenmaier, A. 2017. A Web-Based Mouse Dynamics Visualization 
Tool  for  User  Attribution  in  Digital  Forensic  Readiness.  in  9th  EAI  International  Conference  on  Digital 
Forensics & Cyber Crime Prague: Springer Berlin Heidelberg. 1–13. 

Fernando,  D.W.,  Komninos,  N.  &  Chen,  T.  2020.  A  Study  on  the  Evolution  of  Ransomware  Detection  Using 

Machine Learning and Deep Learning Techniques. IoT. 1(2):551–604. 

Grégio, A.R.A., De Geus, P.L., Kruegel, C. & Vigna, G. 2013. Tracking memory writes for malware classification 
and  code  reuse  identification.  Lecture  Notes  in  Computer  Science  (including  subseries  Lecture  Notes  in 
Artificial Intelligence and Lecture Notes in Bioinformatics). 7591 LNCS:134–143. 

Guarnieri, C. 2014. Cuckoo Sandbox. [Online], Available: https://cuckoosandbox.org/ [2018, October 04]. 
Haller, J.T. 2021. Portable Apps. [Online], Available: https://portableapps.com/ [2021, September 02]. 
Hampton, N., Baig, Z. & Zeadally, S. 2018. Ransomware behavioural analysis on windows platforms. Journal of 

Information Security and Applications. 40:44–51. 

Knime. 2021. Knime Analytics Platform. [Online], Available: https://www.knime.com/knime-analytics-platform 

[2021, June 10]. 

Mohlala, M., Ikuesan, A.R. & Venter, H.S. 2018. User attribution based on keystroke dynamics in digital forensic 
readiness process. in 2017 IEEE Conference on Applications, Information and Network Security, AINS 2017 
Vols 2018-Janua. 1–6. 

Molina, R.M.A., Torabi, S., Sarieddine, K., Bou-Harb, E., Bouguila, N. & Assi, C. 2021. On Ransomware Family 
Attribution Using Pre-Attack Paranoia Activities. IEEE Transactions on Network and Service Management. 
4537(c). 

Newman,  L.H.  2018.  Atlanta Spent  $2.6M  to  Recover  From  a  $52,000  Ransomware  Scare  |  WIRED.  [Online], 
[2019, 

Available:  https://www.wired.com/story/atlanta-spent-26m-recover-from-ransomware-scare/ 
August 10]. 

Riedmiller,  M.  &  Braun,  H.  1993.  Direct  adaptive  method  for  faster  backpropagation  learning:  The  RPROP 

algorithm. 1993 IEEE International Conference on Neural Networks. 586–591. 

Rughani, P.H. 2017. ARTIFICIAL INTELLIGENCE BASED DIGITAL FORENSICS FRAMEWORK. International Journal of 

Advanced Research in Computer Science. 8(8):10–14. 

SCMagazine. 2019. Researchers bypass Cylance’s AI-based AV solution by masking malware with video game 
[Online],  Available:  https://www.scmagazine.com/home/security-news/researchers-bypass-

code. 
cylances-ai-based-av-solution-by-masking-malware-with-video-game-code/ [2019, October 05]. 

Shah, S.A.R. & Issac, B. 2018. Performance comparison of intrusion detection systems and application of machine 

learning to Snort system. Future Generation Computer Systems. 80(November 2017):157–170. 

Sienko, 

C. 

2021. 

InfosecInstitute. 

[Online], 

Available: 

https://resources.infosecinstitute.com/category/healthcare-information-security/healthcare-attack-
statistics-and-case-studies/ransomware-case-studies-hollywood-presbyterian-and-the-ottawa-hospital/. 
Singh, J. & Singh, J. 2021. A survey on machine learning-based malware detection in executable files. Journal of 

Systems Architecture. 112(March 2020):101861. 

Singh, A., Ikuesan, A. & Venter, H. 2019a. A context-aware trigger mechanism for ransomware forensics. in 14th 

International Conference on Cyber Warfare and Security, ICCWS 2019. 629–638. 

Singh,  A.,  Ikuesan,  A.R.  &  Venter,  H.S.  2019b.  Digital  Forensic  Readiness  Framework  for  Ransomware 

Investigation. Digital Forensics and Cyber Crime. 259:91–105. 

Sophos.  2021.  The  State  of  Ransomware  2021.  [Online],  Available:  https://secure2.sophos.com/en-

us/content/state-of-ransomware.aspx. 

Subedi, K.P., Budhathoki, D.R. & Dasgupta, D. 2018. Forensic analysis of ransomware families using static and 
dynamic analysis. Proceedings - 2018 IEEE Symposium on Security and Privacy Workshops, SPW 2018. 180–
185. 

Vinayakumar,  R.,  Soman,  K.P.,  Velan,  K.K.S.  &  Ganorkar,  S.  2017.  Evaluating  shallow  and  deep  networks  for 
ransomware  detection  and  classification.  in  2017  International  Conference  on  Advances  in  Computing, 

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 421Avinash Singh, Richard Adeyemi Ikuesan and Hein Venter 

Communications and Informatics, ICACCI 2017 Vols 2017-January. Institute of Electrical and Electronics 
Engineers Inc. 259–265. 

Yuval Nativ, L.L. 2015. theZoo. [Online], Available: https://github.com/ytisf/theZoo [2018, September 12]. 

Proceedings of the 17th International Conference on Information Warfare and Security, 2022 422 
 
