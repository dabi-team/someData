Cyberattack Detection in Mobile Cloud Computing:
A Deep Learning Approach

Khoi Khac Nguyen1, Dinh Thai Hoang2, Dusit Niyato2, Ping Wang2, Diep Nguyen3, and Eryk Dutkiewicz3
1 School of Information and Communication Technology, Hanoi University of Science and Technology, Vietnam
2 School of Computer Science and Engineering, Nanyang Technological University, Singapore
3 School of Computing and Communications, University of Technology Sydney, Australia

7
1
0
2

c
e
D
6
1

]

R
C
.
s
c
[

1
v
4
1
9
5
0
.
2
1
7
1
:
v
i
X
r
a

Abstract—With the rapid growth of mobile applications and
cloud computing, mobile cloud computing has attracted great
interest from both academia and industry. However, mobile cloud
applications are facing security issues such as data integrity,
users’ conﬁdentiality, and service availability. A preventive ap-
proach to such problems is to detect and isolate cyber threats
before they can cause serious impacts to the mobile cloud
computing system. In this paper, we propose a novel framework
that leverages a deep learning approach to detect cyberattacks
in mobile cloud environment. Through experimental results, we
show that our proposed framework not only recognizes diverse
cyberattacks, but also achieves a high accuracy (up to 97.11%) in
detecting the attacks. Furthermore, we present the comparisons
with current machine learning-based approaches to demonstrate
the effectiveness of our proposed solution.

Keywords- Cybersecurity, cyberattack, intrusion detection,

mobile cloud, and deep learning.

I. INTRODUCTION

Mobile cloud computing (MCC) is an emerging architecture
which has been developed based on the power of cloud
computing to serve mobile devices [1]. MCC allows mobile
applications to be stored and remotely executed on cloud
servers,
thereby reducing computing and energy costs for
mobile devices. Furthermore, MCC brings a huge proﬁt to
cloud service providers by optimizing cloud resource usage
through advanced virtualization technologies. Forbes magazine
predicts that worldwide spending on public cloud services
will grow at a 19.4% compound annual growth rate (CAGR)
from nearly $70 billion in 2015 to more than $141 billion
in 2019 [2]. However, the MCC is challenged by cybercrime.
According to UK Government, 74% of small ﬁrms in the UK
experienced a cybersecurity breach, and 90% of large ﬁrms
were also targeted in 2014 [3].

To counter cyberattacks in MCC, it is crucial to early detect
cyber threats, thereby implementing prompt countermeasures
to prevent the risks. Currently, there are some approaches
proposed to detect and prevent cyberattacks in cloud en-
vironment. For example,
the authors of [4], [5], and [6]
introduced solutions to detect DoS attacks. Alternatively, one
can also rely on attacks’ patterns and risk assessment [9],
game theory [10], and supervised learning [11] to detect and
counter cyber threats. The common limitation of these methods
is the relatively low accuracy in detecting cyberattacks, and
they are unable to work effectively in real-time cloud systems
with different types of attacks. In this paper, we propose a
framework with an advanced detection mechanism developed

from deep learning technique which allows to detect various
attacks with high accuracy.

Deep learning is a sub-ﬁeld of machine learning concerned
with algorithms inspired by the structure and functions of neu-
ral networks [12]. Over the past few years, deep learning has
been implemented successfully in many areas. For example,
deep learning can be used in automatic translation machines to
improve the reliability, in recommendation systems to suggest
what customers are interested in or want to buy next, and in
image recognition systems to detect objects [12]. In this paper,
we introduce a framework to detect and prevent cyberattacks
through using deep learning technology. The core idea of
deep learning method is using a training dataset to train the
pre-established neural network in ofﬂine mode with the aim
to adjust weights of the neural network. Then, the neural
network will be used to detect cyberattacks in the cloud
system in online mode. Through experimental results, we
show that our proposed framework can detect diverse attacks
with very high accuracy. In addition, we have also compared
the performance of our proposed framework with those of
conventional intrusion detection methods to demonstrate the
efﬁciency of our solution.

II. RELATED WORK

There have been a rich literature dealing with DoS at-
tacks in the cloud computing environment. In particular, the
authors in [4] introduced a method taking advantages of
virtual machine status including CPU and network usage to
identify Denial-of-Service (DoS) attacks in cloud data centers.
The authors found that malicious virtual machines exhibit
similar status patterns when a DoS attack is launched, and
thus information entropy can be applied in monitoring the
status of virtual machines to identify attack behaviors. The
authors in [5] adopted a convariance matrix method relying
on investigating the correlation of several features in the IP
header. The authors in [6] developed a classiﬁcation method to
determine the behavior of packets based on Kappa coefﬁcient.
Besides DoS attacks, other attacks have been also reported
and studied. For example, in cloud computing, since multiple
Virtual Machines (VM) share the same physical machine, this
creates a great opportunity to carry out Cache-based Side
Channel Attack (CSCA). A detection technique using Bloom
Filter (BF) was developed in [7] to address this problem. The
core idea of the BF is to reduce the performance overhead
and a mean calculator to predict the cache behavior most

 
 
 
 
 
 
Fig. 1. System model for cyberattack detection in mobile cloud computing system.

probably caused by CSCA. Alternatively, in [8], the SQL
injection attack detection method was introduced to prevent
unauthorized accesses. The method ﬁrst obtains SQL keywords
through the analysis of lexical regulation for SQL statement,
then analyzes the syntax regulation of SQL statement to create
the rule tree and traverses ternary tree to detect the attacks.

The common limitation of existing intrusion detection ap-
proaches in cloud environment is that they are unable to simul-
taneously detect a wide range of attacks with high accuracy.
For example, all aforementioned solutions are able to detect
one type of attacks only. In this work, we develop an intrusion
detection framework which is able to detect diverse attacks in
MCC system with high accuracy.

III. SYSTEM MODEL
In this section, we ﬁrst describe the proposed system model
for cyberattack detection along with main functions, and then
explain how the system works. As shown in Fig. 1, when
a request, i.e., a packet, from a mobile user is sent to the
system, it will be passed to the attack detection module. This
module has three main functions, i.e., data collection and pre-
processing, attack recognition, and request processing.

• Data collection and pre-processing function: is respon-
sible for collecting data and pre-processing the request
to ﬁt the deep learning model. This function is essential
to enhance the performance of our model, and helps the
gradient descent algorithm used in the training process to
converge much faster.

• Attack detection (online component) function: is used to
classify the incoming requests based on the trained deep
learning model. After the deep learning model has been
trained in an ofﬂine mode, it will be used for this function
to detect malicious requests.

• Request processing: Given an incoming request, the at-
tack detection function will mark this request as a normal
or suspicious request. If the request is normal, it will
be served by available cloud resources. Otherwise, the
request will be reported to the security control module.
When a suspicious request is sent to the security control
module, the request verifying function will be activated. In

particular, the request will be veriﬁed carefully by comparing
with the current database and/or sending to security service
providers for double-checking. If the request is identiﬁed to
be harmless, it will be served as normal. On the other hand,
the request will be treated as a malicious request, and the
attack defend function will be activated to implement prompt
security policies to prevent the spread as well as impacts of
this attack. For example, if a request is identiﬁed to be a DoS
attack, the security manager can immediately implement ﬁlters
at the gateway to block packets from the same IP address.

IV. DEEP LEARNING MODEL

In this section, we present the deep learning model for
cyberattack detection and explain how the learning model
detects cyberattacks in the cloud system. As shown in Fig. 2,
there are two phases in the learning model, i.e., feature analysis
and learning process.

A. Features Analysis and Dimension Reduction

1) Features Analysis: Feature analysis is the ﬁrst step in the
deep learning model. The aim of this step is to extract features
and learn from the features. Different
types of malicious
packets may have special features which are different from
the normal ones, and thus by extracting and analyzing the
abnormal attributes of packets, we can determine whether a
packet is malicious or not. For example, packet features such as
source bytes, percentage of packets with errors, and IP packet
entropy are important features to detect DoS attacks [13].

2) Dimension Reduction: Data packets contain many at-
tributes with different features. For example, each record in
the KDDcup 1999 dataset [16] and NSL-KDD dataset [17]
consists of 41 features. However, not all the 41 features are
useful for intrusion detection. Some features are irrelevant and
redundant resulting in a long detection process and degrading
the performance. Therefore, selecting features which preserve
the most important information of a dataset is essential to
reduce the computation complexity and increase the accuracy
for the learning process.

Security policySecurity ManagerNormal requestSuspiciousrequestGatewayRequestsMobile usersCloud Computing SystemNormal requestCloud resourcesNormal userMalicious userAttack detection moduleSecurity controlmodulewhere V is a matrix of eigenvectors and L = diag(λ1, ..., λp)
is a diagonal matrix of eigenvalues in a decreasing order. If
we use singular value decomposition (SVD) to perform PCA,
we will obtain the decomposition as follow [15]:

X = UΣV(cid:62),

(3)

where U and V are orthonormal matrices meaning that
UT U = UUT = I and VT V = VVT = I, and
Σ = diag(s1, ..., sn) is a diagonal matrix of singular values
si. Then, we derive the following results:

C =

1
n − 1

X(cid:62)X =

=

1
n − 1
1
n − 1

(VΣU(cid:62))(UΣV(cid:62))

VΣ2V(cid:62).

(4)

(4) implies that singular vector V has principal directions
is related to the eigenvalue λi of
i /(n − 1). Thus, we are able

and singular value si
covariance matrix C via λi = s2
to deﬁne the principal components (PCs) as follows [15]:

P = XV = UΣVT V = UΣ,

(5)

where the columns of matrix P are the PCs and the matrix
V is called the loading matrix which contains the linear
combination coefﬁcients of the variables for each PC. We want
to project the dataset from n-dimensional to r-dimensional
while retaining the important dimensions of the data. In other
words, we have to ﬁnd the smallest value r such that the
following condition holds:

(cid:80)r
(cid:80)n

i=1 λi
j=1 λj

≥ α,

(6)

where α is the percentage of information which needs to
be reserved after reducing the dimension of input data to r-
dimensional. We can observe that the PCA will choose the
PCs, i.e., important features, that maximize the variance α.

B. Learning Process

The learning process includes three layers, i.e., input layer,
output layer, and some hidden layers, as depicted in Fig. 2.
The reﬁned features will be used as the input data of the input
layer. After the learning process, we can determine whether the
packet is normal or malicious. The learning process includes
three main steps, i.e., pre-learning, deep learning, and softmax
regression steps as shown in Fig. 2.

1) Pre-learning Process: This step uses a Gaussian Binary
Restricted Boltzmann Machine (GRBM) to transform real
values, i.e., input data of the input layer, into binary codes
which will be used in the hidden layers. The GRBM has
I visible units and J hidden units. The number of visible
units (i.e., the number of neurons) is deﬁned as the number of
features after reducing dimension, and the number of hidden
units is pre-deﬁned in advance. The energy function of the
GRBM is deﬁned by [22]:

Fig. 2. Deep learning model.

Principal Component Analysis (PCA) is an effective tech-
nique which is often used in machine learning to emphasize
variation and determine strong patterns in a dataset. The core
idea of PCA is to reduce the dimensionality of a dataset
consisting of a large number of interrelated variables, while
retaining as much as possible the variation presented in the
dataset [14]. Thus, in this paper, we adopt the PCA to reduce
dimensions for considered datasets.

Mathematically,

the PCA maps a dataset

from an n-
dimensional space to an r-dimensional space where r ≤ n to
minimize the residual sum of squares (RSS) of the projection.
This is equivalent to maximize the covariance matrix of the
projected dataset [14]. The dataset in the new domain has two
important properties, i.e., the different dimensions of the data
have no correlation anymore and the dimensions are ordered
according to the importance of their information. We deﬁne
X as a (m × n) matrix with m observations of n different
variables. Then, the covariance matrix C is given by:

C =

1
n − 1

X(cid:62)X.

(1)

Since C is a symmetric matrix, it can be diagonalized as

follows [15]:

C = VLV(cid:62),

E(v, h) =

(2)

I
(cid:88)

i=1

(vi − ai)2
2σ2
i

−

I
(cid:88)

J
(cid:88)

i=1

j=1

wijhj

vi
σi

−

J
(cid:88)

j=1

bjhj, (7)

Hidden layersOutputlayerFeature analysis and dimension reductionDoSU2RRequestsNormalInput layerLearning processPre-learningGRBM Deep  learningRBMsSoftmax regressionwhere v is visible vector and h is hidden vector. ai and bj are
biases corresponding to visible and hidden units, respectively.
wij is the connecting weight between the visible and hidden
units, and σi is the standard deviation associated with Gaussian
visible unit vi. Then, the network assigns a probability to every
possible pair of a visible and a hidden vector via the energy
function. The probability is deﬁned as follows:

p(v, h) =

e−E(v,h)
v,h e−E(v,h)

(cid:80)

.

(8)

From (8), we can derive the probability that the network is
assigned to a visible vector v as follows:
h e−E(v,h)
v,h e−E(v,h)

(cid:80)
(cid:80)

p(v) =

(9)

.

From the probability p(v), we can derive the learning update
rule for performing stochastic steepest descent
in the log
probability of the training data as follows:
(cid:28) 1
=
σi
(cid:32) (cid:28) 1
σi

∂ log p(v)
∂wij

model
(cid:33)
,

(cid:28) 1
σi

(cid:28) 1
σi

∆wij = (cid:15)

vihj

vihj

vihj

vihj

(10)

data

−

−

(cid:29)

(cid:29)

(cid:29)

(cid:29)

,

model

data

where (cid:15) is the learning rate and (cid:104)·(cid:105) is used to denote the
expectation under a distribution speciﬁed by the subscript that
follows [22].

Getting an unbiased sample of (cid:104)vihj(cid:105)model is difﬁcult be-
cause there is no connection between hidden units and between
visible units in a GRBM. Therefore, sampling methods can
be applied to address this problem. In particular, we can
start at any random state of the visible units and perform
Gibbs sampling alternately. Each iteration of alternating Gibbs
sampling involves updating all
the hidden units parallelly
using (11) followed by updating all visible units parallelly
using (12).

p(hj = 1|v) = sigm

(cid:16)

bj +

(cid:88)

wij

vi
σi

(cid:17)

,

(11)

(12)

i
hjwij, σ2

i ),

p(vi|h) = N (vi|ai +

(cid:88)

j

where sigm(x) = 1/(1 + exp(−x)) is the sigmoid function
and N (·|µ, σ2) denotes a Gaussian probability density function
with mean µ and standard deviation σ.

2) Deep Learning Step: This step includes a series of
learning processes which are performed in sequence to ad-
just weights of the neural network. Each learning process is
performed between two successive layers in the hidden layers
through a Restricted Boltzmann Machine (RBM). The RBM
is a particular type of Markov random ﬁeld. It has a two-
layer architecture in which the visible binary stochastic units
v ∈ {0, 1}D are connected to the hidden binary stochastic units
h ∈ {0, 1}F . Here, D and F are the numbers of visible and
hidden units, respectively. Then, the energy of state {v, h} can
be calculated by [22]:

E(v, h) = −

D
(cid:88)

F
(cid:88)

i=1

j=1

wijvihj −

D
(cid:88)

i=1

aivi −

F
(cid:88)

j=1

bjhj

(13)

where parameters wij, ai, and bj are deﬁned similarly as in (7).
The conditional probability of a single variable being one
(e.g., p(hj = 1|v)) can be interpreted as the ﬁring rate of a
neuron with the sigmoid activation function as follows [22]:

p(hj = 1|v) = sigm(

D
(cid:88)

wijvi + bj),

(14)

p(vi = 1|h) = sigm(

i=1
F
(cid:88)

j=1

wijhj + ai).

(15)

Similar to the pre-learning step, we can derive the learning

update rule for the weights of the RBM as follows:

∆wij = (cid:15)((cid:104)vihj(cid:105)data − (cid:104)vihj(cid:105)model),

(16)

where (cid:15) is the learning rate.

3) Softmax Regression Step: The output of the last hidden
layer, i.e., x, will be used as the input of the softmax regression
(at the output layer) to classify the packet. A packet can be
classiﬁed into M = (K + 1) classes, where K denotes all
types of attacks. Mathematically, the probability that an output
prediction Y is class i, is determined by:

eWix+bi
j eWj x+bj

,

(cid:80)

p(Y = i|x, W, b) = sof tmaxi(Wx + b) =

(17)
where W is a weight matrix between the last hidden layer
and the output layer, and b is a bias vector. Then, the model’s
prediction ypd is the class whose probability is maximal,
speciﬁcally:

ypd = arg max

i

(cid:2)p(Y = i|x, W, b)(cid:3), ∀i ∈ {1, 2, . . . , M }.

(18)

C. Ofﬂine Deep Training and Online Cyberattack Detection

The deep training consists of two phases, i.e., pre-training

phase and ﬁne-tuning phase.

• Pre-training: This phase requires only unlabeled data
which is cheap and easy to collect from the Internet for
training. In [18], the authors introduced an efﬁcient way
to learn a complicated model by using a set of simple
sub-models which are learned sequentially. The greedy
layer-wise learning algorithm allows each sub-model in
the sequence to have a different representation of the data.
The sub-model performs a non-linear transformation on
its input vectors to produce output vectors that will be
used as inputs of the next sub-model in the sequence.
The principle of greedy layer-wise unsupervised training
for each layer can be applied with RBMs as the building
blocks for each layer [18], [19], [20]. Our training process
is executed through Gibbs sampling using CD as the
approximation to the gradient [21].

• Fine-tuning: We use the available set of labeled data for
ﬁne-tuning. After pre-training phase, we have a sensible
set of weights for one layer at a time. Thus, bottom-up
back-propagation can be used to ﬁne-tune the model for
better discrimination.

(a)

(b)

(c)

Fig. 3. Visualizations of three datasets: (a) NSL-KDD, (b) UNSW-NB15, and (c) KDDcup 1999, by using PCA with 3 most important features. Grey circles
represent normal packets, while circles with other colors than grey express the different types of attacks.

After the ofﬂine deep training is completed, we will obtain a
deep learning model with trained weights. This learning model
will be then implemented on the attack detection module to
detect malicious packets in an online fashion.

V. DATASET COLLECTION AND EVALUATION METHODS

In this section, we give a brief overview of common cyberat-
tacks in MCC, three real datasets are used in our experiments.
We then present the methods to evaluate the experimental
results.

A. Dataset Collection

To verify the accuracy of the deep-learning cyber attack

detection, we use three empirical public datasets.

1) KDDcup 1999 Dataset: The KDDcup 1999 dataset [16]
is widely used as a benchmark for the intrusion detection
network model. Each record in the dataset contains 41 features
and is labeled as either normal or a speciﬁc type of attack.
The training dataset contains 22 types of attacks, while testing
dataset contains additional 17 types.

2) NSL-KDD Dataset: The NSL-KDD Dataset was pre-
sented in [17] to solve some inherent problems of the KDDCup
1999 dataset such as the huge number of redundant records
both in the training and testing dataset. Each trafﬁc sample
has 41 features. Attacks in the dataset are categorized into four
categories: DoS, R2L, U2R, and Probe attacks. The training
includes 24 attack types, while the testing dataset
dataset
contains 38 attack types.

3) UNSW-NB15 Dataset: This dataset has nine families of
attacks, namely, Fuzzers, Analysis, Backdoors, DoS, Exploits,
Generic, Reconnaissance, Shellcode and Worms. Argus and
Bro-IDS network monitoring tools were used and 12 algo-
rithms were developed to generate totally 49 features. The
number of records in the training dataset is 175,340 records
and that in testing dataset is 82,331 records from different
types of attacks.

B. Evaluation Methods

In this study, we use accuracy, precision, and recall which
are typical parameters used in machine learning (deeplearn-
ing.net) as performance metrics to evaluate the deep-learning
cyberattack detection model.

T P +T N

• Accuracy (ACC) indicates the ratio of correct detection
T P +T N +F P +F N where T P , T N ,
over total trafﬁc trace:
F P , and F N stand for “true positive”, “true negative”,
“false positive”, and “false negative”, respectively. Thus,
the average prediction accuracy of M supported classes
is deﬁned by:

ACC =

1
M

M
(cid:88)

i

T Pi + T Ni
T Pi + T Ni + F Pi + F Ni

.

(19)

• Precision (PPV) shows how many attacks predicted are
actual attacks. P P V is deﬁned as the ratio of the number
of T P records over the number of T P and F P records.

P P V =

T P
T P + F P

.

(20)

• Recall (TPR) shows the percentage of attacks that are
correctly predicted versus all attacks happened. T P R is
deﬁned as the ratio of number of T P records divided by
the number of T P and F N records.

T P R =

T P
T P + F N

.

(21)

VI. EXPERIMENTAL RESULTS

A. Visualizations of Datasets by PCA

Fig. 3 illustrates the visualization of three datasets using
PCA with 3 most important features. After using PCA, the
normal and malicious packets can be detected effectively with
high accuracy. In particular, in Fig. 3, normal packets are
grouped together and separated from malicious packets. Thus,
reducing dimensions in a high dimension dataset not only
reduces the computational complexity, but also diminishes
signiﬁcant amount of noise in the dataset, thereby increasing
the accuracy in predicting malicious packets.

TABLE I
THE COMPARISON BETWEEN OUR PROPOSE MODEL WITH OTHER MACHINE LEARNING ALGORITHMS ON THREE DATASETS.

Decision Tree
K-means
K Neighbours Classiﬁer
Logistic Regression
Multilayer Perceptron (MLP)
Gaussian Naive Bayes
Multinomial Naive Bayes
Bernoulli Naive Bayes
Random Forest Classiﬁer
Support Vector Machine (SVM)
Our Proposed Deep Learning Approach

NSL-KDD
PPV
63.62
84.96
77.19
62.04
63.62
73.98
65.52
87.47
71.21
64.70
81.95

TPR
68.50
56.95
71.39
73.79
68.5
41.67
59.90
36.49
70.99
70.80
77.48

ACC
87.91
82.78
88.56
89.52
87.91
88.33
83.96
74.60
88.39
88.32
90.99

UNSW-NB15
PPV
76.42
74.01
77.42
71.05
76.72
73.98
55.40
55.07
80.29
76.91
83.40

TPR
68.92
35.23
71.52
62.61
75.39
41.67
54.86
56.52
72.21
66.90
79.19

ACC
93.78
87.05
94.31
92.52
90.16
88.34
90.97
91.31
94.44
93.38
95.84

KDDcup 1999
PPV
94.14
89.16
94.12
86.29
90.87
83.91
83.65
89.54
94.42
91.59
94.43

TPR
92.52
65.47
92.13
90.69
91.91
73.22
74.16
77.35
92.56
91.86
92.77

ACC
97.01
86.19
96.85
96.2
96.77
89.29
89.66
90.94
97.02
96.74
97.11

B. Performance Evaluation

Table I compares the performance of the deep learning
approach with those of other machine learning algorithms,
some of which include K-means, K-neighbors classiﬁer, and
the random forest classiﬁer. We observe that the proposed
deep learning approach always achieves the best performance
in the terms of accuracy, precision, and recall (as deﬁned in
Section V-B), for the same datasets. In particular, the accuracy
of the deep learning approach is 90.99%, 95.84%, and 97.11%,
for NSL-KDD, UNSW-NB15, and KDDcup 1999 datasets,
respectively. Furthermore, both precision and recall parameters
achieved from the proposed approach are also much higher
than those of other machine learning algorithms.

In summary, there are two important observations from our

proposed deep learning model.

• Stability: Deep learning processes allow to achieve high
accuracy (up to 95.84%) under different settings of layers
and the number of neurons per layer.

• Robustness and ﬂexibility: Our deep learning model can
be used effectively to detect a variety of attacks on
different datasets with very high accuracy.

VII. SUMMARY

In this paper, we have introduced a deep learning approach
to detect cyber threats in the mobile cloud environment.
Through experimental results, we have demonstrated that
our proposed learning model can achieve high accuracy in
detecting cyber attacks, and outperform other existing machine
learning methods. In addition, we have shown the stability, ef-
ﬁciency, ﬂexibility, and robustness of our deep learning model
which can be applied to many mobile cloud applications.
For the future work, we will implement our proposed deep
learning model on the real devices and evaluate the accuracy
of the model on the real time basis. Furthermore, the energy
consumption and detection time of the deep learning model
will be evaluated and compared with other methods.

REFERENCES

[1] D. T. Hoang, C. Lee, D. Niyato, and P. Wang, “A survey of mobile
cloud computing: Architecture, applications, and approaches,” Wireless
Communications and Mobile Computing, vol. 13, no. 18, pp.1587-1611,
Dec. 2013.

[2] Louis Columbus, Roundup of cloud computing forecasts and market

estimates 2016, Forbes magazine.

[3] 2015 information security breaches survey, Technical Report, PWC.
[4] J. Cao, B. Yu, F. Dong, X. Zhu, and S. Xu, “Entropy-based denial-of-
service attack detection in cloud data center,” Concurrency and Compu-
tation: Practice and Experience, vol. 27, no. 18, pp. 5623-5639, Dec.
2015.

[5] M. N. Ismail, A. Aborujilah, S. Musa, and A. Shahzad, “Detecting
ﬂooding based DoS attack in cloud computing environment using covari-
ance matrix approach,” in IEEE International Conference on Ubiquitous
Information Management and Communication, Kota Kinabalu, Malaysia,
Jan. 2013.

[6] A. Sahi, D. Lai, Y. Li, and M. Diykh, “An Efﬁcient DDoS TCP Flood
Attack Detection and Prevention System in a Cloud Environment,” IEEE
Access, vol. 5, pp. 6036-6048, Apr. 2017.

[7] M. Chouhan and H. Hasbullah, “Adaptive detection technique for cache-
based side channel attack using Bloom Filter for secure cloud,” in IEEE
International Conference on Computer and Information Sciences, pp. 293-
297, Aug. 2016.

[8] K. Wang and Y. Hou, “Detection method of SQL injection attack in cloud
computing environment,” in IEEE Advanced Information Management,
Communicates, Electronic and Automation Control Conference, pp. 487-
493, Oct 2016.

[9] B. C. Youssef, M. Nada, B. Elmehdi, and R. Boubker, “Intrusion detection
in cloud computing based attacks patterns and risk assessment,” in
International Conference on Systems of Collaboration, pp. 1-4, Nov. 2016.
[10] A. Nezarat, “A game theoretic method for VM-to-hypervisor attacks
detection in cloud environment,” in Proceedings of the 17th IEEE/ACM
International Symposium on Cluster, Cloud and Grid Computing, pp.
1127-1132, May 2017.

[11] G. Nenvani and H. Gupta, “A survey on attack detection on cloud using
supervised learning techniques,” in IEEE Symposium on Colossal Data
Analysis and Networking, pp. 1-5, Mar. 2016.

[12] Y. LeCun, Y. Bengio, and G. Hinton, “Deep learning,” Nature, vol. 521,

no. 7553, pp. 436-444, May 2015.

[13] K. Kurihara and K. Katagishi, “A Simple Detection Method for DoS
Attacks based on IP Packets Entropy values,” IEEE Asia Joint Conference
on Information Security, Wuhan, China, Sept. 2014.

[14] I. T. Jolliffe, Principal Component Analysis and Factor Analysis, Prin-

cipal component analysis. Springer New York, 1986.

[15] J. Shlens, “A tutorial on principal component analysis,” arXiv preprint

arXiv:1404.1100, 2014.

[16] http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html
[17] M. Tavallaee, E. Bagheri, W. Lu, and A. A. Ghorbani, “A detailed anal-
ysis of the KDD CUP 99 data set,” IEEE Symposium on Computational
Intelligence for Security and Defense Applications, pp. 1-6, 2009.
[18] G. E. Hinton, S. Osindero, and Y-W. Teh, “A fast learning algorithm
for deep belief nets,” Neural computation, vol. 18, no.7, pp. 1527-1554,
2006.

[19] G. E. Hinton and R. R. Salakhutdinov, “Reducing the dimensionality
of data with neural networks,” Science, vol. 313, no. 5786, pp. 504-507,
2006.

[20] Y. Bengio, P. Lamblin, D. Popovici, and H. Larochelle, “Greedy layer-
wise training of deep networks,” Advances in neural information process-
ing systems, pp. 153-160, 2007.

[21] G. E. Hinton, “Training products of experts by minimizing contrastive
divergence,” Neural computation, vol.14, no. 8, pp. 1771-1800, 2002.

[22] G. E. Hinton, “A practical guide to training restricted Boltzmann

machines,” Momentum 9, no. 1, pp. 926, 2010.

[23] N. Mowla, I. Doh, and K. Chae, “Evolving neural network intrusion
detection system for MCPS,” in IEEE International Conference on
Advanced Communication Technology, pp. 183-187, Feb. 2017.

