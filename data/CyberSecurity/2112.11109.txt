This work has been submitted to the IEEE for possible publication. Copyright may be transferred without notice, after which this version may no
longer be accessible.

1

Network Anomaly Detection in Cars: A Case for
Time-Sensitive Stream Filtering and Policing

Philipp Meyer, Timo H¨ackel, Sandra Reider, Franz Korf, and Thomas C. Schmidt
Dept. Computer Science, Hamburg University of Applied Sciences, Germany
{philipp.meyer, timo.haeckel, sandra.reider, franz.korf, t.schmidt}@haw-hamburg.de

1
2
0
2
c
e
D
1
2

]
I

N
.
s
c
[

1
v
9
0
1
1
1
.
2
1
1
2
:
v
i
X
r
a

Abstract—Connected cars are vulnerable to cyber attacks.
Security challenges arise from vehicular management uplinks,
from signaling with roadside units or nearby cars, as well as
from common Internet services. Major threats arrive from bogus
trafﬁc that enters the in-car backbone, which will comprise
of Ethernet technologies in the near future. Various security
techniques from different areas and layers are under discussion
to protect future vehicles. In this paper, we show how Per-Stream
Filtering and Policing of IEEE Time-Sensitive Networking (TSN)
can be used as a core technology for identifying misbehaving
trafﬁc ﬂows in cars, and thereby serve as network anomaly
detectors. TSN is the leading candidate for implementing quality
of service in vehicular Ethernet backbones. We classify the impact
of network attacks on trafﬁc ﬂows and benchmark the detection
performance in each individual class. Based on a backbone topol-
ogy derived from a real car and its trafﬁc deﬁnition, we evaluate
the detection system in realistic scenarios with real attack traces.
Our results show that the detection accuracy depends on the
precision of the in-vehicle communication speciﬁcation, the trafﬁc
type, the corruption layer, and the attack impact on the link layer.
Most notably, the anomaly indicators of our approach remain
free of false positive alarms, which is an important foundation
for implementing automated countermeasures in future vehicles.

Index Terms—Time-Sensitive Networking, TSN, in-vehicular

networks, IVN, automotive security, network simulation, QoS

I. INTRODUCTION

I NTERNAL networks of current vehicles are based on

Controller Area Network (CAN) buses, which are assigned
to individual domains. They interconnect via a central gateway.
Ethernet is emerging as the core communication technology
for future In-Vehicle Networks (IVNs) due to its cheap avail-
ability, uncomplex architecture, and high bandwidth. A new
physical layer currently enables transmission speeds of up
to 1 Gbit/s via a single twisted pair while also meeting the
requirements on electromagnetic compatibility [1], [2]. It is
expected that IVNs will gradually transition to ﬂat Ethernet-
based communication [3]. At ﬁrst,
the traditional central
CAN gateway will be replaced by an Ethernet backbone
connecting domain gateways and additional high performance
Electronic Control Units (ECUs). Next,
the domains will
dissolve into zones which represent a physical location in the
car (e.g., front/left/right/rear) [4]. In this topology, each zone
contains a Zone-Controller (ZC), which acts as a gateway
between the bus domain and the Ethernet backbone. CAN
messages destined for a different domain in the same zone just

This work is funded by the German Federal Ministry of Education and

Research (BMBF) within the SecVI project.

traverse the ZC as with a traditional central gateway. CAN
trafﬁc toward an ECU of another zone must be forwarded
through the Ethernet backbone.

New features of modern vehicles are based on sensors,
actuators, and ECUs. Many current and future functions such
as advanced driver assistance or autonomous driving (level 3
to 5) require cross-domain communication with strict timing
constraints and at the same time substantial bandwidth to
accommodate streams from cameras, LIDARs and the like.
Advanced driver assistance functions and autonomous capa-
bilities are heavily dependent on inter-domain communication
throughout the vehicle, and, in addition, will more and more
exchange data with external peers (Vehicle-to-X (V2X)) such
as other vehicles, road infrastructure, and cloud services [5].
Connectivity introduces security challenges and rigid counter-
measures are needed to protect IVNs against attacks. With the
release of the ISO/SAE 21434 [6] standard for cyber security
in road vehicles, the industry is obliged to harden security
protection for future cars.

The attack surface of a vehicle spans various interfaces
with access distances ranging from on-site to anywhere on
earth [7]. For a holistic protection of future vehicles security
mechanisms in various areas and layers are under investiga-
tion [8]–[16]. In the event of a successful intrusion via vehicle
interfaces, monitoring in-car communication ﬂows enables
detection of misbehavior and execution of countermeasures in
the IVN. In-car network monitoring protects the car not only
from external attacks but also from compromised components
in the vehicle. Monitoring the link layer is crucial for detecting
behavior that inﬁltrates the safety and security of the vehicle –
and promises highest robustness as this is the lowest available
layer.

In recent years, several network technologies entered the
design discussion for enabling safe and secure communication
with high performance in IVNs. The technology transition
to shared Ethernet raises the challenge of meeting diverse
Quality-of-Service (QoS) requirements for domain-speciﬁc
in-car communication. The IEEE umbrella standard Time-
Sensitive Networking (TSN) [17] is a leading candidate to pro-
vide robust QoS guarantees in IVNs and industrial communi-
cation [18]–[20]. Software-Deﬁned Networking (SDN) intro-
duced the paradigm of programmable switches [21], which has
largely impacted data-center and campus networks. Use cases
of SDN extended to areas such as vehicular networks [22],
[23] and industrial plants [24]. In previous work, we explored
the application of SDN in real-time Ethernet IVNs and its

 
 
 
 
 
 
beneﬁts for security [25]–[27].

The industry standard Scalable service-Oriented Middle-
warE over IP (SOME/IP) [28] introduces Service-Oriented
Architecture (SOA) for IVNs. Even containerized services are
in discussion for deployment of dynamic functions in high
performance ECUs [29].

In this paper, we propose and investigate link-layer trafﬁc
monitoring based on TSN stream classiﬁcation. TSN provides
a precise notion of critical communication patterns, which
is a signiﬁcant advantage for in-depths monitoring. Early
work [30] could demonstrate that TSN-based anomaly detec-
tion opens powerful directions for bogus trafﬁc identiﬁcation
without false positives. Our main contributions read:

• We leverage the security potentials of TSN technologies,
which are already under design discussion for future
IVNs: TSNs ingress control Per-Stream Filtering and
Policing (PSFP) [17], [31] can be used as the core com-
ponent of an in-car Network Anomaly Detection System
(NADS). PSFP forces all inbound trafﬁc to match regular
patterns (e.g., timing, bandwidth, size) by dropping mis-
behaving frames. A NADS is established by combining
PSFP and central information processing (e.g., Network
Management, Software-Deﬁned Networking).

• We perform benchmarks in simulations to measure the
performance of the NADS mechanism. We classify pos-
sible impacts of attacks on the link layer and individually
analyze each impact class. Our results conﬁrm that the
detection schemes remain free of false positives.

• We present a case study in a simulated zonal IVN topol-
ogy with selected attack traces from CIC-IDS 2017 [32].
The stimuli conﬁgurations are based on OEM car com-
munication references. In all performed simulations, not
a single false alarm is raised while attack detection is
possible in the majority of cases.

The remainder of this work is structured as follows. In
Section II, we present the concept of Per-Stream Filtering
and Policing (PSFP) and its potential to detect anomalies.
We classify how attacks impact
the link layer in Section
III and assess the effectiveness of our detection approach
in simulations. Our case study in Section IV uses an OEM
car communication model to investigate the behavior of our
NADS in realistic scenarios. Section V compiles the problems
of cyber security for cars with its related work. Finally, we
conclude in Section VI with an outlook on future work.

II. TIME SENSITIVE NETWORKING IN CARS AND ITS
POTENTIAL TO DETECT ANOMALIES

In this section, we introduce the initial idea of how real-
time ﬂow management in IVNs can simultaneously identify
network anomalies. We start from the TSN standard, which en-
ables QoS guarantees in local networks by real-time extensions
for IEEE 802.1Q Ethernet [17]. These extensions comprise
mechanisms such as trafﬁc shaping [33], ingress control [31]
and time synchronization [34]. TSN paves the way for timing-
compliant Ethernet IVNs that strictly meet deadlines of safety
critical vehicular applications. Synchronous and asynchronous
trafﬁc streams of heterogeneous timing constraints share the

2

Fig. 1.

IEEE 802.1Qci Per-Stream Filtering and Policing (PSFP)

same links via time division multiplexing, trafﬁc shaping, and
prioritization. A given real-time trafﬁc deﬁnitions then makes
it possible to calculate a maximum delay and jitter for each
critical trafﬁc stream. Synchronous Time Division Multiple
Access (TDMA) trafﬁc can limit delays in the microsecond
range and jitter to the range of nanoseconds [35]. For this
work, TSN standard IEEE 802.1Qci Per-Stream Filtering and
Policing (PSFP) [31] are of particular interest.

In the following, we explain how (A.) PSFP can enforce
individual stream behavior in TSN infrastructures, (B.) PSFP
can conﬁgure a link layer NADS, and (C.) to implement our
concept in an SDN-based Ethernet backbone.

A. Per-Stream Filtering and Policing

The IEEE 802.1Qci Per-Stream Filtering and Policing
(PSFP) standard [31] deﬁnes per ﬂow control and enforces
rules on all incoming trafﬁc. Figure 1 shows how ﬁltering and
policing is applied to ingress trafﬁc in PSFP.

A frame needs to pass three stages prior to queueing. The
ﬁrst stage identiﬁes individual streams and maps them to
corresponding gates and meters. In the second stage, individual
gates are responsible for admission of incoming frames. The
state of stream gates can be static or change at runtime
based on a predeﬁned periodic schedule and network-wide
synchronized clocks. If a gate is “CLOSED”, incoming frames
will be dropped. If it is “OPEN”, a ﬂow meter in the third
stage measures the frames. Flow meters apply algorithms to
determine whether a frame is allowed to pass. For example, a
ﬂow meter can limit bandwidth or burst size and would mark
or drop a frame if it exceeds the bandwidth or burst allowance.
During the IVN design process, in-vehicle trafﬁc relations
are pre-deﬁned in a communication matrix of the vehicle and
annotated with behavioral properties such as timings, band-
widths, and bursts. The PSFP meter and gate conﬁgurations
must match this trafﬁc speciﬁcation exactly to assure safety
and security. Exact conﬁgurations avoid unwanted disturbance
by trafﬁc of misbehaving streams. Loosely deﬁned conﬁgu-
rations could tolerate misbehavior, which turns harmful for
concurrent streams, while too strict conﬁgurations could lead
to dropping frames of valid streams. We focus on the exact
PSFP conﬁgurations as the basis for in-car network anomaly
detection.

Flow MetersStream GatesStream FiltersGate ID 1Gate ID 2Gate ID PQueueingMeter ID 1Meter ID 2Meter ID QStream ID 1Gate ID 1Meter ID 1Stream ID 2Gate ID 1Meter ID 2Stream ID NGate ID 2Meter ID 2IngressB. Anomaly Detection with Per-Stream Filtering and Policing

Anomaly detection is a function of an Intrusion Detection
System (IDS), which can monitor from the perspective of a
host (H) or a network (N). There are two ﬂavors of IDSs [36].
(i) Signature detection systems that identify attack patterns by
predeﬁned signatures. These systems work reliably, but remain
limited to known attacks and their signatures. (ii) Anomaly
Detection Systems (ADSs) follow a behavioral approach by
using predeﬁned descriptions of regular patterns. Marking all
irregular patterns as attacks then serves the important objective
to also detect zero-day attacks in safety critical systems. The
ﬁner the regular patterns are described, the more precise an
ADS can operate.

Safety-critical communication ﬂows of in-car networks are
pre-deﬁned in the network design. In PSFP, each unique trafﬁc
ﬂow is represented as a link layer stream. Hence, the pre-
deﬁned link layer behavior of safety-critical communication
is already part of the PSFP conﬁguration. Following this
observation, the PSFP conﬁguration can be read as an im-
plicit description of the behavioral limit between normal and
malicious network behavior on the link layer. In this sense, a
frame drop by a PSFP rule indicates abnormal behavior and
functions as a detector of an anomaly—a valuable input for
detection of misbehavior.

In the following, we build on this observation and focus on
trafﬁc characteristics which cars in regular operations never
violate. This use case sees dropped and missing frames in
designated receive windows. Corresponding indicators operate
reliably in the sense that they remain free of false positives,
provided the PSFP conﬁguration of a given network is exact.
Managed switches collect statistics of network events for
administrative inspection. A TSN switch also records TSN-
speciﬁc statistics. The number of individual frame drops of
PSFP ﬂow meters and stream gates are such values of a TSN
switch. Traditional network management can use SNMP [37]
or NETCONF [38] to control and monitor local switches.
SDN-based networks can also collect data from forwarding
devices via OpenFlow [39]. Any central instance can aggregate
the statistics of all switches in the network and jointly examine
PSFP statistics, hence enabling an anomaly detection function
by applying appropriate algorithms.

The central collection of statistics from switches introduces
a delay, which adds to the time at which anomalies can be
reliably discovered. In our setting, this delay remains noncrit-
ical because PSFP is a self-protecting system that drops frames
which do not match the regular patterns. This local mechanism
prevents compromised streams to negatively impact concurrent
streams. Since network resource consumption is controlled by
PSFP, individual streams cannot exceed predeﬁned resources.
Hence, a corrupted stream without packet drops only consumes
resources as granted by PSFP, which remain too small to
compromise the system availability.

3

Fig. 2. Example of a PSFP based NADS by combination with SDN

Network Anomaly Detection System (NADS) is based on the
conﬁguration patterns in PSFP for regulating network trafﬁc.

C. Implementation in an SDN Backbone

SDN enables a programmable control plane and shifts
the control logic to a central controller. In contrast to tra-
ditional switches and routers with source address learning
and address resolution, the central SDN controller populates
ﬂow tables in forwarding devices using open standards such
as OpenFlow [39]. This drastically increases ﬂexibility and
controllability of the network [27]. Central knowledge and dy-
namic forwarding decisions also enable the implementation of
countermeasures by reconﬁguring the networking in response
to alarms.

In an SDN-based in-car backbone, events from PSFP in-
stances in individual switches reach the central SDN Con-
troller. For example, an advanced NADS application can be de-
ployed at the SDN controller without putting additional stress
onto the switches or adding additional devices to the network.
Such a NADS controller application can use individual events
and inspect these in combination with other reports.

Figure 2 visualizes the operation of a NADS with PSFP and
SDN infrastructure. Each port (0 − n) of the TSN switches
0 to i has an instance of PSFP containing its individual
conﬁguration. All switches monitor events per port of their
running PSFP instances (e.g., frame drops). The PSFP in port 0
of switch 0 receives a frame that violates a meter conﬁguration
and gets dropped. This event is monitored and recorded in
switch 0. Switch 0 forwards these event statistics upstream to
the SDN controller. The NADS application of the controller
inspects whether the data of the switches indicate a trafﬁc
anomaly in the vehicle network (e.g., number of dropped
frames is increased). Whenever an anomaly is detected, the
NADS controller application could send combined reports to
a higher instance (e.g., a cloud defense center [15]), or initiate
countermeasures by reconﬁguring the network ﬂow tables or
the TSN settings.

III. BENCHMARKING ANOMALY DETECTION

In summary, PSFP combined with event monitoring in
switches and network management provide a toolbox that can
detect anomalies in the network reliably and prevent resource
exhaustion. It is noteworthy that all of these technologies are
already in discussion for an IVN deployment. The proposed

We now proceed to a systematic exploration of the detection
performance for our network anomaly indicators. We evaluate
how reliably PSFP statistics can serve as link layer monitors
in the presence of attacks. We ﬁrst characterize the attack
impact classes, the assessment metrics, and the simulation

In-Car NetworkSwitch 0Port 0Per-Stream Filtering and PolicingPort 1Port nMonitor 0Monitor 1Monitor nPer-Stream Filtering and PolicingPer-Stream Filtering and PolicingSDN ControllerNADS ApplicationNETCONF or OpenFlowSwitch i4

environment. Then we present the results of all dedicated
benchmarks.

A. Classiﬁcation of Attack Impacts

Attack trafﬁc traversing a network has an effect on its
links that becomes visible at ingress points. We classify these
impacts based on all possible interactions of Ethernet frames
into seven impact classes: Elimination, injection, inspection,
manipulation, redirection, reordering, and rescheduling. Any
possible attack traversing the Ethernet link layer belongs to at
least one of these classes.

Figure 3 shows a stream and its frames traversing the
network in a baseline scenario without impairment. Our focus
is on an intermediate, “current” node, at which a TSN PSFP
inspects all incoming frames.

Fig. 7. A traversing stream is impaired by manipulation of frames

5) Redirection: A rerouting of frames to a differing paths in
a network. In Figure 8, frame number 2 is redirected to another
next hop by a previous node. Hence, frame 2 is missing in
the stream reaching the current node, which can be observed
but remains indistinguishable from frame elimination. On the
counter side, redirection appears as an injection. A wide area
network correspondence for this attack is route poisoning or
hijacking. In a local SDN topology a compromised controller
can also manipulate the ﬂow tables in the forwarding devices.

Fig. 3. A stream traversing a network without impairment

1) Elimination: An attack impact that impairs a stream by
removing frames. In Figure 4, frame number 2 is eliminated
by one of the previous nodes and detected as missing at
the current node. This observation corresponds to blackholing
scenarios in wide area networks.

Fig. 8. A traversing stream is impaired by frame redirection

6) Reordering: A change in frame sequence. In Figure 9,
the frame order is changed from 1 → 2 → 3 to 2 → 3 → 1. An
attack example for reordering is message sequence violation
of communication protocols. If not executed at the source, a
frame is taken and inserted after any number of other frames
passed. Reordering of frames is observable at the current node
in particular as it changes the timing of frames.

Fig. 4. A traversing stream is impaired by eliminated frames

2) Injection: A stream modiﬁcation by additional frames
that are inserted at a previous node. In Figure 5, new frames
are injected between frame 1, 2, and 3 as observable by the
current node. Common examples for this class are Denial of
Service (DoS) and Distributed DoS (DDoS) attacks, but also
replay attacks.

Fig. 5. A traversing stream is impaired by injected new frames

3) Inspection: An unauthorized observation of frames. The
traditional example for this class is eavesdropping. The actual
inspection introduces no changes to the observed stream (see
Figure 6), but compromises its conﬁdentiality. The current
node is not able to observe this impairment.

Fig. 6. A traversing stream is impaired by an inspection of frames

4) Manipulation: A modiﬁcation of frame payloads. In
Figure 7, a stream is impaired by manipulating frame 2 at
a previous node. This class includes attacks such as spooﬁng
or application data corruption. If corresponding header values
(e.g., checksum and length) remain unadjusted, or manip-
ulated packets violate the constraints of the stream class,
manipulation of frames can be observed at the current node.
Manipulations that change the stream afﬁliation will either
appear as a combination of stream elimination and injection,
or result in unknown streams.

Fig. 9. A traversing stream is impaired by frame reordering

7) Rescheduling: Changing the points in time, at which
individual stream frames are forwarded. In Figure 10, frames
1 and 2 are slightly delayed. This also could be an impact
of a malicious manipulation of drift clocks via the time
synchronization protocol. Changes in timing are observable
at the current node.

Fig. 10. A traversing stream is impaired by timing alteration of frames

B. Metrics

We use traditional metrics to evaluate and compare our
classiﬁcation results. These are also selected in the assessment
method for automotive IDS performance authored by the U.S.
National Highway Trafﬁc Safety Administration [40]. Table I
summarizes these metrics.

Precision represents the accuracy of identiﬁed alarms. With-
out False Positives (FP) the Precision equals 1, but decreases
with increasing FPs:

P recision =

T P
T P + F P

Recall represents the fraction of detected attacks from all
attacks. Without False Negatives (FN) the Recall equals 1, but
decreases with increasing FNs:

Recall =

T P
T P + F N

Stream123CurrentNodeNextNodesPreviousNodesStreamNextNodes13PreviousNodes  EliminationCurrentNodeStreamNextNodes123CurrentNodePreviousNodesInjectionStreamNextNodes123PreviousNodesInspectionCurrentNodeStreamNextNodes123PreviousNodesManipulationCurrentNodeStreamNextNodes123PreviousNodes  RedirectionCurrentNodeStreamNextNodes123PreviousNodes ReorderingCurrentNodeStreamNextNodes123PreviousNodesTimingCurrentNodeTABLE I
METRICS SUMMARY

Metric

Description

False Negatives
False Positives
True Positives
Precision
Recall

(FN)
(FP)
(TP)

Number of unidentiﬁed attacks
Number of false alarms
Number of identiﬁed attacks
Fraction of alarms that identiﬁed attacks
Fraction of identiﬁed attacks out of all attacks

In driving operations, FPs in combination with automated
countermeasures can cause damage. Even a very small FP rate
like 0,001% for a message with a viable cycle of 100 ms leads
to an average false positive every 2.8 operating hours. This
may quickly degrade conﬁdence in the Anomaly Detection
(AD) mechanism.

it

Due to the strict safety requirements for vehicles,

is
important to establish a highly trustworthy ADS. In particular,
a NADS in the vehicle must achieve high precision. As of
today, there is no technology that can detect all possible known
and unknown attacks on a system, which – outside of test
environments – always leads to realistic recall values < 1.
ADSs try to maximize detection rates by their ability to detect
zero-day attacks.

C. Simulation Environment and its Conﬁguration

We use the discrete event simulator OMNeT++ for the
benchmark execution. Figure 11 shows the frameworks in use
for the simulations. We use this environment as the base for
all simulations in this paper.

Fig. 11. Simulation environment for detection benchmark and case study

Basis of the environment is the OMNeT++ discrete event
simulator. The combination with the INET framework [41]
enables the simulation of Ethernet networks. In the past years,
we have build and published a comprehensive open-source
environment [42] for simulating IVNs in OMNeT++ [43].
The frameworks marked in red (CoRE4INET, FiCo4OMNeT,
SignalsAndGateways, and SDN4CoRE) are parts of
this
past work. They enable the concurrent simulation of real-
time Ethernet (e.g., TSN), ﬁeldbusses (e.g., CAN), gateways
(e.g., CAN/Ethernet Gateways), and SDN.

In a ﬁrst step, our goal is to keep the topology as simple as
possible for executing micro-benchmarks. Later in Section IV,
we assess performance values in a case study using a real-
world IVN topology. Figure 12 depicts the topology for all
micro-benchmark simulations.

5

Fig. 12. Topology of the simulated network for the detection benchmark

The initial

topology consists of three nodes linked via
100 Mbit/s Ethernet. Since different Ethernet speeds just
rescale, the ﬁndings will remain applicable for lower and
higher maximum Ethernet throughput. All trafﬁc is generated
at
the source host and directed through a switch to the
sink host. To assess how the trafﬁc type affects detection
performance, three different trafﬁc patterns and background
cross-trafﬁc are transmitted from the source host:

• Timed control trafﬁc: Maximal Ethernet frames for-
warded with the highest 802.1Q priority (7) in a syn-
chronized TDMA schedule that reserves time slots on the
links in a static period of 0.5 ms. All other trafﬁc shares
the remaining time slots according to their priorities.
• Shaped data stream: A data stream with a bandwidth
of ∼17 Mbit/s. 802.1Q priority is set
to 6 and the
trafﬁc is shaped by Credit Based Shaping (CBS). The
CBS maintains a credit value that ensures a stream does
not exceed its reserved bandwidth, while still allowing
bursts to make up for time slots where the bandwidth
was not reached due to concurrent trafﬁc. The remaining
bandwidth is available to lower priorities.

• Prioritized CAN tunnel: Legacy CAN messages encap-
sulated in Ethernet frames with a 802.1Q priority set to
5. Messages are generated in a period of 0.5 ms.

• Background cross trafﬁc: Cross trafﬁc generates net-
work load and concurrently increases the mix of trafﬁc.
It is generated without 802.1Q tag from uniformly dis-
tributed packet sizes and intervals (125 µs–500 µs).
The switch operates with pre-conﬁgured PSFP at the port next
to the source host. The following single conﬁgurations per
trafﬁc type enforce key properties of a valid behavior:

• Timed control trafﬁc: The states of all PSFP stream
gates dependend on a synchronized gate control
list.
Every frame that arrives at the switch port during a closed
gate period gets dropped. Regular TDMA trafﬁc always
reaches the respective stream gate in open state.

• Shaped data stream: As for the CBS, a Credit Based
Metering (CBM) [44] is applied to meter a PSFP ﬂow
and enforce bandwidth reservation. Frames that exceed
the reserved bandwidth for a stream get dropped.

• Prioritized CAN tunnel: An encapsulated CAN message
(maximum 16 B) always results in a minimum Ethernet
frame. Therefore, PSFP is conﬁgured to drop all frames
with a size that exceeds 64 B.

• Background cross trafﬁc: A stream ﬁlter matches cross
trafﬁc to grant passage of PSFP without speciﬁc rules.
• Undeﬁned stream: PSFP drops all trafﬁc that does not

match any stream ﬁlter.

FiCo4OMNeTCAN / FlexRayCoRE4INETIEEE 802.1Q / TSN /AVB / AS6802SignalsAndGatewaysCAN<->CAN / Ethernet<->CANINET frameworkEthernet / Internet Protocol / TCP / UDPOMNeT++Discrete Event SimulatorOpenFlowOpenFlow ProtocolSDN4CoRENetConf / TSN + SDN  Source HostSinkHostSwitchPer-Stream Filtering and PolicingCorruptionTABLE II
OVERVIEW OF ATTACK IMPACTS IN OUR BENCHMARKS

TABLE III
NO. OF PSFP FRAME DROPS (FPS) IN THE BASELINE BENCHMARK

Attack impact

Details

Benchmark

Simulation run

No. of frames in PSFP

6

III-A1 Elimination
III-A2 Injection
III-A3 Inspection

Deletion of frames
Generation of additional frames
Observing frames and contents: Not
observable in stream behavior
III-A4 Manipulation Modiﬁcation of frame contents
III-A5 Redirection

Change route of frames:
Indistinguishable
from
III-A2, or III-A4
Change of frame sequences

III-A1,

III-A6 Reordering
III-A7 Rescheduling Delay frames

Yes
Yes
No

Yes
No

Yes
Yes

Table II gives an overview of the attack impacts that will
be analyzed in our benchmarks. Five of the seven attack
mechanisms are implemented in the simulation environment.
We exclude inspection (cf., Section III-A3) and redirection
(cf., Section III-A5). Inspection has no effect on the behavior
of trafﬁc streams and hence remains unobservable. Redirection
is excluded because it cannot be distinguished from elimina-
tion, injection, or manipulation.

Figure 13 shows stream corruptions implemented on two
different layers within the stack of the source host. The frames
for each stream are generated at the application layer and
forwarded onto the link layer before leaving the device. To
cover all elements of compromise, modiﬁcations of a stream
can be conﬁgured to occur between application layer and link
layer (application layer corruption), or between link layer and
physical port (link layer corruption). As the major difference,
application layer corruptions need to pass TSN trafﬁc shaping,
while link layer corruptions are conducted thereafter. In our
benchmarks, each case will be executed on both layers.

Fig. 13. Placement of the corruption layers for simulation in source host

D. Results

We now present the benchmark results. The benchmarks are
divided into a baseline scenario without modiﬁcations and ﬁve
scenarios with corruptions.

The baseline scenario contains only regular trafﬁc, i.e., all
streams behave as designated. For this reference benchmark,
10 simulation runs (10 s length) with randomly varying con-
ditions are executed to maximize state coverage. The results
show zero frame drops in all simulations by any module
including PSFP (cf., Table III). Not a single frame was dropped
at any time. This does not imply that no valid frame will be

Arrived

Forwarded

Dropped (FP)

#0 — #9

1,199,688

1,199,688

0

dropped by PSFP as a result of misbehaving streams. But,
frames are only dropped when a stream is misbehaving. There
is no false positive detection of misbehavior. From this follows
FP=0 when using drop indicators. This results in a perfect
Precision value of 1 for all benchmarks:

P recision =

T P
T P + F P

=

T P
T P + 0

= 1

Assuming that the NADS detects attacks, a Precision value
of 1 indicates a highly trustworthy system. To evaluate the
overall NADS performance, however, the rate of Recall must
also be taken into account.

In each simulation (10 s length) with corruption exactly one
of the three trafﬁc patterns (timed control trafﬁc, shaped data
stream, prioritized CAN tunnel) is modiﬁed on one layer. For
ﬁve different attacks, this results in 30 different simulation
runs. All stream modiﬁcations and frame drops are counted
and recorded during the simulations. The corrupted events are
randomized to maximize state coverage. They take a minimum
interval of 1 ms to make them distinguishable for analysis.

The numbers of randomly corrupted events range from 5000
to 10000 per simulation. Only events from PSFP are used as
anomaly indicators. In a ﬁrst step, only frame drop events are
considered. Table IV summarizes the results.

1) Elimination: Elimination is conﬁgured to delete frames
of the observed stream with a measure of coincidence (proba-
bility: 50%). Since only frames are missing from the stream, it
is expected that this type of corruption is not detectable using
drops inside PSFP as anomaly indicators. The results in Table
IV conﬁrm the expectation. The Recall value is zero for all
trafﬁc patterns.

2) Injection: Frames are injected into each stream in a
uniformly distributed interval. The distribution length corre-
sponds to the Maximum Transmission Unit (MTU) of Ethernet
(≈125 µs on 100 Mbit/s links). This is done to increase the
number of distinct network states represented in the simulation
runs. Therefore, the size of each frame is also determined
by a uniformly distributed payload size ranging between the
allowed minimum (0 B) and maximum (1500 B). The results
in Table IV show that for trafﬁc shaped by TSN on link layer
(shaped data stream, timed control trafﬁc) the detection of
application layer corruptions is worse than of link layer cor-
ruptions. The reason is that the scheduling and shaping of TSN
enforces a determined stream behavior and thus the inﬂuence
of application layer corruptions on stream behavior is less
powerful. Scheduling and shaping generates a deﬁned stream
behavior and PSFP ensures that aspects of the behavior are
adhered to. Timed control trafﬁc if forwarded on pre deﬁned
time windows. PSFP also only allows reception in those time

Source HostLink Layer(TSN)Application Layer(Source)XORApplication Layer CorruptionLink Layer CorruptionCorruptionTABLE IV
DROP DETECTION BENCHMARK RESULTS
TRUE POSITIVES (TP) / FALSE NEGATIVES (FN) / RECALL (R)
FOR ALL SIMULATIONS: FALSE POSITIVES = 0 =⇒ PRECISION = 1.0

7

Trafﬁc pattern

Elimination

Injection

Manipulation

Reordering

Rescheduling

TP

FN

R

TP

FN

R

TP

FN

R

TP

FN

R

TP

FN

R

Timed control trafﬁc
Shaped data stream
Prioritized CAN tunnel

Timed control trafﬁc
Shaped data stream
Prioritized CAN tunnel

0
0
0

0
0
0

6646
8918
6664

5656
8367
5616

0.0
0.0
0.0

0.0
0.0
0.0

Application Layer Corruption

6814
0
9145

2602
9412
263

0.72
0.0
0.97

5356
0
6489

1254
8880
173

Link Layer Corruption

8701
8931
9204

706
483
207

0.92
0.95
0.98

4606
5862
5584

1073
2513
165

0.81
0.0
0.97

0.81
0.7
0.97

0
0
0

6635
8875
6659

5616
2
0

1
8389
5696

0.0
0.0
0.0

1.0
0.0
0.0

3
0
0

6622
8882
6657

0.0
0.0
0.0

4382
1
0

1253
8378
5692

0.78
0.0
0.0

TABLE V
DROP & TDMA LOSS COMBINATION DETECTION BENCHMARK RESULTS
TRUE POSITIVES (TP) / FALSE NEGATIVES (FN) / RECALL (R)
FOR ALL SIMULATIONS: FALSE POSITIVES = 0 =⇒ PRECISION = 1.0

Trafﬁc pattern

Elimination

Injection

Manipulation

Reordering

Rescheduling

TP

FN

R

TP

FN

R

TP

FN

R

TP

FN

R

TP

FN

R

Timed control trafﬁc

6645

Timed control trafﬁc

5656

1

0

Application Layer Corruption

1.0

6818

2598

0.72

5356

1254

0.81

1

6634

0.0

4

6621

0.0

Link Layer Corruption

1.0

8701

706

0.92

4606

1073

0.81

5617

0

1.0

4382

1253

0.78

windows shifted by the transmission delay. All frames injected
in application layer will accumulate together with valid frames
in the queues of the corruption source. Injected frames that do
not inﬂuence transmission delay through differing size will
not be dropped in PSFP. In case of the shaped data stream the
CBS is shaping the trafﬁc exactly on speciﬁcation. The CBM
in PSFP is not dropping any frames and the NADS has a Recall
value of 0. For a stream with strict priority shaping and a ﬁxed
frame size (prioritized CAN tunnel) the detection performance
is independent from the injection layer. All frames with a size
not matching the PSFP conﬁguration are dropped.

3) Manipulation: A frame manipulation in the respective
stream takes place with a factor of randomness (probability:
50%). The manipulation modiﬁes the payload. The new Ether-
net payload has a uniformly distributed size ranging between
the minimum (0 B) and maximum (1500 B). In some cases
this is the same length as the valid frame, but in most cases
the new frame length differs. Again, no application layer cor-
ruptions are detected for the shaped data stream. CBS shapes
the frames correctly according to their size. Differing frame
sizes do not change the forwarded bandwidth of the stream
in their respective measurement intervals. Manipulations on
timed control trafﬁc and prioritized CAN tunnel frames were

detected with a high Recall value (cf., Table IV).

4) Reordering: With coincidence (probability: 50%) a
frame is taken from a stream and then delayed to be inserted
after the next frame of the same stream. Since reordering
has no effect on frame size or bandwidth consumption, it is
not detectable in most cases without further inspection of, for
example, sequence numbers. For reordering of timed control
trafﬁc on application layer, the TDMA timing is enforced by
the source host on link layer. In this case, only the loss of
the taken frame is an observable misbehavior. On the other
hand, the timing of frames for link layer reordering is not
dependent on the conﬁgured shaping. Therefore, those frames
miss the period where the respective gate is open in PSFP of
the switch. This causes almost all reordered frames of timed
control trafﬁc to be dropped.

5) Rescheduling: Frames of the corrupted stream get de-
layed randomly (probability: 50%) by a uniformly distributed
time. Again, distribution length corresponds to the MTU of
Ethernet (≈125 µs). Timed control
trafﬁc is the only one
with a PSFP conﬁguration dependent on timing. Once again,
the source host gates enforce the designed timing for send
windows. Therefore, the wrong timing is not detected for
application layer but for link layer corruptions.

6) Improvement with TDMA loss detection: In addition to
frame drops, other statistics can also be used as anomaly
indicators. These can be selected in such a way that further
modiﬁcations become recognizable and the Recall increases.
In order to obtain 100% precision, further indicators must
be selected in such a way that no false alarms occur. In the
following example a loss recognition is implemented using a
counter for frames that pass through an opened gate. This
counter exactly increases by one for each opened window
in our case with timed control trafﬁc. If the counter is not
increased during an open gate window, an expected packet
has not arrived. Further 10 simulations without corruption have
shown that this anomaly indicator also has an FP value of 0 for
the static timed control trafﬁc. Table V shows the simulation
results for all modiﬁcations on timed control trafﬁc with a
NADS using frame drops and the TDMA loss detection in
combination.

With the addition of loss detection all 5 link layer cor-
ruptions are detectable for critical TDMA-based trafﬁc. The
Recall minimum is 0.78 and goes up to the maximum of 1.
At the same time, a Precision value of 1 highlights a strong
and reliable performance for link layer network anomaly de-
tection. Corruptions with a high Recall value indicate a strong
deviation from the speciﬁed stream behavior and thus can have
a strong impact on network performance and competing real-
time streams. The detection performance increases analogous
to those higher risk modiﬁcations.

Tailored indicators and strict PSFP conﬁgurations lead to
further improvements in Recall. In this way, a TSN trafﬁc
conﬁguration not only optimizes latency and jitter, but can
also improve security for data streams on the link layer by
improving preventability and detectability of misbehavior.

IV. CASE STUDY

We now proceed to evaluate our NADS approach in a
real-world environment. We use the simulation techniques
presented in section III-C with a zonal IVN topology based
on a real car communication matrix. First, we simulate regular
trafﬁc with a strict PSFP conﬁguration to conﬁrm the absence
of false positives. Next, we replace legitimate streams from
the car network by selected attacks derived from the CIC-
IDS 2017 [32] dataset to investigate the impact on PSFP drops.

A. In-Vehicle Network Topology

The network topology of our sample car is split

into
nine zones (3xFront, 3xCenter, 3xRear) and contains four
types of devices (CAN hosts, Ethernet hosts, switches, zonal
controllers) as visualized in Figure 14. Each zonal controller
represents a zone of the topology. CAN hosts are connected
via buses to the closest zonal controller depending on physical
placement. The CAN trafﬁc is derived from a communication
matrix of a real production car. CAN messages sent between
zones traverse the Ethernet backbone (100 Mbit/s links),
which consists of three interconnected switches. In addition to
the zonal controllers, cameras, LIDARs, a radar, infotainment,
collision avoidance, and sensor fusion are also using this
backbone for communication.

8

Fig. 14. Zonal IVN topology used in the case study based on a real world
communication matrix

There are three trafﬁc types in this network:
• Timed control trafﬁc: Synchronous frames with 802.1Q
priority 7 that are sent from “Radar” and “Sensor Fusion”
to “Collision Avoidance”. A static TDMA schedule in
each network device implements exclusive send time slots
for this synchronous trafﬁc.

• Shaped data streams: Cameras and LIDARs stream data
with 802.1Q priority 5 to the “Sensor Fusion” ECU. For
this trafﬁc, bandwidth is reserved along its paths, and a
CBS shapes the egress.

• Prioritized CAN tunnel: CAN messages that are ex-
changed between devices located in different zones are
tunneled via Ethernet. There are a total of 416 different
CAN IDs generated by the CAN hosts of which 201 are
transported over the Ethernet backbone. They are mapped
to four different 802.1Q priorities (0,1,3,6) depending on
their criticality.

Each port is conﬁgured for PSFP for each incoming trafﬁc
type. This results in a total of 21 PSFP instances in the three
switches. All conﬁgurations use parameters of the network
design to check for valid behavior. We use four different types
of ingress control in this case study:

• Timing: This conﬁguration uses the static TDMA sched-
ule of the time control trafﬁc to accordingly set the gate

Camera FrontRadarLIDAR FrontLeftLIDAR FrontRightZone FrontLeftZone FrontRightSwitch FrontSwitch RearSwitch RearSwitch CenterZone FrontInfotainmentZone CenterLeftZone CenterRightZone CenterCollision AvoidanceCamera RearZone RearLeftZone RearRightZone RearSensor FusionEthernet HostSwitchZonal Controller &CAN-Ethernet GatewayZonal Controller &CAN-Ethernet Gatewaycontrol list that drives the state of the stream gates.
• Bandwidth: For the shaped data streams a metering
is conﬁgured to enforce a maximum incoming band-
width [44].

• Frame size: Because a prioritized CAN tunneling frame
contains only one CAN message the size of these Ethernet
frames is always 64 B. For the ingress control of this
trafﬁc a meter drops all frames larger than 64 B.

• Undeﬁned trafﬁc: Ingress control drops trafﬁc without

a matching stream ﬁlter.

B. In-Vehicle Network Scenarios

The following simulations are divided into four scenarios.
All simulations share an identical TSN conﬁguration and cover
a period of 10 s.

The ﬁrst scenario contains simulations without corruption to
verify that no FPs occur. This baseline scenario contains only
regular IVN trafﬁc. To maximize case coverage 10 simulations
with different pseudo random number generator seeds are
executed. In all simulations without corruption, not a single
frame is dropped by any PSFP instances (cf., Table VI). This,
again, indicates zero FP and maximal Precision.

Next, three scenarios use exemplary attacks exported from
CIC-IDS 2017 [32] (SSH-Patator, Web Attack Brute Force,
DoS Slowloris). All attacks included in CIC-IDS 2017 are
application layer corruptions from the PSFP perspective. The
PCAPng trace excerpts of these attacks contain frames tar-
geting the same destination. This enables the matching into
IVN streams by replacing MAC addresses and adding a Q-
Tag (VLAN and priority). The three attack traces contain
8 to 26 frames. In each simulation containing an attack
one of the three participant (Radar, Camera Front, Zonal
Controller FrontLeft) gets corrupted and performs an attack.
Each scenario contains three simulation runs in which one
network participant is the source of one modiﬁed trafﬁc type
(timed control trafﬁc, shaped data stream, prioritized CAN
tunnel).

1) SSH-Patator: Patator is a tool for brute force attacks
using a multitude of protocols (e.g. FTP, SSH, DNS). The
CIC-IDS 2017 trace excerpt used in this scenario contains
trafﬁc of a SSH login brute force attack.

The corrupted stream sources during three different simula-
tions are Radar, Camera Front and Zonal Controller FrontLeft.
Switch Front is the ﬁrst hop for all corrupted streams and
thus the ﬁrst point where PSFP is applied. The ﬁrst column of
ﬁgure 15 shows the SSH-Patator attack trace content and the
respective PSFP drops in Switch Front that where collected
during the three different simulations:

Radar → Collision Avoidance (Control trafﬁc): The reg-
ular timed control trafﬁc from Radar to Collision Avoidance is
replaced by SSH-Patator trafﬁc. The send timing in the source
Radar is ensured through the TSN scheduling and shaping
conﬁguration. Nevertheless, all frames miss their arrival time
window on Switch Front because their size is larger than the
regular 64 B. Therefore, the gates in the responsible PSFP
instance are closed when the frames arrive and they get
dropped. The NADS detects the stream corruption.

9

TABLE VI
SUM OF PSFP FRAME DROPS (FPS) IN THE BASELINE SCENARIO

Simulation run

Sum of frames in all PSFP instances

Arrived

Forwarded

Dropped (FP)

#0 — #9

3,166,150

3,166,150

0

Camera Front → Sensor Fusion (Data stream): SSH-
Patator trafﬁc replaces the regular shaped data stream. Not a
single frame is dropped in Switch Front, so a detection is
not possible. The reason is the same as in the application
layer corruption benchmarks (s. Section III): The CBS at
Camera Front shapes the attack trafﬁc exactly according to
the speciﬁcation.

In this case however, one frame of this stream gets dropped
in PSFP of Switch Center which is shown in green. Inter-
ference with other trafﬁc between Switch Front and Switch
Center causes the CBS in Switch Front to transmit a burst
that is not allowed by the PSFP conﬁguration in Switch Center.
Since PSFP operates on individual streams, it is still possible
to infer to the misbehaving stream. This shows that detection
improvements are possible for shaped data streams.

Gateway FrontLeft → Gateway * (CAN tunnel): One
CAN tunnel stream is replaced by the SSH-Patator trafﬁc.
Here, too, the regular trafﬁc consists of minimal Ethernet
frames (64 B) each containing only one CAN message at a
time. The PSFP instance drops larger frames because the ﬂow
meter is conﬁgured to enforce the minimum Ethernet frame
size. All attack frames are larger and get dropped in Switch
Front. The stream corruption is detected.

2) Web Attack Brute Force: The CIC-IDS 2017 trace ex-
cerpt contains an attempt to login via HTTP using a password
list.

Again, the second column in ﬁgure 15 shows the Web
Attack Brute Force attack trace content and the respective
PSFP drops in Switch Front that where collected during three
simulations:

Radar → Collision Avoidance (Control

trafﬁc): This
time, Radar timed control trafﬁc is replaced by trafﬁc from a
Web Attack Brute Force trace. The larger frames are dropped
again because they miss the time window for allowed reception
in Switch Front. The frames at 0.2 s and 5.2 s simulation time,
however, are not dropped. They are small enough (74 B) to
meet the conﬁgured timing requirement and arrive just before
the responsible PSFP gate closes. Despite this, the corruption
is detectable because some attack frames are dropped.

Camera Front → Sensor Fusion (Data stream): The
shaped data stream of Camera Front is corrupted by Web
Attack Brute Force trafﬁc. Like before, the Camera Front
CBS shapes the attack trafﬁc exactly on speciﬁcation. Switch
Front PSFP drops no trafﬁc. This time, no severe misbehavior
is constituted through concurrency with other streams after
Switch Front and no frame is deleted at any location. There-
fore, detection is not achieved.

Gateway FrontLeft → Gateway * (CAN tunnel): Web
Attack Brute Force trafﬁc is injected into a CAN tunnel stream.

]

B
k
[

e
z
i
s

e
m
a
r
F

1

0
1

0
1

0
1

0

SSH-Patator
Section IV-B1

Attack trace

Web Attack Brute Force
Section IV-B2

Attack trace

DoS Slowloris
Section IV-B3

Attack trace

10

Radar → Collision Avoidance
Timed Control Trafﬁc

Radar → Collision Avoidance
Timed Control Trafﬁc

Radar → Collision Avoidance
Timed Control Trafﬁc

Camera Front → Sensor Fusion
Shaped Data Stream

Camera Front → Sensor Fusion
Shaped Data Stream

Camera Front → Sensor Fusion
Shaped Data Stream

Gateway FrontLeft → Gateway *
Prioritized CAN Tunnel

Gateway FrontLeft → Gateway *
Prioritized CAN Tunnel

Gateway FrontLeft → Gateway *
Prioritized CAN Tunnel

0 1 2 3 4 5 6 7 8 9 10

0 1 2 3 4 5 6 7 8 9 10

0 1 2 3 4 5 6 7 8 9 10

Simulation time [s]

Attack frame transmission

Switch Front frame drop

Switch Center frame drop

Fig. 15. Selected attacks (SSH-Patator, Web Attack Brute Force, DoS Slowloris) from the CIC IDS 2017 dataset abuse different trafﬁc types (timed control
trafﬁc, shaped data stream, prioritized CAN tunnel) of three ECUs (Radar, Camera Front, Gateway FrontLeft) and their impact on PSFP frame drops in Switch
Front and Switch Center

All attack frames, even the small ones (at 0.2 s and 5.2 s), are
dropped because they are larger (74 B) than the Switch Front
PSFP instance allows (64 B). The system detects the stream
corruption.

All frames that are not minimal (64 B) get dropped. Both mini-
mum frames at 5.17 s can pass the Switch Front PSFP, because
in this case only the frame size is enforced. Nevertheless, the
attack is detected.

3) DoS Slowloris: This trace contains a Slowloris DoS that
tries to stress a server by opening multiple simultaneous HTTP
connections.

The third column in ﬁgure 15 shows the DoS Slowloris
attack trace content and the respective PSFP drops in Switch
Front that where collected during three simulations:
Radar → Collision Avoidance (Control

trafﬁc): DoS
Slowloris trafﬁc replaces the timed control trafﬁc from Radar.
All larger frames are dropped again. The trace contains mini-
mal Ethernet frames (64 B) which are not dropped by PSFP.
An exception in this case are two minimal frames at 5.17 s.
They are sent by the source app with a gap of 229 µs and
both arrive in the outgoing queue of Radar before the send
interval starts. After the gate for the outgoing queue is open,
both frames are transmitted consecutively. The ﬁrst frame
passes through the Switch Front PSFP. The second frame gets
dropped on arrival because it does not ﬁt into the Switch Front
PSFP time window after the ﬁrst frame. Corruption detection
is successful.

Camera Front → Sensor Fusion (Data stream): The
shaped data stream corrupted by DoS Slowloris shows the
same results as for SSH-Patator and Web Attack Brute Force
attacks. No detection is possible because no frames are
dropped.

Gateway FrontLeft → Gateway * (CAN tunnel): One
prioritized CAN tunnel stream is replaced by DoS Slowloris.

C. Findings

Datasets with real attacks on TSN link layer do not exist
and thus could not feed into our realistic environment. The
case study conﬁrms the results seen in the application layer
benchmarks for all evaluated scenarios. There are zero false
positive detections in a realistic automotive setup with a
strict PSFP conﬁguration based on a real car communication
matrix. Real attacks are reliably detected in all scenarios,
except for shaped data stream corruptions. The data stream
corruptions are not detectable on the link layer because the
CBS trafﬁc shaping at the attack source nodes enforces valid
bandwidth usage. Undetected corruptions, however, are not
breaking with conﬁgured speciﬁcations and should have lower
risk in damaging QoS of concurrent streams. Additionally, one
scenario showed a successful detection of a corrupted shaped
data stream through interference with concurrent trafﬁc on the
path to the second switch. This shows further potential for
detection improvements.

V. CYBER SECURITY FOR CARS AND RELATED WORK
A fundamental work from Checkoway et al. [7] examines
interfaces that are part of the attack surface of a car. These
interfaces are classiﬁed into three categories: Physical access
(ODB-II, CD, USB), short distance wireless access (Blue-
tooth, WiFi, Remote-Keyless-Entry) and long distance wireless

access (GPS, digital radio, mobile services). The authors
gained access to the on-board network in each category using
reverse engineering and debugging. Therefore, we assume
that unauthorized access is possible to all in-car components.
Each communication source inside the vehicle could become
corrupted and send irregular trafﬁc into the IVN.

Miller and Valasek [45], [46] show that modern cars
are vulnerable to attacks. In their work, they describe how
they obtain unpermitted control of an unaltered passenger
vehicle. The entry point
is the cellular connection of the
cars infotainment system. They use the infotainment to send
manipulative messages into the IVN. Those messages enabled
remote control of safety-critical functions such as engine and
brakes. When protective measures are overcome, a Network
Anomaly Detection System (NADS) is important to detect
such illegitimate messages and report incidents for possible
countermeasures.

Multi-sided measures are needed to protect future cars
against attacks [11]. Furthermore, new regulations and guide-
lines like ISO/SAE 21434 demand extensive security fea-
tures such as updates, monitoring, and incident manage-
ment/response for the entire lifecycle of future vehicles [6],
[47]. To protect the security of future IVNs, the appropriate
tools from the toolbox of established network security mech-
anisms, such as encryption, authentication, ﬁrewalling and
intrusion detection, must be adapted and implemented. [48].
One of the ﬁrst steps for securing information systems is the
risk analysis/assessment [49]. Monteuuis et al. [50] propose a
systematic thread analysis and risk assessment framework for
autonomous cars. They build upon traditional risk assessment
methods to, among other things, support consideration of the
safety implications through automotive attacks. To compute
risk values, they use severity, observation, controllability and
the attack likelihood. Further, they clarify the importance of
countermeasures for risk assessment: ”[...] risk analysis is an
iterative process that ends once countermeasures have been
applied to critical threats until the risk value converges to an
acceptable level.” Countermeasures are dependent on the de-
tection of threads. Thus, anomaly detection and comprehensive
information on observability of corruptions are important for
precise risk assessment and vehicle safety and security. We,
therefore classify link layer effects of attacks and benchmark
the detection performance.

The work of Bernardini et al. [51] collects the main security
and privacy issues of vehicular communication and explore
research on theses issues. They found that effective network
monitoring is one of the open problems concerning security
of modern cars. This is where our work is targeted with a
concrete solution for link layer anomaly detection and detailed
measurements.

Rumez, Grimm et al. [12] discuss the security implica-
tions of SOAs. They show that, in general, the protection
of IVNs must be achieved by integrating different layers of
protection. This minimizes the risk of a successful attack.
The review presents approaches on automotive ﬁrewalls, IDSs
and Identity- and Access Management (IAM). The target of
all reviewed IDSs are the CAN bus protocol. In contrast,
we investigate an approach targeting a real-time Ethernet

11

backbone.

Pes´e et al. [13] present a hardware/software co-design for
an automotive ﬁrewall. They substantiate how an embedded
design can fulﬁll automotive requirements in a cost efﬁcient
way. Our investigations on the performance of our NADS are
simulation-based and do not address speciﬁc implementation
aspects related to hardware and software resources to be
deployed in a production vehicle. Nevertheless, the design we
propose is efﬁcient on in-car resources because no specialized
NADS devices are needed for operation. Instead, we utilize
TSN mechanisms, already discussed for on-board networks,
to additionally detect anomalies.

Firewalls are often a part of gateways between domain- and
system borders. Those gateways also fulﬁll roles like proxy,
access control [52], and intrusion detection [16]. Gateways are
also introduced as pure security nodes [14]. They are able to
enforce static speciﬁed communication streams between their
in- and outputs. Thus, those gateways are able to prohibit
unknown communication. This inline ﬂow-control can be
fulﬁlled by switches in SDN-based Ethernet networks. In past
work, we analyzed the security implications of control ﬂow
embedding strategies [27]. Now, we show how valid ﬂows
can be monitored and misbehaving ﬂows can be detected in
IVNs using TSN and SDN principles.

As part of the SecVI research project Langer et al. [15] show
how security of complete vehicle ﬂeets could be managed
over lifetime. The proposed Automotive Cyber Defence Center
(ACDC) adapts established IT-infrastructure technologies to
the nomadic nature of vehicle ﬂeets. Such cloud services can
be used to collect reports of severe incidents detected by an
IDS. This enables large-scale countermeasures. Data from our
NADS approach is a substantial source of information for
global security infrastructures like this ACDC.

In previous works, we demonstrated a prototype of an IVN
that enables protection, monitoring, detection, incidence man-
agement, and countermeasures in a real production car [53].
The implementation uses SDN, AD, secure gateways, hypervi-
sors, dynamic orchestration of applications and cloud services
to enable protection and countermeasures. This prototype uses
a machine learning based NADS which is prone to frequent
false positive alarms. In this work we show a NADS that is
robust against false positive alarms.

Dibaei et al. [36] present a survey about attacks and de-
fences on intelligent connected vehicles. They identify security
attacks and categorize published work on defences into cryp-
tography, network security, software vulnerability detection,
and malware detection. It states that IDSs are the most ef-
fective countermeasure for network security. They discuss the
advantages and disadvantages of signature-based and anomaly-
based IDS approaches: In particular, a high false negative
rate for signature-based IDS and a high false positive rate for
anomaly-based IDS. In our anomaly-based approach we use
the Per-Stream Filtering and Policing (PSFP) conﬁguration
as the baseline for an ADS. It enables link layer anomaly
detection without false positives.

There are many ADS algorithms at hand to describe and
evaluate a regular state [54]. They can be classiﬁed in statisti-
cal (e.g., Signal Processing), classiﬁcation based (e.g., Support

Vector Machine), clustering-based (e.g., k-Means), soft com-
puting (e.g., Neural Network), knowledge-based (e.g., Rule
and expert-system), or combination learners (e.g., Hybrid).
One key challenge for ADSs is to keep the false-positive rate
as low as possible. This work builds on the PSFP conﬁguration
which is dependent on an accurate IVN speciﬁcation from
quality assured network design phases, which should clearly
and correctly deﬁne the normal real-time trafﬁc link layer
behavior.

Rajbahadur et al. [55] worked out a survey on anomaly
detection for connected vehicles. They list numerous work
in the spectrum of anomaly detection for current cars. Most
of the works discussing the use of ADS inside the car are
aiming for traditional CAN bus infrastructures. Ethernet IVNs
have very different communication patterns leading to different
requirements on a NADS. Our approach is aimed at Ethernet
using PSFP, an integral part of TSN.

Waszecki et al. [56] present a distributed IVN trafﬁc moni-
toring via behavior analysis on can busses. Their decentralized
approach enhances reliability of attack detection and reduces
implementation costs. Our approach focuses on Ethernet net-
works, it is also decentralized and cost effective. By using
PSFP, every port on every switch in the network becomes an
anomaly sensor. No further distinct network nodes are needed
to implement the anomaly sensors into an IVNs.

A survey from Ring et al. [57] gives an overview of
network-based data sets for testing and evaluating IDSs.
Futhermore, they analyze which properties the individual data
sets fulﬁll. To the best of our knowledge, there are no datasets
containing speciﬁc attacks on realtime Ethernet link layer QoS
which is a major attack surface in cyber physical systems
such as cars. In our case study, we use trafﬁc of the CIC-
IDS 2017 [32] dataset, which includes the most common
attacks based on the 2016 McAfee report.

VI. CONCLUSION AND OUTLOOK

Communication ﬂows in vehicles are pre-deﬁned to a large
extend, and TSN Per-Stream Filtering and Policing (PSFP)
builds its trafﬁc control rules for all incoming trafﬁc streams
on this knowledge. In this paper, we showed how the PSFP
control rules can be exploited as core elements for a Network
Anomaly Detection System (NADS). The PSFP conﬁguration
serves as an implicit description of the borders between normal
and malicious network behavior on the link layer.

We could show conceptually and by simulations that this
anomaly detection remains free of false positives, provided
the PSFP indicators are deﬁned correctly. In all simulations,
not a single valid frame was dropped by any PSFP instance.
The efﬁciency to detect misbehavior depends on the origin
of frame corruption,
its link layer impact, and its trafﬁc
type. Overall, corruptions on the link layer are more reliably
detected than overlying misbehavior. We argue that most of
the critical impairments in real-time networks impact the link
layer, since this bears the risk of breaking QoS guarantees for
concurrent streams. There are TSN trafﬁc shaping mechanisms
that prevent a detection of application layer corruptions by
frame drop indicators. We showed by example that additional

12

indicators, which also remain free of false positives, can be
deployed to improve detection rate.
We presented a case study,

in which real attack traces
were played back in a simulated zonal IVN topology based
on a real-world in-car communication matrix. The simulated
scenarios indicate that
the NADS works in realistic IVN
environments. They likewise conﬁrm the absence of false
positives and depict for which trafﬁc classes application layer
corruptions are detected in the network.

Our work opens three directions for future research.

(1) There is need to explore the options for improving
detection performance. Additional PSFP anomaly indicators
are promising candidates to improve the accuracy without
introducing false positives. This includes the investigation of
further TSN forwarding procedures such as Asynchronous
Trafﬁc Shaping and the effects of chained PSFP instances in
switches on stream paths.
(2) Evaluation in more complex, realistic scenarios: We will
investigate how complete IDS datasets can be used for com-
prehensive evaluations on detection performance in context of
TSN-based IVNs. This may include the creation of a special
attack dataset for IVNs.
(3) Comparison with orthogonal NADS concepts: We will
compare our PSFP-based NADS with other NADS concepts,
like systems external to the core network which use extrin-
sic mechanisms such as machine learning to deﬁne regular
pattern.

REFERENCES

[1] Institute of Electrical and Electronics Engineers, “IEEE Standard for
Ethernet Amendment 1: Physical Layer Speciﬁcations and Management
Parameters for 100 Mb/s Operation over a Single Balanced Twisted Pair
Cable (100BASE-T1),” IEEE, Standard IEEE 802.3bw-2015, 2016.
[2] ——, “IEEE Standard for Ethernet Amendment 4: Physical Layer
Speciﬁcations and Management Parameters for 1 Gb/s Operation over a
Single Twisted-Pair Copper Cable,” IEEE, Standard IEEE 802.3bp-2016,
2016.

[3] K. Matheus and T. K¨onigseder, Automotive Ethernet.

Cambridge,

United Kingdom: Cambridge University Press, Jan. 2015.

[4] S. Brunner, J. Roder, M. Kucera, and T. Waas, “Automotive E/E-
Architecture Enhancements by Usage of Ethernet TSN,” in 2017 13th
Workshop on Intelligent Solutions in Embedded Systems (WISES). Pis-
cataway, NJ, USA: IEEE Press, Jun. 2017, pp. 9–13.

[5] O. Burkacky,

car

J. Deichmann, G. Doll,
software
New

and C. Knochen-
architecture,”
Tech.
[Online]. Avail-
15,
2018, Accessed: April
https://www.mckinsey.com/industries/automotive-and-assembly/

hauer,
“Rethinking
McKinsey & Company,
Rep.,
able:
our-insights/rethinking-car-software-and-electronics-architecture

electronics
NY,

2021.

USA,

York,

and

[6] International Organization for Standardization, “Road vehicles – Cyber-
security engineering,” ISO, Geneva, CH, Standard ISO/SAE DIS 21434,
2020.

[7] S. Checkoway, D. Mccoy, B. Kantor, D. Anderson, H. Shacham,
S. Savage, K. Koscher, A. Czeskis, F. Roesner, and T. Kohno,
“Comprehensive Experimental Analyses
of Automotive Attack
Surfaces,” in Proceedings of the 20th USENIX Security Symposium,
vol. 4. USENIX Association, Aug. 2011, pp. 77–92.
[Online].
Available: http://www.autosec.org/pubs/cars-usenixsec2011.pdf

[8] Institute of Electrical and Electronics Engineers, “IEEE Standard for
Local and metropolitan area networks-Media Access Control (MAC)
Security,” IEEE, New York, Standard IEEE 802.1AE-2018, Dec. 2018.
Pearson Education,

[9] N. Doraswamy and D. Harkins, IPSec, 2nd ed.

2002.

[10] E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.3,”

IETF, RFC 8446, August 2018.

[11] P. Mundhenk, Security for Automotive Electrical/Electronic (E/E)
[Online]. Avail-

Architectures. G¨ottingen: Cuvillier, Aug. 2017.
able:
security for automotive electrical electronic e e architectures.html

https://www.ebook.de/de/product/29940801/philipp mundhenk

[12] M. Rumez, D. Grimm, R. Kriesten, and E. Sax, “An Overview of Au-
tomotive Service-Oriented Architectures and Implications for Security
Countermeasures,” IEEE Access, vol. 8, pp. 221 852–221 870, 2020.

[13] M. D. Pes´e, K. Schmidt, and H. Zweck, “Hardware/Software Co-
Design of an Automotive Embedded Firewall,” in SAE Technical
Paper.
[Online]. Available: https:
//doi.org/10.4271/2017-01-1659

SAE International, Mar. 2017.

[14] S. Seifert and R. Obermaisser, “Secure Automotive Gateway - Secure
Communication for Future Cars,” in 2014 12th IEEE International
Conference on Industrial Informatics (INDIN), 2014, pp. 213–220.
[15] F. Langer, F. Sch¨uppel, and L. Stahlbock, “Establishing an Automotive
Cyber Defense Center,” in 17th escar Europe : embedded security in
cars, 2019. [Online]. Available: http://hss-opus.ub.ruhr-unibochum.de/
opus4/frontdoor/index/index/docId/6652

[16] L. Yang, A. Moubayed, I. Hamieh, and A. Shami, “Tree-Based Intelli-
gent Intrusion Detection System in Internet of Vehicles,” in 2019 IEEE
Global Communications Conference (GLOBECOM).
Piscataway, NJ,
USA: IEEE Press, 2019, pp. 1–6.

[17] IEEE 802.1 Working Group, “IEEE Standard for Local and Metropolitan
Area Network–Bridges and Bridged Networks,” IEEE, Standard Std
802.1Q-2018 (Revision of IEEE Std 802.1Q-2014), Jul. 2018.

[18] L. Lo Bello and W. Steiner, “A Perspective on IEEE Time-Sensitive
Networking for Industrial Communication and Automation Systems,”
Proceedings of the IEEE, vol. 107, no. 6, pp. 1094–1120, Jun. 2019.

[19] M. H. Farzaneh and A. Knoll, “Time-Sensitive Networking (TSN): An
Experimental Setup,” in 2017 IEEE Vehicular Networking Conference
(VNC), Nov. 2017, pp. 23–26.

[20] T. Steinbach, H.-T. Lim, F. Korf, T. C. Schmidt, D. Herrscher, and
A. Wolisz, “Beware of the Hidden! How Cross-trafﬁc Affects Quality
Assurances of Competing Real-time Ethernet Standards for In-Car Com-
munication,” in 2015 IEEE Conference on Local Computer Networks
(LCN), Oct. 2015, pp. 1–9, lCN Best Paper Award.

[21] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson,
J. Rexford, S. Shenker, and J. Turner, “OpenFlow: Enabling Innovation
in Campus Networks,” ACM SIGCOMM Computer Communication
Review, vol. 38, no. 2, pp. 69–74, 2008.

[22] K. Halba, C. Mahmoudi, and E. Griffor, “Robust Safety for Autonomous
Vehicles through Reconﬁgurable Networking,” in Proceedings of the
2nd International Workshop on Safe Control of Autonomous Vehicles,
ser. Electronic Proceedings in Theoretical Computer Science, vol. 269.
Open Publishing Association, 2018, pp. 48–58.

[23] M. Haeberle, F. Heimgaertner, H. Loehr, N. Nayak, D. Grewe, S. Schildt,
and M. Menth, “Softwarization of Automotive E/E Architectures: A
Software-Deﬁned Networking Approach,” in 2020 IEEE Vehicular Net-
working Conference (VNC) (IEEE VNC 2020). Piscataway, NJ, USA:
IEEE Press, Dec. 2020, pp. 1–8.

[24] T. Gerhard, T. Kobzan, I. Blocher, and M. Hendel, “Software-deﬁned
Flow Reservation: Conﬁguring IEEE 802.1Q Time-Sensitive Networks
by the Use of Software-Deﬁned Networking,” in 2019 24th IEEE Inter-
national Conference on Emerging Technologies and Factory Automation
(ETFA). Piscataway, NJ, USA: IEEE Press, Sep. 2019, pp. 216–223.
[25] T. H¨ackel, P. Meyer, F. Korf, and T. C. Schmidt, “Software-Deﬁned
Networks Supporting Time-Sensitive In-Vehicular Communication,” in
2019 IEEE 89th Vehicular Technology Conference (VTC2019-Spring).
Piscataway, NJ, USA: IEEE Press, Apr. 2019, pp. 1–5.

[26] R. Rotermund, T. H¨ackel, P. Meyer, F. Korf, and T. C. Schmidt, “Re-
quirements Analysis and Performance Evaluation of SDN Controllers for
Automotive Use Cases,” in 2020 IEEE Vehicular Networking Conference
(VNC) (IEEE VNC 2020).
Piscataway, NJ, USA: IEEE Press, Dec.
2020.

[27] T. H¨ackel, A. Schmidt, P. Meyer, F. Korf, and T. C. Schmidt, “Strategies
for Integrating Controls Flows in Software-Deﬁned In-Vehicle Networks
and Their Impact on Network Security,” in 2020 IEEE Vehicular
Networking Conference (VNC) (IEEE VNC 2020).
Piscataway, NJ,
USA: IEEE Press, Dec. 2020.

[28] AUTOSAR, “SOME/IP Protocol Speciﬁcation,” AUTOSAR, Tech. Rep.

696, Dec. 2017.

[29] A. Kampmann, B. Alrifaee, M. Kohout, A. W¨ustenberg, T. Woopen,
M. Nolte, L. Eckstein, and S. Kowalewski, “A Dynamic Service-
Oriented Software Architecture for Highly Automated Vehicles,” in 2019
IEEE Intelligent Transportation Systems Conference (ITSC).
Piscat-
away, NJ, USA: IEEE Press, 2019, pp. 2101–2108.

13

[30] P. Meyer, T. H¨ackel, F. Korf, and T. C. Schmidt, “Network Anomaly De-
tection in Cars based on Time-Sensitive Ingress Control,” in 2020 IEEE
92nd Vehicular Technology Conference (VTC2020-Fall).
Piscataway,
NJ, USA: IEEE Press, Nov. 2020, pp. 1–5.

[31] Institute of Electrical and Electronics Engineers, “IEEE Standard for
Local and Metropolitan Area Networks–Bridges and Bridged Networks–
Amendment 28: Per-Stream Filtering and Policing,” IEEE, Standard,
Sep. 2017.

[32] I. Sharafaldin, A. H. Lashkari, and A. A. Ghorbani, “Toward Generating
a New Intrusion Detection Dataset and Intrusion Trafﬁc Characteriza-
tion,” in 4th International Conference on Information Systems Security
and Privacy (ICISSP), INSTICC. SciTePress, Jan. 2018, pp. 108–116.
[33] Institute of Electrical and Electronics Engineers, “IEEE Standard for
Local and metropolitan area networks – Bridges and Bridged Networks
- Amendment 25: Enhancements for Scheduled Trafﬁc,” IEEE, Standard,
Mar. 2016.

[34] ——, “IEEE Standard for Local and Metropolitan Area Networks–
Timing and Synchronization for Time-Sensitive Applications,” IEEE,
New York, Standard, Mar. 2020.

[35] P. Meyer, T. Steinbach, F. Korf, and T. C. Schmidt, “Extending IEEE
802.1 AVB with Time-triggered Scheduling: A Simulation Study of the
Coexistence of Synchronous and Asynchronous Trafﬁc,” in 2013 IEEE
Vehicular Networking Conference (VNC). Piscataway, NJ, USA: IEEE
Press, Dec. 2013, pp. 47–54.

[36] M. Dibaei, X. Zheng, K. Jiang, R. Abbas, S. Liu, Y. Zhang, Y. Xiang,
and S. Yu, “Attacks and defences on intelligent connected vehicles: a
survey,” Digital Communications and Networks, vol. 6, no. 4, pp. 399–
421, Nov. 2020.

[37] J. Case, R. Mundy, D. Partain, and B. Stewart, “Introduction and Ap-
plicability Statements for Internet-Standard Management Framework,”
IETF, RFC 3410, December 2002.

[38] R. Enns, M. Bjorklund, J. Schoenwaelder, and A. Bierman, “Network
Conﬁguration Protocol (NETCONF),” IETF, RFC 6241, June 2011.

[39] Open Networking

Foundation,

Speciﬁca-
[Online]. Avail-
https://3vf60mmveq1g8vzn48q2o71a-wpengine.netdna-ssl.com/

tion,” ONF, Standard ONF TS-025,
able:
wp-content/uploads/2014/10/openﬂow-switch-v1.5.1.pdf

“OpenFlow Switch
2015.

[40] S. Stachowski, R. Gaynier, and D. J. LeBlanc, “An Assessment Method
for Automotive Intrusion Detection System Performance,” University of
Michigan. Transportation Research Institute, Tech. Rep. DOT HS 812
708, Apr. 2019.
[41] OpenSim Ltd.,

[Online]. Available: https:

“INET Framework.”

//inet.omnetpp.org/

[42] CoRE Research Group, “CoRE Simulation Models for Real-time

Networks.” [Online]. Available: https://sim.core-rg.de

[43] P. Meyer, F. Korf, T. Steinbach, and T. C. Schmidt, “Simulation
of Mixed Critical In-vehicular Networks,” in Recent Advances in
Network Simulation. Springer, 2019, pp. 317–345. [Online]. Available:
https://link.springer.com/chapter/10.1007/978-3-030-12842-5 10
[44] P. Meyer, T. H¨ackel, F. Korf, and T. C. Schmidt, “DoS Protection
through Credit Based Metering - Simulation-Based Evaluation for
Time-Sensitive Networking in Cars,” in Proceedings of
the 6th
International OMNeT++ Community Summit 2019, ser. EPiC Series
in Computing, M. Zongo, A. Virdis, V. Vesely, Z. Vatandas,
A. Udugama, K. Kuladinithi, M. Kirsche, and A. F¨orster, Eds.,
vol. 66.
[Online]. Available:
https://easychair.org/publications/paper/BtKC

EasyChair, Dec. 2019, pp. 52–59.

[45] C. Miller and C. Valasek, “A Survey of Remote Automotive Attack

Surfaces,” Black Hat USA, vol. 2014, 2014.

[46] ——, “Remote Exploitation of an Unaltered Passenger Vehicle,”
[Online]. Available:

Black Hat USA, vol. 2015, p. 91, 2015.
https://ericberthomier.fr/IMG/pdf/remote car hacking.pdf

[47] United Nations Economic Commission for Europe, “Draft Recommen-
dation on Cyber Security of the Task Force on Cyber Security and Over-
the-air issues of UNECE WP.29 GRVA,” UNECE, Standard WP.29,
2018.

[48] J. M. Kizza, Guide to Computer Network Security. Cham, Switzerland:

Springer-Verlag GmbH, May 2017.

[49] R. Ross and V. Pillitteri, “Security and Privacy Controls for Information
Systems and Organizations,” NIST, NIST Pubs 800-53rev5, Dec. 2020.
[50] J.-P. Monteuuis, A. Boudguiga, J. Zhang, H. Labiod, A. Servel,
and P. Urien, “SARA: Security Automotive Risk Analysis Method,”
in Proceedings of
the 4th ACM Workshop on Cyber-Physical
System Security, ser. CPSS ’18. New York, NY, USA: Association
[Online]. Available:
for Computing Machinery, 2018, pp. 3–14.
https://doi.org/10.1145/3198458.3198465

[51] C. Bernardini, M. R. Asghar, and B. Crispo, “Security and Privacy in
Vehicular Communications: Challenges and Opportunities,” Vehicular
Communications, vol. 10, pp. 13–28, Oct. 2017.

[52] M. Rumez, A. Duda, P. Grunder, R. Kriesten, and E. Sax, “Integration
of Attribute-based Access Control into Automotive Architectures,” in
2019 IEEE Intelligent Vehicles Symposium (IV). Piscataway, NJ, USA:
IEEE Press, Jun. 2019.

[53] P. Meyer, T. H¨ackel, F. Langer, L. Stahlbock, J. Decker, S. A. Eckhardt,
F. Korf, T. C. Schmidt, and F. Sch¨uppel, “Demo: A Security Infras-
tructure for Vehicular Information Using SDN, Intrusion Detection, and
a Defense Center in the Cloud,” in 2020 IEEE Vehicular Networking
Conference (VNC) (IEEE VNC 2020).
Piscataway, NJ, USA: IEEE
Press, Dec. 2020.

[54] M. H. Bhuyan, D. K. Bhattacharyya, and J. K. Kalita, “Network
Anomaly Detection: Methods, Systems and Tools,” IEEE Communica-
tions Surveys & Tutorials, vol. 16, no. 1, pp. 303–336, Jan. 2014.
[55] G. K. Rajbahadur, A. J. Malton, A. Walenstein, and A. E. Hassan, “A
Survey of Anomaly Detection for Connected Vehicle Cybersecurity and
Safety,” in 2018 IEEE Intelligent Vehicles Symposium (IV). Piscataway,
NJ, USA: IEEE Press, Jun. 2018.

[56] P. Waszecki, P. Mundhenk, S. Steinhorst, M. Lukasiewycz, R. Karri,
and S. Chakraborty, “Automotive electrical and electronic architecture
security via distributed in-vehicle trafﬁc monitoring,” IEEE Transactions
on Computer-Aided Design of Integrated Circuits and Systems, vol. 36,
no. 11, pp. 1790–1803, Nov. 2017.

[57] M. Ring, S. Wunderlich, D. Scheuring, D. Landes, and A. Hotho, “A
Survey of Network-based Intrusion Detection Data Sets,” Computers
& Security, vol. 86, pp. 147–167, Sep. 2019. [Online]. Available:
https://www.sciencedirect.com/science/article/pii/S016740481930118X

Philipp Meyer is Ph.D. student and research assis-
tant in the Communication over Real-Time Ethernet
(CoRE) Research Group at the Hamburg University
of Applied Sciences (HAW), Hamburg, Germany. As
part of the CoRE Research Group, he started 2012
with researching on real-time Ethernet technologies
and their security. He received his B.Sc. (2013) and
M.Sc. (2018) in computer science in this context.
Furthermore, he pursued his interests as part of
the research projects Realtime Ethernet Backbone
for Cars (RECBAR) and X-Check. Currently, he
is exploring in-car communication security as part of the research project
Security for Vehicular Information (SecVI). Philipp Meyer also develops and
maintains the CoRE open-source simulation environment and frameworks for
the OMNeT++ simulator.

Timo H¨ackel received his M.Sc. degree in com-
puter science from the Hamburg University of Ap-
plied Sciences (HAW), Hamburg, Germany, in 2018,
where he is currently pursuing the Ph.D. degree
with the Internet Technologies Research Group. His
particular research interest is the security of time-
sensitive vehicular networks, which he is exploring
within the German research project SecVI – Security
for Vehicular Information. Timo H¨ackel is also part
of the Communication over Real-Time Ethernet re-
search group at HAW Hamburg, where he develops
and maintains open source frameworks for the OMNeT++ simulator including
the CoRE4INET and SDN4CoRE framework.

14

Sandra Reider pursues her B.Sc. on Technical
Computer Science since 2018 at the Hamburg Uni-
versity of Applied Sciences (HAW) and currently
writes her bachelor thesis in the Communication
over Real-Time Ethernet (CoRE) Research Group,
where she works on the generation of in-vehicular
network schedules and simulations. She also sup-
ports research into future attacks on in-car networks
as a student assistant on the Security for Vehicular
Information (SecVI) research project since 2019.

Franz Korf is professor of Embedded Systems at
Hamburg University of Applied Sciences (HAW),
where he heads the Communication over Real-Time
Ethernet research group. He studied computer sci-
ence at RWTH Aachen University. At
the chair
of W. Damm at the University of Oldenburg, he
received his doctorate in the ﬁeld of system-level
synthesis tools. Before joining HAW Hamburg in
2004, he headed the OEM development of server
systems at Fujitsu Siemens Computers. At HAW
Hamburg, Franz was responsible for various research
and development projects in the areas of real-time Ethernet architectures and
embedded systems.

Thomas C. Schmidt is professor of Computer Net-
works and Internet Technologies at Hamburg Univer-
sity of Applied Sciences (HAW), where he heads the
Internet Technologies research group (iNET). Prior
to moving to Hamburg, he was director of a scientiﬁc
computer centre in Berlin. He studied mathematics,
physics and German literature at Freie Universitaet
Berlin and University of Maryland, and received
his Ph.D. from FU Berlin in 1993. Since then he
has continuously conducted numerous national and
international research projects. He was the principal
investigator in a number of EU, nationally funded, and industrial projects as
well as visiting professor at the University of Reading, U.K.. His continued
interests lie in the development, measurement, and analysis of large-scale
distributed systems like the Internet. He serves as co-editor and technical
expert in many occasions and is actively involved in the work of IETF
and IRTF. Together with his group he pioneered work on an information-
centric Industrial IoT and the emerging data-centric Web of Things. Thomas
is a co-founder of several large open source projects and coordinator of the
community developing the RIOT operating system - the friendly OS for the
Internet of Things.

