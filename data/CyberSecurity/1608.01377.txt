D-STREAMON - a NFV-capable distributed
framework for network monitoring

Pier Luigi Ventre∗, Alberto Caponi†, Davide Palmisano∗, Stefano Salsano∗†, Giuseppe Siracusano∗,
Marco Bonola∗, Giuseppe Bianchi∗†
∗University of Rome Tor Vergata, Italy, †CNIT, Italy,
Email: {name.surname}@uniroma2.it

Submitted paper - June 2016

6
1
0
2

g
u
A
3

]
I

N
.
s
c
[

1
v
7
7
3
1
0
.
8
0
6
1
:
v
i
X
r
a

Abstract—Many reasons make NFV an attractive paradigm for
IT security: lowers costs, agile operations and better isolation
as well as fast security updates, improved incident responses
and better level of automation. At the same time, the net-
work threats tend to be increasingly complex and distributed,
implying huge trafﬁc scale to be monitored and increasingly
strict mitigation delay requirements. Considering the current
trend of the networking and the requirements to counteract to
the evolution of cyber-threats, it is expected that also network
monitoring will move towards NFV based solutions. In this paper,
we present Distributed StreaMon (D-StreaMon) an NFV-capable
distributed framework for network monitoring. D-StreaMon has
been designed to face the above described challenges. It relies
on the StreaMon platform, a solution for network monitoring
originally designed for traditional middleboxes. An evolution
path which migrates StreaMon from middleboxes to Virtual
is described. The paper reports
Network Functions (VNFs)
a performance evaluation of the realized NFV based solution
and discusses potential beneﬁts in monitoring tenants’ VMs for
Service Providers.

Index Terms—Network Function Virtualization, Network Mon-
itoring, Network Programmability, Software Deﬁned Networking

I. INTRODUCTION

The fast evolving complexity and heterogeneous nature of
modern cyber-threats and network monitoring as well as the
increasing interest in virtualization approaches for more com-
plex network middlebox functionalities call for new scalable,
accurate and ﬂexible solutions to virtualize and simplify the
programming and deployment of online (i.e. stream-based)
trafﬁc analysis functions. The real challenge is to promptly
react
to the mutating needs by deploying custom trafﬁc
analyses functionalities, capable of tracking events and detect
different behaviours of attacks. Such objectives can be reached
by efﬁciently handle the many heterogeneous features, events,
and conditions which characterize an operational failure, a
network’s application mis-behavior, an anomaly as well as
an incoming attack. Such needed level of ﬂexibility and
programmability should address scalability by design, through
systematic exploitation of stream-based analysis techniques.
And, even more challenging, trafﬁc analyses and mitigation
inside the monitored
primitives should be ideally brought
network and the monitoring probes themselves. This permits to
avoid the centralization of the analysis that requires exporting
trafﬁc data to a central point that results to be an inadequate

way to cope with the huge trafﬁc scale and the strict (ideally
real-time) mitigation delay requirements.

The above challenges ﬁt well in the current trends towards
the softwarization of networks [1] [2] which includes tech-
nologies like Network Function Virtualization (NFV) [3] and
Software Deﬁned Networking (SDN) [4]. More speciﬁcally,
NFV, focusing on the decoupling of network functions from
physical devices on which they run, becomes the ideal tech-
nology to bring to the reality the idea of ”spreading” network
monitoring inside the infrastructure. NFV leverages on virtu-
alization technologies to execute these network appliances in
virtual resources deployed in commodity servers. Its promises
are the achievement of unmatched infrastructure scalability,
ﬂexibility and efﬁciency of networks (reducing equipment
and operational costs) through the ubiquitous employment of
software-based network appliances on COTS hardware. As
all new emerging technologies, NFV introduces new security
issues and challenges to be addressed. Since the software
is more fragile with respect to the hardware, it offers to an
attacker more features to exploit. It implies that the shift of
more functions to the software even increase the chance of
disasters. On the other hand, the software enables to streamline
the procedure of security updates and in general the impact
of deploying security updates. In this direction, NFV delivers
agile security operations and better isolation: virtual resources
are logically separated, if necessary some Virtual Network
Functions (VNFs) can be deployed on isolated nodes or in
nodes that match some security-pertinent criteria. Unmatched
incident response thanks to the inherent ﬂexibility and better
level of automation which can guarantee among other things
rapid and ﬂexible re-conﬁguration of virtual network appli-
ances. We expect that network security solutions could beneﬁt
in moving towards NFV paradigm, where security systems or
middleboxes are substituted by software components running
in commodity server. Indeed, platforms like StreaMon can take
advantage of improved scalability in highly dynamic scenarios,
better ﬂexibility and new levels of automation coming from
such trend.

In order to face these new challenges, in this paper we
propose D-StreaMon, a distributed network monitoring frame-
work based on StreaMon [5] data-plane programming abstrac-
tion for stream-based monitoring tasks directly running over

 
 
 
 
 
 
network probes. The building block of this framework is Strea-
Mon, a network monitoring tool based on a data-plane abstrac-
tion devised to scalably decouple the programming logic of a
trafﬁc analysis application (tracked states, features, anomaly
conditions, etc.) from elementary primitives (counting and
metering, matching, events generation, etc), efﬁciently pre-
implemented in the probes, and used as common instruction
set for supporting the desired logic. Having D-Streamon as
main foundation, we realized two NFV-based solutions and
we assessed the performances.

The contributions of this paper are:
• the extension of the StreaMon monitoring solution, sep-
arating the centralized conﬁguration and management by
the distributed monitoring probes

• the introduction of a distributed architecture for StreaMon

based on Publish/Subscribe paradigm

• the implementation of an Open Source GUI for the
conﬁguration and management system, based on Ansi-
ble/Semaphore

• the deployment of

the Distributed StreaMon (D-
StreaMon) over an NFV environment in two different
variants

• the performance evaluation of the NFV based solutions;
On top of StreaMon framework, the experimenters are able
to design and deploy new security features and to experiment
on new deployment scenarios with minimal effort. Moreover, it
easy to integrate the solution in the NFV framework envisaged
by the ETSI group for NFV [3]. The paper is structured as
follows: section II elaborate on StreaMon platform; the D-
StreaMon solution is described along with the NFV based
solutions in section III; section IV provides a performance
evaluation of the designed solutions; section V reports on
related work; ﬁnally in Section VI we draw some conclusions
and highlight the next steps.

II. STREAMON

StreaMon is a software deﬁned platform for stream-based
monitoring tasks directly running over network probes. Strea-
Mon’s strategy closely resembles the one pioneered by Open-
ﬂow [6] in the abstraction of networking functionalities,
thus paving the road towards software-deﬁned networking.
However, the analogy with Openﬂow limits to the strategic
level; in its technical design, StreaMon signiﬁcantly departs
from Openﬂow for the very simple reason that the data-plane
programmability of monitoring tasks exhibits very different
requirements with respect to the data-plane programmability
of networking functionalities, and thus mandate for different
programming abstractions.

to a match/action table: ﬁrst,

This drives towards a different pragmatic abstraction with
respect
the “entity” being
monitored is not consistently associated with the same ﬁeld
composition in the packet header (e.g: 2 way communication
to/from the same IP address). Second, the type of analysis (and
possibly the monitoring entity target) entailed by a monitoring
application may change over time, dynamically adapting to
the knowledge gathered so far. Third, activities associated

to a monitoring task are not all associated to a matching
they rather require triggering conditions
functionality, but
applied to the gathered features.

StreaMon’s abstraction,

illustrated in Figure 1, appears
capable to cope with such requirements. It consists of three
“stages”, programmable by the monitoring application devel-
oper via external means (i.e. not accessing the internal probe
platform implementation).

(1) The Identiﬁcation stage permits the programmer to
specify what is the monitored entity (more precisely, deriving
its primary key, i.e., a combination of packet ﬁelds that
identify the entity) associated to an event triggered by the
actual packet under arrival, as well as retrieve an eventually
associated state.

(2) The Measurement stage permits the programmer to
conﬁgure which information should be accounted. It integrates
efﬁciently implemented built-in hash-based measurement prim-
itives (metric modules), fed by conﬁgurable packet ﬁelds,
with externally programmed features, expressed as arbitrary
arithmetic operations on the metric modules’ output.

(3) The Decision stage is the most novel aspect of Strea-
Mon. It permits to deﬁne the application logic in the form of
eXtended Finite State Machines (XFSM), i.e. check conditions
associated to the current state and tested over the currently
computed features, and trigger associated actions and/or state
transitions.

The previously introduced abstraction can be concretely
implemented by a stream processing engine consisting of four
modular layers descriptively organized into two subsystems:
the Measurement subsystem and the Logic subsystem.

Event layer - Such layer is in charge of parsing each
raw captured packet and match an event among those user-
programmed via the StreaMon API. The matched event iden-
tiﬁes a user-programmed primary key which permits to retrieve
an eventually stored state. The event layer is further in charge
of supplementary technical tasks, such as handling special
timeout events, deriving further secondary keys, etc.

Metric layer - StreaMon operates on a per-packet basis
and does not store any (raw) trafﬁc in a local database.
The application programmer can instantiate a number of
metrics derived by a basic common structure, implemented
as computation/memory efﬁcient multi-hash data structures
(i.e., Bloom-type sketches, d-left hash tables), updated at every
packet arrival.

Feature layer - this layer permits to compute user-deﬁned
(one or more) metric outputs.
arithmetic functions over
Whereas metrics carry out
the bulky task of accounting
basic statistics in a scalable and computation/memory efﬁcient
manner, the features compute derived statistics tailored to the
speciﬁc application needs, at no (noticeable) extra computa-
tional/memory cost.

Decision layer - this ﬁnal processing stage implements the
actual application logic. This layer keeps a list of conditions
expressed as mathematical/logical functions of the feature
vector provided by the previous layer and any other possible

Fig. 1: StreaMon data plane identiﬁcation/measurement/decision abstraction, and its mapping to implementation-speciﬁc
workﬂow tasks

secondary status. Each condition will trigger a set of speciﬁed
and built-in actions and a state transition.

Application programmers describe their desired monitoring
operations through an high-level XML-like language, which
permits to specify custom (dynamic) states, conﬁgure measure-
ment metrics, formalize when (e.g.in which state and for which
event) and how (i.e. by performing which operations over
available metrics and state information) to extract features, and
under which conditions trigger relevant actions (e.g. send an
alert or data to a central controller). We remark that a monitor-
ing application formally speciﬁed using our XML description
does not require to be compiled by application developers,
but is run-time installed, thus signiﬁcantly simplifying on-ﬁeld
deployment.

III. D-STREAMON

The ﬁrst implementation of StreaMon platform presented a
number of limitations which do not make it widely applicable.
In this section we elaborate on the evolution of the platform
the so called Distributed StreaMon. It introduces a number of
novelties which make the platform suitable for use cases like
NFV framework and also for new generation threats.

A. Requirements

The StreaMon implementation relies on slow deployment
process, which should be streamlined. It should be fast and
in order to react quickly to the network threats. It
light
should be suitable for use cases, like NFV, which request
the support for highly dynamic scenarios, in which StreaMon
probes should be instantiated “on the ﬂy” following the users
requests and the networ behavior. Industrial control systems or
critical infrastructures requires for a new generation of security
monitoring framework like the one envisaged by the SCISSOR
project [7]. In these challenging scenarios, there is the need
for programmable abstractions in the monitoring framework
in order to have programmable analysis functions. A control
and coordination layer able to adaptively orchestrating remote
probes is a mandatory requirements. Another question that
should deﬁnitely addressed for the next generation monitoring
framework is “How to support resources constrained devices
and computationally limited VMs ?”. StreaMon and in general
probes should be able to run on low performance devices
like network switches or in light-weight virtual computing
resources like Unikernels, Tiniﬁed VMs and Containers. This
will enable the probes to be runnable also in small ubiqui-
tous clouds. The legacy StreaMon considered an implemen-

tation through high performance middleboxes which monitor
a single-point of the network. Network threats tends to be
increasingly complex and distributed. The interconnection and
the cooperation of multiple network probes that control differ-
ent points of the network can be of great value. External com-
ponents, like the Control and Coordination Layer proposed by
the SCISSOR project, need the availability of the monitoring
information generated by StreaMon platform. On one hand,
the interconnection, through chaining, of multiple StreaMon
probes for different levels of processing can improve the whole
monitoring performances. On the other hand it reduces the
resource requirements making also affordable the deployment
in resources limited computing nodes. In this way, probes tend
to become small and highly specialized encouraging also the
re-usability. In order to beneﬁt of the inherent ﬂexibility and
better level of automation introduced by NFV architecture,
the management (deployment, conﬁguration, etc.) of multiple
StreaMon probes should be programmable and adaptive to the
network behavior.

B. Architecture

Legacy StreaMon foresees for a single host architecture,
where the single node executes all the steps of the platform
life-cycle. It receives in input the user deﬁned xml ﬁle which
describes the features requested for the monitoring. Then,
it parses this ﬁle and generates the low-level conﬁguration
ﬁle for the probe. In parallel, a dynamic library with all
the requested features is created. Finally, it runs the probe
giving input the two outputs of the previous phases. With D-
StreaMon, we introduce a separation of concerns. The new
architecture envisages for a Master machine and a number of
Slaves machines. In the Master, we move all the static steps
like generation of libraries and conﬁguration ﬁles while we
allocate only the operative steps to the Slave nodes. We rely
on cross-compilation to generate probes and then run on the
Slave nodes what is generated by the Master. The D-StreaMon
archtecture decouples the parsing and compile operations from
the execution of StreaMon probes. The Master machine needs
the Python interpreter and the g++ compiler; the Slaves need
only the libraries necessary to run the StreaMon probes.
Thanks to this approach, the master machine is equal to the
full legacy StreaMon machine. Instead, the Slave machines are
very light-weight. The architecture does not exclude multiple
Master but at time of writing we are not implemented any
replication solution for the Master.

Fig. 2: D-StreaMon architecture

As regards the model of the architecture we did not rely
on a simple Client and Server scheme. The probes need
to communicate and cooperate,
the data has to be made
available for different types of consumers. The probes can be
intermittent and not always connected to the whole system.
For these reason, we designed an architecture based on the
Publish/Subscribe paradigm. Each probe is an independent
Publisher and, according to the conﬁguration ﬁle, publishes
only some types of events; Subscribers listen only for events of
interest. This architecture has been realized using the ZeroMQ
[8] library. It is important to note that a Publisher machine
can in turn subscribe for events generated by other Publisher
machines. The Master is also in charge to monitor all the
Slaves nodes. D-StreaMon uses Ansible [9] as conﬁguration
and monitoring platform. It manages the nodes using the SSH
protocol or via PowerShell. The new platform is shipped
also with a GUI that enables the installation, removal and
monitoring probes in the SLAVE machines. The GUI is based
on Semaphore, an open source project that is an alternative to
the ofﬁcial GUI Ansible (Tower). It uses Node.js as well as
HTML and CSS.

C. NFV and SDN based deployment

According to the NFV paradigm, a given service can be
decomposed into a set of software components which are
executed in virtual computing resources themselves running in
virtualization servers. The latter can be deployed in data-center
which are located in different sections of the Service Provider’s
network or in the infrastructure of a Cloud Service Provider.
In this paper, we focus on StreaMon applicability in two
reference scenarios: Mobile Edge Computing/Fog Computing
and Cloud Computing. Figure 3 shows the reference scenarios.
In the bottom part of the ﬁgure, a wireless use case is shown
where the base stations offer connectivity to the mobile clients
and have also the computing resources to build small scale
data center as envisaged by Cloudlets architecture [10]. The
applicability of this use case ﬁnds solid foundation in recent
solutions like NuvlaBox [11] which provides a small cloud
packaged in a box and is able to support from Fog Computing
use case to Internet of Things use case. In the top part of
the ﬁgure, it is represented the classical Cloud Computing

Fig. 3: Reference scenarios

scenario, where the providers guarantee IAAS solution to their
users. In this scenario, it is of interest the monitoring of
trafﬁc among the virtual computing resources. In this paper,
we consider a virtualization solution based on the so called
Containers, in particular Dockers [12].

Let us consider the migration of the StreaMon platform to
a Container based NFV environment. The StreaMon probes
needs to be instantiated in Cloud data centers or in small
scale cloud at the edge of the network with the objective
of monitoring the tenants’ Containers. Using the architecture
described in section III, we have designed two NFV based
deployments. The ﬁrst solution is referred to as Probes as
Processes (ﬁgure 4a). The monitoring probes are executed
as processes running in the main host process space. The
Probes intercept the trafﬁc directly from the ports of the target
Containers which have been bridged in the L2 switch of the
virtualization server (in our case we use Open vSwitch [13]
to implement the Layer 2 switch of the virtualization server).
The second solution is referred to as Probes as Processes
and is represented in ﬁgure 4b. It envisages the use of the
Docker Containers for running the probes: for each Container
to be monitored, a StreaMon Probe is created and deployed
in a Docker Container. All Containers are attached to the
same L2 switch and port mirroring functionality is used to
”copy” the VM trafﬁc towards the associated Probe. The ﬁrst
NFV solution can provide better performance, because the
Process virtualization introduces less overhead with respect to
Containers solution and because the packets do not need to be
”mirrored” by the switch. At the same time the second solution
can provide a better isolation and does not request particular
workarounds to have different StreaMon Probes working in
several Processes co-located in the same host. Moreover, the
Container based solution is more attractive for the availabil-
ity of different orchestration tools like Docker Swarm [12],
Kubernetes [14], Nomad and many others. These solutions
can provide valuable improvements to the architecture as they
can automate the deployment phase of the Probes and can
provide also an interesting solution for the integration in the
NFV ecosystem (see [3] for an a thorough description of NFV

(a) Probes as Processes

(b) Probes as Containers

Fig. 4: D-StreaMon architectures

architecture).

IV. EXPERIMENTAL RESULTS

In order to evaluate the suitability of NFV based solutions,
we performed several experiments in which we analyzed the
CPU load for the different realized solutions. The rationale
for this evaluation is to provide an indication on the scalabil-
ity of the approaches for a Network Function Virtualization
Infrastructure made up of Linux VMs (tenants VMs) and
Linux Containers/Processes running on typical Virtualization
Servers. Our experimental set-up is composed by two hosts
with an Intel i3-2100 dual-core CPU and 8G of RAM. One
host (hereafter called as HostS) is used as trafﬁc generator,
the other host (HostC) as trafﬁc sink and to run D-StreaMon
probes. We are using Debian 8.3 operating systems with Xen-
enabled v3.16.7 Linux kernels. Both hosts are equipped with
two network interfaces at 1 Gb/s, one interface is used as
the management interface and the other one for the direct
interconnection of the host (data plane network). The CPU
load has been obtained gathering the idle percentage through
top suite and subtracting this value from 100%. All results
have been obtained by executing a test of 100 replicated runs.
Error bars in the ﬁgures denote the 95% conﬁdence intervals of
the results. However, they are so close to the average that are
barely visible in ﬁgure 5. During the experiment, the probes
receive trafﬁc at three different rate of packet/s respectively
22500 pps, 45000 pps and 68750 pps with a packet size of 100
byte. To generate the trafﬁc we used the iperf tool. The trafﬁc
generator is connected to the remote host and simultaneously
launches four different UDP ﬂows.

For each of the three rates, we have evaluated the CPU
utilization in 5 different cases. In the Baseline host case, an
iperf Server is executed directly into HostS and no monitoring
probe is active. In the Probe in host case we run the StreMon
probe in the host, without any virtualization mechanism. In the
Baseline container the iperf Server is executed inside a Docker
Container, without no monitorin probes. As we expected,
increasing the packets rate introduces a linear increment of
the CPU load. Instead, moving the iperf server inside a
container (Baseline container) introduces about 13.17% of

Fig. 5: Cpu Usage

overhead. This is due to the execution of the container itself,
the introduction of an Open vSwitch for the forwarding of the
trafﬁc and the forwarding of the trafﬁc through the switch.
Further analyzing the graph, we can easily argue that the
percentage of the overhead introduced is stable while varying
the packet rate.

The Probes as Process and Probes as Container columns
shows the CPU utilization of the server machine while run-
ning a probe using the NFV based architectures. Obviously,
the introduction of the StreaMon probe increases the CPU
utilization. The probes have to analyze all the received trafﬁc
and, increasing the packets per second, the CPU utilization
increases more rapidly than the ﬁrst two columns. As expected
running a probe inside a container is more expensive than
running it as a process. The overhead introduced by the
container and by the forwarding of the trafﬁc account for about
a 15,29% of overhead. Note that the probes in the containers
need two interfaces and the forwarding of the trafﬁc is realized
through the mirror functionality provided by Open vSwitch.
Also in this case, the overhead is stable when varying the
monitored trafﬁc rate.

Analyzing the CPU load results, we can state that running
containers in a low-end virtualization add a reasonable low
overhead, despite the packet rate increases. The most important
result comes out from the comparison of the two NFV based
solution: we can run StreaMon probes in Containers with
the introduction of a total overhead about 15,29% respect of
process solution. Given the limited amount of the overhead, we
believe that the solution we designed are promising solutions
for Cloud environment: Service providers can deliver with the
same infrastructure (consolidation) both IaaS and the network
monitoring without the need for a separated infrastructure of
middlebox nodes (different management tools, low level of
automation and so on).

22500 pps45000 pps68750 pps051015202530% of CPU utilizationBaseline HostProbes in HostBaseline ContainerProbes as ProcessProbes as ContainerV. RELATED WORK

Several monitoring platforms have targeted monitoring ap-
plications programmability. CoralReef [15], FLAME [16] and
Blockmon [17] are frameworks which grant full programma-
bility by permitting the monitoring application developers to
hook their custom C/C++/Perl trafﬁc analysis function to the
platform. Opensketch [18] proposes an efﬁcient generic data
plane based on programmable metric sketches. If on the one
hand StreaMon share with Opensketch the same measurement
approach, on the other hand its data plane abstraction delegates
any decision stage and logic adaptation the control plane
and, with reference to our proposed abstraction, does not
go beyond the functionalities of our proposed Measurement
Subsystem. On the same line, ProgME [19] is a programmable
measurement framework which revolves around the extended
and more scalable notion of dynamic ﬂowset composition, for
which it provides a novel functional language. Even though
equivalent dynamic tracking strategies might be deployed
over Openﬂow based monitoring tools, by exploiting multiple
tables, metadata and by delegating monitoring intelligence
to external controllers, this approach would require to fully
develop the speciﬁc application logic and to forward all
packets to an external controller, (like in Openﬂow based
monitoring tool Fresco [20]), which will increase complexity
and affect performance.

Monitoring solutions based on NFV and SDN concepts
is a topic addressed also by other works. Authors in [21]
design an orchestrator based solution that leverages on the
functionalities of a Network Monitor and SDN controller
to execute security applications. Respect to our work, this
solution does not consider neither NFV solutions nor the
network monitoring inside the network. Virtualized functions
for security appliances are described in [22]. However this
work does not take into consideration SDN for controlling
network operation and does not consider tiny virtual resources
to run security functions. CloudSec [23] share with our work
only the purpose of the real-time security monitoring for the
hosted VMs in the IaaS cloud platform. From an architectural
point of view is completely different, as it is a monitoring
appliance based on introspection techniques. [24] described a
distributed intrusion detection system which spreads its Agents
in the Cloud. This agents run in VMs. Also PsycoTrace
[25], [26] and other works like [27] exploit virtualization
to introduce monitoring solution in the cloud. The approach
of running security functions in virtual computing resources
is similar to our, but they use full-ﬂedged VMs instead of
Containers. Moreover, these works does not consider recon-
ﬁguration of the network through SDN as reaction to possible
threats. Although, different monitoring solution are based
on NFV and SDN concepts, to the best of our knowledge
none integrate NFV and SDN in an unique platform like D-
StreaMon platform does.

VI. CONCLUSIONS

We have described D-StreaMon an NFV-capable distributed
framework for network monitoring. D-StreaMon has been

realized on top of StreaMon platform, which is a middlebox
solution for network monitoring. A distributed architecture
based on Publish/Subscribe model is the foundation of the
new implementation. The distribution and separation of con-
cerns delivers also a streamlined deployment procedure. Using
this architecture we implemented two NFV based solutions:
Processes based and Containers based. We have realized a per-
formance evaluation of the realized solutions. As we expected
the amount of the overhead introduced by the NFV designs is
limited making them are an attractive solution. Cloud providers
can deliver with a unique infrastructure (consolidation) both
IaaS and the network monitoring without the necessity for the
deployment of a separated infrastructure of middlebox nodes
(different management tools, low level of automation and so
on). This will open also a new interesting scenarios where the
network monitoring can be provided to the users as a service
(XaaS) thanks also to the programmability functionalities of
platforms like StreaMon. All the source code of the developed
solution is available at [28]

Future works will address:

i) the improvement of the
performances of the D-StreaMon probes in terms of packet
processing; ii) the realization of a coordinated solution which
integrates NFV, SDN and Cloud Computing in one infrastruc-
ture. Improve the performances of the probes is an important
step as currently we have a limit on the number of packets
that the probes are able to handle. A ﬁrst step towards the
resolution could be the substitution of Libpcap library at the
base of StreaMon platform with a more performant solution.
The realization of an integrated SDN, NFV and Cloud infras-
tructure will provide the ﬁnal step towards a fully functional
solution. The Cloud OS can guarantee the automated deploy-
ment of probes and can provide useful information to the SDN
controller about tenants VMs and associated probes. These
information are useful for the Network OS to immediately
react if a network probe notiﬁes for malicious actions.

ACKNOWLEDGMENT

This research was partially supported by the EU Commis-
sion within the Horizon 2020 program, SCISSOR project grant
no 644425.

REFERENCES

[1] A. Galis et al., “Softwarization of future networks and services-
programmable enabled networks as next generation software deﬁned
networks,” in IEEE workshop SDN for Future Networks and Services
(SDN4FNS), 2013.

[2] M. Kind et al., “Softwarization of carrier networks,” in Information

Technology. Volume 57, Issue 5, Pages 277284, 2015.

[3] “ETSI group for Network Function Virtualization.” [Online]. Available:

http://www.etsi.org/technologies-clusters/technologies/nfv

[4] “Software-deﬁned networking: The new norm for networks.” [Online].
Available: http://www.etsi.org/technologies-clusters/technologies/nfv
[5] G. Bianchi et al., “Streamon: A software-deﬁned monitoring platform,”
IEEE, 2014,

in Teletrafﬁc Congress (ITC), 2014 26th International.
pp. 1–6.

[6] N. McKeown et al., “Openﬂow: enabling innovation in campus net-
works,” ACM SIGCOMM Computer Communication Review, vol. 38,
no. 2, pp. 69–74, 2008.

[7] “Scissor project.” [Online]. Available: http://scissor-project.com
[8] “ZeroMQ Project.” [Online]. Available: http://zeromq.org
[9] “Ansible.” [Online]. Available: https://www.ansible.com

[10] M. Satyanarayanan et al., “The case for vm-based cloudlets in mobile
computing,” Pervasive Computing, IEEE, vol. 8, no. 4, pp. 14–23, 2009.

[11] “NuvlaBox.” [Online]. Available: http://sixsq.com/products/nuvlabox/
[12] “Docker.” [Online]. Available: https://www.docker.com
[13] “Open vSwitch.” [Online]. Available: http://openvswitch.org
[14] “Kubernetes.” [Online]. Available: http://kubernetes.io
[15] K. Keys et al., “The architecture of coralreef: an internet trafﬁc moni-

toring software suite,” in In PAM. Citeseer, 2001.

[16] K. Anagnostakis et al., “Open packet monitoring on ﬂame: Safety,
Springer, 2002,

performance, and applications,” in Active Networks.
pp. 120–131.

[17] F. Huici et al., “Blockmon: A high-performance composable network
trafﬁc measurement system,” ACM SIGCOMM Computer Communica-
tion Review, vol. 42, no. 4, pp. 79–80, 2012.

[18] M. Yu et al., “Software deﬁned trafﬁc measurement with opensketch,”
in Presented as part of the 10th USENIX Symposium on Networked
Systems Design and Implementation (NSDI 13), 2013, pp. 29–42.
[19] L. Yuan et al., “Progme: towards programmable network measurement,”
IEEE/ACM Transactions on Networking (TON), vol. 19, no. 1, pp. 115–
128, 2011.

[20] S. Shin et al., “Fresco: Modular composable security services for

software-deﬁned networks.” in NDSS, 2013.

[21] A. Zaalouk et al., “Orchsec: An orchestrator-based architecture for
enhancing network-security using network monitoring and sdn con-
trol functions,” in Network Operations and Management Symposium
(NOMS), 2014 IEEE.
IEEE, 2014, pp. 1–9.

[22] D. Basak et al., “Virtualizing networking and security in the cloud,”
ACM SIGOPS Operating Systems Review, vol. 44, no. 4, pp. 86–94,
2010.

[23] A. Ibrahim et al., “Cloudsec: a security monitoring appliance for virtual
machines in the iaas cloud model,” in Network and System Security
(NSS), 2011 5th International Conference on.
IEEE, 2011, pp. 113–
120.

[24] A. V. Dastjerdi et al., “Distributed intrusion detection in clouds using
mobile agents,” in Advanced Engineering Computing and Applications
in Sciences, 2009. ADVCOMP ’09. Third International Conference on,
Oct 2009, pp. 175–180.

[25] F. Baiardi et al., “Transparent process monitoring in a virtual environ-
ment,” Electronic Notes in Theoretical Computer Science, vol. 236, pp.
85–100, 2009.

[26] B. Payne et al., “Lares: An architecture for secure active monitoring
using virtualization,” in Security and Privacy, 2008. SP 2008. IEEE
Symposium on.

IEEE, 2008, pp. 233–247.

[27] T.-c. Chiueh, M. Conover, M. Lu, and B. Montague, “Stealthy deploy-
ment and execution of in-guest kernel agents,” in In BlackHat. Citeseer,
2009.
[28] “D-streamon

[Online]. Available:

https://github.com/

repository.”

netgroup/dstreamon

