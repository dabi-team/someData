2
2
0
2

y
a
M
8
1

]

R
C
.
s
c
[

1
v
0
3
2
9
0
.
5
0
2
2
:
v
i
X
r
a

ExploitWP2Docker: a Platform for Automating the
Generation of Vulnerable WordPress Environments
for Cyber Ranges

1st Francesco Caturano
DIETI
University of Naples “Federico II”
Naples, Italy
francesco.caturano@unina.it

2nd Nicola d’Ambrosio
DIETI
University of Naples “Federico II”
Naples, Italy
nicola.dambrosio2@unina.it

3rd Gaetano Perrone
DIETI
University of Naples “Federico II”
Naples, Italy
gaetano.perrone@unina.it

4th Luigi Previdente
DIETI
University of Naples “Federico II”
Naples, Italy
lprevidente@gmail.com

5th Simon Pietro Romano
DIETI
University of Naples “Federico II”
Naples, Italy
spromano@unina.it

Abstract—A cyber range is a realistic simulation of an or-
ganization’s network infrastructure, commonly used for cyber
security training purposes. It provides a safe environment to
assess competencies in both offensive and defensive techniques.
An important step during the realization of a cyber range is the
generation of vulnerable machines. This step is challenging and
requires a laborious manual conﬁguration. Several works aim
to reduce this overhead, but the current state-of-the-art focuses
on generating network services without considering the effort
required to build vulnerable environments for web applications.
A cyber range should represent a real system, and nowadays,
almost all the companies develop their company site by using
WordPress, a common Content Management System (CMS),
which is also one of the most critical attackers’ entry points. The
presented work proposes an approach to automatically create and
conﬁgure vulnerable WordPress applications by using the infor-
mation presented in public exploits. Our platform automatically
extracts information from the most well-known publicly available
exploit database in order to generate and conﬁgure vulnerable
environments. The container-based virtualization is used to gen-
erate lightweight and easily deployable infrastructures. A ﬁnal
evaluation highlights promising results regarding the possibility
of automating the generation of vulnerable environments through
our approach.

Index Terms—Cyber ranges, security, container-based virtual-

ization, Content Management Systems

I. INTRODUCTION

The world is more and more interconnected, so the amount
of sensitive data exchanged across the network is becoming
increasingly important. As a result, cyberattacks are growing
in terms of both numbers and level of sophistication.

In this scenario, companies pay more attention to cyber-
their business
security to prevent cyberattacks and protect
assets. According to Deloitte business research, organizations
will invest between 6% and 14% of their annual IT budget
in cybersecurity [1]. Part of this budget will be devoted to

educating inexperienced and insufﬁciently trained employees,
who can represent a severe security risk. In order to be effec-
tive, such training sessions must integrate complex hands-on
cybersecurity exercises in addition to face-to-face theoretical
through cyber
lectures. Trainers can accomplish that goal
ranges.

Cyber ranges are interactive, virtual representations of net-
works, systems, tools, and applications that enable learners
to both practice and assess the acquired skills. These virtual
scenarios provide a safe and legal environment to gain hands-
on cyber skills, to learn secure development, and, more in
general, to test an organization’s security posture [2]. People
can use cyber ranges for other purposes, too. For example,
developers and system administrators might test systems and
applications within cyber ranges and identify vulnerabilities in
a controlled manner before going to production.

Unfortunately, the development and maintenance of a cyber
range can become cumbersome. One of the most expensive
tasks in terms of human effort
is the realization of the
vulnerable environment used to train. In fact, it is often done
manually and requires a lot of time, effort, and skills. Several
works try to address the issue by using information obtained
through the deﬁnition of description languages that allows the
realization of vulnerable environments. Still, these approaches
are commonly focused on the generation of the network stack
and the virtual machines’ deployment and do not take into
account the automatic deployment and conﬁguration of the
application layer stack. Nowadays, many attacks exploit the
public company website, which is commonly developed by
using Content Management Systems (CMS), i.e., frameworks
that allow the management and the creation of digital content
for websites. According to Iqbal et al. (2020) [3], WordPress
is the used most widely adopted in the market (see Table I).

 
 
 
 
 
 
TABLE I
MARKET SHARE OF CMS PLATFORMS

Time
1 Apr 2019
1 Aug 2019
1 Dec 2019
10 Mar 2020

WordPress
58.8 %
59.3%
59.9%
60.1%

Joomla
7.0%
6.8%
6.6%
6.2%

Drupal
4.7%
4.7%
4.7%
4.2%

In this work, we propose an approach to automate
the creation of vulnerable WordPress environments through
lightweight containers. Containers are environments for ex-
ecuting processes with conﬁgurable isolation and resource
limitations [4]. The container-based virtualization leverages
several Linux kernel features, such as namespaces, resource
limits, and mounts,
to increase performance and optimize
overall resource utilization. Such features prove very useful
when developing vulnerable assets that can be deployed in
cyber ranges. We show how it is possible to automatically gen-
erate vulnerable WordPress environments by thoroughly ana-
lyzing well-documented public exploits collected into exploit
databases. Exploit databases, such as Exploit-DB (EDB) [5],
CxSecurity [6] and Rapid7 [7], collect the so-called Proof
of Concepts (PoC) for exploiting a vulnerability, as well as
several helpful information to let users understand the required
preconditions that make the system vulnerable. This exploit
information can be used to create a vulnerable application
without any user interaction. In this work, we use EDB, as
it contains information relevant to reaching our goal. Indeed,
exploits in EDB provide useful data, such as the vulnerability
description, the exploit code (or the sequence of steps needed
to reproduce the exploit), and sometimes even the vulnerable
component itself. Our approach is focused on web exploits
regarding one of the most widely deployed CMS (Content
Management System), namely WordPress [8].

This assumption is not very limiting since the heterogeneity
of web exploits, such as SQL Injection, Cross-site Scripting,
and Cross-site Request Forgery allows for generating a wide
number of vulnerable environments. Of course, the proposed
approach can be extended to generate vulnerable scenarios
from any type of exploit.

it

The vulnerable container generation starts by selecting a
public WordPress exploit present on ExploitDB. The exploit
title and the metadata are analyzed and converted into helpful
information to ﬁnd a Docker image that satisﬁes the exploit
preconditions. The search is performed on Docker Hub, the
world’s largest repository of Docker images. When an image
is found,
is used as the base for the generation of a
Dockerﬁle containing all the instructions needed in order to
setup the vulnerable environment. The process is completed
by installing all the components required to reproduce the
vulnerability, as well as the required CMS plugins and themes.
To build these environments, we decided to use Docker [9]
due to the isolation, reproduction, and performance bene-
ﬁts [10] that it naturally brings. The implementation of the
proposed solution is publicly accessible on GitHub [11].

The paper is divided into six sections. Section II describes

the current approaches for building cyber range environments.
In Section III and Section IV we discuss, respectively, the
design and the implementation of our automated solution for
the generation of vulnerable WordPress scenarios. In Section V
we analyze how many vulnerable conﬁgurations it is possible
to generate with the proposed approach automatically. Finally,
in Section VI we critically discuss the obtained results, identify
ways for improving the performance of our platform in terms
of exploits coverage level and highlight the main directions of
our future work in the ﬁeld.

II. RELATED WORK

Cyber ranges are widely used for many purposes, and each
solution uses a different way to deploy and generate vulnerable
scenarios. One of the most famous commercial cyber ranges
is Hack The Box (HTB) [12]. HTB offers several hand-made
vulnerable machines deployed remotely. Currently, HTB does
not implement any solution to automate the generation of
vulnerable scenarios. In fact, the owners of the platform offer
a reward to third parties who act as creators of vulnerable
machines.

In contrast to HTB, we proposed the Docker Security Play-
ground (DSP) [13], a self-hosted cyber range. The local instal-
lation is possible because DSP reduces the hardware resource
utilization by deploying vulnerable scenarios in lightweight
containers. DSP is open-source and has considerable commu-
nity support. People can design their vulnerable scenarios and
share them with the community through a pull request on the
GitHub repository project1.

Cliffe et al. (2017). [14] address another relevant issue
regarding cyber ranges, that is, the automatic generation of
vulnerable scenarios. In particular, they propose Security Sce-
nario Generator (SecGen), a robust framework that can build
complex VMs based on randomized scenarios. These vulner-
able environments are generated by using pre-built modules
that can be combined together and automatically deployed on
a VM using Vagrant2 and Puppet3.

Nakata et al. (2021) [10] use the same concept to propose
CyExec, a Docker-based cyber range platform with a feature
that can automatically generate vulnerable scenarios in a
randomized fashion. The authors compare their approach with
SecGen and show that container-based virtualization, as also
demonstrated in [15], can give better performance and cyber
range beneﬁts in terms of isolation. The mentioned automatic
generation approaches are different from ours because the vul-
nerable scenarios are created by combining pre-built modules,
while we build the vulnerable application by customizing a
Docker image that is looked for in the Docker Hub repository.
Thus, CyExec and SecGen create more complicated vulnerable
environments, but our strategy is more general, and automation
is, in our case, achieved with minimal implementation effort.
Costa et al. (2020) [16] propose a framework for automating
the deﬁnition and deployment of arbitrarily complex cyber

1DSP Repository: https://github.com/DockerSecurityPlayground/DSP
2https://www.vagrantup.com/
3https://puppet.com/

range scenarios. This work relies on the Virtual Scenario
Description Language (VDSL), which provides a high-level
speciﬁcation of the scenario properties in terms of involved
networks, hardware, software, CVEs (Common Vulnerability
Exposure), and other related information. The VSDL model
contains information to build the vulnerable machine on top
of Openstack using tools like Terraform and Packer.

A similar automated approach is proposed by Russo et
al. [17]. This work presents CRACK, a framework to automat-
ically deploy all the components of a cyber range described
using a declarative language. In particular, CRACK SDL is a
language based on TOSCA that allows the speciﬁcation and
the inter-operation of all scenario elements.

Unfortunately, both in [16] and in [17], it is difﬁcult to share
one or more key components of a speciﬁc training scenario
with the community. Russo et al. [18] have addressed this
problem and proposed a solution with Nautilus. This cyber
range provides a training environment and a marketplace for
sharing vulnerable scenarios. Through a speciﬁc scenario spec-
iﬁcation language, Nautilus allows to semi-automate the con-
ﬁguration and deployment of virtualized vulnerable networks
and systems. Our approach differs from the ones mentioned
above since it does not require any speciﬁcation document
by the user. Indeed, in our case, the vulnerable environment is
generated by automatically extracting information from public
exploits.

Gustafsson et al. [19] analyze the automation features in
CRATE, a cyber range used by the Swedish Defense Research
Agency (FOI). One of these features deals with the automatic
deployment of virtual machines and their services through a
JSON ﬁle containing conﬁguration parameters and required
commands to inject the vulnerability. In [20], Gustafsson et al.
also investigate the generation of a vulnerable machine using
Common Platform Enumeration (CPE) and packet managers.
Indeed, CPE makes it possible to identify the versions of
vulnerable software affected by a particular CVE. At the same
time, packet managers streamline the installation of many
applications without any user interaction. Unfortunately, CPE
only takes into account the vulnerable application without con-
sidering the various dependencies that may make that speciﬁc
software version vulnerable. For this reason, to generate the
desired vulnerable environment, it is necessary to combine
information from both CVE and CPE. However, automating
this strategy is complex, as CVE descriptions do not have a
standard structure. Instead, our approach takes advantage of
the structured information contained in the exploits, deﬁned
and veriﬁed by the exploit database maintainers.

Content Management Systems (CMS) play an important
role in realizing web applications. Martinez-Caro et al. [21]
explore the advantages and drawbacks of these solutions and
show how relevant it is the security impact of using them
without proper controls. Even if our focus is the generation of
vulnerable applications, we implemented a Docker Hub API
that is able to ﬁnd CMS Docker images and a CMS API
that allows to setup CMS applications with vulnerable plugins
and themes. These APIs can be reused to generate custom

CMS conﬁgurations for any development testing purpose. The
current interest in CMS security is conﬁrmed by Seelen et
al. [22]. The authors propose a review of penetration testing
approaches and tools used against CMS platforms. Even if the
automatic generation of vulnerable environments is interesting
for cyber range developers, our approach might also be used
to build an evaluation platform, and we hope that this work
will help security researchers verify the suitability of their own
assessment tools.

III. DESIGN

In

this

section, we

of
ExploitWP2Docker, a platform that “translates” exploit
descriptions into vulnerable Wordpress containers. Automating
the translation involves two steps:

describe

design

the

- analyze the Proof of Concept of the exploit to gather
information about
the components required to create
an environment that enables the vulnerability, such as
software versions, add-ons, and conﬁgurations;

- gather all the required components to generate a vulner-

able container-based stack.

The Offensive Security Exploit Database (ExploitDB) is
one of the primary sources for retrieving information about
public exploits. During the development of our solution, we
analyzed the structure of the exploits to understand if it was
possible to extract data useful for the automatic generation of
the vulnerable stack.

Public exploits, in many cases, contain information that

allows reproducing the vulnerability.

A. ExploitDB

Each exploit in ExploitDB has a unique identiﬁer (EDB-ID),
which is also part of the URL that references the exploit web
page. Exploit web pages can be divided into three sections:

• the ﬁrst section contains a short title that summarizes the
product, the vulnerable version, and the attack type;
• the second section contains metadata of the exploit, such
as the author, the vulnerability type, and the publication
date;

• the third section presents the demonstration of the exploit,
also known as PoC (Proof of Concept), and a header
containing valuable information written in a standard
form, according to the guidelines provided by ExploitDB
mantainers4.

As it is possible to observe, several relevant bits of infor-
mation can be used to automate the generation of vulnerable
stacks.

Even if this approach seems to be relatively promising,
we will observe that there are many limitations in terms of
vulnerability generation, even when only focusing on CMS
platforms.

4Submit Report ExploitDB page: https://www.exploit-db.com/submit

TABLE II
WORDPRESS EXPLOITS STATISTICS

WordPress

N. of exploit

Core

Theme

Plugin

Not Categorized

90

1167

79

18

B. WordPress exploits

WordPress is a Content Management System (CMS) de-
signed to be ﬂexible. It is used to create web applications,
and it is highly customizable by installing add-ons such as
themes and plugins. Extensions can be installed through a
graphical interface or via a command-line. By analyzing the
ﬁrst section of WordPress exploits in ExploitDB, we observed
that a signiﬁcant number of them uses a precise title pattern:

WordPress (cid:104) Core/Plugin/Theme (cid:105) [Product] [Version] - [Attack
Type]

The (cid:104) Core/Plugin/Theme (cid:105) ﬁeld identiﬁes the ex-
ploit category, i.e., details whether the vulnerability affects
the WordPress Core or its extensions. [Product] and
[Version] ﬁelds are optional and describe the product name
and the CMS version.

To evaluate the effectiveness of our analysis, Table II reports
how many exploits follow the title pattern. In particular, the
last row shows that only 1.33% of the exploit titles do not
follow the identiﬁed pattern. For these exploits, the current
ExploitWP2Docker implementation is not able to generate a
vulnerable environment.

It is possible to parse the title from each WordPress exploit
to obtain information regarding the vulnerable CMS version
and build a vulnerable WordPress core stack.

To generate a vulnerable environment, ExploitWP2Docker
searches on Docker Hub a WordPress Docker image con-
taining a valid vulnerable tag version. As the title present in
ExploitDB does not explicitly mention the speciﬁc WordPress
version, we implement an API that queries the CPE Dic-
tionary [23] provided by NIST to convert CVE information
into CPE strings, in the same way as the one proposed by
Gustafsson et al. [20]. CPE strings are then parsed to discover
the right vulnerable version.

IV. IMPLEMENTATION

This section describes the implementation of the container
generation process. In particular, in the following, we explain
the environment generation procedure to build vulnerable
WordPress environments5.

We also analyze when the proposed approach is not able to

generate a vulnerable working conﬁguration.

5It is possible to ﬁnd a sequence diagram for the WordPress vulnerable
container generation process at the following URL: https://github.com/NS-
unina/cve2docker/blob/main/docs/gen-conﬁg-wp-ﬂowchart.png

procedure WORDPRESSEXPLOIT(EID)

Type = ExtractTypeFromExploitTitle(EID);
Target = ExtractTargetFromExploitTitle(EID);
if Target.Version != NULL then

Version = ExtractVersionFromTarget(EID);

else if ExtractVersionFromPoC(EID) then

Version = ExtractVersionFromPoC(EID);
else if !CheckVulnAppFromExploit(EID) then

raise Exception(”No Vulnerable Application”)

end if
if Type == Core then

SearchWordPressDockerImage(Version);
if !SearchWordPressDockerImage(Version) then

raise Exception(”No Image”)

end if

else if CheckSoftwareLink(EID) then

Product = ExtractProductFromSoftwareLink(EID);

else

Product = ExtractProductFromTarget(EID);

end if
if Type == Plugin then

CheckoutPluginFromSVNRepository(Product);

else

CheckoutThemeFromSVNRepository(Product)

end if
if !Checkout() then

if CheckSoftwareLink(EID) then

DownloadFromSoftwareLink(EID);

else if CheckVulnApp(EID) then

DownloadFromExploitDB(EID);

else

raise Exception(”No Vulnerable Application”)

end if

end if
if !SetupConﬁguration() then

raise Exception(”Error During Setup”)

end if
return 0
end procedure

Fig. 1. WordPress Exploit

When a user wants to generate a vulnerable environment
from a WordPress exploit, ExploitWP2Docker tries to extract
the vulnerable software version either from the title of the
exploit or by parsing the Proof of Concept text. If it is not able
to ﬁnd the version, ExploitWP2Docker veriﬁes the presence
of a vulnerable application related to the exploit in ExploitDB.
Next, the procedure veriﬁes if the vulnerability affects the
WordPress Core. In this case, ExploitWP2Docker searches
for a vulnerable WordPress Docker Image on Docker Hub.
If the image is not present, the software raises an exception.
Otherwise, the program is ready to generate the vulnerable
environment and run the setup phase explained further below.
If the vulnerability is related to WordPress extensions, the

process is different since the vulnerable Plugin or Theme
source code is required to generate the vulnerable environ-
ment. WordPress extensions can be found in several ways:

• by exploring the WordPress SVN, a public collection of
WordPress Themes6 and Plugins7 managed via Subver-
sion, a well-known version control system.

• by parsing software links in the Proof Of Concept header.
• by leveraging the vulnerable applications provided by

ExploitDB.

ExploitWP2Docker throws an exception if it is not able
to retrieve the plugin or theme automatically. Once all the
components are obtained, the environment is conﬁgured, and,
as soon the container terminates the bootstrap operation,
ExploitWP2Docker executes a setup script that completes the
conﬁguration. Eventually, the generated stack starts and is
initialized through a bootstrap phase. The bootstrap operation
is completed when the WordPress setup page (http://localhost/
wp-admin/index.php) is available. ExploitWP2Docker makes
HTTP requests every 10 seconds to such a URL until
it
receives a 200 HTTP response code. A timeout is set to check
if the services do not bootstrap correctly.

When the bootstrap phase is completed, the setup script is
executed, and, if necessary, the vulnerable plugins and themes
are enabled.

The algorithm in Figure 1 shows the execution ﬂow. The
project has been implemented in Java by using the Spring
framework. At
the time of writing (i.e., software version
0.0.3), it is composed of six Java packages, 37 Java classes,
and 2587 lines of code. The project has been designed to
be highly modular, extendible, and conﬁgurable. In fact,
several service classes have already been designed, such as
JoomlaService and PhpWebAppService, that can be
used to generate vulnerable environments for Joomla and PHP
stacks. Anyway, such classes are in the development stage, and
further works should be performed to increase the vulnerability
coverage for these stacks.

V. EVALUATION

To the best of our knowledge, no works address the
automation of generating vulnerable web applications for
cyber ranges. For this reason, it is not possible to compare
the effectiveness of the proposed approach with other ones.
Table III shows a feature comparison between our work
and the current state-of-the-art platforms that automate the
realization of cyber-range scenarios. As it
is possible to
observe, all the related works entirely cover the deployment
and conﬁguration of complex scenarios, from the host con-
ﬁguration to the webserver. However, such solutions do not
automate the generation of the source code used to build
the infrastructure, i.e., Infrastructure as Code (IaC) is not
automatically generated. Furthermore, they do not allow the
conﬁguration of the web application stack,
is not
possible to setup, install and conﬁgure a WordPress instance.

i.e.,

it

6SVN Theme:https://themes.svn.wordpress.org/
7SVN Plugin:https://plugins.svn.wordpress.org/

As already stated, this is related to the fact that related works
are focused on deﬁning semantic languages to simplify the
realization of complex vulnerable environments, while our
solution addresses the speciﬁc problem of realizing vulnerable
applications. On the same time, our solution is not able to
generate complex infrastructures, but it would be possible to
integrate ExploitWP2Docker into such solutions to bring the
beneﬁts of both approaches. The remainder of this section
evaluates the number of generated conﬁgurations obtained by
executing ExploitWP2Docker on all the WordPress exploits
present on ExploitDB. The presented analysis was carried
out in May 1st 2021. We were able to successfully generate
484 scenarios, i.e., 39% of the total number of WordPress
exploits.Fig. 2 illustrates the main source archives leveraged
by ExploitWP2Docker to download the extensions required for
building the vulnerable environment. Nearly two-thirds of the
extensions are obtained from the SVN repository, while 36%
are downloaded from ExploitDB. The remaining part comes
from links inside the PoC header. These results highlight the
importance of implementing alternative approaches to down-
load the components that build the stack of a vulnerable en-
vironment. As WordPress offers several sources, it is possible
to increase automation effectiveness. However, the approach
should be extended to other CMS systems, such as Joomla,
that do not have available add-ons repositories. Nevertheless,
the results obtained by the open-source scanners, namely,
Arachni and ZAP, are very satisfactory and show that open-
source solution performance can be compared to commercial
scanners. The result of the work demonstrates that WAVSEP
is an excellent platform for benchmarking web vulnerability
detection scanners. The methodology used allowed the goals
to be met by enabling a current benchmark platform and can,
therefore, be used to keep the platform up-to-date and as
a basis for future developments. Moreover, the current state
of the scanners is still far from the activity performed by a
security expert, such as a Penetration Tester, since all test cases
are vulnerable. It should be noted that although the results
obtained are satisfactory, the failure to detect even a single
test case can mean the presence of vulnerabilities within a
web application. Scanners, both open-source and commercial,
are excellent support tools. Better results could be achieved,
for example, by integrating artiﬁcial intelligence techniques.
Fig. 3 illustrates the number of submitted exploits and

environments correctly generated, divided by year.

In fact, as it is possible to observe in Fig. 4, the vast
majority of the exploits submitted between 2003 and 2007
are related to core WordPress vulnerabilities. In these cases,
ExploitWP2Docker would need to download a vulnerable
Docker image, which is unfortunately not feasible since the
ﬁrst WordPress version available on Docker Hub (version
3.1.0) was released in 2011.

Also, the approach fails when the vulnerable application is
not available or the WordPress version is unknown. One other
failure cause can be the incompatibility between the vulnerable
plugin and the adopted WordPress version. The pattern title
was adopted by ExploitDB only in recent years, so older

TABLE III
COMPARISON WITH OTHER PLATFORMS

Work

Creation
of complex
scenarios

IaC auto-
matically
generated

Web
Server
Installation

Web
Server
Conﬁgura-
tion

MySQL
Installation

MySQL
Conﬁgura-
tion

WP
Installation

WP Plugin
Installation

WP
Version
Conﬁgura-
tion

VSDL [16]

CRACK
[17]

Nautilus
[18]

ExploitWP2
Docker

(cid:51)

(cid:51)

(cid:51)

(cid:55)

(cid:55)

(cid:55)

(cid:55)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:51)

(cid:55)

(cid:51)

(cid:51)

(cid:51)

(cid:55)

(cid:51)

(cid:55)

(cid:51)

(cid:55)

(cid:55)

(cid:55)

(cid:51)

(cid:55)

(cid:55)

(cid:55)

(cid:51)

Fig. 2. Number of vulnerable downloaded applications for site - WordPress

Fig. 3. Number of generation divided by year - WordPress

exploits do not report any information about the vulnerable
core or plugin version. In these cases, it is not possible to use

Fig. 4. Error of generations divided by year - WordPress

our approach.

VI. CONCLUSION

In this work, we have presented a container-based platform
that automates the generation of vulnerable WordPress envi-
ronments. With our approach, we were able to build more than
four hundred vulnerable WordPress environments. The number
of such vulnerable environments will certainly increase over
time with the release of new exploits. Our future work will
expand the focus towards other systems beyond WordPress,
starting from other CMS, such as Joomla and PHP-based web
applications. As a matter of fact, if we extend this approach to
all possible PHP applications, we will be able to reproduce in
an automated fashion about 50%8 of all the exploits contained
in ExploitDB. This goal can be achieved with minimal effort,
thanks to the modular setting of the system we have devised.
Relevant improvements could be achieved by realizing Docker
images for CMS versions not currently available on Docker
Hub. Another interesting evolution of our work deals with

8ExploitDB stat: https://www.exploit-db.com/exploit-database-statistics

Software link6.0%ExploitDB36.0%SVN58.0%20022004200620082010201220142016201820202022year020406080100120140160180200# exploitsErrorSuccess20022004200620082010201220142016201820202022Year020406080100120140# exploitsDuring SetupNo ImageNo Vuln AppVersion UnknownOtherexploring alternative approaches to increase the coverage of
extensions. Concerning this point, we do believe that the use
of a headless browser will allow us to effectively reproduce
the typical human interaction patterns, hence automating the
download of both themes and components. A further im-
provement can certainly derive from extending the proposed
approach to other exploit databases. As a ﬁnal remark, we
acknowledge that containers do limit
the reproduction of
vulnerable environments, as we depicted in [24]. Some authors
are experimenting alternative virtualization approaches, such
as using MicroVM, which has the same beneﬁts as container-
based virtualization in terms of resource overhead but offers
a better grade of isolation [15]. As part of our future work,
we will explore the application of alternative virtualization
techniques, such as MicroVM, for the generation of vulnerable
environments not reproducible through Docker.

REFERENCES

[18] G. Bernardinetti, S. Iafrate, and G. Bianchi, “Nautilus: A tool for
automated deployment and sharing of cyber range scenarios,” in The
16th International Conference on Availability, Reliability and Security,
2021, pp. 1–7.

[19] T. Gustafsson and J. Almroth, “Cyber range automation overview with
a case study of crate,” in Nordic Conference on Secure IT Systems.
Springer, 2020, pp. 192–209.

[20] J. Kahlstr¨om and J. Hedlin, “Automating software installation for cyber
security research and testing public exploits in crate,” https://www.diva-
portal.org/smash/record.jsf?pid=diva2%3A1574026&dswid=-1331,
2021, accessed: 2022-2-25.

[21] J.-M. Martinez-Caro, A.-J. Aledo-Hernandez, A. Guillen-Perez,
R. Sanchez-Iborra, and M.-D. Cano, “A comparative study of web
content management systems,” Information, vol. 9, no. 2, 2018.
[22] R. S. Jagamogan, S. A. Ismail, N. Haﬁzah, and H. H. Abas, “A review:
Penetration testing approaches on content management system (cms),”
in 2021 7th International Conference on Research and Innovation in
Information Systems (ICRIIS).

IEEE, 2021, pp. 1–6.

[23] NVD, “Ofﬁcial common platform enumeration (cpe) dictionary,” https:

//nvd.nist.gov/products/cpe, accessed: 2022-2-25.

[24] F. Caturano, G. Perrone, and S. Romano, “Capturing ﬂags in a dy-
namically deployed microservices-based heterogeneous environment,” in
2020 Principles, Systems and Applications of IP Telecommunications,
IPTComm 2020, 2020.

[2] N.

[1] Bernard, Julie and Nicholson, Mark, “Reshaping the cybersecurity
landscape,” https://www2.deloitte.com/us/en/insights/industry/ﬁnancial-
services/cybersecurity-maturity-ﬁnancial-institutions-cyber-risk.html, 7
2020, accessed: 2022-2-25.
R.

range: A guide.”
“The
[Online]. Available: https://www.nist.gov/system/ﬁles/documents/2020/
06/25/TheCyberRange-AGuide(NIST-NICE)(Draft)-062420 1315.pdf
[3] M. Iqbal, M. Noman, S. R. Talpu, A. Manzoor, and M. M. Abid, “An
empirical study of popular content management system-wordpress vs
drupal vs joomla,” ICTACT Journals, pp. 1214–1219, 2020.

Team,

cyber

C.

P.

[4] Opencontainers,

-
https://github.com/opencontainers/runtime-spec/blob/
20a2d9782986ec2a7e0812ebe1515f73736c6a0c/glossary.md#container,
accessed: 2022-2-25.

“Runtime-spec

glossary,”

[5] Offensive security, “Offensive security’s exploit database archive,” https:

//www.exploit-db.com/, accessed: 2022-2-25.

[6] cxSecurity, “cxsecurity exploit database,” https://cxsecurity.com/exploit/,

accessed: 2022-2-25.

[7] rapid7, “Rapid7 vulnerability and exploit database,” https://www.rapid7.

com/db/, accessed: 2022-2-25.

[8] WordPress, “Wordpress,” https://wordpress.com/it/, accessed: 2022-2-25.
[9] Docker, “Docker,” https://www.docker.com/, accessed: 2022-2-25.
[10] R. Nakata and A. Otsuka, “Cyexec*: A high-performance container-
based cyber range with scenario randomization,” IEEE Access, vol. 9,
pp. 109 095–109 114, 2021.

[11] NS-UNINA, “Ns-unina/cve2docker: An automated platform for vulner-
able scenario conﬁguration,” https://github.com/NS-unina/cve2docker/,
accessed: 2022-2-25.

[12] Hack The Box, “Hack the box,” https://www.hackthebox.com/, accessed:

2022-2-25.

[13] G. Perrone and S. P. Romano, “The docker security playground: A
hands-on approach to the study of network security,” in 2017 Principles,
Systems and Applications of IP Telecommunications (IPTComm), 2017,
pp. 1–8.

[14] Z. C. Schreuders, T. Shaw, M. Shan-A-Khuda, G. Ravichandran,
J. Keighley, and M. Ordean, “Security scenario generator (secgen): A
framework for generating randomly vulnerable rich-scenario vms for
learning computer security and hosting ctf events,” in 2017 USENIX
Workshop on Advances in Security Education (ASE 17), 2017.

[15] S. Karagiannis, E. Magkos, C. Ntantogian, and L. L. Ribeiro, “Sand-
boxing the cyberspace for cybersecurity education and learning,” in
European Symposium on Research in Computer Security.
Springer,
2020, pp. 181–196.

[16] G. Costa, E. Russo, and A. Armando, “Automating the generation of cy-
ber range virtual scenarios with vsdl,” arXiv preprint arXiv:2001.06681,
2020.

[17] E. Russo, G. Costa, and A. Armando, “Building next generation cyber

ranges with crack,” Computers & Security, vol. 95, p. 101837, 2020.

