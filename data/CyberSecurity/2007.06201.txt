The Blockchain Based Auditor on Secret key Life
Cycle in Reconﬁgurable Platform

Rourab Paul
Computer Science & Engineering,
Siksha ’O’ Anusandhan (Deemed
to be University), Odisha, India
rourabpaul@soa.ac.in

Nimisha Ghosh
Computer Science & IT,
Siksha ’O’ Anusandhan (Deemed
to be University), Odisha, India
nimishaghosh@soa.ac.in

Amlan Chakrabarti
School of IT,
University of Calcutta
Kolkata, India
achakra12@yahoo.com

Prasant Mahapatra
Dept. of Computer Science
University of California, USA
pmohapatra@ucdavis.edu

0
2
0
2

l
u
J

3
1

]

R
C
.
s
c
[

1
v
1
0
2
6
0
.
7
0
0
2
:
v
i
X
r
a

Abstract—The growing sophistication of cyber attacks, vulner-
abilities in high computing systems and increasing dependency on
cryptography to protect our digital data make it more important
to keep secret keys safe and secure. Few major issues on secret
keys like incorrect use of keys, inappropriate storage of keys,
inadequate protection of keys, insecure movement of keys, lack
insider threats and non-destruction of keys
of audit logging,
can compromise the whole security system dangerously. In this
article, we have proposed and implemented an isolated secret key
memory which can log life cycle of secret keys cryptographically
using blockchain (BC) technology. We have also implemented a
special custom bus interconnect which receives custom crypto
instruction from Processing Element (PE). During the execution
of crypto instructions, the architecture assures that secret key
will never come in the processor area and the movement of
secret keys to various crypto core is recored cryptographically
after the proper authentication process controlled by proposed
hardware based BC. To the best of our knowledge, this is the
ﬁrst work which uses blockchain based solution to address the
issues of the life cycle of the secret keys in hardware platform.
The additional cost of resource usage and timing complexity we
spent to implement the proposed idea is very nominal. We have
used Xilinx Vivado EDA tool and Artix 7 FPGA board.

Index Terms—Blockchain, FPGA, Key Memory, Secret Key

Life Cycle

B. Insecure Movement

A security processor allows key movements between several
cores like Key Memory, RNG, Hash, Symmetric Key and
Asymmetric Key core. All these key movement to the key
memory and from the key memory should be authenticated
and secured. These transactions of key mainly suffers two
issues. A The buses used for these movements can be snooped
by software attacks. B The request of key can be issued
from some compromised IP placed inside the architecture.
To overcome attack-A the most effective solutions are bus
encryption [3], or partition of software area from these buses
[5]. Attack-B can be prevented by verifying the signature of
the requestee IP. To the best of our knowledge we did not ﬁnd
any similar solution in hardware platform.

C. Non-destruction

Once the signature of requestee IP is veriﬁed, the key should
be released to the proper destination. Except the pre-master
key, other keys should be destroyed securely. This removal
of key should be logged cryptographically and should non-
traceable.

I. INTRODUCTION

D. Audit Logging

The security of a crypto system depends on three primary
keys. Symmetric Key: is used to encrypt bulk data in symmet-
ric key algorithms like AES, TDES, DES etc. Private Keys: of
public-private key pair used in Asymmetric Key Cryptography
such as RSA, Difﬁe Helmen etc. Private key is used for
signature generation and key exchange process. Hash Key:
is used to check integrity and authenticity of transactions and
data with algorithms like SHA-3. Increasing volume of secret
key and data protected by those keys makes the cryptographic
key management relevant in current research trend [1]. There
are several threats causes compromised key. In this article we
have discussed about few major threats.

A. Storage

In many sense, processor based architectures are ﬂexible
but it can be exposed to software threats like cache attack[2],
bus snooping [3], memory disclosure attack [4] etc. hence the
storage of secret keys should be separated form software area
and it should be isolated from any physical connection of
processor.

The secret keys of a security processor is the most sensitive
data. The creation, deletion and the movement of secret key
should be logged and audited cryptographically otherwise
to identify a compromise for forensic
it will be difﬁcult
investigation.

E. Incorrect use of keys

The generated master keys are for speciﬁc purposes. Hash
core can not use encryption key and vice versa. If the keys are
used for something else, the proper protection action should be
taken. The main contribution of this article are stated below:
• This article proposes a security processor architecture
which is partitioned in three separated areas such as
processor area, crypto area, and conﬁdential area. This
architecture assures that secret key memory is isolated
form processor area.

• The architecture proposes a blockchain based auditor
to monitor secret key lifecycles. The architecture pre-
vents insecure movement, unauthorized key request, non-
destruction issued and incorrect use of keys.

 
 
 
 
 
 
• The proposed security processor can execute 21 custom

crypto instructions as shown in Table II.

Fig. 1: Custom Bus Interconnect

Fig. 2: Control Word Register
II. ARCHITECTURE

In this architecture we have partitioned three areas such
as (i) processor area, (II) crypto area and (iii)conﬁdential
area. The whole architectural details is stated in [6]. The
partitioned and isolated conﬁdential area to store secret keys
assures that
the secret key never come in the processor
area because the processor area is very much vulnerable
for various software threats. The main contribution of the
proposed article is to add a special private blockchain to
audit the movement of secret keys. Each secret key movement
is authenticated and registered cryptographically. To adopt
blockchain, we have designed the data path controller
(DPC), custom bus interconnect (CBI), buf f er and a
Signature Checker (SC) core. The architecture can exe-
cute 21 crypto instructions divided in 5 categories as shown
in Table II. All
these proposed instructions are executed
by DP C and CBI. As instructed by the TLS white pa-
the architecture processes instructions for pre −
per [7],
master key generation, master key generation, hash and
encryption process. For the proposed blockchain process we
have created a new category named as common purpose. The
details of other instructions are not described because of page
restriction. It is to be noted that blockchain data is written in
main memory which can be accessed by the PE.

A. Custom Bus Interconnect

The proposed custom bus interconnect (CBI) is a junction
through which various crypto cores and the buf f er which is
created as gateway of M aster Key M emory (MKM) can
communicate. Various paths of crypto cores and buf f er are
controlled by 4 bits input and 4 bit output addresses. Input-
output address pins are controlled by data path controller
(DPC) IP. In our current version of design, we have 4 inputs
coming from buf f er, output of hash, output of RN G and
output of RSA. The 5 outputs of CBI are connected with

Fig. 3: System Architecture

buf f er, key of AES, key of hash and key of RSA block.
The synchronization signals of input cores and output cores
are also taken care of by CBI. The ﬁg. 1 shows the synchro-
nization signals such as RN G_done, Buf f _rd, Hash_done,
Buf f _rdy, Hash_key_rdy and En_key_rdy. The CBI is
combination of MUX and DE-MUX where MUX’s output is
connected with DEMUX’s input. The input address and output
address pins are the selecting inputs of MUX and DE-MUX
respectively.

B. Data Path Controller

The proposed data path controller (DPC) is a slave IP
of P E. The P E can send 21 instructions by Application
Peripheral Interface (API) call for various crypto operations
of TLS protocol. The data path controller maintains a
control word register to execute the 21 instructions as shown
in Table II. The PE can communicate DP C by AXI bus
through P E bus interconnect. In the current version of
hardware, DP C has 16 bits control word to control various
crypto cores placed in the crypto area. The data path and
binaries for all proposed instructions are shown in II. As
shown in ﬁg. 2, the 11th bit is set to logic 1 to enable the
custom bus interconnect, otherwise it will be logic 0 to
disable the said interconnect. The 16th to 13th bits are used
to select the input address. If the input address is 0000,
RN G will be selected. It will be 0001, 0010 and 0011 to select
Buf f , Hash and P ubEn core respectively. The 12th and 9th
bit is to address outputs. The output address will be 0000,
0001, 0010, 0011 and 0100 to select the Buf f , Hash_Key,
En_key, Hash_In and P ub_en_in core. The 6th to 1st bit
of control word register (CWR) are used to enable different
hardware blocks such as RSA, RN G, Hash, Enc, M KM
and Buf f . The PE directly can write to CWR to control the
data path of the hardwares placed in the crypto area.

C. Buffer

The proposed buffer is a gateway to write or read keys to the
M KM . This buffer can accommodate data, timestamp from
timer IP, pre − hash from Signature Checker, read/write
operation, signature of data and the system status. The

Custome Bus InterconnectInput Address(3:0)Output Address(3:0)RNG_opBuffHash_opBuffHash_keyEn_keyRNG_doneBuff_rdHash_doneBuff_wrHash_key_rdyEn_key_rdyHash_inHash_in_rdypub_en_inpub_en_in_rdypub_oppub_op_rdy001122334inputAddroutputAddrBusRSARNGHASHENCMKMBuffOperation (5 down to 0)Source IP Addr(3 down to 0)Dest IPs(3 down to 0)BusSelBufcapBuscapPEDMA BusInterConnectLocalMemoryPE BusInterconnectIP2IPnDMAAESBlockSHA 3BlockBusStreamerRNGMasterKey MemoryProcessor AreaConfidential AreaCrypto AreaDataCipherHashSharedMemoryJunctionPathControllerMKM3RSAEn-PremasterKey2BuFTimerSignatureCheckerBCdataTABLE I: Comparison Results

×

(cid:88)

(cid:88)

Incorrect
use

key
storage
key
memory
key
memory
key
memory
key
memory
main
memory
main
memory
cache
memory
main
memory
(cid:88)=possible, ×=not possible

#
Propo
sed
[5]
2011
[8]
2010
[6]
2018
[9]
2019
[3]
2009
[2]
2015
[10]
2007

(cid:88)

(cid:88)

(cid:88)

(cid:88)

×

Insecure
movement Destruction

Audit
log

×

(cid:88)

(cid:88)

(cid:88)

(cid:88)

×

(cid:88)

(cid:88)

×

(cid:88)

(cid:88)

(cid:88)

×

(cid:88)

(cid:88)

(cid:88)

(cid:88)

×

×

×

(cid:88)

×

×

×

system status comes from the enable ports and ready ports
of all the existing IPs including crypto cores. Instruction-1
writes 384 bit random number from RN G to the data portion
of Buf f er. Similarly instruction 9, 17 and 18 can write 512
bit data from KECCAK and 1024 bits from RSA respectively.

D. Signature Checker

The Signature Checker (SC) consists two main parts such
as KECCAK hash and RSA block to verify signature of the
IPs requested to read or write to M KM . This IP receives the
signature from buf f er. The signature is the encrypted hash
of data. The SC ﬁrst decrypt it by the RSA block with the
public key of requestee IP. The requestee IP is addressed by
the source IP address available in CW R. After that SC gets
the hash of data. The data is already available in the buf f er.
If the hash of buf f er data is matched with the decrypted data
by RSA then the requested transaction will be granted by SC.
III. IMPLEMENTATION & RESULTS

The proposed architecture is implemented in Artix-7
(csg324-100t)FPGA using Vivado Tool. The additional hard-
wares added to the original architecture to protect the keys
form major threats as stated in Table I are SC, buf f er and
the CBI. The signature checker consist of a KECCAK and
RSA-1024 which cost 4188 and 31008 slices respectively.
The base architecture without blockchain consumes 50k logic
cells. The architecture with blockchain to protect severe key
threats consumes 95k logic cells which is around 45% of
the total logic cells available in Artix-7 FPGA. As shown
in Table I articles [5], [8] and [6] proposed dedicated secret
key memories which are completely isolated from processor
area to prevent software threats but this architecture does not
prevent incorrect use, insecure movement and non-destructions
issues of keys. If any spooﬁng IPs or dishonest probes already
exist inside the architectures of [5], [8] and [6] and try to read
secret key stored in dedictaed key memory, the system will
allow the key transaction to those malicious nodes. Though
the dedicated key memories proposed in these article are
physically isolated but can not prevent said incorrect and
insecure movement of secret keys. Articles [5], [8] and [6]
do not have any facility to investigate the key movement and

TABLE II: Instructions Implemented in Proposed Architecture

#

1

Instruction
PE Send
Re-Seed

Flow

PE to RNG

G 2
N
R

Gen RND

RNG to Buff

Function
Send new seed to RNG from PE.R-
-NG needs seed to generate rand. no.
Enable RNG to Generate Random
Number, and write RND in data
portion of Buffer
Block Generation for Write Operation
on MKM from RNG. Buff reads, time
stamp from timer IP, prehash from
Signature Checker, write operation
the system status, source & dest. IP ID

CWR
(hex)

Bus
Inter
Connect

0010

AXI

0050 Custom

0091 Custom

y
b

r
e
t
s
a

M

e
r
P

y
e
K

r
e
t
s
a

M

n
o
i
t
p
y
r
c
n
E

h
s
a
H

3

4

5

6

7

8
9

10

11

12

13

14

15

16

17

18

e 19

r
u
t
a
n
g
i
S

20

21

RNG Write
Block Gen
Re-Key
RSA
PE Get
En-RNG
PE Send Rands
in Hash

Hash Read
Block Gen
Get M-Key
Hash
Gen Keys
Hash Write
Block Gen

En Read
Block Gen
Get EN Key
from Buff

GEN EN
Hash Read
Block Gen
Get Key
Hash

to Buff

PE to RSA

PE writes pub key of server to RSA

0020

AXI

RSA to PE
PE to Hash
by DMA

to Buff

Buff to Hash
Hash to Buff

Hash to Buff

to Buff

Buff to En

Shared to Shared

Encrypt RND using server pub key
PE sends server random number
and client random number to Hash
Block Generation for Read Operation
from MKM by Hash. Buff reads , time
stamp from timer IP, prehash from
Signature Checker, read operation,
the system status, source & dest. IP ID

read master key to generate four keys
Write keys to Buff
Block Generation for write Operation
to MKM
Block Generation for Read Operation
from MKM by En. Buff reads , time
stamp from timer IP, prehash from
Signature Checker, read operation,
the system status, source & dest. IP ID

Read En. key from buffer
AES block reads plaintext form SM
& write cypher to SM using DMA

XXXX

AXI

XXXX

AXI

11C1 Custom

1149 Custom
2049 Custom

20C9 Custom

12C1 Custom

1245

DMA

XXXX Custom

to Buff

Same as Instruction 7

11C1 Custom

Buff to Hash

Same as Instruction 8

1149 Custom

GEN Hash
Hash of
Buff
Hash
to Buff
PubEn
of Buff

PubEn
to Buff

Shared to Shared

load Buff to Hash

Hash Op to Buff

Buff to PubEn
Output of public
key encrypted
data to buffer

Verify Sig

Buff to MKM

KECCAK block reads plaintext form SM
& write digest to SM using DMA
1st step of signature: load
Buff data to Hash input
2nd step of signature: load hash
output to buffer
3rd step of signature: load buffer
in PubEn input
4th step of signature: load encrypted da-
ta of PubEn to buffer which is the signa-
ture of buffer data in 1st step
if signature matched
buffer data sent to MKM

XXX

DMA

1341 Custom

2049 Custom

1461 Custom

3061 Custom

1XX3 Custom

to prevent non-destruction issue. Amazon Web Server [9] is
one of the most recent software based key management archi-
tecture which can audit and investigate tracking of secret keys,
but it cannot prevent the insecure movement and incorrect
use of key. It does not have any signature checking facility
on the key request. In our architecture we have introduced
dedicated secret key memory which is physically isolated
from processor area. Any read write operation on this secret
key memory named as M aster Key M emory (MKM) is
blockchain based. We have observed the usual operations on
MKM are related with RN G, HASH, and AES block. The
P ublic and P rivate keys of all these crypto IPs are already
generated in ofﬂine by an automatic script during the RTL
development. The pre master key is generated by RN G
which needs to be written in M KM through buffer as shown
in Table II instructions 2, 3, and 17 to 21. Instruction 2 writes
random number generated by RN G into buffer. The buffer
also stores the public keys of RN G (Source IP) and M KM
(Destination). The buffer includes timestamp form T IM ER
IP, and stores all the current status of Done and Enable pin of
available IPs in the proposed design. The instructions 17 to 21
generate signature of the write operation on M KM by RN G.

TABLE III: Summery of Trade-off

Partition
Memory
0
7.5
2
20 ns
prevent
SW attacks

Path
Controller
76
0
2
10 ns
control crypto
instrcutions

SC
KECCAK
4188
0
24
67.2 ns

RSA
31008
0
3048
86us
prevent insecure movment &
incorrect use of keys; audit log

Base
Design
50223
32
NA
NA
implements basic hw
for secuirty processor

Slice
BRAM
Clock
latency
Feature
/ role

NA=Base desgn consists of diferent hardwares having different latency & clock

This signature will also be stored in buf f er. This signature
will be veriﬁed by the Signature Checker IP placed inside
Conf idential Area as stated in ﬁg.3. If the signature is
matched then the pre master key generated by RN G will be
written in M KM , otherwise the transaction will be discarded
form the buf f er. The other read write requests on M KM are
(ii)read pre master key by HASHt to generate master key
(Instruction 7 and 8)(ii)write masterkeys in M KM (Instruc-
tion 9 and 10). (iii)read master key form M KM by hash
(Instruction 14 and 15)and (iv) read master key form M KM
by AES (Instruction 11 and 13). All these read write opera-
tions follows Instruction 17 and 21 for authentic checking of
the requestee. The veriﬁcation process of signature checker
IP using the buf f er data with system status,
timestamp,
signature and the pre hash prevents incorrect use and insecure
movement of keys. The M KM also delete the keys which are
already read to address non-destruction issue. The partitioned
memory for secret keys prevents software attacks. The timing
diagram of instruction 17, 18 and 19, 20 is shown in ﬁg. 4
and ﬁg. 5 respectively. Table III shows the trade off of latency
and resource usage with security features.

Fig. 4: Timing Overhead of Instruction 17 & 18

Fig. 5: Timing Overhead of Instruction 19 & 20

IV. CONCLUSIONS

This article proposes a hardware blockchain with a parti-
tioned and dedicated secret key memory which prevents most
of the software attacks, insecure key movement, incorrect use,
non-destruction use secret key. Apart from this,
if breach
of keys occurs in the system, the hardware blockchain can
investigate previous key transactions. To the best of our
knowledge, the FPGA based blockchain to prevent threats
stated in Table I is never explored. The additional hardware
adopted for blockchain is very nominal in-terms of resource
usage and throughput.

REFERENCES

[1] Cryptomathic White Paper Rob Stubbs. Selecting the
right key management system. Workshop COSADE,,
pages –, Feb 2019.

[2] Patrick Simmons. Security through amnesia: A software-
based solution to the cold boot attack on disk encryption.
In Proceedings of the 27th Annual Computer Security
Applications Conference, ACSAC ’11, pages 73–82, New
York, NY, USA, 2011. ACM.

[3] X. Chen, R. P. Dick, and A. Choudhary. Operating
system controlled processor-memory bus encryption. In
in Europe, pages
2008 Design, Automation and Test
1154–1159, March 2008.

[4] L. Guan, J. Lin, B. Luo, J. Jing, and J. Wang. Pro-
tecting private keys against memory disclosure attacks
In 2015 IEEE
using hardware transactional memory.
Symposium on Security and Privacy, pages 3–19, May
2015.

[5] Michael Grand, Lilian Bossuet, Bertrand Le Gal, Guy
Gogniat, and Dominique Dallet. Design and implementa-
tion of a multi-core crypto-processor for software deﬁned
In Reconﬁgurable Computing: Architectures,
radios.
Tools and Applications - 7th International Symposium,
ARC 2011, Belfast, UK, March 23-25, 2011. Proceed-
ings, pages 29–40, 2011.

[6] Rourab Paul. Partitioned security processor architecture
on fpga platform. IET Computers and Digital Techniques,
12:216–226(10), September 2018.

[7] E. Rescorla T. Dierks. The transport layer security (tls)

protocol version 1.2. 2008.

[8] L. Gaspar, V. Fischer, F. Bernard, L. Bossuet, and
P. Cotret. Hcrypt: A novel concept of crypto-processor
In 2010 International
with secured key management.
Conference on Reconﬁgurable Computing and FPGAs,
pages 280–285, Dec 2010.

[9] Assaf Namer Maitreya Ranganath. How to use aws
secrets manager to securely store and rotate ssh key pairs.
Advanced (300), AWS Secrets Manager, Security, Identity,
and Compliance, 18 Sept, 2019.

[10] K. Harrison and S. Xu. Protecting cryptographic keys
In 37th Annual
from memory disclosure attacks.
IEEE/IFIP International Conference on Dependable Sys-
tems and Networks (DSN’07), pages 137–143, 2007.

