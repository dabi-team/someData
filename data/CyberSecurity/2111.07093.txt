2
2
0
2

y
a
M
9
2

]

R
C
.
s
c
[

2
v
3
9
0
7
0
.
1
1
1
2
:
v
i
X
r
a

AttacKG: Constructing Technique Knowledge
Graph from Cyber Threat Intelligence Reports

Zhenyuan Li1, Jun Zeng2, Yan Chen3, and Zhenkai Liang2

1 Zhejiang University, Hangzhou, China
2 National University of Singapore, Singapore
3 Northwestern University, Evanston, USA

Abstract. Cyber attacks are becoming more sophisticated and diverse,
making detection increasingly challenging. To combat these attacks, se-
curity practitioners actively summarize and exchange their knowledge
about attacks across organizations in the form of cyber threat intelligence
(CTI) reports. However, as CTI reports written in natural language texts
are not structured for automatic analysis, the report usage requires te-
dious manual eﬀorts of cyber threat intelligence recovery. Additionally,
individual reports typically cover only a limited aspect of attack patterns
(techniques) and thus are insuﬃcient to provide a comprehensive view
of attacks with multiple variants.
To take advantage of threat intelligence delivered by CTI reports, we
propose AttacKG to automatically extract structured attack behavior
graphs from CTI reports and identify the adopted attack techniques. We
then aggregate cyber threat intelligence across reports to collect diﬀerent
aspects of techniques and enhance attack behavior graphs into technique
knowledge graphs (TKGs).
In our evaluation against 1,515 real-world CTI reports from diverse intel-
ligence sources, AttacKG eﬀectively identiﬁes 28,262 attack techniques
with 8,393 unique Indicators of Compromises (IoCs). To further verify
the accuracy of AttacKG in extracting threat intelligence, we run At-
tacKG on 16 manually labeled CTI reports. Empirical results show that
AttacKG accurately identiﬁes attack-relevant entities, dependencies, and
techniques with F1-scores of 0.887, 0.896, and 0.789, which outperforms
the state-of-the-art approaches Extractor [38] and TTPDrill [26]. More-
over, the unique technique-level intelligence will directly beneﬁt down-
stream security tasks that rely on technique speciﬁcations, e.g., APT
detection and cyber attack reconstruction.

1

Introduction

Advanced cyber security attacks are growing rapidly. The trend of cyber attacks
is to adopt increasingly sophisticated tactics and diverse techniques [13], such
as multi-stage Advanced Persistent Threats (APTs), making detection more
challenging than ever before. To combat against these attacks, security analyzer
actively exchange threat intelligence to enhance their detection capabilities.

Among them, structured threat intelligence deﬁned by open standards such
as OpenIoC [12], STIX [9], and CybOX [4] are widely shared on open-source

 
 
 
 
 
 
2

Z. Li et al.

platform, such as AlienVault OTX[1] and IBM X-Force[8] and utilized in se-
curity operation centers. Such intelligence standards deﬁnes cyber attacks as
IoCs, which are artifacts in forensic intrusions, such as MD5 hashes of malware
samples and IP/domains of command-and-control (C&C) servers. However, re-
cent studies have shown that detection with such disconnected IoCs is easy to
bypass [30,34]. For example, attackers can frequently change domains used in
attack campaigns to evade detection. In comparison, by taking IoC interactions
into account, graph-based detection typically demonstrates better robustness [35]
by capturing attack techniques aligned to adversarial goals. Speciﬁcally, attack
techniques [25,14] are basic units that describe “how” attack actions are per-
formed and are widely reused in diﬀerent attack campaigns.

Such technique implementations details can be found in unstructured CTI
reports written by security practitioners based on their observations of attack
scenarios in the wild. In particular, a well-written report will precisely describe
attack behaviors through enumerating attack-relevant entities (e.g., CVE-2017-
11882 ) and their dependencies (e.g., stager connecting to C&C sever). However,
recovering attack behaviors from textual CTI requires non-trivial manual ef-
forts. Intuitively, a system capable of automatically extracting attack techniques
knowledge from CTI reports can signiﬁcantly beneﬁt cyber defenses by reducing
human eﬀorts and speeding up response time. We identify two main challenges
in expert knowledge extraction from CTI reports: (1) As CTI reports are written
in an informal format, in natural languages, extracting structured attack behav-
iors needs to analyze semantics in unstructured CTI texts; (2) Attack knowledge
is dispersed across multiple reports. Individual reports commonly only focus on
limited/incomplete attack cases, making it diﬃcult to obtain a comprehensive
view of attacks. And existing works on CTI report parsing [38,26,23,27,37] only
focus on parsing attack cases within single reports.

In this paper, we propose AttacKG , a novel approach to aggregate threat
intelligence across multiple CTI reports for attack techniques and construct a
knowledge-enhanced attack graph summarizing the technique-level attack work-
ﬂow in CTI reports. Based on enhanced knowledge, we introduce a new concept
which we call “Technique Knowledge Graph” (TKG), that summarizes causal
techniques from attack graphs to describe the complete attack chain in CTI re-
ports. More speciﬁcally, we ﬁrst adopt a pipeline to parse a CTI report and ex-
tract attack-relevant entities and entity dependencies as an attack graph. Then,
we initialize technique templates using attack graphs built upon technique pro-
cedure examples crawled from the MITRE ATT&CK knowledge base [14]. Next,
we utilize a revised graph alignment algorithm to match technique templates in
attack graphs. Towards this end, we can accurately align and reﬁne the entities
in both CTI reports and technique templates. While technique templates ag-
gregate speciﬁc and probably new intelligence from real-world attack scenarios
described in CTI reports, attack graphs can utilize such knowledge in templates
to construct technique knowledge graphs (TKGs).

We implement AttacKG and evaluate it against 7,373 examples of 179 tech-
niques crawled from MITRE ATT&CK and 1,515 CTI reports collected from

AttacKG: Constructing Technique Knowledge Graph from CTI Reports

3

multiple intelligence sources [3,5]. Our experimental result demonstrates that
AttacKG substantially outperforms existing CTI parsing solutions such as EX-
TRACTOR [38] and TTPDrill [26]: (1) With our CTI report parsing pipeline,
AttacKG accurately constructs attack graphs from reports with F1-scores of
0.887 and 0.896 for entities and dependencies extraction, respectively; (2) Based
on extracted attack graphs, AttacKG accurately identiﬁes adversarial techniques
with an F1-score of 0.789; (3) AttacKG can successfully collect 28,262 techniques,
and 8,393 unique IoCs from 1,515 CTI reports.

To the best of our knowledge, this is the ﬁrst work to aggregate attack knowl-
edge from multiple CTI reports at the technique level. In particular, our work
makes the following contributions:
– We present a new pipeline for CTI report parsing with better eﬃciency and

performance in handling co-reference and constructing attack graphs.

– We propose the design of the technique template to describe and collect
general technique knowledge, and a revised graph alignment algorithm to
identify attack techniques with templates. By aligning templates with the
technique implementation in the attack graph, we exchange the knowledge
from both to reﬁne each other and form technique knowledge graphs (TKGs).
– We implement AttacKG (open sourced4) and evaluate it with 1,515 real-
world CTI reports. The result demonstrates that we can extract attack graphs
from reports accurately and aggregate technique-level threat intelligence from
multiple unstructured CTI reports eﬀectively. And we discuss the beniﬁt of
TKGs with two case studies.

2 Background and Related Work

In this section, We ﬁrst introduce the outbreaking attack mutations. Then,
we introduce state-of-the-art threat intelligence extraction methods. Finally, we
present a real-world CTI report as a motivating example for intuitive illustration.

2.1 Cyber Attacks and Reports

Attackers actively create attack variants to bypass detection. To systematize and
summarize the behavior in the attack variants, MITRE proposed the ATT&CK
Tactics-Techniques-Procedures (TTP) matrix based on real-world observations
of cyber attacks. In the hierarchical TTPs matrix, tactics describe “why” given
adversarial action is performed, which are typically ﬁxed for an attack, while
the selection and implementation of techniques that describe “how” to perform
adversarial action is more ﬂexible.

As Figure 1 shows, the commonly used technique “T1547-Boot or Logon Au-
tostart Execution” for tactic “Persistent” can be implemented in at least four
diﬀerent ways: (A) “Registry Run Keys”, (B) “Auto-start folder ”, (C) “Short-
cut Modiﬁcation”, and (D) “DLL Side-loading”. The number of variants grows

4 To facilitate follow-up research, we release the source code of AttacKG at https:

//github.com/li-zhenyuan/Knowledge-enhanced-Attack-Graph.

4

Z. Li et al.

Fig. 1: Technique template generated by AttacKG and corresponding real-world de-
scription for “T1547-Boot or Logon Autostart Execution” with four variants corre-
sponding to fourteen MITRE sub-techniques categorized as (A) Registry Run Keys,
(B) Auto-start folder, (C) Shortcut Modiﬁcation, and (D) DLL Side-loading.

exponentially if the implementation details, such as the selection of registry key,
are taken into consideration. Our observation is that the ways of technique im-
plementation are relatively limited, while the selection of implementation details
is much more varied. Therefore, it is reasonable to believe that a system that can
identify various techniques and collect implementation details would signiﬁcantly
beneﬁt downstream security tasks by providing practicable intelligence.

The manually-crafted TTP matrix cannot cover the various implementations.
Such detailed technique implementation knowledge only comes from practice.
Thus, security practitioners actively gather and share knowledge about attacks
as threat intelligence. Such cyber threat intelligence (CTI) is managed and ex-
changed typically in the form of either structured and machine-digestible In-
dicators of Compromise (IoCs) or unstructured and natural language reports.

2.2 Threat Intelligence Extraction

Cyber threat intelligence (CTI) plays a vital role in security warfare to keep up
with the rapidly evolving landscape of cyber attacks [36,21]. To facilitate CTI
knowledge exchange and management, the security community has standard-
ized open formats (e.g., OpenIoC [12], STIX [9], and CybOX [4]) to describe
Indicators of Compromises (IoCs). Though structured and machine-readable,
such intelligence lacks semantic information about how entities/IoCs interact to
form the kill chain. While in this paper, we try to fulﬁll this semantic gap with
technique-level knowledge aggregated from various CTI reports.

Poirot [34] utilizes manually extracted and generalized (attack) query graphs
for intrusion detection in provenance graphs constructed from system logs, which
validates the eﬃcacy of threat intelligence for detection. However, manually ex-
tracting attack-relevant information from uninstructed texts is labor-intensive
and error-prone, hindering CTI’s practice applications. Therefore, several ap-
proaches have been proposed to analyze CTI reports automatically. As Table 1

(D)(C)Shortcut fileAttacker(A)RegistryAttackerExecutable(B)AttackerAutostartfolderExecutableAttackerDLLExecutable (benign)(A)To be started during the boot process of the infected machine, the malwarecreates the following registry key: HKCU\Software\Classes\CLSID\{42aedc87-2188-41fd-b9a3-0c966feabec1}\InprocServer32=%APPDATA%\shdocvw.tlp.(B) Confuciushas dropped malicious filesinto the startup folder %AppData%\Microsoft\Windows\Start Menu\Programs\Startup on a compromised host in order to maintain persistence.(C) S-Typemay create the file %HOMEPATH%\Start Menu\Programs\Startup\Realtek {Unique Identifier}.lnk, which points to the malicious msdtc.exefile already created in the %CommonFiles% directory.(D)This results in the user seeing only the Flash_Adobe_Install.exefile to execute in order to install what they believe to be an update to Flash Player. When run, it will automatically load goopdate.dlldue to search order hijacking. AttacKG: Constructing Technique Knowledge Graph from CTI Reports

5

Table 1: Comparison of threat intelligence extraction methods

Automatic Graph-structure Technique-aware Cross-reports

Poirot [34]
iACE [33]
Extractor [38] & ThreatRaptor [22]
TTPDrill [26] & rcATT[29], etc.
AttacKG

(cid:55)
(cid:51)
(cid:51)
(cid:51)
(cid:51)

(cid:51)
(cid:55)
(cid:51)
(cid:55)
(cid:51)

(cid:55)
(cid:55)
(cid:55)
(cid:51)
(cid:51)

(cid:55)
(cid:55)
(cid:55)
(cid:55)
(cid:51)

shown, these works can be roughly divided into several categories. Speciﬁcally,
iACE [33] presents a graph mining technique to collect IoCs available in tens
of thousands of security articles. Extractor [38] and ThreatRaptor [22] cus-
tomize NLP techniques to model attack behaviors in texts as attack graphs.
TTPDrill [26], rcATT [29] and ChainSmith [40] derive threat actions from re-
ports and map them to attack patterns (e.g., tactic and techniques in MITRE
ATT&CK [14]) with pre-deﬁned ontology or machine learning models. Similar
to prior studies, the large body of AttacKG is to automate knowledge extrac-
tion from CTI. Nevertheless, AttacKG distinguishes itself from these works in
the sense that it identiﬁes TTPs and constructs technique knowledge graphs
(TKGs) to summarize technique-level knowledge across CTI reports.

2.3 Motivating Example

Figure 2 presents a real-world APT attack campaign called Frankenstein [7].
The campaign name comes from the ability of threat actors to piece together
diﬀerent independent techniques. As shown, this campaign consists of four at-
tack techniques, namely, T1566-Phishing E-mail, T1204-User Execution, T1203-
Exploitation and T1547-Boot Autostart. Each technique involves multiple enti-
ties and dependencies to accomplish one or more tactical attack objectives. It
presents a typical multi-stage attack campaign that consists of multiple atomic
techniques. To evade detection, such attacks can be morphed easily by replacing
any technique with an alternative one. Therefore, summarized knowledge of at-
tack techniques, which is robust and semantically rich, is beneﬁcial to detection
and investigation of cyber attacks [31,24,34,26].

Subﬁgures (B) to (D) show the attack knowledge retrieved from the report
sample by TTPDrill [26], ChainSmith [40], and EXTRACTOR [38], respectively,
while Subﬁgure (A) represents the manually generated ground-truth. Subﬁgure
(B) shows attack techniques identiﬁed by TTPDrill with manual-deﬁned threat
ontology. As shown, TTPDrill can only extract separate techniques from CTI
reports without the whole picture. Besides, the ontology provided by TTPDrill
contains only action-object pairs for technique identiﬁcation, which is too vague
and may lead to numerous false positives. As the example shows, sending a
document is recognized as exﬁltration in TTPDrill. However, the “trojanized”
document is, in eﬀect, sent by an attacker for exploitation. As shown in Sub-
ﬁgure (C), ChainSmith provides a semantic layer on top of IoCs that captures
the diﬀerent roles of IoCs in a malicious campaign. However, they only give a
coarse-grained four-stage classiﬁcation with limited information. As Subﬁgure
(D) shows, the attack graph generated by EXTRACTOR merges all non-IoC

6

Z. Li et al.

Fig. 2: A motivating example.

entities of the same type and thus loses the structural information of attack
behaviors, making it impossible to identify the technique accurately.

Subﬁgure (E) illustrates the ideal result we would like to extract in this
paper. As long as we can locate attack techniques in attack graphs extracted
from CTI reports, we are able to aggregate technique-level knowledge and enrich
the attack graphs with more comprehensive knowledge about the corresponding
techniques. For example, we can ﬁnd more possible vulnerabilities that can be
used in T1203-Exploitation for Execution as a replacement for CVE-2017-11882
appeared in this report. Moreover, the distinct threat intelligence can be collected
and aggregated at the technique level across multiple CTI reports.

3 Approach

3.1 Overview of AttacKG

Figure 3 shows the architecture of AttacKG. At a high level, AttacKG has two
subsystems: (1) an attack graph extraction pipeline for CTI reports parsing and
attack graphs building, and (2) an attack technique identiﬁcation subsystem for
technique template generation and technique identiﬁcation in attack graphs.

Extract Attack Graphs from CTI Reports. To accurately extract attack
graphs from CTI reports, we design a parsing pipeline of ﬁve stages. As shown in
Figure 3, this pipeline has two inputs: (1) technique procedure examples crawled

ThethreatactorssentthetrojanizedMicrosoftWorddocuments,probablyviaemail.TalosdiscoveredadocumentnamedMinutesofMeeting-2May19.docx.Oncethevictimopensthedocument,itfetchesaremovetemplatefromtheactor-controlledwebsite,hxxp://droobox[.]online:80/luncher.doc.Oncetheluncher.docwasdownloaded,itusedCVE-2017-11882,toexecutecodeonthevictim'smachine.Aftertheexploit,thefilewouldwriteaseriesofbase64-encodedPowerShellcommandsthatactedasastagerandsetuppersistencebyaddingittotheHKCU\Software\Microsoft\Windows\CurrentVersion\RunRegistrykey.(A)Ground-truthmicrosoftword document(MinutesofMeeting-2May19.docx)website(hxxp://droobox[.]online:80/luncher.doc)document(luncher.doc)powershellcommands(D) Attack graph by “EXTRACTOR”*IP ‘*’MinutesofMeeting-2May19.docxluncher.dochttps://blog.talosintelligence.com/2019/06/frankenstein-campaign.html(E) Our Technique Knowledge Graphattachment, …(*.docx, *.rtf, *.rar, …)links, urls, …(hxxp://droobox[.]online:80/luncher.doc)e-mailexecutables,  macros, … T1566: Phishing EmailT1204: User Execution([HKLM|HKCU]\Software\Microsoft\Windows\CurrentVersion\.*\Run\.*,HKLM\SYSTEM\CurrentControlSet\Control\Session, …)T1547: Boot Autostartattachment, …(*.docx, *.rtf,, *.rar, …)T1203: Exploitation(B)Part of attack techniques extracted with “TTPDrill”Adding toHKCU\Software\Microsoft\Windows\CurrentVersion\RunSentMicrosoft word document(MinutesofMeeting-2May19.docx)UseExploit(CVE-2017-11882)T1203: ExploitationT1547: Boot Autostart(×)T1048: Exfiltration Over Alternative Protocol(C)Attack chain extracted with “ChainSmith”Exploit(CVE-2017-11882)Stage -Exploitationhxxp://droobox[.]online:80/luncher.docStage -Installationluncher.docStage -BaitingStage –C&Ce-mailactoractor(HKCU\Software\Microsoft\Windows\CurrentVersion\Run)(HKCU\Software\Microsoft\Windows\CurrentVersion\Run)Exploit(CVE-\d+-\d+)Exploit(CVE-\d+-\d+)AttacKG: Constructing Technique Knowledge Graph from CTI Reports

7

Fig. 3: Overview of AttacKG architecture.

from MITRE ATT&CK describing individual techniques, and (2) CTI reports
describing multi-technique attack campaigns. These two inputs are isomorphic,
and the corresponding outputs of the pipeline are single-technique graphs for
attack techniques and multi-techniques graphs for attack campaigns.

Identify Attack Technique with Templates. As discussed in Section 2,
individual reports typically have a limited aspect of attack patterns without a
global vision. In this paper, we aim to bridge this gap by aggregating threat
intelligence across CTI reports with technique templates. For this purpose, we
propose technique templates to aggregate technique-level intelligence and a re-
vised graph alignment algorithm to identify techniques in attack graphs.

As Figure 3 shows, technique templates are initialized with single-technique
attack graphs extracted from technique examples crawled from MITRE. Then,
we adopt the revised attack graph alignment algorithm to identify attack tech-
niques in multi-technique graphs extracted from real-world CTI reports with the
pre-initialized templates. With the aligned nodes in the attack graph and the
corresponding technique template, we can enhance the attack graph with general
knowledge in templates into a Technique Knowledge Graph (TKG) and update
the technique template with rich intelligence from CTI reports the same time.
Finally, we obtain two outputs: (1) technique templates collecting and ag-
gregating attack knowledge across CTI reports at the technique level; (2) TKGs
summarizing complete attack chains in CTI reports. It is worth mentioning that
the template can tolerate a few false-positives/false-negatives in templates or
attack graphs as long as techniques implementations appear multiple times in
diﬀerent reports and most of them are parsed correctly.

3.2 CTI Reports Parser

In this section, we introduce our primary approach for extracting attack graphs
from CTI reports. Well-written CTI reports include detailed technical descrip-

Identify Attack Technique with TemplatesTechnique AlignmentE-mailluncher.docScriptshkcu\...\RunMulti-technique GraphsE-mailluncher.docScriptshkcu\...\RunE-mailluncher.docScriptshkcu\...\RunTechnique Knowledge GraphsTemplate Initializationemail, …*.doc, *.xls, *.zip, …scripts, vbs,…Technique Templatesemail, …*.doc, *.xls, *.zip, …scripts, vbs,…email, …scripts, vbs,…*.doc, *.xls, *.zip, …E-mailluncher.docScriptsE-mailluncher.docScriptsE-mailluncher.docScriptsE-mailluncher.docScriptshkcu\...\RunT1566 -PhishingT1547 -AutoStartE-mailluncher.docScriptshkcu\...\RunT1566 -PhishingT1547 -AutoStartE-mailluncher.docScriptshkcu\...\RunT1566 -PhishingT1547 -AutoStartAttack KnowledgeUpdatingCyber Threat Intelligence RepotsThe threat actorssent the trojanizedMicrosoft Word documents, probably via email. Talos discovered a document .. PowerShell commandsthat acted as a stager and set up persistence by HKCU\Software\Microsoft\Windows\CurrentVersion\RunRegistry key. Input II: CTI ReportsAttack-relevant EntitiesSingle-techniqueGraphsInput I: Technique ExamplesExtract Attack Graphs from CTI ReportsNLP-based Report ParsingGraph-level ProcessingIoCs ProtectionAttack Entity ExtractionAttack Dependency ExtractionAttack Graph GenerationAttack Graph Simplification(E) Attack technique graph generated by usattachment, documents, …(*.docx, *.rtf, *.xls, *.rar, …)links, urls, …(hxxp://droobox[.]online:80/luncher.doc)Exploit(CVE-\d+-\d+)emailexecutables,  macros, … T1566: Phishing EmailT1204: User Execution([HKLM|HKCU]\Software\Microsoft\Windows\CurrentVersion\.*\Run\.*,HKLM\SYSTEM\CurrentControlSet\Control\Session, …)T1547: Boot Autostartattachment, documents, …(*.docx, *.rtf, *.xls, *.rar, …)T1203: ExploitationOutput II: TKGsOutput I: Technique-level KnowledgeDarkhotelhas sent spearphishingemailsthat contain a document…(D)AttackerDLLExecutable(b)(C)Shortcut fileAttacker(B)AttackerAutostartfolderExecutable(a)(A)RegistryAttackerExecutable(a)8

Z. Li et al.

tions of how attack-related entities interact to accomplish speciﬁc objectives in
attack campaigns. Despite the rich information, it is challenging to accurately
extract attack behaviors from CTI reports written in natural language. Speciﬁ-
cally, we identify four main challenges:
[C1] Domain-speciﬁc terms identiﬁcation. CTI reports often contain nu-
merous security-related terms, such as IoCs and attack family names, that in-
clude special characters and confuse most oﬀ-the-shelf NLP modules.
[C2] Attack entity and dependency extraction. Unlike provenance graphs
that record attack actions with full details, CTI reports are written in a more
summarized manner, providing an overview of the attack workﬂow. Thus, the
attack graphs extracted from CTI reports only demonstrate coarse-grained and
incomplete dependencies among entities.
[C3] Co-reference resolution. Co-reference is very common in natural lan-
guage. We identify two types of co-reference in CTI reports. Explicit co-references
use pronouns like “it” and “this” or deﬁnite article “the,” while implicit co-
references use synonyms to refer to entities that appear in the preceding text.
[C4] Attack graph construction and simpliﬁcation. Attack scenarios de-
scribed in natural language are redundant and fractured, which NLP technology
cannot address. Therefore we need to construct and simplify graphs with the
assistance of domain knowledge.

To address these challenges, we design a new CTI report parsing pipeline
based on the existing ones [22,6], with better performance in handling co-reference
and constructing attack graphs. Notice that most of CTI reports are shared in
the forms of PDF and HTML, which we further translate them into a uniform
text format with open-source tools like pdfpulmer and html2text.

IoC Recognition and Protection with Regex [C1]. CTI reports contain
numerous domain-speciﬁc terms, such as CVE-2017-21880 and /etc/passwd/,
which include special characters and thus confuse general NLP models. In or-
der to avoid the inﬂuence of these terms while preserving the information of
attack behaviors, we identify them with a reﬁned version of open-source IoC
recognizer [10] by extending the regex set and replacing them with commonly
used words according to their entity types. And we will record the location of
replaced words for subsequent resumption of the IoCs. Then, we are able to
adopt standard models [17] for ﬁrst-stage report parsing.

Attack Entity and Dependency Extraction [C2, C3]. In addition to IoC
entities, non-IoC entities also play important roles in attack technique expression.
For better extraction, we classify entities into six types. Among them, Actor
and Executable represent subjects of attack behaviors, while File, Network
connection, and Registry denote common system-level objects. Furthermore,
we identify several “other” types of entities that frequently appear in certain
techniques but are diﬃcult to directly map to system objects. As a result, we
classify them into a separate category named Others.

Then, we adopt a learning-based Named Entity Recognition (NER) model
to recognize entities in CTI reports. The model is pre-trained on a large general

AttacKG: Constructing Technique Knowledge Graph from CTI Reports

9

corpus5 and re-trained with technique examples randomly sampled from MITRE
covering all techniques and entity types. To improve the accuracy of entity ex-
traction, we further use a customized rule-based entity recognizer6 to identify
well-deﬁned and common entities. In addition, we adopt an open-source co-
reference resolver, co-referee7, for explicit co-reference’s resolution. All pronouns
for an attack-relevant entity are recorded in a linked table, and the corresponding
nodes will be merged when constructing the attack graph.

For intra-sentence dependency extraction, we ﬁrst construct a dependency
tree for each sentence with a learning-based nature language parsing model [17].
Then, we enumerate all pairs of attack-relevant entities (including their pro-
nouns) and estimate the distance between them with the distance of their Low-
est Common Ancestor (LCA) and the distance of their position in the sentence.
Each entity will establish dependencies with its nearest entity unless there exists
only one entity in the sentence.

Attack Graph Generation and Simpliﬁcation [C3, C4]. Given extracted
attack entities and dependencies, we can initialize a graph with nodes represent-
ing attack-relevant entities and edges representing dependencies, which we call
attack graph (Ga) in this paper. So far, we have only considered the dependencies
within sentences. Cross-sentence dependencies will be established through both
explicit and implicit co-reference nodes. Speciﬁcally, by merging co-reference
nodes, we not only remove redundant nodes but also combine sentence-level
sub-graphs into a whole attack graph. Explicit co-reference can be recognized
by general NLP models, as discussed in Section 3.2, while implicit co-references
need to be identiﬁed based on entities’ type and character-level overlaps. In
particular, we use node-level alignment scores, as discussed in Section 3.3, to
determine whether two nodes should be treated as co-references nodes.

Finally, we generate a concise and clear attack graph describing all attack
behaviors that appear in a CTI report. The evaluation on a wide range of CTI
reports demonstrates that our attack graph extraction pipeline is both accurate
and eﬀective (Section 4.2). And a few false-positives/false-negatives have limited
impact on the subsequent fuzzy alignment-based technique identiﬁcation.

3.3 Technique Templates and Graph Alignment Algorithm

In order to identify speciﬁc techniques from the attack graph while accurately
extracting the corresponding threat intelligence mentioned in the CTI report,
we ﬁrst need a universal description of the attack technique. In this paper, we
adopt a design of technique template in a graph structure for each technique.

Then, inspired by the graph alignment algorithm proposed in Poirot [34] for
attack behavior identiﬁcation in provenance graphs, we design a revised graph
alignment algorithm for technique identiﬁcation with templates. Finally, we in-
troduce how to initialize and update technique templates with alignment results.
5 https://github.com/explosion/spacy-models/releases/tag/en core web sm-3.1.0
6 https://spacy.io/api/entityruler
7 https://github.com/msg-systems/coreferee

10

Z. Li et al.

Design of Technique Templates To present the attack behaviors inside tech-
niques while aggregating threat intelligence, we model technique templates also
as graphs (Gt) with statistics information. In the graph, nodes represent aggre-
gated entity knowledge, and edges represent possible dependencies among them.

Table 2: Attack entities in the template of the technique T1547-Boot or Logon
Autostart Execution.

Template
entities

Executable

Register

NLP
descriptions

scripts,
macros, . . .

register keys,
register, . . .

Autostart Folder

Shortcut File

Side-loading DLL

startup folder,
path, . . .
shortcut, . . .
winlogon helper DLL,
SSP DLL, . . .

IoC terms

*.exe, *.ps1, . . .

HKLM\. . . \windows\currentversion\winlogon\*,
HKLM\. . . \active setup\installed components\*,
HKLM\Software\*\Run, . . .
%HOMEPATH%\Start Menu\Programs\Startup\,
∼/.conﬁg/autostart/*, . . .
*.lnk, . . .

sspisrv.dll, . . .

Moreover, we designed a conﬁdence score calculated by the number of oc-
currences for entities and dependencies in diﬀerent reports. In this way, as long
as techniques appear multiple times in diﬀerent reports and most of them are
parsed correctly, the impact of possible false-positives/false-negatives (FPs/FNs)
involved by AttacKG misidentiﬁcations and adversarial or low-quality CTI re-
ports can be tolerated.

Graph Alignment for Technique Identiﬁcation and Technique Knowl-
edge Graph Construction. As discussed above, both attack graphs we ex-
tracted in Section 3.2 and technique templates we generated in Section 3.3 may
contain false-positives/false-negatives (FPs/FNs), so we cannot use exact match.
As an alternative, we proposed a graph alignment algorithm between technique
template Gt and attack graph Ga for fuzzy matching. Speciﬁcally, as shown in
Table 3, we deﬁne two kinds of alignments, i.e., node alignment between two
nodes in two diﬀerent graphs and graph alignment measuring the overall simi-
larity between a technique template and a certain subgraph in the attack graph.

Table 3: Notations in Graph Alignment

Notation Description

Node alignment between node i and k from diﬀerent graph
i : k
i (cid:57)(cid:57)(cid:75) j
An dependency (path) from node i to node j
Gt :: Ga Graph alignment between Template Gt and Graph Ga
Alignment score between node i to node k
Γ (i : k)
Γ (Gt :: Ga) Alignment score between Template Gt and Graph Ga
ΓN (Gt :: Ga) Node-level alignment score between Template Gt and Graph Ga
ΓE(Gt :: Ga) Dependency-level alignment score between Template Gt and Graph Ga

AttacKG: Constructing Technique Knowledge Graph from CTI Reports

11

Node alignment. We ﬁrst enumerate every node k in attack graph Ga to
ﬁnd alignment candidates for every node i in a template Gt by calculating the
alignment score for nodes Γ (i : k). The alignment score between two nodes is
computed by Equations (1) and (2):

(cid:40)

Γ (i : k) =

γ + (1 − γ) · Sim(i, k)
0

itype = ktype
itype (cid:54)= ktype

,

Sim(i, k) = M ax(sim(iIoC , kIoC ), sim(iN LP , kN LP )).

(1)

(2)

Intuitively, if node i and node k have diﬀerent types, then the alignment
score will be zero. Otherwise, they will get a basic type-matched score γ. Then
the similarity of nodes’ attributes (Sim(i, k)) can be determined by enumerating
and calculating terms in the IoC term set and natural language description set
similarity (Sim(i, k)) at the character level [11]. If the alignment score reaches
a pre-deﬁned threshold, we will record the node alignment candidate in Ga to a
list of the corresponding template node.

Graph alignment. Afterward, we iterate through all candidate nodes to cal-
culate the overall alignment scores Γ (Gt :: Ga) in two parts: node-level alignment
scores ΓN (Gt :: Ga) and edge-level alignment scores ΓE(Gt :: Ga). Speciﬁcally,
the alignment score between a technique template and an attack graph can be
computed by Equations (3), (4), and (5):

ΓN (Gt :: Ga) =

(cid:88)

(Γ (i : k) · ioccur)

(cid:46) (cid:88)

(ioccur),

ΓE(Gt :: Ga) =

i∈Gt,k∈Ga
(cid:88)

(

(Γ (i : k) · Γ (j : l)
Cmin(k (cid:57)(cid:57)(cid:75) l)

i∈Gt
· (i (cid:57)(cid:57)(cid:75) j)occur)

i (cid:57)(cid:57)(cid:75) j ∈ Gt
k (cid:57)(cid:57)(cid:75) l ∈ Ga
(cid:46) (cid:88)

((i (cid:57)(cid:57)(cid:75) j)occur),

Γ (Gt :: Ga) =

· (ΓN (Gt :: Ga) + ΓE(Gt :: Ga)).

i(cid:57)(cid:57)(cid:75)j∈Ga
1
2

(3)

(4)

(5)

As shown, the node-level alignment score (ΓN (Gt :: Ga)) is a weighted sum
of the alignment score (Γ (i : k)) of each node. The weights are proportional to
the number of node occurrences (ioccur) recorded in the template. In this way,
we enhance the impact of important entities and dependencies that commonly
appear in diﬀerent reports. Meanwhile, the edge-level alignment score (ΓE(Gt ::
Ga)) depends on three factors: alignment scores of the nodes at both ends of the
dependency (Γ (i : k) and Γ (j : l)); the minimal hop between both ends of the
dependency (Cmin(k (cid:57)(cid:57)(cid:75) l)) in the attack graph; the number of node occurrences
((i (cid:57)(cid:57)(cid:75) j)occur) recorded in the template. If two nodes are not connected, the
dependency between them (Cmin(k (cid:57)(cid:57)(cid:75) l)) will be set to inﬁnity. Finally, the
outputs of all ﬁve equations above are normalized to interval [0, 1]. We note
that although the traversal method is used, the computational overhead of the
whole algorithm is acceptable due to the limited size of both attack graph and
technique templates.

After getting alignment scores for candidate permutations of each technique,
we will compare them with a pre-deﬁned threshold and ﬁnally select aligned

12

Z. Li et al.

subgraphs of techniques. It is noteworthy that one attack graph node can be
aligned in multiple techniques, and one technique can be found multiple time as
long as each aligned subgraph have an alignment score above the threshold.

TKG construction. With the graph alignment results, we can attach the
general knowledge stored in technique templates, including alternative entities
and techniques, to the corresponding positions in an attack graph. Then, we can
obtain the Technique Knowledge Graph (TKG) that introduces the whole attack
chain in a CTI report with enhanced knowledge.

Initialization and Updating of Technique Templates Both the initializa-
tion and updating of technique templates rely on the graph alignment results.

Updating. By aligning, the node in the attack graph can be mapped to the
node in the identiﬁed technique template. Then we update the IoC and natural
language description sets in the template node with new terms from the aligned
attack graph node. This allows us to aggregate threat intelligence across CTI
reports at the technique level.

Initialization. The initialization process of technique templates starts with
a random single-technique attack graph extracted from MITRE technique ex-
amples as the initial template. Then we align the initial template with other
single-technique attack graphs of the same technique. The information in aligned
attack graph nodes will be merged into the corresponding template node. And
the unaligned nodes will be added to templates as new nodes, which is diﬀerent
from the updating process.

Finally, we generate the technique template that aggregates threat intel-
ligence and covers multiple technique variants across multiple reports, as the
example shown in Figure 1 and Table 2.

4 Evaluation

In this section, we focus on evaluating AttacKG’s accuracy of attack graph ex-
traction and technique identiﬁcation as a CTI report parser and its eﬀectiveness
of technique-level intelligence aggregation as a CTI knowledge collector. In par-
ticular, our evaluation aims at answering the following research questions (RQs):
(RQ1) How accurate is AttacKG in extracting attack graphs (attack-related en-
tities and dependencies) from CTI reports? (RQ2) How accurate is AttacKG in
identifying attack techniques in CTI reports? (RQ3) How eﬀective is AttacKG
in collecting technique-level intelligence from massive CTI reports? Finally, we
also want to evaluate how Technique Knowledge Graphs beneﬁt downstream
security tasks.

4.1 Evaluation Setup

To evaluate AttacKG, we crawled 1,515 real-world CTI reports mentioned in
MITRE ATT&CK references whose sources range from Cisco Talos Intelligence
Group [3], Microsoft Security Intelligence Center [16], etc. Moreover, we crawl

AttacKG: Constructing Technique Knowledge Graph from CTI Reports

13

7,373 procedure examples out of 179 techniques from the MITRE ATT&CK
knowledge-base [14] to formulate our technique templates.

To answer RQ1 and RQ2, we further manually label the ground-truth of
entities, dependencies, and techniques in 16 of the collected reports: (1) Five
DARPA TC Reports: We select ﬁve attack reports released by the DARPA TC
program’s ﬁfth engagement that cover diﬀerent OS platforms (i.e., Linux, Win-
dows, and FreeBSD), vulnerabilities (e.g., Firefox backdoor), and exploits (e.g.,
Firefox BITS Micro). (2) Three APT Campaign Reports: To explore the perfor-
mance of AttacKG in practice, we select another three public CTI reports that
describe APT campaigns from three well-known threat groups, i.e., Franken-
stein [7], OceanLotus (APT32) [20], and Cobalt Group [15].

4.2 Evaluation Results

RQ1: How accurate is AttacKG in extracting attack graphs from CTI
reports? A typical attack technique consists of multiple threat actions that
are presented as a set of connected entities in an attack graph. In particular,
the accurate extraction of attack graphs is an essential starting point towards
automated identiﬁcation of attack techniques from CTI reports. To evaluate the
accuracy of AttacKG in extracting attack graphs, we adopt the aforementioned
16 well-labeled CTI reports. We manually identify attack-related entities in the
reports and correlate entities based on our domain knowledge of the attack
workﬂow. It is noteworthy that in addition to natural language descriptions,
DARPA TC reports also provide the graph representation of attacks, which
serves as additional documentation to complement our manual labels.

Given ground-truth entities and dependencies in the reports, we are able
to compare AttacKG with the state-of-the-art open-source8 CTI report parser,
EXTRACTOR [38], in terms of the precision, recall, and F1-score. For a fair
comparison, we enable all optimizations in EXTRACTOR (e.g., Ellipsis Subject
Resolution) when constructing attack graphs upon textual attack descriptions.
As discussed in Section 3, an entity may correspond to multiple co-references
across a CTI report. Since our goal is to identify unique entities (e.g., IOCs), we
merge co-reference entities in the attack graph and integrate their dependencies
with the remaining entities.

Table 4 summarizes the results of AttacKG and EXTRACTOR in capturing
entities and dependencies from the selected 16 CTI reports(Rows 2-7). As can
be seen, despite sightly lower precision caused by a higher false-positive rate,
AttacKG yields better accuracy overall (with an average F1-score improvement
of 0.12) than EXTRACTOR due to a much lower false-negative rate. This is
expected as EXTRACTOR aggregates all non-IoC entities of the same type
(e.g., process) into one entity, as shown in Figure 2. In other words, no matter
how many false-positive entities EXTRACTOR produces, they are treated as one
false extraction as long as they belong to the same type. It is noteworthy that
such aggregation design inevitably losses structural information of attack graphs

8 https://github.com/ksatvat/EXTRACTOR

14

Z. Li et al.

Table 4: Accuracy of attack graph extraction and technique identiﬁcation in 16 CTI
reports. (Columns 2-9 present the count of manually-generated ground-truth and
−f alse negative(+f alse positive) in extracting attack-related entities, dependencies,
and techniques. Columns 10-12 present the overall Precision, Recall and F1-score.)

CTI reports

Entities

Dependencies

Techniques

Manual Extractor AttacKG Manual Extractor AttacKG Manual TTPDrill AttacKG

TC Firefox DNS Drakon APT
TC Firefox Drakon Copykatz
TC Firefox BITS Micro APT
TC SSH BinFmt-Elevate
TC Nginx Drakon APT
Frankenstein Campaign
OceanLotus(APT32) Campaign
Cobalt Campaign
DeputyDog Campaign
HawkEye Campaign
DustySky Campaign
TrickLoad Spyware Campaign
Emotet Campaign
Uroburos Campaign
APT41 Campaign
Espionage Campaign

10
6
11
6
15
14
7
17
13
16
12
17
8
12
13
11

Overall Presicion
Overall Recall
Overall F-1 Score

1.000
1.000
1.000

-4 (+4)
-2 (+0)
-6 (+0)
-4 (+0)
-2 (+0)
-3 (+1)
-0 (+2)
-6 (+0)
-1 (+2)
-2 (+3)
-2 (+1)
-3 (+1)
-4 (+0)
-1 (+2)
-1 (+5)
-2 (+6)

0.843
0.771
0.806

-0 (+1)
-1 (+0)
-1 (+4)
-1 (+0)
-2 (+0)
-0 (+2)
-0 (+2)
-1 (+5)
-0 (+2)
-3 (+4)
-0 (+3)
-0 (+0)
-1 (+1)
-2 (+3)
-1 (+0)
-3 (+1)

9
5
10
5
15
16
7
17
14
17
12
16
7
13
12
10

0.860
0.915
0.887

1.000
1.000
1.000

-4 (+3)
-2 (+0)
-7 (+0)
-4 (+0)
-0 (+0)
-5 (+1)
-0 (+1)
-4 (+0)
-1 (+1)
-5 (+3)
-2 (+1)
-4 (+0)
-4 (+0)
-3 (+0)
-0 (+1)
-3 (+2)

0.913
0.741
0.818

-2 (+1)
-2 (+0)
-0 (+0)
-0 (+0)
-2 (+0)
-0 (+2)
-1 (+0)
-1 (+2)
-2 (+0)
-3 (+2)
-0 (+3)
-0 (+1)
-2 (+1)
-2 (+0)
-1 (+2)
-3 (+1)

8
4
5
5
6
9
5
8
10
11
5
4
7
7
6
4

-2 (+10)
-1 (+13)
-1 (+14)
-2 (+14)
-2 (+22)
-1 (+18)
-1 (+12)
-2 (+21)
-1 (+35)
-2 (+64)
-0 (+32)
-0 (+18)
-2 (+16)
-0 (+23)
-2 (+26)
-0 (+19)

0.906
0.886
0.896

1.000
1.000
1.000

0.196
0.837
0.318

-0 (+3)
-1 (+0)
-2 (+2)
-2 (+2)
-0 (+2)
-1 (+1)
-2 (+0)
-1 (+1)
-0 (+6)
-1 (+3)
-0 (+1)
-2 (+0)
-3 (+0)
-1 (+2)
-1 (+1)
-0 (+1)

0.771
0.808
0.789

and makes follow-up technique identiﬁcation almost impossible. Hence, we only
compare AttacKG with EXTRACTOR in extracting attack graphs rather than
identifying attack techniques.

RQ2: How accurate is AttacKG in identifying attack techniques in
CTI reports? To answer RQ2, we use AttacKG to identify attack techniques in
the 16 CTI reports and compare it with the state-of-the-art technique identiﬁer,
TTPDrill [26]. The core idea of TTPDrill is to extract threat actions from CTI
reports and attribute such actions to techniques based on threat-action ontol-
ogy. Speciﬁcally, it manually deﬁnes 392 threat actions for 187 attack techniques
in the original paper, while such ontology knowledge base has been extended
to cover 3,092 threat actions for 246 attack techniques in its latest open-source
implementation9. Also noteworthy is that all attack techniques used by TTP-
Drill are derived from an old version of MITRE ATT&CK matrix. To allow
for a consistent comparison, we map every technique in TTPDrill to the latest
version technique via the hyperlinks provided by MITRE. For example, T1086-
PowerShell in TTPDrill is updated to T1059/001-Command and Scripting In-
terpreter: PowerShell.

We evaluate AttacKG and TTPDrill on the 16 CTI reports that we labelled
the precious ground-truth techniques adopted in the attacks. The technique iden-
tiﬁcation results are summarized in the last three rows in Table 4. We can observe
that while both AttacKG and TTPDrill achieve reasonably low false-negative
rates, TTPDrill is prone to high volumes of false-positive techniques (15.5 false
positives per report on average), which is nearly three times as many as the true
positives. As a result, while the recall of AttacKG is only slightly higher than
TTPDrill by 0.1, AttacKG signiﬁcantly outperforms TTPDrill in terms of the

9 https://github.com/mpurba1/TTPDrill-0.3

AttacKG: Constructing Technique Knowledge Graph from CTI Reports

15

precision and F1-score by 0.575 and 0.462, respectively. This result makes sense
as TTPDrill treats threat actions extracted from CTI reports as action-object
pairs. Accordingly, techniques share partial threat actions tend to look similar
to each other in TTPDrill. In contrast, AttacKG aligns techniques to attack
graphs, taking into consideration the full contexts of threat actions.

Moreover, it is worth mentioning that we use fuzzy matching based on align-
ment scores for technique identiﬁcation; thus, our approach can correctly identify
attack techniques even with FPs/FNs in technique templates and extracted at-
tack graphs. Our observation is that the overall accuracy is highest when the
graph alignment score’s threshold is 0.85, with details about the threshold se-
lection discussed in Appendix B. To verify the importance of each component
in AttacKG towards technique identiﬁcation, we perform an ablation study by
considering four variants of AttacKG, as discussed in Appendix C.

RQ3: How eﬀective is AttacKG at collecting technique-level intelli-
gence from massive reports? To answer RQ3, we explore the eﬀectiveness of
AttacKG in extracting threat intelligence (e.g., techniques and IoCs entities) on
1,515 CTI reports collected from diﬀerent intelligence sources. Table 5 lists the
ten most common techniques that appeared in the 1,515 reports and the num-
ber of their corresponding unique IoCs, which mostly overlap with manually
generated top TTP lists by PICUS [18] and redcanary [19].

Table 5: Eﬀectiveness of Threat Intelligence Extraction from 1,515 CTI Reports.

Top 6 Techniques

Occurrences
in reports

#Unique IoCs
Executable Network File Registry Vulner.

T1071 - Command & Control
T1059 - Scripting Interpreter
T1083 - File/Directory Discovery
T1170 - Indicator Removal
T1105 - Ingress Tool Transfer
T1003 - OS Credential Dumping

1113
1089
1060
990
990
961

12
6
-
6
-
-

452
394
-
-
389
-

371
284
249
255
261
220

-
100
-
74
-
-

All Techniques Summary

28262

495

2813 4634

384

12
9
-
7
-
-

67

Each report, on average, contains 18.7 techniques and 5.5 unique IoCs, and
diﬀerent techniques in most cases involve diﬀerent IoCs. Most CTI reports do
not provide uniﬁed and formatted intelligence to validate our extracted results,
which is also our motivation behind this work. Therefore, we randomly select
several technique templates with aggregated knowledge for manual investiga-
tion. Speciﬁcally, we observe that templates successfully collect unique IoCs for
diﬀerent technique implementations across CTI reports. As the example in Fig-
ure 1 and Table 2 shows, we identify multiple unique IoC terms playing simi-
lar roles from diﬀerent reports for individual implementations (sub-techniques).
Such template-aggregated intelligence can directly enrich our understanding of
attack techniques. Furthermore, the TKG built on templates can help under-
stand the entire attack and possible variants for more robust detection and
investigation, as shown in Section 2.3 and Appendix A.

16

Z. Li et al.

4.3 Case Study

This subsection discusses how TKGs can be adopted in real-world security tasks
with case studies. Speciﬁcally, TKGs adopt the collated knowledge to enrich
reports, thus helping to understand and reconstruct the attacks involved. In
addition, TKGs with aggregated technique-level intelligence can enhance the
detection of attack variants (Appendix A).

TKG for attack reconstruction. In order for security practitioners and
researchers to have an in-depth analysis, they have to bridge the knowledge gap
between the real attacks and the CTI reports. This gap can be addressed by
having a ﬁrst-hand practical environment that thoroughly describes how attack
steps are performed in the CTI reports. AttacKG provides structured knowl-
edge about an attack scenario, making it easier to reproduce cyber attacks in a
testbed environment, beneﬁting analysts [39] with high ﬁdelity and live recon-
structed environment with in-depth details. We used AttacKG to support attack
reconstruction [32].

Taking the Frankenstein campaign as an example, with the TKG extracted
from the corresponding report, we can quickly identify nine techniques for six
tactics involved in the campaign, including T1566-Phishing for tactic Initial
Access, T1547-Boot Autostart for tactic Persistence, T1203-Exploitation for Ex-
ecution for tactic Execution, etc. Then, we can infer the environment needed
to reconstruct the attack based on the techniques and entities involved in the
attack. Speciﬁcally, autostart with registry hints that the attack is running in
Windows. The use of vulnerability (CVE-2017-11882 ) for execution indicates a
requirement for speciﬁc versions of Microsoft Oﬃce. After setup the environment,
we can reproduce the campaign with open-source attack technique implementa-
tion, such as Atomi-Red-Teams [2]. All in all, AttacKG provides much necessary
information as the ﬁrst step in the reconstruction process.

5 Conclusion

We propose a viable solution for retrieving structured threat intelligence from
CTI reports in this paper. We use the notion of technique template to iden-
tify and aggregate technique-level threat intelligence across massive reports, and
leverage the knowledge contained in templates to enhance the attack graph
extracted from a CTI report and generate the TKG that introduces the re-
port with enhanced knowledge. We implement our prototype system, AttacKG,
and evaluate it with 1,515 real-world CTI reports. Our evaluation results show
that AttacKG can extract attack graphs from reports accurately and aggregate
technique-level threat intelligence from massive CTI reports eﬀectively.

Appendix

A Another Case Study
TKGs for attack variants detection. As discussed in Section 2.1, frequent
and widely used attack variants are posing challenges for detection. Take a simple

AttacKG: Constructing Technique Knowledge Graph from CTI Reports

17

T1204-User Execution and T1547-Boot Autostart two-stage attack excerpted
from Frankenstein Campaign, for example. Subﬁgures (A) and (B) in Figure 4
demonstrate the attack and its variants with three nodes mutated. Speciﬁcally,
the ﬁle server URL in T1204 was changed, and the implementation of T1547 was
switched from (A) Registry Run Keys to (D) DLL Side-loading. It is noteworthy
that such changes will not aﬀect the functionality of the attack.

Fig. 4: TKG for attack avariants detection. (Red outlined mismatch items.)

Then, three representative intelligence-based detection schemes of diﬀerent
granularity are selected for comparison, namely, 1) iACE [33] that automati-
cally extracts node-level intelligence (subﬁgure (C)), 2) Poirot [34] that adopt
manually extracted attack graph for threat detection (subﬁgure (D)) and 3) our
approach that aggregate technique-level intelligence from multiple reports (sub-
ﬁgure (E)). As the matching results shown, to avoid introducing excessive false
positives, node intelligence-based detection requires exact matching, which can
be easily bypassed by obfuscation and other methods. By considering structure
information, attack-level matching allows the generalization of node information
to improve detection generality. However, attackers can still easily bypass such
detection by changing any techniques used in the campaign.

Nevertheless, the technique-level intelligence we provide enables detectors to
detect diﬀerent attack techniques independently. Moreover, the pooled technique
knowledge from multiple reports can eﬀectively improve the detection of vari-
ous variants. And the aggregated intelligence can be automatically merged with
approaches like Eiger [28] for better generality.

B Selecting the Threshold Value

The selection of the threshold value for node/graph alignment scores aﬀects the
accuracy and eﬃciency of AttacKG. Speciﬁcally, too low a threshold for graph
alignment score could result in premature matching (false positives), while too
high could lead to missing reasonable matches (false negatives). For node align-
ment score, too low a threshold could leave unnecessary alignment candidates
and cost longer report analysis time, while too high could lead to false negatives.
Thus, there are trade-oﬀs in choosing optimal threshold values. To determine op-
timal threshold values, we measure the F-score and report analysis time using

(E) Technique-level Signatures(A) Original Campaign http://droobox[.]online:80/luncher.docHKCU\Software\Microsoft\Windows\CurrentVersion\Run(B) Mutated Campaign https://drive[.]google.com/file/d/...24goopdate.dllMinutesofMeeting-2May19.docx1MinutesofMeeting-2May19.docx3’2’14’Flash.exe(C) Node-level Signatures/IoCs1. MinutesofMeeting-2May19.docx; 2. http://droobox.online:80/luncher.doc; 3. Powershell; 4. HKCU\Software\Microsoft\Windows\CurrentVersion\Run(D) Attack-level Signatures1. *.docx; 2. %External URL/IP%; 3. Powershell; 4. HKCU\Software\Microsoft\Windows\CurrentVersion\RunPowershell3T12041. *.docx/*.pdf/...2. %External URL/IP%T1547(A)3. %Executable%4. HKCU\Software\*\RunT1547(D)3. %Executable%4. %Side-loading DLL%......18

Z. Li et al.

varying threshold values, as shown in Figure 5, and select optimal threshold val-
ues (0.65 for node alignment, 0.85 for graph alignment) that make each index
better at the same time.

(a) node alignment score

(b) graph alignment score

Fig. 5: Threshold selection

C Ablation Study of AttacKG.

In particular, we ﬁrst remove part of the attributes in entities: the IoC in-
formation and natural language text termed AttacKGw\o IoC inf ormation and
AttacKGw\o natural language text, respectively. Note that unlike the EXTRAC-
TOR’s practice of merging entities, which may result in information loss, we only
remove partial entity attributes without sacriﬁcing the structural information of
attack graphs. Moreover, we obtain another variant by ﬁltering out dependen-
cies in attack graphs termed AttacKGw\o dependencies. That is, we predict attack
techniques only based on entity sets. Finally, we disable the graph simpliﬁcation
component termed AttacKGw\o graph simplif ication.

As diﬀerent component combinations may aﬀect the distribution of align-
ment scores, we adjust and choose identiﬁcation thresholds separately for At-
tacKG variants in light of the optimal F1-scores. The experimental results are
summarized in Table 6. We ﬁnd that removing any component would degrade At-
tacKG ’s overall performance, which well justiﬁes our design choice. Especially,
AttacKGw\o dependencies consistently performs the worst across all evaluation
metrics. It veriﬁes the substantial inﬂuence of graph structures in technique
identiﬁcation.

Table 6: Ablation study of diﬀerent components used in technique identiﬁcation.

Components

Precision Recall F1-Score

w/ all component
w/o IoC information
w/o natural language text
w/o dependencies
w/o graph simpliﬁcation

0.782
0.833
0.690
0.667
0.696

0.860 0.819
0.698
0.600
0.741
0.800
0.558
0.480
0.736
0.780

0102030405060708000.10.20.30.40.50.60.70.80.9100.20.40.60.81F1-score RateThresholdF1-scoreTimeTime(s)Optimal Value = 0.6500.20.40.60.8100.20.40.60.81RateThresholdPresicionRecallF1-scoreOptimal Value = 0.85AttacKG: Constructing Technique Knowledge Graph from CTI Reports

19

D Eﬃciency of AttacKG
Setup. We experimentally compared AttacKG’s eﬃciency with TTPDrill and
Extractor on the 16 CTI report samples mentioned in Section 4.1 on a PC with
AMD Ryzen 7-4800H Processor 2.9 GHz, 8 Cores, and 16 Gigabytes of memory,
running Windows 11 64-bit Professional. The size of the reports used as samples
ranges from 61 words to 1029 words, with an average of 278.2 words.

Results. Among the three models, Extractor adopts the most complex sys-
tem consisting of multiple NLP models and has the highest runtime overhead,
taking 239.70 seconds on average to parse a report. While AttacKG simpliﬁed
the graph extraction process, making it possible to identify attack techniques
and the extraction of attack graph and still utilize much less time. On aver-
age, graph extraction takes 8.9 seconds, and technique identiﬁcation takes 15.1
seconds, totaling 24.0 seconds. TTPDrill, on the other hand, uses the simplest
model without constructing attack graphs and is therefore also the fastest, tak-
ing only 5.9 seconds on average to analyze a report, but at the cost of a high
false-positive rate.

References

1. AlienVault OTX, https://otx.alienvault.com
2. Atomic Red Team, https://github.com/redcanaryco/atomic-red-team
3. Cisco Talos Intelligence Group - Comprehensive Threat Intelligence, https://blog

.talosintelligence.com/

4. CybOX - Cyber Observable Expression, https://cyboxproject.github.io/
5. DARPA Transparent Computing, https://www.darpa.mil/program/transparent-c

omputing

6. Extractor, https://github.com/ksatvat/EXTRACTOR
7. Frankenstein Campaign, https://blog.talosintelligence.com/2019/06/frankenstein

-campaign.html

8. IBM X-Force, https://exchange.xforce.ibmcloud.com/
9. Introduction to STIX, https://oasis-open.github.io/cti-documentation/stix/intr

o.html

10. ioc parser, https://github.com/armbues/ioc parser
11. Levenshtein distance, https://en.wikipedia.org/wiki/Levenshtein distance
12. mandiant/OpenIOC 1.1, https://github.com/mandiant/OpenIOC{ }1.1
13. Microsoft

3 products,
https://arstechnica.com/information-technology/2021/02/microsoft-says-solarwi
nds-hackers-stole-source-code-for-3-products
14. MITRE ATT&CK®, https://attack.mitre.org/
15. Multiple Cobalt Personality Disorder, https://blog.talosintelligence.com/2018/

says SolarWinds hackers

source

stole

code

for

07/multiple-cobalt-personality-disorder.html

16. Security intelligence — Microsoft Security Blog, https://www.microsoft.com/se

curity/blog/security-intelligence/

17. spaCy, https://spacy.io/
18. The Top Ten MITRE ATT&CK Techniques, https://www.picussecurity.com/re

source/the-top-ten-mitre-attck-techniques

19. Top MITRE ATT&CK Techniques, https://redcanary.com/threat-detection-rep

ort/techniques/

20

Z. Li et al.

20. OceanLotus: Extending Cyber Espionage Operations Through Fake Websites
(2021), https://www.volexity.com/blog/2020/11/06/oceanlotus-extending-cyber
-espionage-operations-through-fake-websites/

21. Gao, P., Liu, X., Choi, E., et al.: A system for automated open-source threat

intelligence gathering and management. In: SIGMOD (2021)

22. Gao, P., Shao, F., Liu, X., et al.: Enabling Eﬃcient Cyber Threat Hunting With

Cyber Threat Intelligence. ICDE (2021)

23. Ghazi, Y., Anwar, Z., Mumtaz, R., Saleem, S., Tahir, A.: A supervised machine
learning based approach for automatically extracting high-level threat intelligence
from unstructured sources. In: 2018 International Conference on Frontiers of In-
formation Technology (FIT). pp. 129–134. IEEE (2018)

24. Hassan, W.U., Bates, A., Marino, D.: Tactical provenance analysis for endpoint

detection and response systems. In: IEEE S&P (2020)

25. Hossain, M.N., Sheikhi, S., Sekar, R.: Combating dependence explosion in forensic

analysis using alternative tag propagation semantics. In: IEEE S&P (2020)

26. Husari, G., Al-Shaer, E., Ahmed, M., Chu, B., Niu, X.: TTPDrill: Automatic and
accurate extraction of threat actions from unstructured text of CTI Sources. In:
ACM International Conference Proceeding Series. vol. Part F1325 (2017)

27. Husari, G., Niu, X., Chu, B., Al-Shaer, E.: Using entropy and mutual information
to extract threat actions from cyber threat intelligence. In: 2018 IEEE International
Conference on Intelligence and Security Informatics (ISI). pp. 1–6. IEEE (2018)

28. Kurogome, Y., Otsuki, Y., et al.: Eiger: Automated IOC generation for accurate

and interpretable endpoint malware detection. In: ACM ACSAC (2019)

29. Legoy, V., Caselli, M., Seifert, C., Peter, A.: Automated retrieval of att&ck tactics

and techniques for cyber threat reports. arXiv preprint arXiv:2004.14322 (2020)

30. Li, G., Dunn, M., Pearce, P., et al.: Reading the Tea Leaves: A Comparative

Analysis of Threat Intelligence. In: Usenix Security Symposium (2019)

31. Li, Z., Chen, Q.A., Yang, R., Chen, Y.: Threat Detection and Investigation with
System-level Provenance Graphs: A Survey. Computer & Security 106 (2021)
32. Li, Z., Soltani, A., Yusof, A., et al.: Poster: Towards automated and large-scale

cyber attack reconstruction with apt reports. In: NDSS’22 Poster Session

33. Liao, X., Yuan, K., Wang, X., et al.: Acing the IOC Game: Toward Automatic
Discovery and Analysis of Open-Source Cyber Threat Intelligence. In: CCS (2016)
34. Milajerdi, S.M., Gjomemo, R., Eshete, B., et al.: Poirot: Aligning attack behavior

with kernel audit records for cyber threat hunting. In: CCS (nov 2019)

35. Momeni Milajerdi, S., Gjomemo, R., et al.: HOLMES: Real-time APT detection

through correlation of suspicious information ﬂows. In: IEEE S&P (2019)

36. Mu, D., Cuevas, A., Yang, L., et al.: Understanding the reproducibility of crowd-

reported security vulnerabilities. In: Usenix Security Symposium (2018)

37. Ramnani, R.R., Shivaram, K., Sengupta, S.: Semi-automated information extrac-
tion from unstructured threat advisories. In: Proceedings of the 10th Innovations
in Software Engineering Conference. pp. 181–187 (2017)

38. Satvat, K., Gjomemo, R., Venkatakrishnan, V.: Extractor: Extracting attack be-

havior from threat reports. In: IEEE EuroS&P (2021)

39. Uetz, R., Hemminghaus, C., Hackl¨ander, L., et al.: Reproducible and adaptable
log data generation for sound cybersecurity experiments. In: Annual Computer
Security Applications Conference. pp. 690–705 (2021)

40. Zhu, Z., Dumitras, T.: ChainSmith: Automatically Learning the Semantics of Mali-
cious Campaigns by Mining Threat Intelligence Reports. In: IEEE European Sym-
posium on Security and Privacy (2018)

