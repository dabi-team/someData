111

1
2
0
2

n
u
J

3

]

R
C
.
s
c
[

1
v
2
3
6
1
0
.
6
0
1
2
:
v
i
X
r
a

Cybersecurity Information Exchange with Privacy (CYBEX-P) and
TAHOE – A Cyberthreat Language

FARHAN SADIQUE, IGNACIO ASTABURUAGA, RAGHAV KAUL, SHAMIK SENGUPTA, SHAHRIAR
BADSHA, JAMES SCHNEBLY, ADAM CASSELL, JEFF SPRINGER, NANCY LATOURRETTE,
and SERGIU M. DASCALU, University of Nevada, Reno

Cybersecurity information sharing (CIS) is envisioned to protect organizations more effectively from advanced cyberattacks.
However, a completely automated CIS platform is not widely adopted. The major challenges are: (1) the absence of a robust
cyberthreat language (CTL) and (2) the concerns over data privacy. This work introduces Cybersecurity Information Exchange
with Privacy (CYBEX-P), as a CIS framework, to tackle these challenges. CYBEX-P allows organizations to share heterogeneous
data with granular, attribute based privacy control. It correlates the data to automatically generate intuitive reports and
defensive rules. To achieve such versatility, we have developed TAHOE – a graph based CTL. TAHOE is a structure for storing,
sharing and analyzing threat data. It also intrinsically correlates the data. We have further developed a universal Threat Data
Query Language (TDQL). In this paper, we propose the system architecture for CYBEX-P. We then discuss its scalability and
privacy features along with a use case of CYBEX-P providing Infrastructure as a Service (IaaS). We further introduce TAHOE
& TDQL as better alternatives to existing CTLs and formulate ThreatRank – an algorithm to detect new malicious events.

CCS Concepts: • Security and privacy → Security services; Privacy-preserving protocols; • Computer systems or-
ganization → Other architectures;

Additional Key Words and Phrases: CYBEXP, TAHOE, TDQL, ThreatRank, cybersecurity information sharing, privacy
preservation

ACM Reference Format:
Farhan Sadique, Ignacio Astaburuaga, Raghav Kaul, Shamik Sengupta, Shahriar Badsha, James Schnebly, Adam Cassell, Jeff
Springer, Nancy LaTourrette, and Sergiu M. Dascalu. 2020. Cybersecurity Information Exchange with Privacy (CYBEX-P) and
TAHOE – A Cyberthreat Language. ACM Trans. Comput. Syst. 36, 4, Article 111 (June 2020), 27 pages. https://doi.org/10.1145/
1122445.1122456

1

INTRODUCTION

Collaborative cybersecurity information sharing (CIS) is envisioned to protect organizations more effectively
from advanced cyberattacks [19]. The benefits of proactive sharing are twofold — (1) new threats are detected
faster, owing to collaborative analysis (2) the corresponding signatures are distributed faster due to real-time
sharing.

Authors’ address: Farhan Sadique, fsadique@nevada.unr.edu; Ignacio Astaburuaga, ignacio.ag@nevada.unr.edu; Raghav Kaul, raghavkaul@
nevada.unr.edu; Shamik Sengupta, ssengupta@unr.edu; Shahriar Badsha, sbadsha@unr.edu; James Schnebly, jschnebly@nevada.unr.edu; Adam
Cassell, acassell@nevada.unr.edu; Jeff Springer, jeffs@unr.edu; Nancy LaTourrette, nancy@unr.edu; Sergiu M. Dascalu, dascalus@cse.unr.edu,
University of Nevada, Reno, 1664 North Virginia Street, Reno, Nevada, 89557.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that
copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first
page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy
otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from
permissions@acm.org.
© 2020 Association for Computing Machinery.
0734-2071/2020/6-ART111 $15.00
https://doi.org/10.1145/1122445.1122456

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

 
 
 
 
 
 
111:2

• Sadique, et al.

Moreover, it has been repeatedly showed using game theoretic modeling that organizations are benefited by
sharing threat data (e.g. malware signatures or firewall logs) [38, 39]. Furthermore, the US congress proposed a
number of acts incentivizing private organizations and requiring public organizations to share threat data [5, 6].

1.1 Motivation and Challenges

Despite all the benefits, there is limited sharing in the industry due to several limitations of existing platforms:

(1) The existing platforms are built for only data sharing [13] or for limited data analysis [41], although robust

data analysis is just as important [40],

(2) They cannot generate actionable CTI from machine data [41]; automatic data collection is either absent

[14] or limited [35, 37] in existing platforms, although complete automation is expected [26, 40],

(3) There is no standard cyberthreat language for all of data sharing, storing, correlation, and analysis [40]
(4) There are no intuitive investigation tools [40], and
(5) The existing platforms cannot outline a defensive course of action - e.g. automatic generation of firewall

rules, although it is desired in a complete CIS ecosystem [28].

The situation is further aggravated by several risks associated with sharing private information because:

(1) it may reveal vulnerabilities in the sharer’s network attracting more targeted attacks [12],
(2) it can compromise the privacy of the users [36],
(3) it may violate existing data policy of organizations [34],
(4) it potentially subjects organizations to government surveillance [11],
(5) revealing vulnerabilities may damage an organization’s reputation [20], and
(6) competitors may acquire significant underlying intelligence from the data [12].

To tackle these challenges, we introduce CYBersecurity information EXchange with Privacy (CYBEX-P) in
this paper. CYBEX-P is a cybersecurity information sharing (CIS) platform with robust data governance. It
automatically analyzes shared data to generate insightful reports and alerts.

We further introduce TAHOE – a cyberthreat language (CTL), which correlates new events with older ones to
predict future attacks. Moreover, CYBEX-P provides infrastructure as a service (IaaS) for threat data analysis. Our
experimental results show that CYBEX-P is scalable and suitable for real-time networks. Thus, CYBEX-P can
disrupt the rapid and extensive spread of new threats.

1.2 Contribution

The novel contributions of this work are:

(1) CYBEX-P – a completely automated CIS framework for with data collection, data analysis, privacy preser-

vation and report generation,

(2) TAHOE – a cyberthreat language (CTL) for storing, sharing, analyzing and intrinsically correlating data,
(3) TDQL – a universal Threat Data Query Language to query any threat data from any database,
(4) ThreatRank – a novel algorithm to detect previously unseen malicious events using correlation,
(5) A privacy preservation mechanism that provides granular, attribute-based access control. It also allows

CYBEX-P to correlate the encrypted data without exposing them,

(6) A report/alert module to automatically generate preventive rules (e.g. firewall rules),
(7) CYBEX-P Threat Intelligence – a graphical tool to visualize and investigate incidents, and,
(8) A real-time phishing URL detector that uses CYBEX-P infrastructure as a service (IaaS).

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:3

2 RELATED WORK

While there are plenty of works on cybersecurity information sharing (CIS), none of them provide a comprehensive
solution to the aforementioned challenges. In this section we discuss these works, focusing on the CIS frameworks.
We begin our study with CIS frameworks proposed in academia. Edwards et al. [18] presented one of the
earliest frameworks for sharing vulnerability information. Another framework was presented by Zhao et al. [44]
for collaborative information sharing. Yet another framework, called SKALD, [42] was developed by Webster
et al., for real-time sharing. However, none of these preserve the privacy of the data making them undesirable
[11, 12, 12, 20, 34, 36]. CYBEX-P sets itself apart from these early works by providing a robust system architecture
along with a novel privacy preservation mechanism.

Meanwhile, several proprietary frameworks have emerged in the industry including ThreatConnect [31],
AlienVault [7], X-Force [24], ThreatStream [8], ThreatExchange [25], and EclecticIQ [1]. All of these suffer from
one or more of three major limitations: (1) the data are inputted by human not automated (2) privacy of shared
data is not preserved (3) they have limited scope in participant or type of data. For example, ThreatExchange
does not allow educational institutions, X-Force data are written by humans and so on. Incidentally, none of
these allow encrypting the shared data for privacy preservation. CYBEX-P, on the other hand, is built from the
ground up keeping privacy in mind.

Now, we examine the frameworks which do consider privacy. Goodwin et al. [21] were one of the first to
coin the features of a comprehensive CIS framework. In their work, they recommended developing an extensive
framework with privacy preservation and data governance. Although, they outlined really well what needs to
be done, they did not clarify how to do it. Furthermore, our work does not rely on voluntary data sharing as
proposed in [21]. We incentivize data sharing by mitigating risk (by providing analysis reports).

Another, privacy preserving framework called PRACIS [15] was introduced by de Fuentes et al. They generated
several summary statistics by aggregating homomorphically encrypted data. However, they did not propose a
comprehensive system architecture with heterogeneous data collection and automated data analysis.

Now, we move onto the most prominent CIS systems in use today. The primary requisite of any CIS platform
is a standardized format or a cyberthreat language (CTL). Presently, the most popular CTL is Structured Threat
Information Expression (STIX) [9] developed by the MITRE corporation. While STIX is perfect for mutual data
sharing, it is unscalable for any kind of data analysis. Moreover, 6.7.2 discusses how STIX based systems are
prone to store duplicate data. To overcome these shortcomings, 6 introduces TAHOE - a graph based CTL for
both data sharing and data analysis.

In parallel to STIX, MITRE also developed the Trusted Automated eXchange of Indicator Information (TAXII)
[13] protocol to facilitate peer-to-peer data sharing between trusted parties. However, what TAXII gains in data
sharing, it lacks in privacy. For example, it does not provide attribute-based access control. In contrast, CYBEX-P
is built from a privacy standpoint giving data owners complete control to choose who sees which specific attribute.
Furthermore, since TAXII only supports STIX format, it is unsuitable for even the simplest data analysis. For
example, TAXII does not provide any API endpoint to lookup an IP address in its database..

Meanwhile, Wagner et al. developed MISP [41] as a collaborative CTI sharing platform with group based access
control and their own data format. Although, database lookups are fast in a MISP server, their open data structure
defeats that purpose, because different users structure the same data in different ways. Moreover, MISP structures
data in only two levels (Events and Attributes); so representing complex data in MISP format is non-intuitive. A
few other limitations of MISP are: it relies heavily on manual human input rather than automating machine data,
and it does not provide a robust data governance framework.

In summary, after extensive study, we were primarily inspired by both STIX and MISP data structures while
developing TAHOE. However, we have built TAHOE from the ground up with privacy and speed in mind.
Similarly, we were inspired by both TAXII and MISP while designing CYBEX-P. However, CYBEX-P is a complete

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:4

• Sadique, et al.

ecosystem with actionable data rather than a cumbersome tool. As a result, we present TAHOE and CYBEX-P as
a perfect marriage between versatility and performance in this paper.

3 OVERVIEW OF CYBEX-P

We begin our discussion with a functional overview of CYBEX-P. Fig. 1 shows CYBEX-P’s 4 major functions.

Fig. 1. Overview of the 4 major functions of CYBEX-P.

3.1 Data Collection

CYBEX-P is essentially a cloud based platform for organizations to share heterogeneous cyberthreat data. CYBEX-
P accepts all kinds of human or machine generated data including firewall logs, emails, malware signatures, and
handwritten cyberthreat intelligence (CTI).

3.2 Data Analysis

In addition to data sharing, CYBEX-P allows the users to correlate and analyze the data. This key feature sets
CYBEX-P apart from other cybersecurity information sharing systems.

3.3 Privacy Preservation

The second key feature of CYBEX-P is that, the data owner controls, who sees which part of the data. We achieve
such a granular control by separately encrypting each attribute of the data. The privacy preservation mechanism
is illustrated in section 8.

3.4 Report/Alert Generation

Finally, users can generate insightful reports or alerts from the data. CYBEX-P also provides a feed of automatically
generated defensive (e.g. firewall) rules, as we will discuss in 4.5.4. This particular feature reflects our philosophy
of making the entire process completely automated.

4 SYSTEM ARCHITECTURE OF CYBEX-P

To accommodate the four major functions, we have built CYBEX-P with 6 independent software modules – (1)
Frontend, (2) Input, (3) API, (4) Archive, (5) Analytics, and (6) Report. These modules share various components
as shown in Fig. 2. In addition, we have built a library to manipulate TAHOE content. TAHOE is a CTL, that
CYBEX-P uses, to store, analyze and share data.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:5

Fig. 2. System architecture of CYBEX-P along with the Data Flow.

4.1 Frontend Module

The frontend module (

,

in Fig. 2) is a webapp for users to interact with CYBEX-P. This module allows users –

(1) to register with and login to CYBEX-P,
(2) to manually upload threat data as text files,
(3) to configure machines (e.g. firewalls) to automatically share data with CYBEX-P (explained in 4.2),
(4) to control the access of their data (explained in 8),
(5) to generate and view reports (explained in 4.6), and
(6) to investigate an incident using our incident investigation tool (explained below).

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:6

• Sadique, et al.

4.1.1 CYBEX-P Threat Intelligence – An Incident Investigation Tool. Fig. 3 shows a novel contribution of this
project – CYBEX-P Threat Intelligence. This tool, powered by CYBEX-P analytics, allows a user to investigate an
incident.

The investigation starts with a blank canvas. Firstly, the user inputs one or more attributes to the canvas. The

attributes become nodes or vertices in the graph.

Secondly, the user clicks a button to enrich the graph with related attributes. This tool uses CYBEX-P database

to get the related attributes. Related attributes are discussed in 6.

Fig. 3. Graphical Incident Investigation Tool.

Thirdly, CYBEX-P sends a malicious score for all the attributes on the graph. Section 7 explains ThreatRank –

the algorithm used to calculate these malicious scores.

Finally, the investigation tool colors each attribute blue (unknown), green (benign), yellow (suspicious) or red

(malicious) based on the score. A big cluster of red attributes denotes that the original attribute is malicious.

4.2

Input module

The input module (
upload threat data via a web client (
(

,

,

,

,

in Fig. 2) handles all kinds of data incoming to CYBEX-P. Users can manually
) to the collector

) or automatically send machine data via a connector (

).
The collector automatically collects heterogeneous data from any source e.g. a firewall, an email forwarder etc.
Example methods for automatic data collection are – (1) by calling an API, (2) via a pre-configured websocket, (3)
by reading from a text file, (4) by reading from a database, (5) using Linux syslog protocol etc.

Afterwards, the collector posts the raw data to our API (

) endpoint. To ensure privacy, it uses the transport

layer security (TLS) protocol [16] during collection and posting.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

4.3 API module

The API module (
for all data into and out of CYBEX-P. It has two sub-modules –

in Fig. 2) consists of the API server (

,

) and the cache data lake (

CYBEX-P & TAHOE •

111:7

). It acts as the gateway

4.3.1 Data Input sub-module. The input module posts the raw data to the API (
the data with the public key of the archive server (

) endpoint. The API encrypts
).
We have placed the API in the demilitarized zone (DMZ) of our firewall, because it faces the internet. However,
storing data in the DMZ is somewhat risky. So, we encrypt the cache data lake with the public key of the archive
server. The archive server is in the inside zone. This design protects that data even if the DMZ is compromised.

) and stores the encrypted data in the cache data lake (

4.3.2 Report Publishing sub-module. A user can request different reports via the API. The API gets those reports
from the report DB (

) and presents them to the user. Thus, the API module acts as an interface for all data.

4.4 Archive module

,

in Fig. 2) resides in the archive cluster and consists primarily of a set of parsing scripts.
The archive module (
As mentioned earlier, the cache data lake (
). The
archive server – (1) gets the encrypted data from the cache data lake (2) decrypts the data using own private key
(3) parses the data into TAHOE, and (4) stores the data in the archive DB (

) is encrypted with the public key of the archive server (

).

4.4.1 Performance Challenge. The archive module potentially handles hundreds of different data formats from
thousands of sources. It is reconfigured every time CYBEX-P connects to a new data source. Moreover, it checks
each piece of new data against the entire database to determine if it’s a duplicate (explained in subsubsection
6.7.2).

4.4.2 Design Choices. To tackle these challenges, we have made the archive module separate so that we can
reconfigure it without affecting other modules. We have also placed it between two databases (cache data lake and
archive DB) so that we don’t lose any data when we reconfigure it. Finally, we have employed parallel computing,
because our data schema (TAHOE) considers each piece of data independent of another.

4.5 Analytics module

The analytics module (
It has various sub modules, some of which described here.

,

in Fig. 2) works on the archived data to transform, enrich, analyze or correlate them.

Filter sub-module. An analytics filter parses a specific event from raw user data. Multiple filters can act on
4.5.1
the same raw data and vice-versa. For example, one filter can extract a file download event from a piece of data
while another filter can extract a DNS query event from the same data. Filters are discussed in detail in subsection
5.5.

4.5.2 Enrich sub-module. A particular enrich sub-module can enrich an attribute with related data. For example,
we can enrich an URL with the host address. As before, multiple enrichment can be done on the same piece of
data.

4.5.3 Malicious Scoring sub-module. This is a specialized sub-module that assigns a malicious score to each piece
of data and periodically updates the scores. The novel scoring scheme is discussed in section 7.

4.5.4 Automated Defensive Rule Generation sub-module. This sub-module automatically generates defensive
rules (e.g. firewall or intrusion detection system rules) based on the malicious score of the attributes. The rules
are published as a feed for users to subscribe.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:8

• Sadique, et al.

4.5.5 Phishing URL Detection sub-module. This is another specialized sub-module that automatically detects
phishing URLs. We have trained a machine learning classifier with features of many labeled URLs. This sub-module
is further described in section 10.

4.6 Report Module

).
) and aggregating

CYBEX-P is unique in storing cyberthreat data as graphs where the vertices are attributes (e.g. an IP) or events (e.g.
an email). This allows CYBEX-P to correlate the data and generate insightful reports. Here, we briefly introduce
the report module (

in Fig. 2).

,
Users request reports via the frontend client (

,

,

,

,

,

,

). The API (

) stores the requests in the cache data lake (

The report server (
them into reports. It then stores the reports in the report DB (

) handles those requests by getting relevant data from the archive DB (

). Users can access the reports on demand.

The incident investigation tool, described in subsubsection 4.1.1, is also part of the report module. It provides

an interactive graph to explore relationships between different attributes and events.

5 DATA FLOW THROUGH ENTIRE LIFECYCLE

Fig. 1 shows the four major functions of CYBEX-P — (1) Data collection, (2) Data analysis, (3) Privacy Preservation,
and (4) Reporting. This section demonstrates how CYBEX-P achieves these functionalities by following the entire
flow of cyberthreat data through it.

5.1 Data Input

Users can manually upload threat data, like a spam email, through the frontend webapp (
configure the collector (
are directly posted to the API (

). Users can also
) to automatically collect data from machines like firewalls. Manually uploaded data

) whereas automatically collected data are handled by the collector.

,

5.2 Privacy Configuration of Data

The frontend further allows the user to attach an ACL to each piece of data. The ACL dictates which attributes
) both of which are at the
are encrypted. The encryption is done at the connector (
client premises.

) or the webapp client (

Although, CYBEX-P cannot access the encrypted attributes, it can still correlate them to generate reports.
Users can also share the encryption keys with trusted people. 6.4 and 8 explain the novel correlation mechanism
and the encryption scheme respectively.

5.3 Data Collection

Fig. 4. Data Collection in CYBEX-P.

Automatically collected data is forwarded to the collector (

). The API encrypts the data with the public key of the archive cluster (

) over an encrypted channel (TLS). Afterwards, it
) and stores

posts the data to the API (
the encrypted data in the cache data lake (

).

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

The cache data lake acts like a queue or buffer for all incoming data. It also increases security by removing the

need for API and archive cluster to communicate directly.

We encrypt the cache data lake with the public key of the archive cluster as the cache data lake is in the

demilitarized zone (DMZ). So, the data remains secured even if all the servers in DMZ get compromised.

5.4 Data Archiving

CYBEX-P & TAHOE •

111:9

Fig. 5. Data Archiving in CYBEX-P.

The archive cluster (

), then pulls the data from the cache data lake (

converts them to TAHOE format and stores them in the archive database (
on TAHOE data. TAHOE is discussed in detail in 6.

), decrypts the data using its private key,
). All further anlaysis are performed

5.5 Data Analytics

The analytics cluster (
archive database (
the archive database.

) transforms, analyzes and correlates data. It achieves that by reading data from the
) and writing the processed the data back in

), processing the data in the analytics cluster (

Fig. 6. Data Analytics in CYBEX-P.

This is a continuous process as highlighted by a pair of circular arrows between

and

in Fig. 6. It also is

the basis for data correlation in CYBEX-P.

For example, consider Fig. 7 where 3 filters 𝐹 1, 𝐹 2, 𝐹 3 act on a data 𝐷0 to produce 𝐷1, 𝐷2, 𝐷3. An example of

such filtering is extracting the source IP, destination IP and destination port from a firewall log.

Now, 𝐷2 is further filtered by 𝐹 5 to create 𝐷5. On the other hand, 𝐷00 passes through 𝐹 4 and 𝐹 5 to produce
the same attribute 𝐷5. As a direct consequence of how TAHOE works, 𝐷0 and 𝐷00 are now connected to each
other in a graph via 𝐷5. This is a very powerful notion in TAHOE, and we use this to assign malicious scores to
new events in 7.

5.6 Data Reporting

The data pipeline for requesting a report to CYBEX-P is: User ⇒ Frontend client (
) ⇒ Report cluster (
API (

) ⇒ Cache data lake (

).

) ⇒ frontend server (

) ⇒

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:10

• Sadique, et al.

Fig. 7. Data Filtering as a continuous process.

Fig. 8. Data Reporting in CYBEX-P.

A report can be as simple as counting the occurrence of a particular IP address within a specific time range; on
the other hand a report can be as complex as analyzing the attributes of an URL to determine if it is malicious
or benign. Nevertheless, the report cluster stores all the reports in the report database. The user can access the
reports as follows: User ⇒ frontend (

) ⇒ Report database (

) ⇒ API (

).

,

Note that, the overall process of requesting and getting a report is asynchronous.

6 TAHOE — A CYBERTHREAT LANGUAGE

TAHOE is a cyberthreat language (CTL). It structures threat data as JavaScript Object Notation (JSON) [10]
documents.

Earlier version of CYBEX-P used STIX [9] and MISP [41], presently two of the most popular CTLs. In this

section, we introduce TAHOE as a better alternative to traditional CTLs like STIX and MISP.

6.1 TAHOE Data Instance

A piece of TAHOE data is called an instance and there are 5 types of TAHOE instances —

6.1.1 Raw. A raw data instance stores unprocessed user data.

6.1.2 Attribute. The most basic datatype that holds a single piece of information, like an IP address.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:11

6.1.3 Object. Groups several attributes together, e.g., a file object may have a filename and a size attribute.

6.1.4 Event. An event consists of one or more attributes or objects along with a timestamp. Events
structure attributes or objects into complete threat data (e.g. an email) .

6.1.5 Session. A session keeps track of arbitrarily related events (e.g. events recorded when a user visits a
website).

6.2 Data Structured as Graphs

TAHOE structures data as graphs, where the nodes are instances. This structure is explained below.

Fig. 9. A TAHOE ip Attribute; _hash also serves as id.

Fig. 9 shows a TAHOE ip attribute. Each TAHOE instance (attribute, object, event etc.) has a _hash
property calculated as the the SHA256 [17] digest of all other fields and serves as the unique id for that instance.
Here, for example, it is the SHA256 of the <itype,sub_type,data> tuple (truncated).

Fig. 10. A TAHOE file Object as a graph.

Fig. 10 shows a TAHOE file object with 2 attributes. As seen, the file object does not include the actual
filename and filesize (bytes), rather references them in the _ref field. So, its complete representation includes
these attributes in the outermost array. Objects can also refer other objects if required.

The _ref field essentially makes the data a graph with 3 nodes (0xA2.., 0xA3.., 0xB2..) and 2 edges

(0xA2.. ← 0xB2.., 0xA3.. ← 0xB2..).

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:12

• Sadique, et al.

Fig. 11. A TAHOE file_download Event (truncated)
as a graph of objects and attributs.

Fig. 11 shows a truncated TAHOE file_download event with 2 objects. This event refers 2 objects –
0xB1.. (Fig. 10) and 0xB2... So, both the objects and their attributes must be included in the array (truncated
in figure). Events can also refer attributes directly. _malicious_score and _mal_ref are explained in 7.

Figure 12 shows the visual representation of the event graph with 6 nodes and 5 edges. Note, how the event
contains complete information on a file_download event just by referring to a source object and a file
object. Benefits of this graphical structure are justified in 6.4.

Fig. 12. Visual representation of a TAHOE event (green) as a graph of objects (red) and attributes (yellow).

Note that, we draw the edges as arrows because of how edge data is stored in _ref. However, in TAHOE

database, a graph can be traversed from both end, as explained in 6.7.6.

Finally, A TAHOE session is an arbitrary grouping of related events. This allows us to group together events
based on any condition the user desires. The session in Fig. 13 groups 3 events, recorded while 𝑢𝑠𝑒𝑟 1 was logged
in.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:13

Fig. 13. Events grouped by arbitrary session parameter.

6.3 Events Viewed as Nested Documents

Though, TAHOE structures events as graphs, they can be viewed as nested documents. Fig. 14 shows the general
visualization of a TAHOE event as a nested document, while Fig. 15 shows the event from Fig. 12 as a nested
document.

Fig. 14. A Generic TAHOE event visualized as a nested document.

Fig. 15. Event 0xE1.. from Fig.12 as a nested document.

As described in subsection 6.2, objects can refer other objects. That means objects can be infinitely nested

as presented in 14. This allows TAHOE to store arbitrarily complex data.

An analyst can choose to view an event as a document or as a graph depending on her need. For all kinds of

machine analysis (e.g query), however, the graphical structure of Fig. 12 is more suitable.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:14

• Sadique, et al.

6.4

Intrinsic Correlation of Graphical Data

Traditional CTLs, like STIX and MISP, store threat data as documents. Fig. 16 shows part of a typical firewall
log. Each row is an event with 7 attributes; traditionally stored as a document. It is cumbersome to analyze
because the events lack any direct correlation with own attributes.

Fig. 16. Firewall log (as documents) is a clutter.

TAHOE, on the other hand, represents data as graphs like in Fig. 17. Here, two separate events are automatically

connected by their common attribute (1.1.1.1) in TAHOE.

Fig. 17. Transforming two events from (a) separate documents to (b) TAHOE graph reveals apparent correlation.

Such ‘intrinsic correlation’ is a powerful feature of TAHOE, because if someone looks up example.com she will
immediately see that virus.exe is related to it. This is a major strength of our investigation tool (subsubsection
4.1.1). Moreover, we leverage this feature to formulate a novel malicious event detection mechanism in section 7.

6.5 Representing Complex Data & Supporting Fast Query

Traditional CTLs make a trade-off between representing complex data and fast query. For example, MISP stores
data in a relational database (RDBMS) for fast queries. However, RDBMSs do not support arbitrary data structures.
So, MISP structures data in only 2 layers – attribute & event, as shown in Fig. 18.

Fig. 18. MISP stores data in 2 layers for fast queries but has to create non-intuitive attribute types as a result.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:15

The problem is, to fetch all emails to and from doe@example.com, one has to perform 2 queries – email-src
= doe@example.com and email-dst = doe@example.com. For the same reason, MISP has to specify cumber-
some attribute types like passenger-name-record-locator-number or non-intuitive attribute types like
filename|md5, filename|sha224, filename|sha256 etc.

On the other end of the spectrum, we have TAXII [13], which structures data as STIX. TAXII by default stores
data in a NoSQL database (MongoDB), to support arbitrary data structures. However, there are hundreds of threat
data types (IP, email address, URL etc.), while only 64 types can be indexed in MongoDB. Querying un-indexed
data takes more than hours in a reasonably sized TAXII server, making it practically unfeasible.

TAHOE tackles these challenges by employing a set of novel techniques. Firstly, TAHOE can store arbitrarily
complex data because TAHOE objects can refer other objects, as depicted by 𝑛 objects in Fig. 19. In other
words, TAHOE objects are infinitely nested, as shown in Fig. 14.

Fig. 19. A TAHOE event refers all subsequent nodes.

Secondly, a TAHOE event refers all subsequent nodes up to the leaf, not only the next node. This is depicted
in Fig. 19, by the edges – event → object n and event → attribute. As a result, any TAHOE event is always
1 database query away from it’s attributes no matter the level of nesting.

Finally, TAHOE databases do not have to index all attribute types, rather just 2 fields – (1) the _hash field to

lookup an attribute and the _ref to lookup related events. This is explained in detail in 6.7.4.

Fig. 20. A TAHOE email event as a nested document.

Now, going back to the example of Fig. 18, we can structure an email in TAHOE as Figures 20 and 21. Note
that both the source and destination email addresses are stored in TAHOE email attributes, not two different
attributes like MISP. So, fetching all emails to and from doe@example.com will take only one query. Moreover,
as all the events connected to doe@example.com are zero hop away, the query is fast.

6.6 Threat Data Query Language (TDQL)

TAHOE aims to standardize the structuring of threat data in terms of attributes, objects, events and
sessions. This would allow users to query threat data using those terms. An example query could be fetch all

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:16

• Sadique, et al.

Fig. 21. A TAHOE email event as a graph.

events which include the attribute 1.1.1.1. At present this is not possible because event or attribute
are not standardized terms for any existing database. For example, if a person queries an SQL database for events
it would not know what to return, because event is not a standard term for SQL.

To that end, we have developed a universal threat data query language (TDQL) for TAHOE. TDQL acts as a
layer between a database and a user. Additionally, TDQL is tailor made for threat data and addresses their nuances.
While SQL depends on the structure of database tables, TDQL speaks in terms of attributes, objects, events
etc. So, irrespective of the data storage or delivery protocol, a user can always fetch any threat data from any
database.

Additionally, having a dedicated TDQL makes TAHOE, database-independent. However, detailed documentation

of TDQL is beyond the scope of this research work.

6.7 Features of TAHOE

6.7.1 Data Normalization. TAHOE normalizes different formats of same type of data. Consider two firewalls
from two different vendors. Their log data will be formatted differently despite having same type of data. TAHOE
normalizes such differences by converting them into the same structure.

6.7.2 Data De-duplication. TAHOE prohibits duplicate data. For example, there can only be one instance of
the IP 1.1.1.1 in a TAHOE database. This saves CYBEX-P a lot of storage by not storing the same IP in different
events. TAHOE achieves this de-duplication of data by creating a globally reproducible hash of the data.

Fig. 22. Edges are stored as hashes of child document.

6.7.3 Database Independence. Although TAHOE is a graph based CTL we did not use a graph database as a
container for TAHOE. In other words, all the information, including the edge data, of a TAHOE graph is stored in
the JSON documents of the TAHOE instances, as shown in Fig. 22.

Furthermore, as described in 6.6 we have developed a universal threat data query language (TDQL) to commu-

nicate with any TAHOE storage. These two contributions make TAHOE a database-independent CTL.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:17

6.7.4 Optimized for Indexing. Consider a query to find all events that include a particular IP. Traditionally,
one has to index the IP field of all events. This creates 3 problems —

(1) Not all events has the IP field, so the indexing will be inefficient.
(2) There are hundreds of attribute types (e.g. URL, email, IP etc.), all of which cannot be indexed. For

example, only 64 fields can be indexed in MongoDB.

(3) Some attributes have very large values. For example, a ‘comment’ attribute can be larger than 1024

bytes which is the limit placed by MongoDB.

In TAHOE, however, we would first query the IP node using its _hash. Next, we would get the related events
by querying the edge array (_ref) of all events. Consequently, we only need to index the edges and _hash fields,
not the actual attribute values. Since both the _hash and _ref fields are 256 bits long, indexing them does not
violate any database limits.

Fig. 23. TAHOE id and edges are globally unique and reproducible, making them collision free.

6.7.5 Globally Unique & Reproducible Data for Conflict-free Sharing. TAHOE data are globally unique
and reproducible. As shown, in Fig. 23, the IP 1.1.1.1 has the same unique id (its hash) in two different
organizations. Consider, Org 1 shares Event 1 with Org 2. If Org 2 had a different id for 1.1.1.1 it would have
to update the edge array of Event 1. But, as hashes are reproducible yet unique, this is not required.

Note that, event hashes include a timestamp. As a result, two separate events will have different hashes even

if they have the same attributes.

6.7.6 Bidirectional Edges for Versatile Queries. TAHOE edges are bidirectional. As seen in Fig. 23, edge
data is stored in the event only. This is because, an IP like 8.8.8.8 (public DNS) can potentially get connected to
millions of events. If we store the hash of all these events in the IP attribute, it would result in an unbounded
growth of its edge array. So, we store the edge info in the events. However, it takes only one pass over the
database, to get all events that have a particular hash in their edge array. So, the edges are bidirectional for all
intents and purposes.

7 THREATRANK TO DETECT MALICIOUS EVENTS

Earlier in subsection 6.4 we introduced how TAHOE intrinsically correlates data. Here, we extend upon it by
formulating an algorithm, called ThreatRank, to assign a malicious score to each event in a TAHOE database.
The score essentially sorts the events from most malicious to least malicious. In 9.4 we justify this algorithm
with real data.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:18

• Sadique, et al.

Consider, A = {𝑎1, 𝑎2, ..., 𝑎𝑚 } is the set of all attributes and E = 𝑒1, 𝑒2, ..., 𝑒𝑛 is the set of all events. E𝑚𝑎𝑙 ⊆ E
is the set of known malicious events. We define I𝑚𝑎𝑙 = {𝑘 | 𝑒𝑘 ∈ E𝑚𝑎𝑙 }. We want to determine the ThreatRank
(TR) of a new event 𝑒𝑝 .

We define 𝑤𝑖,𝑗 = {𝑒𝑖, ..., 𝑎𝑥, 𝑒𝑦, 𝑎𝑧 ..., 𝑒𝑝 } as the 𝑗𝑡ℎ path from 𝑒𝑖 to 𝑒𝑝 . Note that, the path encounters attributes

and events in an alternating fashion and has distinct nodes.

Then the contribution of 𝑤𝑖,𝑗 to the ThreatRank of 𝑒𝑝 is calculated using the recurrence equation—

𝑇 𝑅𝑤𝑖,𝑗 [𝑘] = 0.998

𝑑𝑘−1 ×

𝑇 𝑅𝑤𝑖,𝑗 [𝑘 − 1]
𝐿(𝑤𝑖,𝑗 [𝑘 − 1])

(1)

where, 𝑇 𝑅𝑤𝑖,𝑗 [1] = −1; 𝑑𝑘 = 0 for an attribute and for an event, 𝑑𝑘 is the number of days passed since the

event 𝑒𝑘 was recorded; 𝐿(𝑥) is the degree of node 𝑥.

Assume, there are 𝑡𝑖 paths from 𝑒𝑖 to 𝑒𝑝 . We define the set W = {𝑤𝑖,𝑗 | 𝑖 ∈ I𝑚𝑎𝑙 ; 𝑗 ∈ [1, 𝑡𝑖 ]}. W basically includes
all the paths from all known malicious events to the new event. The total ThreatRank of 𝑒𝑝 is then calculated as
—

𝑇 𝑅(𝑒𝑝 ) =

𝑇 𝑅𝑤 [𝑡𝑖 ]

∑︁

𝑤 ∈W

(2)

Algorithm 1 lists the pseudocode for ThreatRank. The code is written using TAHOE terminology.

7.1 Why 0.998?
We multiply the ThreatRank of each event by 0.998𝑑𝑘 . Here, 𝑑𝑘 is the number of days passed since the event 𝑒𝑘
was recorded. The value 0.998 is chosen such that after 1 year an event is half as significant (0.998365 = 0.48) as a
recent event (0.9980 = 1). The same event is only one-fourth as significant (0.998730 = 0.23) after two years.

7.2 Who Classifies Malicious Events & Edges?

Malicious events or edges can be manually classified in three ways — (1) by CYBEX-P admin after analysis
(2) by user voting (3) automatically for some data. For example, an IP that tries to connect to a honeypot, is
automatically classified as a malicious IP in this context.

8 DATA GOVERNANCE & PRIVACY PRESERVATION

CYBEX-P offers a robust data governance mechanism with granular access control of data. Here, we discuss the
‘attribute based access control’ protocol of CYBEX-P.

8.1 Data Model and Privacy Parameters

CYBEX-P converts any incoming data into a TAHOE event. Fig. 24 shows an event with two attributes – an
IP and a file (filename). Assume, the data owner Org 2 wants to share the file with everyone but not the IP.

Fig. 24. Data owner determines if an attribute is public or private.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:19

Input : E, E𝑚𝑎𝑙
Function getRelated(node)

if node.type = “event" then

return node._ref

end
related ← []
for event in E do

if node in event._ref then
related.append(node)

end

end
return related

end
Function findPaths(src, dest, currentPath)

if src = dest then

return currentPath

end
related ← getRelated(src)
paths ← []
for r in related do

if r in currentPath then

continue

end
paths.append(findPaths(r, dest, currentPath+[r]))

end
return paths

end
Function threatRankPath(path)

tr ← −1
for node in path do

L ← degree(node)
d ← 0
if node.type = “event" then
d ← node.daysOld

end
tr ← tr × 0.998**d / L

end
return tr

end
Function threatRank(newEvent)
allPaths ← [], TR ← 0
for event in E𝑚𝑎𝑙 do

allPaths.append(findPaths(event, newEvent, []))

end
for path in allPaths do

TR ← TR + threatRankPath(path)

end
return TR

end

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

Algorithm 1: ThreatRank

111:20

• Sadique, et al.

8.2 Public Attribute (Not Encrypted)

Data owner Org 2, first, converts the document into a TAHOE event as shown in Fig. 25. Here, 0xABC is the
hash of the IP 1.1.1.1, 0xDEF is the hash of the file virus.exe, 0x123 is the hash of the event itself, and acts as
the event id. The hashes of the attributes are placed in the edge array creating a graph. Note that, we use the
term edge to denote the _ref array from 6.2.

Fig. 25. Event data in TAHOE format before encryption.

Threat Model. The data owner Org 2 trusts all participants of CYBEX-P with the public attribute virus.exe.

Fig. 26. Public Data Query.

Public Data Query. Now, assume a user wants to get all the events with the file virus.exe. She first generates
the hash of virus.exe as 0xDEF. Then she looks up the database for events that have 0xDEF in the edge array.
She will get the event 0x123 in return.

8.3 Private Attribute Encryption

To protect the private attribute, Org 2 encrypts its hash 0xABC with secret to generate the ciphertext 0x789, as
shown in Fig. 27. The owner can use any symmetric encryption technique of choice although TAHOE recommends
AES256.

Fig. 27. Event data in TAHOE format after encryption.

Threat Model. The data owner Org 2 does not trust anybody including CYBEX-P with the private attribute
1.1.1.1.

Private Data Query. Now, a user wants to fetch all the events with the IP 1.1.1.1. She first generates the
hash of IP 1.1.1.1 as 0xABC. Then she queries the database for events that have 0xABC in their edge array.
However, the database will return nothing, because the value 0xABC is not present in any event edge. Org 2 has
essentially encrypted the graph edge.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:21

Fig. 28. Private Data Query.

8.4 Private Attribute Sharing

At this point, Org 2 wants to share the private attribute 1.1.1.1 with Org 3. To achieve this, Org 2 shares the
secret with Org 3. CYBEX-P facilitates this sharing by providing a key management system (KMS) (
in Fig. 2).

Threat Model. Org 2 trusts Org 3 and wants to share 1.1.1.1 with Org 3. However, Org 2 does not trust
CYBEX-P or any other user. Org 2 shares the encryption secret with Org 3 using CYBEX-P KMS.

Fig. 29. Private Data Query by Trusted Party.

Private Data Query. Now, Org 3 wants to fetch all events with the IP 1.1.1.1. She first generates the hash of
1.1.1.1 as 0xABC. Then she encrypts the hash with secret to generate the ciphertext 0x789. Finally, she queries
the database for events that have 0xABC or 0x789 in the edge array. The database will return the event 0x123
along with public events which include 1.1.1.1. Note that, this query still makes one pass over the database.

Private Data Correlation. A powerful feature of CYBEX-P is intrinsic correlation of data as described in 6.4.
What makes TAHOE even more powerful is that, the intrinsic correlation mechanism works on encrypted data
as well.

As explained in subsubsection 8.4, an authorized user can query encrypted data without revealing its value.
The query performs a graph traversal, returning a complete graph of all the related attributes and events.
This graph contains all the intrinsic correlations described in 6.4.

9

IMPLEMENTATION AND EXPERIMENTAL EVALUATION

We have implemented CYBEX-P for experimental evaluation, with 5 data sources, along with 4 instances of
MongoDB and 4 servers to house the different modules. We have collected about 314 billion events from several
sources.

9.1 Sources

The sources we used for our demonstration are:

(1) Cyberthreat intelligence (CTI) from University of Nevada, Reno’s MISP [41] instance.
(2) SSH login attempts collected by four different instances of ‘cowrie’ honeypot [29].
(3) Firewall log data from our honeypot system.
(4) Feed of phishing URLS from Phishtank [4].
(5) Feed of phishing URLS from OpenPhish [3].

9.2 Complexity & Scalability

To test the scalability of CYBEX-P, we have fed 300000 lines of iptables firewall log into it. Then we have recorded
the time taken to process 𝑁 log messages. We have measured the time taken from input to storing in the archive
DB as TAHOE events. A line of best fit is drawn among the data points. The result is shown in figure 30.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:22

• Sadique, et al.

Fig. 30. Evaluation of Complexity

It can be inferred from the test that the overall complexity is linear. Furthermore, each log message can be
processed independent of the other. This makes the system suitable for horizontal scaling using distributed
computing paradigms.

9.3 Data Compression by TAHOE

As discussed in 6.7.2, TAHOE de-duplicates data, meaning there is only one instance of the IP 1.1.1.1 in our
TAHOE database. Furthermore, events never store the actual value of an attribute, only a reference to it. The
reference is the SHA256 hash of the attribute and only takes 32 bytes of storage. So, if an attribute is repeated in
another event, TAHOE takes only 32 bytes of extra storage. As a result, TAHOE automatically achieves significant
data compression as showed in Fig. 31.

Fig. 31. Data Compression in TAHOE

As seen in Fig. 31, initially the compression gain is below 100%. However, as the percentage of repeated
attributes grows so does the compression gain. Here, TAHOE achieves a compression gain of 10.7% for only
about 11 thousand pieces of raw threat data, collected from our Cowrie honeypots.

9.4 ThreatRank Verification by Case Study

In section 7 we have formulated an algorithm called ThreatRank (TR) to detect malicious events. Here, we verify
this algorithm. using the ‘Intrusion Kill Chain’ [23] dataset from Lockheed Martin.

Intrusion Kill Chain and Correlation. Authors of [23] formulated the 7 phases of an intrusion kill
9.4.1
chain (also known as cyber kill chain) – (1) Reconnaissance, (2) Weaponization, (3) Delivery, (4) Exploitation, (5)
Installation, (6) Command and Control, (7) Actions. It is desirable to detect an attack in an early phase.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:23

In their case study, their are 3 related intrusion attempts. The first attempt delivered a malicious file via email.
Although, at first the email looked benign, it was later flagged as malicious because it had a malicious attachment.
Note that, by that time the attack has already passed phase 3 undetected.

The next two intrusion attempts also delivered malicious files via emails. However, both these emails had
similarities with the first email. As a result, the defenders could detect the attack even before analyzing the
malicious files.

In other words, the defenders detected these two attempts in phase 3, not later, because the emails are correlated.

Fig. 32 shows the common attributes in these emails as a TAHOE graph.

Fig. 32. Three emails from three separate intrusion attempts are intrinsically correlated in TAHOE because of common
attributes.

9.4.2 Automatic Intrinsic Correlation by TAHOE. While the correlations in Fig. 32 are trivial, it is impossible
for defenders to manually analyze all emails. TAHOE automates the process by intrinsically correlating the 3
emails based on their common attributes as shown in Fig. 32.

However, correlating them is only half the battle. The correlation must be quantified before alerting the analysts.

That is where ThreatRank steps in.

9.4.3 ThreatRank to Quantify Correlations. We assume that email 1 has already been flagged as malicious
in TAHOE database. So, we assign a fixed ThreatRank (TR) of 1 to email 1 and mark the two edges in Fig. 32 as
malicious. Then we simulate ThreatRank on the graph to get the results in Table 1. We have also added a benign
email called email 4 to the TAHOE database. email 4 shares no common attribute with any of the emails
1,2,3.

Table 1. ThreatRank of 4 emails calculated on 3 dates

Email

arrival2

arrival3

arrival1 + 365

email 1

email 2

email 3

email 4

−1
−0.18
N/A

0

−1
−0.15
−0.08
0

−1
−0.07
−0.03
0

Here, arrival1 is the date of arrival of email 1 and arrival1 + 365 is one year later. Note that, email 1 has fixed
ThreatRank of −1 because it is already analyzed by an analyst. ThreatRank is calculated for unknown events
only. Also, in the dataset email 2 arrives 1 day after email 1 and email 3 arrives 20 days after email 1.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:24

• Sadique, et al.

email 2 has a TR of −0.18 while email 3 has a TR of −0.08 on respective arrival day. email 3 has a lower TR
because email 2 is directly connected to email 1, whereas email 3 is one hop away from email 1. Also, as
expected their TR becomes almost half after a year. For all the simulations, TR of email 4 remains 0 because it
shares no common attributes with the other emails.

10 CYBEX-P INFRASTRUCTURE AS A SERVICE (IAAS) FOR PHISHING URL DETECTION

As described in sections 1 and 2, existing information sharing platforms have limited or zero support for data
analysis. Our vision for CYBEX-P is to provide Infrastructure as a Service (IaaS) for all kinds of threat analysis.
To augment this claim we have developed Phishly - a real-time phishing URL detector [32] using CYBEX-P
infrastructure. A phishing attack aims at stealing user information via deceptive websites.

10.1 System Architecture

Fig. 33. System Architecture of the Phishing URL Detection system

Fig. 33 shows the system architecture of this system. As it uses CYBEX-P’s infrastructure, it is explained using

CYBEX-P components from Fig. 2.

Here, Phishtank.com stores raw URLs (

) to share the URLs. Note that
) calls that API periodically
). The
). The analytics
) enriches the URLs with 5 sets of features. The feature sets are described in 10.3. The analytics cluster

Phishtank’s API is the connector from CYBEX-P’s perspective. CYBEX-P collector (
to get new URLs and post them to the CYBEX-P API (
archive cluster (
cluster (
also trains a classifier model.

) parses the raw URLs into TAHOE events and stores them in the archive DB (

). CYBEX-P API puts them in the cache datalake (

in Fig. 2). It provides an API (

On the other hand, a user can input an URL via the frontend (

,

this URL, as benign or phishing, using the previously trained model. The report cluster (
of the classification label, and stores it in the report DB (

). The report is shown to the user via the frontend.

) webapp. The analytics cluster classifies
) creates a report out

10.2 Dataset
We have collected about 36, 000 phishing URLs from Phishtank. We have also collected approximately 60, 000
benign URLs from Phishtank which were previously reported as suspicious but later analyzed to be benign. On

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:25

the other hand, several previous works [27, 33] used web crawling to generate benign URLs out of highly ranked
websites only. This approach often results in a biased dataset. Our benign URL dataset is better aligned with the
real world.

10.3 Features

We extract five types of features from each URL: lexical, host, GeoIP, domain WHOIS and n-gram. Each feature
set is described below:

10.3.1 Lexical Features. Lexical features are based on the URL string itself. Several examples of typical lexical
features are number of characters in the URL, number of dots in the URL and number of symbols in the URL.

10.3.2 Host Based Features. Host based features are based on the server that hosts the webpage. The simplest
such feature is the IP address that the URL resolves to.

10.3.3 Domain WHOIS Based Features. Any Regional Internet Registry (RIR) like ARIN or APNIC maintains it’s
own domain WHOIS database that contains information on the domain registrant. It contains the name of the
registrant, the registration date, the expiration date etc. We query these data using RDAP [22] protocol to get the
domain WHOIS features.

10.3.4 GeoIP Based Features. GeoIP features are obtained from the IP address of the host. We used the GeoLite2
[2] IP geolocation databases from MAXMIND to collect various GeoIP features of the host IP address. GeoIP
features include autonomous system number (ASN), country, city, latitutde, longitude etc.

10.3.5 N-gram Features. An n-gram is a continuous sequence of n characters from the URL. Phishing URLs often
contain common brand names (like Microsoft, Paypal) to confuse the visitor. We catch those names using the
URLs n-gram.

10.4 Online Classification

For this work, we have chosen the Second Order Perceptron (SOP) online classifier from the package LIBSOL [43].
We have chosen an online classifier, because we collect new training URLs everyday. It is impossible to retrain
our entire model with the total dataset because the dataset grows in an unbounded manner. The training model
of the online classifier can be updated with only the new URLs without retraining it from the beginning. We have
also compared the accuracy of SOP with batch random forest (RF) classifier from the package scikit-learn [30].

10.5 Result

Fig. 34 shows the change in the accuracy and the ‘receiver operating characteristic - area under the curve’ (ROC
AUC) with growing sample size, for our system. As seen in the figure, for a sample size of 57 thousand, batch
RF achieves an accuracy of 0.91 or 91% with a ROC AUC of 90%. Online SOP, on the other hand, achieves an
accuracy of 86% for a sample size of about 96 thousand. However, we still choose the online SOP because batch
RF cannot deal with the unbounded growth of the URL dataset.

It can also be interpreted from the figure that the accuracy of our classifier will increase in future, as we get

new data, because the curve has not become parallel to the x-axis yet.

11 CONCLUSION & FUTURE WORK

In this paper, we have proposed CYBEX-P, as a completely automated cybersecurity information sharing (CIS)
platform. We have also introduced TAHOE – a graph based cyberthreat language (CTL), to overcome the
limitations of existing CTLs. Moreover, we have introduced a universal Threat Data Query Language (TDQL) to
facilitate sharing. Furthermore, we have formulated a novel algorithm called ThreatRank to detect malicious

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

111:26

• Sadique, et al.

Fig. 34. Accuracy & ROC AUC vs Sample Size

events. We have also tested the scalability and feasibility of CYBEX-P in a real world setup. Finally, we have
showed how to use CYBEX-P infrastructure as a service (IaaS) with a phishing URL detection module. Our future
goals for CYBEX-P are:

(1) Sequential analysis of related events (by timestamp).
(2) Real-time anomaly detection in a sequence of events.
(3) Provide cyber-insurance based on CYBEX-P.
(4) Detecting malicious actors who intentionally share bad data.

12 ACKNOWLEDGMENTS
ACKNOWLEDGMENTS

This research is supported by the National Science Foundation (NSF), USA, Award #1739032.

REFERENCES

[1] [n.d.]. EclecticIQ. URL: https://www.eclecticiq.com/ (accessed 13.04.2020) ([n. d.]).
[2] [n.d.]. GeoLite2 Free Downloadable Databases. https://dev.maxmind.com/geoip/geoip2/geolite2/. [Online; accessed 19-September-2019].
[3] [n.d.]. OpenPhish. http://www.openphish.com. Accessed: 2019-11-22.
[4] [n.d.]. Phishtank. http://www.phishtank.com. Accessed: 2019-10-30.
[5] [n.d.]. S.2588 - Cybersecurity Information Sharing Act of 2014, Congress.gov, Library of Congress.
[6] [n.d.]. S.2717 - Cyber Information Sharing Tax Credit Act of 2014, Congress.gov, Library of Congress.
[7] AlienVault. [n.d.]. The open source siem. URL: https://www.alienvault.com-/products/ossim (accessed 25.06.2017) ([n. d.]).
[8] Anomali. [n.d.]. ThreatStream. URL: https://www.anomali.com/products/-threatstream (accessed 13.04.2020) ([n. d.]).
[9] Sean Barnum. 2012. Standardizing cyber threat intelligence information with the Structured Threat Information eXpression (STIX).

MITRE Corporation 11 (2012), 1–22.

[10] Tim Bray. 2014. The javascript object notation (json) data interchange format. (2014).
[11] Eric W Burger, Michael D Goodman, Panos Kampanakis, and Kevin A Zhu. 2014. Taxonomy model for cyber threat intelligence
information exchange technologies. In Proceedings of the 2014 ACM Workshop on Information Sharing & Collaborative Security. 51–60.

[12] David Chismon and Martyn Ruks. 2015. Threat intelligence: Collecting, analysing, evaluating. MWR InfoSecurity Ltd (2015).
[13] Julie Connolly, Mark Davidson, and Charles Schmidt. 2014. The trusted automated exchange of indicator information (TAXII). The

MITRE Corp. (2014).

[14] Luc Dandurand and Oscar Serrano Serrano. 2013. Towards improved cyber security information sharing. In 2013 5th International

Conference on Cyber Conflict (CYCON 2013). IEEE, 1–16.

[15] José M de Fuentes, Lorena González-Manzano, Juan Tapiador, and Pedro Peris-Lopez. 2017. Pracis: privacy-preserving and aggregatable

cybersecurity information sharing. Computers & Security 69 (2017), 127–141.

[16] Tim Dierks and Eric Rescorla. 2008. The transport layer security (TLS) protocol version 1.2. (2008).
[17] Morris J Dworkin. 2015. SHA-3 standard: Permutation-based hash and extendable-output functions. Technical Report.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

CYBEX-P & TAHOE •

111:27

[18] Charles Edwards, Samuel Migues, Roger Nebel, and Daniel Owen. 2002. System and method of data collection, processing, analysis, and

annotation for monitoring cyber-threats and the notification thereof to subscribers. US Patent App. 09/950,820.

[19] Daniel Feledi, Stefan Fenz, and Lukas Lechner. 2013. Toward web-based information security knowledge sharing. Information Security

Technical Report 17, 4 (2013), 199–209.

[20] Roberto Garrido-Pelaz, Lorena González-Manzano, and Sergio Pastrana. 2016. Shall we collaborate? A model to analyse the benefits of

information sharing. In Proceedings of the 2016 ACM on Workshop on Information Sharing and Collaborative Security. 15–24.

[21] Cristin Goodwin, J Paul Nicholas, J Bryant, K Ciglic, A Kleiner, C Kutterer, A Massagli, A Mckay, P Mckitrick, J Neutze, et al. 2015. A

framework for cybersecurity information sharing and risk reduction. Microsoft (2015).

[22] Scott Hollenbeck and Andrew Newton. 2015. Registration Data Access Protocol (RDAP) Query Format. RFC 7842. IETF. https:

//tools.ietf.org/html/rfc7482

[23] Eric M Hutchins, Michael J Cloppert, and Rohan M Amin. 2011. Intelligence-driven computer network defense informed by analysis of

adversary campaigns and intrusion kill chains. Leading Issues in Information Warfare & Security Research 1, 1 (2011), 80.

[24] IBM. [n.d.]. X-Force. URL: https://www.ibm.com/security/xforce (accessed 13.04.2020) ([n. d.]).
[25] Facebook Inc. [n.d.]. ThreatExchange. URL: https://developers.facebook.com/-programs/threatexchange (accessed 13.04.2020) ([n. d.]).
[26] Piotr Kijewski and Paweł Pawliński. 2014. Proactive detection and automated exchange of network security incidents. Abgerufen am 20

(2014).

[27] Mohammad Saiful Islam Mamun, Mohammad Ahmad Rathore, Arash Habibi Lashkari, Natalia Stakhanova, and Ali A Ghorbani. 2016.

Detecting malicious urls using lexical analysis. In International Conference on Network and System Security. Springer, 467–482.

[28] B McConnell. 2011. and The Department of Homeland Security, Enabling Distributed Security in Cyberspace: Building a Healthy and

Resilient Cyber Ecosystem with Automated Collective Action.

[29] Michel Oosterhof. 2014. Cowrie honeypot. Security Intelligence (2014).
[30] Fabian Pedregosa, Gaël Varoquaux, Alexandre Gramfort, Vincent Michel, Bertrand Thirion, Olivier Grisel, Mathieu Blondel, Peter

Prettenhofer, Ron Weiss, Vincent Dubourg, et al. 2011. Scikit-learn. Journal of machine learning research 12 (2011).

[31] Threat Intelligence Platforms. [n.d.]. ThreatConnect, Inc. URL: http://www.informationweek.com/whitepaper/(access date 21.02.2017)

([n. d.]).

[32] Farhan Sadique, Raghav Kaul, Shahriar Badsha, and Shamik Sengupta. 2020. An Automated Framework for Real-time Phishing URL

Detection. In 2020 10th Annual Computing and Communication Workshop and Conference (CCWC). IEEE, 0335–0341.

[33] Ozgur Koray Sahingoz, Ebubekir Buber, Onder Demir, and Banu Diri. 2019. Machine learning based phishing detection from URLs.

Expert Systems with Applications 117 (2019), 345–357.

[34] Tomas Sander and Joshua Hailpern. 2015. UX aspects of threat information sharing platforms: An examination & lessons learned using

personas. In Proceedings of the 2nd ACM Workshop on Information Sharing and Collaborative Security. 51–59.

[35] Clemens Sauerwein, Christian Sillaber, Andrea Mussmann, and Ruth Breu. 2017. Threat intelligence sharing platforms: An exploratory

study of software vendors and research perspectives. (2017).

[36] Vinod Sharma, Genevieve Bartlett, and Jelena Mirkovic. 2014. Critter: Content-rich traffic trace repository. In Proceedings of the 2014

ACM Workshop on Information Sharing & Collaborative Security. 13–20.

[37] Christian Sillaber, Clemens Sauerwein, Andrea Mussmann, and Ruth Breu. 2016. Data quality challenges and future research directions
in threat intelligence sharing practice. In Proceedings of the 2016 ACM on Workshop on Information Sharing and Collaborative Security.
65–70.

[38] Deepak Tosh, Shamik Sengupta, Charles Kamhoua, Kevin Kwiat, and Andrew Martin. 2015. An evolutionary game-theoretic framework

for cyber-threat information sharing. In Communications (ICC), 2015 IEEE International Conference on. IEEE, 7341–7346.

[39] Iman Vakilinia, Deepak K. Tosh, and Shamik Sengupta. 2017. Privacy-Preserving Cybersecurity Information Exchange Mechanism. In

Performance Evaluation of Computer and Telecommunication Systems (SPECTS), 2017 International Symposium on. IEEE.

[40] Diego Fernández Vázquez, Oscar Pastor Acosta, Christopher Spirito, Sarah Brown, and Emily Reid. 2012. Conceptual framework for
cyber defense information sharing within trust relationships. In 2012 4th International Conference on Cyber Conflict (CYCON 2012). IEEE,
1–17.

[41] Cynthia Wagner, Alexandre Dulaunoy, Gérard Wagener, and Andras Iklody. 2016. Misp: The design and implementation of a collaborative
threat intelligence sharing platform. In Proceedings of the 2016 ACM on Workshop on Information Sharing and Collaborative Security.
49–56.

[42] George D Webster, Zachary D Hanif, Andre LP Ludwig, Tamas K Lengyel, Apostolis Zarras, and Claudia Eckert. 2016. SKALD: a scalable
architecture for feature extraction, multi-user analysis, and real-time information sharing. In International Conference on Information
Security. Springer, 231–249.

[43] Yue Wu, SC Hoi, and Nenghai Yu. 2016. Libsol: A library for scalable online learning algorithms. SMU Technical Report (SMU-TR-2016-

07-25) (2016).

[44] Wanying Zhao and Gregory White. 2012. A collaborative information sharing framework for community cyber security. In Homeland

Security (HST), 2012 IEEE Conference on Technologies for. IEEE, 457–462.

ACM Trans. Comput. Syst., Vol. 36, No. 4, Article 111. Publication date: June 2020.

