IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

1

Block Hunter: Federated Learning for Cyber Threat
Hunting in Blockchain-based IIoT Networks

Abbas Yazdinejad, Ali Dehghantanha, Senior Member, IEEE, Reza M. Parizi, Senior Member, IEEE, Mohammad
Hammoudeh, Senior Member, IEEE, Hadis Karimipour, Senior Member, IEEE, Gautam Srivastava, Senior

Member, IEEE

2
2
0
2

r
p
A
1
2

]

R
C
.
s
c
[

1
v
9
2
8
9
0
.
4
0
2
2
:
v
i
X
r
a

Abstract—Nowadays, blockchain-based technologies are being
developed in various industries to improve data security. In the
context of the Industrial Internet of Things (IIoT), a chain-based
network is one of the most notable applications of blockchain
technology. IIoT devices have become increasingly prevalent in
our digital world, especially in support of developing smart
factories. Although blockchain is a powerful tool, it is vulnerable
to cyber attacks. Detecting anomalies in blockchain-based IIoT
networks in smart factories is crucial in protecting networks and
systems from unexpected attacks. In this paper, we use Federated
Learning (FL) to build a threat hunting framework called Block
Hunter to automatically hunt for attacks in blockchain-based
IIoT networks. Block Hunter utilizes a cluster-based architecture
for anomaly detection combined with several machine learning
models in a federated environment. To the best of our knowledge,
Block Hunter is the ﬁrst federated threat hunting model in IIoT
networks that identiﬁes anomalous behavior while preserving
privacy. Our results prove the efﬁciency of the Block Hunter in
detecting anomalous activities with high accuracy and minimum
required bandwidth.

Index Terms—Federated Learning, Anomaly Detection, Threat

Hunting, Blockchain, Industrial Internet of Things, IIoT, IoT.

I. INTRODUCTION

T HE technological trajectory of blockchain makes it a

valuable tool in many areas, including healthcare, mil-
itary, ﬁnance and networking, via its immutable and tamper-
proof data security advantages. With the ever-increasing use
of Industrial Internet of Things (IIoT) devices, the world is
inevitably becoming a smarter interconnected environment;
especially factories are becoming more intelligent and efﬁcient
as technology advances [1]. IIoT is considered a subcategory
of the Internet of Things (IoT). There are, however, differences
between IoT and IIoT in terms of security requirements. While
the IoT makes consumers’ lives easier and more convenient,
the IIoT aims to increase production safety and efﬁciency. IIoT

A. Yazdinejad and A. Dehghantanha are with the Cyber Science
Lab, University of Guelph, Canada, email: ayazdine@uoguelph.ca, ade-
hghan@uoguelph.ca

R. M. Parizi is with the College of Computing and Software Engineering,

Kennesaw State University, GA, USA, email: rparizi1@kennesaw.edu

M. Hammoudeh is with Information & Computer Science Department,
King Fahd University of Petroleum & Minerals, Saudi Arabia email:
M.Hammoudeh@kfupm.edu.sa

H.Karimipour, is with the School of Engineering, Department of Electrical
and Software Engineering at the University of Calgary, Alberta, Canada.
email: hadis.karimipour@ucalgary.ca

G. Srivastava is with the Department of Math and Computer Science,
Brandon University, Manitoba, Canada as well as with the Research Centre for
Interneural Computing, China Medical University, Taichung, Taiwan. email:
srivastavag@brandonu.ca

devices are mainly used in B2B (business-to-business) settings,
while IoT devices are mostly considered in B2C (business-to-
consumer) environments. This would lead to a different threat
proﬁle for IIoT networks compared to their IoT counterparts
where device-to-device transactions are of utmost importance.
IIoT networks provide an umbrella for supporting many
applications and arm us to respond to users’ needs, especially
in an industry setting such as smart factories [1]. Blockchain
technology advantages lead to its wide adoption in IIoT-
based networks such as smart factories, smart homes/buildings,
smart farms, smart cities, connected drones, and healthcare
systems [1], [2]. While the focus of this paper is on the security
of blockchain-based IIoT networks in smart factories [3], [4],
the suggested framework may be used in other IIoT settings
as well.

In modern smart factories, many devices are connected
to the public networks, and many activities are supported
by smart systems such as temperature monitoring systems,
Internet-enabled lights, IP cameras, and IP phones. These
devices are storing private and sensitive data and may offer
safety-critical services [3], [1]. As the number of IIoT devices
in smart factories increases, the main issue will be storing,
collecting, and sharing data securely. Industrial, critical, and
personal data are therefore at risk in such a situation.
Blockchain technology can ensure data integrity inside and
outside of smart factories through strong authentication and
ensure the availability of communication backbones. Despite
this, privacy and security issues are signiﬁcant challenges in
IIoT [3], [4]. The probability of fraudulent activity occurring
in blockchain-based networks [2], [4] is an important issue.
Even though blockchain technology is a powerful tool, it is not
protected from cyber attacks either. For example, a 51% cyber-
attack [2] on Ethereum Classic, and three consecutive attacks
in August of 2020 [5], which resulted in the theft of over $5M
worth of cryptocurrency, have exposed the vulnerabilities of
this blockchain network.

Smart factories should protect users’ data privacy during
transmission, usage, and storage [4]. Stored data are vulnerable
to tampering by fraudsters seeking to access, alter or use
the data with malicious motives. Statistically speaking, these
attacks can be viewed as anomalous events, exhibiting a strong
deviation from usual behavior [2], [6]. Detecting out-of-norm
events are essential for threat hunting programs and protecting
systems from unauthorized access by automatically identifying
and ﬁltering anomalous activities. [6], [7].

The main objective of this paper is to detect suspicious

 
 
 
 
 
 
IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

2

users and transactions in a blockchain-based IIoT network
speciﬁcally for smart factories. Here, abnormal behavior serves
as a proxy for suspicious behavior as well [4]. By identifying
outliers and patterns, we can leverage Machine Learning (ML)
algorithms to identify out-of-norm patterns to detect attacks
and anomalies on blockchain. Because deep neural networks
learn representations automatically from data that they are
trained on,
they are the candidate solution for detecting
anomalies [4], [7]. However, there are challenges with any
ML and deep learning-based anomaly detection techniques.
These methods suffer from training data scarcity problems,
and privacy issues [7].

Detecting anomalies in the blockchain is a complicated
issue [8]. Not only each block needs to be sent to a central
server, which increases the training time, but also the model
requires new block data in the testing phase [8]. In addition,
when ML models are frequently updated to respond to new
threats and detect anomalies, malicious adversaries can launch
causative/data poisoning attacks to degrade the ML model
deliberately. Attackers may intentionally send crafted payloads
to evade anomaly detection.

A novel and practical approach would be to employ Feder-
ated learning (FL) models to detect anomalies while preserving
data privacy, and monitoring data quality [7], [9]. FL allows
edge devices to collaborate during the training stage while all
data stays on the device. We can train the model on the device
itself instead of sending the data to another place, and only
the updates of the model are shared across the network.

FL has become a trend in ML where smart edge de-
vices can simultaneously develop a mutual prediction between
each other [7], [10]. In addition, FL ensures multiple actors
construct robust machine learning models without sharing
data, addressing fundamental privacy, data security, and digital
rights management challenges. Considering these characteris-
tics, this paper uses an FL-based anomaly-detection framework
called Block Hunter capable of detecting attack payloads in
blockchain-based IIoT networks.

The main contributions of the paper are summarized as

follows:

1) Utilize a cluster-based architecture to formulate an
anomaly detection problem in blockchain-based smart
factories. The cluster-based approach increase hunting
efﬁciency in terms of bandwidth reduction and through-
put in IIoT networks.

2) Apply a federated design model to detect anomalous
behaviour in IIoT devices related to blockchain-based
smart factories. This provides a privacy-preserving fea-
ture when using machine learning models in a federated
framework.

3) Implementation of various anomaly detection algorithms
such as clustering-based, statistical, subspace-based,
classiﬁer-based, and tree-based for efﬁcient anomaly
detection in smart factories.

4) The impact of block generation, block size, and miners
on the Block Hunter framework are considered. More-
over, the performance measurements like Accuracy, Pre-
cision, Recall, F1-score, and True Positive Rate (TPR)
anomaly detection are discussed.

Here is a breakdown of the rest of the paper. Section
II discusses anomaly detection works in the blockchain and
FL. Section III describes the Block Hunter framework and
presents the network model and topology design. In Section
IV, methodology and machine learning approaches to identify
anomalies are discussed. In Section V, we present the assess-
ment of the Block Hunter framework. Finally, In Section VI,
we conclude the paper and point out future work directions.

II. RELATED WORK

In the face of increasing cybersecurity threats and enlarging
attack surfaces, it is becoming more complex and challenging
to secure IIoT networks and environments [11], [12]. Further-
more, as blockchain technology is increasingly applied in a
broad range of ﬁelds, anomaly detection is becoming more
and more important. Anomalies can thus occur in a wide
range of blockchain-based applications. This section discusses
research relating to anomaly detection, especially in relation
to blockchain and FL.

In [13],

the authors proposed a framework as BAD to
detect anomalies in blockchain-based systems. BAD collects
potential malicious activities using blockchain meta-data and
has interesting features like distribution to avoid the cen-
tral point of failure, trust, and privacy. Another work, [14],
suggests blockchain and anomaly detection systems that rec-
ognize frauds when IoT meter data is tampered with. This
research uses polynomial regression, DBSCAN, autoencoder,
and LSTM methods to detect tampering.

The research by Sayadi et al. [15] proposes an algorithm for
anomaly detection over bitcoin electronic transactions. They
examined the One-Class Support Vector Machines (OCSVM)
and the K-means algorithms to group outliers similar in
both statistical signiﬁcance and type. They analyzed their
work by generating detection results and found that we
could obtain high-performing results on accuracy. In [16],
the authors suggested an approach based on the semantics
of anomalies in blockchain-based IoT Networks. A method
was presented to detect anomalous behavior in blockchain that
gathers metadata in forks to determine mutual informational
recognition of anomalous activity. They developed a tool that
improves blockchain security and connected devices. Also, in
[17], has introduced encoder-decoder deep learning regression
for detecting blockchain security. This work developed an
anomaly detection framework that relies on aggregate infor-
mation derived from bitcoin blockchain monitoring. Their
experiments have demonstrated that their model can detect
publicly reported attacks using the historical
logs of the
Ethereum network.

Investigation in blockchain shows blockchain Edge of
Things (BEoT) can enable future services and applications,
according to [18]. The authors discuss the latest developments
and applications of BEoT. Their ﬁndings show that blockchain
technology has grown inquisitive beyond cryptocurrency in
the Edge of Things (EoT) as it provides decentralization,
immutability, and traceability, in EoT systems.

The ﬁeld of FL is undergoing several new kinds of research.
The article cited in [7] provided the FL approach to anomaly

IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

3

detection in smart buildings that FL with additional recurrent
neural networks is proposed as a privacy-by-design approach.
It shows that it is more than twice as fast during training
as its centralized counterpart. They were able to achieve
superior performance in both classiﬁcation and regression
responsibilities compared to baseline methods. Also, in [19],
Nguyen et al. presented a self-learning federated system for
detecting anomalies in IoT networks. Their system is based on
device communication proﬁles that can detect adverse changes
in IoT devices’ communication. It employs FL for efﬁciently
aggregating behavior proﬁles. It was one of the ﬁrst systems to
employ this approach to anomaly detection. Since this system
can handle emerging new threats, it can be used to handle a
wide variety of threats.

The authors of [20] put forward an approach via FL
for detecting abnormal client behavior. The ability to detect
anomalous client behaviour at the server level is mentioned in
their paper. They detected abnormalities across networks using
low-dimensional surrogates of model weight vectors. Experi-
mentally, the detection-based method signiﬁcantly outperforms
the conventional methods based on defence. Furthermore,
there is a work [21] involving the use of Deep Learning and
blockchain-based FL to detect COVID-19. They develop a
framework to gather data from various sources and generate a
global deep learning model using blockchain-based federated
training. By using blockchain to authenticate the data, FL
enables models to be trained while preserving privacy. By
combining blockchain with federated e-learning, they devel-
oped a system for training global models collaboratively. Their
results show better performance in detecting patients via this
method.

Chai et al. [22] proposed a hierarchical blockchain frame-
work and FL to learn and share environmental data. This
framework is functional and efﬁcient for large-scale vehicular
networks. FL-based learning meets the Internet of Vehicles’
distributed pattern and privacy requirements. Sharing behavior
is modeled as a multi-leader, multi-player trading market pro-
cess to stimulate knowledge sharing. Simulated results indicate
that an algorithm based on hierarchical structures can enhance
sharing, learning, and managing speciﬁc malicious attacks.
Furthermore,
the authors in [23] deliver a comprehensive
investigation on how FL could supply better cybersecurity and
prevent various cyberattacks in real-time. This work highlights
some main challenges and future directions on which the
researchers can focus for adopting FL in real-time scenarios.

III. PROPOSED BLOCK HUNTER FRAMEWORK IN

BLOCKCHAIN-BASED IIOT NETWORKS

its smart devices. A transaction represents the exchange of
sensitive factory information between parties during working
in the blockchain network. There are several inputs and outputs
in a transaction. Blocks consist of a list of transactions, a
reference to the previous block, and a hash. Every block is
made up of transactions that the block creator, referred to as
the miner, has accepted into its memory pool from the previous
block. Considering rigid industrial standards that should be
followed when designing and implementing smart factories, it
is practical to assume that the functionality of smart factories
in each cluster is the same.

Fig. 1. Overview of the blockchain-based IIoT network for smart factories

Detecting anomalous activities is a signiﬁcant contributor
to automatically protecting a system from unexpected attacks.
Anomalies in blockchain must be detected by sending each
block of data to a central server for each block update. This is
not efﬁcient and also imposes privacy concerns. FL solutions
are promising in tackling this issue. We use FL to update the
model frequently and to obtain a global model for detecting
an anomaly. After learning about each smart factory’s data,
devices, and service provider, the model’s parameters will be
sent to the parameter server for aggregation and to update our
general model. We provide the details of implementing the
Block Hunter framework in the following sub-sections.

Fig. 1 presents a detailed overview of

the proposed
blockchain-based IIoT network for smart factory applications.
This cluster-based architecture combines users, base stations,
WiFi, service providers, and smart factories connected to the
blockchain network. Smart factories include several smart-
connected devices. The service provider can collect sensor data
in smart factories and use them based on their applications and
services. In addition, Fig. 1 illustrates the relationship between
the peers in terms of information between the factory and

A. Role of FL to detect anomalies in Block Hunter

We distribute local models across the blockchain-based IIoT
network instead of learning an anomaly detection model and
the
evaluating it on a single node. As shown in Fig. 2,
FL setup involves local models as well as distributed smart
factories nodes. Instead of a centralized learning environment,
K smart factories learn a local model
in an FL manner.
The k = 1, . . . , K local models have the same structure,
they are trained with different datasets that originate
but

IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

4

from their connected clients. Our proposed federated anomaly-
detection algorithm for smart factories in IIoT networks is
shown in Algorithm 1. C represents the batch size for the
global operation; B determines the local batch’s size; a factor
of k indexes the K smart factories; E indicates the number of
local epochs, and h represents the rate of learning. Initializing
begins the process of initializing the model parameters. During
the training step, FedAvg [24] is sent to smart factories and
updates the model. Finally, our updated trained model can be
tested to detect any anomalies.

initial local models ()

Get (local models)
For local epoch E

For each batch 1 to b
Run local models

Algorithm 1 Federated anomaly-detection model
1: Input: Pre-trained model
2: Output: Global anomaly-detection model
3: Initializing: (t = 0) // start to set values
4:
Parameter server update (W )
5:
Deﬁne initial values = B, E, h, C, K
6:
7:
Model (mi) = set parameters (w1, . . . , wn )
8:
Client model update
9:
Local models→ smart factories’ clusters
10: Federated Training: // beginning FL method
11:
While (K > 0)
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26: FedAvg:
27:
28:
29:
30:
31:
32:
33:

Decrypted (w,m)
D = split Data into batches of size B
for local epoch E from 1 to B do
for batch x <= B do

Server: Send wt−1 to Smart factory i − 1
E = E + 1

// model aggregation
Server ( Initialize w0 )
encryption (Homomorphic)

Return (Model parameters)
Parameter server = FedAvg (w)

Parameter server = Update (wk−1, . . . , wk )

Obtain and set model parameters

for round c = 1 to k do

return w and D to server

P = compute loss (w, b)

Return updated Model

Update (w, m)

Fig. 2. Proposed Federated Anomaly-detection in Block Hunter framework

Based on Algorithm 1, the parameter server starts the FL
scheme at t = 0, initializing local models with the ﬁrst set
of weights. Next, these local models are downloaded from the
parameter server to each of the k = 1, . . . , K smart factory.
Third, using the corresponding blockchain datasets’ training
data, each of the E = 1, . . . , E local models computes in
parallel a new local set of weights. Finally, the parameter
server aggregates the weights in each client’s local model to
create an improved global model using weighted averaging
(weighted average). Each time the cycle repeats, a new epoch
is initiated until a certain stop criterion has been reached.
According to McMahan, we utilize the same design policy for
FL as he does [24], [25]. They develop the FL problem as a
federated optimization problem by distributing the model, m t
to (a subset of) K clients of the learning federation at time t0.
To summarize, steps for FL in the Block Hunter framework
are categorized:

• Federation Construction: The subset of smart factory
members, cluster, selected to receive the model locally.
• Decentralized Training: When a cluster of smart facto-
ries is selected, it updates its model using its local data.
• Model Accumulation: Responsible for accumulating and
merging the data models. Data is not sent and integrated
from the federation to the server individually.

• Model Aggregation (FedAvg): Parameter server ag-
gregates model weights to compute an enhanced global
model.

At runtime, pre-trained models as local models are sent
to clusters in the Block Hunter framework from the Pa-
rameter server, considering blockchain-based IIoT networks
environments. The local models are sent to smart factories

for training based on local epochs. Then the parameters and
hyperparameters will be forwarded to the Parameter Server
for aggregating model weights to compute the global model.
The global model is an ML model that holds in the Parameter
Server to update its parameters. When a new cluster joins our
framework, the latest global model will send to that cluster as
a pre-train model that in the real-world application, we can
simply follow this approach. The updated global model is sent
to clusters gradually during evolution.

B. Anomaly Detection in blockchain-based IIoT network

Smart factories have sensitive data, so storing it on the
blockchain with its limited storage is both ﬁnancially and
computationally costly. Therefore, the actual smart device and
sensor data are stored in the smart factory. The smart factory
data includes information about the type of data and control
states as well.

The premise behind the development of an anomaly de-
tection framework for the blockchain-based IIoT networks in
smart factories lies in providing a new decentralized system
based on FL that leverages all smart factory data while pro-
tecting their privacy. Additionally, we will reach a point where
we need to attend to the issue of a fork in the blockchain scope
during anomaly detection. In some instances, devices or nodes
do not agree on the state of the blockchain, leading to the fork
issue in the blockchain. When blockchain-based applications
are being developed, forks become more concerned because
they have the potential to be used for malicious purposes.
Indeed, a global ML model can use all of the collected
information from previous forks to detect anomalies during
training. This approach has the advantage that while attacks
may only happen once within a smart factory, they behave
the same way when repeated against other smart factories
over time. Hence, information on past attacks may help us
blacklist them and prevent them from occurring in the future.
The advantage of FL is clear since it will train the global ML
model for anomaly detection.

IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

5

Based on Fig. 1, each participant in a smart factory can
provide a fake blockchain transaction as a side-channel to
deliver a message. A malicious transaction, as well as creating
a fake block, are also possible in this situation. A malicious
transaction is a special type of fake transaction, which consists
of a hidden message which is aimed at disrupting the network
by hitting a speciﬁc peer. Inserting fake blocks are blockchain
blocks that contain one or more stolen/malicious transactions.
Fake blocks can either be eventually discarded or accepted
into the mainstream chain.

Our solution considers smart factories’ data and chain forks.
We collect, enrich, and share such information with other
local ML models across the network. We used the speciﬁc
information for training anomaly detection in each local ML
model that contains sensitive smart factory data, the features
of previous forks, and the number and type of malicious
transactions that occurred. As a result, we can hunt an anomaly
by Block Hunter in a blockchain-based IIoT network for smart
factories. To protect the privacy of the data, we only share the
parameters of trained models instead of the original data from
smart factories and their blockchain. This work aims to train
a global anomalous detection model through locally trained
sub-protocol models based on the Block Hunter framework.

Regarding the threat model, the solution proposed in this
paper has been designed to be resilient against any class of
attacks where a malicious entity can append to the blockchain
system.

C. Network model and topology design

This section discusses the efﬁcient network model and
topology design for blockchain-based IIoT networks. Wireless
sensor networks have a variety of topologies, which affect
their performance and behavior. Some of the metrics include
throughput, reliability, energy consumption, and latency [26].
Therefore, we propose blockchain technology’s cluster-based
formation model for smart factories. Cluster-based architecture
provides more efﬁcient use of resources [27] and throughput
during the blockchain run in each smart factory. Clustering
reduces the computational complexity in the creation of the
underlying network through a hierarchical approach [26]. It
is especially so with blockchain-based IIoT networks that are
expected to encompass large numbers of individual devices.
Also, we believe that cluster-based architecture will enable us
to hunt and manage anomalies better in each smart factory
zone and increase the network’s throughput.

In each cluster, the smart factory controls all IIoT devices’
activities, and one of the smart factories is usually known as
Cluster Head (CH) or a leader node. A CH can perform extra
duties in blockchain-based networks like taking part in the
mining process by reviewing aspects such as energy, memory,
and computing power. Fig. 1 shows the clustering strategy in
the blockchain-based smart factory network model.

Based on the target Block Hunter framework, which can
be represented as a directed graph G = (S, D) with D
being the set of IIoT devices, representing smart devices,
D = {d1, d2, . . . , dn}, and S = {s1, s2, . . . , sn} is the set of
smart factories in each cluster. In S1T = [t1, t2, . . . , tm], we

consider the set of transactions in smart factory S1 that belongs
to the blockchain network. B = [b1, b2, . . . , b3] represents the
number of existing blocks in the blockchain network. More
formally, sn = (cid:83)k
j sj × Dkj, with k being the number of
deployed clusters, and j is smart factories in that cluster. It
should be noted that the set of IoT devices refer to a smart
factory, Dkj ∈ [1, j] in the K th cluster.

It is possible to summarize the distribution of smart factories
with their devices in the Block Hunter, the proposed cluster-
based architecture, in Equation 1, distance function, Df. This is
the point at which smart factories and IoT devices will cluster
based on most centrality derived from a distance measure
based on the presence or absence of shared neighboring
devices in the space of (i, j).

Df (Dki, Dkj) =

(cid:118)
(cid:117)
(cid:117)
(cid:116)

K
(cid:88)

(Snj − Sni)2 × (Dkj − Dki)2

(1)

i,j=1

is shown in Algorithm 2, and it can
The clustering part
be considered a piece of the overall algorithm in the Block
Hunter. Algorithm 2 collects the locations of smart factories
and their IIoT devices. Based on Equation 1, we measure each
smart factories’ distance and their devices and record it until
we obtain the cluster-based architecture. Afterward, the cluster
calculates a collection of S nearest smart factories for each IoT
device, D.

Get = (S, D)

Deﬁne initial values
Set Number of Cluster = K
Get loc = S = {s1 , s2, . . . , sn} // location of smart factories
Get loc = D = {d1, d2, . . . , dn } // location of devices
sn = (cid:83)k

Algorithm 2 Cluster formation strategy in Block Hunter
1: Input:
2:
3: Initialize:
4:
5:
6:
7:
8:
9: Main():
10:
11:
12:
13:
14:
15:

j sj × Dkj //Deployed clusters and smart factories

Get (K, S, D)
While( K > 0)
{

Comput = Df z

For z each K

(cid:80)K

(Dki , Dkj ) =

(cid:114)

i,j=1

(Snj − Sni)2 × (Dkj − Dki )2 //Calculating dis-

tance for ﬁnding neighboring devices. The presence or absence of devices in the space of (i, j)

Set area = Kz
Client distance update
Marge neighbor

16:
17:
18:
19:
20: Return K

}

Setting model parameters in the parameter server and send-
ing pre-trained models to clusters happen during initializing.
Next, local models are trained by clusters in the training step
to aggregate models and update the global model parameters.

IV. METHODOLOGY

In this section, we study several machine learning tech-
niques for identifying and detecting anomalies in the Block
Hunter framework.

A. Neural Encoder-Decoder (NED) model

An example of a classiﬁer-based anomaly detection algo-
rithm is the neural encoder-decoder model. The proposed
anomaly detection framework develops a neural encoder-
decoder model that summarizes the information about the

IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

6

blockchain’s status and transactions and then rebuilds the
initial data from this space. Encoding/decoding preserves the
data’s basic properties when the current status is consistent.
Differently, anomalous situations exhibit inconsistent values,
ultimately leading to a failing reconstruction. In an encoder-
decoder, this quantity would be paraphrased as noise and
therefore would be failing when reconstructing. Therefore, the
difference between the initial and reconstructed values would
highlight the anomalous and abnormal situation, thereby trig-
gering an alert [8], [28]. Neural encoder-decoder models ana-
lyze sequences of temporally sorted events. In general, we sup-
pose that the data will be sequenced as P = {P1, P2, . . . , Pn}
concerning some period of observation, where Pt is an assess-
ment of the properties of the tth event in the chronological
order of events in P . Anomalous events occur in P , i.e. a
vector Pt drastically various from its neighbors Pt.

B. Isolation Forest

The Isolation Forest (IF) model falls under the Tree-based
anomaly detection algorithms category. The approach has
gained much universal acceptance in recent years because it is
unsupervised. Isolation forest is a concept based on the idea
that it’s more prudent to isolate data anomalies rather than
generalize the norms. It’s a recursive and random partitioning
process to isolate the anomalous data point in the dataset
until
it simply describes the stored data. A tree structure
represents the recursive partition. A forest of isolation trees
is the foundation of the isolation forest algorithm, where cells
in the dataset are randomly selected from the data to form
a forest of normal and outlier cells. These trees are binary
trees that have zero or two child nodes, and an isolation forest
contains isolation trees of this type [8], [29]. Consider that X
is either a leaf node that does not have any children or a parent
node that has two children named XL and XR. To choose
which child nodes belong to which parents, a test must be
attached to node X. The testing procedure involves selecting
a random feature f across all the data points and an arbitrary
splitting point q. Node f < q is in the zone of XL, and f ≥ q
is in the zone of XR.

C. Cluster-Based Local Outlier Factor

Our cluster-based local outlier factor (CBLOF) model be-
longs to the classiﬁer-based algorithm-based anomaly detec-
tion category. Our cluster-based local outlier factor (CBLOF)
model belongs to the classiﬁer-based algorithm-based anomaly
detection category. Within this algorithm’s anomaly detection
methodology, the data is clustered into clusters, based on
which anomaly scores can be computed similar to those of
the local outlier factor algorithm and so on. This algorithm’s
underlying principle of anomaly detection is based on cluster-
ing data sets together. This algorithm creates clusters using
groups in a dataset by arbitrary clustering algorithms that
assign a speciﬁc observation to a cluster. The clusters are
sorted in each case corresponding to their respective sizes of
|F1| > |F2| > . . . > |Fk| where F1, F2, . . . , Fk all represent
the cluster for which number k is the cluster number [8]. A
pair of clusters, when intersecting with each other, should give

rise to an empty set. However, all these clusters’ unions should
represent all of the observations in Dataset D. we are supposed
to search for a boundary index value that separates the Small
Clusters from the Large Clusters. Finally, we calculate the
CBLOF scores for each observation by using the following
equation, 1 ≤ i ≤ k:

CBLOF (t) =

(cid:40)

|F k|.dis(t, F i)
|F k|.min(dist(t, F i)

t ∈ Fi
t ∈ Fi,

(2)

D. Principal Component Analysis (PCA)

A PCA model is a subsequence-based anomaly detection al-
gorithm. PCA is commonly considered a method to reduce the
dimensionality algorithm. The variance-covariance of dataset
characteristics can be used to construct new variables known
as principal components, which are functions of original
variables. For principal component analysis, one uses p distinct
linear combinations of random variables x1, x2, . . . , xp. The
principal component has the following characteristics: they
are uncorrelated to each other. Each component’s variance
decreases in descending order, with the principal component
containing the highest variance and the subsequent details
having lower variances. When combining all the principal
components’ variations, the sum of the total variation of the
original features is always equal to the total variation of all the
principal components. To estimate the principal components
of a system, we can use eigenanalysis to get the correlation
matrix, or covariance matrix of data features [8], [30].

The PCA algorithm detects anomalies by getting rid of any
outliers. The outliers are determined by Mahalanobis distance
that is carried out repeatedly to eliminate all data points with
high Mahalanobis distance values. Where S is a covariance
matrix, xi is the measure of an observation of the ith feature
in data, and x is the mean of all observations, Mahalanobis
distance is denoted as follows:

(cid:113)

(Xi − X)T s−1(Xi − X)

D =

(3)

E. K-means

In the cluster-based detection algorithms category, K-means
is a clustering-based algorithm. As one of the most popular
clustering algorithms, K-means is also commonly used as
an anomaly detection algorithm. It has been introduced as
an unsupervised learning scheme. The data is divided into
k different clusters, with each sample belonging to the clus-
ter with the closest mean value within each cluster. Across
clusters, there is a cluster centroid c, which is the mean of
observations from each cluster in that cluster. When assessing
the similarities among independent observations, the similarity
measure employed is Euclidean distance, where xi
is the
measurements and ci
is the centroids, and n outlines the
number of independent measurements [8], [31].

d2 (X, c) =

k
(cid:88)

i=1

(Xi − ci)2

(4)

IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

7

V. DISCUSSION & EVALUATION
This section evaluates the performance of the Block Hunter

and provides results and discussion.

A. Experimental Setup

We formed an experimental setup on Intel(R) Core(TM) i7-
10700KF CPU @ 3.80GHz 3.79 GHz, Linux 64-bit operating
system (Ubuntu 20.04), and equipped it with 16 GB DDR4
memory. To evaluate our network model and cluster-based
topology design in the proposed framework, we apply Bit-
coin Simulator1. Bitcoin Simulator is an open-source bitcoin
simulator developed on NS3. The Bitcoin Simulator has been
tested with NS3. Also, we consider LENA as an NS-3 module
to simulate 3GPP networks. The NR module is a pluggable
module for NS-3 that can be used to simulate New Radio (NR)
cellular networks. NS-3 supports the widest variety of network
models and protocols and supports the greatest variety of
networking devices. Indeed, wireless networks and protocols
rely on the NS-3 to determine their performance. Therefore,
the assessment of the proposed federated framework will do
on the performance metrics such as the impact of block
size, number of blocks, number of IoT devices, and number
of miners. The implementation details of the Block Hunter
framework is presented in Table I.

TABLE I
FEDERATED FRAMEWORK PARAMETERS

Parameters
Simulators
Operating system
libraries
Number of Clusters
Optimization method
local epoch
Fraction of smart factories
Mobility model
Trafﬁc Type
Number of IoT devices
Block Size
Number of Miners
Local epochs in each cluster
Learning rate
Local mini-batch size
Federated approach

Description
Bitcoin simulator/ NS3 / 5G-LENA
Ubuntu 20.04
PySyft / Pythorch
50
SGD
E = 4
6e − 3
Random waypoint model
Constant Bit Rate (CBR)
5000
1 MB, 2 MB, 4 MB, 8 MB, 16 MB
16, 32, 64
4
3e − 2
15
FedAvg

For the federated setup, we have considered PySyft2 and
PyTorch3. PySyft is an open-source library that allows us
to create VirtualWorkers for training our machine learning
models to detect an anomaly. It is designed to allow users
to create a private and secure ML model, and it is built into
some existing ML libraries, such as PyTorch. Our framework
is trained with the FedAvg method with E = 4 local epoch
and fraction c = 6e − 3. E mentions to Local batch size
used at each learning iteration, and c refers to the number
of smart factories used at each iteration. It is also important
to emphasize e. The e is denoted exp, which is short for
exponential. Finally, an SGD optimizer is used for training
the models with a learning rate of 3e − 2.

B. Datasets

The proposed framework is evaluated by two datasets on the
blockchain side, providing conditions for blockchain adoption

1https://github.com/ctch3ng/Bitcoin-Simulator-NS3
2https://github.com/OpenMined/PySyft
3https://pytorch.org

in smart manufacturing systems, and also two IIoT-related
datasets for assessing BlockHunter for smart factories.

The Bitcoin Transaction Dataset (BTD)4 designed for re-
search on blockchain anomaly and fraud detection. It has been
donated to the IEEE data port online community for academic
exploration. Because the dataset is imbalanced and contains
roughly 30 million transactions, it presents a challenge in
creating an anomaly-detection model that captures all of them.
The dataset is an implementation of a research project that
presents anomaly detection within the context of blockchain
technology and its applications in the monetary domain. It
extracts blockchain data and uses machine learning techniques
to hunt potentially malicious transactions.

Another dataset is Ethereum Classic (ETC)5 that is a Big-
Query Dataset. We will be able to access Ethereum Classic
transactions and block history in this dataset. The Ethereum
Classic open-source, based on the Ethereum platform, is a
platform that enables distributed computing by using a public,
distributed decentralized network for executing scripts with
the ability to manage smart contracts. The dataset consists
of all blocks, contracts, logs, tokens, traces, and transactions
contained within the blockchain network.

In choosing IIoT related datasets, two well-known datasets
have been considered: Gas Pipeline (GP) and Secure Water
Treatment (SWaT). They are well ﬁt for the IIoT environments
and are publicly available [32], [33].

C. Experimental Analysis

A cluster-based architecture provides more efﬁcient use of
resources and throughput during the blockchain run in smart
factory applications. To evaluate the performance of the Block
Hunter, cluster-based architecture, the simulation parameters
are presented in Table I.To accomplish more realistic results,
we did the simulation 20 times and designed another sce-
nario as a non-cluster model to compare the architectural
models’ performance during the simulation. The non-cluster
model combined blockchain technology with the standard
network model and did not consider and divide it into cluster
architecture. It has no features and typologies of cluster-
based architecture such as adjacencies with other clusters or
part of the network, ﬂexibility, and scalability during run
time. Conversely, in cluster-based architecture, each cluster
has adjacencies with other clusters and supports the dynamic
characteristics of a network. In the following, we address the
impact of Block generation, the impact of the Block size,
and the impact of the number of miners in the evaluation.
In the proposed framework, the public blockchain network is
deployed among clusters that include smart factories. We need
a public blockchain to allow any smart factories to join and
keep the system completely decentralized. Additionally, public
blockchains give all participants equal access to the chain.

• Impact of the Block generation

Block generation interval is regarded as an important
metric for measuring the performance of blockchain
networks. If we have an organized topology and structure,

4https://ieee-dataport.org/open-access/bitcoin-transactions-data-2011-2013
5https://www.kaggle.com/bigquery/crypto-ethereum-classic

IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

8

(a) Impact of the Block generation on bandwidth consumption

(b) Impact of the Block size on bandwidth

Fig. 3. Cluster-based architecture evaluation

(c) Impact of the Block size on throughput

(d) Impact of number of miners

the block generation will be more efﬁcient to support
nodes than in a distributed network with a solid and
organized structure. Further, since blocks are generated
more frequently in individual clusters instead of gener-
ated in batches that consume a considerable amount of
bandwidth, we can better manage and use the bandwidth.
Fig. 3(a) shows the bandwidth efﬁciency of the cluster-
based design (proposed architecture) compared to the
non-cluster-based design.
Although there is an increase in block generation time
in the non-cluster-based design, more blocks will be
generated in the network and consume more and more
bandwidth. Hence, cluster-based architecture provides
better performance since the nodes are distributed across
the whole network (currently, there are 5000 reachable
nodes in K = 50 Clusters).

• Impact of the Block size

Block size has a signiﬁcant impact on the performance of
blockchain. The block size determines the highest number
of transactions that can be approved within a block. This
size, thus, controls the throughput (transactions/second)
obtained by the proposed design. Larger blocks cause
more sluggish propagation in each cluster than smaller
blocks. In Fig. 3(b) and Fig. 3(c), we show that the
bandwidth consumption and throughput
increase with
increasing block size from 0.5 MB to 8 MB. This
directly impacts both the bandwidth and throughput of the
proposed model. As expected, Block Hunter has a higher
performance because of better network communication,
efﬁcient topology management, and minimized delay.
• Impact of number of miners The number of miners in

a given architecture directly impacts throughput (trans-
actions/second). According to Fig. 3(d), an increasing
number of miners from 16 to 256 and the block size to 1
MB in all clusters increased the model throughput. The
increase in the number of miners makes it easier for smart
factories to reach a consensus. Additionally, the proposed
cluster-based architecture can handle more transactions in
each block by increasing the block size. Consequently, it
will grow the proposed architecture’s throughput rate and
offer better performance.

1) nomaly detection rate
This subsection aims to assess some well-known machine
learning models such as K-means, PCA, CBLOF, IF, and NED
to hunt anomalies in the Block Hunter framework. We evaluate
these models by comparing their average performance, such
as Accuracy, Precision, Recall, and F1-score as follows. These
include, Accuracy (Acc) =
T P +T N +F N +F P , Recall (Rec)
= T P
T P +F P and F1-score (F1) =
2∗T P
2∗T P +F N +F P .

T P +F P , Precision (Pre) = T P

T P +T N

Table II and III display the measured performance of the
Block Hunter during applying ML models, K-means, PCA,
CBLOF, IF, and NED in terms of Precision, Accuracy, F1-
score, and Recall based on Bitcoin Transaction and Ethereum
Classic Blockchain datasets. To minimize the loss function, all
hyperparameters are maximized.

In Tables II and III, we can see that NED and IF have
the highest accuracy during the anomaly detection while their
accuracy is almost similar. In addition, we reported the Area
Under the Curve (AUC) of Receiver Operating Characteristic
(ROC) as shown in Figs. 4(a), 4(b), 4(c), 4(d), and 4(e). The
ROC curves for CBLOF, K-means, PCA, IF, and NED are

IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

9

(a) The AUC of ROC curves for CBLOF

(b) The AUC of ROC curves for K-means

(e) The AUC of ROC curves for NED

(c) The AUC of ROC curves for PCA

(d) The AUC of ROC curves for IF

Fig. 4. AUC of ROC curves in FL framework for Block Hunter

TABLE II
PERFORMANCE COMPARISON OF THE ML MODELS BASED ON BITCOIN
TRANSACTION DATASET (BTD)

Model
NED
CBLOF
K-means
PCA
IF

Acc (%)
96.7%
82.4%
87.6%
89.4%
95.3%

Pre (%)
70.4%
55.5%
55.2%
64.2%
65.1%

F1 (%)
62.5%
78%
65.2%
76.2%
61.2%

Rec (%)
80.2%
66.1%
89.5%
76.2%
75%

TABLE III
PERFORMANCE COMPARISON OF THE ML MODELS BASED ON ETHEREUM
CLASSIC BLOCKCHAIN (ETC)

Model
NED
CBLOF
K-means
PCA
IF

Acc (%)
97.8%
85.6%
89.7%
91.6%
96.8%

Pre (%)
74%
60.2%
59.1%
70.3%
70.5%

F1 (%)
66.2%
82.1%
70.2%
81.3%
67.6%

Rec (%)
86.2%
72.1%
93.1%
82.1%
81.1v

presented in a federated setting.

By examining the visuals and using the highest level of
accuracy metric,the AUC for ROC curves show a comparable
ROC curve for all algorithms. The AUC for CBLOF, K-
means, PCA, IF, and NED are (0.80, 0.84), (0.82, 0.85),
(0.86, 0.89), (0.90, 0.93), and (0.95, 0.97) based on BTD and
ETC datasets, respectively. While running the Block Hunter
framework with each ML model, we obtain a global model
whose parameters are frequently updated via the FedAvg
approach [24]. Table IV presents the hunting of anomalies
in global models using NED as the local model. This table
shows the moment where the Block Hunter framework can
hunt an anomaly while doing transactions. This consists of
K = 30, 40, 50 clusters and 1 to 35 transactions per second

it

is almost certain that

for 100 seconds. Based on the cluster-based structure in Block
Hunter,
this system’s accuracy is
acceptable during anomaly hunting, as shown in Table IV. The
Block Hunter framework also works perfectly as the number
of transactions and clusters increases.

TABLE IV
ANOMALY HUNTING IN BLOCK HUNTER

Number of cluster
(K)
30
40
50
30
40
50

Existing anomaly

2
4
4
5
4
4

Max number of transactions
( per second )
35
35
35
70
70
70

Detected

2
4
4
4
3
4

We also evaluated the performance of Block hunter on
several IIoT standard datasets as shown in Table V. The model
performance was evaluated using different ML models namely
K-means, PCA, CBLOF, IF, and NED on GP and SWaT
datasets. NED has the highest accuracy as it preserves data
encoding/decoding.

Blockchain-based IIoT networks are the underlying tech-
nology for the future smart factories, hence an emerging
attack target, which shows the signiﬁcance of this work.
To the best of our knowledge, Block Hunter is the ﬁrst
federated threat hunting model in IIoT networks that identiﬁes
anomalous behavior while preserving privacy. We used FL to
build a threat hunting framework that utilizes a cluster-based
architecture to formulate an anomaly detection combined with
several machine learning models. Our results indicate the
superior performance of our model in automatically hunting
for anomalies while preserving data privacy.

IEEE TRANSACTIONS ON INDUSTRIAL INFORMATICS, 2022

10

TABLE V
SUMMARY OF PERFORMANCE COMPARISON OF THE BLOCK HUNTER IN
IIOT RELATED DATASETS

Datasets

GP

SWaT

Model
NED
CBLOF
K -means
PCA
IF
NED
CBLOF
K -means
PCA
IF

Acc (%)
99.1%
87.8%
89.5%
95.2%
96.8%
98.8%
85.9%
87.1%
92.1%
94.6%

Pre (%)
98%
82%
88%
90%
93%
97%
77%
78%
89%
95%

F1 (%)
99%
78%
90%
88%
94%
99%
78%
80%
88%
90%

Rec (%)
98%
70%
87%
89%
91%
99%
75%
76%
90%
92%

VI. CONCLUSION & FUTURE WORKS

In this paper, we developed the Block Hunter framework
to hunt anomalies in blockchain-based IIoT smart factories
using a federated learning approach. Block Hunter uses a
cluster-based architecture to reduce resources and improve the
throughput of blockchain-based IIoT networks hunting. The
Block Hunter framework was evaluated using a variety of ma-
chine learning algorithms (NED, IF, CBLOF, K-means, PCA)
to detect anomalies. We also examined the impacts of block
generation interval, block size, and different miners on the
performance of the Block Hunter. Using generative adversarial
networks (GAN) to design and implement a block hunter-
like framework would be an interesting future research work.
Furthermore, designing and applying IIoT-related blockchain
networks with different consensus algorithms would also be
worth investigating in the future.

REFERENCES

[1] J. Wan, J. Li, M. Imran, D. Li, and F. e Amin, “A blockchain-based
solution for enhancing security and privacy in smart factory,” IEEE
Transactions on Industrial Informatics, vol. 15, no. 6, pp. 3652–3660,
2019.

[2] F. Scicchitano, A. Liguori, M. Guarascio, E. Ritacco, and G. Manco,
“Blockchain attack discovery via anomaly detection,” Consiglio
Nazionale delle Ricerche, Istituto di Calcolo e Reti ad Alte Prestazioni
(ICAR), 2019, 2019.

[3] Q. Xu, Z. He, Z. Li, M. Xiao, R. S. M. Goh, and Y. Li, “An effective
blockchain-based, decentralized application for smart building system
management,” in Real-Time Data Analytics for Large Scale Sensor Data.
Elsevier, 2020, pp. 157–181.

[5] A.

[4] B. Podgorelec, M. Turkanovi´c, and S. Karakatiˇc, “A machine learning-
based method for automated blockchain transaction signing including
personalized anomaly detection,” Sensors, vol. 20, no. 1, p. 147, 2020.
mess
VeriBlock
blockchain,”
https://www.prnewswire.

vulnerability
Foundation.
com/news-releases/veriblock-foundation-discloses-mess-vulner\
ability-in-ethereum-classic-blockchain-301327998.html

“Veriblock
ethereum

classic
Available:

in
[Online].

foundation

discloses

Quintal,

[6] M. Saad, J. Spaulding, L. Njilla, C. Kamhoua, S. Shetty, D. Nyang,
and D. Mohaisen, “Exploring the attack surface of blockchain: A
comprehensive survey,” IEEE Communications Surveys & Tutorials,
vol. 22, no. 3, pp. 1977–2008, 2020.

[7] R. A. Sater and A. B. Hamza, “A federated learning approach to anomaly
detection in smart buildings,” arXiv preprint arXiv:2010.10293, 2020.
[8] O. Shaﬁq, “Anomaly detection in blockchain,” Master’s thesis, Tampere

University, 2019.

[9] A. Yazdinejadna, R. M. Parizi, A. Dehghantanha, and H. Karimipour,
“Federated learning for drone authentication,” Ad Hoc Networks, p.
102574, 2021.

[10] D. Preuveneers, V. Rimmer, I. Tsingenopoulos, J. Spooren, W. Joosen,
and E. Ilie-Zudor, “Chained anomaly detection models for federated
learning: An intrusion detection case study,” Applied Sciences, vol. 8,
no. 12, p. 2663, 2018.

[11] L. Tan, H. Xiao, K. Yu, M. Aloqaily, and Y. Jararweh, “A blockchain-
empowered crowdsourcing system for 5g-enabled smart cities,” Com-
puter Standards & Interfaces, vol. 76, p. 103517, 2021.

[12] L. Tseng, X. Yao, S. Otoum, M. Aloqaily, and Y. Jararweh, “Blockchain-
based database in an iot environment: challenges, opportunities, and
analysis,” Cluster Computing, vol. 23, no. 3, pp. 2151–2165, 2020.
[13] M. Signorini, M. Pontecorvi, W. Kanoun, and R. Di Pietro, “Bad:
a blockchain anomaly detection solution,” IEEE Access, vol. 8, pp.
173 481–173 490, 2020.

[14] S. Iyer, S. Thakur, M. Dixit, R. Katkam, A. Agrawal, and F. Kazi,
“Blockchain and anomaly detection based monitoring system for en-
forcing wastewater reuse,” in 2019 10th International Conference on
Computing, Communication and Networking Technologies (ICCCNT).
IEEE, 2019, pp. 1–7.

[15] S. Sayadi, S. B. Rejeb, and Z. Choukair, “Anomaly detection model over
blockchain electronic transactions,” in 2019 15th International Wireless
Communications & Mobile Computing Conference (IWCMC).
IEEE,
2019, pp. 895–900.

[16] Z. Il-Agure, B. Attallah, and Y.-K. Chang, “The semantics of anomalies
in iot integrated blockchain network,” in 2019 Sixth HCT Information
Technology Trends (ITT).

IEEE, 2019, pp. 144–146.

[17] F. Scicchitano, A. Liguori, M. Guarascio, E. Ritacco, and G. Manco, “A
deep learning approach for detecting security attacks on blockchain.” in
ITASEC, 2020, pp. 212–222.

[18] T. R. Gadekallu, Q.-V. Pham, D. C. Nguyen, P. K. R. Maddikunta,
N. Deepa, B. Prabadevi, P. N. Pathirana, J. Zhao, and W.-J. Hwang,
“Blockchain for edge of things: Applications, opportunities, and chal-
lenges,” IEEE Internet of Things Journal, vol. 9, no. 2, pp. 964–988,
2022.

[19] T. D. Nguyen, S. Marchal, M. Miettinen, H. Fereidooni, N. Asokan, and
A.-R. Sadeghi, “D¨ıot: A federated self-learning anomaly detection sys-
tem for iot,” in 2019 IEEE 39th International Conference on Distributed
Computing Systems (ICDCS).

IEEE, 2019, pp. 756–767.

[20] S. Li, Y. Cheng, Y. Liu, W. Wang, and T. Chen, “Abnormal client behav-
ior detection in federated learning,” arXiv preprint arXiv:1910.09933,
2019.

[21] R. Kumar, A. A. Khan, S. Zhang, W. Wang, Y. Abuidris, W. Amin, and
J. Kumar, “Blockchain-federated-learning and deep learning models for
covid-19 detection using ct imaging,” arXiv preprint arXiv:2007.06537,
2020.

[22] H. Chai, S. Leng, Y. Chen, and K. Zhang, “A hierarchical blockchain-
enabled federated learning algorithm for knowledge sharing in internet
of vehicles,” IEEE Transactions on Intelligent Transportation Systems,
2020.

[23] M. Alazab, S. P. RM, P. M, P. K. R. Maddikunta, T. R. Gadekallu, and
Q.-V. Pham, “Federated learning for cybersecurity: Concepts, challenges,
and future directions,” IEEE Transactions on Industrial Informatics,
vol. 18, no. 5, pp. 3501–3509, 2022.

[24] H. Brendan McMahan, E. Moore, D. Ramage, S. Hampson, and
B. Ag¨uera y Arcas, “Communication-efﬁcient learning of deep networks
from decentralized data,” ArXiv e-prints, pp. arXiv–1602, 2016.
[25] J. Koneˇcn`y, H. B. McMahan, F. X. Yu, P. Richt´arik, A. T. Suresh, and
D. Bacon, “Federated learning: Strategies for improving communication
efﬁciency,” arXiv preprint arXiv:1610.05492, 2016.

[26] N. Moussa and A. E. B. El Alaoui, “An energy-efﬁcient cluster-based
routing protocol using unequal clustering and improved aco techniques
for wsns,” Peer-to-Peer Networking and Applications, pp. 1–14, 2021.
[27] A. Yazdinejad, R. M. Parizi, G. Srivastava, A. Dehghantanha, and K.-
K. R. Choo, “Energy efﬁcient decentralized authentication in internet
of underwater things using blockchain,” in 2019 IEEE Globecom Work-
shops (GC Wkshps).

IEEE, 2019, pp. 1–6.
[28] V. Le, T. P. Quinn, T. Tran, and S. Venkatesh, “Deep in the bowel: highly
interpretable neural encoder-decoder networks predict gut metabolites
from gut microbiome,” BMC genomics, vol. 21, no. 4, pp. 1–15, 2020.
[29] S. Golovkine, N. Klutchnikoff, and V. Patilea, “Clustering multivari-
ate functional data using unsupervised binary trees,” arXiv preprint
arXiv:2012.05973, 2020.

[30] H. Abdi and L. J. Williams, “Principal component analysis,” Wiley
interdisciplinary reviews: computational statistics, vol. 2, no. 4, pp. 433–
459, 2010.

[31] K. P. Sinaga and M.-S. Yang, “Unsupervised k-means clustering algo-

rithm,” IEEE Access, vol. 8, pp. 80 716–80 727, 2020.

[32] I. P. Turnipseed, A new scada dataset for intrusion detection research.

Mississippi State University, 2015.

[33] R. Taormina, S. Galelli, N. O. Tippenhauer, E. Salomons, A. Ostfeld,
D. G. Eliades, M. Aghashahi, R. Sundararajan, M. Pourahmadi, M. K.
Banks et al., “Battle of the attack detection algorithms: Disclosing cyber
attacks on water distribution networks,” Journal of Water Resources
Planning and Management, vol. 144, no. 8, p. 04018048, 2018.

