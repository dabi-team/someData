Anomaly Detection in Intra-Vehicle Networks

Ajeet Kumar Dwivedi
Western University, London, Ontario, Canada
e-mail: adwived3@uwo.ca

1

2
2
0
2

y
a
M
7

]

R
C
.
s
c
[

1
v
7
3
5
3
0
.
5
0
2
2
:
v
i
X
r
a

Abstract—The progression of innovation and technology and
ease of inter-connectivity among networks has allowed us to
evolve towards one of the promising areas, the Internet of
Vehicles. Nowadays, modern vehicles are connected to a range
of networks, including intra-vehicle networks and external net-
works. However, a primary challenge in the automotive in-
dustry is to make the vehicle safe and reliable; particularly
with the loopholes in the existing traditional protocols, cyber-
attacks on the vehicle network are rising drastically. Practically
every vehicle uses the universal Controller Area Network (CAN)
bus protocol for the communication between electronic control
units to transmit key vehicle functionality and messages related
to driver safety. The CAN bus system, although its critical
signiﬁcance, lacks the key feature of any protocol authentication
and authorization. Resulting in compromises of CAN bus security
leads to serious issues to both car and driver safety. This
paper discusses the security issues of the CAN bus protocol and
proposes an Intrusion Detection System (IDS) that detects known
attacks on in-vehicle networks. Multiple Artiﬁcial Intelligence
(AI) algorithms are employed to provide recognition of known
potential cyber-attacks based on messages, timestamps, and data
packets traveling through the CAN. The main objective of
this paper is to accurately detect cyberattacks by considering
time-series features and attack frequency. The majority of the
evaluated AI algorithms, when considering attack frequency,
correctly identify known attacks with remarkable accuracy of
more than 99%. However, these models achieve approximately
92% to 97% accuracy when timestamps are not taken into
account. Long Short Term Memory (LSTM), Xgboost, and SVC
have proved to the well-performing classiﬁers.

Index Terms—CAN, intra-vehicle, LSTM, Xgboost, ensemble.

I. INTRODUCTION

The modern world is becoming increasingly reliant on
technologies such as the Internet of Vehicles (IoV), con-
nected vehicles (CV), and autonomous vehicles (AV). IoV is
the principal vehicular communication framework that allows
vehicles to communicate effectively with other IoV entities
such as infrastructures, pedestrians, and smart devices [1][2].
Vehicle-To-Everything (V2X) innovation permits cutting-edge
vehicles to communicate with other vehicles, road-side foun-
dations, and street users [2][3]. Sensor readings are used
by fully automated vehicles to make short- and long-term
driving decisions. The hi-tech architecture of these vehicles
improves communication between the sensors. Whether it is
a self-driving car or an autonomous vehicle, these emerging
technologies not only enhance efﬁciency but also provide a
safe mode of transportation. Intra-vehicle networks (IVN) and
external vehicular networks make up the majority of IoV [3].
Numerous electronic control units (ECUs) are used in IVNs
to actualize different functionalities [3]. Modern cars comprise
around 30 to 100 ECUs. These ECUs receive unique CAN ID

messages during communications, and they are responsible
for integrating, operating, and analyzing loads of internal
vehicle components and electrical systems. The controller
area network (CAN), a standard bus protocol for in-vehicle
connectivity, connects all ECUs in a vehicle to transfer mes-
sages and perform actions [4]. Each component has the ability
to share data with the others. For example, an Anti-Lock
Braking System (ABS) in a car displays information about
the brakes and airbags. Essentially, all of the components
are linked and can communicate with one another. Telematics
and infotainment systems are two signiﬁcant sections of the
communication of ECUs [5][6]. Telematics equipment such
as On-Board Diagnostics (OBD), black boxes, and other
telematics devices are part of the telematics system. These
are tracking devices that are installed in vehicles that allow
for the broadcast and storage of real-time telemetry insights
data via wireless connections. Also, vehicles’ inbuilt modem
and troubleshooting tools store the data for insights [6][7].
All of a car’s communication and entertainment functions are
controlled by an infotainment system [7]. The infotainment
system, which is placed in the car in the form of Touchscreens,
provides interfaces for information and enjoyment, whether it
is phone calls or music advice [8][9]. The best part is that
they let drivers access their phone calls, emails, and voicemails
without having to take their hands off the wheel [14]. An IVN
is formed by all of the communications that take place between
these sections [10][11].

The CAN bus protocol establishes a baseline for real-time
communication between in-vehicle sensors. The source and
destination address for validation are not included in CAN
messages because they are communicated from a transmitter
to the other units on a bus [12]. As a result, hackers can simply
inject any messages into the system, causing it to malfunction.
Although for an IVN, the CAN bus proves as a dependable
and cost-effective serial bus, during broadcast communication,
attackers can quickly get access to the CAN bus [13]. Raising
concern is that the CAN bus works without an authentication
mechanism, due to which hackers can possibly use an OBD-
II port or remote access to the telematics or infotainment
systems to manipulate the functionalities of a car [13][14].
For example, hackers can attack the inbuilt Bluetooth, nav-
igation, or sensors of the car resulting in changes to some
important functioning of the car. Therefore, in-vehicle CAN
network security is critical for the overall security and smooth
functioning of modern transportation systems.

To counteract threats to vehicle cybersecurity, it is necessary
to build countermeasures for numerous attack vectors. One
of the ways we may address the problem of cyber-attacks
on CAN bus is to use intrusion detection systems [15]. The

 
 
 
 
 
 
many attack vectors against cars based on the principles of
availability, integrity, and conﬁdentiality of the web world
must be thoroughly considered. Intrusion detection systems
detect threats by looking for deviations from regular behavior.
Intrusion detection systems are prone to false alarms [16][17].
As a result, businesses must ﬁne-tune IDS products when
they initially adopt them. This entails properly setting up their
detection mechanism to distinguish between normal network
trafﬁc and potentially malicious conduct. A false negative is a
far more dangerous IDS mistake in which the IDS overlooks
a threat and misidentiﬁes it as regular trafﬁc [17]. In a false
negative situation, Security technicians have no indication that
a risk is present and do not ﬁnd out until the networks have
been inﬁltrated in some manner.

This paper presents an intrusion detection approach based
on the imbalanced ratios and time-series features, i.e., the
frequency of the attacked messages in CAN. The objective of
the project is to classify the different attack types and separate
them from normal messages based on the CAN data packet.
The proposed IDS architecture consists of ﬁve stages: data
selection, pre-processing, feature selection, model build, and
results. In the pre-processing step, we converted and formatted
the data type of columns to make it understandable. We
selected models from the base model like logistic regression
and SVC, then moved to ensemble models like Xgboost and
Random Forest and afterward tried the deep learning model
such as Feed Forward and LSTM.

The following points highlight the key contributions of this

paper:

1) It proposes a CAN-based IDS that can correctly identify
the different sorts of cyber-attacks made on intra-vehicle
networks.

2) It proposes an attack frequency input feature for the
consideration of time-series feature in multi-class clas-
siﬁcation problems.

3) It proposes a novel anomaly-based IDS based on differ-
ent AI models starting from base models to ensemble
models to deep learning models.

4) It proposes the use of a deep learning model like LSTM,
which stores time-series sequence information for multi-
class classiﬁcation problems.

5) It examines and compares the suggested models’ per-
formance and overall efﬁciency on two different input
features, one with time-series and other without it.
6) It illustrates that the time-series feature is a key feature
consideration for improving model detection accuracy
for attacks.

The rest of this document is laid out as follows: Section
II discusses the Controller area network, CAN messages, and
types of CAN attacks. Section III talks about related work in
this area. Section IV discusses the insights of the proposed
novel IDS. Section V exhibits the architecture and design
of the proposed IDS and contains further subsections such
as data overview, exploratory data analysis, feature selection,
and model selection. Section VI displays and discusses the
evaluation and result metrics by comparing the performance
of models with and without time-series features. Section VII

2

Fig. 1. CAN Message format.

concludes the paper.

II. CONTROLLER AREA NETWORK

CAN is a ubiquitous vehicle bus standard protocol. Its low
cost, ﬂexible design, and highly reliable properties make it
useful in the automotive and internet of vehicle world [18].
It works on the broadcasting concept and allows smooth
communication between each unit which is connected through
CAN. The receiver and sender select the message using the
Unique ID property of the message [19].

A. CAN Messages

A CAN packet frame is a special structure that transmits
a sequence of bytes of CAN data over the network. Each
transmitted CAN frame has an arbitration identiﬁcation (ID)
ﬁeld that indicates the packet’s priority [19][20]. Packets with
a lower ID bit value have a higher priority.

Of all the ﬁelds in CAN, Fig.1 shows the seven important

ﬁelds of the CAN message.

• Start Of Frame: The Start of Frame, which is one bit,
is being used to sync and alert all nodes that the CAN
message transmission is about to begin.

• CAN ID: A CAN ID which is of 11 bits in the arbitrations
ﬁeld, identiﬁes which ECU the message should be sent
to. This parameter determines the priority of the message.
In practice, a lower value signiﬁes a bigger priority.
The other part of the arbitrations ﬁeld is the Remote
Transmission Request (RTR) of 1bit.

• DLC: Data Length Code ﬁeld having 4 bits represents a

portion of the control ﬁeld.

• Data: ranging from 0-8 bytes, this ﬁeld represents the

actual data transmission happening to ECUs.

• CRC: Cyclical Redundancy Check ﬁeld having 16 bits,
the code which all receiving units validate

represent
before receiving the message.

• ACK: acknowledge ﬁeld having 2 bits, is used for getting
the ﬂag from the receiver units that they have received
the message successfully.

• EOF: End of Frame ﬁeld having 7 bits speciﬁes the end

of a CAN message.

Aforementioned that, CAN packets do not carry any infor-
mation about the sender or receiver’s addresses. As the origin
of the packets is not supplied, the recipient nodes are unable
to determine if the received packets are meant for them. As
a consequence, the recipient ECUs is unable to determine if
the packet that it is receiving is valid or not [19][20]. Since

the ECUs do not have any authentication or authorization
mechanism, resulting in the manipulation of the compromised
ECUs by hackers. From the tampered ECU, the attackers have
the ability to transmit any unauthorized message to all other
units by misusing the CAN bus for message transfer [20].
Koscher et al. [21] explored the wireless intrusions against
the automotive system and revealed that it is feasible to hack
the CAN bus system and ECUs. They investigated the level of
vulnerability of CAN bus and disclosed its sensitivity regard-
ing attacks such as Dos and Spoof. Boyes [22] highlighted
the growth of the attack from multiple interfaces and raised
various concerns about the security of IVNs. There are lots of
other papers calling attention to the security and vulnerability
of CAN messages and the importance of having IDS to combat
the attacks and to protect the rights of individuals to drive
safely and securely. During model training, our project focuses
primarily on the highlighted green areas of Figure 1, which
are essential components of CAN messages.

B. CAN Attack Types

Figure 2 shows the known attacks which are covered in this
proposed study. In our attack dataset, we explore four main
types of known in-vehicle attacks.

• Denial of Service Attack (DoS): DoS attacks entail ﬂood-
ing a host with a massive volume of data in an attempt
to overﬂow it, thereby preventing it from receiving or
processing data from authenticated trafﬁc. The Road-
Side Unit (RSU) is the most vulnerable section in IVNs.
RSUs are an important part of vehicular networks since
they identify, monitor, and maintain automobiles and their
information [23].

• Fuzzy Attack: The technique of introducing random data
into software and evaluating the results to uncover pos-
sibly exploitable vulnerabilities is what a fuzzy attack is
[23].

• Spooﬁng Attack: Spooﬁng is the act of changing the
appearance of a message or identiﬁcation so that
it
pretends to come from a reliable, authentic source [10].
Spooﬁng attacks are further categorized into revolution
per minute (RPM) and gear spooﬁng attack [24].

We have used the attack dataset from the CAR-Hacking
dataset provided by Huy Kang Kim et al. [1][25]. The CAN
ID identiﬁcation for DoS attacks with a frequency of 0.3
milliseconds is 0x0000, and a sufﬁcient number of records has
been created for Dos Attacks. Random CAN IDs are targeted
by a fuzzy attack at a frequency of 0.5 milliseconds. On
the two different CAN ID, RPM and Gear Spooﬁng attacks,
records have been developed. The RPM and Gear attack CAN
IDs are likely to have the Fuzzy attack as well [25].

III. RELATED WORK

Many studies have been proposed on the CAN vulnerability
in intra-vehicular networks and the imminent need for IDS
since it was understood the necessity of CAN security in
light of the rise of the Internet of Vehicles. Huy Kang Kim
et al. [1] proposed a novel IDS model for in-vehicle net-
works, GIDS (GAN-based Intrusion Detection System), using

3

Fig. 2. Attack types and frequency of attacks.

a deep learning model. To improve the speed of their GIDS,
they encoded the CAN ID with one-hot encoding for pre-
processing. They created the attack data and asserted that their
GIDS system covers both known attacks, DoS, Fuzzy, RPM,
and Gear spooﬁng attacks with 100% accuracy and unknown
attacks with 98% accuracy. Hossain et al. [2] used the LSTM
model to classify the different types of attacks such as DoS,
Fuzzy, and Spooﬁng on the CAN-bus in IVNs. They generated
the attack data and combined it with normal trafﬁc. They
asserted that their IDS is able to detect the attack with 99.995%
accuracy. They tuned the model with different parameters to
reach this milestone. To double-check their model’s accuracy,
they ran it through the Hacking and Countermeasure Research
Labs automotive IDS dataset.

Kleberger et al. [3] looked at the security dangers and
attacks that can happen in-vehicle network systems and pro-

posed the potential remedies. Qingling Zhao et al. [4] pro-
posed an IDS which detects known (DoS, Fuzzy, RPM, gear)
and unknown attacks with different methods considering the
combination of classiﬁers (binary and multi-class), which has
been trained on two different networks, ACGAN and OOD.
They trained their model on a single dataset having normal,
known, and unknown attack category data. They implemented
ACGAN and attained 99% accuracy, while CNN has given
the output of around 96% accuracy. Narayan Khatri et al. [5]
proposed a comprehensive blockchain technology usage for
Intra-vehicle network security. They insisted on using private
blockchain nomenclature for the sensors and ECUs on the
inside and the public blockchain method for connecting with
the outside network. They highlighted the different types of
in-vehicle network protocols such FlexRay, and Automotive
Ethernet besides CAN with their properties and security con-
cerns.

Li Yang et al. [6] [9] suggested a multi-tiered hybrid
intrusion detection system (IDS) that can properly identify
the various forms of cyber-attacks made on both internal and
external vehicular networks. They combined the two datasets
and attempted to identify various threats after combining
them. For their IDS training, they employed a variety of tree-
structure machine learning models, and got accuracy of around
99.9% in the Stacking and Xgboost algorithm. In terms of
overall performance, their ﬁndings reveal that Xgboost was
the best method for model training.

Omar Y. Al-jarrah et al. [7] provided an organized and
thorough examination of state of the art for passenger car intra-
vehicle intrusion detection systems (IDSs). They highlighted
the earlier surveys which have been done regarding security
concerns of the in-vehicle network and the challenges and gaps
in in-vehicle networks. They highlighted the pros and cons of
different types of available IDS for intra-vehicle networks and
argued that no existing single solution which they have covered
in their research could provide a complete detection capability
of in-vehicle attacks because each detection technique has its
own set of ﬂaws and beneﬁts.

Siti-Farhana Lokman et al. [8] offered an in-depth exam-
ination of IDS discovered in the literature, concentrating on
the following facets: detection tactics, deployment method-
ologies, attacking methods, and technological problems. They
concluded that adopting a signature and speciﬁcation-based
method is problematic for the CAN protocol because of its
structure. However, Learning-based anomaly detection may be
a viable detection approach since it can learn from examples
and dynamically respond to the CAN environment independent
of protocol, vehicle model, or other characteristics.

IV. PROPOSED INTRUSION DETECTION SYSTEM
An intrusion detection system (IDS) is a network trafﬁc
monitoring system that detects suspicious behavior and sends
out alerts when it is found. There are four categories of IDS.
• Network Intrusion Detection Systems (NIDS): It is placed
inside the network and tracks all the inbound and out-
bound trafﬁc in the network [26].

• Host Intrusion Detection Systems (HIDS): It is deployed
as a host on all computers and devices in the network.

4

Fig. 3. Architecture of Intra-Vehicle Network.

The best thing about this IDS is that it can detect attacks
from inside the organizations also.

• Signature-based Intrusion Detection Systems (SIDS): It
looks for a signature for verifying the attacks and com-
pares the signature with an existing database having
numerous signature records of attacks [27].

• Anomaly-based Intrusion Detection Systems (AIDS): It
continuously monitors trafﬁc considering the ideal value
of bandwidth placed in between external ports and CAN
bus and notiﬁes the security team regarding the attacks
[27].

This research focuses on the identiﬁcation of attacks by
AIDS using a variety of machine learning algorithms. When
malicious conduct or anomalous trafﬁc is discovered, AIDS
will compile an attack report and send out an attack alert to
security team by notifying them. The infrastructure team or
administrator can investigate the issue based on alert and can
take immediate action to rectify the attack.

Figure 3 shows the architecture of the Intra-vehicle network
with various attack interfaces and the location of IDS in the
CAN bus. As shown in Fig. 3, All ECUs communicate with
each other through the CAN Bus, and different telematics
and infotainment devices, including cellular, Bluetooth, music
players, and navigation systems, are also connected to the
CAN bus and transmit and receive signals [28]. Because CAN
lacks authentication, an attacker can engage directly with both
OBD Port II and infotainment and telematics devices. Once an
attacker sends a message over these devices and ports, they
may cause any ECU to malfunction, as seen in the picture,
where the red ECU represents the compromised one [28].

IDS is installed between open external interfaces and the
CAN bus. All communication from the interfaces will pass
from the IDS layer only; if a problem or anomaly is discov-
ered, an alert or report will be issued based on the attack
category and severity [29]. Although this paper is conﬁned to
alert detection mechanisms, there are certain types of IDS that
take action against the source and block the source IP or take
other necessary steps in response to the attack.

Machine learning algorithms can play a vital role in de-
tecting attacks. Supervised and ensemble algorithms such
as Xgboost and Random Forest as well as deep learning

5

5. Task 6 discusses the use of oversampling techniques such
as SMOTE if necessary. Task 7 depicts categorical value
encoding options, depending on the model, we can choose
LabelEncoder or OneHotEncoder. In the form of Standard-
Scalar, Task 8 symbolizes scaling. The third stage considers
attack-frequency-seconds and hour columns, as well as feature
selection and importance. Step 4 shows that many AI models
are used to tackle this problem, including supervised (Logistic
regression, SVC), ensemble (Xgboost, Random Forest), and
deep learning (Feed Forward, LSTM). It also indicates that
cross-validation was employed to avoid the issue of overﬁtting.
Step 5 goes over the results and categorizes the attacks as
Normal, Fuzzy, DoS, RPM, and Gear attacks.

B. Dataset Overview

The dataset for this study comprises two different datasets,
one with attack category and another with normal messages.
The attack dataset ﬁles are taken from the CAR-Hacking
types of
dataset [25]. This dataset ﬁle has four different
attacks: DoS, Fuzzy, RPM, and Gear spooﬁng attacks. Normal
messages are present in another dataset that contains conﬁden-
tial real-time trafﬁc data provided by the National Research
Council Canada. Since the format of the normal message
dataset is different from the CAR-Hacking dataset attack ﬁles,
conversion was required before merging these two ﬁles to form
a single dataset. The ﬁnal dataset contains around 350k records
where normal records are present in the majority, followed by
DoS attack, RPM spooﬁng, Fuzzy attack, and Gear spooﬁng
attack. Below is the detailed description of both datasets.

Anomaly dataset structure and properties:
1) Generated by Huy Kang Kim et al. [1] [25] for IDS

training.

2) Different attack dataset has been generated based on

Attack frequency seconds.

3) Timestamp: the date and time of the recordings.
4) CAN ID: a HEX identiﬁcation for a CAN message, for

example, 02c0

5) DLC: data byte count, ranging from 0 to 8.
6) Data: actual data ranging from 0-7 bytes
7) Flag: T or R, where T denotes an attacked message and

R denotes a regular message.

8) Contains data for November-3, 2016.
Normal message dataset structure and properties:
1) Real-time CAN message trafﬁc dataset provided by the

National Research Council Canada (NRC)

2) Contains CAN interface as a column showing two

different ports exposed for CAN message.

Contains data for July-19, 2021, some of the records show

OBD II messages.

C. Data Preparation

In all, data preparation entails eight steps. Following the
merger of the two datasets, we immediately check for null
and empty records and remove them. We are converting the
data ﬁelds from hexadecimal to decimal format for better
assimilation. To acquire the basic Datetime format of “Y-
m-d H: M: S.f”, which is more comprehensible for the

Fig. 4. Architecture of the implemented IDS.

algorithms, aid in categorizing malicious data packets based
on known attack patterns. Moreover, Unsupervised learning
models can assist in identifying novel malware patterns, as
well as detecting and distinguishing them from regular packets
[30].

A. Architecture Description

Figure 4 shows the overall steps which have been taken
to design the machine learning-based AIDS. The ﬁrst process
is dataset selection, which entails combining two independent
datasets, including the CAN dataset containing normal mes-
sages and the attack dataset, to generate a ﬁnal dataset. The
CAN dataset was structured prior to merging it with the attack
dataset for the ﬁnal dataset. Step 2 displays data preparation,
which consists of typically eight separate jobs. The ﬁrst duty
is to check for missing/null records, while Task 2 is to convert
hexadecimal to decimal, and Task 3 is to convert timestamps to
have the DateTime column., Task 4 discusses the establishment
of new features based on timestamp columns such as attack-
frequency-seconds and hour. The EDA is represented by Task

6

Fig. 5. Records distribution of various categories.

Fig. 6. Attack hours of the used dataset.

time series column, we are converting the timestamp feature
independently. Then, depending on the CAN ID, we create
the attack-frequency-seconds and hour columns to determine
the difference between attacked records in the dataset. We do
exploratory data analysis when we have sufﬁcient features.

D. Exploratory Data Analysis

Figure 5 demonstrates that normal messages have the largest
distribution, with 200k records, followed by dos and other
attacks, which account for 9% of total records. Both attack
and regular messages are recorded between 4 p.m. and 9
p.m., as shown in Fig. 6. It also shows the time intervals for
various attacks and typical messages. RPM spooﬁng attacks
occur between 4 p.m. and 5 p.m., gear spooﬁng attacks occur
between 5 p.m. and 6 p.m., Fuzzy attacks occur between 5
p.m. and 7 p.m., DoS attacks occur between 6 p.m. and 8
p.m., and normal messages occur between 7 p.m. and 9 p.m.
So, we can conclude that most of the attacks are happening
between 4 p.m. to 8 p.m., this is the critical information for
our model training.

After doing EDA, we were able to determine the ratio of
distinct attacks and regular message records, as well as their
distribution within the dataset. If necessary, we used the Syn-
thetic Minority Oversampling Technique to do oversampling
(SMOTE) [31]. Because we were working on a multinomial
classiﬁcation issue with ﬁve output units, it was required to
construct an encoder, and we used two separate encoders. The
LabelEncoder for supervised and ensemble machine learning
models and OneHotEncoder for neural networks. Later, we
used StandardScalar to normalize the data, which is one of the
recommended pre-processing steps in machine learning [32].

E. Feature Selection

To understand the data and model in a better way, we are

checking the importance of features by various techniques.

Feature importance scores may be used to aid in data
interpretation, but they could be used to rank and pick the most
valuable features for a forecasting model [32][33]. Statistical

Fig. 7. The feature importance generated by Random Forest.

score, which shows a linear relationship between different
correlation coefﬁcients for variables, has been used using the
Matrix correlation method. From the visual point of view, we
used the pair plot to determine the model features importance.
However, Feature importance after training the model is some-
thing which we are relying on. For supervised-based models
like Logistic Regression and SVC, we have retrieved the coeff
property, and for tree-based models, our reliable algorithm
for the feature importance was Random Forest. Based on the
result, we are modifying our independent feature for better
training results.

We initially ignore the time-series features, training the
model without it as an independent variable; however, we
later include the Timestamp feature and retrain the model to
verify the impact of time-series features like attack-frequency-
seconds and hour on model accuracy. Because both the merged
datasets were gathered in separate years, it would have been
rather straightforward for the model to categorize the attacks
using the day, month, year, and from the feature importance
graph as shown in Fig. 7, we deciphered that minute, seconds,
and milliseconds properties are not having much importance
and do not constitute in model learning, while year, month, the
day is not relevant for the model training data is relevant that’s
why showing high importance. The hour and attack-frequency-
seconds (at freq sec) features are what we considered to be
timestamp features, as illustrated in Fig. 4.

The most crucial element from the perspective of feature
importance is the timestamp in the form of the hour followed
by attack-frequency-seconds (at freq sec), as illustrated in
Fig. 7. Then data ﬁeld with the column name DATA[3] is
important. The DATA[6] column is the one with the least
relevant characteristic.

F. Model Selection and Build

We have used six different types of models for this anomaly

problem.

1) Logistic Regression: Logistic Regression is one of the
basic Machine Learning algorithms used to solve classiﬁcation
issues. It is a predictive analytic approach that is based on
the probability notion [33]. Generally, it works for the binary
classiﬁer, but it also works for the multinomial classiﬁcation,
which is relevant to our problem. The logistic sigmoid function
translates the result of logistic regression into a probability (p-
value) [33]. We have used the multi-class property as multino-
mial since our problem is multinomial. Because our problem
is multinomial, we have labeled the multi-class attribute as
multinomial. In addition, the AUC-ROC curve was plotted
using the One-vs-Rest (OVR) method. Regularization L2 has
also been applied to guarantee that the mode is not overﬁtting.
2) Support Vector Classiﬁcation (SVC): SVC is also one
of the basic supervised machine learning models that work
for multinomial classiﬁcation issues. Its goal is to ﬁnd the
optimal boundary (called a hyperplane) between different
classes. SVM, in its most basic version, makes complex data
alterations depending on the kernel function supplied, with
the purpose of increasing the separation distance between
data points. Support Vectors are the data points with the
shortest distance to the hyperplane [34]. Since our problem
is multi-class, we are using One-vs-One (OVO) approach for
plotting the ROC-AUC curve. Regularization has also been
implemented to avoid overﬁtting.

3) Random Forest

(RF): Ensemble Models: Ensemble
learning is a broad conceptual approach in machine learning
that combines predictions from different models to improve
overall predictive performance [35]. Implemented algorithms
in this study from ensemble learning are Random Forest and
Xgboost.

RF is an ensemble supervised learning model. It has the
ability to be utilized for both classiﬁcation and regression.
The trees make up a forest. A forest is thought to be stronger
the more trees it has. Random forests generate decision trees
using randomly selected data samples, obtain predictions from
each tree, then decide on the best option. It also serves as a
strong indicator of the value of the feature [36]. The sublime
importance of RF is that it barely faces the overﬁt problem
reason behind taking averages of all the tress and decisions.
This is one of the strongest reasons we have chosen this
algorithm for our research. There are four main steps in the
random forest working process:

• Choose a random selection from a set of data.
• Create a decision tree for each sample and use it to

generate a prediction result.

• Make a vote for each expected outcome.
• As the ﬁnal forecast, choose the prediction with the most

votes [36].

4) Extreme gradient boosting (Xgboost): Xgboost

is a
distributed gradient boosting library that has been tuned for
efﬁciency, ﬂexibility, and portability. It uses the Gradient
Boosting framework to create Machine Learning algorithms.
Boosting is an ensemble learning strategy for creating a strong

7

classiﬁer from a sequence of poor ones [37]. Xgboost uses
parallel tree boosting to tackle a variety of data science issues
quickly and accurately [37]. Gradient boosting, Stochastic
gradient boosting, and Regularized gradient boosting of both
L1 and L2 are a feature of this model [38].

5) Feed Forward (FF): Deep Learning model: Deep learn-
ing is a subset of machine learning that is fundamentally a
neural network of a minimum three-layer [39]. In this work,
we have implemented Feed Forward (FF) and Long Short
Term Memory (LSTM) models.

A FF neural network is the simplest artiﬁcial neural network
in which the data ﬂows only in the forward direction, and
connections between the perceptron do not create a cycle.
The data comes in through the input nodes, passes through the
hidden layers, and ﬁnally leaves through the output unit. There
are no linkages in the networks that would allow information
departing the output node to be transferred back into it.
Feedforward neural networks are sometimes referred to as
a multi-layered set of neurons since all information travels
forward only. [40]

6) Long Short Term Memory (LSTM): The LSTM is a
more advanced form of the Recurrent Neural Network (RNN),
capable of learning and recalling longer sequences of input
data. They are built to cope with data that consists of long
sequences of data with 100-to-200-time steps. Because it is
one of the best models for our issue, we must train each model
with and without timestamp features. Since LSTM considers
the timestamp and remembers past sequences, it is predicted
to show a signiﬁcant difference in accuracy when trained
with and without timestamp information [41]. Three gates in
an LSTM are used to control the ﬂow of information. The
forget gate determines which information must be forgotten
and which must be passed. The input gate changes the state of
the cell by transferring relevant data to the next stage. The next
hidden state is determined by the output gate. The previous
cell state plus the inputs are used to determine the cell state
in LSTM [41].

We decided to start with the most basic algorithm, which is
why we picked Logistic regression with multinomial multi-
class. We used regularization and varied the penalty value
C from 0.1 to 1.0. Later, we chose SVC, which works on
determining the best border between classes and enables multi-
classes in the (OVO) method. We penalized the model by
changing C from 0.1 to 1.0. Then we moved on to ensemble
models, with Random Forest being our ﬁrst choice because it
supports multi-class inherently and has the ability to consider
both continuous and categorical
input features, making it
ideal for our situation. Its ability to show the importance and
weightage of features also helped us decide on our feature
selection process. Then we shifted to a boosting technique,
Xgboost, which operates on the principle of stochastic gradient
descent with lightning speed and performance. Because our
problem was multi-class, we developed it with a multi-softmax
objective, and it also offers a wide range of hyperparameter
tweaking options [42] [43]. Then, to check the performance of
NN for our problem, we moved to deep learning and chose the
base model Feedforward Neural Networks (FFNN). Then, for
our challenge, we moved to Recurrent Neural Network (RNN)

TABLE I
F1-SCORE FOR DIFFERENT MODELS WITH AND WITHOUT
TIME-SERIES FEATURE

Model Type

Model Name

Supervised

Ensemble

Deep Learning

Logistic
Regression
SVC
Random Forest
Xgboost
Feed Forward
LSTM

F1-Score
Without Time
Feature

F1-Score With
Time Feature

0.856

0.968
0.972
0.966
0.962
0.842

0.991

1.00
0.992
1.00
0.986
1.00

and picked LSTM. This was the best option for distinguishing
between model performance with and without
time-series
features since we wanted to highlight the inﬂuence of time-
series features on model performance.

V. RESULT AND EVALUATION METRICS

In machine learning, evaluation of performance is critical.
We have used the detection accuracy, F1-score, and confusion
matrix score, as evaluation metrics to measure the performance
of our model. We have also used the Area Under the Curve
(AUC) – Receiver Operating characteristics (ROC) curve eval-
uation metrics to visualize our models’ performance.

A. F1-Score

The F1-score is a harmonic mean of accuracy and recall,
with the best value being 1 and the lowest being 0. Precision
and recall both provide an equal proportion to the F1 score.
It is calculated as the average of the F1-score of each class in
the multi-class situation [44]. It is calculated as:

F 1 =

2 × (precision × recall)
precision + recall

(1)

where precision is deﬁned as the proportion of properly
identiﬁed positive samples (TP) to the total number of ac-
curately or erroneously classiﬁed positive samples. Its value
varies from 0.0 lowest to 1.0 highest. It is calculated as:

precision =

T P
T P + F P

(2)

Recall is deﬁned as the proportion of properly identiﬁed
positive samples (TP) to the total number of positive samples
which could have been predicted. Its value varies from 0.0
lowest to 1.0 highest. It is calculated as

recall =

T P
T P + F N

(3)

Where, TP is true-positive, FP is false-positive, and FN is
false-negative. Since our study is on multinomial classiﬁcation
with imbalanced data, if we are not using sampling techniques,
the preferred matrix for that reason is F1-score.

As shown in Figs. 8 and 9, we got very good F1-scores for
all the implemented models highest being 99% when we are
considering timestamp features, while without those feature
considerations, it is limited to 98%.

8

Fig. 8. CLASSIFICATION REPORT WITHOUT TIME-SERIES FEATURE.

Fig. 9. CLASSIFICATION REPORT WITH TIME-SERIES FEATURE.

B. AUC-ROC

The Area Under the Curve (AUC) - ROC curve is a perfor-
mance evaluation for classiﬁcation tasks at various threshold
levels. AUC indicates the degree or measure of separability,
whereas ROC is a probability curve. It indicates how well the
model can differentiate between classes [45].

We plot the True Positive Rate (TPR) versus the False
Positive Rate (FPR) in our AUC-ROC curve, with FPR on the
x-axis and TPR on the y-axis using the One-vs-Rest (OvR)
approach.

Formula for TPR, FPR is:

T P R =

F P R =

T P
T P + F N

F P
F P + T N

(4)

(5)

As shown in Figs. 10 and 11, AUC-ROC values near
1.0 show the models’ robustness and superior performance,
whereas values near 0.0 show the models’ underperformance
and weakness [46]. Based on the number of classes available,
we are creating AUC-ROC curves for our multi-class clas-
siﬁcation issue that ﬁt our research. For most of the curves,
we recoded values near to 100%, when considering timestamp
features. On the other hand, when we are not using it, we get
an AUC-ROC score somewhere around 95%.

9

TABLE II
AUC SCORE FOR DIFFERENT MODELS WITH AND WITHOUT
TIME-SERIES FEATURE

TABLE III
MEAN OF CROSS-VALIDATION SCORE FOR DIFFERENT
MODELS WITH AND WITHOUT TIME-SERIES FEATURE

Model Type

Model Name

Supervised

Ensemble

Deep Learning

Logistic
Regression
SVC
Random Forest
Xgboost
Feed Forward
LSTM

AUC Score
Without Time
Feature

AUC Score
With Time
Feature

0.977

0.995
0.996
0.996
0.974
0.787

0.999

1.00
0.998
1.00
0.986
1.00

Model Type

Model Name

Supervised

Ensemble

Deep Learning

Logistic
Regression
SVC
Random Forest
Xgboost
Feed Forward
LSTM

Cross-
Validation
Score Without
Time Feature

Cross-
Validation
Score With
Time Feature

0.915

0.978
0.977
0.974
0.972
0.773

0.993

1.00
0.992
1.00
0.994
1.00

Fig. 10. ROC-AUC WITHOUT TIME-SERIES FEATURE.

C. Cross-Validation

Cross-validation is a resampling approach for evaluating
machine learning models on a smaller set of data in order to
analyze the model and determine whether it is overﬁtting. It is
used to assess the performance of a machine learning model
on validation data from training data to generalize the models’
performance. The validation dataset will be used to assess
the models’ performance [45]. When we compare validation
loss and accuracy to training loss and accuracy, we can see
if our model is underﬁtting or overﬁtting [46]. If the model
performs well during validation, there is a good probability it
will do even better with an unseen test dataset. We have used
RepeatedStratiﬁedKFold and K=3 for validating our models’
performance.

D. Confusion Matrix

The confusion matrix is a performance measurement metric,
which shows the overall picture of the prediction results on the
classiﬁcation problem. Since the classes are listed in the rows
in the same order as they are in the columns, the correctly
categorized items, which are TP, TN, are found on the main

Fig. 12. CONFUSION MATRIX WITHOUT TIME-SERIES FEATURE.

diagonal from top left to bottom right, while False values FP,
FN are found in the other diagonal from top right to bottom
left [47] [48]. In our study, almost all classes are showing True
positive rates of 100% with time-series features, while without
them, the True positive rate is 95%, as shown in Figs. 12 and
13.

E. Matrix view of Model Accuracy with and without Time-
series

We used the accuracy score to display it in the matrix below
and compare model performance in both scenarios when the
model uses timestamp features and when it does not. We can
see from the results that when all models are trying to ﬁt data
points with timestamp features, which are very important in
our dataset, their performance improves.

The best method in our study to highlight the relevance
of time-series was the LSTM model, which works well with
time-series data. With time-series, it produced 100% accuracy,

Fig. 11. ROC-AUC WITH TIME-SERIES FEATURE.

Fig. 13. CONFUSION MATRIX WITH TIME-SERIES FEATURE.

TABLE IV
PERFORMANCE ACCURACY FOR DIFFERENT MODELS WITH
AND WITHOUT TIME-SERIES FEATURE

Model Type

Model Name

Supervised

Ensemble

Deep Learning

Logistic
Regression
SVC
Random Forest
Xgboost
Feed Forward
LSTM

Accuracy -
Without Time
Feature (%)

Accuracy -
With Time
Feature (%)

92.60

97.20
98.20
97.40
97.12
78.25

99.15

100
99.32
100
99.45
100

but without it, there was a considerable decline in accuracy,
and the model halted at 78% accuracy. Xgboost and SVC,
which were deployed, also produced considerable results and
proved to be one of the best models with 100 percent accuracy.
Furthermore, both of these algorithms work well without the
use of time-series data, with an accuracy of about 97 percent.
Feed-Forward neural network has justiﬁed its worth by giving
an accuracy of 99% with time-series and 98% without it.
Random Forest is one of the methods that has provided the
greatest accuracy for non-time-series training, with a 98%
accuracy. With 99% accuracy, it performed admirably for the
time-series feature.

Thus LSTM, Xgboost, and SVC proved as the best model
to develop IDS with 100% accuracy and F1-score to detect
the attacks on the CAN. Furthermore, accuracy, F1-score have
been improved signiﬁcantly by considering time-series fea-
tures which justiﬁes the importance of time-series information
for IDS.

CONCLUSION

In this paper, we propose an AIDS based on Machine
learning models to detect the anomaly on the CAN-bus in
intra-vehicular networks. An In-depth discussion about the
CAN bus vulnerability and the reason why AIDS is needed
in this area has been covered in our study. The known attack
category and its types of which are possible in the CAN-bus
and its consequences on the vehicle and driver were discussed.
We propose the framework and design of IDS which is capable
of detecting the anomalies with 99% accuracy. Since there
were two datasets from distinct sources, the attack dataset
was generated in a different year than the normal messages
real trafﬁc dataset, which was gathered in a different year
after merging the dataset; thus, our goal was to identify the
relevant features from both datasets. Our problem is a Multi-
class Classiﬁcation problem having timestamp series data.
The major goal of this paper is to demonstrate the value
of timestamp characteristics in model training for detecting
and verifying the four different types of attacks. We utilized
attack-frequency-seconds and the hour as one of the timestamp
features. As such, forming a correlation between these two
datasets of two different years’ data was difﬁcult. We used
various machine learning models, ranging from supervised to
ensemble to deep learning, to compare the outcomes with and
without timestamp features. The importance of the time-series
feature is evident in all of the evaluation metrics results and
assessment measures.

10

ACKNOWLEDGMENT

I would like to acknowledge and thank Prof. Abdallah
Shami and Mr. Li Yang from OC2 Lab, Department of
Electrical and Computer Engineering, Western University, for
their support and help throughout this work.

REFERENCES

[1] Seo, Eunbi & Song, Hyun & Kim, Huy Kang.

(2018). GIDS:
GAN based Intrusion Detection System for In-Vehicle Network. 1-6.
10.1109/PST.2018.8514157.

[2] M. D. Hossain, H. Inoue, H. Ochiai, D. Fall, and Y. Kadobayashi,
“Long short-term memory-based intrusion detection system for in-vehicle
controller area network bus,” in Proc. IEEE 44th Annu. Comput., Softw.,
Appl. Conf. (COMPSAC), Jul. 2020, pp. 10–17

[3] P. Kleberger, T. Olovsson, and E. Jonsson, “Security aspects of the in-
vehicle network in the connected car,” in Proc. IEEE Intell. Vehicles
Symp. (IV), Jun. 2011, pp. 528–533.

[4] Qingling Zhao, Mingqiang, Zonghua Gu, Siyu Luan, haibo zeng, samarjit
chakrabory. CAN Bus Intrusion Detection based on Auxiliary Classiﬁer
GAN and Out-of-Distribution Detection 10.13140

[5] Khatri, Narayan & Shrestha, Rakesh & Nam, Seung Yeob. (2021). Se-
curity Issues with In-Vehicle Networks, and Enhanced Countermeasures
Based on Blockchain. Electronics. 10. 893. 10.3390/electronics10080893.
[6] L. Yang, A. Moubayed, I. Hamieh, and A. Shami, “Tree-Based Intelligent
Intrusion Detection System in Internet of Vehicles,” in 2019 IEEE
Global Communications Conference (GLOBECOM), 2019, pp. 1–6, doi:
10.1109/GLOBECOM38437.2019.9013892.

[7] O. Y. Al-Jarrah, C. Maple, M. Dianati, D. Oxtoby and A. Mouzakitis,
”Intrusion Detection Systems for Intra-Vehicle Networks: A Review,”
in IEEE Access, vol. 7, pp. 21266-21289, 2019, doi: 10.1109/AC-
CESS.2019.2894183.

[8] Lokman, Siti Farhana & Othman, Abu & Husaini, Muhamad. (2019). In-
trusion detection system for automotive Controller Area Network (CAN)
bus system: a review. EURASIP Journal on Wireless Communications
and Networking. 2019. 10.1186/s13638-019-1484-3.

[9] L. Yang, A. Moubayed, and A. Shami, “MTH-IDS: A Multi-Tiered Hy-
brid Intrusion Detection System for Internet of Vehicles,” IEEE Internet
Things J., 2021, doi: 10.1109/JIOT.2021.3084796.

[10] Aldhyani THH, Alkahtani H. Attacks to Automatous Vehicles: A Deep
Learning Algorithm for Cybersecurity. Sensors (Basel). 2022;22(1):360.
Published 2022 Jan 4. doi:10.3390/s22010360

[11] Yuanda Yang, Guoqi Xie, Jilong Wang, Jia Zhou, Ze Xia, and Renfa Li.
2021. Intrusion Detection for In-vehicle Network by Using Single GAN
in Connected Vehicles. Journal of Circuits, Systems and Computers 30,
01 (2021), 2150007.

[12] Pearre, Nathaniel & Ribberink, Hajo. (2019). Review of research on
V2X technologies, strategies, and operations. Renewable and Sustainable
Energy Reviews. 105. 61-70. 10.1016/j.rser.2019.01.047.

[13] I. Sharafaldin, A. Habibi Lashkari, and A. A. Ghorbani, ”Toward
Generating a New Intrusion Detection Dataset and Intrusion Trafﬁc
Characterization,” no. Cic, pp. 108-116, 2018.

[14] Hyun Min Song, Ha Rang Kim, and Huy Kang Kim. 2016. Intrusion
detection system based on the analysis of time intervals of CAN messages
for in-vehicle network. In 2016 international conference on information
networking (ICOIN). IEEE, 63–68

[15] Wufei Wu, Renfa Li, Guoqi Xie, Jiyao An, Yang Bai, Jia Zhou, and
Keqin Li. 2019. A survey of intrusion detection for in-vehicle networks.
IEEE Transactions on Intelligent Transportation Systems 21, 3 (2019),
919–933

[16] L. Yang et al., “Multi-Perspective Content Delivery Networks Security
Framework Using Optimized Unsupervised Anomaly Detection,” IEEE
Trans. Netw. Serv. Manag., 2021, doi: 10.1109/TNSM.2021.3100308.
[17] M. Injadat, A. Moubayed, and A. Shami, “Detecting Botnet Attacks in
IoT Environments: An Optimized Machine Learning Approach,” in 2020
32nd International Conference on Microelectronics (ICM), 2020, pp. 1–4,
doi: 10.1109/ICM50269.2020.9331794.

[18] L. Yang and A. Shami, “A Transfer Learning and Optimized CNN Based
Intrusion Detection System for Internet of Vehicles,” ICC 2022 - 2022
IEEE International Conference on Communications (ICC), 2022, pp. 1-6,
[19] Hyo Jin Jo and Wonsuk Choi. 2021. A Survey of Attacks on Controller
Area Networks and Corresponding Countermeasures. IEEE Transactions
on Intelligent Transportation Systems (2021).

11

[20] H. M. Song, H. R. Kim, and H. K. Kim, “Intrusion detection system
based on the analysis of time intervals of can messages for in-vehicle
network,” in Information Networking (ICOIN), 2016 International Con-
ference on. IEEE, 2016, pp. 63–68.

[21] K. Koscher, A. Czeskis, F. Roesner, S. Patel, T. Kohno, Checkoway, D.
McCoy, B. Kantor, D. Anderson, H. Shacham, S. Savage, in 2010 IEEE
Symposium on Security and Privacy. Experimental security analysis of a
modern automobile (Berkeley/Oakland, 2010), pp. 447–462

[22] H. A. Boyes and A. E. A. Luck, ”A security-minded approach to vehicle
automation, road infrastructure technology, and connectivity,” 10th IET
System Safety and Cyber-Security Conference 2015, 2015, pp. 1-6, doi:
10.1049/cp.2015.0295.

[23] A. Moubayed, A. Refaey, and A. Shami, “Software-Deﬁned Perimeter
(SDP): State of the Art Secure Solution for Modern Networks,” IEEE
Netw., vol. 33, no. 5, pp. 226–233, 2019.

[24] Hristos Giannopoulos, Alexander M Wyglinski, and Joseph Chapman.
2017. Securing vehicular controller area networks: An approach to active
bus-level countermeasures. IEEE Vehicular Technology Magazine 12, 4
(2017), 60–68.

in IEEE Open Journal of the Communications Society, vol. 3, pp. 15-30,
2022, doi: 10.1109/OJCOMS.2022.3140272.

[44] Abdulaziz Alshammari, Mohamed A Zohdy, Debatosh Debnath, and
George Corser. 2018. Classiﬁcation approach for intrusion detection in
vehicle systems. Wireless Engineering and Technology 9, 4 (2018), 79–94
[45] M. M¨uter and N. Asaj, “Entropy-based anomaly detection for in-vehicle
networks,” in Intelligent Vehicles Symposium (IV), 2011 IEEE. IEEE,
2011, pp. 1110–1115.

[46] A. M. Carrington et al., ”Deep ROC Analysis and AUC as Balanced
Average Accuracy, for Improved Classiﬁer Selection, Audit and Explana-
tion,” in IEEE Transactions on Pattern Analysis and Machine Intelligence,
doi: 10.1109/TPAMI.2022.3145392.

[47] Goutte, Cyril & Gaussier, Eric. (2005). A Probabilistic Interpretation of
Precision, Recall and F-Score, with Implication for Evaluation. Lecture
Notes in Computer Science. 3408. 345-359. 10.1007/978-3-540-31865-
1 25.

[48] Visa, Soﬁa & Ramsay, Brian & Ralescu, Anca & Knaap, Esther.
(2011). Confusion Matrix-based Feature Selection.. CEUR Workshop
Proceedings. 710. 120-127.

[25] Huy Kang KimCar, Hacking Dataset

intrusion detec-
tion. Available: https://ocslab.hksecurity.net/Datasets/car-hacking-dataset.
10.1109/PST.2018.8514157

the

for

[26] M. Injadat, A. Moubayed, A. B. Nassif, and A. Shami, “Machine
learning towards intelligent systems: applications, challenges, and oppor-
tunities,” Artif. Intell. Rev., 2021, doi: 10.1007/s10462-020-09948-w.
[27] E. Seo, H. M. Song, and H. K. Kim, “GIDS: GAN based intrusion
detection system for in-vehicle network,” in Proc. 16th Annu. Conf.
Privacy, Secur. Trust (PST), Aug. 2018, pp. 1–6.

[28] Garzon, Sandro. (2012). Intelligent In-Car-Infotainment System: A Pro-
totypical Implementation. Proceedings - 8th International Conference on
Intelligent Environments, IE 2012. 371-374. 10.1109/IE.2012.19.

[29] A. Moubayed, E. Aqeeli, and A. Shami, “Ensemble-based Feature Selec-
tion and Classiﬁcation Model for DNS Typo-squatting Detection,” in 2020
IEEE Canadian Conference on Electrical and Computer Engineering
(CCECE), 2020.

[30] A. Moubayed, M. Injadat, A. Shami, and H. Lutﬁyya, “Student Engage-
ment Level in e-Learning Environment: Clustering Using K-means,” Am.
J. Distance Educ., vol. 34, no. 02, pp. 1–20, 2020.

[31] N.V. Chawla, K.W. Bowyer, L.O. Hall, and W.P. Kegelmeyer, ”SMOTE:
Synthetic Minority Over-Sampling Technique,” J. Artiﬁcial Intelligence
Research, vol. 16, pp. 321-357, 2002.

[32] Ahsan, M.M.; Mahmud, M.A.P.; Saha, P.K.; Gupta, K.D.; Siddique, Z.
Effect of Data Scaling Methods on Machine Learning Algorithms and
Model Performance.Technologies 2021, 9, 52

[33] Peng, Joanne & Lee, Kuk & Ingersoll, Gary. (2002). An Introduction
to Logistic Regression Analysis and Reporting. Journal of Educational
Research - J EDUC RES. 96. 3-14. 10.1080/00220670209598786.
[34] L. Yang, R. Muresan, A. Al-Dweik, L.J. Hadjileontiadis, Image-Based
Visibility Estimation Algorithm for Intelligent Transportation Systems,
IEEE Access. 6 (2018) 76728–76740.

[35] L. Yang, D. M. Manias, and A. Shami, “PWPAE: An Ensemble
Framework for Concept Drift Adaptation in IoT Data Streams,” in IEEE
Global Communications Conference (GlobeCom), 2021, pp. 1–6.

[36] Ali, Jehad & Khan, Rehanullah & Ahmad, Nasir & Maqsood, Imran.
(2012). Random Forests and Decision Trees. International Journal of
Computer Science Issues(IJCSI). 9.

[37] Aziz, NorShakirah & Akhir, Emelia & Aziz, Associate Professor Dr Iz-
zatdin & Jaafar, Jafreezal & Hasan, Mohd Hilmi & Abas, Ahmad. (2020).
A Study on Gradient Boosting Algorithms for Development of AI Moni-
toring and Prediction Systems. 11-16. 10.1109/ICCI51257.2020.9247843.
[38] L. Yang and A. Shami, “A Lightweight Concept Drift Detection and
Adaptation Framework for IoT Data Streams,” IEEE Internet Things
Mag., vol. 4, no. 2, pp. 96–101, 2021

[39] M. Zhang and Z. Zhou, ”A Review on Multi-Label Learning Algo-
rithms” in IEEE Transactions on Knowledge & Data Engineering, vol.
26, no. 08, pp. 1819-1837, 2014.

[40] Sazli, Murat. (2006). A brief review of feed-forward neural networks.
Communications, Faculty Of Science, University of Ankara. 50. 11-17.
10.1501/0003168.

[41] Hochreiter, Sepp & Schmidhuber, J¨urgen.(1997). Long Short-term Mem-

ory.Neural computation. 9. 1735-80. 10.1162/neco.1997.9.8.1735

[42] L. Yang and A. Shami, “On Hyperparameter Optimization of Machine
Learning Algorithms: Theory and Practice,” Neurocomputing, vol. 415,
pp. 295–316, 2020.

[43] S. Aleyadeh, A. Moubayed, P. Heidari and A. Shami, ”Optimal Con-
tainer Migration/Re-Instantiation in Hybrid Computing Environments,”

