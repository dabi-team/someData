0
2
0
2

b
e
F
6
2

]

R
C
.
s
c
[

2
v
7
6
6
0
1
.
2
0
0
2
:
v
i
X
r
a

CybORG: An Autonomous Cyber Operations Research Gym

Callum Baillie1, Maxwell Standen2, Jonathon Schwartz3, Michael Docking2, David
Bowman2, and Junae Kim2

1Department of Defence
{callum.baillie}@defence.gov.au
2Defence Science and Technology
{max.standen, david.bowman, michael.docking, junae.kim}@dst.defence.gov.au
3Australian National University
{jonathon.schwartz}@anu.edu.au

Abstract

Autonomous Cyber Operations (ACO) involves the
consideration of blue team (defender) and red team
(attacker) decision-making models in adversarial sce-
narios. To support the application of machine learn-
ing algorithms to solve this problem, and to encour-
age such practitioners to attend to problems in the
ACO setting, a suitable gym (toolkit for experiments)
is necessary. We introduce CybORG, a work-in-
progress gym for ACO research. Driven by the need
to eﬃciently support reinforcement learning to train
adversarial decision-making models through simula-
tion and emulation, our design diﬀers from prior re-
lated work. Our early evaluation provides some ev-
idence that CybORG is appropriate for our purpose
and may provide a basis for advancing ACO research
towards practical applications.

1

Introduction

1.1 Autonomous Cyber Operations

Autonomous Cyber Operations (ACO) is concerned
with hardening and defending computer systems and
networks through autonomous decision-making and
action. We are motivated by the need to protect sys-
tems that may be isolated or operate in contested en-

vironments where skilled human operators may not
be present nor have remote access, and to unlock the
potential for rapid and wide scale cyber operations.
This setting has characteristic properties. ACO
is adversarial and evolving: behaviour is appropriate
when it best achieves objectives in the face of evolving
adversary behaviour (tactics, techniques and proce-
dures, or TTPs). Thus the setting incorporates blue
team and red teams and terrain (i.e., hosts and net-
works). Addressing these together requires that ACO
research should be concerned with both red and blue
team decision making models that may co-evolve.

Further, ACO is dynamic, the terrain may change
in uncontrolled or unpredictable ways or as the delib-
erate results of red and blue activity. Importantly it
is also varied ; whilst it might be interesting to solve
for decision making models that are optimal for a
given single scenario or conﬁguration, computer se-
curity problems are varying and diverse. Consider
by way of metaphor that we wish to solve Chess960
(random starting positions each game) rather than
standard Chess. By generalising over diverse and dy-
namic scenarios, decision-making models might be-
come resilient to variations in the environment, ren-
dering them more adaptable and reliable.

Finally, ACO environments have high complexity
and dimensionality, with very many interdependent
and related components and large state (information

1

 
 
 
 
 
 
relevant to decision-making and goals) and action
(choices) spaces. Given that decision-making may
be considered a mapping from state to action, this is
generally a harder problem for larger state and action
spaces.

1.2 Learning ACO

These characteristics (adversarial, evolving, dynamic,
varied, high complexity and dimensionality) suggest
a learning approach for developing decision-making
models that are trained and evaluated across a wide
range of adversary behaviours and scenarios.

One possible approach is supervised learning,
where a dataset provides examples of optimal deci-
sions at each state of a game which may be used
for training, validating and evaluating models. How-
ever, due to the aforementioned characteristics, col-
lecting relevant datasets and adapting to evolving
adversaries could prove problematic for supervised
learning.

An alternative approach is reinforcement learning,
in which an agent 1 learns by interacting with an en-
vironment in a trial-and-error manner guided by re-
wards for achieving desirable results. In this way, the
algorithm learns optimal solutions by trying to max-
imize its reward [22]. Reinforcement learning can be
very eﬀective in high complexity, high-dimensional
environments. Following this direction requires an
appropriate gym or environment for training.

However, a typical problem in reinforcement learn-
ing is the requirement for a high number of sam-
ples and in many applications the resource cost and
time taken to train in real world environments is pro-
hibitive or impractical
[21, 1]. Often algorithms can
take considerable time and resources just to begin
converging on a merely adequate solution, with an
optimal one still being some distance away [13].

The adversarial and varied setting of ACO excacer-
bates the problems RL has with complexity. Training
co-evolving red and blue team models and training
across dynamic and varied scenarios compound these
challenges.

1Throughout this paper we use the term agent as in [22],
to paraphrase: a decision-making agent that seeks to achieve
a goal in its environment.

A common strategy for overcoming this problem is
to use simulations of a problem with lower ﬁdelity
and lower cost as a training ground and to then
transfer the models to a higher ﬁdelity environment
[21, 13]. However, while simulations are often useful,
they come with their own set of challenges, not the
least of which is that it can be diﬃcult to build a
suﬃciently accurate model to have any hope of real
world application [1]. Thus, the need for real world
or high-ﬁdelity, high accuracy environments remains.
Another concern when applying machine learning
is overﬁtting. A model may produce solutions that
work well for one speciﬁc problem and environment,
but perform poorly when applied to similar problems
or environments
[9, 1, 24, 6]. There are numerous
strategies to combat this problem including sampling
multiple environments
[24, 6], and varying evalua-
tion conditions [24], but these depend on the ability
to modify and vary an environment. This further
motivates the need for an ACO gym where the envi-
ronments can be varied and dynamic.

1.3 A Gym for ACO

This work is focused on a suitable environment for in-
tensive reinforcement learning towards ACO. We are
inspired by such toolkits such as OpenAI Gym [4]
(hence our adoption of gym) which provide a basis for
learning experiments and a set of benchmarks with
which to measure progress and evaluate competing
approaches. We here propose a number of require-
ments appropriate for a gym for ACO research.

Firstly, we favour both simulation and emulation
modes for playing through ACO scenarios. Simu-
lation presents the most eﬃcient means to achieve
millions of episodes for reinforcement learning nec-
essary for agents to train, whilst emulation presents
the most realistic environment within which to expe-
rience and learn such that the derived models might
behave appropriately in the real world. For inten-
sive reinforcement learning, it may be appropriate
to train a model in simulation (most eﬃcient), and
later optimise the model in emulation (most realis-
tic), which confers an added beneﬁt that that the
simulation need not be highly accurate. Therefore
we require the ability to play the same scenario in

2

both simulation and emulation modes, with the same
APIs presented to decision-making models and learn-
ing systems.

Given that we envisage intensive reinforcement
learning over millions of scenarios, it is advantageous
to leverage cloud computing resources for elastic, par-
allel and large scale experiments. This requires an
ACO gym that may operate with and on commonly
used cloud infrastructure. Given the potential need
to play millions of games to train decision-making
models, the toolkit should be as eﬃcient and low cost
as possible.

[2]
Informed by the OpenAI Gym [4] and Atari
environments, it is desirable for a library of scenarios
or games to be available that provides a series of in-
creasingly challenging and diverse settings and tasks
as challenges and benchmarks. Necessarily for ACO,
it is an important feature that each be controllable
to incorporate variability and dynamics. We also re-
quire the scenarios to be adversarial, with red and
blue teams competing to achieve their objectives and
disrupt their opposition.

We envisage that such a gym would be appropriate
for learning ACO decision-making models, but may
also ﬁnd other uses for operator training, human-
machine teaming (performing with or against an
ACO system), or discovering or evaluating tactics
and capabilities. Therefore it is important that the
gym and its API and interfaces are easy to use and
understand.

The following section presents relevant work in cy-
ber ranges, simulation and emulation environments
that have been developed for purposes including
research and training operators. The design and
work-in-progress implementation of CybORG are de-
scribed in Sections 3 and 4, with Section 5 providing
an early evaluation considering the results of initial
learning experiments. We conclude this paper with
our conclusions and plans for future work.

2 Related Work

There are a growing number of cyber security en-
vironments designed for experimentation, many of
these have been considered but the requirements for

both a high and low ﬁdelity modes, the interface fa-
cilitating reinforcement learning for adversarial cyber
operations and the environment being eﬃcient ﬂexi-
ble and scalable means that no current environment
is suitable. A summary of various environments with
our requirements can be found in Table 1.

DETERlab [15], is a specialised cyber security ex-
perimentation environment based on EMUlab [12].
It supports cyber security experimentation through
the emulation of hosts and networks. DETERlab has
limited maximum network size because it uses a lo-
cal setup of physical hardware which prevents scaling
the emulation to the size of a large enterprise-like net-
work. DETERlab is not designed to be reset quickly
and can take a signiﬁcant amount of time to set up
a network. This is impractical for machine learning
because of the number of episodes that are often re-
quired to train an agent.

There have been several other environments in-
spired by DETERlab that have overcome such scal-
ability limitations. VINE [8], SmallWorld [10] and
BRAWL [7] leverage scalable infrastructure such as
cloud-based Infrastructure as a Service (IaaS) and ef-
ﬁcient virtualisation frameworks such as OpenStack
to emulate larger enterprise-like networks. These
tools can simulate users acting on a host which are
designed to generate human-like activity for the pur-
pose of experimentation with diﬀerent tools. These
agents are not capable of learning and are often
scripted with no ability to utilise reinforcement learn-
ing to improve their performance. BRAWL can make
use of CALDERA [3, 14] as an red team agent to pro-
duce a more realistic experimentation testbed. It is
limited to the emulation of Windows hosts only.

GALAXY [19] is an emulated cyber security envi-
ronment which has been used to train red agents us-
ing an evolutionary algorithm to learn how to blend
in reconnaissance traﬃc with that produced by a nor-
It has limited scalability because it cur-
mal user.
rently uses a hypervisor that restricts the scenario
to a single VM per physical machine. It utilises the
snapshot feature to perform fast resets of VMs in an
environment.
Insight [11]

is a network simulation for experi-
ments. It is shown to be scalable and can simulate
Insight is
hundreds of hosts on a single computer.

3

Simulation Emulation
No
DETERlab [15]
No
VINE [8]
No
SmallWorld [10]
No
BRAWL [7]
No
Galaxy [19]
Yes
Insight [11]
CANDLES [18]
Yes
Pentesting Simulations [17, 20] Yes
Yes
CyAMS [5]
Yes
CybORG

Yes
Yes
Yes
Yes
Yes
No
No
No
Yes
Yes

Scalable Flexible
Low
Med
Med
Med
Low
High
High
High
High
High

Eﬃcient Adversarial CO Designed for RL
Low
Yes
Med
Yes
Med
Yes
Windows
Med
Debian-based High
Med
Yes
High
Yes
Med
Yes
High
Yes
High
Yes

No
No
No
Limited
Yes
No
Yes
Yes
No
Yes

No
No
No
No
Limited
No
Limited
Limited
No
Yes

Table 1: Existing Environments and CybORG Design vs ACO Research Requirements

only realistic from an attacker’s standpoint thus only
capable of facilitating red agents. This prevents the
simulation from being used to perform adversarial cy-
ber operations. Insight does not feature a reinforce-
ment learning interface.

simulation. The aim of CyAMS is to use emulation
and simulation in conjunction where a portion of the
environment is emulated when higher ﬁdelity is re-
quired otherwise simulation can be used to provide
massive scalability with up to billions of clients.

CANDLES [18] leverages a high speed network se-
curity simulation to coevolve adversarial blue and
red agents using an evolutionary algorithm. The red
agent learns the best tactics to attack a network, how-
ever it is capable of taking unrealistic actions such as
discovering an exploit which may work in the simu-
lation but practically would take a cyber operations
team a signiﬁcant amount of time and resources to
discover during an operation. The blue agent learns
how to preconﬁgure the network to make it more se-
cure, however the amount of actions blue can take is
limited during the operations phase by the amount
of noise made by the red agent.

Pen testing simulations [17, 20] have been used to
train red agents using reinforcement learning. These
simulations use a realistic action space to enable
agents to learn how to attack a network. The simu-
lations can feature blue and grey agents to simulate
defenders and neutral users. Blue agents act as a pre-
deﬁned impediment to red. Grey agents may hinder
or help red by taking actions that change the state of
the environment.

CyAMS [5] uses a combined emulation and simula-
tion environment. CyAMS simulates a cyber security
environment using a Finite State Machine (FSM).
CyAMS also features an emulation and compares the
simulation with the emulation using a malware prop-
agation scenario to demonstrate the ﬁdelity of the

CybORG aims to provide a scalable, eﬃcient and
ﬂexible training environment that uses a high ﬁdelity
emulation and lower ﬁdelity simulation to facilitate
reinforcement learning for the coevolution of red and
blue agents capable of executing cyber operations.

3 Design

This section presents the overall design for CybORG
(see Figure 1) incorporating simulation and emula-
tion with a common API to support reinforcement
learning for autonomous and adversarial cyber oper-
ations.

3.1 Low-Fidelity Simulation

CybORG’s simulated environment is designed to be
fast and lightweight, able to run thousands of inter-
actions per second on a single host. This is achieved
using a ﬁnite state machine design that can model
networks, hosts and actions informed loosely by the
real world behaviour of these components. The simu-
lator can model the stochastic nature of some actions,
but is not required to accurately capture or model
real world behaviour since the emulation is available
for reﬁnement of decision-making models, maximis-
ing simulation eﬃciency and reducing development

4

Figure 1: CybORG Design

eﬀort. By keeping the simulation design lightweight,
it is relatively cheap to scale.

3.2 High-Fidelity Emulation

To provide an accurate environment in which to per-
form reinforcement learning, CybORG’s design incor-
porates a high-ﬁdelity emulation environment. By
employing Virtual Machines (VMs) deployed and or-
ganized into realistic networks, with actual cyber-
related software tools in real-time, it can provide real
inputs, outputs and behaviour. The emulator design
allows for rapid deployment, conﬁguration and man-
agement of numerous permutations of scenarios with
varying complexity and supports cloud deployments
for elastic scalability, limited only by budget.

3.3 Common API and Interface

CybORG’s design supports reinforcement learning of
a single decision-making model in both environments:
a low-ﬁdelity, eﬃcient simulation and a high-ﬁdelity,
realistic emulation. Switching between the two envi-
ronments is smoothly enabled by a common API and
user interface for controlling experiments and access-
ing game state and action space.

3.3.1 Deployment

The deployment interface provides a lightweight
means of describing the desired scenario (using con-
ﬁguration ﬁles) that works seamlessly across both the
simulation and emulation environments. In simula-
tion, the environment is simulated entirely in soft-

5

ware, in the emulation, the environment is deployed
in AWS based on the information provided by the
conﬁguration ﬁles. By using AWS, the emulation is
able to deploy multiple isolated instances of environ-
ments simultaneously.

3.3.2 Cyber Operations Interface

CybORG provides an interface to enumerate the ac-
tion and state space of a given environment and to
execute actions. For the purposes of discovering opti-
mal solutions, it isn’t necessary for algorithms to have
any notion of how an action is performed. CybORG
wraps the environment and presents only the infor-
mation and degrees of freedom that an algorithm
needs to train. This interface is common for both
the simulation and emulation environments (see Fig-
ure 2).

Figure 2: The CybORG Common Interface

6

CybORG enables host interaction through the use
of SSH connections to one or more hosts in the envi-
ronment which act as entry points for the red, blue or
white teams. From these access points, CybORG in-
teracts with the terminal and performs actions much
the same as any human operator would: by enter-
ing commands and parsing the results. This control
scheme allows for multiple adversarial agents to act
asynchronously and simultaneously in the environ-
ment.

4

Implementation

CybORG is in active development and new features
are being implemented regularly. The details of how
various components of CybORG have been imple-
mented follow.

4.1 Deployment

Deploying a particular scenario involves specifying
whether it will be simulated or emulated (a ﬂag) and
providing a scenario description ﬁle (YAML). The
scenario ﬁle includes details for conﬁguring the envi-
ronment including hosts, networking and subnet in-
formation, and the set of actions available to red and
blue agents. The scenario ﬁles are deliberately sim-
ple, requiring a minimum of information and employ-
ing many default behaviours to reduce the burden on
users when creating ﬁles.

The supported host conﬁgurations and actions are
speciﬁed in separate ’Images’ and ’Actions’ YAML
Parameters for hosts include
ﬁles, respectively.
”Name”, ”OS”, ”Services”, ”Credentials” and an ID
for an image of a deployable image in AWS (for the
emulation).

Action parameters describe the set of possible red
and blue team actions, constituting the action space.
By combining diﬀerent network architectures with se-
lections from the available images and actions it be-
comes possible for users to generate and permute a
wide variety of diﬀerent scenarios.

A network diagram of an example scenario that is
included with CybORG and that can be deployed in

both the Simulation and Emulation components of
CybORG is shown in Figure 3.

Figure 3: A CybORG Scenario

4.2 Emulation

The emulation currently uses Amazon Web Services
(AWS) with virtual machines to create a high ﬁdelity
cyber security environment, though it is intended
that CybORG support a wide range of cloud/IaaS
options.

4.2.1 Deployment-Emulation

The emulation uses the description of the scenario
from the YAML scenario ﬁles to deploy and conﬁgure
a virtual network in Amazon Web Services (AWS).
It does this by using SSH to access a virtual gate-
way server in a private AWS cloud and then deploy-
ing and conﬁguring environments using AWS’s Com-
mand Line Interface (CLI) on that virtual (master)
host using the following functions:

• Automatically creating and deleting IPv4 sub-
nets based on the number of IP addresses re-
quired in each subnet according to the scenario

• Automatically conﬁguring routing between sub-

nets according to the scenario

• Automatically creating and deleting instances of
static host images and assigning them to subnets
according to the scenario

Using these high-level functions, CybORG is ca-
pable of rapidly and concurrently deploying indepen-
dent clusters of hosts and subnets, allowing multiple

7

scenarios, or ’games’ to be played in parallel. By
using IaaS it also has the advantages those oﬀerings
provide in that it is scalable, eﬃcient and low cost.
This is especially important when conducting rein-
forcement learning experiments where ﬂexible and
rapid deployment of multiple parallel games is neces-
sary to reduce overall training time.

4.2.2 Cyber Operations

The emulation provides an interface for red and blue
agents to conduct cyber operations. CybORG imple-
ments actuators for cyber security actions and sensors
for information gathering from the environment.

Though functional cyber-attack ’games’ are al-
ready playable, the emulation’s cyber operations
functions are nascent. New actions and state in-
formation continue to be added and the depth and
breadth of the cyber operations interface is improving
rapidly. The environment’s state properties include
global properties such as known credentials, informa-
tion about the network layout and subnet structure
and local properties for each host including operating
system information and discovered services. The en-
vironment’s action space includes the ability to per-
form reconnaissance by using scans such as an ICMP
(’ping’) scan or a TCP SYN scan using Nmap or it
can attack a host and obtain credentials using brute-
forcing tools such as THC-Hydra. ’Blue’ actions are
being developed and will mirror those available in the
simulation.

4.3 Simulation

The simulation environment of CybORG provides a
lightweight and eﬃcient model for ACO research. It
is implemented as a script employing a FSM that
uses classes for hosts and subnets to simply model a
computing environment with security tools.

4.3.1 Deployment-Simulation

The simulation generates an environment from the
same YAML scenario ﬁle as the emulation. The sim-
ulation models the cyber environment as a set of sub-
nets, hosts and actions which are abstract objects

used to model the real world. A host represents a sin-
gle machine in the network and is deﬁned by a num-
ber of attributes and actions. Attributes of a host
include its name, network address, operating system,
the services it is running, credentials that it accepts
and its value to an attacker. Each subnet is deﬁned
by an address range, hosts within each subnet, rout-
ing information between itself and other subnets.

The simulator generates a single local model for
each scenario instance, regardless of its size or com-
plexity. This has the advantage that there is no net-
work overhead during simulation for eﬃciency. The
implementation is intended to maximise the number
of concurrent simulations.

4.3.2 Cyber Operations

Simulated actions are deﬁned by their preconditions,
eﬀects, cost and success probability. Each action is
’executed’ from a host and certain actions such as a
scan may target a diﬀerent object such as a subnet
or another host. The preconditions of an action are
the state conditions that must be satisﬁed if the ac-
tion is to be available. The eﬀects deﬁne how the
action will change the state of the environment if the
action is successful. The cost is used to model the
abstract cost of taking an action as part of the rein-
forcement learning and action selection process. This
can be used to represent any metric of action perfor-
mance such as time to complete or negative impact
on the environment. The success probability is used
to model the sometimes stochastic nature of actions
in a computing and networking environment, and de-
ﬁnes the probability an action will succeed given all
its preconditions are met. The actions available in
the simulation correspond to those available in the
emulation, though the simulation currently has more
actions available for the blue team. As new actions
are added, they will be added concurrently to the
emulation and the simulation.

The simulation maintains a hidden fully observed
state of the environment and only returns the rel-
evant information to each (red or blue) agent after
each action. In this way the simulation reﬂects the
partial observability of the real world where a lot of
information is hidden from each agent until revealed

through its actions.

5 Evaluation

In this section, we demonstrate the development and
testing of reinforcement learning based-agents to per-
form cyber operations in the simulation. The current
state of CybORG allows for red team actions to be
taken so we have used CybORG to train a red team to
solve Capture the Flag (CTF) scenarios. To accom-
plish this we have created CTF scenarios that feature
a network of vulnerable hosts connected in diﬀerent
subnets. The nature of the game is representative of
a simple penetration test where a red team must ex-
ploit machines, gather intelligence and pivot through
a network.

We have used Double Deep Q Networks
(DDQN) [23] to create agents and perform cy-
ber operations on CybORG. DDQN extends Deep Q
Networks (DQN) [16] which are a deep reinforcement
learning method which approximates the Q function
(the expected future reward function given state
and action) using deep neural networks. Unlike
DQNs, DDQNs estimate Q values separately for
selection and evaluation of an actions, preventing
over-optimistic value estimation.

The experiment was run using a simple scenario
consisting of 3 subnets with 3 hosts each as illustrated
in Fig 3. One of hosts in the secure subnet has the
ﬂag which is the target of an attacking agent, a red
team. The goal of the red agent is to capture the ﬂag
by obtaining privileged access to the target machine.
Each machine has multiple avenues for attack, some
with lower probability and some dead ends. The sce-
nario has multiple paths/tactics leading to success for
red.

A maximum reward of 1 could be obtained per
episode by the agent. An episode ended when ei-
ther 1000 steps had been taken or when the ﬂag in
the scenario had been captured. There were 10 in-
dependent runs with a maximum of 1000 steps per
episode and 1000 episodes per run.

Fig. 4 illustrates the total reward and the number
of steps, averaged over 25 runs, to determine the per-
formance of the agent. The rewards are initially high

8

marks and to provide an easy to use interface.

7 Future Work

Our next step is to perform reinforcement learning
with emulation mode to conﬁrm that it functions as
expected with the same interface and APIs as the
simulation mode.

We then intend to perform mixed learning to train
a single model under both simulation and emulation
to conﬁrm that this approach achieves eﬃcient and
eﬀective learning with CybORG.

With just a single and simple scenario/game cur-
rently available, we intend to signiﬁcantly expand the
library of scenarios/games available, which once done
will lead to the ﬁrst public release of CybORG to the
security and AI research communities.

Availability

Limited access to CybORG will be available for re-
viewers, with a public release planned once the sce-
nario library is expanded.

References

[1] P. Abbeel et al. Using inaccurate models in re-
inforcement learning. In Proceedings of the 23rd
international conference on Machine learning,
pages 1–8. ACM, 2006.

[2] M. G. Bellemare and. The arcade learning en-
vironment: An evaluation platform for general
agents.
Journal of Artiﬁcial Intelligence Re-
search, 47:253–279, jun 2013.

[3] A. Applebaum et al. Intelligent, automated red
team emulation. In Proceedings of the 32Nd An-
nual Conference on Computer Security Applica-
tions, ACSAC ’16, pages 363–373, New York,
NY, USA, 2016. ACM.

[4] G. Brockman

al.
arXiv:1606.01540, 2016.

et

OpenAI

gym.

Figure 4: Results from training a DDQN agent on
the scenario with 9 hosts

due to random exploration of the state space result-
ing in the successful capture of the ﬂag. The graph
indicates that an agent can be trained to consistently
capture all ﬂags in the scenario.

6 Conclusion

This paper introduced CybORG, a work-in-progress
gym for Autonomous Cyber Operations research.

Whilst there have been ongoing development to-
wards simulation and emulation environments for cy-
ber training and/or experiments, the requirements of
ACO motivate an integrated design comprising em-
ulation and simulation modes to support large scale
reinforcement learning across diverse scenarios.

We have made progress towards implementing this
design, with the ability to spawn and play games ei-
ther in simulation or emulation modes with cloud in-
frastructure, and we have performed reinforcement
learning experiments with it.

CybORG or gyms like it could assist the rein-
forcement learning research community to apply their
techniques to solve cyber operations problems, by
providing an easy to use toolkit and a set of bench-
mark problems for guiding and measuring progress.
The primary limitation of CybORG as currently
constituted is its relative immaturity. More work is
required to develop libraries of scenarios and bench-

9

[5] S. Brown et al. Validation of network simula-
tion model and scalability tests using example
malware. In MILCOM 2016 - 2016 IEEE Mil-
itary Communications Conference, pages 491–
496, Nov 2016.

[15] J. Mirkovic et al. The DETER project: Advanc-
ing the science of cyber security experimentation
and test. In 2010 IEEE International Conference
on Technologies for Homeland Security (HST),
pages 1–7, Nov 2010.

[6] K. Cobbe et al. Quantifying generalization in re-
inforcement learning. arXiv:1812.02341, 2018.

[7] The MITRE Corporation. BRAWL. https://

github.com/mitre/brawl-public-game-001.

[8] T. Eskridge et al. VINE: A cyber emulation
environment for mtd experimentation. In Pro-
ceedings of the Second ACM Workshop on Mov-
ing Target Defense, MTD ’15, pages 43–47, New
York, NY, USA, 2015. ACM.

[9] J. Farebrother et al. Generalization and regular-
ization in DQN. arXiv:1810.00123, 2018.

[10] A. Furfaro et al. A cloud-based platform for the
emulation of complex cybersecurity scenarios.
Future Generation Computer Systems, 89:791 –
803, 2018.

[11] A. Futoransky et al. Simulating cyber-attacks

for fun and proﬁt. In SimuTools, 2009.

[12] M. Hibler et al. Large-scale virtualization in the
Emulab network testbed. In USENIX 2008 An-
nual Technical Conference, ATC’08, pages 113–
128, Berkeley, CA, USA, 2008. USENIX Associ-
ation.

[13] A. Marco et al. Virtual vs. real: Trading
oﬀ simulations and physical experiments in re-
inforcement learning with bayesian optimiza-
tion. In 2017 IEEE International Conference on
Robotics and Automation (ICRA), pages 1557–
1563. IEEE.

[14] D. Miller et al. Automated adversary emulation:
A case for planning and acting with unknowns.
https://www.mitre.org/publications/technical-
papers/automated-adversary-emulation-a-case-
for-planning-and-acting-with, 2018.

[16] V. Mnih et al. Human-level control through deep
reinforcement learning. Nature, 518:529 EP –,
Feb 2015.

[17] S. Niculae. Reinforcement learning vs genetic
algorithms in game-theoretic cyber-security, Oct
2018.

[18] G. Rush et al. Coevolutionary agent-based net-
work defense lightweight event system (CAN-
DLES). In Proceedings of the Companion Pub-
lication of the 2015 Annual Conference on Ge-
netic and Evolutionary Computation, GECCO
Companion ’15, pages 859–866, New York, NY,
USA, 2015. ACM.

[19] K. Schoonover et al. Galaxy: A network em-
ulation framework for cybersecurity.
In 11th
USENIX Workshop on Cyber Security Experi-
mentation and Test (CSET 18), Baltimore, MD,
2018. USENIX Association.

[20] J. Schwartz and H. Kurniawati. Autonomous
Penetration Testing using Reinforcement Learn-
ing. arXiv:1905.05965, 2019.

[21] V. Suryan et al. Multi-ﬁdelity reinforcement

learning with gaussian processes. 2017.

[22] R. Sutton and A. Barto. Reinforcement learning:

An introduction. 2011.

[23] H. van Hasselt et al. Deep reinforcement learning
with double Q-learning. Thirtieth AAAI Confer-
ence on Artiﬁcial Intelligence, March 2016.

[24] S. Whiteson et al. Protecting against evaluation
overﬁtting in empirical reinforcement learning.
In 2011 IEEE Symposium on Adaptive Dynamic
Programming and Reinforcement Learning (AD-
PRL), pages 120–127. IEEE.

10

