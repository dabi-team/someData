1
2
0
2

r
p
A
1

]

R
C
.
s
c
[

1
v
1
1
0
1
0
.
4
0
1
2
:
v
i
X
r
a

ON SECURING CLOUD-HOSTED CYBER-PHYSICAL SYSTEMS USING TRUSTED
EXECUTION ENVIRONMENTS

Amir Mohammad Naseri, Walter Lucia, Mohammad Mannan, Amr Youssef

Concordia Institute for Information Systems Engineering (CIISE)
Concordia Univerity, Montreal, Canada.

ABSTRACT

Recently, cloud control systems have gained increasing atten-
tion from the research community as a solution to implement
networked cyber-physical systems (CPSs). Such an architec-
ture can reduce deployment and maintenance costs albeit at
the expense of additional security and privacy concerns. In
this paper, ﬁrst, we discuss state-of-the-art security solutions
for cloud control systems, and their limitations. Then, we pro-
pose a novel control architecture based on Trusted Execution
Environments (TEE). We show that such an approach can po-
tentially address major security and privacy issues for cloud
hosted control systems. Finally, we present an implementa-
tion setup based on Intel Software Guard Extensions (SGX),
and validate its effectiveness on a testbed system.

Index Terms— Cyber-Physical Systems, Trusted Exe-
cution Environments, Intel SGX, Cloud Computing, Control
Systems Security.

1. INTRODUCTION

With the development of cloud services, the implementation
of industrial control systems into the cloud has received in-
creasing attention. The use of such services saves on the
cost of setting up and maintaining industrial control sys-
tems (ICS), as well as off-loading computationally expensive
tasks. Moreover, when ICS are geographically distributed,
these cloud services are highly available and accessible from
different locations [1]. The main concern when using cloud
services in such applications is the security and privacy of the
cloud environment, and communication channels between
the plant and the controller.

Different approaches have been proposed to enhance the
security and privacy of networked CPSs where the controller
is hosted in a cloud infrastructure. For example, Zhou et
al. [2] propose the use of conventional cryptographic algo-
rithms to secure plant-to-cloud communication. Kogiso and
Fujita [3] propose the use of homomorphic encryption to en-
sure that the controller’s operations can be performed without
decrypting the received data, and hence addressing the conﬁ-
dentiality problem in the cloud (in addition to securing com-
munication channels). Homomorphic encryption-based solu-

tions have received increasing attention by the CPSs commu-
nity; for full homomorphic and Pailier’s homomorphic based
solutions, see e.g., [4–7]. However, these homomorphic solu-
tions suffer from unavoidable limitations related to the arith-
metic operations allowed by the homomorphic schemes, ci-
phertext size explosion, and computation overhead. For so-
lutions targeting only securing communication channels can-
not protect controller logic and data against a malicious or
compromised cloud provider. For data and execution secu-
rity in the context of IoT and CPS applications, Shepherd et
al. [8] survey and compare several existing secure and trusted
computing environments such as Trusted platform Module
(TPM), Secure Elements (SE), Trusted Execution Environ-
ments (TEEs), and Encrypted Execution Environments (E3).
In this paper, we explore the use of encryption and trusted
execution environments to secure plant-to-cloud communica-
tion channels and protect data and controller logic for cloud-
hosted CPS applications. To understand performance impli-
cations of our approach, we also design and implement a sim-
ple prototype for the quadruple tank system [9], using Intel
SGX as our TEE. Our results indicate that the introduced
overhead is negligible, and highly-scalable yet secure CPS ap-
plications can be designed for a cloud-deployment scenario.
We hope that our initial results may be useful to the CPS se-
curity community and encourage the design of more efﬁcient
and secure TEE-based solutions compared to current schemes
that rely mostly on conventional cryptographic mechanisms
and homomorphic schemes.

2. SYSTEM SETUP AND THREAT MODEL

A typical cloud-based, networked control system consists of
following main components:
the plant, the controller, the
cloud, and the communication channels. The plant is the
physical entity that we want to control. It is usually equipped
with a set of actuators and sensors. The controller col-
lects the sensor measurements and computes, according to a
pre-deﬁned control logic, the control commands sent to the
actuators. In a cloud-based networked setup, the controller
and the plant are spatially distributed, and the controller logic
is implemented in a cloud service provider. The communi-
cation channels are used for a real-time and bi-directional

 
 
 
 
 
 
Actuators

Decryption

Plant

Key

Sensors

Actuators

Encryption

Homomorphic Decryption

Plant

Key

Sensors

Homomorphic Encryption

Cloud Service

Cloud Service

Encryption

Key

Decryption

Controller

Controller

(a) Encrypted communications.

(b) Homomorphic encryption.
Fig. 1: Existing security solutions for cloud-based CPSs.

exchange of data (e.g., sensor measurements and control
inputs) between the plant and the controller.
Threat Model. We consider the following attacks that can
affect the privacy/security of the cloud-based CPS controllers.
Attacks against the communication channels - By adopt-
ing the conventional Dolev-Yao threat model [10], a mali-
cious entity with access to the public communication chan-
nels is assumed to be able to eavesdrop on the transmitted
data and/or modify their content. Therefore, potentially,
the conﬁdentiality and the integrity of the control system
Indeed, such attackers can exploit
could be compromised.
the eavesdropped data to gain further information about the
controlled system’s behaviour and use their disruptive capa-
bilities to launch sophisticated undetectable attacks such as
replay, covert, zero-dynamics attacks [11, 12].

Attacks against the cloud service - If the cloud operator
is malicious, or if the service is vulnerable, then an unau-
thorized entity (e.g., malware authors) might be able to gain
access to the data transmitted between the plant and the con-
troller, even if encrypted and authenticated communications
are used. Indeed, such attackers could read the encryption key
(key-management problem), intercept the transmitted data af-
ter decryption, and change the control logic (with the conse-
quence of jeopardizing the whole control loop).

3. EXISTING SOLUTIONS

Different schemes have been proposed to secure networked
control systems. A common solution is to use encrypted
authenticated communications between the plant and the
controller [13]; see Fig. 1a. Such a solution, at the cost of in-
creased computational power to perform encryption/decryption
operations at both the plant and controller’s sides of the CPS,
can mitigate the privacy and security issues related to cyber-
attacks against the communication infrastructure. On the
other hand, it does not address the security and privacy risks
associated with the controller’s deployment inside the cloud.
The use of homomorphic encryption has also been pro-
posed to secure CPS solutions [3, 14]; see Fig 1b. A distinc-
tive capability of such a solution is that it allows the controller
to implement the control logic (in terms of a additions and
multiplications operations) directly on the received encrypted
sensor measurements. Consequently, such an approach has

the advantage of securing the communications while solv-
ing the privacy issues associated with the cloud infrastruc-
ture. However, common drawbacks of homomorphic encryp-
tion include: the mathematical operations performed on the
encrypted data are typically limited and computationally ex-
pensive; and the plaintext to ciphertext bit expansion factor
is usually very high. Consequently, homomorphic-based so-
lutions might not be practical for securing industrial control
systems with fast sampling rate or narrow bandwidth.

There are three different types of homomorphic encryp-
tion schemes, namely partially homomorphic encryption
(PHE), somewhat homomorphic encryption (SHE), and fully
homomorphic encryption (FHE). Each subclass is character-
ized by the set and number of encrypted operations allowed.
Therefore, according to the limitations imposed by the used
scheme, it might be challenging to recast any existing control
algorithm into its encrypted counterpart. For example, FHE
allows an unlimited number of encrypted addition and multi-
plication operations and therefore it is particularly appealing
to implement sophisticated control solutions such as dynamic
feedback control or model predictive control. However, such
a freedom comes with a computational expensive bootstrap-
ping process that makes FHE impractical to most control
systems. Kim et al. [4] propose FHE to implement a dynamic
output feedback controller using multiple controllers to avoid
the bootstapping delay. However, another inherent issue with
FHE is that the ciphertext expansion might be up to 10000 : 1
for an acceptable level of security of 100 bits [15]. Pailier’s
homomorphic encryption (PHE, supporting only encrypted
additions) has also been proposed to implement a variety of
controllers [5, 6]. However, due to memory issues related to
the state of dynamic encrypted controller (i.e., the number
of bits required for its representation grows linearly with the
number of iterations), the solution is limited to the use of
resetting dynamics control laws. PHE was also proposed by
Lin et al. [7], where it is shown that only a subset of the real
control gains can be used (according to the available bits).

Overall, existing solutions pose several limitations in
terms of security/privacy/deployability to networked control
systems. Moreover, no solutions have been proposed to pro-
tect CPSs against a malicious cloud operator, or malware
that might be able to compromise the integrity of the control
algorithm running on the cloud server.

4. OUR PROPOSAL
The objectives of our proposal are: secure the cloud-based
CPSs against all the cyber-threat discussed in Section 2, and
reduce the impact on the design and implementation of exist-
ing control strategies. The proposed secure control architec-
ture has two essential components (see Fig. 2): an authen-
ticated encryption scheme for securing the communication
channels, and a TEE where the control logic is executed and
the secret cryptographic keys, used by the authenticated en-
cryption scheme, are stored.

Actuators

Decryption

Plant

Key

Sensors

Encryption

Cloud Service

Trusted Execution Environment (TEE)

Encryption

Key

Decryption

Controller

Fig. 2: Proposed solution based on a trusted execution envi-
ronment.

First, we resort

to authenticated encryption schemes
(cf. [13]) to ensure the integrity and the conﬁdentiality of
the control signal and sensor measurements exchanged be-
tween the plant and the controller. The used encryption
scheme must be characterized by an inherent latency much
smaller than the control-loop sampling time. The latter re-
quirement is essential to ensure that the encryption scheme
does not affect the control-loop system’s stability. Second,
a trusted execution environment (TEE) is used to protect the
controller’s operations in the cloud service. Generally speak-
ing, a TEE refers to a hardware-based solution capable of
ensuring that no malicious cloud entities (e.g., malware or a
malicious cloud operator) could interfere with the execution
of the control algorithm or with the memory associated with
it. Moreover, if encryption/decryption operations are exe-
cuted inside the TEE, where the keys are also protected by
the TEE, then a malicious cloud administrator also cannot ac-
cess the keys. TEE may also provides some other advantages
such as measuring the integrity of the launched processes,
measuring the origin of the TEE and current state of the TEE
(attestability), and recovering the state of the TEE to a known
good state after any corruption (recoverability). The pres-
ence of a TEE on the plant side is not required for our threat
model. However, it is desirable in a scenario where the local
computing platform (e.g., SCADA system) could be subject
to cyber-attacks. Several solutions have been proposed in
the literature (not in CPS) using different TEE implemen-
tations, e.g., Intel SGX [16], ARM TrustZone [17], AMD
SEV [18], Hardware Security Module (HSM) [19], and se-
cure co-processors [20]. Although all these solutions provide
strong security mechanisms, not all can be used in our design
(e.g., HSMs do not support remote attestation as opposed to
Intel SGX).

Plant

Controller Enclave

Sensor Measurment

Enrypted Sensor Measurment

AES-GCM 128 Encryption

AES-GCM 128 Decryption

Controller Computation

AES-GCM 128 Encryption

Encrypted Control Input

Decrypted Control Input

AES-GCM 128 Decryption

Actuators Command

Send to Actuators

Enrypted Sensor Measurment

Decrypted Sensor Measurment

Control Input

Encrypted Control Input

Fig. 3: Data Flow in the Proposed Solution.

provides an isolated execution environment, and encrypted
memory. This secure container is called an “enclave” and
everything else outside the enclave is assumed to be insecure.
Two main functions are available to interact with the enclave,
namely Encalve Call (E-Call) and Out Call (O-call). E-Call is
used to call, from outside the enclave, a function implemented
inside the enclave. On the other hand, O-call is used to call,
from inside the enclave, a function implemented outside the
enclave.

For the implementation of the authenticated encryption,
AES Galois/Counter Mode (GCM) is used. This algorithm
is a good candidate for CPSs because of its high throughput
and low latency [21, 22]. First, we need to create an enclave
and allocate memory for the Enclave Page Cache (EPC). The
process starts with the attestation of both the enclave (valid-
ity of the CPU’s SGX support) and the code (validity of the
binary executed within the enclave as the controller logic).
During the attestation, entities also establish a secure session
key. After these initialization operations, data transmission
will be started between the participating entities, encrypted
under the session key. The data ﬂow for a single control loop
is shown in Fig. 3.
In particular, the sensor measurements
are encrypted on the plant side. Then, these encrypted sen-
sor measurements are sent to the cloud over the communica-
tion channel. The authenticity of the received measurement
is checked inside the enclave, where then the controller logic
is also applied to the decrypted measurements. The evaluated
controller output is then encrypted (inside the enclave) before
it is sent to the actuator through the communication channel.
Finally, the encrypted control input is decrypted by the actua-
tor and applied to the plant.

5. IMPLEMENTATION
We use Intel SGX as TEE for its capability of providing a
cryptographic attestation to ensure the integrity of the exe-
cution of the controller algorithm, even in the presence of a
malicious cloud admin or a compromised cloud operating sys-
tems (e.g., by a malware). To keep code and data secure, SGX

6. SECURITY AND PERFORMANCE EVALUATION
We now discuss the security properties of the proposed solu-
tion. (i) Conﬁdentiality: Data sent through the communica-
tion channels are encrypted with AES-GCM. Therefore, net-
work eavesdroppers are unable to decrypt the transmitted con-
trol signals and sensor measurements. Moreover, control op-
erations and encryption/decryption operations are performed

within the enclave, avoiding the possibility that a malware
or cloud administrator could intercept the plaintext signals or
acquire the keys. (ii) Integrity: By exploiting the message au-
thentication code (MAC) tag in AES-GCM, it is possible to
verify the integrity of the transmitted data (i.e., detect if an at-
tacker has manipulated the transmitted data). Another aspect
of integrity is to make sure that the controller logic is not ma-
nipulated by the cloud provider before the code is executed
within the enclave. For this purpose, an attestation operation
is performed to make sure that the code executed in the en-
clave is exactly that is sent to the cloud service by the system
admin. To improve code obfuscation (i.e., hiding the control
logic from the cloud operator), the proposed solution in [23]
can be used. Note that the controller’s runtime state remains
always protected by SGX’s memory encryption. Moreover,
since the controller is executed inside SGX, the integrity of
(iii) Authentication:
the control algorithm is also ensured.
The remote attestation feature of Intel SGX is used on the
plant side to establish a secure and authenticated communica-
tion channel with the enclave in the cloud and ensure that the
remote enclave is trusted. The MAC tags also is used by both
entities (plant and controller) to make sure that the received
messages are obtained by a trusted entity. (iv) Freshness: The
uniqueness of the AES-GCM IV is used to guarantee fresh-
ness of each message. Defending against side-channel attacks
against Intel SGX [24] is outside the scope of this paper. In
the case of necessity of storing data by the controller (depend
on the controller logic), to mitigate rollback attacks on the
sealed data, Monotonic Counter (MC) of Intel SGX can be
used to guarantee that the sealed data is the latest copy.

i.e.,

6.1. Performance Evaluation
System setup. As a testbed, we use the Quadruple Tank
Process (QTP) system from Johansson [9], which is often
used as a benchmark for control systems applications. The
system consists of four water tanks where hi, i ∈ 1, 2, 3, 4
represents the level of water in each tank and also represents
4.
the states x of the system, i.e., x = [h1, h2, h3, h4]2 ∈ IR
There are two sensors that measure the level of water in-
the output measurement vector
side tanks 1 and 2,
2. Moreover, the system is
is y = [0.5h1, 0.5h2]T ∈ IR
equipped with two pumps and the applied voltage v1, v2
are the inputs u of the system, i.e., u = [v1, v2]T . We
have linearized the system model around the equilibrium
pair (xeq = [12.4, 12.7 , 1.8, 1.4]T ueq = [3, 3]T ) and dis-
cretized it using a sampling time Ts = 0.1 sec. The linearized
model x(k + 1) = Ax(k) + Bu(k), y(k) = Cx(k) and its
matrices A, B, C can be easily obtained following [9]. The
plant is regulated by means of dynamic output feedback con-
troller consisting of a a Luenberger Observer and an optimal
Linear Quadratic (LQ) controller. The state-estimator opera-
tions are described by the discrete-time system ˆx(k + 1) =
Aˆx(k) + Bu(k) + L(y(k) − C ˆx(k)) where ˆx(k) is the esti-
mation of the state x(k) and the correction gain is given by

T

0.78
0

0
L =
. The LQ controller logic
0.32(cid:21)
is computed as u = K(x − xeq) + ueq where the stabilizing

0
0.78

0.32
0

(cid:20)

gain is given by K =

(cid:20)

27.547 −0.054 0.468 0.086
0.143 0.507(cid:21)
0.023

28.441

.

The dynamic output feedback controller operations have been
implemented by utilizing an Intel SGX running on an Intel
Core i7-6700 CPU, 3.40GHz, with 4 cores and 8 threads and
16 GB of RAM, using 64-bit Windows 7.
Measurements. We have conducted a series of measure-
ments to evaluate the computation times required by differ-
ent components of the proposed solution (see the data ﬂow
in Fig. 3). The reported CPU measurements have been ob-
tained using the approach proposed in [25, Fig. 1], i.e., an
O-call function is used as a stopwatch. As a result, the time
measurements in Table 1 include an extra time representing
the CPU time required to return to the enclave from an O-call
and exit from it. We denote this time by ∆t. To mitigate the
presence of ∆t in the measurements, we repeated each op-
eration inside the enclave 1000 times and then calculate the
average. ∆t is also measured separately. The numerical re-
sults show that the two dominant factors are ∆t and the con-
trol algorithm CPU time. Indeed, the average total CPU time
required by both the secure and insecure implementations are
around 905µs and 479µs, respectively. The obtained results
conﬁrm that the computational overhead introduced by the
use of Intel SGX does not affect the feasibility of the con-
trol strategy. Moreover, given that the introduced overhead
is in the milliseconds’ range, the proposed SGX-based secure
architecture is believed to be affordable for a large class of
cloud-based control systems applications.

Operation

Time (µs)

Enclave creation
Dynamic output feedback controller
AES-GCM encryption
AES-GCM decryption
∆t

8368.4
466.7
1.8
1.4
435.4

Table 1: Average time for different operations of the SGX-
based solution

7. CONCLUSION

We proposed a solution to secure cloud-hosted CPSs.
In
particular by resorting to authenticated encryption and a
trusted execution environment, we showed that the proposed
networked control scheme is secure again different attacks
against its security and privacy. We veriﬁed the effectiveness
of such a scheme by means of numerical simulations obtained
considering Intel SGX, where we performed different bench-
marks to evaluate the computational burden associated to the
trusted control scheme implementation. The obtained results
show good promise in terms of real-time performance and
simplicity of implementation in CPSs applications.

8. REFERENCES

[1] M. S. Mahmoud and Y. Xia, Networked control sys-
tems: cloud control and secure control, Butterworth-
Heinemann, 2019.

[2] L. Zhou, V. Varadharajan, and M. Hitchens, “Achiev-
ing secure role-based access control on encrypted data
in cloud storage,” IEEE trans. on information forensics
and security, vol. 8, no. 12, pp. 1947–1960, 2013.

[3] K. Kogiso and T. Fujita, “Cyber-security enhancement
of networked control systems using homomorphic en-
in IEEE Conf. on Decision and Control
cryption,”
(CDC). IEEE, 2015, pp. 6836–6843.

[4] J. Kim, C. Lee, H. Shim, J. H. Cheon, A. Kim, M. Kim,
and Y. Song, “Encrypting controller using fully homo-
morphic encryption for security of cyber-physical sys-
tems,” IFAC-PapersOnLine, vol. 49, no. 22, pp. 175–
180, 2016.

[5] J. Tran, M. Farokhi, F.and Cantoni, and I. Shames, “Im-
plementing homomorphic encryption based secure feed-
back control,” Control Engineering Practice, vol. 97,
pp. 104350, 2020.

[6] C. Murguia, F. Farokhi, and I. Shames, “Secure and pri-
vate implementation of dynamic controllers using semi-
homomorphic encryption,” IEEE Trans. on Automatic
Control, vol. 65, no. 9, pp. 3950–3957, 2020.

[7] Y. Lin, F. Farokhi, I. Shames, and D. Neˇsi´c, “Secure
control of nonlinear systems using semi-homomorphic
encryption,” in IEEE Conf. on Decision and Control,
2018, pp. 5002–5007.

[8] C. Shepherd, G. Arfaoui,

I. Gurulian, R. P. Lee,
K. Markantonakis, D. Akram, R. N.and Sauveron, and
E. Conchon,
“Secure and trusted execution: Past,
present, and future-a critical review in the context of the
internet of things and cyber-physical systems,” in IEEE
Trustcom/BigDataSE/ISPA, 2016, pp. 168–177.

[9] K. H. Johansson, “The quadruple-tank process: A mul-
tivariable laboratory process with an adjustable zero,”
IEEE Trans. on control systems Tech, vol. 8, no. 3, pp.
456–465, 2000.

[10] D. Dolev and A. Yao, “On the security of public key
protocols,” IEEE Trans. on information theory, vol. 29,
no. 2, pp. 198–208, 1983.

[11] S.M. Dibaji, M. Pirani, D. B. Flamholz, A. M. An-
naswamy, K. H. Johansson, and A. Chakrabortty, “A
systems and control perspective of CPS security,” An-
nual Reviews in Control, 2019.

[12] A. Teixeira, I. Shames, H. Sandberg, and K. H. Johans-
son, “A secure control framework for resource-limited
adversaries,” Automatica, vol. 51, pp. 135–148, 2015.

[13] S.C. Patel, G. D. Bhatt, and J. H. Graham, “Improv-
ing the cyber security of SCADA communication net-
works,” Communications of the ACM, vol. 52, no. 7, pp.
139–142, 2009.

[14] F. Farokhi, I. Shames, and N. Batterham, “Secure and
private cloud-based control using semi-homomorphic
encryption,” IFAC-PapersOnLine, vol. 49, no. 22, pp.
163–168, 2016.

[15] I. Chillotti, N. Gama, M. Georgieva, and M. Izabach`ene,
“Tfhe:
fast fully homomorphic encryption over the
torus,” Journal of Cryptology, vol. 33, no. 1, pp. 34–
91, 2020.

[16] V. Costan and S Devadas, “Intel SGX explained.,” IACR
Cryptol. ePrint Arch., vol. 2016, no. 86, pp. 1–118,
2016.

[17] AMBA Infrastructure, “Technical overview,” 2004.

[18] D. Kaplan, J. Powell, and T. Woller, “Amd memory

encryption,” White paper, 2016.

[19] J. Varia, S. Mathew, and et. al, “Overview of amazon

web services,” Amazon Web Services, vol. 105, 2014.

[20] S. Bajaj and R. Sion, “Trusteddb: A trusted hardware-
based database with privacy and data conﬁdentiality,”
IEEE Trans. on Knowledge and Data Engineering, vol.
26, no. 3, pp. 752–765, 2013.

[21] Sandhya Koteshwara, Amitabh Das, and Keshab K
Parhi, “FPGA implementation and comparison of AES-
GCM and Deoxys authenticated encryption schemes,”
in IEEE Int. symposium on circuits and systems, 2017,
pp. 1–4.

[22] V. Arun, K. Vanisree, and D. Reddy, “Implementation of
AES-GCM encryption algorithm for high performance
and low power architecture using FPGA,” 2015.

[23] E Bauman, H Wang, M Zhang, and Z Lin, “Sgxelide:
enabling enclave code secrecy via self-modiﬁcation,” in
Proceedings of Int. Symposium on Code Generation and
Optimization, 2018, pp. 75–86.

[24] F. Brasser, U. M¨uller, A. Dmitrienko, S. Kostiainen,
K.and Capkun, and A.-R. Sadeghi, “Software grand ex-
posure: SGX cache attacks are practical,” in USENIX
Workshop on Offensive Tech., 2017.

[25] A. T. Gjerdrum, R. Pettersen, H. D. Johansen, and D. Jo-
hansen, “Performance principles for trusted computing
with intel SGX,” in Int. Conf. on Cloud Computing and
Services Science. Springer, 2017, pp. 1–18.

