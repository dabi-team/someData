6
1
0
2

g
u
A
2

]

R
C
.
s
c
[

1
v
9
6
6
0
0
.
8
0
6
1
:
v
i
X
r
a

Improving Zero-Day Malware Testing Methodology Using Statistically
Signiﬁcant Time-Lagged Test Samples

Konstantin Berlin
Invincea Labs, LLC
kberlin@invincea.com

Joshua Saxe
Invincea Labs, LLC
josh.saxe@invincea.com

Abstract

Enterprise networks are in constant danger of be-
ing breached by cyber-attackers, but making the de-
cision about what security tools to deploy to mitigate
this risk requires carefully designed evaluation of secu-
rity products. One of the most important metrics for a
protection product is how well it is able to stop mal-
ware, speciﬁcally on “zero”-day malware that has not
been seen by the security community before. However,
evaluating zero-day performance is difﬁcult, because of
larger number of previously unseen samples that are
needed to properly measure the true and false positive
rate, and the challenges involved in accurately labeling
these samples. This paper addresses these issues from
a statistical and practical perspective. Our contribu-
tions include ﬁrst showing that the number of benign
ﬁles needed for proper evaluation is on the order of a
millions, and the number of malware samples needed is
on the order of tens of thousands. We then propose and
justify a time-delay method for easily collecting large
number of previously unseen, but labeled, samples. This
enables cheap and accurate evaluation of zero-day true
and false positive rates. Finally, we propose a more
ﬁne-grain labeling of the malware/benignware in order
to better model the heterogeneous distribution of ﬁles
on various networks.

1. Introduction

Anti-malware product vendors often submit their
security products to independent malware testing or-
ganizations to provide an unbiased evaluation of their
products’ performance [1, 3]. Properly done, these tests
provides a critical evaluation of the product that can
help guide purchasing decisions for individuals and or-
ganizations. One of the critical aspects of the tests is ﬁg-
uring out the performance of malware detection prod-
ucts on “zero”-day malware. Here we use the term zero-

day to mean malware previously unseen by the com-
puter security community, rather than the more speciﬁc
deﬁnition describing malware that utilized a previously
unknown exploit [6].

The typical malware protection product consists of
several major detection components; among them are
the malware static detection engine (signatures and/or
machine-learning), (heuristic) behavioral detection en-
gine, and a reputation (or intelligence) engine. [4]. Stat-
ic/dynamic detection engines, which are typically de-
ployed on endpoints and are used to make on-the-ﬂy
malware blocking decisions, are conceptually different
from reputation engines, which are deployed on remote
servers and inform administrators of infections after the
fact[5][11]. Today’s reputation engines usually consist
of software whitelists and blacklists, and are thus not
relevant to the problem of detecting zero-day malware;
we thus leave aside discussion of the evaluation of anti-
malware reputation engines in this paper.

This paper’s contributions pertain to evaluating
zero-day performance, which is important in under-
standing how well a product will perform against mal-
ware used in targeted attacks. We note that this is not
the only performance metric for a detector, and it is also
reasonable to measure detector’s performance on com-
mon in-the-wild malware, which more closely resem-
bles home user’s experience when browsing the inter-
net.1

1Typically, when anti-malware products performance is reported,
the focus is on the detection rate, also referred to as the true positive
rate (TPR); simply deﬁned as the fraction of all malware that was de-
tected. However, measuring TPR cannot possibly provide an accurate
picture of the detector, since it gives no information about the false
positive rate (FPR).

In practice, during demonstrations, one could simply set the de-
tector in a more aggressive setting than can be practically deployed,
in order to get an inﬂated detection score. During deployment, the
number of benign ﬁles on a system/network far outnumber the mal-
ware ﬁles, thus detector’s performance on the benign ﬁles contributes
signiﬁcantly more to the overall detection performance of the system
than TPR. Since it is typically unclear what the ratio of malware to
benignware is on the system a priori, we focus our evaluation on TPR

 
 
 
 
 
 
There are three main challenges in evaluating a
malware detection system: i) the large class imbalance
in the environment, meaning that benign binaries are
vastly more common than malicious binaries; ii) the dif-
ﬁculty in getting legitimate benign and malware sam-
ples that truly have never been seen by the anti-virus
industry prior to testing; and iii) the difference in the
malware/benignware mix between the testing environ-
ment and actual deployment of the system,

Below we address the above three issues by ﬁrst de-
riving the number of malware and benignware samples
that are needed to perform statistically rigorous test. We
derive the proper sample size that should be used for
evaluation, and demonstrate the issue of bias when the
sample size is too small. Then, we propose a time-delay
test to separate the performance of the detector from
the reputation system. Finally, we brieﬂy describe the
idea of hierarchical testing in order to evaluate perfor-
mance on various sets of malware/benignware distribu-
tions that might better reﬂect the heterogeneous envi-
ronments where the AV detection system might be de-
ployed.

2. Estimating Proper Sample Size

To provide valid detection rates for a given AV de-
tector, enough samples must be collected to render the
results statistically signiﬁcant [2]. The accuracy of the
observed FPR and TPR estimates are related to the sam-
ple size N used to estimate them, as well as the ac-
tual true rate for either FPR and TPR. The conﬁdence
bounds for the estimated rate can be accurately deter-
mined by observing that predicting if a ﬁle is benign-
ware or malware is akin to ﬂipping a weighted coin,
where the weight p is the true rate. Given N ﬂips of the
coin, ˆp, the unbiased estimator for p, is computed by
taking the number of positive guesses and dividing by N
[7]. The distribution for the expected number of correct
malware labels (need to compute ˆp) given N samples is
determined by the binomial distribution.

Ford and Cavalho [9] provided an interesting dis-
cussion on the importance of sample size N in malware
testing. Here we expend on this discussion by asking
a practical question, how many samples do we actually
need when designing a malware detection test? We an-
swer this question by doing the inverse analysis of [9],
where rather than asking, given the sample size, what
are the conﬁdence internals, we determine, given the
FPR or TPR, what is the proper samples size.

We start with the known solution to the forward
problem, the probability that the estimate is correct

and FPR metrics (as opposed to precision and recall), which are inde-
pendent of this ratio.

given the sample size, and then use global optimization
to solve for the sample size, given the desired conﬁ-
dence probability. Speciﬁcally, we want to compute the
sample size N that would give us at least c conﬁdence
(we will use c = 0.95 for 95% conﬁdence) that our es-
timated FPR or TPR ˆp is within s of the true value p.
To compute this value, we ﬁrst ﬁnd the probability of
such an event occurring, and then solve for N given the
desired c.

The probability of the estimate being approxi-

mately correct, c, is

Pr(p − s < ˆp < p + s ) = Fp(p + s ) − Fp(p − s ), (1)

where Fp is the cumulative distribution function (CDF)
of possible outcomes for ˆp. In our case ˆp is the ratio of
the observed positive samples divided by the number of
observed samples, and so Fp can be expressed using the
binomial distribution’s CDF Gp, Fp(x) = Gp(Nx).

Given a desired p value, we solve eq. (1) for N,
using a global optimizer or simply trying every possi-
ble value of N within a reasonable range. We show N
needed to accurate estimate for a range of reasonable
values of p in Fig. 1.

Fig. 1 shows that that for accurate FPR estimates
(where typical p ∈ [10−5, 10−3]) we need about a mil-
lion benign samples, while to accurately estimate TPR
(where typically p ∈ [0.5, 0.95]) we need about 10 thou-
sand samples.

In today’s security industry, small sampling is com-
mon in impromptu point of sale evaluations, and is
even found in testing done by major testing services,
because getting a large number of realistic malicious
and benign samples is expensive and time consum-
ing.
Interestingly, in small, informal sample testing
regimes the estimated rates can be biased compared
to the true rates. We demonstrate this by plotting
Fp(p − s − e ) − (1 − Fp(p + s ), probability of underes-
timated the true rate minus probability of overestimat-
ing; and Fp(p − 0.05p), the probability of underestimat-
ing the rate by over 50%, in Fig. 2.

Fig. 2A,B demonstrate two interesting properties
of binomial distribution. Fig. 2A shows that while ˆp is
an unbiased estimator of p, the probability of underes-
timating the score is higher than probability of overes-
timating the score when p is small (such as for FPR),
and the reverse when p is large (such as for TPR). This
observation is discussed in further detail in [8]. Fig.
2B shows that the probability of signiﬁcantly underesti-
mating the rate (by 50% or more), also gets much larger
as sample size gets small. The non-continuous lines in
Fig. 2B are due to the discrete nature of the binomial
distribution, and has been discussed at length in [7].

(A)

10 8

10 7

10 6

10 5

N

10 4

10 3

10 2

10 1

10 0

10 -6

(B)

10 8

10 7

10 6

N

10 5

10 4

10 3

10 2

0

10 -5

10 -4

10 -3
p

10 -2

10 -1

10 0

0.2

0.4

0.6

0.8

1

p

Figure 1. The estimated sample size needed to accurately (95% conﬁdence) compute the desired
rate within a certain percent a , p − pa < ˆp < p + pa . (A) N for a range of values useful when estimating
false positive rates, with a = 0.5. (B) N for a range of values using when estimating the true positive
rates, with a = 0.01.

(A)

0.2

0.15

0.1

0.05

0

-0.05

-0.1

-0.15

r
e
v
O

.
b
o
r
P

-

r
e
d
n
U

.
b
o
r
P

-0.2

10 -6

10 -5

10 -4

10 -3
True Rate

10 -2

10 -1

10 0

(B)

100 samples
1,000 samples
1,000,000 samples
10,000,000 samples

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

%
0
5
<
e
u
a
V

l

.
b
o
r
P

0
10 -6

10 -5

10 -4

10 -3
True Rate

10 -2

10 -1

10 0

Figure 2. The probability of underestimating the TPR of FPR rates given several common samples
sizes. (A) The probability that the estimate ˆp will be biased towards underestimation, given the true
rate p. (B) The probability that the rate estimate ˆp will be more than 50% smaller than true rate p.

Our observations above have two immediate im-
plications:
i) if the testing sample size is unreason-
ably small for TPR evaluation (where typically p ∈
[0.1, 1.0]), < 1000 samples, the evaluation would tend
to overestimate the detection rate, making the detector
look better than the true performance; and ii) if the test-
ing samples size is too small for FPR estimation (where
p ∈ [10−5, 10−3]), < 105 samples, the evaluation would
produce an overly optimistic FPR rate.

We conﬁrm the above theoretical analysis by per-
forming a validation test on our previously developed
malware detector [12]. We use 600,000 samples, ap-
proximately evenly split between benign and malware,
as well as larger 1.3 million sample data-set to com-
pute the ROC curve of our detector. The ROC curve is
simply a set of individual (TPR, FPR) pairs, and so we
would expect the FPR bias to appear at the lower range
of the curve.

Indeed, as the results in Fig. 3 show, the 600,000

sample validation line (red line) is skewing the FPR rate
higher in the low FPR region, resulting in falsely opti-
mistic ROC curve.

3. Getting New Samples Using Time Delays

The results shown above show that a million ﬁles
are needed to properly evaluate the FPR of a detector.
How do you get that many previously unseen labeled
ﬁles? The traditional approach from the testing service
has been to use a data feed to get a supply of malware
and benignware. However, there are several problems
with this approach. The primary issue is that a majority
of these samples are not new, and can already be found
in large malware feed networks like VirusTotal [5]. Fur-
thermore, large vendors have vast deployments that al-
low them to potentially observed most ﬁles even before
they are uploaded to VirusTotal. For example, evalua-
tion in [10] suggested that large vendor AV-systems can

 
 
 
 
 
 
uated on this set of ﬁles.

1.3M Validation
100K Validation

4. Hierarchical Evaluation Statistics

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

R
P
T

0
10 -5

10 -4

10 -3

10 -2

10 -1

10 0

FPR

The ROC curve of true positive
Figure 3.
rate (TPR) vs.
false positive rate (FPR) of a
machine-learning based detector. The blue line
shows validation using 1.3 million ﬁle. The red
line shows validation using 100 thousand ﬁles.
The overly optimistic bias for the red line is
due to optimistic FPR estimates, as theoreti-
cally predicted.

observe new malware over 100 days before they show in
VirusTotal malware feed. This suggests that large frac-
tion of ﬁles that are traditionally used for evaluation can
be blacklisted, whitelisted, or used for authoring sig-
natures and training machine learning models a priori,
skewing the results of tests focused on the zero-day de-
tection problem.

One naive approach to mitigating this problem
would be to generate the malware samples in-house.
But this is not feasible for millions of samples that are
required for proper evaluation, and would produce an
unrealistic test set compared to what is being observed
in the wild. Another mitigation would be disconnecting
the test environment from the Internet, in order to pre-
vent anti-malware products from communicating with
their reputation servers [3], but that doesnt account for
extensive white-listing that can be done on the endpoint
beforehand.

The second major issue involved in testing anti-
malware products against zero-day malware are the in-
accurate labels that we will inevitably have for new
ﬁles, since most vendors used to generate the labels
might not have caught up with the new samples. We
propose to mitigate the issue of blacklist/whitelists,
as well as the incorrect labels skewing the results by
proposing a time delayed experiment, where the detec-
tor is disconnected from the updating service for several
months (e.g. 100 days). Once the time delay expires,
newly unseen ﬁles are aggregated from a ﬁle feed and
fed through the detector. The detection statistic is eval-

Assuming the evaluation is statistically valid, the
other major problem when evaluating AV products is
the need for accurate modeling of the malware and be-
nign distributions. Any detector is designed to balance
the chance of false positives with the chance of a detec-
tion. However, only some subset of malware/benign-
ware will actually be observed on any given network.
The ability to detect malware that the users will never
see is irrelevant to that user’s experience. However, it
is not really possible to know what a realistic distribu-
tion of malware/benignware is for a user, and very hard
to even generalize for a prototypical enterprise. On the
other hand, the major industry players know fairly well
what to expect, due to their large deployment on end-
points. Therefore, we propose a hierarchical evaluation
that would allow ﬂexible recomputation of the detector
for speciﬁc deployment environments.

The hierarchical process consists of two phases. In
the ﬁrst phase, the benign and malware ﬁles will be
broken down into more ﬁne-grained hierarchical cate-
gories, like common benign ﬁles (e.g. ﬁles prom pop-
ular Microsoft, Adobe products, etc.), shareware/ad-
ware ﬁles from download websites, business productiv-
ity software. Separating the ﬁles into multiple subcate-
gories allows us to recompute the expected performance
of a detector by recombining/weighing the the data to
match the more speciﬁc ﬁle distributions you would ex-
pect to see on various networks.

For example, the variety of software installed on
an enterprise network is more limited than you would
see on the same number of individual computers. At
the same time, the amount of malware/adware that you
would likely to see on an individual computer is higher.
Therefore, when evaluating the detectors performance,
as it relates to enterprise vs. individual computers, the
enterprise evaluation should weigh benignware more
than it would for individual evaluation. However, the
scope of the false positive testing should be limited
to more traditional enterprise software rather than less
software found on free download websites.

Given these categories, anti-malware product ven-
dors can specify their own mix of categories that they
deem proper for evaluation of their engine, and direct
comparison can be made between the vendors by tak-
ing a weighted sum of the FPRs and TPRs to match a
desired distribution.

and Communications Security, pages 1118–1129. ACM,
2015.

[11] C. Nachenberg, J. Wilhelm, A. Wright, and C. Falout-
sos. Polonium: Tera-scale graph mining and inference
for malware detection. In Proceedings of the 2011 SIAM
International Conference on Data Mining, pages 131–
142, 2011.

[12] J. Saxe and K. Berlin. Deep neural network based mal-
ware detection using two dimensional binary program
features. In 2015 10th International Conference on Ma-
licious and Unwanted Software (MALWARE), pages 11–
20. IEEE, 2015.

5. Conclusion

In this paper we have made three key contributions.
First, we have demonstrated the importance of proper
sample size in estimating the true and false positive
rates of malware detectors. The sample size required,
specially for estimating the false positive rates is signif-
icantly higher than commonly used in testing services,
and requires on the order of a million ﬁles. While the
requirement to estimate the true positive is lower, it still
needs thousands of samples to accurately estimate.

Second, to address the problem of creating a large
test set for evaluating zero-day malware detection, we
have proposed a time-delay test, where the detectors un-
der test are simply isolated for several months, while
new samples are being gathered. This proposed time-
delay test potentially provides a more accurate evalua-
tion of the zero-day performance than current tests.

Third, to further reﬁne the evaluation, we have pro-
posed individually testing a subcategories of samples,
and then aggregating them to provide more realistic per-
formance under various user environments.

We hope that the above analysis provides a ba-
sis for improvement in anti-malware testing methodolo-
gies, allowing for more accurate evaluation of perfor-
mance.

References

[1] AV-TEST. https://www.avtest.com.
[2] NIST: Selecting Sample Sizes.

http://http:

//www.itl.nist.gov/div898/handbook/
ppc/section3/ppc333.htm.

[3] NSS labs, inc. https://www.nsslabs.com.
[4] Symantec

Intelligent

Endpoint.

https:

//www.symantec.com/en/hk/solutions/
intelligent-endpoint.

[5] VirusTotal. https://www.virtualbox.org.
is a zero-day vulnerability?
[6] What

http:
//www.pctools.com/security-news/zero-
day-vulnerability/.

[7] L. D. Brown, T. T. Cai, and A. DasGupta. Interval es-
timation for a binomial proportion. Statistical science,
pages 101–117, 2001.

[8] L. D. Brown, T. T. Cai, and A. Dasgupta. Conﬁdence
intervals for a binomial proportion and asymptotic ex-
pansions. Annals of Statistics, pages 160–201, 2002.
[9] R. Ford and M. Carvalho. A signiﬁcant improvement for
anti-malware tests.
In Anti-malware Testing Research
(WATeR), 2014 Second Workshop on, pages 1–4. IEEE,
2014.

[10] B. J. Kwon, J. Mondal, J. Jang, L. Bilge, and T. Du-
mitras. The dropper effect: Insights into malware dis-
tribution with downloader graph analytics. In Proceed-
ings of the 22nd ACM SIGSAC Conference on Computer

