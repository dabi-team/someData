7
1
0
2

l
u
J

7
1

]

R
C
.
s
c
[

1
v
2
3
0
5
0
.
7
0
7
1
:
v
i
X
r
a

1

Protecting Military Avionics Platforms from
Attacks on MIL-STD-1553 Communication Bus

Orly Stan, Yuval Elovici, Asaf Shabtai, Gaby Shugol, Raz Tikochinski, Shachar Kur

Abstract—MIL-STD-1553 is a military standard that deﬁnes the physical and logical layers, and a command/response time division
multiplexing of a communication bus used in military and aerospace avionic platforms for more than 40 years. As a legacy platform,
MIL-STD-1553 was designed for high level of fault tolerance while less attention was taken with regard to security. Recent studies
already addressed the impact of successful cyber attacks on aerospace vehicles that are implementing MIL-STD-1553. In this study we
present a security analysis of MIL-STD-1553. In addition, we present a method for anomaly detection in MIL-STD-1553 communication
bus and its performance in the presence of several attack scenarios implemented in a testbed, as well as results on real system data.
Moreover, we propose a general approach towards an intrusion detection system (IDS) for a MIL-STD-1553 communication bus.

Index Terms—MIL-STD-1553, anomaly detection, communication bus security.

(cid:70)

1 INTRODUCTION

M IL-STD-1553 is a military standard developed by the

US Department of Defense (DoD) for the purpose of
military platform integration [6] which has served as the
backbone of military and aerospace avionic platforms (e.g.,
F-15, AH-64 Apache, F-16, V-22, X-45A, F-35) for more than
40 years. It is primarily used for mission-critical systems that
require a high level of fault tolerance, since it is deterministic
and dual redundant; it also uses a reduced cable topology,
connecting all devices on a single bus in a multipoint
topology, as opposed to point-to-point topologies.

MIL-STD-1553 is considered deterministic, because it is
based on a master/slave methodology in which the master
issues messages based on a predeﬁned order and timing.
Although other modern, reliable and deterministic data
buses have been introduced [5], [8], MIL-STD-1553 remains
the most widely used standard in military aviation as it has
been for the last 40 years, and is expected to be used in
the future. The main reason that alternative deterministic
communication buses are not used in existing platforms is
the difﬁculty of modifying an entire operational platform
and replacing the main data transmission topology. More-
over, subsequent standards are based on the communication
protocol deﬁned by MIL-STD-1553. For these reasons, MIL-
STD-1553 will likely be an integral component of critical
military platforms for many more years to come.

MIL-STD-1553 was developed long before the notion of
cyber security was familiar and even basic cyber attacks,
such as denial-of-service (DoS) attacks [9], had not yet
been introduced. Research regarding DoS attacks initially
reported in the early 1980s, several years after the release
of the most recent version of MIL-STD-1553 in 1978, and

• O. Stan, Y. Elovici, and A. Shabtai are with the Department of Software
and Information Systems Engineering, Ben-Gurion University of the
Negev.
E-mails: stan@post.bgu.ac.il, {elovici,shabtaia}@bgu.ac.il

• G. Shugol, R. Tikochinski, and S. Kur are with Astronautics C.A. ltd.

E-mails: {g.shugol, r.tikochinski, s.kur}@astro.co.il

focused mainly on DoS in operating systems, rather than
computer networks [9]. The Designer’s Notes for MIL-
STD-1553 include a chapter discussing several aspects of
network system security which should be addressed when
implementing a 1553 communication bus [6]:

• system security policy – deﬁnes the classiﬁcation levels
of the system, data, and personnel that are related to
the communication bus;

• system security architecture – speciﬁes four approaches
for designing systems that process classiﬁed plain text
data and unclassiﬁed data;

• Tempest – states that all components processing un-
encrypted classiﬁed data should be protected against
compromising emanation;

• Encryption – should be used in order to isolate compo-
nents with different classiﬁcation levels from classiﬁed
data;

• Trusted message routing and control design – maintain-
ing low bit error rate, parity coding of control words,
and monitoring the bus controller can help in detecting
errors in messages or in their routing.
Although the Designer’s Notes provide references to
security aspects, they only contain general guidelines, in-
cluding references to standards that might not be appro-
priate for all MIL-STD-1553-based systems (e.g., military
vessels developed by other countries might have different
or additional compliance requirements than those deﬁned in
MIL-STD-1553). Moreover, because the standard is deﬁned
for military purposes, more speciﬁc guidelines cannot be
provided due to conﬁdentiality requirements. Finally, the
standard is implemented by various types of systems with
diverse objectives, which makes it extremely complicated
to provide more speciﬁc requirements will suite all existing
systems.

Therefore, despite the attention paid to security issues in
the Designer’s Notes, MIL-STD-1553 still contains vulnera-
bilities that expose the platforms implementing it to cyber
attacks, which are not addressed in the Designer’s Notes or
in the various updates that have been made to the standard

 
 
 
 
 
 
since its ﬁrst release. Section 4 provides a security analysis
of MIL-STD-1553 and discusses possible attack methods and
their consequences.

As cyber attacks play a major role in modern warfare and
since military platforms are likely to be attractive targets for
attackers [20], [16] , it has become clear that the systems im-
plementing the MIL-STD-1553 standard require improved
protection. Due to its widespread deployment in many plat-
forms, applying changes to the various components of the
1553 communication bus is cost prohibitive. Hence, instead
of securing the standard itself, we introduce a method for
the detection of anomalous trafﬁc transmitted over the 1553
communication bus.

Recent studies have addressed the impact of successful
cyber-attacks on aerospace vehicles that implement MIL-
STD-1553 [19], [24]. In [24] the author presents some of the
associated vulnerabilities and suggests theoretical methods
for creating covert channels over the communication bus.
The authors in [19] illustrated the physical impact of simu-
lated cyber-attack on an aerospace vehicle. However, none
of them proposed a solution for detect and/or prevent such
attacks.

In this paper we present a security analysis of the MIL-
STD-1553 communication protocol and propose a super-
vised sequence-based anomaly detection method for iden-
tifying cyber-attacks. For evaluating our method we estab-
lished an operational testbed in which we executed three
attack scenarios. All three attacks were perfectly identiﬁed
by our proposed method. Moreover we evaluated the learn-
ing process of the proposed method on datasets collected
from a real system; this evaluation indicates that a very
short period of time (two to ﬁve seconds) is sufﬁcient for
achieving a very low false alarm rate.

The following sections provide: an overview of the MIL-
STD-1553 architecture and communication protocol (Section
2); a review of related works regarding the security of
systems implementing MIL-STD-1553 and other commu-
nication bus technologies, (Section 3); a security analysis
which deﬁnes the assets of a MIL-STD-1553 bus, the attacker
proﬁle, and possible threats to the communication bus (Sec-
tion 4); proposal for a sequence-based anomaly detection
method for a MIL-STD-1553 communication bus (Section 5);
description of the testbed established for evaluating the pro-
posed method and evaluation results for both simulated and
real-system scenarios (Section 6); ﬁnally Section 7 discusses
the performance and limitations of the proposed sequence-
base anomaly detection method and suggests extensions to
the method; Section 8 concludes the paper and presents
future research direction.

2 1553 COMMUNICATION BUS - BACKGROUND
MIL-STD-1553 deﬁnes a dual redundant serial communica-
tion bus used for transmitting data between a bus controller
and remote terminals using a multipoint, master-slave bus
topology. It was ﬁrst published in 1973 and the latest ver-
sion, MIL-STD-1553B, published in 1978, is still used in
many military and aerospace systems to this day. MIL-STD-
1553 deﬁnes the physical layer of the communication bus
as well as the logical layer and a command/response time
division multiplexing methodology using a 1Mbps transfer
rate data bus, while specifying the transmission timings.

2

Fig. 1. The MIL-STD-1553 bus architecture and its primary components.

2.1 Bus architecture

The 1553 communication bus includes ﬁve key elements:
Remote terminal (RT), bus controller (BC), bus monitor
(BM), coupler, and the bus itself (illustrated in Figure 1).
The bus is redundant – if a message cannot be transmitted
on the main channel it will be retransmitted on the backup
channel. Although there are redundant channels, only one
element can transmit data over the bus at a time. All
elements connected to the bus are continuously exposed
to the data transmitted, even if not designated for them.
The communication is managed by the BC, and all other
elements follow its commands. The bus can support up to
31 connected remote terminals.

Remote terminal (RT). Consists of three components.
The hardware transceiver is responsible for data transfer
between the bus and the subsystem. It is connected directly
to the bus and exchanges data with the subsystem via a dual
port RAM (DPR). In addition, it must be able to decode and
buffer messages, detect transmission errors, and perform
data validation tests. Invalid data should be discarded. The
DPR is shared memory which enables data transfer between
the transceiver and the subsystem. Both the transceiver
and subsystem have read and write permission to this
memory. The subsystem is the computational unit (platform
computer) of the RT. The subsystem is responsible for all
data processing and calculations required for the system to
function.

Bus controller (BC). Responsible for managing the com-
munication between the RTs connected to the bus using
command/response messages. It is the only component that
initiates data transfers on the bus to/from RTs or between
two RTs. There may be several terminals with BC capabili-
ties connected to the same bus for backup, but only one of
them can function as the active BC at a given time. The BC
initiates commands to the RTs based on a predeﬁned order
and timing.

Bus monitor (BM). Responsible for listening and col-
lecting data from the bus in order to observe the state
and operational mode of the system and subsystems. The
BM is a passive device and does not send any messages,
and therefore cannot provide a status report on the data
transferred over the bus.

Coupler. A physical component used to isolate the
components connected to the bus from one another and
eliminate the possibility of damage to the bus in case one
of the components malfunctions.

Data Bus. The transmission medium that physically
enables all communication between the components con-
nected to it.

2.2 Communication protocol

Words are the data structure used for transmitting com-
mands, data, and status over the bus. A collection of words
deﬁnes a message used for receiving or transmitting data.
Messages can be periodic or aperiodic. Periodic messages
are sent at ﬁxed time intervals (i.e., time cycles). A major
frame is a predeﬁned time frame in which all periodic
messages are transmitted at least once (derived from the
periodic message with the longest time cycle). Aperiodic
messages are event-driven and therefore are not sent in
ﬁxed time cycles. However, they have a ﬁxed time slot in
the major frame.

The standard deﬁnes three types of words: command,
data, and status (illustrated in Figure 2). All words are 20
bits long, starting with three bits of synchronization and
ending with a parity bit.
Command word. Initiated by the BC and designated to
an RT. The command speciﬁes the action that the RT
should perform: whether to receive or transmit data.
The remaining 16 bits are deﬁned as follows:
Terminal address (TA) – a ﬁve bit ﬁeld containing the
address of the RT that the command is designated
for. It can contain up to 31 RT addresses (00000B to
11110B), since the terminal address 11111B is reserved
for broadcast command.
T/R bit – a single bit that indicates the direction of the
required data transfer. Logic 1 indicates that the RT
should transmit data, and logic 0 indicates that the RT
should receive data.
Subaddress/Mode – a ﬁve bit ﬁeld indicating the subad-
dress of the RT to receive/transmit the data, or that
this command is a mode code (in this case it is set to
00000B or 11111B). Mode codes are special commands
used to change the operation mode of the RTs such as:
timing synchronization, RT transmitter shut down, and
request to initiate self-test.
Data word count/mode code – a ﬁve bit ﬁeld which
to be re-
contains
ceived/transmitted. If a mode code is set, these ﬁve bits
indicate the mode code.

the number of data words

Data word. Contains the actual data being transferred on
the bus. There is no predeﬁned structure for data words.
Status word. Sent by the RT to the BC upon receiving a
valid message, in order to report its status to the BC.
It contains different ﬂags indicating different types of
errors, such as received data error, data processing
error, and circuitry error. It also allows the RT to request
a service from the BC.

2.3 Communication formats

There are four types of communication between elements
over the bus, all of which are initiated by the BC. The com-
munication formats are designed to maintain high reliability
of the protocol by acknowledging every message sent on the
bus and ﬂagging for errors and validation of the messages
(using status words).

3

Fig. 2. Communication protocol words structure.

Fig. 3. BC-RT (a) and RT-BC (b) transfer format.

BC-RT/RT-BC data transfer. The communication be-
tween the BC and an RT has two formats: ’receive’ (BC-RT)
and ’transmit’ (RT-BC). In order to initiate a BC-RT commu-
nication (Figure 3(a)), the BC issues a ’receive’ command to
the RT, and immediately transmits the data words. The RT
receives and validates the data, and responds with a status
word. In order to start a RT-BC communication (Figure
3(b)), the BC issues a ’transmit’ command to the RT. The
RT receives the command and responds with a status word,
which is immediately followed by the data words it should
transmit.

RT-RT data transfer. In RT-RT communication (Figure
4), one RT transmits data to another RT. The BC starts
the communication by issuing a ’receive’ command to the
receiving RT, which is immediately followed by sending a
’transmit’ command to the transmitting RT. The transmitting
RT responds with a status word and transmits its data
words. Upon receiving the data, the receiving RT responds
with a status word.

Mode code transfer. The BC can send a mode command
by setting the subaddress/mode ﬁeld to 00000B or 11111B.
In this case the word count ﬁeld deﬁnes which mode code
should be performed. A mode command can be sent to a
speciﬁc RT or to all RTs. A mode command can be associated
with up to one data word.

Broadcast transfer. The standard also supports broad-
cast messages. Broadcast can be used with messages in
which only the BC is transmitting data and all others are
receiving. The broadcast message format is similar to the
non-broadcast messages, with two exceptions: the terminal
address ﬁeld is set to 11111B, and all receiving RTs suppress
their status word transmission.

Fig. 4. RT-RT transfer format.

3 RELATED WORK
Although MIL-STD-1553 is the basis for many mission-
critical platforms, there has been very little research con-
ducted regarding its security. The security of mission-critical
and embedded systems was discussed in [4], [12], [26].
In 2005, Chong et al. [4] suggested design principles and
guidelines for a survivability system architecture and ap-
plied it to a DoD information system. In 2016, Vai et al. [26]
developed a methodology for designing a general mission-
critical embedded system that considers cyber security as-
pects. The authors suggest a modular system architecture
that contains cyber security features (e.g., cryptographic
components and a separation kernel), and monitoring and
recovering services.

These kind of security measures are suitable for systems
that are in their design phase, in which different security
features and principles can be considered and integrated
correctly; however, they are not suitable for enhancing
the security of existing 1553 bus implementations, because
changing components of the 1553 communication bus is cost
prohibitive due to its extensive deployment in wide range
of aircrafts and vehicles.

In the context MIL-STD-1553, in 2014, McGraw, et al.
[19] explored the impact of malicious actions on a satellite
that uses a 1553 communication bus for intercommunica-
tion between its subsystems. The communication bus was
modeled using SimPy (a simulation framework written in
Python), and consists of a BC, BM, and 10 RTs. In addition,
STK SOLIS (a simulation environment for spacecraft) was
used for generating a high ﬁdelity model and data exchange
between the simulated subsystems. In order to explore ma-
licious actions, McGraw, et al. [19] characterized the normal
behavior of a space asset and used it to detect perturbations
which may indicate the presence of a malware. Two sce-
narios of abnormal behavior were simulated: the presence
of solar ﬂares or ionization activity, and the presence of
a malware. These abnormal scenarios were simulated by
injecting noises (of different magnitudes) into the sensors’
models. Manual analysis of the results indicated that it
is possible to detect the anomalous events. Moreover, the
authors were able to distinguish between events that might
be caused by ionization and those that might be caused by
a malware. The authors also observed a signiﬁcant change
in the satellite physical position in the presence of malware.
The authors reached their conclusions by manually explor-
ing the simulation results and did not provide an automatic
method for detecting anomalies.

In contrast to the manual analysis performed in [19], we
propose a real-time machine learning-based IDS for detect-
ing abnormal behavior. Furthermore, in order to evaluate
our proposed solution we used an operational testbed com-
posed of an actual 1553 communication bus (presented in
more detail in Section 6.1) on which we were able to execute

4

attacks that exploit various vulnerabilities in the protocol
rather than data manipulation. The use of actual hardware
enabled us to simulate data transmission in a more realistic
environment and extract more precise features.

In 2015, Nguyen [24] introduced several methods for
creating covert channels over a 1553 communication bus,
in order to leak data from high security level subsystems
to lower subsystems. The suggested attacks utilize different
features and behavioral characteristics of the communica-
tion protocol deﬁned by the standard, in order to establish a
signaling mechanism between two cooperating subsystems
connected to the same communication bus. Nguyen pre-
sented three attack scenarios and categorized them into two
types: timing and storage attacks. Timing attacks utilize time
delays between messages deﬁned by MIL-STD-1553, while
storage attacks utilize word structure and programmer-
deﬁned features. More speciﬁcally, the storage attacks utilize
the ’command illegalization’ implementation (which is a
programmer deﬁned feature), and the Service Request (SR)
feature deﬁned by the standard which enables an RT to
notify the BC that it needs to transmit or receive data. The
suggested attack scenarios are merely theoretical and were
not empirically tested. In addition, the suggested attacks
rely on assumptions which are not necessarily correct or
applicable for all 1533 communication buses. Moreover, the
attacks presented are inefﬁcient. For example, if the RT that
executes a timing attack is able to control its response delays
to the granularity of one microsecond, it can leak up to three
bits per message.

Covert channel attacks were taken into consideration
in the security analysis we present in Section 4 and in
our proposed solution described in Section 5, which is an
anomaly detection algorithm that can provide an alert when
malicious activity, such as data leakage via a covert channel,
takes place over the bus.

research is

A related domain to our

the inter-
communication technologies implemented in today’s auto-
mobiles, also known as the CAN bus. Numerous works
surveyed cars’ inter-communication technologies and pos-
sible threats [14], [27], and demonstrated different kinds of
attacks [2], [10], [11], [21]. These works suggested adding
countermeasures such as encryption, authentication, and
intrusion detection capabilities to these technologies. Some
examples of proposed anomaly detection solutions for iden-
tifying malicious activity on CAN bus, include: an entropy-
based anomaly detection method that assumes low ran-
domness in the vehicle network [23]; an unauthorized data
transmission prevention mechanism for CAN bus [18]; de-
nial of service detection by analyzing time intervals of
messages [25]; an intrusion detection solution that is based
on clock skew ﬁngerprints of computational unites [3];
and an intrusion detection solution based on a supervised
DNN classiﬁer used for classifying messages as benign or
anomalous by analyzing their content [13].

Although the CAN bus protocol and physical implemen-
tation differ from the MIL-STD-1553 communication bus,
some of the suggested methods and features for anomaly
detection can be relevant for MIL-STD-1553, as will be
described in Section 5.

4 SECURITY ANALYSIS OF THE 1553 COMMUNI-
CATION PROTOCOL
In this section we present a comprehensive security analysis
of the MIL-STD-1553 communication protocol which con-
sists of the following elements:

Assets – an element, which is part of the 1553 commu-
nication bus, that (1) an attacker might be interested in, and
(2) has the potential to disrupt the system’s operation or
leak information when compromised. An asset might be
a physical component (e.g., a subsystem), or data present
in the system (e.g., transmitted messages, data stored in a
subsystem).

Attacker proﬁle – an individual, group, organization,
or government that have interest in attacking the system’s
assets and attempt to access them via attack vectors.

Attack Vector – indicating various methods used by an
attacker to penetrate the system in order to perform the
malicious activity.

Threat Agent – an entity (individual, software, hard-
ware), internal or external to the system, that uses its privi-
leges in order to execute the attack.

Attack method – the actions that an attacker should

perform in order to execute an attack.

4.1 Assets

The identiﬁed assets that are part of a MIL-STD-1553 com-
munication bus and might have value to a potential attacker
are can be categorized as follows:
Connectivity assets – the physical components responsible
for data transfer between the different components at
different levels:
• Transmission medium (the bus itself) (component 8
in Figure 1) – the physical wires that connect the RTs
and enable all communication and data transmission.
• Transceiver (component 2 in Figure 1) – responsible
for decoding the analog signals into digital data
which is comprehensible to the subsystem (and vice
versa) and thus enables data transfer between the bus
and the subsystem.

• Coupler (component 7 in Figure 1) – an electrical unit
that isolates the bus from an RT and connects the
transceivers to the transmission medium.

Damage to one of these components might harm the
availability of a part, or the entire, system. Denying
a critical subsystem to transmit data (by sabotaging
its connectivity assets for example) prevents inputs for
other component that might fail in performing their
tasks, potentially leading to disconnection between
components. Since these components are physical, they
are capable for compromising emanation, which harms
the conﬁdentiality of the system. The integrity of the
system is also threatened by these assets, since they
have access to the inputs and outputs of each com-
ponent, and once compromised, they can manipulate
these data.

Data assets – the data stored in different parts of the sys-

tem:
• DPR data (component 3 in Figure 1) – the data stored
in the shared memory of the transceiver and the
subsystem (DPR).

5

• Subsystem data (component 4 in Figure 1) – the data
that is stored in the memory of the subsystem and
consumed by the subsystem in order to perform its
tasks (e.g., geographical location).

• Data in motion (components 8 in Figure 1) – the

current signals (data) transmitted over the bus.

Any damage or changes made to these assets violates
the integrity of the system. Moreover, as previously
described, manipulation of the inputs and outputs
of subsystems can damage the system’s availability.
Moreover, lack of data encryption breaks the system’s
conﬁdentiality once leaked outside.

Computational units:

• Subsystem (component 4 in Figure 1) – consists of
physical components (e.g., CPU, memory, sensors)
and the software responsible for performing the sub-
system’s tasks (e.g., reporting the current position,
calculating distance from objects).

Compromised subsystems can manipulate or generate
false outputs and break the system’s integrity, stop
communication with other subsystems and damage its
availability, or abuse access to other devices in order to
leak data and violate the system’s conﬁdentiality.
Table 1 provides more detailed description of each as-
set and the security concerns (i.e., potential consequences)
related to it, categorized by integrity, conﬁdentiality, and
availability.

4.2 Attacker proﬁle

Since MIL-STD-1553 is mainly implemented in military plat-
forms, most of the attack vectors require physical access to
the system (e.g., change components’ code, eavesdropping),
or access to external devices that interact with the system
(such as USB devices or CDs) or sensors (such as GPS or
RADAR). This kind of access requires highly skilled attacker
such as a state actor.

The attack vectors can be categorized into three main
groups: code injection and manipulation, data injection, and
physical tampering. The attacker is assumed to have the
ability to execute at least one of these attack vectors during
the life cycle of the system (e.g., development, supply chain,
deployment, or maintenance stages). These individuals can
abuse their access rights in order to sabotage various com-
ponents.

Once the attacker gained access to the system he/she
executes the attack via a component connected to the system
or an individual that have physical access to it, which are
referred to as threat agents.

4.2.1 Attack vectors
Code injection and manipulation. This attack vector refers
to the ability to inject or manipulate the code of the system’s
components in order to perform the attack. This includes the
program coded in the transceiver, as well as the operating
system or software of a subsystem. Malicious code can
be injected during the main phases of the component’s
life cycle: development, supply chain, and deployment and
maintenance.

The development phase includes all processes that take

place before delivering the product to the client: hardware

TABLE 1
List of assets and potential consequences.

6

Asset

Integrity

Conﬁdentiality

Availability

1

Transceiver

Compromised transceiver can
provide corrupted data to the
subsystem it connects to the bus or
to other components connected to
the bus which can lead to incorrect
operation.

2

3

4

5

6

Transmission
medium (the bus
itself)

Coupler

Subsystem

Shorts or failure of the transmission
medium may provide corrupted
data to the components connected
to the bus which can further lead to
incorrect operation of the system.

Compromised coupler can provide
corrupted data to the RT it connects
to the bus, or to other components
connected to the bus which can lead
to incorrect operation.

Electromagnetic energy emanating
from compromised transmission
medium may be used to deduce the
information transmitted on the bus
and compromise the system’s
conﬁdentiality.

Electromagnetic energy emanating
from a compromised coupler may
be used to deduce the information
transmitted on the bus and
compromise the system’s
conﬁdentiality.

Compromised subsystem can
provide corrupted data to other
components and lead to incorrect
operation. It can also spoof as
another component by changing the
TA ﬁeld of a command.

Compromised subsystem can abuse
access to devices that have the
ability to transmit data outside the
system (i.e., radio transmitter) and
leak sensitive information.

DPR data

Corrupted data provided to a
component can lead to incorrect
operation.

Classiﬁed data that leaks outside
the system in plain text can be
abused by malicious individuals.

Subsystem data

Corrupted data provided to a
component can lead to incorrect
operation of the system.

7

Data in motion

Corrupted data provided to a
component can lead to incorrect
operation of the system.

Classiﬁed data and/or operation
logic that leaks outside the system
in plain text can be abused by
malicious individuals.

Classiﬁed data and/or operation
logic can be leaked outside the
system by compromising emanation
and can be abused by malicious
individuals.

Compromised/corrupted
transceiver can stop data transfer
between the bus and the subsystem
which can lead to DoS to the
subsystem it connects to the bus,
and/or to other components that
depend on the data it should
transmit.

Shorts or failure of the transmission
medium may lead to total
disconnection of the
communication over the bus and
interrupt the system’s operation.

Unavailable coupler disconnects the
RTs connected to the coupler from
the bus. In some cases it can also
cause DoS to other components
connected to the bus.

Unavailable subsystem stops
responding to commands and data
transmission which might lead to
DoS to other components
depending on its outputs and
possibly even to the entire system.
Corrupted data sent by a
compromised subsystem to other
subsystems may also result in DoS.

Unavailable or corrupted data may
lead to DoS to the components
depending on it, and possibly even
to the entire system.

Unavailable or corrupted data may
lead to failure of the subsystem’s
operation and may also result in
DoS to the components depending
on its outputs and possibly even to
the entire system.

Unavailable data might lead to DoS
to the components depending on it
and possibly even to the entire
system.

manufacturing, code writing, integration, and testing. Dur-
ing the development phase, malicious individuals can ex-
ploit their access to the components and insert erroneous or
malicious code, or physically tampering with components.
Though components are tested before they are delivered
to clients, a sophisticated attacker can inject code that is
programmed to operate within a speciﬁc context and can
identify when it is in the real environment, thereby evading
detection tools.

During the deployment and maintenance phase various
procedures performed may expose the system to malicious
code injection. These procedures include: operating system
and software updates, bug ﬁxes, system conﬁguration, and
data loading. Such maintenance activities may be performed
via wireless communication or physically via CD/DVD,
USB connection, or through a computer that is connected
to the bus. In this phase, code injection and manipulation
may also be performed by another component that was
previously compromised and is connected to the bus.

False data injection. Data injection refers to false data
provided by sensors, such as Global Positioning System
(GPS) or Radio Detection And Ranging (RADAR) systems,
or an external device (e.g., magnetic tape, CD/DVD, or
computer). In recent years extensive research has been
conducted regarding false data injection attacks on control
systems, mainly on electrical power grids [17], [22]. In
this type of attack, the attacker injects crafted data into
the system through sensors (or other input devices) that
alter the normal behavior of the system and might lead
to failures and even the execution of malicious code. Note,
however, that in order to perform a successful data injection
attack without detection, the attacker must have in depth
knowledge of the system and its vulnerabilities.

Physical tampering. Every electronic device emits elec-
tromagnetic radiation. By eavesdropping on the device and
analyze its electromagnetic emanations, an attacker can re-
veal information regarding the device’s operation. This type
of attack is called tempest [15], and it is addressed in the
Designer’s Notes for MIL-STD-1553. However, a malicious
individual who has physical access to the system can make
subtle changes to the system, such as adding computational
capabilities to a coupler, manipulating wiring or the cou-
pler’s grounding. Such modiﬁcations may not change the
component’s behavior signiﬁcantly, but does create some
type of side effect (such as ampliﬁed electromagnetic ra-
diation), which may also go undetected if the system is not
speciﬁcally tested for those speciﬁc side effects.

4.2.2 Threat agents

After the attacker managed to gain access to the system,
he/she can use one of the following threat agents in order
to execute an attack: a component connected to the bus or
a malicious individual (human) possessing access permis-
sions to the system.

Component (RT and BC) – we distinguish between two
types: a compromised component and a fake component.
A compromised component is a component which was
originally part of the system and was manipulated by the at-
tacker. This may include components that are not constantly
connected to the bus and are connected on demand (e.g.,

7

for uploading conﬁgurations, downloading logs, and main-
tenance). A fake component was not part of the system and
was connected to it illegitimately. Once connected, the fake
component becomes part of the system and can transmit
data and listen to all communications. We also distinguish
between BC and RT components, since the functionality of
the BC is more extensive than the functionality of the RT,
and hence has greater capabilities for executing attacks.

Malicious individual – an individual (human) that co-
operates with the attacker (or the attacker himself) and has
access to the system, who can tamper with its components
physically (by sabotaging their circuitry, for instance), or
logically (e.g., by inserting errors in a component’s code).

4.3 Attack Methods and Consequences

This section describes the threats to the MIL-STD-1553 com-
munication protocol, which are categorized by their impact:
denial of service, data leakage and data integrity violation.
The following subsections elaborate on the different threats
to the 1553 communication bus and provides methods to
execute them. Table 2 provides more detailed description of
each attack method, categorized by message manipulation
and behavior manipulation. Message manipulation refers to
modiﬁcation of legitimate words (command, data, or status)
transmitted over the bus. Behavior manipulation refers to
altering the behavior of the compromised component, for
example, transmitting fake (malicious) messages in unusual
timings or order.

4.3.1 Denial of Service (DoS)

DoS can be achieved by damaging physically or logically
the system’s assets, and will usually require only one threat
agent. Physical damage to a component can harm its ability
to perform operations, produce outputs, or transmit them
over the bus. In particular, if the damaged component is the
bus itself, there could be a complete disconnection between
all of the components connected to it.

Logical damage refers to exceptions occurred during
component’s normal operation, component’s incorrect oper-
ation, or data manipulation and corruption. These scenarios
result in corrupted output or lack of response, which can
lead to denying the operation of one or more components.
Following a description of possible methods to achieve DoS
to an 1553 communication bus.

Message manipulation: compromised components with
BC capabilities can change ﬁelds of a command word (e.g.
WC, T/R, and TA) to control data routing and cause col-
lisions. For example: denying a ’transmit’ command from
reaching the GPS by changing its TA ﬁeld will cause other
subsystems (e.g. navigation, artillery, etc.) rely on outdated
data, which can have severe outcomes. Manipulating status
words by a threat agent to falsely indicate on errors in the
target RT might lead to termination of the communication
with it, although it operates correctly. Data words can be
easily corrupted by different threat agents, by causing col-
lisions or manipulating them at the subsystem’s level. Lack
of sufﬁcient input validation by the component can lead to
an incorrect operation and even crash it.

Behavior manipulation: compromised components that
can control their transmission times and response delays

or behave differently than the command speciﬁes can also
cause collisions and failures to other component, thus lead
to DoS.

Possible operational consequences: DoS to the 1553
communication bus can have devastating results, especially
because it is used for mission critical systems. The attack can
be executed upon detection of some operation in order to
intercept it. For example, an attacker that listens to the bus
can identify that the system entered a certain geographic
zone and deny location data from updating the navigation
system, or identify that the system is aiming to ﬁre at a target
and deny the ﬁring command from reaching the relevant
components.

4.3.2 Data leakage

Data leakage in the context of the MIL-STD-1553 commu-
nication bus is the result of unauthorized data transmission
between components (i.e. components of different security
levels) or outside the system.

Message manipulation: by changing the WC or TA
ﬁelds in a command word, a threat agent can instruct a
component to transmit exceeding data words, or to transmit
data words to another component (that may have lower
security level). Data can also be leaked using the reserved
bits of a status word, or by modulating additional payload
on legitimate data words.

Behavior manipulation: threat agents that can control
their behaviors are capable of creating a covert channels
in order to leak data as presented by Neugen in [24]. If
the threat agent has BC capabilities it can also utilize idle
time on the bus and initiate unauthorized data transfers.
Moreover, if the threat agent has an access to an external
device or removable hardware it can utilize it to leak data
outside the system. Data can also be leaked physically by
eavesdropping the electromagnetic emanations of compo-
nents.

Possible operational consequences: Leaked data can
help the attacker conclude information about the operation
of the system. Usually vehicle have service ports (e.g. USB)
that are easily accessible to maintenance crew for debugging
and investigating the vehicle’s performance. A malicious
crew member can extract logs and trafﬁc traces from the
system and pass them to the attacker. Sensitive information,
such as: current vehicle location, targets, and destinations,
can be leaked by a compromised component outsize the ve-
hicle by using legitimate external communication channels
(e.g., radio).

4.3.3 Violation of data integrity

Violation of data integrity refers to invalid or incorrect data
that ﬂows inside the system and causes other component to
fail or operate incorrectly. Incorrect data can get inside the
system by a threat agent external to the system (see 4.2.1)
or by an inside threat agent that can manipulate messages
exchanged over the bus or send fake data in the behalf of
another component (i.e., spooﬁng), and cause the system to
behave abnormally.

Possible operational consequences: by altering the data
words an attacker can cause the system to navigate to the
wrong destination, ﬁre at the wrong target, and even to no

ﬁre at all, or withhold/add objects from/to the vehicle’s
dashboards and deceive the crew aboard.

8

ANOMALY

DETECTION

5 SEQUENCE-BASED
METHOD FOR THE 1553 COMMUNICATION BUS
To the best of our knowledge, there are no security solu-
tions for identifying and/or preventing cyber attacks on
the 1553 communication bus. Existing security solutions
(e.g., ﬁrewall, intrusion and malware detection, data leakage
prevention, access control) are not suitable for the 1553
communication bus because they require signiﬁcant adapta-
tion and conﬁguration to the speciﬁc operating systems and
communication protocol. Existing solutions also require the
application of changes to various components of the 1553
communication bus which may be cost prohibitive due to
its extensive deployment in various aircrafts and vehicles.

Therefore, we propose adding a lightweight, MIL-STD-
1553 tailor-made anomaly detection [1] solution that is
based on continuous monitoring of the messages transmit-
ted over the bus and the application of machine learning-
based anomaly detection algorithms, in order to identify at-
tacks on the bus. In this section we present a sequence-based
anomaly detection module, which is a solution for iden-
tifying command word manipulations and timing-related
behavior manipulations.

The advantages of the proposed solution are two-fold.
First, by using machine learning techniques, which are
highly ﬂexible and adaptive [7], we can provide a robust
solution which can be automatically adapted to any 1553-
based system in a very short time. Second, the proposed
solution can be implemented (integrated) as part of a Bus
Monitoring (BM) module and therefore does not require any
change to the existing modules of the bus.

The sequence-based anomaly detection module focuses
on detecting whether the message complies with the prede-
ﬁned major frame speciﬁcation for the speciﬁc bus imple-
mentation, or whether it arrived out of order or was sent at
the wrong time. Similar to [3], we use time interval analysis
of messages and inspect their deviation from their normal
time cycle.

Since most of the messages sent over the bus are peri-
odic, it is more likely that command and timing features
will be useful for identifying anomalous messages. For
that, we propose the use of sequence mining algorithms,
such as a Markov chain model, which are able to derive a
model which represents valid transitions of messages from
a training set containing legitimate messages.

Models which are based on command features can help
detect messages that are sent out of order. For example,
consider a simple case of a major frame that consists of four
messages: m1, m2, m3 and m4 that are sent as illustrated in
Figure5(a). If an attacker tries to utilize the idle time between
,m3 and m4 to send its own message - m5 (Figure 5(b)), the
model will identify it immediately as an anomaly, since the
only acceptable transition from m3 is to m4. However, if
the attacker chooses to utilize m4 (Figure 5(c)), it might be
detected as benign and cause the real m4 to be detected
as an anomaly. In this case the timing features will assist
the model in detecting the anomalous command, since the
attacker’s m4 will be sent at a timing that does not comply

TABLE 2
Threats and attack methods

9

Category

DoS attack

Data Leakage

Data integrity vaiolation

WC ﬁeld
– Changing the WC ﬁeld to a smaller number
causes the target RT to receive or transmit partial
data which can lead to an error in the target RT or
other RTs depending on its output.
– Changing the WC ﬁeld to a larger number can
also lead to an error due to collisions and
corrupted data reception.
T/R bit
– Flipping the T/R bit in a ’transmit’ command
causes the target RT to receive a ’receive’
command that causes the target RT to respond
with an error or wait for data to arrive (while no
data is transmitted); furthermore the RT won’t
send the data it should to other RTs and they
won’t get their inputs.
– Flipping the T/R bit in a ’receive’ command
causes the target RT to receive a ’transmit’
command that can lead to an error or data
transmission that causes collision (since the BC
continues to transmit the data of the ’receive’
command).
TA ﬁeld
– Changing the TA ﬁeld to another/unsupported
RT address prevents the command from reaching
its target RT and can cause a failure in the RT’s
operation or failure of other RTs depending on it.

A compromised RT can impersonate as another
and set the ’Busy’, ’Terminal’, or ’Subsystem’ ﬂags
in its status word and provide a falsely indication
to the BC regarding a malfunction or inability to
handle messages and thus disrupt the
communication with that RT. Similarly, a fake BC
can respond on behalf of the target RT and signal
the BC to stop sending commands to the target
component.

– A malicious BC or RT can alter legitimate data
transmitted and cause failure in the target
component (if the target component doesn’t
perform validation at the subsystem level).
– An attacker who has prior knowledge about
the target component can generate and inject fake
data that can cause failure, disrupt the normal
operation, or impair the outputs of the target
component.

Fake command
Issuing fake commands (either deﬁned by the
standard or meaningless) that are not part of the
system’s normal operation may result in
collisions, blocking all communication over the
bus or affecting the proper system’s operation
(e.g. issuing shut-down commands or clock
synchronizing at incorrect timings).
WC ﬁeld
– Sending less data than speciﬁed by the WC
ﬁeld of a command causes the target component
to receive incomplete data and may fail to operate.
– Sending excessive amount of data can cause a
collision if the target component responds with its
status while the threat agent is still transmitting
data.

– Threat agents that can control the timing of
their transmissions can transmit messages at the
time of choice. Sending unexpected messages to
target components may result in failures.
– Threat agents that can control the timing of
their transmissions can cause collisions that
corrupt data transmitted over the bus (e.g., by
transmitting at random timing) and can lead to
error or incorrect operation of other components.

1

Command word

2

Status Word

3

Data Word

4

Command Word

5

Status word

6

7

8

Transmission
timings

BM
impersonation

tempest

Message manipulation

WC ﬁeld
– By changing the WC ﬁeld of a ’transmit’
command to a larger number the threat agent
might cause the target RT to transmit more data
than it should. If the attacker is familiar with the
memory map of the target RT, he/she can use
this method to access restricted areas in the
target RT’s memory.
TA ﬁeld
– By changing the TA ﬁeld in a ’transmit’
command to another RT address the threat
agent might obtain data from a subsystem that
it is not authorized to hold.
– By changing the TA ﬁeld of a ’receive’
command, the threat agent can force an RT to
accept data that it might not be authorized to
hold.

A threat agent with BC capabilities can be used
to tamper with the communication between the
real BC and various RTs. The threat agent can
corrupt the original command when it is
transmitted over the bus, and send its own
command to the target component instead. The
target component will send its response without
knowing that the command received is different
than the original one, and the real BC will
receive a response for a command it did not
send.

Any threat agent connected to the bus (with BC
or RT capabilities) can corrupt status words
transmitted back to the real BC and send fake
statuses as if is the transmitting RT.

Threat agents can utilize idle times on the bus
and resend fake commands to target
components on behalf of legitimate
components, in order to override the real data
stored in the target components’ memory. The
target components will consider the fake data to
be the real data received from the legitimate
component.

Leaking data via status words can be done by
utilizing the ’reserved’ bits (see Figure 2) - three
bits that are reserved for future development of
the standard. The standard speciﬁes that these
bits should be unused and remain set to zero. A
lack of status word monitoring enables
cooperating threat agents to easily transfer any
data without detection.

Any threat agent can use the data words it
transmits in order to modulate additional
payload. This type of attack requires a
cooperating threat agent who is familiar with
the modulation method and can then decode
the additional payload.

Behavior manipulation

Neugen presented in [24] a storage attack
method to create covert channel between two
compromised components of different security
levels over the 1553 bus, which requires a
compromised BC and a compromised RT, and is
based on the RT’s speciﬁc ’command
illegalization’ implementation.

Neugen presented in [24] a storage attack
method to create covert channel between two
compromised components of different security
levels over the 1553 bus, which is based on the
Service Request (SR) bit of a status word and
requires a cooperating BC and RT.

– Neugen presented in [24] a timing attack
method to create covert channel between two
compromised components of different security
levels over the 1553 bus, in which two
cooperating RTs establish a signaling
mechanism based on their response time delays
that are interpreted into binary data.
– Threat agent with BC capabilities can utilize
idle time periods on the bus and initiate data
transfer with any RT in order to extract data. If
there is a cooperating threat agent connected to
the bus, then the agent with BC capabilities can
initiate RT-RT communication and transfer data
from the target RT to the cooperating threat
agent.

Any threat agent connected to the bus can act as
a BM and record the data transmitted over the
bus which is available to all components
connected to the bus. This data may be further
leaked to other components or external devices
via removable hardware (e.g., USB, CD, or
magnetic tape), an available connection to other
networks, or covert channels.

Malicious individuals can eavesdrop and
capture the electromagnetic emanations of
components [15] (which can be enhanced by
physically sabotaging the components), and
analyze them in order to obtain information
about the target component’s operation that can
imply on other operations and characteristics of
the entire system and help the attacker better
understand it.

with its normal transmission timing, as deﬁned by the major
frame.

If a message is found anomalous by this module, an alert

is generated.

Fig. 5. Simple major frame examples for: (a) a legitimate major frame, (b)
new message injection attack, (c) legitimate message injection attack.

5.1 Detection algorithm

As previously described, we detect anomalous messages
based their timing and order. We opt to use the Markov
chain model as the basis for our detection mechanism, in
order to represent the normal behavior of the monitored
bus (similar to [28]).

We distinguish between two types of messages: periodic
and aperiodic. A periodic message is sent by the BC at
ﬁxed time intervals (referred to as time cycles). An aperiodic
message is sent by the BC as a result of an event or a Service
Request.

In order to proﬁle both periodic and aperiodic messages
we use two Markov models - one for each type. The periodic
Markov model’s states are deﬁned by command and timing
features (see Table 3). Aperiodic messages, which are sent
upon demand, are likely to be found anomalous by the pe-
riodic model which uses time-related features. Therefore, a
second model is maintained, the aperiodic Markov model, in
which each of the states are represented only by command
features. Next, we provide a detailed description of the
training and detection processes of the proposed method.

TABLE 3
Extracted features used for deﬁning the Markov model states

Feature
name

Src.
Terminal
Address

Src. Sub-
address

Dst.
Terminal
Address

Dst. Sub-
address

Channel

Word
Count
Is Mode
Code

Time
Cycle

Label

Values

Description

0-31,
N/A

0-31,
N/A

0-31,
N/A

0-31,
N/A

A, B

0-32

true, false

numeric

Benign,
Anomaly,
N/A

The address of the terminal sending the
data. If the terminal is the BC, the address
is ’N/A’.
The subaddress from which the data is
sent in the source terminal. If the terminal
is the BC, the subaddress is ’N/A’.
The address of the terminal receiving the
data. If the terminal is the BC, the address
is ’N/A’.
The subaddress to which the data is saved
in the destination terminal. If the terminal
is the BC, the subaddress is ’N/A’.
The channel on which the message was
sent.
The number of data words sent in the
message frame.
Whether the command is a mode code or
not.
The time cycle (in microseconds) of the
message. Note that a message can have
several different time cycles.
The message label: ’Benign’, ’Anomaly’, or
’N/A’ (for cases the model cannot classify
the message).

Command
features

Timing
features

10

5.1.1 Training process

The training phase requires a training set that consists solely
of normal bus operation (i.e., legitimate messages). During
this phase, the states of each of the two Markov models are
identiﬁed, and then the states’ transition probabilities are
computed.

Identifying the Markov model states. Each statej in
the Markov model is deﬁned by a set of features that are
extracted from the messages observed in the training set
(denoted by T S). The states of the aperiodic Markov model
are deﬁned by the following seven features (listed in Table
3): ’Src. Terminal Address’, ’Src. Subaddress’, ’Dst. Terminal
Address’, ’Dst. Subaddress’, Channel, ’Word Count’, and ’Is
Mode Code’.

We refer to each unique tuple (deﬁned by the values
of the above features) as a message ID. Each message ID
deﬁnes a speciﬁc state of the aperiodic Markov model. In ad-
dition to the above seven features, the states of the periodic
model include an eighth feature – the ’Time Cycle’ feature –
which indicates the time cycle of a periodic message. Since
a periodic message can appear in one or more predeﬁned
time cycles, there is a need to deduce the time cycle(s) of the
message in order to deﬁne the states of the periodic Markov
model.

Therefore, in order to classify a message as periodic or
aperiodic, and to deﬁne the states of the periodic Markov
model, for each message ID we compute the ’Time Cycle’
feature as described in Algorithm 1. Let T Sj be the sub-
sequence of messages containing the instances of message
ID j. For each message in T Sj we calculate the sequence
of time differences between two consecutive appearances
of the message (referred to as ’time difference sequence’
and denoted by T Dj in Algorithm 1). The time difference
sequence is ordered in ascending order, and is then clustered
in a greedy manner as follows. Each time difference value in
the ordered sequence is compared with the previous value.
If the difference between the current value and the previous
one is smaller than a predeﬁned threshold (denoted by
tr), the current time difference is assigned to the current
cluster; otherwise, a new cluster is created with the current
time difference value. In our study we set the predeﬁned
threshold to be 40 microseconds which is the acceptable
deviation in the time difference values in existing platforms
implementing the 1553 communication bus. Eventually each
cluster represents a time cycle of message ID j and the
representative value of each cluster is the average of the
time difference values in the cluster.

After extracting the time cycles of each message ID we
can classify them as periodic and aperiodic by analyzing
their time cycles and number of occurrences as follows.
If a message ID is very rare (i.e., the number of times it
was observed is lower than a predeﬁned threshold), it is
classiﬁed as aperiodic. If the number for detected time cycles
(according to Algorithm 1) of a message ID is greater than a
predeﬁned threshold (set to three in our study) it is classiﬁed
as aperiodic. In any other case the message ID is classiﬁed
as periodic.

Computing the state transition probabilities. The sec-
ond step in the training phase, after identifying the states of
the periodic and aperiodic Markov models, is computing the

Algorithm 1 Extract time cycles of a message
1: procedure EXTRACTTIMECYCLES(T Sj)
2:
3:

for i := 1 to |T Sj| do

T Dj.append(T Sj[i].time − T Sj[i − 1].time)

4:
5:
6:
7:
8:
9:
10:

11:

12:
13:

Sort(T Dj)
k ← 0
clusters[k] ← T Dj[k]
for i := 1 to |T Dj| do

dif f ← T Dj[i] − T Dj[i − 1]
if dif f > tr then
k ← k + 1

clusters[k].append(dif f )

for i := 0 to k do

cyclesj[i] ← ComputeAverage(clusters[i])

return cyclesj

state transition probabilities. By iterating over the training
set we ﬁrst compute the following values for each model:

• occurj = count(statej) – the number of times that

statej was observed in T S.

• transj→l = count(statej → statel) – the number of

times in which statel appeared after statej in T S.
Then we can calculate the following probabilities:
• stateP robj = occurj

|T S| – probability of observing statej

in T S.

transj→l

k∈S

(cid:80)

• transP robj→l =

– probability of tran-
transj→k
sition from statej to statel (S is the set of all states
discovered in T S).
Note that when calculating probabilities for the periodic
model, transitions involving aperiodic messages are ignored
(i.e., not considered in the computation of probabilities).
This is because aperiodic messages cannot be mapped to
the states of the periodic model (i.e, they do not have a time
cycle).

Calculating the anomaly threshold. During the detec-
tion phase, the derived Markov models assign a probability
for an observed transition of two messages. In order to
classify the observed transition as normal or abnormal,
the probability is compared against an anomaly threshold.
The anomaly threshold (denoted by tra) is deﬁned as the
minimal probability of a sequence of length two observed in
the training set. The probability of the sequence [m1,m2] is
computed as follows: stateP robs1 · transP robs1→s2 , where
si, (i = 1, 2) is the corresponding state of mi in the relevant
model.

5.1.2 Detection process

In the detection phase, a message is examined in order to
see if it was manipulated in a speciﬁc way. The input to the
detection algorithm (Algorithm 2) is the inspected message
(msgi) and the relevant model (model), which is determined
according to the message’s type (periodic or aperiodic).

First, the model is applied on msgi (by evaluating the
transition from the previous message msgi−1 to the current
message msgi) in order to compute the anomaly score (line
2, as in the anomaly threshold step). If the anomaly score is
greater than or equal to the model’s threshold (tra), msgi is
labeled as ’Benign’ (lines 3-4). Otherwise msgi is labeled as
’Anomaly’.

11

A message that was classiﬁed as ’Anomaly’ (e.g., a
crafted message that was injected by the attacker) can lead to
a misclassiﬁcation of its successive benign messages. This is
because the transition from an anomalous message ma to its
successive message mb will be detected as anomalous even
if mb is benign since the transition sa → sb (the correspond-
ing states) is not recognized by the model. Therefore, in
order to avoid incorrect classiﬁcation of successive messages
we apply (in lines 7-10) a point anomaly recovery process in
which we evaluate the transition from the last message that
was classiﬁed as ’Benign’ (msglastBen). If this transition is
classiﬁed as ’Benign’ than the classiﬁcation of msgi will be
updated to ’Benign’.

label ←(cid:48) Benign(cid:48)

score ← model.Apply(msgi, msgi−1)
if score ≥ tra then

Algorithm 2 Detect order and timing anomalies
1: procedure DETECTANOMALY(msgi, model)
2:
3:
4:
5:
6:
7:
8:
9:
10:

label ←(cid:48) Anomaly(cid:48)
if IsAnomaly(msgi−1) then

label ←(cid:48) Benign(cid:48)

else

score ← model.Apply(msgi, msglastBen)
if score ≥ tra then

return label

6 EXPERIMENTS AND RESULTS

In order to evaluate the proposed method we conducted
two experiments. For the ﬁrst experiment we established an
operational testbed which consists of real 1553 hardware,
identical to that used in operational platforms. The testbed
is capable of simulating DoS and spooﬁng attacks that
utilize behavior and message manipulation methods, and
implements the sequence-based anomaly detection module.
For the second experiment we performed off-line eval-
uation of the module on real 1553 system logs. These logs
does not contain attack record, thus we only evaluated the
method in terms of false alarms.

6.1 Testbed architecture

The testbed (illustrated in Figure 6) consists of three PCs
that simulate the various components of simpliﬁed avionic
systems. Each component is connected to the bus via a 1553
interface card. The subsystems are distributed on different
PCs in order to physically place them at different distances
from the bus, thereby simulating an actual bus topology
setup. The main components simulated in the testbed are:

BC. This component initiates all communications over
the bus. The BC is implemented in the BC/Attacker PC
(item 3 in Figure 6) and is connected to the bus through
a DDC BU-67114Hx interface. The BC’s software includes a
graphical user interface (GUI) that allows us to control its
activity (legitimately or maliciously).

BM. This component monitors the bus and implements
our proposed sequence-based anomaly detection module.
The BM’s software provides a GUI that enables online
training of the module, online monitoring and detection of

anomalous messages transmitted over the bus, and display-
ing visual alerts when such messages are detected. In addi-
tion, the BM writes to a log ﬁle all monitored messages and
their labels (assigned by the anomaly detection algorithm)
for ofﬂine analysis. The BM is implemented in the Monitor
PC (item 1 in Figure 6) and is connected to the bus through
a DDC BU-67114Hx interface.

RTs. The RTs’ programs are implemented on the RTs PC
(item 2 in Figure 6). The RTs PC is connected to the bus
through two interfaces: a DDC BU-67114Hx interface and
an Excalibur EXC-4000PCIe card which logically enables up
to 32 connections. These RTs are used for benign activity
simulation, and their software also provides a simple GUI
which enables us to start or stop their operation.

Attacker component. This component has the function-
ality of either a BC or an RT and is responsible for executing
various attacks as a fake RT/BC (i.e., illegitimately con-
nected to the bus) or a compromised RT/BC. The attacker
component is controlled manually through a GUI, and its
software is implemented in the same PC as the BC (item 3
in Figure 6) and is connected to the bus via another DDC
BU-67114Hx interface.

The testbed also contains: (1) an oscilloscope (item 4 in
Figure 6) for visualizing electric signals transmitted over
the bus, (2) a controller (item 5 in Figure 6) for simulating
user operations, and (3) a display (item 6 in Figure 6) for
visualizing the physical impact on the simulated operations
on the simulated system.

Implemented attack scenarios. In order to evaluate the
proposed algorithm we implemented three attack scenarios:
two spooﬁng scenarios and a DoS scenario that were simu-
lated on two different bus topologies. The topologies model
two systems which operate differently from one another.
The ﬁrst topology, denoted by topology1, simulates a larger
and more crowded system that consists of 19 components:
the BC, BM, a compromised RT with BC capabilities (the
attacker component), and 16 benign RTs. The major frame
length is 80 milliseconds, during which 21 different mes-
sages are sent. Twenty of these messages have a time cycle of
20 milliseconds, and one has a time cycle of 80 milliseconds.
The second topology, denoted by topology2, simulates a
smaller system that performs some critical operation and
consists of four components: the BC, BM, a compromised RT
with BC capabilities (the attacker component), and a benign
RT. The major frame length is 20 milliseconds, during which
ﬁve different messages are sent (the time cycle of each
message is 20 milliseconds). Table 4 describes the normal
and attack operations for each scenario, the topology it was
implemented on, and the attack trigger.

6.2 Testbed experiment

In this experiment we evaluated the ability of our proposed
method to identify the attack methods described in Table 4.
Dataset description. The dataset used for this experi-
ment was recorded by the BM in the testbed during both
normal and attack activity. The dataset consists of three logs
– one for each attack scenario. A log is a collection of events
(i.e., records), each representing a message. Each record
contains all of the information extracted from the words
(according to the word structure in Figure 2). Each recording

TABLE 4
Attack scenario descriptions

12

Topology

Normal operation

Attack
trigger

Attack operation

topology1

topology2

Detection
of idle
time

Detection
of user
operation

The BC sends a
transmit command
to one of the
benign RTs, the RT
responds with its
data and then the
BC transmits data
to all other RTs.

The BC queries
certain values from
the two TRs, then
broadcasts updates.
When the user
initiates the special
operation, the BC
starts to broadcast
different data and
the RTs change their
states accordingly.
When the operation
ends, the
components return
to their previous
state and behavior
(query and
broadcast)

The attacker
component utilizes idle
time on the bus to
transmit fake data that
overrides the real data
sent earlier by the
benign RT.

When the
compromised RT
detects the start of the
special operation, it
pretends to be the BC
and thwarts the
operation by
broadcasting fake data
which causes the
operation to fail.

When the
compromised RT
detects the start of the
special operation, it
thwarts it by sending a
large amount of fake
commands to random
RT addresses, causing
collisions on the bus
that lead to the failure
of the operation.

Attack
scenario

Spooﬁng
attack
#1

Spooﬁng
attack
#2

DoS
attack

starts with a period of normal operation, and then the attack
was activated and stopped via the attacker component’s
GUI. The anomalous messages were labeled accordingly by
the attacker component. Table 5 presents statistics about the
dataset that was used for the evaluation.

TABLE 5
Testbed dataset statistics

Attack scenario

Spooﬁng attack #1
Spooﬁng attack #2
DoS attack

Train time
period

Train
records #

Test
records #

Anomaly
%

4.5 sec.
4 sec.
4.2 sec.

4,579
1,004
1,074

10,021
5,836
6,528

3.2
13
35.9

Experiment description. The logs recorded by the BM
were divided into two mutually exclusive sets (while pre-
serving the chronological order of the records): (1) Training
set -
a period of time from the beginning of the log
(approximately four seconds) that contains only records of
the system’s normal operation (i.e., benign records); (2) Test
set - the rest of the log which contains both normal operation
(benign) and attack (anomaly) records.

The training sets were used to build a model repre-
senting the normal behavior of the system in each attack
scenario, and the test sets were used to evaluate these
representations. After the training phase, each model was
applied on the corresponding test set (as described in 5.1.2).
The labels (’Anomaly’ or ’Benign’) assigned by the detection
algorithm were logged to a result ﬁle that was used for the
performance evaluation of the model.

Results. We evaluated the detection algorithm in terms
of precision and recall. The results are summarized in Table
6. As can be observed, the models learned during this exper-
iment correctly identiﬁed all of the benign and anomalous
messages (i.e., detected all anomalies with zero false alarms)
in all of the attack scenarios, which is highly important

13

remaining segments. Next, in each iteration the module was
trained with an additional segment and evaluated on the
remaining ones.

Results. The module’s performance was evaluated in
terms of false alarm rate (i.e. benign messages that were
labeled as anomalies). Figure 7 illustrates the experiment re-
sults for both logs. As can be observed, there is a very quick
and signiﬁcant decline in the false alarms rate for both logs.
The false alarms rate dropped to zero after approximately
three seconds for Log1 and near zero after approximately
ﬁve seconds for Log2. Note that the false alarms rate for
Log2 further improved after about 17 more seconds.

Fig. 6. Testing system architecture.

for a mission critical system based on the MIL-STD-1553
communication bus.

TABLE 6
Testbed experiments results

Records #

Precision

Recall

Anomaly

Benign Anomaly

Benign Anomaly

Benign

324

761

9,675

5,069

4,175

1.0

1.0

1.0

1.0

1.0

1.0

1.0

1.0

1.0

1.0

1.0

1.0

Attack scenario

Spooﬁng attack
#1

Spooﬁng attack
#2

DoS attack

2,347

6.3 Real system experiment

In this experiment we evaluated the performance of the
proposed method on logs collected from a real 1553 system.
Since these logs contain only the normal behavior of the
monitored system, we used them in order to evaluate the
minimal training time period required for achieving a good
representation of the system.

Dataset description. The dataset used for the second ex-
periment was recorded in a real system using the MIL-STD-
1553 data bus. This dataset consists of two logs recorded
during different operations of the system and do not contain
any abnormal behavior. The logs were formatted similarly
to the testbed logs. Table 7 presents statistics of the collected
datasets, the actual topology however, cannot be presented
due to conﬁdentiality issues. The datasets were divided into
chronologically ordered segments for incrementally training
the module. This dataset was used to estimate the minimal
training period for our method to correctly model a real
system.

TABLE 7
Real dataset statistics

Log

Components #

Log1
Log2

17
20

Distinct
messages #
37
43

Duration

Records #

Segments #

68.1 sec.
83 sec.

30,034
47,526

56
123

Experiment description. This experiment was con-
ducted in several iterations. In the ﬁrst iteration, the system
was trained using the ﬁrst segment and evaluated on the

Fig. 7. False alarm rate as a function of the training time period.

7 DISCUSSION

As presented in the previous section, our method succeeded
to distinguish between anomalous and benign messages in
the testbed experiment and also learned and classiﬁed with
very low false alarms rate the behavior of a real MIL-STD-
1553 based system.

Although our method achieved very good detection
rates,
it is not capable of detecting all attack methods
presented in Section 4.3. Attack methods that utilize only
data or status words, or require impersonating a component
(i.e. spooﬁng, in this case, the threat agent sends benign
messages with false data) will most likely not be detected
by the suggested method, since it does not extract features
from the data or status words, and does not have the ability

to physically authenticate the components connected to the
bus.

Therefor, we would like to suggest an extended stepwise
IDS architecture (Figure 8), which consists of three main
conceptual detection modules: (1) signal-based RT authen-
tication (Step I); (2) sequence and timing-based detection
of anomalous messages (Step II); and (3) detection of data
anomalies (Step III).

14

of the transmitting node as observed by the IDS. Various
features that can be extracted from the electrical signals
transmitted over the bus are correlated with the location of
the transmitting component on the bus. Therefore, during
the training/learning phase, given a dataset of legitimate
communication captured by the IDS, it is possible to create
a unique electrical proﬁle for each transmitting component.
During the operational (detection) phase, upon arrival of a
new message, the IDS attempts to match the electrical signal
patterns of each message with the proﬁle of the transmitting
component. If no match is found, the IDS will issue an alert
indicating that the message is spoofed and transmitted by
a fake source. Figure 9 is a capture of legitimate and fake
signals from our testbed (described in Section 6.1).

Fig. 9. Signal samples captured by the testbed.

Data anomaly detection module. This step of the detec-
tion process focuses on more sophisticated attacks involving
invalidating the integrity of the data transmitted via the
data words. A message that is analyzed by this module has
successfully managed to bypass the previous two mecha-
nisms. An attacker can manipulate the data words of benign
messages (by either injecting false data or corrupting the
data words) and disrupt the normal operation of the system.
This type of attack is easy to miss when focusing on just the
command and timing features of messages, and it can have
fatal consequences.

This module may contain more than one detection
model, since different subsystems connected to the bus have
different behavior and are using different data types (e.g.,
GPS location, speed, and status of different subsystems).
Moreover, each data type may require the application of
different machine learning algorithms to achieve optimal
performance.

Data-related features that are extracted in order to ap-
ply the data anomaly detection module can be generic or
application-speciﬁc. Generic features are computed from the
raw bit stream data (e.g., edit distance computed on the
current and previously transmitted data words, and byte
distribution). Application-speciﬁc features are computed at
a higher level of abstraction and can be correlated with other
extracted information to detect anomalies. For example, a
model analyzing location data can identify anomalies by de-
tecting signiﬁcant deviations from known routes, or detect
suspicious behavior by correlating the location data with
unlikely changes in speed, acceleration, and heading. After
extracting the features from the data words, an approach
similar to [13] can be applied for detecting anomalous data.

Fig. 8. Intrusion detection process.

The detection process is designed as a cascading pro-
cess that monitors the bus continuously and applies three
detection modules. As illustrated in Figure 8, the RT au-
thentication module is the ﬁrst module to be applied on
the current message observed on the bus. If this module
determines that the message is anomalous, meaning it was
not sent by the expected component, an alert is generated.
Otherwise, the message passes on to the sequence anomaly
detection module in order to verify that it was sent based
on the correct order and timing (as described in section 5).
If this module ﬁnds the message to be anomalous, indicat-
ing that the sender deviates from its normal behavior, an
alert is generated. Otherwise, the message passes on to the
third and ﬁnal module, the data anomaly module, which
is used for detecting anomalies in the message’s payload.
If no anomalies are detected in this step, the message is
considered benign, and the IDS checks the next message.

RT authentication module. Malicious nodes on the bus
can generate spoofed messages and impersonate other le-
gitimate RTs. Spoofed messages can be sent in their ex-
pected order and time, while carrying false payload, and
thus will be difﬁcult to detect. Therefore the ﬁrst step in
identifying anomalous messages should be authenticating
the identity of the transmitting component. We propose
authenticating each RT by analyzing the electrical signal

15

[15] KUHN, M. G., AND ANDERSON, R. J. Soft tempest: Hidden data
In International

transmission using electromagnetic emanations.
Workshop on Information Hiding (1998), Springer, pp. 124–142.
[16] LINDSAY, J. R. Stuxnet and the limits of cyber warfare. Security

Studies 22, 3 (2013), 365–404.

[17] LIU, Y., NING, P., AND REITER, M. K. False data injection attacks
against state estimation in electric power grids. ACM Transactions
on Information and System Security (TISSEC) 14, 1 (2011), 13.
[18] MATSUMOTO, T., HATA, M., TANABE, M., YOSHIOKA, K., AND
OISHI, K. A method of preventing unauthorized data trans-
In 2012 IEEE 75th Vehicular
mission in controller area network.
Technology Conference (VTC Spring) (May 2012), pp. 1–5.

[19] MCGRAW, R. M., FOWLER, M. J., UMPHRESS, D., AND MACDON-
ALD, R. A. Cyber threat impact assessment and analysis for space
In SPIE Defense+ Security (2014), Interna-
vehicle architectures.
tional Society for Optics and Photonics, pp. 90850K–90850K.
[20] MILLER, B., AND ROWE, D. A survey scada of and critical
infrastructure incidents. In Proceedings of the 1st Annual Conference
on Research in Information Technology (2012), RIIT ’12, ACM, pp. 51–
56.

[21] MILLER, C., AND VALASEK, C. Remote exploitation of an unal-

tered passenger vehicle. Black Hat USA 2015 (2015).

[22] MO, Y., AND SINOPOLI, B. False data injection attacks in control
systems. In Preprints of the 1st workshop on Secure Control Systems
(2010), pp. 1–6.

[23] MTER, M., AND ASAJ, N. Entropy-based anomaly detection for
In 2011 IEEE Intelligent Vehicles Symposium

in-vehicle networks.
(IV) (June 2011), pp. 1110–1115.

[25] SONG, H. M., KIM, H. R., AND KIM, H. K.

[24] NGUYEN, T. D. Towards mil-std-1553b covert channel analysis.
Tech. rep., Monterey, California. Naval Postgraduate School, 2015.
Intrusion detection
system based on the analysis of time intervals of can messages for
in-vehicle network. In 2016 International Conference on Information
Networking (ICOIN) (Jan 2016), pp. 63–68.

[26] VAI, M., WHELIHAN, D., EVANCICH, N., KWAK, K. J., LI, J., BRIT-
TON, M., FOLEY, J., LYNCH, M., SCHAFER, D., AND DEMATTEIS,
J. Systems design of cybersecurity in embedded systems. In 2016
IEEE High Performance Extreme Computing Conference (HPEC) (Sept
2016), pp. 1–6.

[27] WOLF, M., WEIMERSKIRCH, A., AND PAAR, C. Security in au-
tomotive bus systems. In Workshop on Embedded Security in Cars
(2004).

[28] YE, N., ET AL. A markov chain model of temporal behavior for
anomaly detection. In Proceedings of the 2000 IEEE Systems, Man,
and Cybernetics Information Assurance and Security Workshop (2000),
vol. 166, West Point, NY, p. 169.

8 CONCLUSIONS AND FUTURE WORK

In this paper we present a security analysis of MIL-STD-
1553 and suggested a machine learning-based approach as a
possible solution for attacks detection. As a proof of concept
we established a testbed, evaluated the proposed sequence-
based module on spooﬁng and DoS attacks simulated in the
testbed and on logs recorded in a real system. The results of
the experiments showed that the suggested algorithm can
distinguish between anomalous and legitimate messages
with high level of accuracy and requires a very short period
of training time to achieve a good representation of the
system.

In future work we are planning to implement and eval-
uate additional attack scenarios, testing the proposed intru-
sion detection module on additional bus conﬁgurations, and
perform additional evaluation on real systems data. More-
over, we plan to implement and evaluate the RT authenti-
cation module and the data anomaly detection module that
will focus on detecting anomalies in geo-location data.

REFERENCES

[1] CHANDOLA, V., BANERJEE, A., AND KUMAR, V. Anomaly detec-
tion: A survey. ACM computing surveys (CSUR) 41, 3 (2009), 15.
[2] CHECKOWAY, S., MCCOY, D., KANTOR, B., ANDERSON, D.,
SHACHAM, H., SAVAGE, S., KOSCHER, K., CZESKIS, A., ROESNER,
F., KOHNO, T., ET AL. Comprehensive experimental analyses of
automotive attack surfaces. In USENIX Security Symposium (2011),
San Francisco.

[3] CHO, K.-T., AND SHIN, K. G. Fingerprinting electronic control
In 25th USENIX Security
units for vehicle intrusion detection.
Symposium (USENIX Security 16) (Austin, TX, 2016), USENIX
Association, pp. 911–927.

[4] CHONG, J., PAL, P., ATIGETCHI, M., RUBEL, P., AND WEBBER, F.
Survivability architecture of a mission critical system: the dpasa
example. In 21st Annual Computer Security Applications Conference
(ACSAC’05) (Dec 2005), pp. 10 pp.–504.

[5] DESHU, C., AND JIXIANG, W. Guilin institute of optical commu-
nications; ﬁber-optic mechanization of an aircraft internal time
division command/response multiplex data bus (come up for
discussions)[j]. Optical Communication Technology Z 1 (1991).

[6] EDITION, S. Mil-std-1553 designer’s guide.
[7] GARCIA-TEODORO, P., DIAZ-VERDEJO, J., MACI ´A-FERN ´ANDEZ,
G., AND V ´AZQUEZ, E. Anomaly-based network intrusion detec-
tion: Techniques, systems and challenges. computers & security 28,
1 (2009), 18–28.

[8] GILLEN, A., AND SHELTON, J.

Introduction of 3910 high speed
In Military Communications Conference, 1992. MIL-
data bus.
COM’92, Conference Record. Communications-Fusing Command, Con-
trol and Intelligence., IEEE (1992), IEEE, pp. 956–960.

[9] GLIGOR, V. D. A note on the denial-of-service problem. In IEEE

Symposium on Security and Privacy (1983), pp. 139–149.

[10] HOPPE, T., KILTZ, S., AND DITTMANN, J. Security Threats to Au-
tomotive CAN Networks – Practical Examples and Selected Short-Term
Countermeasures. Springer Berlin Heidelberg, Berlin, Heidelberg,
2008, pp. 235–248.

[11] ISHTIAQ ROUFA, R. M., MUSTAFAA, H., TRAVIS TAYLORA, S. O.,
XUA, W., GRUTESERB, M., TRAPPEB, W., AND SESKARB, I. Secu-
rity and privacy vulnerabilities of in-car wireless networks: A tire
pressure monitoring system case study. In 19th USENIX Security
Symposium, Washington DC (2010), pp. 11–13.

[12] JIANG, W., GUO, W., AND SANG, N. Periodic real-time mes-
sage scheduling for conﬁdentiality-aware cyber-physical system in
wireless networks. In 2010 Fifth International Conference on Frontier
of Computer Science and Technology (Aug 2010), pp. 355–360.
[13] KANG, M.-J., AND KANG, J.-W. Intrusion detection system using
deep neural network for in-vehicle network security. PLOS ONE
11, 6 (06 2016), 1–17.

[14] KLEBERGER, P., OLOVSSON, T., AND JONSSON, E. Security aspects
In 2011 IEEE

of the in-vehicle network in the connected car.
Intelligent Vehicles Symposium (IV) (June 2011), pp. 528–533.

