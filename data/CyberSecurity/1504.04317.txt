Towards a Relation Extraction Framework for
Cyber-Security Concepts ∗

5
1
0
2

r
p
A
6
1

]

R

I
.
s
c
[

1
v
7
1
3
4
0
.
4
0
5
1
:
v
i
X
r
a

Corinne L. Jones Robert A. Bridges
John R. Goodall
cjones6@uw.edu bridgesra@ornl.gov testakm@ornl.gov jgoodall@ornl.gov

Kelly M. T. Huffer

University of Washington
Department of Statistics
Box 354322
Seattle, WA 98195

Cyber & Information Security Research Group
Computational Sciences and Engineering Division
Oak Ridge National Laboratory
Oak Ridge, TN 37831

ABSTRACT
In order to assist security analysts in obtaining information
pertaining to their network, such as novel vulnerabilities,
exploits, or patches, information retrieval methods tailored
to the security domain are needed. As labeled text data
is scarce and expensive, we follow developments in semi-
supervised Natural Language Processing and implement a
bootstrapping algorithm for extracting security entities and
their relationships from text. The algorithm requires little
input data, speciﬁcally, a few relations or patterns (heuris-
tics for identifying relations), and incorporates an active
learning component which queries the user on the most im-
portant decisions to prevent drifting from the desired rela-
tions. Preliminary testing on a small corpus shows promising
results, obtaining precision of .82.

Categories and Subject Descriptors
H.3.3 [Information Systems]: Storage and Retrieval

Keywords
bootstrapping, relation extraction, information extraction,
cyber security, natural language processing, active learning

1.

INTRODUCTION

The overall motivation behind this work is to aid security
analysts in ﬁnding and understanding information on vul-
nerabilities, attacks, or patches that are applicable to their
∗

This manuscript has been authored by UT-Battelle, LLC under Con-
tract No. DE-AC05-00OR22725 with the U.S. Department of Energy.
The United States Government retains and the publisher, by accept-
ing the article for publication, acknowledges that the United States
Government retains a non-exclusive, paid-up, irrevocable, world-wide
license to publish or reproduce the published form of this manuscript,
or allow others to do so, for United States Government purposes. The
Department of Energy will provide public access to these results of
federally sponsored research in accordance with the DOE Public Ac-
cess Plan http://energy.gov/downloads/doe-public-access-plan.

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
Cyber and Information Security Research Conference 2015 Oak Ridge, TN
Copyright 2015 ACM 978-1-4503-3345-0/15/04
http://dx.doi.org/10.1145/2746266.2746277 ...$15.00.

network. As discussed in [14], public disclosure of vulnera-
bilities and exploits often occur in obscure text sources, such
as forums or mailing lists, sometimes months before inclu-
sion in databases such as the CVE or NVD.1 Hence, tailored
methods of automated information retrieval are needed for
immediate awareness of security ﬂaws. Additionally, our ex-
perience with analysts shows that necessary tasks, such as
triage and response to alerts, performing network forensics,
and seeking mitigation techniques, require security practi-
tioners to ﬁnd and process a large amount of information
that is external to, but applicable to their network. Such
information resides in online resources such as vulnerabil-
ity and exploit databases, vendor bulletins, news feeds, and
security blogs, and is either unstructured text or a struc-
tured database with text description ﬁelds. In short, there
is a critical need to aid security analysts in processing text-
based sources by providing automated information retrieval
and organization techniques. To address this, we seek entity
and relation extraction techniques to identify software ven-
dors, products, and versions in text along with vulnerability
terms and the mutual associations among these entities.

Relation extraction is the area of natural language pro-
cessing (NLP) that seeks to recover structured data in the
form of (subject entity, predicate relation, object entity)-
triples that match a database schema from text sources. For
example, from the sentence “Microsoft has released a ﬁx for a
critical bug that aﬀected its Internet Explorer browser.”, we
would like to extract (Microsoft, is vendor of, Internet Ex-
plorer) as an instance of the (software vendor, is vendor of,
software product) relation. Our choices for entity concepts
and their mutual relations are driven by an ontology of se-
curity domain, which gives a schema for storage in a graph
database (see Sections 2.1, 2.2) ideally making such infor-
mation easily accessible to analysts. As annotated textual
data is scant and costly to produce, we describe a semi-
supervised technique for entity and relation extraction that
incorporates active learning (querying the user) to assist in
labeling only a few, most inﬂuential instances. While our
implementation combines elements of many previous boot-
strapping systems in the literature, applying these methods
to relation extraction in cyber-security is to the best of our
knowledge novel. Preliminary testing on a small corpus gives
promising results; in particular, low false positive rates are
obtained. Ideally, this preliminary work will lead to a fully
developed operational version that automatically populates

1https://cve.mitre.org/, https://nvd.nist.gov/

 
 
 
 
 
 
a knowledge base of cyber-security concepts from pertinent
text sources.

2. BOOTSTRAPPING

As is often the case with deploying NLP techniques to a
speciﬁc domain, the main hurdle is the lack of annotated
data, which is expensive to produce. Consequently, super-
vised means of information extraction, although thoroughly
developed, are not applicable. To accommodate this con-
straint, we implement a semi-supervised approach for re-
lationship extraction that follows the previous work in the
literature, but is tailored to our needs. Our implementa-
tion builds on Brin’s Dual Iterative Pattern Relation Ex-
pansion DIPRE algorithm [4], which uses a cyclic process
to iteratively build known relation instances and heuristics
for ﬁnding those instances.
Input to the algorithm is (1)
a relatively small set of “seed” instances of a given rela-
tion and/or seed patterns (heuristics for identifying a re-
lation instance generally from the surrounding text) and (2)
a relatively large corpus of unlabeled documents that are
believed to contain many instances of the relation. The pro-
cess proceeds by searching the corpus for mentions of the
few known seed instances, and, upon ﬁnding an instance,
the system automatically generates patterns from the sur-
rounding text and stores these heuristics. Next, the corpus
is traversed a second time using the patterns to identify
any, hopefully new, instances of the relation, which are then
stored in the seed set. To prevent the system from stray-
ing to undesired relations and patterns, a common addition
to the DIPRE process is a method of conﬁdence scoring for
nominated patterns/relation instances [7]. Our scoring pro-
cedure follows the BASILISK method of Thelen & Riloﬀ [18]
and is discussed in Section 2.3. A variety of works have
made contributions to this basic bootstrapping process, and
we reference the improvements that have shaped our im-
plementation throughout the discussion. We note that this
bootstrapping process has been used solely for entity extrac-
tion in many works, in particular, [6, 7, 9, 14, 18].

2.1 Entity Extraction & Document Relevancy
In order to extract a relation instance, the two entities
involved must be identiﬁed, and this task has previously
been accomplished in two ways. First, by using relation
extraction patterns that identify entities; for instance, the
initial work by Brin used regular expressions as part of the
patterns to identify potential entities and relations simul-
taneously [4]. Secondly, a common technique for relation
extraction algorithms (bootstrapping and otherwise) is by
using named entity recognition (NER) tools to identify en-
tities, and afterward proceed with techniques to ﬁnd entity
pairs which share the desired relation [1, 2, 8, 15, 16, 17].
Unfortunately, our experience as well as that of previous
works have found that “oﬀ-the-shelf” NER tools often fail
to identify many cyber-security domain concepts [3, 12, 14].
Using Freebase,2 an online knowledge base, for entity ex-
traction and disambiguation occurs in previous works [2,
15], and more generally, calling on public databases to aid
information retrieval is present in related works [3, 16, 17].
Following this line of thought, our implementation uses
gazetteers and regular expressions to label entities and dis-
cards documents deemed irrelevant before the bootstrap-
2http://www.freebase.com/

Table 1: Entity Types & Extraction Methods

Entity Type
SW Vendor
SW Product
SW Version
CVE ID
MS ID

Example(s)
Adobe
Acrobat
7, 11.0.08
CVE-2014-1127
MS-14-011

Extraction Method
Gazetteer (Freebase)
Gazetteer (Freebase)
Regular Expressions
Regular Expression
Regular Expression

Vuln Term xss, sql injection Gazetteer (handmade)
SW Symbol

Regular Expressions

pAlloc(), reg.exe

Note: SW Product includes operating systems and applica-
tions. Vuln Term entities are members of a hand-crafted list
developed in [3] that are terms descriptive of vulnerabilities
or attack consequences and are similar to the “Attack” en-
tity type in [12]. SW Symbol includes ﬁle names and named
elements of code such as functions, methods, and classes.

Table 2: Relation Types
Relation
Object Entity N
is vendor of
14
SW Product
is version of
6
SW Product
CVE of vuln
1
Vuln term
MS of SW
6
SW Product
MS of vuln
7
Vuln term
vuln of SW SW Product
14
SW Product
symbol of
2
9
SW Product
not version of
Note: N denotes number of seed patterns for each relation.

Subject Entity
SW Vendor
SW Version
CVE ID
MS ID
MS ID
Vuln term
SW Symbol
SW Version

1
2
3
4
5
6
7
8

ping begins. Entity types with examples and extraction
method are detailed in Table 1. Lists of software vendors and
software products were queried from the Freebase API un-
der the /computer/software developer category and /com-
puter/software, /computer/software/operating system, re-
spectively. A major advantage of this approach is that Free-
base includes alternate names for entities allowing easy dis-
ambiguation; e.g., “IE” and “Internet Explorer” are all iden-
tiﬁed as aliases of the same entity in Freebase’s database.
In order to discard documents unlikely to contain a relation
before further processing, a logistic regression classiﬁer is
trained on a few documents hand-labeled as relevant or not.
For our implementation, the number of each entity type ap-
pearing in the document are the input features, although the
framework is designed for a more robust feature set if de-
sired. Lastly, during the bootstrapping process for relation
extraction, if a known pattern is identiﬁed with an unlabeled
entity, that entity is then labeled. Hence, in the learning of
relations and patterns, the bootstrapping process can aid in
identiﬁcation of entities omitted by the initial gazetteers or
regular expression taggers.

2.2 Relations and Patterns

The bootstrapping process is run independently for each
of 9 relation types listed in Table 2. Informed by research
eﬀorts to build an ontology of the security domain [10], the
ﬁrst eight relations correspond to attributes of the “Vulner-
ability” and “Software” nodes of the ontology, while the last
relation, “not version of” was added to indicate and prevent
common errant inferences of the opposite relation. For each
relation, a few hand-crafted rules are given as input to start
the bootstrapping process, as reported in Table 2.

Our implementation involves three types of patterns: (1)

all the words/parts-of-speech in order between two appropri-
ate entity types, (2) a subset of contiguous words/parts-of-
speech occurring between two appropriate entity types, (3)
the parse tree path between two appropriate entity types. A
parse tree is an assignment of a tree structure to each sen-
tence with the words as leaf nodes, words’ parts-of-speech as
their parents, and other ancestral nodes correspond to the
sentence’s structure as given by a context-free grammar. By
deﬁnition there exists a unique path between any two nodes
in a tree, and, in particular, for two known entities in a sen-
tence, the parse tree path, known as a dependency path,
gives a natural feature set for deducing the existence of a
relation between the entities [2, 5, 8, 15].

Example parse tree for sen-
tence “I like eggs.” is given.
For this example the pat-
tern we extract from the
parse tree path from “I” to
“eggs” is [N, NP, S, VP, N].

S
✧
❜

✧
NP

❜
VP
❧❧✱✱
N
V

N

I

like

eggs

2.3 Scoring & Active Learning

A common pitfall of bootstrapping algorithms is straying
from the desired topic by iteratively learning spurious pat-
terns and relations. To increase accuracy, a variety of scor-
ing methods for rating conﬁdence in a nominated relation
or pattern have been proposed [7, 9, 11], and the common,
underlying goals of scoring methods are (1) to seek patterns
that are indicative of the given relation, but do not occur
with spurious instances, and (2) to seek relations that only
occur with trusted patterns. Additionally, active learning,
which refers to systems that query the user to provide accu-
rate input on a few pertinent examples, is incorporated into
our system, and has been used in a few previous bootstrap-
ping works [7, 18]. Discussion and comparative evaluation of
ﬁve bootstrapping scoring methods, in particular in the pres-
ence of active learning is the topic of [7]. As the BASILISK
system of [18] showed the greatest beneﬁt from user inter-
action in the study, our scoring procedure is inherited from
their implementation as described here [11].

Speciﬁcally, if a potential relation instance, r, is identiﬁed
n
by distinct patterns p1, ..., pn, R score(r) := P
i=1 log(fi +
1)/n where fi is the number of unique known relations iden-
tiﬁed by pi. Thus, relations identiﬁed by many successful
patterns will score the highest. If a potential pattern p is
nominated by occurring at least once with unique known
relations r1, . . . , rm, then P score(p) := m log(m)/N where
N = number of unique occurrences of p (with or without
a known relation). Hence, the number of known instances
the pattern matches is weighted by the pattern’s precision,
and patterns that both match many known relations and
have high precision obtain the highest scores. To help pre-
vent the system from drifting, an option for user interaction
is incorporated by allowing speciﬁcation of the number of
queries per cycle. We note that the highest scoring pat-
terns are the ones that nominated the most relations, and
therefore have the largest eﬀect on the direction of the sys-
tem; thus, for relations and patterns scoring the highest, the
system asks a user to verify their validity with “yes”, “no”,
“don’t know” response options. Given a response of “yes”

(“no”), the score is set to 1000 (-1). After the scoring, re-
lations/patterns with scores in a suﬃciently high percentile
are added to the set of relation/pattern seeds for the next
cycle. In the case of conﬂicting relation nominations (e.g.,
“is version of” and “not version of”) the system queries the
user if possible and defaults ﬁrst to a heuristic in some cases
and then to the highest scoring relation. Lastly, when a
known pattern is found in the text with an unlabeled entity,
the system queries the user if possible before labeling the
entity.

3. RESULTS

For initial testing a corpus of 62 news articles, blogs, and
updates is compiled from a variety of security-related web-
sites.3 After pulling each site’s text with the Goose4 article
extractor, word-, sentence-tokenization, and part-of-speech
tagging is performed using CoreNLP [13]. Only after the en-
tity extractor provides entity labels and the relevancy classi-
ﬁer discards irrelevant documents (see Section 2.1) are parse
trees applied by CoreNLP to the remaining documents—41
documents were kept, parsed, and used as the corpus for
bootstrapping. With an eye on scaling to a large corpus,
this is a noteworthy detail as the parsing is computationally
and temporally expensive (e.g., parsing took about 300 of
370 seconds for the NLP pipeline).

As no labeled corpus of relations for our domain was avail-
able, evaluation is diﬃcult; in particular, calculating recall
would involve labeling all the documents. To get a rough es-
timate of the recall of the system, we hand labeled a longer
article, obtaining 8 correctly identiﬁed of 33 total relations.
Hence at least locally the recall is 0.24. By manually check-
ing each relation instance the system output, we provide
precision results in Table 3. The reported run accepted the
top 80% of patterns and relations after each iteration of
scoring and queried the user for the top 2%, resulting in ∼ 5
queries per iteration. Scores are reported for output after 3
iterations through the corpus, after which point the number
of relations did not increase. Of the 41 relevant documents,
31 included an identiﬁed relation, and 186 overall relations
were identiﬁed of which 153 are correct. We note that the
seed patterns were crafted from example sentences observed
by the authors, and, hence, testing on a larger corpus will
be needed to ﬂatten any bias that may have come from our
observation of some of the 62 documents.

4. CONCLUSION

In summary, our bootstrapping algorithm is a promising
start to a pertinent problem, namely, the need for auto-
mated information extraction targeting security documen-
tation. As our preliminary tests involved a relatively small
corpus, further testing on a larger corpus is necessary. Ad-
ditionally, comparative evaluation to quantify the beneﬁt of
incorporating active learning is a desired future direction.
Ultimately, we plan to incorporate this work into a larger

from

sources

www.arstechnica.com,
www.krebsonsecurity.com,
www.security.blogoverflow.com,
www.smh.com.au,

3Text
www.computerworld.com,
www.schneier.com,
www.securityintelligence.com,
http://technet.microsoft.com,
http://blog.cmpxchg8b.com,
https://blog.malwarebytes.org, & www.threatpost.com.
4https://pypi.python.org/pypi/goose-extractor/

Table 3: Results

Relation
is vendor of
1
2
is version of
3 CVE of vuln
4
MS of SW
5 MS of vuln
6
7
8

TP FP
12
45
19
54
-
-
-
-
0
2
2
vuln of SW 30
-
-
symbol of
0
22
not version of
33
153
Totals

P
0.79
0.74
-
-
1.00
0.94
-
1.00
0.82

Note: True positives, false positives, and precision by relation
type and in total reported. Dashes indicate no instances were
found in the corpus.

pipeline, which continually feeds it new documents from the
web, and organizes the output into a database.

5. ACKNOWLEDGMENTS

The authors thank Jason Laska and Michael Iannacone for
helpful discussions. This material is based on research spon-
sored by the Department of Homeland Security Science and
Technology Directorate, Cyber Security Division via BAA
11-02; the Department of National Defence of Canada, De-
fence Research and Development Canada; the Dutch Min-
istry of Security and Justice; and the Department of Energy.
The views and conclusions contained herein are those of the
authors and should not be interpreted as necessarily repre-
senting the oﬃcial policies or endorsements, either expressed
or implied, of: the Department of Homeland Security; the
Department of Energy; the U.S. Government; the Depart-
ment of National Defence of Canada, Defence Research and
Development Canada; or the Dutch Ministry of Security and
Justice.

6. REFERENCES

[1] E. Agichtein and L. Gravano. Snowball: Extracting

relations from large plain-text collections. In
Proceedings of the Fifth ACM Conference on Digital
Libraries, pages 85–94. ACM, 2000.

[2] E. Alfonseca, K. Filippova, J.-Y. Delort, and

G. Garrido. Pattern learning for relation extraction
with a hierarchical topic model. In Proceedings of the
50th Annual Meeting of the Association for
Computational Linguistics: Short Papers-Volume 2,
pages 54–59. Association for Computational
Linguistics, 2012.

[3] R. A. Bridges, C. Jones, M. Iannacone, K. Testa, and
J. R. Goodall. Automatic labeling for entity extraction
in cyber security. In Third Annual ASE Cyber Security
Conference. ASE, 2014.

[4] S. Brin. Extracting patterns and relations from the

world wide web. In Selected Papers from the
International Workshop on The World Wide Web and
Databases, WebDB ’98, pages 172–183, London, UK,
UK, 1999. Springer-Verlag.

[5] R. C. Bunescu and R. J. Mooney. A shortest path
dependency kernel for relation extraction. In
Proceedings of the conference on Human Language
Technology and Empirical Methods in Natural

Language Processing, pages 724–731. Association for
Computational Linguistics, 2005.

[6] A. Carlson, J. Betteridge, B. Kisiel, B. Settles, E. R.

Hruschka Jr, and T. M. Mitchell. Toward an
architecture for never-ending language learning. In
AAAI, volume 5, page 3, 2010.

[7] A. Carlson, S. A. Hong, K. Killourhy, and S. Wang.

Active learning for information extraction via
bootstrapping, 2010.

[8] O. L. de Lacalle and M. Lapata. Unsupervised relation

extraction with general domain knowledge. In
EMNLP, pages 415–425, 2013.

[9] O. Etzioni, M. Cafarella, D. Downey, A.-M. Popescu,
T. Shaked, S. Soderland, D. S. Weld, and A. Yates.
Unsupervised named-entity extraction from the web:
An experimental study. Artiﬁcial Intelligence,
165(1):91–134, 2005.

[10] M. D. Iannacone, S. Bohn, G. Nakamura, J. Gerth,

K. M. T. Huﬀer, R. A. Bridges, E. Ferragut, and J. T.
Goodall. Developing an ontology for cyber security
knowledge graphs. In Proceedings of the CISRC-10,
the Tenth Cyber & Information Security Research
Conference. ACM, 2015.

[11] R. Jones, A. McCallum, K. Nigam, and E. Riloﬀ.

Bootstrapping for text learning tasks. In IJCAI-99
Workshop on Text Mining: Foundations, Techniques
and Applications, volume 1. Citeseer, 1999.

[12] A. Joshi, R. Lal, T. Finin, and A. Joshi. Extracting
cybersecurity related linked data from text. In IEEE
Seventh International Conference on Semantic
Computing (ICSC), pages 252–259. IEEE, 2013.

[13] C. D. Manning, M. Surdeanu, J. Bauer, J. Finkel,
S. J. Bethard, and D. McClosky. The Stanford
CoreNLP Natural Language Processing Toolkit.

[14] N. McNeil, R. A. Bridges, M. D. Iannacone,

B. Czejdo, N. Perez, and J. R. Goodall. PACE:
Pattern accurate computationally eﬃcient
bootstrapping for timely discovery of cyber-security
concepts. In 2013 12th International Conference on
Machine Learning and Applications (ICMLA),
volume 2, pages 60–65. IEEE, 2013.

[15] M. Mintz, S. Bills, R. Snow, and D. Jurafsky. Distant
supervision for relation extraction without labeled
data. In Proceedings of the Joint Conference of the
47th Annual Meeting of the ACL and the 4th
International Joint Conference on Natural Language
Processing of the AFNLP, volume 2, pages 1003–1011.
Association for Computational Linguistics, 2009.
[16] S. More, M. Matthews, A. Joshi, and T. Finin. A
knowledge-based approach to intrusion detection
modeling. In Security and Privacy Workshops (SPW),
2012 IEEE Symposium on, pages 75–81. IEEE, 2012.

[17] V. Mulwad, W. Li, A. Joshi, T. Finin, and

K. Viswanathan. Extracting information about
security vulnerabilities from web text. In Web
Intelligence and Intelligent Agent Technology
Conference (WI-IAT), IEEE/WIC/ACM, volume 3,
pages 257–260. IEEE, 2011.

[18] M. Thelen and E. Riloﬀ. A bootstrapping method for
learning semantic lexicons using extraction pattern
contexts. In Proceedings of the ACL conference on
Empirical Methods in NLP, volume 10, pages 214–221.

Association for Computational Linguistics, 2002.

