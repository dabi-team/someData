9
1
0
2

t
c
O
1
3

]

R
C
.
s
c
[

2
v
3
2
2
7
0
.
9
0
8
1
:
v
i
X
r
a

Control Flow Graph Modiﬁcations for Improved RF-Based
Processor Tracking Performance∗†

Mark Chilenski‡a, George Cybenkob, Isaac Dekinea, Piyush Kumara, and Gil Raza

aSystems & Technology Research
bDartmouth College

September 19, 2018

Abstract

Many dedicated embedded processors do not have memory or computational resources to coexist
with traditional (host-based) security solutions. As a result, there is interest in using out-of-band analog
side-channel measurements and their analyses to accurately monitor and analyze expected program
execution. In this paper, we describe an approach to this problem using externally observable multi-
band radio frequency (RF) measurements to make inferences about a program’s execution. Because
it is very diﬃcult to identify individual instructions solely from their RF emissions, we compare RF
measurements with the constrained execution logic of the program so that multiple RF measurements
over time can eﬀectively track program execution dynamically. In our approach, a program’s execution
is modeled by control ﬂow graphs (CFG) and transitions between nodes of such graphs. We demonstrate
that tracking performance can be improved through applications program modiﬁcations such as changing
basic block transition properties and/or adding new basic blocks that are highly observable. In addition
to demonstrating these principled approaches on some simple programs, we present initial results on the
complexity and structure of real-world applications programs, namely gzip and md5sum, in this modeling
framework.

1 Introduction

All digital logic and data in a computing system are subject to compromise by an attacker. As a result,
any security monitoring or analysis done within the same communications and computational fabric is
also subject to compromise. Moreover, many embedded processors do not have the additional memory or
computational resources to provide their own security solutions. As a result, there is interest in using analog
side-channel measurements and their analyses to monitor expected program execution [6, 4]. We describe an
approach to this problem that exploits measurements of involuntary/unintended electromagnetic emissions
from commodity processors and which analyzes those measurements to estimate aspects of the embedded
software execution. It is of particular importance to detect deviations from the logically constrained execution
paths determined by the expected program structure.

To detect deviations in program execution at ﬁne granularity (e.g., changes of a single basic block)
requires understanding of the embedded program’s control ﬂow graph (CFG) and the limits on our ability
to correctly map the measured electromagnetic features to the currently executing block. In particular we
explore the dynamic relationship between the unique classiﬁed features (or “color” as they map to a given
code block or graph node) and the theoretical limitations on correctly identifying the traversal of the CFG.

∗Distribution Statement A: Approved for Public Release, Distribution Unlimited
†Preprint of: Mark Chilenski, George Cybenko, Isaac Dekine, Piyush Kumar, Gil Raz, “Control Flow Graph Modiﬁcations
for Improved RF-Based Processor Tracking Performance,” Proc. SPIE 10630, Cyber Sensing 2018, 106300I (3 May 2018); DOI:
10.1117/12.2316361; https://doi.org/10.1117/12.2316361

‡Send correspondence to: Mark Chilenski, mark.chilenski [at] stresearch [dot] com

1

 
 
 
 
 
 
Figure 1: The Leveraging Anomalous System Signals to Enable Security (LASSES) system detects de-
viations in embedded program operation across an air-gap using involuntary EM analog emissions from
processors. It combines: comprehensive measurements to understand the analog channel, signal ﬁltering
and isolation and feature generation for use in training and in real-time operation, code analysis func-
tions, and program tracking and machine learning functions for detecting deviations from expected DUT
operation.

Towards this end we describe a hierarchy of CFG models in which diﬀerent models have diﬀerent execution
tracking performance properties. We then describe approaches to modifying the program and hence the
CFG such that the overall program functionality is retained with limited impact on execution time while
dramatically enhancing the ability to correctly track the program and hence detect deviations from expected
behavior.

Detecting cyber agents using intrusion detection systems (IDS) running in the same machine creates
new vulnerabilities and is therefore inherently risky. In such situations, cyber agents could have full access
to the machine state and can circumvent common detection checks. To address this problem, applications
programs are often sandboxed within virtual machines in which a hypervisor can inspect the execution within
the sandbox, thereby separating the IDS software outside the sandbox from the cyber agent execution space
within the sandbox. Unfortunately, low-powered embedded devices prevalent in the Internet-of-Things (IoT)
and industrial control systems (ICS) lack the computational horsepower to implement such safe guards [2].
The authors and their respective organizations are jointly conducting research into methods for pro-
viding cyber defenses through analysis of involuntary analog emissions. Our method provides a principled
approach to analyze and exploit all available information sources and inform about achievable performance
bounds and quantify analog side-channel information. We analyze individual and combined contributions of
analog emissions and propagation physics, signal and interference levels and waveforms, and code structure
information. Figure 1 depicts a notional high-level description of our real-time system.

This approach consists of three key areas of innovations:

• Measurements suite that consists of instantaneously broad band high ﬁdelity measurements, as well as
using cost eﬃcient software deﬁned radios (SDRs) and multi-modality collections. These provide com-
prehensive depth and breadth of data collected under multiple conditions, providing accurate waveforms
and distribution of signals-of-interest and interference. Signal quality as measured by signal-to-noise-
ratio (SNR) and signal-to-interference-and-noise (SINR) can be be compared against the theoretic
bounds provided by an analog link analysis parameterized by emission source, distance, modality, and
channel conditions.

• Novel data adaptive signal processing methods that utilize annotated test vectors to exploit side in-
formation about measurements, devices, and embedded code to generate a stream of (probability
weighted) features related to internal device state and operations. In addition, this can ﬁnd optimal
bands of operation and ﬁlters to separate signals from interference and noise while retaining classi-
ﬁcation information. Our approach quantiﬁes available information at the raw data level and the
incremental information provided by the side-information using pre- and post-processing SNR and
SINR.

• Machine learning algorithms using multiple resolution dynamic models that ﬁrst learn models that link
known program execution to observed measurements. State tracking over time is used to validate the

2

Xt−1

Xt

Xt+1

Yt−1

Yt

Yt+1

Figure 2: Graphical model of the HMM. The sequence of states Xt cannot be measured directly. Instead,
the sequence of symbols Yt is measured. Each state depends only on the previous state and each symbol
depends only on the present state.

observed device under test (DUT) measurements ﬁt the learned model; thereby validating the DUT is
operating as expected. This state-modeling framework jointly captures program execution at (1) sub
basic-block level of linear instruction execution, (2) control ﬂow graph level modeling of transitions
between basic blocks, and (3) context level modeling processing scheduling, threading, and interrupts.

By focusing primarily on RF/EM emissions, our approach isolates the security functionality by an “air
gap” from the target host. A major challenge that must be overcome, however, is obtaining suﬃcient state
information via unintended emissions to accurately characterize the threat.

In this paper, we describe a modeling and analysis approach that allows us to model programs through
their control ﬂow graphs so that the RF measurements can be regarded as noisy observations of the basic
blocks executing within the program. Section 2 outlines the modeling framework, Sec. 3 describes experiments
and analyses we have performed on notional and real-world programs and ﬁnally Sec. 4 is a summary with
discussion of future work we intend to conduct in this general problem space.

2 Model Framework

In this section we describe in detail the model framework that captures program execution at the basic-
block level. This allows us to address the control ﬂow graph tracking problem that must be solved before
confronting the issue of cyber intrusion detection using sensor measurements of RF emissions. Then, we
outline a taxonomy of “observability classes” of CFGs. We ﬁnd that even though in many cases the CFG is
not “observable” (in a technical sense that is explained later), the CFG can be modiﬁed in appropriate ways
so as to signiﬁcantly improve its tracking performance with no eﬀect on program functionality and minimal
eﬀect on real-time and memory constraints.

2.1 Colored graphs and the hidden Markov model

Software execution is modeled as a series of transitions between states on a control ﬂow graph (CFG), where
the nodes can be modules, functions, or basic blocks (depending on the desired level of granularity) and the
edges are the allowed transitions between states. While each node is executing, a particular pattern of RF
emissions occurs. The sequence of states Xt cannot be observed directly, instead the states must be inferred
from the observed sequence of RF emissions (“symbols”) Yt. A natural formalism describing such a situation
is the hidden Markov model (HMM) shown in Fig. 2 [7, 9].

It is important to note that the concept of “state” as used in systems theory does not correspond
necessarily to a basic block in a program’s CFG because the true state of a program includes the memory
values as well as the program counter and the reader is encouraged to understand this diﬀerence. We address
the question of how closely basic blocks approximate system state in the more formal sense in Sec. 3.2.3
when we empirically investigate some real-world programs.

In this model, the sequence of hidden states Xt forms a (ﬁrst order) Markov chain:

with transition matrix

P (Xt|X1, . . . , Xt−1) = P (Xt|Xt−1)

Pij := P (Xt = j|Xt−1 = i).

3

(1)

(2)

(a) Emission matrix

(b) Colored graph

(c) Featuregram with associated colors

Figure 3: An emission matrix (a) which has only one highly-probable symbol per state can be described
as assigning a “color” to each state on the CFG (b). The featuregram (c) shows the four-dimensional,
continuous-valued feature vector and the corresponding colors assigned by a classiﬁer.

The symbol Yt emitted at any point depends only on the current state Xt:

P (Yt|X1, . . . , Xt, Y1, . . . , Yt−1) = P (Yt|Xt).

In the case of discrete symbols, the emission matrix is deﬁned as

oiα := P (Yt = α|Xt = i).

(3)

(4)

While much of the literature on HMMs focuses on discrete scalar symbols Yt, this formalism can handle the
more general case where Yt is a multidimensional, continuous random variable simply by replacing P (Yt|Xt)
with the relevant joint probability density function (PDF). Furthermore, it is often convenient to assign a
discrete scalar symbol to a general measurement using a classiﬁcation or clustering algorithm.

As a further abstraction, the discrete symbols may be taken to correspond to “colors” emitted by each
state.
If the emission distribution preferentially emits a single color for each state, the model may be
described as a node-colored directed graph. An example of this is shown in Fig. 3. When multiple colors
may be emitted by a state, the graph is said to be multi-colored, and can be reduced to a simple node-colored
directed graph by splitting each multi-colored node. As will be seen, node-colored directed graphs provide a
useful framework for reasoning about the properties of control ﬂow graphs.

4

HMM

trackable

uniﬁlar

observable

Figure 4: Hierarchy of colored graph models. The hidden Markov model (HMM) is the most general case,
for which no guarantees about the ability to infer the hidden states can be made. Models from deeper in
the hierarchy provide better guarantees on tracking performance.

2.2 Observability classes of colored graph models

As mentioned earlier, a node-colored directed graph (corresponding to a CFG) can be identiﬁed by a state
model in which the nodes of the graph represent states and the edges represent allowed transition between
states. The most general description of such a state model is provided by an HMM. The structure of the
underlying colored graph may not permit unique reconstruction of the state sequence in general. There are,
however, restricted classes of models that enable more accurate tracking in various use cases:

• In a trackable model the number of hypotheses consistent with an observation sequence grows polyno-

mially in the length of the observation sequence [3].

• In a uniﬁlar model the next state Xt+1 is uniquely determined given the current state Xt and the next

symbol Yt+1 [11].

• In an observable model the state Xt can be uniquely determined given the observation sequence

Y1, . . . , Yt, after some ﬁxed initial burn-in [5].

This hierarchy of graph classes is shown in Fig. 4.

2.3 Graph modiﬁcation to improve observability

In principle, it is possible to change the observability class of a graph by adding or deleting states, by adding
or deleting transitions between nodes, or both. Given that the speciﬁc way in which a control ﬂow graph is
connected as well as the transition probabilities between diﬀerent nodes determines software functionality,
removing states or modifying transition probabilities signiﬁcantly is not guaranteed to preserve program
function.

On the other hand, the addition of states (nodes) constructed to have no eﬀect on program function
(e.g., a short loop of no-op instructions), but which emit a distinct color, can be very useful. Inserting such
“indicator blocks” at strategic points in a program can change the observability class and improve tracking
performance, which we demonstrate in Sec. 3.1.

It is important to remark that such program modiﬁcations, while not changing program semantics, could
change a program’s memory footprint and/or its real-time performance characteristics. Such modiﬁcations
must accordingly be done with such constraints in mind.

3 Experiments and Results

In this section, we describe the experiments conducted on test programs and real software programs and the
results obtained. In particular, in Sec. 3.1 we describe the experimental setup and data collection procedure

5

Figure 5: Example basic block.

for simple test programs, and then demonstrate the eﬃcacy of our CFG modiﬁcation approach. We show
that impressive results for CFG tracking can be obtained for such test programs.

Carrying out a similar analysis for real software programs is considerably more diﬃcult, however. For
example, in many cases the source code may not be available and, even if it is, low-level program structure
may be signiﬁcantly altered by an optimizing compiler so that information on the program’s structure may
be diﬃcult to obtain. Therefore tools must be used to extract the control ﬂow graph of the program as it
will be executed.

Many dynamic proﬁling and tracing tools also have limited support on embedded platforms. Also, as
we will see later, the time scale for transitions between diﬀerent basic blocks of realistic CFGs is typically
much smaller than that of the observation model corresponding to RF emissions. Hence “coarse-graining”
techniques must be applied to the original CFG to extract a coarsened version that corresponds accurately to
the observation model. In Sec. 3.2 we show some results related to the extraction of control ﬂow graphs and
their properties for some simple realistic software programs – gzip and md5sum. We also ﬁnd the appropriate
model framework to track execution of these programs. In the near future, we intend to apply our CFG
modiﬁcation and tracking techniques to real software programs such as these and also study use cases for
cyber intrusion detection as described in Sec. 4.

3.1 Experimental demonstration of pathology mitigation

Our ﬁrst experiment utilized the Arduino Uno, a common Internet-of-Things (IoT) device which exempliﬁes
the security challenges and motivations. The Uno, with a 16 MHz processor clock, 32 kB of program ﬂash
memory, and no tractable ability to execute parallel execution threads, is unequipped to perform any host-
based security activities. Furthermore, the performance capabilities of this board and processor are very
similar to millions of deployed hardware devices.

This ﬁrst experiment, designed to facilitate the development of control ﬂow graph tracking algorithms

and pathology mitigation, was composed as follows:

• create basic blocks, b1, . . . , bn, where each basic block is a loop that performs a unique set of instructions

as shown in Fig. 5;

• individually execute and perform RF measurements on each basic block, using the measurements to

train a classiﬁer;

• create a control ﬂow graph that utilizes a subset of these basic blocks;

• perform random walks through this control ﬂow graph, such that at each time step, the next basic block
to execute will be randomly selected from the available legal transitions from the presently executing
block, with probabilities shown in Fig. 7a.

6

(a) Original: unobservable

(b) Indicator blocks added: uniﬁlar

Figure 6: Control ﬂow graphs for the Arduino tracking experiment: (a) original and (b) with indicator
blocks added. The modiﬁed CFG is uniﬁlar and not observable because of the self-transitions at nodes 3
and 140 which constitute two separated cycles with the same coloring.

We started with the unobservable CFG in Fig. 6a and the transition matrix in Fig. 7a, where the blocks
are composed of loops of between 20 and 105 instructions. We set the number of loop executions in each
block such that each “step” through a block lasted 5 ms. We then added indicator blocks to produce the
uniﬁlar CFG in Fig. 6b.

The RF emissions were measured at a range of 10 mm, using a near ﬁeld probe sensitive to the magnetic
ﬁeld from 300 kHz to 1 GHz. This probe was sampled at 4 GHz using a Texas Instruments ADC12J4000
analog-to-digital conversion system. The measurement setup is shown in Fig. 8. We computed the short-time
Fourier transform using a 66 µs window length, applied a random forest classiﬁer to each time point in the
resulting spectrogram, then binned the results to a 5 ms time resolution by taking the mode in each bin.
The emission matrix from the classiﬁer (but prior to binning) is shown in Fig. 7b. The eﬀect of binning is
to make all of the states except T140 single-colored. The test with indicator blocks added used the same
path through the CFG as the test without indicator blocks – the indicator blocks were simply added at the
appropriate transitions.

The results are shown in Fig. 9. In the ﬁgure, the “no CFG tracking” curve is the state inferred directly
by the classiﬁer with no knowledge of the CFG and the “with CFG tracking” curve was constructed by
applying the Viterbi algorithm to ﬁnd the most likely path given knowledge of the transition matrix, the
classiﬁer confusion matrix, and the entire symbol sequence. Without indicator blocks, CFG tracking has
no eﬀect, and the error rate (number of blocks wrong divided by total number of blocks) is 10.8%. With
indicator blocks, CFG tracking obtains perfect reconstruction of the sequence of states, as is expected for a
uniﬁlar graph.

3.2 CFG extraction and model framework for real software

In order to assess the prognosis for basic block-level tracking in real software, we have begun collecting
instruction-level execution traces from common Linux tools using GDB [1]. Presented here are the results
from the gzip and md5sum programs on Ubuntu running on x86 64 applied to 100 randomly-generated
1 kB ﬁles. The instruction-level traces are post-processed into basic blocks based on jump, call, and return
instructions. The CFG is then extracted based on which transitions are observed in the 100 runs – no static
analysis of possible jump targets has been performed. The resulting CFG has many blocks with in-degree
and/or out-degree of one. To make the subsequent analysis tractable, whenever a block’s in-degree and its
parent’s out-degree are both one, we merge the block and its parent into a “reduced block.”

3.2.1 Blocks, reduced blocks have few instructions

The distribution of the number of instructions per block is shown in Fig. 10. In both programs, the median
number of instructions per basic block is about 3, which is comparable to (if not slightly lower than) what

7

(a) Transition matrix

(b) Emission matrix

Figure 7: Hidden Markov model for the Arduino tracking experiment: (a) (unmodiﬁed) transition matrix
and (b) observed emission matrix. The emission matrix is computed after applying the classiﬁer but before
binning into 5 ms steps.

Figure 8: Measurement setup: Arduino Uno R3, near ﬁeld magnetic probe 10 mm above the device, inside
an anechoic RF chamber

8

(a) Original

(b) Tracking blocks added

Figure 9: Tracking performance for the (a) original and (b) modiﬁed CFGs. The solid blue line is the true
path, the dashed orange line is the result of classifying each moment in time (i.e., not applying the Viterbi
algorithm), and the dotted yellow line is the result of applying the Viterbi algorithm to the entire symbol
sequence. In the original CFG, applying the Viterbi algorithm does not improve on the 10.8% error rate.
In the CFG with tracking blocks added, the Viterbi algorithm provides perfect tracking performance, as is
expected for a uniﬁlar graph.

Table 1: Properties of the Full and Reduced CFGs

Program

Full CFG

Reduced CFG

Blocks Edges Blocks Edges

gzip
md5sum

936
1446

1134
1700

348
457

546
711

was reported in [8]. Working in terms of reduced blocks increases the median number of instructions to
7 and the right-hand tail of the distribution is pulled out to include reduced blocks with a few hundred
instructions. The shortness of basic and reduced blocks indicates that time resolution will be a key obstacle
to overcome to obtain block-level tracking of real software – 7 instructions is about 0.4 µs on an Arduino
Uno, and will be even shorter on more powerful platforms.

3.2.2 Control Flow Graphs have very sparse transition matrices

The joint distribution of in- and out-degree for the reduced block CFG is shown in Fig. 11, and some
properties of the basic and reduced CFGs are given in Tab. 1. Even in the reduced CFG, there are still many
nodes with in-degree = out-degree = 1; as suggested by the fact that the number of edges in the reduced
CFG is ∼ 1.6× the number of reduced blocks, the transition matrices are very sparse. This improves the
prognosis for observability, because a lower average out-degree means there are fewer opportunities for the
conditions for observability, uniﬁlarity, or trackability to be violated.

3.2.3 A ﬁrst-order Markov chain best describes the datasets

When the HMM was introduced in Sec. 2.1, Eq. (1) deﬁned a ﬁrst-order Markov chain: the next state only
depends on the current state. However, computer programs have memory, and the next state (basic block)
may depend on several of the previous states (basic blocks) as well as the memory state of the program. A

9

(a) gzip

(b) md5sum

Figure 10: Distribution of the number of instructions per basic (blue, solid border) and reduced (orange,
dashed border) block. Note the logarithmic scale – the probability density function (PDF) on the vertical
scale is that of log10(instruction count). Note that gzip has a basic block with 65 510 instructions. This is
part of

memset avx2, and is initializing a large chunk of memory.

(a) gzip

(b) md5sum

Figure 11: Joint (lower left) and marginal (diagonal) distributions of in- and out-degree of the reduced
block CFGs. In the joint distribution, the shading is proportional to logarithm of the counts in the bin, and
the black points indicate which bins are populated – the distributions are both very strongly concentrated
at in-degree = out-degree = 1. Also of note is that some nodes have high in-degree or high out-degree, but
none have both – the tails of the joint distribution form an “L” shape.

10

Table 2: Number of Parameters for Various Markov Chain Orders

Program States Observations

gzip
md5sum

|S|

348
457

nD
5.0 × 106
2.2 × 106

Parameters, nθm
m = 2
m = 1

1.2 × 105
2.1 × 105

4.2 × 107
9.5 × 107

Markov chain with memory (or order) m has the transition distribution

P (Xt|X1, . . . , Xt−1) = P (Xt|Xt−m, . . . , Xt−1).

(5)

Such a model has |S|m(|S| − 1) parameters, where |S| is the number of states. Table 2 gives the number of
states, number of observations, and number of parameters for the gzip and md5sum datasets. Because of the
exponential growth in the number of parameters, the m = 2 case has substantially more parameters than
observations. Therefore, it is reasonable to expect that the data will only support m ≤ 1.

This assertion can be made rigorous using model selection tools, including [12]:

• Akaike information criterion:

AICm = 2nθm − 2 ln Lm,

(6)

where nθm is the number of parameters for the model with memory m and Lm = maxθm P (D|θm, m)
is the probability of the data D under the maximum likelihood estimate. A lower AICm indicates a
better model.

• Bayesian information criterion:

BICm = nθm ln nD − 2 ln Lm,

where nD is the number of observations. A lower BICm indicates a better model.

• Model evidence (also known as marginal likelihood):

Zm = P (D|m) =

(cid:90)

P (D|θm, m)P (θm|m) dθm,

(7)

(8)

which is the probability of the data averaged over the possible values of the parameters, and P (θm|m)
is the prior distribution representing any prior knowledge about the parameters θm. In this application,
we use a Dirichlet distribution with αij = 1 as our prior distribution when computing Zm. A higher
Zm indicates a better model.

In the limit of nD (cid:29) nθm [10],

BICm ≈ −2 ln Zm,

(9)

so we report −2 ln Zm so that all quantities are on the same scale. All three of these metrics implement a
tradeoﬀ between the model complexity (the number of parameters relative to the number of observations)
and the how well the model ﬁts the data.

The three model selection metrics are shown in Fig. 12. All three metrics prefer a ﬁrst-order Markov
chain, m = 1: the m = 0 model (states are independently and identically distributed (IID)) is too simple to
explain the observed behavior, and the m ≥ 2 models have too many parameters relative to the number of
observations to be adequately constrained.

11

(a) gzip

(b) md5sum

Figure 12: All three model selection metrics select m = 1 for both programs considered. (This includes
Zm, even though the increase in −2 ln Zm for m ≥ 2 is not visible on this scale.) The m = 0 model (states
are IID) is too simple, and the m ≥ 2 models are too complicated given the limited number of observations.
The dotted lines indicate the asymptotic behavior of AICm and BICm once the ﬁrst term in Eqs. (6) and
(7) (model complexity penalty) dominates the second term (goodness of ﬁt). Note that the approximation
in Eq. (9) breaks down for m ≥ 2 because nD < nθm .

Table 3: Overlap of Functions

Program

Functions

Percent shared
with “return 0;”

Percent shared
with “hello, world”

Functions

Instructions Functions

Instructions

“return 0;”
“hello, world”
gzip
md5sum

41
82
160
206

100
46
23
18

100

5.5
5.5

14

93
100
28
37

99
100

5.5
62

3.2.4 Similarities may arise from shared code

The similarities observed between gzip and md5sum in the previous sections may be explained by the code
they share for initialization, ﬁnalization, input, output, and loading of shared libraries. In order to charac-
terize this, we constructed two simple C programs:

• “return 0;” consists of “int main() {return 0;}” and hence only involves the code to initialize

and ﬁnalize an executable.

• “hello, world” additionally exercises the code to write to the standard output.

Table 3 summarizes the degree of overlap with these programs, where the fraction of shared instructions
is deﬁned as (# instructions in shared functions)/(total # instructions). These results indicate that about
20% of the functions in gzip and md5sum are there for initialization and ﬁnalization, and another 10–20% of
the functions are for output. Also of interest is that about 50% of the function in gzip are also in md5sum,
though only about 16% of the instructions are spent in these shared functions. This substantial overlap
illustrates why knowledge of the CFG is essential for malware detection: many benign (and malicious)
programs may call the same functions but in diﬀerent sequences. Therefore, the only way to determine if
the software being executed has been altered is to have knowledge of what sequences of function calls are
structurally possible.

12

4 Summary and Future Work

In this paper we described a general framework for detecting unintended and possibly malicious code running
on processors via measurements of unintended RF emissions on a sensor separated by an air-gap. In terms of
analysis, we primarily focused on the ability to track program progression at ﬁne granularity as it traverses
its control ﬂow graph. This is a prerequisite to addressing the issue of cyber intrusion detection within this
context. The approach requires principled understanding of the CFG as observed via the measurements
and the fundamental limits on the ability to track the program’s execution. Moreover we developed and
described a principled approach for modifying the CFG of the program to dramatically enhance this tracking
capability such that the program functionality is preserved and with minimal impact on overall latency of
its execution. Finally, we reported some results on the extraction of CFGs and their properties, as well as
the model framework describing tracking execution, for some real-world software programs.

Signiﬁcant further enhancements to these methods are possible and are being investigated by our team.

These include the following:

• Developing a general taxonomy of colored graph models and their mitigation approaches;

• Applying CFG modiﬁcation and tracking techniques to real software programs;

• Understanding the trade-oﬀs between tracking granularity and limits on tracking performance, adding
new constraints to the program modiﬁcation to minimize various metrics related to undesired impact
on program operation;

• Leveraging the above techniques for cyber intrusion detection (using RF emissions) for a variety of

relevant use cases;

• Exploring use cases involving more complex multi-threaded and otherwise time-shared computing

environments;

• Additional analyses of fundamental mathematical descriptions of CFG tracking in more complicated

environments.

Acknowledgments

Distribution Statement “A” (Approved for Public Release, Distribution unlimited).

The research eﬀort depicted was sponsored by the Air Force Research Laboratory (AFRL) and the De-
fense Advanced Research Projects Agency (DARPA) under the Leveraging the Analog Domain for Security
(LADS) program under contract number FA8650-16-C-7622. In particular, we thank Dr. Angelos Keromytis,
the DARPA program manager of LADS, for his encouragement and support throughout the program. The
views, opinions and/or ﬁndings expressed are those of the author and should not be interpreted as repre-
senting the oﬃcial views or policies of the Department of Defense or the U.S. Government.

References

[1] GDB: The GNU project debugger. https://www.gnu.org/software/gdb/.

[2] Samuel Blackman and Robert Popoli. Design and analysis of modern tracking systems. Norwood, MA:

Artech House, 1999., 1999.

[3] Valentino Crespi, George Cybenko, and Guofei Jiang. The theory of trackability with applications to

sensor networks. ACM Transactions on Sensor Networks (TOSN), 4(3):16, 2008.

[4] George Cybenko and Gil Raz. Large-scale analog measurements and analysis for cyber security. In
N. Adams, N. Heard, P. Rubin-Delanchy, and M. Turcotte, editors, Data Science for Cyber-Security.
World Scientiﬁc, River Edge, NJ, USA, 2018.

13

[5] Rapha¨el M Jungers and Vincent D Blondel. Observable graphs. Discrete Applied Mathematics,

159(10):981–989, 2011.

[6] Angelos D Keromytis. Leveraging the analog domain for security (LADS). https://www.darpa.mil/

program/leveraging-the-analog-domain-for-security, 2015.

[7] Stephen E Levinson, Lawrence R Rabiner, and Man Mohan Sondhi. An introduction to the application
of the theory of probabilistic functions of a Markov process to automatic speech recognition. The Bell
System Technical Journal, 62(4):1035–1074, 1983.

[8] Sanjay J Patel, Tony Tung, Satarupa Bose, and Matthew M Crum.

Increasing the size of atomic
instruction blocks using control ﬂow assertions. In Microarchitecture, 2000. MICRO-33. Proceedings.
33rd Annual IEEE/ACM International Symposium on, pages 303–313. IEEE, 2000.

[9] Lawrence R Rabiner. A tutorial on hidden Markov models and selected applications in speech recogni-

tion. Proceedings of the IEEE, 77(2):257–286, 1989.

[10] Gideon Schwarz. Estimating the dimension of a model. The Annals of Statistics, 6(2):461–464, 1978.

[11] Yong Sheng and George V Cybenko. Distance measures for nonparametric weak process models. In

Systems, Man and Cybernetics, 2005 IEEE International Conference on. IEEE, 2005.

[12] Philipp Singer, Denis Helic, Behnam Taraghi, and Markus Strohmaier. Detecting memory and structure
in human navigation patterns using Markov chain models of varying order. PLoS ONE, 9(7):e102070,
2014.

14

