9
1
0
2

l
u
J

1
2

]
I

N
.
s
c
[

1
v
6
9
8
8
0
.
7
0
9
1
:
v
i
X
r
a

This paper has been accepted for publication in the IEEE Global Communications Conference (GLOBECOM’19), 09 December-13 December 2019, Waikoloa, HI, USA

A Lightweight and Privacy-Preserving
Authentication Protocol for Mobile Edge Computing

Kuljeet Kaur∗, Member, IEEE, Sahil Garg∗, Member, IEEE, Georges Kaddoum∗, Member, IEEE,
Mohsen Guizani†, Fellow, IEEE, and Dushantha Nalin K. Jayakody‡, Senior Member, IEEE.
∗Electrical Engineering Department, ´Ecole de technologie sup´erieure, Montr´eal, QC H3C 1K3, Canada.
†Computer Science and Engineering, Qatar University, Qatar.
‡School of Computer Science and Robotics, National Research Tomsk Polytechnic University, Russia.
(e-mail: kuljeet.kaur@ieee.org, sahil.garg@ieee.org, georges.kaddoum@etsmtl.ca, mguizani@ieee.org, and
nalin.jayakody@ieee.org)

Abstract—With the advent of the Internet-of-Things (IoT),
vehicular networks and cyber-physical systems, the need for real-
time data processing and analysis has emerged as an essential
pre-requite for customers’ satisfaction. In this direction, Mobile
Edge Computing (MEC) provides seamless services with reduced
latency, enhanced mobility, and improved location awareness.
Since MEC has evolved from Cloud Computing, it inherited
numerous security and privacy issues from the latter. Further,
decentralized architectures and diversiﬁed deployment environ-
ments used in MEC platforms also aggravate the problem;
causing great concerns for the research fraternity. Thus,
in
this paper, we propose an efﬁcient and lightweight mutual
authentication protocol for MEC environments; based on Elliptic
Curve Cryptography (ECC), one-way hash functions and con-
catenation operations. The designed protocol also leverages the
advantages of discrete logarithm problems, computational Difﬁe-
Hellman, random numbers and time-stamps to resist various
attacks namely-impersonation attacks, replay attacks, man-in-
the-middle attacks, etc. The paper also presents a comparative
the proposed scheme relative to the current
assessment of
state-of-the-art schemes. The obtained results demonstrate that
the proposed scheme incurs relatively less communication and
computational overheads, and is appropriate to be adopted in
resource constraint MEC environments.

Index Terms—Authentication protocol, Elliptic Curve Cryp-
tography, Mobile Edge Computing, Mobile server, Privacy pre-
serving, and Security features.

I. INTRODUCTION

Mobile Edge Computing (MEC) has emerged as a promis-
ing platform, providing seamless data storage, computational
and processing facilities at the edge of the network. In MEC,
heterogeneous arrays of devices (such as laptops, access
points, computers,
tablets, switches, etc.) are involved in
providing intended services to the end-users. More formally,
MEC extends the notion of cloud computing facility closer
to the ground [1]. However, in contrast to the distant cloud
computing platform, MEC enables real-time data processing
and analysis with reduced latency, enhanced mobility, greater
user experience, and improved location awareness [2]. With
these inherent advantages, the provisioning of emerging tech-
nologies like the Internet of Things (IoT), vehicular networks,
cyber-physical systems (CPSs) has become a reality [3], [4].
However, the greatest challenge associated with the wide-
scale adoption of MEC is induced due to the underlying
security and privacy issues. MEC devices (a.k.a. edge devices)

are mostly located closer to the users with limited installed
security measures and support. Further,
the decentralized
architectures and diversiﬁed deployment environments often
used in MEC environments, adversely impact the provisioning
of centralized security measures. Hence, MEC devices are
often susceptible to various attack vectors such as man-in-
the-middle attacks (MITM), impersonation attacks, user trace-
ability attacks, replay attacks, etc. Further, the information
relayed over the open channel is prone to snifﬁng, tampering
and replay; leading to severe privacy leakage issues. In order
to circumvent the above-mentioned challenges, the installation
of mutual authentication protocols in MEC environments can
be a viable solution. These protocols enable mutual veriﬁ-
cation of the communicating parties before the transmission
of conﬁdential and sensitive information. They also facilitate
the key exchange mechanism for preserving conﬁdentiality
and privacy [5], [6].

The following section summarizes the most related schemes
proposed in the literature along the lines. Almajali et al.
[7] proposed a comprehensive architecture with the aim
of instilling security in IoT environments speciﬁcally using
MEC. Furthermore, the authors also evaluated the existing
state-of-the-art authentication protocols under the proposed
architecture. Likewise, the primary focus of Jia et al.’s [8]
work was on data security and user privacy, particularly
in the context of MEC. To attain the same,
the authors
designed an identity-based anonymous authentication-driven
key agreement protocol based on Elliptic Curve Cryptography
(ECC). However, the authors employed expensive bilinear
pairing operations in their protocol design. Xia et al.
in [2]
focused on the caching mechanism used in MEC; wherein
the authors were found quoting that MEC is susceptible to
numerous attack vectors ranging from denial of service to
impersonation attacks. Consequently, the authors investigated
three attack models in MEC environments in the context of
mobile ofﬂoading and caching procedures. Additionally, the
authors also propounded an authentication scheme for mobile
edge devices.

Tasi and Lo [9] presented a distributed scheme for mobile
devices accessing cloud computing services. In the designed
the authors employed computationally expensive
scheme,

 
 
 
 
 
 
bilinear pairing cryptosystem. The authors also claimed that
their scheme was resilient against privacy comprising at-
tacks and supported mutual authentication, replay protection,
forgery protection, user anonymity, and user intractability.
However, Jiang et al. [10] falsiﬁed Tasi and Lo’s notion to
maintain adequate user privacy, and proved that the scheme
was vulnerable to user impersonation attacks and lacked
mutual authentication support. The improved variants of Tasi
and Lo’s scheme along with its security loopholes were also
discussed in [11]–[13]. For instance, Irshad et al. [11] used
bilinear pairing operations and map-to-point hash functions to
meet the claimed security requirements of the Mobile Cloud
Computing (MCC) platform. Unfortunately, Xiong et al. [14]
claimed that Irshad et al.’s scheme was computationally
expensive and was prone to two designs ﬂaws, i.e., inability
to achieve three-factor security and lack of user revocation
and registration facility. Thus, to solve the above-mentioned
issues, Xiong et al. [14] designed a provably secure authen-
tication scheme, speciﬁcally for mobile computing setups.
More recently, Li et al. [15] proposed a preserving-preserving
scheme based on ECC for mobile devices. The authors claim
that their scheme supports mutual authentication, preserves
users’ privacy and provides perfect forward secrecy.

It

is evident from the above discussion that different
variants of authentication protocols have been proposed in
the context of MEC and MCC environments. Nevertheless,
the existing protocols are prone to different attack vectors and
lead to higher communicational and computational overheads.
Thus, this paper presents a lightweight and privacy-preserving
mutual authentication protocol, especially for MEC environ-
ments.

A. Contributions

The key contributions of the work are listed below:
• We propose an ECC-based privacy-preserving mutual
authentication protocol that is resistant to several so-
phisticated attacks in MEC environments. The designed
protocol also helps in the key exchange between the
participating entities, i.e., mobile users and MEC servers.
• We present a detailed security analysis of the proposed
protocol and compare its features with the existing state-
of-the-art.

• Another objective of the paper is to protect mobile
edge devices in an open and vulnerable network; while
keeping the associated overheads to a minimum.

B. Organization

The rest of the paper is organized as follows. Section II
sketches the schematic overview of the MEC environment.
Section III illustrates the proposed protocol. The security and
performance evaluations are presented in Sections IV and V,
respectively. Finally, the paper is concluded in Section VI.

II. SYSTEM MODEL

A typical MEC environment consists of the following
entities, i.e., a trusted Registration Center (RC), mobile users,
and MEC servers; as depicted in Fig. 1. Here, the MEC

RA

Cloud

USER 
REGISTRATION 
PHASE

MEC SERVER 
REGISTRATION 
PHASE

Internet

MEC Server

MUTUAL 
AUTHENTICATION 
PHASE

Mobile users

Base station

Fig. 1. A typical setup of MEC.

servers are provided with computational and storage func-
tionalities. These servers are geographically dispersed and
deployed in close proximity of the mobile users; often at
mobile base stations. Their closeness to the users helps reduce
the latency and enhance the user experience signiﬁcantly.
The mobile users can access MEC services via their vehi-
cles, smartphones, tablets, etc. On the contrary, the RC is
assumed to be a trusted third-party that helps initialize the
cryptographic parameters and provides a common platform
for the registration of the users and MEC servers. The process
of registration is essential for the proposed lightweight and
privacy-preserving authentication protocol. In the designed
protocol, it is assumed that the users and MEC servers get
registered only once during their lifetime. Thus, the RC is
deployed at the distant cloud platform and is not involved in
the authentication process.

A. Assumptions Considered

The following list of assumptions have been considered in

this work:

1) It is assumed that the respective clocks of all the partic-
ipating entities are well synchronized. This assumption
enables generation of fresh timestamps for every session
which helps the MEC resist to replay attacks.

2) The threat model is considered to be Dolev-Yao (DY);
under which an adversary (A) has full access to the
channel. This, in turn, provides the A with the ability
to intercept, alter, replay and delete the transmitted
messages. The DY threat model relates precisely with
the practical open channels.

3) The A can either be an insider or outsider.

4) The channels i) between the mobile user and the RC
and ii) between MEC server and the RC, are assumed
to be secure.

User (u)
•Selects IDu

III. PROPOSED AUTHENTICATION SCHEME

In this section, the proposed authentication protocol for
MEC is presented. The designed protocol operates across the
following phases: 1) Setup Phase, 2) User Registration Phase,
3) Server Registration Phase, and 4) Authentication Phase.

A. Phase I: Setup Phase

This phase forms the crux of the upcoming phases and
initializes all the parameters essential for the security of the
MEC environment. The related details are summarized below:
Step 1: The RC begins the initialization process by selecting a
cyclic additive group G, an elliptic curve E with a generator
P and order q.
Step 2: Next, the RC generates its public (PRC ) and private
(dRC ) key-pairs as follows: dRC ∈ Z ∗
q and PRC = dRC .P .
Step 3: Next, a pair of collision-resistant one-way hash
functions (H1() and H2()) are chosen.
Step 4: Lastly, the following parameters < G, E, P, q, H1(),
H2(), PRC > are made public.

B. Phase II: User Registration Phase

During this phase, the uth mobile user registers itself with
the RC and in return is allocated a dedicated public-private
key pair (Pu & du) and a pseudo-identity (SIDu). The
detailed process is elaborated as under.
Step 1: The uth mobile user selects an identity (IDu) and
transmits it to the RC over the secure channel.
Step 2: Upon receiving the user’s registration request, the RC
generates a secret key ru and computes Ru. Following this,
the RC performs the hash operation over the concatenated
values of IDu and Ru, i.e., hu = H1(IDu||Ru). Finally, the
RC calculates SIDu using the values computed above and
its private key dRC .
Step 3: Then, the RC computes Pu & du for the uth user.
The computed values, i.e., < SIDu, du, ru > are then
transmitted to the user over the secure channel.
Step 4: The received values and keys are stored by the user
for the upcoming mutual authentication and key establishment
phase. Meanwhile, the values < SIDu, Pu, Ru > are made
public to the MEC servers and stored in their respective
repositories.

C. Phase III: Server Registration Phase

This phase is identical to the previously discussed phase;
wherein the only difference lies in the party trying to register
with the RC. Here, the msth MEC server tries to register
itself and is associated with the following parameters: public-
private key pairs (Pms & dms), pseudo-identity (SIDms), and
secret key (rms).

RC

<IDu> over secure channel
−−−−−−−−−−−−−−−→

q

•Generate ru ∈ Z∗
•Compute Ru = ru.P
•Compute hu = H1(IDu||Ru)
•Compute SIDu = (ru + dRC .hu)mod q
•Generate du ∈ Z∗
•Compute Pu = du.P

q

<SIDu, du, ru> over secure channel
←−−−−−−−−−−−−−−−−−−−−−

•Saves SIDu, du, & ru

Fig. 2. Phase II: User Registration Phase.

MEC Server (ms)

RC

Registration Request
−−−−−−−−−−→

q

•Selects IDms
•Generate rms ∈ Z∗
•Compute Rms = rms.P
•Compute hms = H1(IDms||Rms)
•Compute SIDms =
(rms + dRC .hms)mod q
•Generate dms ∈ Z∗
q
•Compute Pms = dms.P
<SIDms, dms, rms> over secure channel
←−−−−−−−−−−−−−−−−−−−−−−−−

•Saves SIDms, dms, & rms

Fig. 3. Phase III: Server Registration Phase.

D. Phase IV: Authentication Phase

During this phase, the mobile user and the MEC sever
authenticate each other through a challenge-response mech-
anism and establish a shared session key for secure data
transmission. The detailed processed is discussed as under
(Fig. 4).
Step 1: The mutual authentication process is initiated by the
mobile user trying to access the services of the MEC server.
It initiates the process by recording its time-stamp (Tu) and
generating a random number (r1). Following this, the uth
mobile user performs two ECC multiplication operations to
generate R1 and R1−ms. Here, the latter is computed over r1
and the msth server’s public key Pms.
Step 2: Finally, the user computes a token TKu for the MEC
server to verify and extract its identity. The token is estimated
using the XOR operation on SIDu, Tu, and R1−ms.
Step 3: Next, the parameters < TKu, Tu, R1 > are relayed
to the MEC server.
Step 4: Upon receiving these values, the MEC server validates
the received time-stamp Tu. If the time-stamp lies within the
permissible time window, then only the server advances the
authentication phase. Otherwise, the connection is terminated.
Step 5: Then, the server computes R∗
1−ms = dms.R1 and ex-
tracts SIDu using the XOR operations. Upon deriving a valid
identity, the server checks its database for its corresponding
cryptographic parameters Ru & Pu.
Step 6: The MEC serve then records its current time-stamp
(Tms) and computes Ru−ms = dms.Ru. Using these values,

u−ms).

the msth MEC server generates an intermediate authentica-
tion token (Authms) for the uth user to verify. Finally, the
computed token and time-stamp are relayed to the user for
veriﬁcation.
Step 7: Upon acquiring < Tms, Authms >, the user ﬁrst
veriﬁes the received Tms. Next it computes R∗
u−ms = ru.Pms
using its secret key ru; followed by the estimation of the
authentication token Auth∗
ms = H2(SIDu||Tu||Tms)) ⊕
H2(SIDu||R∗
Step 8: Finally, the tokens are checked for similarity. If the
similarity is established then the user is assured that he is
communicating with a valid MEC server; else the connection
is terminated.
Step 9: Next, the user computes Rms−u = du.Rms and a
token (Authu) for the server to verify. Along with this, it
also computes its shared session key (SKu−ms) with the
server; and it is used only if the mutual authentication phase
is completed with positive outcomes.
Step 10: Upon receiving Authu, the msth initiates the veri-
-ﬁcation process by computing Auth∗
u and comparing it with
the received value. If the two values match, then the process of
mutual authentication between the two parties is established,
and the server computes SKu−ms.

IV. SECURITY ANALYSIS AND COMPARISONS

In this section,

the security features provided by the
proposed authentication scheme are discussed in details. In
addition to this, the corresponding security evaluation with
respect to the current state-of-the-art is also discussed herein.

A. Security Analysis

The proposed authentication scheme is found to be resilient
against a number of attack vectors and supports the following
features:

1) Mutual authentication: The proposed authentication
mechanism supports mutual authentication between the mo-
bile users and the MEC servers. The process of authentication
is established by computing the intermediate authentication
i.e., Authms and Authu. These tokens can only
tokens,
be calculated by the legitimate users as they involve the
knowledge of the secret keys dms, ru, du, and rms. Further,
extracting the secret keys from their corresponding public
keys in an intractable process in accordance with the elliptic
curve discrete logarithm problem (ECDLP) [8], [16].

key

Phase

IV of

2) Session

agreement:

the
proposed protocol helps
establish shared secret key
(SKms−u, SKu−ms) between the participating entities.
The computation of these keys requires the estimation of
R1−ms, R∗
ms−u. Their
computation in turn requires the knowledge of keys which
are secret to the users and MEC servers. Further, the hardness
of the computed SKms−u and SKu−ms can be attributed to
the elliptic curve difﬁehellman (ECDHP) problem [8]. .

u−ms, Rms−u, and R∗

1−ms, Ru−ms, R∗

MEC Server (ms)

Mobile User (u)
•Generate time stamp Tu
•Select a random number r1 ∈ Z∗
q
•Compute R1 = r1.P
•Compute R1−ms = r1.Pms
•Compute TKu = SIDu ⊕ Tu ⊕ R1−ms

<TKu, Tu, R1>
−−−−−−−−−−→

1−ms = dms.R1

•Validate time stamp Tu
•Compute R∗
•Extract SIDu = TKu ⊕ Tu ⊕ R∗
•Retrieve the respective Ru & Pms
•Generate time stamp Tms
•Compute Ru−ms = dms.Ru
•Compute Authms =
H2(SIDu||Tu||Tms)) ⊕ H2(SIDu||Ru−ms)

1−ms

<Tms , Authms>
←−−−−−−−−−−−

u−ms = ru.Pms

ms = H2(SIDu||Tu||Tms))
u−ms)
?
= Authms

•Validate time stamp Tms
•Compute R∗
•Compute Auth∗
⊕H2(SIDu||R∗
•Check Auth∗
If same, MEC server is authentic; else disconnect
•Compute Rms−u = du.Rms
•Compute Authu = H2(SIDu||SIDms||Tu||Tms))
⊕H2(SIDu||Rms−u)
•Compute SKu−ms =
kdf (SIDu||R1−ms||R∗

u−ms||Rms−u||Tu||Tms)

ms

<Authu>
−−−−−−→
ms−u = rms.Pu

u = H2(SIDu||SIDms||Tu||

•Compute R∗
•Compute Auth∗
Tms)) ⊕ H2(SIDu||Rms−u)
?
•Check Auth∗
= Authu
If same, user is authentic; else disconnect
•Compute SKms−u =
kdf (SIDu||R∗

1−ms||Ru−ms||R∗

u

ms−u||Tu||Tms)

Fig. 4. Phase IV: Authentication Phase.

3) User anonymity: In the designed protocol, the users’
completely masked using pseudo identity,
identity is
i.e., SIDu. Furthermore, neither the IDu nor SIDu is ever
transmitted to the server in clear text format. For instance,
during the ﬁrst authentication pass, SIDu is masked using Tu
and R1−ms. Here, the extraction of R1−ms is an infeasible
process as it involves the information of secret keys, i.e., r1
and dms.

random numbers

4) User intractability: The designed protocol guaran-
tees un-traceability of mobile users as it
involves the
and fresh time-stamps
use of
(Tu & Tms) in every session. Thus, the transmitted tokens
(TKu, Tu, R1, Tms, Authms, and Authu) tend to acquire
fresh values in each and every session. This limits A’s
capability to track a mobile user and monitor its activities.

(r1)

5) Single sign-in: In the considered set-up, the mobile user
logins with the MEC server post successful mutual phase
authentication and establishment of a shared session key. In
the overall process, the mobile user needs to register itself

with the RC only once.

6) Perfect forward secrecy: Let us assume that the A
somehow gets hold of the private keys of the user and MEC
server. Further, it is also assumed that A can now intercept all
the ongoing information (TKu, Tu, R1, Tms, Authms, and
Authu). Even under such a scenario, A would not be able to
comprise the previously relayed messages without adequate
knowledge of the random numbers (r1, ru, rms). Further, the
computation of the session keys (SKms−u and SKu−ms) is
a daunting task due to the nature of ECDHP problem.

7) Resists impersonation attack: In order to successfully
impersonate a user or MEC server, A needs the following
information: du, dms, r1, ru and rms. The said information is
essential to generate the intermediate authentication tokens.
Here, the ﬁrst two in the list are the private keys and the
last three are the random numbers and secret keys; and their
extraction from their publicly available keys is an infeasible
mechanism in accordance with ECDLP.

8) Resists man-in-the-middle attack (MITM): During this
attack, A can intercept and alter the information transmitted
over the channel between the two legitimate parties. Further,
A can trick the legitimate users into believing that
the
modiﬁed message is being sent by an authorized source. In
the proposed protocol, the intermediate tokens can only be
changed with the help of private keys; which in turn can not be
accessed by A. Thus, the protocol is resilient against MITM
attacks.

9) Replay protection: The designed protocol also guar-
antees replay protection by incorporating the time-stamps
(Tu and Tms) during each session. This means that
the
previously relayed messages cannot be used by the A to trick
the legitimate users and servers into bypassing the mutual
authentication process.

B. Security Comparison

An illustrative comparison of the proposed protocol against
the existing schemes is detailed in Table I. The comparison
is based on the following security features (SF): mutual
authentication (SF1), session key agreement (SF2), user
anonymity (SF3), user intractability (SF4), single sign-in
(SF5), perfect forward secrecy (SF6), resist impersonation
attacks (SF7), resist man-in-the-middle attacks (SF8), replay
protection (SF9), and lightweight (SF10). Three existing
schemes namely Tsai et al.’s [9], Irshad et al.’s [11], and
Jia et al.’s [8] schemes have been considered for the purpose
of evaluation.

In accordance with the details highlighted in Table I Tsai et
al.’s [9] scheme doesn’t support the majority of the security
features except for single sign-in, perfect forward secrecy
and replay protection. Nevertheless, the protocols suggested
by Irshad et al. fail to support perfect forward secrecy and
is not lightweight. Similarly, Jai et al.’s scheme is also not
lightweight but is secure against the major attack vectors.
Thus, it is evident from the above discussion that the ex-
isting schemes/protocols cannot provide an adequate level of
security and are not apt for MEC environments due to the
use of heavy computations. Mobile devices involved in MEC

TABLE I
ILLUSTRATIVE COMPARISON OF SECURITY FEATURES SUPPORTED BY
THE PROPOSED AND EXISTING AUTHENTICATION PROTOCOLS.

Protocols
SF1
SF2
SF3
SF4
SF5
SF6
SF7
SF8
SF9
SF10

Tsai et al. [9]
×
×
×
×
X
X
×
×
X
×

Irshad et al. [11]
X
X
X
X
X
×
X
X
X
×

Jia et al. [8]
X
X
X
X
X
X
X
X
X
×

Proposed
X
X
X
X
X
X
X
X
X
X

often are battery constraint and have limited computational
and communication capacity. Thus, heavy computations may
take a toll on their performances. Meanwhile, the proposed
authentication protocol supports all the security features and
is lightweight too.

V. PERFORMANCE EVALUATION

In this section, a comparative performance assessment of
the proposed scheme with the existing schemes [8], [9],
[11] is demonstrated. These schemes are essentially identity-
based and privacy-driven. The related simulation details are
discussed next:

A. Simulation Details

The simulation setup is adopted from Jia et al.’s [8]
work; wherein the authors have adopted different platforms
to emulate the computational capabilities of the MEC servers
and mobile devices. Alibaba’s cloud was used to simulate the
servers with the following conﬁgurations: Intel(R) Xeon(R)
CPU E5-2630 0 @ 2.30 GHz, 1 GB RAM and Ubuntu
14.04. On the other hand, Google Nexus One smartphone
provides the mobile devices platform with 2 GHz ARM CPU
armeabi-v7a, 300 MiB RAM, and Android 4.4. For detailed
information, readers are encouraged to refer to [8].

B. Evaluation Parameters

The evaluation has been carried out on the basis of two
widely used metrics, i.e., computational overhead, and com-
munication overhead.

1) Computational Overhead Analysis: For the compu-
tational analysis, different cryptographic functions were
executed on the above-mentioned devices and platforms,
i.e., MEC servers and mobile devices. Table II describes the
overhead associated with the execution of different functions
(in ms). Here, the variables Tbp, Tm, Ta, Th, and Te denote
the computational time required for executing a single bilinear
pairing, scalar multiplication, point addition, hashing, and
modular exponentiation operation, respectively.

TABLE II
EXECUTION OVERHEAD OF DIFFERENT CRYPTOGRAPHIC FUNCTIONS.

Entity
Server
Client

Tbp
5.275
48.66

Tm
1.97
19.919

Ta
0.012
0.118

Th
0.009
0.089

Te
0.339
3.328

Based on these values,

the computational cost of the
proposed protocol was analyzed against the existing protocols.
The comparisons were carried out on both the mobile users’
and MEC servers’ sides. The obtained results are depicted
in Table III. It is evident from the results that the proposed
scheme depicts the best performance for both the MEC
servers and the mobile users, and it is the most lightweight
protocol amongst all.

The performance assessment of the proposed protocols with
the existing state-of-the-art protocol reveals that the proposed
protocol achieves the highest level of security with compara-
tively reduced computational and communication overheads.

ACKNOWLEDGMENT

This work was supported by the Tier 2 Canada Research

Chair.

TABLE III
COMPUTATIONAL OVERHEAD ANALYSIS.

Protocols
Tsai et al. [9]

Irshad et al. [11]

Jia et al. [8]

Proposed

At User
5Tbp + 2Ta + Te +
Tinv + 5Th ≈ 93.604
Tbp+5Tm+2Ta+2Te+
Tinv + 6Th ≈ 155.681
4Tm+3Ta+Te+5Th ≈
83.807
4Tm + 4Th ≈ 80.032

At Server
2Tbp + 2Tm + 2Ta +
2Te + 5Th ≈ 15.228
2Tbp + 4Tm + 3Ta +
2Te + 3Th ≈ 19.171
Tbp + 5Tm + 3Ta +
5Th ≈ 15.206
3Tm + 4Th ≈ 5.946

2) Communication Overhead Analysis: To analyze the
communication overhead associated with the proposed and
existing protocols, the number of messages transmitted be-
tween the participating parties has been considered as a
potential metric. These transmitted messages comprise of
different tokens such as cyclic additive group (G), ﬁeld (Zq),
identity (ID), hash (H), and time-stamp (T ). Their lengths
were set as follows: |G| = 1024b, |Zq| = 160b, |ID| =
256b, |H| = 256b, and |T | = 32b. In accordance with
these values, the communication cost of the protocols was
computed and summarized in Table IV. The results depict that
the proposed scheme leads to the best performance, i.e., 2624
b followed by Tsai et al.’s scheme (4608 b), Jia et al.’s scheme
(4736 b), and Irshad et al.’s scheme (5632 b), respectively.

TABLE IV
COMPARISON OF COMMUNICATION OVERHEADS.

Scheme
Tsai et al. [9]
Irshad et al. [11]
Jia et al. [8]
Proposed

Cost
3|G| + |GT | + |H| + |ID|
4|G| + |GT | + |H| + |ID|
4|G| + 2|T | + 2|Zq| + |ID|
2|G| + 2|T | + 2|H|

No. of bits
4608
5632
4736
2624

VI. CONCLUSION

In this paper, a lightweight and privacy-preserving mu-
tual authentication protocol for MEC environments has been
proposed. The proposed protocol relies on ECC, one-way
hash functions and concatenation operations for its secure
and lightweight functionality. More speciﬁcally, the designed
protocol acquires its strength from the hardness of ECDLP
and ECDHP problems to compute the intermediate authen-
tication tokens. Additionally,
the protocol also leverages
the advantages of freshly generated random numbers and
time-stamps to resist replays of previously communicated
messages. Overall, the protocol withstands different security
attacks (namely user impersonation, server impersonation,
MITM, user traceability, etc.) and provides mutual authen-
tication, session key agreement, and single sign-in facility.

REFERENCES

[1] K. Kaur, S. Garg, G. S. Aujla, N. Kumar, J. J. Rodrigues, and
M. Guizani, “Edge computing in the industrial
internet of things
environment: Software-deﬁned-networks-based edge-cloud interplay,”
IEEE communications magazine, vol. 56, no. 2, pp. 44–51, 2018.
[2] L. Xiao, X. Wan, C. Dai, X. Du, X. Chen, and M. Guizani, “Security
in mobile edge caching with reinforcement learning,” IEEE Wireless
Communications, vol. 25, no. 3, pp. 116–122, 2018.

[3] S. Garg, A. Singh, K. Kaur, G. S. Aujla, S. Batra, N. Kumar, and
M. S. Obaidat, “Edge Computing-Based Security Framework for Big
Data Analytics in VANETs,” IEEE Network, vol. 33, no. 2, pp. 72–81,
2019.

[4] S. Garg, A. Singh, K. Kaur, S. Batra, N. Kumar, and M. S. Obaidat,
“Edge-based content delivery for providing QoE in wireless networks
using quotient ﬁlter,” in IEEE International Conference on Communi-
cations (ICC), Kansas City, USA, May 2018.

[5] K. Kaur, S. Garg, G. Kaddoum, F. Gagnon, and S. H. Ahmed,
“Blockchain-Based Lightweight Authentication Mechanism for Vehic-
ular Fog Infrastructure,” in IEEE International Conference on Commu-
nications Workshops (ICC Workshops), Shanghai, China, May 2019.

[6] S. Garg, K. Kaur, G. Kaddoum, F. Gagnon, and J. J. P. C. Rodrigues,
“An Efﬁcient Blockchain-Based Hierarchical Authentication Mecha-
nism for Energy Trading in V2G Environment,” in IEEE International
Conference on Communications Workshops (ICC Workshops), Shang-
hai, China, May 2019.

[7] S. Almajali, H. B. Salameh, M. Ayyash, and H. Elgala, “A framework
for efﬁcient and secured mobility of IoT devices in mobile edge
computing,” in Third International Conference on Fog and Mobile Edge
Computing (FMEC), Barcelona, Spain.

IEEE, April 2018.

[8] X. Jia, D. He, N. Kumar, and K.-K. R. Choo, “A Provably Se-
cure and Efﬁcient Identity-Based Anonymous Authentication Scheme
for Mobile Edge Computing,” IEEE Systems Journal, 2019, DOI:
10.1109/JSYST.2019.2896064.

[9] J.-L. Tsai and N.-W. Lo, “A privacy-aware authentication scheme for
distributed mobile cloud computing services,” IEEE Systems Journal,
vol. 9, no. 3, pp. 805–815, 2015.

[10] Q. Jiang, J. Ma, and F. Wei, “On the security of a privacy-aware
authentication scheme for distributed mobile cloud computing services,”
IEEE Systems Journal, vol. 12, no. 2, pp. 2039–2042, 2018.

[11] A. Irshad, M. Sher, H. F. Ahmad, B. A. Alzahrani, S. A. Chaudhry,
and R. Kumar, “An improved Multi-server Authentication Scheme for
Distributed Mobile Cloud Computing Services,” KSII Transactions on
Internet and Information Systems, vol. 10, no. 12, pp. 6092–6115, 2016.
[12] R. Amin, S. H. Islam, G. Biswas, D. Giri, M. K. Khan, and N. Kumar,
“A more secure and privacy-aware anonymous user authentication
scheme for distributed mobile cloud computing environments,” Security
and Communication Networks, vol. 9, no. 17, pp. 4650–4666, 2016.

[13] D. He, N. Kumar, M. K. Khan, L. Wang, and J. Shen, “Efﬁcient privacy-
aware authentication scheme for mobile cloud computing services,”
IEEE Systems Journal, vol. 12, no. 2, pp. 1621–1631, 2018.

[14] L. Xiong, D. Peng, T. Peng, and H. Liang, “An Enhanced Privacy-
Aware Authentication Scheme for Distributed Mobile Cloud Computing
Services,” KSII Transactions on Internet and Information Systems,
vol. 11, no. 12, pp. 6169–6187, 2017.

[15] J. Li, W. Zhang, V. Dabra, K.-K. R. Choo, S. Kumari, and D. Hogrefe,
“AEP-PPA: An anonymous, efﬁcient and provably-secure privacy-
preserving authentication protocol for mobile services in smart cities,”
Journal of Network and Computer Applications, vol. 134, pp. 52–61,
2019.

[16] N. Kumar, K. Kaur, S. C. Misra, and R. Iqbal, “An intelligent RFID-
enabled authentication scheme for healthcare applications in vehicular
mobile cloud,” Peer-to-Peer Networking and Applications, vol. 9, no. 5,
pp. 824–840, 2016.

