0
2
0
2

v
o
N
5

]

R
C
.
s
c
[

2
v
4
2
0
6
1
.
0
1
0
2
:
v
i
X
r
a

EVALUATION OF VULNERABILITY REPRODUCIBILITY
IN CONTAINER-BASED CYBER RANGE

A PREPRINT

Ryotaro Nakata
Institute of Information Security
Yokohama, Kanagawa, Japan
dgs184101@iisec.ac.jp

Akira Otsuka
Institute of Information Security
Yokohama, Kanagawa, Japan
otsuka@iisec.ac.jp

November 9, 2020

ABSTRACT

The cyber range is a practical and highly educational information security exercise system, but it
has not been widely used due to its high introduction and maintenance costs. Therefore, there is a
need for a cyber range that can be adopted and maintained at a low cost. Recently, container type
virtualization is gaining attention as it can create a high-speed and high-density exercise environment.
However, existing researches have not clearly shown the advantages of container virtualization for
building exercise environments. Moreover, it is not clear whether the sufﬁcient vulnerabilities are
reproducible, required to conduct incident scenarios in the cyber range. In this paper, we compare
container virtualization with existing virtualization type and conﬁrm that the amount of memory,
CPU, and storage consumption can be reduced to less than 1/10 of the conventional virtualization
methods. We also compare and verify the reproducibility of the vulnerabilities used in common
exercise scenarios and conﬁrm that 99.3% of the vulnerabilities are reproducible. The container-based
cyber range can be used as a new standard to replace existing methods.

Keywords Information security education · cyber range · container type virtualization · Docker · vulnerability

1

Introduction

With the development of ICT technology, the scale and impact of cyber-attacks continue to increase worldwide. The
threat of cyber-attacks is increasing in Japan due to the incidents that directly impact social activities and daily life,
such as the leakage of virtual currencies and fraudulent use of mobile payments. On the other hand, the shortage of
human resources for security is pointed out, and the government and higher education institutions are making various
efforts for human resource development. Still, the quantitative and qualitative shortage has not been solved.[1].

Information security education includes lectures, individual learning with tools to reproduce and experience vulner-
abilities, and practical exercises with cyber ranges[2]. The cyber range is a large scale exercise system for learning
by experiencing real security incidents in an organization in a virtual environment that simulates a real-world system.
Although the educational effect is high, the cyber range’s introduction and maintenance are millions of dollars.

Although the effectiveness and necessity of cyber range are recognized, it is not easy to introduce and maintain cyber
range on its own. Some universities have adopted it with companies’ help, but the cyber-range has only spread to a few.
As a result, a low-cost exercise environment is required, and efforts to use container type virtualization for building the
environment have been attracting attention.

For example, Labtainers at the US Naval Academy provides an exercise environment created using containers, which
can be deployed and studied on students’ terminals. The platform is open to the public and allows us to develop and
share new exercises[3]. CyExec at AIIT in Japan has also paid particular attention to the high portability and ease
of sharing containers and has been trying to expand the educational curriculum and practice contents through joint
development and use while also considering safety and ethical aspects[1].

 
 
 
 
 
 
A PREPRINT - NOVEMBER 9, 2020

However, these studies do not show the advantages of container type virtualization in concrete terms, and the scope of
its use in cyber range environments is not clear, which is a barrier to developing and using the container-based cyber
range. As a result, most existing cyber-range products and educational research use other virtualization types[2].

This paper identiﬁed the advantages of container virtualization over other virtualization types in cyber range exercises.
Furthermore, we report the results of a comprehensive comparison with other virtualization types through experimenta-
tion using vulnerability assessment tools and exploit modules to investigate whether vulnerabilities and incidents in
common exercise scenarios can be accurately replicated in Cyber range exercises.

2 The cyber range

2.1 Deﬁnition of cyber range

TThe cyber range is a system to build and provide an environment for information security exercises. For smooth
implementation of the exercises, with the following functions.

• Construction of a highly realistic system environment

The system environment used in the real world, such as PCs, servers, networks, and security devices, can be
recreated.

• Duplicate or replace the environment

Flexible and quick resetting, duplication, and replacement of the exercise environment depending on the
exercise scenario and student.

• Reproduction of vulnerabilities and incidents

Vulnerable environments and actual malware can be used to recreate security incidents and execute attack and
defense scenarios.

These are realized in an environment built with virtualization technology[4].

2.2 Typical cyber range scenarios

In the cyber range exercise, various scenarios will be developed depending on the learning objectives and the student’s
level. Typical attack scenarios include the following.

1. Vulnerability search for web-server by attackers

2. Installing backdoors through attacks on identiﬁed vulnerabilities

3. Network penetration through a backdoor

4. Port scanning to other devices on the network

5. Intrusion and privilege escalation to discovered vulnerable devices

6. Obtaining DB password information

7. Unauthorized access to the DB and acquisition of conﬁdential information

Figure 1 shows an example of a network that assumes such an attack scenario.

In the cyber range, reproduce vulnerabilities in web servers, DB servers, client devices, etc. to carry out the scenario.
Also, security devices such as ﬁrewalls, IDS/IPS, etc. will be installed, depending on the exercise’s nature. To execute
scenarios in the cyber range that replicate real security incidents and responses, prepare a virtual environment equivalent
to the real system environment[5].

3 Virtualization technology

3.1 Types of Virtualization Technologies

Virtualization technology efﬁciently utilizes hardware by sharing and dividing the resources required for operating
systems and applications among multiple environments (VM: Virtual Machine)[6]. Figure 2 shows an overview of each
virtualization technology types.

2

A PREPRINT - NOVEMBER 9, 2020

Figure 1: Example of virtual network for cyber range

Figure 2: Example of virtual network for cyber range

In the hypervisor type, a program called hypervisor builds a VM on specially prepared hardware, and it operates by
occupying resources such as memory and CPU.

In the host type, a VM is built by running dedicated software that plays a hypervisor role on an operating system (host
OS) that is already running on the actual machine. A portion of the resources recognized by the host OS is allocated
and operated.

Unlike other virtualization types, the container type operates like a VM by creating a separate namespace, called a
container, on a running host OS that operated only the processes required for the functions to be used. Containers do

3

not occupy physical resources and run as a single process on the host OS. Table 1 shows the characteristics of each
virtualization types.

A PREPRINT - NOVEMBER 9, 2020

Table 1: Characteristics of each virtualization types

Virtualization
type
Hypervisor
Host
Container

isolation
level
max
high
low

over
head
high
max
low unrequire

guest
OS
require
require

The isolation level indicates independence from the host OS and other VMs running on the same hardware. If the
isolation level is low, there is a high probability that the host OS and other VMs will be affected if processing on
the VM is slow or troubles occur. Overhead refers to the decrease in processing performance that occurs in a virtual
environment. Since the hardware is accessed through the mechanism used to run the VM, there is a high probability
that processing performance will decrease compared to the actual environment.

Figure 3 shows the operating architecture of each virtualization types. In the hypervisor and host type, the VMs run
independently and replicate the equivalent environment as the real machine. Still, they require the installation of a guest
OS, which consumes a large amount of physical resources[7]. There is no require for the guest OS to run or to start
and stop in the container type, and only the necessary functions can be run with minimal conﬁguration. Containerized
systems share kernels and resources. They can be fast and efﬁcient. Still, they are affected by interactions with the host
OS and other containers and may behave differently from the the real machine.[8].

Figure 3: Operating architecture of each virtualization types

3.2 Virtualization type used in the cyber range

Existing cyber ranges use HV and hosted virtualization types. Because the environment is nearly identical to that
of a real machine, it can faithfully replicate the vulnerabilities and incidents. In particular, virtualization solutions
such as VMWare and Citrix are being used in the commercial cyber range for their stability and VM management
capabilities[9].

However, depending on the number of participants and the number of exercise groups, there are more than 100
virtual instances running at the same time, requiring high load operations such as environment replication and rapid
startup/termination. This is one of the reasons why the cost is so high because of the need for high-performance
hardware[1].

3.3 Advantages of Container-base cyber range

cyber range environments using containerized virtualization are faster and less resource-intensive than other virtualiza-
tion types. Figure 4 shows a comparison of the resources consumed by VMs and containers as the number of virtual
instances increases.

In the example in the ﬁgure 4, the OS (Ubnutu16.04) was installed on a VM with 1GB memory allocated, and prepared
as device that was intended to be a client for the cyber range environment. We also installed the same OS and desktop
package as the VM in a container running on the same host. The resource consumption was compared by preparing the
container as a container that allowed the same operations as the VM.

4

A PREPRINT - NOVEMBER 9, 2020

Figure 4: Comparison of resource consumption as the number of virtual instances increases

VMs always consume host resources without any particular actions, such as running a guest OS and various services.
Also, VMs consume more resources than the number of virtual instances because they allocate available resources in
advance. Many processes that are not necessary to execute cyber range scenarios are also running, and even virtual
machines that are not speciﬁcally running consume a certain amount of resources, which is inefﬁcient.

Containers, on the other hand, consume very few resources per instance because they run on a minimal number of
processes. Therefore, even if the cyber range environment is built and the number of virtual instances increases, the
physical resource consumption can be signiﬁcantly reduced compared to a VM environment. By using containers to
build a cyber range environment, the required speciﬁcations of the host machine can be signiﬁcantly reduced, and the
environment can be built at a low cost.

3.4 Concerns of Container

Using container type virtualization is able to build a cyber range environment at a lower cost. However, container type
virtualization has different characteristics than VMs used in the existing cyber range and may have different states and
behaviors in executing scenarios. As a result, individual vulnerabilities and incidents cannot be reproduced correctly and
may not work as envisioned. The biggest concern with the container-based cyber range is whether the vulnerabilities
required to execute a scenario can be reproduced on a container similar to on a VM.

4 Experiments on Vulnerability Reproducibility

4.1 Reproducibilty Metrics

To assess the reproducibility of vulnerabilities on a container-based cyber range, we model the OS/HW environment in
which the programs as an oracle O and every system calls invoked by a program A is sent to the oracle O.
AOReal , AOVM and AOContainer
If a program is run in the environment over Real, VM, container, we write the output of the programs as AOReal , AOVM
and AOContainer respectively. Where “Real" means physical environment where no virtualization technology is used.

If the execution results of all programs are the same, there is no problem in executing any exercise scenario and it
eliminates concerns of container-type cyber range. Theoretically, the identiﬁcation algorithm φ can be deﬁned as the
inability to identify in which environment the program A was executed.
We write the set of results of running the program in each environment as AReal, AV M , and AContainer, respectively,
as shown in the following equation.

AReal = (cid:8)A | φ (cid:0)AOReal (cid:1) = 1(cid:9)

AV M = (cid:8)A | φ (cid:0)AOVM(cid:1) = 1(cid:9)

AContainer = (cid:8)A | φ (cid:0)AOContainer (cid:1) = 1(cid:9)

5

A PREPRINT - NOVEMBER 9, 2020

Figure 5: Reproducibility Comparison Model

By measuring the similarity of these sets, we conﬁrm the reproducibility of vulnerabilities in the container-based cyber
range. The relationship between each set is shown in Figure 5

Considering the existing use of VMs in the cyber range, we will consider Real and VM’s to be nearly identical. Thus,
J (cid:0)AV M , Acontainer(cid:1) = |AV M ∩AContainer
|AV M ∪AContainer| , which represents the similarity between VMs and containers, be the metric for
using container type virtualization in the cyber range.

The higher the value of J, the more containers can be used in the same way as VMs in many scenarios, which eliminates
concerns about container-based cyber range.

In reality, there are programs whose execution results are container-speciﬁc, such as programs related to physical
vulnerabilities. Such programs should be excluded from the container-based cyber range and will be discussed in detail
in Chapter 6.

4.2 Experimental Method

We will compare container and VM environment through an exhaustive experiment with programs that may be used
in cyber range exercise scenarios. We build an equivalent environment with VMs and containers to see if there is a
difference between the scan results by the vulnerability assessment tool and the results of attacks against the detected
vulnerabilities. Table 2 shows the vulnerability assessment tools used in the experiment.

Table 2: Vulnerability inspection tool used for veriﬁcation

Name

OpenVAS
Nmap
Owasp ZAP
Nikto2

Web
App

◦
◦

Target

Middle
ware
◦

OS

◦

Net
work
◦
◦

◦

We have selected tools that can be used free in cyber range exercises. Also, we divided the target areas into four areas:
web applications, middleware, OS, and networks, and experimented with each tool. Using tools capable of scanning for
each area, we thought we could perform a comprehensive experiment for various vulnerabilities.

4.3 Experimental Settings

We veriﬁed this with a Docker container and a VirtualBox VM. Docker is a platform for container type virtualization,
which is becoming more popular for various applications such as cloud services. VirtualBox is a free hosted virtualization
software, which is widely used in veriﬁcation environments, education and research because of its ease of installation
and the large number of supported operating systems. We determined that the environments available for veriﬁcation
and defense (detection) of attacks are readily available and can be effectively veriﬁed for each. The environments used
for veriﬁcation are shown in Table 3.

6

A PREPRINT - NOVEMBER 9, 2020

Table 3: Experimental Settings detail

env

Host

VM

cant-
ainer

2.3GHz Corei5
16GB RAM

Spec

Hardware
VM software and Image
MacBookPro-13inch
Ubuntu 18.04 LTS
VirtualBox6.0
Metasploitable2
Metasploitable3
Kalilinux2019.1
DockerCE18.09
Metasploitable2(created from VM image)
Metasploitable3(created from VM image)
kalilinux/kali-linux-docker

1CPU
2GB RAM

We used Kali-linux, a Linux distribution for penetration testing, and Metasploitable2 and Metasploitable3, which are
used as a veriﬁcation environment for deliberately adding vulnerabilities to containers and VMs, and compared the
results of vulnerability assessment and exploit tests[10, 11].

Since ofﬁcial container images of Metasploitable2 and Metasploitable3 are not available to the public, I created container
images from each VM’s conﬁguration ﬁle. By using the docker import command, which collects all ﬁles except /boot,
/dev, /mnt, /proc, /sys, and /tmp, which are unnecessary for the operation of the containers, and creates a base container
image from the archive ﬁles, I was able to create my own container image. We have created an environment that works
with the same conﬁguration, although the startup process is different.

By using the docker import command, which collects all ﬁles using tar command except /boot, /dev, /mnt, /proc, /sys,
and /tmp, which are unnecessary for the operation of the containers, and creates a base container image from the
archive ﬁles, I was able to create my own container image. We have created an environment that works with the same
conﬁguration, although the startup process is different.

The network in the veriﬁcation environment does not use the standard Docker network. As shown in the ﬁgure 6,
containers were placed on the same segment as the host, and no communication restrictions were placed between the
host and containers. In the cyber range exercise, it is necessary to construct a ﬂexible network environment to reproduce
the real environment.

Figure 6: Network Settings on Docker

7

A PREPRINT - NOVEMBER 9, 2020

5 Experimantal Results

5.1 Measuring Reproducibility with Vulnerability Assesment Tools

5.1.1 OpenVAS

OpenVAS is an open-source vulnerability testing tool with rich testing capabilities. It can detect a wide range of
vulnerabilities such as software bugs, usage ﬂaws, and conﬁgurations, and can check for corresponding CVEs (Common
Vulnerabilities and Exposures)[12] using the latest database[13]. Table 4 compares the results of OpenVAS CVE-based
vulnerability checks by the number of detections per VM and container environment. Since the number of CVE
detections is very high, it is aggregated by CWE (Common Weakness Enumeration) [14].

Initially, several CVE items were not detected by the container. However, by checking the contents of the vulnerability,
starting the services that were not working on the container side, and checking and correcting the settings, we were able
to achieve complete agreement on all items. Therefore, we were able to conﬁrm the same reproducibility in VM and
container environments for the items conﬁrmed by the vulnerability test using OpenVAS.

5.1.2 Nmap

Nmap is an open-source port scanner with extensive OS and service version detection capabilities[15]. On the other
hand, it is also used, for example, by malicious people to investigate the status of a host that is under attack[16].
In cyber-range exercises, they are often used in the early stages of exercise scenarios, for example, to respond to
incidents after port scan detection. Therefore, experimental results from Nmap are also important in a container-based
Cyber-range environment. Table 5 shows the comparative results of assessment by NMAP.

In the Nmap experiment, we performed an optional scan to detect the type and version of the operating system and
running services, and compared the detection results. As with OpenVAS, there were some services that could not be
detected at ﬁrst, especially those related to remote connections, but we were able to obtain the same detection results by
starting the missing services and adding settings, and we were able to conﬁrm the same reproducibility between VM
and container environments. In addition, we checked the vulnerabilities that could exist in the detected contents and
conﬁrmed the corresponding CWE.

As a side note, the ﬁrst scan with Nmap on the VM took 138.93 seconds, compared to 113.75 seconds in the container
environment. We were able to perform several scans in about the same amount of time, and the container was able to
perform the scans at a faster.

5.1.3 OWASP ZAP

ZAP (Zed Attack Proxy) is an open-source web application vulnerability testing tool provided by OWASP (Open
Web Application Security Project) that, like Nmap, can detect many vulnerabilities and check how to deal with them.
Metasploitable2 and Metasploitable3, which are prepared as vulnerable environments, have several web application
environments, and web pages with various vulnerabilities, can be checked. Table 6 shows a comparison of the results
of the ZAP vulnerability check[17]. For Metasploitable2 and Metasploitable3, there was a signiﬁcant difference in
the number of vulnerabilities detected. It is probably due to the different software and versions that make up the web
application.

In the case of Metasploitable2, the overall trend is that the number of detections for each vulnerability is similar for
VMs and containers. For cases where the number of detections by containers is lower than VMs, there may be factors
that can be addressed to reproduce the same results, such as service start and conﬁguration issues, or the presence
or absence of required ﬁles. On the other hand, if the number of detections by containers is higher than the number
of VMs, it is necessary to conﬁrm whether the difference is due to an intrinsic difference caused by unreproducible
vulnerabilities in the container environment resource-referencing behavior of the host OS.

However, it was found that VMs and containers can reproduce the same vulnerabilities for many items. Therefore, the
cyber range exercise can reproduce the targeted vulnerabilities and utilize them in the scenario.

5.1.4 Nikto2

Nikto2 is a dictionary-based tool for checking published security holes and problematic settings in web servers and web
applications running on them. Table 7 shows the comparative results of testing with Nikto2.

Nikto2 can perform checks based OSVDB(Open Source Vulnerability DataBase). The OSVDB was operated as a
database of vulnerability information as an impartial non-proﬁt organization, but it has not been updated since its

8

Table 4: Comparison of the number of vulnerabilities detected by OpenVAS

A PREPRINT - NOVEMBER 9, 2020

CWE

vulnerability classiﬁcation

VM

264

200

134

254
255

189
190

275
284
287
295
310

16
17
18
20
22
59
74
79
89
93
94
113
119
125

Conﬁguration
Code
Source Code
Improper Input Validation
Pass Traversal
Link Following
Injection
Cross Site Scripting
SQL Injection
CRLF Injection
Code Injection
HTTP Response Splitting
Buffer Error
Out-of-bounds Read
Use of Externally-Controlled
Format String
Numeric Errors
Integer Overﬂow or Wraparound
Exposure of Sensitive Information
to an Unauthorized Actor
7PK - Security Features
Credentials Management Errors
Permissions, Privileges,
and Access Controls
Permission Issues
Improper Access Control
Improper Authentication
Improper Certiﬁcate Validation
Cryptographic Issues
Missing Encryption
of Sensitive Data
Key Management Errors
Use of a Broken or Risky
Crypto-graphic Algorithm
Insufﬁcient Veriﬁcation
of Data Authenticity
Cross Site Request Forgery
Race Condition’
Session Fixation
Resource Management Errors
Uncontrolled Resource
Consumption
Double Free
Use After Free
NULL Pointer Dereference
Deserialization of Untrusted
Data
Files or Directories Accessible
to External Parties
Open Redirect
Incorrect Permission Assignment
for Critical Resource
Missing Release of Resource
after Effective Lifetime
Out-of-bounds Write
Inﬁnite Loop
Design Design errors
Other
noinfo

Other errors
Lack of information
9

352
362
384
399

415
416
476

787
835

732

502

552

601

400

320

327

772

311

345

cont-
ainer
2
2
1
82
7
6
1
33
7
4
13
1
66
2

5

31
3

42

2
2

54

1
5
8
2
22

22

2

1

1

5
9
1
51

2

1
2
8

2

1

5

1

1

2
2
1
82
7
6
1
33
7
4
13
1
66
2

5

31
3

42

2
2

54

1
5
8
2
22

22

2

1

1

5
9
1
51

2

1
2
8

2

1

5

1

1

1
8
4
50
123

1
8
4
50
123

A PREPRINT - NOVEMBER 9, 2020

Table 5: Comparison of detection results by Nmap

CWE
ex.
189
339
119
200
254
416
79
287

399

22
275

264
290

94
119

264

22
399
134
189

20

other

264
284

other

20
189

16

20
119
189
399

port

version

VM

cont-
ainer

21/
ftp
22/
ssh
53/
dns
80/
http
111/
rpcbind
139,
445/
samba
631/
ipp
1099/
java
-rmi
2049/
nfs
2121/
ftp
3306/
MySQL
3500,
8181
/http
3632/
distccd
5432/
Post
-greSQL
5900/
vnc
6667,
6697/
irc
8009/
aip13
8180/
http
8787/
drb

vsftpd 2.3.4
ProFTPD 1.3.5
OpenSSH 4.7p1
OpenSSH 6.6 1p1

ISC BIND 9.4.2

Apache 2.2.8
Apache 2.4.7

2 (RPC #100000)

Samba smbd
3.X-4.X

CUPS 1.7

Java Rmi Registry

2-4(RPC #100003)

ProFTPD 1.3.1

MySQL 5.0.51a
MySQL 5.5.62

Webrick httpd
/1.3.1

distccd v1

PostgreSQL
DB8.3.0-8.3.7

VNC protocol 3.3

Unreal ircd

Apache Jserv
(Protocol v1.3)
Tomcat/Coyte
JSP engine 1.1

Ruby DRb RMI

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

10

Table 6: Comparison of the number of detected vulnerabilities by ZAP

A PREPRINT - NOVEMBER 9, 2020

CWE

Vulnerability

89
97
79
79
22
78
98

200

548

472

200

200

SQL Injection
Server Side Include
XSS(refrected)
XSS(stored)
Pass Traversal
Command Injection
File Inclusion
Application error
disclosure
Directory Browsing
Parameter
tampering
Buffer Error
disclosure
Private IP disclosure

Metasploi-
table2

Metasploi-
table3

VM

358
1
1075
5
21
361
209

cont-
ainer
422
1
1000
5
21
342
206

242

246

14

13

291

136

15

14

287

139

VM

2
0
1
0
0
0
0

1

21

1

1

1

cont-
ainer
2
0
1
0
0
0
0

1

21

0

1

1

Table 7: Comparison of vulnerability results by Nikto2

CWE OSVDB Example of detection

VM

other
other

284

693

48
119

576

877

other

3092

other

3233

other

3268

119

3288

other

12184

directory is browsable
CVE-1999-0269
Vulnerbility of
weblogic
vulnerbility of XST
phpMyAdmin is
browsable
conﬁguration ﬁle is
browsable
Directory index is
browsable
Vulnerbility of
Abyss 1.03
PHP version disclosure

1
2

1

1

7

3

9

1

1

cont-
ainer
1
2

1

1

7

3

9

1

1

operation has been suspended. There was no problem in the operation of Nikto2 as a vulnerability testing tool. In this
test, the same results were obtained for both VMs and containers, conﬁrming the same reproducibility. Depending on
the vulnerability of each OSVDB item, the corresponding CWE items were conﬁrmed.

5.2 Measuring Reproducibility with Exploit Modules

The Metasploit framework included in Kali-linux includes a variety of exploit modules. By using them, we can conduct
proof-of-concep and other experiments. We compared the results of the attack experiments against Metasploitable2
and Metasploitable3 in the VM and container environments to see if the attacks were successful and if the display
and behavior were identical. Also, the exploit modules were selected from those capable of attacking vulnerabilities
detected by the vulnerability assessment tool used in the 5.1 experiment.

Table 8 shows the modules used in the attack experiments and the experiments’ results. All the exploit modules used
worked as expected. Also, the screen display and behavior were the same in both VM and container environments, and
we were able to conﬁrm the equivalent of reproducibility in the attack experiments.

11

A PREPRINT - NOVEMBER 9, 2020

Table 8: Comparison of veriﬁcation results by attack test

CWE

119

200

310

416

other

119

94

189

16

20

284

other

20

other

noinfo

metasploit module

VM

auxiliary
/scanner

ssl/openssl_heartbleed
ssh/ssh_enumusers
http/options
http/trace
http/tomcat_enum
http/ssl_version
ssl/openssl_ccs
http/apache
_optionsbleed
rservices/rexec_login
rservices/rlogin_login
rservices/rsh_login

auxiliary/server/openssl
_heartbeat_client_memory

exploit
/linux

exploit
/unix

exploit
/multi

samba
/is_known_pipename
samba
/setinfopolicy_heap
misc/distcc_exec
irc/unreal_ircd_3281
_backdoor
ftp/proftpd_modcopy
_exec
webapp/twiki_history
browser
/java_storeimagearray
http/php_cgi_arg
_injection
samba/usermap_script

◦
◦
◦
◦
◦
◦
◦

◦

◦
◦
◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

cont-
ainer
◦
◦
◦
◦
◦
◦
◦

◦

◦
◦
◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

5.3 Overall Results

We checked the percentage of coincidence between VMs and containers for all experiments performed. Figure 7 shows
the total number of detections for each CWE and the percentage of identical results between VMs and containers for the
vulnerabilities and detection items identiﬁed in each experiment. Because the items are displayed in order of number,
there are many CWE items that were detected but are not displayed, or that do not correspond to CWEs.

Figure 7: Match rate of vulnerability reproducibility about VM and container

In this veriﬁcation, the reproducibility of the ZAP vulnerability was not a 100% match, but the similarity J calculated
for all items was 0.993.

12

A PREPRINT - NOVEMBER 9, 2020

This value is higher than we expected, and we believe it is acceptable even if we assume the creation of a practical
cyber range environment and the use of exercise scenarios. This validation largely eliminates the cyber range concerns
of container-based virtualization.

In this experiment, initially, some of the results were not match between VMs and containers. However, most of
them were related to starting and conﬁguring services in a container environment. Therefore, if the ﬁles that make
up the container are equivalent to those of a VM, the same reproducibility can be ensured by adding the appropriate
conﬁguration and startup process. This experiment largely eliminates the cyber range concerns of container-based cyber
range.

6 Limitations of Reproducibility

In container type virtualization, it may be identiﬁable as a container because the comparison of behavioral results with
other virtualization schemes is inconsistent. For example, in the case of a direct attack on the part shared with the
host OS. These are not suitable for the cyber range environment and should be excluded, but we checked if they are
identiﬁable with the VM. Table 9 shows the results of an attack on a VM and a container.

Table 9: Physical resource consumption and behavior of virtual environment

resource

type

results

memory

strage

VM

cont-
ainer

VM

cont-
ainer

Program is delayed at VM
memory allocation limit, but other
VMs are not affected.
When physical memory usage
reaches a limit, the entire operation,
including the host OS, is delayed.
Machine stops at VM storage
allocation limit, but other VMs are
not affected.
When physical storage usage
reaches a limit, the entire operation,
including the host OS, is stopped.

A VM occupies a portion of the resources on the host OS and operates as an independent machine. Therefore, even
if an attack slows down or stops the VM, it does not interfere with the host OS’s operation. However, the standard
conﬁguration of the container shares resources with the host OS and other containers. An attack on the container
can affect the entire system, including the host OS, which is a clear difference from the VM. Against such attacks,
it was conﬁrmed that container type virtualized environments are unsuitable for cyber range exercises. Similarly,
vulnerabilities such as kernel vulnerabilities, host OS conﬁguration, and ﬁles required for container execution, and
attacks against them, should be excluded from container-based cyber range exercises.

However, Docker also has options for limiting shared resources, such as limited memory and storage consumption to a
certain percentage of the host OS. If conﬁgured correctly, it may reduce the impact to an acceptable range on the cyber
range.

7 CONCLUSIONS

While there is a shortage of information security personnel, the cyber range is expected to be highly effective in
education. However, due to cost issues and other factors, this system’s introduction has been limited to a few cases.

Therefore, to disseminate an inexpensive and deployable cyber range using container-based virtualization, we conﬁrmed
the superiority of containers and the performance of reproducing vulnerabilities through comprehensive experiments.
Comparing the performance of containers and VMs in a typical cyber-range environment, the containers consumed
less than 1/10th of the resources of the VMs. Containers can run more virtual instances than VMs on the same host,
building a lower cost cyber range.

We also compared the reproducibility of vulnerabilities between containers and VMs in an exhaustive experiment
using the vulnerability assessment tool and the exploit module, and found a very high similarity J of 0.997. Although
content derived from container characteristics must be excluded, containers have a very high vulnerability reproduction
performance, conﬁrming that container-based virtualization can be fully used in the cyber range.

13

A PREPRINT - NOVEMBER 9, 2020

These contents can be used as a benchmark for scenario development and exercise implementation for container-based
cyber ranges such as CyExec. By the way, CyExec has already conducted the exercise. In the future, we hope to
promote the use of container-based cyber range through scenario development and exercises. We will also promote
research and studies to increase the cyber range’s effectiveness, such as examining the effectiveness of education and
reﬁning exercise scenarios based on behavioral analysis, to broaden the base of security personnel training.

References

[1] Nobuaki Maki and Ryotaro Nakata and Shinichi Toyoda and Yosuke Kasai and Sanggyu Shin and Yoichi Seto.
An Effective Cybersecurity Exercises Platform CyExec and its Training Contents. In International Conference on
Advances in Education and Information Technology(AEIT), 2020.

[2] Beuran Razvan and Pham Cuong and Tang Dat and Chinen Ken-ichi and Tan Yasuo and Shinoda Yoichi. CyTrONE:
An Integrated Cybersecurity Training Framework. In Proceedings of the 3rd International Conference on Informa-
tion Systems Security and Privacy (ICISSP), pages 157-166, 2017.

[3] Irvine Cynthia E and Thompson Michael F and Khosalim Jean. Labtainers: a framework for parameterized

cybersecurity labs using containers. In https://calhoun.nps.edu/handle/10945/56211, 2017.

[4] Gabriele Costa and Enrico Russo and Alessandro Armando. Cyber Range Infrastructure Limitations and Needs of

Tomorrow In arXiv preprint arXiv:2001.06681, 2020.

[5] Stout, William M.S. and Urias, Vincent and Van Leeuwen, Brian P. and Lin, Han Wei. Cyber Range Infrastructure
Limitations and Needs of Tomorrow: A Position Paper In Proposed for presentation at the IEEE International
Carnahan Conference on Security Technology (ICCST), 2018.

[6] Radhwan Y Ameen and Asmaa Y. Hamo. Survey of Server Virtualization In arXiv preprint arXiv:1304.3557, 2013.
[7] Z. Li and M. Kihl and Q. Lu and J. A. Survey of Server Virtualization In 2017 IEEE 31st International Conference

on Advanced Information Networking and Applications (AINA), pages, 955-962, 2017.

[8] Preeth E N and F. J. P. Mulerickal and B. Paul and Y. Sastri. Evaluation of Docker containers based on hardware
utilization In 2015 International Conference on Control Communication Computing India (ICCC), pages, 697-700,
2015.
[9] VMWare,

In
https://www.vmware.com/content/dam/digitalmarketing/vmware/en/pdf/solutions/industry/vmware-cyberrange-
datasheet.pdf, 2019.

Platform - Cyber Range

VMware Digital Learning

Solution

Inc.

[10] Kali.org. Ofﬁcial Kali Linux Docker Images In https://www.kali.org/docs/containers/ofﬁcial-kalilinux-docker-

images/, 2020.

[11] Rapid7. Metasploitable2 In https://docs.rapid7.com/metasploit/metasploitable-2/, 2020.
[12] MITRE. Common Vulnerabilities and Exposures In https://cve.mitre.org/, 2020.
[13] GreenboneNetworks. OpenVAS - Open Vulnerability Assessment Scanner In https://www.openvas.org, 2020.
[14] MITRE. Common Weakness Enumeration In https://cwe.mitre.org/index.html, 2020.
[15] Nmap.org. Port Scanning Techniques In https://nmap.org/book/man-port-scanning-techniques.html, 2020.
[16] Hristo Hristov. Scanning for Vulnerabilities in the Security Mechanisms of the Hosts in the Academic Institutions

and Government Agencies In Mathematical and Software Engineering, Vol.4, No.1, pages 1-6, 2018.

[17] Y. Makino and V. Klyuev. Evaluation of web vulnerability scanners In 2015 IEEE 8th International Conference
on Intelligent Data Acquisition and Advanced Computing Systems: Technology and Applications (IDAACS),pages
399-402, 2015.

14

