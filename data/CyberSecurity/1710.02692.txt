Cloaking the Clock: Emulating Clock Skew in
Controller Area Networks

Sang Uk Sagong∗, Xuhang Ying∗, Andrew Clark†, Linda Bushnell∗, and Radha Poovendran∗
∗ Department of Electrical Engineering, University of Washington, Seattle, WA 98195.
† Department of Electrical and Computer Engineering, Worcester Polytechnic Institute, Worcester, MA 01609.
Email: {sagong, xhying, lb2, rp3 }@uw.edu, aclark@wpi.edu

8
1
0
2

r
a

M
2
2

]

R
C
.
s
c
[

2
v
2
9
6
2
0
.
0
1
7
1
:
v
i
X
r
a

Abstract— Automobiles are equipped with Electronic Control
Units (ECU) that communicate via in-vehicle network protocol
standards such as Controller Area Network (CAN). These pro-
tocols are designed under the assumption that separating in-
vehicle communications from external networks is sufﬁcient for
protection against cyber attacks. This assumption, however, has
been shown to be invalid by recent attacks in which adversaries
were able to inﬁltrate the in-vehicle network. Motivated by these
attacks, intrusion detection systems (IDSs) have been proposed
for in-vehicle networks that attempt to detect attacks by making
use of device ﬁngerprinting using properties such as clock skew
of an ECU. In this paper, we propose the cloaking attack, an
intelligent masquerade attack in which an adversary modiﬁes
the timing of transmitted messages in order to match the clock
skew of a targeted ECU. The attack leverages the fact that,
while the clock skew is a physical property of each ECU that
cannot be changed by the adversary, the estimation of the clock
skew by other ECUs is based on network trafﬁc, which, being
a cyber component only, can be modiﬁed by an adversary. We
implement the proposed cloaking attack and test it on two IDSs,
namely, the current state-of-the-art IDS and a new IDS that we
develop based on the widely-used Network Time Protocol (NTP).
We implement the cloaking attack on two hardware testbeds, a
prototype and a real connected vehicle, and show that it can
always deceive both IDSs. We also introduce a new metric called
the Maximum Slackness Index to quantify the effectiveness of the
cloaking attack even when the adversary is unable to precisely
match the clock skew of the targeted ECU.

Index Terms—CPS Security, Controller Area Network, Intru-

sion Detection System, Masquerade Attack, Clock Skew

I. INTRODUCTION

Contemporary automobiles are equipped with electronic
control units (ECUs) for various functionalities such as vehicle
maneuverability, fuel efﬁciency, and heat, ventilation, and air
conditioning. In order to operate these ECUs properly, the
information among ECUs is exchanged via in-vehicle network
protocols. In-vehicle network protocols are based on standards
such as the Controller Area Network (CAN), which were de-
veloped for closed networks that are isolated from the external
environment. Based on the closed network assumption, in-
vehicle protocols were not designed for cyber security, and in
particular do not provide encryption or message authentication.
Connected vehicles, however, have an increasingly large and
diverse array of outward-facing components in order to pro-
vide safety, navigation, and entertainment, which violate the
assumption of a closed operating environment. These external
interfaces leave connected vehicles vulnerable to attacks in

which an adversary compromises one or more outward-facing
ECUs (e.g., CD players or cellular radio), gains access to
the CAN bus, and then blocks messages sent by other ECUs
(denial-of-service (DoS)) or sends spoofed messages that
claim to be originated from legitimate ECUs such as steering
or engine control (masquerade attack) [1]. Such attacks can
create spurious alarms to the driver, disable brakes, or cause
the vehicle to accelerate uncontrollably, causing serious safety
risks to passengers, pedestrians, and other vehicles [2]–[4].

The cyber vulnerabilities of connected vehicles have moti-
vated development of intrusion detection systems (IDSs) for
in-vehicle networks [3], [5]–[7]. Due to the lack of crypto-
graphic integrity checks, such IDSs rely on physical invariants
of the system. For instance, ECUs typically transmit messages
of ﬁxed length and at ﬁxed frequencies, and the message
contents are not expected to vary drastically over time. In
[3], [6], mechanisms for detecting DoS attacks by exploiting
message periodicity were proposed. Techniques for detecting
spooﬁng attacks based on the low entropy of network trafﬁc
were proposed in [7]. As pointed out in [5], however, entropy-
based IDSs may be ineffective against intelligent adversaries
who mimic the structure and frequency of legitimate trafﬁc.

An IDS for detecting such intelligent attacks was proposed
in [5], based on the following principles. Each ECU on the
CAN bus has a different hardware clock, which has a distinct
clock speed due to variations in the clock’s hardware crystal,
a property referred to as clock skew [8], [9]. Since all process
clocks in an ECU are derived from the hardware clock, they
are affected by the clock skew as a consequence. In particular,
the inter-departure times of messages that are periodically
transmitted by an ECU will be impacted by its clock skew. If a
naive adversary injects the spoofed periodic message from an
ECU that is different from the spoofed ECU, the difference
in clock skew will change the inter-departure times. Hence,
an ECU that receives periodically transmitted messages can
estimate the clock skew of the transmitting ECU based on the
message inter-arrival times. The IDS located at the receiving
ECU then detects an attack when a sudden change in estimated
clock skew occurs (Fig. 1a).

In this paper, we analyze intrusion detection systems that
make use of clock skew for detection1. Our key observation

1In the remainder of the paper, we will refer to this class of intrusion

detection systems as IDS or detectors.

 
 
 
 
 
 
(a)

(b)

Fig. 1: Clock skew estimated by the IDS at the receiver. (a)
An IDS tracks the clock skew of the transmitter and detects
deviations due to naive masquerade attacks. (b) An intelligent
masquerading adversary adds a delay ∆T to message inter-
departure times, so as to emulate the clock skew of the targeted
ECU and bypass the IDS.

is that an intelligent adversary who realizes that the IDS at
the receiver ECU computes clock skew using message inter-
arrival times can manipulate the inter-departure times to match
the clock skew of the targeted ECU and avoid detection. We
refer to this intelligent masquerade attack as the cloaking
attack, as illustrated in Fig. 1b. These results show that,
while physical system properties such as clock skew may be
helpful in providing security assurances and detecting attacks,
intelligent adversaries may still evade detection when physical
properties are ﬁltered or mediated through compromised cyber
components. We make the following speciﬁc contributions:

• We propose the cloaking attack, in which an adversary
adjusts message timing and cloaks its clock to match the
clock of the targeted ECU in order to avoid detection.
• We analyze the effectiveness of the proposed cloaking
attack against two IDSs, including a state-of-the-art IDS
and a modiﬁed IDS based on the Network Time Protocol
(NTP).

• We introduce a new metric called Maximum Slackness
Index (MSI) to quantify the effectiveness of an IDS in
detecting masquerade attacks.

• We evaluate our attack on hardware testbeds, including
a CAN bus prototype and a real vehicle (the University
of Washington EcoCar). Our hardware evaluations show
that the cloaking attack is successful against both IDSs
during all hardware trials. We show that the NTP-based
IDS has a smaller MSI than the state-of-the-art IDS, and
hence is more effective at detecting masquerade attacks.
The rest of the paper is organized as follows. Section II
explains the adversary model as well as clock-related concepts,
and reviews the state-of-the-art IDS. The NTP-based IDS is
introduced in Section III, and the cloaking attack is proposed
in Section IV. Section V presents the experimental results.
Section VI presents our conclusions and future work.

II. OVERVIEW OF CAN AND IDS
Below, we review the CAN protocol and needed clock re-
lated concepts. We then present the adversary model, introduce
attack scenarios, and review the state-of-the-art IDS [5].

Fig. 2: Structure of CAN frame. Each frame consists of Start
of Frame (SOF) ﬁeld, Arbitration ﬁeld, Control ﬁeld, Data
ﬁeld, CRC ﬁeld, ACK ﬁeld, and End of Frame (EOF) ﬁeld.

A. CAN Background

The CAN protocol [10], [11] is one of the most widely
used in-vehicle networking standards. CAN is a broadcast bus
network, which means that ECUs on the same bus are able to
transmit any messages to any ECU and observe all ongoing
transmissions. The CAN frame structure is illustrated in Fig. 2.
It does not include encryption, authentication, or timestamps.
The CAN bus acts as a logical AND gate, that is, if two
ECUs transmit simultaneously, the message with a smaller ID
(higher priority) will be transmitted, through a process known
as arbitration. For example, if messages 0x100 and 0x010 are
transmitted simultaneously, the ECU that attempts to transmit
its message ID 0x100 one bit at a time (starting from the most
signiﬁcant bit) will observe a 0 bit on the CAN bus although it
had transmitted a 1, recognize that another ECU is transmitting
a higher priority message, and stop its transmission.

B. Clock-Related Concepts

In this section, we follow the Network Time Protocol (NTP)
deﬁnitions of clocks [8], [9], [12]. Let us ﬁrst deﬁne Ctrue as
the “true” clock that runs at a constant rate, i.e., Ctrue(t) = t.
Let CA(t) denote the time kept by clock A. The clock offset
of CA, denoted as OA(t), is the difference between the time
reported by CA and the “true” time, i.e.,

OA(t) = CA(t) − Ctrue(t).

(1)

The frequency of CA at
A(t). The
clock skew of CA, denoted as SA(t), is the difference in the
frequencies (or ﬁrst derivatives) of CA and Ctrue, i.e.,

time t is given by C (cid:48)

SA(t) = C (cid:48)

A(t) − C (cid:48)

true(t).

(2)

A positive clock skew means that CA runs faster than the
true clock, while a negative clock skew implies that CA runs
slower than the true clock. The unit of skew is microseconds
per second (µs/s) or parts per million (ppm). For example, if
CA is faster by 5µs every 10ms according to Ctrue, then its
skew relative to Ctrue is 500ppm.

In a vehicle, ECUs typically have constant clock skews [5].
Suppose that CA has a constant skew SA. If ∆t is the time
duration measured by Ctrue, then the amount of time that
has passed according to CA is ∆tA = (1 + SA) · ∆t, and
∆t = ∆tA/(1 + SA). Similarly, if there is a second non-true
clock B with a constant skew SB that reports a time duration
of ∆tB, we have ∆tB = (1 + SB) · ∆t. Then the skew of CB
relative to CA, denoted as SBA, is given by

SBA =

∆tB − ∆tA
∆tA

=

SB − SA
1 + SA

(3)

Accumulated OffsetObservation	time	of	IDSExpectedSlope (skew) deviationNaïve masqueradeattack startsObservation	time	of	IDSIntelligent masquerade(cloaking) attack starts∆TAccumulated OffsetSOFMessage IDRTRDLCDataCRCEOFACK04 bits8-64 bits15 bits7 bits of 11DELCRCDELACKArbitrationControlDataCRCACKEOFSOFIDERB011bits01bit1bit11bitFig. 3: Illustration of masquerade attack. In this example, ECU
A is fully compromised by the strong attacker, and ECU B is
weakly compromised by the weak attacker. Before the attack,
ECU B transmits message 0x11 every T sec. At t = tattack,
the weak attacker suspends ECU B’s transmission of message
0x11, and the strong attacker starts fabricating and injecting
spoofed messages with ID=0x11 every T sec.

and the relationship between SBA and SAB, i.e., the skew of
CA relative to CB, is given by

SAB =

−SBA
1 + SBA

.

(4)

When such a “true” clock does not exist, a non-true clock is
chosen as the reference clock. Then relative offset and relative
skew are deﬁned for other clocks with respect to the reference
clock. Two clocks are said to be synchronized at a particular
moment if both relative offset and relative skew are zero.

C. Adversary Model and Attack Scenarios

Adversaries can compromise one or more ECUs in a vehicle
physically or remotely by exploiting various attack surfaces
[1]. As in [5], we consider two types of attackers with different
capabilities: 1) weak attacker, who is assumed to be able to
suspend the transmission of messages of the weakly compro-
mised ECU, but cannot inject any messages, and 2) strong
attacker, who is assumed to be able to suspend messages of the
fully compromised ECU and inject arbitrary attack messages.
The two types of attackers naturally lead to three attack
scenarios: suspension, fabrication, and masquerade attacks. In
a suspension attack, a weakly compromised ECU is prevented
from transmitting certain messages, whereas in a fabrication
attack, a fully compromised ECU injects fabricated messages
with legitimate IDs. Since most in-vehicle CAN messages are
periodic, the above two attacks would signiﬁcantly change the
frequency of certain messages, and thus can be easily detected
by state-of-the-art IDSs [3], [6], [7], [13].

Masquerade attacks combine suspension and fabrication
attacks. In a masquerade attack, two ECUs A and B are com-
promised by strong and weak attackers respectively (Fig. 3).
The goal of the attack is to impersonate ECU B by injecting
periodic messages with spoofed IDs. During the attack, the
weak attacker who has compromised ECU B suspends certain
messages from ECU B, while the strong attacker uses the fully
compromised ECU A to inject messages claiming to originate
from ECU B. It has been shown that the masquerade attack
can potentially cause severe problems to the vehicle [4], [14].

Fig. 4: Timing analysis of message arrivals in CAN.

Although the previously mentioned IDSs actively monitor
the bus trafﬁc, the masquerade attack does not change the
frequency of the spoofed message, and thus is more difﬁcult
to detect than the suspension and fabrication attacks.

D. Clock-Based Detection

In-vehicle ECUs operate according to their local clocks
with distinct skews, which can be exploited for ﬁngerprinting.
Methods proposed in [15]–[17], however, are not applicable
to CAN since there are no transmit timestamps in CAN mes-
sages. To bypass this issue, the state-of-the-art IDS in [5] uses
message periodicity to extract and estimate the transmitters’
clock skews for identiﬁcation. We now review the IDS of [5].
1) Timing model for CAN: Fig. 4 illustrates the timing of a
periodic message from the perspective of a receiving ECU R.
Since only R’s timestamps are available, we consider its clock
as the reference, and refer to the relative offset and relative
skew of the transmitter’s clock as offset and skew, respectively.
Suppose that the transmitter transmits a message every T
sec according to its local clock. In the ideal case where the
two clocks are synchronized, message i will be transmitted at
ti = iT in R’s clock2. Due to clock skew, however, the actual
transmission time is ti = iT +Oi in R’s clock, where Oi is the
accumulated offset since message 0. After a network delay of
di (due to message transmission, propagation and reception),
the message arrives at the incoming buffer of R, and has a
timestamp ai = iT + Oi + di + ni, where ni is zero-mean
noise introduced by R’s timestamp quantization process [17].
Denote the inter-arrival time between message (i − 1) and i
as Trx,i, which is given by

Trx,i = T + (Oi − Oi−1) + (di − di−1) + (ni − ni−1)

= T + ∆Oi + ∆di + ∆ni,

where ∆Oi is the offset in period i, and ∆di and ∆ni are the
differences in network delay and quantization noise, respec-
tively, between periods i and (i − 1). Since messages with the
same ID typically have the same length, it is reasonable to
assume E[∆di] = 0. Since E[ni] = 0 and hence E[∆ni] = 0,
we have E[Trx,i] = T + E[∆Oi].

2Strictly speaking, ti is the time when the transmitter puts the ﬁrst bit of

message i into the outgoing buffer.

ECU	AECU	BECU	C(Strong)(Weak)Without attackC111B0C111B0C111B0C111B0ECU	AECU	B11With attackC111B0C111B0C111B0TimeCAN Bus𝑡"##"$%TXRXIdeal𝑡"=0𝑡%=𝑇𝑡’=2𝑇𝑡)=3𝑇Actual𝑡%=𝑇+𝑂%𝑡’=2𝑇+𝑂’	𝑡)=3𝑇+𝑂)𝑎"=𝑂"+𝑑"+𝑛"𝑎%=𝑇+𝑂%+	𝑑%+𝑛%𝑎’=2𝑇+𝑂’+𝑑’+𝑛’𝑎)=3𝑇+𝑂)+𝑑)+𝑛)𝑇12𝑇+Δ𝑂%+Δ𝑑%+Δ𝑛%𝑇+Δ𝑂’+Δ𝑑’+Δ𝑛’𝑇+Δ𝑂)+Δ𝑑)+Δ𝑛)Msg 0Msg 1Msg 2Msg 3𝑡"=𝑂"……2) Clock Skew Detector : To estimate clock skew, incoming
messages are processed in batches of size N (e.g., 20), and
computes the “average offset” in the k-th batch,

Oavg[k] =

1
N − 1

N
(cid:88)

i=2

[ai − (a1 + (i − 1)µT [k − 1])] ,

(5)

where µT [k−1] is the average inter-arrival time of the previous
batch, and the quantity in the square brackets is the difference
between the measured arrival time and the estimated arrival
time for the i-th message.

When an average offset value is computed from the current

batch, its absolute value is added to the accumulated offset,

Oacc[k] = Oacc[k − 1] + |Oavg[k]|.

(6)

It is then modeled as Oacc[k] = S[k] · t[k] + e[k], where S[k]
is the regression parameter, t[k] the elapsed time, and e[k] the
identiﬁcation error. To estimate the unknown parameter S, the
Recursive Least Squares (RLS) algorithm is adopted, which
minimizes the sum of squares of the modeling errors [18].

identiﬁcation errors. Hence,

In a naive masquerade attack,

the impersonating ECU
has a clock skew different from the targeted ECU’s, which
would lead to signiﬁcant
the
identiﬁcation error is considered as an indicator of whether
an attack is taking place. The IDS tracks the normal clock
behavior for messages with the target ID by tracking the
mean and variance of the errors (denoted as e), µe and σ2
e .
To be robust against noise, µe and σ2
e are updated only if
|(e − µe)/(σe)| < γ, where γ is a given update threshold.
For detection, the Cumulative Sum (CUSUM) method, which
derives the cumulative sums of deviations from the norm
behavior [19], is implemented. Letting θe = e−µe
, the upper
σe
and lower control limits L+ and L− are updated for each new
error sample as:

L+ = max(0, L+ + θe − κ), L− = max(0, L− − θe − κ),

where κ is a sensitivity parameter. If either control
limit
exceeds a detection threshold Γ, a sudden shift is detected, and
the IDS declares an intrusion. The values of γ, κ, and Γ chosen
in [5] are 3, 5, and 5, respectively. A more detailed workﬂow
of the state-of-the-art IDS is provided in Appendix A.

3) Correlation Detector: It is pointed out in [5] that if two
messages are from the same transmitter, their average offsets
are likely to be equivalent and show high correlation (i.e., the
correlation coefﬁcient ρ is close to 1), whereas two messages
from different ECUs would have low correlation. Hence, the
correlation detector keeps track of the correlation of two highly
correlated messages, and declares a masquerade attack if ρ
is less than a detection threshold (e.g., 0.8). As a result, in
cases where the impersonating ECU happens to have a similar
clock skew with the targeted ECU, the masquerade attack may
bypass the clock skew detector, but would still be detected
by the correlation detector. It is important to note that the
clock skew detector applies to any periodic message, but the
correlation detector is only applicable to a pair of messages
with highly correlated average offsets.

We will use analytical and experimental analyses in Sections
IV and V to show that not all pairs of messages from the same
transmitter show high correlation. Speciﬁcally, we ﬁnd that
high correlation is more likely to exist between two messages
that are consecutively transmitted by the same ECU and also
consecutively received by the receiver.

III. NTP-BASED IDS

In this section, we present a modiﬁed detector that computes
clock offsets and skews according to the NTP speciﬁcations,
which is referred to as the NTP-based IDS. The main differ-
ence between the two detectors is the computation of the clock
skew, described below.

The motivation for our NTP-based IDS is two-fold. First,
we note that the the metric in Eq. (5) is not consistent with the
NTP deﬁnition in Eq. (1), since it does not calculate the time
difference between the transmitter’s clock and the reference
clock. In addition, it is assumed that Oi is a random variable
and E[∆Oi] = 0, which implies that E[Oi] = E[Oj] for i (cid:54)= j,
which does not hold in general since offsets accumulate over
time (e.g., if i (cid:29) j, E[Oi] (cid:29) E[Oj]). Our second motivation
is the widespread use and acceptance of NTP as a timing
mechanism for real-time systems, which raises the question
of whether NTP can be used for intrusion detection as well.

A. Clock Skew Estimation in NTP

In the NTP-based IDS, the accumulated offset up to message
i in Fig. 4 is modeled as a random variable, Oi = i · O + (cid:15)i,
where O is the offset in each period T given the constant
clock skew, and (cid:15)i is the offset deviation due to ECU jitters.
We assume that E[(cid:15)i] = 0 and {(cid:15)i} are independent of each
other. Hence, the expected accumulated offset is E[Oi] = i·O,
which increases linearly as more messages are transmitted.

Consider two consecutively received messages with time-
stamps ai−1 and ai. From the receiver’s perspective, the mes-
sage period is T in the transmitter’s clock, which corresponds
to Trx,i = ai −ai−1 (i.e., the observed period) in the receiver’s
clock. By the deﬁnition in Eq. (1), the observed offset is

ˆOi = T − (ai − ai−1) = −(O + ∆(cid:15)i + ∆di + ∆ni),

where ∆(cid:15)i = (cid:15)i − (cid:15)i−1. A batch of N messages is used to
compute the average offset of the k-th batch Oavg[k], i.e.,

Oavg[k] =

1
N

N
(cid:88)

ˆOi =

N
(cid:88)

[T −(ai−ai−1)] = T −

1
N

aN − a0
N

,

i=1

i=1

(7)
where a0 is the timestamp of the last message in the previous
batch. The accumulated offset up to the last message of the
k-th batch is given by:

Oacc[k] = Oacc[k − 1] + N · Oavg[k].

(8)

Note that the original value of Oavg[k] is used, instead of
the absolute value as in the state-of-the-art IDS. The other
components of the NTP-based IDS remains the same as the
state-of-the-art IDS. More details are available in Appendix A.

B. Estimation Consistency

As a physical property of an ECU, clock skew is considered
to be stable over time, and thus the estimated values should be
consistent, across 1) different batch sizes used by an IDS, 2)
different portions of the same trace, and 3) different traces of
the same ECU. Hence, we use the Toyota Camry dataset [20]
that was used in [5] to compare the NTP-based IDS against
the state-of-the-art IDS in terms of estimation consistency.

Fig. 5 illustrates the accumulated offsets estimated by the
two CDIS’s with different batch sizes3. Signiﬁcant differences
in slopes for the same message are observed for the state-
of-the-art IDS. For example, the estimated clock skew (based
on the end point) of message 0x020 is around 273 ppm with
N = 20, but dropped to around 151 ppm with N = 30. In
contrast, the NTP-based IDS provides consistent estimation.

To further quantify estimation consistency, we consider the
following three cases: 1) use the same portion of the same
trace, and vary N from 20 to 100 with a step of 20, 2) set N =
20, and use different portions of the same trace by omitting
the ﬁrst m messages, where m is varied from 1 to 19, and
3) set N = 20, and use 14 different traces from the Toyota
dataset. The standard deviation (σ) of estimated clock skews
are adopted as the metric, and a smaller σ value implies more
consistent estimation. As shown in Table I, the NTP-based
IDS has a signiﬁcantly smaller σ than the state-of-the-art IDS
for all messages in all cases.

TABLE I: Standard deviations (σ1, σ2, σ3) of clock skews
estimated by IDS in three different cases. The NTP-based
IDS has a signiﬁcantly smaller σ than the state-of-the-art IDS,
which demonstrates its consistency in clock skew estimation.

Message ID

0x020
0x0B2
0x223
0x224
0x2C1
0x2C4

State-of-the-art IDS
σ2
12.0589
11.7543
16.2060
17.0442
7.9963
13.0896

σ1
92.3682
94.4480
41.6631
29.0736
85.3753
116.5630

σ3
20.1727
19.4549
25.4885
32.6059
26.2618
53.7820

NTP-based IDS
σ2
0.2000
0.2045
0.4429
0.5491
1.2191
1.1599

σ3
1.7716
1.7929
1.6437
2.3660
3.2977
3.3602

σ1
0.3706
0.4252
0.3083
0.8348
0.0866
1.0763

IV. PROPOSED CLOAKING ATTACK

In this section, we propose the cloaking attack, an intel-
ligent masquerade attack, in which the adversary adjusts the
inter-departure time of spoofed messages to manipulate the
estimated clock skew as well as correlation to bypass an IDS.

A. Cloaking Attack on Clock Skew Detector

Consider a message transmitted by the targeted ECU B
every T sec (e.g., 20ms) in its own clock, which corresponds to
every ˆT = T /(1+SB) sec in the receiver R’s clock, where SB
is B’s clock skew. For the ease of discussion, we ignore offset
deviations and the noise in arrival timestamps due to network

3Due to the lack of ground truth, the authors in [5] empirically identiﬁed
that 0x020, 0x0B2, 0x223 and 0x224 are transmitted by two different ECUs.
However, based on our NTP-based clock skew estimation results, we believe
that the four messages come from the same ECU.

(a) State-of-the-art IDS, N = 20 (b) State-of-the-art IDS, N = 30

(c) NTP-based IDS, N = 20

(d) NTP-based IDS, N = 30

Fig. 5: Accumulated offsets provided by the state-of-the-art
IDS and the NTP-based IDS with batch sizes of 20 and 30. The
same portion of the data trace (with ID=25) from the Toyota
dataset is used. Signiﬁcant differences in slopes (i.e., estimated
clock skew) are observed for the same message using the state-
of-the-art IDS, whereas the clock skew estimated by the NTP-
based IDS is almost identical with different batch sizes.

delay and quantization. Then B’s clock skew as estimated by
R is given by ˆS = (T − ˆT )/ ˆT = SB.

In the masquerade attack, the weak attacker prevents the
targeted message from being transmitted by ECU B. The
strong attacker, which controls ECU A, transmits the false
message every T seconds, as measured by CA (Fig. 3). Hence,
ECU R receives the message every ˆT (cid:48) = T /(1 + SA) seconds,
as measured by CR, where SA is the clock skew between CR
and CA. The clock skew measured by ECU R for the messages
injected by the attacker will then be ˆS(cid:48) = SA. Therefore, if
SA (cid:54)= SB, then the IDS will detect a change in the clock skew
after the adversary begins transmitting.

The insight underlying our attack is that while the clock
skew is a physical property, clock skew estimation in any IDS
is based entirely on message inter-arrival time, which can be
easily manipulated by the transmitter (i.e., the strong attacker
controlling ECU A) adjusting the message inter-departure
time. Effectively, the adversary cloaks the skew of its hardware
clock, thus motivating the term cloaking attack. Under the
cloaking attack, instead of transmitting every T seconds, the
attacker-controlled ECU A transmits every ˜T = T + ∆T
seconds, in order to match the clock skew observed at R.

The choice of ∆T is discussed as follows. Under the

cloaking attack, the inter-arrival time observed by R is
˜T
1 + SA

T + ∆T
1 + SA

ˆT (cid:48)(cid:48) =

=

and the transmitter’s clock skew estimated by R is
T − ˆT (cid:48)(cid:48)
ˆT (cid:48)(cid:48)

SA · T − ∆T
T + ∆T

ˆS(cid:48)(cid:48) =

=

.

(9)

050100150Elapsed time (second)0102030405060Accumulated offset (ms)0x020 by A0x0B2 by A0x223 by B0x224 by B0x2C1 by C0x2C4 by D050100150Elapsed time (second)0102030405060Accumulated offset (ms)0x020 by A0x0B2 by A0x223 by B0x224 by B0x2C1 by C0x2C4 by D050100150Elapsed time (second)-400-300-200-1000Accumulated offset (ms)0x020 by A0x0B2 by A0x223 by B0x224 by B0x2C1 by C0x2C4 by D050100150Elapsed time (second)-400-300-200-1000Accumulated offset (ms)0x020 by A0x0B2 by A0x223 by B0x224 by B0x2C1 by C0x2C4 by DHence, to bypass the IDS, the adversary needs to choose ∆T
such that ˆS(cid:48)(cid:48) = ˆS, or equivalently ˆT (cid:48)(cid:48) = ˆT , which means

∆T =

(SA − SB)
1 + SB

· T = SAB · T =

−SBA
1 + SBA

· T,

(10)

where SAB is A’s clock skew relative to B’s clock, and the
last two equalities are due to Eq. (3) and Eq. (4), respectively.
Therefore, the message inter-departure time ˜T would be

˜T = T + ∆T = T −

SBA
1 + SBA

T =

T
1 + SBA

,

which is the period of the message from B (i.e., weak attacker)
measured by the local clock of A (i.e., strong attacker).

To summarize, the cloaking attack is performed as follows.
After the adversary compromises two ECUs as strong and
weaker attackers, the strong attacker estimates the period of
the target message ˜T as measured by its local clock. During the
masquerade attack, the strong attacker transmits the spoofed
message every ˜T sec. While the preceding analysis ignores
the noise present in the system, our results in Section V show
that the cloaking attack is effective in a realistic environment.

B. Maximum Slackness Index (MSI)

In practice, the adversary will be unable to precisely match
the clock skew of the targeted ECU due to hardware limita-
tions. Deviations between the clock skew of the attacker and
the targeted ECU, however, may still be mistaken for random
delays and quantization errors by the IDS. These sources of
randomness create an interval of ∆T that an adversary can
introduce while remaining undetected; the more effective the
detector, the smaller the interval of ∆T will be. We introduce
a metric that formalizes this notion as follows. We ﬁrst let
Ps(∆T ) denote the probability of a successful cloaking attack
when the added delay is ∆T . We deﬁne the upper and lower
limits of ∆T for a successful attack as

(∆T )max((cid:15)) = max {∆T : Ps(∆T ) > 1 − (cid:15)}
(∆T )min((cid:15)) = min {∆T : Ps(∆T ) > 1 − (cid:15)}

We deﬁne the (cid:15)-Maximum Slackness Index ((cid:15)-MSI) of
the attacker as (cid:15)-MSI = (∆T )max((cid:15)) − (∆T )min((cid:15)). The
normalized (cid:15)-MSI is deﬁned as the ratio between of (cid:15)-MSI
(in µs) and the message period (in sec), and its unit is ppm.
Intuitively, a smaller value of (cid:15)-MSI signiﬁes a more effective
detector and less freedom for the attacker, since the adversary’s
clock skew must closely match the targeted ECU’s in order to
remain undetected.

C. Cloaking Attack on Correlation Detector

If the spoofed message has a sibling message with highly
correlated offsets, the correlation detector can be deployed as
the secondary countermeasure. Before introducing the cloak-
ing attack on the correlation detector, let us discuss why two
messages consecutively transmitted and consecutively received
are more likely to have high correlation in average offsets. Due
to space constraints, we focus on the NTP-based IDS, but the
same logic is applicable to the state-of-the-art IDS.

Denote the i-th message in the k-th batch for messages v
and w as vk,i and wk,i, which are transmitted at t(v)
k,i and t(w)
k,i ,
respectively.4 Without loss of generality, suppose that wk,i is
transmitted right after vk,i. Let ∆t be the transmission duration
of each message v, which is constant, given the ﬁxed message
length and CAN bus speed. Hence, we have t(w)
k,i + ∆t.
Let us consider the ﬁrst case where vk,i and wk,i are
received consecutively at a(v)
k,i and a(w)
k,i , which means no other
messages with higher priority IDs are received between a(v)
k,i
and a(w)
k,i due to arbitration. For simplicity, we assume constant
network delays for both messages (denoted as dv and dw,
respectively), and ignore quantization noise at the receiver.
Therefore we have a(w)

k,i = t(v)

k,i + ∆t + (dw − dv).

k,i = a(v)

In the NTP-based IDS, the estimated average offset for

messages v and w in the k-th batch are

O(v)

avg[k] = T −

(cid:16)

1
N

= −O(v) −

O(w)

avg[k] = T −

(cid:16)

1
N

(cid:17)

k,0

a(v)
k,N − a(v)
(cid:16)
1
N
k,N − a(w)
a(w)

k,0

k,N − (cid:15)(v)
(cid:15)(v)

k,0
(cid:17)

(cid:17)

= O(v)

avg[k].

(11)

avg = O(v)

avg and O(w)

avg[k] and O(w)

Since O(v)
avg[k] are the k-th realizations of the ran-
dom variables O(v)
avg, respectively, Eq. (11) implies
O(w)
avg, and thus their correlation coefﬁcient ρ is as high
as 1. In general, as along as the two messages are received with
a constant delay (consecutive reception is a special case), they
will have high correlation. In practice, however, the correlation
would slightly decrease due to network delay variations and
quantization noise at the receiver.

Next we examine the second case in which messages with
higher priority IDs are received in between the two messages.
Let the arbitration delay be dk,i ≥ 0, and thus a(w)
k,i +
∆t + (dw − dv) + dk,i. Then we have

k,i = a(v)

O(w)

avg[k] = O(v)

avg[k] −

1
N

(dk,N − dk,0),

(12)

where the second term may be considered as the k-th realiza-
avg and O(w)
tion of a random variable D, independent of O(v)
avg.
Therefore, we have O(w)

(cid:16)

ρ

O(v)

avg, O(w)
avg

(cid:17)

=

avg = O(v)
avg + D, and
(cid:113)

V ar(O(v)
avg)

(cid:113)

V ar(O(v)

avg) + V ar(D)

< 1.

As a result, depending on the variance of arbitration delay, the
correlation in the second case may be much smaller than 1.

On the other hand, if two messages are transmitted from dif-
(cid:17)
.

ferent ECUs, we have O(w)
Since {(cid:15)(v)
pendent of O(v)
supported by our hardware evaluation (Section V-D).

k,N − (cid:15)(w)
(cid:15)(w)
avg[k] = −O(w) − 1
N
k,i } are independent, O(w)
avg is also inde-
avg, which implies ρ ≈ 0. The above analysis is

k,i } and {(cid:15)(w)

k,0

(cid:16)

4This is another requirement for two messages to be highly correlated: the
two consecutively transmitted messages needs to be processed as simultane-
ously as the i-th message in the k-th batch.

Hence,

in order to thwart

the correlation detector,

the
attacker adopts the following strategy. Before executing the
attack, the attacker observes the targeted message over a period
of time and identiﬁes any sibling messages. To launch the
cloaking attack, the strong attacker-controlled ECU A begins
transmitting the targeted message immediately after the sibling
message is completed. Since the transmission from ECU A
begins once the sibling message transmission ends, the average
offset of the targeted and sibling messages will be equivalent
and show high correlation, as described by Eq. (11). Note that
Eq. (11) also implies that their accumulated offsets as well as
estimated clock skews will be equivalent, thus bypassing the
clock skew detector at the same time.

V. EVALUATION

In this section, we evaluate the performance of the proposed
cloaking attack on two CAN bus testbeds, and demonstrate
that the cloaking attack is able to bypass both the state-of-the-
art and the NTP-based IDSs. We ﬁrst describe our testbeds,
followed by an illustration of a single trial run of our proposed
attack. We then give detailed results for the cloaking attack
against both the clock skew and correlation detectors.

A. Testbeds

We built two CAN bus testbeds: a CAN bus prototype and
a CAN testbed on a real vehicle (University of Washington
(UW) EcoCar5 [21]). Compared with the prototype with three
ECUs, the EcoCar testbed hosts 18 stock ECUs and one ECU
added by researchers. There are a total of 89 messages with
different IDs, and at least 2500 messages are transmitted every
second. The EcoCar testbed provides a real CAN environment
to evaluate and demonstrate the proposed cloaking attack.

1) CAN Bus Prototype: As shown in Fig. 6a, our CAN bus
prototype consists of three ECUs. Each ECU is composed of
an Arduino UNO board and a Sparkfun CAN bus shield. The
CAN bus shield uses a Microchip MCP2515 CAN controller, a
Microchip MCP2551 CAN transceiver, and a 120Ω terminator
resistor. The bus speed of the prototype is set to 500Kbps
as in typical CAN buses. ECU 1 is the receiving ECU that
implements the IDS. ECU 2 is the targeted ECU controlled
transmits messages 0x11 every
by the weak attacker that
100ms (i.e., 10Hz). ECU 3 is the strong attacker that aims
to impersonate ECU 2 in a masquerade or cloaking attack.

2) EcoCar CAN testbed: As shown in Fig. 6b, the CAN
bus prototype is connected to the in-vehicle CAN bus of the
EcoCar via the On-Board Diagnostics (OBD-II) port to build
the EcoCar testbed. During our experiments, the EcoCar is in
park mode in an isolated and controlled environment, but all
ECUs are functional and actively exchange CAN messages.

Due to the large CAN trafﬁc and limited computing capabil-
ity, the Arduino-based ECU is not able to capture all messages.
Hence, we build a fourth ECU that consists of a Raspberry Pi
3 and a PiCAN 2 board (which has the same CAN controller

5The EcoCar was originally a 2016 Cherolet Camaro donated by General
Motors as part of a competition. Researchers at UW later converted into a
hybrid electric vehicle to develop next-generation vehicle technologies.

(a) CAN bus prototype

(b) EcoCar testbed

Fig. 6: CAN bus testbeds. The CAN bus prototype is con-
nected to the CAN bus inside the EcoCar via the OBD-II port
to build the EcoCar testbed.

and transceiver as in the CAN bus shield) as the receiving
ECU. A stock ECU is considered as the targeted ECU (the
weak attacker) which transmits message 0x184 every 100 ms
(i.e., 10Hz), and the same Arduino-based ECU 3 is used as
the strong attacker that injects spoofed messages.

B. Example of NTP-based IDS

For illustration, we ﬁrst describe a single execution of the
masquerade attack and the behavior of the NTP-based IDS.
We compare the masquerade attack without cloaking and our
proposed cloaking attack. In the example, we set the update
threshold γ to 4 and the detection threshold Γ to 5 for the NTP-
based IDS. For data collected from the CAN bus prototype,
the sensitivity parameter κ is set to 5.

The IDS ﬁrst tracks the clock skew of message 0x11 from
the targeted ECU for 1000 seconds, before the attack happens.
Then the IDS is fed with the timestamps of attack messages.
For the masquerade attack, the strong attacker transmits every
T = 100 ms according to its local clock. For the cloaking
attack, the strong attacker ﬁrst observes the inter-arrival time
of message 0x11 to be around 100040 µs, and then adjusts
the message inter-departure time to be ˜T = 100040 µs, where
∆T = 40 µs.

As shown in Fig. 7, when the masquerade attack happens,
the average offset immediately jumps from around −12 µs to
around 28 µs (Fig. 7a), and the slope changes from −118.9
ppm to 275.3 ppm (Fig. 7b), because of the very distinct clock
skews between targeted and masquerading ECUs. As a result,
such deviations add up and cause the control limits of the IDS
to increase (Fig. 7c). In contrast, under the cloaking attack, the
average offset stays almost the same as the original curve, as
does the slope of the accumulated offset. Since the deviations
are so small, the control limits are always zero, and thus the
IDS is unable to detect the cloaking attack (Fig. 7d). Tests on
the EcoCar testbed lead to similar observations.

C. Performance of Cloaking Attack on Clock Skew Detector

When launching the cloaking attack, the impersonating ECU
(Arduino-based) transmits every 100040µs (∆T = 40µs) on
the CAN bus prototype to spoof the 10Hz message 0x11, and

ECU	1ECU	2ECU	3ECU 1ECU 2ECU 3ECU(IDS)LaptopConnection to OBD-II port in the backConnection to OBD-II port in the frontCAN bus prototype(a) Average offset

(b) Accumulated offset

(a) CAN prototype,
state-of-the-art

(b) EcoCar testbed,
state-of-the-art

(c) Control limits under the
masquerade attack

(d) Control limits under the
cloaking attack

(c) CAN prototype, NTP-based

(d) EcoCar testbed, NTP-based

Fig. 7: Behavior of the NTP-based IDS under the masquerade
and cloaking attacks on the CAN bus prototype, in terms of
average offset, accumulated offset and control limits. In the
masquerade attack, the accumulated offset grows over time
and is detected by both IDS. Under the cloaking attack, the
clock skews before and after the attack are indistinguishable.

Fig. 8: Successful attack probability on the state-of-the-art IDS
and the NTP-based IDS on the CAN bus prototype and EcoCar
testbed with message period 100ms. For the value of ∆T =
40µs achieved in our hardware experiments (red dashed line),
the attack was successful in all test cases. The width of each
curve is equal to the (cid:15)-MSI for the given detector.

every 99971µs (∆T = −29µs) to spoof the 10Hz message
0x184 on the EcoCar testbed. We collected a total of 3.7 hours
and 8.5 hours of attack data from the CAN bus prototype and
the EcoCar testbed, respectively.

To simulate the cloaking attack, the IDS is fed with 1000
batches of normal data, followed by nattack batches of attack
data in each experiment. We assume perfect timing for the
cloaking attack, i.e., the ﬁrst attack message is received at the
next expected time instant of the targeted message. The impact
of mistiming on the cloaking attack is studied in Appendix B.
An attack is successful if it is undetected by the IDS, and
failed otherwise. A total of 100 non-overlapping segments of
size nattack are prepared from the attack data to simulate 100
independent attacks. To measure the attack performance, we
compute successful attack probability, denoted as Ps, which is
the percentage of experiments where the attack is successful.
We consider the state-of-the-art IDS and the NTP-based IDS
with batch size equal to 20. For the state-of-the-art IDS, the
update threshold γ is set to 3 and the detection threshold Γ is
5 [5]. For the NTP-based IDS, we use γ = 4 and Γ = 5. For
the data collected from the CAN bus prototype, the sensitivity
parameter κ is set to 5 for both IDSs. It is set to 8 for the
data collected from the EcoCar testbed to avoid false alarms.
For the value of ∆T achieved in our evaluation, the prob-
ability of successful attack was 1 against both the NTP-based
IDS and the state-of-the-art IDS (Fig. 8, dashed line). In order
to gain additional insight into the performance of each IDS
under cloaking attack, we generated additional data sets by
adding different values of ∆T to the message inter-arrival
times, and then analyzed the new datasets using both IDSs.

On the CAN bus prototype, with nattack = 20 and (cid:15) = 0.05,
the (cid:15)-MSI value for the state-of-the-art IDS is 22.5µs (Fig. 8a),
but only 11.5µs for the NTP-based IDS (Fig. 8c). Hence, it
is much easier for the cloaking attack to bypass the state-
of-the-art IDS than the NTP-based IDS. We also found that
increasing nattack has little impact on (cid:15)-MSI for the state-
of-the-art IDS, which is 20.5µs for nattack = 40 or 60, but
signiﬁcantly impacts (cid:15)-MSI of the NTP-based IDS, which
varies from 11.5µs to 2.5µs as nattack is increased from
20 to 60. This result suggests that the performance of the
NTP-based IDS improves over the attack duration. Another
interesting observation is that the Ps curves are skewed instead
of symmetric. This is because when the Arduino-based ECU
starts operating, its clock skew slowly decreases due to the
temperature change in hardware. As a result, the IDS tends to
overestimate the clock skew, and is more sensitive to a larger
positive delay (that would further decrease the clock skew).

(cid:15)-MSI for the state-of-the-art IDS increases signiﬁcantly for
a real vehicle, as shown in Fig. 8b, due to the signiﬁcantly
heavier CAN trafﬁc compared to the prototype, which reduces
the effectiveness of the detection. As an example, a cloaking
attack with ∆T between −1029µs and 1021µs can bypass
the state-of-the-art IDS with 100% probability regardless of
nattack. For the NTP-based IDS with (cid:15) = 0.01, (cid:15)-MSI is
10.5µs for nattack = 20, and 3µs for nattack = 60. Hence,
in the real vehicle, as in the CAN prototype, the NTP-based
IDS is more effective in detecting masquerade attacks than the
state-of-the-art IDS. The proposed cloaking attack, however, is
still able to thwart both detection schemes when ∆T is chosen
to be within the interval [(∆T )min((cid:15)), (∆T )max((cid:15))].

0500100015002000Elapsed time (sec)-20-100102030Average offset (us)NormalMasqueradeCloaking0500100015002000Elapsed time (sec)-300-200-1000100200Accumulated offset (ms)NormalMasqueradeCloaking0500100015002000Elapsed time (sec)01234L+/L-105L+L-0500100015002000Elapsed time (sec)012345L+/L-L+L-10203040506070Added delay (T) (us)020406080100Sucessful attack probability (%)nattack = 20nattack = 40nattack = 60-4000-2000020004000Added delay (T) (us)020406080100Sucessful attack probability (%)nattack = 20nattack = 40nattack = 6010203040506070Added delay (T) (us)020406080100Sucessful attack probability (%)nattack = 20nattack = 40nattack = 60-40-35-30-25-20-15Added delay (T) (us)020406080100Sucessful attack probability (%)nattack = 20nattack = 40nattack = 60targeted message is not suspended (for safety), the data we
collected also contains the normal data. The same settings in
Section V-C are used for state-of-the-art and NTP-based IDSs.
Fig. 9 shows a typical scatter plot of average offsets of the
sibling message and the attack message, when the cloaking
attack is mounted. For the CAN bus prototype, the correlation
is 0.76 and 0.90 for state-of-the-art and NTP-based IDSs,
respectively. This is mainly because an Arduino-based ECU
is dedicated to transmission, which implies a smaller jitter
and offset deviation, while the quantization error is quite
signiﬁcant due to the Arduino’s 4µs time resolution. On the
EcoCar testbed, the cloaking attack can achieve correlation up
to 0.95 and 0.92 for state-of-the-art and NTP-based IDSs.

(a) CAN prototype,
state-of-the-art

(b) EcoCar testbed,
state-of-the-art

(c) CAN prototype, NTP-based

(d) EcoCar testbed, NTP-based

Fig. 9: Scatter plot of the average offsets of sibling messages
and attack messages under cloaking attack. The correlation
coefﬁcient is above 0.9 in the EcoCar testbed, and hence is
comparable to the coefﬁcient for consecutive messages.

D. Performance of Cloaking Attack on Correlation Detector

In this section, we demonstrate and evaluate the cloaking
attack on the correlation detector. On the CAN bus prototype,
the targeted message is 5Hz. When launching the cloaking
attack,
the Arduino-based impersonating ECU transmits a
spoofed message 0x11 after it observes a sibling message of
the targeted message, with a constant delay of 100ms6. On the
EcoCar testbed, two 100Hz messages 0xC1 and 0xC5 from a
stock ECU are identiﬁed to be highly correlated. We choose
0xC5 as the target, and 0xC1 as its sibling message. Due to
limited computing capabilities, the Arduino-based ECU is not
able to receive all messages on the CAN bus, ﬁlter for the
sibling message, and transmit the spoofed message. Hence, we
use the Raspberry-Pi-based ECU as the impersonating ECU.
It injects messages with a non-conﬂicting ID 0xC0, instead
of 0xC5, in order to avoid any undesirable impact on the
EcoCar. A total of 14 hours and 1.2 hours of attack data were
collected from the CAN bus prototype and the EcoCar testbed,
respectively. As a baseline, we collected 4.7 hours of normal
data with one ECU transmitting two messages consecutively
on the CAN bus prototype. For the EcoCar testbed, since the

6 As mentioned in Section IV-C, as long as two messages are received
with a constant delay, they will be highly correlated. To validate this, we
programmed the strong attacker to transmit after a constant delay instead of
immediately on the CAN bus prototype.

Fig. 10: Correlation relationship between pairwise messages
on the EcoCar testbed. Consecutive messages from the same
ECU are highly correlated, while others are less correlated.

To understand the correlation relationship between pairwise
messages on the EcoCar testbed, we examine 17 messages
from 5 ECUs with periods of 10ms, 12ms or 100ms, based
on the ground truth provided by the manufacturer. All pairs
of messages are classiﬁed into the following three categories:
1) from the same ECU and (almost always) received consecu-
tively, 2) from the same ECU but not received consecutively,
or 3) from different ECUs. Correlation values are computed
using 200 batches. As illustrated in Fig. 10, for two messages
from different ECUs, their correlation is generally low (e.g.,
less than 0.2) for both state-of-the-art and NTP-based IDSs.
In addition, not all pairs of messages from the same ECU
have high correlation: 81% of them have correlation less than
0.6, and there are only 5 pairs with correlation higher than
0.9 for both IDSs. We checked such pairs and conﬁrmed that
their messages are always consecutively received. This result
is indeed consistent with our analysis in Section IV-C.

Next we evaluate the performance of the cloaking attack. An
attack on the correlation detector is successful if the resulting
correlation is higher than or equal to the detection threshold
Γcorr, and failed otherwise. A total of 100 experiments using
the attack data are conducted, each consisting of 50 batches,
to compute the successful attack probability Ps. Intuitively, a
higher Γcorr may cause a IDS to report a false alarm, i.e.,

-20-15-10-505101520Avg clock offset of normal msg (us)-20-15-10-505101520Avg clock offset of attack msg (us)Correlation Coeff=0.7637-300-200-1000100200300Avg clock offset of normal msg (us)-300-200-1000100200300Avg clock offset of attack msg (us)Correlation Coeff=0.9491-26-25-24-23-22-21-20-19Avg clock offset of normal msg (us)-26-25-24-23-22-21-20-19Avg clock offset of attack msg (us)Correlation Coeff=0.9005-8-6-4-2024Avg clock offset of normal msg (us)-8-6-4-2024Avg clock offset of attack msg (us)Correlation Coeff=0.922200.20.40.60.81Correlation by NTP-based IDS00.20.40.60.81Correlation by state-of-the-art IDSFrom same ECUFrom same ECU,consecutively receivedFrom different ECUsbased on the Network Time Protocol. In order to quantify
the effectiveness of the attack, we presented a new security
metric, the Maximum Slackness Index, which is the range of
added delay that the adversary actions can introduce before
being detected. This work makes the case that the impact
of coupling between cyber and physical components in CPS
security needs to be understood, especially when attempting to
leverage physical invariants arising from physical components
to provide security assurances.

REFERENCES

[1] S. Checkoway, D. McCoy, B. Kantor, D. Anderson, H. Shacham, S. Sav-
age, K. Koscher, A. Czeskis, F. Roesner, and T. Kohno, “Comprehensive
experimental analyses of automotive attack surfaces,” in Proceedings of
the 20th USENIX Conference on Security, ser. SEC’11. Berkeley, CA,
USA: USENIX Association, 2011, pp. 6–6.

[2] K. Koscher, A. Czeskis, F. Roesner, S. Patel, T. Kohno, S. Checkoway,
D. McCoy, B. Kantor, D. Anderson, H. Shacham, and S. Savage,
“Experimental security analysis of a modern automobile,” in IEEE
Symposium on Security and Privacy, 2010.

[3] C. Miller and C. Valasek, “Adventures in automotive networks and

control units,” in DEF CON21, 2013, pp. 260–264.

[4] ——, “Remote exploitation of an unaltered passenger vehicle,” in Black

Hat, 2015.

[5] K.-T. Cho and K. G. Shin, “Fingerprinting electronic control units
for vehicle intrusion detection,” in 25th USENIX Security Symposium
(USENIX Security 16). Austin, TX: USENIX Association, 2016, pp.
911–927.

[6] T. Hoppe, S. Kiltz, and J. Dittmann, “Security threats to automotive
can networks — practical examples and selected short-term countermea-
sures,” in Proceedings of the 27th International Conference on Computer
Safety, Reliability, and Security, ser. SAFECOMP ’08. Berlin, Heidel-
berg: Springer-Verlag, 2008, pp. 235–248.

[7] M. Muter and N. Asaj, “Entropy-based anomaly detection for in-vehicle

networks,” in IEEE Symposium on Intelligent Vehicle, 2011.

[8] S. B. Moon, P. Skelly, and D. Towsley, “Estimation and removal of
clock skew from network delay measurements,” Amherst, MA, USA,
Tech. Rep., 1998.

[9] D. Mills, “Network time protocol (version 3) speciﬁcation, implemen-

tation and analysis,” 1992.

[10] ISO, International Standard ISO 11898-1 Road Vehicles-Controller Area
Network (CAN), Part 1 Data Link Layer and Physical Signaling, 2015.

[11] Bosch, CAN Speciﬁcation Version 2.0, 1991.
[12] V. Paxson, “On calibrating measurements of packet

times,”
SIGMETRICS Perform. Eval. Rev., vol. 26, no. 1, pp. 11–21, Jun. 1998.
[13] M. Muter, A. Groll, and F. C. Freiling, “A structured approach to
anomaly detection for in-vehicle networks,” pp. 92 – 98, 09 2010.
[14] “Hackers remotely kill a jeep on the highway - with me in it.” [Online].

transit

Available: http://www.wired.com.

[15] S. Jana and S. K. Kasera, “On fast and accurate detection of unauthorized
wireless access points using clock skews,” in Proceedings of the 14th
ACM International Conference on Mobile Computing and Networking,
ser. MobiCom ’08. New York, NY, USA: ACM, 2008, pp. 104–115.
[16] T. Kohno, A. Broido, and K. Claffy, “Remote physical device ﬁnger-

printing,” in IEEE Symposium on Security and Privacy, 2005.

[17] S. Zander and S. J. Murdoch, “An improved clock-skew measurement
technique for revealing hidden services,” in Proceedings of the 17th
Conference on Security Symposium, ser. SS’08. Berkeley, CA, USA:
USENIX Association, 2008, pp. 211–225.

[18] S. Haykin, Adaptive ﬁlter theory 2nd edition. Prentice Hall, 2011.
[19] M. Basseville and I. Nikiforove, Detection of abrupt changes: Theory
and application. Prentice Hall Informations and system science series,
1993.

[20] R. Ruth, W. Bartlett, and J. Daily, “Accuracy of event data in the 2010
and 2011 toyota camry during steady state and braking conditions,” in
SAE International Journal on Passenger Cars.
SAE, 2012, pp. 358–
372.

[21] “UW EcoCar,” http://uwecocar.com/, accessed: 2017-09-26.
[22] B. P. Welford, “Note on a method for calculating corrected sums of
squares and products,” Technometrics, vol. 4, no. 3, pp. 419–420, 1962.

(a) Successful attack probability

(b) False alarm probability

Fig. 11: Successful attack probability and false-positive prob-
ability of the cloaking attack on the correlation detector
under changing detection threshold. In the CAN prototype,
if the detector is chosen to achieve probability of false alarm
Pf a ≤ 0.05, then the attack succeeds with probability at least
0.95. In the EcoCar, the probability of success for the attack is
0.8 when the detector parameters are chosen so that Pf a = 0.

declaring an attack when there is actually none. The false
alarm probability Pf a is equal to the percentage of experiments
where the IDS reports a false alarm. A total of 80 experiments
using the normal data are conducted to compute Pf a.

Fig. 11 illustrates Ps and Pf a as a function of the detection
threshold Γcorr. As we can see, a larger Γcorr decreases Ps,
making the attack more difﬁcult, but also leads to more false
alarms. On the CAN bus prototype, the state-of-the-art IDS
needs to set Γcorr to 0.54 to ensure Pf a ≤5%, at which point
we have Ps =100%. For the NTP-based IDS, when Γcorr is
0.68, we have Pf a ≤5% and Ps =98%. It demonstrates that
the cloaking attack is able to effectively bypass both IDSs.

On the EcoCar testbed, when Γcorr is 0.8, Ps is 95%
and 96% for state-of-the-art and NTP-based IDS, respectively.
Since the two messages have very high correlation under the
normal condition, Γcorr may be set to 0.975 without any false
alarm. At this point, Ps for state-of-the-art and NTP-based
IDSs is 89% and 80%, respectively. It is important to note
that such attack performance is already achieved with a lower-
end ECU based on Raspberry Pi, and we would expect Ps to
increase when the cloaking attack is mounted by the strong
attacker inside a vehicle, which is left as our future work.

VI. CONCLUSION

This paper investigated attacks on in-vehicle networks, in
which an adversary compromises one or more ECUs and
introduces spoofed messages claiming to be from a targeted
ECU. Recent works have proposed using the ECU clock skew
as a ﬁngerprint to detect attacks, resulting in clock skew-
based intrusion detection systems (IDS) that make use of ﬁrst-
and second-order moments. In this paper, we proposed the
cloaking attack on IDS, in which an adversary changes the
transmission times of spoofed messages in order to match the
clock skew of the targeted ECU. We evaluated the cloaking
attack on a CAN bus prototype and a connected vehicle,
and showed that
the state-of-the-art IDS was deceived in
all test cases. We also proposed and evaluated a novel IDS

00.20.40.60.81Detection threshold (Corr )020406080100Sucessful attack probability (%)State-of-the-art IDS, PrototypeNTP-based IDS, PrototypeState-of-the-art IDS, EcoCarNTP-based IDS, EcoCar00.20.40.60.81Detection threshold (Corr )020406080100False-positive probability (%)State-of-the-art IDS, PrototypeNTP-based IDS, PrototypeState-of-the-art IDS, EcoCarNTP-based IDS, EcoCarA. Workﬂow of IDS

APPENDIX

Fig. 12 describes an IDS workﬂow. The following steps are
applicable to both the state-of-the-art IDS in [5] and the NTP-
based IDS that we propose. An IDS consists of two blocks:
clock skew estimation and Cumulative Sum (CUSUM). The
clock skew estimation block takes the timestamps of N newly
arrived messages as input. For the k-th batch, the state-of-
the-art IDS computes the average offset Oavg[k] and the
accumulated offset Oacc[k] according to Eq. (5) and Eq. (6),
respectively, whereas the NTP-based IDS follows Eq. (7) and
Eq. (8). Then the identiﬁcation error e[k] is computed, and
used to obtain the updated clock skew S[k] using the Recursive
Least Square algorithm [5], [18].

Fig. 12: Workﬂow of the state-of-the-art IDS [5] and the NTP-
based IDS. There are two main blocks: clock skew estimation
and CUSUM. The clock skew estimation block updates the
clock skew using the most recent batch. CUSUM takes the
identiﬁcation error and update control limits for detection.

The CUSUM block takes the identiﬁcation error as input.
It starts to maintain the statistics of all past identiﬁcation
errors, i.e., mean and standard deviation, after ninit (e.g., 50)
error samples are received. Then the new error sample is ﬁrst
normalized, and used to update the control limits. If either
upper or lower control limit (L+/L−) exceeds the detection
threshold Γ, the IDS declares an attack. In order to be robust
against noise, if the normalized error e(cid:48)[k] is less than the
threshold γ, the error statistics will be updated using the new
error sample e[k] and all past error samples; otherwise, e[k]
will be dropped and error statistics will not be updated. In
practice, online algorithms like Welford algorithm [22] may
be used to update error statistics.

B. Impact of Mistiming on Cloaking Attack

In a masquerade or cloaking attack, the strong attacker needs
to start transmitting the spoofed message at the time constant
at which the targeted message should have been transmitted,
if it had not been suspended. It naturally raises the question
whether mistiming affects the cloaking attack performance. In
this simulation, we introduce a mistiming delay (either positive
or negative) between the last message of normal data and the
ﬁrst message of attack data, in addition to the message period.

(a) CAN prototype,
state-of-the-art

(b) EcoCar testbed,
state-of-the-art

(c) CAN prototype, NTP-based

(d) EcoCar testbed, NTP-based

Fig. 13: Impact of the mistimed cloaking attack on the state-of-
the-art IDS and the NTP-based IDS. If the strong attacker can
inject the ﬁst attack message on the proper time, the cloaking
attack can bypass both IDSs.

The IDS is fed with 1000 batches of normal data, followed
by nattack batches of attack data with a batch size of 20 in
each experiment. Γ is 5 for both IDSs, and γ is set to 3 and 4
for state-of-the-art and NTP-based IDSs, respectively. Also, κ
is set to 5 for the CAN bus prototype and to 8 for the EcoCar
testbed, respectively.

Fig. 13 shows the impact of the mistiming of the cloaking
attack on state-of-the-art and NTP-based IDSs. In general,
larger mistiming causes the attack performance to decrease.
On the CAN bus prototype, any amount of mistiming between
−55µs and 55µs does not affect the attack performance (i.e.,
Ps is 100% with nattack = 60) against the state-of-the-art
IDS, whereas the allowed mistiming is much larger for the
NTP-based IDS, mainly due to the difference in clock skew
estimation. Since the clock skew of the Arduino-based ECU
slowly decreases due to the temperature change in hardware
as it warms up, the estimator tends to overestimate the clock
skew, and thus is more sensitive to larger positive mistiming
(that would further decrease the clock skew), which explains
the skewness of the curves in Fig. 13c.

On the EcoCar tested, the allowed mistiming is increased
signiﬁcantly, which is between −6ms to 7ms for the state-
of-the-art IDS, and between −1.8ms and 0.5ms for the NTP-
based IDS, due to much heavier CAN trafﬁc in a real vehicle.
The above observations imply that the timing is hardly a strict
requirement for the adversary to launch a clocking attack in a
real vehicle.

Declare attackClock Skew EstimationCompute 𝑂(cid:3028)(cid:3049)(cid:3034)[𝑘]Update 𝑂(cid:3028)(cid:3030)(cid:3030)𝑘Compute error 𝑒[𝑘]𝑒𝑘←𝑂(cid:3028)(cid:3030)(cid:3030)𝑘−𝑆𝑘−1𝑡[𝑘]Update skew 𝑆[𝑘][𝑎(cid:2869),…,𝑎(cid:3015)]𝑂(cid:3028)(cid:3030)(cid:3030)𝑘−1,𝑆[𝑘−1]CUSUMNormalize error𝑒(cid:4593)[𝑘]=(𝑒𝑘−𝜇(cid:3032))/𝜎(cid:3032)𝑘-th batchUpdate control limits𝐿(cid:2878)←max[0,𝐿(cid:2878)+𝑒(cid:4593)−𝜅]𝐿(cid:2879)←max[0,𝐿(cid:2879)−𝑒(cid:4593)−𝜅]𝑒[𝑘]𝜇(cid:3032),𝜎(cid:3032)𝐿(cid:2878)or𝐿(cid:2879)>Γ?𝑁𝑌Update 𝜇(cid:3032), 𝜎(cid:3032)if 𝑒(cid:4593)<𝛾-200-1000100200Mistiming delay (us)020406080100Sucessful attack probability (%)nattack = 20nattack = 40nattack = 60-3-2-10123Mistiming delay (us)104020406080100Sucessful attack probability (%)nattack = 20nattack = 40nattack = 60-4000-2000020004000Mistiming delay (us)020406080100Sucessful attack probability (%)nattack = 20nattack = 40nattack = 60-6000-4000-20000200040006000Mistiming delay (us)020406080100Sucessful attack probability (%)nattack = 20nattack = 40nattack = 60