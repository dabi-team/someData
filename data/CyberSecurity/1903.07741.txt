9
1
0
2

r
a

M
8
1

]

R
C
.
s
c
[

1
v
1
4
7
7
0
.
3
0
9
1
:
v
i
X
r
a

The epidemiology of lateral movement: exposures and
countermeasures with network contagion models

Brian A. Powell

Johns Hopkins University Applied Physics Laboratory
11100 Johns Hopkins Rd., Laurel, MD 20723

ARTICLE HISTORY
Compiled March 20, 2019

ABSTRACT
An approach is developed for analyzing computer networks to identify systems and
accounts that are at particular risk of compromise by an adversary seeking to move
laterally through the network via authentication. The dynamics of the adversary
are modeled as a contagion spreading across systems linked via authentication re-
lationships derived from Administrator account access and active session data. The
adversary is assumed to traverse the network via credential chaining, where the ad-
versary steals credentials from one system, uses them to authenticate to another,
and repeats the process. Graph topology measures are used to analyze diﬀerent
contagion models applied to a real Windows network for three primary exposures
by identifying: accounts which, either individually or collectively, provide wide and
far-reaching access to many systems across the network; accounts with notable priv-
ilege escalation liability; and “gatekeeper” systems through which the adversary
must pass in order to reach critical assets. The approach can be used to test how
diﬀerent mitigations and countermeasures aﬀect these exposures; for example, we
ﬁnd that disabling remote logins by local accounts and implementing protections
that prevent the caching of credentials on remote hosts can substantially curtail
lateral movement and privilege escalation.

KEYWORDS
network security; lateral movement; credential theft; privilege escalation

1. Introduction

Cyber attackers are almost always hunting for something—credit card numbers, pass-
word ﬁles, or the highly-guarded recipe for the secret sauce. This data is ideally tucked
away somewhere, out of reach of all but the most trusted individuals. When attack-
ers penetrate a network, the compromised ingress system usually does not hold the
secret data, and the compromised account might not have access to the system that
does. And so begins the delicate process of lateral movement, as the adversary steps
through the network, implanting itself, hunting for sensitive data, seeking to escalate
privileges along the way in order to access ever more secure systems. The key to lateral
movement is to keep exceptionally quiet so that the adversary has time to ﬁnd what
it’s looking for; stealth is achieved by getting lost in the noise, by blending into the
normal rhythm of the network. This means that unauthorized activities should be kept

Email: brian.a.powell@jhuapl.edu

 
 
 
 
 
 
to a minimum: the adversary must “live oﬀ the land”, using native utilities already
present on compromised hosts to gain persistence, perform reconnaissance, and make
remote connections. Movement from system to system should be authenticated, so that
it is appears authorized and otherwise unremarkable. To fuel this authenticated lateral
movement, the adversary must harvest credentials from compromised hosts as quietly
as possible, stringing together compromised accounts and escalating privilege until the
target is reached. This is actually all a lot easier than it might sound.

Once the adversary moves oﬀ its ingress point and into bustle of the network, they
tend to dwell undetected for a long time—a 2017 study [1] reports an average of 191
days. If the hope is to catch them before they disappear, recent estimates [2] place the
average time between ingress and ﬁrst lateral move at two hours—not a lot of time to
detect and respond to all but the noisiest of intruders. Much eﬀort has been put towards
curtailing lateral movement by locking down native tools and securing credentials,
but such safeguards are not a cure-all: organizations also need to ensure that users
don’t have unneeded access or excessive privileges, and that Administrators observe
best practices like least privilege and avoid crossing security tiers. Defenders must
adopt a proactive strategy of hunting for unusual logins, suspicious host processes,
and evidence of credential theft. The trouble is that enterprise networks are large,
with often complex access control policies that are diﬃcult to audit and analyze, and
defenders generally don’t know where to look to catch lateral movement.

In this paper, we develop an analytical framework that can be applied to any com-
puter network to gain insight into these challenges. Using Administrator account ac-
cess data, we map out the basic authentication relationships of all systems across the
network: essentially, which system’s Local Administrator accounts have privileges on
which other systems, forming a directed graph called the authentication network, or
authnet. A Local Administrator is any account belonging to a system with suﬃcient
privileges to perform restricted administrative tasks. We employ a simple contagion
model to emulate an adversary seeking to expand access via the basic technique of cre-
dential chaining, in which the adversary steals credentials from one system, uses them
to authenticate to another, steals credentials there, and continues in this manner. We
quantitatively asses this model using a select set of graph centrality measures to iden-
tify systems that are especially good spreaders—good facilitators of lateral movement.
We ﬁnd that often such systems are unremarkable individually, but are connected to-
gether in ways that confer wide and far-reaching access across the network. Results
like these can yield insights into access control conﬁguration and help identify accounts
with too much access, either individually or collectively.

We next examine the role of active sessions on the network. An active session is
the temporary access of an information system by a user following a successful logon
event. When users login to a computer their credentials are generally available on that
system, either in running memory or cached in the security database, until logout or
system reboot. In this work we refer to the general availability of credentials, of any
type, in running memory and cache as credential residue, to distinguish them from
credentials residing indeﬁnitely in local security databases. Credential residue is the
primary source of credentials of high-privileged network accounts that are not local to
any system (and so don’t have credentials stored in any local security database) con-
tributing to privilege escalation exposure. Using login data from authentication logs,
we map these authentication relationships on top of the Local Administrator authnet
to obtain a more comprehensive picture of all possible authenticated routes through
the network. We analyze this authnet to identify and characterize cases of cross-tier
access by Administrator accounts in diﬀerent security tiers: for example, an Adminis-

2

trator in the highest security tier accesses an asset that is also accessible by a lesser-tier
Administrator that has a concurrent active session on the network. An adversary can
escalate privileges by compromising the lesser-tier Administrator’s session, called an
escalator, and authenticating to the system hosting the higher-tier Administrator’s ac-
tive session. These ﬁndings are useful for monitoring cross-tier activity, and can help
craft policy that limits privilege escalation liability.

Lastly, we explore how to defend certain high value systems from unauthorized
authenticated access. Given a set of such systems, the authnet is used to enumerate
all systems that can reach them via chained authenticated access: these access paths
can be generated in near-real time so that defenders can shift and adapt to the changing
network. We apply a contagion model to this network that incorporates the possibility
of recovery (detection) in order to identify the major conduits, called gatekeepers,
through which the adversary must pass en route to the targets. By focusing on this
small set of key systems for more careful monitoring, cyber defenders can anticipate
the adversary by widening the defensive boundary a step or two out from critical
assets.

This analysis aﬀords engineers and administrators the ability to test diﬀerent
network-wide or account-speciﬁc countermeasures against the threat of lateral move-
ment. For example, once the authentication network is established, it is possible to
explore what happens to spreadability when certain types of inter-system remote ac-
cess are restricted, or what eﬀect restrictions on in-memory credential storage have on
privilege escalation. We explore a few of these mitigations in this paper to demonstrate
the methodology.

In what follows, we collect data from and apply these methods to a real Windows
Domain. Hence, the derived authentication relationships embodied in the authnet are
based on the details of speciﬁc Windows authentication protocols, logon processes, and
so on; the speciﬁcs of the Windows operating system and authentication processes that
are prerequisites for these applications are provided in Appendix A. Once the authnet
is built, however, the analytic methods are general and can be applied to any computer
network.

Throughout this paper numerical values for things like network size, number of
active Administrator sessions, or the percentage of escalators eliminated by a certain
countermeasure will be reported; since these numbers are speciﬁc to one particular
network, they are of no interest to a general audience. The emphasis is therefore not
on the numbers or the characteristics of this particular network, but on the methods
of analysis that render them. By working through an analysis of a real network, we
hope to demonstrate how the methods described here can be used by security analysts
to explore, understand, and better defend their networks.

2. Cyber Attack as an Epidemic

The formal basis for this analysis is the study of epidemic spread as percolation in net-
works [3–6]. In contrast to traditional epidemiological dynamics in which any infected
individual in a population can make contact with, and potentially infect, any other
individual in the population, the spread of epidemics on networks is constrained by the
network structure—infected vertices can only spread contagion to those vertices with
which they share an edge, and, on directed networks, only in the direction of the edge.
This formalism has found applications in biology, social networks, and, increasingly,
cybersecurity.

3

Epidemic modeling classiﬁes hosts as susceptible, infected, recovered (with or with-
out immunity) or dead. Models are named for the states involved, e.g. SI models include
only susceptible and infected hosts—there is no death or recovery. In SIR models, in-
fected hosts can recover with immunity, so that they cannot be reinfected; in contrast,
SIRS models include the possibility of reinfection by assuming that immunity is only
temporary.

We model adversarial lateral movement as a contagion spreading on a directed net-
work, with infection of a vertex corresponding to adversarial access to the correspond-
ing system. Infection can only spread between vertices in the direction of the edge, in
accordance with the authentication relationship between the connected systems. We
assume that infected systems always infect susceptible systems with certainty and that
the contagion spreads serially, one host at a time, much like the true cyber adversary.
A single epidemic scenario corresponds to the sequence of infections that follow from
a single initially-infected host. We assume that the adversary retains access to all sys-
tems accessed during the scenario, and, hence, that systems remain infected for the
duration of the epidemic scenario. Each scenario runs until no further hosts can be
infected (based on network topology), or until it is eradicated, which corresponds to
the simultaneous recovery of all hosts; in our cybersecurity analogy, once the adversary
is detected on a system, the attack is considered over.

For each application, we consider an ensemble of epidemic scenarios. To study cre-
dential exposure across the entirety of the network, we run scenarios until each vertex
has been infected at least once. The ensemble of scenarios is represented as an in-
fection network, which includes all systems infected in the ensemble as vertices and
all transmission paths as edges. The in-degree of a vertex gives the number of times
it was infected by a distinct host, the out-degree gives the number of distinct hosts
infected, and the weight of an edges gives the number of times the contagion spread
between the associated vertices. We apply a variety of graph centrality measures and
other metrics to the infection network in order to identify important systems.

Contagion has been used in a number of other cybersecurity studies. Epidemic
models have been useful in modeling the spread of unthinking computer viruses and
worms [7–9]. In [10], the eﬀect of system security investments on infection likelihoods is
studied; the adversary is modeled as a contagion spreading probabilistically across the
network according to the encountered security investment of each system. The work of
[11] explores a slightly more intelligent adversary, which deploys attack resources on
systems in a bid to capture them according to a probabilistic contest. The objective
is to identify the optimal network structure that reduces the potential spread of the
adversary, which is essentially modeled as a contagion that simultaneously spreads to
multiple uninfected systems as resources allow. Contagion models have also been used
to study network resiliency [12,13], where an attack causing system failure cascades
through the network spreading indiscriminately from infected to susceptible systems.
There are also some interesting results from graph percolation theory that are rele-
vant to the spread of infections on networks. In particular, in [14] the notion of perco-
lation centrality is introduced in order to ascertain vertex centrality in the presence of
a percolation process. Evaluation of this metric requires knowledge of the percolation
state of vertices in the network, which, in cybersecurity applications, corresponds to
a knowledge of which systems are compromised. This metric is especially useful for
determining at-risk vertices in the presence of a particular, ongoing infection. In con-
trast, here we consider all possible, hypothetical epidemics on the authnet in order to
identify those systems that are generically vulnerable to compromise.

4

3. Finding Spreaders

The ﬁrst exposure we investigate is spreadability, which is the tendency of an account to
provide signiﬁcant access to other systems, either immediately or collectively through
chained access. The basis for this analysis are the authentication relationships of Local
Administrator accounts arranged as a directed graph called an authentication network:
we now describe the structure of this graph and the data sources needed to create it.

3.1. Local Administrator Authentication Network

The authentication network, or authnet, is a directed graph: vertices are information
systems and edges indicate authentication relationships between them. Speciﬁcally, an
edge E = (u, v) from vertex u to vertex v indicates that a credential available on the
system represented by vertex u can authenticate with Administrative privileges to the
system represented by vertex v.1 Given two edges, E = (u, v) and E(cid:48) = (v, w), the
directed path E ∪ E(cid:48) = (u, v, w) can be traversed via credential chaining, that is, by
using the credential available on system u to authenticate to system v, followed by the
use of the credential available on v to access system w. Such paths can be arbitrarily
long. The local account on system u is said to be a derivative Local Administrator of
system w.

We are ﬁrst interested in charting the authentication relationships of Local Admin-
istrator accounts, and the resulting network of such relationships is a directed graph
called the Local Administrator authnet. To generate the graph, all local accounts in
the network must be enumerated, and, for each account, all systems to which it has
Administrative access, either directly or through group membership, are identiﬁed (see
Figure 1). Direct Administrative access is represented by an Admin to edge connecting
a user and system, whereas if the access is granted through group membership, the
user is connected by a Member of edge to a group, and the group is connected by an
Admin to edge to the system.

On a Windows network, these data can be acquired from the Active Directory
conﬁguration using net commands or through PowerShell with the Active Direc-
tory module. But, it is more convenient to run a few routines from the Power-
Sploit [15] suite: speciﬁcally, ﬁrst retrieve a list of all systems in the Domain with
Get-DomainComputer, and then for each system, list members of the Local Admin-
istrator group with Get-NetLocalGroupMember. There will possibly be both user ac-
counts and Domain groups in a given system’s Local Administrator group: for each
Domain group, list members with Get-DomainGroupMember. All of these steps (and
more) are bundled conveniently in the Bloodhound Domain reconnaissance tool [16]:
indeed, the Neo4J graph database produced by Bloodhound is in ready form for the
analysis depicted in Figure 1 that underlies the authnet.

The Local Administrator authnet of our Windows network includes 3791 vertices,
with each vertex representing a unique system in the Active Directory database. The
trouble with this representation is that a single user might have multiple systems
associated with their account, e.g. retired systems still in Active Directory or travel
laptops, not all of which are present on the network at the same time. We therefore
cluster those systems deemed to belong to the same user so that they are all repre-
sented by a single vertex in the authnet. Further, some user accounts have access to

1Strictly speaking, u and v are generic labels of the vertices representing systems, but, for brevity, in what
follows we will consider systems and the vertices representing them as one and the same.

5

Figure 1.
the directed system graph resulting from this relationship data.

Illustration of how account Administrative and group membership relationships link systems, and

Figure 2. Local Administrator authentication network, after clustering similar systems (see text). This and
the other graphs in this work were created with the Gephi graph visualization platform [17].

6

User AUser BSystem 1System 2System 3System 4Group aGroup bAdmin toMember ofAdmin toAdmin toAdmin toMember ofAdmin to1234becomes graphauthnet
local Admin
restricted
local Admin

|V |
3389

|E|
8747

kout
2.6

Trees
1826

Components
890

|RGB|/|GCC|
0.82

3514

6590

1.8

1777

1566

0.97

(cid:15)
0.59

0.51

d
5

2

|Vdesc|
2.9

1.87

Table 1. Local Administrator authnet characteristics. Restricted authnet has remote access by local ac-
counts disabled. |V |: number of vertices; |E|: number of edges; kout: average out-degree; Trees: number of
rooted trees (number of sets of reachable systems from kin = 0 vertices); Components: number of components;
|RGB|/|GCC|: size of the residual giant bicomponent relative to the size of the giant connected component,
obtained by removing the articulation point with the greatest reduction in size of the giant connected compo-
nent; (cid:15): average eccentricity; d: graph diameter; |Vdesc|: average number of descendants of a vertex. Note that
the increase in |V | from the original to restricted authnet is an artifact of the clustering, there being more edges
and hence more opportunities for vertices that share neighbors to be clustered. Both unclustered networks have
|V | = 3791.

subnetworks of similar systems, e.g. nodes in a compute cluster, which from a data
perspective are not expected to diﬀer signiﬁcantly, and oﬀer similar prospects for lat-
eral movement positioning. We therefore also cluster such similar systems if they have
the same parent and child vertices.

After clustering, the original authnet is reduced to |V | = 3389 vertices, 889 of
which are singletons with the remainder forming a weakly connected giant component
of size |GCC| = 2499 (see Table 1). The giant component is shown in Figure 2: it is
anchored by two systems, in the center of the graph, with exceptionally high in-degrees
of kin = 1853. Though the giant component holds 70% of the graph’s vertices, it is
highly fragmented in that it is made up of a patchwork of many small trees, with each
tree made up of all reachable vertices from its root (which has kin = 0). The rest of the
vertices outside the giant component are singletons—systems with local accounts that
cannot authenticate to any other system. These properties result in a small average
eccentricity of less than one hop, and an average number of descendants of just under
three. In short, it is hard to move around appreciably via chained authentication in
this network. Interestingly, though, around 20% of the giant component can be broken
oﬀ by the removal of just a single articulation point, indirectly indicating the presence
of highly connected vertices. These are some of the vertices we are interested in ﬁnding.

3.2. Spreadability and Inﬂuence

For this analysis, we apply a basic SI contagion model to the authnet: a single sys-
tem is initially infected and then the contagion simply spreads, eventually infecting
all reachable systems. When multiple susceptible systems are reachable from the last
infected host, the contagion spreads randomly to any vertex not already part of the
infection network. The model is run until all vertices are infected. The spreading con-
tagion among susceptible hosts is meant to model the essentially unguided lateral
movement of the adversary through reachable systems. The adversary steals creden-
tials and moves among systems using a wide array of techniques, a number of which
pertaining to Windows systems are described in Appendix B. We assume that cre-
dential theft is always possible and that it is undetected in order to focus solely on
the eﬀect of access controls on lateral movement. For this simple contagion model, the
infection network just corresponds to the Local Administrator authnet itself, with the
number of times each host was infected simply given by the in degree of the vertex. In
what follows, we therefore analyze the topology of the authnet to identify important
spreaders, that is, systems that grant or facilitate access to a relatively large segment
of the network.

7

Two groups of systems worth considering are those from which the infection spreads
to many other systems and those from which the infection can reach far across the
network (i.e. take many hops). The former are of value to the adversary because, as
initial ingress points, they aﬀord a large collection of reachable systems to which access
can be expanded. Meanwhile, the latter might be of interest because a long sequence
of accesses enables the adversary to reach points potentially quite unrelated to the
initial ingress system. When we consider active sessions later, exceptional spreaders
will be seen to provide routes to privileged sessions; furthermore, unrelated systems
tend to contain unrelated data, oﬀering a greater range of exﬁltration options to the
adversary. In terms of the authnet, these two groups correspond to vertices with many
descendants and those with large eccentricity. The eccentricity, (cid:15), of a vertex is the
maximum-length walk possible from that vertex.

The number of descendants and eccentricity are good measures of spreadability,
particularly when such high-scoring systems are considered ingress points. But there
are systems, perhaps with relatively few descendants and only average eccentricity,
that are nonetheless important for spreadability; for example, systems which sit on
the paths between many other systems. This notion of betweenness has found several
forms in modern network theory: the traditional measure due to Freeman [18] gives
high centrality to vertices that tend to lie along the shortest paths between vertices,

b(v) =

nv
st
gst

(cid:88)

s,t

(1)

where nv
st is the number of shortest paths between vertices s and t that pass through
v, and gst is the total number of shortest paths between s and t. For applications to
spreadability, however, we should not restrict ourselves only to shortest paths, since
contagion will take any route available between hosts. A measure that considers all
paths between vertices is given by the communicability betweenness [19],

ω(v) =

1
C

(cid:88)

s,t

Gv
st
Gst

,

(2)

where the normalization C = (n − 1)2 − (n − 1) is the number of terms in the sum,
and

Gst =

1
(cid:96)!

nst +

1
k!

(cid:88)

k>(cid:96)

W (k)
st

(3)

where, as in Eq. (1), nst is the number of shortest paths (of length (cid:96)) between s and
t and W (k)
is the number of paths of length k between s and t. The range of k is
st
unbounded. As above, the superscript “v” indicates that the paths in question pass
through v. The quantity Gst is a weighted combination of shortest and longer paths
between s and t; the weighting adopted in Eq. (3), which penalizes longer paths, is
that introduced in [19]. In this analysis, we omit these normalizations so that all paths
contribute equally to the betweenness measure.

Another important aspect of spreadability not yet captured has to do with the
number of branchings of the paths descending from a vertex. For example, consider
Figure 3: the root vertex in these two subgraphs have the same number of descendants
and the same eccentricity (and each have zero betweenness). And, yet, they have

8

diﬀerent implications for the variety of systems reachable as a function of the number
of hops from the root node. For example, the systems reachable in two hops in Figure 3
(a) might be more similar in purpose or data content, given that they are all connected
to system 2, than those reachable in two hops in Figure 3 (b), since they do not share
a common neighbor. The eigenvector centrality [20] of a vertex takes this branching
into account: speciﬁcally,

e(v) =

1
λ1

(cid:88)

s

Avse(s)

(4)

where Avs is the adjacency matrix of the graph, and λ1 is its largest eigenvalue. Notice
that the eigenvector centrality of a vertex can be large if it has many neighbors or if it
has (maybe fewer) neighbors with high centrality. In other words, it’s not just about
how many friends you have, but also how important they are.

For directed graphs, the eigenvector centrality is exchanged for the Katz centrality

[21],

eK(v) = α

(cid:88)

s

AvseK(s) + β,

(5)

where α acts as an attenuation factor, discounting the importance of more distant
vertices, and β is the initial centrality given to all vertices irrespective of their degree.
Taking α = 1/λ1 minimizes the attenuation, which is desired since spreadability does
not depend on the length of associated paths. Typically eigencentralities are bestowed
on a vertex by its neighbors, i.e. a vertex is important if its neighbors are: this is
achieved by using the right eigenvector in Eq. (5), which corresponds to incoming
edges. However, in this application we are interested in ﬁnding good spreaders, and,
hence, we are interested in the reverse interpretation: a vertex has high centrality if
it points to either many other vertices or to those of high centrality. We therefore use
the left eigenvector2 in Eq. (5) with β = 1.

Figure 3. Two subgraphs with equal |Vdesc| and (cid:15) but qualitatively diﬀerent implications for lateral move-
ment, with systems 4 and 5 in (b) possibly more dissimilar than 3, 4, and 5 in (a). Katz centrality is useful
for distinguishing these two cases, and, more generally, is sensitive to how degrees of descendants vary by hop
number.

Lastly, we consider one additional measure of spreadability, borrowed from the prob-
lem of optimal percolation, that is, to identify the minimal set of vertices ensuring the
global connectivity of the network. The vertices that “glue” the network together are
also the key inﬂuencers with respect to information ﬂow; in our problem, such vertices
might be relevant to the lateral spread of the adversary across well-connected regions

2Equivalently, one can employ the right eigenvector on the reversed graph.

9

2431534521(a)(b)of the network. The collective inﬂuence of a vertex at level (cid:96) is deﬁned [22],

CI(cid:96)(v) = (k(v) − 1)

(cid:88)

(k(s) − 1)

(6)

s∈∂Ball(v,(cid:96))

where k is the degree centrality and ∂Ball(v, (cid:96)) is the frontier of the ball of radius (cid:96)
deﬁned around vertex v. If in Eq. (6) we use kout(v), the out-degree of vertex v, the
collective inﬂuence at the level (cid:96) characterizes the ability of the vertex v to inﬂuence the
spread of contagion to systems (cid:96) steps away. Interestingly, this measure is ambivalent to
the structure of the graph in between v and the level-(cid:96) systems. As with eK, collective
inﬂuence should not discount long paths, and so we take (cid:96) to correspond to the network
diameter.

To summarize, we consider ﬁve metrics of spreadability: (|Vdesc|, (cid:15), ω, eK, CI(cid:96)). Al-
though there is sure to be some overlap and redundancy in this set, each measure seeks
to capture a unique feature of the network. The values of each measure for each vertex
are presented in Figure 4: here, we rank each vertex within each measure and plot the
rank of the vertex along the x-axis. The measures have been standardized for direct
comparison: notice that ω, eK, and CI(cid:96) each have clear outliers, whereas |Vdesc| and
particularly (cid:15) have less extreme values. Rather than focus on any single metric, we con-
sider all of them together and look for outliers in the full ﬁve-dimensional parameter
space.

Figure 4. The ﬁve (standardized) spreadability measures discussed in the text. The vertices are ranked within
each measure separately. Communicability betweenness (ω), Katz centrality (eK ), and collective inﬂuence (CI)
have clear outliers, whereas the distributions of the number of descendants (|Vdesc|) and eccentricity ((cid:15)) have
less extreme values.

The distribution in the full ﬁve-dimensional measure space is not ﬁt well by the
most common parametric distributions—it is highly concentrated at low centrality
with sparse outliers, suggesting the use of density-based clustering to mine for out-
liers3. Speciﬁcally, the DBSCAN (density-based spatial clustering of applications with
noise) algorithm [23] is used to identify points in the rareﬁed regions of the centrality

3The distribution of centrality measures likely depends sensitively on the nature of the network and so could

10

1101001000Vertex Rank01020304050(cid:116)eKCI|Vdesc|(cid:161)parameter space, far from the bulk of low-centrality vertices. DBSCAN has two tun-
able parameters: the minimum number of points, MinPts, required to form a cluster,
and ε, the maximum distance that a point may lie from a cluster to be considered part
of that cluster. In practice, usually MinPts is chosen and ε is determined by ﬁnding the
“elbow” in the plot of the distance from each point, ordered from smallest to largest,
to its MinPts-nearest neighbor. Any point that lies farther than a distance ε from its
nearest cluster is considered by DBSCAN to an outlier. With MinPts = 20 we identify
56 outliers4 out of 3389 systems, or roughly 1.5%.

Figure 5. Descendants of the top collective inﬂuencer (blue paths) and most Katz-central system (red paths).
See text for discussion.

The spreadability of two prominent outliers is displayed in Figure 5. The blue paths
trace the descendants of the top collective inﬂuencer, and the red paths trace the
descendants of the system with largest Katz centrality. Interestingly, |Vdesc| = 80
for both systems, though the two edge sets are mostly disjoint. The top collective
inﬂuencer has a rather large out-degree, kout = 73, and small eccentricity, (cid:15) = 2,
compared to the most Katz-central system, with kout = 26 and (cid:15) = 5; as a result, the
distributions of descendants across the network are quite distinct.

Before moving on, it is of interest to compare this approach with k-core analysis,
which is based on the premise that the most eﬃcient spreaders in complex networks
are those vertices within the core of the network [24]. These methods apply best to
undirected networks, in which the contagion can spread between any vertices sharing

conform to a parametric distribution in certain applications. In those instances, outliers should be found with
respect to the particular distribution (e.g. the generalized extreme Studentized deviate works well for Gaussian-
distributed data in the presence of multiple outliers.)
4There is no “right” value for MinPts; its value depends on the number of desired outliers, which should be
based on the exposure risk tolerance.

11

an edge; here, however, the directed nature of the epidemic makes k-core analysis less
useful. For directed graphs, a vertex belongs to the “out” kS-core if it belongs to the
maximal subgraph in which every vertex has kout ≥ kS. The kS-shell is the collection
of vertices that belong to the kS-core but not the (kS +1)-core. In [24], it is shown that
vertices within the highest kS-shell are particularly eﬃcient spreaders, however, due
to the heavily fragmented nature of the directed authnet, the largest k-core has only
kS = 3, a set of four vertices which does not include any of our inﬂuential spreaders.
In fact, all but one of the inﬂuential spreaders are in the 1-shell, shared by around
eighty other vertices.

3.3. Countermeasures

To reduce spreadability, a variety of countermeasure and mitigations are available.
We consider two in this analysis: one that targets speciﬁc spreaders, modifying their
access controls to reduce their inﬂuence; and one that acts globally, by disabling remote
access for all local accounts.

3.3.1. Tightening Access Controls

The presence of outliers, particularly those at the extremes of the ﬁve-dimensional
centrality distribution, might signal an access control problem. In the case of the top
collective inﬂuencer, the broad and direct access to a large set of systems might be
examined: perhaps a network rather than local account would reduce the exposure of
this account to compromise, since credentials would only be available on the system
during an active session. In the case of the most Katz-central system, its immediate
direct access is not especially overwhelming: it is the far reach of this account, via
credential chaining, that is a potential problem. The trouble is thus not with any
individual account, but rather with the whole sequence of connected accounts taken
together.

Figure 6. The descendants graph, G(Edesc, Vdesc), of the most Katz-central system of Figure 5 (black disc).
Vertices are colored according to Girvan-Newman community detection. The two systems with largest between-
ness are highlighted by the purple squares.

12

There are a range of techniques one might employ to analyze a given system’s de-
scendants graph, G(Edesc, Vdesc). For example, identifying community structure might
suggest edges or vertices whose removal would reduce the centrality of the spreader
system. The removal of edges corresponds to the elimination of local account access
to the destination systems, whereas the removal of vertices corresponds to either dis-
abling the account or the elimination of all access. As an example, suppose we wish
to eliminate select accesses to reduce the spreadability of a system: in Figure 6, the
Girvan-Newman method [25] is applied to resolve G(Edesc, Vdesc) into two communities
by minimizing the number of edges between them. Removal of the edges that bridge
the two communities, corresponding in this case to the elimination of three accesses,
would help reduce the centrality of the spreader system. This method can be iter-
ated to ﬁnd ever-smaller communities, incrementally breaking long credentials chains.
Alternatively, one can look for vertices with high betweenness (or any of the other
centrality measures discussed above) and examine the access controls of accounts that
authenticate to those systems, and/or the access controls of the local accounts on those
systems.

There are many approaches to the problem of ﬁnding “linchpin” systems in graphs,
including eﬃcient articulation point removal [26], graph fragmentation [27], equal
graph partitioning [28], and other means of community detection, and our intent is
not to study each in depth. The purpose of this section is merely to illustrate how
this remedial analysis might be done in the face of trouble accounts identiﬁed via the
preceding outlier analysis.

Figure 7. Comparison of |Vdesc| and (cid:15) between networks with and without remote access for local accounts
disabled. Vertices are ordered according to their values of |Vdesc| and (cid:15) for the unrestricted network (black),
with red squares indicating the value of the vertex in the restricted network.

3.3.2. Disabling Remote Access for Local Accounts

We next study what happens to spreadability when remote access is disabled for
all local accounts. The authnet corresponding to this restriction can be obtained by
pruning all “Admin to” edges directed away from User-type vertices in Figure 1,

13

020406080100|Vdesc|1101001000Vertex0123456εFigure 8. Descendants in the restricted authnet of the top collective inﬂuencer (blue paths) and most Katz-
central system (red paths) from analysis of the original authnet, Figure 5.

leaving only group-delegated Administrator relationships. The resulting authnet is
reduced in size, as expected, with properties detailed in Table 1. Interestingly, there is
a dramatic eﬀect on spreadability: comparison of |Vdesc| and (cid:15) of the top vertices from
the unrestricted authnet with those of the restricted authnet shows that the number
of descendants of top spreaders are greatly reduced, Figure 7 (top), as well as their
eccentricity, Figure 7 (bottom). In general, this restriction on remote access breaks
long credential chains. Recalling the top collective inﬂuencer and most Katz-central
system from earlier (Figure 5), the eﬀect on the credential chains emanating from
these systems is shown in the restricted authnet, Figure 8. The most Katz-central
system which had |Vdesc| = 80 and (cid:15) = 5 with unconstrained remote access is reduced
to |Vdesc| = 3 and (cid:15) = 1 when remote access is disabled for local accounts; meanwhile,
the top collective inﬂuencer with |Vdesc| = 80 and (cid:15) = 2 is more modestly aﬀected,
reduced to |Vdesc| = 67 with no change in eccentricity. Indeed, there are still outliers:
DBSCAN identiﬁes 13 outliers in the ﬁve-dimensional metric space, but these outliers
are markedly less extreme, as Figure 7 suggests5.

3.4. Spreaders as Ingress Points

While we have identiﬁed a collection of systems with an unusual ability to spread
access across the network, it is important to quantify the expectation that an adver-
sary might ﬁnd themselves on such a system in the ﬁrst place. Our outlier analysis

5We only compare across the measures |Vdesc| and (cid:15) rather than the full set of ﬁve because the others are
normalized to the size of the network, making a comparison across networks diﬃcult.

14

found that around 1.5% of systems were notable spreaders, and so under the naive as-
sumption that the adversary penetrates the network at random with an equal chance
of exploiting any given system, there is a likewise 1.5% chance that the adversary
ingresses the network on a spreader. But this assumption is obviously poor, since cer-
tainly at least some of the systems on the network are unreachable from the outside.
Consider instead the more realistic case in which the adversary achieves ingress via
email phishing, a prevalent attack vector involved in 70% of breaches associated with
nation-states or state-aﬃliated actors in 2017 [29]. Here, the target systems are likely
workstations, of which there are close to 2000 on the network. Interestingly, all of the
spreaders identiﬁed in the preceding analysis are also workstations, and so the chance
of randomly ingressing the network via a spreader system is doubled, to around 3%.
Alternatively, had some of our spreaders been outward-facing servers, we might instead
conduct a risk analysis of the exploitability of such systems across the network. The
point here is not the speciﬁc numbers, but that exposure risk depends on the make-up
of the network, the outliers, and the intrusion model assumed.

4. Finding Escalators

The foregoing analysis addressed the authentication relationships among Local Admin-
istrator accounts across the network. This is useful and suﬃcient for ﬁnding prominent
spreader systems resulting from access control conﬁgurations. It is common, however,
to ﬁnd Administrator accounts that are not individually local to a given system, but
instead are network-level accounts controlled via group policy. Administrators in dif-
ferent network groups generally have diﬀerent levels of access and privilege, called
security tiers. The Microsoft Active Directory Administrative Tier Model [30], for
example, separates the enterprise into three security tiers: Domain Administrators
occupy the top tier and generically have the broadest access and greatest privilege,
with the ability to access and modify data on any Domain system, including Domain
Controllers. Lower-tiered groups include server and workstation Administrators.

From the perspective of credential residue, the diﬀerence between local and network-
level Administrators is that the latter credentials are generally stored statically and
indeﬁnitely only in the centralized database (the Domain Controller on Windows net-
works), and so cannot be extracted from the local security databases of individual
systems to which they have access. But, these credentials can still possibly be found
in the running memory or local cache of systems on which these accounts have estab-
lished active sessions. Privilege escalation from Local Administrator to a network-level
Administrator, or from a lower- to higher-tier network-level Administrator, therefore
generally requires the compromise of active sessions. For example, an adversary might
escalate privileges by compromising a Desktop Administrator’s account and locating
the active session of a Windows Domain Administrator on a workstation in the lesser
Administrator’s tier. Lesser Administrators should therefore never be permitted to
access an asset at a higher tier, and higher-tier Administrators should limit access to
lower-tier assets. Of course, it is necessary for Domain Administrators to be occasion-
ally allowed access to workstations, and so this is not an access control issue per se;
rather, it is one of active session policy, of who can log in where and when.

Using data on current and recent active sessions, we create a graph of authentication
relationships made possible by the credential residue left by these sessions, and combine
it with the Local Administrator authnet to obtain a more comprehensively and timely
map of authenticated routes across the network. If a user’s credential is available on a

15

system because of an active session, the combined authnet is constructed as shown in
Figure 9. This is an extended version of the Figure 1. The vertex with the active session
“sprouts” edges to all systems that the user has privilged access to. We then search this
combined authnet for pairs of systems, one hop apart, which have concurrent active
sessions by accounts with diﬀerent amounts of access, i.e. the two sessions belong
to two diﬀerent security tiers. We refer to the lower-tier system of such pairs as an
escalator. Due to credential chaining, compromise of the escalator eﬀectively grants
the adversary with the access of the higher-privileged session because it is only one
credential theft away. Escalators embody the Microsoft concept of cross-tier logins, in
which accounts in diﬀerent security tiers access one another’s assets.

4.1. Combined Authentication Network

On Windows networks, the primary source of active session data are server and client
Windows Event Logs. Speciﬁcally, we extracted all Administrative logon (Event Code
4624), log oﬀ (4634 and 4647), and system reboot events (6005) over the course of
seven days6 to establish a current record of active sessions. To create an authent from
this session data, it is necessary to understand where the credentials are: this depends
on the type of logon (interective, network, or remote interactive), authentication pack-
age (NTLMv2 or Kerberos), impersonation level, as well as any protections that are in
place, like Protected Users groups [31], Restricted Admin Mode [32], Remote Creden-
tial Guard [33], or a “no caching” policy for Domain accounts on the destination host.
Table A.3 in Appendix A summarizes the credential residue expected given diﬀerent
combinations of these factors.

In total, active sessions with credential residue are found on 362 systems, or just
around 10% of all systems. Since these sessions belong to Administrators in Domain
groups with generally wide access, systems with active sessions will tend to have very
high out-degree. This means that there are many more edges in the combined authnet:
547,334 edges to the Local Administrator authnet’s 8747 (cf. Tables 1 and 3). A
depiction of the combined authnet, like Figure 2 for the Local Administrator authnet,
is therefore not legible and so we do not present one.

Figure 9.
Illustration of how active sessions modify the authnet. User C has an active session on System 2;
if User C’s credentials are available there, then System 2 in the authnet now has authentication relationships
with all the systems that User C has Administrative access to.

6Ideally, the historic record should span a time period longer than the duration of all active sessions and,
conservatively, the uptimes of systems with sessions in the record.

16

User AUser BSystem 1System 2System 3System 4Group aGroup bAdmin toMember ofAdmin toAdmin toAdmin toMember ofAdmin to1234becomes graphUser CSession onAdmin toAdmin toSystem 5System 6Member of564.2. Escalators and Associated Accounts

Within the combined authnet, escalators appear as in Figure 10. To identify important
escalators, it is useful to consider two diﬀerent contagion strategies. One is a targeted
escalation, in which the adversary has knowledge of where privileged active sessions
are relative to their location. Such knowledge could be acquired with network and
account reconnaissance, of the type achieved with tools like Bloodhound. Under the
assumption that the adversary would select the largest escalation under this strategy,
escalators can be quantitatively ranked according to the maximum increase in the size
of the neighborhood surrounding the vertex with the high-tier session, v, relative to
the neighborhood around the escalator, u, or

Figure 10. Subgraph indicating a substantial privilege escalation: the administrator with an active session
on the smaller out-degree system (kout = 22, red vertex in upper right) can access a system on which an
administrator with higher privilege (greater access) has an active session (kout = 2450, red vertex in center of
large cluster). For this escalator, ∆|N (u)|max = 2429 and ∆|N (u)| = 110.

∆|N (u)|max = max

v

|N (v) − N (v) ∩ N (u)|.

(7)

The neighborhood of a vertex, u, is the set of vertices reachable from u in one hop.

In the alternative strategy, the adversary might have little-to-no knowledge of priv-
ileged sessions, and instead seeks to escalate privileges by moving randomly from their
current location. In this case, a relevant metric is the increase in neighborhood size
averaged over the out degree of the escalator,

∆|N (u)| =

1
kout(u)

(cid:88)

v∈N (u)

|N (v) − N (v) ∩ N (u)|.

(8)

The combined authnet was analyzed and 348 escalators were identiﬁed connecting
to 295 higher-privileged sessions, with a total of 362 systems having active sessions.
The escalators were evaluated according to Eqs (7-8), Figure 11. Unlike the spreader
analysis, an outlier assessment isn’t appropriate because most of the escalators have
signiﬁcant ∆|N (u, v)|max and ∆|N (u, v)|. Indeed, many escalators facilitate access to

17

over 1000 new systems, and a smaller group have an exceptionally high average number
of new accesses per neighbor. These results signal a problem with cross-tier sessions,
but how big is the risk? That is, how likely is the adversary to ﬁnd either an escalator
or a high-privilege session on the network?

Figure 11. ∆|N (u, v)|-vs-∆|N (u, v)|max plane showing escalators. Those with large ∆|N (u, v)| oﬀer substan-
tial privilege escalation to an adversary that chooses its next hop randomly, whereas those escalators with large
∆|N (u, v)|max but small ∆|N (u, v)| would be most beneﬁcial to a targeted adversary that knows where the
privileged sessions are.

Suppose the adversary has obtained Local Administrator access to some workstation
and is seeking to escalate privileges to an Administrator in a Domain group with
broader access. Thirty-ﬁve of the approximately 2000 Local Administrator accounts
can reach at least one active session (Figure 12). Only 23 distinct sessions of 362 can
be reached this way, indicating that privilege escalation from Local Administrator is
diﬃcult to do (2% of Local Administrators can reach 6% of sessions)—this isolation
of privileged sessions is desirable, suggesting good local account access conﬁgurations.
Alternatively, we can ask how easy it might be for the adversary to escalate to the
highest security tier, like an account in the Domain Administrator’s group, in one hop.
There are 35 active Domain Administrator sessions in our data set, and 149 lower-tier
sessions are escalators with respect to these accounts. Suppose that these escalator
systems are primarily at risk of compromise by remote exploit, say, via phishing email
as before. Of the 149 sessions, 78 of them are workstations assumed susceptible to
phishing. If the adversary targets the 1877 workstations at random, there is thus a 4%
chance of phishing one that can immediately escalate to Domain Administrator. This
is all just to demonstrate the kinds of exposure analysis possible with this approach.
Interestingly, of the 35 workstations that can reach active sessions, 14 are spreaders,
eight of which can reach two or more escalators. And so, while the spreaders were found
using generic graph centrality measures applied to a basic contagion model, they are
also key to lateral movement targeting speciﬁc systems with privileged active sessions.

18

01000200030004000max∆|N(u,v)|0.010.11101001000avg∆|N(u,v)|Random AdversaryTargeted AdversaryFigure 12. Systems with active sessions overlayed on the Local Administrator authnet. Many of them are
on isolated vertices unreachable by other local accounts.

4.3. Countermeasures

Reducing privilege escalation exposure is a general problem with both targeted and
network-wide countermeasures. One targeted approach involves identifying speciﬁc
privileged accounts whose cross-tier logins have greatest privilege escalation exposure:
if the account must access these lower-tiered systems, a “staggered” session policy
could be adopted to ensure that accounts in diﬀerent security tiers are never simulta-
neously one hop away from each other. Alternatively, on Windows networks there are
a variety of global countermeasures that could be implemented across the Domain to
reduce the credential residue on systems. Restricted Admin Mode is a feature available
since Windows 7 / 2008 R2 that authenticates users over remote interactive logon
as Local Administrators. Doing so obviates the need for users to send credentials to
the remote system, but since the session belongs to the remote system’s Local Ad-
ministrator, delegation is broken and additional remote services cannot be accessed
on the authenticated user’s behalf (see Appendix A.3). An improvement that restores
delegation while keeping credentials safe is oﬀered by Windows Remote Credential
Guard. This feature authenticates Type 10 logins over Kerberos and places artifacts
on the remote host in a special, virtualized portion of LSASS memory which protects
them from kernel processes. When additional resources are needed, the remote host
directs the request to the client which has access to the virtualized container so that
delegation can proceed. Finally, users in the Protected Users Group, available since
Windows 8.1 / 2012 R2, are forced to authenticate over Kerberos and won’t have

19

Figure 13. Privilege escalation exposure by account. Colors indicate number of new accesses granted through
successful privilege escalation from accounts along the x=-axis to those along the y-axis.

plaintext credentials or Kerberos artifacts stored in LSASS, breaking delegation7.

We ﬁrst examine how to detect accounts that frequently cross security tiers, and
then we use the authnet to test the eﬀectiveness of implementing Windows Remote
Credential Guard on all systems.

4.3.1. Eliminating Cross-Tier Logins

To reduce the signiﬁcance and existence of escalators in the network cross-tier lo-
gins must be minimized. It is therefore helpful to identify the speciﬁc Administrator
accounts involved in the active sessions. Figure 13 is a chart depicting the privilege
escalation exposure of all accounts with active sessions. All accounts with active ses-
sions are given along the x-axis (each tick mark is one account). For a given account
along the x-axis, the dots mark those other accounts along the y-axis that have ses-
sions within its neighborhood. The coloration indicates how many new systems are
accessible via privilege escalation from the x-axis account to the y-axis account.

Accounts are organized broadly into “highest-tier” and “lower-tier” sets, with the
lower-tier accounts belonging to several distinct groups (like desktop, helpdesk, and
server Administrators). This visualization enables us to easily verify that almost all
of the high-tier Administrators login to systems below their security tier, most often
accessing systems also accessible to the “blue” Administrators. And, such logins carry
signiﬁcant liability: if one of the “blue” accounts is compromised, privilege escalation
to the highest tier is possible with an increase in access of some 3000 systems. The
chart also reveals some good practices: most Administrator groups avoid the “purple”
Administrator’s tier, and, aside from the “blue” group, accounts within the same tier
have approximately the same access (little-to-no increase in access in moving from one

7Despite these advancements in credential protection, nothing is ever perfect. For example, recent versions
of mimikatz are able to snag credentials on a Remote Credential Guard-protected system before they end
up in protected storage by injecting a custom SSP into LSASS that stores them in regular memory outside
the virtualized container. Alternatively, as long as a user has an active session on a remote system, whether
credentials are stored or not, their access token resides in memory and can be hijacked; with the token, an
attacker can request services on the user’s behalf and the client will be tricked into providing service tickets.

20

Highest-tierAdminsLower-tierAdminsaccount to another in the same group).

4.3.2. Reducing Credential Residue

Interactive sessions are especially worrisome from the perspective of credential residue
since impersonation and delegation require that credentials be placed into LSASS on
the client and server (for remote logins)—in our data sample, around 70% of systems
with active sessions had at least one Type 10 login. The protective features discussed
in Section 4.3 aim to reduce or eliminate the credential residue on remote systems left
by interactive logins. To demonstrate our methodology’s ability to test out diﬀerent
countermeasures, we now examine what eﬀect Windows Remote Credential Guard has
on privilege escalation exposure.

Figure 14. Comparison of ∆|N (u, v)|max and ∆|N (u, v)| between escalators from the unprotected network
(black) and one with Windows Remote Credential Guard in place on every system (red). Vertices are ordered
according to their values of these metrics in the unprotected network (black), with red squares indicating the
value of the vertex in the protected network.

A network with Remote Credential Guard has a diﬀerent combined authnet than
one without; to build it, we use the rules shown in Table A.3. The resulting graph
is markedly diﬀerent than the original active session authnet, Table 3. In summary,
with Remote Credential Guard in place on all systems in the Domain the number of
escalators is reduced from 348 to 262, a reduction of around 25%. Figure 14 shows
that many of the eliminated escalators are indeed signiﬁcant, with around one third of
escalators with ∆|N (u, v)|max (cid:38) 2800 eliminated by the Credential Guard. This coun-
termeasure also has implications for the exposure of the highest-privileged accounts;
the 35 Domain Administrator sessions found to have credential residue on the unpro-
tected network are reduced to 25, with now only 94 escalators (versus 149) able to
reach these sessions, a 37% reduction. Interestingly, though, the systems most aﬀected
by the Remote Credential Guard tended to be servers, and so the risk of compromise
of an escalator via phishing a workstation is unchanged.

21

01000200030004000max ∆|N(u,v)|110100Vertex0100200300400500600avg ∆|N(u,v)|authnet
combined
combined
w/ WCG

|V |
3601

|E|
547,334

kout
152

Trees
77

Components
55

|RGB|/|GCC|
0.98

3578

431,401

121

78

55

0.97

(cid:15)
1.02

0.89

d
7

6

|Vdesc|
373

270

Table 2. Combined authnet characteristics with and without Windows Credential Guard (WCG). |V |: number
of vertices; |E|: number of edges; kout: average out-degree; Trees: number of rooted trees (number of sets of
reachable systems from kin = 0 vertices); Components: number of components; |RGB|/|GCC|: size of the
residual giant bicomponent relative to the size of the giant connected component, obtained by removing the
articulation point with the greatest reduction in size of the giant connected component; (cid:15): average eccentricity;
d: graph diameter; |Vdesc|: average number of descendants of a vertex.

5. Finding Gatekeepers

The combined authnet provides a near-complete and current map of all authenticated
routes across the network. It is therefore particularly useful for enumerating in real-
time the possible pathways to a system or set of systems that are deemed especially
critical assets. These assets could be a service, like email or ﬁle shares, or the active
sessions of highly-privileged accounts. While cyber defenders might be monitoring
these systems, by the time a compromise is discovered it might be too late. It is
therefore advantageous to anticipate the adversary by keeping a close eye on the known
avenues of approach.

In what follows, we refer to such critical asset as targets, under the presumption that
an adversary would ﬁnd them to be of high value. To identify the key systems that
facilitate access to targets, we ﬁrst adopt a basic SI epidemic model as before. The
adversary can be assumed to be unguided, as in the spreader analysis, or more targeted:
to model an adversary that knows where the targets are and seeks to minimize the
number of hops, one can impose the constraint that the contagion follows the shortest
paths from the initially infected host to the targets.

As a motivating example, we assume a Windows network and consider as targets all
systems with active Domain Administrator sessions. We assume a targeted adversary,
and so we run the epidemic models on the combined authnet, restricted to the subgraph
of all systems that can reach the targets along shortest paths. As before, we run
scenarios until all vertices in the associated authnet have been infected at least once,
resulting in the infection network, Figure 15. This network is easily derived directly
from the combined authnet by retaining only shortest paths between each system and
each target in the set.

There are 35 Domain Administrator sessions, only 16 of which are reachable by
some 230 other systems. Some of these target sessions are directly reachable by a large
number of systems, suggesting a simple exposure ordering based on kin, (inset, Figure
15). For most of the targets, however, the exposure is not due to its neighbors, but its
more distant ancestors. Though a relatively small graph compared to the full authnet,
there are likely too many systems here to monitor eﬀectively8. We therefore want to
ﬁnd those systems through which the adversary is most likely to pass en route to
the targets: these should comprise a relatively small and manageable set. We refer to
such systems as gatekeepers—in a strategy to combat the spread of a real disease, the
individuals represented by these vertices would be good candidates for immunization.
The notion of gatekeeper vertices is by no means new [34–37]. Though deﬁnitions
from social network theory vary, a common interpretation [10,37] is that a vertex v is

8Defenders might monitor such systems by tracking logins, host processes, and outbound connections; by
limiting the number of systems to control the volume of false positives, defenders can do a more thorough
analysis of indicators and alerts.

22

Figure 15.
Infection network including all systems that can reach 16 target systems with Domain Adminis-
trator sessions (red vertices). Edges reveal the routes taken by the adversary following the shortest path from
each system to the targets. Inset: plot of kin for each of the 16 target systems, ranked from highest-to-lowest.

a gatekeeper if, given two other vertices s and t, all paths between them pass through
v. Under this deﬁnition, being a gatekeeper is an all-or-nothing status. In this analysis
we relax this interpretation and instead associate it with shortest path betweenness
centrality with respect to the target subset,

b(v) =

(cid:88)

s,t∈T

nv
st
gst

(9)

where nv
st is the number of shortest paths between vertices s and t that pass through v,
gst is the total number of shortest paths between s and t, and where the endpoints, t,
are restricted to the set of target vertices, T . If the infection network is not restricted
to shortest paths as in this example, more general notions of betweenness can be ap-
plied, e.g. the communicability betweenness used earlier. Gatekeepers are identiﬁed as
outliers in b(v) with respect to other vertices in the target network: the distribution of
b(v) is not well ﬁt by the standard parametric distributions and so we apply DBSCAN
to ﬁnd outliers as before. The identiﬁed gatekeeper systems are colored cyan in Figure
16 (a).

These vertices “intercept” many paths destined for the target system, indicated
by the blue edges in the ﬁgure. But, there is something perhaps undesirable about
this metric: notice that two of the vertices near the center of the large cluster are
not found to be gatekeepers, though the other three similarly-situated vertices in the
cluster are. These ﬁve vertices have similarly large in degrees, meaning that they lie

23

10203040Vertex Rank0102030405060kinalong the shortest paths of many of the same vertices destined to reach the targets.
The main diﬀerence is that the gatekeepers happen to connect to more targets than
the two non-gatekeeper vertices. Indeed, in Figure 16 (b), we highlight a gatekeeper
with kin = 36 but that connects to seven targets, and one of the two non-gatekeepers
in the center of the cluster with a much larger kin = 132 but that only connects to a
single target. However, in this example, where the targets are Domain Administrator

(a) Five gatekeepers (cyan ver-
tices) found using Eq. (9).

two

(b) Highlighting
vertices
(blue): one a gatekeeper with
modest kin but reaching many
targets, and one not a gatekeeper
with large kin but reaching only
one gatekeeper. See text.

(c) Seven gatekeepers (cyan ver-
tices) found using Eq. (10).

Figure 16. Gatekeepers of Domain Administrator sessions.

sessions, it really does not matter how many sessions a given system can authenticate
to: only one is necessary! In this context, it seems we should care just as much about
the highlighted vertex in Figure 16 (b) that is not a gatekeeper as the one that is—
perhaps even more so. This undesirable feature stems from the fact that in Eq. (9)
the betweenness receives contributions from all t ∈ T . An alternative deﬁnition that
corrects for this shortcoming is the following,

b(v)tmax = max
t∈T

nv
st
gst

(cid:88)

s

(10)

where instead of summing over t ∈ T we select the t for which b(v) is a maximum.
With this new deﬁnition, we ﬁnd seven outliers, including the two vertices left out
under the deﬁnition Eq. (9), Figure 16 (c).

We next consider a more realistic model in which the adversary has a small proba-
bility of detection with each new access; this could be due to credential theft, recon-
naissance activity, or anything else that happens to be noticed. To account for the
possibility of detection, we adopt an SIR epidemiological model in which recovery of a
vertex corresponds to the discovery of the adversary on that system. We assume that a
detected adversary is fully removed from the network, i.e. the infection scenario ends.
To generate the infection network, we again consider an ensemble of epidemic sce-
narios covering all vertices in the target network. As before, we run each infection
until it can spread no further: if a vertex is “cured” before the contagion can spread
to all reachable systems, the scenario is run again from all starting points until the
epidemic completes from each one. In this way, by the time the infection successfully
reaches that targets from a distant starting system, there have been multiple scenarios

24

(a) Five gatekeepers (cyan) of single target (red)
shown on SI infection network.

(b) Two gatekeepers (cyan) of single target (red)
shown on SIR infection network.

Figure 17. Gatekeepers of Exchange server.

completed from more close-by systems. The resulting infection network resembles the
associated authnet but with higher weight given to shorter paths to the targets.

We demonstrate the SIR model on a diﬀerent target network, one including all
systems that can reach a single Exchange server. We choose a 10% detection rate9
per access: this means that after two hops there is an 18% chance of detection, after
three hops a 24% chance, and so on. The SIR infection network can be derived from
the combined authnet as before, by restricting it to include only the shortest paths
between the targets and ancestor systems. We assign a weight to edges as follows: for
an infection starting at vertex s that is n hops from the target, t, each edge (xi, xi+1)
along this path receives a weight wi,i+1 = pn−1. In cases where the same edge belongs
to more than one path, it assumes the weight of the highest-weight path. To ﬁnd the
gatekeepers, we employ a weighted betweenness measure

b(v)tmax,w = max
t∈T

wv
st
wst

(cid:88)

s

(11)

where wv
st is the sum of the edge weights along all shortest paths from s to t that pass
through v, and wst is the sum of the edge weights along all shortest paths between s
and t. For a given path of length d(s, t),

wst =

d(s,t)−1
(cid:88)

i

wi,i+1

(12)

where wi,i+1 is the weight of the edge E = (xi, xi+1), s = x1, and t = xd(s,t).

The gatekeepers for this network are shown in Figure 17 (b); for comparison, in
Figure 17 (a) we include the gatekeepers for the corresponding network without the

9The detection rate need not be especially accurate, but can be tuned as an attenuation factor controlling
how “far out” from the target set defenders should set their sights.

25

possibility of detection (SI model)10. Fewer gatekeepers are needed at the same outlier
threshold for the SIR infection scenario, since long paths are attenuated. The SIR
model is most practical in resource-scarce environments, where defenders can only
aﬀord to focus on a small subset of the most critical conduit systems—the SIR model
directs this focus to key systems one or two hops out from the targets.

6. Conclusions

An analytical approach has been presented that is useful for identifying systems and
accounts at risk of compromise by an adversary moving laterally through a computer
network. The adversary was modeled as an epidemic spreading through the network of
authentication relationships via credential chaining. These relationships take the form
of a directed graph, called the authentication network, derived from Administrator
access and active session data, which together provide a comprehensive and timely
map of credential exposure across the network. The infection network that results
from running epidemic scenarios on the authnet was analyzed using graph centrality
measures and other characteristics to identify critically exposed systems. Finding such
systems is essentially an outlier detection problem: density-based clustering is used to
ﬁnd exceptional vertices in the multi-dimensional centrality space.

We applied this approach to study three sources of exposure. First, we employed an
SI epidemiological model to identify systems, which, either independently or collec-
tively, provide wide and far-reaching access to many other systems across the network:
these spreaders are eﬃcient facilitators of lateral movement and are thus of value to the
adversary. Two diﬀerent countermeasures were investigated: we employed community
detection to determine how access controls might be tightened on individual accounts
to reduce their spreadability, and next the global policy of disabling remote access for
local accounts was analyzed for its eﬀect on spreadability. We found that, on networks
where feasible, this global restriction has a signiﬁcant eﬀect on spreadability, reducing
the number of descendants and eccentricity of top spreaders by as much as 97% and
80%, respectively. More generally, the proposed framework allows analysts to explore
the eﬀectiveness of diﬀerent countermeasures against diﬀerent threat models without
the need for test deployments.

Next, we identiﬁed connected systems with active sessions by Administrative ac-
counts in diﬀerent security tiers, indicating the potential for privilege escalation. These
escalators are characterized by the number of new accesses that the privilege escalation
grants, which can be used to ascertain signiﬁcance depending on the threat model: es-
calators with many connections, only a few of which result in a large increase in access,
are more relevant to targeted adversaries that know where they are going; escalators
with more modest access expansion spread more evenly over its connections are of more
concern against a random adversary. This analysis can be used to identify individual
Administrator accounts that frequently cross security tiers when accessing systems
remotely, suggesting either an access control problem or signaling a need to schedule
remote logins so that cross-tier sessions are not mutually accessible. Additionally, this
methodology can be used to explore how well countermeasures that limit credential
residue on systems reduce the signiﬁcance of escalators. We found that under the as-
sumption that Windows Remote Credential Guard, which reduces credential residue

10Note that two of the gatekeepers are fully “blocked” by two others in Figure 17 (a) and so would ordinarily
not be considered; we include them here to illustrate how the possibility of detection reduces the centrality and
signiﬁcance of these more distant vertices.

26

for remote interactive logins, is installed on all systems and found that active sessions
with privileged credential residue were reduced by 25%, and that fewer escalators could
reach the highest-privileged accounts.

Lastly, we applied this approach to the more reactive problem of real-time cyber
defense. Given a set of key defendable assets, we identiﬁed gatekeepers—conduit sys-
tems through which an adversary must pass en route to these assets. We employed an
SIR epidemic model, with recovery corresponding to detection, to more realistically
characterize the adversary in the defensive setting. Systems with high shortest path
betweenness centrality with respect to the target systems were identiﬁed via outlier
analysis as gatekeepers—these systems lie at the frontier of the cyber attack and so
are good candidates for the placement additional “early warning” defensive resources.
This methodology has been demonstrated on a Windows network, but the approach
is general once the authentication network is built. For Windows Domains, the data
necessary to build the authentication network can be acquired via common Domain
queries and from Windows Event Logs describing logon, logoﬀ, and reboot events.
Analyses relevant to Active Directory conﬁguration and Domain-wide mitigations
need only to be conducted periodically, where the eﬀectiveness of diﬀerent mitiga-
tions can be explored by studying how well contagion spreads on the corresponding
authnets. The results of this kind of study should provide analysts with the ability to
make cost/beneﬁt decisions regarding large-scale mitigations or conﬁguration changes.
Meanwhile, analyses of gatekeeper systems are more relevant to the daily tempo of
defensive cyber operations: as active sessions come and go, there is a shifting landscape
of authenticated routes to targets. Logs can be queried daily or even hourly in order
to maintain an up-to-date authnet for with current gatekeeper candidates.

Because it is so quiet and tends to look so normal, authenticated lateral movement
remains a daunting defensive challenge. On large networks with many privileged ac-
counts, there is a lot of noise and little signal, and generally only the known critical
systems are observed closely by defenders. This work seeks to improve prevention by
helping analysts tighten access conﬁgurations and test protective measures, so that
that the adversary has a harder time moving around the network and escalating priv-
ileges. This work also seeks to improve detection by cueing network defenders on
where to look for adversarial accesses in order to better anticipate movement towards
critical systems. While running the correlations and crafting alerts to detect stealthy
lateral movement and credential theft remains the utmost challenge, the input from
this analysis can help defenders scope these activities to the most exposed systems on
the network.

Acknowledgement

The author would like to thank colleague Max Kresch for providing valuable comments
on a draft version of this article.

References

[1] Ponemon L. 2017 cost of data breach study. Ponemon Institute; 2017.
[2] CrowdStrike. 2018 global threat report. CrowdStrike; 2018.
[3] Newman MEJ. Spread of epidemic disease on networks. Phys Rev E. 2002;66(016128).
[4] Newman MEJ. Networks: An introduction. Oxford University Press; 2010.

27

[5] Meyers L, Newman MEJ, Pourbohloul B. Predicting epidemics on directed contact net-

works. Journal of Theoretical Biology. 2006;240:400–418.

[6] Sander L, Warren C. Percolation on heterogeneous networks as a model for epidemics.

Mathematical Biosciences. 2002;180:293–305.

[7] Kephart JO, White SR. Direted-graph epidemiologial models of computer viruses. In:

IEEE Symposium on Security and Privacy; 1991. p. 343–361.

[8] Wang C, Knight JC, Elder MC. On computer viral infection and the eﬀect of immuniza-

tion. In: ACSAC; 2000. p. 246–256.

[9] Zou C, Towsley D, Gong W. Email virus propagation modeling and analysis. Tech Rep

CSE-03-04. 2002;.

[10] Acemogluo D, Malekian A, Ozdaglar A. Network security and contagion. Journal of Eco-

nomic Theory. 2016;166:536–585.

[11] Goyal S, Vigier A. Attack, defense and contagion in networks. Review of Economic Stud-

ies. 2013;81(4):1518–1542.

[12] Shao S, Huang X, Stanley H, et al. Percolation of localized attack on complex networks.

New Journal of Physics. 2015;17(023049).

[13] Blume L, Easley D, Kleinberg J, et al. Network formation in the presence of contagious
risk. ACM Transactions on Economics and Computation - Special Issue on Algorithmic
Game Theory. 2013;1(2).

[14] Piraveenan M, Prokopenko M, Hossain L. Percolation centrality: Quantifying graph-

theoretic impact of nodes during percolation in networks. PLoS One. 2013;8(1).
from:

https://github.com/PowerShellMafia/

2016. Available

[15] Powersploit

;

PowerSploit.

[16] Robbins A, Vazarkar R, Schroeder W. Bloodhound ; 2016. Available from: https://

github.com/BloodHoundAD/BloodHound.

[17] Bastian M, Heymann S, Jacomy M. Gephi: An open source software for exploring and
manipulating networks ; 2009. Available from: http://www.aaai.org/ocs/index.php/
ICWSM/09/paper/view/154.

[18] Freeman LC. A set of measures of centrality based on betweenness. Sociometry. 1977;

40:35–41.

[19] Estrada E, Higham D, Hatano N. Communicability betweenness in complex networks.

Physica A. 2009;388:764–774.

[20] Bonacich PF. Power and centrality. American Journal of Sociology. 1987;92:1170–1182.
[21] Katz L. A new status index derived from sociometric analysis. Psychometrica. 1953;

18(1):39–43.

[22] Morone F, Makse H. Inﬂuence maximization in complex networks through optimal per-

colation. Nature. 2015;524:65–68.

[23] Ester M, Kriegel H, Sander J, et al. A density-based algorithm for discovering clusters in
large spatial databases with noise. In: Proceedings of the Second International Conference
on Knowledge Discovery and Data Mining (KDD-96). AAAI Press; 1996. p. 226–231.
[24] Kitsak M, Gallos L, Havlin S, et al. Identifying inﬂuential spreaders in complex networks.

Nature Physics. 2010;6:888–893.

[25] Girvan M, Newman MEJ. Community structure in social and biological networks. Pro-

ceedings of the National Academy of Science. 2008;99:7821–7826.

[26] Tian L, Bashan A, Shi D, et al. Articulation points in complex networks. Nature Com-

munications. 2017;8(14223).

[27] Borgatti S. Identifying sets of key players in a social network. Comput Math Organiz

Theor. 2006;12:21–34.

[28] Chen Y, Paul G, Havlin S, et al. Finding a better immunization strategy. Physical Review

Letters. 2008;101(058701).

[29] Verizon. 2018 data breach investigations report. Verizon; 2018.
; 2016. Avail-
[30] Plett C,
able
https://docs.microsoft.com/en-us/windows-server/identity/
securing-privileged-access/securing-privileged-access-reference-material.

et al. Securing privileged access

reference material

from:

28

[31] et

al CP.

Protected

users

security

group

;

2016. Available

from:

https://docs.microsoft.com/en-us/windows-server/security/
credentials-protection-and-management/protected-users-security-group.

[32] Falde K. Restricted admin mode

;
2013. Available from: https://blogs.technet.microsoft.com/kfalde/2013/08/14/
restricted-admin-mode-for-rdp-in-windows-8-1-2012-r2/.

rdp in windows

2012

8.1

for

r2

/

[33] Lich B, et al. Protect remote desktop credentials with windows defender remote cre-
dential guard ; 2018. Available from: https://docs.microsoft.com/en-us/windows/
security/identity-protection/remote-credential-guard.

[34] Gouldand R, Fernandez R. Structures of mediation: A formal approach to brokerage in

transaction networks. Sociological Methodology. 1989;19:89–126.

[35] Giuliani E. Role of technological gatekeepers in the growth of industrial clusters: Evidence

from chile. Regional Studies. 2011;45(10):1329–1348.

[36] Graf H. Gatekeepers in regional networks of innovators. Cambridge Journal of Economics.

2011;35(1):173–198.

[37] Easley D, Kleinberg J. Networks, crowds, and markets: Reasoning about a highly con-

nected world. Cambridge University Press; 2010.

[38] Dolan-Gavitt B. cachedump.py ; 2014. Available from: https://github.com/Neohapsis/

creddump7/blob/master/cachedump.py.

[39] Tarasco A, Tarasco M. pwdump7 ; ???? Available from: http://www.tarasco.org/

security/pwdump_7/.

[40] Bialek J.

Invoke-ninjacopy.ps1

from: https://github.com/
PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1.
[41] Delpy B. mimikatz ; 2014. Available from: https://github.com/gentilkiwi/mimikatz.
[42] Russinovich M, Richards A. Procdump v9.0 ; 2017. Available from: https://docs.

2016. Available

;

microsoft.com/en-us/sysinternals/downloads/procdump.

Appendix A. Authentication and Credentials

In this Appendix, we provide some details on the various authentication technologies
employed on Windows systems and Domains.

A.1. Users and Groups

A user account is the digital identity of a user in relation to a computer or network.
In addition to an identiﬁer and an authenticator, like a password, the user account
declares the authorizations of the user, including access controls, permissions, and so
on. A user account can be either local to a computer, for which authentication takes
place against the computer’s own security database, or it can belong to the Domain, in
which case authentication takes place against the Domain’s centralized database. The
centralized database is maintained by the Domain Controller, which provides account
and directory services across the Domain via the Microsoft Active Directory service.
A group is a collection of users sharing common privileges and access controls. Like
user accounts, groups can be local to a system or can apply at the Domain level.
Groups are a useful way of controlling the access and privilege of a large number of
similar accounts, and for controlling user privileges that apply to a large number of
systems in the Domain.

One important group, the Local Administrators, gives members full administrative
control of the system. Every system generally has a “built-in” Administrator account
in this group; often ordinary user accounts, like that of the system owner, are added

29

to this group as well. When a collection of users needs Local Administrator access
to many systems, common practice is to gather these users together into a Domain
group, and then place this group into each system’s Local Administrator group. The
Domain Administrators group is one such group, the members of which generally
have Local Administrator privileges on all systems within the Domain, in addition to
key components like Domain Controllers. Lower-tier Administrators, like desktop or
database Administrators, generally belong to groups with more restrictive access or
with fewer privileges on authorized systems.

A.2. Logon Types

Information systems can be accessed either locally or remotely over a network. In
Microsoft parlance, an interactive logon occurs when a user enters a credential either
at the local or remote console of a computer; these are called Microsoft Type 2 and
Type 10 logons, respectively. Interactive logons give the user the ability to provide
input to and receive output from the system, and to access additional resources from
the remote system. In contrast, a network logon (Type 3) occurs after an interactive
logon to the system initiating the network logon, and provides the user access to certain
shared resources, like ﬁles or printers, over the network. This authentication happens
in the background, making use of the user credential that was provided as part of the
initial interactive logon.

In order to support additional access and resource requests after interactive logon,
host systems must have access to user credentials. Microsoft Single Sign-on conve-
niently automates all subsequent authentications so that users aren’t prompted for a
password each time a new resource is accessed. For this to work, the user’s credentials
must be made available to the range of security service providers (SSP) that establish
these accesses, and so are placed in the running memory allocated to the Local Se-
curity Authority Server Service (LSASS) process that controls the SSPs. For remote
interactive logons, this means that credentials might be sent over the network and
placed in the remote system’s running memory.

A.3. Impersonation Levels

When a user authenticates to a remote server, they might require access to restricted
services or other remote hosts. This requires that the remote server negotiate access on
the client’s behalf. The extent to which the remote server can do this is formalized in
terms of four impersonation levels: anonymous, where the remote server has no ability
to act on the client’s behalf (it has no information about the identity of the client user);
identiﬁcation, where the remote server can obtain the client’s identity for the purpose
of doing access control checks; impersonation, where the remote server can access local
resources as the client; and delegation, where the remote server can access remote
resources as the client. Delegation might involve the remote server authenticating as
the client to other remote systems, and can be constrained to apply to only speciﬁc
services.

A.4. Authentication Protocols

Windows systems use two primary authentication protocols: NTLMv2 and Kerberos.
NTLMv2 was introduced as the default authentication package with Windows NT4.0

30

in 1996: it is a cryptographic challenge/response that makes use of the client user’s NT
hash11 as the key. The NT hash can be used for both local and Domain logins: in the
event of local login, the NT hash is veriﬁed against the system’s password database, the
Security Account Manager (SAM); for Domain, NTLMv2 is used over the network to
authenticate the user against the Domain Controller’s security database. After authen-
tication, the NT hash is placed into LSASS memory on the local system for subsequent
operations that require impersonation. NTLMv2 can also be used to support network
and remote interactive logons, like Remote Desktop Protocol (RDP); after remote
interactive authentication, the NT hash is placed in the remote system’s LSASS pro-
cess memory. On Domain-joined systems, the NT hashes of non-local accounts that
access the system via NTLMv2 are cached in the registry so that these accounts can
authenticate again in the future if the Domain Controller is not available.

Since Windows 2000, the default package for Domain authentication has been Ker-
beros, which is a centralized service that employs symmetric encryption to authenti-
cate users and control access to requested services (see Appendix A). When the user
contacts the Kerberos Authentication Server, they receive encrypted data called the
ticket-granting ticket (TGT) and a session key; the user then provides the TGT to
another Kerberos component called the Ticket-Granting Server (TGS) along with a
requested service, like a ﬁle share or email. The TGS then provides the user with a
service ticket, which is an encrypted session key for use with the requested service.
These tickets are all stored in LSASS for a prescribed duration (default is seven days
for TGT, renewed every ten hours). To summarize, there are three Kerberos artifacts
related to authentication available on the client: the TGT, the TGS session key, and
any service tickets. For network and remote interactive logins, ordinarily only per-
tinent service tickets are stored in memory on the remote host; however, if the user
requires access to additional services from the remote server (e.g. if they wish to access
a back-end database), then the TGT and TGS session key are stored on the remote
server for delegation.

Logon Authentication
Type

Package

2

3

10

NTLMv2

Kerberos

NTLMv2

Kerberos

NTLMv2

Kerberos

Imp
Level
Id
Imp
Id
Imp
Id
Imp
Id
Imp
Del
Id
Imp
Id
Imp
Del

Local

Remote

Local w/
WCG
-
Hash
-
Hash
-
TGT,ST,TGS SK
-
TGT,ST,TGS SK
Hash
-
Hash
Hash
-
Hash
TGT,ST,TGS SK
-
TGT,ST,TGS SK
TGT,ST,TGS SK
ST
TGT,ST,TGS SK
TGT,ST,TGS SK TGT,ST,TGS SK TGT,ST,TGS SK
-
Hash
-
ST

Hash
Hash
TGT,ST,TGS SK
TGT,ST,TGS SK
TGT,ST,TGS SK TGT,ST,TGS SK

Hash
-
-
-
-

Remote w/
WCG

-
-
-
ST
ST
-
-
-
ST
ST

Table A1. Credential residue by Logon Type, Authentication Package, and Impersonation Level, on hosts
with and without Windows Credential Guard (WCG). TGT = ticket-granting ticket, ST = service ticket, TGS
SK = ticket granting server session key, Id = Identiﬁcation, Imp = Impersonation, Del = Delegation.

11The NT hash is the unsalted MD4 hash of the user’s UTF-16-encoded password.

31

Appendix B. Credential Theft and Lateral Movement

Successful interactive logon to a Windows system generically involves three impor-
tant steps vis-`a-vis credentials: the user provides a credential that is veriﬁed by a
security authority, the user is granted access to the information system and creden-
tials are placed into running memory for Single Sign-on, and, for Domain logons, the
user’s credential is cached by the local security authority for future authentications
in the event that the Domain security authority is unavailable. We highlight these
three stages because each involves the location of a user’s credentials: primary se-
curity database, running memory, and cache—these are the spots the adversary will
search for credentials.

Adversarial tradecraft for the theft of user credentials is wide and deep, with diﬀer-
ent tools and techniques depending on the types and storage locations of credentials.
The following is a brief overview of common methods and tools.

B.1. Local SAM and Registry

When a Windows system is running, the SAM and related registry ﬁles are locked and
cannot be read or accessed by non-SYSTEM entities. If an adversary is able to escalate
privileges to SYSTEM, however, the native tool reg.exe can be used to easily interact
with the registry. Prior to Windows 10, sensitive data in the SAM is encrypted with
a key (called the Syskey) derived from data found in the SYSTEM registry hive: tools
like bkhive can extract the Syskey and then tools like samdump2 use it to decrypt the
SAM and dump the NT hashes12. Metasploit Meterpreter’s hashdump post-exploitation
module combines these two actions. In a similar vein, cached Domain hashes can also
be decrypted and dumped from the registry: tools like cachedump.py [38] can recover
them but they are heavily obfuscated with PBKDF2 and must be cracked to obtain
the NT hash.

If escalating to SYSTEM-level privileges is a problem, it is possible to circumvent
the ﬁlesystem locks on the registry entirely by reading data straight from the disk
volume with only Local Administrator rights. The tool pwdump7 [39] uses its own
ﬁlesystem drivers in place of the standard Win32 API ﬁle read functions that are
subject to ﬁlesystem locks; it can decrypt and dump SAM hashes in one execution.
Altneratively, the tool ninjacopy [40] is a PowerShell utility with its own NTFS
parser so that it too can dispense with Win32 API calls. The rub is that pwdump7
must be loaded onto the target system, potentially triggering antivirus, and, while
ninjacopy.ps1 can be launched remotely, the script must be injected into running
memory as a dynamic-link library (DLL), which might trigger alarms.

B.2. Memory

Perhaps the most common route to credentials is through running memory. Microsoft
Single Sign-on ensures that a user’s credentials are available in LSASS memory dur-
ing active sessions if they are needed for impersonation or delegation. In additional
to hashes and Kerberos artifacts, plaintext passwords are stored for use by other au-
thentication pacakges, like Windows digest and terminal services. The tool mimikatz
[41] has been wildly successful at retrieving each of these credentials from LSASS.

12With Windows 10, the SAM encryption scheme has changed and no longer uses Syskey, rendering these
approaches ineﬀective.

32

It operates either with or without DLL injection into LSASS, and can even operate
on a static LSASS memory dump (obtained, for example, with the Sysinternals tool
ProcDump [42]). Since Windows 8.1, credentials are no longer stored in memory by
default; however, this behavior can be changed by altering the registry. This requires
SYSTEM-level privileges, but so too does injecting into or otherwise interacting with
LSASS memory, and so this safeguard does not pose any additional challenges to an
attacker.

If hashes alone will suﬃce, Metasploit’s hashdump run as a Meterpreter command
and older executables in the pwdump* family and its variants retrieve user hashes from
memory.

B.3. Remote Access

Lateral movement involves the remote access of one system from another. Methods of
remote access vary, and which is chosen depends on host conﬁguration, availability of
tools, desired level of stealth, and possibly the type of credential available for use. Prior
to establishing remote access with a compromised account, the adversary will generally
use the stolen credential to create a user access token for the compromised account on
the source system. This can be done with a stolen hash (called “pass-the-hash”) with
tools like Windows Credential Editor or mimikatz, or a Kerberos TGT (called “pass-
the-ticket”) with mimikatz. The NT hash can also be used to request TGTs from the
TGS (called “overpass-the-hash”). Once the user access token is created, the adversary
can simply use native Windows utilities to authenticate to and remotely access the
target system. Useful native tools for remote access include PsExec, Windows Man-
agement Instrumentation Command-Line Utility (WMIC), Windows Remote Manager
(WinRM), and Distributed Component Object Model (DCOM) communication. These
technologies allow for the execution of remote processes, and so are quite general in
their capabilities. For example, if an interactive session is desired, they can be used to
spawn a cmd.exe shell or PowerShell console.

Interactive login can also be achieved with RDP, telnet, or SSH if available.

Appendix C. Kerberos Protocol

Figure C1 is a simpliﬁed diagram of the Kerberos protocol, emphasizing the various
key exchanges relevant to credential theft. 1) Bob requests a ticket-granting-ticket
(TGT) from the Authentication Server. 2) The server generates a random session key
(the Ticket-Granting Server (TGS) session key) and encrypts one copy with the TGS’s
key (this is the TGT) and one copy with Bob’s key, and 3) sends them both to Bob.
Bob can decrypt the session key with his own secret key and keeps it handy. 4) Bob
requests a service (mail) from the TGS by sending the TGT to the TGS. The TGS can
decrypt the TGT and retrieve the TGS session key. 5) The TGS generates a random
session key and encrypts one copy with the TGS session key and one copy with the
mail server’s key (this is the service ticket). 6) Both of these tickets are sent to Bob,
who uses the TGS session key to decrypt the session key. 7) Bob sends the service
ticket to the mail server, who decrypts it and retrieves the session key. Both Bob and
the mail server can now use the session key for secure communications. Authentication
is indirectly achieved since the encrypted session keys can only be decrypted and used
by entities in possession of the intended recipient’s credential.

33

Figure C1. Brief schematic of the various Kerberos key exchanges required to gain access to a server. See
text for details.

34

BobIt's Bob!Authentication      ServerBobmail+Ticket-GrantingServerBobMail ServerGenerate Session Key:Bob's CredentialTicket-Granting Server'sCredentialGenerate Session Key:Mail Server's CredentialHere's a session key you can use to  connect securely to the Ticket-Granting Server:I'd like to access my email. Here's a sessionkey we can use so that you can send me another session key:Here's another session key you can use to  connect securely to the Mail Server:I'd like to access my email.  Here's a sessionkey we can use:TGT{{Service TicketTGSSession Key