Securing Connected Vehicle Applications with an Efﬁcient
Dual Cyber-Physical Blockchain Framework

Xiangguo Liu1, Baiting Luo1, Ahmed Abdo2, Nael Abu-Ghazaleh2, Qi Zhu1

1
2
0
2

b
e
F
5
1

]

R
C
.
s
c
[

1
v
0
9
6
7
0
.
2
0
1
2
:
v
i
X
r
a

Abstract— While connected vehicle (CV) applications have
the potential to revolutionize traditional transportation system,
cyber and physical attacks on them could be devastating. In this
work, we propose an efﬁcient dual cyber-physical blockchain
framework to build trust and secure communication for CV
applications. Our approach incorporates blockchain technology
and physical sensing capabilities of vehicles to quickly react to
attacks in a large-scale vehicular network, with low resource
overhead. We explore the application of our framework to three
CV applications, i.e., highway merging, intelligent intersection
management, and trafﬁc network with route choices. Simulation
results demonstrate the effectiveness of our blockchain-based
framework in defending against spooﬁng attacks, bad mouthing
attacks, and Sybil and voting attacks. We also provide analysis
to demonstrate the timing efﬁciency of our framework and the
low computation, communication, and storage overhead for its
implementation1.

I. INTRODUCTION

Connected vehicle (CV) applications are expected to
transportation system. Connected
revolutionize traditional
vehicles exchange messages with surrounding vehicles and
infrastructure units for extending perception range, exchang-
ing trafﬁc status in downstream, and coordinating planning
and control to improve safety, economy, and trafﬁc ﬂow.
The U.S. Department of Transportation (USDOT) has iden-
tiﬁed a number of promising CV applications and started
deploying them at three test sites in Florida, New York, and
Wyoming [1]. Many other academic and industry testbeds
and deployments are also under way [2]. However, cyber
and physical attacks targeting these systems can have severe
safety implications, causing accidents or disrupting trafﬁc
ﬂow. For example, an intelligent intersection management
system can experience deadlock if messages have a long
transmission delay or get lost under the denial of service
attack [3], [4]. Merging in the highway will be more prone to
accidents if vehicles get wrong position data of surrounding
vehicles under spooﬁng and false message attacks [5]. As
the impact of cyber threats [6] on CV operations can be
so destructive, it is essential to develop security solutions
against them.

1Xiangguo Liu, Baiting Luo and Qi Zhu are with the Department
and Computer Engineering, Northwestern University,
IL 60201, USA. xg.liu@u.northwestern.edu,

of Electrical
Evanston,
baitingluo2019@u.northwestern.edu,
qzhu@northwestern.edu.

2Ahmed Abdo and Nael Abu-Ghazaleh are with the Department of
Electrical and Computer Engineering, University of California, Riverside,
CA 92521, USA. aabdo003@ucr.edu, nael@cs.ucr.edu.
1This work has been submitted to the IEEE for possible publication.
Copyright may be transferred without notice, after which this version may
no longer be accessible.

Research in the literature has investigated possible meth-
ods to mitigate attacks on CV applications. Cryptographic
techniques, message authentication, and digital signatures are
widely used for computer networks, and can be leveraged for
vehicular communication networks [7]. Graph-based meth-
ods [8], [9], [10] utilized in social networks may be used to
distinguish attackers from honest vehicles by ﬁnding a cut
between their representations in the graph. Recent advances
in hardware-assisted security are also leveraged to ensure the
integrity of the sensor data in CVs [11].

A central issue in CV security is to build trust among
vehicles. The authors in [12] reviewed methods to evaluate
message trustworthiness in the vehicular network, including
entity-oriented, data-centric, and collaborative trust models.
The entity-oriented trust models evaluate messages’ trust-
worthiness based on the trustworthiness of their senders. A
Certiﬁcation Authority is often leveraged to record vehicles’
behavior and provide estimations of trust; otherwise, a ve-
hicle needs to collect information and make evaluation by
itself. The data-centric trust models evaluate the content of
messages to estimate the trust for them. In this category,
Bayesian inference, and Dempster-Shafer theory are popular
methods to estimate the plausibility and trustworthiness of
messages, however they may result in false positives for
detecting valid messages [13]. The collaborative trust models
are based on integrating trust estimates from other peer vehi-
cles, which could be time-consuming and attacked by mali-
cious players. The Security Credential Management System
(SCMS) is a proof-of-concept message security solution that
is supported and developed by USDOT. Instead of evaluating
message trustworthiness by each vehicle, message senders
with credentials can be trusted in the system. However, since
a certiﬁed vehicle can be attacked later, it is challenging
for certiﬁcate authorities to track and update vehicles’ status
quickly. Thus, SCMS on its own does not prevent application
level attacks [5].

Blockchain [14] technology has natural strength in record-
ing transactions/events and reaching a secure consensus
among all users. It provides a promising direction for build-
ing trust in CV applications, as shown in [15], [16], [17].
However, the required secure consensus operations in those
earlier works introduce high overhead that makes it difﬁcult
for applying them in practical CV applications.

In this work, we present an efﬁcient dual cyber-physical
block-chain framework to build trust and secure communi-
cation for CV applications. The framework enables us to
efﬁciently track and update a trust estimate for each vehicle
in a large-scale trafﬁc network, with low resource overhead.

 
 
 
 
 
 
sharding technique. Our framework design enables record
transfer when vehicles move across different regions. Each
region can have its blockchains updated and maintained
with intra-region and inter-region communication to promote
scalability.

Our contribution in this paper can be summarized as

follows:
• We develop a novel dual blockchain framework that
leverages cybersecurity techniques, physical sensing ca-
pabilities of vehicles, and their travel histories to build
trust and secure communication in a large-scale vehicular
network, in which every vehicle can get updates timely
with low resource overhead.

• We demonstrate the effectiveness of our

• We use a stake-based consensus mechanism across the
faster trust points blockchain and the slower proof-of-
travel blockchain, a sharding technique for partitioning
vehicles into regions, and a dedicated summary step to
reduce computation, communication and storage costs of
our framework so that it is practical for CV applications.
framework
against a few prevalent attacks, including message spoof-
ing attack, bad mouthing attack, and Sybil attack. We
illustrate the performance and timing efﬁciency of our de-
fense system via simulations in the SUMO [18] simulator,
and also analyze its resource overhead and trade-offs.
The rest of the paper is organized as follows. Sec-
tion II brieﬂy introduces blockchain and Algorind, a re-
cent blockchain design that we leverage in this paper, and
previous work in applying blockchain to transportation sys-
tems. Section III presents the design of our dual blockchain
framework. Section IV analyzes our framework’s defense
performance against message spooﬁng attack, bad mouthing
attack, and Sybil and voting attack, and presents the simula-
tion results in SUMO. Section V analyzes the computation,
communication and storage overhead for each vehicle, and
the trade-offs in adjusting the region size that one blockchain
covers and the block generation period. Section VI concludes
the paper.

II. BACKGROUND AND RELATED WORK

A. Threat Models to Connected Vehicles

In this work, we focus on the attacks from vehicle-side
devices, e.g., those from the On-Board Units (OBUs) for
CV applications [3]. While the techniques can be extended
to protect against attacks on infrastructure units, it is rea-
sonable to expect that it is typically harder to attack the
infrastructure. In particular, we consider malicious vehicles
them
that can generate falsiﬁed messages and broadcast
to other vehicles. It is important to note that we do not
assume that the attacker can spoof the sender identities in the
messages. We assume that such an identity is veriﬁable and
non-forgeable with digital signatures technique (e.g., SCMS).
Moreover, we assume that the communication infrastructure
is mostly resilient and most surrounding vehicles within
a known communication range should receive the same
message within a known time bound. We also assume that

Fig. 1. Overview of our proposed dual cyber-physical blockchain frame-
work. The ego vehicle is traveling and sharing trafﬁc information with
surrounding vehicles. In the trust points blockchain, surrounding vehicles
leverage their physical sensing capability to verify the messages sent from
the ego vehicle. If a falsiﬁed message is detected and reported, the voting
contract will instantly start collecting surrounding vehicles’ opinions and
adjust trust points of relevant vehicles. In the proof-of-travel blockchain, ego
vehicle and surrounding vehicles record the number of received messages
from different vehicles, which can reﬂect the travel activities and their
contributions. To reduce resource overhead, the credits are updated in a
longer period than that of trust points blockchain for reﬂecting long-term
reputation. The stake of each vehicle is computed from both its trust points
and proof-of-travel credits. Our dual blockchain design is secure as long as
more than 2/3 of the stake is held by honest vehicles.

The design of our framework is shown in Fig. 1. It builds and
updates two blockchains for recording vehicles’ communica-
tion activities and establishing trust among vehicles. The ﬁrst
blockchain, named trust points blockchain, is used to quickly
identify and record malicious misbehavior. Intuitively, telling
the truth and getting acknowledged by most neighbors will
earn trust points, while telling a lie will lose trust points.
The second blockchain, named proof-of-travel blockchain,
accumulates and records each vehicle’s long-term contri-
bution to the CV community. Intuitively, the more trafﬁc
information it shares with others, the more contribution to
the CV community it gets and the higher proof-of-travel
credits it can receive from others. This blockchain serves as
a low-cost conceptually-centralized tracker of vehicle trust,
enabling two vehicles to establish trust when they do not
have extended experience with each other, in a way that is
secure and dependent on consensus.

Our proposed framework makes it difﬁcult

to launch
attacks, and facilitates quick detection and reaction to misbe-
havior. Speciﬁcally, once a suspicious message is reported,
surrounding vehicles can adapt to more cautious and conser-
vative actions within just hundreds of milliseconds. Within
one minute, surrounding vehicles can leverage their sensing
capabilities to verify the message and reach consensus on it.
Then, the trust points of the vehicle that sent the suspicious
message will get updated in the trust points blockchain. On
the other hand, as travel history is recorded in the proof-of-
travel blockchain, vehicles with poor travel history cannot
easily start certain attacks such as Sybil attack or ﬂooding
attack (or other attacks that require repeated transmission).
Moreover, to improve the efﬁciency, we propose the concepts
of permanent address and current active address, which
can partition all vehicles into different regions with the

Without an accurate assessment of the trust, the intersection
manager will not be able to decide the passing order and
timing for vehicles, and they will have to adapt the traditional
trafﬁc rules as if there were stop signs in every direction.

3) Sybil and voting attack: In Fig. 2(c), there are two
route choices in the region. An attacker can generate fake and
pseudonymous vehicles by Sybil attack. Together they can
broadcast a falsiﬁed trafﬁc accident in one of the routes. In
a trust framework based on consensus, while honest vehicles
may disagree with the falsiﬁed accident, their voices could
be dominated by the attacker and Sybil vehicles in the
voting process for assessing the falsiﬁed accident, in which
case, other vehicles coming to this region will believe the
falsiﬁed accident and go through the other route, resulting in
congestion and low trafﬁc efﬁciency.

B. Blockchain and Algorand

Blockchain is literally a chain of blocks (called a ledger),
in which a block stores a set of transactions and the hash
value of the previous block. Transactions are public to
every user, and thus blocks can be veriﬁed by every user.
Blockchain is updated based on consensus algorithms to
guarantee that the state of the ledger is identical at all nodes.
The most well-known blockchain, bitcoin, is based on proof
of work. It assumes that a group of miners will build up
new blocks by consuming CPU resources to ﬁnd the right
cryptographic nonce. Once a new block is proposed by a
miner, other miners will verify it and start working on the
next block. Because the block generation process is not
deterministic, a hacker may successfully build a new block
with a slight possibility. In this way, a block is considered
to be conﬁrmed if it is followed by several other blocks. For
bitcoin, the block generating period is about 10 minutes, and
the conﬁrmation time can be 1 hour. Moreover, with proof
of work, miners may compete to earn proﬁts and dominate
the blockchain with more CPU resources, which could lead
to huge computation cost and energy consumption. Several
alternative consensus mechanisms are proposed to prevent
exhausting computation resources [14], [20].

Algorand is a recently proposed blockchain design that
enables efﬁcient block conﬁrmation time. It is based on proof
of stake, where users do not need to exhaust computation
resources. Instead, users need to deposit money as the stake.
The more money a user owns, the higher chance the user
can be selected as a block proposer or veriﬁer. Its security
is guaranteed theoretically as long as the majority of stake
is owned by honest users [21]. Furthermore, its scalability
is demonstrated with simulations of up to 500,000 users,
in which transaction conﬁrmation time can be shortened
to be within one minute [22], making it feasible for use
in some systems at real time. More speciﬁcally, for each
round r, a leader lr and a small set of veriﬁers SV r that
are randomly selected and publicized by cryptographic self-
selection participate. The leader will build and propagate
a new block, and then selected veriﬁers will reach the
Byzantine agreement on it within a ﬁnite number of steps.
Upon termination, the agreed block Br is added to the ledger.

Fig. 2. Threat models considered in our work. Subplot (a) displays that an
attacker sends falsiﬁed messages with wrong trafﬁc status on the highway
to mislead the green merging vehicles. Subplot (b) displays that an attacker
forges misbehavior of surrounding honest vehicles to hurt their reputation
and trafﬁc efﬁciency in the intelligent intersection. Subplot (c) displays that
an attacker forges two pseudonymous identities by launching a Sybil attack.
Together they report falsiﬁed trafﬁc accidents in one of the routes, and may
dominate the voice in voting among the surrounding vehicles so that the
falsiﬁed messages would not be detected. This attack may lead to larger
trafﬁc density and travel time because more honest vehicles will choose the
other route that is without the fake accident.

most honest vehicles have loosely synchronized clocks (e.g.,
using Network Time Protocol (NTP)) for the liveness of
blockchain. Finally, we assume that most vehicles in the
trafﬁc network are honest, such that most of the stake (more
than 2/3) can be held by honest vehicles to ensure the safety
of blockchain.

Under these assumptions, malicious attackers can com-
promise a small fraction of vehicles to broadcast falsiﬁed
position and velocity data, forge trafﬁc accidents and destroy
others’ reputation. Speciﬁcally, we consider three threat
models in this paper with popular and representative CV
applications, as shown in Fig. 2. Among them, the message
spooﬁng attack could target many other CV applications and
be defended by trust frameworks such as ours. The bad
mouthing attack and Sybil and voting attack in fact target
the trust framework itself, and as shown later, our blockchain
framework can effectively mitigate such attacks as well.

In Fig. 2(a),

1) Message spooﬁng attack:

two green
vehicles communicate with the vehicles on the highway to
adjust their speed for merging onto the highway. The attacker
(shown in black) can send out falsiﬁed position and velocity
data of itself, which may induce the green victim vehicles to
accelerate/decelerate. This may damage trafﬁc efﬁciency and
even put vehicles near the on-ramp at the risk of collisions.
A single malicious vehicle may start this type of attack when
no honest vehicle can judge the truth of the message or the
stake of attackers is overwhelming in the local area.

2) Bad mouthing attack: In Fig. 2(b), all vehicles send
their current and destination lanes as well as estimated
arriving time to a centralized intersection manager, which
then decides the passing order and timing of the vehicles,
similarly as in [4]. When a trust framework is deployed to
secure the communication, an attacker may maliciously re-
port misbehavior to degrade the trust for honest vehicles [19].

Since the block has already reached consensus and has
been conﬁrmed, the round period is exactly the transaction
conﬁrmation time.

Our framework leverages Algorand, combining its proto-
col design with our ideas of designing dual cyber-physical
blockchains at different time scales, using vehicles’ physical
sensing capabilities for verifying messages, and introducing
the concept of proof-of-travel credits in stake computation.
Moreover, to scale Algorand to CV applications in a large
trafﬁc network, we leverage the sharding technique [14]
for record transferring and sharing between blockchains in
different regions. By choosing an appropriate region size,
our framework design can have short round latency and low
overhead, while preventing vehicles from transferring records
frequently. In addition, our proposed summary step further
reduces the overhead for new vehicles.

C. Blockchain in Transportation

Blockchain has been leveraged by many researchers to ad-
vance applications in transportation systems in the literature.
[23] presents a blockchain based negotiation process to select
the most convenient electric vehicle (EV) charging station.
[24] leverages blockchain to record EV charging activities,
which enables information sharing while securing sensitive
user information. [25] presents a seven-layer conceptual
model for blockchain in transportation and discusses ride
sharing in the application layer.

There are also several works

that consider using
blockchain in vehicular networks. [15] reviews different
models for calculating reputations of vehicles, discusses
challenges of previously centralized and distributed meth-
ods, and indicates new directions on blockchain and fog
computing. [16] proposes to secure vehicular communication
by recording each message in blockchain, which is not
scalable. Its proof of work scheme also leads to heavy
computation burden. [17] proposes a blockchain based trust
management scheme for vehicular networks, in which road
side units (RSUs) update and maintain the blockchain. Its
consensus is partially based on proof of work, which still
leads to high computation cost for every RSU, and its
security in one region cannot be well protected once the
RSU is compromised. [26] leverages Bitcoin-NG and hier-
archical design to reduce transmission latency of blocks and
increases the throughput capacity. However, this hierarchical
design assumes that RSUs will maintain a higher-layer
blockchain, which processes all information from lower-layer
blockchains. It also has high computation resource demand
and is not resilient to attacks. [27] proposes a similar idea that
may also suffer from the failure of one node. [28] attempts to
mitigate the resource demands by proposing concepts of sub-
blockchains for different node types, e.g., vehicles, RSUs,
and stations. However, it lacks implementation details such
as communication across different sub-blockchains.

Our work addresses the challenge in applying blockchain
to CV applications with a novel framework design that is
introduced below in detail.

III. DESIGN OF OUR FRAMEWORK

To avoid confusion, in our work, messages carry traf-
ﬁc information that vehicles share with others, e.g., Basic
Safety Message (BSM), Cooperative Awareness Message
(CAM), Cooperative Perception Message (CPM), etc. To
build trust among vehicles via blockchain, vehicles may
generate transactions and broadcast them to other vehicles
in the same region. The transactions generally include the
report of malicious misbehavior, application of transferring
records, etc. By aggregating all transactions within a period,
one vehicle can then update all vehicles’ records and build
a block accordingly.

A. Framework Overview

Our blockchain design leverages the block generation and
consensus mechanism from Algorand. Technically speaking,
it is based on proof of stake. In our design, the stake is
computed from trust points and proof-of-travel credits. The
higher stake a vehicle holds, the higher chance it can be
selected as a leader or veriﬁer to maintain the blockchains.
When driving, only trafﬁc information sent from vehicles
with high trust points and proof-of-travel credits can be
viewed as trustworthy. Such design sets up a relatively
high threshold for malicious vehicles to manipulate the
blockchains and start attacks.

To update blockchain on time, and alleviate resource
demand for vehicles, we leverage the sharding method to
partition vehicles into subsets according to their traveling
region. Each vehicle has a permanent address and a cur-
rent active address. For trust points blockchain, attackers’
misbehavior should be exposed as soon as possible, and
surrounding vehicles in the current active region can respond
within a short time. Thus, trust points blockchain in one
region is maintained by those vehicles that claim to be active
in the current region and will only record those vehicles’
trust points. A vehicle that moves across different regions
can claim its new active region and have its trust points
record transferred. The detailed mechanism is introduced
in Section III-B. For proof-of-travel blockchain, since it
records a vehicle’s historical information over a long period
(e.g., 100 days), it is maintained by those vehicles that have
their permanent address in this region. It will only record
those vehicles’ proof-of-travel credits. In this way, different
regions will have their blockchains maintained and updated
independently.

Other details, such as the transaction generation and
physical veriﬁcation processes for the two blockchains, are
introduced in the following Sections III-B and III-C, respec-
tively.

B. Trust Points Blockchain

Trust points blockchain is mainly for identifying and
exposing malicious attackers. When one vehicle sends out
a message, surrounding vehicles within the communication
range can receive and verify it based on information from
their own on-board sensors or other sources (e.g., a message
with falsiﬁed position data may be deemed as suspicious

by surrounding vehicles using their own sensors2). Then
depending on the situation, various types of transactions can
be generated and sent. Each transaction includes transac-
tion ID (TID), smart contract type ID (SCID), senderID,
debateID, regionID, location, time and payload. Transaction
senders will encrypt the transactions with their private keys
and broadcast them. Receivers can verify the identity of
senders with the public keys. SCID identiﬁes the transaction
type and the corresponding smart contract for updating
vehicles’ points/credits. Location and time are the transaction
generation location and time. DebateID is the ID of the
vehicle that sends out the suspicious message. RegionID is
the ID of the region that a vehicle is moving into. TID is
the hash value of senderID, debateID, regionID, location and
time, and is considered unique. Various transactions are sent
in the following situations:
• If a vehicle disagrees with a message sent by another
vehicle, it can report this disagreement in a transaction
with SCID=0000.

• Upon receiving a disagreement transaction (SCID=0000),
other vehicles can take a stand on agreeing or disagreeing
in a new transaction with SCID=0000 if they have not
done so.

• If a vehicle disagrees with the judgement made in the
previous voting process (details of the process are intro-
duced later in Algorithm 1), it can report the disagreement
after enough evidence is gathered (i.e., when stake of
honest vehicles gets larger) in a new transaction with
SCID=0001.

• A vehicle moving to another region may apply to transfer

its records in a transactions with SCID=0002.
The transactions received within a period (i.e, the round
latency of trust points blockchain) are processed with our
designed contracts in Algorithms 1, 2 and 3.

1) Instant voting contract: Transactions with SCID=0000
are to report attackers and falsiﬁed messages. They are han-
dled by an instant voting contract, as shown in Algorithm 1.
Let us use the highway merging application in Fig. 2(a) to
help explain the algorithm. First, the attacker near the ramp
sends out a falsiﬁed message with wrong trafﬁc status to
mislead vehicles on the ramp. If there are honest vehicles
in both the examination and communication ranges, they
can also receive the message and may deem it suspicious
based on the information from their own on-board sensors.
They can then generate transactions with SCID=0000 to
report such ﬁndings and broadcast the transactions to other
vehicles in the region. Within a period, surrounding vehicles
within both the communication and examination ranges are
all supposed to take a stand. Then other vehicles in the
region collect all transactions and start the smart contract
based voting process as shown in Algorithm 1. The voting
process for this contract instance will classify all transaction
senders into two groups. One group of vehicles agree with

2How vehicles may verify messages based on physical information from
their own sensors or other sources is beyond the scope of this paper, which
focuses on the design of the blockchain framework.

the message’s content sent by the vehicle with debateID, and
the other group of vehicles disagrees with that. The contract
will make a ﬁnal judgment and update vehicles’ trust points
by comparing the two groups’ accumulated stake. The group
with the higher stake will be called majority and have their
trust points increased by 1, while the other group will be
called minority and have trust points of -1.

Algorithm 1: Instant Voting for SCID=0000 Trans-
actions
Result: Updated trust points for involved vehicles
Input: senderID, debateID, location, time, opinion
if time has not elapsed 2tbs since receiving the
suspicious message ( tbs denotes the time bound
that most vehicles in the same region can receive
the transaction) then

Find an ongoing contract with the same debateID,
different senderID, close location and time;
if no such contract then

Create a new contract instance for debateID;

end
if opinion is agree then

Add senderID to the agree group;

else

Add senderID to the disagree group;

end

end
if any contract has existed 2tbs then

Compare the stakes between the agree group and
the disagree group;
Increase the trust points of the majority by 1;
Set the trust points of the minority to be -1;

end

2) Redressing contract: A group of attackers with high
stake may dominate the voting process if the number of
surrounding honest vehicles is initially limited. To avoid
repeated attacks from the group of attackers, we design
the redressing contract, which allows re-evaluation of ve-
hicles’ opinions on the message content from the vehicle
with debateID. In particular, if a vehicle disagrees with the
previous voting result obtained by Algorithm 1, it can send
a transaction with SCID=0001, which triggers the redressing
process in Algorithm 2. The redressing algorithm ﬁnds all the
ended contracts that involve the debateID, and form groups
Gs and Go that represent all the vehicles agree and disagree
with debateID, respectively. Let N(Gs) and N(Go) denote
the accumulated state for group Gs and Go, respectively. If
the stake difference between the two groups is larger than a
threshold Nth, previous judgement can be redressed.

3) Transferring records contract: When a vehicle moves
across different regions, it is required to update its current
active region. This way the vehicles within the same active
region can communicate efﬁciently and the real-time per-
formance can be improved. To update the active region, a
vehicle needs to transfer trust points and copy its proof-of-

Algorithm 2: Redressing for SCID=0001 Transac-
tions
Result: Updated trust points for involved vehicles
Input: senderID, debateID, time
Find all ended contracts of type SCID=0000, in
which the vehicle with debateID ﬁnally won;
From all those ended contracts, build a group Gs that
includes all vehicles that agree with debatedID and
Go that includes all vehicles disagree with debated
ID;
Let N(G) denote the accumulated stake for vehicles
in group G and Nth denote the threshold number;
if N(Go) − N(Gs) > Nth then

Redress previous contract instances;
Increase trust points for group Go by 1;
Set trust points for group Gs to be -1;

end

travel credits to the new region. This process is shown in
Algorithm 3. Note that the trust points of this vehicle in the
original region should be set to zero.

Algorithm 3: Transferring Records for SCID=0002
Transactions
Result: Updated trust points for senderID in two

regions

Input: senderID, regionID, position
if position is near the border of current region and
the region of regionID then

Get proof-of-travel credits and trust points of
senderID in current active region;
Transfer these records to another region
corresponding to regionID;
if another region updated records of senderID
then

Set trust points of the vehicle to 0 in original
region

end

end

C. Proof-of-Travel Blockchain

Proof-of-travel blockchain is mainly to record vehicles’
accumulated contributions to other vehicles. We assume that
CVs will broadcast trafﬁc information, e.g., BSM or CAM
messages, in an average frequency of fm Hz. Surrounding
vehicles within the communication range will record the
public keys of message senders and the number of valid
messages. After each travel period Tpot
(which is much
longer than the period for trust points blockchain), every
vehicle vi will have a list that records the public keys of
message senders v j and the number of messages n j2i from
every sender during this period. We propose a metric npot
,
named “proof-of-travel credits”, to summarize all messages

j

Fig. 3.
Proof-of-travel blockchain updating across multiple regions.
With intra-region communication, each vehicle can aggregate transactions
received from others in the same region. By computation and arrangement,
vehicles can build a pre-block and reach consensus on it, which includes
vehicle ID and proof-of-travel credits. Note that records in pre-blocks may
not be complete as vehicles may move across multiple regions; but with
inter-region communication, blocks for each region will be eventually built.

commenting on vehicle v j from all other vehicles vi, i.e.,

npot
j = ∑
i

n j2i

(1)

For a vehicle, its accumulated proof-of-travel credits in the

latest Nsum periods is computed by:

N pot
j

[m] =

Nsum−1
∑
k=0

α k npot

j

[m − k]

(2)

j

where npot
[m−k] is the proof-of-travel credits in the (m−k)th
period, α is a discounting factor, N pot
[m] is the accumulated
Nsum periods proof-of-travel credits by the mth period. Vehi-
cles that make a persistent contribution to others will have a
high accumulated proof-of-travel credits.

j

We assume that most vehicles will report the number
of messages they received honestly because honest vehicles
generally do not know the identity of surrounding vehicles.
Honest vehicles can also generate transactions to reveal
falsiﬁed number report, in a similar way as in the trust points
blockchain.

Fig. 3 presents the general process of updating the proof-
of-travel blockchain. Different vehicles may get registered in
different permanent regions, e.g., region A, region B, and so
on. We assume that each vehicle is uniquely identiﬁed by
the regionID and the vehicle index in that region, e.g., A1
is a vehicle with the index of 1 in region A. Since a vehicle
may change lane, overtake, choose different routes, or even
enter another region, it will encounter different vehicles in
the same or different regions. It will record those vehicles
and the number of messages they sent in a transaction and
broadcast it in the region. As in the ﬁgure, each region will
have a number of aggregated transactions. Each transaction
is denoted by the vehicle senderID with a set including all
vehicles it encountered, e.g., E1: {E2, B3, F2, · · · } is the
transaction sent by vehicle E1. The selected block proposer
will then arrange these transactions and build a pre-block
by summarizing credits for all vehicles in the sets. After

the consensus process, all vehicles in the region will agree
with this pre-block. We name it pre-block because it may
not include complete information for vehicles in the region,
but record vehicles who are not in this region. Then vehicles
in neighboring regions will communicate with each other
regarding the pre-blocks. Finally block proposers will build
a block containing complete information of vehicles in their
region. In this way, to ﬁnd the proof-of-travel credits of one
vehicle, we can easily refer to the blockchain in that vehicle’s
permanent region.

D. Stake Computation and Region Size

In framework, the stake Nstk is computed from the ac-
cumulated proof-of-travel credits N pot in the proof-of-travel
blockchain and the trust points Nt p in the trust points
blockchain:

Nstk =

Nt p
1 + Mt p

N pot
1 + M pot +
where M pot and Mt p denote the mean value of N pot and
Nt p for all vehicles, respectively. Here we use 1 + M pot and
1 + Mt p as denominator to avoid the near-zero case. This
stake is the basis of consensus mechanism for both the trust
points blockchain and the proof-of-travel blockchain.

(3)

The region size that one blockchain can cover is decided
by various factors. First, it is limited by the round latency that
we desire. A larger size may result in a larger latency to reach
consensus, thus slow down system’s response to attacks.
Second, for trust points blockchain, the smaller the region is,
the lower the resource demand is for all vehicles in the region
to maintain and update the blockchain. However, a small
region size typically means that vehicles will frequently
move across different regions, thus frequently transferring
their records. For proof-of-travel blockchain, a smaller region
size leads to lower overhead on intra-region communication
but higher overhead on inter-region communication. Such
trade-offs are addressed in detail in Section IV-D and V.

IV. SECURITY ANALYSIS

As discussed in the threat models in Section II-A, a
malicious vehicle can broadcast falsiﬁed messages, report
falsiﬁed misbehavior of honest vehicles, or create other
pseudonymous identities for manipulating the voting process.
We evaluate the effectiveness of our proposed framework
in defending against the three threat models, based on simu-
lations in SUMO. We also analyze the relationship between
round latency of the trust points blockchain and the region
size in our framework.

A. Against Message Spooﬁng Attack

For the threat model described in Fig. 2(a), under message
spooﬁng attack and without our framework, the merging
vehicle in on-ramp can be fooled to speed up when the
highway is congested or to decelerate when there are few
vehicles on the highway. When the merging vehicle is able
to perceive the trafﬁc environment, it has to adjust its velocity
signiﬁcantly, which leads to low efﬁciency and possible

Fig. 4.
Effectiveness of our framework against bad mouthing attack in
an intelligent intersection. The red stars denote the moment that the attack
starts and the blue circles denote the moment that our framework detects
the attack and the trafﬁc system starts recovering from the attack. Travel
time curves with different round latency (tlat = 22 and 60 seconds) of the
trust points blockchain are plotted.

failure to merge onto the highway. With the protection of our
framework, other honest vehicles on the highway may report
this spooﬁng attack and launch the voting process to assess
the message. Before the assessment is ﬁnished, the merging
vehicle can start taking cautious actions in milliseconds, e.g.,
speeding up only a little bit for reacting to uncertain trafﬁc
status on the highway, preventing sudden velocity changes.
When all vehicles reach consensus after the voting process,
the identity of the attacker is exposed, and its messages are
not trustworthy any more.

We compare the average speed, CO emission, and fuel
consumption of the merging vehicles under three cases, i.e.,
without attack, under attack without our framework, and
under attack with our framework. We perform 20 simulations
for each case, and the average performance is recorded in
Table I, where ‘ours’ is short for our framework. During sim-
ulations, vehicle arriving rate on highway and on-ramp are
both 0.2 vehicle per second. The performance is measured
over the 200 meters on-ramp and the following 200 meters
highway. The table shows that without the protection from
our framework, the attack can lead to a 42.66% decrease
in average speed and an 87.06% increase in CO emission.
With our framework, the vehicles can take cautious actions,
thus have a signiﬁcantly higher travel speed and lower CO
emission.

TABLE I
EFFECTIVENESS OF OUR FRAMEWORK IN PROTECTING AGAINST
MESSAGE SPOOFING ATTACK IN HIGHWAY MERGING.

performance

average speed (m/s)
CO (mg)
fuel (mL)

without
attack
16.41
741.06
41.17

under attack
without ours
9.41
1386.24
41.91

under attack
with ours
13.00
1006.36
42.96

a higher probability (e.g., 0.9 in our simulations) to take
another route, which leads to longer travel time. However, as
several vehicles still choose the route with the fake accident
and realize that it is a Sybil and voting attack, they trigger the
redressing process as the honest vehicles have higher stake
now. Fig. 5 shows that our framework can soon discover the
Sybil and voting attack, and recover to normal status. We
also analyze the impact of vehicle arriving rate and round
latency of trust points blockchain, and observe that a higher
vehicle arriving rate leads to longer travel time under attack
but faster recovery time in our framework. A smaller round
latency may reduce the travel time under attack and also
shorten the recovery time.

The results above demonstrate the effectiveness of our frame-
work in protecting against message spooﬁng, bad mouthing,
and Sybil and voting attacks. Note that with our proof-of-
travel blockchain, it is even harder to perform these attacks
(especially Sybil attack), as it
takes more effort for the
malicious attackers to build up a travel record in the region
with high stake.

D. Round Latency and Region Size

In the results above, we have seen the impact of round
latency of the trust points blockchain on system performance.
This latency is closely related to the region size. Here we
conduct more in-depth analysis on the relationship between
the two.

In [21] and [22], the authors simulated 50k Algorand
users in the m4.2xlarge virtual machines on Amazon’s EC2
platform, with 50 users per VM. The message transmission
in Algorand is enabled by gossip protocol, which is similar
to Bitcoin. The bandwidth for each Algorand process is set
to 20 Mbps. Latency for one round of Algorand is about
22 seconds, dominated by the time to gossip a 1 MB block
through the user network [22].

We assume that the blockchain will record all transactions
sent by vehicles in a circular region with a radius of d0. The
size of a block is computed as:

Sb = (

2πd0βlβc
βv

+ πd2

0 βdβt )tlat SSCID

t

(4)

where βl is the number of lanes connect to outer space per
perimeter of the region, βc is the trafﬁc capacity of a single
lane with the unit as the number of vehicles traveled per hour
per lane, βv is the number of vehicles that can be claimed in a
transaction of type SCID=0002, βd is the density of vehicles
in this region, βt is the generation rate of transactions of type
SCID=0000/0001, tlat is the latency (period) to generate a
block, SSCID

is the size of a transaction.

t

We set the capacity of lanes that connect to other regions,
βc, to be 3000 vehicles per hour per lane, as observed in the
data collected from a section of the highway I-5 in Southern
California [29] and should be similar in other regions. The
density of vehicles βd is set to 300 veh/km2, which is similar
to the density in Beijing [30]. Considering that attacking
events are rare and vehicles are not driving on the road all
the time, βt is set to 0.05 transactions per hour per vehicle.

Fig. 5.
Effectiveness of our framework against Sybil and voting attack.
Red stars denote the moment the attack starts, and the blue circles denote
the moment the attack is detected and the recovery starts. Travel time curves
with different round latency (tlat = 22 and 60 seconds) for the trust points
blockchain and under different vehicle arriving rates (γ = 0.2 and 0.33
vehicle per second) are plotted.

B. Against Bad Mouthing Attack

Under the bad mouthing attack as shown in Fig. 2(b), all
honest vehicles near the intersection are reported to have
misbehavior by the attacker. Those honest vehicles may
generate transactions to claim that they are innocent and
being attacked. Before it is conﬁrmed, all vehicles near the
intersection will take cautious actions and choose not to
trust others’ messages; thus, the intelligent intersection may
temporarily lose its functions. Vehicles will travel through
the intersection as if there were all-way stop signs.

Fig. 4 shows the trafﬁc in an intelligent intersection that
is under attack. The vehicle arriving rate is 0.05 vehicle
per second in the intersection. Around time 60 (seconds),
the attacker starts the bad mouthing attack. However, the
design of our framework ensures that the attack can be soon
discovered and the system can return to normal shortly.
Speciﬁcally, in one round of trust points blockchain, the
surrounding vehicles have reached consensus on the ex-
istence of this attack. An honest vehicle will
then trust
messages from other honest vehicles, and the function of
intelligent intersection gets recovered. From the ﬁgure, we
can see that if our framework has a smaller round latency of
tlat = 22 seconds for the trust points blockchain, the system
can recover before any signiﬁcant increase of travel time.
If the round latency reaches tlat = 60 seconds, travel time
starts increasing initially when the intelligent function is
temporarily disabled, but starts decreasing around time 120
and fully recovers around time 140. More analysis of the
impact of round latency is shown later in Section IV-D.

C. Against Sybil and Voting Attack

Fig. 2(c) shows the threat model where a trafﬁc network
with route choices is attacked with Sybil and voting attack.
Speciﬁcally, an attack and the two Sybil vehicles it generates
send transactions reporting a trafﬁc accident in one route
and win the voting process because they have more stake
initially. Then other vehicles arriving at the area will have

Fig. 6. Maximum region size and minimum round latency under different
transaction generation rate (best viewed in color). The solid blue line and
the dashed orange line represent the maximum region size and the minimum
round latency under different transaction generation rate, respectively. Draw-
ing a vertical line, we can see the minimum round latency corresponding
to the region size, e.g., 22 seconds for a region with a radius of 182.8 km.

is 250 byte per transaction. βv is set to 10 vehicles per

SSCID
t
transaction and βl is 1 lane per km.

Taking a region with a similar size to Beijing, the transac-
tion data generation rate is about 1.6 Mbyte/min. According
to [22], the latency for one round of Algorand has little
variation on the number of users. It basically remains the
same when the block size is smaller than 4MB and then
increases proportionally with a larger block size. We plot
the relationship among throughput (data generation rate),
minimum latency, and region size in Fig. 6, and we can
clearly see the trade-offs between the minimum round latency
and the maximum region size.

V. RESOURCE DEMAND ANALYSIS

We use three metrics to measure the resource demand of
our framework on computation, communication, and storage
cost. Here, the computation cost is the CPU resource used for
running blockchain on each vehicle. Communication cost is
measured by the total size of messages received per minute
by each vehicle. Storage cost is measured by the total size
of data maintained in our framework.

We leverage the results from Algorand in our analysis.
The Algorand users use CPU resources mainly for verifying
signatures and veriﬁable random functions (VRFs). Each
Algorand process uses about 6.5% of a core averagely, in
a 2.4 GHz Intel Xeon E5-2676 v3 (Haswell) Processor.
While the on-board computing platform for vehicles may be
different from the ones used in Algorand’s analysis, we hope
the overall trends shown in this section could still provide
some valuable observations.

Next, we will analyze the three metrics for the trust points
blockchain in Section V-A, V-B, and V-C, and brieﬂy discuss
the resource demand for the proof-of-travel blockchain in
Section V-D.

Fig. 7. Computation resource demand under different fractions of honest
vehicles.

vehicles, because only block proposers and veriﬁers will
broadcast messages. According to [22], the veriﬁer commit-
tee size is directly computed from the fraction of honest
vehicles h and a parameter F. Here we set F = 5 × 10e − 9,
denoting a negligible probability that the veriﬁer committee
reaches consensus on a falsiﬁed block [22]. By assuming
that
to the number
of messages received, we plot Fig. 7, which shows the
relationship between computation cost and the fraction of
honest vehicles h. Here the computation cost is measured by
the utility of one core in a 2.4 GHz Intel Xeon E5-2676 v3
(Haswell) Processor, e.g., it is 6.5 percent when 80 percent
of the vehicles are honest.

the computation cost

is proportional

B. Communication Cost

According to the consensus process described in [21] and

[22], communication cost in one round is computed as

Ccm = Sb + Scηp + Scηv(ηs − 2)

(5)

where Sb and Sc are the size of a block and a short message
for every step in the consensus process, respectively. As in
[22], Sc is assumed to be no more than 200 bytes. Let ηp
denote the number of block proposers in every round. All
these proposers will broadcast a short message to claim their
identity in Algorand. Let ηv and ηs denote the number of
veriﬁers and the number of steps to reach consensus. Then
ηv(ηs − 2) is the number of messages sent by veriﬁers in one
round because they do not send messages in the ﬁrst and last
steps.

We plot communication cost under different fraction of
honest vehicles, different round latency, and different region
size in Fig. 8. We can see that the communication cost will
increase with a smaller fraction of honest vehicles, a smaller
round latency, or a larger region size.

C. Storage Cost

Storage resource needed by every vehicle for one-day data

A. Computation Cost

can be computed as

Note that the computation cost mainly depends on the
veriﬁer committee size, rather than the total amount of

C1d

s =

24 × 60
tlat αs

Sb

(6)

where Su denotes the size of data for summarizing one
vehicle’s status. As shown in Fig. 9,
the size of these
summary blocks is between the size of transactions generated
in one hour and the size of transactions generated in two
hours.

These summary blocks are communication overhead. A
smaller tsum means larger communication overhead, smaller
storage cost, and smaller size of data a new vehicle needs
to download to join the blockchain. Taking a region with
a radius of 120 km for example and reading data from
Fig. 9, with a period of tsum = 24 hours, the communication
0.2263×24 = 6.24%, storage cost
overhead would be about
would only be 24 × 0.2263 + 0.339 = 5.77 Gbyte. That is, a
new vehicle may only need to download 5.77 Gbyte data to
get the latest status of blockchain.

0.339

D. Resource Demand for Proof-of-Travel Blockchain

To alleviate resource demand for

the proof-of-travel
blockchain, vehicles can generate blocks and update the
blockchain in a much larger period than that of the trust
points blockchain, e.g., one day or longer. Considering
that vehicles usually stay most
time in their permanent
address/region, proof-of-travel blockchain is maintained by
vehicles in the same permanent region to mitigate commu-
nication overhead.

For example, for a region with a 10 km radius, there are
about 100 thousand registered vehicles under density βd. We
assume that a vehicle can record at most 500 vehicles with
higher credits in its transaction, and the updating period is
one day. The size of one transaction is estimated as 20 ×
500 = 10k bytes if each vehicle record consumes 20 bytes.
The size of aggregated transactions will be 100k × 10k = 1G
bytes. After arrangement and inter-region communication,
the ﬁnal block should have a much smaller size. In this way,
with a block generating period of one day or longer, the
resource demand for the proof-of-travel blockchain should
be much less than that for the trust points blockchain.

VI. CONCLUSION

In this work, we propose a dual cyber-physical blockchain
framework that
includes a trust points blockchain and a
proof-of-travel blockchain for building trust and secur-
ing communication for CV applications. The trust points
blockchain has a quick response to suspicious behavior, with
smart contracts designed for instant voting, redressing, and
transferring records. The proof-of-travel blockchain builds up
reputations from vehicles’ long-term travel records. The trust
points and the proof-of-travel credits are used together to
compute the vehicle stake for running the consensus mecha-
nisms in both blockchains. Experimental results demonstrate
the effectiveness of our framework in protection against
message spooﬁng, bad mouthing, and Sybil and voting
attacks, in representative CV applications. We also conducted
preliminary analysis on the framework’s resource demand.
As this is the ﬁrst step towards building a trust framework
for CV applications, we plan to continue improving the
efﬁciency of our framework and its prototyping.

Fig. 8. Communication cost under different fraction of honest vehicles (h),
round latency (tlat ), and region size.

Storage cost under different region size. We can see that the
Fig. 9.
summary of all vehicles’ records has a size that is between the sizes of
transactions generated in one hour and in two hours.

tlat

where 24×60
is the number of blocks generated every day, and
αs is a sharding parameter. For N shards, vehicles only store
blocks whose round number equals their public key modulo
N, so that storage cost can be reduced by the divisor of αs.
As we mentioned in Section IV-D, for a region with
the similar size to Beijing, the blockchain generates 1.6
Mbyte data per minute, which means 69.12 Gbyte per month.
Even if we leverage the sharding technique with αs = 10,
blockchain users will still have to maintain about 7 Gbyte of
new data every month. Moreover, the sharding technique will
not help new vehicles. A new vehicle will have to download
all the data to get the correct status of all vehicles.

To overcome this problem, we propose a new summary
step for blockchain. In our design, selected block proposers
will summarize the status of all vehicles in new blocks with
a period of tsum. By indicating the type of block in its header,
a new vehicle can easily ﬁnd the latest summary blocks and
do not need to download blocks generated before those.

In this way, without considering the sharding technique,

storage resource demand Cs is

Cs = Sb + tsumC1d
s

(7)

where Sb is the data size of summary blocks, as computed
below:

Sb = πd2

0 βdSu

(8)

[23] M. Pustiˇsek, A. Kos, and U. Sedlar, “Blockchain based autonomous
selection of electric vehicle charging station,” in 2016 international
conference on identiﬁcation, information and knowledge in the Internet
of Things (IIKI).

IEEE, 2016, pp. 217–222.
[24] F. Gao, L. Zhu, M. Shen, K. Sharif, Z. Wan, and K. Ren, “A
blockchain-based privacy-preserving payment mechanism for vehicle-
to-grid networks,” IEEE network, vol. 32, no. 6, pp. 184–192, 2018.
[25] Y. Yuan and F.-Y. Wang, “Towards blockchain-based intelligent trans-
portation systems,” in 2016 IEEE 19th International Conference on
Intelligent Transportation Systems (ITSC).
IEEE, 2016, pp. 2663–
2668.

[26] W. Dong, Y. Li, R. Hou, X. Lv, H. Li, and B. Sun, “A blockchain-based
hierarchical reputation management scheme in vehicular network,”
in 2019 IEEE Global Communications Conference (GLOBECOM).
IEEE, 2019, pp. 1–6.

[27] A. Dorri, S. S. Kanhere, and R. Jurdak, “Towards an optimized
blockchain for iot,” in 2017 IEEE/ACM Second International Con-
ference on Internet-of-Things Design and Implementation (IoTDI).
IEEE, 2017, pp. 173–178.

[28] T. Jiang, H. Fang, and H. Wang, “Blockchain-based internet of
vehicles: Distributed network architecture and performance analysis,”
IEEE Internet of Things Journal, vol. 6, no. 3, pp. 4640–4649, 2018.

[29] “Caltrans pems.” [Online]. Available: http://pems.dot.ca.gov/
[30] J. Yang, Y. Liu, P. Qin, and A. A. Liu, “A review of beijing’s vehicle
registration lottery: Short-term effects on vehicle growth and fuel
consumption,” Energy Policy, vol. 75, pp. 157–166, 2014.

REFERENCES

[1] “Connected vehicle pilot deployment program.” [Online]. Available:

https://www.its.dot.gov/pilots/crosssite cvp.htm

[2] “Connected vehicle test bed.” [Online]. Available: https://www.its.
dot.gov/research archives/connected vehicle/dot cvbrochure.htm
[3] Q. A. Chen, Y. Yin, Y. Feng, Z. M. Mao, and H. X. Liu, “Exposing
congestion attack on emerging connected vehicle based trafﬁc signal
control.” in NDSS, 2018.

[4] B. Zheng, C.-W. Lin, S. Shiraishi, and Q. Zhu, “Design and analysis of
delay-tolerant intelligent intersection management,” ACM Transactions
on Cyber-Physical Systems, vol. 4, no. 1, pp. 1–27, 2019.

[5] A. Abdo, S. M. B. Malek, Z. Qian, Q. Zhu, M. Barth, and N. Abu-
Ghazaleh, “Application level attacks on connected vehicle protocols,”
in 22nd International Symposium on Research in Attacks, Intrusions
and Defenses ({RAID} 2019), 2019, pp. 459–471.

[6] S. Parkinson, P. Ward, K. Wilson, and J. Miller, “Cyber threats
facing autonomous and connected vehicles: Future challenges,” IEEE
transactions on intelligent transportation systems, vol. 18, no. 11, pp.
2898–2915, 2017.

[7] O. N. Hamoud, T. Kenaza, and Y. Challal, “Security in device-to-
device communications: a survey,” IET Networks, vol. 7, no. 1, pp.
14–22, 2017.

[8] H. Yu, M. Kaminsky, P. B. Gibbons, and A. Flaxman, “Sybilguard:
defending against sybil attacks via social networks,” in Proceedings of
the 2006 conference on Applications, technologies, architectures, and
protocols for computer communications, 2006, pp. 267–278.

[9] G. Danezis and P. Mittal, “Sybilinfer: Detecting sybil nodes using

social networks.” in Ndss. San Diego, CA, 2009, pp. 1–15.

[10] H. Yu, P. B. Gibbons, M. Kaminsky, and F. Xiao, “Sybillimit: A near-
optimal social network defense against sybil attacks,” in 2008 IEEE
Symposium on Security and Privacy (sp 2008).
IEEE, 2008, pp. 3–17.
[11] S. Hu, Q. A. Chen, J. Joung, C. Carlak, Y. Feng, Z. M. Mao, and
H. X. Liu, “Cvshield: Guarding sensor data in connected vehicle with
trusted execution environment,” in Proceedings of the Second ACM
Workshop on Automotive and Aerial Vehicle Security, 2020, pp. 1–4.
[12] S. Gurung, D. Lin, A. Squicciarini, and E. Bertino, “Information-
oriented trustworthiness evaluation in vehicular ad-hoc networks,” in
International Conference on Network and System Security. Springer,
2013, pp. 94–108.

[13] M. Raya, P. Papadimitratos, V. D. Gligor, and J.-P. Hubaux, “On data-
centric trust establishment in ephemeral ad hoc networks,” in IEEE
INFOCOM 2008-The 27th Conference on Computer Communications.
IEEE, 2008, pp. 1238–1246.

[14] J. Kolb, M. AbdelBaky, R. H. Katz, and D. E. Culler, “Core concepts,
challenges, and future directions in blockchain: A centralized tutorial,”
ACM Computing Surveys (CSUR), vol. 53, no. 1, pp. 1–39, 2020.
[15] R. Iqbal, T. A. Butt, M. Afzaal, and K. Salah, “Trust management
in social internet of vehicles: Factors, challenges, blockchain, and
fog solutions,” International Journal of Distributed Sensor Networks,
vol. 15, no. 1, p. 1550147719825820, 2019.

[16] M. Singh and S. Kim, “Branch based blockchain technology in
intelligent vehicle,” Computer Networks, vol. 145, pp. 219–231, 2018.
[17] Z. Yang, K. Yang, L. Lei, K. Zheng, and V. C. Leung, “Blockchain-
based decentralized trust management in vehicular networks,” IEEE
Internet of Things Journal, vol. 6, no. 2, pp. 1495–1505, 2018.
[18] P. A. Lopez, M. Behrisch, L. Bieker-Walz, J. Erdmann, Y.-P. Fl¨otter¨od,
R. Hilbrich, L. L¨ucken, J. Rummel, P. Wagner, and E. WieBner, “Mi-
croscopic trafﬁc simulation using sumo,” in 2018 21st International
Conference on Intelligent Transportation Systems (ITSC).
IEEE,
2018, pp. 2575–2582.

[19] Y. L. Sun, Z. Han, W. Yu, and K. R. Liu, “A trust evaluation
framework in distributed networks: Vulnerability analysis and defense
against attacks,” in Proceedings IEEE INFOCOM 2006. 25TH IEEE
International Conference on Computer Communications. IEEE, 2006,
pp. 1–13.

[20] W. Wang, D. T. Hoang, Z. Xiong, D. Niyato, P. Wang, P. Hu, and
Y. Wen, “A survey on consensus mechanisms and mining management
in blockchain networks,” arXiv preprint arXiv:1805.02707, pp. 1–33,
2018.

[21] J. Chen and S. Micali, “Algorand: A secure and efﬁcient distributed
ledger,” Theoretical Computer Science, vol. 777, pp. 155–183, 2019.
[22] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich,
“Algorand: Scaling byzantine agreements for cryptocurrencies,” in
Proceedings of the 26th Symposium on Operating Systems Principles,
2017, pp. 51–68.

