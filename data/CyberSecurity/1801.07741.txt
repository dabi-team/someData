8
1
0
2

n
a
J

3
2

]

R
C
.
s
c
[

1
v
1
4
7
7
0
.
1
0
8
1
:
v
i
X
r
a

Who Killed My Parked Car?

Kyong-Tak Cho†, Yuseung Kim*, and Kang G. Shin†

†University of Michigan, Ann Arbor
*IEEE Member

Abstract

We ﬁnd that the conventional belief of vehicle cyber attacks and their defenses—attacks
are feasible and thus defenses are required only when the vehicle’s ignition is turned
on—does not hold. We verify this fact by discovering and applying two new practical
and important attacks: battery-drain and Denial-of-Body-control (DoB). The former
can drain the vehicle battery while the latter can prevent the owner from starting or
even opening/entering his car, when either or both attacks are mounted with the igni-
tion off. We ﬁrst analyze how operation (e.g., normal, sleep, listen) modes of ECUs
are deﬁned in various in-vehicle network standards and how they are implemented in
the real world. From this analysis, we discover that an adversary can exploit the wake-
up function of in-vehicle networks—which was originally designed for enhanced user
experience/convenience (e.g., remote diagnosis, remote temperature control)—as an
attack vector. Ironically, a core battery-saving feature in in-vehicle networks makes it
easier for an attacker to wake up ECUs and, therefore, mount and succeed in battery-
drain and/or DoB attacks. Via extensive experimental evaluations on various real ve-
hicles, we show that by mounting the battery-drain attack, the adversary can increase
the average battery consumption by at least 12.57x, drain the car battery within a few
hours or days, and therefore immobilize/cripple the vehicle. We also demonstrate the
proposed DoB attack on a real vehicle, showing that the attacker can cut off communi-
cations between the vehicle and the driver’s key fob by indeﬁnitely shutting down an
ECU, thus making the driver unable to start and/or even enter the car.

1 Introduction

Software-driven Electronic Control Units (ECUs) and wireless (Wi-Fi, Bluetooth, Cel-
lular and V2X) connectivities of modern vehicles are proven to be double-edged swords.
On the one hand, they have enabled new vehicle applications and services such as re-
mote diagnosis/prognosis and crash avoidance, enhancing safety, mobility, and efﬁ-
ciency. On the other hand, they have introduced more remote surfaces/endpoints and
thus vulnerabilities which an adversary can exploit and, in the worst case, control the
vehicle remotely [1–4].

1

 
 
 
 
 
 
Researchers have demonstrated how vulnerabilities in remote (e.g., PassThru, Blue-
tooth, Cellular) endpoints can be exploited to compromise an ECU and access the in-
vehicle network [2, 5]. By exploiting the remotely compromised ECUs, researchers
have shown to be able to control vehicle maneuvers or even shut down a vehicle via
packet injection in the in-vehicle network [3, 6–8]. The vulnerabilities that were ex-
ploited in (remotely) compromising and thus controlling an ECU are, in fact, con-
sidered to be inevitable due to the inherent nature of automotive manufacturing: in-
vehicle components and software are developed and written by different organizations,
and thus vulnerabilities emerge naturally at interface boundaries [2]. Such a reality of
vehicle cyber attacks has made vehicle security one of the most critical issues to be
addressed by industry, academia, and governments.

While various ways of attacking and thus controlling the vehicle via security vul-
nerabilities have been proposed and demonstrated, all these attacks are shown to be
feasible and effective, only when the vehicle is running. That is, the conventional be-
lief of vehicle cyber attacks and their defenses is that attacks are feasible and their
defenses are necessary only while the ignition is on. Thus, there is a lack of under-
standing of what an adversary can achieve or even whether s/he can mount malicious
attacks while the vehicle’s ignition is off.

In this paper, we show such a general belief does not hold since an adversary can at-
tack and control a parked vehicle (i.e., with ignition off) and immobilize it indeﬁnitely.
Speciﬁcally, we propose two new attacks—battery-drain and Denial-of-Body-control
(DoB)—which make the vehicle inoperative.

By mounting the battery-drain attack, an adversary ﬁrst gains access to the in-
vehicle network then controls various functions of the car, and ﬁnally drains/discharges
the battery to a level where the car cannot be started. In this paper, we refer to “im-
mobilize” as an action that prevents the driver from starting or driving the car. As
the ignition is off, one might think that no matter what message(s) the attacker in-
jects, none of the in-vehicle ECUs would receive, and respond to, the injected mes-
sages. Surprisingly, however, our analyses of various in-vehicle network standards
and their protocol implementations reveal the feasibility of controlling ECU functions
via message injections even when the ignition is off. Ironically, the main reason for
this feasibility is the “wake-up functions”—which are intended to enhance the driver’s
experience/convenience—let the adversary wake up ECUs (of a parked vehicle) and
then control them. That is, the wake-up functions that were originally designed for
a good cause become an attack vector. Wake-up functions are standardized, imple-
mented, and thus provided in various in-vehicle networks so that car manufacturers
can provide remote standby functions, such as remote diagnostics, door/temperature
control, and anti-theft. Without the wake-up functions, the ECUs providing such func-
tionalities would have to run continuously, hence consuming too much of battery.

Therefore, exploiting such a standardized and thus available wake-up function, the
attacker (i) wakes up ECUs by injecting a wake-up message, (ii) controls the awak-
ened ECUs by sending certain messages (e.g., those that turn on lights, unlock/lock
the door, change power mode, open trunk, etc.), and therefore, (iii) achieves his goal
of draining the vehicle’s battery. In order to control such functions, the attacker must
know which messages (more speciﬁcally, with which message IDs) to inject, usually
requiring some (painstaking) reverse-engineering with fuzzing [2, 3]. However, for the

2

purpose of battery-drain attack, we propose a driver-context-based scheme, which sig-
niﬁcantly lowers the technical barrier for the adversary to reverse-engineer the required
control messages, i.e., ﬁguring out which message IDs to use, thus helping the attacker
succeed in battery-drain attack.

Through the proposed Denial-of-Body-control (DoB) attack, in addition to simply
waking up ECUs (as was also done in the battery-drain attack), an adversary can force
all awakened ECUs to enter the “bus-off” state, i.e., shut-down. The attacker does this
is to exploit the fact that, depending on their software conﬁguration, some ECUs do
not recover from a bus-off; a policy speciﬁed in the ISO 11898-1 standard [9]. We ﬁnd
through evaluations on real vehicles that a DoB attack can, in fact, lead to a case where
important ECUs, such as a Remote Control Module (RCM)—which is an integral part
of remote key and security functionalities—do not recover from a bus-off, i.e., remain
shut down. As a consequence, the communication between the key-fob and the RCM
(i.e., vehicle) is cut off, thus making the driver unable to enter or start his vehicle.

It is important to mention that the proposed battery-drain and DoB attacks are in-
teresting, critical, and very different from the attacks known to date for the following
reasons.

• One common irony of the two proposed attacks is that the wake-up function of
in-vehicle networks, which was originally standardized, designed, and built for
enhanced user experience/convenience, is exploited as an attack vector. Capital-
izing on the wake-up function, the adversary becomes capable of mounting the
attacks even while the ignition is off.

• The feasibility of, or ease in mounting the attacks stems from the fact that the
wake-up signal/message was deﬁned to be very simple. A simple (agreed-on)
wake-up message (e.g., one 0-bit) facilitates the design of low-power ECUs/transceivers,
thus extending the battery operation time. We refer to “battery operation time”
as how long the battery can last to provide enough power for the driver to start
the car. From a security viewpoint, however, such a battery-saving feature makes
it easier for the attacker to wake up ECUs and then drain the vehicle’s battery.

• The simplicity of the wake-up signal makes message encryption or use of Mes-
sage Authentication Codes (MAC) (some state-of-the-art defenses) unable to
prevent an attacker from waking up ECUs.

• The number of ECUs that can/must be awakened, tends to increase as more en-
hanced standby features are added to newer vehicle models. This will allow the
attacker to immobilize the newer models far more quickly and easily than the
older ones.

Through extensive experimental evaluations of 11 real vehicles— i.e., 2008–2017
model-year (compact and mid-size) sedans, coupe, crossover, PHEV (Plug-in Hybrid
Electric Vehicle), SUVs, truck, and an electric vehicle—we show that all (except one
2008 model-year) of our test vehicles are equipped with the wake-up functions, render-
ing both battery-drain and DoB attacks feasible. Moreover, we show that by mounting
a battery-drain attack, the adversary can speed up the average battery consumption by

3

at least 12.57x, drain the car battery within a few hours, and therefore immobilize the
vehicle. We also demonstrate the proposed DoB attack on a real vehicle and show
that the attacker can shut down an ECU indeﬁnitely and thus prevent the driver from
entering or starting the car.

In summary, we make the following main contributions:

1. Showing the feasibility of waking up ECUs via message injections by analyzing
in-vehicle network protocols, standards, and implementations, and demonstrat-
ing it on 11 different real vehicles;

2. Discovery of two new attacks—battery-drain and DoB attacks—through which

an adversary can immobilize vehicles while the ignition is off; and

3. Demonstration of the two newly proposed attacks on a real vehicle.

2 Background

2.1 Terminal Control

The car battery powers in-vehicle ECUs not only when the ignition is on but also when
it is off. When and how much battery/power an ECU drains depends on the terminal
it is connected to. In the DIN 72552 standard [10], terminals are deﬁned as follows.
Connected ECUs attached to

• Terminal 15: switched on with ignition on and (totally) off when ignition is off

• Terminal 30: permanently powered on but usually runs in sleep mode, while the

vehicle is parked and locked (i.e., ignition is off).

This deﬁnition of differentiation in terminal control is to provide different function-
alities in vehicles when the ignition is on/off. As an example, consider the Passive
Keyless Entry and Start (PKES) system, which allows users to open and start their cars
while keeping their car keys in their pockets [11] and is equipped in most contempo-
rary vehicles. In order to provide the keyless entry feature, the ECU running PKES
will have to be connected to terminal 30 and be permanently powered on, continuously
sensing whether the owner’s/driver’s key fob is within a certain range. Meanwhile, if
the power modes of such permanently powered on ECUs are not properly managed,
they will quickly drain the car battery. Thus, to minimize their power consumption, as
described in the DIN 72552 standard, they operate in sleep mode in which only their
transceiver (not their microcontroller) is powered on. This is for the ECU’s transceiver
to still be capable of detecting and therefore responding to any wake-up signals. For
this reason, transceivers have a separate power supply [12]. This way, while the ig-
nition is off, ECUs asleep switch to, and operate in normal mode, i.e., wake-up, only
when required, thus preventing fast drain of the battery and typically keeping cars con-
tinuously parked/idle for 25∼40 days without losing battery power. The battery doesn’t
get charged by the alternator until the vehicle engine runs back again with the ignition
on.

4

Bus

Data Rate

Industry Standard Wakeup

500 kBit/s

125 kBit/s

33.3 kBit/s
19.2 kBit/s

ISO 11898-1
ISO 11898-2/5
ISO 11898-1
ISO 11898-3
GM LAN
LIN Consortium

10.4 kBit/s

SAE J2602

Global

Global

Global
Global

Global

CAN

LIN
SAE
J2602

FlexRay

MOST
(Multimedia)

10 MBit/s
5 MBit/s
2.5 MBit/s
100 MBit/s
1 GBit/s

FlexRay Consortium

Global

MOST Cooperation

-

Table 1: Overview of vehicle bus systems with wake-up capability [13].
In all in-
vehicle networks, but MOST, ECUs are woken up simultaneously, i.e., a global wake-
up, when a wake-up signal is detected on the bus.

2.2 Wake-up

Even when the ignition is off, the need of ECUs asleep to be awakened is increasing for
enhanced user/driver experience/convenience. For example, vehicle OEMs are provid-
ing useful functions, such as PKES, overnight remote diagnostics, remote temperature
control, remote door control, and anti-theft while the vehicle is parked and turned off.
We refer to such functionalities that are executable/executed while the ignition is off as
standby functions. To meet such a need, ECUs asleep are designed and conﬁgured to
be awakened via two different mechanisms: local wake-up and bus wake-up.

A local wake-up is triggered when a switch attached to the ECU (e.g., a receiver
for the remote key) is turned on. This drives a logic state change on its WAKE pin and
thus re-activates the whole ECU. Another mechanism in which an ECU wakes up is
whenever it sees a speciﬁc in-vehicle network signal, i.e., wake-up message/signal, on
the bus. Upon detection of a wake-up signal by the ECU’s transceiver, which remains
ON even while the ignition is off, it turns on the power supply of the ECU, thus waking
up the whole ECU, i.e., enters normal operational mode. We will later elaborate on
what the wake-up signals are when we discuss the proposed attack methods.
If no
additional wake-up signal is received within a certain (preset) period, the ECU returns
to sleep mode.

Table 1 summarizes in-vehicle network standards/protocols that deﬁne such a wake-
up functionality/capability of providing a pathway for driver-friendly applications. One
can see that it is standardized, implemented, and used not only in CAN—the de facto
standard of in-vehicle networks—but also in all other in-vehicle networks, except for
MOST. However, for the purpose of more in-depth discussion, we focus on CAN when
discussing the two proposed attacks.

CAN ECUs/transceivers with such a wake-up feature (i.e., wake-up detection mod-
ule) have been in the market for more than 15 years (as of 2017) [15]. Fig. 1 shows
a block diagram of a Texas Instrument (TI) SN65HVD1040 transceiver implemented

5

Figure 1: TI SN65HVD1040 transceiver [14]. The bus monitor module continuously
checks whether or not there are any wake-up signals on the bus. If so, it wakes up the
whole ECU.

with a bus monitor module for the wake-up function. We found that (almost) all CAN
transceivers from other manufacturers also have such a wake-up detection module with
different names like wake-up detector, wake-up ﬁlter, etc.

3 Adversary Model

We consider an adversary whose objective is to immobilize the victim’s vehicle while
the ignition is off, and stay as stealthy as possible during, and even after the attack. By
immobilizing the vehicle, i.e., compromising its availability, s/he prevents the driver
from starting or driving the car, making the vehicle unavailable when the driver/owner
wants or needs to use it. In order to be as stealthy as possible during, and even after
the attack, the adversary also aims to immobilize the car before the driver attempts to
enter/start it. Therefore, although an adversary may in fact immobilize a vehicle by
simply ﬂooding the in-vehicle network when the driver attempts to start it—which, in
turn, prevents any other ECUs (e.g., Body Control Module) from receiving/processing
commands—or by jamming the key-fob wireless channel, we do not consider such
an adversary. Immobilizing the vehicle in such ways is likely to expose the attacker,
since the driver/owner would be in the vicinity of the car when the attack is mounted.
In contrast, by immobilizing the vehicle before the driver attempts to enter/start it,
the adversary won’t leave any trace at all, except the immobilized vehicle, i.e., very
stealthy.

As in previously discussed attacks [2, 3, 5, 7], we consider the adversary capable
of remotely (but not physically) compromising an in-vehicle ECU via numerous attack
surfaces and means, and can thus gain its control; physically compromising an ECU
requires physical access and thus is not stealthy. That is, the adversary can compromise
1) a (third-party) OBD-II (On-Board Diagnostics) dongle/device in advance, and gain

6

Figure 2: An overview of the proposed attacks. After waking up ECUs in a parked
vehicle, the CAN adversary immobilizes the vehicle via a battery-drain attack and/or a
DoB attack.

remote control of the vehicle once the driver plugs it in to his/her car (as demonstrated
in [16])1 or 2) an in-vehicle ECU (e.g., telematic unit which has external connectivi-
ties), remotely, so as to access the in-vehicle network [2, 5]. Since such an adversary
would have access to the vehicle’s CAN bus, we call such an adversary a CAN at-
tacker. Once an ECU is compromised, we consider the CAN adversary to be capable
of performing at least the following malicious actions. The adversary can inject any
message with forged ID, DLC (Data Length Code), and data—which we refer to as
attack messages—on the bus as they are managed at user level. Also, since CAN is a
broadcast bus, the adversary can sniff messages on CAN. These are the basic capabili-
ties of a CAN adversary who has the control of a compromised ECU. The practicability
of such an adversary model has already been proved and demonstrated in [2, 7, 8].

4 Immobilizing a Vehicle

We now introduce two new attacks through which a CAN adversary can immobilize
the victim’s vehicle while the ignition is off, i.e., compromise the vehicle’s availability
while it is parked and turned off.

1Once it is plugged in, we can consider the OBD-II dongle/device as an in-vehicle ECU.

7

+Immobilize!Wake up ECUs(Section IV-B)Driver-context-based Reverse Engineering(Section IV-C)DoBAttack(Section IV-D)Battery-drain Attack(Section IV-C)4.1 High-level Overview of the Proposed Attacks

Through a compromised in-vehicle ECU (e.g., telematic unit, OBD-II dongle), the
CAN adversary has access to the CAN bus irrespective of whether the ignition is on or
off. However, especially when the ignition is off and thus all ECUs are asleep or turned
off (until the ignition is turned on again), an attack message injected by the adversary
may not be delivered to those ECUs. That is, no matter what messages the adversary
may inject, these ECUs may not respond.

Fig. 2 shows an overview of how the CAN adversary immobilizes a vehicle in
such a case. In order to control/attack ECUs on the bus, s/he ﬁrst wakes them up and
then immobilizes/cripples the vehicle via a battery-drain or DoB attack. In the case
of battery-drain attack (Section 4.3), the adversary will attempt to exploit the awak-
ened ECUs for controlling certain functionalities of the vehicle (e.g., illuminating ex-
terior/interior lights) and thus draining its battery. In order to ﬁgure out which message
ID to use for such a control, the attacker goes through a message reverse-engineering
process based on driver context, which will be detailed in Section 4.3.3. That way
of reverse-engineering messages allows the attacker to succeed in battery-drain attack
much easier than via conventional reverse-engineering such as fuzzing. In case of DoB
attack (Section 4.4), the attacker need not go through the reverse-engineering process,
because the DoB attack does not control ECUs but shuts them down by exploiting their
error handling and recovery mechanisms. By mounting a battery-drain and/or a DoB
attack, the attacker immobilizes the vehicle.

4.2 Waking Up ECUs

When the ignition is off, some ECUs are conﬁgured to run in sleep mode and contin-
uously monitor if there is any incoming local or bus wake-up signal. Taking this into
consideration, using his/her compromised ECU, the CAN adversary attempts to wake
up all other ECUs by delivering a bus wake-up signal to them. Then, what type of bus
wake-up signal should the adversary use in order to wake up the ECUs?

Standardized wake-up signal. The remote wake-up behavior of a CAN ECU was
ﬁrst introduced and speciﬁed in the ISO 11898-5:2007 standard which deﬁnes the bus
wake-up behavior as:

“One or multiple consecutive dominant (0-bit) bus levels for at least tF ilter, each

of them separated by a recessive (1-bit) bus level, trigger a bus wake-up.”

The ISO standard speciﬁes tF ilter to be within [500ns, 5µs]. We can thus deduce the
following three facts:

S1. Dominant bus level (i.e., bus with 0-bits) for longer than 5µs causes a wake-up;

S2. Dominant bus level for shorter than 500ns is ignored; and

S3. Dominant bus level for a period between 500ns and 5µs may cause a wake-up.

The actual value of tF ilter depends on the transceiver being used. In a CAN bus with bit
rates up to 200 kBit/s, i.e., bit width longer than 5µs, the dominant bus level condition
S1 is met with any 0-bit within a CAN frame/message. For bit rates up to 500 kBit/s, the

8

Figure 3: Format of a CAN data frame. For a normal CAN data message, RTR, IDE,
and r0 bits are deﬁned to be 0s and CRC and ACK delimiters are deﬁned to be 1s.

dominant condition S1 is also met for any normal CAN data message since its 1) RTR,
2) IDE, and 3) r0 bit (ISO11898-1:2003) (later revised to an FDF bit in ISO11898-
1:2015) are all deﬁned to be dominant (0s) as shown in Fig. 3. That is, in a 500
kBit/s bus, since those three bits—each with width 2µs—are sent consecutively, the
resulting duration of dominant bus level becomes at least 6 µs, thus (automatically)
guaranteeing/satisfying S1 to be met.

Note that the ISO standard speciﬁes such dominant bus levels to be separated by a
recessive bus level. This is easy to achieve since CAN always 1) stuffs a recessive 1-bit
after 5 consecutive 0 bits, i.e., bit-stufﬁng [3, 17], 2) has certain ﬁelds ﬁxed with a 1-bit
(e.g., CRC delimiter, ACK delimiter as shown in Fig. 3), and 3) the user can determine
what value(s) to ﬁll in such ﬁelds as ID, DLC, and DATA. The same also applies to the
extended CAN format which has a 29-bit ID. However, in this paper, we only consider
the basic/standard CAN data format since the extended format is seldom used (due to
its bandwidth waste) in contemporary vehicles; most vehicles use the basic/standard
format with 11-bit IDs.

The reason for OEMs’ agreement on a standardized wake-up signal was to guar-
antee a 100ms link acquisition time [12]. More importantly, the the wake-up signal
was deﬁned to be simple to allow for a low-power design (e.g., RC-circuit) of wake-up
detection, i.e., an energy-efﬁcient sleep mode [12]. OEMs want to reduce the aver-
age standby/asleep current consumption to be less than 300µA per ECU, and many
of them reduce it even further down to less than 100µA [18]. That is, the simple
design/deﬁnition of a wake-up signal was to prolong the battery operation time, i.e.,
energy-efﬁcient.2

Similarly to CAN, other in-vehicle networks such as FlexRay and LIN deﬁne the
wake-up signals to be simple for energy-efﬁciency. FlexRay speciﬁes the signal to be
long high/low [12] and LIN speciﬁes it to be a dominant bus level within the interval
[250µs, 5ms] [19]. The wake-up signal in those networks also wakes up all ECUs
asleep on the bus; see Table 1. An adversary can, therefore, easily wake up ECUs while
the ignition is off, in not only CAN bus but also other in-vehicle networks. However,
in this paper, we focus on CAN for a more in-depth treatment of the attacks.

CAN adversary waking up the bus. As the wake-up signal is simple and standard-
ized, all the CAN adversary needs to do is inject a fabricated wake-up message/signal
into the bus, which s/he has access to. As mentioned earlier, due to its simple deﬁnition,

2Energy-efﬁciency of vehicles is no longer an option, but is a prerequisite when deﬁning and developing
new ECUs. From 2020 onwards, there will be a very challenging threshold for CO2 emissions with 95g
CO2/km for passenger cars sold in Europe [13].

9

+Attack method : Withoutback-off control(Limitations…)0IDRTRIDER0DLCDataCRCCRC DelACKACK DelEOFArbitrationControlDataCRCACKDominant (0s)Recessive (1s)Figure 4: Consequence of controlling the power mode of a parked vehicle. After wak-
ing up ECUs (asleep in a parked vehicle), when we periodically injected messages
with an ID that corresponds to changing the power mode of the test vehicle, various
indicator lights continuously illuminated/ﬂickered even though the ignition was off.

a wake-up message with any content (i.e., ID, DLC, and DATA which are controllable
by a remote attacker) will wake up ECUs. Note, however, that only those ECUs which
are asleep (i.e., not completely off) will be awakened. This is ironic/paradoxic since
wake-up signals are made simple for energy-efﬁciency, i.e., to minimize battery con-
sumption, but such a simple design helps the attacker wake up ECUs, thus making the
vehicle less energy-efﬁcient.

Power source of the adversary’s ECU. One remaining requirement for a CAN
adversary to achieve this is that his (compromised) ECU has to remain powered on.
The attacker achieves this fairly easily thanks to two interesting facts.

First, the ECUs which a CAN adversary would (or can) compromise and thus use
are most likely to be continuously powered on, or (at least) have a separate power
source/supply during their operation. A typical example ECU that an attacker would
target (to compromise) is the telematic unit due to its wide variety of external/wireless
connectivities. The practicability of the telematic unit being compromised has already
been demonstrated in [2, 7, 8].
Interestingly, the telematic unit—which is regarded
as one of the most vulnerable ECUs [2, 3, 16, 20]—is usually completely (or at least
periodically) powered on so as to respond to external events (e.g., requests for remote
diagnosis, remote door/temperature control, anti-theft) even after the ignition key has
been taken out [21]. Moreover, a telematic unit is usually equipped with an alternative
power supply so that it can operate even when the car battery or electrical system is
faulty [22]. Similarly, an OBD-II device/dongle, which is also a good target for an
adversary to compromise (as demonstrated in [2, 16]), can also be completely powered
on (by the attacker) since it is also normally equipped with an external power source
(e.g., battery). In summary, ECUs which a CAN adversary will likely compromise
via their exposed attack vectors are the ones which are completely/always powered on
either by the car battery or their own power supplies.

Second, although the operational mode of a (compromised) ECU is preset to run
in sleep mode when the ignition is off, it does not restrict the adversary to change
such a setting. Two most common CAN controllers—Microchip MCP2515 and NXP
SJA1000—both allow modiﬁcation of their operation mode (e.g., normal, sleep, listen-
only) through software commands [23, 24]. For ECUs with the Microchip MCP2515
CAN controller, the Serial Peripheral Interface (SPI) remains active even when the

10

MCP2515 is in sleep mode, thus allowing access to all registers. Thus, through the
SPI, it is also possible for the user/adversary to read/write the CAN controller registers,
including the operational mode register [23]. Such user-level features for conﬁguring
the CAN controller allow attackers to easily switch from sleep to normal mode via
software commands.

As a result, a CAN adversary can inject wake-up messages to the CAN bus while
the ignition is off. The transceivers of ECUs asleep observe a wake-up signal on the
bus, switch on the ECUs’ power supply (usually via an interrupt), and boot up the
microcontroller. Hence, the ECUs return to normal operational mode. Since CAN is
a broadcast bus, even a single injected message from the CAN adversary causes all
ECUs asleep to run in that mode.

4.3 Battery-Drain Attack

We now give a detailed account of how an adversary can drain the battery of a ve-
hicle via message injections, i.e., mount a battery-drain attack. Here, we only give
the details of how the battery-drain attack can be mounted. Section 5 will detail their
consequences via in-depth evaluations on real vehicles.

4.3.1 Attack 1 — Waking up ECUs

While the ignition is off, the CAN adversary can ﬁrst attempt to wake up ECUs via
message injections. Once the ECUs asleep wake up, they switch to, and run in normal
operational mode. Note, however, that an awakened ECU goes back to sleep after a
certain period of time (conﬁgured by the OEM). Hence, by waking up ECUs as much
and as frequently as possible, the adversary can continuously force those ECUs to run
in normal mode, although they should remain asleep. If ECUs are conﬁgured to stay
in normal mode (after waking up) for a duration of Twakeup, the frequency of wake-up
. Since the adversary can read/sniff
messages from the attacker has to be at least
messages on the CAN bus, s/he can easily infer Twakeup from the monitored trafﬁc.

1
Twakeup

With continuous injections of wake-up messages, ECUs (that would usually be
asleep) will be forced to stay up in normal mode and thus draw much more current
(i.e., power) from the battery. In contrast to the ECUs asleep, which normally con-
sume less than 100µA of the battery current, normal-mode ECUs consume several mA.
Therefore, by simply waking up ECUs—the simplest battery-drain attack—the CAN
adversary can signiﬁcantly increase the battery current consumption and can thus re-
duce the battery operation time. We will later in Section 5 detail the amount of current
drained by simply waking up ECUs, and how that affects the vehicle battery operation
time.

4.3.2 Attack 2 — Controlling ECUs

An interesting consequence of waking up ECUs is not only the increased battery cur-
rent consumption but also the pathway it provides for the attacker to control ECUs. Af-
ter waking up, since ECUs previously asleep now run in normal operational mode—the
same as when the ignition is on—the CAN adversary becomes capable of controlling

11

them. We refer to “controlling an ECU” as executing the ECU’s function(s) via mes-
sage injections. For example, an attacker may inject an attack message with ID=0x11,
which is usually sent by some other ECU. If message 0x11 is processed and used by
the brake ECU in engaging/disengaging the brake, an injection of 0x11 will control
that ECU’s brake function and thus the corresponding vehicle maneuver.

However, the criticality levels of some (malicious) controls would be different from
when the vehicle’s ignition is on and moving, compared to the case when the vehicle is
parked with its ignition off, i.e., different from existing attacks. For example, ensuring
that the brakes do not unwillingly engage/disengage in a moving vehicle is safety-
critical. It might not be critical when the ignition is off and the vehicle is parked. From
the battery/energy consumption perspective, the controls that would be considered ma-
licious are different.

Controls that increase battery consumption. Since the activation of interior/exterior

lights is one of the highest battery-consuming functionalities, the adversary can attempt
to control them to increase the battery current drain. Instead of attempting to directly
control the interior/exterior lights (via light-control messages), we exploit the follow-
ing vehicle functions which indirectly illuminate various lights inside and outside the
vehicle.

C1. Changing the vehicle’s power mode;

C2. Repeatedly unlocking and locking doors; and

C3. Opening the trunk.

The reason why we exploit such indirect functions is that their control messages are
far easier to reverse-engineer (i.e., ﬁgure out the meaning/purpose of messages) than
the direct (light-)control messages if done based on driver context.3 This fact counters
the common belief that reverse-engineering CAN messages is a non-trivial painstaking
process [3]. We will later in Section 4.3.3 detail how the message reverse-engineering
process can be eased, especially for the purpose of battery-drain attack.

C1. Changing the vehicle’s power mode. Depending on the ignition switch posi-
tion, vehicles run in different power modes such as off, accessory mode, run, and start.
An adversary exploits this fact and can ﬁrst reverse-engineer the control message (via
driver context) which determines/reﬂects the vehicle’s power mode, wakes up ECUs
on the bus, and attempts to change the power mode using the reverse-engineered mes-
sage/ID.

Fig. 4 shows why changing the power mode of a vehicle can be considered as an
indirect way of illuminating lights and thus increasing the battery consumption, i.e.,
mount a battery-drain attack. It shows what happened when we tried to alter the power
mode of one of our test vehicles via message injections. Here, every procedure and
consequence was executed and happened while the ignition was off. We will later
in Section 5 provide the evaluation settings and general methodologies in accessing
the CAN bus and injecting messages. Note that it was fairly easy to reverse-engineer
(or ﬁgure out) the power-mode control message, especially when using the context—a

3To control vehicle functions, we must know which message ID(s) to use/inject. However, since that

information is OEM-proprietary, we must reverse-engineer them.

12

main reason why we attempted to mount the battery-drain attack via power-mode con-
trol instead of (direct) light control. When we controlled the power mode of a parked
vehicle, as shown in Fig. 4, various indicators on the dashboard were (temporarily)
illuminated. Similarly, albeit not shown in Fig. 4, the infotainment system was also
booted up. When we periodically injected the reverse-engineered “power-mode con-
trol” message to the bus, the indicators on the dashboard continuously ﬂickered and the
infotainment system was intermittently turned on.

Although the vehicle ignition was off, the injection of a (fabricated) power-mode
control message was successful since the vehicles’ power-mode master is the Body
Control Module (BCM)—the ECU which has to be at least asleep (but never com-
pletely off) due to its important role in providing various standby functions. BCM
not only plays a central role in a car by maintaining control over its various functions
such as power windows, air conditioning, and central locking, but also governs security
functions including Remote Keyless Entry (RKE), Vehicle Anti-Theft Security System
(VTSS), and Passive Anti-Theft System (PATS).

In summary, if a CAN adversary not only wakes up ECUs but also reverse-engineers
and injects power-control messages, s/he can continuously illuminate various lights/indicators
and further increase the overall battery consumption: an enhancement of battery-drain
attack that simply wakes up ECUs.

C2. Unlocking and locking the door. In addition to the previous two types of
battery-drain attack — waking up ECUs and controlling the power mode—a CAN
adversary can also attempt to repeatedly unlock and lock the vehicle (while parked).
The reason why a CAN adversary would mount a battery-drain attack in this way is not
only 1) the unlock/lock messages are easy to reverse-engineer but also 2) it activates
various light functions. When the driver (or the adversary) unlocks the car, welcome
lights of the vehicle illuminate for an enhanced visibility for the driver. Note that the
numbers and types of the welcome lights that illuminate may vary with the vehicle
manufacturer/year/model, and also depending on whether the lighting control system
is set as “automatic,” which is the default setting for most drivers [2].

During daytime, lights such as marker lights, interior lights, exterior footlights
(on side mirrors), and coming-home lights will/might illuminate when the driver un-
locks the vehicle. At night time, the vehicle will turn on its headlights. By reverse-
engineering and injecting “door lock control” messages to the bus and then exploiting
these driver-friendly lighting controls, an adversary can continuously illuminate all the
welcome lights and thus signiﬁcantly increase the average battery consumption; an-
other enhancement of battery-drain attack. Similarly to the attack case C1 where the
power mode was controlled, the door control module is another ECU which has to pro-
vide a standby function such as keyless entry and must thus be not completely off (i.e.,
must be asleep instead). This allows the attacker to control the door locks even when
the ignition is off.

C3. Opening the trunk. The adversary can also attempt to open the trunk of a
car similarly to the attack cases C1 and C2. Again, the trunk control module/ECU is
another ECU that would have to be asleep, not completely turned off. Therefore, by
reverse-engineering the trunk control message, an adversary can (remotely) open the
trunk. When the trunk is opened, for enhanced visibility for the driver, (almost all) vehi-
cles are conﬁgured to illuminate its interior map, dome, and trunk lights. Again, thanks

13

Figure 5: Driver-context-based reverse-engineering. Using this approach, a CAN ad-
versary can easily ﬁgure out which message IDs to use in mounting the battery-drain
attack.

to such user-friendly lightings, the adversary can illuminate more lights inside/outside
the vehicle and thus further increase the battery consumption, i.e., reduce the battery
operation time.

In contrast to C1 and C2, the attacker is only required to inject a single trunk-control
message into the bus if the lights remain on while the trunk is open (as some vehicles
do). Even if the lights automatically go off after some time, the attacker can re-inject
the trunk-control message to re-illuminate them. Note, however, that opening the trunk
could be a bit (visibly) intrusive, which is a limitation of this approach, although for
some vehicles we observed that it is not. However, if the adversary can deplete the
battery before the driver/passenger notices and thus attempts to close it, such an intru-
sive approach will still succeed in immobilizing the vehicle. When mounted overnight,
since the driver/passenger would notice this only when s/he attempts to start the car in
the following morning, the attacker could be given approximately half a day or even a
few days (e.g., weekends) in succeeding it!

4.3.3 Driver-Context-Based Reverse-Engineering

In controlling an ECU (as in C1–C3), since the message IDs that have to be used are
different for different vehicle manufacturers and models, adversaries would have to
reverse-engineer messages for each vehicle that it targets. This fact generally becomes
a (high) technical barrier for the adversary, especially when mounting state-of-the-art
attacks on different vehicles. However, for the purpose of battery-drain attack, the
message reverse-engineering can be achieved very differently, i.e., not via fuzzing.
Speciﬁcally, by reverse-engineering messages based on the driver-context, it becomes
much easier for the adversary to ﬁgure out which messages to use in mounting and thus
succeeding in battery-drain attack on different/various vehicles.

The proposed driver-context-based reverse-engineering works as follows.

1. When the ignition is off, the CAN adversary continuously wakes up ECUs and

14

records/logs the CAN trafﬁc as Ωof f as illustrated in Fig 5. If the adversary
knows when the driver usually starts the car (e.g., 9am in the morning), s/he
can start such a process just before that time. We deﬁne the sets of distinct IDs
sent while the ignition is on and off as Son and Sof f , respectively. Then, once
ECUs are awakened via a wake-up message from the adversary, |Sof f | distinct
message IDs would be observed on the bus and that number would be lower than
|Son|, since the number of ECUs running in normal operation mode (and thus
periodically sending messages) would be less.

2. The CAN adversary continuously logs the CAN trafﬁc as Ωof f and marks the bit
positions of messages’ (∈ Sof f ) data ﬁelds that continuously change as ∆of f .
One example of ∆of f can be the last byte of the data ﬁeld where OEMs usually
put their 1-byte checksum of each message (ID) [3, 5].

3. When the CAN adversary ﬁnds that the ignition is (now) turned on, onwards,
s/he records/logs the trafﬁc (of an “ignition on” vehicle) as Ωon. The CAN
adversary can acknowledge this by observing a suddenly-increased number of
distinct message IDs—from |Sof f | to |Son|—on the bus.

4. Since Sof f ⊂ Son, the CAN adversary analyzes how the data values/ﬁelds,
excluding ∆of f , of those message IDs (∈ Sof f ) changed during the period of
just before to right after the ignition being started.

An interesting yet important fact about Sof f ’s data values (excluding those in
∆of f ) is that they reﬂect the driver’s actions before driving the vehicle. Imagine a
person who tries to start and drive his/her car. S/he would ﬁrst unlock the vehicle and
then change its power mode, i.e., turn on the ignition. Perhaps, s/he might even open
the trunk to put items there before starting the vehicle. Such a routine of accessing and
starting the vehicle, which we deﬁne as the driver context, is embedded/reﬂected in
Ωof f , i.e., the CAN trafﬁc obtained while the ignition was off. Speciﬁcally, when the
driver makes some action (e.g., unlock the door) while the ignition is off, the data value
of an ID (∈ Sof f ) would change. Note that such a change would not incur in any of
the data ﬁelds in ∆of f , i.e., the bit positions which their values normally continuously
change, since the driver’s action and thus the corresponding change in the data values
are “temporary”. So, by observing the temporary data changes in Sof f incurred right
before the ignition is turned on, the CAN adversary can easily ﬁgure out which mes-
sages relate to those driver-context-related controls. Interestingly (and luckily for the
CAN adversary), as discussed in Section 4.3, such driver-context-related controls lead
to illuminating various indicators/lights. As a result, especially for a CAN adversary
attempting to mount a battery-drain attack, reverse-engineering the required control
messages (e.g., door lock/unlock, changing power modes) becomes far more easier!
The same can be applied when the driver stops and leaves the vehicle, since s/he would
again change the power mode, perhaps open the trunk, and of course, lock the vehicle.
Given below is an example of how we reverse-engineered one of our test vehicle’s
door-control messages. When describing the procedures, we do not use the actual ID
value nor the bit positions, since they are proprietary to the OEMs. When comparing
two sets of Ωof f , one before pressing a remote key fob and another during it, we found

15

(a) Messages were injected to the
parked test vehicle through the
OBD-II port.

(b) Vehicle architecture of one of our test vehicles. Once
a wake-up message was injected, several ECUs were awak-
ened.

Figure 6: Analysis of how our test vehicle responded to a wake-up message. We estab-
lished connection to our test vehicle’s CAN bus through the OBD-II port and examined
which and how many ECUs woke up when a wake-up message was injected.

that the data ﬁelds of message ID=0x01 had changed from [00 10 00 00 FF 00 AB CD]
temporarily to [00 30 00 00 FF 00 BC EF]. We veriﬁed in advance that the last 2 bytes
of message 0x01 continuously change, even without any actions taken on the vehicle.
That is, we veriﬁed that the last two data bytes of 0x01 belong to ∆of f . As a result,
we were able to easily ﬁgure out that the second byte of message 0x01 controls our
test vehicle’s lock and unlock functions. We will later show through evaluations that
such an approach was indeed successful and thus let us easily unlock & lock the car,
illuminate the welcome lights, and therefore, mount the battery-drain attack.

4.4 Denial-of-Body-control (DoB) Attack

In addition to the battery-drain attack, the CAN adversary can mount a Denial-of-Body-
control (DoB) attack in order to immobilize a vehicle, i.e., compromise its availability.
Bus-off recovery. Error handling is built in the CAN protocol and is important for
its fault-tolerance. It aims to detect errors in CAN frames and enables ECUs to take
appropriate actions, such as discarding a frame, retransmitting a frame, and raising
error ﬂags. If an ECU experiences or incurs continuous errors while transmitting or
receiving a message, the CAN protocol speciﬁes that its Transmit Error Counter (TEC)
or Receive Error Counters (REC) should be increased, respectively [17]. If its TEC
exceeds a pre-deﬁned threshold of 255 due to continuous errors, the ECU is forced to
enter a state called bus-off and shut down.

Exploiting such a standardized CAN feature, Cho and Shin [3] proposed a new at-
tack called the bus-off attack, which enforces other healthy/uncompromised ECUs to
shut down. See [3] for more details of the bus-off attack. The proposed DoB attack is
mounted in a similar way to the bus-off attack, except that it further exploits the fol-
lowing fact speciﬁed in the ISO 11898-1 standard [9] and thus immobilizes the vehicle.
The standard speciﬁes that

16

“Controlling” the VehicleAccessory ProtocolInstrumentalPanelTelematicAudioDigital Signal ProcFrontControlGPSRCMRemote ControlAutoTemp.Heating, VentRear trunkDriverDoorDriverSeatPassengerDoorBCMBody ControlImageProcPower SteeringRestraintControlProx. WarnParkingHeadlampABSAnti-lock BrakeSteeringOccupantClassifyHead-upDispPowertrainCAN-1CAN-2CAN-3Awakened ECUs“A node can start the recovery from the bus-off state only upon a user’s request.”

where the user’s request depends on the ECU’s software/policy conﬁguration. The
proposed DoB attack thus exploits such a deﬁnition of bus-off recovery as follows.

While the ignition is off, the CAN adversary wakes up ECUs so as to make them
responsive to his injected messages. Then, the adversary switches its bit rate (e.g.,
from 500 kBits/s to 250 kBits/s). According to the CAN error-handling scheme, this
makes all awakened ECUs on the bus continuously experience and incur errors, and
therefore enter the bus-off state, i.e., shut-down. This way, the adversary not only
mounts the bus-off attack on a targeted ECU (as demonstrated in [3]) but also on all
ECUs on the bus. Instead of changing the bit rates, changing internal/net resistances
or capacitances can be an alternative method in achieving this. As a result, per bus-off
recovery speciﬁcation, depending on the ECUs’ software conﬁgurations, some ECUs
would recover from the bus-off state, whereas some will not, i.e., remain shut down.

Depending on the car manufacturer and year/model, ECUs such as BCM or RCM,
which is the security ECU that authenticates each message to and from the remote key
fob, can in fact be conﬁgured/deﬁned not to recover from the bus-off state, mainly for
safety, since the bus-off is a serious problem [3], or for anti-theft purposes. Hence,
if the CAN adversary were to mount the DoB attack on such a vehicle, then s/he can
indeﬁnitely shut down the BCM or RCM, and thus cut off the communication between
the (driver’s) remote key fob and the vehicle. Contemporary/newer vehicles are mostly
equipped with the PKES system, which allows users to open and start their cars while
having their key fobs in their pockets [11] and is installed either in BCM or RCM. For
the vehicle to be opened/started, PKES must verify that the legitimate key fob is in the
vehicle’s vicinity. Therefore, shutting down BCM/RCM (and thus PKES) would mean
that the vehicle will not be able to receive and authenticate any remote key signals (sent
by the key fob), thus preventing opening or starting the vehicle, i.e., the CAN adversary
immobilizes the vehicle via a DoB attack.

Once the attacker succeeds in mounting DoB attack, there is no need for the attacker
to mount the attack, again; some ECUs that have entered bus-off will never boot up
again, anyway. This allows the attacker to not only succeed in mounting the attack in
a very short period of time but also leave without any trace, i.e., stealthy, except the
immobilized vehicle! We will later show through evaluations that such a conﬁguration
of BCM/RCM not recovering from bus-off actually exists in real vehicles and thus
makes the driver unable to open the door/trunk and start the vehicle even with his/her
legitimate, perfectly-functioning key fob.

5 Evaluation

We now evaluate the feasibility and criticality of the two proposed attacks—battery-
drain and DoB attacks—on various real vehicles.

5.1 Waking Up ECUs

To verify whether ECUs in real vehicles can indeed be awakened via simple wake-up
messages while the ignition is off, we connected a Vector CAN device to our test ve-

17

Figure 7: Verifying wake-up messages in 11 different vehicles. We compared how
many distinct message IDs were observed when the ignition was off but the ECUs
were awakened via a wake-up message and when the ignition was on.

hicles’ OBD-II port as shown in Fig. 6a.4 We then injected wake-up messages/signals
to the CAN bus. The wake-up message we used had its ID, DLC, and DATA ﬁelds —
that a user/adversary can control at the application layer — all ﬁlled with 1s. This was
to verify that messages with the minimum number of 0s can also properly function as
a valid wake-up message.

In-depth analysis on a test vehicle. Fig. 6b shows the in-vehicle network architec-
ture of one of our test vehicles — a 2017 year model5 — and the ECUs that responded
to the wake-up signals/messages. Note that this network architecture of the test vehi-
cle is not unique for the OEM of our test vehicle but is general/valid for the vehicles
built by other OEMs; there are only slight variations in the network architecture [25].
We veriﬁed which ECUs were awakened by logging the CAN trafﬁc that contains the
message IDs observed on the bus, and by mapping those IDs to the corresponding
transmitter ECUs using the test vehicle OEM’s CAN Data Base Container (DBC). The
CAN DBC describes the properties of the CAN network, the ECUs connected to the
bus, and the CAN messages and signals. For the purpose of this research, the CAN
DBC ﬁle was provided by the test vehicle’s OEM.6

When the wake-up message/signal was injected, one can see from Fig. 6b that not
all ECUs were awakened. This would be most probably due to different ECUs being
attached to different terminals (with different terminal control policies) in order to min-
imize battery/power consumption and, at the same time, provide various standby func-
tions. In CAN-1 which connects ECUs performing safety-critical functions, only 4 of
13 of them were awakened. On the other hand, in the CAN-2 bus where ECUs respon-
sible for vehicle body control were connected, almost all ECUs but two were awakened.
Considering the fact that contemporary/newer vehicles provide various standby “body
control” functions such as keyless entry, hands free (foot) trunk opening, and anti-theft,

4The OBD-II port can be used to access all CAN buses in a vehicle and is thus the principal means service

technicians use to diagnose and update individual ECUs [2].

5The model identity is not revealed for the OEM’s conﬁdentiality.
6Due to its proprietary information, such DBC ﬁles are not shared without permission from the OEMs

and their suppliers.

18

Attacks

Discharged Current [mA]

Ampliﬁcation Factor Max. Battery Operation Time [Days]

None
+ Wake-up
+ Change Power Mode
+ Lock & Unlock Door
+ Open Trunk

12.2
42.0
74.5
101.1
153.3

Baseline
x3.44
x6.11
x8.29
x12.57

30.7
8.92
5.02
3.70
2.44

Table 2: Maximum battery operation time under different battery-drain attacks. Based
on the measured battery current consumption for each attack, we determined what the
(theoretical) maximum battery operation time could be. Note, however, that in reality,
the actual operation time would be much lower than these due to the Peukert’s law [26].

more number of ECUs being awakened in CAN-2, i.e., bus with body-control ECUs,
than CAN-1 would be the norm.

Verifying wake-up functionality in various vehicles. Using the OBD-II device,
we also veriﬁed how different vehicles (OEMs/years/models) react to the injection of a
wake-up message. To conﬁrm that the wake-up functionality exists in different cars, we
chose various types of test vehicles: (compact and mid-size) sedans, coupe, crossover,
PHEV, SUVs, truck, and an electric vehicle with model-years 2008–2017.

Fig. 7 shows how many distinct messages were observed on the CAN bus 1) when
the ignition was on and 2) when we woke up ECUs on the bus via a wake-up mes-
sage injection while the ignition was off. Since the feasibility of wake-up stems from
how the in-vehicle network standard is speciﬁed and thus implemented, i.e., instead
of OEMs’ design decisions, we have chosen not to identify/reveal the particular make
and model used in our evaluation. Note, however, that the 11 examined test vehicles
(shown in Fig. 7) are from different OEMs and also represent different models. For
some vehicles, since their OBD-II pinout was conﬁgured to not provide full access to
all of their buses, we only show those that were awakened in the accessible bus(es).

When waking up ECUs in some old cars (most with low-level trims), far less
distinct message IDs and lower percentages of them (compared to the case with the
ignition on) were observed on the bus than other newer cars. Since the number of
ECUs is proportional to the number of distinct message IDs—although it is not linearly
proportional—we can infer that there were less awakened ECUs transmitting them in
older cars; not all messages can be sent by a single ECU due to the overhead. This
would most probably be due to the fact that the older cars do not require/provide any
(or not many) standby functions (e.g., PKES). For example, no standby functions (e.g.,
keyless entry, hands-free trunk opening) were provided in the 2008 and 2013 model-
year test cars; the reason why none and only one ECU was awakened, when a wake-up
message was injected on the bus.

On the other hand, when we injected a wake-up message on the buses of nine 2015–
2017 model-year test vehicles, we observed that 49.12–94.95% (75.44% on average)
of the distinct message IDs sent while the ignition was on, were also sent when ECUs
were awakened while the ignition was off. Such a high number/portion of ECUs be-
ing awakened from the wake-up message and thus sending more message IDs on the
bus is because they had numerous standby functions installed for enhanced driver’s ex-
perience and convenience (e.g., PKES/RKE, hands-free trunk opening, anti-theft)—a

19

Figure 8: Setup for measuring battery drain/consumption. The discharge current from
our test vehicle’s battery was measured using a multi-meter.

trend that is expected to expand. These results corroborate the fact that vehicle ECUs
are indeed equipped with the wake-up functionality (adhering to the standard) and can
thus be exploited by the CAN adversary as an attack vector.

5.2 Battery-Drain Attack

After verifying that the ECUs in our test vehicles can be awakened via basically any
wake-up message (even with all 1s in ID, DLC, and DATA ﬁelds), we mounted 4
different types of battery-drain attack on one of our test vehicles: 1) simple wake-up,
2) power mode control, 3) repetitive door unlock & lock, and 4) opening the trunk.
We were able to reverse-engineer the control messages for those functionalities via the
proposed driver-context-based reverse-engineering.

In order to measure the drained/discharged current from the car battery, we dis-
connected the negative cable from the negative battery terminal and connected our
multimeter in series to the battery, i.e., one probe to the negative cable and the other
to the battery terminal. We conducted the battery current draw test from the negative
side to prevent accidental shorting and while the vehicle was parked with its ignition
off. Then, as shown in Fig. 8, we injected (iterative) sequence of control messages to
the vehicle through the OBD-II port.

Drained current. Table 2 summarizes how much current (on average) was mea-
sured to be drawn from the vehicle battery when each attack was mounted additionally.
When the ignition was off and all ECUs were either asleep or completely off, i.e.,
when we did not wake up any ECU, the consumed current was 12.2mA. As expected,
this value was below the parasitic drain threshold, which is about 30mA. However,
when we just woke up the ECUs, the discharged current exceeded that threshold and
drained 42mA. Exceeding the parasitic drain threshold even slightly is considered to

20

be a serious/critical problem. As we controlled more functions that indirectly illumi-
nated exterior/interior lights, the average battery consumption increased further to 74.5,
101.1, and 153.3mA.

More worse cases. It is important to note that, depending on the vehicle model,
there could/would be (much) more of such controllable functions, thus allowing the
attacker to drain the battery more quickly and easily. However, we only show 4 controls
as examples for the proposed battery-drain attack since they are already very critical.
Moreover, if the attacks are launched at night time when the exterior brightness is low,
the car headlights will always come on (as one type of a welcome light) when the car
is unlocked. As a result, the current drain will further increase sharply, i.e., drain the
battery very quickly. However, in order to show the minimum drain/discharge, i.e., the
worst possible case for the adversary, we conducted all our experiments outdoor during
day time.

Expected battery operation time. In order to better understand how the increased
battery current consumption relates to how quickly the attacker can immobilize the
car, we determine the battery operation time as follows. Consider a 45Ah battery,
which is the standard car battery capacity, with a State-of-Charge (SoC) of 70%—the
average battery SoC of a passenger vehicle—when parked. Then, since the minimum
SoC for a cold start is considered to be 50% in the worst case [12], i.e., worst-case
for the adversary, our test vehicle’s battery can theoretically remain idle/parked for up
to 45Ah×(0.7−0.5)
= 737.7 hours ≈ 30.7 days; something that is normally expected.
12.2mA
Note that this is the theoretically maximum battery operation time since we considered
the worst possible case for its derivation.

One can see from Table 2 how the maximum battery operation time was reduced as
different types of battery-drain attacks were mounted. Theoretically, with the 4 control
functions, it only takes a maximum of 2.44 days for an adversary to immobilize the ve-
hicle via a battery-drain attack, i.e., can be achieved over the weekends. It is important
to note, however, that it could take much shorter especially when the temperature is
low and the battery is aged. More interestingly, in reality, the actual battery operation
time is known to be much shorter than the theoretical/ideal value, i.e., much shorter
than the times shown in Table 2. According to the Peukert’s Law, because of intrinsic
losses and the Coulombic efﬁciency being always less than 100%, the actual battery
operation time is much lower than the ideal/theoretic value in which the latter assumes
the battery to be ideal [26]. In fact, since the intrinsic losses in the battery escalate as
load increases, the battery capacity is known to drop sharply as the drained/discharged
current increases. This implies that as the adversary controls more functionalities, s/he
can not only increase the battery consumption but also decrease the available battery
capacity at the same time! So, s/he can signiﬁcantly reduce the battery operation time
via a battery-drain attack, thus crippling the vehicle quickly, perhaps overnight.

5.3 Denial-of-Body-control (DoB) Attack

Through experiments on one of our test vehicles, we also veriﬁed the consequences
of the proposed DoB attack. Using the connected OBD-II device, we mounted a DoB
attack as described in Section 4.4.

21

Figure 9: Consequence of a DoB attack. After the attack, the vehicle could no longer
detect that the key fob was inside it.

After launching the DoB attack on one of our parked test vehicles, taking only
a few seconds, we conﬁrmed from the CAN trafﬁc that all ECUs on the bus were
continuously incurring and/or experiencing errors, causing all the ECUs to enter the
bus-off state. After mounting the DoB attack, we observed most, but not all of the
ECUs recovered from the bus-off state as conﬁgured. We observed that the number of
distinct message IDs sent on the bus was actually reduced by 6 after the DoB attack.
By mapping those missing IDs to the actual transmitter ECU using the DBC ﬁle, we
found that the RCM (Remote Control Module) did not recover from the bus-off, i.e.,
remained shut down, most probably due to its distinct recovery policy conﬁguration
(perhaps for anti-theft/engine-immobilizer purposes). Since the RCM was indeﬁnitely
off, the key fob was not authenticated and thus could not establish a connection to the
vehicle. As shown in Fig. 9, the vehicle could not detect that the key was in its vicinity;
the key was in fact placed right in front of the dashboard. This consequence of the
proposed DoB attack was reproducible on our test vehicle.

Of course, remote key fobs are now equipped with RFID chips that can be used
for authentication, connection establishment, and thus starting the vehicle in case of
a dead key fob battery. However, since the communication between the key fob’s
RFID and the vehicle was also conﬁgured to be governed by the RCM, the RFID-
based (emergency) start did not work either. More interestingly, after mounting the
DoB attack, when we tried to open the doors or trunk to enter the car, we could not
since the RCM was not functioning and thus failed to authenticate the key fob. The
only way to get in was actually using the back-up physical key hidden in the key fob.
Note, however, that the car did not start anyway (as shown in Fig. 9) even though we
were able to enter it!

As discussed earlier, this consequence comes from the fact that OEMs (or their
In our test vehicle, the
ECUs) may have different bus-off recovery conﬁgurations.
setting of an RCM to not recover from the bus-off “favors” the attacker in mounting a
critical DoB attack. We found the only way to restore the vehicle back to its original
state after a DoB attack was to disconnect the battery, wait for a few minutes, and re-

22

connect the battery. Such a process resets the states stored in each ECU and thus lets
them run in their original/intended states. However, imagining a victim confronting
the symptoms of DoB attack, i.e., the key fob neither working nor being detected, s/he
might ﬁrst try to change the key fob battery. Obviously, since that won’t work, s/he
would consider the car battery completely dead and therefore, would probably have
the car towed to the service station for a battery replacement, wasting money and time
unnecessarily!

6 Related Work

Exploiting a remotely compromised ECUs, researchers have shown how various ve-
hicle maneuvers (e.g., braking, steering) can be (maliciously) controlled by injecting
packets into the in-vehicle network [7, 8]. Similarly, in 2015, researchers were able to
compromise and remotely kill a Jeep Cherokee running on a highway [5], which trig-
gered a recall of 1.4 million vehicles. In 2016 and 2017, researchers were able to hack
a Tesla model S and model X, respectively, exploiting software vulnerabilities, and
controlled vehicle maneuvers [6]. Researchers have also demonstrated that an adver-
sary can also shut down a speciﬁc ECU or even the entire in-vehicle network merely
via packet injection [3]. The authors of [27] also succeeded in a remote attack via
a vehicle’s tire pressure monitoring system (TPMS). Researchers also proposed new
hardware which can generate/fabricate magnetic ﬁelds, spoof the wheel speed sensor
on a vehicle, and thus activate the Anti-lock Braking System (ABS) [28].

Although such attacks were effective, they were mounted and thus considered ma-
licious only when the vehicle is running. In contrast, we focused on, and proposed
new attacks that are effective when the ignition is off. Moreover, the controlled func-
tionalities had to be very different from existing attacks since those that are considered
“critical” are different. The steering being maliciously controlled is clearly safety-
critical when the vehicle is running, but not so when the vehicle is parked; illumination
of exterior/interior lights might be a more critical problem!

7 Discussion

Countermeasures. As the proposed battery-drain attack and DoB attack are mounted
with the ignition off, the design principles of their countermeasures have to be very
different from the state-of-the-art defenses, which are mostly concerned with attacks
on “running” vehicles. For example, as of the current CAN standard, since the wake-up
itself can be achieved with any CAN message having a 010 bit-sequence, adding MAC
or message encryption cannot prevent the adversary from waking up ECUs; a message
with MAC/encryption will still have such a sequence.

The cornerstone of battery-drain attack and DoB attack is to wake up ECUs asleep
on the bus while the ignition is off. So, as their feasible and effective countermeasure,
one can think of continuously running an Intrusion Detection System (IDS) even when
the ignition is off in order to capture any abnormal wake-up messages; wake-up mes-
sages usually should not be seen very frequently. However, since the operation of an

23

IDS would increase the current drawn from the battery, such an approach may defeat
the very purpose of reducing battery consumption. Like other ECUs asleep, the IDS
ECU can also be conﬁgured to sleep most of the time and wake up only when it sees a
wake-up message. In such a case, as a countermeasure against both types of attack, the
wake-up pattern of an IDS can be modeled and used to detect any abnormal wake-up
requests on the bus without continuously running it. Similarly, the IDS can be conﬁg-
ured to wake up periodically, check the battery SoC—if there was any signiﬁcant drain
recently—and react accordingly. Moreover, especially for the DoB attack, how to re-
cover from the bus-off state has to be re-examined in order to prevent the consequences
of the DoB attack, as we had demonstrated.

Enhanced wake-up functionality. Partial networking—i.e., partial deactivation
of subnets within a given network—has been discussed and planned to be installed
by car manufacturers. This is to reduce energy consumption and thus CO2 emis-
sions [13].
In such a setting, only the pre-deﬁned wake-up messages that pass the
wake-up masks/ﬁlters of selective ECUs can wake up those ECUs during operation.
However, since that message is “pre-deﬁned” and can easily be learned by observ-
ing the CAN trafﬁc and its sudden change in the number of message IDs (as in Sec-
tion 4.3.3), the wake-up message itself can still be learned and used by an adversary.
In fact, the introduction of partial networking will increase the number of ECUs to
sleep rather than being completely turned off, and thus provide a larger attack space for
mounting the proposed attacks.

Limitations. We considered/assumed that the (CAN) adversary has access to the
in-vehicle network via a compromised ECU (either a compromised OBD-II dongle
or an in-vehicle ECU)—a limitation of our approach—to mount the proposed attacks.
However, we must not overlook the fact that the adversary might not even need a com-
promised ECU to mount the proposed attacks. To further enhance the driver’s con-
venience, companies such as Volvo [29], Lexus [30], and Tesla [31] started to let car
owners unlock/lock their cars by using their smartphone apps with an eventual goal to
totally replace key fobs with smartphone software. This means the existence of another
(new) attack vector for mounting battery-drain attack: compromising those apps! As
more of such vehicle-related technologies evolve and get deployed, there may be more
(intelligent) ways of mounting the proposed attacks.

Although we succeeded in mounting battery-drain attack and DoB attack on our
2017 model-year test vehicle, not many ECUs were awakened when a wake-up mes-
sage was injected in older vehicles, because they had less standby functions than newer
models, and thus had less ECUs asleep while the ignition was off. The proposed at-
tacks will likely be easier and more effective to be mounted on newer models as we
observed in waking up more ECUs in newer vehicles (Fig. 7). For the DoB attack,
however, since its success/feasibility will totally depend on how the OEMs conﬁgured
their “bus-off recovery” for different ECUs, it might not be as feasible as battery-drain
attack. The battery-drain attack will still be feasible unless the standard wake-up pro-
cedure is changed or standby functions are not installed.

24

8 Conclusion

In this paper, we discovered two new important vulnerabilities in vehicle availability:
battery-drain and Denial-of-Body-control (DoB) attacks. They are counter-intuitive in
that attacks are commonly believed to be possible and effective only while the igni-
tion is on. Speciﬁcally, we have shown that an attacker can wake up ECUs on the
bus, even while the ignition is off, mount the proposed attacks, and then immobilize a
parked vehicle with its ignition off. Through extensive experiments on real vehicles, we
showed that such attacks are indeed easy to mount and very critical to vehicle availabil-
ity. Ironically, the adversary exploits, as attack vectors, the in-vehicle network features
originally designed for either energy-efﬁciency (e.g., simple wake-up signals) or en-
hanced user/driver experience/convenience (e.g., standby functions). There could still
remain different types of unknown and unintuitive vehicle vulnerabilities, like the two
proposed here. It is therefore important to analyze and understand what consequences
existing built-in/standardized functionalities can lead to. This calls for concerted ef-
forts from both academia and industry on this possibility and countermeasures thereof
in order to build secure vehicles.

References

[1] R. R. Brooks, S. Sander, J. Deng, and J. Taiber, “Automobile security concerns,”
IEEE Vehicular Technology Magazine, vol. 4, no. 2, pp. 52–64, June 2009.

[2] S. Checkoway, D. McCoy, B. Kantor, D. Anderson, H. Shacham, S. Sav-
age, K. Koscher, A. Czeskis, F. Roesner, and T. Kohno, “Comprehen-
sive experimental analyses of automotive attack surfaces,” in Proceedings
of
the 20th USENIX Conference on Security,
Berkeley,
CA, USA: USENIX Association, 2011, pp. 6–6.
[Online]. Available:
http://dl.acm.org/citation.cfm?id=2028067.2028073

ser. SEC’11.

[3] K.-T. Cho and K. G. Shin,

them vulnerable,”

in-vehicle networks
the 2016 ACM SIGSAC
makes
Conference on Computer and Communications Security,
ser. CCS ’16.
New York, NY, USA: ACM, 2016, pp. 1044–1055. [Online]. Available:
http://doi.acm.org/10.1145/2976749.2978302

“Error handling of

in Proceedings of

[4] D. Nilsson and U.Larson, “A Roadmap for Securing Vehicles against Cyber At-
tacks,” in NITRD National Workshop on High-Conﬁdence Automotive Cyber-
Physical Systems, Apr. 2008.

[5] C. Miller and C. Valasek, “Remote exploitation of an unaltered passenger vehi-

cle,” Black Hat USA, 2015.

[6] “Tesla Responds to Chinese Hack With a Major Security Upgrade. [Online]
http://web.archive.org/web/20171104002232/https://www.wired.com/,” WIRED,
Sep. 2016.

25

[7] K. Koscher, A. Czeskis, F. Roesner, S. Patel, T. Kohno, S. Checkoway, D. McCoy,
B. Kantor, D. Anderson, H. Shacham, and S. Savage, “Experimental security
analysis of a modern automobile,” in 2010 IEEE Symposium on Security and
Privacy, May 2010, pp. 447–462.

[8] C. Miller and C. Valasek, “Adventures in automotive networks and control units,”

Defcon 21, 2013.

[9] “ISO 11898-1. Road Vehicles interchange of digital

area network (CAN)
http://web.archive.org/web/20170609150140/https://www.iso.org/.”

information controller
for high-speed communication [Online] Available:

[10] “DIN

72552

Standard

[Online]

Available:

https://web.archive.org/web/20171102195050/https://www.din.de/en.”

[11] A. Francillon, B. Danev, and S. Capkun, “Relay attacks on passive keyless entry
and start systems in modern cars,” in In Proceedings Of The 18th Annual Network
and Distributed System Security Symposium (NDSS), 2011.

[12] T. Hogenmuller and H. Zinner, “Tutorial for Wake Up Schemes and Re-
quirements for Automotive Communication Networks [Online] Available:
http://grouper.ieee.org/groups/802/3/RTPGE/.”

[13] T. Liebetrau, U. Kelling, T. Otter, and M. Hell, “Energy Saving in Automotive

E/E Architectures [Online] Available: https://www.inﬁneon.com/,” Dec. 2012.

[14] “Industrial

CAN

[Online]
Standby
https://web.archive.org/web/20171110214458/http://www.ti.com/.”

Mode

with

Transceiver
Bus

with
Wake-up

Ultra

Low

Power
available:

[15] M.-M. Hell, “The new wake-up pattern for a robust system,” in CAN in Automa-

tion iCC, 2017.

[16] I. Foster, A. Prudhomme, K. Koscher, and S. Savage, “Fast and vulnerable:
A story of telematic failures,” in 9th USENIX Workshop on Offensive Tech-
nologies (WOOT 15). Washington, D.C.: USENIX Association, 2015.
https://www.usenix.org/conference/woot15/workshop-
[Online]. Available:
program/presentation/foster

[17] “CAN

Speciﬁcation

Version

2.0

[Online]

Available:

http://web.archive.org/web/20170926054355/https://www.nxp.com/.”

[18] C. Culshaw and A. Winter,

tomotive Systems Requiring Periodic Wake Up
https://web.archive.org/web/20171111021830/https://www.nxp.com/.”

“Optimizing Power Consumption of Au-
[Online] Available:

[19] “Introduction to the Local Interconnect Network (LIN) Bus. [online] available:
https://web.archive.org/web/20160714052136/http://www.ni.com/white-paper/.”

26

[20] K.-T. Cho and K. G. Shin, “Fingerprinting electronic control units for
vehicle intrusion detection,” in 25th USENIX Security Symposium (USENIX
Security 16). Austin, TX: USENIX Association, 2016, pp. 911–927. [On-
line]. Available: https://www.usenix.org/conference/usenixsecurity16/technical-
sessions/presentation/cho

[21] “Application-Driven Power Management Keys In-Car Telematics [Online] Avail-
able: https://web.archive.org/web/20171105225654/https://www.eetimes.com/.”

[22] J. Mikulski, Transport Systems Telematics: 10th Conference, TST 2010, Katowice
- Ustron, Poland, October 20-23, 2010. Selected Papers, ser. Communications
in Computer and Information Science.
Springer Berlin Heidelberg, 2010.
[Online]. Available: https://books.google.com/books?id=R7Mo2Sj E7IC

[23] “Microchip

MCP2515

Datasheet.

[Online]

Available:

http://web.archive.org/web/20171029071459/http://www.microchip.com/.”

[24] “Philips/NXP SJA1000 Stand-alone CAN controller datasheet. [Online] Avail-
able: http://web.archive.org/web/20170926054355/https://www.nxp.com/.”

[25] C. Miller and C. Valasek, “A survey of remote automotive attack surfaces,” Black

Hat USA, 2014.

[26] D. Doerffel and S. A. Sharkh, “A critical review of using the Peukert equation
for determining the remaining capacity of lead-acid and lithium-ion batteries,”
Journal of Power Sources, vol. 155, pp. 395–400, 2006.

[27] I. Rouf, R. Miller, H. Mustafa, T. Taylor, S. Oh, W. Xu, M. Gruteser,
W. Trappe, and I. Seskar, “Security and privacy vulnerabilities of in-car wireless
networks: A tire pressure monitoring system case study,” in Proceedings
of
the 19th USENIX Conference on Security, ser. USENIX Security’10.
Berkeley, CA, USA: USENIX Association, 2010, pp. 21–21. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1929820.1929848

[28] Y. Shoukry, P. Martin, P. Tabuada, and M. Srivastava, “Non-invasive spooﬁng
attacks for anti-lock braking systems,” in Proceedings of the 15th International
Conference on Cryptographic Hardware and Embedded Systems, ser. CHES’13.
Berlin, Heidelberg: Springer-Verlag, 2013, pp. 55–72. [Online]. Available:

[29] “Volvo wants your phone to be the only car key you ever need [online] avail-
able: https://web.archive.org/web/20170703130519/https://www.theverge.com/,”
2016.

[30] “Lexus

2018

Technology

[Online]

Available:

http://www.herbchamberslexusofhingham.com,” 2017.

[31] “Tesla Model 3 has no key: so don’t forget your phone [Online] Available:
https://web.archive.org/web/20171115054847/https://www.cnet.com/,” 2017.

27

