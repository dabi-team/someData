1
2
0
2

c
e
D
9
2

]

R
C
.
s
c
[

1
v
1
2
8
4
1
.
2
1
1
2
:
v
i
X
r
a

Anomaly Detection in Cyber-Physical Systems:
Reconstruction of a Prediction Error Feature Space

Nuno Oliveira
Research Group on Intelligent Engineering and Computing
for Advanced Innovation and Development (GECAD)
Porto School of Engineering (ISEP)
Porto, Portugal
0000-0002-5030-7751

Norberto Sousa
Research Group on Intelligent Engineering and Computing
for Advanced Innovation and Development (GECAD)
Porto School of Engineering (ISEP)
Porto, Portugal
0000-0003-2919-4817

Jorge Oliveira
Research Group on Intelligent Engineering and Computing
for Advanced Innovation and Development (GECAD)
Porto School of Engineering (ISEP)
Porto, Portugal
0000-0002-3190-8367

Isabel Prac¸a
Research Group on Intelligent Engineering and Computing
for Advanced Innovation and Development (GECAD)
Porto School of Engineering (ISEP)
Porto, Portugal
0000-0002-2519-9859

Abstract—Cyber-physical systems are infrastructures that use
digital information such as network communications and sensor
readings to control entities in the physical world. Many cyber-
physical systems in airports, hospitals and nuclear power plants
are regarded as critical
infrastructures since a disruption of
its normal functionality can result in negative consequences
for the society. In the last few years, some security solutions
for cyber-physical systems based on artiﬁcial intelligence have
been proposed. Nevertheless, knowledge domain is required to
properly setup and train artiﬁcial intelligence algorithms. Our
work proposes a novel anomaly detection framework based on
error space reconstruction, where genetic algorithms are used
to perform hyperparameter optimization of machine learning
methods. The proposed method achieved an F1-score of 87.89%
in the SWaT dataset.

Index Terms—Cyber-physical systems, anomaly detection, se-

curity, artiﬁcial intelligence, convolutional neural networks

I. INTRODUCTION

Cyber-physical systems (CPS) employ software components
to control physical mechanisms, from simple sensors to more
complex mechanical actuators and controllers [1], [2]. These
systems are highly dependent on network connectivity in order
to be properly monitored and controlled [3]. The CPS opens
new avenues for technological improvement. Examples of this
improvement include Smart Grids [4] and Industry 4.0 [5],
with real world examples such as MIT’s Robot Garden [6]
and CarTel [7].

Due to the ﬂexibility and the optimization afforded by CPS,
the advent of smart critical infrastructures is no surprise. The
examples mentioned above are but a fraction of the coming
industrial revolution [8]. On the other hand, attacks can cause
malfunctions of a given infrastructure or service, thus creating
a negative impact in the society. Some examples have already
been reported, such as the 2015 attack on the Ukrainian power

grid [9], as well as the 2006 attack that affected the water
treatment plant of Pennsylvania and the 2003 attack on a power
plant in Ohio [10].

The traditional security strategies are not enough to safe-
guard CPS [11], [12]. The need to constantly adapt security
systems to the most relevant threats makes the involvement of
artiﬁcial intelligence a good solution [13]. The applications of
AI for this purpose are already present in the literature, with
the application and comparison of several machine learning
techniques on a popular, real world example of a cyber-
physical system dataset - the Secure Water Treatment (SWaT)
dataset [3], [14].

Despite the previous methodologies achieving considerable
results, our novel approach of reconstruction and analysis of a
new feature space has proven to be a promising research topic
in the context CPS security. A Convolutional Neural Network
(CNN) based predictor starts by forecasting the next expected
sensor and actuator readings, when compared to the actual
sensor values an error is measured at different time lags. Using
that information, a new higher-dimensional space is recreated,
where the system dynamics is analyzed over time. On such
a space, unsupervised learning algorithms such as Support
Vector Machine (SVM) and K-means clustering are used to
detect deviations from normality.

The document is organized in multiple sections that can be
detailed as follows. Section 2 describes the status of current
security measures developed for cyber-physical systems and
provides a comparison between different types of machine
learning models for outlier detection. Section 3 explains the
proposed anomaly detection method. Section 4 describes the
considered case study. Section 5 presents the obtained results
and their discussion. Section 6 provides a summary of the
main conclusions that can be drawn from our research.

978-1-7281-9266-6/21/$31.00 ©2021 European Union.

 
 
 
 
 
 
II. RELATED WORK

The use of artiﬁcial intelligence for the security of cyber-
physical systems is not a new endeavor, with several other
works also presenting anomaly detection methods [15]–[17].
In [17], Dmitri Shalyga et al. compared the abnormal detec-
tion rate of different types of neural networks, for identifying
attacks on a CPS. The future sensor readings were predicted
based on a previous window of a ﬁxed duration. An anomaly
is detected if the expected error between predicted and actual
values is greater than the 99th percentile. Furthermore, with
the intention of improving the quality of the anomaly thresh-
old, several techniques were employed such as exponentially
weighted smoothing, mean p-powered error and weighted p-
powered error. Finally, due to the unbalanced nature of the
dataset, a disjointed time window technique was applied,
where the window used to forecast at given time point might
not be the one immediately preceding it. With this setup, a
multilayer perceptron (MLP) based model achieved an F1-
score of 81.2%.

In [16], Moshe Kravchik et al. used a 1D-CNN to identify
anomalies in the SWaT dataset. A threshold is estimated
from the model’s prediction error in the training dataset.
Using such a threshold, the authors were able to distinguish
attacks from normal behaviours, through a z-score function.
To approximate and select the local optimal hyperparameters,
a grid search was employed. In this manner an F1-score of
87.1% was achieved. In [18] the same author applied the
previous approach for anomaly detection, using a mix of grid
search and genetic algorithms for tuning the hyperparameters
of an autoencoder network. The author obtained an F1-score
of 87.3%, an improvement from his previous work.

In [19], Giulio Zizzo et al., achieved an F1-score of 81.7%
with a Long-Short Term Memory (LSTM) based model. Using
grid search to compute the best values window duration and
error threshold.

Jun Inoue et al. in [15] have investigated the detection
capabilites of two unsupervised machine learning algorithms,
a Deep Neural Network (DNN) composed of a single LSTM
layer followed by multiple feed-forward layers and a one-class
SVM. The ﬁrst implements probabilistic outlier detection by
judging low probability data points as anomalies while the
second resembles a more straightfoward application of the
one-class SVM. For the SWaT dataset the DNN obtained an
f1-score of 80.3% as the one-class SVM achieved a slightly
smaller value for the same metric, 79.6%. Furthermore, the
authors have concluded that both methods share the same
limitations: detecting anomalous actuator behaviour and iden-
tifying gradual changes of sensor values.

In [20], D. Li et al. presents a novel anomaly detection
approach using Generative Adversarial Networks (GAN). In
this work two LSTM Recurrent Neural Networks (LSTM-
RNN) are trained in different roles, one is trained as a detector
ﬁnding anomalies that deviate from the baseline, and the other
as a generator capable of creating simulated normal baselines.
These two models are then introduced as adversaries in an

iterative feedback-loop training process, obtaining an F1-score
result of 77% on the SWaT testbed.

For this dataset, the best results we found in the literature,
88.2% F1-score, was obtained by M. Elnour et al. in [21].
An isolation forest based approach to anomaly detection, that
separates anomalies from normal observations by analysing
both normal data and its Principal Component Analysis (PCA)
transformed representations.

III. PROPOSED METHOD

Our anomaly detection approach is based on the forecasting
of sensor and actuator reading values for the near future
through a machine learning model. This model was trained
only on normal data, i.e. data extracted from the expected
system activity. By comparing the model’s predictions with the
ground truth (future sensor readings) we are able to compute
the model’s prediction error. In the deployment phase, an at-
tack that compromises the expected system activity, generates
signatures or patterns that a machine learning model (trained
on regular data activity) is not capable of predict. When these
unexpected and large prediction errors happen, the AI system
can infer that an attack was performed on the system, and
stop it in an early stage. Figure 1 provides an overview of the
proposed anomaly detection approach.

For the forecasting task, a CNN is used. These are very
popular methods in image processing and object recognition
tasks [22]. For time-series analysis, CNNs are also widely
used due to their receptive ﬁeld capability, which allows them
to explore efﬁciently the time dependencies across several
events of a given time frame. On the other hand, for the
anomaly identiﬁcation task we have considered three different
approaches, a ﬁxed anomaly detection threshold (α) obtained
by multiplying the largest model’s prediction error in the train
set (δ) with a sensitivity parameter (β); one-class support
vector machine and K-means clustering.

The employed deep learning model has several hyperparam-
eters and architectures that can be explored to achieve optimal
results. Furthermore, the whole anomaly detection approach
also depends on other parameters such as the window, w, and
the sensitivity parameter, β. As the readings for the utilized
dataset are collected every second, this implicates a window
of ws. Table 1 describes a base architecture for the CNN. For
each convolutional layer of the presented architecture, padding
was applied equally and stride was set to one.

TABLE I
EXAMPLE - CNN ARCHITECTURE.

Layer

Size

Activation

Dropout

Input
Conv1D
MaxPooling1D
Conv1D
MaxPooling1D
Flatten
Dense
Dense
Dense

(w, 51)
32
2
64
2
192
64
32
51

-
ReLU
-
ReLU
-
-
tanh
tanh
sigmoid

-
-
-
-
-
-
0.2
0.2
0.2

Fig. 1. Overview of the proposed anomaly detection approach.

The network was trained for 100 epochs using batches of
433 and Adam as optimization function. Additionally, an early
stopping method was employed in order to stop the training as
soon as the loss value stopped increasing for ﬁve consecutive
epochs.

There is a vast number of hyperparameter combinations
for the proposed method. Exploring all possibilities with a
grid search would be impractical and reducing the amount
of possible values that each hyperparameter can take would
drastically reduce the chances of ﬁnding an optimal network
setup. Therefore, we opted to use a genetic algorithm to
incrementally search for solutions with better detection perfor-
mance through a series of reproduction, mutation, evaluation
and selection processes. The hyperparameters of the proposed
detection method were encoded as genes of individuals which
resemble candidate solutions.

Regarding the unsupervised learning models, a new embed-
ding space was created from the CNN forecasting errors and
their lagged observation values. The SVM was directly trained
on the errors of the CNN train set forecasts to build a decision
function able to distinguish errors related to normal behaviour
from abnormal-related ones. Radial basis function was used
as kernel function of the SVM model and different values for
µ and γ were experimented.

For the K-means, the errors of the CNN train set forecasts
were insufﬁcient to train the model since examples of errors
resembling attack occurrences are necessary to make the
algorithm categorize the data points into different clusters -
one for normal errors and another one for attack-related errors.
Regarding the model conﬁguration, the Euclidean distance
function was used and the clusters were initialized using the
K-means++ algorithm. The stopping criterion was set to 300
iterations.

IV. CASE STUDY
In order to evaluate the proposed method, we have selected
a case study in the context of cyber-physical systems research,
the SWaT dataset. SWaT was designed by the Singapore
University of Technology and Design to boost CPS security
research. They provided a labeled dataset collected from a
realistic testbed of sufﬁcient complexity [3]. It represents a

scaled-down version of real-world industrial water treatment
plants such as those found in the majority of cities.

Data was recorded from the sensors and actuators distributed
across the 6 steps of the water treatment process, illustrated in
Figure 2. The 24 sensors measure water level, ﬂow, PH and
conductivity, among other things, in each relevant step of the
process. This information is then acted upon by the multitude
of actuators, controlling pumps and motorized valves.

Fig. 2. SWaT processes overview (extracted from [3])

All sensor and actuator readings were logged every second
for a total of eleven days. In the ﬁrst seven days only normal
activities were registered, while in the last four days both
normal activities and several attacks launched at the water
treatment plant were recorded. The collected data concerns
both physical properties related to the water treatment process
and network trafﬁc.

A total of 36 attacks were launched at the testbed and their
duration may vary based on the attack type. These can be
categorized into four types: Single Stage Single Point (SSSP),
Single Stage Multi-Point (SSMP), Multi Stage Single Point
(MSSP), Multi Stage Multi-Point (MSMP), for more details
the reader can consult [3].

In Table 2, the number of attacks per category is described.

TABLE II
NUMBER OF ATTACKS PER CATEGORY [3]

Category

Nº of Attacks

SSSP
SSMP
MSSP
MSMP

26
4
2
4

Each reading was labeled as either normal or an attack.
The data totals near one million entries and is presented
in two separate ﬁles, one with 495000 readings of normal
behavior and another with 449919 readings of which 54621
resemble attack occurrences. The dataset is very challenging
for supervised learning classiﬁcation algorithms since the
testbed is highly unbalanced towards the minority class. Our
models were trained using data from the ﬁrst ﬁle, i.e. data
extracted from the normal system activity. In the testing phase,
the second ﬁle is used instead, where the model’s ability
to identify unusual and abnormal behaviours in the physical
system is measured.

In order feed the CNN, the SWaT data was ﬁrst prepro-
cessed. The data was indexed to ensure the correct ordering
of the series. Furthermore, the 51 sensor readings were nor-
malized using min-max method.

A. Data Augmentation

Although the SWaT dataset is composed by thousands of
records from past attacks, it’s train set ﬁle lacks on extreme
sensor and actuator readings that are often registered during
an attack. Hence, the errors of the CNN predictor, which
was trained only on normal behaviour, are also very small
and unrepresentative of those related to malicious attempts.
Algorithms like the K-means which operate in the new embed-
ding space recreated from the CNN prediction errors require
these extreme values to build an efﬁcient decision boundary.
Therefore, and in an attempt to recreate such attack patterns,
synthetic data sampled from a two dimensional Gaussian
probability density distribution was added to the training set
of the new embedding space. The parameters of the Gaus-
sian probability density distribution were inferred from the
analysis of the train set. 148497 data points were generated
(30% of the train set size) with a mean vector [2 · δ, 2 · δ].
The diagonal elements of a 2 × 2 co-variance matrix are
diag(Σ) = [σtrain, σtrain], off-diagonal elements are equal
to zero. The σtrain is the standard deviation of the CNN
prediction errors in the train set.

B. Evaluation Metrics

evaluate the performance of a classiﬁer, however, it is biased
towards the majority class. Our work, similarly to others in
literature [22], [23], adopted the F1-score as an evaluation
metric due to the highly robustness to unbiased dataset, for
more details the reader can be redirected to [24].

V. RESULTS AND DISCUSSION

The experimental settings for the presented results were a
single machine running Windows Server 2012 as Operating
System, equipped with 64 gigabytes of RAM, approximately
4 terabytes of disk space, an Intel(R) Xeon(R) CPU with 24
cores and 4 NVIDIA Tesla k20c GPUs.

A. Anomaly Detection Threshold

The proposed genetic algorithm was used to optimize the
hyperparameters of the approach which combines the CNN
and the ﬁxed anomaly detection threshold so that the value of
F1-score could be maximized. Figure 3 describes how the F1-
score of the best individuals of the genetic algorithm evolved
over 47 iterations.

Fig. 3. Mean of the F1-score value of the top individuals.

It can be observed that there was a very signiﬁcant increase
of the F1-score value over the ﬁrst 5 generations, from 86.06%
to 87.33%, and then that value steadily increased over the
course of the remaining generations up to 87.81%. The results
obtained for the best two individuals are described in Table 3.

TABLE III
OVERALL RESULTS OF THE BEST TWO INDIVIDUALS.

Individual

Accuracy

Precision

Recall

F1-score

Best
Second Best

95.47
95.57

94.54
96.94

83.38
82.14

87.89
87.72

In order to accurately forecast the readings of the physical
devices for the next time step, the CNN was trained to min-
imize the mean average error (MAE) between its prediction
and the ground truth.

The MAE was also used to determine the value of the
anomaly threshold, α. This threshold works as a decision
boundary, thus separating the space between normal events and
attack. Usually, accuracy is one of the most common metrics to

The best individual has the highest F1-score value, 87, 89%,
since its precision and recall values are better balanced than
the ones presented by the second best individual, which has
greater precision but a lower recall.

B. Unsupervised Methods

The anomaly detection threshold, although it suggests a rea-
sonable decision boundary, it is highly dependent on outliers in

the training dataset. In order to solve this issue, we employed
two unsupervised methods, one-class SVM and K-means clus-
tering which are able to learn an effective decision boundary
function directly from data. Thereby, with the prediction errors
we elaborated a new observation space composed of two
features,
the prediction error of each observation and its
lagged value. This approach enabled us to construct a two-
dimensional space on which we applied both methods.

With the one-class SVM, we used the prediction errors of
the train data in order to infer/predict and attack. Initially,
we obtained a poor decision function, F1-scores around 60%.
Later on, we decided to weight each sample proportionally
to its error value in order to favour outliers. This resulted
in a major improvement in the F1-score value, reaching up
to 74, 76%. The results of the one-class SVM model are
presented under Table 4.

Although the results are not as good as the ones presented
by threshold-based anomaly detection algorithm we believe
that the reconstruction of a more interesting embedding space
where attacks are more easily detected is an important research
line.

Regarding the K-means clustering algorithm, we used the
errors of the train set and synthetic samples generated based
on a Gaussian distribution to ﬁt the algorithm in order to
obtain a segregation between two separate groups, normal and
attack. This approach worked better than the one-class SVM,
obtaining an F1-score of 87.16%. The result of the K-means
model is presented in Table 4.

TABLE IV
RESULTS FOR THE UNSUPERVISED MODELS.

Model

Accuracy

Precision

Recall

F1-score

K-Means
One-class SVM

95.41
87.11

96.98
71.79

81.40
80.00

87.16
74.76

VI. CONCLUSION
We have presented a novel anomaly detection method
based on machine learning models in which the forecasting
algorithm is automatically optimized by a genetic algorithm.
The proposed framework uses a CNN to forecast sensor and
actuator readings and utilizes the errors obtained from the
difference between the predicted values and the ground truth to
measure deviations from the normal system behavior. For this
task, we compared the performance of three different methods,
an engineered threshold based on the train set errors, an SVM
and K-means clustering.

With our approach we have achieved an F1-score of 87.89%,
in line with the current state-of-art results. As future work,
embedding spaces are going to be explored more efﬁciently.

ACKNOWLEDGMENTS
The present work was done and funded in the scope
of European Union’s Horizon 2020 research and innova-
tion programme under project SeCoIIA (grant agreement No
871967). This work has also received funding from projects
UIDB/00760/2020 and UIDP/00760/2020.

REFERENCES

[1] R. Baheti and H. Gill, “Cyber-physical systems,” The impact of control

technology, vol. 12, no. 1, pp. 161–166, 2011.

[2] R. H. Rawung and A. G. Putrada, “Cyber physical system: Paper survey,”
in 2014 International Conference on ICT For Smart Society (ICISS),
pp. 273–278, 2014.

[3] Goh, Jonathan and Adepu, Sridhar and Junejo, Khurum and Mathur,
Aditya, “A Dataset to Support Research in the Design of Secure Water
Treatment Systems,” 10 2016.

[4] H. Farhangi, “The path of the smart grid,” 2010.
[5] H. Lasi, P. Fettke, H.-G. Kemper, T. Feld, and M. Hoffmann, “Industry
4.0,” Business & information systems engineering, vol. 6, no. 4, pp. 239–
242, 2014.

[6] N. Correll, N. Arechiga, A. Bolger, M. Bollini, B. Charrow, A. Clayton,
F. Dominguez, K. Donahue, S. Dyar, L. Johnson, H. Liu, A. Patrikalakis,
T. Robertson, J. Smith, D. Soltero, M. Tanner, L. White, and D. Rus,
“Building a distributed robot garden,” 2009.

[7] B. Hull, V. Bychkovsky, Y. Zhang, K. Chen, M. Goraczko, A. Miu,
E. Shih, H. Balakrishnan, and S. Madden, “Cartel: A distributed mobile
sensor computing system,” 2006.

[8] R. Rajkumar, I. Lee, L. Sha, and J. Stankovic, “Cyber-physical systems:

The next computing revolution,” 2010.

[9] J. M. Taylor and H. R. Sharif, “Security challenges and methods for

protecting critical infrastructure cyber-physical systems,” 2017.

[10] A. Cardenas, S. Amin, B. Sinopoli, A. Giani, A. Perrig, S. Sastry, et al.,

“Challenges for securing cyber physical systems,” 2009.

[11] H. Khurana, M. Hadley, N. Lu, and D. A. Frincke, “Smart-grid security
issues,” IEEE Security & Privacy, vol. 8, no. 1, pp. 81–85, 2010.
[12] A. A. C´ardenas, S. Amin, Z.-S. Lin, Y.-L. Huang, C.-Y. Huang, and
S. Sastry, “Attacks against process control systems: risk assessment,
detection, and response,” 2011.

[14]

[13] N. Wirkuttis and H. Klein, “Artiﬁcial intelligence in cybersecurity,”
Cyber Intelligence, and Security Journal, vol. 1, no. 1, pp. 21–23, 2017.
´A. L. Perales G´omez, L. Fern´andez Maim´o, A. Huertas Celdr´an, and
F. J. Garc´ıa Clemente, “Madics: A methodology for anomaly detection
in industrial control systems,” Symmetry, vol. 12, no. 10, p. 1583, 2020.
[15] J. Inoue, Y. Yamagata, Y. Chen, C. M. Poskitt, and J. Sun, “Anomaly
detection for a water treatment system using unsupervised machine
learning,” in 2017 IEEE International Conference on Data Mining
Workshops (ICDMW), pp. 1058–1065, IEEE, 2017.

[16] M. Kravchik and A. Shabtai, “Detecting cyber attacks in industrial
control systems using convolutional neural networks,” in Proceedings of
the 2018 Workshop on Cyber-Physical Systems Security and PrivaCy,
pp. 72–83, 2018.

[17] D. Shalyga, P. Filonov, and A. Lavrentyev, “Anomaly detection for water
treatment system based on neural network with automatic architecture
optimization,” arXiv preprint arXiv:1807.07282, 2018.

[18] M. Kravchik and A. Shabtai, “Efﬁcient cyber attack detection in indus-
trial control systems using lightweight neural networks and pca,” IEEE
Transactions on Dependable and Secure Computing, 2021.

[19] G. Zizzo, C. Hankin, S. Maffeis, and K. Jones, “Intrusion detection for
industrial control systems: Evaluation analysis and adversarial attacks,”
arXiv preprint arXiv:1911.04278, 2019.

[20] D. Li, D. Chen, L. Shi, B. Jin, J. Goh, and S.-K. Ng, “Mad-gan:
Multivariate anomaly detection for time series data with generative
adversarial networks,” in ICANN, 2019.

[21] M. Elnour, N. Meskin, K. Khan, and R. Jain, “A dual-isolation-forests-
based attack detection framework for industrial control systems,” IEEE
Access, vol. 8, pp. 36639–36651, 2020.

[22] M. Kravchik and A. Shabtai, “Detecting cyber attacks in industrial
control systems using convolutional neural networks,” in Proceedings of
the 2018 Workshop on Cyber-Physical Systems Security and PrivaCy,
pp. 72–83, 2018.

[23] C. Wang, B. Wang, H. Liu, and H. Qu, “Anomaly detection for
industrial control system based on autoencoder neural network,” Wireless
Communications and Mobile Computing, vol. 2020, pp. 1–10, 08 2020.
[24] N. Oliveira, I. Prac¸a, E. Maia, and O. Sousa, “Intelligent cyber attack
detection and classiﬁcation for network-based intrusion detection sys-
tems,” Applied Sciences, vol. 11, no. 4, 2021.

