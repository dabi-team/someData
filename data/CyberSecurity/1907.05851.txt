CTRL-ALT-LED: Leaking Data from Air-Gapped
Computers via Keyboard LEDs

Mordechai Guri, Boris Zadov, Dima Bykhovsky, Yuval Elovici
Department of Software and Information Systems Engineering
Cyber-Security Research Center, Ben-Gurion University of the Negev, Israel
gurim@post.bgu.ac.il, borisza@gmail.com, bykhov@post.bgu.ac.il, elovici@bgu.ac.il
Air-gap research page: https://cyber.bgu.ac.il/advanced-cyber/airgap
Demo video: https://youtu.be/1kBGDHVr7x0

9
1
0
2

l
u
J

0
1

]

R
C
.
s
c
[

1
v
1
5
8
5
0
.
7
0
9
1
:
v
i
X
r
a

Abstract—Using the keyboard LEDs to send data optically was
proposed in 2002 by Loughry and Umphress [1] (Appendix A).
In this paper we extensively explore this threat in the context
of a modern cyber-attack with current hardware and optical
equipment. In this type of attack, an advanced persistent threat
(APT) uses the keyboard LEDs (Caps-Lock, Num-Lock and
Scroll-Lock) to encode information and exﬁltrate data from air-
gapped computers optically. Notably, this exﬁltration channel is
not monitored by existing data leakage prevention (DLP) systems.
We examine this attack and its boundaries for today’s keyboards
with USB controllers and sensitive optical sensors. We also
introduce smartphone and smartwatch cameras as components
of malicious insider and ’evil maid’ attacks. We provide the
necessary scientiﬁc background on optical communication and
the characteristics of modern USB keyboards at the hardware
and software level, and present a transmission protocol and
modulation schemes. We implement the exﬁltration malware,
discuss its design and implementation issues, and evaluate it
with different types of keyboards. We also test various receivers,
including light sensors, remote cameras,
’extreme’ cameras,
security cameras, and smartphone cameras. Our experiment
shows that data can be leaked from air-gapped computers via
the keyboard LEDs at a maximum bit rate of 3000 bit/sec per
LED given a light sensor as a receiver, and more than 120
bit/sec if smartphones are used. The attack doesn’t require any
modiﬁcation of the keyboard at hardware or ﬁrmware levels.

Index Terms—exﬁltration, air-gap, network, optical, covert

channel, keyboard

I. INTRODUCTION

In the past decade it has been shown than even air-gapped
networks are not immune to breaches. Attackers have used
complex attack vectors, such as supply chain attacks and social
engineering to compromise air-gapped systems. For example,
ten years ago a classiﬁed network of the United States military
was compromised by a computer worm via a supply chain
attack. According to the reports, a foreign intelligence agency
supplied infected thumb drives to retail kiosks near NATO
headquarters in Kabul. The malicious thumb drive was put into
a USB port of a laptop computer that was attached to United
States Central Command. The worm spread further to both
classiﬁed and unclassiﬁed networks [2].

A. Air-Gap Exﬁltration

Having a foothold in an air-gapped network, the attacker
may want to leak information such as ﬁles, encryption keys,

keylogging information, and so on. Such behavior is commonly
used by espionage malware. However, the exﬁltration of data
from systems with no Internet connectivity is not a trivial task.
Over the years, various communication channels have been
developed by researcher which allow attackers to leak data
from network-less computers. Using electromagnetic radiation
to maintain covert communication has been studied for at
least two decades. In this method, a malware controls the
electromagnetic emission from a computer and modulates data
on top of it. It also have been shown that attackers can exﬁltrate
data from air-gapped computers using ultrasound, magnetic
signals, and even heat emission [3]–[6].

In this paper, we examine the threat of leaking data from
air-gapped networks via the keyboard LEDs in a modern cyber-
attack. We discuss adversarial attack models, and present design
and implementation details. We test a set of USB keyboards
and evaluate the use of smartphone cameras and optical sensors
as receivers in the attack. In addition, we evaluate various types
of cameras, including remote cameras, ’extreme’ cameras, and
security cameras.

The remainder of the paper is organized as follows. In
Section II we present related work. Section III describes the
adversarial attack model. We provide technical background
in Section IV. The communication is discussed in Section V,
and the implementation is described in Section VI. Section
VII presents the evaluation and results. Countermeasures are
discussed in Section VIII, and we present our conclusions in
Section IX.

II. RELATED WORK

Air-gap covert channels can be categorized as electromag-

netic, magnetic, acoustic, thermal, and optical channels [5].

A. Electromagnetic, magnetic, acoustic, and thermal

In electromagnetic covert channels, the emission generated
by various hardware components within the computer is used
to carry the leaked information. In 2014, Guri et al introduced
AirHopper [4], [7], a malware that exploits the FM radio
signals emanating from the video card to leak data to a nearby
smartphone receiver. Guri et al also presented GSMem [8], a
malware that exploits the electromagnetic emission at GSM,
UMTS, and LTE frequencies for air gap exﬁltration. The data

 
 
 
 
 
 
modulated over the emission can be picked by a low level
malware residing in the baseband ﬁrmware of a nearby mobile
phone. The same researchers also introduced USBee [9], a
malware that used the USB data bus to generate electromagnetic
signals to transmit data over the air. In 2018 Guri et al presented
ODINI [10] and MAGNETO [11], two attacks that enable
the exﬁltration of data via magnetic signals generated by the
computer CPU cores. The receiver may be a magnetic sensor or
a smartphone located near the computer. Notably, these attacks
use low frequency magnetic ﬁelds which can bypass Faraday
shielding. In 2018, Guri et al also presented PowerHammer,
a method of leaking data from air-gapped computers through
the power lines [12].

Hanspach introduced a method called acoustical mesh
networks in air, which enables the transmission of data via
high frequency sound waves [13]. Guri et al also presented
Fansmitter [3] and DiskFiltration [14], two methods enabling
the exﬁltration of data via sound waves, even when the
computers are not equipped with speakers or audio hardware.
This research showed how to utilize computer fans and hard
disk drive actuator arms to generate covert sound signals.
In 2018, Guri et al introduced MOSQUITO [15] malware
that covertly turns speakers connected to a PC into a pair
of microphones. Using this technique they established so-
called speaker-to-speaker air-gap communication between two
computers in the same room via ultrasonic waves. BitWhisper
[16], presented in 2015, exploits the computer’s heat emissions
and PC thermal sensors to create a thermal covert channel
between computers. This method enabled bidirectional covert
communication between two adjacent air-gapped computers.

B. Optical

Various types of covert channels proposed over the years to
leak data through the air-gap. Back in 2002, Loughry and
Umphress [1] discussed the threat of information leakage
from optical emanations. In particular, they showed that LED
status indicators on various communication equipment carries
a modulated optical signal correlated with information being
processed by the device. In Appendix A of [1] the authors
presented a threat based on using the keyboard LED for data
exﬁltration and were able to achieve a transmission bit rate
of 150 bit/sec. In this work, we examine this threat in the
context of an attack on air-gapped computers. We extend the
attack model to malicious insiders who carry smartphones or
smartwatches. We also evaluate modern keyboards with USB
controllers, and test optical sensors as receivers.

In 2017, Guri et al presented a method code-named LED-it-
GO [17], which enables data leakage from air-gapped networks
via the hard drive indicator LED which exists in almost any
PC, server, and laptop today. They showed that a malware
can indirectly control the hard drive LED at a rate of 5800Hz
which exceeds the visual perception capabilities of humans. In
2018, Guri et al demonstrated a malware which can leak data
from air-gapped networks via switch and router LEDs [18].
Guri et al presented a covert channel for leaking data through
air-gaps using IR (Infrared) light and security cameras [19].

VisiSploit [20] is another optical covert channel in which data
is leaked through a hidden image projected on an LCD screen.
With this method, the ’invisible’ QR code that is embedded on
the computer screen is obtained by a remote camera and is then
reconstructed using basic image processing operations. Guri
also showed how to exﬁltrate data from air-gapped computers
via fast blinking images [21].

III. ADVERSARIAL ATTACK MODEL

As is common with air-gap covert-channels, the adversarial
attack model consists of two malicious components: a trans-
mitter and a receiver.

A. Transmitter

The transmitter is a desktop computer or server, attached
to a keyboard via the USB port, either directly or through a
USB hub or KVM. The computer has to be infected with a
malware which gathers sensitive data from the user’s computer
(e.g., keystrokes, password, encryption keys, documents). The
infection of the computer can be achieved via sophisticated
attack vectors such as supply chain attacks, social engineering
techniques, or with hardware with preinstalled malware [5].
At some point deﬁned by the attacker, the malware starts
exﬁltrating the data of interest. The transmission is done by
blinking the keyboard LEDs according to the modulation and
encoding scheme in use.

B. Receiver

The receiver is a piece of optical equipment which has a
line of sight to the keyboard’s LED panel. There are several
types of equipment that can used for the reception in this
attack model. The receiver can be a hidden camera that has a
line of sight to the transmitting keyboards, a high resolution
camera which is located outside the building but positioned
so it has a line of sight to the transmitting keyboards, or a
video surveillance closed-circuit TV or IP camera positioned
in a location where it has a line of sight to the transmitting
keyboards. The receiver can also be a smartphone or wearable
video camera (e.g., smartwatch) held by a malicious insider
who can position him/herself so as to have a line of sight to
the transmitting keyboards, a scenario which is known as the
evil maid attack [22]. In this paper we also examine an optical
sensor capable of sensing the light emitted from the keyboard
LEDs. Such sensors are used extensively in VLC (visible
light communication) and LED to LED communication [18].
Notably, optical sensors are capable of sampling LED signals
at high rates, enabling data reception at a higher bandwidth
than a typical video camera.

An illustration of the attack is provided in Figure 1 in which
data is encoded in binary form and covertly transmitted over a
stream of LED signals. A compromised security camera ﬁlms
the activity in the room, including the keyboard LEDs. The
attacker then applies video processing to decode the signals
and reconstruct the modulated data.

An illustration of the attack with a malicious insider (’evil
maid’) scenario is provided in Figure 2. In this case, the

receiver is a video camera hidden in a smartwatch of a visitor
or employee.

Fig. 1: The binary data is transmitted optically via the keyboard
LEDs and recorded by a local camera. In this frame, the binary
sequence ”101” is encoded.

Fig. 2: An ’evil maid’ attack. The binary data is transmitted
optically via the keyboard LEDs and recorded by a camera in
the smartwatch. In this frame, the binary sequence ”101” is
encoded.

IV. TECHNICAL BACKGROUND

A typical modern PC keyboard contains three toggle keys:
Caps-Lock, Num-Lock, and Scroll-Lock. Each key has a
corresponding indicator LED, which can be at ’on’ or ’off’,
depending on the state of the lock key. The Num-Lock key was
originally used to allow part of the main keyboard to function
as a numeric keypad and is rarely in use today. The Caps-
Lock causes all letter keys to automatically generate letters
in uppercase. The Scroll-Lock was originally used to lock all
other scrolling keys. Today the mouse and scroll bars are often
used for scrolling, hence the Scroll-Lock is less used.

Fig. 3: The implementation of two common keyboard LED
driver circuits: (a) MOSFET driver and (b) ampliﬁer.

Typical users today rarely change the status of the keyboard
LED, thus the LEDs can be used by a malware to carry data
for exﬁltration. Note that many modern keyboards may include
additional LEDs and backlights of different colors. In this
paper we focus only on the three basic status LEDs which
exist in most consumer keyboards.

A. Status LEDs Controls

A USB keyboard is a USB HID (human device interface)
class device, as deﬁned in the speciﬁcations [23]. Endpoints can
be described as data sources or sinks by the USB speciﬁcations.
The USB HID keyboard initiate IN (input) endpoint object that
sends the keystrokes to the host, and OUT (output) endpoint
object, that receive the status LEDs settings from the host. At
the hardware level, the keyboard consists of a key matrix
wired to a micro-controller which in turn recognizes the
keystrokes, maps them into corresponding characters, and sends
a notiﬁcation message to the host. The micro-controller also
receives output report messages via Set Report requests from
the host. The requests are used by the host to instruct the
micro-controller to change the keyboard LEDs’ status [24].

B. OS Interfaces

The keyboard LEDs are also exposed to user space processes
through the /sys/class/leds/input entries in Linux. The entry
/sys/class/leds/ contains the properties of each LED, such
as name and brightness level (e.g., numlock/brightness).
Note that most keyboard LEDs don’t have hardware brightness
support, and hence the brightness value represented by only two
states (ON and OFF). The keyboard LED can also be controlled
from the Linux kernel by invoking the command KDSETLED of
ioctl() in the keyboard driver [25]. This approach is preferable
in the implementation of a rootkit, in order to evade systems
that monitor changes to the keyboard LEDs form the user
space. In Windows OS, the SendInput() and keybd input() API
functions can be used to control the keyboard LEDs from the
user space. Another option is to interact with the USB keyboard
programmatically via the HID USB protocol [26]. This is done
by sending a request to the device using a standard USB setup

T1V+(b)(a)Microcontroller RLED DriverCaps LockLED DriverLED DriverRRNum LockScroll LockRLED DriverCaps LockLED DriverLED DriverRRNum LockScroll LockCaps LockNum LockScroll LockRRRRRRT2T3USB interfaceUSB interfaceMicrocontroller transaction deﬁned in the USB Device Class Deﬁnition for
HIDs [23].

C. Hardware

At

the circuit

the hardware level,

in Figure 3(a) is a
simple keyboard LED driver based on MOSFET transistor.
The MOSFET is used as a power switch where the ’1’ in the
current ﬂows cause the LED to be on. Slightly more advanced
circuit in Figure 3(b) is based on an operational ampliﬁer
in comparator conﬁguration with open-loop ampliﬁcation. It
allows faster response and utilizes only two voltage levels (5v
and 0v).

V. OPTICAL COMMUNICATION
In the section we describe the theory and communication
aspects of the proposed covert channel. We also provide a
description of the model of the LED based transmitter and
outline received optical power.

We discuss this in the context of two types of receivers: an
imaging receiver (camera) and a non-imaging receiver (photo
detector sensor).

A. LED Transmission

The typical keyboard LED conﬁguration is illustrated in
Figure 4. LEDs are typically installed together with a diffuse
surface to provide comfortable and homogeneous lighting. The
radiation pattern of such a device is modeled by a Lambertian
intensity model of the form (measured in steradian-1)

1
π
where θ is the irradiance angle.

R(φ) =

cos (θ) ,

(1)

Fig. 4: Illustration of Lambertian lighting model.

The received optical power is proportional to the solid angle

of the receiver (measured in [sr]), calculated by

Ω =

πR2
l
d2

(2)

where Rl is the radius of the outer concentration lens and d is
the distance between the LED and the receiver. The relation
Rl (cid:28) d is assumed. An illustration of the geometric parameters
is presented in Figure 5.

Finally, power at the receiver, Pr, is calculated by

Pr = Pt R(φ) Ω L,

(3)

where Pt is the power of the LED and L is the optical system
loss factor.

Fig. 5: Illustration of the Lambertian lighting model

B. Imaging Receiver (Camera)

Cameras can be used to acquire a communication signal. In
this case, the signal is focused on a group of sensor pixels, as
presented in Figure 6. The receiver’s performance is limited by
two main parameters. The ﬁrst parameter is the diffraction limit
(also referred to as the Rayleigh limit), which constrains the
minimum resolvable feature size of the camera and it calculated
by [27]

˜d ∼= 1.22

λh
d

,

(4)

where d is an aperture size of the camera, λ is the wavelength
(about 525 nm for green LEDs and 625 nm for red LEDs) and
h is the distance to the transmitter (outlined in Figure 6). This
fundamental limitation is related to wave propagation effects
and does not depend on particular camera optics and lenses.

Fig. 6: Signal acquired by imaging receiver.

The second parameter is related to the camera magniﬁcation.
The maximum distance relation for a one pixel imaged object
is calculated by [27]

t
p

h
f

=

,

(5)

where f is the focal distance of the camera, p is a pixel size
of a camera array, and t is the size of the transmitting LED.
Multiple LEDs can be used to increase the communication
bit rate [28]. The principle of multi-LED communication is
illustrated in Figure 6. Each LED is modulated independently
and spatially separated in the camera sensor.

C. Non-Imaging Receiver

The typical receiver includes an appropriate optical ﬁlter
to reduce the inﬂuence of artiﬁcial lighting and illumination
from the sun. Afterwards, the signal light is concentrated on
a photodetector (PD) by an optical lens system, as presented
in Figure 7. The analysis of the performance is similar to that
presented in Equations (1)-(5).

SoftwareControlledSwitchLED deviceDiffuserLambertianRadiationPatternLEDDiffuserTransmitted PowerLED1LED2Data1Camera SensorCameraLensData2Location (x1,y1)Data1Location (x2,y2)Data2h t  fdTABLE II: Comparison of technical characteristics of imaging
and non-imaging receivers

Imaging
Receiver

Non-imaging
receiver

Equipment

Speed

Range

Axial alignment/Pointing

COTS

Tens of bps

Low

Easy

Parallel communication

All LEDs

Custom

kbps

Medium-high

Complex

Single LED

LED-ON and LED-OFF, respectively. We denote the num-lock,
caps-lock and scroll-lock keys as LED1, LED2 and LED3
respectively.

A. Malware

Fig. 8: Malware components

The malware components are illustrated in Figure 8. The
data of interest is collected (1). The data might be keylogging
data, encryption keys, passwords, ﬁles and so on. The data
is then encoded and sent to a listener component (2). The
listener component aggregates the data in a form of sequence
of bytes. The raw data is arranged in frames (3) and sent to the
modulator (4). The modulator constructs the appropriate HID
packets which sent to the USB keyboard controller (5). The
packets determine the state of the three LEDs (on/off) given
the current three bits.

Fig. 7: Signal acquired by imaging receiver.

We analyzed the effective distances for a set of basic optical
parameters listed in Table I. The minimum detectable power
level, Pthr, depends on particular detector parameters and
a communication signal frequency [29]. For the parameters
applied, the possible communication distance is more than 50
meters. Note, signiﬁcant axial misalignment may signiﬁcantly
reduce this distance, while the appropriate optical lens system
may signiﬁcantly increase this distance up to an order of
magnitude.

The comparison between imaging and non-imaging receivers
is summarized in Table II. While imaging receivers may be
easily implemented by commercial off-the-shelf (COTS) cam-
eras (smartphone camera, webcam, etc.), non-imaging receivers
require a dedicated hardware design. The main advantage of
non-imaging receivers is their higher communication speeds.
A high communication range requires accurate axial alignment
(pointing), which may be a challenging task for such a receiver.
Moreover, the lower communication speed of imaging receivers
may be compensated somewhat by the adoption of multiple
simultaneous transmitters.

VI. IMPLEMENTATION

In this section we discuss the data transmission and describe
various modulation methods, along with their implementation
details. Note that the topic of visible light communication has
been widely studied in the last decade. In particular, various
modulations and encoding schemes have been proposed for
LED to LED communication [30]. For our purposes, we present
basic modulation schemes and describe their characteristics
and relevancy to the attack model. As is typical in LED to
LED communication, the carrier is the state of the LED, and
the basic signal is generated by turning the keyboard LEDs on
and off. We denote the two states of an LED (on and off) as

TABLE I: Evaluation of the effective distance

Fig. 9: Status LEDs control HID request

Parameter

Symbol

Value

Typical
Range

0.75-0.95

25◦

0.8

2.54cm (1”)

1.5mm-5cm

Pthr

1 nW

0.50-2 nW

φ

L

Rl

Irradiance angle

Optical system loss fac-
tor

Radius of concentration
lens

Receiver sensitivity (1
kHz signal)

B. LED Control

To set the state of the status LEDs (on/off), the module
sends a SetReport request to the device with a one-byte data
stage Figure 9. The packet’s request type (bmRequestType) is
set to 0x21, the request code (bRequest) is set to 0x09. The
value ﬁeld of the setup packet (wValue) contains the report
ID (0x00) in the low byte and the report type (0x02) in the
high byte. This indicates a report that is being sent from the

PhotodectorFilterLens systemNon-imaging receiverListening socketBit framingUSB HID LED controlUSB Keyboard controllerData collection12345…11011…1101010101Frame 𝑛…1101010101101software to the hardware. The index ﬁeld (wIndex) contains
the interface number of the USB keyboard. The data stage
should be 1 byte, which is a bitwise ﬁeld. When a bit is set
to 1, the corresponding LED is turned on. The bits options
are speciﬁed in Table III. Bits 0,1 and 2 determines the status
of Num Lock, Caps Lock and Scroll Lock, respectively. The
other bits are reserved or used for rarely used LEDs.

TABLE III: LED bits ﬁeld

Bit

0
1
2
3-7

Description

Num Lock
Caps Lock
Scroll Lock
Reserved

C. Data Modulation and Encoding

We present two single LED modulation schemes: (1) on-off
keying (OOK) and (2) binary frequency-shift keying (B-FSK).
We also present a scheme which uses all three LEDs to encode
data.

1) On-Off Keying (OOK) : On-off keying is the simplest
optical communication modulation. The absence of a signal
for a certain duration encodes a logical zero (’0’), while its
presence for the same duration encodes a logical one (’1’). In
our case, LED-OFF for duration of Tof f encodes ’0’ and LED-
ON for a duration Ton encodes ’1.’ Note that in the simplest
case Ton = Tof f . This scheme can use one, two, or three
LEDs to modulate data. The theoretical bit-rate for multi-LED
communication with OOK modulation is given by

R = N

Fr
2

,

(6)

where N is number of the transmitting LEDs and Fr is frame-
per-second frequency.

2) Binary Frequency-Shift Keying (B-FSK) : Frequency-
shift keying (FSK) is a modulation scheme in which digital
information is modulated through a frequency changes in a
carrier signal. In the B-FSK only two frequencies, usually
representing zero and one, are used for the modulation. In our
case, LED-ON for duration of Tof f encodes a logical zero and
LED-ON for a duration Ton encodes a logical one. Note that
in the simple case Ton = Tof f . We make a separation between
two sequential bits by setting the LED in the off state for time
interval Td. This scheme uses a one, two, or three LEDs to
modulate data.

3) Amplitude Shift Keying (ASK) - all LEDs: In this scheme
we use three LEDs to represent a series of three bits. As in
OOK encoding, the absence of a signal for a certain time
duration encodes a logical zero for a speciﬁc LED, while its
presence for the same time duration encodes a logical one
for a speciﬁc LED. All of the LEDs remain in the same
status for a duration of Tall and then change to the next state.
This encoding is relevant for cases where several LEDs in
the keyboard are available for the transmission. We separate
between two sequences of bits by setting the all of the LEDs

TABLE IV: ASK modulation with all LEDs

LED1

LED2

LED3

Duration
Tall
Tall
Tall
Tall
Tall
Tall
Tall
Tall
Td

000

100

010

110

001

101

110

111

Separation

TABLE V: The tested keyboards

#

1

2

3

4

Vendor

Model

Dell

KB212-B

Lenovo

SK-8825

Logitech

K120

SilverLine MM-KB2011

in the ’000’ state for time interval Td. The ASK encoding is
illustrated in Table IV.

D. Bit Framing

We transmit the data in small packets called frames. Each
frame is composed of a preamble, a payload, and a checksum.
The preamble consists of a sequence of eight alternating
bits (’10101010’) and is used by the receiver to periodically
determine the properties of the channel, such as Ton and Tof f .
In addition, the preamble header allows the receiver to identify
the beginning of a transmission and calibrate other parameters,
such as the location, intensity and color of the keyboard LEDs.
The payload is the raw data to be transmitted. In our case,
we arbitrarily choose 256 bits as the payload size. For error
detection, we add a CRC (cyclic redundancy check) value,
which is calculated on the payload and added to the end of
the frame. The receiver calculates the CRC for the received
payload, and if it differs from the received CRC, an error
is detected. More efﬁcient bit framing may employ variable
length frames, error correction codes, and compression, and is
beyond the scope of our discussion.

VII. EVALUATION

In this section we evaluate the optical covert channel in
terms of distance and bit rate. During the evaluation, we have
tested four types of COTS USB keyboards that are listed in
Table V.

A. Camera Receivers

There are two types of receivers relevant to the attack model:
cameras and light sensors. Receiving the optical signals by
a camera depends on the line of sight and visibility of the
keyboard. We process the recorded video in order to detect
the location of each transmitting keyboard and its LEDs. The

TABLE VI: Maximum bit rate of different receivers

Tested Camera/Sensor

Entry-level DSLR
(Nikon D7100)

High-end security camera
(Sony SNC-EB600)

HD Webcam
(Microsoft LifeCam)

Smartphone camera
(Samsung Galaxy S7)

Max
FPS

60

30

30

OOK/FSK

Three LEDs

15 bit/sec

45 bit/sec

15 bit/sec

45 bit/sec

15 bit/sec

45 bit/sec

30 - 120

15-45 bit/sec

45-130 bit/sec

TABLE VII: The maximum distance for 30 bit/sec

Keyboard

Distance

Bit rate (OOK) with BER of ≤ 1%

Dell

0 - 9.5m

Lenovo

0 - 9.5m

Logitech

0 - 6.5m

Silverline

0 - 9.5m

30 bit/sec

30 bit/sec

30 bit/sec

30 bit/sec

camera can operate in a practical attack. In particular, we
wanted to determine the maximal distance that we could
maintain a bit rate of 30 bit/sec with an acceptable BER (bit
error rate) of less than 1%. The results are presented in Table
VII. For three of the four keyboards the maximum distance
we achieved for a bit rate of 30 bit/sec is 9.5 meters. With
the Logitech keyboard we achieved a limited distance of 6.5
meters, mainly due to the low power of it’s status LEDs.

B. Light Sensor Receivers

A photodiode is a semiconductor that converts light into
electrical current. To evaluate the transmissions at high speeds,
we built a measurement setup based on photodiode light
sensors (Figure 10). The Thorlabs PDA100A light sensor
[33] is connected to an internal charge ampliﬁer and a data
acquisition system. We also used an optical zoom lens to focus
on the sensing area and reduce the optical noise. The data is
sampled with the National Instruments cDAQ portable sensor
measurement system [34] via a 16-bit analog-to-digital NI-
9223 card [35] which is capable of 1 Msamples per second.
The light emitted from the transmitting keyboard is sampled
by the sensor and processed by MATLAB software.

video is processed frame by frame to identify the LED state
for each frame. Finally, the binary data is decoded based on
the encoding scheme.

1) Video processing: For decoding the videos we used
OpenCV 3.2 [31], which is an open-source computer vision
library that focuses on real-time video processing for academic
and commercial use. We developed a C program that receives
the video as an input and saves each LED’s timings and
state (illumination amplitude) to an output ﬁle. To detect and
enumerate LED blinks, we used the fundamental approaches
used in LED based communication [30], [32]. For each LED
in the frame, we calculated the brightness function pn(x, y),
where x and y are the coordinates of a pixel in the image, and
n is the frame number in the sampled video. Our output is
an intensity vector S(x, y)(p0, p1, , pN ), which describes the
change of pixel intensity in time. The brightness of the LED
is a quantized level of light intensity in the image at the point
in the 2D space. The algorithm determines the on and off
brightness threshold values using the temporal mean of the
sampled signal. Based on the intensity vector and threshold
values, we demodulate the signals encoded in the video.

As expected, the main factor in determining the maximum
bit rate for video cameras is the number of frames per second
(FPS). In our experiments, we identiﬁed two to three frames
per bit as the optimal setting needed to successfully detect the
LED transmissions in most cameras. We tested various types
of cameras as receivers. All of the transmissions were decoded
using the video processing demodulator. Table VI shows the
maximal bit rate achieved for each video camera.

2) Smartphone camera distance: Smartphone cameras might
be used in an ’evil maid’ attack to record the keyboard LEDs.
We evaluated the practical distances at which the smartphone

Fig. 10: The measurement setup with the Thorlabs PDA100A
light sensor and NI-9233 data acquisition hardware.

1) Measurement Setup: The PDA100A includes a reverse-
biased PIN photodiode, mated to a switchable gain tran-
simpedance ampliﬁer, and packaged in a protective cover.

The responsivity, R, of the photodiode can be deﬁned as
a ratio of generated photocurrent, IP D, to the incident light
power, P , at a given wavelength,

R =

IP D
P
the sensor, A,

.

(7)

The gain of

in our measurements is
4.75 · 105V /A, the PDA responsivity of the sensor for green
light is R = 0.32 A/W, and the output voltage is given by

Vout = PinRA.

(8)

2) OOK: In this experiment we tested the maximal fre-
quency at which the keyboard LEDs can blink when controlled
from a user space program or shellcode running within the
keyboard’s OS. The blinking frequency is important, since it
deﬁnes the maximum communication speed of the the LED.
Figures 11(a)(c)(e)(g) show the signals as received from
different keyboards when its leftmost LED is repeatedly turned
on and off. The sampling rate in this test is 500 Ksamples
per second. As can be seen, the minimal LED-ON time is

Optical sensorLightADCFigures 11(b)(d)(f)(h) show the signals as received from
different keyboards when all three LEDs are repeatedly turned
on and off. By using all of the LEDs together for modulation,
we have signiﬁcantly increased the optical signals emitted from
the transmitting keyboard. This method can be used when the
optical signal level generated by a single LED is too low for
successful reception. As can be seen, with multiple LEDs the
minimal blinking time (LED-ON, LED-OFF) is approximately
280µs, 500µs, 440µs, and 400µs respectively, which implies
the corresponding bit rates of 3570, 2000, 2270, and 2500
bit/sec with the simplest OOK modulation.

3) Multiple LEDs ASK: With a camera receiver it is possible
to distinguish between two or more different transmitting LEDs.
In this case the bit rate is derived from the number of LEDs
available for modulation. That is, with N LEDs we can generate
2N different signals. Unlike camera receivers, light sensors can
only measure the amount of light emitted from the keyboard and
cannot distinguish between different LEDs. One straightforward
strategy is to use OOK modulation when ’0’ is modulated
with all of the LEDs in the OFF state, and ’1’ is modulated
with all of the LEDs in the ON state. Obviously, this type of
modulation limits the transmission rate. We found that under
some circumstances it is also possible to distinguish between
different amounts of light emitted when using different numbers
of LEDs, even with a light sensor. Consequentially, we can
increase the bit rate by modulating multiple bits with several
LEDs (using ASK modulation) when a light sensor is used
for reception. Under optimal conditions n different amplitudes
can modulate log2(n) values.

Figure 12 shows four amplitude levels as measured from all
of the keyboards when all three LEDs are in use. We employed
four different states, starting with all three LEDs in the off
state and sequentially turned the LEDs on until all of the
LEDs were on (000, 100, 110, and 111). Note that we only
distinguish between the number of LEDs turned on, as opposed
to their location (e.g., the states 110, 011, and 101 represent
the same amplitude). As can be seen in Figure 12, we can
distinguish between four different levels, when each amplitude
level is modulated over 700µs, 500µs, 500µs, and 350µs. This
implies the rate of approximately 1730, 2000, 2000 and 2850
different levels per second (3460, 4000, 4000, and 5710 bit/sec,
respectively).

4) Transmission: Figure 13 shows the measurements in
which a stream of bits was transmitted from all keyboards using
ASK modulation via four LEDs. The stream was transmitted in
36ms, 25ms, 28ms, and 22ms which implies a bit rate of 1665,
2400, 2240 and 2725 bit/sec. Note that the bits are encoded
with four amplitude levels (A0, A1, A2 and A3). In this case,
the measured BER was under 5%.

The measured BER for the OOK and multiple LED modu-

lation is provided in Table VIII.

VIII. COUNTERMEASURES

Common countermeasures may include policies aimed to
restrict the accessibility of sensitive equipment by placing it
in classiﬁed rooms where only authorized staff may access

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

Fig. 11: Maximum speed of the basic signal for: (a) Dell 1
LED, (b) Dell 3 LEDs, (c) Lenovo 1 LED, (d) Lenovo 3 LEDs,
(e) Logitech 1 LED, (f) Logitech 3 LEDs, (g) Silverline 1 LED,
(h) SilverLine 3 LEDs.

approximately 600 µs for Dell, 440µs for Lenovo, 400µs
for Logitech, 400µs for Silverline. The minimal blinking time
(LED-ON, LED-OFF) is 800µs, which implies a bit rate of 1250
bit/sec with the simplest OOK modulation. During the LED-ON
time the sampled powers are approximately 0.42mW, 1.8mW,
0.42mW, and 1.35mW respectively, while for LED-OFF powers
are 0.37mW, 1.6mW, 0.33mW, and 1.15mW respectively and
are resulted by the ambient lighting in the room.

024681012141618Time (msec)0.340.360.380.40.420.440.46 Power(W)0510152025Time (msec)0.30.350.40.450.50.550.6 Power(W)0246810121416Time (msec)1.551.61.651.71.751.81.85 Power(W)0246810121416Time (msec)0.60.70.80.911.1 Power(W)02468101214Time (msec)0.30.320.340.360.380.40.42 Power(W)02468101214Time (msec)0.30.350.40.450.50.55 Power(W)02468101214Time (msec)1.11.151.21.251.31.351.4 Power(W)02468101214Time (msec)1.11.21.31.41.51.6 Power(W)(a)

(b)

(a)

(b)

(c)

(d)

Fig. 12: ASK modulation (a) Dell 3 LEDs, (b) Lenovo 3 LEDs,
(c) Logitech 3 LEDs, (d) Silverline 3 LEDs.

TABLE VIII: Bit Error Rates

Keyboard

Modulation

Bit-rate

BER in %

Dell

Dell

OOK

1666 bit/sec

3%

Multiple LEDs

3411 bit/sec

2.40%

Lenovo

OOK

2230 bit/sec

2.95%

Lenovo

Multiple LEDs

4640 bit/sec

6.70%

Logitech

OOK

2170 bit/sec

3.50%

Logitech

Multiple LEDs

4296 bit/sec

1.20%

Silverline

OOK

2697 bit/sec

8%

Silverline Multiple LEDs

5155 bit/sec

3.10%

it. Typically, all types of cameras (including smartphones and
smartwatches) are banned from such secured rooms. However,
the banning of cameras is not always feasible because the
presence of security and surveillance cameras may also serve
as a deterrence measure. Another preventive countermeasure is
to disable the keyboard LEDs at the circuit level or cover them.

(c)

(d)

Fig. 13: ASK data transmission (a) Dell 3 LEDs (b) Lenovo 3
LEDs (c) Logitech 3 LEDs (d) Silverline 3 LEDs

These solutions are not always feasible on a wide scale, since
they affect user experience and the keyboard functionality. To
protect from remote camera eavesdropping, a special window
ﬁlm that prevents optical eavesdropping may be installed; note
that this type of countermeasure doesn’t protect against insider
and ’evil maid’ attacks where the camera is located within the
room. Another possible countermeasure is video monitoring
the room in order to detect hidden signaling patterns from the
keyboard LEDs.

Software countermeasures may include the detection of the
presence of malware that triggers the keyboard LED via its HID
USB protocol. Such detection can be implemented using an API
hooking technique or USB ﬁlter driver such as USBFILTER
[36]. However, such a solution can be bypassed by sophisticated
malware with rootkit techniques. It is also possible to limit the
bandwidth of the covert channel by implementing a low-pass
ﬁlter (LPF) at the keyboard driver level. In this case, the LPF
will limit the maximum frequency that the status LEDs can be
switched on or off. For example, by locking the state of the
status LEDs for one second after each change.

Another approach is to interrupt the emitted signals by
intentionally invoking random LED blinking. In this way, the
optical signal generated by the malicious code will get mixed
up with random blinks. Implementing such a noise generator
in a software (within the OS) can be bypassed by a malware,
while implementing it within the keyboard ﬁrmware requires
the involvement of OEMs and may also affect the usability of
the keyboard LEDs. The countermeasures are summarized in
Table IX.

0246810121416Time (msec)0.30.350.40.450.50.550.6 Power(W)A32AA1A00246810121416Time (msec)0.650.70.750.80.850.90.9511.051.1 Power(W)AAAA012302468101214Time (msec)0.30.350.40.450.50.55 Power(W)A01AA2A3012345Time (msec)1.11.151.21.251.31.351.41.451.51.551.6 Power(W)A3A12A0510152025303540Time (msec)0.30.350.40.450.50.550.6 Power(W)051015202530Time (msec)0.60.650.70.750.80.850.90.9511.05 Power(W)051015202530Time (msec)0.30.350.40.450.50.550.6 Power(W)0510152025Time (msec)1.11.21.31.41.51.6 Power(W)TABLE IX: Countermeasures

Countermeasure

Remarks

Banning cameras (’zone’ approach)
Covering the LEDs
Disconnecting the LEDs
Window covering
LED activity monitoring
Signal jamming
Low-pass ﬁlters (LPF)

Expensive. Not always a feasible solution.
Affects the user experience and the keyboard functionality.
Affects the user experience and the keyboard functionality.
Expensive, Doesn’t protect against insider attacks where the camera is located within the room.
Can be bypassed by malware or requires an external hardware (camera).
Can be bypassed by malware.
Can be bypassed by malware. Doesn’t completely prevent the covert channel.

IX. CONCLUSION

In this paper we show how an attacker can use the keyboard
status LEDs (Caps-Lock, Num-Lock and Scroll-Lock) to
exﬁltrate data from air-gapped computers optically. We examine
the attack and its boundaries on modern keyboards with HID
USB controllers, sensitive optical sensors, and smartphone
cameras. We provide the technical background at the hardware
and software level, and present modulation schemes and a
transmission protocol. We present design and implementation
issues and evaluate the covert channel on different types of
keyboards. Our experiment shows that data can be leaked from
air-gapped computers via the keyboard LEDs at a bit rate of
3000 bit/sec per LED given a light sensor as a receiver, and
more than 120 bit/sec if a smartphone camera is used.

REFERENCES

[1] J. Loughry and D. A. Umphress, “Information leakage from optical
emanations,” ACM Transactions on Information and System Security
(TISSEC), vol. 5, no. 3, pp. 262–289, 2002.

[2] R. Grant, “The cyber menace,” Air Force Magazine, vol. 92, no. 3, 2009.
[3] M. Guri, Y. Solewicz, A. Daidakulov, and Y. Elovici, “Fansmitter:
Acoustic data exﬁltration from (speakerless) air-gapped computers,” arXiv
preprint arXiv:1606.05915, 2016.

[4] M. Guri, G. Kedma, A. Kachlon, and Y. Elovici, “Airhopper: Bridging
the air-gap between isolated networks and mobile phones using radio
frequencies,” in 9th International Conference on Malicious and Unwanted
Software: The Americas (MALWARE).

IEEE, 2014, pp. 58–67.

[5] M. Guri and Y. Elovici, “Bridgeware: The air-gap malware,” Commun.
ACM, vol. 61, no. 4, pp. 74–82, Mar. 2018. [Online]. Available:
http://doi.acm.org/10.1145/3177230

[6] M. Guri and M. Monitz, “Lcd tempest air-gap attack reloaded,” in 2018
IEEE International Conference on the Science of Electrical Engineering
in Israel (ICSEE).

IEEE, 2018, pp. 1–5.

[7] M. Guri, M. Monitz, and Y. Elovici, “Bridging the air gap between
isolated networks and mobile phones in a practical cyber-attack,” ACM
Transactions on Intelligent Systems and Technology (TIST), vol. 8, no. 4,
p. 50, 2017.

[8] M. Guri, A. Kachlon, O. Hasson, G. Kedma, Y. Mirsky, and Y. Elovici,
“Gsmem: Data exﬁltration from air-gapped computers over gsm frequen-
cies.” in USENIX Security Symposium, 2015, pp. 849–864.

[9] M. Guri, M. Monitz, and Y. Elovici, “USBee: Air-gap covert-channel
via electromagnetic emission from USB,” in 14th Annual Conference on
Privacy, Security and Trust (PST).

IEEE, 2016, pp. 264–268.

[10] M. Guri, B. Zadov, A. Daidakulov, and Y. Elovici, “Odini : Escaping
sensitive data from faraday-caged, air-gapped computers via magnetic
ﬁelds,” 2018.

[11] M. Guri, A. Daidakulov, and Y. Elovici, “Magneto: Covert channel
between air-gapped systems and nearby smartphones via cpu-generated
magnetic ﬁelds,” arXiv preprint arXiv:1802.02317, 2018.

[12] M. Guri, B. Zadov, D. Bykhovsky, and Y. Elovici, “PowerHammer:
Exﬁltrating Data from Air-Gapped Computers through Power Lines,”
ArXiv e-prints, Apr. 2018.

[13] M. Hanspach and M. Goetz, “On covert acoustical mesh networks in

air,” arXiv preprint arXiv:1406.1213, 2014.

[14] M. Guri, Y. Solewicz, A. Daidakulov, and Y. Elovici, “Acoustic data
exﬁltration from speakerless air-gapped computers via covert hard-drive
noise (diskﬁltration),” in European Symposium on Research in Computer
Security. Springer, 2017, pp. 98–115.

[15] M. Guri, Y. Solewicz, and Y. Elovici, “Mosquito: Covert ultrasonic
transmissions between two air-gapped computers using speaker-to-speaker
communication,” in 2018 IEEE Conference on Dependable and Secure
Computing (DSC).

IEEE, 2018, pp. 1–8.

[16] M. Guri, M. Monitz, Y. Mirski, and Y. Elovici, “Bitwhisper: Covert
signaling channel between air-gapped computers using thermal manipu-
lations,” in 28th IEEE Computer Security Foundations Symposium (CSF).
IEEE, 2015, pp. 276–289.

[17] M. Guri, B. Zadov, and Y. Elovici, LED-it-GO: Leaking (A Lot
of) Data from Air-Gapped Computers via the (Small) Hard Drive LED.
Cham: Springer International Publishing, 2017, pp. 161–184. [Online].
Available: https://doi.org/10.1007/978-3-319-60876-1 8

[18] M. Gur, B. Zadov, A. Daidakulov, and Y. Elovici, “xLED: Covert data
exﬁltration from air-gapped networks via switch and router LEDs,” in
2018 16th Annual Conference on Privacy, Security and Trust (PST).
IEEE, 2018, pp. 1–12.

[19] M. Guri and D. Bykhovsky, “air-jumper: Covert air-gap exﬁltra-
tion/inﬁltration via security cameras & infrared (ir),” Computers &
Security, vol. 82, pp. 15–29, 2019.

[20] M. Guri, O. Hasson, G. Kedma, and Y. Elovici, “An optical covert-
channel to leak data through an air-gap,” in 14th Annual Conference on
Privacy, Security and Trust (PST).

IEEE, 2016, pp. 642–649.

[21] M. Guri, “Optical air-gap exﬁltration attack via invisible images,” Journal
of Information Security and Applications, vol. 46, pp. 222–230, 2019.
[22] J. Rutkowska and A. Tereshkin, “Evil maid goes after truecrypt,” The

Invisible Things Lab, 2009.

[23] U. I. F. Inc., “Device class deﬁnition for human interface devices (hid),”
http://www.usb.org/developers/hidpage/HID1 11.pdf, (Accessed on
08/11/2018).

[24] Microchip, “Demonstrating the set report request with a PS/2 to USB
keyboard translator example,” http://ww1.microchip.com/downloads/cn
/AppNotes/cn 91056C.pdf, (Accessed on 08/11/2018).

[25] “Flashing keyboard leds,” https://linux.die.net/lkmpg/x1194.html,

(Accessed on 08/11/2018).

[26] NXP, “USB HID keyboard - - sending output report for LED control fails,”

https://community.nxp.com/thread/382242, (Accessed on 08/11/2018).

[27] E. Hecht, Optics, 5th ed. Pearson, 2016.
[28] S. Haruyama and T. Yamazato, “Image sensor based visible light com-
munication,” in Visible Light Communication, S. Arnon, Ed. Cambridge
University Press, 2015, ch. 9, pp. 181–205.

[29] V. Mackowiak, J. Peupelmann, Y. Ma, and A. Gorges, “NEP – noise
equivalent power,” Thorlabs Inc., 56 Sparta Avenue, Newton, NJ 07860,
USA, Tech. Rep. [Online]. Available: https://www.thorlabs.com/images/
TabImages/Noise Equivalent Power White Paper.pdf

[30] T. Komine and M. Nakagawa, “Fundamental analysis for visible-
light communication system using LED lights,” IEEE transactions on
Consumer Electronics, vol. 50, no. 1, pp. 100–107, 2004.

[31] O. Foundation, “Opencv library,” https://opencv.org/, (Accessed on

08/12/2018).

[32] J. Vuˇci´c, C. Kottke, S. Nerreter, K.-D. Langer, and J. W. Walewski,
“513 mbit/s visible light communications link based on dmt-modulation
of a white led,” Journal of lightwave technology, vol. 28, no. 24, pp.
3512–3518, 2010.

[33] Thorlabs. Thorlabs Inc. 56 Sparta Avenue, Newton, NJ 07860, USA.
(Accessed on 08/12/2018). [Online]. Available: https://www.thorlabs.c
om/thorproduct.cfm?partnumber=PDA100A

[34] N.

Instruments. National

Instruments.
[Online]. Available: http://www.ni.com/en-us/shop/compactdaq.html

(Accessed on 08/12/2018).

[35] ——. National

Instruments.

(Accessed on 08/12/2018).

[Online].

Available: https://www.ni.com/pdf/manuals/373784f.pdf

[36] D. J. Tian, N. Scaife, A. Bates, K. Butler, and P. Traynor, “Making USB
great again with USBFILTER,” in USENIX Security Symposium, 2016.

