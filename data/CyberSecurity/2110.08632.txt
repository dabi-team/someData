Sampling based Computation of Viability Domain to
Prevent Safety Violations by Attackers

Kunal Garg

Alvaro A. Cardenas

Ricardo G. Sanfelice

1
2
0
2

t
c
O
6
1

]

Y
S
.
s
s
e
e
[

1
v
2
3
6
8
0
.
0
1
1
2
:
v
i
X
r
a

Abstract— This paper studies the security of cyber-physical
systems under attacks. Our goal is to design system parameters,
such as a set of initial conditions and input bounds so that
it is secure by design. To this end, we propose new sufﬁcient
conditions to guarantee the safety of a system under adversarial
actuator attacks. Using these conditions, we propose a computa-
tionally efﬁcient sampling-based method to verify whether a set
is a viability domain for a general class of nonlinear systems. In
particular, we devise a method of checking a modiﬁed barrier
function condition on a ﬁnite set of points to assess whether
a set can be rendered forward invariant. Then, we propose
an iterative algorithm to compute the set of initial conditions
and input constraint set to limit what an adversary can do
if it compromises the vulnerable inputs. Finally, we utilize a
Quadratic Program approach for online control synthesis.

I. INTRODUCTION

Security has become one of the most critical problems in
the ﬁeld of Cyber-Physical Systems (CPS), as illustrated by
several incidents of attacks that happened in the past few
years [1], [2]. There are two types of security mechanisms
for protecting CPS [3] i) proactive, which considers design
choices deployed in the CPS before attacks, and ii) reactive,
which take effect after an attack is detected.

While reactive methods are less conservative than proac-
tive mechanisms, they heavily rely on fast and accurate attack
detection mechanisms. Although there is a plethora of work
on attack detection for CPS [4], [5], it is generally possible
to design a stealthy attack such that the system behavior
remains close to its expected behavior, thus evading attack-
detection solutions [6]. Intrusion detection systems also
produce a large number of false positives, which can lead to
a large operational overhead of security analysts dealing with
irrelevant alerts [7]. On the other hand, a proactive method
can be more effective in practice, particularly against stealthy
attacks. Attacks on a CPS can disrupt the natural operation
of the system. One of the most desirable system properties is
safety, i.e., the system does not go out of a safe zone. Safety
is an essential requirement, violation of which can result in
failure of the system, loss of money, or even loss of human
life, particularly when a system is under attack [8].

In most practical problems, safety can be realized as
guaranteeing forward-invariance of a safe set. Control barrier
function (CBF) based approach [9] to guarantee forward

The research was sponsored by the Army Research Ofﬁce and was
accomplished under Grant Number W911NF-20-1-0253. The views and
conclusions contained in this document are those of the authors and should
not be interpreted as representing the ofﬁcial policies, either expressed
or implied, of the Army Research Ofﬁce or the U.S. Government. The
U.S. Government is authorized to reproduce and distribute reprints for
Government purposes, notwithstanding any copyright notation herein.

invariance of the safe region has become very popular
input can be
in the last few years since a safe control
efﬁciently computed using a Quadratic Program (QP) with
CBF condition as the constraint. Most of the prior work
on safety using CBFs, e.g., [9], assumes that the viability
domain, i.e., the set of initial conditions from which forward
invariance of the safe set can be guaranteed, is known. In
practice, it is not an easy task to compute the viability domain
for a nonlinear control system. Optimization-based methods,
such as Sum-of-Squares (SOS) techniques, have been used in
the past to compute this domain (see [10]). However, SOS-
based approaches are only applicable to systems whose dy-
namics is given by polynomial functions, thus limiting their
applications. Another method popularly used in the literature
for computing the viability domain is Hamilton-Jacobi (HJ)
based reachability analysis, see, e.g., [11]. However, such an
analysis is computationally expensive, particularly for higher
dimensional systems. We propose a novel sampling-based
method to compute the viability domain for a general class
of nonlinear control systems to overcome these limitations.

In this work, we consider a general class of nonlinear
systems under actuator attacks and propose a method of com-
puting a set of initial conditions and an input constraint set
such that the system remains secure by design. In particular,
we consider actuator manipulation, where an attacker can
assign arbitrary values to the input signals for a subset of
the actuators in a given bound. We consider the property of
safety with respect to an unsafe set and propose sufﬁcient
conditions using sampling of the boundary of a set to verify
whether the set is a viability domain under attacks. Using
these conditions, we propose a computationally tractable
algorithm to compute the set of initial conditions and the
input constraint set such that the system’s safety can be
guaranteed under attacks. In effect, our proposed method
results in a secure-by-design system that is resilient against
actuator attacks. Finally, we leverage these sets in a QP-
based approach with provable feasibility for real-time online
feedback synthesis. The contributions of the paper are sum-
marized below:

1) We present sampling-based sufﬁcient conditions to as-
sess whether a given set can be rendered forward
invariant for a general class of nonlinear system. To
the best of the authors’ knowledge, this is the ﬁrst
work utilizing sampled-data approach for computing a
viability domain;

2) We present a novel iterative algorithm to compute a
viability domain and an input constraint set to guarantee

 
 
 
 
 
 
system safety under attacks. Unlike [10], [11], the pro-
posed method is applicable for general nonlinear control
systems and is scalable with the system dimension.
Notation: Throughout the paper, R denotes the set of real
numbers and R+ denotes the set of non-negative real num-
bers. We use |x| to denote the Euclidean norm of a vector
x ∈ Rn. We use ∂S to denote the boundary of a closed
set S ⊂ Rn and int(S) to denote its interior and |x|S =
inf y∈S |x − y|, to denote the distance of x ∈ Rn from the
set S. The Lie derivative of a continuously differentiable
function h : Rn → R along a vector ﬁeld f : Rn → Rm at
a point x ∈ Rn is denoted as Lf h(x) := ∂h

∂x (x)f (x).

II. PROBLEM FORMULATION

We start with deﬁning a model for the system and the

attacker considered in this paper.

A. System model

Consider a nonlinear control system S given as

(cid:40)

S :

˙x = F (x, u) + d(t, x),
x ∈ D, u ∈ U,

(1)

where F : D × U → Rn is a known function continuous on
: D × U, with D ⊂ Rn and U ⊂ Rm, d : R+ × Rn → Rn is
unknown and represents the unmodeled dynamics, x ∈ D is
the system state, and u ∈ U is the control input.

B. Attacker model

In this paper, we consider attacks on the control input of
the system. In particular, we consider an attack where a sub-
set of the components of the control input is compromised.
Under such an attack, the system input takes the form:

u = (uv, us),

(2)

where uv ∈ Uv ⊂ Rmv represents the vulnerable compo-
nents of the control input that might be compromised or
attacked, and us ∈ Us ⊂ Rms the secure part that cannot be
attacked, with mv + ms = m and U := Uv × Us. Under this
class of attack, we assume that we know which components
of the control input are vulnerable. For example, if the system
has four inputs so that u = (cid:2)u1 u2 u3 u4
, and u1, u3
can be attacked, then we assume that this information is
known, and uv is comprised of u1 and u3. We discuss how to
address the assumption of which components of the control
input are vulnerable in Remark 1 in Section IV.

(cid:3)T

Such attack models have been used in prior work, see
e.g., [12], and can be implemented in practice by designing
the dynamic range of the actuator to preserve its bounds.
It can also be implemented in software with the help of
a reference monitor [13] between the controller and the
actuator that can check if the desired control inputs satisfy
the security policy [12]. As discussed in [14], various pro-
totypical attacks, such as stealth attacks, replay attacks, and
false-data injection attacks can be captured by the attack
model in (2). In addition to representing a real-world scenario
where system actuators have physical limits, constraining

Fig. 1. Overview of our approach.

the vulnerable control input uv in the set Uv has several
advantages:

1) It restricts how much an attacker can change the nom-
inal operation of the system [15], and can be imple-
mented physically, so an attacker cannot bypass it.
2) It can be utilized to design a detection mechanism,
e.g., if uv /∈ Uv, a ﬂag can be raised signifying that
the system is under an attack. Schemes that raise a
threshold-based ﬂag are commonly used as detection
mechanism [5].

3) The constraint set Uv can be designed appropriately
such that the system remains secured under attacks, as
discussed in Section IV (see also [12], [15]).

Now, we present the control design objectives. Consider
a non-empty, compact set S ⊂ Rn, referred to as safe set,
to be rendered forward invariant. We make the following
assumption on the unmodeled dynamics d in (1):

Assumption 1. There exists δ > 0 such that |d(t, x)| ≤ δ
for all t ≥ 0 and x ∈ D.

We consider two properties when designing the control law,
an essential property (safety), imposed while designing the
secure input us, and a desirable property (performance),
imposed while designing both us and uv (see Figure 1). The
problem we study in this paper is as follows.

Problem 1. Given the system in (1) with unmodeled dynam-
ics d that satisﬁes Assumption 1, a set S and the attack model
in (2), design a feedback law ks : Rn → Us, and ﬁnd a set
of initial conditions X0 ⊂ S and the input constraint set
˜Uv ⊂ Uv, such that for all x(0) ∈ X0 and uv : R+ → ˜Uv,
the closed-loop trajectories x : R+ → Rn of (1) resulting
from using us = ks(x) satisfy x(t) ∈ S for all t ≥ 0.

In plain words, we consider the problem of designing a
feedback law us and compute a set of initial conditions X0
and input constraint set ˜Uv, such that even under an attack
as per the attack model (2), the system trajectories do not
leave the safe set S, i.e., the system is secure by design.
In this work, we assume that the safe set is given as S :=
{x | B(x) ≤ 0} where B : Rn → R is a sufﬁciently smooth
user-deﬁned function.

C. Outline of approach

Given a control system (1), and an attack model (2), we
ﬁrst identify a safe set S ⊂ Rn and the vulnerable input

forward invariant for (1) under d satisfying Assumption 1
if the following condition holds:

inf
u∈U

LF B(x, u) ≤ −lBδ ∀x ∈ ∂S,

(4)

where lB is the Lipschitz constant of the function B.

III. SUFFICIENT CONDITIONS FOR SAFETY

In this section, we present sufﬁcient conditions that guar-
antee the security of the system model (1) against attacks on
the input. We say that the system (1) is secure with respect
to the safety property for a set S if for all initial conditions
x(0) ∈ S, x(t) ∈ S for all t ≥ 0, uv ∈ Uv and d satisfying
Assumption 1. Given B and F , deﬁne H : Rn × Rmv → R:

H(x, uv) := inf
us∈Us

LF B(x, (uv, us)).

(5)

It is not necessary that the zero sublevel set S of the function
B is a viability domain for system (1). Any non-empty
sublevel set Sc := {x | B(x) ≤ −c}, where c ≥ 0, being a
viability domain is sufﬁcient for safety of the system. Note
that the set Sc is non-empty for 0 ≤ c ≤ − min
B(x). Deﬁne
x∈S
cM ∈ R as

cM := − min
x∈S

B(x),

(6)

so that the set of feasible values for c is given as [0, cM ].2 The
following result provides sufﬁcient conditions for a system
to be secured with respect to the safety property.

Proposition 1. Suppose there exist c ∈ [0, cM ] and nonempty
˜Uv ⊂ Uv such that

H(x, uv) ≤ −lBδ ∀x ∈ ∂Sc,

(7)

sup
uv∈ ˜Uv

and the system solutions are uniquely deﬁned in forward time
for all x(0) ∈ Sc. Then, for each d satisfying Assumption 1,
system (1) is secured with respect to the safety property for
the set Sc.

Proof. Note that

inf
us ∈Us
uv ∈ ˜Uv

LF (x, (uv, us)) = inf

uv∈ ˜Uv

H(x, uv) ≤ sup
uv∈ ˜Uv

H(x, uv).

Thus, from (7), it follows that (4) holds. Thus, per Lemma 2,
the set Sc is forward invariant and it holds that the system (1)
is secured with respect to the safety property for set Sc. (cid:4)

Note that satisfaction of the conditions in Proposition 1
implies that for all x ∈ ∂Sc and uv ∈ ¯Uv, there exists an
input us ∈ Us such that the inequality LF B(x, (uv, us)) ≤
−lBδ holds. This, in turn, implies that the set Sc is a viability
domain for system (1). Condition (7) requires checking the
H(x, uv) ≤ −lBδ for all points on the
inequality sup
uv∈ ˜Uv

boundary of the set Sc. Such conditions are commonly
used in the literature for control synthesis, assuming that
the viability domain is known. However, it is not an easy
task to compute a viability domain in practice for a general

2Note that compactness of the set S guarantees existence of cM .

Fig. 2. Approach for safe feedback design under attacks.

uv. Then, our approach to solving Problem 1 involves the
following steps (see Figure 2):

1) Establish the existence of X0 and Uv (Section III):
leverage CBFs to ﬁnd sufﬁcient conditions to check
whether there exist a set of initial conditions X0, input
constraint set ˜Uv ⊂ Uv, and a control input us for all
x ∈ X0 that can solve Problem 1;

2) Numerical method for computation of X0 and Uv
(Section IV): use conditions in step 1) to formulate a
numerical method for computing sets X0 and ˜Uv;
3) Feedback law synthesis (Section V): use the sets X0
and ˜Uv from step 2) to design a feedback control law
us = ks(x) that solves Problem 1.

D. Preliminaries

Next, we present preliminaries on forward invariance.
Deﬁnition 1. A set S ⊂ Rn is termed as forward invariant
for system (1) if every solution x : R+ → Rn of (1) satisﬁes
x(t) ∈ S for all t ≥ 0 and for all initial conditions x(0) ∈ S.

Next, we review a sufﬁcient condition for guaranteeing
forward invariance of a set in the absence of an attack. For
the sake of simplicity, in what follows, we assume that every
solution of (1) exists and is unique in forward time for all
t ≥ 0 whether or not there is an attack on the system.1

Lemma 1 ([17]). Given a continuously differentiable func-
tion B : Rn → R, the set S = {x | B(x) ≤ 0} is forward
invariant for (1) with d ≡ 0 if the following condition holds:

inf
u∈U

LF B(x, u) ≤ 0 ∀x ∈ ∂S.

(3)

Satisfaction of (3) means the set S is termed as a viability
domain for system (1) with d ≡ 0. Using Lemma 1, and
following the notion of robust CBF in [18], we can state
the following result guaranteeing forward invariance in the
presence of disturbance d.

Lemma 2 ([18]). Given a continuously differentiable func-
tion B : Rn → R, the set S = {x | B(x) ≤ 0} is

1In this work, we assume that even under attack, the solution of the
system is unique in forward time. It is possible to study the case when this
assumption does not hold using the notion of strong invariance (see [16]).

class of nonlinear systems a priori. In the next section, we
present a computationally tractable method where we show
that checking a modiﬁcation of the inequality in (7) on a set
of sampling points on the boundary is sufﬁcient.

IV. VIABILITY DOMAIN UNDER BOUNDED INPUTS
In this section, we present numerical algorithms to assess
whether given system (1) and the function B, there exist c
and an input constraint set ˜Uv such that condition (7) holds.
First, we present a sampling-based method for evaluating
whether the condition (7) holds by checking a modiﬁed
inequality at a ﬁnite set of sampling points. Then, we propose
an iterative method to compute c and the set ˜Uv.
A. Viability domain using sampling data

We start by making the following assumption on the

regularity of the function H deﬁned in (5).

Fig. 3.

3-D case: Triangulating sampling of the boundary ∂Sc.

• For each x ∈ ∂Sc, there exists a triangular face Tj with
vertices xj1, xj2 , xj3 ∈ {xi}I, of the polyhedron PI
generated by {xi}I, such that xo + θ(x − xo) ∈ Tj for
some 0 ≤ θ ≤ 1; and
• The following holds:

max
l(cid:54)=m
l,m=1,2,3

dSc(xjl , xjm ) ≤ da,

(9)

Assumption 2. The function supuv∈ ˜Uv
continuous on S with constant lH > 0.

H(·, uv) is Lipschitz

where dSc(x, y) denotes the shortest arc-length between
the points x, y ∈ ∂Sc.

First, to illustrate the method, we consider the 3-D case,
i.e., when x ∈ R3. If the compact set S ⊂ R3 is diffeo-
morphic to a unit sphere in R3, then the sampling points
on the boundary of the unit sphere can be used to obtain
the points on the boundary of Sc. Thus, without loss of
generality, we can study the case when S ⊂ R3 is a unit
sphere with center xo ∈ R3. Let {xi}I, with each xi ∈ ∂Sc,
denote the set of Np sampling data points on the boundary
of the sublevel set Sc for a given c ∈ [0, cM ] with cM
deﬁned in (6) and I := {1, 2, . . . , Np}. The sampling points
{xi}I are such that they constitute a polyhedron PI with
Nf > 0 triangular faces, T1, T2, . . . , TNf , such that PI
triangulates the boundary ∂Sc, i.e., the intersection of any
two distinct triangles is either empty, a single vertex, or a
single edge. Figure 3 shows an example of triangulation
of a unit sphere in R3. Interested readers on algorithms
and details on triangulation are referred to [19], and the
references therein.

√

Note that a tetrahedron is the minimal triangulation (i.e.,
a triangulation with minimum number of triangular faces)
for a unit sphere. Using geometric arguments, it is easy to
show that the minimum possible value of the maximum of
the inter-vertex distances for a tetrahedron inscribed in a
3. The corresponding arc-length along the
unit sphere is
boundary of the unit sphere (denote as da) is 2 sin−1 (cid:113) 3
4 . It
follows that if da ≤ 2 sin−1 (cid:113) 3
4 , then there must be at least
Np = 4 points in the polyhedron. Finally, with 0 ≤ rc ≤ 1
being the radius of the sphere Sc,3 the corresponding arc-
length for Sc is

dM := 2rc sin−1

(cid:114) 3
4

.

(8)

Now, to ensure that they are enough sampling points, the
following conditions can be imposed on {xi}I for a given
(cid:3)
c ∈ [0, cM ] and da ∈ (cid:2)0, dM

√

3If the set Sc is deﬁned as Sc = {x | |x|2 − 1 ≤ −c}, then rc =
1 − c.

In plain words, the above conditions require for each point
x ∈ ∂Sc, the line joining the center xo and x intersects
a triangular face of the polyhedron such that the distance
along the boundary ∂Sc between the vertices of this face is
bounded by da. Note that smaller da requires larger number
of sampling points Np. Now, we show that if the following
holds

H(xi, uv) ≤ −lH da − lBδ ∀i ∈ I,

(10)

sup
uv∈ ˜Uv

where lB is the Lipschitz constant for B and δ, lH are as
deﬁned in Assumptions 1 and 2, respectively, then, (7) holds.
With c ∈ [0, cM ], the set Sc is non-empty, and with da ∈
(cid:2)0, dM
(cid:3), there exist sufﬁcient points Np to have a polyhedron
that can triangulate the boundary ∂Sc. Under the conditions
imposed on {xi}I, for every ¯x ∈ ∂Sc, there exists a triangu-
lar face Tj with coordinates xj1 , xj2 , xj3 ∈ {xi}I satisfying
(9) and 0 ≤ θ ≤ 1 such that xo + θ(¯x − xo) ∈ Tj. Using
Lipschitz continuity of supuv H(·, uv) per Assumption 2,
it holds that supuv∈ ˜Uv
H(x, uv) +
lH |¯x − x|, for all x, ¯x ∈ ∂Sc. For x = xi, i ∈ I, using
(10) and the fact that |x − y| ≤ dSc (x, y) for all x, y ∈ ∂Sc,
we obtain that

H(¯x, uv) ≤ supuv∈ ˜Uv

H(¯x, uv) ≤ − lH da − lBδ + lH dSc(¯x, xi), ∀i ∈ I.

sup
uv∈ ˜Uv

Since the projection of ¯x lies in the triangular face Tj, it
holds that dSc (¯x, xjk ) ≤ dSc (xjl , xjk ) for l (cid:54)= k, l, k ∈
{1, 2, 3}. Using this and (9), we obtain

H(¯x, uv) ≤ −lH da − lBδ + lH da = −lBδ, ∀¯x ∈ ∂Sc.

sup
uv∈ ˜Uv

Thus, checking the inequality (10) at a ﬁnite number of
points is a computationally tractable method for assessing
whether (7) holds for a given c and ˜Uv. Note that for a given
F, B, ˜Uv and δ, a smaller value of da implies that the right-
hand side of (10) is less negative, thus, making it easier to
satisfy the inequality. At the same time, due to (9), a smaller
value of da requires more sampling points Np, and hence,

checking the inequality at more points. Thus, there is a trade-
off between the ease of satisfaction of (10) and the number
of points at which the inequality should be checked.

The

above

arguments

can be generalized to the
n−dimensional case. Using the sampling approach in [20]
for a unit sphere in n−dimension, combined with Delaunay
Triangulation of the sampling points (see e.g., [21]), an
(n−1)−dimensional simplex can be obtained. If the compact
set S ⊂ Rn is diffeomorphic to a unit (n − 1)−sphere, then
sampling points on the boundary of S can be obtained using
the sampling points for the (n − 1)−unit sphere. Thus, we
study the case when the set S is an (n − 1)−unit sphere.

Let {xi}I, with each xi ∈ ∂Sc, denote the set of Np
sampling data points on the boundary of the sublevel set
Sc for a given c ∈ [0, cM ] with cM deﬁned in (6) and
I := {1, 2, . . . , Np}. The sampling poins {xi}I constitute a
simplex SI with Nf > 0 faces, X1, X2, . . . , XNf . For a unit
sphere in Rn, the minimum number of points in the simplex
is (n + 1), and the minimum possible value of the maximum

(cid:113) 2(n+1)
n

(cid:113) (n+1)

. The length, denoted
of the lengths of its edges is
as da, of the corresponding arc-length on the boundary ∂Sc
is 2rc sin−1
2n , where 0 ≤ rc ≤ 1 is the radius of the
sphere Sc. Thus, with da ≤ 2rc sin−1
2n , there must be
at least (n +1) points in the simplex. For the sake of brevity,
(cid:113) (n+1)
deﬁne dM,n := 2rc sin−1
2n . We make the following
assumption on the sampling points {xi}I.

(cid:113) (n+1)

Assumption 3. Given c ∈ [0, cM ], the sampling points {xi}I
and da ∈ (cid:2)0, dM
(cid:3), for each x ∈ ∂Sc, there exists a face
Xj with vertices {xj1, xj2 , . . . , xjn } ∈ {xi}I, where j ∈
{1, 2, . . . , Nf }, of the simplex SI generated by {xi}I, such
that xo + θ(x − xo) ∈ Xj for some 0 ≤ θ ≤ 1, and the
following holds:

max
l(cid:54)=m
l,m=1,2,...,n

dSc(xjl , xjm ) ≤ da,

(11)

where dSc(x, y) denotes the shortest arc-length between the
points x, y ∈ ∂Sc.

We have the following result when S is (n − 1)−unit

sphere.

Theorem 1. Suppose that the function H deﬁned in (5)
satisﬁes Assumption 2. Given c ∈ [0, cM ], da ∈ (cid:2)0, dM,n
(cid:3),
and the sampling points {xi}I, if Assumption 3 and (10)
hold, then, (7) holds.

(cid:3),

Proof. With c ∈ [0, cM ],
the set Sc is non-empty, and
with da ∈ (cid:2)0, dM
there exist sufﬁcient points Np to
have a simplex. Now, consider any point ¯x ∈ ∂Sc. Under
Assumption 3, for every ¯x ∈ ∂Sc, there exists a face Xj of
the simplex SI, such that the line joining the center of the
sphere Sc and the point ¯x lies on this face. Using Lipschitz
continuity of supuv H(·, uv) under Assumption 2 and (10),

it holds that

sup
uv∈ ˜Uv

H(¯x, uv) ≤ sup
uv∈Uv

H(x, uv) + lH |¯x − x|

≤ − lH da − lBδ + lH |¯x − x|,

for all x, ¯x ∈ ∂Sc. Using the inequality for x = xji,
i ∈ {1, . . . , n} and the fact that |¯x − xji| ≤ dSc(¯x, xji) ≤
dSc (xjk , xji ) for any k (cid:54)= i, k ∈ {1, . . . , n} and (11), we
obtain that

H(¯x, uv) ≤ − lH da − lBδ + lH da = −lBδ

sup
uv∈ ˜Uv

for all ¯x ∈ ∂Sc, which completes the proof.

(cid:4)

Note that

there are three set of parameters that can

facilitate satisfaction of (10) in the following manner:
• Set ˜Uv: smaller ˜Uv makes it easier to satisfy (10);
• Parameter c: larger value of c results in smaller values
of dM , thus, reducing the right-hand side of (10), and
making it easier to satisfy it; and

• Number of sampling points Np: larger Np results in

smaller value of dM,n.

Based on these observations, an iterative algorithm can be
formulated to check whether there exists a feasible c and a
non-empty set ˜Uv, such that (10) holds.

B. Iterative algorithm

We formulate our algorithm with the following steps:
1) For a given value of 0 ≤ c ≤ cM , ˜Uv and number of
sampling points Np, sample {xi}I from the set ∂Sc and
check if (10) holds for all the sampling points;

2) Shrink ˜Uv, increase c and repeat steps 1)-2) until the
condition (10) is satisﬁed for all the sampling points,
or there does not exist a c and a non-empty set ˜Uv;
3) Increase Np and repeat steps 1)-3) until (10) holds or

the maximum value (Nmax) of Np is reached.

Using these steps, we propose Algorithm 1 which returns a
feasible c and a set ˜Uv such that safety is guaranteed for
all x ∈ Sc and uv ∈ ˜Uv. In other words, this algorithm
can compute the set of initial conditions Sc, and the set of
tolerable attacked inputs via ˜Uv such that the system can
satisfy the safety property under attacks. The order in which
the parameters c, ˜Uv, and Np are tuned can be changed,
which can potentially change the output of the algorithm.

Remark 1. If it is unknown which components of the input
are vulnerable, then all possible combinations of uv and us
can be considered, and Algorithm 1 can be used to compute
c for each such combination. Then, the maximum of all such
values can be used to deﬁne the set Sc, guaranteeing the
system’s security against attack on any control inputs.

Remark 2. The computational complexity of Algorithm 1
is only a function of the number of sampling points Np
(which, in principle, is a user-deﬁned parameter) and is
independent of the non-linearity of the function F , and linear
in the dimension n. Thus, unlike reachability based tools
in [22], [11] where the computational complexity grows

Algorithm 1: Iterative method for computing ˜Uv, c
Data: f, gv, gs, Uv, Us, B, da, ε1, ε2, δ, Nmax, Nc0

1 Initialize: ˜Uv = Uv, c = 0, Np = Nc0;
2 while Np < Nmax do
while c ≤ cM do
3

4

5

6

7

8

9

10

Sample {xi}I from {B(x) ≤ −c};
while ˜Uv (cid:54)= ∅ do

if {i ∈ I | H(xi, uv) > −lH da +lBδ} (cid:54)= ∅ then

˜Uv = ˜Uv (cid:9) ε1 ;

if ˜Uv = ∅ then
c = c + ε2;
˜Uv = Uv;

11

Np = 2 Np;
c = 0;
12
13 Return: ¯Uv, c;

exponentially with the system dimension n, or SOS based
tools [10] that are only applicable to a speciﬁc class of
systems with linear or polynomial dynamics, Algorithm 1 can
be used for general nonlinear system with high dimension.

So far, we presented sufﬁcient conditions to establish the
safety of the system (1) under attacks (Proposition 1), a
sampling-based method to verify these conditions using a
ﬁnite number of sampling points (Theorem 1), and iterative
methods to compute the set of initial conditions and the input
constraint set to satisfy these conditions (Algorithm 1). Thus,
in brief, using the results in this section, we can compute the
viability domain Sc and control input constraint set ˜Uv ⊂ Uv,
such that for all x ∈ Sc and uv ∈ ˜Uv, there exists a control
input us ∈ Us that can keep the system trajectories in the
set Sc at all times. In the next section, we present a method
of computing such a control input using a QP formulation.

V. QP BASED FEEDBACK DESIGN
In this section, we use the sufﬁcient conditions from the
previous section to design a feedback law for the system (1)
that guarantees security with respect to the safety property
under Assumption 1. We assume that the control input con-
straint set is given as ˜U := ˜Uv × Us = {v ∈ Rm | uj,min ≤
vj ≤ uj,max}, i.e., as a box-constraint set where uj,min <
uj,max are the lower and upper bounds on the individual
control inputs vj for j = 1, 2, . . . , m, respectively. We can
write U in a compact form as ˜U = {v | Auv ≤ bu} where
Au ∈ R2m×m, bu ∈ R2m. Furthermore, we assume that the
system model (1) is control afﬁne, and is of the form:

˙x = f (x) + gv(s)uv + gs(x)us + d(t, x),
(12)
where f : Rn → Rn, gv : Rn → Rn×mv and gs :
Rn → Rn×(m−mv) are continuous functions. In this case,
the function H : Rn × Rmv → R reads

H(x, uv) = inf

Lf B(x) + Lgs B(x)us + Lgv B(x)uv.

us∈Us

(13)

In addition to the safety requirement
in Problem 1, we
impose the requirement of convergence of the system tra-
jectories of (12) to the origin. To this end, given a twice

continuously differentiable, positive deﬁnite function V :
Rn → R+ as a candidate Lyapunov function, we use the
condition

Lf V (x) + Lgs V (x)us + Lgv V (x)uv ≤ −ζV (x) − lV δ,

(14)

where ζ > 0,
to guarantee convergence of the system
trajectories to the origin under d satisfying Assumption 1.
We assume that the set S is an (n − 1)-unit sphere, so that
we can use the results from the previous section to compute
a viability domain for it, and that 0 ∈ int(S), so that the
convergence requirement is feasible. The linear constraints
on the control input, and the system model being control
afﬁne, helps us formulate a convex optimization problem that
can be efﬁciently solved for real-time control synthesis [9].
We propose the following Quadratic Program (QP) to solve
Problem 1. Deﬁne z = (vs, vv, η, ζ) ∈ Rm+2 and for a given
x ∈ Rn, consider the following QP:

min
z
s.t.

|z|2 + qζ

1
2

Auvna ≤ bu,

(15a)

(15b)

Lf B(x) + Lgs B(x)vs ≤ − η (B(x) + c)

− sup
uv ∈ ˜Uv

Lgv B(x)uv − lBδ,

(15c)

Lf V (x) + Lgs V (x)vs+Lgv V (x)vv ≤ −ζ V (x) − lV δ,

(15d)

where q > 0 is a constant, lB, lv are the Lipschitz constants
of the functions B and V , respectively, and c and ˜Uv are the
output of Algorithm 1. Here, η and ζ are slack variables used
for guaranteeing feasibility of the QP (see [23, Lemma 6]).
The ﬁrst constraint (15b) is the input constraints, the second
constraint is the CBF condition from Lemma 2 for forward
invariance of the set Sc and the third constraint (15d) is CLF
constraint for convergence of the system trajectories to the
origin. Note that the secure input vs is used in both (15c) and
(15d), while the vulnerable input vv is only used in (15d).
Let the optimal solution of (15) at a given point x ∈ Rn
be denoted as z∗(x) = (v∗
v(x), η∗(x), ζ ∗(x)). In order
s (x), v∗
to guarantee continuity of the solution z∗ with respect to
x, we need to impose the strict complementary slackness
condition on (15) (see [23]). In brief, if the i−the constraint
of (15), with i ∈ {1, 2, 3}, is written as Gi(x, z) ≤ 0, and
the corresponding Lagrange multiplier is λi ∈ R+, then
i G(x, z∗) < 0,
strict complementary slackness requires that λ∗
where z∗, λ∗
i denote the optimal solution and the correspond-
ing optimal Lagrange multiplier, respectively. We are now
ready to state the following result.

Theorem 2. Given the functions F, d, B, V and the attack
model (2), suppose Assumptions 1-3 hold. Let c and ˜Uv
be the output of the Algorithm 1. Assume that the strict
complementary slackness holds for the QP (15) for all
x ∈ Sc. Then, the QP (15) is feasible for all x ∈ Sc, and
the control law deﬁned as ks(x) = v∗
s (x) is continuous on
int(Sc), and solves Problem 1 for all x(0) ∈ X0 := int(Sc).

Proof. Per Theorem 1,
the set Sc is a viability domain
for the system (12) under Assumption 2. Thus, feasibility

of the QP (15) follows from [23, Lemma 6]. Note also
that with V being twice continuously differentiable and
under Assumption 2, the Lie derivatives of the functions V
and B along f, gs, and gv are continuous. Thus, per [23,
Theorem 1], the solution z∗ of the QP (15) is continuous
on int(Sc). Finally, since the set Sc is compact, it follows
from [23, Lemma 7] that the closed-loop trajectories are
uniquely deﬁned for all t ≥ 0. Uniqueness of the closed-loop
trajectories, Assumption 1 and feasibility of the QP (15) for
all x ∈ Sc implies that all the conditions of Lemma 2 are
satisﬁed and it follows that the set Sc is forward invariant
(cid:4)
for the system (12).

Remark 3. In this work, only the control input us is used to
achieve safety since it is unknown when the vulnerable input
uv comes under an attack. This conservative assumption
can be relaxed by utilizing an attack-detection mechanism,
which can trigger a switching mechanism from a nominal
control design, assuming no attacks, to the proposed method
under an attack. We leave this detection-based switching
mechanism as part of our future work.

VI. NUMERICAL EXPERIMENTS

To showcase the effectiveness of the proposed method, we

present an academic example with the system given as

˙x = f (x) + Ax + Bu + d(t, x),

(16)

where A ∈ R3×3 and B ∈ R3×2. The input constraint sets
are U1 = {u1 ∈ R |
|u1| ≤ uM 1} and U2 = {u2 ∈
R | |u2| ≤ uM 2} for some uM 1, uM 2 > 0. The safe set
is S = {x ∈ R3 | |x|2 − 1 ≤ 0} corresponding to the
function h(x) = |x|2 − 1, i.e., the safe set is the unit sphere.
We use randomly generated matrices A and B such that the
pairs (A, B1) and (A, B2) are controllable, where B1 and
B2 are the ﬁrst and the second columns of the matrix B,
respectively. The matrices (A, B) and the function f are





A =

0.61 0.37 2.69
−0.06−1.02−0.88
1.33 −2.71 0.91


, B =





−0.24 0.04
0.32 −0.01
−1.12−0.07


, f (x) = 0.01





x3
1 + x2
x3
2 + x2
3 + x2
x3

2x3
3x1
1x2


 .

We use MATLAB code from [24] to generate a uniform
sampling on the boundary of the unit sphere. Figure 4 shows
H(¯x, uv)+lH da +lBδ over
the maximum value of supuv∈ ˜Uv

Fig. 4. The value of maxi supuv ∈ ˜Uv
and the number of sampling points for different values of da.

H(¯x, uv) + lH da + lBδ + lH da

Fig. 5. The vulnerable input uv and the function h under attacks 1 and 2.

Fig. 6. The closed-loop paths traced by the system under attacks 1 and 2.
the sampling points for different values of da. It is observed
that condition (10) is satisﬁed when da = 0.0406, and the
corresponding number of sampling points is Np = 3062.
Without loss of generality, we assume that u2 is vulnerable.
We use Algorithm 1 to compute the set ˜Ui and a value of c
such that (10) holds for all the sampling points. With uM 1 =
20 and uM 2 = 20 (deﬁning the sets Us, Uv), Algorithm 1
gives c = 0 for the viability domain {x | h(x) ≤ c} and
˜uM 2 = 7.5 (deﬁning the set ˜Uv) as the feasible bound on the
attack signal u2. The attack happens at a randomly chosen
τ = 0.436 and δ = 0.1 in Assumption 1.

First, we illustrate that the system violates safety when the
attack signal u2 does not satisfy the bounds computed by
Algorithm 1. Figure 5 shows the vulnerable input uv for the
initial two attack scenarios (Attack 1 and 2) where ¯uM 2 =
20 and ¯uM 2 = 15, i.e., the set ˜Uv is larger than the one
computed using the proposed algorithm. Figure 5 also plots
the evolution of the barrier function h with time for the two
cases. It can be observed that the function h corresponding to
this attack takes positive values, and thus, the safety property
for the system is violated. Figure 6 plots the corresponding
closed-loops paths for the two scenarios, and it can be seen
that the system leaves the safe set, thus violating safety.
In the rest of the attack scenarios (Attack 3-6),
the
bound |uv| ≤ 7.5 is imposed as computed by the proposed
algorithm. Figure 7 plots the different types of attack signals
used in these scenarios, namely, saturated signals with uv =
7.5 and uv = −7.5, square wave and sinusoidal signal,
both with amplitude 7.5. The corresponding evolution of
the barrier function h illustrates that the system maintains
safety in all four scenarios. Figure 8 plots the closed-loops
paths for these attack scenarios, and it can be seen that the
system trajectories evolve in the safe set at all times, thus
maintaining safety. Through this case study, we illustrate that
if the system parameters are not chosen according to our
proposed method, then there might exist attacks that can lead

00.050.10.150.20.250.30.3502400.050.10.150.20.250.30.350200000.20.40.60.811.21.41.61.8051000.20.40.60.811.21.41.61.801020[3] A. Cardenas, “Cyber-physical systems security knowledge area
[Online].
https://www.cybok.org/media/downloads/Cyber-Physical

issue.” The Cyber Security Body Of Knowledge.
Available:
Systems Security issue 1.0.pdf

[4] H. Choi, W.-C. Lee, Y. Aafer, F. Fei, Z. Tu, X. Zhang, D. Xu, and
X. Deng, “Detecting attacks against robotic vehicles: A control invari-
ant approach,” in Proceedings of the 2018 ACM SIGSAC Conference
on Computer and Communications Security, 2018, pp. 801–816.
[5] V. Renganathan, N. Hashemi, J. Ruths, and T. H. Summers, “Distribu-
tionally robust tuning of anomaly detectors in cyber-physical systems
with stealthy attacks,” in 2020 American Control Conference (ACC).
IEEE, 2020, pp. 1247–1252.

[6] D. I. Urbina, J. A. Giraldo, A. A. Cardenas, N. O. Tippenhauer,
J. Valente, M. Faisal, J. Ruths, R. Candell, and H. Sandberg, “Limiting
the impact of stealthy attacks on industrial control systems,” in
Proceedings of the 2016 ACM SIGSAC conference on computer and
communications security, 2016, pp. 1092–1105.

[7] A. A. C´ardenas, J. S. Baras, and K. Seamon, “A framework for the
evaluation of intrusion detection systems,” in 2006 IEEE Symposium
on Security and Privacy (S&P’06).

IEEE, 2006, pp. 15–pp.

[8] M. N. Al-Mhiqani, R. Ahmad, W. Yassin, A. Hassan, Z. Z. Abidin,
N. S. Ali, and K. H. Abdulkareem, “Cyber-security incidents: a review
cases in cyber-physical systems,” Int. J. Adv. Comput. Sci. Appl, no. 1,
pp. 499–508, 2018.

[9] A. D. Ames, X. Xu, J. W. Grizzle, and P. Tabuada, “Control barrier
function based quadratic programs for safety critical systems,” IEEE
Transactions on Automatic Control, vol. 62, no. 8, pp. 3861–3876,
2017.

[10] L. Wang, D. Han, and M. Egerstedt, “Permissive barrier certiﬁcates
for safe stabilization using sum-of-squares,” in 2018 Annual American
Control Conference (ACC).

IEEE, 2018, pp. 585–590.

[11] J. J. Choi, D. Lee, K. Sreenath, C. J. Tomlin, and S. L. Herbert,
“Robust control barrier-value functions for safety-critical control,”
arXiv preprint arXiv:2104.02808, 2021.

[12] J. Giraldo, S. H. Kafash, J. Ruths, and A. A. Cardenas, “Daria:
Designing actuators to resist arbitrary attacks against cyber-physical
systems,” in 2020 IEEE European Symposium on Security and Privacy
(EuroS&P).

IEEE, 2020, pp. 339–353.

[13] U. Erlingsson, The inlined reference monitor approach to security

policy enforcement. Cornell University, 2004.

[14] F. Pasqualetti, F. D¨orﬂer, and F. Bullo, “Attack detection and identi-
ﬁcation in cyber-physical systems,” IEEE transactions on automatic
control, vol. 58, no. 11, pp. 2715–2729, 2013.

[15] S. H. Kafash, J. Giraldo, C. Murguia, A. A. Cardenas, and J. Ruths,
“Constraining attacker capabilities through actuator saturation,” in
2018 Annual American Control Conference.
IEEE, 2018, pp. 986–
991.

[16] F. H. Clarke, Y. S. Ledyaev, R. J. Stern, and P. R. Wolenski, Nonsmooth
Springer Science & Business Media,

analysis and control theory.
2008, vol. 178.

[17] F. Blanchini, “Set invariance in control,” Automatica, vol. 35, no. 11,

pp. 1747–1767, 1999.

[18] K. Garg and D. Panagou, “Robust control barrier and control lyapunov
functions with ﬁxed-time convergence guarantees,” in 2021 American
Control Conference (ACC), 2021, pp. 2292–2297.

[19] S. Oudot and J.-D. Boissonnat, “Provably good surface sampling and
approximation.” in Symposium on Geometry Processing, 2003, pp. 9–
18.

[20] P. Leopardi, “Diameter bounds for equal area partitions of the unit
sphere,” Electron. Trans. Numer. Anal, vol. 35, pp. 1–16, 2009.
[21] M. De Berg, M. Van Kreveld, M. Overmars, and O. Schwarzkopf,
Springer,

“Computational geometry,” in Computational geometry.
1997, pp. 1–17.

[22] S. Bansal, M. Chen, S. Herbert, and C. J. Tomlin, “Hamilton-jacobi
reachability: A brief overview and recent advances,” in IEEE 56th
Conference on Decision and Control.
IEEE, 2017, pp. 2242–2253.
[23] K. Garg, E. Arabi, and D. Panagou, “Fixed-time control under
spatiotemporal and input constraints: A QP based approach,” arXiv
preprint arXiv:1906.10091, 2019.

[24] A. Semechko, “Suite of functions to perform uniform sampling of
a sphere,” gitHub. Retrieved August 24, 2021. [Online]. Available:
https://github.com/AntonSemechko/S2-Sampling-Toolbox

Fig. 7. The vulnerable input uv and the function h under attacks 3-6.

Fig. 8. The closed-loop paths traced by the system under attacks 3-6.
to violation of safety. On the other hand, when the system
parameters are designed according to the proposed algorithm,
no attack can violate safety, conﬁrming that the system is
secure by design.

VII. CONCLUSION AND FUTURE WORK

In this paper, we study the problem of computing a
viability domain and input constraint set so that the safety
of a system can be guaranteed under attacks on the system
inputs. In contrast
to prior work on the computation of
viability domain whose applicability is limited to linear or
polynomial dynamics or whose computational complexity
grows exponentially with system dimension, our method is
computationally efﬁcient and applies to a general class of
nonlinear systems. We showed that when the system parame-
ters are chosen using our sampling-based iterative algorithm,
the resulting system is resilient to arbitrary attacks, and thus,
is secure by design.

Our approach can be used to design bounds (that can either
be implemented physically or in a tamper-proof reference
monitor) that will prevent attackers from driving control
systems to unsafe states. It
is efﬁcient (sampling-based
viability computation) and general (applicable to non-linear
systems). By limiting the range of actuation and the initial
set, we are limiting the responsiveness of control action, and
in general, systems with our defense might converge slower
to the desired set point or trajectory. One way to mitigate
this is to use attack-detection mechanisms and switching
strategy so that more efﬁcient controllers can be used when
the system is not under an attack.

REFERENCES

[1] R. M. Lee, M. J. Assante, and T. Conway, “German steel mill cyber

attack,” Industrial Control Systems, vol. 30, p. 62, 2014.

[2] N. E. Oueslati, H. Mrabet, A. Jemai, and A. Alhomoud, “Comparative
study of the common cyber-physical attacks in industry 4.0,” in 2019
International Conference on Internet of Things, Embedded Systems
and Communications.
IEEE, 2019, pp. 1–7.

00.20.40.60.811.21.41.61.8-1-0.5000.20.40.60.811.21.41.61.8-10010