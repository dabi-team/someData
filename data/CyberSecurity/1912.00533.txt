16

9
1
0
2

c
e
D
2

]

R
C
.
s
c
[

1
v
3
3
5
0
0
.
2
1
9
1
:
v
i
X
r
a

A System-level Behavioral Detection Framework for
Compromised CPS Devices: Smart-Grid Case

LEONARDO BABUN, Florida International University
HIDAYET AKSU, Florida International University
A. SELCUK ULUAGAC, Florida International University

Cyber-Physical Systems (CPS) play a significant role in our critical infrastructure networks from
power-distribution to utility networks. The emerging smart-grid concept is a compelling critical
CPS infrastructure that relies on two-way communications between smart devices to increase
efficiency, enhance reliability, and reduce costs. However, compromised devices in the smart grid
poses several security challenges. Consequences of propagating fake data or stealing sensitive
smart grid information via compromised devices are costly. Hence, early behavioral detection of
compromised devices is critical for protecting the smart grid’s components and data. To address
these concerns, in this paper, we introduce a novel and configurable system-level framework to
identify compromised smart grid devices. The framework combines system and function call
tracing techniques with signal processing and statistical analysis to detect compromised devices
based on their behavioral characteristics. We measure the efficacy of our framework with a
realistic smart grid substation testbed that includes both resource-limited and resource-rich
devices. In total, using our framework, we analyze six different types of compromised device
scenarios with different resources and attack payloads. To the best of our knowledge, the
proposed framework is the first in detecting compromised CPS smart grid devices with system
and function-level call tracing techniques. The experimental results reveal an excellent rate
for the detection of compromised devices. Specifically, performance metrics include accuracy
values between 95% and 99% for the different attack scenarios. Finally, the performance analysis
demonstrates that the use of the proposed framework has minimal overhead on the smart grid
devices’ computing resources.

CCS Concepts: •Security and privacy → Systems security; Distributed systems security;
Distributed systems security;

General Terms: CPS security, Smart Grid security, compromised devices, IEC61850, system calls,
function calls.

This material is based upon work partially supported by the U.S. Department of Energy under Award
Number DE-OE0000779 and the U.S. National Science Foundation under Award Number NSF-1663051.
Author’s address: L. Babun, H. Aksu, and A. S. Uluagac, Electrical and Computer Engineering Department,
College of Engineering and Computing, Florida International University; (Current address) 10555 West
Flagler St. Miami Fl, 33174.
Version accepted for publication in the ACM Transactions of Cyber-Physical Systems (TCPS), but has not
been fully edited. Content may change prior to final publication. FOR EDUCATIONAL PURPOSES ONLY .
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted
without fee provided that copies are not made or distributed for profit or commercial advantage and that
copies bear this notice and the full citation on the first page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise,
or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
Request permissions from permissions@acm.org.
© 2019 ACM. XXXX-XXXX/2019/9-ART16 $15.00
DOI: 10.1145/3355300

ACM Transactions on Cyber-Physical Systems, Vol. 4, No. 2, Article 16. Publication date: September 2019.

 
 
 
 
 
 
ACM Reference format:
Leonardo Babun, Hidayet Aksu, and A. Selcuk Uluagac. 2019. A System-level Behavioral
Detection Framework for Compromised CPS Devices: Smart-Grid Case. ACM Transactions on
Cyber-Physical Systems 4, 2, Article 16 (September 2019), 32 pages.
DOI: 10.1145/3355300

1 INTRODUCTION
Critical infrastructure networks such as utility, production, and distribution systems
are pillars of any nation and economy. They depend on intelligent and advanced
Cyber-Physical Systems (CPS) to guarantee the efficient and reliable delivery of the
data generated within these networks. These vital delivery systems have recently
been going through a massive effort to modernize their CPS infrastructure.

In the specific case of the power grid, a substantial effort has already been made
to modernize the traditional decade-old grid to the next generation of technology,
i.e., smart grid. The core concept of the smart grid relies on the integration of the
underlying electrical distribution with two-way communications capabilities between
the smart CPS devices in the grid. The uses of CPS devices in the grid allows new
functionalities and state-of-the-art computing systems for the smart grid infrastructure
over the traditional power grid [86]. Nonetheless, new security concerns stem from
the use of CPS devices by the modern power grid.

Indeed, with all its dependency upon device operations and communications, the smart
grid is highly vulnerable to any security risk stemming from devices. Notably, the use
of compromised devices can wreak havoc on the smart grid’s critical functionalities
[18, 65] and can cause catastrophic consequences to the integrity of the smart grid
data and operations. Recent examples like the Stuxnet and Sandworm worm attacks
[23, 29, 70] have proven that compromised devices represent a serious threat to the
smart grid. Specifically, in the case of Stuxnet, the worm first targeted computers
controlling Programmable Logic Controllers (PLCs)), to then change the configuration
of the PLCs and cause the uranium centrifuges to behave erratically [52]. The same
way, in the case of Sandworm, the attack first targeted computing systems using
the BlackEnergy Trojan [46] to gain control over Remote Terminal Units (RTUs)
and substation breakers to cause power blackouts [41]. Due to these real attacks,
understanding the behavior of the smart devices, particularly the compromised ones,
has become more critical than ever. Several government agencies focus their efforts
to protect the critical infrastructure using behavioral-based approaches [63].

In this work, we propose a configurable system-level framework to detect com-
promised devices performing unauthorized operations inside the smart grid [6, 47].
Specifically, the proposed framework utilizes system and function call tracing tech-
niques, signal processing, and statistical analysis to detect compromised devices based
on their unexpected behavior. In order to test our framework, we designed a realistic
representative smart grid substation testbed in which generic CPS devices performed
essential operations conforming to the International Electrotechnical Commission

2

61850 (IEC618501) [35–38] protocol suite. The proposed testbed includes both resource-
limited (e.g., RTUs, PLCs, and resource-rich (e.g., Phasor Measurement Units (PMUs),
Intelligent Electronic Devices (IEDs)) CPS devices. In the testbed, the devices use
open-source libiec61850 libraries [59] to exchange smart grid time-critical messages
using the GOOSE format [10].

In addition, the adversary model complies with the security requirements specified
by the standardization organizations [81] for the smart grid. In total, we consider six
different types of compromised devices defined by different combinations of device
computing resources and attack payloads.

Finally, we evaluate the performance of our framework by detecting and analyzing
behavioral differences between compromised and ground truth devices using three
different detection methods. Experimental results demonstrate that the proposed
framework achieves an excellent detection rate. Performance metrics reveal accuracy
values between 95% and 99% for the different types of devices and detection methods
analyzed. Additionally, detailed performance analysis shows minimum overhead on
the use of the smart grid devices’ computing resources (i.e., CPU and memory). On
average, memory and CPU utilization does not increase more than 0.03% and 1.9%,
respectively.
Contributions: The contributions of this work are as follows:

(1) We designed a configurable system-level framework that combines system and
function call tracing techniques with signal processing and statistical analysis
to detect compromised smart grid devices. To the best of our knowledge,
this is the first work that utilizes these techniques in detecting compromised
devices in the smart grid.

(2) To test the efficacy of our framework, we designed a realistic smart grid sub-
station testbed that included both resource-limited and resource-rich devices.
These devices followed a GOOSE publisher-subscriber communication model
using open-source libiec61850 libraries. The proposed testbed represents a
valuable configurable benchmark for this, and other research works on CPS
security via behavioral analysis.

(3) In the adversary model, we considered six different types of compromised

devices with different computational resources and attack payloads.

(4) We evaluated the performance of our framework by detecting behavioral
differences between the compromised device and ground truth devices. We
obtained accuracy results over 95% and precision results over 93% for all
the different attacks scenarios and types of devices analyzed. These metrics
demonstrated that the proposed framework is highly effective to recognize
compromised smart grid devices using behavioral analysis.

(5) Finally, our analysis shows that the proposed framework does not represent a

significant overhead in terms of computing resources.

Organization: The remaining of the paper is organized as follows. Section II presents
the background information and some critical implementation assumptions. Then, in

1IEC61850 is a protocol suite that defines the communication standards for electrical substation automation
systems [10].

3

section III, we describe the attacker model. Then, in Section IV, we detail the architec-
ture of the proposed framework. In section V, we analyze and discuss experimental
results, performance metrics, and benefits of our work. Finally, Section VI presents
the related work, and Section VII concludes the paper.

2 BACKGROUND AND ASSUMPTIONS
In this section, we provide insights into the behavioral analysis of the smart grid
devices at the system level.

2.1 Overview of System-level Smart Grid Substation Architecture
The National Institute of Standards and Technologies (NIST) defines the smart grid
as a set of seven different interconnected domains [64]. Specifically, two of these
domains are responsible for the generation and transmission of electricity, while the
other four provide business, operations, and customer support. Finally, at the center
of the smart grid architecture, the distribution domain (i.e., smart grid substations)
acts as a communication and control hub for the entire infrastructure, which makes it
especially attractive to cyberattackers [86].

In Figure 1, we present a simplified version of the smart grid distribution domain

architecture. Here, three main operation layers can be highlighted [39, 42, 87]:

• Process Level: permits the data acquisition and control at the lowest level
of the smart grid substation architecture. The devices at the process level
(i.e., merging units) extract state information from sensors, transducers, and
actuators and deliver command controls from the upper layers.

• Bay Level: permits the two-way communication between the process level
and the upper operation layers of the smart grid substations. Here, Industrial
Ethernet switches interconnect different control and protection EIDs to allow:
(1) protection and control of the data exchanged between bay level and upper
and lower layers and (2) protection of the data exchanged between devices
located inside the bay level.

• Station Level: provides user interfaces and enable applications for engineering
and control of the lower layers. Here we can highlight operations from the
communication system, the time synchronization system, the substation data
collection and control, and servers and workstations.

The IEC61850 protocol suite enables the real-time communications between devices
from different substations levels (vertical communications) and devices within the same
level (horizontal communications) using Manufacturing Message Specification (MMS),
Generic Object Oriented Substation Events (GOOSE), and Sampled Measured Values
(SMV) messages [10, 72]. Specifically, this standard includes many underlying protocol
stacks to support and monitor a variety of time-critical services. Indeed, IEC61850
supports real-time operations, abstracts services, and interoperability between devices
used in energy automation [37, 38].

2.1.1 Behavioral analysis of substation smart grid devices. For this work, we focus
on the behavioral characteristics of the smart grid substation devices while they
communicate and perform either intra- or extra-level operations (i.e., horizontal
and/or vertical communications) in the smart grid substation. We define behavioral

4

Fig. 1. System-level interaction of smart grid substation devices. The two-way communications
under protocol suite IEC61850 can be established both horizontally (between devices from the
same level) and vertically (between devices from different levels).

characteristics of devices at the system level as the effect of the device’s substations
activities on the device’s kernel. Let assume that there is a device O performing control
operation at the Bay level. These operations can be represented as the set OP where:

OP = {OP0, OP1, OP2, ...OPN },
then, we define the system-level behavioral characteristic of O as the function set BC
due to the reflection of OP at the device’s kernel level [68, 89], that is:

(1)

BC = fker nel ({OP }),
In all the cases, we characterize the devices’ kernel activity while the devices perform
their regular smart grid substation operations. Indeed, utilizing BC for the compromised
device classification allows for a proper generalization of our framework so the proposed
solution can also be successfully applied in other CPS domains outside the smart grid.

(2)

2.2 Genuine smart grid devices
We consider a smart grid device as genuine when no hardware nor software alter-
ation or tampering has been performed on the device before, during, or after the
manufacturing process. To further characterize and identify genuine devices, we
define the parameter Index of Likeness (ILI). The ILI computes the similarity between
individual operations Oi performed by a single device while executing a specific task
T in different time intervals. Similar modeling approaches have been utilized in the
literature to characterize CPS [13, 54]. The universe of operations performed by a
device to complete a task T at time instant t = 0 can be defined as:

5

PROCESS BUSSTATION BUSMerging UnitsIEC61850Control EIDsProtection EIDsMerging UnitsOperation StationsEngineering StationsIEC61850Control EIDsCircuit Breaker 1Circuit Breaker 2Circuit Transformers 1 & 2and the value of ILI for different t can then be expressed as:

T (t = 0) = {∪∞

i=0Oi : ∃Oi ∈ T },

ρI LIt I LIt +i

=

(cid:205) OtOt +i − nOtOt +i
nsOt sOt +i

,

(3)

(4)

and sOt +i

where Ot represents the set of operations Oi performed by the device to complete the
task T at the time instant t and Ot +i represents the set of operations performed to
complete the same task T at the time instant t + i. In the same equation, n represents
the cardinality of O and sOt

represent the standard deviation of O.

Based on our model, a genuine or ground truth smart grid device is expected to
have a high value of ILI on average. This assumption has been supported in the
literature by other research works that characterize Cyber-Physical Systems (CPS)
devices (including smart grid devices) as highly deterministic systems [17]. In general,
for processes running over time, ILI is expected to take values between 0 and 1: 0 is the
result of entirely uncorrelated Oi s and 1 is the result of remarkably high correlated Oi s.
For a more realistic analysis, our work considers some inherent level of randomness
within the device operations. This assumption prevents two Os from being completely
identical even if one same device performs similar tasks repeatedly over time.

2.2.1 Ground-truth Devices. In the context of this work, ground truth devices
constitute particular cases of devices that are known as genuine. We assume full
availability to ground-truth devices from every device class present in the smart
grid. The proposed framework utilizes these ground-truth devices during its learning
process. In the next sections, we define the practical values of ILI that allow for the
characterization of ground-truth devices.

2.3 Compromised smart grid devices
The smart grid (and other CPS) devices can be compromised either directly and
indirectly. The direct method occurs in cases where the devices are compromised
during any of the steps of the supply chain process [4, 40] or via insiders, by directly
changing the configuration of the devices or their executing apps. Here, the attackers
directly target the CPS devices without any other intermediate device. On the other
hand, indirect methods are most commonly used and usually require initial access to
the computing systems controlling the CPS devices in the network. Once the attacker
gains access to those computers, they can change the configuration and behavior of
the edge devices [79].

We envision that the proposed framework can be utilized to detect compromised
devices in both the supply chain and in the field. For that reason, our work considers
that genuine devices can be compromised during any stage of the manufacturing and
application process. Specifically for our analysis, we consider a compromised smart grid
device as a genuine device with some malicious function installed on it. The malicious
function can be due to compromised hardware or software component [44, 75]. Also,
the malicious function is expected to change the basic operations of the genuine
device. In general, this function can be injected before, during, or after the device’s
manufacturing process. In Listing 1, we show realistic samples of a compromised

6

device due to code injection. In this specific example, the malicious functions aim to
(1) cause degradation on the device’s resources and (2) save critical data on a file to be
sent later to attackers.

Listing 1. Example of malicious code injected to compromised smart grid devices

srand(time(NULL));
long size = rand()%2147483647;
malloc(size);

1 void stress mem()
2 {
3
4
5
6 }
7
8 void save and send later (GooseSubscriber subscriber)
9 {
10
11
12
13 }

FILE ∗f = fopen("/root/baduser/data.dat", "a");

fprintf(f, "%" PRIu64 "\n", GooseSubscriber getCriticalValue(subscriber));
fclose(f);

To further describe the compromised devices, we recall Equation 4. Here, the set
of operations O is compromised with a malicious subset Om executed to perform
the malicious activity [45]. That is, for compromised devices, the malicious activity
impacts the value of ILI by inserting malicious operations Omi
to O. Such operations
change the device’s kernel behavior (Equation 2) so additional function or system
calls are generated (see Listings 2 and 3). In general, the set Om is expected to follow
certain statistical distribution as detailed later in our adversary model. Finally, for
compromised devices, Equation 4 takes the form:

ρI LIt I LIt +i

=

(cid:205) OtOmt Ot +iOmt +i − nOtOmt Ot +iOmt +i
nsOt sOmt sOt +i sOmt +i

,

(5)

where the term Omt
represents the malicious operations executed at time t + i.

represents the malicious operations executed at time t and Omt +i

Listing 2. System calls extracted from a
genuine device
1 pthread detach
2 malloc
3 malloc
4 free
5 free
6 signal
7 malloc
8 malloc
9 free
10 free
11 .
12 .
13 .
14 .
15 .
16 .

Listing 3. System calls extracted from a
compromised device
1 pthread detach
2 malloc
3 malloc
4 malloc
5 malloc
6 open
7 free
8 free
9 signal
10 malloc
11 malloc
12 malloc
13 malloc
14 open
15 free
16 free

2.4 Challenges on the behavioral identification of smart grid devices
Our framework utilizes changes in kernel’s behavioral patterns to identify compro-
mised devices. There are three main architectural challenges that our framework
needs to overcome:

7

(1) Challenge 1: The device class needs to be considered. Different types of devices
are expected to have different behavior; however, similar devices can also
behave differently based on their specific tasks. Such ambiguity can lead to
mistakenly identify genuine devices as compromised. For that reason, our
framework incorporates (1) device resources (e.g., CPU and memory), (2) type
of device, and (3) device task context into the analysis.

(2) Challenge 2: Device classes are very diverse. Device class classification would
represent an implementation challenge due to the high device diversity present
in the smart grid [64]. Additionally, after the initial classification, the list of
devices would need to be checked periodically due to possible changes in
network topology or new devices added to the network.

(3) Challenge 3: Smart grid devices operations are not fully deterministic. OS opera-
tions possess some degree of randomness that reflects on the device operation
list O. During the detection process, the framework needs to discriminate
between additional operations present in the call lists due to legitimate random
processes and real malicious activities.

2.5 Classes of smart grid devices
For this work, we group the smart grid devices into different classes. Then, we expect
that devices from different classes have different behavior. To correctly group the
devices, we consider three main features that address the challenges above: device’s
computing resource availability, device’s type, and device’s task context.

Resource availability– we define two different types of devices based on the avail-

ability of their computing resources: resource-rich and resource-limited devices.

• Resource-limited devices: these devices have simple hardware and software
architecture. They run with low-performance CPUs and have minimal memory
capability. In general, the randomness of the resource-limited devices’ kernel
behavior highly depends on their software architecture[17]. Also, these devices
are built to execute specific tasks inside the smart grid network. Some devices
in this group are PLCs and RTUs.

• Resource-rich devices: these smart grid devices are close in configuration to
full-capacity computers. They have a full Operating System (OS), faster multi-
core processors, and significantly higher memory than the resource-limited
devices. This type of devices executes specialized tasks inside the smart grid
network. Some devices in this group are IEDs and PMUs.

Moreover, we group the devices depending on their specific application, brand, and
model. For instance, PMUs from the same model and manufacturer can be grouped
together while RTUs and PLCs are not considered of the same type. We consider
this classification because the devices from different classes have found to behave
differently, even if they perform similar tasks.

Finally, the class-classification process of smart grid devices considers the device’s
task context. For our purposes, the task context involves the type of activity that
the devices are performing and their specific logical location inside the smart grid
network. That is, we consider that devices of the same type can behave differently if
they are handling different types of data from different parts of the network.

8

In general, we consider that the devices perform similar and repetitive tasks over
time [17]. Then, our framework takes advantage of this mode of operation to detect
compromised devices based on changes in their expected behaviour.

2.6 Open-source approach
Our smart grid testbed utilizes open-source libiec61850 libraries [59] to exchange
smart grid time-critical messages using the GOOSE format [10]. The use of open-
source software provides some additional design advantages: (1) our solution is more
flexible, (2) the framework is more open to customizations which translate on being
highly configurable, and finally, (3) our solution can be easily adapted to other open
standards which increases interoperability. Therefore, to keep the proposed framework
open-source, we implemented our solutions on Linux-based systems. This approach
is considered realistic since a very high percentage of smart grid devices still utilize
some variant of Unix-based OS [69]. We believe that, due to the open-sourced and
configurable nature of our testbed, it constitutes an effective benchmark to test the
performance of this and other security tools designed to protect the smart grid, that
follows the behavioral analysis.

2.7 Extracting operations from smart grid devices
We utilize system and function call tracing techniques to extract the set of individual
operations O from the devices. These operations are analyzed while the devices
perform specific smart grid tasks T . We combine function and system call analysis, so
the device’s activity is detailed from both kernel and application-level, which increases
the robustness of the framework. For attackers trying to exploit the calls to stealth
their activities, the inconsistencies between system and function calls triggered by the
same process can also indicate the presence of malicious activities. We take advantage
of the open-sourced Unix-based nature of our testbed to effectively utilize library
interposition and ptrace as system and function call tracing techniques, respectively.
Tracing system calls with library interposition– We use dynamic library interposition
(LI) since this is a general-purpose system call tracing method that can be applied
to most C-compiled programs [56]. LI takes advantage of the use of a shared object
defined inside the runtime library. This object is in charge of fetching the system calls
at the kernel level. At runtime, LI hooks this shared object to intercept the calls and
take control of the applications’ behavior.

Tracing function calls with ptrace– At the user level, we use Process Trace (i.e.,
ptrace), a popular Unix-based tool to trace function calls. Ptrace uses an external
process that acts as a parent for the C compiled program that wants to be traced. Once
the external process attaches to its child, the parent application has full control of
every time the traced application makes a function call.

Finally, for cases where the smart grid devices do not use Unix-based OS (e.g., Real-
Time Operating System (RTOS)), similar approaches are utilized to trace the system
and function calls. Similar hooking techniques are possible to use because these other
systems behave in similar ways as Linux since they are also POSIX-compliant OS. In
general, the tracing technique utilized for hooking into the system and function calls
is a configurable feature that depends on every specific application [56].

9

3 ADVERSARY MODEL
Our adversary model considers, conforming to the NIST guidelines, three possible
threats in the smart grid that are directly related to the use of compromised devices [62]:

(1) Threat 1 (Information leakage): the compromised device opens additional com-
munication channels to leak valuable smart grid information to the adversary
(another untrusted insider or outsider) in real-time.

(2) Threat 2 (Measurement poisoning): the compromised device generates fake

data that can be used to poison the real status of the smart grid.

(3) Threat 3 (Store-and-send-later): the compromised device stores information in

hidden files that are recovered later by an attacker.

Based on these three well-defined threats and considering both resource-limited and
resource-rich smart grid devices, we further define six different types of compromised
devices as part of the adversary model:

(1) Compromised Device 1 (CD1): the resource-limited device creates additional
instances of the IEC61850 GOOSE publisher object and starts leaking informa-
tion through unauthorized communication channels.

(2) Compromised Device 2 (CD2): the resource-limited device allocates small and
unauthorized amounts of memory to create fake data and poison real mea-
surements.

(3) Compromised Device 3 (CD3): the resource-limited device creates unauthorized
hidden files to store critical information which is retrieved later by the attacker.
(4) Compromised Device 4 (CD4): the resource-rich device creates additional in-
stances of the IEC61850 GOOSE subscriber object and starts leaking informa-
tion through unauthorized communication channels.

(5) Compromised Device 5 (CD5): the resource-rich device allocates small and
unauthorized amounts of memory to create fake data and poison real mea-
surements.

(6) Compromised Device 6 (CD6): the resource-rich device creates unauthorized
hidden files to store critical information which is retrieved later by the attacker.

A summary of the adversary model, its impact on device resources, and the targeted
security services of such attacks in the smart grid infrastructure are given in Table 1.

Table 1. Threats to the Smart Grid Devices.

Adversary Model

Name

CD1
CD2
CD3
CD4
CD5
CD6

CPS Device
resource availability
Limited
Limited
Limited
Rich
Rich
Rich

Computing resources impacted

Security services compromised

Memory, CPU, communications
Memory, CPU
Memory, CPU
Memory, CPU, communications
Memory, CPU
Memory, CPU

Confidentiality
Integrity
Authenticity, confidentiality
Confidentiality
Integrity
Authenticity, confidentiality

10

We also assume that the compromised devices perpetrate their attacks following a
Poisson distribution. Poisson allows for randomly and efficiently spacing the attacks
and constitutes a valid model to emulate the randomness of such events [71].

The behavior of the compromised device is modeled as follows. Consider t=[0,T ],
the communication interval between the two smart grid devices. The probability of
having an attack from a compromised device CDi ∈ {CD1, CD2, CD3, CD4, CD5, CD6}
can be expressed as:

Pcd = λke−λ
k!
where λ is the average number of attacks in the interval of time t and k is the total
number of attacks in the same interval.

, k ∈ R,

(6)

4 OVERVIEW OF THE PROPOSED FRAMEWORK
In this section, we describe the proposed framework to detect compromised devices in
the smart grid. Also, we present the details of our detection approaches and decision
algorithm. Figure 2 depicts the general architecture of the framework. As discussed
before, the main goal of the framework is to decide if an unknown smart grid device
is genuine or compromised [53]. For this work, the term unknown refers to the level
of uncertainty regarding the smart grid device being compromised or not. Initially,
as part of the learning process, a ground-truth device from a specific device class is
evaluated to generate its corresponding device-class signature or Ground-Truth Profile
(GTP). This signature contains behavioral profiling information from the device and
is utilized to decide whether an unknown device from the same class is genuine or
compromised. Once the signature is obtained, it is stored in the Ground-Truth Profiles
Database. In our implementation, we define a separate service to execute the learning
process. Such a service separation permits the generation of new signatures every time
that new devices join the network. Also, an independent learning process guarantees
the replacement of old signatures every time that known devices assume new roles in
the smart grid network.

The second part of the framework (also known as detection process) starts by extract-
ing a similar profiling signature from the unknown device. Here, we assume that we
have enough information to classify the device into some specific device class. Then,
three different detection methods are applied to compare and correlate the unknown
signature to the corresponding GTP from a similar device class stored in the database.
Comparison and correlation results are then used to remove uncertainty and decide if
the unknown device has been compromised or not.

We envision the proposed framework as a secured, centralized, and supervised agent
virtually located inside the smart grid network. There are several advantages from this
implementation model; first, our framework would be compliant with the security
challenges of the smart grid [31, 32, 42]; second, a centralized solution represents
a better option to monitor remotely-located devices from different networks; and
third, a supervised agent allows for monitoring group of devices without degrading
or interrupting critical tasks inside the smart grid. Figure 3 depicts a simplified
implementation example of our framework. Here, IED devices exchange information
between different substation level networks while a detection agent is monitoring them.
Inside the devices, a lightweight scheduler (sch) runs parallel processes at the kernel

11

Fig. 2. Configurable framework proposed to monitor and detect compromised smart grid
devices. The learning process creates signatures based on ground-truth devices that are utilized
later to decide on potentially-compromised devices.

level to hook into the devices’ tasks and extract behavioral information. The collected
information is sent to the server along with specific device class information using
secure TCP-IEC61850 channels via either proxy or VPN-tunnel protected (depending
on the smart grid device capability). Then, on the server-side, every scheduled action
is processed using either priority or first-in-first-out (FIFO)-based queues. The priority
is assigned depending on the device class and may also regulate the frequency of the
scheduler’s execution. For every detection process, the server executes queries to the
GTP database using the device class ID and receiving the corresponding behavioral
signature. Finally, the server correlates the scheduler data with the stored signature
and decides on the devices as being compromised or not.

4.1 Probability of detecting a compromise smart grid device
In Section 3, we presented the probability of having a specific attack during a time
interval t, considering the device is compromised. In this section, we formally describe
the probability of detecting such attacks by using the proposed approach. To generalize,
we consider that the statistical relationship between the two discrete random variables
X and Y that represent the ground-truth signatures and the timed operation of the
unknown smart grid devices follow a bi-variate distribution B. From here, we assume
that the probability of having a particular specific sequence of calls in the GTP is P(X ).

12

System Call ListsFunction Call ListsILI CalculationCompromised Device?Data CollectionData ProcessingDecisionData CollectionGround-Truth       Profiles     DatabaseGenuine DeviceCompromised DeviceYesNoSystem Call ListsFunction Call ListsCall ComparisonIOC-simpleIOC-advancedData ProcessingGround-Truth       DeviceUnknown   DeviceFig. 3. Example implementation of the proposed framework.

The same way, we assume a specific sequence of calls extracted from the unknown
device with probability P(Y ).

When an attack occurs, and it is detected, the expected value E(X ) and E(Y ) of the
random variables representing both the GTP and the unknown device call list are
P(X ) and P(Y ), respectively. From here, we can determine the variance V of the attack
indicator2 ϕx and ϕy from both the GTP and the unknown call lists as:

V ar (ϕX ) = E(ϕ

2

X ) − E(ϕX )2 = P(X )(1 − P(X )),

(7)

(8)
We directly establish the statistical correlation between the random variable X and

Y ) − E(ϕY )2 = P(Y )(1 − P(Y )).

V ar (ϕY ) = E(ϕ

2

Y as the co-variance of these attack indicators:

Cov(ϕX , ϕY ) = E(ϕX ϕY ) − E(ϕX )E(ϕY ),
= E(ϕX ∩Y ) − E(ϕX )E(ϕY ),
= P(X ∩ Y ) − P(X )P(Y ).

(9)

Then, we can define the correlation between ground-truth device signatures and

the unknown smart grid devices based on the probability of detecting the attacks.

ρ(ϕX , ϕY ) =

=

P(X ∩ Y ) − P(X )P(Y )
(cid:112)P(X )(1 − P(X ))P(Y )(1 − P(Y ))
(P(X |Y ) − 1)P(Y )
(cid:112)P(X )(1 − P(X ))P(Y )(1 − P(Y ))

,

,

(10)

2An attack indicator is represented by the value of the random variable that would indicate the presence of
an attack.

13

IED_1IED_2IED_3IED_4GTPDetectionServerdevice classsignaturesubstation 4substation 1substation 2substation 3where P(X |Y ) represent the conditional probability of detecting an attack on a smart
grid device after assuming a ground-truth signature from the same device class has
been found. In general, we describe the successfulness of the proposed detection
approach to be the jointly bi-variate variable (Xi , Yj ) with probability of occurrence
P(Xi > X j |Yi > Yj ) for any pair of calls i, j.

4.2 Learning Process
The primary goal of the learning process is to populate the Ground-Truth Profiles
Database that contains all the GTPs from device classes in a specific smart grid
network region. The execution of the learning process solves the first two architectural
challenges of our framework described in Section 2. The learning process classifies
the ground-truth devices into device classes and keeps the GTP database up-to-date.
For every different class of devices, the learning process performs two specific tasks:
(1) GTP data collection and (2) GTP data processing.

GTP Data Collection– this stage applies library interposition and ptrace to extract
the lists of system and function calls, respectively. These operations are performed
while the ground-truth devices execute regular smart grid substation tasks T . For
every different device class, specific tasks are repeatedly executed over time while the
framework hooks every iteration. As a result, for every iteration of T , the learning
process generates new lists of system and function calls from the ground-truth device.
In the end, the data collection process generates a set of system and function call lists.
Every list contains detailed information about the specific operations that the devices
executed at both the kernel and the user level in every different run of T .

GTP Data Processing– the data processing stage calculates the ILIs for every different
ground-truth device class. The concept of ILI introduced in Section 2 evaluates how
much deterministic the performance of a ground-truth device is over time. The more
deterministic, the higher the ILI value and the more suitable the ground-truth device
is to obtain its GTP. In total, the framework calculates two different values of ILIs, one
from the set of system call lists and one from the set of function call lists, respectively.
To successfully calculate the ILIs, the framework assigns a different weight δi to every
different type of system or function call in the order that they appear. The assignment
of δi weights constitutes another configurable feature of our framework. This can be
done randomly (the weights are considered normally distributed for simple processes
where the different system or function calls have the same level of impact on the
completion of the task T ) or by following a specific assignment criterion (adaptive
assignment). The adaptive assignment depends on the importance of the specific calls
and the type of application that is being evaluated. As a result of the assignment step,
the framework generates a random variable R that takes values between δmin and
δmax . This variable describes the behavior of O for every different system or function
call list. Finally, the framework calculates the ILIs using the Equation 4. In the end, the
ILI values are compared against a configurable threshold σ . Initially, the framework
selects an initial value for the threshold based on the device class, and then it continues
adjusting this value until the average performance reaches the desired target value
for that specific class. If both ILI values are above σ , the GTP is accepted and stored
in the database.

14

Equation 11 represents the general format of the GTP used in our work. The final
profile contains information about the device class (DeC), the entire set of system and
function call lists (SCL), and the threshold σ . At the end of the learning process, the
Ground-Truth Profiles Database contains all the possible signatures that characterize
the different device classes within a specific smart grid network region.

GT P = {DeC, SCL, σ },

(11)

4.3 Detection Process
The main goal of the detection process is to use the profile information stored in
the Ground-Truth Profiles Database to determine if the unknown devices are being
compromised or not. This process performs three main tasks:

(1) Data collection: this step follows almost the same sequence of operations
detailed in the learning process. However, this time, the framework obtains
the call lists from a single execution of T on the unknown devices from the
smart grid networks. No T task is fixed for computing purposes nor is repeated
over time.

(2) Data processing: constitutes the core of the detection process. In this step,
the framework combines three different detection mechanisms to detect com-
promised devices. The application of every detection approach is decided
on-demand, which has a positive impact on reducing the total overhead intro-
duced by our framework.

(3) Decision: finally, the decision algorithm processes the results from data collec-
tion and processing to decide if the unknown device is genuine or compro-
mised.

In the following, we provide details about the three detection mechanisms.

4.3.1 Detection mechanisms. Our framework implements three different detection
mechanisms. To utilize computational resources efficiently, the detection mechanisms
are applied orderly on-demand. That means, our framework utilizes each detection
approach in an ordered fashion, and it always uses the best effort to make a final
decision by applying the minimum number of detection steps.

System and Function call list comparison– The simplest detection approach directly
compares the SCL from the GTP to the system and function call lists extracted from
the unknown device. The comparison schema considers the type and amount of
system and function calls in both GTP and the newly extracted lists. This mechanism
is implemented, as shown in Equation 12. Specifically, the comparison approach
generates a call vector that contains the total number of different calls extracted from
the unknown device of class c and normalized against the term GT P(c; SCL). Equation
12 details this process:

call vector = {

unkc0
GT PSC L0

,

unkc1
GT PSC L1

, ...,

unkcn
GT PSC Ln

},

(12)

where the term unkc0 refers to the amount of system or function calls of type 0
extracted from the unknown device and the term GT PSC L0 refers to the amount of
system or function calls of type 0 extracted from the GTP of the same device class. As

15

inferred from Equation 12, call vector’s items of value 0 represent types of calls that
are present in the GTP SCL but not in the lists of calls acquired from the unknown
device. On the contrary, call vector’s items of value ∞, represent calls extracted from
the unknown device, but that cannot be found in the corresponding GTP. In general,
the execution of this first detection approach is very light in terms of computing
resources.

Index of Correlation Simple– A second detection mechanism calculates the statistical
correlation between call lists from the unknown device and the GTP. In this case, in
addition to the type and amount of calls, the framework considers the order in which
these calls are being triggered. The result from calculating such statistical correlation
is known as Index of Correlation simple (IOC-simple). IOC-simple is similar to the
ILI value obtained during the learning process. The main difference between both is
that IOC-simple first determines the statistical correlation between call lists from the
unknown device and the corresponding GTP class. Here, an assignment criterion is
also used to convert calls into specific δi values.

IOC − simpleOGT P ,Ounk

=

(cid:205) oGT Pounk − noGT Pounk
nsoGT P sounk

,

(13)

where oGT P represents the set of individual calls in the GTP and ounk represents the
set of individual calls extracted from the unknown device.

Index of Correlation Advanced– As mentioned in Section 2, one should not expect
smart grid devices to perform operations in a completely deterministic pattern. This
limitation exposes the third architectural challenge of our framework (see Section 2)
since legitimate random operations can be mistaken as compromised behavior. To
overcome this constraint, we further apply a more advanced IOC calculation (IOC-
advanced). In IOC-advanced, our framework combines the values from Oiu nk to
smaller in size
Oi+hu nk in Ounk . This operation results in a new random vector O (cid:48)
and with a lower random component. The index h represents the number of individual
calls from the original list that are combined to create the new set O (cid:48)
. This index
value h is proportional to the amount of randomness that one intends to remove from
the original Ounk and constitutes another configurable parameter in our framework.

unk

unk

ALGORITHM 1: Steps for the detection and decision processes.
1: compr omised ← 0
2: U N K (DeCunk, SC Lunk ) ← unknown device profile
3: GT P (DeCдt p, SC L, σ ) ← GTPs from Database

Detection:

4: if Exists DeCдt p & DeCunk == DeCдt p then
5:
6: end if

Calculate I OC

Decision:

7: if I OC < β then
8:
9: end if

compr omised ← 1

16

4.4 Decision Process
The final step of our framework is the decision process. In this step, our framework
compares results from the three detection mechanisms against a threshold β to decide
if the unknown smart grid device is compromised or not. The value of β depends
on the device class, and it is always a function of the threshold σ determined during
the training process and stored in the GTP. The relationship between σ and β values
depends on the targeted accuracy performance for every device class. In general,
for devices with a higher deterministic behavioral pattern, a higher value of β is
recommended. This design approach reduces the chances of false negatives during the
decision process. On the other hand, for devices with lower deterministic behavior,
a lower value of β may be sufficient to reduce false negatives. Finally, note that this
decision threshold is also configurable. The initial value of β for every device class can
be adjusted to an optimal in real-time and while the framework monitors the devices
in the field. In the next section, we analyze practical values of β for different types of
device classes.

Finally, Algorithm 1 details the detection-decision process of the proposed frame-
work. In lines 1, 2, and 3 the variables compromised, U N K, and GT P are initialized
with 0, the profile of the unknown device, and all the signatures from the database,
respectively. Then, if a signature of the unknown device’s class exists (Line 4), the
values IOC (simple and advanced) are calculated in Line 5. Finally, if the value of IOC
is lower than the threshold β, the device is decided as compromised.

5 PERFORMANCE ANALYSIS AND DISCUSSION
In this section, we analyze the performance of the proposed framework. In all the cases,
we obtain the results after averaging 30 different runs of all the covered scenarios.
The scenarios include six different types of attackers as a result of the combination of
three different threats and two different types of devices based on their computational
resources, as described in Section 2. Also, we assume that the devices are correctly
grouped based on their type. Moreover, we measure the accuracy of our framework
with accuracy, precision, recall, and specificity metrics. Finally, we evaluate the
performance of the proposed framework in terms of its overhead (e.g., CPU utilization,
memory usage, and execution time).

5.1 Evaluation methodology with a realistic testbed
Our framework considers a realistic scenario from a smart grid substation. The
testbed’s configuration includes a publisher-subscriber two-way communications
configuration which sends and receives IEC61850-compliant GOOSE messages [10].
For this purpose, we utilize an open-source version of IEC61850 [59] protocol running
on Linux-based systems. Our resource-limited devices (i.e., GOOSE publishers) run
on a Raspberry Pi 2B, using Advanced RISC Machine (ARM) 32 bits architecture with
limited memory and CPU. On the other hand, the resource-rich devices (i.e., GOOSE
subscribers) run on a Linux Ubuntu 14.04 system with a more powerful CPU and
higher memory configuration. Finally, we utilize two different hooking techniques:
ptrace (that performs function call tracing) and library interposition (that performs
system call tracing). In our configuration, the publishers open the communication
session and wait for the subscribers to connect. Once the devices create and open

17

the communication sockets, the publishers start sending GOOSE messages to the
subscribers every one second for a total time interval t of 60 seconds. After the t
seconds, the devices close their communication channels. For every compromised
device, the malicious threat is active n times during the communication sessions
as described in the adversary model (see Section 3). Finally, as detailed in Table 1,
compromised devices CD1, CD2, and CD3 correspond to resource-limited devices of
any class that have been compromised with Threats 1, 2, and 3 respectively (see Section
3) and compromised devices CD4, CD5, and CD6 correspond to resource-rich devices
of any class that have been compromised with Threats 1, 2, and 3, respectively. Despite
that the initial application of our testbed was intended to evaluate the performance of
the proposed framework in realistic scenarios, we believe that, due to its open-source
and configurable nature, it can also be used as a benchmark to effectively evaluate the
performance of other security tools applied to the smart grid.

5.2 Detection performance
In the following, we detail the performance of our framework after applying the three
detection mechanisms proposed in Section 4.

5.2.1

System and Function call lists comparison. Tables 2 and 3 summarize some of
the system and function calls captured from the resource-limited and the resource-rich
devices, respectively. Columns Genuine and CDi (i: 1 to 6) in both tables list the
average rate of the system and function calls normalized against the GTP for genuine
and compromised devices, respectively.

Table 2. Normalized rate of the system and function calls captured after using our framework to
detect compromised resource-limited devices (e.g., RTUs, PLCs): calls due to malicious activities
are grayed.

Call Tracing Technique

ptrace

Interposition

Type of Call
br k
clone
close
f st at 64
lseek
mmap2
mpr ot ect
munmap
open
r t siдpr ocmask
r t siдact ion
close
f r ee
malloc
memcpy
memset
mmap
mpr ot ect
pthr ead cr eat e
sendto
siдnal
socket
usl eep

Genuine
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1

C D1
∼1
12.5
∼1
∼1
∼1
2.4
2.8
∼1
∼1
8.7
∼1
∼1
3.2
3.3
∼1
∼1
12.5
12.5
12.5
4.3
24
∼1
3.5

C D2
6.7
∼1
∼1
∼1
∼1
4.4
1.1
2
∼1
0.3
3
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1

C D3
∼1
∼1
3.2
8.8
∼1
2.4
1
13
5
0.3
3
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1

Values greater than ∼1 (marked in gray) in columns CD1 to CD3 and CD4 to CD6
represents extra system or function call activity due to the presence of malicious operations.
That is, extra call activity reveals the presence of malicious activity in the devices. One

18

Table 3. Normalized rate of system and function calls captured after using our framework to
detect compromised resource-rich devices (e.g., PMUs, IEDs): calls due to malicious activities
are grayed.

Call Tracing Technique

ptrace

Interposition

Type of Call
br k
clone
close
f st at
mmap
mpr ot ect
munmap
open
r t siдact ion
f r ee
malloc
memcpy
memset
mmap
mpr ot ect
pt hr ead cr eat e
pt hr eadd et ach
r ecv f r om
siдnal
socket
usl eep

Genuine
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1

C D4
∼1
23
6.5
12
4.1
3.4
23
6.5
8.3
15.6
15.6
17.8
24
24
24
24
24
15.7
24
24
15.7

C D5
8.3
∼1
6.8
12.5
6.64
∼1
26
6.75
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1

C D6
∼1
∼1
6.75
12.25
2.6
∼1
24
6.8
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1
∼1

can notice that, by using ptrace, our framework identified all cases of compromised
devices. On the other hand, in the case of library interposition, only CD1 and CD4
were properly detected. Also, the reader can notice that in the case of genuine devices,
the normalized rate values of system and function calls are very close to 1 in all the
cases.

(a)

(b)

Fig. 4. Index of Correlation between GTP and unknown devices: (a) Resource-rich and resource-
limited devices after applying our IOC-simple and (b) IOC-advanced results comparison be-
tween genuine and compromised resource-limited devices (using system call lists from library
interposition only).

5.2.2

IOC-simple. The first detection approach could not identify Threats 2 and
3 when the framework utilized library interposition. To overcome this limitation,

19

R-R ptraceR-L ptraceR-R interpositionR-L interposition00.10.20.30.40.50.60.70.80.91Index of Correlation (IOC)Genuine DevicesThreat1Threat2Threat3IOC strength thresholdIndex of correlation for genuine devices after applying IOC-simpleR-R: Resource-rich deviceR-L: Resource-limited deviceR-L interposition devicesneeding IOC-advancedIOC - simpleIOC - advanced00.10.20.30.40.50.60.7Index of Correlation (IOC)Genuine DevicesThreat1Threat2Threat3IOC strenght thresholdImproved results after applying IOC-advancedGenuine devices decided as"compromised" after applyingIOC-simplewe applied our second detection mechanism, IOC-simple. As explained in Section
4, to utilize the framework efficiently, the framework applies the different detection
approaches in an ordered fashion as needed.

Figure 4(a) shows the results after applying IOC-simple to system and function call
lists from GTP and compromised devices. In this figure, R-R refers to resource-rich
devices, and R-L refers to resource-limited devices.

The reader can observe that, by using ptrace, we obtain low IOC values (in the range
of 0.15 to 0.35) between function call lists from GTP and compromised devices. By
setting the correlation strength threshold to 0.6 (moderate to high correlation [71]),
our framework detects all the cases of the compromised devices. For the case of library
interposition, the framework performs very well for resource-rich compromised de-
vices. However, for resource-limited compromised devices IOC-simple under-performs
when the framework applies library interposition. In this particular case, IOC-simple
from genuine devices falls under the threshold, triggering false positive results. We
relate these results to higher random activity in the resource-limited compromised
devices’ kernel [16].

5.2.3

IOC-advanced. To overcome the previous limitation, we can apply the IOC-
advanced technique. By using this approach, our framework can obtain new call lists
with more deterministic behavior from the resource-limited devices and enhance the
statistical correlation between these type of devices and their corresponding GTP. In
Figure 4(b), the reader can observe how IOC values from resource-limited genuine
devices overcome the threshold mark while the compromised devices are still under
the borderline. There exists a trade-off between the amount of randomness that can
be removed from system call lists without impacting the decision process. If the value
of h is too significant, critical behavioral information can also be potentially removed
from the call lists, limiting the performance of the decision algorithm in cases where
tasks T are too simple.

5.3 Performance Metrics
To further measure the efficacy of our detection methods, we calculate the standard
performance metrics of accuracy, recall, precision, and specificity. These metrics are
defined in Equations 14, 15, 16, and 17:

ACC =

REC =

,

(TP + TN )
(TP + TN + FP + FN )
TP
(TP + FN )
TP
(TP + FP )
TN
(TN + FP )

.

,

PREC =

Spec =

,

(14)

(15)

(16)

(17)

where TP stands for true positive or the case where a compromised device is decided
as compromised; TN stands for true negative or the case where a genuine device is
decided as genuine; FP stands for false positive or the case where a genuine device is
decided as compromised; and finally FN stands for false negative or the case where
a compromised device is decided as genuine. First, we evaluate the performance of

20

our framework with IOC-simple. Then, the improved results are shown after applying
IOC-advanced.

(a) Accuracy

(b) Recall

Fig. 5. Figures compare the performance of the IOC-simple algorithm on six different types of
compromised devices after using library interposition and ptrace: (a) Accuracy, (b) Recall.

In Figure 5(a), we evaluate the overall accuracy of our detection techniques over the
six different types of compromised devices. Since accuracy comprisesTP andTN results,
this metric describes how well the framework can positively decide between genuine
and compromised devices without errors.
In general, for ptrace, our framework
achieves an excellent accuracy performance (between 0.95 to 1) for all types of devices.
However, this analysis also reveals the performance limitations of the framework for
detecting resource-limited compromised devices in the case of library interposition
(top-right case in Figure 5(a)). Here, the framework achieves a low accuracy value of
0.5.

In Figure 5(b), we evaluate the overall recall performance of the framework. In
this case, recall metrics show how well our framework detects the six different types
of compromised devices. Based on these results, the reader can observe that the
framework achieves the maximum recall (maximum value of TP s) for the selected
threshold β = 0.6. In the case of resource-rich devices, recall performance was high
for all the threshold values. On the other hand, for resource-limited devices, we can
notice low recall values for Threats 2 and 3 when the threshold values are under 0.6
for the case of library interposition.

Figure 6(a) depicts the precision evaluation. Precision values represent the statistical
relationship between the number of successfully detected compromised devices against
the number of times that the framework fails to correctly decide a device as genuine. By
looking at the precision results, one can observe that our framework under-performs
in the case of library interposition for resource-limited devices.

Finally, we utilize specificity metrics to evaluate the true negative rate, that is, how
effectively our framework discriminates genuine devices. In Figure 6(b) (top right), one
can observe that, for the case of resource-limited devices with library interposition,
the framework achieves very low specificity. These results limit the application of

21

0.40.50.60.7IOC Strength Threshold00.20.40.60.81AccuracyInterposition on R-R devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81AccuracyInterposition on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81Accuracyptrace on R-R devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81Accuracyptrace on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81RecallInterposition on R-R devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81RecallInterposition on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81Recallptrace on R-R devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81Recallptrace on R-L devicesThreat1Threat2Threat3(a) Precision

(b) Specificity

Fig. 6. Figures compare the performance of the IOC-simple algorithm on six different types of
compromised devices after using library interposition and ptrace: (a) Precision, (b) Specificity.

IOC-simple to decide on this particular type of devices. Specificity value of 0 at β
threshold between 0.45 and 0.7 demonstrates that a device was not correctly decided
as genuine in this case. However, in all the remaining three cases, the framework
performs very well.

Fig. 7. Performance metrics after applying IOC-advanced for the detection of resource-limited
devices when library interposition is utilized: (a) Accuracy, (b) Recall, (c) Precision, and (d)
Specificity.

By analyzing the results in Figures 5 and 6, one can compare the performance of
the proposed framework on resource-limited and resource-rich devices for the two
hooking techniques applied. Most evaluation metrics diminish their performance
when the framework applies the IOC-simple algorithm to detect resource-limited

22

0.40.50.60.7IOC Strength Threshold00.20.40.60.81PresicionInterposition on R-R devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81PresicionInterposition on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81Precisionptrace on R-R devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81Precisionptrace on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81SpecificityInterposition on R-R devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81SpecificityInterposition on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81Specificityptrace on R-R devicesThreat1Threat2Threat30.40.50.60.7IOC Strength Threshold00.20.40.60.81Specificityptrace on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC-advanced Strength Threshold00.20.40.60.81AccuracyInterposition on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC-advanced Strength Threshold00.20.40.60.81PrecisionInterposition on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC-advanced Strength Threshold00.20.40.60.81RecallInterposition on R-L devicesThreat1Threat2Threat30.40.50.60.7IOC-advanced Strength Threshold00.20.40.60.81SpecificityInterposition on R-L devicesThreat1Threat2Threat3(a)(b)(d)(c)Best accuracy value for all threatsMetric values drop after configurable threshold takes values over IOCdevices using library interposition. These results reflect on the fact that for this
type of devices, a more robust detection mechanism is necessary. To improve these
results, we utilize the framework with the IOC-advanced algorithm. Figure 7 depicts
the improvements in all the performance metrics after applying IOC-advanced for
compromised resource-limited devices with library interposition. In this figure, one
can observe that the correlation threshold of 0.6 provided the best results overall for
this particular testbed. Also, the framework obtained significant improvements in
accuracy and precision if compared with the case of IOC-simple (accuracy improved
from 0.5 to 0.96, and precision improved from 0.5 to 0.93). Finally, recall metrics
retained its high performance at the selected threshold value (recall = 1).

5.4 System overhead
We expect our framework to perform with high accuracy and scalability without
introducing too much overhead. Table 4 summarizes the average of system overhead
on resource-limited and resource-rich devices. The metrics RT , ST , UT , Mem, and
CPU correspond to the values of real-time, system-time, user-time, memory, and CPU,
respectively. In this table, NF (No Framework) represents the case where devices
were evaluated without applying our the proposed framework, and WF (With Frame-
work) represents the cases where we evaluated the performance while applying the
framework. Additionally, LI represents the cases where we applied library interposi-
tion. Finally, R-R refers to resource-rich devices, and R-L refers to resource-limited
devices. Results in Table 4 demonstrate that the utilization of the detection framework
does not introduce significant overhead on the devices. Particularly, in the case of
resource-limited devices, the framework utilizes 0.03% more of memory (out of the
total memory available in the devices) and 1.9% more of the CPU. For resource-rich
devices, the framework utilizes 0.001% more of memory (out of the total memory
available on the device) and an almost negligible amount of CPU. In summary, for
both resource-limited and resource-rich devices, library interposition introduces the
most overhead to the system. However, this overhead is considerably low if compared
with similar applications proposed in the literature [25, 76].

Table 4. Average system overhead on resource-rich and resource-limited devices after using
the framework.

Metrics

RT (s)
ST (s)
UT (s)
Mem (KB)
CPU (%)

NF

value
R-R
60.00
0.49
0.31
1967.5
1

value
R-L
60.11
3.60
0.49
1827.5
6.02

WF

ptrace (%)

LI (%)

R-R
0.05
8.1
16.1
1.1e-3
0

R-L
3.8
3.6
0.31
4.3e-5
1.9

R-R
0.01
10.2
6.4
3.0e-2
0

R-L
0.1
5.5
2.0
1.0e-3
1

To further study the impact of our framework, we analyzed this overhead consid-
ering a real resource-limited smart grid device. In Table 5, we summarize the main
specifications of Remote Terminal Unit RT2020. Looking at Table 5, we can conclude
that for the worst case of resource utilization (library interposition on a resource-
limited device), the increment in execution time because of the use of our framework
would only represent up to 2.3 cycle times. Additionally, our framework would only
take 0.1% of the total memory of a real resource-limited smart grid device.

23

Table 5. Specification values for Remote Terminal Unit RT2020 [33].

Item
Processor
Dynamic Memory (RAM)
Program Memory (Flash)
Nonvolatile Memory
Real Time Clock Resolution
Execution Cycle Time

Specification Values
Dual Core ARM A9 667 MHz
128 MB
4 MB
4 Mb
1 ms
≤ 100 ms

5.5 Benefits and Features
There are several benefits associated with the design of our framework:

(1) Excellent detection rate: the proposed framework demonstrated an excellent
rate for the detection of compromised smart grid devices by combining three
different detection methods: system and function call comparison, IOC-simple,
and IOC-advanced.

(2) Minimum overhead: the proposed framework does not represent significant

overhead on the use of computing resources.

(3) Specific vs. generic solution: the proposed framework is designed to address the
specific problem of compromised smart grid device detection. The adversary
and system model proposed in this work follow the security requirements and
architecture characteristics of the smart grid. However, the approaches pro-
posed here for the detection of compromised smart grid devices are perfectly
suitable for other CPS security domains outside the smart grid domain.
(4) Comprehensive adversary model: the adversary model used in this work con-
siders both resource-limited and resource-rich compromised devices. Also, it
combines three different threats affecting the smart grid.

(5) Compromised device diversity: Our framework is suitable for a great range of
different compromised devices. The design of our system-level framework
makes it also suitable for detecting hardware counterfeiting [1, 12, 27] as
observed from the system level. System and function call comparison and sta-
tistical techniques are powerful tools capable of detecting changes in hardware
and system configuration. This makes our framework an appealing solution
to monitor and detect a wide range of different types of compromised devices.

6 RELATED WORK
In this section, we present the related work. There are several works studying security
challenges in the smart grid [49, 74, 80, 83]. In general, cyberattacks against smart grid
are categorized into four different groups: denial of services (DoS) attacks, malicious
data injection attacks, traffic analysis attacks, and high-level application attacks [83].
In [21], [84], [3], and [9], the authors provide several examples of DoS attacks impacting
different parts of the smart grid architecture. Most of these attacks are executed from
compromised hosts, servers, and devices inside the smart grid.

Malicious data injection attacks are analyzed in [21, 48, 73]. One compelling case is
studied in [90]. In this paper, the authors analyze four different types of attacks in the
state estimation process and examine the least-effort data injection attack to find the
optimal attack vector.

24

In the case of traffic analysis attacks, authors in [77] describe how an attacker can
monitor and intercept the frequency and timing of transmitted messages to deduce
information and user’s behavior. In [62], high-level application attacks are described
as the way an attacker can disrupt the essential functions of a power system (i.e., state
estimation and power flow measurement).

In general, these are all useful studies, but none of them directly covers the threat of
compromised devices in the smart grid. Additionally, in cases where the attackers rely
on the use and control of compromised smart grid devices to perform the attacks, only
one type of smart grid threat was considered at a time. In this work, our adversary
model considers a combination of 3 different threats impacting the smart grid combined
with 2 different device resource availability.

Smart grid compromised device detection: In general, the topic of compromised
devices has not been extensively studied in the literature. In most cases, researchers
focus on proposing anomaly detection mechanisms [51] for different types of attacks
in the smart grid [24, 30, 66, 78], without particularizing on the attack sources (e.g.,
compromised devices). In a few cases, however, the behavior of the smart grid device
is considered. In [88], the authors study the minimal number of compromised sensor
that can be used to manipulate a given number of smart grid states effectively. Further,
they consider the optimal PMU placement to defend against this type of data integrity
attacks. Some works have been proposed in other CPS and industrial environments.
In [61], the authors propose a vector-valued model-based cumulative sum procedure
to identify compromised sensors in CPS. Even though this work achieves promising
results in simulation environments, its threat model only considers false data injection
attacks. Also, no results are shown on the overhead introduced to the CPS devices,
essential to consider suitable security applications for real-time critical infrastructures
like the smart grid. In a different approach, integrity measurement and attestation
systems have been proposed to evaluate the integrity of applications in CPS and the
Internet of Things (IoT) devices [11, 15, 19, 20, 57, 67]. Also, the authors in [82] apply
attestation approaches to detect comprised devices in the CPS. In this work, however,
they utilize stimulant-response mechanisms to detect compromised devices based on
their specific reaction to controlled inputs, which can also be impractical for the smart
grid and results can depend on several undesired networks’ and physical channels’
dynamics. Other relevant works propose similar attestation approaches [14, 55] to
detect attacks in CPS. However, these works focus on building models of the entire
CPS network instead of focusing on individual devices, which impacts the overhead
and the general performance of the proposed solutions. Finally, most of these works
apply to Wireless Sensor Networks (WSN) and are not directly applicable to the smart
grid domain. Finally, in more general approaches, some works proposes the use of
data collected from devices to detect malicious operations or specific behavior [2, 5].
Intelligent, secure packaging, outbound beaconing, and better tracking systems are
some of the countermeasures that are being proposed to prevent the introduction of
compromised devices in the smart grid supply chain [18, 58, 85]. However, skilled
attackers could have remote access to legitimate devices (e.g., RTUs, PMUs, and IEDs)
outside the supply chain and create opportunities for tampering smart grid devices in
the field.

25

Function and system call tracing techniques for security applications: function and sys-
tem call tracing techniques constitute a powerful method for regulating and monitoring
applications behaviour [7, 8, 47], so they have been largely used in security applica-
tions [26]. System and function call tracing techniques can be found in applications
like intrusion detection and confinement [43], binary detection of OS functions [34],
sandboxing [50], and software portable packages [28]. Specifically, in [22], the authors
use system call tracing to implement intrusion detection systems (IDS). Also, in [25]
and [60], the authors proposed anomaly detection mechanism based on information
obtained from system calls behavior analysis. In these cases, the implementation of
the security tools resulted too heavy in terms of system overhead. One similar appli-
cation with improved system overhead can be found in [76]. In this case, the proposed
solution is required to run continuously and serves the purpose of complementing
antivirus software.
Difference from existing work: Our framework is different from other discussed
solutions which, in most cases, focus on specific threats to the smart grid instead of
considering multiple types of threats acting on different type of devices (e.g., resource-rich
and resource-limited). As discussed, there are also cases where different approaches are
used for the detection of compromised devices and/or monitoring application behavior.
Only in a few of these cases, the solution is intended to be applied in the smart grid
domain. In addition, to succeed, these solutions need to monitor constantly-changing
environments like network traffic and computational systems or need to challenge the
devices with specific inputs to study their response, which constitutes a limitation in
terms of system overhead, resource utilization, and real-time analysis. Differently, our
framework has a simpler model and is lightweight in terms of system overhead while
providing excellent detection rate of the compromised smart grid devices while they
are performing typical real-time CPS operations. Also, we propose a configurable
framework for both the supply chain and the smart grid operation field which is
envisioned friendly and adaptive enough to be easily applied either within supply
chain testing scenarios and while the devices are performing real-time operations
inside the smart grid infrastructure. Finally, our work can also complement the existing
security mechanisms in the smart grid domain with its open-source and configurable
nature.

7 CONCLUSIONS
The smart grid vision depends on the secure and reliable two-way communications
between smart devices (e.g., IEDs, PLCs, PMUs). Nonetheless, compromised smart
grid devices constitute a serious threat to a healthy and secure distribution of data in
the grid. In this work, we designed a system-level configurable framework capable
of monitoring and detecting compromised smart grid devices. Our framework com-
bines system and function call tracing techniques (i.e., ptrace, library interposition),
signal processing, and statistical analysis (basic and advanced) to detect compromised
device behavior. To the best of our knowledge, this is the first work that utilizes
these techniques in detecting compromised devices in the smart grid. Moreover, we
evaluated the performance of our framework on six different types of compromised
devices, conforming to realistic smart grid scenarios. Such devices exchanged smart
grid GOOSE messages utilizing an open-source version of the IEC61850 protocol suite.

26

Specifically, we analyzed the efficacy of our framework under six different adversarial
settings affecting devices with different resource availability. Experimental results
demonstrated that our framework successfully detects different types of compromised
device behavior in a variety of different environments with high accuracy. Also, our
performance analysis reveals that the use of the proposed detection framework yield
minimal overhead on the smart grid devices’ computing resources.

8 ACKNOWLEDGMENT
This material is partially supported by the U.S. Department of Energy under Award
Number DE-OE0000779 and by the U.S. National Science Foundation under Award
Number NSF-1663051. Any opinions, findings, and conclusions or recommendations
expressed in this material are those of the authors and do not necessarily reflect the
views of the funding agencies.

REFERENCES
[1] A. Kanovsky, P. Spanik and M. Frivaldsky. 2015. Detection of electronic counterfeit components. In
2015 16th Int. Scientific Conf. on Electric Power Engineering (EPE). IEEE, Kouty nad Desnou, 701 – 705.
[2] H. Aksu, L. Babun, M. Conti, G. Tolomei, and A. S. Uluagac. 2018. Advertising in the IoT Era:
IEEE Communications Magazine 56, 11 (November 2018), 138–144. DOI:

Vision and Challenges.
https://doi.org/10.1109/MCOM.2017.1700871

[3] J. D. Ansilla, N. Vasudevan, J. JayachandraBensam, and J. D. Anunciya. 2015. Data security in Smart Grid
with hardware implementation against DoS attacks. In 2015 International Conference on Circuits, Power
and Computing Technologies [ICCPCT-2015]. 1–7. DOI:https://doi.org/10.1109/ICCPCT.2015.7159274
[4] Bjørn Egil Asbjørnslett. 2009. Assessing the Vulnerability of Supply Chains. Springer US, Boston, MA,

15–33. DOI:https://doi.org/10.1007/978-0-387-79934-6 2

[5] Leonardo Babun, Amit Kumar Sikder, Abbas Acar, and A. Selcuk Uluagac. 2018. IoTDots: A Digital
Forensics Framework for Smart Environments. CoRR abs/1809.00745 (2018). arXiv:1809.00745 http:
//arxiv.org/abs/1809.00745

[6] Babun, Leonardo (Miami, FL, US), Aksu, Hidayet (Miami, FL, US), Uluagac, Selcuk A. (Miami, FL,
US). 2018. Detection of counterfeit and compromised devices using system and function call tracing
techniques. (July 2018). http://www.freepatentsonline.com/10027697.html

[7] Babun, Leonardo (Miami, FL, US), Aksu, Hidayet (Miami, FL, US), Uluagac, Selcuk A. (Miami, FL, US).
2019. Method of resource-limited device and device class identification using system and function call
tracing techniques, performance, and statistical analysis. (March 2019). http://www.freepatentsonline.
com/10242193.html

[8] Reverend Bill Blunden. 2013. The Rookit arsenal: Escape and Evasion in the Dark Corners of the System

(2nd ed.). Cathleen Sether, Burlington, MA.

[9] N. Boumkheld, M. Ghogho, and M. El Koutbi. 2016. Intrusion detection system for the detection of
blackhole attacks in a smart grid. In 2016 4th International Symposium on Computational and Business
Intelligence (ISCBI). 108–111. DOI:https://doi.org/10.1109/ISCBI.2016.7743267

[10] C. Kriger, S. Behardien and J. Retonda-Modiya. 2013. A Detailed Analysis of the GOOSE Message
Structure in an IEC 61850 Standard-Based Substation Automation System. Int. Journal Comp. Comm.
8, 5 (Oct. 2013), 708–721.

[11] Z. Berkay Celik, Leonardo Babun, Amit Kumar Sikder, Hidayet Aksu, Gang Tan, Patrick McDaniel,
and A. Selcuk Uluagac. 2018. Sensitive Information Tracking in Commodity IoT. In 27th USENIX
Security Symposium (USENIX Security 18). USENIX Association, Baltimore, MD, 1687–1704. https:
//www.usenix.org/conference/usenixsecurity18/presentation/celik

[12] Ch. Wong and M. Wu. 2015. A study on PUF characteristics for counterfeit detection. In 2015 IEEE Int.

Conf. on Image Processing (ICIP). IEEE, Quebec City, QC, 1643 – 1647.

[13] Y. Chen, C. M. Poskitt, and J. Sun. 2018. Learning from Mutants: Using Code Mutation to Learn and
Monitor Invariants of a Cyber-Physical System. In 2018 IEEE Symposium on Security and Privacy (SP).
648–660. DOI:https://doi.org/10.1109/SP.2018.00016

27

[14] Y. Chen, C. M. Poskitt, and J. Sun. 2018. Learning from Mutants: Using Code Mutation to Learn and
Monitor Invariants of a Cyber-Physical System. In 2018 IEEE Symposium on Security and Privacy (SP).
648–660. DOI:https://doi.org/10.1109/SP.2018.00016

[15] J. Clemens, R. Pal, and B. Sherrell. 2018. Runtime State Verification on Resource-Constrained Platforms.
In MILCOM 2018 - 2018 IEEE Military Communications Conference (MILCOM). 1–6. DOI:https://doi.
org/10.1109/MILCOM.2018.8599862

[16] Henry Corrigan-Gibbs and Suman Jana. 2015. Recommendations for Randomness in the Operating
System or, How to Keep Evil Children out of Your Pool and Other Random Facts. In Proceedings of
the 15th USENIX Conference on Hot Topics in Operating Systems (HOTOS’15). USENIX Association,
Berkeley, CA, USA, 25–25. http://dl.acm.org/citation.cfm?id=2831090.2831115

[17] D. Formby, P. Srinivasan, A. Leonard, J. Rogers, R. Beyah. 2016. Who's in Control of Your Control

System? Device Fingerprinting for Cyber-Physical Systems. In NDSS, Feb.

[18] D. van Opstal, U.S. Resilience Project. 2012. Supply chain solutions for smart grid security: Building
on business best practices. (Sep 2012). http://usresilienceproject.org/wp-content/uploads/2014/09/
report-Supply Chain Solutions for Smart Grid Security.pdf

[19] Sikder, A. K., Babun, L., Aksu, H., and Uluagac, A. S. Aegis: A context-aware security framework

for smart home systems. arXiv preprint arXiv:1910.03750 (2019).

[20] Babun, L., Celik Z. B., McDaniel P., and Uluagac, A. S. Real-time Analysis of Privacy-(un)aware

IoT Applications. arXiv preprint arXiv:1911.10461 (2019).

[21] Y. Deng and S. Shukla. 2012. Vulnerabilities and countermeasures - A survey on the cyber security
issues in the transmission subsystem of a smart grid. Journal of Cyber Security and Mobility 1 (2012),
251–276. Issue 4.

[22] E. Eskin, W. Lee and S. J, Stolfo. 2001. Modeling System Calls for Intrusion Detection with Dynamic
Window Sizes. In DARPA Information Survivability Conference & Exposition II, 2001. DISCEX ’01. IEEE,
Anaheim, CA, 165–171.

[23] European Network and Information Security Agency (enisa). 2012.

Annex II: Security Aspects of the Smart Grid.
critical-information-infrastructures-and-services/smart-grids/smart-grids-and-smart-metering/
ENISA Annex%20II%20-%20Security%20Aspects%20of%20Smart%20Grid.pdf

(2012).

Smart Grid Security.
https://www.enisa.europa.eu/topics/

[24] A. Farraj, E. Hammad, A. A. Daoud, and D. Kundur. 2016. A Game-Theoretic Analysis of Cyber
Switching Attacks and Mitigation in Smart Grid Systems. IEEE Transactions on Smart Grid 7, 4 (July
2016), 1846–1855. DOI:https://doi.org/10.1109/TSG.2015.2440095

[25] Henry Hanping Feng, Oleg M. Kolesnikov, Prahlad Fogla, Wenke Lee, and Weibo Gong. 2003. Anomaly
Detection Using Call Stack Information. In Proceedings of the 2003 IEEE Symposium on Security and
Privacy (SP ’03). IEEE Computer Society, Washington, DC, USA, 62–. http://dl.acm.org/citation.cfm?
id=829515.830554

[26] Tal Garfinkel. 2003. Traps and Pitfalls: Practical Problems in System Call Interposition Based Security

Tools. In In Proc. Network and Distributed Systems Security Symposium. 163–176.

[27] Ujjwal Guin, Domenic Forte, and Mohammad Tehranipoor. 2013. Anti-counterfeit Techniques: From
Design to Resign. In Proceedings of the 2013 14th International Workshop on Microprocessor Test and
Verification. IEEE Computer Society, Washington, DC, USA, 89–94. http://dx.doi.org/10.1109/MTV.
2013.28

[28] P. J. Guo and D. Engler. 2011. CDE: Using System Call Interposition to Automatically Create Portable
Software Packages. In Proceedings of the 2011 USENIX Conference on USENIX Annual Technical Confer-
ence (USENIXATC’11). USENIX Association, Berkeley, CA, USA, 21–21. http://dl.acm.org/citation.cfm?
id=2002181.2002202

[29] Aaron Hansen, Jason Staggs, and Sujeet Shenoi. 2017. Security analysis of an advanced metering
International Journal of Critical Infrastructure Protection 18 (2017), 3 – 19. http:

infrastructure.
//www.sciencedirect.com/science/article/pii/S1874548217300495

[30] J. Hao, R. J. Piechocki, D. Kaleshi, W. H. Chin, and Z. Fan. 2014. Optimal malicious attack con-
struction and robust detection in Smart Grid cyber security analysis. In 2014 IEEE International
Conference on Smart Grid Communications (SmartGridComm). 836–841. DOI:https://doi.org/10.1109/
SmartGridComm.2014.7007752

[31] D. He, S. Chan, and M. Guizani. 2017. Cyber Security Analysis and Protection of Wireless Sensor
Networks for Smart Grid Monitoring. IEEE Wireless Communications 24, 6 (Dec 2017), 98–103. DOI:

28

https://doi.org/10.1109/MWC.2017.1600283WC

[32] D. He, S. Chan, and M. Guizani. 2017. Win-Win Security Approaches for Smart Grid Communications
Networks. IEEE Network 31, 6 (November 2017), 122–128. DOI:https://doi.org/10.1109/MNET.2017.
1700065

[33] Honeywell. 2014. RTU2020 Remote Terminal Unit Specifications.

(Oct 2014). https://www.

honeywellprocess.com/library/marketing/tech-specs/SC03-300-101-RTU-2020.pdf

[34] G. Hunt and D. Brubacher. 1999. Detours: Binary Interception of Win32 Functions. In Proceedings of
the 3rd Conference on USENIX Windows NT Symposium - Volume 3 (WINSYM’99). USENIX Association,
Berkeley, CA, USA, 14–14. http://dl.acm.org/citation.cfm?id=1268427.1268441

[35] IEC 61850-1. 2003. Communication networks and systems in substations Introduction and overview.

(2003). https://webstore.iec.ch/p-preview/info iec61850-1%7Bed1.0%7Den.pdf

[36] IEC 61850-7-2. 2003. Communication networks and systems in substations - Basic communication
structure for substation and feeder equipment Abstract Communication Service Interface (ACSI).
(2003). https://webstore.iec.ch/p-preview/info iec61850-7-2%7Bed1.0%7Den.pdf

[37] IEC 61850-8-1. 2003. Communication networks and systems in substations - Specific Communication
Service Mapping (SCSM) Mappings to MMS (ISO 9506-1 and ISO 9506-2) and to ISO/IEC 8802-3. (2003).
https://webstore.iec.ch/p-preview/info iec61850-8-1%7Bed1.0%7Den.pdf

[38] IEC61850-7-1. 2003. Communication networks and systems for power utility automation - Part 7-1:
Basic communication structure - Principles and models. (2003). https://webstore.iec.ch/publication/
6014

[39] D. M. E. Ingram, P. Schaub, R. R. Taylor, and D. A. Campbell. 2013. Performance Analysis of IEC 61850
Sampled Value Process Bus Networks. IEEE Transactions on Industrial Informatics 9, 3 (Aug 2013),
1445–1454. DOI:https://doi.org/10.1109/TII.2012.2228874

[40] Interos Solutions, Inc. 2018. Supply Chain Vulnerabilities from China in U.S. Federal Information
and Communications Technology. (2018). https://www.uscc.gov/sites/default/files/Research/Interos
Supply%20Chain%20Vulnerabilities%20from%20China%20in%20U.S.%20Federal%20ICT final.pdf
[41] J. Ellperin and A. Entous. 2016. Russian operation hacked a Vermont utility, showing risk
(2016). https://www.washingtonpost.com/world/

to U.S. electrical grid security, officials say.
national-security/russian-hackers-penetrated-us-electricity-grid-through-a-utility-in-vermont/
2016/12/30/8fc90cc4-ceec-11e6-b8a2-8c2a61b0436f story.html?utm term=.7445133366ca

[42] P. Jafary, S. Repo, J. Sepp¨al¨a, and H. Koivisto. 2017. Security and reliability analysis of a use case
in smart grid substation automation systems. In 2017 IEEE International Conference on Industrial
Technology (ICIT). 615–620. DOI:https://doi.org/10.1109/ICIT.2017.7915429

[43] K. Jain and R. Sekar. 1999. User-Level Infrastructure for System Call Interposition: A Platform for
Intrusion Detection and Confinement. In In Proc. Network and Distributed Systems Security Symposium.
[44] K. Huang, J. M. Carulli, and Y. Makris. 2013. Counterfeit electronics: A rising threat in the semicon-

ductor manufacturing industry. In ITC. IEEE Computer Society. IEEE, 1–4.

[45] E. Kang, S. Adepu, D. Jackson, and A. P. Mathur. 2016. Model-Based Security Analysis of a Water
Treatment System. In 2016 IEEE/ACM 2nd International Workshop on Software Engineering for Smart
Cyber-Physical Systems (SEsCPS). 22–28. DOI:https://doi.org/10.1109/SEsCPS.2016.012

[46] Kaspersky. 2016. BlackEnergy APT Attacks in Ukraine.

(2016). https://usa.kaspersky.com/

resource-center/threats/blackenergy

[47] C. Kaygusuz, L. Babun, H. Aksu, and A. S. Uluagac. 2018. Detection of Compromised Smart Grid
Devices with Machine Learning and Convolution Techniques. In 2018 IEEE International Conference
on Communications (ICC). 1–6. DOI:https://doi.org/10.1109/ICC.2018.8423022

[48] K. Khanna, B. K. Panigrahi, and A. Joshi. 2016. Feasibility and mitigation of false data injection
attacks in smart grid. In 2016 IEEE 6th International Conference on Power Systems (ICPS). 1–6. DOI:
https://doi.org/10.1109/ICPES.2016.7584204

[49] H. Khurana, M. Hadley, N. Lu, and D. A. Frincke. 2010. Smart-grid security issues. IEEE Security

Privacy 8, 1 (Jan 2010), 81–85. DOI:https://doi.org/10.1109/MSP.2010.49

[50] T. Kim and N. Zeldovich. 2013. Practical and Effective Sandboxing for Non-root Users. In Proceedings
of the 2013 USENIX Conference on Annual Technical Conference (USENIX ATC’13). USENIX Association,
Berkeley, CA, USA, 139–144. http://dl.acm.org/citation.cfm?id=2535461.2535478

[51] A. M. Kosek. 2016. Contextual anomaly detection for cyber-physical security in Smart Grids based on
an artificial neural network model. In 2016 Joint Workshop on Cyber- Physical Security and Resilience

29

in Smart Grids (CPSR-SG). 1–6. DOI:https://doi.org/10.1109/CPSRSG.2016.7684103

[52] D. Kushner. 2013. The real story of stuxnet. IEEE Spectrum 50, 3 (March 2013), 48–53. DOI:https:

//doi.org/10.1109/MSPEC.2013.6471059

[53] L. Babun, H. Aksu and A. S. Uluagac. 2017. Identifying Counterfeit Smart Grid Devices: A Lightweight
System Level Framework. In Proceedings of the IEEE ICC Intern. Conf. on Communications. IEEE, Paris,
France, 7.

[54] L. D. Lago, O. Ferrante, R. Passerone, and A. Ferrari. 2018. Dependability Assessment of SOA-Based
CPS With Contracts and Model-Based Fault Injection. IEEE Transactions on Industrial Informatics 14, 1
(Jan 2018), 360–369. DOI:https://doi.org/10.1109/TII.2017.2689337

[55] M. LeMay, G. Gross, C. A. Gunter, and S. Garg. 2007. Unified Architecture for Large-Scale Attested
Metering. In 2007 40th Annual Hawaii International Conference on System Sciences (HICSS’07). 115–115.
DOI:https://doi.org/10.1109/HICSS.2007.586

[56] Juan Lopez, Leonardo Babun, Hidayet Aksu, and A. Selcuk Uluagac. 2017. A Survey on Function
and System Call Hooking Approaches. Journal of Hardware and Systems Security 1, 2 (01 Jun 2017),
114–136. DOI:https://doi.org/10.1007/s41635-017-0013-2

[57] Peter A. Loscocco, Perry W. Wilson, J. Aaron Pendergrass, and C. Durward McDonell. 2007. Linux
Kernel Integrity Measurement Using Contextual Inspection. In Proceedings of the 2007 ACM Workshop
on Scalable Trusted Computing (STC ’07). ACM, New York, NY, USA, 21–29. DOI:https://doi.org/10.
1145/1314354.1314362

[58] M. Q. Saeed, Z. Bilal and C. D. Walter. 2013. An NFC based onsumer-level counterfeit detection
framework. In 2013 Eleventh Annual Int. Conf. on Privacy, Security and Trust (PST). IEEE, Tarragona,
135–142.

[59] M, Sillgith. 2016. Open source library for IEC 61850: Release 0.9. (Feb 2016). http://libiec61850.com/

libiec61850/

[60] Narcisa Andreea Milea, Siau Cheng Khoo, David Lo, and Cristian Pop. 2012. NORT: Runtime Anomaly-
based Monitoring of Malicious Behavior for Windows. In Proceedings of the Second International
Conference on Runtime Verification (RV’11). Springer-Verlag, Berlin, Heidelberg, 115–130. DOI:https:
//doi.org/10.1007/978-3-642-29860-8 10

[61] C. Murguia and J. Ruths. 2016. CUSUM and chi-squared attack detection of compromised sensors. In
2016 IEEE Conference on Control Applications (CCA). 474–480. DOI:https://doi.org/10.1109/CCA.2016.
7587875

[62] N. Komninos, E. Philippou and A. Pitsillides. 2014. Survey in smart grid and smart home security: issues,
challenges and countermeasures. IEEE Communications Surveys and Tutorials 16 (2014), 1933–1954.
Issue 4. DOI:https://doi.org/10.1109/COMST.2014.2320093

[63] National Cybersecurity & Communications Integration Center (NCCIC), Department of Homeland
Security. 2018. Russian Activity Against Critical Infrastructure. (2018). https://www.us-cert.gov/sites/
default/files/c3vp/Russian Activity Webinar Slides.pdf

[64] NIST Special Publication 1108r3. 2014. NIST framework and roadmap for smart grid interoperability
standards, release 3.0. (Sep 2014). http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.1108r3.
pdf

[65] A. Nourian and S. Madnick. 2015. A Systems Theoretic Approach to the Security Threats in Cyber
Physical Systems Applied to Stuxnet. IEEE Transactions on Dependable and Secure Computing PP, 99
(2015), 1–1. DOI:https://doi.org/10.1109/TDSC.2015.2509994

[66] M. Ozay, I. Esnaola, F. T. Yarman Vural, S. R. Kulkarni, and H. V. Poor. 2016. Machine Learning
Methods for Attack Detection in the Smart Grid. IEEE Transactions on Neural Networks and Learning
Systems 27, 8 (Aug 2016), 1773–1786. DOI:https://doi.org/10.1109/TNNLS.2015.2404803

[67] J. A. Pendergrass, S. Helble, J. Clemens, and P. Loscocco. 2018. A Platform Service for Remote Integrity
Measurement and Attestation. In MILCOM 2018 - 2018 IEEE Military Communications Conference
(MILCOM). 1–6. DOI:https://doi.org/10.1109/MILCOM.2018.8599735

[68] M. Pendleton and S. Xu. 2017. A dataset generator for next generation system call host intrusion
detection systems. In MILCOM 2017 - 2017 IEEE Military Communications Conference (MILCOM).
231–236. DOI:https://doi.org/10.1109/MILCOM.2017.8170835

[69] D. B. Rawat and Ch. Bajracharya. 2015. Cyber security for smart grid systems: status, challenges and
perspectives. In Proceedings of the IEEE Southeast Conf. IEEE, Fort Lauderdale, FL, USA, 1–6. DOI:
https://doi.org/10.1109/SECON.2015.7132891

30

[70] Reuters. 2016.

U.S. firm blames Russian ’Sandworm’ hackers

for Ukraine out-
https://www.reuters.com/article/us-ukraine-cybersecurity-sandworm/

age.
u-s-firm-blames-russian-sandworm-hackers-for-ukraine-outage-idUSKBN0UM00N20160108
[71] Sheldon M. Ross. 2001. Probability Models for Computer Science (1st ed.). Academic Press, Inc., Orlando,

(2016).

FL, USA.

[72] S. Fries, H. J. Hof and M. G. Seewald. 2010. Security of the smart grid - enhancing IEC 62351 to improve
security in energy automation control. Int. Journal on Advances in Security 3 (2010). Issue 3, 4. DOI:
https://doi.org/10.1.1.474.6536

[73] A. Sanjab and W. Saad. 2016. Data Injection Attacks on Smart Grids With Multiple Adversaries:
A Game-Theoretic Perspective. IEEE Transactions on Smart Grid 7, 4 (July 2016), 2038–2049. DOI:
https://doi.org/10.1109/TSG.2016.2550218

[74] Anibal Sanjab, Walid Saad, Ismail G¨uvenc¸, Arif I. Sarwat, and Saroj Biswas. 2016. Smart Grid Security:
Threats, Challenges, and Solutions. CoRR abs/1606.06992 (2016). http://arxiv.org/abs/1606.06992
[75] H. Sedjelmaci and S. M. Senouci. 2016. Smart grid Security: A new approach to detect intruders in a
smart grid Neighborhood Area Network. In 2016 International Conference on Wireless Networks and
Mobile Communications (WINCOM). 6–11. DOI:https://doi.org/10.1109/WINCOM.2016.7777182
[76] R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni. 2001. A Fast Automaton-Based Method for Detecting
Anomalous Program Behaviors. In Proceedings of the 2001 IEEE Symposium on Security and Privacy (SP
’01). IEEE Computer Society, Washington, DC, USA, 144–. http://dl.acm.org/citation.cfm?id=882495.
884433

[77] B. Sikdar and J. H. Chow. 2011. Defending synchrophasor data networks against traffic analysis

attacks. IEEE Transactions on Smart Grid 2 (2011), 819–826. Issue 4.

[78] Y. Sun, X. Guan, T. Liu, and Y. Liu. 2013. A cyber-physical monitoring system for attack detection in
smart grid. In 2013 IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS).
33–34. DOI:https://doi.org/10.1109/INFCOMW.2013.6970712

Sandworm Windows
[79] Symantec.
ploited
(2018).
attacks.
sandworm-windows-zero-day-vulnerability-being-actively-exploited-targeted-attacks

zero-day vulnerability being actively ex-
https://www.symantec.com/connect/blogs/

2018.
in targeted

[80] K. Tazi, F. Abdi, and M. F. Abbou. 2015. Review on cyber-physical security of the smart grid: Attacks
and defense mechanisms. In 2015 3rd International Renewable and Sustainable Energy Conference
(IRSEC). 1–6. DOI:https://doi.org/10.1109/IRSEC.2015.7455127

[81] The smart grid interoperability panel - cyber security working group. 2010. Introduction to NISTIR
7628: guidelines for smart grid cyber security. (Sept 2010). http://www.nist.gov/smartgrid/upload/
nistir-7628 total.pdf

[82] J. Valente, C. Barreto, and A. A. C´ardenas. 2014. Cyber-Physical Systems Attestation. In 2014 IEEE
International Conference on Distributed Computing in Sensor Systems. 354–357. DOI:https://doi.org/10.
1109/DCOSS.2014.61

[83] W. Wang and Z. Lu. 2013. Survey Cyber Security in the Smart Grid: Survey and Challenges. Comput.

Netw. 57, 5 (April 2013), 1344–1371. DOI:https://doi.org/10.1016/j.comnet.2012.12.017

[84] X. Li, I. Lille, X. Liang, R. Lu, X. Shen, X. Lin and H. Zhu. 2012. Securing smart grid: cyber attacks,
countermeasures and challenges. IEEE Comm. magazine 50 (2012), 38–45. Issue 8. DOI:https://doi.
org/10.1109/MCOM.2012.6257525

[85] Y. Obeng, C. Nolan and D. Brown. 2016. Hardware security through chain assurance. In Design,

Automation and Test in Europe Conf. and Exhibition (DATE). IEEE, Dresden, 1535 – 1537.

[86] Y. Yan, Y. Qian, H. Sharif and D. Tipper. 2012. A survey on cyber security for smart grid communications.
IEEE Communications Surveys and Tutorials 14 (2012), 998–1010. Issue 4. DOI:https://doi.org/10.1109/
SURV.2012.010912.00035

[87] L. Yang, P. A. Crossley, A. Wen, R. Chatfield, and J. Wright. 2014. Design and Performance Testing of
a Multivendor IEC61850 #x2013;9-2 Process Bus Based Protection Scheme. IEEE Transactions on Smart
Grid 5, 3 (May 2014), 1159–1164. DOI:https://doi.org/10.1109/TSG.2013.2277940

[88] Q. Yang, Rui Min, D. An, W. Yu, and X. Yang. 2016. Towards optimal PMU placement against data
integrity attacks in smart grid. In 2016 Annual Conference on Information Science and Systems (CISS).
54–58. DOI:https://doi.org/10.1109/CISS.2016.7460476

[89] L. Zhou and Y. Makris. 2017. Hardware-based on-line intrusion detection via system call routine
fingerprinting. In Design, Automation Test in Europe Conference Exhibition (DATE), 2017. 1546–1551.

31

DOI:https://doi.org/10.23919/DATE.2017.7927236

[90] Y. Zhou and Z. Miao. 2016. Cyber attacks, detection and protection in smart grid state estimation. In
2016 North American Power Symposium (NAPS). 1–6. DOI:https://doi.org/10.1109/NAPS.2016.7747874

Leonardo Babun is a Ph.D. candidate and CyberCorps Scholar-
ship for Service Fellow in the Department of Electrical & Computer
Engineering at Florida International University. He is also a mem-
ber of the Cyber-Physical Systems Security Lab (CSL). Leonardo
previously completed his M.S. in Electrical Engineering from the
Department of Electrical & Computer Engineering at Florida Inter-
national University in 2015. His research interests are focused on
the security and privacy of Cyber-Physical Systems (CPS) and the
Internet of Things (IoT), digital forensics of smart settings, wireless
networks, big data analytics, and distributed computing. You can contact him at
lbabu002@fiu.edu.

Hidayet Aksu received his Ph.D., M.S. and B.S. degrees from
Bilkent University, all in Department of Computer Engineering, in
2014, 2008 and 2005, respectively. He is currently a Postdoctoral
Associate in the Department of Electrical & Computer Engineering
at Florida International University (FIU). Before that, he worked
as an Adjunct Faculty in the Computer Engineering Department
of Bilkent University. He conducted research as visiting scholar
at IBM T.J. Watson Research Center, USA in 2012-2013. He also
worked for Scientific and Technological Research Council of Turkey (TUBITAK). His
research interests include security for cyber-physical systems, internet of things,
security for critical infrastructure networks, IoT security, security analytics, social
networks, big data analytics, distributed computing, wireless networks, wireless ad
hoc and sensor networks, localization, and P2P networks.

Selcuk Uluagac leads the Cyber-Physical Systems Security Lab
at Florida International University, focusing on security and pri-
vacy of Internet of Things and Cyber-Physical Systems. He has
a Ph.D. and M.S. from Georgia Institute of Technology, and M.S.
from Carnegie Mellon University. In 2015, he received the US
National Science Foundation CAREER award and US Air Force Of-
fice of Sponsored Researchfis Summer Faculty Fellowship, and in
2016, Summer Faculty Fellowship from University of Padova, Italy.
Currently, he serves on the editorial boards of Elsevier Journal
of Network and Computer Applications (JNCA), Elsevier Com-
puter Networks, and the IEEE Communications and Surveys and

Tutorials.

32

