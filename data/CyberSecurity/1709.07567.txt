7
1
0
2

p
e
S
2
2

]

R
C
.
s
c
[

1
v
7
6
5
7
0
.
9
0
7
1
:
v
i
X
r
a

Stochastic Tools for Network Intrusion Detection

Lu Yu and Richard R. Brooks

Abstract With the rapid development of Internet and the sharp increase of network
crime, network security has become very important and received a lot of attention.
We model security issues as stochastic systems. This allows us to ﬁnd weaknesses
in existing security systems and propose new solutions. Exploring the vulnerabil-
ities of existing security tools can prevent cyber-attacks from taking advantages
of the system weaknesses. We propose a hybrid network security scheme includ-
ing intrusion detection systems (IDSs) and honeypots scattered throughout the net-
work. This combines the advantages of two security technologies. A honeypot is an
activity-based network security system, which could be the logical supplement of
the passive detection policies used by IDSs. This integration forces us to balance
security performance versus cost by scheduling device activities for the proposed
system. By formulating the scheduling problem as a decentralized partially observ-
able Markov decision process (DEC-POMDP), decisions are made in a distributed
manner at each device without requiring centralized control. The partially observ-
able Markov decision process (POMDP) is a useful choice for controlling stochastic
systems. As a combination of two Markov models, POMDPs combine the strength
of hidden Markov Model (HMM) (capturing dynamics that depend on unobserved
states) and that of Markov decision process (MDP) (taking the decision aspect into
account). Decision making under uncertainty is used in many parts of business and
science. We use here for security tools. We adopt a high-quality approximation solu-
tion for ﬁnite-space POMDPs with the average cost criterion, and their extension to
DEC-POMDPs. We show how this tool could be used to design a network security
framework.

Lu Yu
Clemson University, Clemson, SC, 29634 e-mail: lyu@g.clemson.edu

Richard R. Brooks
Clemson University, Clemson, SC, 29634 e-mail: rrb@g.clemson.edu

1

 
 
 
 
 
 
2

Lu Yu and Richard R. Brooks

1 Intrusion Detection System

Intrusion detection systems continuously monitor the computer system or network
and generate alarms to inform the system administrator of suspicious events. IDSs
are now considered a necessary addition to the security infrastructure of an organi-
zation [9]. The objective of intrusion detection is to detect malicious activities, and
accurately differentiating them from benign activities. According to the Common
Intrusion Detection Framework (CIDF) [11], a general IDS architecture has four
modules:

• Event-box (E-box) sensors monitor and collect information about the target sys-

tem.

• Database-box (D-box) stores information from the E-box.
• Analysis-box (A-box) analyzes data stored in D-box and generates alarms if nec-

essary.

• Response-box (R-box) implements countermeasures to thwart malicious intru-

sions.

The primary classes of detection methodologies include signature-based detec-
tion, anomaly-based detection and stateful protocol analysis [9]. IDSs that em-
ploy signature-based detection identify attacks by comparing existing signatures
of known attacks with the stored network trafﬁc. When a match is found, IDSs
will trigger the corresponding countermeasure to counteract the detected intrusion.
Signature-based detection provides accurate detection results for well-speciﬁed at-
tacks and effective known countermeasures can be taken. The major drawback of
signature-based detection is its inability to detect new, unknown attacks. With new
attacks appearing continuously, signature-based detection techniques suffer from
high false negative (FN) rates. The anomaly-based detection has the potential to de-
tect new types of attacks by estimating the deviation of observed information from
the predeﬁned baseline of “normal”. However, there still exist several signiﬁcant
issues regarding anomaly-based detection, including high FP rates, low throughput
but high cost, absence of appropriate metrics, etc [5]. Stateful protocol analysis may
provide more accurate detection results than the anomaly-based detection, but is
much more resource-intensive due to the complex analysis and overhead generated
from state tracking [9]. Typically, the more an IDS’s detection accuracy can be im-
proved from the default conﬁguration, the less efﬁcient it is. As a result, continuous
monitoring may cause excessive computation bandwidth, which is undesirable for
any computer system and network.

In addition, various intrusion prevention technologies have been implemented
in IDSs, such as logging off the unauthorized user, shutting down the system, or
reconﬁguring the network if possible [16], etc. Despite strengthening the security of
the information and communication systems, the intrusion prevention capabilities
entail high cost in terms of energy and host resources.

It is not hard to see from the above introduction that, as a popular and effective
tool against cyber-attacks by guarding the system’s critical information, the resource

Stochastic Tools for Network Intrusion Detection

3

cost of IDSs must be taken into account. IDS scheduling is needed to balance be-
tween security performance and resource consumption.

There are three primary types of IDS, namely network-based IDS (NIDS), host-
based IDS (HIDS) and stack-based IDS (SIDS). We choose HIDS since HIDS can
be selectively deployed on critical machines, such as management servers, data
servers and administrator consoles, etc.

2 Honeypot

Honeypots are needed to supplement IDSs in the proposed security scheme because
they complement most other security technologies by taking a proactive stance. A
honeypot is a closely monitored computing resource used as a trap to ensnare at-
tackers. As deﬁned by Spitzner in [10], “A honeypot is a security resource whose
value lies in being probed, attacked, or compromised.” The principal objectives of
honeypots are to divert attackers away from the critical resources and study attacker
exploits to create signatures for intrusion detection. The attraction of honeypots to
attackers mitigates the threat of malicious attacks and thus helps secure the the valu-
able information and important services located on the the real targets.

Based on the level of interaction between the honeypots and the attackers, hon-
eypots can generally be divided into the high-interaction honeypots and the low-
interaction honeypots. Typical examples are honeyd [8] and honeynet [10]. Honeyd
allows users to set up multiple virtual honeypots with different characteristics and
services on a single machine. Honeynet monitors a larger and more diverse network
when one honeypot may not be sufﬁcient. It is very complex and expensive to de-
ploy and maintain a high-interaction honeypot because it emulates almost all the
activities found in a normal operating system. Deployment and conﬁguration of a
low-interaction honeypot is much easier and cheaper since it only simulates some
system services. “BitSaucer” [1] proposed by Adachi et al. is a hybrid honeypot
composed of both low-interaction and hight-interaction capabilities.

Honeypots can also be divided into: research and production honeypots [7]. The
primary function of a research honeypot is to extract the signatures of emerging
attacks, which can be used to improve the detection accuracy of IDSs. A thorough
understanding of the observed trafﬁc data is time-intensive and requires analysts
with comprehensive expertise in almost all network-related ﬁelds. Moreover, the
deployment of research honeypots provides little beneﬁt in strengthening the system
security. Production honeypots are placed within the production network to mitigate
risk. Most production honeypots are low-interaction honeypots and capture limited
information. Example of production honeypot is Nepenthes [2]. Since our scheme is
meant to improve security, we use production honeypots in combination with IDSs.
A honeypot mostly does not deal with false positives like IDS since all the ser-
vices simulated by a honeypot have no production value. All the trafﬁc that en-
ters and leaves a honeypot is suspicious and should be monitored and analyzed [4].
However, not all attempts to access a honeypot are malicious. For example, a person

4

Lu Yu and Richard R. Brooks

might mistype the address of a computer and accidentally connect to a deployed
honeypot. As a result, uncertainty is also involved in honeypots scheduling.

3 System Model

Both HIDSs and honeypots detect intrusions and can operate at all times. However,
intrusion detection and system emulation consume a large amount of energy and
other resources, including memory, processor usage and disk storage. We need to
balance security performance and the resource cost by scheduling IDS and honeypot
activities. The scheduling problem is modelled as a discrete-time process. In the
proposed scheme, more than one HIDS or honeypot can be active during each time
period.

We now consider an example of the hybrid system. Assume a local area net-
work (LAN) is equipped with K − H HIDSs and H honeypots. This brings the total
number of the security devices to K. Without loss of generality, we also assume the
network topology is static and there are more machines than available HIDSs. In-
evitably, only some machines have HIDSs installed. An example network is shown
in Figure 1.

HIDS appliance 

Low-interaction 
honeypot 

Client workstation 

Low-interaction 
honeypot 

Router 

Switch 

Firewall 

Client workstation 

IDS file server  

IDS file server  

Fig. 1 Example distributed hybrid security scheme combining HIDSs with honeypots.

Suppose each HIDS can operate in three modes: monitor, prevention and sleep,
which is the action space for a HIDS. The HIDS is set to monitor for intrusion
detection and can sleep for energy saving. A preventive action might be taken by
switching to prevention mode if an unauthorized or malicious activity is identiﬁed,
and consumes more resources. Similarly, the action space of a deployed honeypot
can be speciﬁed as monitor, analysis and sleep. Further analysis will be carried out

Stochastic Tools for Network Intrusion Detection

5

if trafﬁc anomalies are detected. Each HIDS makes decision based on local infor-
mation, which can be modeled as a partially observable Markov decision process
(POMDP), which combines the strength of hidden Markov model (HMM) [15, 6]
(capturing dynamics that depend on unobserved states) and that of Markov decision
process (MDP) (taking the decision aspect into account).

Let S(k)(t) denote the state of an arbitrary device k (HIDS or honeypot) at time t,
we assume S(k)(t) = hX (i)(t),Y (k)(t)i, where X (k)(t) represents the security condi-
tion and Y (k)(t) represents the resource consumption level. For instance, the security
state can be simply divided into: “secure” and “compromised”. If we use the no-
tation X to denote the state space of X (k)(t), then X = {secure, compromised}.
The state space of Y (k)(t), denoted by Y , includes three consumption levels:
{low, medium, high}. The correspondence between different consumption levels and
operating states are:

• low: The device is not chosen, i.e., in the sleep mode.
• medium: The device is working in the monitor mode.
• high: The HIDS/honeypot is working in prevention/analysis mode.

Since the IDSs used are HIDSs, each HIDS only monitors the machine it resides
on, ignoring the rest of the network. As a decentralized control scheme, the decision
to activate a certain security device is based on local observations. To complete the
problem, we assume the observation space is identical to the space of security con-
ditions, i.e., O = X = {“secure”, “compromised”}. Note that an intrusion alarm
does not necessarily mean there is an attack, and vice versa. Intrusion detection can
make two types of errors: false positive (FP) and false negative (FN). A large vol-
ume of FPs result in lots of time wasted on determining whether an alert is an attack
when it is actually benign [3]. FNs result in security holes due to failing to raise
alarms when intrusions occur. Since the goal of intrusion detection is to precisely
differentiate the intrusions from legitimate behaviors, both errors are signiﬁcant per-
formance indexes of IDSs and have been embodied in the observation probabilities.
For instance, the following observation probability

Pr{O(k)(t +1) = “compromised” | A(k)(t) = “monitor”, S(k)(t +1) = hsecure, mediumi}

(1)

is equal to the FP rate of device k.

The local state of each host in the network is closely related to the security pos-

ture of the entire network. The analysis is divided into two cases:

• Switching between different modes of an HIDS will change the power-consumption
level of the local machine but have no inﬂuence on the attack activities in the
LAN;

• The activation of a honeypot will positively impact the network’s operation and
security by distracting adversaries away from the valuable resources in the LAN,
and accordingly will mitigate the threat posed to the rest of the network.

It is obvious from the preceding analysis that the choice of each agent may affect
the state of the entire network. This makes the decentralized partially observable

6

Lu Yu and Richard R. Brooks

Markov decision process (DEC-POMDP) a more suitable tool to model the schedul-
ing for the distributed system. Some might argue that a centralized controller can
also be adopted in this case. However, a common drawback exists in most central-
ized controls: it may consume a prohibitive amount of bandwidth and instantaneous
communication between the agents and the controller. In addition, possible security
breaches are brought in since the transmitted information may be intercepted by the
adversaries. Therefore, the DEC-POMDP is generally more preferable.

4 DEC-POMDP Formulation for the Distributed Hybrid

Security System Combining IDS & Honeypot

We deﬁne the state of the DEC-POMDP formulation at time t, denoted by S(t), as
the combination of S(k)(t), i = 1, 2, · · · , K. Notationally,

S(t) = [S(1)(t), S(2)(t), · · · , S(K)(t)]

Similarly, we can write the action of time t as

A(t) = [A(1)(t), A(2)(t), · · · , A(K)(t)]

We now consider the state transition law. The state S(t) evolves based on a (|X | ×
|Y |)-state Markov decision process. Let W denote the state transition probability
function, then

W (s, a, s′) = Pr{S(t + 1) = s′|S(t) = s, A(t) = a}

where s, s′ ∈ S K and a ∈ A K.

The observation probabilities of the DEC-POMDP formulation are slightly dif-
ferent from the standard POMDP. As indicated in (1), the quantities of the obser-
vations probabilities are assigned according to the FP and FN rates of the devices.
Consequently, the observation of each agent only depends on the local information.
It follows that V (k)(a, s′, o′), the observation probability of device i is given by

V (k)(a, s′, o′) = Pr{O(k)(t + 1) = o′ | A(k)(t) = a, S(k)(t + 1) = s′}

Finally, the immediate reward at time t is deﬁned as the sum of each local immediate
reward

r(S(t), A(t)) =

r(S(k)(t), A(k)(t))

(2)

K
∑
k=1

The values of the immediate rewards are assigned according to the following rules:
A successful detection of an attack results in a large reward; On the contrary, an un-
necessary further analysis staged due to a misjudgement will cause a large penalty,

Stochastic Tools for Network Intrusion Detection

7

so will the misdetection of an attack; Furthermore, monitoring is not free and mon-
itoring a secure machine comes at a small penalty.

5 NLP-based Solution of the DEC-POMDP

The scheduling model for the hybrid system is a DEC-POMDP. Thus, we need to
augment the POMDP solution method in [13, 14] to situations of multiple con-
trollers. As was mentioned in [12], the solution of a DEC-POMDP consists of a set
of policy graphs, one for each agent. Accordingly, the goal is to optimize a set of
ﬁnte state machines (FSC). We will show in the followings that the extension of the
NLP-based solution in [13, 14] to DEC-POMDP is very straightforward. In order to
present the algorithm for DED-POMDPs, we make the following assumptions:

• There are K agents in the DEC-POMDP.
• The state space of the DEC-POMDP is denoted by S . Each agent has the same
action space A (“prevention” of an IDS corresponds to “analysis” of a honeypot)
and observation space O.

• Each agent chooses the actions according to a ﬁxed-size FSC. The set of the

nodes in the FSC of agent k is denoted by N (k).

• We use the notation n to denote a vector of length K, where n(k) ∈ N (k). The

observation vector o and the action vector a are deﬁned likewise.
• xk(n, a) and yk(n, o′, n′) are the control variables of the FSC of agent k.

The formal representation of the NLP-based solution of DEC-POMDPs satisfying
the above assumptions is:

For variables: πnsa and g(k)(nk, ok
where g(k)(nk, ok
∑
maximize ∑
s∈S
n

′, nk
′, nk
∑
a∈A

′),
′) = xk(n′, a′)yk(n, o′, n′)

′, ak
′, ak
πnsa · r(s, aK)

Subject to:

For ∀s′ ∈ S , ∀n ∈ △, ∀a′ ∈ A K,
{πnsa ∑
πn′s′a′ = ∑
∑
s∈S
o′∈OK
o∈OK
∑
∀nk ∈ N (k), ∀ok
′∈A
ak

∑
a∈A K
′ ∈ O,∑
nk

′

P(s, a, s′)Q(a, s′, o′)∏
k

g(i)(nk, ok

′, nk

′, ak

′)},

g(k)(nk, ok

′, nk

′, ak

′) = 1, for k = 1, 2, · · · , K

(3)
The optimal solution to the NLP in (3) provides an optimal set of FSCs of the given
size. The solution representation owes its availability to one critical factor: each
agent behaves independently. That is, all the policy graphs are independent from
each other.

8

6 Summary

Lu Yu and Richard R. Brooks

This chapter starts with the introduction of the two security technologies adopted in
the proposed security scheme. We choose HIDS, in combination with honeypot with
the purpose to integrate the advantages of both tools in our system. We formulate
the decentralized control of the system as a DEC-POMDP. In the end of the chapter,
we show how to extend the FSC-based POMDP algorithm described in [13, 14] to
solving DEC-POMDP.

References

1. Adachi, Y., Oyama, Y.: Malware analysis system using process-level virtualization. In: Pro-
ceedings of IEEE Symposium on Computers and Communications, pp. 550–556 (2009)
2. Baecher, P., Koetter, M., Dornseif, M., Freiling, F.: The nepenthes platform: An efﬁcient ap-
proach to collect malware. In: Proceedings of the 9 th International Symposium on Recent
Advances in Intrusion Detection (RAID), pp. 165–184. Springer (2006)

3. Bakar, N., Belaton, B., Samsudin, A.: False positives reduction via intrusion alert quality
framework. In: Joint IEEE Malaysia International Conference on Communications and IEEE
International Conference on Networks, pp. 547–552 (2005)

4. Baumann, R.:

http://security.rbaumann.net/download/honeyd.pdf. Originally published as part of the GCIA
practical

5. Garcia-Teodoroa, P., Diaz-Verdejoa, J., Macia-Fernandeza, G., Vazquezb, E.: Anomaly-based
network intrusion detection: Techniques, systems and challenges. Computer & Security 28(1
– 2), 18 – 28 (2009)

6. Lu, C., Schwier, J.M., Craven, R.M., Yu, L., Brooks, R.R., Grifﬁn, C.: A normalized statistical
IEEE transactions on cybernetics 43(3), 806–819

metric space for hidden markov models.
(2013)

7. Mokube, I., Adams, M.: Honeypots: Concepts, approaches, and challenges. In: ACMSE 2007,

pp. 321–325. Winston-Salem, NC (2007)

8. Provos, N.: In: Proceedings of the 12th USENIX Security Symposium, pp. 1–14 (2004)
9. Scarfone, K., Mell, P.: Guide to Intrusion Detection and Prevention Systems (IDPS). Com-
puter Security Division, Information Technology Laboratory, National Institute of Standards
and Technology, Gaithersburg, MD (2007). NIST special publication 800-94

10. Spitzner, L.: Honeypots: Tracking Hackers. 1st edition. Addison-Wesley, Boston,MA (2002)
11. Tung, B.: The common intrusion detection framework.

http://gost.isi.edu/cidf/ (1999)
tools

12. Yu, L.: Stochastic

network

and
http://tigerprints.clemson.edu/all_dissertations/1061/

intrusion

Ph.D.

for
detection.

network

security: Anonymity

protocol
thesis, Clemson University

analysis
(2012).

13. Yu, L., Brooks, R.: Observable subspace solution for irreducible pomdps with inﬁnite hori-
zon. In: Proceedings of the Seventh Annual Workshop on Cyber Security and Information
Intelligence Research, p. 83. ACM (2011)

14. Yu, L., Brooks, R.R.: Applying pomdp to moving target optimization. In: Proceedings of the
Eighth Annual Cyber Security and Information Intelligence Research Workshop, p. 49. ACM
(2013)

15. Yu, L., Schwier, J.M., Craven, R.M., Brooks, R.R., Grifﬁn, C.: Inferring statistically signiﬁcant
hidden markov models. IEEE Transactions on Knowledge and Data Engineering 25(7), 1548–
1558 (2013)

Stochastic Tools for Network Intrusion Detection

9

16. Zheng, J., Jamalipour, A.: Wireless Sensor Networks: A Networking Perspective. A John &

Sons, Inc and IEEEE (2009)

