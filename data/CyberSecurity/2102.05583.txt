Malware Knowledge Graph Generation

Sharmishtha Dutta, Nidhi Rastogi*, Destin Yee, Chuqiao Gu, Qicheng Ma
duttas,raston2,yeed3,guc,maq3@rpi.edu
Rensselaer Polytechnic Institute, Troy, NY

1
2
0
2

b
e
F
0
1

]

R
C
.
s
c
[

1
v
3
8
5
5
0
.
2
0
1
2
:
v
i
X
r
a

Abstract

Cyber threat and attack intelligence infor-
mation are available in non-standard format
from heterogeneous sources. Comprehend-
ing them and utilizing them for threat intel-
ligence extraction requires engaging security
experts. Knowledge graphs enable convert-
ing this unstructured information from hetero-
geneous sources into a structured representa-
tion of data and factual knowledge for several
downstream tasks such as predicting missing
information and future threat trends. Existing
large-scale knowledge graphs mainly focus on
general classes of entities and relationships be-
tween them. Open-source knowledge graphs
for the security domain do not exist. To ﬁll this
gap, we’ve built TINKER - a knowledge graph
intelligence (Threat INtelligence
for threat
KnowlEdge gRaph). TINKER is generated
using RDF triples describing entities and rela-
tions from tokenized unstructured natural lan-
guage text from 83 threat reports published be-
tween 2006-2021. We built TINKER using
classes and properties deﬁned by open-source
malware ontology and using hand-annotated
RDF triples. We also discuss ongoing research
and challenges faced while creating TINKER.

1

Introduction

There is no dearth of cybersecurity threat and attack
information on the Internet. Both structured and un-
structured data is available to security professionals
and researchers to help in their increasingly com-
plex jobs of ﬁnding zero-day attacks, protecting in-
tellectual property, and preventing intrusions from
adversaries. CVE (Martin, 2007), NVD (Booth
et al., 2013) are vulnerability tracking programs
where the security community feeds information.
For sharing threat intelligence, there are industry
standards like Structured Threat Information eX-
pression (STIX) (Barnum, 2012), which provides
a language-agnostic framework to capture threat

intelligence into a shareable package. In contrast,
the trusted automated exchange of indicator infor-
mation (TAXII) (Connolly et al., 2014) is a plat-
form that can send and receive the STIX package.
Here, despite concerted efforts by several to or-
ganize malware threat information over the past
decade, we face two challenges that need imme-
diate attention. The ﬁrst is the varying degrees of
data shared amongst organizations using the same
standard. The other challenge, and the one we will
address in this paper, is the lack of information
standardization and data contextualization.

Security ontologies (speciﬁcally malware) have
attempted to address the ﬁrst concern (Syed et al.,
2016), (Swimmer, 2008) primarily to collate data
in a structured format and distribute it (Barnum,
2012; Connolly et al., 2014). Most existing ap-
proaches have a speciﬁc purpose of identifying
attack patterns, vulnerability, threat, or information
dissemination. This paper builds on the popular
and yet limited strengths of current security stan-
dards, domain linkage properties of the semantic
web, and natural language domains. Security on-
tologies (Rastogi et al., 2020), (Swimmer, 2008)
are extended to extract cybersecurity threat intelli-
gence from online sources. Other beneﬁts include
interoperability of information across applications
and creating labeled features for machine learning
models. When data is labeled, using ontologies
allows to run queries over large datasets, identify
trends, and predict future occurrences.

In this paper, we propose TINKER, a hand-
curated knowledge graph that extracts information
from unstructured threat-related data. TINKER
converts information into a standardized structured
format called RDF triples. Triples support the infer-
ence, which allows the automated discovery of new
facts based on a combination of data and rules for
understanding that data. Therefore, TINKER can
discover new threat intelligence since it combines

 
 
 
 
 
 
Table 1: Triples extracted from sample threat report
text.

Head
(cid:104)DUSTMAN,
(cid:104)DUSTMAN,
(cid:104)ZeroCleare,
(cid:104)DUSTMAN,

Relation
similarTo,
involves,
involves,
involves,

Tail
ZeroCleare(cid:105)
Turla Driver Loader(TDL)(cid:105)
Turla Driver Loader(TDL)(cid:105)
dustman.exe(cid:105)

malware data using triples. It also connects with
general world concepts, thus blending ”knowledge,”
correlating, grouping concepts, and inferring new
insights.

We instantiate existing malware ontologies using
over 83 threat documents written between 2006-
2021 downloaded from the Internet in this work.
Approximately 3000 triples were created following
malware ontology in (Rastogi et al., 2020; Swim-
mer, 2008) and using the Brat annotation tool1. The
ontology provided the classes’ names, which are
called entities in TINKER. The ontology also con-
tains properties called relations in TINKER, which
deﬁne the relationships between different classes.
Security experts on the research team then veriﬁed
the annotated dataset. Triples generated using these
entities are the structural components of TINKER
that capture facts related to malware threat intel-
ligence. Aside from that, triples allow reasoning
over them, leading to new information missing ear-
lier or was inaccurate. For example, consider the
following snippet from a threat report:2

“...DUSTMAN can be considered as a new variant
of ZeroCleare malware...both DUSTMAN and
ZeroCleare utilized a skeleton of the modiﬁed
“Turla Driver Loader (TDL)”...The malware
executable ﬁle “dustman.exe” is not the actual
wiper, however, it contains all the needed
resources and drops three other ﬁles [assistant.sys,
elrawdisk.sys, agent.exe] upon execution...”

Table 1 shows a set of triples generated from this
text. Together, many such triples form the malware
knowledge graph where the entities and relations
model nodes and directed edges, respectively.

Creating TINKER from scratch was no trivial
task, and therefore we discuss the challenges that
went in this effort. Nonetheless, what makes the
knowledge graph generation a focused and ﬁnite
effort is malware ontology to build it. A set of com-
petency questions help create the ontology, which

1https://brat.nlplab.org/
2https://www.lastwatchdog.com/wp/wp-
content/uploads/Saudi-Arabia-Dustman-report.pdf

the ontology should be able to answer. Threat re-
ports have concepts that are extracted by ontol-
ogy deﬁned classes. Also included are the poten-
tial relationships between concepts (or entities in
knowledge graphs) and what we ﬁnd essential in
predicting from the information in hand. When
combined with linked open data (LOD)(Bauer and
Kaltenb¨ock, 2011), TINKER improves the seman-
tic content of the data and link datasets at a schema
level. It also ensures interoperability with other
ontologies and knowledge graphs in the future.

2 Background Work and Motivation

Several generic and speciﬁc knowledge graphs
such as Freebase(Bollacker et al., 2008), Google’s
Knowledge Graph3, and WordNet(Fellbaum, 2010)
are available as open source.
Linked Open
data(Bauer and Kaltenb¨ock, 2011) refers to all
the data available on the Web, accessible using
standards such as Uniform Resource Identiﬁers
(URIs) to identify entities and Resource Descrip-
tion Framework (RDF) to unify entities into a
data model. However, it does not contain domain-
speciﬁc entities that deal with cyber threats and
intelligence. Other existing knowledge graphs are
either not open source, too speciﬁc, or do not cater
to the breadth of information our research intends
to gather from intelligence reports.

As part of entity recognition of key phrases in
the threat reports, we explored DBpedia Spotlight
(Mendes et al., 2011). It enables conﬁguration of
annotations in domain-speciﬁc text, such as cyber-
security) by using a few knowledge bases (as of
2021), including DBpedia, FreeBase (deprecated),
and Schema.org, while offering quality measure
on disambiguation conﬁdence. Each annotated key
phrase also gets an ontology URI that assures prove-
nance to the concepts. However, when annotating
text using these ontologies, the key-phrase miner
from DBPedia Spotlight (Mendes et al., 2011)
misses out on context determination. For exam-
ple, a threat report on ”Operation Aurora” was
correctly annotated as a Malware class from the
Wikipedia derived ontology. However, the threat
report instead uses ”Aurora” for a majority of the
report. We are currently exploring entity extraction
approaches that are semantically and syntactically
similar. Therefore, a simple CRF or n-gram based
approach, despite the high performance, will lead
to false-positive annotations. Also, it was missing

3https://developers.google.com/knowledge-graph

relation extraction from annotated entities. Con-
textual entity extraction is exceptionally crucial for
cybersecurity threat intelligence due to the contin-
ually shifting and evolving landscape. In the lan-
guage of knowledge graphs, this means TINKER
will require updates as more knowledge becomes
available in the form of natural language text, lest
it will quickly get stale.

2.1 Ontology

Prior to extracting syntactic and lexical text pat-
terns, we need to ensure that they also map to
classes (entities) deﬁned by an malware ontology.
An ideal open-source ontology can systematically
capture cyber threat and attack information (facts
and analysis) to model the contents of threat re-
ports. Constructing an ontology requires answering
competency questions that fulﬁll the requirements
for requisite coverage of the threat domain. These
questions (or a narrower version of a competency
question) can be answered by running SPARQL
queries on the knowledge graph. While building
TINKER, we updated the competency questions to
the following:

1. What are missing pieces of information about
an attacker/ attacker-group, a malware, a mal-
ware campaign, vulnerabilities exploited or
attack methods deployed.

2. What are the similar features for grouping ad-
versaries, malware to help understand their
behavior and predict the future course of ac-
tion?

3. What is the impact of a given malware on an
organization or industry – ﬁnancial, human
life, intellectual property, reputation?

4. What can we predict about the future course of
action of a malware, attacker/ attacker-group,
both short-term and long-term?

An ontology scopes concepts within a speciﬁc
domain using classes and properties [anonymous].
For the ontology to be extensible and scalable, a
few classes cover the domain with a pre-deﬁned
purview. Instances hold different values for indi-
vidual classes and are connected to each other by
properties. Furthermore, software agents can uti-
lize such an ontology to generate malware KGs.
Ontology classes and properties can signiﬁcantly
enhance past, current and future threat analysis
that can inform further investigation on a variety

of malware attacks. For instance, in [anonymous]
ontology, three classes largely describe malware
behavior – Malware, Vulnerability, and Indicator.
Instances of these classes can equip the analysts
with considerable information on malware behav-
ior and its attacking tactics. See Figure 1 for a
snapshot on a malware ontology.

Figure 1: Classes from a malware ontology

3 Generating Triples

In this paper, we concern with manual named en-
tity recognition (NER) and relation extraction (RE)
and discuss partially automated extraction of some
classes. We construct TINKER corresponding to
the malware ontology by populating it with in-
stances derived from actual threat reports. The
knowledge graph can be queried (Rastogi et al.,
2020) using competency questions written using
SPARQL queries to help answer several research
questions. However, one may argue about the need
for knowledge graphs given that the instantiated
ontology is already capturing facts and information
about the domain. The ability to reason over ex-
tracted information and infer latent information are
the two key features of knowledge graphs. TIN-
KER captures a web of properties between individ-
ual nodes (also called entities) and uses a reasoner
to draw connections between entities that would
otherwise not be understood. Here, TINKER holds
instances of speciﬁc malware attributes such as
origination, attack goals, timeline, afﬁliated actors,
vulnerabilities exploited for the attack, impact on
industries as well as on humans. TINKER is not
just an instantiation of data using an ontology. It
is a web of properties between individual nodes
(also called entities) and uses a reasoner to draw
connections between entities that would otherwise
be overlooked.

3.1 Manual Generation
Some of the threat reports4 that were published
by security organizations between the years 2006
to 2021 were hand-annotated using malware threat
intelligence ontologies (Rastogi et al., 2020)(Swim-
mer, 2008). For example, a 2011 report on Night
Dragon5 describes it operations. Other reports pub-
lished in 20136 on malwares like Stuxnet, Shamoon
allow a more in-depth and broader range of details
on a particular malware attack.

Figure 2: Snippet of TINKER using malware ontology.
Tool used - neo4j

Threat reports were manually annotated by the
authors and reviewed by a security expert. The an-
notated values from the threat reports were used to
instantiate various concepts of the malware ontol-
ogy. In this step, values are assigned to instances of
malware ontology classes and properties. In Figure
2 the snippet of the malware KG depicts modeling
of threat data collected from reports using classes
and properties from the malware ontology.

3.2 Automatic Generation

Our ultimate research goal is to develop and train
our own NER and RE models. Automating the
annotation process for threat reports requires an
ensemble of machine learning and text mining ap-
proaches. The requirement is to extract salient
key-phrases that are representative of the threat
report. Therefore, we considered our research re-
quirements and explored preexisting NER models
from spaCy, Stanford, and Flair. The most com-
mon entities extracted from these NER models in-
clude - people, organization, location, date, soft-
ware, product. We tested several of these models
for the cybersecurity dataset, and the results had

4https://tinyurl.com/y9shcvpd
5https://tinyurl.com/y5veq59m
6https://tinyurl.com/y52axjtf

some interesting revelations. Flair12 gave us the
most accurate results for the classes which were
mapped back to the malware ontology.

4 Empirical Results

83 threat report written in unstructured textual for-
mat were converted from pdf or html to text. This
formed the training and test data with words and
corresponding tokens. Each report was separated
into individual sentences and fed into Brat anno-
tation tool. However, for automation, we plan to
move ahead with caution and selectively annotate
entities and relations. From the hand-annotated
dataset, we observed that only the the entities that
formed 95% of all the annotations are capturing
most of the data in the threat reports.

5 Discussion on Ongoing Research

To create a large scale TINKER, we are exploring
an ensemble of information extraction techniques
that have different individual strengths. The DBpe-
dia knowledge base can annotate general-purpose
key-phrases and recognize entities present in the
”DBP” namespace. We incorporate existing vul-
nerability databases - CVE and NVD and other
malware ontology along with (Swimmer, 2008;
Rastogi et al., 2020) to ensure we capture as much
threat intelligence as possible. Besides, we used
a simple regular expression to extract instances
such as indicators of compromise. For annotat-
ing static information, we are relatively optimistic
about Flair12. The biggest challenge lies in an-
notating contextual information and deﬁning re-
lations between classes (or entities). One of the
approaches we have explored and has given rea-
sonably good results is based on a context feature
selection method. It selects clean context features
for calculating entity-entity distributional similarity.
However, the limitation of this approach is that it
extracts only one entity of a kind from every threat
report and not all instances. Another challenge that
we’re looking into overcoming is a document level
relation extraction technique that can be trained
using TINKER.

References

Sean Barnum. 2012. Standardizing cyber threat intelli-
gence information with the structured threat informa-
tion expression (stix). Mitre Corporation, 11:1–22.

Florian Bauer

and Martin Kaltenb¨ock.

2011.

Linked open data:
mono/monochrom, Vienna, 710.

The essentials.

Edition

Kurt Bollacker, Colin Evans, Praveen Paritosh, Tim
Sturge, and Jamie Taylor. 2008. Freebase: a collab-
oratively created graph database for structuring hu-
man knowledge. In Proceedings of the 2008 ACM
SIGMOD international conference on Management
of data, pages 1247–1250.

Harold Booth, Doug Rike, and Gregory A Witte.
2013. The national vulnerability database (nvd):
Overview.

Julie Connolly, Mark Davidson, and Charles Schmidt.
2014. The trusted automated exchange of indicator
information (taxii). The MITRE Corporation, pages
1–20.

Christiane Fellbaum. 2010. Wordnet. In Theory and
applications of ontology: computer applications,
pages 231–243. Springer.

Robert A Martin. 2007. Common weakness enumera-

tion. Mitre Corporation.

Pablo N Mendes, Max Jakob, Andr´es Garc´ıa-Silva, and
Christian Bizer. 2011. Dbpedia spotlight: shedding
In Proceedings of
light on the web of documents.
the 7th international conference on semantic sys-
tems, pages 1–8.

Nidhi Rastogi, Sharmishtha Dutta, Mohammed J Zaki,
Alex Gittens, and Charu Aggarwal. 2020. Malont:
An ontology for malware threat intelligence. arXiv
preprint arXiv:2006.11446.

Morton Swimmer. 2008. Towards an ontology of mal-

ware classes. Online] January, 27.

Zareen Syed, Ankur Padia, Tim Finin, Lisa Mathews,
and Anupam Joshi. 2016. Uco: A uniﬁed cyberse-
curity ontology. In Workshops at the Thirtieth AAAI
Conference on Artiﬁcial Intelligence.

