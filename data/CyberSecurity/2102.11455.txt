Man-in-The-Middle Attacks and Defense in a
Power System Cyber-Physical Testbed

Patrick Wlazlo, Abhijeet Sahu, Zeyu Mao, Hao Huang, Ana Goulart,
Katherine Davis, and Saman Zonouz

1
2
0
2

b
e
F
3
2

]

R
C
.
s
c
[

1
v
5
5
4
1
1
.
2
0
1
2
:
v
i
X
r
a

Abstract—Man-in-The-Middle (MiTM) attacks present numer-
ous threats to a smart grid. In a MiTM attack, an intruder
embeds itself within a conversation between two devices to either
eavesdrop or impersonate one of the devices, making it appear
to be a normal exchange of information. Thus, the intruder can
perform false data injection (FDI) and false command injection
(FCI) attacks that can compromise power system operations, such
as state estimation, economic dispatch, and automatic generation
control (AGC). Very few researchers have focused on MiTM
methods that are difﬁcult to detect within a smart grid. To
address this, we are designing and implementing multi-stage
MiTM intrusions in an emulation-based cyber-physical power
system testbed against a large-scale synthetic grid model to
demonstrate how such attacks can cause physical contingencies
such as misguided operation and false measurements. MiTM
intrusions create FCI, FDI, and replay attacks in this synthetic
power grid. This work enables stakeholders to defend against
these stealthy attacks, and we present detection mechanisms
that are developed using multiple alerts from intrusion detection
systems and network monitoring tools. Our contribution will
enable other smart grid security researchers and industry to
develop further detection mechanisms for inconspicuous MiTM
attacks.

I. INTRODUCTION

The integration of information technology (IT) with indus-
trial control systems (ICS) has revolutionized smart control of
critical infrastructure systems such as energy, water, chemical,
and transportation. Fast and accurate remote data collection
and processing are helping to automate and optimize these
sectors [1]. Initially, the integration of IT (cyber) and ICS
(physical) systems focused on utility rather than data security.
This lack of consideration of security in the design phase has
staged serious security problems such as Stuxnet malware [2],
the Ukraine attacks [3], [4], and the intrusion in the European
Network of Transmission System Operators (ENTSO-E) in
2020 [5]. Due to the increasing awareness of such multi-stage,
advanced concept-of-operations attacks, critical infrastructure
stakeholders are focusing on the security of their networks,
by following cyber-physical security policies that are unique to
different sectors. These policies and decisions are governed by
the threat models associated with the speciﬁc systems in each
physical domain. In particular, the physical domain addressed
in this paper is the energy sector, where we investigate man-in-
the-middle (MiTM) attacks to an electrical utility’s supervisory
control and data acquisition system (SCADA).

A MiTM attack is one of the oldest forms of cyber intru-
sions, where a perpetrator positions itself in a conversation
between two end points to either passively eavesdrop or

actively impersonate one of the end points. MiTM attacks en-
compass different techniques, depending on the threat model.
For example, Secure Socket Layer (SSL) hijacking is an attack
where a man-in-the-middle intercepts a request from client
to server, then continues to establish an encrypted session
between itself and the server, and a regular session between
itself and the client, thus appearing to be a secure exchange
between client and server.

Similar to SSL hijacking, SCADA protocols such as Dis-
tributed Network Protocol-3 (DNP3), Modbus, and IEC-61850
can also be intercepted. If this happens, there is a potential
to cause severe damage to energy systems, such as these
scenarios:

• False data injection (FDI) can be performed that com-
promises state estimations [6], which affect economic dis-
patch [7], generation scheduling, load forecasting, among
others.

• False command injection (FCI) can be performed that can
cause minor to major impacts, such as cascading failures
and blackouts.

• Eavesdropping, where an intruder intercepts and reads
then uses this information to learn how the

packets,
system operates.

Furthermore, some MiTM attacks can be stealthy enough
to evade conventional intrusion detection systems (IDS). First,
the added latency caused by a man-in-the-middle intercepting
packets may be difﬁcult to detect in a wide area network
(WAN). ICS data packets also have different delays depending
on the application [8], and polling frequencies range from
milliseconds to hours. Hence, delays that would occur due
to MiTM can get masked based on the normal behavior of
the system. Second, most off-the-shelf security tools to detect
MiTM attacks are designed for traditional internet applications
and do not support ICS protocols. There are a lot of proprietary
ICS protocols, and there are vendor-speciﬁc implementations
of protocols like DNP3. Moreover, a testbed is needed to verify
the impact of MiTM attacks and ways to mitigate them.

Thus, our work addresses these gaps and challenges by
focusing on MiTM attack methods that are difﬁcult to de-
tect within a smart grid and how to detect them. We are
developing and implementing multi-stage MiTM intrusions
in an emulation-based cyber-physical power system testbed
against a large scale synthetic grid model
to demonstrate
how such attacks can cause physical contingencies such as
to
misguided operation and falsiﬁed measurements. Then,

1

 
 
 
 
 
 
enable stakeholders to defend against these stealthy attacks,
we also present detection mechanisms that are developed using
multiple alerts from IDS and network monitoring tools, such
as how we can correlate packet retransmission rates with alerts
generated from the Snort IDS tool.

The rest of this paper is organized into the following
sections. In Section II, we evaluate previous papers on MiTM
attacks performed within a cyber-physical testbed and their
limitations. Section III provides background on DNP3, MiTM
attacks, and an overview of our testbed. In Section IV, we
present different methods for MiTM attacks on DNP3, such as
binary operate and analog direct operate modiﬁcations, with
detailed algorithms. We describe how an intrusion detection
system can be conﬁgured to help detect two kinds of cyber-
attack in Section V. In Section VI, we present four MiTM
attack use cases and analyze metrics that can be used to
indirectly detect a MiTM attack. Conclusions and a review
of our contributions are discussed in Section VII.

II. RELATED WORK

There are several papers that describe MiTM attacks on
energy systems that have cyber-physical system (CPS) testbeds
and perform experiments on industrial control protocols. Their
cyber-physical testbeds differ in terms of power and network
simulators or emulators, amount and type of physical devices,
and which energy system they model and in how much
detail (e.g., power transmission or power generation). When
comparing these papers, we observe certain limitations that
are addressed by our work: i) they target small scale systems
and support limited attack scenarios, ii) they do not include
details on how the MiTM attack started, and iii) they do not
show how to detect stealthy MiTM attacks.

In [9], denial of service (DoS) attacks are performed in a
CPS testbed which has a real-time digital simulator (RTDS) for
power, network simulator-3 (NS-3) for communications, and
devices such as phasor measurement units (PMUs) and phasor
data concentrators (PDCs). They perform DoS attacks that
increase delays in the communications links. The attack targets
voltage stability monitoring and control
in a transmission
system. However, the method adopted in creating the DoS
attack is not thoroughly presented in the paper.

The CPS testbed in [10] uses RTDS, Opal-RT, and a WAN
emulator to demonstrate cascading failures. The failures were
caused by a coordinated data integrity attack that triggered
the operation of a remedial action scheme (RAS). With false
measurements, the MiTM attacks manipulated the automatic
generation control (AGC) algorithm to take the wrong control
action. Similarly, in [11] AGC is targeted by MiTM attacks,
where DNP3 packets carrying frequency and tie line ﬂow
measurements are modiﬁed using Scapy [12] tools. Although
the physical scenarios in these cases are demonstrated, the
precursors of the MiTM attack are not explained clearly.

A Modbus-based MiTM attack on a CPS testbed is pre-
sented in [13]. The authors use Ettercap and LibModbus
libraries to poison the address resolution protocol (ARP) cache
and manipulate the Modbus packets, that affects the controller

for a static volt-ampere reactive (VAR) compensator. To sim-
ulate a communication network, the authors use the Opnet
simulator that provides system-in-the-loop (SITL) features to
connect real devices to the simulator. Another work [14] also
uses existing libraries for performing a MiTM attack on a grid-
connected photovoltaic plant using the Metasploit framework.
The testbed in [14] uses Schweitzer Engineering Laboratories
(SEL) PMU hardware and the IEC 60870-5-103 protocol to
demonstrate the attack scenario. However, in both cases, due
to the limitations of the open source Metasploit and Ettercap
frameworks, only limited threat models are possible for the
ICS protocols.

A multi-dimensional SCADA-speciﬁc IDS is presented
in [15]. It detects MiTM attacks on IEC 61850 trafﬁc in a real
500 kV substation. The MiTM attacks can easily be integrated
in small test cases, but they have not been studied for large
scale grids.

Recent work on the Idaho CPS testbed [16] presents MiTM
attacks on IEC C37.118, IEC 61850, and DNP3. However, the
impact of the attacks on the power system is not presented,
and the strategy adopted by incorporating the MiTM attacks
is not clear. Another MiTM attack using DNP3 is presented
in [17], which also does not clearly illustrate the physical side
threat model.

Authors in [1] present a MiTM attack on PMUs and PDCs
by generating IEEE C37.118 packets using Wireshark. The use
of Wireshark for creating a MiTM attack is unrealistic because
it adds latency to the system that can be easily detected.

In [18] the time delay for ICS packets was studied. The au-
thors found that for a normal relay’s TRIP/CLOSE command,
the maximum tolerable delay was between 3 ms to 16 ms.
The maximum delay for a human machine interface (HMI)
workstation to receive updates was between 16 ms to 100 ms.
This is a considerable short time frame for a MiTM intrusion
to modify packets.

To complement these previous works, our contribution is
to investigate MiTM threat scenarios in detail and how in-
tercepted DNP3 packets can cause failures to the physical
system. Using our own libraries to emulate the attacks, we
implement and analyze use case scenarios in a CPS testbed
that simulates a large scale synthetic electric grid based on the
Texas footprint [19], [20], where the attacker’s stealthiness and
its impact on ﬁve and ten simulated substations is evaluated.
Such evaluations play a major role in exploring the threat space
and proposing detection mechanisms. Thus, we also present
detection mechanisms that will enable other smart grid security
researchers and industry stakeholders to detect similar MiTM
attacks.

III. BACKGROUND

This section gives a background on the implementation of
multi-stage MiTM attacks for DNP3 in our emulation-based
cyber-physical power system testbed. First, we present an
overview of DNP3 and MiTM attack types. Our testbed, which
allows us to model these MiTM threat and defense scenarios,
is also explained in this section.

2

A. DNP3

DNP3 [21] is a protocol used in SCADA systems for moni-
toring and controlling ﬁeld devices. The protocol was released
in 1993 for RS-485 serial links but has since been upgraded
to work with TCP/IP networks. It can have multiple network
setups using a master/outstation architecture. One example is
a multi-drop network, where a DNP3 master communicates
with more than one DNP3 outstation. Another example is a
one-on-one network where a DNP3 master communicates with
only one outstation.

There are three layers in the DNP3 protocol:

1) The data link layer ensures the reliability of the physical
link by detecting errors and duplicate frames. As shown
in the example DNP3 packet in Fig. 1, the DNP3 header
has 10 bytes, or octets, including two synchronization
octets (\x05 \x64), followed by a frame length, data link
control information ﬁeld, and source and destination de-
vice addresses. At the end, there is a cyclic redundancy
error (CRC) code to detect any bit errors in the header.
2) The transport layer supports fragmentation and reassem-
bly of large application payloads. Using one octet, it
stores FIR (1 bit), FIN (1 bit) and sequence number
(6 bits), where FIR and FIN determine if the fragment
is the ﬁrst or the last fragment. The sequence number
identiﬁes each fragment so that they can be reassembled
in the correct order before they are sent to the application
layer.

3) The application layer provides services to the DNP3
user software so that DNP3 devices can send and receive
messages. First, the application layer deals with DNP3
devices, known as DNP3 points, and then groups them
according to their type: binary inputs (BI), binary
outputs (BO), analog inputs (AI), analog outputs (AO),
and counter input. Each group is identiﬁed by an index.
Also,
the application layer organizes static data and
events into classes, where Class 0 means static data and
Classes 1, 2, and 3 correspond to events with different
priorities. Static data means the state of a DNP3 point,
whereas an event means a change in the current state.
the
To indicate the purpose of the DNP3 message,
application layer header has a function code (FC) octet

Fig. 1. Hexadecimal representation of a DNP3 packet structure.

3

Function
Code
(Hex)
0x00
0x01
0x02
0x03
0x04
0x05
0x06
0x07
0x08
0x09
0x10
0x13
0x14
0x15
0x16
0x17
0x81
0x82

Operation

Conﬁrm
Read
Wire
Select
Operate
Direct Operate with Acknowledge
Direct Operate without Acknowledge
Freeze with Acknowledge
Immediate Freeze - No Acknowledge
Freeze and Clear with Acknowledge
Freeze and Clear - No Acknowledge
Cold Restart
Enable Spontaneous Messages
Disable Spontaneous Messages
Assign Classes
Delay Measurement
Solicited Response
Unsolicited Response

TABLE I
FUNCTION CODES FOR DNP3 PACKETS [22].

(Table I). There are two ways to send a command from
the master to the outstation: the SELECT OPERATE
where the master sends a select packet to a device in the
outstation (FC:03), followed by the operation it should
perform (FC:04); or the DIRECT OPERATE (FC:05),
where one packet contains the device address with the
operation it should perform.

Similar to other internet protocols, the DNP3 packet con-
tains a header and a payload. The DNP3 payload has multiple
data chunks, consisting of 16-octet data blocks followed by a
two-octet CRC to ensure each data block’s integrity. Inside the
payload, a function code is used to identify the operation the
outstation should perform, as in Table I. The index will tell
the outstation which device within the outstation the master is
requesting the operation to be performed on, or retrieve data
from. As shown in the sample packet in Fig. 1, we can see the
hexadecimal representation of a binary DIRECT OPERATE
DNP3 packet (FC:05). This packet is indexed to close breaker
seven in a substation of the Texas synthetic grid model. This
is indicated by the index 0700, along with the 41 control code
to close the breaker.

As for conﬁdentiality, DNP3 is a clear text – unencrypted
– protocol with no inherent security mechanism [23]. For this
reason, the DNP3 protocol is susceptible to MiTM attacks,
where an outsider can eavesdrop the communication between
two nodes and modify the content of the packets. There have
been numerous studies that try to incorporate encryption onto
the DNP3 protocol using Transport Layer Security (TLS)
encryption. However, this has not been widely adopted since
maintaining time-sensitive public-key certiﬁcate server avail-
able for the DNP3 server and client requires costly upgrades
to existing ﬁeld equipment.

B. ARP Cache Poisoning

The ﬁrst step of the MiTM attack is for the adversary to
impersonate a network device. This is done using address

Fig. 2. Timing diagram for ARP cache poisoning of the substation router (SubRouter) and DN P 3 Outstation prior to the man-in-the-middle attack to
modify the DIRECT OP ERAT E CLOSE command.

packets to the correct device. The adversary in the example in
Fig. 2 changes a DIRECT OPERATE command from CLOSE
to TRIP, as well as a the response from TRIP to CLOSE. As
a result, the DNP3 communication channel remains open, and
neither router nor outstation suspects that their packets are
being intercepted.

The MiTM time diagram in Fig. 2 shows that the majority
of the delay is at the adversary node, where the DIRECT
OPERATE command is modiﬁed. This processing delay, or
data injection delay, is the amount of time the adversary needs
to ﬁlter the DNP3 packets, modify the packets’ contents, and
recalculate the DNP3 layers’ CRC and TCP header checksum.
A small portion of the delay time is due to the longer route
the packet must travel after the ARP cache poisoning, since
the packet is going through an extra node – the adversary.

C. Integration of MiTM attacks in RESLab Testbed

The MiTM attacks in our work are programmed to perform
a staged intrusion, by trespassing into the broadcast domain
of one substation’s local area network (LAN). The trespassing
could be a result of the adversary getting physical access to
the substation site or by getting the credentials and remote
access of one of the local devices.

To simulate a substation LAN and control center, we use
the RESLab testbed [24], shown in Fig. 3, which is a CPS
testbed comprised of the following components:

• Network Emulator - the Common Open Research Emu-
lator (CORE) [25] emulates the communication network.
CORE is a Linux-based application maintained by the
U.S. Naval Research Laboratory, that uses FreeBSD jails

Fig. 3. The RESLab emulation-based testbed architecture.

resolution protocol (ARP) spooﬁng, or ARP cache poisoning,
where the adversary sends an unsolicited ARP messages to the
targeted node. These messages are used to link the adversary’s
hardware address – or media access control (MAC) address –
with the internet protocol (IP) address of the targeted device.
As illustrated in Fig. 2, the adversary sends an unsolicited
ARP frame to the substation router telling the router to
correlate the outstation’s IP address with the adversary’s MAC
address. Thus, when the substation router needs to deliver a
packet to the outstation, the router will instead forward it to
the adversary. Similarly, the adversary sends an unsolicited
ARP packet to the outstation node so that it maps the router’s
IP address to the adversary’s MAC address. After these
unsolicited ARP packets, the adversary receives all packets
sent between outstation and router. The adversary can now
read or modify the packets’ contents, before it forwards the

4

Fig. 4. The RESLab testbed network topology emulated in CORE. The arrows show the data ﬂows and virtual machine interconnections for our use cases
(Section IV).

conﬁgured as routers, switches, servers, and personal
computers to create various emulated network nodes.
• DNP3 Master - there are two different DNP3 masters in
the RESLab testbed: the OpenDNP3 and the SEL-3530
real-time automation controller (RTAC). The OpenDNP3
is a DNP3 master application with a command line inter-
face that is used to remotely operate outstation devices.
The SEL-3530 RTAC is a cyber-physical component
connected to the testbed, that in this instance is being
used as a DNP3 master.

• DNP3 Outstation - PowerWorld Dynamic Studio (PWDS)
is a real-time simulation engine for high voltage power
systems [26]. In this paper, we use PWDS to simulate
the synthetic Texas 2000-bus model [20] as our exemplar
power system.

• Intrusion Detection System - Snort [27] is being used in
RESLab as the rule-based, open-source intrusion detec-
tion system (IDS). It is conﬁgured to generate alerts for
ARP cache poisoning and FDI attacks.

• Storage and Visualization - The Elasticsearch, Logstash,
and Kibana (ELK) [28] stack probes and stores all virtual
and physical network interfaces’ trafﬁc, in addition to
storing all Snort alerts generated during each use case.
This data can be queried using Lucene queries to perform
in depth visualization and cyber data correlation.

• Cyber-Physical Resilient Energy Systems (CYPRES) Ap-
plication - CYPRES aggregates information, i.e., from
the cyber side CORE emulation environment, from the
power side PWDS, as well as from the DNP3 masters
regarding the communication status of DNP3 packets. All
these data sets are then analyzed.

The RESLab testbed components are hosted in different
virtual machines with the vSphere virtualization platform, as

Use case
Use Case 1
Use Case 2
Use Case 3
Use Case 4

Sequence of Function Call
Alg. 1
Alg. 2
Alg. 3 → Alg. 4 → Alg. 2
Alg. 3 → Alg. 4 → Alg. 2→ Alg. 4

TABLE II
THE SEQUENCE OF FUNCTION CALLS TO THE MITM ALGORITHMS
DESCRIBE
IN SECTION IV FOR EACH USE CASE.

illustrated in Fig. 3. In the middle, we have CORE which
emulates a communication network that allows the DNP3
masters and outstation to interact. On the left side, CORE
connects the utility control center, where there is a DNP3
master modeled using OpenDNP3 libraries and SEL-RTAC.
On the right side, CORE connects the DNP3 outstations
running in PWDS.

The network topology of CORE is shown in detail
in
Fig. 4, where the OpenDNP3 master and SEL-RTAC are
connected to the CORE’s network through virtual port ens192.
To emulate the outstations, the synthetic power system in
PWDS is connected through virtual port ens224. When the
DNP3 communication link is not ARP cache poisoned, the
trafﬁc ﬂows directly from ens192 to ens224. However, when
the adversary cache poisons the DNP3 communication link, all
trafﬁc between the control center and outstation passes through
the adversary node, as shown by the dotted arrows.

IV. MITM ATTACKS ON DNP3

In this section four different MiTM attack algorithms are
described. Each algorithm is used in a different sequence
to generate the FDI and FCI use cases. Table II shows the
order in which each algorithm is used for the four use cases.
the adversary script calls
For example,

in U se Case 3,

5

Algorithms 3, 4, and 2. The function of each algorithm is
described in the proceeding paragraphs.

A. Scapy MiTM Script

The MiTM attack scripts are programmed using the Scapy
Project Python wrapper [12]. Scapy is a powerful library that
can modify frames and/or packets in real-time. The library has
many built-in packet dissectors for applications using either
user datagram protocol (UDP) or transmission control protocol
(TCP). However, DNP3 is not one of the supported TCP
applications. Fortunately, [29] introduces a Scapy extension
for DNP3, which we use to dissect and ﬁlter DNP3 packets.
Here is how it works. Scapy reads all trafﬁc sent to the
adversary once the route is ARP cache-poisoned. Then, the
DNP3 extension along with Scapy’s native libraries ﬁlters
trafﬁc based on IP, TCP, and DNP3 header information. For
instance, if the function code of a captured DNP3 packet is
(FC:05), it indicates an analog or a binary DIRECT OPERATE
command. Thus, the adversary needs to have its value modiﬁed
before it forwards the packet to the original destination. If the
TCP packet does not have a function code, it is not a DNP3
packet and the adversary only forwards it to the destination.
This process is not as straightforward as it may seem. First,
the total process must be optimized to take the least amount
of processing time as possible. Second, the DNP3 trafﬁc is
ﬁltered by function code and then by control code to determine
if the payload is an analog or binary command. Third, in order
to keep the operator unaware that the wrong command has
been sent to the outstation, the acknowledgement number of
each DNP3 command packet is used to ﬁlter the appropriate
response packet, that is changed to match the original com-
mand sent by the control center.

B. Binary Operate

Substation breakers are represented by binary points (BI
or BO) that can have their states updated remotely by DNP3
binary DIRECT OPERATE packets. Each point can either be
opened (tripped) or closed. The TRIP action will disconnect or
de-energize a line, a CLOSE will energize an open a line. The
MiTM script inverts the binary command. In other words, a
TRIP command is forced to a CLOSE command, or vice-versa.
Algorithm 1 describes the process to invert a binary DI-
RECT OPERATE packet. After a received packet (recv pkt)
is identiﬁed as a DNP3 binary DIRECT OPERATE packet,
its TCP header checksum is removed, because Scapy auto-
matically recalculates the TCP header checksum if there is
not one detected when forwarding the frame. The recv pkt’s
acknowledgement number is stored as binary operate ack,
so the response packet can be changed to the original binary
value. Then, the DNP3 header is stored as dnp header. The
same is done for the packet’s payload or dnp pl. Next, the
payload is bisected around the control code, as in Fig. 1. The
ﬁrst half of the payload is stored under the dnp f ront. The
second half is stored under the dnp end. If the packet’s control
code is a CLOSE command (‘41’), it is modiﬁed to be a TRIP
command (‘81’), or vice-versa.

Algorithm 1 MiTM attack on binary control commands

function modif y binary direct operate(recv pkt)
binary operate ack = recv pkt[T CP ].ack
mod pkt = recv pkt[T CP ]
Delete mod pkt.checksum
dnp header = mod pkt.pl[: dnp hdr size]
dnp pl = mod pkt.pl[dnp hdr size :]
dnp f ront = mod pkt.pl[dnp hdr size : bin loc]
dnp end = mod pkt.pl[bin loc + 1 :]
dnp mid = mod pkt.pl[bin loc]
if dnp mid == b(cid:48)nx41(cid:48) then dnp mid = b(cid:48)nx81(cid:48)
else dnp mid = b(cid:48)nx41(cid:48)
end if
merged pl = Join[dnp f ront, dnp mid, dnp end]
pl with crc = update crc payload(merged pl)
mod pkt.pl = Join[dnp header, pl with crc]
mod pkt = send to outstation(mod pkt)

return mod pkt, binary operate ack
end function

Then,

the DNP3 payload is

reassembled by join-
ing the dnp f ront, dnp mid, and dnp end together as
merged pl. The reassembled payload is passed to the
update crc payload function, which comes from the DNP3
Scapy extension [29]. Finally, the MAC address in the frame’s
header is updated to the MAC address of the outstation, and
the adversary forwards the frame to the outstation.

C. Analog Direct Operate

The setpoints of generators and other controls are repre-
sented by analog points (AI or AO) in the DNP3 protocol.
Each setpoint can be varied by the DNP3 master. In the MiTM
script, any analog DIRECT OPERATE setpoint is forced to
a lower value. The lower value ramps down the generator
without tripping it. Algorithm 1 inverts the control code for
a binary DIRECT OPERATE command. Algorithm 2 changes
analog values instead of binary values. The main difference
between the two algorithms is dnp mid which is an analog
value that is modiﬁed in Algorithm 2. The analog value is a
four-octet ﬂoat value that is encoded with a one-octet control
status. In the update new val() function, the analog value
in the original recv pkt is changed to a forged value. Once
the forged value is placed in the correct position, the DNP3
payload CRC, TCP header checksum, and the MAC address
are updated before the packet is forwarded to the outstation.

D. Polled Measurement Sniff and Store

To target the intended DNP3 packet, the MiTM script must
ﬁrst sniff through all the network trafﬁc between the substation
gateway and PWDS. Then, each packet
the MiTM script
receives is ﬁltered by its function code. For every ﬁfth packet
with a DNP3 function code of ‘81’, the analog and binary
data value is stored in the adversary’s machine. Not every read
response packet is stored since the processing time for these

6

Algorithm 2 MiTM attack on analog control commands
1: function modif y analog direct operate(recv pkt)
analog operate ack = recv pkt[T CP ].ack
2:
mod pkt = recv pkt[T CP ]
3:
Delete mod pkt.checksum
4:
dnp header = mod pkt.pl[: dnp hdr size]
5:
dnp pl = mod pkt.pl[dnp hdr size :]
dnp f ront = mod pkt.pl[dnp hdr size : alg loc]
dnp end = mod pkt.pl[anlg loc + 5 :]
dnp mid = mod pkt.pl[anlg loc + 1 : anlg loc + 5]
dnp mid = update new val(dnp mid)
merged pl = Join[dnp f ront, dnp mid, dnp end]
pl with crc = update crc payload(merged pl)
mod pkt.pl = Join[dnp header, pl with crc]
mod pkt = send to outstation(mod pkt)

12:
13:
14:
15: return mod pkt, analog operate ack
16: end function

6:
7:
8:
9:
10:
11:

packets is relatively high and would lead to more retransmitted
packets.

Algorithm 3 describes how the read response packets are
stored in a dnpDatabase. A DNP3 response payload for poll
request consists of collection of the DNP3 points stored in
the datachunks with the chunk size of 18 bytes (16 bytes of
payload and two bytes of CRC). First, the packet data dnp pl
is checked to see if it contains one or more datachunks. For
the payload with at least one datachunk, each dnp chunk’s
CRC is removed and its contents are concatenated into con-
tiguous bytes of BI, AI, BO, and AO points. Then, based
on the header information bi hdr, ai hdr, bo hdr, ao hdr,
the number of DNP3 points under each category bi count,
ai count, bo count, ao count is extracted. The information
such as the pointIndex, value, chunkIndex, pointT ype of
each DNP3 point is stored in a dnpDatabase classiﬁed by
the source address of the packet, which is unique to each
outstation number. The pointIndex stores the actual DNP3
index. The value stores the value associated with the DNP3
point. The pointT ype indicates the type of the DNP3 point.
The purpose of storing chunkIndex is to identify the location
of the DNP3 point in the datachunks. These attributes are
further used by the intruder in Algorithm 4 to modify the
measurement in a speciﬁc location, which results in a faster
modiﬁcation of the DNP3 payload.

E. Polled Measurements Modiﬁcation

Periodically, the master polls each outstation that is con-
nected to it for updates on the binary and analog points. In
the RESLab testbed, the polling interval varies from 30 to
60 s. When polled, an outstation responds with a list of all
the binary and analog points housed within that outstation.
There are multiple ways this data can be manipulated. For
instance, the poll measurements can be spoofed to a wrong
value, causing the operator to send the incorrect command to
the outstation. Or these updates can be forged so the operator

Algorithm 3 MiTM attack on snifﬁng measurements

1: function snif f read response(recv pkt, outstation)
2:
3:
4:
5:

mod pkt = recv pkt[T CP ]
Delete mod pkt.checksum
dnp header = mod pkt.pl[: dnp hdr size]
dnp pl = mod pkt.pl[dnp hdr size :]
chunk size = 18
dnp chunks = len(dnp pl)/chunk size
if dnp chunks == 0 then

send to master(mod pkt) return mod pkt

end if
Store each data chunks in dnp chunks pl
dnp pl without crc = Remove 2 bytes of CRC from

each dnp chunks pl

dnp reassembled = Join(dnp pl without crc)
Obtain

ai pl,bo hdr,
bo pl,ao hdr, ao pl using bi count,ai count, bo count,
ao count

ai hdr,

bi hdr,

bi pl,

Obtain start and end index for BI, AI, BO, AO

group types

Store DN P 3P oints for each point types
Create dnpDatabase for outstation using each point

in DN P 3P oints for BI, AI, BO, AO types

6:
7:
8:
9:
10:
11:

12:

13:
14:

15:

16:
17:

return dnpDatabase

18: end function

will choose not to send a command to an outstation, when
he/she should.

The dnpDatabase containing all the datapoints captured
in Algorithm 3 is passed to the modif y read response()
function, shown in Algorithm. 4. A list of BI, BO, AI, and
AO points that the MiTM attack intends to use are contained
in the variable M odP oints that is passed to the function. Each
point listed in M odP oints is modiﬁed in the dnpDatabase,
and the CRC for each datachunk is updated. BI and BO
points have only one-octet and therefore can be contained
in one datachunk (lines 7-10 in Algorithm 4). However, AI
and AO are ﬁve octets long and can be split between two
datachunks (lines 11-19 in Algorithm 4). Each datachunk that
is modiﬁed must have its CRC recalculated for the master to
accept the packet.

F. Acknowledgements Modiﬁcation

After a binary or analog DIRECT OPERATE packet is
received at an outstation, a DNP3 acknowledgement packet
is returned stating the action was performed. When the MiTM
script changes the binary or analog command or value to per-
form an incorrect action, the outstation’s response is a telltale
sign that the DNP3 communication channel is compromised.
For the MiTM to remain unnoticed by the control center’s
operator, the DNP3 acknowledgement from the outstation must
be modiﬁed. When a binary CLOSE command is sent by the
operator, the MiTM scrip changes the command to a binary
TRIP and then forwards it to the outstation. Correspondingly,
in the acknowledgement, the outstation sends a binary re-

7

Algorithm 4 MiTM attack on modifying measurements

1: function modif y read response(dnpDatabase,M odP oints)
2:
3:
4:
5:

mod pkt = recv pkt[T CP ]
Delete mod pkt.checksum
for dnp3P oint in M odP oints do

dnp header = mod pkt.pl[: dnp hdr size]
dnp pl = mod pkt.pl[dnp hdr size :]
if dnp3P oint.pointT ype is BI ∨ BO then

6:
7:
8:

9:

10:
11:
12:

13:
14:

15:
16:
17:
18:
19:

bin loc = using dnp3P oint.chunkIndex and

dnp3P oint.pointIndex

Follow steps 7 to 15 in Alg. 1

end if
if dnp3P oint.pointT ype is AI ∨ AO then

anlg loc = using dnp3P oint.chunkIndex

and dnp3P oint.pointIndex

if len(dnp3P oint.chunkIndex) > 1 then

Process

the dnp3P oint.chunkIndex[0]

and dnp3P oint.chunkIndex[1] separately

end if
if len(dnp3P oint.chunkIndex) == 1 then

Follow steps 7 to 14 in Alg. 2

end if

end if

end for
mod pkt = send to master(mod pkt)

20:
21:
22: return mod pkt
23: end function

sponse stating that the breaker is opening. The intruder then
modiﬁes the true response into a binary CLOSE response
and forwards it to the operator. This leaves the DNP3 master
unaware that the wrong action has been sent to the outstation.
Algorithm 1, which is used to modify the binary DI-
RECT OPERATE packet, modiﬁes the binary operate response
packet. Similarly, Algorithm 2 modiﬁes the analog operate
response packet.

V. SNORT CONFIGURATION FOR MITM ATTACK

It is essential for utility companies to monitor and secure
their networks from various forms of cyber threats. Generally,
this comes in the form of an IDS that can detect vulnerabilities
in a network and generate alarms. Snort is a open-source
IDS [27] that can be conﬁgured to dissect Ethernet packets to
monitor for a variety of attacks. Each type of attack has a pre-
processor which can be enabled in the Snort’s conﬁguration
ﬁle. Then, rules based on the data the pre-processors collects
are created to generate alerts. The alerts can be displayed in
real-time or saved to a ﬁle.

During each trial, Snort is running in the substation gate-
way or SubRouter (IP: 192.168.0.4), shown in Fig. 4. The
Snort ARP and DNP3 pre-processors are used. In the Snort
the MAC addresses of the SubRouter
conﬁguration ﬁle,
and DN P 3 Outstation (IP: 192.168.0.5) are white-listed
(Listing 1), where a list of known IP addresses and their MAC
addresses within a LAN is maintained by Snort [30]. This

allows it to detect if the MAC address has changed from the
listed IP address, which indicates an attempt to poison the
ARP table of the router. The DNP3 pre-processor (Listing 2)
detects a DNP3 packet and checks if the CRC is correct; if
not, an alert is generated. The pre-processor is conﬁgured to
detect when a DNP3 DIRECT OPERATE packet is sent.

Listing 1. ARP pre-processor enabled in Snort conﬁguration ﬁle

p r e p r o c e s s o r

a r p s p o o f d e t e c t h o s t :

(cid:44)→ 1 9 2 . 1 6 8 . 0 . 4 0 0 : 0 0 : 0 0 : a a : 0 0 : 0 2

p r e p r o c e s s o r

a r p s p o o f d e t e c t h o s t :

(cid:44)→ 1 9 2 . 1 6 8 . 0 . 5 0 0 : 5 0 : 5 6 : 9 c : 9 d : 7 0

Listing 2. DNP3 pre-processor enabled in Snort conﬁguration ﬁle

p r e p r o c e s s o r dnp3 : p o r t s {20000} \

memcap 262144 \
c h e c k c r c

With the pre-processors enabled, custom rules are created.
Rules are added to generate logs that can be used to alert
the operator. The ﬁrst three alerts, R1, R2, and R3, indicate
an ARP cache poisoning. The next two alerts, R4 and R5,
notify when a DNP3 DIRECT OPERATE packet is sent to
the outstation.

Listing 3. ARP and DNP3 speciﬁc alerts conﬁgured in Snort

R1 a l e r t

( msg : ”

(cid:44)→ ARPSPOOF ETHERFRAME ARP MISMATCH SRC
(cid:44)→ ” ;
(cid:44)→ m e t a d a t a :
(cid:44)→ c l a s s t y p e : bad −unknown ;

s i d : 2 ; g i d : 1 1 2 ;

r u l e − t y p e p r e p r o c

r e v : 1 ;

)

;

R2 a l e r t

( msg : ”

(cid:44)→ ARPSPOOF ETHERFRAME ARP MISMATCH DST
(cid:44)→ ” ;
(cid:44)→ m e t a d a t a :
(cid:44)→ c l a s s t y p e : bad −unknown ;

s i d : 3 ; g i d : 1 1 2 ;

r u l e − t y p e p r e p r o c

r e v : 1 ;

)

;

R3 a l e r t

( msg : ”

(cid:44)→ ARPSPOOF ARP CACHE OVERWRITE ATTACK
(cid:44)→ ” ;
(cid:44)→ m e t a d a t a :
(cid:44)→ c l a s s t y p e : bad −unknown ;

s i d : 4 ; g i d : 1 1 2 ;

r u l e − t y p e p r e p r o c

r e v : 1 ;

)

;

R4 a l e r t

t c p $EXTERNAL NET any −>
(cid:44)→ 1 9 2 . 1 6 8 . 0 . 5 20000 ( msg : ”DNP3 S n o r t
(cid:44)→ DIRECT OPERATE” ;
f l o w : e s t a b l i s h e d ,
(cid:44)→ t o s e r v e r ; d n p 3 f u n c : d i r e c t o p e r a t e
(cid:44)→ ;
R5 a l e r t

s i d : 1 2 3 0 0 0 ; )
t c p $EXTERNAL NET any −>
(cid:44)→ 1 9 2 . 1 6 8 . 0 . 5 20000 ( msg : ”DNP3 S n o r t
(cid:44)→ OPERATE” ;
(cid:44)→ t o s e r v e r ; d n p 3 f u n c : o p e r a t e ;
(cid:44)→ : 1 2 3 0 0 2 ; )

f l o w : e s t a b l i s h e d ,

s i d

VI. RESULTS AND ANALYSIS

This section brieﬂy describes the experiment setup in the
RESLab testbed, then presents the results of four MiTM use
cases. In addition, we show how Snort alerts can be used

8

to detect the MiTM attack. Snort is operating in a Network
Intrusion Detection System (NIDS) mode at the substation
router, protecting the substation’s LAN.

A. Experimental Setup

As shown in RESLab testbed in Fig. 3, the DNP3 master and
the SEL RTAC are connected through vSphere’s control center
virtual local area network (VLAN) to the CORE emulator.
The DNP3 outstations, modeled in PWDS, are connected
through vSphere’s substation VLAN to the CORE network.
In most known cyber attacks on an ICS network, the intruder
had to perform multi-stage intrusions to reach the targeted
grid components. Since this work focuses on the dynamics
of MiTM attacks, the prior stages do not play a major role.
Hence, we assume the intruder, after a reconnaissance stage,
has remote access to one of the computer nodes in the
substation LAN, which in this instance is the adversary node.

B. Evaluation Metrics

The strength of the MiTM attack is determined by analyzing
the average round trip time (RTT), retransmission rate, and
average processing time of DNP3 packets, as described below.
1) Retransmission Rate: When a packet is sent, the sender
starts a variable-length retransmission timer, and waits
for the acknowledgement. If it does not receive an
acknowledgement before the timer expires, the sender
assumes the packet is lost and retransmits it. During the
MiTM attack, the number of retransmissions increases,
because packets may not be successfully forwarded to
the outstation and the DNP3 master may not receive
the acknowledgement. This may also happen if the ad-
versary cannot forward the acknowledgement it receives
from the outstation. Since the duration of each use case
varies, retransmission rate is used as a metric instead of
the number of retransmissions. The retransmission rate
RR is computed using Eq. 1,

RR = NR/TR

(1)

where NR is the number of retransmitted packets during
the MiTM, and TR is the time interval between the ﬁrst
and the last retransmitted packet in seconds.

2) Average Round Trip Time (RTT): The RTT can be
seen in the time diagram in Fig. 2. It
includes the
network’s propagation delay due to the distance between
nodes,
the added transmission delays as the packet
travels through the adversary node, and the processing
time the adversary takes to modify the commands and
response. Hence, we evaluate the impact of a MiTM
attack on the RTT.

3) Processing time: The processing time depends on the
type of DNP3 trafﬁc the intruder modiﬁes. The process-
ing time for modifying outstation polled responses can
vary based on the outstation data that is polled. The
outstation’s read response depends on the number of
DNP3 points housed at a particular outstation.

The retransmission rate and average RTT are extrapolated
by analyzing Wireshark packet captures (PCAP) data from
the SubRouter’s network interface. The processing delay is
automatically calculated by the MiTM attack script.

C. Modifying Measurements and Commands

The objective of the intruder is to disrupt grid operations.
Details on the sequence of actions that create the FCI and FDI
attacks and how they impact the physical components of the
power system are presented in detail in [24]. Here in this paper
we focus on the impact of the attacks on the communications
network, or cyber telemetry. These are our four use cases:

1) Use Case 1: Branch Control Modiﬁcations.

: Each
binary DIRECT OPERATE command is changed from a
CLOSE to a TRIP command, with any other trafﬁc simply
forwarded. The change in the binary operate command intro-
duces some processing delay, which may cause the packet to
be retransmitted.

2) Use Case 2: Generator Set-Point Modiﬁcation. : When
the MiTM script is running, the analog point for the generator
is set to a lower value, in some cases 20 MW, which will
decrease the generator setpoint from its current value down to
20 MW.

3) Use Case 3: Measurement and Status Modiﬁcation. :
Use Case 3 is a combination of FCI and FDI attacks. After
each polling interval, the DNP3 master will send a read request
packet to each outstation, which then sends a read response
packet back to the master. This read response is ﬁlled with the
all the binary input, analog input, binary output, and analog
output DNP3 points. Next, analog input points in the read
response packet are changed to a lower value lower of 20 MW
or 0 MW. The operator controlling the DNP3 master is then
forced to send an analog DIRECT OPERATE command to
bring the generators back to their original loaded set points.
However, when the operator sends this original set point value
to the generator, the MiTM script is programmed to change
the setpoint to 20 MW or 0 MW.

4) Use Case 4: Measurement and Status Modiﬁcation.
:
The adversary ﬁrst follows the steps of Use Case 3, then
modiﬁes the read response packet of the preceding packets,
based on the actual set point given by the master. Thus, the
master is unaware of the contingency created.

D. Use Cases Implementation

For each use case, we alter the polling intervals and the
number of polled DNP3 outstations. The polling intervals
tested were 30 and 60 s, while the number of polled DNP3
outstations were ﬁve and ten. For instance,
the scenario
U C1 10 OS 30 means that we implemented U se Case 1
with ten outstations and a polling interval of 30 s. In each
scenario, the normal operation is conducted ﬁrst without the
MiTM attack. Then, the operation is conducted again with the
attack to analyze its impact. Finally, the attack is stopped and
the network restored.

The main reason for choosing polling intervals of 30 and
60 s is that most DNP3 masters have polling rates of 30 s,

9

1 min, or 5 min, with a maximum of 15 min. A polling interval
of more than two minutes has little impact on attack strength
because the adversary processing time is less than 60 to 70 ms
(see Section VI-G).

Similarly, we choose outstation numbers of ﬁve and ten
since our objective is to study the communication dynamics
of an impacted outstation, and how the number of outstations
becomes a limitation on the attack success probability. The
numbers of ﬁve and ten coincide with our use cases in
the Texas 2000-bus model where each utility control center
communicates with at least two and at most 25 substations.
Because the RESLab testbed uses CORE, which is an emulator
and not a simulator,
limitations to the
number of substations that can be modiﬁed by the MiTM
script. This number in our testbed is about 50 substations;
however, this depends on the amount of memory and capacity
of the network interface card’s buffer that
is allocated to
CORE. Since CORE is an emulator, it demonstrates more
realistically the physical limitations an actual adversary would
have to experience in order to create a successful MiTM attack.

there are practical

E. Impact of Polling Rates and Number of Outstations on
Retransmission

High polling rates, or low polling intervals, result in packet
losses during an attack due to the limitations of an adversary’s
resources to process all the command and response DNP3
trafﬁc. Hence, we study the impact of polling rates on the
number of retransmissions. Fig. 5 shows the impact of different
scenarios on the retransmission rate. Scenarios with 60 s
polling intervals result in less retransmissions in comparison
to 30 s scenarios. For example, in U C1 10 OS 30 the retrans-
mission rate is almost four times that of U C1 10 OS 60.

Note that the U C1 5 OS 30 and U C1 5 OS 60 are not
included in Fig. 5, because Use Case 1 requires eight or more
outstations to have their binary operate packets inverted in
order to generate a cascading failure in the Texas 2000-bus
topology.

The number of DNP3 outstations polled also affects the
amount of trafﬁc the intruder is required to process. A larger
number of outstations causes more trafﬁc. The network buffer
temporarily stores incoming packets before they are processed.
Due to the limitation on the buffer size, the intruder may
not be able to process all the trafﬁc that traverses through
it, which results in some attacks failing. Hence, the number
of retransmissions increases. For example, from Fig. 5 we can
observe the retransmission rate for U C2 10 OS 30 with ten
polled outstations is almost 2.5 times that of the U C2 5 OS 30
case with ﬁve polled outstations.

F. Impact on Average Round Trip Time

The RTT can be an indicator that an intruder is intercepting
network trafﬁc. RTT is also affected by the number of outsta-
tions polled and how often each is being polled. Fig. 6 shows
the DNP3 packets that resulted in a high RTT and had to be
retransmitted for different use cases. The majority of the DNP3
trafﬁc is received before the retransmission timer expires,
shown by the dashed-line. The line shows the cut-off time for
the DNP3 retransmission timer, which was set to 7.0 s. We
have observed that there is a longer delay when ten outstations
are polled, compared with the number of retransmissions for
the scenarios with ﬁve outstations.

G. Processing Time by Packet Type

The processing time at the adversary node is different for
each packet type, as shown in Fig. 7, where we measure
the average time to forward packets between the substation
gateway and outstation by packet type. The lowest forwarding
time and therefore most difﬁcult packet type to detect the
MiTM attack were the bypass packets, which took 22.775 ms
to process. In the bypass packets, the adversary only modiﬁes
the source and destination MAC addresses of the frame. Next,
the average processing time for an analog DIRECT OPERATE
packet is higher at 27.693 ms, followed by binary DIRECT
OPERATE taking an average of 30.217 ms. The highest

Fig. 5. Retransmission rate of DNP3 trafﬁc for each scenario.

Fig. 6. Round trip time for DNP3 trafﬁc for each scenario.

10

To illustrate what is displayed in RESLab testbed’s dash-
board, Fig. 9 shows the ARP alerts that are generated when
an ARP cache poisoning is detected based on the rules R1,
R2, and R3, illustrated in Listing 3 in Section V. In addition,
DNP3 alerts are generated when DNP3 DIRECT OPERATE
packets are detected as per R4 and R5 rules.

We can conclude that during the time-period an ARP spoof
is detected, the DNP3 DIRECT OPERATE packet is rerouted
to the adversary’s node, which indicates that the MiTM script
is modifying the operation. By monitoring the RESLab’s
is possible to determine with a one-minute
dashboard,
resolution which DNP3 packets are potentially compromised
and should be discarded. The one-minute intervals that contain
the DNP3 packets that should be discarded are shown by the
blue lines in Fig. 9.

it

VII. CONCLUSION

Non-stealthy MiTM attacks can be developed and detected
from features such as CRC mismatch, acknowledgements, and
round trip times. However, if the intruder is stealthy enough
to forge the CRCs, modify the acknowledgement packets, and
reduce processing time by modifying selected DNP3 points in
a payload, it can be difﬁcult to detect such FDIs or FCIs.

There are two main contributions this paper provides to the
reader. The ﬁrst is a step-by-step framework that describes
how to implement four DNP3-based MiTM attacks on a
SCADA system’s network. The second is a method to detect
MiTM attack trafﬁc by correlating Snort IDS alerts with
ARP and DNP3 packet data, using network metrics such as
retransmission rate and average RTT. It is important to monitor
these metrics to detect the signature of a MiTM attack. The
processing time at the adversary causes the RTT to increase,
and the increased RTT causes retransmissions. These causal
behaviors can be extracted in the form of timestamped features
for training machine-learning-based detection algorithms.

Our results show that as the number of polled outstations
increases, the DNP3 packets are delayed, and the efﬁciency
of the MiTM attack decreases. This causes more DNP3
retransmissions, because consecutive packets from different
outstations arrive at the adversary faster than the MiTM script
can modify and forward the ﬁrst packet. Also, we observe
different processing times at the adversary for different types
of DNP3 trafﬁc. Read response packets had the longest pro-
cessing time. Then, based on these results, we present defense
recommendations such as showing how cyber telemetry can be
used to detect stealthy MiTM attacks. Results show that while
rule-based IDS such as Snort can detect ARP spoofs using
existing pre-processors, they can still result in higher false
positives due to rule selection criteria. Hence, this work also
provides recommendations for future work to incorporate met-
rics such as average RTT and retransmission rate into security-
centric data analysis on anomaly-based attack detection.

ACKNOWLEDGMENT

This research is supported by the US Department of En-
ergy’s (DoE) Cybersecurity for Energy Delivery Systems

Fig. 7. Average processing time by packet type at the adversary node.

Fig. 8. Data ﬂow pipeline for Kibana data processing and graph generation.

processing time is for the read response packets, which take
an average of 35.415 ms.

The processing time is directly correlated to the amount of
trafﬁc and the number of operations the MiTM script has to
perform on each packet. For this reason, the bypass trafﬁc took
the least amount of time, as the adversary only updates the
MAC address and forwards it to the original destination. Next,
the operations to the binary and analog DIRECT OPERATE
packets include modifying the value sent by the operator,
recalculating the CRC, and forwarding the forged packet to the
outstation. The read response packets take the most number
of operations: two to three analog/binary values are modiﬁed,
then the CRC for multiple data blocks are calculated and
updated, and the packet is forwarded to the master.

H. Snort Detection

the Snort

In the RESLab testbed,

logs and alerts are
collected by Logstash, an open source tool that is used with
Kibana to create dashboards for data analysis and visualiza-
tion. After the Snort log data is processed by Kibana, the
frequency of the ARP and DNP3 alerts show which DNP3
packets are being compromised at what time.

During each use case, the PCAP data containing unsolicited
ARP and DNP3 trafﬁc, and the Snort’s alert log ﬁles are
collected by Logstash, which ﬁlters and formats the data.
Then, as shown in Fig. 8, the data is stored in the Elasticsearch
database. Kibana then acts as the front-end for the Elastic-
search database, by creating graphs that show the correlation
between Snort alerts, ARP frames, and DNP3 packets.

11

Fig. 9. ARP and DNP3 Snort alerts show potentially compromised DNP3 packets.

program under award DE-OE0000895.

REFERENCES

[1] J. J. Fritz, J. Sagisi, J. James, A. S. Leger, K. King, and K. J. Duncan,
“Simulation of man in the middle attack on smart grid testbed,” in 2019
SoutheastCon, 2019, pp. 1–6.

[2] R. Langner, “Stuxnet: Dissecting a cyberwarfare weapon,” IEEE Security

& Privacy, vol. 9, no. 3, pp. 49–51, 2011.

[3] R. M. Lee, M. J. Assante, and T. Conway, “Analysis of the Cyber Attack
on the Ukrainian Power Grid: Defense Use Case by SANS ICS ,” https:
//ics.sans.org/media/E-ISAC SANS Ukraine DUC 5.pdf.

[4] G. Liang, S. Weller, J. Zhao, F. Luo, and Z. Dong, “The 2015
ukraine blackout: Implications for false data injection attacks,” IEEE
Transactions on Power Systems, vol. PP, pp. 1–1, 11 2016.

[5] E. Targett.

(2020, March) High Voltage Attack: EU’s Power
[Online]. Available: https:

Grid Organisation Hit by Hackers.
//www.cbronline.com/news/eu-power-grid-organisation-hacked

[6] A. Kundu, A. Sahu, E. Serpedin, and K. Davis, “A3d: Attention-based
auto-encoder anomaly detector for false data injection attacks,” Electric
Power Systems Research, vol. 189, p. 106795, 2020. [Online]. Available:
http://www.sciencedirect.com/science/article/pii/S0378779620305988
[7] Y. Yuan, Z. Li, and K. Ren, “Modeling load redistribution attacks in
power systems,” IEEE Transactions on Smart Grid, vol. 2, no. 2, pp.
382–390, 2011.

[8] W. Wang and Z. Lu, “Cyber security in the smart grid: Survey and
challenges,” Computer Networks, vol. 57, p. 1344–1371, 04 2013.
[9] R. Liu, C. Vellaithurai, S. S. Biswas, T. T. Gamage, and A. K. Srivastava,
“Analyzing the cyber-physical impact of cyber events on the power grid,”
IEEE Transactions on Smart Grid, vol. 6, no. 5, pp. 2444–2453, 2015.
[10] M. Kezunovic, A. Esmailian, M. Govindarasu, and A. Mehrizi-Sani,
“The use of system in the loop, hardware in the loop, and co-modeling
of cyber-physical systems in developing and evaluating new smart grid
solutions,” in Proceedings of the 50th Hawaii International Conference
on System Sciences, 2017.

12

[11] A. Ashok, P. Wang, M. Brown, and M. Govindarasu, “Experimental
evaluation of cyber attacks on automatic generation control using a
cps security testbed,” in 2015 IEEE Power & Energy Society General
Meeting.

IEEE, 2015, pp. 1–5.

[12] B. Burns, D. Killion, N. Beauchesne, E. Moret, J. Sobrier, M. Lynn,
E. Markham, C. Iezzoni, P. Biondi, J. Granick, S. Manzuik, and
P. Guersch, Security Power Tools. O’Reilly Media, Inc., 2007.
[13] B. Chen, K. L. Butler-Purry, A. Goulart, and D. Kundur, “Implementing
a real-time cyber-physical system test bed in rtds and opnet,” in 2014
North American Power Symposium (NAPS), 2014, pp. 1–6.

[14] Y. Yang, K. McLaughlin, T. Littler, S. Sezer, E. G. Im, Z. Q. Yao,
B. Pranggono, and H. F. Wang, “Man-in-the-middle attack test-bed
investigating cyber-security vulnerabilities in smart grid scada systems,”
in International Conference on Sustainable Power Generation and
Supply (SUPERGEN 2012), 2012, pp. 1–8.

[15] Y. Yang, H. Xu, L. Gao, Y. Yuan, K. McLaughlin, and S. Sezer,
“Multidimensional intrusion detection system for iec 61850-based scada
networks,” IEEE Transactions on Power Delivery, vol. 32, no. 2, pp.
1068–1078, 2017.

[16] I. A. Oyewumi, A. A. Jillepalli, P. Richardson, M. Ashrafuzzaman, B. K.
Johnson, Y. Chakhchoukh, M. A. Haney, F. T. Sheldon, and D. C. de
Leon, “Isaac: The idaho cps smart grid cybersecurity testbed,” in 2019
IEEE Texas Power and Energy Conference (TPEC), 2019, pp. 1–6.
[17] I. Darwish and T. Saadawi, “Attack detection and mitigation techniques
in industrial control system -smart grid dnp3,” in 2018 1st International
Conference on Data Intelligence and Security (ICDIS), 2018, pp. 131–
134.

[18] X. Lu, Z. Lu, W. Wang, and J. Ma, “On network performance evaluation
toward the smart grid: A case study of dnp3 over tcp/ip,” in 2011 IEEE
Global Telecommunications Conference - GLOBECOM 2011, 2011, pp.
1–6.

[19] A. B. Birchﬁeld, T. Xu, K. M. Gegner, K. S. Shetye, and T. J. Over-
bye, “Grid structural characteristics as validation criteria for synthetic
networks,” IEEE Transactions on Power Systems, vol. 32, no. 4, July
2017.

[20] P. Wlazlo, K. Price, C. Veloz, A. Sahu, H. Huang, A. Goulart, K. Davis,
and S. Zounouz, “A cyber topology model for the texas 2000 synthetic

electric power grid,” in 2019 Principles, Systems and Applications of IP
Telecommunications (IPTComm), 2019, pp. 1–8.

[21] G. Clarke, D. Reynders, and E. Wright, Practical modern SCADA
protocols: DNP3, 60870.5 and related systems. Newnes, 2004.

[22] (2020, June) DNP Function Code Descriptions.

[Online]. Avail-
https://www.proface.com/support/index?page=content&country=

able:
APS GLOBAL&lang=en&locale=en US&id=FA222356&prd=

[23] C. Rosborough, c. Gordon, and B. Waldron, “All About Eve: Comparing
DNP3 Secure Authentication With Standard Security Technologies for
SCADA Communications,” in 13th Australasian Information Security
Conference, vol. 161, 2019.

[24] A. Sahu, P. Wlazlo, Z. Mao, H. Huang, A. Goulart, K. Davis, and
S. Zonouz, “Design and evaluation of a cyber-physical resilient power
system testbed,” 11 2020. [Online]. Available: http://arxiv.org/abs/2011.
13552

[25] J. Ahrenholz, C. Danilov, T. R. Henderson, and J. H. Kim, “Core: A
real-time network emulator,” in MILCOM 2008 - 2008 IEEE Military
Communications Conference, 2008, pp. 1–7.

[26] Glover, T. Overbye, and Sarma, “Powerworld simulator.” [Online].

Available: https://www.powerworld.com/products/simulator/overview

[27] A. D. Orebaugh, S. Biles, and J. Babbin, Snort Cookbook. O’Reilly

Media, Inc., 2005.

[28] “Elasticsearch, Logstash, Kibana

(ELK),”

https://www.elastic.co/

what-is/elk-stack.

[29] N. Rodoﬁle, K. Radke, and E. Foo, “Real-time and interactive attacks
on dnp3 critical infrastructure using scapy,” in Proceedings of the 13th
Australasian Information Security Conference (AISC 2015), 2015, pp.
67–70.

[30] Mel Hawthorne.

is Mac Ad-
dress Filtering? [Online]. Available: https://www.technipages.com/
what-is-mac-address-ﬁltering

September) What

(2020,

13

