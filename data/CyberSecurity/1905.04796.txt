9
1
0
2

y
a
M
2
1

]

R
C
.
s
c
[

1
v
6
9
7
4
0
.
5
0
9
1
:
v
i
X
r
a

Identifying Security-Critical Cyber-Physical
Components in Industrial Control Systems

Mart´ın Barr`ere∗, Chris Hankin∗, Nicolas Nicolaou†, Demetrios G. Eliades†, Thomas Parisini‡
∗Institute for Security Science and Technology, Imperial College London, UK
{m.barrere, c.hankin}@imperial.ac.uk
†KIOS Research and Innovation Centre of Excellence, University of Cyprus
{nicolasn, eldemet}@ucy.ac.cy
‡Department of Electrical and Electronic Engineering, Imperial College London, UK
{t.parisini}@imperial.ac.uk

Abstract—In recent years, Industrial Control Systems (ICS)
have become an appealing target for cyber attacks, having
massive destructive consequences. Security metrics are therefore
essential to assess their security posture. In this paper, we present
a novel ICS security metric based on AND/OR graphs that rep-
resent cyber-physical dependencies among network components.
Our metric is able to efﬁciently identify sets of critical cyber-
physical components, with minimal cost for an attacker, such that
if compromised, the system would enter into a non-operational
state. We address this problem by efﬁciently transforming the in-
put AND/OR graph-based model into a weighted logical formula
that is then used to build and solve a Weighted Partial MAX-
SAT problem. Our tool, META4ICS, leverages state-of-the-art
techniques from the ﬁeld of logical satisﬁability optimisation in
order to achieve efﬁcient computation times. Our experimental
results indicate that the proposed security metric can efﬁciently
scale to networks with thousands of nodes and be computed in
seconds. In addition, we present a case study where we have used
our system to analyse the security posture of a realistic water
transport network. We discuss our ﬁndings on the plant as well
as further security applications of our metric.

Index Terms—Security metrics,

industrial control systems,
cyber-physical systems, AND-OR graphs, MAX-SAT resolution

I. INTRODUCTION

From water and energy plants, to oil, gas, power, manufac-
turing, and automotive facilities, Industrial Control Systems
(ICS) have become an appealing target for attackers over the
last years [1]. Reasons for that include mostly their increased
connectivity to the outside world, their lack of preparedness
for cyber attacks, and the huge impact these attacks may have
on many aspects of modern society. As a vital part of critical
national infrastructure, protecting ICS from cyber threats has
become a high priority since their compromise can result
in a myriad of different problems, from service disruptions
and economical loss, to jeopardising natural ecosystems and
putting human lives at risk. Stuxnet, Industroyer, NotPetya,
and more recently, WannaCry, exemplify the devastating con-
sequences this type of attack may have on critical ICS in-
frastructures [2], [3], [4]. In particular, cyber attacks on these
systems can lead, for example, to ﬂooding, blackouts, or even
nuclear disasters [1].

This work has been supported by the European Union’s Horizon 2020

research and innovation programme under grant No 739551 (KIOS CoE).

Fig. 1.

ICS vulnerabilities by year [5]

In recent years, the number of vulnerabilities affecting ICS
environments has dramatically increased. Figure 1 shows this
behaviour between 2000 and 2015 [5]. In 2015, almost a
half of the ICS security ﬂaws were classiﬁed as high risk
vulnerabilities based on their CVSS v3 scores [6]. In 2017, a
survey conducted over 21 countries, including a considerable
number of ICS companies, shows that 54% of them experi-
enced at least one ICS security incident over the previous 12
months [7]. For large companies (500+ employees), the annual
cumulative loss is reported to be $497,097. During 2017-
2018, an independent study conducted over 850 production
ICS networks indicates that, among many alarming ﬁndings,
69% of the sites have plain-text passwords traversing their ICS
networks, and 53% of them still use obsolete Windows systems
such as Windows XP [2]. Although guidance and standard best
practices are available to increase ICS security [8], the amount
of cyber incidents just keeps increasing [9].

These numbers come as no surprise since ICS environments,
originally designed to work in isolation, suddenly became
immersed into a hyper-connected world, just a few commands
away from malicious actors. We argue that the integration of
these complex environments, involving tangled ensembles of
dependencies between cyber-physical components, has pro-
duced convoluted ecosystems that are hard to control and pro-
tect. As an example, Figure 2 shows an open benchmark water
distribution network that resembles a real city C-Town [10],
and illustrates the scale and structural complexity of these
networks (discussed later in the paper). In that context, security
metrics play a fundamental role since they allow us to under-

 0 50 100 150 2002000200120022003200420052006200720082009201020112012201320142015ICS vulnerabilities per year 
 
 
 
 
 
Partial MAX-SAT problem. The solution to this problem is a
minimal weighted vertex cut in G with regards to node t. This
cut represents the set of critical components with minimal cost
for the attacker such that, if compromised, it will render the
cyber-physical system into a non-operational state.

B. Contributions

Our main contributions are: (1) a mathematical model able
to represent complex dependencies in ICS environments, (2) a
novel security metric and efﬁcient algorithms to identify crit-
ical cyber-physical components, (3) a tool to analyse real ICS
models and an extensive set of experiments on performance
and scalability, and (4) a comprehensive case study conducted
on a subset of a real water transport network that shows the
applicability and further uses of our security metric.

C. Organisation of the paper

Section II discusses related work and existing limitations to
identify critical components in ICS environments. Section III
describes our graph-based modelling of ICS networks whereas
Section IV formalises the proposed security metric. Section V
describes the steps to compute our security metric whereas
Section VI describes our tool (META4ICS) and exempliﬁes
the overall process. Section VII shows our experimental results
in terms of performance and scalability whereas Section VIII
details a case study and further uses of our security metric.
Section IX presents conclusions and future work.

II. RELATED WORK

Since the early 2000s, many research efforts have been
produced to understand and improve the security of industrial
control systems and national critical infrastructure [13], [14].
These works have inspired the need for taking into account
the cyber-physical dependencies between ICS components and
being able to combine them in order to provide quantiﬁable
measurements [1], [15]. As such, the present work considers
the insightful methodology presented in [11]. However, the
latter does not consider concrete algorithms to identify critical
CPS components in ICS networks nor a model able to cap-
ture logical combinations among cyber-physical components
with AND/OR connectives. This paper extends these ideas
by proposing a complete AND/OR graph-based modelling
capable of grasping complex interdependencies among CPS
components.

From a graph-theoretical perspective, our security metric
looks for a minimal weighted vertex cut in AND/OR graphs.
This is an NP-complete problem as shown in [13], [14], [16],
[17]. While well-known algorithms such as Max-ﬂow Min-
cut [18], [19] and variants of it could be used to estimate
such metric over OR graphs in polynomial time, their use for
general AND/OR graphs is not evident nor trivial as they may
fail to capture the underlying logical semantics of the graph. In
that context, we take advantage of state-of-the-art techniques
which excel in the domain of logical satisﬁability and boolean
optimisation problems [20].

Fig. 2. Large-scale Water Distribution Network with 7 tanks, 11 pumps and 4
valves. The system can be operated with 13 PLCs (C-Town Benchmark) [10]

stand the exposure and vulnerability of ICS environments, and
improve their security posture [8]. In particular, the ability to
measure the security level of ICS environments and identify
critical cyber-physical components that should be prioritised
and addressed from a security standpoint becomes essential.
In this paper, we propose an efﬁcient and scalable security
metric intended to identify critical cyber-physical components
in ICS networks. Our work extends the methodology presented
in [11] where the security level of a system is understood
as the minimum number of CPS components an attacker
must compromise in order to disrupt the operation of the
system. In addition, when each CPS component involves a
cost of compromise, our security metric is also able to identify
the set of critical components with minimal cost for the
attacker such that their compromise can take the system to a
non-operational state. Our metric relies on AND/OR graphs
that represent cyber-physical dependencies among network
components and leverages state-of-the-art techniques from the
ﬁeld of logical satisﬁability optimisation to achieve efﬁcient
computation times. Our experimental results indicate that the
proposed security metric can efﬁciently scale to networks with
thousands of nodes and be computed in seconds.

A. Method summary

Roughly stated, our approach takes as input an AND/OR
graph, in the form of a digraph G = (V, E) that represents the
operational dependencies of the ICS environment, and a target
node t. Then, we transform the graph into an equivalent logical
formula that fulﬁls node t. The negation of this formula corre-
sponds to the objective of the attacker, i.e. to disable t, which
is later converted to an equisatisﬁable formula in conjunctive
normal form (CNF) by using the Tseitin transformation [12].
Finally, the CNF formula is used as a basis to build a Weighted

2

A close research area to our problem includes the domain
of attack graphs [21], [22], [23], [24], [25], [26]. While attack
graphs are mainly focused on depicting the many ways in
which an attacker may compromise assets in a computer
network, our approach is essentially different as we consider
that network nodes can be equally compromised. In addition,
attack graphs usually take into account only cyber lateral
movements and do not consider cyber-physical dependencies
among components [1]. Moreover, real ICS models based on
AND/OR graphs might also be cyclic, thus presenting the
interdiction problem [27]. We take a similar approach to that
considered in [28] in order to deal with cycles.

Other attempts to identify critical cyber-physical compo-
nents have been made in the domain of network centrality
measurements [29]. While useful in many type of scenarios
[30], almost all of them are focused on OR-only graph-
based models for IT networks. In addition, we realise that
automating ICS asset mapping is not an easy task for different
reasons, among these, because active probing and scanning
may be too intrusive, which might raise concerns about
operational disruptions. However, understanding the full cyber-
physical ecosystem is vital to maintain healthy Operational
Technology (OT) networks [31], [2]. This is a premise that
many security platforms already take into account, e.g., in the
form of passive monitoring [32], [33]. In the next section,
we introduce our graph-based modelling approach for ICS
environments.

III. ICS NETWORK MODELLING

We model an industrial network W as a directed graph G =

(V, E) that represents the operational dependencies in W .

A. Graph modelling

The graph involves three types of basic vertices, called
atomic nodes (VAT ), that model the different classes of com-
ponents in the network:

• S represents the set of sensor nodes in the network,
• C represents the set of actuator nodes,
• A represents the set of software agents.
We deﬁne VAT = S ∪ C ∪ A. In addition, the graph also
involves two artiﬁcial node types that are used to model logical
dependencies between network components:

• ∆ represents the set of logical AND nodes, and
• Θ represents the set of logical OR nodes.
Based on the previous types, we have that V (G) = VAT ∪

∆ ∪ Θ.

E(G) corresponds to the set of edges among nodes and
their semantics depend on the type of nodes they connect. We
consider three types of basic edges as follows:

• EA,C = {(a, c) : a ∈ A ∧ c ∈ C} represents that agent a

controls the operation of actuator c,

• ES,A = {(s, a) : s ∈ S ∧ a ∈ A} means that agent a
requires measurements from sensor s to fulﬁl its purpose,
• EA,A = {(ai, aj) : ai, aj ∈ A, ai (cid:54)= aj} represents that
agent aj requires input from agent ai to operate normally.

In addition, we consider another two types of edges involv-
ing artiﬁcial logical nodes. In particular, AND and OR nodes
act as special connectors and shall be interpreted from a logical
perspective. A node v reached by an OR node means that
the operational purpose of v can be satisﬁed, i.e. v operates
normally, if at least one of the incoming nodes to the OR
node is also satisﬁed. Alike, a node w reached by an AND
node will be satisﬁed if all of the incoming nodes to the AND
node are also satisﬁed. The following two edge types are also
allowed in E(G):

• Ei∆Θ = {(v, x) : v ∈ V − C, x ∈ ∆ ∪ Θ} represents
incoming connections to AND/OR nodes from any type
of graph node except actuators (C),

• Eo∆Θ = {(x, v) : x ∈ ∆ ∪ Θ, v ∈ V − S} represents
outgoing connections from AND/OR nodes to any type
of graph node except sensors (S).

B. Graph properties

We use G to denote the domain of AND/OR graphs. Let
din : V → N and dout : V → N be two functions that
compute the in-degree and out-degree of a node respectively.
The following properties hold in every instance of G = (V, E),
with G ∈ G:

• dout(c) = 0, ∀c ∈ C (no outgoing edges from actuators)
• din(v) = 1, ∀v ∈ VAT (only one incoming edge on

atomic nodes)

• dout(v) ≥ 1, ∀v ∈ Θ ∪ ∆ (logical nodes must connect to

some destination node)

• din(v) ≥ 2, ∀v ∈ Θ ∪ ∆ (logical nodes combine two or

more nodes)

C. Adversarial model

Our adversarial model considers that an attacker can com-
promise any network node n ∈ VAT at a certain cost ϕ(n),
with ϕ : VAT → R≥0. A compromised node in this context
shall be understood as a CPS component unable to operate
properly, that is, a node incapable of fulﬁlling the purpose
it was designed for. The cost function ϕ(n) is intended to
provide a means to quantitatively express the efforts required
by an attacker to compromise a given node n. We realise that
the instantiation of this cost function may be difﬁcult in some
cases. However, there have been many remarkable advances
in this direction over the last years. For example, the Common
Vulnerability Scoring System (CVSS) is a standard security ef-
fort that provides a means to quantify software vulnerabilities
in the form of a single numerical score [6]. This score reﬂects
the severity of a vulnerability and considers many aspects such
as complexity, exploitability, impact, among others. Overall,
security languages and frameworks such as CVSS underpin
automation and promote knowledge exchange that can be used
to assess the security of industrial networks.

Since CPS components (graph nodes) logically depend on
others to work properly, our adversarial model considers that
the compromise of a node will also affect the operation of the
nodes that depend on it. Therefore, such impact is passed on to
other nodes following a logic-style propagation. Algorithm 1

3

: σ(G, X)

Name
Input: Graph G = (V, E), Nodes to remove X
Output: Updated graph G = (V, E)

1 while X is not empty do
// get first node
Node n ← X.pop()
2
M ← {x ∈ V : (n, x) ∈ E} // nodes reached by n
for x ∈ M do

3
4

if (x ∈ VAT ) or (x ∈ ∆) or (x ∈ Θ ∧ din(x) = 1)

then

end

X.append(x)

// x must be removed

end
// remove n from G
V = V − {n}
E = E − {(v, w) ∈ E : v = n ∨ w = n} // rem. edges

5

6
7
8

9

10
11 end
12 return G = (V, E)

Algorithm 1: Logical node removal σ(G, X)

Fig. 3. AND/OR graph with sensors, software agents and actuators

describes this process from a node removal standpoint in the
form of a function σ(G, X). The function takes as input an
AND/OR graph G and a set of nodes to remove X, and
returns G after deleting the nodes in X as well as the nodes
that logically depend on them, and every edge related to the
removed nodes. Essentially, for each node n that must be
removed, Algorithm 1 analyses the nodes that depend on n
(set M , line 3). A node x that depends on n will be affected
only if x is an atomic node, an AND node, or an OR node
with only one input left (line 5). In any of these cases, node
x is queued for removal (line 6). In other words, only an OR
node with more than one input will remain in the graph when
one of its inputs is removed. Finally, each node marked for
removal is deleted from G along with its respective edges
(lines 9-10). In what follows, we use σ(G, X) to express the
impact of compromised nodes as well as the resulting graph
when such nodes are removed from the network.

D. Simple example

Let us consider a simple example involving the scenario
illustrated in Figure 3. This setup involves ﬁve CPS compo-
nents in the form of atomic nodes: 2 sensors (a and c), 2
software agents (b and d), and 1 actuator (c1). In addition.
the graph includes 2 AND nodes and 1 OR node that express
the logical dependencies among the CPS components. Each
CPS component also has an associated value that represents
its compromise cost where inf means inﬁnite.

The graph reads as follows: the actuator c1 depends on the
output of software agent d. Agent d in turn has two alternatives
to work properly; it can use either the readings of sensor a
and the output from agent b together, or the output from agent
b and the readings of sensor c together. Now, considering the
compromise cost of each CPS component, the question we
are trying to answer is: which nodes should be compromised
in order to disrupt the operation of actuator c1, with minimal
effort (cost) for the attacker? In other words, what is the least-
effort attack strategy to disable actuator c1?

Our example involves many attack alternatives, however,
only one is minimal. For example, the attacker could compro-
mise node d and thus, the target node c1 would be successfully

disconnected from the graph. However, this strategy has cost
10. Another option would be to compromise node b, with a
lower cost of 5. Because node b feeds both AND nodes, these
will be disrupted and consecutively the OR node, which in
turn will affect node d and ﬁnally node c1. In terms of costs,
however, the optimal strategy for the attacker in this case is
to compromise nodes a and c with a total cost of 4. From
a defence perspective, we understand this minimal cost as a
metric that represents the security level of the system we are
trying to protect. In the next section, we formalise our security
metric in the form of an optimisation problem and explain the
resolution approach.

IV. SECURITY METRIC

A. Problem deﬁnition

Let W be an industrial network, G = (V, E) an AND/OR
graph representing the operational dependencies in W , and t
a target network node. The objective of our security metric,
µ(G, t), is to identify the set of nodes X = {m1, . . . , mh} that
must be compromised in order to disrupt the normal operation
of target node t, with minimal cost for the attacker.

More formally, µ : G × V → 2V is deﬁned as follows:

(cid:16) (cid:88)

(cid:17)

µ(G, t) = argmin
X⊆VAT
s.t.
wcc(σ(G, X)) ≥ 2 ∨ X = {t}

ϕ(mi)

mi∈X

(1)

where the solution with minimal cost must be either node t
or a set of nodes X such that, if removed, t gets disconnected
from the graph. This is achieved with function wcc(G), which
computes the number of weakly connected components in G,
that is, the number of connected components when the orien-
tation of edges in G is ignored. In other words, the restriction
on wcc(G) ensures that the target node t is disconnected from
a non-empty set of nodes on which t depends (directly or
indirectly) to function properly.

We also deﬁne κ : G ×V → R≥0, a numerical version of the

metric that is based on the previous formulation as follows:

κ(G, t) =

(cid:88)

ϕ(mi)

mi∈µ(G,t)

(2)

4

It is important to note that if we assign the same unit cost to
every node (i.e. ϕ(v) = 1, ∀v ∈ VAT ), the metric will indicate
the minimum number of nodes that must be compromised in
order to bring down the system. Alike, though from a fault-
diagnosis perspective, the metric will determine the minimum
amount of components that must concurrently fail in order to
make the system non-operational.

From a graph-theoretical perspective, our security metric
looks for a minimal weighted vertex cut in AND/OR graphs.
As mentioned in Section II, this is an NP-complete problem
[13], [14], [16], [17]. However, a proper transformation of the
problem can leverage advanced mechanisms from other ﬁelds
and take advantage of very efﬁcient techniques for this sort of
problem. In this paper, we address our problem from a logical
perspective, and more precisely, from a satisﬁability point of
view.

B. Metric resolution approach via graph transformation

Given a target node t, the input graph G can be used as a
map to decode the dependencies that node t relies on. Since
these dependencies are presented as a logical combination
of components connected with AND and OR operators, we
say that node t is fulﬁlled (or can operate normally) if the
logical combination is satisﬁed. In turn, these dependencies
may also have previous dependencies, and therefore, they must
be also satisﬁed. In that sense, G can be traversed backwards
in order to produce a propositional formula that represents the
different ways in which node t can be fulﬁlled. We call this
transformation fG(t). To illustrate this idea, let us consider
the previous example scenario (presented in Section III). In
this case, fG(c1) returns the following formula:

c1 ∧ (d ∧ ((a ∧ b) ∨ (b ∧ c)))

The goal of the attacker, however, is precisely the opposite,
i.e., to disrupt node t somewhere along the graph. There-
fore, we are actually interested in satisfying ¬fG(t), which
describes the means to disable t, as follows:

¬(c1 ∧ (d ∧ ((a ∧ b) ∨ (b ∧ c))))

Under that perspective, a logical assignment such that
¬fG(t) = true will indicate which nodes must be compro-
mised (i.e. logically falsiﬁed) in order to disrupt the operation
of the system. Finding such an assignment constitutes a Satis-
ﬁability (SAT) problem [34]. A SAT problem essentially looks
for an assignment of truth values to the variables of a logical
formula such that the formula evaluates to true. Normally,
SAT formulations consider the input formula in conjunctive
normal form (CNF). Converting an arbitrary boolean formula
to CNF can be naively tackled by using De Morgan and
distributive laws, which leads to the following formula:

(¬c1 ∨ ¬d ∨ ¬a ∨ ¬b) ∧ (¬c1 ∨ ¬d ∨ ¬b ∨ ¬c)

However, such an approach might lead to exponential com-
putation times over large graphs, thus only being able to scale
up to a few hundred nodes. To avoid this issue, we use the
Tseitin transformation [12], which essentially produces a new
formula in CNF that is not strictly equivalent to the original

formula (because there are new variables) but is equisatisﬁable.
This means that, given an assignment of truth values, the new
formula is satisﬁed if and only if the original formula is also
satisﬁed. An example of how the Tseitin transformation works
can be found in Appendix A. Since the Tseitin transformation
adds new variables during the process, the new formula is
larger in size than the original one (we omit the transformed
formula for our example since it has 15 variables and 27
clauses). However, the Tseitin transformation can be done in
polynomial time, as opposed to the naive CNF conversion
approach that can ramp up to exponential computation times
in the worst case.

C. Satisﬁability formulation

When a CNF formula also involves weights on each clause,
the problem is called MAX-SAT [20]. A MAX-SAT prob-
lem consists in ﬁnding a truth assignment that maximises
the weight of the satisﬁed clauses. Equivalently, MAX-SAT
minimises the weight of the clauses it falsiﬁes [20]. When a
set of clauses must be forcibly satisﬁed (called hard clauses),
the problem is denominated Partial MAX-SAT and it works
on a subset of clauses (denominated soft clauses) that can
be falsiﬁed if necessary. If the soft clauses have non-unit
weights, the problem is called Weighted Partial MAX-SAT
and it will try to minimise the penalty induced by falsiﬁed
weighted variables. We use the latter to address our problem.
Reconsidering our example scenario, the hard clauses are those
involved in the CNF formula as follows:

¬c1 ∨ ¬d ∨ ¬a ∨ ¬b
¬c1 ∨ ¬d ∨ ¬b ∨ ¬c

whereas soft clauses correspond to each atomic node in the
graph with their corresponding penalties (costs) as follows:
c
ϕ(c) = 2

c1
ϕ(c1) = inf

d
ϕ(d) = 10

a
ϕ(a) = 2

b
ϕ(b) = 5

Therefore, a MAX-SAT solver will try to minimise the
number of falsiﬁed variables as well as their weights, which in
our problem equals to minimise the compromise cost for the
attacker. As shown in Section VII, current SAT solvers are able
to handle this family of problems at a very decent large scale
(dozens of thousands of variables), and they usually involve
state-of-the-art
techniques to tackle satisﬁability problems,
pseudo-boolean problems and optimisation procedures [35].
The following section details our strategy to compute the
security metric.

V. COMPUTATION STRATEGY

A. Logical transformation

Given a directed AND/OR graph G = (V, E) and a target
node t ∈ VAT , we ﬁrst produce a propositional formula that
represents the logical semantics of G with regards to t, i.e.
the logical conditions that must be satisﬁed to fulﬁl t. We
denote this transformation as fG(t), which is described in
Algorithm 2. The formulation process starts at t and traverses
G backwards, expanding logical conditions as needed, until
nodes with no incoming edges are reached.

5

// mark n as visited
// node n is atomic
// predecessor
// null x or visited x
// atomic sentence

: getSentence
: Graph G = (V, E)

Name
Global
Input: Node n, Visited nodes M
Output: Logical sentence p

1 M (cid:48) ← M ∪ {n}
2 if n ∈ VAT then
3

x ← incomingN ode(G, n)
if not(x) || x ∈ M then

4
5
6

7

p ← n

else

end

8
9
10 end
11 X ← incomingN odes(G, n)
12 X ← f ilter(X, visited)
13 if n ∈ ∆ then
14
15 end
16 if n ∈ Θ then
17
18 end
19 return p

s ← getSentence(x, M (cid:48))
p ← ( · n · ∧ · s · )

// recursive call
// concat with ·

// nodes reaching n
// unseen nodes only
// n has AND type
// AND operator

p ← getM ultiSentence(X, ∧, M (cid:48))

p ← getM ultiSentence(X, ∨, M (cid:48))

// n has OR type
// OR operator

Algorithm 2: Main logical sentence builder (recursive)

Algorithm 2 moves recursively through the graph and builds
a valid logical sentence considering three main cases that
depend on the type of node being analysed. Atomic nodes
(n ∈ VAT ) constitute the ﬁrst case, which is expanded
recursively if node n has a predecessor. Atomic nodes only
have one incoming edge by deﬁnition, with the exception of
the source that has none. The other two cases correspond to
AND/OR nodes respectively, and are treated in a similar way.
In these cases, the algorithm calls a second function, described
in Algorithm 3, which essentially builds sub-sentences for each
predecessor of the AND/OR node (stored in NodeList X) and
joins them using the appropriate operator op ∈ {∧, ∨}.

There are two important aspects about the logical transfor-

mation that are worth to mention.

1. The ∧ operator on atomic recursive calls. In line 8,
Algorithm 2 builds a sentence with the current node (n) and
the sentence obtained from its predecessor (x), by using the
AND operator (∧). The reason for using the AND operator
relies on the semantics of the graph G, which represents
dependencies between components. Because n depends on its
predecessor x, node n can only be fulﬁlled if its predecessor x
is fulﬁlled (x can be an AND/OR node as well), and therefore,
we state so using the ∧ operator.

2. Cycles. Normally, AND/OR graphs are acyclic [17].
However, the meaning of cycles in AND/OR graphs represent-
ing dependencies might be debatable. In this work, we aim at
tackling the general case where the input graph G = (V, E)
may also contain cycles. Our approach to deal with cycles
is to keep a record of the nodes that have been analysed so
far. In that sense, Algorithm 2 controls cycles by using a set
of visited nodes. Nodes that have already been visited are not
expanded again in deeper explorations coming from them. This
is possible because the truth value of an already visited node
is present in an earlier part of the formula and connected to
their predecessors via the ∧ operator. For the atomic case, this
is directly implemented in line 5, while for complex AND/OR

6

: getM ultiSentence

Name
Input: NodeList X, Operator op, Visited nodes M
Output: Logical sentence p

1 if X = {} then
return true
2
3 end
4 p ← (
5 for i = 0; i < |X| − 1; i = i + 1 do
6

// empty set of nodes

// open sentence

// get node from list
x ← X.get(i)
s ← getSentence(x, M ) // compute sub-sentence
// concat with ·
p ← p · s · op

7
8
9 end
10 x ← X.get(|X| − 1)
11 s ← getSentence(x, M )
12 p ← p · s · )
13 return p

// get last node
// compute sub-sentence
// close sentence

Algorithm 3: Logical multi-sentence builder (∧,∨)

cases, visited predecessors are previously ﬁltered in line 12.
Annex B illustrates an example of the cycle handling process.

B. Weighted Partial MAX-SAT approach

Given an input graph G = (V, E) and a target node t,
we model our security metric µ(G, t) as a Weighted Partial
MAX-SAT problem where the weights are provided by the
cost function ϕ(v) for each node v ∈ VAT . Our methodology
includes the following steps:
1. We ﬁrst transform the dependency graph G into an equiv-
alent logical representation, fG(t), as described in Section
V-A.

2. Then, we normalise the input formula that represents the
objective of the attacker using the Tseitin transformation,
i.e., h(v) = CN F (¬fG(v)), where h(v) = (v1i ∨ . . . ∨
v1j) ∧ . . . ∧ (vhi ∨ . . . ∨ vhj).

3. We then deﬁne the clauses of h(v) as hard clauses; that is,
we force each clause (vhi ∨ . . . ∨ vhj) to evaluate to true.
4. Finally, we deﬁne a soft clause for each atomic node
in the graph, and assign its corresponding weight as
(v, ϕ(v)), v ∈ VAT .
The last step tells the MAX-SAT solver that each soft clause
(each node v of the graph) can be falsiﬁed with a certain
penalty ϕ(v), which is the cost required for the attacker to
compromise v. Since the solver tries to minimise the total
weight of falsiﬁed variables, a solution to this problem yields
a minimum vertex cut in the graph that models our CPS
system. Therefore, the overall process provides a set of critical
components with minimal cost for the attacker such that, if
removed, it would render the cyber-physical system into a
non-operational state. In the following section, we present the
technical details of our implementation prototype and explore
our initial example illustrating the overall process step by step.

VI. META4ICS − IMPLEMENTATION PROTOTYPE

In this section, we describe our implementation prototype
called META4ICS (Metric Analyser for Industrial Control
Systems), pronounced as metaphorics. The overall architecture
of META4ICS is illustrated in Figure 4, and it involves two
main modules: (i) a core system in charge of analysing the

Fig. 4. META4ICS overall architecture

input graph and computing the security metric, and (ii) a Web-
based visualisation system that displays the graph as well as
the critical nodes indicated by the security metric.

The core system has been purely developed in Java and it
can be executed as a single runnable JAR. Initially (step 1), the
tool consumes an input graph represented in JSON (JavaScript
Object Notation). If the input graph has more than one node
with no incoming edges, the graph analyser creates an artiﬁcial
source node, denoted as s, which is linked to each one of
these nodes in order to produce a single-source graph (step 2).
This is done to simplify graph-processing algorithms. Within
our simple example (see Section III), nodes a, b, and c have
no incoming edges, and therefore, the following edges are
also added: (s, a), (s, b), and (s, c). This can be observed in
Figure 5 (later described).

Afterwards, our prototype implements the Tseitin transfor-
mation (step 3) to convert an arbitrary boolean formula into an
equisatisﬁable CNF formula [12] in order to provide efﬁcient
computation times. For the MAX-SAT resolution process
(step 4), we use SAT4J, a Java-based library for solving
boolean satisfaction and optimisation problems [36], [35]. In
the case of ties (even cost for two or more solutions), the tool
selects the solution with the minimum number of nodes. The
outcome of this process is also represented in JSON format
(step 5) and is used to feed the second main component of
our tool (step 6). The latter is an interactive graph visualiser,
built on top of the D3.js technology [37], whose objective
is to provide visual means to understand dependencies among
nodes and manipulate critical nodes. Figure 5 shows the metric
resolution for our example scenario. The tool displays critical
nodes surrounded by dashed red circles and allows the user to
validate the solution by interactively removing them until the
target is disabled.

Annex C provides a full description of the execution of
META4ICS over our example scenario, including technical
details about input and output JSON formats. META4ICS is
publicly available at [38]. In the next section, we present an
experimental evaluation of our approach where we analyse
performance and scalability aspects.

VII. EXPERIMENTAL EVALUATION

In order to evaluate the feasibility of our approach, we
have conducted an extensive set of experiments based on
synthetic pseudo-random AND/OR graphs of different size and
composition. These experiments have been performed using a

Fig. 5. Graph viewer - metric resolution

standard MacBook Pro (Mid 2014), 2.8 GHz Intel Core i7
processor, 16 GB of memory. The construction procedure for
an AND/OR graph of size n is as follows. We ﬁrst create the
target node. Afterwards, we create a predecessor which has one
of the three types (atomic, AND, OR) according to a proba-
bility given by a compositional conﬁguration predeﬁned for
the experiment. For example, a conﬁguration of (60, 20, 20)
means 60% of atomic nodes, 20% of AND nodes and 20%
of OR nodes. We repeat this process creating children on the
respective nodes until we approximate the desired size of the
graph, n.

Figure 6 shows the behaviour of our methodology when
the size of the input graph increases. In this experiment, we
produce pseudo-random AND/OR graphs of size n and a
compositional conﬁguration of (60,20,20). The size n varies
as n ∈ [0, 500, 1000, 1500, . . . , 20000], and we iterate the
evaluation process 10 times for each value of n. The solid line
shows the average values obtained for graphs of size n while
the vertical bars indicate shortest and largest computation
times for each value of n. As we explore later in this section,
the structure of the logical formulation varies according to the
structure of the input graph (e.g. more ANDs than ORs), and
therefore, the time required by the CNF converter and SAT
solver might vary as well, which explains the vertical bars.
In the general case, however, we have observed very good
results in terms of performance and scalability. For example,
for graphs with 10000 nodes, the average resolution time is

Fig. 6. Scalability and performance evaluation up to 20000 nodes

7

 0 5 10 15 20 25 30 35 40 45 0 5000 10000 15000 20000Resolution time (seconds)Number of graph nodesWeighted partial MAX-SAT resolution time on pseudo-random AND/OR graphs - Conf(60,20,20)Average resolution time (seconds)Min/max resolution time (seconds)Fig. 7. Performance evaluation (1000 nodes x 1000 iterations)

Fig. 9. Comparative analysis of different logical compositions (1000 nodes)

about 3 seconds, while for graphs with 20000 nodes, the
average time is around 15 seconds. Note that scalability here
is understood from a computational standpoint rather than a
control systems perspective.

In order to analyse the variability observed in computation
times due to the structure of the formulas, we have taken
a closer look at
the two main processes that govern the
overall behaviour of the strategy: the Tseitin transformation
and the MAX-SAT resolution. Figure 7 shows the results of a
1000-iteration experiment using AND/OR graphs with 1000
nodes and a (60,20,20) conﬁguration. In general, we have
observed that while the Tseitin transformation time is stable
across all iterations, the MAX-SAT resolution process requires
more time to solve the problem in some graphs than others.
This happens because some graphs induce formulas involving
longer sequences of AND or OR operators connecting with
different combinations of graph nodes, which incurs in vari-
able computation times.

We have also observed that the number of clauses and
variables within the transformed Tseitin formulas involve
similar patterns for this and other conﬁgurations. For example,
Figure 8 details the formulae composition for a (60,20,20)
conﬁguration.

In average, the Tseitin formulas involve 1500 clauses and
3000 variables for graphs with 1000 nodes and the (60,20,20)
conﬁguration. This means that each clause generally involves

the disjunction of two or three variables. In order to better
understand how the complexity of the formulas may impact
the overall strategy, we have also experimented with different
composition conﬁgurations for graphs with 1000 nodes. Figure
9 shows the obtained results on four different conﬁgurations
including the previous (60,20,20) distribution.

While the Tseitin transformation shows almost a constant
behaviour, we can observe a dramatic reduction in the average
MAX-SAT resolution time as the number of AND/OR nodes
decreases. This phenomenon occurs because the graphs now
involve more dependent nodes in sequence with less AND/OR
nodes among them. In addition, OR nodes have a higher
impact in the resolution time since any fulﬁlled input may
enable this connector, while AND nodes only require one
disconnected input to be disabled. In order to conﬁrm these
observations, we have conducted the same scalability experi-
ment up to 20K nodes, but now with a different conﬁguration
using a (80,10,10) distribution. The results are shown in
Figure 10. As expected, we can observe that the variability
of the experiments (vertical green bars) is now much lower
since the structure of the formulas pose less restrictions to
ﬁnd the optimal solutions.

Overall, the obtained results indicate that our methodology
can efﬁciently scale to large graphs involving thousands of
nodes and compute the proposed security metric in a matter
of seconds. Moreover, considering that many CPS scenarios

Fig. 8. Logical compositional analysis (1000 nodes x 1000 iterations)

Fig. 10. Scalability and performance evaluation - Conf(80,10,10)

8

 0 200 400 600 800 1000 0 200 400 600 800 1000Computation time (milliseconds)Iteration numberComputation time stats - Pseudo-random AND/OR graphs (1000 nodes) - Conf(60,20,20) - 1000 itersTseitin transformation time (milliseconds)MAX-SAT resolution time (milliseconds) 0 200 400 600 800 1000 1200atomicandortotalclausesvariables 0 500 1000 1500 2000 2500 3000 3500Number of graph nodesTseitin dimensionsFormulae compositionLogical analysis (average values across 1000 iterations with 1000 nodes)Node proportion within formulaeTseitin properties (clauses and variables) 0 200 400 600 800 1000 1200Conf(60,20,20)Conf(70,15,15)Conf(80,10,10)Conf(90,5,5) 0 20 40 60 80 100 120 140 160Number of graph nodesComputation time (ms)Graph compositional configuration (%atomic,%and,%or)Logical compositional variations of AND/OR graphs (1000 nodes)Atomic nodesAND nodesOR nodesTseitin timeResolution time 0 5 10 15 20 25 30 35 40 45 0 5000 10000 15000 20000Resolution time (seconds)Number of graph nodesWeighted partial MAX-SAT resolution time on pseudo-random AND/OR graphs - Conf (80,10,10)Average resolution time (seconds)Min/max resolution time (seconds)and their respective graph models might not be that large, and
assuming that an automated mechanism to produce such mod-
els is in place, our approach could be used to perform security
assessments upon environment changes in nearly real-time.

Discussion. Scalability is an essential aspect when deal-
ing with evolving and growing environments. However,
it
is also certain that ICS networks have been designed with
some underlying structure in mind, i.e., they have not been
created chaotically. In that sense, they usually present some
organisational characteristics that we can leverage to address
insightful structural
complexity even more. We argue that
information about the network (e.g. clusters, zones, regions,
subnets), may be used to reduce large graphs into smaller
subproblems and compose their solutions. However, under-
standing and generalising structural properties of real-world
industrial settings is a challenging goal. For example, while
oil and gas facilities may involve kilometres of pipes and
sensors depicting elongated and thin graphs with clear ar-
ticulation points, other industrial settings may be translated
into more dense graphs with highly interconnected compo-
nents. Additional research questions such as what numbers
are representative regarding size and classes of components
(hundreds, thousands, tens of thousands?) are also important.
In that context, one research direction already scheduled as
future work is to further study the structural properties of ICS
networks that may help improve the analysis of the graphs that
represent them.

In addition, time variations, which are closely related to
the compositional conﬁguration of the graphs and their size,
are also important. However, characterising them properly is
a challenging task. While small logical formulas that can be
analysed by hand may present small variations in the order
of nanoseconds in a multi-task operating system (thus hard
to analyse), larger graphs with more evident variations in the
order of seconds or milliseconds may usually involve hundreds
or thousands of nodes. In that context, part of our future
work involves a deeper analysis within the internal MAX-
SAT solving strategies in order to better characterise these
variations and address them more efﬁciently.

In the next section, we present a thorough case study based
on a realistic water transport network where we analyse and
discuss the use and applications of our security metric.

VIII. CASE STUDY ON WATER TRANSPORT NETWORKS
AND EXTENDED SECURITY APPLICATIONS

Security metrics are useful in many contexts and applica-
tions, especially in the case of critical infrastructure systems
which rely on industrial control systems for their safe and
efﬁcient operation. Our case study is focused on water trans-
port networks (WTNs). In these systems, operators need to
understand how exposed their systems are to attacks, and they
should be able to evaluate different “what-if” scenarios to
improve their security posture. These scenarios enable water
utility operators to understand how conﬁguration changes may
increase or decrease the overall security of the system.

Fig. 11. Basic water transport network component [11]

As mentioned before, our approach considers as input an
AND-OR graph that models the system under analysis in order
to quantify its security level, that is, to inform operators about
how secure their system is. In this paper, we do not focus on
the generation of AND-OR graphs, however, we do provide in
this section some generation insights to model water transport
networks, even though this typically depends on the nature of
the plant being analysed. In this case study, we are focused on
a realistic water transport network, structurally similar to the
one illustrated earlier in Figure 2, Section I. We have observed
that, for this particular type of industrial control system, there
exist basic structural constructs that appear repeatedly, thus
forming patterns in large setups. In that context, and for the
sake of clarity, we ﬁrst present in this section a description of
these small constructs that form the basis of large scenarios, we
explain how these simple models can scale to larger ones, and
then we provide a thorough analysis of our approach using
compact scenarios. Finally, we present further uses of our
security metric as well as other potential applications.

A. Case study description

Figure 11 depicts a realistic basic structural component of
a water transport system, which constitutes a typical con-
ﬁguration of several water utilities as conﬁrmed by water
utility experts and other scientiﬁc sources [39]. This basic
component may also appear multiple times in a real water
transport network, as later described in this section. In this
case study, drinking water is extracted from a water source
(e.g. a borehole or another tank) using a pump. The pump
increases the water pressure which pushes the water into a
tank, which may be located a few kilometres away at a higher
elevation. The water tank is then used to provide water to
consumers, as well as to transfer water to other subsystems.
Additional details of this scenario can be found in [11].

We consider the following sensing elements which appear
in the topology of the case study: a pressure sensor before the
pump (s1), a pressure sensor after the pump (s2), and a water
ﬂow sensor (s3) measuring the pump outﬂow. At the water
tank, ﬂow sensors (s4, s6) are also installed for monitoring
the inﬂow and outﬂow respectively.

For its operation, the control system is comprised of Pro-
grammable Logic Controllers (PLCs) connected to the afore-
mentioned sensors and actuators. In this example, control is
achieved with two PLCs, with the one situated at the pump
and the other at the water tank. These PLCs are connected to
the system’s sensors and actuators, and execute programs to
achieve the control objectives. More speciﬁcally, the sensing

9

TankT1Centrifugal PumpP1Boreholes4s6s1s2s5PLC T1PLC P1v(k)s5(k)s3c1(k)a1a2Components

s6

s4

s3

a1, a3, a9,
s5, s1

a2, a7, a8,
a10, s2, c1

Cost
ϕ(n)
2

3

5

6

9

Measures

Components state

{C, F }

{C, LC}

{C, F, AS}

Stored in unlocked containers (C),
placed in an open space in an unse-
cured fenced area (F ).
Stored and locked (LC) in containers
(C) in a public area.
Stored in unlocked containers (C),
placed in an open space, with a fenced
area (F ) secured with alarm systems
(AS).

{B, LB, F } Stored freely in a building (B), which
is locked (LB), and placed in an un-
secured fenced area (F ).
Stored freely in a building (B), locked
(LB), and placed in a secured fenced
area (F ) with alarm systems (AS).

{B, LB, F,
AS}

TABLE I
SCORE TABLE FOR PHYSICAL SECURITY

The system components have been grouped in different
categories according to their cost of compromise. Note that
we do not provide a general methodology to derive a global
scoring system; our scoring relies on the input we have
collected and refers to the physical security of the components
within the proposed scenario. Ideally, these scores should be
combined with each component’s cyber weaknesses by using,
for example, CVSS scores [6], in order to produce a more
accurate scoring mechanism for cyber agents within ICS en-
vironments. To this day, however, there are no standard CVSS-
like scoring systems speciﬁcally oriented to ICS networks.

Given Table I, we ﬁrst consider the basic scenario for our
use case where redundant sensors are not used. Figure 13
illustrates the conﬁguration and the solution of the graph
derived from our use case for controlling actuator c1.

Fig. 13. Basic WTN without redundancy

In this scenario, only two agents exist, a1 and a2, and
they function as previously explained. As a2 is the last agent
that controls c1, any compromise of a2 or c1 would clearly
disable the control of the system. In order to make the example
more interesting, we consider a hypothetical situation where
these components (a2 and c1) have been heavily protected
and cannot be compromised (thus we assign an inﬁnite cost
to them), and we analyse the security level of the rest of
the system. Since there are no other agents utilizing the
measurements of sensors s4 and s2, these are not added in
the graph as they do not contribute to the control of c1.

We have run our tool META4ICS over this conﬁguration
and the results indicate that the easiest component to compro-
mise (so as to disrupt the operation of the system) is the ﬂow
sensor at the pump (s3) with a cost (effort) of 5, as shown
in Figure 13. This is an interesting outcome since typical

10

Fig. 12. Three-tank water transport network architecture

node s5 provides the water level state measurement s5(k) to
the agent a1 in PLC-T1, where k is the discrete time step.
Then, the control logic is executed, and the result v(k) is trans-
mitted to PLC-P1, where another control logic a2 is executed.
This control logic instructs the contactor (i.e., an electrically
operated relay) through a signal c1(k) to turn on/off the pump,
should the pump ﬂow s3 be below a threshold.

Typically, these systems are set up using the minimum
conﬁguration. In our example scenario, measurements from
sensors s5 and s3 are necessary in order to operate the system.
As a result, if there is a problem (or an attack) affecting one
of the two sensors, the system will not be able to function
properly. From a water operator point of view, the challenge
would be to measure how secure the current conﬁguration of
the system is, and how security can be enhanced by adding
new elements (such as sensors and software agents) into the
system. We discuss redundancy aspects in Section VIII-C.

The aforementioned basic component may appear repeat-
edly in larger networks. Figure 12 shows a subsystem of
the network under analysis, which consists of three tanks in
different elevations as well as three pumps that supply water
to a different tank. Note that the subsystem from one pump to
the next one is actually described by the structure of the basic
subsystem presented in Figure 11. Therefore, this example em-
phasizes that such basic structures are interesting on their own,
as they can be combined to yield more complex subsystems in
real WTNs. For the sake of brevity and simplicity, we focus
here and thereafter on the study of basic structural subsystems
as shown in Figure 11.

B. Data collection and initial scenario

Various security measures are applied by water supply
authorities in order to protect the components of their systems
against malicious actors. Based on expert input provided by the
operators that manage water transport networks with structures
similar to the ones shown in Figures 11 and 12, we have
collected a list of measures that are used by water authorities
to protect their network assets (i.e., sensors, ﬂow meters, etc.).
Using these measures, we have generated a security score
for each network component of our case study as shown in
Table I. A more comprehensive explanation of these scores
can be found in Annex D. Each score essentially measures
the effort required by an attacker (i.e. attacker’s cost) in order
to compromise a component in the given conﬁguration.

threats on these systems usually target tank level sensors (s5
in our case) in order to perform, for example, overﬂow and
ﬂooding attacks. However, our tool showed that, considering
the speciﬁc settings collected from the plant, the physical
security applied to sensor s5 exposes s3 as a more attractive
target.

C. Countermeasure recommendations and extended scenario

By using the proposed security metric, new methodologies
can be developed to enable analytical redundancies of different
cyber-physical elements as an effort to reduce the risk of
disrupting the system’s monitoring and control operations.
Redundancy is the act of introducing new hardware or software
components to allow the generation of the same information
through multiple sources. Typically,
this can be achieved
by adding new sensors (physical redundancy), or by using
algorithms such as state estimates which compute a certain
measurement using peripheral sensors (analytical redundancy).
As mentioned before, a critical component in our case study
is the tank level sensor (s5). By compromising s5, an attacker
can prevent the system from monitoring the level of the water
in the tank. In such a case, the state of the system may be
twofold: (i) the pump remains on, overﬂowing the tank, or
(ii) the pump stays off and the tank empties at some point in
time. With a similar reasoning, the ﬂow sensor after the pump
(s3) is another critical component since its failure will make
PLC-P1 unaware of the pump status.

By adding the ﬂow sensor s6 to measure the water outﬂow
from the tank, and the pressure sensor s1 to measure the
pressure of the water right before the pump, these sensors may
allow the mitigation of the aforementioned issues. In partic-
ular, the tank’s water level can be analytically estimated by
combining the inﬂow measure at s4 and the outﬂow measure
at s6, thus compensating for the water level measurement s5.
On the other hand, monitoring the pressure at s1, together with
s2, can be used to calculate the ﬂow analytically, and therefore
compensating for s3.

These combinations generate new logical agents. In partic-
ular, a3 is the logical agent that is generated to accept the
measurements from s4 and s6, and outputs the estimate of
the water level at the tank. Moreover, agent a7 is added to
accept the measurements from s1 and s2, and produces an
estimate of the ﬂow after the pump. Going a step further, the
ﬂow at s3 should be theoretically the same as the ﬂow at s4.
Therefore, the combination of s3 with s6 may yield agent
a9 which, given these two measures, is able to compute an
estimate of the level of the water in the tank. Finally, agents
a8 and a10 may be derived from empirical results (e.g, what
is the level in the tank based on the time that the pump is on)
to estimate particular measurements. Using these redundancies
we can derive the graph shown in Figure 14.

After running META4ICS with the expanded conﬁguration,
we noticed that our metric still identiﬁes the ﬂow sensor at the
pump (s3), along with the pressure sensor before the pump
(s1), as the most critical components in the system. Interest-
ingly, the water level sensor (s5) still does not constitute an

Fig. 14. Expanded WTN conﬁguration with redundancy

attractive attack target. The added redundancy increased the
cost of compromising the level measurement, and hence, a
better strategy is to compromise the ﬂow and the pressure
sensors {s1, s3} with cost 11. Such an attack will disable the
control of the pump directly, despite of a1 being reporting
the correct measurements of the water level at the tank to
a2. Similarly, any other combination in the graph yields a
cost higher than that of compromising the two aforementioned
sensors. It should also be noted that the compromise cost of
the expanded conﬁguration (11) is much higher than the cost
of compromising the basic conﬁguration (5) in Figure 13.

As a ﬁnal remark, it is important to note that the initial
scenario used in this section is reasonably small so as to
properly explain its components and handle its complexity.
Due to its size,
its solution is also visible to the naked
eye. However, when more components are added or its size
increases, e.g. Fig. 14, its solution is not that evident anymore.
In that sense, our approach is intended to automate this process
and assist administrators with actionable information that can
be used to increase the security of their facilities.

D. Further metric uses and potential applications

In this section, we present other possible applications of our
security metric over AND/OR graph models of ICS systems.
1) Perimeter analysis. The ﬁrst application involves the
security analysis of systems where the edge (or perimeter)
nodes are easier to be compromised, and the effort becomes
higher as we move to inner nodes of the graph. We can
formulate such a system by assigning costs to the individual
nodes based on their “depth” in a given graph G. Let s be
the source node in G, and depth(n) a function to denote the
depth of node n in G, with depth(s) = 0. Thus, we can
deﬁne depth(n) to be the minimum path from s to n in G,
i.e. how many elements need to be visited (or compromised)
before reaching n. The attack cost of n can then be deﬁned as
ϕ(n) = depth(n). Note that we are changing the semantics of
the cost function ϕ(n). Figure 15 presents how this assignment
can be applied to the components of our case study.

We observe that this cost assignment, combined to our
security metric based on AND/OR graphs, provides a useful
tool for the identiﬁcation of the minimal set of critical edge

11

compromise and how expensive its remediation is. In other
words, an ‘easy’ node to compromise will have a much larger
value if it is too expensive to ﬁx, and conversely, a complex
node with almost no remediation cost will keep a similar score.
More formally, we represent the budget required to remedi-
ate/ﬁx a node n as γ(n). We now redeﬁne our cost function
ϕ(n) as ϕ(cid:48)(n) in order to reﬂect not only the cost for the
attacker to compromise node n but also the required budget
to remediate it as follows:

ϕ(cid:48)

α,β(n) = α × ϕ(n) + β × γ(n)

(3)

where α, β ∈ [0..1] are real coefﬁcients such that α + β = 1.
The objective of these coefﬁcients is to emphasis the im-
portance of each factor within the new cost function ϕ(cid:48).
When α = 0 (ϕ(cid:48)
0,1(n)), the new cost function is completely
focused on the budget. Conversely, when β = 0 (ϕ(cid:48)
1,0(n)) ,
the new function gives us the original cost function focused
on the attacker’s cost. In that context, we can provide a
balance between the two by parameterising the function with
intermediate values α = 0.5 and β = 0.5 (ϕ(cid:48)
0.5,0.5). A solution
of our security metric with this new cost function will yield
a set of critical nodes that can disrupt the operation of the
target node while focusing on the remediation budget at the
same time.

In general

the proposed
terms, we have observed that
security metric can be versatile enough to be used on different
security applications. However, there are also other problems
we plan to explore. For example, given a ﬁxed budget B, what
is the set of nodes that maximises the security level of the
system within budget B? In addition, can our metric be used to
support root-cause analysis in the context of incident response
and digital forensics [40], [41]? These potential applications
have already been scheduled as future work.

IX. CONCLUSIONS AND FUTURE WORK

In this paper, we have presented a novel security metric
aimed at identifying critical cyber-physical components and
measuring the overall security of ICS environments. Central
to our approach is the use of AND/OR graphs-based models,
which allow more realistic representations of the complex
interdependencies that are normally involved in real industrial
networks. Based on these models, our security metric solves
the problem of determining the set of ICS nodes that must be
compromised in order to disrupt the operation of the system,
with minimal cost for the attacker. Our strategy involves an
efﬁcient
transformation of AND/OR graphs into weighted
logical formulas that are then used to build and solve a
Weighted Partial MAX-SAT problem. Our analytical experi-
ments indicate that our computation strategy can properly scale
to graphs with thousands of nodes in seconds. In addition,
we have used our implementation prototype META4ICS to
evaluate the security posture of a realistic water transport
network, which has been presented in the form of a case
study. During this study, we have identiﬁed interesting security
properties about the plant as well as further security uses of
our metric.

Fig. 15. Security assignment for perimeter analysis

components ({s1, s3} in the above example) that need to
be further protected to increase the security level of the
system. The results for this speciﬁc conﬁguration show that,
as opposed to what one might initially think, not all of the
nodes in the network perimeter are the most critical ones, but
rather a subset of them. This showcases the fact that intricate
dependencies among OT components (e.g. complex logical
compositions) and speciﬁc control process ﬂows establish
a different perspective in how critical components must be
understood. In that context, our security metric based on
AND/OR graphs provides good support to properly identify
and prioritise critical CPS components so as to improve the
overall situational awareness.

2) Prioritisation and threshold-based security hardening.
The proposed security metric can also be used to gradually
improve the security level of the network by prioritising
CPS components that require utmost attention and applying
remediation actions.

In particular, the hardening process consists of a simple
iteration where each stage determines the set of critical nodes
in order to perform corrective tasks. Considering the example
in Figure 15, let us remediate nodes s1 and s3 by setting an
inﬁnite cost to them. Which are now the new critical nodes?
Computing the security metric with the updated settings, we
obtain {s5, s6, s2} as the new critical set with a total cost of
3. If we repeat the process after ﬁxing {s5, s6, s2}, the critical
set becomes {a1, a7} with a total cost of 10, then {a2} with
cost 13, and ﬁnally {c1} with cost 14. The same approach
can be used to implement a threshold-based security hardening
methodology where the process is repeated until the security
level reaches the desired threshold.

3) Budget-based security hardening. The previous
threshold-based methodology assumes an inﬁnite budget to
remediate nodes. Sometimes, however, practical remediation
costs are involved, in which case it is of interest to provide
a balance between the efforts required by an attacker to
compromise critical nodes and the cost required to ﬁx them.
Considering the proposed security metric, a simple way to
achieve such balance is to add the remediation cost to the
already deﬁned cost function ϕ(n). This trade-off means that
the cost of a node increases according to the complexity of

12

As future work, we plan to extend our analysis on scala-
bility and time variations by studying structural properties of
AND/OR graphs over ICS networks, their computational time
boundaries, and advanced graph-based techniques [21]. To do
so, we aim at further investigating with industrial partners what
classes of graphs are typical and representative of different ICS
networks. We also plan to extend our approach to consider
multi-target attacks, defence budget constraints, and multiple
overlapping on-site protection mechanisms. Automating the
generation of input AND/OR graphs for ICS is also a chal-
lenging activity, which we plan to further investigate over
real-world settings. In particular, we aim at a hybrid ap-
proach involving three main aspects: using semantic inference
techniques to produce analytical redundancies [42], IT-like
network mapping and discovery mechanisms at the cyber level,
and semi-automated methods to consolidate expert knowledge
from operators. At the optimisation side, our computation
strategy already considers a tie-break algorithm that selects
the solution with minimum amount of nodes when two or
more solutions with equal cost are found. However, in complex
dense cases, deciding among minimal solutions with the same
cost and the same amount of nodes requires further analysis.
We also aim at studying the criticality of ICS components
when nodes may be partially compromised or involve faulty
signals, i.e., nodes that might partially operate under the pres-
ence of an attack (as opposed to be completely disconnected
from the graph) [16]. Finally, we have shown that adding
redundancy can increase the resiliency of an ICS environment.
However, adding more components might also translate into
an extended attack surface [43]. This aspect generates an
interesting research problem whose solution might lead to a
Pareto frontier regarding security levels and countermeasures.

REFERENCES

[1] A. Humayed, J. Lin, F. Li, and B. Luo, “Cyber-Physical Systems
Security - A Survey,” IEEE Internet of Things, vol. 4, no. 6, pp. 1802–
1831, Dec 2017.

[2] “2019 Global ICS & IIoT Risk Report,” https://cyberx-labs.com/en/

risk-report-2019/, Cited May 2019.

[3] R. M. Lee, M. J. Assante, and T. Conway, “Analysis of the Cyber Attack
on the Ukrainian Power Grid. Defense Use Case,” SANS, E-ISAC, Tech.
Rep., 2016.

[4] N. Falliere, L. O. Murchu, and E. Chien, “W32.Stuxnet Dossier,”

Symantec, Tech. Rep., 2011.

[5] O. Andreeva,

S. Gordeychik, G. Gritsai, O. Kochetova,
I. Sidorov, and A. A. Timorin, “Industrial
- Kaspersky Lab,”

E. Potseluevskaya, S.
Control Systems Vulnerabilities Statistics
https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/
2016/07/07190426/KL REPORT ICS Statistic vulnerabilities.pdf,
Cited May 2019.

[6] “CVSS, Common Vulnerability Scoring System,” http://www.ﬁrst.org/

cvss/, Cited May 2019.

G. Chung, D. G. Yoo, K. Diao, Y. Zhou, J. Li, Z. Liu, K. Chang, J. Gao,
S. Qu, Y. Yuan, T. D. Prasad, D. Laucelli, L. S. V. Lyroudia, Z. Kapelan,
D. Savic, L. Berardi, G. Barbaro, O. Giustolisi, M. Asadzadeh, B. A.
Tolson, and R. McKillop, “Battle of the Water Calibration Networks,”
Journal of Water Resources Planning and Management, vol. 138, no. 5,
pp. 523–532, 2012.

[11] N. Nicolaou, D. G. Eliades, C. Panayiotou, and M. M. Polycarpou,
“Reducing Vulnerability to Cyber-Physical Attacks in Water Distribution
Networks,” in 2018 International Workshop on Cyber-physical Systems
for Smart Water Networks (CySWater), April 2018, pp. 16–19.

[12] G. S. Tseitin, “On the Complexity of Derivation in Propositional
Calculus,” in Studies in Constructive Mathematics and Mathematical
Logic, Part II, Seminars in Mathematics, 115125. Steklov Mathematical
Institute. Translated from Russian: Zapiski Nauchnykh Seminarov LOMI
8 (1968)., A. Slisenko, Ed., 1970, pp. 234–259.

[13] Y. Desmedt and Y. Wang, “Maximum Flows and Critical Vertices in
AND/OR Graphs,” in Computing and Combinatorics, O. H. Ibarra and
L. Zhang, Eds. Springer Berlin Heidelberg, 2002, pp. 238–248.
[14] ——, “Analyzing Vulnerabilities Of Critical Infrastructures Using Flows
And Critical Vertices In And/Or Graphs,” Int. J. Found. Comput. Sci.,
vol. 15, no. 1, pp. 107–125, 2004.

[15] C. Hankin, “Game Theory and Industrial Control Systems,” in Essays
Dedicated to Hanne Riis Nielson and Flemming Nielson on the Occasion
of Their 60th Birthdays on Semantics, Logics, and Calculi - Volume
9560. Springer-Verlag New York, Inc., 2016, pp. 178–190.

[16] G. Jakimoski and M. Burmester, “Using Faulty Flows in AND/OR
Graphs
to Model Survivability and Reliability in Distributed
Systems,” 2004. [Online]. Available: https://pdfs.semanticscholar.org/
1e44/7cafd95e64b3fd956140811699bb0e52cd75.pdf? ga=2.35872032.
1077771811.1557581663-473071496.1550455667

[17] U. dos Santos Souza, F. Protti, and M. D. da Silva, “Revisiting the
complexity of and/or graph solution,” Journal of Computer and System
Sciences, vol. 79, no. 7, pp. 1156 – 1163, 2013.

[18] L. R. Ford and D. R. Fulkerson, Flows in Networks, ser. RAND

Corporation research study. University Press, 1962.

[19] G. B. Dantzig and D. R. Fulkerson, “On the Max Flow Min Cut Theorem
of Networks,” Santa Monica, CA: RAND Corporation, Tech. Rep., 1955.
[20] J. Davies and F. Bacchus, “Solving MAXSAT by Solving a Sequence
of Simpler SAT Instances,” in Principles and Practice of Constraint
Programming – CP 2011, J. Lee, Ed. Springer, 2011, pp. 225–239.

[21] M. Barr`ere, R. V. Steiner, R. Mohsen, and E. C. Lupu, “Tracking the
Bad Guys: An Efﬁcient Forensic Methodology To Trace Multi-step
Attacks Using Core Attack Graphs,” in Proceedings of the 13th IEEE
International Conference on Network and Service Management, 2017.
[22] M. Barr`ere and E. C. Lupu, “Naggen: a Network Attack Graph GENer-
ation Tool,” in Proceedings of the IEEE Conference on Communications
and Network Security, Oct 2017.

[23] L. Wang, M. Albanese, and S. Jajodia, Network Hardening - An
Automated Approach to Improving Network Security, ser. Springer Briefs
in Computer Science. Springer, 2014.

[24] V. Shandilya, C. B. Simmons, and S. Shiva, “Use of Attack Graphs in
Security Systems,” Journal of Computer Networks and Communications,
vol. 1, no. 1, September 2014.

[25] G. S. Bopche and B. M. Mehtre, “Attack Graph Generation, Visualiza-
tion and Analysis: Issues and Challenges,” in Security in Computing and
Communications. SSCC 2014, J. L. Mauri, S. M. Thampi, D. B. Rawat,
and D. Jin, Eds. Springer Berlin Heidelberg, 2014, pp. 379–390.
[26] A. Singhal and X. Ou, “Security Risk Analysis of Enterprise Networks
Using Probabilistic Attack Graphs,” NIST Interagency Rep. 7788, 2011.
[27] D. S. Altner, O. Ergun, and N. A. Uhan, “The maximum ﬂow
network interdiction problem: Valid inequalities, integrality gaps, and
approximability,” Oper. Res. Lett., vol. 38, no. 1, pp. 33–38, Jan. 2010.
[Online]. Available: http://dx.doi.org/10.1016/j.orl.2009.09.013

[28] L. Wang, S. Jajodia, and A. Singhal, Network Security Metrics, 1st ed.

[7] Business Advantage, Kaspersky Labs, “The State of Industrial Cyberse-

Springer Publishing Company, Incorporated, 2017.

curity 2017 - Global Report,” Business Advantage, Tech. Rep., 2017.

[8] K. A. Stouffer, J. A. Falco, and K. A. Scarfone, “Guide to Industrial
Control Systems (ICS) Security, SP 800-82 r2,” NIST, Tech. Rep., 2015.
[9] Positive Technologies, “Cybersecurity threatscape - Q2 2018,” Positive

Technologies, Tech. Rep., 2018.

[10] A. Ostfeld, E. Salomons, L. Ormsbee, J. G. Uber, C. M. Bros, P. Kalungi,
R. Burd, B. Zazula-Coetzee, T. Belrain, D. Kang, K. Lansey, H. Shen,
E. McBean, Z. Y. Wu, T. Walski, S. Alvisi, M. Franchini, J. P. Johnson,
S. R. Ghimire, B. D. Barkdoll, T. Koppel, A. Vassiljev, J. H. Kim,

[29] Y. Deng, L. Song, Z. Zhou, and P. Liu, “Complexity and Vulnerabil-
ity Analysis of Critical Infrastructures: A Methodological Approach,”
Mathematical Problems in Engineering, vol. 2017, Article ID 8673143,
12 pages., vol. https://doi.org/10.1155/2017/8673143, 2017.

[30] R. Steiner, M. Barr`ere, and E. Lupu, “WSNs Under Attack! How Bad
Is It? Evaluating Connectivity Impact Using Centrality Measures,” In
Proceedings of the IET Living in the Internet of Things Conference,
Cybersecurity of
[Online]. Available: http:
//digital-library.theiet.org/content/conferences/10.1049/cp.2018.0011

the IoT, March 2018.

13

[31] A. Ginter, Secure Operations Technology. Lulu.com, 2019.
[32] “Nessus Vulnerability Scanner,” https://www.tenable.com/products/

nessus-vulnerability-scanner, Cited May 2019.

[33] “Automated

Risk

&

ICS

for
automated-vulnerability-assessments-for-ics-networks/,
2019.

Networks,”

Vulnerability

Assessment
https://cyberx-labs.com/en/
Cited May

[34] S. A. Cook, “The Complexity of Theorem-Proving Procedures,”
in Proceedings of the Third Annual ACM Symposium on Theory of
Computing, ser. STOC ’71. New York, NY, USA: ACM, 1971, pp. 151–
158. [Online]. Available: http://doi.acm.org/10.1145/800157.805047
[35] D. L. Berre and A. Parrain, “The sat4j library, release 2.2.” JSAT, vol. 7,

no. 2-3, pp. 59–6, 2010.

[36] “SAT4J,” http://www.sat4j.org/, Cited May 2019.
[37] “D3.js - Data Driven Documents,” https://d3js.org/, Cited May 2019.
[38] M. Barr`ere, “META4ICS - Metric Analyser for Industrial Control

Systems,” https://github.com/mbarrere/meta4ics, May 2019.

[39] N. Trifunovic, Introduction to Urban Water Distribution, 1st ed. Taylor

& Francis Group, London, UK, 2006.

[40] Collective work of all DFRWS attendees, “A Road Map for Digital
Forensic Research,” in Report From the First Digital Forensic Research
Workshop (DFRWS), New York, NY, USA, August 2001.

[41] P. Stephenson, “Modeling of Post-Incident Root Cause Analysis,” in
International Journal of Digital Evidence, Vol. 2 Issue 2, 2003.
[42] G. M. Milis, C. G. Panayiotou, and M. M. Polycarpou, “SEMIoTICS:
Semantically Enhanced IoT-Enabled Intelligent Control Systems,” IEEE
Internet of Things Journal, vol. 6, no. 1, pp. 1257–1266, Feb 2019.
[43] T. Li, C. Feng, and C. Hankin, “Improving ICS Cyber Resilience
through Optimal Diversiﬁcation of Network Resources,” CoRR, vol.
arXiv:1811.00142, 2018. [Online]. Available: https://arxiv.org/abs/1811.
00142

[44] R. Tarjan, “Depth-First Search and Linear Graph Algorithms,” SIAM

Journal on Computing, 1972.

[45] “Satisﬁability Suggested Format,” http://dimacs.rutgers.edu/, Cited May

2019.

APPENDIX A
TSEITIN TRANSFORMATION EXAMPLE

The Tseitin transformation [12] is an important technical
part of our approach to produce equisatisﬁable CNF formulas.
From a practical perspective, we have experimentally observed
that the naive CNF conversion method barely scales to a
few hundred nodes before running out of memory. Instead,
the Tseitin transformation enables our approach to scale to
graphs with thousand of nodes in a matter of seconds. In this
section, we exemplify how the Tseitin transformation works
and the kind of formulas we obtain from it. Let us consider
the following logical formula:

φ = (p ∨ q) ∧ r

The subformulas involved in φ (non-atomic) are:

i. p ∨ q
ii. (p ∨ q) ∧ r

We now introduce a new variable for each subformula as

follows:

i. x1 ↔ p ∨ q
ii. x2 ↔ x1 ∧ r (note that we are using x1 instead of p ∨ q)
Putting all substitutions together (including x2 as the sub-
stitution of φ), we obtain the following transformed formula:

τ (φ) = x2 ∧ (x2 ↔ x1 ∧ r) ∧ (x1 ↔ p ∨ q)

Now each conjunct in τ (φ) can be individually converted
to its conjunctive normal form (CNF). For x1 ↔ p ∨ q, we
have that:

x1 ↔ p ∨ q ≡ (x1 → (p ∨ q)) ∧ ((p ∨ q) → x1)
≡ (¬x1 ∨ p ∨ q) ∧ (¬(p ∨ q) ∨ x1)
≡ (¬x1 ∨ p ∨ q) ∧ ((¬p ∧ ¬q) ∨ x1)
≡ (¬x1 ∨ p ∨ q) ∧ (¬p ∨ x1) ∧ (¬q ∨ x1)

It can be observed that after applying a few logical equivalence
rules, the obtained formula is in CNF. For x2 ↔ x1 ∧ r, we
have that:

x2 ↔ x1 ∧ r ≡ (x2 → (x1 ∧ r)) ∧ ((x1 ∧ r) → x2)
≡ (¬x2 ∨ (x1 ∧ r)) ∧ (¬(x1 ∧ r) ∨ x2)
≡ (¬x2 ∨ x1) ∧ (¬x2 ∨ r) ∧ (¬(x1 ∧ r) ∨ x2)
≡ (¬x2 ∨ x1) ∧ (¬x2 ∨ r) ∧ (¬x1 ∨ ¬r ∨ x2)

Finally, substituting each clause in τ (φ) by its corresponding
CNF conversion as shown before, we obtain a new CNF
formula with additional variables that is not equivalent to the
original one, but it is equisatisﬁable. This means that for any
truth assignment, φ and τ (φ) will always be either both true
or both f alse. The expanded new CNF formula is as follows:

τ (φ) =x2 ∧ (¬x1 ∨ p ∨ q) ∧ (¬p ∨ x1) ∧ (¬q ∨ x1)∧

(¬x2 ∨ x1) ∧ (¬x2 ∨ r) ∧ (¬x1 ∨ ¬r ∨ x2)

APPENDIX B
HANDLING CYCLES IN AND/OR GRAPHS

Let us consider the graph illustrated in Figure 16.

Fig. 16. Cycle example (between a, b, and c)

the logical

As explained in Section V,

transformation
fG(c1) starts at a target node c1 and traverses the graph
backwards until all the components in the graph have been
covered. It is easy to see that at some point, the partial formula
in this example will have the following aspect (where nodes
a, b and c have not yet been expanded):

fG(c1) = c1 ∧ d ∧ ((a ∧ b) ∨ (b ∧ c))

When node a is expanded with the nodes it depends on, we
can see that a depends on (s1∨c). While s1 is a terminal node

14

and does not depend on any node, node c still depends on b,
and b eventually depends on a. Because node a was already
visited, the transformation process stops the exploration at this
point (does not go further from a again), with the following
partial formula:
fG(c1) = c1 ∧ d ∧ (((a ∧ (s1 ∨ (c ∧ b ∧ a))) ∧ b) ∨ (b ∧ c))

Clearly, the last a can be removed since it already appears
early in the formula as a predecessor connected with the AND
operator. Hypothetically, if we follow the loop indeﬁnitely,
we would see the same pattern again and again. From a
satisﬁability perspective, it would yield the same result since
the same variables are conjunctively joined in the sentence. A
similar situation occurs when nodes b and c are expanded. At
the end, the ﬁnal transformation looks as follows:

fG(c1) =c1 ∧ d ∧ (((a ∧ (s1 ∨ (c ∧ b))) ∧ (b ∧ a ∧ (s1 ∨ c)))
∨ ((b ∧ a ∧ (s1 ∨ c)) ∧ (c ∧ b ∧ a ∧ s1)))

The metric resolution for this graph is shown in Figure 17.

Fig. 17. Cycle example (between a, b, and c) - META4ICS viewer

It

is important

to note that a typical approach to deal
with cycles, widely used in many graph-related works, is to
analyse each cycle as a whole. That is, treat loopy formations
as clusters that can be collapsed and analysed as one super
node where its cost is equal to the minimum cost among its
member nodes. From a graph-theoretical perspective, these
clusters are strongly connected components (SCC) and can
be efﬁciently identiﬁed in linear time using, for example,
Tarjan’s algorithm [44]. However, such an approach does not
properly work with AND/OR graphs. The previous scenario
is a counterexample. The minimum node cost within the cycle
is 3 (node c), however, the solution to that problem is node a
with cost 4. This is because the dependencies outside the loop
may affect the overall optimal solution.

APPENDIX C
META4ICS EXECUTION OVER EXAMPLE SCENARIO

Listing 1 depicts the JSON speciﬁcation ﬁle for our example
scenario, initially described in Section III, Figure 3. The graph
encoding essentially involves a list of nodes, the edges among
them, and the target node under analysis.

Once the input graph has been pre-processed as explained
in Section VI (step 2), the graph is translated into a logical
representation (step 3) that is later transformed into an instance
of a Weighted Partial MAX-SAT problem (step 4). Listing 2

15

{

” graph ” : {

” t a r g e t ” : ” c1 ” ,
” nodes ” :

[

” t y p e ” :

” a c t u a t o r ” ,

” v a l u e ” :

” i n f ” } ,

{ ” i d ” :
{ ” i d ” :
{ ” i d ” :
{ ” i d ” :
{ ” i d ” :
{ ” i d ” :
{ ” i d ” :
{ ” i d ” :

” c1 ” ,
” d ” ,
” or−d ” ,
” c ” ,
” b ” ,
” a ” ,
” a−b ” ,
” b−c ” ,

” t y p e ” :

” agent ” ,
” o r ” ,

” t y p e ” :

” t y p e ” :
” t y p e ” :
” t y p e ” :

” t y p e ” :
” t y p e ” :

” sensor ” ,
” agent ” ,
” sensor ” ,
” and ” ,
” and ” ,

” v a l u e ” :
” v a l u e ” :

” v a l u e ” :

” 10 ” } ,
” none ” } ,
” 2 ” } ,

” v a l u e ” :

” 5 ” } ,

” v a l u e ” :

” v a l u e ” :
” v a l u e ” :

” 2 ” } ,
” none ” } ,
” none ” }

] ,
” edges ” :

[
{ ” source ” :
{ ” source ” :
{ ” source ” :
{ ” source ” :
{ ” source ” :
{ ” source ” :
{ ” source ” :
{ ” source ” :

]

}

}

” d ” ,
” or−d ” ,
” a−b ” ,
” b−c ” ,
” a ” ,
” b ” ,
” b ” ,
” c ” ,

” t a r g e t ” :

” c1 ” } ,

” t a r g e t ” :

” t a r g e t ” :
” t a r g e t ” :

” d ” } ,
” or−d ” } ,
” or−d ” } ,

” t a r g e t ” :
” t a r g e t ” :
” t a r g e t ” :
” t a r g e t ” :

” a−b ” } ,
” a−b ” } ,
” b−c ” } ,
” b−c ” }

Listing 1. Graph speciﬁcation - JSON input

shows a partial output of META4ICS when it is executed
with the previous JSON speciﬁcation ﬁle (Listing 1), which
indicates node c1 as the target node.

L o g i c a l
c1 & ( d & (

f o r m u l a :

(

( a & s ) & ( b & s )

) | (

( b & s ) & ( c & s )

)

)

)

O b j e c t i v e :
∼ ( c1 & ( d & (

(

( a & s ) & ( b & s )

) | (

( b & s ) & ( c & s )

)

)

)

)

T s e i t i n CNF sentence (DIMACS ) :
− Number o f v a r i a b l e s : 15
− Number o f c l a u s e s : 27

==================================
### BEST s o l u t i o n found :
=== S e c u r i t y M e t r i c ===
CUT c o s t : 4 . 0
CUT s o l u t i o n :

( c , 2 ) ;

( a , 2 ) ;

Listing 2. Security metric resolution

In mathematical terms, the ﬁrst logical formula corresponds
to fG(c1), which indicates the means to fulﬁl
the target
node c1. The second formula is the objective of the attacker,
which mathematically corresponds to ¬fG(c1). The third part
(not fully displayed) shows the obtained CNF formula after
applying the Tseitin transformation. Our example has 15
logical variables and 27 clauses. We use the DIMACS format
to display the CNF formula [45]. Finally, the Weighted Partial
MAX-SAT problem is built using the appropriate clauses and
costs, as described in Section IV-C.

In this scenario, the solution obtained with the MAX-SAT
solver (step 4) indicates that the best strategy for the attacker
is to compromise nodes a and c with a minimal total cost of
4.0. META4ICS outputs another JSON ﬁle that includes the
original graph and also speciﬁes the minimum vertex cut as
shown in Listing 3 (step 5).

The output JSON depicted in Listing 3 is then used to feed
the visualisation component (step 6). Based on the information
provided in the vertex cut section, the system displays the
critical nodes as shown in Figure 5, Section VI (surrounded by
dashed red circles), and allows the user to validate the solution
by interactively removing them until the target is disabled.

{

” graph ” : {

. . . ,
” nodes ” :
” edges ” :

[
[

. . .
. . .

] ,
]

} ,
” c u t ”

: {
” nodes ”

:

[

{ ” i d ”
{ ” i d ”

:
:

” a ” ,
” c ” ,

” t y p e ”
” t y p e ”

:
:

” sensor ” ,
” sensor ” ,

” v a l u e ”
” v a l u e ”

:
:

” 2 ” } ,
” 2 ” }

] ,
” c o s t ”

: 4 . 0

}

}

Listing 3. JSON output with solution - Critical nodes and total cost

It is worth noting that when different costs are considered,
the optimal solution might naturally change. If we now con-
sider a different cost for node b, for example ϕ(b) = 3.2, we
obtain the results depicted in Listing 4, and consequently, a
new JSON ﬁle including the new security assessment results.

L o g i c a l
c1 & ( d & (

f o r m u l a :

(

( a & s ) & ( b & s )

) | (

( b & s ) & ( c & s )

)

)

)

O b j e c t i v e :
∼ ( c1 & ( d & (

(

( a & s ) & ( b & s )

) | (

( b & s ) & ( c & s )

)

)

)

)

T s e i t i n CNF sentence (DIMACS ) :
− Number o f v a r i a b l e s : 15
− Number o f c l a u s e s : 27

==================================
### BEST s o l u t i o n found :
=== S e c u r i t y M e t r i c ===
CUT c o s t : 3 . 2
CUT s o l u t i o n :

( b , 3 . 2 ) ;

Listing 4. Security metric resolution with ϕ(b) = 3.2

Figure 18 shows the results with the META4ICS graph

viewer.

Fig. 18. Graph viewer - metric resolution with ϕ(b) = 3.2

APPENDIX D
CASE STUDY - SCORE TABLES

Various security measures are applied by water supply
authorities in order to protect the components of their systems
against malicious actors. Table II presents a sample list of
measures taken by the authorities. Let each measure m have a
weight wm, which is based on the level of difﬁculty an attacker
will have to deal with it. Also let Mn be the set of measures

16

Num.
1
2
3
4
5
6
7

Notation
C
LC
F
B
LB
AS
MA

Weight Measure

1
2
1
2
3
3
4

Stored In Container.
Locked Container
Fenced Area
Stored In Building
Locked Building
Monitored Area (Alarm System)
Multi-Authentication

TABLE II
SECURITY MEASURES TO PROTECT ASSETS

taken for a component n. Thus, we compute the security score
of a component n as:

ϕ(n) =

(cid:88)

wm

m∈Mn

In Table III, we enumerate the possible “physical” con-
ﬁgurations for the components within our example system,
and provide a security score which measures the effort that
an attacker should make (i.e. attacker’s cost) in order to
compromise a component
in the given conﬁguration. The
system components have been grouped in different categories
according to their cost of compromise. It is important to note
that this scoring relies on the input we have collected and
refers to the physical security of the components within the
proposed scenario.

Components

Cost
ϕ(n)
0

s6

s4

s3

a1, a3, a9,
s5, s1

a2, a7, a8,
a10, s2, c1

1

2

3

5

6

9

9

12

16

Mn

{}

{C}

{C, F }

{C, LC}

{C, F, AS}

{B, LB, F }

{B, LB, F, AS}

{C, LC, B, LB,
F }

{C, LC, B, LB,
F, AS}

{C, LC, B, LB,
F, AS, M A}

Components state

Open to the air and access is not
limited by any means.
Stored in an unlocked container (C)
in a public area, with uncontrolled
access.
Stored in unlocked containers (C),
placed in an open space in an unse-
cured fenced area (F ).
Stored and locked (LC) in contain-
ers (C) in a public area.
Stored in unlocked containers (C),
placed in an open space, with a
fenced area (F ) secured with alarm
systems (AS).
Stored freely or unlocked in a build-
ing (B), which is locked (LB), and
placed in an unsecured fenced area
(F ).
Stored freely in a building (B),
locked (LB), and placed in a se-
cured fenced area (F ) with alarm
systems (AS).
Stored in containers (C) with a lock
mechanism (LC), inside a building
(B), which is locked (LB), and
placed in an unsecured fenced area
(F ).
Stored in containers (C) with a lock
mechanism (LC), inside a building
(B), which is locked (LB), and
placed in a secured fenced area (F )
with alarm systems (AS).
Stored in containers (C) with a lock
mechanism (LC), inside a building
(B), which is locked (LB) with a
multi-authentication system (M A),
and placed in a secured fenced area
(F ) with alarm systems (AS).

TABLE III
SCORE TABLE FOR PHYSICAL SECURITY

