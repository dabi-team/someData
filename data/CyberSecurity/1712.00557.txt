Recurrent Neural Network Language Models for
Open Vocabulary Event-Level Cyber Anomaly Detection

Aaron Tuor,1 Ryan Baerwolf,2 Nicolas Knowles,2
Brian Hutchinson,1,2 Nicole Nichols1 and Robert Jasper1
1Paciﬁc Northwest National Laboratory
Richland, Washington
2Western Washington University
Bellingham, Washington

Abstract

Automated analysis methods are crucial aids for monitoring
and defending a network to protect the sensitive or conﬁden-
tial data it hosts. This work introduces a ﬂexible, powerful,
and unsupervised approach to detecting anomalous behav-
ior in computer and network logs; one that largely eliminates
domain-dependent feature engineering employed by existing
methods. By treating system logs as threads of interleaved
“sentences” (event log lines) to train online unsupervised neu-
ral network language models, our approach provides an adap-
tive model of normal network behavior. We compare the ef-
fectiveness of both standard and bidirectional recurrent neu-
ral network language models at detecting malicious activity
within network log data. Extending these models, we intro-
duce a tiered recurrent architecture, which provides context
by modeling sequences of users’ actions over time. Com-
pared to Isolation Forest and Principal Components Analy-
sis, two popular anomaly detection algorithms, we observe
superior performance on the Los Alamos National Labora-
tory Cyber Security dataset. For log-line-level red team de-
tection, our best performing character-based model provides
test set area under the receiver operator characteristic curve
of 0.98, demonstrating the strong ﬁne-grained anomaly de-
tection performance of this approach on open vocabulary log-
ging sources.

1

Introduction

To minimize cyber security risks, it is essential that orga-
nizations be able to rapidly detect and mitigate malicious
activity on their computer networks. These threats can orig-
inate from a variety of sources including malware, phishing,
port scanning, etc. Attacks can lead to unauthorized network
access to perpetrate further damage such as theft of creden-
tials, intellectual property, and other business sensitive infor-
mation. In a typical scenario, cyber defenders and network
administrators are tasked with sifting through vast amounts
of data from various logging sources to assess potential se-
curity risks. Unfortunately, the amount of data for even a
modestly-sized network can quickly grow beyond the abil-
ity of a single person or team to assess, leading to delayed
response. The desire for automated assistance has and con-
tinues to encourage inter-domain research in cyber security
and machine learning.

Signature-based approaches for automated detection can
be highly effective for characterizing individual threats. De-

spite their high precision, they suffer from low recall and
may fail to detect subtle mutations or novel attacks. Alterna-
tively, given an unlabeled training set of typically benign ac-
tivity logs, one can build a model of “normal behavior”. Dur-
ing online joint training and evaluation of this model, pat-
terns of normal usage will be reinforced and atypical mali-
cious activity will stand out as anomalous. The features used
to identify unusual behavior are typically statistical feature
vectors associated with time slices, e.g., vectors of counts for
types of activities taking place in a 24-hour window. Such
systems developed in research have been criticized as brittle
to differences in site-speciﬁc properties of real-world oper-
ational networks such as security constraints and variable
usage patterns (Sommer and Paxson 2010).

The approach we introduce aims to minimize site-speciﬁc
assumptions implicit in feature engineering, and effectively
model variability in network usage by direct online learn-
ing of language models over log lines. Language models
assign probabilities to sequences of tokens and are a core
component of speech recognition, machine translation, and
other language processing systems. Speciﬁcally, we explore
the effectiveness of several recurrent neural network (RNN)
language models for use in a network anomaly detection sys-
tem. Our system dynamically updates the network language
model each day based on the previous day’s events. When
the language model assigns a low probability to a log-line it
is ﬂagged as anomalous. There are several advantages to this
approach:

1. Reduced feature engineering: Our model acts directly
on raw string tokens, rather than hand-designed domain-
speciﬁc statistics. This dramatically reduces the time to
deployment, and makes it agnostic to the speciﬁc network
or logging source conﬁguration. It also removes the “blind
spots” introduced when tens of thousands of log-lines are
distilled down to a single aggregated feature vector, al-
lowing our model to capture patterns that would have oth-
erwise been lost.

2. Fine grained assessment: The response time for analysts
can be improved by providing more speciﬁc and relevant
events of interest. Baseline systems that alert to a user’s
day aggregate require sifting through tens of thousands of
actions. Our approach can provide log-line-level or even
token-level scores to the analyst, helping them quickly lo-

cate the suspicious activity.

3. Real time processing: With the ability to process events
in real time and ﬁxed bounds on memory usage which
do not grow over time, our approach is suitable for the
common scenario in which log-line events are appearing
in a high-volume, high-velocity log stream.

We assess our models using the publicly available
Los Alamos National Laboratory (LANL) Cyber Security
Dataset, which contains real (de-identiﬁed) data with ground
truth red team attacks, and demonstrate language models
deﬁnitively outperforming standard unsupervised anomaly
detection approaches.

2 Prior work

Machine learning has been widely explored for network
anomaly detection, with techniques such as isolation for-
est (Gavai et al. 2015; Liu, Ting, and Zhou 2008) and prin-
cipal component analysis (Novakov et al. 2013; Ringberg
et al. 2007) attracting signiﬁcant interest. Machine learn-
ing classiﬁers ranging from decision trees to Na¨ıve Bayes
have been used for cyber security tasks such as malware de-
tection, network intrusion, and insider threat detection. Ex-
tensive discussion of machine learning applications in cy-
ber security is presented in (Bhattacharyya and Kalita 2013;
Buczak and Guven 2016; Dua and Du 2016; Kumar, Kumar,
and Sachdeva 2010; Zuech, Khoshgoftaar, and Wald 2015;
Rubin-Delanchy, Lawson, and Heard 2016).

Deep learning approaches are also gaining adoption for
specialized cyber defense tasks. In an early use of recurrent
neural networks, Debar, Becker, and Siboni (1992) model
sequences of Unix shell commands for network intrusion
detection. Anomaly detection has been demonstrated using
deep belief networks on the KDD Cup 1999 dataset (Al-
rawashdeh and Purdy 2016), and Bivens et al. (2002) use
multi-layer perceptrons for the DARPA 1999 dataset. Both
approaches use aggregated features and synthetic network
data. Tuor et al. (2017) and Veeramachaneni et al. (2016)
both employ deep neural network autoencoders for unsu-
pervised network anomaly detection using time aggregated
statistics as features.

Some works of note have been previously published on
the LANL data. Turcotte, Heard and Kent (2016) develop
an online statistical model for anomaly detection in network
activity using Multinomial-Dirichlet models. Similarly, Tur-
cotte et al. (2016) use Poission Factorization (Gopalan, Hof-
man, and Blei 2013) on the LANL authentication logs. A
user/computer authentication count matrix is constructed by
assuming each count comes from a Poisson distribution pa-
rameterized by latent factors for users and computers. The
learned distributions are then used to predict unlikely au-
thentication behavior.

Several variants of tiered recurrent networks have been
explored in the machine learning and natural language pro-
cessing communities (Koutnik et al. 2014; Ling et al. 2015b;
Ling et al. 2015a; Chung et al. 2015). They are often real-
ized by a lower tier pre-processing network, whose output is
fed to an upper tier network and the separate tiers are jointly

trained. Ling et al. (2015b) use a character-level convolu-
tional neural network to feed a word level long short-term
memory (LSTM) RNN for machine translation, with predic-
tions made at the word-level. Both Hwang and Sung (2016)
and Ling et al. (2015a) use a character-based LSTM to feed
a second word or utterance-based LSTM for language mod-
eling. Pascanu et al. (2015) create activity models from real
world data on a per-event (command) basis and sequences of
system calls are then modeled using RNN and echo state net-
works. The learned features are used to independently train
neural network and logistic regression classiﬁers. Max pool-
ing is applied to hidden layers of the unsupervised RNN for
each time step in a session and the result is concatenated to
the ﬁnal hidden state to produce feature vectors for the clas-
siﬁer. This is similar to our tiered approach, in which we use
the average of all hidden states concatenated with the ﬁnal
hidden state as input to the upper-tier RNN. In contrast, our
model is completely unsupervised and all components are
jointly trained.

3 Approach

Our approach learns normal behavior for users, processing
a stream of computer and network log-lines as follows:
1. Initialize model weights randomly
2. For each day k in chronological order:

(a) Given model Mk−1, produce log-line-level anomaly

scores for all events in day k

(b) Optionally, produce an aggregated anomaly score each

user for day k (from the log-line-level scores)

(c) Send per-user-day or per-user-event anomaly scores in

rank order to analysts for inspection

(d) Update model weights to minimize loss on all log-lines

in day k, yielding model Mk

This methodology interleaves detection and training in an
online fashion. In this section we detail the components of
our approach.

3.1 Log-Line Tokenization

To work directly from arbitrary log formats, we treat log-
lines as sequences of tokens. For this work, we consider two
tokenization granularities: word-level and character-level.

For word tokenization, we assume that tokens in the log-
line are delimited by a known character (e.g., space or
comma). After splitting the log-lines on this delimiter, we
deﬁne a shared vocabulary of “words” over all log ﬁelds,
consisting of the sufﬁciently-frequent tokens appearing in
the training set. To allow our model to handle previously
unseen tokens, we add an “out of vocbulary” token to our
vocabulary, <oov>. (For instance, not every IP address will
be represented in a training set; likewise, new PCs and users
are continually being added to large networks.) To ensure
that <oov> has non-zero probability, we replace sufﬁciently
infrequent tokens in the training data with <oov>. During
evaluation, tokens not seen before are labeled <oov>. In or-
der to accommodate shifting word distributions in an online
environment, a ﬁxed size vocabulary could be periodically

updated using a sliding window of word frequency statis-
tics. For simplicity, we assume we have a ﬁxed training set
from which we produce a ﬁxed vocabulary.

To avoid the challenges of managing a word-level vocab-
ulary, we also develop language models using a character-
level tokenization. In this case our primitive vocabulary,
the alphabet of printable ASCII characters, circumvents the
open vocabulary issue by its ability to represent any log en-
try irrespective of the network, logging source, or log ﬁeld.
With character-level tokenization, we keep the delimiter to-
ken in the sequence, to provide our models with cues to tran-
sitions between log-line ﬁelds.

3.2 Recurrent Neural Network Language Models

To produce log-line-level anomaly scores, we use recurrent
neural networks in two ways: 1) as a language model over
individual log-lines, and 2) to model the state of a user over
time. We ﬁrst present two recurrent models that focus only
on (1), and then a tiered model that accomplishes both (1)
and (2). Both were implemented1 for our experiments using
TensorFlow (Abadi et al. 2015).

Event Model (EM). First we consider a simple RNN
model that operates on the token (e.g., word) sequences
of individual log-lines (events). Speciﬁcally, we consider
a Long Short-Term Memory (LSTM) (Hochreiter and
Schmidhuber 1997) network whose inputs are token embed-
dings and from whose output we predict distributions over
the next token.

For a log-line with K tokens, each drawn from a shared
vocabulary of size C, let X(1:K) = x(1), x(2), . . . , x(K) de-
note a sequence of one-hot representations of the tokens
(each x(t) ∈ RC).

In this model, the hidden representation at token t, h(t),
from which we make our predictions, is a function of
x(1), x(2), . . . , x(t) according to the usual LSTM equations:

h(t) = o(t) ◦ tanh(c(t))
c(t) = f(t) ◦ c(t−1) + i(t) ◦ g(t)
g(t) = tanh (cid:0)x(t)W(g,x) + h(t−1)W(g,h) + b(g)
f(t) = σ (cid:0)x(t)W(f,x) + h(t−1)W(f,h) + b(f )
(cid:1)
i(t) = σ (cid:0)x(t)W(i,x) + h(t−1)W(i,h) + b(i)
(cid:1) ,
o(t) = σ (cid:0)x(t)W(o,x) + h(t−1)W(o,h) + b(o)

(cid:1)

(1)
(2)
(cid:1) (3)
(4)

(5)

(6)

where the initial hidden and cell states, c(0) and h(0), are
set to zero vectors, and ◦ and σ denote element-wise mul-
tiplication and logistic sigmoid, respectively. Vector g(t) is
a hidden representation based on the current input and pre-
vious hidden state, while vectors f(t), i(t), and o(t), are the
standard LSTM gates. The matrices (W) and bias vectors
(b) are the model parameters. We use each h(t−1) to pro-
duce a probability distribution p(t) over the token at time t,
as follows:

p(t) = softmax (cid:0)h(t−1)W(p) + b(p)

(cid:1)

(7)

1Code will soon be available at https://github.com/pnnl/safekit

Figure 1: Event Models. Set of black bordered nodes and
connections illustrate the EM model while set of all nodes
and connections illustrate the BEM model.

We use cross-entropy loss,

1
K

K
(cid:88)

t=1

H(x(t), p(t)),

(8)

for two important purposes: ﬁrst, as per-log-line anomaly
score and second, as the training objective to update model
weights. We train this model using stochastic mini-batch
(non-truncated) back-propagation through time.

Bidirectional Event Model (BEM). Following the lan-
guage model formulation suggested in (Schuster and Paliwal
1997), we alternatively model the structure of log lines with
a bidirectional LSTM. We deﬁne a new set of hidden vec-
tors hb
(1) by running the LSTM equations
backwards in time (starting with initial zero cell and hidden
states at time K + 1 set to zero). The weights W and biases
b for the backward LSTM are denoted with superscript b.

(K), . . . , hb

(K+1), hb

The probability distribution p(t) over the token at time t

is then:

p(t) = softmax

(cid:16)

h(t−1)W(p) + hb

(t+1)Wb

(p) + b(p)

(cid:17)

(9)

Tiered Event Models (T-EM, T-BEM). To incorporate
inter-log-line context, we propose a two-tiered recurrent
neural network. The lower-tier can be either event model
(EM or BEM), but with the additional input of a context vector
(generated by the upper-tier) concatenated to the token em-
bedding at each time step. The input to the upper-tier model
is the hidden states of the lower-tier model. This upper tier
models the dynamics of user behavior over time, produc-
ing the context vectors provided to the lower-tier RNN. This
model is illustrated in Fig. 2.

In this model, x(u,j) denotes user u’s jth log line, which
consists of a sequence of tokens as described in the previous
subsections. The upper-tier models a sequence of user log
lines, x(u,1), x(u,2), . . . , x(u,Tu), using an LSTM. For each
user u and each log line j in the user’s log line sequence, a
lower-tier LSTM is applied to the tokens of x(u,j). The input
to the upper-tier model at log-line j is the concatenation of:
1) the ﬁnal lower-tier hidden state(s) and 2) the average of
the lower-tier hidden states. In the case of a lower-tier EM,

LSTM LSTM… softmax softmaxLSTM x(K-1)softmax p(2)p(K)LSTM LSTMLSTM x(1)x(3)x(2)<eos>LSTMsoftmaxp(K-1)LSTMx(K-2)x(K)p(1)<sos>Figure 2: Tiered Event Model (T-EM)

(1) refers to the hidden state at time K; for the BEM, (1)
is the concatenation of the forward hidden state at time K
and the backward hidden state at time 1. For (2), we aver-
age over hidden states primarily to provide many short-cut
connections in the LSTM, which aids trainability. The out-
put of the upper-tier LSTM at log-line j is a hidden state
ˆh(u,j). This hidden vector serves to provide context for the
lower-tier model at the next time step: speciﬁcally, ˆh(u,j−1)
is concatenated to each of the inputs of the lower-tier model
operating on the jth log-line. Note that the upper-tier model
serves only to propagate context information across individ-
ual log-lines; no loss is computed directly on the values pro-
duced by the upper-tier model.

The upper- and lower-tier models are trained jointly to
minimize the cross-entropy loss of the lower-tier model. We
unroll the two-tier model for a ﬁxed number of log-lines,
fully unrolling each of the lower-tier models within that win-
dow. The lower-tier model’s cross-entropy loss is also used
to detect anomalous behavior, as is described further in Sec-
tion 4.2.

Minibatching becomes more challenging for the tiered
model, as the number of log-lines per day can vary dramati-
cally between users. This poses two problems: ﬁrst, it intro-
duces the possibility that the most active users may have a
disproportionate impact on model weights; second, it means
that toward the end of the day, there may not be enough users
to ﬁll the minibatch. To counteract the ﬁrst problem, we ﬁx
the number of log-lines per user per day that the model will
train on. The remaining log-lines are not used in any gradi-
ent updates. We leave compensating for the inefﬁciency that
results from the second to future work.

3.3 Baselines
Anomaly detection in streaming network logs often relies
upon computing statistics over windows of time and apply-
ing anomaly detection techniques to those vectors. Below
we describe the aggregate features and two anomaly detec-
tion techniques that are typical of prior work.

Aggregate Features We ﬁrst deﬁne the set of per-user-
day features, which summarize users’ activities in the day.
To aggregate the features that have a small number of dis-
tinct values (e.g. success/failure, logon orientation) we count
the number of occurrences for each distinct value for the
user-day. For ﬁelds that have a larger number of distinct val-
ues (pcs, users, domains), we count the number of common
and uncommon events that occurred, rather than the number
of occurrences of each distinct value (this approach avoids
high dimensional sparse features). Furthermore, we deﬁne

two categories of common/uncommon; to the individual en-
tity/user, and relative to all users. A value is deﬁned as un-
common for the user if it accounts for fewer than 5% of the
values observed in that ﬁeld (up to that point in time), and
common otherwise. A value is deﬁned as uncommon for all
users if it occurs fewer times than the average value for the
ﬁeld, and common otherwise.

For the LANL dataset, the prior featurization strategy
yields a 108-dimensional aggregate feature vector per user-
day. These feature vectors then serve as the input to the base-
line models described next.

Models We consider two baseline models. The ﬁrst uses
Principal Components Analysis (pca) to learn a low dimen-
sional representation of the aggregate features; the anomaly
score is proportional to the reconstruction error after map-
ping the compressed representation back into the original di-
mension (Shyu et al. 2003). The second is an isolation forest
(iso) based approach (Liu, Ting, and Zhou 2008) as imple-
mented in scikit-learn’s outlier detection tools (Pedregosa et
al. 2011). This was noted as the best performing anomaly
detection algorithm in the recent DARPA insider threat de-
tection program, (Gavai et al. 2015).

4 Experiments
In this section we describe experiments to evaluate the ef-
fectiveness of the proposed event modeling algorithms.

4.1 Data
The Los Alamos National Laboratory (LANL) Cyber Secu-
rity Dataset (Kent 2016) consists of event logs from LANL’s
internal computer network collected over a period of 58 con-
secutive days. The data set contains over one billion log-
lines from authentication, process, network ﬂow, and DNS
logging sources. Identifying ﬁelds (e.g., users, computers,
and processes) have been anonymized.

The recorded network activities included both normal op-
erational network activity as well as a series of red team ac-
tivities that compromised account credentials over the ﬁrst
30 days of data. Information about known red team attack
events is used only for evaluation; our approach is strictly
unsupervised.

For the experiments presented in this paper, we rely only
on the authentication event logs, whose ﬁelds and statistics
are summarized in Figure 3a. We ﬁlter these events to only
those log-lines linked to an actual user, removing computer-
computer interaction events. Events on weekends and holi-
days contain drastically different frequencies and distribu-
tions of activities. In a real deployment a separate model
would be trained for use on those days, but because no ma-
licious events were in that data it was also withheld.

Table 3b has statistics of our data split; the ﬁrst 12 days
serve as the development set, while the remaining 18 days
are the independent test set.

4.2 Assessment Granularity
Our model learns normal behavior and assigns relatively
high loss to events that are unexpected. A principal advan-
tage of our approach is this ability to score the anomaly of

LSTMLSTMLSTMLSTMLSTMLSTMMeanFinalContextLSTMFinalContextLSTMMean<sos><eos><sos><eos>……Field
time
source user
dest. user
source pc
dest. pc
auth. type
logon type
auth. orient
success

Example
1
C625@DOM1
U147@DOM1
C625
C625
Negotiate
Batch
LogOn
Success

(a)

# unique labels
5011198
80553
98563
16230
15895
29
10
7
2

Model Tokenization

pca
iso
EM
BEM
T-EM
T-BEM
EM
BEM
T-EM
T-BEM

-
-
Word
Word
Word
Word
Char
Char
Char
Char

AUC
0.754
0.763
0.802
0.876
0.782
0.864
0.750
0.843
0.772
0.837

AP
73.9
75.0
79.3
87.0
77.5
85.7
70.9
82.9
76.2
82.9

Days
# Events
# Attacks
# User-days

Dev
1-12

Test
13-58
133M 918M
385
79

316
57

(b)

Figure 3: Dataset statistics: (a) Authentication log ﬁelds and
statistics and (b) dataset splits.

individual events, allowing us to ﬂag at the event-level or
aggregate anomalies over any larger timescale.

For this work, we consider two timescales. First, we as-
sess based on individual events; a list of events would be pre-
sented to the analyst, sorted descending by anomaly score.
Second, to facilitate comparison with traditional aggregation
methods, we aggregate anomaly scores over all of a user’s
events for the day (speciﬁcally, taking the max), producing
a single anomaly score per-user, per-day. In this scenario,
a list of user-days would be provided to the analyst, sorted
descending by anomaly score. We refer to this approach as
max, because the anomaly scores provided to the analyst are
produced by taking the maximum score over the event scores
in the window for that user (where event-level scoring is just
taking the max over a singleton set of one event).

In order to counter systematic offsets in users’ anomaly
scores for a day we also consider a simple normalization
strategy, which we refer to as diff, by which every raw
score is ﬁrst normalized by subtracting the user’s average
event-level anomaly score for the day.

4.3 Metrics

We consider two performance metrics. First, we assess re-
sults using the standard area under the receiver operator
characteristic curve (AUC) which characterizes the trade-off
in model detection performance between true positives and
false positives, effectively sweeping through all possible an-
alyst budgets. False positives are detections that are not truly
red team events, while true positives are detections that are.
To quantify the proportion of the data the analyst must
sift through to diagnose malicious behavior on the network,
we use the Average Percentile (AP) metric. Speciﬁcally, for
each red team event or user-day, we note the percentile of its
anomaly amongst all anomaly scores for the day. We then
average these percentiles for all of the malicious events or

Table 1: User-day granularity test set AUC and AP. Lan-
guage model anomaly scores calculated with average user-
day normalization (diff).

LOG

DAY

diff
0.964
0.974
0.959
0.959
0.940
0.973
0.859
0.945

max
0.932
0.895
0.948
0.902
0.935
0.979
0.927
0.969

diff
0.802
0.876
0.782
0.864
0.751
0.843
0.772
0.837

max
0.794
0.811
0.803
0.838
0.754
0.846
0.809
0.854

W EM
W BEM
W T-EM
W T-BEM
C EM
C BEM
C T-EM
C T-BEM

Table 2: Comparison of AUC for day-level and log-line-level
analysis with and without user-day normalization. Figures 4
and 5 provide a visualization of these results.

user-days. Note that if all true malicious events or user-days
are ﬂagged as the most anomalous on the respective days,
then AP ≈ 100, while if all malicious events or user-days
are ranked as the least anomalous on their respective days,
AP ≈ 0. For both AUC and AP, a higher score is better.

Our model hyperparameters were manually tuned to max-
imize AP for day-level diff scores on the development set.
No separate training set is needed as our approach is unsu-
pervised and trained online.

4.4 Results and Analysis
We begin by exploring the user-day granularity perfor-
mance. Table 1 summarizes model detection performance
at this granularity on the test set for the AUC and AP met-
rics using the diff method to produce day level scores
from the language models. A few trends are evident from
these results. First, the aggregate feature baselines have near-
equivalent performance by both metrics, with the isolation
forest approach having a slight edge. We hypothesize the
feature representation, which is common to these methods,
could be a bottleneck in performance. This highlights the
“blind spot” issue feature engineering introduces. Second,
despite having only the context of a single log-line at a
time, as opposed to features aggregated over an entire day,
the event model (EM) performs comparably to the baseline
models when a forward pass LSTM network is used with

Figure 4: Word model comparison of AUC at day-level and
log-line-level granularities.

Figure 5: Character model comparison of AUC at day-level
and log-line-level granularities.

a character tokenization and outperforms the baselines with
word tokenization. The most pronounced performance gain
results from using bidirectional models. Finally, word-level
tokenization performs better than character-level; however,
even the bidirectional character models perform apprecia-
bly better than the baselines.

It is clear from these results that the tiered models perform
comparably to, but not better than, the event-level models.
This suggests that the event level model is able to charac-
terize normal user behavior from information stored in the
model weights of the network, which are trained each day to
model user activity. Given the context of the past day’s ac-
tivity stored in the model weights, the categorical variables
represented by the ﬁelds in an individual log line may elim-
inate the need for explicit event context modeling. We leave
tracking the state of individual computers, rather than users,
to future work, but hypothesize that it may make the tiered
approach more effective.

Next, we broaden our analysis of language modeling ap-
proaches, comparing performance across all language mod-
els, tokenization strategies, anomaly granularity, and nor-
malization techniques. Figure 4 plots AUC for all language
model types using word tokenization, contrasting max and
diff normalization modes. Figure 5 compares the same
variations for character tokenization. Table 2 presents these
results in tabular form. With few exceptions, log-line-level
granularity vastly outperforms day-level; this is true for both
the character-level and word-level tokenization strategies,
with an average gain of 0.1 AUC. The most interesting out-
come of these comparisons is that word tokenization perfor-
mance gains are heavily reliant on the diff normalization,
whereas for character tokenization the diff normalization
has a minor detrimental effect for some models. This sug-
gests that the character-level model could be used to provide
a more immediate response time, not having to wait until the
day is done to obtain the day statistics used in diff mode.
The two tokenization strategies may in fact be complemen-
tary as the versatility and response time gains of a charac-
ter tokenization come at the expense of easy interpretibil-
ity of a word tokenization: the word tokenization allows

anomaly scores to be decomposed into individual log-line
ﬁelds, enabling analysts to pinpoint features of the event that
most contributed to it being ﬂagged. Since we tuned hyper-
parameters using diff mode, the character-level model has
potential to do better with additional tuning.

Next, Figures 6 and 7 visualize the average percentiles of
red team detections for the subset of the test set with the
most red-team activity. Anomaly scores for both word and
character tokenizations are computed without average user-
day offset normalization. Red team log-line-level scores are
plotted as purple x’s with the x coordinate being the sec-
ond in time at which the event occurred and y coordinate
the anomaly score for that event. Percentile ranges are col-
ored to provide context for the red-team anomaly scores
against the backdrop of other network activity. The spread
of non-normalized anomaly scores is much greater for the
word-level tokenizations (Fig. 7) than character-level (Fig.
6), which could explain the different sensitivity of word level
tokenization to normalization. Also notice that there is an
expected bump in percentiles for windows of frequent red-
team activity. Curiously, at the end of day 14 there are mas-
sive bumps for the 99th percentile, which suggest unplanned
and un-annotated anomalous events on the LANL network
for those hours. Notice that for the character tokenization al-
most all non-normalized red team anomaly scores are above
the 95th percentile, with a large proportion above the 99th
percentile.

Finally, Figure 8 plots the ROC curves for the best ag-
gregate baseline (iso), the best user-day granularity lan-
guage model (word BEM), and the best event-level granular-
ity model (character BEM). It illustrates the qualitatively dif-
ferent curves obtained with the baselines, the user-day gran-
ularity, and the event-level granularity.

Since the proportion of red-team to normal events is van-
ishingly low in the data-set (< 0.001%), the false-positive
rate is effectively the proportion of data ﬂagged to achieve a
particular recall. From this observation, Figure 8 shows the
character event model can achieve 100% recall from only
12% of the data whereas the other models considered only
achieve 100% recall when nearly all of the data has been

LOG | DAYW EMLOG | DAYW BEMLOG | DAYW T-EMLOG | DAYW T-BEM20406080100AUC96979595938994908087788679818083diffmaxLOG | DAYW EMLOG | DAYW BEMLOG | DAYW T-EMLOG | DAYW T-BEM20406080100AUC93978594939792967584778375848085diffmaxFigure 6: Character-level red-team log-line anomaly scores
in relation to percentiles over time.

Figure 7: Word-level red-team log-line anomaly scores in
relation to percentiles over time.

log-line-level detection performance
detection. The best
was achieved with a bidirectional character-based language
model, obtaining a 0.98 area under the ROC curve, showing
that for the constrained language domain of network logs,
character based language modeling can achieve comparable
accuracy to word based modeling for event level detection.
We have therefore demonstrated a simple and effective ap-
proach to modeling dynamic networks with open vocabulary
logs (e.g. with new users, PCs, or IP addresses).

We propose to extend this work in several ways. First,
potential modeling advantages of tiered architectures merit
further investigation. The use of tiered architectures to track
PCs instead of network users, or from a richer set of logging
sources other than simply authentication logs may take bet-
ter advantage of their modeling power. Next, we anticipate
interpretability can become lost with such detailed granu-
larity provided by log-line-level detection from a character-
based model, therefore future work will explore alternate
methods of providing context to an analyst. Finally, we are
interested in exploring the robustness of this approach to
adversarial tampering. Similarly performing models could
have different levels of resilience that would lead to selec-
tion of one over another.

Acknowledgments The research described in this paper is
part of the Analysis in Motion Initiative at Paciﬁc Northwest
National Laboratory. It was conducted under the Laboratory
Directed Research and Development Program at PNNL, a
multi-program national laboratory operated by Battelle for
the U.S. Department of Energy. The authors would also like
to thank the Nvidia corporation for their donations of Titan
X and Titan Xp GPUs used in this research.

References
[Abadi et al. 2015] Abadi, M.; Agarwal, A.; Barham, P.;
Brevdo, E.; Chen, Z.; Citro, C.; Corrado, G. S.; Davis, A.;
Dean, J.; Devin, M.; Ghemawat, S.; Goodfellow, I.; Harp,
A.; Irving, G.; Isard, M.; Jia, Y.; Jozefowicz, R.; Kaiser, L.;
Kudlur, M.; Levenberg, J.; Man´e, D.; Monga, R.; Moore, S.;

Figure 8: ROC curves for best performing baseline, word
language model evaluated at day-granularity, and character
language model evaluated at log-line-granularity.

handed to the analyst. Further, the character event model can
achieve 80% recall by ﬂagging only 3% of the data whereas
the word day language model needs 14% of the data and the
aggregate isolation forest model needs 55% of the data to
achieve the same result.

5 Conclusion
This work builds upon advances in language modeling to
address computer security log analysis, proposing an unsu-
pervised, online anomaly detection approach. We eliminate
the usual effort-intensive feature engineering stage, making
our approach fast to deploy and agnostic to the system con-
ﬁguration and monitoring tools. It further confers the key
advantage of event-level detection which allows for a near
immediate alert response following anomalous activity.

In experiments using the Los Alamos National Labora-
tory Cyber Security Dataset, bidirectional language mod-
els signiﬁcantly outperformed standard methods at day-level

Day 126 am12 pm6 pmDay 136 am12 pm6 pmDay 146 am12 pm6 pmDay 15Day/Time0.000.250.500.751.001.251.501.752.00Anomaly Score75-95 Percentile95-99 PercentileRed-event0.00.20.40.60.81.0False positive0.00.20.40.60.81.0True positiveiso agg 0.76 AUCW BEM day 0.88 AUCC BEM log-line 0.98 AUC2002.

Murray, D.; Olah, C.; Schuster, M.; Shlens, J.; Steiner, B.;
Sutskever, I.; Talwar, K.; Tucker, P.; Vanhoucke, V.; Vasude-
van, V.; Vi´egas, F.; Vinyals, O.; Warden, P.; Wattenberg, M.;
Wicke, M.; Yu, Y.; and Zheng, X. 2015. TensorFlow: Large-
scale machine learning on heterogeneous systems. Software
available from tensorﬂow.org.
[Alrawashdeh and Purdy 2016] Alrawashdeh, K., and Purdy,
C. 2016. Toward an online anomaly intrusion detection
system based on deep learning. In Machine Learning and
Applications (ICMLA), 2016 15th IEEE International Con-
ference on, 195–200. IEEE.
[Bhattacharyya and Kalita 2013] Bhattacharyya, D. K., and
Kalita, J. K. 2013. Network anomaly detection: A machine
learning perspective. CRC Press.
[Bivens et al. 2002] Bivens, A.; Palagiri, C.; Smith, R.; Szy-
Network-
manski, B.; Embrechts, M.; et al.
Intelli-
based intrusion detection using neural networks.
gent Engineering Systems through Artiﬁcial Neural Net-
works 12(1):579–584.
[Buczak and Guven 2016] Buczak, A. L., and Guven, E.
2016. A survey of data mining and machine learning meth-
ods for cyber security intrusion detection. IEEE Communi-
cations Surveys & Tutorials 18(2):1153–1176.
[Chung et al. 2015] Chung, J.; Gulcehre, C.; Cho, K.; and
Bengio, Y. 2015. Gated feedback recurrent neural networks.
In International Conference on Machine Learning, 2067–
2075.
[Debar, Becker, and Siboni 1992] Debar, H.; Becker, M.;
and Siboni, D. 1992. A neural network component for an
In Proc. IEEE Symposium on
intrusion detection system.
Research in Security and Privacy, 240–250.
[Dua and Du 2016] Dua, S., and Du, X. 2016. Data mining
and machine learning in cybersecurity. CRC press.
[Gavai et al. 2015] Gavai, G.; Sricharan, K.; Gunning, D.;
Hanley, J.; Singhal, M.; and Rolleston, R. 2015. Supervised
and unsupervised methods to detect insider threat from en-
terprise social and online activity data. Journal of Wireless
Mobile Networks, Ubiquitous Computing, and Dependable
Applications 6(4):47–63.
[Gopalan, Hofman, and Blei 2013] Gopalan, P.; Hofman,
J. M.; and Blei, D. M. 2013. Scalable recommendation with
Poisson factorization. arXiv preprint arXiv:1311.1704.
[Hochreiter and Schmidhuber 1997] Hochreiter,
and
Schmidhuber, J. 1997. Long short-term memory. Neural
computation 9(8):1735–1780.
[Hwang and Sung 2016] Hwang, K., and Sung, W. 2016.
Character-level language modeling with hierarchical recur-
rent neural networks. arXiv preprint arXiv:1609.03777.
[Kent 2016] Kent, A. D. 2016. Cyber security data sources
for dynamic network research. Dynamic Networks and
Cyber-Security 1:37.
[Koutnik et al. 2014] Koutnik, J.; Greff, K.; Gomez, F.; and
Schmidhuber, J. 2014. A clockwork RNN. arXiv preprint
arXiv:1402.3511.
[Kumar, Kumar, and Sachdeva 2010] Kumar, G.; Kumar, K.;
and Sachdeva, M. 2010. The use of artiﬁcial intelligence

S.,

based techniques for intrusion detection: a review. Artiﬁcial
Intelligence Review 34(4):369–387.
[Ling et al. 2015a] Ling, W.; Lu´ıs, T.; Marujo, L.; Astudillo,
R. F.; Amir, S.; Dyer, C.; Black, A. W.; and Trancoso, I.
2015a. Finding function in form: Compositional charac-
ter models for open vocabulary word representation. arXiv
preprint arXiv:1508.02096.
[Ling et al. 2015b] Ling, W.; Trancoso, I.; Dyer, C.; and
Black, A. W. 2015b. Character-based neural machine trans-
lation. arXiv preprint arXiv:1511.04586.
[Liu, Ting, and Zhou 2008] Liu, F. T.; Ting, K. M.; and
Zhou, Z.-H. 2008. Isolation forest. In Proc. ICDM.
[Novakov et al. 2013] Novakov, S.; Lung, C.-H.; Lam-
badaris, I.; and Seddigh, N. 2013. Studies in applying
PCA and wavelet algorithms for network trafﬁc anomaly
In High Performance Switching and Routing
detection.
(HPSR), 2013 IEEE 14th International Conference on, 185–
190. IEEE.
[Pascanu et al. 2015] Pascanu, R.; Stokes, J. W.; Sanossian,
H.; Marinescu, M.; and Thomas, A. 2015. Malware classi-
ﬁcation with recurrent networks. In Acoustics, Speech and
Signal Processing (ICASSP), 2015 IEEE International Con-
ference on, 1916–1920. IEEE.
[Pedregosa et al. 2011] Pedregosa, F.; Varoquaux, G.; Gram-
fort, A.; Michel, V.; Thirion, B.; Grisel, O.; Blondel, M.;
Prettenhofer, P.; Weiss, R.; Dubourg, V.; Vanderplas, J.; Pas-
sos, A.; Cournapeau, D.; Brucher, M.; Perrot, M.; and Duch-
esnay, E. 2011. Scikit-learn: Machine learning in Python.
Journal of Machine Learning Research 12:2825–2830.
[Ringberg et al. 2007] Ringberg, H.; Soule, A.; Rexford, J.;
and Diot, C. 2007. Sensitivity of PCA for trafﬁc anomaly
detection. In SIGMETRICS.
[Rubin-Delanchy, Lawson, and Heard 2016] Rubin-
Delanchy, P.; Lawson, D. J.; and Heard, N. A.
2016.
Anomaly detection for cyber security applications. Dy-
namic Networks and Cyber-Security 1:137.
[Schuster and Paliwal 1997] Schuster, M., and Paliwal, K. K.
1997. Bidirectional recurrent neural networks. IEEE Trans-
actions on Signal Processing 45(11):2673–2681.
[Shyu et al. 2003] Shyu, M.-L.; Chen, S.-C.; Sarinnapakorn,
K.; and Chang, L. 2003. A novel anomaly detection scheme
based on principal component classiﬁer. In Proc. ICDM.
[Sommer and Paxson 2010] Sommer, R., and Paxson, V.
2010. Outside the closed world: On using machine learn-
ing for network intrusion detection. In Proc. Symposium on
Security and Privacy.
[Tuor et al. 2017] Tuor, A.; Kaplan, S.; Hutchinson, B.;
Nichols, N.; and Robinson, S. 2017. Deep learning for un-
supervised insider threat detection in structured cybersecu-
rity data streams. In Artiﬁcial Intelligence for Cybersecurity
Workshop at AAAI.
[Turcotte et al. 2016] Turcotte, M.; Moore, J.; Heard, N.; and
McPhall, A. 2016. Poisson factorization for peer-based
In Intelligence and Security Informat-
anomaly detection.
ics (ISI), 2016 IEEE Conference on, 208–210. IEEE.

[Turcotte, Heard, and Kent 2016] Turcotte, M. J.; Heard,
N. A.; and Kent, A. D. 2016. Modelling user behavior in
a network using computer event logs. Dynamic Networks
and Cyber-Security 1:67.
[Veeramachaneni et al. 2016] Veeramachaneni, K.; Arnaldo,
I.; Korrapati, V.; Bassias, C.; and Li, K. 2016. AI 2: Training
a big data machine to defend. In Proc. HPSC and IDS.
[Zuech, Khoshgoftaar, and Wald 2015] Zuech, R.; Khosh-
goftaar, T. M.; and Wald, R. 2015.
Intrusion detection
and big heterogeneous data: a survey. Journal of Big Data
2(1):3.

