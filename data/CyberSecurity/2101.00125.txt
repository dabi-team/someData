2
2
0
2

y
a
M
1

]
E
S
.
s
c
[

2
v
5
2
1
0
0
.
1
0
1
2
:
v
i
X
r
a

Self-Adaptive Systems: A Systematic Literature Review
Across Categories and Domains

Terence Wonga, Markus Wagnera, Christoph Treudeb

aSchool of Computer Science, The University of Adelaide, Australia
bSchool of Computing and Information Systems, The University of Melbourne, Australia

Abstract

Context: Championed by IBM’s vision of autonomic computing paper
in 2003, the autonomic computing research ﬁeld has seen increased research
activity over the last 20 years. Several conferences (SEAMS, SASO, ICAC)
and workshops (SISSY) have been established and have contributed to the
autonomic computing knowledge base in search of a new kind of system
– a self-adaptive system (SAS). These systems are characterized by being
context-aware and can act on that awareness. The actions carried out could
be on the system or on the context (or environment). The underlying goal
of a SAS is the sustained achievement of its goals despite changes in its
environment.

Objective: Despite a number of literature reviews on speciﬁc aspects
of SASs ranging from their requirements to quality attributes, we lack a
systematic understanding of the current state of the art.

Method: This paper contributes a systematic literature review into self-
adaptive systems using the dblp computer science bibliography as a database.
We ﬁltered the records systematically in successive steps to arrive at 293
relevant papers. Each paper was critically analyzed and categorized into an
attribute matrix. This matrix consisted of ﬁve categories, with each category
having multiple attributes. The attributes of each paper, along with the
summary of its contents formed the basis of the literature review that spanned
30 years (1990-2020).

Results: We characterize the maturation process of the research area from
theoretical papers over practical implementations to more holistic and generic

Email address: terence.wong@adelaide.edu.au,

markus.wagner@adelaide.edu.au, christoph.treude@unimelb.edu.au ()

Preprint submitted to Information and Software Technology

May 3, 2022

 
 
 
 
 
 
approaches, frameworks, and exemplars, applied to areas such as networking,
web services, and robotics, with much of the recent work focusing on IoT and
IaaS.

Conclusion: While there is an ebb and ﬂow of application domains,
domains like bio-inspired approaches, security, and cyber physical systems
showed promise to grow heading into the 2020s.

Keywords: Self-Adaptive Systems, Literature Review

1. Introduction

Information systems and the devices that contain them are growing more
complex and more pervasive in society. This is due to the increased quantity
of and increased demands on these systems. In the past, these systems op-
erated standalone in isolation from other devices with a narrowly prescribed
function (e.g., early mobile phones or PCs). In the current age, these systems
have become more distributed (e.g., cloud servers, sensor networks) and more
complex (e.g., current mobile phones or PCs). Users expect these systems to
be always connected and highly integrated with minimal downtime.

As the nature of information systems has rapidly evolved, the original in-
isolation requirements of these systems are outdated. It is no longer beneﬁcial
to specify a system’s behavior at design time because there are overwhelm-
ingly more potential system states than can be designed for. This is due
to the increased functionality and connectedness of modern information sys-
tems. Hence, it is desirable for a system to be able to adapt its behavior
at run time to changes in its context (or environment) to ensure the contin-
ual achievement of its goals. Such a system is called a self-adaptive system
(SAS) [1, 2].

In the grand challenge presented by IBM [2], SASs were to provide
self-management properties such as self-conﬁguration, self-optimization, self-
healing, and self-protection. This challenge led to the establishment of the
International Conference on Autonomic Computing (ICAC) as well as es-
tablishing foundational theory on SASs [3]. Self-adaptive approaches range
from static, reactive, parametric solutions to dynamic, proactive, structural
solutions. The former approaches are based in predetermined plans and
conﬁgurations while the latter approaches commonly leverage the power of
AI/ML [4].

2

While systematic reviews have been conducted to characterize the state of
the art of speciﬁc aspects of self-adaptive systems such as requirements [5, 6],
claims and evidence [7], quality attributes [8], and machine learning in the
context of SAS [9], there is a lack of systematic work spanning and pro-
viding an overview of all aspects of self-adaptive systems. In this work, we
contribute a systematic literature review into self-adaptive systems which
categorizes papers into ﬁve categories (Technological, Methodology, Perspec-
tive, Analytical, Empirical) and summarizes trends and developments across
time, categories, and related attributes.

Our review characterizes the development of a research area over 30 years,
from theoretical and model based papers in the 1990s and practical imple-
mentations and frameworks in the early 2000s to the ramping up period fea-
turing more holistic and generic approaches, which were forthwith extended
to frameworks and exemplars. While web services were prevalent in the ﬁeld
as application domain for much of the foundational years, Internet of Things
(IoT) and Infrastructure as a Service (IaaS) have dominated self-adaptive
systems in the last ﬁve years.

To the best of our knowledge, this is the ﬁrst systematic literature review
on self-adaptive systems produced after the ramping up of the research ﬁeld
that is not limited to a speciﬁc aspect of the ﬁeld, such as the aforementioned
reviews. Our main contribution is the cataloging of research on self-adaptive
systems and the organization of this catalog according to paper categories,
application domains, and additional attributes speciﬁc to each paper cate-
gory. This catalog serves multiple purposes: (i) summarizing the state of
the art for practitioners by providing a multi-faceted overview of previous
and current work, (ii) identifying current trends and gaps for researchers
by organizing content over time and exposing common and uncommon at-
tribute combinations, and (iii) highlighting areas with high potential impact
to guide educators in assessing which skills will be particularly relevant for
future decision makers.

We ﬁnd that the current state of the art in self-adaptive systems is fo-
cused on developing methodologies and technology in the area of cloud-based
services, such as IoT and IaaS. Even though research on self-adaptive systems
tends to be diverse, empirical and analytical research is currently playing a
smaller role, as are other application domains. Perhaps encouragingly, many
approaches are evaluated using real-world case studies, with less reliance on
simulations. The importance of self-adaptive systems is rapidly growing in
areas such as bio-inspired approaches, security, and cyber physical systems.

3

Going forward, we expect to see a shift towards empirical studies as the
research ﬁeld continues to mature, with industrial case studies in a diverse
range of application domains.

The remainder of this paper is structured as follows: Section 2 presents
background and highlights ﬁndings from related reviews. Section 3 presents
our methodology before we provide a chronological overview of research on
self-adaptive systems in Section 4. Section 5 discusses the limitations and
threats to validity of this work, before Section 6 concludes this paper.

2. Background and Related Reviews

In this section, we deﬁne key terminology in the area of self-adaptive
systems in the context of existing literature reviews which often focus on
speciﬁc aspects of self-adaptive systems.

Autonomic computing is a self-managing computing model named af-
ter, and patterned on, the human body’s autonomic nervous system. It deals
with the design and the construction of computing systems that possess in-
herent self-managing capabilities [10]. The term gained popularity in the
early 2000s as a result of IBM’s autonomic computing initiative. Seminal
articles by Ganek, Kephart and others [2, 11, 12] describe the fundamen-
tal characteristics of autonomic systems, a framework for how systems will
evolve to become more self-managing, and the key role for open industry
standards needed to support autonomic behavior in heterogeneous system
environments. A ﬁrst consideration of research challenges in the ﬁeld of
autonomic computing was published by Kephart in 2005 [13], with a focus
on autonomic element challenges, autonomic system challenges, and human-
computer challenges. A survey published in 2008 found autonomicity to be
not well deﬁned, leading to diﬀerent systems adhering to diﬀerent degrees of
autonomicity [14].

A self-adaptive system is a closed-loop system with a feedback loop
aiming to adjust itself to changes during its operation [15]. In one of the few
review articles that span the entire ﬁeld of self-adaptive software, Salehie
and Tahvildari present a landscape of research in self-adaptive software by
highlighting relevant disciplines and prominent research projects [15]. Since
the publication of their review in 2009, other review articles have focused on
speciﬁc aspects of self-adaptive systems, ranging from engineering approaches
for self-adaptive systems [16] and requirements modeling and analysis for self-

4

adaptive systems [5, 6] to machine learning in the context of self-adaptive
systems [9] and quality attributes that are frequently addressed [8].

A self-healing system is a system that is capable of performing a recon-
ﬁguration step in order to recover from a permanent fault [17]. In an early
review of work on self-healing systems, Ghosh et al. [18] surveyed research in
this ﬁeld and proposed a strategy of synthesis and classiﬁcation. This was
followed by surveys by Psaier and Dustdar [19] and Schneider et al. [20]. A
special case of self-healing systems are self-protecting systems, deﬁned as
autonomic systems capable of detecting and mitigating security threats at
runtime. Yuan and Malek provided a review of work in this area [21].

Finally, Weyns et al. [7] provided a review on an aspect that is orthogonal
to the types of self-adaptive systems, instead focusing on researchers’ claims
and supporting evidence in this ﬁeld. They recommend researchers to make
their assessment methods, tools and data publicly available and to improve
discussion of limitations [7].

Contrary to these reviews and more in line with the 2009 review by Sale-
hie and Tahvildari [15], we do not limit ourselves to a particular aspect of
self-adaptive systems or a particular aspect of published research in the area,
instead aiming to provide a high-level overview across categories and appli-
cation domains.

3. Methodology

This section outlines the methodology followed in our systematic review,

detailing the steps recommended by Kitchenham et al. [22].

3.1. Research Questions

We used the following research questions to drive our data collection and

analysis:

RQ1 What is the current state of the art in self-adaptive systems?

RQ2 How has the state of the art evolved over time?

RQ3 Which are the application domains of self-adaptive systems over time?

5

dblp data
4,964,345

exclude if title does not contain ‘self-*’ or ‘autonom*’

35,903

exclude if title contains irrelevant phrases such as ‘self-organizing teams’

20,127

exclude after manual scanning of titles

872

exclude if not CORE ranked

298

exclude after reading

270

snowballing

293
ﬁnal set of papers

Figure 1: Methodology Overview

6

3.2. Study Protocol

To select literature to include in our systematic review on self-adaptive
systems, we used the dblp computer science bibliography (dblp) database as
a starting point, eﬀectively eliminating non-computer science literature from
the process. Dblp contains historical snapshots of the database enabling
reproducibility of results. All results in this review were produced using the
snapshot ﬁle dblp-2020-03-02.xml.1

We chose dblp as the starting point of our analysis since it provides a
consistent format for all articles indexed in the database which allowed us to
employ consistent search criteria (such as lower-case vs. upper-case) across
content published by diﬀerent publishers. Dblp’s focus on “major computer
science publications”2 gives us a narrower focus than a more general search
engine and a ﬁnite number of search results that does not vary on a daily
basis, as it would for example on Google Scholar. We acknowledge that using
a diﬀerent database as a starting point would have resulted in a diﬀerent set
of papers, see Section 5 for a discussion of the corresponding trade-oﬀs.

The methodology is broken down into ﬁve main stages which combine au-
tomated and manual processes to keep the required amount of manual work
(i.e., reading abstracts and papers) manageable while ensuring the quality
of the selection process: Pre-ﬁltering, word frequency ﬁltering, venue selec-
tion, abstract reading, and snowballing to reduce a ﬁrst subset of 35,903
publications to 293 publications. Figure 1 shows a high-level overview of the
process.

3.2.1. Pre-Filtering

The dblp data containing 4,964,345 papers was ﬁltered to include only
journal articles and papers published in conference proceedings, with a page
count of over ﬁve to focus our analysis on substantial and fully evaluated
research contributions which appeared in peer-reviewed venues. Capitaliza-
tion was removed to assist with the ﬁltering process. This established the
base dataset. The base dataset was searched with grep for two terms: self-*
and autonom* to produce two separate datasets. These two keywords were
deemed as broadly relevant to the study area. The total number of publica-
tions matching these keywords was 35,903.

1https://dblp.org/xml/release/dblp-2020-03-02.xml.gz
2https://dblp.org/faq/What+is+dblp.html

7

Table 1: Words after self-
Frequency

Word

organizing
adaptive
stabilizing
organization
organized

2,981
1,682
632
564
515

Table 2: Words after autonom*

Word

Frequency

vehicles
mobile
driving
systems
agents

576
554
407
399
399

3.2.2. Word Frequency Filtering

The initial search for publication titles including ‘self-*’ or ‘autonom*’
produced too many papers to manually analyze. However, we noticed that
many papers which matched the search could be easily excluded since their
topics were clearly out of scope, e.g., self-driving cars. To formalize this
process, we further ﬁltered papers based on additional words in the paper
titles. We ﬁrst determined the distribution of words after the keywords self-*
and autonom*. Tables 1 and 2 show the distribution of the ﬁve most frequent
words for self-* and for autonom*.

Because we observed that self-organizing and self-adaptive frequently
co-occurred with terms irrelevant to self-adaptive systems (such as self-
organizing teams), we conducted a second word frequency analysis to identify
common words appearing after self-organizing and self-adaptive. The top re-
sults are shown in Tables 3 and 4.

To ensure the validity of deciding which keywords we deemed to be out of
scope, two of the authors manually and independently analyzed all words oc-
curring after ‘self-’, ‘autonom*’, ‘self-organizing’, and ‘self-adaptive’ at least
20 times to indicate those that were out of scope (such as self-organizing
teams) for exclusion. We calculated inter-rater reliability using Cohen’s κ,

8

Table 3: Words after self-organizing

Word

Frequency

maps
map
neural
feature
networks

706
582
165
109
79

Table 4: Words after self-adaptive

Word

Frequency

systems
diﬀerential
software
and
evolutionary

159
77
76
31
27

see Table 5. The Cohen’s κ value was greater than 0.7 in all cases which was
deemed as acceptable. Disagreements were resolved after conﬁrming any am-
biguities and biases. This step resulted in a list of words to exclude from the
ﬁnal data set. After omitting papers with the excluded phrases in the title,
the number of publications reduced to 20,137.

The titles of the 20,137 publications were manually scanned for relevance,
resulting in 872 articles. The purpose of this step was to eliminate papers that
matched our keyword ﬁlters but were not related to self-adaptive systems.
For example, papers on self-driving cars matched our keyword ﬁlters but are
not related to self-adaptive systems. We again assessed the validity of this
step using Cohen’s κ by having two authors identify relevant papers in a
randomly selected subset of 50 papers. The value calculated was 0.73 which
was deemed acceptable.

9

Table 5: Inter-rater agreement

Dataset

Autonom*
Self-*
Self-organizing *
Self-adaptive *

50 randomly sampled titles

Cohen’s κ

0.828
0.748
1.000
1.000

0.730

3.2.3. Venue Selection

As a quality gate, we only considered papers published in A*/A confer-
ences or journals, as determined by the CORE ranking.3 46% of all journals
and 55% of all conferences listed by CORE are ranked as A*/A. Papers
published in B-ranked venues were included if they came from a journal or
conference that was relevant to the study area (e.g., SEAMS4, SASO, and
TAAS). This step reduced the number of candidate papers to 298. We discuss
the trade-oﬀs associated with this step in Section 5.

3.2.4. Abstract Reading and Attribute Matrix

The abstracts of the 298 candidate papers were then read to categorize
each paper into one of ﬁve categories based oﬀ the paper categorization in-
troduced by the ICSE 2014 conference:5

• Analytical: A paper in which the main contribution relies on new al-

gorithms or mathematical theory.

• Empirical: A paper in which the main contribution is the empirical

study of a software engineering technology or phenomenon.

• Technological: A paper in which the main contribution is of a technical

nature.

3The

CORE

rankings

and
http://portal.core.edu.au/jnl-ranks/ are maintained by the Computing Research
and Education Association of Australasia and are used world-wide.

http://portal.core.edu.au/conf-ranks/

4The CORE rank of SEAMS has changed to A after we conducted this study
5The

at
the
https://2014.icse-conferences.org/research provide one of the most compre-
hensive categorization schemes for software-related papers.

categories

published

papers

ICSE

2014

call

for

in

10

• Methodological: A paper in which the main contribution is a coherent
system of broad principles and practices to interpret or solve a problem.

• Perspectives: A paper in which the main contribution is a novel per-

spective on the ﬁeld as a whole, or part thereof.

Once each paper was categorized, an attribute matrix for each category
was developed. Within each category, the abstract and a pass of the full paper
was read to develop an understanding of the common types of attributes for a
category. This was done in an iterative approach. Once the attribute matrix
was ﬁnalized, all the papers from each category were categorized using the
matrix. This step resulted in 28 papers being discarded as irrelevant. Note
that each category has its own attribute matrix since not all attributes apply
to all categories.

We further identiﬁed the application domain of each paper, if applicable.
If the research has an application focus, the application domain is the busi-
ness/application sector of the work (e.g. IoT, IaaS, Automotive), otherwise it
is the engineering domain (e.g., Web Services, Robotics), or the more general
domain (e.g., Bio-inspired, Software Engineering, Security). The application
domains are shown in the attribute matrices at the end of the paper and the
top 10 most common application domains are summarized in Table 7. Please
refer to Tables 19 through 26 for the complete list of papers that we assigned
to each application domain.

3.2.5. Snowballing

To capture additional papers, snowballing was used on the papers in-
cluded in the attribute matrix. Where possible, each paper was added to
a Scopus list where the references were extracted automatically. This step
captured 90% of the papers in the matrix. Any paper that was referenced
more than ﬁve times was eligible to be considered. These papers were then
ﬁltered through the same criteria as the original papers from the dblp step
(i.e., abstracts, CORE rankings). From this step, 23 new papers were added.
These papers were categorized into the ﬁve categories following the same
approach as before. The ﬁnal counts for each category are shown in Table 6
and are considered in the ratios reported in the previous section. Please refer
to Tables 19 through 26 for the complete list of papers that we assigned to
each category.

11

Table 6: Papers per category
Category

Count

Technological
Methodology
Perspective
Analytical
Empirical

Total

105
79
51
35
23

293

Table 7: Papers per application domain

Application Domain

Count

Web Services
IoT
Review
Robotics
Networking
IaaS
Intelligence Surveillance Reconnaissance
Software Engineering
Automotive
Mobile Systems
Service-Oriented Systems

48
36
25
23
19
17
13
12
10
10
10

4. Self-adaptive systems over the years

In the following, we provide a chronological overview of research on self-
adaptive systems based on our systematic literature review. The complete
matrices with the characterizations of all papers are shown at the end of the
paper and summarized here:

100-81

81%

• Technological: 81% (
100-81%) of papers in this category follow a closed circle
81
approach as opposed to human in the loop, and implementations cover
22
23
24
23%
tools (24%
100-22%), languages, ar-
100-23%), frameworks (22%
100-24%), models (23%
40
100-23
100-24
40%
100-40%) of the papers rely on simulations.
chitectures, and algorithms. 40% (
100-87%), compared to a
The vast majority of contributions are novel (87%
87

100-22
100-87

100-40

22%

87%

24%

12

25

20

15

10

5

0

Publications

0

9

9

1

5

9

9

1

0

0

0

2

5

0

0

2

0

1

0

2

5

1

0

2

0

2

0

2

Figure 2: Number of publications over time

100

80

60

40

20

0

2

a

–

0

9

9

Y e

a l

e

T h

1

n

(

s
t i o

e

a

g

a

t

d

n

S

u

I

n i t i a l
F

o

)

2

0

2

(

3

0

0

0

s

r

R a m p i n
l a

t

s

e

c

d
T h

e

Analytical
Technological
Perspective
Methodology
Empirical

)

0

2

0

2

)

5

0

2

(

–

6

1

–

1

0
2
H a lf

1

1

d

0

n

2

o

)

c

(

0

e

1

0
2
H a lf
S
–

–

6

t

d

e

0

s

a

)

0

2
F i r
c

e

(

5

d

0

p

–

t

0

2

u

s

e

–

g

d

a

l a

Figure 3: Categories over time

13

100

80

60

40

20

0

2

a

–

0

9

9

Y e

a l

e

T h

1

n

(

s
t i o

e

a

g

a

t

d

n

S

u

I

n i t i a l
F

o

)

2

0

2

(

3

0

0

0

s

r

R a m p i n
l a

t

s

e

c

d
T h

e

Other

IoT

Robotics

IaaS

Web Services

Review

Networking

ISR

Software Engineering

Automotive

Mobile Systems

Service-Oriented Systems

)

0

2

0

2

–

6

1

)

5

0

2

(

–

1

0
2
H a lf

)

c

(

0

e

1

0
2
H a lf
S
–

–

6

t

d

e

0

s

a

1

1

d

0

n

2

o

)

0

2
F i r
c

e

(

5

d

0

p

–

t

0

2

u

s

e

–

g

d

a

l a

Figure 4: Applications domains over time

14

Table 8: Summary of attribute matrices. Note that totals can diﬀer from 1.0 when at-
tribute values are unknown or when articles attain multiple values.

Algorithm
0.46

Architecture Framework
0.03

0.14

Mathemat.
0.26

Language
0.06

Deﬁnition
0.09

General arch. New Framew. Analysis Techn. New Pattern Formal Crit. New Appr.
0.04

0.15

0.03

0.70

0.08

0.01

Type
Analytical

Type
Methodology

Type
Perspective

Type
Technological

Survey
0.20

Human
0.18

Formalization Yes
Analytical
0.94

Implementation Tool
Technological
0.24

Goals
Technological

Goals
0.55

Review
0.31

Evaluation
0.04

Reﬂection
0.35

Roadmap
0.02

Comparison
0.08

Closed circle
0.81

No
0.03

Model
0.23

Utility
0.25

Framework
0.22

Language
0.14

Architecture Algorithm
0.10

0.07

Content
Perspective

Taxonomy
0.14

Challenges
0.33

Future Work
0.71

Requirements
0.16

Testing
Empirical

Strategy
Empirical

Design-time Run-time
0.00

0.74

Monitoring Adaptation
0.83

0.87

Adaptation
Empirical

Parameter
0.87

Component
0.09

Contribution
Analytical
Technological
Methodology

Application
Analytical
Technological
Methodology
Empirical

Evaluation
Analytical
Technological
Perspective
Methodology
Empirical

Extension
0.31
0.12
0.09

Case study
0.57
0.60
0.78
0.61

Novel
0.69
0.87
0.90

Simulated
0.40
0.40
0.20
0.35

Preliminary Case Study
0.09
0.01
0.00
0.00
0.00

0.29
0.35
0.29
0.38
0.39

Industrial
0.00
0.00
0.00
0.00
0.04

Comparison Human
0.17
0.15
0.31
0.16
0.13

0.00
0.00
0.00
0.00
0.00

Quant.
0.37
0.44
0.16
0.41
0.57

15

few extensions of previous work. The methods for evaluation range
35
44
35%
100-44%) and case studies (35%
100-35%) to
from quantitative approaches (44%
15
15%
comparisons (15%
100-15%).

100-44

44%

100-35

100-15

15%

100-70
• Methodology: The majority of papers in this category (70%
100-70%) intro-
70%
70
duce new approaches for self-adaptive systems, followed by frameworks
8
4
15
4%
8%
(15%
100-4%). The
100-15%), analysis techniques (8%
100-8%), and architectures (4%
20
100-15
100-4
ratio of simulations (20%
100-20%) is lower than in the Technological category,
100-90
100-20
100-90%) here
and the vast amount of papers provide new contributions (90%
90%
90
as well. Evaluation follows a similar pattern to the Technological cat-
41
41%
100-41%) being the most common,
egory, with quantitative evaluations (41%
16
38
16%
100-38%) and comparisons (16%
100-16%).
followed by case studies (38%

100-41

100-8

38%

20%

100-38

100-16

35%

• Perspective: Many of the papers in this category can be classiﬁed as re-
20
31
35
31%
100-35%), reviews (31%
100-31%), and surveys (20%
ﬂections (35%
100-20%), with papers
33
100-71
100-31
100-20
100-71%), challenges (33%
100-33%), and requirements
outlining future work (71%
71%
14
16
100-33
71
14%
100-14%). Evaluation methods, if
(16%
100-16%), or providing a taxonomy (14%
31
100-16
31%
100-31%)
applicable, in this category are mostly focused on comparisons (31%
29
29%
and case studies (29%
100-29%).

100-14

100-35

33%

16%

20%

100-29

46
• Analytical: Many papers in this category focus on algorithms (46%
46%
100-46%),
26
100-26%) and frameworks
followed by mathematical contributions (26%
14
14%
100-14%). Like other categories, the number of case studies vs. sim-
(14%
ulations follows roughly a 60/40 split. A substantial number of papers
100-94
31
100-94%) papers
are extensions of previous work (31%
100-31%), and almost all (94%
94%
94
provide a formalization. In terms of evaluation methods, the largest
29
37
100-37%), followed by case studies (29%
group are quantitative (37%
100-29%) and
17
17%
comparisons (17%
100-17%).

100-31

100-37

100-14

100-26

100-29

26%

31%

37%

29%

100-31

100-46

100-17

100-74

100-87

• Empirical: Most of the empirical papers focus on run-time (74%
100-74%)
74%
100-83
74
100-83%) and/or
instead of design-time, with an explicit monitoring (83%
100-87%) strategy. Studies again follow the 60/40 split be-
83
adaptation (87%
87
tween case studies and simulations. The adaptation techniques focus on
9
9%
100-87%) rather than components (9%
100-9%), and evaluation
parameters (87%
39
87
39%
100-57%) or done through case studies (39%
100-39%).
is mostly quantitative (57%
57

100-87

100-57

100-9

57%

87%

87%

83%

100-39

Our analysis revealed the following ﬁve time periods, mostly deﬁned by
the number of papers published on the topic and their primary research focus:

• 1990-2002 - Initial Stages, Section 4.1

16

• 2003-2005 - Foundational Years, Section 4.2

• 2006-2010 - Ramping up, Section 4.3

• 2011-2015 - The last decade - First Half, Section 4.4

• 2016-2020 - The last decade - Second Half, Section 4.5

As an orthogonal perspective, the tables at the end of this paper group all
293 papers by category and list their attributes. Table 8 provides a high-level
summary by showing the distribution of attribute values in each category.

We brieﬂy describe the attributes and their values in the following, before
characterizing the ﬁeld in each time period. Note that attributes and their
values emerged from our analysis of the papers:

• Type: The type of contribution of a paper depends on the paper cat-
egory. Many of the analytical papers introduce a new algorithm or
provide a formal mathematical contribution. Other contribution types
of analytical papers include frameworks, deﬁnitions, languages, and
architectures for self-adaptive systems. The majority of methodology
papers introduce a new approach for self-adaptive systems, with other
contributions including new frameworks and architectures, new anal-
ysis techniques, new patterns, and formal criteria, e.g., for diagnosing
components in self-adaptive systems. Perspective papers typically con-
tribute reﬂections, reviews, or surveys, with a smaller number of pa-
pers focusing on evaluating speciﬁc frameworks, presenting roadmaps,
or comparing approaches to a particular problem. Lastly, the types
of contributions of technological papers can be divided into human-in-
the-loop and closed-circle approaches, depending on the level of human
intervention in the self-adaptive system.

• Formalization: The vast majority of analytical papers provides a for-
malization of their contribution, e.g., using mathematical deﬁnitions
and formulas.

• Implementation: Technological papers provide an implementation of
something, ranging from tools, models, and frameworks, to languages,
architectures, and algorithms.

17

• Goals: Technological papers can further be distinguished based on
whether they focus on the goals of a self-adaptive system and/or as-
sociated utility functions. A self-adaptive system should respect the
utility while trying to achieve its goal.

• Content: The content of the majority of perspective papers is a thor-
ough discussion of future work, with others listing challenges or require-
ments, or providing a taxonomy.

• Testing: While testing can generally be divided into design-time testing
and run-time testing depending on whether a system is running during
testing, our review only revealed empirical papers focused on run-time
testing.

• Strategy: Most empirical papers employ an adaptation strategy which
deﬁnes possible actions and their implementation as well as a monitor-
ing strategy which deﬁnes how to extract information from the system.

• Adaptation: The majority of empirical papers employ parameter adap-
tation, i.e., ﬁne tuning of applications through the modiﬁcation of ap-
plication variables and deployment parameters, rather than component
adaptation, i.e., the replacement, addition, or removal of components.

• Contribution: Most papers exclusively present original work, while a
minority are extensions of other published work, e.g., journal extensions
of conference papers.

• Application: The majority of approaches introduced across all paper
categories (except perspective) are evaluated using real-world case stud-
ies, with less reliance on simulations.

• Evaluation: Across all paper categories, the methods for evaluation of
research on self-adaptive systems are dominated by quantitative ap-
proaches, case studies, and comparisons. We use the attribute value
‘quantitative’ in cases of statistical tests based on simulations, often
in absence of a baseline. We use the attribute value ‘case study’ to
refer to in-depth studies of one or a small number of systems. We use
the attribute value ‘comparison’ to indicate work that was primarily
evaluated by comparing to a baseline, e.g., from previous work. Other

18

Table 9: Categories during initial stages (1990–2002)

Category

Count

Technological
Analytical

Total

4
2

6

evaluation methods include real-world (‘industrial’) and user studies
(‘human’), or those explicitly labeled by the authors as ‘preliminary’.

In addition, Figures 2, 3, and 4 visualize the trends of number of papers

over time, categories over time, and application domains over time.

4.1. 1990-2002 - Initial Stages

According to our literature review, the earliest reference to self-adaptive
systems was in 1990. The period of 1990-2003 was the phase before ‘The
Vision of Autonomic Computing’ [2], was published. This was where the
ﬁeld was in its beginning stages.

References in this phase contained theoretical and model based papers
such as a model for dynamic change management [23], self-stabilizing real-
time rule based systems [24], and convergence for self-stabilizing systems [25].
These papers were focused on presenting a theoretical model or proving a
proposed theorem to advance self-adaptive systems theory.

By 1998, practical implementations were seen such as architecture based
run-time software evolution [1], self-supervised category detection [26], and
self-adaptive control software [27]. The papers were among the ﬁrst to discuss
terms like evolution, self-supervision, control theory, and run-time design in
the context of self-adaptive systems. Thirty years later, these terms are
commonplace and part of the general understanding of the ﬁeld.

Tables 9 and 10 characterize this time period in terms of the prevalent

paper categories and application domains.

4.2. 2003-2005 - Foundational Years

In the subsequent years after 2002, two seminal works were produced that
formed the foundations of self-adaptive systems. In 2003, The Vision of Auto-
nomic Computing [2] was published which kick-started the ﬁeld of Autonomic
Computing. The paper presented a grand challenge of self-conﬁguration,

19

Table 10: Application domains during initial stages (1990–2002)

Application Domain Count

Networking
Software Engineering
IoT
Speech Recognition
Robotics

2
1
1
1
1

self-optimization, self-healing, and self-protection in computing systems. It
foretasted the rising need for these systems in the modern age. Shortly af-
ter this, an implementation of these concepts was developed, known as the
RAINBOW framework [28]. This framework was architecture based and ex-
tensible, meaning existing architectures could be imbued with self-adaptive
properties. To this day, the RAINBOW framework is used as a standard,
test bed, extensible tool in self-adaptive systems research.

Many papers were published during this time period that were in the
perspective category (42%). As the excitement of a new ﬁeld grew, many
researchers sought to publish their thoughts and ideas as to how the ﬁeld
should and could develop. During this period, there were fewer practical
demonstrations and implementations compared to future time periods as the
ﬁeld had to have time to grow and mature.

This application domain distribution of this period was skewed towards
review papers. Of the eight review papers, four were on autonomic comput-
ing [2, 13, 11, 12] and four were on self-* properties [29, 30, 31, 32]. The
key messages of these papers were that a new challenge was emerging in
the ﬁeld of autonomic computing and self-* computing. Due to the rise in
system complexity, it was necessary to develop a new kind of system that
was self-adaptive. These papers also envisioned what such realized systems
might look like.

The most immediate application domain for self-adaptive systems was
web services. At the time, technologies such as IaaS and IoT had not fully
emerged yet. Web services were a prominent tool used in software engineer-
ing.

The improvement of the system administrator role was a focus area of re-
search by improving collaboration and coordination, rehearsal and planning,
maintaining situation awareness, and managing multitasking, interruptions,

20

Table 11: Categories during foundational years (2003–2005)

Category

Count

Perspective
Technological
Methodology
Analytical
Empirical

Total

14
8
5
3
3

33

and diversions [33]. Utility functions emerged as a potential metric to solve
self-adaptive problems [34]. In later years, this would prove to be true. The
automatic management of web services was an important test bed to develop
self-adaptive algorithms and theory [35, 36, 37].

There was a major parallel between autonomic computing, self-* com-
puting, and biological systems, and a branch of research was formed to gain
inspiration from nature to bring to these systems [38, 39, 40]. As a pre-
cursor to the cloud based systems of the present day, load balancing was
an area of research focus. Work forecasting [41], scheduling algorithms [42],
and managing system level properties [43] were all part of the groundwork of
this research area, as was the placement of replicants in an edge computing
scenario [44].

IoT and IaaS papers were present during this time. Concepts like au-
tonomous deployment [45], generic control frameworks [46], and self-healing
distributed architectures [47] were explored, as was the concept of self-aware
systems [48] in general. These two ﬁelds would emerge as strong research
ﬁelds in later years.

Other research areas include Robotics [49], Automotive [50], Com-
puter [51], Software Stack [52], Networking [53, 54], Software Engineer-
ing [55], and Intelligence Surveillance Reconnaissance [56].

Tables 11 and 12 characterize this time period in terms of the prevalent
paper categories and application domains, conﬁrming the large number of
perspective papers.

4.3. 2006-2010 - Ramping up

The distribution of the years 2006-2010 showed a more even spread across
the categories. Technological, Perspective, and Methodology papers were

21

Table 12: Application domains during foundational years (2003–2005)

Application Domain Count

Review
Web Services
Load Balancing
Bio-inspired
IoT
Networking
Software Engineering

8
6
3
3
3
2
2

evenly spread. There was still a high demand for perspective type papers but
enough time had passed since 2003 for technology and methodology papers
to emerge.

Web services was still the highest polling application domain but in this
period IoT papers surfaced as the second most frequent domain. Web ser-
vices in this phase focused on the principles and ideas of autonomic and
self-adaptive systems developed in the previous phase. These manifested ini-
tially in new languages [57], utility functions [57], and distributed solutions
as opposed to centralized solutions [58]. There was a clear focus on run time
instead of design time solutions [59, 60] as well as making systems dynamic
in their conﬁguration and adaptation [61, 62, 63]. Self-healing was an impor-
tant part of web services research during this time, highlighting the use in
workarounds [64] and composition cycles [65]. The RAINBOW framework
was evaluated on a signature case study: Znn.com to assess the eﬀectiveness
of self-adaptation with good results [66]. In the latter half of this period,
the focus of web services grew to become more holistic with concepts such as
architectural self-reconﬁguration and self-tuning [67, 68], behavioral adap-
tations [69], expansion into more self-* properties [70], and adaption logic
based approaches [71]. The emphasis was on adaptation of the entire system
as opposed to individual components.

IoT papers were initially focused on solvers [72, 73] with a key driver
being dynamic behavior [74, 75]. Fault tolerance [74] and multi-agent mod-
els [72] were important themes to establish in IoT due to their distributed and
always-on nature. A tool called RELAX was developed to handle require-
ments and uncertainty in a smart home self-adaptive system domain [76].
Requirements and uncertainty are important in any self-adaptive system,

22

not just IoT systems [77]. The requirements of the system determine the
goals of the adaptations. Appropriately managing uncertainty gives a sys-
tem ﬂexibility and dynamism. As with web services, a holistic approach
to self-adaptation using architectural self-reconﬁguration was a part of the
research [78]. Adaption logic in IoT was addressed using heuristics in avail-
ability and response time [79] and in a tool called FUSION [80]. The research
eﬀorts of IoT compared with web services in this phase share a parallel. Ini-
tially, solvers and languages were created and tested, then various research
concepts were explored like distributed solutions for web services or fault
tolerance for IoT. Then, a shift in focus to more holistic approaches to self-
adaptability were emphasized such as architectural self-reconﬁguration, or
the adaptation logic.

This phase was the ﬁrst time robotics was seen as an application domain
with seven papers. Robotics represented a high potential area for the appli-
cation of self-adaptive systems. By their nature, robots are intended to au-
tomatically do the tasks of humans and so self-adaptive robots are a natural
progression of the goals. Requirements and modelling [81, 82] were the early
emphasis with a progression to adaptable software architectures [82, 83] and
self-organized and distributed systems [84]. A reference model to compare
adaptation approaches was developed [85]. This started to become neces-
sary as the popularity of the ﬁeld gave rise to multiple diﬀerent adaptation
techniques. Learning and planning was a component of the research of this
phase [86, 87]. Using reinforcement learning, planning and architecture self-
management was explored [86]. The learning research theme was in its early
stages in this phase. In future years, learning would prove to be key to widely
used tools like machine and deep learning.

This phase also gave rise to nine review papers. Compared to the previ-
ous phase, review papers made up a smaller proportion of the total papers
in the group. The reviews were conducted on self-organization [88, 89], auto-
nomic computing [90, 14, 91], self-healing [18], and self-adaptation [15, 92],
as well as a general overview of self-* properties [93]. The common theme
of this work was to highlight the current work and future needs of the ﬁeld.
One remark conﬁrms the trend highlighted above of needing a more holistic
approach to self-adaptation: ”but what is missing is an holistic approach fo-
cusing explicitly on providing autonomic properties” [91]. Written in 2009, it
perhaps explains the trend toward holistic solutions to self-adaptive systems
in the literature.

23

Table 13: Categories during ramping up stage (2006–2010)

Category

Count

Methodology
Technological
Perspective
Analytical
Empirical

Total

23
20
18
8
6

75

This phase showed a variety of other application domains. Decentralized
solutions were popular in automated traﬃc control [94], e-Commerce [95],
water networks [96], service oriented systems [97], and load balancing so-
lutions [98]. Learning was a prominent theme for automotive [99], traﬃc
management control [100], and e-Commerce [101]. The ability for a sys-
tem to adapt its adaptation logic was a strong area of focus for mobile
systems[102], ISR [103], e-Commerce [104], software engineering applica-
tions [105, 106], and systems on chip [107]. Evaluation [108, 109], self-
organization [110, 111, 112], self-protection [113], self-healing [114], resource
allocation [115], reﬂection [116], as well as dynamic solutions [117] were all
explored during this time. Consistent with the theme of holistic solutions,
generic architectures were developed in speech recognition tools [118] as well
as generic frameworks such as SASSY [119]. Other application domains not
listed include UML [120], Holonic Systems [121], Video Encoding [122], task
scheduling [123], and Physics [124].

Tables 13 and 14 characterize this time period in terms of the prevalent
paper categories and application domains, underlining that papers in the
‘Methodology’ category and about Web Services were becoming increasingly
dominant.

4.4. 2011-2015 - The last decade - First Half

The ﬁrst half of the 2010s showed a bimodal result, with technological and
methodology papers being the most frequent. The proportion of perspective
papers decreased, perhaps attributed to the saturation of them in previous
time periods.

Web services still dominated the domain distribution, followed by robotics
and networking. IoT still had a high ranking with seven papers. This was

24

Table 14: Application domains during ramping up stage (2006–2010)

Application Domain

Count

Web Services
IoT
Review
Robotics
E-Commerce
Service Oriented Systems
Automated Traﬃc Control
Automotive
Intelligence Surveillance Reconnaissance
Mobile Systems
Computer
Software Engineering

14
9
8
7
3
3
3
3
2
2
2
2

the ﬁrst time period where IaaS made it in to the top domains. This is in
line with the timeline of cloud based services as they rose to prominence.

Web services papers in this time period displayed a slightly diﬀerent ﬂa-
vor to the previous time periods. Forms of validation were more popular
in this phase. Performance [125] and integration [126] testing, probabilistic
model checking [127, 128, 129], quality assurance [130], and evaluation [131]
indicate that more emphasis was now being put on verifying the outcomes
It was not enough to claim that a system was
of self-adaptive solutions.
self-adaptive, but the claims had to be backed up and tested. Frameworks
formed part of the contributions to the research. With the push towards
more holistic self-adaptive solutions, this was a natural progression. Multi-
model [132], dynamic allocation [133], monitoring [134], and behavioral [135]
frameworks highlight the variety of holistic generic approaches being ex-
plored. The RAINBOW framework still held inﬂuence during this period,
with a framework called REFRACT extending RAINBOW to target fault
avoidance [136]. Planning was a key component of this phase – automatic
reconﬁguration plans [137], adapting manager optimization [138], and plan
generation techniques [139] all highlight the continued importance of fore-
casting in self-adaptive systems. Distributed techniques [140], fault local-
ization [141], and architecture based self-adaptation [142] all were continued
self-adaptive themes from the previous phase.

25

Robotics papers also shared an emphasis on building generic frameworks
for self-adaptation. Architectural compilers [143], reference models [144], and
testing frameworks [145] highlight some of the work done here. There was a
continued focus on dynamic [146] and run-time [147] applications as well as
veriﬁcation of systems [148]. The modelling of uncertainty became a strong
focus during this phase. As decisions in the system are pushed from design
time to run time, the amount of possible outcomes for the system dramati-
cally increases. The behavior of the system also becomes non-deterministic.
Veriﬁcation [149], consequence modelling [150], and latency modelling [128]
all attest to this eﬀort. A strong research theme of the robotics domain in
self-adaptive systems is goal modelling. The goals of a robot and associated
utility functions are highly important to successful behavior. Dealing with
fuzzy goals [151], interactions [150], and learning [152] all contributed to this
focus.

Networking was a domain that was well represented during this time
period. With the explosion of the Internet and always-on devices, net-
working was a ripe domain to apply self-adaptive principles to. Consistent
with the theme of frameworks during this time period, mathematical [153],
scheduling [154], sensor modelling [155], and testing [156] frameworks were
created. There was a similar emphasis on validation [157] and fault tol-
erance [158]. The RAINBOW framework was again used as an exemplar
during this phase. It was applied to manage and monitor highly populated
networks of devices [159]. Consistent with the themes from previous phases,
self-organization [160] and self-reconﬁguration [161, 162] were popular re-
search areas in networking.

The IoT domain shares a high overlap with the networking domain as IoT
solutions are essentially localized networks. The trends of the IoT research
in this phase is consistent with the themes of generic frameworks [163, 164,
165, 166, 167] and validation [168, 169].

The IaaS domain entered the top domains in this phase. In the second
half of the decade its popularity would explode. During this time, IaaS pa-
pers focused on regression testing [170], control theory [171], decision mak-
ing [172, 173], transaction management [174], and on benchmarking and
elasticity [175]. These themes would later on be developed and expanded.

There were only six reviews in this time period, the lowest proportion of
any time period so far. This could be due to the reduced need because of the
ongoing work. Reviews in this period focused on self-healing [19, 20], self-

26

Table 15: Categories during ﬁrst half of the last decade (2011–2015)

Category

Count

Technological
Methodology
Empirical
Analytical
Perspective

Total

37
29
9
8
8

91

adaptation [7, 16], self-protection [21], and on control engineering approaches
to self-adaptive system design [176].

Frameworks in ISR [177, 178], service oriented systems [179, 180, 181],
software engineering [182, 183], and mobile systems [184, 185] highlight the
trend of the theme in developing holistic solutions to self-adaptive systems.
Continued trends are requirements [186, 187], dynamic solutions [188], multi-
agent systems [189, 190], and utility [191] as well as reliability [192], with
more abstract ideas like systems evaluation [193], uncertainty handling [194,
195], and feedback loops [196, 197] now getting covered.

Bio-inspired approaches were again present in this phase. These ap-
proaches have the understanding that self-adaptive systems are much like
biological systems and that there is much inspiration to draw from nature.
Papers discuss chemically inspired architectures for reusable models [198], as
well as cloud based applications inspired by biological principles [199] and
multi-objective control for self-adaptive software design [200]. These biologi-
cal inspired approaches are a potential growth area for self-adaptive systems.
listed include e-Commerce [201],
UML [202], automotive [203], water networks [204], automated traﬃc man-
agement [205], fault recovery [206], video encoding [207], application contain-
ers [208], and human participation [209].

Other domain applications not

Tables 15 and 16 characterize this time period in terms of the prevalent
paper categories and application domains, showing a large number of papers
in the categories ‘Technological’ and ‘Methodology’, again dominated by the
application area of Web Services.

27

Table 16: Application domains during ﬁrst half of the last decade (2011–2015)

Application Domain

Count

Web Services
Robotics
Networking
IoT
Intelligence Surveillance Reconnaissance
Service Oriented Systems
Software Engineering
Review
IaaS
Mobile Systems
Bio-inspired
Control Engineering

19
11
10
7
6
5
5
5
4
4
2
2

4.5. 2016-2020 - The last decade - Second Half

The second half of the 2010s displayed a similar distribution to the ﬁrst
half, with technological and methodology papers being most frequent, fol-
lowed by analytical, perspective, and empirical. This is not surprising as the
developments of the ﬁeld were at a comparable maturation stage.

The distribution of the domains during this period shows an interesting
trend. Web services are no longer the most frequent domain, rather IoT and
IaaS are the most frequent domains. There is a distinct trend of these cloud
based technologies from obscurity (1990-2003) to niche (2003-2010) to growth
(2011-2015) to now in the 2020s where cloud based services are mainstream.
This trend is reﬂected in the rise of IoT and IaaS in the domain distribution
of the papers.

IoT has become a popular application domain in the last ﬁve years of the
2010s. The number of devices with access to the Internet has increased
exponentially in quantity but also variety. Devices are not just limited
to phones and computers but extend to watches, cars, buildings, sensors,
and more. The research in this phase gave rise to a number of exemplars
in IoT. Exemplars can be generic such as artifacts or address speciﬁc self-
adaptive problems. They are used as a demonstration of a working solution
in the problem space. This was the period of time where exemplars began
to be widely seen and used. DeltaIoT [210], an evaluation exemplar and

28

DingNet [211], a simulation exemplar highlight the work done. Carrying on
from the work done in the previous time periods, frameworks and generic ar-
chitectures were seen in HAFLoop [212], decentralized approaches [213, 214],
and modelling frameworks [215]. Behavioral modelling of IoT behavior was
a continued trend [216, 217, 218, 219]. Speciﬁcally, emergent behaviors were
explored [220]. Emergent behavior is an important concept in self-adaptive
systems. These behaviors are the byproduct of allowing decisions to be made
at run time. When this occurs, the system may display new behavior not
previously conceived or seen before. The appropriate handling of these be-
haviors is important to a large scale self-adaptive system like IoT. Common
research focuses like new languages [221], evaluation and testing [222, 223],
modelling [224], learning [225, 226, 227], recovery [228], uncertainty [229], and
integration [230] were seen in this phase. A general review of self-improving
system integration can be found in [231] and industrial experience reports
in [232, 233].

IaaS became more of a focus during this period. As it went further into
the decade, cloud based solutions became more and more common in business
and hence in research. It became cheaper to rent out infrastructure in the
cloud and outsource maintenance costs than to handle everything in-house.
This is also reﬂected in research focusing on concurrent approaches [234, 235]
or hierarchical systems [236].

From the previous time period, the research areas of testing [237], con-
trol theory [213], decision making [238, 239, 240], and elasticity [225] in IaaS
were expanded on. New areas of research, such as trust [241], structural and
parametric adaptation [242], monitoring [224, 243], modelling [244, 245], and
service level maintenance [246] were established in the ﬁeld. Trust in self-
adaptive systems is an important concept. Even if the self-adaptation loops
are robust and eﬀective, without establishing trust for the system, using these
systems in large scale or critical environments is infeasible. This has to to
with the understood error rate of the self-adaptive system and the tolerance
of the user. In some cases it may be acceptable to have a 20% error rate in a
non-critical scenario but for another critical scenario like a Defence setting,
even a 5% error rate may not be acceptable given the possible consequences.
The research eﬀorts in self-adaptive systems are usually split between struc-
tural and parametric adaptation. Structural adaptation involves modifying
or improving the components of the system whereas parametric adaptation
involves optimizing the conﬁgurable parameters of the system, leaving the

29

components unchanged. Addressing both of the styles at once is an area of
need and potential [242].

The research into web services has beneﬁted from a 20 plus year build
up. Consistent with the trend of this time period, exemplars were used to
demonstrate the capabilities of self-adaptive web services using TCP commu-
nication [247]. Multi-agent systems [248], uncertainty [249], planning [250],
models [251, 252], and programming concepts [253, 254] were all continued
research themes into web services. The state of web services after 20 plus
years has moved from foundational theory to generic frameworks and to ex-
emplars. Even despite this trend, the various research themes are still being
explored and mined for use after 20 years which indicates that there is more
to learn.

Cyber-Physical Systems (CPS) are a combination of computation, net-
working, and physical processes where a physical component is controlled
by a chip or software component. This time period is the ﬁrst time CPS
are seen. This indicates that they are a relatively new research area to self-
adaptive systems. The dominating application (24%) to CPS is energy and
the dominant adaptation mechanism is MAPE-K [255]. A new language,
Adaptive CSP was developed to support compositional veriﬁcation of sys-
tems [256]. Continuing with the trend of exemplars in this phase, DARTSim
represents a simulation of UAVs on a reconnaissance mission communicat-
ing via TCP [257]. According to [258], a central concept in these systems
is homeostasis, the capacity to maintain an operational state despite run-
time uncertainty. This is addressed by four principles: collaborative sensing,
faulty component isolation from adaptation, enhancing mode switching, and
adjusting guards in mode switching. CPS are naturally employed in safety-
critical environments as their small nature allows them to be embedded into
any physical tool. The successful integration [259] and the tracability of these
components [260] are critical to the ﬁeld.

Continuing on with the last time period, bio inspired approaches were
seen in this time period, addressing emergent behavior [261] and artiﬁcial
DNA [262]. Security was a focus of this theme with guarantees [263] and
veriﬁcations [264] being explored. The self-protection aspect of self-adaptive
systems has been sprinkled amongst the time periods (with works focusing
on trust [265, 266, 267] and on situational awareness [268]), however as these
systems gain traction and popularity, there will be an increased need to
secure these systems in the same fashion as micro-transactions are secured

30

in ﬁnancial institutions.
security became a more prominent application domain.

It would not be surprising if in the next decade,

There was a paper in this time period on smart factory or industry
4.0 [269]. Seen as the next progression in industrial activity, this applica-
tion domain has potential to grow going in to the next decade. Exemplars
were again seen in this period across other domains using architectural self-
healing and self-optimization [270].

The frequencies of robotics and networking decreased in this phase. This
could be because they are less popular or that there is some overlap between
these domains and the top two domains, IoT and IaaS. The second reason is
more likely. Planning [271, 272, 273, 274], testing [275], fault tolerance [276],
and uncertainty [277, 278] all highlight common research trends seen before
in the timelines, as is model-predictive control [279]. Mobile systems most
likely also share the same similarities with overlap as networking and robotics
to IoT and IaaS. They have been a consistent theme across the timelines
and have a presence in this one with dynamic decisions [280], input space
mapping [281] and emotion measurement [282]. A review of self-adaptive
systems in the context of mobile systems is given in [283], one on monitoring
self-adaptive applications within edge computing frameworks in [284], and
one on learning in self-adaptive systems in [285].

The automotive application domain increased in this time period com-
pared to the previous time period. This may be explained by the new found
viability of smart cars and self-driving cars in recent years. Key trends for
this domain were adaptive, scalable, and robust systems. These systems are
proactively aware of latency and can act in swarms [286, 287, 288, 289, 290].
ISR has had a consistent presence across the timelines. Resilience [291],
goal theory [292], control theory [293], and assurance [294] highlight the re-
search eﬀorts in this time period. ISR is an important application domain to
self-adaptive systems. It enables real time situational awareness and allows
analysts to make decisions based oﬀ current and useful information. In a De-
fence context, generating this intelligence from data is extremely important
to the decision makers.

Other application domains included clonal plasticity [295], smart trav-
els [296], agriculture [297], UML [298], system on chip [299], MAPE-K [300],
traﬃc management [301], holonic systems [302], and managing support of
recoonﬁgurable software components [303].

31

Table 17: Categories during second half of the last decade (2016–2020)

Category

Count

Technological
Methodology
Analytical
Perspective
Empirical

Total

36
22
14
11
5

88

Tables 17 and 18 characterize this time period in terms of the prevalent
paper categories and application domains, underlining the focus on IoT and
IaaS in recent years.

4.6. Summary

In this section, we brieﬂy revisit the research questions set out at the

beginning of this review to summarize our ﬁndings.

RQ1 What is the current state of the art in self-adaptive systems? The
current state of the art in self-adaptive systems is focused on developing
methodologies and technology in the area of cloud-based services, such as
IoT and IaaS. Although research on self-adaptive systems tends to be di-
verse, empirical and analytical research is currently playing a smaller role, as
are other application domains. The importance of self-adaptive systems is
rapidly growing in areas such as bio-inspired approaches, security, and cyber
physical systems.

RQ2 How has the state of the art evolved over time? In the 1990s,
research on self-adaptive systems started with theoretical and model based
papers to establish the foundations of the ﬁeld. Practical implementations
and frameworks together with forward-thinking perspective research gave rise
to the rapid growth of the ﬁeld in the 2000s and 2010s, with a need for and a
trend towards holistic approaches and exemplars. Throughout the evolution
of the ﬁeld, researchers have published a large number of perspective papers
to challenge the status quo and outline the needs of practitioners.

RQ3 Which are the application domains of self-adaptive systems over
time? After an initial focus on networking, web services have dominated
self-adaptive systems as an application area for much of the ﬁeld’s evolu-
tion, up until around 2015 when IoT and IaaS became the most frequent

32

Table 18: Application domains during second half of the last decade (2016–2020)

Application Domain

Count

IoT
IaaS
Web Services
Cyber Physical Systems
Automotive
Review
Mobile Systems
Intelligence Surveillance Reconnaissance
Robotics
Networking
Load Balancing
Service Oriented Systems
Software Engineering
Security
Bio-inspired

16
12
9
6
5
4
4
4
3
3
2
2
2
2
2

domains. From the beginning, the ﬁeld has exhibited a large and diverse
number of application domains, from robotics and networking to automotive
and intelligence surveillance reconnaissance.

5. Threats to Validity and Limitations

Unlike related literature reviews on self-adaptive systems which character-
ize the state of the art of a narrow and speciﬁc aspect of self-adaptive systems
such as requirements [5, 6], claims and evidence [7], quality attributes [8], and
machine learning in the context of SAS [9], we took a broader view of the lit-
erature in this work, which necessarily limits the amount of detail presented
for each of the 293 papers. The tables in the appendix provide the high-level
overview from our review at a glance.

This systematic literature review was conducted with some assumptions.
The dblp database was a suitable database to capture self-adaptive systems.
Dblp is a computer science bibliography, and the review would not capture
papers outside this bibliography in ﬁelds like medicine, science, and other
engineering ﬁelds. We used the CORE ranking of a publication venue as

33

a proxy for paper quality. The corresponding ﬁltering step may have ex-
cluded high-quality papers relevant for our review that were published in
other venues.

The application domains mentioned in this paper are subject to the in-
terpretation of the papers. A paper may have multiple application domains
but only one was chosen for each paper. This means there is some overlap
across the domains. At best, it is useful to get a ﬂavor of the types of pa-
pers in self-adaptive systems across the 30 year time period but it is not a
comprehensive survey of all the types of domains.

The inclusion and exclusion criteria described in Section 3.2 bias the
selection of primary studies, e.g., by using keywords for pre-ﬁltering. These
steps were necessary to handle the large amount of papers. The pre-ﬁltering
would likely have resulted in a diﬀerent set of papers if we had considered
abstracts and keywords in addition to titles when computing word frequency.
Note that some of these concerns are mitigated by our use of snowballing to
pick up papers that were missed through the initial search. Focusing on a
single main contribution per paper also introduces bias since papers may
have more than one contribution.

6. Conclusion

Self-adaptive systems research dates back to the 1990s where theoretical
and model based papers established foundational self-adaptive theory. These
theories gave rise to practical implementations and frameworks such as the
RAINBOW framework in the early 2000s. During this time several perspec-
tive papers were published such as the seminal work ‘The Vision of Auto-
nomic Computing’ which outlined the grand challenges of the ﬁeld moving
forward. The ramping up years of 2006-2010 were characterized by principles
and ideas leading up to a need for more holistic generic approaches. In the
ﬁrst half of the 2010s the need for holistic generic approaches was met with
several new frameworks. By the second half of the 2010s, these frameworks
were extended to become exemplars, working solutions with real use cases.
In the 2020s, if the popularity of self-adaptive systems continues to grow,
these exemplars are likely to turn into mainstream adopted solutions.

The ebb and ﬂow of the application domains across the time period show
web services being most popular in the 2000s before IoT and IaaS papers
joined them as the most popular in the 2010s. In the late 2010s domains
like bio-inspired approaches, security, and cyber physical systems showed

34

promise to grow heading into the 2020s. As time goes on, often an unknown
disruptive solution arises that slowly makes its way to the top of the domains.
In the 2020s technologies could arise like this from unlikely sources.

In their systematic review on claims and supporting evidence for self-
adaptive systems from 2012, Weyns et al. [7] concluded that only a few
systematic empirical studies had been undertaken at that point. This trend
has not really changed over the last decade: while the overall number of pa-
pers on self-adaptive systems continues to grow, less than 8% of the papers
identiﬁed in our systematic review focus on the empirical aspect, compared
to 36% technological papers and 27% methodology papers. Perhaps encour-
agingly, many approaches are evaluated using real-world case studies, with
less reliance on simulations. Going forward, we expect to see a shift towards
empirical studies as the research ﬁeld continues to mature, with industrial
case studies in many of the application domains identiﬁed here.

For a young research ﬁeld such as self-adaptive systems, a surprisingly
large ratio of papers focus on reﬂecting on the current state of the ﬁeld
and/or providing a road map going forward (17% of the papers identiﬁed in
our review). Due to the size of the ﬁeld, very few of these perspective papers
encompass self-adaptive systems as a whole, instead focusing on particular
sub-classes of or challenges related to self-adaptive systems. In contrast, we
provide a high-level overview of the ﬁeld across categories and application
domains.

In our future work, we aim to work towards closing some of the gaps
identiﬁed in this systematic literature review, with a particular focus on
systematic empirical studies. In line with Gerostathopoulos et al.’s recent
study [304] which concluded that “most data of users and the environment
used in experiments is synthetically generated”, we aim to experiment with
human subjects – an aspect that has not received much attention from the
self-adaptive systems research community thus far. At the same time, the
maturity of the ﬁeld now allows for the development and deployment of such
systems in real environments, with large-scale evaluations using the empirical
methods that are well-established in other areas of software engineering [305].
Through our industry collaborators, we further will put particular focus on
self-adaptation for cyber-physical systems. Cyber-physical systems have to
handle uncertainty and change during operation, control their emergent be-
havior, and be scalable and tolerant to threats [255], yet their complexities
introduce new challenges to self-adaptive systems that are diﬃcult to capture
without real-world evaluations.

35

Type

Applic. Contr. Formal. Evaluation Method

Table 19: Analytical

y
d
u
t
s

e
s
a
C

n
o
i
t
i

n
ﬁ
e
D

e
g
a
u
g
n
a
L

e
r
u
t
c
e
t
i

h
c
r
A

k
r
o
w
e
m
a
r
F

l
a
c
i
t
a
m
e
h
t
a
M

✓

m
e
c
h
n
t
e
i
r
r
o
r
e
a
g
f
e
e
l
Y
A
R
[24] 1992 ✓
[25] 1999
[54] 2005 ✓
[37] 2005 ✓
[49] 2005
[266] 2006
[121] 2007
[59] 2008 ✓
[124] 2009
[93] 2009
[73] 2009
[101] 2010
[69] 2010 ✓
[198] 2011
[187] 2011
[153] 2011
[182] 2011
[186] 2011
[178] 2012
[155] 2012
[152] 2013 ✓
[228] 2016 ✓
[261] 2016 ✓
[241] 2016 ✓
[276] 2016 ✓
[235] 2016
[274] 2017
[220] 2017 ✓
[288] 2018 ✓
[240] 2018 ✓
[224] 2018 ✓
[271] 2018 ✓
[272] 2018
[263] 2018
[250] 2019 ✓

✓
✓
✓

✓

✓

✓

✓
✓
✓

✓

✓

✓
✓

✓

✓
✓

d
e
t
a
l

i

u
m
S
✓
✓

✓

n
o
i
s
n
e
t
x
E

✓
✓

✓
✓

✓

✓

✓
✓
✓

✓
✓
✓

✓

✓
✓ ✓
✓
✓
✓ ✓
✓
✓

✓
✓

✓

✓
✓

✓
✓

✓

✓
✓ ✓
✓ ✓

✓
✓
✓ ✓

✓ ✓
✓

✓ ✓
✓

o
N

✓

l
e
v
s
o
e
N
Y
✓ ✓
✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓
✓
✓ ✓
✓
✓
✓ ✓
✓
✓ ✓
✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓
✓
✓ ✓
✓ ✓
✓ ✓
✓
✓ ✓
✓ ✓

✓ ✓
✓ ✓
✓ ✓
✓
✓ ✓

y
r
a
n
m

i

i
l
e
r
P

y
d
u
t
S

e
s
a
C

n
o
s
i
r
a
p
m
o
C

l
a
i
r
t
s
u
d
n
I

e
n
o
N
/
n
w
o
n
k
n
U

t
c
e
j
b
u
S

n
a
m
u
H

e
v
i
t
a
t
i
t
n
a
u
Q
✓
✓

n
i
a
m
o
D

Networking
Networking
Networking
Web Services
Robotics
Security
Holonic Systems
Web Services
Physics

✓ Other
IoT
e-Commerce
Web Services
Bio-inspired
IoT

✓ Networking

✓
✓

✓

✓
✓

✓
✓

Software Engineering
Service-Oriented Systems
ISR
Networking
Robotics
IoT
Bio-inspired
IaaS
Networking

✓

✓ Other
IaaS
IoT
Automotive
IaaS
IoT
Robotics
Robotics
Security
✓ Web Services

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓
✓
✓

✓

✓
✓

✓

✓

✓

✓

36

Type Implementation Applic. Contr. Goals Evaluation Method

Table 20: Technological (1/3)

p
o
o
l

e
h
t

n

i

n
a
m
u
H

e
c
n
e
r
e
f
e
R

r
a
e
Y

[23] 1990
1998
[1]
[26] 1999
[27] 2000
[28] 2004 ✓
[42] 2004
[45] 2004
[39] 2004
[34] 2004
[36] 2005 ✓
[52] 2005
[40] 2005
[104] 2006
[63] 2006
[57] 2006 ✓
[265] 2006
[103] 2007
[122] 2007
[58] 2007
[98] 2008 ✓
[74] 2008
[81] 2008
[120] 2009
[76] 2009
[78] 2009 ✓
[83] 2009
[65] 2009 ✓
[60] 2009
[95] 2010
[75] 2010
[85] 2010
[87] 2010 ✓
[192] 2011
[190] 2011
[206] 2011
[165] 2011
[169] 2011
[143] 2011
[179] 2011

e
l
c
r
i
c

l
o
o
T

d
e
s
o
l
C
✓
✓ ✓
✓
✓

✓ ✓
✓
✓
✓

✓

✓
✓ ✓
✓
✓

✓
✓ ✓
✓ ✓
✓

✓
✓
✓
✓

✓

✓
✓
✓
✓

✓
✓
✓
✓
✓
✓ ✓
✓

k
r
o
w
e
m
a
r
F

e
g
a
u
g
n
a
L

e
r
u
t
c
e
t
i

h
c
r
A

m
h
t
i
r
o
g
l
A

l
e
d
o
M
✓

✓

✓

✓

✓

✓
✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓
✓

✓

✓

✓
✓

✓

n
o
i
s
n
e
t
x
E

y
d
u
t
S

e
s
a
C
✓

d
e
t
a
l

u
m
S

i

✓
✓

✓ ✓
✓ ✓
✓

✓
✓

✓ ✓
✓
✓
✓

✓ ✓
✓
✓

✓
✓

✓
✓

✓

✓

✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓

✓
✓
✓
✓
✓
✓
✓ ✓

✓

t
c
e
j
b
u
S

n
a
m
u
H

e
v
i
t
a
t
i
t
n
a
u
Q

e
n
o
N
/
n
w
o
n
k
n
U

n
o
s
i
r
a
p
m
o
C

l
a
i
r
t
s
u
d
n
I

n
i
a
m
o
D

✓
✓

Software Engineering
IoT
Speech Recognition
Robotics
Software Engineering
Load Balancing
✓
IaaS
✓
Bio-inspired
✓ Web Services
Web Services
Software Stack
Bio-inspired
e-Commerce
Networking

✓
✓ Web Services
✓
Security

✓

✓ ISR

Video Encoding

✓ Web Services
✓ Load Balancing

✓

IoT
✓ Robotics
UML
IoT
IoT
Robotics
Web Services
✓ Web Services
e-Commerce
IoT
Robotics
Robotics
Programmer
Resource Management

✓
✓

✓ Software Stack

✓
✓
✓

IoT
IoT
Robotics
Service-Oriented Systems

✓

✓

✓

✓

y
d
u
t
S

e
s
a
C
✓

✓
✓

✓

✓

✓

✓
✓
✓
✓

✓
✓
✓
✓

y
r
a
n
m

i

i
l
e
r
P

y
t
i
l
i
t
U

s
l
a
o
G

l
e
v
o
N
✓
✓
✓
✓ ✓
✓ ✓ ✓

✓
✓ ✓
✓ ✓ ✓
✓
✓
✓
✓

✓
✓ ✓
✓

✓
✓
✓ ✓
✓

✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓
✓ ✓
✓
✓ ✓ ✓
✓ ✓
✓ ✓
✓
✓ ✓
✓
✓ ✓ ✓
✓
✓
✓ ✓

37

Type Implementation Applic. Contr. Goals Evaluation Method

Table 21: Technological (2/3)

p
o
o
l

e
h
t

n

i

n
a
m
u
H

e
c
n
e
r
e
f
e
R

r
a
e
Y

[180] 2011
[125] 2011
[132] 2011
[133] 2011
[199] 2012
[163] 2012
[177] 2012
[160] 2012
[144] 2012
[196] 2012
[183] 2012 ✓
[203] 2013
[173] 2013
[184] 2013
[148] 2013
[208] 2013 ✓
[134] 2013
[164] 2014
[167] 2014
[145] 2014
[147] 2014 ✓
[151] 2014
[142] 2014
[136] 2014
[209] 2015 ✓
[189] 2015
[158] 2015 ✓
[140] 2015
[138] 2015
[128] 2015
[269] 2016
[221] 2016
[217] 2016
[291] 2016
[280] 2016
[278] 2016
[234] 2016
[253] 2016
[254] 2016

e
l
c
r
i
c

d
e
s
o
l
C
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓

✓
✓
✓
✓

✓
✓
✓

✓
✓
✓

✓

✓

✓

✓
✓ ✓
✓
✓
✓
✓ ✓
✓
✓
✓
✓
✓ ✓
✓

k
r
o
w
e
m
a
r
F

e
g
a
u
g
n
a
L

l
e
d
o
M

l
o
o
T

e
r
u
t
c
e
t
i

h
c
r
A
✓

m
h
t
i
r
o
g
l
A

y
d
u
t
S

e
s
a
C

✓
✓
✓
✓
✓

✓

✓

✓
✓

✓

✓
✓

✓

✓

✓

✓

✓
✓
✓

✓

✓

✓
✓
✓

✓

✓

✓

✓

✓

✓
✓

✓
✓
✓
✓

✓
✓
✓
✓
✓

✓
✓
✓ ✓
✓

✓
✓
✓
✓
✓
✓ ✓

✓
✓

✓
✓
✓
✓

✓ ✓

✓

e
n
o
N
/
n
w
o
n
k
n
U

n
i
a
m
o
D

e
v
i
t
a
t
i
t
n
a
u
Q
✓

✓

✓

✓

Service-Oriented Systems
Web Services
Web Services
Web Services
Bio-inspired
IoT
ISR
Networking
Robotics
Software Engineering
Software Engineering
Automotive
Other
Mobile Systems
Robotics
Software Engineering
Web Services
IoT
Mobile Systems
Robotics
Robotics
Robotics
✓ Web Services
✓ Web Services

✓
✓

✓

✓

✓

ISR
ISR
Networking
Web Services
Web Services
✓ Web Services
Smart Factory
IoT
IoT
ISR
Mobile Systems
Networking
Software Engineering
Web Services
Web Services

✓

✓

y
r
a
n
m

i

i
l
e
r
P

y
t
i
l
i
t
U

✓

✓

n
o
i
s
n
e
t
x
E

s
l
e
l
a
v
o
o
G
N
✓ ✓
✓ ✓
✓ ✓
✓
✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓
✓
✓

✓

✓

✓
✓

✓

✓ ✓

✓ ✓

✓
✓ ✓
✓
✓
✓ ✓
✓ ✓ ✓
✓ ✓
✓

✓
✓ ✓ ✓
✓ ✓
✓ ✓
✓
✓ ✓
✓ ✓ ✓
✓

✓
✓

✓

✓
✓
✓
✓
✓ ✓
✓ ✓ ✓

t
c
e
j
b
u
S

n
a
m
u
H

y
d
u
t
S

e
s
a
C

n
o
s
i
r
a
p
m
o
C

l
a
i
r
t
s
u
d
n
I

✓

✓
✓

✓
✓

✓

✓

✓

✓

✓
✓

✓
✓

✓
✓
✓
✓

✓

✓

✓
✓

✓
✓

✓

d
e
t
a
l

i

u
m
S
✓
✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

38

Type Implementation Applic. Contr. Goals Evaluation Method

Table 22: Technological (3/3)

y
d
u
t
S

e
s
a
C

m
h
t
i
r
o
g
l
A

k
r
o
w
e
m
a
r
F

l
e
d
o
M

e
r
u
t
c
e
t
i

h
c
r
A
✓

e
g
a
u
g
n
a
L

✓

✓

✓

✓
✓
✓

✓

✓

e
l
c
r
i
c

l
o
o
T

d
e
s
o
l
C
✓
✓
✓ ✓
✓

✓
✓ ✓
✓ ✓
✓
✓ ✓
✓

✓

✓ ✓
✓
✓
✓
✓ ✓
✓
✓ ✓
✓ ✓
✓

p
o
o
l

e
h
t

n

i

n
a
m
u
H

e
c
n
e
r
e
f
e
R

r
a
e
Y

[300] 2017
[296] 2017
[286] 2017
[244] 2017
[210] 2017 ✓
[215] 2017
[214] 2017
[213] 2017
[293] 2017
[279] 2017
[243] 2017 ✓
[303] 2017 ✓
[248] 2017
[252] 2017
[301] 2018
[289] 2018
[256] 2018
[270] 2018 ✓
[247] 2018
[297] 2019
[257] 2019 ✓
[246] 2019
[211] 2019 ✓
[225] 2019
[216] 2019
[226] 2019
[212] 2020 ✓

✓

✓
✓
✓

✓

✓

✓

✓

✓

✓

✓
✓
✓
✓

✓
✓

✓
✓
✓
✓
✓
✓
✓

✓
✓
✓

✓

n
o
s
i
r
a
p
m
o
C
✓
✓

✓
✓

✓

✓

t
c
e
j
b
u
S

n
a
m
u
H

e
v
i
t
a
t
i
t
n
a
u
Q

e
n
o
N
/
n
w
o
n
k
n
U

n
i
a
m
o
D

MAPE-K
Smart Traveller
Automotive
IaaS
IoT
IoT
IoT
IoT
ISR
Load Balancing
Service-Oriented Systems
Web Services
Web Services
Web Services
Traﬃc Mgmt.
Automotive
Cyber Physical Systems
Software Engineering
Web Services
Agriculture
Cyber Physical Systems
IaaS
IoT
IoT
IoT
Load Balancing
IoT

✓
✓

✓
✓

✓
✓
✓

✓
✓
✓
✓

✓
✓
✓

✓
✓

d
e
t
a
l

i

u
m
S
✓
✓

✓

✓

✓
✓
✓
✓
✓

✓

n
o
i
s
n
e
t
x
E

✓
✓

✓

y
s
l
t
e
l
i
a
v
l
i
o
o
t
G
N
U
✓ ✓ ✓
✓ ✓
✓
✓ ✓
✓ ✓
✓
✓
✓
✓ ✓
✓ ✓ ✓

✓

✓ ✓
✓
✓ ✓ ✓
✓ ✓
✓
✓ ✓ ✓
✓
✓
✓ ✓ ✓
✓
✓
✓ ✓
✓ ✓ ✓
✓

✓
✓ ✓ ✓

y
r
a
n
m

i

i
l
e
r
P

y
d
u
t
S

e
s
a
C

l
a
i
r
t
s
u
d
n
I

✓

✓
✓
✓

✓

39

Type
k
r
o
w
e
m
a
r
f

n
o
i
t
c
e
ﬂ
e
R
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓

✓
✓

✓

✓
✓
✓

✓

✓

e
c
n
e
r
e
f
e
R

y
e
v
r
u
S

w
e
i
v
e
R

r
a
e
Y

f
o

n
o
i
t
a
u
l
a
v
E

2003
2003
2003
2004
2004
2004
2004
2004
2004
2004
2005
2005
2005 ✓
2005
2006
2006 ✓
2007 ✓

[11]
[38]
[2]
[48]
[33]
[12]
[53]
[29]
[30]
[55]
[31]
[32]
[13]
[51]
[88]
[90]
[18]
[105] 2008
2008
[89]
2008 ✓
[14]
[106] 2009
[116] 2009
2009 ✓
[91]
[15]
2009
[267] 2009
[66]
2009
[108] 2010
2010
[94]
2010
[77]
2010
[79]
2010
[92]
2010
[70]
2011 ✓
[19]
[176] 2012 ✓
[7]
[21]
[159] 2013
[20]
[16]
[139] 2015
[302] 2016
[255] 2016
[242] 2016
[223] 2017
[298] 2018
[284] 2018
[233] 2018
[231] 2018
[236] 2018
[283] 2019
[285] 2019

2015 ✓
2015 ✓

2012
2012 ✓

✓
✓

✓

✓

✓
✓

✓

✓

✓
✓

✓
✓

✓
✓
✓
✓

✓

✓

Table 23: Perspective

Content

Evaluation Method

n
o
s
i
r
a
p
m
o
C

y
m
o
n
o
x
a
T

p
a
m
d
a
o
R

k
r
o

s
t
n
e
m
e
r
i

W

s
e
g
n
e
e
r
l
u
u
l
a
q
t
h
e
u
R
C
F
✓ ✓ ✓
✓
✓ ✓ ✓
✓
✓

✓

✓

✓

✓

✓ ✓ ✓
✓
✓ ✓

✓

✓

✓
✓
✓
✓
✓

✓

✓

✓

✓

✓
✓ ✓
✓ ✓
✓
✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓ ✓

✓ ✓

✓
✓
✓ ✓ ✓
✓ ✓
✓
✓
✓
✓
✓
✓ ✓
✓

✓

✓
✓ ✓
✓

y
r
a
n
m

i

i
l
e
r
P

t
c
e
j
b
u
S

n
a
m
u
H

e
v
i
t
a
t
i
t
n
a
u
Q

y
d
u
t
S

e
s
a
C

n
o
s
i
r
a
p
m
o
C

l
a
i
r
t
s
u
d
n
I

✓

✓
✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓

✓
✓

✓

✓

✓

✓
✓

✓
✓
✓

✓
✓
✓
✓
✓

40

✓

✓

✓

✓

✓

✓

✓

✓

e
n
o
N
/
n
w
n
o
i
a
n
m
k
n
o
D
U
✓ Review
✓ Bio-inspired
✓ Review
✓ IoT

Web Services

✓ Review

Networking
Review
✓ Review
✓ Software Engineering
✓ Review
Review
✓ Review

Computer

✓ Review
✓ Review
Review
Software Engineering
Review
✓ Review

Software Engineering
Traﬃc Mgmt.
Review
Review
Security
Web Services
Management
Traﬃc Mgmt.
IoT
IoT
Review
Web Services
Review
Control Engineering
Review
Review
Networking
Review
Review
Web Services
Holonic Systems
Cyber Physical Systems
IaaS
Software Engineering
UML
IaaS
Review
Review
Review
Mobile Systems
Review

✓

✓

k
r
o
w
e
m
a
r
F
w
e
N

✓

✓

✓

✓

✓

✓

✓

✓

e
r
u
t
c
e
t
i

h
c
r
a

e
c
n
e
r
e
f
e
R

l
a
r
e
r
n
a
e
e
G
Y
2004 ✓
[43]
2005
[50]
2005
[46]
2005
[35]
[47]
2005
[117] 2006
[102] 2006
[118] 2006 ✓
[268] 2006
[113] 2007
[111] 2008
[112] 2008
2008
[72]
2008
[82]
[84]
2008
[123] 2008
2008
[61]
2008
[64]
[62]
2008
[107] 2009
[97]
2009
[119] 2009
2009
[86]
[67]
2009
[114] 2010
[109] 2010
2010
[80]
[71]
2010
[170] 2011
[154] 2011
[194] 2011
[150] 2011
[193] 2011
[126] 2011
[161] 2012
[146] 2012
[188] 2012
[174] 2012
[127] 2012
[130] 2012
[202] 2013
[171] 2013
[185] 2013
[181] 2013
[131] 2013

✓

✓

✓

Type

Applic. Contr. Evaluation Method

Table 24: Methodology (1/2)

e
u
q
i

n
h
c
e
T
s
i
s
y
l
a
n
A

a
i
r
e
t
i
r
C

l
a
m
r
o
F

h
c
a
o
r
p
p
A
w
e
N

n
r
e
t
t
a
P
w
e
N

y
d
u
t
s

e
s
a
C

d
e
t
a
l

i

u
m
S
✓

n
o
i
s
n
e
t
x
E

l
e
v
o
N
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓

✓
✓
✓

✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓

✓
✓
✓
✓
✓

✓

✓
✓
✓
✓

y
r
a
n
m

i

i
l
e
r
P

e
v
i
t
a
t
i
t
n
a
u
Q
✓

✓

✓

✓

✓

✓
✓

✓
✓

✓
✓
✓
✓
✓
✓
✓

✓
✓

✓

✓

✓

e
n
o
N
/
n
w
o
n
k
n
U

n
i
a
m
o
D

Load Balancing
Automotive
IoT
Web Services
IoT
ISR
Mobile Systems
✓ Speech Recognition

Security
Programmer
Computer
Computer
IoT
✓ Robotics
Robotics
Networking
Web Services
Web Services
Web Services
System on Chip
Service-Oriented Systems
Service-Oriented Systems
Robotics
Web Services
Automotive
Mobile Systems
IoT
Web Services
IaaS
Networking
Robotics
Robotics
Other
Web Services
Networking
Robotics
Software Engineering
Service-Oriented Systems
Web Services
Web Services
UML
IaaS
Mobile Systems
Service-Oriented Systems
Web Services

t
c
e
j
b
u
S

n
a
m
u
H

y
d
u
t
S

e
s
a
C

n
o
s
i
r
a
p
m
o
C

l
a
i
r
t
s
u
d
n
I

✓

✓
✓

✓

✓

✓
✓
✓
✓

✓

✓
✓
✓

✓

✓

✓

✓

✓

✓

✓

✓

41

✓ ✓
✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓
✓
✓
✓ ✓
✓

✓
✓
✓

✓ ✓
✓ ✓
✓
✓
✓ ✓
✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓

✓
✓

✓
✓ ✓
✓ ✓
✓
✓ ✓
✓ ✓

✓ ✓
✓
✓ ✓
✓
✓ ✓
✓ ✓
✓

✓ ✓

✓ ✓
✓
✓
✓

✓

✓
✓

✓
✓

✓

✓

✓

✓

✓

Type

Applic. Contr. Evaluation Method

Table 25: Methodology (2/2)

e
r
u
t
c
e
t
i

h
c
r
a

l
a
r
e
n
e
G

e
c
n
e
r
e
f
e
R

r
a
e
Y

[135] 2013
[207] 2014
[166] 2014
[149] 2014
[141] 2014
[129] 2014
[168] 2015
[195] 2015
[200] 2015
[156] 2015
[128] 2015
[137] 2015
[262] 2016
[227] 2016
[260] 2016
[238] 2016
[239] 2016
[292] 2016
[281] 2016
[219] 2016
[299] 2017
[287] 2017
[245] 2017
[222] 2017
[295] 2018
[232] 2018
[259] 2018
[294] 2018
[277] 2018
[264] 2018
[251] 2018
[258] 2019
[229] 2019
[230] 2019 ✓

e
u
q
i

n
h
c
e
T
s
i
s
y
l
a
n
A

a
i
r
e
t
i
r
C

l
a
m
r
o
F

n
r
e
t
t
a
P
w
e
N

✓

✓

k
r
o
w
e
m
a
r
F
w
e
N
✓

✓

✓

✓

✓

✓

h
c
a
o
r
p
p
A
w
e
N

y
d
u
t
s

e
s
a
C
✓
✓ ✓
✓ ✓
✓ ✓

✓
✓
✓ ✓
✓ ✓
✓
✓ ✓
✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓
✓ ✓
✓ ✓
✓
✓ ✓
✓
✓ ✓
✓ ✓
✓
✓ ✓
✓ ✓
✓
✓ ✓
✓ ✓
✓ ✓
✓
✓ ✓
✓

d
e
t
a
l

u
m
S

i

✓

✓

✓

✓

n
o
i
s
n
e
t
x
E

✓

✓

✓

l
e
v
o
N
✓
✓
✓
✓

✓
✓
✓
✓
✓
✓
✓
✓

✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓

y
r
a
n
m

i

i
l
e
r
P

y
d
u
t
S

e
s
a
C
✓
✓
✓

✓

✓

✓

✓

✓
✓

✓
✓
✓
✓
✓
✓
✓
✓

t
c
e
j
b
u
S

n
a
m
u
H

e
v
i
t
a
t
i
t
n
a
u
Q

e
n
o
N
/
n
w
o
n
k
n
U

n
i
a
m
o
D

n
o
s
i
r
a
p
m
o
C

l
a
i
r
t
s
u
d
n
I

✓

✓

✓

✓
✓

✓
✓
✓

✓

✓
✓

Web Services
Video Encoding
IoT
Robotics
Web Services
Web Services
IoT
ISR
Mobile Systems
Networking
Web Services
Web Services
Bio-inspired
Web Services
Cyber Physical Systems
IaaS
IaaS
ISR
Mobile Systems
Service-Oriented Systems
System on Chip
Automotive
IaaS
IoT
Clonal Plasticity
Retroﬁtting systems
Cyber Physical Systems
ISR
Networking
Security
Web Services
Cyber Physical Systems
IoT
IoT

✓

✓

✓
✓

✓

42

Testing Strategy Applic. Adaptation
Technique

Evaluation
Method

Table 26: Empirical

e
c
n
e
r
e
f
e
R

r
a
e
Y

e
m

i
t
-
n
g
i
s
e
D

e
m

i
t
-
n
u
R

[41] 2004
[56] 2004 ✓
[44] 2005 ✓
[115] 2006 ✓
[110] 2009 ✓
[99] 2009 ✓
[100] 2009 ✓
[68] 2009
[96] 2010 ✓
[191] 2011
[201] 2012 ✓
[197] 2012 ✓
[162] 2012
[205] 2013 ✓
[204] 2013
[172] 2014 ✓
[175] 2015 ✓
[157] 2015 ✓
[273] 2017 ✓
[282] 2017 ✓
[290] 2018
[237] 2018 ✓
[275] 2018 ✓

n
o
i
t
a
t
p
a
d
A

g
n

i
r
o
t
i

n
o
M
✓

✓
✓ ✓
✓ ✓
✓ ✓
✓
✓ ✓
✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓
✓ ✓

✓ ✓
✓ ✓

y
d
u
t
S

e
s
a
C

✓

✓
✓

✓
✓

✓
✓
✓

✓
✓
✓
✓
✓

✓

t
n
e
n
o
p
m
o
C

d
e
t
a
l

r
e
t
e
m
u
a
m
r
a
P
S
✓ ✓
✓

i

✓

✓ ✓
✓
✓ ✓
✓
✓
✓

✓

✓
✓
✓ ✓
✓ ✓
✓ ✓
✓
✓
✓
✓
✓

✓
✓ ✓
✓

y
r
a
n
m

i

i
l
e
r
P

t
c
e
j
b
u
S

n
a
m
u
H

y
d
u
t
S

e
s
a
C

n
o
s
i
r
a
p
m
o
C

l
a
i
r
t
s
u
d
n
I

✓

✓
✓

✓

✓
✓
✓

e
n
o
N
/
n
w
o
n
k
n
U

n
i
a
m
o
D

e
v
i
t
a
t
i
t
n
a
u
Q
✓ Load Balancing
✓ ISR
✓ Web Services

Service-Oriented Systems
Automotive
✓ Automotive

Traﬃc Mgmt.
Web Services
✓ Water Networks

ISR

✓ e-Commerce

Control Engineering

✓ Networking
✓ Traﬃc Mgmt.
✓ Water Networks

✓ ✓ ✓ IaaS
✓
IaaS
✓ Networking
IaaS

✓

✓ Mobile Systems
✓ Automotive
IaaS
Robotics

✓

✓

43

References

[1] P. Oreizy, N. Medvidovic, R. Taylor, Architecture-based runtime soft-
ware evolution,
in: Proceedings of the 20th International Confer-
ence on Software Engineering, IEEE Comput. Soc, 1998, pp. 177–186.
doi:10.1109/icse.1998.671114.

[2] J. Kephart, D. Chess, The vision of autonomic computing, Computer

36 (1) (2003) 41–50. doi:10.1109/mc.2003.1160055.

[3] J. Kephart, M. Parashar, V. Sunderam, R. Das, Message from the
International Conference on
general chairs and program chairs,
Autonomic Computing, IEEE Computer Society, Los Alamitos, CA,
USA, 2004.

in:

[4] D. Weyns, Engineering self-adaptive software systems – an organized
tour,
in: 2018 IEEE 3rd International Workshops on Foundations
and Applications of Self* Systems (FAS*W), IEEE, 2018, pp. 1–2.
doi:10.1109/fas-w.2018.00012.

[5] Z. Yang, Z. Li, Z. Jin, Y. Chen, A systematic literature re-
view of requirements modeling and analysis for self-adaptive sys-
tems, in: Requirements Engineering: Foundation for Software Qual-
ity, Springer, Springer International Publishing, 2014, pp. 55–71.
doi:10.1007/978-3-319-05843-6\_5.

[6] S. Sucipto, R. S. Wahono, A systematic literature review of require-
ments engineering for self-adaptive systems, Journal of Software Engi-
neering 1 (1) (2015) 17–27.

[7] D. Weyns, M. U. Iftikhar, S. Malek, J. Andersson, Claims and sup-
porting evidence for self-adaptive systems: A literature study,
in:
2012 7th International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems (SEAMS), IEEE, 2012, pp. 89–98.
doi:10.1109/seams.2012.6224395.

[8] S. Mahdavi-Hezavehi, V. H. Durelli, D. Weyns, P. Avgeriou,
that handle mul-
literature review on methods
sys-
Information and Software Technology 90 (2017) 1–26.

A systematic
tiple quality attributes
tems,
doi:10.1016/j.infsof.2017.03.013.

in architecture-based self-adaptive

44

[9] T. R. D. Saputri, S.-W. Lee, The application of machine learning in
self-adaptive systems: A systematic literature review, IEEE Access 8
(2020) 205948–205967. doi:10.1109/access.2020.3036037.

[10] W. Chainbi, Why applying agent technology to autonomic computing?,
Frontiers in Artiﬁcial Intelligence and Computing 135 (2005) 282.

[11] A. G. Ganek, T. A. Corbi, The dawning of

computing
era,
doi:10.1147/sj.421.0005.

IBM Systems

Journal

42

(1)

the autonomic
(2003) 5–18.

[12] A. Ganek, C. Hilkner, J. Sweitzer, B. Miller, J. Hellerstein, The
response to IT complexity:
in: Third
IEEE International Symposium on Network Computing and Appli-
cations, 2004. (NCA 2004). Proceedings., IEEE, 2004, pp. 151–157.
doi:10.1109/nca.2004.1347772.

autonomic computing,

[13] J. O. Kephart, Research challenges of autonomic

computing,
the 27th international conference on Soft-
ICSE '05, ACM Press,
2005, pp. 15–22.

Proceedings of
in:
ware engineering -
doi:10.1145/1062455.1062464.

[14] M. C. Huebscher, J. A. McCann, A survey of autonomic comput-
ing—degrees, models, and applications, ACM Computing Surveys
40 (3) (2008) 1–28. doi:10.1145/1380584.1380585.

[15] M. Salehie, L. Tahvildari, Self-adaptive software, ACM Transac-
tions on Autonomous and Adaptive Systems 4 (2) (2009) 1–42.
doi:10.1145/1516533.1516538.

[16] C. Krupitzer, F. M. Roth, S. VanSyckel, G. Schiele, C. Becker,
self-adaptive systems,
184–206.

A survey on engineering approaches
Pervasive
doi:10.1016/j.pmcj.2014.09.009.

and Mobile Computing

(2015)

(PB)

for

17

[17] E. G. Pereira, R. Pereira, A. Taleb-Bendiab, Performance evaluation
for self-healing distributed services and fault detection mechanisms,
Journal of Computer and System Sciences 72 (7) (2006) 1172–1182.
doi:10.1016/j.jcss.2005.12.008.

45

[18] D. Ghosh, R. Sharman, H. R. Rao, S. Upadhyaya, Self-healing systems
— survey and synthesis, Decision Support Systems 42 (4) (2007) 2164–
2185. doi:10.1016/j.dss.2006.06.011.

[19] H. Psaier,
approaches
doi:10.1007/s00607-010-0107-y.

S. Dustdar, A survey
and systems, Computing

on self-healing
(1)

91

(2010)

systems:
43–73.

[20] C. Schneider, A. Barker, S. Dobson, A survey of self-healing systems
frameworks, Software: Practice and Experience 45 (10) (2014) 1375–
1398. doi:10.1002/spe.2250.

[21] E. Yuan, S. Malek, A taxonomy and survey of self-protecting software
systems, in: 2012 7th International Symposium on Software Engineer-
ing for Adaptive and Self-Managing Systems (SEAMS), IEEE, 2012,
p. 109–118. doi:10.1109/seams.2012.6224397.

[22] B. Kitchenham, O. P. Brereton, D. Budgen, M. Turner, J. Bailey,
S. Linkman, Systematic literature reviews in software engineering –
a systematic literature review, Information and Software Technology
51 (1) (2009) 7–15. doi:10.1016/j.infsof.2008.09.009.

[23] J. Kramer, J. Magee, The evolving philosophers problem: dynamic
IEEE Transactions on Software Engineering

change management,
16 (11) (1990) 1293–1306. doi:10.1109/32.60317.

[24] A. Cheng,

Self-stabilizing

[1992] Proceedings
Systems,
doi:10.1109/reldis.1992.235129.

IEEE Comput.

real-time

in:
11th Symposium on Reliable Distributed
172–179.

Soc. Press,

rule-based

systems,

1992,

pp.

[25] J. Beauquier, B. B´erard, L. Fribourg, A new rewrite method for
proving convergence of self-stabilizing systems, in: Lecture Notes in
Computer Science, Springer Berlin Heidelberg, 1999, pp. 240–255.
doi:10.1007/3-540-48169-9\_17.

[26] K. Yamauchi, M. Oota, N. Ishii, A self-supervised learning system for
pattern recognition by sensory integration, Neural Networks 12 (10)
(1999) 1347–1358. doi:10.1016/s0893-6080(99)00064-7.

46

[27] T. Q. Pham, K. R. Dixon, P. K. Khosla, Software systems facilitating
self-adaptive control software, in: International Conference on Intelli-
gent Robots and Systems (IROS), Vol. 2, 2000, pp. 1094–1100 vol.2.
doi:10.1109/IROS.2000.893165.

[28] D. Garlan, S.-W. Cheng, A.-C. Huang, B. Schmerl, P. Steenkiste, Rain-
bow: architecture-based self-adaptation with reusable infrastructure,
Computer 37 (10) (2004) 46–54. doi:10.1109/mc.2004.175.

[29] D. Hales, Sociologically inspired approaches

for self-*: Exam-
ples and prospects,
Self-star Properties in Complex Infor-
mation Systems, Springer Berlin Heidelberg, 2005, pp. 433–445.
doi:10.1007/11428589\_28.

in:

[30] R. de Lemos, The conﬂict between self-* capabilities and predictabil-
ity, in: Self-star Properties in Complex Information Systems, Springer
Berlin Heidelberg, 2005, pp. 219–228. doi:10.1007/11428589\_15.

[31] O. Babaoglu, M. Jelasity, A. Montresor, C. Fetzer, S. Leonardi, A. van
Moorsel, M. van Steen, The self-star vision, in: Self-star Properties in
Complex Information Systems, Springer Berlin Heidelberg, 2005, pp.
1–20. doi:10.1007/11428589\_1.

[32] S.-W. Cheng, D. Garlan, B. Schmerl, Making self-adaptation an
engineering reality,
in Complex Infor-
mation Systems, Springer Berlin Heidelberg, 2005, pp. 158–173.
doi:10.1007/11428589\_11.

Self-star Properties

in:

[33] R. Barrett, P. P. Maglio, E. Kandogan, J. Bailey, Usable au-
tonomic computing systems: The system administrators' perspec-
tive, Advanced Engineering Informatics 19 (3) (2005) 213–221.
doi:10.1016/j.aei.2004.11.001.

[34] W. Walsh, G. Tesauro, J. Kephart, R. Das, Utility functions
International Conference on Auto-
IEEE, 2004, pp. 70–77.

in autonomic systems,
nomic Computing, 2004. Proceedings.,
doi:10.1109/icac.2004.1301349.

in:

[35] V. Kapoor, Services and autonomic computing: a practical approach
in: 2005 IEEE International Confer-

for designing manageability,

47

ence on Services Computing (SCC'05) Vol-1, IEEE, 2005, pp. 41–48.
doi:10.1109/scc.2005.88.

[36] G.-J. Houben, Z. Fiala, K. van der Sluijs, M. Hinz, Building self-
managing web information systems from generic components, in: Ad-
vanced Information Systems Engineering (CAiSE) Workshops, FEUP
Edi¸c˜oes, Porto, 2005, pp. 53–67.

[37] K. Wolter, Self-management of systems through automatic restart, in:
Self-star Properties in Complex Information Systems, Springer Berlin
Heidelberg, 2005, pp. 189–203. doi:10.1007/11428589\_13.

[38] F. Heylighen, C. Gershenson, S. Staab, G. Flake, D. Pennock, D. Fain,
D. D. Roure, K. Aberer, W.-M. Shen, O. Dousse, P. Thiran, Neu-
rons, viscose ﬂuids,
freshwater polyp hydra-and self-organizing in-
formation systems, IEEE Intelligent Systems 18 (4) (2003) 72–86.
doi:10.1109/mis.2003.1217631.

[39] M. Nowostawski, M. Purvis, A. Gecow, Software self-adaptability
Computational Science
evolution,
ICCS 2004, Springer Berlin Heidelberg, 2004, pp. 552–559.

by means of artiﬁcial
-
doi:10.1007/978-3-540-24688-6\_72.

in:

[40] J. Yang, H. Chen, S. Hariri, M. Parashar, Autonomic run-
time manager for adaptive distributed applications,
in: HPDC-
14. Proceedings. 14th IEEE International Symposium on High Per-
IEEE, 2005, pp. 69–78.
formance Distributed Computing, 2005.,
doi:10.1109/hpdc.2005.1520937.

[41] M. Bennani, D. Menasce, Assessing the robustness of self-managing
computer systems under highly variable workloads, in: International
Conference on Autonomic Computing, 2004. Proceedings., IEEE, 2004,
pp. 62–69. doi:10.1109/icac.2004.1301348.

[42] Z. Kurmas, K. Keeton, Using the distiller to direct the development
of self-conﬁguration software,
International Conference on Au-
in:
tonomic Computing, 2004. Proceedings., IEEE, 2004, pp. 172–179.
doi:10.1109/icac.2004.1301361.

[43] S. White, J. Hanson, I. Whalley, D. Chess, J. Kephart, An architec-
tural approach to autonomic computing, in: International Conference

48

on Autonomic Computing, 2004. Proceedings., IEEE, 2004, pp. 2–9.
doi:10.1109/icac.2004.1301340.

[44] S. Sivasubramanian, G. Pierre, M. van Steen, Autonomic data place-
ment strategies for update-intensiveWeb applications, in: First Inter-
national Workshop on Advanced Architectures and Algorithms for In-
ternet Delivery and Applications (AAA-IDEA'05), IEEE, IEEE, 2005,
pp. 2–9. doi:10.1109/AAA-IDEA.2005.4.

[45] M. Mikic-Rakic, N. Medvidovic, Support for disconnected operation
via architectural self-reconﬁguration, in: International Conference on
Autonomic Computing, 2004. Proceedings., IEEE, 2004, pp. 114–121.
doi:10.1109/icac.2004.1301354.

[46] N. Kandasamy, S. Abdelwahed, G. C. Sharp, J. P. Hayes, An online
control framework for designing self-optimizing computing systems:
Application to power management, in: Self-star Properties in Complex
Information Systems, Springer Berlin Heidelberg, 2005, pp. 174–188.
doi:10.1007/11428589\_12.

[47] M. E. Shin, Self-healing components in robust software architecture for
concurrent and distributed systems, Science of Computer Programming
57 (1) (2005) 27–44. doi:10.1016/j.scico.2004.10.003.

[48] P. Andras, B. G. Charlton, Self-aware software – will it become a real-
ity?, in: Self-star Properties in Complex Information Systems, Springer
Berlin Heidelberg, 2005, pp. 229–259. doi:10.1007/11428589\_16.

[49] Y. Zhao, M. Kardos, S. Oberth¨ur, F. J. Rammig, Comprehensive ver-
in:
iﬁcation framework for dependability of self-optimizing systems,
Automated Technology for Veriﬁcation and Analysis, Springer Berlin
Heidelberg, 2005, pp. 39–53. doi:10.1007/11562948\_6.

[50] T. D. Wolf, G. Samaey, T. Holvoet, D. Roose, Decentralised auto-
nomic computing: Analysing self-organising emergent behaviour us-
ing advanced numerical methods,
in: Second International Confer-
ence on Autonomic Computing (ICAC'05), IEEE, 2005, pp. 52–63.
doi:10.1109/icac.2005.20.

49

[51] J. P. Sousa, V. Poladian, D. Garlan, B. R. Schmerl, Capitalizing on
awareness of user tasks for guiding self-adaptation, in: Advanced In-
formation Systems Engineering (CAiSE) Workshops, FEUP Edi¸c˜oes,
Porto, 2005, pp. 83–96.

[52] J. Wildstrom, P. Stone, E. Witchel, R. Mooney, M. Dahlin, Towards
self-conﬁguring hardware for distributed computer systems, in: Second
International Conference on Autonomic Computing (ICAC'05), IEEE,
2005, pp. 241–249. doi:10.1109/icac.2005.63.

[53] I. Gupta, S. Ko, N. Thompson, M. Nagda, C. Devaraj, R. Morales,
J. A. Patel, A case for design methodology research in self-*
distributed systems,
Self-star Properties in Complex Infor-
mation Systems, Springer Berlin Heidelberg, 2005, pp. 260–272.
doi:10.1007/11428589\_17.

in:

[54] D. Breitgand, E. Henis, O. Shehory, Automated and adaptive threshold
setting: Enabling technology for autonomy and self-management, in:
Second International Conference on Autonomic Computing (ICAC'05),
IEEE, 2005, pp. 204–215. doi:10.1109/icac.2005.11.

[55] P. McKinley, S. Sadjadi, E. Kasten, B. Cheng, Composing adaptive

software, Computer 37 (7) (2004) 56–64. doi:10.1109/mc.2004.48.

[56] N. Bulusu, J. Heidemann, D. Estrin, T. Tran, Self-conﬁguring local-
ization systems, ACM Transactions on Embedded Computing Systems
3 (1) (2004) 24–60. doi:10.1145/972627.972630.

[57] S.-W. Cheng, D. Garlan, B. Schmerl, Architecture-based self-
in: Proceed-
adaptation in the presence of multiple objectives,
ings of the 2006 international workshop on Self-adaptation and
self-managing systems - SEAMS '06, ACM Press, 2006, p. 2–8.
doi:10.1145/1137677.1137679.

[58] H. Meling, An architecture for self-healing autonomous object groups,
in: Lecture Notes in Computer Science, Springer Berlin Heidelberg,
2007, pp. 156–168. doi:10.1007/978-3-540-73547-2\_18.

[59] S. Sicard, F. Boyer, N. D. Palma, Using components for architecture-
based management, in: Proceedings of the 13th international confer-

50

ence on Software engineering - ICSE '08, ACM Press, 2008, p. 101–110.
doi:10.1145/1368088.1368103.

[60] I. Epifani, C. Ghezzi, R. Mirandola, G. Tamburrelli, Model evolu-
tion by run-time parameter adaptation, in: 2009 IEEE 31st Interna-
tional Conference on Software Engineering, IEEE, 2009, pp. 111–121.
doi:10.1109/icse.2009.5070513.

[61] J. Pastrana, E. Pimentel, M. Katrib, Composition of self-adapting com-
ponents for customizable systems, The Computer Journal 51 (4) (2007)
481–496. doi:10.1093/comjnl/bxm094.

[62] N. Bartolini, G. Bongiovanni, S. Silvestri, Self-∗ through self-learning:
Overload control for distributed web systems, Computer Networks
53 (5) (2009) 727–743. doi:10.1016/j.comnet.2008.11.015.

[63] V. Bhat, M. Parashar, H. Liu, M. Khandekar, N. Kandasamy,
S. Abdelwahed, Enabling self-managing applications using model-
in: 2006 IEEE International Con-
based online control strategies,
ference on Autonomic Computing, IEEE, IEEE, 2006, pp. 15–24.
doi:10.1109/icac.2006.1662377.

[64] A. Carzaniga, A. Gorla, M. Pezz`e, Self-healing by means of automatic
workarounds, in: Proceedings of the 2008 international workshop on
Software engineering for adaptive and self-managing systems - SEAMS
'08, ACM Press, 2008, p. 17–24. doi:10.1145/1370018.1370023.

[65] K. M. Chan, J. Bishop, The design of a self-healing composition cycle
for web services, in: 2009 ICSE Workshop on Software Engineering
for Adaptive and Self-Managing Systems, IEEE, 2009, pp. 20 – 27.
doi:10.1109/seams.2009.5069070.

[66] S.-W. Cheng, D. Garlan, B. Schmerl, Evaluating the eﬀectiveness of
the rainbow self-adaptive system, in: 2009 ICSE Workshop on Software
Engineering for Adaptive and Self-Managing Systems, IEEE, 2009, pp.
132–141. doi:10.1109/seams.2009.5069082.

[67] C. E. da Silva, R. de Lemos, Using dynamic workﬂows for coordinat-
ing self-adaptation of software systems, in: 2009 ICSE Workshop on
Software Engineering for Adaptive and Self-Managing Systems, IEEE,
2009, pp. 86–95. doi:10.1109/seams.2009.5069077.

51

[68] H. Ghanbari, M. Litoiu, Identifying implicitly declared self-tuning be-
havior through dynamic analysis, in: ICSE Workshop on Software En-
gineering for Adaptive and Self-Managing Systems (SEAMS), IEEE,
2009, pp. 48–57. doi:10.1109/seams.2009.5069073.

[69] N. H. Kacem, A. H. Kacem, K. Drira, A formal approach
Software
2010, pp. 279–294.

to enforcing consistency in self-adaptive systems,
Architecture,
doi:10.1007/978-3-642-15114-9\_21.

Springer Berlin Heidelberg,

in:

[70] E. Kaddoum, C. Raibulet, J.-P. Georg´e, G. Picard, M.-P. Gleizes,
Criteria for the evaluation of self-* systems, in: Proceedings of the
2010 ICSE Workshop on Software Engineering for Adaptive and
Self-Managing Systems - SEAMS '10, ACM Press, 2010, p. 29–38.
doi:10.1145/1808984.1808988.

[71] J. Philippe, N. D. Palma, F. Boyer, et Olivier Gruber, Self-adaptation
of service level in distributed systems, Software: Practice and Experi-
ence 40 (2010). doi:10.1002/spe.957.

[72] G. Clair, E. Kaddoum, M.-P. Gleizes, G. Picard, Self-regulation in
self-organising multi-agent systems for adaptive and intelligent manu-
facturing control, in: 2008 Second IEEE International Conference on
Self-Adaptive and Self-Organizing Systems, IEEE, 2008, pp. 107–116.
doi:10.1109/saso.2008.19.

[73] F. Nafz, F. Ortmeier, H. Seebach, J.-P. Stegh¨ofer, W. Reif, A universal
self-organization mechanism for role-based organic computing systems,
in: Lecture Notes in Computer Science, Springer Berlin Heidelberg,
2009, pp. 17–31. doi:10.1007/978-3-642-02704-8\_3.

[74] P. Hu, J. Indulska, R. Robinson, An autonomic context management
system for pervasive computing, in: 2008 Sixth Annual IEEE Interna-
tional Conference on Pervasive Computing and Communications (Per-
Com), IEEE, 2008, pp. 213–223. doi:10.1109/percom.2008.56.

[75] R. Calinescu, L. Grunske, M. Kwiatkowska, R. Mirandola, G. Tam-
burrelli, Dynamic QoS management and optimization in service-based
systems, IEEE Transactions on Software Engineering 37 (3) (2011)
387–409. doi:10.1109/tse.2010.92.

52

[76] J. Whittle, P. Sawyer, N. Bencomo, B. H. Cheng, J.-M. Bruel, RE-
LAX: Incorporating uncertainty into the speciﬁcation of self-adaptive
systems, in: 2009 17th IEEE International Requirements Engineering
Conference, IEEE, 2009, pp. 79–88. doi:10.1109/re.2009.36.

[77] P. Sawyer, N. Bencomo,

J. Whittle, E. Letier, A. Finkel-
stein, Requirements-aware systems: A research agenda for RE
2010 18th IEEE International
for
Requirements Engineering Conference,
IEEE, 2010, pp. 95–103.
doi:10.1109/re.2010.21.

self-adaptive

systems,

in:

[78] F. Dalpiaz, P. Giorgini,

for
requirements-driven self-reconﬁguration, in: Notes on Numerical Fluid
Mechanics and Multidisciplinary Design, Springer International Pub-
lishing, 2009, pp. 246–260. doi:10.1007/978-3-642-02144-2\_22.

J. Mylopoulos, An architecture

[79] D. A. Menasce, J. P. Sousa, S. Malek, H. Gomaa, Qos architectural pat-
terns for self-architecting software systems, in: Proceeding of the 7th
international conference on Autonomic computing - ICAC '10, ACM
Press, 2010, p. 195–204. doi:10.1145/1809049.1809084.

[80] A. Elkhodary, N. Esfahani, S. Malek, FUSION, in: Proceedings of
the eighteenth ACM SIGSOFT international symposium on Founda-
tions of software engineering - FSE '10, ACM Press, 2010, pp. 7–16.
doi:10.1145/1882291.1882296.

[81] M. Morandini, L. Penserini, A. Perini, Towards goal-oriented de-
velopment of self-adaptive systems,
in: Proceedings of the 2008
international workshop on Software engineering for adaptive and
self-managing systems - SEAMS '08, ACM Press, 2008, p. 9–16.
doi:10.1145/1370018.1370021.

[82] D. Sykes, W. Heaven, J. Magee, J. Kramer, From goals to components,
in: Proceedings of the 2008 international workshop on Software engi-
neering for adaptive and self-managing systems - SEAMS '08, ACM
Press, 2008, p. 1–8. doi:10.1145/1370018.1370020.

[83] Y. Wang, J. Mylopoulos, Self-repair through reconﬁguration: A re-
quirements engineering approach, in: 2009 IEEE/ACM International

53

Conference on Automated Software Engineering, IEEE, 2009, pp. 257–
268. doi:10.1109/ase.2009.66.

[84] B. Satzger, A. Pietzowski, W. Trumler, T. Ungerer, Using automated
planning for trusted self-organising organic computing systems,
in:
Lecture Notes in Computer Science, Springer Berlin Heidelberg, 2008,
pp. 60–72. doi:10.1007/978-3-540-69295-9\_7.

[85] D. Weyns, S. Malek, J. Andersson, FORMS, in: Proceeding of the 7th
international conference on Autonomic computing - ICAC '10, ACM
Press, 2010, p. 205–214. doi:10.1145/1809049.1809078.

[86] D. Kim, S. Park, Reinforcement

learning-based dynamic adap-
tation planning method for architecture-based self-managed soft-
2009 ICSE Workshop on Software Engineering for
ware,
Adaptive and Self-Managing Systems,
IEEE, 2009, pp. 76–85.
doi:10.1109/seams.2009.5069076.

in:

[87] H. Tajalli, J. Garcia, G. Edwards, N. Medvidovic, PLASMA, in: Pro-
ceedings of the IEEE/ACM international conference on Automated
software engineering - ASE '10, ACM Press, 2010, pp. 467–476.
doi:10.1145/1858996.1859092.

[88] M. Jelasity, O. Babaoglu, R. Laddaga, R. Nagpal, F. Zambonelli,
E. Sirer, H. Chaouchi, M. Smirnov, Interdisciplinary research: Roles
for self-organization, IEEE Intelligent Systems 21 (2) (2006) 50–58.
doi:10.1109/mis.2006.30.

[89] H. Kasinger, B. Bauer, J. Denzinger, The meaning of semiochemicals
to the design of self-organizing systems, in: 2008 Second IEEE In-
ternational Conference on Self-Adaptive and Self-Organizing Systems,
IEEE, 2008, pp. 139–148. doi:10.1109/saso.2008.51.

[90] X. Li, H. Kang, P. Harrington, J. Thomas, Autonomic and trusted
computing paradigms, in: Lecture Notes in Computer Science, Springer
Berlin Heidelberg, 2006, pp. 143–152. doi:10.1007/11839569\_14.

[91] M. Rambold, H. Kasinger, F. Lautenbacher, B. Bauer, Towards Au-
tonomic Service Discovery A Survey and Comparison, IEEE, 2009.
doi:10.1109/scc.2009.59.

54

[92] S. Dustdar, C. Dorn, F. Li, L. Baresi, G. Cabri, C. Pautasso, F. Zam-
bonelli, A roadmap towards sustainable self-aware service systems, in:
Proceedings of the 2010 ICSE Workshop on Software Engineering for
Adaptive and Self-Managing Systems - SEAMS '10, ACM Press, 2010,
pp. 10–19. doi:10.1145/1808984.1808986.

[93] A. Berns, S. Ghosh, Dissecting self-* properties, in: 2009 Third IEEE
International Conference on Self-Adaptive and Self-Organizing Sys-
tems, IEEE, IEEE, 2009, pp. 10–19. doi:10.1109/saso.2009.25.

[94] D. Weyns, S. Malek, J. Andersson, On decentralized self-adaptation,
in: Proceedings of the 2010 ICSE Workshop on Software Engineering
for Adaptive and Self-Managing Systems - SEAMS '10, ACM Press,
2010, p. 84–93. doi:10.1145/1808984.1808994.

[95] X. Vilajosana, J. Marques, A. Juan, D. Lazaro, R. Krishnaswamy,
L. Navarro, A self-* auction server: design principles, architecture and
implementation, International Journal of Autonomic Computing 1 (4)
(2010) 374. doi:10.1504/ijac.2010.037513.

[96] F. Dotsch, J. Denzinger, H. Kasinger, B. Bauer, Decentralized Real-
Time Control of Water Distribution Networks Using Self-Organizing
Multi-agent Systems, IEEE, 2010. doi:10.1109/saso.2010.20.

[97] J. Camara, C. Canal, G. Salaun, Behavioural self-adaptation of services
in ubiquitous computing environments, in: 2009 ICSE Workshop on
Software Engineering for Adaptive and Self-Managing Systems, IEEE,
2009, pp. 28–37. doi:10.1109/seams.2009.5069071.

[98] L. Baresi, S. Guinea, G. Tamburrelli, Towards decentralized self-
adaptive component-based systems, in: Proceedings of the 2008 in-
ternational workshop on Software engineering for adaptive and self-
managing systems - SEAMS '08, ACM Press, 2008, pp. 57–64.
doi:10.1145/1370018.1370029.

[99] I. Dusparic, V. Cahill, Distributed w-learning: Multi-policy optimiza-
tion in self-organizing systems, in: 2009 Third IEEE International Con-
ference on Self-Adaptive and Self-Organizing Systems, IEEE, 2009, pp.
20–29. doi:10.1109/saso.2009.23.

55

[100] I. Dusparic, V. Cahill, Using reinforcement learning for multi-policy
optimization in decentralized autonomic systems – an experimental
evaluation, in: Lecture Notes in Computer Science, Springer Berlin
Heidelberg, 2009, pp. 105–119. doi:10.1007/978-3-642-02704-8\_9.

[101] N. Honing, H. L. Poutre, Designing comprehensible self-organising
systems,
in: 2010 Fourth IEEE International Conference on Self-
Adaptive and Self-Organizing Systems, IEEE, 2010, pp. 233–242.
doi:10.1109/saso.2010.18.

[102] J. Zhang, B. H. C. Cheng, Model-based development of dynam-
in: Proceedings of the 28th interna-
ically adaptive software,
tional conference on Software engineering, ACM, 2006, pp. 371–380.
doi:10.1145/1134285.1134337.

[103] D. Sykes, W. Heaven, J. Magee, J. Kramer, Plan-directed architec-
tural change for autonomous systems,
in: Proceedings of the 2007
conference on Speciﬁcation and veriﬁcation of component-based sys-
tems 6th Joint Meeting of the European Conference on Software En-
gineering and the ACM SIGSOFT Symposium on the Foundations of
Software Engineering - SAVCBS '07, ACM Press, 2007, pp. 15–21.
doi:10.1145/1292316.1292318.

[104] R. Anthony, A policy-deﬁnition language and prototype implementa-
tion library for policy-based autonomic systems, in: 2006 IEEE Inter-
national Conference on Autonomic Computing, IEEE, 2006, pp. 265–
276. doi:10.1109/icac.2006.1662407.

[105] C. Gacek, H. Giese, E. Hadar, Friends or foes?, in: Proceedings of the
2008 international workshop on Software engineering for adaptive and
self-managing systems - SEAMS '08, ACM Press, 2008, pp. 121–128.
doi:10.1145/1370018.1370040.

[106] R. J. Anthony, Policy-based autonomic computing with integral sup-
port for self-stabilisation, International Journal of Autonomic Comput-
ing 1 (1) (2009) 1. doi:10.1504/ijac.2009.024497.

[107] A. Bernauer, O. Bringmann, W. Rosenstiel, Generic self-adaptation
to reduce design eﬀort for system-on-chip, in: 2009 Third IEEE In-
ternational Conference on Self-Adaptive and Self-Organizing Systems,
IEEE, 2009, pp. 126–135. doi:10.1109/saso.2009.41.

56

[108] Y. Brun, Improving impact of self-adaptation and self-management
research through evaluation methodology,
in: Proceedings of the
2010 ICSE Workshop on Software Engineering for Adaptive and
Self-Managing Systems - SEAMS '10, ACM Press, 2010, pp. 1–9.
doi:10.1145/1808984.1808985.

[109] B. Solomon, D. Ionescu, M. Litoiu, G. Iszlai, Autonomic comput-
in: Proceedings of the 2010
ing control of composed web services,
ICSE Workshop on Software Engineering for Adaptive and Self-
Managing Systems - SEAMS '10, ACM Press, 2010, pp. 94–103.
doi:10.1145/1808984.1808995.

[110] G. Weiss, M. Zeller, D. Eilers, R. Knorr, Towards self-organization
Lecture Notes in Com-
2009, pp. 32–46.

in automotive embedded systems,
puter Science,
doi:10.1007/978-3-642-02704-8\_4.

Springer Berlin Heidelberg,

in:

[111] S. Dolev, R. Yagel, Towards

self-stabilizing operating systems,
IEEE Transactions on Software Engineering 34 (4) (2008) 564–576.
doi:10.1109/tse.2008.46.

[112] H. Hemmati, R. Jalili, Self-reconﬁguration in highly available per-
in: Lecture Notes in Computer Sci-
vasive computing systems,
ence, Vol. 5060, Springer Berlin Heidelberg, 2008, pp. 289–301.
doi:10.1007/978-3-540-69295-9\_24.

[113] D. Lorenzoli, L. Mariani, M. Pezze, Towards self-protecting en-
terprise applications,
in: The 18th IEEE International Sympo-
sium on Software Reliability (ISSRE '07), IEEE, 2007, pp. 39–48.
doi:10.1109/issre.2007.21.

[114] H. Seebach, F. Nafz, J. Holtmann, J. Meyer, M. Tichy, W. Reif,
W. Sch¨afer, Designing self-healing in automotive systems, in: Lecture
Notes in Computer Science, Springer Berlin Heidelberg, 2010, pp. 47–
61. doi:10.1007/978-3-642-16576-4\_4.

[115] J. Almeida, V. Almeida, D. Ardagna, C. Francalanci, M. Trubian, Re-
source management in the autonomic service-oriented architecture, in:
2006 IEEE International Conference on Autonomic Computing, IEEE,
2006, pp. 84–92. doi:10.1109/icac.2006.1662385.

57

[116] J. Andersson, R. de Lemos, S. Malek, D. Weyns, Reﬂecting on self-
adaptive software systems, in: 2009 ICSE Workshop on Software En-
gineering for Adaptive and Self-Managing Systems, IEEE, 2009, pp.
38–47. doi:10.1109/seams.2009.5069072.

[117] J. B. van Veelen, SMDS (2006) 58–64doi:10.1145/1137677.1137689.

self-adaptive
[118] H. Klus, A. Rausch, A general architecture for
AmI components applied in speech recognition,
in: Proceedings
of the 2006 international workshop on Self-adaptation and self-
managing systems - SEAMS '06, ACM Press, 2006, p. 72–78.
doi:10.1145/1137677.1137692.

[119] S. Malek, N. Esfahani, D. A. Menasce, J. P. Sousa, H. Gomaa,
Self-architecting software SYstems (SASSY) from QoS-annotated
2009 ICSE Workshop on Principles of
activity models,
in:
Engineering Service Oriented Systems,
IEEE, 2009, pp. 62–69.
doi:10.1109/pesos.2009.5068821.

[120] C. Ballagny, N. Hameurlain, F. Barbier, MOCAS: A state-based com-
ponent model for self-adaptation, in: 2009 Third IEEE International
Conference on Self-Adaptive and Self-Organizing Systems, IEEE, 2009,
pp. 206–215. doi:10.1109/saso.2009.11.

[121] S. RODRIGUEZ, V. HILAIRE, P. GRUER, A. KOUKAM,
A FORMAL HOLONIC FRAMEWORK WITH PROVED
SELF-ORGANIZING
Jour-
CAPABILITIES,
nal of Cooperative Information Systems 16 (01)
(2007) 7–25.
doi:10.1142/s0218843007001548.

International

[122] L. Bauer, M. Shaﬁque, D. Teufel, J. Henkel, A self-adaptive exten-
sible embedded processor, in: First International Conference on Self-
Adaptive and Self-Organizing Systems (SASO 2007), IEEE, 2007, pp.
344–350. doi:10.1109/saso.2007.2.

[123] T. Tidwell, R. Glaubius, C. Gill, W. D. Smart, Scheduling for re-
in: Lecture Notes in Com-
liable execution in autonomic systems,
puter Science, Springer, Springer Berlin Heidelberg, 2008, pp. 149–161.
doi:10.1007/978-3-540-69295-9\_14.

58

[124] G. Smith, J. W. Sanders, Formal development of self-organising sys-
tems, in: Lecture Notes in Computer Science, Springer Berlin Heidel-
berg, 2009, pp. 90–104. doi:10.1007/978-3-642-02704-8\_8.

[125] C. Barna, M. Litoiu, H. Ghanbari, Autonomic load-testing frame-
work, in: Proceedings of the 8th ACM international conference on
Autonomic computing - ICAC '11, ACM Press, 2011, p. 91–100.
doi:10.1145/1998582.1998598.

[126] C. E. da Silva, R. de Lemos, Dynamic plans for integration testing
of self-adaptive software systems,
in: Proceeding of the 6th inter-
national symposium on Software engineering for adaptive and self-
managing systems - SEAMS '11, ACM Press, 2011, pp. 148–157.
doi:10.1145/1988008.1988029.

[127] J. Camara, R. de Lemos, Evaluation of

in self-
adaptive systems using probabilistic model-checking,
in: 2012 7th
International Symposium on Software Engineering for Adaptive
IEEE, 2012, pp. 53–62.
and Self-Managing Systems
doi:10.1109/seams.2012.6224391.

(SEAMS),

resilience

[128] G. A. Moreno, J. C´amara, D. Garlan, B. Schmerl, Proactive
a probabilistic model check-
self-adaptation under uncertainty:
ing approach,
in: Proceedings of the 2015 10th Joint Meeting
on Foundations of Software Engineering, ACM, 2015, p. 1–12.
doi:10.1145/2786805.2786853.

[129] J. C´amara, G. A. Moreno, D. Garlan, Stochastic game analysis and
latency awareness for proactive self-adaptation,
in: Proceedings of
the 9th International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems - SEAMS 2014, ACM Press, 2014, p.
155–164. doi:10.1145/2593929.2593933.

[130] M. Luckey, C. Thanos, C. Gerth, G. Engels, Multi-staged quality as-
surance for self-adaptive systems, in: 2012 IEEE Sixth International
Conference on Self-Adaptive and Self-Organizing Systems Workshops,
IEEE, 2012, pp. 111–118. doi:10.1109/sasow.2012.28.

[131] J. C´amara, R. de Lemos, M. Vieira, R. Almeida, R. Ventura,
Architecture-based resilience evaluation for self-adaptive systems,
Computing 95 (8) (2013) 689–722. doi:10.1007/s00607-013-0311-7.

59

[132] T. Patikirikorala, A. Colman, J. Han, L. Wang, A multi-model frame-
work to implement self-managing control systems for QoS management,
in: Proceeding of the 6th international symposium on Software engi-
neering for adaptive and self-managing systems - SEAMS '11, ACM
Press, 2011, pp. 218–227. doi:10.1145/1988008.1988040.

[133] G. Lulli, P. Potena, C. Raibulet, Resource allocation,

trading
in: Progress in Pat-
and adaptation in self-managing systems,
tern Recognition, Image Analysis, Computer Vision, and Applica-
tions, Vol. 83, Springer International Publishing, 2011, pp. 385–396.
doi:10.1007/978-3-642-22056-2\_41.

[134] G. Tamura, N. M. Villegas, H. A. Muller, L. Duchien, L. Seinturier,
Improving context-awareness in self-adaptation using the DYNAMICO
reference model, in: 2013 8th International Symposium on Software
Engineering for Adaptive and Self-Managing Systems (SEAMS), IEEE,
2013, pp. 153–162. doi:10.1109/seams.2013.6595502.

[135] L. Rosa, L. Rodrigues, A. Lopes, M. Hiltunen, R. Schlicht-
ing, Self-management of adaptable component-based applications,
IEEE Transactions on Software Engineering 39 (3) (2013) 403–421.
doi:10.1109/tse.2012.29.

[136] J. Swanson, M. B. Cohen, M. B. Dwyer, B. J. Garvin, J. Firestone,
Beyond the rainbow: self-adaptive failure avoidance in conﬁgurable
systems, in: Proceedings of the 22nd ACM SIGSOFT International
Symposium on Foundations of Software Engineering, ACM, 2014, p.
377–388. doi:10.1145/2635868.2635915.

[137] G. G. Pascual, M. Pinto, L. Fuentes, Self-adaptation of mo-
language,
bile
the
Future Generation Computer
127–144.
doi:10.1016/j.future.2014.08.015.

variability
(2015)
47

common
Systems

systems

driven

by

[138] F. Alvares, E. Rutten, L. Seinturier, Behavioural model-based con-
trol for autonomic software components,
in: 2015 IEEE Interna-
tional Conference on Autonomic Computing, IEEE, 2015, pp. 187–196.
doi:10.1109/icac.2015.31.

60

[139] Z. Coker, D. Garlan, C. L. Goues, SASS: Self-adaptation using stochas-
tic search,
in: 2015 IEEE/ACM 10th International Symposium on
Software Engineering for Adaptive and Self-Managing Systems, IEEE,
2015, pp. 168–174. doi:10.1109/seams.2015.16.

[140] G. Salvaneschi, C. Ghezzi, M. Pradella, ContextErlang:

A
applica-
Science of Computer Programming 102 (2015) 20–43.

language
tions,
doi:10.1016/j.scico.2014.11.016.

context-aware

self-adaptive

distributed

for

[141] P. Casanova, D. Garlan, B. Schmerl, R. Abreu, Diagnosing unob-
served components in self-adaptive systems, in: Proceedings of the 9th
International Symposium on Software Engineering for Adaptive and
Self-Managing Systems - SEAMS 2014, ACM Press, 2014, p. 75–84.
doi:10.1145/2593929.2593946.

[142] B. Chen, X. Peng, Y. Yu, B. Nuseibeh, W. Zhao, Self-adaptation
through incremental generative model transformations at runtime, in:
Proceedings of the 36th International Conference on Software Engi-
neering, ACM, 2014, p. 676–687. doi:10.1145/2568225.2568310.

[143] H. Nakagawa, A. Ohsuga, S. Honiden, gocc, in: Proceeding of the
6th international symposium on Software engineering for adaptive and
self-managing systems - SEAMS '11, ACM Press, 2011, pp. 40–49.
doi:10.1145/1988008.1988015.

[144] D. Weyns, S. Malek, J. Andersson, FORMS, ACM Transac-
tions on Autonomous and Adaptive Systems. 7 (1) (2012) 1–61.
doi:10.1145/2168260.2168268.

[145] E. M. Fredericks, B. DeVries, B. H. C. Cheng, Towards run-
test cases
in the
time adaptation of
face of uncertainty,
International Symposium on Software Engi-
neering for Adaptive and Self-Managing Systems (SEAMS) (2014).
doi:10.1145/2593929.2593937.

for self-adaptive systems

[146] H. Nakagawa, A. Ohsuga, S. Honiden, Towards dynamic evolu-
tion of self-adaptive systems based on dynamic updating of con-
in: 2012 IEEE Sixth International Conference on Self-
trol loops,
Adaptive and Self-Organizing Systems,
IEEE, 2012, pp. 59–68.
doi:10.1109/saso.2012.17.

61

Iftikhar, D. Weyns, ActivFORMS: active formal mod-
[147] M. U.
els
the 9th Interna-
self-adaptation,
for
tional Symposium on Software Engineering for Adaptive and Self-
Managing Systems - SEAMS 2014, ACM Press, 2014, p. 125–134.
doi:10.1145/2593929.2593944.

Proceedings of

in:

[148] J. F. Ingl´es-Romero, C. Vicente-Chicote, Towards a formal approach
for prototyping and verifying self-adaptive systems, in: Lecture Notes
in Business Information Processing, Vol. 148, Springer Berlin Heidel-
berg, 2013, pp. 432–446. doi:10.1007/978-3-642-38490-5\_39.

[149] W. Yang, C. Xu, Y. Liu, C. Cao, X. Ma, J. Lu, Verifying self-
adaptive applications suﬀering uncertainty, in: Proceedings of the 29th
ACM/IEEE international conference on Automated software engineer-
ing, ACM, 2014, p. 199–210. doi:10.1145/2642937.2642999.

[150] N. Rosemann, W. Brockmann, C. Lintze, Controlling the learning dy-
namics of interacting self-adapting systems, in: 2011 IEEE Fifth In-
ternational Conference on Self-Adaptive and Self-Organizing Systems,
IEEE, 2011, pp. 1–10. doi:10.1109/saso.2011.11.

[151] L. Baresi, L. Pasquale, P. Spoletini, Fuzzy goals for requirements-driven
adaptation, in: 2010 18th IEEE International Requirements Engineer-
ing Conference, IEEE, 2010, pp. 125–134. doi:10.1109/re.2010.25.

[152] D. Sykes, D. Corapi, J. Magee, J. Kramer, A. Russo, K. Inoue, Learning
revised models for planning in adaptive systems, in: 2013 35th Inter-
national Conference on Software Engineering (ICSE), IEEE, 2013, pp.
63–71. doi:10.1109/icse.2013.6606552.

[153] S. Balasubramanian, R. Desmarais, H. A. M¨uller, U. Stege,
S. Venkatesh, Characterizing problems for realizing policies in self-
adaptive and self-managing systems,
in: Proceeding of the 6th in-
ternational symposium on Software engineering for adaptive and
self-managing systems - SEAMS '11, ACM Press, 2011, pp. 70–79.
doi:10.1145/1988008.1988019.

[154] L. Tom´as, A. C. Caminero, C. Carri´on, B. Caminero, Network-
aware meta-scheduling in advance with autonomous self-tuning sys-
tem, Future Generation Computer Systems 27 (5) (2011) 486–497.
doi:10.1016/j.future.2010.12.004.

62

[155] K. Bartos, M. Rehak, Self-organized mechanism for distributed
setup of multiple heterogeneous intrusion detection systems,
in:
2012 IEEE Sixth International Conference on Self-Adaptive and
pp. 31–38.
Self-Organizing Systems Workshops,
doi:10.1109/sasow.2012.15.

IEEE,

2012,

[156] E. M. Fredericks, B. H. C. Cheng, Automated generation of adap-
2015 IEEE/ACM
tive test plans for self-adaptive systems,
10th International Symposium on Software Engineering for Adap-
tive
pp. 157–167.
doi:10.1109/seams.2015.15.

and Self-Managing Systems,

IEEE, 2015,

in:

[157] E. M. Fredericks, B. H. Cheng, An empirical analysis of providing
assurance for self-adaptive systems at diﬀerent levels of abstraction
in: 2015 IEEE/ACM 8th International
in the face of uncertainty,
Workshop on Search-Based Software Testing, IEEE, 2015, pp. 8–14.
doi:10.1109/sbst.2015.9.

[158] A. Martin, T. Smaneoto, T. Dietze, A. Brito, C. Fetzer, User-
constraint and self-adaptive fault tolerance for event stream process-
ing systems, in: 2015 45th Annual IEEE/IFIP International Confer-
ence on Dependable Systems and Networks, IEEE, 2015, pp. 462–473.
doi:10.1109/dsn.2015.56.

[159] J. Camara, P. Correia, R. de Lemos, D. Garlan, P. Gomes,
soft-
B. Schmerl, R. Ventura, Evolving an adaptive industrial
ware system to use architecture-based self-adaptation,
2013
in:
8th International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems (SEAMS), IEEE, 2013, pp. 13–22.
doi:10.1109/seams.2013.6595488.

[160] B. Debbabi, A. Diaconescu, P. Lalanda, Controlling self-organising
software applications with archetypes, in: 2012 IEEE Sixth Interna-
tional Conference on Self-Adaptive and Self-Organizing Systems, IEEE,
2012, pp. 69–78. doi:10.1109/saso.2012.21.

[161] S. Junuzovic, P. Dewan, Towards self-optimizing collaborative systems,
in: Proceedings of the ACM 2012 conference on Computer Supported
Cooperative Work - CSCW '12, ACM Press, 2012, pp. 1421–1430.
doi:10.1145/2145204.2145414.

63

[162] E. D. Nitto, D. J. Dubois, A. Margara, Reconﬁguration primitives
for self-adapting overlays in distributed publish-subscribe systems, in:
2012 IEEE Sixth International Conference on Self-Adaptive and Self-
Organizing Systems, IEEE, 2012. doi:10.1109/saso.2012.27.

[163] Y. Maurel, S. Chollet, V. Lestideau, J. Bardin, P. Lalanda, A. Bot-
taro, fANFARE: Autonomic framework for service-based pervasive en-
vironment, in: 2012 IEEE Ninth International Conference on Services
Computing, IEEE, 2012, pp. 65–72. doi:10.1109/scc.2012.7.

[164] P. Lalanda, C. Escoﬃer, C. Hamon, Cilia: An autonomic service bus
for pervasive environments (2014) 488–495doi:10.1109/scc.2014.71.

[165] R. W. Moore, B. R. Childers, Inﬂation and deﬂation of self-adaptive
applications, in: Proceeding of the 6th international symposium on
Software engineering for adaptive and self-managing systems - SEAMS
'11, ACM Press, 2011, pp. 228–237. doi:10.1145/1988008.1988041.

[166] E. Yuan, N. Esfahani, S. Malek, Automated mining of software com-
ponent interactions for self-adaptation,
in: Proceedings of the 9th
International Symposium on Software Engineering for Adaptive and
Self-Managing Systems - SEAMS 2014, ACM Press, 2014, p. 27–36.
doi:10.1145/2593929.2593934.

[167] U. Adeel, S. Yang, J. A. McCann, Self-optimizing citizen-centric mo-
bile urban sensing systems, in: International Conference on Autonomic
Computing (ICAC), USENIX Association, 2014, pp. 161–167.

[168] J. Hudson, J. Denzinger, Risk management for self-adapting self-
organizing emergent multi-agent systems performing dynamic task ful-
ﬁllment, Autonomous Agents and Multi-Agent Systems 29 (5) (2014)
973–1022. doi:10.1007/s10458-014-9274-0.

[169] J. Hudson, J. Denzinger, H. Kasinger, B. Bauer, Dependable
risk-aware eﬃciency improvement for self-organizing emergent sys-
2011 IEEE Fifth International Conference on Self-
tems,
Adaptive and Self-Organizing Systems,
IEEE, 2011, pp. 11–20.
doi:10.1109/saso.2011.12.

in:

[170] T. M. King, A. A. Allen, R. Cruz, P. J. Clarke, Safe runtime vali-
dation of behavioral adaptations in autonomic software, in: Lecture

64

Notes in Computer Science, Springer Berlin Heidelberg, 2011, pp. 31–
46. doi:10.1007/978-3-642-23496-5\_3.

[171] S. S. Andrade, R. J. de A. Macedo, A search-based approach for
feedback control concerns in self-adaptive
2013 IEEE 7th International Conference on Self-
IEEE, 2013, pp. 61–70.

architectural design of
systems,
in:
Adaptive and Self-Organizing Systems,
doi:10.1109/saso.2013.42.

[172] P. Idziak, S. Clarke, An analysis of decision-making techniques in
dynamic, self-adaptive systems, in: 2014 IEEE Eighth International
Conference on Self-Adaptive and Self-Organizing Systems Workshops,
IEEE, 2014, pp. 137–143. doi:10.1109/sasow.2014.23.

[173] N. Bencomo, A. Belaggoun, V. Issarny, Dynamic decision networks
for decision-making in self-adaptive systems: A case study, in: 2013
8th International Symposium on Software Engineering for Adaptive
and Self-Managing Systems (SEAMS), IEEE, IEEE, 2013, pp. 113–
122. doi:10.1109/seams.2013.6595498.

[174] H. Gomaa, K. Hashimoto, Dynamic

self-adaptation for dis-
tributed service-oriented transactions,
2012 7th Interna-
tional Symposium on Software Engineering for Adaptive and
Self-Managing
11–20.
doi:10.1109/seams.2012.6224386.

(SEAMS),

Systems

IEEE,

2012,

pp.

in:

[175] N. R. Herbst, S. Kounev, A. Weber, H. Groenda, BUNGEE: An elas-
ticity benchmark for self-adaptive IaaS cloud environments, in: 2015
IEEE/ACM 10th International Symposium on Software Engineering
for Adaptive and Self-Managing Systems, IEEE, 2015, pp. 46–56.
doi:10.1109/seams.2015.23.

[176] T. Patikirikorala, A. Colman, J. Han, L. Wang, A systematic survey on
the design of self-adaptive software systems using control engineering
approaches, in: 2012 7th International Symposium on Software En-
gineering for Adaptive and Self-Managing Systems (SEAMS), IEEE,
2012, pp. 33–42. doi:10.1109/seams.2012.6224389.

[177] N. Khakpour, S. Jalili, C. Talcott, M. Sirjani, M. Mousavi, Formal
modeling of evolving self-adaptive systems, Science of Computer Pro-
gramming 78 (1) (2012) 3–26. doi:10.1016/j.scico.2011.09.004.

65

[178] E. Vassev, M. Hinchey, The ASSL approach to specifying self-managing
embedded systems, Concurrency and Computation: Practice and Ex-
perience 24 (16) (2011) 1860–1878. doi:10.1002/cpe.1758.

[179] S. van der Burg, E. Dolstra, A self-adaptive deployment frame-
work for service-oriented systems,
in: Proceeding of the 6th inter-
national symposium on Software engineering for adaptive and self-
managing systems - SEAMS '11, ACM Press, 2011, pp. 208–217.
doi:10.1145/1988008.1988039.

[180] Y. Maurel, P. Lalanda, A. Diaconescu, Towards a service-oriented com-
in: 2011 IEEE Interna-
ponent model for autonomic management,
tional Conference on Services Computing, IEEE, 2011, pp. 544–551.
doi:10.1109/scc.2011.36.

[181] M. Viroli, On competitive

ser-
vices, Science of Computer Programming 78 (5) (2013) 556–568.
doi:10.1016/j.scico.2012.10.002.

self-composition in pervasive

[182] A. Filieri, C. Ghezzi, G. Tamburrelli, Run-time eﬃcient prob-
abilistic model checking,
in: Proceedings of the 33rd Interna-
tional Conference on Software Engineering, ACM, 2011, p. 341–350.
doi:10.1145/1985793.1985840.

[183] S.-W. Cheng, D. Garlan, Stitch: A language for architecture-based self-
adaptation, Journal of Systems and Software 85 (12) (2012) 2860–2875.
doi:10.1016/j.jss.2012.02.060.

[184] C. Ghezzi, L. S. Pinto, P. Spoletini, G. Tamburrelli, Managing non-
functional uncertainty via model-driven adaptivity, in: 2013 35th In-
ternational Conference on Software Engineering (ICSE), IEEE, 2013,
pp. 33–42. doi:10.1109/icse.2013.6606549.

[185] J. Floch, C. Fr`a, R. Fricke, K. Geihs, M. Wagner, J. Lorenzo, E. So-
ladana, S. Mehlhase, N. Paspallis, H. Rahnama, P. Ruiz, U. Scholz,
Playing MUSIC - building context-aware and self-adaptive mobile ap-
plications, Software: Practice and Experience 43 (3) (2012) 359–388.
doi:10.1002/spe.2116.

66

[186] A. Filieri, C. Ghezzi, G. Tamburrelli, A formal approach to
continuous assurance of non-functional require-
(2012) 163–186.

adaptive software:
ments, Formal Aspects of Computing 24 (2)
doi:10.1007/s00165-011-0207-2.

[187] N. A. Qureshi,

I. J. Jureta, A. Perini, Requirements engineer-
ing for self-adaptive systems: Core ontology and problem state-
in: Notes on Numerical Fluid Mechanics and Multidisci-
ment,
plinary Design, Springer International Publishing, 2011, pp. 33–47.
doi:10.1007/978-3-642-21640-4\_5.

[188] X. Peng, B. Chen, Y. Yu, W. Zhao, Self-tuning of software systems
through dynamic quality tradeoﬀ and value-based feedback control
loop, Journal of Systems and Software 85 (12) (2012) 2707–2719.
doi:10.1016/j.jss.2012.04.079.

[189] J. Bonnet, M.-P. Gleizes, E. Kaddoum, S. Rainjonneau, G. Flandin,
Multi-satellite mission planning using a self-adaptive multi-agent
2015 IEEE 9th International Conference on Self-
system,
Adaptive and Self-Organizing Systems,
IEEE, 2015, pp. 11–20.
doi:10.1109/saso.2015.9.

in:

[190] A. Campbell, C. Riggs, A. S. Wu, On the impact of variation on self-
organizing systems, in: 2011 IEEE Fifth International Conference on
Self-Adaptive and Self-Organizing Systems, IEEE, 2011, pp. 119–128.
doi:10.1109/saso.2011.23.

[191] ´E. Piel, A. Gonzalez-Sanchez, H.-G. Gross, A. J. van Gemund,
sys-
2011 IEEE Fifth International Conference on Self-
IEEE, 2011, pp. 99–108.

Spectrum-based
in:
tems,
Adaptive and Self-Organizing Systems,
doi:10.1109/saso.2011.21.

health monitoring

self-adaptive

for

[192] Y. Dai, Y. Xiang, Y. Li, L. Xing, G. Zhang, Consequence oriented
self-healing and autonomous diagnosis for highly reliable systems and
software, IEEE Transactions on Reliability 60 (2) (2011) 369–380.
doi:10.1109/tr.2011.2136490.

[193] N. M. Villegas, H. A. M¨uller, G. Tamura, L. Duchien, R. Casallas, A
framework for evaluating quality-driven self-adaptive software systems,

67

in: Proceeding of the 6th international symposium on Software engi-
neering for adaptive and self-managing systems - SEAMS '11, ACM
Press, 2011, pp. 80–89. doi:10.1145/1988008.1988020.

[194] N. Esfahani, E. Kouroshfar, S. Malek, Taming uncertainty in self-
adaptive software, in: Proceedings of the 19th ACM SIGSOFT sym-
posium and the 13th European conference on Foundations of soft-
ware engineering - SIGSOFT/FSE '11, ACM Press, 2011, p. 234–244.
doi:10.1145/2025113.2025147.

[195] S. Hassan, N. Bencomo, R. Bahsoon, Minimizing nasty surprises with
in: 2015
better informed decision-making in self-adaptive systems,
IEEE/ACM 10th International Symposium on Software Engineering
for Adaptive and Self-Managing Systems, IEEE, 2015, pp. 134–145.
doi:10.1109/seams.2015.13.

[196] T. Vogel, H. Giese, A language for

in self-
adaptive systems: Executable runtime megamodels,
in: 2012 7th
International Symposium on Software Engineering for Adaptive
and Self-Managing Systems (SEAMS), IEEE, 2012, pp. 129–138.
doi:10.1109/seams.2012.6224399.

feedback loops

[197] T. Patikirikorala, A. Colman, J. Han, L. Wang, An evaluation of multi-
model self-managing control schemes for adaptive performance man-
agement of software systems, Journal of Systems and Software 85 (12)
(2012) 2678–2696. doi:10.1016/j.jss.2012.05.077.

[198] A.-E. Tchao, M. Risoldi, G. D. M. Serugendo, Modeling self-* systems
using chemically-inspired composable patterns, in: 2011 IEEE Fifth In-
ternational Conference on Self-Adaptive and Self-Organizing Systems,
IEEE, 2011, pp. 109–118. doi:10.1109/saso.2011.22.

[199] P. Champrasert, J. Suzuki, C. Lee, Exploring self-optimization and self-
stabilization properties in bio-inspired autonomic cloud applications,
Concurrency and Computation: Practice and Experience 24 (9) (2012)
1015–1034. doi:10.1002/cpe.1906.

[200] A. Filieri, H. Hoﬀmann, M. Maggio, Automated multi-objective control
for self-adaptive software design, in: Proceedings of the 2015 10th Joint

68

Meeting on Foundations of Software Engineering, ACM, 2015, p. 13–24.
doi:10.1145/2786805.2786833.

[201] M. Salehie, L. Tahvildari, Towards a goal-driven approach to action
selection in self-adaptive software, Software: Practice and Experience
42 (2) (2011) 211–233. doi:10.1002/spe.1066.

[202] M. Luckey, G. Engels, High-quality speciﬁcation of self-adaptive soft-
ware systems, in: 2013 8th International Symposium on Software En-
gineering for Adaptive and Self-Managing Systems (SEAMS), IEEE,
2013, pp. 143–152. doi:10.1109/seams.2013.6595501.

[203] C. Heinzemann, J. Rieke, W. Schafer, Simulating self-adaptive
component-based systems using MATLAB/simulink, in: 2013 IEEE
7th International Conference on Self-Adaptive and Self-Organizing Sys-
tems, IEEE, 2013, pp. 71–80. doi:10.1109/saso.2013.17.

[204] P. Grosselﬁnger,

J. Denzinger, B. Bauer, An advisor

con-
cept for distributed self-organizing systems acting in highly con-
nected environments,
International Conference on Self-Adaptive
and Self-Organizing Systems (SASO), IEEE, 2013, pp. 121–130.
doi:10.1109/saso.2013.15.

in:

[205] D. Weyns, M. U. Iftikhar, J. Soderlund, Do external feedback loops
improve the design of self-adaptive systems? a controlled experiment,
in: 2013 8th International Symposium on Software Engineering for
Adaptive and Self-Managing Systems (SEAMS), IEEE, 2013, pp. 3–
12. doi:10.1109/seams.2013.6595487.

[206] T. Weis, A. Wacker, Self-stabilizing embedded systems, in: Proceedings
of the 2011 workshop on Organic computing - OC '11, ACM Press,
2011, pp. 59–66. doi:10.1145/1998642.1998653.

[207] A. Filieri, H. Hoﬀmann, M. Maggio, Automated design of self-adaptive
software with control-theoretical formal guarantees, in: Proceedings
of the 36th International Conference on Software Engineering, ACM,
2014, p. 299–310. doi:10.1145/2568225.2568272.

[208] W.-C. Huang, W. J. Knottenbelt, Self-adaptive containers: Build-
ing resource-eﬃcient applications with low programmer overhead, in:

69

2013 8th International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems (SEAMS), IEEE, 2013, pp. 123–132.
doi:10.1109/seams.2013.6595499.

[209] J. Camara, G. A. Moreno, D. Garlan, Reasoning about human
participation in self-adaptive systems,
International Symposium
on Software Engineering for Adaptive and Self-Managing Systems
(SEAMS), Defense Technical Information Center, 2015, pp. 146–156.
doi:10.21236/ada614218.

in:

[210] M. U. Iftikhar, G. S. Ramachandran, P. Bollansee, D. Weyns,
D. Hughes, DeltaIoT: A self-adaptive internet of things exemplar, in:
2017 IEEE/ACM 12th International Symposium on Software Engineer-
ing for Adaptive and Self-Managing Systems (SEAMS), IEEE, 2017,
pp. 76–82. doi:10.1109/seams.2017.21.

[211] M. Provoost, D. Weyns, DingNet: A self-adaptive internet-of-things
exemplar, in: 2019 IEEE/ACM 14th International Symposium on Soft-
ware Engineering for Adaptive and Self-Managing Systems (SEAMS),
IEEE, 2019, pp. 195–201. doi:10.1109/seams.2019.00033.

[212] E. Zavala, X. Franch, J. Marco, C. Berger, HAFLoop: An architec-
ture for supporting highly adaptive feedback loops in self-adaptive
systems, Future Generation Computer Systems 105 (2020) 607–630.
doi:10.1016/j.future.2019.12.026.

[213] E. Pournaras, M. Yao, D. Helbing, Self-regulating supply–demand
systems, Future Generation Computer Systems 76 (2017) 73–91.
doi:10.1016/j.future.2017.05.018.

[214] M. WeiBbach, P. Chrszon, T. Springer, A. Schill, Decentrally co-
ordinated execution of adaptations in distributed self-adaptive soft-
ware systems, in: 2017 IEEE 11th International Conference on Self-
Adaptive and Self-Organizing Systems (SASO), IEEE, 2017, pp. 111–
120. doi:10.1109/saso.2017.20.

[215] L. Birdsey, C. Szabo, K. Falkner, Identifying self-organization and
adaptability in complex adaptive systems,
in: 2017 IEEE 11th In-
ternational Conference on Self-Adaptive and Self-Organizing Systems
(SASO), IEEE, 2017, pp. 131–140. doi:10.1109/saso.2017.22.

70

[216] D. Arellanes, K.-K. Lau, Workﬂow variability for autonomic IoT sys-
tems, in: 2019 IEEE International Conference on Autonomic Comput-
ing (ICAC), IEEE, 2019, pp. 24–30. doi:10.1109/icac.2019.00014.

[217] W. Jiao, Y. Sun, Self-adaptation of multi-agent systems in dynamic
environments based on experience exchanges, Journal of Systems and
Software 122 (2016) 165–179. doi:10.1016/j.jss.2016.09.025.

[218] J. Beal, M. Viroli, D. Pianini, F. Damiani, Self-adaptation to device dis-
tribution in the internet of things, ACM Transactions on Autonomous
and Adaptive Systems 12 (3) (2017) 1–29. doi:10.1145/3105758.

[219] D. Weyns, M. U.

Iftikhar, Model-based simulation at runtime
for self-adaptive systems,
2016 IEEE International Confer-
ence on Autonomic Computing (ICAC), IEEE, 2016, pp. 364–373.
doi:10.1109/icac.2016.67.

in:

[220] F. Oquendo, Software architecture of self-organizing systems-of-
systems for the internet-of-things with SosADL, in: 2017 12th Sys-
tem of Systems Engineering Conference (SoSE), IEEE, 2017, pp. 1–6.
doi:10.1109/sysose.2017.7994959.

[221] A. Colin, E. Gerbert-Gaillard, G. Vega, P. Lalanda, S. Chollet, Au-
tonomic service-oriented context for pervasive applications, in: 2016
IEEE International Conference on Services Computing (SCC), IEEE,
2016, pp. 491–498. doi:10.1109/scc.2016.70.

[222] J. Camara, R. de Lemos, N. Laranjeiro, R. Ventura, M. Vieira,
Robustness-driven resilience evaluation of self-adaptive software sys-
tems, IEEE Transactions on Dependable and Secure Computing 14 (1)
(2015) 1–1. doi:10.1109/tdsc.2015.2429128.

[223] C. Raibulet, F. A. Fontana, Evaluation of self-adaptive systems,
in: Proceedings of the 11th European Conference on Software
Architecture: Companion Proceedings, ACM, 2017, pp. 23–30.
doi:10.1145/3129790.3129825.

[224] Z. Ding, Y. Zhou, M. Zhou, Modeling self-adaptive software systems
by fuzzy rules and petri nets, IEEE Transactions on Fuzzy Systems
26 (2) (2018) 967–984. doi:10.1109/tfuzz.2017.2700286.

71

[225] F. Quin, D. Weyns, T. Bamelis, S. S. Buttar, S. Michiels, Eﬃcient anal-
ysis of large adaptation spaces in self-adaptive systems using machine
learning, in: 2019 IEEE/ACM 14th International Symposium on Soft-
ware Engineering for Adaptive and Self-Managing Systems (SEAMS),
IEEE, 2019, pp. 1–12. doi:10.1109/seams.2019.00011.

[226] S. Spinner, J. Grohmann, S. Eismann, S. Kounev, Online model learn-
ing for self-aware computing infrastructures, Journal of Systems and
Software 147 (2019) 1–16. doi:10.1016/j.jss.2018.09.089.

[227] J. C´amara, A. Lopes, D. Garlan, B. Schmerl, Adaptation im-
pact and environment models for architecture-based self-adaptive
systems, Science of Computer Programming 127 (2016) 50–75.
doi:10.1016/j.scico.2015.12.006.

[228] J. Beal, M. Viroli, D. Pianini, F. Damiani, Self-adaptation to device
distribution changes, in: 2016 IEEE 10th International Conference on
Self-Adaptive and Self-Organizing Systems (SASO), IEEE, 2016, pp.
60–69. doi:10.1109/saso.2016.12.

[229] G. F. Solano, R. D. Caldas, G. N. Rodrigues, T. Vogel, P. Pel-
liccione, Taming uncertainty in the assurance process of
self-
in: 2019 IEEE/ACM
adaptive systems: a goal-oriented approach,
14th International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems (SEAMS), IEEE, 2019, p. 89–99.
doi:10.1109/seams.2019.00020.

[230] F. Burzlaﬀ, C. Bartelt, A conceptual architecture for enabling fu-
ture self-adaptive service systems,
in: Proceedings of the An-
nual Hawaii International Conference on System Sciences, Hawaii
International Conference on System Sciences, 2019, pp. 1–10.
doi:10.24251/hicss.2019.899.

[231] K. L. Bellman, C. Gruhl, C. Landauer, S. Tomforde, Self-improving
system integration - on a deﬁnition and characteristics of the chal-
lenge,
in: 2019 IEEE 4th International Workshops on Foundations
and Applications of Self* Systems (FAS*W), IEEE, 2019, pp. 1–3.
doi:10.1109/fas-w.2019.00014.

72

[232] H. Li, T.-H. P. Chen, A. E. Hassan, M. Nasser, P. Flora, Adopt-
ing autonomic computing capabilities in existing large-scale systems,
in: Proceedings of the 40th International Conference on Software En-
gineering: Software Engineering in Practice, ACM, 2018, pp. 1–10.
doi:10.1145/3183519.3183544.

[233] M. Staron, W. Meding, M. Tichy, J. Bjurhede, H. Giese, O. S¨oder,
Industrial experiences from evolving measurement systems into self-
healing systems for improved availability, Software: Practice and Ex-
perience 48 (3) (2017) 719–739. doi:10.1002/spe.2522.

[234] C.-H. Lung, X. Zhang, P. Rajeswaran, Improving software performance
and reliability in a distributed and concurrent environment with an
architecture-based self-adaptive framework, Journal of Systems and
Software 121 (2016) 311–328. doi:10.1016/j.jss.2016.06.102.

[235] P. C. Vinh, Concurrency

of
Future Generation Computer
doi:10.1016/j.future.2015.04.017.

self-*
Systems

in autonomic
(2016)

56

systems,
140–152.

[236] A. Diaconescu, B. Porter, R. Rodrigues, E. Pournaras, Hierarchi-
cal self-awareness and authority for scalable self-integrating systems,
in: 2018 IEEE 3rd International Workshops on Foundations and
Applications of Self* Systems (FAS*W), IEEE, 2018, pp. 168–175.
doi:10.1109/fas-w.2018.00043.

[237] V. Podolskiy, A. Jindal, M. Gerndt, Y. Oleynik, Forecasting
models for self-adaptive cloud applications: A comparative study,
2018 IEEE 12th International Conference on Self-Adaptive
in:
IEEE, 2018, pp. 40–49.
(SASO),
and Self-Organizing Systems
doi:10.1109/saso.2018.00015.

[238] J. M. Franco, F. Correia, R. Barbosa, M. Zenha-Rela, B. Schmerl,
Improving self-adaptation planning through software
D. Garlan,
architecture-based stochastic modeling, Journal of Systems and Soft-
ware 115 (2016) 42–60. doi:10.1016/j.jss.2016.01.026.

[239] A. Pandey, G. A. Moreno, J. Camara, D. Garlan, Hybrid planning
for decision making in self-adaptive systems, in: 2016 IEEE 10th In-
ternational Conference on Self-Adaptive and Self-Organizing Systems
(SASO), IEEE, 2016, pp. 130–139. doi:10.1109/saso.2016.19.

73

[240] C. Kinneer, Z. Coker, J. Wang, D. Garlan, C. L. Goues, Managing un-
certainty in self-adaptive systems with plan reuse and stochastic search,
in: Proceedings of the 13th International Conference on Software En-
gineering for Adaptive and Self-Managing Systems, ACM, 2018, pp.
40–50. doi:10.1145/3194133.3194145.

[241] F. Messina, G. Pappalardo, D. Rosaci, C. Santoro, G. Sarn´e, A trust-
aware, self-organizing system for large-scale federations of utility com-
puting infrastructures, Future Generation Computer Systems 56 (2016)
77–94. doi:10.1016/j.future.2015.07.013.

[242] C. Krupitzer, F. M. Roth, M. Pfannemuller, C. Becker, Comparison
of approaches for self-improvement in self-adaptive systems, in: 2016
IEEE International Conference on Autonomic Computing (ICAC),
IEEE, 2016, pp. 308–314. doi:10.1109/icac.2016.18.

[243] D. M. Barbosa, R. G. de Moura Lima, P. H. M. Maia, E. Costa, Lo-
tus@runtime: A tool for runtime monitoring and veriﬁcation of self-
in: 2017 IEEE/ACM 12th International Sympo-
adaptive systems,
sium on Software Engineering for Adaptive and Self-Managing Systems
(SEAMS), IEEE, 2017, pp. 24–30. doi:10.1109/seams.2017.18.

[244] T. Chen, R. Bahsoon, Self-adaptive and online QoS modeling for cloud-
based software services, IEEE Transactions on Software Engineering
43 (5) (2017) 453–475. doi:10.1109/tse.2016.2608826.

[245] M. Salama, R. Bahsoon, Analysing and modelling runtime architec-
tural stability for self-adaptive software, Journal of Systems and Soft-
ware 133 (2017) 95–112. doi:10.1016/j.jss.2017.07.041.

[246] V. Podolskiy, M. Mayo, A. Koay, M. Gerndt, P. Patros, Main-
taining SLOs of cloud-native applications via self-adaptive resource
sharing,
2019 IEEE 13th International Conference on Self-
Adaptive and Self-Organizing Systems (SASO), IEEE, 2019, pp. 72–81.
doi:10.1109/saso.2019.00018.

in:

[247] G. A. Moreno, B. Schmerl, D. Garlan, SWIM,

in: Proceedings
of the 13th International Conference on Software Engineering for
Adaptive and Self-Managing Systems, ACM, 2018, pp. 137–143.
doi:10.1145/3194133.3194163.

74

[248] S. Bosse, D. Lehmhus, Towards large-scale material-integrated com-
puting: Self-adaptive materials and agents, in: 2017 IEEE 2nd Inter-
national Workshops on Foundations and Applications of Self* Systems
(FAS*W), IEEE, 2017, pp. 70–78. doi:10.1109/fas-w.2017.123.

[249] J. C. Moreno, A. Lopes, D. Garlan, B. Schmerl, Impact models for
architecture-based self-adaptive systems, in: Formal Aspects of Com-
ponent Software, Vol. 8997, Springer International Publishing, 2015,
pp. 89–107. doi:10.1007/978-3-319-15317-9\_6.

[250] J. Palmerino, Q. Yu, T. Desell, D. Krutz, Improving the decision-
making process of self-adaptive systems by accounting for tactic
volatility,
2019 34th IEEE/ACM International Conference on
Automated Software Engineering (ASE), IEEE, 2019, pp. 949–961.
doi:10.1109/ase.2019.00092.

in:

[251] T. Vogel, H. Giese, Adaptation and abstract runtime models, in: Pro-
ceedings of the 2010 ICSE Workshop on Software Engineering for Adap-
tive and Self-Managing Systems - SEAMS '10, ACM Press, 2010, pp.
39–48. doi:10.1145/1808984.1808989.

[252] F. A. Moghaddam, R. Deckers, G. Procaccianti, P. Grosso, P. Lago,
A domain model for self-adaptive software systems, in: Proceedings of
the 11th European Conference on Software Architecture: Companion
Proceedings, ACM, 2017, pp. 16–22. doi:10.1145/3129790.3129824.

[253] K. Colson, R. Dupuis, L. Montrieux, Z. Hu, S. Uchitel, P.-Y.
Schobbens, Reusable self-adaptation through bidirectional program-
ming, in: Proceedings of the 11th International Symposium on Software
Engineering for Adaptive and Self-Managing Systems, ACM, 2016, pp.
4–15. doi:10.1145/2897053.2897055.

[254] G. A. Moreno, J. Camara, D. Garlan, B. Schmerl, Eﬃcient decision-
making under uncertainty for proactive self-adaptation, in: 2016 IEEE
International Conference on Autonomic Computing (ICAC), IEEE,
2016, pp. 147–156. doi:10.1109/icac.2016.59.

[255] H. Muccini, M. Sharaf, D. Weyns, Self-adaptation for cyber-physical
in: Proceedings of the 11th International Symposium on

systems,

75

Software Engineering for Adaptive and Self-Managing Systems, ACM,
2016, pp. 75–81. doi:10.1145/2897053.2897069.

[256] A. Borda, L. Pasquale, V. Koutavas, B. Nuseibeh, Compositional
veriﬁcation of self-adaptive cyber-physical systems,
in: Proceed-
ings of the 13th International Conference on Software Engineering
for Adaptive and Self-Managing Systems, ACM, 2018, pp. 1–11.
doi:10.1145/3194133.3194146.

for evaluation and comparison of

[257] G. Moreno, C. Kinneer, A. Pandey, D. Garlan, DARTSim: An
exemplar
self-adaptation ap-
2019 IEEE/ACM
proaches for smart cyber-physical systems,
14th International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems (SEAMS), IEEE, 2019, pp. 181–187.
doi:10.1109/seams.2019.00031.

in:

[258] I. Gerostathopoulos, D. Skoda, F. Plasil, T. Bures, A. Knauss, Tun-
ing self-adaptation in cyber-physical systems through architectural
homeostasis, Journal of Systems and Software 148 (2019) 37–55.
doi:10.1016/j.jss.2018.10.051.

[259] G. Weiss, P. Schleiss, D. Schneider, M. Trapp, Towards integrating
undependable self-adaptive systems in safety-critical environments, in:
Proceedings of the 13th International Conference on Software Engineer-
ing for Adaptive and Self-Managing Systems, ACM, 2018, pp. 26–32.
doi:10.1145/3194133.3194157.

[260] I. Gerostathopoulos, T. Bures, P. Hnetynka, J. Keznikl, M. Kit,
F. Plasil, N. Plouzeau, Self-adaptation in software-intensive cy-
ber–physical systems: From system goals to architecture conﬁg-
urations, Journal of Systems and Software 122 (2016) 378–397.
doi:10.1016/j.jss.2016.02.028.

[261] F. Rammig, K. Stahl, Online behavior classiﬁcation for anomaly
systems, Concurrency and Com-
(2014) 3751–3772.

Practice and Experience 28 (14)

detection in self-x real-time
putation:
doi:10.1109/isorc.2014.24.

[262] U. Brinkschulte, An artiﬁcial DNA for self-descripting and self-building
embedded real-time systems, Concurrency and Computation: Practice
and Experience 28 (14) (2015) 3711–3729. doi:10.1002/cpe.3460.

76

[263] A. Marshall, S. Jahan, R. Gamble, Toward evaluating the impact
of self-adaptation on security control certiﬁcation,
in: Proceedings
of the 13th International Conference on Software Engineering for
Adaptive and Self-Managing Systems, ACM, 2018, pp. 149–160.
doi:10.1145/3194133.3194139.

[264] R. Calinescu, D. Weyns, S. Gerasimou, M. U. Iftikhar, I. Habli,
T. Kelly, Engineering trustworthy self-adaptive software with dynamic
assurance cases, IEEE Transactions on Software Engineering 44 (11)
(2018) 1039–1069. doi:10.1109/tse.2017.2738640.

in a
[265] Z. Yan, R. MacLaverty, Autonomic
component based software system,
Lecture Notes in Com-
in:
puter Science, Springer Berlin Heidelberg, 2006, pp. 279–292.
doi:10.1007/11839569\_27.

trust management

[266] Y. Wang, F. Xu, Y. Tao, C. Cao, J. L¨u, Toward trust manage-
ment in autonomic and coordination applications, in: Lecture Notes
in Computer Science, Springer Berlin Heidelberg, 2006, pp. 236–245.
doi:10.1007/11839569\_23.

[267] M. Serrano, S. van der Meer, J. Strassner, S. D. Paoli, A. Kerr,
C. Storni, Trust and reputation policy-based mechanisms for self-
protection in autonomic communications,
Lecture Notes in
Computer Science, Springer Berlin Heidelberg, 2009, pp. 249–267.
doi:10.1007/978-3-642-02704-8\_19.

in:

[268] S. S. Yau, Y. Yao, M. Yan, Development and runtime support for
situation-aware security in autonomic computing, in: Lecture Notes
in Computer Science, Springer Berlin Heidelberg, 2006, pp. 173–182.
doi:10.1007/11839569\_17.

[269] S. Wang, J. Wan, D. Zhang, D. Li, C. Zhang, Towards smart factory for
industry 4.0: a self-organized multi-agent system with big data based
feedback and coordination, Computer Networks 101 (2016) 158–168.
doi:10.1016/j.comnet.2015.12.017.

[270] T. Vogel, mrubis: An exemplar for model-based architectural self-
healing and self-optimization (artifact), Dagstuhl Artifacts Series 4
(2018). doi:10.4230/DARTS.4.1.1.

77

[271] W. Yang, C. Xu, M. Pan, C. Cao, X. Ma, J. Lu, Eﬃcient val-
idation of self-adaptive applications by counterexample probability
maximization, Journal of Systems and Software 138 (2018) 82–99.
doi:10.1016/j.jss.2017.12.009.

[272] A. Reichstaller, A. Knapp, Risk-based testing of self-adaptive systems
using run-time predictions,
in: 2018 IEEE 12th International Con-
ference on Self-Adaptive and Self-Organizing Systems (SASO), IEEE,
2018, pp. 80–89. doi:10.1109/saso.2018.00019.

[273] G. A. Moreno, A. V. Papadopoulos, K. Angelopoulos, J. Ca-
mara, B. Schmerl, Comparing model-based predictive approaches
to self-adaptation: CobRA and PLA,
in: 2017 IEEE/ACM 12th
International Symposium on Software Engineering for Adaptive
IEEE, 2017, pp. 42–53.
and Self-Managing Systems
doi:10.1109/seams.2017.2.

(SEAMS),

[274] A. Pandey, I. Ruchkin, B. Schmerl, J. Camara, Towards a formal
framework for hybrid planning in self-adaptation, in: 2017 IEEE/ACM
12th International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems (SEAMS), IEEE, 2017, pp. 109–115.
doi:10.1109/seams.2017.14.

[275] E. M. Fredericks, An empirical analysis of the mutation operator
for run-time adaptive testing in self-adaptive systems (2018) 59–
66doi:10.1145/3194718.3194726.

[276] R. Bloem, N. Braud-Santoni, S. Jacobs, Synthesis of self-stabilising
and byzantine-resilient distributed systems,
in: Computer Aided
Veriﬁcation, Springer International Publishing, 2016, pp. 157–176.
doi:10.1007/978-3-319-41528-4\_9.

[277] G. A. Moreno, J. C´amara, D. Garlan, M. Klein, Uncertainty reduc-
tion in self-adaptive systems, in: Proceedings of the 13th International
Conference on Software Engineering for Adaptive and Self-Managing
Systems, ACM, 2018, pp. 51–57. doi:10.1145/3194133.3194144.

[278] E. M. Fredericks, Automatically hardening a self-adaptive system
against uncertainty, in: Proceedings of the 11th International Sym-
posium on Software Engineering for Adaptive and Self-Managing Sys-
tems, ACM, 2016, pp. 16–27. doi:10.1145/2897053.2897059.

78

[279] E.

Incerto, M. Tribastone, C. Trubiani, Software performance
in:
on Auto-
IEEE, 2017, pp. 485–496.

self-adaptation through eﬃcient model predictive
2017
mated Software Engineering (ASE),
doi:10.1109/ase.2017.8115660.

IEEE/ACM International Conference

control,

32nd

[280] N. Z. Naqvi, J. Devlieghere, D. Preuveneers, Y. Berbers, MAsCOT:
Self-adaptive opportunistic oﬄoading for cloud-enabled smart mobile
applications with probabilistic graphical models at runtime, in: 2016
49th Hawaii International Conference on System Sciences (HICSS),
IEEE, 2016, pp. 5701–5710. doi:10.1109/hicss.2016.705.

[281] Y. Qin, C. Xu, P. Yu, J. Lu, SIT: Sampling-based interactive testing for
self-adaptive apps, Journal of Systems and Software 120 (2016) 70–88.
doi:10.1016/j.jss.2016.07.002.

to em-
[282] N. Condori-Fernandez, F. S. Lopez, Using emotions
power the self-adaptation capability of software services,
in: 2017
IEEE/ACM 2nd International Workshop on Emotion Awareness
in Software Engineering (SEmotion),
IEEE, 2017, pp. 15–21.
doi:10.1109/semotion.2017.8.

[283] E. M. Grua,

a systematic literature study,

I. Malavolta, P. Lago, Self-adaptation in mobile
apps:
2019 IEEE/ACM 14th
in:
International Symposium on Software Engineering for Adaptive
IEEE, 2019, pp. 51–62.
and Self-Managing Systems
doi:10.1109/seams.2019.00016.

(SEAMS),

[284] S. Taherizadeh, A. C. Jones, I. Taylor, Z. Zhao, V. Stankovski, Mon-
itoring self-adaptive applications within edge computing frameworks:
A state-of-the-art review, Journal of Systems and Software 136 (2018)
19–38. doi:10.1016/j.jss.2017.10.033.

[285] M. D'Angelo, S. Gerasimou, S. Ghahremani, J. Grohmann, I. Nunes,
E. Pournaras, S. Tomforde, On learning in collective self-adaptive sys-
tems: State of practice and a 3d framework, in: 2019 IEEE/ACM
14th International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems (SEAMS), IEEE, 2019, pp. 13–24.
doi:10.1109/seams.2019.00012.

79

[286] J. Boes, F. Migeon, Self-organizing multi-agent systems for the control
of complex systems, Journal of Systems and Software 134 (2017) 12–28.
doi:10.1016/j.jss.2017.08.038.

[287] G. A. Moreno, O. Strichman, S. Chaki, R. Vaisman, Decision-
making with cross-entropy for self-adaptation, in: 2017 IEEE/ACM
12th International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems (SEAMS), IEEE, 2017, pp. 90–101.
doi:10.1109/seams.2017.7.

[288] M. Camilli, A. Gargantini, P. Scandurra, Zone-based formal
real-time self-adaptive sys-
Science of Computer Programming 159 (2018) 28–57.

speciﬁcation and timing analysis of
tems,
doi:10.1016/j.scico.2018.03.002.

[289] B. DeVries, B. H. C. Cheng, Run-time monitoring of self-adaptive sys-
tems to detect n-way feature interactions and their causes, in: Pro-
ceedings of the 13th International Conference on Software Engineer-
ing for Adaptive and Self-Managing Systems, ACM, 2018, pp. 94–100.
doi:10.1145/3194133.3194141.

[290] D. King, G. Peterson, A macro-level order metric for self-organizing
in: 2018 IEEE 12th International Conference on
adaptive systems,
Self-Adaptive and Self-Organizing Systems (SASO), IEEE, 2018, pp.
60–69. doi:10.1109/saso.2018.00017.

[291] S. Pradhan, A. Dubey, T. Levendovszky, P. S. Kumar, W. A. Emﬁnger,
D. Balasubramanian, W. Otte, G. Karsai, Achieving resilience in dis-
tributed software systems via self-reconﬁguration, Journal of Systems
and Software 122 (2016) 344–363. doi:10.1016/j.jss.2016.05.038.

[292] S. Shevtsov, D. Weyns, Keep it SIMPLEX: satisfying multiple goals
with guarantees in control-based self-adaptive systems, in: Proceed-
ings of the 2016 24th ACM SIGSOFT International Symposium
on Foundations of Software Engineering, ACM, 2016, pp. 229–241.
doi:10.1145/2950290.2950301.

[293] S. Shevtsov, D. Weyns, M. Maggio, Handling new and changing re-
quirements with guarantees in self-adaptive systems using SimCA, in:

80

2017 IEEE/ACM 12th International Symposium on Software Engineer-
ing for Adaptive and Self-Managing Systems (SEAMS), IEEE, 2017,
pp. 12–23. doi:10.1109/seams.2017.3.

[294] A. Rodrigues, R. D. Caldas, G. N. Rodrigues, T. Vogel, P. Pellic-
cione, A learning approach to enhance assurances for real-time self-
adaptive systems, in: Proceedings of the 13th International Confer-
ence on Software Engineering for Adaptive and Self-Managing Systems,
ACM, 2018, p. 206–216. doi:10.1145/3194133.3194147.

[295] V. Nallur, S. Clarke, Clonal plasticity:

anism for multi-agent
Agents
and Multi-Agent
doi:10.1007/s10458-017-9380-x.

systems

to
Systems

an autonomic mech-
self-diversify, Autonomous
275–311.
(2017)
32

(2)

[296] S. Jahan, A. Marshall, R. Gamble, Embedding veriﬁcation concerns in
self-adaptive system code, in: 2017 IEEE 11th International Conference
on Self-Adaptive and Self-Organizing Systems (SASO), IEEE, 2017, pp.
121–130. doi:10.1109/saso.2017.21.

[297] J. Boubin, J. Chumley, C. Stewart, S. Khanal, Autonomic computing
challenges in fully autonomous precision agriculture, in: 2019 IEEE In-
ternational Conference on Autonomic Computing (ICAC), IEEE, 2019,
pp. 11–17. doi:10.1109/icac.2019.00012.

[298] J. P. S. da Silva, M. Ecar, M. S. Pimenta, G. T. A. Guedes, L. P.
Franz, L. Marchezan, A systematic literature review of UML-based
domain-speciﬁc modeling languages for self-adaptive systems, in: Pro-
ceedings of the 13th International Conference on Software Engineer-
ing for Adaptive and Self-Managing Systems, ACM, 2018, pp. 87–93.
doi:10.1145/3194133.3194136.

[299] M. S. Reorda, L. Sterpone, A. Ullah, An error-detection and self-
repairing method for dynamically and partially reconﬁgurable sys-
tems, IEEE Transactions on Computers 66 (6) (2017) 1022–1033.
doi:10.1109/tc.2016.2607749.

[300] S. Ghahremani, H. Giese, T. Vogel, Eﬃcient utility-driven self-healing
employing adaptation rules for large dynamic architectures, Inter-
national Conference on Autonomic Computing (ICAC) (2017) 59–
68doi:10.1109/icac.2017.35.

81

[301] C. Krupitzer, M. Pfannemuller, J. Kaddour, C. Becker, SATISFy:
Towards a self-learning analyzer for time series forecasting in self-
improving systems, in: 2018 IEEE 3rd International Workshops on
Foundations and Applications of Self* Systems (FAS*W), IEEE, 2018,
pp. 182–189. doi:10.1109/fas-w.2018.00045.

[302] A. Diaconescu, S. Frey, C. Muller-Schloer, J. Pitt, S. Tomforde, Goal-
oriented holonics for complex system (self-)integration: Concepts and
case studies, in: 2016 IEEE 10th International Conference on Self-
Adaptive and Self-Organizing Systems (SASO), IEEE, 2016, pp. 100–
109. doi:10.1109/saso.2016.16.

[303] F. Alvares, G. Delaval, E. Rutten, L. Seinturier, Language support for
modular autonomic managers in reconﬁgurable software components,
in: 2017 IEEE International Conference on Autonomic Computing
(ICAC), IEEE, 2017, pp. 271–278. doi:10.1109/icac.2017.48.

[304] I. Gerostathopoulos, T. Vogel, D. Weyns, P. Lago, How do we evalu-
ate self-adaptive software systems?: A ten-year perspective of seams,
in: 2021 International Symposium on Software Engineering for Adap-
tive and Self-Managing Systems (SEAMS), IEEE, 2021, pp. 59–70.
doi:10.1109/SEAMS51251.2021.00018.

[305] P. Ralph, N. b. Ali, S. Baltes, D. Bianculli, J. Diaz, Y. Dittrich,
N. Ernst, M. Felderer, R. Feldt, A. Filieri, et al., Empirical standards
for software engineering research, arXiv preprint arXiv:2010.03525
(2020). doi:10.48550/arXiv.2010.03525.

82

