0
2
0
2

t
c
O
5

]

R
C
.
s
c
[

1
v
2
6
8
1
0
.
0
1
0
2
:
v
i
X
r
a

DATA AUGMENTATION BASED MALWARE DETECTION USING
CONVOLUTIONAL NEURAL NETWORKS

A PREPRINT

Ferhat Ozgur Catak
Simula Research Laboratory
Oslo, Norway
ozgur@simula.no

Javed Ahmed
Department of Computer Science
Sukkur IBA University, Sukkur, Pakistan

Kevser Sahinbas
Department of Management Information System
Istanbul Medipol University, Istanbul, Turkey

Zahid Hussain Khand
Department of Computer Science
Sukkur IBA University, Sukkur, Pakistan

October 6, 2020

ABSTRACT

Recently, cyber-attacks have been extensively seen due to the everlasting increase of malware in the
cyber world. These attacks cause irreversible damage not only to end-users but also to corporate
computer systems. Ransomware attacks such as WannaCry and Petya speciﬁcally targets to make
critical infrastructures such as airports and rendered operational processes inoperable. Hence, it has
attracted increasing attention in terms of volume, versatility, and intricacy. The most important feature
of this type of malware is that they change shape as they propagate from one computer to another.
Since standard signature-based detection software fails to identify this type of malware because
they have different characteristics on each contaminated computer. This paper aims at providing an
image augmentation enhanced deep convolutional neural network (CNN) models for the detection
of malware families in a metamorphic malware environment. The main contributions of the paper’s
model structure consist of three components, including image generation from malware samples,
image augmentation, and the last one is classifying the malware families by using a convolutional
neural network model. In the ﬁrst component, the collected malware samples are converted binary
representation to 3-channel images using windowing technique. The second component of the system
create the augmented version of the images, and the last component builds a classiﬁcation model. In
this study, ﬁve different deep convolutional neural network model for malware family detection is
used.

Keywords Malware detection · Malware images · Convolutional Neural Networks

1

Introduction

Today, especially in the beginning of the 2000s, motivated by recent promotions of technology, we have started to use
many technological devices such as computers, mobile phones and webcams. Technology manufacturers have started
to produce devices that provide users with attractive features. While the development of these features, the issue of
security is ignored by developers. Due to these rapid product developments that the developers make for the purpose of
releasing the products to the market quickly, many products contain many weaknesses. In terms of malicious software
developers, this offers many opportunities.

With the understanding cybersecurity is a vital problem, cyber security activities in organizations have increased. As
a result, designing approaches for cyber security activities should be considered. One of the most important cyber
security activities is malicious software analysis. Malware is a tool designed for a speciﬁc target, often attempting to
camouﬂage itself in another way, with intentions such as ﬁle encryption, ransom, preventing a system from working,

 
 
 
 
 
 
A PREPRINT - OCTOBER 6, 2020

gaining unauthorized access to a system, data theft, or sabotage. Since, 1046.10 million new malware 1 have been
found in the ﬁrst four months of 2020, it is understood that a great deal of effort has been made in the development of
malware. Therefore, great efforts are needed to protect against malware attacks.

In order to be effectively protected from malware, the ﬁrst thing to do is to recognize the malicious software and analyze
their behavior well. In this respect, the important point is to identify malicious software and to classify them successfully
as well. A family of malicious software also represents the malicious behavior to which it belongs. As a result, the
countermeasures to be taken against these behaviors may vary according to the families of malicious software.

Several consecutive operations are generally performed within malware analysis. This task is mainly done using static
and dynamic analysis methods including the strings command to get the malicious IP addresses, entropy value if
the suspicious executable ﬁle, executing the ﬁle in an isolated environment to record its behaviour. On the other hand,
Malware developers have a broad knowledge of analysis and, with this knowledge, develop a variety of anti-analysis
techniques. Anti-debugging and anti-disassembly techniques are the two methods most commonly used by malware
developers. Such analysis bypass methods are generally used to produce erroneous results by the disassembler and
debugger tools. In anti-debugging methods, malware developers often manipulate pointer address parameters used
by jump op-code such as jz, jnz, jze. Anti-debugging techniques are used by developers to ensure that malware
samples does not run under a debugger, and in this case, to change the execution ﬂow accordingly. In most cases, the
Anti-debugging process will slow down the reverse engineering process.

For this reason, the automated malware detection systems used today do not yield very successful results. Depending
on the classiﬁcation methods used, a malware can be detected as a Trojan using an anti-virus application and another
anti-virus application may be labeled as Worm. This has become even more complicated with the advent of sophisticated
malware.

For this reason, especially with the development of machine learning ﬁeld, this subject is being used in the ﬁeld of
malware analysis. The ﬁrst use of machine learning algorithms for malicious software analysis is to use API calls
as feature vector [16]. One of the favorite method performed within the quantiﬁcation of API calls is n-grams. The
main reasons for using n-grams are to give an effort to reduce computation-complexity of the model, to create a simple
term-frequency × inverse-document-frequency (TF-IDF) matrix, and to use traditional algorithms like random forests,
decision tree and support vector machine (SVM).

Although such an approach has produced results with high classiﬁcation performance, they remain inadequate for the
current malware infection methods. Malware analysts need sandbox applications to create API call data sets. Basically,
a sandbox allows the operation of an isolated virtual machine in a secure, closed network environment, and the malicious
software is run and recorded in this running virtual computer. However, malware developers integrate various virtual
machine detection code snippets into their malicious code blocks. If they get the impression that they are working on a
virtual server or in a sandbox environment, they change behavior to complicate the analysis. These methods used by
malware developers are called anti-vm and anti-sandbox, and the most commonly used methods are ‘Checking CPUID
Instruction’, ‘VMWare Magic Number’, ‘Checking for Known Mac Addresses’, ‘Checking for Processes Indicating a
VM’ , ‘Checking for Existence of Files Indicating a VM’, and ‘Checking for Running Services’.

Even if they change behavior and block dynamic analysis, the pieces of code are still present, and therefore other
machine learning methods can be used to obtain the malware family that they belong to. For this reason, a new approach
is used today to create an image of the ﬁle and analyze it. The ﬁrst studies on this subject are generally the creation of a
grayscale image of a malware and then the use of classiﬁcation algorithms.

The main contribution of this research work is to develop a data augmentation enhanced malware family classiﬁcation
model that exploits augmentation for variants of malware clones and takes advantage of convolutional neural network to
improve image classiﬁcation. Herein, we demonstrate that the data augmentation based 3-channel image classiﬁcation
can signiﬁcantly inﬂuence the performance of malware family classiﬁcation.

In our previous works [2, 1, 24] we applied a single and two layers LSTM model to detect the malware classes.

The paper is designed as follows: Section 2 describes the related work. In Section 3, we provide the system model
and consists of two subsections. First subsection presents the image conversion. Second subsection presents the data
augmentation. Section 5 describes the proposed approach that provides the details of the data augmentation and data
enhancement-based CNN malware classiﬁcation algorithm. Section 6 provides an extensive analysis of results. Lastly,
In Section 7, we conclude the paper.

1https://www.av-test.org/en/statistics/malware/

2

A PREPRINT - OCTOBER 6, 2020

2 Related work

Malware analysis ﬁeld has gained considerable attention from research community with rapid development of various
techniques for malware detection. There is huge research literature in this area. Since the proposed work is related
to image-based analysis using deep learning techniques, the relevant research literature regarding image processing
techniques for malware detection are brieﬂy discussed in this section. One of the early studies conducted on malware
images was done by Nataraj et. al [17]. The authors proposed an image texture analysis-based technique for visualization
and classiﬁcation of different families of malware. This approach converts malware binaries into grayscale images.
Malware are classiﬁed using K-nearest neighbor technique with Euclidean method. However, the system requires
pre-processing of ﬁltering to extract the image texture as features for classiﬁcation.

On the other hand, to extract the image texture as features for classiﬁcation, the system requires pre-processing of
ﬁltering. Kesav et al. [10] proposed a low-level texture feature extraction technique for malware analysis parallel
to Nataraj’s technique. The authors converted malware binaries into images and then extracted discrete wavelets
transform based texture features for classiﬁcation. Aziz et al. [13] identify new malware and their variants to extract
wavelet transforms-based texture features, and then supply to feed forward artiﬁcial neural network for applying
classiﬁcation. Konstantinos et al. [11] described a two-step malware variant detection and classiﬁcation method. In the
ﬁrst step, binary texture analysis applied through GIST. In the second step, these texture features classiﬁed by using
machine-learning techniques such as classiﬁcation and clustering to identify malware. Although the works mentioned
above [17, 10, 13, 11] are helpful to detect and classify new malware and their variants, they still have some limitations.
For instance, on the one hand, global texture features lose local information needed for classiﬁcation. On the another
hand, they have signiﬁcant computation overheads to process a vast amount of malware.

According to Zhang et al. [27], the malware classiﬁcation problem can be converted into an image classiﬁcation
problem. Their study provides to disassembles executable ﬁles into opcode sequences and then convert opcode into
images for identifying whether the source ﬁle is benign or malware by using CNN. Yue [26] presents multifamily
malware classiﬁcation approach by applying convolutional neural network. However, the performance is degraded due
to the imbalance of malware families. The author proposes softmax loss function to mitigate this issue. This approach
is reactive in nature to deal with scenarios where class imbalance is assumed.

The other work by Ni et al. [18] propose a method for malware classiﬁcation by applying deep learning techniques.
Their algorithm uses SimHash and CNN techniques for malware classiﬁcation. The algorithm converts the malware
codes that is disassembled into grayscale images used SimHash algorithm and after that uses convolutional neural
network (CNN) to identify their family. The performance improvement is ensured by using some methods such as
bilinear interpolation, multi-hash, and major block selection during the process. Cui et al. [4] propose a method that
applies CNN with the Bat algorithm together in order to robust the accuracy of the model. Their implemented method
converts the malicious code into grayscale images. The method’s images are classiﬁed by using a convolutional neural
network (CNN) and Bat algorithm is used to address the issue of data imbalance among different malware families. The
main limitation of this approach is that they used one evaluation criterion to test the model.

Two stage deep learning neural network is used by Tobiyama et al. [19] for infection detection. Initially, the authors
generated an image via the extracted behavioral features from the trained recurrent neural network. Later, to classify
the feature images, they used CNN. An approach to derive more signiﬁcant byte sequence in a malware was proposed
by Yakura et al. [22]. The authors used CNN with attention mechanism to achieve this for the images converted from
binaries. MalNet method for malware detection was proposed by Yan et al. [23]. The method automatically learns
essential features from the raw data. The method generates grayscale images from opcode sequences. Later, CNN
and LSTM are used to learn important features from the grayscale images. Fu et al. [7] proposed an approach to
visualize malware as an RGB-colored image. Malware classiﬁcation is performed by merging global and local features
using random forest, K-nearest neighbor, and support vector machine. The approach realizes ﬁne-grained malware
classiﬁcation with low computational cost by utilizing the combination of global and local features. Liu et al. [12]
proposed a malware classiﬁcation framework based on a bag-of-visual-words (BoVW) model to obtain robust feature
descriptors of malware images. The model demonstrates better classiﬁcation accuracy even for more challenging
datasets. The major limitation of this approach is higher computational cost.

Chen et al. [3] conducted an extensive study on the vulnerabilities of the CNN-based malware detectors. The authors
proposed two methods to attack recently developed malware detectors. One of these methods achieve attack success rate
over 99% which strongly demonstrates the vulnerability of CNN-based malware detectors. The authors also conducted
experiments with pre-detection mechanism to reject adversarial examples and shown its effectiveness in improving
the safety and efﬁciency of malware detectors. Venkatraman et al. [21] used similarity mining and deep learning
architecture to identify and classify obfuscated malware accurately. The authors used eight different similarity measures
to generate similarity matrices and to identify malware family by adopting images of distance scores. The advantage

3

A PREPRINT - OCTOBER 6, 2020

of this approach is that it requires less computational cost as compared to classical machine learning based methods.
Dai et al. [5] proposed a malware detection method using hardware features due to inherent deﬁciencies in software
methods. The approach dumps the malware memory of runtime to binary ﬁles, then grayscale image is extracted from
the binary ﬁles. A ﬁxed size images are generated from the grayscale image and histogram of gradient is used to extract
image features. Finally, malware classiﬁcation is done using the popular classiﬁer algorithms. One of the limitations for
this approach is that it cannot provide against ﬁleless malware. Gibert et al. [8] propose a ﬁle agnostic deep learning
approach for malware classiﬁcation. The malicious software are grouped into families based on a set of discriminant
patterns extracted from their visualization as images. Yoo et al. [25] propose multiclass CNN model to classify exploit
kits. On of the root of malware contamination are exploit kits. This type of attack has rapidly increased and detection
rate is quite low. The authors proposed limited grayscale, size-based hybrid model, and recursive image update method
to enhance classiﬁcation accuracy.

Traditional machine learning methods are applied in most of the existing state of the art. Our study uses a deep learning
method and differs from most other studies examined in this section. Deep learning methods are not algorithmically new
and easy to implement. They can be trained with high-performance computations on systems such as GPUs. Today, they
have become prevalent in the ﬁeld of machine learning. Some of the studies examined also used deep learning methods,
but our approach differs from these studies because we used ﬁve different deep convolutional neural network models
for malware family classiﬁcation. It is evident from the results that 3-channel image classiﬁcation can signiﬁcantly
inﬂuence malware family detection’s performance. The main contribution that makes this study stand out regarding the
existing state of art examined in this section is applying data augmentation enhanced malware family classiﬁcation
model. This model exploits augmentation for variants of malware clones and take advantage of CNN to improve image
classiﬁcation.

3 System model

The system architecture of the proposed model is composed into three different components. The ﬁrst component
is image conversion of malware samples using decimal representation and entropy values of each byte. The second
component is image augmentation component. The last one is CNN based malware family classiﬁcation.

3.1

Image conversion

Malware samples collected from Github platform, in the ﬁrst step, are labeled using ClamAV open source command-line
antivirus software. The model architecture is illustrated in Figure 1.

The input of the ﬁrst component of the malware detection system is a collection of malware stored in different formats
such as portable executable, Word, PDF. These malware are then converted into 3-channels PNG ﬁles as shown in
Figure 1.

3.2 Data Augmentation

The key problem with malware detection model is data diversity. There are many alternative methods are available for
solving these problems. One approach to solve this problem involves the use of data augmentation. Data augmentation
can be deﬁned as a strategy to artiﬁcially increase the variety of input instances for training phase, without really
collecting new instances.

Additive noise is the most used technique for data augmentation to build reliable machine learning models. Gaussian,
Laplacian and Poisson noises are the most used techniques to enhance the input dataset. Laplacian noise is derived
eventually from white (Gaussian) noise [9].

3.2.1 Additive Gaussian

Additive Gaussian noise is a fundamental noise model used in information theory to simulate the impact of many
random methods that happen in nature. The Additive Gaussian noise ﬂow is represented by a series of outputs Yi at
a discrete-time event index i. Yi is the sum of the input Xi and noise, Zi, where Zi is independent and identically
distributed and picked from a zero-mean normal distribution, including variance N . The Zi are further assumed to not
be correlated with the Xi.

Zi ∼ N (0, N )
Yi = Xi + Zi

4

(1)

A PREPRINT - OCTOBER 6, 2020

Figure 1: The architecture of the proposed 3-channel image representation of malware samples. Given input malware
samples, RGB representations are computed by applying as explained in Section 5.1.

5

Trojan.KillAv01001010101010100010101001010010R1    R2   R3   R4    R5 R6    R7   R8   R9    R10 R11  R12  R13  R14  R15 R16  R17  R18  R19  R20 G1    G2   G3   G4    G5 G6    G7   G8   G9    G10 G11  G12  G13  G14  G15 G16  G17  G18  G19  G20 B1    B2   B3   B4    B5 B6    B7   B8   B9    B10 B11  B12  B13  B14  B15 B16  B17  B18  B19  B20 Red channel with decimal values of each byteGreen channel with entropy values of each byteBlue channel Zero channelWin.Malware.Zusy01001010101010100010101001010010R1    R2   R3   R4    R5 R6    R7   R8   R9    R10 R11  R12  R13  R14  R15 R16  R17  R18  R19  R20 G1    G2   G3   G4    G5 G6    G7   G8   G9    G10 G11  G12  G13  G14  G15 G16  G17  G18  G19  G20 B1    B2   B3   B4    B5 B6    B7   B8   B9    B10 B11  B12  B13  B14  B15 B16  B17  B18  B19  B20 Red channel with decimal values of each byteGreen channel with entropy values of each byteBlue channel Zero channelWin32/Expiro01001010101010100010101001010010R1    R2   R3   R4    R5 R6    R7   R8   R9    R10 R11  R12  R13  R14  R15 R16  R17  R18  R19  R20 G1    G2   G3   G4    G5 G6    G7   G8   G9    G10 G11  G12  G13  G14  G15 G16  G17  G18  G19  G20 B1    B2   B3   B4    B5 B6    B7   B8   B9    B10 B11  B12  B13  B14  B15 B16  B17  B18  B19  B20 Red channel with decimal values of each byteGreen channel with entropy values of each byteBlue channel Zero channel...A PREPRINT - OCTOBER 6, 2020

3.2.2 Additive Poisson

Poisson noise is a kind of noise that can be represented by a Poisson process. A discrete random variable X is said to
have a Poisson distribution with parameter λ > 0 , if, for k = 0, 1, 2, · · · , the probability mass function of X is given
by:

f (k; λ) = Pr(X = k) =

λke−λ
k!

(2)

where e is Euler’s number, and k! is the factorial of k.

3.2.3 Additive Laplace

The Laplace distribution is a continuous probability distribution that sometimes described the double exponential
distribution because it can be considered as two exponential distributions with an extra location parameter joined
together.

A random variable has a Laplace distribution if its probability density function is

f (x | µ, b) =

=

1
2b

1
2b

(cid:18)

−

exp

|x − µ|
b
(cid:40)exp (cid:0)− µ−x
exp (cid:0)− x−µ

(cid:1)

(cid:1)

b

b

(cid:19)

if x < µ

if x ≥ µ

(3)

4 Preliminaries

Malware developers try to hide the malicious code snippets they place on legitimate software from malware analysts and
antivirus programs using different methods. In addition, malware software developers use codes and frameworks that
belong to malware families that perform similar malicious activities, rather than rebuilding malware code fragments. For
this reason, when these malware are converted into a executable ﬁle (example: PE for Windows) to be suitable for the
target platform on which they will be run, they are very similar when binary analysis is performed. The signature-based
security components used today are very vulnerable to changes in the code, which reduces their detection capabilities.
Developers generally use two different methods to replace the malicious code content when contaminated software
infects from one host computer to another computer; polymorphic and metamorphic malware.

Polymorphic malware changes the code during each infection and changes its appearance, but its malicious activity
remains the same. [6]. The Polymorphic malware uses different code obfuscation techniques while transmitting
from one host to another host. Their approaches are encryption of malicious code parts, obfuscating variable names
using character code shifts, register reassignments, equivalent code replacements, and removal of white space or code
miniﬁcation. Figure 2 shows the components and phases of a typical polymorphic malware during infection. An
infected host is shown on the left side of the ﬁgure. Infection occurs in 2 stages; initialization and decryption. In the
ﬁrst stage, the malware is working to behave normally on the host. In the second stage, the obfuscated malware payload
will open with the decrypter component, and then the jump command is used to change the stack on the address to the
new malware payload location on memory. Polymorphic malware will change its appearance by using mutation engine
with obfuscation techniques while passing from a host to another host. As a result, it will actually perform the same
harmful activity, but its appearance will be different, and as a result infected executable ﬁles with different hash values
will be created.

In Metamorphic malware, the situation is a bit more complicated. Although the obfuscation techniques are applied in the
same way, this time the code ﬂux is changed. As seen in Figure 3, a typical metamorphic malware has more components
and its structure has become more complex. This time malware has different components such as disassembler, code
analyzer / permutator, code transformer, assembler, and malicious payload.

5 Proposed approach

This section presents the results of the data augmentation, data enhancement-based CNN malware classiﬁcation
algorithm. The basic idea of Augmented-CNN based malware classiﬁcation techniques is introduced in Section 5.1.
The implementation of the porposed technique is described in Section 5.3.

6

A PREPRINT - OCTOBER 6, 2020

Figure 2: Typical polymorphic malware propagation

5.1 Basic idea

As previously mentioned in Section 4, malware developers are trying to evade security components using different
methods. These methods are usually in the form of adding noise to the executable ﬁles’ binary form. One of the areas
dealing with noisy data is the image classiﬁcation task. One of the methods used to overcome this problem and to
classify images from different angles in a more reliable way is the image augmentation technique. As part of this study,
malware samples have been converted to 3-channel images. The evasion techniques that malware developers have
added are reﬂected in these images as noise. We used image augmentation techniques in this study so that the noise in
the images does not affect the classiﬁcation performance.

In Figure 4, new images are created when different laplace noises are added to the original image.

We used the imgaug Python library for implementation and increased our dataset to 5 times using AdditiveGaussian,
AdditiveLaplace and AdditivePoisson noise addition methods. In Figure 5, new images are created with different laplace
noises for Trojan/Win32.VBKrypt.C122300 malware.

Our main tasks are to enhance data using data augmentation and classify malware samples according their family using
malware images based CNN model. Malware images’ basic idea is create multi-channel images using byte streams and
entropy values of each 8-bits streams. Table 1 presents notations to evaluate the malware classiﬁer model performance
and the commonly used variables is presented for convenience.

Table 1: Commonly used variables and notations

Variables/notations Description
X
Xaug
f m
aug
(cid:15)
Acc
k
t

Original input dataset
Augmednted version of input dataset X
Augmentation function m
Augmentation threshold
Accuracy of the classiﬁer
Number of classes
Number of augmentation functions

7

for i=1 to size of(body)     do_decrypt1(byte(i));jump to bodyMalware InitializationDecrypterEncrypted Body(Not Visible Before Decryption)Virus Bodyfor i=1 to size of(body)     do_decrypt1(byte(i));jump to bodyAfter decryptionInfect_host();...extract_payload();......do_malicious_activity();Host-1 Infection process of polymorphic malwarefor i=1 to size of(body)     do_decrypt2(byte(i));jump to bodyMalware InitializationDecrypterEncrypted Body(Not Visible Before Decryption)Virus Bodyfor i=1 to size of(body)     do_decrypt2(byte(i));jump to bodyAfter decryptionInfect_host();...extract_payload();......do_malicious_activity();Mutation Engine(creates a new decrypt method)Host-2 Infection process of polymorphic malwarePropagation StageHash value of the malware file: CEA795F3CDDBAB0D28D7CA64A624C5ABHash value of the malware file: 239EFA0B4139919AC47248564E03960ESame malware file with different hash valueA PREPRINT - OCTOBER 6, 2020

Figure 3: Typical metamorphic malware propagation

Figure 4: This ﬁgure shows the different additive laplace noise to original Lena image.

5.2 Analysis of the proposed algorithm

The reason behind of this study is the idea that using the law of large numbers theory, we have opportunity to obtain
more accurate classiﬁer model (for this work malware classiﬁcation) by creating new samples that is comparable to
original models which are created with original input instances.

In the proposed approach, there is a set of augmentation functions that acts a data creation source for CNN model. The
single augmentation function, f m

aug, is deﬁned as follows:

X (m)

aug = f m

aug(X )

8

(4)

DisassemblerMalware InitializationEncrypted BodyMalicious PartHost-1 Infection process of polymorphic malwareMutation Engine(creates a new variant with different structure)Host-2 Infection process of polymorphic malwarePropagation StageHash value of the malware file: CEA795F3CDDBAB0D28D7CA64A624C5ABHash value of the malware file: 239EFA0B4139919AC47248564E03960ESame malware file with different hash value &Different Code StructureCode Analyzer / PermutatorCode transformerAssemblerDisassemblerEncrypted BodyMalicious PartCode Analyzer / PermutatorCode transformerAssemblerMalware InitializationA PREPRINT - OCTOBER 6, 2020

Figure 5: This ﬁgure shows the different additive laplace noise to Trojan/Win32.VBKrypt.C122300 malware.

The each augmented dataset, X (m)
dataset. The ﬁnal augmented dataset is deﬁned as follows:

aug , using each augmentation algorithm, f (m)

aug , is combined into a single enhanced

Xaug =

t
(cid:91)

i=1

X (i)
aug

(5)

where t is the number of augmented dataset, X (i)

aug is the ith augmented dataset.

5.3

Implementation of the model

The pseudocode of transformation of PE executable to multichannel images is shown in Algorithm 1. The each member
(e(i)) of collected Windows executable ﬁle set, E, is converted multi-channel images in lines 5-6. For the ﬁrst channel of
the executable, one byte is read and then converted to the decimal representation in line 5. The decimal value is assigned
to the ﬁrst channel of the corresponding pixel, R(i, j, 0). In the same way, this byte’s entropy value is assigned to the
second channel of the corresponding pixel, R(i, j, 1). We used imgaug library which uses 3-channel PNG images
as input. On the other hand, we created 2-channel PNG images in this research. Since the imgaug software library
requires three channels images, we had to ﬁll the last channel, the Blue channel, with zeros.

Algorithm 1 PE malware to image conversion

1: Inputs:

PE executable set E, image width w, image height h, channel size c

R ← zeros(w, h, c) where R ∈ Rw×h×c
for each byte value b(j) ∈ e(i) do
R(i, j, 0) ← decimal(b(j))
R(i, j, 1) ← − (cid:80)

x∈b(j) (p(x) · log p(x))

2: for each e(i) ∈ E do
3:
4:
5:
6:
7:
8: end for
9: Outputs:

end for

Image dataset X

9

(cid:46) Create a zero ﬁlled matrix

(cid:46) 1st channel with value ∈ [0, 255]
(cid:46) 2nd channel with entropy ∈ [0, 255]

A PREPRINT - OCTOBER 6, 2020

The pseudocode of data-augmentation enhanced CNN malware detection are shown in Algorithm 2. The augmentation
procedure is implemented based on random noise assigment of each channel of the training dataset, X , with a set of
augmentation functions, Faug.

Algorithm 2 Data enhancement

1: Inputs:

X = {{(xi, yi) | i = 1, ..., n}, xi ∈ Rp, yi ∈ {−1, +1}}m
Faug
2: Initialize X (i)
3: for each f (i)
X (i)
aug ← f (i)
4:
X ← X (cid:83) X (i)
aug

aug = X
aug ∈ Faug do
aug(X )

5:
6: end for
7: Outputs:

i=1, Augmentation function set

Enhanced dataset X

.

6 Experiments

In this section, we use our public malware dataset 2 that can be accessed publicly. The malware classiﬁcation model
is compared with the original dataset. In Section 6.2, we explain the dataset and parameters that are used in our
experiments. The conventional CNN is applied the dataset and we ﬁnd the classiﬁcation performance in Section 6.4. In
Section 6.5, we show the emprical results of proposed augmented CNN training algorithm.

6.1 Experimental setup

To our knowledge, there is no public benchmark dataset for malware images approach to make an evaluation comparison.
We apply our dataset with different hyper-parameters to indicate the effectiveness and classiﬁcation performance of the
proposed model.

The experiments are done using the Python programming language and machine learning libraries Keras, Tensorﬂow,
and Scikit-learn. We used the Keras library to build CNN networks.

6.2 Dataset detail

We trained our classiﬁers with our public dataset which is summarized in Table 2 with seven different classes including
Worm, Downloader, Spyware, Adware, Exploit, Malware and Benign.

Table 2: Description of the training dataset used in the experiments

Malware type
Worm
Downloader
Spyware
Adware
Exploit
Malware
Benign
Total

#Inst.
1620
1512
582
1146
138
456
308
5762

There are 5762 malware samples from different classes in this dataset. The Cuckoo Sandbox application, as explained
above, is used to obtain the Windows API call sequences of malicious software, and VirusTotal Service is used to detect
the classes of malware.

Figure 6 illustrates the system architecture used to collect the data and labeling process. Our system consists of two
main parts, data collection, and labeling.

2https://github.com/ocatak/malware_api_class

10

A PREPRINT - OCTOBER 6, 2020

Figure 6: General system architecture. Architecture consists of 3 parts; data collection, Data pre-processing, and Data
classiﬁcation.

6.3 Evaluation

Although the dataset that is applied in our method is almost balanced, performance evaluation in terms of traditional
accuracy not sufﬁcient to obtain an optimal classiﬁer. Besides, we apply four metrics such as the overall prediction
accuracy, average recall, average precision [20] and F1-score, to estimate the classiﬁcation accuracy that are used as
measurement metrics in machine learning common [15, 14].

Precision is the ratio of predicted positive classes to positive predictions. Precision is estimated in Eq. 6.

P recision =

Correct
Correct + F alse

(6)

Recall is the ratio of positive classes to the sum of positive correct estimation and false negative. It can be called
Sensitivity. Recall is indicated in Eq. 7.

P recision =

Correct
Correct + M issed

(7)

First, our proposed evaluation model estimates precision and recall for each and then calculate their mean. In Eq. 8 and
Eq. 9, we present average precision and recall.

P recisionavg =

1
nclasses

nclasses−1
(cid:88)

i=0

(P reci × num_of _instancesi)

Recallavg =

1
nclasses

nclasses−1
(cid:88)

i=0

(Recalli × num_of _instancesi)

(8)

(9)

The average precision and recall values are calculated using the multiplication of recall and the number of instance in
the corresponding class. Precision and Recall are evaluated together in F-measure. It is the harmonic mean of precision
and recall. F-measure is provided in Eq. 10.

F1 = 2 ×

P recavg × Recallavg
P recavg + Recallavg

11

(10)

A PREPRINT - OCTOBER 6, 2020

6.4 Dataset results with conventional CNN

Figure 7 presents the accuracy performance of the conventional CNN model for our experimental data set. As shown in
ﬁgure, the model becomes its steady state after 80th epoch. Also, Figure 8 shows the loss value changes of classiﬁcation
model through epochs.

Figure 7: The ﬁgure shows the accuracy changes over learning iterations. As can be seen, although the training dataset
shows more stable progress, the test dataset is less stable, although it progresses together.

Figure 8: The ﬁgure shows the loss changes over learning iterations. As can be seen, although the training dataset
shows more stable progress, the test dataset is less stable, although it progresses together like in Figure 7.

A confusion matrix is applied to evaluate the performance of our model. The ﬁndings from Figure 9 show the confusion
matrix that was trained by using the original dataset by using CNN model. The ﬁndings of the confusion matrix indicate
that the classiﬁcation model performance is not good enough for the malware detection.

The testing classiﬁcation performance is measured through accuracy, precision, recall and F1 measure. Table 3 shows
the best performance of the conventional CNN method of each malware family.

As can be seen from the confusion matrix and classiﬁcation report, the classiﬁcation performance of the model obtained
with conventional CNN is rather low. According to these results, a standard CNN model with RGB type 3-channel
image training dataset is not suitable for malware detection and classiﬁcation.

12

(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:7)(cid:9)(cid:7)(cid:10)(cid:7)(cid:11)(cid:7)(cid:12)(cid:7)(cid:13)(cid:7)(cid:14)(cid:7)(cid:15)(cid:7)(cid:16)(cid:7)(cid:17)(cid:5)(cid:5)(cid:18)(cid:19)(cid:20)(cid:5)(cid:21)(cid:7)(cid:22)(cid:7)(cid:7)(cid:22)(cid:9)(cid:7)(cid:22)(cid:11)(cid:7)(cid:22)(cid:13)(cid:7)(cid:22)(cid:15)(cid:8)(cid:22)(cid:7)(cid:8)(cid:22)(cid:9)(cid:23)(cid:19)(cid:20)(cid:24)(cid:25)(cid:1)(cid:23)(cid:26)(cid:27)(cid:28)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:7)(cid:9)(cid:7)(cid:10)(cid:7)(cid:11)(cid:7)(cid:12)(cid:7)(cid:13)(cid:7)(cid:14)(cid:7)(cid:15)(cid:7)(cid:16)(cid:7)(cid:17)(cid:4)(cid:18)(cid:18)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:14)(cid:19)(cid:20)(cid:21)(cid:22)(cid:23)(cid:1)(cid:19)(cid:24)(cid:18)(cid:25)(cid:1)A PREPRINT - OCTOBER 6, 2020

Figure 9: The confusion matrix of the CNN model, which was trained using the original dataset.

Table 3: Classiﬁcation report of conventional CNN for each malware class

Worm
Downloader
Dropper
Spyware
Adware
Exploit
Malware
Benign

Precision Recall
0.58
0.11
0.05
0.69
0.72
0.26
0.00
0.83

0.60
0.82
0.62
0.39
0.22
0.86
0.00
0.77

F1
0.59
0.20
0.10
0.50
0.34
0.40
0.00
0.80

6.5 Dataset results with proposed method

Figure 10 shows the accuracy change in each iteration of the CNN model, which is trained with the malware dataset
containing a different amount of noise. The performance results of four CNN models, whose dataset is enriched by
using both Additive Laplace, Additive Gaussian, and Additive Poisson methods, are better than the CNN model’s
classiﬁcation performance that is trained only with the original training data set. When the noise ratio is 0.5, the original
CNN model’s classiﬁcation result is better than the CNN model with the Additive Poisson method. When the noise ratio
is increased to 0.8, the classiﬁcation results of CNN models with Additive Gaussian, Additive Laplace, and Additive
Poisson begin to decrease.

13

WormDownloaderDropperSpywareAdwareExploitMalwareBenignWormDownloaderDropperSpywareAdwareExploitMalwareBenign0.970.020.000.010.000.000.000.000.100.890.010.000.000.000.000.000.150.000.830.020.000.000.000.000.100.050.020.820.010.000.000.000.070.070.010.010.830.000.000.000.190.000.000.000.000.810.000.000.230.030.030.030.000.000.690.000.000.000.000.000.000.000.001.000.00.20.40.60.81.0A PREPRINT - OCTOBER 6, 2020

Figure 10: The different noise ratio accuracy results for additive Laplace/Gaussian/Poisson and original CNN model’s
accuracy results.

Figure 11 shows the accuracy change in each iteration of the CNN model, which is trained with the malware dataset
containing a different amount of noise with different combination of noise models. The performance results of ﬁve
CNN models, whose dataset is enriched by using combination of Additive Laplace, Additive Gaussian, and Additive
Poisson methods, are better than the CNN model’s classiﬁcation performance that is trained only with the original
training data set. When the noise ratio is 0.4, the original CNN model’s classiﬁcation result is better than the CNN
model with the several combination of noise injection methods.

Table 4 shows the accuracy changes with different noise methods and different noise ratio. The ﬁelds shown as bold on
the table show the best accuracy value of the column. The best accuracy value for Poisson noise is obtained with 0.902
and 0.3 noise ratio, the best accuracy value for Gaussian noise is obtained with 0.922 and 0.4 noise ratio, and the best

14

050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.01OriginalPoisson ModelGaussian ModelLaplace Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.2OriginalPoisson ModelGaussian ModelLaplace Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.4OriginalPoisson ModelGaussian ModelLaplace Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.6OriginalPoisson ModelGaussian ModelLaplace Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.8OriginalPoisson ModelGaussian ModelLaplace Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 1.0OriginalPoisson ModelGaussian ModelLaplace ModelA PREPRINT - OCTOBER 6, 2020

Figure 11: The different noise ratio accuracy results for the combination of additive Laplace/Gaussian/Poisson and
original CNN model’s accuracy results.

15

050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.01OriginalPoisson/Gaussian ModelPoisson/Laplace ModelLaplace/Gaussian ModelLaplace/Gaussian/Poisson Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.2OriginalPoisson/Gaussian ModelPoisson/Laplace ModelLaplace/Gaussian ModelLaplace/Gaussian/Poisson Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.4OriginalPoisson/Gaussian ModelPoisson/Laplace ModelLaplace/Gaussian ModelLaplace/Gaussian/Poisson Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.6OriginalPoisson/Gaussian ModelPoisson/Laplace ModelLaplace/Gaussian ModelLaplace/Gaussian/Poisson Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 0.8OriginalPoisson/Gaussian ModelPoisson/Laplace ModelLaplace/Gaussian ModelLaplace/Gaussian/Poisson Model050100150200250epoch0.00.20.40.60.81.0accuracyNoise scale 1.0OriginalPoisson/Gaussian ModelPoisson/Laplace ModelLaplace/Gaussian ModelLaplace/Gaussian/Poisson Modelaccuracy value for Laplace noise is obtained with 0.819 and 0.2 noise ratio. According to the table, we obtain the best
classiﬁcation performance with the Gaussian noise’s 0.4 noise ratio.

A PREPRINT - OCTOBER 6, 2020

Table 4: Noise injection accuracy results
Noise ratio Orginal Model Poission Gaussian Laplace

0.01
0.2
0.4
0.6
0.8
1.0

0.83
0.83
0.83
0.83
0.83
0.83

1.00
0.95
0.95
0.60
0.49
0.33

0.96
0.99
0.95
0.98
0.94
0.80

0.99
0.87
0.98
0.92
0.35
0.48

Table 5 shows the accuracy changes with the different combination of noise methods and different noise ratio. The ﬁelds
shown as bold on the table show the best accuracy value of the column. The best accuracy value for Poisson/Gaussian
noise is obtained with 0.93 and 0.2 noise ratio, the best accuracy value for Poisson/Laplace noise is obtained with 0.95
and 0.01 noise ratio, the best accuracy value for Laplace/Gaussian noise is obtained with 1.00 and 0.01 noise ratio.

Table 5: The best accuracy rates for the combination of each noise type

Noise Org Poisson
/ Gaus-
sian
0.01 0.83 0.90
0.83 0.93
0.2
0.83 0.90
0.4
0.83 0.47
0.6
0.83 0.52
0.8
0.83 0.76
1.0

Poisson
/
Laplace
0.95
0.90
0.71
0.52
0.47
0.52

Laplace
/ Gaus-
sian
0.98
0.95
0.90
0.38
0.76
0.47

All

0.96
0.95
0.42
0.76
0.66
0.76

The best classiﬁcation performance is performed by using the Poisson noise with 0.01 value has a 100% classiﬁcation
performance. Figure 12 shows the confusion matrix of the malware detection model with the best classiﬁcation
performance.

Figure 12: The confusion matrix of the CNN model with best data noise injection ratio.

7 Conclusion

The research study’s primary purpose is to provide an image augmentation enhanced deep convolutional neural network
(CNN) model for the detection of malware families in a metamorphic malware environment. The model architecture

16

WormDownloaderDropperSpywareAdwareExploitMalwareBenignWormDownloaderDropperSpywareAdwareExploitMalwareBenign1.000.000.000.000.000.000.000.000.001.000.000.000.000.000.000.000.000.001.000.000.000.000.000.000.000.000.001.000.000.000.000.000.000.000.000.001.000.000.000.000.000.000.000.000.001.000.000.000.000.000.000.000.000.001.000.000.000.000.000.000.000.000.001.000.00.20.40.60.81.0A PREPRINT - OCTOBER 6, 2020

consists of three main components: image generation from malware samples, image augmentation, and classifying the
malware families by using convolutional neural network models. In the ﬁrst component, the collected malware samples
are converted into binary representation using the windowing technique. We apply augmentation techniques in the
second component using the imgaug Python library. We enhanced our dataset using additive noise techniques such as
Gaussian, Laplacian, and Poisson. To demonstrate the proposed model’s effectiveness and classiﬁcation performance,
we apply it to our dataset with different hyper-parameters. Finally, we train our classiﬁer on our public dataset with
seven different classes, including Worm, Downloader, Spyware, Adware, Exploit, Malware, and 346 Benign. The
model becomes its steady-state after the 200th epoch.

We observe that the training dataset shows more stable progress, the test dataset is less stable, although it progresses
together. We use four different metrics, the overall prediction accuracy, average recall, average precision, and F1-score,
to evaluate the classiﬁcation accuracy. The confusion matrix results indicate that the classiﬁcation model performance is
not good enough for malware detection. The classiﬁcation performance of the model obtained with conventional CNN
is relatively low. According to these results, a standard CNN model with an RGB type 3-channel image training dataset
is not suitable for malware detection and classiﬁcation. The accuracy results of train and test datasets over the proposed
method on the augmented dataset. The augmentation is measured with varying noise ratio to assess the effectiveness of
the learning algorithm. This paper’s main contribution is to propose a data augmentation enhanced malware family
classiﬁcation model that exploits augmentation for variants of malware clones and takes advantage of CNN to improve
image classiﬁcation. It is evident from the results of this research that the data augmentation based on 3-channel image
classiﬁcation can signiﬁcantly inﬂuence the performance of malware family classiﬁcation.

References

[1] ÇATAK, F. Ö., AND YAZI, A. F. A benchmark API call dataset for windows PE malware classiﬁcation. CoRR

abs/1905.01999 (2019).

[2] CATAK, F. O., YAZI, A. F., ELEZAJ, O., AND AHMED, J. Deep learning based sequential model for malware

analysis using windows exe api calls. PeerJ Computer Science 6 (July 2020), e285.

[3] CHEN, B., REN, Z., YU, C., HUSSAIN, I., AND LIU, J. Adversarial examples for cnn-based malware detectors.

IEEE Access 7 (2019), 54360–54371.

[4] CUI, Z., XUE, F., CAI, X., CAO, Y., WANG, G., AND CHEN, J. Detection of malicious code variants based on

deep learning. IEEE Transactions on Industrial Informatics 14, 7 (July 2018), 3187–3196.

[5] DAI, Y., LI, H., QIAN, Y., AND LU, X. A malware classiﬁcation method based on memory dump grayscale

image. Digital Investigation 27 (2018), 30 – 37.

[6] DREW, J., HAHSLER, M., AND MOORE, T. Polymorphic malware detection using sequence classiﬁcation

methods and ensembles. EURASIP Journal on Information Security 2017, 1 (2017), 2.

[7] FU, J., XUE, J., WANG, Y., LIU, Z., AND SHAN, C. Malware visualization for ﬁne-grained classiﬁcation. IEEE

Access 6 (2018), 14510–14523.

[8] GIBERT, D., MATEU, C., PLANES, J., AND VICENS, R. Using convolutional neural networks for classiﬁcation
of malware represented as images. Journal of Computer Virology and Hacking Techniques 15, 1 (2019), 15–28.

[9] HIDA, T., AND SI, S. Lectures on white noise functionals. World Scientiﬁc, 2008.

[10] KANCHERLA, K., AND MUKKAMALA, S.

Image visualization based malware detection.

In 2013 IEEE

Symposium on Computational Intelligence in Cyber Security (CICS) (April 2013), pp. 40–44.

[11] KOSMIDIS, K., AND KALLONIATIS, C. Machine learning and images for malware detection and classiﬁcation.
In Proceedings of the 21st Pan-Hellenic Conference on Informatics (New York, NY, USA, 2017), PCI 2017,
Association for Computing Machinery.

[12] LIU, Y., LAI, Y., WANG, Z., AND YAN, H. A new learning approach to malware classiﬁcation using discrimina-

tive feature extraction. IEEE Access 7 (2019), 13015–13023.

[13] MAKANDAR, A., AND PATROT, A. Malware class recognition using image processing techniques. In 2017
International Conference on Data Management, Analytics and Innovation (ICDMAI) (Feb 2017), pp. 76–80.

[14] MAKHOUL, J., KUBALA, F., SCHWARTZ, R., AND WEISCHEDEL, R. Performance measures for information

extraction. In In Proceedings of DARPA Broadcast News Workshop (1999), pp. 249–252.

[15] MANNING, C. D., RAGHAVAN, P., AND SCHÜTZE, H. Introduction to Information Retrieval. Cambridge

University Press, New York, NY, USA, 2008.

17

A PREPRINT - OCTOBER 6, 2020

[16] MIRA, F. A review paper of malware detection using api call sequences. In 2019 2nd International Conference

on Computer Applications Information Security (ICCAIS) (2019), pp. 1–6.

[17] NATARAJ, L., KARTHIKEYAN, S., JACOB, G., AND MANJUNATH, B. S. Malware images: Visualization and
automatic classiﬁcation. In Proceedings of the 8th International Symposium on Visualization for Cyber Security
(New York, NY, USA, 2011), VizSec ’11, Association for Computing Machinery.

[18] NI, S., QIAN, Q., AND ZHANG, R. Malware identiﬁcation using visualization images and deep learning.

Computers & Security 77 (2018), 871 – 885.

[19] TOBIYAMA, S., YAMAGUCHI, Y., SHIMADA, H., IKUSE, T., AND YAGI, T. Malware detection with deep neural
network using process behavior. In 2016 IEEE 40th Annual Computer Software and Applications Conference
(COMPSAC) (June 2016), vol. 2, pp. 577–582.

[20] TURPIN, A., AND SCHOLER, F. User performance versus precision measures for simple search tasks. In
Proceedings of the 29th Annual International ACM SIGIR Conference on Research and Development in Information
Retrieval (New York, NY, USA, 2006), SIGIR ’06, ACM, pp. 11–18.

[21] VENKATRAMAN, S., ALAZAB, M., AND VINAYAKUMAR, R. A hybrid deep learning image-based analysis for

effective malware detection. Journal of Information Security and Applications 47 (2019), 377 – 389.

[22] YAKURA, H., SHINOZAKI, S., NISHIMURA, R., OYAMA, Y., AND SAKUMA, J. Malware analysis of imaged
In Proceedings of the Eighth
binary samples by convolutional neural network with attention mechanism.
ACM Conference on Data and Application Security and Privacy (New York, NY, USA, 2018), CODASPY ’18,
Association for Computing Machinery, p. 127–134.

[23] YAN, J., QI, Y., AND RAO, Q. Detecting malware with an ensemble method based on deep neural network.

Security and Communication Networks 2018 (2018).

[24] YAZI, A. F., CATAK, F. O., AND GUL, E. Classiﬁcation of methamorphic malware with deep learning(lstm). In

2019 27th Signal Processing and Communications Applications Conference (SIU) (2019), pp. 1–4.

[25] YOO, S., KIM, S., AND KANG, B. B. The image game: Exploit kit detection based on recursive convolutional

neural networks. IEEE Access 8 (2020), 18808–18821.

[26] YUE, S. Imbalanced malware images classiﬁcation: a cnn based approach. arXiv preprint arXiv:1708.08042

(2017).

[27] ZHANG, J., QIN, Z., YIN, H., OU, L., AND HU, Y. Irmd: Malware variant detection using opcode image
recognition. In 2016 IEEE 22nd International Conference on Parallel and Distributed Systems (ICPADS) (Dec
2016), pp. 1175–1180.

18

