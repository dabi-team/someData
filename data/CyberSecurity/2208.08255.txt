2
2
0
2

g
u
A
7
1

]

R
C
.
s
c
[

1
v
5
5
2
8
0
.
8
0
2
2
:
v
i
X
r
a

1

On the Elements of Datasets for Cyber
Physical Systems Security

1School of Computer Science and Informatics, De Montfort University, Leicester, UK

Ashraf Tantawy 1

(cid:70)

Abstract—Datasets are essential to apply AI algorithms to Cyber
Physical System (CPS) Security. Due to scarcity of real CPS datasets,
researchers elected to generate their own datasets using either real
or virtualized testbeds. However, unlike other AI domains, a CPS is a
complex system with many interfaces that determine its behavior. A
dataset that comprises merely a collection of sensor measurements
and network trafﬁc may not be sufﬁcient to develop resilient AI de-
fensive or offensive agents. In this paper, we study the elements
of CPS security datasets required to capture the system behavior
and interactions, and propose a dataset architecture that has the
potential to enhance the performance of AI algorithms in securing
cyber physical systems. The framework includes dataset elements,
attack representation, and required dataset features. We compare
existing datasets to the proposed architecture to identify the current
limitations and discuss the future of CPS dataset generation using
testbeds.

ICS, SCADA, Security, Attack, Dataset,

Index Terms—Cyber Physical System, CPS, Industrial Control Sys-
tem,
Intrusion Detection,
Defensive Security, Offensive Security, Safety, Failure modes, DoS,
Testbed, CPS Security, Stealthy attack, integrity attack.

1 INTRODUCTION
A Cyber Physical System (CPS) is an integration of phys-
ical processes, computations, and networking [1]. CPS
applications are omnipresent, including process control
systems, power generation and distribution, manufactur-
ing, autonomous vehicles, transportation, and healthcare.
A distinguishing feature of CPSs is that they are mission-
critical, requiring high-level of resilience to failures. Over
the last decade, CPS design shifted from proprietary hard-
ware and software to open-source, standardized, hard-
ware, software, and communications. This shift is moti-
vated by the faster development cycle, lower development
and maintenance cost, and inter-operability between sys-
tems offered by standard open-source solutions. Despite
these advantageous, adopting standard open-source solu-
tions increased the cyber attack surface of systems that
were one day thought of as secure-by-design.

A signiﬁcant amount of research has been recently de-
voted to secure this new generation of open CPS. With the

This work is currently peer-reviewed. Please cite the latest preprint version
on arXiv.

proliferation of AI, particularly Deep Learning (DL), the
application of AI algorithms for defensive CPS security
grew both in academia and industry [2]. Modern DL algo-
rithms require large training datasets to achieve good re-
sults. Large CPS datasets are currently far-from achievable
for two key reasons. First, CPS datasets are quite unique
and distinct from IT datasets, therefore utilizing available
IT security datasets does not capture the dynamics of
CPS. Second, large datasets available from real-life CPSs
such as manufacturing facilities, transportation systems,
or healthcare are not released for obvious security reasons.
In response, researchers elected to generate their own CPS
datasets. This is achieved by building either laboratory-
scale physical testbeds or virtual testbeds [3]. Some re-
searchers release their datasets for public use. However,
the released datasets are still with limited use as they
lack key elements required for research use. To overcome
these limitations, researchers opt for building their own
testbeds to generate datasets according to their research
needs. This trend is likely to continue, especially with the
absence of any standards to describe the required dataset
features and exchange format. Due to these facts, the
academic research progress may be hindered signiﬁcantly
and the research may be limited only to entities that have
access to large conﬁdential datasets.

This paper dissects CPSs to develop the key ele-
ments that should be included in published CPS security
datasets. The motivation is twofold: (1) rich datasets en-
able the development of more resilient AI models for CPS
security, and (2) enable the reuse of published datasets
by other research groups without a need to rebuild their
own testbeds, eliminating the redundant work that slows
down the research progress. The main contributions of the
paper are: (1) dissection of the general CPS architecture
and extraction of key dataset elements with illustrative
scenarios, (2) study of CPS cyber attacks and their repre-
sentation in the dataset, (3) analysis of required dataset
features to develop more resilient CPS security solutions,
(4) discussion on testbeds as the main dataset generation
mechanism and providing an eyesight to solve the scala-
bility problem, and (5) survey existing datasets and their

 
 
 
 
 
 
Physical System

A

S

Cyber System

Fig. 1: CPS security dataset is inﬂuenced by the physical
system, cyber system, attacker, and their interactions.

coverage for the proposed framework.

Figure 1 is an abstract representation of the cyber
physical system showing the three key components in the
security context; the physical system, cyber system, and
the attacker. The key elements of the dataset explained
in this paper are extracted from the interactions between
these three components. The paper is organized as fol-
lows: Section 2 presents a general architecture for CPSs
showing possible attack entry points. Sections 3, 4, and
5 explain physical data, cyber data, and attack data ele-
ments, respectively. Dataset attributes including labeling,
class balancing, and scalability are discussed in Section 6.
The role of testbeds in dataset generation is elucidated in
Section 7. Section 8 presents a discussion on the proposed
framework and future research directions. Section 9 is a
survey on existing datasets and their coverage for the
proposed elements. The work is concluded in Section 10.

2 CPS ARCHITECTURE: ATTACK ENTRY POINTS

Figure 2 shows the general CPS architecture. The Physical
layer comprises the physical system, sensors for system
monitoring, and actuators for system control. A sen-
sor network connects smart sensors and actuators that
have communication capabilities. For a geographically
dispersed CPS, e.g. a manufacturing facility, the sensor
network is usually referred to as the Field network. For
traditional hard-wired devices, sensors and actuators are
connected in a point-to-point fashion to their respective
controllers, and there is no sensor network. Examples
of sensor networks include Fieldbus Foundation for the
process control industry [4], IEC 62026-3 (DeviceNet) for
the manufacturing industry [5], DNP3 for power systems
[6], SENT SAE-J2716 for the automotive industry [7], and
Wireless Zigbee for home automation [8].

The Control layer comprises a set of controller nodes
that utilize sensor measurements to control the physical
system via actuators. The controllers are interconnected
using a control network. Examples of control network pro-
tocols are CANbus for the automotive industry [9], Mod-
bus/TCP for the process industry [10], and DNP3 over
TCP/IP for the power industry [6]. The control network
typically has Human Machine Interface (HMI) nodes for
monitoring and supervisory control. The HMI could be in
the form of a dashboard as in the automotive industry, or
an operator workstation as in the process control industry.
Programming nodes may optionally be connected to the

2

Fig. 2: General CPS architecture. Entry points for remote
cyber attackers are shown.

control network to modify and download controllers’ soft-
ware. In some industries, e.g., process control and power
generation, control modiﬁcations are frequent, resulting
in a permanent attachment of a programming machine to
the control network. In other industries with infrequent
control software update, e.g., automotive industry, the
programming machine is attached to the control network
as needed (typically during vehicle maintenance), or the
software is downloaded Over The Air (OTA) from a
remote server [11]. The control network may be connected
to the internet for remote technical support, although
this practice is strongly discouraged. Current industry
practice is to grant local/remote elevated access to the
control network in very limited circumstances due to the
associated security risk. The control network also may
support wireless communication to connect with external
wireless devices, such as Bluetooth devices in vehicles or
RC Joysticks in UAVs. In such cases, the control network
is typically segmented to secure the system.

Some variants of the control layer architecture may
exist, depending on the CPS domain and the technology
used. First, in distributed applications, the controller func-
tion could be embedded on the smart actuator, eliminating
the need for a separate controller. In some industries,
e.g., process control, stand-alone controllers such as a Pro-
grammable Logic Controller (PLC), are used as a backup
to embedded ﬁeld controllers implemented on the smart
actuators. Second, the control layer may be composed of
several hierarchical networks to support different levels of
supervisory control and decision making such as the Su-
pervisory Control and Data Acquisition System (SCADA).
Finally, the control network may be segmented for en-
hanced security and organization of control functions,

e.g., infotainment CAN and Drivetrain CAN in a vehicle.
The application layer varies signiﬁcantly across differ-
ent CPS domains, and it could be further decomposed
into several hierarchical layers. In general, the application
layer reﬂects the business side of the CPS domain, and
typically comprises a corporate network with a variety
of computing nodes that perform data analytics on CPS-
collected data to support business decision-making. The
corporate network may be locally-located with the CPS or
remotely-located, and in some architectures the corporate
network is split into a local network and one or more
remote networks. The process control and power indus-
tries typically have a hybrid architecture of both local and
remote corporate networks, while the automotive/UAV
industry has a remote backend that connects to vehicles.
Two security mechanisms are typically used to avoid
insecure direct communication between the application
layer network and control layer network: A ﬁrewall that
separates the two networks, and a DeMilitarized Zone
(DMZ) that acts as a real-time data buffer between the two
networks [12]. Figure 2 shows also the attack entry points,
which are crucial to understand the CPS attack surface
and possible traces, hence the required dataset elements.
The cyber system is reachable either by gaining physical
access to the cyber network at any layer, or remotely over
a communication link. Figure 3 summarizes the attack
entry methods for the general CPS architecture.

3 PHYSICAL SYSTEM DATA
Figure 4 illustrates the classical structure of a feedback
control system. The physical system block integrates the
physical system, sensors, and actuators in Figure 2. The
system model is designated by M. The input to the
system is the action vector, u, sent by the controllers to
the system actuators, and the output from the system
is the measurement vector, y, representing sensor mea-
surements. The internal state of the physical system is
denoted by the state vector x. The physical system is
subject to an external disturbance vector, d, that may alter
the system behavior hence feedback control is required.
The controller is a general term used to describe both
regulatory as well as safety controllers that partially or
fully shut down a system when entering a hazardous
operating zone. The controllers are the nodes connected
to both the sensor network (if applicable) and the control
network in Figure 2. We designate the controller algorithm
by A. In real-life applications, the physical system is de-
composed into several components, and each component

Physical
Layer

Attack
Entry

Control
Layer

Application
Layer

Intrusion

Remote
(Wireless)

Intrusion

Remote
(Wireless
/Internet)

Intrusion

Remote
(Wireless
/Internet)

Fig. 3: Attack entry methods for the CPS architecture.

3

d

u

Physical System
M(x, u; θ)

y

Controllers
A(y; η)

Fig. 4: Feedback control system. Human intervention via
HMI nodes can alter/bypass the controller behavior.

is controlled by one or more controllers. Therefore, Figure
4 could be interpreted as the feedback control system of
a subsystem component as well. The human input to the
controller represents human intervention via HMI nodes
or similar on the control network in Figure 2. This human
input may alter the control algorithm behavior or bypass
it altogether. In the following, we study the importance of
the elements of the tuple (cid:104)u, y, d, M, A(cid:105) for CPS security
datasets.

3.1 System Inputs and Outputs
System input and output data (u, y) enable us to use data-
driven approaches, e.g., machine learning and system
identiﬁcation algorithms, to build a system model that
captures the normal system behavior. This data is crucial
for the CPS security dataset, and it is what mainly distin-
guishes CPS security from IT security datasets. This data
has to be time-stamped and therefore synchronization
between CPS nodes is essential. This type of data is the
most common in CPS security datasets.

3.2 System Disturbances

A continuous-time state space model for a given physical
system could be expressed as:

˙x(t) = f (x(t), u(t); θ), y(t) = g(x(t), u(t); θ)

(1)

where θ is the parameters vector. The system disturbances
vector d is a subset of the parameters vector θ. Therefore,
different values for the disturbances d give rise to a family
of system models and consequently system behaviors. If
the disturbances are not measured and reported in the
dataset, then the underlying assumption is that the distur-
bances are constant throughout the dataset collection pro-
cess. Therefore, the accuracy of any data-driven security
algorithm that utilizes the dataset will be contingent on
the closeness of the current plant disturbance values to the
benchmark values. Any signiﬁcant disturbance changes
may lead to inaccuracies in the security algorithms, e.g.,
false alarms. To illustrate this point, consider the Con-
tinuous Stirred Tank chemical Reactor (CSTR) process in
Figure 5. The system input is the inlet ﬂow F , the system
output is the outlet product concentration CA, reactor
volume V is a model parameter, and the inlet product
concentration CA0 is the plant disturbance. The solution

)

3

m
/
l
o
m

(

A
C

1.5

1

0.5

0

0

CA0 = 0.925 mol/m3
CA0 = 1.925 mol/m3

Normal
˙x(t) = f (x(t), u(t); θ)

[F1 causes]

Failure 1
˙x(t) = f1(x(t), u(t); θ1)

4

1

2

3

4

t (min)

Fig. 5: Left: Continuous Stirred Tank Reactor (CSTR) pro-
cess, Right: CSTR outlet concentration behavior for inlet
concentration step change. Model values: Kp = 0.5, τ =
0.5 min, (CA0)init = 0.925 mol/m3

of the state space model for a ﬁrst-order chemical reaction
CSTR with rate k could be expressed as [13]:

CA = (CA)init + Kp [CA0 − (CA0)init]

1 − e−t/τ (cid:17)
(cid:16)

(2)

,

(3)

τ =

Kp =

F
F + V k

V
F + V k
Figure 5 plots the outlet concentration CA vs time after
a disturbance step change in the inlet concentration CA0.
If the dataset does not report any information about CA0,
the indicated behavior may be interpreted by an intrusion
detection algorithm as an anomalous behavior since the
outlet concentration has changed without any change in
the input ﬂow F . This fact remains valid with the closed-
loop system because the input/output system relationship
is no longer valid regardless of the controller attempt to
return the output to its setpoint value.
(cid:5) Essential: A dataset should include all measurable distur-
bances as part of the physical system features, along with system
inputs and outputs, i.e., (cid:104)u, y, d(cid:105).

3.3 System Failure Modes

Any CPS is subject to component failures during oper-
ation. When one or more components fail, the physical
system model, whether physics-based or data-driven, is
no longer valid, and the system behaves according to
a new dynamical model. Therefore, anomaly detection
systems that rely on such models may raise an attack alert
whereas the system may just have a physical failure. Some
common failure modes are known in advance. For such
failures, a physics-based model could be developed if the
physics of failure are understood. For parametric faults,
the system model is given by the same original state space
model with different parameter values:
˙x(t) = f (x(t), u(t); ˇθ)
(4)
where ˇθ is the parameter vector after failure. For struc-
tural faults, the system model is typically deﬁned by a
different state space model:

˙x(t) = ˇf (x(t), u(t); θ(cid:48))

(5)

If the physics of failure are not well-understood or difﬁcult
to model, then the failure scenario could be experimented

[

F
2
c
a
u
s
e
s
]

F

1

∧

F

2

ca

uses

[

F
2

c
a
u
s
e
s
]

Failure 2
˙x(t) = f2(x(t), u(t); θ2)

[F1 causes]

Failures 1,2
˙x(t) = f3(x(t), u(t); θ3)

Fig. 6: Modeling a CPS with known failure modes using a
Hybrid automaton.

in real life and the data collected could be used to develop
a data-driven model for the failure mode. The dynamics of
the normal and faulty system modes could be modeled in
a uniﬁed framework using hybrid automata modeling ap-
proach [14]. Figure 6 is an example hybrid automaton for
a system with two types of faults and their combination.
The dynamics of each discrete mode could be represented
either by a state-space or a data-driven model. Machine
learning algorithms could utilize the hybrid automaton
model in the same way a healthy system model is used
to distinguish between a cyber attack and system failure
scenarios. However, it should be noted that attack scenar-
ios that replicate the behavior of the hybrid automaton
(though less-likely) cannot be distinguished from system
failures using physical system data only.

The detection of unknown failure modes relies mainly
on anomaly detection using unsupervised learning tech-
niques [15]. Using a variety of distance metrics, the system
is considered in a failure mode if the distance between
the current data and the nominal behavior benchmark is
statistically signiﬁcant. Since this approach is the same
as anomaly detection for cyber attacks that relies only on
physical system data, it may not be possible to distinguish
between a cyber attack and a system failure. Therefore, for
both known and unknown failure cases, it is a challenge to
differentiate between a cyber attack and a system failure
by relying on physical system data only. Cyber data can
help to distinguish between these two scenarios since a cy-
ber attack typically leaves a ﬁngerprint in the cyber data,
contrary to a system failure. This is another motivation
for integrating physical and cyber data for multimodal
cyber attack detection. Cyber data is discussed in details
in section 4.

In summary, it is strongly desirable to include all
modes of operation of the system, including normal and
failure modes, in the dataset to reduce the number of
false alarms resulting from unknown modes. Dataset
records associated with these modes have to be labeled
accordingly. For system failures, the number of failure
modes may increase exponentially with system scale, and
an engineering judgment is needed to include the most
probable failures. This information is typically included
in reliability databooks for each CPS domain.

(cid:5) Essential: A dataset should include all normal modes of
operation and the most probable failure modes for a given CPS.

TABLE 1: System trace violation of physical model M or
control algorithm model A could be utilized in data prepro-
cessing and model-based detection.

5

3.4 System Model

There are many scenarios where it is desired to augment
a published dataset for research purposes. For instance,
class imbalance is typical for cyber security datasets. In-
stead of using oversampling techniques for the minority
class (predominantly attack data), it is more accurate to
generate synthetic data for the system behavior under
different attack scenarios. This is particularly important
if the dataset is collected using a physical testbed and
some attack scenarios may be infeasible to implement as
they would cause a system hazard. As another example, in
real systems, some system states and disturbances cannot
be measured because they are either too expensive to
be measured directly or because there is no supporting
sensing technology. In all these scenarios, a system model
M could be used to generate the required data or to
estimate the required variables. As a simple example,
consider the CSTR system behavior in (2). If the inlet
concentration disturbance variable is missing from the
dataset, it is straightforward to show that it could be
estimated by:

CA0 = (CA0)init +

CA − (CA)init
(cid:0)1 − e−t/τ (cid:1)
Kp

(6)

which could be calculated at any given time provided that
the inlet ﬂow F , outlet concentration CA, and initial inlet
concentration are available.
(cid:5) Optional: A system physics-based model could augment
a dataset to estimate unknown disturbances or generate a
synthetic dataset.

3.5 Control Algorithms

Assuming an automatic mode of operation, the sys-
tem control algorithms impose additional constraints
on input-output relationships. Together with the system
model, a system trace on the following form could be
generated by iteratively going around the closed loop
system in Figure 4:

u[1] M−−→ y[1] A−→ u[2] M−−→ y[2] . . . A−→ u[n] M−−→ y[n]

(7)

The idea of trace generation could be used for data pre-
processing and model-based detection. Table 1 shows the
four cases where the system trace values satisfy/violate
the system model M and/or the controller algorithm A.
Satisfaction of both M and A indicate a normal system
operation with high probability. There is still a possibility
that a stealthy attack may produce a valid system trace,
but this requires either perfect system and control knowl-
edge, or the random generation of coincidental valid trace,
both have very low probability. Trace data that satisfy
A but violate system model M may indicate a system
failure. Violation of controller algorithm A is a strong
indication of a cyber attack assuming very low probability
of controller hardware/software bugs that could produce

A(y) = u
A(y) (cid:54)= u

M(u) = y M(u) (cid:54)= y

Normal
Attack

Failure
Attack, Failure

incorrect results. It should be noted that for the control
algorithm to be useful
in data tracing, the controller
has to be in auto mode to ensure the controller is not
bypassed. This information can be obtained from timed
controller log. In addition, the parameter values of the
controller have to be known. As an example, for a basic
PID controller, proportional, derivative, integral constants
and the setpoint have to be deﬁned.
(cid:5) Optional: A controller model could augment a dataset to
assist in data preprocessing, labeling, and model-based detection
methods.

4 CYBER SYSTEM DATA

Apart from physical and side channel attacks on sensors
and actuators, all attacks on the CPS are injected via the
cyber system. Therefore, looking into the physical system
data in isolation does not give the full picture. Physical
system input or output changes are the last step in a
sequence of attack steps that may span from hours to
months, leaving a trace in the cyber system, being in a
host node or in network trafﬁc. Hence, it is intuitive that
both physical and cyber data should be jointly investi-
gated. From Figure 2, cyber nodes can be categorized into
computing nodes and communication nodes. Computing
nodes include sensors, actuators, controllers, HMI nodes,
log servers, and corporate workstations. Communication
nodes are networking devices that form the sensor net-
work, control network(s), and the backend corporate net-
work. In this section, we investigate the elements of CPS
datasets as related to these cyber nodes.

4.1 Network Trafﬁc Log

Network trafﬁc data is the most common cyber data in all
available datasets. Ideally, network trafﬁc data should be
collected from all available sensor and control networks.
If the time window for data collection is long, this will
give rise to a massive amount of data. This data may have
a lot of redundancy during stable CPS operation. This
is because CPS trafﬁc is near-deterministic (although the
degree of determinism varies across CPS domains), as sen-
sors, controllers, and actuators communicate periodically
to exchange measurements and control actions. Therefore,
it is important to pre-process the data as it is collected
to remove any redundancies. This will reduce the dataset
size, enhance the learning rate and reduce overﬁtting for
AI algorithms, and minimize the class imbalance problem
(discussed in Section 6). Apart from redundant data, there
are few operational events that result in a temporary irreg-
ular trafﬁc. For example, a disturbance beyond controller
operating range may require an operator intervention

to switch the control mode to manual. This is a typical
scenario in the process control industry and more recently
in autonomous systems. A system hazardous state may
trigger a safety action to prevent incidents. An operator
may manually poll some information from a controller for
monitoring purposes. In these scenarios, the intervention,
whether human or automatic, introduces irregular trafﬁc
between different system nodes. It is important that the
dataset captures these irregular trafﬁc cases. Otherwise,
defensive AI models will not be robust against irregular
events. Manual injection of these actions during dataset
generation is a laborious task, and automation is needed.
Communication protocols for CPSs vary signiﬁcantly
by domain. In addition, a single node may support
multiple protocols to communicate with other nodes at
different levels. For example, a controller may support
different protocols to communicate with smart sensors
(e.g., WirelessHART), HMI (e.g., Modbus TCP), and a log
server (e.g., OPC). This multiplexing of protocols on a sin-
gle node induces a speciﬁc timing behavior that may not
be available with a single protocol per node. Therefore,
it is important to embody this protocol diversity in the
dataset to be representative of the given CPS domain.

(cid:5) Essential: A dataset should include a network trafﬁc log for
all available sensor and control networks. Trafﬁc log should
include all supported communication protocols in addition to
regular and irregular trafﬁc scenarios.

4.2 Host Log

A host is any computing node, including smart sensors
and actuators, controllers, HMI nodes, and servers (we
exclude network equipment and their vulnerabilities from
the discussion). The compromise of a host node requires
a series of attack steps that typically involve a reconnais-
sance phase, communication with the remote node, and
vulnerability exploitation to gain a node access, possibly
followed by a privilege escalation. Most of these attack
steps could leave multiple trace evidences in the host log,
which could lead to attack discovery when combined with
other network and physical features. Host logs are entirely
overlooked in all available datasets.

A host log could be divided into Operating System
(OS) logs and application logs. An OS log typically in-
cludes a variety of time-stamped events, such as running
processes, system calls, authentication logs, ﬁle transac-
tions, user actions, and system errors. Application logs
vary signiﬁcantly based on the application design and its
security features. For example, the log for an HMI ap-
plication that supports multiple user proﬁles may include
time-stamped login data and various user action statistics.
To illustrate the potential beneﬁts of using host logs,
consider the scenario in Figure 7, where the controller
is switched to manual mode followed by a command to
increase the speed of rotation of a motor. This scenario
could be initiated by an operator via the HMI, an attacker
who compromised the HMI, or by another node via IP
Spooﬁng attack that generates identical network trafﬁc to
the controller. For these three scenarios, the network and

6

Host log

IP Spooﬁng

Controller

Fig. 7: A host log may help differentiating between a
legitimate operator action and an attacker compromise.

physical data are identical (ignoring the initial network
ﬁngerprint of the IP spooﬁng attack that fades with time).
The host log data is what could make the distinction.
For the operator case, the HMI host log data contains
operator actions to override the controller. The compro-
mised HMI case has this same data with the added HMI
node compromise events. The IP spooﬁng attack case does
not have any ﬁngerprint in the host log. Table 2 shows
the legitimate and attack scenarios, versus three designs
of the Intrusion Detection System (IDS); an IDS trained
on physical data only, an IDS trained on physical and
network data, and an IDS trained on physical, network,
and host log data. For the ﬁrst two IDS designs, the IDS
is trained on this pattern using physical and network
data, so the decision will always be ”Negative”, as it is
oblivious to the initiator of the network trafﬁc. The IDS
trained on the augmented dataset with host log data is
able to differentiate between the legitimate operator action
and the HMI compromise/IP spooﬁng attacks, with the
added advantage of attack classiﬁcation.

The host log may also enable the discovery of stealthy
attacks. In a stealthy attack, the attacker manipulates local
controller data while transmitting fake normal data over
the network to evade the receiving nodes. This scenario is
depicted in Figure 8, where an attacker node acting as a
Man In The Middle (MITM) node sends fake normal data
to the HMI while sending hazardous data to the controller.
The controller log will include the malicious data if the at-
tacker was not able to compromise the controller to over-
write the log. In this case, HMI and controller logs will
not match. Alternatively, if the attacker compromised the
controller, controller log may have an attack ﬁngerprint.
In all possible cases, a host log represents an additional
source of information that makes it harder for the attacker
to make different information sources consistent, hence
increases the probability of attack detection. Finally, on
the local node level, the host log has a wealth of informa-

TABLE 2: IDS decision for an operation scenario where the
controller is bypassed and a control command is sent directly
to the actuator. TN: True Negative, FN: False Negative, TP:
True Positive.
True State

IDS Decision for Different Training Data

Normal
Attack

Physical
TN
FN

PHY & Network
TN
FN

PHY & NET & Host
TN
TP

tion to support the development of a probabilistic model
(proﬁle) for each node/node user. This enables an early
detection of attacks on the node level before the attack
spreads to other network nodes. On the system level, the
fusion of host logs from system nodes could reveal the
sequence of attack steps across nodes, e.g. pivot attacks.
These patterns could be discovered by AI algorithms only
if the host logs are available and aggregated.

(cid:5) Essential: A dataset should include a host log for each node,
including the controller and HMI nodes as a minimum.

5 CYBER PHYSICAL SYSTEM ATTACKS

Attacks could be classiﬁed according to the security objec-
tive into Conﬁdentiality, Integrity, and Availability (CIA)
attacks. In CPS, conﬁdentiality is arguably not the main
attack objective at the control network level, but rather the
system safety. Therefore, we limit our discussion to in-
tegrity attacks where data is manipulated, and availability
attacks where the objective is the denial of system services.
One important characteristic of a realistic dataset is to
include labeled data for the whole attack process, starting
from the reconnaissance stage until reaching the ﬁnal
attack goal. In this section, we summarize the attack types
that need to be included in realistic datasets.

5.1 Integrity Attacks

In integrity attacks, the attacker tampers with the data
streams that carry system measurements and/or control
actions. This could be at the end node post compromise or
by manipulating network trafﬁc through the data stream.
Three data types that can disrupt system operation are
false data, late data, or missing data. Network trafﬁc
manipulation is done by intercepting a packet then either
dropping it (missing data), submitting it later (replay
attack, late data), or modifying and resubmitting it (false
data). Figure 9 shows the key data streams, which are
sensor → controller → actuator, sensor/controller → DM,
and DM → controller/actuator, where DM designates
higher-level Decision-Making nodes beyond the low-level
controller, e.g., HMI or a supervisory/safety controller.
The DM-controller data stream is for centralized architec-
tures where sensors/actuators are hardwired to the con-
troller, while sensor-DM and DM-actuator data streams
are for smart sensor/actuator nodes. Although tampering
could be random, often times the objective is to cause the

Host log

Speed = 500 rpm

Speed = 1000 rpm

Controller

MITM

Fig. 8: Host log and the detection of stealthy attacks.

7

Physical System

3

A

1

S

Controller

2

DM

Fig. 9: Integrity attack injection points. An HMI is shown
as an example DM node. Dashed lines are for smart
sensors/actuators.

physical system to move to or remain in an unsafe state
and to prevent any automatic or manual corrective action.
This is done by manipulating actuator commands either
directly or indirectly through the sensor → controller →
actuator stream. The shortest path is to manipulate the
actuator directly (Figure 9, injection point 3). However,
this may not always be possible depending on the CPS
architecture and available vulnerabilities. A longer path is
to manipulate sensor data or controller parameters, such
as a setpoint or tuning parameters (Figure 9, injection
point 2 and 3, respectively). It should be noted that for
hardwired centralized systems, a compromise of the cen-
tral controller enables the attacker to manipulate sensor,
actuator, and controller data alike. This is a clear drawback
of centralized architectures that are still quite common in
different CPS domains.

A key question for integrity attacks is how the data
will be manipulated. To deﬁne the signal waveform to
be injected, several factors come into play; the system
dynamics, current system state, the speed by which the
attacker wants to reach the unsafe system state, and
whether a stealthy attack is required. There is no single
waveform that ﬁts all systems, and the optimal waveform
depends on the attack objective, system model, as well
as existing detection methods. These factors have to be
taken into account when generating attacks for datasets.
Unfortunately, the majority of existing datasets utilize
classical waveforms such as the step, pulse, and ramp
functions, independent of the given system. The design
of injection attack waveforms for a given system and
attack requirements is important for both design-time
veriﬁcation and run-time penetration testing, yet is not
explored fully in the literature (an exception is the control-
theoretic approach to stealthy attacks, as discussed in the
next section). With the lack of analytical or algorithmic
methods to identify the optimal waveforms, experiments
on a simulated system model may be a viable alternative.

5.2 Stealthy Attacks

The notion of a stealthy attack has a slightly different
meaning in different research communities. In control-
theoretic research, it is assumed that the injected values
are transmitted as-is to the decision-making nodes. There-
fore, the main research focus is on designing the injected
waveforms to avoid detection [16]. By contrast, in CPS

Safe State

Sensor-DM
Stream
True State
Malicious State

Normal Operation
DM Intervention (futile)
TABLE 3: A stealthy attack by manipulating sensor-DM
stream results in a futile intervention or a system hazard.

Unsafe
State
(Natural/Attack)
DM Intervention
Hazard

security research, the injected data and the transmitted
data to the decision-making nodes are decoupled, and
the attacker can inject whatever data values that achieve
the attack objective while transmitting fake data to the
decision-making nodes. The stealthy signal approach is
more applicable to CPS domains where a sudden state
change could be observed even if malicious data is sent
to the observer, e.g., aircrafts, while sensor → DM data
stream injection approach is applicable to CPSs that are
not directly-observable, e.g., process control plants.

Stealthy attacks launched by tampering with the sen-
sor → DM data stream could result in dangerous sce-
narios. Table 3 summarizes the four scenarios based on
the current system state and whether the sensor → DM
stream is tampered with. Tampering here refers to report-
ing the opposite system state to the DM (i.e., reporting
safe measurements when the system is in an unsafe state
and vice versa). In the ﬁrst row in Table 3, when the
system is unsafe (whether naturally or driven by an
integrity attack on the sensor → controller → actuator
path), the true information is reported which results in
an intervention to safeguard the system. In the second
row, when the system is in a safe state and malicious
unsafe measurement information is reported, An unnec-
essary intervention will be triggered that may result in
a system shutdown. Although this type of attack may
result only in system disruption and ﬁnancial losses, it
is easier than driving the system into an unsafe state
(see a more detailed discussion in [17]). The bottom right
cell in Table 3 is the most dangerous, where the system
is in an unsafe state, while the information reported to
decision-making nodes reﬂect a safe system state. This
will prevent any protective or corrective action for the
system, and the consequences could be catastrophic. In
general, the design of a stealthy attack is not a trivial
task, as real world systems are much more complicated
than toy systems treated in the literature. A typical CPS
may have hundreds of components coupled together, and
an attack on one component will manifest itself in its
connected components. The design of a stealthy attack in
such case would require the manipulation of all impacted
process variables.

A CPS security dataset has to include the three com-
binations of integrity attacks in Table 3. For stealthy
attacks, the sensor data logged in the dataset must be
the malicious data, and not the true physical system mea-
surements, as the malicious data is the actual information
sent to DM nodes during the attack. Depending on the
number and location of DM nodes for the given CPS,
the dataset may include partial stealthy attacks, where
malicious information is sent to some, but not all, DM

8

nodes. This is an easier case for the intrusion detection
system than the complete stealthy attack case, yet includes
likely variations in real-life scenarios. Currently, none of
the available datasets has such a level of sophisticated
attacks and variations, and therefore, detection of injected
attacks in the datasets does not represent a major chal-
lenge. Incorporation of such attacks could promote new
types of intrusion detection systems, e.g., multi-modal
detectors that utilize data from different sources along
with system models as discussed in this work.

(cid:5) Essential: A dataset should include integrity attacks, includ-
ing variants of stealthy attacks with logged malicious data.

5.3 Denial of Service (DoS) Attacks

DoS attacks aim to shutdown the services provided by
the cyber system. For example, a system controller has
the main function of regulating the actuators based on
sensor measurements and the control algorithm, and a
secondary function of reporting the data to the HMI and
log servers. A DoS attack against a controller aims to
shutdown both control and reporting services, typically
by ﬂooding the controller with a large number of packets
in a short time to consume the controller resources. There
are two key points for DoS attacks. First, the impact of
the DoS attack depends on the cyber system fail-safe
conﬁguration and the physical system/environment state.
As an example, if the cyber system is conﬁgured to use
the last-known-good-value for actuator outputs, then the
DoS attack will not have an impact if the system is stable
with no disturbances. Second, most controllers deployed
in a mission-critical CPS run one form or another of a
real-time operating system (RTOS), which deploys an RT
scheduling algorithm that gives a high priority for control
tasks regardless of other conditions. Therefore, a DoS
attack may have an insigniﬁcant impact on the control
services and system stability. These facts are overlooked in
existing datasets that include DoS attacks. Datasets with
DoS attacks require logging labeled network, physical,
and host data to assess the real impact of the attack and
to design the appropriate detection and countermeasure
algorithms.

(cid:5) Essential: A dataset should include DoS attacks with/without
synchronized system disturbances and related host log data for
actual scheduling times for control and communication tasks.

5.4 Zero-day Attacks

Zero-day attacks cannot be included in the training
dataset because by deﬁnition they exploit new system
vulnerabilities. However, they can be included in the
test dataset to evaluate the performance of detection and
response systems to unseen attacks. Zero-day attack de-
tection relies mainly on anomaly detection methods that
build a baseline model [18]. Therefore, zero-day attacks
should not induce data records signiﬁcantly deviating
from the baseline, otherwise their detection will be a
trivial task. Figure 10 summarizes the types of attacks
discussed in this section.

Attack

(cid:5) Essential: A dataset should have sufﬁcient coverage for attack
types and attack attributes as related to the underlying CPS.

9

Availability (DoS)

Integrity

Zero-day

S → C → A

DM

MITM

Host

MITM

Host

Drop

Replay Modify

Drop

Replay Modify

Fig. 10: Essential CPS attacks for a dataset. S → C → A
stands for Sensor → Controller → Actuator path.

(cid:5) Essential: A test dataset should include attacks not present in
the training dataset, which are not signiﬁcantly deviating from
normal system behavior.

5.5 Attack Vectors

Existing datasets assume the presence of the attacker on
the control network. This assumption is valid only in case
of insider attacks. In real attack scenarios, the attacker
reaches the control network after several attack steps,
starting from an entry point such as a wireless access
point or a remote internet connection. These steps leave
a footprint on different logs, including host, network,
and physical system logs. A realistic dataset needs to
include full attack vectors. The challenge here is that
there could be many attack entry points, and the different
combinations of attack vectors may be prohibitively large.
Some heuristics are needed, such as selecting the most
probable/vulnerable attack entry points, the elimination
of attacks that have the same or similar ﬁngerprint on the
system, and grouping similar nodes according to a given
criterion, e.g., OS, running services, and communication
protocols.

(cid:5) Essential: A dataset should include the most probable attack
vectors starting from the attack entry point to the target node.

5.6 Attack Attributes

Every attack type has a set of associated attributes. A DoS
attack attribute could be the data transfer rate to the target
node. An integrity attack attribute could be the injected
signal characteristics. Every node has a unique reaction to
different attribute values. For example, a DoS attack with
moderate trafﬁc rate may have insigniﬁcant impact on a
controller that runs an RTOS that prioritizes control tasks
over communication tasks. Therefore, for the published
datasets to be useful for the wider research community, a
good coverage for different attacks and their attributes is
required. One challenge is that to produce a dataset with
wider coverage, the number of attacks to be injected may
grow exponentially, and techniques to limit this number
may be needed, such as node similarity, injected signal
impact, and discretization of continuous-value attributes.
Automating relevant attack identiﬁcation from a given CPS
is an important research topic that received little attention
from the research community.

6 DATASET QUALITY
In this section, we discuss required qualities of a CPS
dataset for more-efﬁcient learning. Most discussed aspects
are projections of the classical dataset quality require-
ments for any machine learning domain.
Data Labeling. Multiple dataset records could belong to a
single attack. Hence, each attack should have a unique
identiﬁer used as a label for each data record that belongs
to the attack, in addition to the classical normal/attack
or multiclass labeling. This allows for the development
of more sophisticated attack detection and prevention
architectures that correlate data rather than work on in-
dividual records. To add unique attack ID labels, a degree
of automation is required in monitoring and collecting the
dataset. Manual labeling in this case would be a daunting
task. In addition, each dataset record has to be labeled
with the associated mode of operation of the system,
whether a normal mode of operation or a failure mode,
as discussed in section 3.3. Therefore, a dataset label is
a pair (cid:104)a, m(cid:105), where a ∈ A is the attack unique ID and
m ∈ M is the associated system mode.
Class Imbalance . Class imbalance is typical
for CPS
datasets. Besides undersampling and oversampling tech-
niques [19], the problem could be addressed at the dataset
generation time by injecting more attacks. This is feasible
only if the attack injection is partially or fully automated,
which requires executable attacker models that could be
used in penetration testing. Attacker models have recently
gained research interest due to the increasing demand for
automated penetration testing and big datasets [20].
Data Redundancy. Data records for the same CPS state do
not carry new information. A dataset reporting one week
of normal operation with a 1-sec time resolution could be
reduced to an equivalent few-hours dataset. Redundant
data consume more training resources when developing
detection and response systems without a real beneﬁt.
Elimination of redundant data is crucial.
Time Synchronization. With synchronized nodes, the times-
tamps of dataset records could be used to recon-
struct the causal relationship between system and attack
events. Out-of-sync nodes introduce out-of-sequence data
records, resulting in incorrect models of the system behav-
ior. This is particularly important for synthesized datasets
formed by either merging physical and cyber data or by
merging malicious network trafﬁc with normal trafﬁc.
Dataset Scale. Existing datasets are generated from small-
scale CPSs. Real world systems may have thousands
of sensors, actuators, and controllers connected using
complex network architectures. Data generated from real
systems is different from testbed-generated data in mag-
nitude and correlations between variables. It is difﬁcult to
guarantee that solutions developed using testbed datasets
would be scalable. Unfortunately, this is an inherent prob-
lem with testbeds that is unlikely to be solved in the

10

virtual images for industrial nodes such as sensors, actua-
tors, controllers, PLCs, and embedded systems in general,
compared to virtual images for IT components such as
PCs, switches, and routers. Although virtualization may
not be as accurate as real system behavior, high-ﬁdelity
models for both physical and cyber components can well
approximate the real-world behavior.

7.2 Dataset Generation

The generation of CPS datasets is a laborious process.
Despite the advancement of penetration testing tools that
automate many of the attacker’s actions, the overall pro-
cess is still human-based. This results in a slow release of
different versions of the datasets. Full automation of the
process, including human-CPS interaction, disturbance
injection, attack design and injection, and automated data
logging and labeling, is still a distant goal.

8 DISCUSSION AND FUTURE DIRECTIONS
CPS datasets are domain and application-speciﬁc. Al-
though a general architecture could be proposed, akin to
Figure 2, the structure and content of data vary. Physical
system data depends entirely on the dynamics of the
system. An autonomous vehicle has different dynamics
than a manufacturing plant. Cyber system data depends
on the communication protocols used and the amount of
human-CPS interaction. An autonomous drone that has
minimum to no human intervention would have different
cyber data than a manufacturing plant that runs in a
semi-autonomous mode with frequent human interven-
tion, even if the communication protocols happened to be
the same. This fact makes the availability of a common
benchmark dataset a very difﬁcult goal to achieve.

The amount of data resulting from the elements pro-
posed in this work may look excessive. Given the au-
tonomous nature of CPSs, the collection of such data
should not be problematic. Most embedded and RTOSs
support multilevel host logging. Most networking equip-
ment support mirroring, and if not, host networking data
could be collected and aggregated. Sensor and actuator
data are available either in the host controller or in the
smart sensor and actuator embedded system. The true
challenge is the analysis and extraction of meaningful
patterns from such big data. As discusses earlier, CPS data
is mostly redundant, with varying degrees depending
on the domain. An essential data pre-processing task is
to remove this redundancy before applying any analysis
or AI learning algorithms. The automation of CPS data
redundancy removal is an important research direction.

The injection of cyber attacks to generate a somewhat
balanced dataset is a laborious task. Automated pene-
tration testing can help, but the planning phase where
the system is studied and vulnerabilities are selected for
exploitation are mostly human-centric. Automated extrac-
tion and deployment of relevant critical attacks for a given
CPS is an important, yet difﬁcult, research goal.

The construction of physical

testbeds to generate
datasets proved to be of limited beneﬁts to the research

Fig. 11: Dataset elements discussed in the paper. Attack
diversity and dataset attributes are not explicitly depicted.

near future given the scarcity of real world CPS security
datasets. We brieﬂy discuss one potential solution using
virtual testbeds in Section 7.1.

Figure 11 summarizes the dataset elements as extracted
from the general CPS architecture presented in Figure 2.

7 TESTBEDS AND SCALABILITY
Available datasets lack some or most of the features pre-
sented in this paper. As a result, some research groups
opted for building their own physical or virtual testbeds
to have full control on the experiments. In principle, the
key beneﬁts of the testbeds for the research community
are twofold: (1) generate public datasets, and (2) facilitate
the replication of the testbed in less time and/or with less
cost. Unfortunately, only few of these testbeds are used to
generate public datasets, as summarized in Section 9. Fur-
thermore, to the best of author’s knowledge, none of the
available testbeds has detailed documentation to enable
other research teams to replicate the testbed. The result is
a forest of isolated testbeds with local beneﬁts only to the
individual research groups. For a comprehensive survey
on available testbeds, the reader is referred to [3].

7.1 Virtual Testbeds

Scalability is a major issue with physical testbeds, as it is
not possible to match the scale of real systems with limited
time and budget. The resulting dataset will remain small-
scale when compared to real systems. Virtual testbeds
represent a viable alternative. The key advantages of vir-
tual testbeds when compared to physical testbeds are the
minimum development time, scalability, and adaptability.
It is possible to add hundreds of virtual nodes progra-
matically to an existing virtual system using a set of pre-
conﬁgured images, and both physical system and network
simulation tools are available. Also, virtual testbeds can
adopt easily by modifying cyber node images or replacing
the physical system simulator to support a different CPS
application. However, one challenge is the availability of

community. Virtual testbed development is a promising
direction. Virtualization in the domain of embedded and
CPSs is not yet a mature technology when compared to
IT systems. Embedded systems are time-critical, and vir-
tualization of embedded nodes needs to capture this time
resolution on a coarse level as dictated by the application.

9 RELATED WORK
This section is a survey on existing CPS security datasets.
Table 4 summarizes the elements of each dataset against
the proposed elements in this paper. It should be noted
that the literature has many papers describing labora-
tory testbeds for the purpose of conducting research on
CPS security. However, not all datasets are released for
public use. Also, there may be small-scale datasets not
mentioned in Table 4. These datasets are not used in the
literature and their features are already captured by other
datasets in Table 4, so expanding the list will not con-
tribute to the discussion. The interested reader is referred
to the recent survey on datasets and testbeds in [3].

9.1 IT Domain Datasets

The most common datasets used to evaluate network
based IDS are DARPA dataset [21], DARPA Operationally
Transparent Cyber (OpTc) dataset [22], [23], KDDCup99
[24], NSL-KDD [25], UNSW-NB15 [26], botnet dataset [27],
and CICIDS2017 [28]. These datasets are not suitable for
CPS security research because: (1) the collected trafﬁc data
represents generic IT networks, which lacks industrial
communication protocols as well as the industrial trafﬁc
patterns, and (2) no physical system is associated with the
cyber system, hence no physical data is available, which
represents a key distinguishing feature of CPS security.

9.2 CPS Domain - Physical and Cyber Datasets

The most widely-used datasets are generated by iTrust re-
search center and maintained at iTrust website [29]. These
datasets contain network trafﬁc data and sensor/actuator
data. The Secure Water Treatment (SWaT) dataset is gener-
ated by a small-scale water treatment testbed with 51 sen-
sors and actuators [30], [31]. The dataset includes 11 days
of continuous operation, 7 days of normal operation and
4 days with attack scenarios. The SWaT testbed was used
to generate two additional datasets (S317, CISS2019.A1) in
the context of Critical Infrastructure Security Showdown
(CISS/STUD), where a number of red teams are allowed
to design and launch attacks in real-time on the testbed.
The Electric Power and Intelligent Control (EPIC) dataset
is generated from a small-scale electric power generation
and distribution testbed and includes 30 minutes with
8 operating scenarios [32], [33]. A derived dataset from
EPIC, Blaq 0, was generated in a hackathon competition
and contains mainly network pcap ﬁles. Finally, network
trafﬁc data for 40 IoT honeypots with public IP addresses
was collected for 1.5 years to generate an IoT dataset [34].
Researchers in collaboration with Oak Ridge National
Laboratory (ORNL) developed three Industrial Control

11

System (ICS) datasets. Dataset 1 is generated from a sim-
ple power generation testbed with a simulated physical
process. The dataset includes natural, faulty, maintenance,
and attack scenarios. Network data includes IDS alerts
only [35]. Dataset 2 is generated from a small-scale gas
pipeline testbed. Network trafﬁc is a stripped-out version
of Modbus ﬁelds, so some features such as inter-arrival
time, number of packets, and TCP trafﬁc pattern are
missing [36]. Dataset 3 is generated from a gas pipeline
ICS, and was later found to be ﬂawed with unintended
patterns that led ML algorithms to identify attacks with
100% accuracy. A new version of the dataset with more
randomness was released [37]. The three testbeds and
datasets are described in [38], [39], and maintained at
the website [40]. Researchers at Queensland University
of Technology, Australia, developed a small-scale ICS
testbed and generated two datasets for two different
industrial processes [41]. Physical process measurements
were extracted from control device logs, and network
trafﬁc was captured in pcap ﬁles. One of the datasets,
QUT S7, is available for download at [42]. The authors
in [43] generate a dataset called RICSel21 from a virtual
testbed for a power network. The captured packets are for
IEC-60870-5-104 protocol.

9.3 CPS Domain - Cyber Datasets

A number of datasets that contain industrial network traf-
ﬁc data only have been published. A synthesized dataset
for IEC 61580 substations has been developed to cover
GOOSE messaging, a Manufacturing Message Speciﬁca-
tion (MMS) that is prevalent for automated protection
and control in modernized substations [44], [45]. The
substation measurements are provided separately in CSV
ﬁles for the normal scenario only. The authors assume
physical data is the same under attack scenarios, given
the open-loop nature of the system. This assumption is
not very accurate because the state estimator node, and
potentially the IDS node, can see only the manipulated
data stream, and not the true data. ELECTRA dataset
has been generated to model the behavior of the control
system of an electric traction substation used in a real
high-speed railway area [46], [47]. The dataset supports
Modbus and S7Comm protocols. Lemay is a SCADA
network dataset for Modbus/TCP protocol for a small
electrical network [48], [49]. Several other raw datasets
have been collected in the form of pcap ﬁles as a rep-
resentative of CPS network trafﬁc, without labeling or
feature extraction. 4SCIS Geek Lounge dataset is collected
from the geek lounge of 4SCIS annual summit and con-
tains network trafﬁc data from a variety of industrial
SCADA and PLC equipment, RTUs, servers, and indus-
trial network equipment [50]. The dataset comprises mul-
tiple pcap ﬁles with Modbus/TCP, BACnet, Ethernet/IP,
and CIP protocols. S4X15CTF dataset was collected from
Security Scientiﬁc Symposium 2015 (S4x15) during the
Capture-the-Flag (CTF) competition using a variety of
PLC’s, HMI workstations and standard corporate IT PC’s
[51]. DEFCON23 dataset is collected from ICS village at

DEFCON conference with hardware from different ven-
dors supporting Modbus TCP, Proﬁnet DCP, Proﬁnet IO,
and Proﬁnet DCP protocols [52]. For all these datasets,
since the system lounge is open to event participants to
experiment with, the data may or may not include cyber
attacks. With the lack of attack labels, it is challenging to
use these datasets for research work.

9.4 CPS Domain - Physical Datasets

Water Distribution dataset (WADI) was generated by
iTrust from a testbed having 123 sensors and actuators.
The dataset includes physical measurements for 16 days
of continuous operation, including 2 days with attack sce-
narios [53]. The WADI testbed was used to generate two
additional datasets to support the BATtle of Attack Detec-
tion ALgorithms (BATADAL) competition. One dataset is
for one year with no attacks, and the other dataset is for
6 months and includes several attacks with labels [54].
The Hardware In the Loop (HIL) Augmented ICS Security
(HAI) dataset is developed using a laboratory testbed for
power generation and storage [55]. The dataset contains
physical plant measurements with different injection at-
tacks on set points, process variables, control outputs, and
control parameters. Attacks are automatically-generated
and some attacks are stealthy. A system architecture to
expand the dataset to include network and host data
and more attack scenarios based on MITRE ATT&CK
framework is reported in [56].

Table 4 highlights the limitations of existing datasets.
Host logs are entirely missing. System failures are not
considered in almost all datasets. There is no diversity
in injected cyber attacks. DoS attacks are not considered
in most datasets. Attack labeling is mainly for individual
records and lacks the complete attack vector perspective.
Class imbalance is a true issue due to the difﬁculty of
administering cyber attacks that are mostly injected man-
ually. Finally, an issue that is not clear from Table 4 is
the difﬁculty of extracting information from published
datasets. Constructing Table 4 has taken a great deal of
effort with yet some inaccuracies due to the poor docu-
mentation of most published datasets. Lack of proper doc-
umentation, besides dataset content, compel researchers
to generate their own datasets, resulting in duplicated
efforts with no reward to the research community.

10 CONCLUSION

Existing CPS security datasets lack some essential features
that are necessary to build robust AI solutions. The dataset
elements presented in this paper have the potential to
enable the development of high-performance AI models
and to facilitate dataset reuse. Physical testbeds, although
useful to gain initial insights, are not a scalable solution
and are unlikely to play a major role in the future of CPS
security research. Virtual testbeds have the potential to
overcome the problems of dataset scalability, high cost
and long development time of physical testbeds, as well
as testbed reuse.

12

Several research challenges remain unsolved. First,
for a given CPS, the identiﬁcation of the most-important
attack scenarios as well as the automated design of such
attacks is largely unsolved. Most of existing research
work dealing with threat modeling focuses on the design
of attacks on the physical level rather than a complete
cyber-physical scenario. Practically, the process largely
depends on the penetration tester’s experience, and it
is hard to ﬁnd a joint expertise in both the physical
and cyber domains. Second, virtualization progress in the
embedded systems ﬁeld is slower than its IT counterpart.
Without a complete virtualization echo system, fast and
efﬁcient development of near real-time virtual testbeds is
a challenging goal. Third, the domain of CPS security is
still in its infancy, lacking any standards or benchmarks.
The development of benchmarks is essential to compare
developed models akin to other domains of AI.

REFERENCES

[1] E. A. Lee and S. A. Seshia, Introduction to embedded systems: A

[2]

cyber-physical systems approach. Mit Press, 2016.
J. Sakhnini and H. Karimipour, AI and Security of Cyber
Physical Systems: Opportunities
Springer
International Publishing, pp. 1–4. [Online]. Available: https:
//doi.org/10.1007/978-3-030-45541-5 1

and Challenges.

[3] M. Conti, D. Donadel, and F. Turrin, “A survey on industrial
control system testbeds and datasets for security research,”
IEEE Communications Surveys & Tutorials, vol. 23, no. 4, pp. 2248–
2294, 2021.
S. J. Vincent, “Foundation ﬁeldbus high speed ethernet control
system,” Fieldbus Inc, 2001.

[4]

[5] L.-V. Switchgear, “Controlgear—controller-device interfaces
(cdi’s)—part 3: Devicenet,” IEC Std, vol. 62, pp. 026–3, 2000.
S. East, J. Butts, M. Papa, and S. Shenoi, “A taxonomy of attacks
on the dnp3 protocol,” in International Conference on Critical
Infrastructure Protection. Springer, 2009, pp. 67–81.

[6]

[7] M. Costin, R. Horner, J. Jaegers, D. Daecke, A. Grossmann,
B. Opitz, M. ten Brinke, T. Tiek, and E. Visser, “J2716 sent-single
edge nibble transmission, updates and status,” SAE Technical
Paper, Tech. Rep., 2011.
S. Safaric and K. Malaric, “Zigbee wireless standard,” in Pro-
ceedings ELMAR 2006.

IEEE, 2006, pp. 259–262.

[8]

[9] M. Bozdal, M. Samie, and I. Jennions, “A survey on can bus
protocol: Attacks, challenges, and potential solutions,” in 2018
International Conference on Computing, Electronics & Communica-
tions Engineering (iCCECE).

IEEE, 2018, pp. 201–205.

[10] M. Bashendy, S. Eltanbouly, A. Tantawy, and A. Erradi, “Design
and implementation of cyber-physical attacks on modbus/tcp
protocol,” in World Congress on Industrial Control Systems Security
(WCICSS-2020), 2020.

[11] T. e. a. Chowdhury, “Safe and secure automotive over-the-air
updates,” in International Conference on Computer Safety, Reliabil-
ity, and Security. Springer, 2018, pp. 172–187.

[12] K. Stouffer, J. Falco, K. Scarfone et al., “Guide to industrial
control systems (ics) security,” NIST special publication, vol. 800,
no. 82, pp. 16–16, 2011.

[13] T. E. Marlin, “Process control,” Chemical Engineering Series,

McGraw-Hill International Editions: New York, 1995.

[14] T. A. Henzinger, “The theory of hybrid automata,” in Veriﬁcation
of digital and hybrid systems. Springer, 2000, pp. 265–292.
[15] A. Purarjomandlangrudi, A. H. Ghapanchi, and M. Esmalifalak,
“A data mining approach for fault diagnosis: An application of
anomaly detection algorithm,” Measurement, vol. 55, pp. 343–
352, 2014.

[16] Y. Mo and B. Sinopoli, “On the performance degradation of
cyber-physical systems under stealthy integrity attacks,” IEEE
Transactions on Automatic Control, vol. 61, no. 9, pp. 2618–2624,
2015.

[17] A. Tantawy, “Automated malware design for cyber physical
systems,” in 2021 9th International Symposium on Digital Forensics
and Security (ISDFS).
IEEE, 2021, pp. 1–6.

[18] S. Omar, A. Ngadi, and H. H. Jebur, “Machine learning tech-
niques for anomaly detection: an overview,” International Journal
of Computer Applications, vol. 79, no. 2, 2013.

[19] H. He and E. A. Garcia, “Learning from imbalanced data,” IEEE
Transactions on knowledge and data engineering, vol. 21, no. 9, pp.
1263–1284, 2009.

[20] C. Deloglos, C. Elks, and A. Tantawy, “An attacker modeling
framework for the assessment of cyber-physical systems secu-
rity,” in International Conference on Computer Safety, Reliability,
and Security. Springer, 2020, pp. 150–163.

[21] R. Lippmann, J. W. Haines, D. J. Fried, J. Korba, and K. Das,
“The 1999 darpa off-line intrusion detection evaluation,” Com-
puter networks, vol. 34, no. 4, pp. 579–595, 2000.

[22] R. Arantes, C. Weir, H. Hannon, and M. Kulseng, “Operationally
[Online]. Available: https:

transparent cyber (optc),” 2021.
//dx.doi.org/10.21227/edq8-nk52

[23] M. M. Anjum, S. Iqbal, and B. Hamelin, “Analyzing the use-
fulness of the darpa optc dataset in cyber threat detection
research,” pp. 27–32, 2021.

[24] S. D. Bay, D. Kibler, M. J. Pazzani, and P. Smyth, “The uci
kdd archive of large data sets for data mining research and
experimentation,” ACM SIGKDD explorations newsletter, vol. 2,
no. 2, pp. 81–85, 2000.

[25] M. Tavallaee, E. Bagheri, W. Lu, and A. A. Ghorbani, “A detailed
analysis of the kdd cup 99 data set,” in 2009 IEEE symposium on
computational intelligence for security and defense applications. Ieee,
2009, pp. 1–6.

[26] N. Moustafa and J. Slay, “Unsw-nb15: a comprehensive data set
for network intrusion detection systems (unsw-nb15 network
data set),” in 2015 military communications and information sys-
tems conference (MilCIS).

IEEE, 2015, pp. 1–6.

[27] S. Garcia, M. Grill, J. Stiborek, and A. Zunino, “An empirical
comparison of botnet detection methods,” computers & security,
vol. 45, pp. 100–123, 2014.

[28] I. Sharafaldin, A. H. Lashkari, and A. A. Ghorbani, “Toward
generating a new intrusion detection dataset and intrusion
trafﬁc characterization.” vol. 1, 2018, pp. 108–116.

[29] iTrust. SWAT, WADI, EPIC, CISS dataset characteristics.
Design.
of
https://itrust.sutd.edu.sg/itrust-labs

Singapore
[Online]. Available:
datasets/dataset info/ (Accessed 10-Aug-2022).

Technology

University

and

[30] J. Goh, S. Adepu, K. N. Junejo, and A. Mathur, “A dataset
to support research in the design of secure water treatment
systems,” in International conference on critical information infras-
tructures security. Springer, 2016, pp. 88–99.

[31] A. P. Mathur and N. O. Tippenhauer, “Swat: A water treatment
testbed for research and training on ics security,” in 2016 interna-
tional workshop on cyber-physical systems for smart water networks
(CySWater).

IEEE, 2016, pp. 31–36.

[32] S. Adepu, N. K. Kandasamy, and A. Mathur, “Epic: An electric
power testbed for research and training in cyber physical sys-
tems security,” in Computer Security. Springer, 2018, pp. 37–52.
[33] C. M. Ahmed and N. K. Kandasamy, “A comprehensive dataset
from a smart grid testbed for machine learning based cps
security research,” in International Workshop on Cyber-Physical
Security for Critical Infrastructures Protection.
Springer, 2020,
pp. 123–135.

[34] Y. L. Aung, H. H. Tiang, H. Wijaya, M. Ochoa, and J. Zhou,
“Scalable vpn-forwarded honeypots: Dataset and threat intelli-
gence insights,” in Sixth Annual Industrial Control System Security
(ICSS) Workshop, 2020, pp. 21–30.

[35] S. Pan, T. Morris, and U. Adhikari, “Developing a hybrid intru-
sion detection system using data mining for power systems,”
IEEE Transactions on Smart Grid, vol. 6, no. 6, pp. 3104–3113,
2015.

[36] J. M. Beaver, R. C. Borges-Hink, and M. A. Buckner, “An
evaluation of machine learning methods to detect malicious
scada communications,” in 2013 12th international conference on
machine learning and applications, vol. 2.
IEEE, 2013, pp. 54–59.
[37] I. P. Turnipseed, A new scada dataset for intrusion detection research.

Mississippi State University, 2015.

13

[38] T. Morris, A. Srivastava, B. Reaves, W. Gao, K. Pavurapu, and
R. Reddi, “A control system testbed to validate critical in-
frastructure protection concepts,” International Journal of Critical
Infrastructure Protection, vol. 4, no. 2, pp. 88–103, 2011.

[39] T. Morris and W. Gao, “Industrial control system trafﬁc data
sets for intrusion detection research,” in International conference
on critical infrastructure protection. Springer, 2014, pp. 65–78.

control

Industrial

[40] T. Morris.

cyber attack
datasets. [Online]. Available: https://sites.google.com/a/uah.
edu/tommy-morris-uah/ics-data-sets (Accessed 10-Aug-2022).
[41] D. Myers, S. Suriadi, K. Radke, and E. Foo, “Anomaly detection
for industrial control systems using process mining,” Computers
& Security, vol. 78, pp. 103–125, 2018.

system (ICS)

[42] D. Myers, S. Suriadi, K. Radke, and E. Foo. Qut

s7
communication dataset. Queensland University of Technology,
Australia.
[Online]. Available: https://cloudstor.aarnet.edu.
au/plus/index.php/s/9qFfeVmfX7K5IDH (Accessed 10-Aug-
2022).

[43] C.-Y. Lin, A. Fundin, E. Westring, T. Gustafsson, and S. Nadim-
Tehrani, “Ricsel21 data collection: Attacks in a virtual power
network,” in 2021 IEEE International Conference on Communica-
tions, Control, and Computing Technologies for Smart Grids (Smart-
GridComm).

IEEE, 2021, pp. 201–206.

[44] P. P. Biswas, H. C. Tan, Q. Zhu, Y. Li, D. Mashima, and
B. Chen, “A synthesized dataset for cybersecurity study of iec
61850 based substation,” in 2019 IEEE International Conference
on Communications, Control, and Computing Technologies for Smart
Grids (SmartGridComm).

IEEE, 2019, pp. 1–7.

IEC 61850 based substation.

[45] P. P. Biswas et al. A synthesized dataset for cybersecurity study
[Online]. Available: https:
(Ac-

of
//github.com/smartgridadsc/IEC61850SecurityDataset
cessed 10-Aug-2022).
´A. L. P. G ´omez, L. F. Maim ´o, A. H. Celdr´an, F. J. G. Clemente,
C. C. Sarmiento, C. J. D. C. Masa, and R. M. Nistal, “On the
generation of anomaly detection datasets in industrial control
systems,” IEEE Access, vol. 7, pp. 177 460–177 473, 2019.

[46]

[47] Electra dataset: Anomaly detection ics dataset. [Online]. Avail-
able: http://perception.inf.um.es/ICS-datasets/ (Accessed 10-
Aug-2022).

[48] A. Lemay and J. M. Fernandez, “Providing SCADA network
data sets for intrusion detection research,” in 9th Workshop on
Cyber Security Experimentation and Test (CSET 16), 2016.

[50] 4SCIS geek lounge dataset.

[49] Lemay modbus dataset. [Online]. Available: https://github.
com/antoine-lemay/Modbus dataset (Accessed 10-Aug-2022).
[Online]. Available: https:
//www.netresec.com/?page=PCAP4SICS (Accessed 10-Aug-
2022).

[51] Security scientiﬁc symposium dataset.

[Online]. Available:
https://www.netresec.com/?page=DigitalBond S4 (Accessed
10-Aug-2022).

[52] Defcon23 dataset. [Online]. Available: https://www.defcon.
10-Aug-

(Accessed

org/html/defcon-23/dc-23-index.html
2022).

[53] C. M. Ahmed, V. R. Palleti, and A. P. Mathur, “Wadi: a water
distribution testbed for research in the design of secure cyber
physical systems,” in Proceedings of the 3rd international workshop
on cyber-physical systems for smart water networks, 2017, pp. 25–28.
[54] R. Taormina et al., “Battle of the attack detection algorithms:
Disclosing cyber attacks on water distribution networks,” Jour-
nal of Water Resources Planning and Management, vol. 144, no. 8,
2018.

[55] H.-K. Shin, W. Lee, J.-H. Yun, and H. Kim, “HAI 1.0: HIL-based
augmented ICS security dataset,” in 13th USENIX Workshop on
Cyber Security Experimentation and Test (CSET 20), 2020.

[56] S. Choi, J. Choi, J.-H. Yun, B.-G. Min, and H. Kim, “Expansion
of ICS testbed for security validation based on MITRE ATT&CK
techniques,” in 13th USENIX Workshop on Cyber Security Experi-
mentation and Test (CSET 20), 2020.

[57] Water treatment plant data set. [Online]. Available: https://
archive.ics.uci.edu/ml/datasets/water+treatment+plant
(Ac-
cessed 10-Aug-2022).

)

M
8
8
3

,

K
0
5
9
(

)

M
6
.
3

,

K
5
1
(

K
0
6
1

K
0
4

K
6
3
2

K
8
9

M
5

K
0
1

K
0
3
4

M
6
1

M
7
8
3

K
2
1
9

M
6
.
1

M
3

K
0
1
3

M
4
.
1

K
0
6
9

K
3
1

M
1

7
2
5

%
6

%
0

%
0
7

%
4

%
7
2

%
7
3

%
6
0
0
.
0

%
4
8

%
2
6

%
5
1

%
1
3

%
4
.
3

%
0
0
1

K
N
U

K
N
U

K
N
U

%
1

%
4

%
8
.
1

-

Y

Y

N

4

4

4

N

N

N

Y

Y

Y

Y

Y

0
1

N

0
1

N

0
1

N

0
1

N

0
1

N

Y

Y

Y

N

1

-

(cid:71)(cid:35)

(cid:71)(cid:35)

(cid:71)(cid:35)

6

(cid:71)(cid:35)

(cid:71)(cid:35)

8

(cid:71)(cid:35)

(cid:71)

(cid:71)(cid:35)

(cid:71)(cid:35)

(cid:71)(cid:35)

(cid:71)(cid:35)

-

(cid:71)(cid:35)

-

-

(cid:71)(cid:35)

-

(cid:71)(cid:35)

-

-

-

-

-

5

5

8

(cid:71)(cid:35)

-

(cid:71)(cid:35)

-

-

(cid:71)(cid:35)

-

-

-

-

-

(cid:32)

(cid:32)

(cid:32)

(cid:32)

-

(cid:32)

-

(cid:71)(cid:35)

-

(cid:71)(cid:35)

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

-

(cid:32)

-

-

-

(cid:32)

(cid:32)

-

(cid:32)

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

2

(cid:32)

(cid:32)

3

3

3

(cid:71)(cid:35)

(cid:71)(cid:35)

(cid:71)(cid:35)

(cid:71)(cid:35)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

-

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

(cid:32)

7

(cid:32)

-

(cid:32)

-

9
-

(cid:71)(cid:35)

9
-

-

-

-

-

-

-

-

-

9
-

9
-

-

-

-

(cid:32)

(cid:32)

(cid:32)

e
z
i
S

k
c
a
t
t

A
%

p
m
a
t
S

e
m
T

i

l
e
b
a
L

s
r
o
t
c
e
V

S
o
D

y
t
i
r
g
e
t
n
I

t
s
o
H

k
r
o
w
t
e
N

.

g
l
A

l
o
r
t
n
o
C

l
e
d
o
M

s
e
r
u

l
i
a
F

s
O
/
I

s
e
r
u
t
a
e
F

t
e
s
a
t
a
D

s
k
c
a
t
t

A
r
e
b
y
C

a
t
a
D
m
e
t
s
y
S

r
e
b
y
C

a
t
a
D
m
e
t
s
y
S

l
a
c
i
s
y
h
P

]
7
3
[

3
-
S
D
r
e
t
a
W
S
C

I

]
7
3
[

3
-
S
D
s
a
G
S
C

I

]
5
3
[

1
-
S
D
L
N
R
O

]
6
3
[

2
-
S
D
L
N
R
O

]
2
4
[

7
S

T
U
Q

]
3
4
[

1
2
l
e
S
C
I
R

]
0
3
[
T
a
W
S

]
3
3
[

C
I
P
E

t
e
s
a
t
a
D

]
6
4
[

s
u
b
d
o
M
A
R
T
C
E
L
E

]
6
4
[

m
m
o
c
7
S
A
R
T
C
E
L
E

]
9
4
[

A
D
A
C
S

y
a
m
e
L

]
9
4
[

t
r
e
v
o
C
y
a
m
e
L

]
5
4
[

0
8
5
1
6
-
C
E
I

]
2
5
[

3
2
N
O
C
F
E
D

]
0
5
[

S
C
I
S
4

]
1
5
[

5
1
x
4
S

]
4
5
[
L
A
D
A
T
A
B

]
3
5
[

I

D
A
W

]
7
5
[

r
e
t
a
W

-
I

C
U

]
5
5
[

I

A
H

14

e
h
t
n
i

r
o
t
c
e
v
k
c
a
t
t
a

e
h
t

f
o
n
o
i
t
a
t
n
e
s
e
r
p
e
r

l
l

u
f

e
h
t

o
t

s
r
e
f
e
r
n
m
u
l
o
c

r
o
t
c
e
v
k
c
a
t
t

A

.
s
t
n
e
m
e
l
e
d
e
s
o
p
o
r
p
e
h
t

o
t
d
e
r
a
p
m
o
c

s
a

s
(cid:32)
t
e
s
a
t
a
d
d
(cid:32)
e
h
s
i
l
b
u
p
f
o

s
t
n
e
m
e
l
E

:
4
E
L
B
A
T

.
s
r
e
ﬁ
i
t
n
e
d

i

e
u
q
i
n
u

g
n
i
s
u

o
i
r
a
n
e
c
s

k
c
a
t
t
a

e
m
a
s

e
h
t

f
o

s
d
r
o
c
e
r

e
h
t

l
l
a

f
o

g
n
i
l
e
b
a
l

e
h
t

o
t

s
r
e
f
e
r

n
m
u
l
o
c

l
e
b
a
l

t
e
s
a
t
a
D

.
t
n
i
o
p

y
r
t
n
e

k
c
a
t
t
a

e
h
t

m
o
r
f

g
n
i
t
r
a
t
s

,
t
e
s
a
t
a
d

o
t

n
i

e
c
n
e
r
e
f
e
r
h
t
i

w
s
d
r
o
c
e
r

k
c
a
t
t
a

f
o

e
g
a
t
n
e
c
r
e
p
e
h
t

s
e
t
a
c
i
d
n
i
n
m
u
l
o
c

s
k
c
a
t
t

A
%

.
s
s
a
l
c
i
t
l
u
m

r
o

y
r
a
n
i
b

r
e
h
t
e
h
w

,

g
n
i
l
e
b
a
l

d
r
o
c
e
r

l
a
u
d
i
v
i
d
n
i

o
t

r
e
f
e
r

s
e
l
c
r
i
c
d
e
l
l

ﬁ
-
f
l
a
H

s
t
e
k
c
a
p

f
o

r
e
b
m
u
n

,
t
e
s
a
t
a
d

l
a
c
i
s
y
h
p

e
h
t

n
i

s
d
r
o
c
e
r

f
o

r
e
b
m
u
n

e
h
t

f
o

n
o
i
t
a
m

i
t
s
e

n
a

s
i

n
m
u
l
o
c

e
z
i
S

.
e
c
n
a
l
a
b
m

i

s
s
a
l
c

e
h
t

s
t
n
e
s
e
r
p
e
r

d
n
a

,
e
z
i
s

t
e
s
a
t
a
d

e
l
o
h
w
e
h
t

s
a
w

t
n
e
m
e
l
e

s
e
c
n
a
b
r
u
t
s
i
D

.

n
o
i
t
a
m

i
t
s
e

e
h
t

m
o
r
f

d
e
d
u
l
c
x
e

e
r
a

s
t
e
k
c
a
p

S
o
D

f
o

r
e
b
m
u
n

e
g
r
a
L

.
e
p
y
t

t
e
s
a
t
a
d

e
h
t

r
e
p

s
a

,
)
r
e
b
y
c

,
l
a
c
i
s
y
h
p
(

h
t
o
b

r
o

,
t
e
s
a
t
a
d

r
e
b
y
c

e
h
t

n
i

d
e
d
u
l
c
n
i

e
r
a

s
e
l
b
a
i
r
a
v
e
c
n
a
b
r
u
t
s
i
d
r
e
h
t
e
h
w
e
t
a
g
i
t
s
e
v
n
i

o
t

s
t
e
s
a
t
a
d
d
e
h
s
i
l
b
u
p
e
h
t

f
o

y
n
a

r
o
f

l
e
d
o
m
S
P
C
g
n
i
y
l
r
e
d
n
u
e
h
t
n
i
a
t
b
o

o
t

e
l
b
i
s
s
o
p
t
o
n
s
a
w

t
i

s
a
d
e
t
t
i

m
o

.

n
w
o
n
k
n
U

:

K
N
U

.
t
e
s
a
t
a
d

l
a
c
i
s
y
h
p
e
h
t

t
i

t
u
b

,
t
e
s
a
t
a
d
T
a
W
S

r
o
f

a
t
a
d
s
i
h
t

e
t
a
c
o
l
o
t

e
l
b
i
s
s
o
p
t
o
n
s
a
w

t
I

.
s
e
m

i
t
d
n
e
d
n
a

t
r
a
t
s
k
c
a
t
t
a
g
n
w
o
n
k
d
e
d
d
a

i

e
b
d
u
o
c

l

t
u
b

,
t
e
s
a
t
a
d
e
l
b
a
l
i
a
v
a

e
h
t
n
i

d
e
d
u
l
c
n
i

t
o
n
e
r
a

s
t
e
k
c
a
p
k
r
o
w
t
e
n
r
o
f

s
l
e
b
a
l

e
h
T
1

.

d
e
d
e
e
n
e
r
a

g
n

i
l
e
b
a
l

k
c
a
t
t
a
d
n
a
n
o
i
t
c
a
r
t
x
e

e
r
u
t
a
e
F

.
e
p
y
t

k
c
a
t
t
a

e
h
t

o
t

g
n
i
d
r
o
c
c
a
d
e
p
u
o
r
g

s
i

c
ﬁ
f
a
r
t

k
r
o
w
t
e
N

.
s
r
o
t
a
u
t
c
a
/
s
r
o
s
n
e
s
h
t
i

w
n
o
i
t
a
i
c
o
s
s
a

o
n
h
t
i

w

,
a
t
a
d
d
a
o
l
y
a
p
e
h
t

y
l
n
O

8

9

.
)

m
e
t
s
y
s
p
o
o
l

n
e
p
o
(

s
o
i
r
a
n
e
c
s

k
c
a
t
t
a

e
h
t

r
o
f

a
t
a
d
e
m
a
s

g
n
i
m
u
s
s
a

,

y
l
n
o

o
i
r
a
n
e
c
s

l
a
m
r
o
n
e
h
t

r
o
f

a
t
a
d
D
E
I
7

.

y
l
n
o

s
t
e
k
c
a
p
t
n
e
u
q
e
s
b
u
s

f
o

g
n
i
m

i
t

e
v
i
t
a
l
e
R
0
1

s
t
e
k
c
a
p
e
s
n
o
p
s
e
r
d
n
a
d
n
a
m
m
o
c

s
u
b
d
o
M
n
e
e
w
t
e
b

l
a
v
r
e
t
n
i

e
m
T

i

.
t
u
o
k
a
e
r
b

s
e
m
a
r
f

s
u
b
d
o
M

3

4

t
e
s
a
t
a
d
I

D
A
W

r
o
f

e
l
b
a
l
i
a
v
a

s
i

.

y
l
n
o

s
t
r
e
l
a

t
r
o
n
S
2

.
a
t
a
d
k
r
o
w
t
e
n
r
o
f

s
l
e
b
a
l

o
N

6

.
s
k
c
a
t
t
a

e
c
n
a
s
s
i
a
n
n
o
c
e
R
5

