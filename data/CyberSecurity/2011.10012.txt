KeyGuard: Using Selective Encryption to Mitigate
Keylogging in Third-Party IME

Jia Wang
Computing and Software Systems
University of Washington Bothell
Bothell, WA, USA
jiawang@uw.edu

Brent Lagesse
Computing and Software Systems
University of Washington Bothell
Bothell, WA, USA
lagesse@uw.edu

0
2
0
2

v
o
N
9
1

]

R
C
.
s
c
[

1
v
2
1
0
0
1
.
1
1
0
2
:
v
i
X
r
a

ABSTRACT
As mobile devices become ubiquitous, people around the
world have enjoyed the convenience they have brought to
our lives. At the same time, the increasing security threats
that rise from using mobile devices not only have caught at-
tention from cyber security agencies but also have become
a valid concern for mobile users. Keylogging is one of the
mobile security threats caused by using insecure third-party
IME (input method editor) applications. Keylogging, as the
name suggests, keeps track of user’s key events performed on
the device and stores all the events in a log. The log could
include highly sensitive data such as credit card number, so-
cial security number, and passwords. This paper presents a
novel solution by intercepting the keystroke events triggered
by a user and encrypting them before sending them to the
third-party IME, making the third-party IME unable to log
Input will
what the users actually entered on the screen.
be decrypted when showing on text view on the underlying
app. This solution addresses the fundamental reason why
an IME may leak sensitive information since an IME will no
longer have access to the user’s actual sensitive information,
which will greatly reduce the chance of leaking sensitive in-
formation by using a third-party IME while maintaining the
functionalities of the third-party IME at the same time.

Keywords
Keylogging, third-party IME, Android, Xposed framework,
Mobile device

1.

INTRODUCTION

At the beginning of year 2014, the use of Internet on mo-
bile devices has exceeded desktop for the ﬁrst time in history
in the US [16]. Computing systems have transitioned from
requiring users to have highly in depth technical knowledge
to use; however modern advances in computing, particularly
with mobile devices, have allowed users to use systems with-
out fully understanding the enabling technologies. Given
the ubiquitous use of mobile devices to access Internet, se-
curity concerns in those emerging environments have arisen
as well. A questionnaire research [15] showed concerning re-
sult that a noticeable percentage of smartphone users don’t
fully understand the technical details and/or security status
of his/her smartphones, i.e. one’s android phone could be
already rooted when he/she doesn’t believe so and neither
does he/she understand what the ramiﬁcations could be.

The security concerns in mobile devices are real and po-
tentially aﬀecting every mobile user. Per a study conducted

by McAfee [12], security vulnerabilities have been detected
in several famous apps that are widely used by the gen-
eral public, notably Costco app sending login credential in
plain-text, Sogou IME (input method editor) collected and
uploaded data of user’s personal mobile device to its server
and Sina and Weibo (two popular social networking apps in
China) sent private chat conversation in plain-text. Given
the fact apps developed by major well-established businesses
still contain potential security vulnerabilities, the majority
of smartphone users may not be aware of potential secu-
rity vulnerabilities. Thus, preventing security vulnerabilities
(such as keylogging) in emerging environments is crucial in
oﬀering a safe mobile device user experience.

The impact of security threats in mobile devices can be
vast. Almost every people in the US has at least one mobile
device. People use and even rely on mobile devices everyday
but most people do not have suﬃcient security awareness.
Security threats in mobile device range from malicious apps,
spams and phishing to botnet. One of the security threats
in mobile device is known as keylogging, which logs all the
keyevents on the mobile device and could potentially leak
the users’sensitive information. This paper is attempting to
identify and solve this particular threat in mobile devices.

The paper explores a novel solution - KeyGuard - by in-
tercepting the keystroke events triggered by a user and en-
crypting them before sending them to the third-party IME,
making the third-party IME unable to know what the user
actually entered on the screen. It will decrypt the encrypted
text so that the original text is shown on text view on the
underlying app. It attempts to resolve the root cause of leak-
age of sensitive information by preventing IME from having
access to sensitive information at all. In contrast, some of
the existing solutions tried to explore reactive measures in
the case sensitive information or partial sensitive informa-
tion had already been exposed to the IME. The solution
proposed will address the fundamental reason why an IME
may leak sensitive information since an IME will no longer
have access to the user’s actual sensitive information, which
will greatly reduce the chance sensitive information leakage
by using a third-party IME.

2. BACKGROUND

2.1 Keylogging Threat

Keylogging, as the name suggests, keeps track of user’s
key events performed on the device and dumps all the events
into a log. The log could include highly sensitive data such
as credit card number, social security number, passwords to

1

 
 
 
 
 
 
various resources like online banking and e-commerce web-
sites, email addresses and personal contact numbers. While
a benign app may want to remember and log all the key
events triggered by a user and upload the texts a user has
entered to its remote servers on cloud to improve text sugges-
tion accuracy and provide personalized experience, if those
data were transferred as plain text, then any man in the mid-
dle can sniﬀ and intercept the sensitive information. Not to
mention in the case of a malicious app, it would be collect-
ing sensitive information about a user on purpose to prepare
to launch an attack, which may cause signiﬁcant loss to the
user, physically and/or ﬁnancially.

A typical scenario of keylogging is shown in Figure 1.
When user enters text on his/her mobile device through a
malicious third-party IME, the malicious third-party IME,
which is a keylogger will get access to all the information the
user entered. Then the keylogger selects the sensitive data it
is interested in such as email and password and sends those
data to its own server and stores the data in the database.

Figure 1: A typical keylogging scenario.

2.2 Third-Party IME

With the popularity of touchscreen cell phones, unlike the
traditional (physical) keyboard, people use the soft keyboard
popped up on their touchscreen to input text. These soft
keyboards are known as IME apps, and they convert user’s
touch events to texts. Although there is always a built-in
IME provided by the operating system (i.e. iOS or Android),
many people tend to use a third-party IME app for better
user experience, such as enhanced user interface, personal
dictionary and extra emoji. However, at the same time they
enjoy a third-party IME app, people are also exposed to
a potential security threat. The third-party IME could be
a malicious keylogger that stores your private sensitive in-
formation when you type in and send it over to a remote
server or share it with another app. Two studies [15][8] of
investigating the keylogging threat in Android show a high
percentage of people use a third-party IME app on a daily
basis and the high probability of being keylogged when us-
ing a third-party IME app. The high probability of keylog-
ging comes from the large number of permissions a third-
party IME has, such as INTERNET, READ CONTACTS,
WRITE EXTERNAL STORAGE, RECORD AUDIO and
READ PHONE STATE. Some of these permissions are used
to provide enhanced features. For apps that require INTER-
NET permission, they may want to upgrade the app version
with cloud server so the intention could be benign. How-
ever, INTERNET permission is potentially dangerous since

2

it could be used to send whatever sensitive information to
a remote server and user’s sensitive information would be
leaked and it is entirely possible a malicious user may be
able to collect such sensitive information and misbehave.
Another permission that could be misused is write permis-
sion. An IME can write the sensitive information to a local
storage and share the location of the ﬁle that contains the
sensitive information with another app, then user’s sensitive
information would be compromised. Therefore, it is impor-
tant to have an eﬀective way to prevent keylogging threat
and make sure user’s sensitive information doesn’t get leaked
when using a third-party IME app.

2.3 Android OS

Speciﬁcally, this paper focuses on Android platform since
Android used to be the only mobile OS (operating system)
that supports third-party IME. iOS didn’t support it until
post iOS 8. In addition, Android currently has the largest
market share in the world (70.85% as in May 2016) [2], so
the research could have a wide impact.

2.4 Current Solutions

There are a large number of papers studying about key-
logging threats in computer. Most of the researches focused
on software keyloggers in computer[3][4][10][20] while some
provided a solution to both software and hardware keylog-
gers in computer[5]. However, few of those approaches are
applicable to mobile devices, since mobile device usually uses
soft keyboard not physical keyboard, the underlying oper-
ating system is diﬀerent and the computational power of
mobile device is limited compared to computer. There are
also a large number of papers studying about data leakage
in mobile device, but they are not speciﬁc for keylogging
threat, so those solutions are relatively complex and may
not be eﬀective for solving keylogging problem in mobile de-
vices. The intersection of these two research areas is what
this paper focuses on and this topic has not been fully stud-
ied. One latest study addressing keylogging threat in mobile
device is I-BOX [7], but there are two limitations of the so-
lution proposed in this study. One limitation is that there
is a chance that sensitive data can be leaked in conjunction
with another app. Another limitation is that it sometimes
shuts down the internet when detecting sensitive data, which
aﬀects user experience. The motivation of my work is to ad-
dress the limitation of I-BOX.

3. KEYGUARD

3.1 Threat Models

We deﬁne threat models in three situations: 1) after key-
logger IME obtains user’s keystroke event, keylogger IME
directly sends keystroke event to a remote server; 2) keylog-
ger IME logs user’s sensitive information and may misuse
that information at a later stage; and 3) instead of sending
keystroke event itself, keylogger IME colludes with another
app. Keylogger IME stores the keystroke event to a local ﬁle
and informs the colluded app to access that ﬁle, so the col-
luded app can read the ﬁle and send the data out or continue
to collude with another app to pass the data down.

This study mainly focuses on protecting sensitive data
leakage through a third-party IME, i.e. security threats such
as that after the user has entered his/her username and pass-
word in the app, the app leaks the sensitive information is

out of the scope of this paper. Also, this paper attempts
to identify and prevent the keylogging issue by monitor-
ing keystroke events that are text typed through third-party
IME soft keyboard, it does not tackle the security concerns
that may rise from side channels such as voice input (voice-
to-text conversion) or image input (sending pictures that is
uploaded through third-party IME).

3.2 Design Consideration

There are four issues that are important to address in

designing KeyGuard.

1. The system should prevent the keylogging threat that
is caused by storing user entered sensitive data in lo-
cal storage, so that no other colluding app can obtain
user’s sensitive data from accessing the local storage.

2. The system should prevent the keylogging threat that
is caused by sending user entered sensitive data to re-
mote server through Internet.

3. The system should maintain the functions of third-
party IME when entering non-sensitive data, otherwise
user cannot enjoy better user experience, which goes
against the purpose of installing and using a third-
party IME in the ﬁrst place.

4. The solution should not cause any noticeable eﬀect to

user experience, such as lag.

3.3 Approach Overview

The approach proposed is to intercept all keystroke events
and only encrypt them if certain criteria are met before those
events are handled by the IME, so the information stored
by IME will be fundamentally diﬀerent from what user has
actually entered. Thus, this approach satisﬁes the ﬁrst two
design considerations in section 2.2, since the third-party
IME can not touch the real data, it’s no longer a threat
if third-party IME wants to store or send the data. The
proposed solution works as follows:

1. It keeps monitoring all keystroke events sent to third-

party IME.

2. If the keystroke event meets any of the following three
conditions, perform the encryption and decryption op-
erations mentioned below:

(a) the input is coming from a password context (TYP

E TEXT VARIATION PASSWORD)

(b) the input matches predeﬁned rules. For example,
if the rule is deﬁned as any string that starts with
”abc” and has a total length of 8. After the user
enters string ”abc”, the following 5 characters will
be encrypted and decrypted so that third party
IME doesn’t have access to them

(c) the user performs a gesture and marks an input

ﬁeld as sensitive

3. Every keystroke event that meets the sensitive condi-
tion above will be encrypted before it is handled by
third-party IME.

4. The original text user entered will be decrypted when

displaying on the underlying app.

3.4 User Model

KeyGuard runs in the background but provides an user
interface to allow users deﬁne sensitive information rules
(e.g. any string that starts with ”abc” and has a length
of 8 characters). User uses third-party IME as usual, since
this approach does not request user to use an additional
keyboard or interface to enter their sensitive information, it
saves the users from the hassle of switching back and forth
between diﬀerent keyboards etc. This approach does not
need to limit the permission of third-party either, so user
can enjoy the functions provided by third-party IME for all
non-sensitive information, which satisﬁes the third design
consideration in section 2.2.

4. KEYGUARD DESIGN

4.1 Where to Intercept Keystroke Event/Re-

store Real Keystroke Event

To decide where to intercept keystroke event, we ﬁrst have
to understand how user’s touch event on the soft keyboard
translates to keystroke event and how that keystroke event
is obtained by third-party IME. On a high level, the coor-
dinates (x, y) of the place where user touched are processed
and a keyCode is determined through a mapping between
screen locations and keyCodes. The keyCode is then passed
on to key event listener for further handling. If we intercept
the key event too early, we may not be able to know which
key was actually entered, which in turn could aﬀect the
functionality of the third-party IME. If we intercept the key
event too late, then the third-party IME could have already
leaked the sensitive information. In order to implement the
prototype, we assumed that the keylogging activity hap-
pened between KeyboardView.OnKeyboardActionListener.on
Key(int primaryCode, int[] keyCodes), which is triggered when-
ever user enters a key, and InputMethodService.onUpdate
Selection(int oldSelStart, int oldSelEnd, int newSelStart, int
newSelEnd, int candidatesStart, int candidatesEnd), which is
called when the application has reported a new selection re-
gion of the text. A study by L. Cai and H. Chen [6] discussed
the possibilities to infer actual keys pressed by users by col-
lecting and analyzing the positions a user has touched on the
soft keyboard. In theory any function that may leak sensi-
tive information can also be hooked to mitigate the security
threats. For the proof-of-concept prototype, we decided to
go with the assumption made above.

4.2 Only Encrypt Sensitive Data

The purpose of keylogging is to obtain user’s sensitive in-
formation, so most of the research only take care of sensitive
information. Similarly, in our study we would only need to
encrypt sensitive data rather than encrypt everything. Our
approach also followed this: we tried to encrypt information
that appears in the sensitive input ﬁelds either through con-
texts such as password and email address, or those user has
speciﬁed as containing sensitive information through ges-
ture, and also encrypt strings matching user predeﬁned sen-
sitive information rules. By only encrypting sensitive infor-
mation, we allow 3rd party IMEs to maintain their function-
alities as many as possible so that end users’experience with
their favorite IMEs will not degrade after using KeyGuard
in mobile devices.

4.3 Maintain Third-party IME Functionality

3

Table 1: Comparison of Systems

Systems

Sensitive Data Protected Add’l Windows

Functions Aﬀected

Sensitive Info Exposed

KeyGuard
I-Box
ScreenPass
Cashtag
TinMan

all kinds
all kinds
password only
all kinds
all kinds

No
No
Yes
No
Yes

Virtually no noticeable impact
Internet temporarily disconnected
Requires using a separate UI
Requires entering aliases
Requires using a separate UI

Partial
Partial
Yes
Yes
Yes

Although there are a few solutions available to mitigate
security concerns on leaking sensitive information in mobile
devices, the biggest advantage of KeyGuard is that it allows
the 3rd-party IME to maintain its functionalities as much
as possible. We have compared ﬁve systems (including Key-
Guard) in Table 1 and detailed description of the other four
systems are available in Section 6. In terms of the amount
of sensitive data protected, KeyGuard is on par with other
solutions (except ScreenPass which is designed primarily for
passwords) since it can protect all kinds of sensitive infor-
mation as long as they are coming from a sensitive con-
text, speciﬁed by user as containing sensitive information
through gesture, and/or pre-deﬁned in the rules. KeyGuard
doesn’t require a new window to pop up just for the sake
of entering sensitive information like ScreenPass and Tin-
Man. When it comes to the number of 3-rd IME functions
aﬀected, unlike I-Box which requires Internet connection to
be temporarily disconnected, or Cashtag which requires en-
tering special alias as placeholders for sensitive information,
KeyGuard introduces nearly no noticeable impact to user’s
experience since it essentially performs no action for non-
sensitive information. In the case that user speciﬁes a ﬁeld
as containing sensitive information through gesture, it is
probably ﬁne to restrict some of the 3rd-party IME func-
tionalities since it may not even be a desired experience to
allow IME to perform word auto-suggest on sensitive infor-
mation. Like I-Box, KeyGuard will expose partial sensitive
information (rules that deﬁne sensitive information) to the
3rd-party IME, which is still more desirable than exposing
all of sensitive information to the 3rd-party IME as in the
cases of ScreenPass, Cashtag and TinMan.

5.

IMPLEMENTATION

To verify our solution, we implemented a prototype based
on the assumption mentioned in section 3. The hardware
used to conduct this experiment is Sony Xperia Z1 tablet
running on Android 4.2.2 Jelly Bean OS. The implemen-
tation is based on Xposed framework, which a number of
researches in mobile securities have also adopted[17][19][22].
We used Google sample IME code[1] and modiﬁed it into a
simple keylogger to serve as malicious third-party IME.

5.1 Xposed Framework

Xposed[18] is a framework for modules that can change
the behavior of the system and apps without touching any
APKs. The way apps work in Android is that, Android forks
oﬀ a new virtual machine whenever an app is started. The
Xposed framework allows overriding library routines to be
inserted into the Java classpath through forking Zygote dur-
ing app launching, prior to the execution of the new virtual
machines. Thus, the overall system behavior is altered with-

out modifying either the apps or the underlying ﬁrmware.
Individual class methods can be hooked, allowing injected
code to be executed prior to, following the completion of,
or in place of the base-method calls. Private or protected
member ﬁelds and functions can also be accessed and mod-
iﬁed, and additional ﬁelds or functions can be added to the
base class or object granularity.

Figure 2: Launch process of KeyGuard.

5.2 Google Sample IME

In order to simulate the keylogging behavior of a third-
party IME, we need to have the source code of a third-party
IME. Due to the diﬃculty to ﬁnd an open source commercial
third-party IME, we used Google sample IME and modiﬁed
the code to turn it into a keylogger.

5.3 Functions Hooked

The main functions that we hooked in our KeyGuard pro-
totype are onKey() and onUpdateSelection() in the SoftKey-
board class. The work ﬂow of KeyGuard prototype is shown
in Figure 3:

Figure 3: The work ﬂow of the KeyGuard prototype.

4

Figure 4: Letter transformation when displayed in the under-
lying application.

1. User clicks on the textbox which invokes the input method

service.

2. Google Sample IME (keylogger) serving as the current

IME will be invoked.

3. Soft keyboard pops up and user types in a letter/number.

4. Code inside beforeHookedMethod() will be executed prior
to onKey() to check if the keystroke entered meets the
sensitive data condition. Only sensitive keystroke will be
encrypted. RC4 has been adopted to leverage the speed
of a stream cipher, but in theory any cipher could be
used.

5. Keylogger executes onKey() method which gets the en-

crypted letter/number.

6. Encrypted letter/number is displayed on the textbox and
cursor moves forward invoking the onUpdateSelection()
method.

Figure 5: Performance test.

understandable and expected. Though it looks like to be a
signiﬁcant increase in Figure 5, from a user experience per-
spective, the diﬀerence is negligible and the lag is hardly
noticeable by users. The majority of users would not be
able to tell a 10 ms increase in latency, so we are conﬁdent
our solution can actually be deployed to end-users without
causing performance degradation and user experience sacri-
ﬁce on their mobile devices.

7. After onUpdateSelection() is executed, afterHookedMethod()

method will be called.

7. RELATED WORK

8. Code inside afterHookedMethod() will be executed to de-

crypt the displayed letter/number to original one.

Using Figure 4 as an example, when user touches the edit-
Text control for entering password (this constitutes a sensi-
tive context) on the screen, it invokes input method service
and a soft keyboard pops up allowing user to enter pass-
word, when user touches a particular letter (k in this case)
on the soft keyboard, but before the letter is received by the
onKey() function in the third-party IME, the keyCode (let-
ter) is encrypted (in beforeHookedMethod()) to be q before
passing to the third-party IME, so q gets displayed on the
screen for a short moment. When the cursor moves forward,
onUpdateSelection() gets executed, after which the letter is
decrypted (in afterHookedMethod()) and the original char-
acter is restored in the editText control in the underlying
app.

6. EVALUATION

We conducted a performance test of our solution, specially
around onKey() and onUpdateSelection() functions. We did
two rounds of performance tests, one in Google Chrome
browser trying to enter search keyword; the other in system
built-in note app. Over 60 key events have been performed
in each test to generate a reasonable number of data points
from which we calculated an average latency for onKey()
and onUpdateSelection() functions.The latency of each key
event listener function increased after hooking the functions
mentioned above. We are checking for sensitive data each
time user typing in third-party IME and executing addi-
tional code before onKey() and after onUpdateSelection()
for protecting sensitive data, so the increase in latency is

TaintDroid [9] uses a dynamic taint analysis to track the
ﬂow of sensitive information in order to determine whether
sensitive information could be leaked through a third-party
application to the network. But TaintDroid mainly focuses
on detection, there is no further action to prevent privacy
leakage. Besides, TaintDroid was designed to track sensitive
information ﬂow on an app-level. For malware written in
pure C language or native code languages in android, it may
not be eﬀective in detecting/preventing attacks. But current
IME apps tend to use excessive native code in their core
logic, so TaintDroid based methods [11] are hard to apply
on this problem.

I-BOX [7], an app-independent oblivious sandbox that sig-
niﬁcantly reduces chance of sensitive information leakage by
conﬁning untrusted IME apps to a set of predeﬁned security
policies. Speciﬁcally, I-BOX ﬁrst maintains a checkpoint
of an IME app’s state before any keystroke was received
from the user. It keeps monitoring user’s keystroke events,
and rolls the third-party IME back to its previous safe/clean
state (checkpoint) if the user input matches predeﬁned rules.
One limitation of I-BOX is that an IME app could collude
with another malware to leak information. An IME app
could ﬁrst save the user input in a local ﬁle, and inform a
colluding malware to read the ﬁle when the transaction has
not been rolled back and then divulge the input.

ScreenPass [13] employs a trusted software keyboard for
inputting password. It will pop up a trusted password inter-
face when user needs to enter password. Instead of typing
password, user clicks the password tag. The ScreenPass sys-
tem also adopts taint tracking to make sure that a password
is exposed outside of a speciﬁc safe domain. Limitation of
this method: 1) only works with password 2) all the pass-
words are stored in ScreenPass. If it is hacked, the attacker

5

could get all the important information at once. Similar to
the functionality of ScreenPass, TinMan [21] also hides the
plain text of password by making user select a password in-
stead of typing password through keyboard. TinMan places
conﬁdential records on a trusted node and puts correspond-
ing placeholders on the mobile device. But oﬄoading from
distributed shared memory causes big overhead.

Cashtags[14] allows users to safely access pieces of sen-
sitive information in public by intercepting and replacing
sensitive data elements with non-sensitive data elements be-
fore they are displayed on the screen. Similar to ScreenPass,
user has to provide all their sensitive information to the soft-
ware in order to get their data replaced with a item begins
with a cashtag alias, such as $password. Whenever the sen-
sitive term would be displayed on the screen, the system
displays the predeﬁned alias instead.This approach shares a
similar idea of KeyGuard that is to intercept sensitive data,
but this approach is not for keylogging, so the sensitive data
it attempts to intercept are not keystroke events. Cashtags
simply asks user to provide their sensitive data beforehand.
Cho et al [8] demonstrate the potential security risks by
implementing a proof-of-concept keylogger that were able
to eﬀectively log users’sensitive keystrokes with 81 popular
websites (out of 100 tested websites). They also analyzed the
security behaviors of 139 keyboard applications that were
available on Google Play. Their study results show that
majority of existing keyboard applications (84 out of 139)
could be potentially misused as malicious keyloggers.

8. DISCUSSION AND FUTURE WORK

One limitation of KeyGuard is that to use KeyGuard we
need to intercept keystroke event and that involves modify
system functions, so there is a must to require user’s de-
vice to be rooted mainly to install the underlying Xposed
framework. The root requirement could impact the vendor
maintenance regime. One possible solution to this is to im-
plement KeyGuard at the vendor level as an OEM (Original
Equipment Manufacturer) feature.

Another limitation of KeyGuard is that the current proto-
type is based on the Google sample IME code which is open
source. Xposed framework needs to know exactly which
class and which method to hook for it to function prop-
erly, so it might be a challenge to extend the solution to
other third-party IMEs since we may be able to view their
source codes easily. Conceptually, the solution proposed in
this paper should work with most of the third-party IME,
however, we still need to further understand how to imple-
ment the idea of KeyGuard in diﬀerent types of third-party
IME.

Due to the time constraints, 2.(a) and 2.(b) mentioned in
Section 3.3 have been implemented in the prototype. Allow-
ing user to specify a ﬁeld as containing sensitive information
as mentioned in 2.(c) so that KeyGuard can kick in will be
one of our future work as well.

There is another experiment we can carry out to see if it
helps with obscuring sensitive information that is caught by
the pattern detector. Instead of processing one character at
a time, we could process characters every N milliseconds and
we could see if that negatively aﬀects user experience. This
way if the user is typing something sensitive we could delay
passing it to the IME just a little bit in hopes of getting
more data to see if it should be encrypted so that the IME
has less of a chance of seeing only partially encrypted data.

In addition, we will set up a usability study to determine
how users perceive the ease of use of the system. The user
study will help us ﬁnd out what percentage of functionality
in 3rd party IMEs doesn’t work and aﬀects the overall user
experience, using which we can further improve KeyGuard.

9. CONCLUSIONS

In order to solve the keylogging problem in mobile de-
vice, we proposed a novel solution to fundamentally solve
the problem. Our approach resolves the concern that an
IME can log down the sensitive information and send it to
remote server or share it with another app by making IME
store encrypted information so that the original informa-
tion entered by user will not be visible to the third-party
IME and thus it will be less likely to be leaked. The pro-
totype demonstrates the feasibility and eﬀectiveness of our
approach. The evaluation of the prototype shows our so-
lution will not introduce any user noticeable lag in terms
of performance. These results suggest that our prototype
succeeded in preventing keylogging threat and could be ex-
tended to third-party Android IME.

10. REFERENCES
[1] Google sample softkeyboard.

https://android.googlesource.com/platform/develop
ment/+/master/samples/SoftKeyboard/ Accessed Jul
17th, 2016.

[2] Mobile/tablet operating system market share.

https://www.netmarketshare.com/operating-system-
market-share.aspx?qprid=8&qpcustomd=1 Accessed
Jun 2nd, 2016.

[3] Anti-keylogging technology based on windows kernel,
Oct. 19 2011. CN Patent App. CN 201,010,145,945.

[4] M. Aslam, R. Idrees, M. Baig, and M. Arshad.

Anti-hook shield against the software key loggers. In
Proc. of the National Conference on Emerging
Technologies, volume 189, 2004.

[5] M. M. Baig and W. Mahmood. A robust technique of
anti key-logging using key-logging mechanism. In 2007
Inaugural IEEE-IES Digital EcoSystems and
Technologies Conference, pages 314–318. IEEE, 2007.

[6] L. Cai and H. Chen. Touchlogger: Inferring keystrokes
on touch screen from smartphone motion. HotSec,
11:9–9, 2011.

[7] J. Chen, H. Chen, E. Bauman, Z. Lin, B. Zang, and

H. Guan. You shouldn?t collect my secrets: Thwarting
sensitive keystroke leakage in mobile ime apps. In 24th
USENIX Security Symposium (USENIX Security 15),
pages 657–690, 2015.

[8] J. Cho, G. Cho, and H. Kim. Keyboard or keylogger?:

a security analysis of third-party keyboards on
android. In Privacy, Security and Trust (PST), 2015
13th Annual Conference on, pages 173–176. IEEE,
2015.

[9] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G.
Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N.
Sheth. Taintdroid: an information-ﬂow tracking
system for realtime privacy monitoring on
smartphones. ACM Transactions on Computer
Systems (TOCS), 32(2):5, 2014.

[10] J. Fu, Y. Liang, C. Tan, and X. Xiong. Detecting

software keyloggers with dendritic cell algorithm. In

6

Communications and Mobile Computing (CMC), 2010
International Conference on, volume 1, pages 111–115.
IEEE, 2010.

[11] P. Hornyack, S. Han, J. Jung, S. Schechter, and

D. Wetherall. These aren’t the droids you’re looking
for: retroﬁtting android to protect data from
imperious applications. In Proceedings of the 18th
ACM conference on Computer and communications
security, pages 639–652. ACM, 2011.

[12] M. Labs. Apps sending plain http put personal data at
risk. https://blogs.mcafee.com/mcafee-labs/apps-
sending-plain-http-put-personal-data-risk/ Accessed
Apr 18th, 2016.

[13] D. Liu, E. Cuervo, V. Pistol, R. Scudellari, and L. P.

Cox. Screenpass: Secure password entry on
touchscreen devices. In Proceeding of the 11th annual
international conference on Mobile systems,
applications, and services, pages 291–304. ACM, 2013.
[14] M. Mitchell, A.-I. A. Wang, and P. Reiher. Cashtags:
protecting the input and display of sensitive data. In
24th USENIX Security Symposium (USENIX Security
15), pages 961–976, 2015.

[15] F. Mohsen, E. Bello-Ogunu, and M. Shehab.

Investigating the keylogging threat in android - user
perspective (regular research paper). In 2016 Second
International Conference on Mobile and Secure
Services (MobiSecServ), pages 1–5. IEEE, 2016.
[16] R. Murtagh. Mobile Now Exceeds PC: The Biggest

Shift Since the Internet Began.

https://searchenginewatch.com/sew/opinion/2353616/
mobile-now-exceeds-pc-the-biggest-shift-since-the-
internet-began Accessed Apr 18th, 2016.

[17] L. Qiu, Z. Zhang, Z. Shen, and G. Sun. Apptrace:
Dynamic trace on android devices. In 2015 IEEE
International Conference on Communications (ICC),
pages 7145–7150. IEEE, 2015.

[18] rovo89. Using the xposed framework api.

https://github.com/rovo89/XposedBridge/wiki/Using-
the-Xposed-Framework-API Accessed Jul 17th,
2016.

[19] A. Salman, I. H. Elhajj, A. Chehab, and A. Kayssi.
Mobile malware exposed. In 2014 IEEE/ACS 11th
International Conference on Computer Systems and
Applications (AICCSA), pages 253–258. IEEE, 2014.

[20] M. Shannon and W. Boudville. System and method of
blocking keyloggers, Dec. 28 2006. US Patent App.
11/616,927.

[21] Y. Xia, Y. Liu, C. Tan, M. Ma, H. Guan, B. Zang,

and H. Chen. Tinman: eliminating conﬁdential mobile
data exposure with security oriented oﬄoading. In
Proceedings of the Tenth European Conference on
Computer Systems, page 27. ACM, 2015.

[22] K. Zhao, D. Zou, H. Jin, Z. Tian, W. Qiang, and

W. Dai. Privacy protection for perceptual applications
on smartphones. In 2015 IEEE International
Conference on Mobile Services (MS), pages 174–181.
IEEE, 2015.

7

