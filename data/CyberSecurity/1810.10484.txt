Design of Software Rejuvenation for CPS Security Using Invariant Sets

Raffaele Romagnoli†, Bruce H. Krogh‡ and Bruno Sinopoli†
†Dept.of Electrical and Computer Engineering
‡Software Engineering Institute
Carnegie Mellon University
Pittsburgh, PA USA
brunos}@andrew.cmu.edu
krogh
{rromagnoli
|
|

8
1
0
2

t
c
O
4
2

]

Y
S
.
s
c
[

1
v
4
8
4
0
1
.
0
1
8
1
:
v
i
X
r
a

Abstract— Software rejuvenation has been proposed as a
strategy to protect cyber-physical systems (CSPs) against unan-
ticipated and undetectable cyber attacks. The basic idea is
to refresh the system periodically with a secure and trusted
copy of the online software so as to eliminate all effects
of malicious modiﬁcations to the run-time code and data.
Following each software refresh a safety controller assures the
CPS is driven to a safe state before returning to the mission
control mode when the CPS is again vulnerable attacks. This
paper considers software rejuvenation design from a control-
theoretic perspective. Invariant sets for the Lyapunov function
for the safety controller are used to derive bounds on the time
that the CPS can operate in mission control mode before the
software must be refreshed and the maximum time the safety
controller will require to bring the CPS to a safe operating
state. With these results it can be guaranteed that the CPS will
remain safe under cyber attacks against the run-time system
and will be able to execute missions successfully if the attacks
are not persistent. The general approach is illustrated using
simulation of the nonlinear dynamics of a quadrotor system.
The concluding section discusses directions for further research.

I. INTRODUCTION

Cyber security has become a signiﬁcant research and
issue for control of cyber-physical systems
development
(CPSs), particularly for safety critical applications [1], [2],
[3], [4]. The primary goal is to prevent physical damage to
the system or environment due to malicious cyber attacks.
Standard approaches to security rely on effective attack
models. But attacks can be perpetrated in many different
ways, and it is impossible to model all possible attacks.
Moreover, even the best detection mechanisms are impotent
if an attacker is able to modify the run-time software.

Software rejuvenation, an established method for dealing
with so-called software aging in traditional computing sys-
tems [5], has been proposed recently to deal with unmodeled
and undetectable cyber attacks on CPSs [6], [7]. The idea
is to periodically refresh the run-time system completely
with a trusted, secure copy of the control software to thwart
attacks that may have changed the on-line code. Although
the basic concept has been implemented for some demon-
stration systems, timing bounds for the software rejuvenation
schedule need to be obtained to assure that the software is
refreshed before any damage has been done from malicious
software and that the CPS will remain safe and viable after
restarting the control software. This paper derives these

bounds using invariant sets for the case of controlling a
CPS at an equilibrium state as a ﬁrst step towards a sound
theory of guaranteed security for general CPS using software
rejuvenation.

II. PREVIOUS WORK

The concept of software rejuvenation was introduced by
Huang et al. in 1995 [5] to address the problem of so-
called software aging; that is, failures that occur when a
running program encounters a state that was not anticipated
when the software was designed. The basic idea is to
restart the software intermittently at a "clean" state, either
through complete system reboot or by returning to a recent
checkpoint, with the hope that this will prolong the time until
unanticipated states occur that might cause failures. Since
the introduction of the concept, there has been considerable
research into the development and performance of software
rejuvenation strategies [8], and it has become a practical tool
for enhancing the robustness of many computing systems [9].
Although software aging remains the primary motivation
for implementing software rejuvenation strategies in com-
puting systems, a few papers have proposed software reju-
venation to enhance system security [10], [11]. In contrast to
software aging where mean-time to failure can be the basis
for timing software refresh, the frequency of software refresh
to defend against malicious attacks must be determined by
the length of time a system can remain viable once its
security has been violated.

Arroyo et al. [6], [7] propose software rejuvenation as a
strategy for CPS security and demonstrated the concept for
a quadrotor controller and an automotive engine controller.
These examples illustrate how refreshing software in a CPS
impacts performance and introduces timing constraints and
safety considerations that aren’t present in traditional com-
puting systems.

trust

Abidi et al. [12] develop software rejuvenation for CPS
further by introducing three concepts. First, the hardware
root of
is a secure onboard module that hosts the
capabilities that must be available without compromise to
implement software rejuvenation. Second, the secure exe-
cution interval (SEI) is a period during which all external
communication is disabled so that no cyber attacks can occur
as the software is refreshed. Third, the safety controller,
which executes immediately following a software refresh

 
 
 
 
 
 
and during the SEI, drives the CPS to a known safe state
before restoring communication and returning the system to
mission control with vulnerability to attacks. Abidi et al. use
a simple, conservative reachability algorithm to determine
the time that can be allowed before the next software reset
and illustrate their approach for a simulated warehouse
temperature controller and a bench-top 3-DOF helicopter.

In this paper, we adopt the overall approach to software
rejuvenation from [12], but modify the timing strategy based
on analysis of the control problem. We formulate the soft-
ware rejuvenation problem for CPS applications where the
safety controller is designed using the linearized dynamics
to take the system to a neighborhood of a given equilib-
rium state. Using invariant sets for the safety controller
and system operating constraints, we derive bounds on the
timing parameters for software rejuvenation strategy. We also
introduce the concept of adding control constraints enforced
by the hardware root of trust to increase the time allowed
for mission control and software reset. We demonstrate our
contributions using simulation of the nonlinear dynamics for
a 6-DOF quadrotor.

III. PROBLEM FORMULATION

||

x

∈

×

n matrix Q,

We use the following notation. For a vector x

Rn and
Q = xT Qx. For a given
2
a symmetric n
||
dynamic system, the set of states reachable at time t > 0
from an initial state x(0) = x0 under control policy CP is
(x0, t; CP ), with the natural extension to a set
denoted by
of initial states. When the control policy is clear from the
context, the reachable set will be denoted as
(x0, t; CP ).
For a matrix M with real eigenvalues, λmin(M ) denotes the
minimum eigenvalue of M .

R

R

A. Software rejuvenation algorithm

Figure 1 illustrates the three operating modes for a CPS
with software rejuvenation: mission control (MC), where the
CPS is executing its intended mission with network com-
munication to other agents in the overall system, including
possibly a supervisor; software refresh (SR), when a secure
copy of the operating software is reloaded to eliminate any
possible corruption of the run-time code and data; and safety
control (SC), which is described below. The period for each
of these operating modes is denoted TM C, TSR and TSC,
respectively.

Fig. 1. Software rejuvenation control modes.

Mission control is terminated by the timeout of the refresh
clock. To assure software refresh and safety control executed

without interference from potential attackers, external com-
munication is shutoff and the CPS operates autonomously
during the SEI (TSR + TSC). After execution of the safety
control, the refresh clock is restarted with the refresh clock
period tr (which determines TM C, communication is re-
established and th CPS returns to mission control. Attacks
can occur when there is communication. If there is an attack,
the control actions may not be known to the CPS controller.
This uncertainty about the control actions (and the state of
the CPS) remains through the software refresh.

The pseudo code in Alg. 1 illustrates the implementation
of the overall software rejuvenation strategy. The protected
secure hardware hosts: system communication; trusted soft-
ware image; refresh clock; and control limits that can be
imposed during MC and software SR to constrain what an
adversary could do during this period of uncertain control.
Since the system is operating securely during SC, these limits
can be removed for SC so that it can use the full control
capability.

Algorithm 1 Software Rejuvenation Algorithm

1: Initialize:
2:

→

COMMUNICATION OFF; (protected)
LOAD SOFTWARE; (protected)

CTRL_LIMS; (protected)

(cid:54)∈ E(cid:15)
SAFETY_CONTROL;

3:
4: Step 1:
5: OFF
6: WHILE x
7:
8:
9: ON
→
tr →
10:
COMMUNICATION ON; (protected)
11:
12: Step 2:
13: UNTIL timeout
14:

CTRL_LIMS; (protected)
REFRESH_CLK; (protected)

MISSION_CONTROL;

END

←

REFRESH_CLK (protected)

END
15:
16: Step 3:
17:
18:
19: GO TO Step 1;

COMMUNICATION OFF; (protected)
REFRESH SOFTWARE; (protected)

B. Guaranteeing safety

To guarantee unknown control actions do not drive the
CPS into unsafe or undesired operating states, certain guar-
antees need to be enforced about the possible states reached
during the period of uncertain control (UC), TU C = TM C +
TSR. This is the period when an attacker may have taken
over control of the system. The conditions that need to be
satisﬁed are represented by two sets of states, the safe set and
the inner safe set, denoted
E(cid:15), respectively. Figure
EC
2 illustrates the role of these set. The safe set represents
general operating constraints to assure system safety and
controllability. The goal of the safety controller is to assure
the system remains in
by always returning the state to
the inner-safe set before handing control back to the mission
E(cid:15),
controller. During the period TU C, the state may leave

and

EC

no communicationsoftwarerefreshsafetycontrolTSRTSCTMCsoftwarerefreshTSRsafetycontrolmissioncontrolmissioncontrolTSCtimeoutstartclocktimeouttrstartclockrefresh clock periodpossible unknown control due to attackno communicationnetwork connected(possible attack)mission controlguaranteedcontrolx∈Eεx∈ECx∈ECbut safety control must be executed before the state leaves

.

EC

Fig. 2. State constraints for software rejuvenation. Red: uncertain control;
green: safety control.

General conditions that guarantee the software rejuvena-
are summarized

tion algorithm will keep the system in
by the following proposition [13].

EC

Proposition 3.1: Given a CPS with time-invariant dynam-
, a set of inner safe states
, software refresh time TSR and a safety controller

ics and a set of safe states
E(cid:15) ⊂ EC
SC, if

EC

∃
∃

;
∈ EC
T SC > 0
x
TU C > TSR (cid:51) ∀

i. x(0)
ii.
,
∈ EC
;
iii.
t
0
≤
then for the CPS controlled by the software rejuvenation
algorithm with tr = TU C −

(x, T SC; SC)
TU C,

⊆ E(cid:15); and
⊆ EC

E(cid:15), t; U C)
(
R

TSR, x(t)

∈ EC ∀

R
≤

(cid:51) ∀

≥

0.

t

Proposition 3.1 provides conditions for designing safe
software rejuvenation strategies. Condition (i) requires that
the system starts at a safe state. Condition (ii) indicates the
safety controller must be able to drive the system from all
safe states to the inner safe set in bounded time. The amount
of time SC executes depends on how long it takes to drive the
state to
E(cid:15) (Alg. 1 line 6). Condition (iii) indicates that TU C
must be sufﬁcient for software refresh and small enough that
no admissible control can take the system state from the inner
safe set to an unsafe state before safety control is initiated.
The software refresh time TSR is determined by the system
hardware and the size of the software image.
should be
made as large as possible to maximize the time allowed
for mission control. For a given SC, design of the software
rejuvenation algorithm depends on the size of
E(cid:15) and the
control constraints imposed during TM C and TSR. TU C can
be increased by reducing the size of
E(cid:15) and by making the
control limits more conservative (Alg. 1 line 9). But a smaller
E(cid:15) can lead to longer times for SC and tighter control limits
reduce the control available for MC, so there are clear design
trade offs to be considered.

EC

The remainder of the paper focuses on methods for satis-
fying the conditions in Prop. 3.1 for the case of controlling a
CPS in the neighborhood of an equilibrium point. We assume
a supervisor and mission controller always keep the CPS in
the neighborhood of some equilibrium point, which may be
changing as a mission is executed. What’s important is that
the current equilibrium xe is known and the state of the
of the equilibrium state. Section
system is always with
for
IV shows how to ﬁnd a maximal ellipsoidal safe set

EC

EC

EC

set of operating constraints deﬁned by afﬁne constraints in
the state space
, and how to deﬁne a corresponding class
E(cid:15) such that for any stabilizing safety
of inner safe states
controller T SC can be found to satisfy condition (ii). Section
V shows how to use reachabilty computations to ﬁnd a TU C
that satisﬁes condition (iii).

IV. SAFETY CONTROLLER

The dynamics for the CPS linearized at the equilibrium

state xe are given by the LTI state equations

˙x(t) = Ax(t) + Bu(t)

t

R+,

(1)

∈
Rm. Assuming the state is measur-
where x
able and the system is controllable, the safety controller is
designed as a state feedback control law of the form

Rn and u

∈

∈

u(t) =

Kx(t)

(2)

−
where K is a gain matrix chosen to make the closed-loop
system matrix ASC (cid:44) (A
BK) Hurwitz. Thus, under safety
−
control the system dynamics are stable and given by

˙x(t) = ASCx(t).

(3)

We assume the safe states can be represented by a convex

polyhedral region

Rn of the state space given by

C ⊂
= (cid:8)x

C

ξT
j x

≤

1, j = 1, ..., nc

(cid:9)

(4)

|

where nc represents the number of constraints representing
the operating constraints and the region about the equilibrium
where (1) and (3) hold with the control (2) adhering to the
control limits u

.

EC

as the largest positively invari-
. This largest positively
can be found solving the following

C

Let us deﬁne the safe set

∈ U

ant ellipsoid for (3) contained in
invariant ellipsoid
maximization problem [14]:



EC

max log detQ
s.t. QAT
ξT
j Qξj ≤
Q > 0



SC + ASCQ

0

≤
1, j = 1, ..., nc

Given a solution Q to (5), deﬁne P = Q−
control saturation, V (x) =
(3) with

1. Assuming no
2
P is a Lyapunov function for
||

x

||

˙V (x) = AT

SCP + P ASC < 0.

The positively safe invariant set is given by
= (cid:8)x

1(cid:9) .

x

2
P ≤
||

| ||

EC

Note that
1.
V (x)

≤

is also deﬁned by the set of states satisfying

EC

Given 0 < (cid:15) < 1, we deﬁne the invariant ellipsoid

E(cid:15) (cid:44) (cid:8)x

V (x) =

x

2
P ≤
||

(cid:15) (cid:9) = (cid:15)

.

||
We want to show that there exists a T SC for which condition
(ii) of Prop. 3.1 is satisﬁed.

EC

|

(8)

For any state trajectory x(t) of (3) starting at a given initial

(5)

(6)

(7)

ECx(t)E(cid:15)condition x(0) = x0, it can be shown that [15]

with

V (x(t))

≤

e−

γ(t)V (x(0)),

t

∀

≥

0,

γ = min

x

˙V (x)
−
V (x)

= λmin(W P −

1),

(9)

(10)

−

AT

SCP

where W (cid:44)
P ASC. Therefore, (9) implies a
bound on the maximum time it can take for the safety
controller to drive the state of (3) to x(t)
∈ E(cid:15) (for which
(for which
V (x(t))
V (x0)

(cid:15)) from any initial state x0 ∈ EC

≤
1) is given by

−

≤

T SC = −

ln((cid:15))
γ

.

(11)

We note that in general (11) is a very conservative bound on
the worst-case value of TSC.

V. UNCERTAIN CONTROL PERIOD

This section presents a procedure to ﬁnd a value of the
uncertain control period TU C that satisﬁes condition (iii) of
Prop. 3.1. Two conditions must be satisﬁed:

TU C > TSR

and

∀
where for (1)

0

t

≤

≤

TU C,

(
R

E(cid:15), t; U C)

,

⊆ EC

(12)

(13)

t

−

≤

≤

.
}

∈ U

x
{

eAtx0 + (cid:82) t
|

E(cid:15), t; U C) =
(
R

τ )Bu(τ )dτ,
τ
, 0

0 eA(t
x0 ∈ E(cid:15), u(τ )
We ﬁrst consider condition (13). Following the procedure
from [16], the maximum principle can be applied to over-
approximate the reach set at each point in time with a set
of supporting hyperplanes. We apply this procedure using
that
a polyhedral representation of
P
E(cid:15), 0; U C) and con-
contains
(
R
tinue computing
E(cid:15), t; U C)
(
R
for increasing values of t until the overapproximation is
. The largest value of t for which
not contained in
, t; U C)

U
E(cid:15) as the approximation of
P

EC
provides a value for TU C.
(
P
R
Entering into the details of the method of the computation
of the reach set described in [16], let us start from the
polytopic approximation of
E(cid:15)
= (cid:8)x

, t; U C) which contains

and a polytope

1, i = 1, ..., nc

(
R

⊂ EC

(14)

αT

(cid:9)

i x

P

|

≤

⊃ E(cid:15),

where nc represents the number of constraints. The support-
ing hyperplanes of the reach set

, t; U C) are

(
P
v+
i (x, t) = αi(t)x

R

where αi(t) are the normal directions computed as

αi(t) = e−

AT τ αi.

(15)

(16)

Expression (16) is obtained applying the Pontryagin maxi-
mum principle of optimal control theory [17]. Then, deﬁning
(cid:8)u1, u2, ..., unv (cid:9) the nv vertexes that describise
, an over

U

approximation of the reachable set
(
R
P
(cid:8)x
, t; U C) = (cid:84)nc
v+
i (x, t)
|
(cid:82) t
αi(τ ), Buj(cid:105)
0 maxj (cid:104)

+(

i=1

R

≤

P

, t; U C) is

dτ +

i (x(0), 0)(cid:9) .(17)
v+
Those bounds are generated considering the supporting hy-
perplanes vi(x, t) as a solution of the Hamilton-Jacobi-Isaacs
partial differential equation [18].

maxx(0)

∈P

Since

+(

R

P

nr vertexes deﬁned as x1, x2, ..., xnr ,

, t; U C) can be also represented in terms of

+(

P

R

, t; U C)

⊆ EC ⇐⇒

xiT

P xi

1,

≤

(18)

P

R

for

⊂ EC

, t; U C)

i = 1, ..., nr. The largest value of

+(
If the computed value of TU C ≤

t such that
, is the largest value that satisﬁes (18).
TSR, condition (12)
has not been satisﬁed and two strategies can be used to try
to increase the value TU C: (a) (cid:15) can be reduced; and (b)
the constraints on the control can be reduced. Strategy (a)
increases the distance between the boundary of
E(cid:15) and the
boundary of
, meaning that it will take longer to drive the
system out of the safe set. This results in a smaller inner safe
set, however, which will increase the bound on the worst-
case execution time for the safety controller. Strategy (b) will
decrease the rate at which an attacker can drive the system
out of set of safe states. But the same control limits will
apply for the mission controller, so increased security will
be achieved at the expense of reducing system performance.
We illustrate these strategies to ﬁnd a feasible value for TU C
in the following section.

EC

VI. EXAMPLE

The proposed method is tested on a quadrotor system,
which represents a challenge for secure control scheme based
on software rejuvenation [7] [12]. The considered quadrotor
is the "Generic 10" Quad + geometry" used in the PX4
ﬂight controller platform with full thrust of 4 N, and full
torque of 0.05 Nm for each motor [19]. The quadrotor is
described by a nonlinear mathematical model with 12 state
variables, 3 for the position in the inertial frame of reference,
3 for the orientation of the airframe (roll, pitch, yaw), 3
for the positional velocities, and 3 for the angular velocities
[20]. The control variables are the force normal to the air
frame and the torques about the three angles of orientation.
A matrix multiplication (the "mixer") maps these control
variables to the motor torques.

In general, the controller is designed considering a lin-
earized model of the system around an equilibrium point
[21] [22] [23]. Without loss of generality that equilibrium
point can be considered equal to origin of the state space. It
is important to note that the controller performance depends
on how close the system is operating to the equilibrium point.
Moving the system away from that equilibrium point the
controller could not work in a proper way. In this scenario,
it can be easy for an attacker to pursue physical damage to
the system.

The controller used to stabilize the linearized system is
an LQR controller with integral action [23]. The goal is to
keep the quadrotor hovering at the equilibrium point where
the system has been linearized.

C

EC

For

implementing the proposed software rejuvenation
is computed solving
scheme, the safe invariant ellipsoid
that in
the maximization problem (5) based on the set
this case is represented by a set of constraints on each of
the 12 state variables. For the position, the vertical direction
5 m and the other two directions
is bounded between
5 m/s,
between
and the horizontal velocity limits are
2 m/s. The bounds
on the angles of roll pitch and yaw are fundamental for
good performance of the linear controller. In this case all the
π/4. The angular velocities
angles are bounded between
are between

2 m. The vertical velocity is bounded by

5 rad/s.

±

±

±

±

±

Following the procedure described in Section V, a feasible
value of TU C is 0.37 s for (cid:15) = 0.01, with TSR = 0.1s. The
value of TU C has been computed considering the following
0.0033 Nm for roll and
reduced bounds on the torques,
pitch, and
0.0005 Nm for the yaw. It is important to remark
that, those bounds are not imposed during the SC mode,
where only the less restrictive constraints are considered,
namely 0.05 Nm [19].

±

±

±

Figure 3 shows shows projections of the ellipsoids

EC
(light blue) and
E(cid:15) (light green) on the space of the positions
(left) and angles (right). The ﬁgure also shows the projections
P(cid:15), TU C) (blue polytope) on the sub-
of the reach set
spaces. From the ﬁgure it is possible to observe that all
vertexes are completely contained in the projections of the
invariant ellipsoid

+(

R

.

EC

Fig. 3. Projections of EC(light blue), E(cid:15) (light green) and R+ computed
for (cid:15) = 0.01 and TU C = 0.37s (blue line) on the position (left), and
angles(right).

Using the values TU C = 0.37 s and (cid:15) = 0.01 the algorithm
of software rejuvenation has been tested on the nonlinear
model of the quadrotor controlled by the LQR controller
developed using the linearized model of the system. Several
tests have been carried out simulating attacks that provide
arbitrary control inputs. In all the cases the reset clock tr and
safety controller keep the state of the system from hitting the
boundary of

.

Figure 4 shows the position behaviour of the quadrotor

EC

respect the invariant ellipsoids, and Fig. 5 shows the zoom
of the behaviour respect the several modes of the controller.
Figure 6 shows the time-line for the scheduling of the
software rejuvenation modes in a scenario with two attacks.
In the ﬁrst case the attacker turns off all the propellers, and
in the second the case the attacker tries to drive the system
to a different equilibrium point.

Fig. 4. Quadrotor position behaviour respect to EC(light blue) and E(cid:15) (light
green).

Fig. 5.
Zoom of the position behaviour during the several modes: MC
without attack (orange), MC with attack (red), SR (blue), and SC (green).

The results show the effectiveness the adopted solution
using TU C = 0.37 s and (cid:15) = 0.01 Fig.4. In Fig.6the con-
troller is operating in MC (orange), SR (blue), SC (green),
and MC under attack (red). It is important to note that, in the
case of normal operation during the MC mode, the quadrotor
E(cid:15) after SR, so SC is not activated. If the quadrotor
remains in
is out of
E(cid:15) after SR, SC is activated and this happens in
particular after the two attacks. Note that the SC activation
does not require the attack detection; the activation strategy
is based only on verifying the state condition xT P x

1.

≤

VII. DISCUSSION

This paper presents conditions for safety controller de-
sign and timing parameters to support the implementation

−0.500.5−0.500.5−2−1012xyz−0.500.5−0.500.5−0.500.5φθψ−0.500.5−0.500.5−2−1012xyz0-22·10−20-22·10−30-10.4Turn-oﬀAttackTake-overAttackxyzMCwithoutattackSRMCwithattackSCnational Conference on Distributed Computing Systems Workshops,
2008. ICDCS’08., pages 495–500. IEEE, 2008.

[2] Jill Slay and Michael Miller. Lessons learned from the maroochy
water breach. In International Conference on Critical Infrastructure
Protection, pages 73–82. Springer, 2007.

[3] Defense Use Case. Analysis of the cyber attack on the ukrainian power
grid. Electricity Information Sharing and Analysis Center (E-ISAC),
2016.

[4] Ralph Langner. Stuxnet: Dissecting a cyberwarfare weapon.

IEEE

Security & Privacy, 9(3):49–51, 2011.

[5] Y. Huang, C. Kintala, N. Kolettis, and N.D. Fulton.

Software
In Proceedings of
rejuvenation: Analysis, module and applications.
25th International Symposium on Fault Tolerant Computing, pages
381–390, Pasadena, CA, June 1995. IEEE Computer Society.

[6] Miguel A. Arroyo, Lakshminarasimhan Sethumadhavan, and Jonathan
Weisz. Secured cyber-physical systems, June 2017. United States
Patent Number 15/618019 (pending).

[7] Miguel Arroyo, Hidenori Kobayashi, Simha Sethumadhavan, and
Junfeng Yang. FIRED: frequent inertial resets with diversiﬁcation
arXiv preprint
for emerging commodity cyber-physical systems.
arXiv:1702.06595, 2017.

[8] Domenico Cotroneo, Roberto Natella, Roberto Pietrantuono, and Ste-
fano Russo. A survey of software aging and rejuvenation studies. J.
Emerg. Technol. Comput. Syst., 10(1):8:1–8:34, January 2014.

[9] J. Alonso, A. Bovenzi, J. Li, Y. Wang, S. Russo, and K. Trivedi.
Software rejuvenation: Do it amp;amp;amp; telco industries use it?
In 2012 IEEE 23rd International Symposium on Software Reliability
Engineering Workshops, pages 299–304, Nov 2012.

[10] Khin Mi Mi Aung and Jong Sou Park.

Software rejuvenation
approach to security engineering.
In Antonio Laganá, Marina L.
Gavrilova, Vipin Kumar, Youngsong Mun, C. J. Kenneth Tan, and
Osvaldo Gervasi, editors, Computational Science and Its Applications
– ICCSA 2004, pages 574–583, Berlin, Heidelberg, 2004. Springer
Berlin Heidelberg.

[11] Chen-Yu Lee, Krishna M. Kavi, Mahadevan Gomathisankaran, and
Patrick Kamongi. Security through software rejuvenation. In The Ninth
International Conference on Software Engineering Advances ICSEA,
Nice, France, Oct 2014.

[12] Fardin Abdi, Chien-Ying Chen, Monowar Hasan, Songran Liu, Sibin
Mohan, and Marco Caccamo. Guaranteed physical security with
restart-based design for cyber-physical systems. In Proceedings of the
9th ACM/IEEE International Conference on Cyber-Physical Systems,
ICCPS ’18, pages 10–21, Piscataway, NJ, USA, 2018. IEEE Press.

[13] Jean-Piere Aubin. Viability Theory. Birkh¨auser, 2009.
[14] Stephen Boyd, Laurent El Ghaoui, Eric Feron, and Venkataramanan
Balakrishnan. Linear matrix inequalities in system and control theory,
volume 15. Siam, 1994.

[15] Rudolf E Kalman and John E Bertram. Control system analysis
and design via the “second method” of Lyapunov: I—continuous-time
systems. Journal of Basic Engineering, 82(2):371–393, 1960.
[16] Inseok Hwang, Dušan M Stipanovi´c, and Claire J Tomlin. Polytopic
approximations of reachable sets applied to linear dynamic games and
a class of nonlinear systems. In Advances in control, communication
networks, and transportation systems, pages 3–19. Springer, 2005.

[17] Pravin Varaiya. Reach set computation using optimal control.

In
Veriﬁcation of Digital and Hybrid Systems, pages 323–331. Springer,
2000.

[18] Alexander B Kurzhanski and Pravin Varaiya. Dynamic optimization
Journal of Optimization Theory and

for reachability problems.
Applications, 108(2):227–251, 2001.

ﬂight

controller:
geome-
10"
https://github.com/PX4/jMAVSim/blob/

[19] Px4
try.
83bf400d71588131e2c6e179a6c63e8585271275/src/
me/drton/jmavsim/Simulator.java#L314,
09/2018.

Generic

view:

quad

Last

+

[20] Randal Beard. Quadrotor dynamics and control rev 0.1. 2008.
[21] Hossein Bolandi, Mohammad Rezaei, Reza Mohsenipour, Hossein
Nemati, and Seed Majid Smailzadeh. Attitude control of a quadrotor
Intelligent Control and Automation,
with optimized pid controller.
4(03):335, 2013.

[22] Samir Bouabdallah, Andre Noth, and Roland Siegwart. Pid vs lq
control techniques applied to an indoor micro quadrotor. In Proc. of
The IEEE International Conference on Intelligent Robots and Systems
(IROS), pages 2451–2456. IEEE, 2004.

Time scheduling diagram respect the several conditions, SR
Fig. 6.
Software Refresh (blue), SC Safety Control (green), M C mission control
(orange), and mission control under attacks: Turn-off Attack and Take-over
Attack (red).

of software rejuvenation to provide CPS security against
cyber attacks on the run-time code and data. The approach
for the case of linear dynamics at an equilibrium state is
developed the general results are illustrated using simulation
of a quadrotor, demonstrating how safety can guaranteed
without having to detect the cyber attacks. The results in
this paper provide the foundation for implementing tracking
control, where a supervisory generates the reference signal
to the mission control algorithm in a manner that provides a
sequence of equilibrium states for safety control. In contrast
the safety controller
to the approach developed in [12],
executes only when it is needed, with an upper bound on
the time required to return the system to a safe state, and
the reachability set computations to determine the software
refresh time are performed ofﬂine rather than at run time.

There are several directions for future research. The safety
control time bound and the reset time can be improved using
less conservative reachability algorithms. We are currently
extending the results to incorporate state estimation, model-
ing uncertainties and disturbances. We are also developing
experimental implementations and investigating methods for
managing the equilibrium information and control limits on
protected hardware components.

ACKNOWLEDGMENTS

Copyright 2018 IEEE. All Rights Reserved. This material is based upon
work funded and supported by the Department of Defense under Contract
No. FA8702-15-D-0002 with Carnegie Mellon University for the operation
of the Software Engineering Institute, a federally funded research and
development center. This material has been approved for public release and
unlimited distribution. Please see Copyright notice for non-US Government
use and distribution. Carnegie Mellon R(cid:13) is registered in the U.S. Patent and
Trademark Ofﬁce by Carnegie Mellon University.

REFERENCES

[1] Alvaro A Cardenas, Saurabh Amin, and Shankar Sastry.

control: Towards survivable cyber-physical systems.

Secure
In 28th Inter-

012345678SRSCMCTurn-oﬀAttackTake-overAttackTimes[23] Oualid Araar and Nabil Aouf. Full linear control of a quadrotor
uav, lq vs h∞. In Control (CONTROL), 2014 UKACC International
Conference on, pages 133–138. IEEE, 2014.

