fortiss GmbH
White Paper, 2018

9
1
0
2

n
a
J

2

]

O
L
.
s
c
[

2
v
6
6
8
4
0
.
0
1
8
1
:
v
i
X
r
a

Model-Based Safety and Security Engineering

Vivek Nigam1*, Alexander Pretschner1,2, and Harald Ruess1

Abstract
By exploiting the increasing surface attack of systems, cyber-attacks can cause catastrophic events, such as,
remotely disable safety mechanisms. This means that in order to avoid hazards, safety and security need to
be integrated, exchanging information, such as, key hazards/threats, risk evaluations, mechanisms used.
This white paper describes some steps towards this integration by using models. We start by identifying
some key technical challenges. Then we demonstrate how models, such as Goal Structured Notation (GSN)
for safety and Attack Defense Trees (ADT) for security, can address these challenges. In particular, (1) we
demonstrate how to extract in an automated fashion security relevant information from safety assessments
by translating GSN-Models into ADTs; (2) We show how security results can impact the conﬁdence of safety
assessments; (3) We propose a collaborative development process where safety and security assessments
are built by incrementally taking into account safety and security analysis; (4) We describe how to carry out
trade-off analysis in an automated fashion, such as identifying when safety and security arguments contradict
each other and how to solve such contradictions. We conclude pointing out that these are the ﬁrst steps
towards a wide range of techniques to support Safety and Security Engineering. As a white paper, we avoid
being too technical, preferring to illustrate features by using examples and thus being more accessible.

1fortiss GmbH, Munich, Germany
2Technical Univeristy of Munich, Munich, Germany
*Corresponding author: nigam@fortiss.org

Contents

Introduction

1 Main Technical Challenges

2

3

4

5

6

7

8

Safety and Security Techniques

Integrating Safety and Security using MBE

Safety to Security

Security to Safety

Collaborative Process for Safety and Security

Trade-off Analysis

Conclusions

References

1

3

3

6

7

9

10

12

13

14

Introduction
The past years have witnessed a technological revolution
interconnecting systems and people. This revolution is lead-
ing to new exciting services and business models. Managers
can now remotely adapt manufacturing to customers needs
in the so called Industry 4.0 paradigm. In the very near
future, vehicles will operate with high levels of autonomy
making decisions based on information exchanged with
other vehicles and the available infrastructure. Similarly,
autonomous UAVs will be used to transport cargo and peo-
ple.

This technological revolution, however, leads to new
challenges for safety and security. The greater connec-
tivity of systems increases their attack surface [20], that

is, the ways an intruder can carry out an attack. Whereas
in conventional systems, attacks, such as car theft, require
some proximity to their target, with interconnected systems,
cyber-attacks, such as stealing sensitive data or hacking into
safety-critical components, can be carried out remotely.

This increased attack surface has important consequences
for system safety. Security can no longer be taken lightly
when assessing the safety of a system.1 Indeed, cyber-
attacks can lead to catastrophic events [14, 15, 13, 16].
For example, cyber-attacks exploiting a connection to an
autonomous vehicle may remotely disable safety features,
such as airbags, thus placing passengers in danger [15].
Therefore, both safety and security have to be taken
into account in order to conclude the safety of a system.
On the other hand, this increased surface attack also has
important consequences to security itself. While traditional
security concerns, such as, handling physical attacks, e.g.,
car theft, remain important concerns, security engineers
shall consider a wider range of cyber-attacks due to the
increased attack surface and, in particular, cyber-attacks
that lead to catastrophic events. This means that security
engineers shall understand information normally contained
in safety assessments, such as, which are the catastrophic
events and how they can be caused/triggered. That is, secu-
rity analysis shall take into account safety concerns.

Finally, this technological revolution will also have
an impact on system certiﬁcation processes. It is unrea-
sonable to allow the delivery of products to consumers with-

1By, for example, enforcing that only authorized persons are near to

sensitive parts of the system.

 
 
 
 
 
 
Model-Based Safety and Security Engineering — 2/15

out considering attacks that may lead to catastrophic events.
Companies will soon need to provide detailed security analy-
sis arguing that the risk of such threats is acceptable. While
current certiﬁcation agencies do not demand such analy-
sis, there have been initiatives towards this direction, e.g.,
RTCA DO-326A [9], SAE J3061 [6], ISO 21434 [4], ISO
15408 [2]. This change on certiﬁcation processes will
have an important impact to the processes and business
models of companies. It is, therefore, important to develop
techniques that integrate safety and security that can facili-
tate the development of such safety and security arguments.

Problem Statement Safety and security are carried out
with very different mind-sets. While safety is concerned
in controlling catastrophic events caused by the malfunc-
tioning of the system, security is concerned in mitigating
attacks from malicious agents to the system.

The difference between safety and security is reﬂected
in the types of techniques used for establishing safety and
security assessments. Safety assessments are constructed
by using analysis techniques such as Fault Tree Analysis
(FTA), Failure Mode and Effect Analysis (FMEA), System
Theoretic Process Analysis (STPA), Goal Structured No-
tation [12], speciﬁc safety designs and mechanisms, e.g.,
Voters, Watchdogs, etc. Security, on the other hand, uses dif-
ferent assessment techniques, such as Attack Trees [41], At-
tack Defense Trees [31], STRIDE, and security designs and
mechanisms, e.g., access control policies, integrity checks,
etc.

It is not clear how these different techniques can be
used in conjunction to build a general safety and security
argument. Questions such as the following have to be an-
swered: What is the common language for safety and
security? How can security engineers use safety assess-
ments to build security arguments? What is the impact
of security assessments to safety cases? What are the
trade-offs to be considered? Which methods can be im-
plemented within current practices?

This difference in mentality is also reﬂected in the de-
velopment process leading many times to Poor Process In-
tegration of Safety and Security. Safety and security con-
cerns are only integrated at very late stages of development
when fewer solutions for conﬂicts are possible/available.
For example, in secure by design processes, security en-
gineers participate from the beginning proposing security
design requirements. However, they do not take into ac-
count the impacts of such requirements on safety arguments,
for example, adding mechanisms with unreasonable delays.
The lack of Integration of Safety and Security leads to
increased development costs, delays and less safe and
secure systems.

Beneﬁts of Safety and Security Integration Besides im-
proving the safety and the security of systems, the integra-
tion of safety and security can lead to a number of beneﬁts.
We highlight some possible beneﬁts:

•

Early-On Integration of Safety and Security: Safety
and security assessments can be carried out while
the requirements of system features are established.
Safety assessments provide concrete hazards which

•

•

should be treated by security assessments, thus help-
ing security engineers to set priorities. For exam-
ple, a safety hazard shall be given a higher priority
compared to other security attacks which do not cause
catastrophic events;

Veriﬁcation and Validation: While safety has many
well-established methods for veriﬁcation, security
veriﬁcation relies mostly on penetration testing tech-
niques, which are system dependent and therefore,
resource intensive. The integration of Safety and Se-
curity can facilitate security veriﬁcation. Much of
knowledge gathering can be retrieved from safety
assessment, thus saving resources. For example,
FTAs describe the events leading to some hazardous
event, while FMEAs describe single-points of fail-
ures. This information can be used by security en-
gineers to plan penetration tests, e.g., exploit single-
point of failures described in FMEAs, thus leading to
increased synergies and less development efforts;

Safety and Security Mechanisms Trade-Off Anal-
ysis: By integrating safety and security analysis, it
is possible to analyze trade-offs between control and
counter-measures proposed to support safety and se-
curity arguments. On the one hand, safety and se-
curity measures may support each other, making
one of them superﬂuous. For example [28, 37],
there is not need to use CRC (Cyclic Redundancy
Check) mechanisms for safety, if messages are being
signed with MAC (Message Authentication Codes)
as the latter already achieves the goal of checking for
message corruption. On the other hand, safety and
security mechanisms may conﬂict with each other.
For example, emergency doors increase safety by al-
lowing one to exit a building in case of ﬁre, but it may
decrease security by allowing unauthorized persons
to enter the building. Such trade-off analysis can help
solve conﬂicts as well as identify and remove redun-
dancies reducing product and development costs.

Outline Model-Based Engineering (MBE) is widely used
by industries such as automotive [3], avionics [10] and
Industry 4.0 [8] for developing systems. The scope of
the methods we propose will assume a MBE development
where models play a central role. As a white paper, we will
avoid being too deep (and technical), preferring to illus-
trate the range of possibilities with examples. In future
works, however, we will describe in detail the techniques
used as well as propose extensions.

Section 1 identiﬁes key technical challenges for the in-
tegration of safety and security. Section 2 reviews brieﬂy
the main techniques used for safety and security. Section 3
describes how MBE provides the basic machinery for inte-
grating safety and security. Section 4 describes, by example,
how one can extract security relevant information from
safety assessments. Section 5 describes how the evaluation
of security assessments can impact the conﬁdence in safety
assessments. Section 6 builds on the material in the previous
sections and proposes a collaborative safety and security
development process. Section 7 describes how to carry out

trade-off analysis between safety and security mechanisms.
We illustrate how the detection of conﬂicts can be done
automatically. Finally, Section 8 concludes by pointing out
our next steps.

We also point out that the techniques described here
have been implemented or under implementation as new
features of the Model-Based tool AF3 [1] maintained by
fortiss’s MBSE department.

1. Main Technical Challenges

This section introduces some of challenges that we believe
are important for safety and security integration and there-
fore, shall and will be tackled in the following years.

In the Introduction, we mentioned that the difference in
safety and security mind-sets lead to different techniques
for carrying out safety and security assessments. One lacks
a common ground, that is, a language that can be used to
integrate both safety and security assessments. Without
such common ground there is little hope to integrate safety
and security in any meaningful way. This leads to our ﬁrst
challenge:

Challenge 1: Develop a common language which can be
used to integrated safety and security assessments.

Safety assessments contain useful information for secu-
rity engineers to evaluate how attacks can cause catastrophic
events. Indeed, safety assessments contain the main hazards,
how these can be triggered, control mechanisms installed,
entry points, etc. However, safety assessments are written
in the most varied forms and often in non-machine read-
able formats, e.g., Word documents. This prevents security
engineers to use safety assessments effectively in order to
understand how cyber-attacks could affect the safety of a
system. This leads to our second challenge:

Challenge 2: Develop techniques allowing the
(semi-)automated extraction of relevant security
information from safety assessments.

It is not reasonable to conclude the safety of an item
without considering its security concerns. For example, an
airbag cannot be considered safe if an intruder can easily
deploy it at any time. This means that security assessments
related to safety hazards shall impact security assessments.
So, if a security assessment concludes that there is unac-
ceptable security risk of the airbag being deployed, this
conclusion should render the airbag safety unacceptable. To
do so, we need techniques for incorporating the conclusions
of the security assessments in safety assessments. This leads
to our third challenge:

Challenge 3: Develop techniques allowing the
incorporation of relevant security assessment ﬁndings into
safety assessments.

Safety and security assessments often lead to changes
on the architecture by, for example, incorporating control
and mitigation mechanisms. Many times, these mechanisms
may support each other to the point of being redundant. If

Model-Based Safety and Security Engineering — 3/15

this is the case, some mechanisms may be removed thus
reducing costs. On the other hand, some mechanisms may
conﬂict each other. Therefore, decisions may need to be
taken, e.g., ﬁnding alternative mechanisms or prioritizing
safety over security or vice-versa. That is, trade-offs shall be
carried out. However, there are no techniques for carrying
out such trade-offs, leading to our fourth challenge:

Challenge 4: Develop techniques allowing the
identiﬁcation of when safety and security mechanisms
support, conﬂict or have no effect on each other, and to
carry out trade-off analysis.

In order to certify a system, developers have to pro-
vide enough evidence, i.e., safety arguments, supporting
system safety. As mentioned in the Introduction, with in-
terconnected systems, safety arguments shall also consider
security. Currently, safety arguments provide detailed quan-
titative evaluation for the safety of systems based on the
probability faults. When taking security into account such
quantitative evaluations no longer make sense as the prob-
abilities of an attack to occur are in another order of mag-
nitude as the probability of faults. Unfortunately, there are
no techniques to present such quantitative safety arguments
taking into account security. This leads to our last challenge:

Challenge 5: Develop techniques for quantitative
evaluation of system safety including acceptable risk from
security threats.

This white paper provides some ideas on how we plan
to tackle these challenge. Challenge 1 and 2 are treated
in Section 4; Challenge 3 and 5 are treated in Section 5.
Challenge 4 is treated in Section 7. We plan in the next
years to build and expand on these ideas.

2. Safety and Security Techniques

This section brieﬂy reviews the main techniques used for
establishment of safety and security as well as some pro-
posals for integrating safety and security. Our goal is not to
be comprehensive, but rather review established techniques
that will be used in the subsequent sections.

2.1 Safety
We review some techniques used by engineers to evaluate
and increase the safety of a system, namely, Fault Tree Anal-
ysis (FTA), Failure Modes and Effect Analysis (FMEA),
Goal Structured Notation, and safety mechanisms.

Fault Tree Analysis (FTA): FTA is a top-down approach
used in order to understand which events may lead to unde-
sired events. It is one of the most important techniques used
in safety engineering. An FTA is a tree with the root labeled
with the top undesired event. The tree contains “and” and
“or” nodes specifying the combination of events that can
lead to the undesired event.

Consider, for example, the FTA depicted in Figure 1.
The undesired event is Y placed at the root of the tree. A
safety engineer is interested on the cut sets of an FTA, that
is, the collections of events, normally component faults, that

Model-Based Safety and Security Engineering — 4/15

•

Partial Loss of Function, that is, when the function
does not operate at full operation, e.g., some of the
redundant components of the function are not opera-
tional.

Effect and cause are descriptions of, respectively, the
impact of the failure mode of the function to safety and
what could a cause for such failure be, e.g., failures of
sub-components. Severity, Occurrence and Detection are
numbers, ranging normally from 1-10. The higher the value
for severity the higher the impact of the failure. The higher
the value for occurrence the higher is the likelihood of the
failure. The higher the value of detection the less likely it is
to observe (and consequently activate control mechanisms)
the failure.

Finally, the value RPN is computed by multiplying the
values for severity, occurrence and detection. It provides
a quantitative way of classifying the importance of failure
modes. The higher the value of RPN of a failure the higher
its importance.

As we argue in Section 4, FMEAs also provide useful in-
formation for security engineers. For example, it describes
the severity of failure modes and its causes. Therefore, se-
curity engineers can use this information to prioritize which
attacks to consider. Notice, however, that occurrence does
not play much importance for security engineers as occur-
rence in FMEA does not reﬂect the likelihood of attacks to
occur, but rather the likelihood of faults/failures.

Safety Mechanisms: Safety mechanisms, such as voters,
watchdogs, are often deployed in order to increase the safety
of a system. For example, consider the hazard unintended
airbag deployment. Instead of relying on a single signal,
e.g., crashing sensor, to deploy an airbag, a voter can be used
to decide to deploy an airbag taking into account multiple
(independent) signals, e.g., crashing sensor and gyroscope,
thus reducing the chances for this hazard.

However, as pointed out by Preschern et al. [39], safety
mechanisms themselves can be subject to attacks. For ex-
ample, an attacker may tamper the voter leading to a hazard.
As we detail in Section 4, if security engineers are aware of
the deployment of such mechanisms, they can assess how
likely it is to attack them to trigger a hazard.

Goal Structured Notation (GSN): Safety assessments are
complex, breaking an item safety goal into safety sub-goals,
e.g., considering different hazards, and often applying dif-
ferent methods, e.g., FTA, FMEA, Safety Mechanisms.
GSN [12] is a formalism introduced to present safety as-
sessments in a semi-formal fashion.

Since its introduction, different safety arguments have
been mapped to GSN patterns. Consider, for example, the
GSN pattern depicted in Figure 2. It speciﬁes the argument
by analysing all the possible/known hazards to an item’s
safety. It is assumed that all the hazards are known. For
each hazard a safety argument, also represented by a GSN-
Model, is speciﬁed. At the leaves of the GSN-Model, one
describes the solutions that have been taken, e.g., carry out
FTA, FMEA, safety designs, etc.

Figure 1. FTA Example.

lead to the undesired event. For this FTA example, the cut
sets are:

,

,
}

A,D
{

B,C
}
as any of these combinations lead to the event Y. If both A
and D happen at the same time, the left-most and branch is
satisﬁed leading to the event Y.

E,F
}
{

A
{

}

{

,

From a FTA, one can compute the minimum cut sets,
that is, the minimum set of cut sets that encompasses all
possible combinations of triggering an undesired event. The
minimum cut set for the given example is

B,C
{

,
}

A
{

,
}

E,F
}
{

A
{

.
}

Notice that the event A already triggers the event Y. There-
as it is
A,D
fore, there is no need to consider the cut set
}
subsumed by the cut set

{

Given the minimum cut sets, a safety engineer can, for
example, show compliance with respect to the safety re-
quirements. This may require placing control measures to
reduce the probability of the corresponding undesired event.
As we argue in Section 4, FTA provides very useful
information for security engineers. Indeed, an attack trig-
gering, for example, the event A would lead to an undesired
(possibly catastrophic) event. This means that penetration
tests could be more focused in assessing how likely/easy it
is to trigger event A, rather than ﬁnding this from scratch.

Failure Modes and Effect Analysis (FMEA): FMEA is a
bottom-up approach (inductive method) used to systemat-
ically identify potential failures and their potential effects
and causes. Thus FMEA complements FTA by instead of
reasoning from top-level undesired events as in FTA, adopt-
ing a bottom-up approach by starting from faults/failures of
sub-components to establish top level failures.

FMEAs are, normally, organized in a table containing
the columns: Function, Failure Mode, Effect, Cause, Sever-
ity, Occurrence, Detection and the RPN value.

Failure modes are established for each function. Exam-

ples of failure modes include [7]:

•

•

Loss of Function, that is, when the function is com-
pletely lost;

Erroneous, that is, when the function does not be-
have as expected due to, for example, an implementa-
tion bug;

•

Unintended Action, that is, the function takes the
action which was not intended;

Clearly, such safety arguments can provide important
information for security. For example, it contains the key

YorandandandAADBCEFModel-Based Safety and Security Engineering — 5/15

Figure 4. Attack Tree Example.

Moreover, the greater the number of outruled defeaters the
greater the belief on the GSN-Model and the lower the
disbelief. In Figure 3, a total of 60 = 20 + 40 defeaters have
been identiﬁed and only 25 = 10 + 15 have been outruled.
These values yield a Belief of 0.4, Disbelief of 0.56 and
Uncertainty of 0.03.3 If further 20 defeaters are outruled,
then the Belief is increased to 0.73, the Disbelief reduces to
0.24 and the Uncertainty remains the same value 0.03.

Intuitively, only arguments that have high belief, thus
low uncertainty and low disbelief, shall be accepted. As we
argue in Section 5, such a quantitative information can be
used to incorporate the results of security assessments in
safety assessments. For example, if no security assessment
has been carried out for a particular item, then the associated
uncertainty shall increase. On the other hand, if a security
has been carried out establishing that the item is secure, then
the belief on the safety of the item shall increase. Otherwise,
if an attack is found that could compromise the safety of the
item, then the disbelief shall increase.

2.2 Security
We review some models used for carrying out threat analysis.
More details can be found in Shostack’s book [42] and in
the papers cited.

Attack Trees: First proposed by Schneier [41], attack
trees and its extensions [19, 31] are among the main se-
curity methods for carrying out threat analysis. An attack
tree speciﬁes how an attacker could pose a threat to a system.
It is analogous to GSN-Models [12] but, instead of arguing
for the safety of a system, an attack tree breaks down the
possibilities of how an attack could be carried out.

Consider, for example, the Attack Tree depicted in Fig-
ure 4. It describes how an intruder can successfully steal a
server. He needs to have access to the server’s room and be
able to exit the building without being noticed. Moreover, n
order to access to the server’s room, he can break the door
or obtain the keys.

Attack Defense Trees (ADTs): Attack defense trees [31]
extend attack trees by allowing to include counter-measures
to attack trees. Consider the attack defense tree depicted in
Figure 5 which extends the attack tree depicted in Figure 4.
It speciﬁes counter-measures, represented by the dotted
edges, to the possible attacks. For example, “breaking the
door” can be mitigated by installing a security door which

3We refer to the work of Jøsang [30] on how exactly these values are

Figure 2. GSN Hazard Pattern.

Figure 3. Example of GSN-Model with Quantitative
Information. Here the pair m/n attached to goals speciﬁes,
respectively, the number of defeaters outruled and the total
number of identiﬁed defeaters.

safety hazards of an item. It also contains what type of
solutions and analysis have been carried out. However, a
problem of GSN-Models is the lack of more precise seman-
tics. The semantics is basically the text contained in the
GSN-Models, which may be enough for a human to under-
stand, but it does not provide enough structure for extracting
automatically security-relevant information. In Section 4,
we extend GSN-Models and show how to construct security
models, namely, Attack Trees, from a GSN-Model.

Finally, recent works [45, 24] have proposed mecha-
nisms for associating GSN-Models with quantitative values
denoting its conﬁdence level. These values are inspired
by Dempster-Shafer Theories [23] containing three values
for, respectively, the Belief, Disbelief, and Uncertainty on
the safety assessment. These values may be assigned by
safety experts [45] or be computed from the total number of
identiﬁed defeaters2 and the number of defeaters one was
able to outrule [24].

We illustrate the approach proposed by Duan et al. [24].
Consider the GSN-Model depicted in Figure 3. It contains
a main goal which is broken down into two sub-goals. GSN
goals are annotated with the number of defeaters outruled
and the total number of defeaters. Intuitively, the greater
the total number of defeaters, the lower is the uncertainty.

2A defeater is a belief that may invalidate an argument.

computed.

ItemSafetyAllhazardsaresuﬁcientlycontrolledGoalStrategyAllhazardsareidentiﬁedAssumptionHazard1GoalHazard2GoalHazardnGoal············GSNsSolutionsItemSafetyAllhazardsaresuﬁcientlycontrolledGoalStrategyAllhazardsareidentiﬁedAssumptionHazard1GoalHazard2Goal···10/2015/40···25/60Belief=0.4Disbelief=0.56Uncertainty=0.03StealtheServerandAccesstoServer’sRoomExitUnobservedorBreaktheDoorHaveKeysModel-Based Safety and Security Engineering — 6/15

Figure 5. Attack Defense Tree Example.

is harder to break into. Similarly, installing a security cam-
era or hiring a security guard can mitigate that the attacker
leaves the building undetected. Attack defense trees also
allow to model how attackers could attack mitigation mech-
anisms. For example, a cyber-attack on the security camera
causing it to record the same image reduces the camera’s
effectiveness.

Quantitative Attack Defense Trees Attack Defense Trees
are not only a qualitative threat analysis technique, but they
provide quantitative information [17, 19]. Quantitative in-
formation can represent, for example, “what is the likeli-
hood and impact of the attack?”, “what are the costs of
attacking a system?”, “how long does the attack require?”.
Bagnato et al. [17] propose mechanisms to associate quan-
titative information to attack defense trees and to carry out
computation to answer such questions. From the quantita-
tive information, security engineers shall decide whether
the security risk is acceptable.

2.3 Safety and Security
The problem of safety and security has been known for some
time already and techniques have been proposed. They fall
into the following two main categories:

General Models for Both Safety and Security: A num-
ber of works [36, 29, 35] have proposed using general mod-
els encompassing both safety and security concerns. For
example, GSN extensions with security features, so that
in a single framework, one can express both security and
safety [35].

Although it is an appealing approach, it does not take
into account the different mind-sets between safety and
security, which poses serious doubts on the practicality of
such approach. On the one hand, security engineers do use
GSNs for threat modeling and it is hard to expect them to
combine security threats with solutions such as FTA, FMEA,
etc. On the other hand, safety engineers are not security
experts, so it is hard to expect that they would develop deep
security analysis.

Figure 6. Safety and Security Lenses.

An example of this approach is the use of standard
(natural) language, such as Guide Words [26], with informa-
tion in safety assessments relevant for carrying out security
assessments. For example, HAZOP uses guide words to
systematically describe the hazards, such as under which
condition it may occur. This information can provide hints
for carrying out security analysis.

Recently, D¨urrwang et al. [26] have proposed the follow-
ing set of guide words for embedded systems: disclosure,
disconnected, delay, deletion, stopping, denial, trigger, in-
sertion, reset, and manipulation. These words provide a
suitable interface between safety and security terminology
thus allowing security engineers to better understand and re-
use work carried out by safety engineers. This methodology
has been used [25] to ﬁnd a security ﬂaw in airbag devices.

3. Integrating Safety and Security using
MBE
Model-Based Engineering (MBE) proposes development by
using (domain-speciﬁc) models, such as GSNs [12], Attack
Defense Trees [41], Matlab Simulink [5], SysML [11] and
AF3 [1]. These models are used to exchange information
between engineers to, for example, further reﬁne require-
ments, implement software/systems/architecture, including
software deployment.

This is illustrated by Figure 6. Requirements are traced
to components that are then embedded into the given hard-
ware. These model-elements (requirements, components
and deployments) reﬂect different development aspects, in-
cluding safety an security. Safety arguments expressed as
GSN are reﬂected into the model-elements. For example,
the handling of hazards shall be expressed as safety re-
quirements and safety designs, such as voters, as safety de-
sign requirements. Similarly, threats identiﬁed by security
arguments shall yield security requirements and counter-
measures as security design requirements.

Features of our Approach: As we will illustrate in the
following sections, MBE provides a general framework for
the integration safety and security through model-elements.
We enumerate below some of the differences/features of our
approach with respect to existing approaches described in
Section 2.3:

In-
Safety Assessments used for Security Analysis:
stead of building a general model for both safety and secu-
rity, some approaches [26, 40, 44] propose the development
of safety assessments and then “passing the ball” to security
engineers to carry out security analysis based on the safety
assessments.

1. GSN and ADT Integration: Instead of natural lan-
guage as in a Guide Words approach (see Section 2.3),
we use models, GSN-Models and ADTs. Models con-
tain much more information than Guide Words, e.g.,
traces to components, logical relation of solutions
and hazards, quantitative evaluation. Furthermore, as

InstallSecurityDoororSecurityGuardInstallCameraInstallSecurityLockStealtheServerandAccesstoServer’sRoomExitUnobservedorBreaktheDoorHaveKeysRequirementsComponentsDeploymentSafetyPerspectiveSecurityPerspectiveThreat1Threatn...ADT1ADTnItemSecurityGoal1Goalm...GSN1GSNmItemSafetyModel-Based Safety and Security Engineering — 7/15

we describe in Section 4 and 5, information from a
GSN-Model can be used to construct ADTs automat-
ically and evaluations of ADTs can be incorporated
into the evaluation of GSN-Models impacting a GSN-
Model’s conﬁdence;

tion 2.3).4 We illustrate this with an example. Consider the
GSN-Model depicted to the left in Figure 7 derived from
the D¨urrwang et al.’s recent work on airbag security [25].
There are two main safety hazards to be considered for
airbag safety:

2. Development as a Game: On the one hand, models
that contain both safety and security annotations, like
security extensions of GSN [36], require that safety
and security work closely together in a single model,
instead of using specialized techniques and models
for safety and security. On the other hand, Guide
Words allow safety and security to use their own tech-
niques, but collaboration resumes to a single “passing
the ball” from safety to security. This means that
security is not taken into account for safety.

Our development proposal has the advantages of both
methods above. It is a collaborative process where the
“ball is passed” between safety and security engineers
until an acceptable risk is reached. Moreover, it also
allow safety and security engineers to use their own
specialized models (GSN-Models, FTA, FMEA, etc
for safety and Attack Defense Trees for security). We
describe our process in Section 6 being illustrated by
Figure 10

3. Trade-Off Analysis: Models also help to carry out
trade-off analysis. In particular, GSN-Models con-
tain solutions, such as safety mechanisms, and ADTs
contain counter-measures, such as security mecha-
nisms (such as counter-measures). As we illustrate in
Section 7, we can identify when safety and security
mechanisms contradict each other. Once a conﬂict is
identiﬁed, compromises should be found, e.g., ﬁnding
other mechanisms or prioritizing safety over security.
We describe how such contradiction can be solved.

4. Safety to Security

This section describes how safety assessments, expressed
as GSN-Models, can be used by security engineers. As
described in Section 2.1, a GSN-Model contains safety de-
tails, such as the key hazards, safety methods (FTA, FMEA),
and safety mechanisms used (Voters, Watchdogs) to control
hazards. These details can be very useful for carrying out
security assessments, such as understand which are the haz-
ards, how they can be triggered, which safety mechanisms
could be attacked. Our main goal here is to illustrate how a
GSN-Model can be transformed into Attack Tree specifying
a preliminary security assessment for the item assessed by
the GSN-Model.

However, the ﬁrst obstacle we face is that GSN-Models
are syntactic objects, where its nodes are described with
(arbitrary) text, lacking thus more precise semantics. It
is, therefore, not possible to extract systematically from a
GSN-Model security relevant information. That is, GSN
lacks a common language for safety and security integration
(Challenge 1).

We overcome this obstacle by assigning semantics to
GSN nodes, inspired by the work on Guide Words (Sec-

•

•

Unintended Prevention of Airbag Deployment, that
is, during a safety critical event, e.g., an accident,
the airbag is not deployed. The failure to deploy the
airbag reduces the passenger safety during accidents.
Notice, however, that other safety mechanisms, e.g.,
safety belt, may still be enough to ensure passenger
safety;

Unintended Airbag Deployment, that is, the airbag
is deployed in a situation not critical. A passenger,
e.g., a kid, sitting while the car is parked may be
hurt if the airbag is deployed. Different from the
previous hazard, safety mechanisms, e.g., safety belt,
do not ensure the passenger safety. Additional safety
mechanisms shall be implemented, such as Voters, as
depicted in the GSN-Model.

All this information is just described textually in the
GSN-Model. However, they shall be reﬂected in safety and
safety design requirements as depicted in Figure 7 by the
dashed lines. We propose adding additional meta-data to
these requirements, called domain speciﬁc requirements.
The exact meta-data may vary depending on the domain.
For embedded systems, safety requirements shall contain
data such as:

•

•

•

Hazard Impact, which speciﬁes how serious the cor-
responding hazard is to the item safety. From the
reasoning above, the hazard Unintended Prevention
of Airbag Deployment has a low impact, while Unin-
tended Airbag Deployment has a high impact;

Mechanism which may be one of the Guide Words
detailed in Section 2.3. For example, the hazard Un-
intended Airbag Deployment is caused by triggering
of the air-bag component;

Trace from requirement to component is already part
of the MBE development. It relates a requirement
to a component in the architecture. In this case, the
GSN nodes refer to the airbag component.

Similarly, solutions, such as voters, are mapped to safety
design requirements, for which, we also attach some meta-
data. Different types of solutions (FTA, FMEA, Safety
Mechanisms) would involve different meta-data. In the
case of voters, one speciﬁes the signals used by the voters
(Sig1, . . . , SigN), the threshold, M, used for deciding when
the voter is activated. In our Airbag example, its voter uses
signals from the Gyroscope and the Crash detector. Only
if all of them indicate a crash situation, then the airbag is
deployed.

4One could attempt to provide a more general semantics to GSN-
Models instead of only its nodes. However, it is not clear yet how this
can be done and left to future work. We focus here, instead, on adding
enough/minimal meta-data in order to provide useful safety and security
integration.

Model-Based Safety and Security Engineering — 8/15

Figure 7. GSN-Model: Airbag Deployment and example of attaching semantics to GSN-Models using domain speciﬁc
requirements.

impact of these attacks, namely, triggering is more harmful
than stopping airbag deployment, thus helping prioritize
resources, e.g., penetration testing.

Notice that while the voter only appears in one branch of
the airbag GSN-Model, attacks appear in both branches of
the airbag attack tree. This is because an attack stopping the
voter stops airbag deployment. This can be automatically
inferred by the meta-data of the voter, ﬁrst, specifying that
it is a M out of N voter and that it is traced to the airbag
component.

Solutions, such as, voters, FTA, FMEA, can also be

translated to attack sub-trees.

•

•

•

Safety Mechanisms: A safety mechanisms can nor-
mally be subject to a large number of attacks as enu-
merated by Preschern et al. [39]. We can use Guide
Words to reduce this list to those attacks that are rel-
evant. For example, an attack triggering a voter M
out of N can be achieved by spooﬁng M signals or by
tampering the voter. It is not necessary to consider
denial of service attacks. On the other hand, stopping
the voter may be achieved by carrying out a denial of
service attack on the voter;

FTA: The minimum cut-sets (see Section 2.1) result-
ing from the FTA can be used to construct attack trees.
is a minimum cut-set,
For example, if
then an attack would consist of carrying out attacks to
trigger all events ev1, . . . , evn, by, for example, spoof-
ing them;

ev1, . . . , evn
{

}

FMEA: The table of failures composing an FMEA
(see Section 2.1) can also be used to construct an
attack tree. In particular, the ﬁeld failure mode speci-
ﬁes the type of attack on the corresponding function.
For example, a loss of function entry can be achieved
by denying service or tampering the function. Sim-
ilarly, the severity ﬁeld indicates how serious the
failure mode is and the detection ﬁeld indicates how

Figure 8. Attack Tree for the Airbag Item.

Notice that the meta-data attached to domain speciﬁc
requirements basically reﬂect the content in the GSN node,
but in a uniform format which can be machine-readable.
This meta-data provides semantic information to GSN
nodes. For example, the meta-data in the requirement as-
sociated with the node No Unintended Airbag Deployment
speciﬁes that the node represents a hazard of high impact
which can be the result of triggering the airbag component.5
The information associated to GSN-Model is enough to
extract useful information for security engineers, allowing
to construct (automatically) an attack tree on the security of
an item from its corresponding GSN-Model. For example,
the attack tree depicted in Figure 8 can be extracted from the
airbag GSN-Model depicted in Figure 7. From the attack
tree, security engineers can identify two different types of
attacks, stopping airbags or triggering airbag deployment.
Notice how the guide words stopping and triggering are
used in the construction of the trees. Moreover, from the
impact information, security engineers can understand the

5We are taking extra care to develop domain speciﬁc requirements to
contain simple, but useful meta-data. While one could be more formal
and express requirements in formal languages, such as Linear Temporal
Logic [38], our experience shows that they are not effective in practice as
few engineers and even specialists can write such formulas.

AirbagSafetyAllhazardsaresuﬁcientlycontrolledGoalStrategyAllhazardsareidentiﬁedAssumptionGoal···Goal···NoUnintendedPreventionofAirbagDeploymentGoalGoalNoUnintendedAirbagDeploymentVoter···RequirementsSafetyRequirement•HazardImpact:Low•Mechanism:Stopping•Trace:Air-bagComponentPossiblyotherMeta-DataSafetyRequirement•HazardImpact:High•Mechanism:Triggering•Trace:Air-BagComponentPossiblyotherMeta-DataSafetyDesignRequirement•Mechanism:MoutofNVoter•Signals:Sig1,...,SigN•Trace:Air-BagComponentPossiblyotherMeta-Data•Threshold(M):mAirbagSecurityorAttackStoppingAirbagDeploymentAttackTriggeringAirbagDeploymentAttackTriggeringVoterAttackStoppingVoterdisguised the attack can be. It seems possible to trans-
form this information into quantitative information
attached to attack trees [17, 19]. This is left for future
work.

Finally, notice that the attack tree constructed from a
GSN-Model provides a preliminary attack tree on the item
in question. This tree may be extended considering other
possible attacks and attaching counter-measures.

5. Security to Safety

As described in Section 2.1, it is possible to attach quanti-
tative evaluation to GSN based on the number of defeaters
identiﬁed and overruled. The result of the quantitative eval-
uation are three non-negative real values, B, D,U, in [0, 1]
such that B + D +U = 1: B is the belief on the GSN-Model,
D the disbelief and U the uncertainty. (See the work of
Duan et al. [24] for more details.) A GSN-Model shall only
be acceptable if it has a high enough level of belief and
low enough levels of disbelief and uncertainty. The exact
degree of belief may depend on different factors, such as,
how critical the item.

Security threats are possible defeaters for GSN-Models
as they may invalidate the safety argument. There are the
following possibilities according to the security assessment
carried out:

•

No Security Assessment for the Item: If no secu-
rity assessment has been performed, then it is a de-
feater that has not yet been outruled and therefore,
the uncertainty of the GSN-Model shall be increased.

•

Existing Security Assessment for the item: There
are two possibilities6:

– Acceptable Security Risk: If the security as-
sessment concludes that there is acceptable se-
curity risk, that is, identiﬁed threats are sufﬁ-
ciently mitigated, then this shall have a positive
effect on the belief of the corresponding GSN-
Model;

– Unacceptable Security Risk: On the other hand,
if the identiﬁed threats are not sufﬁciently miti-
gated, leading to an unacceptable risk, the dis-
belief of the safety case shall be increased.

Figure 9 illustrates how one can integrate GSN-Models
and ADTs. The value w is a non-negative value specifying
the importance of the security assessment for the item safety.
The greater the value of w, the greater is the impact of the
security assessment. For instance, if w is zero, then the
impact of the security assessment on the safety assessment
is negligible. Depending on the evaluation of the item
security as described above, the levels of conﬁdence of the
GSN-Model are updated to B1,U1, D1.

6There are many ways to quantify an attack defense tree, e.g., the
effort, time, cost required by the attacker to attack an item. Based on these
values together with other parameters, e.g., the value of the item, security
engineers can evaluate whether the risk is acceptable or not. For example,
if all identiﬁed attacks to an item take too long to take place, then the risk
of such attacks is acceptable.

Model-Based Safety and Security Engineering — 9/15

Figure 9. Illustration of GSN-Model and ADT integration.
Here, the values B,U, D are, respectively the levels of
belief, disbelief and uncertainty of the safety assessment
expressed in the GSN-Model. The new levels of belief,
disbelief, and uncertainty, B1,U1, D1, are obtained after
integrating the security assessments (if any) taking into
account the weight w, a non-negative number.

We illustrate this with an example implementing a sim-
ple update function. Notice, however, that other functions
can be used (and subject to future work). Consider that
B = 0.70, D = 0.20,U = 0.10 and w = 2. The values for
belief, disbelief and uncertainty are updated taking into ac-
count the security assessment for the item in question if
there is any as detailed below and the weight w:

•

No Security Assessment: In this case, the uncer-
tainty shall increase. We do so by ﬁrst updating the
values for the belief and disbelief, reducing their val-
ues according to w as follows:

B1 = B/(1 + w) = 0.7/(1 + 2) = 0.23
D1 = D/(1 + w) = 0.2/(1 + 2) = 0.07

Then we compute the uncertainty as follows:

U1 = U + (B

−
= 0.1 + (0.7

B1) + (D

D1)
0.23) + (0.2

−

−

0.07) = 0.7.

−

where the uncertainty increases.

•

Acceptable Security Risk: In this case, the belief
shall increase. We do so by carrying out the following
computations similar to above, where uncertainty and
disbelief decrease:

U1 = U/(1 + w) = 0.1/(1 + 2) = 0.03
D1 = D/(1 + w) = 0.2/(1 + 2) = 0.07

Then, we compute the new belief as follows:

B1 = B + (D

−
= 0.7 + (0.2

D1) + (U

U1)
0.07) + (0.1

−

−

0.03) = 0.9.

−

where the belief increases.

•

Unacceptable Security Risk: In this case, the dis-
belief shall increase. We do so by carrying out the
following computations similar to above, where be-
lief and uncertainty decrease:

B1 = B/(1 + w) = 0.7/(1 + 2) = 0.23
U1 = U/(1 + w) = 0.2/(1 + 2) = 0.07

ItemSafetyGoalItemSecurityGSNADThB,D,UihB1,D1,U1iwModel-Based Safety and Security Engineering — 10/15

•

•

•

•

•

Initial Safety Assessment: Assume given an ini-
tial safety assesssment for an item represented as
a GSN-Model. This starts the process by issuing
safety requirements (with meta-data as described in
Section 4);

Security Assessment: Using the machinery described
in Section 4, we can build an ADT for the item from
the GSN-Model. This ADT may be extended with
new threats as well as with mitigation mechanisms;

Security Feedback to Safety: Using the machinery
described in Section 5, the evaluation of the security
assessment is integrated into the GSN-Model yield-
ing values for belief, disbelief and uncertainty. One
ﬁnishes the safety and security collaboration if these
values are acceptable. Otherwise, there are two pos-
sibilities: Either reﬁne the safety assessment, e.g.,
outrruling more defeaters, or as depicted in Figure 10,
request for a better security;

Additional Mitigations: Once the request of improv-
ing security is received, security engineers can add
further mitigation mechanisms in order to improve
its security;

Safety Revision: The mitigation mechanisms may
impact the safety of the system, e.g., add additional
delays or add new single points of failure, etc. This
may yield additional safety argumentation.

This collaborative development cycle repeats, possibly
adding new safety and security mechanisms, until an accept-
able security risk is reached.

Airbag Example: To illustrate this cycle, let us return to
the Airbag safety assessment expressesd by the GSN-Model
depicted in Figure 7. From this GSN-Model, we can con-
struct corresponding attack tree in Figure 8. This ADT shall
yield an unacceptable risk as the threats of stopping the
voter and triggering the voter have not been further investi-
gated. This impacts the safety assessment by reducing its
belief, disbelief and uncertainty (as described in Section 5).
Assume that these values are not acceptable. Thus, the
security engineer is requested to improve the ADT.

In order to improve the ADT, the security engineer may
evaluate the risk of, for example, stopping the voter and
triggering the voter. However, from the information con-
tained in the hazard meta-data (Figure 7), the impact of
stopping the voter is lower than the impact of triggering
the voter. Therefore, the security engineers may decide
to further investigate the attack triggering the voter. They
may discover, for example, the attack found by D¨urrwant
et al. [25] on the security access mechanism which poses
a serious threat. In order to mitigate this threat, they can
add as counter measure to perform plausibility checks as
suggested by D¨urrwant et al. [25], which would reduce the
security risk.

As new counter-measures have been added, a request to
revise safety assessments is issued. Safety engineers have
to then argue that the plausibility checks are safe, that is,
may not affect the airbag safety, by, for example, preventing

Figure 10. Collaborative Safety and Security Process
Cycle.

Then, we compute the new disbelief as follows:

D1 = D + (B

−
= 0.2 + (0.7

B1) + (U

U1)
0.23) + (0.1

−

−

0.03) = 0.7.

−

where the disbelief increases.

Notice that in all cases the new values, B1, D1,U1, remain
within the interval [0,1] and B1 + D1 +U1 = 1. Moreover,
notice that if w = 0, then B1 = B, D1 = D,U1 = U, that is,
the security assessment does not affect the safety assess-
ment.

The use of quantitative evaluations for GSN-Models
and ADTs is a way to tackle Challenge 3 (incorporation of
relevant security ﬁndings into safety assessments) and Chal-
lenge 5 (quantitative evaluation for safety including security
assessments), as we are able to incorporate the conclusion
of security asssessments into the quantitative evaluation of
safety assessments and at the same time provide a quantiﬁ-
cation on the credibility of the safety case in terms of belief,
disbelief and uncertainty.

6. Collaborative Process for Safety and
Security

While this paper’s focus is on techniques to integrate secu-
rity and safety, in this Section, we describe how the tech-
niques described above can be put together as a collabora-
tive process for building an integrated safety and security
assessments. We also describe in Subsection 6.1 some
further challenges that would need to be investigated and
sketch ideas on how to tackle these challenges.

In particular, in Sections 4 and 5, we described how
safety assessments in the form of GSN-Models can be used
for constructing security assessments in the form of ADT,
and moreover, how security assessment results can be in-
tegrated into safety assessment by modifying its levels of
belief, disbelief and uncertainty. In this section, we describe
how these techniques can be put together as a collabora-
tive process for building an integrated safety and security
assessments.

Consider the process cycle illustrated by Figure 10.

ItemSafetyGSNItemSecuritySafetyRequirementADTQuantitativeEvaluationDoneEnoughconﬁdence?YesNoImproveSecurityItemSecurityADTMitigationsItemSafetyGSNReviseSafetyAssessmentAdditionalSafetyArgumentationduetoproposedmitigations.airbag deployment. New safety mechanisms may be placed
if necessary which may lead to new threats to be analyzed
by security engineers. This process ends when the levels of
belief, disbelief and uncertainty are acceptable.

6.1 Safety and Security Process Challenges
We identify the following general challenges for any safety
and security processes, namely, Incremental Assessment
Modiﬁcations, Assessment Completeness and Assessment
Veriﬁcation and Validation:

In order to be
Incremental Assessment Modiﬁcations:
practical, incremental changes to the system shall require
only incremental changes to the existing assessments. That
is, whenever there is a small modiﬁcation to the system, as-
sessments do not need to be re-done from scratch, but only
small focused modiﬁcations are needed that are relevant to
the changes made. Of course, the deﬁnition of incremental
depends on the system in question. It may be, for exam-
ple, the inclusion of a localized counter-measure or safety
solution in a system.

Indeed, as described above, the inclusions of plausi-
bility checks as mitigation mechanisms for attacks on the
Airbag system impacts the safety assessment, but only in
an incremental fashion: The safety engineer shall evaluate
whether these plausibility checks can increase the chance
of the hazard of stopping airbag deployment when it shall
be deployed. The other concerns in the assessment do not
need re-assessment.

This example also illustrates how Guide Words and
models can be used for identifying which parts of assess-
ments are impacted by incremental changes to the system.
Mitigations added for mitigating attacks related to compo-
nent hazards associated with the Guide Word “trigger” shall
require further safety assessments on component hazards as-
sociated to the Guide Word “stop”. We believe that further
generalizations are possible with the other Guide Words.

Assessment Completeness: A safety and security pro-
cess shall produce assessments that are complete, that is,
covers all hazards and possible threats. For safety there are
precise techniques, such as FTA, FMEAs, for assessing the
completeness of safety assessments with respect to safety
hazards. These are, in practice, enforced by certiﬁcation
agencies using, for example, ASIL or DAL levels, requiring
precise probability of failure requirements. This is less so
for security assessments, as there is no precise deﬁnition of
when the risk is acceptable.

Since when integrating safety and security, the conﬁ-
dence on safety assessment depends on evaluation of the
security assessment, the conﬁdence of safety assessments
are no longer precise by just using ASIL levels. One needs,
therefore, deﬁnitions of completeness of security assess-
ments.

We elaborate on some possible deﬁnitions of security
assessment completeness. We also envision deﬁnitions that
combine these notions of completeness depending on the
type of system.

Model-Based Safety and Security Engineering — 11/15

•

•

•

•

Complete with respect to some formal property:
Given a formal property, such as a set of behaviors7,
the assessment is complete when it follows that the
system in question satisﬁes the formal property. The
main advantage of this deﬁnition of completeness
is its formal nature. However, this is also its main
disadvantage as few engineers are able to write such
properties and moreover, they are many times hard
to validate. This is either because existing automated
methods, such as, Model-Checkers, do not scale, or
semi-automated methods require a great deal of ex-
pertise;

Complete with respect to Intruder Capabilities:
Completeness can depend on the assumptions on the
intruder capabilities, such as, whether he can inject
messages, replay messages, block messages. That
is, the security assessment is said to be complete
if the system in question is secure with respect to
the given assumptions of the intruder capabilities.
Such intruder models have been successfully used,
for example, in protocol security veriﬁcation. One
advantage is that it can also be made more precise
using formal deﬁnitions. One disadvantage is that
it has been shown, until now, to work only for logi-
cal attacks. There are less success stories for other
types of attacks, such as attacks on cyber-physical
domains, where there intruders may use, for example,
side-channels;

Complete with respect to Known Attacks: Given a
set of known attacks, the security assessment is com-
plete when it follows that the system in question has
acceptable risk with respect to each known attack. An
advantage of this approach is that it is attack-centric,
focusing on concrete attacks. However, a disadvan-
tage is that the size of the set of known attacks can
increase rapidly. Moreover, in order to validate the as-
sessment, security engineers would need to reproduce
each attacks and if it is discovered that the system
is vulnerable to an attack, possible causes shall be
identiﬁed, which may take much effort being even
impractical;

Complete with respect to Known Defects: Given
a set of known defects, such as vulnerabilities, the
assessment is complete if it demonstrates that the sys-
tem in question does not have anyone of the given
defects. A main advantage with respect to, for ex-
ample, the deﬁnition of completeness with respect
to known attacks, is that, in principle, the number
of defects is less than then the number of attacks, as
different attacks may exploit the same defect. For ex-
ample, a number of attacks (Buffer-Overﬂows, SQL
injections) exploit the lack of string input checks.
Moreover, there are methodologies, such as, static
analysis, defect-based testing, that can be used to
identify and mitigate many defects.

7Or even sets of sets of behaviors, as in hyper-properties [21].

Model-Based Safety and Security Engineering — 12/15

depicted in Figure 11 of a building. The arguments express
the following concerns:

•

•

Building Safety: The GSN-Model speciﬁes, among
other possible hazards, controlling the hazard of peo-
ple getting hurt when the building is in ﬁre. It pro-
poses as solutions installing a ﬁre detector and an
emergency door. These solutions are associated with
domain speciﬁc safety requirements (pointed by the
corresponding dashed lines). These requirements are
functional requirements specifying that the boolean
signal SigFire is true when a ﬁre is detected and
false otherwise and that when SigFire is true then the
emergency door shall be unlocked, that is, the signal
DoorLock is false.

Building Trespassing: The ADT breaks down the
threat of a malicious intruder trespassing in the build-
ing. A possibility is by entering the building using the
emergency door. This threat is mitigated by installing
a security lock in the emergency door with an authen-
tication mechanism (e.g., biometric, code, card). This
mitigation is associated to a domain speciﬁc security
requirement, specifying the function of the security
door: If the authentication mechanism signal Auth is
false, then the emergency door shall be locked.

Given these arguments (GSN-Model and ADT) and
its associated domain speciﬁc requirements, it is possible
to identify potential conﬂicts: one simply needs to check
whether the requirements have intersecting set of signal
In this example, the DoorLock output signal is
names.
mentioned in both the security lock requirement and in the
emergency door requirement. A priori, the fact that the same
signals are mentioned does not mean that there is a conﬂict,
but only that these are potential candidates for conﬂicts.
This is just one possible method for identifying conﬂict
candidates. Other methods may use the trace, the type of
requirements, etc. It is important, however, to have simple
mechanisms to determine these candidates as in a usual
development a large number of requirements are speciﬁed.
Once the potential candidates are identiﬁed, it remains
to check whether they are indeed conﬂicting. We illustrate
how this can be done using off-the-shelf tools. First, we ex-
tract the logical clauses in the requirements, where SigFire
and Auth are input signals and DoorLock is the output sig-
nal:

SigFire
Auth

¬

⇒ ¬
⇒

DoorLock

DoorLock

from emer. door req.
from sec. lock req.

The question is whether these clauses can entail contra-
dicting facts. This is clearly the case as when SigFire is
true implies that DoorLock is false, and when Auth is false
implies that DoorLock is true, thus yielding a contradiction.
For such (more or less) simple speciﬁcations, one can de-
tect such contradiction manually. However, as speciﬁcation
become more complicated and the number of requirements
increase, checking all potential contradictions for actual
contradictions becomes impractical. It is much better is to
automate this process as we demonstrate with this example.

Figure 11. Illustration of GSN-Model and ADT for
detecting conﬂicts on proposed safety and security
mechanisms.

Assessment Veriﬁcation and Validation (V&V): The as-
sessment shall also contain enough information for engi-
neers to carry out veriﬁcation and validation plans. At the
end, there shall be guarantees that the system in question
satisﬁes the properties the assessment claims to establish,
namely, that the system in question has acceptable safety
and security risks.

In particular, the assessment shall contain information
on what types of validation and veriﬁcation plans shall be
deployed. This is closely related to the notion of complete-
ness of the assessment. For example, assessments based on
defects can be veriﬁed and validated by techniques, such as,
defect-based testing. On the other hand, assessments based
on particular attacks shall describe how to carry out these
attacks.

7. Trade-off Analysis

In this section, we describe methods towards carrying out
trade-off analysis between safety and security mechanisms.
Such analysis may help decide which mechanisms to be
implemented. It may be that there are synergies between
safety and security mechanisms which would make them
redundant. For example [28, 37], CRC checks used for
checking the integrity of messages and MAC used to en-
sure that no message is corrupted. Therefore, MAC could
replace CRC, rendering CRC not needed. On the the other
hand, safety and security mechanisms may conﬂict, that is,
interfere with their purposes. In such cases, one may have
to decide on alternative mechanisms or ultimately choose
either safety or security.

We illustrate how MBE can be used to carry out these
trade-offs with an example. Consider the safety and security
arguments expressed by a GSN-Model and an ADT and

BuildingSafetyAllhazardsaresuﬁcientlycontrolledGoalStrategyAllhazardsareidentiﬁedAssumptionGoalGoalHazard:BuildinginFireEmergencyDoor···RequirementsSafetyDesignRequirement•Mechanism:EmergencyDoor•Invariant:•Trace:BuildingEmergencyDoorPossiblyotherMeta-DataGSNFireDetectorSafetyDesignRequirement•Mechanism:FireDetector•Invariant:•Trace:FireDetectorPossiblyotherMeta-DataGSNADTBuildingTrespassingThreatorADTThreatEmergencyDoorTrespassingCounterMeasureSecurityLockSecurityDesignRequirement•Mechanism:SecurityLock•Invariant:•Trace:BuildingEmergencyDoorPossiblyotherMeta-DataifAuth==falsethenDoorLock==true.SafetyDesignRequirement•Mechanism:FireDetector•Invariant:•Trace:FireDetectorPossiblyotherMeta-DataifSigFire==truethenDoorLock==falseSigFire==trueifﬁredetectedandfalseotherwise.Before, however, we should point out that traditional
classical logic (propositional logic) is not suitable for this
problem because of the famous frame problem [34]. This
is because only propositions that are supported by the ex-
tracted logical clauses shall be derivable. One way to solve
this problem is to use the Closed World Assumption [33]
from the knowledge representation literature [18]. We
will use here the logic paradigm Answer-Set Programming
(ASP) [27, 18] which allows speciﬁcations using the Closed
World Assumption and the solver DLV [32]8 which supports
ASP.

We start by adding for each predicate (SigFire, DoorLock,

Auth), a fresh predicate with a preﬁx neg corresponding to
its classical negation (negSigFire, negDoorLoc, negAuth).
Thus it should not be possible that, for instance, negDoorLock
and DoorLock are both inferred from the speciﬁcation at
the same time as this would be a contradiction. Second, we
translate the clauses above into the following ASP program
using DLV syntax:9

1: DoorLock :- negAuth.
2: negDoorLock :- SigFire.
3: negAuth v Auth.
4: negSigFire v SigFire.
5: contradiction :- DoorLock, negDoorLock.
6: :- not contradiction.

The ﬁrst two lines are direct translations of the clauses
above. The lines 3 and 4 specify, respectively, that either
negAuth or Auth is true10 and either negSigFire or SigFire
is true. Line 5 speciﬁes that there is a contradiction if
both DoorLock and negDoorLock can be derived. Finally,
line 6 is a constraint specifying that only solutions that
contain contradiction shall be considered. This is because
for this example we are only interested in ﬁnding (logical)
contradictions. If there is no such solution, then the theory
is always consistent and therefore, the requirements are not
contradicting.

For the program above, however, we obtain a single
solution (answer-set) when running this program in DLV:

{DoorLock, negAuth, negDoorLock,

SigFire, contradiction}

indicating the existence of a contradiction, namely, the one
we expected where Auth is false and SigFire is true.

Once such contradictions are found, safety and security
engineers have to modify their requirements. A possible
solution is for the security lock to check whether there is a
ﬁre or not, that is, having the following invariant:

if Auth == f alse and SigFire == f alse then
DoorLock == true.

which resolves the contradiction as can be checked by again
using DLV.

Sun et al. [43] propose determining such conﬂicts by
using the rewriting tool Maude [22]. While their encoding

8http://www.dlvsystem.com/
9A logic programming clause of the form A :- B1, ..., Bn shall

be interpreted as the clause B1, . . . , Bn

A.

10The symbol v should not be interpreted as “or”, but more close to

⇒

“x-or”, though not exactly. More details can be found at [32].

Model-Based Safety and Security Engineering — 13/15

is much more involved than ours, the use of Maude has
the potential of ﬁnding different types of conﬂicts, such as
involving delays. This is because the encoding in Maude
speciﬁes part of the operational semantics of the system,
while our encoding only takes into account the logical en-
tailment.

Finally, this proof-of-concept example illustrates how
conﬂicts are detected. It seems possible to also determine
when requirements support each other, by adding suitable
meta-data in domain speciﬁc requirements. For example,
CRC and MAC solutions for the same communication chan-
nels. Further investigation is left for future work.

8. Conclusions
The main goal of this white paper is to set the stage for
Safety and Security Engineering. We identiﬁed some key
technical challenges in Section 1. We then illustrated with
examples techniques that can help address some of these
challenges. For example, we showed how to extract security
relevant information of safety assessments by translating
GSN-Models into ADTs. For this, we provided semantics
to GSN nodes by using domain-speciﬁc requirements. We
also showed how to use existing machinery on quantitative
evaluation of GSN-Model and ADTs to incorporate the ﬁnd-
ings of security assessments into safety assessments. We
then proposed a collaborative development process where
safety and security engineers incrementally build arguments
using their own methods. Finally, we demonstrated how
paradigms, such as Answer-Set Programming, can be used
to identify when safety and security assessments are con-
ﬂicting.

This is clearly the start of a long and interesting journey
towards Safety and Security Engineering. Besides further
developing the techniques illustrated in this white paper, we
identify the following future work categorized into Tech-
niques, Processes and Certiﬁcation:

Techniques: As pointed out throughout the white
paper, the techniques we illustrate are going to be
subject of intensive future work. We would like to
answer questions such as: which meta-data should be
added to domain-speciﬁc requirements or to models
in order to enable further automated model transla-
tion? How can different security domains impact
safety cases? How can we automatically detect other
types of contradictios, such as timing contradictions?
Finally, how can trade-off analysis be compiled so to
facilitate conﬂict solving?

Collaborative Processes: While here we illustrate
a collaborative process involving safety and security
concerns only, we are investigating how to extend
this collaboration with other aspects, such as perfor-
mance and quality. We are also investigating how
better tooling can make the collaborative process go
smoothly, e.g., automated notiﬁcations. Also we are
investigating techniques for addressing the challenges
described in Section 6.1.

Certiﬁcation: We are currently investigating how

•

•

•

the techniques and the collaborative process cycle re-
late with certiﬁcations, such as the ISO 26262 [3]. A
particular goal for future work is to build automated
techniques that can be used to support the building of
convincing safety and security assessments, comple-
menting recent work [40] on the topic.

Finally, we plan to apply the techniques in extended
use-cases from different domains. We will also report these
results as scientiﬁc papers and technical reports to industry.

Acknowledgments

We thank our industry partners, in particular, Airbus De-
fense and BMW Research, for valuable discussions. We
also thank the AF3 team for helping us with the implemen-
tation of features in AF3. Finally, we also thank the fortiss
Safety and Security Reading group.

References
[1] AF3 – AutoFOCUS 3. More information at https:

//af3.fortiss.org/.

[2] ISO 15408, Information technology - Security tech-
niques - Evaluation criteria for IT security (Common
Criteria).

[3] ISO 26262, Road vehicles — Functional safety —
Part 6: Product development: software level. Avail-
able from https://www.iso.org/standard/
43464.html.

[4] ISO/SAE AWI 21434, Road Vehicles – Cybersecurity

engineering. Under development.

[5] Matlab/Simulik. More information at https://in.
mathworks.com/products/matlab.html.
[6] SAE J3061: Cybersecurity guidebook for cyber-
from
systems.

physical
https://www.sae.org/standards/
content/j3061/.

Available

vehicle

[7] Standard ARP 4761: Guidelines and methods
for conducting the safety assessment. Available
https://www.sae.org/standards/
from
content/arp4761/.

[8] Standard IEC 61499: The new standard in automation.
Available from http://www.iec61499.de/.

[9] Standard RTCA DO-326A: Airworthiness

se-
curity process
Available from
http://standards.globalspec.com/std/
9869201/rtca-do-326.
[10] Standard RTCA DO-331:

speciﬁcation.

veriﬁcation

velopment
and
DO-178C and DO-278A.
https://standards.globalspec.com/
std/1460383/rtca-do-331.

Model-based
supplement
Available

de-
to
from

[11] SysML. More information at https://sysml.

org/.

[12] GSN Community Standard Version 1. 2011. Available
at http://www.goalstructuringnotation.
info/documents/GSN_Standard.pdf.

Model-Based Safety and Security Engineering — 14/15

[13] Hackers

remotely kill
in it,
way—with me
https://www.wired.com/2015/07/
hackers-remotely-kill-jeep-highway/.

Jeep on the high-
at

a
2015.

Available

[14] Cyberattack
2016.
https://www.sentryo.net/
Available
cyberattack-on-a-german-steel-mill/.

a German

steel-mill,

on

at

features,

lets hackers

[15] A deep ﬂaw in your car

shut
dowm safety
Available
2018.
https://www.wired.com/story/
at
car-hack-shut-down-safety-features/.
[16] Hacks on a plane: Researchers warn it’s only ’a matter
of time’ before aircraft get cyber attacked, 2018. Avail-
able at https://tinyurl.com/ycgfa3j8.
[17] Alessandra Bagnato, Barbara Kordy, Per H˚akon Me-
land, and Patrick Schweitzer. Attribute decoration of
attack-defense trees. IJSSE, 3(2):1–35, 2012.

[18] Chitta Baral. Knowledge Representation, Reasoning
and Declarative Problem Solving. Cambridge Univer-
sity Press, 2010.

[19] Stefano Bistarelli, Fabio Fioravanti, and Pamela Peretti.
Defense tree for economic evaluations of security in-
vestment. In ARES 06, pages 416–423, 2006.

[20] Corrado Bordonali, Simone Ferraresi, and Wolf Richter.
Shifting gears in cyber security for connected cars,
2017. McKinsey&Company.

[21] Michael R. Clarkson and Fred B. Schneider. Hyper-
properties. Journal of Computer Security, 18(6):1157–
1210, 2010.

[22] Manuel Clavel, Francisco Dur´an, Steven Eker, Patrick
Lincoln, Narciso Mart´ı-Oliet, Jos´e Meseguer, and Car-
olyn Talcott. All About Maude: A High-Performance
Logical Framework. LNCS. Springer, 2007.

[23] A. P. Dempster. Upper and lower probabilities induced
by a multivalued mapping. The Annals of Mathematical
Statistics, 1967.

[24] Lian Duan, Sanjai Rayadurgam, Mats Heimdahl, Oleg
Sokolsky, and Insup Lee. Representation of conﬁdence
in assurance cases using the beta distribution. 2016.
[25] J. D¨urrwang, M. Braun, , R. Kriesten, and A. Pretschner.
Enhancement of automotive penetration testing with
threat analyses results. SAE Intl. J. of Transportation
Cybersecurity and Privacy, 2018. To appear.

[26] J¨urgen D¨urrwang, Kristian Beckers, and Reiner Kri-
esten. A lightweight threat analysis approach inter-
twining safety and security for the automotive domain.
In Stefano Tonetta, Erwin Schoitsch, and Friedemann
Bitsch, editors, SAFECOMP, volume 10488 of LNCS,
pages 305–319. Springer, 2017.

[27] Michael Gelfond and Vladimir Lifschitz. Logic pro-
grams with classical negation. In ICLP, pages 579–597,
1990.

[28] Benjamin Glas, Carsten Gebauer, Jochen H¨anger, An-
dreas Heyl, J¨urgen Klarmann, Stefan Kriso, Priyam-
vadha Vembar, and Philipp W¨orz. Automotive safety
and security integration challenges. In Herbert Klenk,
Hubert B. Keller, Erhard Pl¨odereder, and Peter Dencker,
editors, Automotive - Safety & Security 2014 (2015),
Sicherheit und Zuverl¨assigkeit f¨ur automobile Informa-
tionstechnik, Tagung, 21.-22.04.2015, Stuttgart, Ger-
many, volume 240 of LNI, pages 13–28. GI, 2014.
[29] Edward Griffor, editor. Handbook of System Safety and

Security. 2016.

[30] Audun Jøsang. A logic for uncertain probabilities.
International Journal of Uncertainty, Fuzziness and
Knowledge-Based Systems, 2001.

[31] Barbara Kordy, Sjouke Mauw, Sasa Radomirovic, and
Patrick Schweitzer. Foundations of attack-defense trees.
pages 80–95, 2010.

[32] Nicola Leone, Gerald Pfeifer, Wolfgang Faber, Thomas
Eiter, Georg Gottlob, Simona Perri, and Francesco Scar-
cello. The DLV system for knowledge representation
and reasoning. ACM Trans. Comput. Logic, 7:499–562,
2006.

[33] Vladimir Lifschitz. Closed-world databases and cir-
cumscription. Artif. Intell., 27(2):229–235, 1985.
[34] John McCarthy and Patrick J. Hayes. Some philosoph-
ical problems from the standpoint of artiﬁcial intelli-
gence. In Machine Intelligence 4. 1969.

[35] Per H˚akon Meland, Elda Paja, Erlend Andreas Gjære,
St´ephane Paul, Fabiano Dalpiaz, and Paolo Giorgini.
Threat analysis in goal-oriented security requirements
modelling. Int. J. Secur. Softw. Eng., 5(2):1–19, 2014.
[36] Nicola Nostro, Andrea Bondavalli, and Nuno Silva.
Adding security concerns to safety critical certiﬁca-

Model-Based Safety and Security Engineering — 15/15

tion. In Symposium on Software Reliability Engineer-
ing Workshops, 2014.

[37] Thomas Novak, Albert Treytl, and Peter Palensky1.
Common approach to functional safety and system
security in building automation and control systems.
2007.

[38] Amir Pnueli. The temporal logic of programs. In FOCS,

pages 46–57, 1977.

[39] Christopher Preschern, Nermin Kajtazovic, and Chris-
tian Kreiner. Security analysis of safety patterns. PLoP
’13, pages 12:1–12:38, USA, 2013.

[40] Giedre Sabaliauskaite, Lin Shen Liew, and Jin Cui. Inte-
grating autonomous vehicle safety and security analysis
using STPA method and the six-step model. Interna-
tional Journal on Advances in Security, 11, 2018.
[41] B. Schneier. Attack trees: Modeling security threats.
Dr. Dobb’s Journal of Software Tools, 24:21–29, 1999.
[42] Adam Shostack. Threat Modeling: Designing for Se-

curity. Wiley.

[43] Mu Sun, Sibin Mohan, Lui Sha,

and Carl
Addressing safety and security con-
Gunter.
Avail-
in cyber-physical
tradictions
at http://citeseerx.ist.psu.edu/
able
viewdoc/summary?doi=10.1.1.296.3246.
[44] Kenji Taguchi, Daisuke Souma, and Hideaki Nishi-
hara. Safe & sec case patterns. In SAFECOMP 2015
Workshops, ASSURE, DECSoS, ISSE, ReSA4CI, and
SASSUR, 2015.

systems.

[45] Rui Wang, J´er´emie Guiochet, and Gilles Motet. Conﬁ-
dence assessment framework for safety arguments. In
SAFECOMP, 2017.

