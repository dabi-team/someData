©2018 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other uses, in any
current or future media, including reprinting/republishing this material for advertising or promotional purposes, creating new
collective works, for resale or redistribution to servers or lists, or reuse of any copyrighted component of this work in other
works.

The ﬁnal, published version of
is available under: S. Marksteiner, ”Smart Ticket Protection: An
Architecture for Cyber-Protecting Physical Tickets Using Digitally Signed Random Pattern Markers,” 2018 IEEE 20th
Conference on Business Informatics (CBI), Vienna, Austria, 2018, pp. 110-113. doi: 10.1109/CBI.2018.10055. URL:
https://ieeexplore.ieee.org/document/8453941/

this paper

8
1
0
2

p
e
S
3

]

R
C
.
s
c
[

1
v
9
6
4
0
0
.
9
0
8
1
:
v
i
X
r
a

 
 
 
 
 
 
Smart Ticket Protection: An Architecture for
Cyber-Protecting Physical Tickets Using Digitally
Signed Random Pattern Markers

(Workshop Paper)

Stefan Marksteiner
DIGITAL - Institute for Information
and Communication Technologies
JOANNEUM RESEARCH GmbH
Graz, Austria
Email: stefan.marksteiner@joanneum.at

Abstract—In order to counter forgeries of tickets for public
transport or mass events, a method to validate them, using
printed unique random pattern markers was developed. These
markers themselves are unforgeable by their physically random
distribution. To assure their authenticity, however, they have to
be cryptographically protected and equipped with an environ-
ment for successful validation, combining physical and cyber
security protection. This paper describes an architecture for
cryptographically protecting these markers, which are stored in
Aztec codes on physical tickets, in order to assure that only
an authorized printer can generate a valid Aztec code of such
a pattern, thus providing forge protection in combination with
the randomness and uniqueness of the pattern. Nevertheless,
the choice of the signature algorithm is heavily constrained by
the sizes of the pattern, ticket provider data, metadata and the
signature confronted by the data volume the code hold. Therefore,
this paper also deﬁnes an example for a signature layout for
the proposed architecture. This allows for a lightweight ticket
validation system that is both physically and cryptographically
secured to form a smart solution for mass access veriﬁcation for
both shorter to longer periods at relatively low cost.

Index Terms—IoT, Security, Cyber-physical systems, Pattern

markers, Cryptography

I. INTRODUCTION

Printed tickets are subject to forgery by (partially organized
[1], [2]) criminals, as they may achieve high revenues at black
market places [3] with a comparably low effort of producing
them. To mitigate this, the research project Securestamp1 has
developed a method of applying physically unique, infrared-
visible marker pigments on tickets, based on a project partner’s
patented work [4]. These pigments could be read and should
provide a means to assure the authenticity and integrity of said
tickets in conjunction with a digital checking component in
form of this marker pigment pattern transformed in an Aztec
code. In order to protect this Aztec code’s authenticity and
integrity, it has to be cryptographically protected. This paper

This work was partly supported by the Austrian Research Promotion
Agency (FFG) within the Austrian security research program KIRAS, grant
nb. 845491 (project Securestamp), of the Federal Ministry for Transport,
Innovation and Technology (BMVIT).

1http://www.kiras.at/gefoerderte-projekte/detail/d/securestamp/

outlines the composition of this cryptographic protection and
provides an architecture that applies the former in a setting
of printers and readers for ticket production and veriﬁcation,
allowing for the composition of physical and cryptographic
security to form a lightweight, smart solution for mass access
veriﬁcation. Based on reading tests with Aztec codes [5], the
latter provide space for 704 bytes for actual coding informa-
tion. Due to the size of the pigment pattern, 512 bytes are
reserved for its Aztec representation and additional 32 bytes
are reserved for provider data. This yields a remaining storage
capability of 160 bytes for encoding protective information
within the Aztec code. Therefore, this is the fundamental
working size for elaborating the cryptographic protection of
the code.

II. RELATED WORK

Although, in principle, the proposed architecture could be
used with any form of unique physical attribute that can be
encoded (into an arbitrary code), the underlying use case is
encoding and protecting the infrared-visible marker pigments
mentioned above into an Aztec code. Therefore, that marking
method [4] can be seen as foundation of the presented work.
Previously known work in this area does, in contrast to the
solution described in this paper, not give comprehensive advice
on cryptographically protecting physical
ticket features. It
either focuses on the hardness of forging the physical charac-
teristics combined with challenges for veriﬁcation [6] or does
not give any considerations on cryptographically protecting a
code from being copied [7]. Furthermore, previous approaches
do not deal with the possibility of stolen ticket printers or
veriﬁcation devices.

III. METHODOLOGY

From a system architectural perspective,

the process of
issuing and verifying tickets needs protection on three different
levels:

• At a physical level, the authenticity and integrity of the
marker pigments and Aztec codes have to be assured;

• At device level, secure key management has to take place;
• At network level, the key exchange has to be appropri-

ately secured.

A means for achieving security at physical level is using digital
signatures (see Section III-B). The key management needed
at device level induces the need for a common format storing
and exchanging cryptographic keys. This can be achieved
through the use of digital certiﬁcates (e.g. ITU-T X.509 [8]
or IETF RFC 5280 [9]) or a format based on the former.
Another possibility is exchanging public key lists, preferably
based on an internationally recognized speciﬁcation, e.g. the
format of the International Union of Railways (UIC)2, which
is based on the Extensible Markup Language (XML) [10].
Securing the key exchange at network level needs some kind
of Public Key Infrastructure (PKI). This can be achieved using
a Trusted Center (TC), where communications between printer
or reader and the TC have to occur using appropriately secure
protocols in a conﬁguration set that is also deemed secure
(for recommendations see [11]). This Trusted Center consists
of a secure server system under full control of the ticket
provider, securely located in a protected network inside of its
data center. This system identiﬁes itself to readers and printers
using an own digital certiﬁcate for communication (therefore
using separate communication keys), preinstalled and being
trusted a priori on the client devices. Subsequently (using a
secure protocol as mentioned above), readers can request a list
of currently valid code signing keys in an according format
(which consists, dependent on the chosen variant, of public
keys of the participating TC(s) and/or currently authorized
printers) from the TC. Through this operation, invalidated
keys (e.g. of reportedly stolen or compromised printers) are
removed from the trusted keys list and tickets issued by
invalidated printers (from the time invalidation onward) also
become invalid (see Section III-A). All tickets not featuring
a successfully veriﬁable signature are also regarded invalid.
Figure 1 shows an example for a possible system architecture.

A. The Problem of Backdating

The possibility of backdating tickets poses an aggravation
to the problem of forging tickets. In principle, tickets issued
by stolen printers can be trivially marked as invalid from the
reported time of theft onward. For long-term tickets, however,
the situation is more complicated. A rouge printer with a
legitimate but invalidated key may issue backdated (i.e. before
the point of invalidation) but still usable tickets (because of
a longer validity period - e.g. annual tickets), which, per se,
are indistinguishable from legitimate tickets issued before the
theft. This way, a rouge printer could issue illegitimate but
valid tickets. This can only be prevented if the TC (which
must not be stolen or compromised) performs the signature or
the security features (i.e. the signed marker pigment pattern)
contain a timestamp verifying also the issue time. This yields
two variants of ticket signing:

• The TC performs each signing operation;

2https://railpublickey.uic.org

• Printers issuing tickets report each operation to the TC.

Using the ﬁrst method, the printer sends the raw information
for the signature code (including the marker pigment pattern)
to the TC via a secure channel (in the sense mentioned above),
which subsequently signs the ticket with its own ticket signing
key. In scenario, only TCs are in possession of ticket singing
keys. Other keys, in possession of printers and readers, are
only dedicated to securing communications between those and
the TC(s).

The second method requires issuing printers to transmit
the data forming the Aztec code, at least its printer ID, the
ticket ID, the marker pigment pattern, a timestamp and the
issued ticket’s validity period to the TC. If, in this scenario,
a printer is stolen (and is therefore able to issue arbitrary
illegitimate but valid tickets) its ticket singing key will be
rendered invalid by the TC as soon as the theft is discovered,
generally invalidating all its issued tickets. At the same time,
the TC will cease to accept transactions of the printer in
question (for certiﬁcate-based communications this technically
means that the TC will discontinue to accept this printer’s
communications certiﬁcate). In order to render legit tickets,
actually issued before the theft, still valid, ticket-validating
reader devices will be able to request a list of legitimate
transactions from the TC over the secure channel. This can
happen in its entirety or, to save memory, only in parts - e.g.
IDs, timestamps and parts or hashes of the respective marker
patterns (leaving a certain residual risk of false positives).
For these known transactions, the key of the stolen issuing
device will be exceptionally accepted, allowing for legitimate
tickets to retain their validity. This, however, requires all reader
devices to be capable of storing all of these transactions for
the remainder of their ticket’s validity time. In return, no per-
manent online connection for the reader devices is necessary,
for the list of transactions can be transferred periodically (e.g.
daily). Transactions not reported before the theft, however,
invalid and will have to be reissued, which is a
are still
neglectable issue if the printer devices possess permanent
online connection.

B. Recommended Signature Schemes

Marker pigment patterns and ticket data contain information
that has, while having no particular need for secrecy, to be
unforgeable, meaning their authenticity and integrity has to
be intact. The latter two fundamental requirements to the
cryptographic protection of the stored code can be met by
digital signatures [12].

Digital signatures, like cryptographic functions in general,
leave the choice between symmetric and asymmetric algo-
rithms. Former have the disadvantage that they either:

• require a distinct key for each relation between signer
(TC or printer) and validator (reader), requiring O(n2)
keys or

• require changing all signer keys (i.e. re-installing new
ones on all validator devices) in the event of the theft of
a single validator, as all signer keys have to be known

Fig. 1. Example architecture layout

to all validators and are therefore exposed in the above
event.

Asymmetric schemes do not have these disadvantages, because
the respective public key is actually intended to be known.
This means that the theft of a validator does not compromise
any signer key. Therefore, the marker pigment patterns and
the necessary additional information can be coded directly
into the 2D code and be protected by a digital signature,
as this information does not need secrecy but very well
needs authenticity and integrity. For this reason, asymmetric
methods are preferable for this use case. The speciﬁcations
in [13] provide standardized schemes, of which the ﬁrst, the
Digital Signature Standard (DSS) provides three possibilities
of generating digital signatures:

• The Rivest-Shamir-Adleman (RSA) algorithm;
• The Digital Signature Algorithm (DSA);
• The Elliptic Curve Digital Signature Algorithm (ECDSA).
ISO 14888-3 [14] deﬁnes twelve standards, partly overlapping
with the DSS or variants of DSA or ECDSA. Not variants of
these are:

• Variants of the (EC)Schnorr (as (EC-)(F)SDSA) algo-

rithm;

• The Pointcheval and Vaudeney (PV) scheme.
Of the above, the RSA algorithm is ruled out, as secure key
lengths for future applications using this algorithm have to be
more than 4096 bits [15] and the ciphered code length is equal
or longer than the key length (in fact, with a maximum of 132
bytes of space, anything above RSA-1024 does not ﬁt into the
signature space). The private key-enciphered hash value of the
digital signature would therefore yield a minimum length of
512 bytes, which exceeds the provided space. The DSA on
the other hand, is recommended for legacy applications only
by the European Union Agency for Network and Information
Security (ENISA) and is, therefore, also not suitable [15]. Apart
from the exclusion of RSA and DSA algorithms, the relatively

short key length suggests Elliptic Curve Cryptography (ECC)
algorithms for the present use case. Digital signature genera-
tion and veriﬁcation with ECDSA using key lengths >=224
bits provides an acceptable level of security [16]. This also
rules out PV scheme, as it is, despite being easily adaptable
to ECC, only standardized for ﬁnite ﬁelds and also suffers
from poor key randomness [15]. In any case, the hashing
algorithm used in the signature should at least be the Secure
Hash Algorithm 2 (SHA-2) with an output length >=224 bits
[15]. The ECC algorithm combinations fulﬁlling this criterion
also fulﬁl the length requirements mentioned above. Despite of
this, the ENISA recommends only the algorithms (EC)Schnorr
and (EC)KDSA (Korean DSA) for future applications of the
ECDSA. The reason is the weak formal security proof of
other ECDSA algorithms. (EC)KDSA, however, cannot be
used, for it lacks of a reference implementation. Schnorr’s
algorithm [17] was patented, but this patent has expired and
also an optimized version of the algorithm (EC-SDSA-opt) has
become part of an ISO standard [14]. Therefore, it is preferable
for its security proof and also for it can achieve shorter
signature sizes than the DSA [15]. Furthermore, due to its
simplicity, it allows for optimizations and it also implements
randomized hashing [18]. Although this algorithm was not
well proliferated so far, it got worldwide attention by Bitcoin’s
announcement to replacing the ECDSA with Schnorr as its
digital signature algorithm in 2017 [19]. Apart from the
above, all cryptographic functions require a cryptographically
secure random number generator (for ECDSA, for example,
according to the recommendations from the German Bunde-
samt f¨ur Sicherheit in der Informationstechnik (BSI) [20] or
the American National Standards Institute’s (ANSI) standard
X9.62 [21]).

C. Resulting Signature

The resulting Aztec code should, apart from the marker
least

pigment pattern and the digital signature, contain at

Trusted Areacryptographic verification mechanismTrusted CenterTicket PrinterTicket ReaderIssues keysTicket and Random Patternprintssigns with digital signature**verifies digital signaturetrusts publishes trusted signature listand transaction list**optical verification mechanismsigns with digital signature*reports transaction*** Variant a only (Section 2.1)** Variant b only (Section 2.1)[9] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W. Polk,
“Internet X. 509 Public Key Infrastructure Certiﬁcate and CRL Proﬁle,”
Internet Requests for Comments, Internet Engineering Task Force, RFC
5280, 2008.

[10] T. Bray, J. Paoli, C. M. Sperberg-McQueen, E. Maler, and F. Yergeau,
“Extensible markup language (xml) 1.0 (ﬁfth edition),” World Wide Web
Consortium, W3C Recommendation 26 November 2008 26 November
2008, 2008.

[11] S. Marksteiner and H. Vallant, “Towards a secure smart grid storage
the 2017 Smart City
communications gateway,” in Proceedings of
Symposium Prague (SCSP). New York, NY, USA: IEEE, May 2017,
pp. 1–6.

[12] E. Barker, “Recommendation for Key Management Part 1: General
(Revision 4),” NIST Special Publication, National Institute of Standards
and Technology, SP 800-57, 2016, retrieved at February 16, 2018.
[Online]. Available: http://nvlpubs.nist.gov/nistpubs/SpecialPublications/
NIST.SP.800-57pt1r4.pdf

[13] National Institute of Standards and Technology, “Digital Signature
Standard (DSS),” Federal Information Processing Standards, National
Institute of Standards and Technology, FIPS Publication ”186-4”, 2013.
[14] International Organization for Standardization, “Information technology
- Security techniques - Digital signatures with appendix,” Interna-
tional Standard, International Organization for Standardization, ISO/IEC
”14888:2016”, 2016.

[15] N. P. Smart, V. Rijmen, B. Gierlichs, K. Paterson, M. Stam, B. Warin-
schi, and G. Watson, “Algorithms, key sizes and parameters report -
2014,” European Union Agency for Network and Information Security,
Tech. Rep. TP-05-14-084-EN-N, 2014.

[16] E. Barker and A. Roginsky, “Transitions: Recommendation for
Transitioning the Use of Cryptographic Algorithms and Key Lengths
(Revision 1),” NIST Special Publication, National Institute of Standards
and Technology, SP 800-131A, 2015, retrieved at February 21, 2017.
[Online]. Available: http://nvlpubs.nist.gov/nistpubs/SpecialPublications/
NIST.SP.800-131Ar1.pdf

[17] C. P. Schnorr, “Efﬁcient identiﬁcation and signatures for smart cards,”
in Advances in Cryptology — CRYPTO’ 89 Proceedings, G. Brassard,
Ed. New York, NY: Springer New York, 1990, pp. 239–252.

[18] European Telecommunications Standards Institute, “Electronic Signa-
tures and Infrastructures (ESI); Cryptographic Suites,” Technical Spec-
iﬁcation, European Telecommunications Standards Institute, ETSI ”TS
119 312”, 2017.

[19] Bitcoin Core, “Technology roadmap - Schnorr signatures and signature
aggregation,” 2017, [Online; retrieved 02-16-2018]. [Online]. Available:
https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/
[20] Wolfgang Meyer zu Bergsten and Ren´e Korthaus, “Quellcode-basierte
Untersuchung von kryptographisch relevanten Aspekten der OpenSSL-
Bibliothek,” Studie im Auftrag des Bundesamtes fr Sicherheit in der
Informationstechnik, Bundesamt fr Sicherheit in der Informationstech-
nik, Projekt 154 ”Arbeitspaket 2: Random Number Generator”, 2015.

[21] American National Standards Institute, “Public Key Cryptography for
the Financial Services Industry: The elliptic curve digital signature
algorithm (ECDSA),” National Standard, American National Standards
Institute, ANSI ”X9.62”, 2005.

an identiﬁcation number (ID) for each the issuing printer,
the TC, the ticket provider and the ticket itself, as well as
the ticket’s validity time (period or date-of-expiry) and an
issue timestamp (Figure 2 shows an exemplary code layout).
Information already contained in the provider data (32B) may
be omitted. For better interoperability, the code may hold
information about cryptographic parameters (e.g. used elliptic
curve, hash algorithm, etc.). The digital signature must protect
all code components (except the signature itself).

Fig. 2. Example code layout.

IV. CONCLUSION AND OUTLOOK
This work demonstrated that Elliptic Curve Cryptography
(ECC) provides a means to securely embed a physically unique
marker pigment pattern into Aztec codes. It further outlined
an architecture that allows for successful (part-ofﬂine) issu-
ing and cryptographic veriﬁcation of tickets and, especially,
to overcome the problem of distinguishing legitimate from
illegitimate long-term tickets, validly issued by legit, but stolen
or corrupted printers using transaction tracking or digital
signing in a Trusted Center (TC). Future work will include
implementing and testing the presented solution and further
developing the latter to forge a market-ready product.

ACKNOWLEDGMENT
The author wants to thank his fellow colleague Martin

Winter for his support in this work.

REFERENCES

[1] J. Ayling and R. Broadhurst, “The suppression of organized crime:
New approaches and problems,” in Policing and Security in Practice.
Springer, 2012, pp. 37–55.

[2] S. Schneider, Canadian Organized Crime. Toronto, Ontario: Canadian

Scholars, 2017.

[3] L. Tuffanelli, “Super bowl the latest front in ticketing war,” Ent. &

Sports Law., vol. 31, p. 10, 2014.

[4] E. Ulrich, “Einrichtung zum verarbeiten einer darstellung eines sicher-
heitsdruckes auf einem informationstr¨ager,” Jan. 15 2014, european
Patent No. EP2001688, Filed Apr. 3rd, 2007, Issued Jan. 15th, 2014.

[5] International Organization for Standardization, “Information technology
- Automatic identiﬁcation and data capture techniques - Aztec Code
bar code symbology speciﬁcation,” International Standard, International
Organization for Standardization, ISO/IEC ”24778”, 2008.

[6] W. Clarkson, T. Weyrich, A. Finkelstein, N. Heninger, J. A. Halder-
man, and E. W. Felten, “Fingerprinting blank paper using commodity
scanners,” in 2009 30th IEEE Symposium on Security and Privacy, May
2009, pp. 301–314.

[7] L. Finˇzgar and M. Trebar, “Use of nfc and qr code identiﬁcation in
an electronic ticket system for public transport,” in SoftCOM 2011,
19th International Conference on Software, Telecommunications and
Computer Networks, Sept 2011, pp. 1–6.

[8] ITU Telecommunication Standardization Sector, “Information technol-
ogy - Open Systems Interconnection - The Directory: Public-key and at-
tribute certiﬁcate frameworks,” International Telecommunication Union,
Technical Speciﬁcation X.509, 2012.

