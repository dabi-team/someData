4
1
0
2

p
e
S
0
3

]

R
C
.
s
c
[

1
v
6
8
4
8
.
9
0
4
1
:
v
i
X
r
a

LEVERAGING DECENTRALIZATION TO EXTEND THE
DIGITAL EVIDENCE ACQUISITION WINDOW:
CASE STUDY ON BITTORRENT SYNC

Mark Scanlon

Jason Farina
School of Computer Science & Informatics,
University College Dublin,
Belﬁeld, Dublin 4, Ireland.
{mark.scanlon,an.lekhac,tahar.kechadi}@ucd.ie, jason.farina@ucdconnect.ie

Nhien An Le Khac

Tahar Kechadi

ABSTRACT

File synchronization services such as Dropbox, Google Drive, Microsoft OneDrive, Apple iCloud, etc.,
are becoming increasingly popular in today’s always-connected world. A popular alternative to the
aforementioned services is BitTorrent Sync. This is a decentralized/cloudless ﬁle synchronization
service and is gaining signiﬁcant popularity among Internet users with privacy concerns over where
their data is stored and who has the ability to access it. The focus of this paper is the remote recovery
of digital evidence pertaining to ﬁles identiﬁed as being accessed or stored on a suspect’s computer
or mobile device. A methodology for the identiﬁcation, investigation, recovery and veriﬁcation of
such remote digital evidence is outlined. Finally, a proof-of-concept remote evidence recovery from
BitTorrent Sync shared folder highlighting a number of potential scenarios for the recovery and
veriﬁcation of such evidence.

Keywords: Digital Evidence, Remote Evidence Recovery, BitTorrent Sync, Mobile Device Forensics

1.

INTRODUCTION

Cloud-based ﬁle synchronization services have
become very popular in recent years oﬀering a re-
mote backup of data paired with the automation
of data across multiple devices. As an indica-
tion of the growing popularity of these tools: the
largest of these providers, Dropbox, announced
serving over 275 million users in April 2014, up
from 200 million users in November 2013 Drop-
box Inc. [2014]. Highlighted by the recent pri-
vacy concerns raised by the revelation of the ex-
tent and reach of the National Security Agency
(NSA) in the United States and their global In-
ternet monitoring system, PRISM, many corpo-
rate and home Internet users have recently taken
a keen interest in the active protection of their
privacy and of their data. Duranti et al. [2013]
conducted a cloud security survey with corporate
information storage inﬂuencers (such as Records
Managers, Information Oﬃcers, Archivists, etc.).

The authors found found that 56% of the 323 re-
spondents were against cloud storage adoption
due to the potential security risk, and 40% of
respondents had concerns over the privacy risks.

BitTorrent Sync (BTSync) was launched as an
open alpha release in April 2013 to provide users
with a private, secure, decentralized ﬁle synchro-
nization tool capable of providing similar func-
tionality to its cloud-based alternatives. The
most recent usage ﬁgures released by BitTorrent
Inc. are from December 2013 claiming over two
million active users – doubling from the previ-
ous month. From a privacy standpoint, decen-
tralized ﬁle synchronization solutions are more
desirable to their cloud-based counterparts as
the only method available for any unauthorized
user/body to access any private data would re-
quire law enforcement to seek a warrant to phys-
ically investigate the user’s devices (in most ju-
risdictions). Whether collecting evidence from a

1

 
 
 
 
 
 
cloud-based or cloudless solution, recovery and
veriﬁcation of remotely gathered digital evidence
poses a diﬃcult task to digital investigators in
terms of technical best practice and legal respon-
sibilities.

The need for a solution to this remote dig-
ital evidence retrieval problem is compounded
further by the prevalence of smartphones and
tablets in today’s world. These devices typi-
cally have much smaller local storage capacities
when compared with their desktop/laptop coun-
terparts. As a result, the need for consumer tech-
nology users to have synchronized cloud/remote
data storage is ever increasing.

When conﬁguring a newly purchased mobile
device based on Android, iOS or Windows oper-
ating systems, it is encouraged to enable cloud
synchronization options for the user’s mobile de-
vice information, such as contacts, emails, cal-
endar events, photos, documents, etc. Accessing
data stored on cloud-based storage services is a
seamless process to the user for any mobile device
with a data connection.

When remotely stored information is accessed
on a mobile device, the data is downloaded to a
local temporary cache while the user is viewing
it and generally is deleted when the user closes
the mobile application or restarts the device.
This common feature of mobile applications
presents a diﬃcult task for the digital forensic
investigator to identify, access and analyse this
potentially rich digital evidence source stored
remotely in the cloud and/or on synchronized
remote devices.

1.1 Contribution of this Work

While some work has been conducted on the re-
covery of evidence from ﬁle synchronization ser-
vices, it mainly focuses on the gathering of ﬁles
and logs stored on the local machine’s hard drive.
Recovering evidence from cloud-based solutions
is generally conducted through a browser inter-
face or client application synchronization, requir-
ing the authentication details for the service. At
the time of writing, the authors were unable to
identify any publications focused on an “after the
fact” recovery of locally compromised or unrecov-

erable evidence from a decentralized ﬁle synchro-
nization service. The contribution of this work
can be summarized as follows:

• This paper presents a methodology for the
forensically sound remote recovery and ver-
iﬁcation of digital evidence from decen-
tralized ﬁle synchronization services. This
can enable forensic investigators to over-
come a number of counter-forensic tech-
niques potentially employed by cybercrim-
inals to cover their tracks.

• A proof-of-concept implementation of the
methodology is described for BTSync, out-
lining the entry points to the investigation,
the network speciﬁc knowledge required for
the remote recovery of digital evidence and
methods available to the digital investigator
for the veriﬁcation of any remotely collected
evidence.

2. RELATED WORK

The following subsections outline work related
to that presented in this paper in the areas of
remote evidence acquisition, cloud-based ﬁle
synchronization forensics, mobile application
forensics and the court admissibility of remotely
gathered evidence.
An introduction to the
BTSync application and its behavior is also
included.

2.1 Remote Evidence Recovery

A client
remotely
server based system for
gathering forensically sound disk images over
the Internet is outlined in an article by Scanlon
and Kechadi [2010]. This system was based on
a live forensics scenario whereby the suspect
machine is booted using a Linux based live CD
or USB key in order to take a veriﬁable, remote
clone of any storage device on the machine.
The evidence gathering and veriﬁcation process
utilized frequent SHA512 hashing of “chunks”
of the remote hard drive in combination with a
hash of the remote volume in its entirety. The
authors found that the division of large evidence
its transmission over an encrypted
examples,

2

Internet connection to a server in a forensic
laboratory and the subsequent recombination
process did not interfere with the resultant
hash values when compared against those of the
original volume.

2.2 Cloud-based File Synchronization

Forensics

The task of performing evidence acquisition from
cloud-based ﬁle synchronization systems is the
most analogous to the work presented as part
of this paper, despite using a centralized server.
Chung et al.
[2012] proposed a novel process
model for the investigation of cloud storage ser-
vices outlining best practices for forensic inves-
tigators. Research conducted into the evidence
recovery from cloud-based ﬁle synchronization
tools splits into two evidence gathering tactics:
local cloud evidence acquisition and remote cloud
evidence acquisition.

Local cloud evidence recovery focuses on re-
covering cloud storage remnants through hard
drive analysis. In a volume of work conducted by
Quick [2012], the local remnants of deleted ﬁles
is analyzed across Dropbox, Google Drive and
SkyDrive (now OneDrive). The metadata that
remained was suﬃcient to prove that a cloud-
based ﬁle was present on the local drive after
deletion. The authors also proved that the act
of downloading the data from the remote loca-
tion using a browser or synchronizing using the
client application does not change the hash of
the ﬁle or any associated cloud metadata [Quick
and Choo, 2013]. The only metadata that was
diﬀerent on the local machine when compared
to its cloud stored counterpart was the ﬁle cre-
ation/modiﬁcation dates.

Accessing remote digital evidence stored on the
servers of these cloud ﬁle synchronization service
providers is an arduous task for digital forensic
investigators. In 2014, Federici described a tool
built for the collection of evidence from the cloud
called Cloud Data Imager (CDI) built as an ex-
tension to the work conducted on local cloud re-
lated remnants by Federici [2014]. CDI facilitates
the read-only access to remote evidence stored
on Dropbox, Google Drive and SkyDrive. This

tool relies on the recovery of the cloud service’s
username and password or an access token string
from the local machine for remote authentica-
tion.

2.3 Recovering Evidence from Mobile

Applications

There are three kinds of mobile device forensic
acquisition: logical, physical and mechanical dis-
assembly of the device. For the purposes of this
paper, ﬁrst two types are of interest. Physical
acquisition is used to directly clone all data from
the mobile device’s storage. It normally requires
on “jailbreaking” or “rooting” the mobile device
and using SSH communication to access the de-
vice’s storage [Zdziarski, 2008]. Logical acquisi-
tion requires the availability of system backups
of the relevant device stored the suspect’s com-
puter. The drawback for this method is that it
cannot extract deleted data or accessing the sys-
tem partition as these backups generally restricts
evidence collection to the device’s user data par-
tition [Hoog and Strzempka, 2011]. With regards
to iOS, unallocated space has been largely inac-
cessible since iOS 4.0. This is due to the encryp-
tion approach used by Apple to prevent deleted
ﬁles from being recovered. A new encryption key
is created for each ﬁle living on the ﬁle system
and when the ﬁle is deleted, that key is removed
resulting in an unrecoverable ﬁle.

Grispos et al.

[2013] conducted a com-
prehensive analysis of Dropbox’s, Box’s and
SugarSync’s mobile cloud synchronization ap-
plications for Android and iOS focusing on
the recoverability of cloud synchronized data.
The authors discovered that any ﬁles explicitly
marked for oﬄine access were recoverable from
both mobile operating systems (even if the ﬁle
was deleted from the cloud service). However,
ﬁles that were merely viewed/accessed on the
mobile devices were generally not recoverable,
although some associated metadata remained.

2.4 Court Admissibility of Remotely

Gathered Evidence

As with any digital forensic evidence, the court
the gathered information is
admissibility of

3

Figure 1: Example Data Flow Highlighting the Diﬀerence Between Cloud-based (Left) and Decen-
tralized (Right) Synchronization

largely reliant on the experience of the expert
witness and comprehensive documentation of the
process.
In many nations, the law lags behind
in formally recognizing the development of new
forensic processes. Kenneally [2005] published a
paper outlining the legal concerns in the United
States surrounding the live acquisition of remote
digital evidence. Kenneally surmises that the ad-
missibility of any digital evidence is reliant on
the integrity of the individual forensic practi-
tioner and that the acceptance of any new evi-
dence acquisition methodology requires endorse-
ment from law enforcement, forensic investiga-
tors and authoritative bodies. Baring this sta-
tus quo in mind, any evidence gathered using
the methodology outlined in the following section
should be reliable and reproducible provided suf-
ﬁcient documentation of the process used accom-
panies any evidence presented in a courtroom.
This view is echoed in many other forensic pub-
lications, such as the view of Federici who states
that a digital investigator is not bound to a spe-
ciﬁc set of tool or approaches, so long as he can
justify his actions [Federici, 2014].
In order to
investigate a suspect’s mobile device, generally
a warrant is required. In a corporate investiga-
tion, a warrant is not needed to investigate any
equipment owned by the company. However, it is
illegal to seize or to investigate a personal mobile
phone without the consent of the owner of the
device [Zdziarski, 2008].

2.5 BitTorrent Sync

BTSync shared folders rely on secrets to synchro-
nize data between peers. Secrets are the unique
identiﬁers used by BTSync to diﬀerentiate be-
tween all shared folders across the network. In
order for the 33-byte secrets to be human read-
able, they are displayed to the user using Base32
encoding. BTSync facilitates the generation of
three categories of secrets for the synchronizing
of data contained within speciﬁc folders - mas-
ter secret (read/write), read-only secret and an
encrypted secret. Any client application that is
supplied this secret will synchronize all ﬁles with
any remote machines with the same secret.

BTSync, as a decentralized solution diﬀers to
the cloud based services outlined above (as can be
seen in Figure 1), while oﬀering much of the same
synchronization functionality to the end user.
The key diﬀerence is that any data transfer using
BTSync can only occur if at least one synchro-
nized device is online. This makes the recovery
of the data quite diﬀerent from a digital foren-
sic perspective due to there being no centralized
ﬁle system, redundant data block algorithms or
requirement of cooperation from a cloud storage
provider to perform the investigation. Due to the
fact that BTSync uses a distributed hash table
(DHT) to disseminate peer information, there is
also no central authority to manage authentica-
tion or log data access/modiﬁcation attempts. A
suspect ﬁle identiﬁed on a system may have been
downloaded from one or many sources and may

4

have been subsequently uploaded to one or many
recipients.

The pertinent metadata required for the re-

mote recovery of data are [Farina et al., 2014]:

33-byte Secret – This is the unique identi-
ﬁer of any given shared folder on the BTSync
network.
It consists of a single byte indicating
the access level followed by a 32-byte application
generated salted hash of the folder.
<ShareID>.db – This ﬁle

is a SQLite3
database. The database describes the contents
of the shared directory corresponding to the
ShareID. It contains two tables; files and meta.
The ﬁles table contains ﬁlenames, paths, ﬁle sizes
and SHA1 hash values for each individual ﬁle.
The meta table contains information pertaining
to the ﬁle (ﬁlename, ﬁle size, SHA1 hash) and
data relating to each of the pieces the ﬁle is split
up into for synchronization purposes (number of
pieces, size of each piece, piece SHA1 hash value
and a SHA1 hash value of all concatenated piece
hash values). Sample bencoded data contained
in the <ShareID>.db ﬁle is similar to that out-
lined in Figure 2. Note bespoke ﬁle information
is included in angle brackets, “#” represents the
variable length of the associated value).

In 2014, Scanlon et. al published a network
investigation methodology for BTSync Scanlon
et al. [2014]. The paper performs an analysis of
the network traﬃc that is generated during reg-
ular BTSync operation. The detailed description
of LAN multi-cast, tracker, relay server, known
host and ﬁle synchronization communication are
outlined. Several scenarios for the potential ma-
licious use of the network are described including
industrial espionage, cloudless backup of illicit
ﬁles, encrypted remote P2P backup, dead drop,
server-less website
secure messaging, piracy,
hosting and malicious
software distribution.
Any of these scenarios could make the remote
recovery of digital evidence from the network
relevant for investigation.

3. REMOTE EVIDENCE
ACQUISITION METHODOLOGY

The principle diﬀerence between evidence acqui-
sition from a centralized (generally cloud-based)

Figure 2: Bencoded File Information

system and a decentralized (cloudless/serverless)
system is the reliance on the nodes themselves
to maintain and update the synchronized data.
Example scenarios where the acquisition of the
remote synchronized evidence may be necessary
to the investigation include:

• Deleted local data (unrecoverable) – If
the locally stored copy of the data has been
securely deleted or corrupted, then the only
available forensically sound source to recover
that data may be from the remotely synchro-
nized machines.

• Identiﬁcation of

remote machines
after local uninstall – The complete
uninstallation of the application may be
employed as a counter-forensic technique
in order to obfuscate the participation in
any remote replication. Using recovered
remnants of the installation can lead to the
identiﬁcation of remote IP addresses.

5

Figure 3: Steps Involved in Remote Evidence Acquisition

• Identiﬁcation of

remote machines
sharing the same ﬁle – Calculation of the
SHA1 hash of any incriminating evidence
could aid in the identiﬁcation of remote IP
address sharing the same ﬁle.

• Data modiﬁed oﬄine – If synchronized
data has been modiﬁed on the local machine
while oﬄine and the changes made are per-
tinent to the investigation, remote synchro-
nization can aid in identifying what changes
were made.

• Evidence accessed on a mobile device
– In this scenario, the entry point to the in-
vestigation may be evidence gathered of a
suspect viewing or accessing the data on a
mobile device. This data may only ever be
stored on the mobile device in a temporary
cache.

The remote acquisition of evidence identiﬁed
to have been accessed (or previously stored) on
the local machine involves a ﬁve step process,
as can be seen in Figure 3. Each of these
steps is outlined in greater detail the following
subsections.

3.1 Discovery – Identifying Entry

Points

Before an investigation can begin the investi-
gator must identify what possible entry points
exist for that particular protocol. These entry
points will identify resources that can be used
to create an accurate proﬁle of the data being
replicated to or from the suspect device.
In a
cloudless replication system there may not be a

6

single online accessible repository of the entire
dataset. The investigator must therefore not
only identify what data was potentially present
on the suspect system but also what data was
removed and whether it was replicated from or
to another system that is still accessible. For
this reason the investigator may be required
to retrieve data from a variety of sources such
as network traﬃc, RAM analysis, local system
analysis (hard drive forensics), mobile device
forensics performed on any network capable
device that the suspect user may have access
to. Often more than a single resource will be
required to build a complete enough picture to
enable accurate retrieval. The most common
entry points to an investigation are described in
more detail below.

3.1.1 Network Traﬃc Analysis

Network traﬃc analysis requires the investigator
to examine the logs and raw data of the com-
munication between replicating peers in an ef-
fort to determine what data was shared and in
which direction the data was replicated. Most
often an investigator will initially just have log
ﬁles to work from that provide high level details
of the network traﬃc. The investigator should
therefore be familiar with the traﬃc signature of
In the case of
the protocol being investigated.
an on-going investigation where a traﬃc source
is suspected, the investigator may have access to
network capture ﬁles which will provide a much
clearer and in depth image of the nature of the
communication. Again, the investigator should
be familiar with the traﬃc signatures in order to
correctly conﬁgure a capture or display ﬁlter to
make analysis faster and clearer. This will also
reduce the risk of inadvertently infringing on the
privacy of any non-suspect users.

3.1.2 File System Analysis

– A second entry point results from the analysis
of the suspect workstation. In this scenario, the
investigator has become aware that this system
is participating in a ﬁle synchronization network.
Once the investigator knows of the presence of
a ﬁle replication network in use from a suspect
system, the decision can be made whether to per-
form a live forensic investigation or whether to
image the system and perform postmortem anal-
ysis. Depending on the type of system involved
the investigator will need to be familiar with
the behavior of the protocol to best determine
the advantages and disadvantages of each option.

3.1.3 Memory Analysis

– Memory analysis
is another entry point
available to the investigator and can prove vital
if the replication protocol allows any form of
encryption or ﬁle security.
In order to process
the ﬁles any application will usually load po-
tentially required security keys and secrets into
the process address space in RAM for quick
access and temporary storage. Once the system
is powered oﬀ or over a period of activity any
data stored in RAM will be lost or overwritten
(such as traces of connections to remote ports
or application communications received). If the
application is still installed and running however,
there will still be a base level of information
stored in RAM that may provide evidence or at
least may verify or help explain items of interest
found on other entry points.

3.1.4 Mobile Device Analysis

– When a mobile device is mounted as a ﬁle
system,
its raw partition looks like one large
ﬁle that contains both live and deleted data.
Data-carving tools such as Scalpel1, Ontrack
EasyRecovery2, etc., can scan the disk image for
deleted ﬁles. The investigation should focus on
the recovery of ﬁles relating to the application,
e.g., log ﬁles, metadata ﬁles, synchronized ﬁles

1https://github.com/sleuthkit/scalpel
2http://www.krollontrack.com/data-

recovery/recovery-software/

from the temporary cache, etc. These ﬁles
should provide an entry point into the shared
information or aid in the veriﬁcation of entry
point information gathered from other sources.

3.2

Investigation – Uncovering Local
Metadata

Once the entry points have been identiﬁed the in-
vestigator must assess the priority of their analy-
sis. In general, this priority will follow the same
order as that laid out in the Association of Chief
Police Oﬃcers [2011] (ACPO) guidelines taking
volatility into account. The investigator must
also identify where one source of data can be
used to verify the conclusions drawn from an-
other data source. For example, network traﬃc
captured from live traﬃc or gathered from net-
work logs may be cross referenced with network
data extracted from a RAM dump taken from the
suspect system. After the available entry points
have been discovered, the investigator must de-
termine the reliability of the evidence source with
respect to age and potential tampering. A set
of relevant data evidence must then be gener-
ated and proﬁled in order to create a subset that
contains data that has been changed, deleted or
otherwise tampered with. In general this process
will take the form of identifying data that:

• Reveals what evidence exists such as a share
or ﬁle manifest, a directory listing or some
log of data shared

• Reveals what evidence has been altered or
destroyed and when this occurred. Most
replication systems use timestamps to record
alteration times so the required replication
direction can be determined to ensure later
changes are not overwritten by older.

• Describes if and where a viable copy of the
evidence can be retrieved. The investiga-
tor must be aware of any versioning facility
available within the protocol and how the
protocol handles local changes to replicated
data.

• Allows access to the remote copy of the
evidence. This could be in the form of

7

Filename
badﬁleone.txt
badﬁletwo.txt
badﬁlethree.txt

Filesize SHA1
19B
124B
152B

58B47FB1467AEB0BEFE6FE1BD6255A5C24B552A0
B47C7586BC82B27A8441A8E4C07F77874CC67557
3598492B4D1CE5FAFD9EF76E8FA54C8F55E0716A

Table 1: Files Included in Source Share

certiﬁcates, passwords or phrases or even
just some combination of system ﬁles that
are checked by the application to determine
system level access rather than user or
account level permissions.

3.3 Enumeration –

Identifying Remote Data Stores

Based on the entry point information collected,
a peer discovery survey must be carried out
to determine the totality of the participants in
the network or share. Each potential remote
synchronization node must be identiﬁed and
queried to determine if recovery is possible
from that source.
Ideally, a source of remote
evidence that has directly synchronized with
the suspect’s device would be identiﬁed for
maintaining provenance.

3.4 Recovery –

Downloading of Remote Evidence

With the remote peers identiﬁed and priori-
tized the investigator should now determine
what required version of the data is present
Any retrieval performed by
and available.
the investigator should be carried out through
programmatically ethical means without unduly
alerting the remote host and in a forensically
sound manner. This step is best performed
either through the software used for replication
originally or through a bespoke version of client
software that uses the underlying protocol to
retrieve the data in the same manner as it was
initially gathered.

3.5 Veriﬁcation –

Ensuring Forensic Integrity

Due to the sensitive nature of digital evidence
collection, it is imperative that the data collected
by any forensic tool is completely veriﬁable and
identical to the original source. In order for any
remotely gathered evidence captured using this
methodology to be court admissible, it must be
proven to be true to the original data that was
stored/accessed on the suspect device. Each
of the aforementioned synchronization services
rely on frequent hashing of each ﬁle to ensure
data integrity and to detect any local changes
to be updated to other synced devices. Gaining
access to these hashes or remnants thereof can
quickly facilitate the veriﬁcation of any remotely
gathered evidence.

4. PROOF-OF-CONCEPT EXAMPLE

To conﬁrm our methodology, we conducted a
proof-of-concept investigation on the remote
recovery and veriﬁcation of evidence from a
BTSync share. We selected BTSync due to its
mostly decentralized nature. BTSync is based
upon BitTorrent, a popular ﬁle transfer proto-
col, which has made signiﬁcant strides towards
complete decentralization in recent years. The
BTSync application allows the user to conﬁgure
most aspects of the ﬁle synchronization process
and the peer discovery process.

4.1 Setup

1. A source machine ComputerA was set up
with a BTSync shared folder containing the
ﬁles outlined in Table 1.

2. The ﬁle badfileone.txt was then deleted
before any remote synchronization was al-
lowed to take place.

8

Figure 4: Metadata Available from Each Entry Point

3. A second machine ComputerB had the BT-
Sync read-only secret added to the appli-
cation and synchronization was allowed to
complete.

4. The ﬁle badfilethree.txt was

subse-
quently securely deleted from ComputerB to
simulate the anti-forensic destruction of ev-
idence.

4.2 Entry Points

The entry points possible for a BTSync investi-
gation are:

1. Extracting metadata from a local memory
snapshot taken while the application is run-
ning.

2. Analyzing BTSync network traﬃc.

3. Local ﬁle system forensics.

BTSync application was conducted with Oxygen
Forensic Suite 2014 (as the iOS version used
was iOS 7.1.1). The pertinent BTSync ﬁles in
the application’s folder structure are all stored
in a BitTorrent Sync subfolder. This folder
contains ﬁles such as settings.dat, sync.log,
sync.pid, sync.dat, etc. The synchronized
data ﬁles are stored in the Storage subfolder
where the .SyncID, .SyncIgnore can also be
found. Assuming the investigator’s objective is
to recover deleted ﬁles on this device, common
forensic mobile device data recovery tools, such
as Ontrack EasyRecovery and Oxygen Forensic
Suite, are not ﬁt for purpose. As a result, the
only other avenue available to recover this data
is to perform evidence recovery from remotely
synchronized machines.

4.3

Investigation

4. The BTSync mobile application and associ-

ated ﬁles.

The analysis of entry points 1-3 is outlined
in the two BTSync publications previously
[2014], Scanlon et al.
discussed Farina et al.
[2014].
For the purpose of the experiment
outlined in this section, a logical forensic ac-
quisition of an iPhone 4S with a synchronized

With the entry points identiﬁed, the required se-
crets, ShareID, log ﬁles and ﬁle hashes can be
In order to verify the gathered in-
gathered.
formation required for the investigation, a sec-
ondary source should be used to corroborate the
data. Figure 4 outlines the list of BTSync share
speciﬁc information available from each of the en-
try points. If two or more of these sources corre-
spond, the higher the reliability of the gathered

9

Evidence Item Network RAM sync.dat
ShareID
R
Secret
PeerID
File List
File Hash
Remote Peers
Ports

R
R
P
P
P
P
R

R
R

R
R

R

.SyncID <ShareID>.db sync.log

R

R
R
R
R

R

R

R
R

Table 2: Location of BTSync Speciﬁc Metadata (R = Recoverable, P = Possibly Recoverable)

If conﬂicting information is gath-
information.
ered from two or more sources, it is likely that
this inconsistency may result from a out of date
synchronization or local ﬁle I/O handling. In or-
der for the investigation to be possible, the min-
imum required metadata from any source is the
secret.

The BTSync protocol transfers a full copy of
the ﬁle manifest (contained in <ShareID>.db) in
its current local state from the source system be-
fore any replication is initiated. Any device that
is associated with a share will store a full man-
ifest listing the ﬁle metadata and corresponding
state on the source machine. This manifest can
also contain metadata from each peer contribut-
ing to any modiﬁcations on the shared folder. A
mobile phone that has the application installed
and a secret applied may store a full ﬁle manifest,
which gets updated whenever the application is
run. This update will occur from any active re-
mote machine, even if no ﬁle is ever accessed on
the mobile device.

The most reliable source of evidence is that
gathered from the share, log and application ﬁles
stored on a computer’s hard drive, e.g., data
forensically discovered on ComputerB in the ex-
ample investigation. However, the memory im-
age can contain data that does not have the op-
portunity to be recorded to the hard drive, such
as open ports. It may contain data that super-
sedes that on the physical drive such as the con-
tents of the <ShareID>.db-wal (write ahead log)
ﬁle. This ﬁle acts as a cache of data waiting to be
written to the <ShareID>.db SQLite3 database.
In testing, the metadata information outlined in
Table 2 are recoverable from the marked sources.

The investigator should try to ascertain which
secret extracted from RAM is associated with
which shared folder. ShareIDs are derived from
the secret.

In any shared folder, an investigator can ﬁnd
the .SyncID ﬁle. This ﬁle contains the ShareID
that corresponds to that shared folder. The
investigator must use a hex viewer to extract the
ShareID from the .SyncID ﬁle. To determine
the location of the shared folder associated with
any given secret, the investigator can search in
the sync.dat ﬁle located the directory locations
outlined below:

∼\AppData\Roaming\BitTorrent Sync (Windows)

∼/Library/Application Support/BitTorrent Sync/
(Mac OS X)

[folder where BTSync is extracted]/.sync/ (Linux)

[Applications]/com.bittorent.BitTorrentSync/
Documents/BitTorrent Sync/ (iOS)

The sync.dat ﬁle is a bencoded dictionary
consisting of a series of blocks describing each
share active on the system and the preferences
set for that particular share. The entry for each
share contains the information outlined in Ta-
ble 3.

From this ﬁle, the shared folder location can
be recovered and subsequently the .SyncID ﬁle.
Once the ShareID is known, the investigator
can examine the corresponding <ShareID>.db
ﬁle (described above) and can look for ﬁle entries

10

Key
path
secret
pub_key

stopped_by_user

use_dht
use_lan_broadcast
use_relay

use_tracker

use_known_hosts

peers

Value
Path to the share folder
33 character secret associated with that share
256-bit public key here. Only shares that have
performed a handshake online will have a public
key assigned.
Binary toggle (0/1) if the synchronization of the
share was canceled by the user
Binary toggle to use DHT for peer discovery
Binary toggle to use LAN broadcast messages
Binary toggle to use a relay server if a remote peer
cannot be contacted directly
Binary
(t.usyncapp.com) for peer discovery
Binary toggle to use a list of host IP for direct
contact
Start of the list of recorded peers that have inter-
acted with the share
Remote PeerID

tracker

toggle

server

use

to

a

id
last_sync_completed Epoch timestamp of the last time the peer was
synchronized to or from

Table 3: List of Key:Value Pairs for Each Share Contained in sync.dat

peer discovery methods, e.g, LAN multicast,
the discovered
tracker and DHT. Each of
IP:Port pairs was added to a list for later
querying and ﬁle synchronization.
It is impor-
tant to note that each peer must “check-in” to
the tracker and DHT every X minutes in order
to be returned as active from those services (X is
typically in the 10-60 minute range depending on
conﬁguration – the default value for this on our
example machines is 30 minutes). As a result,
the list of active peers identiﬁed will frequently
change due to network churn.
It is possible to
identify peers that were previously contacted
from the local sync.log ﬁle on the suspect
machine (ComputerB in the sample investiga-
tion). This ﬁle will contain the resolved remote
hostnames, the corresponding remote PeerIDs,
timestamps and speciﬁc ﬁle upload/download
activity from any synchronization activity.

that have the following Key:Value pairs:

state:i2e – The ﬁle was deleted on the
source system and was either never synchro-
nized or was moved to the .SyncArchive
folder (if set in settings.dat) and stored
for 30 days before deletion from the system.

invalidated:i1e – The ﬁle was
locally
deleted or modiﬁed and no longer receives
updates from the source system as a result.
The mtime value will store the timestamp
of when the ﬁle was invalidated. For a
modiﬁed ﬁle, the hash20 value stored in
the <ShareID>.db ﬁle is the hash value of
the last known valid version of the ﬁle, i.e.,
matching hash values with the source ﬁle.

4.4 Enumeration

Next we enumerate the members of the repli-
cating peer group. A bespoke peer discovery
application was created to identify active peers
for any given ShareID using each of the regular

11

4.5 Recovery

BTSync was installed on a monitored virtual ma-
chine for remote recovery purposes. The secret
was added to the application and the ﬁle syn-
chronization process was allowed to complete.
Only IP addresses gathered during the previous
step were permitted for connection, facilitated
through the use of the “Known Peers” option in
the BTSync application. Remote recovery is pos-
sible if the entire ﬁle is available from one or more
remote sources. Each remote machine will store
pieces of each ﬁle in the shared folder (though un-
likely, it is possible that no single remote machine
has the entire ﬁle). The number of pieces for each
ﬁle is determined by the total size divided by the
deﬁned piece length (the default piece length is
32kb). In order for a ﬁle to be recoverable, each
individual piece must be oﬀered by at least one
If only a subset of pieces are
remote machine.
available, partial evidence recovery is still pos-
sible (resulting in a similar recovery from a ﬁle
stored on a corrupted block on a hard disk).

This recovery step can also be used to collect
data that has been locally deleted from a mobile
device. The BTSync mobile application facil-
itates the automatic upload of all photos and
videos taken using the device’s camera and this
data will remain on remote machines irrespective
of whether the media is deleted from the phone
or not.

4.6 Veriﬁcation

The underlying BitTorrent protocol used by
BTSync for ﬁle transfer relies on regular hash
checking. The indexing of all shared BTSync
ﬁles uses systematic SHA1 hashing to know
when a ﬁle is updated on a remote system. The
value for the hash key stored for each individual
ﬁle in the ShareID.db database is calculated
using Formula 1.

hashkey = SHA1(SHA1(P iece1)||

SHA1(P iece2)||...||SHA1(P ieceN ))

(1)

Comparing this gathered ﬁle speciﬁc hash to
that of the corresponding downloaded ﬁles can

ensure a true copy of the original is downloaded.
If only a partial download is possible, the 32kb
piece hashes can be used to verify each piece of
against the corresponding piece of the original
ﬁle. Any downloaded piece with an incorrect
hash (likely as a result of a corrupted download)
can simply be discarded and re-downloaded from
the same remote source or any available alterna-
tive source.

With regards to the sample investigation,
we identiﬁed that badfilethree.txt had been
synchronized and subsequently deleted from
ComputerB. This was discovered in the sync.log
ﬁle and conﬁrmed by cross-referencing against
<ShareID>.db (the value of the invalidated tag
was set to “1” indicating that a local unsynchro-
nized modiﬁcation had taken place).

In order to recover the ﬁle, using a foren-
sically sound evidence recovery machine, all
peer discovery methods were disabled besides
the “Known Peers” option, where ComputerA’s
IP address was added.
badfilethree.txt
was subsequently downloaded from ComputerA.
The SHA1 hash of this ﬁle was found to be
3598492B4D1CE5FAFD9EF76E8FA54C8F55E0716A
which corresponds to that of the original ﬁle, as
outlined in Table 1 above.

5. CONCLUSION

This paper outlined a methodology for the
secure, veriﬁable,
remote recovery of digital
evidence from a decentralized ﬁle synchroniza-
tion network. The veriﬁcation of the gathered
evidence is aided by the native hash-based
veriﬁcation of the protocol itself. Decentralized
networks must use frequent hashing to verify
the integrity of the synchronized information.
Accessing this information can be an invalu-
able source of digital ﬁngerprinting for the
forensic investigator. Any discovered hashes
can be used to verify the evidence gathered
from remote machines to be true copies of
the original. The reliance on frequent hashing
for
of these networks can also be beneﬁcial
the investigator when comparing these values
against a list of known incriminating hash values.

12

5.1 Weaknesses of Current Approach

REFERENCES

It

is possible that

One weakness of the current approach is that
the remote machine can detect an unknown
IP connecting to it and requesting to sync
the evidence.
the re-
mote machine might disconnect/shutdown upon
detecting an unknown/suspicious IP address
range. Firewall/blacklist rules, e.g., the shared
hostiles.txt on the Gnutella network, are
freely available on the web detailing the IP ad-
dresses of known law enforcement, P2P monitor-
ing agencies and research bodies.

A second weakness of this approach occurs
should the remote data be deleted/altered in the
time frame between the physical gathering of
a suspect’s devices and the subsequent remote
evidence acquisition. In this scenario, the hash
of the remote ﬁles will not match any locally
stored hashes or indeed the ﬁles may not be
recoverable at all
if no remote host of the
evidence can be identiﬁed.

5.2 Future Work

BitTorrent Inc. have announced that future ver-
sions of BitTorrent Sync will facilitate selective
syncing, i.e., joining the share of a particular se-
cret, but allowing the user to decide what ﬁles
to download. The company have also hinted
at releasing a corporate, private version of the
tool eliminating the requirement for any Inter-
net/external access.

The aforementioned investigative tool can be
expanded upon to investigate further networks,
including those designed to aﬀord anonymity to
its users. This would include the investigation
and remote recovery of evidence from further de-
centralized networks including ownCloud3, Sync-
thing4 and OnionShare5.

When a suﬃcient number of networks have
been analyzed, a universal decentralized ﬁle syn-
chronization forensic tool should be developed to
aid in future investigations.

3http://owncloud.org/
4https://github.com/calmh/syncthing
5https://github.com/micahﬂee/onionshare

13

Association of Chief Police Oﬃcers. ACPO

Good Practice Guide for Digital Evidence.
http://www.acpo.police.uk/documents/
crime/2011/
201110-cba-digital-evidence-v5.pdf,
2011.

Hyunji Chung, Jungheum Park, Sangjin Lee,

and Cheulhoon Kang. Digital forensic
investigation of cloud storage services. Digital
investigation, 9(2):81–95, 2012.

Dropbox Inc. Dropbox company information.

https://www.dropbox.com/news/
company-info, April 2014.

Luciana Duranti, Weimei Pan, Joy Rowe, and
Georgia Barlaoura. Records in the Cloud
(RiC). University of British Columbia, 2013.

Jason Farina, Mark Scanlon, and M-Tahar

Kechadi. "BitTorrent Sync: First Impressions
and Digital Forensic Implications". Digital
Investigation, 11(S1):S77 – S86, 2014. ISSN
1742-2876. doi:
http://dx.doi.org/10.1016/j.diin.2014.03.010.
URL http://www.sciencedirect.com/
science/article/pii/S1742287614000152.

Corrado Federici. Cloud data imager: A uniﬁed
answer to remote acquisition of cloud storage
areas. Digital Investigation, 11(1):30 – 42,
2014. ISSN 1742-2876. doi:
http://dx.doi.org/10.1016/j.diin.2014.02.002.
URL http://www.sciencedirect.com/
science/article/pii/S174228761400005X.

George Grispos, William Bradley Glisson, and
Tim Storer. Using Smartphones as a Proxy
for Forensic Evidence Contained in Cloud
Storage Services. 2013 46th Hawaii
International Conference on System Sciences,
0:4910–4919, 2013. ISSN 1530-1605. doi:
http://doi.ieeecomputersociety.org/10.1109/
HICSS.2013.592.

Andrew Hoog and Katie Strzempka. iPhone
and iOS Forensics: Investigation, Analysis

and Mobile Security for Apple iPhone, iPad
and iOS Devices. Elsevier, 2011.

Erin E Kenneally. Conﬂuence of digital
evidence and the law: on the forensic
soundness of live-remote digital evidence
collection. UCLA JL & Tech., 2005:5–6, 2005.

Darren Quick. Forensic Analysis of Cloud
Storage Client Data. Master’s thesis,
University of South Australia, Adelaide,
Australia, 2012.

Darren Quick and Kim-Kwang Raymond Choo.

Forensic collection of cloud storage data:
Does the act of collection result in changes to
the data or its metadata? Digital
Investigation, 10(3):266 – 277, 2013. ISSN
1742-2876. doi:
http://dx.doi.org/10.1016/j.diin.2013.07.001.
URL http://www.sciencedirect.com/
science/article/pii/S1742287613000741.

Mark Scanlon and Mohand-Tahar Kechadi.

Online acquisition of digital forensic evidence.
In Sanjay Goel, editor, Digital Forensics and
Cyber Crime, volume 31 of Lecture Notes of
the Institute for Computer Sciences, Social
Informatics and Telecommunications
Engineering, pages 122–131. Springer Berlin
Heidelberg, 2010. ISBN 978-3-642-11533-2.
doi: 10.1007/978-3-642-11534-9_12. URL
http://dx.doi.org/10.1007/
978-3-642-11534-9_12.

Mark Scanlon, Jason Farina, and M-Tahar

Kechadi. Bittorrent sync: Network
investigation methodology. In Proceedings of
Ninth International Conference on
Availability, Reliability and Security (ARES
2014), Fribourg, Switzerland, September
2014. IEEE.

Jonathan Zdziarski. iPhone Forensics:

Recovering Evidence, Personal Data, and
Corporate Assets. O’Reilly Media, 2008.

14

