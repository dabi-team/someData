Introducing the Robot Vulnerability Database (RVD)

V´ıctor Mayoral Vilches1, Lander Usategui San Juan1, Bernhard Dieber2,
Unai Ayucar Carbajo1, and Endika Gil-Uriarte1

1Alias Robotics,Vitoria-Gasteiz, ´Alava, Spain, Email: victor@aliasrobotics.com
2Institute for Robotics and Mechatronics, JOANNEUM RESEARCH, Klagenfurt am W¨orthersee, Austria

Abstract—Cybersecurity in robotics is an emerging topic that
has gained signiﬁcant traction. Researchers have demonstrated
some of the potentials and effects of cyber attacks on robots
lately. This implies safety related adverse consequences causing
human harm, death or lead to signiﬁcant integrity loss clearly
overcoming the privacy concerns in classical IT world.
In cybersecurity research, the use of vulnerability databases
is a very reliable tool to responsibly disclose vulnerabilities in
software products and raise willingness of vendors to address
these issues. In this paper we argue, that existing vulnerability
databases are of insufﬁcient information density and show some
biased content with respect to vulnerabilities in robots. This
paper presents the Robot Vulnerability Database (RVD), a
directory for responsible disclosure of bugs, weaknesses and
vulnerabilities in robots. This article aims to describe the design
and process as well as the associated disclosure policy behind
RVD. Furthermore the authors present preliminary selected
vulnerabilities already contained in RVD and call to the robotics
and security communities for contribution to the endeavour of
eliminating zero-day vulnerabilities in robotics.

I. INTRODUCTION AND BACKGROUND

A vulnerability is a mistake in software or hardware that
can be directly used by an arbitrary malicious actress to gain
access to a system or network, operating it into an undesirable
manner[1]. In robotics, security ﬂaws such as vulnerabilities
are of special relevance given the physical connection to
these systems imply. As discussed in [2],
the world that
”Safety cares about the possible damage a robot may cause
in its environment, whilst security aims at ensuring that the
environment does not disturb the robot operation. Safety and
security are connected matters. A security-ﬁrst approach
is now considered as a prerequisite to ensure safe operations”.

1
2
0
2

v
o
N
2
1

]

R
C
.
s
c
[

3
v
9
9
2
1
1
.
2
1
9
1
:
v
i
X
r
a

are

that unresolved vulnerabilities
loss in cyber

Robot vulnerabilities are indeed potential attack points
in robotic systems that can lead not only to considerable
losses of data but also to safety incidents involving humans.
Some
the
claim[3]
main cause of
incidents. The mitigation
and patching of vulnerabilities has been an active area
of research[4], [5], [6], [7], [8], [9] in computer science
and other technological domains. Unfortunately, even with
robotics being an interdisciplinary ﬁeld composed from a set
of heterogeneous disciplines (including computer science),
not much vulnerability mitigation research has been presented
so far.
A variety of vulnerability archives and bug-tracking sites exist
already. These databases generally provide information that

allows security researchers to locate, mitigate or ﬁx ﬂaws in
their systems. Arguably, the most popular of such databases
is the U.S. National Vulnerability Database (NVD)[10],
funded repository of vulnerabilities
a U.S. government
compiled following a series of U.S. guidelines and standards.
NVD presents an archive with vulnerabilities, each with
their corresponding Common Vulnerabilities and Exposures
(CVE)1 identiﬁers. Thus, NVD gets fed by the CVE List and
then builds upon the information included in CVE Entries
to provide enhanced information for each entry such as ﬁx
information, severity scores, and impact ratings.
There are numerous vulnerability databases, both public and
private, however to the best of our knowledge, none of these
databases includes more than a few dozens of robot-related
vulnerability entries. Moreover, from our research, in most
cases, the information provided does not accurately facilitate
the reproduction of the ﬂaws or its mitigation since reporting
schemes were not originally thought for robotics. In robotics,
system integration and the context become critical key factors
for the reproduction of any ﬂaw or mitigation.

When reviewing prior work on vulnerability databases
in the context of robotics, this paper identiﬁes the following
aspects that deserve further discussion:

• CVE robot-related results are scarce: At the time of
the current CVE List provides some humble
writing,
results when searching for robot (43 CVE entries), Robot
Operating System (892 CVE entries though most, not
robotics related) or even the misleading ROS query (14
CVE entries). A closer look into the results led the
research towards realizing that
information is scarce,
unstructured and in most cases insufﬁcient for vulnera-
bility assessment. Finding robotics-related ﬂaws with the
required accuracy is currently challenging. A similar ex-
ercise was reproduced in other archives of vulnerabilities
with similar results.

1Common Vulnerabilities and Exposures (CVE) List CVE® is a dictionary
of entries—each containing an identiﬁcation number, a description, and at
least one public reference for publicly known cybersecurity vulnerabilities.
CVE contains vulnerabilities and exposures and to date is sponsored by the
U.S. Department of Homeland Security (DHS) and by the Cybersecurity
Infrastructure Security Agency (CISA) although it is not a database per se
(see ofﬁcial information). CVE it self does not contain the information in a
database manner, but instead, CVE List feeds vulnerability databases (such
as the National Vulnerability Database (NVD)) with its entries, and acts as
an aggregator of vulnerabilities and exposures reported at NVD.

 
 
 
 
 
 
• CVE reports require more details to be used (in
robotics): Taking CVE-2019-13566 as an example. Ex-
cept for the description and a few code pointers, this
particular entry provides very little information to help a
system integrator or manufacturer determine its relevance.
No details regarding the ”system under test” have been
provided, neither a exploit that conﬁrms its exploitability
or a vector that allows to measure its severity according to
CVSSv3. Coming from the same group, we ﬁnd CVE-
2019-13465 which at the time of writing is presented
as ** RESERVED ** though authors behind it2 already
disclosed that it is related to a potential iterator cause
buffer overﬂow. Similarly, CVE-2019-13445 presumably
published by the same researchers remains classiﬁed. For
a test engineer or security researcher aiming to reproduce
and assist in patching these ﬂaws, more information is
required. The intrinsic system integration of the robotics
ﬁeld demands for additional context such as the version
of the robot, or robot component under test (in this
case, the Robot Operating System (ROS)[11]). Examples
of additional information required may include a well
deﬁned, context-speciﬁc and appropriate severity scoring
mechanism (to prioritize ﬂaws) or a exploit to validate
its type and classiﬁcation.

• Encouraging triage appears of utmost relevance:
Robotics is the art of system integration. Its modular
characteristic by nature, both in hardware and software
aspects, provides unlimited ﬂexibility to its system de-
signers. This ﬂexibility however comes at the cost of
complexity. The qualiﬁcation of a security ﬂaw com-
monly known as ”triage” seems of special relevance in
the domain of robots given its complexity. Establishing
a channel that favours an open discussion, where other
researchers might contribute is to us beneﬁcial.

• Assisted reproduction of ﬂaws: Working with robots is
generally very time consuming. From the authors’ expe-
rience and involvement in the constructions of robots, it’s
an inherent characteristic of the complexity of the ﬁeld
and the trade-off obtained with its modularity. Mitigating
a vulnerability or a bug requires one to ﬁrst reproduce the
ﬂaw. This can be extremely time consuming, specially
ensuring an appropiate enviroment for its reproduction.
The authors consider that it would be beneﬁcial to include
on each ﬂaw ticket items that facilitate native Operating
System (OS) virtualization via technologies like Linux
Containers. By using a technology like Docker [12],
researchers will obtain relevant support in reproducing
the ﬂaws leading to faster mitigations.

• Unﬁt severity scoring mechanism: CVE uses the Com-
mon vulnerability scoring system (CVSS) [13] to report
on the severity of vulnerabilities. As previously discussed
[14], CVSSv3 has strong limitations when applied to
robotics. Simply put, it fails to capture the interaction that
robots may have with their environments and humans.

2Refer to https://bit.ly/35FBcna

Vulnerabilities played a signiﬁcant role in past attacks
affecting other areas [15] and can be judged as the major cause
for losses. Specially, the so called Zero-day (also known as 0-
day) vulnerabilities, security ﬂaws that are unknown to, or
unaddressed by, those who should be interested in mitigating
the vulnerability. Conceivably, provided vendors released se-
curity patches for vulnerabilities promptly after discoveries,
0-day attacks as well as other attacks and damages using
these ﬂaws would be signiﬁcantly reduced. This demands
for manufacturers to be informed about new ﬂaws affect-
ing their systems. However, according to past research [2],
most vendors in robotics are currently ignoring security ﬂaws
completely. Within the security community, it’s commonly
accepted that ”creating pressure” towards more reasonably-
timed ﬁxes results in smaller windows of opportunity for mali-
cious actors to abuse vulnerabilities. Several projects including
Project Zero3 from Google or the Zero Day Initiative4 from
Trend Micro have adopted this philosophy deﬁning disclosure
policies with a maximum time deadline for manufacturers
to provide a ﬁx before publicly disclosing the vulnerability.
Similar to some of these initiatives, the authors believe that
vulnerability disclosure is a two-way street where both vendors
and security researchers, must act responsibly.

As described by Zheng et al. [3], attempts to resolve this
dilemma have resulted in the development of vulnerability
disclosure policies. The disclosure of a vulnerability is the
revelation of a vulnerability to the public at large.

The authors acknowledge that one of the most—if not
task in security and particularly vul-
the most—important
is minimizing the time window of
nerability management
vulnerability. On this regard and in an attempt to provide robot
manufacturers and users a valuable source of information,
we design and construct a vulnerability database, the Robot
Vulnerability Database or RVD for short. Together with RVD,
and aiming to reduce 0-days from robotics, we also present an
attached disclosure policy thought for robot-related ﬂaws that
minimizes the time window of vulnerability. This paper aims
to describe our approach and discuss our design decisions.
The rest of the paper is organized as follows. Section II
introduces RVD and our design choices. Section III presents
some vulnerability results and section IV argues about our bias
in the compilation of such results. Finally, section V ﬁnalizes
with a series of conclusions and future work items.

II. THE ROBOT VULNERABILITY DATABASE (RVD)

The Robot Vulnerability Database (RVD) is a database
for robot vulnerabilities and bugs that aims to record and
categorize ﬂaws that apply to robots and robot components,
including software and hardware. The database is freely
available at https://github.com/aliasrobotics/RVD and an open
source set of tools to manage the database are also available5
within that same repository.

3https://googleprojectzero.blogspot.com/
4https://www.zerodayinitiative.com/
5Undocumented at the time of writing

As ﬁrst introduced by Ma et al. [4], this paper discusses the
design of the robot vulnerability database by arguing on a set
of relevant items.

A. Scope

The scope of RVD comprises all robotics hardware and soft-
ware systems, including complete robots but also individual
components.

B. Language and terminology

Information sharing becomes difﬁcult without a common
language. The available vocabulary to discuss computer se-
curity concepts is limited which leads to an “overloading”
of terms, i.e., a reuse of the same terms with varying scope
and level of abstraction. This was observed while reviewing
different and existing databases which not only overloaded
but also mixed terms such as weakness, bug and vulnerability
leading to confusion and misunderstandings.

troubling that

found somewhat

RVD attaches itself to common language and standards as
deﬁned by CVE List including the deﬁnitions of weakness,
vulnerability and exposure. In addition, we use the term
”ﬂaw” to refer to all security-related errors. The authors
however
there was no
consensus across security organizations to deﬁne when a
vulnerability is a vulnerability, and not a bug. This paper
argues that this aspect is connected with the lack of resources
for reproducing reported vulnerabilities in most databases and
thereby accepting the so called ”theoretical vulnerabilities”
more than usually. Moreover, we question whether
this
conservative approach of not only ”disclosing selectively” but
also ”disclosing scarcely” can be justiﬁed after recent results
[4], [3], [16], [17], [18], [19].

To ensure uniqueness of all
robot-related ﬂaws, unique
identiﬁers from CVE List are re-used within RVD and tagged
as ”cve”. Additionally, a unique and iterative identiﬁer ”id” is
assigned to each new ﬂaw. To categorize ﬂaws, the Common
Weakness Enumeration (CWE) is used.

To ensure future growth and adaptation, no further con-
strains have been applied (e.g. title naming convention). For
further clariﬁcation on vocabulary, authors refer readers to
appendix A where terminology is further discussed.

C. Sharing model

To understand the rationale of the data sharing model we
refer the readers to the 2nd Workshop of Research with Secu-
rity Vulnerability Databases [16]. In their report, Meunier et al.
argue about 4 different models for vulnerability data sharing,
namely ”Fully Available”, ”Centralized”, ”Federated” and the
”Balkan/Status Quo”. In this paper, It is brieﬂy described and
discussed each one of those models below before introducing
our approach:

• FULLY AVAILABLE: Characterized by openness. The
database is completely open and anyone can access it
or add to it. Copies can be made and used freely. This
model offers the greatest use of access and eliminates

the need of logging activity or authenticating users. Users
can download the entire database seamlessly. The biggest
disadvantage of this model is that the funding of its
maintenance has to be sought.

• CENTRALIZED: Would entail a database of vulnerabil-
ities managed by some central organization that would
be in charge of deﬁning the schema, data review and
consistency, funding, and policy. Access to the database
typically requires some sort of user subscription and
authentication. Advantages of this approach are mainly
the overall consistency and data quality control. The
downside is the scalability and organizational bias intro-
duced by the managing organization.

• FEDERATED: as in a loose union of several distributed
entities on a common task. Consortium, foundations
and similar operate in this manner deﬁning a steering
committee. This model distributes responsibilities among
potentially qualiﬁed parties and ensures funding however
risks inequality by favouring partners of the federation
with more resources (e.g., big companies).

• BALKAN/STATUS QUO: Implies that each ”balkan” or
participant has their own database of vulnerabilities
which she or he is not willing to share with the rest.

Out of the research performed, and similar to [16], It has
been concluded that everybody is interested in vulnerabilities
including software vendors, consumers, security researchers,
terrorists, etc...,
malicious actresses, foreign governments,
whether or not they would be willing to admit it publicly.
Objecting to the public distribution of vulnerabilities or failing
to acknowledge is effectively a proof of security-immaturity
robot
of
component manufacturers embarrased by ﬂaws, pressured
by their clients or unable to cope with the security community.

involved. This

the players

robot or

includes

for

the
RVD adheres to the FULLY AVAILABLE model
most part. This project hosts the database in Github which
requires no access control for consulting the information, but
demands it for contributions or extensions of any kind. This
is enforced to a) ensure a standard format of submissions,
b) favour the ease of use and c) motivate for-proﬁt entities
to give back and contribute, generating credit, credibility
and costing them less than maintaining their own database.
This project proposes a GPLv3 license for the tools and
related-content to ensure enhancements and contributions on
top are feed back to the project.

By adopting this model,
the falsiﬁcation and erasure of
records controlled by a central entity becomes hard, because
valid copies may be saved by anyone exporting the tickets and
records. Moreover, the setup proposed, in our best intention,
provides great fault-tolerance due to the ease of making
non-conﬁdential mirrors and duplicate copies.

In addition, and to empower privacy in advisories
to
manufacturers or other interested parties, we leave the door

open for the integration of RVD with private (non-open)
sources of information. We prototyped and deliver a proof of
concept using a private source hosted in Gitlab6.

D. Taxonomy

In their report, Meunier et al. already highlighted that data
sharing will remain difﬁcult (expensive) as long as there is
no agreement on what
is relevant vulnerability data. This
easily leads to the need to deﬁne a common taxonomy for
vulnerabilities and a matching data exchange schema.

Both,

the taxonomy and a matching schema are avail-
able within the repository. The taxonomy extends prior
in robotics,
work related to the classiﬁcation of bugs
namely the
available
is
schema
at https://github.com/aliasrobotics/RVD/blob/master/rvd tools/
database/schema.py. It has been implemented using a simple
and easy to extend Python dictionary and enforced using the
cerberus library.

robust project7. The

E. Access control

The authors acknowledge that the way in which the in-
formation describing vulnerabilities is handled is extremely
important. Vulnerability data is very sensitive and therefore
should be carefully disclosed. We propose a model for RVD
that implements access control for making contributions. By
favouring an authenticated disclosure, we hope to favour
responsible coherent actions. To simplify and lower the over-
head, we rely on Github’s native accounting. New tickets are
tagged with a ”triage” label and RVD maintainers collaborate
to triage them out at their earliest availability.

F. User interface

Similar to Access Control, User Interface relies heavily on
Github’s native features. By leveraging Github’s front-end,
RVD gets access to a well reviewed and tested front-end
designed for collaboration and participation.

G. Review process

Each ﬂaw is subject to be reviewed at any point in time.
The severity of each ﬂaw is calculated using two scoring
mechanisms:
the Common Vulnerability Scoring System
(CVSS) and the Robot Vulnerability Scoring System (RVSS)
[14]. The later is the result of reviewing CVSS for the
robotics. RVD implements both, CVSSv3 to
domain of
ensure compatibility with other databases and RVSS,
to
provide additional useful information in the robotics context.

Maintainers associate each security ﬂaw to a Github issue.
By leveraging Github issues and particularly, the e-mail like
interaction, we advocate for assisted ﬂaw review, reproduction
and ultimately, assisted triage. Overall, management of the
tickets is coordinated by a set of maintainers selected from the
contributors of the database. The review of ﬂaws is supported
by active use of labels which feed with information to the
Continuous Integration and Deployment (CI/CD) system.

6Refer to https://bit.ly/2slL3QE
7See https://github.com/robust-rosin/robust

H. Maintenance

As discussed in section II-C, funding is required to maintain
the database. In order to reduce the ﬁnancial needs as well as
to ensure maintainers are relieved from the more dull tasks,
a series of automations are programmed into RVD. Using
CI/CD infrastructure, autonomous and semi-autonomous tasks
are introduced into RVD and implemented when applicable
as Github Actions.

At the time of writing, with different degrees of automation
and maturity, the database provides the following features to
simplify maintenance:

• It produces automatically updated reports (in the form of
a README.md) about its status upon new changes.
• It checks and validates conformance of new entries (or

existing ones subject to changes) with the schema

• It analyzes the database for duplicates using a scalable
fuzzy matching library that implements regularized logis-
tic regression augmented with Active Learning. Simply
put, it allows to train models that accurately identify
duplicates.

The authors are actively working on new additions to this
list. This should further reduce to overall effort to maintain
RVD.

I. Disclosure Policy

to

ensure

from
timely
and
Coherently
manufacturers,
together with RVD the authors propose
a disclosure policy. Unless speciﬁed, authors adhere to a
90-day public disclosure policy for new vulnerabilities after
text of the
the ﬁrst communication with the vendor. Full
policy is available on RVD’s ofﬁcial repository.

responses

This disclosure policy is heavily inspired by Google’s
Project Zero and is recommended to all maintainers and
contributors to RVD. This paper calls on all contributing
researchers to adopt disclosure deadlines in some form.

III. VULNERABILITY STATISTICS AND RESULTS

With the aim of preliminarily discussing our RVD use and
feeds, we provide some further data on the entries held at
the date of publication of the present work. Table I presents
a compilation of vendors and the number of vulnerabilities
registered within RVD.

The total number of vulnerabilities per manufacturer pro-
vides some insights. From the raw numbers one can tell that
ABB has faced as many vulnerabilities in their robotic systems
as the rest of the other manufacturers combined. This aspect
is illustrated in Figure 1 and could lead one to think ABB’s
commitment with security far exceeds other vendors. It must
be noted however that several of these ﬂaws have not been
addressed fully. For example, if one was to consider RVD#729,
it will be noticeable that the mitigation provided involves
stressing certain risks that the user gets exposed to, but no
actual mitigating change or update has been made effective.

Vendor

ABB

Fanuc

Robotics

Universal Robots

DDS vendors (eProsima, ADLINK, RTI)

Acutronic Robotics

Vecna

WowWee

UBTech Robotics

PAL Robotics

SoftBank Robotics

Rethink Robotics

Asratec

count

61

6

2

5

2

5

6

3

3

1

4

3

1

TABLE I: Number of vulnerabilities contained in RVD clas-
siﬁed by vendor.

In addition, several of the ﬂaws catalogued for ABB are OT-
related and a closer look into them is required.

Fig. 1: Number of vulnerabilities recorded in RVD per man-
ufacturer

In order

to further

investigate vulnerability severity
by vendor, Figure 2a displays a barplot with the total
number of ﬂaws per vendor, relative to their severity using
CVSSv3. In general, we see that except larger vendors of
robotic technology, most display a vast majority of critical
vulnerabilities according to CVSS. The authors argue that
the reasons behind this are two-fold: ﬁrst and as is common
in the security domain, vulnerabilities with unclear or
unreported severity are ﬂagged with the maximum. This
affects directly the ﬂaws recorded for smaller robotic vendors
where researchers simply didn’t have the motivation (possibly
ﬁnancial) to further pursue a security assessment. Second, the
most established (and larger) vendors of robotic technology
display a lower proportion of highly critical ﬂaws. In the
to
authors’ view, while the data available is insufﬁcient

make strong claims, a tendency to propagate the criticality
percentage down can be appreciated as companies invest
in security. Particularly,
the case of Acutronic Robotics,
which recently performed a security assessment (disclosing
partially)
relevance to draw this conclusion. This
is further illustrated in Figure 2b where the severity of
non-scored vulnerabilities has been reversed.

is of

In any case the authors acknowledge that the information
available is incomplete in all cases. It’s highly likely that
low criticality
vendors do not disclose information about
ﬂaws which could signiﬁcantly change the plot.

IV. COMPARISON AND BIAS

To avoid biased conclusions, the authors assess the results
with a framework by which vulnerability statistics can be
the method proposed
judged and improved. Particularly,
by Christey and Martin [17], maintainers of
two well-
known vulnerability information repositories. According to
them, most of the vulnerability related statistical analyses
demonstrate a serious fault
in methodology and represent
in some cases pure speculation aimed at justifying security
budgets and spending.

To self-assess the results, four types of bias are considered:

• Selection bias or what gets effectively sampled or se-

lected for study.

– for researchers, what software and methodology did

they use to test vulnerabilities.

– for the database, how the database discovers and
handles vulnerability disclosures from researchers to
vendors.

• Publication bias, what portion of the research gets
published in the tickets, and perhaps most importantly,
what does not get published.

• Abstraction bias, assigned to reﬂect bias in the process
the database uses to assign identiﬁers to vulnerabilities.
• Measurement bias, analyse potential errors in how a

vulnerability is analyzed, veriﬁed and catalogued.

– for researchers, failure to verify that a potential issue
is an actual vulnerability, or in over-estimating the
severity of the issue compared to how customers
might prioritize the issue.

– for vendors, prioritization of issues to be ﬁxed or

under-estimation of the severity.

– for the database, how database’s tickets are ﬁlled
by analysts in terms of accuracy and completeness
(e.g. not ﬁlling the severity or the product description
details).

A. Selection bias self-assessment

In the current, initial phase of introducing RVD, the total
number of listed vulnerabilities is still small. This also means
that the conclusions here have an implicit selection bias. As
the database grows and the number and scanning intensity

(a) Non-scored ﬂaws receive highest severity scoring.

(b) Non-scored ﬂaws receive lowest severity scoring.

Fig. 2: Entries of RVD summarizing relative proportion of Critical, High, Medium and Low scoring vulnerabilities for particular
vendors in the market, according to scoring provided by CVSSv3. 2a: non-scored ﬂaws receive the highest severity scoring.
2b: non-score ﬂaws receive the minimum severity scoring

it has to be expected that

of robots listed increases,
the
presented picture shifts. However, it seems to be reasonable
that established companies like ABB that have a broader
product range than young robotics-only companies, also em-
ploy more mature engineering processes in combination with
security researchers and thus have a lower number of critical
vulnerabilities (percentage-wise).

B. Publication bias self-assessment

Only high impact CVEs tend to be published by researchers.
Relatively few low rating vulnerabilities have been identiﬁed
to be public and added to RVD. This might be motivated
by researchers in robot security publishing exclusively high
impact (according to CVSS at least) ﬁndings. Also by the
lack of a precise VDB (Vulnerability DataBases) to adequately
triage robot vulnerabilities, or simply ”ﬁnding support” these
kind of systems is troublesome. The fact that robots do not
solely adhere to OT, but also to IT does not facilitate the
logging of vulnerabilities into VDBs.

C. Abstraction bias self-assessment

RVD IDs are provided for each robotic-related ﬂaw,
regardless of the manufacturer or vendor of the robot (or
robot component). For example, a given vulnerable buffer
overﬂow in an arbitrary OpenSSL version used in robotics
should be classiﬁed with a single RVD ID ticket, regardless
of how many manufacturers are vulnerable to it. Both, CVEs
as well as unique RVD speciﬁc iterative identiﬁers (RVD
IDs) have been used within the schema for compatibility and
de-duplication. In addition, a semi-autonomous de-duplication
mechanism based in regularized logistic regression augmented
with human input (Active Learning) has been used to avoid
duplicates of any kind.

The authors express that to the best of their knowledge, RVD
has been designed to avoid being subject to abstraction bias.

D. Measurement bias self-assessment

This paper has found that

the method for investigation
is often very poorly reported in most of the robot-related
vulnerabilities discovered. This paper advocates for more
detailed reports, including the environment to reproduce the
ﬁnding. If vulnerabilities cannot be reproduced, it is very
difﬁcult to assign an accurate severity. To this end, there is a
relevant measurement bias in the existing dataset.

Efforts have been dedicated to reduce such bias by re-
scoring
classiying, de-deduplicating and enhancing the
mechanism introducing a robot-speciﬁc scoring system
(RVSS). RVSS scoring remains more conservative when it
comes to safety aspects in robotics, as it underrates severity
in data related vulnerabilities and overrates those that have or
might have an effective Safety impact, in comparison to CVSS.

When compared to other existing robotics-related vulnerability
reports (e.g. CVE-2019-13566, CVE-2019-13465 or CVE-
2019-13445), entries in RVD appear more complete and
provide means for its discussion, further improvement and
reproduction, when possible. Still, authors acknowledge that
much work is left to be done on the triage aspect and future
work will focus there.

V. CONCLUSIONS AND FUTURE WORK

This paper presented the Robot Vulnerability Database
along with the processes and tools for the proposed use
of RVD. It has been argued that a vulnerability repository
dedicated to robotics is required to account for the complexity
and special characteristics of robots that are not reﬂected in
general, IT and OT-focused vulnerability collection projects.
RVD aims to enhance existing vulnerability enumerations like
CVE List with information speciﬁc to robotics. It also aims to
provide information on vulnerability reproduction to increase

the overall quality of the collected items. By using machine-
readable formats, RVD enables a high degree of automation
in processing and validation as well as querying of database
entries. This greatly reduces the effort in maintenance that
would otherwise become unbearable as the adoption of RVD
increases.

A total of 110 vulnerabilities have been recorded a the
time of writing. Preliminary statistics on RVD contents
have been presented highlighting that already in its current
initial stage, it already contains a collection of highly critical
security issues across a very broad range of manufacturers.
Moreover, plots show a correlation between the involvement
of a manufacturer with security (funding security researchers,
publishing advisories, etc.) and the spread of the severity of
their related vulnerabilities.

As more data becomes available authors will
re-iterate
on their conclusions and produce more visualizations. Future
work will also include, but not limited to the items listed
below:

• Disclose ﬂaws of open source robot components (e.g.

ROS and ROS 2)

• A higher degree of automation is expected to help support
in the task of creating the security pipelines and mainte-
nance of RVD

• Further work is foreseen to elaborate on difﬁculties
on triage of Robot Vulnerabilities, including the repro-
ducibility of cyber issues.

• An effort is needed to foster the differentiation of OT
technologies, ICS and robotics. There is still scarce data
on robots.

The authors want to explicitly call upon the robotics and
cybersecurity communities to engage with the topic of robot
cybersecurity and use RVD as an essential tool to jointly
proceed towards a future with secure robots.By no means the
authors would like to encourage uncontrolled tampering with
running robotic devices, as this may result into serious safety
hazards.

ACKNOWLEDGMENT

This work has partially been funded by the ROS-
Industrial Quality-Assured Robot Software Components
(ROSin) RedROS-I and RedROS2-I FTPs which received
funding from the European Union’s Horizon 2020 research and
innovation programe under the project ROSIN with the Grant
Agreement No 732287. This research was also ﬁnancially sup-
ported by the Spanish Government through CDTI Neotec ac-
tions (SNEO-20181238). In particular, this action was partially
supported by the regional Basque Autonomous Government’s
SPRI agency for the support within HAZITEK funding scheme
(ZL-2019/00439) and ZABALDU internationalization actions
(ZAB-00014-2019) and special thanks to the Basque Cyber
Security Centre BCSC for the support in actions fostering
awareness in robot Cyber Security. Last but not least, authors
are grateful to the local administration Diputaci´on Foral de

´Alava for the support to entrepreneurship in innovation actions
(EMPREM-2019/00002).

REFERENCES

[1] C. P. Pﬂeeger and S. L. Pﬂeeger, Security in Computing, 3rd ed. Prentice

Hall Professional Technical Reference, 2002.

[2] L. A. Kirschgens, I. Z. Ugarte, E. G. Uriarte, A. M. Rosas, and
V. M. Vilches, “Robot hazards: from safety to security,” arXiv preprint
arXiv:1806.06681, 2018.

[3] C. Zheng, Y. Zhang, Y. Sun, and Q. Liu, “Ivda: International vulnerabil-
ity database alliance,” in 2011 Second Worldwide Cybersecurity Summit
(WCS).

IEEE, 2011, pp. 1–6.

[4] L. Ma, S. Mandujano, G. Song, and P. Meunier, “Sharing vulnerabil-
ity information using a taxonomically-correct, web-based cooperative
database,” Center for Education and Research in Information Assurance
and Security, Purdue University, vol. 3, 2001.

[5] O. Alhazmi, Y. Malaiya, and I. Ray, “Measuring, analyzing and
predicting security vulnerabilities in software systems,” Computers &
Security, vol. 26, no. 3, pp. 219 – 228, 2007. [Online]. Available:
http://www.sciencedirect.com/science/article/pii/S0167404806001520
[6] Y. Shin, A. Meneely, L. Williams, and J. A. Osborne, “Evaluating
complexity, code churn, and developer activity metrics as indicators of
software vulnerabilities,” IEEE Transactions on Software Engineering,
vol. 37, no. 6, pp. 772–787, Nov 2011.

[7] M. Finifter, D. Akhawe, and D. Wagner, “An empirical study of
vulnerability rewards programs,” in Presented as part of
the 22nd
USENIX Security Symposium (USENIX Security 13). Washington, D.C.:
USENIX, 2013, pp. 273–288. [Online]. Available: https://www.usenix.
org/conference/usenixsecurity13/technical-sessions/presentation/ﬁnifter
[8] M. A. McQueen, T. A. McQueen, W. F. Boyer, and M. R. Chafﬁn,
“Empirical estimates and observations of 0day vulnerabilities,” in 2009
42nd Hawaii International Conference on System Sciences, Jan 2009,
pp. 1–12.

[9] L. Bilge and T. Dumitras¸, “Before we knew it: An empirical study of
zero-day attacks in the real world,” in Proceedings of the 2012 ACM
Conference on Computer and Communications Security, ser. CCS ’12.
New York, NY, USA: ACM, 2012, pp. 833–844. [Online]. Available:
http://doi.acm.org/10.1145/2382196.2382284

[10] H. Booth, D. Rike, and G. Witte, “The national vulnerability database
(nvd): Overview,” National Institute of Standards and Technology, Tech.
Rep., 2013.

[11] M. Quigley, K. Conley, B. Gerkey, J. Faust, T. Foote, J. Leibs,
R. Wheeler, and A. Y. Ng, “Ros: an open-source robot operating system,”
in ICRA workshop on open source software, vol. 3, no. 3.2. Kobe, Japan,
2009, p. 5.

[12] D. Merkel, “Docker: lightweight linux containers for consistent devel-
opment and deployment,” Linux Journal, vol. 2014, no. 239, p. 2, 2014.
[13] P. Mell, K. Scarfone, and S. Romanosky, “Common vulnerability scoring
system,” IEEE Security & Privacy, vol. 4, no. 6, pp. 85–89, 2006.
[14] V. M. Vilches, E. Gil-Uriarte, I. Z. Ugarte, G. O. Mendia, R. I. Pis´on,
L. A. Kirschgens, A. B. Calvo, A. H. Cordero, L. Apa, and C. Cerrudo,
“Towards an open standard for assessing the severity of robot security
the robot vulnerability scoring system (rvss),” arXiv
vulnerabilities,
preprint arXiv:1807.10357, 2018.

[15] R. McMillan, “Siemens: Stuxnet worm hit industrial systems,” Comput-

erworld, vol. 14, 2010.

[16] P. C. Meunier and E. H. Spafford, “Final report of the 2nd workshop
on research with security vulnerability databases, january 1999,” 1999.
[17] S. Christey and B. Martin, “Buying into the bias: Why vulnerability
statistics suck,” BlackHat, Las Vegas, USA, Tech. Rep, vol. 1, 2013.
[18] R. Antrobus, S. Frey, B. Green, and A. Rashid, “Simaticscan: Towards a
specialised vulnerability scanner for industrial control systems.” BCS,
2016.

[19] A. BRIEF, “Vulnerability threat trends,” 2013.
[20] Wikipedia, “Software bug — Wikipedia,

the free encyclopedia,”

http://en.wikipedia.org/w/index.php?title=Software%20bug&oldid=
925790097, 2019, [Online; accessed 28-November-2019].

[21] C. W. E. MITRE, “About CWE,” https://cwe.mitre.org/about/faq.html#

A.2, [Online; accessed 28-November-2019].

[22] C. Vulnerabilities and E. MITRE, “What is a vulnerability?” https://cve.
mitre.org/about/faqs.html#what is vulnerability, [Online; accessed 28-
November-2019].

APPENDIX A
TERMINOLOGY

Commonly [20], a software bug is an error, ﬂaw, failure or
fault in a computer program or system that causes it to produce
an incorrect or unexpected result, or to behave in unintended
ways.

A software weakness however is an error that can lead to
software vulnerabilities according to the Common Weakness
Enumeration [21]. The same source ﬁnes a software vulner-
ability as a mistake in software that can be directly used by a
hacker to gain access to a system or network while ISO/IEC
27001 proposes the following deﬁnition for vulnerability: bug
of an asset or control that can be exploited by one or more
threats.

Finally, CVE deﬁnes [22] a software exposure as a system
conﬁguration issue or a mistake in software that allows access
to information or capabilities that can be used by a hacker as
a stepping-stone into a system or network.

Discussion and interpretation

From the deﬁnitions above, it seems reasonable to associate
use interchangeably the terms bug and ﬂaw when referring
the word weakness seems
to software issues. In addition,
applicable to any ﬂaw that might turn into a vulnerability
however it must be noted that (from the text above) a
vulnerability ”must be exploited”. Based on this, a clear
difference can be established classifying ﬂaws with no
to be exploitable as bugs and ﬂaws potentially
potential
to this appear
exploitable as vulnerabilities. Orthogonal
exposures which refer
that allows
attackers to establish an attack vector in a system.

to misconﬁgurations

Beyond pure logic, an additional piece of
information
that comes out of researching other security databases is that
most security-oriented databases do not distinguish between
bugs (general bugs) and weaknesses (security bugs).

Based in all of
following assumptions for RVD:

the above, we interpret and make the

• unless speciﬁed, all ﬂaws are ”security ﬂaws” (an alter-
native could be a quality ﬂaw). Flaw is used as a general
term to refer to any possible security error.

• bug and weakness refer to the same thing and can be used

interchangeably

• a bug is a ﬂaw with potential

to be exploited (but

unconﬁrmed exploitability)

• vulnerability is a bug that is exploitable.
• exposure is a conﬁguration error or mistake in software
that without leading to exploitation, leaks relevant infor-
mation that empowers an attacker.

APPENDIX B
RELATIONSHIP BETWEEN RVD, CVE, AND THE NVD?

To understand the relationship between these terms, we

propose below some deﬁnitions:

• Robot Vulnerability Database (RVD) is a database for
robot vulnerabilities and bugs that aims to record and cat-
egorize ﬂaws that apply to robot and robot components.
RVD is created as a community-contributed and open
archive of robot security ﬂaws. It is originally created
and sponsored by Alias Robotics.

• Common Vulnerabilities and Exposures (CVE) List
CVE® is an archive (dictionary according to the ofﬁ-
cial source) of entries—each containing an identiﬁcation
number, a description, and at
least one public refer-
ence—for publicly known cybersecurity vulnerabilities.
CVE contains vulnerabilities and exposures and is spon-
sored by the U.S. Department of Homeland Security
(DHS) Cybersecurity and Infrastructure Security Agency
(CISA). It is not a database (see ofﬁcial information).
CVE List feeds vulnerability databases (such as the
National Vulnerability Database (NVD)) with its entries
and also acts as an aggregator of vulnerabilities and
exposures reported at NVD.

• U.S. National Vulnerability Database (NVD) is the U.S.
government repository of standards based vulnerability
management data. It presents an archive with vulnera-
bilities, each with their corresponding CVE identiﬁers.
NVD gets fed by the CVE List and then builds upon the
information included in CVE Entries to provide enhanced
information for each entry such as ﬁx information, sever-
ity scores, and impact ratings.

RVD does not aim to replace CVE but to complement it
for the domain of robotics. RVD aims to become CVE-
compatible by tackling aspects such scope and impact of
the ﬂaws (through a proper severity scoring mechanism
for robots), information for facilitating mitigation, detailed
technical information and more.

When compared to other vulnerability databases, RVD
aims to differentiate itself by focusing on the following:

• robotics speciﬁc: RVD aims to focus and capture robot-
speciﬁc ﬂaws. If a ﬂaw does not end-up applying to a
robot or a robot component then it should not be recorded
here.

• community-oriented: while at the time of wrriting RVD
it aims to become

is sponsored by Alias Robotics,
community-managed and contributed.

• facilitates reproducing robot ﬂaws: Working with
robots is very time consuming. Mitigating a vulnerability
or a bug requires one to ﬁrst reproduce the ﬂaw. This
can be extremely time consuming. Not so much pro-
viding the ﬁx itself but ensuring that your environment
is appropriate. At RVD, each ﬂaw entry should aim to
include a ﬁeld named as reproduction-image. This should
correspond with the link to a Docker image that should
allow anyone reproduce the ﬂaw easily.

• robot-speciﬁc severity scoring: opposed to CVSS which
has strong limitations when applied to robotics, RVD uses
RVSS, a robot-speciﬁc scoring mechanism.

As part of RVD, we encourage security researchers to ﬁle
CVE Entries and use ofﬁcial CVE identiﬁers for their reports
and discussions at RVD.

APPENDIX C
RVD SCHEMA

1 SCHEMA = {
2

’id’: {

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

’required’: True,
’oneof’: [{’type’: ’string’}, {’type’: ’

number’}],

# ’type’: ’number’,
’empty’: False,
’min’: 0,
# ’max’: 100
’default_setter’:

lambda doc: 0,

# ’default’: 0

},
’title’: {

’required’: True,
’type’: ’string’,
’maxlength’: 100,
cope with a few tickets
},
’type’: {

# extend beyond 65 to

’required’: True,
’type’: ’string’,
’allowed’: [’bug’, ’weakness’, ’

vulnerability’, ’exposure’],

’default_setter’:

lambda doc: ’bug’

},
’description’: {

’required’: True,
’type’: ’string’,
# ’empty’: False,
# ’default_setter’:
#

lambda doc: None,

},
’cwe’: {

’required’: True,
’type’: ’string’,
# ’oneof’: [{’type’: ’string’}, {’type’: ’

number’}],

# # Changed in version 0.7: nullable is

valid on

fields lacking type definition.

# #
# ’nullable’: True,
’regex’: ’ˆCWE-[0-9]*.*$|ˆNone$’,
’default_setter’:

lambda doc: ’None’

},
’cve’: {

’required’: True,
’type’: ’string’,
’regex’: ’ˆCVE-[0-9]*-[0-9]*$|ˆNone$’,

CVE-2019-13585

#

’default_setter’:

lambda doc: ’None’

},
’keywords’: {

’required’: True,
’oneof’: [{’type’: ’string’}, {’type’: ’list

’}],

’default_setter’:

lambda doc: ’’

},
’system’: {

’required’: True,
’type’: ’string’,
’default_setter’:

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

81

82

83

84

85

86

87

88

89

90

91

92

93

94

95

96

97

98

99

100

101

102

103

104

105

106

107

108

109

110

111

112

113

114

115

116

117

118

119

120

121

122

123

124

125

126

lambda doc: ’’

},
’vendor’: {

’required’: True,
’type’: ’string’,
’nullable’: True,
’default_setter’:

lambda doc: None

},
’severity’: {

’required’: True,
’schema’: {

’rvss-score’: {

’: ’number’}],

’oneof’: [{’type’: ’string’}, {’type

’regex’: ’ˆNone$’,
’min’: 0,
’max’: 10,
’required’: True,

},
’rvss-vector’: {

’type’: ’string’,
’required’: True,

},
’severity-description’: {
’type’: ’string’,
’required’: True,

},
’cvss-score’: {

’: ’number’}],

’oneof’: [{’type’: ’string’}, {’type

’regex’: ’ˆNone$’,
’min’: 0,
’max’: 10,
’required’: False,

},
’cvss-vector’: {

’type’: ’string’,
’required’: False,

},

}

},
’links’: {

’required’: False,
’oneof’: [{’type’: ’string’}, {’type’: ’list

’}],

# ’regex’: ’ˆNone$’,
’default_setter’:

lambda doc: ’None’,

},
’bug’: {

’rename’: ’flaw’

},
’flaw’: {

’required’: True,
’schema’: {

’phase’: {

’required’: True,
’type’: ’string’,
’allowed’: [’programming-time’, ’

build-time’, ’compile-time’,

runtime’, ’runtime-initialization’,

’deployment-time’, ’

’runtime-operation’, ’

testing’, ’unknown’],

’default_setter’:

lambda doc: ’unknown’

},
’specificity’: {

’required’: True,
’type’: ’string’,
# ’allowed’: [’general issue’, ’

robotics specific’,

#

’ROS-specific’, ’

subject-specific’, ’N/A’],

’default_setter’:

lambda doc: ’N/A’,

},
’architectural-location’: {

’required’: True,
’type’: ’string’,
’allowed’: [’application-specific

code’, ’application-specific’,

platform code’, ’ROS-specific’,

’platform-code’, ’

’third-party’, ’N/A’],

’default_setter’:

lambda doc: ’N/A’,

},
’application’: {

’type’: ’string’,
’required’: True,
’default_setter’:

lambda doc: ’N/A’,

},
’subsystem’: {

’type’: ’string’,
’required’: True,
’regex’:

’ˆ(sensing|actuation|

communication|cognition|UI|power).*$|ˆN/A$|.*’,

# TODO: modify this value and

enforce the subsystem’s policies

# ’ˆ(sensing|actuation|

communication|cognition|UI|power).*$|ˆN/A$’,

’default_setter’:

lambda doc: ’N/A’,

},
’package’: {

’: ’list’}],

’oneof’: [{’type’: ’string’}, {’type

# ’type’: ’string’,
’default_setter’:

lambda doc: ’N/A’,

},
’languages’: {

’required’: True,
’oneof’: [{’type’: ’string’}, {’type

’: ’list’}],

# ’type’: ’string’,
’allowed’: [’Python’, ’python’, ’

cmake’, ’CMake’, ’C’, ’C++’,

’package.xml’, ’launch

XML’, ’URScript’, ’shell’,

urdf’, ’None’, ’rosparam YAML’,

’msg’, ’srv’, ’xacro’, ’

’XML’, ’ASCII STL’, ’N/A

’, ’YAML’, ’Package XML’],

’default_setter’:

lambda doc: ’None’

},
’date-detected’: {

check

## TODO: review this and force date

# ’type’: ’date’,
’type’: ’string’,
’required’: True,
# ’coerce’: ’datecoercer’,
’default_setter’:

lambda doc: ’’

},
’detected-by’: {

’type’: ’string’,
’required’: True,
’default_setter’:

lambda doc: ’’

},
’detected-by-method’: {

188

189

190

191

192

193

194

195

196

197

198

199

200

201

202

203

204

205

206

207

208

209

210

211

212

213

214

215

216

217

218

219

220

221

222

223

224

225

226

227

228

229

230

231

232

233

234

235

236

237

238

239

240

241

242

243

244

245

246

247

248

249

250

251

252

253

254

127

128

129

130

131

132

133

134

135

136

137

138

139

140

141

142

143

144

145

146

147

148

149

150

151

152

153

154

155

156

157

158

159

160

161

162

163

164

165

166

167

168

169

170

171

172

173

174

175

176

177

178

179

180

181

182

183

184

185

186

187

’type’: ’string’,
’required’: True,
’allowed’: [’build system’, ’

compiler’,

detection’, ’runtime crash’

’assertions’, ’runtime

testing static’,

],

’testing violation’, ’

’testing dynamic’, ’N/A’

’default_setter’:

lambda doc: ’N/A’

},
’date-reported’: {

’type’: ’string’,
’required’: True,
’default_setter’:

lambda doc: ’’

},
’reported-by’: {

’type’: ’string’,
’required’: True,
’default_setter’:

lambda doc: ’’

},
’reported-by-relationship’: {

’type’: ’string’,
’required’: True,
’allowed’: [’guest user’, ’

contributor’,

automatic’,

N/A’],

’member developer’, ’

’security researcher’, ’

’default_setter’:

lambda doc: ’N/A’

},
’issue’: {

’type’: ’string’,
’default_setter’:

lambda doc: ’’,

},
’reproducibility’: {

’type’: ’string’,
’required’: True,
’default_setter’:

lambda doc: ’’,

},
’trace’: {

’type’: ’string’,
’required’: True,
’default_setter’:

lambda doc: ’’,

},
’reproduction’: {

’type’: ’string’,
’required’: True,
’default_setter’:

lambda doc: ’’

},
’reproduction-image’: {

’type’: ’string’,
’required’: True,
’default_setter’:

lambda doc: ’’

},

}

},
’exploitation’: {

’required’: True,
’default_setter’:

lambda doc: ’’,

’schema’: {

’description’: {

’required’: True,
’type’: ’string’,
’default_setter’:

lambda doc: ’’

},
’exploitation-image’: {

’required’: True,
’type’: ’string’,
’default_setter’:

lambda doc: ’’

},
’exploitation-vector’: {
’required’: True,
’type’: ’string’,
’default_setter’:

lambda doc: ’’

},

}

},
’fix’: {

’rename’: ’mitigation’

},
’mitigation’: {

’required’: True,
’schema’: {

’description’: {

’required’: True,
’type’: ’string’,
’default_setter’:

lambda doc: ’’

},
’pull-request’: {

’: ’number’}],

’oneof’: [{’type’: ’string’}, {’type

# ’type’: ’string’,
’default_setter’:

lambda doc: ’’

},

}

},

255

256

257

258

259

260

261

262

263

264

265

266

267

268

269

270

271

272

273

274

275

276

277

278

279

280

281

282

283

284

285

286

287

288

289

290

291

292

293
294 }

