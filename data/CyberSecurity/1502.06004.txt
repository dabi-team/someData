The Impact of Stealthy Attacks on Smart Grid Performance:
Tradeoffs and Implications

Yara Abdallah, Student Member, IEEE, Zizhan Zheng*, Member, IEEE, Ness B. Shroff, Fellow, IEEE, Hesham El

Gamal, Fellow, IEEE, and Tarek M. El-Fouly, Member, IEEE

1

6
1
0
2

n
u
J

4
1

]

C
O
.
h
t
a
m

[

2
v
4
0
0
6
0
.
2
0
5
1
:
v
i
X
r
a

Abstract—The smart grid is envisioned to signiﬁcantly en-
hance the efﬁciency of energy consumption, by utilizing two-
way communication channels between consumers and operators.
For example, operators can opportunistically leverage the delay
tolerance of energy demands in order to balance the energy
load over time, and hence, reduce the total operational cost.
This opportunity, however, comes with security threats, as the
grid becomes more vulnerable to cyber-attacks. In this paper,
we study the impact of such malicious cyber-attacks on the
energy efﬁciency of the grid in a simpliﬁed setup. More precisely,
we consider a simple model where the energy demands of the
smart grid consumers are intercepted and altered by an active
attacker before they arrive at the operator, who is equipped
with limited intrusion detection capabilities. We formulate the
resulting optimization problems faced by the operator and the
attacker and propose several scheduling and attack strategies for
both parties. Interestingly, our results show that, as opposed to
facilitating cost reduction in the smart grid, increasing the delay
tolerance of the energy demands potentially allows the attacker to
force increased costs on the system. This highlights the need for
carefully constructed and robust intrusion detection mechanisms
at the operator.

I. INTRODUCTION

Over the past few years, the smart grid has received consid-
erable momentum, exempliﬁed in several regulatory and policy
initiatives, and research efforts (see for example [2], [3] and
the references therein). Such research efforts have addressed a
wide range topics spanning energy generation, transportation
and storage technologies, sensing, control and prediction, and
cyber-security [4], [5], [6], [7], [8].

Demand response/load balancing and energy storage are two
promising directions for enhancing the energy efﬁciency and
reliability in the smart grid. Non-emergency demand response
has the potential of lowering real-time electricity prices and
reducing the need for additional energy sources. The basic
idea is that, by utilizing two-way communication channels, the
emergency level of each energy demand (at the end-users or
central distribution stations) is sent to the grid operator that, in

Y. Abdallah, Z. Zheng, and H. E. Gamal are with the Department of
Electrical and Computer Engineering, The Ohio State University, 2015
Neil Ave., Columbus, OH 43210, USA. Email: yara.abdallah10@gmail.com;
zheng.497@osu.edu; helgamal@ece.osu.edu.

N. B. Shroff is with the Department of Electrical and Computer Engineer-
ing, The Ohio State University, 2015 Neil Ave., Columbus, OH 43210, USA.
Email: shroff.11@osu.edu.

T. M. El-Fouly is with the Department of Computer Science and En-
tarek-

gineering, Qatar University, PO Box 2713, Doha, Qatar. Email:
fouly@qu.edu.qa.

* Corresponding author.
This work was supported by QNRF fund NPRP 5-559-2-227 and ARO-
W911NF-15-1-0277. A preliminary version of this work appeared in the
proceedings of the IEEE Conference on Decision and Control, 2012 [1].

turn, schedules these demands in a way that ﬂattens the load.
Moreover, energy storage capabilities at the end-points offer
more degrees of freedom to the operator, allowing for a higher
efﬁciency gain. This potential gain, however, comes at the
expense of the security threat posed by the vulnerability of the
communication channels to interception and impersonation.

In this work, we study the impact of the vulnerability of
two-way communications on the energy efﬁciency of the smart
grid. More speciﬁcally, we propose a new type of data integrity
attack towards Advanced Metering Infrastructures (AMI), that
captures the above scenario in the presence of a single stealthy
attacker. In an AMI system, a wide area network (WAN)
connects utilities to a set of gateways, which are connected
to electricity meters through neighborhood area networks
(NANs). As observed in [9], neighborhood area networks is an
attractive target of attacks, where a large number of devices are
physically accessible with little security monitoring available.
Moreover, since these derives are connected to networks, an
attacker can potentially get access to a large amount of data by
hacking into a few nodes or links in AMI [10]. As observed
in [11], all the three major types of nodes in AMI, namely,
smart meters, data concentrators, and the AMI headend, are
subject to attacks, with different amount of data that can be
utilized by the attacker.

In this work, we consider a simpliﬁed model of AMI, similar
to [12], that includes a grid operator and n consumers that may
be capable of energy storage, harnessing the potential cost
savings in the smart grid. Our analysis covers two models of
energy demands. In the ﬁrst (total-energy model), each demand
includes the total amount of energy to be served, the service
start time, and the deadline by which the requested energy
should be delivered. In the second (constant-power model),
each demand similarly has an arrival
time and deadline,
but the consumers ask for energy to be distributed across a
speciﬁed number of time slots (a service time), with a power
requirement in each slot. In both models, the consumers send
their demands over separate communication channels to the
operator. The grid operator attempts to schedule these demands
so as to balance the load across a ﬁnite period of time, and
hence minimize the total cost paid to serve these demands.

In our model, we also assume the presence of a single
attacker who is fully capable of intercepting and altering the
consumer demands before they arrive at the operator (see
Figure 1). The end goal of the attacker, as opposed to the
operator, is to maximize the operational cost paid by the system
for these demands, hence reducing the energy efﬁciency of
the system. We differentiate between two scenarios. The ﬁrst
corresponds to a naive operator who fully trusts the incoming

 
 
 
 
 
 
2

operator is offered more scheduling opportunities. On the
other hand, a somewhat surprising observation is that,
with a limited defense mechanism at the operator, this
increase offers a similar opportunity to the attacker to
force costs even higher than those incurred by the reg-
ular grid, transposing the purpose of the communication
capabilities provided to the consumers.

The proposed framework enjoys several merits. Our analysis
throughout the sequel does not assume any speciﬁc struc-
ture/distribution on the consumer demands and hence the
derived results encompass a wide range of realistic scenarios.
The attack bounds provided here are based on worst-case
analyses and so provide strong guarantees on the impacts
of different attacks. The main limitation of this work is the
rather weak detection/defense mechanism at the operator. Our
purpose here is to explore the attacker’s side and arrive at
performance bounds that motivate stronger defenses at the
operator/consumers.

The remainder of this paper is organized as follows. After
a brief overview of related work in Section II, we present our
system model and the optimization problems at the operator
and attacker sides in Section III. In Sections IV and V, we
provide ofﬂine and online attacks for the total-energy model
and the constant-power model, respectively. Numerical results
are given in Section VI. We provide some suggestions to the
operator in Section VII, whereas our conclusions are given
in Section VIII. Discussion of the model, extensions of our
solutions to time-dependent cost functions, and details of some
of the algorithms are provided in the Appendix.

II. RELATED WORK

Cybersecurity is of critical importance to the secure and
reliable operation of the smart grid, which is challenging to
achieve due to the large scale and the decentralized nature of
the grid, the heterogeneous requirements of the components,
and the coupling of the cyber and physical systems. Various
types of cyber attacks targeting the availability, integrity, and
conﬁdentiality of the smart grid have been studied, and both
prevention and detection techniques have been proposed [13],
[9].

Data integrality attack is considered as an important threat
to the smart grid [13]. In particular, false data injection towards
the SCADA systems has received a lot of attention recently [5],
[6]. By injecting malicious data into a small set of controlled
meters, this attack can bias the state estimation of the system
while bypassing the bad data detection in the current SCADA
systems. Since the seminal work of [5], much effort has been
devoted to the problem of ﬁnding the minimum number of
meters to be controlled to ensure undetectability [6], [8].
Although this sparsest unobservable data attack problem is
NP-hard in general, a polynomial time solution is given in [14]
for the case when the network is fully measured. Moreover,
strategic defense techniques have been developed [8], [15]
and the impact of data injection attack on real-time electricity
market has been considered [7], [16]. When the attacker does
not have enough number of controlled meters, a generalized
likelihood ratio test is proposed to detect attacks [6]. In addi-

Fig. 1: A system model for a smart grid in the presence of a single
attacker. The forward channels between the consumers and the grid
operator are fully compromised by the attacker. (a, d, e) is the vector
of the start times, deadlines and energy requirements of the consumer
demands, respectively.

energy demands, whereas in the second, a simple intrusion
detection mechanism (to be discussed later) is assumed to
be deployed by the operator. Rather intuitively, the attacker’s
desire to remain undetected imposes more limitations on its
capabilities, and hence, reduces the potential harm. This desire
can be justiﬁed, for example, by considering the long-term
performance of the grid, where the total impact of successive
attacks is more damaging when the attacker remains unde-
tected.

Based on the aforementioned assumptions, we ﬁrst formu-
late the optimization problems faced by the operator and the
attacker. For the operator, when being oblivious to any attacks,
a minimization problem needs to be solved. On the other hand,
the attacker is aware of the optimal strategy employed by the
operator, and hence, a maximin optimization problem needs
to be solved. In our formulation, we limit the attack’s strength
by the number of energy demands the attacker is capable of
altering. For the case when the attacker is capable of altering
all of the energy demands (the attacks thus reach their full
potential and force the system to operate at the maximum
achievable total cost), we show that the maximin problem
actually reduces to a maximization problem.
To the best of our knowledge, however,

the impact of
stealthy attacks on the energy efﬁciency of the smart grid has
not been studied before, and this paper is the ﬁrst attempt to
explicitly characterize such impact.

Our main contribution can be summarized as follows.

• We propose optimal ofﬂine strategies for both the op-
erator and the unlimited attacker. The former gives the
minimum energy cost when there is no attack, and
the latter gives the maximum energy cost that can be
enforced. The gap between the two indicates the maxi-
mum damage that can result from such attacks. We also
provide efﬁcient online strategies for both of them. These
strategies are more practical in terms of operability and
also indicate several bounds on the possible damage due
to an unlimited attack.

• For more limited attacks, we provide a simple greedy
ofﬂine algorithm to arrive at a lower bound, and a
dynamic programming-based algorithm that computes an
upper bound on the total cost achieved by such attacks.
Moreover, efﬁcient online attacks are provided.

• From our analysis and numerical results, we conclude
that in the absence of security threats an increase in
the delay tolerance of the energy demands increases the
energy efﬁciency of the system, as expected, since the

Customer1Customer2CustomernAttacker(a,d,e)maxminCOperator(a0,d0,e0)minC(a1,d1,e1)(a2,d2,e2)(an,dn,en)(a0,d0,e0)AlteredDemandstion to data attacks, the sparsest unobservable attack problem
has been studied in closely related power injection attacks [17].
In the context of AMI, various potential threats have been
identiﬁed [11], [10], [13], including integrity attacks for the
purposes such as energy theft and remote disconnection. Dif-
ferent intrusion detection systems (IDS) have been considered,
including speciﬁcation based [10], [18] and anomaly based
approaches [19]. In particular, a set of data stream mining
algorithms are evaluated and their feasibility for the different
components in AMI is discussed in [19]. The information
requirements for detecting various types of attacks in AMI are
discussed in [9]. Although data integrity attacks are considered
as a potential threat in AMI [13], its impact on the energy
efﬁciency of the system has not been considered before, and
proper intrusion detection schemes for the new type of attack
that we consider remain open.

III. PROBLEM FORMULATION

A. Demand Model

In this paper, we adopt the control and optimization frame-
work ﬁrst proposed in [12] for the demand side of the smart
grid. This framework assumes a central operator and n energy
consumers that send their energy service demands to the
operator using perfect channels. Our model builds on this
framework, adding to it a single active attacker. The attacker
is capable of intercepting and altering the demand requests in
order to maximize the total energy cost paid by the smart grid.
We assume a time-slotted system and a ﬁnite time horizon
[0, T ], and consider two types of demands:

∈

≥

≤

aj, ej

1) Total-Energy requirements: each consumer has a total
energy requirement that needs to be served before some
deadline elapses. This, for instance, captures the scenario
of having consumers with energy storage capabilities.
Here, the energy demand of the jth consumer, 1
j
≤
n, is composed of the tuple (aj, dj, ej), where aj, dj
∈
N+, dj
R+, indicating that demand j arrives
at the beginning of time-slot aj, and has to be served
for a total amount of ej, by the end of time-slot dj.
2) Constant-Power requirements: each consumer has an
instantaneous power requirement and speciﬁes a service
time duration to ﬁnish a given job 1, before a deadline
elapses as well. The energy demand of the jth consumer,
n, is composed of the tuple (aj, dj, sj, pj),
1
N+ is
where aj and dj are deﬁned as in the above, sj
R+ is the instantaneous
the job’s duration time and pj
power requirement for this job. We note that in contrast
to the total-energy model, the instantaneous power re-
quirement pj cannot be changed by either the operator
or the attacker.

≤

≤

∈

∈

j

In both cases, we assume that

jobs can
the set of
be scheduled preemptively,
i.e., a job can be interrupted
and resumed, so long as the deadline and energy/power
requirements are met. Let J =
, and the
}
in the total-energy (constant-power)
associated demands
=
(a1, d1, e1), . . . , (an, dn, en)
model
{

1, . . . , n

in

=

J

J

{

}

(

1We use demand and job interchangeably in the paper.

3

J

J

(cid:48) =

(a1, d1, s1, p1), . . . , (an, dn, sn, pn)
). The set of demands
{
}
are sorted by their arrival times non-decreasingly. Each energy
is sent to the operator over a perfect channel
demand in
that is fully intercepted by the attacker. Hence the attacker
by a forged one,
could substitute the actual demand set
(cid:48), before it is received by the operator. An example for
J
,
the total-energy case is shown in Figure 1. Similar to
J
(a(cid:48)
1, d(cid:48)
m)
the forged set is
for
{
}
the total-energy model and, for the constant-power model,
1, d(cid:48)
. Let J (cid:48) =
(cid:48) =
is
}
{
1, . . . , m
denote the indices of forged jobs. We note that
{
}
m
n in general as will be explained later in this section. For
ease of notation, we deﬁne the vector a = [a1, . . . , an], and
deﬁne d, e, s, p similarly for the original vectors, and deﬁne
a(cid:48), d(cid:48), e(cid:48), s(cid:48), p(cid:48) for the corresponding forged vectors. For any
job j, we deﬁne its job allowance to be lj = dj
aj + 1. Let
lmax = maxj∈J lj, lmin = minj∈J lj. We similarly deﬁne
emax, emin, smax, smin, pmax, pmin.

J
1, p(cid:48)
1, s(cid:48)

1), . . . , (a(cid:48)

1), . . . , (a(cid:48)

m, d(cid:48)

m, d(cid:48)

m, p(cid:48)

m, s(cid:48)

m, e(cid:48)

1, e(cid:48)

m)

(a(cid:48)

≥

−

J

B. Simple Intrusion Detection

We put the following constraints on the attacker. First, when
the attacker chooses a job to modify, he is limited to changing
its arrival time or its deadline time, or, breaking the job into
multiple separate jobs (that would appear to the scheduler as
independent jobs), so long as the ﬁnal schedule is admissible.
That is, all of the original jobs are served exactly their energy
requirement (or service time and power requirement) upon or
after their arrival and before or upon their real deadlines. Note
that the attacker could easily be detected by the consumers if
the ﬁnal schedule is not admissible.

Moreover, we assume that the operator adopts a simple sta-
tistical testing based intrusion detection scheme. For example,
consider a statistical testing on the slackness of jobs. The
slackness of a job j, denoted as xj, is deﬁned as the maximum
1
time elasticity when serving the job. Formally, xj = li
for the total-energy model, and xj = lj
sj for the constant-
power model. Assume that the slackness of demands are i.i.d.
samples of a known distribution with mean µ and variance σ2.
For a set of n demands received, the operator determines if
it has been modiﬁed by using, for example, the one sample
z-test with statistic z = x−µ
σ √n, with a signiﬁcance level α,
the probability threshold below which the operator decides the
data has been modiﬁed.

−

−

Assume that

the attacker knows (1) the distribution of
demands, and (2) the statistical testing and α adopted by
the operator. If the attacker also knows (cid:80)
j xj for the set
of demands in J, it can ﬁnd the maximum amount of job
slackness that can be reduced for demands in J, while still
passing the z-test on slackness. When this knowledge is not
available as in the more realistic online setting (to be precisely
deﬁned below), the attacker cannot ensure undetectablility.
However, it can choose to modify a small number of jobs
to ensure a small probability of detection, which is still useful
to the attacker. We can similarly consider a statistical testing
on the arrive times or other parameters of demands. Instead
that depends on the concrete
of working on a constraint
statistical testing used, we consider a simple constraint on the

fractional of energy demands that the attacker is capable of
altering, which can be derived from the statistical testing used.
In addition to simplifying the optimization problems for the
attacker, such a bound can also be interpreted as a resource
constraint to the attacker. We will consider other types of
constraints in our future work. Let B =
[0, 1]
∈
denote the number of jobs that the attacker can modify.

βn
(cid:99)

, β

(cid:98)

We note that an accurate statistical modeling of electric
demands with time elasticity is by itself a challenging problem
especially when the demands are correlated, which provides
further opportunity to the attacker. Although the operator can
also consider more advanced intrusion detection schemes such
as data mining based anomaly detection, the high dimension
of the data stream (large number of demands with overlapping
durations) is a big challenge to be addressed.

C. Optimization at the Operator and the Attacker

S

S

S

∈

∈

J

×

]jt

j∈J (cid:48)

= [

R+m

[0, T ] under schedule

, i.e., ES (t) = (cid:80)

Upon receiving the m (altered) demands,

(cid:48), an admissible
schedule of these demands (jobs) is to be determined by the
R+T ,
operator. A schedule is given by
S
jt denotes the amount of energy allocated to job j in
where
time-slot t. Let ES (t) be the total energy consumed at time-
slot t
jt.
S
Let Ct(ES (t)) denote the cost incurred by the total power
R+ to be
consumed at the time-slot t. We assume Ct : R+
a general non-decreasing and convex function, as in [12]. The
convexity assumption resembles the fact that, as the demand
increases, the differential cost at the operator increases, i.e.,
serving each additional unit of energy to increasing demand
becomes more expensive [12]. In our analysis and evaluation,
we will consider the following commonly adopted power
function as an example, where Ct(E) = Eb, b
1,
which allows for estimating the performance for a wide range
of monotone increasing and convex functions. Moreover, for
simplicity of exposition, we assume Ct(
) to be time invariant
·
in the following and omit the subscript t. We show that most
of our algorithms and analytic results can be extended to time-
dependent cost functions in Appendix B .

R, b

→

≥

∈

The operator attempts to balance the load by ﬁnding an
admissible schedule (given the altered demands by the at-
tacker) that minimizes the total cost over the interval [0, T ].
The optimization problem at the operator side, for the total-
energy model, is then deﬁned as follows:

Cmin(a(cid:48), d(cid:48), e(cid:48)) = min
S

T
(cid:88)

t=1

C(ES (t))

(PminE)

s.t.

0,

j
∀

∈

J (cid:48),

t
∀

∈

[0, T ],

jt = e(cid:48)
j,
S

J (cid:48).

j
∀

∈

≥

jt
S
d(cid:48)
j
(cid:88)

t=a(cid:48)
j

Similarly, the problem for the constant-power model is

4

Cmin(a(cid:48), d(cid:48), s(cid:48), p(cid:48)) = min
S

T
(cid:88)

C(ES (t))

(PminS)

s.t.

t=1
0, p(cid:48)

,
j}

∈ {

j
∀

∈

J (cid:48),

t
∀

∈

[0, T ],

1Sjt=p(cid:48)

j

= s(cid:48)
j,

J (cid:48).

j
∀

∈

S

jt
d(cid:48)
j
(cid:88)

t=a(cid:48)
j

= 1 if

jt = p(cid:48)
where 1Sjt=p(cid:48)
j, and is 0 otherwise. The
S
constraints in the both problems ensure the admissibility of
the considered schedules.

j

J

On the other hand, the attacker attempts to ﬁnd appropriate
values of a(cid:48), d(cid:48), e(cid:48) (or a(cid:48), d(cid:48), s(cid:48), p(cid:48)) in
(cid:48) such that the cost
achieved by the operator is maximized, subject to the number
of demands that can be modiﬁed. Let bj be the collection of
the (sub)jobs that the attacker generates out of job j, 1
≤
n. Each (sub)job is, again, a tuple of the form (a(cid:48), d(cid:48), e(cid:48)) or
(a(cid:48), d(cid:48), s(cid:48), p(cid:48)). To guarantee an admissible ﬁnal schedule, each
set bj should satisfy the following conditions:
In the total-energy model, for each job j:
For 1

≤

k

j

bj

≤

≤ |

|

k, d(cid:48)
a(cid:48)
aj

0,

N+, e(cid:48)

k ≥

k ∈
a(cid:48)
d(cid:48)
k ≤
k ≤
≤
(cid:88)
e(cid:48)
k = ej.

dj,

1≤k≤|bj |

In the constant-power model, for each job j:
For 1

k

bj

≤

≤ |

|

aj

≤

N+,

k ∈

k, s(cid:48)
k, d(cid:48)
a(cid:48)
d(cid:48)
a(cid:48)
k ≤
k ≤
(cid:88)
s(cid:48)
k = sj.

dj, p(cid:48)

k = pj,

[a(cid:48)

k, d(cid:48)
k]

∩

[a(cid:48)

l, d(cid:48)

l] =

1≤k≤|bj |

,

∅

k, l, k

∀

= l, 1

k, l

bj

≤ |

.

|

≤

(cid:48) : = (cid:83)

The sets bj are then collected in the forged demand vector,
1≤j≤n bj. Under this setting, the attacker solves
i.e.,
the following optimization problems. For the total-energy
model:

J

Cmaxmin(a, d, e, β) = max

Cmin(a(cid:48), d(cid:48), e(cid:48))

a(cid:48),d(cid:48),e(cid:48),J ∗
Eqs (1a) - (1c),
J ∗
|
1, and

βn,

| ≤

J : bj

=

(aj, dj, ej)

{

}}

s.t.

β

≤
j
{

∈

(PmaxminE)

.

(3)

where β

∈

R, 0

≤
J ∗ =

Here J ∗ denotes the set of consumer job indices that were
modiﬁed by the attacker. In a similar fashion, we deﬁne the
attacker’s optimization problem for the constant-power model:

Cmaxmin(a, d, s, p, β) = max

Cmin(a(cid:48), d(cid:48), s(cid:48), p(cid:48))

a(cid:48),d(cid:48),s(cid:48),p(cid:48),J ∗
Eqs (2a) - (2d),
J ∗

βn,

|

| ≤

(PmaxminS)

(1a)

(1b)

(1c)

(2a)

(2b)

(2c)

(2d)

where we have dropped the constraint that no energy is served
) is monotone increasing.
to a job j outside [aj, dj] since C(
·

s.t.

(cid:54)
(cid:54)
where β

∈

1, and

β

≤

R, 0

≤
J ∗ =

j
{

J : bj

=

(aj, dj, sj, pj)

.

(4)

∈

}}

{
We provide efﬁcient ofﬂine and online solutions to the
problems formulated above. Ofﬂine solutions not only give
us performance bounds on the extreme case when there is
no uncertainty on energy demands, but also provide useful
insights for the design of online solutions. On the other hand,
in the more realistic online setting, a demand is revealed only
on its actual arrival.

• Ofﬂine setting: In the ofﬂine setting, we assume that the
at time 0, while
(cid:48) at time 0,

attacker knows all the true demands
the operator knows all the forged demands
and obtains no further information during [0, T ].

J

J

• Online setting: In the online setting, at any time t, the
attacker only knows the set of true demands with aj
≤
t, while the operator only knows the set of unmodiﬁed
demands with aj
t, and the set of forged demands
with a(cid:48)
t. In addition, the number of demands n is the
j ≤
common knowledge.

≤

Note that in the online setting, if a(cid:48)
j = aj, demand j should
be forwarded to the operator without delay. On the other hand,
if a(cid:48)
j so that
the operator does not get extra information.

j > aj, the attacker should hold demand j until a(cid:48)

For comparison purposes, we also consider the following
inelastic scheduling policy for the operator as a baseline
strategy. In the total-energy model, this strategy serves each
job its energy demand, entirely and immediately upon its
arrival. The associated baseline cost, Cbase(a, d, e), can be
found as:

Cbase(a, d, e) =

(cid:88)

(cid:32)

C

(cid:88)

(cid:33)

ej

.

t∈[0,T ]

j∈J:aj =t

(5)

The counterpart quantity in the constant-power model is:
(cid:32)

Cbase(a, d, s, p) =

(cid:88)

C

(cid:88)

(cid:33)
.

pj

(6)

5

in Section IV-C, we propose limited attacks and study the
impact of such attacks. We note that the ofﬂine attacks we
discuss below have a time complexity of O(n3). On the other
hand, all the online attacks have a time complexity of O(n)
and are therefore more scalable to large systems.

A. Scheduling at the Operator

The optimization problem at the operator (PminE) can be
directly mapped to the “minimum-energy CPU scheduling
problem” studied in [20]. Our discussion below is an adapted
discrete-time version of the classical YDS algorithm [20].

I

For every pair (k, l), k

J (k, l) be the set of all job
l, let
indices whose intervals are entirely contained in [k, l], that is,
J (k, l) =
. For the received (forged)
I
demands

J (cid:48)(k, l) to be

J : aj

≥

≤

≤

k, dj
j
{
(cid:48), deﬁne the energy intensity on
J
I
j∈IJ(cid:48) (k,l) e(cid:48)
j
k + 1
l

J (cid:48)(k, l)) =

(cid:80)

g(

(7)

∈

}

l

,

I

≤

in the interval

J (cid:48)(k, l),
Note that if we only consider the set of jobs in
I
J (cid:48)(k, l)) amount of electricity in
a schedule that serves g(
[k, l] minimizes the energy
each time slot
cost (assuming it is admissible). We further deﬁne (k∗, l∗) =
J (cid:48)(k∗, l∗) is the set of
argmax(k,l):k≤l g(
I
I
J (cid:48)(k, l)
jobs with the maximum energy intensity among all
for any k, l with k

J (cid:48)(k, l)), that is,

l.

I

I

I

It is shown in [20] that, for strictly convex C(
·

), the optimal
(k∗, l∗)) in each
strategy schedules a total energy of g(
time slot in [k∗, l∗]. That is, the interval with the maximum
energy intensity must maintain this intensity in the optimal
(k∗, l∗) are
schedule. This also implies that no jobs out of
I
(k∗, l∗). Hence a greedy algorithm
scheduled with those in
(k∗, l∗) and
that searches for
then removes those jobs (and the corresponding interval) from
the problem instance, can be used to solve Problem (PminE).
The corresponding algorithm is outlined below (see [20] for
the details).

(k∗, l∗), schedules the jobs in

I

I

I

−

t∈[0,T ]

j∈J:t∈[aj ,aj +sj −1]

This strategy represents the case when the delay tolerance
of the jobs is not exploited. Therefore, we treat this quantity
as the cost paid in the current regular gird, where no two-way
communication channels are established, and accordingly, the
system is not vulnerable to the cyber-attacks discussed in this
paper.

As a ﬁrst attempt

towards understanding the impact of
stealthy attacks on smart-grid demand-response, we have made
several simpliﬁcations in this work. In Appendix A, we
provide a discussion on the rationale behind our model and
outline several extensions including how to conduct the impact
analysis under congested power systems.

IV. TOTAL-ENERGY DEMANDS: SCHEDULING AND
ATTACK STRATEGIES

In this section, we focus on the total-energy demand model.
We ﬁrst ﬁnd the optimal scheduling strategy for the operator
in Section IV-A. We next propose full attack strategies in
Section IV-B including both ofﬂine and online attacks. Finally,

Algorithm 1 Ofﬂine Scheduling at the Operator
1: while J (cid:48) (cid:54)= ∅ do
2:
3:

IJ (cid:48) (k∗, l∗) ← an interval with the highest energy intensity;
Schedule the jobs in IJ (cid:48) (k∗, l∗) according to the Ear-
(EDF) policy, such that ES (t) =
liest Deadline First
g(IJ (cid:48) (k∗, l∗)), for all t ∈ [k∗, l∗];
Delete the jobs in IJ (cid:48) (k∗, l∗) from J (cid:48) and modify the problem
to reﬂect the deletion of jobs.

4:

The above algorithm arrives at the optimal schedule with
complexity O(n3) since it sufﬁces to consider intervals whose
two endpoints are either arrival times or deadlines of some
jobs. Let Cmin denote the optimal minimum cost achieved
(when there is no attack). A simple online algorithm for
Problem (PminE) was also given in [20] (the Average Rate
Heuristic, AVR). This online scheme distributes the energy
requirement of each job evenly on its service interval, ignoring
further information on how the jobs intersect. The performance
of this simple heuristic is studied in [20] when the cost map-
ping is a power function, and the following bounds are proven:
For C(E) = Eb, b
2, this online heuristic achieves

R, b

∈

≥

(cid:54)
2b−1bb. Since
rbCmin, where bb
a total cost C min
each demand is processed once, this algorithm has an O(n)
complexity.

rb

≤

≤

≤

B. Full Attack Strategies and Performance Bounds

(cid:48).
We now turn our attention to the attacker’s selection of
We note that the special case (β = 1) is of special interest to
us, as it resembles a full attack, i.e., the attacker is capable of
modifying all of the consumer demands (e.g., when there is
no intrusion detection at the operator). We ﬁrst address this
case. The more general attacks for β < 1 will be considered
in Section IV-C.

J

1) An Optimal Ofﬂine Full Attack: We ﬁrst show that, in the
case β = 1, the Problem (PmaxminE) can be transformed into
a maximization problem. To see this, consider any undetectable
strategy followed by the attacker such that, for each demand
(aj, dj, ej)
, there exists exactly one corresponding forged
∈ J
demand, (a(cid:48)
j = d(cid:48)
j, e(cid:48)
j, d(cid:48)
j)
∈
[aj, dj], and e(cid:48)
j = ej. All such strategies are always feasible
to the attacker by our assumption of β = 1 and, if employed
by the attacker, leave no degrees of freedom to the operator.
Moreover, due to the monotonicity and convexity of C(
), it
·
sufﬁces for the attacker to consider only this set of strategies
as shown in the following lemma.

j = tj for some tj

(cid:48), with a(cid:48)

∈ J

∈

Lemma 1: When β = 1, there is an optimal attack where
j = tj for some tj

for any job j, a(cid:48)

[aj, dj].

j = d(cid:48)

≥

C (cid:48)
t2

(E1)

Proof: Consider an optimal solution for the attacker.
Suppose a job j is served at both time t1 and t2. Let E1 and E2
denote the total energy consumption at t1 and t2, respectively.
Without loss of generality, assume C (cid:48)
(E2). Then
t1
the total amount of j served at t2, denoted as δ, can be
moved from t2 to t1 such that Ct1 (E1 + δ) + Ct2(E2
≥
Ct1(E1) + Ct2 (E2) by the convexity and monotonicity of
Ct1 and Ct2. The lemma then follows by applying the above
argument iteratively.
Based on this observation, Problem (PmaxminE) under β = 1
reduces to a maximization problem, which, for a given job
instance, looks for an optimal strategy that serves each job in
a single feasible time slot. Formally, the attacker solves the
following problem:

δ)

−

Cmax(a, d, e) = max

S

C(ES (t))

T
(cid:88)

t=1

(Pmax)

s.t.

S

j
jt = 0,
∀
jtj = ej, tj

J,

t
∈
∀
∈
[aj, dj],

[0, T ], t

= tj,
J.
j
∀

S

∈

Hence,

in the above formulation,

∈
the attacker needs to
decide only on tj for each j
J. Given a set of jobs J, deﬁne
a clique of J as a subset of jobs in J whose job intervals
intersect with each other, and a clique partition of J as a
partitioning of set J into disjoint subsets where each subset
forms a clique of J. We then have the following observation.
Lemma 2: Each clique partition of J corresponds to a

∈

feasible solution to Problem (Pmax) and vice versa.

6

then obtain a feasible solution to (Pmax). On the other hand,
consider a feasible solution to (Pmax). We can assume that
each job is served in a single time slot by Lemma 1. For any
time-slot t with at least one job served, let Kt denote the set
of jobs that are served at t. Then Kt is a clique for any t, and
the set of these cliques form a clique partition of J.

Moreover, we observe that to ﬁnd the optimal attack, it
is sufﬁcient to consider locally maximal cliques deﬁned as
follows. For any time slot t, let K t denote the set of jobs whose
job interval contains t. A clique is called locally maximal if
it equals K t for some t. The following result is key to derive
the optimal attack:

Lemma 3: There is an optimal clique partition solving

(Pmax) that contains a locally maximal clique 2.

Proof: Consider an optimal clique partition, K1, ..., Km,
that solves (Pmax). Assume Ki has the maximum cost among
these cliques. If Ki is not locally maximal, then for any time-
slot t where jobs in Ki intersect, there is a job j included in
another clique, say Ki(cid:48), whose interval contains t. By moving
j from Ki(cid:48)
to Ki, we get a new partitioning whose total
cost can only increase by the convexity and monotonicity of
C(
). Hence, Ki can be made locally maximal without loss of
·
optimality.

Let C(k, l) be the maximum feasible cost that could be
J (k, l). Given any
k,l be the locally maximal
J (k, l). We then have the

achieved by solely scheduling the jobs in
time-slot z contained in [k, l], let K z
clique at z for jobs restricted to
following recursion.

I

I

Theorem 1:

(cid:34)

(cid:32)

C(k, l) = max
z∈[k,l]

C

(cid:33)

(cid:35)

ej

+ C(k, z

−

1) + C(z + 1, l)

.

(cid:88)

j∈Kz

k,l

Proof: Consider the set of jobs in

(8)
J (k, l)). Lemma 3
I
implies that C(k, l) is achieved by a partitioning that contains
J (k, l)). Each such clique
a locally maximal clique for jobs in
I
separates the optimization problem into two subproblems for
smaller intervals. By searching over all the locally maximal
cliques over the interval [k, l], C(k, l) can be achieved.

j = d(cid:48)

Accordingly, we can apply the dynamic programming al-
gorithm in [21] to our problem as in Algorithm 2 (a formal
description appears in Appendix C). The optimal cost is then
C(1, T ), which is computed in the ﬁnal step together with the
optimal clique partition. From the obtained clique partition,
one can easily compute a set of time slots, tj, j
J and
set a(cid:48)
j = tj, solving Problem (Pmax). The obtained
schedule leaves no degrees of freedom to the operator as, after
the attacker’s modiﬁcations, all jobs become virtually urgent to
operator and must be scheduled immediately upon their arrival.
It is also clear that, as the job allowance of jobs increases,
the attacker is capable of forming larger cliques and hence
imposing higher costs on the operator. When we study online
attacks, one of our goals is to formalize this observation.

∈

Proof: Consider any clique partition of J. For each clique
in the partitioning, the set of jobs in the clique overlap with
each other, and can be compressed to the same time slot
(any time slot where all these job intervals intersect). We

2A similar fact

is proved in [21], where the authors consider clique
partitioning so as to minimize a submodular cost function on the cliques, and
shows the existence of a (globally) maximal clique in the optimal partition.
We introduce the notion of locally maximal clique so that our results can be
extended to time-dependent cost functions as we discuss in Appendix B.

(cid:54)
Algorithm 2 Ofﬂine Full Attack

1: Iterate over all intervals [k, l], k ≤ l, k, l ∈ [0, T ], with increasing

interval length.

2: In each iteration, compute C(k, l) using Eq. (8), where the last

two terms are obtained from previous iterations.

The algorithm has O(n2) iterations since it sufﬁces to
consider intervals whose two endpoints are either arrival times
or deadlines of some jobs, where in each iteration, it takes
O(n) time to ﬁnd C(k, l). Therefore, the algorithm has a total
complexity of O(n3).

2) Online Full Attacks: In this section, we investigate the
case where the attacker processes the arriving jobs in an online
fashion, where at any time-slot t, the attacker possesses knowl-
edge about the demands that have arrived by t. We propose a
simple online attack where the jobs in J are partitioned into
cliques according to an EDF policy. The attacker maintains a
set of active jobs, that is, the set of demands that have arrived
but not scheduled yet. Let A denote the set of active jobs. In
any time-slot t, if t is the deadline for a demand j
A, then
all the active demands in A are grouped in a single clique, by
setting their arrival times and deadlines to t. These demands
are then forwarded to the operator, and A is set to the empty
set. Note that the algorithm ensures that the operator only
learns a demand j at a(cid:48)
j. The intuition of using an EDF policy
is to delay the decision as far as possible so that more demands
can be compressed together to generate a large clique.

∈

Algorithm 3 Online Full Attack
A ← ∅. In any time-slot t,
1: A ← A ∪ {j : aj = t};
2: if dj = t for some job j ∈ A then
For each job k in A, a(cid:48)
k ← t, d(cid:48)
3:
Forward the set of (forged) jobs in A to the operator;
4:
A ← ∅
5:

k ← t;

Since each job is processed once,

the algorithm has a
complexity of O(n). We denote the resulting cliques by
K1, . . . , Km. The resulting cost is computed as

C max =

m
(cid:88)

i=1

C

(cid:18) (cid:88)

(cid:19)

ej

.

j∈Ki

(9)

∩

∩

Ki and X

Kj are disjoint for i

i(X
= j, and X

solution that achieves Cmax. Then X = (cid:83)
X
non-empty for at most r1 different Ki, where r1 =

Our next result shows that, despite its simplicity and online
operation, Algorithm 3 could achieve a signiﬁcant loss in the
system’s efﬁciency. We ﬁrst make the following observation.
Lemma 4: Consider any clique X in an optimal (ofﬂine)
Ki), where
Ki is
(cid:109)
+1.
Proof: Let K1, . . . , Km denote the sequence of cliques
constructed by Algorithm 3. Since Ki and Kj contain disjoint
set of jobs, and the union of all Ki is the entire set of jobs, we
have X = (cid:83)
Kj are disjoint
∩
for i
= j. Moreover, Algorithm 3 ensures a property that for
all i(cid:48) > i, all the jobs in Ki(cid:48) have arrived strictly later than
the earliest deadline of the jobs in Ki. Let t1 and t2 denote
the earliest arrival and earliest dealine, respectively, among the

Ki), where X

(cid:108) lmax
∩
lmin

Ki and X

i(X

∩

∩

∩

7

−

t1

set of jobs in X. Then since all the jobs in X intersect at t2,
lmax. The above property then ensures that X could
t2
have a nonempty intersection with at most r1 (cid:44)
+ 1
Ki
sets in the partitioning
{

∈ {
This observation leads to the following bound for the online

lmax
lmin (cid:101)

1, . . . , m

, i
}

.
}

≤

(cid:100)

attack.

Theorem 2: For C(E) = Eb, b

R, b

∈

1,
≥
(cid:24) lmax
lmin

(cid:25)

r1

1
b−1 Cmax, where r1 =

C max ≥
Proof: For a given problem instance, J, a, d, e, let the
optimal partition of the jobs in J be X1, X2, . . . , Xm∗ , such
that

(10)

+ 1

Cmax(a, d, e) =

ej

.

(11)

(cid:32)

m∗
(cid:88)

(cid:88)

(cid:33)b

z=1

j∈Xz

Let K1, . . . , Km denote the sequence of cliques constructed
, let N (z, i) =
}

by the algorithm. For any z
Xz

1, . . . , m∗

∩

∈ {
Ki. From Lemma 4, we have
(cid:32) m
(cid:88)

m∗
(cid:88)

Cmax(a, d, e) =

(cid:32)

(cid:33)(cid:33)b

(cid:88)

ej

z=1

m∗
(cid:88)

z=1

(a)

≤

= rb−1

1

i=1

m
(cid:88)

rb−1
1

j∈N (z,i)
(cid:32)

(cid:88)

i=1

j∈N (z,i)

m
(cid:88)

m∗
(cid:88)

(cid:32)

(cid:88)

i=1

z=1

j∈N (z,i)

(cid:33)b

(cid:33)b

ej

ej

rb−1
1 C max(a, d, e),

(12)

≤

where (a) is obtained by the power mean inequality.
When C(.) is a power function of the form C(E) = Eb, b
∈
R, b
1, the simple structure of the online solution further
delivers an explicit lower bound for the maximum achievable
cost by the attacker:

≥

Theorem 3: For C(E) = Eb, b

∈
(cid:18) lmin

R, b
(cid:80)

1,

≥
j∈J ej

≥

2lmin + an

a1

−

(cid:19)b

.

(13)

Cmax(a, d, e)

Proof: Suppose the attacker follows Algorithm 3. Let
K1, . . . , Km denote the set of cliques constructed by the
algorithm. From Eq. (9) and the power mean inequality, we
have

Cmax

C max ≥

≥

(cid:18) (cid:80)

(cid:19)b

j∈J ej
m

.

(14)

Consider any two consecutive cliques Ki and Ki+1. Let j
denote a job with the earliest deadline in Ki. Then from the
lmin for any
construction of the algorithm, we have ak
Ki+1. Moreover, a1 must appear in K1 and an must
job k
+ 2. This bound,
appear in Km. It follows that m
together with (14), completes the proof.

−
an−a1
lmin

aj

≤

≥

∈

The above result formalizes our intuition that the harm done
by a cyber attack grows with the scheduling leverage given to
the grid’s operator. When all other parameters are ﬁxed, we
use this result to speciﬁcally estimate the growth of Cmax
with lmin. For instance, in Figure 2, we plot our bound versus
an increasing lmin, ﬁxing the average energy demand and the

(cid:54)
(cid:54)
C. Limited Attacks and Performance Bounds

8

We now focus on the case when the attacker is limited by
the number of jobs he is capable of modifying without being
detected, i.e., the attacker can alter only B =
jobs, where
0 < β < 1. We again divide our study in two cases, the ofﬂine
setting and the online setting. In both cases, we derive bounds
with respect to the corresponding full attacks. Therefore, these
bounds are independent of the online scheduling algorithms
used by the operator.

βn
(cid:99)

(cid:98)

1) Ofﬂine Limited Attacks: For limited attacks, we are
not able to ﬁnd an optimal ofﬂine solution as we do for
full attacks. To understand the impact of stealthy attacks in
this more general setting, we propose two polynomial time
ofﬂine algorithms that render a lower and an upper bound,
respectively, on the performance of optimal limited attacks,
and evaluate their performance in simulations. We show that
even in the more challenging limited attack regime where
the attacker may not be able to ﬁnd the optimal attack, it
is still possible to enforce signiﬁcant amount of damage using
a simple attack strategy.

j for all the jobs j

Similar to our argument in the full attack case, the attacker
could only consider the following simple strategy: Choose a
set of job indices J ∗
j =
J such that
d(cid:48)
J ∗. Leave all the remaining jobs
j = t∗
J ∗) unaltered. We adopt this approach in our proposed
(J
\
ofﬂine attacks in this section. We let Cmax = Cmax(a, d, e)
and Cmaxmin(β) = Cmaxmin(a, d, e, β), whenever clear from
the context.

= βn, and set a(cid:48)

J ∗
|

⊂

∈

|

A Lower Bound. We ﬁrst propose a simple variant that
is tailored to our problem (see Algorithm 4). For any β, the
algorithm ﬁnds a feasible limited attack, the cost of which
provides a lower bound on the cost resulting from the optimal
limited attack. We further establish an explicit performance
bound for this algorithm in Theorem 5.

Our algorithm is inspired by the standard greedy algorithm
for the fractional knapsack problem [22]. In the classical
fractional knapsack problem, m items are given, each with
a weight wi and a value vi. We need to ﬁnd a set of items
such that their total value is maximized subject to a budget on
1. A fraction of
i wi, 0
their total weight, say, β0
any item might be collected, and the corresponding value is
scaled according to its chosen weight. The greedy algorithm
below solves this problem.

(cid:80)

β0

≤

≤

1) Sort (vi, wi) according to vi/wi non-increasingly.
2) Choose the ﬁrst k pairs, (v1, w1), . . . , (vk, wk) such that

k
(cid:88)

i=1

wi

β0

≤

m
(cid:88)

i=1

wi

and

k+1
(cid:88)

i=1

wi > β0

m
(cid:88)

i=1

wi.

(18)

The optimal choice is given by the k items collected in
step (2), and a fraction of the (k + 1)th item as the weight
budget allows. Moreover,
the remaining weight
budget after selecting the ﬁrst k pairs be parameterized by β1
=
/wk+1, by the greedy selection,
we must have

if we let

i=1 wi

i=1 wi

(cid:80)m

(cid:80)k

β0

−

(cid:17)

(cid:16)

k
(cid:88)

i=1

vi + β1vk+1

β0

≥

m
(cid:88)

i=1

vi.

(19)

Fig. 2: A lower bound on Cmax plotted for various values of n and
lmin under a quadratic cost function (i.e., b = 2). The average energy
demand is 10 while the average inter-arrival time is 5.

average inter-arrival time. In this instance, Cmax grows at least
linearly with lmin, and the rate of growth increases as the
sample size n increases. More numerical results are reported
in Section VI.

Finally, we use the heuristic AVR, presented previously in
Section IV-A, to arrive at an upper bound on the gap between a
fully-compromised operator (a operator subject to a full attack)
and a non-compromised one:

Theorem 4: For C(E) = Eb, b

R, b

2,

≥

∈

Cmax(a, d, e)

≤

2b−1(lmax + 1)bbbCmin(a, d, e).

(15)

Proof: For a given problem instance, J, a, d, e, let the
optimal partition of the jobs in J be X1, X2, . . . , Xm∗ such
that

Cmax(a, d, e) =

ej

,

(16)

(cid:32)

m∗
(cid:88)

(cid:88)

(cid:33)b

z=1

j∈Xz

and assume that those cliques are scheduled in time slots
t1, . . . , tm∗ .

We now consider applying the AVR heuristic to the same
problem instance and let the obtained cost by this algorithm be
denoted by CAV R(a, d, e). We note that it achieves a fraction
of Cmax(a, d, e) as given by the following:

CAV R(a, d, e) =

(cid:32)

(cid:88)

(cid:33)b

pj(t)

(cid:88)

j∈J

(17)

t∈[0,T ]
(cid:32)

m∗
(cid:88)

(cid:88)

(cid:33)b

pj(tz)

z=1

m∗
(cid:88)

(cid:32)

j∈Kz

(cid:88)

z=1
(cid:32)

j∈Kz

1
lmax + 1

(cid:33)b

ej
lj + 1

(cid:33)b

Cmax(a, d, e).

≥

=

≥

addition,

In
2b−1bbCmin(a, d, e) [20] and that establishes our

CAV R(a, d, e)

have

we

≤
result.

This bound shows that, for a given power cost function, the
harm due to a cyber attack is also limited by the maximum
scheduling ﬂexibility given by the served jobs.

1234567891050100150200250300350400lminLower bound on Cmax0 n = 500n = 100n = 50n = 30n = 20n = 10Algorithm 4 Ofﬂine Limited Attack

1: Find the optimal clique partitioning using Algorithm 2, assuming

a full budget;

2: Sort the set of cliques found by the ratio of clique cost over

clique size non-increasingly;

3: Greedily choose a set of cliques with total size bounded by βn;

Let K denote the ﬁrst unchosen clique on the list;

4: Greedily choose min(βn, |K|) jobs of highest energy require-

ments in K to compress;

5: Among the above two choices, the one that results in a higher

cost is adopted.

The proposed attack strategy builds on the aforementioned

algorithm:

≤

maxmin(β)

Since ﬁnding the optimal clique partitioning is the most
the algorithm has a complexity of
time-consuming step,
O(n3). Let C 1
maxmin(β) denote the total cost enforced by
this attack. It is clear that C 1
Cmaxmin(β). To
get insights on the performance of this attack, we consider
two special cases. Suppose that, under no budget constraints,
the optimal clique partition (obtained from Algorithm 2) is
composed of cliques of size one, i.e., each job forms a separate
clique. In this case, our greedy attack will choose to fully
compress B = βn jobs, and those will be of the highest
energy demands according to step (3) above. By the greedy
selection, this clearly guarantees that C 1
βCmax.
Another extreme case is when the optimal clique partition is
composed of one single clique containing all of the n jobs. In
this case, it is again clear by the greedy selection, in step
(cid:16)
(4), that C 1
. When C(.) is a
power function of the form C(E) = Eb, b
1, we
βbCmax. For cases between those two
get C 1
extremes, we make use of the aforementioned insights to arrive
at the following lower bound .

maxmin(β)

maxmin(β)

maxmin(β)

j∈J ej

β (cid:80)

R, b

≥

≥

≥

≥

C

∈

(cid:17)

Theorem 5: For β

∈

[0, 1], C(E) = Eb, b

R, b

∈

1,

≥

C 1

maxmin(β)

βb
2

Cmax.

Nk+1

≥
Proof: Assume that the ﬁrst k cliques are fully com-
pressed in Algorithm 4. Let β1 = βn−(N1+...+Nk)
denote
the fraction of budget available to clique Kk+1, where Ni
denotes the size of clique Ki. Let C0 = C1 + β1Eb
k+1.
Then by the greedy selection of cliques and (19), we have
C0

≥
On the other hand, let β2 = β n

denote the fraction of
budget available to compressing only the jobs in clique Kk+1.
By the greedy selection of jobs in the clique and (19), we have
(cid:80)k(cid:48)

i = βCmax.

i=1 Eb

β (cid:80)m

Nk+1

β2Ek+1. Therefore, C2

2Eb
βb

k+1.

j=1 ej
≥
We then have

≥

(20)

C 1

maxmin
C0

=

≥

(a)

≥
(b)

≥

C2
C2 + β1Eb
βb
2
βb
2 + β1

=

k+1

k+1 ≥

max(C1, C2)
C1 + β1Eb
2Eb
βb
k+1
2Eb
k+1 + β1Eb
βb
βb
2
βb
2 + β2
βb−1

=

βb−1 + 1 ≥

k+1
βb−1
2
βb−1
2 + 1
βb−1
2

,

9

β.

≥

where (a) follows from β1
≤
Hence C 1
2 C0

βb−1

maxmin ≥

≥

βb
2 Cmax.

β2 and (b) follows from β2

An Upper Bound. In order to compute an upper bound
on the maximum cost that can be obtained by any feasible
ofﬂine limited attacks, we ﬁnd the optimal attack strategy
under the assumption that the operator follows the baseline
scheduling strategy, i.e., the operator fully serves each job
immediately upon its arrival. That is, we solve a problem
similar to Problem PmaxminE by replacing Cmin with Cbase.
Let C 2
maxmin denote the optimal total cost obtained by the
attacker when the operator follows the baseline scheduling
strategy. We ﬁrst observe that C 2
maxmin(β) is indeed an upper
bound of Cmaxmin(β).

Lemma 5: C 2

maxmin(β)

Cmaxmin(β).

≥

that

Proof: Assume S is the optimal attack strategy that
achieves Cmaxmin(β),
is, S is the optimal schedule
for the attacker that solves Problem PmaxminE. Let C (cid:48)
denote the total cost obtained when the attacker adopts S,
while the operator adopts the baseline strategy. We then have
maxmin(β).
Cmaxmin(β)

C 2

C (cid:48)

In the remainder of this section, we further assume that
at most one job arrives at any given time-slot t
[0, T ].
loss of generality since we can
Note that
consider an arbitrarily small time slot. We then show that under
this assumption, C 2
maxmin(β) can be found by a dynamic
programming algorithm similar to Algorithm 2.

this is without

∈

≤

≤

To derive the algorithm, we ﬁrst observe that Lemma 1
and Lemma 2 still hold for limited attacks, since the budget
constraint is deﬁned over the number of jobs that are altered,
but not how they are altered. On the other hand, Lemma 3
does not hold any more. Instead, we will derive a variant
of Lemma 3 as follows. Consider an optimal clique partition
of J to Problem (PmaxminE) when the operator follows the
baseline scheduling strategy. Since at most one job can arrive
at any time slot, without of loss of optimality, we can assume
that each clique K contains exactly one job, jK, that has an
unaltered arrival time. The remainder of the jobs would have
arrival times altered to match that of jK. For instance, we can
choose jK as the job with latest arrival in clique K. Hence,
the budget used to form clique K would be exactly
1.
This observation leads to the following result.

K
|

| −

Theorem 6: When the operator follows the baseline strat-
egy,
there is an optimal clique partition solving Prob-
lem (PmaxminE) that contains a locally maximal clique, or
a clique that can be made locally maximal by adding jobs
from cliques of size 1 only.

j

∪ {

Proof: Let Kmax denote the clique containing the maxi-
mum total energy requirement in the clique partition. Assume
that Kmax is not locally maximal. Then there exists a job j
contained in another clique K in the partitioning such that
Kmax
is still a clique. Suppose K contains at least 2
jobs. We distinguish the following two cases. First, if a(cid:48)
= aj
j (cid:54)
in the optimal schedule, then we can schedule job j at the
time slot when all the jobs in Kmax are scheduled, while
keeping the schedule of the rest of the jobs in K, without
affecting the attacker’s budget. Moreover, by the convexity of
C(.) and the fact that Kmax has the maximum total energy

}

requirement among all the cliques in the partition, the resulting
cost must increase by this change, which contradicts the fact
that the clique partition is optimal. Second, if a(cid:48)
j = aj in the
optimal schedule, then we can again schedule job j at the time
slot when the jobs in Kmax are scheduled, and schedule the
remaining jobs in K at the latest arrival time of those jobs.
By the assumption that at most one job arrives at any time
2, this again leaves the budget
slot and the fact that
unaffected and could only increase the total resulting cost. We
again reach a contradiction. Hence, to achieve optimality in
our upper-bound problem, what remains is to use jobs from
cliques of size 1 to render Kmax maximal.

| ≥

K

|

(cid:98)

βn
(cid:99)

Let C(k, l, m) denote the maximum achievable cost by
solely scheduling the jobs contained in [k, l] with a budget m.
). Using Theorem 6, we
Our objective is to ﬁnd C(1, T,
can construct a recursion that computes C(k, l, m) by parsing
for locally maximal cliques in each time-slot z
[k, l], as we
did for β = 1, but with two modiﬁcations. First, we need to
investigate all the possibilities of using only a fractional budget
of i out of m for each found clique. Second, we would also
need to exhaust the possibilities of distributing the remaining
budget m
i on the resulting two subproblems of any chosen
clique. Formally, for any clique K, let K(i) denote the ﬁrst
i jobs with the highest energy requirements in K. We then
have:

−

∈

C(k, l, m) =

max
z∈[k,l],i∈[0,m],j∈[0,m−i]

C

(cid:34)

(cid:32)

(cid:88)

(cid:33)

ej

+

(21)

j∈Kz

k,l(i+1)
(cid:35)
.

j)

C(k, z

−

1, j) + C(z + 1, l, m

i

−

−

By Theorem 6, the constructed recursion indeed holds and
a dynamic program similar to Algorithm 2 is accordingly
designed. This algorithm has a complexity of O(n4), since
it has O(n2) iterations and in each iteration it takes O(n2)
time to ﬁnd C(k, l, m).

2) Online Limited Attacks: To derive an efﬁcient online
limited attack, we consider the following simple strategy
that mimics the behavior of Algorithm 3 while taking the
budget constraint into account. As in Algorithm 3, the attacker
maintains the set of active jobs in A. It also maintains the total
number of jobs that have been modiﬁed in N , and the number
of future jobs in R (recall that the attacker knows n). At any
time t, the set of jobs that arrive at t are added to A. The main
idea of the algorithm is to modify each job with probability
β, or forward it to the operator directly with probability 1
β,
independent of other jobs. Note that this decision has to made
at the arrival time of a job. Let A(cid:48)
A denote the set of active
jobs to be modiﬁed. If there is a job j in A with dj = t, then all
the jobs in A(cid:48) are compressed to the single time slot t. These
jobs are then forwarded to the attacker, and both A and A(cid:48) are
set to the empty set. To make sure that all the budget is used
and no more, the algorithm checks two boundary conditions.
First, it stops sampling if all the budget has been used (lines
3-4). Second, when R + N
B, all the future jobs can be
modiﬁed (line 6).

−

⊆

≤

Since a separate decision is made for each demand on its
arrival, and each demand to be modiﬁed is then processed

10

break;

if N = B then

Algorithm 5 Online Limited Attack
B ← (cid:98)βn(cid:99), A ← ∅, A(cid:48) ← ∅, N ← 0, R ← n.
In any time-slot t,
1: A ← A ∪ {j : aj = t};
2: for each job j with aj = t do
3:
4:
5:
6:
7:
8:
9:
10: N ← N + 1, R ← R − 1;
11: if dj = t for some job j ∈ A then
For each job k in A(cid:48), a(cid:48)
k ← t, d(cid:48)
12:
Forward the set of forged jobs to the operator;
13:
A ← ∅, A(cid:48) ← ∅
14:

Sample r from the uniform distribution in [0, 1];
if r ≤ β or R + N ≤ B then

forward j to the operator;

A(cid:48) ← A(cid:48) ∪ {j};

k ← t;

else

once, this algorithm has a complexity of O(n). Note that we
have intentionally choose to generate the set of cliques at the
earliest deadlines of jobs in A, not in A(cid:48), so that this algorithm
closely simulates the behavior of Algorihtm 3. In particular,
consider an input sequence, and any clique K (cid:48) generated by
Algorithm 5, and the corresponding clique K generated by
Algorithm 3 at the same time slot. Then K (cid:48)
K. Moreover,
for a set of i.i.d. demands, when n becomes large, for most
cliques K, the corresponding K (cid:48) has an expected size of β
.
|
Although there is no guarantee on the worst-case performance,
we expect that the algorithm achieves an expected cost that
C max for i.i.d.

is at least a constant fraction of
demands.

β emin
emax

K
|

(cid:17)b

⊆

(cid:16)

V. CONSTANT-POWER DEMANDS: SCHEDULING AND
ATTACK STRATEGIES

Our previous scheduling and attack policies were derived
solely for the total-energy demand model. In this section,
we extend these results to demands that have service time
and constant power requirements instead. We ﬁrst provide an
overview for the scheduling problem solutions at the operator
in Section V-A. We then derive new full and limited attacks
via simple modiﬁcations over the previously derived ones
and analyze their performance in Sections V-B and V-C,
respectively.

A. Scheduling at the Operator

∈

When all of the consumers require the same amount of
power per time slot (i.e., pj = p for all j
J), the Prob-
lem (PminS) belongs to a class of “load balancing” problems
that are studied in detail in [23]. In this work, the author shows
that the problem of ﬁnding the optimal schedule is equivalent
to a network ﬂow problem with convex cost. An optimal
solution can be obtained by an iterative algorithm followed
by a rounding step [23]. For arbitrary power requirements,
however, the integral nature of the problem renders it strongly
NP-hard.

Theorem 7: For the constant-power model, Problem (PminS)

is strongly NP-hard.

k

∀

∈

∈

≤

≤

Z +, such that M/4 < bi < M/2,

Proof: We prove the result by a reduction from the 3-
partition problem, which is known to be strongly NP-hard [24].
Consider an instance of the 3-partition problem: we are given
Z +, i = 1, ..., 3m, and a
a set B of 3m elements bi
bound M
i and
(cid:80)
i bi = mM . The problem is to decide if B can be partitioned
into m disjoint sets B1, ..., Bm such that (cid:80)
bi = M
for 1
m. Note that by the range of bi’s, every such
Bk must contain exactly 3 elements. Given an instance of
the 3-partition problem, we construct the following instance
of our problem. There are n = 3m energy demands J, with
aj = 1, dj = m, sj = 1 and pj = bj for all j
J. The
total power requirement of all consumers ((cid:80)
j pj) could be
evenly distributed among the m time slots if and only if the
answer to the 3-partition problem is “yes”. Clearly, such even
distribution, if possible, corresponds to the optimal solution.
Hence, solving Problem (PminS) in this case answers the 3-
partition problem, making Problem PminS strongly NP-hard.

bi∈Bk

∈

[0, pj] for any time-slot t such that (cid:80)

In our simulations, we report the relaxed continuous-version
solution (as given in [23]) as a lower bound to the achieved
cost by the optimal scheduler. In this relaxed version, instead
of a constant power pj, job j can be served by an amount
pjt
t∈[aj ,dj ] pjt =
sjpj. We note that the continuous solution thus obtained can
be furthered rounded to a feasible integral solution to the
original problem. The main challenge, however, is to design
the rounding process to achieve a low approximation factor,
which remains open.

∈

As for online algorithms for the operator, solutions with
performance guarantee are unknown for preemptive demands.
Two scheduling policies were provided for non-preemptive
demands in [12]. We choose the Controlled Release (CR)
policy in our simulations, which is shown to be asymptotically
optimal as average deadline duration approaches inﬁnity [12].
In the CR policy, an active demand is served if the instanta-
neous power consumption in the current time slot is below a
threshold or if it cannot be further delayed. Since each demand
j is processed at most lj times, independent of other demands,
the algorithm has a complexity of O(n). Note that the online
solution is always feasible and provides an upper bound to the
ofﬂine optimal solution that is computationally hard to ﬁnd.

B. Full Attack Strategies

1) Optimal Ofﬂine Full Attacks: In the case of full attacks
(β = 1), the total-energy demand model allowed the attacker
to collapse the allowance of each job into a single time slot,
while in this model, a job j must be served in exactly sj
time slots. However, we can still make use of the results
developed earlier as follows. We break each job j into sj
separate sub-jobs, each having the same arrival time, deadline
and the power requirement as those of j and each should
be served in exactly one time slot. With an entirely forced
schedule on the operator, Problem (PmaxminS) is thus turned
into a maximization problem as before. In essence, to ﬁnd the
cost-maximizing schedule of those new (smaller) jobs, we are
still attempting to form a clique partition of the resulting set

11

of jobs only with the additional constraint that no two subjobs
resulting from a job j can be scheduled in the same clique.

Let ˜J =

j

∈

J : (j, k)

(1, 1), . . . , (1, s1), . . . , (n, 1), . . . , (n, sn)
}
{

be the
extended set of job indices, where (j, k) denotes the kth subjob
J. Our clique partition is now over ˜J.
of the original job j
For any clique K, let JK =
,
}
∈
i.e., the set of jobs that originated the subjobs in K. For any
time-slot t, we deﬁne a locally maximal clique, K t, in this
new setting as the set of subjobs that intersect at t, where at
most one subjob from any job can be included. Following this
deﬁnition, it is clear that the optimal solution indeed contains
a locally maximal clique of subjobs, and, this also holds for
any set of subjobs entirely contained within an interval.

K, for some k

∈

{

}

{

}

≤

sj

mj
{

Let C(k, l,

j∈J ) denote the maximum achievable cost
sj subjobs of job j within interval
by solely scheduling mj
[k, l], which is deﬁned to be 0 if for some j, mj > l
k +
1, or mj > 0 and [k, l] (cid:40) [aj, dj]. Our objective is to ﬁnd
j∈J ). Similar to Algorithm 2, we can construct
C(1, T,
j∈J ) by parsing for
mj
a recursion that computes C(k, l,
}
{
locally maximal cliques in each time-slot z
[k, l]. However,
we observe that, unlike our previous model, a locally maximal
clique in our extended set of jobs does not divide a problem
instance into a unique pair of smaller problems. Instead, all
the potential subproblem-pairs resulting from a given locally
maximal clique should be considered. We then have:

−

∈

C(k, l,

mj
{

j∈J ) =
}

z∈[k,l],m(cid:48)

max
j ∈[0,mj −1]∀j

(cid:34)

(cid:32)

C

(cid:88)

j∈Kz

k,l

(cid:33)

pj

+

(cid:35)

C(k, z

−

m(cid:48)
1,
{

j}

j∈J ) + C(z + 1, l,

mj
{

−

1

−

m(cid:48)

j}

j∈J )

.

(22)

We note that the complexity of this algorithm grows expo-
nentially with the maximum clique size for a given problem
instance, which indicates that the strategy can be computation-
ally expensive for the attacker to use in practice. Due to the
high complexity of the proposed attack, we have considered
a relatively small scale setting in our simulations on ofﬂine
attacks (see Figure 3). An interesting open problem is to design
a more efﬁcient attack strategy that is close to optimal or
rigorously prove that such an attack is hard to ﬁnd.

−

2) Online Full Attacks: In the online case, we consider an
attack similar to Algorithm 3. The attacker again maintains a
set of active jobs in A. In any time-slot t, the attacker checks
if there is a job j such that dj = t+sj
1. Note that to satisfy
its service time requirement, such a job j cannot be further
delayed. If this is the case, all the jobs in A are modiﬁed so
that they will be scheduled for a consecutive number of time
slots starting from t until their service time requirements are
satisﬁed. These jobs are then forwarded to the operator, and
A is the set to the empty set. It is important to notice that,
similar to Algorithm 3, if we only consider the set of jobs
in A, then this strategy enforces the highest possible cost for
those jobs.

Since each demand is processed once, this algorithms has
a complexity of O(n). Similar to Lemma 4, we have the
following observation for the constant-power model.

Algorithm 6 Online Full Attack (constant-power model)
A ← ∅. In any time-slot t,
1: A ← A ∪ {j : aj = t};
2: if dj = t + sj − 1 for some job j ∈ A then
3:
4:
5:

For each job k in A, a(cid:48)
k ← t, d(cid:48)
Forward the set of (forged) jobs in A to the operator;
A ← ∅

k ← t + sk − 1;

Lemma 6: Any clique X in an optimal (ofﬂine) solution that
Ki is

achieves Cmax is a disjoint union of X
non-empty for at most r2 different Ki, where r2 = (smax
smin + 1)

+ 1
It is then straightforward to extend the proof of Theorem 2
to show that the above algorithm achieves at least a fraction
of the optimal ofﬂine cost in the constant-power model.

(cid:16)(cid:108) maxj (lj −sj +1)
minj (lj −sj +1)

Ki, where X

(cid:17)
.

−

∩

∩

(cid:109)

1
rb−1
2

C. Limited Attacks

1) Ofﬂine Limited Attacks: To derive an ofﬂine limited
attack in the constant-power model, we consider an algo-
rithm similar to Algorithm 4. The optimal ofﬂine algorithm
discussed in the previous section is ﬁrst applied to ﬁnd the
optimal clique partitioning of sub-jobs when there is no budget
constraint. Greedy algorithms are then applied twice; once to
choose a set of cliques to fully compress, and to choose a
set of sub-jobs within the ﬁrst unchosen clique on the list,
and the choice that results in a higher cost is adopted. In
both cases, we require the total number of sub-jobs chosen
to be bounded by βn. This ensures that the total number of
modiﬁed jobs is also bounded by βn. Since ﬁnding the optimal
clique partitioning may take exponential time in the worst
case, this algorithm also has an exponential time complexity.
Let savg = ((cid:80)
j sj)/n denote the average service time
requirement. Assume C(E) = Eb, b
1. Since there
are (cid:80)
j sj sub-jobs in total and βn of them are compressed,
the guaranteed performance of this
following Theorem 5,
(cid:16) β
attack readily becomes C 1
maxmin(β)
savg
2) Online Limited Attacks: We then modify Algorithm 6 to
obtain an online limited attack as we did for the total-energy
model. The attacker maintains the set of active jobs in A, and
samples a fraction β of them to be modiﬁed, saved in A(cid:48). At
any time t, if dj = t + sj
1 for some job j in A, all the
job in A(cid:48) are modiﬁed as in Algorithm 6. The algorithm also
checks the two boundary conditions as we explained before
to ensure that all the budget is used and no more. Assume
C(E) = Eb, b
1. Similar to Algorithm 5, this
algorithm also has a complexity of O(n). As in the total-
energy model, although there is no worst-case guarantee, we
expect that this simple attack obtains an expected cost that is at
C max
least a constant fraction of C maxmin(β)
for i.i.d. demands and when sj is a constant for all j.

β pmin
pmax

Cmax.

R, b

R, b

(cid:17)b

(cid:17)b

≥

≥

−

≥

≥

∈

∈

(cid:16)

1
2

VI. NUMERICAL RESULTS

In this section, we provide numerical results that illustrate
the impact of stealthy attacks under various settings. In this
section, unless stated otherwise, the job arrivals are simulated

12

as a Poisson arrival process with mean 3. We use a quadratic
cost function C(E) = E2 in all of our simulations.

Full Attacks: In Figure 3, we compare the performance of
a non-compromised smart grid, a fully-compromised smart
grid and the “dumb” grid (where all jobs are immediately
scheduled upon their arrival), for both the total-energy model
and the constant-power model, for a total of 20 jobs. All
the job slackness are i.i.d. exponential random variables,
as well as the service time intervals. In the constant-power
model, the job slackness mean is varied between 1 and 6, and
the service time mean is ﬁxed to 2. The power requirement
per time slot, for each job, is uniformly distributed in the
interval [1, 5]. For comparison purpose, for each job generated
in the constant-power model, a job with the same arrival,
slackness, and total power requirement is generated for the
total-energy model. The plots report the average performance
of both systems over 10 trials. For the total-energy model,
Cmin, C min, Cbase, C max, and Cmax correspond to the cost
achieved by Algorithm 1, the AVR algorithm, the baseline
cost (5), Algorithm 3, and Algorithm 2, respectively. For the
constant-power model, they correspond to the lower bound
obtained from the continuous relaxation of the minimization
problem for the operator, the cost obtained by the Controlled
Release (CR) policy [12],
the cost
obtained by Algorithm 6, and that by the optimal ofﬂine full
attacks discussed in Section V-B1, respectively.

the baseline cost (6),

We observe that, as the job slackness mean increases, for
both models, further scheduling opportunities are offered to
the legitimate operator, and hence further savings in the total
cost are attained if the smart grid is not compromised. In
the presence of an attacker, however, a similar ﬂexibility
is available to the attacker, and accordingly the severity of
the attack increases as the job slackness mean increases.
We also observe that the uncompromised total-energy system
outperforms the constant-power model, in terms of total cost,
due to the increased job scheduling ﬂexibility in the former.
For the same reason, attacks are more harmful for this model
as well. In the total-energy model, when compared to the costs
paid by the regular grid, an ofﬂine (online) attack causes an
increase in cost by 154% (136%) with a job slackness mean
of 1 and up to 220% (191%), while the expected cost to be
paid for an uncompromised system should, in fact, decrease by
values ranging in 200%
2500%. A similar comparison could
be drawn in the constant-power model. Therefore, overall, the
unprotected smart grid simulated here, not only does it fail to
meet the cost savings prospected in a smart grid, it performs
far worse than the current electric grid.

−

Online Limited Attacks: We now investigate the performance
of online limited attacks and compare them with online full
attacks. We assume that the operator schedules the set of
(partially) modiﬁed demands using the AVR algorithm for the
total-energy model, and the CR algorithm for the constant-
power model. Since online attacks have lower complexity
than their ofﬂine counterparts, we consider a larger setting
with 100 jobs and each simulation is repeated 100 times. We
consider the same power requirement, service time, and inter-
arrival time distributions as before. Theorem 2 and Theorem 3

13

(b)

(a)

Fig. 5: Performance of ofﬂine limited attacks in the total-energy
model with a varying β, for 50 jobs. In (a), energy demands are
uniformly distributed on [1, 20], the mean interarrival time is 5,
and the mean job allowance is 40. In (b), 50 identical jobs with
pj = 5, lj = 50 are generated. The interarrival times are all set to
Ma.

Also, observe that using a simple greedy algorithm,
the
attacker is immediately capable of achieving a cost arbitrarily
close to Cbase for our sample, with a chance of altering only
5 jobs out of 50.

Finally, we study ofﬂine limited attacks in the total-energy
model
in a more controlled experiment. We generate 50
identical demands, with each requiring a 5 energy units
and an allowance of 50. The job interarrival times are all
set to one value, denoted by Ma, which varies between 1
and 10. Figure 5(b) shows C maxmin/Cmax under varying
values of β. This enables us to gain more insights on the
growth of Cmaxmin with respect to β, and how this growth
is affected by the clique densities. As shown in the ﬁgure,
when Ma = 1, with our chosen parameters, a single clique
of jobs could be formed to achieve the maximum cost, and
hence, in accordance with our theoretical results, the attacker
could achieve approximately β2 of the maximum achievable
cost. As Ma increases, the growth of C maxmin/Cmax with β
approaches a linear trend. The reason is that as Ma increases,
the size of the optimal clique partition of jobs increases, having
approximately equally sized cliques. Hence the maximum
cost decreases so does the contribution of each clique to the
maximum cost.

VII. OBSERVATIONS AND SUGGESTIONS

From our analytical studies and simulation results, we
make several observations and suggestions to the operator for
thwarting the new type of attacks that we consider in the paper.
Information Hiding: We observe that the attacker’s capability
is signiﬁcantly constrained by the amount of information it has
regarding the operator and the demand patterns. In particular,
to derive the best β, the attacker needs to know the intrusion
detection algorithm and the key parameters such as the sig-
niﬁcance level used by the operator. Moreover, the attacker
requires some prior information about the demands to make
best use of its budget, such as the number of demands and
the ranges of their values. Therefore, one efﬁcient approach
to reduce the damage is to properly hide these information
from the attacker, e.g., by introducing noise into the data and
algorithms.
Intrusion Detection: We suggest to develop robust intrusion
detection schemes that can strike a balance between the poten-
tial loss from attacks and the cost of detection. In particular, we
suggest to develop a better statistical modeling of time-elastic

(a) total-energy model

(b) constant-power model

Fig. 3: Comparison between the performance of a fully-compromised
smart grid (ofﬂine and online attacks),
the current grid, and an
un-compromised smart grid (ofﬂine and online scheduling), under
varying job allowance means.

xi ∈ [0, 40]

xi ∈ [0, 40]

xi ∈ [0, 10](10%), [40, 50](90%)
(a) total-energy model

xi ∈ [0, 10](10%), [40, 50](90%)
(b) constant-power model

Fig. 4: Performance of a partially-compromised smart grid under
online limited attacks with various values of β.

together indicate that a higher cost can be expected if most
jobs have large job slackness. To conﬁrm this, we consider two
job slackness distributions, (1) a uniform distribution between
[0,40], and (2) a mixture of two types of demands, where
90% of demands have high elasticity with their slackness
uniformly distributed in [40,50], and 10% of demands are
more emergent with their slackness uniformly distributed in
[0,10]. The attacks were conducted with β values ranging
between 0 and 1. Figure 4 reports our results for these attacks,
where the values for the corresponding online full attacks and
the baselines are also plotted for reference. We observe that
large job slackness can indeed enforce higher cost. For both
models, even with a low fraction of jobs to be modiﬁed, the
attacker still causes signiﬁcant harm, compared to the un-
compromised system. Moreover, the attacker becomes capable
of driving the system to perform worse than its nominal point
(the regular grid) with β as low as 0.4 and 0.2 for the total-
energy model and the constant-power model, respectively.

maxmin and C 2

Ofﬂine Limited Attack: Figure 5(a) sheds more focus on
the performance bounds of ofﬂine limited attacks in the total-
energy model, where C 1
maxmin denote the
lower bound and the upper bound derived in Section IV-C1,
respectively. The simulation sample is composed of 50 jobs.
The energy requirements were uniformly distributed on [1, 20]
while the mean job allowance was set to 40. The results
are averaged over 5 trials. As shown, with the increased
allowance mean, the obtained clique partitions become denser
and therefore the upper and lower bounds become tighter.

12561000200030004000500060003 4Job slackness meanAverage total cost0 CmaxCmaxCbaseCminCmin1256100020003000400050003 4Job slackness meanAverage total cost0 CmaxCmaxCbaseCminCmin00.20.40.60.810123x 104βAverage total cost  CmaxCbaseCminCmaxmin00.20.40.60.81200040006000800010000βAverage total cost  CmaxCbaseCminCmaxmin00.20.40.60.810246x 104βAverage total cost  CmaxCbaseCminCmaxmin00.20.40.60.8100.511.52x 104βAverage total cost  CmaxCbaseCminCmaxmin0.10.20.30.40.50.60.70.80.900.511.522.533.544.5x 104βAverage total cost CmaxC2maxminCbaseCminC1maxmin0.10.20.30.40.50.60.70.80.90.20.40.60.81β/Cmaxmin  Cmax0 Ma = 1Ma = 2Ma = 5Ma = 10demands, and study advanced stream data mining algorithms
that can deal with the high dimension of the demand data
set. Moreover, as we discussed above, it is useful to develop
intrusion detection algorithms that can make it hard for the
attacker to derive efﬁcient parameters to use.
Load Management: We note that the scheduling algorithm
used by the operator has a big impact on the total energy
cost, especially when the attacker can only compromise a small
number of demands. We have provided efﬁcient solutions for
the operator in the total-energy model, but better solutions
are needed for the constant-power model and more general
demand models. For instance, Figure 4 indicates that online
limited attacks are more efﬁcient in the constant-power model.
We believe that this is due in part to the poor performance
of the CR algorithm in our setting. Moreover, it is important
to develop robust algorithms that can provide a guaranteed
performance even when part of demands have been modiﬁed
by adversaries.
Robust and Adaptive Defense: We suggest to develop robust
defense algorithms to identify the set of most critical channels
(or smart meters) to protect. From our analysis, it is clear that
those demands (or a set of overlapping demands) with highest
power requirement and maximum time elasticity are most
beneﬁcial to the attacker, due to the large gap between Cmax
and Cmin if we consider these demands only. When these
demands are mostly generated by a given subset of customers,
the corresponding links can be protected to efﬁciently reduce
damage. In the face of more advanced attackers, however,
a ﬁxed defense strategy is insufﬁcient, as the attacker can
always identify the weakest link in the system. Therefore, it
is important to study adaptive defense strategies in the face of
strategic attackers.

VIII. CONCLUSION

In this paper, we have studied the performance of the smart
grid, in terms of energy efﬁciency, in the presence of an active
attacks on the system. In the presence of a limited intrusion
detection mechanism at the grid operator, we have proposed
optimal scheduling and undetectable attack strategies. We have
derived lower and upper bounds on the maximum achievable
cost by an attacker with low complexity, online algorithms.
Overall, our theoretical analysis and numerical results show
that the time-elasticity of electric load, when exploited by
malicious attacks, could result in costs signiﬁcantly higher than
those expected for both the smart grid and the current electric
grid, motivating the need for stronger intrusion detection and
defense strategies for grid operators.

REFERENCES

[1] Y. Abdallah, Z. Zheng, N. B. Shroff, and H. E. Gamal, “On the
efﬁciency-vs-security tradeoff in the smart grid,” in Proc. of IEEE CDC,
2012.

[2] K. Moslehi and R. Kumar, “A reliability perspective of the smart grid,”
IEEE Transactions on Smart Grid, vol. 1, no. 1, pp. 57–64, 2010.
[3] T. Lui, W. Stirling, and H. Marcy, “Get smart,” IEEE Power and Energy

Magazine, vol. 8, no. 3, pp. 66–78, 2010.

[4] P. McDaniel and S. McLaughlin, “Security and privacy challenges in the
smart grid,” IEEE Security & Privacy, vol. 7, no. 3, pp. 75–77, 2009.

14

[5] Y. Liu, P. Ning, and M. K. Reiter, “False data injection attacks against
state estimation in electric power grids,” in Proc. of ACM CCS, 2009.
[6] O. Kosut, L. Jia, R. J. Thomas, and L. Tong, “Malicious data attacks
on the smart grid,” IEEE Transactions on Smart Grid, vol. 2, no. 4, pp.
645–658, 2011.

[7] L. Jia, R. J. Thomas, and L. Tong, “Impacts of malicious data on
real-time price of electricity market operations,” in Proc. of Hawaii
International Conference on System Science, 2012.

[8] T. T. Kim and H. V. Poor, “Strategic protection against data injection
attacks on power grids,” IEEE Transactions on Smart Grid, vol. 2, no. 2,
pp. 326–333, 2011.

[9] D. Grochocki, J. H. Huh, R. Berthier, R. Bobba, W. H. Sanders, A. A.
C´ardenas, and J. G. Jetcheva, “Ami threats, intrusion detection require-
ments and deployment recommendations,” in IEEE SmartGridComm,
2012.

[10] R. Berthier, W. H. Sanders, and H. Khurana, “Intrusion detection
for advanced metering infrastructures: Requirements and architectural
directions,” in IEEE SmartGridComm, 2010.

[11] F. M. Cleveland, “Cyber security issues for advanced metering in-
frastructure,” in IEEE Power and Energy Society General Meeting -
Conversion and Delivery of Electrical Energy in the 21st Century, 2008.
[12] I. Koutsopoulos and L. Tassiulas, “Optimal control policies for power
demand scheduling in the smart grid,” IEEE Journal on Selected Areas
in Communications, vol. 30, no. 6, pp. 1049–1060, 2012.

[13] W. Wang and Z. Lu, “Cyber security in the smart grid: Survey and
challenges,” Computer Networks, vol. 57, pp. 1344–1371, 2013.
[14] J. M. Hendrickx, K. H. Johansson, R. M. Jungers, H. Sandberg, and
K. C. Sou, “Efﬁcient computations of a security index for false data
attacks in power networks,” IEEE Transactions on Automatic Control,
vol. 59, no. 12, pp. 3194–3208, 2014.

[15] D. Deka, R. Baldick, and S. Vishwanath, “Optimal hidden scada attacks

on power grid: A graph theoretic approach,” in Proc. of ICNC, 2014.

[16] L. Xie, Y. Mo, and B. Sinopoli, “False data injection attacks in electricity

markets,” in Proc. of SmartGridComm, 2010.

[17] Y. Zhao, A. Goldsmith, and H. V. Poor, “Fundamental limits of cyber-
physical security in smart power grids,” in Proc. of IEEE CDC, 2013.
[18] R. Berthier and W. H. Sanders, “Intrusion detection for advanced
metering infrastructures: Requirements and architectural directions,” in
IEEE PRDC, 2011.

[19] M. A. Faisal, Z. Aung, J. R. Williams, and A. Sanchez, “Data-stream-
based intrusion detection system for advanced metering infrastructure
in smart grid: A feasibility study,” IEEE Systems Journal, vol. 9, no. 1,
pp. 31–44, 2015.

[20] F. Yao, A. Demers, and S. Shenker, “A scheduling model for reduced

cpu energy,” in Proc. of IEEE FOCS, 1995, pp. 374–382.

[21] D. Gijswijt, V. Jost, and M. Queyranne, “Clique partitioning of inter-
val graphs with submodular costs on the cliques,” RAIRO-Operations
Research, vol. 41, no. 03, pp. 275–287, 2007.

[22] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduction

to Algorithms. The MIT Press, 2009.

[23] B. Hajek, “Performance of global load balancing by local adjustment,”
IEEE Transactions on Information Theory, vol. 36, no. 6, pp. 1398–
1414, 1990.

[24] M. Garey and D. Johnson, Computer and intractability: A Guide to the

Theory of NP-Completeness. W. H. Freeman, 1979.

[25] S. Chen, Y. Ji, and L. Tong, “Large scale charging of electric vehicles,”

in IEEE Power and Energy Society General Meeting, 2012.

[26] V. Robu, E. H. Gerding, S. Stein, D. C. Parkes, A. Rogers, and
N. R. Jennings, “An online mechanism for multi-unit demand and
its application to plug-in hybrid electric vehicle charging,” Journal of
Artiﬁcial Intelligence Research, vol. 48, pp. 175–230, 2013.

[27] L. Chen, N. Li, L. Jiang, and S. H. Low, “Optimal demand response:
problem formulation and deterministic case,” Control and Optimization
Methods for Electric Smart Grids, A. Chakrabortty and M. D. Ili´c (ed.),
Springer, 2012.

[28] A. Gupta, R. Krishnaswamy, and K. Pruhs, “Online primal-dual for non-
linear optimization with applications to speed scaling,” in 10th Workshop
on Approximation and Online Algorithms (WAOA), 2012.

A. Discussion of the Model

APPENDIX

Demand-response scheme: Our model is built upon the opti-
mization framework proposed in [12]. Similar models where

customers submit their total energy demands together with
their time elasticity have also been adopted in some recent
works on electric vehicle charging [25], [26]. We choose this
model for the following reasons. First, various studies indicate
that customers often prefer simpler pricing schemes, e.g., ﬂat-
rate pricing. Requiring every customer to submit a bidding
curve as in more advanced pricing schemes may be difﬁcult
to apply in practice. Second, current pricing based demand-
response schemes cannot model the time elasticity of electric
load explicitly, which, however, can be utilized to reduce
electricity cost and eventually beneﬁt both the operator and
the customers even under ﬂat-rate pricing. It is an interesting
problem to extend our studies to more sophisticated demand-
response schemes where customers are more actively involved.

Forecast at the operator: The demand/load forecast ca-
pability of the system operator could further limit stealthy
attacks, which is not considered in the current model. In the
extreme case when the operator knows everything about the
future load, an attacker cannot modify any demand without
of being detected. In practice, however, the system operator
only has a rough estimate about future load distribution, which
leaves room to stealthy attacks. It is an interesting problem
to properly model the forecast capability of the operator for
time-elastic electric load, and extend our framework to design
stealthy attacks that can maximize energy cost while ensuring
the forged demands to be still consistent with the load forecast.

Capacity constraint: In our current model, we put no limit on
the total energy served in each time slot to study the worst-case
damage that a stealthy attacker can possible cause. This is also
practical when there is always sufﬁcient energy supply and the
available capacities of distribution lines or transformers exceed
the peak load. When the system is under congestion, however,
both the operator and the attacker face more challenging
optimization problems, especially in the online setting. In fact,
when there is zero information on future arrivals, the only
solution, if there is one, that can ensure all the demands are
served by their deadlines is the Earliest Deadline First (EDF)
policy, where jobs with earliest deadlines are served as fast as
possible subject to the capacity constraint. To obtain a more
useful problem formulation in this new setting, one approach
is to relax the deadline constraints of jobs, and introduce a
utility function for customers, as we further elaborate below.

Beyond energy cost: We have considered two demand models
with different levels of ﬂexibility in this work. It is possible
to consider more general demand models as in [27], where
for each customer, there is an upper and a lower bound on the
energy served in each time slot, together with a utility function
deﬁned over the resulting service vector. Alternatively, we can
also relax the deadline constraints by introducing a penalty for
unsatisﬁed demands when the system is congested. A reason-
able objective for the system operator is then to maximize the
welfare, in terms of the total customer utility minus the total
energy cost. Such ﬂexibility provides further opportunity for
the operator to improve the energy efﬁciency, which, however,
may also be exploited by malicious attackers to harm both
the system and the customers. It is interesting to extend our

15

stealthy attack algorithms to study the fundamental tradeoffs
involved in this more general setting.

B. Time-Dependent Cost Functions

1) Scheduling at

A time-invariant energy cost curve has been assumed in
Section IV and Section V. Due to the dynamics on both
demand and supply, especially the uncertainty introduced by
the penetration of renewable energy, energy cost can exhibit
signiﬁcant time variations. It is therefore important to study the
impact of time-dependent cost functions on both the operator
and the attacker. In this section, we show that most of our
previous results can be readily extended to strictly convex and
monotone cost function Ct(
·

the Operator: We ﬁrst note that

the
ofﬂine YDS algorithm can be extended to time-dependent
cost functions by replacing the notion of energy intensity
introduced in Section IV-A by energy derivative deﬁned below.
For simplicity, we further assume that Ct(
) has continuous
·
derivative, Ct(0) = 0, and C (cid:48)
t(0) = 0, for any t. For the
received (forged) demands J (cid:48) and an time interval [k, l], let
S
denote a locally optimal schedule with minimum energy cost
for jobs entirely contained in [k, l], which is unique by our
assumptions on Ct(˙). We deﬁne the energy derivative of the
interval to be

) that can vary over time.

γ(

J (cid:48)(k, l)) = min
I
t∈[k,l]

C (cid:48)(ES (t)).

(23)

That is, the energy derivative is deﬁned as the minimum
marginal cost of any time slot in [k, l] in the locally optimal
schedule. A critical interval is then deﬁned as an interval with
the maximum energy derivative. We observe that from our
), each time slot in a critical interval
assumptions about Ct(
·
must have the same marginal cost. Moreover, by a similar
argument as in [20], it can be shown that there is an optimal
schedule for all the jobs, where jobs in a critical interval is
scheduled exactly as its locally optimal schedule. It follows
that Algorithm 1 can be extended to get an optimal ofﬂine
schedule for time-dependent cost by replacing energy intensity
by energy derivative.

R, b

∈

We further note that when Ct(E) = ctEb, b

1,
there is an online scheduling algorithm for the total energy
model that achieves a competitive ratio of O(bb) [28], as-
suming that upon the arrival of any job j, the cost functions
up to dj are known to the operator. The algorithm extends
AVR and looks for a minimum cost allocation for each new
request on its arrival, given the previous scheduled requests
while ignoring the future arrivals.

≥

2) Scheduling at the Attacker: For time-dependent cost, we
show that Algorithm 2 can be readily extended to obtain an
optimal ofﬂine attack under the total energy model. First, the
optimal attack still corresponds to a clique partition of the set
of jobs since Lemma 1 is proved for the general case and
Lemma 2 only depends on Lemma 2, although in this new
setting, all the jobs in a clique should be compressed to a
time slot that achieves the maximum cost among all the time
slots where the job intervals intersect. For any clique K, let tK
denote such a time slot. Deﬁne the marginal cost of K as the
derivative of the cost function at tK after serving all the jobs

in K. Lemma 3 can then be proved for time-dependent cost
by considering the clique Ki with the maximum marginal cost
in a clique partition. If Ki is not locally maximal at tKi, then
a job j that intersects tKi can be moved from another clique
to Ki without decreasing the total cost. It also follows that
Theorem 1 still holds. Hence, Algorithm 2 can be extended to
time-dependent cost functions.

16

∈

≥

R, b

Since Algorithm 3 is derived from Algorithm 2, it can also
be extended to derive online full attacks under time-dependent
cost and the total energy model. Moreover, the performance
bound in Theorem 2 can be generalized as follows. Assume
Ct(E) = ctEb, b
1. Deﬁne cmax = maxt ct and
cmin = mint ct. Then the online algorithm achieves at least a
fraction cmin
1
rb−1 of the ofﬂine optimal cost.
cmax

For limited attacks, we remark that Algorithm 4 can be
readily extended to time-dependent cost while achieving the
same lower bound as (20). On the other hand, the upper bound
does not apply anymore as Theorem 6 does not hold in this
new setting. For online limited attacks, Algorithm 5 can be
extended to time-dependent cost. Finally, similar results can
be derived for the constant-power model as well.

C. Algorithm 2 (Ofﬂine Full Attacks)

For all k

∈

[1, T ], set the initial condition
(cid:19)

(cid:18) (cid:88)

C(k, k) = C

ej

.

(24)

j∈IJ (k,k)

With increasing interval width,

intervals
[0, T ], and apply the following dynamic

iterate over all

[k, l], k
≤
program:

l, k, l

∈

1) Compute

C(k, l) = max
z∈[k,l]

C

(cid:34)

(cid:18) (cid:88)

j∈Kz

k,l

(cid:19)

ej

+C(k, z

−

1)+C(z+1, l)

(cid:35)

with z∗ achieving the optimality.

2) Update the clique partition
(cid:40)

(k, l) =

Q

,
∅
Q

if
(k, z∗

J (k, l) =
I
K z∗
1)
−

,
∅
k,l ∪ Q

∪

(z∗ + 1, l), otherwise.

