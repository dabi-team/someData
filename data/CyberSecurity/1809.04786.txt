Assessing the Effectiveness of Attack Detection at a
Hackfest on Industrial Control Systems

Sridhar Adepu and Aditya Mathur
iTrust, Center for Research in Cyber Security
Singapore University of Technology and Design
Singapore
Email: adepu sridhar@mymail.sutd.edu.sg, aditya mathur@sutd.edu.sg

8
1
0
2

p
e
S
3
1

]

R
C
.
s
c
[

1
v
6
8
7
4
0
.
9
0
8
1
:
v
i
X
r
a

Abstract—A hackfest named SWaT Security Showdown (S3)
has been organized consecutively for two years. S3 has enabled
researchers and practitioners to assess the effectiveness of meth-
ods and products aimed at detecting cyber attacks launched
in real-time on an operational water treatment plant, namely,
Secure Water Treatment (SWaT). In S3 independent attack teams
design and launch attacks on SWaT while defence teams protect
the plant passively and raise alarms upon attack detection.
Attack teams are scored according to how successful they are
in performing attacks based on speciﬁc intents while the defense
teams are scored based on the effectiveness of their methods to
detect the attacks. This paper focuses on the ﬁrst two instances of
S3 and summarizes the beneﬁts of hackfest and the performance
of an attack detection mechanism, named Water Defense, that
was exposed to attackers during S3.

Index Terms—Attack Detection, Capture-The-Flag (CTF),
Cyber-physical Attacks, Cyber-Physical Systems, Cyber Security,
Industrial Control Systems, Hackfest, Water Defense, Water
Treatment Plant.

I. INTRODUCTION

Industrial Control Systems (ICS) [39] considered in this
work are complex interconnected systems deployed to control
and monitor, among others, critical infrastructures such as
water treatment and electric power systems [17]. The increase
in successful cyber attacks on public infrastructure [14], [29],
[48], and other mostly unsuccessful attempts [25], has raised
the importance of deploying cyber defense mechanisms in
ICS. Attackers are often bypassing the defense mechanisms
(prevention and detection) by exploiting software and hard-
ware vulnerabilities or through social engineering. Therefore,
it becomes important to look for ways of detecting process
anomalies in an ICS caused by an attacker who has gained
unauthorized entry. Water Defense [5], referred to in this paper
as WD, is one such anomaly detection mechanism.

The technology underlying WD has been described and
experimentally evaluated by the authors [1], [4]. This pa-
per describes an independent supplementary assessment of
WD based on attacks launched by teams of attackers. The
assessment was carried out over two consecutive years in
an event labeled “hackfest (S3)” [9], [35], [36]. The event
was organized by a team of faculty, students, and staff at
the Singapore University of Technology and Design. Several

attack and defense teams [9], [35], [36] participated in S3.
The attack teams designed and launched attacks on SWaT–
the system used for assessment of WD by the authors. This
paper is focused on analysis of data used for assessing the
performance of WD in detecting process anomalies resulting
from the attacks. Details of S3 are in Section IV.

The following two research questions were the focus of S3

with respect to WD.

RQ1: How do attackers compromise the security of an ICS?

RQ2: How effective is WD in detecting attacks launched by
independent attack teams?

Contributions: This paper (a) summarizes the performance
of the WD mechanism during two consecutive S3 events
and (b) reports on observations and lessons learned from
the experience; all attacks launched during S3 are reported.
Information presented in this work will likely be valuable to
researchers attempting to assess the performance of process
anomaly detection methods other than WD. A complete list
of the invariants (see Section III) used in WD, and the S3
dataset, are also available for download [41].

Organization: The remainder of this paper is organized as
follows. Section II contains material to aid in understanding the
remainder of this paper. An overview of the WD is presented in
Section III. Section IV contains a description of S3. Preparation
for the event is described in Section V. Attacks performed by
attacker teams during both S3 events are in Section VI. Results
from the events are presented in Section VII. Section VIII
returns to the research questions mentioned above and answers
them with respect to the data generated during S3. Section IX
is a summary of the work. Conclusions based on S3 are
summarized in Section X.

II. PRELIMINARIES AND BACKGROUND

This section is a brief introduction to Industrial Control
Systems (ICS) [39] in the context of SWaT. An example
illustrates the nature of a cyber attack on SWaT and its
potential impact on system response.

A. Industrial Control Systems

This work was supported by research grant 9013102373 from the Ministry
of Defense and NRF2014-NCR-NCR001-040 from the National Research
Foundation, Singapore.

An ICS [39] consists of physical, control, and network
devices (Figure 1). Physical devices include sensors and actua-

 
 
 
 
 
 
tors. Control devices include Programmable Logic Controllers
(PLCs), Supervisory Control and Data Acquisition (SCADA)
workstations, and Human-Machine-Interface (HMI) devices.
Network devices include network switches and access points.
The PLCs, SCADA, and HMI monitor and control the physical
process. Communication channels in the network act as a
bridge between the physical process and the control devices.
Communication channels communicate the state of physical
process to controllers and control signals to the actuators.
PLCs receive data from sensors, compute control actions, and
apply these actions to speciﬁc devices. The PLCs in an ICS
can be viewed collectively as a distributed control system that
transforms the state of the process through the use of sensors
and actuators.

Fig. 1. High level view of an ICS.

B. SWaT: Architecture and components

SWaT [30], [40] is a testbed for water treatment. It is used
to investigate the response to cyber attacks and experiment
with novel designs of defense mechanisms such as the ones
described in [3]. The architecture and components in SWaT
are described next.

Stages in SWaT: As shown in Figure 2, SWaT consists of
six stages labeled Stage 1 through Stage 6. Each stage is
controlled by its own set of PLCs. Stage 1 controls the inﬂow
of water to be treated by opening or closing a valve that
connects the inlet pipe to the raw water tank (T101). Water
from the raw water tank is pumped via a chemical dosing
(Stage 2) station to another Ultraﬁltration (UF) feed water
tank (T301) in Stage 3. In Stage 3 a UF feed pump sends
water, via the UF unit, to a Reverse Osmosis (RO) feed water
tank (T401) in Stage 4. In Stage 4 an RO feed pump sends
water through an ultraviolet dechlorination unit controlled by
a PLC. Differential pressure sensors in Stage 3 measure the
pressure drop across the UF unit. A backwash cycle is initiated
when the pressure drop exceeds 0.4 bar indicating that the
membranes need immediate cleaning. Stage 5 contains a PLC
to control the Reverse Osmosis (RO) unit that further ﬁlters
the water using a 2-stage RO process. The output of the RO
unit enters storage tanks T601 and T602 in Stage 6. Tank T601
contains the reject from RO and is used to clean the UF unit
using a backwash process. Water in tank T602 contains the
permeate which is recycled into tank T101 in Stage 1.

Sensors and actuators: SWaT contains 42 sensors and actu-
ators across the six stages. These include sensors that relate
to the dynamics of the process such as water level in tanks,
ﬂow indicators, and pressure indicators as well as those
for measuring chemical properties of water including pH,
conductivity and hardness. Each PLC has its own set of sensors
and actuators connected through a ring network. Thus, when
a PLC needs to obtain state information from another PLC,
it must request such information via a suitable command;
the requested data is sent over level 1 network as shown in
Figure 3.

Communications: Figure 3 shows the architecture of the
communications infrastructure in SWaT. Each PLC obtains
data from sensors associated with the corresponding stage,
and controls pumps and valves in its domain. Flow of water
across various stages is controlled through opening and closing
of valves and turning pumps ON or OFF. Level sensors in
each tank enable the PLCs to decide when to turn a pump
ON or OFF. Several other sensors are available to check on
the physical and chemical properties of water ﬂowing through
the six stages. PLCs communicate with each other through a
separate network. Communications among sensors, actuators,
and PLCs can be via either wired or wireless links controlled
manually. Both wired and wireless networks connect PLCs
to the physical process and to the HMI and engineering
workstation, i.e. the SCADA workstation.

The control network is connected to the SCADA worksta-
tion [40] through a wired network using a 16-port switch. The
PLCs and SCADA workstation are also connected through
a wireless network conﬁgured using star topology. Switches
located at each stage enable the use of either wired or wireless
communications. The communications network is layered into
two levels. For each PLC, level 0 refers to the communication
layer between sensors, actuators and the PLC. Level 0 net-
work is implemented as a “device level ring” [9], [43] which
includes a Remote IO (RIO) device. The RIO is connected
to the physical sensors and actuators. Monitoring and control
information is exchanged between the PLC, sensors, and
actuators across a Distributed Logical Router (DLR). Level 1
refers to the communication layer among PLCs. This layer
is implemented in a star topology and includes a SCADA
workstation, an HMI, and a Historian.

Controllers (PLCs): SWaT is equipped with Allen Bradley
ControlLogix PLCs. Therefore, some of the attacks described
in the remainder of this paper require consideration of the
protocols used by EtherNet/IP [32] for Allen Bradley PLCs.
SCADA software is developed with tools from Rockwell
automation [8].

Attack detection mechanisms: As shown in Figure 3, SWaT
contains four attack detection mechanisms D1, D2, D3, and
Orthogonal Defense Mechanism (ODM) [6]. D1 is based on
a modiﬁed version of the open source Bro intrusion detection
tool [10]. D2 is a set of three commercially available intrusion
detection systems that use a mix of process dynamics and

Fig. 2. Six stages in SWaT with corresponding PLCs, sensors, and actuators; Five water storage tanks as shown are labeled Txxx. Water level in each tank
is measured by the corresponding level indicator labeled as LITxxx. AITxxx, FITxxx, and DPITxxx measure, respectively, chemical properties of water, ﬂow
rate in a pipe, and differential pressure across the ultraﬁltration unit. Pxxx denote pumps at various stages.

controls the motorized valve MV101. Similarly, PLC1 receives
LIT301 readings from PLC3 and controls pump P101.

Tanks T101 and T301 have four markers each labeled Low
(L), Low Low (LL), High (H), and High High (HH). Each
marker corresponds to a speciﬁc value of water level in the
tank. These markers are used by the corresponding PLCs to
control the states of motorized valves and pumps. Thus, for
example, when the water level in T101 reaches L, PLC1 opens
MV101 and closes it when the level reaches H. When water
level in T301 reaches L, PLC1 turns P101 ON and turns it OFF
when the level reaches H. The following example illustrates the
impact of compromising level sensor LIT101 with the intent
of damaging pump P101.

Example: Consider an attack where the attacker’s intention
is to underﬂow T101 and damage P101 by making it run
without any incoming water. The attack is launched on LIT101
with Stage 1 in the following state: LIT301: 955mm, MV101:
Closed, P101: OFF; UF is operational and therefore water
level in tank T301 is decreasing. Assume now that the attacker
sets LIT101 reading to a constant value of 790mm. In this
attack even though the water level
in T101 is changing
(decreasing), PLC1 receives a constant value. After a while
when LIT301 reaches L, pump P101 is turned ON by PLC1.
However, the actual water level in tank T101 is lower than
L, say at LL. This leads to the outﬂow from the pump being
reduced to less than the intended ﬂow rate. Pump P101 runs
dry when there is no water in T101 and will eventually get
damaged unless a corrective action is taken.

Figure 4 shows the water level in tank T101 during the
attack. It can be observed that the outﬂow increases gradually
when the attack is removed. Note that the sudden drop in the
value of LIT101 soon after attack removal corresponds to the
fact that the PLC begins to receive the correct measurement

Fig. 3. Communications structure of SWaT. D1, D2, and D3 denote sets
of defense mechanisms in SWaT; ODM (Orthogonal Defense Mechanism) is
independent of these mechanisms.

other techniques for anomalous process behavior [12], [24],
[27]. D3 (WD) sits inside PLCs and implements a distributed
attack detection mechanism that relies exclusively on process
dynamics [1]. The ODM has direct access to sensors and anal-
yses the data received for the existence of process anomaly.

C. An illustrative attack on SWaT

Consider Stage 1 of SWaT in Figure 2. This stage has a
motorized valve labeled MV101 which, when open, causes
water to ﬂow into tank T101. The inﬂow into T101 is measured
by ﬂow meter FIT101 and the water level by a level sensor
labeled LIT101. Pump P101 sends water to the next stage.
Flow meter FIT201 measures the outﬂow of water from
Stage 1 to Stage 3. PLC1 receives the LIT101 reading and

Raw WaterinputUltrafiltrationChemicaldosingDechlorinationPLC1Reverse OsmosisPLC5PLC4PLC3PLC2BackwashPLC6S={LIT101, FIT101}A={MV101, P101}S={AIT202}A={MV201}S={LIT301, FIT301,  DPIT301}A={MV201, MV302, P301}S={LIT401, FIT401}A={ P401}S={FIT501, FIT502, AIT501}A={MV501, P501}T101T301Storage tanks:T401[No storage]FromT501FromT502MV201P101MV101, FIT101P6Water fromexternalsourceDPIT301LIT301FIT301P301MV302P302Stage 1Stage 2Stage 3Stage 4Stage 5Stage 6T601, T602HistorianSCADASwitchPLC 2ASPLC 6ASPLC 1ASHMIExternaldevicesD1D1D1D2D3D3D3ODMODMODMLevel 0Level 1Level 2S: SensorA ActuatorODM: Orthogonal Defense Mechanismdetection. The checker code is added to the control code that
already exists in each PLC. The PLC executes the code in a
cyclic manner. In each cycle, data from the sensors is obtained,
control actions computed and applied when necessary, and the
invariants checked against the state variables or otherwise. Dis-
tributing the attack detection code among various controllers
adds to the scalability of the proposed method. During S3 the
implementation was located inside the Programmable Logic
Controllers (PLCs) as well as embedded in the communication
network.

Two types of invariants were considered: state dependent
(SD) and state agnostic (SA). While both types use states
to deﬁne relationships that must hold, the SA invariants are
independent of any state based guard while SD invariants are.
An SD invariant is true when the plant is in a given state; an
SA invariant is always true.

A. State-Dependent (SD) invariants

Consider, for example, the case when the motorized valve
MV101 is Open. In this case, the ﬂow rate indicator FIT101
must provide a non-zero reading to the PLC. This phys-
ical fact
invariant:
leads to the following state-dependent
MV101=Open =⇒ FIT101< δ, where δ denotes a threshold
indicating ﬂow. Note that an SD invariant may include con-
ditions from across the various stages of SWaT thus enabling
distributed detection of attacks. Derivation of SD invariants is
based on the design of the ICS and is described in [4].

B. State-Agnostic (SA) invariants

Under normal system operation, an SA invariant must
always be true regardless of the system state. One SA invariant
was derived for each tank in SWaT to detect attacks that affect
the ﬂow of water into and out of a tank. These invariants are
based on the ﬂow of water and water level in a tank, and
hence are identical in terms of the mathematical relationship
that they capture.

As an example of an SA invariant, consider the water level
in a tank. At time instant k+1, the water level in T101 depends
on the level at time k and the inﬂow and outﬂow at instant k.
This relationship is captured in the following idealized discrete
time model of the tank,

x(k + 1) = x(k) + α(ui(k) − uo(k)),

(1)

where ui(k) and uo(k) denote the inﬂow and outﬂow rates
at time k, and α is a proportionality constant that converts
ﬂow rate to change in level using the tank dimensions. x(k)
is the true state of the water level. Let y(k) denote the sensor
measurement of the water level, ˆx(k) an estimate of the level
sensor reading, and (cid:15) a threshold based on experimentation.
Based on Eqn. 1, the statistics obtained experimentally, and
converting the true states to their estimates, the following
invariant is derived to test whether or not the tank ﬁlling
process is anomalous.

Fig. 4. Water level in tank T101 when LIT101 is attacked; LIT101
readings are observed by PLC1.

Fig. 5. Level sensor LIT101 is under attack, The attacker’s intention is
to underﬂow T101 tank and damage P101. The ﬁrst arrow indicates
the outﬂow reducing time, second arrow indicates the pump noise
starting time

of water level in T101. When the water level goes down to
150 mm, tank T101 does not have enough water to send to
tank T301. Figure 5 shows the change in ﬂow rate during
the attack as measured by ﬂow meter FIT201. The two arrows
indicate the start of reduction of outﬂow from T101. At around
10 seconds there is no water ﬂowing from P101 even though
the pump is ON. At this point the pump becomes noisy and the
ﬂow rate reduces to zero. If not removed, this attack may lead
to pump damage due to overheating. Of course, a mechanical
cut off at the pump would avoid such damage.

The above example shows how an attacker could potentially
damage a pump by changing the sensor values and actuator
states. More complex attacks, mentioned in Section VI, can be
designed and launched to reduce the chances of being detected.

III. OVERVIEW OF WD

WD is a mechanism to detect process anomalies. A process
is considered anomalous when it deviates from its expected
behavior. WD detects such anomalies through the use of in-
variants. An invariant [4] is a condition among physical and/or
chemical properties of the process that must hold whenever
an ICS is in a given state. At a given time instant, sensor
measurements of a suitable set of such properties constitute
the observable state of the physical process as known to the
ICS.

The invariants serve as checkers of the system state. These
are coded and the code placed inside each PLC used for attack

(cid:88)n

i=1

|(ˆx(i) − y(i))|

n

TABLE I
RESOURCES AND ACCESS RIGHTS FOR ATTACKER PROFILES.

>

≤

(cid:15), under attack,

(cid:15), normal.

(2)

(3)

Proﬁle

Constraints

Cyber-criminal

Limited number of attempts to realize a goal.

Fig. 6.

Invariant to detect anomalous behavior of LIT 101.

IV. SWAT SECURITY SHOWDOWN (S3)
This section presents details of the two S3 [36] events
including guidelines and selected information on participants.
In S3 the attackers are challenged to realise concrete goals in
SWaT. Points earned by an attack team are weighted based on
the capabilities needed to launch the attack and the number of
defence mechanisms successfully bypassed during the attack.
The goal was to meet as many pre-deﬁned challenges as
possible within the pre-allocated time.

Information disclosed to the attack teams: Technical details
on SWaT, such as network architecture, protocols and devices
used, are released to the attackers one month prior to their
arrival for participation in the event. Publicly available white
papers on mechanisms deployed by the defence teams are
shared with each attack team.

Information disclosed to the defenders: S3 organizers worked
closely with the defense teams to integrate their defence mech-
anisms into SWaT. Information about the normal operation of
SWaT was disclosed to the defenders to enable them to ﬁne-
tune their detection systems and reduce false alarms as much
as they could.

Attacker proﬁles: Attack teams were asked to select from a
set of attacker proﬁles [34]. The following attacker proﬁles
were available: cyber-criminal, insider, or a combination of
both. An attacker proﬁle is intended to restrict availability of
resources and limit the access rights of the attackers as shown
in Table I.

A. S3-2016

Attack teams included three from industry and three from
academia. Similarly, there were three defense teams from the
industry and three from academia. During the live phase, held
at the SWaT testbed, all six [35] defence mechanisms were
simultaneously in place. Each team was given 12 hours for
passive reconnaissance and team was assigned a 3-hour slot
during which they were able to launch attacks.

B. S3-2017

Attack teams included one from industry and four from
academia. There were two defense teams from the industry
and two from academia. Each attack team was given two ses-
sions [36] of four hours each to conduct reconnaissance on the
testbeds. During these sessions, various attacks were prepared
and tested with the assistance of the SWaT laboratory engineer.
During the actual event, each team was given two hours to
demonstrate their attacks that were prepared previously. Attack

Physical access not allowed; manual manipulation of
the sensors and actuators are not allowed.

Direct connection to PLCs using any software such
as Allen Bradley’s Studio5000, not allowed.

Insider

Physical access to SWaT allowed; manual manipula-
tion of the sensors and actuators are allowed.

Allowed to alter the network topology

Direct connection to PLCs using any software such
as Allen Bradley’s Studio5000, allowed.

TABLE II
TARGETS OF ATTACKS IN S3.

Target

Description

Valves

Pumps

Pressure

Physical Process Attacks

Control the motorized valves

Disrupt pump control operations

Alter the pressure in pipes

Tank ﬁll level

Alter water level in a tank

Chemical dosing

Alter chemical dosing

Sensor Data Attacks

Historian

Alter data in the Historian

HMI/SCADA

Alter the sensor, actuator values at HMI or
SCADA; DoS Attacks on SCADA, HMI

PLC

Reprogram PLC; DoS attacks on PLCs;
Change the commands and values in which the
PLC receives and sends

RIO/Display

Control of the RIO through disconnected ana-
logue Input/Output pin

teams were also given a separate network for Internet up-link
and up to three Virtual Machines (VMs) running either Linux
or Windows operating system.

C. Attack targets

The attack teams were given a list of components and
subsystems in SWaT that could serve as the target of their
attacks. Table II lists the targets available to the attack teams.
Table II has two kinds of attacks: physical process attacks and
sensor data attacks. In physical process attacks, an attacker’s
objective is to alter the physical process. In the case of sensor
data attacks, an attacker’s objective is to alter the sensor or
actuator tags during communication or in the Historian.

V. PREPARATION FOR S3
To prepare for S3-2016, an earlier version of WD was
extended to all six stages of SWaT. This extension required
the generation of invariants across all stages, coding of the
invariants, and placement of the code inside [1] the six PLCs.
The modiﬁed WD was tested on SWaT by running the plant
under various operating conditions.

Based on lessons learned during S3-2016, several new
invariants were generated, coded, and added to the PLCs. For
S3-2017, we decided to use an additional monitoring system
placed outside the PLCs. This system collects data from the
Historian and evaluates the invariants. All
invariants were
implemented in a Linux environment using a Piwebclient API
to talk to the Historian. This new implementation is referred
to as WDH.

The invariants in WD are coded using ladder logic and
structured text, while those in WDH in Python. Both imple-
mentations use the same set of invariants; the difference is in
their placement. The Historian may not get all the data and
commands that ﬂow across the PLCs, sensors, and actuators.
However, as WDH gets its data directly from the Historian, it
has access to information ﬂowing across SCADA workstation
and the Historian. This information may be compromised by
an attacker and is not available to the PLC.

A. Scope of WD

WD is designed to detect process anomalies. Thus, any
abnormal behavior in the water treatment process in SWaT
ought to be detected by WD. However, there could be attacks
that do not cause the process to deviate from its normal
behavior but lead to undesirable consequences. An example
of such an attack is one intended to deface the screen on the
SCADA workstation or the HMI. Such an attack will not be
detected by WD. Attacks that may cause process anomaly but
only after an attack has been removed from the system may
also not be detected by WD. Denial of Service is one such
attack.

B. Scope of WDH

WDH and WD use the same set of invariants. However,
the placement of WDH could lead to a difference in detection
capabilities of the two defense mechanisms. WDH gets its data
from Historian while WD directly from the PLC. Data that is
not programmed to be logged in the Historian will not be
accessible to WDH. Thus any anomaly that requires such data
will likely not be detected by WDH. Similarly, attacks that
manipulate data entering the Historian or SCADA may not be
visible to WD. Thus, while the two invariant-based process
anomaly detection mechanisms are identical in the invariants
they use, their placement in SWaT is expected to result in
different performance in detecting attacks.

VI. S3 ATTACKS
The attacks launched by teams participating in the two S3

events are described next.

A. S3-2016 Attacks

All attacks designed and launched during S3-2016 are
enumerated in Table III. Three attacks selected from Table III
are described next. Details of all attacks are available in [9].
Of the 18 attacks in Table III, 4 and 16 are cyber criminal
attacks and the remaining are insider attacks.

DoS attack on SCADA: In this attack (attack 4 in Table III)
the attacker’s intention was to deface the SCADA workstation
screen and hence prevent the operator from observing plant
state. The cyber-criminal attacker model was used to design
this attack. To realize the intention, the attacker launched an
ARP poisoning Man-in-the-Middle attack in two steps. In the
ﬁrst step all trafﬁc intended for HMI was redirected to the
SCADA workstation. In the second step, this redirected trafﬁc
was dropped and thus no packets were received at the SCADA
workstation. This led to the screen on the workstation becom-
ing completely gray and no state information was displayed.
This attack was not detected by WD as it did not lead to
any process anomaly. It is an ARP spooﬁng attack, and not a
traditional DoS attack. As part of the DoS attack, the attacker
targeted the PLC and sent millions of packets at a time. This
led to the same effect as would be the case when an ARP
spooﬁng attack is performed on SCADA.

Manipulation of the chemical dosing pump: Intention of the
attacker in this case (attack 14 in Table III) was to manipulate
the pH of water entering Stage 3 of SWaT. The insider-attacker
model was used in the design of this attack. This attack was
executed in two steps. In the ﬁrst step, PLC 2 was set to manual
mode. Note that in manual mode the plant operator can directly
control the actuators, e.g., the dosing pumps in this case. In the
second step, the attacker altered the chemical dosing process
in the Pre-treatment Stage 2 of SWaT by interacting directly
with the HMI interface and overriding the commands sent by
the PLC. WD was able to detect this attack because the set-
points changed by the attacker were different from those set
in WD.

DoS to PLC by SYN ﬂooding: The intention of the attacker
in this case (attack 16 in Table III) was to disable the HMI
so that an operator is unable to view or control the plant
operation. The insider-attacker model was used in the design
of this attack. In this way the attacker had an access to the
administrator account and the associated tools. The attacker
performed a SYN ﬂooding attack on Ethernet/IP server of
PLC1.

As a result of this DoS attack, the HMI was unable to
obtain the current state values to display, and would instead
display 0 or * characters. WD was unable to detect this attack
physical process as not affected. During the attack period, PLC
was controlling the process as expected. Such attacks, while
not altering process behavior, may impede supervision of the
process in an operational plant.

B. S3-2017 Attacks

All attacks designed and launched during S3-2017 are
enumerated in Table IV. Selected attacks from Table III are
described next. Details of all attacks are available in [20]. Of
the 31 attacks in Table IV, 17 can be classiﬁed as cyber
criminal attacks and the remaining as insider attacks (Figure I).
All attacks launched during S3-2016 and S3-2017 are listed
and categorized in Table V.

TABLE III
ATTACKS LAUNCHED DURING S3-2016

S.NO Target

Method

Attack

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

Tool

HMI

ﬁll

level

Use HMI access

Tank
LIT101

Close MV101 and Stop P101 and
P102

HMI/SCADA

ARP spooﬁng

Attack HMI DoS attack

Ettercap

PLC

Manual access

Removed the cable at
level 0

the ring at

Manual

HMI/SCADA

DoS on HMI
dropping
all packets between PLC and
SCADA/HMI

by

DoS attack on SCADA, wide DoS
attack, took a while to restore SWaT
to its normal state

ﬁll

level

Use HMI access

Attack on LIT101

Tank
LIT101

Valve; MV301

Use SCADA access

Pump; P101

Use SCADA access

Historian

DoS attack using CPPPO and
loop

Valve MV101

Use SCADA access

Attack on MV301 manually open
from the SCAD workstation

Attack pump; manually open it from
the SCADA workstation

Attack between HMI and PLC

attacked,

using SCADA
MV101
changed the valve state from Open
to Closed

Pump P101

Use SCADA access

LIT301 set point changed

ﬁll

level

Using SCADA access

LIT301 set point altered

Tank
LIT301

Chemical dosing
P201

HMI/SCADA,
LIT101

Chemical dosing
pump P205

HMI/SCADA

Control MV101 and AIT503; set
points of LIT301 to ensure ﬂow,
this triggered chemical dosing

Functional block, introduce new
constant tag, tie that to output tag,
could only do zero

Use SCADA access

Dosing pump attack on P201

LIT101 set to zero from PLC

Manipulation of the chemical dosing
pump (P205)

DoS on HMI using Level 1 net-
work

Attack on HMI

Historian

SYN ﬂood ENIP port at PLC1

DoS to PLC by SYN ﬂooding (attack
on HMI)

Ettercap

Manual;
HMI

Manual;
SCADA

Manual;
SCADA

CPPPO

Manual;
SCADA

Manual;
SCADA

Manual;
SCADA

Manual;
SCADA

Studio
5000

Manual;
SCADA

Ettercap,
Pycomm

Ettercap

Chemical dosing
pump P203

HMI-based direct manipulation.

Attack on P203 while the four dosing
pumps are running

Manual;
HMI

HMI/SCADA
LIT101

Re-program PLC to ﬁx LIT101
value to an arbitrary value

Attack on LIT101

Studio
5000

*4,16 are cyber criminal attacks in S3-2016

Control of
the chemical dosing system through a Python
script (Pycomm): The objective of this attack (attack 15 in
Table IV) was to change chemical dosing at the end of the de-
chlorination system (Stage 4). First, the attackers compromised
Virtual Network Computing (VNC). Then they used a Python
script (Pycomm) and Wireshark to gain access to the HMI.
After gaining access to the HMI through the compromised
VNC, the cybercriminal attacker used Wireshark to capture
the packets ﬂowing between the HMI and PLC4. The con-
troller tags were retrieved by an analysis of the packets. The
attackers changed the data associated with these tags to control
the chemical dosing function using the Pycomm framework.

Control of PLC through the Bridged Man-in-the-Middle
(MiTM) at Level 0: the objective of this attack was (attack 16
in Table IV) to change the commands and values that PLC1
receives and sends. First, the attackers conﬁgured a bridge
between the RIO and PLC1 using Netfilterqueue and
Scapy. The attack was launched at two network levels. An
analysis on the network trafﬁc revealed the packets that the
attackers should edit. As the target of this attack was the
water level in T101, the attackers set it to a constant value
to hide from PLC1 the rise in water level in T101. Before a
packet was forwarded, Netfilterqueue rerouted it into a
queue which can be read and modiﬁed by the Python script.

S.No

Target

Method

Attack

Tool

TABLE IV
ATTACKS LAUNCHED DURING S3-2017

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

HMI/SCADA, LIT401

HMI simulation insider attack

Change the value of LIT401 in the HMI

Manual; HMI

Historian

Valve MV201

ARP and drop

Reprogram PLC

Tank ﬁll level LIT301, 420
to 320

Manual

Change the value stored at the Historian

Ettercap

Change the status of the MV201

Lower the water tank level from 820mm to
420mm without raising any alarm; LIT301
decreased till 320mm

Studio 5000

Manual; HMI

Pump P101

Manual mode of pump

Alternate the state [On:Off] of the pump P101 Manual; HMI

Chemical dosing P205

Manually dosing chemical pump

Change
hypochlorite (NaOCl) in P2

the

chemical dosage of

sodium

Manual; SCADA

PLC

Disconnect cable

RI/O Display

Disconnect IO PIN manual

Disrupt sensor values from remote input/output
(RIO) to the PLC

Disrupt the sensor reading send to PLC through
Remote I/O (RIO)

Manual

Manual

Chemical dosing P404

MiTM, Python script to control

Increase chemical dosage in pre-treatment

Python script

LIT101 (476mm to 540mm )

Reprogram PLC

Falsify water level display at SCADA

Studio 5000

Pump P101

HMI simulation insider attack

Alternate the state [On:Off] of the pump P101 Manual; HMI

HMI/SCADA AIT 504

ARP+rewriting.

Increase AIT504

Ettercap

PLC LIT401

RIO/Display

Reprogram PLC

Falsify water level display at SCADA

Studio 5000

Disconnect speciﬁc IO PIN based
on manual

Disrupt the sensor reading send to PLC through
remote I/O (RIO)

Manual

Chemical
P403, AIT501

dosing

pump

Based on captured trafﬁc between
HMI and PLC4

Change chemical dosing function

VNC, Python script, Pycomm,
Wireshark

PLC, LT101 from 742mm to
500mm

Level 0 MITM

Change the commands and values that the PLC
receives and sends

Aircrack, Airodump, Aireplay,
Netfilterqueue, Scapy

Historian, LT101 tag

Aircrack WiFi; ARP spooﬁng,
Ettercap

Compromise historian data

Ettercap, Aircrack

Pressure sensor DPIT301/30,
MV301-4

SMB to EW, get project ﬁles, run
FT

Disrupt valves operation of Ultraﬁltration and
Backwash (P3)

SMB

MV201, LT101

Pump P501

metasploit+vnc

Change the water level of the tank; LIT101

Metasploit+vnc

Rogue AP disassociated; Telnet
with default credentials to turn
off original AP. Scapy rewrite.

Disrupt pump control operation

KisMAC, Password cracking
tool, 3vilTwinAttacker, Telnet,
Scapy

PLC, LIT101

Reprogram PLC

Change level indicator value

Studio 5000

Pump P101, LIT301

Using back-door connection

Establish back-door connection

Mimikatz, malicious VBA
Macro, SOCKS proxy

HMI/SCADA P201

Netfilterqueue, Scapy

Change the display value of the HMI

Netfilterqueue, Scapy

Historian LIT101

RIO/Display

Valve MV201

Manual

Manual

Overwrote speciﬁc data stored at the Historian Microsoft PsExec, ipconﬁg

Control of the RIO through disconnected Ana-
logue Input/Output pin

Manual

Permanently closed the motorised valve re-
gardless of commands issued

Manual; SCADA

RIO/Display AIT202/203

Manual

Change the pH value shown at HMI

Manual; HMI

PLC, MV201, P101

ARP poisoning, MiTM

Increase the pressure at P1

Tank ﬁll level LIT101

Lower

Falsify the water level reading of the tank
displayed at SCADA

Ettercap

Pycomm

Chemical dosing, PLC2

Use Studio 5000

Change the level of the chemical used for
dosing

Studio 5000

Pressure, MV302, P301/2

Using Pycomm script

Change the pump state sent to the PLC

Pycomm

TABLE V
CYBER CRIMINAL ATTACKS IN S3

Cyber Criminal Attacks

Insider Attacks

S3-2016

4, 16

S3-2017

2, 9, 10, 12, 13, 15,
16, 17, 18, 19, 20, 21,
22, 24, 28, 29, 30

1, 2, 3, 5, 6, 7, 8, 9,
10, 11, 12, 13, 14, 15,
17, 18

1, 3, 4, 5, 6, 7, 8, 11,
14, 23, 25, 26, 27, 31

To prevent all packets from entering the queue, in order not
to disrupt other processes, iptables was used to identify
the targeted packets entering the queue. Using Scapy and a
custom dissector, the attacker edited the payload of the targeted
packet which was then forwarded to its original destination.

Control of Historian through the Aircrack WiFi: The objective
of this attack was (attack 17 in Table IV) to compromise the
data stored in the Historian. Attackers performed crack WiFi
password, ARP poisoning, and MiTM payload manipulation
using Aircrack and Ettercap. As PLC1 was operating in
the wireless mode, the cybercriminal attacker used Aircrack
to obtain the password for connecting to the ICS Access Point
(AP). ARP poisoning was executed to reroute trafﬁc between
PLC1 and the Historian through the attacker’s rogue terminal.
The attackers then used an Ettercap ﬁlter to manipulate the
network packets. The attackers changed the tag corresponding
to LIT101 to an arbitrary value before releasing the packets
to the Historian.

Control of pressure through the Server Message Block (SMB):
The objective of this attacks was (attack 18 in Table IV) to
disrupt the state of four motorized valves in Stage 3 to affect
the differential pressure in UF. Vulnerability CVE-2008-21601
in Factory Talk software from Rockwell, and in Microsoft’s
Server Message Block (SMB), was used by the attackers
to obtain ﬁles from the HMI. As the HMI was running
Windows CE, it has a vulnerability that allows an attacker’s
terminal
to execute arbitrary code on the HMI. Thus the
attackers were able to retrieve the ﬁles to create a copy of
the workstation. From the copied workstation, the attackers
manually changed the state of the valves in Stage 3 such
that the differential pressure across the UF unit as measured
by DPIT301, became dangerously high. The attackers closed
valves MV301, MV302, and MV303, and opened MV304.

Control of water level in the tank through the Metasploit
VNC Scanner: Objective of this attack was (attack 19 in
Table IV) to change the water level in tank T101. The attackers
used Metasploit VNC authentication None scanner to ob-
tain access to the VNC server without password protection and
to check for nodes running a VNC Server. Once the scanner
detected the VNC Server running without any authentication,
the attackers penetrated into the server through a VNC Client
connection. As the VNC Server was hosting the HMI which

1https://www.cvedetails.com/cve/CVE-2008-2160/

controlled the ICS, the attackers changed the simulation tag
associated with water level in T101.

Control of a pump through a rogue router: The objective of
this attack (attack 20 in Table IV) was to disrupt the control
of pump P501. The attackers used Evil twin (rogue access
point) method using KisMAC, a password cracking tool,
3vilTwinAttacker, Telnet, and Scapy. The attackers
used KisMAC to scan for wireless networks in the ICS. Once
the targeted wireless network was identiﬁed, the attackers used
dictionary attack to crack the password. After the password
was cracked, the attackers created a rogue wireless router
with a similar SSID and conﬁguration. They then sent a de-
authentication packet to disassociate PLC5 and the original
router. The attackers used Telnet to log into the original
router and shut it down. Scapy was then used to modify the
packets to turn the pump on.

VII. RESULTS
Tables VI and VII summarize the response of WD and
WDH to the attacks launched during the two S3 events. Recall
that both WD and WDH contain exactly the same set of
invariants. In WD the invariants are coded and placed inside
the PLCs whereas in WDH the invariants are coded and placed
at the Historian. WDH did not exist during S3-2016 and hence
the response of WDH is available only for attacks launched
during S3-2017.
A. S3-2016 results

We note from Table VI that 10 out of 18 attacks were
detected immediately while the remaining eight attacks were
not detected. Six of the eight undetected attacks did not lead
to process anomaly during the observation period and hence
did not violate any invariant. This outcome is expected as the
invariants in WD are designed to detect process anomaly.

Consider attack 2, ARP spooﬁng, in Table III. This is a
DoS attack on HMI. It leads to defacing the screen on the
HMI, or displaying incorrect information, thereby preventing
an operator from knowing the actual plant state. However,
the attack does not cause process anomaly and hence is not
detected as it does not violate any invariant. Similar logic can
be used to explain why the other attacks in Table VI are not
detected.

It is important to note that a DoS attack, when given enough
time to evolve and be launched at an appropriate state of the
plant, may impact physical process behavior. In such a case
one or more invariants may detect the attack. One such attack
is 16 in Table VI. This attack prevented the Historian from
receiving data from PLC1. However, if this attack was left
active for a longer period, it would prevent PLC1 from sending
appropriate commands to the actuators, e.g., to MV101 or
P101. In turn this would have led to process anomaly. Not
enough data is available to conclude with certainty whether or
not this attack would be detected by WD if active for sufﬁcient
time.

Two single point [2] attacks were not detected by WD. In
one attack (attack 6 in Table III) the adversary altered the status

of valve MV301. Under normal circumstances this valve is
opened during the backwash process. However, the attacker
opened it when there was no backwash. Hence the attack
did not affect the physical process except in changing the
valve status. No invariant was violated due to this attack
because the backwash process, i.e., Stage 6, is not included
in this case study. The second single point attack (attack 17 in
Table III) was performed on chemical dosing pump P203 while
the other pump P204 was running. Note that under normal
circumstances only one of these two pumps is supposed to be
running while the other remains as a backup. Subsequently the
attacker shut down pump P204. This attack was not detected
because there were no invariants that related to the chemical
properties of water.

Although the overall performance of WD was below 100%,
it did detect all attacks within its scope except two (attacks 6
and 17 in Table III) as mentioned earlier.

B. S3-2017 results

Table VI indicates that 21 out of 31 attacks were detected
by WD while 24 out of 31 attacks were detected by WDH.
Considering only the attacks within its scope, as mentioned
in Section V-A, WD detected 21 out of 28 attacks (75%).
Similarly, WDH detected 24 out of 31 attacks (77.41%) within
its scope mentioned in Section V-B. Three attacks on the
Historian are not in the scope of WD. All attack targets related
to RIO/Display (in Table II and in Table IV) are not detected
by both WD and WDH. This is because registers inside a
PLC save the previous values received from the sensors, and
the PLC continues to execute the control code. The invariants
also use the same values stored in the PLC registers and hence
do not raise an alert.

In general, PLCs send to the Historian, via the SCADA
workstation, the data received from the sensors. When a PLC
does not have updated values during the attack period, it is
obvious that the Historian also receives the same stale values.
This is the reason why WDH also did not detect attacks
related to RIO/Display. Note that the RIO/Display attacks were
launched and remained active only for a few seconds. During
this period the PLC did not update the current sensor values
coming through the RIO. If the same attack is performed for a
longer duration, the PLC would update the data received from
the sensors. Doing so would likely lead to WD and WDH
detecting the RIO attacks.

Attacks launched on the Historian were detected by WDH
but not by WD. This variance is due to the fact that data in
these attacks is manipulated at the Historian. Thus, invariants
in a PLC do not have access to the manipulated data and
hence the invariants in WD do not raise any alert. All attacks
targeting a PLC are detected by WD and WDH.

WD: Detection of physical process attacks: All attacks on
valves, pressure sensor, and level sensors were detected. Three
out of four attacks on the chemical dosing process pumps
were detected. An example of a detected attack is when the
attackers took control of pump P301 (attack 20 in Table IV)

TABLE VI
PERFORMANCE OF WD AND WDH

S3-2016

WD

1, 5, 7, 9,
10, 11, 12,
13, 14, 18

2, 3, 4, 6,
8, 15, 16,
17

S3-2017

WD

WDH

3, 4, 7, 9, 10,
11, 12, 13, 15,
16, 18, 19, 20,
21, 22, 23, 26,
28, 29, 30, 31

2, 3, 4, 7, 9, 10,
11, 12, 13, 15, 16,
17, 18, 19, 20, 21,
22, 23, 24, 26, 28,
29, 30, 31

1, 2, 5, 6, 8, 14,
17, 24, 25, 27

1, 5, 6, 8, 14, 25,
27

Detected

Not detected

through a Python script (Pycomm) to raise the pressure in the
UF unit, measured by sensor DPIT301, to a dangerous level.
WD immediately raised an alarm. This invariant ensured that
pump P301 must be OFF when the pressure at DPIT301 was
above a threshold. During the attack the invariant was violated
as the pump was not turned off while DPIT301 indicated
readings that were above the threshold. Consequently an alarm
was raised immediately. In certain cases, multiple alarms
were raised due to the violation of one or more invariants.
For example, when level sensor LIT101 was compromised,
the invariants corresponding to this sensor were violated and
raised alarms.

WD: Detection of sensor data attack: WD detected attacks on
HMI/SCADA and PLC values because these attacks directly
compromised the physical processes. These attacks either
compromised chemical dosing, water tank levels, or pump
status through hacking of the HMI/SCADA or PLC. Hence,
the robustness of WD in detecting unusual physical process
behavior was found effective in these attacks. On the other
hand, WD was unable to detect insider attacks that pulled out
RIO cables. This is because WD triggers an alarm only when
the invariants are violated. Under normal circumstance, for a
period of time, a PLC continues to execute its control code,
and any invariant code based on the last known state and/or
values. Thus the invariants located inside the PLCs are unable
to observe this anomalous behavior.

WDH: Detection of physical process attacks: WDH detected
14 out of 16 physical process attacks.

WDH: Detection of sensor data attacks: WDH detected the
attacks on HMI/SCADA and PLC values because these attacks
directly compromised the physical processes, albeit with a
slightly lower detection rate when compared with the rate of
detecting physical process attacks. As with WD, WDH did not
detect any attack launched against the Remote I/O by pulling
the cables that connect it to the corresponding PLC. WDH
fared better in the detection of attacks against the Historian as
it was directly accessing data on the Historian server.

If the Historian itself, or data that is input to the Historian is
compromised, WDH takes the decision based on the input it
receives. A clever and powerful attacker can attack the physical

TABLE VII
RESULTS FROM S3 2017

Target of Attack

No.of
attacks

WD

WDH

Physical Process Attacks

State of motorised valves

State of water pumps

Pressure in UF

Water tank level

Chemical dosing

2

4

2

4

4

Sensor Data Attacks

Data in historian

Data in HMI/SCADA

Tampering PLC communi-
cations

Tampering Remote I/O

3

3

5

4

100%

100%

75%

100%

100%

75%

0%

67%

75%

100%

100%

75%

100%

67%

100%

100%

0%

0%

Total Attacks

31

67.74% 77.41%

process and modify values entering the Historian and thus
deceive WDH. In general, such a situation may arise in all
behavioral intrusion detection systems where the detector takes
the decision based on incorrect input data.

Indeed, data that appears to be “legitimate” could lead the
WDH into believing that there is nothing wrong with the
physical process though there actually is. However, doing
so requires the attacker to continuously manipulate a large
number of state variables. For example, consider an attack
where the attacker turns a pump, say P101, ON when it should
be OFF and (continually) sends the state of the pump as OFF
to the Historian and the corresponding PLC. If the pump is
OFF then the level of the source and destination tanks must be,
respectively, decreasing and increasing at rates determined by
the pump characteristics. Creating “legitimate-looking” data
thus requires an attacker to manipulate several state variables
as explained next. (a) Two state variables that correspond
to tank levels. Two sensors (in SWaT) measure these state
variables (see Figure 2). Thus, the attacker must have access
to these level sensors. (b) If pump P101 is actually ON while
the Historian receives its state as OFF, then FIT201 must show
no ﬂow. Thus the attacker will also need to manipulate FIT201
to avoid detection. This argument can be carried forward to
subsequent stages to show that many sensors will need to be
manipulated by an attacker to “hide” a simple attack such as
“change the state of a pump.” In summary, yes, incorrect data
at the Historian could prevent detection though doing so would
be a signiﬁcant challenge for the attacker due primarily to the
distributed nature of the invariants.

VIII. DISCUSSION

A. Challenges faced

We faced several challenges during S3. For example, after
each team’s performance, the operator was required to bring
SWaT back to a predeﬁned normal state. It was necessary to

keep SWaT in a normal state before another team launched at-
tacks. Bringing SWaT to its normal state required: (a) resetting
network communications to ensure that all the communication
channels are operating as expected, (b) the operator to ensure
that all physical processes in SWaT are stable with respect
to the control logic, (c) the operator to bring back SWaT to
the normal state of that particular device such as a pump or a
motorized valve in the case of any physical or manual attacks
by the previous team, and (d) that the Historian and SCADA
servers were reverted to their original state, i.e, the state that
existed prior to the launch of attacks.

B. Research questions

RQ1: How do attackers compromise the security of an ICS? In
Section VI we presented and categorized the attacks based on
attacker proﬁles. An attacker can launch physical attacks when
inside the plant such as manually operating a motorized valve
or tampering with network cabling. Several attacks launched
by the attack teams had not been launched by the authors
in their evaluation of WD [1] and WDH. Thus, S3 raised
our conﬁdence in the effectiveness of the attack detection
mechanisms based on invariants derived from plant designs.

RQ2: How effective is WD in detecting attacks launched by
independent attack teams? As mentioned earlier, while both
WD and WDH were found to detect a number of attacks,
they did fail in several cases. Given that the invariants derived
are intended to detect process anomalies, it is clear that such
mechanisms must be used in conjunction with other attack
detection tools such as those in [24], [27], [21].

C. Assessment by the authors and by independent teams

Table VIII lists the number of attacks launched by the
authors in an experimental evaluation performed prior to S3-
2016 [1]. Note that the WD detection rate observed by the
authors (89%) was higher than the combined rate observed
during the two S3 events (63.26%). The difference in perfor-
mance is due to different attack vectors used in the three sets
of experiments. WDH detection rate observed during S3 event
is (77.41%), which is much higher than the WD detection rate.
Some of these attack vectors are explained in Section VI and
the remaining may be found in [20].

TABLE VIII
PERFORMANCE OF WD AS EVALUATED BY THE AUTHORS AGAINST THOSE
BY PARTICIPANTS IN S3.

Experiments by

Attacks

Launched

Detected (WD)

Detected (WDH)

Authors
S3-2016
S3-2017

37

18

31

33 (89%)

10 (55.5%)

21 (67.7%)

NA

NA

24 (77.4%)

NA: WDH did not exist at the time of experimentation by the author and
during S3-2016.

The data in Table VIII is indicative of the value of orga-
nizing S3 events. Speciﬁcally, in the case described in this

paper, the two S3 events led to an increased conﬁdence in
the effectiveness of the invariant-based approach in detecting
cyber attacks. The hackfests also led to the creation of new
types of attack vectors that were not used earlier to assess the
performance of WD and WDH in detecting cyber attacks.

D. False alarms

The performance of any attack detection method ought to
be assessed using its detection accuracy, i.e. how many of the
launched attacks it detects, as well as the rate at which false
alarms are raised. During S3 each team attempted to launch
several attacks. The attacks listed in Tables III and IV are the
ones that were successful in realizing the stated attacker intent
and were scored by the judges. The remaining attacks were
not recorded and hence any alarm generated by such attacks
was not considered. Some of these unrecorded alarms could
be false though no speciﬁc claims can be made about their
nature.

Since S3-2017, the authors have observed no false alarms
from WD during normal operation of SWaT. WDH has been
in operation since a few weeks prior to S3-2017. Again,
during the normal operation of SWaT, no alarm has been
generated by WDH. This observation should not be construed
to imply that an invariant-based attack detection mechanism
will not generate any false alarm– in fact it could. However,
if the invariants generated are complete in the sense that they
accurately capture all aspects of process behavior, and their
implementation is correct and tuned properly, the likelihood
of false alarms is low.

Even though SWaT is a relatively new plant (2-years since
its inauguration at the time of writing this paper), we do
observe intermittent failures in a few motorized valves. For
example, sometimes MV101 in Stage 1 takes much longer to
open than expected by its controlling PLC1. The PLC itself
detects such cases. In such a case WD or WDH, depending
on the time it takes for the valve to ﬁnally open, will raise
an alarm. We do not consider this as a false positive simply
because whether an anomalous behavior is due to a natural
cause, or a cyber attack, cannot be distinguished by WD or
WDH. While such distinction is important to make, additional
research is needed to distinguish process anomalies due to
cyber attacks and those arising due to natural component
failures.

E. Beneﬁts of S3

S3 exposed the organisers, participants and researchers to
how an attacker might design and launch attacks on ICS. Bene-
ﬁts of S3 include the following. 1) An improved understanding
of how an ICS operates and the consequent formulation of
new research directions. 2) Opportunity for participants from
industry and academia to learn from the event and focus on
the limitations of their work. 3) An aid to the ICS management
team to observe the defense teams thus leading to possible
adoption of technology embedded in WD or WDH.

F. Placement of WD

The placement of WD is another question that ought to
be looked into carefully. In this work WD is placed inside
PLCs. However, an exceptionally large number of invariants
may prevent adding code to the existing control code in a PLC.
This may happen due to the computational load requirements
on a PLC. This aspect led us to create WDH that is placed
on the plant network and gets its data from the Historian to
evaluate the invariants.

G. Forensics

One advantage of the invariant-based approach for attack
detection appears while determining the area of impact of
an attack. When a single invariant is violated, it indicates
clearly the source of process anomaly. For example, an alert
is generated if valve MV101 is closed when the water in
tank T101 is at or below the L level marker. While this alert
does not indicate how an attacker entered the system, or if
the valve or the level sensor is defective, it does assist in
localising the reason for the alert. The analysis becomes a
bit more complex when multiple invariants raise alerts. This
aspect of an invariant-based detection mechanisms remains to
be analyzed in further detail.

H. Attacker capabilities

We do not have any validation of the professionalism of the
S3 attack teams. As mentioned earlier [20], [35], [36], attack
teams were from a variety of backgrounds including from
the industry and academia from Europe and Asia. During S3-
2017 one team consisting of four members–all from outside
of Singapore– focuses on ethical hacking and cyber-wars
involving critical infrastructure. This team is part of a global
alliance. The other teams consist of hackers interested in
knowing how vulnerabilities in software can be exploited
and passes this information to others for improving systems
security. Coverage of attacks launched by the attack teams, and
attacker proﬁles, is discussed in Section IV and summarized
in Tables I, II, V and VII.

I. Attack trees

It is possible to use attack trees [37], [42] to model attacks
launched during the two hackfests reported in this paper. Doing
so would enable mapping each attack to a speciﬁc path in
the attack tree and reveal which attack paths in SWaT were
traversed. Such modeling and analysis has not been attempted
in this work and is a possible subject for future research.

IX. RELATED WORK
S3 is a Capture-The-Flag [15] event on ICS. Traditional
CTF events generally attract the attention of both industrial
and academic teams and currently enjoy increasing popularity
as indicated in [15]. The number of such events is gradually
increasing [13], [16]. Such events aid in learning about secu-
rity vulnerabilities, how these could be exploited, nature of
attacks, and strength of the deployed [18], [33], [45] defense
mechanisms. To the best of our knowledge, S3 is the ﬁrst CTF

style event of its kind in ICS that involves participants from the
industry and academia, and focuses on an operational water
treatment testbed.

The study reported here focuses on cyber attacks on ICS that
result in deliberate data and command manipulation. Injection
of such attacks in ICS has been studied by several researchers.
Attacks have been modeled as noise in sensor data [28], [47].
Authors previously presented cyber physical attacker model [2]
to aid in the design of cyber physical attacks on ICS. Attacker
models designed speciﬁcally for ICS include a variety of
deception attacks including surge, bias, and geometric [11].
Such models have been used in experiments to understand
the effectiveness of statistical techniques in detecting cyber
attacks.

There exist several techniques, other than the type used
in WD, for the detection of process anomalies. CPAC [19]
presents stateful detection mechanisms to detect attacks
against control systems. The Weaselboard [31] uses PLC back-
plane to get the sensor data and actuator commands, and analy-
ses them to prevent zero day vulnerabilities. WeaselBoard [31]
has a dedicated device, and detects changes in control settings,
sensor values, conﬁguration information, ﬁrmware, logic, etc.
The invariants in WD use data from multiple stages to en-
able distributed detection of cyber attacks. Such sensor fusion
has been proposed by several researchers. In safety critical
cyber physical systems this was reported in [26]. In [38], it
is shown how safety critical systems are interconnected and
their complexity. Model based attack detection schemes in
water distribution systems was presented in [7]. It uses the
Matlab system identiﬁcation tool to get a model from the
data generated in a water distribution system. The data driven
model is helpful in detecting process anomalies.

Monitoring the physics of the system has been studied
in [22]. Cardenas et al. [44] have experimented with the use
of CUSUM in detecting stealthy attacks. Hsio et al. [23] have
proposed a distributed security monitoring solution to detect
attacks on an ICS. There exists literature on the design of
robust ICS [28], [46]. These works focus on attack modelling
and the design of controllers and monitors for secure ICS.

X. CONCLUSION

There exist a number of devices for defending networks
and ICS against cyber attacks. Firewalls attempt to prevent
attackers from entering an ICS. Intrusion Detection Systems
(IDSs) attempt to detect if an unauthorized user has entered the
plant network. The approach used in WD is orthogonal to that
used in most commercially available ﬁrewalls and IDS. WD
uses a design-centric approach to detect process anomalies
in contrast to network trafﬁc anomalies that are the focus of
several IDS. Thus, WD is effective in detecting attacks by an
external or an internal agent. One could consider WD as a
last-mile defense.

While in the study reported here WD has been found
effective in detecting attacks that lead to process anomaly, it
does fail in detecting attacks such as a replay attack where a
plant operator views the system state that is different from the

actual state. This ineffectiveness of WD ought to be considered
when using such a system in critical infrastructure.

It is interesting to observe that there exist attacks that are
detected by both WD and WDH though vice-versa is not true.
For example, attack 17 in Table IV was detected by WDH
but not by WD. This observation suggests that, when feasible,
both systems ought to be deployed simultaneously.

The invariants used in WD and WDH were derived and
coded manually. For a system such as SWaT the manual
approach is feasible as the plant has 42 sensors and actuators as
compared to perhaps hundreds or more in commercial plants.
Thus, there needs to be an automated way of generating and
coding the invariants.

The attacks launched by teams during the hackfests could
later serve as a source for assessing the effectiveness of attack
detection mechanisms developed by other researchers. Details
of all attacks launched during the hackfests are therefore made
public and available in [9], [20], [41].

It should be obvious that any attack detection mechanism,
including WD, is one component of a holistic defense system
against cyber attacks on any critical infrastructure. This paper
does not address an important question: What action should be
taken, and how, when an alarm is raised by WD or WDH?”
This remains an open question.

ACKNOWLEDGMENTS

A number of people were involved in the planning, execution,
and post-data analysis during the two hackfests reported in this
paper. Our thanks are due to Nils Tippenhauer, Martin Ochoa,
and the staff of iTrust for organizing and judging the events;
Kaung Myat Aung for invaluable assistance in the actual con-
duct of the events; Gyanendra Mishra for implementing WDH;
the entire team of authors of the S3-2017 report [20], namely
Francisco Furtado, Lauren Goh, Sita Rajgopal, Elaine Cheung,
Ericson Thiang, Toh Jing Hui, and Ivan Lee; to the SUTD-
MIT International Design Center for partially supporting S3-
2017; and to all the participants who traveled long distances
to come to Singapore to participate in the two hackfests. Last
but not the least, thanks to the reviewers for their comments
that helped improve the original manuscript.

REFERENCES

[1] S. Adepu and A. Mathur. Distributed detection of single-stage multipoint
cyber attacks in a water treatment plant. In Proceedings of the 11th ACM
on Asia Conference on Computer and Communications Security, ASIA
CCS ’16, pages 449–460, 2016.

[2] S. Adepu and A. Mathur. Generalized attacker and attack models for
cyber physical systems. In 2016 IEEE 40th Annual Computer Software
and Applications Conference (COMPSAC), pages 283–292, June 2016.
[3] S. Adepu and A. Mathur. An investigation into the response of a water
In 2016 IEEE 17th International
treatment system to cyber attacks.
Symposium on High Assurance Systems Engineering (HASE), pages
141–148, Jan 2016.

[4] S. Adepu and A. Mathur. Using Process Invariants to Detect Cyber

Attacks on a Water Treatment System, pages 91–104. 2016.

[5] S. Adepu and A. Mathur. Water-defense -a method to detect multi-point
cyber attacks on water treatment systems; US provisional application
no. 62/314,6., March 2016.

[6] S. Adepu, S. Shrivastava, and A. Mathur. Argus: An orthogonal defense
framework to protect public infrastructure against cyber-physical attacks.
IEEE Internet Computing, 20(5):38–45, Sept 2016.

[7] C. M. Ahmed, C. Murguia, and J. Ruths. Model-based attack detection
In Proceedings of the
scheme for smart water distribution networks.
2017 ACM on Asia Conference on Computer and Communications
Security, pages 101–113. ACM, 2017.

[8] Allen-Bradley.

Logix5000 Controllers Structured Text, Program-
ming Manual, Publication 1756-PM007D-EN-P, Rockwell Automation,
November 2012.

[9] D. Antonioli, H. R. Ghaeini, S. Adepu, M. Ochoa, and N. O. Tip-
penhauer. Gamifying education and research on ICS security: Design,
implementation and results of S3. CoRR, abs/1702.03067, 2017.

[10] The Bro network security monitor. https://www.bro.org/.
[11] A. A. C´ardenas, S. Amin, Z.-S. Lin, Y.-L. Huang, C.-Y. Huang, and
S. Sastry. Attacks against process control systems: Risk assessment,
detection, and response. In ACM Symp. Inf. Comput. Commun. Security,
2011.

[12] Check Point: Critical

Infrastructure & ICS/SCADA.

http://www.

checkpoint.com/products-solutions/critical-infrastructure/index.html.
[13] N. Childers, B. Boe, L. Cavallaro, L. Cavedon, M. Cova, M. Egele, and
G. Vigna. Organizing large scale hacking competitions. In Proveedings
of conference on Detection of Intrusions and Malware, and Vulnerability
Assessment (DIMVA), 2010.

[14] P. Cobb. German steel mill meltdown: Rising stakes in the internet of

things, 2015.

[15] CTFtime. https://defcon.org/. Accessed: 2016-10-19.
[16] DEF CON conference. https://defcon.org/. Accessed: 2017-10-19.
[17] ICS-CERT Advisories https://ics-cert.us-cert.gov/advisories.
[18] C. Eagle and J. L. Clark. Capture-the-ﬂag: Learning computer security

under ﬁre. Technical report, DTIC Document, 2004.

[19] S. Etigowni, D. J. Tian, G. Hernandez, S. Zonouz, and K. Butler.
Cpac: securing critical infrastructure with cyber-physical access control.
In Proceedings of the 32nd Annual Conference on Computer Security
Applications, pages 139–152. ACM, 2016.

[20] F. FURTADO, L. GOH, S. RAJAGOPAL, E. CHEON, E. THIANG, T. J.
Hui, and I. LEE. Swat security showdown (s3-17) event report. Technical
report, iTrust, Singapore University of Technology and Design, 2017.

[21] H. R. Ghaeini and N. O. Tippenhauer. Hamids: Hierarchical monitoring
intrusion detection system for industrial control systems. In Proceedings
of the 2Nd ACM Workshop on Cyber-Physical Systems Security and
Privacy, CPS-SPC ’16, pages 103–111, 2016.

[22] D. Gollmann and M. Krotoﬁl. Cyber-Physical System Security, pages

195–204. Springer Verlag, 2016.

[23] S.-W. Hsiao, Y. S. Sun, M. C. Chen, and H. Zhang. Cross-level
behavioral analysis for robust early intrusion detection. In Intelligence
and Security Informatics (ISI), 2010 IEEE International Conference on,
pages 95–100. IEEE, 2010.

[24] ICS2 On Guard. http://ics2.com/products/ics2-on-guard-2/.
[25] https://ics-cert.us-cert.gov/.
[26] R. Ivanov, M. Pajic, and I. Lee. Attack-resilient sensor fusion for
safety-critical cyber-physical systems. ACM Transactions on Embedded
Computing Systems (TECS), 15(1):21, 2016.
[27] KICS Kaspersky Lab. https://ics.kaspersky.com/.
[28] C. Kwon, W. Liu, and I. Hwang. Security analysis for cyber-physical
systems against stealthy deception attacks. In American Control Con-
ference (ACC), 2013, pages 3344–3349, 2013.

[29] R. Lipovsky. New wave of cyber attacks against Ukrainian power
industry, January 2016. http://www.welivesecurity.com/2016/01/11.
[30] A. P. Mathur and N. O. Tippenhauer. SWaT: A water treatment testbed
for research and training on ICS security. In 2016 International Work-
shop on Cyber-physical Systems for Smart Water Networks (CySWater),
pages 31–36, April 2016.

[31] J. Mulder, M. Schwartz, M. Berg, J. R. Van Houten, J. Mario, M. A. K.
Urrea, A. A. Clements, and J. Jacob. Weaselboard: Zero-day exploit
detection for Programmable Logic Controllers. Technical report, tech.
report SAND2013-8274, Sandia National Laboratories, 2013.

[32] ODVA. Ethernet/IP technology overview. https://www.odva.org/Home/

ODVATECHNOLOGIES/EtherNetIP.aspx.

[33] J. Radcliffe. Capture the ﬂag for education and mentoring: A case
study on the use of competitive games in computer security train-
ing. http://www.sans.org/reading-room/whitepapers/casestudies/capture-
ﬂag-education-mentoring-33018, 2007.

[34] M. Rocchetto and N. O. Tippenhauer. On attacker models and proﬁles
for cyber-physical systems. In Proceedings of the European Symposium
on Research in Computer Security (ESORICS), 2016.

[35] S3-2016: SWaT Security Showdown (S3). https://itrust.sutd.edu.sg/scy-

phy-systems-week/2016/s3/.

[36] S3-2017: SWaT Security Showdown (S3). https://itrust.sutd.edu.sg/scy-

phy-systems-week/2017-2/s317-event/.

[37] V. Saini, Q. Duan, and V. Paruchuri. Threat modeling using attack trees.

J. Comput. Sci. Coll., pages 124–131, 2008.

[38] J. A. Stankovic. Research directions for cyber physical systems in
wireless and mobile healthcare. ACM Trans. Cyber-Phys. Syst., pages
1:1–1:12, Nov. 2016.

[39] K. Stouffer and J. F. K. Scarfone. Guide to Industrial Control Systems
(ICS) Security; NIST Special Publication 800-82; pages 1-155., June
2011.

[40] SWaT: Secure Water Treatment Testbed, 2015.

https://itrust.sutd.

edu.sg/wp-content/uploads/sites/3/2015/11/Brief-Introduction-to-
SWaT 181115.pdf.

[41] SWaT dataset and models. https://itrust.sutd.edu.sg/dataset/.
[42] C.-W. Ten, C.-C. Liu, and M. Govindarasu. Vulnerability assessment
In Power
of cybersecurity for SCADA systems using attack trees.
Engineering Society General Meeting, 2007. IEEE, pages 1–8, June
2007.

[43] D. Urbina, J. Giraldo, N. O. Tippenhauer, and A. Cardenas. Attacking
ﬁeldbus communications in ICS: Applications to the SWaT testbed. In
Singapore Cyber-Security Conference (SG-CRC), pages 75–89, 2016.

[44] D. I. Urbina, J. A. Giraldo, A. A. Cardenas, N. O. Tippenhauer,
J. Valente, M. Faisal, J. Ruths, R. Candell, and H. Sandberg. Lim-
iting the impact of stealthy attacks on industrial control systems.
In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, CCS ’16, pages 1092–1105, 2016.

[45] G. Vigna. Teaching network security through live exercises. In Security
education and critical infrastructures, pages 3–18. Springer, 2003.
[46] A. Wasicek, P. Derler, and E. Lee. Aspect-oriented modeling of attacks
in automotive cyber-physical systems. In Design Automation Conference
(DAC), 2014 51st ACM/EDAC/IEEE, pages 1–6, June 2014.

[47] S. Weerakkody, Y. Mo, and B. Sinopoli. Detecting integrity attacks
on control systems using robust physical watermarking. In IEEE 53rd
Annual Conference on Decision and Control (CDC), pages 3757–3764,
Dec 2014.

[48] S. Weinberger. Computer security: Is this the start of cyberwarfare?

Nature, 174:142–145, June 2011.

BIOGRAPHY

Sridhar Adepu is a PhD student in Information Systems
Technology and Design pillar at the Singapore University of
Technology and Design. His research focuses on veriﬁcation,
safety, security and reliability of Cyber-Physical Systems.

Aditya Mathur is a Professor of Computer Science at Purdue
University and Head of Pillar Information Systems Technology
and Design at the Singapore University of Technology and De-
sign. Aditya is Center Director of iTrust, a center for research
in cyber security. Design of secure public infrastructure is a
focus of his current research.

