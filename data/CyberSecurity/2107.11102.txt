Date of publication xxxx 00, 0000, date of current version xxxx 00, 0000.

Digital Object Identiﬁer 10.1109/ACCESS.2022.3147312

Automatically generating models of IT
systems

IVAN KOVA ˇCEVI ´C1, STJEPAN GROŠ2, and ANTE DEREK3
1 University of Zagreb Faculty of Electrical Engineering and Computing, Zagreb, Croatia (e-mail: ivan.kovacevic@fer.hr)
2 University of Zagreb Faculty of Electrical Engineering and Computing, Zagreb, Croatia (e-mail: stjepan.gros@fer.hr)
3 University of Zagreb Faculty of Electrical Engineering and Computing, Zagreb, Croatia (e-mail: ante.derek@fer.hr)

Corresponding author: Ivan Kovaˇcevi´c (e-mail: ivan.kovacevic@fer.hr).

This work was supported in part by the research and development project Cyber Conﬂict Simulator, co-ﬁnanced by the EU under Grant
KK.01.2.1.01.0054.

2
2
0
2

n
a
J

1
3

]

R
C
.
s
c
[

2
v
2
0
1
1
1
.
7
0
1
2
:
v
i
X
r
a

ABSTRACT Information technology system (ITS), informally, consists of hardware and software
infrastructure (e.g., workstations, servers, laptops, installed software packages, databases, LANs, ﬁrewalls,
etc.), along with physical and logical connections and inter-dependencies between various items. Nowadays,
every company owns and operates an ITS, but detailed information about the system is rarely publicly
available. However, there are many situations where the availability of such data would be beneﬁcial. For
example, cyber ranges need descriptions of complex realistic IT systems in order to provide an effective
training and education platform. Furthermore, various algorithms in cybersecurity, in particular attack tree
generation, need to be validated on realistic models of IT systems. In this paper, we describe a system we call
the Generator that, based on the high-level requirements such as the number of employees and the business
area the target company belongs to, generates a model of an ITS that satisﬁes the given requirements. We
put special emphasis on the following two criteria: the generated ITS models a large amount of details, and
ideally resembles a real system. Our survey of related literature found no sufﬁciently similar prior works,
so we believe that this is the ﬁrst attempt of building something like this. We created a proof-of-concept
implementation of the Generator, validated it by generating ITS models for a simpliﬁed ﬁctional ﬁnancial
institution, and analyzed the Generators performance with respect to the problem size. The research was
done in an iterative manner, with coauthors continuously providing feedback on intermediate results. The
conducted experiments show that our approach is feasible. In the future, we intend to extend this prototype
to allow probabilistic generation of IT systems when only a subset of parameters is explicitly deﬁned, and
further develop and validate our approach with the help of domain experts.

INDEX TERMS cyber range, information technology system, expert systems

I. INTRODUCTION

Practice is key in the learning process and Cyber Defense
is no exception. Knowing your information system well,
knowing what would happen in the event of an attack, testing
defenses and practicing with a simulated adversary on the
network are critical to a successful defense. But practicing
on production systems is prohibited for availability, integrity,
and conﬁdentiality reasons, and rarely can anyone afford
duplicate systems just for testing purposes. For this reason,
cyber ranges [1]–[4] have emerged as a viable alternative.
Cyber ranges are essentially virtualized environments that
mimic real-world environments and also contain additions
that make practicing and learning more efﬁcient. They are a
great tool that has been used in cybersecurity for some time,

and as time goes on, they will be used even more [2]. Cyber
ranges also help in cases where new security professionals
are being trained, as they provide a near-realistic environment
in which they can test and improve their skills. Finally, cyber
ranges can also be used to test different security mechanisms
and how they behave in the event of an attack.

All of this requires that an organisation’s information
technology system (IT system) — whether real or imagined
— be implemented in the cyber range. And this can be done
in two ways. The ﬁrst approach is to take a snapshot of
an existing IT system and model it in a cyber range. This
is relatively easy to do because various network discovery
and scanning tools can be used. These tools are able to
create machine-readable descriptions of what is detected,

VOLUME , 2022

1

 
 
 
 
 
 
which can then be translated, again using other tools, into a
virtual network description that is implemented in the cyber
range. However, existing IT systems are not always readily
available. While there are many published network datasets
in various domains [5], [6], we are not aware of any dataset
that contains descriptions of complex IT systems.

But building an IT system from scratch, even of a moderate
size, is very resource intensive and requires a great deal of
knowledge. Real information systems and the IT systems that
support them are very complex and contain a lot of detail.
An additional problem is that IT systems and the information
systems that support them can be created in an almost inﬁnite
number of ways. However, not all of them are valid or
even useful, as there are some rules and blueprints that are
followed when building an IT system. Moreover, IT systems
also grow organically, meaning that starting from scratch is
not always an option, more often information systems and
IT systems that support them grow with the growth of the
business they support. Because of this, some conﬁgurations
pop up in practice that would not in IT systems designed
from scratch. All of this makes creating complex realistic
environments for practice in cyber ranges very difﬁcult, with
the result that when IT systems are created within a cyber
range a very limited set of conﬁgurations is used, which
affects the learning process.

There are several research areas in computer security
that can directly beneﬁt from being able to easily generate
detailed models of IT systems of arbitrary size. The most
obvious application is the generation of cyber ranges, where
the existing systems (e.g. [7], [8]) could be used to build
ready-to-use ranges based on the models of IT systems,
such as those generated by the system we propose in this
paper. Furthermore, models of IT systems can be used to test
and evaluate procedures for generating and analyzing attack
graphs [9], [10]. Automated security risk analysis would also
beneﬁt from this work. For example, [11] and [12] develop
methods for enterprise networks, but then they test it on a few
very simple networks — the models of IT systems generated
by our approach are much more similar to the enterprise
networks they wish to target. Finally, machine learning ap-
proaches to evaluating attacks and defenses (e.g., [13], [14]
just to mention a few) can beneﬁt from realistic models of
IT systems both for training and evaluation, especially in the
case of reinforcement learning where the results depend of
availability of various models of IT systems representative of
real-world systems.

In this paper we present a ﬁrst step towards solving the
problem of a ﬁnite set of different IT systems. To this end,
we describe a prototype expert system we have developed
that, given a set of high level requirements, produces a
description of an IT system. In summary, our contributions
are as follows:

• Proposal of a concept of an IT system generator.
• Rules that regulate how certain objects are instantiated

and linked.

2

Kovaˇcevi´c et al.: Automatically generating models of IT systems

• Proof-of-concept implementation of IT system genera-

tor.

• Dataset containing sample generated models of ITSs

[15].

We also evaluated the performance of the proof-of-concept
implementation for a different problem sizes. The results
show that CPU consumption and memory usage are both
acceptable for intended ranges of inputs.

The paper is structured as follows. First, in Section II we
deﬁne IT system and also give a quick overview of some
technologies used for the implementation of a generator.
Then, in Section III we give a high-level description of the
system we want to build and its principles. In Section IV we
describe the architecture and implementation of the proposed
generator system, followed by its validation in Section V.
Section VI describes our performance experiments and mea-
sured behavior of the prototype system for the given inputs.
In Section VII we analyze the obtained results and discuss
possibilities and use cases of our approach. We also discuss
the limitations of the proposed system, and features that
still need to be implemented. The subsequent Section VIII
provides a review of related work. Finally, the paper ﬁnishes
with conclusions and future work in Section IX, followed by
the list of references.

II. BACKGROUND
In this section, we deﬁne the term information technology
system model (or a model of an information technology
system) and also give a brief description of two key tech-
nologies, SMT solvers and integer linear programming tools,
that we used to implement the generator.

In general, information technology (IT) is deﬁned as a
set of interrelated technologies for information processing.
Technologies mean software, hardware and communication
technologies [16]. This corresponds exactly to what we want
to achieve, i.e., we want to develop a system that, given
certain input requirements, generates a description of an
information technology system (ITS) consisting of worksta-
tions and servers, software installed on them, printers, a prop-
erly segmented computer network connecting the computers,
and specialized security devices such as ﬁrewalls, Intrusion
Detection Systems (IDS), Intrusion Prevention Systems (IPS),
and so on. A model of an information technology system is a
simpliﬁed version of a real IT system in which details that
are not important are omitted. For example, since we are
interested in the application of IT systems in security, we
do not model elements of IT systems that are irrelevant in
the security application. Examples of such software include
various types of load balancers and failover conﬁgurations
that are not important from a security perspective (unless they
themselves have vulnerabilities, which we ignore), so we do
not attempt to model them. In the following text, we will
use the term information technology system (ITS) instead of
model of information technology system (ITSM) when there
is no ambiguity about whether we are talking about a model

VOLUME , 2022

Kovaˇcevi´c et al.: Automatically generating models of IT systems

generated by our system or a IT system as used in a particular
environment.

Satisﬁability Modulo Theory (SMT) solving is a form of
constraint solving, in which constrains are modeled as logical
formulas. More precisely, SMT problem consists of ﬁrst or-
der logical formulas interpreted in a background theory such
as booleans, bitvectors, integers (usually of ﬁnite size) etc.
SMT solvers attempt to solve the constraints by producing
a instantiation of values for variables that satisﬁes all the
formulas. We use constraints to specify policies that the
network infrastructure needs to satisfy. Our implementation
uses the Z3 Theorem Prover [17] from Microsoft Research
that constructs network segments that satisfy the constraints.
Integer linear programming (ILP) is an optimization prob-
lem where both the cost function and the constrains are linear,
and the variables are restricted to integer values. We use
ILP when selecting software components to be installed in
the ITS — the linear constraints implement the requirements
(e.g., the combination of software must support required user
services) and the cost function is the total cost of software
licenses and maintenance. Our implementation uses the soft-
ware package for convex optimization called CVXOPT [18].

III. BASIC PRINCIPLES AND REQUIREMENTS
In this section, we provide a high-level overview of what we
want to accomplish, i.e., our long-term goals. We also lay out
some basic principles and assumptions that will determine
how we approach solving the problem. Based on these as-
sumptions and principles, we have determined that templates,
rules, and input parameters are required on the input, so we
describe these in more detail in this section as well. In the
following section, we describe what we implemented as a
proof-of-concept and what we learned from it.

Our goal is to create a system that can generate models of
real-world IT systems. To tell if a model of an IT system
is real-world or not we envision a large set of artiﬁcially
generated IT systems. Samples are again drawn randomly
and presented independently to N experts. Each expert has to
identify which, if any, part of the IT system is not something
that would appear in the real-world. If at least 50% of experts
for 50% of samples can not identify anything differently from
the real world IT systems, then the process of generating
models of IT systems generates real-world IT systems. In this
work we did not perform this test on a large scale, the only
experts that were evaluating generated models of IT systems
were the authors. We also strived to get 100% of samples to
have no difference between real-world systems and the ones
artiﬁcially generated.

The way IT systems are created in businesses and insti-
tutions does not follow from any ﬁrst principles or axioms,
but rather is the result of experience, best practices, various
restrictions (e.g., ﬁnances), personal preferences, and many
other inﬂuences. Moreover, complex IT systems are rarely
created from scratch in one step. The much more common
case is that they grow organically as a company’s informa-
tion system they support grows. As technology evolves and

FIGURE 1. Inputs and outputs of the Generator

organizations adopt new technologies, they are integrated
into their IT systems not in an ideal way, but in the best
possible way that the speciﬁc IT system allows and supports.
It follows that in order to build models of IT systems in
companies, we need to model these processes somehow. In
other words, this means that we need to model the experts’
thinking and their mental decision-making processes.

There are two classes of systems used to model human
behavior. The ﬁrst class is based on machine learning, and
speciﬁcally deep learning. The problem with this approach is
that it requires a huge amount of data, which is not available
in our case. The other class is expert systems [19], which
encode the knowledge of experts into a set of rules. The rules
are then applied to imitate an expert. This is the approach
we have taken. To consider blueprints used in building IT
systems, we have chosen to use templates. The idea is that
templates represent a generic part of an IT system that are
instantiated and specialized by applying rules for a particular
need. Finally, we have parameters that are necessary because
not everything can be encoded in rules and templates. For
example, some parameters are the number of employees and
the vertical industry that the generated IT system should sup-
port, e.g. banking, manufacturing, software company. Based
on these premises, we envision the system shown in Figure
1, which we will call the Generator, that takes some input
parameters and a set of rules and templates, and generates
one or more models of IT systems at the output.

Based on the inputs, the Generator creates a model of
IT system which satisﬁes given requirements. Anything else
that is not speciﬁcally deﬁned is arbitrarily selected from
some distribution. For example, if the use of Active Directory
(AD) [20] was not speciﬁed, or more generally centralized
authentication system, as a requirement in the input, the
Generator generates one based on a probability distribution
indicating the likelihood of there being AD as a function of
the number of workstations in an IT system. This means that
the Generator can generate a potentially inﬁnite number of
different models of IT systems, all obeying a given input.

Aforementioned templates are described in Section III-A,
parameters in Sections III-B and III-C, and rules in Section
III-C.

A. TEMPLATES
Templates describe software packages, employee roles, and
organizational services. Software packages are described us-
ing attributes enumerated in Appendix A. Among others,
attributes describe the following information about software
packages:

VOLUME , 2022

3

• Local and network dependencies;
• Services provided to users on workstations (i.e. email

access);

• An abstract measure of the amount of required hardware

resources, that we refer to as hardware quota;

• Costs of licenses and maintenance.
Employee roles link employees to information about their
local service requirements, which deﬁne what the software
packages installed on their workstations must support. An
example of such requirements would be a bank clerk who
needs to be able to access ﬁnancial services. Since such
services are provided by ﬁnancial client applications, the
proposed system ensures that a ﬁnancial client application is
installed on the bank clerks’s workstations.

Organizational services describe high-level services that
the organization must provide to its external customers, such
as Internet banking. Templates describing organizational ser-
vices contain information describing what combinations of
network services must be exposed to the Internet to sup-
port individual organizational services. For example, Internet
banking, mentioned above, requires that an Internet banking
Web application be installed and conﬁgured to accept con-
nections from the Internet.

B. INPUT PARAMETERS
In addition to the templates, which are intended to be generic
and applicable to all supported types of organizations, the
description of a concrete target organization is required to
generate a ITS. We refer to this information as input parame-
ters, and they include the following:

• Employee role subgroups (ERS), specifying subgroups
of employees belonging to various employee roles that
exist within the organization, and the number of em-
ployees in each subgroup;

• Data collections, describing what data collections must

be installed to support the organization;

• Provided external services, listing external services that

the organization must provide; and

• Network policies, describing any custom rules that reg-
ulate what can, what must and what must not belong to
the same network segment.

Data collections and network policies are further described
in Subsection III-C. The input parameters can be deﬁned in
any combination. For example, in one case only the number
of employees could be speciﬁed, while in the other case
the desired services and the number of customers could be
speciﬁed. It could also be speciﬁed that the company is
small, medium or large. In either case, the Generator should
derive other parameters of the IT system it generates based
on the given requirements. If this is not possible due to
a lack of correlation between these parameters in the real
world, the Generator is free to choose whatever it deems most
appropriate. Rules can also be added or removed as needed,
or as the Generator is improved.

Kovaˇcevi´c et al.: Automatically generating models of IT systems

C. RULES
One of our contributions are rules for dataset instantiation
and network segmentation. Dataset instantiation is governed
by dataset instantiation rules, which can be referenced by
special input parameters called data collections. Network
segmentation is governed by network segmentation rules,
which can be divided into default rules embedded in the
system and user-deﬁned rules that can be selected and added
in input parameters called network policies.

Data collections are templates that represent classes of data
within an organization. They deﬁne which dataset instances
are created and which employees and software they are
associated with. Each data collection deﬁnes a protection
level, a numeric relative measure of importance which can
be used to deﬁne policies. Dataset instantiation rules support
the following criteria for instantiation:

• A dataset can be primarily stored either on a database, a

server, or a client;

• A dataset can be installed for some organizational ser-
vices, which requires it to appear on a server software
that supports such organizational services;

• A dataset can be installed for some employee roles,
which requires it to appear on client software installed
for its member employees;

In addition, there can be several modes of linking dataset
instances to other objects, for which additional requirements
are supported:

• Employee mode refers to the mode of creating datasets
with regard to employees, with three possible variants:
1) each employee must have distinct dataset instances
not shared with other employees, 2) each ERS must have
distinct dataset instances not shared with other ERSs,
and 3) each dataset instance must be shared between all
employees;

• Service mode refers to the mode of creating datasets
with regard to organizational services, with two possi-
ble variants: 1) each organizational service must have
distinct dataset instances not shared with other organi-
zational services, and 2) each dataset instance must be
shared between all organizational services;

• Software mode refers to the mode of creating datasets
with regard to software, with ﬁve possible variants:
1) each database must have distinct dataset instances not
shared with other databases, 2) each server must have
distinct dataset instances not shared with other servers,
3) each client must have distinct dataset instances not
shared with other clients, 4) each software must have
distinct dataset instances not shared with other software,
and 5) each dataset instance must be shared between all
software in the organization.

The connection between data collections and datasets can
be illustrated by the example of emails. Emails are a data
collection because they represent a class of data that applies
to the entire organization. Their deﬁnition speciﬁes that each
employee who reads emails must have a corresponding email

4

VOLUME , 2022

Kovaˇcevi´c et al.: Automatically generating models of IT systems

dataset instance that contains only their personal emails.
Therefore, each ﬁnal email dataset instance will be associated
with an individual employee and their email client applica-
tions. In addition, each email dataset instance will be linked
to the appropriate email server software and stored in the
appropriate database. This linkage is very important during
cyber exercises, for example, as it can help defenders narrow
down the source of data leakage during a simulated data
breach investigation.

Network segmentation rules specify requirements that
govern the selection of network segments for dataset in-
stances and software installations. Each rule can contain a
set of queries that select objects to which the rule applies.
Supported types of rules are the following:

• RequireDistinctNetworksForSets(setA_query, setB_query)
requires that two sets of objects speciﬁed by queries
setA_query and setB_query must never appear together
inside a network segment;

• RequireSameNetworksForSets(setA_query, setB_query)
requires that two sets of objects speciﬁed by queries
must always appear together in a network segment;

• RequireCommonNetworksForSets(setA_query, setB_query)
requires that objects selected by setA_query and objects
selected by setB_query must have some shared network
segments, in which they appear together;
• RequireCollocatedLocalDependencies()

requires that
software installations must at least once appear in a
network segment that contains their local requirements;
• LimitAllowedProtectionLevelRange(allowed_difference)
requires that no pair of objects within a network segment
has a difference between protection levels larger than the
target limit;

The rule RequireCollocatedLocalDependencies is relaxed,
as denoted by "at least once" above, to avoid conﬂicts during
network segmentation. Suppose that servers A, B, and C are
installed, and that C is a local dependency for both A and
B. Furthermore, suppose that there are two dataset instances,
D1 and D2, with D1 stored on A, and D2 stored on B and C,
that are required to never appear together within a network
segment. If the rule was not relaxed, the network could never
be generated because A and B would both need to be located
in all network segments that contain C, and that would break
the requirement for splitting D1 and D2. With the relaxed
rule, A and C can appear in one network segment containing
D1, and B and C in another containing D2, making network
segmentation possible.

During development, we deﬁned default rules to avoid
pointless network segment assignment and ensure basic net-
work functionality common to most organizations. Deﬁning
a minimal set of rules is still ongoing work. These rules are
the following:

• Software packages that are only depencencies of other
software packages must be inside network segments that
contain some software packages that depend on them;
• Each software installation must have at least one com-

mon network segment with each related dataset in-
stance, and dataset instances must not appear in network
segments that contain no related software installations;
• Software installations that provide organizational ser-
vices must at least once appear inside a network segment
that accepts connections from the Internet;

• Dataset instances related to organizational services must
at least once appear inside a network segment that
accepts connections from the Internet;

IV. GENERATOR ARCHITECTURE AND
IMPLEMENTATION
This section describes the proposed architecture of the Gen-
erator component and our implementation of that architec-
ture.

A. ARCHITECTURE
The proposed method and system can be broadly divided into
six components corresponding to six phases of ITS gener-
ation, as shown in Figure 2. These components, described
in Subsections IV-A1-IV-A6, are the following: 1) Software
chooser, 2) Dataset linker, 3) Network segmenter, 4) Com-
puter installer, 5) Authentication initializer, and 6) Security
control initializer.

1) Software chooser
The ﬁrst task the system must perform is to select a set of
software packages for installation. This was chosen as the
ﬁrst task because other objects such as datasets, computers,
credentials, and ﬁrewall rules either reference or rely on
existing software installations. For example, the number of
server computers required cannot be determined without
considering the hardware requirements of the software and
associated datasets to be installed. Software is selected based
on the following criteria:

1) For each employee, software supporting all required
user services must be installed on appropriate worksta-
tions;

2) For each organizational service, a combination of soft-
ware that supports all of it’s required network services
must be installed on a server computer;

3) For each installed software, a software satisfying all
its local requirements must be installed on the same
computer;

4) For each installed software, server software satisfying
all of its network requirements must be installed on a
server;

5) The costs of software licenses and maintenance must
be as low as possible, so that a minimal set of software
satisfying all previous requirements is installed.

It should be noted that requirements of employees and
organizational services must allow for multiple variations of
software packages. For example, if there are two email client
applications and an employee requires email support, it must
be possible to select any of the two email client applications

VOLUME , 2022

5

Kovaˇcevi´c et al.: Automatically generating models of IT systems

FIGURE 2. Architecture of the proposed method and system. Circles represent components of the system, rectangles represent data, and arrows represent the
data ﬂow. Dashed rectangles denote that multiple sets of data are used as inputs for a component.

for installation. The output of this component is a collection
of software installation records that contain data from the
appropriate software templates that are either associated with
the employees for whom they are installed or designated as
server software.

present does not generate low-level technical details such as
IP addresses and ports. Details such as these are expected to
be set during the preparation of the cybersecurity exercise or
experiment according to the concrete choice of technologies
and goals.

2) Dataset linker
After the software installation records have been created,
the instantiation and linking of the datasets can take place.
All data collections are analyzed and instances are created
according to the input parameters described in Subsection
III-C. If required, separate instances are created for differ-
ent combinations of employees, organizational services, and
software. The output of this phase is a collection of dataset
instance records that reference linked employees, organiza-
tional services, and software installation records previously
created by the software selection component.

3) Network segmenter
instance
After software installation records and dataset
records are created, the network segmentation component
attempts to create a conﬁguration of network segments that
conforms to the speciﬁed network policies. It ﬁrst attempts
to determine the minimum number of network segments for
which segmentation is possible, and then attempts to bind
objects to a minimum number of network segments required
to satisfy all policies. The goal of the second task is to avoid
situations where, for example, a workstation is unnecessarily
added to two network segments when membership in only
one of them would sufﬁce. It is possible that the given
network policies lead to conﬂicts. In this case, network seg-
mentation is not possible and the policies must be changed.
It is important to note that the network conﬁguration at the

4) Computer installer
Now that initialization of other objects has ﬁnished, and hard-
ware requirements have been established, computers can be
created. The algorithm begins by creating groups of objects
called proto-computers, which will later be split into possibly
multiple computers according to hardware requirements. In
each of the network segments containing server software, an
initial proto-server is created, and in each network segment
containing client software, proto-workstations are created for
each group of objects associated with a single employee.
Local software dependencies are rechecked and any missing
dependencies, such as those resulting from the relaxation
of the network policy RequireCollocatedLocalDependencies,
are added to proto-computers.

Once objects are grouped into proto-computers, we impose
a hardware quota limit that simulates the limited capacity of
computer resources in real life. If a proto-computer, when
all components are installed, does not exceed the conﬁgured
hardware quota limit, one computer is created and all compo-
nents within the proto-computer are associated with it. Oth-
erwise, the components are split among multiple computers.

5) Authentication initializer
The authentication initializer component creates credentials
and their authorizations. The software templates specify
whether a software package supports local or domain cre-
dentials, or whether it requires both. This is described in

6

VOLUME , 2022

Kovaˇcevi´c et al.: Automatically generating models of IT systems

the data_types attribute. Non-root credentials are created for
users to allow access to the software they use, root credentials
are added for administrators to allow maintenance of the
generated ITS, and additional non-root service accounts are
added for server software. The rule of minimal privileges is
applied, with each employee given the minimum privileges
required to do their job.

If the ITS contains a domain controller (DC), which is
recognizable by the Lightweight Directory Access Protocol
(LDAP) service it provides, domain accounts are conﬁgured
and stored on the DC whenever possible, and additional local
accounts only when necessary. In addition, a domain admin
account is created and stored on the DC that is known to
the administrators. In the future, we intend to specialize the
administrators and give domain admin access only to those
who manage the domain. If no DC is found, local accounts
are created everywhere.

6) Security control initializer
Besides access controls, the ﬁrewall is currently the only
supported security control. Therefore, the security control
initializer component creates ﬁrewall rules for the generated
network, according to the following requirements:

• Network services that support organizational services,
e.g. Internet banking, must be able to accept connections
from the Internet;

• If a software needs to connect to the internet, it must be
able to establish connections towards the Internet; and
• If a client software needs network services provided by
software in another network segment, a rule must be
added to allow establishing such connection.

• If a client software needs network services provided by
software in another network segment, a rule must be
added to allow establishing such connection.

• If a DC exists, rules are added that allow software using
domain credentials to establish connections to the DC.

Firewall rules are described on a high level of abstrac-
tion as a directed graph in which nodes represent software
packages and edges the direction in which connections are
allowed to be established. Final low-level rules can be im-
plemented either manually or using scripts for the concrete
ﬁrewall technology used in the cybersecurity exercise or
experiment. Once ﬁrewall rules are created, they are grouped
by endpoints and added to the ITS. Any connection not
explicitly allowed by the generated rules is considered for-
bidden.

B. IMPLEMENTATION
The proposed method has been implemented as a set of
Python 3.9 modules. Each of the components, correspond-
ing to the generation phases described in Section 2, was
implemented as a Python class with a common interface
that accepts templates and input parameters. This should be
useful for developing a plugin system in the future. The
work was done incrementally in an iterative manner, and the

components were developed in the order of the corresponding
phases, starting with the software chooser. As each phase was
developed, the earlier phases were iteratively updated and
improved.

The software chooser was implemeted using the convex
optimization modelling Python package called CVXPY and
Integer Linear Programming (ILP) optimizer
its default
cvxopt, described in Section II. The goal is to ﬁnd the approx-
imately cheapest combination of software that satisﬁes all
software dependencies and all requirements imposed by em-
ployees and organizational services. At the time of writing,
the problem is intentionally simpliﬁed to ignore situations
such as when employees have multiple workstations. This
was done for performance reasons, and we intend to include
such criteria in our future work.

The ILP optimization criterion is to minimize the value f
in Equation (1). In equations throughout this paper, arrows
denote vector variables, ((cid:62)) is the transpose operator, and
vectors are multiplied using the dot product. Each vector
in (1) has dimension [n × 1], where n is the number of
software package variants considered, with indexes corre-
sponding to individual software package variants. Software
package variants represent installations of software packages
in different contexts, e.g., if the software package Python 3
can be installed on both Linux and Windows, we consider
these two as different software package variants even though
they represent the same software package. The variables in
(1) are the following:

•

•

•

•

•

−→n0 is a binary vector that speciﬁes whether software
packages are installed or not;
−→nn speciﬁes the total number of installations of software
packages;
−→
−→
lc0 and
lcn specify license costs for software package
installations, and are further described in Appendix A;
−→oc0 and −→ocn specify operating costs for software pack-
age installations, and are further described in Appendix
A;
−→
hq speciﬁes hardware qouta (HQ), the abstract hard-
ware resource requirements of software packages; and

• wh speciﬁes the price of a unit amount of HQ.

−→nn

−→
hq

f = wh

(cid:62) + −→n0(

−→
lc0 + −→oc0)(cid:62) + (−→nn − −→n0)(

−→
lcn + −→ocn)(cid:62)
(1)
The variables −→n0 and −→nn in Equation (1) are computed
from matrix variables that describe the assignment of soft-
ware to employees and organizational services using con-
straints. Thus, the optimization is done for the assignment,
and not directly for the variables −→n0 and −→nn. Due to space
limitations, technical details regarding the preparation of
the ILP problem, the constraints, and the treatment of the
CVXPY outputs within the software chooser are omitted. Af-
ter an optimal assignment is found, ﬁnal software installation
records are created where necessary.

Dataset linker follows Algorithm 1 to create all required
dataset instances. Due to space limitations, only the high-

VOLUME , 2022

7

level steps are shown. Instances are created and split multiple
times according to the selected modes described in Subsec-
tion III-C, with each split performed over the results of the
previous split. Splits are performed either by creating initial
instances of datasets if none exist, or by creating copies of
instances from previous splits.

Algorithm 1: Dataset linkage overview
Function instantiate_dataset_instances (employees,
organizational_services, software, Employee_mode,
Service_mode, Software_mode)

instances = if supported employees exist then

instances = cre-
ate_employee_instances(Employee_mode,
employees);

end
if supported organizational services exist then

if any(instances) then

instances =
split_service_instances(Service_mode,
instances, organizational_services);

end
else

instances =
split_service_instances(Service_mode,
dummy_instance,
organizational_services);

end

end
if supported software exists then

if any(instances) then

instances =
split_software_instances(Software_mode,
instances, software);

end
else

instances =
split_software_instances(Software_mode,
{dummy_instance}, software);

end

end
return instances;

end

Network segmenter is implemented using the Z3 solver
described in Section II. It follows Algorithm 2 to assign
network segments to objects generated earlier. Again, due to
space limitations, only the high-level steps of the algorithm
are shown. The for loop tries to ﬁnd the minimum number
of networks for which a solution exists. Then, a set of
representative objects is selected, since it is expected that
many objects have the same network segment conﬁguration.
For example, all members of an employee role subgroup
(ERS) are located in common network segments, and it is
sufﬁcient to determine segments for one employee to know
the rest. After segments are assigned, the algorithm uses Z3

Kovaˇcevi´c et al.: Automatically generating models of IT systems

backtracking to remove excess assignments. For example, if
software A has been assigned to network segments 1 and
3, but only the assignment to segment 1 is required, this
step attempts to remove the excess assignment to segment 3.
Finally, the assignment for representative objects is applied
to all objects. If no assignment is found until the arbitrary
constant MAX is reached, network segmentation fails and
input network segmentation rules must be changed.

Algorithm 2: Network segmentation overview
Function network_segmenter (objects,
segmentation_rules)

for network_count in 1..MAX do

r = get_representative_objects(objects);
vars = create_z3_variables(r, network_count);
constraints = create_z3_constraints(r, vars,

segmentation_rules);

solution = solve_SMT_problem(vars,

constraints);

groups = get_related_object_groups(r);
for group in groups do
solution.push();
add_join_constraints(solution, group);
solution.solve();
if solution does not exist then

solution.pop();

end

end
apply_network_assignment(r, solution);
Transfer_results(r, objects);

end

end

Subsequent components are implemented straightfor-
wardly according to speciﬁcations in Section IV-A. Tem-
plates are loaded from csv ﬁles, with requirements and de-
pendencies stated as regular expressions to allow for exten-
sibility. For example, software dependencies are stated as
multiple regular expressions that match Common Platform
Enumeration (CPE) Identiﬁres, which multiple versions of
dependencies can satisfy. We chose to use JSON ﬁles to
handle input parameters and outputs, as they can be manually
edited in text editors and support all required data formats.

V. VALIDATION & VERIFICATION
During the development of the system, we continuously
conducted experiments to analyze the operation of its com-
ponents and rules. We tested the system with several rule
conﬁgurations and found that all operations were performed
as expected and that no rules were broken in the generated
ITS. After that, we consulted experts to validate whether the
generated ITS was a valid representation of an organizational
network, and included additional rules where necessary. In
this section, we describe several tests and results.

8

VOLUME , 2022

Kovaˇcevi´c et al.: Automatically generating models of IT systems

TABLE 1. Two sample conﬁgurations of employees used in validation and
performance evaluation. In evaluation, the ﬁnal counts are obtained by
multiplying counts from a given conﬁguration with the multiplier speciﬁed for
each experiment. Employee role subgroups are abbreviated as ERS.

ERS

Employee
role
ceo
ceo
admin
ﬁnance
ﬁnance
developer
developer
Total employee count

ceo:ceo
ceo:ﬁnancial
admin
ﬁnance:internal
ﬁnance:banking
developer:windows:senior
developer:windows:junior

Conﬁguration with:
5 ERS
3
2
2
0
85
8
0
100

7 ERS
3
2
2
10
75
4
4
100

For demonstration purposes, we describe an organization
representing a ﬁctional ﬁnancial institution. It is a very
simpliﬁed example, but complex enough to demonstrate the
operation of the proposed system. In addition to manage-
ment, the organization has an internal ﬁnance department
that works with internal ﬁnancial data, an external ﬁnance
department that works with customers, and an IT department
with administrators and developers. Two examples of em-
ployee conﬁgurations used in the tests, with 5 and 7 ERSs
respectively, are shown in Table 1.

The organization has 4 data collections describing critical
data, shown in Table 2. ERSs in parentheses are linked only
for the conﬁguration with 7 ERS, while the rest are linked in
both cases. Internal ﬁnancial data (FinancialData:internal)
refers to internal ﬁnancial reports and analysis and is ac-
cessible to management and the internal ﬁnance department.
Banking data (FinancialData:banking) is used for the organi-
zational service Internet banking and is accessible to clerks,
and additionally to senior developers during deployment.
Emails are read by everyone, with all employees having their
own Email dataset instances. Finally, the internet banking
application source code (SourceCode:internet_banking) is
accessible to developers, with each having a different version
locally. The latter is conﬁgured only to demonstrate such set-
tings for a dataset, and is usually more complex in practice.
To assess network segmentation, we described 5 network
segmentation rules. Rules were added incrementally, and
each time the generated network was examined to conﬁrm
that the addition was correctly applied. The last rule (R5)
was added solely for demonstration purposes. Rules were
conﬁgured as follows:

• R1: Software installed on servers mustn’t be inside a
network segment containing software installed on work-
stations;

• R2: Only software providing external services, i.e. In-
ternet banking, is allowed to be exposed to the Internet;
• R3: Data instances mustn’t appear together within a
network if their difference in protection levels is larger
than 1;

• R4: Active Directory and Exchange server must always

appear together in a network segment;

FIGURE 3. Output generated for 3 network rules and 7 ERS.

• R5: Network segments containing data instances with
protection levels larger than 2 must not contain internet
browsers.

Our ﬁrst experiment involved network segmentation rules,
with the conﬁgurations shown in Table 3. ITSs generated for
the ﬁrst 3 rules and for all 5 rules are shown in Figures 3 and
4 respectively. PC icons represent computers, gearbox icons
represent network services, hands represent user services,
and enclosures with underlined italic captions represent net-
work segments. Lines connect related objects, e.g. a line
between a computer and network service signiﬁes that that
computer has server software that offers that network service.
Figures are simpliﬁed to show only the high-level network
architecture, with only representative computers shown. Each
representative computer corresponds to a larger number of
computers with similar conﬁguration, with the count of such
computers written inside the icon. For example, the number
75 on a computer in Figure 3 signiﬁes that there are 75 similar
computers on which ﬁnance and browser user services are
provided. Finance user services are provided by ﬁnance client
applications, while browser user services are provided by
web browser applications installed on those computers. Both
conﬁgurations contain all 7 ERS. Three rules yield 3 network
segments, while 5 rules require at least 5 network segments to
satisfy the constraints. Both conﬁgurations contain one De-
militarized zone (DMZ) network segment. The introduction
of rules R4 and R5 splits the workstation LAN and server
LAN segments into two parts each, as expected. The split is
made so that one is allowed to contain browsers and emails,
and the other is not.

The second experiment was to generate ITSs for two
conﬁgurations of ERS from Table 1. The results of applying
all 5 network rules to 5 ERS and 7 ERS can be seen in
Figures 5 and 4 respectively. The generated ITSs satisfy all
requirements and constraints.

Dataset instance linkage for banking ﬁnancial data (Finan-
cialData:banking) is shown in Figure 6. In addition to icons
described earlier, database icon represents a dataset instance,
user icons represent ERSs, and ﬁle icons represent software.
In Figure 6, the gearbox icon represents an organizational
service, and not a network service. Although software instal-

VOLUME , 2022

9

TABLE 2. Sample conﬁguration of datasets used in validation and performance evaluation. Abbreviations are as follows: PERS = separate instances for ERSs; PE
= separate instances for employees; A = one instance for all; POS = separate instances for organizational services; PDB = separate instances for databases; PSrv
= separate instances for servers.

Kovaˇcevi´c et al.: Automatically generating models of IT systems

Identiﬁer

Protection
level

Datatbase
stored

Person
mode

Service
mode

Software
mode

Organizational
services

ERSs

FinancialData:internal

FinancialData:banking

Emails

SourceCode:
internet_banking

5

4

2

4

yes

yes

PERS

A

PDB

A

POS

PDB

Internet_banking

yes

PE

no

PE

A

A

PSrv

A

(ﬁnance:internal)
ceo:ceo
ceo:ﬁnancial
developer:windows:senior
ceo:ﬁnancial
ﬁnance:banking
(ﬁnance:internal)
ceo:ceo
(developer:windows:junior)
developer:windows:senior
ceo:ﬁnancial
ﬁnance:banking
admin
(developer:windows:junior)
developer:windows:senior

FIGURE 4. Output generated for 5 network rules and 7 ERS.

FIGURE 6. Example of dataset linkage.

Examples of some generated credentials and ﬁrewall rules
for the case with 7 ERS and 5 network segmentation rules
are shown in Figures 7 and 8 respectively. For every oper-
ating system (OS) installation and software that explicitly
requires local credentials, a local credential is created, while
all software installations that support domain credentials are
conﬁgured to accept credentials from the users who work
on them. User credentials are represented using keyhole
icons, while root credentials are represented with lock icons.
Computers on which credentials are stored are indicated
with arrows, while other lines indicate software that accepts
those credentials. As with computers, only representative
credentials are shown. Figure 7 shows a domain credential
for a ﬁnancial ofﬁcer in ERS ﬁnance:banking, stored at the
DC, and linked to his/her software, alongside a local root
credential for Micrsoft Exchange Server.

Figure 8 shows ﬁrewall rules as lines with arrows indi-
cating the direction in which connections are allowed to
be established. The globe icon represents the Internet. As
expected, the ﬁrewall rules created allow the Internet Bank-
ing Server to accept connections from the Internet, allow
workstations with browsers to connect to the Internet, allow

FIGURE 5. Output generated for 5 network rules and 5 ERS.

lations are shown only for representative computers, every
computer represented by them has its own separate software
installations. Only one dataset instance can be seen, corre-
sponding to one organizational service and one database,
and linked to the employees’ respective client applications.
The thick solid line connecting the dataset to Microsoft SQL
Server denotes that the data is primarily stored there. Other
dataset instances were created as expected and can be seen in
Appendix B.

10

VOLUME , 2022

Kovaˇcevi´c et al.: Automatically generating models of IT systems

FIGURE 7. Example of credential linkage.

FIGURE 8. Examples of ﬁrewall rules. F is abbreviated for Fin app client.

software clients to access their servers, and so on. A complete
visualization for the case with 7 ERS and 5 network segmen-
tation rules, containing all types of objects, can be seen in
Appendix B

VI. PERFORMANCE ANALYSIS
Performance was evaluated by running the implemented sys-
tem with a predeﬁned range of inputs in an experimental
setup. The experimental setup consisted of a computer with
an Intel i7-9750H CPU, with 6 cores and 12 threads running
at 2.6 GHz, with 16 GB RAM. Since the system does not
currently support multi-threaded execution, which we leave
for future work, up to four instances of the system were
run simultaneously, each on its own CPU core. The system
and experimental scripts were implemented in Python and
executed using the Python interpreter version 3.9.2.

For each experimental run, two output values were mea-
sured, duration and heap memory consumption. The duration
was measured as the difference in timestamps between the
moment the network generation started and the moment
the results were obtained and ready to be stored. Memory
consumption was measured between the two aforementioned
moments using the Python package tracemalloc and reﬂects
only the data structures created during the generation of the
ITS. This does not include the additional memory consump-
tion by the Python interpreter and the loaded libraries, which
amounts to about 200 MB additional RAM.

Input parameters were varied using a Cartesian product

TABLE 3. Two conﬁgurations of network segmentation rules used in the
performance evaluation.

Rule

R1
R2
R3
R4
R5

Conﬁguration with:
3 rules
5 rules
included
included
included
included
included
included
-
included
-
included

of two conﬁgurations of employees shown in Table 1, two
conﬁgurations of network segmentation rules shown in Table
3, and employee count multipliers as follows. A discrete
numeric value, called the multiplier, was chosen as an integer
from the range 1..15. Employee counts given in Table 1 are
multiplied with the aforementioned multiplier to gain ﬁnal
counts for each run. The ﬁrst conﬁguration of employees
includes 5 roles of employees, and the second conﬁguration
includes 7 roles of employees, both containing 100 em-
ployees in total. Hence, the total number of employees in
the organization in each experiment sums up to 100 times
the multiplier. Network rules from Table 3 are described in
Section V.

The ﬁrst conﬁguration of network rules contains 5 rules,
while the second contains 3 rules. For each combination
of input parameters, the experiment was run three times,
resulting in a total of 180 experimental runs. The resulting
durations and memory consumptions can be seen in Figures
9-12. All measured values, including the additional memory
consumption described earlier, are well within the acceptable
range for our intended use cases.

For the given range of inputs, we observe an approximately
linear relationship between the total number of employees
and the memory consumption, and a seemingly polynomial
trend for the duration. Two conﬁgurations of employees and
network rules result in small absolute differences in the
measured values. Resulting ITS models and interactive visu-
alizations of all experimental runs are available in [15]. Since
the dataset was created separately from the benchmark, the
recorded durations and memory consumptions are expected
to vary to a smaller degree.

VII. DISCUSSION
The proposed system is capable of building models of ITSs
with a high level of detail. In this section, we present our
contributions, discuss some design decisions we made with
some possible alternatives, and ﬁnally give several use cases
of the proposed method and system.

Our ﬁrst contribution is the proposal of the concept of an
ITS generator that generates models of ITSs with a high level
of detail based on templates, rules, and input parameters. The
second contribution are expert rules for dataset instantiation
and network segmentation that describe basic principles of
ITS design. Our third contribution is an implementation of
an ITS generator that not only produces measurable results,

VOLUME , 2022

11

Kovaˇcevi´c et al.: Automatically generating models of IT systems

FIGURE 9. Average time necessary to generate topology vs employee
number for ﬁve and three network rules

FIGURE 12. Average memory consumption to generate topology vs employee
number for 5 and 7 ERS.

to expand the number of templates and rules to support orga-
nizations from other industries. Such expansion is expected
to improve generalization and show shortcomings in the
current method that will need to be addressed. Without prior
research to serve as a guide, many ideas were tested while
building the Generator before we reached something that
works satisfactory, and we are still researching alternative
methods and aspects of the Generator. As an alternative to the
ILP optimizer and SMT solver, we will also consider some
other algorithms, such as Constrained Clustering [21].

Our performance evaluation focused on organizations
smaller than 1,500 employees, which in 2020 constituted the
vast majority of organizations within the European Union
[22]. Generation of ITS models for organizations with more
than 1,500 employees is expected to require more time and
memory. Limitations in memory could be partially addressed
by modelling larger organizations as a collection of smaller
sub-organizations. In addition, our primary focus is on cyber
ranges, which are limited in the number of computers they
can simulate.

There are still many limitations preventing this system to
create completely realistic models of ITSs. Some limitations
we identiﬁed are the following ones:

• Realism in context of IT systems is hard to deﬁne, so
at the present we have to rely on prior experience, pub-
licly available resources, and expert opinions to develop
templates and rules.

• Lack of virtualization support, because of which many
enterprise solutions such as cloud solutions and thin
client architectures can not be generated;

• A small number of network rules, supporting only basic

examples of organizations, as described above;

• Lack of support for outsourcing and client-oriented ser-
vices, e.g. Virtual Private Networks (VPNs) and GitHub.
• The proposed system requires all the input parameters to
be speciﬁed on the input. It would be very useful if some
parameters could be omitted. In that case the Generator
would randomly select missing values based on some
probability distributions that those parameters follow.
This would allow generating many probabilistic models,

FIGURE 10. Average time necessary to generate topology vs employee
number for 5 and 7 ERS.

but also provides evidence that the ﬁrst two contributions
can lead to detailed models of ITSs. Finally, as our fourth
contribution, we published a dataset [15] containing some
of the generated ITS models. The published dataset will
continuously be updated with newer versions of ITS models,
and our goal is to include additional types of ITSs besides the
aforementioned simpliﬁed ﬁnancial organizations over time.
The system described in this paper is still work in progress.
Presented network rules only support generating models ITSs
for ﬁnancial organizations, so our main goal at the moment is

FIGURE 11. Average memory consumption to generate topology vs employee
number for ﬁve and three network rules.

12

VOLUME , 2022

Kovaˇcevi´c et al.: Automatically generating models of IT systems

all of which satisfy parameters given on the input.

• In the current version, models of ITSs are built from the
ground up, in a single pass. Real ITSs evolve over time
as organizations’ they support change;

A. USE CASES
We motivated this work in introduction by arguing that there
are challenges with cyber ranges and validation of cyberse-
curity related algorithms, such as attack trees, that we could
address by automation. But there are other use cases as well.
In particular, we see an application in automating offense and
defense using artiﬁcial intelligence and as an aid in designing
new information systems or redesigning existing ones.

As we saw in Section III-C, rules are the key component of
the generator that embed best practices that are obeyed while
designing, building and maintaining information systems in
order to be as secure as possible. This makes the generator
some kind of an expert system which can be used as a help
tool for designers of information systems. Speciﬁcally, when
building new information systems this tool could be used to
create an initial conﬁguration suited for personal preferences
of a designer. It could be also used to help improve existing
information systems. For that purpose, the generator would
create a target design. Then, the information system would
be changed in such a way to get as close as possible to this
target design.

VIII. RELATED WORK
In this section, we brieﬂy address related work. The genera-
tion of synthetic networks with desired statistical properties
and realistic features resembling real networks has been an
active area of research for more than two decades [23]–[28].
In particular, Medina et al. [25] develop the Boston university
Representative Internet Topology gEnerator (BRITE) [25],
a topology-generation framework that, while universal, can
generate networks having the hierarchical structure, node
degrees, and other features similar to the topology of the In-
ternet at the time. Tomasik et al. [26] develop the autonomous
Supelec Hierarchy Inter-domain Program (aSHIIP) [26],
[29] that focuses on faithfully modeling the relationship
between the autonomous systems (AS) on the Internet. In
contrast to the aforementioned works, we focus on ITSs
where the network is smaller compared to the Internet. More
importantly, we aim to capture complex dependencies be-
tween ITS components (rather than the statistical properties
of the Internet) which is not possible with the aforementioned
tools.

Works such as [30]–[33] propose approaches that optimize
ﬁrewall policies according to speciﬁed security and perfor-
mance goals. A limitation of these approaches is that they
need existing ﬁrewall policies for all resources as inputs to
perform optimization. The method presented in this paper
solves an orthogonal problem and does not need predeﬁned
ﬁrewall policies. It generates a collection of resources and
adds only ﬁrewall rules necessary to support communication
requirements inside the model. Once an ITS model is gener-

ated and its ﬁrewall policies are deﬁned, approaches such as
these can be used to further optimize network segmentation.
There are several projects that focus on generating ready-
to-use systems for the purpose of education, training ex-
ercises and capture the ﬂag (CTF) contests. Schreuders et
al. [7] develop Security Scenario Generator [7] that builds
networks of vulnerable virtual machines based on user-
deﬁned conﬁgurations (the scenarios). The generator sup-
ports randomization of network components, vulnerabilities
and various other parameters. Alpaca [8] uses an AI planning
engine to generate vulnerability lattices — corresponding to
sequences of steps that attacker needs to perform to achieve
the goal. These and similar efforts focus on making the cyber
range useful for training and education purposes. Instead, our
research focuses on generating ITSs that represent plausible
organizational networks and model enough details to be
used for applications such as preparation of cybersecurity
exercises. The other difference is that, in the aforementioned
tools, the system generation is driven by user speciﬁed con-
ﬁgurations, while our system uses expert rules.

Finally, Russo et al. [4] build the Cyber Range Automated
Construction Kit (CRACK) [4] and the associated Scenario
Deﬁnition Language for the purpose of designing, generating
and testing complex cybersecurity scenarios. The scenario
consists of a theater roughly corresponding to our ITS model,
along with injected vulnerabilities and other items relevant to
the situation being modeled. Consequences of vulnerability
exploits are speciﬁed by Datalog statements and the engine
can check whether the scenario satisﬁes the desired proper-
ties — e.g., that the attacker can reach the attack goals by
exploiting a sequence of vulnerabilities present in the system.
The main focus of the CRACK tool is on scenario generation
and veriﬁcation, assuming that the user will manually specify
the theater. Hence, we view our efforts as complementary and
will explore the possibility of integrating with the CRACK
tool by generating ITSs that are compatible and can be used
directly as CRACK theaters.

IX. CONCLUSIONS AND FUTURE WORK
In this paper, we proposed a system that receives templates
and input parameters and generates a model of an organiza-
tional IT system. The generation is based on expert rules that
can be selected from the existing rule collection or added
manually as needed. We have successfully implemented a
proof-of-concept ITS generator and demonstrated its use to
generate a model of a target organizational ITS. The results
were validated to ensure that all speciﬁed rules were correctly
applied, and the performance of the implemented system was
evaluated. The measured performance is acceptable for the
intended ranges of inputs.

As future work, we intend to demonstrate the cybersecurity
use case and further test the system by developing a cyber-
security exercise theatre and scenario, validate the system
with the help of domain experts, extend the proposed method
and system to allow the use of probabilistic parameters, add
virtualization, cloud and outsourcing support, increase the

VOLUME , 2022

13

amount of technical details, and include additional network
segmentation rules. Preparation of a cybersecurity exercise
includes increasing the amount of technical details and
choosing vulnerabilities for the scenario. Expert assisted val-
idation involves getting feedback and suggestions regarding
the realism of the templates, rules, and generated ITS models,
as well as creating scripts and conﬁguring orchestration tools
to automatically deploy and test cyber ranges based on those
ITS models. Probabilistic parameters refer to both input
parameters and template attributes. Some parameters, such as
optional network segmentation rules, should be selected from
predeﬁned distributions instead of being selected explicitly,
and template attributes should support situations such as
when some employees are given additional laptops with a
certain probability. Virtualization and cloud support implies
that some software packages can represent virtual computers
and network components, which requires additions to several
steps of the proposed method and system. Addition of tech-
nical details, such as IP addresses and logs, would make the
system better suited for its use cases. Finally, the proposed
set of templates and rules currently supports only ﬁnancial
institutions. We intend to add more rules to support a larger
subset of organizations, including but not limited to banks,
IT companies, and critical infrastructure operators.

As the generated models of ITSs can be used to develop
and deploy cyber ranges and perform scientiﬁc experiments,
our results show that ITS model generators are a promising
area for future research.

.

APPENDIX A ATTRIBUTES OF SOFTWARE TEMPLATES
As noted in Section III-A, templates describe software pack-
ages, employee roles, and organizational services. This ap-
pendix provides a description of template attributes and ex-
amples of template objects. Software templates are described
using the following attributes, with example values for soft-
ware Microsoft Outlook 2019 written in brackets:

• cpe_idn: The CPE identiﬁer of the software package, or
a unique identiﬁer if the CPE identiﬁer does not exist
("cpe:/a:microsoft:outlook:2019");

• name: Human readable name of the software package

("Microsoft Outlook 2019");

• requires_local_software: Information about plausible
combinations of local dependencies that must be in-
stalled on a computer as prerequisites for this software
package
("(cpe:\/o:microsoft:windows)(_10|_server_2019).*");
• requires_network_services: Information about variants
of network services that this software must be able to
access ("(EmailServer).*");

• provides_network_services: List of network services
that this software provides to other software packages
and organizational services (provides none);

• provides_user_services: List of services that this soft-
ware provides to its users when installed on a worksta-

Kovaˇcevi´c et al.: Automatically generating models of IT systems

tion, distinct from network services provided for other
software and organizational services ("EmailClient");
• requires_hardware_quota: An abstract measure of the
amount of hardware resources (CPU, memory, disc,
etc.) required by this software package ("1");

• requires_hardware_quota_per_client: Additional hard-
ware quota required by a network service for each
additional connected client ("0");

• lc_0: License cost for ﬁrst

installation of software

("140")

• lc_n: Additional license cost for subsequent installations

of software ("140");

• oc_0: Maintenance cost for the ﬁrst installation of soft-

ware ("2");

• oc_n: Cost of maintenance for subsequent installations

of software ("1");

• data_types: Types of data that can be processed using
this software, including credential conﬁguration ("User-
Accounts:local|UserAccounts:domain", "Emails");

• database: Denotes whether this software is a database

management system ("0");

• social_engineering_attacks: Denotes whether this soft-
ware can be a channel for social engineering that could
be used for initial access into the network ("1").

Employee roles are described using role identiﬁers and
required variants of user services. For example, for em-
ployee role ceo, the following service requirements are de-
scribed: "(EmailCli).*", requiring an email client service,
"(Ofﬁce).*", requiring an Oﬁce suite, and "(Browser).*",
requiring web browsing support. Organizational services are
described in a similar manner, only with network service re-
quirements. For example, Internet_banking requires network
services matching "(InternetBanking).*", which ensures that
an Internet banking service will be exposed to the Internet.

APPENDIX B EXAMPLE OF A COMPLETE MODEL OF
ITS
This appendix contains detailed visualizations of the gener-
ated ITS model. The model was generated for an organization
containing 7 employee roles and 5 network segmentation
rules, as described in Section V. Only representative com-
puters are shown, because there are in total 100 employees
and 199 computers, each with distinct software installations,
and in some cases even distinct dataset instances.

Figure 13 provides an overview of computers and software
installations, Figure 14 shows dataset instances with linkage,
Figure 15 shows generated credentials, and Figure 16 shows
generated ﬁrewall rules. Icons and signs are the following:

• ERS are represented by user icons. ERS can contain
a large number of employees that are not shown, with
every employee having distinct computers, credentials,
etc.

• Organizational services are not shown. The only orga-
nizational service is Internet Banking, and it is linked
to the DMZ Internet banking server and the instance of
FinancialData:banking dataset linked to it.

14

VOLUME , 2022

Kovaˇcevi´c et al.: Automatically generating models of IT systems

• Network segments are represented by encircled shaded

areas with names underlined and written in italic.

• Representative computers are denoted using computer
icons, with numbers inside them signifying the count of
similar computers represented by the representative one.
• Software installations are represented using yellow ﬁle
icons, and linked to computers where they are installed.
• Network services are represented with gearbox icons,
and linked to software installations that offer them.
• Dataset instances are represented using database icons,
with a thick connector line indicating the location where
they are primarily stored, and dashed lines indicating
locations on which they can be accessed and people (or
ERS) who can access them.

• Ordinary credentials are shown as keyhole icons and
linked using ordinary lines to software packages that
accept them and employees who use them, and linked
with a directed line to the computer they are stored at.
• Privileged credentials (i.e. root) are shown as lock icons,
with the same pattern of linkage as ordinary credentials.

• Domain credentials are indicated using the "@" sign.
• Firewall rules are shown as lines with arrows that signify
the direction in which establishing connections is al-
lowed. Firewall rules do not need to be deﬁned between
objects within the same network segment, because net-
work trafﬁc ﬁltering is performed only when objects
from different network segments are involved.

ACKNOWLEDGMENT
The authors would like to thank Bruno Bijeli´c for his work
on the visualizations in this article. Icons in diagrams were
obtained from www.ﬂaticon.com. Attribution lines required
by license terms are the following:

• Icon made by Freepik from www.ﬂaticon.com
• Icon made by Flat Icons from www.ﬂaticon.com
• Icon made by Vectors Market from www.ﬂaticon.com
• Icon made by DinosoftLabs from www.ﬂaticon.com

This work was supported in part by the research and
development project Cyber Conﬂict Simulator, co-ﬁnanced
by the EU under Grant KK.01.2.1.01.0054.

REFERENCES

[1] M. M. Yamin, B. Katt, and V. Gkioulos, “Cyber ranges and security
tools and architecture,” Computers
[Online]. Available: https:

testbeds: Scenarios,
& Security, vol. 88, p. 101636, 2020.
//www.sciencedirect.com/science/article/pii/S0167404819301804

functions,

[6] R. A. Rossi and N. K. Ahmed, “The network data repository with
interactive graph analytics and visualization,” in AAAI, 2015. [Online].
Available: http://networkrepository.com

[7] Z. C. Schreuders, T. Shaw, M. Shan-A-Khuda, G. Ravichandran,
J. Keighley, and M. Ordean, “Security scenario generator (secgen): A
framework for generating randomly vulnerable rich-scenario vms for
learning computer security and hosting CTF events,” in 2017 USENIX
Workshop on Advances in Security Education (ASE 17). Vancouver,
BC: USENIX Association, Aug. 2017. [Online]. Available: https://www.
usenix.org/conference/ase17/workshop-program/presentation/schreuders
[8] J. Eckroth, K. Chen, H. Gatewood, and B. Belna, “Alpaca: Building
dynamic cyber ranges with procedurally-generated vulnerability lattices,”
in Proceedings of the 2019 ACM Southeast Conference, ser. ACM SE ’19.
New York, NY, USA: Association for Computing Machinery, 2019, p.
78–85. [Online]. Available: https://doi.org/10.1145/3299815.3314438
[9] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. M. Wing, “Automated
generation and analysis of attack graphs,” in Proceedings of the 2002 IEEE
Symposium on Security and Privacy, ser. SP ’02. USA: IEEE Computer
Society, 2002, p. 273.

[10] X. Ou, W. F. Boyer, and M. A. McQueen, “A scalable approach to
attack graph generation,” in Proceedings of the 13th ACM Conference on
Computer and Communications Security, ser. CCS ’06. New York, NY,
USA: Association for Computing Machinery, 2006, p. 336–345. [Online].
Available: https://doi.org/10.1145/1180405.1180446

[11] A. Singhal and X. Ou, “Security risk analysis of enterprise networks using
probabilistic attack graphs,” in Network Security Metrics. Springer, 2017,
pp. 53–73.

[12] J. Homer, X. Ou, and D. Schmidt, “A sound and practical approach to
quantifying security risk in enterprise networks,” Kansas State University
Technical Report, pp. 1–15, 2009.

[13] M. C. Ghanem and T. M. Chen, “Reinforcement learning for efﬁcient
network penetration testing,” Information, vol. 11, no. 1, 2020. [Online].
Available: https://www.mdpi.com/2078-2489/11/1/6

[14] J. A. Bland, M. D. Petty, T. S. Whitaker, K. P. Maxwell, and
W. A. Cantrell, “Machine learning cyberattack and defense strategies,”
Computers & Security, vol. 92, p. 101738, 2020. [Online]. Available:
https://www.sciencedirect.com/science/article/pii/S0167404818309799

[15] ITS-generator, “ITS generator dataset,” https://its-generator.github.io/

model-dataset/, 2021.

[16] Gartner, “Gartner glossary: Information technology,” 2021, [Online;
accessed 3-May-2021]. [Online]. Available: https://www.gartner.com/en/
information-technology/glossary/it-information-technology

[17] L. De Moura and N. Bjørner, “Z3: An efﬁcient smt solver,” in Proceedings
of the Theory and Practice of Software, 14th International Conference on
Tools and Algorithms for the Construction and Analysis of Systems, ser.
Berlin, Heidelberg: Springer-Verlag, 2008, p.
TACAS’08/ETAPS’08.
337–340.

[18] M. S. Andersen, J. Dahl, and L. Vandenberghe, “CVXOPT: A python
package for convex optimization, version 1.2.” 2021. [Online]. Available:
cvxopt.org

[19] C. Grosan and A. Abraham, “Rule-based expert systems,” in Intelligent

systems. Springer, 2011, pp. 149–185.

[20] Wikipedia contributors, “Active directory — Wikipedia,

the free
encyclopedia,” 2021, [Online; accessed 2-May-2021]. [Online]. Available:
https://en.wikipedia.org/wiki/Active_Directory

[21] K. Wagstaff, C. Cardie, S. Rogers, S. Schroedl et al., “Constrained k-
means clustering with background knowledge,” in Icml, vol. 1, 2001, pp.
577–584.

[22] EC, “Share of enterprise sizes in the non-ﬁnancial business economy in
the european union (eu27) countries in 2020,” https://www.statista.com/
statistics/939721/eu-enterprise-size-share/, 2021.

[2] J. Pollard and C. O’Malley, “New Tech: Cyber Ranges, Q3 2019 –

[23] K. Calvert, M. Doar, and E. Zegura, “Modeling internet topology,” IEEE

Forrester’s Landscape Overview Of 14 Provider,” July 2019.

Communications Magazine, vol. 35, no. 6, pp. 160–163, 1997.

[3] E. Ukwandu, M. A. B. Farah, H. Hindy, D. Brosset, D. Kavallieros,
R. Atkinson, C. Tachtatzis, M. Bures, I. Andonovic, and X. Bellekens, “A
review of cyber-ranges and test-beds: current and future trends,” Sensors,
vol. 20, no. 24, p. 7148, 2020.

[4] E. Russo, G. Costa, and A. Armando, “Building next generation
cyber ranges with crack,” Computers & Security, vol. 95, p. 101837,
2020. [Online]. Available: https://www.sciencedirect.com/science/article/
pii/S0167404820301103

[5] J. Leskovec and A. Krevl, “SNAP Datasets: Stanford large network dataset

collection,” http://snap.stanford.edu/data, Jun. 2014.

[24] C. Palmer and J. Steffan, “Generating network topologies that obey power
laws,” in Globecom ’00 - IEEE. Global Telecommunications Conference.
Conference Record (Cat. No.00CH37137), vol. 1, 2000, pp. 434–438
vol.1.

[25] A. Medina, A. Lakhina, I. Matta, and J. Byers, “Brite: an approach to
universal topology generation,” in MASCOTS 2001, Proceedings Ninth
International Symposium on Modeling, Analysis and Simulation of Com-
puter and Telecommunication Systems, 2001, pp. 346–353.

[26] J. Tomasik and M.-A. Weisser, “ashiip: Autonomous generator of random
internet-like topologies with inter-domain hierarchy,” in 2010 IEEE Inter-

VOLUME , 2022

15

Kovaˇcevi´c et al.: Automatically generating models of IT systems

FIGURE 13. Generated computers and software installations with linkage to ERS, user services, and network services. Organizational service Internet banking
linked to the Internet Banking Server software in the DMZ is not shown.

16

VOLUME , 2022

Kovaˇcevi´c et al.: Automatically generating models of IT systems

FIGURE 14. Generated dataset instances with linkage to ERS, organizational services, and software installations.

VOLUME , 2022

17

Kovaˇcevi´c et al.: Automatically generating models of IT systems

FIGURE 15. Generated credentials with linkage to ERS, software installations, and computers on which they are stored.

18

VOLUME , 2022

Kovaˇcevi´c et al.: Automatically generating models of IT systems

FIGURE 16. Generated ﬁrewall rules, represented by lines with arrows. Arrows denote the direction in which connections are allowed to be established. Rules for
administration are omitted for clarity.

VOLUME , 2022

19

Kovaˇcevi´c et al.: Automatically generating models of IT systems

ANTE ÐEREK is an assistant professor at the
Faculty of Electrical Engineering and Computing,
University of Zagreb. His research focuses on ap-
plying formal methods to problems in computer
security, privacy and cryptography. He participates
in a number of national and EU-funded projects in
the area of computer security.

national Symposium on Modeling, Analysis and Simulation of Computer
and Telecommunication Systems, 2010, pp. 388–390.

[27] G. Palla, L. Lovász, and T. Vicsek, “Multifractal network generator,”
Proceedings of the National Academy of Sciences, vol. 107, no. 17, pp.
7640–7645, 2010. [Online]. Available: https://www.pnas.org/content/107/
17/7640

[28] L. Saino, C. Cocora, and G. Pavlou, “A toolchain for simplifying net-
work simulation setup,” in Proceedings of the 6th International ICST
Conference on Simulation Tools and Techniques, ser. SimuTools ’13.
Brussels, BEL: ICST (Institute for Computer Sciences, Social-Informatics
and Telecommunications Engineering), 2013, p. 82–91.

[29] J. Tomasik and M.-A. Weisser, “Internet topology on as-level: Model,
generation methods and tool,” in International Performance Computing
and Communications Conference, 2010, pp. 263–270.

[30] N. Wagner, C. ¸S. ¸Sahin, M. Winterrose, J. Riordan, J. Pena, D. Hanson, and
W. W. Streilein, “Towards automated cyber decision support: A case study
on network segmentation for security,” in 2016 IEEE Symposium Series on
Computational Intelligence (SSCI).

IEEE, 2016, pp. 1–10.

[31] N. Wagner, C. ¸S. ¸Sahin, J. Pena, J. Riordan, and S. Neumayer, “Capturing
the security effects of network segmentation via a continuous-time markov
chain model,” in Proceedings of the 50th Annual Simulation Symposium,
2017, pp. 1–12.

[32] N. Wagner, C. ¸S. ¸Sahin, J. Pena, and W. W. Streilein, “Automatic gen-
eration of cyber architectures optimized for security, cost, and mission
performance: a nature-inspired approach,” in Advances in Nature-Inspired
Computing and Applications. Springer, 2019, pp. 1–25.

[33] N. Mhaskar, M. Alabbad, and R. Khedri, “A formal approach to network

segmentation,” Computers & Security, vol. 103, p. 102162, 2021.

IVAN KOVA ˇCEVI ´C was born in Rijeka, Croatia.
He received his B.S. and M.S. degrees from Uni-
versity of Zagreb, Faculty of Electrical Engineer-
ing and Computing in 2015 and 2017 respectively,
and currently works there as a Research Associate.
From January 2018 to December 2020, he worked
on the research project CCS (Cyber Conﬂict Simu-
lator), aiming to simulate cyber incidents for cyber
security exercises. At the present, he works on two
projects. The ﬁrst is related to security of critical
infrastructures, and the second aims to ﬁnd compromised websites within
the Croatian cyberspace. His scientiﬁc and professional interests lie in the
ﬁelds of cybersecurity, computer networks, and software engineering, with
his doctoral research focused on automating preparation of cybersecurity
exercises.

STJEPAN GROS is an assistant professor at the
Faculty of Electrical Engineering and Computing,
University of Zagreb. His scientiﬁc and profes-
sional interests are in the ﬁeld of information and
cyber security and the application of advanced
methods in solving problems in these areas. He
also deals with issues of research and development
management. Stjepan Groš participates in the im-
plementation of several EU-funded projects in the
ﬁeld of cyber security, focusing on the study of
attacker behavior and automation using machine learning algorithms. He has
published a number of papers in the ﬁeld of information security, computer
networks and operating systems.

20

VOLUME , 2022

