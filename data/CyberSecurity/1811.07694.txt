International Conference on Cyber Security and Computer Science (ICONCS’18), 
Oct 18-20, 2018 Safranbolu, Turkey 

Algorithms for Runtime Generation of 
Homogeneous Classes of Objects 

Taras Shevchenko National University of Kyiv, Kyiv/Ukraine, dmytro.terletskyi@gmail.com 

D. O. Terletskyi 

Abstract  –  This  paper  contains  analysis  of  main  modern 
approaches to dynamic code generation, in particular creation of 
new  classes  during  program  execution.  The  main  attention  was 
paid  to  universal  exploiters  of  homogeneous  classes  of  objects, 
which were proposed as a part of such knowledge-representation 
model  as  object-oriented  dynamic  networks,  as  the  tools  for 
creation  of  new  classes  of  objects  in  program  runtime.  As  the 
result, algorithms for implementation of such universal exploiters 
of  classes  of  objects  as  union,  intersection,  difference  and 
symmetric  difference  were  developed.  These  algorithms  can  be 
used  in  knowledge-based  intelligent  systems, which are based on 
object-oriented  dynamic  networks,  and  they  can  be  adapted  for 
some  object-oriented  programming  languages  with  powerful 
metaprogramming opportunities. 

Keywords – runtime code generation, runtime class generation, 

universal exploiters of classes, homogeneous classes.  

I.  INTRODUCTION 

tools, 

techniques, 

As  the  result  of  intensive  development  of  programming 
languages  and  technologies  during  a  few  last  decades,  many 
technologies  and 
new  programming 
directions within the area have  aroused. One of the important 
and  attractive  directions  within  the  modern  programming  is 
metaprogramming,  the  main  ideas  of  which  is  an  ability  of 
programs  to  analyze,  modify  and  generate  codes  of  other 
programs,  including  their  own.  Such  approach  is  aimed  at 
automation  of  some  phases  of  software  development  and 
increasing  of  adaptability  and  scalability  of  the  developed 
software. 

Currently  code  generation  is  the  most  interesting  part  of 
metaprogramming. It can be used for generation of some parts 
of  programs  codes,  as  well  as  for  generation  of  whole 
programs.  For  today  there  are  two  main  approaches  to  code 
generation:  compile-time  code  generation  (CTCG)  and 
runtime code generation (RTCG) [1, 2].  

During CTCG, code generation is performed on the stage of 
program  compilation,  when  a  compiler  analyzed  meta-
to 
structure  of  a  program  and 
corresponding  executable  machine  codes.  After  that  meta-
structure of the program is not accessible within the run-time, 
that 
static 
metaprogramming.  Usually  it  can  be  implemented  within 
compiled high-level programming languages with static typing, 
such as C++, C#, Java, Scala, etc. 

such  approach  also  known  as 

transforms 

its  code 

is  why 

During  RTCG,  code  generation  performs  on  the  stages  of 
program  execution,  when  interpreter  can  modify  existed 
program’  codes  and  generate  new  codes.  In  this  case,  whole 

1 

program’  meta-structure  is  accessible  for  interpreter  in  run-
time,  that  is  why  such  approach  is  also  known  as  dynamic 
metaprogramming.  Usually  it  can  be  implemented  within 
interpreted  (and  some  compiled)  high-level  programming 
languages with dynamic typing, such as Smalltalk-80, Squeak, 
Lisp, Python, Ruby, Groovy, etc. 

II.  CODE GENERATION WITHIN OBJECT-ORIENTED 
PROGRAMMING 

Nowadays  object-oriented programming (OOP) is the most 
popular  and  widespread  programming  paradigm  within  the 
area of software development. Many of modern programming 
languages  support  OOP  that  is  why  large  percent  of  modern 
software has object-oriented nature. 

Taking into account that one of the main concepts of class-
based  OOP is a class, consequently, code  generation process, 
in  most  cases,  means  generation  of  new  classes.  It  can  be 
achieved  using  different  OOP  languages  and  both  mentioned 
approaches  to  code  generation,  however  RTCG  is  more 
flexible then CTCG. 

One  of  the  OOP  languages,  which  support  RTCG,  is 
Python,  which  provides  such  syntactic  construction  as 
metaclasses,  metaattributes  and  metamethods,  which  allow 
modification  of  existed  classes of objects, their attributes and 
methods,  and  creation  of  new  ones  [3-5].  Another  powerful 
OOP  language,  which  supports  RTCG,  is  Ruby,  which, 
similarly  to  Python,  supports  mechanisms  of  reflection  and 
provides  ability  to  change  the  structure  of  the  classes,  their 
attributes  and  methods  dynamically  [6-8].  These  languages 
provide  developers  with  very  powerful  toolkits  for  object-
oriented  RTCG.  Using  them,  a  developer  can  create  new 
classes  of  objects  and  manipulate  them  in  runtime  in  various 
ways, for example, using for this software creational patterns, 
polymorphic  metaclasses,  metaattributes  and  metamethods, 
etc. 

III.  CLASS GENERATION WITHIN OBJECT-ORIENTED 
KNOWLEDGE REPRESENTATION 

Runtime  code  generation  or  runtime  class  generation  is 
important not only within area of OOP, it also plays significant 
role  within  area  of  intelligent  systems,  in  particular  object-
oriented  knowledge-based  systems  (OOKBS)  [9].  As  it  is 
known,  OOKBSs  very  often  operate  with  models  of  different 
essences  from  various  domains.  Usually  classes  are  used  for 
modeling  of  abstract  essences,  while  objects  of  these  classes 
are  used  for  modeling  of  concrete  essences.  For  adaptability 

 
 
and  scalability  of  such  systems,  they  must  have  an  ability  to 
create  models  of  new  discovered  essences  within  particular 
domain.  Therefore,  generation  of  new  classes  is  an  important 
task for OOKBSs.  

However,  generation  of  new  classes,  using  some  templates 
and  polymorphic  structures,  is  not  enough  for  intelligent 
systems,  because  such  systems  should  also  have  some 
analytical  abilities,  for  example  an  ability  to  compare  a  few 
different classes and find their common and unique parts. Such 
skills  can  be  very  useful  in  the  processes  of  recognition, 
classification, 
learning,  decision  making,  generation  and 
extraction of new knowledge from previously known ones, etc. 
Such  abilities  can  be 
implemented  using  appropriate 
metaprogramming 
toolkits,  which  provide  modern  OOP 
languages like Python or Ruby.  

IV.  CONCEPTS OF CLASSES WITHIN OBJECT-ORIENTED 
DYNAMIC NETWORKS 

The  design  and  development  of  any  object-oriented  KBS 
requires  choosing  of  particular  object-oriented  knowledge 
representation  model  (OOKRM).  Nowadays  most  famous 
OOKRMs  are  frames  [10-12],  class-based  OOP  [13,  15]  and 
prototype-based OOP [13, 14]. However, there is another one 
object-oriented  KRM,  which  called  object-oriented  dynamic 
networks (OODN) [16, 9]. All these KRMs are object-oriented 
ones, but, in the same time, they use different concepts of class 
and  object.  Therefore,  processes  of  RTCG  within  OOKBSs, 
which are based on these KRMs, will have the differences. 

Concept and structure of the class within frames and class-
based OOP is very similar, while structure of the class within 
OODN has some specific peculiarities. First of all, within the 
frames,  as  well  as  within  the  class-based  OOP,  there  is  one 
kind of classes – homogeneous classes. Objects of such classes 
have  the  same  structure  as  their  classes.  However,  within  the 
OODN  there  are  three  kinds  of  class:  homogeneous  classes, 
single-core  and  multi-core  heterogeneous  classes  of  objects. 
As  it  was  shown  in  [18,  17,  9],  heterogeneous  classes  have 
strong  connection  with  homogeneous  classes  and  in  some 
cases are much effective then the last ones.  
Let us consider the main definitions. 
Definition 1. Homogeneous class of objects 

 is a tuple of 

the following form 

where 
 is a specification (a vector of properties), which 
defines some  quantity of objects with the same structure, and 
  is  a  signature  (a  vector  of  methods),  which  can  be 

applied to them. 

This definition is also suitable for concepts of classes within 
the frames and class-based OOP. All details about definitions 
of  specifications,  signatures,  as  well  as  about  properties  and 
methods within the OODN, are represented in [9, 16, 18]. 

Definition 2. Single-core heterogeneous class of objects 

is a tuple of the following form 

where 
, 
which  contains  properties  and  methods  that  are  common  for 
, 
,  and 
types  of  objects 

 is a core  of the class 

where 

, 

,  are  their  projections,  which  contain 

properties and methods which are common only for type 

. 

All  details  about  equivalence  of  properties  and  methods 
within the OOND are represented in [9]. Main peculiarities of 
single-core  heterogeneous  classes  of  objects  and 
their 
properties are described in [9, 17]. 

The  concept  of  single-core  heterogeneous  class  of  objects 
shows the difference between notion of  class and type, which 
are  equivalent  within  the  frames  and  class-based  OOP. 
Analyzing  Def.  2,  we  can  see  that  single-core  heterogeneous 
class  of  objects  can  define  objects  of  different  structure,  i.e. 
objects of different types. These types are not equivalent,  but 
can have  some  equivalent properties or methods. That is why 
within OODN notion of class and of type are different. 

Definition 3. Type 

 of single-core heterogeneous class of 

objects 

is 

a 

homogeneous 

,  where 

class 

of 

objects 
  is  a  core  of 

class 

, and 

 is its 

-th projection, where 

, 

, 

, where 

 is a quantity of types which are 

defined by class 

. 

V.  CLASS GENERATION WITHIN OBJECT-ORIENTED DYNAMIC 
NETWORKS 

One  more  distinctive  feature  of  OODN  is  that  it  provides 
tools for modification of previously defined and for generation 
of  new  classes  of  objects,  called  modifiers  and  exploiters 
respectively [9, 17]. Let us consider notion of exploiters within 
the OODN and its connection with RTCG.  

General  definition  of  exploiters  can  be  formulated  in  the 

following way. 

Definition  4.  Exploiter  is  a  function  (method),  which  uses 
objects and classes of objects as unchangeable parameters for 
creation of new objects, classes, sets and multisets of objects. 

Analyzing  this  definition,  we  can  conclude  that  exploiters 
can  be  used  not  only  for  creation  of  new  classes  of  objects. 
However,  in  this  paper  we  are  going  to  consider  their 
application only for this purpose. 

The  notion  of  exploiter  allows  definition  of  various 
exploiters within OODN, however most of them will be locally 
closed  i.e.  they  cannot  be  applied  to  different  classes. 
Nevertheless,  there  are  universal  exploiters,  which  can  be 
applied  to  any  class  of  objects.  Therefore,  such  universal 
exploiters  of  classes,  as  union,  homogeneous  intersection, 
inhomogeneous  intersection,  difference,  symmetric  difference 
and cloning were proposed in [9]. 

Let  us  consider  definitions  of  union,  homogeneous 
intersection, difference and symmetric difference exploiters of 
classes. 

2 

T))(),((TFTPT))),(),...,(()),(),...,(((11TfTfTpTpmn)(TP)(TFT)),(),...,(),((11lltprtprTCoreT))(),(()(TFTPTCoreTltt,...,1))(),(()(iiiitFtPtprri,1lrititT))(),((jjitprTCoret)(TCoreT)(jjtprjni,1mj,1nmnT 
 
 
 
 
 
Definition  5.  Union 

  of  classes  of  objects 

where 

 is 

-th property of type 

, 

, and 

, 

,  which  define 

  types  of  objects 

 is 

-th property of type 

, 

. 

respectively,  where 

,  is  the  new    class  of 

objects 

  which  defines  types  of  objects 

,  such 

Universal  exploiter  of  difference  allows  creation  of  new 
,  which  can  be  homogeneous  or 

class  of  objects 

that  

where 

, 

,  

, and  

where 

  is  a 

-th  type  of  class 

,  where 

, and 

 is a 

-th type of class 

, 

heterogeneous, depending on level of heterogeneity of classes 
  has  unique  properties  and  (or) 

,  when  class 

  and 
methods. 

Definition 8. Symmetric difference 

 between classes 

of objects 

 and 

, which define types of objects 

, 

. 

and 

, 

, 

respectively 

is 

the  new 

heterogeneous  class  of  objects 

,  which  defines  types  of 

Universal exploiter of union allows creation of new class of 
,  which  can  be  homogeneous  or  heterogeneous, 

objects 

objects 

depending on equivalence and level of heterogeneity of classes 

. 

Definition  6.  Homogeneous  intersection 

  of 

and 

, 

such 

that 

.  Symmetric  difference  between  classes  of 

objects 

 and 

 exists if, and only if  

classes  of  objects 

, 

,  which  define 

where 

  is  an 

-th  property  of  type 

, 

types  of  objects  respectively, 

,  is  the  new 

,  and 

  is  an 

-th  property  of  type 

, 

, 

homogeneous  class  of  objects 
objects 

, such that 

,  which  defines  type  of 

, 

. 

where 

  is  a  type  of  objects  defined  by  class 

, 

. 

Homogeneous intersection of classes of objects

 exists 

if, and only if 

where 

is 

-th  property  of 

type 

,  where 

 and 

. 

Universal  exploiter  of  homogeneous  intersection  allows 
creation  of  new  homogeneous  classes  of  objects 
,  when 
there are equivalent properties and (or) methods for all classes 

. 

Definition 7. Difference 

 between classes of objects 

  and 

,  which  define  types  of  objects 

  and 

, 

, respectively, is the new class of objects 

,  which  defines  types  of  objects 

,  such  that 

 and 

Universal exploiter of symmetric difference allows creation 
of  new  class  of  objects 
,  which  can  be  homogeneous  or 
heterogeneous, depending on level of heterogeneity of classes 
,  when  they  have  unique  properties  and  (or) 

  and 
methods.  

All these universal exploiters are formally defined, and can 
be extend for the classes within class-based OOP. However, it 
is necessary to develop corresponding efficient algorithms for 
their practical implementation. 

VI.  ALGORITHMS FOR IMPLEMENTATION OF SOME UNIVERSAL 
EXPLOITERS OF CLASSES 

Analyzing  definition  of  union’  exploiter,  we  can  conclude 
  classes  of  objects  requires  checking  of 
-tuples  of 

that  union  of 
equivalence  for  all  elements  of  all  possible 

properties 

methods 

  and 

of these 

classes. Therefore, if there is no any specific information about 
structures  of  these  classes,  which  could  help  to  reduce  the 
number  of  such  tuples,  the  approximate  complexity  of  the 
algorithm is equal to  

where 

, 

, 

. The difference between 

classes of objects 

 and 

 exists if, and only if  

where 

  is  a  dimension  of  the  class 

, 

,  i.e. 

quantity of properties, and 

 is a functionality of the 

3 

nTT...1nTT,...,12nnll,...11,...,11nllmT...1mtt,...,10),(|),,(212121wwwwttEqwwttmww,1,21nllm...11,1,|,!,...1...1...1mjkjkjmjmjkittEqttttkjtikTkli,1nk,1mjt...1jmT...1mj,1mT...1nTT,...,1nTT...1nTT,...,12nnll,...,11,...,11nllTt)),'()'(|'(),(iiittttttttitiTni,1nTT,...,1,1))(),...,((|))(),...,((1111niiniitptpEqtptpnn)(kitpkkikt)(,1kktDink,1TnTT,...,121\TT1T2T111,...,ntt221,...,mtt1,mn2\1T2\12\11,...,kttmnk22\112\1122\1|,,wijijwittttttt,|22\112\12\12\12\1wjitttttttki,1nj,1mw,11T2T,0,|,21212121wijiwijitptpEqtptp11jitp1i1jt11,1jtDi22witp2i2wt22,1wtDi2\1T1T2T1T21TT1T2T111,...,ntt221,...,mtt1,mn21T2\12\11,...,wtt1\21\21,...,qttmnqw1T2T,0,|,21212121jiiijiiitptpEqtptp11iitp1i1it1,1itDini,122jitp2i2jt22,1jtDimj,121T1T2T2nn))(),...,(),((2211nntPptPptPp))(),...,(),((2211nntFftFftFf)(...)()(21ntDtDtD),(...)()(21ntfunctfunctfunc)(itDitni,1)(itfunc 
 
 
 
 
 
 
 
 
 
 
 
 
 
class 

, i.e. quantity of methods. Taking into account this fact 

and  Def.  5,  it  is  possible  to  propose  the  following  algorithm 
for union of 

 classes. 

Algorithm of union 

Analyzing  Def.  7  we  can  see  that  it  defines  intersection  of 
classes as binary operation, however it can be generalized for 
the case of n classes. Taking into account Def. 7, it is possible 
to  propose  the  following  algorithm  for  difference  between 
class  and 

 classes. 

Input: classes of objects 

 (or their copies). 

Algorithm of difference 

1.  Consider and check the equivalence of all elements of all 
  and 

possible 

-tuples 

Input: class of objects 

 (or its copy) and classes of objects 

. 

classes 

. 

  constructed  from 

the 

1.  Consider and check the equivalence of all elements of all 
, 

possible  tuples  of  properties 

2.  If at some iteration such equivalence is found: 

and  methods 

,  constructed 

a  Copy this property (method) to the core of new class 

from the classes 

, where 

. 

of objects; 

b  Delete this property (method) from classes of objects 

(future projections). 

3.  Repeat  steps  1  and  2  until  the  end  of  consideration  and 
-tuples  of  properties 

comparison  of  all  possible 

(methods) of classes 

. 

Output: new single-core heterogeneous class of objects. 

As  we  can  see,  the  algorithm  can  receive  as  the  input 
parameters  classes  of  objects  or  their  copies.  If  it  receives 
access  to classes, then they will be  transformed into the parts 
of new class of objects. That is why if we need these classes to 
be unchanged after creation of their union, then we should use 
their copies. 

Analyzing  Def.  5  and  Def.  6,  we  can  conclude  that 
  can  be  computed  during  the 

intersection  of  classes 

calculation  of  their  union,  in  this  case  core  of  the  obtained 
.  Taking  into 
class  is  the  intersection  of  classes 

account  Def.  6,  it  is  possible  to  propose  the  following 
algorithm for intersection of 

 classes. 

Algorithm of intersection 

Input: classes of objects 

. 

1.  Consider and check the equivalence of all elements of all 
  and 

possible 

-tuples 

2.  If at some iteration such equivalence is found: 

a  Delete this property (method) from the class 

. 

3.  Repeat  steps  1  and  2  until  the  end  of  consideration  and 
comparison of all possible tuples of properties (methods) 
of classes 

. 

Output:  new  homogeneous  class  of  objects  if  difference 
between class 

 and classes 

 exists. 

Similarly  to  union,  the  algorithm  can  receive  as  one  of  the 
  or  its  copy.  If  it  receives  access  to 
input  parameters  class 
class, then it will be transformed into the new class of objects. 
That  is  why  if  we  need  this  class  to  be  unchanged  after 
, then 
creation of the difference between it and classes 

we should use the copy of 

. 

Taking  into  account  Def.  8,  it  is  possible  to  propose  the 
following  algorithm for  symmetric difference between classes 

and 

. 

Algorithm of symmetric difference 

Input: classes of objects 

 and 

 (or their copies). 

1.  Consider and check the equivalence of all elements of all 
and 

possible 

tuples 

classes 

 and 

. 

constructed 

from 

the 

classes 

. 

  constructed  from 

the 

2.  If at some iteration such equivalence is found: 
a  Delete this property (method) from classes 

and 

. 

2.  If at some iteration such equivalence is found: 

a  Copy this property (method) to new class of objects. 

3.  Repeat  steps  1  and  2  until  the  end  of  consideration  and 
-tuples  of  properties 

comparison  of  all  possible 

(methods) of classes 

. 

3.  Repeat  steps  1  and  2  until  the  end  of  consideration  and 
comparison of all possible tuples of properties (methods) 
of classes 

 and 

. 

Output:  new  single-core  inhomogeneous  class  of  objects  if 
symmetric difference between classes 

 exists. 

 and 

Output:  new  homogeneous  class  of  objects  if  intersection 
among classes 

 exists. 

Similarly to union and difference, the algorithm can receive 
as the input parameters classes of objects or their copies. If it 

4 

it2nntt,...,1n))(),...,((11nntPptPp))(),...,((11nntFftFfntt,...,1ntt,...,1nntt,...,1ntt,...,1ntt,...,12nntt,...,1n))(),...,((11nntPptPp))(),...,((11nntFftFfntt,...,1nntt,...,1ntt,...,1t2ntntt,...,1))(),((iitPptPp))(),((iitFftFfnttt,...,,1ni,1tnttt,...,,1tntt,...,1tntt,...,1t1t2t1t2t))(),((2211tPptPp))(),((2211tFftFf1t2t1t2t1t2t1t2t 
 
 
ser.  International  Book  Series  Information  Science  &  Computing, 
G. Setlak and K. Markov, Eds., ITHEA, 2014, vol. 30, pp. 123-136. 
[17]  D.  Terletskyi,  “Object-Oriented  Knowledge  Representation  and  Data 
Storage  Using  Inhomogeneous  Classes”,  in  Information  and  Software 
Technologies:  Proc.  of  23rd  Int.  Conf.,  ICIST  2017,  Druskininkai, 
Lithuania, October 12-14, 2017, ser. Communication in Computer and 
Information Science, R Domasevicius and V. Mikasyte˙, Eds. Springer, 
2017, vol. 756, pp. 48-61. 

[18]  D.  O.  Terletskyi  and  O.  I.  Provotar,  “Mathematical  Foundations  for 
Designing  and  Development  of  Intelligent  Systems  of  Information 
Analysis”,  Problems  in  Programming,  vol.  16,  No.  2-3,  pp.  233-241, 
May 2014. 

receives  access  to  classes,  then  they  will  be  transformed  into 
the parts of new class of objects. That is why if we need these 
classes  to  be  unchanged  after  creation  of  their  symmetric 
difference, then we should use their copies. 

VII.  CONCLUSIONS 

An  ability  of  knowledge-based  intelligent  systems  to 
generate  new  classes  of  objects  in  runtime  is  very  important 
feature,  which  allow increasing of adaptability and scalability 
of 
systems.  Therefore,  universal  exploiters  of 
homogeneous  classes of objects  were  considered in the paper 
as  a  tool  for  generation  of  new  classes  of  objects  in  program 
runtime. 

such 

The  main  result  of  the  paper  is  the  algorithms  for 
implementation  of  universal  exploiters  of  classes  of  objects, 
which  allow  dynamic  creation  of  new  classes.  As  the  result, 
algorithms  for  union,  intersection,  difference  and  symmetric 
difference  of  classes  of  objects  were  proposed.  These 
algorithms  can  be  useful  within 
the  knowledge-based 
intelligent  systems,  which  are  based  on  object-oriented 
dynamic  networks,  and  also  can  be  adapted  for  some  high-
level  object-oriented  programming  languages  equipped  by 
powerful  metaprogramming  toolkits,  such  as  Python,  Ruby, 
etc. 

However, despite all noted advantages, proposed algorithms 

require further analysis and optimization. 

REFERENCES 

[1]  F.  M.  Smith,  “Certified  Run-Time  Code  Generation”,  Ph.D.  Thesis, 
Faculty  of  the  Graduate  School,  Cornell University, Ithaca, New York, 
NY, USA, 2002. 

[2]  S.  Kamin,  “Routine  Run-time  Code  Generation”,  ACM  SIGPLAN 

Notices, Vol. 38(12) Dec 2003. 

[3]  M.  Lutz,  Learning  Python:  Powerful  Object-Oriented  Programming, 

5th ed., O’Reilly Media, Inc., 2013. 

[4]  D. Beazley and B. K. Jones, Python Cookbook: Recipes for Mastering 

Python 3, 3rd ed., O’Reilly Media, Inc., 2013.  

[5]  L.  Ramalho,  Fluent  Python:  Clear,  Concise,  and  Effective 

Programming, O’Reilly Media, Inc., 2015. 

[6]  D.  Flanagan  and  Yu.  Matsumoto,  The  Ruby  Programming  Language: 

Everything You Need to Know, O’Reilly Media, Inc., 2008. 

[7]  L.  Carlson  and  L.  Richardson,  Ruby  Cookbook:  Recipes  for  Object-

Oriented Scripting, 2nd ed., O’Reilly Media, Inc., 2015. 

[8]  P. Perrotta, Metaprogramming Ruby 2: Program like the Ruby Pros, 2nd 

ed., The Pragmatic Bookshelf, 2014. 

[9]  D. O. Terletskyi. “Object-Oriented Dynamic Knowledge Representation 
Model  within  Intelligent  Software  Systems”,  Ph.D.  Thesis,  Dept. 
Inform.  Syst., Faculty of Comput. Sci. and Cybern., Taras Shevchenko 
National University of Kyiv, Kyiv, Ukraine, 2018. 

[10]  M. Minsky, “A framework for representing knowledge,” AI Laboratory, 
Massachusetts Institute of Technology, Technical Report 306, 1974. 
[11]  R.  J.  Brachman  and  H.  J.  Levesque,  Knowledge  Representation  and 

Reasoning, Morgan Kaufmann Publishers, 2004. 

[12]  M. Negnevitsky, Artiﬁcial Intelligence: A Guide to Intelligent Systems, 

2nd ed., Addison-Wesley, 2004. 

[13]  I.  D.  Craig,  Object-Oriented  Programming  Languages:  Interpretation, 
ser. Undergraduate Topics in Computer Science, Springer, 2007. 
[14]  G. Blaschek, Object-Oriented Programming with Prototypes, Springer-

Verlag, 1994. 

[15]  G. Booch, R. A. Maksimchuk, M. W. Engle, B. J. Young, J. Conallen, 
and  K.  A.  Houston,  Object-Oriented  Analysis  and  Design  with 
Applications, 3rd ed., Addison-Wesley Professional, 2007. 

[16]  D. Terletskyi and A. Provotar, “Object-Oriented Dynamic Networks”, in 
Computational Models for Business and Engineering Domains, 1st ed., 

5 

 
