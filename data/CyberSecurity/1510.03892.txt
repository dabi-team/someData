6
1
0
2

n
a
J

3
1

]

R
C
.
s
c
[

3
v
2
9
8
3
0
.
0
1
5
1
:
v
i
X
r
a

Honeypot-powered Malware Reverse Engineering

Michele Bombardieri
Open Knowledge Technologies s.r.l.

Salvatore Castan`o
Open Knowledge Technologies s.r.l.

Piazza Vermicelli

Piazza Vermicelli

87036, Rende (CS) – Italy
michele.bombardieri@gmail.com

87036, Rende (CS) – Italy
salvatorecstn@gmail.com

Fabrizio Curcio
Centro di competenza ICT-SUD

Piazza Vermicelli

87036, Rende (CS) – Italy
curcio.fabrizio@gmail.com

Angelo Furfaro
DIMES – University of Calabria

87036, Rende (CS) – Italy
a.furfaro@dimes.unical.it

Helen D. Karatza
Department of Informatics - Aristotle University of Thessaloniki

54124 Thessaloniki – Greece
karatza@csd.auth.gr

Abstract

1

Introduction

Honeypots, i.e. networked computer systems spe-
cially designed and crafted to mimic the normal op-
erations of other systems while capturing and storing
information about the interactions with the world
outside, are a crucial technology into the study of
cyber threats and attacks that propagate and oc-
cur through networks. Among them, high interaction
honeypots are considered the most eﬃcient because
the attacker (whether automated or not) perceives
realistic interactions with the target machine. In the
case of automated attacks, propagated by malwares,
currently available honeypots alone are not special-
ized enough to allow the analysis of their behaviors
and eﬀects on the target system. The research pre-
sented in this paper shows how high interaction hon-
eypots can be enhanced by powering them with spe-
ciﬁc features that improve the reverse engineering ac-
tivities needed to eﬀectively analyze captured mali-
cious entities.

Nowadays, an ever growing number of systems and
devices interoperate and cooperate over the Internet
which has become a huge and very complex open dis-
tributed system. Being open is one of the features
that brought Internet to the role it plays into the
current IT scenario. However, this expose the inter-
connected services and devices to the risk of being
the target of Internet-enabled malicious entities also
known as malwares. A challenging goal of the re-
search eﬀorts directed in the Cyber Security ﬁeld is
the devising of eﬀective techniques and tools able to
face and defeat the attacks coming from such entities.
Hence, it is crucial to analyze and understand a mal-
ware behavior in order to identify the vulnerabilities
it exploits and to take the suitable countermeasures.
Malware activities are often detected a lot of time af-
ter the victim system has been violated and then it
is very diﬃcult to trace back the actions that have
been executed. A malware usually modiﬁes ﬁle sys-

1

 
 
 
 
 
 
tems, starts processes, initiates network connections
and steals information. All this actions need time to
be understood starting just from a binary ﬁle, which
often is the only tangible record of the malicious code
and which need to be analyzed once it has recovered
from the victim ﬁlesystem.

A honeypot [12] is a decoy system which aims at
looking like a real networked resource to the world
outside. It manifests a low or absent protection level
so as to draw attackers’ attention and to gather infor-
mation about their behavior while they gain access
to and interact with it. Most of the honeypots cur-
rently used are classiﬁed as having low interaction
[8, 10], which means that they host only emulated
services. With such a type of honeypots, it is hard to
study malware propagation in details because emu-
lating a service behavior is not a simple task and most
of these fake services oﬀer only a, somewhat limited,
support to network traﬃc analysis, command execu-
tion tracking and ﬁle modiﬁcation tracing. Such type
of honeypots are the most diﬀused, however smartly
crafted malwares and skilled attackers are able to rec-
ognize them and avoid of being caught or analyzed
[13].

On the other side, high interaction honeypots are
based on real operating systems. This factor lets the
malware or the attacker manifest his behavior com-
pletely without being stopped by the lack of unim-
plemented features which can be present in low in-
teraction honeypots. High interaction honeypots are
clearly more diﬃcult to handle because the attack
surface becomes very large along the fact that it is
nearly impossible to predict the attacker or malware
intentions with no previous knowledge.

We argue that enhancing high interaction honey-
pots by adding reverse engineering instrumentation
features will result in a great empowering of malware
analysis processes. This paper illustrates the design
and the features of HERESy (Honeypot Embedded
Reverse Engineering System), a modular high inter-
action honeypot system whose components work at
various levels: ﬁle system, network and process exe-
cution tracing. HERESy is able to create on-demand
an isolated environment for each attacker or malware
that accesses it by purposely exploiting the notion of
container [14]. For each isolated instance, the sys-

tem tracks all the attack lifecycle. The attacker or
the malware tries to connect to a particular service,
if the targeted service is handled by our system, then
a proxy intercepts the request and builds on the ﬂy
a container redirecting all the traﬃc to this instance.
From this point on all the actions performed by the
attacker are tracked and saved on the HERESy log-
ging and storage system.

The rest of this paper is organized as follows. Sec-
tion 2 presents the architecture of HERESy, the
roles of its components and how they work together.
Section 3 shows a practical example of a malware
being captured by the system and subsequently ana-
lyzed. Section 4 draws the conclusions and the future
work.

2 HEReSy Architecture

As pointed out in the previous section, the HERESy
architecture, depicted in the diagram of Fig. 1, is
composed by several modules, each of which is in
charge of performing a speciﬁc hijacking task on the
isolated running containers [14]. The proxy module
plays the role of container factory:
it builds up on-
demand a specialized container on the basis of the
protocol over which the potentially malicious remote
entity tries to access the system and then it redi-
rects all the subsequent incoming traﬃc to it. At
this point, HERESy begins the hijack: ﬁle system
modiﬁcations are tracked by the ﬁlesystem module
which exploits versioning control technologies; traﬃc
analysis is performed by the network sniﬃng mod-
ule; extraneous binaries, in case they are downloaded
by malwares or attackers, are detected by the process
execution tracing module. Fig. 2 depicts an activity
diagram that models the HERESy execution work-
ﬂow which handles connections attempts.

2.1 Proxy module

Once a connection attempt reaches the system, if the
proxy has been conﬁgured to handle the requested
service, a fresh new container is built on the ﬂy and
all the attacker’s traﬃc is redirected to it. Each at-
tacker will run and operate inside its own isolated

2

Figure 1: HERESy architecture

environment. When the attacker leaves, the envi-
ronment is destroyed after all the relevant data have
been suitably stored. To speed up the build opera-
tion, and hence to improve the HERESy responsive-
ness, an environment for each service is always up
and maintained ready to be used.

2.2 Filesystem module

One of the main problem with malicious code is that
more than often it modiﬁes the content of ﬁle system
resources. It is possible to track these modiﬁcations
by writing custom ﬁle systems or by hijacking func-
tion library calls. However, the former is an hard
task to accomplish because of the low level machinery
around the host operating system, the latter can be
ineﬀective because, if the malware calls into the ker-
nel bypassing the libraries, interception does not oc-
cur at all. The solution devised by HERESy consists
in exploiting versioning control software on the exist-
ing virtual ﬁle system layer. File system resources are
shared between the host HERESy system and the
current attacked environment. By using ﬁle system
notiﬁcation mechanism [7], each time a modiﬁcation,
creation or deletion happens, the system triggers the
versioning control software which tracks the updates.
This technique allows to explore the ﬁle system his-

Figure 2: HERESy process

tory going backward and forward in time. This in-
deed is crucial for tracing back the malware behavior
from the viewpoint of the action made on the ﬁle sys-
tem. The ﬁle system module of the current version
of HERESy uses of GIT as a versioning control soft-
ware and the Linux inotify API to handle events
[7] (see Fig. 3). Previous experiments used FUSE [1]
as a ﬁle system layer, however the integration with
docker was hard to achieve. Another project relaying
on GIT in a similar way is gitfs, a FUSE ﬁle system
which automatically converts all the changes made
into commits [2].

3

PROXYC1C2Cn...File systemNetworkProcessexecutionLogger HEReSyBuild environmentHandled protocolRefuse connectionProtocol not handledHandle new connectionVerify protocolStart process monitorTraffic redirectionStart versioning filesystemTraffic dumpHandledisconnectOrganize capturedInformationDestroy environmentDetect newprocessNot maliciousHijackMaliciousDetect access to filesystemNo modificationsLog modificationsModificationsCommit updatesFigure 3: File system module

2.3 Network module

Traﬃc generated by attackers or malicious software
is of course fundamental to track where the mali-
cious activities starts and where they try to propa-
gate. For each environment a complete network traf-
ﬁc dump is performed, so a clean data representation
of the network ﬂow is given to the threat analyst.
The system spawns a daemon for each sandbox en-
vironment which is built up. The module relays on
the libcap library and saves the attacker generated
traﬃc into the classical pcap format. So using the
berkeley packet ﬁltering [9] we are able to select just
the traﬃc generated by the target container.

2.4 Process execution module

For each kind of environment all the binaries are
hashed and the signatures are saved into the core sys-
tem memory. Each time a malicious software or the
attacker executes a binary, the command is logged.
Also, the module performs the binary hash and if
the calculated signature is not present into the white
list, the module starts tracking the process using the
dynamic binary instrumentation [6], so it dumps in-
structions and memory accesses saving the entire hos-
tile program execution ﬂow.

Figure 4, shows the process execution tracing step.
We use for the hashing process SHA512 which is con-
sidered strong enough to avoid collisions, so it be-

Figure 4: Process execution tracing module

comes diﬃcult for an attacker to generate a binary
which has the same hash to trick the system.

In practice, we used both CRIU [11] and Dy-
namoRIO [3] in order to trace the process execu-
tion and to dump its resources. The following strat-
egy has been employed to alternate our dynamoRIO
based tool with CRIU: the process is ﬁrst run inside
the dynamoRIO based tool, which detects whether the
process is hostile or not on the basis of the signa-
tures of the executable images used by the process;
in the case of a not trusted process, the tool begins
to dump all the executed instructions and if detects
a memory write it asks CRIU to dump all the process
resources and waits for its termination; CRIU receives
dump requests by means of a daemon which listen
on a socket for messages coming from the dynamoRIO
based tool; once CRIU completes its task, it notiﬁes
the dynamoRIO tool which then restarts its process
instrumentation activities. Each time the hostile pro-
cess accesses the memory, the tool switching, above
described, occurs again.

Currently, we are trying to improve this technique
in order to disarm debug-aware malwares which once
detect they are into a honeypot try to evade the sys-
tem, for example by killing themselves.

4

3 Experiments

HERESy has been tested by distributing it inside
a /16 network (i.e.
a campus network). Thou-
sands of attacks targeting various protocols have been
detected. Among them, the most targeted were
FTP, SSH, TELNET, HTTP and SMB. Indepen-
dently from the kind of attack, the system is able
to recognize and log all the spawned commands. If
the executed binaries belong to the attacked envi-
ronment, their execution is just logged, otherwise,
i.e. the process is recognized alien, the dynamic bi-
nary instrumentation module begins tracing it. All
the instructions executed are saved in a separate log
for each traced process. Furthermore, an experimen-
tal process dumper takes periodic snapshots saving
all the information regarding ﬁle descriptors, mem-
ory, registers, and so on. All the ﬁle system accesses,
which concern modiﬁcations, are saved on a version-
ing basis. All this workﬂow allowed to observe al-
most completely the behavior of various malwares
and permitted to accelerate the reverse engineering
process. The vast majority of the captured attacks
comes from the BRIC area, most of them targeting
embedded systems, many others have as target com-
mon platforms like x86 64 and others were equipped
of multi-platform droppers written in common script
languages such as bash, Python, etc. The deployment
of HERESy instances in various machines inside this
big network permitted to observe that the behavior
of some malware is also iterative, in the sense that an
attack on a low IP address inside the same network
reached high IP number addresses just some minutes
later. So, we observed basically that this kind of mal-
ware tries to reproduce itself enumerating many IP
addresses and searching for the same vulnerability.

3.1 A simple malware

During the testing phase of HERESy, we captured
a series of malwares. In this section, we will describe
the most simple of them. We analyzed the his be-
havior by extracting the data captured by HERESy.
The malware entered the honeypot through a brute
force attack to the SSH protocol. Once it guessed
the password, it reproduced itself on a speciﬁc loca-

Figure 5: Behavior of a captured malware

tion of the ﬁle system. So we tracked the copy of
the malicious binary inside our ﬁle system replica.
Then, the network module sniﬀed all the connections
to a malicious FTP server performed by the mal-
ware and controlled by an attacker. By looking at
the memory dump of the malware, we found out a
behavior that it was not observed during the very
ﬁrst static analysis phase. The malware had various
encrypted strings representing well known document
extensions. Observing the memory into his various
modiﬁcations states revealed those strings and look-
ing at the dumped code accessing this memory block
we observed the intention to search and upload the
ﬁles matching such extensions. When the malware
ends its execution it deletes itself and his copies from
the ﬁles system, however the HERESy instrumenta-
tion allowed us to save these binaries and the other
replicas. The behavior of the captured malware is
sketched in the activity diagram of Fig. 5

5

3.2 Real Time Monitoring

To observe the behavior of HERESy we developed
a centralized system to gain and transmit infor-
mation about its operation. Each module (except
the networking module) sends updates about new
connections, command executed and ﬁle modiﬁca-
tions to a daemon which in turns acts as a web
server. Our clients connects to this daemon through
WebSockets [15] and monitors in real time all the
actions performed by attackers/malwares inside the
isolated environments. Using this strategy we can
observe the overall system status and also it come
useful to debug its behavior. So we deploy multi-
ple instances of the HERESy architecture inside our
huge network using our cloud or machine which are
up for the purpose and we are constantly aware of
the threats which menace our institutional infrastruc-
tures. The information generated by the modules is
also stored into a NoSQL database [4] in order to al-
low to query oﬀ-line the system and make statistics
about the attacks received every day. The employed
database is ElasticSearch [5] because of its good per-
formances. We observed that it is able to execute
a thousand of writes per seconds without a signiﬁ-
cant impact on performance of the machine used for
storage purposes.

4 Conclusions

In this paper we presented HERESy, a honeypot
software system born to support and enhance the
eﬀectiveness of malware reverse engineering activi-
ties. HERESy is able to create on-demand high-
interaction isolated environment which are exploited
to capture malware behavior and store the byprod-
ucts of its activity. HERESy features have proven
to be useful tools for easing and powering malware
analysis tasks.

Future improvements, which are already in exper-
imentation, are adding support for process memory
dump at speciﬁc points of execution and the possi-
bility to navigate through these snapshots in order
to restore a particular status of the malicious pro-
cess inside the environment. Another characteris-

tic on which we are currently working on is a pro-
cedure to automatically generate signatures for new
malwares and communicate these to IDS in order for
them to automatically recognize and block future at-
tacks. During the HERESy development and the
subsequent testing phase we captured a huge num-
ber of malwares and we studied their behavior us-
ing the above cited instruments. The main features
of HERESy, i.e. the ability of dumping ﬁle system
modiﬁcations and the network and process tracking,
greatly relieved our work on threat analysis.

References

[1] Filesystem in userspace.

http://fuse.

sourceforge.net/.

[2] gitFS.
docs/.

https://www.presslabs.com/gitfs/

[3] D. Bruening, T. Garnett, and S. Amarasinghe.
An infrastructure for adaptive dynamic opti-
mization. In Code Generation and Optimization,
2003. CGO 2003. International Symposium on,
pages 265–275, 2003.

[4] M. J. Fowler and P. J. Sadalage. NoSQL Dis-
tilled: A Brief Guide to the Emerging World of
Polyglot Persistence. Addison-Wesley, 2012.

[5] C. Gormley and Z. Tong. Elasticsearch: The
Deﬁnitive Guide. ”O’Reilly Media, Inc.”, 2015.

[6] K. Hazelwood. Dynamic binary modiﬁcation:
Tools, techniques, and applications. Synthesis
Lectures on Computer Architecture, 6(2):1–81,
2011.

[7] M. Kerrisk. Filesystem notiﬁcation. https://

lwn.net/Articles/605313/, 2014.

[8] A. Mairh, D. Barik, K. Verma, and D. Jena.
Honeypot in network security: A survey. In Pro-
ceedings of the 2011 International Conference on
Communication, Computing & Security, ICCCS
’11, pages 600–605, New York, NY, USA, 2011.
ACM.

6

[9] S. McCanne and V. Jacobson. The BSD packet
ﬁlter: A new architecture for user-level packet
capture. In Proceedings of the Winter USENIX
1993, pages 259–270, San Diego (CA), January,
25-29 1993. USENIX Association.

[10] I. Mokube and M. Adams. Honeypots: concepts,
approaches, and challenges. In Proceedings of the
45th annual southeast regional conference, pages
321–326. ACM, 2007.

[11] T. Sch¨urmann. Save and restore linux processes
with CRIU. ADMIN Magazine, 22, 2014.

[12] L. Spitzner. Honeypots: catching the insider
threat. In Computer Security Applications Con-
ference, 2003. Proceedings. 19th Annual, pages
170–179, Dec 2003.

[13] D. Sysman, G. Evron, and I. Sher. Breaking
honeypots for fun and proﬁt, 8 2015. Talk at
Blackhat 2015.

[14] J. Turnbull. The Docker Book. 2015.

[15] V. Wang, F. Salim, and P. Moskovits. The
Deﬁnitive Guide to HTML5 WebSocket, chap-
ter APPENDIX A: WebSocket Frame Inspection
with Google Chrome Developer Tools. Apress,
2013.

7

