Diversity-By-Design for Dependable and Secure
Cyber-Physical Systems: A Survey

Qisheng Zhang, Abdullah Zubair Mohammed, Zelin Wan, Jin-Hee Cho, Senior Member, IEEE, and Terrence J.
Moore, Member, IEEE

1

0
2
0
2

l
u
J

6
1

]

R
C
.
s
c
[

1
v
8
8
6
8
0
.
7
0
0
2
:
v
i
X
r
a

Abstract—Diversity-based security approaches have been stud-
ied for several decades since the 1970’s. The concept of diversity-
by-design emerged in the 1980’s and, since then, diversity-based
system design research has been explored to build more secure
and dependable systems. In this work, we are particularly inter-
ested in providing an in-depth, comprehensive survey of existing
diversity-based approaches, insights, and future work directions
for those who want to conduct research on developing secure and
dependable cyber-physical systems (CPSs) using diversity as a
system design feature. To be speciﬁc, this survey paper provides:
(i) The common concept of diversity based on a multidisciplinary
study of diversity from nine different ﬁelds along with the
historical evolution of diversity-by-design for security; (ii) The
design principles of diversity-based approaches; (iii) The key
beneﬁts and caveats of using diversity-by-design; (iv) The key
concerns of CPS environments in introducing diversity-by-design;
(v) A variety of existing diversity-based approaches based on ﬁve
different classiﬁcations; (vi) The types of attacks mitigated by
existing diversity-based approaches; (vii) The overall trends of
evaluation methodologies used in diversity-based approaches, in
terms of metrics, datasets, and testbeds; and (viii) The insights,
lessons, and gaps identiﬁed from this extensive survey.

Index Terms—Diversity-by-design, software diversity, hetero-

geneity, security, dependability, cyber-physical systems.

I. INTRODUCTION

D IVERSITY is an inherent property of the world we live

in, which is known as one of key reasons for our survival.
Biodiversity is well-known as a key factor of the sustainability
of an ecosystem in terms of providing proper functionalities,
survivability, and even productivity in entities or organiza-
tions [57]. Inspired by this concept from biodiversity, many
diversity-based security mechanisms have been proposed in
the literature [12, 38, 55, 131]. Common examples include
different
implementations of software providing the same
functionalities [131], diverse software stacks [63, 64], dynamic
conﬁgurations of a network topology [134], antenna diversity
in hardware for generating a shared secret key [132], and
architectural diversity to improve security and dependability
of Field Programmable Gate Arrays (FPGA) systems [73].

In this survey, we are particularly interested in investigating
how diversity can contribute to enhancing system security and
dependability. Dependability and security are deﬁned by their

Qisheng Zhang, Zelin Wan, and Jin-Hee Cho are with The Depart-
ment of Computer Science, Virginia Tech, Falls Church, VA, USA. Email:
{qishengz19, zelin,
jicho}@vt.edu. Abdullah Zubair Mohammed is with
The Bradley Department of Electrical and Computer Engineering, Virginia
Tech, Arlington, VA, USA. Email: abdullahzubair@vt.edu. Terrence J. Moore
is with US Army Research Laboratory, Adelphi, MD, USA. Email:
ter-
three authors made almost a same
rence.j.moore.civ@mail.mil. The ﬁrst
amount of contributions.

key attributes, which for dependability includes reliability,
availability, safety,
integrity, and maintainability while for
security encompasses conﬁdentiality, integrity, and availabil-
ity [5]. In this work, we conducted an extensive survey on
diversity-based approaches designed to build cyber-physical
systems (CPSs) more resilient against attacks and faults. To
be speciﬁc, we focused our survey on the following: the
key design principles, the historical evolution of the diversity
concept, the key approaches at different system layers, the
attacks defended, the evaluation metrics, and the evaluation
testbeds used for the proposed diversity-based approaches. In
addition, we extensively illuminate the pros and cons of each
approach and address insights and lessons learned from this
survey that suggest future research directions.

To clarify the contributions of our survey paper, we iden-
tiﬁed the key merits of our survey paper, compared to the
existing survey papers discussing diversity-based security ap-
proaches [11, 14, 58, 59, 83]. We conducted a comprehensive
discussion that compares our survey paper and the existing
survey works on this topic. Due to space constraints, we pro-
vide a brief overview of each survey paper and how it differs
from our own with more details provided in Appendix A and
the summarization in Table I of the supplement document.
Unlike the above existing survey works [11, 14, 58, 59, 83],
our survey provided the additional contributions as below.

The key contributions of our survey paper are as follows:
1) We conducted an extensive survey on the multidisci-
plinary concepts of diversity derived from nine different
disciplines to provide an in-depth understanding and
merits of diversity to maximize their contributions to
achieving system security and dependability.

2) We provided design principles to develop diversity-based
security techniques in terms of what-to-diversify, how-
to-diversify, and when-to-diversify as design strategies to
enhance system security and dependability.

3) We provided an extensive survey on diversity-based
approaches based on a classiﬁcation of ﬁve different
layers from the physical environment to human factors
in order to comprehensively discuss the core role of each
technique and its pros and cons. In addition, we discussed
how the key merit of each technique can contribute to
improving system security and dependability.

4) We conducted a comprehensive survey on the set of at-
tacks that have been considered by the existing diversity-
based security techniques. This provides a landscape view
of what attacks have been mitigated by diversity, leading
to our discussion on what other types of attacks diversity-

 
 
 
 
 
 
based approaches may prove fruitful in future research.
5) We provided an in-depth survey on evaluation methodolo-
gies, in terms of metrics, datasets, and testbeds used for
experiments conducted to validate the existing diversity-
based security approaches. We also suggested how to
improve experimental environments in order to offer more
practical help to real world applications in enhancing
system security and dependability.

6) Based on our up-to-date and extensive survey on existing
diversity-based approaches and our in-depth discussions
of their pros and cons, we offered a list of future research
directions that may be highly promising to the design of
secure and dependable CPSs.

The rest of this paper is organized as follows:

• Section II discusses (i) the common concept of diversity
based on the concept of diversity discussed in nine different
disciplines; (ii) the evolution of diversity-based security
approaches from the 1970’s to the 2010’s; (iii) the key
principles of designing diversity-based approaches to build
secure and dependable CPSs, and (iv) the key beneﬁts and
caveats of diversity-based CPS designs.

• Section III addresses what types of CPSs we address in this
work and the key attributes of security and dependability.
• Section IV introduces a variety of existing diversity-based
approaches to build secure and dependable CPSs. We dis-
cussed the existing diversity-based approaches, in terms of
the system layer in which an approach is deployed, covering
ﬁve layers from physical environments to human-machine
interactions, along with the discussions of the pros and cons
on each approach.

• Section V surveys what types of attacks are defended by the

existing diversity-based approaches.

• Section VI provides a survey on how existing diversity-
based approaches have been veriﬁed and validated in terms
of metrics, datasets, and evaluation testbeds used.

• Section VII discusses the limitations and lessons learned

from this comprehensive survey.

• Section VIII concludes the paper by summarizing our key

ﬁndings and suggesting future work directions.

II. CONCEPTS AND EVOLUTION OF DIVERSITY-BASED
SECURITY, AND THEIR DESIGN PRINCIPLES

The concepts of diversity have been discussed in multiple
disciplines and have been applied in various forms in the
context of each discipline. In this section, we discuss the
multidisciplinary concepts of diversity and the key beneﬁts
and caveats when applying the concept of diversity as a
design feature to achieve system dependability and security.
In Appendix B and the summarization in Table II of the
supplement document, we surveyed the concepts of diversity
from multiple disciplines, including biodiversity, geodiversity,
biology, sociology, psychology, political science, organization
management, nutrition science, and computation and engineer-
ing. Based on this conceptual review of diversity, we derived
one common ideology of diversity as follows:

Diversity of components in a system (e.g., a group,
community, society, body, ecosystem, and computer

2

system or network) can enhance sustainability orig-
inated from the principle of polyculture system com-
ponents that will be highly resistant against sud-
den, disastrous changes from external effects. The
system sustainability can be achieved by meeting
multi-faceted properties of system quality, such as
dependability, security, survivability, fault tolerance,
resistance, stability, creativity, and resilience.

A. Evolution of Diversity-based Security

Diversity-based security has been studied for decades. In the
1970’s, Randell [101] proposed recovery blocks in programs
to detect potential errors in the execution process and perform
spares with diverse implementations as needed. Avizienis [6]
ﬁrst introduced the concept of N -version programming (NVP),
providing multiple programmings with the same functionali-
ties. In the 1980’s, Avizienis [7] and Knight and Leveson [76]
described both experimental results and applications of NVP,
which is a fault-tolerance approach that was originally applied
to the physical faults and has been reused for software fault-
tolerance. Brilliant et al. [18] raised a problem that if the NVP
comparison is based on the ﬁnite-precision number output
from multi-version applications, it is impossible to guarantee
that two correct applications have a consistent output leading
to potential false positives.

The terms design diversity [8, 9] and software diversity
are coined from the hardware diversity [49] domain in the
1980’s. In the 1990’s, Cohen [30] ﬁrst applied the concept
of diversity in software for defending against cyberattacks.
Forrest et al. [38] ﬁrst comprehensively described diversity in
computer systems and argued its merit in the application of
computer security. These authors also highlighted the promise
of using diversity for security and forecasting some security
issues. Also in the 1990’s, other studies tried to combine NVP
and design diversity [89]. In the 2000’s, automate diversity
was widely used. Even still, the purposes of diversity are
different even if they all use the same concept of diversity [12].
For example, in software engineering, diversity is used to
create multiple solutions for solving one problem in order
to signiﬁcantly increase the probability of ﬁnding a solution.
However, in security, diversity is used to avoid replicated
attacks and increase attack complexity so the attacker is forced
to redesign its strategy even if it attacks the same target. In the
late 2000’s, the concept of software diversity has been applied
to defend against malware propagation [131]. An era of the
so-called diversity for security has begun [24]. In the 2010’s,
software diversity-based approaches were commonly used for
enhancing system security and dependability [15, 33, 41]. We
summarized how diversity-based security research has been
evolved from the 1970’s to the 2010’s in Table I.

B. Key Design Principles of Diversity-based Approach

In this section, we discuss key design principles in terms of
three aspects: what-to-diversify, how-to-diversify, and when-
to-diversify.

3

TABLE I
EVOLUTION OF DIVERSITY-BASED SECURITY AND DEPENDABILITY.

1970’s
recovery
Emergence of
blocks and N -version pro-
gramming (NVP)

1980’s
of
Enhanced maturity
NVP based on theoretical
analysis;
and empirical
‘Design
Emergence
of
diversity
‘software
diversity

and

1990’s
Combining NVP and ‘de-
sign software for software
diversity

2000’s
Emergence of software di-
versity for security (e.g.,
preventing malware)

2010’s
More active research on
software diversity for se-
curity and dependability

Diversity-based software fault tolerance

Diversity-based security and dependability

1) What-to-Diversify: This principle refers to what plat-
form a given diversity-based approach is applied to achieve
a particular design goal. We discuss the design principle of
what-to-diversify for three different systems, including cyber,
physical, and cyber-physical systems. What-to-diversify at a
different system type is detailed as follows:

• Diversity-based approaches at cyber systems have been
applied using software stack diversity [10, 63, 68], software
version diversity [4, 15, 41, 51, 120], code diversity [16, 55,
60, 59, 69, 78], programming language diversity [85, 117],
or network topology diversity [133]. The detail of each
approach is discussed in Section IV-D.

• Diversity-based approaches at hardware systems have been
also used, such as sensors and actuators [75, 92, 123],
embedded devices [43, 124], and communication mod-
ules [47, 132] to improve the security and dependability
of the system. The detail of each approach applied in these
categories is given in Section IV-C.

• Diversity-based approaches at CPSs have been used to
improve reliability and safety [75]. The examples using N -
variance concepts include multi-version technology, multi-
version systems, multi-version projects, and multi-version
life-cycles. The application of these concepts on various
industrial test-cases have been discussed to improve safety,
security, and survivability [75, 92].

2) How-to-Diversify: This principle refers to a particular
technique to realize diversity in given systems (or networks).
We categorize the types of techniques based on the existing
approaches as: randomization (e.g., software stack [10, 68],
address space [16, 78], instruction set [60], network shuf-
ﬂing [119]), dynamic reconﬁguration (e.g., code reconﬁgu-
ration [69], reconﬁguration of antenna systems [47, 132],
network topology reconﬁguration [134]), diversiﬁcation (e.g.,
software for malware detection [15], the operating system
instances [4, 41, 51], web-servers [120], code diversity [55],
diversiﬁed system architecture [43, 124]), and obfuscation
(e.g., code obfuscation [59], network diversity [94]). Each
technique is detailed in Section IV.

3) When-to-Diversify: Diversity-based approaches can be
either dynamically applied (e.g., time-varying dynamic recon-
ﬁguration) or statically conﬁgured at the system deployment
time (e.g., diversiﬁcation of software stack). For the dynamic
diversiﬁcation of system conﬁgurations, whenever the changes
are made, a corresponding cost occurs. Hence, overly frequent
changes of system conﬁgurations or maintaining too high
diversity may introduce some drawbacks. Therefore, there
should be adaptive strategies that can maintain diversity for
system security and dependability while minimizing perfor-
mance degradation or overhead.

C. Beneﬁts and Caveats of Diversity-based System Designs

This section discusses the beneﬁts and caveats of diversity-

based approaches to design secure and dependable CPSs.

1) The beneﬁts of diversity-based system designs are:
• Increasing fault tolerance of a system: Diversity-based
system design can introduce high fault tolerance, meaning
that the system can be functional even in the presence of at-
tacks. Note that fault tolerance is one of the key attributes of
resilience, which embraces fault tolerance, adaptability, and
recoverability [27]. The origin of diversity-based approaches
was to enhance fault tolerance [8].

• Enhancing system availability and reliability: Software
or hardware diversity-based designs allow a system to con-
tinuously function even when a system component is being
compromised because the system does not consist of ho-
mogeneous components exposing the same vulnerabilities.
This introduces high fault tolerance of the system. This also
naturally introduces high system availability and reliability
since better preparation for attacks increases the capability
of providing seamless, uninterrupted services.

time and effort

• Leveraging existing technologies: A basic approach of
diversity-based system design is the use of different imple-
mentations of software, hardware, or other system compo-
nents that can provide the same functionalities or services.
Instead of developing a new technology, which can be
challenging as it requires additional
to
ensure performance and security requirements, diversity-
based design can easily leverage legacy technologies.
2) The caveats of diversity-based system designs are:
• Potential high cost and performance degradation: The
key caveat of diversity is the potential of greater cost. For
many types of systems, diversiﬁcation of system compo-
nents can be costly to maintain. Hence, even if diversity-
based system designs can provide high security and de-
pendability for CPSs, we should seek critical tradeoff-aware,
diversity-based designs.

• High challenges in deployment of diversity-based de-
signs: If diversiﬁcation is not successfully deployed, system
security and dependability may suffer since the high cost,
delay, or incompatibility may signiﬁcantly reduce Quality-
of-Service (QoS) possibly resulting in system failure due to
highly disruptive services.

• Lack of positive effect of diversity in poorly designed, un-
secure systems or components: Diversity can be effective
only when an individual system component is sufﬁciently
secure. For example,
if an individual software package
is poorly developed with signiﬁcant vulnerabilities, using
different software packages may not be able to enhance
system security or dependability [23].

III. TYPES OF CPSS AND THE KEY ATTRIBUTES OF
DEPENDABLE AND SECURE CPSS

In this section, we discuss three types of CPSs, including
Internet-of-Things (IoT), Smart Cities, and Industrial Control
Systems (ICSs). In addition, we discuss the dependability and
security attributes of CPSs along with how diversity-based
designs can enhance the dependability and security of CPSs.

A. Types of Cyber-Physical Systems

1) Internet-of-Things:

IoT technologies have become
more popular and have been recognized as one type of CPS
that can provide effective services to users. IoT encompasses
a large number of CPSs including Wireless Sensor Networks
(WSNs) integrated with IoT [77]. The key challenges of
designing an IoT [107] are: (1) Distributed communications,
data ﬁltering/processing, and a large amount of data dissem-
ination in highly different forms (e.g., text, voice, haptics,
image, video) for distributed communications in large-scale
networks by heterogeneous entities (e.g., devices or humans);
(2) resource constraints in battery, computation, communica-
tion (e.g., bandwidth), and storage; (3) highly adversarial en-
vironments, introducing compromised, deceptive entities and
data; and (4) high dynamics of interactions between entities,
data, network topology and resources available in which each
component dynamically changes in time and space.

2) Smart Cities: From a technological perspective, a smart
city is considered as a CPS [22]. A smart city encompasses
intelligent transportation, smart buildings and infrastructure,
smart citizens and governance, and so forth. In addition to the
challenges discussed for IoT, the following additional design
challenges should be considered for smart cities [13]: (1)
Effortless connectivity and coordination of all sectors where
the infrastructure of a city is signiﬁcantly distributed and the
smart city should work effectively; (2) Effective and efﬁcient
data and their integration required where huge amounts of data
need to be generated and systems should perform efﬁcient data
acquisition, mining, integration, transformation, and additional
analysis; and (3) High security and privacy for data [37]
where the inherent heterogeneity of smart cities and multiple
interfacing systems increases the number of security threats
and vulnerabilities [46].

3) Industrial Control Systems: An ICS is an umbrella
term for all the control systems associated with industrial
processes and instrumentation. As the automation and smart
control areas have grown, an ICS deploys a CPS for its
purposes. Industrial CPSs are deployed in environments that
are not easily accessible by humans and are expected to sustain
for a long duration. The key challenges of designing an ICS
are: (1) Control timing requirements and complexity where the
complex industrial processes have the stringent requirements
on timing for efﬁcient, synchronized and uninterrupted oper-
ation [116]; (2) The nature of distributed environments where
a system is distributed across a wide geographical area [116];
(3) High availability in which all the domains need to be
available at all times [116]; (4) Mitigation of a single failure
in severe consequences
in one domain, which may result
on an entire system [116]; and (5) High vulnerabilities to

4

cyberattacks [36] caused by the large attack surface derived
from the distributed nature of the ICS, the system requiring
user or device authentication (e.g., a two-way authentication),
and communication channels vulnerable to eavesdropping or
DoS attacks.

B. Key Attributes of Dependability and Security for CPSs

In this section, we discuss the key attributes of system
dependability and security and how diversity-based designs
can contribute to build secure and dependable a CPS.

1) Dependability Attributes for CPSs: Avizienis et al. [5]
deﬁned the primary attributes of dependability as availability,
reliability, safety, integrity and maintainability. They discussed
robustness as a secondary attribute of dependability to be
examined against external faults. However, Cho et al. [27]
argued that resilience and agility should be also considered
as dependability attributes since resilience and agility can
capture the dynamic aspects of a system, which have not
been fully addressed in the other existing metrics. According
to ISO/TC [67], dependability represents a collective term
used to describe system availability and its inﬂuencing factors,
including reliability, maintainability, and maintenance.

2) Security Attributes for CPSs: According to Avizienis
et al. [5],
the primary security attributes consist of con-
ﬁdentiality, integrity, and availability. The secondary secu-
rity attributes include accountability, authenticity, and non-
repudiation. Kharchenko [75] included availability, conﬁden-
tiality and integrity as security attributes. Humayed et al. [65]
studied vulnerabilities and attacks in smart grids, medical CPS,
and smart cars, where they interpreted security as availability,
one of the security goals. Trivedi et al. [122] deﬁned de-
pendability and security as one property where their attributes
are deﬁned based on availability, conﬁdentiality,
integrity,
performance, reliability, survivability, safety, and mainten-
ability. Compared to [5], performance and survivability are
additionally considered in [122].

3) Discussions – How Diversity-based Design Can En-
hance Dependability and Security?: Due to multiple ver-
sions of systems with the same functionality, diversity-based
designs can enhance dependability attributes in all aspects, in-
cluding availability, reliability, safety, integrity, and maintain-
ability. However, diversity can have multiple, different effects
on security attributes, such as conﬁdentiality, integrity, and
availability. For example, high diversity design may enhance
system availability and integrity while it may not necessarily
increase conﬁdentiality.

IV. DIVERSITY-BASED TECHNIQUES

In this section, we discuss the existing diversity-based tech-
niques for dependable and secure CPSs. In order to embrace
multi-faceted aspects of a CPS, we categorize diversity-based
the following layers: Physical environments,
techniques at
network, hardware, software, and human users.

A. Diversity of Physical Environments

A CPS incorporates a physical environment

to further
improve its practicality and effectiveness. These physical

Diversity of Physical
Environments

Diversiﬁed
physical
topology

Diversiﬁed
access control

Layers of Diversity-based Designs for Cyber-Physical Systems

Network Diversity

Hardware Diversity

Software Diversity

Communication
modules and
antennas

Embedded
devices

Diversity
generation

Diversity
quantiﬁcation

Diversity
deployment

Operating
system

Firewall

IDS

Malware
detection

Cryptographic
authentication

Code
instruction
diversiﬁcation

Code
obfuscation

5

Diversity for Human-
Machine Interactions

Multiple user
role assignment

Multiple
authentication
process

Independent
operations for
authorization
process

Fig. 1. Layers of Diversity-based Designs for Cyber-Physical Systems.

environmental factors include guards, cameras, badge read-
ers, physical access policies, biometrics, and so forth [127].
However, this may introduce different types of vulnerabilities
in CPSs, implying a widened attack surface. Skandhakumar
et al. [112] proposed a building information model to capture
the diversiﬁed topology information of the building and con-
struct a 3D model of the building. This information can be
used to administrate and enforce the access control systems.
Akhuseyinoglu and Joshi [3] built a general access control
model to manage potential risks in access requests. For any
incoming accepted access request, their model could check
multiple diversiﬁed action sequences to select the option that
can minimize risks to the system. Cao et al. [19] developed
a risk control mechanism to dynamically assign clearance
based on a users’ history of activities and the related risks
of the requests. They considered diversiﬁed physical topology
constraints to further restrict the access to important assets in
CPSs. Many physical environment security issues are related
to the human factors because humans can introduce serious
security vulnerabilities during their interaction with physical
systems [97]. We discuss more on this in Section IV-E.
Pros and Cons: Diversiﬁcation in physical environments is
generally more complicated than that in cyberspaces due to
the high uncertainty and inconstancy associated with human
mistakes, including human attackers that have high intelligence
and ability to launch sophisticated attacks. Access control in
physical environments is primarily used to manage human-
related risk. However, current approaches still introduce high
vulnerabilities to highly intelligent human attackers.

B. Network Diversity

Typically, a CPS includes many networks, such as sensor
networks and actuator networks, where network topology is
deﬁned as the set of connections between network compo-
nents. The network diversity research has been explored pri-

marily in terms of three aspects: diversity generation, diversity
quantiﬁcation, and diversity deployment. We discuss each
aspect in detail below.

1) Diversity Generation: Network diversity refers to the
diversiﬁcation in network settings. Key factors in network
settings include network topology and system components
installed in each node of the network. The system component
includes hardware or software components. Thus, network di-
versity can be derived from heterogeneous network topologies
or generated from different variants of hardware and software
components, which will be detailed in Sections IV-C and IV-D.
2) Diversity Quantiﬁcation: Diversity metrics have been
proposed to measure the degree of network diversity by
deploying multiple variants of software. The diversity metrics
used in the literature are as follows:

• Entropy: This metric is used extensively to measure the
randomness or unpredictability in a system. Entropy is used
as an indicator of the richness of species in the ﬁeld of
biodiversity [94]. The same concept is used to measure
diversity in a network where higher entropy indicates higher
network diversity, which is assumed to be more secure.
Pros and Cons: Entropy is a common metric to measure
the extent of the polyculture of software or hardware to
achieve network diversity. However, entropy-based metrics
may not be an effective measure of diversity if the variants
share vulnerability to the same attack. In this case, a network
with high entropy can even introduce higher vulnerabilities
to identical attacks. In addition, entropy does not measure
topological network diversity.

• Resilience metrics: Zhang et al.

[133] devised three
diversity-based metrics (i.e., d1, d2, d3) to evaluate the
resilience of a network in the presence of software diversity
as follows: (1) d1 is a biodiversity-based model, using the
number of distinct resources, distribution of resources, and
a variety measure of resources for evaluation. It is deﬁned

as the ratio of the network effective richness to the total
number of variants; (2) d2 evaluates the least attack effort to
compromise hosts. It is deﬁned as the ratio of the number
of resources in attack path to the number of steps in the
attack path; and (3) d3 is similar to d2, but it focuses on
the average attack effort. It is a probabilistic model deﬁned
by the ratio of the probability of given asset being attacked
over the probability of a given asset being attacked with the
condition of all variants being unique.
Pros and Cons: Similar to entropy-based metrics, the d1
metric works well assuming that variants are alike. The
limitation of this metric is that it doesn’t consider the causal
relation between variants. The d2 metric considers the causal
relation between variants, but does not focus on enhancing
security. It is also computationally costly to evaluate, but the
cost can be reduced by estimating its value using heuristics.
The d3 metric provides a global view in terms of average
vulnerabilities. Hence, it may not be able to distinguish
between two networks with similar average vulnerabilities.
3) Diversity Deployment: Diversity can be further en-
hanced depending on how the existing diversity can be differ-
ently deployed. We call this diversity deployment and classify
these types into two classes: metric-based and metric-free. We
discuss each class as below.
• Metric-based Diversity Deployment: This class provides
metrics to measure diversity in a proposed algorithms.
For example, Temizkan et al. [119] proposed a software
allocation model using Shannon entropy as a diversity metric
to minimize the total
information gain in the software
assignment problem. The main drawback of this metric is
high complexity, as the problem is NP-hard. The authors
proposed a heuristic algorithm to reduce the complexity.
Borbor et al. [17] leveraged the software diversity metrics
deﬁned in [133] (i.e., d1, d2, d3 metrics) to present their
model-based technique. This work solved a software assign-
ment problem aiming to optimize a max-min of d1 and d2
and a min-max of d3 among all nodes in a network. This
work leveraged a meta heuristic (i.e., a genetic algorithm)
to solve the problem.
Pros and Cons: The use of metrics to measure diversity
can provide a simple solution via maximizing the metric
assuming that high diversity enhances network security. If
the validity of a diversity metric does not hold, however,
the relationship between network diversity and network
security may not hold as well. In addition, high diversity
can introduce high overhead as well as potential perfor-
mance degradation (e.g., incompatibility between nodes).
Moreover, solving an optimization problem using a diversity
metric may have high complexity. Heuristics introduced to
solve high complexity, such as meta heuristics, could be also
computationally prohibitive in reaching an optimal solution.
• Metric-free Diversity Deployment: This deployment class
does not use any metrics to measure diversity; rather it
simply uses randomization or dynamic reconﬁguration. To
discuss metric-free diversity deployment in detail, we further
classify this class into the following two sub-classes:
– Graph Coloring: This approach, borrowed from graph

6

theory [70], seeks to color a graph such that every
pairwise connected nodes have different colors. This idea
is reformulated into its variant in the domain of software
diversity. Different software variants, representing differ-
ent colors, are expected to be installed into each node in
a computer communication network. Therefore, coloring
techniques aim to assign different software versions to
every pair of connected nodes. Leveraging this idea, a
software assignment problem is solved by O’Donnell and
Sethu [96] by developing different coloring algorithms. In
addition, Huang et al. [61] studied the order of coloring
based on priority determined using different centrality
metrics. Taking this approach further, Touhiduzzaman
et al. [121] introduced a game theoretic approach to solve
a graph coloring problem by using different software
versions to minimize vulnerabilities to epidemic attacks.
Pros and Cons: Since the coloring problem has been
studied for decades in mathematics and other engineer-
its theoretical validity and maturity for
ing domains,
algorithmic effectiveness and efﬁciency has been already
proven and can be reliably leveraged. However, as the
coloring problem has predominantly been studied in static
networks, its applicability in dynamic network that can
ensure efﬁciency as well as effectiveness is not fully
proven. Moreover, simple repetition of the static network-
based coloring algorithm may introduce high reconﬁgu-
ration overhead.

– Network Topology Shufﬂing: This technique aims to
identify an optimal assignment of software variants to
maximize the degree of software variants along attack
paths. The main idea is to increase attack cost or com-
plexity for an attacker by increasing hurdles in reaching
a target node. Hong et al. [56] solved a network shufﬂing
problem for software assignment as an online moving
target defense. Their proposed algorithm is designed to
redirect a certain number of edges for reconﬁguring a
network topology to be robust against worm attacks.
Pros and Cons: Shufﬂing techniques can cope with dy-
namic network structures because the cost of redirecting
edges is relatively low. Furthermore, network shufﬂing
does not require assigning software variants. However,
the complexity of network shufﬂing algorithms is propor-
tional to the number of edges in a network, which may
not scale for large networks. In addition, if a network is
required to stay in the same network topology, network
shufﬂing may not be applicable.

To introduce diversity into a system, existing dynamic re-
conﬁgurability techniques are often leveraged. Dynamic recon-
ﬁgurability refers to the ability to dynamically reconﬁgure sys-
tem settings, such as network topology and software resources.
The reconﬁguration process may introduce various types of di-
versiﬁcation. For instance, dynamically reconﬁguring network
topology would bring path diversity while software resources
reallocation would result in software diversity. To clarify the
scope of our survey paper, we treat dynamic reconﬁguration as
a subset of diversity-based solutions because diversity-based
approaches can be also applied in static network environments.

C. Hardware Diversity

The hardware of a CPS constitutes sensors and actuators,
communication modules and antennas, and embedded de-
vices [102]. The sensors and actuators form a bridge between
the cyber and the physical parts. In sensors, their physical
information is translated to electrical voltages or currents (the
opposite in case of the actuators), usually in the order of milli-
volts or milli-amperes. These components are vulnerable to
false data injection, generally in the form of intentional electro-
magnetic interference (IEMI) [81, 109]. To the best of our
knowledge, diversity-based security techniques have not been
studied yet for sensors and actuators. Therefore, in this sec-
tion, we only discuss diversity-based techniques proposed for
communication modules and antennas and embedded devices.
1) Communication Modules and Antennas: In a CPS, the
communication module is responsible for the transmission and
reception of information (i.e., control and data) between nodes.
The medium of communication can be wired, for example, in
IEEE 802.3 (Ethernet) standard or wireless, as in standard-
sIEEE 802.11 (WiFi), IEEE 802.15.1 (Bluetooth), or IEEE
802.15.4 (Zigbee). In a wireless medium, diversity is usually
achieved by employing multiple antennas for communication.
From the physical layer security perspective, diversity is used
to achieve high secrecy capacity or low intercept probability.
These metrics quantify the ability of a wireless channel to
protect its data from a malicious eavesdropper.

Zou et al. [135] discussed the effects of diversity on the
physical layer security of a communication system, with the
following three types of diversity: (1) Multiple input multiple
output (MIMO) diversity where multiple antennas are used
for transmitting and receiving nodes; (2) Cooperative diver-
sity in which multiple relays (repeaters) are used between
the transmitting and the receiving node; and (3) Multiuser
diversity, where the transmitter node is communicating with
multiple receiver nodes. Via experiments, the authors showed
that diversity of the communication channel introduces higher
secrecy capacity and lower intercept probability.

Ghourab et al. [47] used multiple antennas to reconﬁgure the
frequency of the transmitter node periodically to improve the
channel secrecy capacity and enhance the performance against
an eavesdropping attack on the routing path in the network.
The authors further enhanced the security by obfuscating the
transmitted data by intentional
injection of false data for
diversifying both in space and time. Watteyne et al. [125]
proposed that the transmitting node sends the succeeding pack-
ets on different frequencies, introducing frequency hopping
in routing. The system is protected against communication
failures in the path, considerably improving the reliability.
Zeng et al. [132] introduced a key generation protocol with
the contribution of generating high speed key generation and
security against passive eavesdropping attacks. Sarkar and
Ratnarajah [108] employed the channel diversity to improve
the secrecy capacity against an eavesdropper.

Pros and Cons: Diversity-based security has been mainly
developed by diversifying channel frequency, which has been
proven highly effective for enhancing system security. How-
ever, most of the approaches require multiple antennas at the

7

transmitter and receiver that increases hardware complexity
and requires non-trivial signal processing. This leads to high
power consumption, thus requiring lightweight solutions to
realize diversity of channel frequency.

2) Embedded Devices: An embedded device, including
microcontrollers, microprocessors, FPGAs or Application Spe-
ciﬁc Integrated Circuits (ASICs), is the core of a CPS. The
embedded device acts as a central controller of the system as
well as provides an interface between the cyber and physical
aspects of the system. We discuss diversity-based designs in
embedded devices as follows:
• Architectural Diversity of FPGAs: Lach et al. [82] ex-
ploited the intrinsic redundancy and re-conﬁgurability in
the architecture of FPGAs to improve its fault tolerance
and reliability. Karam et al. [73] used the architectural
diversity in FPGAs to generate a different ﬁnal executable
ﬁle (i.e., bitstream) in each of the nodes in the network.
This increases difﬁculty in reverse engineering techniques
performed by attacker, leading to enhanced security against
tampering and piracy attacks with reasonable overhead.
• Variants of Physical Layer Identiﬁcation: Even if devices
are of the same model from the same manufacturer, there
exists minor variations in the intrinsic characteristics at their
physical layer, such as transients in the radio signals, clock
skew, and other features. This diversity can be utilized for
physical layer identiﬁcation (PLI) and device ﬁngerprinting
as a security technique defending against impersonation and
identity-theft attacks [44]. Danev and Capkun [34] identiﬁed
the IEEE 802.15.4 devices using the variations in the turn-on
transients of their radio transceivers. Gerdes et al. [45] used
a matched-ﬁlter based approach to identify Ethernet devices
from the variations in their analog signal. Foruhandeh et al.
[39] proposed a technique to identify Electronic Control
Units (ECUs) in a Controller Area Network (CAN) bus
architecture by exploiting the variations in their physical
layer features. Cobb et al. [29] introduced radio frequency
distinct native attribute (RF-DNA) ﬁngerprinting to identify
embedded processors from their RF emissions to detect
intrusions and prevent against impersonation attacks.
Pros and Cons: This inherent variation between devices
increases their resiliency against side-channel attacks. How-
ever, side-channel attacks are less effective if an attacker is
trained on one device and tested on another device from the
same manufacture and with an identical chip [124]. The at-
tacker can improve its efﬁcacy by training on a diverse set of
devices and on varied implementations of the cryptographic
algorithm. In addition, modulation-based identiﬁcation as
a PLI method may be vulnerable to signal and feature
replay attacks while transient-based identiﬁcation is more
robust [34]. Hence,
is important to appropriately use
a relevant diversity design to deal with the given attack
scenario.

it

D. Software Diversity

Software diversity-based approaches have been substantially
used to enhance system security as the key diversity-based
design. Due to the large volume of studies explored in the

literature, we mainly looked at the following different types of
diversities applied in: (i) Operating systems; (ii) ﬁrewalls; (iii)
intrusion detection systems (IDSs); (iv) malware detection; (v)
cryptographic authentication; (vi) instruction diversiﬁcation;
and (vii) code obfuscation.

1) Operating Systems (OS): Forrest et al. [38] provided
the following guidelines for designing OS-based diversity
methods to preserve their convenience, usability and efﬁ-
ciency: (i) preserve a high-level functionality; (ii) introduce
diversity that can disrupt known intrusion most; and (iii)
minimize deployment cost and run-time cost while maintain-
ing sufﬁcient diversity. Garcia et al. [41] also proved the
usefulness of OS diversity by analyzing the vulnerabilities in
11 different OSs collected over 15 years. The analysis showed
that many vulnerabilities exist in more than one OS; but if
several OSs are combined, the number of common vulner-
ability decreases. They also proposed a method to identify
optimal composition of diverse OSs by analyzing the data from
the National Institute of Standards and Technology (NIST)
National Vulnerability Database (NVD) to improve intrusion
tolerance. Based on the common vulnerability (CV) that refers
to the same vulnerability found in more than one system, they
proved that the OS diversity protects a system from attacks
aiming to penetrate into a given system.

Gorbenko et al. [51] designed an optimal intrusion-tolerant
architecture composed of several different OSs in which a
request will pass through these OSs synchronously. If the
responses from these OSs are not the same, then an intrusion
may happen. The authors showed that a 3-variant system is
an optimum conﬁguration providing the least vulnerabilities in
availability and integrity. Garcia et al. [41] found that reducing
the number of days of gray-risk and the number of forever-
day vulnerabilities are main challenges for OS security. In
addition, if a large section of code is reused from a previous
version, buffer overﬂow vulnerabilities may remain in even
new technologies proposed to deal with such vulnerabilities.
Nagy et al. [93] applied an N -version technique on an
OWASP (Open Web Application Security Project) to enhance
the robustness against common vulnerabilities. In addition,
Nagy et al. [93] further discussed the feasibility of detecting
zero-day attacks. Pu et al. [99] developed a specialization
toolkit for helping a programmer to improve the resistance
of systematic specialization of OS kernels and against virus
and worm attacks. The toolkit protects an OS by dynami-
cally generating various versions of software components at
compile-time specialization and run-time specialization.
Pros and Cons: OS diversity techniques are high-level strate-
gies in software architecture, which allow them to defend
an attacker while having a certain number of code errors.
However, there always exists a trade-off between the cost
and diversity, and this conﬂict becomes more apparent in this
category since most of the techniques require multiple OSs to
run in parallel.

2) Firewalls: Liu and Gouda [88] proposed a process
of designing diverse ﬁrewalls for enterprise security based
on three processes: design, comparison, and resolution. The
design phase lets multiple groups design a ﬁrewall policy
independently based on the same requirement. The comparison

8

phase detects function discrepancies between the multiple
policies. The resolution phase generates a uniﬁed design for all
groups. The authors also proposed three algorithms to identify
all functional discrepancies and estimate the impact of a policy
change at the comparison phase. Based on [86], the authors
also conducted a ﬁrewall policy impact analysis [87].

Pros and Cons: Diversity-based security mechanisms in ﬁre-
walls are known to be very effective to deal with zero-day
attacks [88]. However, if diverse software is conﬁgured or
designed by the same group of people, they may share a
common problem, which eliminates the advantage of diver-
sity [126]. In addition, the research on diversity-based ﬁrewall
to enhance system security is still in its infancy, showing a
lack of studies in this research area. This could be because of
the overhead and potential errors introduced due to continuous
ﬁrewall policy changes. Cost-effective ﬁrewall policy changes
should be considered for security enhancement.

3) Intrusion Detection Systems (IDSs): Reynolds et al.
[105] proposed an implementation for protecting users of a
web service from cyberattacks. This approach exploits com-
mercial off-the-shelf (COTS)-based diversity for IDSs and
provides a partial resolution to detect and isolate network
attacks. Totel et al. [120] utilized the diversity of COTS
to build an IDS and evaluated their proposed IDS at
the
web-server level using three different servers, namely, Buggy
HTTP (Linux), IIS (Windows), and Apache (MacOS). The
IDS was tested against seven different types of attacks from
the CVE [1]. The IDS detected all the attacks against one of
the servers. Reynolds et al. [104, 106] proposed a diversity-
based system to positively identify attackers with ‘sandboxes’.
This system is designed for protecting web servers from on-
line intrusion by comparing outputs of diverse software.

Qu et al. [100] exploited diversity in the implementation
of web applications to develop a technique to defend against
code injection attacks. They evaluated 16 web applications
written in four diverse languages, PHP, ASP, ASP.NET and
JSP against SQL injection vulnerabilities from the CVE [1].
Their results showed that the proposed approach has 0% False
Positive Rate (FPR), 25.93% False Negative Rate (FNR) and
98.03% detection accuracy. All these results clearly exceed
the single-stage counterpart. Cox et al. [32] provided an
architectural framework to detect and disrupt large classes of
attacks. The framework contains a polygrapher to receive input
and copy to a different server exhibiting anomaly behavior.

Gu et al. [52] proposed a ‘decision-theoretic alert fusion
technique’ to deal with the alarms from multiple IDSs. This
technique is based on the likelihood ratio test (LRT) to
combine different alert reports. In addition, since there is little
work on analyzing the effectiveness of an IDS ensemble, this
technique evaluates the effectiveness of the IDS ensemble by
testing the LRT rule on two different datasets in advance.
Majorczyk et al. [91] provided a ‘masking mechanism’ for
an IDS to resolve the high FPR when applying COTS-based
diversity. Instead of directly assigning a request to diverse
components and comparing outputs, the masking function can
modify the request before and after the request being processed
by diverse components.

Pros and Cons: IDS research is another ﬁeld mainly studied
within Enterprise Security or Web Server Security in which
COTS diversity is used by many projects. The combination
of various detectors is a well-known strategy that can achieve
better performance. However, one main issue associated with
the COTS-based IDS is that the FPR can increase due to the
types of detection algorithms used in each detector and the
ways of estimating diversity across different detectors. How to
decrease the FPR while increasing the use of diversity-based
IDSs is a promising direction [91].

4) Malware Detection: Oberheide et al. [95] conducted
7,220 unique malware tests based on the datasets from
NetScout systems [2] and compared the effectiveness of a
single malware detector and an ensemble of multiple malware
detectors.Hole [54] provided a diversity software for an enter-
prise networked computer system to slow down or prevent the
spreading of infectious malware and prevent zero-day exploits.
Leveraging the beneﬁts of using diverse Antivirus (AV)
software, Silva et al. [111] developed an AV system for the e-
mail framework using different AVs running in parallel. They
evaluated their system on e-mails containing malware. Gashi
et al. [42] investigated the beneﬁts of diverse COTS antivirus
by analyzing 1,599 malware samples for 178 days [84], and
with 32 different AV products. Bishop et al. [15] reviewed
this same dataset to study the detection gains when utilizing
more than two AV products as well as to demonstrate the
reduction in ‘at risk time’ of the system. Smutz and Stavrou
[113] provided a diversity-based evasion detection method to
improve the evasion resistance of a malware detector.
Pros and Cons: Diversity-based malware detectors are known
to be very effective in defending against zero-day attacks,
compared to other security technologies, such as anti-malware
or patching. However, their downside is the consumption of
more computing resource since different detectors are required
to work in parallel, such as Silva’s diversity-based antivirus
software [111].

5) Cryptographic Authentication: Carvalho [20] pro-
posed a redundancy and diversity-based method for cloud
authentication resistant against unknown, zero-day vulnera-
bilities. The key idea is to use redundant authentications to
ensure reliability while diverse authentications are used for
fault tolerance under attacks compromising part of the system.
Pros and Cons: In the literature, diversity-based cryptographic
authentication has been rarely studied as we only cited one
work above [20]. The main reason of lack of studies in this
area would be because using multiple authentication protocols
may introduce more complexity in system performance as
well as incompatibility with other systems that use different
authentication mechanisms.

6) Code Instruction Diversiﬁcation: This technique is
to diversify code instructions to prevent side-channel attacks,
code modiﬁcation attacks, or code replay attacks.

Homescu et al. [55] created various programs by randomly
inserting NOP (No Operation Performed) instructions prior to
compiling them. An NOP instruction does nothing but is used
for randomizing the code layout. Koo and Polychronakis [78]
used an instruction displacement to randomize the starting ad-
dresses of gadgets in the binary on installation phase. Williams

9

et al. [128] proposed a technique, called Calling Sequence
Diversity (CSD) where the call sequence is deﬁned as the
sequence of instructions for call and return behavior [71]. Kc
et al. [74] developed new randomized instruction sets for each
process when the program is loaded to the main memory.
Barrantes et al. [12] proposed a Randomized Instruction Set
Emulation (RISE) based on the Valgrind binary translator.

Hu et al. [60] and Williams et al. [128] improved the
performance of the Instruction Set Randomization (ISR), a
technique for randomly altering instructions [115]. Hu et al.
[60] combined the ISR with the Advanced Encryption Stan-
dard (AES) to operate a dynamic translation to software and
to improve the efﬁciency of the ISR. Williams et al. [128]
further improved the efﬁciency of the ISR by leveraging
the extended tool chain and combining static and dynamic
binary rewriting. Franz [40] proposed a mechanism for the
App Store to automatically compile out identical binary code
for different devices. Cohen [30] proposed a method that can
make a static program self-evolve over time for increasing
attack complexity based on the Instruction Equivalence and
Instruction Reordering technologies. Chew and Song [25] pro-
posed lightweight methods for mitigating buffer overﬂow by
randomizing system call mapping, global library entry point,
and stack placement. Xu et al. [129] proposed a Transparent
Runtime Randomization (TRR) method to defend against a
wide range of attacks. The TRR, implemented by a program
loader, dynamically relocates stack, heap, shared libraries in
the memory space of a program. Ichikawa et al. [66] developed
a diversiﬁed instruction set architecture (ISA) to increase
the redundancy of software. The key idea of the ISA is to
change the encoding of opcode while keeping the original
functionality of an instruction set.

Pros and Cons: Along with OS diversiﬁcation, code instruc-
tion diversiﬁcation research has been substantially explored.
The key reason would be its less adverse impact on system
performance while maintaining the original functionality of
the code. However, it is inevitable that code instruction diver-
siﬁcation introduces the complexity of the coding process and
incurs high CPU overhead.

7) Code Obfuscation: This technique aims to transform

code and make it unintelligible but still functional.

Collberg et al. [31] designed a code obfuscator for Java that
inserts opaque predicates into a Java program and generates
an equivalent one but harder to reverse engineer. Kuang et al.
[79] and Kuang et al. [80] enhanced the existing VM-based
code obfuscation, such as the Code Virtualizer [118] and
VMProtect [114] by adding a dynamic instruction scheduler
to randomly direct a program. This new approach is called the
dynamic scheduling for VM-based code protection (DSVMP),
which was designed to increase the robustness of code ob-
fuscation against highly intelligent attackers capable of using
obfuscation techniques.

Xue et al. [130] proposed an obfuscation scheme, called
Code Virtualization Protection with Diversity (DCVP),
to
increase complexity even for experienced attackers to uncover
the virtual instructions to native code when applying code
virtualization for code obfuscation. The underlying idea of

DCVP is to obfuscate the mapping between the opcodes and
semantics for increasing the diversity of the program behavior.
Pawlowski et al. [98] proposed an obfuscation technique based
on probabilistic control ﬂow. The key idea is generating differ-
ent, multiple execution traces while keeping semantics, given
the same input values. Via experiments, the authors proved that
their developed obfuscation prototype can effectively ensure
divergent traces for the same input while enhancing resilience
under dynamic attack analysis. Crane et al. [33] proposed
a dynamic control-ﬂow diversity technique to defend against
online and off-line side-channel attacks. The authors proved
that this technique protects the program under cache-based
side-channel attacks aiming to obtain a cryptographic key by
analyzing the program execution. Hataba et al. [53] proposed a
technique to dynamically disrupt the control ﬂow of a program
so that the conditional branches will be converted randomly.
This method is designed for mitigating the side-channel attack
in a cloud platform.

Pros and Cons: Even though the code obfuscation is designed
to transform code and make it unintelligible but still functional,
the obfuscation cannot guarantee the irreversibility of the code.
However, it can still
increase the cost for the attacker to
understand the functionality of the code, which can increase
the opportunity time to protect the program [59]. A well-
known drawback is that many technologies involved in running
VMs in parallel require tremendous computational resources.

E. Diversity for Human-Machine Interactions

are

Human-machine

interface deﬁciencies

commonly
caused by interface design faults that can introduce data delay
display or data misinterpretation. In addition, a single autho-
rization mechanism, such as password only or biometric only,
can expose security vulnerabilities. To enhance the security
of an authorization system, diversity-based designs can be
introduced [28, 103]. For example, Clark and Wilson [28]
proposed a user level diversity strategy called the ‘separation
of duty’ for military security systems. This strategy assigns the
complementary roles to different users and makes the sensitive
operation executable with different roles. Reiter [103] devel-
oped a protocol to force a sensitive operation for authorization
to be run on different machines or programs controlled by
independent operators.

Pros and Cons: Increasing diversity of human-machine inter-
faces can increase system security. However, due to humans’
limited cognition, high diversity of the human-machine in-
terfaces may introduce more mistakes or errors by humans.
Huang et al. [62] investigated how human error diversity
is related to software diversity under various conditions.
Depending on the human operators’ skill levels, the human
error diversity is shown differently under a different level of
software diversity. However, regardless of the skill levels of the
human operators, the design of software diversity should be
considered human-friendly to minimize human-prone mistakes
or errors. Deswarte et al. [35] proposed a principle to eliminate
errors by requiring several independent operators to perform
sensitive operations. However, we still need some metrics

10

to estimate the extent of diversity of human operators and
sensitivity values of the operation.

Fig. 1 shows an overview multi-layered structure of the
classiﬁcation. Table III in the supplement document (Appendix
C) summarized the overview of the existing diversity-based
approaches surveyed in this section.

V. ATTACK TYPES CONSIDERED BY DIVERSITY-BASED
SECURITY APPROACHES

In this section, we mainly discuss what types of cyberat-
tacks are defended by diversity-based security solutions. The
limitations and gaps identiﬁed from the existing attack model
are discussed in Section VII along with other limitations and
insights learned from this survey paper.

3

4

3

12

14

5

7

3 1 11

5

1

5

2

6

Physical attack
Zero-day attack

Worm attack
Code injection attack

Code reuse attack
Return-to-Libc attack
Correlated attack
Coordinated attack
Buffer overﬂow attack
Side-channel attack
Deobfuscation attack
Impersonation attack
Tampering attack
Eavesdropping attack

Denial-of-Service attack
Reverse engineering

Fig. 2. Types and frequency of attacks considered in the existing diversity-
based approaches.

Various types of attacks can be defended by the exist-
ing diversity-based approaches. Due to space constraints, we
provided a detailed explanation of each attack in Appendix
D of the supplement document. In this section, to provide
the overview of those attacks, we summarized what types
of attacks are considered in terms of the number of papers
considering each attack type, among the papers discussed
in our survey paper in Fig. 2. As observed in Fig. 2, the
top three attacks considered in our survey are: worm attack
(e.g., malware or virus propagation), zero-day attack, and side
channel attack. Since software diversity is a major trend in
diversity-based approaches and software assignment research
is mainly studied based on the concept of polyculture software
following the fundamental principle of diversity in enhancing
system survivability, it is natural to observe more efforts made
in mitigating work attacks in the existing approaches.

VI. METRICS, DATASETS, AND EVALUATION TESTBEDS

This section discusses how the existing diversity-based
security solutions have been validated by using various types
of metrics, datasets, and evaluation testbeds. Due to space
constraints, we provided details of metrics, datasets, and
testbeds in the Appendices E-G in the supplement document
and discuss the key trends observed from our extensive survey
in this section.

A. System Metrics

We discuss the metrics used to validate the existing
diversity-based security solutions in terms of measuring se-
curity and dependability, respectively.

1) Security Metrics: Although various types of security
metrics have been used to evaluate diversity-based approaches
to enhance system security, we identiﬁed the following major
categories of metrics used in the literature: (i) Epidemic
thresholds representing the rate of infecting other nodes in
malware or virus propagation; (ii) The extent of diversity
measured in code, instructions, or routing paths; (iii) The
metrics to capture system vulnerability (or exploitability) to
attacks; (iv) The extent of compromised nodes or compromised
routes in a given system or network; and (v) Intrusion detection
accuracy in diversity-based IDSs. The detailed description of
each metric belonging to one of these categories is provided
in Appendix E of the supplement document. Based on the
summary of these trends in Fig. 3, the majority of the diversity-
based approaches have estimated the system security level
based on the system’s vulnerability to attacks. Although it
seems clear that high diversity enhances system security, the
adverse effect of using a diversity-based approach on system
performance has not been thoroughly investigated.

3

4

9

2

14

Epidemic threshold
Diversity metrics
Vulnerability metrics
System compromise metrics
Intrusion detection accuracy

11

QoS metrics

7

2

4

Maintenance cost

Reliability

Fig. 4. Types and frequency of dependability metrics.

B. Datasets

We examined 35 papers that have proposed diversity-based
system design for secure and dependable CPSs. Based on
this survey, we could categorize the following three types of
datasets used for the validation of the proposed mechanisms:
real-world datasets, semi-synthetic datasets, and synthetic
datasets. As the names explain, the real-world datasets means
the data have been captured from real world environments,
such as network trafﬁcs or attacks observed in real systems.
The synthetic datasets are data generated by simulation that
mimic the real world datasets. Sometimes when researchers
cannot ﬁnd the appropriate dataset to evaluate their proposed
mechanism, they combined a real world dataset with synthetic
dataset in order to make a dataset that can test the system
security and dependability of their proposed mechanism. Due
to space constraints, we provided Table IV in the supplement
document that provides the detail of each paper, 35 papers in
total. In Fig. 5, we simply summarize the frequency of each
dataset type used among the 35 papers surveyed in this work.

Real-world datasets

23

5

7

Synthetic datasets

Fig. 3. Types and frequency of security metrics.

Semi-synthetic datasets

reliability, safety,

2) Dependability Metrics: As discussed in Section III-B,
dependability embraces availability,
in-
tegrity, and maintainability. We extensively surveyed depend-
ability metrics that have been used to validate the quality
of diversity-based approaches. However, due to the space
constraint, we provided the detail of each dependability metric
in Appendix F of the supplement document. Instead, here
we discuss the overall trends found from our survey on the
dependability metrics in diversity-based approaches.

In Fig. 4, we summarized the types and frequency of
dependability metrics used in the existing diversity-based ap-
proaches. The major trends are: (1) Quality-of-Service (QoS)
metrics are the dominant metrics used to capture system
dependability, such as packet delivery or loss rates or delay;
(2) Reliability is also captured based on load reduction caused
by attacks; and (3) Maintenance cost is also observed, such as
the ﬁnancial cost to maintain multiple software packages (or
versions).

Fig. 5. Types and frequency of datasets used.

Based on Fig. 5, we can clearly observe that most stud-
ies leveraged real world datasets to evaluate their proposed
diversity-based approaches while only 5 works relied solely on
synthetic datasets. But based on Table VI of the supplement
document, we found the most synthetic datasets are mainly
for generating synthetic network topologies. Although various
types of network datasets are available, there is still a limited
amount of real ‘communication network’ datasets, resulting in
generating synthetic datasets for network topologies.

C. Evaluation Testbeds

In the literature, we found mainly the following four types of
evaluation testbeds being used: real testbeds, emulation-based
testbeds, simulation testbeds, and analytical or probability
model-based testbeds. In Section IV, we also discussed the
multiple layers a diversity-based solution is deployed at. To

30

16

6

31
[103]
[128]
[105]
[95]
[88]
[79]
[66]
[53]
[42]
[40]
[32]
[21]
[15]
[124]
[45]
[39]
[34]

[130]
[129]
[113]
[98]
[91]
[80]
[78]
[55]
[42]
[33]
[25]
[125]
[132]
[125]
[82]
[125]

Hardware

Software

Network

Others

12
[121]
[96]
[56]
[17]
[99]
[50]
[73]

[133]
[119]
[61]
[100]
[100]
[52]

16

[28]
[3]
[94]
[72]
[52]
[31]
[30]
[108]
[47]

[110]
[19]
[94]
[129]
[54]
[51]
[94]
[135]
[48]

6
[112]
[115]
[60]
[12]

[111]
[74]

Real

Emulation

Simulation

Analytical

Fig. 6. Evaluation Testbeds Used for Existing Diversity-based Approaches.

grasp the overall picture of what testbeds have been used
to validate the diversity-based approaches that are developed
at a certain layer, we summarized the testbeds used for the
validation of the existing diversity-based approaches in Fig. 6.
In Fig. 6, each color represents the layer at which a diversity-
based approach is deployed while we showed what evalua-
tion testbed is used to validate each approach. Interestingly,
real testbeds are popular for developing both hardware and
software diversity-based approaches. The second most popular
validation testbed was the analytical model-based one. Particu-
larly for network diversity-based approaches, simulation-based
testbeds are popularly used in the existing works.

These observations are well aligned with the datasets used to
validate the existing approaches. As discussed in Section VI-B,
real-world datasets are the most popular in use while synthetic
datasets based on simulation models are mainly used for
network topologies, which are used in validating network
diversity-based approaches.

VII. LIMITATIONS, INSIGHTS, AND LESSONS LEARNED

We found the following limitations and learned insights and

lessons from this extensive survey:

• Fewer studies in identifying critical tradeoffs between
system diversity and other aspects of system quality:
Although it is well-known that diversity-based system de-
signs can signiﬁcantly enhance system security, it may not
be always true [23]. For example, if each software has in-
herently high vulnerabilities, increasing diversity with poor
software components would not contribute to increasing
system security. For example, using a set of diverse detectors
may not necessarily lead to high system security. When each
detector’s detection capability is too poor (e.g., < 0.5), the
system is still highly vulnerable due to the misdetection
by the poor detectors. Although diversity-based design can
be easily integrated with legacy security mechanisms and
existing technologies, there should be studies investigating
the critical tradeoff setting to identify the bottom line for
achieving the beneﬁt of diversity-based system designs.

12

• Lack of

research investigating the drawbacks of
diversity-based system designs: It is well-known that intro-
ducing more diversity to the system can bring adverse im-
pact on conﬁguration cost, service availability, and economic
cost.However, there has been less effort in investigating the
key drawbacks of diversity-based system designs and how
to mitigate the drawbacks.

• Need more effort

to explore diversity-based system
designs in broader areas: Based on our extensive survey
in diversity-based system designs, we found that OSs, IDSs,
malware detection, and instruction diversiﬁcations have been
substantially studied. However, there have been signiﬁcantly
fewer studies developing diversity-based security mecha-
nisms in ﬁrewalls and cryptographic authentication. The
reason would probably be the beneﬁt of using diversity-
based approaches would not exceed that of not using them.
However, no clear investigation has been even conducted to
answer this. Based on the critical tradeoff analysis of using
diversity and not using it, we can set our research towards
a more promising direction.

• Less adverse impact of diversity-based designs at lower
layers on system performance: Diversity-based designs
deployed at a lower layer (i.e., instruction diversiﬁcation)
tend to have less adverse impact on system performance. On
the other hand, when diversity-based designs are considered
at higher layers, computational or memory resources tend
to be more often required.

• Integration of hardware diversity and software diver-
sity: Although there has been a fairly good amount of
diversity-based approaches by introducing software diversity
or hardware diversity, we have not found any research effort
to explore diversity of both hardware and software and
investigate the impact of the integrated approaches.

• Lack of research examining the relationships between
diversity and other system dependability and security
attributes: As we can observe from Table I, until the 2000’s,
the primary effort of diversity-based system design was to
increase software fault tolerance. Even if there have been
more studies explored in the 2000’s and the 2010’s for
investigating system security and dependability attributes,
there have been many works that are still focused on enhanc-
ing fault tolerance. In addition, the relationships between
diversity and other system attributes, such as conﬁdentiality,
maintainability, safety, and so forth, are still unclear.

• Lack of deploying diversity-based approaches under
dynamic system environments: Some recent efforts have
explored diversity-based approaches under dynamic system
environments [26]. However, most current diversity-based
research has been studied under static system environments
where system components are ﬁxed once diversity is im-
plemented, such as code diversiﬁcation, malware detectors,
code instruction diversiﬁcation or obfuscation, and so forth.
• Limited theoretical understanding of diversity-based
approaches: Most diversity-based approaches have been
validated based on simulation or emulation testbeds. Surely,
the extensive experiments via simulation and emulation can
provide a certain level of conﬁdence on proposed technolo-
gies. However, validating their effectiveness and efﬁciency

via mathematical and analytical models can further provide a
solid basis of demonstrating their powerful merits on system
security and dependability.

• Lack of valid diversity metrics: Most literature surveyed in
our paper have not devised or used diversity metrics to quan-
tify system diversity. Even though there are some studies
that have proposed diversity metrics and their comparative
analysis particularly in software assignment research [17,
90, 119], there is still a lack of studies that conduct in-depth
analysis of various types of diversity metrics.

VIII. CONCLUSION AND FUTURE WORK

In this section, we conclude this work by summarizing the
key ﬁndings obtained from this extensive survey. And then,
we suggest future work directions to develop diversity-based
solutions to build secure and dependable CPSs.

A. Key Findings

From our extensive survey on diversity-based approaches,

we obtained the following key ﬁndings:
• The key principle of diversity-based system designs is to
enhance resilience, survivability, or sustainability of the sys-
tem by increasing attack cost or complexity for attackers to
compromise the system by exploiting the same system vul-
nerabilities. However, deploying diversity-based approaches
may introduce additional cost or performance degradation
due potential cross incompatibility issues, maintenance cost,
or high dynamic system/network reconﬁgurations. As a
diversity-based solution designer, we should consider critical
tradeoffs that can optimize the effectiveness and efﬁciency
of diversity-based mechanisms.

• While software diversity, hardware diversity, and network
diversity are the three most popular approaches used in
the literature, diversity-based solutions for physical environ-
ments and human-machine interactions to enhance security
and dependability are rarely explored.

• Although diversity-based approaches for enhancing system
security has been explored since the 1970’s and both system
security and dependability since the 2000’s, the maturity
of diversity metrics has not been reached for them to be
used as general metrics like other security or dependability
metrics (e.g., mean time to security failure, reliability, or
availability). Entropy has been commonly used to capture
uncertainty, representing a measure of randomness where
higher diversity is assumed to show high uncertainty. How-
ever, as high entropy can be shown when there are not many
variants of system components, it is highly questionable to
simply use entropy as a diversity metric.

• We found that the three most popular attacks considered in
the existing diversity-based approaches are worm attacks,
zero-day attacks, and code injection attacks based on our
survey. Since software diversity-based approaches are pop-
ularly used to increase network diversity, it is natural to
observe that worm attacks performing epidemic attacks (e.g.,
malware or virus propagation) are the most popular attack
type considered in the existing diversity-based techniques.

13

• We found that most diversity-based approaches use existing
security metrics to capture their effect on security although
it is not crystal clear that diversity can enhance security
regardless of context or environmental conditions. Most
security metrics are mainly based on the extent of system
vulnerability to cyberattacks. The existing diversity-based
approaches have also used dependability metrics that are
most often used to measure Quality-of-Service (QoS) met-
rics (e.g., message delivery ratio, throughput, delay) while
pure dependability metrics, including availability, reliability,
or performability, have not been sufﬁciently considered.
• Unlike other cybersecurity research domains, in diversity-
based research, many studies used real datasets and real
testbeds to validate the proposed diversity-based approaches
(see Figs. 5 and 6). Most synthetic datasets and simula-
tion models are used to evaluate network diversity-based
approaches where the datasets represent network topolo-
gies and simulation models are used to evaluate network
resilience under various epidemic attacks.

B. Future Work Directions

According to the lessons learned from Section VII, we
suggest the following future research directions to develop
diversity-based approaches to enhance security and depend-
ability of CPSs:
• Investigate critical tradeoffs between system diversity
and other aspects of metric attributes. For example,
we need to clarify the relationships between diversity and
security where each system component’s vulnerabilities
vary. In addition, we should examine what other drawbacks
can be introduced by using diversity-based approaches,
such as performance degradation, maintenance cost, cross-
incompatibility, and so forth.

• Broaden the areas

to deploy/apply diversity-based
approaches. We rarely found existing diversity-based
approaches in certain areas,
such as ﬁrewalls, cryp-
tographic authentication, physical environments, and/or
human-machine interactions. In these areas, we should in-
vestigate if diversity-based approaches can introduce more
beneﬁts based on their key advantages.

• Integrate hardware and software diversity-based ap-
proaches. Although substantial efforts are made in both
software and hardware diversity research, there has been no
research integrating both. Investigating the feasibility and
merits of combining them should be the ﬁrst step to start
this research.

• Develop dynamic diversity-based approaches to enhance
system security and performance. Environmental condi-
tions and their dynamics require vastly different approaches
to tackle the development of diversity-based approaches.
We should take a ﬁrst step to tackle this problem in
terms of what additional overhead can be introduced to
deploy dynamic diversity-based approaches while how much
security and dependability can be enhanced even under the
dynamic contexts by leveraging diversity-based solutions.
• Develop meaningful metrics including diversity metrics.
the current research in

As discussed in Section VI-A,

diversity-based system designs mostly uses existing met-
rics that cannot capture the clear merit of diversity-based
approaches. In addition, as the platforms of the diversity-
based approaches being deployed become more diverse,
there should be more relevant metrics to capture diversity
and its effect on system security and dependability.

• Explore the theoretical validation of diversity-based ap-
proaches. As shown in Figs. 6 and 5, unlike other research
domains, we observed real-world datasets and real testbeds
have been popularly used in the existing diversity-based
approaches. However, theoretical validation was relatively
weakly observed. It is fundamental to provide the theoretical
basis of an approach because the theoretical validation
can provide a generic framework that can enable other
researchers to easily adopt a given approach.

REFERENCES

[1] Common vulnerabilities and exposures (cve). [Online].

Available: http://cve.mitre.org/

[2] Ddos

[Online].
https://www.netscout.com/arbor-ddos

solutions.

Available:

[3] N. B. Akhuseyinoglu and J. Joshi, “A risk-aware access
control framework for cyber-physical systems,” in 2017
IEEE 3rd International Conference on Collaboration
and Internet Computing (CIC).
IEEE, 2017, pp. 349–
358.

[4] H. Alavizadeh, D. S. Kim, and J. Jang-Jaccard, “Model-
based evaluation of combinations of shufﬂe and diver-
sity mtd techniques on the cloud,” Future Generation
Computer Systems, 2019.

[5] A. Avizienis, J. . Laprie, B. Randell, and C. Landwehr,
“Basic concepts and taxonomy of dependable and se-
cure computing,” IEEE Transactions on Dependable
and Secure Computing, vol. 1, no. 1, pp. 11–33, Jan.
2004.

[6] A. Avizienis, “On the implementation of n-version
programming for software fault tolerance during exe-
cution,” Proc. COMPSAC, 1977, pp. 149–155, 1977.
[7] ——, “The N-version approach to fault-tolerant soft-
ware,” IEEE Transactions on Software Engineering,
no. 12, pp. 1491–1501, 1985.

[8] A. Avizienis and J. P. Kelly, “Fault tolerance by design
diversity: Concepts and experiments,” Computer, no. 8,
pp. 67–80, 1984.

[9] A. Avizienis and J.-C. Laprie, “Dependable computing:
From concepts to design diversity,” Proceedings of the
IEEE, vol. 74, no. 5, pp. 629–638, 1986.

[10] M. Azab, R. Hassan, and M. Eltoweissy, “Chameleon-
Soft: a moving target defense system,” in Proceedings
of the 7th International Conference on Collaborative
Computing: Networking, Applications and Worksharing
(CollaborateCom), 2011, pp. 241–250.

[11] A. Balakrishnan and C. Schulze, “Code obfuscation
literature survey,” CS701 Construction of compilers,
vol. 19, 2005.

[12] E. G. Barrantes, D. H. Ackley, S. Forrest, T. S. Palmer,
D. Stefanovic, and D. D. Zovi, “Randomized instruction

14

set emulation to disrupt binary code injection attacks,”
in Proceedings of the 10th ACM conference on Com-
puter and communications security. ACM, 2003, pp.
281–289.

[13] M. Batty, K. W. Axhausen, F. Giannotti, A. Pozd-
noukhov, A. Bazzani, M. Wachowicz, G. Ouzounis, and
Y. Portugali, “Smart cities of the future,” The European
Physical Journal Special Topics, vol. 214, no. 1, pp.
481–518, 2012.

[14] B. Baudry and M. Monperrus, “The multiple facets of
software diversity: Recent developments in year 2000
and beyond,” ACM Computing Surveys (CSUR), vol. 48,
no. 1, p. 16, 2015.

[15] P. Bishop, R. Bloomﬁeld, I. Gashi, and V. Stankovic,
“Diversity for security: a study with off-the-shelf an-
tivirus engines,” in 2011 IEEE 22nd International Sym-
posium on Software Reliability Engineering.
IEEE,
2011, pp. 11–19.

[16] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazi`eres, and
D. Boneh, “Hacking blind,” in 2014 IEEE Symposium
on Security and Privacy.

IEEE, 2014, pp. 227–242.

[17] D. Borbor, L. Wang, S. Jajodia, and A. Singhal, “Opti-
mizing the network diversity to improve the resilience
of networks against unknown attacks,” Computer Com-
munications, 2019.

[18] S. S. Brilliant, J. C. Knight, and N. G. Leveson, “The
consistent comparison problem in n-version software,”
IEEE Transactions on Software Engineering, vol. 15,
no. 11, pp. 1481–1485, 1989.

[19] Y. Cao, Z. Huang, Y. Yu, C. Ke, and Z. Wang, “A
topology and risk-aware access control framework for
cyber-physical space,” Frontiers of Computer Science,
vol. 14, no. 4, pp. 1–16, 2020.

[20] R. Carvalho, “Authentication security through diversity
and redundancy for cloud computing,” Master’s thesis,
T ´ECNICO LISBOA, 2014.

[21] ——, “Cloud computing authentication security with

diversity and redundancy,” 2014.

[22] C. G. Cassandras, “Smart cities as cyber-physical social
systems,” Engineering, vol. 2, no. 2, pp. 156–158, 2016.
[23] H. Chen, J.-H. Cho, and S. Xu, “Quantifying the
security effectiveness of network diversity: Poster,”
in Proceedings of
the 5th Annual Symposium and
Bootcamp on Hot Topics in the Science of Security,
ser. HoTSoS 18. New York, NY, USA: Association
for Computing Machinery, 2018. [Online]. Available:
https://doi.org/10.1145/3190619.3191680

[24] P.-Y. S. Chen, G. Kataria, and R. Krishnan, “Software
diversity for information security.” in WEIS, 2005.
[25] M. Chew and D. Song, “Mitigating buffer overﬂows by

operating system randomization,” 2002.

[26] J.-H. Cho and T. J. Moore, “Software diversity for
cyber resilience: Percolation theoretic approach,” pp.
313–342, 2019.

[27] J.-H. Cho, S. Xu, P. M. Hurley, M. Mackay, T. Ben-
jamin, and M. Beaumont, “STRAM: Measuring the
trustworthiness of computer-based systems,” ACM
Computing Surveys, vol. 51, no. 6, Feb. 2019.

[28] D. D. Clark and D. R. Wilson, “A comparison of
commercial and military computer security policies,” in
1987 IEEE Symposium on Security and Privacy.
IEEE,
1987, pp. 184–184.

[29] W. E. Cobb, E. W. Garcia, M. A. Temple, R. O.
Baldwin, and Y. C. Kim, “Physical layer identiﬁcation
of embedded devices using rf-dna ﬁngerprinting,” in
2010-Milcom 2010 Military Communications Confer-
ence.

IEEE, 2010, pp. 2168–2173.

[30] F. B. Cohen, “Operating system protection through
program evolution.” Computers & Security, vol. 12,
no. 6, pp. 565–584, 1993.

[31] C. Collberg, C. Thomborson, and D. Low, “Manufac-
turing cheap, resilient, and stealthy opaque constructs,”
in Proceedings of the 25th ACM SIGPLAN-SIGACT
symposium on Principles of programming languages.
ACM, 1998, pp. 184–196.

[32] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu,
J. Davidson, J. Knight, A. Nguyen-Tuong, and J. Hiser,
“N-variant systems: A secretless framework for security
through diversity.” in USENIX Security Symposium,
2006, pp. 105–120.

[33] S. Crane, A. Homescu, S. Brunthaler, P. Larsen,
and M. Franz, “Thwarting cache side-channel attacks
through dynamic software diversity.” in NDSS, 2015,
pp. 8–11.

[34] B. Danev and S. Capkun, “Transient-based identiﬁca-
tion of wireless sensor nodes,” in 2009 International
Conference on Information Processing in Sensor Net-
works.

IEEE, 2009, pp. 25–36.

[35] Y. Deswarte, K. Kanoun, and J.-C. Laprie, “Diversity
against accidental and deliberate faults,” in Proceed-
ings Computer Security, Dependability, and Assurance:
From Needs to Solutions (Cat. No. 98EX358).
IEEE,
1998, pp. 171–181.

[36] Z. Drias, A. Serhrouchni, and O. Vogel, “Analysis of
cyber security for industrial control systems,” in 2015
International Conference on Cyber Security of Smart
Cities, Industrial Control System and Communications
(SSIC).

IEEE, 2015, pp. 1–8.

[37] A. S. Elmaghraby and M. M. Losavio, “Cyber security
challenges in smart cities: Safety, security and privacy,”
Journal of advanced research, vol. 5, no. 4, pp. 491–
497, 2014.

[38] S. Forrest, A. Somayaji, and D. H. Ackley, “Building
diverse computer systems,” in Proceedings. The Sixth
Workshop on Hot Topics in Operating Systems (Cat.
No. 97TB100133).

IEEE, 1997, pp. 67–72.

[39] M. Foruhandeh, Y. Man, R. Gerdes, M. Li, and
T. Chantem, “Simple: single-frame based physical layer
identiﬁcation for intrusion detection and prevention on
in-vehicle networks,” in Proceedings of the 35th Annual
Computer Security Applications Conference, 2019, pp.
229–244.

[40] M. Franz, “E unibus pluram: massive-scale software
diversity as a defense mechanism,” in Proceedings of
the 2010 New Security Paradigms Workshop, 2010, pp.
7–16.

15

[41] M. Garcia, A. Bessani, I. Gashi, N. Neves, and R. Obel-
heiro, “Analysis of operating system diversity for in-
trusion tolerance,” Software: Practice and Experience,
vol. 44, no. 6, pp. 735–770, 2014.

[42] I. Gashi, V. Stankovic, C. Leita, and O. Thonnard,
“An experimental study of diversity with off-the-shelf
antivirus engines,” in 2009 Eighth IEEE International
Symposium on Network Computing and Applications.
IEEE, 2009, pp. 4–11.

[43] I. Gashi, A. Povyakalo, L. Strigini, M. Matschnig,
T. Hinterstoisser, and B. Fischer, “Diversity for safety
and security in embedded systems,” 2014.

[44] R. Gerdes, “Physical layer identiﬁcation: methodology,

security, and origin of variation,” 2011.

[45] R. M. Gerdes, T. E. Daniels, M. Mina, and S. Russell,
“Device identiﬁcation via analog signal ﬁngerprinting:
A matched ﬁlter approach.” in NDSS, 2006.

[46] A. Gharaibeh, M. A. Salahuddin, S.

J. Hussini,
A. Khreishah, I. Khalil, M. Guizani, and A. Al-Fuqaha,
“Smart cities: A survey on data management, security,
and enabling technologies,” IEEE Communications Sur-
veys & Tutorials, vol. 19, no. 4, pp. 2456–2501, 2017.
[47] E. M. Ghourab, A. Mansour, M. Azab, M. Rizk, and
A. Mokhtar, “Towards physical layer security in In-
ternet of Things based on reconﬁgurable multiband
diversiﬁcation,” in 2017 8th IEEE Annual Information
Technology, Electronics and Mobile Communication
Conference (IEMCON).

IEEE, 2017, pp. 446–450.

[48] E. M. Ghourab, M. Azab, and A. Mansour, “Spatiotem-
poral diversiﬁcation by moving-target defense through
benign employment of false-data injection for dynamic,
secure cognitive radio network,” Journal of Network
and Computer Applications, vol. 138, pp. 1–14, 2019.
[49] L. Gmeiner and U. Voges, “Software diversity in re-
actor protection systems: An experment,” in Safety of
Computer Control Systems. Elsevier, 1980, pp. 75–79.
[50] M. S. Gondal, A. J. Malik, and F. A. Khan, “Net-
work intrusion detection using diversity-based centroid
mechanism,” in 2015 12th International Conference
on Information Technology-New Generations.
IEEE,
2015, pp. 224–228.

[51] A. Gorbenko, A. Romanovsky, O. Tarasyuk, and
O. Biloborodov, “From analyzing operating system vul-
nerabilities to designing multiversion intrusion-tolerant
architectures,” IEEE Transactions on Reliability, 2019.
[52] G. Gu, A. A. C´ardenas, and W. Lee, “Principled reason-
ing and practical applications of alert fusion in intrusion
detection systems,” in Proceedings of the 2008 ACM
symposium on Information, computer and communica-
tions security, 2008, pp. 136–147.

[53] M. Hataba, R. Elkhouly, and A. El-Mahdy, “Diversiﬁed
remote code execution using dynamic obfuscation of
conditional branches,” in 2015 IEEE 35th International
Conference on Distributed Computing Systems Work-
shops.

IEEE, 2015, pp. 120–127.

[54] K. J. Hole, “Diversity reduces the impact of malware,”
IEEE Security & Privacy, vol. 13, no. 3, pp. 48–54,
2013.

[55] A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and
M. Franz, “Proﬁle-guided automated software diver-
sity,” in Proceedings of the 2013 IEEE/ACM Interna-
tional Symposium on Code Generation and Optimiza-
tion (CGO).
IEEE Computer Society, 2013, pp. 1–11.
[56] J. B. Hong, S. Yoon, H. Lim, and D. S. Kim, “Optimal
network reconﬁguration for software deﬁned networks
using shufﬂe-based online mtd,” in 2017 IEEE 36th
Symposium on Reliable Distributed Systems (SRDS).
IEEE, 2017, pp. 234–243.

[57] L. Hong and S. E. Page, “Groups of diverse problem
solvers can outperform groups of high-ability problem
solvers,” Proceedings of the National Academy of Sci-
ences, vol. 101, no. 46, pp. 16 385–16 389, 2004.
[58] S. Hosseinzadeh, S. Rauti, S. Laur´en, J.-M. M¨akel¨a,
J. Holvitie, S. Hyrynsalmi, and V. Lepp¨anen, “A sur-
vey on aims and environments of diversiﬁcation and
obfuscation in software security,” in Proceedings of the
17th International Conference on Computer Systems
and Technologies 2016, 2016, pp. 113–120.

[59] ——, “Diversiﬁcation and obfuscation techniques for
software security: A systematic literature review,” Infor-
mation and Software Technology, vol. 104, pp. 72–93,
2018.

[60] W. Hu, J. Hiser, D. Williams, A. Filipi, J. W. David-
son, D. Evans, J. C. Knight, A. Nguyen-Tuong, and
J. Rowanhill, “Secure and practical defense against
code-injection attacks using software dynamic transla-
tion,” in Proceedings of the 2nd international confer-
ence on Virtual execution environments. ACM, 2006,
pp. 2–12.

[61] C. Huang, S. Zhu, Q. Guan, and Y. He, “A software
assignment algorithm for minimizing worm damage in
networked systems,” Journal of Information Security
and Applications, vol. 35, pp. 55–67, 2017.

[62] F. Huang, B. Liu, Y. Song, and S. Keyal, “The links
between human error diversity and software diversity:
Implications for fault diversity seeking,” Science of
Computer Programming, vol. 89, pp. 350–373, 2014.

[63] Y. Huang and A. K. Ghosh, “Introducing diversity and
uncertainty to create moving attack surfaces for web
services,” in Moving Target Defense. Springer, 2011,
pp. 131–151.

[64] Y. Huang, A. K. Ghosh, T. Bracewell, and B. Mas-
tropietro, “A security evaluation of a novel resilient
web serving architecture: Lessons learned through in-
dustry/academia collaboration,” in Proceedings of the
IEEE/IFIP International Conference on Dependable
Systems and Networks Workshops (DSN-W), 2010, pp.
188–193.

[65] A. Humayed, J. Lin, F. Li, and B. Luo, “Cyber-physical
systems securitya survey,” IEEE Internet of Things
Journal, vol. 4, no. 6, pp. 1802–1831, 2017.

[66] S. Ichikawa, T. Sawada, and H. Hata, “Diversiﬁca-
tion of processors based on redundancy in instruction
set,” IEICE transactions on fundamentals of electronics,
communications and computer sciences, vol. 91, no. 1,
pp. 211–220, 2008.

16

[67] ISO/TC, Feb. 1992, document ISO/TC 176/SC 1 N 93.
[68] T. Jackson, A. Homescu, S. Crane, P. Larsen, S. Brun-
thaler, and M. Franz, “Diversifying the software stack
using randomized NOP insertion,” in Moving target
defense II. Springer, 2013, pp. 151–173.

[69] A. Jangda, M. Mishra, and B. De Sutter, “Adaptive
just-in-time code diversiﬁcation,” in Proceedings of the
2nd ACM Workshop on Moving Target Defense (MTD),
2015, pp. 49–53.

[70] T. R. Jensen and B. Toft, Graph coloring problems.

John Wiley & Sons, 2011, vol. 39.

[71] S. Johnson and D. Ritchie, “Computing science techni-
cal report no. 102: The c language calling sequence,”
Technical report, Bell Laboratories, Tech. Rep., 1981.
[72] J. E. Just and M. Cornwell, “Review and analysis
of synthetic diversity for breaking monocultures,” in
Proceedings of
the 2004 ACM workshop on Rapid
malcode, 2004, pp. 23–32.

[73] R. Karam, T. Hoque, S. Ray, M. Tehranipoor, and
S. Bhunia, “Mutarch: Architectural diversity for fpga
device and ip security,” in 2017 22nd Asia and South
Paciﬁc Design Automation Conference (ASP-DAC).
IEEE, 2017, pp. 611–616.

[74] G. S. Kc, A. D. Keromytis, and V. Prevelakis, “Counter-
ing code-injection attacks with instruction-set random-
ization,” in Proceedings of the 10th ACM conference on
Computer and communications security. ACM, 2003,
pp. 272–280.

[75] V. Kharchenko, “Diversity for safety and security of
embedded and cyber physical systems: Fundamentals
review and industrial cases,” in 2016 15th Biennial
Baltic Electronics Conference (BEC).
IEEE, 2016, pp.
17–26.

[76] J. C. Knight and N. G. Leveson, “An experimental
evaluation of the assumption of independence in multi-
version programming,” IEEE Transactions on software
engineering, no. 1, pp. 96–109, 1986.

[77] M. Kocakulak and I. Butun, “An overview of wireless
sensor networks towards internet of things,” in 2017
IEEE 7th Annual Computing and Communication Work-
shop and Conference (CCWC).
IEEE, 2017, pp. 1–6.
[78] H. Koo and M. Polychronakis, “Juggling the gadgets:
Binary-level code randomization using instruction dis-
placement,” in Proceedings of the 11th ACM on Asia
Conference on Computer and Communications Security.
ACM, 2016, pp. 23–34.

[79] K. Kuang, Z. Tang, X. Gong, D. Fang, X. Chen, T. Xing,
G. Ye, J. Zhang, and Z. Wang, “Exploiting dynamic
scheduling for vm-based code obfuscation,” in 2016
IEEE Trustcom/BigDataSE/ISPA.
IEEE, 2016, pp.
489–496.

[80] K. Kuang, Z. Tang, X. Gong, D. Fang, X. Chen, and
Z. Wang, “Enhance virtual-machine-based code obfus-
cation security through dynamic bytecode scheduling,”
Computers & Security, vol. 74, pp. 202–220, 2018.
[81] D. F. Kune, J. Backes, S. S. Clark, D. Kramer,
M. Reynolds, K. Fu, Y. Kim, and W. Xu, “Ghost talk:
Mitigating emi signal injection attacks against analog

17

sensors,” in 2013 IEEE Symposium on Security and
Privacy.

IEEE, 2013, pp. 145–159.
[82] J. Lach, W. H. Mangione-Smith, and M. Potkonjak,
“Algorithms for efﬁcient runtime fault recovery on
diverse FPGA architectures,” in Proceedings 1999 IEEE
International Symposium on Defect and Fault Tolerance
in VLSI Systems (EFT’99).
IEEE, 1999, pp. 386–394.
[83] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz,
“SoK: Automated software diversity,” in 2014 IEEE
Symposium on Security and Privacy.
IEEE, 2014, pp.
276–291.

[84] C. Leita and M. Dacier, “Sgnet: a worldwide deployable
framework to support the analysis of malware threat
models,” in 2008 Seventh European Dependable Com-
puting Conference.

IEEE, 2008, pp. 99–109.

[85] B. Littlewood, P. Popov, and L. Strigini, “Modeling
software design diversity: a review,” ACM Computing
Surveys (CSUR), vol. 33, no. 2, pp. 177–208, 2001.
[86] A. X. Liu and M. G. Gouda, “Diverse ﬁrewall design,”
in International Conference on Dependable Systems and
Networks, 2004, 2004, pp. 595–604.

[97] A. Patrick, A. Long, and S. Flinn, “HCI and security

systems,” 02 2003.

[98] A. Pawlowski, M. Contag, and T. Holz, “Probfusca-
tion: an obfuscation approach using probabilistic control
ﬂows,” in International Conference on Detection of
Intrusions and Malware, and Vulnerability Assessment.
Springer, 2016, pp. 165–185.

[99] C. Pu, A. P. Black, C. Cowan, J. Walpole, and C. Con-
sel, “A specialization toolkit to increase the diversity of
operating systems,” 1996.

[100] W. Qu, W. Huo, and L. Wang, “Opportunistic diversity-
based detection of injection attacks in web applica-
tions,” EAI Endorsed Transactions on Security and
Safety, vol. 5, no. 16, 2018.

[101] B. Randell, “System structure for software fault toler-
ance,” Ieee transactions on software engineering, no. 2,
pp. 220–232, 1975.

[102] F. Regazzoni and I. Polian, “Securing the hardware
of cyber-physical systems,” in 2017 22nd Asia and
South Paciﬁc Design Automation Conference (ASP-
DAC).

IEEE, 2017, pp. 194–199.

[87] A. X. Liu, “Change-impact analysis of ﬁrewall poli-
cies,” in European Symposium on Research in Computer
Security. Springer, 2007, pp. 155–170.

[103] M. Reiter, “Distributing trust with the rampart toolkit,”
Communications of the ACM, vol. 39, no. 4, pp. 71–74,
1996.

[88] A. X. Liu and M. G. Gouda, “Diverse ﬁrewall design,”
IEEE Transactions on Parallel and Distributed Systems,
vol. 19, no. 9, pp. 1237–1251, 2008.

[89] M. R. Lyu and A. Aviˇzienis, “Assuring design diversity
in n-version software: a design paradigm for n-version
programming,” in Dependable Computing for Critical
Applications 2. Springer, 1992, pp. 197–218.

[90] M. R. Lyu, J.-H. Chen, and A. Avizienis, “Software
diversity metrics and measurements,” in [1992] Pro-
ceedings. The Sixteenth Annual International Computer
Software and Applications Conference.
IEEE, 1992,
pp. 69–78.

[91] F. Majorczyk, ´E. Totel, and L. M´e, “Experiments on cots
diversity as an intrusion detection and tolerance mech-
anism,” in Proceedings of the First Workshop on Re-
cent Advances on Intrusion-Tolerant Systems (WRAITS
2007), 2007.

[92] I. Malynyak, “Functional diversity design of safety-
related systems,” The Educational Review, USA, vol. 2,
no. 1, pp. 147–154, 2018.

[93] L. Nagy, R. Ford, and W. Allen, “N-version program-
ming for the detection of zero-day exploits,” Tech. Rep.,
2006.

[94] S. Neti, A. Somayaji, and M. E. Locasto, “Software di-
versity: Security, entropy and game theory,” in HotSec,
2012.

[95] J. Oberheide, E. Cooke, and F. Jahanian, “CloudAV:
N-version antivirus in the network cloud.” in USENIX
Security Symposium, 2008, pp. 91–106.

[96] A. J. O’Donnell and H. Sethu, “On achieving soft-
ware diversity for improved network security using
distributed coloring algorithms,” in Proceedings of the
11th ACM conference on Computer and communica-
tions security. ACM, 2004, pp. 121–131.

[104] J. Reynolds, J. Just, E. Lawson, L. Clough, and
R. Maglich, “On-line intrusion protection by detecting
attacks with diversity,” in Research Directions in Data
and Applications Security.
Springer, 2003, pp. 245–
256.

[105] J. Reynolds, J. Just, E. Lawson, L. Clough, R. Maglich,
and K. Levitt, “The design and implementation of an
intrusion tolerant system,” in Proceedings International
Conference on Dependable Systems and Networks.
IEEE, 2002, pp. 285–290.

[106] J. C. Reynolds, J. Just, L. Clough, and R. Maglich,
“On-line intrusion detection and attack prevention using
diversity, generate-and-test, and generalization,” in 36th
Annual Hawaii International Conference on System
Sciences, 2003. Proceedings of the.
IEEE, 2003, pp.
8–pp.

[107] R. Roman, J. Zhou, and J. Lopez, “On the features and
challenges of security and privacy in distributed internet
of things,” Computer Networks, vol. 57, no. 10, pp.
2266–2279, 2013.

[108] M. Z. I. Sarkar and T. Ratnarajah, “Enhancing secu-
rity in correlated channel with maximal ratio combin-
ing diversity,” IEEE transactions on signal processing,
vol. 60, no. 12, pp. 6745–6751, 2012.

[109] J. Selvaraj, G. Y. Dayanıklı, N. P. Gaunkar, D. Ware,
R. M. Gerdes, and M. Mina, “Electromagnetic induction
attacks against embedded systems,” in Proceedings of
the 2018 on Asia Conference on Computer and Com-
munications Security, 2018, pp. 499–510.

[110] A. Shamir, “How to share a secret,” Communications
of the ACM, vol. 22, no. 11, pp. 612–613, 1979.
[111] C. Silva, P. Sousa, and P. Ver´ıssimo, “Rave: Replicated
antivirus engine,” in 2010 International Conference on
Dependable Systems and Networks Workshops (DSN-

18

[127] S. H. Weingart, “Physical security devices for computer
subsystems: A survey of attacks and defenses,” in In-
ternational Workshop on Cryptographic Hardware and
Embedded Systems. Springer, 2000, pp. 302–317.

[128] D. Williams, W. Hu, J. W. Davidson, J. D. Hiser, J. C.
Knight, and A. Nguyen-Tuong, “Security through di-
versity: Leveraging virtual machine technology,” IEEE
Security & Privacy, vol. 7, no. 1, pp. 26–33, 2009.

[129] J. Xu, Z. Kalbarczyk, and R. K. Iyer, “Transparent
runtime randomization for security,” in 22nd Inter-
national Symposium on Reliable Distributed Systems,
2003. Proceedings.

IEEE, 2003, pp. 260–269.

[130] C. Xue, Z. Tang, G. Ye, G. Li, X. Gong, W. Wangg,
D. Fang, and Z. Wang, “Exploiting code diversity to
enhance code virtualization protection,” in 2018 IEEE
24th International Conference on Parallel and Dis-
tributed Systems (ICPADS).
IEEE, 2018, pp. 620–627.
[131] Y. Yang, S. Zhu, and G. Cao, “Improving sensor
network immunity under worm attacks: A software
diversity approach,” Ad Hoc Networks, vol. 47, pp. 26–
40, 2016.

[132] K. Zeng, D. Wu, A. Chan, and P. Mohapatra, “Ex-
ploiting multiple-antenna diversity for shared secret key
generation in wireless networks,” in 2010 Proceedings
IEEE INFOCOM.

IEEE, 2010, pp. 1–9.

[133] M. Zhang, L. Wang, S. Jajodia, A. Singhal, and
M. Albanese, “Network diversity: a security metric for
evaluating the resilience of networks against zero-day
attacks,” IEEE Transactions on Information Forensics
and Security, vol. 11, no. 5, pp. 1071–1086, 2016.
[134] R. Zhuang, S. Zhang, S. DeLoach, X. Ou, and A. Sing-
hal, “Simulation-based approaches to studying effec-
tiveness of moving-target network defense,” in Pro-
ceedings of National Symposium on Moving Target
Research, 2012.

[135] Y. Zou, J. Zhu, X. Wang, and V. C. Leung, “Improving
physical-layer security in wireless communications us-
ing diversity techniques,” IEEE Network, vol. 29, no. 1,
pp. 42–48, 2015.

W).

IEEE, 2010, pp. 170–175.

[112] N. Skandhakumar, F. Salim, J. Reid, and E. Dawson,
“Physical access control administration using building
information models,” in Cyberspace Safety and Secu-
rity. Springer, 2012, pp. 236–250.

[113] C. Smutz and A. Stavrou, “When a tree falls: Using
diversity in ensemble classiﬁers to identify evasion in
malware detectors.” in NDSS, 2016.

[114] V. Software. Vmprotect home page. [Online]. Available:

http://vmpsoft.com/

[115] A. N. Sovarel, D. Evans, and N. Paul, “Where’s the
feeb? the effectiveness of instruction set randomiza-
tion.” in USENIX Security Symposium, vol. 10, 2005.

[116] K. Stouffer, J. Falco, and K. Scarfone, “Guide to
industrial control systems (ics) security,” NIST special
publication, vol. 800, no. 82, pp. 16–16, 2011.
[117] M. Taguinod, A. Doup´e, Z. Zhao, and G.-J. Ahn,
“Toward a moving target defense for web applications,”
in IEEE International Conference on Information Reuse
and Integration (IRI), 2015, pp. 510–517.

[118] O.

Technologies.

Total

obfuscation

reverse
http://www.oreans.com/codevirtualizer.php

engineering.

[Online].

against
Available:

[119] O. Temizkan, S. Park, and C. Saydam, “Software diver-
sity for improved network security: optimal distribution
of software-based shared vulnerabilities,” Information
Systems Research, vol. 28, no. 4, pp. 828–849, 2017.

[120] E. Totel, F. Majorczyk, and L. M´e, “Cots diversity based
intrusion detection and application to web servers,” in
International Workshop on Recent Advances in Intru-
sion Detection. Springer, 2005, pp. 43–62.

[121] M. Touhiduzzaman, A. Hahn, and A. Srivastava, “A
diversity-based substation cyber defense strategy utiliz-
ing coloring games,” IEEE Transactions on Smart Grid,
2018.

[122] K. S. Trivedi, D. S. Kim, A. Roy, and D. Medhi, “De-
pendability and security models,” in 2009 7th Interna-
tional Workshop on Design of Reliable Communication
Networks, 2009, pp. 11–20.

[123] M. Van Der Meulen, “On the use of smart sensors,
common cause failure and the need for diversity,” in
6th International Symposium Programmable Electronic
Systems in Safety Related Applications. Citeseer, 2004.
[124] H. Wang, M. Brisfors, S. Forsmark, and E. Dubrova,
“How diversity affects deep-learning side-channel at-
tacks,” in 2019 IEEE Nordic Circuits and Systems
Conference (NORCAS): NORCHIP and International
Symposium of System-on-Chip (SoC).
IEEE, 2019, pp.
1–7.

[125] T. Watteyne, A. Mehta, and K. Pister, “Reliability
through frequency diversity: why channel hopping
makes sense,” in Proceedings of the 6th ACM sym-
posium on Performance evaluation of wireless ad hoc,
sensor, and ubiquitous networks, 2009, pp. 116–123.

[126] W. Weber, “Firewall basics,” in 4th International Con-
ference on Telecommunications in Modern Satellite,
Cable and Broadcasting Services (TELSIKS’99), vol. 1.
IEEE, 1999, pp. 300–305.

Diversity-By-Design for Dependable and Secure
Cyber-Physical Systems: A Survey

Qisheng Zhang, Abdullah Zubair Mohammed, Zelin Wan, Jin-Hee Cho, Senior Member, IEEE, and Terrence J.
Moore, Member, IEEE

1

0
2
0
2

l
u
J

6
1

]

R
C
.
s
c
[

1
v
8
8
6
8
0
.
7
0
0
2
:
v
i
X
r
a

APPENDIX A
COMPARISON BETWEEN OUR SURVEY PAPER AND
EXISTING SURVEY PAPERS

We found several similar survey papers [10, 13, 61, 62, 78]
to our survey paper in the literature. Here we discuss each
work to clarify the key contributions of our survey paper
compared to these existing works.

Balakrishnan and Schulze [10] conducted a limited sur-
vey based on 14 references and mainly focused on code
obfuscation, a typical method to apply software diversity at
an instruction level. They covered general code obfuscation
techniques used by viruses to hide malicious activities or
commercial software to protect valuable assets. Instead of
directly showing applications of code obfuscation in the
protection of assets, this paper analyzed the attack patterns
of a virus to show the potential usage of code obfuscation
in the security domain. However, this paper didn’t provide
any security or performance metrics used in the existing
obfuscation techniques.

Baudry and Monperrus [13] surveyed recent studies on
software diversity. They categorized each work into either
managed diversity or automated diversity based on the hu-
man involvement. They discussed the core concept of each
technique along with its pros and cons. As for performance
the authors primarily discussed resilience and
evaluations,
security to show the effectiveness of diversity techniques. They
also provided an overview on the research history of software
diversity. However, their work didn’t conduct a comprehensive
survey on attacks covered and performance metrics used by
the existing diversity-based security techniques, as we did in
our survey paper.

Larsen et al. [78] conducted a more extensive survey on
software diversity than [10, 13]. Their survey paper provided
two different types of classiﬁcation of software diversity: (i)
the scope and level where diversiﬁcations occur, including
instruction, basic block, loop, function, program, and system
levels; and (ii) the development time when diversiﬁcations
occur, such as implementation, compilation, linking, instal-
lation, loading, executing, and updating. They also discussed
extensive sets of attacks and diversity metrics employed in

Qisheng Zhang, Zelin Wan, and Jin-Hee Cho are with The Depart-
ment of Computer Science, Virginia Tech, Falls Church, VA, USA. Email:
{qishengz19, zelin,
jicho}@vt.edu. Abdullah Zubair Mohammed is with
The Bradley Department of Electrical and Computer Engineering, Virginia
Tech, Arlington, VA, USA. Email: abdullahzubair@vt.edu. Terrence J. Moore
is with US Army Research Laboratory, Adelphi, MD, USA. Email:
ter-
three authors made almost a same
rence.j.moore.civ@mail.mil. The ﬁrst
amount of contributions.

the existing diversity-based security approaches. For each
work cited in their survey paper, the authors discussed the
performance of a corresponding diversity technique evaluated
by running time and memory. They discussed the pros and
cons of each diversity technique, providing an example.

Hosseinzadeh et al. [62] reviewed over three hundred papers
related to diversiﬁcation and obfuscation from 1993 to 2017.
This survey provided an overview of the current existing
research in this area. Speciﬁcally, they categorized papers
based on their aims, attacks mitigated, environments used
and development time as in [78]. However, this work mainly
introduced different software diversity techniques other than
analyzing their pros and cons in detail. The authors also
provided the summary of evaluation methods in performance
(e.g., memory size, running time) and security against attacks.

APPENDIX B
MULTIDISCIPLINARY CONCEPTS OF DIVERSITY

In this section, we survey the concepts of diversity in 9
different disciplines, including, biodiversity, geodiversity, bi-
ology, sociology, psychology, political science, organizational
management, nutrition science, and computing & engineering.
In particular, based on this comprehensive survey on the
concept of diversity, we discuss how the multidisciplinary
concept of diversity has been applied to build dependable and
secure CPSs.

1) Biodiversity: DeLong [37] deﬁned biodiversity as a
property of a region that deals with the variety between or
within living organisms, communities and processes that occur
naturally or are introduced by humans. Biodiversity offers
a multi-functionality of services in the ecosystem, including
the stability of habitats, the regulation of climate, water and
gas, air puriﬁcation, erosion control, nutrient cycling, among
others [112]. Kennedy et al. [72] also discussed how biodiver-
sity can enhance the resilience of an ecosystem by mitigating
foreign invasions with rich kinds of species.

2) Geodiversity: Geodiversity refers to the heterogeneity
among the abiotic components and processes of the earth,
including geological (e.g., rocks and minerals), geomorpho-
logical (i.e., the processes of the earth’s surface, soil, and
water [18]. Schrodt et al. [99] emphasized the importance of
geodiversity in securing our ecosystem, in addition to biodi-
versity, with the goal of establishing sustainable ecosystems.
3) Biology: Genetic variation among each individual in a
species introduces diversity in biological systems of living or-
ganisms [73, 104]. The immune system, such as in vertebrates,

 
 
 
 
 
 
TABLE I
COMPARISON OF OUR SURVEY AND OTHER EXISTING SURVEYS ON DIVERSITY-BASED SYSTEM DESIGNS

Criteria

Our survey
paper

Multidisciplinary concept of diversity
Design principles: beneﬁts & caveats

Attributes & properties of dependable and secure CPSs
Diversity-based approaches discussed based on
multi-faceted dimensions of CPSs

Attacks countermeasured by diversity-based approaches

Validation & veriﬁcation methodologies (i.e., metrics,
datasets, and evaluation testbeds)
Discussions on insights, limitations, and lessons learned

X
X

X
X

X

X

X

Balakrishnan
and Schulze
[10] (2005)
✗
X

Larsen
et al. [78]
(2014)
✗
X

Baudry and
Monperrus
[13] (2015)
✗
X

Hosseinzadeh
et al. [61]
(2016)
✗
✗

✗
Limited
(obfusca-
tion
techniques)
✗

✗

X

✗
X

X

✗

X

✗
X

✗

Limited
(cost)
X

✗
Limited
(summary)

Limited
(Statistical
table)
✗

X

2

Hosseinzadeh
et al. [62]
(2018)
✗
Limited
(summary)
✗
X

Limited
(Statistical
table)
Limited
(cost)
X

draws the best analogy with a computer network. A type of
white blood cell, called lymphocyte, is an essential part of
the immune system ﬁghting against disease-causing agents,
called pathogens. Pathogens have a toxic substance called an
antigen, which triggers the lymphocyte to generate antibodies
to ﬁght against the pathogen [104]. Different lymphocytes
react to different antigens. Therefore, to cover all the antigens,
the immune system has a diverse set of lymphocytes. Of
course, no single individual’s immune system is complete.
A pathogen that does not affect one individual may affect
another one. However, as a species, not all individuals are
vulnerable to speciﬁc pathogens. This implies that some
individuals may be affected by a particular pathogen while
it does not affect the whole population and therefore helps
the survival and sustainability of the species. Biology-inspired
computer systems based on the philosophy of the immune
system have received signiﬁcant interest in the engineering
ﬁelds [3, 52, 73, 97, 104].

4) Sociology: The sociological perspective of diversity
research spans the investigation of differences in demographic
traits (e.g., race, ethnicity, gender, age, marital status), sexu-
ality, socio-economic status, religion, nationality, appearance,
ability, and experience [28]. Sociologists have discussed the
beneﬁt of diversity as a way to facilitate social sustainabil-
ity [24].

5) Psychology: Environmental psychologists have studied
“the concept of afﬁnity towards diversity (ATD)” that can
psychologically drive ‘pro-sustainability orientation’ and ‘en-
vironmentally friendly behaviors’ [31]. In addition, they also
emphasized the importance of diversity as a driving force
for sustainability that provides solidarity as the capability of
cooperation and mutual aids [68]. Viewpoints diversity is also
examined by psychologists. A recent study [39] looked at
evidence showing how political diversity and disagreement can
improve the extent of reliability and validity of social science
by detecting fallacies and errors in the process of experiments.
6) Political Science: Political scientists mainly studied
how political diversity affects of political integration [74].
Even if people vote for the same candidate in an election, their
views are diverse, implying that the political ideology is not
necessarily identical. Hence, these studies are predominantly

concerned with how diversity in race, ethnic groups, gender,
and sexual orientation can affect political propensity [34]. Po-
litical scientists [59] developed a mathematical model to prove
how much a diverse group (e.g., with diverse solvers) can
outperform in a problem solving exercise requiring creativity
compared to the solving ability of a homogeneous group (i.e.,
with same high-skilled solvers).

7) Organizational Management: In this domain, diversity
has been studied as a key driver to improve productivity in
the workplace [114]. The work diversity is tested in terms
of social categorization, information, and decision making
skills. Although homogeneous groups perform better in social
categorization, heterogeneous groups performed better in the
tasks requiring information and decision making skills. This
ﬁnding is also well aligned with that in [117], showing higher
accuracy in detecting bankruptcy when groups with diverse
skills are involved in the decision making process.

8) Nutrition: In this domain, dietary diversity is deﬁned
as the different types food consumed by a household in a
ﬁxed reference time frame. Several studies have supported the
ﬁnding that dietary diversity positively impacts food security
and nutrition [55, 106]

9) Computing & Engineering: In this domain, diversity
is adopted as a design principle in order to support system
dependability, security, and resilience (or fault-tolerance) by
utilizing different types of software, hardware, or protocols
that provide the same functionalities [121]. Initially, system
diversity has emerged because different vendors produce dif-
ferent hardware or software, which can naturally generate
artiﬁcial diversity. But it turned out using the artiﬁcial diversity
can provide high resistance against cyberattacks because sys-
tems with high diversity designs cannot be easily compromised
by attackers or even increase attack complexity and cost due to
the polyculture software/hardware nature [26]. Nature-inspired
computing [84] is inspired by living systems that can prolong
with high diversity.

APPENDIX C
DIVERSITY-BASED APPROACHES FOR SECURE AND
DEPENDABLE CYBER-PHYSICAL SYSTEMS

In Table III, we summarized the overview of the existing
diversity-based approaches surveyed in Section IV of the main

TABLE II
MULTIDISCIPLINARY CONCEPTS OF DIVERSITY: KEY DEFINITIONS, APPLICATION DOMAINS, SUPPORTING SYSTEM QUALITY, AND CAVEATS

3

Discipline

Key Concept

Application Domain

Biodiversity

Geodiversity

Biology

Sociology

Psychology

Political Science

Diversity in Living
organisms and
processes
Diversity in
non-living organisms
and processes
Genetic variations

Diversity in
demographics or
individual differences
Diverse viewpoints
or attitudes towards
political leaning,
cooperation, or
mutual aids
Diversity in political
leaning and/or groups

Ecosystems

Ecosystems

Immune system;
pharmacology
The extent of acceptance
to society, community, or
groups
Organizations,
communities, society as
cooperative entities

Election campaign;
decision making

Nutrition

Health

Human nutrition

Organizations;
communities

Supporting System
Quality
Sustainability, resilience
(or resistance or fault
tolerance), stability
Climate regulation, clean
energy, sustainability

Disease control,
survivability of species
Social sustainability

Reliability; validity,
solidarity, sustainability

Political integration;
problem solving skills;
sustainability
Food security; nutrition
quality’ survivability
Productivity; creativity;
problem solving; decision
making

Computer-based
systems/networks;
software engineering

Fault tolerance;
resilience; sustainability;
survivability;
dependability; security

Organizational
Management

Computing /
Engineering

People in their
cultural identities,
demographic
characteristics, skills,
and expertise
Natural/Artiﬁcial
design of
computer-based
systems

paper.

Caveats

Ref.

Socio-economic costs,
impact on other
ecosystem services
High cost for
diversiﬁcation

High cost in health care;
patients’ privacy issue
Lack of understanding in
human diversity

Extreme polarization
upon failure of accepting
diversity

[37, 72, 112]

[18, 99]

[3, 52, 73,
97, 104]
[24, 28]

[31, 68, 39]

Risk in low
consensus/non-integration

[34, 59, 74]

Food cost

[55, 106]

Potential delay in
converging diverse
opinions; lack of
understanding in those
with other background
Cost for diversity-based
system designs;
interoperability

[114, 117]

[26, 84, 121]

APPENDIX D
ATTACK TYPES CONSIDERED BY DIVERSITY-BASED
SECURITY APPROACHES

The existing diversity-based security techniques have been

designed and used to counter the following attacks:
• Physical attack [4, 21, 102]: A physical attack refers to
the attack scenario where attackers attempt to break access
control systems and physically access CPSs.

• Zero-day attack [17, 22, 27, 38, 43, 50, 66, 82, 85,
93, 94, 96]: This attack utilizes unknown vulnerabilities
where patches for the vulnerabilities are not available yet.
Diverse but redundant authentications are used to thwart
such attacks. The authentication is performed by compar-
ing outputs of diverse implementations of system compo-
nents [22, 85, 94, 96].

• Worm attack [9, 26, 44, 56, 60, 64, 65, 69, 87, 88, 91, 95,
108, 121]: A worm is a malicious computer program that can
self-replicate and spread to other network computers. After
the worm infects a machine, it can edit a ﬁle or monitor
the machine. Software diversity can enhance survivability
of the Internet against worm attacks [9]. Graph coloring
algorithms are also used to increase the diversity of software
packages assuming that different software packages have
the different degree or types of vulnerabilities [60, 64,
65, 87, 88, 108, 121]. Software diversity-based topology
adaptation is another effective way to thwart such epidemic
attacks [26].

• Code injection attack [12, 32, 63, 71, 92, 118, 119]:
This attack injects a payload, which is usually binary, to
a running application, and then forces the application to
run the payload. Since the injected code can only work
when an environment is compatible, random instructions
generated for each program have been proposed when they
are loaded to memory [71]. Since the attacker don’t know
the randomization value, the attacker cannot execute the
payload properly.

• Code reuse attack [57, 75, 118]: This attack changes the
function pointer of a program so that the program is going
to execute malicious behavior. A proﬁle-guided automated
diversity approach to defend against code reuse attacks [75].
• Return-to-Libc attack [118]: This attack is often applied
when a buffer overﬂow error occurs. The attacker usually
has prior knowledge of the stack address. And then, it
replaces the return address with the address of another
subroutine, subsequently forcing the application to execute a
library function with malicious arguments. To deal with this
attack, the calling sequence diversity (CDS) of functions is
used [118]. Since different programs have their respective
calling sequence with CSD, the attack for one program
cannot be easily propagated to other programs. An attacker
may guess the key value for each function by constantly
observing the function address although the attacker cannot
use the same value for other programs.

• Correlated attack [58]: A correlated attack refers to an
attack scenario where one compromised node’s failure can
cascade to the class of nodes it belongs to immediately.
Under this situation, the attacker is assumed to have di-

TABLE III
TECHNIQUES OF DIVERSITY-BASED DESIGNS FOR SECURE AND DEPENDABLE CPSS

Ref.

Technique Type

Attacks Mitigated

Metric for Evaluation

Pros

Cons

Diversity for Physical Environments

4

Geographical topology
diversity
Action sequence diversity

Physical attack

Physical attack

No experiments
conducted
No experiments
conducted

Provide security solutions
for direct physical access
Easy to manage access
control systems through
graphical environments,
such as GPS in 3D maps

Hard to implement or
update
Sensitive to human errors

Access constraint
diversity

Physical attack

Percentage of granting
requests
Network Diversity

Metric-based software
allocation
Metric-based software
allocation
Metric-free software
allocation
Metric-free software
allocation

Metric-free software
allocation
Network topology
shufﬂing

FPGA architectural
diversity
Physical Layer
Identiﬁcation and Device
Fingerprinting
Physical Layer
Identiﬁcation and Device
Fingerprinting
Physical Layer
Identiﬁcation and
RF-DNA Fingerprinting
Physical Layer
Identiﬁcation and Device
Fingerprinting
FPGA architectural
diversity
Frequency Diversity

Worm attack

Epidemic Threshold

Zero-day attack

d1, d2, d3 metrics

Easy formalization as
optimizing problems

High complexity

Worm attack

Defective edge count

Strong theoretic support

High efﬁciency

Only validated in static
networks
Reconﬁguration cost

Worm attack

Coordinated attack

Correlated attack

Maximum size of
common vulnerability
graphs
Node exploitability index

Expected path variant
(EPV)

Hardware Diversity

Zero-day attack

Fault-free probability

Flexibility

Area overhead

Low implementation cost

Only applicable in
dynamic networks

Impersonation Attack

Denial of Service Attack

Impersonation Attack

Impersonation Attack

Side-channel attacks,
Tampering attack
Zero-day attack

Intrusion detection
accuracy

Intrusion detection
accuracy

Average correct
classiﬁcation percentage
and Confusion Matrix
Intrusion detection
accuracy

Inter and intra bit stream
distances
Probability of connection,
Average Expected
Transmission Count
(ETX) and Network
churn
Randomness,
bit-agreement ratio and
shared bit-generation rate
Secrecy capacity and
intercept probability
Secrecy capacity and
intercept probability

Physical Authentication

Training per hardware

Intrusion Detection

Sensitive to environment

Device Identiﬁcation

Sensitive to aging of
hardware

Ease of implementation

Latency overhead

Secure communication
between nodes

Higher power
consumption

Improvement of network
utilization

Increase in hardware
complexity

Improvement of network
connectivity

Antenna Diversity

Eavesdropping

Antenna and User
Diversity
Antenna Diversity

Eavesdropping

Eavesdropping

[102]
(2012)
[4]
(2017)

[21]
(2020)

[108]
(2017)
[17]
(2019)
[88]
(2004)
[65]
(2017)

[110]
(2018)
[58]
(2017)

[77]
(1999)
[46]
(2006)

[35]
(2009)

[29]
(2010)

[41]
(2019)

[70]
(2017)
[116]
(2009)

[122]
(2010)

[125]
(2015)
[47]
(2017)

rect access to all nodes in the network. Graph coloring
algorithms are used to optimally assign software variants
to the network to maintain the maximum connectivity and
security [58].

• Coordinated attack [110]: This type of attack allows
attackers to target multiple network assets simultaneously.
Thus, software monoculture can introduce signiﬁcant vul-
nerability in this scenario. Game theoretic approaches are
used to mitigate and thwart this kind of attack by optimally
assigning different software packages in the network [110].
• Buffer overﬂow attack [15, 25, 40, 90, 105]: The buffer
overﬂow attack targets services that automatically restart
once a machine is crashed. This attack would ﬁrst scan

and read the stack to identify potential vulnerabilities and
then remotely perform the write operation to steal a server’s
binary code. Note that attackers may overwrite the stack
with their guesses until services crash and restart, which
allows them to try more without being detected.

• Side-channel attack [33, 53, 70, 111, 115, 124]: A side-
channel attack targets at the implementation environment
of an algorithm other than the algorithm itself. These
environmental factors can be physical, such as power supply
and acoustic variables, or non-physical, such as cache and
running time during the execution of algorithms.

• Deobfuscation attack [30, 89]: This kind of attack tries to
perform malicious reverse engineering on obfuscated code.

TABLE III
(CONTINUED) TECHNIQUES OF DIVERSITY-BASED DESIGNS FOR SECURE AND DEPENDABLE CPSS

Ref.

Technique Type

Attacks Mitigated

Metric for Evaluation

Pros

Cons

5

[91] (1996)

OS diversity

Worm attack

Survivability rates

Software Diversity

[40] (1997)

OS diversity

[85] (2006)

OS diversity

Buffer overﬂow
attack
Zero-day attack

[43] (2014)

OS diversity

Zero-day attack

Stack usage

Intrusion detection
accuracy
Common vulnerabilities

[50] (2019)
[82] (2008)

OS diversity
Firewall diversity

Zero-day attack
Zero-day attack

Common vulnerabilities
Functional discrepancies

[95] (2002)
[109] (2005)

Intrusion Detection
Intrusion Detection

Worm attack
Denial of Service
attack

Failover on attack
Intrusion detection
accuracy

[32] (2006)

Intrusion Detection

Code injection attack

[83] (2007)

Intrusion Detection

Generic intrusions

[51] (2008)

Intrusion Detection

[49] (2015)

Intrusion Detection

[92] (2018)

Intrusion Detection

HTTP and TCP
intrusions
Denial of Service
attack
Code injection attack

[44] (2009)

Antivirus diversity

Worm attack

[23] (2014)

[30] (1998)

Cryptographic
algorithm diversity
Obfuscation

XML signature
warping attack
Reverse engineering

[69] (2004)

Obfuscation

Worm attack

Intrusion detection
accuracy
Intrusion detection
accuracy

Intrusion detection
accuracy
Intrusion detection
accuracy
Intrusion detection
accuracy
Intrusion detection
accuracy
Algorithm speciﬁc
metrics
Measures of potent,
resilience, stealth and cost
Attack speciﬁc

[53] (2015)

Obfuscation

Side-channel attack

Code similarity

[33] (2015)

Obfuscation

Side-channel attack

[89] (2016)

Obfuscation

[76] (2016)
[120] (2018)

Obfuscation
Obfuscation

Dynamic trace
analysis
Reverse engineering
Reverse engineering

Number of key-bits
discovered by attacker
Code similarity

Calling frequency
Likelihood of mapping

Dynamic adaptation
against attacks
Enhance robustness with
minimal efﬁciency impact
Effective against
unknown attacks
Theoretic analysis based
on public datasets

Effective against
unknown attacks
Detection of threats
Increase of detection
coverage against many
attacks by using diverse
IDS
Enhancement of tracking
the attack pattern

Code complexity
overhead
May disrupt code
legitimacy
Labor overhead

No simulations

Labor overhead

False alarms
Lack of proactive defense
(e.g., prevention)

Performance and
maintenance cost
IDS being attacked by
DoS attacks to create
false alerts

High computing resources

Performance and
complexity overhead
Cannot guarantee the
irreversibility of code.
Techniques using VMs in
parallel requires
tremendous
computational resources.

Mitigation of zero-day
attacks
Multifold security

Increases the cost for an
attacker.
Increase the time required
for an attacker.

Increase of trace analysis
complexity
High challenge in reverse
engineering

Speciﬁcally, the attacker aims to undo the obfuscating trans-
formations on the original program and retrieve valuable
information out of it. The attacker may perform analysis
through multiple traces in order to efﬁciently and effectively
deobfuscate the target program [89].

• Impersonation attack [29, 36, 41, 45, 46]: This type of
attack fools the identiﬁcation system in order to disguise
the malicious behavior, if any. This is normally done by
mimicking or replaying the features and signals extracted
from normal communications with other nodes [36, 45].
• Tampering attack [70]: This attack targets at a system’s
physical identity information, such as an IP address. For
example, the attacker may keep sending requests to the
system and analyze the returning bitstream [70]. After
retrieving the identity information, the attacker may tamper
the systems’ identity and launch other attacks, such as
impersonation attack.

• Eavesdropping attack [47, 48, 98, 122, 125]: This attack
allows the attacker to passively gain information through the
network communications. This can be done by installing

malware or injecting a virus into compromised network
clients. The stolen private information would later be stored
and analyzed to engage in malicious activities.

• Denial of Service attack [35, 49, 109]: This type of attack
typically sends out an extensive number of requests to
servers, which causes a system’s temporary overload and
dysfunction. Normal valid requests would be rejected during
the temporary shutdown period.

• Reverse engineering [30, 42, 76, 120]: Reverse engineering
refers to the process where attackers could analyze and
identify system components and their interrelationships so
that attackers can further leverage them to reconstruct the
system in a similar form.

APPENDIX E
METRICS USED FOR DIVERSITY-BASED APPROACHES

In this section, as we mentioned in Section VI.A of the
main paper, we provide the detail of each metric used in the
existing diversity-based approaches.

[25]
(2002)
[119]
(2003)

[12]
(2003)

[71]
(2003)

[63]
(2006)
[67]
(2008)

[118]
(2009)
[57]
(2013)
[75]
(2016)
[42]
(2010)

[27]
(1987)
[93]
(1996)
[38]
(1998)
[66]
(2014)

TABLE III
(CONTINUED) TECHNIQUES OF DIVERSITY-BASED DESIGNS FOR SECURE AND DEPENDABLE CPSS

Ref.

Technique Type

Attacks Mitigated

Metric for Evaluation

Pros

Cons

6

Code diversity: OS
randomization
Code diversity: TRR

Code injection attack

Logical explanation

Software Diversity (continued)

Buffer overﬂow attack

None

Retaining functionality

Storage overhead

Code diversity: ISR

Code injection attack

Code diversity: ISR

Code injection attack

Intrusion detection
accuracy

Intrusion detection
accuracy

Code diversity: ISR using
AES
Code diversity: ISR

Code injection attack

Plagiarism, analysis

Intrusion detection
accuracy
Attack speciﬁc

Code diversity: ISR and
Calling sequence
Code diversity: NOP
insertion
Code diversity:
Instruction displacement
Compiler diversity

Code injection attack

Manual evaluation

Code reuse attack

Survivability rates

Code reuse attack

Reverse engineering

Randomization code
coverage
None

Performance overhead

Lack of estimating ASLR
addresses using
side-channel attacks
High likelihood of
machine level ISR
techniques vulnerable to
incremental key-breaking
attacks

Increase in difﬁculty for
am attacker in predicting
memory addresses
Increase of attack cost or
complexity in forming
gadgets
Increased difﬁculty in
reverse engineering

Increase of the
heterogeneity of a system
Protection against a wide
variety of buffer overﬂow
attacks

Diversity for Human-Machine Interactions

Human operator diversity

Zero-day attack

Human operator diversity

Zero-day attack

Human error diversity

Zero-day attack

Human error diversity

Zero-day attack

No experiments
conducted
No experiments
conducted
No experiments
conducted
No experiments
conducted

Ensure the external data
consistency

Labor overhead

Introduce inherent
software design diversity

Error overhead

1) Security Metrics: The existing diversity-based ap-
proaches have used the following metrics to measure security:

• Epidemic Threshold [60, 87, 108]: This metric measures
the effectiveness of diversity in terms of the rate of worm or
virus propagation in a network [87]. In the context of worm
propagation in a network, the rate of propagation is deﬁned
as the ratio of the infection rate (β) to the recovery rate of
nodes (γ). This ratio, β/γ, is compared with the threshold,
below which the infection dies out. An epidemic threshold
is considered as:

β
γ

<

N
hki

,

(1)

where hki is the average node degree and N is the number
of different software variants available in the network.
This metric well reﬂects the extent of network security
under epidemic attacks. However, the epidemic threshold
is not scalable for large-scale networks, such as scale-free
networks [60, 108].

• Diversity metrics: The extent of diversity is measured in
code, instructions, or routing paths. The examples include:
– Expected path variant (EPV) [58]: This metric measures
the expected proportion of attack paths with more than
indicating the extent of system
one software variant,
security.

– Randomization code coverage [75]: This metric eval-
uates the percentage of randomized instruction sets in a
code base. This is often used to defend against code reuse
attacks where a more randomized code means lower code
reusability during attacks.

– Code similarity [53, 89]: This metric quantiﬁes the
effectiveness of code obfuscation techniques by code
similarity degree. The similarity degree is represented
by the percentage of identical codes in the obfuscated
algorithm.

• Vulnerability metrics: The metrics to capture system vul-

nerability (or exploitability) to attacks are:
– Percentage of granting requests [21]: This metric eval-
uates system vulnerability based on the proportion of
granted requests over all access requests in which users
with low trust are not granted for their access rights.
– Maximum size of common vulnerability graphs [64,
65]: This metric measures the degree of system vulner-
ability in terms of the number of common vulnerability
graphs (CVGs) as a subgraph where all nodes share the
same software variants and where the size of CVGs is
affected by how the software variants are assigned in
a network (i.e., a software assignment problem). Huang
et al. [65] considered three different types of networks
where each network is a weighted communication graph.

– Node exploitability index [110]: This metric measures
a node’s degree of being exploitable by its neighboring
nodes when they are compromised. Touhiduzzaman et al.
[110] used the sum of normalized exploitability indices
of all nodes as a system security metric.

– Common vulnerabilities [43, 50]: This metric gives the
extent of shared common vulnerabilities between pairs of
operation systems where the data used by this metric are
obtained from the NIST National Vulnerability Database
(NVD).

– Connected component count [88]: This metric gives
the total number of connected components in a network,
where all nodes in each of these components have the
same software package.

– Secrecy capacity and intercept probability [47, 125]:
This metric measures the system conﬁdentiality by the
secrecy capacity, which is the difference between the main
link and the wiretap link channel capacity. Lower secrecy
capacity results in higher intercept probability and thus
lower system conﬁdentiality.

• System compromise metrics: The extent of compromised
nodes or compromised routes in a given system or network
are used as a metric:
– Fraction of compromised nodes [26]: This metric esti-
mates the proportion of compromised nodes under epi-
demic attacks when a network is adapted based on a
software diversity value estimated in terms of the software
variants and the software vulnerabilities in each node.
– Defective edge count [88]: Defective edges refer to
edges between nodes with the same version of software
packages in a given network. This metric measures the
total number of defective edges in the network.

• Intrusion detection accuracy [12, 32, 35, 41, 44, 46, 49,
51, 63, 71, 83, 85, 92, 109]: This metric evaluates the
security performance of diversity-based IDS. The higher
detection accuracy indicates the contribution of diversity
schemes associated with the system [92]. Speciﬁcally, intru-
sion detection accuracy can be evaluated by true positive,
false positive, true negative, false negative, and equal error
rate of IDS.
2) Dependability Metrics: The following dependability
metrics have been used by diversity-based security techniques:
• Quality-of-Service (QoS) metrics: QoS is often measured

to indicate system dependability. The examples are:
– Total packet loss rate [58]: This metric is commonly
used to measure service availability of a system, measur-
ing the total number of packets lost over the total number
of packets transmitted. Hong et al. [58] used this metric
to measure service availability where a network topology
is periodically changed in order to change attack paths as
in a moving target defense mechanism.

– Execution time delay [12, 57, 63, 71, 75, 118]: This
metric quantiﬁes the average running time of the defense
system, which is compared against that of the original
system without a defense mechanism. The metric is
often represented by the ratio of delay introduced in the
proposed defense system over the delay in the original

7

system.

• Reliability: Operational system reliability is measured as
an aspect of dependability as well. The examples are as
follows:
– Loss of load [110]: This metric measures how much load
has been reduced due to attacks applied to a network of
interconnected substations. This metric represents system
reliability since lower loss of load indicates high relia-
bility with reduced damage introduced by attacks, which
happen after a graph coloring algorithm is applied to adapt
an original network to a network with a high network
diversity in terms of software variants.

– Functional discrepancies [82]: This metric detects and
outputs all existing functional discrepancies between mul-
tiple ﬁrewall versions by a customized comparison algo-
rithm.

– Survivability rates [57, 91]: This metric measures system
reliability by observing the execution output of some
system checkpoints, such as specialized codes [91] or
instruction sequence of gadgets [57]. The higher surviv-
ability rates of specialized codes indicates higher system
reliability against security faults caused by attacks.
• Maintainability: Financial cost or overhead is considered
to measure dependability as well. The examples include:
– Minimum number of software packages [108]: This
metric measures the minimum number of software pack-
ages installed to obtain the administration and support
cost along with software diversity maintenance. To be
speciﬁc, a system imposes a minimum number of of
installations for each software package so that they could
control the maintenance cost of software diversity.

– Stack usage [40]: This metric evaluates the space main-
tenance cost of diversity mechanisms with additional
required stack space needed in the execution process. The
additional space is commonly quantiﬁed as a percentage
of the original stack space.

APPENDIX F
DATASETS USED FOR DIVERSITY-BASED APPROACHES

We summarized the datasets used to validate the proposed
diversity-based approaches proposed based on 35 research
papers in Table IV.

APPENDIX G
VALIDATION TESTBEDS USED FOR DIVERSITY-BASED
APPROACHES

In this section, we survey the evaluation testbeds used to
validate the existing diversity-based approaches for secure
and dependable CPSs. We discuss the four types of evalu-
ation testbeds used in the literature: analytical model-based,
simulation-based, emulation-based, and real testbed-based.

1) Analytical Model-based Validation: A stochastic
model has been used to model a system, attack behaviors,
and interactions of system components in order to assess the
proposed technique. These models provide mathematical proof
of concept for the proposed technique. Sarkar and Ratnarajah

TABLE IV
CHARACTERISTICS OF DATASETS USED FOR DIVERSITY-BASED SECURITY APPROACHES

Research Goal

Dataset Description

Real-World Datasets

Evaluate the reliability of proposed approach

Xilinx XC4000 family, Sanders CSRC, and Altera Flex 10k architectures

8

Evaluate the Randomized Instruction Set Emulator
(RISE)
Test the Transparent Runtime Randomization (TRR)

the proposed algorithm to enhance network

Test
security and limits the ability of malicious node
Test
the proposed antivirus system for
(CloudAV)
Evaluate the proposed ﬁrewall design method

in-cloud

Analyze the potential gains in dataset

Replay the behavior of channel hopping MAC pro-
tocol in real-world traces

Test the proposed Multiple-Antenna KEy generator
(MAKE)

Analyze the beneﬁt using diversity antivirus product

Analyze OS common vulnerabilities and defense
effect of OS combination
Build real-world scenarios

Evaluate the proposed defense mechanism under
side-channel attack

Evaluate IDS performance

Evaluate the proposed approach to solve intrusion
delection using classiﬁers
Test the proposed network diversity metrics

Evaluate the DSVMP (i.e., a novel VM-based code
obfuscation) performance
Implement a multi-stage approach for detect injec-
tion attacks

Evaluates the proposed coloring algorithm

Test the proposed malware detector for IoBT

Exam diverse intrusion-tolerant architectures

Evaluate the deployment for proposed MTD tech-
nique
Test MLP and CNN models

Public reported attacks (Synthetic machine code injection attacks) for two Linux
distributions: RedHat from 6.2 to 7.3 and Mandrake 7.2
Publicly vulnerable programs and attack information from security bulletin board in
[100]
Email datasets of the ECE Department at Drexel University, which capture the logs of
emails pass though ece.drexel.edu server, which have 1,038,939 logs in total
Two datasets: (i) collected malicious software over period of one year; and (ii) collected
by scanning a campus network for multiple department over six months
The ﬁrewall is maintained by senior ﬁrewall administrator in a university, and the author
upgrade the ﬁrewall policy with their diverse ﬁrewall design method.
SGNET [81] [79] is real world honeypot deployment which contain 1599 malware
samples.
Collected real-world data with 46 IEEE802.15.4-compliant TelosB motes where those
motes are deployed in UC Berkeley ofﬁce space, a 50m × 50m indoor environment, and
constantly listen for pockets and 12 million pockets are collected and used in experiment
Real performance data from three Dell e5400 laptops where the ﬁrst and the sec-
ond laptops run MAKE protocol and communicate with 2.4GHz frequency, 12Mbps
modulation rate, and 15dBm transmission power while the third laptop eavesdrops the
communication
1599 malware from distributed honeypot deployment called SGNET [80, 20], which
utilizes a protocol learning technology to observe and emulate a code injection attack
2120 OS-level vulnerabilities collected from 44,000 vulnerabilities published by NVD
(NIST National Vulnerability Database)
XML signature wrapping vulnerabilities in Apache Rampart, where the vulnerabilities
are found in Amazon Web Server Apache Axis2 framework
Two side-channel attacks proposed in [111], in which the target of those two attacks
in the evaluation is a cryptographic library of GnuPG, which is AES-128 encryption
routine in libgcrypt 1.6.1
KDDCup99 dataset [113], consisting of ﬁve categories including Normal, DoS, Probe,
User-to-Root, and Remote-to-Local
Two malware detection systems: PDFrate and Drebin where the operational dataset for
PDFrate is from a real world sensor and Drebin uses published dataset
The National vulnerability databases from [16] on May 9, 2008

Obtained from a debugging program with IDA [54]

MidiCart ASP version with Microsoft SQL server and PHP version with Mysql as
datasets where the ASP version and PHP version are obtained from an online shopping
cart application, called Midicart
IEEE-14 bus and IEEE-118 bus test case system

128 malware samples using VirusTotal Threat Intelligence platform, and 1078 goodware
from ofﬁcial IoT App store, like Pi Store, where both malware and goodware are
designed for ARM-based IoT applications; To obtain the OpCode sequence, Objdump
is utilized as a disassembler to extract OpCodes.
Vulnerabilities between 1/1/2012 and 12/31/2017 for six OSs (Ubuntu, Red Hat, Novell,
Windows, MacOS, and Solaris)
Win10, Linux, and Fedora vulnerabilities from National Vulnerability Database (NVD).

Attack traces between malicious and victim devices, collected by a supervised Chip-
Whisperer board, where those two devices are identical 8-bit Atmel microcontrollers
ATxmega128D4 placed on different types of printed circuit boards

Ref.

[77]
(1999)
[12]
(2003)
[119]
(2003)
[88]
(2004)
[86]
(2008)
[82]
(2008)
[44]
(2009)
[116]
(2009)

[122]
(2010)

[14]
(2011)
[43]
(2014)
[22]
(2014)
[33]
(2015)

[49]
(2015)
[103]
(2016)
[123]
(2016)
[76]
(2016)
[92]
(2018)

[110]
(2018)
[8]
(2018)

[50]
(2019)
[5]
(2019)
[115]
(2019)

[98] studied the effect of antenna diversity by analytically
modeling secrecy capacity based on probabilistic methods.
Zou et al. [125] evaluated the secrecy capacity and the inter-
cept probability for different number of relays mathematically.
Gorbenko et al. [50] statistically analyzed multiple Operating
Systems to study the impact of N -version OS diversity in
intrusion detection.

2) Simulation-based Validation:

In simulation models,
the real-world systems, attackers, and their interactions are
imitated using software [47, 48, 70]. These models provide
more ﬂexibility in evaluating the system under various at-
tack scenarios and related parameters. Among the hardware

diversity techniques, Karam et al. [70] used a FPGA mapping
tool to evaluate their proposed architectural diversity technique
against brute force and side-channel attacks. [91] also devel-
oped a simulation model for the diversiﬁed implementation
of OS kernels against simulated attack scenarios. Some net-
work diversity approaches used network analysis tool-kits for
simulating computer networks as graphs, such as the Network
Workbench tool [110] or the virus propagation on a diversiﬁed
network [107].

3) Emulation-based Validation: While the simulation-
based models provide an approximation of the real-world
systems, emulation-based models more accurately replicate the

9

TABLE IV
(CONTINUED) CHARACTERISTICS OF DATASETS USED FOR DIVERSITY-BASED SECURITY APPROACHES

Research Goal

Dataset Description

Evaluate the proposed defense mechanism called
ChameleonSoft
Evaluate the proposed methodology based on the
compliance of diverse server replicas
Evaluate the performance of a set of off-the-shelf
software selected based on the proposed algorithm
Validate the proposed optimization model for soft-
ware distribution
Evaluate the performance of the proposed software
assigning algorithm
Evaluate the proposed network topology shufﬂing
algorithm in an SDN testbed
Evaluate the proposed software diversity adaptation
schemes

Evaluate the proposed defense approach under Code
Red I and II attacks
Evaluate the proposed approach under code-injection
attacks
Evaluate the proposed fusion technique based on
LRT (likelihood ratio test)

Evaluate the proposed proﬁle-guided optimization

Evaluate the proposed automated approach to im-
prove network resilience under unknown attack

Synthetic Datasets
A synthetic static network with the same parameters for each iteration under shufﬂing
and attack events
Synthetic network trafﬁc data from scripted clients which build with different protocols
such as FTP, SMTP, or POP
Three synthetic graphs with different topologies, including random, regular, and power-
law graphs.
Synthetic network dataset generated by Network Workbench [107] with size 1,000,
2,000, and 5,000 nodes based on scale-free network model [11].
Three different graph models used to generate three types of synthetic graphs (i.e.,
random graphs, scale-free graphs, and small world graphs)
Generated 1000 random topologies with different node and network density

Synthetic network datasets for different network topologies, such as a random network
and a scale-free network

Semi-Synthetic Datasets

Datasets from the HACQIT web server where Code Red I, Code Red II attacks are
collected from from both an ordinary laptop and the log generated by the laptop
Published vulnerabilities used as seeds, which are combined with synthetic vulnerabil-
ities into real applications
Two datasets: (i) Network trafﬁc dataset generated from DARPA Intrusion Detection
Evaluation program in 1998, which is often called the KDD Dataset; and (ii) Real traces
collected from their campus web server based on the observations of 30 minutes HTTP
trafﬁc, which contains 5 million packets
Synthetic datasets by collecting proﬁle information from SPEC (Standard Performance
Evaluation Corporation) CPU 2006 with trained input set
Synthetic graphs by choosing realistic networks as seed graphs where nodes and edges
are added randomly

Ref.

[7]
(2011)
[6]
(2011)
[64]
(2014)
[108]
(2017)
[65]
(2017)
[58]
(2017)
[26]
(2019)

[95]
(2002)
[63]
(2006)
[51]
(2008)

[57]
(2013)
[17]
(2019)

real-world systems in a virtual environment. These models
provide stronger validation of the results. Although emulation
and virtualization have few differences in their deﬁnitions
within the scope of this paper, both the methods are included
under emulation-based validation. Therefore, the techniques
evaluated using virtual machine implementation are included
here. Kc et al. [71] implemented their proposed instruction-set
randomization based approach on an x86 emulator provided
by bochs [19]. Silva et al. [101] prototyped a replication-based
anti-virus engine on Xen [2] virtualization software.

4) Real Testbed-based Validation: PLI techniques for
vehicular networks have been tested on TM4C123GXL micro-
controllers [41, 77, 115, 122]. Gerdes et al. [46] performed
the validation for their proposed PLI technique for Ethernet
devices on two CPUs and measurement setup. To study the
effect of frequency hopping on the network routing, Wat-
teyne et al. [116] analyzed the network traces from a real-
world deployment of IEEE 802.15.4-compliant motes in an
indoor environment. They also studied the interference of
IEEE 802.11 (WiFi) signals in their experiments. Gashi et al.
[44] evaluated the different antivirus engines against various
malware on a web service called VirusTotal [1]. Liu and Gouda
[82] tested the effectiveness of diverse Firewall design using
both real and synthetic Firewalls. Reynolds et al. [95] analyzed
the effectiveness of their proposed intrusion detection system
by launching attacks from a malicious laptop.

REFERENCES

[1] Virustotal.

[Online].

Available:

https://www.virustotal.com/gui/home/upload

[2] Xen project. [Online]. Available: https://xenproject.org/

[3] R. A. Ahmed Farah and Y. A. Mohamed, “Adaptive
immune-based system for network security,” in 2018
International Conference on Computer, Control, Elec-
trical, and Electronics Engineering (ICCCEEE), Aug.
2018, pp. 1–7.

[4] N. B. Akhuseyinoglu and J. Joshi, “A risk-aware access
control framework for cyber-physical systems,” in 2017
IEEE 3rd International Conference on Collaboration
and Internet Computing (CIC).
IEEE, 2017, pp. 349–
358.

[5] H. Alavizadeh, D. S. Kim, and J. Jang-Jaccard, “Model-
based evaluation of combinations of shufﬂe and diver-
sity mtd techniques on the cloud,” Future Generation
Computer Systems, 2019.

[6] J. Antunes and N. Neves, “Diveinto: Supporting di-
versity in intrusion-tolerant systems,” in 2011 IEEE
30th International Symposium on Reliable Distributed
Systems.

IEEE, 2011, pp. 137–146.

[7] M. Azab, R. Hassan, and M. Eltoweissy, “Chameleon-
Soft: a moving target defense system,” in Proceedings
of the 7th International Conference on Collaborative
Computing: Networking, Applications and Worksharing
(CollaborateCom), 2011, pp. 241–250.

[8] A. Azmoodeh, A. Dehghantanha, and K.-K. R. Choo,
“Robust malware detection for internet of (battleﬁeld)
things devices using deep eigenspace learning,” IEEE
Transactions on Sustainable Computing, vol. 4, no. 1,
pp. 88–95, 2018.

[9] M. G. Bailey, “Malware resistant networking using
system diversity,” in Proceedings of the 6th conference
on Information technology education. ACM, 2005, pp.
191–197.

[10] A. Balakrishnan and C. Schulze, “Code obfuscation
literature survey,” CS701 Construction of compilers,
vol. 19, 2005.

[11] A.-L. Barab´asi and R. Albert, “Emergence of scaling
in random networks,” science, vol. 286, no. 5439, pp.
509–512, 1999.

[12] E. G. Barrantes, D. H. Ackley, S. Forrest, T. S. Palmer,
D. Stefanovic, and D. D. Zovi, “Randomized instruction
set emulation to disrupt binary code injection attacks,”
in Proceedings of the 10th ACM conference on Com-
puter and communications security. ACM, 2003, pp.
281–289.

[13] B. Baudry and M. Monperrus, “The multiple facets of
software diversity: Recent developments in year 2000
and beyond,” ACM Computing Surveys (CSUR), vol. 48,
no. 1, p. 16, 2015.

[14] P. Bishop, R. Bloomﬁeld, I. Gashi, and V. Stankovic,
“Diversity for security: a study with off-the-shelf an-
tivirus engines,” in 2011 IEEE 22nd International Sym-
posium on Software Reliability Engineering.
IEEE,
2011, pp. 11–19.

[15] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazi`eres, and
D. Boneh, “Hacking blind,” in 2014 IEEE Symposium
on Security and Privacy.

IEEE, 2014, pp. 227–242.

[16] BlueOnix. (Retrieved 4 May 2020) Blueonix: Network
datasets. [Online]. Available: http://www.nvd.org/
[17] D. Borbor, L. Wang, S. Jajodia, and A. Singhal, “Opti-
mizing the network diversity to improve the resilience
of networks against unknown attacks,” Computer Com-
munications, 2019.

[18] J. Brilha, M. Gray, D. Pereira, and P. Pereira, “Geo-
diversity: An integrative review as a contribution to
the sustainable management of the whole of nature,”
Environmental Science & Policy, vol. 86, pp. 19–28,
2018.

[19] T. R. Butler. The

open

lation project
http://bochs.sourceforge.net/

(home page).

emu-
ia-32
source
[Online]. Available:

[20] J. Canto, M. Dacier, E. Kirda, and C. Leita, “Large
lessons learned,” in IEEE
scale malware collection:
SRDS Workshop on Sharing Field Data and Experiment
Measurements on Resilience of Distributed Computing
Systems. Citeseer, 2008.

[21] Y. Cao, Z. Huang, Y. Yu, C. Ke, and Z. Wang, “A
topology and risk-aware access control framework for
cyber-physical space,” Frontiers of Computer Science,
vol. 14, no. 4, pp. 1–16, 2020.

[22] R. Carvalho, “Authentication security through diversity
and redundancy for cloud computing,” Master’s thesis,
T ´ECNICO LISBOA, 2014.

[23] ——, “Cloud computing authentication security with

diversity and redundancy,” 2014.

[24] J. Caulﬁeld, M. Pol´ese, and R. Stren, “The social
sustainability of cities: Diversity and the management
of change,” Canadian Public Policy / Analyse de Poli-
tiques, vol. 27, p. 381, Sep. 2001.

[25] M. Chew and D. Song, “Mitigating buffer overﬂows by

operating system randomization,” 2002.

10

[26] J.-H. Cho and T. J. Moore, “Software diversity for
cyber resilience: Percolation theoretic approach,” pp.
313–342, 2019.

[27] D. D. Clark and D. R. Wilson, “A comparison of
commercial and military computer security policies,” in
1987 IEEE Symposium on Security and Privacy.
IEEE,
1987, pp. 184–184.

[28] R. Clark, “Diversity in sociology: Problem or solution?”
The American Sociologist, vol. 30, no. 3, pp. 22–42,
1999.

[29] W. E. Cobb, E. W. Garcia, M. A. Temple, R. O.
Baldwin, and Y. C. Kim, “Physical layer identiﬁcation
of embedded devices using rf-dna ﬁngerprinting,” in
2010-Milcom 2010 Military Communications Confer-
ence.

IEEE, 2010, pp. 2168–2173.

[30] C. Collberg, C. Thomborson, and D. Low, “Manufac-
turing cheap, resilient, and stealthy opaque constructs,”
in Proceedings of the 25th ACM SIGPLAN-SIGACT
symposium on Principles of programming languages.
ACM, 1998, pp. 184–196.

[31] V. Corral-Verdugo, M. Bonnes, C. Tapia-Fonllem,
B. Fraijo-Sing, M. Fras-Armenta, and G. Carrus, “Cor-
relates of pro-sustainability orientation: The afﬁnity to-
wards diversity,” Journal of Environmental Psychology,
vol. 29, no. 1, pp. 34–43, 2009.

[32] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu,
J. Davidson, J. Knight, A. Nguyen-Tuong, and J. Hiser,
“N-variant systems: A secretless framework for security
through diversity.” in USENIX Security Symposium,
2006, pp. 105–120.

[33] S. Crane, A. Homescu, S. Brunthaler, P. Larsen,
and M. Franz, “Thwarting cache side-channel attacks
through dynamic software diversity.” in NDSS, 2015,
pp. 8–11.

[34] C. Crouch and W. Streeck, The Diversity of Democracy
: Corporatism, Social Order and Political Conﬂict.
Edward Elgar Publishing, Jan. 2006.

[35] B. Danev and S. Capkun, “Transient-based identiﬁca-
tion of wireless sensor nodes,” in 2009 International
Conference on Information Processing in Sensor Net-
works.

IEEE, 2009, pp. 25–36.

[36] B. Danev, H. Luecken, S. Capkun, and K. El Defrawy,
“Attacks on physical-layer identiﬁcation,” in Proceed-
ings of the third ACM conference on Wireless network
security, 2010, pp. 89–98.

[37] D. C. DeLong, “Deﬁning biodiversity,” Wildlife Society

Bulletin, vol. 24, no. 4, pp. 738–749, 1996.

[38] Y. Deswarte, K. Kanoun, and J.-C. Laprie, “Diversity
against accidental and deliberate faults,” in Proceed-
ings Computer Security, Dependability, and Assurance:
From Needs to Solutions (Cat. No. 98EX358).
IEEE,
1998, pp. 171–181.

[39] J. L. Duarte, J. T. Crawford, C. Stern, J. Haidt, L. Jus-
sim, and P. E. Tetlock, “Political diversity will improve
social psychological science,” Behavioral and Brain
Sciences, vol. 38, p. e130, 2015.

[40] S. Forrest, A. Somayaji, and D. H. Ackley, “Building
diverse computer systems,” in Proceedings. The Sixth

Workshop on Hot Topics in Operating Systems (Cat.
No. 97TB100133).

IEEE, 1997, pp. 67–72.

[41] M. Foruhandeh, Y. Man, R. Gerdes, M. Li, and
T. Chantem, “Simple: single-frame based physical layer
identiﬁcation for intrusion detection and prevention on
in-vehicle networks,” in Proceedings of the 35th Annual
Computer Security Applications Conference, 2019, pp.
229–244.

[42] M. Franz, “E unibus pluram: massive-scale software
diversity as a defense mechanism,” in Proceedings of
the 2010 New Security Paradigms Workshop, 2010, pp.
7–16.

[43] M. Garcia, A. Bessani, I. Gashi, N. Neves, and R. Obel-
heiro, “Analysis of operating system diversity for in-
trusion tolerance,” Software: Practice and Experience,
vol. 44, no. 6, pp. 735–770, 2014.

[44] I. Gashi, V. Stankovic, C. Leita, and O. Thonnard,
“An experimental study of diversity with off-the-shelf
antivirus engines,” in 2009 Eighth IEEE International
Symposium on Network Computing and Applications.
IEEE, 2009, pp. 4–11.

[45] R. Gerdes, “Physical layer identiﬁcation: methodology,

security, and origin of variation,” 2011.

[46] R. M. Gerdes, T. E. Daniels, M. Mina, and S. Russell,
“Device identiﬁcation via analog signal ﬁngerprinting:
A matched ﬁlter approach.” in NDSS, 2006.

[47] E. M. Ghourab, A. Mansour, M. Azab, M. Rizk, and
A. Mokhtar, “Towards physical layer security in In-
ternet of Things based on reconﬁgurable multiband
diversiﬁcation,” in 2017 8th IEEE Annual Information
Technology, Electronics and Mobile Communication
Conference (IEMCON).

IEEE, 2017, pp. 446–450.

[48] E. M. Ghourab, M. Azab, and A. Mansour, “Spatiotem-
poral diversiﬁcation by moving-target defense through
benign employment of false-data injection for dynamic,
secure cognitive radio network,” Journal of Network
and Computer Applications, vol. 138, pp. 1–14, 2019.
[49] M. S. Gondal, A. J. Malik, and F. A. Khan, “Net-
work intrusion detection using diversity-based centroid
mechanism,” in 2015 12th International Conference
on Information Technology-New Generations.
IEEE,
2015, pp. 224–228.

[50] A. Gorbenko, A. Romanovsky, O. Tarasyuk, and
O. Biloborodov, “From analyzing operating system vul-
nerabilities to designing multiversion intrusion-tolerant
architectures,” IEEE Transactions on Reliability, 2019.
[51] G. Gu, A. A. C´ardenas, and W. Lee, “Principled reason-
ing and practical applications of alert fusion in intrusion
detection systems,” in Proceedings of the 2008 ACM
symposium on Information, computer and communica-
tions security, 2008, pp. 136–147.

[52] P. K. Harmer, P. D. Williams, G. H. Gunsch, and G. B.
Lamont, “An artiﬁcial immune system architecture for
computer security applications,” IEEE Transactions on
Evolutionary Computation, vol. 6, no. 3, pp. 252–280,
Jun. 2002.

[53] M. Hataba, R. Elkhouly, and A. El-Mahdy, “Diversiﬁed
remote code execution using dynamic obfuscation of

11

conditional branches,” in 2015 IEEE 35th International
Conference on Distributed Computing Systems Work-
shops.
[54] hex rays.

IEEE, 2015, pp. 120–127.
Ida home page.

[Online]. Available:

https://www.hex-rays.com/index.shtml

[55] J. Hoddinott and Y. Yohannes, “Dietary diversity as a

food security indicator,” Tech. Rep., 2002.

[56] K. J. Hole, “Diversity reduces the impact of malware,”
IEEE Security & Privacy, vol. 13, no. 3, pp. 48–54,
2013.

[57] A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and
M. Franz, “Proﬁle-guided automated software diver-
sity,” in Proceedings of the 2013 IEEE/ACM Interna-
tional Symposium on Code Generation and Optimiza-
tion (CGO).
IEEE Computer Society, 2013, pp. 1–11.
[58] J. B. Hong, S. Yoon, H. Lim, and D. S. Kim, “Optimal
network reconﬁguration for software deﬁned networks
using shufﬂe-based online mtd,” in 2017 IEEE 36th
Symposium on Reliable Distributed Systems (SRDS).
IEEE, 2017, pp. 234–243.

[59] L. Hong and S. E. Page, “Groups of diverse problem
solvers can outperform groups of high-ability problem
solvers,” Proceedings of the National Academy of Sci-
ences, vol. 101, no. 46, pp. 16 385–16 389, 2004.
[60] S. Hosseini, M. A. Azgomi, and A. T. Rahmani,
“Malware propagation modeling considering software
diversity and immunization,” Journal of computational
science, vol. 13, pp. 49–67, 2016.

[61] S. Hosseinzadeh, S. Rauti, S. Laur´en, J.-M. M¨akel¨a,
J. Holvitie, S. Hyrynsalmi, and V. Lepp¨anen, “A sur-
vey on aims and environments of diversiﬁcation and
obfuscation in software security,” in Proceedings of the
17th International Conference on Computer Systems
and Technologies 2016, 2016, pp. 113–120.

[62] ——, “Diversiﬁcation and obfuscation techniques for
software security: A systematic literature review,” Infor-
mation and Software Technology, vol. 104, pp. 72–93,
2018.

[63] W. Hu, J. Hiser, D. Williams, A. Filipi, J. W. David-
son, D. Evans, J. C. Knight, A. Nguyen-Tuong, and
J. Rowanhill, “Secure and practical defense against
code-injection attacks using software dynamic transla-
tion,” in Proceedings of the 2nd international confer-
ence on Virtual execution environments. ACM, 2006,
pp. 2–12.

[64] C. Huang, S. Zhu, and R. Erbacher, “Toward software
diversity in heterogeneous networked systems,” in IFIP
Annual Conference on Data and Applications Security
and Privacy. Springer, 2014, pp. 114–129.

[65] C. Huang, S. Zhu, Q. Guan, and Y. He, “A software
assignment algorithm for minimizing worm damage in
networked systems,” Journal of Information Security
and Applications, vol. 35, pp. 55–67, 2017.

[66] F. Huang, B. Liu, Y. Song, and S. Keyal, “The links
between human error diversity and software diversity:
Implications for fault diversity seeking,” Science of
Computer Programming, vol. 89, pp. 350–373, 2014.

[67] S. Ichikawa, T. Sawada, and H. Hata, “Diversiﬁca-

tion of processors based on redundancy in instruction
set,” IEICE transactions on fundamentals of electronics,
communications and computer sciences, vol. 91, no. 1,
pp. 211–220, 2008.

[68] B. Jim´enez-Dom´ınguez, Which Kind of Sustainability
for a Social Environmental Psychology? Boston, MA:
Springer US, 2002, pp. 257–276.

[69] J. E. Just and M. Cornwell, “Review and analysis
of synthetic diversity for breaking monocultures,” in
Proceedings of
the 2004 ACM workshop on Rapid
malcode, 2004, pp. 23–32.

[70] R. Karam, T. Hoque, S. Ray, M. Tehranipoor, and
S. Bhunia, “Mutarch: Architectural diversity for fpga
device and ip security,” in 2017 22nd Asia and South
Paciﬁc Design Automation Conference (ASP-DAC).
IEEE, 2017, pp. 611–616.

[71] G. S. Kc, A. D. Keromytis, and V. Prevelakis, “Counter-
ing code-injection attacks with instruction-set random-
ization,” in Proceedings of the 10th ACM conference on
Computer and communications security. ACM, 2003,
pp. 272–280.

[72] T. A. Kennedy, S. Naeem, K. M. Howe, J. M. Knops,
D. Tilman, and P. Reich, “Biodiversity as a barrier to
ecological invasion,” Nature, vol. 417, no. 6889, p. 636,
2002.

[73] J. Kephart, G. Sorkin, M. Swimmer, and S. White,
Blueprint for a Computer Immune System.
Berlin,
Heidelberg: Springer Berlin Heidelberg, 1999, pp. 242–
261.

[74] D. Klein, C. Stern, and A. Western, “Political diversity
in six disciplines,” Academic Questions, vol. 18, pp.
40–52, 2005.

[75] H. Koo and M. Polychronakis, “Juggling the gadgets:
Binary-level code randomization using instruction dis-
placement,” in Proceedings of the 11th ACM on Asia
Conference on Computer and Communications Security.
ACM, 2016, pp. 23–34.

[76] K. Kuang, Z. Tang, X. Gong, D. Fang, X. Chen, T. Xing,
G. Ye, J. Zhang, and Z. Wang, “Exploiting dynamic
scheduling for vm-based code obfuscation,” in 2016
IEEE Trustcom/BigDataSE/ISPA.
IEEE, 2016, pp.
489–496.

[77] J. Lach, W. H. Mangione-Smith, and M. Potkonjak,
“Algorithms for efﬁcient runtime fault recovery on
diverse FPGA architectures,” in Proceedings 1999 IEEE
International Symposium on Defect and Fault Tolerance
in VLSI Systems (EFT’99).
IEEE, 1999, pp. 386–394.
[78] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz,
“SoK: Automated software diversity,” in 2014 IEEE
Symposium on Security and Privacy.
IEEE, 2014, pp.
276–291.

[79] C. Leita, “Sgnet: automated protocol learning for the
observation of malicious threats,” Institute EURECOM,
2008.

[80] C. Leita and M. Dacier, “Sgnet: Implementation in-
sights,” in NOMS 2008-2008 IEEE Network Operations
and Management Symposium.
IEEE, 2008, pp. 1075–
1078.

12

[81] ——, “Sgnet: a worldwide deployable framework to
support the analysis of malware threat models,” in 2008
Seventh European Dependable Computing Conference.
IEEE, 2008, pp. 99–109.

[82] A. X. Liu and M. G. Gouda, “Diverse ﬁrewall design,”
IEEE Transactions on Parallel and Distributed Systems,
vol. 19, no. 9, pp. 1237–1251, 2008.

[83] F. Majorczyk, ´E. Totel, and L. M´e, “Experiments on cots
diversity as an intrusion detection and tolerance mech-
anism,” in Proceedings of the First Workshop on Re-
cent Advances on Intrusion-Tolerant Systems (WRAITS
2007), 2007.

[84] P. Marrow, “Nature-inspired computing technology and
applications,” BT Technology Journal, vol. 18, no. 4,
pp. 13–23, 2000.

[85] L. Nagy, R. Ford, and W. Allen, “N-version program-
ming for the detection of zero-day exploits,” Tech. Rep.,
2006.

[86] J. Oberheide, E. Cooke, and F. Jahanian, “CloudAV:
N-version antivirus in the network cloud.” in USENIX
Security Symposium, 2008, pp. 91–106.

[87] A. J. O’Donnell and H. Sethu, “Software diversity
as a defense against viral propagation: Models and
simulations,” in Proceedings of the 19th Workshop on
Principles of Advanced and Distributed Simulation.
IEEE Computer Society, 2005, pp. 247–253.

[88] ——, “On achieving software diversity for improved
network security using distributed coloring algorithms,”
in Proceedings of the 11th ACM conference on Com-
puter and communications security. ACM, 2004, pp.
121–131.

[89] A. Pawlowski, M. Contag, and T. Holz, “Probfusca-
tion: an obfuscation approach using probabilistic control
ﬂows,” in International Conference on Detection of
Intrusions and Malware, and Vulnerability Assessment.
Springer, 2016, pp. 165–185.

[90] M. Prasad and T.-c. Chiueh, “A binary rewriting defense
against stack based buffer overﬂow attacks.” in USENIX
Annual Technical Conference, General Track, 2003, pp.
211–224.

[91] C. Pu, A. P. Black, C. Cowan, J. Walpole, and C. Con-
sel, “A specialization toolkit to increase the diversity of
operating systems,” 1996.

[92] W. Qu, W. Huo, and L. Wang, “Opportunistic diversity-
based detection of injection attacks in web applica-
tions,” EAI Endorsed Transactions on Security and
Safety, vol. 5, no. 16, 2018.

[93] M. Reiter, “Distributing trust with the rampart toolkit,”
Communications of the ACM, vol. 39, no. 4, pp. 71–74,
1996.

[94] J. Reynolds, J. Just, E. Lawson, L. Clough, and
R. Maglich, “On-line intrusion protection by detecting
attacks with diversity,” in Research Directions in Data
and Applications Security.
Springer, 2003, pp. 245–
256.

[95] J. Reynolds, J. Just, E. Lawson, L. Clough, R. Maglich,
and K. Levitt, “The design and implementation of an
intrusion tolerant system,” in Proceedings International

Conference on Dependable Systems and Networks.
IEEE, 2002, pp. 285–290.

[96] J. C. Reynolds, J. Just, L. Clough, and R. Maglich,
“On-line intrusion detection and attack prevention using
diversity, generate-and-test, and generalization,” in 36th
Annual Hawaii International Conference on System
Sciences, 2003. Proceedings of the.
IEEE, 2003, pp.
8–pp.

[97] R. Roman, R. Rios, J. A. Onieva, and J. Lopez, “Im-
mune system for the internet of things using edge
technologies,” IEEE Internet of Things Journal, vol. 6,
no. 3, pp. 4774–4781, Jun. 2019.

[98] M. Z. I. Sarkar and T. Ratnarajah, “Enhancing secu-
rity in correlated channel with maximal ratio combin-
ing diversity,” IEEE transactions on signal processing,
vol. 60, no. 12, pp. 6745–6751, 2012.

[99] F. Schrodt, J. J. Bailey, W. D. Kissling, K. F. Rijsdijk,
A. C. Seijmonsbergen, D. Van Ree, J. Hjort, R. S. Law-
ley, C. N. Williams, M. G. Anderson et al., “Opinion:
To advance sustainable stewardship, we must document
not only biodiversity but geodiversity,” Proceedings of
the National Academy of Sciences, vol. 116, no. 33, pp.
16 155–16 158, 2019.

[100] SecurityFocus. Securityfocus.
https://www.securityfocus.com/

[Online]. Available:

[101] C. Silva, P. Sousa, and P. Ver´ıssimo, “Rave: Replicated
antivirus engine,” in 2010 International Conference on
Dependable Systems and Networks Workshops (DSN-
W).

IEEE, 2010, pp. 170–175.

[102] N. Skandhakumar, F. Salim, J. Reid, and E. Dawson,
“Physical access control administration using building
information models,” in Cyberspace Safety and Secu-
rity. Springer, 2012, pp. 236–250.

[103] C. Smutz and A. Stavrou, “When a tree falls: Using
diversity in ensemble classiﬁers to identify evasion in
malware detectors.” in NDSS, 2016.

[104] A. Somayaji, S. Hofmeyr, and S. Forrest, “Principles of
a computer immune system,” in NSPW, vol. 97, 1997,
pp. 75–82.

[105] A. N. Sovarel, D. Evans, and N. Paul, “Where’s the
feeb? the effectiveness of instruction set randomiza-
tion.” in USENIX Security Symposium, vol. 10, 2005.

[106] N. P. Steyn, J. H. Nel, G. Nantel, G. Kennedy, and
D. Labadarios, “Food variety and dietary diversity
scores in children: are they good indicators of dietary
adequacy?” Public health nutrition, vol. 9, no. 5, pp.
644–650, 2006.

[107] N. Team et al., “Network workbench tool.

indiana
university, northeastern university, and university of
michigan,” 2006.

[108] O. Temizkan, S. Park, and C. Saydam, “Software diver-
sity for improved network security: optimal distribution
of software-based shared vulnerabilities,” Information
Systems Research, vol. 28, no. 4, pp. 828–849, 2017.

[109] E. Totel, F. Majorczyk, and L. M´e, “Cots diversity based
intrusion detection and application to web servers,” in
International Workshop on Recent Advances in Intru-
sion Detection. Springer, 2005, pp. 43–62.

13

[110] M. Touhiduzzaman, A. Hahn, and A. Srivastava, “A
diversity-based substation cyber defense strategy utiliz-
ing coloring games,” IEEE Transactions on Smart Grid,
2018.

[111] E. Tromer, D. A. Osvik, and A. Shamir, “Efﬁcient
cache attacks on aes, and countermeasures,” Journal of
Cryptology, vol. 23, no. 1, pp. 37–71, 2010.

[112] W. R. Turner, K. Brandon, T. M. Brooks, R. Costanza,
G. A. Da Fonseca, and R. Portela, “Global conservation
of biodiversity and ecosystem services,” BioScience,
vol. 57, no. 10, pp. 868–873, 2007.

[113] I. University of California. (1999) Kdd cup 1999
data. (Last accessed 26 May 2020). [Online]. Available:
http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html

[114] D. Van Knippenberg, C. K. De Dreu, and A. C. Homan,
“Work group diversity and group performance: an inte-
grative model and research agenda.” Journal of applied
psychology, vol. 89, no. 6, p. 1008, 2004.

[115] H. Wang, M. Brisfors, S. Forsmark, and E. Dubrova,
“How diversity affects deep-learning side-channel at-
tacks,” in 2019 IEEE Nordic Circuits and Systems
Conference (NORCAS): NORCHIP and International
Symposium of System-on-Chip (SoC).
IEEE, 2019, pp.
1–7.

[116] T. Watteyne, A. Mehta, and K. Pister, “Reliability
through frequency diversity: why channel hopping
makes sense,” in Proceedings of the 6th ACM sym-
posium on Performance evaluation of wireless ad hoc,
sensor, and ubiquitous networks, 2009, pp. 116–123.

[117] D. West and S. Dellana, “Diversity of ability and cog-
nitive style for group decision processes,” Information
Sciences, vol. 179, no. 5, pp. 542–558, 2009.

[118] D. Williams, W. Hu, J. W. Davidson, J. D. Hiser, J. C.
Knight, and A. Nguyen-Tuong, “Security through di-
versity: Leveraging virtual machine technology,” IEEE
Security & Privacy, vol. 7, no. 1, pp. 26–33, 2009.

[119] J. Xu, Z. Kalbarczyk, and R. K. Iyer, “Transparent
runtime randomization for security,” in 22nd Inter-
national Symposium on Reliable Distributed Systems,
2003. Proceedings.

IEEE, 2003, pp. 260–269.

[120] C. Xue, Z. Tang, G. Ye, G. Li, X. Gong, W. Wangg,
D. Fang, and Z. Wang, “Exploiting code diversity to
enhance code virtualization protection,” in 2018 IEEE
24th International Conference on Parallel and Dis-
tributed Systems (ICPADS).
IEEE, 2018, pp. 620–627.
[121] Y. Yang, S. Zhu, and G. Cao, “Improving sensor
network immunity under worm attacks: A software
diversity approach,” Ad Hoc Networks, vol. 47, pp. 26–
40, 2016.

[122] K. Zeng, D. Wu, A. Chan, and P. Mohapatra, “Ex-
ploiting multiple-antenna diversity for shared secret key
generation in wireless networks,” in 2010 Proceedings
IEEE INFOCOM.

IEEE, 2010, pp. 1–9.

[123] M. Zhang, L. Wang, S. Jajodia, A. Singhal, and
M. Albanese, “Network diversity: a security metric for
evaluating the resilience of networks against zero-day
attacks,” IEEE Transactions on Information Forensics
and Security, vol. 11, no. 5, pp. 1071–1086, 2016.

[124] Y. Zhou and D. Feng, “Side-channel attacks: Ten
years after its publication and the impacts on cryp-
tographic module security testing.” IACR Cryptology
ePrint Archive, vol. 2005, no. 388, 2005.

[125] Y. Zou, J. Zhu, X. Wang, and V. C. Leung, “Improving
physical-layer security in wireless communications us-
ing diversity techniques,” IEEE Network, vol. 29, no. 1,
pp. 42–48, 2015.

14

