1
2
0
2

r
a

M
4
2

]

R
C
.
s
c
[

1
v
8
5
1
3
1
.
3
0
1
2
:
v
i
X
r
a

TRUSTED ANONYMOUS DATA EXCHANGE: THREAT SHARING
USING BLOCKCHAIN TECHNOLOGY

A PREPRINT

Yair Allouche
IBM Cyber Security Center of Excellence
Beer-Sheva 8410501, Israel
yair@il.ibm.com

Francesco Longo
Department of Engineering
Universita’ degli Studi di Messina
Messina 98166, Italy
flongo@unime.it

Nachiket Tapas
Department of Engineering
Universita’ degli Studi di Messina
Messina 98166, Italy
ntapas@unime.it

Asaf Shabtai
Department of Software and Information
Systems Engineering
Ben-Gurion University of the Negev
Beer-Sheva 8410501, Israel
shabtaia@bgu.ac.il

Yaron Wolfsthal
IBM Cyber Security Center of Excellence
Beer-Sheva 8410501, Israel
wolfstal@il.ibm.com

March 25, 2021

ABSTRACT

Cyber attacks are becoming more frequent and sophisticated, introducing signiﬁcant challenges for
organizations to protect their systems and data from threat actors. Today, threat actors are highly
motivated, persistent, and well-founded and operate in a coordinated manner to commit a diversity of
attacks using various sophisticated tactics, techniques, and procedures. Given the risks these threats
present, it has become clear that organizations need to collaborate and share cyber threat information
(CTI) and use it to improve their security posture. In this paper, we present TRADE – TRusted
Anonymous Data Exchange – a collaborative, distributed, trusted, and anonymized CTI sharing
platform based on blockchain technology. TRADE uses a blockchain-based access control framework
designed to provide essential features and requirements to incentivize and encourage organizations
to share threat intelligence information. In TRADE, organizations can fully control their data by
deﬁning sharing policies enforced by smart contracts used to control and manage CTI sharing in
the network. TRADE allows organizations to preserve their anonymity while keeping organizations
fully accountable for their action in the network. Finally, TRADE can be easily integrated within
existing threat intelligence exchange protocols - such as trusted automated exchange of intelligence
information (TAXII) and OpenDXL, thereby allowing a fast and smooth technology adaptation.

Keywords Cyber threat intelligence · Threat intelligence exchange protocols · Blockchain · Smart contracts

1

Introduction

Cyber-security tops the priority list among businesses, irrespective of their size [1]. Nearly 80% of respondents attributed
it to rapid advances in technology-driven by the Internet of Things (IoT) devices, mobility, cloud-based workloads, and
SaaS, leading to an increase in the cyberattack surface. Cyber attacks are becoming more frequent and sophisticated,

 
 
 
 
 
 
A PREPRINT - MARCH 25, 2021

introducing ever-increasing challenges to organizations, protecting their systems and data from threat actors [2]. These
days, threat actors are often highly motivated, persistent, and well-funded, operating in coordinated groups either as
part of a criminal enterprise or on behalf of a nation-state [3]. Threat actors can use various tactics, techniques, and
procedures (TTP) to commit attacks, resulting in ﬁnancial fraud, disruption of services, system compromise, or theft of
sensitive information [4].

To deal with the risks presented by cyber threats, organizations need to work together in a coordinated fashion to share
cyberthreat information (CTI) and thereby improving their security posture [5]. By exchanging CTI, organizations gain
a more comprehensive understanding of the threats they may face by taking advantage of the sharing community’s
collective knowledge, capabilities, and experience. For example, an organization might improve its security posture by
using shared information to build threat-informed detection, defense, and mitigation strategies. By correlating CTI
from multiple sources, an organization enriches and validates existing information. The correlation, in turn, makes
the information more reliable and actionable and reduces the exposure time and false alarms [6]. The sharing of CTI
allows organizations to detect better cyber attack campaigns that target particular industry sectors, business entities, or
institutions [7]. Additionally, organizations that receive CTI and subsequently use this information to remediate a threat
can offer a degree of protection to other similar organizations by impeding the threat’s ability to spread. Though the
beneﬁts of threat sharing are well known, the practice of cyber threat sharing is still limited.

According to NIST special publication guide to CTI sharing [8], the critical barriers to extensive and effective threat
sharing include: establishing trust relationships, achieving interoperability and automation, safeguarding sensitive
information, protecting classiﬁed information, enabling information consumption and publication, accessing external
information, evaluating the quality of received information, complying with legal and organizational requirements,
and limiting attribution. Trust formation is an essential characteristic of any information-sharing system. Blockchain
supporting distributed architecture, transparency, and accountability can ensure trust in the system. Publicly available
immutable logs with consensus engine enable blockchain to act as a policy and access control engine for an information-
sharing network. However, since the blockchain supports transparency, it does not support privacy and anonymity
out of the box. Also, guaranteeing privacy and anonymity limits the transparency and accountability of a blockchain-
based system. A novel mechanism is required to establish a trade-off between privacy, anonymity, transparency, and
accountability.

In this paper, we present TRADE — TRusted Anonymous Data Exchange — a blockchain-based threat intelligence
sharing solution that allows peer-to-peer threat sharing. TRADE encourages sharing threat information by establishing
producer/ consumer trust on the threat sharing network. A trusted third party [9] models and personal trust relationship-
based peer-to-peer models ensure trust in threat intelligence sharing communities. However, trust in an external
distributor and bottleneck introduced by the trusted central party is the model’s challenges. Also, the peer-to-peer
model suffers from coverage and scalability issues. Using blockchain permits TRADE to mimic the peer-to-peer trust
model without coverage gaps and delays. Each time a member of the network contributes, accesses, or enriches threat
information, the transaction is recorded on the blockchain. This way, a full history of the information ﬂow is immutably
recorded and can be audited if necessary later.A signiﬁcant challenge related to Blockchain is the cost involved in
the implementation. However, considering the highly regulated industries like banks, the cost is deemed secondary
compared to the Blockchain’s security guarantees.

TRADE allows organizations to control who has access to their CTI (without revealing the source of information) and
assess the quality of the threat information they consume. Smart contracts are leveraged to deﬁne the levels of trust and
anonymity required to enable collaboration. They enforce organizational requirements for attributes such as reputation
and contribution levels to limit who has access to the threat intelligence information that members publish.

At the same time, the platform ensures transparency by ensuring that the network participants are held accountable for
their actions. TRADE introduces the role of Registrars, a trusted third party responsible for anonymizing the identity
of the organizations on the network, among other actions. The registrars form a multi-trusted third party that needs
consensus to take action on the sharing network. Thus, the sharing network ensures anonymity; at the same time, the
registrars ensure accountability.

TRADE enables organic network formation in a bottom-up manner. An organization wanting to share threat information
can set up the platform and start sharing intelligence. Like-minded organizations can form a coalition and share threat
information. Finally, TRADE leverages existing threat intelligence exchange protocols - such as trusted automated
exchange of intelligence information (TAXII) and structured threat information expression (STIX) - which are integrated
into industrial security workﬂows. Thus, organizations with existing threat-sharing infrastructure can easily integrate
TRADE into their threat-sharing workﬂow with minimum effort.

In summary, this paper provides the following contributions: (i) a blockchain-based CTI sharing framework that can
be easily integrated with existing threat sharing infrastructures, (ii) a novel privacy-preserving network architecture

2

A PREPRINT - MARCH 25, 2021

Table 1: Summary of related works.

Distributed/
Centralized
Centralized

Centralized

Centralized

Centralized

Centralized

Centralized

Centralized

Centralized

Centralized

Centralized

Decentralized

Decentralized

Decentralized

Anonymity

Transpa- Account-

Integration

–

–

–

–

–

X

X

X

X

X

X

X

X

rency
X

ability
–

X

X

X

X

X

X

–

–

–

X

X

X

–

–

–

–

–

–

–

–

–

–

–

X

–

–

–

–

–

–

–

–

–

X

–

–

X

Data
Control
–

–

–

–

–

X

X

X

–

–

–

–

X

Reference

Description

[13]

[14]

[15]

[16]

[17]

[18]

[19]

[20]

[21]

[22]

[23]

[24]

Proposed
Solution

vulnerability

Alerts generated by com-
puter emergency response
team
National
database alerts
Common Vulnerability
Scoring System (CVSS)
Common Weakness Enu-
meration (CWE)
Common Vulnerabilities
and Exposures
BT security threat monitor-
ing
Coco-Cloud CTI manage-
ment system
Hybbrid CIDS
framework
Privacy preserving CTI
sharing framework
Cloud based CTI sharing
framework
Proactive Risk Manage-
ment
through Improved
Cyber Situational Aware-
ness
TradeLens:
blockchain
based supply chain track-
ing
TRADE:
based
platform

Blockchain
sharing

based

CTI

that ensures anonymity, transparency, and accountability, (iii) a detailed description of smart contracts which support
the operation of the network, ensuring security guarantees for CTI sharing, and (iv) a high-level description of the
additional features to encourage the user to share.

2 Related Work

Cyber-attacks are quickly evolving into advanced persistent threats (APTs) [10] via cooperation, isolation, and
sophistication. Consequently, new, more robust, and collaborative paradigms are required to defeat these kinds of
attacks [11], leading to situational awareness [12]. This section details the related work in the area of threat intelligence
sharing and access control using blockchain, which enables CTI sharing. A summary of the related works and their
evaluation against the requirements listed in [8] is presented in Table 1.

2.1 CTI sharing platforms

Some of the initial works addressing threat sharing techniques, including indicators of compromise and standard sharing
format, are presented in [25]. Publishing security alerts publicly [13], national vulnerability database alerts [14], and
security announcements by security vendors are some of the traditional methods of sharing cyber threat intelligence. In
recent years, more advanced methods like common vulnerability scoring system [15], common weakness enumeration
[16], and common vulnerabilities and exposures [17] notiﬁcations are adopted. However, all the approaches mentioned
above are unidirectional and do not encourage cooperation among organizations. BT security threat monitoring [18],
Coco-Cloud [26], and CIF [19] aggregate and share threat information privately. The proposed solutions do not support
encryption or anonymization to protect sensitive CTI information.

Public domain projects (PROTECTIVE [23]) and industry-focused collaborations (FS-ISAC [9], and R-CISC [27])have
gained popularity in recent years. However, CTI sharing is happening either manually or in a supervised fashion.A

3

A PREPRINT - MARCH 25, 2021

cloud-native and blockchain-based framework is presented in Tradelens [24]. Though used for logistics use-case, the
underlying framework can be used for any information exchange platform. The framework enables anonymity and trust
by allowing information exchange between known entities. However, the information is present on a single node and is
shared with other entities making it vulnerable to a single point of failure.

2.2 Access control using blockchain

Blockchain-based access control tries to address a trusted and transparent third-party requirement by leveraging smart
contracts. FairAccess [28] use blockchain transactions to allow, delegate, and revoke access to the resources. However,
mining latency and the size of the underlying blockchain platform limit the wide adoption. A similar proposal is
presented in [29]. The proposed architecture stores the access control policy for the IoT devices on the blockchain
and can be accessed globally for veriﬁcation. [30] addresses the problem of mining latency by taking advantage of the
transaction pool. A similar approach is presented in [31, 32], which ensures users with the role can access the resources
in a challenge-response authentication protocol. An XACML-based access control system is presented in [33]. The
proposal uses Ethereum blockchain smart contracts to evaluate the access request against the security policy. In contrast,
authors in [34] present a platform using blockchain as an immutable log of operations. The immutable log ensures the
participants audit the operations and improves the trust in the system. Similarly, in [35], the authors propose blockchain
as the enabler of access control for IoT. An attribute-based access control scheme is proposed in [36], which uses
blockchain for authorizing IoT devices. Trusted entities, called authority nodes, are used to interact with the blockchain
and authorize access. TrustAccess [37] presents another attribute-based access control that addresses the privacy of
attributes and policies using ElGamal homomorphic encryption (to ensure the privacy of attribute during authorization
validation).

The blockchain-based solutions present in the literature suffer from the problem of privacy. Since the information stored
on the blockchain is publicly available to the participants to ensure auditability and transparency, this leads to loss of
privacy. The solutions addressing the privacy issue usually depend on encryption to protect the data from unauthorized
access. The dependency makes the solution rigid and static, as information like the participants interested in accessing
the information needs to be available in advance. Our proposed solution separates identity and information to tackle
these issues.

3 Proposed Platform

We propose a permissioned blockchain-based threat sharing platform (see Figure 1) for representing and sharing access
rights in a transparent and auditable manner. The proposed platform stores the access policies on the blockchain and
validates the access to a resource on the blockchain. In this section, we introduce the basic building blocks of the
proposed solution.

3.1 Open network

To establish an effective cyber resilience against cyber threats, more organizations need to join and share cyber threat
intelligence. An open network is an essential component to facilitate such sharing. In an open network, any organization
interested in sharing/consuming threat intelligence can interact with any other organization on the network. Such an
open network requires trust and access control, which needs to be achieved without depending on a single trusted third
party.

In this paper, we suggest applying a blockchain-based access control [38] to address those challenges. Blockchain-based
access control relieves the storage servers from the burden of handling the complex access control management in such
complex business networks, and at the same time, mitigates the need for outsourcing these functionalities to a trusted,
powerful entity. The business rules are enforced with smart contracts, which are stored on the blockchain and, thus,
are auditable. Also, nodes only need to verify the access token’s validity, which is securely stored on the blockchain.
The on-chain storage allows shifting those services to the cloud. Finally, blockchain-based access control provides
user-driven, transparent access control. The data owner is the only one responsible for deﬁning the granular access
control policies over his data.

3.2 Decoupled network architecture

The threat sharing network consists of two permissioned blockchain networks: Identity Blockchain Network and
Activity Blockchain Network (see Figure 1).

4

A PREPRINT - MARCH 25, 2021

Figure 1: TRADE network architecture.

The Identity Blockchain Network consists of proﬁles and policies of the organizations interested in sharing/consuming
the threat information. Since the information present on this network is conﬁdential and critical, access to the Identity
Blockchain Network is regulated by trusted entities called Registrars. Organizations like US CERT [39, 40], US
ISAC [41] or other well-reputed organization can act as registrars on the Identity Blockchain Network. The registrars
on the Identity Blockchain Network may form a consortium to ensure transparency on the network and regulate access
to the threat sharing network. The opportunity to run independent validator nodes increases the security and reliability
of the TRADE consensus protocol by having non-correlated failure risks. The policies to share and access the threat
information and smart contracts to validate the access request are stored on the Identity Blockchain Network. The smart
contracts handling the proﬁle and policy management are stored on Identity Blockchain Network.

The Activity Blockchain Network logs and monitors the threat-sharing activities related to an organization. The network
holds two kinds of information. The metadata related to the threat information is stored on the blockchain in the form of
transactions. The metadata acts as a history of records for auditing and helps in searching and generating notiﬁcations
related to the availability of the threat information. Also, the information related to access-policies is stored on the
blockchain. An organization’s access request is validated using the Identity Blockchain Network, and access permission
is stored on the blockchain on successful validation. The on-chain storage is done to eliminate any modiﬁcation to the
access token and increase trust in the network. The smart contracts handling the data management and policy validation
are stored on Activity Blockchain Network.

Table 2 summarizes the access authorizations of various entities of the system. The decoupling of the Identity Blockchain
Network from the Activity Blockchain Network preserves privacy and anonymity while ensuring accountability. After
registering the organization on Identity Blockchain Network, a pseudo-identity is created for the organization. The
pseudo-identity protects the organization’s actual identity and anonymizes the organization’s operations on the Activity
Blockchain Network. The mapping between the real identity and the pseudo-identity is stored off-chain to hold the
organizations accountable for their actions on the Activity Blockchain Network.

3.3 Policy-based access control for threat sharing

Traditional access control schemes (such as attribute-based access control and role-based access control) are not
suitable for threat-sharing scenarios. They have a built-in bias towards a static approach that is increasingly ineffective
within the dynamic systems within which access decisions need to be made. The proposed solution uses policy-based
access control (PBAC), which uses context-based security policies. Essentially, PBAC combines attributes from the
resource, the environment, and the requester with information on the particular set of circumstances under which the
access request is made and uses rule sets that specify whether the access is allowed under the organizational policy

5

A PREPRINT - MARCH 25, 2021

Figure 2: Smart contracts on the two blockchain networks.

attributes under those circumstances. This means that a policy-driven workﬂow engine discovers, organizes, and
resolves information or attributes to provide the necessary context for more informed decision-making about access.

In PBAC, each organization could use different sharing policies that might reﬂect different trust levels. When sharing
CTI, the organization might tag the shared CTI with the policy to be enforced when disseminating the CTI within the
network. For example, an organization might apply a range of sharing policies with varying degrees of restriction.
When sharing highly conﬁdential CTI, the organization would tag the CTI with a highly restrictive policy. Only the
network members that satisfy this policy would be able to consume this sensitive data. However, when an organization
wishes to share less sensitive CTI, it might tag it with a less strict sharing policy. Any organization meeting those less
strict policy guidelines could then consume it.

3.4 Smart contracts

The access and security policies in the framework are enforced using smart contracts. The following contracts are
designed to govern CTI exchange among organizations within a threat information-sharing network. To accomplish
this, the contracts contain metadata about record ownership, access permissions, and data integrity. The blockchain
transactions in such a system carry cryptographically signed instructions to manage these properties. The contract’s
state-transition functions carry out policies, enforcing data altercation only by legitimate transactions. Such a policy
could be designed to implement any set of rules governing a particular CTI record, given it could be computationally
deﬁned. The proposed system locates these policies on a blockchain through the following ﬁve smart contracts (see
Figure 2).

Registration contract (RC). The registration contract regulates the organization proﬁle management on the Identity
Blockchain Network. It maps an organizations’ permanent blockchain address identity (equivalent to a public key)
to the organization proﬁle. An organization proﬁle is a set of organizational attributes used by a policy validation
contract (PVC) to validate whether an organization fulﬁlls network members’ policies. The organization proﬁle may
include various attributes such as an organization’s size, headquarter location, credit rate, and whether the organization
is GDPR compliant. An RC contract would regulate the registration of new identities. Identity registration would
be restricted only to certiﬁed institutions referred to as registrar, which regulates adding a new organization to the
network, i.e., adding a mapping between organizations’ blockchain address identity to the organization proﬁle. Note
that by adding this mapping, the registrar is not vouching for the organization but ensures that the organization proﬁle
genuinely reﬂects the organizational attributes. When adding a new organization, the registrar stores off-chain a
mapping between the real organization identity and its blockchain address identity. A set of public keys is stored as
part of the organizations’ proﬁle and is used to authenticate the organization. By employing separate key sets and
separate transactions, this approach allows organizations to maintain a high degree of anonymity. The RC contract is
also responsible for addressing network policy violations and resolve a dispute among network members. In case of
violation, the RC deﬁnes the terms at which the registrar exposes the organization’s real identity. For example, when
more than x registrars have determined that this organization has violated the network policy. The RC contract also
deﬁnes the terms at which organizations are revoked, or a violation note is added to the organization proﬁle.

6

A PREPRINT - MARCH 25, 2021

Table 2: Entities and their allowed operations and transactions on Identity Blockchain Network and Activity Blockchain
Network.

Entities

Registrar

TRADE
Client

TRADE
Server

Identity Blockchain Network

Operations
NA

1. Access Permission
Request
2. Data Authentication

Allowed Transactions

1. Identity Registration
Transaction
2. Organization Revocation
Transaction
3. Violation Addition
Transaction
1. Proﬁle Badge Request
Transaction
2. Policy Creation

NA

NA

Activity Blockchain Network

Operations
NA

Allowed Transactions
NA

1. Notiﬁcation
2. Navigation
3. Search
4. Transparency
1. Access Authorization
2. Data Authentication

1. Access Permission
Request (APR)
Transaction

1. Publish Data
Transaction
2. Access Data
Transaction

Policy management contract (PDC). The policy management contract regulates the deployment and management
of Proﬁle Badge policies on the Identity Blockchain Network. A proﬁle badge policy is a set of business rules that
need to be fulﬁlled by the organization proﬁle to grant this organization with a proﬁle badge. As in [42], we suggest
expressing the proﬁle badge policy through attribute-based access control (ABAC) policies. An attribute-based access
control policy combines rules expressing conditions over a set of attributes paired to the subject, the resource, or the
environment. One of the key advantages of the ABAC languages (such as XACML [43]) is the richness of the language,
where rules are conjunctively or disjunctively combined. Each policy is associated with a policy owner where only
the policy owner can delete or modify the policy. However, the policy owner can grant other organizations to use
his deployed policies. In section 6.2, we describe how this can highly minimize the load on the Identity Blockchain
Network and increase anonymity.

Permission contract (PC). The permission contract regulates the access permission tokens (APTs) generation on the
Activity Blockchain Network. An APT is generated by the access permission request transaction, which takes as an
input (a) the data asset UID, (b) the desired access privilege, and (c) a set of proﬁle badge references. Upon an access
permission request transaction, the PC retrieves the corresponding data record from the data management contract
using the data asset UID and extracts the authorization policy for the desired privilege. Next, the contract retrieves
all the proﬁle badges, using the set of proﬁle badge references speciﬁed in the request, from the PVC on the Identity
Blockchain Network. The contract would generate an APT if the retrieved proﬁle badges satisﬁed the authentication
policy. The APT record includes the following attributes (a) the requester’s public key, (b) access permission privilege,
and (c) expiration time. Once the APT is stored within the blockchain, a pointer to this APT is returned to the access
permission request. When the organization is communicating with the CTI server, it provides the pointer to the APT.
The CTI server queries the blockchain with the given APT pointer to retrieve the APT record. Using the APT, the CTI
server can grant access to the organization following the privilege deﬁned in the APT. The PC contract allows the data
owner to query the APTs corresponding to his data to provide the data owner full transparency over his data.

Policy validator contract (PVC). The policy validator contract regulates the proﬁle badge management on the Identity
Blockchain Network. It maps an organizations’ temporary blockchain address identity to proﬁle badge. The Permission
Contract uses the proﬁle badge for generating Access Permission Tokens on the Activity Blockchain Network for the
anonymous temporary blockchain address identity. When an organization generates a proﬁle badge for a given policy, it
invokes a proﬁle badge request transaction specifying the target policy ID and the temporary blockchain address identity
it would like to use. This transaction triggers the PVC to validate the policy speciﬁed by the given policy ID against
the requester’s organization proﬁle. In case the organization proﬁle satisﬁed the policy, a proﬁle badge is stored on
the Identity Blockchain Network. The proﬁle badge includes the following attributes: (a) badge ID, (b) the temporary
public key, (c) the policy UID, and (d) validity ﬂag. The proﬁle badge revocation transaction deactivates the proﬁle
badge. As will be described in section 6.2, the reuse of proﬁle badges by the organizations is desired to optimize the
overall performance of TRADE. Hence, the proﬁle badge’s soundness stays as long as the organization proﬁle has not
been modiﬁed. Any proﬁle update triggers the revocation of all its Proﬁle Badges.

Data management contract (DMC). The data management contract regulates the creation and management of data
records on the Activity Blockchain Network. This contract stores a data record for any data asset in TRADE. A data
asset can a CTI record or data set on a CTI server or data channel in a pub-sub CTI network. The data record includes the

7

A PREPRINT - MARCH 25, 2021

following attributes (a) data owner temporary blockchain identity, (b) data access policy for the subject data (privilege
mapping). Besides, the data record may also include (a) a hash of the data record that is used for authenticity validation
of the data by the data consumers), (b) the data record description and keywords that are used for data search and
notiﬁcations, and (c) communication information (server address) for record retrieval. The DMC also supports search
and notiﬁcation mechanisms. The search mechanism allows organizations to retrieve data records by querying the data
asset metadata (keywords, topic description). The notiﬁcation mechanism allows organizations to be notiﬁed of network
activity based on their interest.

4

Implementing TRADE with TAXII-based CTI Sharing Platform

We provide a detailed description of TRADE in which the CTI data exchange subnetwork is based on TAXII imple-
mentation [44]. A similar integration approach can be used with other technologies such as OpenDXL and MiSP. We
begin by describing the interface between TRADE and the TAXII implementation (Section 4.1), and then we provide a
detailed description of the access authorization process (Section 4.5).

4.1 TRADE interface

In this setup, the TAXII server delegates the access control processes to TRADE. The delegation relieves the TAXII
servers from the burden of the complex access control management in such a complex business network and allows it to
serve any member in TRADE. To provide simple integration of the existing CTI sharing technology, such as TAXII
and OpenDXL, we suggest an SDK-based model. The TAXII clients and servers are equipped with the corresponding
TRADE client and server SDKs. Since the TRADE SDKs hold the cryptography secrets, we suggest deploying them
within a secure hardware module that is already available as a service in the cloud environment.

The TRADE client SDK will provide the following services:

• Access permission request: On access permission request, the TRADE client SDK returns a TRADE Header,
containing a reference to an access permission token (APT) stored on the Activity Blockchain Network. The
TRADE Header is then added to the TAXII client request.

• Data authentication: When a CTI producer uploads a new CTI record to the TAXII server, it afﬁxes the data
with its hash. The CTI record consumers then use this hash to ensure that the data in question has not been
altered.

• Notiﬁcation: The Activity Blockchain Network can also act as a network coordinator using notiﬁcations.
Speciﬁcally, the Activity Blockchain Network can notify relevant organizations about a newly created record
being added or modiﬁed or about creating a new trust group.

• Navigation: When a CTI producer uploads a new CTI record to the TAXII server, it may afﬁx the record with

additional information indicating where the relevant record can be accessed in the network.

• Search: As the network coordinator, the Activity Blockchain Network would provide a CTI search mechanism
for the network’s contained records. As the data itself is not stored on the blockchain when a CTI producer
uploads a new data set to the TAXII server, he/she may mark the data with different tags describing the CTI
record (e.g., ﬁnancial malware, suspicious IP) to be used by the search mechanism.

• Transparency: This service allows network members to retrieve information related to their data stored on
the Activity Blockchain ledger. For example, this service allows a CTI producer to retrieve the history related
to the download of its records.

The TRADE server SDK provides the following services:

• Access authorization: On access authorization request, the TRADE server SDK takes as the input the TRADE
Header produced by the client SDK, retrieves the APT from the Activity Blockchain Network, and returns the
privilege to the entitled requester.

• Data authentication: Using this interface, the TAXII server can validate the authenticity of a received CTI

record using the corresponding data record stored on the Activity Blockchain Network.

4.2 Organization registration process

In this section, we describe the process of registration for a new organization interested in sharing cyber threat
information. The organization presents its proﬁle to the consortium of trusted third parties called registrars. The proﬁle

8

A PREPRINT - MARCH 25, 2021

consists of information like (a) organization name, (b) the number of employees, (c) annual revenue, and (d) headquarter
location. The registrar validates the proﬁle off-chain, and on successful veriﬁcation, she saves the proﬁle on the Identity
Blockchain Network. Also, she creates a pseudo-identity on the Identity Blockchain Network for the organization to
interact with the Activity Blockchain Network. The pseudo-identity proﬁle consists of information like (a) public key,
(b) identity tags, (c) CTI contribution, (d) status, and (e) issuer. Once done, the registrar saves the mapping between the
original identity and the pseudo-identity on her local database. The off-chain storage of mapping ensures privacy and
accountability as explained in Section 3.2. Finally, she returns the blockchain address of the pseudo-identity to the
organization.

4.3 Consumption and sharing policy creation process

In this section, we detail the following process in the sequence of events. Once the organization identities are created,
the next step is to create the organization’s consumption and sharing policies. The consumption policy deﬁnes the
organization’s parameters before consuming the cyber threat information from a source. It consists of (a) policy id, (b)
description, and (c) terms of the policy. The terms of the policy are a set of conditions that need to be satisﬁed for the
policy’s enforcement. Similarly, the sharing policy deﬁnes the set of parameters that the organization looks for before
sharing the cyber threat to a consumer. Thus, to successfully consume cyber threat information, the organization’s
consumption policy must agree with the sharing policy of the source. The consumption and sharing policies also protect
the system against free-loaders (empty consumption policy) and malicious CTI injectors (empty sharing policy).

4.4 Cyber threat information insertion process

In this section, we describe the process of collecting cyber threat information for sharing with the community. Once the
organization creates the consumption and sharing policies, the next step is to add the threat information to the Taxii
server. Also, a suitable sharing policy should be associated with the threat information. Once done, a notiﬁcation is sent
to the community members, informing them about the availability of new information.

4.5 Access authorization process

This section provides a detailed description of the access authorization process of data retrieval from a TAXII server. A
very similar process can be applied to other data access authorization processes, including a topic subscription in a
pub/sub model or joining a trusted group.

When the data producer P uploads a new record to the TAXII server, he ﬁrst invokes a publish data transaction, which
results in a new data record on the Activity Blockchain Network. The data consumer can retrieve the data record
by using the search and notiﬁcation services of the TRADE client SDK (see Figure 3). These services leverage the
keywords provided by the data owner when data was uploaded. The data record provides the data consumer C all the
information he needs to retrieve the data record. Speciﬁcally, the data consumer C extracts the following attribute from
the data record: (a) record ID, (b) the authorization policy, (c) the record hash and optionally, and (d) the TAXII server
address (access information).

The data retrieval process includes the following three phases (see Figure 3):

Phase 1 – Proﬁle badge generation. In the ﬁrst stage, the data consumer generates a Proﬁle Badge record (if such
does not exist) on the Identity Blockchain Network for each badge policy speciﬁed in the record’s authorization
policy. The Proﬁle Badge includes the following attributes: (a) Badge ID, (b) the user pseudo-identity, (c) the
policy UID, and (d) Validity ﬂag. To generate the Proﬁle Badges, the data consumer applies the following
interaction with the Identity Blockchain Network using its real identity credentials.

1.1 The data consumer ﬁrst invokes a Proﬁle Badge Request Transaction to the Identity Blockchain Network
for each badge policy speciﬁed in the record’s authorization policy, which is not already stored on the
blockchain. The transaction includes the policy ID and the data consumer’s pseudo-identity.

1.2 The Policy Validator smart contract validates the policy speciﬁed by the given policy ID against the
organization proﬁle. In case the organization proﬁle satisﬁed the policy, the smart contract generates a
Proﬁle Badge (PB), which is stored on the Identity Blockchain Network. In the end, a reference to the PB
is returned to the requester.

Phase 2 – Authorization token generation. In this stage, the data consumer generates an Authorization Token Record
on the desired record’s Activity Blockchain. To this end, the data consumer applies the following interaction
with the Activity Blockchain using one of its temporary credentials.

9

A PREPRINT - MARCH 25, 2021

Figure 3: Workﬂow of an authorization process.

2.1 The data consumer invokes an Access Permission Request (APR) to the Activity Blockchain Network,
requesting access to a data item or an entire data set. The transaction includes the set of references of the
relevant user badges (obtained at stage 1).

2.2 The RC smart contract retrieves the target PB from the Identity Blockchain Network using the PB
reference provided by the user. In case all policies are valid (active), the RC smart contract generates an
Access Permission Token (APT), which is stored on the blockchain. The stored APT would include the
following: (a) the data consumer’s public key, (b) access permission privilege, and (c) expiration time. In
the end, a reference to the APT is returned to the requester. To support ﬂexible deployment, the response
might also include additional information indicating the network location of the relevant database to be
accessed (e.g., hostname and port in a standard network topology).

Phase 3 – Data retrieval. In this stage, the data consumer retrieves the TAXII server’s data using the APT record on
the Activity Blockchain Network. To this end, the data consumer applies the following interaction with the
TAXII server using one of its temporary credentials.

3.1 The data consumer then sends a transaction request to the TAXII server, including (a) the requested
operation and metadata required to apply the operation, (b) the user’s signature created via the use of the
user’s private key, and (c) the reference to the APT provided by the Activity Blockchain Network.
3.2 Upon receipt of such a transaction, the TAXII server would undertake the following actions: (a) Given a
valid timestamp, retrieve the target APT from the Activity Blockchain Network using the data consumer’s
APT reference. (b) Authenticate the user by using the user public key in the APT. (c) Given a successful
authentication of the requesting data consumer, validate the requested operation against the access
permission privileges in the APT. (d) Given the requested operation conforms to the granted privileges in
the APT, apply the operation, and return the relevant information to the requesting user.

3.3 After returning a record by a TAXII server to the requesting data consumer, the data consumer validates

the data authenticity by using the corresponding hash from the data record.

10

Identity BlockchainActivity BlockchainTaxii ClientTaxii Client SDK Taxii ServerTaxii Server SDK(1.1)Policy UID +Badge UID(1.2)Policy Badge ReferenceProfile Badges(2.2)Badge References(3.1)Taxii get +Trade Header(3.3)CTI RecordAPT(3.2)APT Reference(2.1)Badge Reference + Data Record(2.3)APT ReferenceReal Identity Public KeyPseudo-Identity Public KeyA PREPRINT - MARCH 25, 2021

Figure 4: Organization registration workﬂow.

5 Formal Evaluation

In this section, we formally evaluate the processes involved in the proposed framework. We begin by individually
deﬁning the previous section’s processes as abstract speciﬁcations using TLA+ [45, 46] formal language for model
veriﬁcation. Once the deﬁnitions are complete, the TLC model testing tool checks the proposal’s correctness. For the
implementation of the framework, the resulting formal speciﬁcation is then used as input.

5.1 Organization registration speciﬁcation

In this section, we formalize the registration of a new organization in threat sharing community. The workﬂow
involves interaction between an organization (O) and a registrar (R) for adding the organization to the threat-sharing
community (Figure 4). The two blockchains act as a ledger of records containing performed operations and are used as
a communication medium. We start with the initialization of each variable with the default value. InitOrganization,
InitRegistrar, and InitIdentityBlockchain are the organization, registrar, and identity blockchain variables’ initial values.
The channel variable is used to describe safe communication between the organization and the registrar. The state
space for the registration workﬂow is deﬁned as Init ∧ ∗[ Next] vars ∧W F_vars(Next) in TLA+ speciﬁcations where the
W F_vars is for fairness. The possible transitions from the initial state are described in the following equation:

Listing 1 State Space

∨ Preparation(o) ∨ Register(o)
∨ Veri f icationFailed(o) ∨ ReceiveBlockchainIdentity(o)

∨ Veri f ication(r) ∨ BlockchainIdentityCreation(r)
∨ SaveMapping(r)

∨ Setup
∨ ∃ o ∈ Organization :

∨ ∃ r ∈ Registrar:

∨ Con f irmReceipt
∨ Termination

1: Next (cid:44)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:

Spec (cid:44)

Init ∧ ∗ [Next]vars ∧ W F_vars(Next)

11

itxPooliblockTxConfirm ReceiptVerificationRegisterBlockchain Identity CreationSave MappingPrivate DatabaseReceive Blockchain IdentitySecure CommunicationVerification FailedOrganization Identity BlockchainRegistrar/ TTPEndEndA PREPRINT - MARCH 25, 2021

Next deﬁnes a set of possible states for the system to transit. One of the states includes the Termination state, which
contains the system’s conditions to terminate safely. The channel variable is created to exchange messages between
entities securely.

The organization is interested in sharing and consuming cyber threat information from the sharing network. The organi-
zation begins with a O_Waiting and then transits through O_Register, O_ReceiveBlockchainIdentity, and O_Final. In
the end, the organization receives a pseudo-identity reference which is stored on the identity blockchain.

(i) Register: The Organization initiates the process by requesting the registrar to verify her proﬁle and add her to the
threat sharing network. The proﬁle information is sent via a channel to a registrar. Once the information is sent, the
system transits to O_ReceiveBlockchainIdentity state, where the organization waits for the blockchain address where
her pseudo-identity is stored.

Listing 2 Register

1:
2:
3:
4:
5:
6:
7:
8:
9:

∧ oState[o] = O_Register
∧ ∃ r ∈ Registrar :

∧ rState[r] = R_Waiting
∧ LET

m == oBu f f er[o]

IN

Send([src (cid:55)→ o, dst (cid:55)→ r, type (cid:55)→ M_Veri f ication, data (cid:55)→ (cid:104) o, m[1], m[2] (cid:105)])

∧ oState(cid:48) = [ oState EXCEPT ![o] = O_ReceiveBlockchainIdentity ]
∧ UNCHANGED (cid:104) tempVars, oBu f f er, registrarVars, identityBlockchainVars (cid:105)

(ii) VeriﬁcationFailed: If the organization’s proﬁle veriﬁcation by the registrar fails, the system enters into O_Finaly
state. The system terminates safely with the organization not receiving the pseudo-identity details.

Listing 3 Veriﬁcation Failed

1:
2:
3:
4:
5:

∃ c ∈ channel :
∧ c.dst = o
∧ c.type = M_NO
∧ oState(cid:48) = [ oState EXCEPT ![o] = O_Final ]
∧ UNCHANGED (cid:104) tempVars, oBu f f er, registrarVars, commVars, identityBlockchainVars (cid:105)

(iii) ReceiveBlockchainIdentity: In this state, the organization waits for the message with pseudo-identity from the
registrar. Once the message is received, the organization is removed from the queue. If more organizations need to
register themselves, the process is repeated from the start with the system transiting to the O_Register state. If no more
registrations are required, the system moves safely to O_Final state and terminates.

Listing 4 Receive Blockchain Identity

1:
2:
3:
4:
5:
6:
7:
8:
9:

∃ c ∈ channel :
∧ c.dst = o
∧ c.type = M_Identity
∧ oState[o] = O_ReceiveBlockchainIdentity
∧ IF Len(registrationPool) = 0 T HEN

∧ oState(cid:48) = [ oState EXCEPT ![o] = O_Final ]

ELSE

∧ oState(cid:48) = [ oState EXCEPT ![o] = O_Register ]

∧ UNCHANGED (cid:104) tempVars, oBu f f er, registrarVars, commVars, identityBlockchainVars (cid:105)

The registrar is responsible for verifying the organization proﬁle. In case the veriﬁcation is successful, the registrar cre-
ates a pseudo-identity on the identity blockchain and stores the mapping between the original identity and pseudo-identity.
The registrar begins with a R_Waiting and then transits through R_Veri f ication, R_BlockchainIdentityCreation, and
R_SaveMapping. Once the mapping is saved, and the pseudo-identity’s blockchain address is sent back to the
organization, the registrar moves back to R_Waiting state to process a new request.

(iv) Veriﬁcation: The registrar begins in R_Waiting state, waiting for the proﬁle information from the organization. Once
the information is received, the registrar does an off-chain veriﬁcation using the VerifyProﬁle function, which abstracts

12

the details. If successful, the system transits to R_BlockchainIdentityCreation state. Alternatively, the registrar sends a
veriﬁcation failure message back to the organization and transit to R_Waiting.

A PREPRINT - MARCH 25, 2021

Listing 5 Veriﬁcation

1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:

∃ c ∈ channel :
∧ c.dst = r
∧ c.type = M_Veri f ication
∧ rState[r] = R_Waiting
∧ IF Veri f yPro f ile(c.data[2], c.data[3]) T HEN

∧ rBu f f er(cid:48) = [ rBu f f er EXCEPT ![r] = c.data ]
∧ rState(cid:48) = [ rState EXCEPT ![r] = R_BlockchainIdentityCreation ]
∧ UNCHANGED (cid:104) tempVars, organizationVars, commVars, identityBlockchainVars (cid:105)

ELSE

∧ rState(cid:48) = [ rState EXCEPT ![r] = R_Waiting ]
∧ RecvInadditionSend(c, [src (cid:55)→ r, dst (cid:55)→ c.data[1], type (cid:55)→ M_NO, data (cid:55)→ (cid:104) (cid:105)])
∧ UNCHANGED (cid:104) tempVars, organizationVars, rBu f f er, identityBlockchainVars (cid:105)

(v) BlockchainIdentityCreation: With successful veriﬁcation of the organization proﬁle, the registrar creates a pseudo-
identity of the organization on the identity blockchain. The registrar sends a blockchain transaction with the proﬁle
details to the identity blockchain. The organization can then use this identity to interact with the activity blockchain. On
successfully creating the identity on the blockchain, the system transits to R_SaveMapping.

Listing 6 Blockchain Identity Creation

1:
2:
3:
4:

∧ rState[r] = R_BlockchainIdentityCreation
∧ rState(cid:48) = [ rState EXCEPT ![r] = R_SaveMapping ]
∧ blockchainIdentityT xn(r, BLOCKCHAIN_ID, BLOCKCHAIN_PROFILE)
∧ UNCHANGED (cid:104) tempVars, organizationVars, rBu f f er, commVars, iblockT x (cid:105)

(vi) SaveMapping: In this state, the registrar saves the mapping between the original identity and the pseudo-identity
off-chain. Once the mapping is saved, the registrar sends a successful message with the blockchain address back to the
organization. After the message is sent, the system transits back to R_Waiting.

Listing 7 Save Mapping

1:
2:
3:
4:
5:
6:
7:

∧ rState[r] = R_SaveMapping
∧ LET

data == mBu f f er[r]

IN

Send([src (cid:55)→ r, dst (cid:55)→ data[1], type (cid:55)→ M_Identity, data (cid:55)→ (cid:104) BLOCKCHAIN_ADDRESS (cid:105)])

∧ rState(cid:48) = [ rState EXCEPT ![r] = R_Waiting ]
∧ UNCHANGED (cid:104) tempVars, organizationVars, rBu f f er, identityBlockchainVars (cid:105)

(vii) ConﬁrmReceipt: It is difﬁcult to model an entire blockchain system. Thus, for our proposal, we model only its
critical component. The blockchain framework is deﬁned in our speciﬁcation by independent ConﬁrmReceipt steps.
The blockchain system conﬁrms and transfers it to blockTx if there is a valid transaction, a compilation of veriﬁed
transactions in the blocks. In this case, TX_ORIGINAL and TX_BLOCKCHAIN are the valid transactions that indicate
the original identity transaction and blockchain identity transaction.

Listing 8 Conﬁrm Receipt

1:
2:
3:
4:
5:

∃ receiptT x ∈ itxPool :

∧ (receiptT x.type = T X_ORIGINAL ∨ receiptT x.type = T X_BLOCKCHAIN)
∧ itxPool(cid:48) = itxPool \ {receiptT x}
∧ iblockT x(cid:48) = iblockT x ∪ {receiptT x}
∧ UNCHANGED (cid:104) tempVars, organizationVars, registrarVars, commVars (cid:105)

(viii) Termination: If the organization receives the blockchain address of the pseudo-identity or the proﬁle veriﬁcation
failure message, the entire process is terminated. Since no further changes are required, termination has no primed
variables.

13

A PREPRINT - MARCH 25, 2021

Figure 5: Consumption and sharing policy creation Workﬂow.

Listing 9 Termination

1:
2:

∧ ∀ o ∈ Organization : oState[o] = O_Final
∧ UNCHANGED vars

5.2 Consumption and sharing policy creation speciﬁcation

Next, we formalize the creation of the consumption and sharing policies by the organization. The workﬂow involves
interaction between an organization (O) and the identity blockchain (Figure 5). InitOrganization and InitIdentity-
Blockchain are the organization and identity blockchain variables’ initial values. The channel variable remains the
same. The state-space speciﬁcation, too, for the policy creation workﬂow remains the same. The possible transitions
from the initial state are described in the following equation:

Listing 10 State Space

1: Next (cid:44)
2:
3:
4:
5:
6:
7:
8:
9:

Spec (cid:44)

∨ Setup
∨ ∃ o ∈ Organization :

∨ Con f irmReceipt
∨ Termination

∨ Preparation(o) ∨CreatePolicy(o)

Init ∧ ∗ [Next]vars ∧ W F_vars(Next)

In this case, the organization intends to deﬁne the consumption and sharing policies to be used for sharing and consuming
cyber threat information. The organization begins with a O_Waiting and then transits through O_CreatePolicy, and
O_Final. In the end, the organization stores all the policies on the identity blockchain.

14

Policy CreationOrganization EnditxPooliblockTxConfirm ReceiptIdentity Blockchain(i) Preparation: This state acts as a pre-processing state. The system checks if there are any more policy creation
requests in the queue. If the queue is empty, the system transits to the O_Final state and terminates. Otherwise, policy
creation is repeated with the system transiting to O_CreatePolicy.

A PREPRINT - MARCH 25, 2021

Listing 11 Preparation

1:
2:
3:
4:
5:
6:
7:
8:
9:

∧ oState[o] = O_Waiting
∧ IF Len(policyPool) > 0 T HEN

∧ oBu f f er(cid:48) = [ oBu f f er EXCEPT ![o] = Head(policyPool) ]
∧ oState(cid:48) = [ oState EXCEPT ![o] = O_CreatePolicy ]
∧ policyPool(cid:48) = Tail(policyPool)
∧ UNCHANGED (cid:104) policySource, identityBlockchainVars (cid:105)

ELSE

∧ oState(cid:48) = [ oState EXCEPT ![o] = O_Final ]
∧ UNCHANGED (cid:104) oBu f f er, tempVars, identityBlockchainVars (cid:105)

(ii) CreatePolicy: As part of this state, the organization deﬁnes a consumption or a sharing policy and stores it in the
identity blockchain. The transaction is sent with a TX_POLICY identiﬁer. Once done, the system transits to the initial
state, waiting to create more policies or terminating the process.

Listing 12 Create Policy

1:
2:
3:
4:

∧ oState[o] = O_CreatePolicy
∧ blockchainPolicyT xn(o, oBu f f er[o][1], oBu f f er[o][2])
∧ oState(cid:48) = [ oState EXCEPT ![o] = O_Waiting ]
∧ UNCHANGED (cid:104) tempVars, oBu f f er, iblockT x (cid:105)

(iii) ConﬁrmReceipt: The blockchain system conﬁrms and transfers a valid transaction to blockTx, which is a compilation
of veriﬁed transactions in the blocks. In this case, TX_POLICY is a valid transaction that indicates a consumption or
sharing policy transaction.

Listing 13 Conﬁrm Receipt

1:
2:
3:
4:
5:

∃ receiptT x ∈ itxPool :

∧ receiptT x.type = T X_POLICY
∧ itxPool(cid:48) = itxPool \ {receiptT x}
∧ iblockT x(cid:48) = iblockT x ∪ {receiptT x}
∧ UNCHANGED (cid:104) tempVars, organizationVars (cid:105)

(iv) Termination: Once the organization stores all the policies on the identity blockchain, the entire process is terminated.
Since no further changes are required, termination has no primed variables.

Listing 14 Termination

1:
2:

∧ ∀ o ∈ Organization : oState[o] = O_Final
∧ UNCHANGED vars

5.3 Cyber threat information insertion speciﬁcation

Subsequently, we formalize the insertion of cyber threat information into the Taxii server. The workﬂow involves
interaction between an organization (O), a Taxii server (S), and the activity blockchain (Figure 6). InitOrganization,
InitServer, and InitActivityBlockchain are the organization, server, and activity blockchain variables’ initial values.
The channel variable and state-space speciﬁcation remain unchanged. The possible transitions from the initial state are
described in the following State Space.

The organization, in this case, intends to insert the cyber threat information into the Taxii server. Further, the CTI is
associated with the consumption and sharing policies created on the identity blockchain. Finally, with the insertion
into the blockchain, a notiﬁcation is sent to the organization’s relevant community. The organization begins with a
O_Waiting and then transits through O_Insert, O_AssociatePolicy, and O_Final. In the end, the organization stores the
CTI in the Taxii server.

15

A PREPRINT - MARCH 25, 2021

Figure 6: CTI information insertion Workﬂow.

Listing 15 State Space

∨ Preparation(o) ∨ InsertCyberIn f ormation(o)
∨ InsertionFailed(o) ∨ PolicyAssociation(o)

∨ Setup
∨ ∃ o ∈ Organization :

∨ ∃ s ∈ Server:

∨ Insertion(s)
∨ Con f irmReceipt
∨ Termination

1: Next (cid:44)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:

Spec (cid:44)

Init ∧ ∗ [Next]vars ∧ W F_vars(Next)

(i) Preparation: Like the previous one, this state acts as a pre-processing state. The system checks if there are any more
CTI to be inserted into the Taxii server. If the queue is empty, the system transits to the O_Final state and terminates.
Otherwise, CTI insertion is repeated with the system transiting to O_Insert.

Listing 16 Preparation

1:
2:
3:
4:
5:
6:
7:
8:
9:

∧ oState[o] = O_Waiting
∧ IF Len(cyberPool) > 0 T HEN

∧ oBu f f er(cid:48) = [ oBu f f er EXCEPT ![o] = Head(cyberPool) ]
∧ oState(cid:48) = [ oState EXCEPT ![o] = O_Insert ]
∧ cyberPool(cid:48) = Tail(cyberPool)
∧ UNCHANGED (cid:104) cyberSource, serverVars, commVars, activityBlockchainVars (cid:105)

ELSE

∧ oState(cid:48) = [ oState EXCEPT ![o] = O_Final ]
∧ UNCHANGED (cid:104) tempVars, oBu f f er, serverVars, commVars, activityBlockchainVars (cid:105)

16

Policy CreationOrganization EndatxPoolablockTxConfirm ReceiptActivity BlockchainCTI InsertionInsertionTaxii ServerEndSecure CommunicationA PREPRINT - MARCH 25, 2021

(ii) InsertCyberInformation: An organization initiates the CTI creation process by sending the message containing the
details of a threat to the Taxii server. Once the message is sent, the system transits to O_AssociatePolicy state. The
organization then waits for the response from the Taxii server.

Listing 17 Insert Cyber Information

∧ sState[s] = S_Waiting
∧ LET

1: ∧ oState[o] = O_Insert
2: ∧ ∃ s ∈ Server :
3:
4:
5:
6:
7:
8: ∧ oState(cid:48) = [ oState EXCEPT ![o] = O_AssociatePolicy ]
9: ∧ UNCHANGED (cid:104) tempVars, oBu f f er, serverVars, activityBlockchainVars (cid:105)

Send([src (cid:55)→ o, dst (cid:55)→ s, type (cid:55)→ M_Insertion, data (cid:55)→ (cid:104) o, m[1], m[2] (cid:105)])

m == oBu f f er[o]

IN

(iii) InsertionFailed: If the Taxii server fails to insert the CTI sent by the organization, the server responds with a failure
message back to the organization. The server remains in S_Waiting state to process further requests. On receiving the
failure message, the system transits to O_Final state and terminates.

Listing 18 Insertion Failed

1:
2:
3:
4:
5:

∃ c ∈ channel :
∧ c.dst = o
∧ c.type = M_NO
∧ oState(cid:48) = [ oState EXCEPT ![o] = O_Final ]
∧ UNCHANGED (cid:104) tempVars, oBu f f er, serverVars, commVars, activityBlockchainVars (cid:105)

(iv) PolicyAssociation: On receiving a message indicating successful insertion of CTI in the Taxii server, the organization
sends a transaction to the activity blockchain, associating the consumption and sharing policy with the newly inserted
CTI. The association transaction is identiﬁed by ATX_CYBER_THREAT.

Listing 19 Policy Association
∃ c ∈ channel :
∧ c.dst = o
∧ c.type = M_OK
∧ oState(cid:48) = [ oState EXCEPT ![o] = O_Waiting ]
∧ LET

m == oBu f f er[o]
pid == POLICY _ID

IN

blockchainPolicyT xn(o, m[1], pid)
UNCHANGED (cid:104) tempVars, oBu f f er, serverVars, commVars, ablockT x (cid:105)

1:
2:
3:
4:
5:
6:
7:
8:
9:
10:

The Taxii server is responsible for storing the CTI information. The server remains in S_Waiting state, waiting for
insertion request from an organization.

Listing 20 Insertion

1:
2:
3:
4:
5:
6:
7:
8:
9:
10:

∃ c ∈ channel :
∧ c.dst = s
∧ c.type = M_Insertion
∧ sState[s] = S_Waiting
∧ IF InsertCT I(c.data[2], c.data[3]) T HEN

∧ RecvInadditionSend(c, [src (cid:55)→ s, dst (cid:55)→ c.data[1], type (cid:55)→ M_OK, data (cid:55)→ (cid:104) (cid:105)])
∧ UNCHANGED (cid:104) tempVars, organizationVars, serverVars, activityBlockchainVars (cid:105)

ELSE

∧ RecvInadditionSend(c, [src (cid:55)→ s, dst (cid:55)→ c.data[1], type (cid:55)→ M_NO, data (cid:55)→ (cid:104) (cid:105)])
∧ UNCHANGED (cid:104) tempVars, organizationVars, serverVars, activityBlockchainVars (cid:105)

17

A PREPRINT - MARCH 25, 2021

Figure 7: Access authorization workﬂow.

(v) Insertion: In this state, the Taxii server inserts the details received from an organization. If the insertion is successful,
the server returns a success message. Otherwise, the server returns a failed message. During the process, the server
remains in S_Waiting state.

(vi) ConﬁrmReceipt: The activity blockchain, similar to identity blockchain, conﬁrms and transfers a valid transaction
to blockTx, which is a compilation of veriﬁed transactions in the blocks. In this case, ATX_CYBER_THREAT is a valid
transaction that indicates a CTI record with an associated consumption and sharing policy transaction.

Listing 21 Conﬁrm Receipt

1:
2:
3:
4:
5:

∃ receiptT x ∈ atxPool :

∧ receiptT x.type = AT X_CY BER_T HREAT
∧ atxPool(cid:48) = atxPool \ {receiptT x}
∧ ablockT x(cid:48) = ablockT x ∪ {receiptT x}
∧ UNCHANGED (cid:104) tempVars, organizationVars, serverVars, commVars (cid:105)

(vii) Termination: Once the organization associates the policies with the CTI on the activity blockchain, the entire
process is terminated. Since no further changes are required, termination has no primed variables.

Listing 22 Termination

1:
2:

∧ ∀ o ∈ Organization : oState[o] = O_Final
∧ UNCHANGED vars

5.4 Access authorization speciﬁcation

Finally, we formalize the access authorization process initiated by a consumer. The workﬂow involves interaction
between a consumer (C), a Taxii server (S), the activity blockchain, and the identity blockchain (Figure 7). InitConsumer,

18

Create BadgeOrganization EndatxPoolablockTxConfirm ReceiptActivity BlockchainRequest CTI Meta DataValidate RequestTaxii ServerEndSecure CommunicationitxPooliblockTxConfirm ReceiptIdentity BlockchainRequest TokenAccess ServerVerification FailedValidationA PREPRINT - MARCH 25, 2021

InitServer, InitActivityBlockchain, and InitIdentityBlockchain are the consumer, server, activity blockchain, and identity
blockchain variables’ initial values. The channel variable and state-space speciﬁcation remain unchanged. The possible
transitions from the initial state are described in the following equation:

Listing 23 State Space

1: Next (cid:44)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:

Spec (cid:44)

∨ Setup
∨ ∃ c ∈ Consumer :

∨ Preparation(c) ∨ RequestMetaData(c)
∨ CreateBadge(c) ∨ RequestToken(c)
∨ AccessServer(c) ∨Veri f icationFailed(c)
∨ AccessCT I(c)

∨ ∃ s ∈ Server:

∨ ValidateRequest(s)

∨ ICon f irmReceipt
∨ ACon f irmReceipt
∨ Termination

Init ∧ ∗ [Next]vars ∧ W F_vars(Next)

The consumer is interested in accessing CTI present in the Taxii server. The consumer begins with a C_Waiting and
then transits through C_RequestMetaData, C_CreateBadge, C_RequestToken, C_AccessServer, C_ValidateAccess,
C_Final. In the end, the consumer can either access the CTI record or the access request is rejected.

(i) RequestMetaData: The consumer begins searching and accessing the metadata of the CTI on the activity blockchain.
The consumer then saves the information to be used for further requests. Once done, the system transits to
C_CreateBadge where the consumer creates a badge for requesting the access token.

Listing 24 Request Meta Data

1:
2:
3:
4:
5:
6:
7:
8:

∃ tx ∈ ablockT x :

∧ cState[c] = C_RequestMetaData
∧ tx.type = AT X_CY BER_T HREAT
∧ tx.who = ORGANIZAT ION
∧ ctiIn f o(cid:48) = [ ctiIn f o EXCEPT ![c] = tx.data ]
∧ cState(cid:48) = [ cState EXCEPT ![c] = C_CreateBadge ]
∧ UNCHANGED (cid:104) cBu f f er, accessPool, accessSource, serverVars,
commVars, identityBlockchainVars, activityBlockchainVars (cid:105)

(ii) CreateBadge: Next, the consumer creates the badge on the identity blockchain. The blockchainIdentityTxn function
abstracts the process of sending a transaction to the identity blockchain. Once the badge is created, the system transits
to C_RequestToken state.

Listing 25 Create Badge

1:
2:
3:
4:
5:
6:
7:
8:
9:

∧ cState[c] = C_CreateBadge
∧ LET

bgid == BADGEID
badge == BADGE

IN

blockchainIdentityT xn(c, bgid, badge)

∧ cState(cid:48) = [ cState EXCEPT ![c] = C_RequestToken ]
∧ UNCHANGED (cid:104) ctiIn f o, iblockT x, cBu f f er, accessPool, accessSource,
serverVars, commVars, activityBlockchainVars (cid:105)

(iii) RequestToken: Once the badge is created, the consumer requests the access token required to access the CTI by
presenting the badge created in the previous setup. The access token request is sent to the activity blockchain, which
validates the badge details by requesting veriﬁcation from the identity blockchain. On successful validation, the access
token is created on the activity blockchain, and its reference is returned to the consumer. The system then transits to
C_AccessServer state. In case the validation fails, the system transits to C_Final and the system terminates.

19

A PREPRINT - MARCH 25, 2021

Listing 26 Request Token

1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:

∧ cState[c] = C_RequestToken
∧ LET

bgid == BADGEID

IN

IF ValidateBadge(bgid) T HEN

∧ blockchainActivityT xn(c, bgid)
∧ cState(cid:48) = [ cState EXCEPT ![c] = C_AccessServer ]
∧ UNCHANGED (cid:104) ctiIn f o, ablockT x, cBu f f er, accessPool, accessSource,
serverVars, commVars, identityBlockchainVars (cid:105)

ELSE

∧ cState(cid:48) = [ cState EXCEPT ![c] = C_Final ]
∧ UNCHANGED (cid:104) ctiIn f o, cBu f f er, accessPool, accessSource,
serverVars, commVars, activityBlockchainVars, identityBlockchainVars (cid:105)

(iv) AccessServer: With the token reference issued on the activity blockchain, the consumer requests access to the CTI
identiﬁed by the id CID. The system then transits to C_ValidateAccess state where the Taxii server validates the access
token.

Listing 27 Access Server

1:
2:
3:
4:
5:
6:
7:
8:
9:
10:

∃ s ∈ Server :

∧ cState[c] = C_AccessServer
∧ LET

token == T OKEN
cid == CID

IN

Send([src (cid:55)→ c, dst (cid:55)→ s, type (cid:55)→ M_Access, data (cid:55)→ (cid:104) token, cid (cid:105)])

∧ cState(cid:48) = [ cState EXCEPT ![c] = C_ValidateAccess ]
∧ UNCHANGED (cid:104) ctiIn f o, ablockT x, cBu f f er, accessPool, accessSource,
serverVars, atxPool, identityBlockchainVars (cid:105)

(v) VeriﬁcationFailed: The system transits to this state if the token veriﬁcation fails. The system then transits to C_Final
state, and the system terminates.

Listing 28 Veriﬁcation Failed

1:
2:
3:
4:
5:
6:

∃ ch ∈ channel :
∧ ch.dst = c
∧ ch.type = M_NO
∧ cState(cid:48) = [ cState EXCEPT ![c] = C_Final ]
∧ UNCHANGED (cid:104) tempVars, cBu f f er, serverVars, commVars,
identityBlockchainVars, activityBlockchainVars (cid:105)

(vi) AccessCTI: The system transits to this state if the token veriﬁcation succeeds. The system then allows the consumer
to access the CTI record, and the system transits to C_Final state and terminates.

Listing 29 Access CTI
∃ ch ∈ channel :
∧ ch.dst = c
∧ ch.type = M_OK
∧ cState(cid:48) = [ cState EXCEPT ![c] = C_Final ]
∧ UNCHANGED (cid:104) tempVars, cBu f f er, serverVars, commVars,
identityBlockchainVars, activityBlockchainVars (cid:105)

1:
2:
3:
4:
5:
6:

The Taxii server is responsible for validating the access token sent by the consumer with the access request. The server
remains in S_Waiting state, waiting for other access requests from other consumers.

(vii) ValidateRequest: In this state, the Taxii server validates the consumer’s access request based on the access token
reference sent by the consumer. The veriﬁcation process is abstracted by the VerifyAccess function. If the veriﬁcation is

20

successful, the server returns a success message. Otherwise, the server returns a failed message. During the process, the
server remains in S_Waiting state.

A PREPRINT - MARCH 25, 2021

Listing 30 Validate Request

1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:

∃ c ∈ channel :
∧ c.dst = s
∧ c.type = M_Access
∧ sState[s] = S_Waiting
∧ IF Veri f yAccess(c.data[1], c.data[2]) T HEN

RecvInadditionSend(c, [src (cid:55)→ s, dst (cid:55)→ c.src, type (cid:55)→ M_OK, data (cid:55)→ (cid:104) (cid:105)])

ELSE

RecvInadditionSend(c, [src (cid:55)→ s, dst (cid:55)→ c.src, type (cid:55)→ M_NO, data (cid:55)→ (cid:104) (cid:105)])

∧ sState(cid:48) = [ sState EXCEPT ![s] = S_Waiting ]
∧ UNCHANGED (cid:104) tempVars, consumerVars, sBu f f er,
identityBlockchainVars, activityBlockchainVars (cid:105)

(viii) IConﬁrmReceipt: ITX_BADGE is a valid transactions that indicates the badge creation on the identity blockchain.
The consumer then uses the created badges to request the access token.

Listing 31 Conﬁrm Receipt for Identity Blockchain

1:
2:
3:
4:
5:
6:

∃ receiptT x ∈ itxPool :

∧ receiptT x.type = IT X_BADGE
∧ itxPool(cid:48) = itxPool \ {receiptT x}
∧ iblockT x(cid:48) = iblockT x ∪ {receiptT x}
∧ UNCHANGED (cid:104) consumerVars, serverVars, commVars, accessPool,
accessSource, ctiIn f o, activityBlockchainVars (cid:105)

(ix) AConﬁrmReceipt: In this case, ATX_ACCESS_TOKEN is a valid transaction that indicates a CTI access token
granted to the consumer to access the CTI record on the Taxii server.

Listing 32 Conﬁrm Receipt for Activity Blockchain

1:
2:
3:
4:
5:
6:

∃ receiptT x ∈ atxPool :

∧ receiptT x.type = AT X_ACCESS_T OKEN
∧ atxPool(cid:48) = atxPool \ {receiptT x}
∧ ablockT x(cid:48) = ablockT x ∪ {receiptT x}
∧ UNCHANGED (cid:104) consumerVars, serverVars, commVars, accessPool,
accessSource, ctiIn f o, identityBlockchainVars (cid:105)

(x) Termination: Once the consumer request to access a CTI is either granted or rejected, and the entire process is
terminated. Since no further changes are required, termination has no primed variables.

Listing 33 Termination

1:
2:

∧ ∀ o ∈ Organization : oState[o] = O_Final
∧ UNCHANGED vars

5.5 Model checking

The TLC model evaluation involves parsing the state space to ﬁnd critical states, e.g., states leading to deadlock
conditions or violation of invariants. We performed simulation on the TLA+ model veriﬁcation tool to check the
proposed system’s correctness and the critical conditions. We ran the experiment on a Windows 10-based AMD Ryzen-7
octa-core machine with 16 GB RAM. The evaluation is performed for each of the workﬂows. The results are presented
in Table 3.

The table lists the different workﬂows involved in the proposal, from the organization registering to share the CTI to the
access authorization workﬂow. In case there are failures in the workﬂow due to validation error, a separate entry is
added to the table with relevant details. The table lists the details like depth in the state-space the simulation tool went
to, the number of states discovered, the number of distinct states out of those, and the errors encountered. We found that

21

A PREPRINT - MARCH 25, 2021

the system always resulted in a consistent and safe state. Based on the results presented in the Table 3, we can conclude
that the proposed scheme is error-free.

6 Discussion

In this section, we evaluate the privacy and accountability guarantees of the proposed solution. Next, we present the
performance evaluation of the proposed solution and identify its overheads. We suggest quantitative measures to reduce
the overhead. Finally, we describe additional blockchain mechanisms to improve the sharing of CTI.

6.1 Security analysis

Blockchain-based access control provides organizations with complete control over their data. The blockchain
ensures that only organizations that comply with the sharing policy can access the data. We evaluate the privacy and
accountability guarantees of the proposed framework using the following hypotheses.

Hypothesis H1: It is impossible to correlate between proﬁle and activity without compromising the whole network.
Based on the threat sharing framework, the proﬁle by itself does not expose any sensitive information. The mapping
between the proﬁle and the Activity Blockchain Network activity is required to extract legible information about
the sharing organization. Thus, a malicious actor needs to either expose the correlation between proﬁle and Activity
Blockchain Network activity. To achieve this, he/she needs to compromise both the Identity Blockchain Network
and the Activity Blockchain Network as with access to the Identity Blockchain Network one can access the proﬁle
but not the activity while with access to the Activity Blockchain Network one can only see the activity but no proﬁle
information.

Access to Identity Blockchain Network is regulated by the consortium of registrars who store the mapping between the
proﬁle and the pseudo-identity on the Identity Blockchain Network (refer Table 2). Thus, to compromise the Identity
Blockchain Network, one needs to compromise a two-thirds majority of registrars. This is not easy to achieve as the
registrars have a stake in the platform’s proper functioning. Also, access to Activity Blockchain Network is restricted
by the blockchain-based access control.

Hypothesis H2: A misbehaving organization can be identiﬁed and exposed. The Activity Blockchain Network logs
the activity of an organization on the Activity Blockchain Network using the pseudo-identity. Thus, the sharing
organization can audit the activity on their data. In case of unauthorized access, the sharing organization can report the
pseudo-identity of the consuming organization. The mapping between the real identity and pseudo-identity exists on
the Identity Blockchain Network. Thus, the consortium of registrars can reach a consensus to expose the misbehaving
organization’s real identity.

6.2 Performance

The main overhead of decoupling the Identity Blockchain Network and the Activity Blockchain Network is proﬁle
badge (PB) generation on the Identity Blockchain Network (see stage 1 in the authorization process 4.5). The activity
on the Activity Blockchain Network is similar to other blockchain-based access control solutions (except the queries for
the PB from the Identity Blockchain Network). Assuming that a user uses N different temporary pseudo-identity and
on an average user use k PBs between proﬁle changes, the user generates k ∗ N new badges. To minimize the badge
generation overhead, we can minimize the value of k and N. To reduce the number of PBs, we should aim to reuse them
PBs. This is why we suggest that organizations should reuse other organizations’ policies. Also, to reduce the value of
N, we need to establish a trade-off between privacy (num of temporary pseudo-identity) and overhead (k ∗ N).

Table 3: TLA+ simulation results.

Situation

Depth

Registration
Registration (failure)
Policy creation
CTI creation
Access authorization
Access authorization
(badge veriﬁcation failure)

13
6
14
21
11
7

States Found Distinct
States
25
6
287
1,922
22
8

57
8
660
8,547
44
11

Errors

0
0
0
0
0
0

22

A PREPRINT - MARCH 25, 2021

6.3 Additional blockchain mechanisms

Reputation contract (RPC). This contract maps each organization’s blockchain address identity with a reputation
proﬁle. The reputation proﬁle can be a single reputation score or can be a complex multi-dimensional proﬁle. The RC
determines an organization’s reputation proﬁle according to the reputation rates of other organizations in the network.
There are many reputation systems in the literature (e.g., [47, 48]) applicable for the proposed solution. By integrating
this contract with the system, an organization can incorporate organizations’ reputation proﬁle within their consumption
and sharing policy. For example, organizations can deﬁne rules, like only organizations with a reputation score higher
than some threshold are allowed to see their data. Alternatively, an organization can share information with top analysts.

Automation via legal contract. In many cases, threat sharing may involve a legal agreement between the CTI producer
and consumer. Today, such an agreement requires a pre-established relationship between the CTI producer and consumer,
which contradicts the TRADE concept of exchanging threat information anonymously and on the ﬂy. To address
this challenge, a legal contract mechanism can be incorporated in TRADE. This blockchain mechanism regulates the
fulﬁllment of legal agreements regarding CTI exchange. When sharing information, the CTI producer can tag CTI with
a legal contract specifying the term of use the data consumer must agree before consuming the subject CTI. This legal
contract ensures that a digital signature of any consumer is stored on the blockchain ledger. We suggest leveraging the
information exchange policy framework [49] for formalizing the term of use.

Encouraging threat sharing (fairness). When threat intelligence is shared anonymously, and organizations can opt
into information-sharing coalitions at will, how might a sharing system avoid the potential "free loading" problem?
What incentive is there for a threat analyst to reciprocate and share data in a world where no one knows whether
or not they are sharing? TRADE solves this problem by rewarding karma for information shared. To receive and
consume threat intelligence data, organizations must spend the karma they have earned. Moreover, if organizations are
incentivized to contribute threat intelligence to consume threat intelligence, what prevents them from anonymously
contributing data of questionable quality? In TRADE, each network member might gain or lose a reputation based
on the quality of the data they contribute. When a member spends karma to receive threat intelligence data that turns
out to be ﬂawed or misrepresented, they can rate the contribution. Organizations can earn karma discounts usable for
future threat intelligence acquisition by providing a rating upon the information they have received. If an organization’s
reputation falls too low because it has repeatedly submitted low-quality data, it will not access critical threat intelligence.
This feature of TRADE ensures data reliability by isolating non-contributors. In this, TRADE creates a non-monetary,
ﬁduciary data exchange resembling a market based on rewarded goodwill.

7 Conclusions and Future Work

In this paper, we presented TRADE, a blockchain-based platform for sharing cyber-threat intelligence across a
community of diverse organizations. The proposed solution provides a peer-to-peer, privacy-preserving, transparent, and
accountable threat sharing network where the information producer has complete control over her threat information.
TRADE provides a distributed network that is not relying on a single trusted third party. TRADE can be easily integrated
within existing threat sharing standards (such as TAXII and OpenDXL), thereby facilitating easy technology adaptation
within the current organizations’ threat sharing workﬂow. This paper aims to trigger collaboration among academic and
industrial partners to make TRADE a foundation for a community-based next-generation platform for threat sharing.

References

[1] Travelers. 2019 travelers risk index: Cyber. Available at https://www.travelers.com/resources/risk-

index/2019-cyber-infographic (2020/02/03).

[2] Alan Platt. The increasing sophistication of cyber-attacks means stronger strategies are needed in ﬁnancial organ-
isations. Available at https://www.itproportal.com/features/the- increasing- sophistication-
of- cyber- attacks- means- stronger- strategies- are- needed- in- financial- organisations/
(2020/02/03).

[3] Accenture Security. Cyber threatscape report. Available at https://www.accenture.com/_acnmedia/pdf-

107/accenture-security-cyber.pdf (2020/02/03).

[4] Antoine Lemay, Joan Calvet, François Menet, and José M Fernandez. Survey of publicly available reports on

advanced persistent threat actors. Computers & Security, 72:26–59, 2018.

[5] Rebekah Brown and Robert M Lee. The evolution of cyber threat intelligence (cti): 2019 sans cti survey. SANS

Institute. February, 2019.

23

A PREPRINT - MARCH 25, 2021

[6] Giuseppe Settanni, Yegor Shovgenya, Florian Skopik, Roman Graf, Markus Wurzenberger, and Roman Fiedler.
Acquiring cyber threat intelligence through security information correlation. In 2017 3rd IEEE International
Conference on Cybernetics (CYBCONF), pages 1–7. IEEE, 2017.

[7] Wiem Tounsi and Helmi Rais. A survey on technical threat intelligence in the age of sophisticated cyber attacks.

Computers & security, 72:212–233, 2018.

[8] Christopher Johnson, Mark Badger, David Waltermire, Julie Snyder, and Clem Skorupka. Guide to cyber threat

information sharing. Technical report, National Institute of Standards and Technology, 2016.

[9] FS-ISAC. Available at https://www.fsisac.com (2020/02/03).
[10] James P Farwell and Rafal Rohozinski. Stuxnet and the future of cyber war. Survival, 53(1):23–40, 2011.
[11] Nikos Virvilis and Dimitris Gritzalis. The big four-what we did wrong in advanced persistent threat detection? In

2013 International Conference on Availability, Reliability and Security, pages 248–254. IEEE, 2013.

[12] Sushil Jajodia, Peng Liu, Vipin Swarup, and Cliff Wang. Cyber situational awareness. Springer, 2009.
[13] US CERT. Available at https://www.us-cert.gov/ (2020/02/03).
[14] P Mel, T Grance, et al. Nvd national vulnerability database. National Institute of Standards and Technology,

http://nvd. nist.gov, 2007.

[15] P Mell, K Scarfone, and S Romanosky. Nist ir 7435: The common vulnerability scoring system (cvss) and its

applicability to federal agency systems. National Institute of Standards and Technology, 10, 2007.

[16] MITRE Common Weakness Enumeration. Available at http://cwe.mitre.org/ (2020/02/03).
[17] Common Vulnerabilities and Exposures. Available at http://cve.mitre.org/ (2020/02/03).
[18] BT Security Threat Monitoring. Available at https://www.globalservices.bt.com/btfederal/en/

products/security-threat-monitoring (2020/02/03).

[19] CIF: The Collective Intelligence Framework. Available at https://code.google.com/p/collective-

intelligence-framework/ (2020/02/03).

[20] Xiaokui Shu, Danfeng Yao, and Elisa Bertino. Privacy-preserving detection of sensitive data exposure. IEEE

transactions on information forensics and security, 10(5):1092–1103, 2015.

[21] Benjamin CM Fung, Ke Wang, Rui Chen, and Philip S Yu. Privacy-preserving data publishing: A survey of recent

developments. ACM Computing Surveys (Csur), 42(4):1–53, 2010.

[22] David W Chadwick, Wenjun Fan, Gianpiero Constantino, Rogério De Lemos, Francesco Di Cerbo, Ian Herwono,
Mirko Manea, Paolo Mori, Ali Sajjad, and Xiao-Si Wang. A cloud-edge based data security architecture for
sharing and analysing cyber threat information. Future Generation Computer Systems, 102:710–722, 2020.
[23] EU PROTECTIVE project. Available at https://cordis.europa.eu/project/rcn/202674_en.html

(2020/02/03).

[24] TradeLens Documentation. Available at https://docs.tradelens.com/ (2020/02/03).
[25] Kathleen M Moriarty. Incident coordination. IEEE Security & Privacy, 9(6):71–75, 2011.
[26] Claudio Caimi, Carmela Gambardella, Mirko Manea, Marinella Petrocchi, and Debora Stella. Legal and technical

perspectives in data sharing agreements deﬁnition. In Annual Privacy Forum, pages 178–192. Springer, 2015.

[27] R-CISC. Available at https://r-cisc.org (2020/02/03).
[28] Aafaf Ouaddah, Anas Abou Elkalam, and Abdellah Ait Ouahman. Fairaccess: a new blockchain-based access

control framework for the internet of things. Security and Communication Networks, 9(18):5943–5964, 2016.

[29] Oscar Novo. Blockchain meets iot: An architecture for scalable access management in iot. IEEE Internet of

Things Journal, 5(2):1184–1195, 2018.

[30] Nachiket Tapas, Giovanni Merlino, and Francesco Longo. Blockchain-based iot-cloud authorization and delegation.
In 2018 IEEE International Conference on Smart Computing (SMARTCOMP), pages 411–416. IEEE, 2018.
[31] Jason Paul Cruz, Yuichi Kaji, and Naoto Yanai. Rbac-sc: Role-based access control using smart contract. Ieee

Access, 6:12240–12251, 2018.

[32] Luca Ferretti, Francesco Longo, Michele Colajanni, Giovanni Merlino, and Nachiket Tapas. Authorization
transparency for accountable access to iot services. In 2019 IEEE International Congress on Internet of Things
(ICIOT), pages 91–99. IEEE, 2019.

[33] Damiano Di Francesco Maesa, Paolo Mori, and Laura Ricci. A blockchain based approach for the deﬁnition of

auditable access control systems. Computers & Security, 84:93–119, 2019.

24

A PREPRINT - MARCH 25, 2021

[34] Eleftherios Kokoris-Kogias, Enis Ceyhun Alp, Sandra Deepthy Siby, Nicolas Gailly, Philipp Jovanovic, Linus
Gasser, and Bryan Ford. Hidden in plain sight: Storing and managing secrets on a public ledger. IACR Cryptology
ePrint Archive, 2018:209, 2018.

[35] Gauhar Ali, Naveed Ahmad, Yue Cao, Muhammad Asif, Haitham Cruickshank, and Qazi Ejaz Ali. Blockchain
based permission delegation and access control in internet of things (baci). Computers & Security, 86:318–334,
2019.

[36] Yan Zhang, Bing Li, Ben Liu, Jiaxin Wu, Yazhou Wang, and Xia Yang. An attribute-based collaborative access

control scheme using blockchain for iot devices. Electronics, 9(2):285, 2020.

[37] Sheng Gao, Guirong Piao, Jianming Zhu, Xindi Ma, and Jianfeng Ma. Trustaccess: A trustworthy secure
ciphertext-policy and attribute hiding access control scheme based on blockchain. IEEE Transactions on Vehicular
Technology, 2020.

[38] Sara Rouhani and Ralph Deters. Blockchain based access control systems: State of the art and challenges. In

IEEE/WIC/ACM International Conference on Web Intelligence, pages 423–428, 2019.

[39] Eugene H. Spafford. The internet worm program : An analysis, technical report, purdue university department of

computer sciences, 1988.

[40] William Scherlis. Darpa establishes computer emergency response team, darpa press release, december 6, 1988.
The White House, Washington, DC (fas.
[41] William Clinton.

Presidential decision directive 63.

org/irp/offdocs/pdd/pdd-63. htm), 1998.

[42] Damiano Di Francesco Maesa, Paolo Mori, and Laura Ricci. Blockchain based access control services. In 2018
IEEE International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications
(GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData),
pages 1379–1386. IEEE, 2018.

[43] Anne Anderson, Anthony Nadalin, B Parducci, D Engovatov, H Lockhart, M Kudo, P Humenn, S Godik,
S Anderson, S Crocker, et al. extensible access control markup language (xacml) version 1.0. OASIS, 2003.
[44] Julie Connolly, Mark Davidson, and Charles Schmidt. The trusted automated exchange of indicator information

(taxii). The MITRE Corporation, pages 1–20, 2014.

[45] Leslie Lamport. Specifying systems: the TLA+ language and tools for hardware and software engineers. Addison-

Wesley Longman Publishing Co., Inc., 2002.

[46] Tianxiang Lu, Stephan Merz, and Christoph Weidenbach. Towards veriﬁcation of the pastry protocol using tla+.

In Formal Techniques for Distributed Systems, pages 244–258. Springer, 2011.

[47] Ferry Hendrikx, Kris Bubendorfer, and Ryan Chard. Reputation systems: A survey and taxonomy. Journal of

Parallel and Distributed Computing, 75:184–197, 2015.

[48] Seyed Asgary Ghasempouri and Behrouz Tork Ladani. Modeling trust and reputation systems in hostile environ-

ments. Future Generation Computer Systems, 99:571–592, 2019.

[49] FIRST.org.

Information exchange policy (iep) – version 1.0. Available at https://www.first.org/iep/

(2020/02/03).

25

Appendix

Two representative snapshots from a running instance of the TRADE implementation are shown herein. Figure 8
captures the TRADE dashboard and Figure 9 captures a collaborative STIX report shown on TRADE’s user interface.

A PREPRINT - MARCH 25, 2021

Figure 8: TRADE user interface.

Figure 9: Collaborative STIX report on TRADE user interface.

26

