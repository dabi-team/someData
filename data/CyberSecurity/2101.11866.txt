1
2
0
2

n
a
J

8
2

]

R
C
.
s
c
[

1
v
6
6
8
1
1
.
1
0
1
2
:
v
i
X
r
a

An Analytics Framework for Heuristic Inference
Attacks against Industrial Control Systems

Taejun Choi
The University of Queensland
Brisbane, Australia
taejun.choi@uq.edu.au

Guangdong Bai
The University of Queensland
Brisbane, Australia
g.bai@uq.edu.au

Ryan K L Ko
The University of Queensland
Brisbane, Australia
ryan.ko@uq.edu.au

Naipeng Dong
The University of Queensland
Brisbane, Australia
n.dong@uq.edu.au

Wenlu Zhang
The University of Queensland
Brisbane, Australia
wenlu.zhang1@uq.net.au

Shunyao Wang
The University of Queensland
Brisbane, Australia
shunyao.wang@uq.net.au

Abstract—Industrial control systems (ICS) of critical infras-
tructure are increasingly connected to the Internet for remote
site management at scale. However, cyber attacks against ICS
– especially at the communication channels between human-
machine interface (HMIs) and programmable logic controllers
(PLCs) – are increasing at a rate which outstrips the rate of
mitigation.

In this paper, we introduce a vendor-agnostic analytics frame-
work which allows security researchers to analyse attacks against
ICS systems, even if the researchers have zero control au-
tomation domain knowledge or are faced with a myriad of
heterogenous ICS systems. Unlike existing works that require
expertise in domain knowledge and specialised tool usage, our
analytics framework does not require prior knowledge about ICS
communication protocols, PLCs, and expertise of any network
penetration testing tool. Using ‘digital twin’ scenarios comprising
industry-representative HMIs, PLCs and ﬁrewalls in our test lab,
our framework’s steps were demonstrated to successfully imple-
ment a stealthy deception attack based on false data injection
attacks (FDIA). Furthermore, our framework also demonstrated
the relative ease of attack dataset collection, and the ability to
leverage well-known penetration testing tools.

We also introduce the concept of ‘heuristic inference attacks’,
a new family of attack types on ICS which is agnostic to
PLC and HMI brands/models commonly deployed in ICS. Our
experiments were also validated on a separate ICS dataset
collected from a cyber-physical scenario of water utilities. Finally,
we utilized time complexity theory to estimate the difﬁculty
for the attacker to conduct the proposed packet analyses, and
recommended countermeasures based on our ﬁndings.

Index Terms—Industrial control system (ICS) security, critical
infrastructure, security analytics framework, Man-in-the-Middle
attacks, PLC security, cybersecurity, cyber resilience, Opera-
tional Technology (OT)

I. INTRODUCTION

Modern power grids, water treatment/distribution systems,
and automated manufacturing systems are some of the main
critical infrastructure sectors adopting industrial control sys-
tems (ICS) for automation and remote plant management ca-
pabilities. In the recent decade, ICS are increasingly connected
to the Internet to achieve scale and management efﬁciency, as
compared to traditional ICS management which do not lever-

age Internet connectivity. As a result, several ICS equipment
which were previously not designed for the threat landscape
of the Internet are now increasingly exposed to risks of cyber
attacks.

These risks affect business continuity requirements and may
have safety implications. Since they were not designed or
deployed with Internet connectivity in the ﬁrst place, legacy
and deployed ICS are mostly not ready for this increasing
trend in ICS security threats. Worse,
to secure the ICS
equipment (e.g. programmable logic controllers (PLCs)), one
would usually require additional expertise about the targets
and specialized/bespoke systems set up before one can analyse
or test them. Such a resource-consuming process has largely
hindered effective security research, especially for security
researchers who lack prior knowledge about the ICS system
under analysis.

To allow security testing to catch up with the rate of threats
to ICS, having effective frameworks for stakeholders (e.g.
asset/equipment owners) and security researchers to analyse
and test for security vulnerabilities without
the need for
speciﬁc automation or conﬁguration domain knowledge of
heterogenous equipment would be desirable.

An emerging research area in ICS security is threat de-
tection. In the case of detection approaches, there have been
recurring obstacles (re)producing or obtaining attack data. For
example, research conducted by Hadziosmanovi´c et al. [1] and
Lan et al. [2] are examples of researchers producing attack
data to evaluate their suggested approaches. Nevertheless,
reproducing data based on their attack techniques may lead
to additional research activities and obstacles for newcomers
in this area. In other cases where attack datasets are shared
among multiple institutions or researchers, the lack of knowl-
edge on the speciﬁc system architecture and attack scenarios in
which the datasets were produced signiﬁcantly limit research
activities and research translation potential.

To mitigate the above gaps and provide a solution for
acquiring attack datasets, we propose an analytics framework.
While the framework is extensible, in this paper, we will

 
 
 
 
 
 
focus on the false data injection attack (FDIA) [3], [4] on
ICS network packets to illustrate its capabilities. The proposed
framework could be easily applied and reproduced using well-
known publicly-available network security assessment tools,
without any prior knowledge on the speciﬁc PLC models and
ICS under analysis.

We coin our testing attack type as a ‘heuristic inference
attack’ – since attackers will be able to infer PLC signals com-
mands through a range of heuristic-driven analysis approaches
over our framework. To carry out
the heuristic inference
attack, the network request and response packets from the
Human-Machine Interfaces (HMI) and PLCs are sorted by
their periodical sending order, and then classiﬁed according to
their packet lengths. The reason we have chosen packet length
as a criterion for classiﬁcation is out of our observation that
similar-length data packets are used for the communication
between HMI and PLCs. In addition, we discovered that some
particular query packets from HMI have been sent periodically
and the response packets from PLCs against a particular
query packet have predictably similar lengths. Our proposed
framework was based on these discovered traits and features
of PLC and HMI communication.

The main contributions of this research are:
• We propose an analytics framework to provide solutions
to ease attack dataset collection. Our proposed method is
a stealthy deception attack based on FDIA and it could
be conducted using well-known penetration testing tools.
• We introduce ‘heuristic inference attacks’, a new family
of attack types on ICS which is agnostic to PLC and HMI
brands/models commonly deployed in ICS.

• We estimate the difﬁculty for the attacker to conduct the
proposed packet analysis. The time complexity theory is
used to support this difﬁculty assessment.

• Some recommendations of countermeasures are proposed

based on the ﬁndings of our research.

In Section II, background materials are presented and we
provide the design of our framework in Section III. We discuss
case studies including an explanation of the used simulation
system in Section IV. Result analyses and countermeasures are
discussed in Section V and Section VI shows related work. We
then conclude and propose future work in Section VII.

II. BACKGROUND

From a network perspective, ICS are usually distributed into
four levels: Corporate Network (Level 3), Supervisory Control
LAN (Level 2), Control Network (Level 1), and I/O Network
(Level 0). All levels cooperate together to control industrial
processes [5]. Figure 1 shows a prevalent ICS architectures
stemming from the ANSI/ISA-99 reference model [5]. Level 3
of the model is part of the traditional ‘Information Technology
(IT)’ which reports process data from lower levels to the
corporate network and shares corporate data with the entire
system, while Level 2 to 0 are classiﬁed as the ‘Operational
Technology (OT)’ which monitors and controls the actual
industrial components. In particular, Level 1 consists of PLCs
which are programmed to control production processes and

Fig. 1.

ICS Reference Model from ANSI/ISA-99 [5]

send obtained data from the I/O network (Level 0) to the
managing components at the supervisory control LAN (Level
2) as described in [6]. The HMI, Historian database, and
Engineering Workstation at Level 2 are components of the
control center for monitoring and managing the OT levels.

Among the four network levels, the network communica-
tion between Level 2 and 1 is the focus of our analysis
and the exploitation target/scope of this research, since the
communication channel between Level 2 and 1 is a necessary
pathway of network attack for adversaries. For Level 3, since
the approach of attacking the OT network from the IT network
has been developed by Klick et al. [7], it is out of scope of
this research. In the case of attacking Level 0, attackers are
unable to access the devices in the I/O Network or Control
System without physical access to them. More importantly,
the gained data from I/O devices, such as sensors or actuators,
are delivered to PLCs, and then passed to the control center.
Therefore, a malicious accessor of the OT network is able
to gather the level 0 data from the reported packets. Thus,
attacking Level 0 has been implicitly included. Contrary to
previous studies which focused on communications within
the same network level, our approach is more reﬂective of
real-world risks as we focus on the communication channel
between HMI in Level 2 and PLCs in Level 1.

Unlike existing works that require expertise in domain
knowledge and tool usage, our framework does not require
prior knowledge about ICS communication protocols, PLCs,
and expertise of any network penetration testing tool. For
example, the analysis proposed by Bernieri et al. [8] requires
knowledge about the ICS systems’ architecture under analysis
and their relevant communication protocols. Similarly,
in-
house tools have been used for [9]. Notably, some tools utilized
for [10] are not available any more. All of these increase

the complexity in producing attack data on ICS network for
security research. From a security assessment perspective,
choosing the right tools for a particular attack scenario is the
ﬁrst hurdle, and the lack of experience using the chosen tools is
the second obstacle. To reduce these obstacles, our framework
extensively uses off-the-shelf tools that are publicly available
and well documented. In addition, our proposed framework
is comprehensive enough to enable analysts without much
expertise to conduct them. It further addresses the following
two main challenges in communication protocol analyses:

• Figuring out meaningful network packets or protocols.
This is challenging because the captured packets from
the OT network are mixed for different usage.

• Choosing the right data ﬁeld of the chosen protocol
packets to analyse, as the potential researchers might not
have prior knowledge or expertise of ICS.

A detailed approach to handle these two challenges are in-
troduced in Section IV. We estimate that our framework will
be straightforward for average-skilled researchers to use (see
Section V).

III. DESIGN OF ANALYTICS FRAMEWORK

In this section, we introduce our proposed analytics frame-
work, and start by discussing the threat model. A threat
modelling of ICS was conducted to decide the research ar-
eas related to the appropriate tools used for conducting the
experiment. Following that, we discuss how we applied our
heuristic inference method – which has been well developed
in web security domain [11] – into ICS protocols to address
the aforementioned research gaps.

A. Threat Model

Our threat model is summarised from our study of real-
world security incidents. Therefore, in this section, we ﬁrst
present the real-world threats against ICS, before presenting
our threat model.

1) Real Threats: One of the most prominent ICS breaches
by a disgruntled ex-contractor who was able to retain insider
access to ICS systems occurred in 2000 at the Maroochy
Water Services at Queensland’s Sunshine Coast in Australia.
According to [12], the communication channel using radio
links were lost, and pumps and alert alarms were not working
properly. In 2010, Stuxnet, a malicious worm targeting Iranian
nuclear enrichment plants was found to propagate through
USB devices or internal networks. As Langner mentioned in
[13], Stuxnet targeted particular Siemens PLC models to hijack
their control. In 2015, remote administration tools (RATs) and
levelled operating system or ICS client software were used
to manipulate victims’ systems. A 2016 alert [14] reported
that remotely accessed adversaries used these tools to cause
huge blackout incidents across Ukraine. FireEye reported in
2017 that the TRITON malware caused the failed state of
Safety Instrumented System (SIS) controllers. As stated by
[15], attackers started to attack the system from the IT level
using traditional ways then moved into the OT level.

2) Summarized Attack Model: Based on the above real-

world attack incidents, we classify three attack models.

a) Intrusion into OT network: To get into the OT net-
work, adversaries have used a variety of tactics, such as
malicious insiders, social engineering, and well-known attack
methods in the IT network, as described in [12], [13], [15]. In
addition, there were studies describing how researchers could
take over Level 3 to get into the Level 2 network as described
in [7]. Therefore, since we can assume that the researchers or
attackers are able to access the OT network in this research
because of the existence of related researches and attack cases,
attack scenarios for Level 3 are out of scope for this paper.

b) Man-in-the-Middle (MitM) Attacks: MitM attacks are
commonly found in communication channels [16]. As [13]
describes that the attacker intercept interactions between PLCs
and I/O modules, we assume that researchers are able to
capture network packets between the HMI server and PLCs by
MitM attacks. To commit this attack, attackers may deceive a
victim HMI server and PLCs using an attack machine. They
send some messages from the attack machine to victim PLCs
to make them sending packets for HMI to the attack machine.
The same deception technique could be used on a victim HMI.
c) Monitoring HMI: Like the real-world scenarios above,
we consider that attackers will be able to monitor HMI using
existing remote administration tools or ICS client software.
Controlling an HMI server enables an in-depth analysis of the
victim ICS by an attacker. As [17] mentioned, these tools are
widely used for monitoring the HMI in industrial networks.
The Ukraine blackout incident was an example of such attack.

B. Analytics Framework

After describing our attack models, we now propose analyt-
ics steps for conducting FDIA based on the modeled threats.
These steps are device-agnostic and applicable to various
types of PLCs manufactured by different vendors. We have
conducted the FDIA similar to the one presented in [9], but
with more sophisticated steps for achieving attack ﬂexibility.
1) Simple Analytics Framework: Figure 2(a) illustrates the
steps of our proposed analytics framework – from ‘Get into
OT network’ to ‘FDIA’. We brieﬂy describe each step below.
Details such as the speciﬁc tools used in each step can be
found in Section IV.
Framework Step 1 : ‘Getting into OT network’ is the ﬁrst
step of the analytics framework. We omit the detailed
method of how to conduct this step, and refer the reader
to the related research discussed in Section II for how to
inﬁltrate into the internal network of ICS.

Framework Step 2 : ‘ARP poisoning’ is a relatively straight-
forward way to execute the MitM attack as described
in [18]. Here, researchers are able to commit the MitM
attack between an HMI server and PLCs as a preliminary
stage for snifﬁng network packets.

Framework Step 3 : Gathering data by the ‘Packet snifﬁng’
step is the essential step for analysing the targeted ICS.
By using any publicly available network protocol anal-

110, 60, 70, 90, 110, 110, 60, 70, ...’. The captured data
packets could be sorted using this consistent feature of
ICS internal communication.

Inference Step 2 : ‘Grouping by the same packet length’.
Next, we take the network packet length as a characteris-
tic for grouping network packets between PLC and HMI,
similar to [2]. Our stragetery is based on the observation
of same-length network packets periodically sent inside
the OT network, as the example in the previous step
shows.

Inference Step 3 : ‘Extracting data ﬁeld’. As mentioned by
Farooq et al. [19], the Modbus/TCP protocol could be
used for communication between the corporate and con-
trol network, the HMI and the PLC use the TCP protocol
to encapsulate ICS protocol data (e.g., Modbus, Common
Industrial Protocol (CIP)). Therefore, the data ﬁeld, after
ﬁltering out the meaningless header ﬁeld from network
packets, is required.

Inference Step 4 : ‘Finding changed ﬁeld’. We observed that
the major part of the data ﬁeld of network packets have
the same packet length. We hypothesized that this fact
is related to the periodic transmission of same-length re-
quest/response network packets between HMI and PLCs.
Also, it is assumed that the variable ﬁeld might be related
request/response ﬁelds querying or reporting the status
of the I/O modules controlled by the PLC. Based on
this hypothesis, we conclude that the request/report value
from HMI or PLC can be stealthily manipulated by
ﬁguring out of the variable ﬁeld.

Inference Step 5 : ‘Finding the range of each variable and
sequential relationship’. After ﬁguring out the variable
data ﬁelds, conducting an investigation to ﬁnd the range
of each variable and sequential order of changes on them
is required. Since ICS is generally composed of multiple
devices, the system has a sequence order at the activation
of devices and the status change. If an adversary attacks
an ICS system by violating the order and the range for a
data ﬁeld, it will be identiﬁed by a monitoring agent of
the system. Therefore, this step is added to our framework
to achieve unnoticeable/undetectable FDIA.

IV. EXPERIMENTS AND CASE STUDIES

Our proposed analytics framework was tested at the UQ
Industry 4.0 Energy TestLab, our lab with a comprehensive
range of ‘digital twin’ systems mimicking real-world scenar-
ios. In this research, we focus on a scenario of a wind-farm
powering automation (represented by a barrel conveyor belt) in
a manufacturing plant (see Figures 3 and 4). The digital twin
scenario is conﬁgured by automation engineers and physically
hosted in our lab. In this section, we ﬁrst introduce our ‘digital
twin’ system, and then describe our experiment applying our
framework to the digital twin.

A. Digital Twin

The test digital twin system comprises of an HMI, two
PLCs, two network switches, and a ﬁrewall – representative

Fig. 2. Analytics Framework and Heuristic Inference Steps

yser, network packets between the HMI and PLCs could
be recorded into the researchers’ data storage.

Framework Step 4 : The ‘Packet classiﬁcation’ step deter-
mines the bundles of data packets for conducting detailed
investigations/analyses at the next step. The source IP
address and protocol types are the classiﬁcation criteria
considered ﬁrst.

Framework Step 5 : The ‘Heuristic inference’ step aids re-
searchers to derive the targeted data ﬁeld of network
packets for modifying the ﬁeld. Section III-B2 details our
approach.

Framework Step 6 : Through the ‘FDIA’ step, researchers
can produce fake network data attacking targeted HMI
servers or PLCs. Manipulating the data ﬁeld chosen to
inject false data is in this step. Methods to modify the data
ﬁeld have been presented by existing studies including
[3], [8], [9], and [18].

2) Heuristic Inference Steps: In this section, we detail our
heuristic inference approach. The commitment of heuristic
inference to ﬁgure out the data ﬁelds for manipulation is one
of the essential steps of FDIA, even though this step is usually
not easy for researchers who have no prior knowledge about
ICS and its protocols. We divided the inference approach into
the following steps.
Inference Step 1 : ‘Sorting periodical sending order’. As [2]
and [3] have pointed out, an HMI server sequentially
and periodically sends request packets with a particular
length for each purpose to a PLC. When replying to these
requests, PLCs would send packets with a speciﬁc length
to the server according to the request type. For instance,
if the sequence of request packet length is ‘100, 120, 80,
80, 50, 100, 120, 80, 80, 50, 100, ...’, then the PLC replies
to the server with packet lengths in order of ‘70, 90, 110,

Fig. 3. Simulation System Structure

components in most ICS scenarios. For the engineering work-
station, a Dell OptiPlex 7070 desktop with InTouch software
from Schneider Electric installed has been used for the im-
plementation of a HMI digital twin. Figure 4 shows screen
captures of the HMI. An Allen-Bradley CompactLogix 5370-
L3 simulates a conveyor belt and a Schneider Electric Modicon
M580 is used as a wind farm digital twin providing electricity
to the conveyor belt. To simulate the ﬁrewall, pfSense, an
open-source ﬁrewall, was ported onto a commercial system
board.

Fig. 4. Human Machine Interface

In order to achieve FDIA on our digital

twin system,

Fig. 5. PLCs: CompactLogix 5370-L3 and Modicon M580

multiple well-known security analysis tools were used:

• Kali Linux 2020.2: Kali Linux was chosen as our attacker
machine environment because various popular penetration
testing tools are integrated into it.

• Ettercap 0.8.3: Ettercap is a well-known MitM attack
tool and it has been used in multiple papers discussed
in Section VI. Etterﬁlter, a ﬁlter compiler for Ettercap
content, is used to manipulate the network packet contents
in real-time.

• Wireshark 3.2.4: A widely-used tool for capturing and

analyzing network packets.

• Kdiff3 0.9.98: Kdiff3 is an open-source software that can

be used to compare extracted packet contents.

B. Veriﬁcation: Application of the Analytics Framework

We discuss the application of each step of our framework

onto the digital twin systems:

Getting into OT network: Since this step is out of our scope,
we directly connected our attack machine to a local
network switch.

ARP poisoning: After launching Ettercap in attack machine,
we scanned the OT network and targeted HMI and PLCs
for the ARP-Poisoning attack. Then, a MitM attack was
started against the experimental system.

Packet snifﬁng: We captured all network packets coming into
the attack machine’s network card using Wireshark.
Packet classiﬁcation: The captured packets were sorted ac-
cording to the packets’ protocols: CIP for CompactLogix
5370-L3 and Modbus for Modicon M580. In the case of
other protocol packets, we ignored them as they did not
contain meaningful information for our scenario.

Sorting periodical sending order: We found that the HMI and
PLCs send sequences of request and response packets
that have the same packet length individually by CIP
and Modbus after inspecting captured network packets
for the same protocol packets. After that, we sorted the
sequences by protocols.

Grouping by the same packet length: We grouped the packet
lengths of request and response packets individually by

CIP and Modbus. After that, packets with the same length
in the same protocol were grouped.

Extracting data ﬁeld: After opening the captured packets
with Wireshark, we copied the ‘Modbus→Data’ ﬁeld and
‘CIP Class Generic→Command Speciﬁc Data→Data’
ﬁeld for each protocol into empty ﬁles. The created ﬁles
maintained by the groups were sorted by the packet length
at the previous stage.

Finding changed ﬁeld: By comparing the new ﬁles created
from the ‘Extraction of data ﬁeld’ step using Kdiff3, we
found the changing data ﬁeld. The compared ﬁles were
chosen from the same group.

Finding the range of each variable and sequential relation-
ship: By comparing each changeable ﬁeld with the same
ﬁeld of other packets within the same group, a range of
changeable bytes or ﬁeld can be ﬁgured out. In the case
of time sequence for changeable ﬁelds, we ﬁgured out it
by comparing the timestamps of the packets from other
groups.

False data injection attack: After setting up Etterﬁlter (one of
the functions within Ettercap) with targeted IP and port
information of HMI or PLCs for intercepting required
packets, we were able to manipulate the targeted change-
able data ﬁeld. To overcome the functional limitation of
Etterﬁlter, which can only replace an exact value with a
substitute, we developed a Python program that can be
called by the Etterﬁlter. The program keeps changing the
targeted data ﬁeld with prepared fake payloads within the
changeable range ﬁgured out from previous step. With
the combination of Etterﬁlter and the Python program,
the FDIA appears the same as the real data changes from
the perspective of the victim PLCs.

C. Findings

Through the process up to the step ‘Finding changed ﬁeld’
on the captured network data between the HMI and the PLCs,
we identiﬁed changeable data ﬁelds described in Table I. The
numbers in red in the table indicate the changeable ﬁelds,
while the rest of the numbers are ﬁxed all the time.

TABLE I
CHANGEABLE DATA FIELD

Origin
Rockwell
Rockwell
Rockwell
Rockwell
Rockwell
Rockwell
Schneider
Schneider
Schneider
Schneider
Schneider
HMI
HMI

Correlated payload bits
00020000...05001d...0600880b...0000080000
00020000...05001d...0600880b...0000080000
00020000...05001d...0600880b...0000080000
00020000...05001d...0600880b...0000080000
00020000...05001d...0600880b...0000080000
00020000...05001d...0600880b...0000080000
010044000000f77f41440e06
010044000000f77f41440e06
010044000000f77f41440e06
010044000000f77f41440e06
010044000000f77f41440e06
01010004004e03206b25000e00010001ff
01010004004e03206b25000e00010001fe

V. RESULT ANALYSIS AND COUNTERMEASURES

Table II shows the matching data ﬁelds for each HMI server
item. Using the same way in which an adversary could monitor
an exploited HMI server, we ﬁgured out these data ﬁelds by
monitoring HMI screen with data in Table I. As highlighted
in Section III-A2c, the high rate of RAT usage in the ﬁeld for
ICS implies high probability of a successful attack using our
methods.

A. Attack Result

Based on the ﬁndings described in Table I, we proceeded
with the two remaining steps in the framework. As a result, we
successfully manipulated the values in the highlighted ﬁelds
using Etterﬁlter. Table II shows the original and rigged value
of each component.

TABLE II
ATTACK RESULT - ORIGINAL AND RIGGED VALUES FOR EACH
COMPONENT

HMI components
System switch
Conveyor belt speed
Panel turbine speed
Place a new barrel
Brake light
Contractor light
Wind speed
Turbine speed

Original value
00020000
05000000
06000000
0200000003
010044...f77f41440e06
010044...f77f41440e06
010044...f77f41440e06
010044...f77f4144b80b

Modiﬁed Value
01020000
05001d00
0600ffff
0200010003
000044...f77f41440e06
010144...f77f41440e06
010050...f77f41440e06
010044...f77f41440000

The sequence changing of the data ﬁelds depicts two cases

(see Figure 4):
Case 1: System switch is turned ‘ON’.

‘Wind speed/Turbine speed/Panel turbine speed’→‘Brake
light’→‘Contractor light’→‘Place a new barrel’

Case 2: System switch is turned ‘OFF’.

‘Wind speed/Turbine speed/Panel turbine speed’→‘Brake
light’→‘Contractor light’

The ‘system switch’ is for turning ‘on/off’ our ICS HMI
system. As shown in Figure 4, the electricity for our conveyor
belt simulator (i.e. top half of Figure 4) is generated from our
wind-farm simulator (i.e. bottom half of Figure 4), the turning
‘On’ of the ‘system switch’ means that the wind turbine is
switched on and ready to generate electricity in the wind-
farm simulator. On the contrary, ’system switch’ ‘Off’ means
stopping the wind (and hence the electricity generation) for
the wind-farm.

The data ﬁeld change ranges are as follows:
• System switch: ‘0x00’ - ‘0x01’.
• Panel turbine speed: ‘0x0000’ - ‘0xb80b’.
• Turbine speed: ‘0xff39’ - ‘0x3b45’.
• Brake light: ‘0x00’ - ‘0x01’.
• Contractor light: ‘0x00’ - ‘0x01’.

From our
the
lower/upper bound numbers of the range and scale for each

framework, we managed to ﬁgure out

component from gathered network packets – simulating suc-
cessful heuristic inference. The lower bound number for each
data ﬁeld is the smallest value of the data ﬁeld we have
monitored from response packets for the HMI,
the upper
bound number is the biggest value, and scale stands for the
incremental step. Once an attacker knows these bounds, the
attacker can stealthily launch a range of deception attacks to
the HMI and the PLCs. For example, an attacker could alter
the appearance of the HMI displayed value of the turbine
speed even though the actual PLC linked to the wind turbine
is not turning. Another example is when the attacker can trick
the conveyor belt into moving faster than normal, thereby
disrupting the manufacturing process and causing the barrel
to spill over from the conveyor belt.

can see that packet analysis is a recursive process and thus
its time complexity depends on the three looping parameters:
(1) the number of PLCs (i.e., the number of IP Addresses),
(2) the number of different packet length, and (3) the number
of changeable data ﬁelds. These parameters are determined
by the speciﬁc implementation of each ICS. In practice, the
overall time consumption is not high, since each action takes
short
the
time due to existing tool support. In particular,
repetition number of ‘Grouping by the same packet length’ and
‘Comparison of extracted data ﬁeld’ depend on the number
of I/O modules per each PLC and the variation range of
I/O modules, hence the number for reiteration in practice
is typically low. Therefore, our proposed framework will be
feasible.

B. Time Complexity of Packet Analysis

To prove the reproducibility of the proposed heuristic infer-
ence attack procedure, we analysed the task complexity of
the proposed framework. High complexity tends to require
longer time and expertise for performing analyses – making
the procedure difﬁcult to reproduce. On the other hand, lower
complexity procedures are easier to reproduce.

We refer to [20] for the calculation for task complexity.
[20] used ‘size’ as a complexity dimension of the proposed
framework because the packet analysis task components are
sorting and grouping network packets, and ﬁnding data ﬁelds
from the same packets. Due to the same reason, the sole
complexity contributory factor in [20] is ‘Input Quantity’. In
the same manner, the task complexity of the heuristic inference
process can be presented using the time complexity of the
algorithm composed of the inference steps.

Algorithm 1: Procedure of Packet Analysis proposed
Input: Captured network packets between targeted
HMI and PLCs
Output: Identiﬁcation of changeable data ﬁelds,
low/upper bound numbers and scale for each ﬁeld,
and sequential relationship
Classiﬁcation of IP Addresses assigned to each PLC;
while for each IP Address do

Inference Step 1: Sorting periodical sending order;
Inference Step 2: Grouping by the same packet
length;
Inference Step 3: Extracting data ﬁeld;
while for each group of same packet length do
Inference Step 4: Finding changed ﬁeld;
while for each particular changeable data ﬁeld
having a difference do

Inference Step 5: Finding the range of each
variable and sequential relationship;

end

end

end

The procedure of our packet analysis can be represented
as Algorithm 1 using pseudocode. From the algorithm, we

C. Validation: Dataset from different environmentt

To validate our analysis framework and prove the feasibility
of our approach, we applied our approach to analyse an
entirely different dataset from a water cyber-physical system
setup from the Singapore University of Technology and Design
(SUTD). After analysing the SUTD captured network packets,
we found that the SUTD system contains sixteen PLCs and
one HMI, which is larger than ours in its scale.. Each PLC
has ﬁxed lengths of HMI request and PLC response messages
that have been used for heuristic inference. After completing
all packet content analyses, we observed that their PLCs have
similar changing behaviors with ours. By applying the same
packet analysis techniques on the data ﬁelds, we identiﬁed
some data ﬁelds which may relate to system settings and
value modiﬁcations. However, without checking the HMI,
the purposes of the data ﬁelds cannot be validated. Hence
it requires a long time to accumulate and analyse data in
order to increase the accuracy of the predicted results. Parts
of the analysed results are listed below in Table III. Our
experiment on this dataset demonstrates that key components
of our approach (e.g., packet classiﬁcation and inference) are
scalable when applied in complex ICSs.

TABLE III
HEURISTIC INFERENCE RESULT ON SUTD DATA

Packet length
183
520
130

Data payload
870508xxxxxxxx
10083010084030
3350524f54 or 334354524c

Predicted purpose
System parameters change
Function On & Off
System status toggle

Packet length
183
520
520
130
130

Correlated payload bits
8705084374ece7
0100xxxxc5b26d3b007c
0100xxxxc5b26d3b007c
45443350524f54
4544334354524c

D. Countermeasures

The customary countermeasure for our suggested attack
scenario is to implement secure communication channels and
continuous monitoring of the OT network. Cryptography can

be used to ensure conﬁdentiality of communication between
HMI and PLCs, so that adversaries will not be able to analyse
internal packets (as compared to plaintext in most current ICS
setups). By monitoring OT network, the system administrators
will be able to block network connection requests except for
trusted devices in the internal network and reduce the risk
surface. Hence, the devices connected to the internal network
should be under surveillance for anomalous/deviant messages.
Another countermeasure to obstruct attackers is to Increase
the time complexity by obfuscating program source code. As
shown in ‘Algorithm 1’, introducing an addendum on the
loop conditions is an effective way to complicate the analysis.
Adding some fake PLCs using soft PLC in the OT network is
the another effective way to increase the outer most loop. If a
communication channel is divided into ports, there will be an
additional loop under each IP address.

To raise the complexity for the packet analysis task further,
we could also introduce a pseudorandom number generator
into the ICS implementation. If an engineer inserts an addi-
tional meaningless ﬁeld using a pseudorandom number gen-
erator, or further bytes which are coded to a changeable data
ﬁeld with the random number, the time complexity of packet
analysis will deﬁnitely increase (according to Algorithm 1).

VI. RELATED WORK

A number of works focused on protecting ICS by detecting
attack attempts on the infrastructure but did not provide sufﬁ-
cient information for reproducibility. For example, the authors
of
[1], [21], [22] demonstrated test results of their suggested
protection methods, but failed to discuss any information on
(re)producing the used attack data. Lan et al. [2] introduced
their tools used for MitM attacks, and [23] brieﬂy described
an attack scenario using tools such as Ettercap, Pypacker, and
Wireshark.

Amin et al. [24] focused on generating deceptive data and
tested the data using a developed SIC software to a local canal
in Southern France.

Direct PLC attack scenarios have also been considered but
most of them required sizeable time and domain expertise be-
fore attacks could be launched successfully –– a key difference
with our proposed approach which requires no prior domain
knowledge in automation. For example, Wallace and Atkison
demonstrated a scanning attack, an attack extracting tags, and
a CPU toggling attack for a model of Siemens S7 line inside a
testbed OT network [25]. The work [7] demonstrated a tactic
of how adversaries were able to access the PLCs positioned
in OT network. After ﬁnding a PLC which is connected to the
Internet, a SOCKS proxy was injected to reach internal PLCs
and committed a download attack to the Siemens PLC with
pre-prepared PLC code.

Demonstrating download attacks on PLCs, Yoo and Ahmed
performed experiments controlling logic injection attacks by
analysing packets on Schneider Electric and Allen-Bradley
PLCs [26]. Kalle et al. [6] succeeded in downloading new
ﬁrmware, which could be modiﬁed by researchers using a

self-implemented decompiler on a Schneider Electric’s PLC
via direct access to the device.

As a type of Denial-of-Service (DoS) attack, [27] showed
an attack by inverting values from read/write registers using
Python code implemented by researchers. Another group of
researchers suggested a markup language dedicated to ICS
attacks [9]. With their proposed language, Kleinmann et al.
conducted MitM attack including zero paddings and shifting
register addresses for network data packets between HMI and
PLCs.

Yrlmaz et al. [10] conducted a DoS attack on Siemens
and Schneider Electric PLCs. They also conducted a MitM
attack which achieved gathering network packet data using a
combination of tools such as Ettercap and Wireshark. Kang et
al. also used Ettercap and Wireshark for data injection attacks
in [18].

The CompactLogix 5370 used for our simulation system had
also been exploited by Pavesi et al. in [28]. These researchers
developed a tool for a SYN injection attack for the TCP
protocol and they conducted the attack in the OT network
of their lab environment.

Miciolino et al. [3] used Ettercap and Etter-Filter to conduct
a FDIA exploit on a water system testbed using Schneider
Electric’s Modicon M340. Using their expertise, researchers
were able to modify command and send false responses. The
researchers also conducted ping ﬂood and Modbus ﬂooding
attack with FDIA in [8]. They evaluated a Fault Diagnosis
module and Intrusion Detection System in the same testbed
environment.

VII. CONCLUDING REMARKS AND FUTURE WORK

We proposed an analytics framework using a heuristic
inference approach to produce False Data Injection Attack
(FDIA) data in an ICS network. The proposed framework
targets the communication channel between the supervisory
control network and the control network typically found in
many ICS scenarios. Our approach leverages a well-known
network penetration tool and network analysis tool to commit
a man-in-the-middle (MitM) attack and ICS network packet
analysis.

The major advantage of our framework is that no prior
expertise for ICS and automation engineering is required to
follow the suggested steps in our framework. We demonstrated
an attack scenario on a system simulating a wind-farm pow-
ering a barrel conveyor belt in a manufacturing plant. The
experiment showed that our framework was able to make
stealthy deception attacks achieved by a non-ICS expert. The
application of our framework onto a second dataset validated
our approach and showed the versatility of our analytics
framework.

For future work, we will continue to conduct further re-
search on the countermeasures proposed earlier in this paper.
Based on the data produced by our framework, future research
on preventative measures would be feasible and aligns well
to the ultimate goal of our framework. As an extension of
our approach, we will conduct further experiments of our

[16] S. Stricot-Tarboton, S. Chaisiri, and R. K. Ko, “Taxonomy of man-in-
the-middle attacks on https,” in 2016 IEEE Trustcom/BigDataSE/ISPA.
IEEE, 2016, pp. 527–534.

[17] K. Kruglov and E. Goncharov, “Threats posed by using RATs in ICS,”

Kaspersky Lab, Tech. Rep., 2018.

[18] B. Kang, P. Maynard, K. McLaughlin, S. Sezer, F. Andr´en, C. Seitl,
F. Kupzog, and T. Strasser, “Investigating cyber-physical attacks against
IEC 61850 photovoltaic inverter installations,” in Proceedings of the
IEEE 20th Conference on Emerging Technologies & Factory Automa-
tion, 2015, pp. 1–8.

[19] A. Al Farooq, J. Marquard, K. George, and T. Moyer, “Detecting safety
and security faults in PLC systems with data provenance,” in 2019 IEEE
International Symposium on Technologies for Homeland Security, 2019,
pp. 1–6.

[20] P. Liu and Z. Li, “Task complexity: A review and conceptualization
framework,” International Journal of Industrial Ergonomics, vol. 42,
no. 6, pp. 553 – 568, 2012.

[21] W. Gao and T. H. Morris, “On cyber attacks and signature based
intrusion detection for modbus based industrial control systems,” Journal
of Digital Forensics, Security and Law, vol. 9, no. 1, p. 3, 2014.
[22] Z. He, A. Raghavan, G. Hu, S. Chai, and R. Lee, “Power-grid controller
anomaly detection with enhanced temporal deep learning,” in Proceed-
ings of the 18th IEEE International Conference On Trust, Security And
Privacy In Computing And Communications/13th IEEE International
Conference On Big Data Science And Engineering, 2019, pp. 160–167.
[23] W. Li, L. Xie, and Z. Wang, “Two-loop covert attacks against constant
value control of industrial control systems,” IEEE Transactions on
Industrial Informatics, vol. 15, no. 2, pp. 663–676, 2018.

[24] S. Amin, X. Litrico, S. S. Sastry, and A. M. Bayen, “Stealthy deception
attacks on water SCADA systems,” in Proceedings of the 13th ACM
International Conference on Hybrid Systems: Computation and Control,
2010, pp. 161–170.

[25] N. Wallace and T. Atkison, “Observing industrial control system attacks
launched via metasploit framework,” in Proceedings of the 51st ACM
Southeast Conference, 2013, pp. 1–4.

[26] H. Yoo and I. Ahmed, “Control logic injection attacks on industrial
control systems,” in Proceedings of the IFIP International Conference
on ICT Systems Security and Privacy Protection, 2019, pp. 33–48.
[27] Y. Wang, J. Liu, C. Yang, L. Zhou, S. Li, and Z. Xu, “Access control
attacks on PLC vulnerabilities,” Journal of Computer and Communica-
tions, vol. 6, no. 11, pp. 311–325, 2018.

[28] J. Pavesi, T. Villegas, A. Perepechko, E. Aguirre, and L. Galeazzi, “Val-
idation of ICS vulnerability related to TCP/IP protocol implementation
in allen-bradley compact logix plc controller,” in Proceedings of the
International Congress of Telematics and Computing, 2019, pp. 355–
364.

framework on an ICS with a fake PLC or add meaningless
data ﬁelds to experiment control data integrity and resiliency.

VIII. ACKNOWLEDGEMENTS

We thank the anonymous reviewers for their valuable feed-
back. We also acknowledge Bob Stokes, Alex Ladur, and
Jean-Paul Mondon-Ballantyne from Combined Technologies
(CTEK) Ltd for providing their domain expertise during the
setup of the ICS systems and scenarios at the UQ Energy
TestLab (Website: https://energy-testlab.lab.uq.edu.au). CTEK
also coordinated our disclosures of vulnerabilities discovered
by our framework. The data used in Section V-C was provided
by the “iTrust, Centre for Research in Cyber Security” at
the Singapore University of Technology and Design. We
also thank the UQ Cyber Security strategic funding for the
procurement of the ICS systems.

REFERENCES

[1] D. Hadˇziosmanovi´c, R. Sommer, E. Zambon, and P. H. Hartel, “Through
the eye of the PLC: Semantic security monitoring for industrial pro-
cesses,” in Proceedings of the 30th Annual Computer Security Applica-
tions Conference, 2014, pp. 126–135.

[2] H. Lan, X. Zhu, J. Sun, and S. Li, “Trafﬁc data classiﬁcation to detect
man-in-the-middle attacks in industrial control system,” in Proceedings
of the 6th International Conference on Dependable Systems and Their
Applications, 2020, pp. 430–434.

[3] E. E. Miciolino, G. Bernieri, F. Pascucci, and R. Setola, “Communica-
tions network analysis in a SCADA system testbed under cyber-attacks,”
in Proceedings of the 23rd Telecommunications Forum Telfor, 2015, pp.
341–344.

[4] R. L and P. Satyanarayana, “Vulnerability analysis and enhancement of
security of communication protocol in industrial control systems,” Helix,
vol. 9, no. 04, pp. 5122– 5127, 2019.

[5] H. Gao, Y. Peng, K. Jia, Z. Dai, and T. Wang, “The design of ICS testbed
based on emulation, physical, and simulation (EPS-ICS testbed),” in Pro-
ceedings of the 9th International Conference on Intelligent Information
Hiding and Multimedia Signal Processing, 2013, pp. 420–423.

[6] S. Kalle, N. Ameen, H. Yoo, and I. Ahmed, “CLIK on PLCs! attacking
control logic with decompilation and virtual PLC,” in Proceedings of
the Binary Analysis Research Workshop - BAR@NDSS, 2019.

[7] J. Klick, S. Lau, D. Marzin, J.-O. Malchow, and V. Roth, “Internet-facing

PLCs-a new back oriﬁce,” Blackhat USA, pp. 22–26, 2015.

[8] G. Bernieri, E. E. Miciolino, F. Pascucci, and R. Setola, “Monitoring
system reaction in cyber-physical testbed under cyber-attacks,” Comput-
ers & Electrical Engineering, vol. 59, pp. 86–98, 2017.

[9] A. Kleinmann, O. Amichay, A. Wool, D. Tenenbaum, O. Bar, and
L. Lev, “Stealthy deception attacks against SCADA systems,” in Pro-
ceedings of the International workshops on Computer Security - Cyber-
ICPS/SECPRE@ESORICS, ser. LNCS, vol. 10683, 2017, pp. 93–109.
[10] E. N. Yrlmaz, H. H. Sayan, F. ¨Ust¨unsoy, S. G¨onen, and G. Karacayilmaz,
“Cyber security analysis of DoS and MitM attacks against PLCs used
in smart grids,” in Proceedings of the 7th International Istanbul Smart
Grids and Cities Congress and Fair, 2019, pp. 36–40.

[11] A. Ciampa, C. A. Visaggio, and M. Di Penta, “A heuristic-based ap-
proach for detecting SQL-injection vulnerabilities in web applications,”
in Proceedings of the ICSE Workshop on Software Engineering for
Secure Systems - SESS@ICSE, 2010, pp. 43–49.

[12] J. Slay and M. Miller, “Lessons learned from the maroochy water
breach,” in Proceedings of the Critical Infrastructure Protection, 2008,
pp. 73–82.

[13] R. Langner, “Stuxnet: Dissecting a cyberwarfare weapon,” IEEE Security

& Privacy, vol. 9, no. 3, pp. 49–51, 2011.

[14] I.-C. Alert, “Cyber-attack against ukrainian critical infrastructure,” Cy-
bersecurity Infrastruct. Secur. Agency, Washington, DC, USA, Tech.
Rep. ICS Alert (IR-ALERT-H-16-056-01), Tech. Rep., 2016.

[15] A. Di Pinto, Y. Dragoni, and A. Carcano, “TRITON: The ﬁrst ICS cyber

attack on safety instrument systems,” Black Hat USA, 2018.

