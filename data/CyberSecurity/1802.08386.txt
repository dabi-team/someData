Enhanced PeerHunter: Detecting Peer-to-peer
Botnets through Network-Flow Level Community
Behavior Analysis

Di Zhuang, Student Member, IEEE, and J. Morris Chang, Senior Member, IEEE

1

8
1
0
2

v
o
N
4
1

]

R
C
.
s
c
[

3
v
6
8
3
8
0
.
2
0
8
1
:
v
i
X
r
a

Abstract—Peer-to-peer (P2P) botnets have become one of the
major threats in network security for serving as the fundamental
infrastructure for various cyber-crimes. More challenges are
involved in the problem of detecting P2P botnets, despite a few
work claimed to detect centralized botnets effectively. We propose
Enhanced PeerHunter, a network-ﬂow level community behavior
analysis based system, to detect P2P botnets. Our system starts
from a P2P network ﬂow detection component. Then, it uses
“mutual contacts” to cluster bots into communities. Finally, it
uses network-ﬂow level community behavior analysis to detect
potential botnets. In the experimental evaluation, we propose
two evasion attacks, where we assume the adversaries know
our techniques in advance and attempt to evade our system
by making the P2P bots mimic the behavior of legitimate P2P
applications. Our results showed that Enhanced PeerHunter can
obtain high detection rate with few false positives, and high
robustness against the proposed attacks.

Index Terms—P2P Botnet, intrusion detection, network secu-

rity, community detection.

I. INTRODUCTION

A Botnet is a set of compromised machines controlled by

botmasters through command and control (C&C) chan-
nels. Botnets may have different communication architectures.
Traditional botnets are known to use centralized architectures,
which have potential single point of failure. Peer-to-peer
(P2P) network is modeled as a distributed architecture, where
even if a certain number of peers do not function properly,
the whole network is not compromised. Most of the recent
botnets (e.g., Storm, Waledac and ZeroAccess) attempted to
use P2P architectures, and P2P botnets were proved to be
highly resilient even after a certain number of bots being
identiﬁed or taken down [1]. P2P botnets provide a fundamen-
tal infrastructure for various cyber-crimes, such as distributed
denial-of-service (DDoS), email spam, click fraud, etc. For
instance, recent botnet attacks including those carried out
by WhiskeyAlfa (responsible for Sony Pictures Entertainment
attack) and WannaCry (responsible for ransoming healthcare
facilities in Europe) showed the scale and scope of damage
that P2P botnets can cause. As such, detecting P2P botnets
effectively is rather important for securing cyberspace.

Designing an effective P2P botnets detection systems is very
challenging. First, botnets tend to act stealthily [2] and spend
most of their time in the waiting stage before performing any
malicious activities [3]. Approaches using malicious activities

The authors are with the Department of Electrical Engineering, University
of South Florida, Tampa, FL 33620 USA (e-mail: dizhuang@mail.usf.edu;
chang5@usf.edu).

would have small window of opportunities to detect such
botnets. Second, botnets tend to encrypt the C&C channels,
causing deep-packet-inspection (DPI) based methods ineffec-
tive. Third, the role of a single bot can be changed dynamically
depending on the current structure of a botnet [4] (e.g., P2P
bot can shift its functionality to act as a botmaster when the
prior botmaster has been taken down). Hence, it is difﬁcult to
characterize a botnet just by looking at a single bot.

In this work, we present Enhanced PeerHunter, an extension
of PeerHunter [5], aiming to use network-ﬂow level commu-
nity behaviors to detect waiting stage P2P botnets, even in
the scenario that P2P bots and legitimate P2P applications
are running on the same set of hosts. We consider a botnet
community as a group of compromised machines that commu-
nicate with each other or connect to the same set of botmasters
through the same C&C channel, are controlled by the same
attacker, and aim to perform similar malicious activities. In
the “waiting stage”, no malicious activities could be observed.
As discussed in [4], the dynamic change of communication
behaviors of P2P botnets makes it extremely hard to identify a
single bot. Nonetheless, bots belonging to the same P2P botnet
always operate together as a community and share the same
set of community behaviors. Our system starts from a P2P
network ﬂow detection component, and builds a network-ﬂow
level mutual contacts graph (MCG) depending on the mutual
contacts characteristics [6] between each pair of the P2P
network ﬂows. Afterwards, it employs a community detection
component to cluster the same type of bots into the same
community, and separate bots and legitimate applications or
different types of bots into different communities. Finally, our
system uses the destination diversity (the “P2P behavior”)
and the mutual contacts (the “botnet behavior”) as the
natural behaviors to detect P2P botnet communities.

In the experiments, we mixed a background network dataset
[7] with 5 P2P botnets datasets and 4 legitimate P2P appli-
cations datasets [8]. To make our experimental evaluation as
unbiased and challenging as possible, we propose a network
traces sampling and mixing method to generate synthetic
experimental datasets. To be speciﬁc, we evaluated our system
with 100 synthetic experimental datasets that each contains
10,000 internal hosts. We implemented our P2P network ﬂow
detection component using MapReduce framework, which
dramatically reduced the number of hosts subject to analysis
by 99.03% and retained most of the P2P hosts. Also, the
MapReduce design and implementation of our system could be
deployed on cloud-computing platforms (e.g., Amazon EC2),

 
 
 
 
 
 
which ensures the scalability of our system (i.e., processing
an average of 97 million network ﬂows in about 20 minutes).
To summarize, our work has the following contributions:

• We present a novel, effective and efﬁcient network-ﬂow
level community behavior analysis based system, Enhanced
PeerHunter, which is capable of detecting P2P botnets when
(a) botnets are in their waiting stage; (b) the C&C channel
has been encrypted; (c) the botnet trafﬁc are overlapped with
legitimate P2P trafﬁc on the same host; and (d) none statistical
trafﬁc patterns are known in advance (unsupervised).

• We experimented our system using a wide range of pa-
rameter settings. With the best parameter settings, our system
achieved 100% detection rate with zero false positive.

• We propose two evasion attacks (i.e., passive and active
mimicking legitimate P2P application attacks), where we
assume the adversaries know our techniques in advance and
attempt to evade our system via instructing P2P bots to mimic
the behavior of legitimate P2P applications. The experiment
results showed that our system is robust to both attacks.

• We compared Enhanced PeerHunter with PeerHunter [5]
(i.e., our previous work) and Zhang et al. [2]. Extensive
experiments were conducted to show that (a) our system
outperforms Zhang et al. [2] in terms of the detection rate
of different botnets, the overall precision, recall and false
positives, and (b) our system is more robust to MMKL attacks
compared with PeerHunter [5] and Zhang et al. [2].

The rest of this paper is organized as follows: Section II
presents the related work. Section III explains the motivation
and details of the features applied in our system. Section IV
describes the system design and implementation details. Sec-
tion V presents the experimental evaluation. Section VI dis-
cusses the evasions and possible solutions, deployment and the
potential extensions of our system. Section VII concludes.

II. RELATED WORK

To date, a few methods attempting to detect P2P botnets
were proposed [2]–[6], [8]–[14]. From the data perspective,
recent approaches can be divided into two categories [14]:
payload-based and ﬂow-based. Payload-based systems [9],
[15], [16] use payload content and header information of
network packets to detect botnets. For instance, BotHunter
[9] is a well-known packet inspecting bot detection system
that relies on a modiﬁed Snort [17] (i.e., a rule-based in-
trusion detection system that requires the access to the full
payload) to detect potential malicious activities and further
identify infected hosts. Lu et al. [15] proposed to use decision
tree models trained on the n-gram features extracted from
the network trafﬁc payload to detect botnets. Wang et al.
[16] proposed to use lexical features of HTTP header (TCP
payload) to discover malicious behaviors of Android botnets.
Flow-based systems [2]–[6], [8], [10]–[14], [18], [19] use
header information of network packets (i.e., network ﬂow
characteristics) to capture botnets behaviors. Compared with
payload-based systems, ﬂow-based systems use less infor-
mation from the network packets. Since recent botnets tend
to use encryption to hide their payload information from
the detection systems, most of the packet-based systems

2

that applying deep packet inspection (DPI) on the payload
information (e.g., BotHunter [9]) will be foiled. Zhang et
al. [20] proposed to add a high-entropy ﬂow detector into
BotHunter to detect bots, when part of the packets payloads
of botnets’ network ﬂows are encrypted. Their assumption is
that the presence of high-entropy ﬂows (detected from the
encrypted packets payloads) together with existing botnets
events (detected from the non-encrypted packets payloads by
BotHunter) could identify botnets using encrypted network
trafﬁc. However, if all the packets payloads are encrypted
it will be hard for their approach to perform. The
[14],
ﬂow-based detection systems have advantage over the packet-
based systems that applying deep packet inspection (DPI) on
the payload information (e.g., BotHunter [9]) given that they
can be applied to encrypted trafﬁc. Some ﬂow-based systems
applied one or several different supervised machine learning
algorithms on a set of well extracted network ﬂow features to
model the botnets behaviors. For instance, Jianguo et al. [21]
applied three supervised machine learning algorithms (i.e.,
SVM, Logistic Regression and Neural Network) on network
ﬂow features extracted from Netmate and Tranalyzer to detect
botnets. They obtained very high performance metrics, while
employing a fully labelled dataset. Khanchi et al. [19] pro-
posed an approach using genetic programming and ML on
data streams to detect botnets ﬂows. However, since most of
the supervised ML-based approaches usually generate models
that are focusing on speciﬁc types of botnets (existing in the
training data), those approaches will not be effective to detect
botnets not appeared in the training data (unknown botnets).
Some ﬂow-based systems utilized a combination of differ-
ent heuristics to model P2P botnets behaviors. For instance,
Botgrep [10] proposed to detect P2P botnets through local-
izing structured communication graphs, where they found
that the communication graph of P2P applications have fast
convergence time of random walks to a stationary distri-
bution. However, their method can only identify structured
communication subgraphs, rather than ensure those subgraphs
containing P2P botnets. Entelecheia [3] proposed to use a
synergistic graph-mining approach on a super-ﬂow graph built
from network ﬂow features (i.e., volume per hour, duration
per ﬂow) to identify a group of P2P bots, where they claimed
that P2P botnet network ﬂow tend to have low volume and
long duration. Group or community behavior based methods
[4]–[6], [11] considered the behavior patterns of a group of
bots within the same P2P botnet community. Coskun et al.
[6] developed a P2P botnets detection approach that started
from building a mutual contacts graph of the whole network,
then attempted to use “seeds” (known bots) to identify the
rest of botnets. However, it is impractical to have a “seed” in
advance. Similar to the idea of using mutual contacts graph,
Ma et al. [22] proposed to use the coexistence of domain
cache-footprints distributed in networks that participate in the
outsourcing service (i.e., coexistence graph) to detect mali-
cious domains. Yan et al. [4] proposed a group-level behavior
analysis based P2P botnets detection method, where they
started from clustering P2P hosts into groups, and then used
supervised machine learning methods (e.g., SVM) to identify
bots through a set of group-level behavior features. Since their

approach relied on supervised classiﬁcation methods (e.g.,
SVM) which required to train the model of each botnet on fully
labelled dataset in advance, it would be hard for their method
to detect unknown botnets. Chen et al. [23] applied three
unsupervised machine learning algorithms (i.e., self-organising
map, local outlier factor and k-NN outlier) to build a normal
behavior proﬁle to detect botnet. They obtained a very high
detection rate (91.3%), but with inherited high false positive
rates due to the nature of the unsupervised ML algorithms
employed. PeerHunter [5], our previous work, proposed to
use the host level community behavior analysis to detect P2P
botnets, which did not consider the scenario that P2P bots and
legitimate P2P applications could run on the same set of hosts.
Zhang et al. [2] proposed a scalable botnet detection system
capable of detecting stealthy P2P botnets (i.e., in the waiting
stage), where no knowledge of existing malicious behavior was
required in advance. They also claimed to work in the scenario
that the botnet trafﬁc are overlapped with the legitimate P2P
trafﬁc on the same host. However, their experimental dataset
was slightly biased and less challenging. For example, in their
dataset, the number of bots was twice as many as the number
of legitimate P2P hosts, which was much easier for bots to
form clusters than legitimate P2P hosts.

In this work, we present Enhanced PeerHunter, a network-
level ﬂow-based system that relies on community behavior
analysis to detect P2P botnets. We compared Enhanced Peer-
Hunter with PeerHunter [5] and Zhang et al. [2] on a more
challenging and comprehensive experimental datasets, and
showed that our system outperforms both systems in terms
of detection rate, false positives and the performance under
the proposed mimicking legitimate P2P application attacks.

III. BACKGROUND AND MOTIVATION

In this section, we investigate the characteristics being used
to detect P2P network trafﬁc, and introduce the concept of
“mutual contacts”, which motivated us to formulate the P2P
botnet detection problem as a network community detection
problem. Also, we explore the P2P botnet community behav-
iors being used to identify botnets communities. To demon-
strate the features discussed in this section, we conducted some
preliminary experiments using the dataset shown in Table III
and Table IV. Table I shows the notations and descriptions,
and Table II shows the measurements of features.

3

TABLE II: Measurements of Features

Trace
eMule
FrostWire
uTorrent
Vuze
Storm
Waledac
Sality
Kelihos
ZeroAccess

AVGDD
8,349
11,420
17,160
12,983
7,760
6,038
9,803
305
246

AVGDDR
17.6%
15.2%
8.7%
10.1%
25.1%
46.0%
9.5%
97.4%
96.9%

AVGMC
3,380
7,134
13,888
18,850
14,684
7,099
72,495
310
254

AVGMCR
3.7%
4.5%
3.5%
7.9%
30.2%
37.0%
53.2%
98.2%
100.0%

A. P2P Network Characteristics

Due to the nature of P2P networks, P2P hosts usually
communicate with their peers through IP addresses directly,
without any queries from DNS services [24], namely, non-
DNS connections (NoDNS). Also, peer churn is another
typical behavior in P2P networks [25], which results in a
signiﬁcant number of failed connections in P2P network ﬂow.
Furthermore, due to the decentralized nature of P2P network,
a P2P host usually communicates with peers distributed in a
large range of physical networks, which results in destination
diversity (DD) [8] of P2P management network ﬂow (MNF).
To be clearer, P2P host generate two types of network ﬂow:
(1) management network ﬂow, which maintains the function
and structure of the P2P network, and (2) other network ﬂow,
such as data-transfer ﬂow, which does not necessarily have the
P2P network characteristics. The P2P network ﬂow mentioned
in this section and the rest all refers to P2P MNF.

Zhang et al. [2] proposed to remove a decent number of
non-P2P network ﬂow using NoDNS, and then performed a
ﬁne-grained P2P hosts detection using DD. Based on their
experiment results, DD plays a much more important role in
detecting P2P hosts than NoDNS. Therefore, in this work, we
decided to only use DD to simplify and speed up the P2P
network ﬂow detection procedure. In addition, we used the
number of distinct /16 IP preﬁxes of each host’s network
ﬂow, rather than BGP preﬁx used in [2] to approximate
DD, since /16 IP preﬁx is a good approximation of network
boundaries. For instance, it is very likely that two IP addresses
with different /16 IP preﬁxes belong to two distinct physical
networks. This is also supported by Table II, which shows the
network ﬂow in a P2P network spreading across many distinct
physical networks according to the number of /16 IP preﬁxes.

TABLE I: Notations and Descriptions

B. Mutual Contacts

Notations
MNF
AVGDD
AVGDDR
AVGMC
AVGMCR
Θdd
Θmcr
Θavgddr
Θavgmcr
BSI
BAI
BLSI

Descriptions
the management network ﬂow
the average # of distinct /16 MNF dstIP preﬁxes
the average destination diversity ratio
the average # of mutual contacts between a pair of hosts
the average mutual contacts ratio
the threshold of destination diversity
the threshold of mutual contacts ratio
the threshold of AVGDDR
the threshold of AVGMCR
Bot Separation Index
Bot Aggregation Index
Bot-Legitimate Separation Index

The mutual contacts (MC) between a pair of hosts is a set
of shared contacts between them [6]. Consider the network
illustrated in Fig. 1a which contains an internal network (A,
B, C, D and E) and an external network (1, 2, 3, 4 and 5). A
link between a pair of hosts means communication between
them. In Fig. 1a, 1, 2 are the mutual contacts shared by A, B.
Mutual contacts are the natural characteristic of P2P botnet.
Compared with legitimate hosts, a pair of bots within the same
P2P botnet has higher probability to share mutual contacts [6].
Because bots within the same P2P botnet tend to receive the
same C&C messages from the same set of botmasters [26].
Moreover, in order to prevent bots (peers) from churning,

4

of a P2P host is the number of distinct /16 IP preﬁxes of its
network ﬂows’ destination IPs. The destination diversity ratio
(DDR) of each host is its DD divided by the total number
of distinct destination IPs of its network ﬂows. Due to the
decentralized nature of P2P networks, P2P network ﬂow tend
to have higher DDR than non-P2P network ﬂow. Furthermore,
network ﬂow from P2P botnets usually have higher AVGDDR
than network ﬂow from legitimate networks. Network ﬂow
from bots within the same botnet tend to have similar DDR,
since those bots are usually controlled by machines, rather
than humans. However, the destinations of legitimate P2P
network ﬂow are usually user-dependent, which result in their
DDR varying greatly from user to user. Besides, our approach
aims to cluster bots within the same botnets together, rather
than attempting to cluster the legitimate hosts. Therefore,
legitimate communities might contain both P2P hosts and non-
P2P hosts, leading to lower AVGDDR. As shown in Table II,
both legitimate hosts and bots spread across a wide range of
distinct networks. However, most of the botnets have higher
AVGDDR than legitimate applications, except Sality.

Average Mutual Contacts Ratio: This captures the “botnet
behavior” of P2P botnets. The mutual contacts ratio (MCR)
between a pair of hosts is the number of mutual contacts
between them, divided by the number of total distinct contacts
of them. This is based on three observations: (a) P2P botnets
are usually formed by at least two bots, otherwise they cannot
act as a group, (b) the MCR of a pair of bots within the same
botnet is much higher than the MCR of a pair of legitimate ap-
plications or a pair of bots from different botnets, and (c) each
pair of bots within the same botnet has similar MCR. Thus,
we deﬁne AVGMCR as the average MCR among all pairs of
hosts within one network community. As shown in Table II
both botnets and certain legitimate network communities have
a considerable number of mutual contacts. That is because
those legitimate communities have much more “base” contacts
than botnets. However, botnets have much higher AVGMCR.
3) Structural Community Feature: This captures the struc-
tural characteristics of a botnet. As discussed above, every pair
of bots within the same botnet tends to have a considerable
number or ratio of mutual contacts. If we consider each host
as a vertex and link an edge between a pair of hosts when they
have mutual contacts, the bots within the same botnet tend to
form cliques. On the contrary, the contacts of different legit-
imate hosts usually diverge into different physical networks.
Thus, the probability that legitimate communities form certain
cliques is relatively low. Then, we can consider P2P botnets
detection as a clique detection problem, which detects cliques
from a given network with certain requirements. However,
since clique detection problem is NP-complete, we cannot
directly apply such method to detect botnets, without any pre-
processing. We propose to combine all three botnet community
behaviors, and use the previous two community behaviors as
the “preprocessing” of the clique detection problem.

IV. SYSTEM DESIGN

(a)

(b)

Fig. 1: Illustration of network (a) and its mutual contacts graph (b).

the botmaster must check each bot periodically, which results
in a convergence of contacts among peers within the same
botnet [2]. However, since bots from different botnets are
controlled by different botmasters, they will not share many
mutual contacts. A pair of Legitimate hosts may have a small
set of mutual contacts, since nearly all hosts communicate with
some popular servers, such as google.com, facebook.com [6].
Furthermore, the host pairs running the same P2P applications
may also result in a decent ratio of mutual contacts, if they
communicate with the same set of peers by coincidence. How-
ever, in practice, legitimate P2P hosts with different purposes
will not search for the same set of peers. As such, we can use
mutual contacts to cluster the bots within the same botnet, and
separate P2P botnets from legitimate P2P applications.

The basic idea of using mutual contacts is to build a mutual
contacts graph (MCG) as shown in Fig. 1, a host level MCG,
where A, B are linked together in Fig. 1b, since they have
mutual contacts 1, 2 in Fig. 1a. Similarly, C, D, E are linked
to each other in Fig. 1b, since every pair of them share at least
one mutual contacts in Fig. 1a. More details about network-
ﬂow level MCG is discussed in Section IV-B.

C. Community Behavior Analysis

Due to the dynamic changes of a single bot’s communi-
cation behavior [4], it would be extremely hard to identify
a single bot. However, bots within the same P2P botnet
always work together as a community, thus, should have dis-
tinguishable community behaviors. We consider three types of
community behaviors: (a) ﬂow statistical feature, (b) numerical
community feature and (c) structural community feature.

1) Flow Statistical Feature: Botnet detection methods us-
ing ﬂow statistical features, have been widely discussed [2]–
[5]. For the MNFs of a speciﬁc P2P application, most of
its statistical patterns depend on its P2P network protocol.
However, the statistical patterns of other network ﬂows, such
as data-transfer ﬂow, are usually situation-dependent, which
vary a lot even in the same P2P network. In this work, we use
the ingoing and outgoing bytes-per-packets (BPP) of MNFs in
one P2P network as its community ﬂow statistical feature.

2) Numerical Community Feature: We consider two nu-
merical community features: average destination diversity ratio
(AVGDDR) and average mutual contacts ratio (AVGMCR).

Average Destination Diversity Ratio: This captures the
“P2P behavior” of P2P botnets. The destination diversity (DD)

Enhanced PeerHunter has three components, as shown in
Fig. 2, that work synergistically to (a) detect P2P network ﬂow,

Host AHost BHost CHost DHost EHost 1Host 2Host 3Host 4Host 5Network BoundaryInternal NetworkExternal NetworkHost AHost BHost CHost DHost E5

Fig. 2: System Overview.

(b) construct the network-ﬂow level mutual contacts graph, and
(c) detect P2P botnets.

A. P2P Network Flow Detection

This component aims to detect network ﬂow that engage
in P2P communications using the features described in Sec-
tion III-A. The input is a set of 5-tuple network ﬂow [ipsrc,
ipdst, proto, bppout, bppin], where ipsrc is the source IP, ipdst
is the destination IP, proto is either tcp or udp, and bppout
and bppin are outgoing and ingoing bytes-per-packets (BPP)
statistics. First, we group all network ﬂows F = {f1, f2, . . . ,
fk} into ﬂow clusters F C = {F C1, F C2, . . . , F Cm} using
the 4-tuple [ipsrc, proto, bppout, bppin]. Then, we calculate
the number of distinct /16 preﬁxes of ipdst (destination diver-
sity) associated with each ﬂow cluster, ddi = DD(F Ci). If
ddi is greater than a pre-deﬁned threshold Θdd, we consider
F Ci as a P2P MNF cluster, and its source hosts as P2P hosts.
We retain all the network ﬂows within the P2P MNF clusters
for the next component, and eliminate all the other network
ﬂows. As shown in Algorithm 1, we designed this component

Algorithm 1 P2P Network Flow Detection

Key ← [ipsrc, proto, bppout, bppin]
V alue ← ipdst
output (Key, V alue)

1: function MAP([ipsrc, ipdst, proto, bppout, bppin])
2:
3:
4:
5: end function
6: function REDUCE(Key, V alue[ ])
7:

k ← Key
ddk = Ø
for v ∈ V alue[ ] do
ddk ← ddk ∪ {v}

end for
if |ddk| ≥ Θdd then

8:
9:
10:
11:
12:

for v ∈ V alue[ ] do
output (k, v)

13:
14:
15:
16:
17: end function

end if

end for

using a MapReduce framework [27]. For a mapper, the input
is a set of 5-tuple network ﬂow, and the output is a set of
key-value pairs, where the key is the 4-tuple [ipsrc, proto,
bppout, bppin], and the value is its corresponding ipdst. For a
reducer, the input is the set of key-values pairs that outputs by
the mapper. Then, the reducer aggregates all values with the
same key to calculate the DD of each ﬂow cluster, and ﬁnally
output the detected P2P MNF based on Θdd.

B. Network-Flow Level Mutual Contacts Graph Extraction

This component aims to extract mutual contacts graph
(MCG) using the network-ﬂow level mutual contacts. We call
a pair of P2P network ﬂow clusters are the same type, if they
have the same 3-tuple [proto, bppout, bppin]. As illustrated in
Fig. 3, each host might contain one type or several different
types of P2P network ﬂow clusters generated by either P2P
botnets or legitimate P2P applications running on it. If a pair
of the same type of P2P network ﬂow clusters generated by
different hosts, have at least one (network-ﬂow level) mutual
contacts, we create an edge between them in the corresponding
network-ﬂow level MCG.

n1 , f 2

, f |F C|
2

, . . ., f |F C|

To be speciﬁc, the input is a set of P2P network ﬂow clusters
F C={F C1, F C2, . . . , F Cm}, and their corresponding P2P
2 , . . ., f 2
1 , f 1
network ﬂows, F ={f 1
2 , . . ., f 1
n2 , . . .,
f |F C|
n|F C| }, where f j
i denotes the ﬂow i of
1
F Cj. The output is a MCG, Gmc = (V, E), where each vertex
vi ∈ V represents network ﬂow cluster F Ci and has a DDR
score ddri, and each edge eij ∈ E represents the existence of
mutual contacts between F Ci and F Cj and has a nonnegative
MCR weight mcrij. Algorithm 2 shows the detailed steps.

1 , f 2

that contains all

First, for each P2P network ﬂow cluster F Ci, we generate
a contact set Ci,
the destination IPs of
its network ﬂows. Each P2P network ﬂow cluster F Ci also
contains a ﬂow statistical pattern set Si, which contains all
the 3-tuple [proto, bppout, bppin] of its network ﬂows. Let
DD(Ci) be the set of distinct /16 preﬁxes of all the IPs in
Ci. Then, ddri and mcrij can be calculated as follows.

ddri =

(cid:107)DD(Ci)(cid:107)
(cid:107)Ci(cid:107)

mcrij =

(cid:107)Ci ∩ Cj(cid:107)
(cid:107)Ci ∪ Cj(cid:107)

(1)

Furthermore, as discussed in Section III-C1, the network
ﬂows from different hosts (or network ﬂow clusters) within
the same network communities (generated by the same type of
P2P botnet or legitimate P2P application) should have similar
statistical patterns. Thus, for each pair of input P2P network
ﬂow clusters, say F Ci and F Cj, we calculate the intersection
between Si and Sj. If Si ∩ Sj = Ø, then there should be no
edge between F Ci and F Cj in MCG. Otherwise, they share
at least one network ﬂow statistical pattern, and we calculate
mcrij as shown in equation (1). Let Θmcr be a pre-deﬁned
threshold. Then, if mcrij > Θmcr, there is an edge between
F Ci and F Cj, with weight mcrij. Otherwise, there is no edge
between F Ci and F Cj (i.e., mcrij = 0).

C. P2P Botnet Detection

This component aims to detect P2P bots from given MCG.
First, we cluster the bots and the other hosts into their own
communities using a community detection method. After-
wards, we detect botnet communities using numerical com-

Network TrafficP2P Network Flow DetectionCommunity DetectionNetwork-Flow Level Mutual Contact Graph ExtractionBotnet Communities DetectionBot Candidates DetectionReportP2P Botnet Detection6

Fig. 3: An example of network-ﬂow level mutual contacts graph extraction and community detection. Each triangle represents
a network ﬂow cluster, and the same color triangles represent the same type of network ﬂow clusters. The areas separated by
the dash-dot line with different color represents different communities.

Algorithm 2 Network-Flow Level MCG Extraction
input: F C, F , Θmcr
output: Gmc = (V, E)
1: E = Ø, V = Ø
2: for F Ci ∈ F C do
Ci = Ø
3:
Si = Ø
4:
5: end for
6: for f j
7:
8:
9: end for
10: for F Ci ∈ F C do
11:

i ∈ F do
Cj ← Cj ∪ {ipdst}
Sj ← Sj ∪ {[proto, bppout, bppin]}

(cid:107)Ci(cid:107)

ddri ← (cid:107)DD(Ci)(cid:107)
vertex vi ←< ddri >
V ← V ∪ {vi}

12:
13:
14: end for
15: for ∀ F Ci, F Cj ∈ F C and i < j do
16:

if Si ∩ Sj (cid:54)= Ø then
mcrij ← (cid:107)Ci∩Cj (cid:107)
(cid:107)Ci∪Cj (cid:107) .
if mcrij > Θmcr then

edge eij ←< mcrij >
E ← E ∪ {eij}

17:

18:
19:
20:

end if

end if

21:
22:
23: end for
24: return Gmc = (V, E)

munity behavior analysis. Finally, we use structural commu-
nity behavior analysis to further identify or verify each bot
candidate. Algorithm 3 shows the detailed steps.

1) Community Detection: Given MCG Gmc = (V, E), ∀
eij ∈ E, we have mcrij ∈ [0.0, 1.0], where mcrij = 1.0
means all contacts of F Ci and F Cj are mutual contacts
and mcrij = 0.0 means there is no mutual contact between
F Ci and F Cj. Furthermore, the same type of P2P network
ﬂow clusters that generated by different bots within the same
botnet tend to have a higher ratio of mutual contacts. As
the P2P bots clustering problem can be considered
such,

as a network community detection problem. As shown in
Fig. 3, each host might be running P2P bots or legitimate P2P
applications or both, and each P2P bot or each legitimate P2P
application generates different types of network ﬂow clusters.
Our community detection aims to cluster the same type of
P2P network ﬂow clusters generated by different bots into the
same network ﬂow cluster community. As such, each network
ﬂow cluster should only belong to a single network ﬂow
cluster community, but each host might belong to different
host communities. Also, each botnet might contain several
different network ﬂow cluster communities. Once one network
ﬂow cluster community has been detected as belonging to a
botnet, we consider the corresponding hosts as bots.

We used Louvain method, a modularity-based commu-
nity detection algorithm [28], due to (a) its deﬁnition of a
good community detection result (high density of weighted
edges within communities and low density of weighted edges
between communities) is perfect-suited for our P2P botnet
community detection problem; (b) it outperforms many other
modularity methods in terms of computation time [28]; and
(c) it can handle large network data sets (e.g., the analysis of
a typical network of 2 million nodes takes 2 minutes [28]).

Given Gmc = (V, E) as input, Louvain method outputs a set
of network ﬂow cluster communities Com = {com1, com2,
. . . , com|Com|}, where comi = (Vcomi , Ecomi). Vcomi is a
set of network ﬂow clusters in comi. Ecomi is a set of edges,
where ∀ ejk ∈ Ecomi, we have ejk ∈ E and vj, vk ∈ Vcomi.
2) Botnet Communities Detection: Given a set of commu-
nities Com, for each community comi ∈ Com, we calculate
its avgddri and avgmcri as follows.

avgddri =

(cid:80)

ddrj

vj ∈Vcomi
(cid:107)Vcomi(cid:107)

avgmcri =

2 × (cid:80)
mcrjk
∀ejk∈Ecomi
(cid:107)Vcomi(cid:107) × ((cid:107)Vcomi (cid:107) − 1)

(2)

(3)

We deﬁne two thresholds Θavgddr and Θavgmcr. ∀ comi ∈
Com, if avgddri ≥ Θavgddr and avgmcri ≥ Θavgmcr, we
consider comi as a botnet network ﬂow cluster community.

BCAEDZeroAccesseMuleuTorrentDEBCAZeroAccessuTorrentZoom OutDEBCADEBCAcommunity detectionMCG Extractionhostnetwork flow cluster3) Bot Candidates Detection: Recall from Section III-C3,
the MCG of botnet communities usually have a structure of
one or several cliques. Therefore, we used a maximum clique
detection method CliqueDetection to verify each bot network
ﬂow cluster from botnet network ﬂow cluster communities,
and further identify bot candidates. Each time it tries to detect
one or several maximum cliques on the given botnet (network
ﬂow cluster) communities. If the maximum clique (at least
containing 3 vertices) has been found, we consider the network
ﬂow clusters in that clique as bot network ﬂow cluster, and
run the maximum clique detection algorithm on the remaining
parts, until no more qualiﬁed maximum cliques to be found.
Afterwards, we report the corresponding source hosts of the
identiﬁed bot network ﬂow clusters as the bot candidates.

Algorithm 3 P2P Botnet Detection
input: Gmc, Θavgddr, Θavgmcr
output: Sbot

1: SbotF CCom = Ø, SbotF C = Ø, Sbot = Ø
2: Com ← Louvain(Gmc)
3: for comi ∈ Com do
avgddri ←

ddrj

(cid:80)

4:

vj ∈Vcomi
(cid:107)Vcomi (cid:107)

5:

6:
7:

avgmcri ←
if avgddri ≥ Θavgddr and avgmcri ≥ Θavgmcr then

2×(cid:80)
mcrjk
∀ejk ∈Ecomi
(cid:107)Vcomi (cid:107)×((cid:107)Vcomi (cid:107)−1)

SbotF CCom ← SbotF CCom ∪ {comi}

end if

8:
9: end for
10: for comi ∈ SbotF CCom do
11:
12:
13:

SbotF C ← CliqueDetection(comi)
for F Ci ∈ SbotF C do
j ∈ F Ci do
Sbot ← Sbot ∪ {ipsrc}

for f i

end for

14:
15:
16:
17: end for
18: return Sbot

end for

V. EXPERIMENTAL EVALUATION

A. Experiment Setup

1) Experiment Environment: All the experiments were con-
ducted on a PC with an 8 core Intel i7-4770 Processor, 32GB
RAM, running 64-bit Ubuntu 16.04 LTS operating system. Our
system was implemented using Java with JDK 8.

2) Data Collection and Analysis Tool: We used three main
datasets: (a) 24 hours network traces of 4 popular legitimate
P2P applications, (b) 24 hours network traces of 5 P2P botnets,
and (c) 24 hours network traces from a Trans-Paciﬁc backbone
line between the United States and Japan as the background
network traces (non-P2P & manually veriﬁed P2P).

Legitimate P2P network traces (Dp2p): Our legitimate
P2P network traces Dp2p were obtained from the University of
Georgia [8], which collected the network traces of 4 popular
P2P applications for several weeks. We obtained the network
traces of 16 eMule hosts, 16 FrostWire hosts, 14 uTorrent hosts

7

TABLE III: Traces of Legitimate P2P Networks (24 hours)

Trace
eMule
FrostWire
uTorrent
Vuze

# of hosts
16
16
14
14

# of ﬂow
4,181,845
4,479,969
10,774,924
7,577,039

# of dstIP
725,367
922,000
2,326,626
1,208,372

Size
42.1G
11.9G
57.1G
20.3G

TABLE IV: Traces of P2P Botnets (24 hours)

Trace
Storm
Waledac
Sality
Kelihos
ZeroAccess

# of bots
13
3
5
8
8

# of ﬂow
8,603,399
1,109,508
5,599,440
122,182
709,299

# of dstIP
145,967
29,972
177,594
944
277

Size
5.1G
1.1G
1.5G
343.9M
75.2M

TABLE V: Traces of Background Network

Date
2014/12/10

Dur
24 hours

# of hosts
48,607,304

# of ﬂow
407,523,221

Size
788.7G

and 14 Vuze hosts by randomly selecting a set of continuous
24 hours network traces of each host (as shown in Table III).
P2P botnets network traces (Dbot): Part of our bot-
nets network traces were from the University of Georgia
[8], containing 24 hours network traces of 13 Storm hosts
and 3 Waledac hosts. We also collected 24 hours network
traces of another three P2P botnets, Sality, Kelihos and Ze-
roAccess. These network traces were all collected from the
hosts manually infected by the binary samples of Kelihos,
ZeroAccess, and Sality obtained from [29]. Our data collection
was operated in a controlled environment, where all malicious
activities were blocked. The same data collection settings were
used in several previous works [2], [4], [8]. We collected the
network traces of 8 Kelihos bots, 8 ZeroAccess bots and 5
Sality bots (as shown in Table IV).
Background network traces (Db

p2p): We used
a dataset from the MAWI Working Group Trafﬁc Archive
[7] as our background network traces, containing 24 hours
anonymized and payload-free network traces at the transit
link of WIDE (150Mbps) to the upstream ISP on 2014/12/10
(as shown in Table V). The dataset contains approximate
407,523,221 ﬂows and 48,607,304 unique IPs. 79.3% ﬂows
are TCP ﬂows and the rest are UDP ﬂows.

non and Db

We investigated the background network traces, and made
our best effort to separate the P2P trafﬁc (Db
p2p) from the non-
P2P trafﬁc (Db
p2p). Since the WIDE dataset was anonymized
and payload-free, it prevented us from using payload analysis
to thoroughly check if P2P trafﬁc, especially P2P Botnet trafﬁc
existing there. Instead, we used port analysis to manually
detect P2P trafﬁc within the background dataset. This is based
on the simple concept that many P2P applications have default
ports on which they function (see [30] for a list of default
network ports of popular P2P applications). We manually
examined all the network ﬂows of each host in the background
network traces. If a host involved in more than ﬁve ﬂows using
any of the default P2P port values in either source port or
destination port, we considered the host as a P2P host. After
this procedure, we identiﬁed 667 P2P hosts.

One thing worth to be noticed is that despite the whole back-
ground network traces lasting for 24 hours, not all these P2P

TABLE VI: Active Time of P2P hosts within the Background Network Trace
(Pi is the set of P2P hosts have no less than i × 15 minutes active time.)

-
P1
P2
P4

# of hosts
667
325
180

-
P8
P14
P20

# of hosts
66
38
26

-
P32
P48
P96

# of hosts
21
13
4

TABLE VII: Summaries of Experimental Datasets (EDs)

Descriptions
the # of EDs
the # of bots (Dbot) in each ED
the # of legitimate P2P hosts (Dp2p) in each ED
the # of P2P hosts (Db
the # of internal hosts in each ED
the AVG # of external hosts in each ED
the AVG # of ﬂow in each ED
the duration of each ED

p2p) in each ED

Values
100
37
60
667
10,000
8,642,618
97,640,210
24 hr

hosts were active for the entire 24 hours. P2P hosts that did not
have enough active time, may not produce sufﬁcient network
ﬂows for our system to work (as discussed in Section V-B). To
ensure a fair and rigorous evaluation, we estimated the active
time of each P2P host. We divided the 24 hours background
network traces into 96 15-minute blocks. If a P2P host had
any network ﬂow fell in a block, we considered it was active
in that block. We used the number of blocks where a P2P
host was active to estimate the active time of each P2P host.
Table VI reﬂects the active time distribution of these P2P hosts.
As shown in Table VI, even though there were 667 P2P hosts
in total, only 4 of them had been active for the entire 24 hours
and 26 of them had been active for no less than 5 hours.

We used ARGUS [31] to process and cluster network traces

into the 5-tuple format tcp/udp ﬂow.

3) Experimental Dataset Generation: As illustrated in
Fig. 1a, we consider a scenario that an organization has a set
of internal hosts communicating with a set of external hosts
(outside of the organization), and our system is deployed at
the boundary of the organization. Since our original datasets
did not maintain a internal-external network structure while
collecting them, we generated synthetic experimental datasets
by mixing network traces from the original datasets. We
considered a case that contains 10,000 internal hosts. For each
synthetic experimental dataset, the 667 P2P hosts in Db
p2p were
considered as the internal hosts. Another 9,333 internal hosts
were sampled from Db
non, where the trafﬁc of 37 randomly
selected hosts were mixed with the trafﬁc of 37 P2P bots in
Dbot, and the trafﬁc of another 60 randomly selected hosts
were mixed with the trafﬁc of 60 P2P hosts in Dp2p. To make
the experimental evaluation as unbiased and challenging as
possible, we propose to sample the internal hosts and generate
the synthetic experimental datasets under the following two
criterions.

Maintain a bipartite network structure. Our system aims
to deploy at a network boundary (e.g., ﬁrewall, gateway,
etc.), where the network forms a bipartite structure, and only
network ﬂow within the connections between internal hosts
and external hosts could be captured. Then, the network in
each experimental dataset should maintain a bipartite network
structure, where any pair of internal hosts should not have any
communications to each other.

8

Keep the connectedness of mutual contacts graph. The
easiest way to obtain a list of background hosts is to sample
the hosts randomly from Db
non, with the respect of bipartite
structure. However, since Db
non contains an extremely large
number of hosts, simply sampling hosts randomly will result
in that most of the sampled background hosts do not have
a mutual contact with the other background hosts, which is
much easier for our system to identify botnet communities.
Because less number of mutual contacts among legitimate
hosts means more disconnected legitimate communities in the
corresponding MCG, which happens to be in favor of Louvain
method to detect strongly connected botnet communities.
Therefore, we need to sample a list of internal hosts in a way
that every internal host should have at least one mutual contact
with at least one another internal host.

To follow the criterions described above without making our
evaluation tasks any easier, we propose the following synthetic
experimental dataset generation procedure:

• Use a two-coloring approach to sample the network traces
from Db
non without jeopardize the bipartite network structure
and the connectedness of mutual contacts graph: (a) initialize
two counters, Cblack and Cwhite, to count the number of
hosts colored in black and white respectively; (b) coloring a
random host hi as black, and Cblack plus one; (c) coloring all
contacts of hi as white, and increase Cwhite by the number
of hosts colored as white in this round; (d) for each new
colored host, color its contacts with the opposite color, and
adjust the counters repeatedly, until we have Cblack ≥ 9, 333
and Cwhite ≥ 9, 333; (e) select the colored host set with
exactly 9,333 hosts as the internal hosts, the hosts in the
other set will be the external hosts; and (f) extract the network
traces of the 9,333 internal hosts from Db
non. Then, it forms a
bipartite graph, where each colored host set forms a bipartite
component, and each host shares at least one mutual contacts
with some other hosts from its own bipartite component.

• To maintain a bipartite network structure of botnets and
legitimate P2P hosts, we eliminate all communications among
bots in Dbot, and P2P hosts in Dp2p and Db

• To mix Dbot and Dp2p with Db

non, each time we randomly
select 97 internal hosts out of 9,333 background hosts, map
the 97 hosts IPs to 37 bots IPs (Dbot) and 60 legitimate P2P
hosts IPs (Dp2p), and merge the corresponding network traces.
To evaluate our system, 100 synthetic experimental datasets
were generated by running this procedure. Table VII illustrates
the summaries of the experimental datasets (EDs).

p2p.

B. Evaluation on P2P Network Flow Detection

We evaluated the P2P network ﬂow detection with different
Θdd. We applied this component on all 100 EDs, and Ta-
ble VIII shows the average detection rate and false positives
with different Θdd, ranging from 2 to 13,500. If Θdd is set
too small, non-P2P hosts are likely to be detected as P2P
hosts, which results in many false positives. For instance,
when 2 ≤ Θdd ≤ 5, at least 110 non-P2P hosts were falsely
identiﬁed as P2P hosts. If Θdd is set too large, all P2P hosts
will be removed, which results in false negatives. For instance,
when Θdd = 10, 000, most of the P2P hosts were falsely
discarded, and only 18 P2P hosts were detected.

9

TABLE VIII: Detection Rate and False Positive Rate For Different Θdd (Pi is the set of P2P hosts within the background network traces that have no less
than i × 15 minutes active time. All the hosts of 4 legitimate P2P applications and 5 P2P botnets have 24 hours active time.)

Θdd

2
5
10
30
50-180
185
200
500-1,000
5,000
10,000
12,500
13,500

Bot
37/37
37/37
37/37
37/37
37/37
37/37
29/37
21/37
13/37
0/37
0/37
0/37

P2P
60/60
60/60
60/60
60/60
60/60
60/60
60/60
60/60
45/60
18/60
5/60
0/60

P1
667/667
364/667
156/667
36/667
15/667
6/667
4/667
1/667
0/667
0/667
0/667
0/667

P2
325/325
242/325
133/325
36/325
15/325
6/325
4/325
1/325
0/325
0/325
0/325
0/325

Detection Rate
P4
180/180
180/180
106/180
36/180
15/180
6/180
4/180
1/180
0/180
0/180
0/180
0/180

P8
66/66
66/66
66/66
33/66
15/66
6/66
4/66
1/66
0/66
0/66
0/66
0/66

P14
38/38
38/38
38/38
30/38
15/38
6/38
4/38
1/38
0/38
0/38
0/38
0/38

P20
26/26
26/26
26/26
26/26
15/26
6/26
4/26
1/26
0/26
0/26
0/26
0/26

P32
21/21
21/21
21/21
21/21
15/21
6/21
4/21
1/21
0/21
0/21
0/21
0/21

P48
13/13
13/13
13/13
13/13
13/13
6/13
4/13
1/13
0/13
0/13
0/13
0/13

P96
4/4
4/4
4/4
4/4
4/4
4/4
2/4
1/4
0/4
0/4
0/4
0/4

False Positive Rate

1,052/9,236
110/9,236
44/9,236
4/9,236
0/9,236
0/9,236
0/9,236
0/9,236
0/9,236
0/9,236
0/9,236
0/9,236

TABLE IX: Community Detection Results For Different Θmcr

Θmcr
[0.00, 0.15)
[0.15, 0.40)
[0.40, 1.00)

BSI
1.00 ± 0.00
1.00 ± 0.00
1.00 ± 0.00 ≤ 0.62 ± 0.05

BAI
0.85 ± 0.00
0.83 ± 0.02

BLSI
1.00 ± 0.00
1.00 ± 0.00
1.00 ± 0.00

On the other hand, the effectiveness of Θdd is also subject
to the active time of P2P hosts. Since if a P2P host has less
active time, it tends to generate less number of P2P network
ﬂows to show enough destination diversity, so that it will not
be distinguished from non-P2P network ﬂows by our system.
For instance, since all the bots and P2P hosts in Dbot and
Dp2p had 24 hours active time, our system can distinguish
them well from the non-P2P network ﬂows. However, not all
the P2P hosts in Db
p2p were active for the entire 24 hours. As
shown in Table VIII, when the active time of a P2P host was
less than 5 hours (not belonging to P20, the set of hosts have
no less than 20 × 15 minutes active time), it was hard for our
system to detect P2P network ﬂows from non-P2P network
ﬂows (Θdd < 30). Hence, when considering P2P hosts that
had no less than 12 hours active time (P48), and setting 30 ≤
Θdd ≤ 180, our system detected all P2P hosts with a small
number of false positives (≤ 4/9, 236), which demonstrated
that our P2P network ﬂow detection component is stable and
effective over a large range of Θdd settings.

C. Evaluation on Community Detection

We evaluated the performance of community detection with
different Θmcr. We applied this component on the remaining
network ﬂows (100 EDs) of the previous component (with
Θdd = 30). For each ED, our system generated a MCG Gmc =
(V, E) with a pre-deﬁned threshold Θmcr, where each edge
eij ∈ E contained a weight mcrij ∈ [0.0, 1.0]. Afterwards, we
applied Louvain method (with default resolution 1.0) on the
MCG for community detection. The choice of Θmcr would
have an inﬂuence on the community detection results.

We evaluated the community detection performance in terms
of (a) the ability to cluster a pair of bots belonging to the
same botnet, (b) the ability to separate a pair of bots coming
from different botnets, and (c) the ability to separate bots and
legitimate applications. As such, we propose three criterions
to evaluate the community detection performance below.

Given a set of bots belonging to n botnets X = {X1, X2,
. . . , Xn} (the ground truth), and the community detection
results, m communities Y = {Y1, Y2, . . . , Ym}, deﬁne Bot
Separation Index (BSI) and Bot Aggregation Index (BAI)
as BSI = a/(a + c) and BAI = a/(a + b), where a is the
number of pairs of bots that are in the same botnet in X, and
in the same community in Y ; b is the number of pairs of bots
that are in the same botnet in X, and in different communities
in Y ; c is the number of pairs of bots that are in different
botnets in X, and in the same community in Y . BSI denotes
the degree of that bots coming from different botnets being
separated into different communities. BAI denotes the degree
of that bots coming from the same botnet being clustered into
the same community. Both BSI and BAI are between 0.0 and
1.0, and the higher the better. “BSI equals to 1.0” means all
different types of bots are well separated, and “BAI equals to
1.0” means all the same types of bots are well clustered.

Given p bots and q legitimate applications, deﬁne Bot-
Legitimate Separation Index (BLSI) as BLSI = d/(p × q),
where d is the number of pairs of a bot and a legitimate
application being separated into different communities via our
method. BLSI indicates the ability of our method to separate
bots and legitimate applications. BLSI is between 0.0 and 1.0,
and the higher the better. “BLSI equals to 1.0” means all pairs
of one bot and one legitimate application are well separated.
Table IX shows the community detection results with dif-
ferent Θmcr, ranging from 0.0 to 1.0. If Θmcr is set too
small, there will be more non-zero weight edges, which might
result in less but larger communities. On the other hand, if
Θmcr is set too large, most of the vertices will be isolated,
which results in more but smaller communities. For instance,
as Θmcr increasing, BSI decreased. When Θmcr ≤ 0.4,
BSI was around 0.8 to 0.85, meaning one or more botnets
turned out
have been split
to be our algorithm separates the Storm botnet (13 bots)
into two communities, one containing 10 bots and another
containing 3 bots. Changing Θmcr does not affect BSI and
BLSI. BSI=1.0 means our system separates different types of
bots into different communities. BLSI=1.0 means our system
separates bots and legitimate P2P applications into different
communities. The result demonstrated that our system is very
effective and robust in separating bots and legitimate hosts, and
separating different types of bots. Since larger Θmcr will result

into different communities. It

TABLE X: Botnet Detection Results For Different Θavgddr and Θavgmcr.
(ZeroA.: the detection rate of ZeroAccess; FP: the number of false positives.)

Θavgmcr

0.0

0.05

0.1

0.15-0.35

0.4

0.6-0.8

-
ZeroA.
Waledac
Storm
Kelihos
Sality
Precision
Recall
FP
F-score
ZeroA.
Waledac
Storm
Kelihos
Sality
Precision
Recall
FP
F-score
ZeroA.
Waledac
Storm
Kelihos
Sality
Precision
Recall
FP
F-score
ZeroA.
Waledac
Storm
Kelihos
Sality
Precision
Recall
FP
F-score
ZeroA.
Waledac
Storm
Kelihos
Sality
Precision
Recall
FP
F-score
ZeroA.
Waledac
Storm
Kelihos
Sality
Precision
Recall
FP
F-score

100%
60

100%
90

100%
100%
100%
100%
100%

100%
100%
100%
100%
100%

0.8
100%
100%
100%
100%
0%

0.6
100%
100%
100%
100%
100%

0.2
100%
100%
100%
100%
100%

Θavgddr
0.0
0.4
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
28.9% 29.1% 29.3% 38.1% 34.8%
86.5%
100%
100%
60
89
91
44.8% 45.1% 45.4% 55.2% 49.6%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
0%
100%
33.9% 34.2% 34.9% 47.4% 43.8%
100%
100%
86.5%
100%
100%
41
71
72
41
69
51.7% 64.3% 58.2%
51%
50.7%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
0%
100%
100%
100%
100%
100%
100%
56.0% 56.9% 56.9%
86.5%
100%
81%
100%
100%
0
0
28
28
29
92.8%
100%
71.8% 72.5% 72.5%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
0%
100%
100%
100%
100%
100%
100%
100%
100%
100%
86.5%
100%
100%
100%
100%
0
0
0
0
0
92.8%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
84.6% 84.6% 84.6% 84.6% 76.9%
100%
100%
100%
0%
100%
100%
100%
100%
100%
94.6% 94.6% 94.6% 94.6% 78.4%
0
97.2% 97.2% 97.2% 97.2% 87.9%
100%
100%
100%
0%
100%
100%
0%
0%
0%
100%
100%
100%
0%
100%
100%
100%
100%
100%
64.9% 64.9% 64.9% 64.9% 43.2%
0
78.7% 78.7% 78.7% 78.7% 60.4%

100%
100%
0%
100%
100%
100%

100%
100%
0%
100%
100%
100%

100%
100%
100%

100%
100%
100%

0

0

0

0

0

0

0

0

in less edges in the MCG, which could reduce the execution
time of community detection, we used Θmcr = 0.1 as our
system parameter.

D. Evaluation on Botnet Detection

We evaluated the botnet detection component with different
parameter settings. We applied this component on the remain-
ing network ﬂows (100 EDs) of the previous component (with
Θdd = 30 and Θmcr = 0.1). We assumed that all the host in
the background trace (Db and Db
p2p) were not malicious, and
would be reported as false positives if being detected.

10

Table X shows the P2P botnet detection results which
supports our idea that the AVGDDR of legitimate P2P network
ﬂow cluster communities is lower than most of the P2P botnets
network ﬂow cluster communities. For instance, the AVGDDR
of all (60/60) legitimate P2P network ﬂow cluster communities
were higher than 0.6, and the AVGDDR of 32 out of 37 botnets
were higher than 0.8. The other 5 turned out to be 5 Sality bots,
which could be detected by AVGMCR. Also, the legitimate
P2P network ﬂow clusters have lower AVGMCR than P2P
bots (i.e., Θavgmcr ∈ [0.15, 0.35]). For most of the botnets
(i.e., ZeroAccess, Waledac, Kelihos and Sality), our system
is effective (100% detection rate with zero false positive)
and stable over a large range of Θavgddr (i.e.,
[0.0, 0.6])
and Θavgmcr (i.e., [0.15, 0.8]). Storm has a relative small
AVGMCR, hence the effective parameters narrowed down to
Θavgddr ∈ [0.0, 0.6] and Θavgmcr ∈ [0.15, 0.35].

E. Evaluation on Enhanced PeerHunter

1) Analyzing the System Effectiveness: We applied En-
hanced PeerHunter on 100 EDs, with Θdd=30, Θmcr=0.1,
Θavgddr=0.6 and Θavgmcr=0.15, and all the results were av-
eraged over 100 EDs. Using Θavgddr=0.6 and Θavgmcr=0.15
was based on our empirical study (shown in Table X). As
illustrated in Table XI, our system identiﬁed all 97 P2P hosts
from 10,000 hosts, and detected all 37 bots from those 97
P2P hosts, with zero false positive, which demonstrated that
Enhanced PeerHunter is effective and accurate in detecting
P2P botnets.

2) Analyzing the System Scalability: The system scala-
bility is to evaluate the practicality of our systems to deal
with the real world big data. First, we applied Enhanced
PeerHunter on 100 EDs of 10,000 internal hosts to analyze
the processing time of each component. Our system has a
scalable design based on efﬁcient detection algorithm and
distributed/parallelized computation. As shown in Table XI,
community detection and botnet detection had negligible
processing time compared with P2P network ﬂow detection
and MCG extraction, since our ﬁrst
two steps (i.e., P2P
network ﬂow detection and MCG extraction) were designed
to reduce a huge amount of the hosts subject to analysis
(i.e., 99.03% in our experiments). The P2P network ﬂow
detection component has linear time complexity, since it scans
all the input ﬂows only once to get the ﬂow clusters and
further detect P2P ﬂow clusters. However, since it
is the
very ﬁrst component to process the input data (data could
be large), it still costs the highest processing time (i.e., 15
minutes). To accommodate the growth of a real-world input
data, we designed and implemented the P2P network ﬂow
detection component using a MapReduce framework, which
could be deployed in distributed fashion on scalable cloud
computing platforms (e.g., amazon EC2). The MCG extraction
component requires pairwise comparison to calculate edges
weights. Let n be the number of P2P network ﬂow clusters
subject to analysis and m be the maximum number of distinct
contacts of a P2P network ﬂow cluster. We implemented the
comparison between each pair of hosts parallelly to handle the
growth of n. If we denote k as the number of threads running

TABLE XI: The number of hosts identiﬁed by each component

-
# of hosts

Before P2P detection
10,000

P2P detection
97

Community detection
97

Botnet detection
37

TABLE XII: Enhanced PeerHunter Execution Time

-
Processing Time

P2P Network Flow Detection MCG Extraction

15 minutes

5 minutes

Community Detection
5 seconds

Bot Detection
10 seconds

Total
20 minutes

11

Fig. 5, we used precision, recall and false positives to eval-
uate the effectiveness of different parameter combinations.
As discussed in Section V-B, Θdd is used to detect P2P
network ﬂow clusters. Larger Θdd tends to result in more false
negatives (lower recall), and smaller Θdd tends to result in
more false positives (lower precision). For instance, changing
Θdd from 30 or 50 to 10 resulted in 47 or 42 more false
positives (Θavgddr = 0.15) as shown in Fig. 5c and Fig. 5f,
respectively. When Θdd ∈ {30, 50}, Θavgddr ∈ [0.15, 0.35]
and Θavgddr ∈ [0.2, 0.6], our system yielded 100% detection
rate with zero false positive. Even when Θdd = 10, our system
can still work effectively with Θavgddr ∈ [0.25, 0.35] and
Θavgddr ∈ [0.2, 0.6]. This demonstrated our system can work
effectively over several different parameter combinations.

4) Analyzing the “True” False Positives when Θdd = 10:
In this section, we discuss about some interesting ﬁndings
about the false positives resulted from setting Θdd = 10. As
discussed in Section III-C2, Θavgddr is used to capture the
“P2P behavior” of network ﬂows, and Θavgmcr is used to
capture the “botnet behavior” of network ﬂows. Hence, if we
use a larger Θavgddr (i.e., 0.6) and a smaller Θavgmcr (i.e.,
0.0), most of the false positives should be legitimate P2P host.
For instance, in Fig. 5f, when Θdd = 10, Θavgddr = 0.6
and Θavgmcr = 0.0, 115 out of 118 false positives were
P2P hosts (60 from Dp2p and 55 from Db
p2p). On the other
hand, we assume that if we use a smaller Θavgddr (i.e., 0.2)
and a larger Θavgmcr (i.e., 0.15), some of the false positives
might come from the other types of botnets. As shown in
Fig. 5c, when Θdd = 10, Θavgddr = 0.2 and Θavgmcr = 0.15,
9 out of 47 false positives were not our known legitimate
P2P hosts. We investigated these false positives, with their
anonymized and payload-free network traces. It turned out
that, 4 out of the 9 false positives (i.e., “180.217.2.181”,
“180.217.2.246 ”, “180.217.2.248” and “180.217.2.177”) were
listed in the Barracuda Reputation Block List (BRBL) [32],
a highly accurate list of the IP addresses known to send
spam. Hence, we are convinced that
those false positives
were infected with virus or botnets. These interesting “true”
false positives ﬁndings demonstrated that our system has the
potential to detect other unknown botnets.

F. Mimicking Legitimate P2P Application Attacks (MMKL)

Our work is focusing on detecting P2P botnets from legit-
imate P2P applications. If the adversaries (e.g., botmasters)
know our techniques in advance, they might attempt to evade
our system via instructing P2P bots to mimic the behavior of
legitimate P2P applications. Inspired by [2], in this section,
we propose two evasion attacks. All the parameters used in
experiments of this Section were the same as in SectionV-E.

Fig. 4: Processing time with different data size and Θdd.

parallelly, the time complexity of MCG extraction is O( n2m
k ).
For a given ISP network, m grows over time. Since our system
uses a ﬁxed time window (24 hours), for a given ISP network,
m tends to be stable and would not cause a scalability issue.
Besides, since the percentage of P2P hosts of an ISP network is
relatively small (i.e., 3% [2]), an ISP network usually has less
than 65,536 (/16 subnet) hosts, and most P2P hosts generate
less than 150 P2P network ﬂow clusters (our empirical study),
n would be negligible compared with m. Moreover, since
the waiting stage bots always act stealthily and only make
necessary communications, m also will not be large. We also
tested our system using different sizes (i.e., different number
of internal hosts) of EDs. For each size, we generated 10 EDs,
and recorded the average processing time of our system with
different Θdd. As shown in Fig. 4, compared with the size
of datasets, Θdd has more inﬂuence on the system scalability.
Because in our P2P network ﬂow detection component, Θdd
has an impact on n (the number of P2P network ﬂow clusters
subject to analysis), and larger Θdd leads to smaller n, thus
less processing time. For instance, when Θdd = 10 or 30,
the increase of processing time, caused by increasing the size
of data, was much less than when Θdd = 2. Therefore, our
system is very scalable on different sizes of data with an
appropriate Θdd (e.g., 10 or 30). Also, by tuning Θdd, our
system has the potential to deal with different size of datasets
in a reasonable time. To summarize, Enhanced PeerHunter is
scalable to handle the real world network data.

3) Analyzing the Effectiveness of System Parameters:
Although we had analyzed the effectiveness of Θdd, Θavgddr
and Θavgmcr within the corresponding components, the ef-
fectiveness of combinations among different values of Θdd,
Θavgddr and Θavgmcr has not been studied. As shown in

357101520253035404550# of internal hosts ( 103)012345678Processing Time (in hours)dd=30dd=10dd=212

(a)

(d)

(b)

(e)

(c)

(f)

Fig. 5: Precision, recall and false positives given different Θdd, Θavgddr and Θavgmcr (Θmcr = 0.05).

TABLE XIII: Comparison of the community detection results between Peer-
Hunter [5] and Enhanced PeerHunter under PMMKL.

-

BSI
BAI
BLSI

PeerHunter [5]

Enhanced PeerHunter

No Attack
1.00 ± 0.00
1.00 ± 0.00
1.00 ± 0.00

PMMKL
0.73 ± 0.02
0.81 ± 0.01
0.78 ± 0.01

No Attack
1.00 ± 0.00
0.85 ± 0.00
1.00 ± 0.00

PMMKL
1.00 ± 0.00
0.85 ± 0.00
1.00 ± 0.00

1) Passive MMKL (PMMKL): In this attack, the botmaster
can instruct
the bots to passively generate network trafﬁc
together with legitimate P2P applications running on the same
machine at the same time. As such, the botnet trafﬁc will
be overlapped with the legitimate P2P trafﬁc. Since during
most of the time, P2P botnets will be acting stealthily, the
legitimate P2P trafﬁc will dominate the host level behavior.
Hence, the attack could effectively evade the host level group
behavior based methods [4], [5]. Also, the attack does not
require the botnets to generate more or new types of network
ﬂows, and just need to monitor the legitimate P2P application
activities, which can evade certain anomaly-based methods.
Since our detection algorithm is based on network-ﬂow level
mutual contacts graph, which could differentiate the network
ﬂows coming from different P2P applications, it is capable of
detecting P2P bots while the bots trafﬁc and the legitimate
P2P trafﬁc are overlapped on the same host.

To simulate this attack on each ED, we randomly selected
37 hosts out of the 60 legitimate P2P application hosts, and
randomly mapped their IPs to 37 bots’ IPs. By doing this,
the trafﬁc of each bot were overlapped with the trafﬁc of
one legitimate P2P host. And we made a comparison between
Enhanced PeerHunter and PeerHunter [5] under this attack,

where PeerHunter [5] was using one of its best parameter
setting Θdd=50, Θmcr=0.05, Θavgddr=0.06 and Θavgmcr=0.2.
As shown in Table XIII, all three community detection indices
(i.e., BSI, BAI and BLSI) decreased around 20% while running
PeerHunter under this attack. However, PMMKL had no
effects on Enhanced PeerHunter’s community detection per-
formance. As shown in Table XIV, PMMKL completely failed
PeerHunter in detecting ZeroAccess, Waledac and Kelihos,
and dramatically reduced the detection rate of Storm and
Sality. On the contrary, PMMKL had no affects on Enhanced
PeerHunter’s P2P botnet detection performance.

To summarize, compared with our previous work, Enhanced
PeerHunter can detect P2P botnets effectively even if bots are
running on the same host as legitimate P2P applications.

2) Active MMKL (AMMKL): In this attack, the botmaster
can instruct the bots to mimic the behaviors of legitimate
P2P applications actively. For instance, each bot can actively
communicate with an extra set of randomly selected peers
to decrease the rate of mutual contacts between a pair of
bots. Compared with PMMKL, in AMMKL, bots do not need
to monitor and wait until some legitimate P2P application
running to work. However, communicating with much more
extra but unnecessary peers will lead the botnets to act less
stealthy and less efﬁcient, and enable certain anomaly-based
methods (e.g., high volumes of network trafﬁc) to detect them.
To simulate this attack on each ED, after the P2P network
ﬂow detection procedure, for each botnet network ﬂow cluster
that communicates with n peers, we inserted certain network
ﬂows communicating with an extra of γ ∗ n randomly selected
peers. As shown in Fig. 6, our community detection com-

00.050.10.150.20.250.30.350.4avgmcr00.10.20.30.40.50.60.70.80.91Precision (avgddr=0.2)dd=10dd=30dd=5000.10.20.30.40.50.60.70.8avgmcr00.10.20.30.40.50.60.70.80.91Recall (avgddr=0.2)dd=10dd=30dd=5000.050.10.150.20.250.30.350.4avgmcr050100150200250False Positives (avgddr=0.2)dd=10dd=30dd=5000.050.10.150.20.250.30.350.4avgmcr00.10.20.30.40.50.60.70.80.91Precision (avgddr=0.6)dd=10dd=30dd=5000.10.20.30.40.50.60.70.8avgmcr00.10.20.30.40.50.60.70.80.91Recall (avgddr=0.6)dd=10dd=30dd=5000.050.10.150.20.250.30.350.4avgmcr050100150200250False Positives (avgddr=0.6)dd=10dd=30dd=5013

TABLE XIV: Comparison of the botnet detection results under no attack and PMMKL attack. (* detection rate)

-

ZeroAccess*
Waledac*
Storm*
Kelihos*
Sality*
Precision
Recall
FP
F-score

PeerHunter [5]

No Attack
100%
100%
100%
100%
100%
100%
100%
0/9,963
100%

PMMKL
0%
0%
37.5%
0%
79.2%
99.1%
23.9%
39/9,926
38.5%

Enhanced PeerHunter
PMMKL
No Attack
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
100%
0/9,926
0/9,963
100%
100%

Zhang et al. [2] (Θbot = 0.6)
No Attack
100%
100%
97.8%
85.5%
89.6%
100%
94.7%
0/9,963
97.3%

PMMKL
82.5%
0%
61.5%
45%
80%
100%
60%
0/9,926
75%

Zhang et al. [2] (Θbot = 0.8)
No Attack
100%
100%
100%
85.5%
96.8%
60.8%
96.4%
23/9,963
74.6%

PMMKL
90%
60%
95.4%
77.5%
88%
62.7%
86.5%
19/9,926
72.7%

ponent is robust to AMMKL, since both BAI and BLSI were
unchanged and only BSI dropped a little bit when γ increased.
When combining both attacks, both BSI and BAI dropped a
lot, and BLSI dropped from 1.0 to around 0.88, as γ increasing
from 0.0 to 3.0. This is because when combining both attacks,
as γ increasing, the community detection component tends to
cluster different types of bots into the same community and
separate the same type of bots into different communities. The
good news is, it can still well separate bots and legitimate P2P
hosts into different communities. In summary, even though
combining both attacks makes it harder for our method to
separate different or aggregate the same type of bots, Enhanced
PeerHunter is still robust in separating P2P bots from other
hosts in the community detection process.

As shown in Fig. 7c, both scenarios (i.e., AMMKL and
combining both attacks) did not introduce new false positives
(i.e., precisions equals to 1.0). Compared with conducting
AMMKL, combining both attacks has more inﬂuences on the
dropping of detection rate. Fig. 7a and Fig. 7b illustrate the
detection rate of each botnet under two different scenarios,
where the detection rate of different botnets started to drop
around different γ. Table XV shows the analysis of all 5
botnets. Take Storm for instance, to affect the detection of
Storm, each P2P network ﬂow cluster of Storm needs to
communicate with at least an extra 40% of its current peers,
and in order to completely evade our system, γ needs to be
increased to 80%. Consider the fact that each Storm host
generates an average of 67 P2P network ﬂow clusters in 24
hours, and each network ﬂow cluster communicates to an
average of 740 peers. As such, to completely evade our system,
each Storm host must communicate with at least an extra
of 67 × 740 × 80% ≈ 39, 664 peers. In this case, it makes
the P2P botnet less stealthy, less efﬁcient and more exposed
to trigger anomaly-based P2P botnet detection approaches
[33]. In conclusion, although our system could not completely
mitigate AMMKL, conducting AMMKL makes the botnets
less stealthy, less efﬁcient and more exposed, which still shows
a winning of our system against P2P botnets.

G. Comparison to Zhang et al. [2]

the ﬁngerprints of hosts that have engaged in P2P activities.
Afterwards, it applies two layers of ﬁltering to detect potential
P2P bots: a coarse-grained ﬁltering to detect “persistent” P2P
hosts that have longer active time of P2P behaviors, and
a ﬁne-grained ﬁltering that applies hierarchical clustering to
group pairs of P2P hosts that have less distance between their
ﬁngerprints. Our system shares many similarities with Zhang
et al. [2]. For instance, both systems are (a) using network
ﬂow-based approach, (b) using unsupervised approach (i.e.,
no knowledge of existing malicious behaviors are required and
have the potential to detect unknown botnets), (c) claiming to
work while the botnet trafﬁc are overlapped with the legitimate
P2P trafﬁc on the same set of hosts, (d) designed to have the
built-in scalability, and (e) deployed at the network boundary
(e.g., gateway), thus could be evaluated on the same datasets.

The main differences between our system and Zhang et al.
[2] are listed as follows. First, two systems are using different
network ﬂow features. Zhang et al. [2] uses the absolute num-
ber of bytes and packets of each ﬂow; Enhanced PeerHunter
two
uses the bytes-per-packet rate of each ﬂow. Second,
systems are using different approach to cluster network ﬂows
(i.e., at different granularity). Zhang et al. [2] uses a two-step
distance-based clustering (i.e., k-means, BIRCH) to cluster
network ﬂows of similar feature values; Enhanced PeerHunter
clusters the network ﬂows that have exactly the same feature
values. Third, two systems apply the botnet detection step at
different levels (i.e., host-level or network-ﬂow-level). Zhang
et al. [2] uses the distance between each pair of hosts to
detect bots; Enhanced PeerHunter uses the distance between
each pair of network ﬂows to detect botnet network ﬂow
communities and then further identify the corresponding bots.
Last but not least, two systems are using different heuristics to
detect botnets. Zhang et al. [2] uses an threshold on the height
of the hierarchical clustering dendrogram to detect bot clusters,
which is very sensitive to the experimental datasets (as shown
in Table XIV); Enhanced PeerHunter uses network-ﬂow level
community behavior analysis (i.e., AVGDDR and AVGMCR)
to identify botnet (network ﬂow) communities, which is more
robust to the proposed attacks and can also be extended to
other/new community behaviors.

We compared our system to one of the state of art P2P
botnet detection system Zhang et al. [2]. They proposed a
scalable botnet detection system capable of detecting stealthy
P2P botnets (i.e., in the waiting stage), where no knowledge of
existing malicious behavior is required in advance. The system
ﬁrst applies a two-step ﬂow clustering approach to create

We implemented a prototype system of Zhang et al. [2],
since Zhang et al. [2] did not have a publicly available
implementation. Most of our implementations followed the
description as in [2], other than the system parallelization,
which has no impact on the system effectiveness evaluation.
The experimental datasets used in both works are also differ-

14

(a)

(b)

(c)

Fig. 6: The community detection results when conducting AMMKL, and when combining PMMKL and AMMKL. (a) Bot Separation Index (BSI). (b) Bot
Aggregation Index (BAI). (c) Bot-Legitimate Separation Index (BLSI).

(a)

(b)

(c)

Fig. 7: The P2P botnet detection results. (a) P2P botnet detection rate when conducting AMMKL. (b) P2P botnet detection rate when combining PMMKL
and AMMKL. (c) Precision, recall and F-score, when conducting AMMKL, and when combining PMMKL and AMMKL.

TABLE XV: Effort needed for different P2P botnets to completely evade Enhanced PeerHunter under AMMKL.

-
ZeroAccess
Waledac
Storm
Kelihos
Sality

# of P2P ﬂow clusters
3
171
67
15
1,158

# of peers per ﬂow cluster
686
244
740
252
918

# of peers per host
2,058
41,724
49,580
3,780
1,063,044

γ
220%
180%
80%
200%
80%

extra # of peers needed
4,528
75,104
39,664
7,560
850,436

ent. For instance, we evaluated our system on 100 synthetic
experimental datasets (of different background trafﬁc and
different topology, as described in Section V-A3) and took
the average results; Zhang et al. [2] was evaluated on single
customized dataset. Furthermore, even though both datasets
use the same 24 hours time window, our datasets have much
more internal hosts (i.e., 10,000 vs. 953), higher legitimate
P2P hosts to P2P bots ratio (i.e., 727:37 vs. 8:16), and more
types of botnets (i.e., 5 vs. 2). To summarize, our experimental
datasets is more challenging and comprehensive.

We applied our implemented Zhang et al. [2] on the same
experimental datasets as Enhanced PeerHunter under two
circumstances (i.e., No Attack and PMMKL). We followed the
same settings for most of the system parameters as described
in [2], such as ΘBGP = 50, Θp2p = 0.5, K = 4, 000, λ = 0.5.
Since the default value of Θbot (i.e., 0.95) used by the original
paper, did not perform well on our dataset, we evaluated Zhang
et al. [2] using two other different well selected values of Θbot
(i.e., 0.6 and 0.8) that shows better results.

From the experimental results (Table XIV), we achieved
several observations as follows. First, Zhang et al. [2] is more
sensitive to the experimental dataset. For instance, Zhang et
al. [2] was reported to achieve 100% detection rate and 0.2%
false positive rate on their own datasets (using Θbot = 0.95),
while could not achieve similar results on our datasets using
either the default parameter (Θbot = 0.95) or the well selected
parameter (Θbot = 0.6 or Θbot = 0.8). Second, as discussed
in Section V-E, our system is more stable and effective over
a large range of system parameters (Θavgddr and Θavgmcr),
while Zhang et al. [2] is more sensitive to its system parameter
(Θbot). For instance, Zhang et al. [2] had higher precision
(lower false positives) and lower recall (higher false negatives)
while using Θbot = 0.6 comparing with using Θbot = 0.8.
Third, our system outperforms Zhang et al. [2] in terms of
the detection rate of different botnets, the overall precision,
recall and false positives. For instance, our system achieved
100% detection rate with zero false positives under different
circumstances, while Zhang et al. [2] failed to detect all the

00.20.40.60.811.21.41.61.822.22.42.62.83Newly Added Network Flow Cluster Destination Peer IPs ( # 100%)  00.10.20.30.40.50.60.70.80.91Bot Separation Index (BSI)PMMKL + AMMKLAMMKL00.20.40.60.811.21.41.61.822.22.42.62.83Newly Added Network Flow Cluster Destination Peer IPs ( # 100%)  00.10.20.30.40.50.60.70.80.91Bot Aggregation Index (BAI)PMMKL + AMMKLAMMKL00.20.40.60.811.21.41.61.822.22.42.62.83Newly Added Network Flow Cluster Destination Peer IPs ( # 100%)  00.10.20.30.40.50.60.70.80.91Bot-Legitimate Separation Index (BLSI)PMMKL + AMMKLAMMKL00.20.40.60.811.21.41.61.822.2Newly Added Network Flow Cluster Destination Peer IPs ( # 100%)  00.10.20.30.40.50.60.70.80.91Detection Rate (DR) - AMMKLZeroAccessWaledacStormKelihosSality00.20.40.60.811.21.41.61.822.2Newly Added Network Flow Cluster Destination Peer IPs ( # 100%)  00.10.20.30.40.50.60.70.80.91Detection Rate (DR) - PMMKL + AMMKLZeroAccessWaledacStormKelihosSality00.20.40.60.811.21.41.61.822.2Newly Added Network Flow Cluster Destination Peer IPs ( # 100%)  00.10.20.30.40.50.60.70.80.91Precision, Recall and F-scoreAMMKL: PrecisionAMMKL: RecallAMMKL: F-scorePMMKL + AMMKL: PrecisionPMMKL + AMMKL: RecallPMMKL + AMMKL: F-scorebots under both well selected parameters. At last, our system
is more robust to PMMKL attack. For instance, PMMKL
attack had no impact on the effectiveness of our system, while
decreasing the F-score of Zhang et al. [2] from 97.3% to 75%
(Θbot = 0.6) or from 74.6% to 72.7% (Θbot = 0.8).

VI. DISCUSSION

A. Evasions and Possible Solutions

the
To avoid being detected by Enhanced PeerHunter,
botmaster could use a combination of the following three
approaches: (a) adding randomized paddings or junk packets
to inﬂuence the bytes-per-packet characteristics for network
ﬂow clustering, (b) reducing the number or rate of destina-
tion diversity, or (c) reducing the number or rate of mutual
contacts. To deal with the randomized spatial-communication
behavior, we could adopt more time-communication features,
such as packet/ﬂow duration and inter-packet delays, or apply
more generalized features, such as the distribution, mean or
standard deviation of bytes-per-packet. The other two evasion
approaches would be the victory of our system. On one hand,
to reduce the number or rate of destination diversity, a bot has
to limit its communication to the network of certain locations,
which degrades the P2P botnet into a centralized fashion. On
the other hand, reducing the number of mutual contacts means
there will be less bots targeting on the same set of victims, and
less bots playing the role as botmasters, which will jeopardize
the effectiveness and the decentralized structure of a P2P
botnet. Also, as shown in Section V-F2, reducing the rate
of mutual contacts while maintaining the same number of
mutual contacts (i.e., by conducting AMMKL) will make the
botnets less stealthy, less efﬁcient and more exposed to the
other detection systems (e.g., anomaly-based botnet detection
using high volumes of network trafﬁc).

B. The deployment of Enhanced PeerHunter

In the previous sections, we simply assumed that our system
the boundary of a single organization. In
is deployed at
this section, we discuss about the deployment of Enhanced
PeerHunter in three more realistic scenarios.

1) The number of bots within an organization is too small:
It would be challenging to build the MCG of botnet com-
the number of bots belonging to the same
munities (i.e.,
botnet is less than 3). In this case, we can deploy multiple
Enhanced PeerHunter systems at the boundaries of multiple
organizations, and correlate the network ﬂows collected by
those multiple Enhanced PeerHunter systems to build an
appropriate size of MCG to detect botnet communities.

2) The number of bots within an organization is too large:
The mutual contacts of certain bots might be within the
organization internal network, hence invisible to the single
system monitoring at
the network boundary. In this case,
we can deploy multiple Enhanced PeerHunter systems within
the organization, that divide the organization network into
several appropriate size of sub-internal networks. Each system
is responsible for one sub-internal network.

15

3) The botmaster knows the system deployment location:
In this way, the botmaster could assign the location of bots
the communications of the bots based on the
or control
knowledge of the system deployment location to evade our
system. For instance, the botmaster could assign bots into
different sub-internal networks, and instruct most of the bots
communicate with the others within the same sub-internal
network. In this case, we could use the concept and idea of
Moving Target Defense (MTD) [34] to develop a strategy that
makes it more difﬁcult for botmasters to learn the deployment
locations of our systems, by dynamically changing the settings
or deployments of our systems.

C. Extend Enhanced PeerHunter to detect other botnets

Although Enhanced PeerHunter is designed to detect P2P
botnets, our idea of using mutual contacts graph has the
potential to detect not only unknown botnets, but also the other
types of botnets (e.g., centralized botnets, such as IRC botnets
[18], mobile botnets [35]). Since bots are usually controlled
by machines, rather than humans, bots from the same botnets
tend to communicate with a similar set of peers or attacking
targets. For instance, bots from the same IRC botnets tend
to contact a similar set of C&C servers, while bots from the
same mobile botnets tend to contact a similar set of satellite
servers. Hence, we argue that Enhanced PeerHunter could be
easily extended to detect the other types of botnets.

VII. CONCLUSION

We present a novel community behavior analysis based P2P
botnet detection system, Enhanced PeerHunter, which operates
under several challenges: (a) botnets are in their waiting stage;
(b) the C&C channel has been encrypted; (c) the botnet trafﬁc
are overlapped with legitimate P2P trafﬁc on the same host;
(d) no bot-blacklist or “seeds” are available; (e) none statistical
trafﬁc patterns known in advance; and (f) does not require to
monitor individual host. We propose three types of community
behaviors (i.e., ﬂow statistical features, numerical community
features and structural community features) that can be used to
detect P2P botnets effectively. In the experimental evaluation,
we propose a network traces sampling and mixing method
to make the experiments as unbiased and challenging as
possible. Experiments and analysis were conducted to show
the effectiveness and scalability of our system. With the best
parameter settings, our system achieved 100% detection rate
with none false positives. We also propose two mimicking le-
gitimate P2P application attacks (i.e., PMMKL and AMMKL).
The experiment results showed that our system is robust to
PMMKL, and will make the botnets less stealthy, less efﬁcient
and more exposed while conducting AMMKL.

REFERENCES

[1] C. Rossow, D. Andriesse, T. Werner, B. Stone-Gross, D. Plohmann,
C. J. Dietrich, and H. Bos, “Sok: P2pwned-modeling and evaluating the
resilience of peer-to-peer botnets,” in Security and Privacy (SP), 2013
IEEE Symposium on.
IEEE, 2013, pp. 97–111.

[2] J. Zhang, R. Perdisci, W. Lee, X. Luo, and U. Sarfraz, “Building a
scalable system for stealthy p2p-botnet detection,” Information Forensics
and Security, IEEE Transactions on, vol. 9, no. 1, pp. 27–38, 2014.

16

[25] D. Stutzbach and R. Rejaie, “Understanding churn in peer-to-peer
networks,” in Proceedings of the 6th ACM SIGCOMM conference on
Internet measurement. ACM, 2006, pp. 189–202.

[26] T. Holz, M. Steiner, F. Dahl, E. Biersack, and F. C. Freiling, “Mea-
surements and mitigation of peer-to-peer-based botnets: A case study
on storm worm.” First USENIX Workshop on Large-Scale Exploits and
Emergent Threats, vol. 8, no. 1, pp. 1–9, 2008.

[27] J. Dean and S. Ghemawat, “Mapreduce: simpliﬁed data processing on
large clusters,” Communications of the ACM, vol. 51, no. 1, pp. 107–113,
2008.

[28] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and E. Lefebvre, “Fast
unfolding of communities in large networks,” Journal of Statistical
Mechanics: Theory and Experiment, vol. 2008, no. 10, p. P10008, 2008.
[29] “Malware sample sources for researchers,” 2018. [Online]. Available:

https://zeltser.com/malware-sample-sources/

[30] T. Karagiannis, A. Broido, M. Faloutsos et al., “Transport layer iden-
tiﬁcation of p2p trafﬁc,” in Proceedings of the 4th ACM SIGCOMM
conference on Internet measurement. ACM, 2004, pp. 121–134.
[31] “Argus: Auditing network activity,” 2018. [Online]. Available: http:

//qosient.com/argus/

[32] “Barracuda reputation block list (brbl),” 2018. [Online]. Available:

http://www.barracudacentral.org/rbl/

[33] M. Feily, A. Shahrestani, and S. Ramadass, “A survey of botnet
and botnet detection,” in Emerging Security Information, Systems and
Technologies, 2009. SECURWARE’09. Third International Conference
on.

IEEE, 2009, pp. 268–273.

[34] M. Albanese, S. Jajodia, and S. Venkatesan, “Defending from stealthy
botnets using moving target defenses,” IEEE Security & Privacy, vol. 16,
no. 1, pp. 92–97, 2018.

[35] S. Zhao, P. P. Lee, J. Lui, X. Guan, X. Ma, and J. Tao, “Cloud-based
push-styled mobile botnets: a case study of exploiting the cloud to
device messaging service,” in Proceedings of the 28th Annual Computer
Security Applications Conference. ACM, 2012, pp. 119–128.

Di Zhuang (S’15) received the B.E. degree in com-
puter science and information security from Nankai
University, China. He is currently pursuing the Ph.D.
degree in electrical engineering with University of
South Florida, Tampa. His research interests include
cyber security, social network science, privacy en-
hancing technologies, machine learning and big data
analytics. He is a student member of IEEE.

J. Morris Chang (SM’08) is a professor in the
Department of Electrical Engineering at the Uni-
versity of South Florida. He received the Ph.D.
degree from the North Carolina State University.
His past industrial experiences include positions at
Texas Instruments, Microelectronic Center of North
Carolina and AT&T Bell Labs. He received the
University Excellence in Teaching Award at Illinois
Institute of Technology in 1999. His research inter-
ests include: cyber security, wireless networks, and
energy efﬁcient computer systems. In the last six
years, his research projects on cyber security have been funded by DARPA.
Currently, he is leading a DARPA project under Brandeis program focusing
on privacy-preserving computation over Internet. He is a handling editor
of Journal of Microprocessors and Microsystems and an editor of IEEE IT
Professional. He is a senior member of IEEE.

[3] H. Hang, X. Wei, M. Faloutsos, and T. Eliassi-Rad, “Entelecheia:
Detecting p2p botnets in their waiting stage,” in IFIP Networking
Conference, 2013.

IEEE, 2013, pp. 1–9.

[4] Q. Yan, Y. Zheng, T. Jiang, W. Lou, and Y. T. Hou, “Peerclean: Unveiling
peer-to-peer botnets through dynamic group behavior analysis,” in
Computer Communications (INFOCOM), 2015 IEEE Conference on.
IEEE, 2015, pp. 316–324.

[5] D. Zhuang and J. M. Chang, “Peerhunter: Detecting peer-to-peer botnets
through community behavior analysis,” in Dependable and Secure
Computing, 2017 IEEE Conference on.

IEEE, 2017, pp. 493–500.

[6] B. Coskun, S. Dietrich, and N. Memon, “Friends of an enemy: iden-
tifying local members of peer-to-peer botnets using mutual contacts,”
in Proceedings of
the 26th Annual Computer Security Applications
Conference (ACSAC). ACM, 2010, pp. 131–140.

[7] “Mawi working group trafﬁc archive,” 2018.
http://mawi.wide.ad.jp/mawi/ditl/ditl201412/

[Online]. Available:

[8] B. Rahbarinia, R. Perdisci, A. Lanzi, and K. Li, “Peerrush: Mining for
unwanted p2p trafﬁc,” Journal of Information Security and Applications,
vol. 19, no. 3, pp. 194–208, 2014.

[9] G. Gu, P. A. Porras, V. Yegneswaran, M. W. Fong, and W. Lee,
“Bothunter: Detecting malware infection through ids-driven dialog cor-
relation.” in Usenix Security Symposium, vol. 7, 2007, pp. 1–16.
[10] S. Nagaraja, P. Mittal, C.-Y. Hong, M. Caesar, and N. Borisov, “Botgrep:
Finding p2p bots with structured graph analysis.” in USENIX Security
Symposium, 2010, pp. 95–110.

[11] J. Wang and I. C. Paschalidis, “Botnet detection based on anomaly
and community detection,” IEEE Transactions on Control of Network
Systems, vol. 4, no. 2, pp. 392–404, 2017.

[12] S. Venkatesan, M. Albanese, A. Shah, R. Ganesan, and S. Jajodia,
“Detecting stealthy botnets in a resource-constrained environment using
reinforcement learning,” in Proceedings of the 4th ACM Workshop on
Moving Target Defense, 2017, pp. 75–85.

[13] S. Karuppayah, L. B¨ock, T. Grube, S. Manickam, M. M¨uhlh¨auser, and
M. Fischer, “Sensorbuster: On identifying sensor nodes in p2p botnets,”
in Proceedings of the 12th International Conference on Availability,
Reliability and Security. ACM, 2017, p. 34.

[14] F. Haddadi and A. N. Zincir-Heywood, “Botnet behaviour analysis: How
would a data analytics-based system with minimum a priori information
perform?” International Journal of Network Management, vol. 27, no. 4,
p. e1977, 2017.

[15] W. Lu, G. Rammidi, and A. A. Ghorbani, “Clustering botnet communi-
cation trafﬁc based on n-gram feature selection,” Computer Communi-
cations, vol. 34, no. 3, pp. 502–514, 2011.

[16] S. Wang, Q. Yan, Z. Chen, B. Yang, C. Zhao, and M. Conti, “Detecting
android malware leveraging text semantics of network ﬂows,” IEEE
Transactions on Information Forensics and Security, vol. 13, no. 5, pp.
1096–1109, 2018.

[17] M. Roesch et al., “Snort: Lightweight intrusion detection for networks.”

in Lisa, vol. 99, no. 1, 1999, pp. 229–238.

[18] X. Ma, X. Guan, J. Tao, Q. Zheng, Y. Guo, L. Liu, and S. Zhao, “A
novel irc botnet detection method based on packet size sequence,” in
Communications (ICC), 2010 IEEE International Conference on.
IEEE,
2010, pp. 1–5.

[19] S. Khanchi, A. Vahdat, M. I. Heywood, and A. N. Zincir-Heywood, “On
botnet detection with genetic programming under streaming data label
budgets and class imbalance,” Swarm and evolutionary computation,
vol. 39, pp. 123–140, 2018.

[20] H. Zhang, C. Papadopoulos, and D. Massey, “Detecting encrypted botnet
trafﬁc,” in Computer communications workshops (infocom wkshps),
2013 ieee conference on.

IEEE, 2013, pp. 163–168.

[21] J. Jianguo, B. Qi, S. Zhixin, Y. Wang, and B. Lv, “Botnet detection
method analysis on the effect of feature extraction,” in Trustcom, 2016
IEEE.

IEEE, 2016, pp. 1882–1888.

[22] X. Ma, J. Zhang, J. Tao, J. Li, J. Tian, and X. Guan, “Dnsradar:
Outsourcing malicious domain detection based on distributed cache-
footprints,” IEEE Transactions on Information Forensics and Security,
vol. 9, no. 11, pp. 1906–1921, 2014.

[23] W. Chen, X. Luo, and A. N. Zincir-Heywood, “Exploring a service-based
normal behaviour proﬁling system for botnet detection,” in Integrated
Network and Service Management (IM), 2017 IFIP/IEEE Symposium
on.

IEEE, 2017, pp. 947–952.

[24] H.-S. Wu, N.-F. Huang, and G.-H. Lin, “Identifying the use of
data/voice/video-based p2p trafﬁc by dns-query behavior,” in Communi-
cations, 2009. ICC’09. IEEE International Conference on.
IEEE, 2009,
pp. 1–5.

