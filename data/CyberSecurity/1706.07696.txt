D-STREAMON: from middlebox to distributed
NFV framework for network monitoring*

Pier Luigi Ventre∗ Alberto Caponi† Giuseppe Siracusano∗ Davide Palmisano∗
Stefano Salsano∗† Marco Bonola† Giuseppe Bianchi∗†
∗University of Rome Tor Vergata, Italy
†Consorzio Nazionale Interuniversitario per le Telecomunicazioni (CNIT), Italy
Email: {name.surname}@uniroma2.it

7
1
0
2

n
u
J

2
2

]
I

N
.
s
c
[

1
v
6
9
6
7
0
.
6
0
7
1
:
v
i
X
r
a

Abstract—Many reasons make NFV an attractive paradigm for
IT security: lowers costs, agile operations and better isolation as
well as fast security updates, improved incident responses and
better level of automation. On the other side, the network threats
tend to be increasingly complex and distributed, implying huge
trafﬁc scale to be monitored and increasingly strict mitigation
delay requirements. Considering the current trend of the net-
working and the requirements to counteract to the evolution of
cyber-threats, it is expected that also network monitoring will
move towards NFV based solutions. In this paper, we present D-
StreaMon an NFV-capable distributed framework for network
monitoring realized to face the above described challenges.
It relies on the StreaMon platform, a solution for network
monitoring originally designed for traditional middleboxes. An
evolution path which migrates StreaMon from middleboxes to
Virtual Network Functions (VNFs) has been realized.

Index Terms—Network Function Virtualization, Network Mon-

itoring, Threat Detection, Network Programmability

I. INTRODUCTION

The unyielding increasing trend, the evolving complexity
and the diversiﬁed nature of modern cyber-threats [2] calls for
new scalable, accurate and ﬂexible solutions for network trafﬁc
monitoring and threats detection. New solutions should sup-
port zero-touch conﬁgurations, ﬂexibility, agility and real-time
trafﬁc analysis capabilities to promptly detect and mitigate
cyber-attacks. The real challenge is to promptly react to the
high mutable needs by deploying customizable trafﬁc analyses
functionalities, capable of tracking events and detect different
behaviours of attacks. Such objectives can be achieved by ef-
ﬁciently handling of the many heterogeneous features, events,
and conditions which characterize an operational failure, a
network’s application mis-behavior, an anomaly or an incom-
ing attack. The ﬂexibility in the network monitoring can be
obtained through the systematic exploitation of stream-based
analysis techniques, carefully combined to address scalability-
by-design and made available to the programmer by means
of open APIs. Even more challenging, trafﬁc analyses and
mitigation primitives should be ideally brought
inside the
monitored network and the monitoring probes themselves.
This avoids the centralization of the analysis which moves
ﬂows of data to a central point resulting inadequate to cope

*This research was partially supported by the EU Commission within the

Horizon 2020 program, SCISSOR project [1] grant no 644425.

(a) Probes as Processes

(b) Probes as Containers

Fig. 1: D-StreaMon architectures

with the huge trafﬁc scale and the strict (ideally real-time) mit-
igation delay requirements. Solutions for the aforementioned
challenges ﬁnd breeding ground in the current trends towards
the softwarization of networks [3] [4]. Such trends includes
technologies like Network Function Virtualization (NFV) [5],
Software Deﬁned Networking (SDN) [6] and Cloud Comput-
ing [7]. More speciﬁcally NFV, focusing on the decoupling of
network functions from physical devices on which they run,
becomes the ideal technology to bring to the reality the idea of
pervasive network monitoring. NFV leverages on virtualization
technologies to execute network appliances in virtual resources
which are deployed in commodity servers. We expect that
ﬁelds like network security could beneﬁt in moving towards
NFV paradigm, where security systems or hardware based
middleboxes are substituted by virtualized network running
in commodity servers.

In this paper, we propose ”D-Streamon”, a distributed
framework for wide-spreading network monitoring based on
NFV principles. We call this framework D-Streamon, as for
the monitoring engine we used StreaMon [8] an high scalable
data-plane programming abstraction for stream-based moni-
toring tasks directly running inside network probes, which
exploits eXtended Finite State Machines (XFSM) for program-
ming custom monitoring logic. The lifecycle of a StreaMon
probe has been completely reexamined and StreaMon software
has been adapted to run as ”containerized” software based
probe. In this new architecture,
the StreaMon probes can
communicate between each other and provide information to

 
 
 
 
 
 
even be able to cooperate, D-StreaMon exploits the ﬂexibility
of the publish/subscribe networking model. Each monitoring
probe acts as an independent publisher following the actions
deﬁned in the conﬁguration of the XFSM and publishes events
assigning to them a label. It permits to identify the type of
information forwarded (e.g. info, alert, warning, log, etc.) and
allows interested subscribers to ﬁlter events based on that
topic. Note that the controller is a special subscriber that
listens to the whole set of topics created by each monitoring
probe. This architecture has been realized by means of the
ZeroMQ library.

Using the architecture described above, we have designed
two NFV based deployments. The ﬁrst solution is referred to
as Probes as Processes (ﬁgure 1a). The monitoring Probes
are executed as processes running in the main host process
space. The Probes intercept the trafﬁc directly from the ports
of the target which have been bridged in the L2 switch of
the virtualization server (in our case we use Open vSwitch
to implement the Layer 2 switch of the virtualization server).
The second solution is referred to as Probes as Containers
and is represented in ﬁgure 1b. It envisages the use of the
Docker Containers for running the probes: for each target
to be monitored, a StreaMon Probe is created and deployed
in a Docker Container. All Containers are attached to the
same L2 switch and the port mirroring functionality is used
to ”copy” the VM trafﬁc towards the associated Probe. The
ﬁrst NFV solution can provide better performance, as the
Process virtualization introduces less overhead with respect to
Containers solution and because the packets do not need to be
”mirrored” by the switch. At the same time the second solution
can provide a better isolation and does not require particular
workarounds to have different StreaMon Probes working in
several Processes co-located in the same host.

Future works will address:

i) the improvement of the
packet processing performances of the D-StreaMon probes by
replacing Libpcap with a more performant solution; ii) the
realization of a coordinated solution which integrates NFV,
SDN and Cloud Computing to have automated deployment of
probes and promptly react to malicious actions.

REFERENCES

[1] “Scissor project.” [Online]. Available: http://scissor-project.com
[2] Symantec, “Symantec internet security threat report trends for 2016,”

Volume XXI, April, 2016.

[3] A. Galis et al., “Softwarization of

future networks and services-
programmable enabled networks as next generation software deﬁned
networks,” in IEEE workshop SDN for Future Networks and Services
(SDN4FNS), 2013.

[4] M. Kind et al., “Softwarization of carrier networks,” in Information

Technology. Volume 57, Issue 5, Pages 277284, 2015.

[5] “ETSI group for Network Function Virtualization.” [Online]. Available:

http://www.etsi.org/technologies-clusters/technologies/nfv

[6] “Software-deﬁned networking: The new norm for networks.” [Online].
Available: http://www.etsi.org/technologies-clusters/technologies/nfv
[7] R. Buyya et al., “Cloud computing and emerging it platforms: Vision,
hype, and reality for delivering computing as the 5th utility,” Future
Generation computer systems, vol. 25, no. 6, pp. 599–616, 2009.

[8] G. Bianchi et al., “Streamon: A software-deﬁned monitoring platform,”

in Teletrafﬁc Congress (ITC), 2014 26th International.

[9] “D-streamon

repository.”

[Online]. Available:

netgroup/dstreamon

IEEE, 2014.
https://github.com/

Fig. 2: D-StreaMon deployment tools.

external frameworks. This can enable advanced monitoring
techniques based on the correlation of the information and
overcome the problem derived of the single point of control.
To complete our framework, we realized a set of management
tools which makes agile and ﬂexible the deployment of the
StreaMon based probes: the repetitive, not scalable and error
prone procedures are replaced by a software based orchestra-
tor. An open source implementation can be downloaded from
our repositories [9] and is available for evaluation.

II. D-STREAMON

StreaMon has been originally implemented as specialized
middlebox, even though it introduces open abstractions to
program the network probe, by design does not consider
distributed environment involving an high number of probes.
Since it foresees for a vertical integrated stack where Control
and the Monitoring Probe run on the same node, ﬁrstly
we have introduced a decoupling between them in the new
architecture. The D-StreaMon’s controller is in charge of
managing probes’ conﬁgurations, described by through the
StreaMon XML-based language. These high-level conﬁgura-
tions are subsequently used to generate the runnable objects
to be pushed and executed in the monitoring probes. In this
transition, the Control component is committed to perform
also the cross-compilation of the StreaMon runnables. This
approach can introduces several beneﬁts in the architecture:
i) maintain the monitoring process agnostic to the platform
that runs the probe; ii) restrict the operational functions to
the controller and iii) limit the number of components that
runs on the probe. The whole management process of the
network monitoring probes has been implemented leveraging
on the Ansible framework. With no operational overhead and
without requiring the presence of agents in the managed
hosts, it allows to remotely execute tasks in the host. To
support the operator in the management and the supervision
of functionalities described above, D-StreaMon provides an
intuitive and simple to use management dashboard (ﬁgure 2),
that enables to perform the installation, execution and removal
of monitoring probes in the host machines. As regards the
communication architecture between probes and the controller,
D-StreaMon does not rely on the classical client/server model.
Since the monitoring probes can be hierarchically distributed
(to process the network ﬂows at different levels) and should

