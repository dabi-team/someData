MG-DVD: A Real-time Framework for Malware Variant Detection Based on
Dynamic Heterogeneous Graph Learning

Chen Liu1,2 , Bo Li1,2∗ , Jun Zhao1,2 , Ming Su1,2 and Xu-Dong Liu1,2†
1School of Computer Science and Engineering, Beihang University, Beijing, China
2Beijing Advanced Innovation Center for Big Data and Brain Computing, Beihang University, China
{liuchen, libo, zhaojun, suming, liuxd}@act.buaa.edu.cn

1
2
0
2

n
u
J

4
2

]

R
C
.
s
c
[

2
v
8
8
2
2
1
.
6
0
1
2
:
v
i
X
r
a

Abstract

Detecting the newly emerging malware variants in
real time is crucial for mitigating cyber risks and
proactively blocking intrusions. In this paper, we
propose MG-DVD, a novel detection framework
based on dynamic heterogeneous graph learning, to
detect malware variants in real time. Particularly,
MG-DVD ﬁrst models the ﬁne-grained execution
event streams of malware variants into dynamic
heterogeneous graphs and investigates real-world
meta-graphs between malware objects, which can
effectively characterize more discriminative mali-
cious evolutionary patterns between malware and
their variants. Then, MG-DVD presents two dy-
namic walk-based heterogeneous graph learning
methods to learn more comprehensive represen-
tations of malware variants, which signiﬁcantly
reduces the cost of the entire graph retraining.
As a result, MG-DVD is equipped with the abil-
ity to detect malware variants in real time, and
it presents better interpretability by introducing
meaningful meta-graphs. Comprehensive experi-
ments on large-scale samples prove that our pro-
posed MG-DVD outperforms state-of-the-art meth-
ods in detecting malware variants in terms of effec-
tiveness and efﬁciency.

1 Introduction
Malware has become one of the largest catastrophes en-
dangering information systems, which consistently perme-
ates and attacks information systems to steal sensitive infor-
mation, take control of the target system, and collect ran-
som [Gandotra et al., 2014]. Purifying the network envi-
ronment and keeping information systems away from mal-
ware attacks has become a serious challenge faced by security
communities and researchers [Ye et al., 2019].

During the last decade, a large volume of malware detec-
tion approaches has been proposed. The existing malware
detection methods can be roughly divided into two types:
signature-based [Kang et al., 2016; Gaviria de la Puerta and

∗Corresponding Author
†Corresponding Author

Figure 1: Illustration of dynamic malware variant detection: (a) de-
picts execution events stream of “ kdevtmpfsi”, in which red rect-
angles and black rectangles represent malicious behaviors and nor-
mal behaviors, respectively; (b) represents the static-based detection
method (e.g., MatchGNet [Wang et al., 2019b]), which only models
the execution events at a speciﬁc time (e.g., Wt−1) into a static het-
erogeneous graph but cannot investigate newly added events in real
time, result in misjudging malicious behaviors as benign. (c) is our
proposed MG-DVD, which dynamically updates from (b) by adding
the blue directed edges (e.g., P1 → F2, P1 → N1, and P1 → S1)
and removing the grey directed edges (e.g., P1 → F1). MG-DVD
can dynamically learn more comprehensive representations of mal-
ware and capture the evolutionary patterns between malware and
variants to detect malicious behaviors in real time (before 75s).

Sanz, 2017; Raff et al., 2018; Zhang et al., 2019; Singh
and Singh, 2020] and behavior-based [Pascanu et al., 2015;
Sun et al., 2016; Bartos et al., 2016; Zhang et al., 2018;
Wang et al., 2019b]. Particularly, signature-based methods
rely on feature engineering to manually extract malware ﬁn-
gerprints from known samples, which hardly identify new
malware variants [Ye et al., 2019]. Behavior-based detection
methods focus on investigating the independent API sequence
rather than considering their interactive call relationships, in-
evitably resulting in high false positives and expensive time
cost [Zhang et al., 2020].

Indeed, most malware will perform variants over time to
evade detection, and their malicious behaviors are triggered
in a very short time [Wang et al., 2019b]. As shown in Fig-
ure 1, the malicious behaviors of “kdevtmpfsi” are submit-
ted between 54s and 86s. However, the existing detection
approaches cannot meet the dynamic detection requirements

Wt-1:[30s, 60s]RunningLoad “WS2_32.dll”30sHide process “kdevtmpfsi”54sWhole Execution EnvironmentRead file“xx.exe”134s0sTDownloadfile73sConnectIP195.3.146.11871sSteal file password 83sDelete process “kdevtmpfsi”86sM1P1StaticN1M1S1P1Dynamic(a)(b)(c)!"!"#"$%=$%&'(&!"&'(#)$%=)ro,anWt:[45s, 75s]Wt+1:[60s, 90s]F2F1F1 
 
 
 
 
 
(a) Network schema

(b) Meta-graphs

Figure 2: Network schema and meta-graphs for MG-DVD.

and misjudge malicious behaviors as benign.
In summary,
the existing malware detection approaches expose three major
challenges. First, they [Wang et al., 2019b; Chen et al., 2018;
Wu et al., 2019] are inefﬁcient to indiscriminately retrain the
entire graph whenever a new node or event is injected, re-
sulting in their incapacity of detecting malware variants in
real time. Second, static random walk strategy [Wang et al.,
2019b; Fu et al., 2017; Fan et al., 2018] often generates a
large search space since long-term walks for all nodes, caus-
ing an expensive and unacceptable time cost. Third, feature-
based [Kang et al., 2016; Gaviria de la Puerta and Sanz, 2017;
Raff et al., 2018; Zhang et al., 2019; Pascanu et al., 2015;
Sun et al., 2016; Bartos et al., 2016; Zhang et al., 2018] and
metapath-based [Wang et al., 2019b] detection approaches
are incapable of characterizing high-order and expressive rep-
resentations of malware variants.

To tackle these challenges, we present a novel MetaGraph-
guided Dynamic Variant Detection (MG-DVD) framework
based on dynamic heterogeneous graph learning, which mod-
els execution events stream of the target variant into a series
of dynamic heterogeneous graphs and identiﬁes the variant in
a real-time and interpretable way. The contributions of this
paper are summarized as follows:

two encoders

• We propose a dynamic detection framework, namely
MG-DVD, consisting of
involving
DWIUE and CHGAE. MG-DVD utilizes the overlap-
ping information of adjacent sliding windows to dynam-
ically generate graph embedding, which provides mal-
ware warnings in real time to keep information systems
from malicious intrusions.

• MG-DVD implements an efﬁcient dynamic walk strat-
egy, which concentrates on the newly injected nodes
in the heterogeneous graph at the target sliding win-
dow and learns their node representations by exploring
the emerging meta-graphs between them. As a result,
MG-DVD is able to effectively alleviate the pressure of
search space and time overhead.

• MG-DVD presents remarkable interpretability by intro-
ducing the meaningful meta-graphs depicting interactive

relationships between malware and corresponding vari-
ants, which can effectively learn the evolutionary pat-
terns of variants from different malware families.

• We conduct extensive experiments on large-scale real-
world samples. Experimental results verify that our
proposed MG-DVD outperforms the state-of-the-art ap-
proaches in detecting new malware variants.

2 Preliminary
In this section, we recap important deﬁnitions used in our
work, such as DHGS, network schema, and meta-graph.
Deﬁnition 1. A dynamic heterogeneous graphs sequence
(DHGS) over the execution events stream of malware vari-
ant is a graph set G={G1, G2,. . . , GT }, each Gt = (Vt, Et)
with an entity type mapping φ: Vt → A and a relation type
mapping ψ: Et → R, where Vt and Et denote the entity set
and the relation set of Gt, respectively, and A and R denote
the entity type and relation type, respectively. Among them,
|A| > 1, |R| > 1. The network schema [Sun and Han, 2012]
of DHGS, denoted as TG = (A, R), is a graph with nodes as
entity type from A and edges as relation type from R.

To characterize high-order semantic information and cap-
ture the more discriminative malicious patterns of various
malware types, we investigate the real-world meta-graphs for
dynamic malware variants detection, deﬁned as below:
Deﬁnition 2. A meta-graph [Zhao et al., 2017] M is a di-
rected acyclic graph with a single source node ns (i.e., with
in-degree 0) and a single target node nt (i.e., with out-degree
0), deﬁned on a DHGS G with schema TG = (A, R), then a
meta-graph can be deﬁned as M=(VM , EM , AM , RM , ns,
nt), where VM ∈ V, EM ∈ E are constrained by AM ∈ A and
RM ∈ R, respectively.

Particularly, Figure 2(a) demonstrates the schema of MG-
DVD, which consists of 8 types of entities and 10 types of re-
lations. With the schema, we ﬁrst enumerate all meta-graphs
of MG-DVD, which start and end with processes (i.e., P1 and
P2). Then the frequency of each meta-graph is measured on
large-scale samples, and the ﬁnal meta-graphs are obtained,

:Process:File:Attribute:Registry:Network:Mutex:Systemfork(f)copy(cp)access(a)set(s)create(cr)open(o)connect(cn)download(d)modify(m)read(r):Memory!!!F1P1P2P3!!P1P2F1S1!"!"P1M1P2!!!#!#F1S1P1M1P2""!##!P1M1M2P2#!###!$!!M1:M2:M3:M4:M5:P1%R2R1P2%%!%!P1M1P2R1##!%%!R1S1P1P2%!%""!P1P2F1F2!!!!!!"!S1P1P2S2""!"M6:M7:M8:M9:M10:P1P2Mu1&#&#!P1P2N1$&'&'!F1A1!(P1F2P2(!!!P1F1F2&)!P2!!P1F1N1&'*P2!!M11:M12:M13:M14:M15:Figure 3: Framework of MG-DVD: (a) Dynamic heterogeneous graphs constructing: Gt is updated based on Gt−1 and Dt, in which the grey
nodes and grey solid lines indicate the expired events, and blue solid lines indicate newly-created events (Section 3.1); (b) Dynamic graph
learning: generate the graph embedding hGt under each sliding window by encoder DWIUE or CHGAE based on the ratio ∆Vt/ Vt (Section
3.2); (c) Real-time detection: calculate the Pearson correlation coefﬁcients between the graph embedding of the target variant and the graph
embeddings of all samples to obtain real-time prediction result (cid:98)Yt (Section 3.3).

as shown in Figure 2(b), which hold high-frequency and rich
semantics depicting the evolutionary patterns between mal-
ware and their variants.

3 Framework
Figure 3 shows the framework of MG-DVD, which consists
of three major components, detailed below.

3.1 Dynamic Heterogeneous Graphs Constructing
MG-DVD models the execution events stream of the malware
variant into a DHGS={G1, G2, . . . , GT } with different slid-
ing windows [Wang et al., 2019a]. As shown in Figure 3, Gt
can be updated from Gt−1 as the new execution events are
joined, and expired events are removed, and then the hetero-
geneous graph Gt at Wt is obtained, represented as adjacency
matrix At. MG-DVD utilizes overlapping information at ad-
jacent sliding windows (e.g., Gt−1 and Gt) to receive richer
variant evolution behaviors rather than reconstructing the en-
tire graph under each sliding window, which offers better ef-
ﬁciency. Experimentally, the detection performance depends
on the sliding window size (i.e., W) and sliding step (i.e., p),
and it is proved that MG-DVD could reach the desired per-
formance when W is set to 60s and p=1/2W.

3.2 Dynamic Graph Learning
Unlike the static frameworks [Chen et al., 2018; Hamilton
et al., 2017; Wu et al., 2019], MG-DVD aims to implement a
dynamic malware variants detection based on the overlapping
information of heterogeneous graphs under adjacent sliding
windows. To this end, MG-DVD proposes Dynamic Walk In-
cremental Updating Encoder (DWIUE) and Combined Hier-

archical Graph Attention Encoder (CHGAE), which can dis-
criminatively update or retrain the graph embedding at each
target sliding window based on the threshold ∆Vt/Vt. Par-
ticularly, given Gt and ∆Vt at sliding window Wt, the graph
embedding of Gt can be generated under the two paradigms.
On the one hand, if ∆Vt/Vt≤ γ, MG-DVD utilizes DWIUE
to straightly assemble the representation matrix based on the
strongly correlated hGt−1 and dynamic neighbors; on the
other hand, MG-DVD presents CHGAE to partially learn
the graph embedding by discriminatively aggregating newly
joined neighbors. Our presented dynamic walk strategy only
traverses the changed nodes rather than all nodes in the target
graph, which markedly alleviates the search space and time
cost compared with the static random walk [Fu et al., 2017;
Fan et al., 2018]. Deﬁnitely, the set of changed nodes on the
target graph is denoted as a dynamic node set ∆Vt, which is
formalized as below:

∆Vt =

(cid:91)

{vx ∈ Vt|(∃ex,y = (vx, vy) /∈ Et−1)

∨(∃ex,y = (vx, vy) ∈ Et−1\Et)},

(1)

where vx and vy are nodes in Vt, ex,y is the relation between
them. Et−1\ Et denotes the difference set of Et−1 and Et.
Dynamic Walk Incremental Updating Encoder
As mentioned above, DWIUE focuses on dynamically updat-
ing graph embedding when ∆Vt/Vt≤ γ, which involves three
major steps: (A) Construct dynamic walk neighbor set; (B)
Incrementally fuse representation matrix; and (C) Aggregate
graph embedding.

(A) Construct dynamic walk neighbor set Ni

tv : Given
the heterogeneous graph Gt and the meta-graphs M={M1,

Execution events stream of the target variantVVVGt-1GtGt+1><,,fork,,<,access…>open<>,<,access>,Dt-1<,,create,…connect><,,>open<>,<,fork>,Dt<<,accessconnect><,,<,forkDt+1𝒉!!"#𝜌(ℎ!!,ℎ")…𝒉!!𝒉!!$#"𝑌"#$"𝑌""𝑌"%$……():Mutex:Target Process():Process():File():Network():Registry)(:Attribute()():SystemCHGAEDWIUE∆𝑉#$"𝑉#$">𝛾NYCHGAEDWIUECHGAEDWIUE(a)(b)(c)𝜌(ℎ!!,ℎ%)𝜌(ℎ!!,ℎ&)𝜌(ℎ!!,ℎ’)𝜌(ℎ!!,ℎ()𝜌(ℎ!!,ℎ))():Memory>,,open,…>>,∆𝑉#𝑉#>𝛾NY∆𝑉#*"𝑉#*">𝛾NYFigure 4: Dynamic graph learning: (a) Heterogeneous graph Gt at sliding window Wt, where the dotted lines with the red arrows indicate the
dynamic nodes that need to perform random walks; (b) Dynamic Walk Incremental Updating Encoder (DWIUE); (c) Combined Hierarchical
Graph Attention Encoder (CHGAE), where AGGnew, AGGall, and AGGgraph denote dynamic node aggregator, node aggregator, and meta-
graph aggregator, respectively.

M2,. . . , M|M |}, the path-relevant neighbor set Ni
tv of the tar-
get process v can be obtained with the guidance of each Mi.
(B) Incrementally fuse representation matrix hi
tv : As
shown in Figure 4(b), a representation matrix of the target
process v can be established by fusing hGt−1 at Wt−1 and its
new neighbors’ feature vectors at Wt, which leverages both
the embedding of itself and the information of its new neigh-
bors in Ni
Innovatively, DWIUE selects the intersection
tv .
between Ni
tv and ∆Vt as the meaningful dynamic neighbors,
and the representation matrix hi
tv
hi
= [hGt−1, hi
tv

(2)
tun
where u1 (cid:54)= un ∈ (Ni
∧∆Vt), and they are sorted by the node
tv
types (i.e., process, ﬁle, memory, registry, system, mutex, at-
tribute, and network.) and the distance to node v.

∈ Rd×d is expressed as:
]T ,
, . . . , hi

tu1

(C) Aggregate graph embedding hGt: Actually, differ-
ent meta-graphs show distinctive contributions in character-
izing malware variants. Inspired by [Wang et al., 2019b], we
implement a self-attention mechanism to learn the weight of
each meta-graph for detecting malware variants. Concretely,
the attention weight θi

t of Mi is formalized as below.

θi
t =

(cid:80)

, hj
exp(LeakyReLU (Wl[hi
tv
m∈|M | exp(LeakyReLU (Wl[hi

tv ] + bl))
tv , hm

tv ] + bl))

, (3)

tv and hj

where i (cid:54)= j ∈ {1,. . . , |M|}, hi
tv denote the node rep-
resentations of the target process node v under meta-graph Mi
and Mj, respectively. Wl and bl are the trainable weight and
bias parameters. Naturally, the graph embedding of Gt with
different meta-graphs can be aggregated as follows.

hGt =

|M |
(cid:88)

i=1

t × hi
θi
tv

.

(4)

Combined Hierarchical Graph Attention Encoder
As shown in Figure 4(c), CHGAE is presented to handle the
graph embedding of Gt when threshold ∆Vt/Vt> γ. Par-
ticularly, CHGAE also consists of three key steps: (A) Con-
struct dynamic walk neighbor set; (B) Aggregate node em-
bedding; (C) Aggregate graph embedding. Notably, steps (A)
and (C) of CHGAE are similar to DWIUE. Here, we detail
step (B), which can discriminatively aggregate newly joined
and known nodes.

(B) Aggregate node embedding hiK

tv : CHGAE calculates
the signiﬁcance of neighbor nodes for representing the tar-
get process node v, which speciﬁcally selects more important
neighbor nodes to represent itself rather than uniformly ag-
gregating its neighbor nodes in Ni
tv . Formally, the weight of
the neighbor node can be deﬁned as:

αi
tu

=

exp(

(cid:80)

u∈N i
tv

|N i
.u[type]|
tv
|×n )
|N i
tv
|N i
tv
|N i
tv

exp(

.u[type]|
|×n )

,

(5)

where Ni
tv
same as instance u in Ni
neighbor of the target process node v.

.u[type] denotes the node set whose type is the
tv , and n depicts u as the n-order

Gt evolves from the DHGS = {G1, G2, . . . , Gt−1},
which contains the previously known nodes before Wt and
newly added nodes at Wt. Notably, the known nodes in Gt
have been aggregated in Gt−1; thus, CHGAE only learns
newly added nodes in Ni
tv at Wt. As shown in Figure 4(c), the
former (K-1) layers of the proposed aggregator only tackle
the new neighbors in Ni
tv , and the last layer aggregates all
neighbors in Ni
tv , which greatly reduces the time cost of node
embeddings. The former (K-1) layers can be deﬁned as:

(a)GtVMetagraphs∆"!"!>$!!!""!##$%!!!&"=!!""!!!%"1-order2-order"!"":…"!"|$|:(b) DWIUEN!!'%"AGGgraph!%#…=!!!(|%|!!)%|%|!%#$%!!"|$|1-orderY(c) CHGAE!%#"!"":…"!"|$|:…!!*"+!!*|%|+AGGgraph…AGGnew…AGGnewAGGallAGGnew…AGGnewAGGallk=1k=K-1k=KDynamic  WalkType

Samples

Type

Samples

Type

Samples

Method

Recall

Precision

ACC

F-1

AUC

Trojan
Backdoor
Dropper

4,536 Virus

660 Adware
Benign
118

1,606 Worm
Exploit

394
3,042

842
338

Table 1: Sample distribution in ACT-KingKong dataset.

Entity

Number Entity

Number

Process
Memory
System
Attribute

2,869,361

File

641,945 Registry
284,614 Mutex
31,608 Network

1,284,625
436,773
44,498
26,976

Table 2: Statistics of ACT-KingKong dataset.

SVM+RBF
RNN+LR
MalConv
CNN+BPNN
MatchGNet
MG-DVD

0.767
0.847
0.833
0.873
0.913
0.965

0.878
0.911
0.908
0.919
0.937
0.981

0.764
0.851
0.843
0.882
0.917
0.976

0.819
0.878
0.869
0.895
0.925
0.973

0.701
0.868
0.839
0.884
0.916
0.952

Table 3: Performance on malware variants detection.

tv = AGGREGAT Ek(hik−1
hik

tv

= σ((1 + (cid:15)k)hik−1

tv +

, {hik−1
(cid:88)

tu }u∈(N i
αi
tu

tv

Wkhik−1

tu

∧∆Vt))

), (6)

∧∆Vt)

u∈(N i
tv
where k ∈ {1, 2,. . . , K-1} denotes the index of the layer, hik
tv
and hik
tu are the feature vectors of target process node v and
neighbor node u at the kth layer, respectively, and they can
initialize by their state vectors. (cid:15)k is a trainable trade-off pa-
rameter. Moreover, the Kth layer of the proposed aggregator
is similar to the previous ones, which aggregates all neighbors
in Ni

tv to represent the ﬁnal node embedding.

3.3 Real-time Detection
In this section, we leverage the Pearson correlation coefﬁ-
cient [Feng et al., 2019] between the target variant and all
samples to detect the target variant in real time. Intuitively,
the real intentions (e.g., stealing sensitive information, etc.)
of the new variant is similar to that of the original malware.
Formally, the Pearson correlation coefﬁcient is deﬁned as:
E[(hGt − µhGt
σhGt

)(hGf − µhGf
σhGf

ρ(hGt, hGf ) =

(7)

)]

,

and µhGf

where µhGt
spectively. σhGt
hGf , respectively.

and σhGt

are expectations of hGt and hGf , re-
are standard deviations of hGt and

MG-DVD outputs the type of the sample with the highest
Pearson correlation coefﬁcient exceeded the threshold τ as
the detection result. Particularly, if ρ(hGt, hGf )≥ τ , MG-
DVD continues to slide forward until the two detection re-
sults are consistent. Inversely, if the Pearson correlation coef-
ﬁcients with all samples are less than τ , it is essential to slide
forward and learn a richer embedding to continue detecting.
Finally, the objective function of dynamic malware variants

detection is formulated as below.

l =

|P |
(cid:88)

p=1

(ρ(hGp1, hGp2) − yp)2,

(8)

where yp=1 if hGp1 and hGp2 are graph embeddings from the
same malware; otherwise, label yp=-1. Here, we optimize l
with Adam optimizer [Kingma and Ba, 2014].

Figure 5: ROC curves on malware variants detection.

4 Experiments
4.1 Dataset
We collect a large number of real-world executable (PE) ﬁles
from VirusTotal,1 which contains the latest Windows mal-
ware and variants from Mar 2019 to Oct 2019. Afterwards,
the execution events streams dataset of all PE ﬁles is captured
using the KingKong system, namely ACT-KingKong.2 More
speciﬁcally, the sample distribution and basic statistics for our
ACT-KingKong dataset are presented in Table 1 and Table 2,
respectively. For all samples, we randomly divide the training
set, validation set, and test set into 6:2:2.

4.2 Result Analysis
In this section, we validate the effectiveness, efﬁciency,
and interpretability of MG-DVD in detecting malware vari-
ants by comparing it with ﬁve strong baseline methods,
where SVM+RBF [Gaviria de la Puerta and Sanz, 2017],
MalConv [Raff et al., 2018] and CNN+BPNN [Zhang et
al., 2019] belong to signature-based detection methods,
RNN+LR [Pascanu et al., 2015] and MatchGNet [Wang et
al., 2019b] belong to behavior-based detection methods. We
implement or utilize the source codes shared by the authors
and adopt the same parameters in their works.

Effectiveness Evaluation
As shown in Table 3 and Figure 5, our proposed MG-DVD
outperforms all baseline methods in terms of all metrics. The
improvement of MG-DVD can be attributed to the follow-
ing traits. First, comparing with feature-based methods (e.g.,
SVM+RBF, MalConv, RNN+LR, and CNN+BPNN), MG-
DVD models the ﬁne-grained execution events streams of
malware variants into dynamic heterogeneous graphs se-
quences to effectively learn the evolutionary patterns between

1https://www.virustotal.com.
2https://github.com/yidun1027/ACT-KingKong.

Method

SVM+RBF RNN+LR MalConv CNN+BPNN MatchGNet MG-DVDCHGAE MG-DVDstaticwalk MG-DVD

Total time(s)
Detection time(s)

108.13
5.60

156.44
3.37

79.78
3.21

202.53
7.12

414.35
13.79

1083.07
25.21

1035.81
19.33

345.50
8.84

Table 4: Runtime comparison.

Figure 6: Interpretability for MG-DVD.

(a) K and d vs. ACC

(b) N and E vs. ACC

malware and their variants. Notably, our MG-DVD achieves
a 9–21% improvement in terms of ACC against feature-
based methods. Second, compared with MatchGNet, MG-
DVD implements a metagraph-guided dynamic graph learn-
ing method, which can learn more ﬁne-grained representa-
tions of malware variants to accurately distinguish the new
Indeed, MG-DVD generates fewer false
malware variants.
positives (i.e., 21) than MatchGNet (i.e., 46), indicating that
MG-DVD can relieve alarm fatigue.

Efﬁciency Evaluation
Here we evaluate the efﬁciency of MG-DVD from two
Firstly, we compare it with its two variants,
aspects.
namely MG-DVDstaticwalk and MG-DVDCHGAE.
As
shown in Table 4, MG-DVD is 2.18× and 3× faster than
MG-DVDstaticwalk in terms of detection time and total
time. Moreover, MG-DVD is signiﬁcantly faster than MG-
DVDCHGAE since the encoder DWIUE in MG-DVD can
skillfully reduce the time for node aggregation compared to
the CHGAE. Secondly, we compare MG-DVD with the ex-
isting feature-based and metapath-based methods. As we
presented in Table 4, feature-based detection methods, such
as SVM+RBF, RNN+LR, MalConv, and CNN+BPNN, are
faster than MG-DVD due to the fact that they do not consider
the complex graph structure from various types of entity and
relation. On the contrary, the static MatchGNet is slower than
MG-DVD, which means that the metagraph-guided dynamic
embedding encoders in our MG-DVD are beneﬁcial to real-
time malware variant detection.

Interpretability Evaluation
Figure 6 shows the frequency matrix of the top-k meta-graphs
with the largest weights for different types of malware, which
improves interpretability for malware variants detection, from
which we can learn that: (i) several meta-graphs show crucial
signiﬁcance on detecting all types of malware variants, such
as M1, M2, M7, and M8; (ii) several meta-graphs only focus
on speciﬁc types, such as M13 and M14 are only involved in
Virus, which depicts that the Virus is usually active in con-
necting to the network and infecting ﬁles.

(c) W and p vs. detection time

(d) W and p vs. ACC

Figure 7: Parameter sensitivity.

4.3 Parameter Sensitivity

In this section, we conduct a large volume of experiments to
analyze the sensitivity of different parameters in MG-DVD,
including the number of layers (i.e., K), dimension of repre-
sentation matrix (i.e., d), number of hidden neurons (i.e., N),
embedding size (i.e., E), window size (i.e., W), and sliding
step (i.e., p).

As shown in Figure 7(a), ACC stably increases with K in-
creases from 1 to 3, when K= 4, the framework is more com-
plex, yet has little improvement on the ACC. Moreover, the
performance of our MG-DVD is outstanding in terms of ac-
curacy and stability when the dimension of the representa-
tion matrix is set to 64. Similarly, as shown in Figure 7(b),
our MG-DVD is the most stable and effective when the num-
ber of hidden neurons is set to 300 and embedding size =
60. As demonstrated in Figure 7(c), the detection time when
p=1/2W is shorter than that of p=W, which can be attributed
to adjacent sliding windows having more overlapping behav-
iors when p=1/2W, reducing the time cost of node retrain-
ing. Moreover, the larger W, the less detection time; however,
when W is greater than the 60s, the detection time becomes
longer because the number of sliding times is ﬁxed when W
reaches a certain value (i.e., 60s), but the more neighbors
need to walk and aggregate in larger windows, causing more
time cost. In addition, in Figure 7(d), we can observe that
the improvement of ACC becomes slow after W=60s. Conse-
quently, we set W=60s and p=1/2W in MG-DVD to hold the

1.02.03.04.00.850.900.951.00Numbers of layerACCd=32d=64d=1282003004005006000.850.900.951.00Numbers of hidden neuronsACCEmbedding=30Embedding=60Embedding=901015203060100p=Wp=1/2WWDetection Time(s)01020304050204060801000.800.850.900.951.00WACCp=WP=1/2WMethod

Walk

Embedding

Meta-structure ACC

MatchGNet
static HAGNE
MG-DVDstaticwalk static DWIUE+CHGAEmeta-graph
meta-graph
MG-DVDCHGAE dynamicCHGAE
MG-DVDDW IU E dynamicDWIUE
meta-graph
dynamicDWIUE+CHGAEmeta-graph
MG-DVD

meta-path

0.917
0.958
0.924
0.853
0.976

Table 5: A summary of the ablation study.

trade-off between detection accuracy and efﬁciency.

4.4 Ablation Study
We perform a detailed ablation study comparing different
variants of our MG-DVD, investigating the effects of dif-
ferent modules in the model. Table 5 summarizes our ex-
periments. We ﬁrst evaluate the two metagraph-guided dy-
namic embedding encoders by comparing MG-DVD with
MatchGNet [Wang et al., 2019b], which indicates the im-
portance of the meta-graph and two dynamic embedding en-
coders (i.e., DWIUE and CHGAE) to improve detection per-
formance. We also study the effect of the dynamic walk strat-
egy by comparing MG-DVD with MG-DVDstaticwalk that
only adopted static random walk strategy. Table 5 shows
that the dynamic walk strategy in MG-DVD outperforms the
existing static random walk strategy since the dynamic walk
strategy only traverses the newly added nodes rather than all
nodes in the target graph. Additionally, we examine the dis-
criminative effects of each metagraph-guided dynamic em-
bedding encoder by experimenting with MG-DVDCHGAE
and MG-DVDDW IU E, respectively. As can be seen from
Table 5, the detection accuracy of MG-DVDCHGAE is a sig-
niﬁcant boost than that of MG-DVDDW IU E, which can be
attributed to employing aggregators to aggregate high-order
neighborhoods in CHGAE can more effectively capture se-
mantic information than directly expanding the state vector
of the target node in DWIUE.

5 Related Work
5.1 Signature-based Malware Detection
There have been numerous studies concerning signature-
based malware detection [Gandotra et al., 2014; Kang et al.,
2016; Gaviria de la Puerta and Sanz, 2017; Raff et al., 2018;
Zhang et al., 2019; Singh and Singh, 2020]. Concretely,
[Kang et al., 2016; Gaviria de la Puerta and Sanz, 2017;
Raff et al., 2018] extracted the opcode or bytecode to detect
malware, yet they rely on manually extracting features from
known malware samples, which hardly identify new types of
malware. Zhang et al. [Zhang et al., 2019] presented a hy-
brid model consisting of CNN and BPNN to extract more ad-
vanced malware features from raw opcodes and APIs. How-
ever, they are vulnerable to code obfuscation techniques, in-
evitably leading to a drop in malware variants detection per-
formance.

5.2 Behavior-based Malware Detection
Recently, extensive studies were implemented on detecting
malware based on execution behaviors [Pascanu et al., 2015;

Sun et al., 2016; Bartos et al., 2016; Zhang et al., 2018; Wang
et al., 2019b; Zhang et al., 2020]. Pascanu et al. [Pascanu et
al., 2015] and Zhang et al. [Zhang et al., 2018] veriﬁed that
the API sequences of malware are signiﬁcantly different from
that of the legitimate programs, which provides a new avenue
for behavior-based malware detection. Nevertheless, these
methods ignored the interactive relationships among various
malware objects and cannot learn the evolutionary patterns
between malware and their variants.

To address the limitations, Wang et al. [Wang et al.,
2019b] proposed MatchGNet, and they characterized exe-
cution events of malware into a static heterogeneous graph
and extracted metapath-based features to detect malware,
which can effectively identify the unknown malware from a
large number of benign samples. However, MatchGNet ex-
poses two serious deﬁciencies. First, it focused on learning
metapath-based malware features, which is unable to cap-
ture high-order and ﬁne-grained malware variant patterns, re-
sulting in a drop in malware variants detection performance
and high false positive. Secondly, MatchGNet learned a
long-term representation from the static heterogeneous graph,
which cannot meet the dynamic detection requirements.

6 Conclusion

In this paper, we proposed MG-DVD, a dynamic malware
variants detection framework. MG-DVD ﬁrst utilized dy-
namic heterogeneous graphs sequence (DHGS) to model the
execution events streams of malware variants and introduced
meta-graphs to characterize the interactive relationships be-
tween malware objects. To realize real-time malware variants
detection, MG-DVD then proposed two dynamic walk-based
encoders, which leverages overlapping information between
adjacent sliding windows to dynamically learn node embed-
dings. Finally, MG-DVD trained a Pearson-based model
to automatically detect malware variants. Extensive exper-
iments show that MG-DVD is effective and efﬁcient in dy-
namically detecting new malware variants. In the future, we
would expand the MG-DVD to a more high-level dynamic
detection method by considering the temporal correlation be-
tween various behaviors.

Acknowledgements

This work was supported by the 2020 Industrial Internet Inno-
vation and Development Project-the Key Project of Intelligent
Connected Vehicle Safety Inspection Platform (Tender No.
TC200H01S), the Opening Project of Shanghai Trusted In-
dustrial Control Platform (TICPSH202003020-ZC), and the
Beijing Advanced Innovation Center for Big Data and Brain
Computing.

References

[Bartos et al., 2016] Karel Bartos, Michal Sofka, and Vo-
jtech Franc. Optimized invariant representation of net-
work trafﬁc for detecting unseen malware variants. In 25th
{USENIX} Security Symposium ({USENIX} Security 16),
pages 807–822, 2016.

[Chen et al., 2018] Jie Chen, Tengfei Ma, and Cao Xiao.
learning with graph convolutional net-
arXiv preprint

Fastgcn:
works via importance sampling.
arXiv:1801.10247, 2018.

fast

[Fan et al., 2018] Yujie Fan, Shifu Hou, Yiming Zhang, Yan-
fang Ye, and Melih Abdulhayoglu. Gotcha-sly malware!
scorpion a metagraph2vec based malware detection sys-
tem. In Proceedings of the 24th ACM SIGKDD Interna-
tional Conference on Knowledge Discovery & Data Min-
ing, pages 253–262, 2018.

[Feng et al., 2019] Wanli Feng, Quanyin Zhu, Jun Zhuang,
and Shimin Yu. An expert recommendation algorithm
based on pearson correlation coefﬁcient and fp-growth.
Cluster Computing, 22(3):7401–7412, 2019.

[Fu et al., 2017] Tao-yang Fu, Wang-Chien Lee, and Zhen
Lei. Hin2vec: Explore meta-paths in heterogeneous in-
In Pro-
formation networks for representation learning.
ceedings of the 2017 ACM on Conference on Information
and Knowledge Management, pages 1797–1806, 2017.
[Gandotra et al., 2014] Ekta Gandotra, Divya Bansal, and
Sanjeev Sofat. Malware 2014 survey-analysis and classiﬁ-
cation. Journal of Information Security, 5(2):56–64, 2014.
[Gaviria de la Puerta and Sanz, 2017] Jos´e Gaviria de la
Puerta and Borja Sanz. Using dalvik opcodes for mal-
ware detection on android. Logic Journal of the IGPL,
25(6):938–948, 2017.

[Hamilton et al., 2017] Will Hamilton, Zhitao Ying, and Jure
Leskovec.
Inductive representation learning on large
graphs. In Advances in neural information processing sys-
tems, pages 1024–1034, 2017.

[Kang et al., 2016] BooJoong Kang, Suleiman Y Yerima,
Kieran McLaughlin, and Sakir Sezer. N-opcode analy-
sis for android malware classiﬁcation and categorization.
In 2016 International Conference On Cyber Security And
Protection Of Digital Services (Cyber Security), pages 1–
7. IEEE, 2016.

[Kingma and Ba, 2014] Diederik P Kingma and Jimmy Ba.
arXiv

Adam: A method for stochastic optimization.
preprint arXiv:1412.6980, 2014.

[Pascanu et al., 2015] Razvan Pascanu, Jack W Stokes, Her-
mineh Sanossian, Mady Marinescu, and Anil Thomas.
Malware classiﬁcation with recurrent networks. In 2015
IEEE International Conference on Acoustics, Speech and
Signal Processing (ICASSP), pages 1916–1920. IEEE,
2015.

[Raff et al., 2018] Edward Raff, Jon Barker, Jared Sylvester,
and Charles K
Robert Brandon, Bryan Catanzaro,
In
Nicholas. Malware detection by eating a whole exe.
Workshops at the Thirty-Second AAAI Conference on Ar-
tiﬁcial Intelligence, 2018.

[Singh and Singh, 2020] Jagsir Singh and Jaswinder Singh.
A survey on machine learning-based malware detection
in executable ﬁles. Journal of Systems Architecture, page
101861, 2020.

[Sun and Han, 2012] Yizhou Sun and Jiawei Han. Min-
ing heterogeneous information networks: principles and
methodologies. Synthesis Lectures on Data Mining and
Knowledge Discovery, 3(2):1–159, 2012.

[Sun et al., 2016] Mingshen Sun, Xiaolei Li, John CS Lui,
Richard TB Ma, and Zhenkai Liang. Monet: a user-
oriented behavior-based malware variants detection sys-
tem for android. IEEE Transactions on Information Foren-
sics and Security, 12(5):1103–1112, 2016.

[Wang et al., 2019a] Jinyan Wang, Chen Liu, Xingcheng Fu,
Xudong Luo, and Xianxian Li. A three-phase approach
to differentially private crucial patterns mining over data
streams. Computers &amp; Security, 82:30–48, 2019.
[Wang et al., 2019b] Shen Wang, Zhengzhang Chen, Xiao
Yu, Ding Li, Jingchao Ni, Lu-An Tang, Jiaping Gui,
Zhichun Li, Haifeng Chen, and Philip S. Yu. Hetero-
geneous graph matching networks for unknown malware
In Proceedings of the Twenty-Eighth Interna-
detection.
tional Joint Conference on Artiﬁcial Intelligence, IJCAI-
19, pages 3762–3770, 2019.

[Wu et al., 2019] Zonghan Wu, Shirui Pan, Fengwen Chen,
Guodong Long, Chengqi Zhang, and Philip S Yu. A
comprehensive survey on graph neural networks. arXiv
preprint arXiv:1901.00596, 2019.

[Ye et al., 2019] Yanfang Ye, Shifu Hou, Lingwei Chen,
Jingwei Lei, Wenqiang Wan, Jiabin Wang, Qi Xiong, and
Fudong Shao. Out-of-sample node representation learn-
ing for heterogeneous graph in real-time android malware
detection. In Proceedings of the 28th International Joint
Conference on Artiﬁcial Intelligence, pages 4150–4156.
AAAI Press, 2019.

[Zhang et al., 2018] Jixin Zhang, Kehuan Zhang, Zheng Qin,
Hui Yin, and Qixin Wu. Sensitive system calls based
packed malware variants detection using principal compo-
nent initialized multilayers neural networks. Cybersecu-
rity, 1(1):10, 2018.

[Zhang et al., 2019] Jixin Zhang, Zheng Qin, Hui Yin,
Lu Ou, and Kehuan Zhang. A feature-hybrid malware
variants detection using cnn based opcode embedding
and bpnn based api embedding. Computers & Security,
84:376–392, 2019.

[Zhang et al., 2020] Zhaoqi Zhang, Panpan Qi, and Wei
Wang. Dynamic malware analysis with feature engineer-
ing and feature learning. In Proceedings of the AAAI Con-
ference on Artiﬁcial Intelligence, volume 34, pages 1210–
1217, 2020.

[Zhao et al., 2017] Huan Zhao, Quanming Yao, Jianda Li,
Yangqiu Song, and Dik Lun Lee. Meta-graph based rec-
ommendation fusion over heterogeneous information net-
works. In Proceedings of the 23rd ACM SIGKDD Inter-
national Conference on Knowledge Discovery and Data
Mining, pages 635–644, 2017.

