1
2
0
2

r
a

M
6
1

]

R
C
.
s
c
[

2
v
0
3
9
3
0
.
6
0
0
2
:
v
i
X
r
a

An Attacker Modeling Framework for the
Assessment of Cyber-Physical Systems Security

Christopher Deloglos, Carl Elks, and Ashraf Tantawy

Virginia Commonwealth University, Richmond VA 23220, USA
delogloscj,crelks,amatantawy@vcu.edu

Abstract. Characterizing attacker behavior with respect to Cyber-
Physical Systems is important to assuring the security posture and re-
silience of these systems. Classical cyber vulnerability assessment ap-
proaches rely on the knowledge and experience of cyber-security experts
to conduct security analyses and can be inconsistent where the experts’
knowledge and experience are lacking. This paper proposes a ﬂexible
attacker modeling framework that aids in the security analysis process
by simulating a diverse set of attacker behaviors to predict attack pro-
gression and provide consistent system vulnerability analysis. The model
proposes an expanded architecture of vulnerability databases to maxi-
mize its eﬀectiveness and consistency in detecting CPS vulnerabilities
while being compatible with existing vulnerability databases. The model
has the power to be implemented and simulated against an actual or
virtual CPS. Execution of the attacker model is demonstrated against
a simulated industrial control system architecture, resulting in a proba-
bilistic prediction of attacker behavior.

Keywords: CPS · Security · Attacker Modeling.

1

Introduction

To secure systems from known and emerging threats, systems engineers and
security analysts alike need to integrate an attacker’s view of potential vulnera-
bilities into their design, development, and analysis process as early as possible.
To date, this attacker perspective activity has been largely a manual process
conducted by subject matter experts who examine a system and identify pos-
sible vulnerabilities and weaknesses. Understanding the potential threat behav-
iors and capabilities of a cyber-actor or threat agent with respect to a cyber or
cyber-physical system (CPS) is critical for risk assessment and the development
of eﬀective security countermeasure solutions. [11] [17].

A promising way forward is the use of formal attacker models that attempt
to characterize and capture the expected behavior of attackers against a CPS.
Developing accurate attacker-models, however, is diﬃcult due to the number
of factors that inﬂuence and encompass attacker behavior. To understand the
behavior of an attacker many questions may be asked such as “Who is the at-
tacker?”, “What resources are at the attacker’s disposal?”, and “What is the

 
 
 
 
 
 
2

C. Deloglos et al.

motivation of the attacker?”. Quantifying the answers to these questions, how-
ever, is challenging in the absence of absolute metrics and incomplete situation
awareness. To partially address these challenges, in this paper we present a novel
modular attacker modelling framework (AMF) that is: (1) capable of capturing
and quantifying complex attacker behavior and, (2) is readily extensible to in-
corporate new or emerging aspects of attacker behavior.

2 Related work

In attacker modeling, a common approach is to create a correlation model where
the designer selects a series of attacker properties such as skill level, resources, in-
tent, and motivation, and attempts to develop cumulative correlation functions
that eﬀectively predict attacker behavior when applied to real-world attack-
ers [10]. Rocchetto et al. performed a literature search and created a six-proﬁle
model able to eﬀectively describe attacker proﬁles from the majority of cited
literature [20]. The use of this method, however, requires the user to be aware
of the skill level of the attacker. In order to apply Rocchetto’s method to a
realistic attacker model, a probability mass function is used to simulate the
non-determinism in the skillset of an unknown attacker.

Orojloo et al. [18] proposed an attack modeling approach that applied at-
tack trees to model how characteristics of a particular attack (access, knowledge
required, skill required, and level of user interaction) inﬂuence the behavior of
an attacker. While serving as an eﬀective foundation, the attack tree method
as proposed by Orojloo requires a comprehensive perspective of the CPS which
must be created through a manual process for each CPS under consideration.
This design process becomes tedious when considering a large CPS or one with
multiple attack vectors to a single target.

A common approach to representing attacker behavior against a CPS is ap-
plication of the Markov decision process (MDP) [8, 12]. The size of the Markov
model explodes, however, when considering a large CPS with multiple nodes,
each having multiple potential actions. Markov representation also lacks the abil-
ity to clearly depict the nature of various paths an attacker may take through a
system. An alternate to the full MDP is the Partially Observable Markov Deci-
sion Process (POMDP) as in [7]. This model allows the application of the Markov
methodology while limiting the state-space of the model to a single attack-path.
We propose an alternate scheme using a one-step look-ahead formalism as a
solution.

Automation of the attack-analysis process for a complex CPS was explored
in [13], where the ADVISE method is proposed. The ADVISE method requires
as input a description of the system, a description of the adversary, a list of the
desired security metrics, and a description of all vulnerability information per-
taining to the system. In application to a real system, researching, compiling, and
organizing all vulnerability information related to a CPS is a monumental task.
Databases such as the Common Attack Pattern Enumeration and Classiﬁcation
(CAPEC), the Common Weakness Enumeration (CWE), the Common Vulner-

CPS Attacker Modeling Framework

3

abilities and Exposures (CVE), and the Common Platform Enumeration (CPE)
have been applied to attack modeling to aid in vulnerability research [9, 14]. We
propose the application of CAPEC, CWE, CVE, and CPE search engines as an
aid for the generation of a hybrid action database.

Due to the diversity of CPSs, attacker models are often deﬁned within the
context of a speciﬁc system [5, 9, 14]. In this paper, we propose a modular AMF
that is capable of modeling complex attacker behavior against a full CPS and is
readily expandable to include additional aspects of attacker behavior. The au-
thors propose two components of the attacker model as novel. First, the authors
propose a formalization between an attacker proﬁle and an attacker’s behavior
that allows the prediction of the behavior of proﬁle-speciﬁc attackers against a
CPS. This approach allows an attacker-speciﬁc security review and aids in prior-
itizing the relevance of attacks and vulnerabilities in a CPS. Second, the authors
propose a modular scheme for describing cyber-physical system architectures as
well as the attack progression of an attacker through cyber-physical systems.

The remainder of the paper is organized as follows. Section 3 describes the
attacker-modeling framework. A case study is explored in section 4. Section 5
summarizes the work and proposes future research directions.

3 Overview of the Attacker Model

Traditional attacker behavior is captured as a series of observations regarding
the attacker motivation and decision process. These observations are captured
in the proposed AMF as rules. A rule may be formally deﬁned as a facet of
an attacker’s behavior which observes a cause/eﬀect relationship between an
inﬂuencing parameter and the attacker’s actions. The proposed AMF accepts a
series of rules which together deﬁne the behavior of the attacker. The attacker
model overview in Figure 1 depicts the relationship between the attacker and the
CPS. Sample rules deﬁning attacker behavior are implemented in modules such
as the CPS Knowledge and the Target Node Selection modules. This provides
a test-bed to explore the role and inﬂuence of individual rules on the composite
attacker decision process. This also provides a ﬂexible framework that allows
validation of the AMF against a particular dataset where the rules the AMF
implements may be reﬁned and calibrated to achieve a model that accurately
reﬂects the behavior of a known attacker or set of attackers.

Relationships between modules are characterized by connecting arrows, where
upstream modules occur earlier in the attacker decision process. The proposed
attacker model operates on a cyclical action/feedback scheme where an action
is some step the attacker performs in the attack process and feedback is any
information the attacker receives as a result of the action. The progression of
the attack through the CPS is described as the attack state. The attack state
represents a single action and is a tuple of static properties and dynamic vari-
ables. Properties are information that is static throughout the attack process
and in Fig. 1 includes the Action Database and the Attacker Proﬁle. Variables
include information that changes as the attack progresses such as the attacker

4

C. Deloglos et al.

CPS Knowledge. The action performed for each state of the attack is a product
of all static properties and dynamic variables and is discussed further in section
3.6.

Fig. 1. Attacker Model Overview

3.1 Cyber-Physical System

In the proposed attacker-modeling framework, the CPS is modeled and described
as a composition of nodes, edges, attack vectors, and entry points. A node rep-
resents a machine or other potentially vulnerable device that has functional
purpose within the CPS. An edge represents a communication link between two
nodes that may be used to transmit information, while an attack vector is any
edge that may be used for an attack. An entry point is an edge directed into
the CPS from outside the CPS that may be used by an attacker to gain access
to the system. Establishing well-formed boundaries between nodes of the CPS
and relationships between them allows a formal description of a Cyber-Physical
System. Programming tools such as SysML [1] utilize the node/edge system de-
scription scheme and may be readily integrated with the CPS design process for
attacker model automation.

3.2 CPS Knowledge

We begin with making the reasonable assumption that as the attack or probing
progresses, the attacker will begin to learn information about the target system.
This behavior is captured in the CPS knowledge module. The rules that the CPS
knowledge module implements are:

AttackerProfileLegendAttackerOne-step Look-Ahead ActionGeneratorActionAssesment(Evaluation)ActionSamplerFeedbackActionCyber-Physical SystemCPSKnowledgeTarget NodeSelectionModuleVariableActionDatabasePropertyCPS Attacker Modeling Framework

5

– When starting an attack, the attacker only has knowledge of the system

entry points.

– As the attack progresses the attacker will discover new information about

the CPS.

– If a node is compromised, all nodes it is connected to are discovered and

added to the CPS knowledge.

Information about the CPS is fed into the attacker’s CPS knowledge module
as feedback. If a node is compromised it is considered owned by the attacker
and capable of performing pivoting attacks. The initial attacker CPS knowledge
is simpliﬁed for demonstration purposes, but in a more complex application
could include behaviors involving the attacker’s discovery of the target system.
More complex rules may be applied to node ownership such as deﬁning levels of
ownership (based on privilege escalation).

3.3 Target Node Selection

When the attacker goes to perform an action against a system, the attacker
must ﬁrst select a target node. The rules that the target node selection module
implements are:

– The attacker will only target nodes that exist in the attacker’s CPS Knowl-

edge.

– The attacker will not target a node if it is already compromised.
– The attacker will not target a node if the attacker has exhausted all qualiﬁed

actions against it.

– If an attacker targets a node, the attacker will not change targets until

exhausting all actions against it.

– If more than one target is valid, the attacker will select a target node at

random from amongst the valid nodes.

Several additional rules may be added to capture the tendency of an attacker to
target nodes associated with the end-goal (often referred to as the honey-pot).

3.4 Action Database

The purpose of the Action Database module is to capture behaviors inﬂuenced by
the actions available to the attacker. The action database contains descriptions
of all actions known about the CPS. Each action within the database contains
several ﬁelds of information including the action proﬁle, the action description,
the target criteria, and a list of prerequisite actions. The action proﬁle contains a
quantitative description of the user and use-case of the action, which is used for
quantifying a relationship between each action and the attacker proﬁle deﬁned
for the attacker model as discussed further in section 3.6. The action descrip-
tion is a plain-text description of how the action works in as much detail as is
possible. The target criteria deﬁnes what system(s) the action is valid against.

6

C. Deloglos et al.

The prerequisite attacks describe any actions that must be completed before this
action may be attempted.

A critical component to the viability of the attacker model is the database
population scheme. CAPEC [16], CWE [2], CVE [15], and CPE [3] are amongst
the most popular and provide diﬀerent approaches to cataloguing attacks, attack
descriptions, and attack relationships. Search engines that make use of online at-
tack and vulnerability databases aid in eﬀectively generating an action database
for the attacker model. One tool that was applied to populate the action database
for the case study in section 4 was the CYBOK tool [6], which is a literal search
engine for CAPEC, CWE, and CVE capable of generating vulnerability data for
individual queries or entire systems.

3.5 One-Step Look-Ahead Generator

The one-step look-ahead generator applies the attacker’s knowledge of the CPS
to ﬁlter out all attacks that are invalid for the current attack state. Filters are
non-probabilistic in nature and may depend on any information regarding the
current state of the attack or the description of the node. This attacker model
applies three ﬁlters.

1. The attacker will only consider actions that meet the target criteria
2. The attacker will not consider an action that has already been performed on

the target

3. The attacker will not consider an action if the edge relating the current node

to the target node is not a viable propagation path for that action

We deﬁne A as the set of all m known actions in the action database and Φ ⊆ A
as the set of actions known by the attacker. The three ﬁlters are deﬁned as
Φtarget ⊆ Φ, Φex ⊆ Φ, and Φvect ⊆ Φ for ﬁlters 1, 2, and 3 respectively. The
set of actions that are valid for the attacker to perform in the given state of the
attack (Φvalid) are then deﬁned by Equation 1, where the attack space can be
visualized in Fig. 2.

Φvalid = Φex ∩ Φvect ∩ Φtarget

(1)

3.6 Action Assessment

When an attacker goes to select an action, characteristics about the attacker
will inﬂuence the selection of the attack. This behavior is captured in the action
assessment module. The rules applied here are:

– An attacker’s behavior is dependent on one or more primary inﬂuencing

factors.

– Actions may have properties that allow them to be correlated to attackers.
– An attacker’s attack selection decision can be predicted by evaluating the

sum of inﬂuencing factors between an attacker and an action.

The action assessment module calculates the probability of the attacker per-
forming each of the actions based on probability functions that take as operands
the attacker proﬁle, the attack proﬁle, and the current state of the attack.

CPS Attacker Modeling Framework

7

Fig. 2. The intersection of action selection ﬁlters applied to the action database

Attacker Proﬁles and Attack Proﬁles Attacker proﬁles are a topic well
covered in literature with no recognized standards for what characteristics best
model an attacker. The purpose of an attacker proﬁle is to capture characteris-
tics about an attacker that inﬂuence the attacker’s behavior, thereby describing
the expected behavior of the attacker. The characteristics that deﬁne the at-
tacker proﬁle are termed attacker properties. Rocchetto et al. [20] performed a
literature review on attacker proﬁles for CPSs in an attempt to ﬁnd a unify-
ing attacker proﬁling model to describe various attackers from multiple diﬀerent
research studies. In conclusion, Rocchetto proposed a set of six attacker pro-
ﬁles composed of twenty-nine attacker properties that eﬀectively described the
majority of attacker proﬁles in the referenced literature.

An action proﬁle is often represented as a set of properties describing the
characteristics of the action [20]. This, however, implies linearly proportionality
to an attacker proﬁle, which is not universally true. For example, an attacker with
a high skill set is not necessarily more likely to perform an attack that requires
a high skill set when an easier attack may succeed as well. We capture this
behavior by deﬁning an attack proﬁle as the proﬁle of the attacker expected to
use that attack. Because attacker behavior is constantly changing as technology
evolves, this proﬁling technique may be reinforced by empirical data from records
of attack history. Collaborations such as MITRE’s ATT&CK framework [4] may
aid in assessment of current threat actors. This facilitates an attacker model that
can better emulate realistic and relevant threats by allowing the user to base the
relationship between attackers and their actions oﬀ of current attacker data.

As such, we deﬁne an attacker proﬁle (∆) as an n-dimensional space of at-
tacker properties (δi) such that ∆ = {δ1, δ2, . . . , δn} for an attacker proﬁle having
n properties. An example attack space can be seen in Fig. 3 where the attacker
proﬁle and several action proﬁles are plotted in the 3-dimensional space. The

AΦΦexΦtargetΦvectΦvalid8

C. Deloglos et al.

probability of an attacker performing an action is a function of the distance
between the attacker proﬁle and the action proﬁle in n-dimensional space.

Fig. 3. An example 3-dimensional attack
space showing the attacker proﬁle and
several action proﬁles

Fig. 4. Example probability mass func-
tion for a probabilistic attacker proﬁle
against a nuclear power plant

Probabilistic Attacker Proﬁles In applying Rocchetto’s attacker proﬁles to
an attacker model it is important to note that in a real-world application one
cannot assume which attacker will be attacking a system. In order to simulate
this non-deterministic behavior, two types of attacker proﬁles are adopted which
are the static attacker proﬁle and the probabilistic attacker proﬁle. A static at-
tacker proﬁle represents one of the six attacker proﬁles deﬁned by Rocchetto
et. al. [20]. A probabilistic attacker proﬁle may be represented as a probability
mass function (PMF) of the six proﬁles. The PMF is generated by assigning each
of the six attacker proﬁles (∆1, . . . , ∆6) a likelihood of attacking (li) such that
0 ≤ li ≤ 1.The Probability of attack of a speciﬁc attacker proﬁle is calculated
using:

P (∆i) =

li
(cid:80)n
j=1 lj

(2)

where (cid:80)n
j=1 P (∆j) = 1. The PMF in Fig. 4 is an example probabilistic attacker
proﬁle designed to mimic the probability of attackers against a nuclear power
plant. At the beginning of the attack analysis process, the probabilistic attacker
proﬁle is sampled to obtain a discrete attacker proﬁle which is recognized as the
attacker for the remainder of the attack process.

Attack Probability Functions The probability that the attacker will perform
an attack at any given time is calculated using the attack probability function.
Attacker properties may be one of three types which are sets, bounded ranges,
and unbounded ranges. Non-ordered sets are considered to have a scaled property
value γ = 1 if the attacker proﬁle property and the attack proﬁle property match

CPS Attacker Modeling Framework

9

and γ = 0 otherwise. Ordered set values may be mapped to the scaled property
range (0 ≤ γ ≤ 1) using Fuzzy set theory as demonstrated by Patil et al. in [19].
Bounded ranges are numerical ranges where the value of a property (ε) may
only fall between a lower bound (εL) and an upper bound (εH ). Bounded ranges
are linearly mapped to the scaled property value (γ : 0 ≤ γ ≤ 1) using:

γ =

ε − εL
εH − εL

(3)

Several scaling functions exist for unbounded ranges such as the percent-
diﬀerence function, the logistic function, and the hyperbolic tangent. The value
weighting in these functions, however, is non-linear, which does not properly
scale diﬀerent property values where a score considered median is represented
by a numerically large or numerically small value (>100 or <1 respectively).
Therefore, we propose converting the unbounded property values to a bounded
range by ﬁrst evaluating the maximum (γmax) and minimum (γmin) values for
all actions within the database, then using the local maximum and minimum to
scale the unbounded range.

We designate the set of m available actions in the action database as A =
{A1, A2, . . . , Am}. Each action Ai (i = 1, 2, . . . , m) has an associated set of
scaled property values Γi = {γ1
i , . . . , γn
i }. For a given attacker proﬁle (∆)
with n scaled property values Θ = {θ1, θ2, . . . , θn}, the distance (di) between the
attacker and each action is calculated by the distance between the two proﬁles
in n-dimensional space using:

i , γ2

di = f (Θ; Γi) =

(cid:118)
(cid:117)
(cid:117)
(cid:116)

n
(cid:88)

j=1

(cid:17)2

θj − γj
i

(cid:16)

1
β2
j

(4)

where βj is a criticality factor such that {β ∈ R|0 ≤ β ≤ 1} which increases
the distance for properties with a β < 1 criticality. The score of each action (si)
is inversely proportional to di and calculated using the function:

si = 1 −

di
(cid:80)m
j=1 dj

i = 1, . . . , m

(5)

This equation is unique in that it calculates the inverse of the distance without
applying a nonlinear value-weighting as is observed in the inverse function or
exponential functions such as the Softmax function. According to the score for
each action, the probability that the attacker will take action Ai is calculated
using the function:

P [Ai] =

si
(cid:80)m
j=1 sj

(6)

Equation (6) has the intuitive interpretation that the higher the score the at-
tacker gets for an action, the higher the probability that this action will be
chosen by the attacker.

10

C. Deloglos et al.

3.7 Action Sampler

The last module in the attacker model is the action sampler module. The action
sampler module implements the following rule: After evaluating the attacks, the
attacker is more likely to choose an attack with a high probability than an attack
with a low probability.

The action sampler receives as inputs all attacks for the target system with
their attack probability values and selects one of the actions by sampling a
weighted randomizing function (randw()) mapped to the probabilities of the set
of probabilistic actions ∆ = {Ai, P [Ai]}. This action is then performed by the
attacker against the CPS.

4 Case Study

For application of the proposed AMF, we observe the Industrial Control System
(ICS) in Fig. 5 composed of nodes and communication channels. This example
ICS is used to control a simulated exothermic continuous stirred tank reactor
(CSTR) using an NI cRIO controller. The target for the attack is the Basic
Process Control System (BPCS, N4). Control or disruption of the BPCS by the
attacker indicates a successful attack.

Fig. 5. Case Study ICS relational diagram

4.1 ICS Formal Description

The ICS consists of 7 nodes, each composed of key attributes included in Fig. 5.
The system is described as having 4 entry points which include N1, N2, and
N6 via infected USB and N7 via remote access. Six properties are selected as a
subset of those described by Rocchetto et al. [20] to describe the attacker and
action proﬁles which include Access, Finances, Knowledge, Manpower, Motiva-
tion, and Tools. Access, Motivation, and Tools are deﬁned as set properties with

relationshipProgramming WS Windows 7 Machine(N1)Monitoring WS Windows 7 Machine(N2)LAN(C1)SIS NI cRIO 9064(N3)BPCS NI cRIO 9064(N4)MODBUS(C2)LabVIEW RT NI cRIO 9063(N5)Interaction PC Windows 7 Machine(N6)nodeattributes(ID)comm(ID)FirewallCisco ASA(N7)USB(C4)USB(C4)USB(C4)Cloud(C3)CPS Attacker Modeling Framework

11

values of {Direct, Wireless, Oﬀsite} for Access and {Low, Medium, High} for
Motivation and for Tools. Knowledge is deﬁned as a bounded property with a
0 ≤ Knowledge ≤ 10 range. Finances and Manpower are deﬁned as unbounded
properties. These properties are not intended to be a holistic description of the
attacker behavior, but rather to demonstrate the principles and dynamics of the
diﬀerent types of proﬁle properties. The criticality factor is kept at unity (1) for
all proﬁle properties. The attacker proﬁle PMF in Fig. 4 was deﬁned as a set of
6 attacker proﬁles with property values in Table 1. CAPEC, CWE, CVE, and
CPE databases were used to search for vulnerability information. The CAPEC
and CWE databases were used to identify potential attack patterns and weak-
nesses respectively, aiding in the discovery of associated CVEs. Table 2 contains
a sample proﬁle set for the vulnerabilities found for the ICS nodes.

Table 1. Attacker proﬁles and property values

100
1000

Access Finances Knowledge Manpower Motivation Tools
Proﬁle
2
Basic User
Oﬀsite
5
Cybercriminal Oﬀsite
6
Wireless 500
Hactivist
100
Insider
7
Onsite
1000000 9
Nation State Oﬀsite
4
10000
Onsite
Terrorist

Low
Low
Medium High
High
Medium
Medium Medium
High
High

40
160
1500
10
100000
1000

High
Medium

Table 2. Case study action proﬁles

Targets

K Mp Mo
Low
3 20

ID Name
A
F
V1 Remote Access Trojan Windows 7 Machine
Oﬀsite 0
Windows 7 Machine
V2 CVE-2017-2779
Onsite 10000 9 5000 High Medium
Oﬀsite 6000 10 8000 High Medium
Windows 7 Machine
V3 CVE-2017-2775
NI cRIO 9064 - NI cRIO 9063 Onsite 50000 9 500 High Medium
V4 MODBUS MITM
NI cRIO 9064 - NI cRIO 9063 Oﬀsite 40000 6 200 High Medium
V5 MODBUS DOS
V6 Code Injection
NI cRIO 9064
V7 Watering-Hole attack Windows 7 Machine
Windows 7 Machine
V8 CVE-2014-4115
Windows 7 Machine
V9 CVE-2010-2568
V10 CVE-2019-1713
Cisco ASA
A=Access, F=Finances, K=Knowledge, MP=Manpower, M=Motivation, T=Tools

Onsite 100
Oﬀsite 2000 6 300 Medium Medium
Onsite 1200 7 800 High
Onsite 10000 8 2000 High
Oﬀsite 5000 9 100 High Medium

4 300 Medium Low

High
High

T
Low

4.2 Attacker Model Execution

Sampling the PMF results in the selection of the Nation State attacker. The
attacker proﬁle is then evaluated against the CPS. Initial attacker knowledge

12

C. Deloglos et al.

assumed includes the entry vectors E1, E2, E3, and E4, along with the corre-
sponding existence of nodes N1, N2, N6, and N7. The modeling cycle in Fig. 1
begins and is repeated until either the target is reached or there are no actions
remaining for the attacker to perform. Fig. 6 shows the progression of the attack
as a POMDP, including each decision the attacker made in the attacker process
and the probability of each decision.

Fig. 6. Attacker CPS Knowledge upon completion of the attack, including attack pro-
gression

4.3 Attack Review

The steps taken to complete the attack in Fig. 6 represent one of many possible
attacks that may have been performed by the attacker. The attacker was able to
compromise the CPS by exploiting three vulnerabilities. Step 1 used an infected
USB thumb-drive to gain access to the monitoring workstation. Step 2 used a
MODBUS man-in-the-middle attack to take over the SIS cRIO. Step 3 used a
MODBUS DOS attack to disrupt the operation of the BPCS.

5 Conclusion and Future Work

The Attacker Modeling Framework we present signiﬁcantly builds upon exist-
ing research and injects a more theoretical foundation for system behavior and

0.250.250.250.25BeginE10.32140.32720.3513E2E3E4Entry TargetSelectionV1V70.33330.33330.3333V80.46780.5322N3N1N4ActionSelectionTarget NodeSelection0.33330.33330.3333V4V50.46780.5322N4N1N5V4V5ActionSelectionTarget NodeSelectionActionSelectionCPS Attacker Modeling Framework

13

attacker causality models. The ﬂexibility of the framework readily integrates a
variety of complex attacker behaviors. The proposed attack probability func-
tions quantify the inﬂuence of attacker characteristics on the attacker’s decision
process and provide probabilistic predictions for the attacker behavior.

Preliminary ﬁndings indicate that the proposed method scales well; specif-
ically with respect to the decision space of a traditional MDP or attack-tree
analysis methods which would grow exponentially. The POMDP analysis frame-
work provides manageable attack scenarios describing system vulnerabilities and
putting the attack process in the context of the CPS. The case study shows the
beneﬁt of the attacker decision-by-decision analysis, allowing the cyber analyst
and system engineers to have deeper insights into potential vulnerability path-
ways into and through the CPS.

Proposed future work includes,

1. The implementation of additional rules deﬁned in related literature
2. The development of a tool to aid in attack scenario design and automation

of the attack analysis process

3. Exploration of diﬀerent techniques to train and calibrate the AMF
4. The application of the AMF to recorded attacker data-sets from behavioral

analysis studies

5. The integration of a penetration-testing framework such as Metasploit into

the attacker-model for analysis against a SCADA test-bed

Acknowledgement

This research was made possible by NPRP 9-005-1-002 grant from the Qatar
National Research Fund (a member of The Qatar Foundation). The statements
made herein are solely the responsibility of the authors.

References

1. SysML Open Source Project, https://sysml.org/
2. CWE - Common Weakness Enumeration (2018), https://cwe.mitre.org/index.

html

3. CPE - Common Platform Enumeration (2019), https://nvd.nist.gov/products/

cpe

4. ATT&CK for

Industrial Control

https://doi.org/10.1109/isie.2010.5636886,
attackics/index.php/

Systems.

2020).
In: MITRE (1
https://collaborate.mitre.org/

5. Adepu, S., Mathur, A.: Generalized Attacker and Attack Models for Cyber
Physical Systems. In: Proceedings - International Computer Software and Ap-
plications Conference. vol. 1, pp. 283–292. IEEE Computer Society (8 2016).
https://doi.org/10.1109/COMPSAC.2016.122

6. Bakirtzis, G., Simon, B.J., Collins, A.G., Fleming, C.H., Elks, C.R.: Data-driven
vulnerability exploration for design phase system analysis. IEEE Systems Journal
14(4), 4864–4873 (2020). https://doi.org/10.1109/JSYST.2019.2940145

14

C. Deloglos et al.

7. Carin, L., Cybenko, G., Hughes, J.: Quantitative Evaluation of Risk for Investment
Eﬃcient Strategies in Cybersecurity: The QuERIES Methodology. Tech. rep., Duke
University (2008)

8. Chen, Y., Hong, J., Liu, C.C.: Modeling of Intrusion and Defense for Assessment
of Cyber Security at Power Substations. IEEE Transactions on Smart Grid 9(4),
2541–2552 (7 2018). https://doi.org/10.1109/TSG.2016.2614603

9. Ekelhart, A., Kiesling, E., Grill, B., Strauss, C., Stummer, C.:

Integrat-
ing attacker behavior in IT security analysis: a discrete-event simulation ap-
proach. Information Technology and Management 16(3), 221–233 (9 2015).
https://doi.org/10.1007/s10799-015-0232-6

10. Heckman, R.: Attacker Classiﬁcation to Aid Targeting Critical Systems for Threat

Modelling and Security Review. Tech. rep., ROCKYH (2005)

11. Knowles, W., Prince, D., Hutchison, D., Disso, J.F.P., Jones, K.: A sur-
Inter-
Infrastructure Protection 9, 52–80 (6 2015).
https://www.sciencedirect.com/

vey of cyber
national Journal of Critical
https://doi.org/10.1016/j.ijcip.2015.02.002,
science/article/pii/S1874548215000207

security management

in industrial control

systems.

12. Kriaa, S., Bouissou, M., Pi`etre-Cambac´ed`es, L.: Modeling the Stuxnet attack
with BDMP: Towards more formal risk assessments. In: 7th International Con-
ference on Risks and Security of Internet and Systems, CRiSIS 2012 (2012).
https://doi.org/10.1109/CRISIS.2012.6378942

13. LeMay, E., Ford, M.D., Keefe, K., Sanders, W.H., Muehrcke, C.: Model-based se-
curity metrics using ADversary VIew Security Evaluation (ADVISE). Proceedings
of the 2011 8th International Conference on Quantitative Evaluation of Systems,
QEST 2011 pp. 191–200 (2011). https://doi.org/10.1109/QEST.2011.34

14. Mili, S., Nguyen, N., Chelouah, R.: Transformation-Based Approach to Security
Veriﬁcation for Cyber-Physical Systems. IEEE Systems Journal PP, 1–12 (2019).
https://doi.org/10.1109/jsyst.2019.2923818

15. MITRE: CVE - Common Vulnerabilities and Exposures. Common Vulnerabilities
and Exposures (January) (2016). https://doi.org/10.1016/0272-7757(91)90035-N,
https://cve.mitre.org/

16. MITRE Corporation: CAPEC - Common Attack Pattern Enumeration and Classi-
ﬁcation (CAPEC) (2011), https://capec.mitre.org/index.htmlhttp://capec.
mitre.org/index.html

17. Mo, Y., Kim, T.H.J., Brancik, K., Dickinson, D., Lee, H., Perrig, A., Sinopoli, B.:
Cyber-physical security of a smart grid infrastructure. Proceedings of the IEEE
100(1), 195–209 (1 2012). https://doi.org/10.1109/JPROC.2011.2161428

18. Orojloo, H., Abdollahi Azgomi, M.: Predicting the behavior of attackers and the
consequences of attacks against cyber-physical systems. Security and Communica-
tion Networks 9(18), 6111–6136 (2016). https://doi.org/10.1002/sec.1761

19. Patil, S.K., Kant, R.: A fuzzy AHP-TOPSIS framework for

ranking
solutions of Knowledge Management adoption in Supply Chain to
the
679–
its barriers. Expert Systems with Applications 41(2),
overcome
693 (2014). https://doi.org/10.1016/j.eswa.2013.07.093, http://dx.doi.org/10.
1016/j.eswa.2013.07.093

20. Rocchetto, M., Tippenhauer, N.O.: On attacker models and proﬁles for cyber-
physical systems.
In: Lecture Notes in Computer Science (including sub-
series Lecture Notes in Artiﬁcial Intelligence and Lecture Notes in Bioin-
formatics). vol. 9879 LNCS, pp. 427–449. Springer Verlag, Singapore (2016).
https://doi.org/10.1007/978-3-319-45741-3 22

