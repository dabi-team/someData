1
2
0
2

v
o
N
3
2

]
I

A
.
s
c
[

1
v
5
8
7
1
1
.
1
1
1
2
:
v
i
X
r
a

Simulation r´ealiste d’utilisateurs pour les
syst`emes d’information en Cyber Range

Alexandre Dey1,2, Benjamin Cost´e1, ´Eric Totel3 et Adrien B´ecue1

1 Airbus CyberSecurity, Rennes, France
2 IRISA, Rennes, France
3 T´el´ecom SudParis, Paris, France
alexandre.dey@airbus.com
benjamin.b.coste@airbus.com
eric.totel@telecom-sudparis.eu
adrien.becue@airbus.com

R´esum´e. La g´en´eration d’activit´e utilisateur est un ´el´ement-cl´e autant
pour la qualiﬁcation des produits de supervision de s´ecurit´e que pour
la cr´edibilit´e des environnements d’analyse de l’attaquant. Ce travail
aborde la g´en´eration automatique d’une telle activit´e en instrumentant
chaque poste utilisateur `a l’aide d’un agent externe; lequel combine des
m´ethodes d´eterministes et d’apprentissage profond, qui le rendent adapt-
able `a diﬀ´erents environnements, sans pour autant d´egrader ses perfor-
mances. La pr´eparation de sc´enarios de vie coh´erents `a l’´echelle du SI est
assist´ee par des mod`eles de g´en´eration de conversations et de documents
cr´edibles.

Mots-cl´e: Cyber range · g´en´eration de texte · reconnaissance d’images
· simulation de vie · jeux de donn´ees · honeynet

1

Introduction

Les avanc´ees r´ecentes et la d´emocratisation des technologies de virtualisation
(e.g., Software Deﬁned Network ou SDN, Cloud) ont notamment permis l’essor
d’outils d´edi´es au cyber-entraˆınement. Appel´ees commun´ement Cyber Ranges,
ces plateformes facilitent le d´eploiement de Syst`emes d’Information (SI) complets
pour l’organisation de formations et exercices `a destination des op´erationnels de
cyberd´efense. Outre leurs qualit´es p´edagogiques, elles constituent ´egalement une
base solide pour l’´evaluation et la mise au point des outils de supervision de
s´ecurit´e [9] (sonde de d´etection d’intrusion, d´etection d’anomalies, SIEM, etc.),
ainsi que la constitution d’environnements d’analyse des attaquants (honeynet
et plateformes de d´etonation).

La simulation d’activit´e sur les postes utilisateur apporte une cr´edibilit´e
n´ecessaire aux plateformes d’analyse des attaquants tout en permettant d’´evaluer
le comportement des produits de s´ecurit´e face au fonctionnement nominal des
SI. En eﬀet, les jeux de donn´ees disponibles pour l’apprentissage machine dans
le domaine de la cybers´ecurit´e repr´esentent des attaques, plus ou moins r´ealistes,

 
 
 
 
 
 
2

Alexandre Dey

mais n’int`egrent pas ou peu de comportement ill´egitimes (scan de ports, branche-
ment de cl´es USB sur des postes sensibles, etc.) ´emanant d’activit´es d’utilisateur
l´egitimes. Cette absence d’activit´e, pourtant foisonnante sur un SI r´eel, complex-
iﬁe l’immersion dans le cas du cyber-entraˆınement, biaise les donn´ees collect´ees
sur les terminaux pour l’entraˆınement de m´ethodes de supervision bas´ees sur
l’apprentissage machine, et diminue grandement la cr´edibilit´e des plateformes
d’analyse des attaquants.

La g´en´eration automatique de vie r´ealiste, objet notamment du challenge
IA & Cyber 2020 de l’ECW, est un sujet complexe qui demande de r´esoudre
plusieurs probl`emes. Tout d’abord, l’instrumentation des machines doit se faire
par des m´ethodes ext´erieures `a celles-ci aﬁn de limiter les traces de simulation
laiss´ees sur les postes utilisateurs. En second lieu, il est n´ecessaire d’adapter
en temps r´eel le sc´enario pr´e-´etabli aux r´eactions al´eatoires de l’environnement
de simulation (e.g., position d’une fenˆetre, arrˆet impr´evu). Cette adaptation se
fait via des v´eriﬁcations automatiques de l’environnement qui doivent par ailleurs
ˆetre eﬀectu´ees en un temps inf´erieur ou ´egal au temps de r´eaction humain. Enﬁn,
une assistance `a l’op´erateur est n´ecessaire pour la mise au point de sc´enarios `a
grande ´echelle.

Ce travail s’inspire des m´ethodes de g´en´eration de vie, reposant sur un agent,
employ´ees par la plateforme de d´etonation BEEZH, pr´esent´ee par Amossys
`a la conf´erence C&ESAR 2020 [7], pour lesquelles nous proposons plusieurs
am´eliorations :

– D´ecoupage de l’agent en plusieurs couches d’abstraction successives pour
gagner en modularit´e (e.g., s’aﬀranchir de la technologie de virtualisation,
adaptabilit´e `a des machines physiques, etc.);

– Combinaison eﬃciente de m´ethodes d´eterministes et d’apprentissage profond

pour la r´eaction en temps r´eel de l’agent;

– Assistance `a la cr´eation d’actions ex´ecutables par l’agent;
– Assistance `a la cr´eation de sc´enarios de vie `a partir des proﬁls des utilisateurs

simul´es et de leurs interactions.

Dans la section 2, nous pr´esentons l’´etat de l’art. Les sections 3 et 4 d´ecriront
les travaux r´ealis´es. Nous conclurons en discutant notre approche en sections 5
et 6.

2

´Etat de l’art

De nombreuses ´etudes ont soulign´e l’importance de la simulation d’activit´e util-
isateur pour l’´etude des logiciels malveillants [4,1]. Ainsi, l’absence de plusieurs
artefacts (e.g., pr´esence de ﬁchiers dans la corbeille, pr´esence de cookies, his-
torique de navigation) permet d’identiﬁer les machines n’ayant jamais ´et´e utilis´ees
[15]. Certains logiciels malveillants contournent les syst`emes de d´etection par le
biais de tests de Turing invers´es tels que des m´ecanismes `a retardement (scroll
dans un document Word) ou la v´eriﬁcation de la vitesse d’utilisation de la souris

Simulation r´ealiste d’utilisateurs en Cyber Range

3

[25]. La simulation en temps r´eel d’actions utilisateurs permet cependant de
mettre en ´evidence le comportement malveillants de ces logiciels.

L’utilisation automatis´ee de l’interface graphique est un sujet historiquement
´etudi´e pour le contrˆole qualit´e des logiciels. Deux approches s’y distinguent : le
rejeu d’actions pr´e-enregistr´ees [27,24,16], long `a conﬁgurer, et l’automatisation
compl`ete qui souﬀre d’un manque de r´ealisme [23,6]. Chacune de ces m´ethodes
requiert un agent install´e sur les machines instrument´ees, ce qui fournit un in-
dicateur `a l’attaquant, et teinte les journaux d’´ev´enements dans le cas de la
collecte de jeux de donn´ees.

Plus r´ecemment, MORRIGU [14] instrumente des machines virtuelles via
l’API VirtualBox depuis un hˆote Windows. Malgr´e ses r´esultats positifs sur la
d´etection de comportements malveillants, le manque de portabilit´e de la solu-
tion ne permet pas d’envisager son emploi `a des ﬁns de cyber-entraˆınement qui
implique l’instrumentation de multiples machines en r´eseau.

L’outil de simulation des utilisateurs int´egr´e `a la plateforme BEEZH [7] in-
strumente des machines virtuelles au travers de la fonction de d´eport d’´ecran
de l’hyperviseur, reposant sur la technologie VNC. Les sc´enarios de vie sont
d´ecoup´es en actions unitaires simples (e.g., ouvrir le navigateur, recherche web)
dont l’ex´ecution est assist´ee par des m´ethodes d’analyse d’images (captures
d’´ecran) `a l’aide de la librairie desker [2], publi´ee sous licence GPL v3. Cette
approche pionni`ere a montr´e l’importance mais ´egalement la complexit´e du su-
jet. Le recours `a VNC oﬀre en eﬀet un large ´eventail de possibilit´es vis-`a-vis
de l’interaction avec la machine instrument´ee mais se restreint n´eanmoins `a
l’instrumentation de machines virtuelles. La cr´eation des sc´enarios et leur adap-
tation aux sp´eciﬁcit´es de l’environnement n´ecessitent de surcroˆıt des actions
enti`erement manuelles. Enﬁn, la solution d’analyse d’image retenue (Faster-
RCNN [22]) sollicite d’importantes ressources de calcul incompatibles avec notre
contrainte de performance. Faster-RCNN [22] est un algorithme tr`es r´epandu (car
pertinent) pour la d´etection de zones d’int´erˆet. D’autres initiatives plus r´ecentes
telles que RetinaNet [12] ou SSD [13] fournissent cependant de meilleurs r´esultats
en un temps plus court.

La g´en´eration automatique de texte repose fr´equemment sur les mod`eles de
Markov cach´es [8] (HMM, Hidden Markov Model ) mais les r´esultats produits
deviennent rapidement incoh´erents lorsque la s´equence g´en´er´ee s’allonge. Des
solutions `a base de r´eseaux de neurones comme Transformer [26] apparaissent
plus adapt´es `a la mod´elisation du langage. Les mod`eles bas´es sur le syst`eme
GPT [18], performants et polyvalents, produisent toutefois des mod`eles massifs
(e.g., 11 milliards de param`etres pour T5 [20], 175 milliards pour GPT-3 [3]). Au
regard de leurs performances, nos travaux s’inspirent de GPT-2 [19] (117 millions
de param`etres) et CTRL [10] pour la g´en´eration conditionnelle de texte.

3 Ex´ecution et enregistrement d’actions

L’instrumentation de machines virtuelles ou physiques repose sur la conception
d’un agent externe (Section 3.1) capable de reconnaˆıtre son environnement et

4

Alexandre Dey

de s’y adapter en cons´equence (Section 3.2). La r´ealisation d’actions complexes
pr´e-enregistr´ees (Section 3.3) est ´egalement une fonctionnalit´e recherch´ee.

3.1 Conception de l’agent

Aﬁn de simpliﬁer la conﬁguration du g´en´erateur de vie par les op´erateurs, nous
avons choisi une approche en couches d’abstraction (Fig. 1). En eﬀet, une ap-
proche de bout-en-bout devient diﬃcile `a maintenir le nombre de sc´enarios gran-
dissant (e.g., code dupliqu´e) et impose `a l’op´erateur de d´eﬁnir manuellement un
grand nombre de d´etails lorsqu’il cr´ee un sc´enario. Les sc´enarios d’activit´e util-
isateur sont ainsi transcris par un agent en actions bas niveau (clavier, souris et
´ecran) qu’il eﬀectue ensuite sur la machine instrument´ee.

Fig. 1. Architecture fonctionnelle de l’agent

Au plus bas niveau, l’utilisateur virtuel interagit avec la machine instru-
ment´ee par le biais de la souris, du clavier et de l’´ecran. L’objectif est de pou-
voir, sans modiﬁer les sc´enarios de vie, adapter l’agent `a plusieurs plateformes
de virtualisation (e.g. VMWare ESXi, Proxmox, etc.) mais ´egalement `a des ma-
chines physiques. Nous avons consid´er´e pour cela trois m´ethodes d’interaction
diﬀ´erentes mais compl´ementaires : l’API Qemu Monitor4, une connexion VNC
et un agent install´e sur la machine `a instrumenter. Concernant les machines
physiques, l’approche la plus pertinente semble la communication des actions
clavier et souris par USB selon le protocole HID5 en capturant la sortie vid´eo.
Pour contrer des m´ethodes d’´evasion de sandbox employ´ees par certains logi-
ciels malveillants, nous rajoutons de l’al´ea dans les frappes clavier et les mou-
vements de souris. Pour ces derniers, chaque d´eplacement est d´ecoup´e en une

4 https://qemu-project.gitlab.io/qemu/system/monitor.html
5 https://www.usb.org/hid

Simulation r´ealiste d’utilisateurs en Cyber Range

5

multitude de petits d´eplacements, et la vitesse varie en fonction de la distance `a
parcourir (i.e., un mouvement court sera moins rapide qu’on mouvement long).
Ceci ﬂuidiﬁe le mouvement (augmentant le r´ealisme) et trompe les malware qui
d´etectent les d´eplacements instantan´es de la souris. De l’al´ea et une inertie dans
le mouvement sont rajout´es pour ´eviter les mouvements de souris rectilignes et
trop pr´ecis (d´etect´es par certaines m´ethodes d’´evasion). Une latence al´eatoire
est ´egalement ajout´ee entre chaque frappe clavier aﬁn de rendre inop´erantes
les m´ethodes de d´etection recherchant une r´egularit´e. Enﬁn, lorsque l’utilisateur
virtuel est en attente (e.g., lors de la lecture d’un texte, ou lorsque l’agent ef-
fectue un calcul long), des mouvements al´eatoires de souris sont eﬀectu´es pour
simuler les mouvements spontan´es lorsque la main est pos´ee sur la souris. Les
mod`eles d’al´ea pr´esent´es ici visent `a contrer les m´ecanismes de s´ecurit´e les plus
simples. Ces mod`eles pourront ˆetre complexiﬁ´es par la suite aﬁn de mod´eliser
plus ﬁnement des utilisateurs humains (e.g., vitesse de frappe diﬀ´erente d’un
utilisateur `a un autre).

La seconde couche dite d’interaction permet de s’adapter aux sp´eciﬁcit´es de
l’environnement de la machine instrument´ee. En eﬀet, bien que les m´ethodes de
reconnaissance d’images utilis´ees (section 3.2) soient peu sensibles aux variations
graphiques mineures (e.g., r´esolutions d’´ecran diﬀ´erentes, couleurs l´eg`erement
diﬀ´erentes, etc.), certaines variations demandent de modiﬁer les images `a cibler.
Par exemple, les actions `a eﬀectuer pour envoyer un mail avec Thunderbird ou
Outlook sont fonctionnellement similaires mais les ´el´ements d’interface sont suﬀ-
isamment diﬀ´erents pour n´ecessiter des interactions diﬀ´erentes avec la machine.
La couche sup´erieure d´ecrit des actions unitaires simples (e.g., ouvrir le nav-
igateur web, rechercher un mot cl´e, identiﬁer les liens dans du texte, etc.) et sert
d’interface de programmation (API) pour les sc´enarios. Les sc´enarios ainsi cr´e´es
constituent l’ultime couche d’abstraction.

3.2 Analyse des captures d’´ecran

L’analyse des captures d’´ecran permet `a un agent de contrˆoler son ´etat en
temps r´eel par reconnaissance des zones d’int´erˆets, telles les boutons d’interface
`a cliquer, les liens dans une page web, etc. Pour garantir l’eﬃcience calcula-
toire, primordiale dans notre contexte, nous limitons syst´ematiquement la quan-
tit´e d’information (i.e. taille et nombre d’images) et la complexit´e des mod`eles
statistiques. Trois techniques de reconnaissance d’image sont ainsi employ´ees. La
premi`ere, connue sous le nom de template matching, consiste `a trouver dans une
image (ici une capture d’´ecran) le ou les ´el´ements correspondant le plus `a une
cible recherch´ee. Bien que de faibles variations (e.g., r´esolution, couleurs, etc.)
suﬃsent `a la rendre inop´erante, cette m´ethode a l’avantage d’ˆetre peu coˆuteuse
en ressources et d’ˆetre d´eterministe, ce qui la rend appropri´ee `a la d´etection
d’´el´ements d’interface qui varient peu voire pas pour un mˆeme environnement
(e.g., bouton du menu d´emarrer, des fenˆetres, etc.).

Dans les cas o`u le template matching n’est pas satisfaisant, nous proposons
d’employer des algorithmes d’apprentissage profond ayant montr´e des perfor-
mances remarquables pour la d´etection d’objet. Les m´ethodes les plus eﬃcientes

6

Alexandre Dey

telles SSD [13] ou YOLO [21] requi`erent cependant d’importantes ressources cal-
culatoires qui limitent le passage `a l’´echelle (plusieurs machines instrument´ees).
De plus, il n’existe pas de jeux de donn´ees publics contenant des captures d’´ecran
avec les zones d’int´erˆet d´etour´ees et annot´ees. Collecter et annoter un tel jeu de
donn´ees prend un temps consid´erable. Pour ces raisons, nous avons choisi une
approche qui exploite la g´eom´etrie des formes `a rep´erer `a l’´ecran (Fig. 2) en
appliquant une m´ethode de seuillage adaptatif [11]. Les objets au premier plan
(e.g., icˆones, texte) ainsi que les s´eparations entre les diﬀ´erentes zones `a l’´ecran
(e.g., contour des fenˆetres) deviennent ainsi simples `a identiﬁer. En appliquant
des r`egles de ﬁltrage (e.g., une icˆone est `a peu pr`es aussi large que haute, un
bouton sera plutˆot plus large que haut, etc.) il est possible, pour un coˆut calcula-
toire faible, d’identiﬁer les zones d’int´erˆet. Des mod`eles statistiques (e.g., r´eseaux
de neurones `a convolution) ﬁltrent les potentiels faux positifs et classiﬁent les
autres.

Fig. 2. M´ethodologie d’analyse d’images

Enﬁn, la reconnaissance de caract`eres est utilis´ee pour la navigation dans
l’interface (e.g., label des ﬁchiers et dossiers, ´el´ements des menus, etc.) ainsi
que la reconnaissance des liens dans les pages web. Notre impl´ementation utilise
la librairie tesseract [17] pour l’analyse des ´el´ements textuels de l’interface, et
reprend la mˆeme m´ethode que desker [2] pour la d´etection de liens.

3.3 Aide `a la cr´eation d’actions

La reconnaissance d’image pr´esent´ee dans la section 3.2 donne `a l’agent la ca-
pacit´e de reconnaˆıtre l’environnement dans lequel il ´evolue et s’y adapter. Par
exemple, l’interface de Firefox diﬀ`ere de celle de Chrome, bien que les fonction-
nalit´es de ces navigateurs soient ´equivalentes. Par cons´equent, l’agent cherchera
des rep`eres visuels diﬀ´erents pour les manipuler. Nous proposons un outil de
cr´eation d’actions qui exploite ces similarit´es pour faciliter la collecte de donn´ees
destin´ees aux techniques de reconnaissance d’images pr´esent´ees plus haut.

Cet outil enregistre les mouvements et clics de la souris, les frappes du clavier
ainsi que des captures d’´ecran. Ces donn´ees brutes sont ensuite agr´eg´ees pour
d´ecouper l’enregistrement en petites actions (e.g., mouvement de la souris de A
vers B, puis double clic gauche sur B). Les zones d’int´erˆets dans les captures

Simulation r´ealiste d’utilisateurs en Cyber Range

7

d’´ecran sont extraites selon deux m´ethodes diﬀ´erentes. La premi`ere consiste `a
comparer une image prise au moment d’un clic de souris avec l’images prise
au d´ebut du mouvement pr´ec´edent ce clic. La plupart des interfaces graphiques
actuelles mettent en surbrillance les ´el´ements survol´es par la souris ce qui permet
d’extraire simplement ces ´el´ements, qui serviront de cibles de pattern matching.
La seconde m´ethode consiste `a employer la technique d’identiﬁcation des zones
potentiellement int´eressantes d´ecrite dans la section 3.2 (Fig. 2) ce qui acc´el`ere
grandement l’annotation des jeux de donn´ees pour l’entraˆınement de mod`eles de
reconnaissance de zones d’int´erˆet.

4 Gestion de sc´enarios de vie `a l’´echelle du syst`eme

Les outils et m´ethodes pr´esent´ees permettent `a notre agent d’interagir et de
s’adapter `a son environnement. La pr´esente section aborde la r´ealisation et
l’ex´ecution de sc´enarios de complexit´es vari´ees `a l’´echelle d’un SI comportant
plusieurs machines et utilisateurs.

4.1 Orchestration des communications entre utilisateurs

Dans le contexte du cyber-entraˆınement, pour am´eliorer la coh´erence et simpli-
ﬁer la mise en place de l’exercice, il est int´eressant de cr´eer des avatars pour
chacun des utilisateurs simul´es et de leurs interactions. En fonction de leurs
rˆoles dans l’entreprise et des relations qu’ils entretiennent avec leurs coll`egues,
les employ´es vont interagir diﬀ´eremment avec le syst`eme d’information simul´e.
Par exemple, deux coll`egues amis en dehors de leur travail sont plus susceptibles
de discuter par mail de mani`ere informelle que deux coll`egues ne se connaissant
pas. Similairement, un d´eveloppeur utilisera plus souvent l’´editeur de code qu’un
manager.

Nous g´en´erons des canevas de sc´enarios de vie `a l’´echelle du syst`eme par le
biais d’un graphe relationnel des utilisateurs de ce syst`eme (Fig. 3). Ce graphe
est compos´e des diﬀ´erents avatars, des projets sur lesquels ils travaillent, de
leurs groupes de travail et de la nature des relations qu’ils entretiennent entre
eux (e.g., amicales, client-fournisseur, partenaires, lien hi´erarchique, etc.).

4.2 Mod`eles de g´en´eration de texte

L’ajout de contenu r´ealiste renforce notablement la cr´edibilit´e de la vie simul´ee.
Notamment, l’absence d’´echanges de mails ou de documents sur les postes util-
isateur est un indicateur fort pour un adversaire, y compris si le contenu des
mails et des documents est manifestement non cr´edible (e.g., succession de mots
vide de sens). Cependant, la g´en´eration manuelle de ce contenu est laborieuse.
En eﬀet, r´ediger du texte `a la mani`ere d’un avatar est en soi une tˆache fastidieuse
qu’il est pourtant n´ecessaire de reproduire pour plusieurs dizaines d’avatars dans
le cas de sc´enarios complexes.

8

Alexandre Dey

Fig. 3. Vue d’ensemble de l’orchestrateur

Le domaine du traitement du langage naturel (NLP, Natural Language Pro-
cessing) a r´ecemment connu une avanc´ee majeure avec la d´emocratisation des
r´eseaux de neurones type Transformer [26]. Le m´ecanisme d’attention, principale
particularit´e de ces mod`eles, leur permet de mod´eliser avec pr´ecision la syntaxe
et la s´emantique de plusieurs langages naturels. OpenAI a d´emontr´e l’eﬃcacit´e
de l’apprentissage par transfert avec des mod`eles comme GPT [18], ainsi que ses
capacit´es dans le domaine de la g´en´eration de texte. Le mod`ele employ´e g´en`ere
du texte dans la continuit´e d’un contexte fourni au pr´ealable (souvent des mots
commen¸cant une phrase). Dans notre cas, nous aﬃnons le mod`ele pr´e-entraˆın´e
GPT-2 [19] pour la g´en´eration conditionnelle de texte. Plus sp´eciﬁquement, le
contexte fourni en entr´ee du mod`ele contient des informations sur le ton `a em-
ployer dans le texte (e.g., professionnel, informel, `a un partenaire, `a un client)
ainsi que les th´ematiques `a aborder (e.g., le sujet du mail, des mots cl´es).

Pour v´eriﬁer l’eﬃcacit´e de notre m´ethode de g´en´eration de texte, nous avons
entraˆın´e un mod`ele sur un jeu de donn´ee de 35 000 mails r´ecup´er´es en source
ouverte. Ces mails sont associ´es `a un ensemble de mots-cl´es, une polarit´e (positif,
n´egatif ou neutre) et une tonalit´e (formel, informel).

5 Discussion

5.1 Actions ex´ecut´ees par l’agent

Aﬁn de ne pas laisser de traces d’instrumentation sur la machine cible, nous avons
d´evelopp´e un agent qui communique au travers d’interfaces externes (clavier,
souris, ´ecran), le rendant ainsi ind´etectable pour un attaquant ou un outil de
supervision (e.g., EDR). L’agent d´evelopp´e est apte `a eﬀectuer des activit´es de

Simulation r´ealiste d’utilisateurs en Cyber Range

9

Fig. 4. Exemple de mails g´en´er´es conditionnellement avec le mod`ele d´eriv´e de GPT-2

bureautique simples (lecture/´ecriture de mail, navigation web, traitement de
texte, etc.). L’automatisation est de plus masqu´ee par l’ajout d’un al´ea dans les
mouvements de souris et les frappes clavier qui compliquent la d´etection automa-
tique de cette instrumentation (ce que font certains logiciels malveillants pour
d´etecter des sandbox [25]), obligeant ainsi un attaquant `a ´evaluer la cr´edibilit´e
du sc´enario en lui mˆeme.

Le panel des actions que l’agent peut r´ealiser am´eliore signiﬁcativement la
robustesse des syst`emes actuels face `a des malware utilisant des tests de Turing
invers´es. En revanche, la biblioth`eque d’actions devra ˆetre compl´et´ee pour cr´eer
des jeux de donn´ees r´ealistes destin´es `a valider le fonctionnement d’algorithmes
de d´etection. En particulier, la r´ealisation de tˆaches d’administration et plus
largement des actions g´en´erant du bruit au niveau des outils de supervision (e.g.,
un administrateur ne respectant pas les proc´edures, un utilisateur utilisant des
outils de scan r´eseau, etc.) permettraient de diﬀ´erencier les niveaux techniques
des utilisateurs simul´es et, par la mˆeme occasion, d’enrichir les jeux de donn´ees
pour la d´etection.

L’enregistreur d’actions permet d’adapter en quelques minutes les actions
existantes `a des environnements nouveaux. Ceci permet d’une part d’int´egrer
rapidement, sans connaissances pr´ealables sur le fonctionnement de notre outil,
de nouvelles actions supportant des cas non g´er´es (e.g., une nouvelle pop-up pour
la gestion des cookies lors de la navigation web, une mise `a jour majeure d’un

10

Alexandre Dey

logiciel, etc.) et d’autre part, de r´ealiser des actions complexes qui n´ecessiteraient
un temps de d´eveloppement important. L’adaptation de sc´enarios complets, bien
que grandement facilit´ee, demeure toutefois une activit´e complexe.

5.2 G´en´eration de sc´enarios

Ce travail pr´esente la conception d’un agent seul et ne traite donc pas de
l’orchestration des agents au sein d’un environnement multi-machines. Cette
probl´ematique comprend la communication et l’organisation entre les agents
(e.g., r´epondre `a mail) mais ´egalement la gestion de proﬁls utilisateurs bri`evement
abord´ee dans la Section 4.1.

De plus, le mod`ele de g´en´eration de texte actuellement d´evelopp´e g´en`ere une
majorit´e de r´esultats non cr´edibles : environ 20% sont exploitables avec des mod-
iﬁcations mineures. Ceci nous empˆeche de g´en´erer la totalit´e des ´echanges sans
intervention humaine. Bien que la g´en´eration ne soit pas enti`erement automa-
tique, celle-ci est toutefois grandement facilit´ee. En eﬀet, il est possible, `a partir
du mˆeme contexte, de g´en´erer plusieurs candidats que l’op´erateur peut utiliser
pour gagner du temps dans la g´en´eration des mails et documents du sc´enario.
Nous envisageons deux axes majeurs pour am´eliorer ces capacit´es de g´en´eration :

1. Augmenter la quantit´e de donn´ees et la taille du mod`ele (e.g., utiliser une

autre variante de GPT-2);

2. Rajouter une ´etape d’entraˆınement type GAN (Generative Adversarial Net-
work) [5], pour inciter le mod`ele `a g´en´erer des candidats plus r´ealistes.

6 Conclusion

Nous avons pr´esent´e une m´ethode pour simuler des utilisateurs `a l’´echelle d’un
SI complet en favorisant l’adaptabilit´e et la simplicit´e de mise en œuvre. Notre
approche emploie un agent externe d´ecoup´e en plusieurs niveaux d’abstraction,
avec, au plus bas, une interaction avec les machines instrument´ees au travers
du clavier, de la souris et de l’´ecran. Pour faire face `a la diversit´e des interfaces
utilisateur des syst`emes modernes (e.g., OS diﬀ´erents, logiciels diﬀ´erents, etc.)
l’agent embarque des techniques de reconnaissance d’images reposant `a la fois
sur des m´ethodes d´eterministes (template matching) et d’apprentissage profond
(r´eseaux de neurones `a convolution). Ceci ´equilibre la quantit´e de ressources
calculatoires requises par l’agent avec la ﬂexibilit´e oﬀerte par les m´ethodes prob-
abilistes. Un enregistreur d’actions simpliﬁe la conﬁguration de l’agent pour tout
nouvel environnement en extrayant automatiquement les images cibles, et en fa-
cilitant la collecte et l’annotation de donn´ees d’entraˆınement pour les mod`eles
statistiques. La cr´eation de sc´enarios de vie se base sur les avatars des utilisateurs
virtuels et de leurs interactions dont se nourrissent nos mod`eles de g´en´eration
conditionnelle de texte qui produisent en masse des conversations e-mail r´ealistes
et des documents cr´edibles.

Notre proposition enrichit la m´ethode de g´en´eration de vie initialement pro-
pos´ee pour la plateforme BEEZH par l’am´elioration des performances et le

Simulation r´ealiste d’utilisateurs en Cyber Range

11

r´ealisme de l’activit´e g´en´er´ee. Nous compl´etons ´egalement la proposition ini-
tiale par une assistance pour la g´en´eration de sc´enarios `a grande ´echelle. En
cours d’impl´ementation, nos travaux b´en´eﬁcient de premiers r´esultats encour-
ageant qui restent toutefois `a consolider avant de valider exp´erimentalement
notre proposition.

Acknowledgments Les auteurs remercient chaleureusement Alexandre De Beau-
drap dont les travaux de stage ont permis de consolider l’approche.

References

1. Aﬁanian, A., Niksefat, S., Sadeghiyan, B., Baptiste, D.: Malware Dynamic Analysis
Evasion Techniques: A Survey. arXiv:1811.01190 [cs] (Nov 2018), http://arxiv.
org/abs/1811.01190, arXiv: 1811.01190

2. Amossys: desker. https://gitlab.com/d3sker/desker (2021)
3. Brown, T.B., Mann, B., Ryder, N., Subbiah, M., Kaplan, J., Dhariwal, P., Nee-
lakantan, A., Shyam, P., Sastry, G., Askell, A., et al.: Language models are few-shot
learners. arXiv preprint arXiv:2005.14165 (2020)

4. Bulazel, A., Yener, B.: A Survey On Automated Dynamic Malware Anal-
ysis Evasion and Counter-Evasion: PC, Mobile, and Web. In: Proceedings
of the 1st Reversing and Oﬀensive-oriented Trends Symposium. pp. 1–21.
ROOTS, Association for Computing Machinery, Vienna, Austria (nov 2017).
https://doi.org/10.1145/3150376.3150378, https://doi.org/10.1145/3150376.
3150378

5. Croce, D., Castellucci, G., Basili, R.: GAN-BERT: Generative adversarial learn-
ing for robust text classiﬁcation with a bunch of labeled examples. In: Pro-
ceedings of the 58th Annual Meeting of the Association for Computational Lin-
guistics. pp. 2114–2119. Association for Computational Linguistics, Online (Jul
2020). https://doi.org/10.18653/v1/2020.acl-main.191, https://aclanthology.
org/2020.acl-main.191

6. Feng, P., Sun, J., Liu, S., Sun, K.: UBER: Combating Sandbox Evasion via User
Behavior Emulators. In: Zhou, J., Luo, X., Shen, Q., Xu, Z. (eds.) Information and
Communications Security, vol. 11999, pp. 34–50. Springer International Publishing,
Cham (2020). https://doi.org/10.1007/978-3-030-41579-2 3

7. Guih´ery, F., Siﬀer, A., Paillard, J.: Beezh: une plateforme de d´etonation r´ealiste

pour l’analyse des modes op´eratoires d’attaquants (2020)

8. Jelinek, F.: Markov source modeling of text generation. In: The impact of process-

ing techniques on communications, pp. 569–591. Springer (1985)

9. Jiang, H., Choi, T., Ko, R.K.: Pandora: A cyber range environment for the
safe testing and deployment of autonomous cyber attack tools. arXiv preprint
arXiv:2009.11484 (2020)

10. Keskar, N.S., McCann, B., Varshney, L.R., Xiong, C., Socher, R.: CTRL: A con-

ditional transformer language model for controllable generation (2019)

11. Lie, W.N.: Automatic target segmentation by locally adaptive image thresholding.

IEEE Transactions on Image Processing 4(7), 1036–1041 (1995)

12. Lin, T.Y., Goyal, P., Girshick, R., He, K., Doll´ar, P.: Focal loss for dense object

detection (2018)

12

Alexandre Dey

13. Liu, W., Anguelov, D., Erhan, D., Szegedy, C., Reed, S., Fu, C.Y., Berg, A.C.:
Ssd: Single shot multibox detector. Lecture Notes in Computer Science pp. 21–37
(2016)

14. Mills, A., Legg, P.: Investigating Anti-Evasion Malware Triggers Using Automated
Sandbox Reconﬁguration Techniques. Journal of Cybersecurity and Privacy 1(1),
19–39 (Mar 2021). https://doi.org/10.3390/jcp1010003, https://www.mdpi.com/
2624-800X/1/1/3

15. Miramirkhani, N., Appini, M.P., Nikiforakis, N., Polychronakis, M.: Spotless Sand-
boxes: Evading Malware Analysis Systems Using Wear-and-Tear Artifacts. In: 2017
IEEE Symposium on Security and Privacy (SP). pp. 1009–1024. IEEE, San Jose,
CA, USA (May 2017). https://doi.org/10.1109/SP.2017.42, http://ieeexplore.
ieee.org/document/7958622/

16. Nguyen, B.N., Robbins, B., Banerjee, I., Memon, A.: Guitar: an innovative tool for
automated testing of gui-driven software. Automated software engineering 21(1),
65–105 (2014)

17. tesseract ocr: tesseract. https://github.com/tesseract-ocr/tesseract (2019)
18. Radford, A., Narasimhan, K., Salimans, T., Sutskever, I.: Improving language un-

derstanding by generative pre-training (2018)

19. Radford, A., Wu, J., Child, R., Luan, D., Amodei, D., Sutskever, I., et al.: Language

models are unsupervised multitask learners. OpenAI blog 1(8), 9 (2019)

20. Raﬀel, C., Shazeer, N., Roberts, A., Lee, K., Narang, S., Matena, M., Zhou, Y., Li,
W., Liu, P.J.: Exploring the limits of transfer learning with a uniﬁed text-to-text
transformer. arXiv preprint arXiv:1910.10683 (2019)

21. Redmon, J., Divvala, S., Girshick, R., Farhadi, A.: You only look once: Uniﬁed,

real-time object detection (2016)

22. Ren, S., He, K., Girshick, R., Sun, J.: Faster r-cnn: Towards real-time object de-

tection with region proposal networks (2016)

23. Rueda, U., Vos, T.E., Almenar, F., Mart´ınez, M., Esparcia-Alc´azar, A.I.: Testar:
from academic prototype towards an industry-ready tool for automated testing at
the user interface level. Actas de las XX Jornadas de Ingenierıa del Software y
Bases de Datos (JISBD 2015) pp. 236–245 (2015)

25. Vashisht,

24. Singhera, Z., Horowitz, E., Shah, A.: A graphical user interface (gui) testing
methodology. International Journal of Information Technology and Web Engineer-
ing (IJITWE) 3(2), 1–18 (2008)
S.O.,
Sandbox-Evasion
https://www.fireeye.com/blog/threat-research/2014/06/
turing-test-in-reverse-new-sandbox-evasion-techniques-seek-human-interaction.
html

in
Interaction

Singh,
Techniques

Test
Human

New
(2014),

Reverse:

Turing

Seek

A.:

26. Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A.N., Kaiser,
(cid:32)L., Polosukhin, I.: Attention is all you need. In: Advances in neural information
processing systems. pp. 5998–6008 (2017)

27. Yeh, T., Chang, T.H., Miller, R.C.: Sikuli: using gui screenshots for search and
automation. In: Proceedings of the 22nd annual ACM symposium on User interface
software and technology. pp. 183–192 (2009)

