A Transfer Learning and Optimized CNN Based
Intrusion Detection System for Internet of Vehicles

Li Yang and Abdallah Shami
Western University, London, Ontario, Canada
e-mails: {lyang339, abdallah.shami}@uwo.ca

2
2
0
2

n
a
J

7
2

]

R
C
.
s
c
[

1
v
2
1
8
1
1
.
1
0
2
2
:
v
i
X
r
a

Abstract—Modern vehicles,

including autonomous vehicles
and connected vehicles, are increasingly connected to the external
world, which enables various functionalities and services. How-
ever, the improving connectivity also increases the attack surfaces
of the Internet of Vehicles (IoV), causing its vulnerabilities to
cyber-threats. Due to the lack of authentication and encryption
procedures in vehicular networks, Intrusion Detection Systems
(IDSs) are essential approaches to protect modern vehicle systems
from network attacks. In this paper, a transfer learning and
ensemble learning-based IDS is proposed for IoV systems using
convolutional neural networks (CNNs) and hyper-parameter
optimization techniques. In the experiments, the proposed IDS
has demonstrated over 99.25% detection rates and F1-scores on
two well-known public benchmark IoV security datasets: the
Car-Hacking dataset and the CICIDS2017 dataset. This shows
the effectiveness of the proposed IDS for cyber-attack detection
in both intra-vehicle and external vehicular networks.

Index Terms—Intrusion Detection System, Internet of Vehicles,
CNN, Transfer Learning, Ensemble learning, Particle Swarm
Optimization

I. INTRODUCTION

With the rapid development of the Internet of Things
(IoT) and the Internet of Vehicles (IoV) technologies, modern
vehicles have been evolving to network-controlled vehicles,
including Autonomous Vehicles (AVs) and Connected Ve-
hicles (CVs) [1]. Typical IoV systems involve intra-vehicle
networks (IVNs) and external networks. In IVNs, Controller
Area Network (CAN) bus is the central system that enables
communications between Electronic Control Units (ECUs) to
perform actions and adopt functionalities. On the other hand,
external vehicular networks allow the connection between
smart vehicles and other entities in IoV, including road-side
units, infrastructures, and road users [2].

However, the improving connectivity and accessibility of
vehicular networks has increased the cyber-attack surfaces of
modern vehicles [3]. Additionally, due to the limited length of
CAN packets, there is no authentication or encryption strate-
gies involved in the processing of these packets [1]. The lack
of fundamental security measures enables cyber-attackers to
inject malicious messages to IVNs and launch different types
of attacks, like Denial of Service (DoS), fuzzy, and spooﬁng
attacks. On the other hand, the emerging cellular connections
between connected vehicles and external networks have made
these vehicles vulnerable to various conventional cyber-attacks
[4]. Therefore, it is crucial to develop Intrusion Detection
Systems (IDSs) to protect IoV systems and smart vehicles
by identifying cyber-attacks [5].

Recently, due to the progression of Machine Learning (ML)
and Deep Learning (DL) techniques,
their applications in
cyber-security and vehicle systems have attracted the attention
of researchers and automotive manufacturers [6] [7]. ML and
DL techniques are widely used to develop classiﬁer-based
IDSs that can distinguish between normal network trafﬁc
and different cyber-attacks through trafﬁc data analytics [8].
In this paper, an intelligent IDS model based on optimized
transfer learning,
Convolutional Neural Networks (CNNs),
and ensemble learning techniques is proposed to protect IoV
systems. Five advanced CNN models,
including VGG16,
VGG19, Xception, Inception, and InceptionResnet [9], are
used to train base learners on vehicle network trafﬁc data.
The hyper-parameters of the CNN models are tuned using
Particle Swarm Optimization (PSO), a hyper-parameter opti-
mization (HPO) method, to obtain optimized learning models
[10]. The base CNN models are then integrated using two
ensemble strategies, conﬁdence averaging and concatenation,
to further improve the intrusion detection performance. The
effectiveness and efﬁciency of the proposed IDS framework
are evaluated using two public vehicle network datasets: the
Car-Hacking dataset [11] and the CICIDS2017 dataset [12].
This paper mainly makes the following contributions:
1) It proposes a novel framework for effective cyber-attack
detection in both intra-vehicle and external networks
through CNN, transfer learning, ensemble learning, and
HPO techniques1.

2) It proposes a data transformation method that can effec-
tively transform vehicle network trafﬁc data into images
to more easily distinguish various cyber-attack patterns.
3) It evaluates the proposed method on two benchmark
cyber-security datasets that represent intra-vehicle and
external network data, and compares the model’s per-
formance with other state-of-the-art methods.

To the best of our knowledge, no previous work proposed
such an optimized IDS model that integrates CNN, transfer
learning, ensemble learning, and HPO techniques to effec-
tively detect various types of attacks on both intra-vehicle and
external networks.

The rest of the paper is organized as follows. Section II
introduces the related work that uses ML and DL algorithms
for vehicle network intrusion detection. Section III presents

1code

is

available

at: https://github.com/Western-OC2-Lab/Intrusion-

Detection-System-Using-CNN-and-Transfer-Learning

 
 
 
 
 
 
shown in Fig. 1. Cyber-attackers can launch internal attacks
on IVNs through the On-Board Diagnostics II (OBD II)
interface and launch external attacks to external vehicular
networks through wireless interfaces by sending malicious
trafﬁc packets. Thus, the proposed IDS should be deployed in
both IVNs and external networks. In IVNs, the proposed IDS
can be deployed on top of the CAN-bus to detect abnormal
CAN messages and generate alarms [3]. In external networks,
the proposed IDS can be incorporated into the gateways to
identify and block all malicious packets that aim to breach
the vehicles [2].

In this paper, a novel optimized CNN and transfer learning-
based IDS is proposed to detect various types of attacks in IoV
systems. Figure 2 demonstrates the overview of the proposed
IDS framework. Firstly, the intra-vehicle and external network
data are collected in time-based chunks and then transformed
into images using the quantile transform method. At the next
stage, the generated image set is trained by ﬁve state-of-the-
art CNN models (VGG16, VGG19, Xception, Inception, and
InceptionResnet) to construct base learners. The CNN models
are optimized by PSO, a HPO method that can automatically
tune the hyper-parameters. After that, the top-3 best perform-
ing CNN models are selected as the three base CNN models to
construct the ensemble learning models. Lastly, two ensemble
strategies, conﬁdence averaging and concatenation, are used
to construct ensemble models for ﬁnal detection.

B. Data Description and Transformation

To develop the proposed IDS for both IVNs and external
vehicular networks, two datasets are used in this work. The
ﬁrst dataset is the Car-Hacking dataset [11] that represents
intra-vehicle data, as it is generated by transmitting CAN
packets into the CAN-bus of a real vehicle. The CAN identiﬁer
(ID) and 8-bit data ﬁeld of CAN packets (DATA[0]-DATA[7])
are the main features of the dataset. The Car-Hacking dataset
involves four main types of attacks: DoS, fuzzy, gear spooﬁng,
and Revolutions Per Minute (RPM) spooﬁng attacks. The
second dataset used is the CICIDS2017 dataset [12] that
represents external network data, as it is a state-of-the-art
network security dataset that includes the most updated attack
patterns. According to the dataset analysis in [3] [13], the
attack patterns in the CICIDS2017 dataset can be summarized
into ﬁve main types of attacks: DoS attacks, port-scan attacks,
brute-force attacks, web-attacks, and botnets.

After acquiring the data,

it should be pre-processed to
generate a proper input for the proposed IDS. As CNN
models work better on image sets and vehicular network trafﬁc
datasets are usually tabular data, the original network data
should be transformed into image forms [14].

The data transformation process starts with data normal-
ization. Since the pixel values of images range from 0 to
255, the network data should also be normalized into the
scale of 0-255. Among the normalization techniques, min-
max and quantile normalization are the two commonly used
methods that can convert data values to the same range. As
min-max normalization does not handle outliers well and may

Fig. 1. The IDS-protected vehicle architecture.

the proposed framework, including data transformation, CNN,
transfer learning, ensemble learning, and HPO techniques.
Section IV presents and discusses the experimental results.
Finally, Section V summarizes the paper.

II. RELATED WORK

ML and DL models have been widely used in IoV intrusion
detection tasks. Rosay et al. [4] proposed a DL-based IDS for
connected vehicles using Multi-Layer Perceptron (MLP). The
MLP model was evaluated on an automotive microprocessor
using the CICIDS2017 dataset. Yang et al. [2] [3] proposed
a tree-based stacking algorithm for network trafﬁc analysis in
IoV environments. The proposed stacking method shows high
performance on the IoV and CICIDS2017 datasets.

Several existing works focused on CNN-based IDS develop-
ment for vehicular networks. Mehedi et al. [1] proposed the P-
LeNet method for in-vehicle network intrusion detection based
on deep transfer learning. The P-LeNet model achieved a high
F1-score of 97.83% on the Car-Hacking dataset. Hossain et al.
[5] proposed a one-dimensional CNN (1D-CNN) based IDS
for intra-vehicle intrusion detection, as 1D-CNN models work
well in many time-series data analytics problems. Song et al.
[7] proposed a deep CNN (DCNN) based IDS model using
reduced InceptionResnet to detect attacks in IVNs. The DCNN
model shows high accuracy on the Car-Hacking dataset.

Although the above methods achieve high accuracy in IoV
cyber-attack detection tasks,
there is still much room for
performance improvement. The proposed solution aims to
construct an optimal IDS framework using state-of-the-art
CNN models optimized using HPO and ensemble learning
strategies. Additionally, transfer learning techniques are used
to improve the model training efﬁciency.

III. PROPOSED FRAMEWORK

A. System Overview

The purpose of this work is to develop an IDS that can
detect various types of attacks in intra-vehicle and external
vehicular networks to protect them both. The typical attack
scenario and the architecture of an IDS-protected vehicle are

(a) Car-Hacking dataset.

(b) CICIDS2017.

Fig. 3. The representative sample images of each class in two datasets: a)
Car-Hacking dataset; b) CICIDS2017.

on the attack patterns in the data chunks. If all the samples
in a chunk/image are normal samples, this image is labeled
“Normal”. On the other hand, if a chunk/image contains attack
samples, this image is labeled as the most frequent attack type
in this chunk. For example, if a DoS attack occurs in a chunk
with the highest proportion, the corresponding image will be
labeled “DoS attack”.

After the above data pre-processing procedures, the ﬁnal
transformed image set
is generated as the input of CNN
models. The representative samples for each type of attack
in the Car-Hacking dataset and the CICIDS2017 dataset are
it can be
shown in Fig. 3. For the Car-Hacking dataset,
seen from Fig. 3(a) that there are large differences in the
feature patterns between the normal samples and different
types of attacks. The feature patterns of fuzzy attack images
images, while DoS attack
are more random than normal
samples are high-frequency empty messages, causing pure
black patterns. Gear and RPM spooﬁng attacks are launched
by injecting messages with certain CAN IDs and packets to
masquerade as legitimate users, so their images also have
certain feature patterns [11]. Similarly, the attack patterns of
CICIDS2017 can be obviously distinguished according to the
feature patterns shown in Fig. 3(b).

C. CNN and Transfer Learning

CNN is a common DL model that is widely used in image
classiﬁcation and recognition problems [7]. The images can be
directly inputted into CNN models without additional feature
extraction and data reconstruction processes. A typical CNN
comprises three types of layers: convolutional layers, pool-
ing layers, and fully-connected layers [7]. In convolutional
layers, the feature patterns of images can be automatically
extracted by convolution operations. In pooling layers, the
data complexity can be reduced without
losing important
information through local correlations to avoid over-ﬁtting.
Fully-connected layers serve as a conduit
to connect all
features and generate the output.

For DL models, Transfer Learning (TL) is the process of
transferring the weights of a Deep Neural Network (DNN)
model trained on one dataset to another dataset [16]. The
TL technique has been successfully applied to many image
processing tasks. This is because the feature patterns learned
by the bottom layers of CNN models are usually general
patterns that are applicable to many different tasks, and only

Fig. 2. The proposed optimized CNN-based IDS framework.

cause most data samples to have extremely small values,
quantile normalization is used in the proposed framework [15].
The quantile normalization method transforms the feature
distribution to a normal distribution and re-calculates all the
features values based on the normal distribution. Therefore,
the majority of variable values are close to the median values,
which is effective in handling outliers [15].

After data normalization, the data samples are converted
into chunks based on the timestamps and feature sizes of
network trafﬁc datasets. For the Car-Hacking dataset, as it has
9 important features (CAN ID and DATA[0]-DATA[7]), each
chunk of 27 consecutive samples with 9 features (27×9 = 243
feature values in total) are transformed into an image of shape
9 × 9 × 3 [14]. Thus, each transformed image is a square color
image with three channels (red, green, and blue). Similarly,
the CICIDS2017 dataset with 20 important features generated
from [2] is transformed to 20 × 20 × 3 color images, so each
chunk of this dataset consists of 20 × 3 = 60 consecutive data
samples. As the images are generated based on the timestamps
of the data samples, the time-series correlations of the original
network data can be retained.

In the next step, the transformed images are labeled based

the features learned by the top layers are speciﬁc features
for a particular dataset [16]. Therefore, the bottom layers of
CNN models can be directly transferred to different tasks. To
improve the effectiveness of TL, ﬁne-tuning can be used in
the TL process of DL models. In ﬁne-tuning, most of the
layers of the pre-trained model are frozen (i.e., their weights
are retained), while a few of the top layers are unfrozen to
re-train the model on a new dataset. Fine-tuning enables the
learning model to update the higher-order features in the pre-
trained model to better ﬁt the target task or dataset [16].

In the proposed framework, we have selected VGG16,
VGG19, Xception, Inception, and InceptionResnet as the base
CNN models due to their success in most image classiﬁcation
problems [9]. These CNN models are pre-trained on the
ImageNet dataset and have demonstrated great performance
on general image classiﬁcation tasks. The ImageNet dataset
is a benchmark image processing dataset that has more than
one million images of 1,000 classes [9].

The VGG16 models with 16 layers (VGG16) and with 19
layers (VGG19) proposed in [17] have achieved a reduced
error rate of 7.3% on the ImageNet Challenge. The VGG16
architecture comprises ﬁve blocks of convolutional layers and
three fully connected layers, while the VGG19 architecture
has three more convolutional layers. The Inception network
introduced in [18] uses convolutional feature extractors that
combine different contexts to obtain different types of fea-
ture patterns, which reduces the computational cost through
dimensionality reduction. Xception [19] is an extension of
the Inception network that uses depthwise separable convo-
lutions to replace the standard network convolutions. The
memory requirement of Xception is slightly smaller than
Inception. InceptionResnet is another extension of Inception
that incorporates the residual connections from Resnet into the
Inception network [9]. InceptionResnet outperforms Inception
models on image classiﬁcation challenges, but it requires twice
the computational operations and memory than Inception.

After using transfer learning and ﬁne-tuning to train ﬁve
state-of-the-art CNN models on the vehicle network datasets,
the top-3 best performing CNN models are selected as the base
learners to construct the ensemble models that are introduced
in the next subsection.

D. Proposed Ensemble Learning Models

Ensemble learning is a technique that integrates multiple
base learning models to construct an ensemble model with
improved performance. Ensemble learning is widely used in
data analytics problems because an ensemble of multiple
learners usually performs better than single learners [2].

Conﬁdence averaging is an ensemble learning approach that
combines the classiﬁcation probability values of base learners
to ﬁnd the class with the highest conﬁdence value [20]. In
DL models, softmax layers can output a posterior probability
list that contains the classiﬁcation conﬁdence of each class.
The conﬁdence averaging method calculates the average clas-
siﬁcation probability of base learners for each class, and then
returns the class label with the highest average conﬁdence

value as the ﬁnal classiﬁcation result. The conﬁdence value
of each class is calculated using the softmax function [20]:

Softmax(z)i =

ezi
j=1 ezj

(cid:80)C

(1)

Where z is the input vector, C is the number of classes in the
dataset, ezi and ezj are the standard exponential functions for
the input and output vectors, respectively.

The predicted class label obtained by the conﬁdence aver-

aging method can be denoted by:

ˆy = argmax
i∈{1,··· ,c}

(cid:80)k

j=1 pj (y = i | Bj, x)
k

(2)

Where Bj is the jth base learner, k is the number of selected
base CNN learners, and k = 3 in the proposed IDS; pj(y =
i | Bj, x) indicates the prediction conﬁdence of a class value
i in a data sample x using Bj.

Unlike the conventional voting method that only considers
the class labels, conﬁdence averaging enables the ensemble
model to detect uncertain classiﬁcation results and correct the
misclassiﬁed samples through the use of classiﬁcation conﬁ-
dence. The computational complexity of an entire ensemble
model depends on the complexity of base learners, while the
time complexity for the conﬁdence averaging method itself is
only O(N KC), where N is the number of instances, K is the
number of base CNN models, and C is the number of classes
[21]. As K and C are usually small, the execution speed of
the conﬁdence averaging method is usually high.

Concatenation [22] is another ensemble strategy for DL
models. A concatenated CNN aims to extract the highest order
features generated from the top dense layer of base CNN
models and use concatenate operations to integrate all the
features into a new concatenated layer that contains all the
features. The concatenated layer is followed by a drop-out
layer to reduce redundant features and a softmax layer to
construct a new CNN model. The advantage of concatenation
is that it can combine the highest order features to construct a
comprehensive new model. However, as the new model needs
to be re-trained on the entire dataset, it introduces additional
model training time. The computational complexity of the
concatenation method is O(N F ), where N is the number of
data samples, and F is the total number of features extracted
from the dense layers of the base CNN models.

E. Hyper-Parameter Optimization (HPO)

To better ﬁt the base models to the selected datasets and fur-
ther improve the models’ performance, the hyper-parameters
of CNN models need to be tuned and optimized

Similar to other DL models, CNN models have a large
number of hyper-parameters that need tuning. These hyper-
parameters can be classiﬁed as model-design hyper-parameters
[10]. Model-design
and model-training hyper-parameters
hyper-parameters are the hyper-parameters that should be set
in the model design process. In the proposed TL framework,
the model-design hyper-parameters include the number or

percentage of frozen layers, the learning rate, and the drop-
out rate. On the other hand, model-training hyper-parameters
are used to balance the training speed and model performance,
involving the batch size, the number of epochs, and early stop
patience. The above hyper-parameters have a direct impact on
the structure, effectiveness, and efﬁciency of CNN models.

HPO is an automated process of tuning hyper-parameters of
ML or DL models using optimization techniques [10]. Among
the optimization techniques used for HPO problems, PSO is a
widely-used metaheuristic optimization method that identiﬁes
optimal hyper-parameter values via the information sharing
and cooperation among the particles in a swarm [10]. At the
initial stage of PSO, each individual in the group is initialized
with a position −→xi and velocity −→vi . After each iteration, the
velocity of each particle are updated based on its own current
best position −→pi and the current global optimal position −→p
shared by other individuals:

−→vi := −→vi + U (0, ϕ1) (−→pi − −→xi) + U (0, ϕ2) (−→p − −→xi),

(3)

where U (0, ϕ) is the continuous uniform distribution calcu-
lated by the acceleration constants ϕ1 and ϕ2.

Finally,

the particles can gradually move towards the
promising regions to identify the global optimum. PSO is
chosen in the proposed framework due to its support to dif-
ferent types of hyper-parameters and its low time complexity
of O(N logN ) [10].

IV. PERFORMANCE EVALUATION

A. Experimental Setup

The experiments were conducted using Scikit-learn and
Keras libraries in Python. In the experiments, the proposed DL
models were trained on a Dell Precision 3630 machine with
an i7-8700 processor and 16 GB of memory and tested on a
Raspberry Pi 3 machine with a BCM2837B0 64-bit CPU and
1 GB of memory, representing an IoV central server machine
and a vehicle-level local machine, respectively.

The proposed framework is evaluated on two benchmark
vehicle network security datasets, Car-Hacking [11] and CI-
CIDS2017 [12] datasets, as described in Section III-B. Five-
fold cross-validation is used to evaluate the proposed model,
which can avoid over-ﬁtting and biased results. On the other
hand, as network trafﬁc data is usually highly imbalanced
data that only has a small percentage of attack samples, four
different metrics, including accuracy, precision, recall, and F1-
scores, are used for performance evaluation. Furthermore, to
evaluate the efﬁciency of the proposed method, model training
time on the server-level machine and model testing time on
the vehicle-level machine are also monitored and compared.

B. Experimental Results and Discussion

To construct optimal models, the major hyper-parameters
of all the base CNN models in the proposed framework were
optimized using PSO. As CNN models with default hyper-
parameter values can already achieve near 100% accuracy
on the Car-Hacking dataset,
the HPO process was only
implemented for the CICIDS2017 dataset. Table I illustrates

TABLE I
HYPER-PARAMETER CONFIGURATION OF CNN MODELS

Hyper-Parameter
Number of epochs
Batch size
Early stop patience
Learning rate
Drop-out rate

Number of frozen
layers

Model

General (All
CNN models)

Xception
Vgg16
Vgg19
Inception
InceptionResnet

Search Range
[5, 50]
[32, 128]
[2, 5]
(0.001, 0.1)
(0.2, 0.8)
[60,125]
[8, 16]
[10, 19]
[80, 159]
[300, 572]

Optimal Value
20
128
3
0.003
0.5
121
15
19
148
522

TABLE II
PERFORMANCE EVALUATION OF MODELS ON CAR-HACKING DATASET

Method

Accuracy
(%)

Precision
(%)

Recall
(%)

F1
(%)

Training
Time (s)

P-LeNet [1]
1D-CNN [5]
DCNN [7]
VGG16-PSO
VGG19-PSO
Xception-PSO
Inception-PSO
InceptionResnet
-PSO
Concatenation
(Proposed)
Conﬁdence
Averaging
(Proposed)

98.10
99.96
99.93
99.97
100.0
100.0
100.0
100.0

98.14
99.94
99.84
99.97
100.0
100.0
100.0
100.0

98.04
99.63
99.84
99.97
100.0
100.0
100.0
100.0

97.83
99.80
99.91
99.97
100.0
100.0
100.0
100.0

-
-
-
384.9
417.9
529.2
733.6
970.4

100.0

100.0

100.0

100.0

2490.5

100.0

100.0

100.0

100.0

1680.7

Test
Time Per
Packet
(ms)
-
-
-
0.2
0.2
0.3
0.6
1.3

3.2

2.7

the initial search range and the optimal values of the hyper-
parameters. After HPO, the optimized CNN models were used
as base learners to construct the proposed ensemble models.
The results of evaluating the optimized CNN models and
the proposed ensemble models on the Car-Hacking and CI-
CIDS2017 datasets are shown in Tables II & III, respectively.
As shown in Table II, all optimized base CNN models except
VGG16 achieve 100% accuracy and F1-scores. This is mainly
because the normal and attack patterns in the Car-Hacking
dataset can be obviously distinguished through the trans-
formed images shown in Fig. 3. The two ensemble techniques,
concatenation and conﬁdence averaging methods, can also

TABLE III
PERFORMANCE EVALUATION OF MODELS ON CICIDS2017 DATASET

Method

Accuracy
(%)

Precision
(%)

Recall
(%)

F1
(%)

Training
Time (s)

KNN [12]
RF [12]
MLP [4]
VGG16-PSO
VGG19-PSO
Xception-PSO
Inception-PSO
InceptionResnet
-PSO
Concatenation
(Proposed)
Conﬁdence
Averaging
(Proposed)

96.3
98.82
99.46
99.724
99.849
99.699
99.750
99.849

96.2
98.8
99.52
99.625
99.850
99.700
99.725
99.850

93.7
99.955
99.40
99.724
99.849
99.699
99.750
99.849

96.3
98.8
99.46
99.674
99.850
99.697
99.729
99.850

15243.6
1848.3
-
436.5
688.1
655.5
782.8
1187.2

99.899

99.900

99.899

99.898

3598.7

99.925

99.925

99.924

99.925

2658.1

Test
Time Per
Packet
(ms)
0.2
0.3
1.1
0.1
0.1
0.2
0.3
0.7

1.8

1.5

achieve 100% F1-scores, while the total training time of con-
ﬁdence averaging is much lower than concatenation (1680.7 s
versus 2490.5 s). Therefore, the conﬁdence averaging method
is more efﬁcient. Moreover, the performance of the proposed
models is compared with other state-of-the-art methods [1] [5]
[7]. As shown in Table II, most of the compared approaches
achieve high accuracy due to the simplicity of the Car-Hacking
dataset. Among the models shown in Table II, the proposed
ensemble methods show the best performance by achieving at
least 0.09% F1-score improvements.
For the CICIDS2017 dataset,

the optimized base CNN
models achieve high F1-scores of 99.674% to 99.850% after
implementing data transformation and PSO, as shown in
Table III. The proposed conﬁdence averaging ensemble model
also achieves the highest F1-score of 99.925%, which is
slightly higher than the F1-score of the concatenation model
(99.899%). The two ensemble models also outperform other
recent methods in the literature [4] [12]. Additionally, the total
training time of the conﬁdence averaging is also much lower
than the concatenation approach.

The higher performance of the proposed models when
compared with other state-of-the-art IDSs supports the reasons
for using CNN, TL, and HPO techniques. Furthermore, the
average test/prediction time of the proposed ensemble models
for each packet on the Raspberry Pi machine is at a low level,
from 1.5 ms to 3.2 ms, as shown in Tables II & III. As the
real-time requirement of vehicle anomaly detection systems is
usually 10 ms for the analysis of each packet [23], the low
prediction time of the proposed models indicates the feasibility
of applying the proposed IDS to real-time IoV systems.

V. CONCLUSION

As modern vehicles are increasingly connected, the cyber-
threats to IoV systems are also increasing signiﬁcantly. To pro-
tect connected vehicles from being breached by cyber-attacks,
this work proposed a transfer learning and ensemble learning-
based IDS framework that uses optimized CNN models to
identify various types of attacks in IoV systems. Additionally,
a chunk-based data transformation method is proposed to
transform vehicle network trafﬁc data to image data used as
the input of CNN models. The proposed IDS is evaluated
on the Car-Hacking and CICIDS2017 dataset, representing
intra-vehicle and external network data, respectively. The
experimental results show that the proposed IDS framework
can effectively identify various types of attacks with higher
F1-scores of 100% and 99.925% than other compared state-
of-the-art methods on the two benchmark datasets. Moreover,
the model testing results on a vehicle-level machine show the
feasibility of the proposed IDS in real-time vehicle networks.
In future work, this framework will be extended to develop
an online adaptive model that can achieve online learning and
address concept drift in time-series vehicle network data.

REFERENCES

[1] S. T. Mehedi, A. Anwar, Z. Rahman, and K. Ahmed, “Deep Transfer
Learning Based Intrusion Detection System for Electric Vehicular
Networks,” Sensors, vol. 21, no. 14, 2021.

[2] L. Yang, A. Moubayed, and A. Shami, “MTH-IDS: A Multi-Tiered
Hybrid Intrusion Detection System for Internet of Vehicles,” IEEE
Internet Things J., 2021.

[3] L. Yang, A. Moubayed, I. Hamieh, and A. Shami, “Tree-based Intel-
ligent Intrusion Detection System in Internet of Vehicles,” proc. 2019
IEEE Glob. Commun. Conf., pp. 1–6, Hawaii, USA, 2019.

[4] A. Rosay, F. Carlier, and P. Leroux, “Feed-forward neural network for
Network Intrusion Detection,” in 2020 IEEE 91st Vehicular Technology
Conference (VTC2020-Spring), May 2020, pp. 1–6.

[5] M. Delwar Hossain, H. Inoue, H. Ochiai, D. Fall, and Y. Kadobayashi,
“An Effective In-Vehicle CAN Bus Intrusion Detection System Using
CNN Deep Learning Approach,” in 2020 IEEE Glob. Commun. Conf.
(GLOBECOM), Taipei, Taiwan, 2020.

[6] L. Yang et al., ”Multi-Perspective Content Delivery Networks Security
Framework Using Optimized Unsupervised Anomaly Detection,” IEEE
Trans. Netw. Serv. Manag., 2021.

[7] H. M. Song, J. Woo, and H. K. Kim, “In-vehicle network intrusion
detection using deep convolutional neural network,” Veh. Commun., vol.
21, p. 100198, 2020.

[8] L. Yang, D. M. Manias, and A. Shami, “PWPAE: An Ensemble
Framework for Concept Drift Adaptation in IoT Data Streams,” in 2021
IEEE Glob. Commun. Conf. (GLOBECOM), Madrid, Spain, Dec. 2021.
[9] D. Petrov and T. M. Hospedales, “Measuring the Transferability of

Adversarial Examples,”, arXiv, pp. 1–13, 2019.

[10] L. Yang and A. Shami, “On Hyperparameter Optimization of Machine
Learning Algorithms: Theory and Practice,” Neurocomputing, vol. 415,
pp. 295–316, 2020.

[11] E. Seo, H. M. Song, and H. K. Kim, “GIDS: GAN based Intrusion
Detection System for In-Vehicle Network,” 2018 16th Annu. Conf.
Privacy, Secur. Trust. PST 2018, pp. 1–6, 2018.

[12] I. Sharafaldin, A. H. Lashkari, and A. A. Ghorbani, “Toward generating
a new intrusion detection dataset and intrusion trafﬁc characterization,”
in Proc. Int. Conf. Inf. Syst. Secur. Privacy, 2018, pp. 108–116.
[13] R. Panigrahi and S. Borah, “A detailed analysis of CICIDS2017 dataset
for designing Intrusion Detection Systems,” Int. J. Eng. Technol., vol.
7, no. 3.24, pp. 479-482, 2018.

[14] F. Hussain, S. G. Abbas, M. Husnain, U. U. Fayyaz, F. Shahzad, and
G. A. Shah, “IoT DoS and DDoS Attack Detection using ResNet,” in
2020 IEEE 23rd International Multitopic Conference (INMIC), 2020,
pp. 1–6.

[15] S.-F. Lokman, A. T. Othman, M. H. A. Bakar, and S. Musa, “The
Impact of Different Feature Scaling Methods on Intrusion Detection
for in-Vehicle Controller Area Network (CAN),” in Advances in Cyber
Security, 2020, pp. 195–205.

[16] M. M. Leonardo, T. J. Carvalho, E. Rezende, R. Zucchi, and F. A. Faria,
“Deep Feature-Based Classiﬁers for Fruit Fly Identiﬁcation (Diptera:
Tephritidae),” in 2018 31st SIBGRAPI Conference on Graphics, Patterns
and Images (SIBGRAPI), 2018, pp. 41–47.

[17] K. Simonyan and A. Zisserman, “Very Deep Convolutional Networks

for Large-Scale Image Recognition,” arXiv, pp. 1–14, 2014.

[18] C. Szegedy, V. Vanhoucke, S. Ioffe, J. Shlens, and Z. Wojna, “Re-
thinking the Inception Architecture for Computer Vision,” in Proc.
IEEE Comput. Soc. Conf. Comput. Vis. Pattern Recognit., vol. 2016-
December, pp. 2818–2826, 2016.

[19] F. Chollet, “Xception: Deep learning with depthwise separable convo-
lutions,” in Proc. - 30th IEEE Conf. Comput. Vis. Pattern Recognition,
CVPR 2017, vol. 2017-January, pp. 1800–1807, 2017.

[20] J. Large, J. Lines, and A. Bagnall, “A probabilistic classiﬁer ensemble
weighting scheme based on cross-validated accuracy estimates,” Data
Min. Knowl. Discov., vol. 33, no. 6, pp. 1674–1709, 2019.

[21] L. Yang and A. Shami, “A Lightweight Concept Drift Detection and
Adaptation Framework for IoT Data Streams,” IEEE Internet Things
Mag., vol. 4, no. 2, pp. 96–101, 2021.

[22] M. Rahimzadeh and A. Attar, “A modiﬁed deep convolutional neural
network for detecting COVID-19 and pneumonia from chest X-ray
images based on the concatenation of Xception and ResNet50V2,”
Informatics Med. Unlocked, vol. 19, p. 100360, 2020.

[23] A. Moubayed, A. Shami, P. Heidari, A. Larabi, and R. Brunner, “Edge-
enabled V2X Service Placement for Intelligent Transportation Systems,”
IEEE Trans. Mob. Comput., vol. 1233, pp. 1–13, 2020.

