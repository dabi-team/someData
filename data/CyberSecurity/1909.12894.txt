Modeling and Detection of Future Cyber-Enabled
DSM Data Attacks using Supervised Learning

Kostas Hatalis, Student Member, IEEE, Parv Venkitasubramaniam, Member, IEEE,
and Shalinee Kishore, Member, IEEE

1

9
1
0
2

p
e
S
7
2

]
P
S
.
s
s
e
e
[

1
v
4
9
8
2
1
.
9
0
9
1
:
v
i
X
r
a

Abstract—Demand-side management (DSM) is a vital tool that
can be used to ensure power system reliability and stability.
In future smart grids, certain portions of a customers load
usage could be under automatic control with a cyber-enabled
DSM program which selectively schedules loads as a function
of electricity prices to improve power balance and grid stability.
In such a future, security of DSM cyberinfrastructure will be
critical as advanced metering infrastructure, and communication
systems are susceptible to hacking, cyber attacks. Such attacks, in
the form of data injection, can manipulate customer load proﬁles
and cause metering chaos and energy losses in the grid. These
attacks are also exacerbated by the feedback mechanism between
load management on the consumer side and dynamic price
schemes by independent system operators. This work provides a
novel methodology for modeling and simulating the nonlinear
relationship between load management and real-time pricing.
We then investigate the behavior of such feedback loop under
intentional cyber attacks using our feedback model. We simulate
and examine load-price data under different levels of DSM
participation with three types of additive attacks: ramp, sudden,
and point attacks. We applied change point and supervised
learning methods for detection of DSM attacks. Results conclude
that higher amounts of DSM participation can exacerbate attacks
but also lead to better detection of such attacks, point attacks are
the hardest to detect, and supervised learning methods produce
results on par or better than sequential detectors.

Index Terms—Demand Side Management, Cyber-Physical Sys-
tems, Dynamic Pricing, Load Forecasting, Attack Modeling,
Detection, Machine Learning

I. INTRODUCTION

D EMAND Side Management (DSM) is an essential com-

ponent in smart grids for planning, monitoring, and mod-
iﬁcation of consumer load levels. Furthermore, future cyber-
enabled DSM will allow smart grids even higher levels of
automated decision-making capabilities to selectively schedule
loads on local grids to improve power balance and grid stabil-
ity. Such a cyber approach relies heavily on real-time, two-way
communication capabilities between a central controller and
various adaptable loads. Research into security and reliability
of the cyberinfrastructure that enables DSM is therefore vital.
The main concerns in ensuring DSM security and safety lay
in the feedback mechanism of real-time electricity pricing and
distributed DSM controllable loads. Particularly in residential
grids, each load contributes only a small amount of power and
its compromising might not cause a noticeable impact on the
power grid. However, a carefully planned or even chaotic cyber

K. Hatalis, P. Venkitasubramaniam and S. Kishore are with the Department
of Electrical and Computer Engineering, Lehigh University, Bethlehem, PA,
18015, USA (e-mails: (kmh511,pav309,shk2)@lehigh.edu).

attack might impact other loads not under attack or not under
DSM control by taking advantage of the feedback mechanism
of load management.

Two-way communication capabilities of advanced metering
infrastructure (AMI) enables a utility or independent system
operator (ISO), in the retail power markets, to collect high-
resolution energy usage from consumers and enable dynamic
pricing to adapt to consumer demand [1]. Thus, AMIs provide
an efﬁcient way for ISOs to schedule prices and to then
communicate those prices to consumers for automatic DSM
control of certain portions of a load. AMIs can also provide
practical ways for ISOs to set DSM goals such reducing peak
or decreasing aggregate load levels through price inﬂuences.
However, there are several vulnerabilities in AMIs that present
noteworthy security issues since they are directly accessible by
users [2]. Additionally, due to the large scale deployments of
AMIs, ISOs encourage the utilization of marginally cheaper
hardware which results in constrained computational resources
to allow for robust security capacities, for example, intrusion
monitoring.

DSM programs utilize demand response, which is a speciﬁc
tariff or program to motivate customers to respond to changes
in price or availability of electricity over time by altering
their regular electricity use habits. We take this a step further
and look at future cyber-enabled DSM programs [3] that will
be able to autonomously control household loads such as
water heaters and HVAC units based on RTP. As part of the
reliable implementation of this future cyber-DSM, it is crucial
to be able to understand the dependency between dynamic
pricing and automatic demand response as well as the risks.
We hypothesize that Cyber-DSM programs can be particularly
vulnerable to cyber attacks such as false pricing information
or direct load manipulation, especially when the participation
rate in DSM is high.

Our work is thus motivated to study this vulnerability in
DSM. We provide a mathematical formulation of the feed-
back between utilities and DSM systems, and then simulate,
analyze, and test different detection methods for attacks on
such feedback. This relationship between load and price is
shown visually in Fig. 1. As prices go up, demand naturally
responds by decreasing. However, if AMIs are hijacked, and
false lower prices are reported to DSM systems, then there
will be an inappropriate increase in demand. A similar effect
happens if an attacker directly controls user loads. Then a
higher load usage by the attacker may inadvertently lead to
higher prices for the rest of the grid. We present a standard of
how attackers can exploit such a dependency. We propose a

 
 
 
 
 
 
mathematical framework of the feedback between price setting
and DSM systems to study how attacks can be structured and
how to detect them. The main contributions of our approach
can be summarized as follows:

1) We formalizing the price to load relationship using
an elastic demand model
to achieve DSM goals.We
simulate load and pricing data in a DSM system; in
particular under a strategic conservation scheme as an
example of a DSM goal.

2) We propose two modes of attacks on DSM systems:
false pricing data injection and direct load manipulation.
We prove their equivalence and highlight three types of
attacks that could be undertaken by each mode. We then
empirically show how a high use of DSM can exacerbate
attacks.

3) We simulate these attacks and review sequential change-
point and machine learning methods for detecting DSM
attacks. In our main results, we demonstrate the impact
of DSM on detection performance and identify what
kind of detectors are effective for different attacks.
In section II we provide a literature review on DSM, and
important DSM strategies real-time pricing and load forecast-
ing. In section III we apply the block bootstrap technique
for simulating the non-DSM load distribution of a micro-
grid of N homes from template residential load time series.
Dependency models for the feedback nature of load and prices
are proposed in section IV where we showcase simulations
of residential load and electricity prices when an automatic
DSM program controls certain portions of consumer demand
as a function of price. In section V we present two modes
of cyber attacks, direct load manipulation attacks and price
data injection attacks that can have a signiﬁcant inﬂuence on
the feedback of load and price. We prove these two attacks
are equivalent. We conclude in section VIII with possible
directions of future work.

II. BACKGROUND

There are multiple strategies to accomplish DSM like load
forecasting and real-time pricing which are used for load
management on in-home energy management systems. So
before introducing our models on the relationship between
price setting and demand response by cyber DSM systems,
to review foundational material on DSM. In
it
this section, we provide a brief overview of DSM goals and
approaches, real-time pricing, and load forecasting. We also
review different pricing simulation schemes which will play a
role in modeling RTP.

is crucial

A. Demand Side Management

DSM is an active and voluntary approach for reducing elec-
tricity use through activities or programs that promote electric
energy efﬁciency, conservation, or more efﬁcient management
of electric energy loads [4]. Very often ﬁnancial incentives and
educational programs are used to modify consumer demand.
More speciﬁcally, the main goals of DSM are peak clipping,
valley ﬁlling, load shifting, strategic load growth, ﬂexible load

2

Fig. 1: Feedback effect between price and DSM demand. As
prices go up, demand decreases. But if prices are hijacked
and false prices are fed to DSM systems then a false low
price increases demand, and a false high price can decrease
demand. The same is true if demand was altered by an attack.
If load usage is increased by an attacker then prices would
increase and vice versa.

shaping, and strategic conservation. These goals are summa-
rized in Fig. 2. In these goals, consumers are encouraged to
use less energy during peak hours, or to move the time of
energy use to off-peak times such as nighttime, or reduce
overall consumption. Other applications for DSM is to aid
grid operators in balancing intermittent generation from wind
and solar farms due to their volatility nature which may not
coincide with energy demand at different times of the day.

In our study, we focus on modeling and simulating the
DSM goal of strategic conservation, due to its simplicity and
essential use in the smart grid. This goal also makes it easier to
study attacks on DSM by modeling strategic conservation as a
general reduction in load. Attacks then could stand out more
versus goals like ﬂexible load shaping. More speciﬁcally, this
DSM goal aims at reducing aggregate load demand through
directed reduction of electricity consumption. The successful
implementation of strategic conservation programs usually
incentives to cus-
requires some combination of ﬁnancial
tomers, the promotion of energy-efﬁcient building standards,
and appliance efﬁciency improvement. Strategic conservation
also requires a more excellent knowledge on the part of the
utility concerning customer behavior. We envision in the future
that AMI and smart appliances in residential DSM programs
will automatically control speciﬁc portions of consumer load
as a function of real-time electricity prices to achieve the goal
of strategic conservation.

Most DSM programs are formulated as an optimization

DemandTimePriceTime123PriceHijackingPriceAlters Demand3

generation expansion planning. In this work, we look at short
term LF on the resolution of one hour up to a week.

LF models can be divided into two approaches [3], the ﬁrst
being statistical based modeling and the second being machine
learning. The statistical approach can be further broken down
into regression and time series models. Multiple linear regres-
sion can be used with the weighted least squares estimation
technique to form a relationship between different independent
covariates that load depends on such as weather conditions.
Regression models have been applied in LF in different works
to
such as in [9]. Time series models are also prevalent
apply to LF. The most common model is the autoregressive
moving average (ARMA) model and its variants that include
components such as integration (I), fractional integration (FI),
multivariate series (V), seasonality (S), exogenous (X) data,
conditional heteroskedasticity (CH), and nonlinearity (N). For
our formulation, we employ SARIMA for LF.

Hyperparameters of ARMA models can be solved using
Box-Jenkins decomposition or grid search with an Akaike
information criterion. Various studies have looked at all the
different ARMA models for LF [10]. Other time series meth-
ods for LF include simple exponential smoothing [11] and
the Holt-Winters seasonal method [12]. Time series analysis
and regression analysis share many models and ideas, but
they are theoretically different. Time series analysis ﬁrst
deals with time indexed stationary data and account for the
autocorrelation between time events. In regression we assume
there is no autocorrelation, and that all observations are
independent and identically distributed. Furthermore, we also
assume in regression the data is homeostatic and does not
exhibit multicollinearity.

Most recently, machine learning methods have seen a huge
spike in LF research. Machine learning models are data-driven,
typically providing a nonlinear ﬁt to input covariate data to
predict load. Advantages of this approach include not needing
preconditions for data such as stationarity (a requirement
for most time series methods), excels at modeling nonlinear
dependences, and can ﬁt large data sets. Disadvantages for
most machine learning models are that most hyperparameters
are continuous (difﬁcult to tune), they require extensive feature
engineer, and may get stuck in local minimums. Models for
LF include support vector machines [13], feedforward neural
networks [14], recurrent neural networks [15], random forests
[16], and ensemble learning [17].

In all the various LF approaches, benchmarks are required to
compare the prediction performance of our models. The most
common benchmarks are the naive persistence and seasonal
methods. In the naive persistence method a prediction of the
load for time t is equal to the value from the previous time
step t − 1 and in the seasonal persistence method a prediction
of the load for time t is equal the same hourly value from the
previous day t − 24.

C. Real Time Pricing

Every consumer of electricity is charged with a certain
amount per kilowatt hour (kWh) of energy. Such a charge
is done to cover the costs associated with the generation,

Fig. 2: Various demand side management goals.

problem as follows

T
(cid:88)

(Lt − L(cid:48)

t)2,

min
Pt

t=1
where Pt is RTP at time t, Lt is actual load, and L(cid:48)
t is the
target load level the ISO is interested in achieving via DSM.
The aim is to choose a price Pt for each time step such that
the actual load would reach as close as possible to the target
level. In [5], a DSM strategy was proposed based on heuristic
optimization to shape the load curve close to the desired shape.
A heuristic-based evolutionary algorithm was used to solve the
above minimization problem. A multi-agent game theoretical
DSM approach is proposed in [6]. The authors use game
theory and formulate an energy consumption scheduling game,
where the players are the users, and their strategies are the
daily schedules of their household appliances and loads. In [7],
the minimization problem is solved by utilizing a feedforward
neural network to map the nonlinear relationship between price
and load. Recently, the DSM problem is addressed in [8]
as a multi-objective optimization problem that also seeks to
balance other merit functions such as energy production cost,
costumers preferences, and other constraints.

B. Load Forecasting

Load forecasting (LF) techniques are an essential compo-
nent for RTP and other ISO operations by predicting future en-
ergy requirements of a system from previous data and weather
conditions. It is recognized as the initial building block of
utility planning efforts and ensures the balance between supply
and demand of energy, LF thus plays a vital role in our
DSM formulations. For a given system and requirements, LF
provides predictions for speciﬁc periods. These periods are
divided into short, medium, and long term forecasts. Short
term LF is used to predict load on an hourly basis up to 1
week for daily operations and cost minimization. Medium-
term LF typically predicts load on weekly, monthly, or yearly
basis for efﬁcient operational preparations. Long term LF is
used to predict load up decades ahead to facilitate grid and

DemandFlexible Load ShapeTimeStrategic Load GrowthDemandTimeTimeStrategic ConservationDemandTimePeak Load ReductionDemandTimeValley FillingDemandTimeLoad ShiftingDemandDemand Side Managementtransmission, and distribution of electricity. The two main
types of costs are operational and ﬁxed costs. During the 20th
century, tariffs have been used to recover costs. Lately, clever
pricing schemes have been developed to meet the requirements
of modern power systems [18], such as, real-time pricing
(RTP) where consumers are charged with a price nearest to
the real price of generation at a speciﬁc interval in time. RTP
plays an integral part in time-based DSM programs that makes
consumers choose the time of consumption of power as a
response to prices [19]. Cyber-enabled DSM programs are an
automated form of time-based DSM programs.

There are two types of RTP schemes, hourly pricing and
day ahead pricing. In the ﬁrst type, the price of electricity is
released on an hourly basis for the next hour. In day ahead
pricing, prices are announced for the next 24 hours based on
predicting the load demand and the cost of generation. RTP
signals combined with DSM automation at the consumer level
provides beneﬁts to both consumers and utility. A properly
designed RTP scheme increases the reliability of the grid,
reduces associated costs with generation, and lowers electricity
bills of consumers. Further review of RTP and other dynamic
pricing schemes can be found in [3].

III. MICROGRID SIMULATION

Before modeling the load-price dependency of a DSM
system, we need ﬁrst to obtain some ground truth data of
what load data from a residential micro-grid looks like without
the presence of DSM, where we assume the elasticity of
demand to price is very low. To do this, we use the power
time series from several homes as templates for our grid and
then generate artiﬁcial N household datasets. There are several
ways to generate artiﬁcially residential load data, such as by
using power grid simulators such as MATPOWER [20] or
GridLAB-D [21]. Our object is to create a model free real-data
driven alternative to grid simulators. We are able to generate
unlimited but plausible univariate load data to serve as the
base demand for sample households before the application of
a DSM system.

A. Data Source

We use the UMass Smart* [22] dataset, 2017 release, for the
simulation of micro-grid load time series. The Smart* project
built a data collection infrastructure that records data from a
variety of sensors deployed in real homes. Their infrastructure
supports both pulling data by querying individual sensors and
pushing data from sensors to a gateway server, which ran
on their software tools. The 2017 Home dataset release is
comprised of electrical power readings from seven homes from
2014 to 2016 at a minute resolution. It includes readings from
individual appliance sensors as well as total power usage of
each home. We chose to use these seven datasets as template
homes in simulating the power usage of a micro-grid due to the
breadth of the data collected. For DSM attack research, these
datasets can help model an attacker compromising individual
appliances. For each home the power consumption is given
in kW for every minute. We convert this time series to kWh
with a resolution of one hour which is common for smart

4

Fig. 3: Process of block bootstrap simulation of a new home
power usage (bottom) from a template home (top). Example
simulation samples are taken from four days from the template
series with replacement.

meter readings and real time price modeling [3]. We do this
by obtaining the average power consumption within an hour
and multiplying it by the time period as such

E(kW h) = t(hr) ×

1
60

60
(cid:88)

i=1

P i

(kW )

(1)

B. Block Bootstrap Simulation

In the generation of new time series from sample data,
several approaches can be applied depending on the statistical
properties of the series. Data that is stationary can be modeled
and generated using an ARMA process [23]. An ARMA model
is ﬁtted to the data, and then future data is sampled from
the ARMA distribution. If there is no serial correlation, then
the distribution of some sample data can be modeled using
Markov Chain Monte Carlo [24], and new data can be sampled
from this estimated distribution. However, in the case that data
exhibited autocorrelation and non-stationarity in the presence
of a periodic seasonal pattern, then a natural choice is to use
the block bootstrap method [25].

Bootstrap is used in simulation statistics for estimating the
distribution of a statistic such as mean or variance. This
is particularly useful when there is no analytical form to
estimate the density of our underlying statistics. A bootstrap
analysis is conducted by using the Monte Carlo algorithms
with replacement. Data is sampled with replacement until a
new set is formed and then statistics are calculated from that
new set. The process can be repeated to get a more precise
estimate of the Bootstrap distribution and to form conﬁdence
intervals for those statistics. The block bootstrap is used when
the data, or the errors in a model, are correlated. The block
bootstrap attempts to replicate the serial correlation by resam-
pling blocks of data instead of individual observations. This
is why the block bootstrap is used primarily with correlated
time series. In block bootstrap, blocks sampled can overlap or
be non-overlapping. For load time series simulation we use
block bootstrap with non-overlapping blocks to preserve the
daily seasonal pattern of power consumption. The process of
block bootstrap simulation of a new home power usage from
a template home is shown in Fig. 3.

IV. DEPENDENCY MODEL

A. Modeling Elastic Demand

For analyzing the feedback dependency between load and
price in a DSM setting it is ﬁrst required to deﬁne a supply
and demand relationship of electricity. To do so we utilize
the well known measure in economics, the Price Elasticity of
Demand (PED) [26] which can be given by

5

·

.

(2)

P
L

(cid:15)d =

dL
dP
PED shows the responsiveness of the Load (L) demanded of
electricity to a change in its Price (P). An absolute value of
PED = 1 shows unitary elasticity. For instance, when (cid:15)d =
−1 then a 1% change in the price will have a 1% change
in the load demanded. As prices increase, load will decrease.
When absolute PED falls between 0 and 1, this signiﬁes that
the demand for load is inelastic, while a value greater then 1
says that the demand is elastic. When |(cid:15)d| = 0 the demand is
perfectly inelastic. A change in price has no affect on the load.
While (cid:15)d = ∞ represents perfect elasticity. If (cid:15)d is constant
the whole demand curve then,

dL = (cid:15)d

1
dP
P
(cid:90) 1
P

1
L
(cid:90) 1
L
ln(L) = (cid:15)d ln(P ) + c
eln(L) = e(cid:15)d ln(P )+c

dL = (cid:15)d

dP

L = e(cid:15)d ln(P ) · ec
eln(P )(cid:17)(cid:15)d

L =

(cid:16)

· ec

(3)

L = P (cid:15)d · ec

substitute a = ec

⇒ L = a · P (cid:15)d

where a is a scaling constant. An example demand curve
estimated from Eq. 3 can be seen in Fig. 4. The ﬁgure also
showcases the nonlinear relationship between load and price
where as the price, the independent variable, increases the load
demanded, the dependent variable, decreases.

B. Modeling Consumer DSM

In modeling the relationship between load and price under a
DSM program, it is important to deﬁne the individual loads of
each customer in determining aggregate load. For a customer
who does not participate in a DSM program their load is
determined by the stochastic demand process of users actions
such as watching tv, using the AC, etc. Demand is impacted
by multiple factors such as user preferences, weather, and time
of day. In this process, electricity prices have a small inﬂuence
on demand - individual customer demand is fairly inelastic to
price. Following the derivation in Eq. 3 we deﬁne the load
usage of an individual customer i for time t as

φt,i = θt,i(Pt + Pc)(cid:15)d

t,i,

is the RTP for time t, Pc is constant of the
where Pt
retailer’s market costs which does not vary with RTP, θt,i ≥ 0

Fig. 4: Load as a function of price with arbitrary price range
$1-100, α = 10, 000, and (cid:15)d = -0.1,-0.2,-0.4,-0.6,-1, -2.

is a scaling factor representing the stochastic process that
determines the user load, and (cid:15)d
t,i is the elasticity coefﬁcient
for the individual customers sensitivity to price changes. It
can vary over time but without DSM incentives most users
have a fairly inelastic PED. For experimental purposes, in
modeling individual user loads we set φt,i equal to simulated
bootstrapped user load proﬁles deﬁned in Section III-B. We
assume that prices, user preferences θt,i, and (cid:15)d
t,i have been
absorbed in the calculation of the simulated load series. Thus
we use φt,i as a reference point to how much electricity a user
wants to consume without the inﬂuence of a DSM program.
We model the task of the ISO as modifying φt,i to some
desired load levels.

The goal of DSM is to motivate the consumer to use less
energy typically during peak hours. A DSM program could
have a number of goals all aimed at reducing load usage.
These may be peak clipping where peak load is reduced, load
shifting where times of higher load are reduced and times of
low load are increased, and many more strategies. There are
multiple ways a DSM program can achieve these goals such
as ﬁnancial incentives, education, and regulation. In this work
we look at the near term future where in a home with a smart
meter and smart appliances, users can participate in a DSM
program that automatically adjusts the load of interconnected
appliances (such as the water heater) as a function of price
and a DSM elasticity term that determines how fast or slow a
users load under DSM control.

Realistically, only a certain portion κt,i ∈ [0, 1) of customer
i’s power usage will be under control of a cyber DSM program.
There will always be some stochastic component of power
usage such as using a microwave oven or electric hairdryer.
An ISO can signal a users DSM program by setting prices
where smart appliances adopt to price changes with certain
elasticity. We do no model direct load control. If prices are
set too high it will signal the DSM component of a users
demand to start using less load. If prices are set low then it
signals the DSM program to increase load usage. We model

0102030405060708090100Price (USD/MWh)010002000300040005000600070008000900010000Load Demand (MWh)d = -2d = -1d = -0.6d = -0.4d = -0.2d = -0.1this DSM component as such

lt,i = (κt,iφt,i)P

(cid:15)dsm
t,i
t

+ (1 − κt,i)φt,i,

(4)

t,i

(cid:15)dsm
t,i
where the ﬁrst part (κt,iφt,i)P
is the load level customer
t
i allows the DSM program to determine as a function of price
Pt and the DSM’s elasticity to price (cid:15)dsm
. Price elasticity of
DSM (cid:15)dsm
t,i may very over time and customer and affects how
much power usage should be affected by price. The second
portion (1 − κt,i)φt,i of a customers load is the stochastic
component. The DSM portion parameter κt,i is deﬁned as a
function of time where users can add or remove house loads
under DSM control over time. The term κt,i can be modeled
as a random variable (e.g. Uniform or Gaussian) or as a ﬁxed
constant for users. Once each individual customers load has
been determined then total load (modiﬁed by a cyber-DSM
program) for time t for N customers is calculated by

Lt =

N
(cid:88)

i=1

lt,i.

We also deﬁne the aggregate base load as

N
(cid:88)

φt,i,

Φt =

(5)

(6)

i=1
which represents the total demand had there not been a DSM
program for a time period t (ie κt,i = 0, ∀i).

C. Modeling DSM Goals

The ISO has different DSM goals for reducing a customers
load proﬁle as mentioned before these goals can be to reduce
peak load or increase load in periods of low demand. Two
ways for a DSM program to control load are to make it a
function of electricity prices or for an ISO to directly control
a homes energy usage by programming its smart appliance.
The effects of this feedback control approach can also be seen
in Fig. 1. Given the privacy issues of having an ISO directly
control a homes energy usage, we model the indirect approach
of achieving DSM goals through setting electricity prices.

We introduce an approach how an ISO can set RTP, on
an hourly basis, as a function of aggregate load to achieve a
t. The approach takes as input a forecast ˆΦt
desired load level L(cid:48)
of the base aggregate load to calculate price Pt. This prediction
can be deﬁned as

ˆΦt = fpred (Φt−k:t−1, Pt−k:t−1, X) ,

(7)

where inputs to the prediction model are past base load Φ and
price P values from time t − k to t − 1, and other predictor
variables X such as time-of-day and weather information.
Various types of prediction models can be used for fpred such
as neural networks as reviewed in section II-B. We now deﬁne
RTP based on the formulation in Eq. 3 as such

Pt =

(cid:18) L∗
ˆΦt

(cid:19)1/ˆ(cid:15)dsm

.

(8)

Where,

Goal 1: L∗ = L(cid:48)
t
t + (L(cid:48)
Goal 2: L∗ = L(cid:48)

t−1 − Lt−1)

.

(9)

6

The component L∗ adjusts the RTP based on two goals the ISO
may have. The ﬁrst goal is to adjust the price to push power
usage directly to the target level L(cid:48)
t with the assumption that
there is near 100% DSM participation by all customers. The
expectation is that if demand for time t is ˆΦt, then a price point
is set to push load usage to L(cid:48)
t. Of course,if participation is
less then 100%, which is more likely, then the target level L(cid:48)
t
will not be reached by Pt. So, to push the aggregate load, from
all users, as close as possible to the target load level, with an
unknown amount of participation, then a penalty would need
to be added to Pt. We model this as Goal 2 where the idea is
to affect the power usage of those under cyber-DSM control
even more than goal 1 to compensate for users who are not
participating in DSM.

Some users will not be participating, or only have a small
portion of their power usage under control by the cyber-DSM
program. We model their remaining power usage as inelastic
to RTP. Thus, to push aggregate load to a target level, taking
into account some load usage is inelastic, we need to push RTP
much higher or lower to have a bigger effect in pushing DSM
controlled load closer to the target load. This is what Goal 2
attempts to do, with the component L∗ = L(cid:48)
t−1 − Lt−1)
taking the target load level for time t and adding the difference
from the previous target load L(cid:48)
t−1 and realized load Lt−1 as
a penalty to adjust RTP to compensate for the difference. If
L∗ < 0 then we set L∗ = 10 or to some arbitrary small target
value. By subtracting the difference between the previous load
and target level, we make up for users not participating in
DSM by forcing DSM users a higher price to push their load
even lower.

t + (L(cid:48)

The term ˆ(cid:15)dsm in Eq. 8 is an estimate of the price elasticity
of DSM of the whole grid; if individual user coefﬁcients (cid:15)dsm
are unknown then ˆ(cid:15)dsm can be estimated from observing past
values of price and load under different levels of DSM control.
Alternatively, the ISO can deﬁne (cid:15)dsm for all household cyber
DSM programs. The formulation in Eq. 8 sets prices by
comparing the adjusted target load for time t to the forecasted
base demand ˆΦt for the same time. This demand ˆΦt would be
the level if no load was under DSM inﬂuence, thus to inﬂuence
and alter it, Φt needs to be estimated as accurate as possible.

t,i

In our approach, if the aggregate load is above the target
load, RTP is set higher to decrease demand. If the aggregate
load is lower than the target load, then the price is decreased to
increase demand. Thus, as also can be observed, in Eq. 8, there
is direct feedback between price and load Eq. 4. The block
diagram in Fig. 5 also outlines this feedback that showcases
the relationship between the utility and grid. Generation sets
the target load based, on the price and supply of power, and
the controller sets the price signal and the elasticity of demand
coefﬁcient for DSM systems. The price is then fed into the grid
into DSM systems which adjust load usage appropriately. The
bold red lines in Fig. 5 highlight the feedback relationship
between price and demand. The scope of work is in the
mathematical modeling of the controller and DSM system
relationship. With such a model we present in the next section
how attackers can exploit it.

7

parameters deﬁned in Table I. Under the Goal 1 scenario when
κi = 0, ∀i, shown in Fig. 6(a), we see that prices range from
$0.01 to $0.03 per kWh. As expected with no DSM program
to inﬂuence demand, the observed load is equal to the base
load. The same is observed in Fig. 7(a) when the simulation
is run with the Goal 2 RTP model. The only difference under
this scenario is the price range which is exceptionally high
ranging from $0.01 to $0.6 per kWh. This is expected in this
scenario since the ISO is attempting to set prices to maximize
the effect on DSM customers, which there are none, but this
is unknown to the utility. With no DSM the mean observed
load is 332 kWh.

Next, we rerun the simulation setting κi = 0.5, ∀i. In the
Goal 1 scenario in Fig. 6(b) we see that the base load was
reduced with a mean observed load of 269 kWh. In Fig.
7(b) the same simulation is run with Goal 2. Here the mean
observed load was further reduced to 246 kWh, but large price
spikes occur at peak load times. Finally, we run simulations
for κi = 0.99, ∀i to study the effects of high penetration of
DSM. In simulating both goals, shown in Figures 6(c) and
7(c), the mean observed load is reduced to 208 kWh, which is
very close to the target load. However, in Goal 2 we see great
resonating feedback affect occur when prices spike very high.
RTP increases as a response to large values in observed load.
Then when load decreases to low levels prices decrease cause
load to spike more during the next time step. While under
Goal 1 this is not observed. The higher prices set in Goal 2
would see a large cost to DSM participating customers.

V. DSM ATTACK MODELS

An attacker can exploit the feedback between the customer
and utility in determining RTP and load usage by cyber DSM
programs by injecting false price or corrupted load data into
the feedback loop. The attack exploitations we study here are
different from the false data injection attacks studied in other
smart grid papers. Most false data injection attack works [27]
study the compromise in energy management systems to alter
power state estimates by the utility operator. In our case, we
study attacks that aim to alter a users load proﬁle by exploiting
cyber DSM vulnerabilities.

For modeling attacks on a cyber DSM managed micro-grid
we assume that the attacker compromises a subset of all the N
customers, we denote this subset as A, for an attack period t ∈
Ta. We study two modes of attacks: false pricing data injection
attacks in which a compromised user receives manipulated
pricing information, and a direct load manipulation attack in
which the appliances of the compromised customer are under
the control of the attacker. When communication encryption is
broken with an AMI, then a pricing data injection attack can
occur. By hacking into a cyber DSM load controller, or directly
hacking into smart appliances, then a direct load manipulation
can occur by altering a users load proﬁle. The two modes of
attacks are outlined below.

• False Pricing Data Injection: The attacker can manipu-
late prices Pt received by each compromised costumer
i ∈ A, and the received price P i
t can be different

Fig. 5: Block diagram highlighting the feedback between the
utility and grid.

Simulation Parameters
N
200 homes
(cid:15)dsm
-1
Ltarget
200 kWh

TABLE I: Simulation parameters used in case studies.

D. Simulation Parameters and Assumptions

For experimental purposes,

in modeling individual user
loads we set φt,i equal to simulated bootstrapped user load
proﬁles deﬁned in Section III-B. We assume that prices, user
preferences θt,i, and (cid:15)d
t,i have been absorbed in the calculation
of the simulated load series. Thus we use φt,i as a reference
point to how much electricity a user wants to consume without
the inﬂuence of a DSM program. We model the task of the ISO
as modifying φt,i to some desired load levels. Furthermore,
we include the following assumptions in our modeling and
simulation. We assume the ISO can deﬁne (cid:15)dsm for each
household and we set it as a constant for all customers and
time. For additional simplicity, we model κi also invariant in
time, but it may vary per customer. Lastly, through AMI, we
assume ISO the can obtain an estimated reading of Φt−1 but
not of individual user φt−1,i to preserve privacy. This way the
ISO has a time series of estimated non-DSM load demand in
order to provide predictions ˆΦt.

For all case studies in the rest of our paper, we use the
UMass Smart* dataset (2017 release) to bootstrap simulate
residential load as described in Section III. We simulate a
micro-grid of N = 200 residential homes for a time period of
T to obtain a phi distribution that deﬁnes a base load proﬁle
for each home i at each time t. We set the DSM demand
elasticity for each user to (cid:15)dsm = −1, ∀i to allow the DSM
component of customer load to be sensitive enough to price
changes. For all case studies we set a simple ﬂat target load
of Ltarget = 200 kWh. We note, however, that with our
pricing formulation in Eq. 8 we can model any DSM goal from
peak load reduction to ﬂexible load shaping. These simulation
parameters are summarized in Table I. For forecasting ˆΦt we
use the naive persistence prediction method.

In Figures 6 and 7 we demonstrate a price-load feedback
simulation for a period of T = 48 hrs under Goals 1 and 2 with

X𝜖𝑑𝑠𝑚𝑃𝑡𝐿𝑡𝜑𝑡DSM SystemX𝐿𝑡𝜑𝑡𝐿𝑡′Controller𝜖𝑑𝑠𝑚𝑃𝑡External Factors𝐿𝑡′𝑃𝑡GenerationUtilitySmart Grid8

(a)

(b)

(c)

Fig. 6: Simulation of price-load interaction with Goal 1 with DSM when κi = 0, ∀i (a), κi = 0.5, ∀i (b), and κi = 0.99, ∀i in
(c).

(a)

(b)

(c)

Fig. 7: Simulation of price-load interaction with Goal 2 with DSM when κi = 0, ∀i (a), κi = 0.5, ∀i (b), and κi = 0.99, ∀i in
(c).

for various customers in order to achieve the attacker’s
desired effect:

directly:

laL
t,i = lt,i + aL

t,i, ∀i ∈ A, t ∈ Ta

t,i = Pt,i + aP
P a

t,i, ∀i ∈ A, t ∈ Ta

This has the affect of compromising the demand response
of a customer in the following way:

laP
t,i = (κiφt,i)(aP

t,i)(cid:15)dsm

+ (1 − κi)φt,i

• Direct Load Manipulation: The attacker can manipulate
the load of each compromised customer lt,i, i ∈ D

Under both attack modes, we would get a compromised
aggregate load which may include one or both attacks
occurring simultaneously

N
(cid:88)

La

t =

t,i + laL
laP
t,i .

i=1
These two modes of attack are equivalent as they both affect
a customers load response as long a part of the load is under
cyber DSM control that is sensitive to price changes.

0102030400.0000.0050.0100.0150.0200.0250.030Price (USD/kWh)010203040Time (hr)02004006008001000Total Load (kWh)Observed LoadBase LoadTarget LoadMean Load0102030400.0000.0050.0100.0150.0200.0250.030Price (USD/kWh)010203040Time (hr)02004006008001000Total Load (kWh)Observed LoadBase LoadTarget LoadMean Load0102030400.0000.0050.0100.0150.0200.0250.030Price (USD/kWh)010203040Time (hr)02004006008001000Total Load (kWh)Observed LoadBase LoadTarget LoadMean Load0102030400.00.10.20.30.40.50.6Price (USD/kWh)010203040Time (hr)02004006008001000Total Load (kWh)Observed LoadBase LoadTarget LoadMean Load0102030400.000.020.040.060.080.100.120.140.16Price (USD/kWh)010203040Time (hr)02004006008001000Total Load (kWh)Observed LoadBase LoadTarget LoadMean Load0102030400.00.10.20.30.40.50.6Price (USD/kWh)010203040Time (hr)02004006008001000Total Load (kWh)Observed LoadBase LoadTarget LoadMean Load9

(a)

(b)

(c)

Fig. 8: Examples of different type of DSM attacks: (a) ramp attack, (b) sudden attack, and (c) point attack.

Fig. 9: Confusion matrix imposed on a time axis of attack
predictions vs true observations.

Theorem 1. Given a set of customers A compromised by the
attacker, there always exist a direct load manipulation attack
such that all customers behave the same as a pricing data
injection attack and vice versa for κi > 0, ∀i, t ∈ Ta.

Proof. Setting both attacks to have the same load, then the
attack load is set as follows

t,i = (κiφt,i)(aP
aL

t,i)(cid:15)dsm
and the equivalent attacked price is

+ (1 − κi)φt,i,

(cid:32)

aP
t,i =

aL
t,i − (1 − κi)φt,i
κiφt,i

(cid:33)1/(cid:15)dsm

If κi = 0 then the two attack modes are not equivalent since
a price attack will have no affect on customer load.

Since false pricing data injection and direct load manipulation
attacks are equivalent, we focus only on direct load manipu-
lation attack analysis.

There are different goals an attacker can have to harm the
power grid or exploit it. For example, an attacker can cause
chaotic metering by messing the metering data transmission,

Fig. 10: ACF and PACF fplots of the residual series between
the SARIMA ﬁt tp training data. From the plots we observe
that the residuals are stationary.

efﬁciency loss of the energy provided by causing greater load
volatility, or the energy system failure by overloading the
power lines or devices. The focus of this work is efﬁciency loss
by increasing user loads through direct load manipulation. In
this scenario, we introduce three possible types of load attacks.
A ramp attack, sudden attack, and point attack. These type
of attacks are shown in Fig. 8 wherein plot (a) an attacker
gradually increases a users load over time. In plot (b) an
attacker suddenly ramps up the power usage to a speciﬁed
level, and in plot (c) we demonstrate a point attack where the
attacker increases loads only for speciﬁc hours.

010203040050100150200250Attack Level010203040Time (hr)02004006008001000Total Load (kWh)Attacked LoadNominal Load0102030400255075100125150175200Attack Level010203040Time (hr)02004006008001000Total Load (kWh)Attacked LoadNominal Load010203040050100150200250300Attack Level010203040Time (hr)02004006008001000Total Load (kWh)Attacked LoadNominal Loadtime axistime axispredictionpast datapast datanominalattackattacknominalnominalTNFNTPFPtruedetection window010203040500.250.000.250.500.751.00Autocorrelation010203040500.00.51.0Partial Autocorrelation10

Under the Sequential Detection paradigm we collect ob-
servations an apply a whitening ﬁlter to produce a residual
series with the assumption that it is white Gaussian noise. If
an additive attack At > 0 is present for observation t, this
will cause a deﬁnite shift in the mean of the residual series.
This detection problem can thus be stated as deciding if a
null hypothesis H0 is true, where the residual series has zero
mean and known variance (invariant in time and estimated
from a sample population), or if the alternative hypothesis H1
is true which states that the examined series has some mean
not equal to zero thus being under attack. This can be modeled
as a hypothesis test, and for the GLRT and CUSUM detectors
this translates to

H0 : xt

H1 : xt

iid∼ N (0, σ2), t = 1, ..., N
iid∼ N (At, σ2), At > 0, t = 1, ..., N

For the GLRT detector, to simplify implementation, we model
the attack as if it were constant A > 0 but unknown. To
produce a residual series a SARIMA multi-step forecast for
t = 1, ..., N is made before the detection period. This forecast
is conducted using a past window of training data that was not
under attack. The forecast is made for time t to t + k. These
predictions are then subtracted from the incoming observations
to produce a residual time series which is then fed as input
into the GLRT and CUSUM detectors.

The generalized likelihood ratio with a threshold to decide

H1 is deﬁned as

p(x; A, H1)
p(x; H0)

=

2σ2

2πσ2 exp− 1
1√
2πσ2 exp− 1
1√

2σ2

(cid:80)N

t=1(xt−A)2

(cid:80)N

t=1 x2
t

H1≷
H0

γ

Taking the log of both sides simpliﬁes the results to

T (x) =

1
N

N
(cid:88)

t=1

xt

H1≷
H0

σ2
N A

ln γ +

A
2

= γ(cid:48)

The threshold is then found by

PF A = P (T (x) > γ(cid:48); H0) = Q

(cid:33)

(cid:32)

γ(cid:48)
(cid:112)σ2/N

⇒ γ(cid:48) =

(cid:114)

σ2
N

Q−1(PF A)

Fig. 11: Q-Q plot of the residual series between the SARIMA
ﬁt tp training data. From the plot we observe that for extreme
quantiles the distribution is not Gaussian.

VI. ATTACK DETECTION

Here we outline sequential and supervised learning-based
methods for attack detection. The sequential detections meth-
ods are the one-sided cumulative sum (CUSUM) test [28] and
windowed generalized likelihood ratio test (GLRT) [29]. Both
these methods take as an input a residual time series that is
the output of applying a SARIMA ﬁlter to load observations.
If enough past observations of load data that
is labeled
as nominal or under attack are collected, then detection of
attacks can be made by training supervised learning classiﬁers.
Supervised learning algorithms have been broadly adopted to
the smart grid literature for monitoring and detecting cyber
attacks on power systems [30], [31], [32]. Here we employ
several supervised learning methods for detecting attacks on
cyber-DSM systems. It is unlikely that an ISO can collect high-
quality attack data due to the lack of such attacks occurring.
However, such data can be simulated. Using past load data we
simulate direct load manipulation attacks by creating different
types of attacks as shown in Fig. 8.

A. Sequential Detection Methods

In sequential change point detection, a series does not
have a ﬁxed length. Instead, observations are received and
processed sequentially over time. When an observation has
been received, a decision is made about whether a change has
occurred in the state based only on the observations which
have been received so far or within a ﬁxed past window
size. If no change is detected, then the next observation in
the sequence is processed. The sequential formulation allows
sequences containing multiple change points to be easily
handled. Sequential change point detection can be applied in
the case of attack detection to identify if a load time series
has been compromised. If an attack is ﬂagged, then an ISO
can take appropriate actions to prevent further damage to the
grid.

where N is the size of our window and σ is estimated from
past training data used to produce the SARIMA forecasts.

A CUSUM test is a control chart, that is used to monitor
the mean of a process based on samples taken from past data
at speciﬁc time intervals. It is a class of non-linear stopping
rules for structural changes. Given information of current and
previous samples, a CUSUM test relies on the speciﬁcation
of a target value h and a known or reliable estimate of the
standard deviation σ the process. The CUSUM test typically
signals an out of control or anomalous process by an upward
or downward drift of the cumulative sum until it crosses the
target threshold. For attack detection, if the mean of the load
series shifts above the target threshold, we then assume the
grid is under attack.

80604020020406080Theoretical quantiles10050050100150Ordered ValuesQ-Q Plot of Training ResidualsWe deﬁne the CUSUM detector as follows. Taking the
residual series xt = yt−Et−1[yt], again deﬁned by a SARIMA
forecast Et−1[yt], we deﬁne a one-sided CUSUM detector as

gt = max(0, gt−1 + xt − k)

where k is called the reference value (sometimes also called
drift) set priori to values such as 0, 0.5, or A/2 if the size
of A is known in advance. When gt = 0 then we deﬁne the
change time as tc = t, and when gt > h > 0 we reset gt = 0
and ﬂag an alarm at time ta = T . The alarm threshold is
also set priori to some value based on the sample population
standard deviation such as h = 2σ where σ is estimated from
past training data used to produce the SARIMA forecasts.

B. Supervised Learning Methods

Changepoint detection could alternatively be treated as a
supervised learning binary classiﬁcation problem. Under this
scheme, all of the change point sequences, or in our case
attacks, represent one class, and all of the nominal sequences
represents a second class. Supervised learning methods are
machine learning algorithms that learn a mapping from input
data to a target class label. Given a set of samples X =
{xi}N
i=1, then the supervised
learning detection problem is deﬁned as a hypothesis function
that captures the relationship between samples and labels
f : X −→ Y. A sliding window moves through the data,
considering each difference between two data points as a
possible change point.

i=1 and a set of labels Y = {yi}N

An advantage of treating attack detection as a supervised
learning approach is a more straightforward training phase.
However, a sufﬁcient amount and diversity of training data
need to be provided to represent all of the classes. To ensure
enough training data, and to prevent class label imbalance,
we simulate all attack data to train our algorithms. Machine
learning methods have successfully been applied several times
in data injection attacks in power systems [31], [32], so we
analyze here their ability in detecting data attacks on cyber
DSM systems. The binary classiﬁcation problem for attack
detection can be deﬁned as
(cid:40)

yi =

1, if Ai > 0
0, if Ai = 0

where yi = 1 if the i-th observation is under attack, and yi = 0
if there is no attack. A variety of classiﬁers can be used for this
learning problem. For detection of DSM attacks, we examine
logistic regression (LR), random forests (RF), Gaussian Naive
Bayes (GNB), gradient boosting classiﬁer (GBC), and artiﬁcial
neural network (ANN). We chose these classiﬁers because they
are all very powerful and have widespread use in both industry
and academia; model descriptions of these methods can be
found in [33], [34].

C. Performance Analysis

For the security of cyber DSM systems, the major concern
is not just the detection of attacks, but also the detection of
nominal data with high reliability. That is, we want a detection

11

system that can predict not only with high accuracy but also
with high precision and recall to avoid false alarms. Therefore,
we measure the true positives (TP), the true negatives (TN), the
false positives (FP), and the false negatives (FN). Deﬁnitions
of these measures are visually shown in Fig. 9. We use these
measures to calculate several main performance indicators of
accuracy, precision, and recall.

We calculate accuracy as the ratio of correctly classiﬁed

data points to total data points

Accuracy =

T P + T N
T P + T N + F P + F N

This measure provides the total classiﬁcation success of the
models. But alone, accuracy is not enough to get a full picture
of performance. Precision is calculated as the ratio of true
positive data points (attacks) to total points classiﬁed as attacks

P recision =

T P
T P + F P

On the other hand, recall, also known as the true positive rate
(TPR), refers to the portion of attacks that were recognized
correctly

Recall =

T P
T P + F N

Precision values give information about the prediction perfor-
mance of the algorithms, whereas recall values measure the
degree of attack retrieval. For instance, a recall value equal
to 1 signiﬁes that none of the attacked measurements were
misclassiﬁed as nominal.

We use one more ﬁnal measure of total performance of our
detectors, the receiver operating characteristics (ROC) curve.
The ROC curve is an assessment that enables visual analysis
of the trade-off between TPR and false positive rate (FPR).
This can also be seen as the trade-off between the probability
of detection and the probability of false alarm. FPR is deﬁned
as follows

F P R =

F P
F P + T N

.

The ROC curve is constructed by plotting a two-dimensional
graph with FPR on the x-axis and TPR on the y-axis at various
threshold settings. A detection algorithm produces a (TPR,
FPR) pair that corresponds to a single point in the ROC space.
The best possible detection method would produce a point in
the upper left corner, coordinate (0,1) of the ROC space. A
random prediction would give a point along a diagonal line
from (0,0) to (1,1). Points above this line are considered to
have performance, while points below are considered with
performance worse than guessing.

VII. DETECTION EXPERIMENTS

For attack simulation and detection experiments we use
all
the same parameters from Table I but we varied the
levels of κ and attacks at. We simulate each of the three
types of attacks as visualized in Fig. 8, each in the form
of direct load manipulation attack, under DSM participation
levels κ = 0.1 and 0.9. This creates a total of six experiment
scenarios. For each scenario, we simulate 28 days of training
data (672 observations) and 2 proceeding days of test data

12

(a) Type 1 attack; κ = 0.1.

(b) Type 2 attack; κ = 0.1.

(c) Type 3 attack; κ = 0.1.

(d) Type 1 attack; κ = 0.9.

(e) Type 2 attack; κ = 0.9.

(f) Type 3 attack; κ = 0.9.

Fig. 12: ROC curves for the six different experiment scenarios.

(48 observations), both at a resolution of 1 hr. All training
data is created nominally with no attacks. In the test data
sets, the ﬁrst 24 hrs of the test data are not under attack.
The last 24 hours of the test data we add one of the three
type of attacks. For ramp attacks, for each time step we add
an attack at = at−1 + 5 where the ﬁrst 24 hours of the test set
at=0...23 = 0. The sudden attacks are similar except the attack
is an additive constant at = 150. The last type of attack, point
attacks, are at=24 = 250, at=29 = 200, at=34 = 300, at=37 =
100, at=46 = 150, and at = 0 everywhere else.

conduct these checks on all scenario training datasets, where
we ﬁrst train a SARIMA ﬁt on them and then subtract that ﬁt
to produce the residual series. In all the training data sets, the
residuals were proven to be stationary from the ADF test and
independent from ACF/PACF plots. However, the Jarque-Bera
test and Q-Q plots showed that the observations did not come
from a Gaussian distribution. Example, ACF/PACF and Q-Q
plots for κ = 0.1 are shown in Fig. 10 and Fig. 11. Despite
the residuals not being Gaussian, we still run the sequential
detectors and examine their performance.

For the sequential detectors, we use multi-step SARIMA
forecasts to predict
the next 48 hrs, and then use those
forecasts to ﬁlter incoming test data for detection. Training was
conducted on the training time series of 28 days of nominal
data. SARIMA hyperparameters were chosen by examining
lag one differenced autocorrelation function (ACF) and partial
autocorrelation function (PACF) plots of the training data.
These forecasts where then subtracted from the incoming test
data to obtain a residual series that is input to the sequential
detectors. The assumption for both detectors is that the residual
series is Gaussian white noise, where the series has zero mean,
and each observation is independent identically distributed
from a Gaussian distribution.

To ensure the residuals are white noise we apply the aug-
mented Dickey-Fuller (ADF) test to check for stationarity, we
examine the ACF/PACF plots to check for independence and
run a Jarque-Bera test, and we examine a Q-Q plot to check if
the residual series has a Gaussian probability distribution. We

For training the supervised learning methods, for each of
the six scenarios, we simulate more data to ensure proper class
learning. We keep the test sets the same, but we extend each
training set doubling its size. We keep the original training
set, labeling it as nominal, and then make a copy of it. In the
copy, we split it into three parts, each part we add one of the
types of attacks at random levels. We label each observation
of this set as under attack. We add the nominal and attacked
training sets together to form a new training set with a total
of 1,344 observations. With our training and test time series,
we then create a set X features and Y labels that could be fed
into the supervised learning classiﬁers. Each training sample
xi ∈ X is composed of 24 hours of lagged data, each hour is
one feature, and each label yi ∈ Y corresponds to a class 0
(not under attack) and class 1 (under attack). Together we get
N = 1, 298 pairs of (xi, yi) training samples.

We run our experiments on a computer with an Intel i7
6700 2.6 GHz, and 16 GB of RAM. Implementation of

0.00.20.40.60.81.0False Positive Rate0.00.20.40.60.81.0True Positive RateReceiver Operating CharacteristicLR DetectorRF DetectorGNB DetectorGBC DetectorANN DetectorGLRT DetectorCUSUM Detector0.00.20.40.60.81.0False Positive Rate0.00.20.40.60.81.0True Positive RateReceiver Operating CharacteristicLR DetectorRF DetectorGNB DetectorGBC DetectorANN DetectorGLRT DetectorCUSUM Detector0.00.20.40.60.81.0False Positive Rate0.00.20.40.60.81.0True Positive RateReceiver Operating CharacteristicLR DetectorRF DetectorGNB DetectorGBC DetectorANN DetectorGLRT DetectorCUSUM Detector0.00.20.40.60.81.0False Positive Rate0.00.20.40.60.81.0True Positive RateReceiver Operating CharacteristicLR DetectorRF DetectorGNB DetectorGBC DetectorANN DetectorGLRT DetectorCUSUM Detector0.00.20.40.60.81.0False Positive Rate0.00.20.40.60.81.0True Positive RateReceiver Operating CharacteristicLR DetectorRF DetectorGNB DetectorGBC DetectorANN DetectorGLRT DetectorCUSUM Detector0.00.20.40.60.81.0False Positive Rate0.00.20.40.60.81.0True Positive RateReceiver Operating CharacteristicLR DetectorRF DetectorGNB DetectorGBC DetectorANN DetectorGLRT DetectorCUSUM Detector13

TABLE II: Evaluation metrics for attack detection.

κ

Attack Type

LR
RF
GNB
GBC
ANN
GLRT
CUSUM

LR
RF
GNB
GBC
ANN
GLRT
CUSUM

LR
RF
GNB
GBC
ANN
GLRT
CUSUM

y
c
a
r
u
c
c
A

l
l
a
c
e
R

n
o
i
s
i
c
e
r
P

0.1

2

100.0
97.9
77.1
97.9
95.8
95.8
95.8

100.0
96.0
56.0
96.0
92.0
92.0
96.0

100.0
100.0
100.0
100.0
100.0
100.0
96.0

1

89.6
77.1
70.8
85.4
56.3
79.2
83.3

92.0
56.0
88.0
76.0
68.0
76.0
80.0

88.5
100.0
66.7
95.0
56.7
82.6
87.0

3

87.5
64.6
75.0
66.7
20.8
58.3
95.8

80.0
80.0
80.0
100.0
60.0
80.0
100.0

44.4
20.0
26.7
23.8
7.7
17.4
71.4

1

87.5
77.1
79.2
85.4
75.0
91.7
87.5

89.0
56.0
60.0
88.0
76.0
84.0
84.0

88.0
100.0
100.0
84.0
76.0
100.0
91.3

0.9

2

3

100.0
93.8
100.0
100.0
79.2
97.9
100.0

100.0
88.0
100.0
100.0
68.0
96.0
100.0

100.0
100.0
100.0
100.0
89.5
100.0
100.0

75.0
60.4
72.9
64.6
14.6
58.3
100.0

80.0
80.0
80.0
80.0
80.0
80.0
100.0

26.7
18.2
25.0
20.0
9.1
17.4
100.0

injection, an attacker modiﬁes the RTP that users receive to
alter their demand. Through a direct load manipulation attack,
an attacker hacks and alters a users load proﬁle directly. In
both these attacks, aggregate load from the grid is modiﬁed
which then can alter future prices or demand. We showcase
how these two modes of attacks are equivalent and introduce
three ways an attack can occur. The ﬁrst type is a ramp attack,
the second is a sudden attack, and the third is a point attack.
We simulate these type of attacks and review several methods
to detect them.

We simulate and examine load-price data under different
levels of DSM participation with three types of additive
attacks: ramp, sudden, and point attacks. We applied sequential
change point and supervised learning methods for detection of
DSM attacks. Results conclude that higher amounts of DSM
participation can exacerbate attacks but also lead to better de-
tection of such attacks, point attacks are the hardest to detect,
and supervised learning methods produce results on par or
better than sequential detectors. Due to the speculative nature
of these type of attacks, we plan to look into many different
issues for future work. New directions include expanding our
model to incorporate day ahead pricing and DSM scheduling,
adding models of cost and utility on for a customer and ISO,
expanding our model taking into account grid topology, and
modeling advanced attack goals such as system failure by
power line overload.

the simulations, experiments, and sequential detectors were
done in Python 3.6. Implementation for SARIMA forecasts
was done using the Python package Statsmodels [35], the
supervised learning methods and confusion evaluation metrics
were implemented using the Scikit-Learn Python package [36],
and ROC curves were created using the Matplotlib Python
package [37]. All classiﬁers used default hyperparameters
from Scikit-Learn. We compiled all code and data used in
our work, into a Python package titled LehighDSM which is
publicly available on GitHub [38].

Experimental results from the six scenarios are reported
in Table II, in the form of accuracy, recall, and precision
metrics, and Fig. 12 which showcases six ROC curves, one
for each scenario. All performance measures in Table II, were
calculated using the best thresholds found in the ROC curves
by searching for the shortest distance from each curve to the
corner (0,1). As seen in Fig. 12(c,f) type 3 attacks, under any
DSM level, had the lowest detection rates across thresholds
with ANN being the worst performer. In Fig. 12(a,d) LR
yielded the best performance with GNB, and again ANN being
the worst. Type 2 attacks in Fig. 12(b,e) resulted in the best
detection with CUSUM, LR, GNB and GBC having perfect
performance.

With the results from Table II, we have the following
conclusions; demonstrated ﬁndings imply that detection of
attacks has a higher accuracy with higher levels of DSM
participation. This occurs since higher DSM penetration results
in more aggregated attacks. However, we note that an attacker,
if having perfect knowledge of the grid could decrease their
intensity and make detection more difﬁcult. Furthermore,
supervised learning classiﬁers performance on average was on
par or better than sequential detection methods. LR detector
had the highest accuracy for a lower level of DSM usage, while
ANNs performed the worst in all scenarios. This highlights the
power of linear detection methods over nonlinear. Point attacks
resulted in the poorest detection with the CUSUM detector
having the best performance. Type 2 attacks had higher recall
and precision across all detectors for both levels of DSM. This
is because a sudden attack shifts the mean of the data as a
constant over time, which is more identiﬁable, yielding fewer
false positives and more true positives.

VIII. CONCLUSION
In this work, we study the exploitation of the hypothetical
premise of the feedback between future cyber-enabled DSM
programs, on the consumer side, and dynamic RTP on the
utility side. An attacker with exploitive economic or nefarious
intentions, such as causing efﬁciency loss of energy provi-
sion, can take advantage of the dependency between dynamic
pricing and DSM load control. The utility modiﬁes prices
in response to forecasted demand in order to push realized
load up or down. This is done to achieve some target load
level with the goal to reduce peak load or achieve some other
DSM objective. On the user side, cyber DSM programs then
autonomously respond to prices to adjust certain portions of
a users load up or down with some given elasticity.

We propose two modes of attacks, false price data injec-
tions, and direct load manipulation. Under a false price data

14

[25] D. N. Politis, H. White, Automatic block-length selection for the
dependent bootstrap, Econometric Reviews 23 (1) (2004) 53–70.
[26] P. R. Thimmapuram, J. Kim, A. Botterud, Y. Nam, Modeling and
simulation of price elasticity of demand using an agent-based model,
in: Innovative Smart Grid Technologies (ISGT), 2010, IEEE, 2010, pp.
1–8.

[27] G. Liang, J. Zhao, F. Luo, S. R. Weller, Z. Y. Dong, A review of false
data injection attacks against modern power systems, IEEE Transactions
on Smart Grid 8 (4) (2017) 1630–1638.

[28] A. Tartakovsky, I. Nikiforov, M. Basseville, Sequential analysis: Hypoth-
esis testing and changepoint detection, Chapman and Hall/CRC, 2014.
[29] S. Key, Fundamentals of statistical signal processing, volume ii: Detec-

tion theory (1993).

[30] R. C. B. Hink, J. M. Beaver, M. A. Buckner, T. Morris, U. Adhikari,
S. Pan, Machine learning for power system disturbance and cyber-attack
discrimination, in: 2014 7th International symposium on resilient control
systems (ISRCS), 2014, pp. 1–8.

[31] M. Ozay, I. Esnaola, F. T. Y. Vural, S. R. Kulkarni, H. V. Poor,
Machine learning methods for attack detection in the smart grid, IEEE
transactions on neural networks and learning systems 27 (8) (2016)
1773–1786.

[32] M. Esmalifalak, L. Liu, N. Nguyen, R. Zheng, Z. Han, Detecting stealthy
false data injection using machine learning in smart grid, IEEE Systems
Journal 11 (3) (2017) 1644–1652.

[33] C. Bishop, Pattern recognition and machine learning, Pattern Recogni-

tion and Machine Learning (2006).

[34] G. James, D. Witten, T. Hastie, R. Tibshirani, An introduction to

statistical learning, Vol. 112, Springer, 2013.

[35] S. Seabold, J. Perktold, Statsmodels: Econometric and statistical mod-
in: Proceedings of the 9th Python in Science

eling with python,
Conference, Vol. 57, SciPy society Austin, 2010, p. 61.

[36] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion,
O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, et al.,
Scikit-learn: Machine learning in python, Journal of machine learning
research 12 (Oct) (2011) 2825–2830.

[37] J. D. Hunter, Matplotlib: A 2d graphics environment, Computing in

science & engineering 9 (3) (2007) 90–95.

[38] K. Hatalis, Lehighdsm python package, https://github.com/ (2019).

REFERENCES

[1] A. Faruqui, S. Sergici, Household response to dynamic pricing of
electricity-a survey of the empirical evidence, Available at SSRN
1134132 (2010).

[2] D. Grochocki, J. H. Huh, R. Berthier, R. Bobba, W. H. Sanders, A. A.
C´ardenas, J. G. Jetcheva, Ami threats, intrusion detection requirements
and deployment recommendations, in: 2012 IEEE Third International
Conference on Smart Grid Communications (SmartGridComm), Cite-
seer, 2012, pp. 395–400.

[3] A. R. Khan, A. Mahmood, A. Safdar, Z. A. Khan, N. A. Khan,
Load forecasting, dynamic pricing and dsm in smart grid: A review,
Renewable and Sustainable Energy Reviews 54 (2016) 1311–1322.
[4] P. Palensky, D. Dietrich, Demand side management: Demand response,
loads, IEEE transactions on

intelligent energy systems, and smart
industrial informatics 7 (3) (2011) 381–388.

[5] T. Logenthiran, D. Srinivasan, T. Z. Shun, Demand side management in
smart grid using heuristic optimization, IEEE transactions on smart grid
3 (3) (2012) 1244–1252.

[6] A.-H. Mohsenian-Rad, V. W. Wong, J. Jatskevich, R. Schober, A. Leon-
Garcia, Autonomous demand-side management based on game-theoretic
energy consumption scheduling for the future smart grid, IEEE transac-
tions on Smart Grid 1 (3) (2010) 320–331.

[7] L. Gelazanskas, K. A. Gamage, Demand side management in smart
grid: A review and proposals for future direction, Sustainable Cities and
Society 11 (2014) 22–30.

[8] A. C. Batista, L. S. Batista, Demand side management using a multi-
criteria epsilon-constraint based exact approach, Expert Systems with
Applications 99 (2018) 180–192.

[9] G. Dudek, Pattern-based local linear regression models for short-term
load forecasting, Electric Power Systems Research 130 (2016) 139–147.
[10] S. S. Pappas, L. Ekonomou, P. Karampelas, D. Karamousantas, S. Kat-
sikas, G. Chatzarakis, P. Skaﬁdas, Electricity demand load forecasting of
the hellenic power system using an arma model, Electric Power Systems
Research 80 (3) (2010) 256–264.

[11] W. Christiaanse, Short-term load forecasting using general exponential
smoothing, IEEE Transactions on Power Apparatus and Systems (2)
(1971) 900–911.

[12] J. W. Taylor, Triple seasonal methods for short-term electricity demand
forecasting, European Journal of Operational Research 204 (1) (2010)
139–152.

[13] A. Kavousi-Fard, H. Samet, F. Marzbani, A new hybrid modiﬁed ﬁreﬂy
algorithm and support vector regression model for accurate short term
load forecasting, Expert systems with applications 41 (13) (2014) 6047–
6056.

[14] A. Baliyan, K. Gaurav, S. K. Mishra, A review of short term load
forecasting using artiﬁcial neural network models, Procedia Computer
Science 48 (2015) 121–125.

[15] W. Kong, Z. Y. Dong, Y. Jia, D. J. Hill, Y. Xu, Y. Zhang, Short-term
residential load forecasting based on lstm recurrent neural network, IEEE
Transactions on Smart Grid (2017).

[16] G. Dudek, Short-term load forecasting using random forests, in: Intelli-

gent Systems’ 2014, Springer, 2015, pp. 821–828.

[17] S. Li, L. Goel, P. Wang, An ensemble approach for short-term load
forecasting by extreme learning machine, Applied Energy 170 (2016)
22–29.

[18] S. Chakraborty, T. Ito, T. Senjyu, Smart pricing scheme: A multi-layered
scoring rule application, Expert Systems with Applications 41 (8) (2014)
3726–3735.

[19] N. Nazar, M. Abdullah, M. Hassan, F. Hussin, Time-based electricity
pricing for demand response implementation in monopolized electricity
market, in: Research and Development (SCOReD), 2012 IEEE Student
Conference on, IEEE, 2012, pp. 178–181.

[20] R. D. Zimmerman, C. E. Murillo-S´anchez, D. Gan, Matpower: A matlab
power system simulation package, Manual, Power Systems Engineering
Research Center, Ithaca NY 1 (1997).

[21] D. P. Chassin, K. Schneider, C. Gerkensmeyer, Gridlab-d: An open-
source power systems modeling and simulation environment,
in:
Transmission and distribution conference and exposition, 2008. t&d.
IEEE/PES, IEEE, 2008, pp. 1–5.

[22] S. Barker, A. Mishra, D. Irwin, E. Cecchet, P. Shenoy, J. Albrecht,
Smart*: An open data set and tools for enabling research in sustainable
homes, SustKDD, August 111 (112) (2012) 108.

[23] P. J. Brockwell, R. A. Davis, M. V. Calder, Introduction to time series

and forecasting, Vol. 2, Springer, 2002.

[24] D. Gamerman, H. F. Lopes, Markov chain Monte Carlo: stochastic
simulation for Bayesian inference, Chapman and Hall/CRC, 2006.

