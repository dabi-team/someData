Enhancing Robustness of Deep Neural Networks Against Adversarial Malware
Samples: Principles, Framework, and AICS’2019 Challenge

Deqiang Li 1,4, Qianmu Li 1, Yanfang Ye 2, Shouhuai Xu 3

1 School of Computer Science and Engineering, Nanjing University of Science and Technology
2 Department of Computer Science and Electrical Engineering, West Virginia University
3 Department of Computer Science, University of Texas at San Antonio
4 School of Computing and Information Sciences, Florida International University
lideqiang@njust.edu.cn, qianmu@njust.edu.cn, yanfang.ye@mail.wvu.edu, shouhuai.xu@utsa.edu

0
2
0
2

p
e
S
6
1

]

R
C
.
s
c
[

3
v
8
0
1
8
0
.
2
1
8
1
:
v
i
X
r
a

Abstract

Malware continues to be a major cyber threat, despite the
tremendous effort that has been made to combat them. The
number of malware in the wild steadily increases over time,
meaning that we must resort to automated defense techniques.
This naturally calls for machine learning based malware de-
tection. However, machine learning is known to be vulner-
able to adversarial evasion attacks that manipulate a small
number of features to make classiﬁers wrongly recognize a
malware sample as a benign one. The state-of-the-art is that
there are no effective countermeasures against these attacks.
Inspired by the AICS’2019 Challenge, we systematize a num-
ber of principles for enhancing the robustness of neural net-
works against adversarial malware evasion attacks. Some of
these principles have been scattered in the literature, but oth-
ers are proposed in this paper for the ﬁrst time. Under the
guidance of these principles, we propose a framework and an
accompanying training algorithm, which are then applied to
the AICS’2019 challenge. Our experimental results have been
submitted to the challenge organizer for evaluation.

1

Introduction

Malware remains a big threat to cyber security despite com-
munities’ tremendous countermeasure efforts. For example,
Symantec (Symantec 2018) reports seeing 355,419,881 new
malware variants in year 2015, 357,019,453 in year 2016,
and 669,974,865 in year 2017. Worse yet, there is an increas-
ing number of malware variants that attempted to undermine
anti-virus tools and indeed evaded many malware detection
systems (CISCO 2018).

In order to cope with the increasingly severe situation, we
have to resort to machine learning techniques for automat-
ing the detection of malware in the wild (Ye et al. 2017).
However, machine learning based techniques are vulnera-
ble to adversarial evasion attacks, by which an adaptive at-
tacker perturbs or manipulates malware samples into adver-
sarial samples that would be detected as benign rather than
malicious (see, for example, (B. Biggio and et al. 2013;
Al-Dujaili et al. 2018; Hou et al. 2018; Chen, Ye, and
Bourlai 2017)).1 The state-of-the-art is that there are many

1The term “adversarial example” is often used in the literature.
We instead propose using the term “adversarial sample” because it
is arguably more natural in the context of malware detection, for
which we already get used to terms like “benign sample” and “ma-

attacks, but the problem of effective defense is largely open.
This is indeed the context in which the AICS’2019 malware
classiﬁcation challenge is proposed.

Our Contributions
In this paper, we make the following contributions. First, we
propose, to the best of our knowledge, the ﬁrst systematic
framework that aims to enhance the robustness of malware
classiﬁers against adversarial evasion attacks. The frame-
work is designed under the guidance of a set of principles,
some of which are known but scattered in the literature (e.g.,
using an ensemble of classiﬁers), but others are explicitly
proposed for the ﬁrst time, such as the following. We pro-
pose using the capability of the optimal white-box attack to
bound the capability of any (cid:96)p (p ≥ 1) norm based gray-box
attack from above, and propose using semantics-preserving
representation learning for malware classiﬁcation. Both the
principles and framework should be seen as a starting point
and systematically reﬁned in the future.

Second, we apply the framework to address the AICS
2019 malware classiﬁcation challenge. Among the 3,133
testing samples in 5 classes, our classiﬁer predicts 2,245
samples in class ‘0’, 461 samples in class ‘1’, 162 samples
in class ‘2’, 176 samples in ‘3’, and 89 samples in class ‘4’.
Since we do not know the ground truth of the testing set,
which has yet to be announced by the challenge organizer,
we cannot tell the effectiveness of the framework at the time
for writing the present paper. Instead, we have submitted our
classiﬁcation result to the challenge organizer.

Related Work
Since the present paper focuses on defense against adversar-
ial malware classiﬁcation, we review existing studies in this
topic by emphasizing two complementary approaches: input
prepossessing and adversarial training.

Input Prepossessing
Input prepossessing transforms the
input to a different representation with the aim to reduce the
degree of perturbation to the original input. For example,
Random Feature Nulliﬁcation (RFN) randomly nulliﬁes fea-
tures in the training and testing phases (Wang et al. 2017);

licious sample”. Corresponding to these two kinds of samples, an
adversarial sample is a malicious sample that would be misclassi-
ﬁed as a benign one.

 
 
 
 
 
 
hash transformation leverages a locality-preservation prop-
erty to reduce the degree of perturbation to the original in-
put (Li et al. 2018); DroidEye (Chen et al. 2018) quantizes
binary feature representation via count featurization.

Our framework uses binarization to reduce the degree of
perturbation, which is inspired by the idea of feature squeez-
ing in the context of image processing (Xu, Evans, and Qi
2017). This effectively reduces the perturbation space be-
cause there are now only two kinds of perturbations: ﬂip-
ping from ‘1’ to ‘0’ or ﬂipping ‘0’ to ‘1’. This means that
we effectively consider the number of perturbations but not
the ‘scale’ of perturbation (i.e., reducing the sensitivity of
classiﬁers to small degrees of perturbation).

Adversarial Training Adversarial training augments the
training data with adversarial samples to improve the robust-
ness of classiﬁers. This idea has been independently pro-
posed in different application settings, including (Goodfel-
low, Shlens, and Szegedy ; Kurakin, Goodfellow, and Ben-
gio 2016b) and (Xu et al. 2014; Xu et al. 2013). In partic-
ular, it has been proposed to consider adversarial training
with the optimal attack, which in a sense corresponds to the
worst-case scenario and therefore could lead to classiﬁers
that are robust against the non-optimal attacks (Al-Dujaili
et al. 2018). The challenge is of course to ﬁnd the optimal
attack. In our framework, we use this approach to regular-
ize our model and seek the optimal attack via the gradient
descent method.

2 Review on Adversarial Evasion Attacks

against Malware Classiﬁcation

Basic Idea

Consider a classiﬁer f : X → Y that takes an unperturbed
malware instance x ∈ X as input and correctly outputs its
label y ∈ Y. Given x that is to be classiﬁed, the adversarial
evasion attack problem is to manipulate or perturb x to an
adversarial malware sample x(cid:48) such that the malicious func-
tionality of x is preserved while satisfying:

s.t.

f (x(cid:48)) (cid:54)= f (x),
xlb ≤ x(cid:48) ≤ xub
||x(cid:48) − x|| ≤ (cid:15)

(1)

(2)

(3)

where xlb (xub) is the element-wise lower (upper) bound of
feature vectors, the box-constraint Eq.(2) means that the ma-
nipulation or perturbation cannot violate the constraints im-
posed by the feature deﬁnitions and u ≤ v means that each
element of u is no greater than the corresponding element
in v, and || · || refers to a metrics of interest (e.g., (cid:96)p norm
for some p ∈ {0, 2, ∞}) and Eq.(3) says that perturbations
may be bounded by a given (cid:15) in the norm. The perturbation
vector is δx = x(cid:48) − x.

In the present paper, we focus on classiﬁers f that are
learned as neural networks, F : X → Ro, which output
(softmax) the probability mass function over o classes or la-
bels. Since the constraint given by Eq.(1) is hard to formu-
late, researchers proposed considering two scenarios: in the

case of non-targeted attacks, maximize the cost of classify-
ing the x(cid:48) as y

max
x(cid:48)

L(F(x(cid:48)), y);

(4)

in the case of targeted attacks, minimize L(F(x(cid:48)), yt),
where yt (yt (cid:54)= y) is a target label given by the attacker.

Threat Model
As elaborated below, a threat model against malware clas-
siﬁers is speciﬁed by what the attacker knows, what the at-
tacker can do, and how the attacker wages the attack.

What the attacker knows There are three kinds of mod-
els from this perspective. A black-box attacker knows noth-
ing about classiﬁer f except what is implied by f ’s re-
sponses to the attacker’s queries. A white-box attacker
knows all kinds of information about f , including its model
parameters. A gray-box attacker knows an amount of infor-
mation about f that resides in between the preceding two
extremes. For example, the attacker may know the training
set or feature deﬁnitions.

What the attacker can do In evasion attacks, the at-
tacker only can manipulate the testing data, while obey-
ing some constraints. One constrain is to preserve the ma-
licious functionality of a malware. Although the attacker
can manipulate a malware sample by inserting, deleting,
and replacing features (Dang, Huang, and Chang 2017;
Anderson et al. 2017), a simplifying assumption is to con-
sider insertion only (i.e., ﬂipping a feature value from ‘0’
to ‘1’ (B. Biggio and et al. 2013; Nedim rndic 2014;
Grosse et al. 2017; Wang et al. 2017; Rosenberg et al. 2017;
Chen, Hou, and Ye 2017; Al-Dujaili et al. 2018). The other
constraint is to maintain the relation between features. Us-
ing the ACIS’2019 malware classiﬁcation challenge as an
example, we note that n-gram (uni-gram, bi-gram, and tri-
gram) features reﬂect sequences of Windows system API
calls. This means that when the attacker inserts an API call
into a malware sample, several features related to this API
call will need to be changed according to the deﬁnition of
n-gram features.

How the attacker wages the attack Researchers generate
adversarial malware samples using various machine learning
techniques such as genetic algorithms, reinforcement learn-
ing, generative networks, feed-forward neural networks, de-
cision trees, and Support Vector Machine (SVM) (Xu, Qi,
and Evans 2016; Anderson et al. 2017; Hu and Tan 2017;
B. Biggio and et al. 2013; Xu et al. 2014; Nedim rndic 2014;
Carlini and Wagner 2017). In order to generate adversar-
ial malware samples effectively and efﬁciently, attacks of-
ten leverage the gradients with respect to inputs of neural
network (Goodfellow, Shlens, and Szegedy ; Papernot et al.
2016).

3 Framework

Guiding Principles
The design of the framework is guided by a number of
principles. These principles are geared towards neural net-
work classiﬁers, which are chosen as our focus because deep

learning techniques are increasingly employed in malware
defense, but their vulnerability to adversarial evasion attacks
has yet to be tackled (Raff et al. 2017).

Principle 1: Knowing the enemy This principle says that
we should strive to extract useful information about the data
as much as we can. This kind of information will offer in-
sights into designing countermeasures. For example, we can
ask questions of the following kinds:
• Is the training set imbalanced? If the training set is not
balanced, various methods need to be considered for alle-
viating the imbalance issue. For example, the widely-used
oversampling is to expand the samples of the “minority”
classes via random and repetitive sampling (Buda, Maki,
and Mazurowski 2018).

• Are there sufﬁciently many samples? This issue is impor-
tant especially when there are a large number of features
and when neural networks are considered. One widely-
used method is data augmentation, which generates new
samples by making slight modiﬁcations on original sam-
ples (Lemley, Bazrafkan, and Corcoran 2017).

• Are there simple indicators of adversarial samples? If
there are simple indicators of adversarial samples, we can
possibly design tailored classiﬁers for them.

Principle 2: Bridging the gap between countermeasures
against gray-box attacks and countermeasures against
white-box attacks
In gray-box attacks, the attacker knows
some information about the feature set and therefore can
train a surrogate classiﬁer ˆf : X → Y from a training set
(where the realization of ˆf is a neural network ˆF) and lever-
age the transferability from ˆf to f to generate adversarial
samples. Consider an input x for which a gray-box attacker
generates perturbations using

ˆδx ∈ max
||ˆδx||≤(cid:15)

L(ˆF(x + ˆδx), y),

the change to the loss of f incurred by ˆδx is

|∆L| =

=

=

(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)L(F(x + ˆδx), y) − L(F(x), y)
(cid:12)
(cid:12)
(cid:90) ˆδx
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:79)L(F(x + tˆδx), y)(cid:62)ˆδxdt
(cid:12)
(cid:12)

(cid:79)L(F(x + δ), y)dδ

0
(cid:90) 1

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

0
≤ (cid:15) sup
||δ||≤(cid:15)

(cid:107)(cid:79)L(F(x + δ), y)(cid:107)∗ ,

where “|| · ||∗” means the dual norm of || · ||. The preceding
observation indicates that corresponding to the same (and
potentially large) perturbation upper bound (cid:15), the loss in-
curred by gray-box attacks is upper bounded by the loss in-
curred by white-box attacks. This suggests us to focus on
the robustness of classiﬁer f against the optimal white-box
attack because it accommodates the worst-case scenario. It
is worth mentioning that our observation, which applies to
an arbitrary perturbation upper bound (cid:15), enhances an ear-
lier insight that holds for a small perturbation upper bound (cid:15)
(Demontis et al. 2018).

Principle 3: Using ensemble of classiﬁers rather than a
single one (i.e., not putting all eggs in one basket) This
is suggested by the observation that no single classiﬁer may
be effective against all kinds of evasions. Worse yet, we may
not know the kinds of evasions the attacker uses to generate
adversarial samples. Therefore, we propose using ensemble
learning to enhance the robustness of neural networks based
malware classiﬁers.

An ensemble can be constructed by many methods (e.g.,
bagging, boosting or using multiple classiﬁers). The gener-
alization error of an ensemble decreases signiﬁcantly with
the ensemble size when the base classiﬁers are effective and
mutual independent (Hoeffding 1963). For example, ran-
dom subspace (Ho 1998) is seemingly particularly suitable
for formulating malware classiﬁer ensembles because the
dimension of malware feature vectors is often very high,
which indicates a high vulnerability of malware classiﬁers
to adversarial samples (Simon-Gabriel et al. 2018).

Since the output of a neural network (with softmax) is
the probability mass function over the classes in question,
the ﬁnal prediction result is produced according to these
probabilities. Formally, an ensemble fen : X → Y con-
tains a set of neural network classiﬁers {fi}l
i=1, namely
fen = {fi : X → Y; (1 ≤ i ≤ l)}. Given a testing sample
x, each classiﬁer fi deﬁnes a conditional probability on pre-
dicting y : P (y|x, fi). We treat the base classiﬁer equally,
and the voting method is

P (y|x) =

1
l

l
(cid:88)

P (y|x, fi),

(5)

i=1
where P (y|x) is the probability that the ensemble predicts
x as the label y.

Principle 4: Using input transformation to reduce the
degree of perturbation caused by evasion manipulation
In the context of malware classiﬁcation, input transforma-
tion techniques, such as adversarial feature selection (Zhang
et al. 2016) and random feature nulliﬁcation (Wang et al.
2017), can reduce the degree of perturbation in adversar-
ial samples so as to improve the robustness of classiﬁers. In
typical applications, the defender does not know what kinds
of evasion manipulations are used by the attacker to gen-
erate adversarial samples, including the number of features
that are manipulated by the attacker. Therefore, we propose
considering a spectrum of evasion manipulations, from ma-
nipulating a few features (measured by, for example, the (cid:96)0
norm) to manipulating a large number of features (but the
magnitude of these manipulations may be small and there-
fore measured for example by the (cid:96)∞ norm). Moreover, we
may give higher weights to the transformation techniques
that can simultaneously reduce the degrees of perturbations
in terms of the (cid:96)∞ norm, (cid:96)0 norm, or (cid:96)2 norm. This sug-
gests us to propose using the binarization technique: When
the feature value of the ith feature, denoted by xi, is smaller
than a threshold Θi, we binarize xi to 0; otherwise, we bi-
narize xi to 1. The threshold Θi may be set as the median
value of the ith feature. This input transformation reduces
the perturbation space to two kinds: ﬂipping ‘0’ to ‘1’ and
ﬂipping ‘1’ to ‘0’.

where p(·) is the probability density function. Eq.(8) says
that representations of a well-trained denoising autoencoder
are insensitive to x because of the weighted average from the
neighbourhood of x, which is reminiscent of the attention
mechanism (Luong, Pham, and Manning 2015).

Principle 5: Using adversarial training to “inject” im-
munity into classiﬁers Adversarial training (also known
as proactive training (Xu et al. 2014)) incorporates some
adversarial samples into the training set. Various kinds of
heuristic training strategies have been proposed (see, e.g.,
(Grosse et al. 2017; Szegedy et al. 2013; Xu et al. 2014;
Goodfellow, Shlens, and Szegedy ; Kurakin, Goodfellow,
and Bengio 2016a). However, these strategies typically deal
with some speciﬁc evasion methods and therefore are not
known to effective against other evasion methods. Inspired
by robust optimization, (Madry et al. 2017) propose solving
the saddle point problem so as to improve the robustness of
neural networks against a wide range of adversarial samples.
This strategy has been adapted to the context of malware
classiﬁcation in (Al-Dujaili et al. 2018).

The preceding discussion suggests us to train neural net-
works that can accommodate the optimal attack and the un-
perturbed examples on distribution D:
(cid:20)

(cid:21)
L(F(x + δx), y) + L(F(x), y)

E(x,y)∈D

,

min
θ

max
δx≤(cid:15)

(6)
where L(·, ·) is the cross-entropy and θ denotes the param-
eters of neural network F (as the realization of fi). A key
issue is how to deal with the optimal attack. (Madry et al.
2017) showed that the projected gradient descent (PGD) can
solve the inner maximum problem effectively for calculating
the ﬁrst-order adversarial samples. Inspired by this insight,
we leverage gradient descent on the negative cross-entropy
to generate adversarial samples. In order to avoid local min-
ima, we can randomly repeat several times for each point
and pick the point minimizing the negative cross-entropy as
the initial point.

Principle 6: Using semantics-preserving representations
Adversarial malware samples must assure that a manipu-
lated sample is still a malware (i.e., preserving the mali-
cious functionality of the original malware sample). This
suggests us to strive to learn neural network models that are
sensitive to malware semantics, but not the perturbations be-
cause the latter must preserve the malicious functionality of
the original malware. Speciﬁcally, we propose using denois-
ing autoencoder to learn semantics-preserving representa-
tions because they can make neural network less sensitive to
perturbations. A denoising autoencoder ae = d ◦ e uniﬁes
two components: an encoder e : X → H that maps an in-
put M (x) to a latent representation r ∈ H and a decoder
d : H → X that reconstructs x from r, where the H is the
latent representation space and M refers to some operations
applied to x (e.g., adding Gaussian noises to x). (Vincent
et al. 2010) showed that the lower bound of the mutual in-
formation between x and r is maximized when the recon-
struction error is minimized. In the case of Gaussian noise
(cid:15) ∼ N (0, σ2) and reconstruction loss

E(cid:15)∼N (0,σ2) (cid:107)ae(x + (cid:15)) − x)(cid:107)2
2 ,
(Alain and Bengio 2014) showed that the optimal ae∗(x) is

(7)

ae∗(x) =

E(cid:15) [p(x − (cid:15))(x − (cid:15))]
E(cid:15) [p(x − (cid:15))]

,

(8)

Figure 1: Illustration of neural network for classiﬁcation.
Blue dashed box contains the learned encoder, which and the
output layer comprise the learned neural network classiﬁer.
The model parameters are tuned to minimize the supervised
loss function.

Figure 1 depicts how the learned encoder is leveraged for
classiﬁcation, where the encoder structure is the same as de-
scribed in (Vincent et al. 2010). Two examples of noise are:
• Salt-and-pepper noise: A fraction α of the elements of
original sample x are randomly selected, and then set their
values as their respective minimum or maximum (i.e., ef-
fectively ﬂipping ‘1’ to ‘0’ or ﬂipping ‘0’ to ‘1’).

• Perturbation δx: A perturbation δx is added to x such that
classiﬁer fi misclassiﬁes adversarial sample x(cid:48) = x + δx.
Note that when an input transformation technique mentioned
above is used together with a denoising autoencoder, the for-
mer should be applied ﬁrst and the latter is applied to the
transformed input.

Given

x1, x2, · · · , xN ,
toencoder is

a mini-batch

of N training
samples
the empirical risk of a denoising au-

Lae =

1
N

i=1

N
(cid:88)

(cid:104)
(cid:107)ae(M (xi)) − xi(cid:107)2

2 + (cid:107)ae(x(cid:48)

i) − xi(cid:107)2

2

(cid:105)

,

(9)
where M (·) denotes adding salt-and-pepper noise on x and
x(cid:48)
i is the adversarial sample generated via adversarial train-
ing.

Turning principles into a framework
The principles discussed above guide us to propose a frame-
work for adversarial malware classiﬁcation, which is high-

…Supervised loss function 𝐱𝑖 𝑖=1𝑁∪ 𝐱𝑖′ 𝑖=1𝑁  𝑦𝑖 𝑖=1𝑁 EncoderOutput layerFigure 2: Overview of the proposed malware classiﬁcation framework. In the training phase, an ensemble of l neural network
classiﬁers are trained, with each classiﬁer hardened by three countermeasures (i.e., input transformation, semantics-preserving,
and adversarial training using gradient descent on the transformed data). In the testing phase, the label of a sample is determined
according to the result of voting by the l classiﬁers.

lighted in Figure 2 and elaborated below. Speciﬁcally, we
need to examine whether or not the input has some issues
(e.g., imbalanced data) that need to be coped with via an ap-
propriate prepossessing (according to Principle 1). We pro-
pose using an ensemble fen of classiﬁers {fi}l
i=1 (according
to Principle 3), which are trained from random subspace of
the original feature space. Each classiﬁer fi is hardened by
three countermeasures: input transformation via binarization
(according to Principle 4); adversarial training models on the
optimal attacks using gradient descent (green arrows in Fig-
ure 2, according to Principle 2 and Principle 5); semantics-
preservation is achieved via an encoder and a decoder (ac-
cording to Principle 6). In order to attain adversarial training
and at the same time semantics-preservation, we learn clas-
siﬁer fi via block coordinate descent to optimize different
components of the model.

Putting the pieces together, we obtain Algorithm 1 for
training individual classiﬁers. The training procedure con-
sists of the following steps. (i) Given a training set (X, Y ),
we randomly select a ratio Λ of sub-features to the fea-
ture set, and then transform X into X via the binariza-
tion technique discussed above. (ii) We sample a mini-batch
{xi, yi}N
i=1 from (X, Y ), and calculate the adversarial sam-
ples x(cid:48)
i=1 according to Lines 5-11 in Algo-
rithm 1). (iii) We pass the {M (xi)}N
i=1 and {x(cid:48)
i=1 through
the denoising autoencoder to compute the reconstruction
loss with respect to the target {xi}N
i=1 via Eq.(9), and up-
date the parameters of the denoising autoencoder. (iv) We
pass the {xi}N
i=1 together through the neural
networks to compute the classiﬁcation error with respect to

i for xi ∈ {xi}N

i=1 and {x(cid:48)

i}N

i}N

Algorithm 1: Training classiﬁer fi
Input: Training set (X, Y ), maximum training epoch
Nepoch, mini-batch size N , and the number of
repeat times K.

1 Cope with issues like imbalanced input;
2 Select a ratio Λ of sub-features to the feature set;
3 Transform input X to X via binarization;
4 for epoch = 0 to Nepoch do
5

Sample a mini-batch {xi, yi}N
for repeat = 0 to K do

i=1 from the (X, Y );

Apply slight salt-and-pepper noise to {xi}N
Calculate perturbations {δrepeat
xi
manipulating sample {x(cid:48)
i}N
i=1;
i}N
Project {x(cid:48)

i=1 into the binary space;

}N
i=1 for

i=1;

end
Select the best perturbation δxi from δrepeat
0 ≤ repeat < K for xi (1 ≤ i ≤ N ) so as to
minimize the negative cross-entropy;

xi

where

Calculate the reconstruction loss via Eq.(9);
Backpropagate the loss and update the denoising

autoencoder parameters;

Calculate the adversarial training loss via Eq.(6);
Backpropagate the loss and update classiﬁer

6

7

8

9

10

11

12

13

14

15

parameters;

16 end

𝐱 𝐱 Voting𝑦 …SampleClassifier 𝑓1 Classifier 𝑓1 Target labelsClassifier 𝑓𝑙 Ensemble𝑓𝑒𝑛 𝑓𝑙 Classifier TrainingTestingForwardGradientTraining dataloss functionTransformationTransformeddata…EncoderSemantics-preservationDecoderloss functionTransformationTransformeddata…EncoderSemantics-preservationDecoderpreprocessing…the ground truth label {yi}N
i=1 via Eq.(6), and update the
parameters of the classiﬁer via backpropagation. Note that
Steps (ii)-(iv) are performed in a loop. The output of the
training algorithm is a neural network classiﬁer.

4 Experiment: Applying the Framework to

the AICS’2019 Challenge

The AICS’2019 Challenge

The challenge is in the context of adversarial malware clas-
siﬁcation (i.e., labeling the class to which a malware sam-
ple belongs or multiclass classiﬁcation), namely construct-
ing evasion-resistant, machine learning based malware clas-
siﬁers. The dataset, including both the training set and the
testing set, consists of Windows malware samples (or in-
stances), each of which belongs to exactly one of the fol-
lowing ﬁve classes: Virus, Worm, Trojan, Packed malware,
and AdWare.

For each sample, the features are collected by the chal-
lenge organizer via dynamic analysis, including the Win-
dows API calls and further processed unigram, bigram, and
trigram API calls. The feature names (e.g., API calls) and
the class labels are “obfuscated” by the challenge organizer
as integers, while noting the obfuscation preserves the map-
ping between the features and the integers representation of
them. For example, three API calls are represented by three
unique integers, say 101, 102, and 103; then, a trigram API
call “101;102;103” means a sequence of API calls 101, 102,
and 103. In total there are 106,428 features.

The testing set consists of adversarial samples and non-
adversarial samples (i.e., unperturbed malware samples).
Adversarial samples are generated by a variety of pertur-
bation methods, which are not known to the participating
teams. However, the ground truth labels of the testing sam-
ples are not given to the participating teams. This means that
the participating teams cannot calculate the accuracy of their
detectors by themselves. Instead, they need to submit their
classiﬁcation results (i.e., labels on the samples in the test-
ing set) to the challenge organizer, who will calculate the
classiﬁcation accuracy of each participating team.

Basic Analysis

As discussed in Principle 1 of the framework, our basic anal-
ysis aims to identify some basic characteristics that should
be taken into consideration when adapting Algorithm 1 to
this speciﬁc case study.

Is the training set imbalanced? The training set consists
of 12,536 instances, and the testing set consists of 3,133 in-
stances. The training set contains 8,678 instances in class
‘0’, 1,883 instances in class ‘1’, 771 instances in class ‘2’,
692 instances in class ‘3’, and 512 instances in class ‘4’. Fig-
ure 3 plots the histogram of the instances in the training set
according to the given labels of malware class (i.e., the ﬁve
malware classes that have been obfuscated as integers ‘0’,
‘1’, ‘2’, ‘3’, ‘4’). We can calculate the maximum ratio be-
tween the number of instances in different classes is 16.95,
indicating that the training set is highly imbalanced.

Figure 3: Histogram of the training set in malware classes.

In order to cope with the imbalance in the training set,
we use the Oversampling method to replicate randomly se-
lected samples from a class with a small number of sam-
ples. The replication process ends until the number of sam-
ples is comparable to that of the largest class (i.e., the class
with the largest number of samples), where “comparable”
is measured by a predeﬁned ratio. In order to see the effect
of this ratio, we use a 5-fold cross validation on the train-
ing set to investigate the impact of this ratio. The classiﬁer
consists of neural networks with two fully-connected lay-
ers (each layer having 160 neurons with the ReLU activa-
tion function), which are optimized via Adam (Kingma and
Ba 2014) with epochs 50, mini-batch size 128, learning rate
0.001. The model is selected when achieving the best Macro
F1 score on the validation set.

Table 1: Accuracy (%) and Macro F1 score (%) are reported
with a 95% conﬁdence interval with respect to the ratio pa-
rameter (%), where ‘—’ means learning a classiﬁer using the
original training dataset.

Ratio (%) Accuracy (%) Macro F1 (%)
85.52±1.12
85.47±1.04
84.87±1.07
84.87±1.00
84.62±1.01

93.20±1.04
92.86±0.75
92.38±1.00
92.21±0.60
92.48±1.12

—
30
40
50
60

Table 1 shows that the Macro F1 score decreases as the
oversampling ratio of minority classes increases. In order to
make each mini-batch of training samples contain samples
from all classes, which would be critical in muticlass classi-
ﬁcation, our experience suggests us to select the 30% ratio.

Are there sufﬁciently many samples? Machine learning,
especially deep learning, models need to be trained with
a “large” number of samples, where “large” is relative to
the number of features. In the challenge dataset, the train-
ing set contains 12,536 samples while noting that there are
106,428 features, which may lead to overﬁtting. To cope
with this, we note that adversarial training is a data augmen-
tation method (Goodfellow, Shlens, and Szegedy ), which
can be leveraged to regularize the resulting classiﬁers.

01234Class label02000400060008000Number of instancesAre there simple indicators of adversarial samples? In
the ﬁrst testing set published by the challenge organizer, we
see negative values for some features. These negative values
would indicate that they are adversarial samples. In the re-
vised testing set provided by the challenge organizer, there
are no negative feature values, meaning that there are no
simple ways to tell whether a sample is adversarial or not. In
spite of this, we can speculate the count of perturbed features
by comparing the number of nonzero entries corresponding
to the samples in the training set to their counterparts in the
testing set. It is important because the attack success rate
increases with the number of perturbed features.

Figure 4: Histogram of the normalized frequency of the
number of nonzero entries corresponding to samples in the
training set and their counterparts in the testing set. The
dashed line represents the mean value.

Figure 4 shows the normalized frequency of the number
of nonzero entries corresponding to the samples in the train-
ing set and their counterparts in the testing set. We observe
that their normalized frequencies are similar except that
some testing samples have more nonzero entries (> 1200).
Their mean values are much smaller than the input dimen-
sion (106, 428), suggesting that the average number of per-
turbed features may be small.

Classiﬁcation Result
For adversarial training, the gradient descent with respect
to the transformed input iterates 55 times via Adam op-
timizer (Kingma and Ba 2014) with learning rate 0.01.
The perturbed input is projected into the range [0, 1] and
rounded into binary space (i.e., binarization as discussed in
the framework). Since we do not have access to the malware
samples, we cannot tell whether a feature perturbation pre-
serves the malware functionality or not. We train 10 neural
network based classiﬁers to formulate an ensemble, includ-
ing 6 classiﬁers using the input transformation, adversarial
training, and semantics-preservation techniques discussed in
the framework, and the other 4 classiﬁers using the input
transformation and adversarial training techniques because
some samples may be perturbed without preserving the ma-
licious functionality in the training. The ratio for random
subspace method is set as Λ = 0.5. Each classiﬁer has two
fully-connected hidden layers (each layer having neurons
160), uses the ELU activation function, and is optimized
by Adam. The classiﬁcation result has been submitted to
AICS 2019 organizer for evaluation. More models and codes
are available at https://github.com/deqangss/

aics2019_challenge_adv_mal_defense.

5 Conclusion
We have systematized six principles for enhancing the ro-
bustness of neural network classiﬁers against adversarial
evasion attacks in the setting of malware classiﬁcation.
These principles guided us to design a framework, which
leads to a concrete training algorithm. We applied the train-
ing algorithm to the AICS’2019 challenge, and submitted
the classiﬁcation result to the challenge organizer for evalu-
ating the effectiveness of our framework.

The problem of adversarial malware detection has not re-
ceived the due amount of attention. We hope this paper will
inspire more research into this important problem. Future
research problems are abundant, such as: extending and re-
ﬁning the principles against evasion attacks, seeking princi-
ples to enhance robustness of adversarial malware detection
against poisoning attacks, designing more systematic frame-
works and more robust techniques against adversarial mal-
ware.
Acknowledgments. We thank the AICS’2019 challenge or-
ganizers for preparing the challenge. DL is supported by the
China Scholarship Council under Grant 201706840123. YY
and SX are supported in part by NSF Grant SaTC-1814825.
YY is additionally supported in part by NSF Grants CNS-
1618629, CNS-1814825 and OAC-1839909, NIJ 2018-75-
CX-0032, WV HEPC Grant (HEPC.dsr.18.5), and WVU
RSA Grant (R-844). SX is additionally supported in part by
ARO Grant W911NF-17-1-0566. The views and opinions
of the author(s) presented in the paper do not reﬂect, in any
sense, those of the funding agencies.

References
[Al-Dujaili et al. 2018] Al-Dujaili, A.; Huang, A.; Hemberg,
E.; and OReilly, U.-M. 2018. Adversarial deep learning for
robust detection of binary encoded malware. In 2018 IEEE
Security and Privacy Workshops (SPW), 76–82. IEEE.
[Alain and Bengio 2014] Alain, G., and Bengio, Y. 2014.
What
regularized auto-encoders learn from the data-
generating distribution. The Journal of Machine Learning
Research 15(1):3563–3593.
[Anderson et al. 2017] Anderson, H. S.; Kharkar, A.; Filar,
B.; and Roth, P. 2017. Evading machine learning malware
detection. Black Hat.
[B. Biggio and et al. 2013] B. Biggio, I. C., and et al., D. M.
2013. Evasion attacks against machine learning at test
In Machine Learning and Knowledge Discovery in
time.
Databases: European Conference, 387–402. Springer.
[Buda, Maki, and Mazurowski 2018] Buda, M.; Maki, A.;
and Mazurowski, M. A. 2018. A systematic study of the
class imbalance problem in convolutional neural networks.
Neural Networks 106:249–259.
[Carlini and Wagner 2017] Carlini, N., and Wagner, D. 2017.
In
Towards evaluating the robustness of neural networks.
2017 38th IEEE Symposium on Security and Privacy (SP),
39–57. IEEE.

030060090012001500Number of nonzero entry0.0000.0010.0020.0030.0040.005Normalized frequencyMean: 503.92Training set030060090012001500Number of nonzero entryMean: 556.72Testing setI.

[Chen et al. 2018] Chen, L.; Hou, S.; Ye, Y.; and Xu, S. 2018.
Droideye: Fortifying security of learning-based classiﬁer
In FOSINT-
against adversarial android malware attacks.
SI’2018, 253–262.
[Chen, Hou, and Ye 2017] Chen, L.; Hou, S.; and Ye, Y.
2017. Securedroid: Enhancing security of machine learning-
based detection against adversarial android malware attacks.
In ACSAC, 362–372. USA: ACM.
[Chen, Ye, and Bourlai 2017] Chen, L.; Ye, Y.; and Bourlai,
T. 2017. Adversarial machine learning in malware detec-
In
tion: Arms race between evasion attack and defense.
EISIC’2017, 99–106.
[CISCO 2018] CISCO. 2018. Cisio @ONLINE.
[Dang, Huang, and Chang 2017] Dang, H.; Huang, Y.; and
Chang, E.-C. 2017. Evading classiﬁers by morphing in the
dark. In CCS, 119–133. ACM.
[Demontis et al. 2018] Demontis, A.; Melis, M.; Pintor, M.;
Jagielski, M.; Biggio, B.; Oprea, A.; Nita-Rotaru, C.; and
Roli, F. 2018. On the intriguing connections of regulariza-
tion, input gradients and transferability of evasion and poi-
soning attacks. arXiv preprint arXiv:1809.02861.
[Goodfellow, Shlens, and Szegedy ] Goodfellow,
J.;
Shlens, J.; and Szegedy, C. Explaining and harnessing ad-
versarial examples (2014). arXiv preprint arXiv:1412.6572.
[Grosse et al. 2017] Grosse, K.; Papernot, N.; Manoharan, P.;
Backes, M.; and McDaniel, P. 2017. Adversarial examples
for malware detection. In European Symposium on Research
in Computer Security, 62–79. Springer.
[Ho 1998] Ho, T. K. 1998. The random subspace method for
constructing decision forests. IEEE Transactions on PAMI
20(8):832–844.
[Hoeffding 1963] Hoeffding, W. 1963. Probability inequal-
ities for sums of bounded random variables. Journal of the
American statistical association 58(301):13–30.
[Hou et al. 2018] Hou, S.; Ye, Y.; Song, Y.; and Abdulhayo-
glu, M. 2018. Make evasion harder: An intelligent android
In Proceedings of the Twenty-
malware detection system.
Seventh IJCAI, 5279–5283.
[Hu and Tan 2017] Hu, W., and Tan, Y. 2017. Generating
adversarial malware examples for black-box attacks based
on gan.
[Kingma and Ba 2014] Kingma, D. P., and Ba, J.
Adam: A method for stochastic optimization.
abs/1412.6980.
[Kurakin, Goodfellow, and Bengio 2016a] Kurakin,
A.;
Goodfellow, I.; and Bengio, S. 2016a. Adversarial examples
in the physical world. arXiv preprint arXiv:1607.02533.
A.;
[Kurakin, Goodfellow, and Bengio 2016b] Kurakin,
Goodfellow, I.; and Bengio, S. 2016b. Adversarial machine
learning at scale. arXiv preprint arXiv:1611.01236.
[Lemley, Bazrafkan, and Corcoran 2017] Lemley,
J.;
Bazrafkan, S.; and Corcoran, P. 2017. Smart augmentation
IEEE
learning an optimal data augmentation strategy.
Access 5:5858–5869.

2014.
CoRR

[Li et al. 2018] Li, D.; Baral, R.; Li, T.; Wang, H.; Li, Q.;
and Xu, S. 2018. Hashtran-dnn: A framework for enhanc-
ing robustness of deep neural networks against adversarial
malware samples. arXiv preprint arXiv:1809.06498.
[Luong, Pham, and Manning 2015] Luong, T.; Pham, H.;
and Manning, C. D. 2015. Effective approaches to attention-
In Proceedings of the
based neural machine translation.
2015 Conference on Empirical Methods in Natural Lan-
guage Processing, 1412–1421.
[Madry et al. 2017] Madry, A.; Makelov, A.; Schmidt, L.;
Tsipras, D.; and Vladu, A. 2017. Towards deep learn-
ing models resistant to adversarial attacks. arXiv preprint
arXiv:1706.06083.
[Nedim rndic 2014] Nedim rndic, P. L. 2014. Practical eva-
sion of a learning-based classiﬁer: A case study. In Secu-
rity and Privacy (SP), 2014 IEEE Symposium on, 197–211.
IEEE.
[Papernot et al. 2016] Papernot, N.; McDaniel, P.; Jha, S.;
Fredrikson, M.; Celik, Z. B.; and Swami, A. 2016. The lim-
itations of deep learning in adversarial settings. In Security
and Privacy (EuroS&P), 2016 IEEE European Symposium
on, 372–387. IEEE.
[Raff et al. 2017] Raff, E.; Barker, J.; Sylvester, J.; Brandon,
R.; Catanzaro, B.; and Nicholas, C. 2017. Malware detection
by eating a whole exe. arXiv preprint arXiv:1710.09435.
[Rosenberg et al. 2017] Rosenberg, I.; Shabtai, A.; Rokach,
L.; and Elovici, Y. 2017. Generic black-box end-to-end
attack against rnns and other calls based malware classiﬁers.
arXiv preprint.
[Simon-Gabriel et al. 2018] Simon-Gabriel, C.-J.; Ollivier,
Y.; Sch¨olkopf, B.; Bottou, L.; and Lopez-Paz, D. 2018. Ad-
versarial vulnerability of neural networks increases with in-
put dimension. arXiv preprint arXiv:1802.01421.
[Symantec 2018] Symantec. 2018. Symantec @ONLINE.
[Szegedy et al. 2013] Szegedy, C.; Zaremba, W.; Sutskever,
I.; Bruna, J.; Erhan, D.; Goodfellow, I.; and Fergus, R. 2013.
Intriguing properties of neural networks. arXiv preprint
arXiv:1312.6199.
[Vincent et al. 2010] Vincent, P.; Larochelle, H.; Lajoie, I.;
Bengio, Y.; and Manzagol, P.-A. 2010. Stacked denoising
autoencoders: Learning useful representations in a deep net-
work with a local denoising criterion. Journal of machine
learning research 11(Dec):3371–3408.
[Wang et al. 2017] Wang, Q.; Guo, W.; Zhang, K.; and et al.
2017. Adversary resistant deep neural networks with an ap-
plication to malware detection. In Proceedings of the 23rd
KDD, 1145–1153. ACM.
[Xu et al. 2013] Xu, L.; Zhan, Z.; Xu, S.; and Ye, K. 2013.
Cross-layer detection of malicious websites. In Third ACM
Conference on Data and Application Security and Privacy
(CODASPY’13), 141–152.
[Xu et al. 2014] Xu, L.; Zhan, Z.; Xu, S.; and Ye, K. 2014.
An evasion and counter-evasion study in malicious websites
In CNS, 2014 IEEE Conference on, 265–273.
detection.
IEEE.

[Xu, Evans, and Qi 2017] Xu, W.; Evans, D.; and Qi, Y.
2017. Feature squeezing: Detecting adversarial examples
in deep neural networks. arXiv preprint:1704.01155.
[Xu, Qi, and Evans 2016] Xu, W.; Qi, Y.; and Evans, D.
2016. Automatically evading classiﬁers: A case study on
pdf malware classiﬁers. In NDSS.
[Ye et al. 2017] Ye, Y.; Li, T.; Adjeroh, D. A.; and Iyengar,
S. S. 2017. A survey on malware detection using data min-
ing techniques. ACM Comput. Surv. 50(3):41:1–41:40.
[Zhang et al. 2016] Zhang, F.; Chan, P. P.; Biggio, B.; Ye-
ung, D. S.; and Roli, F. 2016. Adversarial feature selection
IEEE transactions on cybernetics
against evasion attacks.
46(3):766–777.

