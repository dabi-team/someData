Transactive Energy System Deployment over
Insecure Communication Links

Yang Lu, Jianming Lian, Minghui Zhu and Ke Ma

1

1
2
0
2

t
c
O
6
1

]

R
C
.
s
c
[

2
v
2
5
1
0
0
.
8
0
0
2
:
v
i
X
r
a

Abstract—In this paper, the privacy and security issues associ-
ated with the transactive energy system (TES) deployment over
insecure communication links are addressed. In particular, it is
ensured that (1) individual agents’ bidding information is kept
private throughout hierarchical market-based interactions; and
(2) any extraneous data injection attack can be quickly and easily
detected. An implementation framework is proposed to enable
the cryptography-based enhancement of privacy and security for
the deployment of any general hierarchical systems including
TESs. Under the proposed framework, a uniﬁed cryptography-
based approach is developed to achieve both privacy and security
simultaneously. Speciﬁcally, privacy preservation is realized by
an enhanced Paillier encryption scheme, where a block design is
proposed to signiﬁcantly improve computational efﬁciency. At-
tack detection is further achieved by an enhanced Paillier digital
signature scheme, where a stamp-concatenation mechanism is
proposed to enable detection of data replace and reorder attacks.
Simulation results verify the effectiveness of the proposed cyber-
resilient design for transactive energy systems.

Index Terms—Transactive energy system, privacy-preserving,

security-aware, cyber resilience, cryptography.

I. INTRODUCTION

A. Background and Motivation

Transactive control is now emerging from the electric power
system as a new type of control that incorporates economic
concepts and principles into the decision making and controller
design of individual entities of a system. Various transactive
energy system (TES) designs have been proposed to use the
market clearing prices for the coordination and control of
distributed energy resource (see [1] and the references therein).
However, the market-based interactions among energy sup-
pliers and customers inevitably raise signiﬁcant concerns of

This work was supported partially by the Laboratory Directed Research and
Development (LDRD) Program at Oak Ridge National Laboratory (ORNL)
and partially by the National Science Foundation (NSF) under CAREER
Grant ECCS-1846706. ORNL is operated by UT-Battelle, LLC for the U.S.
Department of Energy (DOE) under Contract No. DE-AC05-00OR22725.
The U.S. Government retains and the publisher, by accepting the article
for publication, acknowledges that
the U.S. Government retains a non-
exclusive, paid-up, irrevocable, world-wide license to publish or reproduce
the published form of this manuscript, or allow others to do so, for U.S.
Government purposes. The DOE will provide public access to these results
of federally sponsored research in accordance with the DOE Public Access
Plan (http://energy.gov/downloads/doe-public-access-plan).

Y. Lu is with the System Security Group, Lancaster University, Lancaster

LA1 4YW, UK.

J. Lian is with the Grid-interactive Controls Group, Oak Ridge National

Laboratory, Oak Ridge, TN, 37831, USA.

M. Zhu is with the School of Electrical Engineering and Computer Science,

Pennsylvania State University, University Park, PA 16802, USA.

K. Ma is with the Optimization and Control Group, Paciﬁc Northwest

National Laboratory, Richland, WA, 99354, USA.

Corresponding author: Jianming Lian (e-mail: lianj@ornl.gov).

if the communication links are insecure,

privacy and security. The exchanged information on individual
supply and demand curves can infer very crucial private
information [2], e.g., business secrets or personal preferences.
In addition,
the
exchanged information could also be tampered by extraneous
data injection attacks. Hence, the privacy and security issues
necessitate the novel TES designs that can execute transactive
control while simultaneously protecting data privacy and de-
tecting malicious attacks over insecure communication links.

B. Related Works

Various techniques have been proposed in the literature to
protect data privacy in power systems. In [3] and [4], mutual
information has been used to deﬁne data privacy of smart
meters. This privacy metric quantiﬁes the posterior information
entropy of private data given statistical models of the source
data and auxiliary information. In [5] and [6], the technique
of obfuscation has been used to protect coefﬁcient privacy
in centralized optimal power ﬂow (OPF) problems in cloud
computing. This technique masks the original OPF problem by
an obfuscation transformation. Once the obfuscated problem is
solved, an optimal solution to the original problem can be ob-
tained by inverting the transformation. Differential privacy [7],
[8] has been applied to the OPF [9], [10], economic dispatch
[11] and thermal inertial load management [12]. Differentially
private schemes add random noises into individual data in such
a way that they cannot be inferred by the adversaries who can
access arbitrary auxiliary information. Our recent review paper
[13] provides detailed comparisons of the aforementioned
three techniques and homomorphic encryption (to be discussed
soon) in the context of cyber-physical systems (CPSs).

On the other hand, digital signature has been widely used
by the communication community for enhanced security [14]–
[16]. It enables the receiver to easily verify whether the
digital message from the sender has been tampered or not
by checking certain mathematical relations for the message
and the signature. Recently, digital signature has been applied
for secure communications in data aggregation in smart meters
[17]. However, the technique in [17] cannot detect data replace
or reorder attacks. Please refer to Section IV-B for details of
these two attacks. For the problem of [17], in each cycle,
each smart meter only has one data to be communicated, and
the gap between two cycles could be long. Hence, these two
attacks can be avoided by using a fresh new key to perform
digital signature for each cycle. In contrast, detection of these
two attacks is crucial for TESs. This is because, for each
supplier or customer, a large number of sampled points of

 
 
 
 
 
 
2

its supply/demand curve need to be communicated within a
short period of market cycle, and it is unrealistic to adopt a
fresh new key to perform digital signature for each sampled
point. If the same key is used to perform digital signature for
multiple sampled data, then it is possible for an attacker to
launch replace and reorder attacks.

In this paper, a cyber-resilient TES design is proposed for
the ﬁrst time to overcome both the privacy and security issues
of TESs over insecure communication links. In particular,
Paillier encryption and Paillier digital signature [18] are ap-
plied for the privacy-preserving and security-aware designs,
respectively. Paillier encryption is an additively homomorphic
encryption scheme. Homomorphic encryption is a crypto-
graphic technique that allows algebraic operations to be carried
out on ciphertexts, thus generating an encrypted result which,
when decrypted, matches that of the same operations over
plaintexts. It has an appealing advantage that it can achieve
perfect correctness in secure multiparty computation, i.e., the
computation process provides each party the correct result of
its target computation without disclosing any information of its
private data to the other entities. Homomorphic encryption has
been increasingly used by the control community to achieve
secure multiparty computation for optimization and control
it has been adopted to data
[19]–[25]. In power systems,
aggregation in smart meters [17], [26]–[28], and very recently
in OPF problems [29]. All
these works adopt point-wise
encryption, i.e., an encryption operation has to been done for
each private data sample. This limits their usage in applications
such as TESs where a large number of data samples need to
be encrypted in a short period of time. Speciﬁcally, in TESs,
to maintain a high market clearing accuracy, a short sampling
period should be adopted and hence a large number of sampled
points need to be encrypted within a market cycle. In addition,
the above works on smart meters only consider integer-valued
data. The work [29] claims to be able to deal with real-valued
data, but does not provide design details. Integer-valued data
is enough for smart meters because smart meters readings are
always integers. However, supply and demand in TESs are
usually real numbers. Hence, one needs to customize standard
homomorphic encryption schemes to deal with real numbers.

C. Contributions

First, privacy and security issues are identiﬁed for both hi-
erarchical and distributed market clearing-based TESs. Then a
practical framework is proposed to enable the implementation
of cryptography-based approaches for general hierarchical sys-
tems including TESs. Under the proposed framework, the mar-
ket participants perform Paillier encryption over the sampled
points of their supply or demand curves using the coordinator’s
public key, and a third party is introduced to aggregate those
encrypted sampled values. Then, the coordinator decrypts the
aggregated encrypted sampled values using its private key.
Pre- and post-operations are integrated into the encryption
scheme to deal with real-valued sampled points of supply
and demand curves. It is worth noting that, no participant,
including the coordinator and third party, is assumed to be
trustworthy. In this process, the coordinator has no access to

individual encrypted sampled values and thus cannot recover
individual supply or demand curves. Without knowing the
coordinator’s private key, the third party and the eavesdroppers
over insecure communication links, cannot recover individual
supply or demand curves either. Preliminary results on the
privacy-preserving TES design was presented in [30].

The privacy-preserving TES design by directly integrating
Paillier encryption is not ready for practical implementation
yet. First, the associated computational overhead is propor-
tional to the number of sampled points. When this number
becomes large, the process of encryption and decryption would
be time-consuming and may not be suitable for real-time
market operations. To address this computational
issue, a
block design is further proposed in this paper to improve the
computational efﬁciency by the number of sampled points
times while still maintaining the level of privacy. Second,
the security issue has not been addressed in the presence of
potential data injection attacks over insecure communication
links. In this paper, an attack detection mechanism based
on Paillier digital signature is proposed. When sending the
data over the insecure communication link, the sender ﬁrst
generates a digital signature for the data using its own private
key and then sends the data together with its signature to the
receiver. After receiving the data, the receiver can perform a
veriﬁcation operation using the sender’s public key to detect
whether the received data and signature has been tampered
or not. Without knowing the sender’s private key, an attacker
is not able to generate a pair that can pass the receiver’s
veriﬁcation. Speciﬁcally, to detect data replace and reorder
attacks, we customize the standard Paillier digital signature
scheme by concatenating a stamp to each message to identify
its unique index, and a digital signature is generated for the
stamped message. With this mechanism, the data replace or
reorder attacks can no longer pass the veriﬁcation operation as
a replaced or reordered pair of message and signature does not
match the index. The efﬁcacy of the overall proposed cyber-
resilient TES design is veriﬁed via simulation results.

A preliminary version of this paper is presented in [30].
Compared with [30], the current paper includes data injection
attack and proposes a security-aware mechanism, and develops
a block design that can improve computational efﬁciency.

D. Organization

The rest of this paper is organized as follows. In Section II,
the TES is brieﬂy introduced with the privacy and security
issues identiﬁed. In Section III, a privacy-preserving TES
design is ﬁrst developed based on the Paillier encryption
scheme, and then an attack detection algorithm based on the
Paillier digital signature is proposed in Section IV for security-
aware TES design. In Section V, case studies are presented to
illustrate the effectiveness of the proposed cyber-resilient TES
design. Conclusions are found in Section VI.

E. Notations

Denote by R and N the sets of real and natural numbers
(including 0), respectively. Given a positive integer n, let
Zn = {0, 1, · · · , n − 1} and let Z∗
n denote the set of positive

3

Given a market clearing price λ, each supplier i ∈ Vs aims
to ﬁnd an optimal supply that maximizes its proﬁt, deﬁned
as the earning in energy selling minus the cost in energy
generation. The proﬁt optimization problem of supplier i ∈ Vs
is formulated as

max
i ∈Ls
ps
i

λps

i − Ci(ps
i )

where ps
the resource price, and Ls

i is its supply, Ci : R → R is its cost function, λ is

i is the feasible set of ps
i .

Given a resource price λ, each customer i ∈ Vd aims to ﬁnd
an optimal demand that maximizes its utility, deﬁned as the
beneﬁt in energy usage minus the cost in energy purchasing.
The utility optimization problem of customer i ∈ Vd is
formulated as

Ui(pd

i ) − λpd
i

max
i ∈Ld
pd
i

where pd
i
and Ld

is its demand, Ui : R → R is its utility function,

i is the feasible set of pd
i .
The suppliers and customers take best response with respect
to the resource price given by the coordinator. The coordinator
then aims to select a resource price that maximizes the social
welfare. The bi-level optimization problem of the coordinator
is formulated as

max
λ∈R

(cid:88)

Ui

(cid:0)pd∗

i (λ)(cid:1) −

(cid:88)

Ci (ps∗

i (λ))

i∈Vd
s.t. ps∗
i (λ) = argmax
i ∈Ls
ps
i
pd∗
i (λ) = argmax
i ∈Ld
pd
i
(cid:88)

(cid:88)

ps∗
i (λ) =

pd∗
i (λ).

i∈Vs
i − Ci(ps
λps

i ), ∀i ∈ Vs,

Ui(pd

i ) − λpd

i , ∀i ∈ Vd,

(1a)

(1b)

(1c)

(1d)

i∈Vs

i∈Vd

(resp. pd∗

In problem (1), the function ps∗
i ) is called the sup-
i
ply (resp. demand) function, and its graphical representation
is called the supply (resp. demand) curve. Both hierarchical
and distributed market clearing approaches have been widely
used to determine the optimal solution λ∗ of problem (1). We
next brieﬂy discuss these two approaches.

Hierarchical market clearing. Hierarchical market clearing
is implemented through auction. Individual suppliers i ∈ Vs
and customers i ∈ Vd submit their entire supply or demand
curves to the coordinator, respectively. Upon receiving all
the individual curves,
the coordinator ﬁrst determines the
aggregated supply and demand curves, and then ﬁnd the mar-
ket clearing price as the intersection between the aggregated
supply and demand curves.

Distributed market clearing. Distributed market clearing
works in an iterative manner. At the k-th iteration, the co-
ordinator broadcasts an estimated price λ(k) to the market
participants. Individual suppliers i ∈ Vs and customers i ∈ Vd
determine ps
i (λ(k)), respec-
tively, and report them to the coordinator. Then the coordinator
updates the price estimate for the next iteration until the market
clearing price converges.

i (λ(k)) and pd

i (k) = pd∗

i (k) = ps∗

Fig. 1.

Illustration of the underlying hierarchical structure of TESs.

integers that are smaller than and co-prime to n. Given positive
integers x and y, denote by gcd(x, y) and lcm(x, y) the
greatest common divisor and the least common multiple of
x and y, respectively. Given x, y ∈ N, denote by x ↔ y
the concatenation of x and y, e.g., 12 ↔ 345 = 12345.
Given x ∈ N, denote by num(x) the number of digits in x,
e.g., num(123) = 3. Given x ∈ N and two positive integers
a ≤ b ≤ num(x), denote by [x]a:b the part from the a-th digit
to the b-th digit of x, with the ﬁrst digit being the leftmost
one, and denote by [x]a:end the part from the a-th digit to the
last digit of x, e.g., [12345]2:4 = 234 and [12345]3:end = 345.
Given a ∈ N, denote by (0 · · · 0)a the concatenation of a zeros,
e.g., (0 · · · 0)3 = 000.

II. PROBLEM STATEMENT

In this section, we ﬁrst brieﬂy introduce the concept of TES.
Then, we assess the cyber vulnerabilities of TES to identify
the privacy and security issues associated with the existing
TES designs. Finally, we state the objective of this paper.

A. Transactive Energy System

Within the TES, different entities can be classiﬁed into three
types: coordinator (CO), supplier, and customer, where the
coordinator is the market operator, a supplier is an energy
seller, and a customer is an energy buyer. The TES can
then be modeled as a multi-agent system with a hierarchical
structure, as shown in Fig. 1. The coordinator aims to allocate
energy resources to the suppliers and customers to ensure
both individual and social objectives and constraints. This is
referred to as the resource coordination problem. In transactive
coordination, the coordinator achieves the optimal resource
coordination by properly setting the resource price, which is
called the market clearing price. We next present a typical TES
to illustrate transactive coordination.

Denote by Vs and Vd be the set of suppliers and the set of
customers, respectively. Let Ns = |Vs|, Nd = |Vd|, and V (cid:44)
Vs ∪ Vd. In the remaining of the paper, when it is necessary
to differentiate between suppliers and customers, we will use
“supplier i ∈ Vs” or “customer i ∈ Vd”. Otherwise, we will
use “agent i ∈ V”.

4

B. Cyber Vulnerabilities

TES is in fact a very typical CPS, where the market clearing
prices are determined in the cyber space and the control tasks
are performed in the physical world. Hence, TESs share the
typical cyber vulnerabilities of general CPSs. In this paper, we
consider the privacy and security issues associated with TESs.
This subsection identiﬁes these issues with respect to the two
market clearing approaches introduced above.

1) Privacy issue: The hierarchical market clearing requires
individual agents to submit their supply or demand curves
to the coordinator. With this information, the coordinator or
an eavesdropper over the insecure communication links can
easily infer individual cost or utility functions. In fact, the
inverse supply or demand function is just the derivative of the
corresponding cost or utility function [31]. Hence, individual
cost or utility functions can be recovered by integrating the
inverse of the corresponding supply or demand functions. This
could potentially expose the business secrets (for suppliers) or
personal preferences (for customers). We refer to the problem
of private data leakage as the privacy issue.

The distributed market clearing can partially mitigate the
privacy issue as individual agents do not submit their supply
or demand curves to the coordinator, but only those quan-
tities with respect to the broadcasted prices. However, the
coordinator could make use of the iterative nature of the
distributed approach to intentionally broadcast a large number
of prices covering the entire admissible range. In this way, the
coordinator or an eavesdropper could still recover individual
supply or demand curves arbitrarily well.

2) Security issue: Both market clearing approaches require
information exchange between the coordinator and the agents.
If the communication links are unauthenticated, extraneous
attackers can send forged information to legitimate participants
or tamper the information in transit to disrupt the market op-
eration. This is termed as data injection attack (also known as
data integrity attack or data tampering attack). In the presence
of such attacks, the data received by the coordinator could
be completely distorted, and the clearing price determined
accordingly could arbitrarily deviate from the true clearing
price and may lead to market chaos. We refer to the problem
of data forging and tampering as the security issue.

C. Objectives

Fig. 2.

Illustration of the proposed framework for TES deployment.

III. PRIVACY-PRESERVING DESIGN
In this section, the privacy-preserving TES design is de-
veloped based on homomorphic encryption. We ﬁrst propose
a framework for practical deployment. Then we deﬁne the
attacker model adopted in this section. After that, we present
the details of the proposed privacy-preserving design. Finally,
we propose an approach to ensure the computational efﬁciency
for practical implementation.

A. Implementation Framework

In order to preserve the privacy, it requires that the coor-
dinator should obtain the aggregated curve without knowing
individual ones. In cryptography, homomorpihc encryption is a
promising technique to fulﬁll this requirement. This technique
requires that the entity who receives individual ciphertexts and
carries out algebraic operations to be different from the entity
who performs the decryptions. Hence, in order to enable the
use of homomorphic encryption, we introduce an additional
third party (TP) as the independent entity who is responsible
of receiving individual ciphertexts and performing encrypted
aggregations. The proposed framework is shown in Fig. 2,
in which we assume that
there is a communication link
(i, TP) between each agent i ∈ V and the third party, and
a communication link (TP, CO) between the third party and
the coordinator. The third party can be implemented by an
extraneous entity, e.g., a cloud service provider. Indeed, the
third-party cloud service, for example, the IBM Power Virtual
Server [32], has emerged in power systems to support thosee
applications that are computationally intensive.

In this paper, we aim to develop a cyber-resilient TES design

that simultaneously satisﬁes the following three properties:

B. Attacker Model

clearing price λ∗ such that (cid:80)

(1) Correctness: The coordinator can determine the correct
i (λ∗);
pd∗
i∈Vs
(2) Privacy preservation: After the execution of the algo-
rithm, for each supplier i ∈ Vs (resp. customer i ∈ Vd), no
other entity can infer the value of ps∗
i (λ)) for
any admissible λ;

i (λ) (resp. pd∗

i (λ∗) = (cid:80)
ps∗

i∈Vd

(3) Security awareness: Any extraneous data injection at-

tacks can be detected by legitimate message receivers.

For the purpose of illustration, only the hierarchical market
clearing is considered in the following. However, the proposed
design can be easily extended to distributed market clearing.

We assume that any market participant i ∈ V ∪ {CO, TP}
is semi-honest, i.e., it correctly follows the designed algorithm
but attempts to use received messages to infer other partici-
pants’ private data ([33], pp-20). In addition, there could be
external attackers that can eavesdrop the communication links.
In this section, we assume that there are no data injection
attacks. Such attacks are considered in the next section.

C. Algorithm Design

This subsection presents the proposed privacy-preserving
auction-based algorithm. In plain auction-based clearing in

Section II-A, individual supply or demand curves are sampled
and discrete-valued versions are submitted. Denote by λmin
and λmax the lower and upper bounds of resource price,
respectively. Denote by τ the sampling period and Np the
number of sampled values. For each supplier i ∈ Vs (resp.
customer i ∈ Vd), denote by ps∗
i(cid:96) (resp. pd∗
i(cid:96) ) its (cid:96)-th sampled
i(cid:96) = pd∗
i (λmin +(cid:96)τ ) (resp. pd∗
i(cid:96) = ps∗
value, i.e., ps∗
i (λmin +(cid:96)τ )).
Denote by σ ∈ N the precision level of the sampled values, i.e.,
for any ps∗
i(cid:96) , only the ﬁrst σ decimal fraction digits are
kept, while the rest are dropped. Assume that the coordinator
and all the suppliers (resp. customers) know a strict upper
bound δs (resp. δd) of individual supply (resp. demand) curves,
i.e., δs > ps
i for
all i ∈ Vd and all pd

i for all i ∈ Vs and all ps
i ∈ Ld
i ).

i (resp. δd > pd

i(cid:96) and pd∗

i ∈ Ls

Our privacy-preserving auction-based design, Algorithm 1,
is based on the Paillier encryption scheme. Preliminaries
of Paillier encryption, including the sub-algorithms Algkey,
Algenc, and Algdec, are given in Appendix A.

Algorithm 1: Privacy-preserving auction
1 Key generation

The CO runs (α, β, ν, π) = Algkey(n) such that
α > max{10σNsδs, 10σNdδd}, broadcasts (α, β) and
keeps (ν, π) private to itself;
for (cid:96) = 1; (cid:96) ≤ Np; (cid:96) = (cid:96) + 1 do

2

3

4

Encryption
Each supplier i ∈ Vs runs

i(cid:96) = Algenc(α, β, 10σps∗
ys
i(cid:96) )

and sends ys
i(cid:96) to the TP;
Each customer i ∈ Vd runs

i(cid:96) = Algenc(α, β, 10σpd∗
yd
i(cid:96) )

i(cid:96) to the TP;

and sends yd
Computation over ciphertexts
The TP computes

(cid:89)

i∈Vs
(cid:89)

ys
(cid:96) =

yd
(cid:96) =

i(cid:96) mod α2,
ys

yd
i(cid:96) mod α2

i∈Vd
(cid:96) , yd

(cid:96) ) to the CO;

and and sends (ys
Decryption
The CO runs

ˆys
(cid:96) = Algdec(α, ν, π, ys
ˆyd
(cid:96) = Algdec(α, ν, π, yd

(cid:96) )/10σ,
(cid:96) )/10σ;

5 Setting clearing price

The CO sets λ∗ = λmin + (cid:96)τ such that ˆys
sends λ∗ to each agent i ∈ V.

(cid:96) = ˆyd

(cid:96) , and

5

(resp. 10σpd∗

α must be larger than the computing result. Please refer
to the statement of homomorphic property at
the end of
Appendix A, in which it requires α > (cid:80)m
(cid:96)=1 pt(cid:96). In our
problem, max{10σNsδs, 10σNdδd} is a strict upper bound
for all computing results, i.e., sampled values of aggregated
supply and demand curves. Hence, the bound on α guarantees
decryption correctness for all computing results at step 4.
Actually, for the sake of privacy, α needs to be very large,
e.g., in the magnitude of 22000 [34]. Hence, the upper bound
condition on α is usually automatically satisﬁed even if the
participants do not know δs or δd. At step 2, each supplier
i ∈ Vs (resp. customer i ∈ Vd) encrypts its sampled value
10σps∗
i(cid:96) ) by the Paillier encryption algorithm
i(cid:96)
with the public keys (α, β), and sends the ciphertext ys
i(cid:96)
i(cid:96) and 10σpd∗
(resp. yd
i(cid:96)
are both non-negative integers. At step 3,
the third party
performs computations over received ciphertexts according to
the homomorphic property of the Paillier encryption scheme,
i.e., multiplication of ciphertexts provides an encryption of
sum of plaintexts. Hence, ys
(cid:96) and yd
(cid:96) are actually encryptions of
the (cid:96)-th sampled values of the aggregated supply and demand
curves, respectively. The third party then sends ys
(cid:96) to
the coordinator. At step 4, the coordinator decrypts ys
(cid:96) and
yd
(cid:96) by the Paillier decryption algorithm with its public key α
and private keys (ν, π), and transforms the decrypted results
back to real numbers via dividing them by 10σ. At step 5, the
coordinator sets and broadcasts the clearing price λ∗.

i(cid:96)) to the third party. Notice that 10σps∗

(cid:96) and yd

i∈Vs

i (λmin + (cid:96)τ ) and ˆyd
ps∗

Algorithm 1 has the following properties:
(1) Correctness: For each (cid:96) ∈ {1, · · · , Np}, it follows that
(cid:96) = (cid:80)
(cid:96) = (cid:80)
pd∗
ˆys
i (λmin + (cid:96)τ ).
i∈Vd
(cid:96) and ˆyd
The correctness property states that ˆys
(cid:96) are just the
(cid:96)-th sampled values of the original aggregated supply and
demand curves, respectively. This property directly follows
from the homomorphic property of the Paillier encryption
scheme (please refer to the end of Appendix A). Since λ∗
is set as λ∗ = λmin + (cid:96)τ such that ˆys
(cid:96) , the correctness
property leads to (cid:80)
i (λ∗) = (cid:80)
i (λ∗). Hence,
pd∗
ps∗
i∈Vs
optimal market-based coordination is achieved.

(cid:96) = ˆyd
i∈Vd

(2) Privacy preservation: If the DCRA holds, then, after the
execution of the algorithm, for each supplier i ∈ Vs (resp.
customer i ∈ Vd), for all (cid:96) ∈ {1, · · · , Np}, the value of
i (λmin + (cid:96)τ ) (resp. pd∗
ps∗
i (λmin + (cid:96)τ )) is semantically secure.
The privacy preservation property directly follows from the
semantic security of the Paillier encryption scheme (please re-
fer to the end of Appendix A). Speciﬁcally, after the execution
of Algorithm 1, each agent i ∈ V only knows its own supply or
demand curve and the market clearing price; the coordinator
only knows the aggregated supply and demand curves and
the market clearing price; the third party or an extraneous
eavesdropper only knows the market clearing price. Therefore,
any agent’s individual supply or demand curve is not known
to any other entity and privacy preservation is achieved.

At step 1, the coordinator generates a set of keys by the
Paillier key-generation algorithm. The public keys are broad-
casted while the private keys are kept private to itself. The
bound on α is to guarantee decryption correctness. Roughly
speaking, to ensure decryption correctness, the public key

D. Block Design for Improved Computational Efﬁciency

Algorithm 1 works in a point-wise manner, i.e., all the
cryptographic operations are performed for each sampled value
of the supply or demand curves. Speciﬁcally, each agent i per-
forms Np times encryption, the third party performs 2Np times

6

computation over ciphertexts, and the coordinator performs
2Np times decryption. When Np is large, the implementation
of Algorithm 1 would be time-consuming. In this subsection,
we propose a design such that all the cryptographic operations
are performed in a block-wise manner and the numbers of the
operations are independent of Np.

Roughly speaking, each agent concatenates all its Np sam-
pled values to form a single block, and all the cryptographic
operations are performed over the block. To guarantee correct-
ness, we propose to pad enough zeros in each sampled value
before concatenation. In this way, each agent performs once
encryption, the third party performs twice computation over
ciphertexts, and the coordinator performs twice decryption.
Hence, under the same key length, the computational com-
plexity reduces approximately by Np times. We next detail the
block design and illustrate how to embed it into Algorithm 1.

At step 1, change the bound of α as
(cid:26) 10Np×num(10σNsδs) − 1
10num(10σNsδs) − 1

α > max

10σNsδs,

10Np×num(10σNdδd) − 1
10num(10σNdδd) − 1

10σNdδd

(cid:27)

.

i(cid:96) as

Before step 2, individual suppliers and customers pad their
i(cid:96) and pd∗
ps∗
¯ps∗
i(cid:96) = (0 · · · 0)num(10σNsδs)−num(10σps∗
¯pd∗
i(cid:96) = (0 · · · 0)num(10σNdδd)−num(10σpd∗
respectively, and then form the concatenation
¯ps∗
i = ¯ps∗
iNp
i = ¯pd∗
¯pd∗
iNp

i(cid:96) ) ↔ 10σps∗
i(cid:96) ,
i(cid:96) ) ↔ 10σpd∗

↔ · · · ↔ ¯ps∗
i1 ,
↔ · · · ↔ ¯pd∗
i1

i(cid:96)

respectively. After that, remove the loop over sampled values
(i.e., remove the (cid:96) loop and drop (cid:96) from anywhere at steps
2–4). At step 2, replace 10σps∗
and
¯pd∗
, respectively. After step 4, the coordinator performs an
i
additional cutting step by setting, for each (cid:96) = 1, · · · , Np:
ˆys
(cid:96) = [ˆys](end−(cid:96)×num(10σNsδs)+1):(end−((cid:96)−1)×num(10σNsδs)),
(cid:96) = [ˆyd](end−(cid:96)×num(10σNdδd)+1):(end−((cid:96)−1)×num(10σNdδd)).
ˆyd

i(cid:96) and 10σpd∗

i(cid:96) with ¯ps∗
i

IV. SECURITY-AWARE DESIGN
In this section, the security-aware TES design is proposed
based on digital signature. We ﬁrst extend the attacker model
considered in Section III to include data injection attacks.
Then, we equip Algorithm 1 with an attack detection mecha-
nism to further achieve objective (3) stated in Section II-C.

A. Attacker Model

In this section, all the market participants V ∪ {CO, TP}
have the same attacker model described in Section III-B. In
addition, there could exist extraneous attackers that launch
data injection attacks. In particular, they can send arbitrarily
forged information to legitimate participants or arbitrarily
tamper the information in transit. In this paper, we focus
on data injection attacks over communication links, but do
not consider Byzantine attacks,
in which some legitimate
participants arbitrarily deviate from the given algorithm. We
leave the study of Byzantine attacks to our future works.

B. Algorithm Design

The security-aware design, Algorithm 2, is based on the
Paillier digital signature scheme. Preliminaries of Paillier dig-
ital signature, including the sub-algorithms Algsig and Algver,
are given in Appendix B.

Consider the case where participant i aims to send a mes-
sage m to participant j via link (i, j). Participant i generates
Paillier keys (αi, βi, νi, πi), where (αi, βi) are sent over an
authenticated link to participant j and (νi, πi) are kept private
to itself. Participants i and j perform an attack detection
mechanism given by Algorithm 2. The inputs include the
identity indicators i and j, participant i’s keys (αi, βi, νi, πi),
message m, and an index (cid:96) ∈ N. The outputs include a binary
attack indicator FLAG and participant j’s output message ¯m.
In particular, the index (cid:96) is a stamp to identify which data m
is. An example of setting (cid:96) is given later.

Algorithm 2: Attack detection mechanism
Syntax: (FLAG, ¯m) = Algad(i, j, αi, βi, νi, πi, m, (cid:96)).

1 Signature

Participant i runs

(s1, s2) = Algsig(αi, βi, νi, πi, (cid:96) ↔ m)

and sends ((cid:96) ↔ m, s1, s2) to participant j;

2 Veriﬁcation

On receiving the (cid:96)-th triple (¯z, ¯s1, ¯s2) from (i, j),
participant j sets ¯m = [¯z]num((cid:96))+1:end and FLAG = 1
if Algver(αi, βi, ¯z, ¯s1, ¯s2) = 1 and [¯z]1:num((cid:96)) = (cid:96),
and sets ¯m = NULL and FLAG = 0 otherwise.

First, participant i generates a pair of signatures (s1, s2)
for (cid:96) ↔ m by the Paillier signature algorithm and sends
the triple ((cid:96) ↔ m, s1, s2) to participant j. Upon receiving
the (cid:96)-th triple (¯z, ¯s1, ¯s2) from (i, j), participant j performs
a veriﬁcation operation to detect whether the triple has been
attacked. The triple passes the veriﬁcation if and only if: (1) the
triple (¯z, ¯s1, ¯s2) passes the Paillier veriﬁcation algorithm, and
(2) the index matches, i.e., the ﬁrst num((cid:96)) digits of ¯z matches
(cid:96). If the triple passes the veriﬁcation, then participant j sets
FLAG = 1 to indicate no attack and sets ¯m = [¯z]num((cid:96))+1:end,
which is just m. Otherwise, participant j sets FLAG = 0
to indicate attack and sets ¯m = NULL. The detection is
enabled by the property that, without knowing participant i’s
private keys (νi, πi), an attacker cannot generate a triple that
can pass participant j’s veriﬁcation. The index (cid:96) serves as the
time stamp of message m. Without using the time stamp, a
veriﬁcation with FLAG = 1 only indicates that the received
triple is or was generated by participant i. However, this alone
does not tell whether the received triple is the current one.
Indeed, an attacker could make use of this fact to launch two
attacks that cannot be detected. First, the attacker could replace
the current triple in (i, j) by a previously observed triple that
had been sent over (i, j). Second, if there are multiple triples
in (i, j) simultaneously, the attacker could swap their orders in
the link. In these two attacks, since the replaced or reordered
triple is a valid triple of message and signatures, it can pass
the Paillier veriﬁcation algorithm Algver and the third party

cannot detect the attacks. However, with the index (cid:96), these two
attacks cannot pass the veriﬁcation operation in Algorithm 2,
as a replaced or reordered triple does not match the index.

A second-order equivalent thermal parameter (ETP) model
is used to capture the load dynamics of the ACs. Detailed
description of the ETP model parameters can be found in [40].

7

i(cid:96) = 1 (resp. FLAGd
i(cid:96) (resp. ¯yd

i(cid:96), ¯ys
i(cid:96)) = Algad(i, TP, αi, βi, νi, πi, ys
i(cid:96)) = Algad(i, TP, αi, βi, νi, πi, yd

To proceed, we illustrate how to integrate Algorithm 2 into
Algorithm 1. At step 1, each participant i ∈ V ∪ {TP, CO}
ﬁrst generates a set of Paillier keys (αi, βi, νi, πi) by Algkey,
broadcasts (αi, βi) and keeps (νi, πi) private to itself. All these
key generation operations are only performed once. Without
loss of generality, we assume that all the public keys are sent
over authenticated links enabled by a public-key infrastructure
(PKI) [35]. Between step 2 and step 3, insert a step so that
supplier i ∈ Vs (resp. customer i ∈ Vd) as well as the third
party runs (FLAGs
i(cid:96), (cid:96))
(resp. (FLAGd
i(cid:96), ¯yd
i(cid:96), (cid:96))).
If FLAGs
i(cid:96) = 1), then the third party
adopts ¯ys
i(cid:96)) at step 3. Then,
between step 3 and step 4, insert another step so that the
third party as well as the coordinator runs (FLAGs
(cid:96) ) =
Algad(TP, CO, αTP, βTP, νTP, πTP, ys
(cid:96) , 2((cid:96) − 1) + 1)
(resp. (FLAGd
(cid:96) ) = Algad(TP, CO, αTP, βTP, νTP, πTP,
(cid:96) , 2((cid:96)−1)+2)). If FLAGs
yd
(cid:96) = 1), then the
coordinator adopts ¯ys
(cid:96) ) at step 4. After
λ∗ is derived at step 5, the coordinator and each agent i ∈ V
run (FLAGi, ¯λ∗
i ) = (CO, i, αCO, βCO, νCO, πCO, 10σλλ∗, i),
where σλ ∈ N is the precision level of price, i.e., for any
price λ, only the ﬁrst σλ decimal fraction digits are kept,
while the rest are dropped. Hence, 10σλλ∗ is a non-negative
integer. If FLAGi = 1, then agent i uses ¯λ∗

(cid:96) = 1 (resp. FLAGd
(cid:96) (resp. yd

i(cid:96) (resp. yd

(cid:96) (resp. ¯yd

i(cid:96)) as ys

(cid:96) ) as ys

(cid:96) , ¯yd

(cid:96), ¯ys

i as λ∗.

The above attack detection mechanism guarantees that any
data injection attack can be detected by legitimate message
receivers. This property directly follows from the security of
the Paillier digital signature scheme and the usage of index.

V. CASE STUDIES

In this section, the proposed cyber-resilient design is tested
on a TES that coordinates and controls residential air condi-
tioners to manage the feeder congestion.

We consider the real-time electricity allocation of a distri-
bution feeder on a hot summer day (August 16, 2009) for
Columbus, Ohio, USA. The weather data and the Typical
Meteorological Year (TMY2) data are adopted from [36]
and [37]. The wholesale resource price is adopted from the
PJM market [38] and it is modiﬁed to a retail rate plus a
retail modiﬁer as deﬁned by American Electric Power (AEP)’s
tariff [39]. We deﬁne this retail price as the base price. The
distribution feeder capacity limit is 3.5 MW. There are 1000
residential ACs under the feeder. In this scenario, the feeder is
both the coordinator and the only supplier, and each residential
AC is a customer. In each market cycle, the feeder aims to
obtain the aggregated demand curve and compares it with the
feeder capacity limit to determine the market clearing price. If
there is no congestion, then the clearing price is set to the base
price. If there is congestion, the clearing price is set as the price
corresponding to the feeder capacity limit on the aggregated
demand curve. The price range is between λmin = $0 and
λmax = $1 and the sampling period is τ = $0.01. We then
have Np = 101. The length of a market cycle is 5 minutes.

We simulate the above problem for a whole day. We ﬁrst
verify the correctness and privacy preservation properties of
Algorithm 1 without data injection attacks. Fig 3 shows the
evolution of feeder power within 24 hours. The trajectory of
feeder power with control (the solid blue line) is derived under
the proposed privacy-preserving algorithm. Fig 3 veriﬁes that
our algorithm maintains optimal market-based coordination.
Fig. 4 shows the aggregated demand curve at the 220-th market
cycle (the number 220 is arbitrarily picked and any other mar-
ket cycle can be used for illustration). Denote by pd∗(λ) the
aggregated demand curve, i.e., pd∗(λ) (cid:44) (cid:80)
pd∗
i (λ). We
simulate the auction-based scheme both with and without our
privacy-preserving design and denote the aggregated demand
privacy(λ) and pd∗
curves derived in the two cases by pd∗
plain(λ),
respectively. In Fig. 4, the curve pd∗
privacy(λ) (the solid blue
line) shows the shape of the aggregated demand curve, and
the curve |pd∗
plain(λ)| (the dashed red line), which
is constant at 0, shows that pd∗
privacy(λ) is exactly equal to
pd∗
plain(λ) at all values of λ, which veriﬁes the correctness
of Algorithm 1. In Fig. 5, the left subﬁgure shows agent
100’s demand curve at the 200-th market cycle, and the right
subﬁgure shows its encryption under 500 bits of key length.
Fig. 5 visually illustrates the privacy preservation of Algorithm
1, as the points of the encrypted demand curve look like pure
random numbers within a large interval.

privacy(λ) − pd∗

i∈Vd

1, s(cid:48)

1, s(cid:48)

Next we verify the security awareness of the attack detection
mechanism in Section IV. We consider four different attack
modes. Mode 1 is no attack. Mode 2 uses a randomly chosen
message to replace the true message. More speciﬁcally, in this
mode, to tamper a triple ((cid:96) ↔ m, s1, s2), an attacker randomly
chooses a message m(cid:48) and generates a set of Paillier keys,
and uses the keys to generate a pair of signatures (s(cid:48)
2) for
(cid:96) ↔ m(cid:48). The triple ((cid:96) ↔ m(cid:48), s(cid:48)
2) is sent to the message
receiver. Mode 3 is data replace attack and mode 4 is data
reorder attack. Please refer to Section IV-B for details of these
two attacks. We deploy these four modes of attacks to agent
100’s 20 consecutive messages at the 200-th market cycle.
The detection result is shown in Fig. 6. In the ﬁgure, the blue
circle is the true attack mode, the red star is the attack mode
detected by our proposed digital signature scheme, and the
green diamond is the attack mode detected by the standard
digital signature scheme in [17]. Fig. 6 shows that our scheme
is able to detect all the four modes of attacks, while the scheme
in [17] is only able to detect the attacks of modes 1 and 2.

Finally, we examine the efﬁciency of the integration of the
proposed privacy-preserving and security-aware mechanisms.
Table I lists the running time under different key lengths
without and with the block design in Section III-D. The time
for agent (columns 2 and 5) is the average time per agent
per market cycle, and the time for the third party and the
coordinator (columns 3, 4, 6 and 7) is the average time per
market cycle. We can see that, under the same key length,
the running time with the block design is much smaller than
that without the block design. For large key lengths, the rate

8

between the running time without and with the block design
is approximately Np = 101, which matches our expectation.

Fig. 3. Evolution of feeder power within 24 hours.

Fig. 4. Aggregated demand curve at 200-th market cycle.

Fig. 5. Agent 100’s demand curve at 200-th market cycle.

TABLE I
COMPARISON OF COMPUTATIONAL OVERHEAD

Key length
(bit)
500
1000
1500
2000
2500
3000
3500
4000

Point-wise (s)
TP
11.97
21.19
26.57
42.36
70.03
107.35
157.78
223.32

Agent
0.58
2.55
7.61
16.79
32.70
55.23
87.51
128.66

CO
0.53
3.28
10.02
22.14
42.79
76.10
114.63
172.57

Block-wise (s)
TP
0.12
0.16
0.27
0.41
0.71
1.09
1.61
2.34

Agent
0.016
0.035
0.089
0.18
0.34
0.58
0.88
1.40

CO
0.010
0.035
0.11
0.23
0.44
0.76
1.20
1.96

Fig. 6. Attack mode detection.

VI. CONCLUSIONS

This paper studied the privacy and security issues associated
with TESs. We ﬁrst focused on the privacy issue by developing
a homomorphic encryption-based algorithm to simultaneously
achieve the optimal market-based coordination and privacy
preservation. A block design was proposed to greatly improve
the associated computational efﬁciency. Then, we moved to the
security issue and proposed a digital signature-based mecha-
nism that further ensures security awareness. The effectiveness
of the proposed cyber-resilient TES design was veriﬁed by
simulations on the transactive control of residential ACs.

APPENDIX

The appendix serves to brieﬂy introduce Paillier encryption
and Paillier digital signature. More detailed discussions on
Paillier cryptosystem can be found in [18].

A. Paillier Encryption

The Paillier encryption scheme is an additive homomorphic
encryption scheme. It consists of key generation, encryption
and decryption operations, as illustrated next.

• Key generation: A set of keys (α, β, ν, π) is generated
by Algorithm 3, in which n is the security parameter to set
the key length, (α, β) are public keys and broadcasted, while
(ν, π) are private keys and kept secret to the executor itself.

Algorithm 3: Key generation algorithm
Syntax: (α, β, ν, π) = Algkey(n).
The executor randomly chooses two large prime
numbers p and q such that
gcd(pq, (p − 1)(q − 1)) = 1 and |α| = n with
α = pq; computes ν = lcm(p − 1, q − 1); randomly
selects an integer β ∈ Z∗
modular multiplicative inverse π exists

α2 such that the following

π =

(cid:18) (βν mod α2) − 1
α

(cid:19)−1

mod α,

i.e., π (βν mod α2)−1

α

≡ 1 mod α.

• Encryption: A plaintext pt ∈ Zα is encrypted as ct with

public keys (α, β) by Algorithm 4.

00:0003:0006:0009:0012:0015:0018:0021:0024:00Time (hr)0123456Feeder Power (MW)Without controlWith controlCapacity limit00.10.20.30.40.50.60.70.80.91Price ($)-101234Aggregated demand curve (MW)00.51Price ($)0100020003000Individual demand curve (W)00.51Price ($)0246Encrypted demand curve10300Algorithm 4: Encryption algorithm
Syntax: ct = Algenc(α, β, pt).
The executor selects a random integer r ∈ Z∗
computes ct = βpt · rα mod α2.

α and

• Decryption: A ciphertext ct ∈ Zα2 is decrypted as pt with

public key α and private keys (ν, π) by Algorithm 5.

Algorithm 5: Decryption algorithm
Syntax: pt = Algdec(α, ν, π, ct).
The executor computes pt = (ctν mod α2)−1
mod α.

α

· π

The correctness, privacy and homomorphic property of the

Paillier encryption scheme are given as follows:
(i) Decryption correctness:

Algdec (α, ν, π, Algenc(α, β, pt)) = pt.

(ii) Semantic security: If the decisional composite residuos-
ity assumption (DCRA)1 holds, then the Paillier encryption
scheme is semantically secure. That is, it is computationally
infeasible for one to infer any information of plaintexts by
observing the corresponding ciphertexts. In other words, this
scheme does not disclose any information of plaintexts.
(iii) Homomorphic property: Given any pt1, · · · , ptm ∈ Zα.
If (cid:80)m

(cid:96)=1 pt(cid:96) ∈ Zα, then
(cid:32)

Algdec

α, ν, π,

m
(cid:89)

(cid:96)=1

(cid:33)

Algenc(α, β, pt(cid:96))

=

m
(cid:88)

(cid:96)=1

pt(cid:96).

B. Paillier Digital Signature

The Paillier digital signature scheme consists of key gener-
ation, signature and veriﬁcation operations, as illustrated next.
• Key generation: Same as the key generation operation of

the Paillier encryption scheme.

• Signature: A pair of signatures (s1, s2) is generated for a

message m ∈ Zα2 with keys (α, β, ν, π) by Algorithm 6.

Algorithm 6: Signing algorithm
Syntax: (s1, s2) = Algsig(α, β, ν, π, m).
The executor computes s1 = (mν mod α2)−1
· π
mod α and s2 = (m · β−s1 )1/α mod ν mod α.

α

• Veriﬁcation: A triple (m, s1, s2) is veriﬁed with public

keys (α, β) by Algorithm 7.

Algorithm 7: Veriﬁcation algorithm
Syntax: FLAG = Algver(α, β, m, s1, s2).
The executor sets FLAG = 1 if m = βs1sα
and sets FLAG = 0 otherwise.

2 mod α2,

The security of the Paillier digital signature is illustrated as
follows: If the DCRA holds, then, after obtaining signatures to

1DCRA: Given a composite C and an integer z, it is computationally
intractable to decide whether z is a C-residue modulo C2 or not, i.e., whether
there exists y such that z = yC mod C2.

9

any messages of its choice, an attacker cannot generate a pair
of signatures for a new message that can pass the veriﬁcation
with non-negligible probability.

REFERENCES

[1] S. Li, J. Lian, A. Conejo, and W. Zhang, “Transactive energy system:
Market-based coordination of distributed energy resources,” IEEE Con-
trol Systems Magazine, August 2020.

[2] Y. Gong, Y. Cai, Y. Guo, and Y. Fang, “A privacy-preserving scheme for
incentive-based demand response in the smart grid,” IEEE Transactions
on Smart Grid, vol. 7, no. 3, pp. 1304–1313, 2016.

[3] O. Tan, D. Gunduz, and H. V. Poor, “Increasing smart meter privacy
through energy harvesting and storage devices,” IEEE Journal on
Selected Areas in Communications, vol. 31, no. 7, pp. 1331–1341, 2013.
[4] S. Han, U. Topcu, and G. J. Pappas, “Event-based information-theoretic
privacy: A case study of smart meters,” in Proc. of American Control
Conference, 2016, pp. 2074–2079.

[5] A. R. Borden, D. K. Molzahn, B. C. Lesieutre, and P. Ramanathan,
“Power system structure and conﬁdentiality preserving transformation
of optimal power ﬂow problem,” in Proc. Fifty-ﬁrst Annual Allerton
Conference, 2013, pp. 1021–1028.

[6] A. R. Borden, D. K. Molzahn, P. Ramanathan, and B. C. Lesieutre,
“Conﬁdentiality-preserving optimal power ﬂow for cloud computing,”
in Proc. Fiftieth Annual Allerton Conference, 2012, pp. 1300–1307.
[7] C. Dwork, “Differential privacy,” in Proc. 3rd International Colloquium

on Automata, Languages and Programming, 2006, pp. 1–12.

[8] C. Dwork and A. Roth, “The algorithm foundations of differential
privacy,” Foundations and Trends in Theoretical Computer Science,
vol. 9, no. 3–4, pp. 211–407, August 2014.

[9] Z. Yang, P. Cheng, and J. Chen, “Differential-privacy preserving optimal
power ﬂow in smart grid,” IET Generation, Transmission and Distribu-
tion, vol. 11, no. 15, pp. 3853–3861, 2017.

[10] F. Zhou, J. Anderson, and S. H. Low, “Differential privacy of aggregated
DC optimal power ﬂow data,” in Proc. American Control Conference,
2019, pp. 1307–1314.

[11] X. Lou, R. Tan, D. K. Y. Yau, and P. Cheng, “Cost of differential
privacy in demand reporting for smart grid economic dispatch,” in IEEE
Conference on Computer Communications, 2017, pp. 1–9.

[12] A. Halder, X. Geng, P. R. Kumar, and L. Xie, “Architecture and
algorithms for privacy preserving thermal inertial load management by
a load serving entity,” IEEE Transactions on Power Systems, vol. 32,
no. 4, pp. 3275–3286, 2017.

[13] Y. Lu and M. Zhu, “A control-theoretic perspective on cyber-physical
privacy: Where data privacy meets dynamic systems,” Annual Reviews
in Control, vol. 47, pp. 423–440, 2019.

[14] D. Stevenson, N. Hillery, and G. Byrd, “Secure communications in ATM
networks,” Communications of the ACM, vol. 38, no. 2, pp. 45–52, 1995.
[15] L. Xie and G. R. Arce, “A class of authentication digital watermarks
for secure multimedia communication,” IEEE Transactions on Image
Processing, vol. 10, no. 11, pp. 1754–1764, 2001.

[16] T. Jiang, Y. Hou, and S. Zheng, “Secure communication between set-
up box and smart card in DTV broadcasting,” IEEE Transactions on
Consumer Electronics, vol. 50, no. 3, pp. 882–886, 2004.

[17] C. Fan, S. Huang, and Y. Lai, “Privacy-enhanced data aggregation
scheme against internal attackers in smart grid,” IEEE Transactions on
Industrial Informatics, vol. 10, no. 1, pp. 666–675, 2014.

[18] P. Paillier, “Public-key cryptosystems based on composite degree resid-
uosity classes,” in Proc. Advances in Cryptology, EUROCRYPT 1999,
1999, pp. 223–238.

[19] Y. Lu and M. Zhu, “Secure cloud computing algorithms for discrete
constrained potential games,” Proc. 5th IFAC Workshop on Distributed
Estimation and Control in Networked Systems, vol. 48, no. 22, pp. 180–
185, September 2015.

[20] ——, “Privacy preserving distributed optimization using homomorphic

encryption,” Automatica, vol. 96, no. 10, pp. 314–325, October 2018.

[21] Y. Shoukry, K. Gatsis, A. Alanwar, G. J. Pappas, S. A. Seshia, M. Sri-
vastava, and P. Tabuada, “Privacy-aware quadratic optimization using
partially homomorphic encryption,” in Proc. 2016 IEEE 55th Conference
on Decision and Control, December 2016, pp. 5053–5058.

[22] K. Kogiso and T. Fujita, “Cyber-security enhancement of networked
control systems using homomorphic encryption,” in Proc. 54th IEEE
Conference on Decision and Control, December 2015, pp. 6836–6843.
[23] F. Farokhi, I. Shames, and N. Batterham, “Secure and private control
using semi-homomorphic encryption,” Control Engineering Practice,
vol. 67, pp. 13–20, October 2017.

10

[24] N. M. Freris and P. Patrinos, “Distributed computing over encrypted
data,” in Proc. 54th Annual Allerton Conference on Communication,
Control, and Computing (Allerton), September 2016, pp. 1116–1122.

[25] M. Ruan, H. Gao, and Y. Wang, “Secure and privacy-preserving con-
sensus,” IEEE Transactions on Automatic Control, vol. 64, no. 10, pp.
4035–4049, October 2019.

[26] R. Petrlic, “A privacy-preserving concept for smart grids,” in Proc.

Sicherheit in Vernetzten Systemen, 2010, pp. B1–B14.

[27] F. D. Garcia and B. Jacobs, “Privacy-friendly energy-metering via
homomorphic encryption,” in Proc. International Workshop on Security
and Trust Management, 2010, pp. 226–238.

[28] F. Li, B. Luo, and P. Liu, “Secure information aggregation for smart
grids using homomorphic encryption,” in Proc. 1st IEEE International
Conference on Smart Grid Communications, 2010, pp. 327–332.
[29] T. Wu, C. Zhao, and Y. Zhang, “Privacy-preserving distributed optimal
power ﬂow with partially homomorphic encryption,” IEEE Transactions
on Smart Grid, 2021, accepted.

[30] Y. Lu, J. Lian, and M. Zhu, “Privacy-preserving transactive energy
systems,” in Proc. American Control Conference, 2020, pp. 3005–3010.
[31] J. Lian, H. Ren, Y. Sun, and D. J. Hammerstrom, “Performance
evaluation for transactive energy systems using double-auction market,”
IEEE Transactions on Power Systems, vol. 34, no. 5, pp. 4128–4137,
September 2019.

Jianming Lian (S’09–M’10–SM’21) received the
B.S. degree with the highest honor from the Uni-
versity of Science and Technology of China, Hefei,
China, in 2004, and the M.S. and Ph.D. degrees in
electrical engineering from Purdue University, West
Lafayette, IN, USA, in 2007 and 2009, respectively.
He is now a Distinguished R&D staff and the group
leader of Grid-interactive Controls Group in Energy
Science and Technology Directorate at Oak Ridge
National Laboratory (ORNL). Prior to that, he was
a Chief Engineer and Team Lead in Energy and
Environment Directorate at Paciﬁc Northwest National Laboratory. He has
served as the project manager, PI/Co-PI and key technical contributor of
many large projects focusing on the engagement and integration of various
distributed energy resources (DERs) into the future distribution management
system. He has established the theoretical foundation of market-based control
(aka. transactive control) for future transactive energy system. His research
interests focus on the diverse methods from control, optimization, economics,
game theory, data analytics and machine learning to improve the reliability
and resilience as well as security and sustainability of complex energy systems
including power grid and building system.

[32] R. Gordon, Power Systems in the IBM Cloud – IBM Enterprise
[Online]. Available: https://mainline.com/

Level Cloud Support.
power-systems-in-the-ibm-cloud-enterprise-level-cloud-support/
[33] C. Hazay and Y. Lindell, Efﬁcient Secure Two-Party Protocols–
Techniques and Constructions. New York, NY: Springer, 2010.
[34] D. Giry, “Cryptographic key length recommendation,” BlueKrypt, Tech.
Rep., 2017. [Online]. Available: https://www.keylength.com/en/8/
[35] C. Paar and J. Pelzl, Understanding Cryptography. Springer, 2010.
[36] Weather Uniderground: weather

record for Columbus.

[Online].

Available: https://www.wunderground.com/

[37] W. Marion and K. Urban, “User’s manual for TMY2s: Typical meteoro-
logical years: Derived from the 1961–1990 national solar radiation data
base,” National Renewable Energy Lab, Golden, CO, Tech. Rep., 1995.
[Online]. Available: http:

[38] PJM wholesale market energy price.

//pjm.com/markets-and-operations/energy.aspx

[39] AEP Ohio power company standard tariff.

[Online]. Available:

https://aepohio.com/account/bills/rates/AEPOhioRatesTariffsOH.aspx

[40] GridLAB-D Residential Module User’s Guide. [Online]. Available:

http://www.eps.ee.kth.se/personal/luigiv/pst/

Minghui Zhu is an Associate Professor in the
School of Electrical Engineering and Computer Sci-
ence at the Pennsylvania State University. Prior to
joining Penn State in 2013, he was a postdoctoral
associate in the Laboratory for Information and
Decision Systems at the Massachusetts Institute of
Technology. He received Ph.D. in Engineering Sci-
ence (Mechanical Engineering) from the University
of California, San Diego in 2011. His research in-
terests lie in distributed control and decision-making
of multi-agent networks with applications in robotic
networks, security and the smart grid. He is the co-author of the book
”Distributed optimization-based control of multi-agent networks in complex
environments” (Springer, 2015). He is a recipient of the Dorothy Quiggle
Career Development Professorship in Engineering at Penn State in 2013, the
award of Outstanding Reviewer of Automatica in 2013 and 2014, and the
National Science Foundation CAREER award in 2019. He is an associate
editor of the IEEE Open Journal of Control Systems, the IET Cyber-systems
and Robotics and the Conference Editorial Board of the IEEE Control Systems
Society.

Yang Lu is a Lecturer (Assistant Professor) of the
Systems Security Group in the School of Computing
and Communications at the Lancaster University. He
received Ph.D. degree in Electrical Engineering from
the Pennsylvania State University (PSU) in 2020,
B.E. and M.E. degrees in Electrical Engineering
from Shanghai Jiao Tong University in 2010 and
2013, respectively, and M.S. degree in Electrical En-
gineering from the Georgia Institute of Technology,
in 2013. From September 2020 to August 2021, he
worked as a postdoctoral scholar in the School of
Electrical Engineering and Computer Science at PSU. From January 2019 to
May 2019, he worked as a Ph.D. intern at the Paciﬁc Northwest National
Laboratory. From March 2013 to June 2014, he worked as a visiting scholar
in the School of Electrical and Computer Engineering at the Georgia Institute
of Technology. His research interests mainly focus on cyber-physical privacy
and security, distributed control and optimization of multi-agent networks, and
machine learning. He is a recipient of the Dr. Nirmal K. Bose Dissertation
Excellence Award at PSU in 2019.

Ke Ma received the B.E. degree in automation
from Tsinghua University, Beijing, China, in 2012,
and the Ph.D. degree in electrical and computer
engineering from the Department of Electrical and
Computer Engineering, Texas A&M University, Col-
lege Station, TX, USA in 2018. He is currently
an electrical engineer at the Optimization and Con-
trol Group, Paciﬁc Northwest National Laboratory
(PNNL), Richland, WA, USA. His research inter-
ests include dynamic mechanism design and its
application in electricity market, and market-based
(transactive) coordination and control of distributed energy resources (DERs).

