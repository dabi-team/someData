Multi-Source Data Fusion for Cyberattack Detection
in Power Systems

Abhijeet Sahu˚, Zeyu Mao˚, Patrick Wlazlo˚, Hao Huang˚, Katherine Davis˚,
Ana Goulart˚, and Saman Zonouz˚

1
2
0
2

n
a
J

8
1

]

G
L
.
s
c
[

1
v
7
9
8
6
0
.
1
0
1
2
:
v
i
X
r
a

Abstract—Cyberattacks can cause a severe impact on power
systems unless detected early. However, accurate and timely
detection in critical infrastructure systems presents challenges,
e.g., due to zero-day vulnerability exploitations and the cyber-
physical nature of the system coupled with the need for high
reliability and resilience of the physical system. Conventional
rule-based and anomaly-based intrusion detection system (IDS)
tools are insufﬁcient for detecting zero-day cyber intrusions in
the industrial control system (ICS) networks. Hence, in this work,
we show that fusing information from multiple data sources can
help identify cyber-induced incidents and reduce false positives.
Speciﬁcally, we present how to recognize and address the barriers
that can prevent the accurate use of multiple data sources for
fusion-based detection. We perform multi-source data fusion for
training IDS in a cyber-physical power system testbed where
we collect cyber and physical side data from multiple sensors
emulating real-world data sources that would be found in a
utility and synthesizes these into features for algorithms to
detect intrusions. Results are presented using the proposed data
fusion application to infer False Data and Command injection-
based Man-in- The-Middle (MiTM) attacks. Post collection,
the data fusion application uses time-synchronized merge and
extracts features followed by pre-processing such as imputation
and encoding before training supervised, semi-supervised, and
unsupervised learning models to evaluate the performance of the
IDS. A major ﬁnding is the improvement of detection accuracy
by fusion of features from cyber, security, and physical domains.
Additionally, we observed the co-training technique performs at
par with supervised learning methods when fed with our features.

Index Terms—Multi-sensor fusion, Data pre-processing, Su-
pervised Learning, Unsupervised learning, Co-training, Manifold
Learning, Real-time Testbed, Man-in-The-Middle.

I. INTRODUCTION

Multi-sensor data fusion is a widely-known research area
adopted in many areas including military, medical science, and
ﬁnance as well as in the energy sector. Recently, automatic
driving systems widely use data fusion to fuse images and
videos from similar or disparate sensor types [1]. In power
systems, most fusion applications are currently intradomain
and consider only physical data. Examples include fault de-
tection [2] and intrusion detection using Principal Component
Analysis (PCA) [3]. Similarly, for network protection in indus-
trial control systems (ICS), intrusion detection systems (IDS)
such as Snort, BRO, Suricatta, etc., are increasingly used.
These offer a pure cyber-centric approach that results in high
false alarms [4] Combining the beneﬁts of visibility of both
cyber and physical, cross-domain data fusion has the potential
to help methodically and accurately detect mis-operations and

measurement tampering in power systems caused by cyber
intrusions.

In power system operations, the telemetry used for collect-
ing wide area measurements may have errors due to sensor
damage or cyber-induced compromise; if undetected, appli-
cations that rely on these data can become unreliable and/or
untrustworthy. Sensor veriﬁcation based on multi-source multi-
domain measurement collection and fusion can be performed
to solve such problems, and it is a valuable mechanism for
detection and detailed forensics of cyber intrusions targeting
physical impact. While offering numerous potential beneﬁts,
fusion for attack detection in real-world utility-scale power
systems presents challenges that hinder adoption including the
creation, storage, processing, and analysis of the associated
large datasets. Fortunately, with the proliferation of affordable
computing capability for processing high-dimensional data,
it
is becoming more feasible to deploy fusion techniques
for accurately detecting intrusions. Thus, research is needed
to take advantage of these data and computing capabilities
and create fusion-based detection techniques that solve this
problem.

Cyberattacks often progress in multiple stages, e.g., initiat-
ing with a reconaissance phase, executing intrusions and vul-
nerability exploitations, and culminating in actions targeting
the physical system such as manipulating measurements and
commands. The events that comprise these incidents and pro-
vide forensics about what occurred are not reﬂected using only
coarse cyber-side features. Additionally, the system dynamics
in both cyber and physical space vary considerably; this causes
challenges in merging data. For example, an intruder may take
months in the reconaissance phase, but during this period,
none of the physical side features reﬂect any abnormality.
Similarly, later when an intruder is injecting false commands
or tampering measurements, most of the cyber side features do
not reﬂect any abnormality, assuming the adversary is stealthy.
Sensor time resolution varies across domains and within
domains, which causes challenges when merging the data.
The resolution of physical measurements depends on polling
rates as well as the speciﬁcations of the device. For example,
phasor measurement units (PMUs) provide GPS synchronized
data at subsecond data rates, supervisory data acquisition and
control (SCADA) systems provide data on the seconds to
minutes time frame, and smart meters deployed residentially
may have hourly resolution [5]. Relays monitoring system
transients have resolution on the order of milliseconds. Simi-
larly, network logs and IDS such as Snort have resolution of

1

 
 
 
 
 
 
milliseconds. Data fusion solutions for cyber-physical power
systems must be able to effectively handle the range of time
scales.

The use of machine learning (ML) and deep learning (DL)
for intrusion detection faces the problem that
the trained
model’s effectiveness depends on the data collected; it is a
challenge to obtain a realistic baseline and to use realistic
data to validate the solution for a real-time cyber-physical
system. Detection is affected by the choice of data processing
techniques applied (e.g., balancing, scaling, encoding). The
impact of such factors on detection accuracy must therefore
be quantiﬁed before the techniques can be trusted for use in
securing critical infrastructure.

The hypothesis of this work is that

the use of fused
data from cyber and physical domains can enable better
attack detection performance than either domain separately,
if the challenges above are addressed. Hence, we present
a heterogeneous-source platform that fuses data and detects
cyber intrusions. First, we provide interfaces for collecting
data sources from cyber and physical side emulators. Then,
we use these interfaces to collect real-time data from cyber,
physical, and security domains; ﬁnally, we fuse the datasets
and detect cyber intrusions. We aggregate and merge real-
time sensor data from multiple sources including Elasticsearch
[6], TShark [7], raw packet captures with DNP3 trafﬁc, and
Snort logs [8] that are created during emulation of Man-in-
the-Middle attacks on a synthetic electric grid, modeled in
the Resilient Energy Systems Laboratory (RESLab) testbed
[9]. Fig. 1 gives an overview of the multi-source data fusion
presented. The major contributions of this paper are as follows:

1) To present the aggregation and merging of real-time
sensor data from multiple sources for cyberattack detec-
tion in a cyber-physical testbed emulation of a synthetic
electric grid.

2) To quantify the value of different data pre-processing
techniques such as balancing, normalization, encoding,
imputation, feature reduction, and correlation before
training the machine learning models.

3) To demonstrate the improved detection capability of
models built from fused dataset performance by compar-
ing with pure cyber and physical feature based intrusion
detection models.

4) To evaluate the performance of the supervised, unsu-
pervised and semi-supervised learning based intrusion
detection for use cases explored in the MiTM attacks.

The paper proceeds as follows. Section II provides back-
ground on data fusion techniques incorporated in areas such
as military, healthcare, software ﬁrms, security, and cyber-
physical systems. In Section III, we discuss the RESLab
architecture, the attack types considered, and the data fusion
procedure. The details on the data sources, the data fusion
types, and the dataset transformations used in this work are
presented in Sections IV, VI, and V respectively. Finally,
intrusion detection based on unsupervised, supervised, and
semi-supervised learning methods is presented in Section VII.

Set up testbed archi-
tecture in RESLab

MiTM attacks in synthetic
electric grid in RESLab

Collect sensor data
from multiple sources

Integration of data aggregator
for merging real-time data

Data pre-processing techniques

Compare performance of
models from fused dataset
with other IDS models

Fig. 1. Multi-source data fusion steps

Experiments are performed for four use cases, and results are
analyzed in Section VIII and ﬁnally concluding the paper in
Section IX.

II. DATA FUSION BACKGROUND

A. Multi-Sensor Data Fusion

The goal of multi-sensor data fusion is to make better
inferences than those that could be accrued from a single
source or sensor. According to Mathematical Techniques in
Multisensor Data Fusion [10], multi-sensor data fusion is
deﬁned as “a technique concerned with the problem of how
to combine data from multiple (and possibly diverse) sensors
in order to make inferences about a physical event, activity,
or situation.” A data fusion process is modeled in three ways:
a) functional, b) architectural, and c) mathematical [10]. A
functional model illustrates the primary functions, relevant
databases, and inter-connectivity to perform fusion. It involves
primarily ﬁltering, database creation, and pre-processing such
as scaling and encoding, etc. An architectural model speciﬁes
hardware and software components, associated data ﬂows, and
external interfaces [11]. For example, it models the location
of the fusion tool in a testbed. The fusion architecture can be
three types: centralized, autonomous, and hybrid [10]. In cen-
tralized architectures, either raw or derived data from multiple
sensors are fused before they are fed into a classiﬁer or state
estimator. In autonomous architectures, the features extracted
are fed to the classiﬁers or estimators for decision making
before they are fused. The fusion techniques used in the second
case involve techniques including Bayesian [12] and Dempster

2

Shafer inference [13], because these fusion algorithms are fed
with the probability distributions computed from the classiﬁers
or the estimators. The hybrid type mixes both centralized and
autonomous architectures. The mathematical model describes
the algorithms and logical processes.

A holistic data fusion method must consist of all three: func-
tional, architectural, and mathematical models. The functional
model deﬁnes the objective of the fusion. Since the goal of
this work is to detect intrusions, we must determine which
data are due to cyber compromise. Functional goals may also
include estimating the position of the intruder in the system or
estimating the state of an electric grid, where the preprocessing
techniques to use vary based on the goal. The architecture
model deﬁnes the sequence of operations. Our fusion follows
the centralized architecture. Finally, the mathematical model
deﬁnes how these features are processed and merged. Section
IV details our fusion models.

B. Multi-Sensor Fusion Applications

Recently, work on multi-sensor fusion has been adopted in
the areas of computer vision, automatic vehicle communica-
tion, and it is entering into the areas of power systems. The
authors in [14] review multi-sensor data fusion technology,
including beneﬁts and challenges of different methods. The
challenges are related to data imperfection, outliers, modality,
correlation, dimensionality, operational
inconsisten-
cies, etc. For example, different time resolutions of sensors
result in under-sampling or over-sampling data in some sen-
sors. The response time of certain sensors also vary depending
on the sensor age and type. Data received from multiple
sensors must be transformed to a common spatial and temporal
reference frame [10]. Imperfection is dealt using fuzzy set
theory, rough set theory, Dempster Shafer theory, etc.

timing,

Multi-sensor data fusion is used in military applications
for automated target recognition, battle-ﬁeld surveillance, and
guidance and control of autonomous vehicles [15]. Further,
the idea has been expanded to non-defense areas such as
medical diagnosis, smart buildings, and automatic vehicular
communications [16]. Authors in [17] explore techniques in
multi-sensor satellite image fusion to obtain better inferences
regarding weather and pollution. Data fusion has also been
proposed to accurately detect energy theft from multiple
sensors in advanced metering infrastructure (AMI) in power
distribution systems [18].

Data fusion is expanded in

[19] from cyber-physical
systems (CPSs) to cyber-physical-social systems (CPSSs) with
the use of tensors. Algorithms proposed for mining hetero-
geneous information networks cannot be directly applied to
cross-domain data fusion problems; fusion of the knowledge
extracted from each dataset gives better results [20].

C. Data Fusion in Power Systems

The data from diverse domains play a major role in power
system operation and control. Weather data is vital for fore-
casting, e.g., for solar, wind, and load, to schedule generation.
Data in cyberspace include data that provide for automation

in power system ICS and play a crucial role in wide area
control and operation in the electric grid. However, to proceed
with multi-domain fusion, the following question must ﬁrst be
answered: To what measurable quantities do cyber data and
physical data refer?

A simple example of cyber data in ICS is a spool log
of a network printer in the control network. It is crucial to
question, could we have prevented the attack on the centrifuge
in the Natanz Uranium Enrichment plant, if we had a logger
to record the events of a machine with shared printer, so as
to prevent the exploitation of remote code execution on this
machine? The answer is no, because there were many other
vulnerabilities such as WinCC DB exploit, network share, and
server service vulnerability, in parallel to print server vulnera-
bility that compromised the Web Navigation Server which was
connected to the Engineering Station that conﬁgured the S7-
315 PLCs which over-speeded the centrifuge [21]. Hence, the
deployment of cyber telemetry in every computing node in an
ICS network is a solution which seems attractive but results
in numerous false alarms. Then, the question arises, can we
reduce such alerts by amalgamating such data with data from
physical sensors?

Data fusion proposed in the areas of power systems are
mainly intra-domain. Existing works do not consider fusion of
cyber and physical attributes for intrusion detection together. A
probabilistic graphic model based power systems data fusion is
proposed in [22], where the state variables are estimated based
on the measurements from heterogeneous sources by belief
propagation using factor graphs. These probabilistic models
require the knowledge of the priors of the state variables and
also assume the measurements to be trustworthy. Hence, such
solutions cannot detect cyber induced stealth false data injec-
tion attacks. Several works on false data injection detection are
based on machine learning [23]–[26] and deep learning [27]–
[32] techniques. The authors in [33] address stealthy attacks
using multi-dimensional data fusion by collecting information
from power consumption of physical devices, control operation
and system states feed to the cascade detection algorithm
to identify stealthy attack using Long Short Term Memory
(LSTM). Machine learning techniques including clustering are
used in power system security for grouping similar operating
states (emergency, alert, normal, etc.) to automatically identify
the subset of attributes relevant for prediction of the security
class. A decision tree based transient stability assessment of
the Hydro-Quebec system is presented in [34]. Techniques of
fusion for fault detection [2] and real-time intrusion detection
using Principal Component Analysis (PCA) (PCA) [3] are
speciﬁc to the physical domain. Design of such models require
data fusion and must consider impending system instabilities
that can be caused by cyber intrusions.

Cymbiote [35] multi-source sensor fusion platform is one
of the work, equivalent to ours, that have leveraged fusion
from multiple cyber and physical streams and trained with only
supervised learning based IDS. Moreover, their work doesnt
clearly describes the features extracted from different sources.

3

Fig. 2. Centralized fusion architecture. In the autonomous architecture the Fusion and Learning blocks will be interchanged with an addition of another
Learning block post fusion.

D. Multi-Domain Fusion Techniques

E. Data Creation, Storage, and Retrieval

Techniques such as co-training, multiple kernel learning,
and subspace learning are used for data fusion problems. Co-
training based algorithms [36] maximizes the mutual agree-
ment between two distinct views of the data. This technique
is used in fault detection and classiﬁcation in transmission
and distribution systems [37] as well as in network trafﬁc
classiﬁcation [38]. To improve learning accuracy, Multiple
kernel learning algorithms [39] are also considered, which
utilize kernels that implicitly represent different views and
combines them linearly or non- linearly . Subspace learning
algorithms [40] aim to obtain a latent subspace shared by
multiple views, assuming that the input views are generated
from this latent subspace. DISMUTE [41] performs feature
selection for multi-view cross-domain learning. Multi-view
discriminant transfer (MDT) [42] learns discriminant weight
vectors for each view to minimize the domain discrepancy and
the view disagreement simultaneously. These techniques can
be used for cross-domain data fusion.

Coupled matrix factorization and manifold alignment meth-
ods are used for similarity based data fusion [20]. These
methods can be implemented intra-domain with multiple data
sources. Manifold alignment is another technique that generate
projections between disparate data sources, but assumes the
generating process shares a common manifold. Since the
primary goal in this work is to fuse datasets from inter-domain
such methods may not be effective enough. Still we have
explored manifold learning for the purpose of feature reduction
to train the supervised learning based classiﬁer.

To the best of our knowledge, co-training has not yet been
implemented in an intrusion detection system that uses inter-
domain fusion. Hence, in this work, we perform co-training in
inter-domain fused datasets by splitting the dataset into cyber
and physical views.

The storage and retrieval of multi-sensor data play a major
role in fusion and learning. A relational database management
system (DBMS) is predominantly used in traditional EMS ap-
plications. For example, B.C. Hydro proposes a data exchange
interface in a legacy EMS and populates a relational database
with the schematic of the Common Information Model (CIM)
deﬁned in IEC 61970 [43]. With the proliferation of multiple
protocols and data from diverse sources, it is difﬁcult to con-
struct the Entity Relationship model of a relational database
management system (RDBMS), since the schema cannot be
ﬁxed. Since NoSQL stores unstructured or semi-structured
data, usually in the key-value pairs or JSON documents,
NoSQL is highly encouraged to make use of database such
as Elasticsearch [6], MongoDB [44], Cassandra [45], etc., for
multi-sensor fusion with heterogeneous sources.

Creation of multi-domain datasets to advance the research
is a challenging task, since it requires development of a cyber-
physical testbed that processes real-time trafﬁc from different
simulators, emulators, hardware, and software. Currently, few
datasets are publicly available that provide features from di-
verse domains and sources. Most of the datasets are simulator-
speciﬁc, which restricts the domain to either pure physical
or cyber. The widely-known KDD [46] and CIDDS [47]
datasets used in developing ML-based IDS for bad trafﬁc
detection and attack classiﬁcation are centric to features in
the cyber domain [48]. Tools such as MATPOWER [49]
and pandapower [50] provide datasets for physical-side bad
data detection. Datasets that include measurements related to
electric transmission systems including normal, disturbance,
control, and cyberattack behaviors are presented in [51]–
[54]. The datasets contain phasor measurement unit (PMU)
measurements, data logs from Snort, and also data from a
gas pipeline and water storage tank plant. The features in
these datasets lack ﬁne-grained details in the cyber, relay, and
control spaces, as all the features are binary in nature. A cyber-
physical dataset is presented in [55] for a subsystem consisting

4

of liquid containers for fuel or water, with its automated
control and data acquisition infrastructure showing 15 real-
world scenarios; while it presents a useful way of framing
the data fusion problem and approaches for cyber-physical
systems (CPS), it is not power system speciﬁc.

A problem in training machine learning (ML) or deep
learning (DL) models for intrusion detection through classi-
ﬁcation, clustering, and ﬁne-tuning hyper-parameters is that
its effectiveness depends on the data collected. That is, a
practical challenge is to obtain a baseline which needs to
come from realistic data. Emulation is preferred to simulation
for CPS networks since a simulator demonstrates a network’s
behavior while an emulator functionally replicates its behavior
and produces real data. Using real data is important to validate
that ML or DL solutions address the actual challenges faced
in the data from a real-time cyber-physical system.

The performance of ML and DL models is impacted by
the choice of data processing techniques applied to the inputs
such as balancing, scaling, or encoding before training the
models. The effect of these preprocessing techniques needs to
be quantiﬁed on the outputs of such ML models before they
can be trusted for use in industry.

III. DATA FUSION ARCHITECTURE

Before discussing the data fusion procedures, it is essential
to understand the architecture of the RESLab testbed that is
producing the data during emulation of the system under study.

A. Testbed Architecture

The RESLab testbed consists of a network emulator, a
power system emulator, an OpenDNP3 master and a RTAC
based master, an intrusion detection system, and data stor-
age, fusion and visualization software. A brief overview of
each component is given below. The detailed explanation of
RESLab including its architecture and use cases is provided
in [9].

‚ Network Emulator - Common Open Research Emulator
(CORE) is used to emulate the communication network
that consists of routers, linux servers, switches, ﬁrewalls,
IDSes and bridges with other components emulated with
other virtual machines (VMs) in vSphere environment.
‚ Power Emulator - Power World Dynamic Studio (PWDS)
is a real-time simulation engine for operating the simu-
lated power system case in real-time as a DS server [56].
It is used to simulate the substations in the Texas 2000
case as DNP3 outstations. [57].

‚ DNP3 Master - DNP3 Masters are incorporated using
an open DNP3 based application (both GUI and console
based) and a SEL-3530 Real-Time Automation Controller
(RTAC) that polls measurements and operates outstations,
sending its trafﬁc through CORE to the emulated outsta-
tions in PowerWorld DS.

‚ Intrusion Detection System - Snort is used in the testbed
as the rule-based, open-source intrusion detection system
(IDS). It is conﬁgured to generate alerts for Denial of
Service (DoS), MiTM, and ARP cache poisoning based

attacks. Currently Snort is running as a network IDS in
the router in the substation network.

‚ Storage and Visualization - The Elasticsearch, Logstash,
and Kibana (ELK) stack is used to probe and store all
virtual and physical network interface trafﬁc. In addition
to storing all Snort alerts generated during each use case,
this data is able to be queried using Lucene queries to
perform in depth visualization and cyber data correlation.
‚ Data Fusion - A different VM is dedicated to operate the
fusion engine that collects network logs and Snort alerts
from ELK stack using an Elasticsearch client and raw
packet captures from CORE using pyshark. This engine
constructs cyber and physical features and merges them
using the time stamps from different sources to ensure
correct alignment of information. Further it pre-processes
them using imputation, scaling and encoding before
training them for intrusion detection using supervised,
unsupervised and semi-supervised learning techniques.
This VM is equipped with resources to utilize ML and
DL based library such as scikit, Tensorﬂow and Keras to
train the engine for classiﬁcation, clustering and inference
problem.

Fig. 3. Testbed architecture with data fusion

There can be considered three broad kinds of IDS for
ICS: protocol analysis based IDS, trafﬁc mining based IDS,
control process based IDS [58]. The fusion engine in RESLab
combines all these types. It performs protocol speciﬁc feature
extraction from data link, network, transport layers alongwith
DNP3 layer, control and measurement speciﬁc information
through DNP3 payload and headers, trafﬁc mining by extract-
ing network logs from multiple sources.

B. Attack Experiments

Now that we have discussed the architecture of the testbed,
we delve further into how this testbed is utilized to demon-
strate a few cyber attacks targeting the grid operation. The
threat model we consider is based on emulating multi-stage
attacks in a large-scale power system communication network.
In the initial stage, the adversary gains access to the substation
LAN through Secure Shell (SSH) access, further performing
DoS and ARP cache poisoning based MiTM attack to cause
False Data injections (FDI) and False Command injections
(FCI).

5

In Man-in-the-Middle attacks, usually the adversary secretly
observes the communication between sender and receiver and
sometimes manipulates the trafﬁc between both ends. There
are different ways to perform MitM such as IP spooﬁng, ARP
spooﬁng, DNS spooﬁng, HTTPS spooﬁng, SSL hijacking,
stealing browser cookies, etc. In this current work, we focus
on MitM using ARP spooﬁng. ARP spooﬁng or poisoning is a
type of attack in which an adversary sends false ARP messages
over a local network (LAN). This results in the linking of an
adversary’s MAC address with the IP address of a legitimate
machine on the network (in our case, the outstation VM). This
attack enables the adversary to receive packets from the master
as an impersonator for the outstation and modify commands
and forward them to the outstation. In this way, the adversary
can cause contingencies such as misoperation of the breakers.
The attack is not only to modify but also to sniff the current
state of the system since it can receive the outstation response
to the master.

The MiTM attacks are performed considering the four
use cases targeting different part of the Texas synthetic grid
following different strategies presented in detail in [9]. The
use cases are combinations of FDI and FCI attacks performed
with different polling rates from the DNP3 Master and the
number of master application considered. In our previous
work, we demonstrated Snort IDS based detection which
resulted in many false positives. In this work, we employ
fusion techniques, along with machine learning techniques, to
enhance the accuracy of detection by evaluating them using
F1-scores, Recall, and Precision values.

C. Data Fusion Procedure

The steps followed in the data fusion engine, from extract-
ing the features from different sources, with their merge of
pyshark, snort, packetbeat, raw packet capture to form cyber
table, and the ﬁnal fusion of cyber and physical table, with the
steps of imputation, encoding and visualization is presented
in Alg. 1. The details of the sensor sources and the data
processing will be discussed in details in the next sections.

Algorithm 1 Data Fusion Procedure

1. Load json from raw pcaps.
2. Extract cyber features: network, transport, datalink layer infor-
mation and store as raw cyber data.
3. Extract features using pyshark.
4. Merge pyshark to the raw cyber data.
5. Extract snort alert.
6. Merge snort to the raw cyber data.
7. Extract features from packetbeat index in elasticsearch.
8. Merge packetbeat features to raw cyber data.
9. Extract DNP3 features (DNP3 points and headers) from raw
packet capture.
10. Fuse cyber data with physical data.
11. Imputate missing values.
12. Encode categorical features.
13. Visualize the merged table.

D. Fusion Challenges

The most challenging task in fusion is to perform merge
operations, because of the different time stamps generated
at different sensors. An event will trigger the time stamped
measurements at the sensors. Hence, each sensor’s location
impacts the time at which the event is recorded. Domain
knowledge has been used to write the algorithm to merge
different sources meticulously. For example, Elasticsearch’s
Packetbeat index stores each record that reﬂects the trafﬁc
between a given small time interval. Each record has an event
start and end time. While merging Elasticsearch features, such
as ﬂow count attribute, we have to compare the raw packet
timestamp and event start and end time of Elasticsearch to
calculate the ﬂow counts. Moreover, the number of records
in the power system side will be less than the cyber side,
as events in power system side are triggered based on the
polling frequency as well as on the time at which an operator
performs a control operation. Hence we remove missing data
for the records that do not have any physical side trafﬁc.

IV. MULTI SENSOR DATA

A sensor’s data is the output or readings of a device that
detects and responds to changes in the physical environment.
Every sensor has a unique purpose that helps create crucial
features that can assist in intrusion detection. In RESLab, the
cyber sensors are deployed as Wireshark instances at different
locations in the network for raw packet capture. Additionally,
monitoring tool such as Packetbeat are integrated for extracting
network ﬂow-based information. For security sensors, Snort
IDS logs and alerts are considered. Since the physical system
is emulated with PWDS acting as a collection of DNP3 out-
stations, the real-time readings provided by physical sensors
are extracted from the observed measurements at the DNP3
master, from the application layer of the raw packet captured
at the DNP3 master. The extractions of these multiple sensors
are explained in detail:

A. Raw pcaps from json

The packet captures from Wireshark are packet dissected
and saved in the json format, which are loaded using the
panda data frame. Further, from the json, around 12 features
from physical, datalink, network, and transport layer of OSI
stack are extracted, as shown in Table I. The features primarily
consist of the source and destination IP and MAC addresses,
along with the port numbers, ﬂags, and lengths in these layers.

B. Elasticsearch

Real-time trafﬁc collection is performed from network in-
terfaces in CORE, using the Packetbeat plugin in the ELK
stack. The Packetbeat plugin helps us extract the ﬂow-based
information such as Flow Count, Flow Count Final, Packets
shown in Table I. Elasticsearch queries are based on Lucene,
the search library from Apache. Kibana is used to visualize the
graphs and real time data visualization for packetbeat index.
An example query is shown below:

6

"query": {

"bool": {

"must": [

{ "range": {

"event.end": {
"gte": "2020-01-22T00:00:00.0

00Z",

"lte": "2020-01-26T00:00:00.0

00Z"}}

},
{"range": {

"event.duration": {

"gte": 0,
"lte": 3000000}}

},
{"bool":
{"should": [
{"match": {

"destination.port": "20000"}}

,
{"match": {

"source.port": "20000"}}

]

}
},
{"match":

{"flow.final": "true"}

}

]}}

The above query returns the records with event start time
2020 ´ 01 ´ 22T 00 : 00 : 00.000Z and end time 2020 ´
01 ´ 26T 00 : 00 : 00.000Z, and the event duration is within
0 ´ 300000 ms, and the source or destination port is 20000
(port number associated with DNP3), and the ﬂow is a f inal
ﬂow. Keyword must designates an AN D operation, should
is an OR operation, and match is an equals to operation.
A logstash index is also created in Elasticsearch to store the
logs of Snort alerts, which is also extracted along with the
packetbeat index.

There are two operations on the response from Elastic-
search: a) Extraction of essential features b) M erge of
features to the existing cyber features data frame cb table
from raw packet captures. Each record in the packetbeat index
is stored in the form of an event with start and end times. In
the extraction phase, we extract the source.packets, f low.id,
f low.f inal, event.end, event.start, f low.duration features
and store them in a new data frame pb table. The merge
operation of pb table into the existing cyber features is non-
trivial due to different timestamps in existing features and
features from packetbeat. We compute the features in Ta-
ble I f low.count, f low.f inal count, and packets using the
features of event.endpendq, event.startpstartq in pb table
and T ime in the cb table based on the logical OR of three
conditions:

1) Condition 1 : add counters if the event start is within
the range of current and next records in the cyber table

cb tablerisrts ď start^cb tableri`1srts ě start (1)

2) Condition 2 : if the event end is within the range of

current and next records in the cyber table.

cb tablerisrts ď end ^ cb tableri ` 1srts ě end (2)

3) Condition 3 : if the event start is less than the current
record and event end is greater than the next record in
the cyber table.

cb tablerisrts ě start ^ cb tableri ` 1srts ď end (3)

The _ and ^ are the logical or and and operators re-
spectively. In this manner, we merge the three features from
pb table to the cb table.

C. Pyshark

for

tshark,

Pyshark is

a Python wrapper

allowing
python packet parsing using Wireshark dissectors. Us-
ing P yshark features
such as Retransmissions and
RoundT ripT imepRT T q are obtained. The RTT is the time
duration for a signal or message to be sent plus the time it
takes for the acknowledgment of that signal to be received. It
has been observed that if congestion is created in any location
in between the source and destination such as router or switch,
the RTT increases. It also increases due to DoS attacks on the
servers or any intermediery nodes in the path between source
and destination. The T CP based packet follows different
retransmission policies based on the TCP congestion control
ﬂavour. Hence, the number of retransmission packets ob-
served within a given time frame is an indicator of loss of
communication or increased delay. Usually, a sender retrans-
mits a request if it did not receive an acknowledgment after
some multiples of a RT T , whose multiplicity is dependent
on the TCP ﬂavour. The retransmission and RT T features
are selected, as features are correlated and directly related to
attacks targeting availability and integrity.

D. Snort

The router inside the CORE emulator runs the Snort daemon
based on the speciﬁc rules, pre-processors, and decoders
enabled in the conﬁguration ﬁle to create logs. Snort operates
in three modes: packet sniffer, packet logger, and intrusion
detection system (IDS) modes. We run the snort in the IDS
mode. The alerts generated at the router in the substation
network is continuously probed during the simulation. The
alerts are recorded in the form of the unif ied2 format as
well as pushed to the Logstash index created in Elasticsearch.
Uniﬁed2 works in three modes, packet logging, alert logging,
and true uniﬁed logging. We run Snort in alert logging mode
to capture the alerts, timestamped with alert time. Further, the
idstools python package is utilized to extract these unif ied2
formatted logs. The Snort conﬁguration determines which
rules and preprocessor are enabled. The features extracted are
the alert,alert type, and timestamp. The merge into the

7

cb table is performed based on the timestamp of each Snort
record. The record is inserted based on the condition:

TABLE I
DESCRIPTION OF THE FEATURES USED IN DATA FUSION.

Features Description

cb tablerisrts ě timestamp ď cb tableri ` 1srts

(4)

E. Physical Features from DNP3

The Distributed Network Protocol version 3 (DNP3) is
widely used in SCADA systems for monitoring and control.
This protocol has been upgraded to use TCP/IP in its trans-
port and network layer. It is based on the master/outstation
architecture, where ﬁeld devices are at outstations and the
monitoring and control is done by the master. DNP3 has its
own three layers: a) Data Link Layer, to ensure reliability of
physical link by detecting and correcting errors and duplicate
frames, b) Transport Layer,
to support fragmentation and
reassembly of large application payload, and c) Application
Layer, to interface with the DNP3 user software that monitors
and controls the ﬁeld devices. Every outstation consists of a
collection of measurements such as breaker status, real power
output, etc., which are associated with a DNP3 point and clas-
siﬁed under one of the ﬁve groups: binary inputs (BI), binary
outputs (BO), analog inputs (AI), analog outputs (AO), and
counter input. The physical features consist of the information
carried in the headers in the three layers of DNP3, along
with the values carried by the DNP3 points in the application
layer payload. Every DNP3 payload’s purpose is indicated
by a header in the application layer called function code
(FC). In our simulations, we extract the features with FCs:
1(READ), 5(DIRECT OPERATE), 20 (ENABLE spontaneous
message), 21(Disable spontaneous message), and 129 (DNP3
RESPONSE). The details of the features are in Table I.

V. FUSION
As presented in Fig. 2, the Fusion block involves different
types of fusion. Intra-domain and inter-domain are consid-
ered for training the IDS using supervised and unsupervised
learning techniques. We also explore location-based fusion and
visualization for causal inference of the impact of the intrusion
in different locations of the network. Finally, co-training with
feature split is used to train the IDS using semi-supervised
learning with labeled and unlabeled data.

A. Intra-Domain and Inter-Domain Fusion

Fusion of cyber sensor information from different sources
is homogeneous source fusion. For example, the operation of
fusing Elasticsearch logs with pyshark or raw packet capture
to form the cyber table is intra-domain fusion.

Fusion of cyber and physical sensor information from
different sources is heterogeneous source fusion. For example,
the operation of fusing cyber table with physical table is
inter-domain fusion.

B. Location-Based Fusion

In multi-sensor data fusion, sensor location plays a major
role. For example,
the military uses location-based multi-
sensor fusion to estimate the location of enemy troops by
amalgamating sensor information from multiple radars and

Def

0

Nan

0

0

0
0

0

0x00

0

0

0

0x00

0

-1

-1

-1

-1
0

Length of the frame after network, transport and applica-
tion header and payload are added and fragmented based
on the channel type. For ethernet, the frame length can
be max. 1518 bytes, which varies for wireless channels.
Determines the list of protocols in the layers above link
layer encapsulated in the frame.

Unique source MAC address. Crucial for detection in
ARP spoof attacks.

Unique destination MAC address. Crucial for detection
in ARP spoof attacks.

Unique source IP address.
Unique destination IP address.
Stores the length of the header and payload in a IP-based
packet. This correlates well with the DNP3 payload size.
Indicator of fragmentation caused due to link or router
congestion in the intermediary nodes.

Indicates the port number used by the source application
using TCP in transport layer. Ex: if the source is the
DNP3 outstation, default port is 20000.
Indicates the port number used by the destination appli-
cation using TCP in transport layer.

Stores the length of the header and payload in a TCP-
based segment. This correlates well with the DNP3
payload size.
Flags are used to indicate a particular state of connection
such as SYN, ACK, etc.

Frame
Len

Frame
Prot.

Eth
Src

Eth
Dst
IP Src
IP Dst

IP Len

IP
Flags

Src
Port

Dest
Port

TCP
Len

TCP
Flags

Retrans.

RTT

Indicates if the current record is from a retransmitted
packet, caused due to attack or network congestion.
Indicator of propagation and processing delay. High RTT
can be caused due to MiTM attack.
Indicates the number of TCP ﬂows in a speciﬁc time
interval. Indicates the connected and disconnected DNP3
masters. Flow is collection of packets.
Indicates if the current ﬂow carries the ﬁnal packet.

Flow
Cnt
Flow
Fin
Cnt
Packets Number of packets transmitted in a speciﬁc time interval.
Snort
Alert

Boolean indicating an alert from snort.

Indicates the alert type such as DNP3, ARP spoof, ICMP
ﬂood or any other types.

Nan

Source id of the DNP3 master or outstation. Indicator of
which outstation communicates with the master in that
speciﬁc record.
Destination id of the DNP3 master or outstation. Indicator
of which outstation communicates with the master in that
speciﬁc record.
Indicator of the DNP3 payload size as well as the
function type. Usually the response carries DNP3 point
information, hence this length correlates with the function
code as well as the outstation currently communicating.
This indicates the initiator of the communication. Deter-
mines the primary/secondary server.

Indicates the FIN/FIR/Sequence number for determining
if the DNP3 payload is the ﬁrst or ﬁnal segment.

-1

-1

0

0x00

0x00

Indicates the function code: either READ, WRITE, OP-
ERATE, DIRECT OPERATE, etc.

-1

Indicates the FIN/FIR/Seq/Conﬁrm and Unsolicited ﬂags.
This indicates if there are unsolicited, ﬁrst, ﬁnal from
application layer standpoint.
This count determines the number of BI, BO, AI, AO
points associated with a substation.

Contains the DNP3 points used to extract the physical
features such as branch status, real power ﬂows and
injections in branch and buses for a substation.

0x00

0

Nan

Alert
Type

LL Src

LL
Dest

LL
Len

LL
Ctrl

TL
Ctrl

Func.
code

AL
Ctrl

Obj
count

AL
Pay-
load

8

submarines. The challenges associated with different locations
stem from time differences in event recognition. A radar can
pick up a signal with a different latency than a submarine
due to the difference in communication medium as well as
its location relative to the enemy troop. Similarly, our sensors
such as IDS, ﬁrewall alerts, and network logs are positioned
at different locations in the network. It is essential to correlate
events among different
locations before merging them for
inferring any attacks.

C. Co-Training Based Split and Fusion

There exist scenarios where labels cannot be captured. The
co-training algorithm [36] uses feature split when learning
from a dataset containing a mix of labeled and unlabeled
data. This algorithm is usually preferred for datasets that have
a natural separation of features into disjoint sets [59]. Since
the cyber and physical features are disjoint, we adopt feature
split based co-training. The approach is to incrementally build
classiﬁers over each of the split feature sets. In our case,
we split the fused features into cyber and physical features.
Each classiﬁer, cy cf r (ﬁrst 17 features in Table I) and
phy cf r(last 9 features in Table I), is initialized using a few
labeled records. At every loop of co-training, each classiﬁer
chooses one unlabeled record per class to add to the labeled
set. The record is selected based on the highest classiﬁcation
conﬁdence, as provided by the underlying classiﬁer. Further,
each classiﬁer rebuilds from the augmented labeled set, and
the process repeats. Finally, the two classiﬁers cy cf r and
phy cf r obtained from the co-training algorithm gives prob-
ability score against the classes for each record, which is added
and normalized to determine the ﬁnal class of the record [59].
The classiﬁers selected in our experiments are Linear Support
Vector Machine (SVM), Logistic Regression, Decision Tree,
Random Forest, Naive Bayes, and Multi-Layer Perceptron.

VI. DATA TRANSFORMATION

Real-time testbed data is usually insufﬁcient, conﬂicting,
diverse format and at times lack in certain pattern or trends.
Hence, data pre-processing is essential in transforming raw
data into an understandable format. The raw data extracted
from multiple-sensors are processed through three steps: a)
data imputation, b) data encoding, c) data scaling, and d)
feature reduction.

A. Data Imputation

Imputation is a statistical method of replacing the missing
data with substituted values. Substitution of a data point is unit
imputation, and substituting a component is item imputation.
Imputation tries to preserves all the records in the data table by
replacing missing data with an estimated value based on other
available information or feeds from domain experts. There are
other forms of imputation such as mean, stochastic, regression
imputation etc. Imputation can introduce a substantial amount
of bias and can also impact efﬁciency. In this work, we have
not tried to address such discrepancies of bias introduced due
to imputation. Since we merge data from different sources with

unique features, the chances of missing data are high. Hence,
we perform unit imputation in our dataset based on the default
values in the Def column of the Table I.

B. Data Encoding

There are numerous features in the fused dataset which are
categorical. These categorical features are encoded using the
preprocessing libraries in scikit learn, so that the predictive
model can better understand the data. There are different
types of encoders such as an ordinal encoder, label encoder,
one hot encoder, etc. In this work, we use label encoding.
Label encoding is preferred over one hot encoding when the
cardinality of the categories in the categorical feature is quite
large as it results in the issue of high dimensions. We also
do not consider an ordinal encoder, as it is processed on
the 2D dataset (samples*f eatures). Since we process cross
domain features, we perform encoding on individual features
separately using label encoding.

C. Scaling and Normalization

Scaling and normalizing the feature is essential for various
ML and DL techniques such as Principal Component Analy-
sis (PCA), Multi-Layer Perceptrons (MLPs), Support Vector
Machines (SVMs), etc. Though certain techniques such as
Decision Trees or Random Forest, are scale-invariant, it is still
essential to normalize and train. Before performing normaliza-
tion, we perform log transformation and categorical encoding
for the features with high variance and varied range of values,
respectively. Hence, we evaluate both log transformation as
well as scaling. Additionally, we considered Min-Max scaling
as performed in our prior works on intrusion detection on KDD
and CIDDS datasets [48].

D. Feature Reduction

Once the features from multiple sensors are merged, di-
mension reduction (inter-feature correlation) is performed to
remove the trivial features using Principal Component Anal-
ysis (PCA). PCA is a linear dimensionality reduction method
that uses Singular Value Decomposition (SVD) on the data to
project it to a lower dimensional space [60]. The inter-feature
correlation for our fused dataset from RESLab is based on the
Pearson Coefﬁcient [61], shown in as shown in Fig. 6, where
it can be observed that
intra-domain features have higher
correlation amongst each other. There is also some correlation
observed across the cyber and physical features. Features with
higher correlation are more linearly dependent and thus have
a similar effect on dependent variables. For example, if two
features have high correlation, one of the two features can be
eliminated.

VII. INTRUSION DETECTION POST FUSION

After the features are extracted, merged, and pre-processed
we design IDS using different ML techniques. We have con-
sidered manifold learning and clustering as the unsupervised
learning techniques, a few linear and non-linear supervised
learning techniques, and co-training based semi-supervised

9

Fig. 4. Location based fusion from the master, outstation, and substation router. The high density trafﬁc observed in the places marked with red rectangles
is an indicator of DoS attack. This fusion assists in causal analysis for determining the initial victim of the DoS intrusion as well as inferring the pattern of
impact across other devices in the network.

A. Manifold Learning

PCA for feature reduction does not perform well when
there are nonlinear relationships within the features. Manifold
learning is adopted in the scenarios where the projected data
in the low dimensional planar surface is not well represented
and needs more complex surfaces. Multi-featured data are
described as a function of a few underlying latent parameters.
Hence the data points can be assumed to be samples from
a low-dimensional manifold embedded in a high-dimensional
space. These algorithms tries to decipher these latent parame-
ters for low-dimensional representation of the data. There are a
lot of approaches to solve this problem such as Locally Linear
Embedding, Spectral Embedding, Multi Dimensional Scaling,
IsoMap etc.

1) Locally Linear Embedding (LLE): LLE computes the
lower-dimensional projection of the high dimensional data by
preserving distances within local neighborhoods. It is equiva-
lent to a series of local PCA which are globally compared to
obtain the best non-linear embedding [62]. The LLE algorithm
consists of 3 steps [63]: a) Compute k-nearest neighbor for a
data point. b) Construct a weight matrix associated with the
neighborhood of each data point. Obtains the weights that best
reconstruct each data from its neighbors, minimizing the cost.
c) Compute the transformed data point Y best reconstructed
by the weights, minimizing the quadratic form.

2) Spectral Embedding: Spectral embedding builds a
graph incorporating neighborhood information. Considering
the Laplacian of the graph, it computes a low dimensional
representation of the data set that optimally preserves local
neighborhood information [64]. Minimization of a cost func-
tion, based on the graph ensures that points closer on the
manifold are mapped closer in the low dimensional space,
preserving local distances [62]. The Spectral Embedding al-
gorithm consists of 3 steps: a) Weighted Graph Construction
in which raw data are input
into a graph representation
using an adjacency matrix. b) Construction of unnormalized
and a normalzied graph Laplacians as L “ D ´ A and
L “ D´0.5pD ´ AqD´0.5, respectively. c) Finally, partial
eigenvalue decomposition is done on the graph Laplacian.

Fig. 5. Co-training based fusion for labeled and unlabeled datasets. The fused
dataset is split into cyber and physical views and trained in the cyber and
physical classiﬁers separately, ﬁnally fusing and normalizing the probability
scores for ﬁnal classiﬁcation.

Fig. 6.

Inter-feature correlation based on Pearson Coefﬁcient

learning methods for training the IDS. In this section, we
brieﬂy explain the ML techniques we use.

10

3) Multi Dimensional Scaling (MDS): MDS performs pro-
jection to lower dimension to improve interpretability while
preserving ‘dissimilarity’ between the samples. It preserves
the dissimilarity by minimizing the square difference of the
pairwise distances between all the training data between the
projected, lower dimensional and the original higher dimen-
sional space,

Diﬀ P pX1, . . . , Xnq “

¨

˝

nÿ

nÿ

i“1

j“1|i‰j

p}xi ´ xj} ´ δi,jq2

˛

1{2

‚

(5)
where δi,j is the general dissimilarity metric in the original
higher dimensional space and }xi ´ xj} is the projected/lower
dimensional dissimilarity pairwise between training samples i
and j. The model can be ﬁnally validated by a scatter plot of
pairwise distance in projected and original space. There are
two types of MDS: Metric and Non-Metric based. In Metric
MDS, the distances between the two points in projection are
set to be as close as possible to the dissimilarity (or distance)
in original space. Non-metric MDS tries to preserve the order
of the distances, and hence seeks a monotonic relationship
between the distances in the embedded and original space.

4) t-SNE Visualization: The manifold learning technique
called t-distributed Stochastic Neighbor Embedding is useful
to visualize high-dimensional data, as it reduces the tendency
of points to crowd together at
the center. This technique
converts similarities between data records to joint probabilities
and then tries to minimize the Kullback-Leibler divergence
(technique used to compare two probability distributions)
between the joint probabilities of the low-dimensional embed-
ding and the high-dimensional data using gradient descent.
The only issue with the use of this technique is that it is
computationally expensive and is limited by two or three em-
beddings in some methods. In our intrusion detection methods,
our purpose is to evaluate if in the low-dimensional embedding
we can ﬁnd some correlation of the data points with the labels.
5) IsoMap Embedding: Isomap stands for isometric map-
ping and is an extension to the MDS technique discussed
earlier. It uses geodesic paths instead of eucledian distance for
nonlinear dimensionality reduction. Since MDS tries to pre-
serve large pairwise distance over the small pairwise distance,
Isomap ﬁrst determine a neighborhood graph by ﬁnding the k
nearest neighbor of each point, further connecting this points
in the graph and assigns weights. Then it computes the shortest
geodesic path between all pairs of point in the graph, to use
this distance measure between connected points as weights to
apply MDS to the shortest-path distance matrix [65].

B. Clustering

One of the fundamental problems in multi-sensor data
fusion is data association, where different observations in
the dataset are grouped into clusters [10]. Hence, various
clustering techniques are explored for data association.

1) K-means Clustering: The k-means algorithm clusters
data by separating samples in n groups of equal variance,

minimizing a criterion known as the inertia. The algorithm
starts with a group of randomly selected centroids, which are
used as the beginning points for every cluster, then performs
iterative calculations to optimize the positions of the centroids
by minimizing inertia. The process stops when either the
centroids have stabilized or the number of iterations has been
achieved.

2) Spectral Clustering: The main concept behind spectral
clustering is the graph Laplacian matrix. The algorithm takes
the following steps [66]:

1) Construct a similarity graph either based on an (cid:15)-
neighborhood graph, a k ´ nearest neighbor graph, or
a fully connected graph.

2) Compute the normalized Laplacian L.
3) Compute the ﬁrst k eigen-vectors u1, u2..., uk of L. The
ﬁrst eigen-vectors are related to the k smallest eigen
values of L.

4) Let U P Rn˚k be the matrix containing the vectors

5) For i “ 1, , , , n, let yi P Rk be the vector corresponding

u1, u2..., uk as columns.

to the ith row of U .

6) Cluster points pyiq in Rk with k-means algorithm into

clusters C1, ...Ck.

3) Agglomerative Clustering: Agglomerative clustering in
a bottom-up manner, where at
the beginning, where each
object belongs to one single-element cluster, which are the
leaf clusters of a dendogram. At each step of the algorithm,
the two clusters that are most similar (based on a similarity
metric such as distance) are combined into a larger cluster.
The procedure is followed until all points are members of a
single big cluster. The steps form a hierarchical tree, where a
distance threshold is used considered to cut the tree to partition
the data into clusters. As per scikit, this algorithm recursively
merges the pair of clusters that minimally increases a given
linkage distance [67]. The parameter distance threshold in the
scikit-learn implementation is used to cut the dendogram.

4) Birch Clustering: The Balanced Iterative Reducing and
Clustering Using Hierarchies (BIRCH) [68] algorithm is more
suitable for the cases where the amount of data is large and
the number of categories K is also relatively large. It runs very
fast, and it only needs a single pass to scan the data set for
clustering.

C. Supervised Learning

Though manifold learning and clustering techniques helps
visualize and cluster the data samples in the intrusion time-
interval from the non-intrusion ones, still the results of these
techniques are hard to validate without any labels, hence
various supervised learning techniques are also considered in
designing the anomaly based IDS.

1) Support Vector Classiﬁer (SVC): Support vector ma-
chine builds an hyperplane or set of hyperplanes in a higher
dimensional space which are further used as a decision surface
for classiﬁcation or outlier detection. It is a supervised learning
based classiﬁer which performs better even for scenarios with
higher feature size than sample size. The decision function, or

11

support vectors, deﬁned using the kernel type such as sigmoid,
polynomial,
linear or radial basis function plays a major
impact on the classiﬁer performance. Different variants of
SVCs have been predominantly proposed in intrusion detection
solutions [69], [70].

2) Logistic Regression (LR) Classiﬁer: LR is a classiﬁca-
tion algorithm, used mainly for discrete set of classes. It is
a probability-based classiﬁcation technique which minimizes
the error cost using the logistic sigmoid function. It uses the
gradient descent technique to reduce the error cost function.
Industries make a wide use of it, since it is very efﬁcient and
highly interpretable [71].

3) Naive Bayes (NB) Classiﬁer: NB is a supervised learn-
ing technique based on the Bayes Theorem, with the naive
assumption of independent features, conditioned on the class.
Based on the feature likelihood distribution, they posses dif-
ferent forms: Gaussian, Bernoulli, Categorical, Complement,
etc. Though it is computationally efﬁcient, the selection of
feature likelihood may alter results. Spam ﬁltering, text clas-
siﬁcation, and also in network intrusion detection it is used
profusely [72]. A naive-bayes based solution was proposed
for IDS in a smart meter network [73].

4) Decision Tree (DT) Classiﬁer: The advantage of using
DT is that it requires the least data transformation. Funda-
mentally it creates internally, models that predicts the target
class by learning decision rules inferred from the features.
This technique sometimes meet with over-ﬁtting issues while
learning complex trees that are hard to generalize. Hence, it
adopts pruning techniques such as reducing the tree max-depth
to deal with over-ﬁtting. If data in the samples are biased
it may highly likely create biased trees. The computation
cost of using this classiﬁer is logarithmic in the number
of data records. It has been used in protocol classiﬁcation
problem [74], [75] for classifying anomalous packets.

5) Random Forest (RF) Classiﬁer: Basically, RF creates
decision trees on randomly picked data samples, further com-
putes prediction from each tree and selects the best solution
through voting. More trees results in a more robust forest. It
is an ensemble based classiﬁer in which a diverse collection
of classiﬁers (decision trees) are constructed by incorporat-
ing randomness in tree construction. Randomness decreases
the variance to address the overﬁt issues prevailing in DT.
While comparing with SVMs, RF is fast and works well
with a mixture of numerical and categorical features. It has
a variety of applications, such as recommendation engines,
image classiﬁcation and feature selection. Due to its variance
reduction feature and least need of data pre-processing, it is
also preferred in the cyber security area [76], [77].

6) Neural Network (NN) Classiﬁer: Neural networks is
effective in the case of complex non-linear models. In our IDS
classiﬁcation problem, we make use of multi-layer perceptron
(MLP) as the supervised learning algorithm. It learns a non-
linear function approximator whose inputs are the features for
a record and outputs the class. Unlike a logistic regressor,
it comprises of multiple hidden layers. A major issue with
NN models is it large set of hyper tuning parameter such

layers,

as number of hidden neurons,
iterations, dropouts,
etc., that can affect the hyper-parameter tuning process for
improving accuracy. Additionally, it is quite sensitive to feature
scaling. Following Occam’s razor, security professionals tend
to avoid neural networks in intrusion detection, wherever
possible. Still NN can be explored to capture temporal pattern
with the use of Recurrent Neural Networks (RNN) and spatial
pattern using Graph Neural Networks (GNN).

VIII. RESULTS AND ANALYSIS

In this section, we study the improvement of the detection
performance of IDS, when a fused dataset is considered in
comparison to the use of only cyber or physical features. We
design the IDS as a classiﬁer when training with supervised
and semi-supervised based ML techniques. We analyze the
IDS performance based on the different types of MiTM attack
carried out in the RESLab testbed. For supervised learning
techniques, we analyse the impact of labeling as well as
feature reduction on the detection accuracy. For unsupervised
learning techniques, we compare the performance of the
clustering techniques based on different metrics. In most of
the experiments, we expect to receive highest scores for either
2 or 3 clusters, since we want
to cluster attacked trafﬁc
from non-attacked. The third cluster can be an undetermined
cluster. We also utilize and test a co-training based semi-
supervised learning technique by assuming loss of labels for
some experiments and compare them with supervised learning
techniques.

A. Supervised Technique Intrusion Detection with Snort Alert
as Label

1) Metrics for evaluation: The IDS performance is eval-
uated by classiﬁer’s accuracy computed using metrics such
as Recall, Precision, and F1-score. Recall is the ratio of the
true positives to the sum of true positives and false negatives.
Precision is the ratio of the true positives to the sum of
true positives and false positives. High precision is ensured
by a low false positive rate. High recall is an indication of
low false negative rate. False negatives are highly unwanted
in security, since an undetected attack may result in more
privilege escalations and can impact a larger part of network.
False positives is expensive as time and money is invested for
security professionals to investigate a non-critical alert. Hence,
harmonic mean of recall and precision, called F1-score, is a
preferred metric for a balanced evaluation.

2) Labels Evaluation: The performances are compared,
considering labels from Snort alerts and labels based on the in-
truders’ attack windows, to train the supervised learning based
IDS classiﬁers. The intruders’ attack window is the difference
between the attack script end and start time. We label every
record in this window belonging to the compromised class. It
is interesting to observe from Table II that the classiﬁer trained
using the attack window label performed better than the Snort
labels, based on the average F1-score, Recall, and Precision.
These metrics are computed by taking the average of all the
metrics from different use cases. This analysis indicates that

12

training a model from well-known IDS may not act as an ideal
classiﬁer for intrusion detection. Hence, for our further studies,
we train the classiﬁer using the attack window based label.

Snort Label

F1 score
.566
.738
.764
.598
.57
.561

Classiﬁer
Avg.
SVC
DT
RF
GNB
BNB
MLP

Prec.
.496
.757
.776
.745
.621
.491
TABLE II
COMPARISON OF THE LABELS USING DIFFERENT CLASSIFIER BASED ON
THE EVALUATION METRICS.

Label from Attack Window
Rec.
F1 score
.776
.752
.909
.909
.896
.891
.729
.724
.655
.634
.695
.621

Prec.
.799
.92
.903
.748
.676
.604

Rec.
.69
.73
.789
.574
.589
.671

3) Use Case Speciﬁc Evaluation: We analyze the dataset
constructed from four use cases based on different strategies of
FDI and FCI attacks (measurement and control, respectively).
These cases use different polling rates and DNP3 masters on
the synthetic 2000-bus grid case illustrated in the RESLab
paper [9]. Use Case 1 and 2 are FCI attacks on binary and
mixed binary/analog commands from the control center to
some selected outstations, selected from our prior work on
graph-based contingency discovery [78]. Use Case 3 and 4 are
a mix of FCI and FDI attacks. These use cases differ based on
the type and sequence of modiﬁcations done by the intruder
as shown in Table III.

Due to the variation of attempts an intruder needs to take to
implement the use cases, the number of samples collected for
every scenario differs. In the MLP based classiﬁer, the number
of samples plays a vital role; hence, MLP performs better for
scenarios with the number of DNP3 masters equal to 10 versus
5 and with a DNP3 polling interval of 30 s versus 60 s. The DT
and RF classiﬁers outperform the other classiﬁers in almost all
the scenarios. The NB classiﬁers, both Gaussian and Bernoulli,
need the features to be independent for optimal performance.
Since most of the features are strongly correlated based on
Fig. 6, the performance of NB is relatively weak compared
to other classiﬁers. Usually, Gaussian Naive Bayes (GNB) is
considered for features that are continuous and Bernoulli Naive
Bayes (BNB) for discrete features. In our fused dataset, since
we have both types of features, we consider both techniques
for evaluation. In majority of the scenarios, GNB performed
better than BNB, indicating the physical features have more
impact on the detection compared to categorical cyber features.
Table IV shows the comparison of classiﬁers for different use
cases, and Table V shows the comparison using grid search
cross validation based tuning of hyper-parameters for each
classiﬁer.

4) Impact of Fusion: We evaluate the performance of the
classiﬁer by considering pure physical and pure cyber based
intra-domain fusion as well as cyber-physical inter-domain
fusion. The pure physical and cyber physical based fusion out-
performs pure-cyber based fusion for all the classiﬁers shown
in Table VI. Hence, it indicates that introduction of physical
side features can improve the accuracy of conventional IDS
that only considers network logs in communication domain.
The pure physical features relatively performed better than

cyber physical because in the testbed, only few features (i.e.
measurements for the impacted substation) are considered for
extraction. If we consider all the measurements from the grid
simulation, the detection accuracy will decrease due to feature
explosion. Feature reduction techniques such as PCA for the
physical features may not be an ideal solution for a huge
synthetic grid.

5) Impact of Feature Reduction:

In this subsection, we
analyze feature reduction techniques such as PCA and Shapiro
ranking for feature reduction and feature ﬁltering to evaluate
the performance of the IDS. Table VII illustrates the perfor-
mance scores for different classiﬁers with PCA transformed
features and shapiro features selected for scores more than
0.7. It can be observed that except for the DT and RF, other
classiﬁer’s performance improved by both operation. DT and
RF behaves the best when most of the features are kept intact.
In most of the case selection of features based on Shapiro
features performed better than PCA transformation. Still the
total variance threshold taken may impact
the number of
principal components considered, which can affect the results.

Fig. 7. Ranking feature importance for extracting features. Of all the features,
scores above 0.7 is selected for training.

B. Unsupervised Learning Techniques

1) Metrics for evaluation: For evaluating the performance
of the clustering techniques, the Silhoutte scores, Calinski
Harabasz score, Adjusted Rand score, and Davies Bouldin
scores are considered. The Silhoutte score (S) is the mean
Silhouette Coefﬁcient of all samples. The Silhouette Coefﬁ-
cient is calculated using the mean intra-cluster distance (a) and
the mean nearest-cluster distance (b) for each sample, using
maxpa,bq . The Calinski Harabasz score (CH) is computed
based on [79]. It
is the ratio between the within-cluster
dispersion and the between-cluster dispersion. The Rand Index
computes a similarity measure between two clusterings by
considering all pairs of samples and counting pairs that are
assigned in the same or different clusters in the predicted and
true clusterings. This index is further adjusted to be called the

b´a

13

UC1
Binary Commands

FCI
UC2
Analog, Binary Commands Measurements=ąCommands Measurements=ą Commands=ąMeasurements

FCI with FDI
UC4

UC3

TABLE III
USE CASES BASED ON THE TYPE AND SEQUENCE OF MODIFICATIONS.

uc

UC1

UC2

Scenarios
masters
10
10
5
5
10
10
5
5
10
10
5
5
10
10

DT
.74
.87
.76
.89
.93
.97
.98
1.0
1.0
.98
.86
.81
.96
.98
TABLE IV
COMPARISON OF THE CLASSIFIER BASED ON THE SCENARIOS I.E. USE
CASES, NUMBER OF MASTERS AND THE POLLING INTERVAL (PI) IN SEC.

BNB MLP
.70
.49
.52
.89
.59
.58
.57
.33
.66
.73
.54
.77
.78
.80

Classiﬁers
GNB
.59
.75
.73
.94
.73
.33
.93
.72
.83
.84
.56
.74
.63
.83

SVC
.70
.78
.88
.88
.84
.64
.95
.50
.85
.89
.59
.63
.65
.75

RF
.75
.81
.92
1.0
.93
.88
.93
.88
.97
.91
.88
.77
.97
.88

.70
.58
.86
.66
.77
.52
.72
.40
.86
.91
.39
.31
.57
.50

PI
30
60
30
60
30
60
30
60
30
60
30
60
30
60

UC3

UC4

uc

UC2

UC1

PI
30
60
30
60
30
60
30
60
30
60
30
60
30
60

Scenarios
masters
10
10
5
5
10
10
5
5
10
10
5
5
10
10

DT
.78
.87
.88
1.0
.94
.97
.98
1.0
1.0
.93
.97
.63
.96
.88
TABLE V
OPTIMAL HYPERPARAMETER WITH GRIDSEARCH COMPARISON OF
THE CLASSIFIER BASED ON THE SCENARIOS I.E. USE CASES, NUMBER OF
MASTERS AND THE POLLING INTERVAL (PI) IN SEC.

BNB MLP
.69
.52
.51
.89
.44
.61
.50
.26
.63
.76
.56
.77
.78
.80

Classiﬁers
GNB
.70
.78
.72
.83
.81
.75
.93
.88
.84
.89
.57
.65
.65
.80

SVC
.70
.54
.51
.66
.45
.52
.36
.40
.41
.40
.39
.31
.44
.50

RF
.75
.81
.84
1.0
.89
.85
.93
.96
.99
.88
.93
.68
.95
.85

.70
.7
.67
.62
.86
.58
.91
.44
.69
.82
.61
.68
.65
.50

UC3

UC4

F1
.62
.77
.69
.58
.52
.56

Clfr
Avg.
SVC
DT
RF
GNB
BNB
MLP

Pure Cyber
Rec.
.68
.77
.69
.57
.56
.66

Pure Physical
Rec.
F1
.77
.75
.93
.93
.92
.92
.77
.78
.68
.65
.72
.76
TABLE VI
COMPARISON OF THE CLASSIFIER WITH PURE CYBER FUSION, PURE
PHYSICAL FUSION, AND CYBER-PHYSICAL FUSION FEATURES

Cyber Physical
Rec.
.77
.91
.90
.73
.66
.70

Pre.
.59
.77
.68
.59
.55
.53

Pre.
.80
.94
.93
.81
.66
.77

F1
.75
.91
.89
.72
.63
.62

Pre.
.80
.92
.90
.75
.68
.61

Clfr
Avg.
SVC
DT
RF
GNB
BNB
MLP

F1
.75
.91
.89
.72
.63
.62

Pre.
.80
.92
.90
.75
.68
.61

All Features
Rec.
.77
.91
.90
.73
.66
.70

PCA
F1
Rec.
.77
.80
.82
.82
.86
.86
.77
.78
.74
.76
.68
.61
TABLE VII
COMPARISON OF THE CLASSIFIER WITH ALL FEATURES, REDUCED
FEATURE WITH PCA TRANSFORMATION, AND FEATURE SELECTION
BASED ON SHAPIRO RANKING

Shapiro Ftrs ě 0.7
Pre.
Rec.
F1
.79
.78
.77
.91
.89
.89
.84
.84
.84
.87
.84
.83
.86
.82
.80
.41
.64
.50

Pre.
.81
.83
.87
.78
.76
.64

tions since otherwise there will be feature-based bias. We
implement four types of clustering techniques: Agglomerative,
k-means, Spectral and Birch clustering, to evaluate the optimal
number of clusters based on the S, CH, AR, and DB scores.
For determining the clusters, we merged the samples from all
the use cases to form a larger dataset and then trained the
clustering methods by tuning the number of clusters hyper-
parameter (Nc) from 2 to 10. Fig 8 (a-e) show the clustered
plots using Agglomerative clustering with different number
of clusters. The number of clusters, or centroids, are selected
for hyper-parameter tuning since it is found to be the most
important factor for success of the algorithm [81]. Ideally,
there need to be 3 clusters for un-attacked, attacked with DNP3
alerts, and attacked with ARP alerts, but the distance metric
considered results in a greater number of clusters in some
methods. Among all the clustering techniques presented in
the previous section, the afﬁnity propagation technique does
not converge to obtain the exemplars with default paramaters
(damping =50, convergence iter =200). Hence, the damping
and maximum convergence iteration parameters are increased
to 0.95 and 2000 respectively, resulting in 34 clusters. The S,
CH, DB, and AR scores obtained are 0.605, 3658.1, 0.736,
and 0.00085 respectively.

Clustering Algo
Agglomerative
K-means
Spectral
Birch

S
3
3
3
3
TABLE VIII
OPTIMAL CLUSTERS (OPT Nc) USING DIFFERENT ALGORITHM OBTAINED
USING FOUR DIFFERENT EVALUATION METRIC

AR
2
2
2
3

DB
6
6
6
2

CH
3
5
5
3

Adjusted Rand Index (AR). The Davies Bouldin score (DB)
is deﬁned as the average similarity measure of each cluster
with its most similar cluster, where similarity is the ratio
of within-cluster distances to between-cluster distances [80].
Thus, clusters which are farther apart and less dispersed will
result in a better score.

2) Clustering: Prior to the clustering techniques, we scaled
and normalized the dataset using scaler and normalize func-

3) Impact of Fusion: Considering only physical side fea-
tures, most of the evaluation metrics computed very low or
negative (in the case of Adjusted Rand index) values, indi-
cating inefﬁcient clusters. The scores of the optimal clusters
with combined cyber-physical features had an AR score of
more than 0.8, but its maximum is 0.01 for 6 clusters with
only physical features. The pure cyber features performed
similar to the cyber physical case, but the scores are less

14

(a)

(b)

(c)

(d)

(e)

Fig. 8. Agglomerative clustering with different number of clusters. Clustering with size 2 and 3 outperforms others, validating the detection accuracy of a
attacked trafﬁc from a non-attacked one.

compared to the merged features. Hence, it is essential to fuse
cyber and physical features prior to perform clustering based
unsupervised learning.

Clustering
Agglo.
K-means
Spectral
Birch

S
3
3
3
3

Pure Cyber
CH
5
6
5
3

AR
2
2
2
2

DB
6
5
6
2

Pure Physical
CH
6
6
3
3

AR
6 (neg)
6 (neg)
6 (neg)
3 (neg)

S
2
3
3
same

DB
2
2
2
2

TABLE IX
COMPARISON OF OPTIMAL CLUSTERS (OPT Nc) USING DIFFERENT
ALGORITHM CONSIDERING PURE CYBER AND PHYSICAL FEATURES

4) Robustness: The robustness of the clustering techniques
can be evaluated based on the variance of these evaluation
to a) hyper-parameter tuning and b)
metrics with respect
dataset alterations. In the ﬁrst case, the mean, variance, and
normalized variance (N V ar = sd
mean ) of the evaluation metric
S, CH, AR, and DB are computed by altering Nc from 2
to 10 and using the complete dataset extracted for all the use
cases. In the second case, similar statistics are computed by
keeping the number of clusters ﬁxed at Nc “ 3 and altering the
dataset i.e. by using different use cases. A clustering technique
that has a lower normalized variance is more robust, and a
better mean score is more accurate. Based on the silhoutte
scores (S) from Table X, k-mean based clustering is found
to be more robust to varying data source and has a better
mean score, but a main limitation of k-means is its strong
dependence on Nc. Still, k-means is used in many practical
situations such as anomaly detection [82] due to its low
computation cost.

5) Manifold Learning: Manifold learning is adopted for
the purpose of visualization. For quantitative comparisons,
we need to employ classiﬁcation techniques on the features
projected in the lower dimensions using these embeddings.
We evaluate the performance of manifold learning methods by
testing them with the classiﬁers presented in the previous sub-
section. Table XI presents the comparison of the LLE, MDS,
spectral, t-SNE, and IsoMap [83] embeddings considered for
classiﬁcation using SVC, k-NN, DT, RF, GNB, BNB and MLP.
Inter-domain fusion doesnt gain much from manifold learning,
but an interesting observation is made on the decrease in the
difference of F1-scores among the high performing DT and RF
classiﬁers, with the low performing SVC and k-NN classiﬁers.

Scenarios

Effect of Parameters

Effect of Data Alt.

Met

S

CH

AR

DB

Algo Mean
Agg
K-m
Spec
Bir
Agg
K-m
Spec
Bir
Agg
K-m
Spec
Bir
Agg
K-m
Spec
Bir

.52
.54
.504
.74
9965
10822
8765
10484
.703
.672
.714
.342
.026
.54
.504
.74

Var
.0175
.013
.021
.011
5.5 ˆ 106
6.6 ˆ 107
1.0 ˆ 107
1.3 ˆ 107
.035
.027
.039
.014
0.0
0.0
0.0
0.0

NVar Mean
.254
.212
.287
.146
.235
.237
.362
.349
.266
.248
.278
.35
.32
.322
.559
1.344

.609
.615
.581
.599
337
346
311
331
.534
.529
.638
.589
.053
.063
.058
.065

Var
.01
.008
.015
.010
36880
35690
34047
35637
.029
.022
.049
.047
.003
.003
.003
.003

NVar
.164
.145
.213
.172
.569
.545
.592
.57
.319
.281
.349
.368
1.038
.925
1.037
.895

TABLE X
EVALUATION OF THE ROBUSTNESS OF THE CLUSTERING ALGORITHM BY
VARYING HYPER-PARAMETERS AND DATA SOURCE.

Hence, we conclude that it is unadvisable to perform manifold
learning for our datasets, if training using Decision Tree or
Random Forest. The IsoMap embedding that preserves local
features of the data by ﬁrst determining neighbor-hood graph
and uses MDS in its last stage performs better than MDS for
all the classiﬁer only with the exception of SVC.

SVC

k-NN

DT

GNB

BNB MLP

ClfrÑ
Manifold Ó
LLE
MDS
Spectral
t-SNE
IsoMap

.66
.65
.61
.64
.65

.66
.77
.73
.73
.77
TABLE XI
COMPARISON OF THE DIFFERENT MANIFOLD LEARNING EMBEDDINGS
CONSIDERED WITH DIFFERENT CLASSIFIERS.

.39
.48
.62
.57
.48

.49
.55
.54
.63
.55

.38
.54
.61
.63
.54

.74
.78
.75
.74
.78

RF
F1 scores
.64
.80
.75
.76
.79

C. Semi-Supervised Learning

1) Co-Training: For co-training, we ﬁrst split the dataset
into labeled and unlabeled sets randomly in the ratio of 1:2.
In the real world, this randomness may be caused due to
accidental cessation of the Snort application or if a network
security expert cannot make an inference of intrusion. Further
both the labeled and unlabeled data are split into cyber and
physical views consisting of respective features. In these ex-
periments, we compare the supervised learning techniques on

15

the labeled dataset with the co-training technique which uses
supervised learning cyber and physical classiﬁers as shown in
Fig. 5. It is expected to have a reduction in performance from
supervised learning techniques, due to lack of labels for some
samples, but it can be observed from Table XII, that the co-
training based classiﬁcation outperforms supervised for some
classiﬁers such as LR,GN B,BN B,M LP and performs at par
with other classiﬁers with a difference of a mere 8 percent
in the case of RF . The probable reason for improvement in
performance using co-training may be due to the training of
two different classiﬁers using intra-domain features.

Classiﬁer

Supervised

Co-Training

LR
SVC
DT
RF
GNB
BNB
MLP

F1-score
.63
.63
.69
.73
.28
.53
.59

Prec.
.64
.64
.69
.72
.66
.67
.51
TABLE XII
COMPARISON OF THE CLASSIFIER USING SUPERVISED AND CO-TRAINING
BASED UNSUPERVISED LEARNING.

F1-score
.64
.59
.64
.65
.30
.58
.61

Prec.
.58
.52
.65
.72
.56
.52
.55

Rec.
.67
.67
.71
.77
.33
.51
.71

Rec.
.73
.70
.71
.72
.32
.66
.71

IX. CONCLUSION

A data fusion framework for detecting false command and
measurement injections due to cyber intrusion is presented in
this paper. To design an IDS that uses cyber and physical
features, we aggregate features from cyber and physical sen-
sors and align the data, then perform preprocessing techniques,
followed by inter-domain fusion.

Our results ﬁnd that classiﬁer performance improves on an
average of 15- 20% (based on F1-score) when cyber physical
features are considered instead of pure cyber features. Results
also show that the performance improved on an average of 10-
20% (based on F1-score) when labels from Snort are replaced
by the labels considered based on intrusion timestamps. From
our evaluations of the IDS, we also ﬁnd that scenarios with
in better performance.
balanced and larger records result
Additionally, co-training based semi-supervised learning tech-
nique, which is realistic for a real-world scenario, is found to
perform similar to supervised techniques and even better by
2-5% (based on F1-score) using some classiﬁers. Among the
unsupervised learning techniques, k-mean clustering technique
is found to be more robust and accurate. Moreover, training the
classiﬁer with the embeddings from manifold learning didn’t
improve the accuracy. Hence, manifold learning should only
be considered for visualization rather than rely on accuracy.

We believe our fused dataset and results provide one of the
ﬁrst publicly available studies with cyber and physical features,
particularly for power systems, where the experimental data is
collected from a testbed that contains both cyber and physical
emulation. This beneﬁts research in multi-disciplinary areas
such as cyber physical security and data science.

16

ACKNOWLEDGMENT

This research is supported by the US Department of En-
ergy’s (DoE) Cybersecurity for Energy Delivery Systems
program under award DE-OE0000895.

REFERENCES

[1] Z. Wang, Y. Wu, and Q. Niu, “Multi-sensor fusion in automated driving:

A survey,” IEEE Access, vol. 8, pp. 2847–2868, 2020.

[2] M. Kordestani and M. Saif, “Data fusion for fault diagnosis in smart

grid power systems,” 05 2017.

[3] J. Valenzuela, J. Wang, and N. Bissinger, “Real-time intrusion detection
in power system operations,” IEEE Transactions on Power Systems,
vol. 28, no. 2, pp. 1052–1062, 2013.

[4] N. Clarke, S. Furnell, G. Tjhai, and M. Papadaki, “Investigating the
problem of ids false alarms: An experimental study using snort,” vol.
278, 07 2008.

[5] “Ieee standard for synchrophasor measurements for power systems,”
IEEE Std C37.118.1-2011 (Revision of IEEE Std C37.118-2005), pp.
1–61, 2011.

[6] C. Gormley and Z. Tong, Elasticsearch: The Deﬁnitive Guide, 1st ed.

O’Reilly Media, Inc., 2015.

[7] “TShark,”

https://www.wireshark.org/docs/wsug html chunked/

AppToolstshark.html.

[8] A. D. Orebaugh, S. Biles, and J. Babbin, Snort Cookbook. O’Reilly

Media, Inc., 2005.

[9] A. Sahu, P. Wlazlo, Z. Mao, H. Huang, A. Goulart, K. Davis, and
S. Zonouz, “Design and evaluation of a cyber-physical resilient power
system testbed,” 11 2020. [Online]. Available: http://arxiv.org/abs/2011.
13552

[10] D. Hall, Mathematical Techniques in Multisensor Data Fusion, 01 1992.
[11] P. Roengruen, V. Tipsuwannaporn, A. Numsomran, and S. Harnnarong,
“Evaporative estimation using data fusion,” in 2008 SICE Annual
Conference, 2008, pp. 1692–1697.

[12] Peng Xie, J. H. Li, Xinming Ou, Peng Liu, and R. Levy, “Using bayesian
networks for cyber security analysis,” in 2010 IEEE/IFIP International
Conference on Dependable Systems Networks, 2010, pp. 211–220.
[13] L. A. Zadeh, “A simple view of the dempster-shafer theory of evidence
and its implication for the rule of combination,” AI Mag., vol. 7, no. 2,
p. 85–90, Jul. 1986.

[14] B. Khaleghi, A. Khamis, F. O. Karray,

and S. N. Razavi,
“Multisensor data fusion: A review of the state-of-the-art,” Information
Fusion, vol. 14, no. 1, pp. 28 – 44, 2013.
[Online]. Available:
http://www.sciencedirect.com/science/article/pii/S1566253511000558

[15] D. L. Hall and J. Llinas, “An introduction to multisensor data fusion,”

Proceedings of the IEEE, vol. 85, no. 1, pp. 6–23, 1997.

[16] A. Miloslavov and M. Veeraraghavan, “Sensor data fusion algorithms
for vehicular cyber-physical systems,” IEEE Transactions on Parallel
and Distributed Systems, vol. 23, no. 9, pp. 1762–1774, 2012.

[17] D. Jiang, D. Zhuang, Y. Huang, and J. Fu, “Advances in multi-sensor
data fusion: Algorithms and applications,” Sensors (Basel, Switzerland),
vol. 9, pp. 7771–84, 09 2009.

[18] S. McLaughlin, B. Holbert, A. Fawaz, R. Berthier, and S. Zonouz, “A
multi-sensor energy theft detection framework for advanced metering
infrastructures,” IEEE Journal on Selected Areas in Communications,
vol. 31, no. 7, pp. 1319–1330, 2013.

[19] W. Puming, L. Yang, J. Li, J. Chen, and S. Hu, “Data fusion in cyber-
physical-social systems: State-of-the-art and perspectives,” Information
Fusion, vol. 51, 11 2018.

[20] Y. Zheng, “Methodologies for cross-domain data fusion: An overview,”
IEEE Transactions on Big Data, vol. 1, no. 1, pp. 16–34, 2015.
[21] H. Nguyen, K. Palani, and D. Nicol, “An approach to incorporating

uncertainty in network security analysis,” 04 2017, pp. 74–84.

[22] F. Fusco, S. Tirupathi, and R. Gormally, “Power systems data fusion
based on belief propagation,” in 2017 IEEE PES Innovative Smart Grid
Technologies Conference Europe (ISGT-Europe), 2017, pp. 1–6.
[23] M. Ozay, I. Esnaola, F. T. Yarman Vural, S. R. Kulkarni, and H. V. Poor,
“Machine learning methods for attack detection in the smart grid,” IEEE
Transactions on Neural Networks and Learning Systems, vol. 27, no. 8,
pp. 1773–1786, 2016.

[24] J. Yan, B. Tang, and H. He, “Detection of false data attacks in smart
grid with supervised learning,” in 2016 International Joint Conference
on Neural Networks (IJCNN), 2016, pp. 1395–1402.

[25] M. Esmalifalak, H. Nguyen, R. Zheng, and Zhu Han, “Stealth false
data injection using independent component analysis in smart grid,” in
2011 IEEE International Conference on Smart Grid Communications
(SmartGridComm), 2011, pp. 244–248.
Sami,

“A
statistical
injection
attacks: A visualization-based approach,” Expert Systems with
Applications, vol. 84, pp. 242 – 261, 2017.
[Online]. Available:
http://www.sciencedirect.com/science/article/pii/S0957417417303317

[26] M. Mohammadpourfard, A.

and A. R.
false

unsupervised method

against

Seiﬁ,

data

[27] D. Wilson, Y. Tang, J. Yan, and Z. Lu, “Deep learning-aided cyber-
attack detection in power transmission systems,” in 2018 IEEE Power
Energy Society General Meeting (PESGM), 2018, pp. 1–5.

[28] J. J. Q. Yu, Y. Hou, and V. O. K. Li, “Online false data injection
attack detection with wavelet transform and deep neural networks,” IEEE
Transactions on Industrial Informatics, vol. 14, no. 7, pp. 3271–3280,
2018.

[29] S. Basumallik, R. Ma, and S. Eftekharnejad, “Packet-data anomaly
detection in pmu-based state estimator using convolutional neural
network,” International Journal of Electrical Power and Energy
Systems, vol. 107, pp. 690 – 702, 2019.
[Online]. Available:
http://www.sciencedirect.com/science/article/pii/S0142061518319884

[30] A. Kundu, A. Sahu, K. Davis, and E. Serpedin, “Learning-based defense
of false data injection attacks in power system state estimation,” in 2019
North American Power Symposium (NAPS), 2019, pp. 1–6.

[31] A. Kundu, A. Sahu, E. Serpedin, and K. Davis, “A3d: Attention-based
auto-encoder anomaly detector for false data injection attacks,” Electric
Power Systems Research, vol. 189, p. 106795, 2020. [Online]. Available:
http://www.sciencedirect.com/science/article/pii/S0378779620305988

[32] M. Culler, K. Davis, and A. Sahu, “Paved: Perturbation analysis for
veriﬁcation of energy data,” in 2019 IEEE International Conference on
Communications, Control, and Computing Technologies for Smart Grids
(SmartGridComm), 2019, pp. 1–6.

[33] A. Yang, X. Wang, Y. Sun, Y. Hu, Z. Shi, and L. Sun, “Multi-
dimensional data fusion intrusion detection for stealthy attacks on indus-
trial control systems,” in 2018 IEEE Global Communications Conference
(GLOBECOM), 2018, pp. 1–7.

[34] L. Wehenkel, “Machine learning approaches to power-system security

assessment,” IEEE Expert, vol. 12, no. 5, pp. 60–72, 1997.

[35] T. Rice, G. Seppala, T. Edgar, D. Cain, and E. Choi, “Fused sensor
analysis and advanced control of industrial ﬁeld devices for security:
Cymbiote multi-source sensor fusion platform,” 04 2019, pp. 1–8.
[36] A. Blum and T. Mitchell, “Combining labeled and unlabeled data
the Annual ACM Conference on

with co-training,” Proceedings of
Computational Learning Theory, 10 2000.

[37] T. S. Abdelgayed, W. G. Morsi, and T. S. Sidhu, “Fault detection and
classiﬁcation based on co-training of semisupervised machine learning,”
IEEE Transactions on Industrial Electronics, vol. 65, no. 2, pp. 1595–
1605, 2018.

[38] H. He, X. Luo, F. Ma, C. Che, and J. Wang, “Network trafﬁc classiﬁ-
cation based on ensemble learning and co-training,” Science in China
Series F: Information Sciences, vol. 52, pp. 338–346, 02 2009.

[39] M. G¨onen and E. Alpaydın, “Multiple kernel

learning algorithms.”
Journal of Machine Learning Research, vol. 12, pp. 2211–2268, 07
2011.

[40] N. Chen, J. Zhu, and E. P. Xing, “Predictive subspace learning for multi-
view data: a large margin approach,” in Advances in Neural Information
Processing Systems 23, J. D. Lafferty, C. K. I. Williams, J. Shawe-Taylor,
R. S. Zemel, and A. Culotta, Eds. Curran Associates, Inc., 2010, pp.
361–369.

[41] Z. Fang and Z. Zhang, “Discriminative feature selection for multi-view
cross-domain learning,” International Conference on Information and
Knowledge Management, Proceedings, pp. 1321–1330, 10 2013.
[42] P. Yang and W. Gao, “Multi-view discriminant transfer learning,” 08

2013, pp. 1848–1854.

[43] E. Vaahedi, A. Y. Chang, S. Mokhtari, N. Muller, and G. Irisarri, “A
future application environment for bc hydro’s ems,” IEEE Transactions
on Power Systems, vol. 16, no. 1, pp. 9–14, 2001.

[44] “The MongoDB 4.4 Manual,” https://docs.mongodb.com/manual/.
[45] N. Padalia, Apache Cassandra Essentials. Packt Publishing, 2015.
[46] “KDD Cup 1999 Data,” http://kdd.ics.uci.edu/databases/kddcup99/

kddcup99.html.

[47] “Coburg Intrusion Detection Data Sets,” https://github.com/markusring/

CIDDS.

17

[48] A. Sahu, Z. Mao, K. Davis, and A. E. Goulart, “Data processing and
model selection for machine learning-based network intrusion detec-
tion,” in 2020 IEEE International Workshop Technical Committee on
Communications Quality and Reliability (CQR), 2020, pp. 1–6.
[49] R. D. Zimmerman, C. E. Murillo-S´anchez, and R. J. Thomas, “Mat-
power: Steady-state operations, planning, and analysis tools for power
systems research and education,” IEEE Transactions on Power Systems,
vol. 26, no. 1, pp. 12–19, 2011.

[50] L. Thurner, A. Scheidler, F. Sch¨afer, J. Menke, J. Dollichon, F. Meier,
S. Meinecke, and M. Braun, “Pandapower—an open-source python tool
for convenient modeling, analysis, and optimization of electric power
systems,” IEEE Transactions on Power Systems, vol. 33, no. 6, pp. 6510–
6521, 2018.

[51] U. Adhikari, T. Morris, and S. Pan, “Wams cyber-physical test bed for
power system, cybersecurity study, and data mining,” IEEE Transactions
on Smart Grid, vol. 8, pp. 1–1, 03 2016.

[52] S. Pan, T. Morris, and U. Adhikari, “Developing a hybrid intrusion de-
tection system using data mining for power systems,” IEEE Transactions
on Smart Grid, vol. 6, no. 6, pp. 3104–3113, 2015.

[53] S. Pan, T. Morris, and U. Adhikari, “A speciﬁcation-based intrusion
detection framework for cyber-physical environment in electric power
system,” International Journal of Network Security, vol. 17, pp. 174–
188, 01 2015.

[54] J. M. Beaver, R. C. Borges-Hink, and M. A. Buckner, “An evaluation of
machine learning methods to detect malicious scada communications,”
in 2013 12th International Conference on Machine Learning and Ap-
plications, vol. 2, 2013, pp. 54–59.

[55] P. Laso, D. Brosset, and J. Puentes, “Dataset of anomalies and malicious

acts in a cyber-physical subsystem,” Data in Brief, vol. 14, 07 2017.

[56] Glover, T. Overbye, and Sarma, “Powerworld simulator.” [Online].

Available: https://www.powerworld.com/products/simulator/overview

[57] P. Wlazlo, K. Price, C. Veloz, A. Sahu, H. Huang, A. Goulart, K. Davis,
and S. Zounouz, “A cyber topology model for the texas 2000 synthetic
electric power grid,” in 2019 Principles, Systems and Applications of IP
Telecommunications (IPTComm), 2019, pp. 1–8.

[58] Y. Hu, A. Yang, H. Li, Y. Sun, and L. Sun, “A survey of intrusion detec-
tion on industrial control systems,” International Journal of Distributed
Sensor Networks, vol. 14, p. 155014771879461, 08 2018.

[59] K. Nigam and R. Ghani, “Understanding the behavior of co-training,”

KDD-2000 Workshop on Text Mining, 08 2000.

[60] S. Wold, K. Esbensen, and P. Geladi, “Principal component analysis,”
Chemometrics and intelligent laboratory systems, vol. 2, no. 1-3, pp.
37–52, 1987.

[61] K. Pearson, “Note on regression and inheritance in the case of two
parents,” proceedings of the royal society of London, vol. 58, no. 347-
352, pp. 240–242, 1895.

[62] “Manifold Learning,” https://scikit-learn.org/stable/modules/manifold.

html.

[63] L. Saul and S. Roweis, “An introduction to locally linear embedding,”

Journal of Machine Learning Research, vol. 7, 01 2001.

[64] M. Belkin and P. Niyogi, “Laplacian eigenmaps for dimensionality
reduction and data representation,” Neural Computation, vol. 15, no. 6,
pp. 1373–1396, 2003.

[65] T. Lin and H. Zha, “Riemannian manifold learning,” IEEE Transactions
on Pattern Analysis and Machine Intelligence, vol. 30, no. 5, pp. 796–
809, 2008.

[66] U. Luxburg, “A tutorial on spectral clustering,” Statistics and Computing,

vol. 17, pp. 395–416, 01 2004.

[67] “Clustering,” https://scikit-learn.org/stable/modules/clustering.html.
[68] T. Zhang, R. Ramakrishnan, and M. Livny, “Birch: an efﬁcient data
clustering method for very large databases,” ACM sigmod record, vol. 25,
no. 2, pp. 103–114, 1996.

[69] L. Khan, M. Awad, and B. Thuraisingham, “A new intrusion detection
system using support vector machines and hierarchical clustering,”
VLDB J., vol. 16, pp. 507–521, 10 2007.

[70] S. Mulay, P. Devale, and G. Garje, “Intrusion detection system using
support vector machine and decision tree,” International Journal of
Computer Applications, vol. 3, 06 2010.

[71] Y. Wang, “A multinomial logistic regression modeling approach for
anomaly intrusion detection,” Computers & Security, vol. 24, pp. 662–
674, 11 2005.

[72] S. Mukherjee and N. Sharma, “Intrusion detection using naive bayes
classiﬁer with feature reduction,” Procedia Technology, vol. 4, p.
119–128, 12 2012.

[73] A. Sahu, H. N. R. K. Tippanaboyana, L. Hefton, and A. Goulart,
“Detection of rogue nodes in ami networks,” in 2017 19th International
Conference on Intelligent System Application to Power Systems (ISAP),
2017, pp. 1–6.

[74] T. Abbes, A. Bouhoula, and M. Rusinowitch, “Protocol analysis in
intrusion detection using decision tree,” in International Conference on
Information Technology: Coding and Computing, 2004. Proceedings.
ITCC 2004., vol. 1, 2004, pp. 404–408 Vol.1.

[75] N. Moustafa, B. Turnbull, and K. R. Choo, “An ensemble intrusion
detection technique based on proposed statistical ﬂow features for
protecting network trafﬁc of internet of things,” IEEE Internet of Things
Journal, vol. 6, no. 3, pp. 4815–4830, 2019.

[76] N. Farnaaz and M. Jabbar, “Random forest modeling for network
intrusion detection system,” Procedia Computer Science, vol. 89, pp.
213 – 217, 2016, twelfth International Conference on Communication
Networks,
India
Twelfth International Conference on Data Mining and Warehousing,
India Twelfth
ICDMW 2016, August 19-21, 2016, Bangalore,
International Conference on Image and Signal Processing,
ICISP
2016, August 19-21, 2016, Bangalore,
[Online]. Available:
http://www.sciencedirect.com/science/article/pii/S1877050916311127

ICCN 2016, August 19– 21, 2016, Bangalore,

India.

[77] J. Zhang, M. Zulkernine, and A. Haque, “Random-forests-based network
intrusion detection systems,” IEEE Transactions on Systems, Man, and
Cybernetics, Part C (Applications and Reviews), vol. 38, no. 5, pp. 649–
659, 2008.

[78] M. Narimani, H. Huang, A. Umunnakwe, Z. Mao, A. Sahu, S. Zonouz,
and K. Davis, “Generalized contingency analysis based on graph theory
and line outage distribution factor,” 07 2020.

[79] T. Cali´nski and H. JA, “A dendrite method for cluster analysis,”
Communications in Statistics - Theory and Methods, vol. 3, pp. 1–27,
01 1974.

[80] D. L. Davies and D. W. Bouldin, “A cluster separation measure,” IEEE
Transactions on Pattern Analysis and Machine Intelligence, vol. PAMI-
1, no. 2, pp. 224–227, 1979.

[81] M. Z. Rodriguez, C. H. Comin, D. Casanova, O. M. Bruno, D. R.
Amancio, L. d. F. Costa, and F. A. Rodrigues, “Clustering algorithms:
A comparative approach,” PLOS ONE, vol. 14, no. 1, pp. 1–34, 01
2019. [Online]. Available: https://doi.org/10.1371/journal.pone.0210236
[82] K. Sequeira and M. Zaki, “Admit: Anomaly-based data mining for
intrusions,” in Proceedings of the Eighth ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining, ser. KDD ’02.
New York, NY, USA: Association for Computing Machinery, 2002, p.
386–395. [Online]. Available: https://doi.org/10.1145/775047.775103

[83] J. B. Tenenbaum, V. De Silva, and J. C. Langford, “A global geometric
framework for nonlinear dimensionality reduction,” science, vol. 290,
no. 5500, pp. 2319–2323, 2000.

18

