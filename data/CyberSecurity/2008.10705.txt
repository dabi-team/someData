Integrating Hardware Security into a
Blockchain-Based Transactive Energy Platform

Shammya Shananda Saha∗‡, Christopher Gorog ¶, Adam Moser ¶, Anna Scaglione∗, Nathan G. Johnson†
∗School of Electrical, Computer, and Energy Engineering, Arizona State University
¶BlockFrame Inc.
†The Polytechnic School, Arizona State University
Email: ‡shammya.saha@asu.edu

0
2
0
2

g
u
A
4
2

]

R
C
.
s
c
[

1
v
5
0
7
0
1
.
8
0
0
2
:
v
i
X
r
a

Abstract—This applied research paper introduces a novel
framework for integrating hardware security and blockchain
functionality with grid-edge devices to establish a distributed
cyber-security mechanism that veriﬁes the provenance of mes-
sages to and from the devices. Expanding the idea of Two
Factor Authentication and Hardware Root of Trust, this work
describes the development of a Cryptographic Trust CenterTM
(CTCTM) chip integrated into grid-edge devices to create uni-
form cryptographic key management. Product managers, energy
system designers, and security architects can utilize this modular
framework as a uniﬁed approach to manage distributed devices
of various vendors, vintages, and sizes. Results demonstrate
the application of CTCTM to a blockchain-based Transactive
Energy (TE) platform for provisioning of cryptographic keys
and improved uniformity of the operational network and data
management. This process of conﬁguring, installing, and main-
taining keys is described as Eco-Secure ProvisioningTM (ESPTM).
Laboratory test results show the approach can resolve several
cyber-security gaps in common blockchain frameworks such as
Hyperledger Fabric.

Index Terms—Blockchain, Cyber-Security, Distributed Ledger,

Hardware Integration, Key Management

I. INTRODUCTION

The potential of the Smart Grid rests on advanced informa-
tion and communication technologies to enable and enhance
electric grid efﬁciency, reliability, and resilience. An enabler
of this future is having security built-in (rather than bolted
onto) the associated hardware and network protocols. This
motivation is increasing given the proliferation of grid-edge
devices such as distributed energy resources (DERs), electric
vehicles (EV), smart
loads, and grid-level energy storage.
These devices form part of the emerging Internet-of-Things
ecosystem that enables Transactive Energy (TE) in which
energy trading occurs at the grid-edge. This approach allows
local economic signals to elicit a response that
increases
grid efﬁciency and removes congestion within the electrical
network.

Blockchain is an ideal approach to enable a transactive
network because grid-edge devices come from a broad matrix
of vendors and types, with units that can be added or removed
from the network at any time, use rule sets that may be updated
frequently, and lack a centralized authority for management

This study was funded by the United States Ofﬁce of Naval Research
(ONR) Defense University Research-to-Adoption (DURA) Initiative under
award number N00014-18-1-2393.

and control. It allows non-trusting market participants to trust
each through utilizing a common immutable transaction record
validated by several peers. It offers a ﬂexible, low cost, and
secure means to implement logistics and tracking architecture
to manage digital assets and distributed devices [1]. This
feature addresses one of the most critical issues tied to the
security of interconnecting grid-edge devices with critical
electricity infrastructure. Prior works have shown the use of
a permissionless blockchain (e.g., Ethererum) [2]–[4] and a
permissioned blockchain (e.g., Hyperledger Fabric or HLF)
[5]–[7] for TE. This paper addresses the following unresolved
security issues in HLF-based TE architectures:

1) HLF uses the JSON Web Token (JWT) authentication
method based on claim token [8]. However, as BASE64
is used as the encoding method without data encryption in
claim tokens, malicious users can collect sensitive informa-
tion by eavesdropping on access tokens of genuine users
[9].

2) HLF provides security credentials for prosumers, but the
grid-edge devices owned by prosumers can still be subject
to attacks such as physical attacks, communications disrup-
tions, and ﬁrmware reprogramming. An excellent example
inverter vendor
is discussed in [10] in which a smart
remotely updated control settings for 800,000 inverters
in a single day in Hawaii. Were an adversary able to
penetrate the back-end system in the same fashion, or
hijack the update, that attacker could manipulate power
ﬂows or disable or damage equipment, and perhaps cause
a localized or grid-wide blackout.

This paper addresses these concerns by integrating hardware
security via a Cryptographic Trust CenterTM (CTCTM) chip.
Design considerations for such a hardware chip are provided
in [11] to protect grid-edge devices; however, the solution
is expensive and prevents mass scaling. Expanding the idea
of Two Factor Authentication (2FA) [9], [12], and Hardware
Root of Trust [13], the proposed solution integrates hardware
security in conjunction with the existing security features
of a blockchain-based TE. The approach is demonstrated
for a physical solar photovoltaic (PV) inverter, an Energy
Management System (EMS) at the prosumer location, and a
HLF-based blockchain network managing the TE market in
the cyber domain.

 
 
 
 
 
 
We assume that each prosumer is equipped with an EMS
responsible for managing the underlying physical assets in
the physical domain. The EMS is equipped with the CTCTM
(Figure 2). Physical assets may include legacy assets or new
(smart-enabled) infrastructure. Legacy assets integrate with the
framework via a Raspberry Pi equipped with the CTCTM chip
installed post-manufacture. New grid-edge devices can have
the CTCTM installed directly by the manufacturer, thereby
skipping the Raspberry Pi for marshaling data from the grid-
edge device to the EMS.

The approach provides a secure method to distribute cryp-
tographic keys to grid-edge devices. We call this approach
to conﬁguring,
installing, and maintaining keys as Eco-
Secure ProvisioningTM (ESPTM). Importantly, we incorporate
blockchain technologies to record each provisioning event
and maintain immutable records of such transactions for all
grid-edge devices. The logistics and tracking architecture for
managing the physical domain through ESPTM is handled
through a blockchain that is separate from the blockchain
managing the cyber domain.

In this work, we have developed a HLF-based TE solution

that is capable of performing the basic functionalities:
1) Collecting bids from market participants/prosumers;
2) Handling an iterative distributed pricing algorithm;
3) Allowing the local EMS to collect dispatch set points from
the TE network through smart contracts and passing those
set points onto underlying physical asset(s);

4) Maintaining a record of all transactions for billing.
The ﬁrst function requires interaction between the cyber and
physical domain, and the third function requires interactions
within the physical domain. The remaining two functions re-
main within the cyber domain and hence require no interaction
with the physical domain. Any interactions between the cyber
and physical domains are considered as a “transaction”. This
work shows how the CTCTM chip and ED25519 veriﬁcation
[14] expands upon 2FA to integrate hardware security into
those transactions.

III. SECURITY FEATURES USING ECO-SECURE
PROVISIONINGTM FOR CRYPTOGRAPHIC KEY
MANAGEMENT
The ESPTM framework includes a small integrated circuit
placed within each grid-edge device. A cloud-based Industry
Utility RegistrarTM (IURTM) service offers Trust as a
Service to provision trusted components within each device
[15]. The provisioning process ensures that no human can
access provisioned components, thus preventing hostile actors
from circumventing system security without triggering global
awareness.

Fig. 1: A Cyber Physical Architecture for Blockchain Based
Transactive Energy Network

Fig. 2: Cryptographic Trust CenterTM Chip

II. BLOCKCHAIN-BASED TRANSACTIVE ENERGY
PLATFORM

Figure 1 shows a cyber-physical architecture where the
cyber domain is built using HLF, and the physical domain
consists of market participants or prosumers who own various
types of grid-edge devices. Each prosumer is a “client” to
the blockchain network that leverages client applications to
interact with the network.

A. Cyber-Security Layers

The integrity of the cyber-security approach is enabled by
the ESPTM framework that uses provisioning protected by
logistical tracking of keys contained in each distributed grid-
edge device. A cryptographically-secure distributed ledger
maintains the record of cryptographic keys providing visibility

Fig. 3: OTP Message Authentication

of provisioned instances while protecting the actual keys and
private values and verifying content without compromising
itself. The framework supports any application needs for asyn-
chronous and synchronous communications and supports each
case with asymmetric and symmetric crypto-logic operations.
• Application Layer Secure Virtual Private Networks (VPN)
sessions are used between any two provisioned devices to
give application-level secure communications for one-to-one
systems or organizational virtual local area network (VLAN)
connections.

• Data Proof of Origin A protected signing capability is used
to create Proof of Origin (POO) signatures for any data item.
POO forensically proves the device’s identity that created it
and can do so at any time throughout the life-cycle of the
data.

• Timed Challenge-Response

Time-restricted challenge-
response enforced sequences provide the means to assure
that unsanctioned computational analyses on exchanged
command components are less likely during the sequence.
This is valuable for situations with strict time restrictions
when devices perform sensitive or dangerous operations,
such as electro-mechanical actuation commands.

• Uniform Network Segments Ensuring operational avail-
ability requires network segments such as a local area
network,
to operate uniformly in the event of the loss
of wide-area communications. The frameworks distributed
uniformity helps sustain the persistence of secure operation
without reliance on continuous communication to key man-
agement services.

B. Organization-wide Security Support

With a new approach referred to as

individualized-
uniformity, the framework provisions each device uniquely
in a uniform method such that they all work together. Each
device can independently perform the sets of security controls.
However, other uniform components allow for a synergistic
operation of all the devices acting together as a system of

systems to increase overall organization-wide security effec-
tiveness. Whether designed for inclusion at the factory or
integrated onto legacy applications, the ESPTM framework can
support the following functions.
• Zero-Trust Networking The support for individualized-
uniformity enables Zero-Trust Networking capabilities be-
cause all remote devices can reject unapproved devices,
users, or software versions by default until that device can
self-validate with multi-factor identiﬁcation [16], [17].

• Trusted Certiﬁcate Provisioning Operations that use
Transport Layer Security (TLS) connections are strength-
ened by the distribution and provisioning of trusted certiﬁ-
cates [18], [19]. ESPTM framework provisions valid certiﬁ-
cates and adds features to assure the accuracy of Certiﬁcate
Revocation Lists (CRL), making legacy TLS security fea-
tures more robust.

• Patch and Update Veriﬁcation Individualized conﬁdential-
ity controls, enabled by software signatures, can be created
for restricted use by individual devices. Single-use codes and
restricted-content control can be used to assure that software
updates are only installed after veriﬁed as trusted.

IV. SECURITY FEATURES IN GRID-EDGE DEVICES WITH
CRYPTOGRAPHIC TRUST CENTERTM CHIPS

Integration of ESPTM capabilities with HLF based
blockchain TE for transmission of data was accomplished
using both asymmetric and symmetric capabilities as detailed
below:
• Asymmetric These operations use public key cryptography
where a mathematically related “public key” and “private
key” are used. Only the private key needs to remain secret.
This is a common approach of digital signature algorithms
in which the private key and data are used to generating
a unique signature. The recipient can then independently
verify the integrity of the underlying signed data using the
sender’s public key.

Fig. 4: Architecture of the Hardware Integration Test

• Symmetric These operations rely on both parties possessing
the same cryptographic key, which no outside party can ac-
cess. For example, most encryption standards use symmetric
algorithms that require less system resources, thus enabling
faster operations (compared to the asymmetric case) and
near run-time performance. Symmetric veriﬁcation also pro-
vides support for checking the authenticity of underlying
devices.

A. Single-Use One Time Pad Veriﬁcation Symmetric Message
Authentication

In symmetric message authentication, transmitted data is
sent with One Time Pad (OTP) Message Authentication Code
(MAC) to ensure sensitive command messages remain intact.
Upon receiving a message and MAC from a sender, a recipient
device equipped with a CTCTM chip can verify the sender’s
MAC. MAC messages can be sent alongside any command
or response to continuously verify either the receiving or the
sending device or in the middle of any transmission sequence.
Security in this approach requires both the IURTM and device
to possess the same cryptographic key, which is used to create
and verify the MAC. Since the symmetric cryptographic key
never leaves the CTCTM chip (cryptographic operations are
performed inside), no attacker can clone or impersonate the
device, if they gain access to the devices memory or hard
drive for a while. Devices which possess the same symmetric
key are also able to MAC with each other directly.

The base algorithm used for symmetric authentication is
SHA3-512 [20], a hash function that, when combined with
a secret key, can be used both as a message authenticator
and Key Derivation Function. The sequence of operation for
symmetric veriﬁcation is shown in Figure 3.

B. Signature Creation and Veriﬁcation Digital Signing for
Data Integrity Veriﬁcation

Information from a grid-edge device used for data analytic,
controls, user billing transactions, and more functions requires
high levels of reliability and integrity. The provisioning frame-
work provides each enabled device a unique elliptic curve
asymmetric key pair (private and public key). The asymmetric
algorithm used on the chip is ED25519, an elliptic curve with
a security level comparable to 3072-bit RivestShamirAdleman
(RSA) cryptosystem. Each enabled device signs the data to
be exchanged using the private key through an elliptic curve
digital signature algorithm. Thus, data from each device can
be veriﬁed at collection points or after periods of storage using

the device’s public key. Private keys are used for signing, but
do not leave the CTCTM. After signing, data is transmitted
to the blockchain network managing the TE. Smart contracts
can verify the integrity of the received information using the
public key through ED25519 veriﬁcation. Hence, the public
key belonging to CTCTM is tied into the blockchains cre-
dential management system without compromising the private
keys which remain in the chips. The developed solution is
independent of the blockchain framework used to run the
TE market because the solution designed does not explicitly
depend on the TE’s underlying blockchain architecture. As
long as ED25519 veriﬁcation is possible from the blockchain
smart contract, the CTCTM can be used to provide additional
veriﬁcation similar to 2FA veriﬁcation. A detailed example
of a market transaction that uses asymmetrical veriﬁcation is
explained in Section V-C.

V. HARDWARE INTEGRATION AND DEMONSTRATION

The

proposed

framework was

demonstrated

using

Hardware-In-the-Loop (HIL) simulation described next.

A. Experimental Setup

The HIL simulation includes an EMS that interacts with
TE blockchain to submit consumption and generation bids
and to collect dispatch points. The EMS communicates with
a legacy inverter through the Raspberry Pi and MODBUS
protocol. A 4 KW Fronius Primo inverter was used during
the demonstration. Code for managing the EMS is written
in Python using Django web framework [21]. Though this
implementation illustrates secured communication with one
physical asset, the Django web framework is suitable for incor-
porating additional physical assets to the EMS. The Raspberry
Pi is equipped with the hardware CTCTM chip and uses I2C
protocol to communicate with the chip. Figure 4 shows the
communication links between the associated components with
appropriate veriﬁcation algorithms described in Section IV.

B. Provisioning of the CTCTM Chip

The provisioning process implements a sequence for updat-
ing the CTCTM from the supply chain provisioned status to
the end-user application provisioned status. The provisioning
IURTM and CTCTM implement this process using a protocol
and sequence consisting of three distinct message-segments,
as illustrated in Figure 5.

In the ﬁrst step, both the IURTM and local CTCTM pro-
duce random inputs creating symmetric mutual authenticated

the transaction,
the endorsement process in HLF veriﬁes
the client’s (i.e., EMS’s) credential using the Membership
Service Provider. If veriﬁed, the smart contract then takes input
arguments from the transactions and uses the public key to
perform an ED25519 veriﬁcation that veriﬁes the prosumer’s
ID against the credentials issued by the Certiﬁcate Authority.
This second veriﬁcation is analogous to the idea of 2FA, which
provides additional security to secure the TE network against
malicious prosumers. A similar procedure is followed when
the prosumer submits a bid that includes the prosumer’s unique
ID, type (DER/ electric vehicle/ controlled load, and more),
and associated parameters.

D. Symmetric Veriﬁcation for Two-way Asset Communications

After collecting the dispatch set point, the EMS sends this
information to the legacy inverter through the Raspberry Pi
and the Django framework. Sending data through the Django
framework requires the use of websocket [23] protocol,
which can transmit a JSON formatted data object. Hence
the EMS creates a JSON object that includes the message
type (to query information from the inverter or to send
dispatch instruction) and the message itself. For example,
while sending the dispatch information, the message includes
the real power dispatch value and the OTP created by the
EMS. Upon receiving, the Raspberry Pi parses the message
and uses the underlying instruction, and it’s own cryptographic
key to generate it’s OTP. If the generated OTP matches the
OTP embedded in the message, the Pi accepts the command
and responds accordingly. The process is repeated on the
EMS after receiving the response from the Raspberry Pi.
This symmetrical veriﬁcation secures communication between
the EMS and any physical asset communicating with the
EMS. Figure 7 shows the use of OTP while sending dispatch
information from the EMS to the inverter and receiving output
from the inverter1.

VI. DISCUSSION

This paper introduced a process for cryptographic key provi-
sioning and demonstrated laboratory evaluation of a hardware
chip that embeds cyber-security into grid-edge devices to
enable secure peer-to-peer transactive energy trading. The
approach and chip were shown to integrate with legacy assets,
and could also be installed by manufacturers on new assets,
to allow a rapid vendor-agnostic approach to scale cyber-
security worldwide while providing governance support on
an industry-wide scale. The hardware implementation also
integrated a blockchain to address security gaps using two-
factor identiﬁcation and hardware root of trust. Although
transactive energy was the motivating case demonstrated in the
paper, the approach can be used to secure any data transmitted
such as ﬁrmware updates, energy use readings, price signals,
and more. This leaves signiﬁcant ﬂexibility in integrating this

1The difference between the command sent and the output of the inverter
happens due to rounding issue in the inverter and intermittence in solar
irradiance.

Fig. 5: Provisioning of the CTCTM Chip

challenge-response. This process utilizes shared secrets provi-
sioned within CTCTM based on default values, which would
be entered into the CTCTM by a manufacturing vendor. These
shared secrets are also maintained within the IURTM server.
The second message-segment contains the packet of cryp-
tographic key information destined for the CTCTM, which is
encrypted and can only be interpreted by the CTCTM. Upon
receiving the second message, the CTCTM inserts the new
cryptographic conﬁguration in temporary status, awaiting the
third step.

The third message-segment completes a cryptographic key
super-session [22] sequence by verifying both old and new
cryptographic conﬁgurations are available within the CTCTM
by using them together. Upon receiving the super-session
veriﬁcation, the IURTM creates a ﬁnal commit stream and
returns an encapsulated stream containing this sequence. The
CTCTM ﬁnalizes super-session and commits the new crypto-
graphic conﬁguration for use only if all signatures for the ﬁnal
sequence content are veriﬁed successfully.

C. Asymmetric Veriﬁcation in TE Network Communications

An example use case is demonstrated here for asymmetric
veriﬁcation that allows integrating hardware security with the
blockchain smart contract. Figure 6 illustrates the implemen-
tation while the EMS is collecting the dispatch schedule from
the TE blockchain.

The EMS is assigned a unique ID with credentials issued by
a Hyperledger Fabric Certiﬁcate Authority. The EMS uses the
private key to sign the message where the message includes the
prosumers ID. Using the Node.js client SDK, a transaction
proposal is created that contains the signed message and the
chip’s public key as the input arguments. After submitting

Fig. 6: Two Factor Authentication Using Asymmetric Veriﬁcation

in 2018 IEEE Power Energy Society General Meeting (PESGM), Aug
2018, pp. 1–5.

[4] M. Foti and M. Vavalis, “Blockchain based uniform price double
auctions for energy markets,” Applied Energy, vol. 254, p. 113604, 2019.
[5] S. Wang, A. F. Taha, J. Wang, K. Kvaternik, and A. Hahn, “Energy
crowdsourcing and peer-to-peer energy trading in blockchain-enabled
smart grids,” IEEE Transactions on Systems, Man, and Cybernetics:
Systems, vol. 49, no. 8, pp. 1612–1623, 2019.

[6] Y. Kim, K. Kim, and J. Kim, “Power trading blockchain using hy-
perledger fabric,” in 2020 International Conference on Information
Networking (ICOIN), 2020, pp. 821–824.

[7] N. Karandikar, A. Chakravorty, and C. Rong, “Transactive energy on
hyperledger fabric,” in 2019 Sixth International Conference on Internet
of Things: Systems, Management and Security (IOTSMS), 2019, pp. 539–
546.

[8] “Json web token,” https://jwt.io/, [Online; accessed May-2020].
[9] W. Park, D. Hwang, and K. Kim, “A totp-based two factor authentication
scheme for hyperledger fabric blockchain,” in 2018 Tenth International
Conference on Ubiquitous and Future Networks (ICUFN), 2018, pp.
817–819.

[10] “800,000 Microinverters Remotely Retroﬁtted

in
https://spectrum.ieee.org/energywise/green-tech/solar/

on Oahu

One
in-one-day-800000-microinverters-remotely-retroﬁtted-on-oahu,
[Online; accessed May-2020].

Day,”

[11] D. Saleem, A. Hasandka, C. W. Lai, D. Jose, and C. M. Howerter,
“Design considerations of a cryptographic module for distributed energy
resources,” 2019.

[12] E. T. Alharbi and D. Alghazzawi, “Two factor authentication framework
using otp-sms based on blockchain,” Transactions on Machine Learning
and Artiﬁcial Intelligence, vol. 7, no. 3, June 2019.

[13] W. D. Casper and S. M. Papa, Root of Trust. Boston, MA: Springer

US, 2011, pp. 1057–1060.

[14] D. Khovratovich and J. Law, “Bip32-ed25519: Hierarchical determinis-
tic keys over a non-linear keyspace,” in 2017 IEEE European Symposium
on Security and Privacy Workshops (EuroS PW), 2017, pp. 27–31.
[15] T. H. Hoor and Q. Z. Sheng, “Trust as a Service: A Framework for
Trust Management in Cloud Environments,” International Conference
on Web Information Systems Engineering, vol. Web Information System
Engineering, no. WISE 2011, pp. 314–321, 2011.

[16] J. Flanigan, “Zero Trust Network Model,” 2018.
[17] J. Kindervag, “Build Security Into Your Networks DNA: The Zero Trust

Network Architecture,” Nov. 2010.

[18] E. Barker and W. C. Barker, “Recommendations for Key Management,”

Apr. 2018.

[19] NIST, “Glossary of Key Information Security Terms,” May 2013.
[20] “SHA-3,” https://en.wikipedia.org/wiki/SHA-3, [Online; accessed May-

2020].

[21] “django: The web framework for perfectionists with deadlines,” https:

//www.djangoproject.com/, [Online; accessed May-2020].

[22] NIST, “Recommendation for Key Mnagament: Best practices for key

management organizations,” May 2019.

[23] “Websocket,” https://en.wikipedia.org/wiki/WebSocket,

[Online; ac-

cessed May-2020].

(a)

(b)

(c)

Fig. 7: (a) EMS Sends the Dispatch Value to the Raspberry
Pi (b) Output from the Fronius Inverter (c) EMS Receives
Information after Symmetric Veriﬁcation

solution with other services that need to verify and trust grid-
edge devices that can be added or removed from the network.

REFERENCES

[1] C. Gorog and T. E. Boult, “Solving global cybersecurity problems
by connecting trust using blockchain,” in 2018 IEEE International
Conference on Internet of Things (iThings) and IEEE Green Computing
and Communications (GreenCom) and IEEE Cyber, Physical and Social
Computing (CPSCom) and IEEE Smart Data (SmartData), July 2018,
pp. 1425–1432.

[2] E. Mnsing, J. Mather, and S. Moura, “Blockchains for decentralized
optimization of energy resources in microgrid networks,” in 2017 IEEE
Conference on Control Technology and Applications (CCTA), Aug 2017,
pp. 2164–2171.

[3] J. Coignard, E. Munsing, J. MacDonald, and J. Mather, “Co-simulation
framework for blockchain based market designs and grid simulations,”

