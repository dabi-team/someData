9
1
0
2

t
c
O
2
2

]
I

N
.
s
c
[

1
v
7
1
6
7
0
.
1
1
9
1
:
v
i
X
r
a

Design and Implementation of Secret Key Agreement
for Platoon-based Vehicular Cyber-Physical Systems

Kai Lia, Wei Nib, Yousef Emamia, Yiran Shenb, Ricardo Severinoa,
David Pereiraa, and Eduardo Tovara

aReal-Time and Embedded Computing Systems Research Centre (CISTER), Porto,
Portugal
bData61, Commonwealth Scientiﬁc and Industrial Research Organization (CSIRO),
Australia

Abstract

In platoon-based vehicular cyber-physical system (PVCPS), a lead vehicle
that is responsible for managing the platoon’s moving directions and veloc-
ity periodically disseminates control messages to the vehicles that follow.
Securing wireless transmissions of the messages between the vehicles is crit-
ical for privacy and conﬁdentiality of platoon’s driving pattern. However,
due to the broadcast nature of radio channels, the transmissions are vulner-
able to eavesdropping. In this paper, we propose a cooperative secret key
agreement (CoopKey) scheme for encrypting/decrypting the control mes-
sages, where the vehicles in PVCPS generate a uniﬁed secret key based on
the quantized fading channel randomness. Channel quantization intervals are
optimized by dynamic programming to minimize the mismatch of keys. A
platooning testbed is built with autonomous robotic vehicles, where a TelosB
wireless node is used for onboard data processing and multi-hop dissemina-
tion. Extensive real-world experiments demonstrate that CoopKey achieves
signiﬁcantly low secret bit mismatch rate in a variety of settings. Moreover,
the standard NIST test suite is employed to verify randomness of the gener-
ated keys, where the p-values of our CoopKey pass all the randomness tests.
We also evaluate CoopKey with an extended platoon size via simulations to
investigate the eﬀect of system scalability on performance.

Keywords: Autonomous vehicles, Data dissemination, Vehicular
cyber-physical system, Wireless security, Key generation

Email address: kaili@isep.ipp.pt (Kai Li)

Preprint submitted to ACM Transactions on Cyber-Physical Systems November 19, 2019

 
 
 
 
 
 
1. Introduction

In the past few years, advances in autonomous vehicles and inter-vehicle
wireless communications have enabled a new platoon-based driving pattern,
especially on highways, where the lead vehicle is manually driven and the oth-
ers follow in a fully automated manner. Vehicular platoon is regarded as a
promising driving concept and has been veriﬁed to signiﬁcantly improve road
capacity and safety of automated highway systems, and accordingly reduces
the traﬃc congestion (e.g., Safe Road Trains for the Environment Project [1],
SafeCop Project [2], and ENABLE-S3 Project [3]). The vehicular platoon
can also reduce the fuel consumption and exhaust emissions by 4.7–7.7% due
to air drag reduction between the two vehicles [4]. Platoon-based Vehicu-
lar Cyber-Physical Systems (PVCPS) are characterized to provide wireless
connectivity to vehicular platoons, where the vehicle is equipped with a wire-
less communication interface on board [5, 6]. For managing the platoon in
PVCPS, the lead vehicle controls the platoon’s driving status, including driv-
ing speed, heading directions, and acceleration/deceleration values, which
indicates emergent road conditions, such as traﬃc jams, crossroads, obsta-
cles or car accidents. As shown in Figure 1, the lead vehicle periodically
transmits control messages to update the platoon’s vehicles with the driving
status. The following vehicles in PVCPS act as data-forwarding nodes so
that messages from the leader can be disseminated to all vehicles in the pla-
toon [7]. In particular, the preceding vehicle disseminates the command to
its following vehicle based on store-and-forward broadcasts at diﬀerent time
slots without causing interference to the other vehicles in the platoon [8].
Due to the broadcast nature of radio channels, vehicular command dissem-
ination in PVCPS is vulnerable to eavesdropping attacks [9, 10]. With the
eavesdropped information, adversaries could track the location of vehicles of
interest, and launch spooﬁng, playback, or impersonation attacks to abuse
mobility patterns of the platoon. Consequently, a secret key for message
encryption/decryption is crucial to support control message conﬁdentiality,
integrity, and sender authentication, which is also critical to the driving safety
in PVCPS.

A common method for establishing a secret key is by using public key
cryptography. However, public key cryptography requires a ﬁxed key man-
agement infrastructure, which is not applicable to real-time data transmission

2

Figure 1: In PVCPS, a lead vehicle transmits control messages to update the platoon’s
driving status. The following vehicles act as data-forwarding nodes for command dissem-
ination, which can be overheard by an eavesdropper vehicle. In this example, a simple
method with ﬁxed quantization intervals is used to quantize samples of the received signal.
The quantization will output 010110000100111.

in mobile wireless environments. Although quantum cryptography [11] has
started to appear recently, it is prohibitively expensive on the implementa-
tion.

Comparing to various physical layer information of radio channel (such
as channel phase), Received signal strength (RSS) can be measured by most
of current oﬀ-the-shelf wireless devices without any modiﬁcation, and thus
presenting signiﬁcant cost savings. Generating the secret key with RSS mea-
surements on inter-vehicle radio channel is a promising approach [12, 13, 14],
where two adjacent vehicles in PVCPS extract secret bits from the inherently
random spatial and temporal variations of the reciprocal wireless channel
between them. Moreover, the properties of the channel are unique to the
locations of the platooning vehicles in PVCPS. An eavesdropper misaligned
with the platoon measures uncorrelated RSS values, which results in diﬀer-
ent quantization intervals. Thus, the eavesdropper is not able to generate
the same secret key as the platooning vehicles. In addition, RSS varies over
time due to motion of the vehicles and multipath propagation. The temporal
and spatial variations of RSS can randomize the generated secret key, which
enhances security of the RSS-based secret key generation. Particularly, all
the vehicles in PVCPS have to agree upon a unanimous secret key so that

3

the disseminated command from the preceding vehicle can be successfully
decoded by the following one. However, two critical challenges arise in the
secret key agreement. First, the RSS measurements obtained between a pair
of vehicles cannot be transmitted over the insecure public channel that is ob-
servable to the eavesdropper vehicle, making it hard to reach key agreement
for multiple vehicles. Second, previous works on RSS based secret key gener-
ation mainly focused on improving the secret bit generation rate between a
pair of nodes (by exploiting multiple antenna diversity [15], temporally and
spatially correlated channel coeﬃcients [16], or opportunistic beamforming
and frequency diversity [17]). The unanimity problem of key generation over
multiple vehicles remains unsolved.

In this paper, we propose a cooperative secret key agreement (Coop-
Key) scheme to address both of the above challenges for secure command
dissemination in PVCPS. Unlike existing key generations for point-to-point
communication, CoopKey focuses on the unanimous secret key generation
over multiple nodes, which is used for encrypting/decrypting the command.
One dissemination cycle consists of two stages, i.e., cooperative secret key
agreement (CSKA) followed by encrypted vehicular command dissemination
(EVCD), and the two stages interchange periodically until all control com-
mands from the lead vehicle are disseminated to the tail vehicle. During
CSKA, the vehicles share channel randomness information by transmitting
beacon packets. At the end of CSKA, CoopKey cooperatively quantizes the
measured/estimated RSS readings on each vehicle in PVCPS. RSS quanti-
zation intervals are recursively adjusted until a unanimous secret key can be
generated in EVCD. Note that relative mobility of the platooning vehicles is
low and stabilized by applying an eﬃcient cruise control in PVCPS, e.g., the
techniques in [8] or [18], which sustains the reliable RSS measurement.

To evaluate performance and eﬀectiveness of CoopKey in practical envi-
ronments, a multi-hop command dissemination testbed is built by forming a
platoon of Autonomous Robotic Vehicles (ARVs). For onboard data process-
ing and disseminating, a TelosB wireless node that is equipped with an IEEE
812.15.4-compliant RF transceiver is placed on top of the ARV. Motion of
the ARV captures random spatial and temporal variations of the reciprocal
inter-ARV channel, which is critical to measure the RSS of fading changes.
Experiments are conducted along a walking path in front of the building of
CISTER Research Centre in Porto, Portugal. The experiments are designed
to show the eﬀect of inter-ARV distances, number of RSS quantization inter-
vals, and secret key length on CoopKey. The experimental results conﬁrm

4

the feasibility of using CoopKey for multiple vehicles in real-world PVCPS.
The results also demonstrate that CoopKey achieves a lower bit mismatch
rate (BMMR) than existing non-cooperative key generation schemes. By ap-
plying CoopKey, BMMR of the secret key generated by an eavesdropper is
higher than 73%, indicating that any eavesdropper experiencing independent
channel fading is not able to obtain the same key as the ARVs. Furthermore,
the generated secret key bit streams also pass the randomness tests of the
NIST test suite [19], which validates the eﬀectiveness of CoopKey. CoopKey
is also evaluated in simulations with an extended platoon size and inter-
vehicle distance to study the scalability.

It is worth mentioning that some preliminary simulation results were
reported in [20], where three static sensor nodes cooperatively generate a
secret key to encrypt/decrypt the transmitted data in a 2-hop wireless sensor
network. However, the results in [20] can be hardly applied to mobile ARVs
in PVCPS, since a ﬁxed inter-node distance results in a stable communication
connectivity and small RSS variation. Moreover, the static placement of the
nodes in [20] cannot capture the ARV movements on the link characteristics.
The rest of the paper is organized as follows. Section 2 presents the
command dissemination security protocol. In Section 3, the steps that incor-
porate CoopKey for secret key agreement are investigated. Implementation
In Section 5, CoopKey is ﬁrstly
of CoopKey is investigated in Section 4.
evaluated on a multi-hop autonomous mobile robotics testbed. Next, the
scalability of CoopKey in PVCPS is studied via extensive simulations. Sec-
tion 6 presents related work on link-based secret key generation and vehicle
network security, followed by conclusions in Section 7.

2. Communication Protocol and System Model

In this section, we present a 2-stage command dissemination protocol for

the secure data dissemination in PVCPS, followed by a system model.

2.1. Command dissemination protocol

Figure 2 demonstrates the 2-stage command dissemination protocol, with
CSKA followed by EVCD, where CoopKey is applied for encrypting/decrypting
the control command. The purpose of CSKA is to share link information
among the vehicles, where the vehicles broadcast a single beacon packet in
turn. Speciﬁcally, the ID number of vehicles ﬁts in the beacon. Transmitting
the beacon packet is initialized by the lead vehicle, which solely decides the

5

Figure 2: The communication protocol for the secret key agreement and command dis-
semination in PVCPS.

driving status. Similarly, the adjacent following vehicle broadcasts its beacon
packet once the beacon from the lead vehicle is successfully received. Ideally,
both the lead vehicle and its adjacent following vehicle should measure the
RSS values at the same time by receiving the beacon packets. However, typ-
ical commercial wireless transceivers are half duplex, i.e., they cannot both
transmit and receive the signals simultaneously. Thus, the two vehicles must
measure the radio channel in one direction at a time. Since the time between
transmissions of the beacons is much smaller than the inverse of the rate
of change of the channel, the measurements have similar RSS readings [21].
Note that the beacon packet of the next vehicle can be an acknowledgement
to the reception of the preceding vehicle’s beacon.
In other words, if the
beacon of the next vehicle is not received, the preceding vehicle will have to
retransmit its beacon packet.

At the end of CSKA, when all the vehicles in PVCPS ﬁnish the beacon
transmission, the following vehicles estimate the RSS values between the
ﬁrst two vehicles in the platoon. Next, the CoopKey scheme is carried out to
generate a unanimous secret key based on the estimation of the RSS values.
Details will be discussed in the next section.

6

The following vehiclesbeaconCoopKeyDATADATADATADATAThe lead vehicleDATA 1     2DATA 2     3DATA 3     4DATA 4     5DATA N-1    NCooperative Secret Key AgreementEncrypted Vehicular Command DisseminationData dissemination cyclebeaconsCoopKeyNote that multiple beacon transmissions can be initialized by the lead
vehicle in one dissemination cycle.
In this case, CoopKey can be con-
ducted in Z iterations (Z ≥ 1), and Z secret keys are generated at each
vehicle. The larger value of Z, the lower RSS estimation errors. This, in
turn, leads to a higher likelihood that the generated keys can be uniﬁed
due to 1 − (1/RBM M )Z, where RBM M denotes secret bits mismatch rate and
0 ≤ 1/RBM M ≤ 1.

In terms of overhead, consider a 10-vehicle platoon and the lead vehicle
transmits 5 beacon packets in one dissemination cycle. The length of a
beacon packet is 4 bits. Thus, the total overhead consists of 200 bits, which
is much smaller than the size of a data packet. Therefore, the overhead of
beacon transmission is negligible due to the small amount of payload.

For encrypted transmission of the control commands, at the ﬁrst time
slot of EVCD in the dissemination cycle, the lead vehicle uses its secret key
generated by CoopKey to encrypt its data packet, and immediately forwards
to its next following vehicle. The following vehicles in PVCPS forward the
received data packet all the way to the tail vehicle while using their own se-
cret key for the packet decryption. In addition, to enhance the transmission
reliability of the data packet, the following vehicles utilize one-hop point-to-
point communication in EVCD, which can be supported by both low and
high data rate transmissions such as IEEE 802.15.4 in wireless sensor net-
works [22], or Dedicated Short-Range Communication (DSRC)/ITS-G5 in
vehicle networks [23].

2.2. System model

As the platoon size is predetermined before forming the platoon, we con-
sider an N -vehicle PVCPS, and the command dissemination forms (N − 1)
wireless hops. For the sake of driving safety, the non-leading vehicle in the
platoon is required to maintain a certain distance with the preceding one at
any time slot t, which is denoted by di,j(t) (i, j ∈ [1, N ]). t ≤ T , where T is
the total number of time slots in CSKA. Without loss of generality, we con-
sider that the vehicles are traveling with no need to change the platoon size
or perform maneuvers (split, merge, leave, etc.), which keeps the operations
of cruise control simple. In particular, Line of Sight (LOS) communication
between the vehicles is available as the antenna can be installed on top of the
vehicle, and the platoon travels on the same road segment. Thus, large-scale
path loss is considered to model the inter-vehicle communication channel.

7

Let P tx

i (t) denote the transmit power (in dB) of a beacon packet at vi.
The receive power at vj that depends on the distance between vi and vj can
be given by

j (t) = P tx
P rx

i (t) + ϑ − 10ηP L log10(di,j(t)) + φi,j(t),

(1)

where ϑ is a positive ﬁxed constant relating to the channel, and ηP L is the
path loss exponent. The term φi,j(t) denotes the lognormal shadow fading
over slot t. Thus, we know

di,j(t) = 10

Hi,j (t)+ϑ+φi,j (t)
10ηP L

,

(2)

i (t) − P rx

where Hi,j(t) = P tx
j (t) presents the RSS of the channel between
sender vi and receiver vj. According to the reception of the beacon packet,
the RSS value between vi and vj (i ∈ [1, 2], j ∈ [3, N ]), i.e., H1,j(t) and
H2,j(t), can be measured by the following vehicle vj.

Given the driving pattern of the platoon, the distance between v1 and
v2 can be obtained by d1,2(t) = d1,j(t) − d2,j(t). According to (2), the RSS
of the link between v1 and v2 can be estimated by the other (following)
vehicle vj (j ∈ [3, N ]) based on the diﬀerence between H1,j(t) and H2,j(t).

H

j
1,2(t)+ϑ+φ1,2(t)
10ηP L

H1,j (t)+ϑ+φ1,j (t)
10ηP L

H2,j (t)+ϑ+φ2,j (t)
10ηP L

= 10

1,2(t) denotes
− 10
10
the estimate of H1,2(t) at vj. Therefore, all the vehicles in PVCPS can have
(either measured or estimated) RSS information of the channel between v1
and v2. A uniﬁed secret key can be generated at the vehicles in PVCPS once
H1,2(t) and H j
1,2(t) are properly quantized by vi and vj (i ∈ [1, 2], j ∈ [3, N ]),
respectively. Notations used in the paper are summarized in Table 1.

, where H j

3. Cooperative Secret Key Agreement

In this section, we investigate adaptive RSS quantization and secret key
extraction to incorporate CoopKey during CSKA. In addition, an eavesdrop-
per that can also quantize the RSS measurement in attempt to recover the
secret key is also discussed.

3.1. Adaptive RSS quantization

Since H1,2(t) measured by vehicles v1 and v2 or H i

1,2(t) estimated by
vehicle vi (i ∈ [3, N ]) can be diﬀerent, due to the motion of the vehicles and
multipath fading, the generated secret key bits at the vehicles in PVCPS

8

can be possibly inconsistent if the quantization intervals are not properly
determined. In this step, the variations of the RSS are optimally quantized
for generating the secret keys. Speciﬁcally, v1 and v2 quantize H1,2(t), while
the other following vehicles vi (i ∈ [3, N ]) quantize the H i
1,2(t) so that the
fading channel randomness can be converted into bit vectors. We deﬁne
RBM M
as the number of secret bits that mismatch at the l-th quantization
l
interval, which yields

RBM M
l

= (cid:89)(fqnt(H1,2(t)), fqnt(H 3

1,2(t))) +

N −1
(cid:88)

j=3

(cid:89)(fqnt(H j

1,2(t)), fqnt(H j+1

1,2 (t))),

where 0 ≤ 1/RBM M ≤ 1, (cid:89)(·) stands for the operation of XOR, and fqnt(·) is
a quantizer to convert RSS measurements into key bits. In particular, fqnt(·)
can be given by [24]

(3)

fqnt(xi(t)) =

(cid:40)

l ≤ xi(t) < ξ+
l ;

1, if ξ−
0, otherwise.

(4)

where 1 < l ≤ L, and L denotes the total number of quantization intervals.
ξ+
l and ξ−
l denote the upper and lower thresholds of the l-th quantization
interval, respectively. xi(t) is the RSS measurement at vehicle vi in time slot
t.

l

now is to obtain ξ+

Due to the fact that ξ+

l , the problem of deriving ξ−

l−1 = ξ−
l−1, where l ∈ (1, L]. Therefore, ξ+

for minimizing
l and ξ−
RBM M
(l ∈
l
l
(1, L]) can be recursively adapted with the aim of minimizing RBM M
. Note
that ξ−
1 is the minimum required RSS for decoding the packet, which is known
apriori. Motivated by this, we propose a dynamic programming approach for
achieving a feasible RSS quantization intervals allocation with a polynomial
complexity. Speciﬁcally, we deﬁne the subproblem for the ﬁrst l intervals
by Φl, which leads to the minimum mismatch rate of RSS quantizations, as
given by

l

Φl = min
l(cid:48)∈(1,l]

(cid:110)

RBM M
l(cid:48)

| ξ−

l(cid:48) < ξ+

l(cid:48) , ξ+

l(cid:48)−1 ≤ ξ−
l(cid:48)

(cid:111)
,

(5)

According to Bellman Equation [25], Φl can be solved recursively, based
on the results of all preceding subproblems Φl−1. It can be given by Φl =
min{Φl−1, RBM M

}.

l

9

The number of subproblems Φl depends on the total number of quan-
tization intervals, L. After solving all the subproblems, the quantization
intervals can be given by

{ξ−

1 , ξ+

1 , ..., ξ−

L , ξ+

L } = arg min
l∈(1,L]

l
(cid:88)

l(cid:48)=1

RBM M
l

(6)

Backward induction has been widely used to solve dynamic programming
problems and can determine a sequence of optimal actions by reasoning back-
It starts by ﬁrst assessing the last bound of the quantization
wards [26].
intervals, i.e., ξ+
L , and then uses the outcome to determine the second-to-
last bound, i.e., ξ−
L . This continues until the bounds are decided for all the
quantization intervals. The details are presented in Algorithm 1.

In terms of time complexity of Algorithm 1, the number of subproblems to
be solved depends on the total number of quantization intervals, L. The time
complexity of solving each subproblem using (5) is O(1). The time complex-
ity of backward induction is O(L). Therefore, the overall time complexity of
CoopKey is O(L2), which is applicable to a practical PVCPS.

l

1 , ξ+

l , ξ+

1 , ..., ξ−

} according to (5).

Solve Φl = min{Φl−1, RBM M
l
Record {ξ−
l }.

Algorithm 1 Dynamic programming algorithm with backward induc-
tion
, ξ−
1: Initialize: RBM M
1
2: for Each quantization interval l = 1 to L do
3:
4:
5: end for
6: Backward induction
7: l → L.
8: for l ≥ 2 do
9:
10:
11:
12:
13: end for
14: RSS measurement of the vehicle at t is quantized according to (4).

Φl ← RBM M
Upper threshold: ξ+
Trace backward: ξ−
l → l − 1.

l ← (6).
l → ξ+
l−1.

.

l

10

3.2. Secret key extraction

After the RSS quantization, an encoding scheme, i.e., f vi

encoding(ξ−
l ) is
utilized to assign a binary codeword to each quantization bin [ξ−
l ] for
extracting the secret key Ki. Speciﬁcally, we implement Gray coding as an
example of f vi

l , ξ+
l , ξ+

l ) as follows [27, 28].

encoding(ξ−

l , ξ+

• Let ki(l), l ∈ (1, L] denote the complement bit of the codeword, where

(cid:40)

ki(l) =

1, l mod 4 ≥ 2;
0, otherwise.

(7)

• Generate a Gray codeword list whose two neighboring codewords only
have one-bit diﬀerence. Moreover, the list contains 2Q possible code-
words, where Q denotes length of the Gray codeword.

• Deﬁne f +
codeword.

i (l) = (cid:98)(l − 1)/4(cid:99). Thus, K +

i (l) ∈ {0, 1}Q is the f +

i (l)-th Gray

• Deﬁne f −

i (l) = (cid:98)((l + 1) mod L)/4(cid:99). Thus, K −

f −
i (l)-th Gray codeword. Moreover, K −
that circularly shifts K +

i (l) by two elements.

i (l) ∈ {0, 1}Q is the
i (l) can be the codeword list

l , ξ+

encoding(ξ−

l ) can be employed by other existing encoding schemes,

Note that f vi
e.g., Gillham coding, and Lucal coding. Based on the codeword of f vi
encoding(ξ−
well-studied symmetric secret keys can be straightforwardly generated to en-
crypt and protect the transmissions at every hop. Algorithm 2 depicts the
algorithm ﬂow of cooperative secret key agreement in CoopKey.

l , ξ+

l ),

Also note that the proposed CoopKey algorithm is compatible with state-
of-the-art secret key reconciliation schemes, such as Cascade [29], low density
parity check [30] and Turbo code [31], where the secret bit discrepancies of
the key agreement resulting from random channel noises are reconciled for
all the vehicles. The overhead of the reconciliation can be reduced by taking
advantage of a high key agreement rate achieved by CoopKey. Therefore,
CoopKey guarantees the key agreement and correctness at the vehicles in
the presence of the RSS measurement randomness.

11

Algorithm 2 Algorithm ﬂow of CoopKey.

L , ξ+

L } ← Alg. 1.

← (3).
1 , ..., ξ−

Beacon packets are broadcasted by the vehicles.

1: Initialize: beacons, N , L, T , Z.
2: RSS measurement and quantization:
3: while Iterations are smaller than Z do
4:
5: RBM M
l
1 , ξ+
{ξ−
6:
7: end while
8: Secret key extraction:
9: for l ≤ L do
10:
11:
12:
13:
14:
end if
15:
16: end for
17: Output:
18: The secret key Ki is used by vi (i ∈ [1, N ]) to encrypt/decrypt the data.

end if
if vi ∈ {v3, v4, ..., vN } & fqnt(H i
encoding(ξ−

if vi ∈ {v1, v2} & fqnt(H1,2(t)) ∈ [ξ−

the Q-bit secret key Ki.

1,2(t)) ∈ [ξ−

encoding(ξ−

Ki ← f vi

Ki ← f vi

l ] then

l ] then

l , ξ+

l , ξ+

l , ξ+

l , ξ+

l ).

l ).

3.3. The eavesdropper

An eavesdropper is typically wavelengths away from the platoon, and can
experience an independent radio channel [32]. This is because the eavesdrop-
per can be noticed or detected when it is too close to the platoon (e.g., less
than a few wavelengths from the platoon). As the vehicles of the platoon
drive at a highway speed in a fully automatic fashion, a dedicated lane is
likely to be reserved on the highway for vehicular platoons for driving safety.
Any other vehicles taking the reserved lane can be regarded as eavesdroppers.
However, an eavesdropper can travel in parallel to a platoon at the similar
velocity, while keeping some distance to not be noticed.

The eavesdropper can overhear the beacon packets during CSKA, and
quantize the channels from the platooning vehicles in attempt to recover
the secret key. The eavesdropper that attempts to decode cruise control in-
formation of the platoon is not interested in disrupting the key agreement
in PVCPS. Moreover, the eavesdropper is not able to possess the aprior
knowledge of RSS measurements between two arbitrary locations that the
platooning vehicles are, since such environmental sensitive information re-

12

quires signiﬁcant eﬀort to obtain, e.g., recording RSS ﬁngerprints of every
movement along the highway in advance.

4. Implementation of CoopKey Testbed

We implement CoopKey with the command dissemination protocol on our
multi-hop ARV testbed, as shown in Figure 3. The testbed is built with a
platoon of 4 ARVs, from v1 (the lead ARV) to v4 (the tail ARV). Particularly,
the two adjacent ARVs are physically connected by a pulling rope to ensure
that the platoon maintains the same travelling direction. The ARV is built
based on a low-cost robot WIFIBOT [33]. Mechanical design and four wheel
drive of WIFIBOT allow the ARV to move over irregular surfaces or even
small obstacles. Moreover, the small dimensions (length = 28 cm, width =
30 cm, and height = 20 cm) and low weight of 4.5 kg make the ARV easily
transportable and manageable during the experiments.

With regards to the wireless communication interface, the Crossbow TelosB

wireless node mounted on a 1m-high plastic pole is placed on top of the ARV.
Speciﬁcally, the TelosB node is a low power wireless sensor module equipped
with an IEEE 812.15.4-compliant RF transceiver (the Chipcon CC2420 op-
erating in the 2.4 GHz frequency band), a built-in antenna, and an 8 MHz
TI MSP430 microcontroller. The TelosB node has the maximum data rate
of 250 kbps, while the maximum transmission power is 0 dBm. In particular,
the data rate and transmission power of all ARVs are set to the maximum
level during our experiments. In terms of packet length, the payload of the
data packet has 100 bytes while the beacon packet is 1 byte. Although the
TelosB node is designed for low data rate transmission and low computation
capabilities, it is still applicable for executing CoopKey at the ARV testbed
due to a short data packet length. Moreover, we also connect the TelosB
node at the tail ARV, i.e., v4, to a laptop via a USB connection to record
the secret key and data packet at the ARV for postprocessing and analysis.
The transmission of data packets is initialized by the lead ARV. The
data packets are encrypted by CoopKey at the lead ARV, and immediately
disseminated to its adjacent following ARV all the way to the tail ARV. When
the tail ARV successfully receives the data, it broadcasts an acknowledgement
packet so that the lead ARV can transmit a new packet. In case of packet
loss during the dissemination, a timeout of the packet dissemination at the
lead ARV is set to 3 seconds. In other words, the lead ARV disseminates a
new data packet if the acknowledgement from the tail ARV is not received

13

Figure 3: The CoopKey testbed is built with 4 ARVs, from v1 to v4, which are physically
connected by pulling ropes. The inter-ARV distance is dv. The TelosB node mounted on
a 1m-high plastic pole is placed on top of the ARV. The TelosB node at v4 is connected
to a laptop via a USB connection for data logging.

within 3 seconds. Moreover, an experiment is conducted on the ARV testbed
to measure RSS at the three following ARVs with the diﬀerent inter-ARV
distance. Figure 4 shows that RSS at the following ARVs drops with the
inter-ARV distance, which demonstrates feasibility of the channel estimation
in CoopKey.

5. Experimental Results

In this section, we ﬁrst present experimental scenarios and performance
metrics for evaluating CoopKey. Then, extensive experiments are conducted
on the ARV testbed to show the Bit MisMatch Rate (BMMR) of PVCPS with
regards to inter-ARV distances, RSS quantization intervals, and Z iterations.
To further reveal the security of CoopKey, we show BMMR of the secret key
that is generated by the eavesdropper, when it overhears the beacon packets.
In addition, to study the eﬀect of system scalability on the performance,
CoopKey is also evaluated in simulations with an extended platoon size.

14

Figure 4: RSS of the ﬁrst and the last following ARVs with regards to 2 m or 5 m of the
inter-ARV distance (i.e., dv).

5.1. Experimental setup

The ARVs in our testbed travel in a straight line with the velocity about
0.3 ∼ 1 m/s which is determined by the lead ARV, keeping the operations
of the cruise control simple. Although the experiments are conducted at a
low speed, the performance evaluation is still convincing since the proposed
secret key agreement is achieved based on the optimal quantization of the
RSS no matter what speed the PVCPS drives. Duration of one experiment
(i.e., traveling time of the ARVs) is around 10 minutes. The inter-ARV
distance increases from 2 m to 8 m given P tx
i (t) = 0 dBm. The number of
RSS quantization intervals, i.e., L, is 2 or 5. To explore the impact of Z,
CoopKey is conducted in 1, 5, 10, 15, or 20 iterations. Moreover, payload of
the beacon packet contains PacketType and SenderID. The ﬁeld PacketType
is set to “1” for the beacon packet, and “0” for all other data types. The
ACK packet of the tail vehicle has one bit, where “1” indicates that the data
is successfully received, otherwise, it is “0”.

We also carry out a comparison study between CoopKey and the non-
cooperative key generation scheme (named as “LocalKey”), where each fol-
lowing ARV separately generates its secret key based on the quantized RSS
In terms of the perfor-
measurement when the beacon packet is received.

15

Timesequence(s)0100200300400500600RSS(dB)-25-20-15-10-50v2dv=2mdv=5mTimesequence(s)0100200300400500600RSS(dB)-45-40-35-30-25-20-15-10-5v4dv=2mdv=5mmance metric, BMMR of PVCPS deﬁnes the number of secret bits generated
by the following ARV, which mismatches the one generated by the lead ARV,
over the Q bits. Thus, it gives

BMMR =

1
Q

Q
(cid:88)

q=1

(cid:89)(K1(q), Ki(q)),

(8)

where Ki(q) (i (cid:54)= 1) is the q-th bit of the key generated by i-th ARV. A
mobile device is considered as the eavesdropper which is 2 meters away from
the second ARV in our testbed. The eavesdropper travels in parallel to
the platooning ARVs with the similar velocity. A TelosB node is placed on
the eavesdropper for overhearing the transmission of the platooning ARVs.
Moreover, the eavesdropper also applies CoopKey to generate its secret key
for decoding the overheard data packets.

5.2. Performance of secret key agreement
5.2.1. BMMR

Figure 5 shows BMMR at v2 and v4 with an increasing inter-ARV dis-
tance, where Z = 1 and L = 2 or 5. We can see that CoopKey with L =
2 achieves about 22% lower BMMR than LocalKey at v2 and v4. This is
because CoopKey recursively adapts the quantization intervals at each ARV
based on the measured/estimated RSS readings for generating a unanimous
secret key. Moreover, BMMR of CoopKey at v2 and v4 gradually increases
with the inter-ARV distance due to channel estimation errors caused by the
RSS measurement randomness. Particularly, BMMR of CoopKey at v2 is
lower than the one at v4 by 4% when dv = 2 m since v2 generates the secret
key with the RSS readings of the beacon packet, while v4 generates the key
with the estimated RSS of H1,2(t).

We also observe in Figure 5 that decreasing the quantization intervals, i.e.,
L, reduces BMMR of CoopKey. Speciﬁcally, BMMR at v2 and v4 drops from
0.06 to 0.02, and from 0.12 to 0.07, respectively, while L decreases from 5 to
2. This indicates that the small number of quantization intervals makes the
vehicles easy to reach key agreement. However, decreasing L results in a rise
of security vulnerability on the generated secret key, where the eavesdropper
may generate the same secret key as the platooning vehicles. Therefore, it
is critical to comprehensively conﬁgure L according to the required BMMR
and the platoon size.

16

Figure 5: BMMR of CoopKey at the ARVs v2 and v4 with an increasing inter-ARV distance
dv, given L = 2 or 5.

Figure 6 demonstrates BMMR at v2 and v4 with the growth of secret key
length Q, where Z = 1, dv = 2 m, and L = 2 or 5. Generally, BMMR of
CoopKey increases with the secret key length. The reason is because the
longer the secret key is, the more secret bits need to be generated and uni-
ﬁed, and in turn, the lower chance that the quantized RSS readings become
consistent. In particular, CoopKey with Q = 2 at v2 achieves the minimum
BMMR which is about 0.019 (at L = 2) or 0.02 (at L = 5). Moreover, when
the key length increases to 7 bits, BMMR at v2 is less than 0.061. At v4, the
BMMR of CoopKey with L = 2 and 5 is smaller than 0.065 and 0.1 when Q
is less than 7 bits.

Figure 6 implies a tradeoﬀ between BMMR of CoopKey and command
dissemination security. Shortening the secret key length of CoopKey reduces
BMMR, however, a drop in the number of secret bits results in a fall of
transmission security, where the eavesdropper may generate the same key to
decode the data. Therefore, it is critical to holistically conﬁgure Q in PVCPS
according to the minimum requirement of the BMMR and quantization in-
tervals.

In Figure 7, Z of CoopKey increases from 1 to 20 iterations, given L =
2 or 5 and dv = 2 m. In this case, CoopKey is conducted in Z iterations
(Z ≥ 1), and Z number of secret keys are generated at each ARV. It is
observed that BMMR generally decreases with the growth of Z values. In
particular, given L = 2, the BMMR at v3 and v4 drops from 0.076 and 0.07 to

17

Inter-ARVdistance(m)2345678BMMR00.050.10.150.20.250.3v4,L=2v4,L=5v2,L=2v2,L=5v2,LocalKeyv4,LocalKeyFigure 6: BMMR of CoopKey at the ARVs v2 and v4 with diﬀerent key length Q, given
L = 2 or 5.

0.02 and 0.025, respectively. It conﬁrms that the larger Z is, the smaller the
estimation errors are, and in turn, the higher likelihood that the keys become
consistent due to 1−(1/RBM M )Z. Therefore, increasing Z can reduce BMMR
of CoopKey.

Figure 7: BMMR of CoopKey at the ARVs v2 and v4 with an increasing Z, given L = 2
or 5.

5.2.2. Secret bits randomness

To ensure that the secret key generated is substantially random, the stan-
dard randomness test suite from NIST [19] is employed to verify the eﬀective-
ness of CoopKey. Given 16 diﬀerent statistical tests in the NIST test suite,

18

234567BMMR00.020.040.060.080.1v2,L=2v2,L=5Secretkeylength(bits)234567BMMR00.020.040.060.080.1v4,L=2v4,L=5Z(iterations)15101520BMMR00.020.040.060.080.1v3,L=2v3,L=5Z(iterations)15101520BMMR00.020.040.060.080.1v4,L=2v4,L=5we run 8 tests of them and calculate their p-values. The p-value indicates the
probability that a perfect random number generator would have produced
a sequence less random than the input sequence that is tested. The reason
of selecting the 8 NIST tests is because their recommended input size meets
bit streams of the secret keys in our experiments. Note that the remaining
8 tests require a very large input bit stream (more than 106 bits), where a
large number of keys (in gigabytes) need to be generated. Moreover, each
test is conducted in 7 scenarios from A to G, where dv increases from 2 m to
8 m.

As shown in Table 2, all the keys generated by CoopKey pass the test,
and have much larger p-value than 0.01 which is the threshold to pass the
test. In particular, a p-value larger than 0.01 indicates that the secret bit
streams of CoopKey are random with a conﬁdence of 99%. Furthermore, the
randomness of the keys generated by CoopKey substantially increases the
time complexity of cracking the keys at the eavesdropper, hence protecting
the data dissemination from the eavesdropping attacks.

5.3. BMMR of the eavesdropper

To further unveil the security of CoopKey, Figure 8 plots the BMMR
of the eavesdropper with regards to its relative locations to the platoon.
The BMMR of the eavesdropper calculates the number of secret key bits
generated by the eavesdropper, which mismatch the key bits generated by
the platooning vehicle. Therefore, the higher BMMR the eavesdropper’s
decoded data has, the more secure key agreement CoopKey achieves.

We consider three speciﬁc locations of the eavesdropper, i.e., P1, P2, and
P3. P1 is the location of the eavesdropper next to the middle of v1 and v2,
P2 is the one next to the middle of v3 and v4, and P3 is the one 3 m behind
v4. For each location, the distance between the eavesdropper and the platoon
enlarges from 3 m to 6 m. Here, we assume that the eavesdropper can be
identiﬁed when the distance is less than 3 m.

As observed, the lowest BMMR is about 0.73, where the eavesdropper is 3
m away from the platoon at P1. With the growth of the distance, the BMMR
of the eavesdropper increases to 0.75. Furthermore, when the eavesdropper
is 6 m away from the platoon at P3, its BMMR is about 0.77. The reason
is that randomness of the RSS measurements at the eavesdropper is much
higher than the one at the platooning ARVs due to misalignment with the
ARVs. As a result, the quantization intervals of the eavesdropper could be
very diﬀerent from the ones used by the ARVs given (3). A high BMMR at

19

Figure 8: BMMR of the eavesdropper with regards to its relative locations to the platoon.

the eavesdropper indicates that the eavesdropper is not able to recover the
secret key generated by CoopKey at the ARVs, even though the eavesdropper
has the knowledge of CoopKey. The key agreement achieved by CoopKey is
highly secure against the eavesdropping attack.

5.4. Runtime measurement

In this experiment, the disseminated data packets from the lead ARV
to the tail one are encrypted by CoopKey (where Z = 1, 5, 10, 15, or 20).
Table 3 shows average end-to-end latency of the data dissemination, where
we repeat the experiment for ten times at each setting of Z. Particularly,
the runtime is calculated by summing up the execution time of CoopKey, the
data transmission time at the ARVs, and the propagation delay of the data
packet. From Table 3, we can see that the average latency grows with the
increase of Z iterations. This is reasonable because Algorithm 1 is conducted
to derive the optimal quantization intervals with multiple iterations, which

20

v1v2v3v4Eavesdropper’s location3 m4 m5 m6 m3 m4 m5 m6 m3 m4 m5 m6 mmoving directionP1P2P33 mEavesdropperARVsBMMRDistance(m)3456Eavesdropper’slocationP1P2P30.720.730.740.750.760.770.78results in extra execution time.

Based on Figure 7 and Table 3, a tradeoﬀ between the BMMR of CoopKey
and the data dissemination latency can be known. Speciﬁcally, the higher
Z leads to the more uniﬁed secret key bits in CoopKey while sacriﬁcing
timeliness of the data dissemination. Therefore, the parameter Z has to
be chosen to reduce the BMMR of CoopKey for the key agreement while
meeting the critical need for the low-latency data dissemination in PVCPS.

5.5. Scalability study

To study the eﬀect of system scalability on the performance, CoopKey
is evaluated with an extended platoon size based on simulations. Figure 9
plots the BMMR of CoopKey in terms of the platoon size of PVCPS, where
L is set to 11 or 16. The distance between the two vehicles is maintained at
dv which is set to 10 or 15 meters.

Figure 9: BMMR of CoopKey with respect to the platoon size N , inter-vehicle distance
dv, and number of RSS quantization intervals L.

The BMMR of CoopKey increases with the growth of N . Speciﬁcally,
when N = 4, the CoopKey schemes with dv = 10 m and dv = 15 m have a
similar BMMR. Moreover, when N ≥ 5 vehicles, CoopKey with dv = 10 m
has lower BMMR than the one with dv = 15 m. In particular, the BMMR of
CoopKey with dv = 15 m rises from 6% to 100%, while the one with dv = 10
m increases less than 15%. This conﬁrms the fact that a short inter-vehicle
distance in (2) leads to a strong RSS which eﬀectively reduces BMMR.

In Figure 9, it is also observed that increasing the quantization intervals,
i.e., L, results in a high BMMR. For example, in the case that dv = 15 m

21

Numberofplatooningvehicles45678910BMMR00.20.40.60.81L=11,dv=10mL=11,dv=15mL=16,dv=10mL=16,dv=15mdv=15mdv=10mand dv = 10 m, CoopKey with L = 16 has 50% and 8% more BMMR than
the one with L = 11, when N = 8 and 10, respectively.

6. Literature Review: Secret Key Generation In Mobile Networks

In this section, we review the literature on secret key extraction from the

RSS variations in mobile networks.

6.1. Link-based secret key generation

The eﬀectiveness of link-based secret key extraction between two wireless
devices, e.g., temporal-spatial variations in the radio channel, and mobility
of the devices, is experimentally measured [34]. An environment adaptive se-
cret key generation scheme is developed to improve secret bit generation rate
by extracting multiple bits from each RSS measurement. In [12], a secured
communication scheme is studied for automotive wireless communication.
Symmetric cryptographic keys are generated between two vehicles, based on
physical randomness of the automotive wireless channel under memory and
performance budgets. A secret key generation framework, called HRUBE,
extracts the secret bits from a series of radio channel measurements between
two wireless devices [35]. The channel measurement is quantized by HRUBE
to an arbitrary number of secret bits without censoring. However, HRUBE
requires to precisely know apriori statistical knowledge of the channel distri-
bution to obtain the key length, which is not practical in real-world environ-
ments. To address this limitation, Croft et al. study a ranking method to
remove non-reciprocities of the unknown channel characteristics between the
two devices [21]. The ranking method also enables the secret bit extraction
process independent of the unknown channel distribution.

For the key agreement of two mobile devices, the impact of mobility pat-
terns in obtaining the uncorrelated channel measurements is studied in [36].
It is found that channel impulse responses are mostly uncorrelated when
movement step size is larger than one foot. Moreover, the measured channel
impulse responses are encoded, and the mismatched secret bits between the
two devices can be reconciled by using forward error correction.

The channel response from multiple Orthogonal Frequency-Division Mul-
tiplexing (OFDM) subcarriers can provide the channel information for the
RSS-based key generation [27]. A channel gain complement method is de-
veloped to reduce the non-reciprocity of RSS in the key generation. In [31],

22

the vehicle-to-vehicle communication characteristics, e.g., multipath propa-
gation and surrounding scatterers’ mobility, are incorporated in the key gen-
eration process. The non-reciprocity compensation method in [27] is used
by the transmitter to generate the secret key according to designated RSS,
while Turbo codes are used for channel information reconciliation of multi-
ple links. A stochastic vehicular channel model is utilized to generate the
receiver’s channel response.

However, most works in the literature are interested in generating the key
to encrypt point-to-point communications based on mutually-known channel
information. This can hardly meet the critical need for the key agreement of
multiple users, e.g., vehicular platoon, where the secret key has to be gener-
ated and conformed at each vehicle based on the local channel observation.
In [37], relay nodes are deployed to assist the RSS-based key generation
between two devices. The relay nodes send the diﬀerence of RSS over diﬀerent
radio channels to the two devices. A framework is developed for the two
devices to utilize the information received from the relay nodes and RSS
measurements between the relay nodes and themselves to generate the secret
key. Wang et al. present a key generation protocol in narrowband fading
channels, where the sender and the receiver extract the channel randomness
with the aid of relay nodes [38]. Their protocol applies a time-slotted key
generation scheme, where each relay node contributes a small portion of key
bits so that the complete global key bit information is not available to the
relays.

However, the key generation with the aid of relay nodes is not applicable
to PVCPS since employing relay vehicles can be costly. In addition, the key
agreement with relays would cause extra latency on the control command
dissemination, which can lead to cruise control failures due to lack of timely
updates on the driving status.

6.2. Application-dependent secret key generation

Social ties of mobile devices, which characterize the strengths of relation-
ships among mobile users, can be leveraged to generate the secret key with
the assistance of relay pairs [39]. On the basis of social ties, the selection of
relay pairs is formulated by coalition game theory for improving secure key
generation rate while protecting the keys secret from both eavesdropper and
non-trusted relays. In [40], a handshake-based pairing scheme between wrist
worn smart devices is developed based on the observation that, by shaking
hands, both wrist worn smart devices conduct similar movement patterns.

23

A device pairing scheme is developed by exploiting the motion signal of the
devices generated by the handshake to negotiate a secret key between users.
A fuzzy cryptography algorithm is further studied to remove distortion of the
extracted acceleration data, thus ensuring the robustness of the key agree-
ment.
In [41] and [42], heartbeat intervals measured by wearable medical
devices are used as a random source to generate secret keys. The heartbeat
intervals can be sampled by electrocardiogram sensors or piezo vibration
sensors. It is shown that the heartbeat-based secret key is secured against
typical attacks and power-eﬃcient in wireless body sensor networks.

A random secret key generation scheme that integrates diﬀerential logical
pattern method is presented in [43]. In particular, an input message is split
into a number of blocks for pattern extraction. A random key is generated
based on the generated pattern, where the diﬀerential logical pattern method
performs the encryption process with diﬀerential mode of the input message.
A key agreement protocol is studied for user authentication in Internet of
Things (IoT) networks [44]. The key generation applies cryptographic hash
function along with the symmetric encryption/decryption, which supports
various functionality features, such as user login, sensing node registration,
and biometric update. Biometric information can be used for key gener-
ation and agreement between two parties over an open network [45]. To
improve robustness of the key agreement, random orthonormal projection
and biometric key binding are explored to combine biometrics with existing
authentication factors.

7. Conclusions

In this paper, we study the CoopKey scheme for securing the vehicular
control command dissemination in PVCPS. The secret key is generated based
on the quantized RSS measurements of the inter-vehicle radio channel. The
RSS quantization intervals are recursively adjusted until a unanimous secret
key is generated for encrypting/decrypting the disseminated command. For
evaluating performance of CoopKey, a platooning testbed is built on multiple
ARVs and TelosB wireless nodes. Extensive experiments demonstrate that
CoopKey achieves signiﬁcantly lower secret bit mismatch rate with respect to
the platoon size, the inter-vehicle distance, and the number of quantization
intervals. CoopKey is also evaluated in simulations with an extended platoon
size and inter-vehicle distance to study the eﬀect of system scalability on the
performance.

24

8. Acknowledgement

This work was supported by National Funds through FCT/MEC (Por-
tuguese Foundation for Science and Technology) and co-ﬁnanced by ERDF
(European Regional Development Fund) under the PT2020 Partnership, within
the CISTER Research Unit (CEC/04234); also by FCT/MEC and the EU
ECSEL JU under the H2020 Framework Programme, within project EC-
SEL/0002/2015, JU grant nr. 692529-2 (SAFECOP).

The authors would like to thank Mr. Marwin Adorni for his assistance
with the testbed setup. The authors also thank the editors and the anony-
mous reviewers for their constructive comments on the article.

References

[1] E. Chan, Overview of the sartre platooning project: technology leader-

ship brief, Tech. rep., SAE Technical Paper (2012).

[2] P. Pop, D. Scholle, H. Hansson, G. Widforss, M. Rosqvist, The SafeCOP
ECSEL project: Safe cooperating cyber-physical systems using wireless
communication, in: 2016 Euromicro Conference on Digital System De-
sign (DSD), IEEE, 2016, pp. 532–538.

[3] ENABLE-S3: European initiative to enable validation for highly auto-

mated safe and secure systems [online] (2018) [cited July 2018].

[4] A. Al Alam, A. Gattami, K. H. Johansson, An experimental study on the
fuel reduction potential of heavy duty vehicle platooning, in: Interna-
tional IEEE Conference on Intelligent Transportation Systems (ITSC),
IEEE, 2010, pp. 306–311.

[5] D. Jia, K. Lu, J. Wang, X. Zhang, X. Shen, A survey on platoon-based
vehicular cyber-physical systems, IEEE communications surveys & tu-
torials 18 (1) (2016) 263–284.

[6] D. Jia, K. Lu, J. Wang, On the network connectivity of platoon-based ve-
hicular cyber-physical systems, Transportation Research Part C: Emerg-
ing Technologies 40 (2014) 215–230.

[7] X. Li, C. Qiao, X. Yu, A. Wagh, R. Sudhaakar, S. Addepalli, Toward
eﬀective service scheduling for human drivers in vehicular cyber-physical

25

systems, IEEE Transactions on Parallel and Distributed Systems 23 (9)
(2012) 1775–1789.

[8] K. Li, W. Ni, E. Tovar, M. Guizani, LCD: Low latency command dis-
semination for a platoon of vehicles, in: IEEE International Conference
on Communications (ICC), IEEE, 2018, pp. 1–6.

[9] A. Wasicek, P. Derler, E. A. Lee, Aspect-oriented modeling of attacks
in automotive cyber-physical systems, in: ACM/EDAC/IEEE Design
Automation Conference (DAC), IEEE, 2014, pp. 1–6.

[10] Y.-S. Shiu, S. Y. Chang, H.-C. Wu, S. C.-H. Huang, H.-H. Chen, Phys-
ical layer security in wireless networks: A tutorial, IEEE wireless Com-
munications 18 (2).

[11] L. Greenemeier, Election ﬁx? switzerland tests quantum cryptography,

Scientiﬁc American.

[12] J. Wan, A. Lopez, M. A. A. Faruque, Physical layer key generation:
Securing wireless communication in automotive cyber-physical systems,
ACM Transactions on Cyber-Physical Systems 3 (2) (2018) 13.

[13] K. Zeng, Physical layer key generation in wireless networks: challenges
and opportunities, IEEE Communications Magazine 53 (6) (2015) 33–
39.

[14] Q. Wang, H. Su, K. Ren, K. Kim, Fast and scalable secret key gen-
eration exploiting channel phase randomness in wireless networks, in:
INFOCOM, IEEE, 2011, pp. 1422–1430.

[15] K. Zeng, D. Wu, A. J. Chan, P. Mohapatra, Exploiting multiple-antenna
diversity for shared secret key generation in wireless networks, in: IN-
FOCOM, IEEE, 2010, pp. 1837–1845.

[16] C. Chen, M. A. Jensen, Secret key establishment using temporally and
spatially correlated wireless channel coeﬃcients, IEEE Transactions on
Mobile Computing 10 (2) (2011) 205–215.

[17] P. Huang, X. Wang, Fast secret key generation in static wireless net-
works: A virtual channel approach, in: INFOCOM,, IEEE, 2013, pp.
2292–2300.

26

[18] L. Xiao, F. Gao, Practical string stability of platoon of adaptive cruise
control vehicles, IEEE Transactions on intelligent transportation sys-
tems 12 (4) (2011) 1184–1194.

[19] A. Rukhin, J. Soto, J. Nechvatal, M. Smid, E. Barker, A statistical
test suite for random and pseudorandom number generators for cryp-
tographic applications, Tech. rep., National Institute of Standards and
Technology (2001).

[20] K. Li, H. Kurunathan, R. Severino, E. Tovar, Cooperative key genera-
tion for data dissemination in cyber-physical systems, in: Proceedings
of the 9th ACM/IEEE International Conference on Cyber-Physical Sys-
tems, IEEE Press, 2018, pp. 331–332.

[21] J. Croft, N. Patwari, S. K. Kasera, Robust uncorrelated bit extraction
methodologies for wireless sensors, in: IPSN, ACM, 2010, pp. 70–81.

[22] Zigbee speciﬁcation, San Ramon, CA, USA: ZigBee Alliance.

[23] Y. L. Morgan, Notes on DSRC & WAVE standards suite: Its archi-
tecture, design, and characteristics, IEEE Communications Surveys &
Tutorials 12 (4) (2010) 504–518.

[24] K. Ren, H. Su, Q. Wang, Secret key generation exploiting channel char-
acteristics in wireless communications, IEEE Wireless Communications
18 (4).

[25] D. P. Bertsekas, D. P. Bertsekas, D. P. Bertsekas, D. P. Bertsekas, Dy-
namic programming and optimal control, Vol. 1, Athena scientiﬁc Bel-
mont, MA, 2005.

[26] T. H. Cormen, C. E. Leiserson, R. L. Rivest, C. Stein, Introduction to

algorithms, MIT press, 2009.

[27] H. Liu, Y. Wang, J. Yang, Y. Chen, Fast and practical secret key ex-
traction by exploiting channel response, in: INFOCOM, IEEE, 2013,
pp. 3048–3056.

[28] C. Ye, A. Reznik, Y. Shah, Extracting secrecy from jointly gaussian
random variables, in: IEEE International Symposium on Information
Theory (ISIT), IEEE, 2006, pp. 2593–2597.

27

[29] Y. Wei, K. Zeng, P. Mohapatra, Adaptive wireless channel probing for
shared key generation based on PID controller, IEEE Transactions on
Mobile Computing 12 (9) (2013) 1842–1852.

[30] Y. Liu, S. C. Draper, A. M. Sayeed, Exploiting channel diversity in secret
key generation from multipath fading randomness, IEEE Transactions
on information forensics and security 7 (5) (2012) 1484–1497.

[31] G. Epiphaniou, P. Karadimas, D. K. B. Ismail, H. Al-Khateeb, A. De-
hghantanha, K.-K. R. Choo, Nonreciprocity compensation combined
with turbo codes for secret key generation in vehicular ad hoc social
IoT networks, IEEE Internet of Things Journal 5 (4) (2018) 2496–2505.

[32] G. D. Durgin, Space-time wireless channels, Prentice Hall Professional,

2003.

[33] Wiﬁbot [online] (September 2018) [cited Sep 2018].

[34] S. Jana, S. N. Premnath, M. Clark, S. K. Kasera, N. Patwari, S. V.
Krishnamurthy, On the eﬀectiveness of secret key extraction from wire-
less signal strength in real environments, in: MobiCom, ACM, 2009, pp.
321–332.

[35] N. Patwari, J. Croft, S. Jana, S. K. Kasera, High-rate uncorrelated bit
extraction for shared secret key generation from channel measurements,
IEEE Transactions on Mobile Computing 9 (1) (2010) 17.

[36] J. Zhang, S. K. Kasera, N. Patwari, Mobility assisted secret key gen-
eration using wireless link signatures, in: INFOCOM, IEEE, 2010, pp.
1–5.

[37] H. Liu, J. Yang, Y. Wang, Y. Chen, Collaborative secret key extrac-
tion leveraging received signal strength in mobile wireless networks, in:
INFOCOM, IEEE, 2012, pp. 927–935.

[38] Q. Wang, K. Xu, K. Ren, Cooperative secret key generation from phase
estimation in narrowband fading channels, IEEE Journal on selected
areas in communications 30 (9) (2012) 1666–1674.

[39] M. Waqas, M. Ahmed, Y. Li, D. Jin, S. Chen, Social-aware secret
key generation for secure device-to-device communication via trusted

28

and non-trusted relays, IEEE Transactions on Wireless Communications
17 (6) (2018) 3918–3930.

[40] Q. Jiang, X. Huang, N. Zhang, K. Zhang, X. Ma, J. Ma, Shake to
communicate: Secure handshake acceleration-based pairing mechanism
for wrist worn devices, IEEE Internet of Things Journal.

[41] Q. Lin, W. Xu, J. Liu, A. Khamis, W. Hu, M. Hassan, A. Seneviratne,
H2B: heartbeat-based secret key generation using piezo vibration sen-
sors, in: Proceedings of the 18th International Conference on Informa-
tion Processing in Sensor Networks (IPSN), ACM, 2019, pp. 265–276.

[42] S. Pirbhulal, H. Zhang, W. Wu, S. C. Mukhopadhyay, Y.-T. Zhang,
Heartbeats based biometric random binary sequences generation to se-
cure wireless body sensor networks, IEEE Transactions on Biomedical
Engineering 65 (12) (2018) 2751–2759.

[43] N. Thangamani, M. Murugappan, A lightweight cryptography technique
with random pattern generation, Wireless Personal Communications
104 (4) (2019) 1409–1432.

[44] M. Wazid, A. K. Das, V. Odelu, N. Kumar, M. Conti, M. Jo, Design
of secure user authenticated key management protocol for generic IoT
networks, IEEE Internet of Things Journal 5 (1) (2017) 269–282.

[45] H. Al-Assam, S. Jassim, Robust biometric based key agreement and re-
mote mutual authentication, in: 2012 IEEE 11th International Confer-
ence on Trust, Security and Privacy in Computing and Communications,
IEEE, 2012, pp. 59–65.

29

Table 1: The list of fundamental variables

Notation Deﬁnition

N
vi
Z

T

di,j
ϑ

ηP L
φi,j(t)

P tx

i (t)

Hi,j(t)

H j

1,2(t)

L

RBM M
l

l and ξ−
ξ+

l

Ki
Q

number of vehicles in PVCPS
the ith vehicle in PVCPS
number of iterations of the key
agreement
total number of time slots in
CSKA
distance between the vi and vj
positive ﬁxed constant relating
to the channel
path loss exponent
lognormal shadow fading over
time slot t
transmit power (in dB) of a
beacon packet at vi
RSS of the channel between vi
and vj
estimate of H1,2(t) at vehicle vj
(j ∈ [3, N ])
total number of quantization
intervals
number of secret bits that mis-
match at the l-th quantization
interval
upper and lower thresholds of
the l-th quantization interval,
respectively
the secret key generated by vi
length of the Gray codeword

30

Table 2: P-values from NIST statistical test suite, where dv = 2, 3, 4, 5, 6, 7, or 8. To
pass the test, all p-values must be greater than 0.01.

Test
Frequency
Block Frequency
Cumulative sums(Fwd)
Cumulative sums (Rev)
Runs
longest run of ones
FFT
Approx. Entropy
Serial

A
0.21
0.74
0.21
0.91
0.21
0.12
0.12
0.21
0.21,
0.07

B
0.53
0.534
0.35
0.07
0.74
0.35
0.74
0.35
0.74,
0.35

C
0.12
0.35
0.21
0.12
0.53
0.74
0.02
0.35
0.35,
0.53

D
0.02
0.53
0.04
0.04
0.21
0.53
0.07
0.91
0.12,
0.99

E
0.91
0.74
0.53
0.54
0.79
0.91
0.12
0.74
0.35,
0.91

F
0.07
0.35
0.74
0.21
0.74
0.12
0.02
0.07
0.35,
0.02

G
0.53
0.21
0.74
0.53
0.91
0.07
0.07
0.35
0.74,
0.53

Table 3: Runtime measurement of CoopKey

Z iterations

1
5
10
15
20

End-to-end dissemination latency (ms)

1
81
101
104
100
620

2
76
93
98
108
774

3
80
93
100
103
619

4
82
82
97
107
780

5
87
96
100
107
597

6
81
94
108
160
515

7
66
85
101
100
777

8
93
98
105
103
613

9
97
92
102
469
620

10
87
99
103
104
608

Average latency (ms)

83
93.3
101.8
146.1
652.3

31

