MLPdf: An Effective Machine Learning Based
Approach for PDF Malware Detection

Jason Zhang, Ph.D.
Senior Threat Researcher
Sophos, Abingdon OX14 3YP, U.K.
jason.zhang@sophos.com

8
1
0
2

g
u
A
1
2

]

R
C
.
s
c
[

1
v
1
9
9
6
0
.
8
0
8
1
:
v
i
X
r
a

Abstract—Due to the popularity of portable document format
(PDF) and increasing number of vulnerabilities in major PDF
viewer applications, malware writers continue to use it
to
deliver malware via web downloads, email attachments and
other methods in both targeted and non-targeted attacks. The
topic on how to effectively block malicious PDF documents has
received huge research interests in both cyber security industry
and academia with no sign of slowing down. In this paper,
we propose a novel approach based on a multilayer perceptron
(MLP) neural network model, termed MLPdf , for the detection
of PDF based malware. More speciﬁcally, the MLPdf model
uses a backpropagation algorithm with stochastic gradient decent
search for model update. A group of high quality features are
extracted from two real-world datasets which comprise around
105000 benign and malicious PDF documents. Evaluation results
indicate that the proposed MLPdf approach exhibits excellent
performance which signiﬁcantly outperforms all evaluated eight
well known commercial anti-virus scanners with a much higher
true positive rate of 95.12% achieved while maintaining a very
low false positive rate of 0.08%.

Index Terms—cyber security, PDF malware, malicious docu-
ments, machine learning (ML), artiﬁcial neural network (ANN),
multilayer perceptron (MLP)

I. INTRODUCTION

A. Why Targeting PDF?

Portable document format (PDF) is one of the most com-
monly used ﬁle formats for electronic documents exchange
across applications and platforms. The detailed PDF speciﬁ-
cation can be found in [1]. A few factors help PDF become one
of malware writers’ favourite ﬁle formats to spread malicious
content: i) it is widely used by general users in both work and
non-work environments. Typical examples include academic
articles, technical reports, design documents and electronic
receipts; ii) it is independent of operating systems (OS) and
platforms. One can open a PDF ﬁle with a standalone PDF
viewer or within a modern web browser (with PDF viewer
plug-in) on a Windows machine, a Linux system or a mobile
device; iii) it is an extremely ﬂexible ﬁle format. PDF supports
various types of data in addition to text, e.g. JavaScript,
Flash, media ﬁles, interactive forms, or linking to external
ﬁles and uniform resource locators (URLs), etc. Furthermore,
various encoding and compression methods can be used for
the purpose of reducing ﬁle size, hiding sensitive content, or
both; and iv) it is stealth and elegant. Normally PDF ﬁles are
believed to be less suspicious than executable ﬁles. It is a
common security practice for an IT administrator to deﬁne a

policy to block executable ﬁles from staff email attachments
or web downloads, but it is rare to block PDF documents in
such a manner.

Because of the huge popularity and ﬂexibility of PDF ﬁle
format, it also opens up many ways for attackers to propagate
malware via PDF documents.

B. PDF Based Malware

PDF based attacks typically fall into two categories - phish
and exploits. Phishing attacks are commonly seen in emails.
A typical example can be a PDF based order conﬁrmation or
delivery receipt attached to an email claiming to be sent from
a well known online shopping portal or logistic company. The
text content in such emails provides little value except using
social engineering to entice email receivers to open attached
phishing PDF ﬁles. Such PDF ﬁles are typically single page
long with some social engineering texts and a phishing URL
which leads to a suspicious website for the purpose of personal
information and account credential harvest, or malicious ﬁle
download, etc. As compared to plain text based phishing
attacks, it is more challenging to detect PDF based phish as
PDF documents are binary or mixture of binary and ASCII
texts. This is one of the reasons why PDF based phishing
attacks are increasingly popular. The motivation behind it is
nothing different from typical phishing attacks. The harvested
information from victims could be either used by the attackers
themselves or sold on black markets for business potential of
the so-called shadow economy.

Another common way to spread malware via PDF is to
exploit a vulnerable PDF viewer application in order to execute
malware payload which can be either embedded in a PDF
ﬁle or downloaded. In most cases, this is achieved by taking
advantage of JavaScript supported by PDF to trigger speciﬁc
vulnerabilities and then execute code of an attacker’s choice.
Typically this involves obfuscation and memory manipulation
techniques like buffer overﬂow, return oriented programming
(ROP) and heap spraying via encoded shellcode [2]. Such
malicious content can be encapsulated in a single object,
scattered across multiple objects in a PDF document, or in
the form of lengthy encoded strings (like hex or decimal
encoding) stored in PDF Info dictionary metadata tags (e.g.
Title, Subject, Author). To maximize an attack success rate,
a malicious PDF document could be used to target multiple
vulnerabilities. For example, an attack detected by Sophos

1

 
 
 
 
 
 
targets four vulnerabilities of a popular PDF reading ap-
plication [3]: Util.printf () (CVE-2008-2992), Collab.getIcon
(CVE-2009-0927), Collab.collectEmailInfo (CVE-2007-5659)
and Escript.api plugin media player (CVE-2010-4091). Each
of them affects a certain version of the vulnerable application
depending on the version installed on a victim’s machine.
The detailed information for these vulnerabilities will not
be discussed here. It’s readily available online. Apart from
the vulnerability exploits discussed above, one can also use
other PDF features like /OpenAction,
/AA and /launch to
automatically launch a malicious application or run different
commands depending on an OS.

C. Traditional Detection

There are many approaches developed to block PDF based
attacks, varying from static detection like signature match to
dynamical analysis using sandbox technologies. One of the
advantages of signature based detection is that it is good at
detecting known malware with relatively low FP rates. On the
other hand, as signature based detection normally uses byte
sequences to match speciﬁc malware, it is not robust when
dealing with zero-day attacks or malware variants. This puts
great challenges to AV scanners relying heavily on signature
detection. An alternative approach is based on dynamical
analysis, or termed behavior-based malware detection. It uses
sandbox technology to add an extra layer of detection. Rather
than relying on byte sequences match, it monitors behaviour
exhibited from a PDF ﬁle when opening it in a controlled
environment and a detection decision will be made if certain
behaviour is observed. This greatly improves the detection rate
for attacks even with highly obfuscated content like JavaScript.
It is worth noting that sandbox based technology only works
well if an observed ﬁle performs actual malicious operations
as if running in a real environment. As mentioned above,
malware authors already found many ways to bypass signature
based detection with techniques like obfuscation, encryption,
etc. Similarly, they constantly innovate ways to evade sandbox
tools with so called anti-sandbox techniques. For example, if
the presence of a sandbox environment is detected, it only
exhibits benign behavior or switches to a sleep mode. There
also exist other limitations. Some sandbox tools only deal
with speciﬁc types of PDF attacks like MDScan for JavaScript
[4], Nozzel for heap spraying [5], or it only records dynamic
behavior of a system and still requires manual analysis to form
a detection decision as in the case of CWSandbox [6].

D. ML Based Detection

A machine learning algorithm is an algorithm that is able
to learn from data [7]. A more precise deﬁnition from Tom
Mitchell says “computer program is said to learn from experi-
ence E with respect to some class of tasks T and performance
measure P, if its performance at tasks in T, as measured by
P, improves with experience E” [8]. There is a very wide
variety of experiences E, tasks T, and performance measures
P depending on applications. In the case of PDF attacks
detection, the task T herein is to classify PDF documents as

malicious or benign. The experience E is a collection of pre-
classiﬁed PDF documents given to the algorithm to learn. The
measured performance P will hopefully improve when learning
from updated experience E (new PDF documents).

In the past few years, ML, deep learning (DL) and artiﬁcial
intelligence (AI) have been a hot subject of research and
application across industries due to modern hardware with
increased computational power, available big datasets, and
improved algorithms, etc. This has led to many breakthroughs
from image classiﬁcation, speech recognition to autonomous
driving. Similar trend is observed in cyber security and major
security vendors such as Sophos have already introduced ML
based detection together with traditional approaches to build
a multi-layered arsenal of protection in modern cyber security
[9].

Recent work has also witnessed several ML applications in
PDF based malware detection. Given the fact that vast majority
of PDF based exploits are JavaScript related, many of the
ML algorithms are designed to detect malicious JavaScript
code in PDF ﬁles. An example of these is Wepawet which
comprises the approach from CWSandbox and a classiﬁcation
system [10]. The tool is mainly used to detect malicious URLs
and JavaScript based PDF attacks. Laskov and Srndic [11]
proposed an approach called PJScan which uses static analysis
and support vector machines (SVM) to classify JavaScript
inside PDF documents with modest detection rates achieved.
There exist a few learning-based approaches for general
PDF malware detection instead of JavaScript focused, with
pros and cons. In Munson and Cross’s report [12], a decision
tree based ensemble learning algorithm is presented to classify
PDF ﬁles. An instrumented PDF reading application is used to
extract features as input to the learning model. The data corpus
used for their study is quite small and malware detection
rate achieved is relatively low. In Maiorca et al.’s work
[13], they developed a tool termed PDFMS based on static
analysis of PDF data structure. It comprises a data retrieval
module, a feature extractor module and the classiﬁer itself. It
ﬁrst identiﬁes important features (keywords) using a K-means
clustering technique, then Bayesian, SVM, J48 and Random
Forests based algorithms are studied with Random Forest
method performing the best. An alternative solution based
on static analysis of PDF metadata and structural featuresis
is PDFrate proposed by [14]. In their study, Random Forest
classiﬁer yields the best detection rates as compared to other
methods evaluated. In 2013, Srndic and Laskov published
their new research results on PDF malware detection using
decision tree and SVM algorithms [15] in which an off-the-
shelf PDF parser Poppler [16] is used to extract features. As
compared to their previous work which focuses on detection
of JavaScript content embedded in PDF ﬁles [11], the newly
proposed approaches do not suffer from this limitation but
have difﬁculty to handle sudden changes of attacks. More
recent study on this topic can be seen in [17] using an SVM
based model, but the associated low number of features and
small dataset can affect their model generalization.

In this paper, we propose a novel approach based on an

2

MLP neural network model, termed MLPdf , for the detection
of PDF based malware. More speciﬁcally, the MLP model uses
a backpropagation (BP) algorithm with stochastic gradient
decent (SGD) search for model update. The model is trained
and evaluated with structural properties, metadata and content
information extracted from two datasets which contain around
105000 real-world malicious and benign PDF documents.
Our evaluation has demonstrated excellent behaviour of our
approach, which greatly outperforms selected well known
commercial anti-virus (AV) scanners, achieving a much higher
true positive rate (TPR) while maintaining a very low false
positive rate (FPR). The remainder of this paper is organized
as follows: In the following section, the proposed MLPdf
method is introduced, including description on the MLP model
and feature engineering. Then, Section III contains evaluation
results illustrating the performance of the MLPdf method.
Finally, Section IV contains our conclusions and future work
suggestions.

u1
1

u1
2

u1
3

...
u1
J

u2
1

u2
2

u2
3

...
u2
K

x1

x2

x3

xN

...

ˆy ∈ (0, 1)

Fig. 1. Overview of MLP Architecture

start with layer 1 (the ﬁrst hidden layer). The functionality of
a neuron unit can be depicted below.

II. PROPOSED MLPdf APPROACH

ˆyi−1
j−1wji−1,ki

A. MLP Model

An MLP is a class of feedforward ANN with an input layer,
an output layer, and one or more hidden layers between them.
Each node in one layer fully connects to every node in the
following layer. Except for nodes in the input layer, each
node is a neuron (or processing element) with a nonlinear
activation function associated with a scalar weight which is
adjusted during training. An MLP is a supervised learning
algorithm that learns to identify data patterns for classiﬁcation
or regression. In order to carry out the learning process, one
needs to extract a digital representation x of a given object
or event that needs to be fed into the MLP. The learning task
becomes to ﬁnd a multidimensional function Φ(·) between
input x and target y

y ∼= Φ(x)

(1)

where x ∈ RN , a real-valued input feature vector x =
[x1, · · · , xN ]T in an N dimensional feature space, with (·)T
denoting the transpose operation. Similarly, y ∈ RM , a real-
valued target classiﬁcation vector y = [y1, · · · , yM ]T in an
M dimensional classiﬁcation space. In other words, an MLP
learning process is to ﬁnd Φ(·) which maps the data from
feature space to classiﬁcation output space. For a binary
classiﬁcation problem like PDF attacks detection, M = 1 and
y is a scalar (a vector with length 1).

Fig. 1 illustrates the overview of an MLP network for a
binary classiﬁcation problem, where x and ˆy denote input
feature vector and trained binary output, respectively, with two
hidden layers. The number of layers used in the ﬁgure is for
illustration purpose only, there could be more or less hidden
layers depending on applications. Without loss of generality,
we denote ˆyi
k, the neuron unit k in layer
i where i = 1, · · · , L and k = 1, · · · , K. Note i starts with 1
as conventionally the input layer is layer 0, and neuron units

k as the output of ui

ui
k

f i(·)

ˆyi
k

ˆyi−1
j wji−1,ki

ˆyi−1
j+1wji−1,ki

Fig. 2. Functionality of a neuron in an MLP

As Fig. 2 shows, each neuron unit u is a perceptron which
realizes a transformation of the signal via application of its
activation function f (.) to its argument. Different activation
functions can be used in different layers or even for different
neurons in a layer. Rectiﬁed linear unit (ReLU), Sigmoid
and Softmax are common choices for nonlinear activation
functions [8]. The transformation resulting in the activation
output as input for neurons of next layer can be formed as

k = f i(
ˆyi

(cid:88)

j=1

ˆyi−1
j wji−1,ki + bi
k)

(2)

where f i(·) is a nonlinear activation function, wji−1,ki
the
adjustable weight applied to the signal between unit j in layer
i − 1 and unit k in layer i, and bi
k a bias term. At input layer,
ˆy0
j = xj.
The goal of the MLP learning process is to ﬁnd a set of
optimal weights {wj,k} over a training dataset in order to bring
the outputs as close as possible to the target values. The BP
based MLP employs SGD search through the space of possible
weight values to minimize the error signal between trained
outputs and target values, as depicted in Fig. 3, where e(ˆy, y)
is the cost function for error measurement and the SGD based
weight update rule becomes

∆wji−1,ki = −η

∂e(ˆy, y)
∂wji−1,ki

(3)

3

y

x

MLP

ˆy

e(ˆy, y)

{wj,k}

BP with SGD

e

Fig. 3. BP based MLP weights update via SGD search

∂e(ˆy,y)
∂wji−1 ,ki

where η is the learning rate (step size), and
is the
partial derivative of e(ˆy, y) with respect to wji−1,ki. The cost
function e(ˆy, y) can be deﬁned in different ways as long as it is
differentiable so SGD can be applied. For binary probabilistic
classiﬁcation as the case of PDF malware detection, the cross-
entropy of the network is a proven effective cost function for
an MLP with a Sigmoid output, as deﬁned below [8]

e(ˆy, y) = −y log ˆy − (1 − y) log(1 − ˆy)

(4)

The MLP learning process starts with initial random weights
assigned to {wj,k} and jointly apply slight modiﬁcation
{∆wji−1,ki} to the weights based on the computed gradient
(as in (3)) of loss e(ˆy, y) after processing one data sample or
a batch of samples at a time, over the whole training dataset.
A complete training cycle is termed as an epoch and many
epochs are needed in order to accomplish an ANN training
task. The learning process stops when it reaches the end of
predeﬁned epochs or e(ˆy, y) is below a certain threshold. The
full derivation of weight update rule in (3) is not discussed
here, interested readers can refer to [7, 8] for more details.

B. Feature Engineering

For classiﬁcation learning problems such as PDF malware
detection discussed herein, it requires the training datasets
to be labeled as malware or benign ﬁrst. Furthermore, as
discussed in Section II-A, data features rather than the raw
data are used as input signal for the MLP model. One should
not expect an MLP model to be able to learn from completely
arbitrary data. The process of feature extraction is called
feature engineering, an important part of data preprocessing
for ML. It normally requires domain knowledge to identify
related features from raw data. There is no exception when
dealing with the detection of PDF attacks. Good features
can simplify the relationship between input data and target
values of the problem that an ML algorithm is being used
to solve. One could argue that modern DL algorithms like
convolutional neural network (CNN) are able to automatically
extract features and learn from raw data without special
knowledge of the problem. Such methods do have improved
the capability of learning models to ﬁnd hidden features, but
it is unrealistic to believe that they can discover any structure
in any type of data. Furthermore, it is not guranteed that

4

CNN-like methods can perform better than manual feature
engineering based approaches such as MLP [18].

It is essential to have good quality features as input, as
incorrect choices of features can lead to an ML classiﬁer to
perform less well or completely fail. In this demonstration, a
group of selected 48 high quality features are extracted from
both training and testing datasets shown in Table I. In-house
tools and off-the-shelf PDF parsers are used for the feature ex-
traction. These features range from PDF structure information,
object characteristics, metadata information to content statisti-
cal properties. Apart from features like JavaScript with/without
obfuscation, number of objects, page count, stream ﬁltering,
other important structural and content information can deliver
strong indication for the presence of malicious content in a
PDF ﬁle. For example, a feature can be deﬁned for possible
embedded ﬁles in a PDF ﬁle and another feature for entropy
of some content. All such features bear a strong discriminative
power to differentiate malicious documents from benign ones.
For commercial reasons, the full list of features and how they
are extracted are not discussed in this paper.

As part of data preprocessing, all extracted features need to
be in the form of numerical values which an ML network can
only digest. Further data processing is also required before
feeding the features into an ML model, which is discussed in
the following section.

TABLE I
DATASETS AND FEATURE INFORMATION

Training: 90000

Testing: 15047

Features: 48

Benign Malicious

Benign Malicious

Structure, object properties

78684

11316

13101

1946

metadata, content stats, etc.

III. EVALUATION RESULTS

In this demonstration, the training and testing tasks are
carried out with datasets of around 105, 000 real-world benign
and malicious PDF documents, as shown in Table I. The
majority of the malicious PDF ﬁles are from Sophos malicious
PDF document collections over a few months time period up to
March 2018, while the collection of benign ﬁles has a longer
timespan. In general, the benign to malware ratio in a real-
world situation is much higher than 1, therefore we adopt a
reasonable high ratio of around 6 for our training and testing
datasets to reﬂect the real situation.

A. Data Preprocessing

In addition to the feature extraction discussed in Section
II-B, there involves further data preprocessing before feeding
the numerical features into a network. The common process
includes Normalization and Regularization, as discussed be-
low.

• Normalization - The purpose of applying normalization
to features is to avoid large gradient updates which might
prevent the learning algorithm to converge. Typically the

feature vectors will be normalized independently so that
each feature vector will be scaled to have a standard
normal (or Gaussian) distribution with µ = 0 and σ = 1
where µ and σ are the mean and standard deviation of
a normalized feature vector, respectively. This will make
it easier for an ML algorithm to learn. In our work, all
the feature vectors have been normalized this way before
feeding them into the model;

• Regularization - One of the most challenging problems
an ML algorithm faces is how to tackle overﬁtting. In
other words, a trained algorithm must perform well on
new data, not just those trained data. There exist various
ways to mitigate this issue [7, 8], of which Dropout and
Batch normalization are widely used. In our evaluation,
a dropout rate of 0.15 is used, which means 15% of each
hidden layer outputs are zeroed out before feeding into
next layer. It’s worth noting that dropout should only be
applied during training process, not testing or production
stage. To make MLPdf model learn better during training
and generalize well on new data, a batch size of 64 is
used and batch normalization is applied. This is similar
to feature vector normalization for input layer, the goal is
to re-scale each layer’s input to have zero mean and unit
variance. In addition, a validation dataset comprising 20%
of the training dataset is used to help detect overﬁtting
and perform model selection during training process.

Fig. 4 shows how a TPR changes over a varying FPR. As it
implies, when an FPR is close to 0.01% (or 1e−4), the related
TPR is below 70%. A slightly higher FPR can result in a
signiﬁcantly improved TPR. For example, a TPR of 95% can
be achieved with an FPR near 0.1% (or 1e−3). The correlation

Fig. 5. Testing results: false rate over varying probability threshold.

of TPR and FPR is related to the model output which is a
prediction probability for a PDF ﬁle being benign or malicious.
A modiﬁed prediction probability threshold can lead to a
different FPR and a changed false negative rate (FNR), as
depicted in Fig. 5.

Fig. 4. Testing results: true positive rate vs false positive rate.

B. Testing Results

The testing results presented in this section are based on an
optimal trained model which has two hidden layers (similar
to the one shown in Fig. 1). Each hidden layer in the model
has 72 neurons. The input layer has 48 nodes corresponding
to the number of features used, and the output layer has
a single Sigmoid (binary) probability output with values in
the range of (0, 1). The model is trained with 5000 epochs.

Fig. 6. Testing results between MLPdf and major AV scanners.

As the ﬁgure shows, when a low true positive prediction
threshold is selected, a high FPR and a low FNR are ex-
pected. On the other hand, as the threshold increases, the FPR
decreases with an increasing FNR. An aggressive model can

5

10−210−1100101102False positive rate (%)65707580859095100True positive rate (%)True positive rate vs False positive rate0.00.20.40.60.81.0True positive prediction probabilit  threshold10−210−1100101102False rate (%)False rate vs Prediction thresholdFPRFNRAV1AV2AV3AV4MLPdfAV5AV6AV7AV8AV scanners020406080100True positive rate (%)2.1665.6281.5052.2195.1284.5360.7480.9939.47AV test comparisondemonstrate remarkable detection accuracy (a low FNR), but
at the cost of a much higher FPR. It is important to have
a good balance with high detection rates and minimal false
positives.

The probability of 0.62 is used as the true positive prediction
threshold for the MLPdf model, which results in a very low
FPR of 0.08% and an excellent 95.12% TPR (or 4.88% FNR)
based on 13101 benign and 1946 malicious PDF documents
from the testing dataset listed in Table I. The MLPdf true
positive prediction result along with the results from eight
major commercial AV scanners are shown in Fig. 6 where
AV-1 to AV-8 denote the corresponding AV scanners. It
clearly shows that the MLPdf approach (red bar) signiﬁcantly
outperforms all commercial scanners with a big margin. The
best commercial scanner only has a TPR of 84.53% while the
MLPdf achieves over 95% TPR.

As mentioned above, the MLPdf approach maintains a low
FPR of 0.08% for the 13101 benign testing ﬁles based on the
true positive prediction probability of 0.62. The evaluated eight
commercial scanners perform well with zero or very low FPR
as well. Part of the reason could be that the majority of our
benign ﬁles are collected from Sophos benign PDF documents
datasets which have a relatively longer timespan, and most of
the ﬁles might be already known to other commercial scanners
as well.

IV. CONCLUSION

In this paper, we have proposed a novel approach based on
a multilayer perceptron neural network model, termed MLPdf ,
for the detection of PDF based malware. More speciﬁcally, the
MLP model uses a backpropagation algorithm with stochastic
gradient decent search for the model update. The MLPdf
model has an input layer of 48 nodes, two hidden layers with
72 neurons in each layer and a single Sigmoid output layer. A
group of selected 48 high quality features are extracted from
two real-world datasets which comprise around 105000 benign
and malicious PDF documents. Testing results indicate that
the proposed MLPdf approach exhibits excellent performance
which signiﬁcantly outperforms all evaluated eight well known
commercial anti-virus scanners with a very high TPR of
95.12% achieved while maintaining a very low FPR of 0.08%.
It is worth noting that the commercial scanners perform well
on the benign testing ﬁles as well with zero or very low FPR.
As part of the future work, it will be interesting to compare
how MLPdf and other commercial scanners perform with a
larger data corpus, particularly adding more recent benign PDF
documents to the dataset.

REFERENCES

[1] Adobe, “PDF Reference and Adobe Extensions to The
PDF speciﬁcation,” https://www.adobe.com/devnet/pdf/
pdf reference.html/, accessed: 2018-03.

[2] J. Zhang and J. Rabaiotti, “The PDF Exploit: Same
Crime, Different Face,” https://www.symantec.com/
connect/blogs/pdf-exploit-same-crime-different-face/,
accessed: 2018-03.

6

[3] J. Zhang, “Make “Invisible” Visible - Case Studies
in PDF Malware,” in Proceedings of Hacktivity 2015,
Budapest, Hungary, 2015.

[4] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and E. P.
Markatos, “Combining Static and Dynamic Analysis for
the Detection of Malicious Documents,” in Proceedings
of the fourth Workshop on European Workshop on System
Security, Salzburg, Austria, 2011.

[5] P. Ratanaworabhan, B. Livshits, and B. Zorn, “NOZ-
ZLE: A Defense Against Heapspraying Code Injection
Attacks,” in SSYM’09 Proceedings of the 18th conference
on USENIX security symposium, Berkeley, CA USA,
2009.

[6] C. Willems, T. Holz, and F. Freiling, “Toward Automated
Dynamic Malware Analysis Using CWSandbox,” IEEE
Security & Privacy, vol. 5(2), 2007.

[7] I. Goodfellow, Y. Bengio, and A. Courville, Deep Learn-

ing. The MIT Press, 2016.

[8] T. Mitchell, Machine Learning. McGraw Hill, 1997.
[9] Sophos,

“Sophos Unmatched

endpoint
Intercept-X,” https://www.sophos.com/en-

protection:
us/products/intercept-x.aspx, accessed: 2018-03.

next-gen

[10] Wepawet, http://wepawet.iseclab.org/, accessed: 2018-03.
[11] P. Laskov and N. Srndic, “Static Detection of Malicious
JavaScript-Bearing PDF Documents,” in Proceedings of
the 27th Annual Computer Security Applications Confer-
ence, Orlando, Florida USA, 2011.

[12] J. S. Cross and M. A. Munson, “Deep pdf parsing to
extract features for detecting embedded malware,” Sandia
National Laboratories, Albuquerque, New Mexico 87185
and Livermore, CA 94550, Tech. Rep. SAND2011-7982,
Sep. 2011.

[13] D. Maiorca, G. Giacinto, and I. Corona, “Machine Learn-
ing and Data Mining in Pattern Recognition,” in volume
7376 of Lecture Notes in Computer Science, Springer
Berlin / Heidelberg, 2012.

[14] C. Smutz and A. Stavrou, “Malicious PDF Detection
using Metadata and StructuralFeatures,” in Proceedings
of the 28th Annual Computer Security Applications Con-
ference, Orlando, Florida USA, 2012.

[15] N. Srndic and P. Laskov, “Detection of Malicious PDF
Files Based on Hierarchical Document Structure,” in
Proceedings of the 20th Annual Network & Distributed
System Security Symposium, San Diego, CA USA, 2013.
[16] Poppler, https://poppler.freedesktop.org/, accessed: 2018-

03.

[17] B. Cuan, A. Damien, C. Delaplace, and M. Valois, “Mal-
ware Detection in PDF Files Using Machine Learning,”
REDOCS, Tech. Rep. Rapport LAAS No. 18030, Feb.
2018.

[18] F. Shaheen, B. Verma, and M. Asafuddoula, “Impact of
Automatic Feature Extraction in Deep Learning Archi-
tecture,” in Proceedings of the International Conference
on Digital Image Computing Techniques and Applica-
tions, 2016, Queensland, Australia, 2016.

