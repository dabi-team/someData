MAAC: Novel Alert Correlation Method To Detect
Multi-step Attack

Xiaoyu Wang∗†, Xiaorui Gong∗†(cid:0), Lei Yu∗†, Jian Liu∗†
∗School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China
†Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China
Email: {wangxiaoyu, gongxiaorui, yulei, liujian6}@iie.ac.cn

1
2
0
2

t
c
O
5
2

]

R
C
.
s
c
[

2
v
3
9
7
7
0
.
1
1
0
2
:
v
i
X
r
a

Abstract—With the continuous improvement of attack meth-
ods, there are more and more distributed, complex, targeted
attacks in which the attackers use combined attack methods to
achieve the purpose. Advanced cyber attacks include multiple
stages to achieve the ultimate goal. Traditional intrusion detection
systems such as endpoint security management tools, ﬁrewalls,
and other monitoring tools generate a large number of alerts
during the attack. These alerts include attack clues, as well as
many false positives unrelated to attacks. Security analysts need
to analyze a large number of alerts and ﬁnd useful clues from
them and reconstruct attack scenarios. However, most traditional
security monitoring tools cannot correlate alerts from different
sources, so many multi-step attacks are still completely unnoticed,
requiring manual analysis by security analysts like ﬁnding a
needle in a haystack. We propose MAAC, a multi-step attack alert
correlation system, which reduces repeated alerts and combines
multi-step attack paths based on alert semantics and attack
stages. The evaluation results of the real-world datasets show
that MAAC can effectively reduce the alerts by 90% and ﬁnd
attack paths from a large number of alerts.

Index Terms—Multi-step attack, intrusion detection, alert cor-

relation

I. INTRODUCTION

With the continuous development of cyberspace, attacks
have become more complex. Generally speaking, ”attack”
refers to a single-step attack, also known as an atomic at-
tack, that is, an inseparable atomic malicious behavior, e.g.,
SQL injection, Cross-Site Scripting (XSS). However, with the
complexity of the network structure and the enhancement of
defense capabilities of the defender, attack targets (such as
database servers and programmable logic controllers, etc.) are
usually located in the internal network and are protected by
multiple security products. In this case, the attacker often
cannot achieve the attack purpose through a single simple
step. Combining multiple attack steps is needed to achieve the
attacker’s purpose. This kind of attack is called a multi-step
attack, also called a multi-stage attack or Multistage attack.
The characteristic of a multi-step attack is that the attack
process includes at least two atomic attacks, and there is a
logical relationship between the two atomic attacks. Compared

This work was supported by the National Natural Science Foundation
of China (Grant No. 61802394 and 61902396) and the Youth Innovation
Promotion Association. This work is also supported by the Program of Key
Laboratory of Network Assessment Technology, the Chinese Academy of
Sciences and Program of Beijing Key Laboratory of Network Security and
Protection Technology.

with traditional single-step attacks, multi-step attacks are more
complicated, have a longer period, and are more concealed.
Discovering the behavior of attackers through various infor-
mation and understanding the security situation of the entire
network is the focus of multi-step attack detection.

To ensure the security of the network, a great deal of
security protection equipment and software are deployed in the
network, for example, border ﬁrewall equipment, intrusion de-
tection system (IDS), and anti-virus software. According to the
survey [1], among 750 network security and IT professionals,
78% rely on more than 50 security products to solve security
problems, and 37% use more than 100 security tools. Most
of these security products use traditional feature matching or
statistical analysis methods to detect known attacks, which will
generate a large number of false positives. The report [2] points
out that more than 37% of companies generate more than
10,000 alerts each month, 52% of alerts are false positive, and
36% are redundant across multiple threat detection platforms.
During the multi-step attack process, the IDSs which are
used to protect the entire network endpoints generate a large
number of alerts because of the long time attack process
and multiple attack steps. Besides, an attack action may be
performed frequently or trigger different sensors [3], which
also increases the number of alerts. These alerts are scattered,
indicating that a certain step of the attack has been detected.
However, alerts cannot describe the overall attack scenario.
It takes security analysts a lot of time and effort to ﬁnd
effective alerts from a huge number of alerts, and then dig
out the logical relationship between alerts, and reconstruct
attack scenarios from these alerts. Therefore, it is necessary to
automatically integrate and correlate alerts, discover the attack
process, and reconstruct the attack scenario.

However, the existing alert correlation algorithm [3]–[6]
correlates alerts based on characteristics, which ignores the
intrinsic relationship of alerts and cannot perform semantic
correlation. GAC [3] clusters the alerts and classiﬁes alerts into
one of four types. Then the clusters are connected according to
the communication between the hosts to compose a complete
multi-step attack. However, GAC can only identify pre-deﬁned
attack scenarios, there are still many attack types such as
vulnerability exploits that cannot be identiﬁed. GAC ignores
the alert information which is already given by IDS, and
only uses IP, port, and protocol as the indicators. Ning et

 
 
 
 
 
 
al. propose an alert correlation algorithm [7], [8] which uses
pre-deﬁned alert correlation rules, but this method can only
identify known attacks. Traditional Security Information and
Event Management (SIEM) correlates alerts based on existing
rules. The rules are manually formulated and can only detect
existing attacks.

Problem Statement. The main problem solved in this
paper is to understand the semantics of alerts, aggregate
and correlate alerts through semantics, and get the order of
suspicious hosts and attack alerts paths. There are three main
aspects to this problem, and they are as follows:

Alert semantics. The algorithm or program should under-
stand the undermeaning of the alert, and obtain the attack stage
of the host through alert semantics analysis. Understanding the
alert semantics can help alert aggregation and correlation.

Attack correlation. The challenge is to automatically cor-
relate alerts through logical semantics instead of correlation
through feature matching or manual rules.

Attack path discovery. The goal is to build an attack alert
graph and provide possible attack scenarios. The attack sce-
nario graph or path helps security analysts accurately discover
multi-step attacks. Besides, to better explain the consequences
of the attack, it is necessary to rank the suspicious hosts.

Our Approach. In this paper, we use the information ﬁeld
of the alert to correlate the alerts and discover the multi-step
attack. We ﬁrst vectorize the information ﬁeld of the alert
and aggregate similar alerts into one super alert to reduce
the duplication of alerts. Meanwhile, the alert information is
used to label the attack stage to which the alert belongs. Then
the alerts belonging to different attack stages are connected
to form a complete attack process. Our method has been
evaluated on both the alert classiﬁcation test and three real-
world datasets. The results show that our method can reduce
a large number of repeated alerts by more than 90%, compose
alerts into an alert correlation graph, and effectively extract
the most suspicious attack path from the graph. In summary,
our contributions are as follows:

• We introduce a novel alert correlation algorithm that

could understand alert semantics.

• We propose MAAC1, a prototype system for alert ag-
gregation, alert correlation, and alert graph generation.
MAAC uses semantics to classify alerts, ﬁnd attack paths,
and rank suspicious hosts.

• We conduct the evaluation of MAAC in similarity com-
parison results and the attack scenario path discovery
results. Compared to a state-of-the-art alert correlation
algorithm, MAAC can aggregate alerts better, and MAAC
does not need correlation rules in advance.

The remainder of this paper is structured as follows: Section
II summarizes related work. Section III introduces the threat
model, alert reduction, and alert correlation method. In section
IV, we verify the semantic understanding ability and alerts
correlation result on three datasets. Section V concludes our
work.

1MAAC for Multi-step Attack detection by Alert Correlation.

II. RELATED WORK

A. Alert Correlation

Alert-based multi-step attack detection can be divided into
interconnection-based,

ﬁve parts: attribute similarity-based,
statistics-based, Structure-based, and provenance-based.

Attribute similarity-based. Similarity clustering [3]–[6] is
to cluster similar alerts through attribute similarity detection.
This method is based on the principle that alerts shares with
similar attributes usually belong to the same attack. Similarly,
Haas et al. [9] clusters alert and convert them into motif
signatures which are the abstract description of the attack.

Interconnection-based. The inner connection is the logical
connection relationship of alerts. In approaches [7], [8], alerts
are correlated based on pre-deﬁned attack prerequisites and
consequences. This method correlates the alerts that respec-
tively satisfy the prerequisites and consequences conditions,
and can ﬁnd the logical connection between the alerts. MLAPT
[10] is a machine learning-based system that implements eight
detection modules to discover different APT steps and then
correlates the alerts of the detection modules followed by the
prediction module.

Statistics-based. These approaches discover the logical
relationship between alerts through statistics and inference.
Qin et al. [11] uses the Granger Causality Test, a time series
statistical causality analysis, to alerts correlation. Statistics-
based alert correlation does not require prior knowledge about
the attack information. [12] applies Bayesian network for alert
correlation, which outputs the alert correlation possibility.

Structure-based. The attackers perform attack actions ac-
cording to the target network structure and the value of the
assets in the network, so the attacker’s actions can be planned
or predicted by abstracting the network structure. Approaches
[13]–[16] map alert to attack graph or attack tree nodes to
correlate alert events. Structure-based methods require prior
knowledge of network topology and asset information.

Provenance-based. Data provenance graph is a directed
graph called the provenance graph, which describes data ﬂow
between system subjects (e.g., processes) and objects (e.g.,
ﬁles and sockets). NoDoze [17] combines alert correlation with
data provenance to solve the problem of alert fatigue. NoDoze
generates alert dependency graphs providing security analysts
with contextual background information. Data provenance
records the system runtime status and reveals the relationships
between entities. Security analysts can analyze the source and
impact of attacks through the provenance graph. However, the
provenance-based approaches have the dependence explosion
problem.

B. Natural Language Processing

Natural Language Processing (NLP)

technology under-
stands and analyzes natural
language. NLP can be used
in speech recognition, question-answering systems, machine
translation, etc. With the maturity of this technology, its ap-
plication in the ﬁeld of cybersecurity has gradually increased.
Binary code similarity comparison uses NLP technology to

represent binary code as a vector for similarity comparison.
The word2vec model [18] can map each word to a vector
to represent the relationship between words. Zuo et al. [19]
regard instructions as words and basic blocks as sentences, and
use word2vec to embedding the instruction. The advantage of
this method is that it can solve the cross-architecture code
containment problems. This research shows that using the
methods, ideas, and techniques in NLP to perform the binary
analysis is promising.

III. ALERT CORRELATION
In this section, we present the approach of our novel alert
reduction and correlation algorithm. First, we propose a threat
model as an example of a multi-step attack, then give the
overview of the algorithm, and ﬁnally introduce each module
in detail.

A. Threat Model

The attacker ﬁrst attacks two hosts in the ofﬁce network
and exploits the vulnerability such as cve-2017-11882 [20]
through phishing emails or other methods – but only one
succeeds – then installs a backdoor and moves laterally in the
intranet. This controlled host scans the intranet and discovers
vulnerabilities such as MS17-010 (Eternalblue) [21] to exploit
the other hosts in the intranet, and only one succeeded to
obtain the root privilege of the host. This host is connected
to the core server. After that, this host attacks the core server
to obtain secret information. The attack process is shown in
Figure 1. To express intuitively, network devices are omitted,
such as routers, switches, and ﬁrewalls.

B. Overview

In this section, we propose MAAC, a novel method to
reduce and correlate the alerts reported by IDS and EDR.
It analyzes the semantic representation of alerts, generates a
concise alert graph, and traverses to get attack paths. Figure
2 describes the key phases of MAAC. Note that our approach
focuses on alert processing, and how the alert is generated is
beyond the scope of our research.

First, MAAC preprocesses the alerts and formats the alerts
generated by different sensors into a uniﬁed pattern. And then
it combinates the duplicate alert to reduce the number of alerts.
It measures the similarity between alerts and classiﬁes their
attack stage according to the alert semantics. Then MAAC
generates an alert correlation graph based on the attack stage.
Finally, MAAC sorts the nodes in the graph and traverses
them to obtain suspicious attack paths and hosts. The input of
MAAC is the alerts from multiple sources, while the output
of MAAC is the attack paths and hosts ranking.

C. Alert Reduction

The novel alert reduction method uses the alert description
ﬁeld, which is the most useful attribute in an alert. The
description ﬁeld includes the reason for triggering this alert.
For example, the description ﬁeld of the Eternalblue attack
alert is Possible ETERNALBLUE MS17-010 Echo Response.
This sentence indicates that the alert belongs to the echo
feature detection of the Eternalblue attack. There are a large
number of sensors and detection tools in the network which
generate plenty of alerts. Thus many of these alerts are
duplicates. For example, multiple sensors will detect the same
exploit and generate alerts with different expressions but
similar semantics. Table I lists the alert ﬁeld generated by the
general sensor. Timestamp, msg, dst, sensor attributes are in
both network and host sensor. Table II is the alerts in the
threat model. The alert msg (also called the feature code)
provides a valuable description of the alert, which is the clue
that distinguishes the alert from each other. MAAC reduces
alerts based on the similarity of alert descriptions. Alerts with
a similar msg ﬁeld are more likely to belong to the same attack
stage. For example, the vulnerability detection tool smbtouch
is detected by two NIDS: Snort and Suricata, which are the
alert 4 and 9 in Table II, respectively. The msg of two alerts
is different but the undermeaning of these two is the same.

Fig. 1. Threat Model

During the attack phase, the boundary and internal network
intrusion detection system (NIDS) respectively generate plenty
of alerts. Besides, there are a large number of alerts about
malicious ﬁles and backdoors activities generated by the
endpoint security software installed on the hosts. The alerts are
messy and there are duplicates. The dispersion and duplication
of alerts obstruct security analysts unable to ﬁnd out real
information related to the attack, increasing the difﬁculty of
attack detection. Therefore, it is necessary to integrate repeated
alerts, remove irrelevant alerts, and generate attack alert paths.

TABLE I
ALERT FIELDS.

description
Trigger time
Alert detail description
Source ip
Destination ip
Protocol
Datagram length
Source port
Destination port
Related sensor

ﬁeldname
timestamp
msg
src
dst
proto
dgmlen
srcport
dstport
sensor

alert source
N & H
N & H
N
N & H
N
N
N
N
N & H

In the alert source column, N=Network sensor, H=Host sensor.

Normal PCDNormal PCFNormal PCENormal PCGNormal PCBNormal PCC.........AttackerFailSuccessSuccessCore serverSuccessFailOffice networkFailFailFailFig. 2. System Design of MAAC

TABLE II
ALERTS IN THREAT MODEL

id
1-2
3
4-8
9-13
14
15
16
17
18

timestamp msg
time1
time2
time3
time3
time4
time5
time6
time7
time8

e-mail attachment maldoc CVE-2017-11882
malware doc ﬁle execute
NSA smbtouch scan SMB vulnerable host
fuzzbunch toolset smbtouch test SMB vulnerability
ETERNALBLUE MS17-010 Echo Request (set)
ETERNALBLUE MS17-010 Echo Response
Possible DOUBLEPULSAR Beacon Response
Apache Struts OGNL Expression Injection (CVE-2017-5638) M2
TELNET Bad Login

src
Attacker
N/A
D
D
D
D
D
E
C

dst
BD
D
BCEFG
BCEFG
E
E
E
Core server
Core server

sensor
zeek
Anti-virus software
Snort
Suricata
Snort
Snort
Snort
Suricata
Snort

Due to layout reasons, only meaningful alerts are listed.

The Paragraph Vector (Doc2vec) [22] method is an un-
supervised algorithm that can learn from the variable-length
text (such as sentences, paragraphs, and documents) to ob-
tain ﬁxed-length feature representations. Doc2vec uses para-
graph semantic analysis and considers the order of words,
while word2vec only analyzes the meaning of words. We
use Doc2vec to get the semantic representation of the alert
description. In the training phase, each alert information that
all IDS can generate is used as a paragraph in the Doc2vec
model. MAAC calculates the cosine distance of the generated
vector, and those that exceed the threshold are regarded as
different representations of the same security event.

Alerts of a host can be combined into the same super alert
if the following two conditions can be met: 1) consecutive but
different alerts of the host in a speciﬁed time interval, 2) the
information ﬁelds of these alerts are similar. When combining
the repeated alerts into one super alert, we record the number
of repeated alerts as a recommended weight. Alerts generated
based on network trafﬁc have the direction from the source
host to the target host, so the alert reduction is divided into two
steps: reduction in the same direction and reduction between
different directions.

The ﬁrst layer is the reduction in the same direction. If a
host is attacked by the same attacker within a speciﬁed time
interval and generates consecutive but different alerts, and the
information ﬁelds of these alerts are similar, then these alerts
can be combined into the same super alert. The second layer
is the reduction between different directions. Two directions
of alerts can be detected in two-way network trafﬁc: attacker

exploits to victim or victim replies to the attacker. MAAC
aggregates two-way alerts by analyzing the similarity of alert
semantics and determines the ﬁnal direction of the super alert
based on the number of similar alerts.

The alert reduction procedure corresponds to Algorithm 1.
The function CHRONOLOGICORDER() sorts alert set by its
timestamp attribute. The msg ﬁeld of each alert is then vec-
torized by the DOC2VEC() function. The reduction algorithm
ﬁrst aggregates the alerts of the same hosts and direction
generated by GETSAMEDIRECTION(). The CALCULATES-
IMILARITY() function calculates the similarity of alert pairs.
Function MERGE() calculates vector distance and aggregates
the continuous and similar alerts, and records the number of
duplicates. In the second layer of aggregation, function GET-
SAMEHOST() collects alerts between two hosts. Then function
CALCULATESIMILARITY() calculates the alerts similarity in
the same way as the ﬁrst layer. Finally, MERGEDIRECTION()
determines the direction of the super alerts and combined
alerts.

D. Alert Graph Generation

After integrating repeated alerts, MAAC correlates the alerts
and generates an alert graph. The alert graph generation has
two stages, ﬁrst is the correlation of the alerts generated on
the same host, and then is the correlation of the alerts between
the hosts.

Alerts of the same host. For the alerts from the same source
host, MAAC connects these alerts in chronological order. For
example, the attacker will ﬁrst use SQL injection and then
XSS attacks to test whether the target host has vulnerabilities.

Original Alertslerts ReduceAlerts Correlation GraphAlerts PathAlerts Path RankAlert ParserAlert InformationVectorizationAlert CorrelationGraph TraversalPath RankingStandardized AlertsAlgorithm 1 Alert Reduction Algorithm
Require: Alert Set Generated by Monitor Setallalert; Trained

Doc2Vec Model Doc2V ec;

Ensure: Reduced Alert Set Setreduced;

sim = CALCULATESIMILARITY(V ecAlertpairs);
Setf irstreduced += MERGE(Alertpairs , sim);

1: Setordered = CHRONOLOGICORDER(Setallalert);
2: V ecalert = DOC2VEC(Setordered);
3: Setsamedirection = GETSAMEDIRECTION(Setordered);
4: for Alertpairs in Setsamedirection do
5:
6:
7: end for
8: Settwowayalert = GETSAMEHOST(Setf irstreduced);
9: for Alertpairs in Settwowayalert do
10:
11:
12: end for

sim = CALCULATESIMILARITY(V ecAlertpairs);
Setreduced += MERGEDIRECTION(Alertpairs,sim);

These attacks should be recorded in the attack scenario and
appear in the ﬁnal attack path. Attacks from the same source
host belong to the same attacker and can present the entire
attack stage.

Alert across hosts. After correlating the alerts of the
same host, MAAC performs cross-host correlation according
to the stage of the alert. According to the attack steps,
MAAC divides alerts into four attack stages: scan, exploit,
get-access-privilege, and post-attack. The scan is the ﬁrst step
in an attack. The goal is to probe and collect information in
various ways to prepare for subsequent attacks. In addition
to detection in the traditional method, it also includes col-
lecting information through social engineering. Exploit is the
speciﬁc attack process, including attack through vulnerabilities
or running malicious documents on the victim host through
users. When the attack is successful, the attacker needs to
obtain the permission of the victim host to control it and
perform subsequent attacks. Therefore, one of the indicators
for judging whether the attack is successful is whether there
is permission acquisition. This stage is get-access-privilege.
After successfully attacking a host, the attacker will carry out
follow-up actions such as information theft, which is a post-
attack. The actions of the attacker at each stage are shown in
the following table III.

TABLE III
ALERT STAGES

No.
1

Alert Stage
Scan

2

3
4

Exploit

Get-Access-Privilege
Post-Attack

Alert type
IP address scan, port scan, version scan,
Vulnerability scan, social engineering
Malicious ﬁle in network trafﬁc and host,
command injection, vulnerability attack
SSH login, RDP login, shell connect
Data transfer, command&control, backdoor
communication

Assuming that there is an alert A1 of type ”Get-Access-
Privilege” on the host H1, MAAC records the time when the
alert is triggered, which is recorded as the compromised time.
For the alert sequence from host H1 to host H2, connect alert

A1 with the ﬁrst alert after the compromised time. The ultimate
goal of an attack is to gain control of the host, so there is a
process of penetration attempts and root connection with the
attacker (if successful). If a host is successfully attacked, all
subsequent activities from this host against other hosts can be
considered attack activities. If host H1 has multiple alerts to
host H2 after compromised time, only the alert with the closest
time will be connected. For example, as described in the
previous threat model, an attacker will obtain the root authority
of the host D after trying various attack methods, and then use
this host to attack other hosts. In this case, the ﬁrst victim host
D will generate a ”Get-Access-Privilege” type alert. After the
alert is issued, subsequent alerts generated from D to B are
part of the entire attack process of attacking B after attacking
D. The algorithm of graph generation is shown in Algorithm 2.
The function CLASSIFYSTAGE() assigns stage for each alerts
through alert semantics. The same host alert connection is in
INNERHOSTCONNECTION(). GETSTAGE3ALERT() gets the
alerts belonging to the third stage, that is, Get-Access-Privilege
type.

Algorithm 2 Alert Graph Generation Algorithm
Require: Reduced Alert Set Setreduced
Ensure: Alert Graph Graphalert

1: Setclassif ied = CLASSIFYSTAGE(Setreduced);
2: Sethost = Setclassif ied with Same Destination Host;
3: OrderSethost = CHRONOLOGICORDER(Sethost);
4: for OrderSethosti in OrderSethost do
5:
6:
7:
8:

INNERHOSTCONNECTION(OrderSethosti);
Alertistage3 = GETSTAGE3ALERT(OrderSethosti)
for Alertj in OrderSethostj do

if Alertjtime >Alertistage3time and Alertjsip ==

hosti then

ADDEDGE(Alertistage3 , Alertj);
Break;

9:
10:
11:
12:
13: end for

end if

end for

E. Alert Path Score Calculation

After generating the alert graph, MAAC ﬁnds all paths with
three or more nodes by traversing the graph. The path with
too few nodes(less or equal to two) is just a one-step attack,
which does not need to be correlated and exceeds the scope of
our research. There may be multiple paths in the alert graph,
we propose a series of equations calculating the probability of
each path to get the most likely attack path.

Host Suspiciousness. Determining the accuracy of the path
requires the reliability of the alert. The reliability of the alert
is related to the type of alert, suspicious state of the source
host, and destination host. Therefore, the suspiciousness of
the host needs to be calculated ﬁrst. The PageRank algorithm
[23] uses the number and quality of hyperlinks between web
pages as the main factors to analyze the importance of web
pages. MAAC regards each host as a web page and uses

alert as the directed edge of the link between the hosts. The
basic assumption of PageRank is: the important pages are
often quoted more by other pages, that is, there will be more
hyperlinks to this important page from other pages. For the
host, the host under more attacks has more alerts connected
to it, that is, the suspiciousness score is higher.

The suspiciousness of the host is also related to the type
of alert. MAAC uses the number of alert types on the host as
one of the indicators to evaluate the suspiciousness of the host.
When there are multiple types of alerts on a host, the host is
more likely to be attacked or even successfully attacked.

The host suspiciousness is calculated in (1). P ageRank(h)
is the PageRank result of the host, and |AlertT ypeh| is the
number of alert types on the host.

Suspicioush = P ageRank(h) + |AlertT ypeh|

(1)

Alert Reliability. After evaluating the suspiciousness of
the host, we can evaluate the reliability of the alert. In (2),
Suspiciousshost and Suspiciousdhost represent the suspi-
ciousness of the source host and destination host of the alert,
respectively. It is notable that when the alert is generated by
host-based security tools such as EDR and HIDS, there is
no source host. AlertT ype is the original score of the alert.
According to the severity of different types, alerts have original
values. The initial value of Scan is 1, Exploit is 2, Get-Access-
Privilege is 3, and 4 for Post-Attack. The suspiciousness of the
alert path is the sum of all alert values in the path, as shown
in (3).

Reliabilitya = Suspiciousshost+Suspiciousdhost+AlertT ype

Scorepath =

n
(cid:88)

Reliabilityai

i=1
IV. EVALUATION

(2)

(3)

We evaluate our alert correlation algorithm MAAC on real-
world datasets. Alerts are needed to test this method, but there
is currently no dataset composed entirely of alerts according to
[24]. Therefore, we ﬁrst use IDS to generate alerts based on the
trafﬁc packet and logs in the dataset. For attacks that cannot
be detected by ordinary IDS, for example, we use artiﬁcial
alerts to assist with testing. We use python 3 to achieve alert
reduction, alert correlation graph generation, graph traversal,
and path evaluation.

A. NLP Evaluation

The logistic regression model is used to classify the vectors
and obtains the accuracy of 90.56% and the F1 value of
90.47%. The receiver operating characteristic (ROC) curve
of the vector semantics and classiﬁcation method is shown
in Figure 3. The average Area Under Curve (AUC) value
of MAAC using the Doc2vec model and logistic regression
algorithm is above 0.9. The classiﬁcation result shows that
MAAC can accurately vectorize and classify alerts.

Fig. 3. ROC curve of MAAC’s Doc2vec model. The solid lines represent the
ROC curves of different categories, and the dotted lines represent the average
multi-category ROC curves.

B. Real-World Evaluation

We test MAAC on the DARPA 2000 LLDOS1.0 dataset
[25], UNB ISCX IDS 2012 dataset [26], and NDSec dataset
[27].

Metrics. For alert reduction, we use the compression rate
(Equation (4)) to evaluate the effect of the algorithm. To mea-
sure the detection ability and correctness of the path, we use
two measurement indicators similar to [7]: path detect rate
and f alse path rate. P ath detect rate is the the ratio of
detected attack paths to all attack paths. F alse path rate
is the rate of reporting wrong paths as attack path. The
calculation equations are shown in (5), (6).

Rc =

alerts reduced count
alerts total count

path detect rate =

reported attack path
all attack path

f alse path rate = 1 −

correctly reported path
all report path

(4)

(5)

(6)

MAAC uses Doc2vec to vectorize the alert information
ﬁeld, then integrates similar alerts, and classiﬁes alerts to
obtain the category of alerts. We use attack detection rules that
can generate alerts as the evaluation set, including snort and
suricate rule sets, as well as rules collected from Github. After
the classiﬁcation to four attack stages by the classtype ﬁeld
and manual conﬁrmation, we divide the set into the training
set and test set.

DARPA 2000 LLDOS1.0 dataset. In this dataset,
the
attacker ﬁrst sends ICMP echo-requests to scan the surviving
then attempts the Sadmind Remote-to-Root exploit
hosts,
several
times against each host, each time with different
parameters. There are 6 exploit attempts on each potential
victim host and ﬁnally successfully breaks into and controls
three hosts (172.16.115.20, 172.16.112.50, 172.16.112.10) in
the network using the Sadmind service vulnerability of the

0.00.20.40.60.81.0False Positive Rate0.00.20.40.60.81.0True Positive Ratemicro-average ROC curve (area = 0.98)macro-average ROC curve (area = 0.94)ROC curve of class Exploit (area = 0.98)ROC curve of class Get-Access-Privilege (area = 0.96)ROC curve of class Post-Attack (area = 0.90)ROC curve of class Scan (area = 0.93)host. Then attacker uploads and installs the Mstream DDoS
program to the controlled host, and launches an attack on the
target server.

UNB ISCX IDS 2012 dataset. There are 7 days of network
trafﬁc in the dataset, including 4 multi-step attack scenarios.
Since all attacks in this dataset can be alerted, we select the
network trafﬁc on the third day. This trafﬁc includes attack
trafﬁc and normal activity trafﬁc. The attacker ﬁrst sends a
malicious email to all the users in the network with the Me-
terpreter reverse shell attachment, then 192.168.1.105 (user5)
is compromised and communicates with the attacker and scans
subnet 192.168.1.0/24 and 192.168.2.0/24 according to the
attacker’s command. User5 successfully attacks 192.168.2.112
(user12) and connects it back to the attacker’s machine. User12
then scans the subnet 192.168.5.0/24, and ﬁnally attacks the
target server 192.168.5.123 through SQL injection.

NDSec dataset. We use the NDSec dataset to show that
MAAC still has the ability to mine attack fragments from in-
complete alerts. This dataset contains three types of multi-step
attacks: Bring-Your-Own-Device, Watering-hole, and Botnet.
We use the Botnet scenario to evaluate MAAC. Based on
CVE-2015-2509, CVE-2015-5122 and XSS vulnerability, the
attacker uses Citadel botnet malware to infect three hosts.
These three bot hosts communicate with the C&C through
HTTP, and the master instructs the bots to execute the attack
payload. Bots use SYN to launch DDoS attacks on external
destination IP. Two of the bots stole local conﬁguration ﬁles
and transfer them to an external FTP server.

C. Results in a Nutshell

We use snort version 2.9 to generate alerts, with snapshot-
2900 ruleset and Emerging-Threats ruleset [28] for network
trafﬁc detection and correlate the discovered alerts. It should
be noted that MAAC is used to correlate alerts instead of
generating alerts, so how to generate attack alerts is beyond
the scope of this paper. We use the same ruleset for the three
dataset test evaluations. The compression ratios of the three
datasets are shown in the table IV. The alert compression
algorithm of MAAC can reach more than 90%, which can
improve the efﬁciency of security experts.

TABLE IV
REDUCTION ALGORITHM RESULT OF MAAC IN DATASETS

Dataset

Packetsize

DARPA LLDOS 1.0
ISCX-IDS-2012
NDSec

122MB
4.2GB
118MB

#Original
Alert
1942
22792
2259

#Reduced
Alert
164
853
55

Rc

91.56%
96.26%
97.57%

D. Case Studies

There are a total of 1942 alerts generated from the DARPA
2000 LLDOS1.0 dataset. After alert reduction, there are 164
alerts, which means that MAAC reduces the number of alerts
by 91.56%. For attack discovery capabilities, MAAC could
discover all attack paths. A total of 24 paths are generated,
of which were 10 paths with 3 or more nodes. Among the

paths, the top 4 paths with higher scores can describe the
entire attack process, as shown in Figure 4. MAAC ﬁltering
IP scanning without follow-up attacks and merges 6 Sadmind
attacks on victim hosts. MAAC could detect all attack paths,
the path detect rate is 100%. If select the ﬁrst 4 paths to
report as attack paths, the f alse path rate is 0, if select ﬁrst
5 paths, the f alse path rate is 20%.

Fig. 4. Multi-step attack paths in DARPA 2000 LLDOS1.0 dataset recovered
by MAAC. The attacker (202.77.162.213) ﬁrst executes IPsweep to detect
the surviving host, then uses the Sadmind vulnerability to attack live host,
gain root privileges, install Mstream DDoS software, and ﬁnally issue control
commands to the master host (172.16.115.20), which controls the other two
hosts (172.16.112.50, 172.16.112.10).

Ning et al. [7] use pre-deﬁned rules to correlate alerts which
is regarded as a state-of-art alert correlation approach. We
compare MAAC with baseline approach using the DARPA
LLDOS1.0 dataset. MAAC automatically clusters, categorizes,
and correlates alerts based on the alert semantics. Approach
[7] focuses on the veriﬁcation of real alerts, while MAAC
focuses on the reduction of alerts and the ability to ﬁnd attack
paths. Comparison of these two methods is in Table V. The
data indicate that MAAC does not require prior knowledge
and can ﬁnd out the attack path well.

After processing the UNB ISCX IDS 2012 dataset, MAAC
reduces 22792 alerts to 853 alerts. 43 paths have three or more
nodes, 9 of which have more than four nodes. Since user5 and
user12 both connect back to the attacker, there are two attack
paths, as shown in the Figure 5.

In the alerts generated by the NDSec dataset, the XSS attack
and ﬁnal FTP data transfer are not identiﬁed, but the com-
munication between three hosts and the C&C is successfully
detected by snort. Under the condition of incomplete alerts,
MAAC extracted 20 paths, 12 of which belonged to attack-
related paths. The paths include the attacker’s exploit methods,
the communication between the bot and the C&C, and the
bot’s DDoS attack. Besides, the path is identiﬁed in which

ICMP pingRPC portmap sadmindrequest UDPRsh rootExecutable and linking format (ELF) file downloadDDOS mstream handler to agentDDOS mstream handler to agentICMP pingRPC portmap sadmindrequest UDPRsh rootExecutable and linking format (ELF) file downloadICMP pingRPC portmap sadmindrequest UDPRsh rootExecutable and linking format (ELF) file download172.16.115.20172.16.112.50172.16.112.10To 172.16.112.50To 172.16.112.10TABLE V
ABILITY TO GENERATE ALERT PATHS

Dataset

LLDOS 1.0 DMZ

Method
Ning et al.
MAAC

#alert
57
14

#path
-
3

#path detect rate
56.18%
100%

#false alert(path) rate
5.26%
0%

Need Prior Knowledge
yes
no

#alert means the alert count in alert graph or path.
#false path rate is 0% if select top 4 paths as attack paths, 20% if select top 5 paths.

[8] ——, “Analyzing intensive intrusion alerts via correlation,” in Interna-
tional Workshop on Recent Advances in Intrusion Detection, 2002, pp.
74–94.

[9] S. Haas, F. Wilkens, and M. Fischer, “Efﬁcient attack correlation and
identiﬁcation of attack scenarios based on network-motifs,” in 2019
IEEE 38th International Performance Computing and Communications
Conference (IPCCC), 2019, pp. 1–11.

[10] I. Ghaﬁr, M. Hammoudeh, V. Prenosil, L. Han, R. Hegarty, K. Rabie, and
F. J. Aparicio-Navarro, “Detection of advanced persistent threat using
machine-learning correlation analysis,” Future Generation Computer
Systems, vol. 89, pp. 349 – 359, 2018.

[11] X. Qin and W. Lee, “Statistical causality analysis of infosec alert data,”
in International Workshop on Recent Advances in Intrusion Detection,
2003, pp. 73–93.

[12] ——, “Discovering novel attack strategies from infosec alerts,” in
European Symposium on Research in Computer Security, 2004, pp. 439–
456.

[13] S. H. Chien and C. S. Ho, “A novel threat prediction framework for
network security,” Springer Berlin Heidelberg, vol. 136 LNEE, no. 43,
pp. 1–9, 2012.

[14] S. Noel, E. Robertson, and S. Jajodia, “Correlating intrusion events and
building attack scenarios through attack graph distances,” in 20th Annual
Computer Security Applications Conference, 2004, pp. 350–359.
[15] L. Wang, A. Liu, and S. Jajodia, “Using attack graphs for correlating,
hypothesizing, and predicting intrusion alerts,” Computer Communica-
tions, vol. 29, no. 15, pp. 2917–2933, 2006.

[16] S. Zhang, J. Li, X. Chen, and L. Fan, “Building network attack graph
for alert causal correlation,” computers & security, vol. 27, no. 5-6, pp.
188–196, 2008.

[17] W. U. Hassan, S. Guo, D. Li, Z. Chen, K. Jee, Z. Li, and A. Bates,
“Nodoze: Combatting threat alert fatigue with automated provenance
triage.” in Network and Distributed Systems Security Symposium, 2019.
[18] T. Mikolov, K. Chen, G. Corrado, and J. Dean, “Efﬁcient estimation of
word representations in vector space,” Computer Science, 2013.
[19] F. Zuo, X. Li, P. Young, L. Luo, Q. Zeng, and Z. Zhang, “Neural machine
translation inspired binary code similarity comparison beyond function
pairs,” in Network and Distributed Systems Security Symposium, 2019.
[20] “CVE-2017-11882 Detail.” [Online]. Available: https://nvd.nist.gov/

vuln/detail/CVE-2017-11882

[21] “MS17-010.”

[Online]. Available: https://docs.microsoft.com/en-us/

security-updates/securitybulletins/2017/ms17-010

[22] Q. Le and T. Mikolov, “Distributed representations of sentences and
documents,” in International Conference on International Conference
on Machine Learning, E. P. Xing and T. Jebara, Eds., vol. 32, no. 2,
2014, pp. 1188–1196.

[23] L. Page, S. Brin, R. Motwani, and T. Winograd, “The pagerank citation
ranking: Bringing order to the web.” Stanford InfoLab, Tech. Rep., 1999.
[24] M. Ring, S. Wunderlich, D. Scheuring, D. Landes, and A. Hotho, “A
survey of network-based intrusion detection data sets,” Computers &
Security, vol. 86, pp. 147–167, 2019.

[25] “2000 DARPA INTRUSION DETECTION SCENARIO SPECIFIC
DATASETS.” [Online]. Available: https://www.ll.mit.edu/r-d/datasets/
2000-darpa-intrusion-detection-scenario-speciﬁc-datasets

[26] A. Shiravi, H. Shiravi, M. Tavallaee, and A. A. Ghorbani, “Toward
developing a systematic approach to generate benchmark datasets for
intrusion detection,” computers & security, vol. 31, no. 3, pp. 357–374,
2012.

[27] F. Beer and U. Buhler, “Feature selection for ﬂow-based intrusion detec-
tion using rough set theory,” in International Conference on Networking,
Sensing and Control, 2017.

[28] “EmergingThreats snort rule set.” [Online]. Available: https://rules.

emergingthreats.net/open/snort-2.9.0/

Fig. 5. Multi-step attack paths in UNB ISCX IDS 2012 dataset recovered
by MAAC. The ﬁrst alert in the two paths is the shell from the attacker
to 192.168.1.105 and 192.168.2.112, respectively. The remaining alerts are
attacks between the internal network hosts.

Zeus malware checked the network connection through Google
after successfully exploiting.

V. CONCLUSION

In this paper, we propose MAAC, a semantics-based method
for alert reduction and correlation to solve the problem of the
alert explosion. MAAC understands the semantics of alerts and
performs alert reduction and correlation. Our method gives
possible attack paths and their ranking, as well as the ranking
of suspicious hosts. MAAC does not require prior knowledge
and can reduce both irrelevant and similar alerts. Through this
method, security analysts can reduce their workload and focus
on analyzing attack scenarios. We tested the effectiveness
of this method in real-world datasets. The results show that
MAAC can reduce duplicated alerts by 90%, and provide
critical paths for security analysis.

REFERENCES

[1] “Oracle

and

KPMG

[Online].
oracle-cloud-threat-report-2020

Available:

Cloud

2020.”
https://www.oracle.com/a/ocom/docs/cloud/

Report

Threat

[2] “The Numbers Game: How Many Alerts

too Many
are
https://www.ﬁreeye.com/offers/

to Handle?”
rpt-idc-the-numbers-game.html

[Online]. Available:

[3] S. Haas and M. Fischer, “Gac: graph-based alert correlation for the
detection of distributed multi-step attacks,” in Annual ACM Symposium
on Applied Computing, 2018, pp. 979–988.

[4] K. Julisch, “Mining alarm clusters to improve alarm handling efﬁciency,”
in Annual Computer Security Applications Conference, 2001, pp. 12–21.
[5] ——, “Clustering intrusion detection alarms to support root cause
analysis,” ACM Transactions on Information & System Security, vol. 6,
no. 4, pp. 443–471, 2003.

[6] B. Zhu and A. A. Ghorbani, “Alert correlation for extracting attack
strategies,” International Journal of Network Security, vol. 3, no. 3, pp.
244–258, 2006.

[7] P. Ning, Y. Cui, and D. S. Reeves, “Constructing attack scenarios through
correlation of intrusion alerts,” in ACM Conference on Computer and
Communications Security, 2002, pp. 245–254.

Metasploit Payload(from server)ICMP PING to192.168.1.0/24 and 192.168.2.0/24Scan to mySQL port 3306SMB vulnerability attack three timesMetasploit Payload(from server)ICMP PING to192.168.5.0/24Scan to mySQL port 3306SQLi xp_cmdshell POSTattacker-->user5-->user12attacker-->user12-->target user