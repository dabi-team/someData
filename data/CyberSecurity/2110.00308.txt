1
2
0
2

p
e
S
5
2

]
h
p
-
t
n
a
u
q
[

1
v
8
0
3
0
0
.
0
1
1
2
:
v
i
X
r
a

Experimental realization of BB84 protocol with diﬀerent phase gates and SARG04
protocol

Sinchan Ghosh,1, ∗ Harsh Mishra,2, † Bikash K. Behera,3, ‡ and Prasanta K. Panigrahi4, §
1Department of Physics, Ramakrishna Mission Vidyamandira (Aﬃliated
to Calcutta University), Belur, Howrah, 711202, West Bengal, India
2Department of Physical Sciences, Indian Institute of Science Education and Research, Berhampur, India
3Bikash’s Quantum (OPC) Pvt. Ltd., Balindi, Mohanpur, 741246, Nadia, West Bengal, India
4Department of Physical Sciences,
Indian Institute of Science Education and Research Kolkata, Mohanpur 741246, West Bengal, India

Cryptography in the modern era is very important to prevent a cyber attack, as the world tends to
be more and more digitalized. Classical cryptographic protocols mainly depend on the mathematical
complicacy of encoding functions and the shared key, like RSA protocol in which security depends
upon the fact that factoring a big number is a hard problem to the current computers. This means
that high computing power can help you crack traditional encryption methods. Quantum machines
claim to have this kind of power in many instances. Factorization of big numbers may be possible
with Shor’s algorithm with quantum machines in considerable time. Apart from this, the main
problem is key sharing i.e., how to securely share the key the ﬁrst time to validate the encryption.
Here comes quantum key distribution. Two parties who are interested in communication with each
other, create a process, which claims considerable security against an eavesdropper, by encoding
and decoding information in quantum states to construct and share a secret key. Quantum key
distribution may be done in a variety of ways. This paper begins with experimental veriﬁcation of
the BB84 procedure utilizing four bases (using phase gates) followed by the experimental realization
of the SARG04 protocol which was derived from BB84 Protocol to overcome PNS attack. The
possibility of a third-party attack and the eﬀect of noise is considered and implemented. The IBM
Quantum Experience platform was used for all of the implementations.

PACS numbers:

I.

INTRODUCTION

Quantum cryptography claims considerable attention
by promising top-notch security by allowing back-end op-
erations that exploit the weirdness of quantum physics1.
Over time, this ﬁeld has been developed positively with
specialization in the security of communication. The
idea of cryptography using quantum physics was initi-
ated about 27 years ago. The ﬁrst quantum key distri-
bution protocol was invented to develop a secure con-
struction of a secret key despite the presence of a third-
party hacking adversary i.e. Eve, withholding maxi-
mum access to technology. This is naturally done to
make sure that the developed protocol’s security is not
compromised2. This became a new emergence in quan-
tum information theory, and progress has continued to
accelerate since then. This ﬁrst protocol was known as
the BB84 protocol3,4 introduced by Bennett and Bras-
sard in the year 1984. Furthermore, several protocols
have been developed, over the years, to make sure the
key distribution allows security from eavesdropping at
the maximum possible level. Quantum Key Distribu-
tion started developing over time, both in terms of eﬃ-
ciency and experimentation9–14. SARG04 protocol was
built to make BB84 more secure by decreasing PNS at-
tacks. Experimenting with these protocols on IBM Quan-
tum Experience (IBM QX) using local simulators and
actual quantum processors is crucial because it helps to
understand the importance of gate operations on qubits

in quantum computation. Also, the simulation of a cir-
cuit from the real quantum device (up to a certain limit)
gives an idea of real-time performance and errors and
helps to apply appropriate implementation techniques.
A part of reference14 implements BB84 protocol using
8 qubits on the IBM QX platform with and without the
presence of Eavesdropper, using two bases and also a part
of the reference18 implements BB84 protocol on the IBM
QX platform using 8 qubits with and without the pres-
ence of Eavesdropper using three bases. To emphasize
the relevance of phase gates in quantum computation, we
have investigated implementing the BB84 protocol utiliz-
ing four bases (using Phase gates) as well as the SARG04
protocol on the IBM QX platform.

II. BB84 PROTOCOL WITH FOUR BASES

BB84 protocol was designed such that every bit of ran-
domly chosen string would be encoded into the two po-
larization states of a single photon (which can be repre-
sented by qubits). As photon is a quantum particle, with-
out destroying the photon, its polarization state cannot
be measured, which implies that the encoded informa-
tion in the photon is frangible5. Considering this fact,
we assume that this is the reason why an eavesdropping
attack does not allow the information to be available to
the eavesdropper. The BB84 protocol can be brieﬂy un-
derstood by considering the following points6. Implemen-
tation of BB84 protocol on IBM QX using four bases has

 
 
 
 
 
 
been performed in the ﬁrst part of this paper.

• Alice produces a bit-string, randomly choosing a set of

2n (say) data bits

• She then encodes her data bit using four states (two

basis X and Z) |0(cid:105),|1(cid:105),|+(cid:105) and |−(cid:105) and sends it to Bob.

• Bob receives the qubits and announces that fact. He

then measures the received qubits on the X or Z basis
at random.

• Then both announce publicly the basis on which they
have measured. After that, they ﬁnd n (say) bits are
encoded and decoded using the same basis. Those are
left for the preparation of the secret key.

• An eavesdropper, Eve can attack while transmitting.

She measures the qubits in the X or Z basis at random,
then encodes that qubit again on the same basis. If
Eve’s decoding base matches with Alice’s encoding
base, then Eve gets the right information.

• Now they need to check whether or not eavesdropping

took place. So, n/2 bits serve as a check on the
intervention and are shared with Bob through a
classical channel by Alice.

• Now Bob compares his measurement of those n/2
qubits with Alice’s preparation. If the comparison
result does not show an acceptable number of consistent
bits despite having chosen the same basis, then the
protocol fails. The existence of an eavesdropper or noise
in the quantum channel is certain. Now they leave that
channel and try for another channel.

• Now, if that comparison result shows an acceptable

number of consistent bits, then they can continue and
proceed for communication using the remaining n/2 bits
as the secret key.

We aim to increase the eﬃciency of the protocol by de-
creasing the amount of bit information revealed to the
eavesdropper. If any accepted key bit is measured by Eve
with the same basis then the attack will remain untraced.
So, using four basis states instead of two decreases the
probability of Eve measuring the qubit with the same ba-
sis as used by Alice for encoding. So, there is an enhance
in security.

A.

IMPLEMENTATION OF BB84 PROTOCOLS

ON IBM QX

This section portrays the experimental implementa-
tion of the BB84 protocol using four bases. Let’s say
the two parties, Alice and Bob want to share a secret
key through a quantum protocol. Thus, let’s say Alice
chooses 2n number of random data bits and sends it to
Bob. For the encoding procedure, she randomly uses
any one of the four basis and sends the resultant state

2

to Bob through a public quantum channel. X & Y basis
are the two of the four bases. Among the other two, one
basis is formed applying hadamard & T gate consecu-
tively and the other is formed applying hadamard & Z
gate consecutively. We have discussed the operations of
these gates later. After Bob receives the 2n qubits, he
measures each of those qubits on one of the four basis at
random. Alice and Bob henceforth crosscheck their basis
measurements. The classical post-processing part which
has to be followed is the same as done for the implemen-
tation of BB84 protocol using two bases. Let’s take a
look at the procedure of implementation.

FIG. 1: Implementation of BB84 protocol using four bases.
The left part of the ﬁrst barrier portrays the initial bit-string.
The part between the ﬁrst & second barrier and the part
between the second & third barrier portray Alice’s encoding
and Bob’s decoding respectively. The distance between the
second and third barrier can be considered as the quantum
channel. The right part of the fourth barrier contains Bob’s
measurements.

Qubit Index q[0] q[1] q[2] q[3] q[4]

1

1

0

Alice

0
Alice’s Basis Y HT Y HZ HT
Bob’s Basis Y HT X HZ HZ
A A D A D

Result

1

TABLE I: Initial value of all the qubits i.e. from q[0] to q[4]
is |0(cid:105) as default. We have used not gate to get qubit value
|1(cid:105). The qubits which are measured with the same basis as
used by Alice, are the ones that are considered to be key bit.
A stands for “Accepted” whereas D stands for “Discarded”.

Table.I shows the qubits which will be taken into con-
sideration whereas Table.II shows gates that are required
to measure along with diﬀerent bases. We use here phase
gates of diﬀerent angles. A phase gate applies a phase of
eiθ to the |1(cid:105) state of the qubit. H is the hadamard gate
while S is the phase gate for angle π/2. T is the phase
gate for angle π/4. And the Z gate is the phase gate for
angle π. The explicit matrix forms of phase gates and
hadamard gate are given below. S†, T†, Z are the com-
plex conjugate forms of S, T, and Z gates respectively.
Expected results based on the theory are shown in Ta-
ble.III.

S =

(cid:18) 1

(cid:19)

0

0 e−iπ/2

H =

(cid:19)

(cid:18) 1 1
1 −1

1
√
2

T =

(cid:18) 1

(cid:19)

0

0 eiπ/4

Z =

(cid:19)

(cid:18) 1 0
0 −1

Qubit Index
Alice’s gates for
string construction

q[0] q[1] q[2] q[3] q[4]
X

X X

-

-

Alice’s gates for HS HT HS HZ HT
string encoding
Bob’s decoding
gates

S†H T †H H ZH ZH

TABLE II: Gate utilization for the example of 5-qubit model.
Since S is a hermitian matrix, SS† = I which implies Bob
needs to use S†H gates to invert the operation of HS gates
(i.e., decoding information). This is similar for T gate.

Qubit Index

q[0]
q[1]
q[2]
q[3]
q[4]

Expected
Result
1 (100%)
0 (100%)
0 (50%) & 1 (50%)
1 (50%)
0 (50%) & 1 (50%)

TABLE III: These are the expected results based on the BB84
protocol using four bases. Parentheses include the probability
of getting that particular bit after measurement.

1. Simulation using local simulator

The implementation for this 5-qubit example is given
in Fig.1 and the results of this implementation through
local simulator are given in Fig.2. This local simulator
is a classical machine that approximates quantum calcu-
lation up to a limit. So, this implementation result is
similar to the theoretically expected result in Table.III.
The probability of q[0] through experimental results is
calculated as shown in the reference paper8. Table.IV
shows the experimental results after implementation.

3

FIG. 2: Result of implementation of BB84 protocol using four
bases acquired through IBM QX (ibmq qasm simulator) us-
ing 8192 runs. In all of the outputs, the value of q[0] is 1 which
implies that the probability of acquiring 1 is 100% which is
what we expected. Similarly, the probability of measuring
other qubits can be calculated like this and will be similar to
the result in table III.

2. Simulation using real quantum device(ibmq manila)

This section portrays the experimental implementation
of the BB84 protocol using four bases in a real quantum
device through IBM QX. The back-end device used here
is ibmq manila, a ﬁve qubit processor. As simulated from
real quantum device, the output result (in the Fig.3) is
a bit deviated from the expected result (in the Fig.2)
due to the various computational error. Result for every
qubit acquired from the real device is shown in Table.IV.

FIG. 3: Result of implementation of BB84 protocol using four
bases acquired through IBM QX (ibmq manila) using 8192
runs. In all of the outputs, the value of q[0] is not 1 which im-
plies that the probability of acquiring 1 is less than expected
100%. The deviation is due to various computational error
in real device. Similarly, the probability of measuring other
qubits are calculated like this and tabulated in Table.IV.

4

is that the exact noiseless outcomes are assumed from
the noisy result of the real device. Then those results
are used to mitigate the errors for a more general form
of state. Our BB84 circuit is processed by such an error
mitigation process21. The histogram in Fig.4 indicates
the reduction of noise while computation.

FIG. 4: Result of implementation of BB84 protocol using
four bases acquired through IBM QX (ibmq manila) using
8192 runs after processing an error mitigation. The result
before and after mitigation is plotted simultaenously. Clearly,
mitigated result is more close to accurate result III.

Qubit Index

q[0]
q[1]
q[2]
q[3]
q[4]

Experimental
Result
0 (3.9%) & 1 (96.1%)
0 (99.1%) & 1 (0.9%)
0 (48.8%) & 1 (51.2%)
0 (3.0%) & 1 (97.0%)
0 (14.4%) & 1 (85.6%)

TABLE IV: These are the experimental results for every qubit
obtained by simulating BB84 protocol using four bases in IBM
QX (ibmq manila) using 8192 runs. Parentheses include the
probability of getting that particular bit after measurement.

3. Fidelity calculation of individual qubits

The ﬁdelity of a quantum state is a measure of close-
ness. Here, we measure ﬁdelity between the state of qubit
before encoding by Alice and the state after decoding by
Bob. If the ﬁdelity value is close to 1, we can take the bit
as a key bit. We have calculated the ﬁdelity separately
for 5 qubits using the equation below16-

Fidelity = tr(

(cid:112)

ρ(E)ρ(T)ρ(E))

(1)

where theoretical density matrix ρ(T) is simply the diﬀer-
ence of the probabilities of 0 and 1 while experimentally
obtained density matrix ρ(E) is calculated as17-

ρ(E) =

1
2

(I + (cid:104)X(cid:105)X + (cid:104)Y (cid:105)Y + (cid:104)Z(cid:105)Z)

(2)

B. DIFFERENT ATTACKS ON THE QUANTUM
CIRCUIT

The ﬁdelity value of each separate qubit of BB84 pro-
tocol is tabulated in Table.V below. Qubits with ﬁdelity
value very close to 1, are taken as key bit to construct
the key of encryption.

1. Third party interpretation

Qubit Index
q[0]
q[1]
q[2]
q[3]
q[4]

Fidelity
0.9903666531616115
0.9998826058435594
0.5105520995810717
0.9988745629501058
0.21158200569024022

We now move forward with implementing the circuit
which portrays a third party interpretation i.e., an eaves-
dropper trying to attack the circuit in the quantum chan-
nel. The circuit is shown in Fig.5 whereas the results
of the implementation are in Fig.6. Table.IV shows the
probability of occurrence of each qubit for Bob when
eavesdropping takes place.

TABLE V: Fidelity values for individual qubits of BB84 pro-
tocol circuit calculated based on the result acquired from
ibmq manila on IBM QX.

4. Error mitigation in real quantum device

The eﬀect of diﬀerent types of noise, that occur
throughout the computation and make the output quite
noisy, is very complex and needs to consider each gate
transformation. However, the noise occurring in the ﬁ-
nal measurement can be reduced by the error mitigation
technique. The idea behind the error mitigation process

FIG. 5: Eve decodes in some assumed basis, measures, and
then again encodes the qubits while Alice’s encoded informa-
tion is being sent to Bob through the channel. The qubits
cannot be copied as per the No-Cloning theorem7. Let’s say
Eve attacks on q[0], q[3], q[4].

5

q[3]
1

q[4]
0

1

Attacked qubit Index q[0]

Alice’s qubit
values
P(0)
P(1)

30.4% 11.4% 16.4%
69.6% 88.6% 83.6%

TABLE VI: These are the experimental results based on the
BB84 protocol using four bases in an eavesdropping scenario.
Probability of getting 0 & 1 i.e. P(0) & P(1) are shown for
the three attacked qubits q[0], q[3] & q[4] are shown here.

lation is done for only these qubits.

Qubit Index

Fidelity without
eavesdropping

Fidelity with
eavesdropping

q[0]
q[3]
q[4]

0.9903666531616115 0.8727970305632149
0.9988745629501058 0.9890826260851061
0.21158200569024022 0.23464157714059153

TABLE VII: These are the Fidelity of the qubit states calcu-
lated based on the experimental results from ibmq manila of
the BB84 protocol using four bases in normal and an eaves-
dropping scenario.

q[0] and q[3] are accepted key bit. As the eavesdropper
tries to measure q[0] with diﬀerent decoding gates, the
quantum state gets disturbed. As a result, ﬁdelity de-
creases (as shown in Table:VII). But as the eavesdropper
measures q[3] with the same decoding gates, the attack
remains invisible to Bob. q[4] is not a part of the accepted
key bit so ﬁdelity remains low.

2. Noise attack

We now can think of some noise occurrence in main
information while data transmitting through a quantum
channel. We can implement this type of noise with the
help of some 2-qubit entangled gates like CX, CZ, and
CY gates. If the control bit is 0, then these gates will
not show any eﬀect. So, we have shown the result tak-
ing the control bit as 1. The circuit is shown in Fig.8
whereas the results of the implementation are in Fig.9.
Table.VIII shows the probability of occurrence of each
qubit for the noise attack. Evidently, probability of oc-
currence changes for those particular qubits due to at-
tack.

FIG. 6: Results for implementation of an eavesdropper’s
attack on BB84 protocol using 5 qubits on IBM QX
(ibmq manila). Eve measures q[1], q[3], q[4] out of which
she gets q[3] right. Once Bob reveals his measurements to
Alice, they would realize that eavesdropping has happened as
the outputs do not tally with Alice’s preparation. Calculating
the probability outcomes for the three attacked qubits, we get
the results as given in the table VI.

After Error Mitigation:

FIG. 7: Results for implementation of an eavesdropper’s
attack on BB84 protocol using 5 qubits on IBM QX
(ibmq manila) with error mitigation. The result of the Fig.6
is also plotted simultaneously here. The mitigated result is
more accurate.

The result of simulation for each attacked qubit is
shown in Table.VI. We compare those result with the re-
sult for the normal case in the Table.IV. For q[0], the
probability of getting the initial bit 1 decreases from
96.1% to 69.6% due to the attack. q[4] is not a part of
key bit. Attack on q[4] doesn’t aﬀect our protocol. For
q[3], though the eavesdropper decode in the same basis
as Alice uses to encode, the probability of getting the ini-
tial value 1 decreases from 97.0% to 88.6%. It is probably
due to gate operational error in the real quantum device
as more gates operate in the circuit with attack scenario.

We now calculate the ﬁdelity ( as in section II A 3)
between Alice’s prepared state and Bob’s revealed state
while eavesdropping is taking place and then compare
that ﬁdelity with the case when no eavesdropping is hap-
pening. Comparison are shown in Table.VII. Here only
q[0], q[3], q[4] are subjected to attack, so ﬁdelity calcu-

6

Qubit Index
(Attack-type)
q[1] (CX)
q[3] (CZ)
q[4] (CY)

Fidelity without
eavesdropping

Fidelity with
eavesdropping

0.9998826058435594 0.5771227257614313
0.9988745629501058 0.07043737053093656
0.21158200569024022 0.8664884620665283

TABLE IX: These are the Fidelity of the qubit states calcu-
lated based on the experimental results from ibmq manila of
the BB84 protocol using four bases in normal and an noise
attack scenario.

noise attack doesn’t aﬀect the quantum state encoded in
certain basis. Exceptions are shown in Fig.10 and ﬁdelity
results are shown in Table.X. As an explanation, for case
(b), applying S gate after H gate leaves the qubit state
through the z-axis of blotch sphere19 with a phase of π/2
to the |1(cid:105) state. Applying Y gate rotates the state at an
angle of π which leaves the qubit through the z-axis in
the bloch sphere as before. Similarly, in the case of (a)
& (b), applying X gate doesn’t change the qubit state
through the z-axis in the bloch sphere.

FIG. 8: Noise attacks are implemented.q[1],q[3],q[4] are
subjected to CX, CZ & CY noise attack respectively as
shown.The control qubit q[5] is set high to show the eﬀect.

FIG. 9: Results for implementation of noise attack on BB84
protocol using 6 qubits on IBM QX (ibmq qasm simulator).
Once Bob reveals his measurements to Alice, they would re-
alize that some attack has happened as the outputs do not
tally with what Alice had encoded. The probability outcomes
for all three attacked qubits are shown in Table.VI.

Qubit Index
Attack on Alice’s
qubits (values)
Type of Attack
P(0)
P(1)

q[1]
0

q[3]
1

q[4]
0

CY

CX

CZ
53.3% 97.7% 87.2%
46.7% 2.3% 12.8%

TABLE VIII: These are the experimental results based on
the BB84 protocol using four bases in a noise attack scenario.
Parentheses include the probability of that particular bit.

Also, we have calculated the ﬁdelity of each qubit, sub-
jected to noise attack, to show the change of qubit state
due to the attack. Fidelity of q[1], q[3] and q[4] has been
calculated (like in the section.II A 3) and tabulated in Ta-
ble.IX.

As evident from Table.IX, accepted key bits (here q[1],
q[3]) are aﬀected by the noise attack. The ﬁdelity be-
comes very low for these qubits. So, in practical im-
plementation, Bob will not get the expected result as the
quantum state is changing considerably due to these noise
attacks. Though there are few exceptions where certain

FIG. 10: Circuits for the three fault-tolerant cases encoded
in a certain basis and subjected to certain noise attacks. The
initial qubit value is taken as 0 in each case.

Qubit

Fidelity without
noise attack

Fidelity with
noise attack

q[0] in (a) 0.9903666531616115 0.9944090977516634
q[0] in (b) 0.9988745629501058 0.9937805250263796
q[0] in (c) 0.9975738546501054 0.9976180022158906

TABLE X: These are the Fidelity of the qubit states of the
circuits of Fig: 10 calculated based on the experimental re-
sults from ibmq manila. As evident, quantum state doesn’t
get changed much as ﬁdelity remains very close to 1.

III. SARG04 PROTOCOL

A.

IMPLEMENTATION OF SARG04

PROTOCOLS ON IBM QX

7

SARG04 protocol was built intending to create a more
robust version of the BB84 protocol. The same four
states of BB84 were used in the case of SARG04 but
with a diﬀerent information encoding process. In BB84
protocol, when laser pulse with lower-level attenuation
is used to encode bit in a photon. If any pulse contains
more than one photon, the eavesdropper can transmit a
single photon to the receiver after splitting oﬀ the ex-
tra photon. This is a photon number splitting attack20.
SARG04 was deﬁned by Scarani et al. in 2004 in Physi-
cal Review Letters as more eﬃcient against PNS attack
but it is equivalent to BB84 when viewed at the level
of quantum processing15. The basic working of SARG04
protocol is described below:

• Alice intends to communicate with Bob. She starts with
two strings of bit, x & y. Each string is n bits long.

• Now she creates a state by encoding the two-bit string
such that yi(the ith bit in y string) decides on which
basis xi is encoded. Value of yi 1 leads xi to be encoded
in the hadamard basis. Otherwise, xi is encoded in the
computational basis.

• Alice sends her quantum state through a quantum

channel. Bob receives the state. Eavesdropper, Eve also
can have access to the state. But bit string y is only
known to Alice, so, neither Bob nor Eve can distinguish
the state of the qubit.

• Bob creates a random bit-string y(cid:48) which is also n bits
long. He decodes and measures the qubits such that y(cid:48)
i
decides on which basis xi will be measured. For each
qubit, Alice chooses one computational basis state and
one hadamard basis state. To get the secret bits, Bob
has to distinguish between the two states. For each
qubit sent, Bob can check if the result is consistent with
either possible state. If the measurement is consistent,
then he cannot decide the exact encoding basis. But if
the measurement is inconsistent, Bob can then deduce
the exact state as well as the secret bit.

• From the remaining deduced bits, Alice shares a small
randomly chosen part publicly with Bob and checks
whether they agree to a certain number. If the check
pass, they proceed to continue otherwise they drop that
channel and start over.

In our experimental realization, the scenario is much
more simpler. As we typically run our circuit many times
(8192 runs) and produce a histogram, we don’t need that
processIII to decide the exact state. We can decide the
exact state from the probability values of |0(cid:105) & |1(cid:105) in the
produced histogram. In simpler BB84 protocol, Alice an-
nounces the chosen basis for each qubit. The advantage
of SARG04 is that Alice doesn’t announce the basis of
the bits. So, to determine the state, Eve needs to store
more copies of the qubit. We have experimentally shown
the scenario in this section with the help of IBM QX.

We have simulated a 9-qubit SARG04 circuit using a
ibmq qasm simulator. The ﬁrst 3 qubits are the infor-
mation bits, the next 3 qubits are Alice’s reference bits
and the last 3 qubits are Bob’s reference bits.

FIG. 11: Implementation of SARG04 protocol with 3 infor-
mation bits. The left part of the ﬁrst barrier portraits the
initial bit-strings. The part between ﬁrst & second barrier
and the part between second & third barrier portraits Alice’s
encoding and Bob’s decoding respectively. The distance be-
tween the second and third barrier can be considered as the
quantum channel. The right part of fourth barrier contains
Bob’s measurements.

qubit index
Alice’s reference bit
Bob’s reference bit
Result

q[0] q[1] q[2]
1
0
1
0
0
1
A A D

TABLE XI: These are the Alice and Bob’s reference bits for
If reference bit is same for a
diﬀerent information qubits.
qubit then the qubit is accepted for creating key bit, otherwise
discarded.

Qubit Index

q[0]
q[1]
q[2]

Expected
Result
1 (100%)
0 (100%)
0 (50%) & 1 (50%)

TABLE XII: These are the expected results based on the
SARG04 protocol. Parentheses include the probability of that
particular bit.

1. Simulation using Local Simulator

Now ﬁrstly we simulate the implemented circuit in
Fig.11 through a local simulator. As the simulator is not

a real device, the histogram obtained , shown in Fig.12,
actually indicates the theoretically calculated result as in
Table..

done through IBM QX (ibmq manila) and the results are
tabulated below.

8

Qubit Index
q[0]
q[1]
q[2]

Fidelity
0.9973847010664143
0.9982795399056618
0.47984599999999983

TABLE XIV: Fidelity values for individual qubits of SARG04
protocol. As expected from Table.VIII, q[0] and q[1] have
ﬁdelity close to 1 as encoding and decoding reference bit is
same for these. q[2] has low ﬁdelity so discarded.

B. DIFFERENT ATTACKS ON THE QUANTUM
CIRCUIT

1. Third party interpretation

We now implement an eavesdropper attack on the
SARG04 circuit. For that, we consider only q[1] from
the circuit of Fig.11. Eavesdropper decodes the state in
a basis depending on the reference bit, randomly cho-
sen by her. So, the eavesdropper has a probability of
0.5 of choosing the right basis for measurement but she
is never sure as Alice never shares her encoding basis.
In our case, we have shown an eavesdropper attack with
wrong decoding basis Fig.13 to show the change in the
quantum state. It is obvious from Table.XV, as ﬁdelity
decreases considerably in the case of eavesdropping.

FIG. 13: Eavesdropper tries to measure the state in hadamard
basis as her reference bit is 1. Whereas reference bit of Alice
and Bob are both 0.

Qubit Index

Fidelity without
eavesdropping

Fidelity with
eavesdropping

q[1]

0.9982795399056618 0.5998332266675055

TABLE XV: This is the comparison of ﬁdelity of the qubit
state in normal and an eavesdropping case, calculated based
on the experimental results from ibmq manila of q[1] of the
SARG04 protocol.

FIG. 12: Result of implementation of SARG04 protocol ac-
quired through IBM QX (ibmq qasm simulator) using 8192
runs. The three bits from the extreme right are information
bits that were measured. In all of the outputs, the value of
q[0] is 1 & q[1] is 0 which implies that the probability of ac-
quiring 1 & 0 is respectively 100% which is what we expected.
Similarly, the probability of measuring q[2] and acquiring 0 is
49.4% and that of 1 is 50.6%. The results are calculated like
this and tabulated in Table.XIII.

2. Simulation using Real Quantum device(ibmq manila)

We couldn’t simulate the whole 9-qubit circuit of the
Fig.11 due to our unavailability of real quantum proces-
sor of such qubit-volume. However, we simulated every
qubit separately through ibmq manila and shown the re-
sult in Table.. The eﬀect of noise in a real quantum device
is evident from the comparison of experimental results in
Table. and theoretically calculated result in Table..

Qubit Index

q[0]
q[1]
q[2]

Experimental
Result
0 (3.1%) & 1 (96.9%)
0 (99.1%) & 1 (0.9%)
0 (53.6%) & 1 (46.4%)

TABLE XIII: These are the experimental results obtained
by simulating each qubit of SARG04 protocol in IBM QX
(ibmq manila) using 8192 runs. Parentheses include the prob-
ability of that particular bit.

3. Fidelity Calculation

We now calculate the ﬁdelity(as in section.II A 3) be-
tween Alice’s prepared state and Bob’s revealed state in
the SARG04 circuit. The required circuit simulations are

9

ping case on IBM Quantum Experience’s platform
(ibmq manila and ibmq qasm simulator) was carried out.
We then compared the expected and acquired experimen-
tal values. The values were compared and the overlap was
found acceptable. The implementations help us visual-
ize the theoretical concept by employing gate operations,
thus providing an insight into the fundamentals of quan-
tum computing.

V. ACKNOWLEDGEMENTS

S.G. and H.M would like to thank IISER Kolkata for
providing hospitality during the course of this project.
B.K.B. acknowledges the support of Institute Fellowship
provided by IISER Kolkata. The authors acknowledge
the support of IBM Quantum Experience for producing
experimental results. The views expressed are those of
the authors and do not reﬂect the oﬃcial policy of IBM
or IBM Quantum Experience team.

Journal of Cryptology, 5, 3–28 (1992)

13 M. Minder et al., Experimental quantum key distribution
beyond the repeaterless secret key capacity, Nature Pho-
tonics, 13, 334–338 (2019)

14 Dhoha AL-Mubayedh et al., Quantum Cryptography on

IBM QX, IEEE Xplore, 18851058 (2013)

15 Valerio Scarani, Antonio Ac´ın, Gr´egoire Ribordy, and
Nicolas Gisin, Quantum Cryptography Protocols Robust
against Photon Number Splitting Attacks for Weak Laser
Pulse Implementations, Physical Review Letters,14995344
(2004)

16 R. Jozsa, Fidelity for Mixed Quantum States, Journal of

Modern Optics, 23152323 (1994)

17 Behera B.K., Banerjee A., Panigrahi P.K., Experimental
realization of quantum cheque using a ﬁve-qubit quan-
tum computer. Quantum Inf Process 16, 312 (2017).
https://doi.org/10.1007/s11128-017-1762-0

18 A. Warke, B.K.Behera and P.K. Panigrahi, Exper-
imental
three quantum key distribu-
tion protocols, Quantum Inf Process 19, 407 (2020).
https://doi.org/10.1007/s11128-020-02914-z

realization of

19 Single Qubit Gates.

https://qiskit.org/textbook/ch-

states/representing-qubit-states.html

20 Brassard, Gilles, L¨utkenhaus, Norbert, Mor, Tal, Sanders,
Barry C., Limitations on Practical Quantum Cryptogra-
phy, Physical Review Letters,(2000)

21 Manpreet Singh Jattana, Fengping Jin, Hans De Raedt
& Kristel Michielsen, General error mitigation for quan-
tum circuits. Quantum Inf Process 19, 414 (2020).
https://doi.org/10.1007/s11128-020-02913-0

2. Noise attack

Now we can show the eﬀect of noise in the quantum
channel with the help of some 2-qubit entangled gates
like CX, CZ, and CY gates as done before for the BB84
protocol in this paper (section.II B 2). We have already
seen the eﬀect of these noise attacks when a qubit is en-
coded and decoded in hadamard basis. The quantum
state will change considerably for CY & CZ attack but
there will be no eﬀect in the quantum state in case of CX
attack(Fig.10, Table.X). For the case of computational
basis, CX & CY attack will change the state very signif-
icantly as X & Y gates are responsible for bit-ﬂip. CZ
attack will not have any eﬀect on computational basis.

IV. CONCLUSION

Here,

implementation of BB84 protocol (with four
bases) and SARG04 protocol along with eavesdrop-

∗ Electronic address: sinchanghosh008@gmail.com
† Electronic address: harshm19@iiserbpr.ac.in
‡ Electronic address: bikash@bikashsquantum.com
§ Electronic address: pprasanta@iiserkol.ac.in
1 R. Hughes and J. Nordholt, Reﬁning Quantum Cryptog-

raphy, Science 333, 1584 (2011).

2 A. Pathak, Elements of Quantum Computation and Quan-

tum Communication, CRC Press (2018).

3 C. H. Bennett and G. Brassard, Quantum cryptography:
Public key distribution and coin tossing, IEEE Interna-
tional Conference on Computers, Systems and Signal Pro-
cessing, 175, 8 (1984).

4 C.H. Bennett, H. Charles, G. Brassard, Quantum cryptog-
raphy: Public key distribution and coin tossing, Theoreti-
cal Computer Science, 560, Part 1: 7–11, (2014).

5 D. Bouwmeester, A. Ekert, A. Zeilinger, Lecture 12: Quan-
tum key distribution, The Physics of Quantum Informa-
tion.

6 M. Nielson, I. Chuang, Quantum Computing and Quan-
tum Information, Cambridge University Press, (2000).
7 W. K. Wootters and W. H. Zurek, A Single Quantum Can-

not be Cloned, Nature 299, 802 (1982).

8 D. AL-Mubayedh, M. AL-Khalis, G. AL-Azman, M. AL-
Abdali, M. AlFosail, and N. Nagy, Quantum Cryptography
on IBM QX, International Conference on Computer Ap-
plications & Information Security, (2019).

9 H. Fan, Y. Wang, L. Jing, J. Yue, H. Shi, Y. Zhang, L. Mu,
Quantum cloning machines and the applications, Phys.
Rep. 544, 241-322 (2014)

10 B. Fr¨ohlich, M. Lucamarini, J. Dynes, L. Comandar, W.
Tam, A. Plews, A. Sharpe, Z. Yuan, and A. Shields, Long-
distance quantum key distribution secure against coherent
attacks, Optica, 4 (1), 163-167 (2017)

11 A. Ferenczi, V. Narasimhachar, and N. L¨utkenhaus, Se-
curity proof of the unbalanced phase-encoded Bennett-
Brassard 1984 protocol, Phys. Rev. A, 86 (2012)

12 C. H Bennett et al., Experimental Quantum Cryptography,

