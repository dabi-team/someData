A framework for comprehensible multi-modal
detection of cyber threats

Jan Kohout, ˇCenˇek ˇSkarda, Kyrylo Shcherbin, Martin Kopp, Jan Brabec

Cisco Systems, Prague, Czech Republic

1
2
0
2

v
o
N
0
1

]

R
C
.
s
c
[

1
v
4
6
7
5
0
.
1
1
1
2
:
v
i
X
r
a

Abstract—Detection of malicious activities in corporate en-
vironments is a very complex task and much effort has been
invested into research of its automation. However, vast majority
of existing methods operate only in a narrow scope which limits
them to capture only fragments of the evidence of malware’s
presence. Consequently, such approach is not aligned with the
way how the cyber threats are studied and described by domain
experts. In this work, we discuss these limitations and design
a detection framework which combines observed events from
different sources of data. Thanks to this, it provides full insight
into the attack life cycle and enables detection of threats that
require this coupling of observations from different telemetries
to identify the full scope of
the incident. We demonstrate
applicability of the framework on a case study of a real malware
infection observed in a corporate network.

I. INTRODUCTION

There is a saying in criminology that there is no such a
thing as a perfect crime since every misdemeanour leaves
evidence, and cybercrime is not an exception. The clues in
cyberspace are often weak, indirect, scattered around virtual
locations and spread in time. Therefore, various data sources
have to be analysed and adequately correlated to construct a
holistic picture of a misconduct.

Imagine, for example, a security breach in a company’s in-
ternal network. The incident might start by opening a phishing
e-mail by one of the employees, continues with infecting the
ﬁrst machine and then spreads in the network using lateral
movement techniques to other endpoints. The breach culmi-
nates by exﬁltration of sensitive information outside the com-
pany’s environment, deploying spyware tools on employees’
computers or disabling company’s critical infrastructure and
demanding ransom. Each of these phases manifests itself by
different means and is reﬂected in different type of telemetry
data - a different modality.

In the world of intrusion detection systems (IDS), such
modalities may be logs from web proxies, ﬁle executions logs,
ﬁrewall logs or e-mail data. However, the problem of multi-
modal analysis is not limited to IDS only. For example, proper
e-mail analysis is a multi-modal problem on its own as e-mails
may contain, apart from the main textual message, hyperlinks,
images, and the sender information.

Moreover, due to the complex nature of threats, alerts gener-
ated by detection systems need to be descriptive and expressive
enough such that security analysts can easily understand them
and recognize the expansion of the threat in the protected

environment. Again, this is possible only when information
from different modalities are put together.

Capability to detect cyber threats by creating security de-
tections spanning multiple modalities has been communicated
by multiple cybersecurity vendors (e.g., [1], [2]) but to best of
our knowledge, this is the ﬁrst publication that formalises the
problem and describes technical details of a framework for
such multi-modal analyses. The proposed framework is not
only simple and scalable but also provides comprehensible
verdicts by design. The framework is demonstrated on the
problem of threat detection, but it is general and can be used
directly or with minor changes for other problems as well.

This paper is organised as follows. In the next section, we
present a formal deﬁnition of the problem which we address.
Detailed description of the proposed framework is presented
in Section III, followed by description of our reference im-
plementation in Section IV. A case study of the framework
detection capability is discussed in Section V. Related work,
not only from the ﬁeld of cybersecurity,
is presented in
Section VI.

II. PROBLEM STATEMENT

This section introduces the formalism needed to address
the problem of security incidents detection by fusing multiple
sources of data.

The primary ﬁeld of interest for this study are larger
networking environments in which hundreds or thousands of
human users are connected using different types of devices.
These may include desktop PCs and laptops used for common
work, mobile devices such as phones or tablets used for
communication as well as devices like printers, specialized
servers (e.g., DNS, LDAP, web servers, ...), IP cameras or
even very speciﬁc machines in health care or industry.

For example, a typical user in such environment uses
a laptop and a smartphone to perform her daily routines.
Throughout the day, a person would communicate via instant
messages and e-mails, move between ofﬁce ﬂoors or even
buildings and access internal or external web resources. All
these actions generate telemetry records of one or more types.
Hence, if the person starts an e-mail client on a laptop to
receive a message with a link to an external web page and later
accesses it in a browser, the detection system might consume
the following telemetry records:

• an endpoint record that an e-mail client process was

started;

 
 
 
 
 
 
• a network record with information that the e-mail client

received data from the email server;

• a network record about the accessed external resource;
• an endpoint record about the browser process.
Detection of malicious activities in such setting involves to
identify what is happening (which type of threat was detected,
what actions were performed), where it is happening (which
user, device or part of infrastructure is affected) and when the
detected activity occurred. In order to formally describe the
detections, the following three sets are introduced - the set
Y of all possible types of detectable threats, the set E of all
entities in the environment on which the malicious activities
can be detected, and, ﬁnally, we denote T a set of all possible
timestamps which determines time quantization used in the
detection system.

Deﬁnition of an entity can differ depending on the speciﬁc
network and data available — it can be, for example, a pair
of a user and a device identiﬁers, or a device. The entity with
examples will be discussed in more detail in Section IV-C.

In general, K different types of input data sources can be
considered which are further called modalities. Using these
modalities, the input for the detection task then consists of K
datasets of type

Dk ={(tk

i , dk

i )|i ∈ N ∧ i ≤ nk}
k ∈ {1, 2, . . . , K}, nk = (cid:107)Dk(cid:107),

(1)

i and dk

where the dataset Dk originates from the k-th modality.
The variables tk
i represent the timestamp and the data
associated with the i-th object in the k-th dataset, respectively.
No restrictions are put in place on the structure of the data
at this point as the datasets come from different modalities
and thus can be completely heterogeneous. For example, if
the k-th modality contains logs from a network sensor then
the data in that dataset can be in a form of NetFlow [3] records
together with their timestamps of capture.

Let us denote Dk a set of all possible datasets originating
from the k-th modality. The goal is to design a system that
implements a function

f : D1 × D2 × . . . × DK (cid:55)→ 2T ×E×Y

(2)

In summary, the function f takes K datasets from the
available modalities as an input and outputs a list of detections,
where each detection contains information about the type of
threat, affected entity and time of detection.

In practice,

the output can also contain metadata (e.g.
transferred bytes or a registry key that was changed) associated
with the detection that might be useful for a security analyst
working with the system’s output to verify the detection and
to take remediation actions.

We see the entire system which is represented by the
function f in (2) as a composition of functions realising
individual phases of the detection process. First, detections
on individual modalities are generated using modality-speciﬁc
(unimodal) detectors and representations of affected entities.
Second, results from the unimodal detectors are matched
this
to assign their outputs to the same entities, we call
phase entity matching. Finally, detections for each entity are
produced based on this uniﬁed data by a multi-modal detector.
In the next subsections, we formally describe the individual
phases and the composition of the ﬁnal multi-modal detector.

A. Unimodal detectors

The datasets Dk are passed as an input to modality-speciﬁc
detectors δk that can be viewed as a transformation function:

δk : Dk (cid:55)→ 2T ×Ek×O,

where Dk and T are the set of all possible input datasets
and timestamps, respectively, as deﬁned in Section II, and Ek
is the set of all entities in the environment identiﬁed using
the data available in Dk. O is an event dictionary which
contains all possible detections that can be observed in the
environment, given the input modalities. For simplicity, we
deﬁne O as an universal dictionary shared across all detectors
which aggregates all possible detections.

In practice, an event is not a single element but rather a
rich structure deﬁned by its type heavily depending on the
detection. E.g., for port bursts or bruteforcing attempts the
event would contain quantitative information, for detection of
anomalous ﬁle type the event would contain the type of the
ﬁle, etc.

Given the deﬁnitions above, the detector δk transforms the

input dataset Dk to a set of triplets:

Sk = {(t, ek, o)|t ∈ T, ek ∈ Ek, o ∈ O},

which contains individual detections generated by the de-
tector δk using the modality Dk, each associated with an
affected entity and a timestamp. For better readability, we
further denote the set 2T ×Ek×O of all possible outputs Sk
from the detector δk as Sk.

In general, the unimodal detectors can be almost arbitrarily
complex and each of them can even be an aggregation of
multiple detectors working on top of the given modality.
However, the output for each modality is always in a form
of triplets described above thanks to which we can treat each
of the unimodal detectors as a single detector, no matter what
is its internal structure.

B. Entity matching

III. PROPOSED FRAMEWORK

Given the formal

introduction of the detection problem
in Section II, we now build a theoretical framework which
enables us to describe the proposed detection system.

Next, results Sk-s from the individual modalities need to be
merged with respect to the entities they refer to. Speciﬁcally,
sets of detections for individual entities e ∈ E are put together
to create a complete picture of what is happening on each
entity. Therefore, there needs to be a function γ which takes

outputs Sk ∈ Sk from individual unimodal detectors and
outputs a set of all detections for each entity e ∈ E:

γ : S1 × ... × SK (cid:55)→ 2T ×E×O,

The function γ thus performs the entity matching - i.e.,
deciding for two entities’ representations ek ∈ Ek, el ∈ El
whether they represent the same entity e ∈ E or not.

Again, speciﬁc implementation of the entity matching func-
tion may depend on the data available for entities in individual
modalities and will be further discussed in Section IV-C.

C. Multi-modal detector

Given the merged outputs from unimodal detectors, the sys-
tem now has enough evidence to identify suspicious actions on
individual entities captured in different modalities. Therefore,
the multi-modal detector can be viewed as a mapping τ from
the merged results to the ﬁnal threat detections:

τ : 2T ×E×O (cid:55)→ 2T ×E×Y

Having all phases of the detection process modelled by
mappings described above, we can see the multi-modal threat
detector f deﬁned in Equation (2) as a composition of map-
pings from individual phases:

f (D1, ..., DK) = τ (γ(δ1(D1), ..., δK(DK)))

This concept of the entire framework is illustrated in Figure 1.
The next section then describes a reference implementation
built on top of the proposed framework.

Fig. 1: Composition of the proposed framework for multi-
modal threat detections.

IV. IMPLEMENTATION

This section outlines a reference implementation of a system
as per the proposed framework described in Section III. As
shown in Figure 2,
the overall architecture consists of 5
components: the data ingestion and enrichment, the modality-
speciﬁc detectors, the entity matching service, and the ﬁnal
multi-modal detector. In the following subsections, we will
introduce each component in detail.

Fig. 2: The reference implementation architecture.

A. Data ingestion and enrichment

The ingest component serves as the gateway to the system.
It integrates with the source data providers using both push-
based and pull-based strategies. The data in various formats
are validated, ﬁltered, transformed, and enhanced with con-
textual or global intelligence information. Finally, the data is
catalogued and persisted to the data lake for further reference
by the downstream components and human analysts.

The reference system was implemented with two modalities:
network telemetry and endpoint telemetry. The network data
used are additionally of two types: web proxy logs and Net-
Flows, which include ﬁelds such as IP addresses for the client
and the contacted server, number of transferred bytes and
packets, timestamp, duration of the communication, and URL
or SNI for the HTTP and HTTPS connections, respectively.

The endpoint telemetry is provided by lightweight connec-
tors installed on the client devices (laptops/PCs, tablets and
smartphones). These logs are substantially more heterogeneous
than the network logs. Different schema with some common
ﬁelds (such as timestamp and endpoint ID) is used for logs of
ﬁle creation, execution of the binary, download of the binary
from the web, ﬁle transfer, etc.

B. Unimodal detectors

Unimodal detectors can implement various detection meth-
ods developed for individual modalities. Besides traditional
rule-based systems which generate events based on matched
hard-coded patterns, they might include anomaly detection
algorithms or supervised classiﬁers. The large variety of
anomaly detection methods applicable in the security domain
can employ simple statistical detectors such as [4], [5] or
probabilistic models [6], [7]. For more complete survey on
anomaly detection algorithms, see, for example, [8], [9].

For the pretrained variants of unimodal detectors, one can
consider random forest classiﬁers which proved to be very
effective in many security applications ([10], [11]), similarly
as artiﬁcial neural networks ([12], [13]). However, even much
simpler yet computationally effective methods are relevant
here because even weaker detections can contribute to the ﬁnal
detections produced by the multi-modal detector.

DKD1  1  K ⌧ThreatdetectionsUnimodaldetectorsInputmodalitiesEntitymatchingMulti-modaldetectorData ConsumptionentitymetadatadetectioneventsEntityMatchingUI/APIFinalDetector45Data StorageReal-Time/Batch Data ProcessingDataIngestionDataEnrichment123DetectorsDetectorsDetectorstelemetryAt the time of writing this paper, the reference system
included approximately 300 unimodal detectors falling into
four categories:

• signature-based – producing detection events by match-
ing behavioral signatures handcrafted by a domain expert;
• classiﬁer-based – generating events by supervised classi-

ﬁers trained on historical data;

• anomaly-based – leveraging statistical, volumetric, prox-
imity, targeted, and domain speciﬁc anomaly detectors;
• contextual events – capturing various network or endpoint
behaviors to provide additional context, e.g., ﬁle down-
load events, direct access on raw IP or software updates.
Each detector transforms the data source according to its
needs and emits an event if the triggering criteria are met.
The detector persists each event to the events store, where it
can be later evaluated by the multi-modal detector to produce
a ﬁnal security detection.

C. Entity matching

As mentioned earlier,

the same entity can be observed
simultaneously in multiple modalities, represented by different
identiﬁers. It is the Entity Matching (EM) component’s prime
responsibility to link the data sources together. The component
examines the metadata about entities and the telemetry feeds
to construct a uniﬁed view of the entities in the observed
environment’s local and global contexts.

The unimodal detectors process the telemetry records in-
dependently and potentially produce the events. At the same
time, the EM component using the directory, inventory, and
other metadata services would attempt to establish the rela-
tionships among the observed records. Generally, it would
associate the person to their laptop, the laptop to the email
and browser processes, their corresponding assigned network
addresses, thus linking the telemetry and the generated events
to a single entity. This entity is referred to as a cross-modal
entity.

In the reference implementation,

the EM constructs the
mapping between endpoint IDs and IP addresses. The EM
algorithm prefers precision over the completeness of IP space
coverage, meaning that IP addresses used by multiple end-
points concurrently (e.g., endpoints located in different subnets
with the same IP ranges) is discarded.

This mapping is used to associate detections from network
modalities with given IP address and timestamp to the cross-
modal entity. In this reference implementation, the endpoint-
modality entity is equal to the cross-modal entity — the unique
endpoint ID.

D. Multi-modal detector

The multi-modal detector is a component which operates on
observations from bounded time window and multiple modal-
ities that were already associated with the cross-modal entity.
The detector can be as simple as a single rule mapping speciﬁc
observation directly on a threat detection. This approach is
sufﬁcient if the observation is already signiﬁcant enough on
its own. However, some threats can be identiﬁed with high

probability only by correlation of multiple observations from
multiple modalities. In this case, the threat detector can be
deﬁned by a complex rule or set of rules. The rule itself may
be explicit or encoded by e.g. a neural network.

Generally, we are solving a classiﬁcation task on top of
chronological and parametric itemsets [14]. These itemsets can
be labelled by threats based on some threat intelligence which
is mostly represented by a set of malicious binaries or network
domains, phishing e-mails, etc. The labelling can be associated
with signature-based observations as well as extrapolated to
the cross-modal entity. In such scenario, the task leads to a
multi-label classiﬁcation task.

When proposing the model the main concerns are:
• extractability, the existence of efﬁcient algorithm,
• interpretability,

the understandability of extracted be-

haviours by domain experts,

• expressiveness, the discriminative power of the model,
• and generality, the ability of the algorithm to be retrained

on new observations without signiﬁcant changes.

These properties can not be optimised all together due to the
contradictory nature of expressiveness and interpretability of
the model.

Nowadays, interpretability is often required by threat re-
searchers and treat response teams. Even precise detection
without a proper ”story” behind might get overseen by threat
response teams due to lack of reliability and the amount of
work needed to conﬁrm or disprove the detection. Due to this,
models built on top of the statistical based rule mining are
used in our current reference implementation.

The rule mining algorithm mines rules from itemsets –
items grouped by a key. In our case, the items are detections
from unimodal detectors and the key is the cross-modal entity.
If all itemsets were processed together, only the noise from
unimodal detectors would be mined as it is hopefully the only
common behaviour across all entities.

Due to this, the data are split into subgroups based on
labels assigned to entities by threat intelligence. Therefore,
the expectation is that each group contains similar behaviours
which are rarely seen outside this group.

In the ﬁrst step of the algorithm, frequent itemsets are mined
in each group by the FP-Growth algorithm [15]. This step
returns frequent rules in each group but it doesn’t ensure that
they are not frequent also in other groups. In the next step we
ﬁlter out those which are. Finally, association rules correlated
with one group only are obtained.

Next, the multi-modal detector interpreting association rules
is deﬁned. It has to deal with the possibility of matching an
entity with rules from multiple groups. In our case, the group
with more matching rules is chosen as the label for each entity.
In case of a tie, the group corresponding to the more severe
threat is chosen.

V. CASE STUDY

Here we present preliminary detection statistics from the
reference system with emphasis on a speciﬁc example of
combined detection which illustrates the need to combine

events from different modalities to successfully identify the
malware.

The system was veriﬁed on 30 days of telemetry data from
33 real corporate networks containing 758.043 cross-modal
entities on which security analysts identiﬁed 73 different
threats.

Table I shows comparison of precision and recall between
rules mined over events from individual modalities and com-
bined modalities. We emphasise that the absolute values of
precision and recall are not of the main interest here - it is
the capability of the proposed system to detect new malware
families based on combining events from different modalities
(those malware families are highlighted in green).

malware

Ad injector
PUA Genieo
PUA Trojan.Patchbrowse
PUA Pirrit
PUA ArcadeYum
PUA Conduit
PUA Crossrider
Fake Search Engine
Downloader
Malware distribution
Worm
Dropper - OSX/Shlayer
Trojan

endpoint
pre
0.25
nan
nan
nan
nan
nan
nan
nan
nan
nan
0.50
nan
nan

rec
0.25
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.16
0.00
0.00

network
pre
0.79
0.50
1.00
0.88
0.43
0.97
1.00
0.82
1.00
0.38
nan
nan
nan

rec
0.44
0.12
0.19
0.28
0.44
0.26
0.75
0.33
0.50
0.23
0.00
0.00
0.00

combined
pre
0.79
0.30
1.00
0.88
0.43
0.97
1.00
0.82
1.00
0.37
0.50
0.14
0.83

rec
0.44
0.16
0.19
0.28
0.47
0.26
0.75
0.33
0.50
0.23
0.16
0.05
0.20

TABLE I: Per-entity detection statistics of the reference system
for different malware families with at least one entity detected
as TP or FP.

We speciﬁcally illustrate the cross-domain detection capa-
bility on the OSX/Shlayer malware, whose behavioral pattern
was discovered by the multi-modal detector (while it was not
detectable whithin a single modality - see Table I), which
learned the following combination of events for its detection
(listed together with the source modality):

1) Contacting a very long URL for the ﬁrst visit of a hostname

(network telemetry)

2) Unusual ﬁle hash for the given environment (endpoint teleme-

try)

3) Unusual ﬁle type, 7Zip ﬁles downloaded from a speciﬁc URL

in this particular case (endpoint telemetry)

4) Communication using a user agent rarely used for the given

site (network telemetry)

5) Connection check (network telemetry)
6) Reoccurring communication with a rarely visited site (network

telemetry)

7) Communication using an unusual user agent for the given user

(network telemetry)

8) Usage of device ﬁngerprinting scripts and tools (endpoint

telemetry)

9) Usage of unusual remote port (endpoint telemetry)
The OSX/Shlayer malware’s behavioral pattern is infecting
computers by a fake ﬂash plugin update, which is downloaded
as a 7zip ﬁle (this involves contacting a very long URL for the
ﬁrst time and unusual hash and ﬁle type). When this update
is installed, the real ﬂash plugin is downloaded from the real
update page using a curl command (unusual user agent for
a well-known site).

When the OSX/Shlayer is on the infected device, it checks if
that device is connected to the internet (connection check) and
starts gathering information about the infected device (usage
of ﬁngerprinting scripts and tools). After that, it establishes a
C&C channel (reoccurring communication to a rarely visited
site) and starts exﬁltrating sensitive information about
the
infected device either via a speciﬁc URL pattern or in the
user agent ﬁeld (communication using an unusual user agent
for the given user).

The next patterns may differ because the OSX/Shlayer
is the specimen of the Dropper malware class, therefore it
has the capability to install additional modules for various
purposes, e.g.: malicious advertising, click fraud or crypto
mining, see [16] for further reference.

VI. RELATED WORK

Outside of cybersecurity, multi-modal machine learning is
an active topic with long history of research in ﬁelds such as
robotics [17], [18], [19], multimedia [20], [21] and others [22],
[23], [24]. Ref. [25] provides an extensive taxonomy of
challenges in multi-modal ML and approaches to design of
classiﬁers in the more studied domains.

Multi-modal learning in cybersecurity does not have such a
long history. This may be because the modalities do not map
into basic human senses as in the previous domains. There
have been a handful of publications concerned with multi-
modal learning in cybersecurity.

Several systems for multi-modal detection of malware in
the Android ecosystem have been proposed [26], [27], [28],
[29], [30]. In these, the modalities (permissions, opcodes, API
calls, . . . ) are extracted from APK ﬁles and a classiﬁcation
system is trained on a dataset of labelled APK ﬁles.

Similar methods have been presented in classiﬁcation of
binaries [31], [32]. Here again, all of the modalities can be
extracted from a single executable ﬁle.

The modalities we consider in this work are high-level
and originate from distinct data-sources (endpoint, network,
email) which are decoupled into fully separate systems. This
makes just the fusion of the modalities together an interesting
problem as we described in Section IV-C. We are not aware
of another publication addressing this problem.

The detection system we propose is composed of modality-
speciﬁc detectors which are further combined by the multi-
modal detector. In this work, we are not concerned with design
of individual modality-speciﬁc detectors. For the ﬁnal detector,
we have decided to use rule mining approach due to compre-
hensibility of its output. However, almost any classiﬁcation
algorithm can be considered.

There exist many approaches to rule mining such as frequent
item set mining e.g. [33], [34], [35], [15], logical item set
mining [36], sequential rule mining [37], discriminant chron-
icles mining mining [14], or currently emerging deep rule
mining [38]. According to the comparison of rule mining
approaches [39] we have selected a frequent item set mining,
speciﬁcally an FP-growth algorithm [15] with slight modiﬁca-
tions, as discussed in Section IV-D.

VII. CONCLUSION

This work emphasizes the need of combining multiple
sources of data in automated detection of security incidents in
order to provide complete and descriptive detections, referred
as multi-modal detections. The problem of multi-modal de-
tection was formally deﬁned and a theoretical framework was
introduced. A reference implementation of the framework was
created and used to demonstrate the detection capabilities of
the multi-modal approach.

We see this contribution as a starting point and a baseline
solution for future development of multi-modal detection ca-
pabilities, which will play key role in advanced detections of
cyber threats with the help of AI methods.

REFERENCES

[1] Palo Alto Networks, What

Is XDR?, 2020 (accessed January
[Online]. Available: https://www.paloaltonetworks.com/

8, 2021).
cyberpedia/what-is-xdr

[2] Cisco, What

Is Extended Detection and Response (XDR)?, 2020
(accessed January 8, 2021). [Online]. Available: https://www.cisco.com/
c/en/us/products/security/what-is-xdr.html
NetFlow

Flow-
Record
[On-
line]. Available: http://www.cisco.com/en/US/technologies/tk648/tk362/
\technologies white paper09186a00800a3db9.html

(accessed March

Systems
Format,

Version
5,

9
2021).

2011

Inc.,

[3] Cisco

[4] E. Eskin, A. Arnold, M. Prerau, L. Portnoy, and S. Stolfo, “A geometric
framework for unsupervised anomaly detection,” in Applications of data
mining in computer security. Springer, 2002, pp. 77–101.

[5] Y. Kim, W. C. Lau, M. C. Chuah, and H. J. Chao, “Packetscore:
Statistics-based overload control against distributed denial-of-service
attacks,” in IEEE INFOCOM, vol. 4.

IEEE, 2004, pp. 2594–2604.

[6] M. Goldstein and A. Dengel, “Histogram-based outlier score (hbos): A
fast unsupervised anomaly detection algorithm,” KI-2012: Poster and
Demo Track, pp. 59–63, 2012.

[7] M. Kopp, M. Grill, and J. Kohout, “Community-based anomaly detec-
tion,” in 2018 IEEE International Workshop on Information Forensics
and Security (WIFS).

IEEE, 2018, pp. 1–6.

[8] C. C. Aggarwal, Outlier Analysis, 2nd ed.

Springer Publishing

Company, Incorporated, 2016.

[9] H. kaur and H. S. Pannu, “Anomaly detection survey for information
the 10th International Conference on
Association for Computing

security,” in Proceedings of
Security of Information and Networks.
Machinery, 2017, p. 251–258.

[10] J. Brabec and L. Machlica, “Decision-forest voting scheme for classiﬁ-
cation of rare classes in network intrusion detection,” in 2018 IEEE
International Conference on Systems, Man, and Cybernetics (SMC),
2018, pp. 3325–3330.

[11] S. S. Hansen, T. M. T. Larsen, M. Stevanovic, and J. M. Pedersen, “An
approach for detection and family classiﬁcation of malware based on
behavioral analysis,” in 2016 International Conference on Computing,
Networking and Communications (ICNC), 2016, pp. 1–5.

[12] M. Kalash, M. Rochan, N. Mohammed, N. D. Bruce, Y. Wang, and
F. Iqbal, “Malware classiﬁcation with deep convolutional neural net-
works,” in 2018 9th IFIP international conference on new technologies,
mobility and security (NTMS).

IEEE, 2018, pp. 1–5.

[13] R. U. Khan, X. Zhang, M. Alazab, and R. Kumar, “An improved
convolutional neural network model for intrusion detection in networks,”
in 2019 Cybersecurity and cyberforensics conference (CCC).
IEEE,
2019, pp. 74–77.

[14] Y. Dauxais, T. Guyet, D. Gross-Amblard, and A. Happe, “Discriminant
chronicles mining,” in Conference on Artiﬁcial Intelligence in Medicine
in Europe. Springer, 2017, pp. 234–244.

[15] K. Wang, L. Tang, J. Han, and J. Liu, “Top down fp-growth for associ-
ation rule mining,” in Paciﬁc-Asia conference on knowledge discovery
and data mining. Springer, 2002, pp. 334–340.

[16] [Online]. Available: https://securelist.com/shlayer-for-macos/95724/
[17] K. Noda, H. Arie, Y. Suga, and T. Ogata, “Multimodal integration
learning of robot behavior using deep neural networks,” Robotics and
Autonomous Systems, vol. 62, no. 6, pp. 721–736, 2014.

[18] D. Park, Y. Hoshi, and C. C. Kemp, “A multimodal anomaly detector
for robot-assisted feeding using an lstm-based variational autoencoder,”
IEEE Robotics and Automation Letters, vol. 3, no. 3, pp. 1544–1551,
2018.

[19] L. Caltagirone, M. Bellone, L. Svensson, and M. Wahde, “Lidar–camera
fusion for road detection using fully convolutional neural networks,”
Robotics and Autonomous Systems, vol. 111, pp. 125–131, 2019.
[20] B. P. Yuhas, M. H. Goldstein, and T. J. Sejnowski, “Integration of
acoustic and visual speech signals using neural networks,” IEEE Com-
munications Magazine, vol. 27, no. 11, pp. 65–71, 1989.

[21] Z. Wu, L. Cai, and H. Meng, “Multi-level fusion of audio and visual
features for speaker identiﬁcation,” in International Conference on
Biometrics. Springer, 2006, pp. 493–499.

[22] N. Deo and M. M. Trivedi, “Multi-modal trajectory prediction of sur-
rounding vehicles with maneuver based lstms,” in 2018 IEEE Intelligent
Vehicles Symposium (IV).

IEEE, 2018, pp. 1179–1184.

[23] Y. Wang, F. Ma, Z. Jin, Y. Yuan, G. Xun, K. Jha, L. Su, and
J. Gao, “Eann: Event adversarial neural networks for multi-modal fake
news detection,” in Proceedings of the 24th acm sigkdd international
conference on knowledge discovery & data mining, 2018, pp. 849–857.
[24] H. Li, F. Yang, X. Xing, Y. Zhao, J. Zhang, Y. Liu, M. Han, J. Huang,
L. Wang, and J. Yao, “Multi-modal multi-instance learning using weakly
correlated histopathological images and tabular clinical information,” in
International Conference on Medical Image Computing and Computer-
Assisted Intervention. Springer, 2021, pp. 529–539.

[25] T. Baltruˇsaitis, C. Ahuja, and L.-P. Morency, “Multimodal machine
learning: A survey and taxonomy,” IEEE transactions on pattern anal-
ysis and machine intelligence, vol. 41, no. 2, pp. 423–443, 2018.
[26] S. Singh, K. Chaturvedy, and B. Mishra, “Multi-view learning for
repackaged malware detection,” in The 16th International Conference
on Availability, Reliability and Security, 2021, pp. 1–9.

[27] S. Millar, N. McLaughlin, J. Martinez del Rincon, P. Miller, and
Z. Zhao, “Dandroid: A multi-view discriminative adversarial network
for obfuscated android malware detection,” in Proceedings of the tenth
ACM conference on data and application security and privacy, 2020,
pp. 353–364.

[28] A. Narayanan, M. Chandramohan, L. Chen, and Y. Liu, “A multi-view
context-aware approach to android malware detection and malicious
code localization,” Empirical Software Engineering, vol. 23, no. 3, pp.
1222–1274, 2018.

[29] A. Appice, G. Andresini, and D. Malerba, “Clustering-aided multi-view
classiﬁcation: a case study on android malware detection,” Journal of
Intelligent Information Systems, vol. 55, no. 1, pp. 1–26, 2020.
[30] S. Millar, N. McLaughlin, J. M. del Rincon, and P. Miller, “Multi-
view deep learning for zero-day android malware detection,” Journal
of Information Security and Applications, vol. 58, p. 102718, 2021.
[31] J. Bai and J. Wang, “Improving malware detection using multi-view
ensemble learning,” Security and Communication Networks, vol. 9,
no. 17, pp. 4227–4241, 2016.

[32] S. Guo, Q. Yuan, F. Lin, F. Wang, and T. Ban, “A malware detection
algorithm based on multi-view fusion,” in International Conference on
Neural Information Processing. Springer, 2010, pp. 259–266.

[33] C. Borgelt, “Efﬁcient implementations of apriori and eclat,” in FIMI’03:
Proceedings of the IEEE ICDM workshop on frequent itemset mining
implementations, 2003.

[34] T. Uno, M. Kiyomi, and H. Arimura, “Lcm ver. 2: Efﬁcient mining
algorithms for frequent/closed/maximal itemsets,” in Fimi, vol. 126,
2004.

[35] J. Han, J. Pei, and Y. Yin, “Mining frequent patterns without candidate

generation,” in ACM sigmod record, vol. 29. ACM, 2000, pp. 1–12.

[36] S. Kumar, V. Chandrashekar, and C. Jawahar, “Logical itemset mining,”
in Data Mining Workshops (ICDMW), 2012 IEEE 12th International
Conference on.

IEEE, 2012, pp. 603–610.

[37] B. Dalmas, P. Fournier-Viger, and S. Norre, “Twincle: A constrained
sequential rule mining algorithm for event logs,” Procedia computer
science, vol. 112, pp. 205–214, 2017.

[38] F. Beck and J. F¨urnkranz, “An empirical investigation into deep and
shallow rule learning,” arXiv preprint arXiv:2106.10254, 2021.
[39] M. Kopp, M. J´ılek, and M. Holeˇna, “Comparing rule mining approaches

for classiﬁcation with reasoning.” in ITAT, 2018, pp. 52–58.

