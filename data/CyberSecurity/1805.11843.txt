9
1
0
2

g
u
A
3
1

]

R
C
.
s
c
[

2
v
3
4
8
1
1
.
5
0
8
1
:
v
i
X
r
a

Android Malware Detection based on Factorization Machine

Chenglin Li
Dept. Electrical and Computer
Enginerring
University of Alberta
Edmonton, Alberta, Canada
ch11@ualberta.ca

Rui Zhu
Dept. Electrical and Computer
Enginerring
University of Alberta
Edmonton, Alberta, Canada
rzhu3@ualberta.ca

Keith Mills
Dept. Electrical and Computer
Enginerring
University of Alberta
Alberta, Canada
kgmills@ualberta.ca

Hongwen Zhang
CEO & CTO
Wedge Networks
Calgary, Alberta, Canada
hongwen.zhang@wedgenetworks.
com

Di Niu
Dept. Electrical and Computer
Enginerring
University of Alberta
Edmonton, Alberta, Canada
dniu@ualberta.ca

Husam Kinawi
President
Wedge Networks
Calgary, Alberta, Canada
husam.kinawi@wedgenetworks.com

ABSTRACT
As the popularity of Android smart phones has increased in recent
years, so too has the number of malicious applications. Due to the
potential for data theft mobile phone users face, the detection of
malware on Android devices has become an increasingly important
issue in cyber security. Traditional methods like signature-based
routines are unable to protect users from the ever-increasing so-
phistication and rapid behavior changes in new types of Android
malware. Therefore, a great deal of effort has been made recently to
use machine learning models and methods to characterize and gen-
eralize the malicious behavior patterns of mobile apps for malware
detection.

In this paper, we propose a novel and highly reliable classifier for
Android Malware detection based on a Factorization Machine archi-
tecture and the extraction of Android app features from manifest
files and source code. Our results indicate that the numerical fea-
ture representation of an app typically results in a long and highly
sparse vector and that the interactions among different features
are critical to revealing malicious behavior patterns. After perform-
ing an extensive performance evaluation, our proposed method
achieved a test result of 100.00% precision score on the DREBIN
dataset and 99.22% precision score with only 1.10% false positive
rate on the AMD dataset. These metrics match the performance of
state-of-the-art machine-learning-based Android malware detec-
tion methods and several commercial antivirus engines with the
benefit of training up to 50 times faster.

KEYWORDS
Android Malware, Static Analysis, Factorization Machine, Feature
Extraction, Sparse Representation

1 INTRODUCTION
Smartphone usage is prevalent in our daily lives. According to
surveys on global OS market shares [7, 32], Android is the visibly
dominant mobile OS with a solid hold of around 75% market share
across all mobile devices and 85.1% dominance for smartphones
specifically in 2018. The rapid growth of mobile device usage, cou-
pled with the majority market share that the Android OS enjoys

have not only brought about opportunities for Android app de-
velopment, but also serve to emphasize the challenge involved in
defending devices from malware. According to Kaspersky’s Mobile
Malware Evolution Reports for 2016 through 2018 [4, 33, 34], the
number of malicious installation packages amounted to 8, 526, 221,
5, 730, 916 and 5, 321, 142, respectively. While these numbers indi-
cate a downward trend, one should not be fooled as the number of
new Trojans targeting financial information was 128, 886, 94, 368,
and 151, 359 each year, respectively, indicating that these classes of
malicious, theft-enabling software constitute a larger proportion of
Android malware each year - from 1.51% in 2016 to 1.65% in 2017
to an alarming 2.84% in 2018.

To win the battle and protect mobile phone users, a number
of anti-virus companies, like McAfee and Symantec, provide soft-
ware products as a major defense against these kinds of threats.
These products typically use a signature-based method [35] to rec-
ognize threats. Signature-based methods involve the generation
of a unique signature for each previously known malware, while
detection involves scanning an app to match existing signatures in
a malware database. On the other hand, the heuristic-based method,
introduced in the late 1990s, relies upon explicit expert rules to
distinguish malware, giving rise to errors induced by human bias.
In fact, both methods will be less effective if the development of
the malware database or expert rules cannot keep pace with the
speed at which new malware emerges and evolves.

To overcome the aforementioned problems, an alternative emerg-
ing approach is to develop intelligent malware detection techniques
based on Machine Learning (ML), whose generalization capabilities
are capable of discovering unintuitive patterns in previously unde-
tected malware samples. One major type of machine learning-based
malware detection method is called static analysis [2, 37], which
can make decisions about an app without executing it in a sand-
box, thus incurring a low overhead for execution. Static analysis
has two phases: feature extraction and classification. In the first
phase, various features such as API calls and binary strings are
extracted from an original file. In the second phase, an ML model
learns to automatically categorize the file sample into malware or
benign-ware based on a vectorized representation of the file. For
example, DroidMat [37] performs static analysis on the manifest file
and the source code of an Android app to extract multiple features,

 
 
 
 
 
 
including permissions, hardware resources, and API calls. It then
uses k-means clustering and k nearest neighbor (k-NN) classifica-
tion to detect malware. DREBIN [2] extracts similar features from
the manifest file and source code of an app and uses a Support
Vector Machine (SVM) for malware classification based on one-hot
encoded feature vectors.

However, existing machine learning techniques for malware
detection have yielded limited accuracy with high false positive
rates, mainly due to the use of first-order models or linear classifiers,
such as SVM [2]. These are insufficient to discover all malicious
patterns. A natural idea to introduce non-linearity into malware
detection is to consider the interaction between features, or in
other words, feature crossing or basis expansion. For example, an
app concurrently requesting both GPS and SEND SMS permissions
may be attempting to execute a location leakage, while the presence
of either one of such requests alone does not point to any malicious
behavior. However, ML models involving feature crossing are not
scalable to long feature vectors.

For example, a total number of 545, 000 features are used by
DREBIN [2], the SVM-based detector, which means that more than
297 billion interactions need to be considered if feature crossing
was used. One could expect this number to be even larger in a
more recent dataset; the Android Malware Dataset (AMD) [36],
which contains more file samples thus exposing more features.
Moreover, although the total number of features is large, the number
of features activated by each file sample is usually much smaller,
leading to a sparse vectorized representation for each individual
app. This will further lead to even sparser interaction terms (the
crossed terms), posing significant challenges to model training—
there are not enough non-zero entries in the dataset to train the
coefficient of each crossed term.

The goal of this paper is to accurately model feature interactions
and efficiently handle long and sparse features. To this end we pro-
pose a novel Factorization Machine (FM) model for Android malware
detection. In contrast to feature crossing or basis expansion, which
suffers from the model size issue and the sparsity issue mentioned
above, Factorization Machines [27] aim to learn the coefficient of
each interaction as the inner product of two latent vectors, thus
effectively reducing the number of parameters to linear to n, where
n is the length of the feature vector.

We evaluated our model on two Android malware datasets:
DREBIN [2] and AMD[36], which contain 5560 and 24553 sam-
ples, respectively. In order go gauge performance, the metrics we
utilized consisted of accuracy, false positive rate (FPR), precision,
recall and F1 In addition, we also evaluated the performance when
identifying specific families of malware, which is especially im-
portant given the growing share of banking Trojans. With respect
to this task, we focused primarily on accuracy and false positive
metrics.

The remainder of this paper is organized as follows: Section 2
reviews the background of the Android system and our feature
extraction technique, while Section 3 describes the mathematics
behind a Factorization Machine. In Section 4 we elaborate on the
two datasets used in this experiment, formally describe the metrics
we are using before stating our test results in Section 4.2.1 and
interpret them in Section 4.2.2. Next, we compare our test results
to several several popular antivirus engines and gauge our model’s

2

detection rating with respect to specific malware families in Sec-
tions 4.3 and 4.3.2. Finally, we discuss future work and list a few
related research projects in Sections 5 and 6, respectively, before
concluding in Section 7.

2 ANDROID FEATURE EXTRACTION
Android applications are written in Java and executed within a
custom Java Virtual Machine (JVM). Each application package is
contained in a jar file with the extension of apk. Android appli-
cations consist of many components of various types, which are
the essential building blocks of the application. Each component
has an entry point through which the system or a user can enter
the application. In addition, there are four fundamental building
blocks of an Android app: Activities, Services, Broadcast Receivers
and Content Providers. All components must be declared in the
application manifest file in order to be used. Communication be-
tween these components is achieved by using intents and intent
filters. Intents are messaging objects that can be used to request
actions from other application components while intent filters are
expressions declared in the application manifest file that specify
the intent type that a component will receive. Since application
components interact via the intent method, it is critical to analyze
both the components themselves, as well as their communication
intents, for security concerns.

Before classification on any model can be done, raw data must
be processed. The feature engineering section of our malware de-
tection system consists of three parts: Unpacking and Decompiling,
Feature Extraction, and Encoding – all shown below in Fig 1.

Unpacking and Decompiling: Each apk file is actually a spe-
cialized zipped file that consists of the application source code,
resources, assets, and manifest file. The source code is encoded
as dex files (i.e., Dalvik Executable Files) that can be interpreted
by the Dalvik VM. The manifest file consists of a number of dec-
larations and specifications. Finally, other resources may contain
images, HTML files, etc.. Since the dex files are compiled, binary
executable code, and therefore not meant to be read or interpreted,
features cannot be readily extracted from them directly. Therefore,
they must be decompiled into other formats that can be read and
interpeted, such as Smali code or even Java code. Smali code is
an intermediate form that is decompiled from the dex files; it is
essentially the assembly code format of an application. Only after
then apk files have been decompiled can we continue onto our next
step.

Feature extraction: Feature extraction is one of the the most
important aspects involved in the training of a machine learning
model. The upper bound of a given model’s performance directly
depends on the nature of the features used. After performing a
study of the Android system and comparing it to previous work
experience in its field, we chose to extract 7 kind of features from
both the source code and manifest file. The following four types of
features are extracted from a given app’s manifest file:

(1) App components: The components declared in the mani-
fest file define the different interfaces that exist between
the app and the end-user and the app and the larger An-
droid OS as a whole. The names of these components are
collected to help identify variants of well-known malware,

Figure 1: System architecture of our Malware detection model.

for example the DroidKungFu family share the name of
several particular services [2].

(2) Hardware features: If an application wants to request
access to the hardware components of the device, such as
its camera, GPS or sensors, then those features must be
declared in the manifest file. Requesting certain hardware
components may have security implications, For example,
requesting usage of the GPS and network modules may be
a sign of location leakage.

(3) Permissions: Android uses a permission mechanism to
protect the privacy of users. An app must request permis-
sion to access sensitive data (e.g. SMS), system features
(e.g. camera) and restricted APIs. Malware usually tends
to request a specific set of permissions. In this respect, this
is similar to how we handle hardware features.

(4) Intent filter: Intent filters declared within the declaration
of components in the manifest file are important tools
for inter-component and inter-application communication.
Intent filters define a special entry point for a component
as well as the application. Intent filters can be used for
eavesdropping specific intents. Malware is sensitive to a
special set of system events. Thus, intent filters can serve
as vital features.

Furthermore, we also extract another three types of features

from the decompiled application source code (e.g., Smali code):

(1) Restricted APIs: In the Android system, some special
APIs related to sensitive data access are protected by per-
missions. If an app calls these APIs without requesting
corresponding permissions, it may be a sign of root ex-
ploits.

(2) Suspicious APIs: We should be aware of a special set of
APIs that can lead to malicious behavior without request-
ing permissions. For example, cryptography functions in
the Java library and some math functions need no permis-
sion to be used. However, these functions can be used by
malware for code obfuscation. Thus, attention should be
paid to the unusual usage of these functions. We mark
these types of functions as suspicious APIs.

(3) Used permissions: We first extract all API calls from the
app source code, and use this to build a set of permissions
that are actually used in the app by looking up a predefined
dictionary that links an API to its required permission(s).

Figure 2: One-hot encoding for string features.

Encoding: Next, we encode our extracted features into a com-
mon format that can be fed into any generic classifier. Our method
uses an N -dimensional indicator to encode each application into
a feature representation, where N is the feature dimension. To be
specific, suppose all the extracted features form a feature set S with
size |S |, then we represent each apk file as a binary vector of length
|S |, whose entries are 1 only if a given feature is used by the app.
For example, suppose we have two Android applications, A and
B, which each request three permissions as illustrated in Fig. 21.
As there are five unique permissions requested by A and B, we
can then create a vector xA, xB ∈ {0, 1}5 such that each entry
represents exactly one permission, e.g., the first entry as a blue
block represents the permission SEND MSG and the second entry
represents the permission BIND ADMIN. As a result, we can write
xA = (1, 1, 1, 0, 0) and xB = (1, 0, 0, 1, 1). It is straightforward to
extend this idea to all kinds of extracted features as discussed in
Sec. 2. The formal name for this scheme in literature is one-hot
encoding.

To visualize the effectiveness of our feature extraction and repre-
sentation technique in distinguishing between malware and clean
files, we applied a t-SNE [20] algorithm on 2000 already encoded
samples, 1, 000 of which came from the DREBIN [2] dataset and
while 1, 000 were clean. The result is shown in Fig 3. Through
this representation we can clearly see that the malware and clean
files have formed several visibly identifiable, yet overlapping clus-
ters, which implies the need for a non-linear classifier in order to
accurately discriminate each class.

1Here we use different color blocks to represent different feature values in permission
set, although in practice active features are represented by a ’1’. White blocks mean
the feature is not used (set to ’0’).

3

AndroidManifest.xmlSmali codeComponentsIntent-ﬁlterHardware FeatureUsed permissionsPermissionsRestricted_APIsSuspicious_APIs0010001000101Unpacking &DecomplingFeatureExtractionFeatureExtractionEncodingClassificationA = {SEND_SMS, BIND_ADMIN, BLUETOOTH}B = {SEND_SMS, CHANGE_WIFI_STATE, NFC}+)S = {SEND_SMS, BIND_ADMIN, BLUETOOTH, CHANGE_WIFI_STATE, NFC}because a weight value of 55 is as accurately as a weight value of
−249 if that weight is always multiplied by a 0.

Secondly, these models only exploit the First-Order informa-
tion found within the features – interactions between features and
weights. They do not take interactions among the features them-
selves into account. For example, going back to Figure 2 again,
if a specific class of Malware can be reliably detected by check-
ing if it requests a certain set of features (e.g. BLUETOOTH and
CHANGE WIFI STATE) together - meaning it requests all of them not
just a few - then a good starting point for a reliable classifier is
one that can detect if that specific set of features are active. This
is a second-order interaction - first-order classifiers such as SVMs
and Naive Bayes cannot handle these automatically unless an in-
teraction term between these features was added previously in the
feature engineering stage. The inclusion of these interaction terms
requires a priori knowledge regarding the malware and also serve
to expand the number of features.

3.2 Second-Order Feature Crossing and

Factorization Machines

Typically Multi-Layer Perceptrons (MLP) and Deep Neural Net-
works (DNN) are the go-to solution for solving hard classification
problems due to the properties they possess as universal function
approximators [28, 30]. However, the number of parameters in-
volved in training these models for a given task involve the tuning
of very complex model with a large number of synaptic weights,
even before feature interactions are introduced. With that in mind,
consider a natural method for learning interactions of different
features is through basis expansion or feature-crossing:

h(x) = w0 +

n
(cid:213)

i=1

wi xi +

n
(cid:213)

n
(cid:213)

i=1

j=i+1

Wi jxi xj .

(3)

By assigning a weight Wi, j for each pair of xi and xj , we have
the easiest way to capture pairwise interactions. However, it is not
efficient here due to the large number of parameters: this model has
n(n − 1)/2 free parameters. As stated in Section 3.1, the input vector
for the DREBIN [2] dataset has a length of 93, 324 but the number
of nonzero entries is about 73 on average. In this case, full feature
crossing like W would necessitate roughly four billion weights!
This brings heavy burdens on the training process since the model
becomes so complicated it requires large computational resources
and is very time-consuming. This problem is further compounded
by the sparse nature of the data in this problem, which makes the
task of applying meaningful updates to a large number of weights
very difficult. Hence, MLPs are not an optimal solution to this
problem.

Popular techniques to overcome the issues mentioned above and
in Section 3.1 are low-rank or dimension reduction methods. In
particular, we have chosen to use a classifier that implements feature
interactions in the learning stage - the Factorization Machine [27]
(FM), described by Figure 43. More specifically, FM assumes that
W is with the largest rank of k and therefore, we can decompose
W = VV T.

If we denote vi as the i-th row of V , FM will train a hidden vector
vi for each xi and models the pairwise interaction weight wi j as

3The dark gray node stands for the inner product operator.

Figure 3: t-SNE view of 2000 samples.

3 FACTORIZATION MACHINE FOR

MALWARE DETECTION

Generally, a classification problem in machine learning is to infer a
function h : Rn → R for all possible x ∈ Rn to predict how much
it belongs to a class. To find such a function, we are given a set
of samples, each of which has been marked as a “malicious” or
“benign”.

In an abstract sense, the goal at the core of this paper is one that
involves achieving a high accuracy on a binary classification prob-
lem using a classifier that is not very well-known when compared
to the peers its performance is contrasted against. Specifically,
we have chosen to use a Factorization Machine [27] to meet this
objective, for reasons to be explained below.

3.1 Limitations of First-Order Classifiers
Given a data sample (cid:174)x, a typical machine learning algorithm will
attempt to determine its class, ˆy((cid:174)x)2, by learning a set of weights,
(cid:174)w, such that,

ˆy((cid:174)x) = h((cid:174)x; (cid:174)w)
(1)
Where h is sometimes known as the transfer function of the
algorithm. For example, in the case of Support Vector Machines,
used by DREBIN [2], h can be written as,

h((cid:174)x; (cid:174)w) = (cid:174)xT (cid:174)w + w0
(2)
Where (cid:174)w0 is the intercept coefficient, technically a part of (cid:174)w but
always multiplied by 1. Most of the basic, well-known classifiers,
including Support Vector Machines, Naive Bayes (NB), and Logistic
Regression, operate in a similar manner, where the input sample is
compared to the learned weights allowing a class decision to then
be made.

These models are not suitable for Android malware detection for
two reasons: First, as Figure 2 implies, the feature vectors from one-
hot encoding consist of ones and zeroes and are likely to be highly
sparse. For example, samples in the benchmark dataset DREBIN [2]
will be encoded into vectors with 93, 324 entries, and on average
only 73 features are non-zero, which makes weight training difficult,

2This is usually a probability (binary) or vector of class probabilities (multiclass) that
are processed later

4

−20−1001020−20−1001020t-SNE view of feature representationmalwarecleanTable 1: Performance metrics of Android malware detec-
tion.

Description
# of malicious apps correctly detected
# of benign apps correctly classified
# of false prediction as malicious
# of false prediction as clean
(T P + T N )/(T P + T N + F P + F N )

Metrics
T P
T N
F P
F N
Accuracy
Precision T P/(T P + F P)
T P/(T P + F N )
Recall
2 ∗ Precision ∗ Recall/(Precision + Recall)
F 1
F P/(F P + T N )
F PR

• DREBIN: Contains 5560 malware files collected from Au-
gust 2010 to October 2012. All malware samples are labeled
as 1 of 179 malware families. This is one of the most popular
benchmark datasets for Android malware detection.

• AMD: Known as the Android Malware Dataset, it contains
24553 samples that are categorized in 135 varieties among
71 malware families. This dataset consists of samples col-
lected from 2010 to 2016. This is one of the largest, public
datasets. AMD provides more recent evolution trends for
Android malware when compared to DREBIN.

Further details regarding these two datasets are shown in Table 2.
When doing experiments on the AMD dataset, we evaluated all
16753 clean files. When evaluating on the DREBIN dataset, we
randomly sampled 5600 clean files to match the number of malware
samples in this dataset. To simplify our terminologies, the DREBIN
dataset (or the AMD dataset) consists of both clean samples and
malware samples in the subsequent to this section. Also from
Table 2 we see the overall feature set size grows from 93324 to
294, 019 as the dataset size grows from 11160 to 41306.

We also collected a number of real-world Android applications
from the internet. Resources of these files include apkpure [1]
with 5400 samples, 700 samples from 360.com and 13K commercial
applications from the HKUST Wake Lock Misuse Detection Project
[19]. In total, we have 19100 real-world applications. Then, we
uploaded all these files to VirusTotal, a public anti-virus service
with 78 popular engines, and inspected scanning reports for each
file as a check to ensure that they were truly clean files. Each engine
in VirusTotal would show one of three detection results: True for
“malicious”, False for “clean”, and NK for “not known”, respectively.
If an application had more than one True result, we labeled it as
malware; otherwise, we considered it as clean. Thus, only 16753
out of 19K collected samples are labeled as clean, and we will only
use these samples in further experiments.

In our system, we used APKtool[6] to decompile the source code
into Smali code and extract information from the AndroidManifest.xml
file. We found this procedure to be quite time-consuming. However,
for different applications this would often take a fixed processing
time due to the fixed feature space size. Therefore, we focused on
evaluating the processing time for unpacking, decompiling and
feature extraction, then give out an average processing time for all
applications on the encoding and prediction phase.

5

Figure 4: The architecture of Factorization Machine model.

the inner product of the corresponding hidden vectors of entries xi
and xj :

h((cid:174)x) = w0 +

n
(cid:213)

i=1

wi xi +

n
(cid:213)

n
(cid:213)

i=1

j=i+1

(cid:104)vi , vj (cid:105)xi xj ,

(4)

where (cid:104)· , · (cid:105) denotes the dot product of two vectors of length k:

(cid:104)vi , vj (cid:105) :=

k
(cid:213)

f =1

vi, f vj, f ,

(5)

The parameters that are learned during the training stage –
w0, wi, vi and vj – can be updated using generic stochastic meth-
ods such as gradient descent [15, 27] with augmentations such as
Adam [17]. In practice, the hyperparameter k is much smaller than
the feature dimension n (k (cid:28) n). Thus, the number of parameters
to be estimated reduces from O(n2) to O(nk).

We can further improve the performance of FM by using more
sophisticated feature engineering schemes for cross terms. For
example, by using “partial FM”, which only involves interactions
between selected features, e.g., between Used permissions and
Permissions, thus ignoring crossed terms that are not relevant to
malicious behavior discovery.

4 EXPERIMENTS
In this section, we evaluate the performance of our Factorization
Machine-based Android malware detection system. We apply our
system to malware detection tasks and malware family identifi-
cation tasks, based on two public benchmark datasets: DREBIN
[2] and AMD [36]. We also check our FM model against popular
antivirus engines and state the logistics of our decompilation and
feature extraction procedure.

4.1 Android APK Data
To perform this experiment, we used two public benchmark datasets:
DREBIN [2], which has been mentioned previously, and AMD [36]:

0101010010x1<latexit sha1_base64="l4rU70rTJl6SnGihENNVzvMhZrg=">AAAB6XicbVBNS8NAEJ34WetX1aOXxSJ4KokI6kUKXjxWNLbQhrLZTtqlm03Y3Ygl9Cd48aDi1X/kzX/jts1BWx8MPN6bYWZemAqujet+O0vLK6tr66WN8ubW9s5uZW//QSeZYuizRCSqFVKNgkv0DTcCW6lCGocCm+HweuI3H1Fpnsh7M0oxiGlf8ogzaqx099T1upWqW3OnIIvEK0gVCjS6la9OL2FZjNIwQbVue25qgpwqw5nAcbmTaUwpG9I+ti2VNEYd5NNTx+TYKj0SJcqWNGSq/p7Iaaz1KA5tZ0zNQM97E/E/r52Z6CLIuUwzg5LNFkWZICYhk79JjytkRowsoUxxeythA6ooMzadsg3Bm395kfintcuad3tWrV8VaZTgEI7gBDw4hzrcQAN8YNCHZ3iFN0c4L8678zFrXXKKmQP4A+fzB3hBjXA=</latexit><latexit sha1_base64="l4rU70rTJl6SnGihENNVzvMhZrg=">AAAB6XicbVBNS8NAEJ34WetX1aOXxSJ4KokI6kUKXjxWNLbQhrLZTtqlm03Y3Ygl9Cd48aDi1X/kzX/jts1BWx8MPN6bYWZemAqujet+O0vLK6tr66WN8ubW9s5uZW//QSeZYuizRCSqFVKNgkv0DTcCW6lCGocCm+HweuI3H1Fpnsh7M0oxiGlf8ogzaqx099T1upWqW3OnIIvEK0gVCjS6la9OL2FZjNIwQbVue25qgpwqw5nAcbmTaUwpG9I+ti2VNEYd5NNTx+TYKj0SJcqWNGSq/p7Iaaz1KA5tZ0zNQM97E/E/r52Z6CLIuUwzg5LNFkWZICYhk79JjytkRowsoUxxeythA6ooMzadsg3Bm395kfintcuad3tWrV8VaZTgEI7gBDw4hzrcQAN8YNCHZ3iFN0c4L8678zFrXXKKmQP4A+fzB3hBjXA=</latexit><latexit sha1_base64="l4rU70rTJl6SnGihENNVzvMhZrg=">AAAB6XicbVBNS8NAEJ34WetX1aOXxSJ4KokI6kUKXjxWNLbQhrLZTtqlm03Y3Ygl9Cd48aDi1X/kzX/jts1BWx8MPN6bYWZemAqujet+O0vLK6tr66WN8ubW9s5uZW//QSeZYuizRCSqFVKNgkv0DTcCW6lCGocCm+HweuI3H1Fpnsh7M0oxiGlf8ogzaqx099T1upWqW3OnIIvEK0gVCjS6la9OL2FZjNIwQbVue25qgpwqw5nAcbmTaUwpG9I+ti2VNEYd5NNTx+TYKj0SJcqWNGSq/p7Iaaz1KA5tZ0zNQM97E/E/r52Z6CLIuUwzg5LNFkWZICYhk79JjytkRowsoUxxeythA6ooMzadsg3Bm395kfintcuad3tWrV8VaZTgEI7gBDw4hzrcQAN8YNCHZ3iFN0c4L8678zFrXXKKmQP4A+fzB3hBjXA=</latexit><latexit sha1_base64="l4rU70rTJl6SnGihENNVzvMhZrg=">AAAB6XicbVBNS8NAEJ34WetX1aOXxSJ4KokI6kUKXjxWNLbQhrLZTtqlm03Y3Ygl9Cd48aDi1X/kzX/jts1BWx8MPN6bYWZemAqujet+O0vLK6tr66WN8ubW9s5uZW//QSeZYuizRCSqFVKNgkv0DTcCW6lCGocCm+HweuI3H1Fpnsh7M0oxiGlf8ogzaqx099T1upWqW3OnIIvEK0gVCjS6la9OL2FZjNIwQbVue25qgpwqw5nAcbmTaUwpG9I+ti2VNEYd5NNTx+TYKj0SJcqWNGSq/p7Iaaz1KA5tZ0zNQM97E/E/r52Z6CLIuUwzg5LNFkWZICYhk79JjytkRowsoUxxeythA6ooMzadsg3Bm395kfintcuad3tWrV8VaZTgEI7gBDw4hzrcQAN8YNCHZ3iFN0c4L8678zFrXXKKmQP4A+fzB3hBjXA=</latexit>x2<latexit sha1_base64="bAAs6QPjEwIHvdcIdyKCEckteLU=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mKoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4tepl1bs9q9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF5xI1x</latexit><latexit sha1_base64="bAAs6QPjEwIHvdcIdyKCEckteLU=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mKoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4tepl1bs9q9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF5xI1x</latexit><latexit sha1_base64="bAAs6QPjEwIHvdcIdyKCEckteLU=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mKoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4tepl1bs9q9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF5xI1x</latexit><latexit sha1_base64="bAAs6QPjEwIHvdcIdyKCEckteLU=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mKoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4tepl1bs9q9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF5xI1x</latexit>x3<latexit sha1_base64="VtBqSkyIdv9dbeIaUqxfupBETu0=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lUUC9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11Tjvlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Vqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN7R41y</latexit><latexit sha1_base64="VtBqSkyIdv9dbeIaUqxfupBETu0=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lUUC9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11Tjvlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Vqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN7R41y</latexit><latexit sha1_base64="VtBqSkyIdv9dbeIaUqxfupBETu0=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lUUC9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11Tjvlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Vqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN7R41y</latexit><latexit sha1_base64="VtBqSkyIdv9dbeIaUqxfupBETu0=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lUUC9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11Tjvlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Vqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN7R41y</latexit>x4<latexit sha1_base64="LbweBUSZzb3BjXNuK7V2xREtjXY=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mkoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4Z9XLqndbq9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF8yo1z</latexit><latexit sha1_base64="LbweBUSZzb3BjXNuK7V2xREtjXY=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mkoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4Z9XLqndbq9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF8yo1z</latexit><latexit sha1_base64="LbweBUSZzb3BjXNuK7V2xREtjXY=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mkoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4Z9XLqndbq9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF8yo1z</latexit><latexit sha1_base64="LbweBUSZzb3BjXNuK7V2xREtjXY=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mkoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4Z9XLqndbq9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF8yo1z</latexit>x5<latexit sha1_base64="q4sq9UNBJrtUuGqBRMaOlCa0bbE=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUS9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11zjrlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Wqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN+TY10</latexit><latexit sha1_base64="q4sq9UNBJrtUuGqBRMaOlCa0bbE=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUS9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11zjrlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Wqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN+TY10</latexit><latexit sha1_base64="q4sq9UNBJrtUuGqBRMaOlCa0bbE=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUS9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11zjrlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Wqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN+TY10</latexit><latexit sha1_base64="q4sq9UNBJrtUuGqBRMaOlCa0bbE=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUS9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11zjrlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Wqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN+TY10</latexit>x6<latexit sha1_base64="04RX7wgBwkUe9zu92JXNSplc5bI=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE/LhIwYvHisYW2lA22227dLMJuxOxhP4ELx5UvPqPvPlv3LY5aOuDgcd7M8zMCxMpDLrut1NYWl5ZXSuulzY2t7Z3yrt7DyZONeM+i2WsmyE1XArFfRQoeTPRnEah5I1weD3xG49cGxGrexwlPIhoX4meYBStdPfUOeuUK27VnYIsEi8nFchR75S/2t2YpRFXyCQ1puW5CQYZ1SiY5ONSOzU8oWxI+7xlqaIRN0E2PXVMjqzSJb1Y21JIpurviYxGxoyi0HZGFAdm3puI/3mtFHsXQSZUkiJXbLaol0qCMZn8TbpCc4ZyZAllWthbCRtQTRnadEo2BG/+5UXin1Qvq97taaV2ladRhAM4hGPw4BxqcAN18IFBH57hFd4c6bw4787HrLXg5DP78AfO5w9/0I11</latexit><latexit sha1_base64="04RX7wgBwkUe9zu92JXNSplc5bI=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE/LhIwYvHisYW2lA22227dLMJuxOxhP4ELx5UvPqPvPlv3LY5aOuDgcd7M8zMCxMpDLrut1NYWl5ZXSuulzY2t7Z3yrt7DyZONeM+i2WsmyE1XArFfRQoeTPRnEah5I1weD3xG49cGxGrexwlPIhoX4meYBStdPfUOeuUK27VnYIsEi8nFchR75S/2t2YpRFXyCQ1puW5CQYZ1SiY5ONSOzU8oWxI+7xlqaIRN0E2PXVMjqzSJb1Y21JIpurviYxGxoyi0HZGFAdm3puI/3mtFHsXQSZUkiJXbLaol0qCMZn8TbpCc4ZyZAllWthbCRtQTRnadEo2BG/+5UXin1Qvq97taaV2ladRhAM4hGPw4BxqcAN18IFBH57hFd4c6bw4787HrLXg5DP78AfO5w9/0I11</latexit><latexit sha1_base64="04RX7wgBwkUe9zu92JXNSplc5bI=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE/LhIwYvHisYW2lA22227dLMJuxOxhP4ELx5UvPqPvPlv3LY5aOuDgcd7M8zMCxMpDLrut1NYWl5ZXSuulzY2t7Z3yrt7DyZONeM+i2WsmyE1XArFfRQoeTPRnEah5I1weD3xG49cGxGrexwlPIhoX4meYBStdPfUOeuUK27VnYIsEi8nFchR75S/2t2YpRFXyCQ1puW5CQYZ1SiY5ONSOzU8oWxI+7xlqaIRN0E2PXVMjqzSJb1Y21JIpurviYxGxoyi0HZGFAdm3puI/3mtFHsXQSZUkiJXbLaol0qCMZn8TbpCc4ZyZAllWthbCRtQTRnadEo2BG/+5UXin1Qvq97taaV2ladRhAM4hGPw4BxqcAN18IFBH57hFd4c6bw4787HrLXg5DP78AfO5w9/0I11</latexit><latexit sha1_base64="04RX7wgBwkUe9zu92JXNSplc5bI=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE/LhIwYvHisYW2lA22227dLMJuxOxhP4ELx5UvPqPvPlv3LY5aOuDgcd7M8zMCxMpDLrut1NYWl5ZXSuulzY2t7Z3yrt7DyZONeM+i2WsmyE1XArFfRQoeTPRnEah5I1weD3xG49cGxGrexwlPIhoX4meYBStdPfUOeuUK27VnYIsEi8nFchR75S/2t2YpRFXyCQ1puW5CQYZ1SiY5ONSOzU8oWxI+7xlqaIRN0E2PXVMjqzSJb1Y21JIpurviYxGxoyi0HZGFAdm3puI/3mtFHsXQSZUkiJXbLaol0qCMZn8TbpCc4ZyZAllWthbCRtQTRnadEo2BG/+5UXin1Qvq97taaV2ladRhAM4hGPw4BxqcAN18IFBH57hFd4c6bw4787HrLXg5DP78AfO5w9/0I11</latexit>x7<latexit sha1_base64="xr2zOw0r7SeNZOt9pH3bMo+S868=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEqF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrzwMy6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs+pl1bs9r9Sv8jSKcATHcAoe1KAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGBU412</latexit><latexit sha1_base64="xr2zOw0r7SeNZOt9pH3bMo+S868=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEqF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrzwMy6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs+pl1bs9r9Sv8jSKcATHcAoe1KAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGBU412</latexit><latexit sha1_base64="xr2zOw0r7SeNZOt9pH3bMo+S868=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEqF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrzwMy6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs+pl1bs9r9Sv8jSKcATHcAoe1KAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGBU412</latexit><latexit sha1_base64="xr2zOw0r7SeNZOt9pH3bMo+S868=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEqF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrzwMy6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs+pl1bs9r9Sv8jSKcATHcAoe1KAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGBU412</latexit>x8<latexit sha1_base64="cabqADFkBUYEH94i1d8A0k5ARl4=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEsF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJqz5GZdJalCy+aIwFcTEZPo36XOFzIixJZQpbm8lbEgVZcamU7IheIsvL5PmWfWy6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGC1o13</latexit><latexit sha1_base64="cabqADFkBUYEH94i1d8A0k5ARl4=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEsF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJqz5GZdJalCy+aIwFcTEZPo36XOFzIixJZQpbm8lbEgVZcamU7IheIsvL5PmWfWy6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGC1o13</latexit><latexit sha1_base64="cabqADFkBUYEH94i1d8A0k5ARl4=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEsF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJqz5GZdJalCy+aIwFcTEZPo36XOFzIixJZQpbm8lbEgVZcamU7IheIsvL5PmWfWy6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGC1o13</latexit><latexit sha1_base64="cabqADFkBUYEH94i1d8A0k5ARl4=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEsF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJqz5GZdJalCy+aIwFcTEZPo36XOFzIixJZQpbm8lbEgVZcamU7IheIsvL5PmWfWy6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGC1o13</latexit>x9<latexit sha1_base64="hbOGwTOC+VfyB0dfnXQrvMdcTYQ=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0F6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrz0My6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs2qt6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGEWY14</latexit><latexit sha1_base64="hbOGwTOC+VfyB0dfnXQrvMdcTYQ=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0F6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrz0My6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs2qt6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGEWY14</latexit><latexit sha1_base64="hbOGwTOC+VfyB0dfnXQrvMdcTYQ=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0F6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrz0My6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs2qt6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGEWY14</latexit><latexit sha1_base64="hbOGwTOC+VfyB0dfnXQrvMdcTYQ=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0F6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrz0My6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs2qt6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGEWY14</latexit>x10<latexit sha1_base64="O8pdAiVJGhj7hsQ8FGeQL21VAlI=">AAAB7HicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUC9S8OKxgmkLbSib7aZdu9kNuxuxhP4HLx5UvPqDvPlv3LQ5aOuDgcd7M8zMCxPOtHHdb6e0srq2vlHerGxt7+zuVfcPWlqmilCfSC5VJ8Saciaob5jhtJMoiuOQ03Y4vsn99iNVmklxbyYJDWI8FCxiBBsrtZ76medO+9WaW3dnQMvEK0gNCjT71a/eQJI0psIQjrXuem5iggwrwwin00ov1TTBZIyHtGupwDHVQTa7dopOrDJAkVS2hEEz9fdEhmOtJ3FoO2NsRnrRy8X/vG5qossgYyJJDRVkvihKOTIS5a+jAVOUGD6xBBPF7K2IjLDCxNiAKjYEb/HlZeKf1a/q3t15rXFdpFGGIziGU/DgAhpwC03wgcADPMMrvDnSeXHenY95a8kpZg7hD5zPH6sajrY=</latexit><latexit sha1_base64="O8pdAiVJGhj7hsQ8FGeQL21VAlI=">AAAB7HicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUC9S8OKxgmkLbSib7aZdu9kNuxuxhP4HLx5UvPqDvPlv3LQ5aOuDgcd7M8zMCxPOtHHdb6e0srq2vlHerGxt7+zuVfcPWlqmilCfSC5VJ8Saciaob5jhtJMoiuOQ03Y4vsn99iNVmklxbyYJDWI8FCxiBBsrtZ76medO+9WaW3dnQMvEK0gNCjT71a/eQJI0psIQjrXuem5iggwrwwin00ov1TTBZIyHtGupwDHVQTa7dopOrDJAkVS2hEEz9fdEhmOtJ3FoO2NsRnrRy8X/vG5qossgYyJJDRVkvihKOTIS5a+jAVOUGD6xBBPF7K2IjLDCxNiAKjYEb/HlZeKf1a/q3t15rXFdpFGGIziGU/DgAhpwC03wgcADPMMrvDnSeXHenY95a8kpZg7hD5zPH6sajrY=</latexit><latexit sha1_base64="O8pdAiVJGhj7hsQ8FGeQL21VAlI=">AAAB7HicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUC9S8OKxgmkLbSib7aZdu9kNuxuxhP4HLx5UvPqDvPlv3LQ5aOuDgcd7M8zMCxPOtHHdb6e0srq2vlHerGxt7+zuVfcPWlqmilCfSC5VJ8Saciaob5jhtJMoiuOQ03Y4vsn99iNVmklxbyYJDWI8FCxiBBsrtZ76medO+9WaW3dnQMvEK0gNCjT71a/eQJI0psIQjrXuem5iggwrwwin00ov1TTBZIyHtGupwDHVQTa7dopOrDJAkVS2hEEz9fdEhmOtJ3FoO2NsRnrRy8X/vG5qossgYyJJDRVkvihKOTIS5a+jAVOUGD6xBBPF7K2IjLDCxNiAKjYEb/HlZeKf1a/q3t15rXFdpFGGIziGU/DgAhpwC03wgcADPMMrvDnSeXHenY95a8kpZg7hD5zPH6sajrY=</latexit><latexit sha1_base64="O8pdAiVJGhj7hsQ8FGeQL21VAlI=">AAAB7HicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUC9S8OKxgmkLbSib7aZdu9kNuxuxhP4HLx5UvPqDvPlv3LQ5aOuDgcd7M8zMCxPOtHHdb6e0srq2vlHerGxt7+zuVfcPWlqmilCfSC5VJ8Saciaob5jhtJMoiuOQ03Y4vsn99iNVmklxbyYJDWI8FCxiBBsrtZ76medO+9WaW3dnQMvEK0gNCjT71a/eQJI0psIQjrXuem5iggwrwwin00ov1TTBZIyHtGupwDHVQTa7dopOrDJAkVS2hEEz9fdEhmOtJ3FoO2NsRnrRy8X/vG5qossgYyJJDRVkvihKOTIS5a+jAVOUGD6xBBPF7K2IjLDCxNiAKjYEb/HlZeKf1a/q3t15rXFdpFGGIziGU/DgAhpwC03wgcADPMMrvDnSeXHenY95a8kpZg7hD5zPH6sajrY=</latexit>v2<latexit sha1_base64="T60DwgH3k07BccSCPiV2D+GnOgE=">AAAB8nicbVBNSwMxFHzrZ61fVY9egkXwVHaLoF6k4MVjBdcWukvJptk2NJsNSbZQlv4NLx5UvPprvPlvzLZ70NaBwDDzHm8ykeRMG9f9dtbWNza3tis71d29/YPD2tHxk04zRahPUp6qboQ15UxQ3zDDaVcqipOI0040viv8zoQqzVLxaKaShgkeChYzgo2VgiDBZhTF+WTWb/ZrdbfhzoFWiVeSOpRo92tfwSAlWUKFIRxr3fNcacIcK8MIp7NqkGkqMRnjIe1ZKnBCdZjPM8/QuVUGKE6VfcKgufp7I8eJ1tMkspNFRr3sFeJ/Xi8z8XWYMyEzQwVZHIozjkyKigLQgClKDJ9agoliNisiI6wwMbamqi3BW/7yKvGbjZuG93BZb92WbVTgFM7gAjy4ghbcQxt8ICDhGV7hzcmcF+fd+ViMrjnlzgn8gfP5A5GZkY8=</latexit><latexit sha1_base64="T60DwgH3k07BccSCPiV2D+GnOgE=">AAAB8nicbVBNSwMxFHzrZ61fVY9egkXwVHaLoF6k4MVjBdcWukvJptk2NJsNSbZQlv4NLx5UvPprvPlvzLZ70NaBwDDzHm8ykeRMG9f9dtbWNza3tis71d29/YPD2tHxk04zRahPUp6qboQ15UxQ3zDDaVcqipOI0040viv8zoQqzVLxaKaShgkeChYzgo2VgiDBZhTF+WTWb/ZrdbfhzoFWiVeSOpRo92tfwSAlWUKFIRxr3fNcacIcK8MIp7NqkGkqMRnjIe1ZKnBCdZjPM8/QuVUGKE6VfcKgufp7I8eJ1tMkspNFRr3sFeJ/Xi8z8XWYMyEzQwVZHIozjkyKigLQgClKDJ9agoliNisiI6wwMbamqi3BW/7yKvGbjZuG93BZb92WbVTgFM7gAjy4ghbcQxt8ICDhGV7hzcmcF+fd+ViMrjnlzgn8gfP5A5GZkY8=</latexit><latexit sha1_base64="T60DwgH3k07BccSCPiV2D+GnOgE=">AAAB8nicbVBNSwMxFHzrZ61fVY9egkXwVHaLoF6k4MVjBdcWukvJptk2NJsNSbZQlv4NLx5UvPprvPlvzLZ70NaBwDDzHm8ykeRMG9f9dtbWNza3tis71d29/YPD2tHxk04zRahPUp6qboQ15UxQ3zDDaVcqipOI0040viv8zoQqzVLxaKaShgkeChYzgo2VgiDBZhTF+WTWb/ZrdbfhzoFWiVeSOpRo92tfwSAlWUKFIRxr3fNcacIcK8MIp7NqkGkqMRnjIe1ZKnBCdZjPM8/QuVUGKE6VfcKgufp7I8eJ1tMkspNFRr3sFeJ/Xi8z8XWYMyEzQwVZHIozjkyKigLQgClKDJ9agoliNisiI6wwMbamqi3BW/7yKvGbjZuG93BZb92WbVTgFM7gAjy4ghbcQxt8ICDhGV7hzcmcF+fd+ViMrjnlzgn8gfP5A5GZkY8=</latexit><latexit sha1_base64="T60DwgH3k07BccSCPiV2D+GnOgE=">AAAB8nicbVBNSwMxFHzrZ61fVY9egkXwVHaLoF6k4MVjBdcWukvJptk2NJsNSbZQlv4NLx5UvPprvPlvzLZ70NaBwDDzHm8ykeRMG9f9dtbWNza3tis71d29/YPD2tHxk04zRahPUp6qboQ15UxQ3zDDaVcqipOI0040viv8zoQqzVLxaKaShgkeChYzgo2VgiDBZhTF+WTWb/ZrdbfhzoFWiVeSOpRo92tfwSAlWUKFIRxr3fNcacIcK8MIp7NqkGkqMRnjIe1ZKnBCdZjPM8/QuVUGKE6VfcKgufp7I8eJ1tMkspNFRr3sFeJ/Xi8z8XWYMyEzQwVZHIozjkyKigLQgClKDJ9agoliNisiI6wwMbamqi3BW/7yKvGbjZuG93BZb92WbVTgFM7gAjy4ghbcQxt8ICDhGV7hzcmcF+fd+ViMrjnlzgn8gfP5A5GZkY8=</latexit>v5<latexit sha1_base64="ULtbZHVdN+zXq86PzVwq3Dw93bc=">AAAB8nicbVDLSsNAFL3xWeur6tLNYBFclUQUdSMFNy4rGFtoQplMJ+3QySTMo1BCf8ONCxW3fo07/8ZJm4W2Hhg4nHMv98yJMs6Udt1vZ2V1bX1js7JV3d7Z3duvHRw+qdRIQn2S8lR2IqwoZ4L6mmlOO5mkOIk4bUeju8Jvj6lULBWPepLRMMEDwWJGsLZSECRYD6M4H097l71a3W24M6Bl4pWkDiVavdpX0E+JSajQhGOlup6b6TDHUjPC6bQaGEUzTEZ4QLuWCpxQFeazzFN0apU+ilNpn9Bopv7eyHGi1CSJ7GSRUS16hfif1zU6vg5zJjKjqSDzQ7HhSKeoKAD1maRE84klmEhmsyIyxBITbWuq2hK8xS8vE/+8cdPwHi7qzduyjQocwwmcgQdX0IR7aIEPBDJ4hld4c4zz4rw7H/PRFafcOYI/cD5/AJYikZI=</latexit><latexit sha1_base64="ULtbZHVdN+zXq86PzVwq3Dw93bc=">AAAB8nicbVDLSsNAFL3xWeur6tLNYBFclUQUdSMFNy4rGFtoQplMJ+3QySTMo1BCf8ONCxW3fo07/8ZJm4W2Hhg4nHMv98yJMs6Udt1vZ2V1bX1js7JV3d7Z3duvHRw+qdRIQn2S8lR2IqwoZ4L6mmlOO5mkOIk4bUeju8Jvj6lULBWPepLRMMEDwWJGsLZSECRYD6M4H097l71a3W24M6Bl4pWkDiVavdpX0E+JSajQhGOlup6b6TDHUjPC6bQaGEUzTEZ4QLuWCpxQFeazzFN0apU+ilNpn9Bopv7eyHGi1CSJ7GSRUS16hfif1zU6vg5zJjKjqSDzQ7HhSKeoKAD1maRE84klmEhmsyIyxBITbWuq2hK8xS8vE/+8cdPwHi7qzduyjQocwwmcgQdX0IR7aIEPBDJ4hld4c4zz4rw7H/PRFafcOYI/cD5/AJYikZI=</latexit><latexit sha1_base64="ULtbZHVdN+zXq86PzVwq3Dw93bc=">AAAB8nicbVDLSsNAFL3xWeur6tLNYBFclUQUdSMFNy4rGFtoQplMJ+3QySTMo1BCf8ONCxW3fo07/8ZJm4W2Hhg4nHMv98yJMs6Udt1vZ2V1bX1js7JV3d7Z3duvHRw+qdRIQn2S8lR2IqwoZ4L6mmlOO5mkOIk4bUeju8Jvj6lULBWPepLRMMEDwWJGsLZSECRYD6M4H097l71a3W24M6Bl4pWkDiVavdpX0E+JSajQhGOlup6b6TDHUjPC6bQaGEUzTEZ4QLuWCpxQFeazzFN0apU+ilNpn9Bopv7eyHGi1CSJ7GSRUS16hfif1zU6vg5zJjKjqSDzQ7HhSKeoKAD1maRE84klmEhmsyIyxBITbWuq2hK8xS8vE/+8cdPwHi7qzduyjQocwwmcgQdX0IR7aIEPBDJ4hld4c4zz4rw7H/PRFafcOYI/cD5/AJYikZI=</latexit><latexit sha1_base64="ULtbZHVdN+zXq86PzVwq3Dw93bc=">AAAB8nicbVDLSsNAFL3xWeur6tLNYBFclUQUdSMFNy4rGFtoQplMJ+3QySTMo1BCf8ONCxW3fo07/8ZJm4W2Hhg4nHMv98yJMs6Udt1vZ2V1bX1js7JV3d7Z3duvHRw+qdRIQn2S8lR2IqwoZ4L6mmlOO5mkOIk4bUeju8Jvj6lULBWPepLRMMEDwWJGsLZSECRYD6M4H097l71a3W24M6Bl4pWkDiVavdpX0E+JSajQhGOlup6b6TDHUjPC6bQaGEUzTEZ4QLuWCpxQFeazzFN0apU+ilNpn9Bopv7eyHGi1CSJ7GSRUS16hfif1zU6vg5zJjKjqSDzQ7HhSKeoKAD1maRE84klmEhmsyIyxBITbWuq2hK8xS8vE/+8cdPwHi7qzduyjQocwwmcgQdX0IR7aIEPBDJ4hld4c4zz4rw7H/PRFafcOYI/cD5/AJYikZI=</latexit>x2<latexit sha1_base64="bAAs6QPjEwIHvdcIdyKCEckteLU=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mKoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4tepl1bs9q9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF5xI1x</latexit><latexit sha1_base64="bAAs6QPjEwIHvdcIdyKCEckteLU=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mKoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4tepl1bs9q9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF5xI1x</latexit><latexit sha1_base64="bAAs6QPjEwIHvdcIdyKCEckteLU=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mKoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4tepl1bs9q9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF5xI1x</latexit><latexit sha1_base64="bAAs6QPjEwIHvdcIdyKCEckteLU=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0mKoF6k4MVjRWMLbSib7bRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmhYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFUOfxSJWrZBqFFyib7gR2EoU0igU2AxH11O/+YhK81jem3GCQUQHkvc5o8ZKd0/dWrdccavuDGSZeDmpQI5Gt/zV6cUsjVAaJqjWbc9NTJBRZTgTOCl1Uo0JZSM6wLalkkaog2x26oScWKVH+rGyJQ2Zqb8nMhppPY5C2xlRM9SL3lT8z2unpn8RZFwmqUHJ5ov6qSAmJtO/SY8rZEaMLaFMcXsrYUOqKDM2nZINwVt8eZn4tepl1bs9q9Sv8jSKcATHcAoenEMdbqABPjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AF5xI1x</latexit>·<latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit>v7<latexit sha1_base64="9hdmHh3d0lkGpFb3H1XzoRmNghQ=">AAAB8nicbVBNSwMxFHxbv2r9qnr0EiyCp7IrQvUiBS8eK7i20F1KNs22odlsSLKFsvRvePGg4tVf481/Y7bdg1YHAsPMe7zJRJIzbVz3y6msrW9sblW3azu7e/sH9cOjR51milCfpDxVvQhrypmgvmGG055UFCcRp91oclv43SlVmqXiwcwkDRM8EixmBBsrBUGCzTiK8+l80BrUG27TXQD9JV5JGlCiM6h/BsOUZAkVhnCsdd9zpQlzrAwjnM5rQaapxGSCR7RvqcAJ1WG+yDxHZ1YZojhV9gmDFurPjRwnWs+SyE4WGfWqV4j/ef3MxFdhzoTMDBVkeSjOODIpKgpAQ6YoMXxmCSaK2ayIjLHCxNiaarYEb/XLf4l/0bxueveXjfZN2UYVTuAUzsGDFrThDjrgAwEJT/ACr07mPDtvzvtytOKUO8fwC87HN5kokZQ=</latexit><latexit sha1_base64="9hdmHh3d0lkGpFb3H1XzoRmNghQ=">AAAB8nicbVBNSwMxFHxbv2r9qnr0EiyCp7IrQvUiBS8eK7i20F1KNs22odlsSLKFsvRvePGg4tVf481/Y7bdg1YHAsPMe7zJRJIzbVz3y6msrW9sblW3azu7e/sH9cOjR51milCfpDxVvQhrypmgvmGG055UFCcRp91oclv43SlVmqXiwcwkDRM8EixmBBsrBUGCzTiK8+l80BrUG27TXQD9JV5JGlCiM6h/BsOUZAkVhnCsdd9zpQlzrAwjnM5rQaapxGSCR7RvqcAJ1WG+yDxHZ1YZojhV9gmDFurPjRwnWs+SyE4WGfWqV4j/ef3MxFdhzoTMDBVkeSjOODIpKgpAQ6YoMXxmCSaK2ayIjLHCxNiaarYEb/XLf4l/0bxueveXjfZN2UYVTuAUzsGDFrThDjrgAwEJT/ACr07mPDtvzvtytOKUO8fwC87HN5kokZQ=</latexit><latexit sha1_base64="9hdmHh3d0lkGpFb3H1XzoRmNghQ=">AAAB8nicbVBNSwMxFHxbv2r9qnr0EiyCp7IrQvUiBS8eK7i20F1KNs22odlsSLKFsvRvePGg4tVf481/Y7bdg1YHAsPMe7zJRJIzbVz3y6msrW9sblW3azu7e/sH9cOjR51milCfpDxVvQhrypmgvmGG055UFCcRp91oclv43SlVmqXiwcwkDRM8EixmBBsrBUGCzTiK8+l80BrUG27TXQD9JV5JGlCiM6h/BsOUZAkVhnCsdd9zpQlzrAwjnM5rQaapxGSCR7RvqcAJ1WG+yDxHZ1YZojhV9gmDFurPjRwnWs+SyE4WGfWqV4j/ef3MxFdhzoTMDBVkeSjOODIpKgpAQ6YoMXxmCSaK2ayIjLHCxNiaarYEb/XLf4l/0bxueveXjfZN2UYVTuAUzsGDFrThDjrgAwEJT/ACr07mPDtvzvtytOKUO8fwC87HN5kokZQ=</latexit><latexit sha1_base64="9hdmHh3d0lkGpFb3H1XzoRmNghQ=">AAAB8nicbVBNSwMxFHxbv2r9qnr0EiyCp7IrQvUiBS8eK7i20F1KNs22odlsSLKFsvRvePGg4tVf481/Y7bdg1YHAsPMe7zJRJIzbVz3y6msrW9sblW3azu7e/sH9cOjR51milCfpDxVvQhrypmgvmGG055UFCcRp91oclv43SlVmqXiwcwkDRM8EixmBBsrBUGCzTiK8+l80BrUG27TXQD9JV5JGlCiM6h/BsOUZAkVhnCsdd9zpQlzrAwjnM5rQaapxGSCR7RvqcAJ1WG+yDxHZ1YZojhV9gmDFurPjRwnWs+SyE4WGfWqV4j/ef3MxFdhzoTMDBVkeSjOODIpKgpAQ6YoMXxmCSaK2ayIjLHCxNiaarYEb/XLf4l/0bxueveXjfZN2UYVTuAUzsGDFrThDjrgAwEJT/ACr07mPDtvzvtytOKUO8fwC87HN5kokZQ=</latexit>v9<latexit sha1_base64="9Qx83a80Z9PdBNYTI6Y91mK+UGc=">AAAB8nicbVBNSwMxFHxbv2r9qnr0EiyCp7IrgvYiBS8eK7i20F1KNs22odlsSLKFsvRvePGg4tVf481/Y7bdg1YHAsPMe7zJRJIzbVz3y6msrW9sblW3azu7e/sH9cOjR51milCfpDxVvQhrypmgvmGG055UFCcRp91oclv43SlVmqXiwcwkDRM8EixmBBsrBUGCzTiK8+l80BrUG27TXQD9JV5JGlCiM6h/BsOUZAkVhnCsdd9zpQlzrAwjnM5rQaapxGSCR7RvqcAJ1WG+yDxHZ1YZojhV9gmDFurPjRwnWs+SyE4WGfWqV4j/ef3MxNdhzoTMDBVkeSjOODIpKgpAQ6YoMXxmCSaK2ayIjLHCxNiaarYEb/XLf4l/0Ww1vfvLRvumbKMKJ3AK5+DBFbThDjrgAwEJT/ACr07mPDtvzvtytOKUO8fwC87HN5wukZY=</latexit><latexit sha1_base64="9Qx83a80Z9PdBNYTI6Y91mK+UGc=">AAAB8nicbVBNSwMxFHxbv2r9qnr0EiyCp7IrgvYiBS8eK7i20F1KNs22odlsSLKFsvRvePGg4tVf481/Y7bdg1YHAsPMe7zJRJIzbVz3y6msrW9sblW3azu7e/sH9cOjR51milCfpDxVvQhrypmgvmGG055UFCcRp91oclv43SlVmqXiwcwkDRM8EixmBBsrBUGCzTiK8+l80BrUG27TXQD9JV5JGlCiM6h/BsOUZAkVhnCsdd9zpQlzrAwjnM5rQaapxGSCR7RvqcAJ1WG+yDxHZ1YZojhV9gmDFurPjRwnWs+SyE4WGfWqV4j/ef3MxNdhzoTMDBVkeSjOODIpKgpAQ6YoMXxmCSaK2ayIjLHCxNiaarYEb/XLf4l/0Ww1vfvLRvumbKMKJ3AK5+DBFbThDjrgAwEJT/ACr07mPDtvzvtytOKUO8fwC87HN5wukZY=</latexit><latexit sha1_base64="9Qx83a80Z9PdBNYTI6Y91mK+UGc=">AAAB8nicbVBNSwMxFHxbv2r9qnr0EiyCp7IrgvYiBS8eK7i20F1KNs22odlsSLKFsvRvePGg4tVf481/Y7bdg1YHAsPMe7zJRJIzbVz3y6msrW9sblW3azu7e/sH9cOjR51milCfpDxVvQhrypmgvmGG055UFCcRp91oclv43SlVmqXiwcwkDRM8EixmBBsrBUGCzTiK8+l80BrUG27TXQD9JV5JGlCiM6h/BsOUZAkVhnCsdd9zpQlzrAwjnM5rQaapxGSCR7RvqcAJ1WG+yDxHZ1YZojhV9gmDFurPjRwnWs+SyE4WGfWqV4j/ef3MxNdhzoTMDBVkeSjOODIpKgpAQ6YoMXxmCSaK2ayIjLHCxNiaarYEb/XLf4l/0Ww1vfvLRvumbKMKJ3AK5+DBFbThDjrgAwEJT/ACr07mPDtvzvtytOKUO8fwC87HN5wukZY=</latexit><latexit sha1_base64="9Qx83a80Z9PdBNYTI6Y91mK+UGc=">AAAB8nicbVBNSwMxFHxbv2r9qnr0EiyCp7IrgvYiBS8eK7i20F1KNs22odlsSLKFsvRvePGg4tVf481/Y7bdg1YHAsPMe7zJRJIzbVz3y6msrW9sblW3azu7e/sH9cOjR51milCfpDxVvQhrypmgvmGG055UFCcRp91oclv43SlVmqXiwcwkDRM8EixmBBsrBUGCzTiK8+l80BrUG27TXQD9JV5JGlCiM6h/BsOUZAkVhnCsdd9zpQlzrAwjnM5rQaapxGSCR7RvqcAJ1WG+yDxHZ1YZojhV9gmDFurPjRwnWs+SyE4WGfWqV4j/ef3MxNdhzoTMDBVkeSjOODIpKgpAQ6YoMXxmCSaK2ayIjLHCxNiaarYEb/XLf4l/0Ww1vfvLRvumbKMKJ3AK5+DBFbThDjrgAwEJT/ACr07mPDtvzvtytOKUO8fwC87HN5wukZY=</latexit>x5<latexit sha1_base64="q4sq9UNBJrtUuGqBRMaOlCa0bbE=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUS9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11zjrlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Wqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN+TY10</latexit><latexit sha1_base64="q4sq9UNBJrtUuGqBRMaOlCa0bbE=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUS9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11zjrlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Wqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN+TY10</latexit><latexit sha1_base64="q4sq9UNBJrtUuGqBRMaOlCa0bbE=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUS9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11zjrlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Wqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN+TY10</latexit><latexit sha1_base64="q4sq9UNBJrtUuGqBRMaOlCa0bbE=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUS9S8OKxorGFNpTNdtsu3WzC7kQsoT/BiwcVr/4jb/4bt20O2vpg4PHeDDPzwkQKg6777RSWlldW14rrpY3Nre2d8u7eg4lTzbjPYhnrZkgNl0JxHwVK3kw0p1EoeSMcXk/8xiPXRsTqHkcJDyLaV6InGEUr3T11zjrlilt1pyCLxMtJBXLUO+WvdjdmacQVMkmNaXlugkFGNQom+bjUTg1PKBvSPm9ZqmjETZBNTx2TI6t0SS/WthSSqfp7IqORMaMotJ0RxYGZ9ybif14rxd5FkAmVpMgVmy3qpZJgTCZ/k67QnKEcWUKZFvZWwgZUU4Y2nZINwZt/eZH4J9XLqnd7Wqld5WkU4QAO4Rg8OIca3EAdfGDQh2d4hTdHOi/Ou/Mxay04+cw+/IHz+QN+TY10</latexit>x7<latexit sha1_base64="xr2zOw0r7SeNZOt9pH3bMo+S868=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEqF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrzwMy6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs+pl1bs9r9Sv8jSKcATHcAoe1KAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGBU412</latexit><latexit sha1_base64="xr2zOw0r7SeNZOt9pH3bMo+S868=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEqF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrzwMy6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs+pl1bs9r9Sv8jSKcATHcAoe1KAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGBU412</latexit><latexit sha1_base64="xr2zOw0r7SeNZOt9pH3bMo+S868=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEqF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrzwMy6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs+pl1bs9r9Sv8jSKcATHcAoe1KAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGBU412</latexit><latexit sha1_base64="xr2zOw0r7SeNZOt9pH3bMo+S868=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEqF6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrzwMy6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs+pl1bs9r9Sv8jSKcATHcAoe1KAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGBU412</latexit>x9<latexit sha1_base64="hbOGwTOC+VfyB0dfnXQrvMdcTYQ=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0F6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrz0My6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs2qt6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGEWY14</latexit><latexit sha1_base64="hbOGwTOC+VfyB0dfnXQrvMdcTYQ=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0F6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrz0My6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs2qt6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGEWY14</latexit><latexit sha1_base64="hbOGwTOC+VfyB0dfnXQrvMdcTYQ=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0F6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrz0My6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs2qt6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGEWY14</latexit><latexit sha1_base64="hbOGwTOC+VfyB0dfnXQrvMdcTYQ=">AAAB6XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE0F6k4MVjRWsLbSib7aRdutmE3Y1YQn+CFw8qXv1H3vw3btsctPXBwOO9GWbmBYng2rjut1NYWV1b3yhulra2d3b3yvsHDzpOFcMmi0Ws2gHVKLjEpuFGYDtRSKNAYCsYXU/91iMqzWN5b8YJ+hEdSB5yRo2V7p56tV654lbdGcgy8XJSgRyNXvmr249ZGqE0TFCtO56bGD+jynAmcFLqphoTykZ0gB1LJY1Q+9ns1Ak5sUqfhLGyJQ2Zqb8nMhppPY4C2xlRM9SL3lT8z+ukJrz0My6T1KBk80VhKoiJyfRv0ucKmRFjSyhT3N5K2JAqyoxNp2RD8BZfXibNs2qt6t2eV+pXeRpFOIJjOAUPLqAON9CAJjAYwDO8wpsjnBfn3fmYtxacfOYQ/sD5/AGEWY14</latexit>·<latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit>·<latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit>·<latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit><latexit sha1_base64="NFy9vaHFUXs/ro62wDCFHJXbAyY=">AAAB63icbVBNS8NAEJ3Ur1q/qh69BIvgqSQiqBcpePFYwdhCG8pms2mXbnbD7kQoob/BiwcVr/4hb/4bt20OWn0w8Hhvhpl5USa4Qc/7ciorq2vrG9XN2tb2zu5eff/gwahcUxZQJZTuRsQwwSULkKNg3UwzkkaCdaLxzczvPDJtuJL3OMlYmJKh5AmnBK0U9GmscFBveE1vDvcv8UvSgBLtQf2zHyuap0wiFcSYnu9lGBZEI6eCTWv93LCM0DEZsp6lkqTMhMX82Kl7YpXYTZS2JdGdqz8nCpIaM0kj25kSHJllbyb+5/VyTC7DgsssRybpYlGSCxeVO/vcjblmFMXEEkI1t7e6dEQ0oWjzqdkQ/OWX/5LgrHnV9O/OG63rMo0qHMExnIIPF9CCW2hDABQ4PMELvDrSeXbenPdFa8UpZw7hF5yPb0SqjoI=</latexit>X<latexit sha1_base64="tLkR+LmelIiyJqGsAj36vESKz7E=">AAAB7XicbVA9SwNBEJ2LXzF+RS1tFoNgFe5EUBsJ2FhG8EwgOcLeZpIs2d07dveEcORH2Fio2Pp/7Pw3bpIrNPpg4PHeDDPz4lRwY33/yyutrK6tb5Q3K1vbO7t71f2DB5NkmmHIEpHodkwNCq4wtNwKbKcaqYwFtuLxzcxvPaI2PFH3dpJiJOlQ8QFn1Dqp1TWZ7OXTXrXm1/05yF8SFKQGBZq96me3n7BMorJMUGM6gZ/aKKfaciZwWulmBlPKxnSIHUcVlWiifH7ulJw4pU8GiXalLJmrPydyKo2ZyNh1SmpHZtmbif95ncwOLqOcqzSzqNhi0SATxCZk9jvpc43MiokjlGnubiVsRDVl1iVUcSEEyy//JeFZ/aoe3J3XGtdFGmU4gmM4hQAuoAG30IQQGIzhCV7g1Uu9Z+/Ne1+0lrxi5hB+wfv4BhmRj5g=</latexit><latexit sha1_base64="tLkR+LmelIiyJqGsAj36vESKz7E=">AAAB7XicbVA9SwNBEJ2LXzF+RS1tFoNgFe5EUBsJ2FhG8EwgOcLeZpIs2d07dveEcORH2Fio2Pp/7Pw3bpIrNPpg4PHeDDPz4lRwY33/yyutrK6tb5Q3K1vbO7t71f2DB5NkmmHIEpHodkwNCq4wtNwKbKcaqYwFtuLxzcxvPaI2PFH3dpJiJOlQ8QFn1Dqp1TWZ7OXTXrXm1/05yF8SFKQGBZq96me3n7BMorJMUGM6gZ/aKKfaciZwWulmBlPKxnSIHUcVlWiifH7ulJw4pU8GiXalLJmrPydyKo2ZyNh1SmpHZtmbif95ncwOLqOcqzSzqNhi0SATxCZk9jvpc43MiokjlGnubiVsRDVl1iVUcSEEyy//JeFZ/aoe3J3XGtdFGmU4gmM4hQAuoAG30IQQGIzhCV7g1Uu9Z+/Ne1+0lrxi5hB+wfv4BhmRj5g=</latexit><latexit sha1_base64="tLkR+LmelIiyJqGsAj36vESKz7E=">AAAB7XicbVA9SwNBEJ2LXzF+RS1tFoNgFe5EUBsJ2FhG8EwgOcLeZpIs2d07dveEcORH2Fio2Pp/7Pw3bpIrNPpg4PHeDDPz4lRwY33/yyutrK6tb5Q3K1vbO7t71f2DB5NkmmHIEpHodkwNCq4wtNwKbKcaqYwFtuLxzcxvPaI2PFH3dpJiJOlQ8QFn1Dqp1TWZ7OXTXrXm1/05yF8SFKQGBZq96me3n7BMorJMUGM6gZ/aKKfaciZwWulmBlPKxnSIHUcVlWiifH7ulJw4pU8GiXalLJmrPydyKo2ZyNh1SmpHZtmbif95ncwOLqOcqzSzqNhi0SATxCZk9jvpc43MiokjlGnubiVsRDVl1iVUcSEEyy//JeFZ/aoe3J3XGtdFGmU4gmM4hQAuoAG30IQQGIzhCV7g1Uu9Z+/Ne1+0lrxi5hB+wfv4BhmRj5g=</latexit><latexit sha1_base64="tLkR+LmelIiyJqGsAj36vESKz7E=">AAAB7XicbVA9SwNBEJ2LXzF+RS1tFoNgFe5EUBsJ2FhG8EwgOcLeZpIs2d07dveEcORH2Fio2Pp/7Pw3bpIrNPpg4PHeDDPz4lRwY33/yyutrK6tb5Q3K1vbO7t71f2DB5NkmmHIEpHodkwNCq4wtNwKbKcaqYwFtuLxzcxvPaI2PFH3dpJiJOlQ8QFn1Dqp1TWZ7OXTXrXm1/05yF8SFKQGBZq96me3n7BMorJMUGM6gZ/aKKfaciZwWulmBlPKxnSIHUcVlWiifH7ulJw4pU8GiXalLJmrPydyKo2ZyNh1SmpHZtmbif95ncwOLqOcqzSzqNhi0SATxCZk9jvpc43MiokjlGnubiVsRDVl1iVUcSEEyy//JeFZ/aoe3J3XGtdFGmU4gmM4hQAuoAG30IQQGIzhCV7g1Uu9Z+/Ne1+0lrxi5hB+wfv4BhmRj5g=</latexit>ˆy<latexit sha1_base64="v7BKFnN3JyuKMVvFzyT42m97H98=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUG9FLx4rGFtoQ9lsN+3SzSbsToQQ+iO8eFDx6v/x5r9x2+ag1QcDj/dmmJkXplIYdN0vp7Kyura+Ud2sbW3v7O7V9w8eTJJpxn2WyER3Q2q4FIr7KFDybqo5jUPJO+HkZuZ3Hrk2IlH3mKc8iOlIiUgwilbq9McUi3w6qDfcpjsH+Uu8kjSgRHtQ/+wPE5bFXCGT1Jie56YYFFSjYJJPa/3M8JSyCR3xnqWKxtwExfzcKTmxypBEibalkMzVnxMFjY3J49B2xhTHZtmbif95vQyjy6AQKs2QK7ZYFGWSYEJmv5Oh0JyhzC2hTAt7K2FjqilDm1DNhuAtv/yX+GfNq6Z3d95oXZdpVOEIjuEUPLiAFtxCG3xgMIEneIFXJ3WenTfnfdFaccqZQ/gF5+MbHY+Png==</latexit><latexit sha1_base64="v7BKFnN3JyuKMVvFzyT42m97H98=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUG9FLx4rGFtoQ9lsN+3SzSbsToQQ+iO8eFDx6v/x5r9x2+ag1QcDj/dmmJkXplIYdN0vp7Kyura+Ud2sbW3v7O7V9w8eTJJpxn2WyER3Q2q4FIr7KFDybqo5jUPJO+HkZuZ3Hrk2IlH3mKc8iOlIiUgwilbq9McUi3w6qDfcpjsH+Uu8kjSgRHtQ/+wPE5bFXCGT1Jie56YYFFSjYJJPa/3M8JSyCR3xnqWKxtwExfzcKTmxypBEibalkMzVnxMFjY3J49B2xhTHZtmbif95vQyjy6AQKs2QK7ZYFGWSYEJmv5Oh0JyhzC2hTAt7K2FjqilDm1DNhuAtv/yX+GfNq6Z3d95oXZdpVOEIjuEUPLiAFtxCG3xgMIEneIFXJ3WenTfnfdFaccqZQ/gF5+MbHY+Png==</latexit><latexit sha1_base64="v7BKFnN3JyuKMVvFzyT42m97H98=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUG9FLx4rGFtoQ9lsN+3SzSbsToQQ+iO8eFDx6v/x5r9x2+ag1QcDj/dmmJkXplIYdN0vp7Kyura+Ud2sbW3v7O7V9w8eTJJpxn2WyER3Q2q4FIr7KFDybqo5jUPJO+HkZuZ3Hrk2IlH3mKc8iOlIiUgwilbq9McUi3w6qDfcpjsH+Uu8kjSgRHtQ/+wPE5bFXCGT1Jie56YYFFSjYJJPa/3M8JSyCR3xnqWKxtwExfzcKTmxypBEibalkMzVnxMFjY3J49B2xhTHZtmbif95vQyjy6AQKs2QK7ZYFGWSYEJmv5Oh0JyhzC2hTAt7K2FjqilDm1DNhuAtv/yX+GfNq6Z3d95oXZdpVOEIjuEUPLiAFtxCG3xgMIEneIFXJ3WenTfnfdFaccqZQ/gF5+MbHY+Png==</latexit><latexit sha1_base64="v7BKFnN3JyuKMVvFzyT42m97H98=">AAAB7XicbVBNS8NAEJ3Ur1q/qh69LBbBU0lEUG9FLx4rGFtoQ9lsN+3SzSbsToQQ+iO8eFDx6v/x5r9x2+ag1QcDj/dmmJkXplIYdN0vp7Kyura+Ud2sbW3v7O7V9w8eTJJpxn2WyER3Q2q4FIr7KFDybqo5jUPJO+HkZuZ3Hrk2IlH3mKc8iOlIiUgwilbq9McUi3w6qDfcpjsH+Uu8kjSgRHtQ/+wPE5bFXCGT1Jie56YYFFSjYJJPa/3M8JSyCR3xnqWKxtwExfzcKTmxypBEibalkMzVnxMFjY3J49B2xhTHZtmbif95vQyjy6AQKs2QK7ZYFGWSYEJmv5Oh0JyhzC2hTAt7K2FjqilDm1DNhuAtv/yX+GfNq6Z3d95oXZdpVOEIjuEUPLiAFtxCG3xgMIEneIFXJ3WenTfnfdFaccqZQ/gF5+MbHY+Png==</latexit>Table 2: Datasets for detection performance evaluation.

Table 4: AMD Test Results; Threshold = 0.5

# Malware

Dataset
DREBIN 5,560
24,553
AMD

# Clean files Total
11,160
5,600
41,306
16,753

Feature size
93,324
294,019

Table 3: DREBIN Test Results; Threshold = 0.5

Algorithm
Accuracy (%)
Precision (%)
Recall (%)
F1 (%)
FPR (%)

SVM NB-G NB-B NB-M MLP
99.05
90.42
92.69
99.24
86.35
93.87
99.60
99.14
93.65
99.19
92.51
93.76
1.07
22.36
8.69

93.53
90.39
99.56
94.75
15.04

86.24
81.35
99.32
89.44
32.36

FM
99.05
99.22
99.16
99.19
1.10

Algorithm
Accuracy (%)
Precision (%)
Recall (%)
F1 (%)
FPR (%)

SVM NB-G NB-B NB-M MLP
99.73
94.71
95.65
99.91
90.25
96.34
99.82
99.55
94.87
99.73
94.95
95.60
0.09
10.35
3.57

94.71
90.86
99.37
94.93
9.90

97.72
96.25
99.28
97.74
3.84

FM
99.46
100.00
98.92
99.46
0.00

Table 5: Out-of-Sample Training Times; H:MM:SS Format

Algorithm SVM
0:01:40
DREBIN
0:21:41
AMD

NB-G NB-B NB-M MLP
0:09:01
0:00:13
2:13:42
0:02:38

12ms
54ms

9ms
34ms

FM
0:00:35
0:02:40

4.2 Classifier Evaluation
We first evaluated our proposed FM-based method and compared
it with other existing baseline algorithms, including SVM4, which
is used in DREBIN [2] to achieve a detection rate of 93.9%, classical
machine learning algorithms such as Naive Bayes using Gaussian,
Bernoulli and Multinomial Kernels [37] and shallow, one-hidden
layer neural networks[28].5 In addition, we also sent all samples,
including malware samples, to the VirusTotal service and compared
it with commercial anti-virus engines.

The dataset was randomly split into training (80%) and testing
(20%) sets for both experiments in accordance with the pareto princi-
ple. All models were trained using stratified 5-fold cross validation
for hyper parameter tuning and then tested for performance eval-
uation. The hyperparameters turned for baseline algorithms and
our proposed method were trained and tested in the same manner.
Finally, we recorded the time it took to re-train the best model cho-
sen by cross-validation over the entire training set. With exception
to our FM, all models were training using Sci-kit Learn’s [25] API
while we used Polylearn [22] to train our FM.

Moreover, the metrics we utilized for performance evaluation
are listed in Table 1. Specifically, we focused on precision, recall, F1
and False Positive Rate (FPR). 6 The Factorization Machine, Multi-
Layer Perceptron and Naive Bayes models all produce probabilities
that a given sample is malware. If this probability was greater
than a certain threshold, 0.5 in this experiment, it was classified
as malware for the purposes of cross-validation and out-of-sample
test results.

4.2.1 Hyperparameter Specifications. The best hyperparameters
for each algorithm we used – except for Naive Bayes which had
no hyperparameters for cross validation to tune – are as follows:
SVM with a Logistic Kernel preferred a penalty of 1 and kernel
coefficient, γ of 5e-5 when the malware and benign classes were
weighted equally. The best MLP performance was found by updat-
ing the weights in accordance with the Adam [17] learning rule, the

4With a Logistic Kernel
5Throughout this paper, we use some abbreviations to denote these baseline algorithms
for figures and tables. In particular, the name of Algorithm “NB-Bernoulli” (NB-B)
refers to the Naive Bayes classifier using Bernoulli kernel, and the same for “NB-
Multinomial” (NB-M) and “NB-Gaussian” (NB-G).
6Note that in the literature, recall and false positive rate corresponds to malware
detection rate and false alarm rate for the detection system.

Figure 5: ROC curves for high-performing algorithms on
the DREBIN set.

Figure 6: ROC curves for high-performing algorithms on
the AMD set.

ReLU [21] activation function, with hidden layers that consisted of
150 and 200 neurons for the DREBIN and AMD sets, respectively
with a batch size of 200. For our FM models we found a value of k
= 10 to be the most optimal. Finally, both the MLP and FM models
were trained for 200 epochs.

4.2.2

Interpretation. Next, Tables 3, 4 and 5 illustrate the effec-
tiveness of our FM classifier with respect to SVM with a Logistic
Kernel and Gaussian Naive Bayes and especially an MLP. From the
first two figures it is clear that the most relevant algorithms are
the Mutli-Layer Perceptron and the Factorization Machine. Both
classifiers are neck-and-neck with each other; on the DREBIN set
the MLP edges out the FM int terms of accuracy with a score of

6

0.00.20.40.60.81.0FPR0.700.750.800.850.900.951.00TPRDREBIN ROC CurvesSVM Logistic (AUC = 0.991)FM (AUC = 1.000)MLP (AUC = 0.997)Naive Gaussian (AUC = 0.947)0.00.20.40.60.81.0FPR0.700.750.800.850.900.951.00TPRAMD ROC CurvesSVM Logistic (AUC = 0.980)FM (AUC = 0.999)MLP (AUC = 0.990)Naive Gaussian (AUC = 0.835)99.73% to 99.46%, however the FM achieved perfect precision and
false-positive scores of 100% and 0%, respectively. The situation is
even tighter when looking at the AMD set, with both classifiers
achieving matching accuracy and F1 scores of 99.05% and 99.19%,
again, respectively. ROC Curves, Figures 5 and 6 show that FMs
pulled ahead of MLPs slightly in terms of area-under-curve (AUC).
Our Factorization Machine pulled ahead of Support Vector Ma-
chines with a Logistic Kernel, verifying our assertion that interation
terms are important for revealing malicious behaviour patterns.
However, they also cast doubt on our additional assertion that the
large number of tunable, synaptic weights used by an MLP would
make it hard to train given the sparse data involved. As a universal
approximator [13, 30], MLPs used the same datasets to produce
top-notch results at the cost of taking much more time to train a
classifier.

Taking a look at Table 5, we can see that our Factorization Ma-
chines trained much faster than our single hidden-layer MLPs.
Specifically, the FM trained 15 times faster than the MLP on DREBIN
and 50 times faster on AMD. This advantage cannot be understated,
especially when we consider how much quicker the FM was to train
on the AMD set, which was more difficult across the board to get
an accuracy score above 99%. This emphasis is compounded by the
fact that AMD is newer, larger, more recent and therefore relevant
than the DREBIN data. Also, note that the MLPs used very basic
– wide and shallow – and that their training time would only be
increased with the additional parameters added by stacking more
layers. In short, when compared to Multi-Layer Perceptrons, Factor-
ization Machines trade universal approximation for second-order
interactions while striking a balance between time, accuracy, and
complexity.

4.3 Commercial Engines and Family Detection
We also compared the performance of our malware detection algo-
rithm with existing commercial Anti-Virus engines on VirusTotal
[31]. The critical point to mention is that all of the truly clean files
used in our experiments are actually labeled by these AV engines
using the rule described in subsection 4.1. Therefore, AV engines are
supposed to have a better false positive rate than their normal per-
formance. Tables 6 and 7 summarize the scanning results of the best
performing and popular commercial AV engines on VirusTotal,
such as Kaspersky, Cylance and McAfee on the DREBIN[2] and
AMD[36] sets.

To show our model’s capacity to distinguish one malware family
from other families as well as clean files, we determined whether
each input sample belonged to a specific malware family. Here we
regard clean files as a special family named “clean”. We further
evaluated our Factorization Machine model for this task on the
AMD dataset. Specifically, we used all samples from the 7 largest
malware families in the AMD dataset as well as 1, 500 clean samples.

4.3.1 Comparison with commercial engines. We can compare
our test results in Tables 3 and 4 with existing commerical Anti-
Virus engines avaliable on VirusTotal [31] in Tables 6 and 7. Our
results are competitive with the most popular engines listed in the
latter two tables, however our best classifiers did fall a little short of
the best classifiers available – McAfee, Symantec and Cylance for
DREBIN, Kasperskey and Cylance for AMD. Although we did not

Table 6: Test Performance of VirusTotal – DREBIN

Scanner
McAfee
CAT-QuickHeal
Symantec
Kaspersky
Cylance
Qihoo-360

Precision (%) Recall (%)

99.91
99.64
99.91
99.63
50.09
97.78

98.74
99.46
99.28
97.21
99.91
94.96

F1 (%)
99.32
99.55
99.59
98.41
66.73
96.35

FPR (%)
0.089
0.357
0.089
0.357
98.66
2.141

Table 7: Test Performance of VirusTotal – AMD

Scanner
McAfee
CAT-QuickHeal
Symantec
Kaspersky
Cylance
Qihoo-360

Precision (%) Recall (%)

99.73
99.70
99.57
99.84
58.86
97.50

93.82
98.84
67.26
53.35
99.64
68.92

F1 (%)
96.69
99.27
80.29
69.54
74.00
80.76

FPR (%)
0.358
0.418
0.42
0.119
98.96
2.507

record the accuracy of these AV engines, we can see that precision, a
metric that measures how many times a classifier accurately deemed
a sample to be malware, recall, a measure of how many malware
samples the classifier detected in total, and F1, the harmonic mean
of both, only fell below 99% for FM on the DREBIN set – all other
times the FM and MLP scores were over 99%. The critical point to
mention is that all of the truly clean files used in our experiments
are actually labeled by these AV engines using the rule described
in Subsection 4.1. Therefore, AV engines are supposed to have a
better false positive rate than their normal performance.

4.3.2 Detection of Specific Malware Families. Finally, using Ta-
ble 8, we can see that the easiest malware to detect was the Mecor,
which is Trojan Spyware [36], while the hardest to detect was Youmi
– Adware. The brand of malware that was detected with the small-
est FPR was FakeInstaller, which is a Trojan that wrecks havoc on
the device’s SMS services. Out of the families listed in in Table 8,
the one that is potentially very dangerous yet did not receive one
of the highest scores was Fusob [36], ransomware which can lock
down the device until certain conditions, which usually involve
monetary payment to the hacker in question, are met. However,
our FM design scored over 99% in the fields of precision, recall and
F1 on this scarce family of 1, 238 entries. Ironically, our classifier
had a harder time deeming apk files to be clean than it did detecting
any brand of malware, but as the saying goes better safe than sorry.

4.4 Feature Processing Overhead
Now we evaluate pre-processing time which consists of decompil-
ing the apk files to Smali code and then extracting the features listed
in Section 2. All work relating to this subsection was done on a
virtual machine hosted on ESXi. The VM was running Ubuntu 16.04
with a memory of 4G and 2 CPUs. For this task we randomly sam-
pled 3, 794 AMD samples, 6, 120 clean files and all 5, 560 DREBIN
samples. Histograms for dex code size and processing time for
all 15, 474 samples are given in Figures 7 and 8, respectively. The
results of processing time vs. size-on-disk are shown in Figure 9;

7

Table 8: Malware Family Classification Results by FM –
AMD

Family
Airpush
Youmi
Mecor
FakeIns.
Fusob
Kuguo
Dowgin
Clean
Average

Samples
7606
1256
1762
2129
1238
1122
3298
1500
—

Precision (%) Recall (%)

99.54
97.53
99.77
99.57
99.68
99.64
98.52
95.58
98.73

99.72
98.75
99.89
99.57
99.52
99.82
99.63
97.30
99.27

F1 (%)
99.63
98.14
99.83
99.57
99.60
99.73
99.07
96.43
99.00

FPR (%)
0.17
0.09
0.11
0.05
0.48
0.18
0.07
0.22
0.17

Figure 7: Dex source code size distribution.

Figure 8: Processing time distribution.

the three figures in the first row show the relation between dex
source code size and processing time. The figures in the second row
show the relation between apk file size and processing time.

4.4.1 Discussion of Results. With respect to apk file decompiling
and feature extraction, Figures 7, 8 show us that over 78% of samples
have a dex code size of less than 3MB and over 70.6% samples have
a processing time of less than 5 seconds. On the same samples we
also measured the mean time for encoding and prediction. Figure 9
tells us that the relationship between processing time and dex code
size is almost linear and that for the samples in all three datasets
the slopes are in the neighborhood of 0.4. Conversely, the three
top graphs of Figure 9 indicate no fixed relation between apk file
size and processing time, but rather that the relationship between
apk size and processing time has a rough upper and lower bound.

8

It is likely that this decoupling of processing time between apk
file size and dex code size is because in addition to the dex code
and manifest file, an apk file also contains other resource files like
HTML, figures, which can vary wildly from app-to-app.

Compared with DREBIN [2], it seems that our system does not
have much of an advantage in processing time. However, this is not
the case. To begin with, the test is done on a system that is not fully
integrated, the output of Smalisca is first written into a json file
and then reload into RAM for further processing. The I/O between
RAM and flash storage would often take a long time. Secondly, the
feature sets used in our system are simpler and smaller than sets
used in DREBIN, so under same condition our system should take
less processing time than DREBIN.

5 LIMITATIONS AND FUTURE WORK
While machine learning techniques such as ours provide a powerful
tool for automatically inferring models, they require a representa-
tive dataset for training. That is, the quality of the detection model
depends on the availability, quality and quality of both malware and
benign applications. While it is straightforward to collect benign
applications, gathering recent malware samples is a non-trivial ef-
fort that requires some technical effort. Fortunately, offline analysis
methods, e.g. RiskRanker [12], can help to acquire malware and
provide the samples for updating and maintaining a representative
dataset in order to continuously update our model.

Outside of model training times, the major limitation of our
architecture is the decompilation and feature extraction process.
We plan to integrate our system into Wedge Networks’ in-line, real-
time security solution which only allows us to have millisecond-
scale processing time. For encoding and prediction our system
takes about 4.8ms on average, however, decompiling and feature
extraction is on the order of seconds. Fortunately, methods exist
that will allow us to improve our system’s time efficiency. Such
techniques include reducing I/O and finishing all work at once
on a computer with a large amount of main memory (RAM), or
even using Application-Specific Integrated Circuits (ASIC) such as
FPGAs for speed up. In addition, we noted that decompiling apk
files can fail when using some existing tools. In our experiments,
we observed failures for some files, more with malware samples
than clean files. This is expected as malware samples may use some
additional techniques such as code obfuscation [5] that may lead
to decompiling failures. This limits the effectiveness of Android
malware detection schemes that extract features from apk files and
serves as an avenue for future research.

6 RELATED WORK
Many recent papers are trying to find malicious behavior patterns
through control flow graphs or call graphs, although these can be
obfuscated by ”method overloading” [5]. AppContext [38] classifies
applications using machine learning based on the contexts that
trigger security-sensitive behaviors. It builds a call graph from an
application source code and extracts the context factors through
information flow analysis. It is then able to obtain the features
for the machine learning algorithms from the extracted context.
In that paper, 633 benign applications from the Google Play store
and 202 malicious samples were analyzed. AppContext correctly

02468Dex code size (MB)0200040006000Number of samplesSource code size distribution0.02.55.07.510.012.515.017.520.0Processing time (s)0100020003000Number of samplesProcessing time distributionFigure 9: Scatter plot of processing time vs. file size.

identifies 192 of the malware applications with an 87.7% accuracy.
Gascon et al. [11] also utilized call graphs to detect malware. After
extraction of call graphs from Android applications, a linear-time
graph kernel is applied in order to map call graphs to features.
These features are given as input to SVMs to distinguish between
benign and malicious applications. They conducted experiments on
135, 792 benign and 12, 158 malware applications, detecting 89% of
the malware with an FPR of 1%. This kind of method relies heavily
on the accuracy of call graph extraction. However, current works
like FlowDroid [3] and IC3 [23] cannot fully solve the construction
of Inter-component control flow graphs (ICFG), especially the inter-
component links with intents and intent filters.

Other works focus on the detection of specific malicious behavior
such as privacy breaches and over privilege usage. For example,
[16] goes through the source code with predefined sources and
sinks to find a potential privacy breaches. [9] further examines all
the URL addresses to see if the app is trying to steal users’ private
information. [10] uses data flow analysis for security certification.
However, static taint-analysis and over privilege are prone to false
positives.

Studies closer to the one performed in this paper, such as [14, 26]
try to directly classify an application as malicious or benign through
permission request analysis for application installation [8], or con-
trol flow analysis [18]. These works take different approaches in
both the feature extraction and the classification phase. Peira-
vian and Zhu [26] used permissions and API calls as features for
SVM and Decision Tree Ensemble classifiers. Hindroid [14] built
a structured heterogeneous information network (HIN) with an
Android application and related system APIs as nodes and their
rich relationships as links, and then used meta-paths for malware
detection. DREBIN [2], which extracted features from manifest files
and source code, including permissions, hardware, system API calls

and even all the URLs, and then used SVM as the final classifier
for malware detection. However, DREBIN only achieved a test
detection rate of 93.90% on their full dataset. Sahs and Khan [29]
used a one-class SVM with kernels and as general classifier, but
only used 2081 benign and 91 malicious applications. Next, Yuan
et al. [39] used Deep Neural Networks for malware detection, but
they restricted themselves to only 500 apk files and achieved an
test accuracy of 96.5%. Finally, in an extensive study that tested the
ability of past malware’s effectiveness at training classifiers to deal
with new malware, Onwuzurike et al. [24] used a mix of call graphs
and markov chains for prediction however their metrics focused
on the F-measure7 and their results greatly varied depending on
across different sets of data. By contrast the accuracy scores of our
single hidden-layer MLP and FM models, were each above 99% on
both datasets.

We believe one of the reasons behind these high scores is that
we differentiated ourselves from existing works and instead of only
focusing on feature engineering and ignoring the importance of
choosing a suitable algorithm, after acquiring the feature represen-
tations of apps, we first made two critical observation regarding the
interaction between features and the sparsity of the feature vectors.
Then, the optimum machine learning algorithm designed to ap-
propriately handle our problem was chosen for malware detection
based on those observations and assumptions.

7 CONCLUSION
In this paper, we raised the issue of considering interaction terms
across features for the discovery of malicious behavior patterns
in Android applications. The features used to represent an apk
file consisted of app components, hardware features, permissions,
intent filters from the manifest file, restricted APIs, suspicious APIs

7Generalization of the F1 score

9

0102030Processing time (seconds)0246810Dexcode size (MB)Clean files0.02.55.07.510.012.5Processing time (seconds)0123456Dexcode size (MB)DREBIN files05101520Processing time (seconds)0246Dexcode size (MB)AMD files0102030Processing time (seconds)01020304050APK size (MB)Clean files0.02.55.07.510.012.5Processing time (seconds)0510152025APK size (MB)DREBIN files05101520Processing time (seconds)01020304050APK size (MB)AMD filesand used permissions from source code. Based on the extracted
features, a highly sparse vector representation was constructed for
each application using one-hot encoding. We then proposed the
use of a Factorization Machine-based malware detection system
to handle the high sparsity of vector representation and model
interaction terms at the same time.

To the best of our knowledge, this is a first for using FM models
for malware detection. A comprehensive experimental study on two
real sample malware collections, the DREBIN and AMD datasets,
alongside clean applications collected from online app stores were
performed to show the effectiveness of our system on malware
detection and malware family identification tasks. Promising ex-
perimental results with accuracy, precision, recall and F1 scores
of around or above 99% demonstrated that our method matches
the performance of commercial antivirus engines and holds steady
against the incredible results produced by Multi-Layer Perceptrons
with the benefit of taking up to 50 times less time to train.

REFERENCES
[1] Apkpure.com. 2018. apkpure. https://apkpure.com/ [Online; accessed 9-May-

2018].

[2] Daniel Arp, Michael Spreitzenbarth, Malte Hubner, Hugo Gascon, Konrad Rieck,
and CERT Siemens. 2014. DREBIN: Effective and Explainable Detection of
Android Malware in Your Pocket.. In Ndss, Vol. 14. 23–26.

[3] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014.
Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint
analysis for android apps. Acm Sigplan Notices 49, 6 (2014), 259–269.

[4] Victor Chebyshev. 2019. Mobile malware evolution 2018. (2019). Retrieved May
14, 2019 from https://securelist.com/mobile-malware-evolution-2018/89689/
[5] Melissa Chua and Vivek Balachandran. 2018. Effectiveness of Android Obfusca-
tion on Evading Anti-malware. In Proceedings of the Eighth ACM Conference on
Data and Application Security and Privacy (CODASPY ’18). ACM, New York, NY,
USA, 143–145. https://doi.org/10.1145/3176258.3176942

[6] Connor Tumbleson, Ryszard Winiewski. 2018. APKtool. https://ibotpeaches.

[7]

github.io/Apktool/ [Online; accessed 9-May-2018].
International Data Corporation. 2018. Smartphone Market Share. Retrieved
May 5, 2019 from https://www.idc.com/promo/smartphone-market-share/os
[8] Adrienne Porter Felt, Elizabeth Ha, Serge Egelman, Ariel Haney, Erika Chin, and
David Wagner. 2012. Android permissions: User attention, comprehension, and
behavior. In Proceedings of the eighth symposium on usable privacy and security.
ACM, 3.

[9] Hao Fu, Zizhan Zheng, Somdutta Bose, Matt Bishop, and Prasant Mohapatra. 2017.
Leaksemantic: Identifying abnormal sensitive network transmissions in mobile
applications. In INFOCOM 2017-IEEE Conference on Computer Communications,
IEEE. IEEE, 1–9.

[10] Adam P Fuchs, Avik Chaudhuri, and Jeffrey S Foster. 2009. Scandroid: Automated

security certification of android. Technical Report.

[11] Hugo Gascon, Fabian Yamaguchi, Daniel Arp, and Konrad Rieck. 2013. Structural
detection of android malware using embedded call graphs. In Proceedings of the
2013 ACM workshop on Artificial intelligence and security. ACM, 45–54.

[12] Michael Grace, Yajin Zhou, Qiang Zhang, Shihong Zou, and Xuxian Jiang. 2012.
Riskranker: scalable and accurate zero-day android malware detection. In Pro-
ceedings of the 10th international conference on Mobile systems, applications, and
services. ACM, 281–294.

[13] Kurt Hornik, Maxwell Stinchcombe, and Halbert White. 1989. Multilayer feed-
forward networks are universal approximators. Neural networks 2, 5 (1989),
359–366.

[14] Shifu Hou, Yanfang Ye, Yangqiu Song, and Melih Abdulhayoglu. 2017. Hindroid:
An intelligent android malware detection system based on structured heteroge-
neous information network. In Proceedings of the 23rd ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining. ACM, 1507–1515.
[15] Yaochen Hu, Di Niu, and Jianming Yang. 2018. A Fast Linear Computational
Framework for User Action Prediction in Tencent MyApp. In Proceedings of the
27th ACM International Conference on Information and Knowledge Management
(CIKM ’18). ACM, New York, NY, USA, 2047–2055. https://doi.org/10.1145/
3269206.3272015
Jinyung Kim, Yongho Yoon, Kwangkeun Yi, Junbum Shin, and SWRD Center.
2012. ScanDal: Static analyzer for detecting privacy leaks in android applications.
MoST 12 (2012).

[16]

10

[17] Diederik Kingma and Jimmy Ba. 2014. Adam: A Method for Stochastic Optimiza-

tion. International Conference on Learning Representations (12 2014).

[18] Shuying Liang, Weibin Sun, and Matthew Might. 2014. Fast flow analysis with
godel hashes. In Source Code Analysis and Manipulation (SCAM), 2014 IEEE 14th
International Working Conference on. IEEE, 225–234.

[19] Yepang Liu, Chang Xu, Shing-Chi Cheung, and Valerio Terragni. 2016. Under-
standing and detecting wake lock misuses for android applications. In Proceedings
of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Soft-
ware Engineering. ACM, 396–409.

[20] Laurens van der Maaten and Geoffrey Hinton. 2008. Visualizing data using t-SNE.

Journal of machine learning research 9, Nov (2008), 2579–2605.

[21] Vinod Nair and Geoffrey E. Hinton. 2010. Rectified Linear Units Improve Re-
stricted Boltzmann Machines. In Proceedings of the 27th International Conference
on International Conference on Machine Learning (ICML’10). Omnipress, USA,
807–814. http://dl.acm.org/citation.cfm?id=3104322.3104425

[22] Vlad Niculae. [n.d.]. A library for factorization machines and polynomial net-
Retrieved 5-22-19 from

works for classification and regression in Python.
https://github.com/scikit-learn-contrib/polylearn

[23] Damien Octeau, Daniel Luchaup, Matthew Dering, Somesh Jha, and Patrick
McDaniel. 2015. Composite constant propagation: Application to android inter-
component communication analysis. In Proceedings of the 37th International
Conference on Software Engineering-Volume 1. IEEE Press, 77–88.

[24] Lucky Onwuzurike, Enrico Mariconti, Panagiotis Andriotis, Emiliano De Cristo-
faro, Gordon Ross, and Gianluca Stringhini. 2019. MaMaDroid: Detecting An-
droid Malware by Building Markov Chains of Behavioral Models (Extended
Version). ACM Trans. Priv. Secur. 22, 2, Article 14 (April 2019), 34 pages.
https://doi.org/10.1145/3313391

[25] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M.
Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cour-
napeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-learn: Machine
Learning in Python. Journal of Machine Learning Research 12 (2011), 2825–2830.
[26] Naser Peiravian and Xingquan Zhu. 2013. Machine learning for android malware
detection using permission and api calls. In Tools with Artificial Intelligence
(ICTAI), 2013 IEEE 25th International Conference on. IEEE, 300–305.

[27] Steffen Rendle. 2010. Factorization machines. In Data Mining (ICDM), 2010 IEEE

10th International Conference on. IEEE, 995–1000.

[28] Dennis W Ruck, Steven K Rogers, Matthew Kabrisky, Mark E Oxley, and Bruce W
Suter. 1990. The multilayer perceptron as an approximation to a Bayes optimal
discriminant function. IEEE Transactions on Neural Networks 1, 4 (1990), 296–298.
Justin Sahs and Latifur Khan. 2012. A machine learning approach to android
malware detection. In Intelligence and security informatics conference (eisic), 2012
european. IEEE, 141–147.

[29]

[30] Franco Scarselli and Ah Chung Tsoi. 1998. Universal Approximation Using
Feedforward Neural Networks: A Survey of Some Existing Methods, and Some
New Results. Neural Networks 11, 1 (1998), 15 – 37. https://doi.org/10.1016/
S0893-6080(97)00097-X

[31] Hispasec Sistemas. [n.d.]. VirusTotal: Analyze suspicious files and URLs to
detect types of malware, automatically share them with the security community.
([n. d.]). https://www.virustotal.com [Online; accessed 22-May-2019].

[32] statcounter. 2018. Mobile Operating System Market Share Worldwide. Retrieved
May 5, 2019 from http://gs.statcounter.com/os-market-share/mobile/worldwide/
2018

[33] Roman Unuchek. 2017. Mobile malware evolution 2016. (2017). Retrieved May

14, 2019 from https://securelist.com/mobile-malware-evolution-2016/77681/

[34] Roman Unuchek. 2018. Mobile malware evolution 2017. (2018). Retrieved May
14, 2019 from https://securelist.com/mobile-malware-review-2017/84139/
[35] Deepak Venugopal and Guoning Hu. 2008. Efficient signature based malware
detection on mobile devices. Mobile Information Systems 4, 1 (2008), 33–49.
[36] Fengguo Wei, Yuping Li, Sankardas Roy, Xinming Ou, and Wu Zhou. 2017. Deep
Ground Truth Analysis of Current Android Malware. In International Conference
on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA’17).
Springer, Bonn, Germany, 252–276.

[37] Dong-Jie Wu, Ching-Hao Mao, Te-En Wei, Hahn-Ming Lee, and Kuo-Ping Wu.
2012. Droidmat: Android malware detection through manifest and api calls
tracing. In Information Security (Asia JCIS), 2012 Seventh Asia Joint Conference
on. IEEE, 62–69.

[38] Wei Yang, Xusheng Xiao, Benjamin Andow, Sihan Li, Tao Xie, and William
Enck. 2015. Appcontext: Differentiating malicious and benign mobile app be-
haviors using context. In Software engineering (ICSE), 2015 IEEE/ACM 37th IEEE
international conference on, Vol. 1. IEEE, 303–313.

[39] Zhenlong Yuan, Yongqiang Lu, Zhaoguo Wang, and Yibo Xue. 2014. Droid-
sec: deep learning in android malware detection. In ACM SIGCOMM Computer
Communication Review, Vol. 44. ACM, 371–372.

