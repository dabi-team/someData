0
2
0
2

p
e
S
1
2

]

R
C
.
s
c
[

1
v
1
0
1
1
1
.
9
0
0
2
:
v
i
X
r
a

AI assisted Malware Analysis:
A Course for Next Generation Cybersecurity Workforce

Maanak Gupta1, Sudip Mittal2, and Mahmoud Abdelsalam3

1Dept. of Computer Science, Tennessee Technological University, Email: mgupta@tntech.edu
2Dept. of Computer Science, University of North Carolina Wilmington, Email: mittals@uncw.edu
3Dept. of Computer Science, Manhattan College, Email: mabdelsalam01@manhattan.edu

Abstract

The use of Artiﬁcial Intelligence (AI) and Machine Learning (ML) to solve cyber-
security problems has been gaining traction within industry and academia, in part as
a response to widespread malware attacks on critical systems, such as cloud infrastruc-
tures, government oﬃces or hospitals, and the vast amounts of data they generate. AI-
and ML-assisted cybersecurity oﬀers data-driven automation that could enable secu-
rity systems to identify and respond to cyber threats in real time. However, there is
currently a shortfall of professionals trained in AI and ML for cybersecurity. Here we
address the shortfall by developing lab-intensive modules that enable undergraduate
and graduate students to gain fundamental and advanced knowledge in applying AI and
ML techniques to real-world datasets to learn about Cyber Threat Intelligence (CTI),
malware analysis, and classiﬁcation, among other important topics in cybersecurity.

Here we describe six self-contained and adaptive modules in “AI-assisted Malware
Analysis.” Topics include: (1) CTI and malware attack stages, (2) malware knowledge
representation and CTI sharing, (3) malware data collection and feature identiﬁcation,
(4) AI-assisted malware detection, (5) malware classiﬁcation and attribution, and (6)
advanced malware research topics and case studies such as adversarial learning and
Advanced Persistent Threat (APT) detection.

1

Introduction

The use of Artiﬁcial Intelligence (AI) and machine learning (ML) to solve cybersecurity
problems has been gaining more traction among industry and academia. This data driven
automation will enable security systems to identify and respond to cyber threats in real time.
The widespread malware attacks on critical issues including cloud infrastructures, govern-
ment oﬃces or hospitals, together with vast amounts of data generated have necessitated the
need for formal education for AI and ML assisted cybersecurity education in universities. The
current shortfall of professionals who can use the AI and ML skills for cybersecurity demands
development and integration of such curriculum in the computer science and cybersecurity
programs.

All authors contributed equally to this work.

 
 
 
 
 
 
The need for automation and adaptation has made AI one of the most sought-out skills
in the security industry [1]. In the year 2019, around 948 government agencies, educational
establishments and health-care providers got hit with a barrage of ransomware attacks at
a potential cost of $7.5 billion [2]. We can anticipate that such attacks on mission critical
infrastructure will continue to grow in coming years. AI embedded in analyst augmentation
systems will play a crucial role in cybersecurity. As mentioned in a recent report [3], 73% of
large to medium sized organizations are testing use-cases for AI in cybersecurity. Currently,
28% are using AI embedded security products, while 30% using proprietary AI algorithms.
42% currently use, or plan to use AI assisted cybersecurity products. The use of machine
and deep learning in cybersecurity is trending upwards, with almost two out of three (63%)
organizations planning to employ such products by the end of 2020. The use of AI and
Machine Learning (ML) for cybersecurity is one of the most in-demand cybersecurity skill [1].
Many universities have a wide variety of courses in AI and cybersecurity, there are still
very limited opportunities for students to apply AI in cybersecurity domain. Students need
to be educated about the use of AI and ML technologies in security systems so as to identify
and respond to threats in real time. Researchers have actively developed novel AI and ML
solutions for, Cyber Threat Intelligence [4–12], Malware Analysis [13–16], Malware Classiﬁ-
cation [17], etc. to prevent and detect cyber-attacks.

Here we describe a course titled “AI assisted Malware Analysis” to transfer this research
to students. Providing students with the knowledge of using AI in malware analysis will
be an incredibly powerful tool to bridge the cybersecurity talent gap. It will open up the
opportunities for not only cybersecurity focused talent, but also from students across other
concentrations like data science or machine learning to apply their skills to solve cybersecurity
problems. On the other side, cybersecurity focused students who add AI to their skillset can
expect to open many more opportunities in this highly sought-after ﬁeld.

In the course students are expected to gain fundamental and advanced knowledge in using
AI and ML techniques on real-world dataset for cyber threat intelligence, malware analysis,
classiﬁcation among other important topics in the domain.

2 Course Overview & Pre-requisites

Here we present a summary of the curriculum that will be oﬀered as part of the course:
“Artiﬁcial Intelligence assisted Malware Analysis”. This course will have 6 modules as shown
in Figure 1, including (1) Cyber Threat Intelligence (CTI) and malware attack stages (2)
Malware knowledge representation and CTI sharing (3) Malware data collection and feature
identiﬁcation (4) AI assisted malware detection (5) Malware classiﬁcation and attribution (6)
Advanced malware research topics and case studies. Here each module consists of lectures
and lab sessions. Figure 1, shows a strong bias towards experimentation/lab exercises.

Before enrolling in a course that teaches the proposed modules, students should have

completed the following pre-requisites concepts -

1. Introduction to Machine Learning/Artiﬁcial Intelligence - Students are supposed to
have taken an undergraduate introduction to machine learning/artiﬁcial intelligence,
generally taught to computer science majors at various universities. Students are ex-
pected to know key concepts and applications of machine learning/artiﬁcial intelligence.

Figure 1: Overview of Course Modules and Labs.

2. Introduction to Cybersecurity - The proposed course expect students to have basic
cybersecurity foundations, which are completed in 3 foundational knowledge units
(Cybersecurity Foundations, Cybersecurity Principles, IT Systems Components) as
discussed in the NSA/DHS CAE-CDE designation requirements [18].

3 Course Module Descriptions

3.1 Module 1: Cyber Threat Intelligence (CTI) and Malware At-

tack Stages

This module covers topics that describe various stages of a malware attack and how cor-
responding CTI is created for a particular attack. We ﬁrst discuss how security analysts
describe and diﬀerentiate between various malware stages like, reconnaissance, initial com-
promise, command and control, lateral movement, exﬁltration and corruption [19]. Next
the students understand how security researchers, to combat these malware based attacks,
retrieve malware samples from the ‘wild’. These samples are then ‘detonated’ in a controlled
environment and its behaviour ‘logged’. Using this behavioral data, security analysts map
various malware to known indicators and means of attacks. As a result of such studies, the
security analysts produce CTI. We also discuss various sources of CTI like, NIST’s National
Vulnerability Database (NVD) [20], Common Vulnerabilities and Exposures (CVE) [21],
After Action Reports [7], Social Media [4], Blogs and News Sources [22], Dark Web [8],
VirusTotal [23].

Students then are able to understand how CTI allows an organization to identify, assess,
monitor, and compute a response to cyber threats. CTI includes indicators of compromise;
tactics, techniques, and procedures (TTPs) used by threat actors; suggested actions to detect,
contain, or prevent attacks; recommended security tool conﬁgurations; threat intelligence
reports and the ﬁndings from the analyses of cyber incidents. Most organizations already
produce multiple types of cyber threat information about internal threats as part of their
security operations eﬀorts. Students are made to understand that they can ﬁrst identify
internally available intelligence and augment it by referring to trusted external CTI sources.

Furthermore, we also introduce an existing structured language for CTI, Structured
Threat Information eXpression (STIX) [24], developed under the OASIS framework [25].
This is followed by how it can be used for developing malware knowledge representations for
AI assisted malware detection techniques (See subsections 3.2 and 3.4).

• Lab 1a: Collecting CTI and identifying malware stages: In this lab, students
will create a program to collect CTI through various feeds like, NVD JSON 1.1 Vul-
nerability feed [26] and VirusTotal (Public API Endpoint limited to 4 requests per
minute) [23]. They will then be tasked to identify details about various malware stages
in the collected CTI samples. This lab can be done by students in any programming
language like python or Java.

• Lab 1b: Representing CTI in STIX: In this lab, participants will implement a
system that helps representing CTI in STIX. They will be given multiple CTI sam-
ples that need to be represented in STIX. Students will utilize publicly available STIX
project [27] python libraries to parse, manipulate, generate [28], and validate [29] STIX
content. The lab will teach students to correctly assign intelligence indicators of com-
promise; tactics, techniques, and procedures (TTPs), etc. to the correct corresponding
STIX schema bindings [30].

3.2 Module 2: Malware Knowledge Representation and CTI Shar-

ing

Knowledge representation is a ﬁeld of AI that focuses on designing eﬃcient computer rep-
resentations that capture information vital for complex problems.
In order to create AI
assisted malware detection systems, students need to understand various malware repre-
sentation techniques. In this module, we focus on popular techniques that enable security
analysts to store malware data and representations in databases, knowledge graphs, and
vector spaces.

We begin this module by introducing students to a typical malware database schema,
based on the STIX schema [30]. We provide students this malware behavioural feature
dataset that includes CPU usage, memory usage, disk I/O, network usage, etc. We have
access to such a dataset collected as a part of a research project [13]. This also helps us
explain to students various malware data collection schemes discussed later in Module 3
(subsection 3.3).

Students then learn about various AI speciﬁc malware representations, which include
malware knowledge graphs, ontologies, and vector spaces. These representation techniques
have been used extensively to represent behavioral information and CTI, and enable students
to understand diﬀerent knowledge representation techniques for malware from a variety of
perspectives [?, 4, 9, 11, 31–36]. We also highlight various advantages and disadvantages
associated with the use these representation techniques, for example, the use of ontology
reasoning mechanisms that are processed over a knowledge graph, experiments have shown
that this method has high malicious code detection rate and low false alarm rate [7, 33].

We discuss the beneﬁts of cyber threat information sharing [37]. The modules will cover
Trusted Automated Exchange of Intelligence Information (TAXII) [38]. TAXII is an ex-
change framework that allows various organizations to share CTI using the STIX format (See

Section 3.1). It enables distribution of CTI among cyber information sharing and analysis
organizations. Students are introduced to various CTI sharing models that present disparate
use-cases depending on organization policy, like, Hub and Spoke model, Source/Subscriber
model, Peer To Peer model [38].

• Lab 2a: Querying malware knowledge representations: Students will be given
access to servers hosting various malware representations like databases, knowledge
graphs, and vector models. Students will run speciﬁc queries, ﬁnd similarities and
dis-similarities between various malware representations.

• Lab 2b: TAXII servers: In this exercise, students will connect to open source TAXII
servers [39, 40] and download posted Cyber Threat Intelligence (CTI). Students will
also conﬁgure a TAXII server themselves [41] and post available STIX CTI to their
TAXII servers [42].

3.3 Module 3: Malware Data Collection, Feature Identiﬁcation

and Preprocessing

In this module, students learn three steps of malware data collection and feature identiﬁca-
tion: samples gathering, features identiﬁcation, and data collection. In samples gathering, we
discuss ways of acquiring malware samples including honeypots (active and passive) and mal-
ware public databases (e.g., VirusTotal [23] and VirusShare [43]). In features identiﬁcation,
we discuss commonly used static features like binary n-grams, Control Flow Graphs (CFGs)
and static API calls, along with behavioral features like performance metrics, memory infor-
mation, and system calls. In data collection, we discuss the usage of isolated environments
such as sandboxes (e.g., Cuckoo Sandbox) and virtual machines. We will also discuss the
limitations of using isolated environments and other alternatives including the use of a live
testbed for real world use cases simulation. Further, we discuss host-based and network-
based collecting agents as well as virtual machine introspection. The collected dataset with
also be used to populate a malware database schema as discussed in Module 2 (subsection
3.2).

The collected data features which are of diﬀerent scales and categories, require prepro-
cessing. We teach feature normalization and standardization techniques including discussion
on categorical data and ways to convert it into numerical data. For features which are in huge
numbers, we discuss dimensionality reduction techniques, speciﬁcally Principle Component
Analysis (PCA) and Independent Component Analysis (ICA).

• Lab 3a: Malware Samples Collection: In this lab, students will utilize a public
malware database service to acquire working ransomware samples for linux platform.
They will be provided an isolated VM where they can ensure that collected samples
are working properly.

• Lab 3b: Malware Data Collection/Collecting Agents: In the second part, stu-
dents will write a host-based collecting agent to capture malware behavioral data. This
lab will focus on capturing malware system calls. Students will be provided with an
isolated VM where they can utilize the samples acquired in Lab 3a to run, test and
collect the data using their agent.

Figure 2: Overview of AI Assisted Malware Detection

3.4 Module 4: AI assisted Malware Detection

In this module students learn various AI/ML based malware detection techniques and cor-
responding extracted features as shown in Figure 2. Malware detection techniques can be
divided into two categories: online malware detection and ﬁle classiﬁcation. Some of the
techniques we discuss in this module include classical algorithms like, support vector ma-
chines [16], DBSCAN [44], etc. and state-of-the-art deep neural networks [13].

We start with ﬁle classiﬁcation techniques including static and dynamic analysis. In static
analysis, students learn three major classes of features including: Binary N-grams [45–48],
Control Flow Graphs (CFGs) [49–51] and Static features/Disassembling [52, 53]. Although
static analysis techniques are eﬃcient, most recent malware are sophisticated and has poly-
morphic nature, which hinder the eﬀectiveness of static analysis. To overcome this, students
are also taught AI/ML based dynamic analysis techniques, which focus on behavioural as-
pects of malware. To that end, we discuss various tools needed to monitor system processes,
ﬁlesystem and registry changes and network activity. We provide a use case that focuses
on running executables in a controlled environment and observing their behavior, where
system/API calls [17, 54–57] are mainly used.

File classiﬁcation approaches can be considered prevention mechanisms, since only exe-
cutables deemed as benign can be run on the system leaving no chance for malicious executa-
bles to run free. However, they can not help detecting malware in an already checked benign
application that got infected later on. Henceforth, we will develop modules for online de-
tection approaches, which will help understand and develop ability to continuously monitor
the entire system for the presence of malicious activities. We will include diﬀerent features
used in this approach which are more dynamic and time dependent such as performance
metrics [13, 58–60], memory features [61, 62] or run-time system/API calls [63–65].

Lab 4: Malware Detection:

In this lab, students will be tasked to use the previ-
ously collected data in Lab 3b (subsection 3.3) and select one AI/ML algorithm to apply
on this dataset. They will apply data pre-processing step as necessary depending on the
chosen AI/ML algorithm. Students will be provided with a GPU-enabled machines to help
speeding up the AI/ML model training. Additionally, students will report their ﬁndings

Features ExtractionMachine Learning Based Malware DetectionFile ClassificationOnline Malware DetectionStatic AnalysisDynamic AnalysisBinary N-gramsControl Flow Graphs (CFG)Static API callsSystem callsMemory featuresPerformance metricswith rationalization of their choices, supporting graphs and proper explanation.

3.5 Module 5: AI assisted Malware Classiﬁcation

Malware is used for many purposes such as: stealing data, asking for ransoms, creating
backdoors, tracking user activity, and spreading spam, to say the least. Because of the
ubiquitous nature of malware, it is important not only to detect the presence of malware but
also the type (e.g., worm, trojan, backdoor, rootkit, ransomware, etc.) and the function of
that malware. This can help in faster remedy actions. As such, students learn the diﬀerent
malware types and how to apply diﬀerent machine learning algorithms to classify malware
into known families.

Classiﬁcation is not an easy task, since it is not as simple as placing a malware in an
unambiguous class. In most cases, real-world malware has a wide variety of nefarious ca-
pabilities and propagation mechanisms. This makes classiﬁcation harder and unpredictable.
Even when families of malware share similarities, minor modiﬁcations in a malware can cause
confusion to the classiﬁer. Malware classiﬁcation goes beyond simply classifying the mal-
ware based on its name. In this module, diﬀerent methods are discussed including classic
classiﬁcation, deep learning and clustering based approaches. Students also learn how to
choose the right classiﬁcation scheme depending on speciﬁc use cases. This can be achieved
using NIST’s [66] outlined steps an organization can take to develop a malware classiﬁcation
scheme to prioritize speciﬁc incidents.

Lab 5: Malware Classiﬁcation:

In this lab, students train a model to classify
malware into 9 families based on the Kaggle dataset [67,68]. They will be required to employ
AI/ML algorithms and a subset of features extracted from the dataset which they believe
will increase the accuracy of the classiﬁer, providing their technical reasoning behind such
choices. Additionally, students will be given a VM with a ﬁxed deﬁned speciﬁcation to run
their experiments, which will limit their choices of the AI/ML algorithm architecture as well
as the number of features to use, given the lab deadline. Students will utilize python scikit-
learn [69], PyTorch [70] and/or Tensorﬂow [71] framework for developing AI/ML algorithms.

3.6 Module 6: Advance Malware Research Topics and Case Stud-

ies

In this module, advance and evolving topics related to AI assisted cybersecurity are discussed.
First, students learn about adversarial machine learning attacks, where models can be fooled
through malicious input. We discuss how adversaries can poison the model to make wrong
classiﬁcations, diﬀerent kinds of adversarial ML attacks, including the black box and white
box attacks. Data Poisoning and evasion techniques are also discussed. Defense strategies to
combat adversarial ML attacks will be covered. These include primarily two types of defense
strategies: 1) reactive: detect adversarial examples after deep neural networks are built;
2) proactive: make deep neural networks more robust before adversaries generate adver-
sarial examples. We discuss three reactive countermeasures (Adversarial Detecting, Input
Reconstruction, and Network Veriﬁcation) and three proactive countermeasures (Network
Distillation, Adversarial (Re)training, and Classiﬁer Robustifying).

Another important topic to be discussed is Advance Persistent Threats (APTs). We
discuss APT progression including the network inﬁltration, expansion and extraction. With
around 73% of the organizations rate their detection capability as inadequate, it is impor-
tant to focus on detection techniques. We discuss AI based APT detection and analysis
techniques. Fuzzing has been used traditionally to ﬁnd software bugs by randomly feeding
data into a target program until one permutation reveals a vulnerability. Applying AI and
ML models to fuzzing enables it to become more eﬃcient and eﬀective. We discuss such
techniques and relevant tools.

In this module, students are also introduced to case studies discussing recent malware
attacks and applications of AI for malware analysis. This includes case studies about recent
ransomware attacks against cities and critical establishments across the U.S. It highlights
how such attacks were orchestrated and how AI/ML assisted detection mechanisms discussed
in the earlier modules can be used to restrict their eﬀects.

• Lab 6a: Adversarial Examples: In this lab, students are tasked with generating
adversarial examples that bypass the detection techniques they built in the previous
labs (3.3 and 3.4) by utilizing cleaverhans [72] library. This will help them in learning
how such examples are crafted and used in practice.

• Lab 6b: Adversarial Training: In this lab, students are expected to apply ad-
versarial training, one of the easiest and most eﬀective approaches to defend against
adversarial attacks. Adversarial training is an approach where a model is retrained
using adversarial examples so that the model will not be fooled by such examples.

4 Conclusion

In this article, we provide an outline of a cybersecurity course, which will discuss state of the
art skill sets with respect to the use of AI and ML for malware analysis. We ﬁrmly believe
that such a course when introduced at various universities and educational institutions will
produce graduates and future workforce who will be well versed and equipped to prevent,
detect and mitigate against sophisticated cyberattacks.

Acknowledgement

This work was supported by National Science Foundation awards 2025682, 2025685, and
2025686.

References

[1] Benjamin Roussey. THE 8 MOST IN-DEMAND CYBERSECURITY SKILLS FOR

2019. http://techgenix.com/in-demand-cybersecurity-skills/, 2018.

[2] CRN. The 10 Biggest Ransomware Attacks of 2019 .

https://www.crn.com/

slide-shows/security/the-10-biggest-ransomware-attacks-of-2019, 2019.

[3] Capgemini. Reinventing Cybersecurity with Artiﬁcial Intelligence: The new fron-
tier in digital security. https://www.capgemini.com/wp-content/uploads/2019/07/
AI-in-Cybersecurity_Report_20190711_V06.pdf, 2019.

[4] Sudip Mittal, Prajit Kumar Das, Varish Mulwad, Anupam Joshi, and Tim Finin. Cy-
bertwitter: Using twitter to generate alerts for cybersecurity threats and vulnerabilities.
In 2016 IEEE/ACM International Conference on Advances in Social Networks Analysis
and Mining (ASONAM), pages 860–867. IEEE, 2016.

[5] Sudip Mittal, Anupam Joshi, and Tim Finin. Cyber-all-intel: An ai for security related

threat intelligence. preprint arXiv:1905.02895, 2019.

[6] Nitika Khurana, Sudip Mittal, Aritran Piplai, and Anupam Joshi. Preventing poisoning
attacks on AI based threat intelligence systems. In Int. Workshop on Machine Learning
for Signal Processing. IEEE, 2019.

[7] Aritran Piplai, Sudip Mittal, Anupam Joshi, Tim Finin, James Holt, Richard Zak, et al.
Creating cybersecurity knowledge graphs from malware after action reports. 2019.

[8] Paulo Shakarian. Dark-web cyber threat intelligence: From data to intelligence to

prediction, 2018.

[9] Aditya Pingle, Aritran Piplai, Sudip Mittal, Anupam Joshi, James Holt, and Richard
Zak. Relext: relation extraction using deep learning approaches for cybersecurity knowl-
edge graph improvement. In Proceedings of the 2019 IEEE/ACM International Confer-
ence on Advances in Social Networks Analysis and Mining, pages 879–886, 2019.

[10] Lorenzo Neil, Sudip Mittal, Anupam Joshi, et al. Mining threat intelligence about
open-source projects and libraries from code repository issues and bug reports. IEEE
Intelligence and Security Informatics (IEEE ISI) 2018, 2018.

[11] Sudip Mittal, Anupam Joshi, and Tim Finin. Thinking, fast and slow: Combining

vector spaces and knowledge graphs. arXiv preprint arXiv:1708.03310, 2017.

[12] Aritran Piplai, Sudip Mittal, Mahmoud Abdelsalam, Maanak Gupta, Anupam Joshi,
and Tim Finin. Knowledge enrichment by fusing representations for malware threat
intelligence and behavior. 2020.

[13] Mahmoud Abdelsalam, Ram Krishnan, Yufei Huang, and Ravi Sandhu. Malware detec-
tion in cloud infrastructures using convolutional neural networks. In 2018 IEEE 11th
International Conference on Cloud Computing (CLOUD), pages 162–169. IEEE, 2018.

[14] Priyanka Ranade, Sudip Mittal, Anupam Joshi, and Karuna Joshi. Using deep neural
networks to translate multi-lingual threat intelligence.
In 2018 IEEE International
Conference on Intelligence and Security Informatics (ISI), pages 238–243. IEEE, 2018.

[15] Andrew McDole, Mahmoud Abdelsalam, Maanak Gupta, and Sudip Mittal. Analyz-
ing cnn based behavioural malware detection techniques on cloud iaas. International
Conference on Cloud Computing (CLOUD), 2020.

[16] Michael R Watson, Angelos K Marnerides, Andreas Mauthe, David Hutchison, et al.
Malware detection in cloud computing infrastructures. IEEE Transactions on Depend-
able and Secure Computing, 13(2):192–205, 2015.

[17] Wenyi Huang and Jack W Stokes. MtNet: a multi-task neural network for dynamic
malware classiﬁcation. In Detection of Intrusions and Malware, and Vulnerability As-
sessment. Springer, 2016.

[18] Center of Academic Excellence in Cyber Defense Education (CAE-CDE) Designa-
tion Requirements. http://www.iad.gov/NIETP/documents/Requirements/CAE-CD_
2019_Knowledge_Units.pdf.

[19] LockheedMartin. The Cyber Kill Chain. "https://www.lockheedmartin.com/en-us/

capabilities/cyber/cyber-kill-chain.html", 2020.

[20] NIST. National Vulnerability Database. https://nvd.nist.gov/, 2020.

[21] MITRE. Common Vulnerabilities and Exposures. https://cve.mitre.org/, 2020.

[22] Taneeya W Satyapanich, Francis Ferraro, Tim Finin, et al. Casie: Extracting cyber-
security event information from text. In Proceeding of the 34th AAAI Conference on
Artiﬁcial Intelligence, 2020.

[23] Chronicle. VirusTotal API.

https://developers.virustotal.com/reference#

public-vs-private-api, 2020.

[24] Oasis.

Stix

2.0

documentation.

https://oasis-open.github.io/

cti-documentation/stix/examples.html, May 2018.

[25] OASIS-open. OASIS Cyber Threat Intelligence (CTI) TC. https://www.oasis-open.

org/committees/tc_home.php?wg_abbrev=cti, 2020.

[26] NIST.

JSON 1.1 Vulnerability Feed.

https://nvd.nist.gov/General/News/

JSON-1-1-Vulnerability-Feed-Release, 2020.

[27] MITRE. The STIX Project GitHub Repo. https://github.com/STIXProject/, 2020.

[28] MITRE. python-stix. https://github.com/STIXProject/python-stix, 2020.

[29] MITRE. stix-validator. https://github.com/STIXProject/stix-validator, 2020.

[30] MITRE. STIX Schemas. https://github.com/STIXProject/schemas, 2020.

[31] David A Mundie and David M Mcintire. An ontology for malware analysis. In 2013
International Conference on Availability, Reliability and Security, pages 556–558. IEEE,
2013.

[32] Xiao-Ling Xia, Yu-Xin Ding, Jing-Zhi Jiang, and Rong Zeng. Malware detection based
on ontology. In 2017 International Conference on Machine Learning and Cybernetics
(ICMLC), volume 1, pages 21–26. IEEE, 2017.

[33] Yuxin Ding, Rui Wu, and Xiao Zhang. Ontology-based knowledge representation for

malware individuals and families. Computers & Security, 87:101574, 2019.

[34] Zareen Syed, Ankur Padia, Tim Finin, Lisa Mathews, and Anupam Joshi. Uco: A
In Workshops at the Thirtieth AAAI Conference on

uniﬁed cybersecurity ontology.
Artiﬁcial Intelligence, 2016.

[35] Ankur Padia, Arpita Roy, Taneeya Satyapanich, Francis Ferraro, Shimei Pan, Youngja
Park, Anupam Joshi, and Tim Finin. UMBC at semeval-2018 task 8: Understanding
text about malware. In Proceedings of The 12th International Workshop on Semantic
Evaluation, SemEval@NAACL-HLT 2018, New Orleans, Louisiana, USA, June 5-6,
2018, pages 878–884, 2018.

[36] Arpita Roy, Youngja Park, and Shimei Pan. Learning domain-speciﬁc word embeddings

from sparse cybersecurity texts. CoRR, abs/1709.07470, 2017.

[37] Christopher Johnson, Mark Badger, David Waltermire, Julie Snyder, and Clem Sko-
rupka. Guide to cyber threat information sharing. Technical report, National Institute
of Standards and Technology, 2016.

[38] OASIS. TAXII. https://oasis-open.github.io/cti-documentation/taxii/intro,

May 2019.

[39] hailataxii. Hail a TAXII.com is a repository of Open Source Cyber Threat Intellegence

feeds in STIX format. http://hailataxii.com/, 2020.

[40] OASIS. OASIS TAXII Open source projects. https://wiki.oasis-open.org/cti/

Open%20Source%20Projects, 2020.

[41] MITRE.

CTI TAXII

SERVER.

https://github.com/oasis-open/

cti-taxii-server, 2020.

[42] MITRE. CTI TAXII Client. https://github.com/oasis-open/cti-taxii-client,

2020.

[43] VirusShare. https://virusshare.com/.

[44] Varun Chandola, Arindam Banerjee, and Vipin Kumar. Anomaly detection: A survey.

ACM computing surveys (CSUR), 41(3):1–58, 2009.

[45] Gil Tahan, Lior Rokach, and Yuval Shahar. Mal-ID: Automatic malware detection using
common segment analysis and meta-features. Journal of Machine Learning Research,
13, 2012.

[46] Tony Abou-Assaleh and et al. N-gram-based detection of new malicious code.

In

COMPSAC, volume 2. IEEE, 2004.

[47] J Zico Kolter and Marcus A Maloof. Learning to detect and classify malicious executa-

bles in the wild. Journal of Machine Learning Research, 7, 2006.

[48] Asaf Shabtai and et al. Detection of malicious code by applying machine learning
information security technical

classiﬁers on static features: A state-of-the-art survey.
report, 14, 2009.

[49] Shun Tobiyama, Yukiko Yamaguchi, Hajime Shimada, Tomonori Ikuse, and Takeshi
Yagi. Malware detection with deep neural network using process behavior. In COMP-
SAC, volume 2. IEEE, 2016.

[50] Zeliang Kan, Haoyu Wang, Guoai Xu, Yao Guo, and Xiangqun Chen. Towards light-
weight deep learning based malware detection. In 2018 IEEE 42nd Annual Computer
Software and Applications Conference (COMPSAC), pages 600–609. IEEE, 2018.

[51] Mojtaba Eskandari and Sattar Hashemi. Ecfgm: enriched control ﬂow graph miner
for unknown vicious infected code detection. Journal in Computer Virology, 8:99–108,
2012.

[52] Joshua Saxe and Konstantin Berlin. Deep neural network based malware detection
using two dimensional binary program features. In 10th MALWARE. IEEE, 2015.

[53] Seonhee Seok and Howon Kim. Visualized malware classiﬁcation based-on convolutional
neural network. Journal of the Korea Institute of Information Security and Cryptology,
26, 2016.

[54] Rakshit Agrawal, Jack W Stokes, Mady Marinescu, and Karthik Selvaraj. Robust
arXiv preprint

neural malware detection models for emulation sequence learning.
arXiv:1806.10741, 2018.

[55] Ben Athiwaratkun and Jack W Stokes. Malware classiﬁcation with LSTM and GRU

language models and a character-level cnn. In ICASSP. IEEE, 2017.

[56] George E Dahl, Jack W Stokes, Li Deng, and Dong Yu. Large-scale malware classiﬁca-

tion using random projections and neural networks. In ICASSP. IEEE, 2013.

[57] Dhilung Kirat and Giovanni Vigna. Malgene: Automatic extraction of malware analysis
evasion signature. In Proceedings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security, pages 769–780. ACM, 2015.

[58] John Demme and et al. On the feasibility of online malware detection with performance
counters. In ACM SIGARCH Computer Architecture News, volume 41. ACM, 2013.

[59] Mahmoud Abdelsalam, Ram Krishnan, and Ravi Sandhu. Clustering-based iaas cloud
monitoring. In In Proceedings 10th IEEE International Conference on Cloud Computing
(CLOUD), 2017.

[60] Mahmoud Abdelsalam, Ram Krishnan, and Ravi Sandhu. Online malware detection in
cloud auto-scaling systems using shallow convolutional neural networks. In IFIP Annual
Conference on Data and Applications Security and Privacy, pages 381–397. Springer,
Cham, 2019.

[61] Meltem Ozsoy, Caleb Donovick, Iakov Gorelik, Nael Abu-Ghazaleh, and Dmitry Pono-
marev. Malware-aware processors: A framework for eﬃcient online malware detection.
In High Performance Computer Architecture (HPCA), 2015 IEEE 21st International
Symposium on, pages 651–661. IEEE, 2015.

[62] Zhixing Xu, Sayak Ray, Pramod Subramanyan, and Sharad Malik. Malware detec-
tion using machine learning based analysis of virtual memory access patterns. In 2017
Design, Automation & Test in Europe Conference & Exhibition (DATE). IEEE, 2017.

[63] Joel A Dawson, Jeﬀrey T McDonald, Lee Hively, Todd R Andel, Mark Yampolskiy,
and Charles Hubbard. Phase space detection of virtual machine cyber events through
hypervisor-level system call analysis. In Data Intelligence and Security (ICDIS), 2018
1st International Conference on, pages 159–167. IEEE, 2018.

[64] Patrick Luckett, J Todd McDonald, and Joel Dawson. Neural network analysis of system
call timing for rootkit detection. In 2016 Cybersecurity Symposium (CYBERSEC), pages
1–6. IEEE, 2016.

[65] Mamoun Alazab, Sitalakshmi Venkatraman, Paul Watters, and Moutaz Alazab. Zero-
day malware detection based on supervised learning algorithms of api call signatures.
In Proceedings of the Ninth Australasian Data Mining Conference-Volume 121, pages
171–182. Australian Computer Society, Inc., 2011.

[66] Murugiah Souppaya and Karen Scarfone. Guide to malware incident prevention and

handling for desktops and laptops. NIST Special Publication, 800:83, 2013.

[67] Kaggle

Malware

Classiﬁcation.

https://www.kaggle.com/c/

malware-classification.

[68] Royi Ronen, Marian Radu, Corina Feuerstein, Elad Yom-Tov, and Mansour Ahmadi.
Microsoft malware classiﬁcation challenge. arXiv preprint arXiv:1802.10135, 2018.

[69] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel,
P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau,
M. Brucher, M. Perrot, and E. Duchesnay. Scikit-learn: Machine learning in Python.
Journal of Machine Learning Research, 12:2825–2830, 2011.

[70] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory
Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, Alban Desmai-
son, Andreas Kopf, Edward Yang, Zachary DeVito, Martin Raison, Alykhan Tejani,
Sasank Chilamkurthy, Benoit Steiner, Lu Fang, Junjie Bai, and Soumith Chintala. Py-
In H. Wallach,
torch: An imperative style, high-performance deep learning library.
H. Larochelle, A. Beygelzimer, F. deBuc, E. Fox, and R. Garnett, editors, Advances in
Neural Information Processing Systems 32, pages 8024–8035. Curran Associates, Inc.,
2019.

[71] Mart´ın Abadi, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen, Craig
Citro, Greg S. Corrado, Andy Davis, Jeﬀrey Dean, Matthieu Devin, Sanjay Ghemawat,

Ian Goodfellow, Andrew Harp, Geoﬀrey Irving, Michael Isard, Yangqing Jia, Rafal
Jozefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh Levenberg, Dandelion Man´e, Rajat
Monga, Sherry Moore, Derek Murray, Chris Olah, Mike Schuster, Jonathon Shlens,
Benoit Steiner, Ilya Sutskever, Kunal Talwar, Paul Tucker, Vincent Vanhoucke, Vijay
Vasudevan, Fernanda Vi´egas, Oriol Vinyals, Pete Warden, Martin Wattenberg, Martin
Wicke, Yuan Yu, and Xiaoqiang Zheng. TensorFlow: Large-scale machine learning on
heterogeneous systems, 2015. Software available from tensorﬂow.org.

[72] Cleverhans Library. https://github.com/tensorflow/cleverhans.

