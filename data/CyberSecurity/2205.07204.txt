2
2
0
2

y
a
M
5
1

]

C
H
.
s
c
[

1
v
4
0
2
7
0
.
5
0
2
2
:
v
i
X
r
a

Mod2Dash: A Framework for Model-Driven Dashboards
Generation

LIUYUE JIANG, The Centre for Research on Engineering Software Technologies (CREST), University of
Adelaide & Cyber Security Cooperative Research Centre, Australia
NGUYEN KHOI TRAN, The Centre for Research on Engineering Software Technologies (CREST), Uni-
versity of Adelaide, Australia
M. ALI BABAR, The Centre for Research on Engineering Software Technologies (CREST), University of
Adelaide & Cyber Security Cooperative Research Centre, Australia

The construction of an interactive dashboard involves deciding on what information to present and how
to display it and implementing those design decisions to create an operational dashboard. Traditionally, a
dashboard’s design is implied in the deployed dashboard rather than captured explicitly as a digital artifact,
preventing it from being backed up, version-controlled, and shared. Moreover, practitioners have to implement
this implicit design manually by coding or configuring it on a dashboard platform. This paper proposes
Mod2Dash, a software framework that enables practitioners to capture their dashboard designs as models
and generate operational dashboards automatically from these models. The framework also provides a GUI-
driven customization approach for practitioners to fine-tune the auto-generated dashboards and update their
models. With these abilities, Mod2Dash enables practitioners to rapidly prototype and deploy dashboards
for both operational and research purposes. We evaluated the framework’s effectiveness in a case study on
cyber security visualization for decision support. A proof-of-concept of Mod2Dash was employed to model
and reconstruct 31 diverse real-world cyber security dashboards. A human-assisted comparison between
the Mod2Dash-generated dashboards and the baseline dashboards shows a close matching, indicating the
framework’s effectiveness for real-world scenarios.

CCS Concepts: • Human-centered computing → Visualization systems and tools; User centered design;
Web-based interaction; • General and reference → Design; • Information systems → Data analytics.
Additional Key Words and Phrases: data visualization, model-driven dashboard, visualization specification,
cyber situational awareness, decision making, visual data analytics, big data analytics

ACM Reference Format:
Liuyue Jiang, Nguyen Khoi Tran, and M. Ali Babar. 2022. Mod2Dash: A Framework for Model-Driven Dash-
boards Generation. Proc. ACM Hum.-Comput. Interact. 6, EICS, Article 172 (June 2022), 28 pages. https:
//doi.org/10.1145/3534526

1 INTRODUCTION

"A dashboard is a visual display of the most important information needed to achieve one or more
objectives that has been consolidated on a single computer screen so it can be monitored at a glance"

Authors’ addresses: Liuyue Jiang, The Centre for Research on Engineering Software Technologies (CREST), University of
Adelaide & Cyber Security Cooperative Research Centre, Adelaide, Australia, liuyue.jiang@adelaide.edu.au; Nguyen Khoi
Tran, The Centre for Research on Engineering Software Technologies (CREST), University of Adelaide, Adelaide, Australia,
nguyen.tran@adelaide.edu.au; M. Ali Babar, The Centre for Research on Engineering Software Technologies (CREST),
University of Adelaide & Cyber Security Cooperative Research Centre, Adelaide, Australia, ali.babar@adelaide.edu.au.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee
provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and
the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored.
Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires
prior specific permission and/or a fee. Request permissions from permissions@acm.org.
© 2022 Association for Computing Machinery.
2573-0142/2022/6-ART172 $15.00
https://doi.org/10.1145/3534526

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172

 
 
 
 
 
 
172:2

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

(Few, 2004 [9]). Dashboards are considered effective means of presenting critical information by
comprehensively using multiple visualization techniques to help decision makers facilitate decision
making [22, 27, 36]. They are widely used in real-world environments across a variety of disciplines
[2, 6, 24]. For example, cyber security dashboards monitor and visualize cyber incidents, trends,
and threats, to enhance cyber situational awareness (CSA) [12].

Each dashboard encapsulates a set of design decisions for the specific practitioners. The design
decisions of what constitutes dashboards and how to visualize them implicitly reside in the mind of
a dashboard practitioner as knowledge or in the deployed dashboards. A design decision is implied
and not usually captured as a digital artifact, and the implicit design is not communicable. So,
collaboration with others to further improve the design and delivery to the development stage is
challenging. Additionally, the implicit design cannot be version-controlled and backed up.

Traditionally, dashboard development involves phases such as users planning features and
requirements, designers analyzing requirements and designing the visual interface, and developers
coding and testing the dashboard [31]. As a result, capturing dashboard design and delivering a
dashboard for the practitioners are time-consuming and challenging.

The dashboard platforms, such as Grafana1 and Kibana2, allow dashboard practitioners to
realize the dashboard design and create web-based dashboards without concerning about the
implementation details. However, these platforms are still manual in building the dashboard from
individual components [3, 16]. The limited number of possible widgets, data sources, and features
in these platforms also limit the imagination of dashboard design. Furthermore, they cannot capture
the practitioners’ implicit designs and automatically transform them into dashboards.

Therefore it is necessary to capture the dashboard design decisions. The design decisions can
be converted into a dashboard model, presenting what and how required information should
be presented to enhance practitioners’ situational awareness (SA) and decision making. Thus,
dashboard development and delivery can be transformed into summarizing the design decisions as
a model and implementing that model into an operational dashboard.

Using a dashboard model to capture design decisions, combined with the automated generation
mechanism, can significantly reduce the work to create dashboards compared to building them
from scratch [44]. Additionally, dashboard languages simplify communication and collaboration
during the process of concretizing and implementing dashboard designs. Existing studies have also
shown the usability of the dashboard model to represent dashboard designs in different disciplines
(e.g., business performance [14, 20] and knowledge management [37]). However, their models fail
to represent many crucial aspects of building real-world dashboards, such as dashboard layout,
interactions, and customization features. Moreover, these dashboard languages are designed for
different particular disciplines and have limited generalizability. Therefore, it is vital to propose a
generic dashboard generation framework focusing on data visualization.

Mod2Dash is a software framework that enables users to capture their dashboard designs as
models, which contain designs about the visual and functional aspects of dashboards. Mod2Dash
automatically generates operational dashboards from these models by combining an extensible
pool of dashboard widgets and deploying the resulting dashboard as a web application. As the auto-
generated dashboards do not always strictly match the initial implicit design, Mod2Dash provides
a GUI-driven customization approach that users can use to configure the dashboard according to
their needs. The model also reflects the customization, resulting in a continuous feedback loop.
The proposed approach enables the users to rapidly prototype and deploy dashboards to validate
and evaluate their designs. Mod2Dash is also beneficial for researchers focusing on information

1Grafana: https://grafana.com/
2Kibana: https://www.elastic.co/kibana/

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Mod2Dash

172:3

visualization, as it enables them to create dashboard prototypes, generate dashboards, test on real
stakeholder audiences, gather feedback, and improve dashboards in a fast and efficient manner.

We experimentally evaluated Mod2Dash’s effectiveness based on a case study of cyber security
visualization for decision support. We systematically collected, selected, and analyzed 31 cyber
security dashboards from various sources of real-world scenarios. A proof-of-concept of Mod2Dash
was developed for modeling and reconstructing the selected 31 dashboards. Finally, we relied on
a human-assisted study to count the matching design decisions between the original baseline
dashboard and the dashboard constructed by Mod2Dash. The analysis and comparison of the
counting on design decisions show a close matching between the pairs of dashboards, which means
that Mod2Dash effectively captures dashboard designs and generates dashboards for real-world
scenarios. Below are the main contributions of this paper:

• We propose a novel and comprehensive dashboard language as a visualization model.
• We present an automated dashboard generation approach based on the proposed dashboard
language, whereby different interpreters are designed to generate diverse dashboard designs.
• We present a GUI-driven customization approach, which allows a continuous feedback loop

to improve the dashboard and reflect the dashboard design decisions to the model.

• We introduce the architecture design and a combination of open-source software technologies
that can support such a dashboard framework and introduce the proof-of-concept of our
proposed approach.

The rest of this paper is organized as follows. Section 2 outlines the review of related works
regarding the visualization modeling language and automated dashboard generation. Section 3
presents the proposed Mod2Dash framework design. Section 4 introduces the detailed technologies
that we used in the implementation. Section 5 describes the case study evaluation of Mod2Dash,
and Section 6 concludes our findings and future work.

2 RELATED WORK
In this section, we discuss key researches related to visualization modeling languages and automated
dashboard generation, which are essential fundamentals to our proposed approach for building an
automated mechanism for creating dashboards.

2.1 Visualization Modeling Language
The data visualization languages can be regarded as either a manual or grammar that specifies
how visualizations should be built and how they relate to data. Languages utilizing model-driven
approaches facilitate the transition from hard-coding to models, thereby increasing productivity
and scalability by describing critical aspects of a solution in a user-friendly manner and providing
standardized templates for implementing the solution [30].

Different programming languages have data visualization libraries or packages, for example,
Matplotlib3 for Python and ggplot24 for R5. However, data visualization languages start from D36.
D3 [19] allows users to capture their visualization designs and input data into arbitrary document
elements. A dynamic transforming mechanism generates and modifies data visualization interfaces
by combining visualization and interaction techniques.

While D3 is a supporting layer better suited for novel design ideas, Vega is a higher-level visual-
ization specification language on top of D3 [39]. Vega [29] provides a system architecture focused

3Matplotlib: https://matplotlib.org/
4ggplot2: https://ggplot2.tidyverse.org/
5R Programming Language: https://www.r-project.org/
6D3: https://d3js.org/

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:4

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

on declarative visual and interactive design for data visualization. Vega implements a reusable
and shareable chart component that automatically generates customizable and programmatic
visualizations [39].

Vega-Lite7 [28] is a subset and extension of Vega. It provides graphics and visual encoding rules,
the compiler ingests a portable JSON syntax, and generates low-level Vega specifications. Especially,
Vega-Lite introduces selections concept in the specifications and parameterizes visual encoding into
interactive features. The publication of Vega-Lite is a milestone in the data visualization area. It
facilities the development of research areas such as visualization recommendation, infographics
authoring, and image reverse-engineering. For example, Data2Vis [8] formulates visualization
recommendation as a language translation problem. It recommends visualization by mapping and
translating data specifications to visualization specifications in the Vega-Lite language. Poco and
Heer [21] investigate transforming a chart image into Vega-Lite-like visual encoding in reverse-
engineering research.

The above languages [19, 28, 29] focus on chart-level visualization or accumulating several
different charts. They capture the design decisions in a single chart or interact with several associated
charts. However, they are not capable of more design elements at a dashboard level, such as chart
locations and dashboard-level interactions. Moreover, the coming era of big data requires presenting
and visualizing knowledge from a massive volume of data [34]. A single chart or few charts cannot
present the whole picture of the knowledge. Therefore, a more comprehensive dashboard-level
visualization language is important to present complex data and relationships.

2.2 Automated Dashboard Generation

Table 1. Related work in model-driven dashboard generation.

Reference

Discipline

Layout

Chart
Interaction

Widget
Interaction

Palpanas
al.[5, 20]

et

Business

Kintz et al.[13,
14]

Vazquez-
Ingelmo
al.[35, 37, 38]

et

Business

Knowledge/
Interactions

Mod2Dash

Generic

Hard coded
Template

Hard coded
Template

Widget Size

Widget Size
Location

✕✕✕

✓✓✓

✓✓✓

✓✓✓

✕✕✕

✕✕✕

✕✕✕

✓✓✓

Customization

Model-based

Model-based

Model-based

Model-based
GUI-based
More than 22 features

The automated dashboard generation process is the mechanism that generates dashboards
automatically based on the rules. The research on this topic can be divided into data automation
and visualization automation. Data automation focuses on data aggregation and data preparation.
For example, the solution implemented by Riege [23] presents automated data filtering techniques
in manufacturing sensor environments to find the most critical data and filter out the out-of-
control data before visualizing it in a dashboard. Garabet et al. [33] propose a module concept

7Vega-Lite: https://vega.github.io/vega-lite/

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Mod2Dash

172:5

in the manufacturing environments to deal with packaging information before being fed into a
visualization template to fulfill dashboard automation.

However, the present work discusses automation in visualization generation, especially the
model-driven dashboard visualization frameworks. Three series of research dedicated to creating
dashboards upon dashboard languages, as shown and compared in Table 1. Chowdhary et al. [5]
and Palpanas et al. [20] use the XML meta-model representation to define a dashboard for modeling
and visualizing business performance. Their model captures user roles, data metrics, user interface
templates, pages, and menus. They also map the model with hardcoded and predefined report
templates. The code generator is designed to be modified in the deployment environment and
generates deployable software components, and the final dashboard application is deployed on a
J2EE application server. The approach proposed by Kintz et al. [13, 14] also uses XML to describe a
dashboard for monitoring and controlling business processes. Kintz [13] captures generic dashboard
information, dashboard visualization elements, alerting, interactions, and data. Kintz et al. [14]
expand the model by adding roles and views into the meta-model. They implement the visualization
mechanism in a web browser-based JavaScript interface.

Vazquez-Ingelmo et al. [35, 37, 38] conduct a series of studies and also proved the meta-model’s
usability in different disciplines when building a dashboard. For example, in [35], they propose a
dashboard meta-model that mainly elaborates the user, the size of the container, and the components
in a healthcare knowledge management case. In [38], the authors model interaction patterns by
using XML specifications in a learning analytics case. A proof-of-concept in [37] is developed
utilizing the Software Product Line generation process and based on Vega-Lite chart language.

As shown in Table 1, among these dashboard languages, Palpanas et al. [5, 20] and Kintz et
al. [13, 14] propose the dashboard meta-model for monitoring business performance, while the
approaches proposed by Vazquez-Ingelmo et al. [35, 37, 38] focus on integrating the dashboard
meta-model with other meta-models (e.g., knowledge management in learning ecosystem and
interactions). However, these dashboard languages have limited generalizability to other disciplines
due to the design constraints for the particular use cases. Therefore, the Mod2Dash dashboard
language will target a more generic dashboard visualization language and be designed as a pure
visualization language for real-world cross-discipline dashboard generation.

All these dashboard languages fail to represent the dashboard layout and widget location. Pal-
panas et al. [20] and Kintz et al. [14] map the model with pre-defined templates to generate the
dashboard. Vazquez-Ingelmo et al. [35, 37, 38] design the widget size but fail to consider organizing
the widget location in their meta-model.

Two of these approaches rule the chart-level interactions in the model. For example, Kintz et
al. [14] provide interaction capabilities such as Zoom, Pan, and Drill down. Vazquez-Ingelmo et al.
[35] also mention the Drill down interaction design in their model. However, their designs stay at
chart-level interaction, and they fail to represent more comprehensive interactions at the dashboard
level, which we will discuss in Section 3.2.

The models rule how the personalized visualization will be presented, so the diversity of cus-
tomization functions mainly depends on the model design. All the dashboard languages mentioned
above provide a limited number of model-based customization and do not attempt to provide
reversed GUI-based customization. However, Mod2Dash provides more than 22 customization
features and provides a GUI-based customization approach, which will be discussed in Section 3.4.

3 MOD2DASH
In this section, we first present the preliminary of our approach, including the motivating example,
the approach workflow, and the usage scenario. Then we introduce three main components of our
approach in detail.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:6

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

3.1 Preliminary

Fig. 1. Cyber security dashboard prototyping and validating.

3.1.1 Motivating Example. Figure 1 shows a motivating example of our approach, which is a
dashboard prototyping and validating project in the cyber security domain.

In this example, the dashboard practitioners are executives, data engineers, and user interface
(UI) designers. The executives know what information is helpful for their CSA and decision-making,
and they are the final consumers of the dashboard. The data engineers have organizational CSA
knowledge and what data can be offered and fed into the dashboard. Finally, the UI designers
analyze the dashboard requirements, design the visual and interactive effects, and deliver to the
development and validation phases. All of them contribute to dashboard design decisions; however,
practitioners sometimes change designs rapidly or significantly to produce a final dashboard. During
the development process, they need to communicate and version-control the changes.

As the example illustrates, we may be able to create a unified language to express dashboard
design decisions made by all parties and develop an automated dashboard composition process to
translate that language into an operational dashboard. Consequently, the dashboard practitioners
can version control their designs, quickly prototype their designs, and collaborate on improving
their designs.

3.1.2 Workflow and Usage Scenario. Mod2Dash is designed to address the challenges faced by
dashboard practitioners when capturing their design decisions, transforming their design decisions
into real dashboards, and improving the dashboard designs.

Mod2Dash proposes a meta-model, which describes the possible entities and relationships used in
the concrete dashboard models, and it allows dashboard practitioners to encapsulate their implicit
design decisions in a dashboard model. A dashboard generation mechanism is also designed to
automate the process of turning the dashboard model into an actual dashboard to assist dashboard
practitioners in prototyping their designs and communicating with others. Moreover, a GUI-based
customization capacity is also proposed for practitioners continuously improve dashboard designs.
The overall workflow of Mod2Dash is shown in Figure 2. Its usage scenarios are as follows:

First, dashboard practitioners capture the dashboard design decisions (e.g., visualization tech-
niques, dashboard layout, theme, widgets, and interactions) into a dashboard model, and this
process can be done manually, semi-automatically, or automatically by following the proposed

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

ExecutivesWhat information constitute CSAHow to make better decisionsKnowledgePractitionersDashboard Design DecisionsWhat data can be usedWhat data format can be providedHow to present the informationHow to interactData engineersDesignersContent Visualization techniquesLayoutThemeWidgetsInteractionsDashboard DesignPrototyping, Validating, and ImprovingMod2Dash

172:7

Fig. 2. Mod2Dash overall workflow. Dashboard practitioners’ implicit design decisions are captured in
the dashboard visualization model by following the dashboard visualization language grammar. Next, the
model is fed into the automated dashboard composition mechanism to generate an operational dashboard.
The dashboard designs can then be fine-tuned through the GUI-based customization approach, and the
updated dashboard model will also reflect the changes and be stored.

dashboard language. If the dashboard practitioner has coding experience, she can write the model
from the beginning or use other programming languages (e.g., Python, Java, and JavaScript) to
generate or improve a dashboard model in a large-scale and automatic setting by following the
proposed dashboard language (see Section 3.2). If the practitioner is unfamiliar with coding, she
may construct this dashboard model by dragging and dropping the widget in the GUI customization
mode. Then the dashboard model can be generated accordingly and stored (see Section 3.4).

Second, the visualization model is directly fed to the automated dashboard composition mecha-
nism, and the mechanism can build a web-based operational dashboard from the model. The user
can import their pre-defined dashboard model into the mechanism for quickly prototyping her
dashboard design, and her team members can see the design, give feedback, or further improve the
design based on the existing model.

Then, the GUI-driven customization approach allows the practitioner to fine-tune the dashboard
designs. For example, if the dashboard is built based on the hand-coded or script-generated visual-
ization model, it may not fulfill the design requirements; the practitioner can manually adjust the
elements in the dashboard via the GUI customization mode.

Finally, the improved dashboard design decisions are stored as the updated visualization model.

So the feedback loop allows the practitioners to improve the dashboard in iteration.

The following subsections discuss how the Mod2Dash approach is designed in detail.

3.2 Dashboard Visualization Language
The dashboard visualization language serves as a grammar that describes how the visualization
should be presented and the skeleton upon which dashboard generation can be automated. The
dashboard language can help dashboard practitioners capture their designs into a model so that the
designs can be version-controlled, backed up, and collaborated among teams. From the perspective
of software engineering, the model-driven approach facilitates the transformation of the software

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Dashboard PractitionersDesign DecisionsContent Visual Techniques Layout ThemeWidgets Interactions FeaturesDashboard Visualization LanguageDashboard Model B2Menu ListerAPage FramerB1Layout GeneratorB2Widget AdaptorB3Interaction GeneratorB4DashboardMenuPageWidgetWidget InteractionWidgetTableItem 1Item 2WidgetValueA. DashboardDesign DecisionsB. Dashboard VisualizationLanguageC. Automated DashboardCompositionD. DashboardCustomizationDashboard Level APage Level B1Widget Level B3Interaction Level B4B2172:8

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

development process from hard-coding to modeling. The productivity and scalability of the devel-
opment can be increased by using commonly applicable templates and describing essential aspects
of the solution in a human-friendly manner [30].

This subsection presents our process for designing the dashboard model and the detail of the

proposed language.

3.2.1 Dashboard Prototyping Design. The dashboard is not simply the accumulation of multiple
charts, and it involves many design aspects. Therefore, to make the dashboard visualization language
reflect and be capable with the real-world dashboards, we firstly examined the dashboard designs
from the "Information Dashboard Design" book by Few [10] and the dashboards collected by Sarikaya
et al. [27], we then conceptualize a dashboard prototyping design. As we can see in Figure 3, a
dashboard should have the main content page and a menu for navigating between the different pages.
Each widget on a page could be different in size and is composed of different visual representation
techniques (e.g., charts, tables, and values).

Fig. 3. The dashboard frame
prototyping design.

Fig. 4. The meta-model of Mod2Dash dashboard visualization language.

3.2.2 Meta-Model. We get inspired further by previous model-driven automated dashboard gen-
eration research [5, 13, 35, 38] and chart-level data visualization language research [19, 28, 29].
According to the prototyping design shown in Figure 3, the dashboard visualization language should
consist of three main elements: the components, the layout, and the functions. The components
are the visual elements such as menu, widgets, and charts, including their visual properties such
as color, font size, and axis. The layout is how these components are located and organized in a
dashboard. And the functions include the interactions and the data connections.

Considering all these ideas, we design a four-level hierarchy meta-model structure for capturing
the generic properties and configurations of dashboard representations. Figure 4 shows the meta-
model of the proposed dashboard visualization language. Here we discuss each hierarchy in detail:

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

DashboardMenuPageWidgetTableItem 1Item 2WidgetValueWidgetWidgetWidget Interaction1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60

Mod2Dash

172:9

Listing 1. A simple dashboard model example in JSON.
{

" i d " :
" name " :
" theme " :
" p a g e s " :
{

" D a s h b o a r d _ S a m p l e " ,

" Sample Dashboard " ,

" l i g h t " ,
[

" 0 " ,

" i d " :
" name " :
" w i d g e t s " :
{

[

" Sample Page " ,

" i d " :
" p r o p e r t i e s " :

" p0 − i 0 " ,

{

" v i s t y p e " :
" t i t l e " :

" t i t l e " ,

" Sample T i t l e Widget "

} ,
" l a y o u t " :

{
"w" : 4 ,
" h " : 2 ,
" x " : 0 ,
" y " : 0

}

} ,
{

" p0 − i 1 " ,

" i d " :
" name " :
" p r o p e r t i e s " :

{

" Sample P i e Widget " ,

Fig. 5. The dashboard generated from the simple dash-
board model in Listing 1. In this example, the dash-
board is in a light theme and includes one page. The
page includes two widgets, one is a title widget, and
another one is a pie chart widget. The pie chart has
three values with three colors, and the interaction in
this widget is Detail on demand.

" v i s t y p e " :
" c h i l d r e n n a m e " :

" p i e " ,
[

" V a l u e 1 " ,
" V a l u e 2 " ,
" V a l u e 3 "

]

} ,
" l a y o u t " :

{
"w" : 4 ,
" h " : 8 ,
" x " : 0 ,
" y " : 2

} ,
" v i s c o n f i g " :

{

" c o l o u r " :

[

" # 8 2 b 3 6 5 " ,
" # 9 6 7 3 a6 " ,
" #6 c 8 e c 0 "

]

} ,
" i n t e r a c t i o n " :

{

" i n t e r a c t i o n s " :

[

" D e t a i l on demand "

] ,
" d e t a i l " :

{

" t a r g e t " :
" method " :

" 0 " ,
" p u r e "

}

}

}

]

}

}

]

•

•

•

Dashboard is the frame of the web application. Dashboard is the top hierarchy of the
model, the class Dashboard includes parameters: dashboard ID, dashboard name, theme, and
children pages. The name of Dashboard is the title of the web application, Dashboard consists
of more than one Pages.

Page is the main content in a dashboards, consisting a group of Widgets. The Page class
includes parameters: page ID, page name, and children widgets. The names of the Page are
used to generate the navigation menu, and different pages can be navigated from the menu
or detail on demand interaction feature.

Widget is the basic element in the visualization. It frames the chart, text, or table. It is
named container, chart, or panel in other research or products. In the dashboard model, the

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:10

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

widget level hierarchy describes where the widget is located and how the widget is visualized.
It contains parameters: widget ID, widget name, metric ID, interactions, and a series of
optional objects such as visualization properties, layout, and visualization configuration.

•

Interactions at the dashboard level and widget level are different from the interactions
provided by the chart. Dashboards provide more interactive features than the built-in in-
teractions of a chart library. Therefore, this paper focuses on the dashboard and widget
interactions rather than the interactions provided at the chart level. The Interaction class
describes what interactions will be used for a particular widget and detailed configuration
properties for the interaction.

3.2.3 Dashboard Model. We adopt JSON8 (a JavaScript Object Notation) to represent a dashboard
specification. JSON is a commonly used data-interchange language, and it is supported in most
major programming languages [41]. We can formulate a dashboard representation by following
the JSON language syntax and meta-model design mentioned above. Listing 1 shows a simple

8JSON: https://www.json.org/

Fig. 6. Model example of a cyber security dashboard, including the four-level hierarchy models.
model structure of dashboard-level properties,

is the configuration of a page in the dashboard,

are the sample model of widget-level properties (i.e., locations and visual configurations), and

is a sample
and
is the

specification of the interactions.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Map visualization techniquesB3Widget propertiesInteraction propertiesB4Locate the widgetsB2B1Menu ListerPage FramerLayout GeneratorWidget AdaptorParParGenerate interactions and functionsWidget propertiesPage propertiesDashboard propertiesWidget propertiesAInteraction GeneratorAB1B2B3B4Build the pageMod2Dash

172:11

dashboard model example, the dashboard contains two widgets on one page, and the corresponding
dashboard is shown in Figure 5.

Thus, the dashboard practitioners can capture their dashboard designs into a model according
to their real-world dashboard design requirements. Figure 6 shows another more complex model
example from a cyber security dashboard. This example highlights the four-level hierarchy meta-
model structure design.

3.3 Automated Dashboard Composition
When the dashboard visualization model has been created, the automated dashboard generation
mechanism allows the dashboard practitioners’ design decisions to be presented instantly to
effectively communicate and validate the dashboard design.

Fig. 7. Mod2Dash automated dashboard composition workflow.
extracts pages names, and generates the menu for the dashboard.

uses the widget-level model to locate each widget one by one, and

to render different visualization techniques. Finally,
interaction features. In the sequence of renderings,

takes the whole dashboard-level model,
uses page-level model to frame a page.
also uses the widget-level model
takes the interaction-level model to generate the
are rendered in parallel.

and the series of

Figure 7 shows the overview of the dashboard composition mechanism, especially how the
dashboard model flows in different composition interpreters. Below we describe the dashboard
composition interpreters and the automated rendering procedures in detail.

• Menu Lister reads and extracts the page names from the model and generates a clickable
menu at the top left of the dashboard. When the user clicks an item in the menu, the Page
Framer will be triggered to render the corresponding dashboard page.

•

•

Page Framer reads the current page number from the URL when a page is navigated, and it
also reads the page-level model to generate the page. The Layout Generator will be instantiated
in Page Frame with the widget-level parameters. The process happens synchronously with
the Menu Lister.

Layout Generator reads widget layout properties in widget-level models, which are
passed from the Page Framer, and allocates each widget at the corresponding location. Each
location will instantiate a Widget Adaptor to render a chart component. This step builds up
the skeleton of the dashboard.

• Widget Adaptor is a basic interpreter to render widget-level design decisions. It maps
different visualization types into web-based widget components according to the widget-
level model. The individual widget component interprets detailed configurations, such as
the composition of metrics, color combinations, legend settings, and axis settings. If the

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Menu ListerAPage FramerB1ParPage LevelDashboard LevelLayout GeneratorB2Widget LevelInteraction LevelInteraction GeneratorB4Widget AdaptorB3Widget LevelMenuParMenuDashboardTableItem 1MenuDashboardTableItem 1Dashboard ModelMenuLoop172:12

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

interactions exist in the current widget, the Interaction Generator will be instantiated by
passing the interaction-level model.

•

Interaction Generator instantiates interactions and triggering functions based on the
detailed interaction configuration parameters. For example, if the interaction type is Detail
on demand, Interaction Generator will render an icon representing the feature; if the user
clicks it, the corresponding function will be triggered and jump to a new page.

Figure 6 shows the detailed dashboard composition mechanism for the aforementioned cyber
security dashboard model; it details the procedures of the proposed approach translating the sample
and generates
model into a web-based dashboard. Menu Lister uses the dashboard-level model
to render the current
the navigation menu. Next,
,
page. Then
to locate each widget, and Widget Adaptor reads the widget-level visual properties
to map
different visualization configurations with widget components. Finally,
Interaction Generator
reads the interaction-level model

Layout Generator reads the widget-level model, especially location properties

Page Framer takes the page-level model

to generate interactions and functions.

After the composition procedure above, a fully operational dashboard is built, and the resulting
dashboard can be quickly presented to others, validate the design, and gather feedback to improve
the dashboard design further.

3.4 Dashboard Customization
"The dashboard must be specifically to the requirements of a given person, group, or function" [10]. The
customization feature is essential for building a specific dashboard that helps users in a particular
use case. The visualization configuration is also widely applied in dashboard practices [18].

Fig. 8. Dashboard visualization building and configuring steps in the GUI.

The actual dashboard produced by the auto-generation process from the initial model will never
match the original design and the use case. Therefore, the GUI-driven customization approach allows
dashboard users to tailor the dashboard to match their particular use cases, and the customization
will also be reflected in the model, creating an improvement feedback loop.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

2Choose Visualization  Technique3Setup visualization andinteraction parameters5Drag and drop thewidget to relocate4Drag here toresize1Select ConﬁgureInteraction tostart customize1Add new elements67Save the visualization modelMod2Dash

172:13

Mod2Dash enables the user to choose from different visualization techniques, drag and drop
to move widgets around, drag to resize the widgets, and manipulate the element color in a chart.
Besides these basic visualization configurations, Mod2Dash provides configuration features in
different components or levels, even the ability to configure the layout of the elements inside a
widget, which is benefited from the four-level hierarchy dashboard language design. Moreover,
Mod2Dash provides configurations on interactions. Table 2 shows the customization features that
Mod2Dash offers.

The customization features rely on a GUI implementation, and users can create new elements or
configure the existing elements of the dashboard through the GUI in the configuration mode. We
describe the building and configuring procedure below, and Figure 8 also shows this procedure.

Table 2. The customization features that Mod2Dash provides.

Configuration Item
name

Dashboard

theme

base data model
switch model
new page
name

Page

Widget

layout

new widget
name
visualization
resize

move

color

metric id

Chart
Element

Interaction

layout
disable legend
legend position
baseline

font size
disable axis label
interac-
select
tions
configure interac-
tions

Description
The dashboard name is customizable, it shows as the title of
the dashboard.
It includes dark and light themes, the user is able to choose
from them.
Base model is pointing to the data model.
The user is able to switch between dashboard models.
Create a new page via GUI.
The page name is customizable, it is shown at the navigation
menu.
The layout of the page is customizable by drag and drop the
widget.
Add a new widget to the page via GUI.
The widget name is shown as the widget title.
Many different visualization techniques can be chosen.
The widget’s size can be controlled by dragging the widget
edge in the editing mode.
The widget can be relocate to a new location by dragging on
the widget.
The background color of the widget is customizable by a
color picker.
Which metric is showing in this widget can be selected, can
be set with multiple metrics for some visualization.
The layout of the elements inside a widget is customizable.
The legend can be hided.
The position of the legend in the chart is configurable.
The baseline for line chart and bar chart can be set to moving
average or deviation.
The font size of single value widget is configurable.
The label for x axis and y axis can be disabled.
The interaction is configurable for a widget, such as detail
on demand, share, zoom, refresh, configuration, close.
The properties that when triggering an interaction are con-
figurable.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:14

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

• Step1: Start by adding new pages or widgets on the toolkit or selecting the configuration
interaction icon on the widget. The GUI will pop out a side window for configuration.
• Step2: If choosing to add a new widget or edit a widget, the first level side window allows
users to choose visualization techniques. After selecting a visualization technique, the GUI
will pop out the second-level side window.

• Step3: If choosing to add a new page or select the visualization technique, the second level
side window allows users to set up visualization properties and interaction parameters. After
choosing and typing in the required information, a corresponding widget will be rendered
on the page, and the new widget will be automatically inserted at the bottom of the current
page.

• Step4: In the configuration mode, the widget is resizable, and the user can drag the resize
icon on a widget to resize the widget. The content inside a widget frame is also adaptable
based on the widget size.

• Step5: In the configuration mode, the widget is also draggable to relocate.
• Step6: Redo the Step1 to Step5 to add or configure more widgets until fulfill the dashboard

design requirements.

• Step7: The user’s operation in each step results in a new model. Click the save button to save

the visualization model to the database.

4 IMPLEMENTATION
Mod2Dash can be developed based on a combination of open-source software technologies. The
deployment of Mod2Dash resembles a client-server database architecture, and all the components
of the system reside on one computing host. This section describes the details of how Mod2Dash
can be developed and deployed.

4.1 Architecture
To support such a proposed mechanism, when considering the three core features of Mod2Dash
design, we plan to implement it in a client-server database architecture [7]. Figure 9 shows the
deployment architecture of Mod2Dash.

The frontend web application is designed as a client-side application, and it involves the visual
and interactive elements for the users. In this case, the frontend can generate dashboards based on
different level interpreters, present the dashboard generation results, and customize the dashboard
design. The frontend runs as a web service by the Web Hosting and is accessed via a web browser.
When the Widget Adaptor populates the visualization, it requests data from the API Gateway.
Furthermore, the updated model will be saved in the database via the API Gateway when the user
customizes the dashboard design.

The backend includes the server-side of the application and the supporting database. The core of
the backend is the API Gateway, which handles requests from the frontend, saves new customization,
and returns the requested data. The data is stored in a MongoDB database, and two Data Collections
are designed to store the Mod2Dash dashboard model and the corresponding random metric values.

The frontend web hosting and backend service run on the same cloud server.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Mod2Dash

172:15

Fig. 9. Deployment architecture design of Mod2Dash.

4.2 Technologies
The implementation of the frontend is based on ReactJS9 (a JavaScript framework), the main UI
frameworks include Ant Design10 (a UI framework with chart libraries), React Grid Layout11 (a
grid layout control system for React), React Gauge Chart12 (a library for Gauge Chart) and nivo13
(a rich set of dataviz components), the request sent from frontend to backend is handled by axios14
(a promise based HTTP client for the browser and node.js).

All services in the backend are disclosed by RESTful APIs, which are written by Flask15 (a
lightweight web application framework) and Swagger16 (an interface description language for
describing RESTful APIs). The backend service is deployed by Gunicorn17 (a Python WSGI HTTP
Server). We use MongoDB18 (a NoSQL database program) to store all the data and configuration.

The whole system can be deployed on an Amazon Elastic Compute Cloud19.

5 EVALUATION
This section discusses the evaluation methodology and the results. This evaluation aims to quantify
the effectiveness of Mod2Dash in real-world dashboard generation scenarios, namely, to answer the
research question "How effective that Mod2Dash can represent and reproduce the dashboard design
decisions?".

5.1 Methodology
5.1.1 Case Study. Case studies formed the basis of our overall research strategy since case studies
are empirical methods for investigating contemporary phenomena in the real-life context [1, 26, 42,
43]. The Mod2Dash approach is designed for and applicable across various real-world disciplines

9ReactJS: https://reactjs.org/
10Ant Design: https://ant.design/
11React Grid Layout: https://github.com/react-grid-layout/react-grid-layout
12React Gauge Chart: https://github.com/Martin36/react-gauge-chart
13nivo: https://nivo.rocks/
14axios: https://github.com/axios/axios
15Flask: https://palletsprojects.com/p/flask/
16Swagger: https://swagger.io/
17Gunicorn: https://gunicorn.org/
18MongoDB: https://www.mongodb.com/
19Amazon EC2: https://aws.amazon.com/ec2/

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

ClientServerDatabaseDatabaseData CollectionsStore ControlWeb HostingAPI GatewayDashboardVisualizationRequestModelMetricsHTTPS172:16

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

with uncontrollable variables in the context. Thus, the case study is an appropriate methodology to
perform this evaluation. The evaluation was conducted by following the guidelines and checklists
for the software engineering case study provided by Runeson and Höst [26].

To evaluate the effectiveness of Mod2Dash, we conducted a case study on cyber security dash-
boards for cyber situational awareness (CSA) and decision support in real-world environments.
We collected and selected 31 cyber security dashboards from the wild, then used our approach
to model and rebuild all of these 31 dashboards. The effectiveness in this context is the ability of
Mod2Dash to represent and reproduce diverse real-world dashboard design decisions.

Fig. 10. CSA visualization that proposed by Livnat et al.[17] in 2005.

5.1.2 Real-life Context. Dashboards are used to monitor and visualize cyber incidents, trends, and
threats in the cyber security domain. For example, academic researchers propose novel approaches
and mechanisms for enhancing CSA, and dashboard prototypes are designed and developed to illus-
trate their proposals. Companies in the industry use the dashboards provided by software vendors
(e.g., SIEM20, IDS21) to monitor cyber incidents and visualize the key metrics. Design professionals
collaborate with security analysts to apply new graphic design elements to conceptualize better
cyber security dashboards.

Utilizing visualization techniques to enhance CSA is a continuously improving process, con-
tributed by cyber data processing and graphical techniques. In 2005, Livnat et al. [17] presented a
concise and scalable representation of the alert attributes in a network intrusion detection system
to enhance users’ situational awareness (Figure 10). Since 2013, CSA visualization research has been
emerging [12]. Goodall et al. [11] propose a system to detect and visualize attacks and abnormal
network activity. The proposed dashboard (Figure 11) enables operators to identify and investigate
the situation and provides context to help operators understand the situation. Kodituwakku et
al. [15] propose a visual analysis platform (Figure 12) for visualizing real-time data in large-scale
networks to provide computer network CSA for security analysts and researchers.

To the best of our experience and knowledge, Mod2Dash is the first trial to use the model-driven

automated approach to build dashboards in the cyber security domain.

5.2 Data Collection
5.2.1 Dashboards Collection Process. We widely collected cyber-related dashboards as part of the
effort to make the dashboards dataset practical, comprehensive, and reflect real-life context. Each
author explored and downloaded his own set of cyber security visualizations that he believed might
qualify as dashboards. We then combined these dashboards with the dashboard collection from [27]
and used inclusion and exclusion criteria (Table 5 in Appendix) to identify whether a dashboard

20SIEM: Security information and event management
21IDS: Intrusion detection system

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Mod2Dash

172:17

Fig. 11. Dashboard that proposed by Goodall et al. [11]
in 2019 (left) and the replica generated by Mod2Dash
approach (right).

Fig. 12. Dashboard that proposed by Kodi-
tuwakku, Keller and Gregor [15] in 2020 (left)
and the replica generated by Mod2Dash approach
(right).

could be selected for the final collection. The final dashboard collection included 31 dashboards
after applying the inclusion and exclusion criteria.

5.2.2 Design Decisions Extraction. Each dashboard captures a set of design decisions, reflecting
the dashboard practitioners’ knowledge and understanding of their CSA and decision support. In
order to simulate the process of creating dashboards based on the practitioners’ models, we must
first examine the practitioners’ design decisions. Therefore, we carried out an analysis of design
decisions among these 31 dashboards.

We followed a predefined protocol and procedure to ensure the design decisions we extracted
were accurate and precise. First, two authors read through all the dashboards one by one and
recorded potential design parameters that could match the Mod2Dash dashboard language. Second,
two authors performed the formal extraction process. Third, all authors checked and confirmed
that all data was correctly extracted.

5.2.3 Proof-of-Concept Development. Based on the Mod2Dash design presented in Section 3 and the
utilization of the techniques presented in Section 4, we developed a proof-of-concept of Mod2Dash.
We implemented the dashboard models in JSON format, which the frontend could directly access
and store in the database. We then developed the automated dashboard generation mechanism
based on reading the JSON model from the API and translating it into a web-based application
by multiple levels of interpreters. We also developed GUI-driven customization features to enable
users to continue improving the dashboards.

5.2.4 Dashboards Reconstruct. We employed the Mod2Dash approach to reconstruct the selected
31 cyber security dashboards. Our goal was to capture as many practitioners’ design decisions
as possible in the Mod2Dash dashboard model and replicate these dashboards in a web-based
application as closely as possible to the original dashboards. We followed the steps below to build
and improve a dashboard. Figure 2 also illustrates the overview workflow for building a dashboard
by using the Mod2Dash approach.

• The authors examined the original dashboard and captured the design decisions in the model.
• The authors stored the model in the database.
• The frontend read from the backend and built the dashboard according to the model.
• The authors checked the initial dashboard implementation result and compared it with the

original dashboard.

• The authors kept improving the dashboard via the GUI until the dashboard presents as similar

as possible to the baseline dashboard.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:18

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

5.2.5 Human-assisted Study. End users consume the dashboard design, and the performance of the
proposed approach in the cyber context should be examined by real users in the cyber security and
data analysis domain. Thus, we conducted a human-assisted study to quantify the effectiveness
of the Mod2Dash approach. Furthermore, this study aims to identify matching dashboard design
decisions in the original baseline dashboard and the dashboard constructed by Mod2Dash.

We recruited more than one participant to reduce errors in identifying the design decisions. Four
Ph.D. students were recruited to conduct this evaluation. They have an average of 2.75 years of
experience in the data analysis and cyber security domains.

The baseline dashboards were collected from the wild in image format, which means that the
interactive features may not be interactive. We relied on the dashboard image and our understanding
to analyze interactive features during the data extraction process. Equivalently, in the evaluation,
we screenshotted the dashboards and printed out both original and replica dashboards on the same
page for quick and easy comparison. We also provided a form (Table 3) with a set of metrics for
each dashboard to help the participants follow the procedure.

The evaluation session began with a 10-minute introduction of visualization background knowl-
edge, after which the evaluation protocol and rules were briefly discussed. Then, the participants
were required to compare a pair of dashboards one by one, decompose the elements in the dash-
boards in their minds, and find the major design decisions (e.g., data representation format and
visualization techniques), minor design decisions (e.g., dashboard layout, color selection, and
theme), and interactions on the pair dashboards. The participants counted the design decisions in

Table 3. Evaluation form used for each dashboard.

Major Design Decisions

Minor Design Decisions

Interactions

Compare (Number)

The participants were required to count what they think are
the major design decisions on original dashboards and replica
dashboards. Major design decisions include data representation
format, and visualization techniques.
The participants were required to count what they think are
the minor design decisions on original dashboards and replica
dashboards. Minor design decisions include dashboard layout,
color selection, and theme.
The participants were required to count what they think are the
interactions, such as buttons, and icons.

Impression (Rate 0-10)
Overall Performance Impression Overall impression about how well Mod2Dash rebuilds the dash-

Correctness
Visualization

Understandability

Expressiveness

board.
The correctness when Mod2Dash rebuilds the dashboard.
The visualization rating when comparing replica dashboard with
the original one.
The rating about whether the visualization is understandable
when comparing Mod2Dash with the original one.
The rating about whether the visualization is expressive when
comparing Mod2Dash with the original one.

Feedback
General feedback about how well Mod2Dash rebuilds this dashboard, detailed feedback about how
Mod2Dash can be improved.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Mod2Dash

172:19

the original baseline dashboard first and then looked for matching design decisions in the replica
dashboard. Participants may have different understandings of the design, and they were encouraged
to identify the items based on their knowledge and understanding. However, the design decisions
found in the replica dashboards are not allowed to be more than the original baseline dashboard.
The participants were requested to fill in the Compare section (Table 3) during the counting and
rate the performance impression about the current dashboard reconstruction (Impression section
in Table 3) after reviewing each pair of dashboards. The rating items include overall performance
impression, correctness, visualization, understandability, expressiveness. The impression ratings
should be in the range of 0 to 10. The participants were also required to give feedback (Feedback
section in Table 3) for each dashboard reconstruction. Each evaluation session for a participant
took about 2 hours. We awarded a $60 gift card to each participant.

5.3 Results
This subsection discusses the results of the real-world dashboard collection, the reconstruction of
31 cyber security dashboards, and the effectiveness of Mod2Dash.

5.3.1 Demographics. The cyber security dashboards (contemporary phenomena in the real-life
context of this case study) are coming from diverse sources, and the characteristics of these
dashboards are also diverse and complex.

The sources of cyber security dashboards are diverse. As shown in Table 4, we categorized
the source distribution of these dashboards: (1) research papers with the topic of cyber security
visualization or dashboard (5 dashboards, 16.13%), (2) industry practices in cyber security solution
system (20 dashboards, 64.52%), with characters of "SIEM", "Security Dashboard" (e.g., SolarWinds22,
OptimEyes.ai23, and IBM QRadar24), (3) Security dashboard visual design in the design sharing
platform Dribbble25 (4 dashboards, 12.90%), (4) Cyber reporting Excel template (2 dashboards,
6.45%).

Table 4. Cyber security dashboard collected from different resources.

Source
Academia

Number Percentage Description
5

16.13%

Industry
Design

20
4

64.52%
12.90%

Reporting

2

6.45%

Research papers with the topic of cyber security visual-
ization or dashboard.
Industry practices in cyber security solution products .
Cyber dashboard visual designs in the design sharing
platform "Dribbble".
Excel reporting templates for cyber security.

We further examined and analyzed these 31 cyber security dashboards to understand the practi-
tioners’ design decisions when they designed and built the dashboards. We found that the charac-
teristics of these dashboards are also diverse and complex.

• Layout is how the components are located in a multiple-view visualization (MV), it is critical
design decision for dashboards. Chen et al. [4] identified 98 unique layouts from 360 MV
designs. Based on their findings, we identified and compressed the dashboard layouts for
(3 dashboards, 9.68%) is the widgets
these 31 dashboards in 4 categories: Standard Grid

22SolarWinds: https://www.solarwinds.com/
23OptimEyes.ai: https://optimeyes.ai/
24IBM QRadar: https://www.ibm.com/au-en/security/security-intelligence/qradar
25Dribbble: https://dribbble.com/

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:20

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

in the dashboard are aligned both horizontally and vertically. Row Oriented means the
dashboard widgets are populated row by row (horizontal), widgets could be not aligned
vertically, and Row Oriented
(18 dashboards, 58.06%) is the most popular design layout for
cyber security dashboards. Column Oriented
(4 dashboards, 12.90%) means the dashboard
widgets are populated column by column (vertial), widgets could be not aligned horizontally.
(6 dashboard, 19.35%) layouts do not strictly follow horizontal or vertical design.
Disordered
• Theme is a set of color combinations for a dashboard. The default setting in the visualization
development is to display black text on a white background[40]. The dark mode became a UI
design trend after the release of the macOS Mojave update [25, 32]. We found that 22 of 31
cyber security dashboards (70.97%) use a light theme, and 9 dashboards (29.03%) use a dark
theme.

• Visualization Techniques are how the data is visualized, and they are the lowest level
elements inside a widget. We identified 18 different Visualization Techniques (i.e., Single
Value, Table, Gauge, Area Chart, Column Chart, Word Cloud, Ring, Map, Composite Chart,
Scatter, Radial Tree, Pie Chart, Bar Chart, Treemap, Line Chart, Bullet, Sankey, and Radar)
during the analysis. We found that Table, Column Chart, and Single Value are the most popular
techniques used in these dashboards. The detailed distribution of these techniques used in
the collection can be found in Figure 15 in the Appendix.

• Widget Number and Visualization Technique Number in a dashboard indicate the data
complexity and the metrics that are monitored in a dashboard. We considered a widget as a
basic unit of data fact, and we treated different data representation formats (e.g., text, table)
and different chart types as different Visualization Technique. As a result, we found that the
maximum number of widgets in a dashboard is 19, and the minimal number is 3, with an
average of 8 widgets among these dashboards. Meanwhile, a dashboard is a comprehensive
use of different visualization techniques. We found the maximal number using different
Visualization Technique in a single dashboard is 7, and the minimal is 2, with an average
of 4. For example, the dashboard in [15] (Figure 12) uses 19 widgets to monitor real-time
and large-scale networks by applying 7 different visualization techniques (i.e., Gauge, Single
Value, Area Chart, Column Chart, Word Cloud, Ring, and Map).

• Interactions in this study are focused more on dashboard-level and widget-level rather than
the interactions in a chart. We extracted interactions from the dashboard description and icons
in the dashboard, we found 8 different interaction types: filter, zoom, share, customization,
detail on demand, refresh, print, and navigation. We found that 19 dashboards (61.29%) provide
dashboard-level interactions and 16 dashboards (51.61%) provide widget-level interactions.

Through the dashboard analysis and design decisions extraction process, we gain insights into
the dashboard practitioners’ design and their understanding of the decision support and CSA.
Furthermore, we have a thorough understanding of dashboards and the diversity of dashboard
designs in real-world environments. The detailed data extraction results are illustrated in Table 6
in the Appendix.

5.3.2 Dashboard Reconstruction. A proof-of-concept of the proposed Mod2Dash framework was
developed during the case study, and all 31 cyber security dashboards were built based on the
framework. The reconstruction results can be found in the Figure 11, Figure 12, Figure 13, and
Figure 16 (in the Appendix). These pairs of comparison screenshots show that the dashboards built
by the Mod2Dash approach represent the designs in the original dashboard well in terms of the
visualization techniques, layout, and color combination.

The following subsection will introduce the quantified effectiveness of the Mod2Dash approach

in representing and reproducing these real-world dashboards.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Mod2Dash

172:21

Fig. 13. Comparison screenshots of the original dashboards and replicas. The first row is the original
baseline dashboards, and the second row is the dashboards generated by the Mod2Dash approach.

5.3.3 Reproduction Rate. The reproduction rate is a metric to measure the effectiveness of Mod2Dash.
It is calculated based on the matching design decision numbers that participants identified during
the human-assisted study session. It illustrates how effective the Mod2Dash approach is adapted to
diverse real-world dashboard environments regarding dashboard model representation for design
decisions and the visual dashboard components generated based on the dashboard model.

The participants found 843 major design decisions in the original dashboards and 802 in replicas,
with a replication rate of 95.13%. The participants identified a total of 803 and 617 minor design
decisions in the original dashboards and the replica dashboards, rendering a reproduction rate
of 76.84%. Participants found 189 interaction buttons or icons in the original dashboards and 85
corresponding replicas interactions, making the overall reproduction rate 44.97%. The raw data
from the human-assisted study composes the Figure 14.

The high reproduction rates demonstrate the effectiveness of the Mod2Dash dashboard model
in capturing real-world dashboard design decisions. Furthermore, it also shows that Mod2Dash
can effectively generate real-world dashboards that accurately represent major and minor design
decisions with an acceptable interaction representation.

5.3.4 Performance Rating. Participants were requested to rate their impression of the Mod2Dash
approach. The impression rating was evaluated from overall performance impression, correctness,
visualization, understandability, and expressiveness.

The maximal rating that the participants gave for these metrics was 10, and the minimal rating
was 4, with a median score of 8. Despite a few poor ratings indicating that few Mod2Dash-produced
dashboards perform not as well as the baselines, the overall impression is good. Figure 14 shows
the impression ratings, which is generated from the raw data.

The ratings from the participants also show that Mod2Dash performs well in presenting real-

world dashboards.

Feedback. Participants also provided qualitative feedback based on their observations. After
5.3.5
further analyzing their comments, we gained insights into improving the mechanism in the future.
Pros: During the evaluation, two of the participants commented that some of the replicas are
superior to the original baseline dashboards in terms of visualization and expressiveness. In the

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:22

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

Fig. 14. The reproduction rate for major design decisions, minor design decisions, interactions, and the
impression ratings.

evaluation forms, we could find words such as "looks good to me", "this replication captured almost
perfectly" to praise the Mod2Dash approach.

Cons: There are also some drawbacks that the participants had identified. All the participants
pointed out that the color scheme needs to be improved, and the font size is not visible well in the
replicas. Mod2Dash provides configuration for the color in the charts. The model can describe all
the colors in a chart (see the comparison in Figure 13), but the model fails in dealing with other
hard-coded color settings in the dashboard. For example, the original dashboard uses different
colors for different rows in a PowerPoint template. Although Mod2Dash provides the font size
configuration for Single Value widget, our current model is still unable to capture and configure
other font sizes such as font size of the title in a table, font size of value number in a Ring Chart, or
font size of the legend.

Participants also raised the issue of missing indicators. For example, there was a widget using a
condensed form of visualization, combining Line Chart, Column Chart, and Area Chart in one single
widget. Our current technology is not able to recur this widget. Furthermore, some dashboards
are hard-coded with different colors for different values in a Table to denote the importance of the
information, but Mod2Dash cannot capture this indicator as well.

5.4 Threat to Validity
This section discusses the limitations and main threats to the internal and external validity of this
study. The case study was carefully designed and carried out to prevent undesired factors from
affecting the outcome. However, a few essential details need to be considered when replicating the
experiment.

• Although we argue that we collect and select dashboards widely from different sources,
researchers’ subjective judgment may influence the dashboard selection. To reduce the
influence of this issue, we relied on pre-defined inclusion and exclusion criteria (Table 5 in
the Appendix) when collecting and selecting dashboards.

• In the study, we targeted the gaps in capturing the models or design decisions in the heads of
dashboard practitioners and automatically generating the dashboard based on the model. It
primarily focused on dashboard visualization, and the data used in this study is mock data or
created by a random algorithm. Therefore, the results may vary regarding the chart color or
shape if different data models are used in the replicating experiments.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Mod2Dash

172:23

• The judgments of an interaction icon or a component in the dashboard belongs to which
interaction category are also subjective when extracting design decisions from the dashboards,
especially we have to use the dashboard screenshots to analyze the interactions. For example,
an icon of three dots could mean detail on demand or configuration interaction feature. To
address this problem, we designed a process for data extraction that extracts data in multiple
steps and with multiple authors’ consistent input.

• Another limitation that needs to be discussed is the design of the human-assisted study. We
relied on the participants’ design decision counting to evaluate the effectiveness of Mod2Dash.
The printed version of pair dashboards and the participant’s experience and knowledge may
influence the judgments regarding the design decision of a particular component. Conse-
quently, we recruited four participants to count the number of design decision matching to
reduce this issue’s influence. The plan and development of the interview guides and selection
of participants can be improved in further formal evaluation.

6 CONCLUSIONS
This paper proposes Mod2Dash, a framework for model-driven dashboard generation. Researchers
and developers can use it to quickly model, prototype, and validate dashboard designs. The
Mod2Dash approach contains three main components. First, the dashboard visualization lan-
guage helps dashboard practitioners capture their implicit design decisions. Second, the automated
dashboard generation mechanism builds the operational dashboards, which is helpful for dashboard
practitioners to communicate their design. Third, a GUI-driven customization approach helps
users continuously improve the dashboard design. We presented a fully functional framework and
evaluated it in a case study. The evaluation result shows that Mod2Dash can effectively capture the
real-world dashboard design decisions and generate real-world dashboards.

As a practical and comprehensive means of presenting critical information, we believe that
dashboard is an important and challenging research topic. One of the interesting future directions
that can be based on the outcome of this paper is dashboard visualization recommendation. First, a
rule-based or machine learning-based recommendation approach can be derived by analyzing or
learning from more real-world dashboard designs. Then the recommendation approach suggests
dashboard models by following the Mod2Dash dashboard language based on the practitioners’
input. Finally, the dashboards are automatically generated by Mod2Dash so that the recommended
designs can be quickly evaluated.

ACKNOWLEDGMENTS
The work has been supported by the Cyber Security Research Centre Limited whose activities are
partially funded by the Australian Government’s Cooperative Research Centres Programme.

REFERENCES
[1] Muhammad Ali Babar, June M. Verner, and Phong Thanh Nguyen. 2007. Establishing and maintaining trust in
software outsourcing relationships: An empirical investigation. Journal of Systems and Software 80, 9 (2007), 1438–1449.
https://doi.org/10.1016/j.jss.2006.10.038

[2] Dana Alzoubi, Jameel Kelley, Evrim Baran, Stephen B. Gilbert, Aliye Karabulut Ilgu, and Shan Jiang. 2021. TeachActive
Feedback Dashboard: Using Automated Classroom Analytics to Visualize Pedagogical Strategies at a Glance. Conference
on Human Factors in Computing Systems - Proceedings (2021). https://doi.org/10.1145/3411763.3451709

[3] Daniel Berman. 2018. A Kibana Tutorial – Part 2: Creating Visualizations. Retrieved Aus 31, 2021 from https:

//logz.io/blog/kibana-tutorial-2/#kibanaaggregations

[4] Xi Chen, Wei Zeng, Yanna Lin, Hayder Mahdi Ai-Maneea, Jonathan Roberts, and Remco Chang. 2021. Composition
and configuration patterns in multiple-view visualizations. IEEE Transactions on Visualization and Computer Graphics
27, 2 (2021), 1514–1524. https://doi.org/10.1109/TVCG.2020.3030338 arXiv:2007.15407

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:24

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

[5] Pawan Chowdhary, Themis Palpanas, Florian Pinel, Shyh Kwei Chen, and Frederick Y. Wu. 2006. Model-driven
dashboards for business performance reporting. Proceedings - IEEE International Enterprise Distributed Object Computing
Workshop, EDOC November (2006), 374–383. https://doi.org/10.1109/EDOC.2006.34

[6] Robin De De Croon, Artuur Leeuwenberg, Jan Aerts, Marie Francine Moens, Vero Vanden Vanden Abeele, and
Katrien Verbert. 2021. TIEVis: A visual analytics dashboard for temporal information extracted from clinical reports.
International Conference on Intelligent User Interfaces, Proceedings IUI (2021), 34–36. https://doi.org/10.1145/3397482.
3450731

[7] Alexios Delis and Nick Roussopoulos. 1992. Performance and Scalability of Client Server Database Architectures.

Proceedings of the 18th VLDB Conference (1992).

[8] Victor Dibia and Çaˇgatay Demiralp. 2018. Data2Vis: Automatic generation of data visualizations using sequence to

sequence recurrent neural networks. arXiv June 2019 (2018), 33–46.

[9] Stephen. Few. 2004. Dashboard Confusion. Perceptual Edge (2004), 1–4. https://www.perceptualedge.com/articles/
ie/dashboard_confusion.pdf%0Ahttp://72.251.211.178/articles/visual_business_intelligence/dboard_confusion_
revisited.pdf

[10] Stephen Few. 2013. Information Dashboard Design (second edition ed.). Analytics Press, PO Box 4933, EI Dorado Hills,

CA 95762.

[11] J R Goodall, E D Ragan, C A Steed, J W Reed, G D Richardson, K M T Huffer, R A Bridges, and J A Laska. 2019. Situ:
Identifying and explaining suspicious behavior in networks. IEEE Transactions on Visualization and Computer Graphics
25, 1IEEE Transactions on Visualization and Computer Graphics (2019), 204–214. https://doi.org/10.1109/TVCG.2018.
2865029

[12] Liuyue Jiang, Asangi Jayatilaka, Mehwish Nasim, Marthie Grobler, Mansooreh Zahedi, and M. Ali Babar. 2021.
(2021), 1–32. arXiv:2112.10354

Systematic Literature Review on Cyber Situational Awareness Visualizations.
http://arxiv.org/abs/2112.10354

[13] Maximilien Kintz. 2012. A Semantic Dashboard Description Language for a Process-oriented Dashboard Design

Methodology. CEUR Workshop Proceedings 947, May (2012), 31–36.

[14] Maximilien Kintz, Monika Kochanowski, and Falko Koetter. 2017. Creating user-specific business process monitoring
dashboards with a model-driven approach. MODELSWARD 2017 - Proceedings of the 5th International Conference on
Model-Driven Engineering and Software Development 2017-Janua, Modelsward (2017), 353–361. https://doi.org/10.
5220/0006135203530361

[15] H.A.D.E. Kodituwakku, A Keller, and J Gregor. 2020.

Insight2: A modular visual analysis platform for network
situational awareness in large-scale networks. Electronics (Switzerland) 9, 10 (2020), 1–15. https://doi.org/10.3390/
electronics9101747

[16] Grafana Lab. [n. d.]. Grafana Documentation - List of calculations. Retrieved Aus 31, 2021 from https://grafana.com/

docs/grafana/latest/panels/calculations-list/

[17] Y Livnat, J Agutter, S Moon, R F Erbacher, and S Foresti. 2005. A visualization paradigm for network intrusion detection.
In Proceedings from the 6th Annual IEEE System, Man and Cybernetics Information Assurance Workshop, SMC 2005,
Vol. 2005. 92–99. https://doi.org/10.1109/IAW.2005.1495939

[18] Logz.io. 2020. Grafana vs. Kibana: The Key Differences to Know. Retrieved Aus 31, 2021 from https://logz.io/blog/grafana-

vs-kibana/

[19] Bostock Michael, Ogievetsky Vadim, and Jeffrey Heer. 2011. D3: Data-Driven Documents. 2, 12 (2011), 1269–1272.
[20] Themis Palpanas, Pawan Chowdhary, George Mihaila, and Florian Pinel. 2007. Integrated model-driven dashboard
development. Information Systems Frontiers 9, 2-3 (2007), 195–208. https://doi.org/10.1007/s10796-007-9032-9
[21] Jorge Poco and Jeffrey Heer. 2017. Reverse-Engineering Visualizations: Recovering Visual Encodings from Chart

Images. Computer Graphics Forum 36, 3 (2017), 353–363. https://doi.org/10.1111/cgf.13193

[22] Azizah Abdul Rahman, Yunusa Bena Adamu, and Pershella Harun. 2017. Review on dashboard application from
managerial perspective. International Conference on Research and Innovation in Information Systems, ICRIIS (2017).
https://doi.org/10.1109/ICRIIS.2017.8002461

[23] Jens Riege, Rainier Lee, and Nercy Ebrahimi. 2019. Displaying data effectively using an automated process dashboard.
IEEE Transactions on Semiconductor Manufacturing 32, 4 (2019), 530–537. https://doi.org/10.1109/TSM.2019.2938157
[24] Elizabeth Rojas, Viviana Bastidas, and Christian Cabrera. 2020. Cities-Board: A Framework to Automate the
https:

IEEE Internet of Things Journal 7, 10 (2020), 10128–10136.

Development of Smart Cities Dashboards.
//doi.org/10.1109/JIOT.2020.3002581

[25] Viktoria Romanovskaya. 2019. 2019 UI/UX Design Trends You Should Know. Retrieved Jul 23, 2021 from https:

//medium.com/akveo-engineering/2019-ui-ux-design-trends-you-should-know-268b6bdbc0e3

[26] Per Runeson and Martin Höst. 2009. Guidelines for conducting and reporting case study research in software
engineering. Empirical Software Engineering 14, 2 (2009), 131–164. https://doi.org/10.1007/s10664-008-9102-8

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Mod2Dash

172:25

[27] Alper Sarikaya, Michael Correll, Lyn Bartram, Melanie Tory, and Danyel Fisher. 2019. What do we talk about
when we talk about dashboards? IEEE Transactions on Visualization and Computer Graphics 25, 1 (2019), 682–692.
https://doi.org/10.1109/TVCG.2018.2864903

[28] Arvind Satyanarayan, Dominik Moritz, Kanit Wongsuphasawat, and Jeffrey Heer. 2017. Vega-Lite: A Grammar
IEEE Transactions on Visualization and Computer Graphics 23, 1 (2017), 341–350. https:

of Interactive Graphics.
//doi.org/10.1109/TVCG.2016.2599030

[29] Arvind Satyanarayan, Ryan Russell, Jane Hoffswell, and Jeffrey Heer. 2016. Reactive Vega: A Streaming Dataflow
Architecture for Declarative Interactive Visualization. IEEE Transactions on Visualization and Computer Graphics 22, 1
(2016), 659–668. https://doi.org/10.1109/TVCG.2015.2467091

[30] Shane Sendall and Wojtek Kozaczynski. 2003. Model transformation: The heart and soul of model-driven software

development. IEEE Software 20, 5 (2003), 42–45. https://doi.org/10.1109/MS.2003.1231150

[31] Mohit Kumar Sharma. 2017. A study of SDLC to develop well engineered software. International Journal of Advanced

Research in Computer Science 8 (2017). Issue 3. www.ijarcs.info

[32] Alexandra Skorobogataya. 2021. Top 10 Dark-themed Admin Dashboards 2021 You Need To See. Retrieved Jul 23, 2021

from https://www.akveo.com/blog/top-10-dark-themed-admin-dashboards-2021-you-need-to-see

[33] Garabet A. Topalian-Rivas, Jonas Wassermann, Mustafa Severengiz, and Jörg Krüger. 2020. Automated dashboard
generation for machine tools with OPC UA compatible sensors. IEEE International Conference on Emerging Technologies
and Factory Automation, ETFA 2020-Septe (2020), 1009–1012. https://doi.org/10.1109/ETFA46521.2020.9212136
[34] Faheem Ullah and M. Ali Babar. 2022. On the scalability of Big Data Cyber Security Analytics systems. Journal of

Network and Computer Applications 198, November 2021 (2022), 103294. https://doi.org/10.1016/j.jnca.2021.103294

[35] Andrea Vázquez-Ingelmo, García-Holgado, García-Peñalvo, and Therón. 2019. Dashboard Meta-Model for Knowledge
Management in Technological Ecosystem: A Case Study in Healthcare. Proceedings 31, 1 (2019), 44. https://doi.org/10.
3390/proceedings2019031044

[36] Andrea Vazquez-Ingelmo, Francisco J. Garcia-Penalvo, and Roberto Theron. 2019.

Information Dashboards and
Tailoring Capabilities-A Systematic Literature Review. IEEE Access 7 (2019), 109673–109688. https://doi.org/10.1109/
ACCESS.2019.2933472

[37] Andrea Vázquez-Ingelmo, Francisco José García-Peñalvo, Roberto Therón, Daniel Amo Filvà, and David Fonseca
Escudero. 2020. Connecting domain-specific features to source code: towards the automatization of dashboard
generation. Cluster Computing 23, 3 (2020), 1803–1816. https://doi.org/10.1007/s10586-019-03012-1

[38] Andrea Vázquez-Ingelmo, Francisco J. García-Peñalvo, Roberto Therón, and Alicia García-Holgado. 2020. Specifying
information dashboards’ interactive features through meta-model instantiation. CEUR Workshop Proceedings 2671
(2020), 47–59.

[39] Vega. [n. d.]. Vega and D3. Retrieved Nov 1, 2021 from https://vega.github.io/vega/about/vega-and-d3/
[40] Kathyrn Watson. 2021. Is Dark Mode Better for Your Eyes? Retrieved Jul 23, 2021 from https://www.healthline.com/

health/is-dark-mode-better-for-your-eyes#takeaway

[41] Wikipedia. 2022. JSON. https://en.wikipedia.org/wiki/JSON [Online; accessed 22-April-2022].
[42] Claes Wohlin. 2021. Case Study Research in Software Engineering—It is a Case, and it is a Study, but is it a Case Study?
Information and Software Technology 133, January (2021), 10–12. https://doi.org/10.1016/j.infsof.2021.106514
[43] Robert K. Yin. 2003. Case Study Research Design and Methods: Applied Social Research and Methods Series. In Case

Study Research Design and Methods: Applied Social Research and Methods Series. Sage Publications.

[44] Ünal Aksu, Adela del Río-Ortega, Manuel Resinas, and Hajo A. Reijers. 2019. An approach for the automated generation
of engaging dashboards. Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence
and Lecture Notes in Bioinformatics) 11877 LNCS, 363–384. https://doi.org/10.1007/978-3-030-33246-4_24

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:26

APPENDIX

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

Table 5. Inclusion (I) and exclusion (E) criteria that applied when selecting dashboards.

I1
I2

I3

Inclusion criteria
The dashboard should visualize and monitor critical information and conditions.
The dashboard should help extract, explain, understand knowledge, and enhancing
decision-making ability.
The dashboard should use multiple data representation formats, and have interactive
features.
Exclusion criteria

E1 The dashboard over-designed or over-coded for particular purpose is excluded.
E2 The dashboard designed for mobile-only is excluded.
E3 Duplicated dashboard design or similar design from the same source is excluded.
E4

Sectional or uncompleted dashboard is excluded.

Fig. 15. Distribution of visualization techniques used in the real-world 31 cyber security
dashboards.

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

Mod2Dash

172:27

Table 6. Statistics and diversity of the case.

Item

Purpose

Stakeholder

Time Sensitivity

Decision Support Dimension

Situational Awareness Level

Layout

Theme

Interaction

Widget Number

Visualization Technique Number

Category
Monitoring
Reporting
Analysts
Executives
Board Members
High
Medium
Low
Strategic
Tactical
Operational
Perception
Comprehension
Projection
Standard Grid
Row Oriented
Column Oriented
Disordered

Light
Dark
Dashboard Level
Widget Level
Max
Average
Min
Max
Average
Min

Number Percent

90.32
22.58
77.41
25
6.45
16.13
32.16
51.61
35.48
58.06
6.45
70.97
29.03
0
9.68
58.06
12.9
19.35
70.97
29.03
61.29
51.61

28
7
24
8
2
5
10
16
11
18
2
22
9
0
3
18
4
6
22
9
19
16
18
8
3
7
4
2

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

172:28

Liuyue Jiang, Nguyen Khoi Tran, & M. Ali Babar

Fig. 16. All of the 31 real-world cyber security dashboards have been reconstructed by Mod2Dash.

Received February 2022; accepted April 2022

Proc. ACM Hum.-Comput. Interact., Vol. 6, No. EICS, Article 172. Publication date: June 2022.

