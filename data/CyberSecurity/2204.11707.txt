2
2
0
2

r
p
A
5
2

]

R
C
.
s
c
[

1
v
7
0
7
1
1
.
4
0
2
2
:
v
i
X
r
a

Optimal Security Hardening over a Probabilistic Attack Graph
A Case Study of an Industrial Control System using CySecTool

Przemysław Buczkowski
Queen Mary University of London
School of Electronic Engineering and Computer Science
London, England, United Kingdom
p.buczkowski@qmul.ac.uk

Pasquale Malacaria
Queen Mary University of London
School of Electronic Engineering and Computer Science
London, England, United Kingdom
p.malacaria@qmul.ac.uk

Chris Hankin
Imperial College London
Institute for Security Science and Technology
London, England, United Kingdom
c.hankin@imperial.ac.uk

Andrew Fielder
Imperial College London
Institute for Security Science and Technology
London, England, United Kingdom
a.fielder@imperial.ac.uk

ABSTRACT
CySecTool is a tool that finds a cost-optimal security controls portfo-
lio in a given budget for a probabilistic attack graph. A portfolio is a
set of counter-measures, or controls, against vulnerabilities adopted
for a computer system, while an attack graph is a type of a threat
scenario model. In an attack graph, nodes are privilege states of the
attacker, edges are vulnerabilities escalating privileges, and controls
reduce the probabilities of some vulnerabilities being exploited. The
tool builds on an optimisation algorithm published by [1], enabling a
user to quickly create, edit, and incrementally improve models, anal-
yse results for given portfolios and display the best solutions for all
possible budgets in the form of a Pareto frontier. A case study was per-
formed utilising a system graph and suspected attack paths prepared
by industrial security engineers based on an industrial source with
which they work. The goal of the case study is to model a supervisory
control and data acquisition (SCADA) industrial system which, due
to having a potential to harm people, necessitates strong protection
while not allowing to use typical penetration tools like vulnerability
scanners. Results are analysed to show how a cyber-security analyst
would use CySecTool to store cyber-security intelligence and draw
further conclusions.

CCS CONCEPTS
• Security and privacy → Formal security models; • Applied
computing → Multi-criterion optimization and decision-making;
• Computer systems organization → Embedded and cyber-
physical systems.

KEYWORDS
threat modelling, multi-objective optimisation, probabilistic attack
graph, industrial control system, cybersecurity risk assessment tool

This work is licensed under a Creative Commons
Attribution International 4.0 License.

SaT-CPS ’22, April 27, 2022, Baltimore, MD, USA
© 2022 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-9229-7/22/04.
https://doi.org/10.1145/3510547.3517919

ACM Reference Format:
Przemysław Buczkowski, Pasquale Malacaria, Chris Hankin, and Andrew
Fielder. 2022. Optimal Security Hardening over a Probabilistic Attack Graph:
A Case Study of an Industrial Control System using CySecTool. In Proceed-
ings of the 2022 ACM Workshop on Secure and Trustworthy Cyber-Physical
Systems (SaT-CPS ’22), April 27, 2022, Baltimore, MD, USA. ACM, New York,
NY, USA, 10 pages. https://doi.org/10.1145/3510547.3517919

1 INTRODUCTION
1.1 Background
Cyber security needs to be considered by any organisation that uses
any kind of IT system, especially when a result of such a system
malfunctioning can be tragic – this is true for most industrial control
systems, controlling, for example, power stations and factories. A
cyber security portfolio is a set of counter-measures against vulner-
abilities adopted by a company. Such countermeasures are called
controls in the literature [2, 3]. Among others, one of the industry-
used frameworks lists these categories of controls: malware defence,
controlled use of privileges, penetration tests, and security training
programs. [4]

An IT system can be modelled as an attack graph – in this partic-
ular case study, a privilege graph where each node represents a set of
privileges, and each edge represents the attacker gaining additional
privileges by exploiting a vulnerability.

[1] described a method to obtain min-max optimisation over
probabilistic attack graphs, enabling to obtain a portfolio giving the
best security (minimised maximum flow to the target) possible for a
given budget. Having produced the mathematical theory, the next
step is to build an attack graph with probabilistic flows (attack success
probability) over edges and controls with defined flow reduction
(that is, reduced probability of a successful attack when we employ
a security measure).

A crucial application area for cybersecurity decision support is
a ClearSCADA-based industrial control system. This ICS is software
that runs in factories and controls mechanical devices, so an exploit
in the system may pose a danger to the workers and the general
community (e.g. if the system manages essential services like energy
or water supply). Therefore strong cybersecurity protections are ne-
cessitated. A factory system graph and suspected attack paths were
received from industrial security engineers based on their work with

 
 
 
 
 
 
and security of industrial control systems; 2) documentation of the
design choices made while developing CySecTool; 3) modelling a
SCADA system and the findings made by feeding it to the optimi-
sation routine using CySecTool.

2 LITERATURE REVIEW
2.1 Attack graph modelling
[5] is credited with the idea of access control modelling. In this paper,
the author models access as an access matrix. It was found out that
the safety problem — checking if a subject (i.e. user) can get access
to an object is insoluble under an access matrix model. [6]

One of the models developed for solubility of the safety problem
is the take-grant protection model. Such a graph can be modified
at the run-time to model a user taking advantage of their existing
permissions to grant themselves new ones [7]. Soon after the model’s
conception, [8] has criticised the ability of the model to accurately
represent real-life systems which led to the development of other
DAG-based models.

As extensively surveyed by [9], DAG-based models have been
since then broadly used to model real-life attack and defence situa-
tions. They have identified more than 30 different approaches, most
of which can be broadly categorised as derived from threat trees,
used early by [10], and formal methods based on Bayesian networks,
for example, probabilistic attack graphs, which allow reflecting the
probabilistic nature of security dangers [11].

Choosing between security controls, that is, counter-measures
against security threats has been shown to be a multi-objective de-
cision problem. [12] [1] have shown a framework to efficiently solve
a multi-objective optimisation problem presented as a probabilistic
attack graph combined with a set of controls reducing the proba-
bilities. Incorporating this algorithm into a user-friendly tool is the
primary objective of this paper.

2.2 Modelling tools
The next step in the popularisation of computer security models is to
implement tools allowing to analyse of systems using these formal
methods. One of the first programs for this purpose was a C++ attack
graph generator for Unix, written by [13]. This tool took as an input
attack templates (descriptions of attacks consisting of privileges and
capabilities necessary and obtained as a result), configuration profile
(i.e. network topology, privilege sets in the system) and attacker
profile (description of attacker’s capabilities). The figures included
in the paper bear remarkable similarity to the drawings generated
by CySecTool, excluding the probabilistic aspect.

Other tools followed, primarily focusing on the problem of gen-
eration of attack graphs from realistic network diagrams and vul-
nerability databases exported from already existing tools. One of
these is NetSPA, which generates attack graphs from netViz files,
NVD vulnerability databases and exported firewall rules [14]. TVA
(Topological Vulnerability Analysis), on the other hand, incorporates
a network scanner which is used to generate attack graphs [15].
Probably the most similar model to the one implemented in
CySecTool was found in [16, 17]. The authors extended the MulVAL
tool to include probabilities of each vulnerability being exploited, us-
ing vulnerability metrics like Common Vulnerability Scoring System.
The author says that the major disadvantage to applying Bayesian

Figure 1: The industrial case study analysed, divided into
three segments: OT, IT and field devices. Underlined are the
control system and its two main interfaces: WebX and ViewX.

an industry source. This detailed and trusted information proved
crucial to a successful analysis.

1.2 Contribution
This work reports on a tool implementing the min-max optimisation
from [1]. Design choices and features of the tool are explained, and
an application of the tool to a real-world SCADA system is shown.
More specifically, the goals are to:
• Build a software package (CySecTool) with the following main

features:
– Visualisation of attack graphs;
– Creator and editor of attack graphs;
– Tight integration with the optimisation algorithm.

• Demonstrate the effectiveness of the approach by developing a
case study (an overview of the system analysed is shown in Fig. 1):
– Model an attack graph based on the information received;
– Assume the role of a security analyser and make some sound

conclusions from the model.

1.3 Paper structure
The paper is split into three main parts: 1) the literature review,
discussing the developments in the area of attack graph modelling

`networks to this problem is the very slow calculation and optimisa-
tion.

Thanks to the theoretical advantages [1] and significantly in-
creased processing power of home computers, it is not as infeasible
as it was back then. Parallelisation, which was implemented as a part
of this work, also greatly helped.

2.3 Industrial cybersecurity
Supervisory control and data acquisition (SCADA) systems are used
to monitor and remotely control critical industrial processes, such as
gas pipelines, electric power transmission or other production infras-
tructures. The term was invented in the 1980s, but the first systems
were created in the 1960s [18]. SCADA systems are a part of wider
Operational Technology (OT), which is defined as technology that
interfaces with the physical world and includes Industrial Control
Systems (ICS), SCADA and Distributed Control Systems (DCS) [19].
The significant change in the cybersecurity of industrial control
systems was the introduction of Internet Protocol-connected sys-
tems in the 1990s. The systems built or extended as such became
vulnerable not only to specialised attacks but to all the other com-
mon Internet threats, for example, automated crawling of servers
in a search for open vulnerabilities. Even if these networks are not
connected to the Internet, they may remain as vulnerable – in 2010,
the Stuxnet virus was found to spread using USB drives, and once
in, it would spread further using the local IP network [20]. Stuxnet,
allegedly created by the USA and Israel, specifically targeted SCADA
systems and was reported to have caused 20% of centrifuges used
in the Iranian nuclear programme to fail [21, 22].

New challenges appear a lot faster than an expected lifespan of
an Industrial Control System, which for each individual component,
both software and hardware, is often over ten years, and occasionally
over 20 years. [23] [24] in an industry report quotes data that 64%
of OT organisations struggle with developments in cyber-security;
more concerning, 74% of the organisations surveyed report that they
were breached in the last 12 months.

Modelling industrial control systems has been demonstrated to
have some interesting caveats absent otherwise. While one may
be tempted to run a vulnerability scanner on a system, one must
remember that an industrial system malfunction can have outcomes
in the real world, as opposed to, for example, a website that can be
easily restored from a backup. [25] reports several incidents:

• A ping sweep was performed on a SCADA system. Suddenly one

robotic arm became active and swung 180 degrees.

• A penetration test was performed to itemise hosts on a gas com-
pany network. The search ventured into the SCADA part of the
network, which was unintended, and locked the system for 4 hours,
cutting off the gas supply.

• A ping sweep caused a system controlling the creation of inte-

grated circuits to hang, destroying $50,000 worth of wafers.

All three tools mentioned (NetSPA, TVA and MulVAL) depend on
a vulnerability scanner. As demonstrated by the examples above, a
different approach is necessary. In the previous edition of this work-
shop, a generator of attack graphs based on the IEC 61850 System
Configuration Description Language was shown. [26] Meta Attack
Language is used for modelling, which was shown to enable users to
develop probabilistic models of attacks against vehicles, for example,

passenger cars. [27] The next step we think is worth taking is to sim-
plify creating and reasoning about graphs of this type — CySecTool
is the result.

3 CYSECTOOL DESIGN AND IMPLEMENTATION
CySecTool is a web application developed using Python and the
Bokeh presentation library. It provides a front end for the optimi-
sation engine implementing the algorithm in [1], which is further
explained in subsection 3.1.

Attack graphs are saved to a JSON file in a bespoke schema, stor-
ing data about nodes (attackers’ access level), edges (vulnerabilities
escalating privileges) and controls (counter-measures against vul-
nerabilities). Graphs can be edited using an included editor, and the
application contains several example graphs, including the Indus-
trial Control System analysis. A JSON schema file is provided, so the
models can be validated, viewed, edited and created using not only
CySecTool but also standard tools with support for JSON documents
[28].

A screenshot of CySecTool is shown in Figure 2: on the left-hand
side, the attack graph modelling the security scenario under analysis
is drawn. Edges are coloured according to the probability of a success-
ful attack, using the logarithmic scale drawn on the right-hand side
of the graph. The path drawn in the thicker line is the critical path
— the most likely attack path. The initial attacker’s status node is
drawn in blue, while their targets are drawn in red. On the right-hand
side of the program view, the user can manually select a portfolio,
change the targets, load and save a graph, launch a graph editor or
optimise for a given budget.

With the click of the “Edit" button, the active model is loaded to
the editor. Once changes are applied, the model can be saved locally
or instantly viewed in the visualiser module of CySecTool. Due to
how fast it is to make changes and observe the results, an analyser
can experiment with model parameters very comfortably.

The portfolio can be chosen manually using the panel closely de-
picted in Figure 2. Flows in the graph are momentarily recalculated,
and one can see what influence the choice they made had – they can
look at the colours, the maximum flow and budget costs displayed
on the right-hand side of the graph or hover on the edges in order
to see detailed information about the vulnerability represented by
the edge hovered on, controls applied, and calculated flows. One
can click on an edge to go to a page describing the vulnerability in
detail — in the case of this case study, it leads to the vulnerability
description in MITRE ATT&CK for the ICS database.

The application can generate an optimal security controls port-
folio in a specified budget. For a detailed analysis, it lets the user
generate a Pareto frontier – the set of all portfolios for which no more
secure solution exists in the same or lower budget. Such solutions
are called Pareto-optimal [29]. Charting them lets the user analyse
the way security changes with an increasing budget. Hovering on
the points lets them get additional data about the portfolio – its
exact cost, indirect cost and security damage (that is, the attack path
with maximum probability given the portfolio). Clicking on a point
applies the associated portfolio.

An example of a generated Pareto frontier can be seen in Figure 3.
Short calculation time — approx. 10 s on AMD Ryzen 7 PRO 3700U

Figure 2: A screenshot of CySecTool with the industrial control attack graph. On the right hand side the controls installed.

and approx. 18 s on Apple M1 — is achieved due to adding paral-
lelisation to the original optimisation routine. Parallelisation was
achieved with the help of the pathos framework, while PuLP is used
to implement the optimisation routine itself [30, 31].

Combining automated portfolio optimisation with manual fine-
tuning enables detailed analysis and making informed decisions.
Graphical representation of the results, generated in real-time, helps
to quickly establish the consequences of the choices one can make.
For correctness, a set of tests was prepared using the unittest
library and Selenium browser automation tool. Some were based on
the manually verified and formally proven results from [1], while oth-
ers are based on bespoke scenarios created during the development.

3.1 Overview of the optimisation routine
To illustrate the optimisation framework and system modelling im-
plemented in CySecTool, let us consider the toy example in Figure 4.
The initial state of the attacker is vertex 0, and the target state is
vertex 3. An edge in the graph is an attack step or a vulnerability;
for example, the attacker could take the leftmost edge and reach
the target in one step. Security controls are associated with edges
that represent vulnerabilities which they are effective against. For
example, for the leftmost edge, control c3 is effective; for the edge
from 1 to 2, there are two effective controls: c3 and c4. Suppose that
when deploying c1, the attacker probability of success on that edge
is 0.5, for c2 and c4 it is 0.2, and for c3 it is 0.1.

The optimisation is answering questions like: “suppose the de-
fender can only choose two security controls out of c1, c2, c3, and
c4: which combination is the optimal choice in the sense of making
the probability that the attacker successfully reaches vertex 3 the

lowest?” and variations of this question, where controls have varying
“costs" and the defender has a varying “budget".

For example, if the defender were to choose c3 and c4, then the
attacker would reach 3 with probability 1 by following the path (0,1),
(1,3). However, if the defender were to choose c2 and c3 instead, then
the attacker can reach 3 with a probability 0.2 at most. In fact c2, c3
is the optimal answer to the question posed above — the optimal
“portfolio" of security controls.

In mathematical terms, this is a bi-level optimisation: the defender
wants to minimise the attacker’s maximal probability of reaching the
target. The minimisation is the outer problem and the maximisation is
the inner problem. In addition, the defender is subject to budget con-
straints. The work [1], using ILP conversion, exact LP relaxation, and
dualisation introduces an algorithm to efficiently solve this problem,
which is implemented as a backend of CySecTool.

4 METHODOLOGY
Our attack graphs are defined as follows:

(1) vertices (attacker access privileges),
(2) edges (classes of vulnerabilities),
(3) default flows over edges (default probability of the unmitigated

vulnerability being exploited),

(4) controls (mitigations),
(5) flow reductions (reduction of the probability of the vulnerability

being exploited if control is deployed),

(6) direct costs (monetary cost for implementing a control) and
indirect costs (inconvenience to stakeholders, i.e. downtime, in-
creased complexity of use).

For the purpose of documentation, the environment is broken
up into four distinct parts, the OT/SCADA system, IT system, Field
Devices, and External Devices and Systems. Each of these parts can
be defined by a conceptual physical or technological separation, al-
though connectivity does exist between sections — which will prove
vital to the system’s security. In this example, all clients and servers
are all running operating systems vendored by Microsoft. This may
not hold true for the devices external to the network, which may be
running other operating systems.

A figure depicting the industrial control system under analysis
is shown in Figure 1. The corresponding attack graph in CySecTool
is shown in Figure 2. Most vertices warrant further explaining:

• ViewX — one of two front-ends of the system, which is used to con-
trol the plant from the site machines and has unlimited capabilities.
• WebX — the Internet-facing front-end, which can be used to con-

trol the plant from the outside of its perimeter.

• OT Active Directory — the part of the directory service which con-
trols access to the control system. Notably, it is controlled from
the IT part of the system, so the admins can grant rights to the OT
while sitting in the IT.

• Vendor software — most of the software, both for IT and OT, gets
supplied by external vendors. It is a node of our graph since an at-
tack can occur against the vendor in a “supply chain compromise"
[32].

• Test system — all the updates to the OT software go through the
Test system, which is a miniature of the actual system. Once the
software is tested, it gets released to production.

• Site machine — machines at the site which communicate with the

control system.

• Corprate thin client — machines in the IT area, used for adminis-

trative tasks, including data preparation for the OT.

4.2 MITRE ATT&CK for ICS
MITRE ATT&CK framework is a threat intelligence database. [33, 34]
It collects “matrices" consisting of:

(1) tactics (attacker’s goals);
(2) techniques and sub-techniques (ways to achieve goals);
(3) mitigations;
(4) procedures (real-life examples of techniques’ usage).

MITRE is an organisation that, among others, manages Common
Vulnerabilities and Exposures and Common Weakness Enumeration
databases, commonly used in communication about cybersecurity.
ATT&CK is a natural extension of these, creating an overview of
tactics and techniques used. While a general, “enterprise" matrix is
by far the best developed, a review process began in 2017 of a matrix
for Industrial Control Systems, named ATT&CK For ICS. [35] The
matrix is available online for browsing at
https://collaborate.mitre.org/attackics, but the most interesting fea-
ture is that the whole database can be downloaded in the form of
Structured Threat Information Expression, which is a language and
serialisation format based on JSON used to exchange cyber threat
intelligence. MITRE provides recipes and tips on how to write pro-
grams interacting with that content. [36]

Figure 3: A Pareto frontier of the “optimal" portfolios appli-
cable to the ICS model. Note the logarithmic security scale
and unbound indirect cost. Portfolios in green are further
analysed in section 5.

start

c3

0
c1
1
c2
3

c2

c3,c4

2

c1,c4

Figure 4: A toy example of an attack graph. Edges are labelled
by the controls which are effective when applied to them.

For this scenario, all the above items (vertices, edges, etc.) are
described in detail in the following along with the decisions made
and their justifications.

4.1 Vertices, or the ICS system
The case study is based on the main operating capacity of a medium-
sized utility provider, as described by the national cybersecurity
agency. For the purposes of confidentiality, the exact organisation
and sector have been obfuscated. The example considers a single
physical operating environment for the IT and OT (Operational
Technology) systems and several remote sites which relate to control
units.

Table 1: Relevant techniques extracted from ATT&CK for
ICS database.

technique

Spearphishing Attachment
External Remote Services
Drive-by Compromise
Supply Chain Compromise
Engineering Workstation
Compromise
Replication Through Remov-
able Media
Data Historian Compromise
Internet Accessible Device
External Remote Services
Valid Accounts
Exploitation
Services
Remote File Copy
Program Organization Units

Remote

of

tactic

initial access
initial access
initial access
initial access
initial access

initial access

url

T865
T822
T817
T862
T818

T847

T810
initial access
initial access
T883
lateral movement T822
lateral movement T859
lateral movement T866

lateral movement T867
lateral movement T844

c.1

9
8
6
3
2

2

1
1
8
8
3

3
2

1Procedures count.

4.3 Vulnerabilities
To analyse the vulnerabilities, we used Jupyter notebooks, a built-in
Python JSON processing library and pandas for data processing and
display. First of all, we narrowed techniques down to these applicable
to tactics modelling gaining access to the control system: initial ac-
cess and lateral movement. To measure the initial risk, we joined the
table with procedures (instances of hacking groups using the vulnera-
bility) and counted how many procedures exist for each vulnerability.
Refer to Table 1 for the list of analysed procedures. The initial risk
was calculated as |𝑝𝑟𝑜𝑐𝑒𝑑𝑢𝑟𝑒𝑠 |

, and it ranges from 10% to 90%.

The next step was to add these vulnerabilities to the model, which
was done using the built-in CySecTool editor. Representing multiple
attack paths in terms of ATT&CK allowed us to extract the data about
how common they are from ATT&CK and represent this frequency
as the probability of the vulnerability being exploited.

10

4.4 Controls
Control is a measure against vulnerabilities. In CySecTool it is repre-
sented with its name, direct cost, indirect cost and the flow reduction
for the vulnerabilities it is effective against. Moreover, controls exist
in mutually exclusive levels – for example, one could opt for updating
air-gapped devices’ software once a year or once a month.

In order to obtain the controls for each vulnerability, we listed
mitigations that are applicable according to the ATT&CK database
and grouped them in the following control groups. Some mitigations
already existed in the system; they are underlined.
(1) Network Segmentation: The current network, while segmented
in theory into the Internet, OT, IT and site devices, has multiple
points of contact between the zones, which allow attacks to hap-
pen. Most egregiously, the Active Directory of OT users is in the
IT zone, so the admins can easily modify users without having
to go to the site.
Data files are also uploaded from the IT to the OT, effectively

controlling the control system. Levels: 1) No segmentation; 2)
ViewX and OT Active Directory removed from IT zone; 3) Access
to OT from IT limited to WebX.

(2) IT Network Protection: Thin clients are used in the IT zone for ad-
ministrative purposes. Since a connection exists between IT and
OT, an infected IT computer could wreak havoc in the ICS. There-
fore, we want to minimise the risk of this happening. All of these
protections have been applied in IT. Levels: 1) No protection; 2)
Firewall and antivirus installed on thin clients.

(3) USB Devices: Currently, USB devices are used for the manual
carrying of data to and from OT. While it allows us to air-gap
devices, the system is still open to Stuxnet-like lateral movement.
Levels: 1) No restrictions; 2) Company issued and periodically
formatted drives only; 3) Single-use CDs only recorded directly
by SCADA software.

(4) WebX Access Policy: WebX is used to allow limited control from
outside of the site. It reduces the need to go to the site to do some
management, but it opens the system to attacks from the Internet.
Levels: 1) Full access; 2) Limited access; 3) WebX reduced to site
monitoring.

(5) ViewX Access Policy: ViewX is available only from the site but
can do everything, and there are no users. Creating more access
levels means that when access credentials are leaked, it does
not always mean that the attacker gains full control. Levels: 1)
Full access; 2) Access levels introduced.

(6) Update site machines: Machines without an Internet connection
are very rarely updated. While they cannot get infected from the
Internet, a virus can well get there from a USB drive. Distributing
updates would require a person to update all these machines
manually. Levels: 1) No updates; 2) Yearly updates; 3) Monthly
updates.

(7) Code signing and testing: Enforcing that only valid and tested
code can run on the machines can foil many possible attacks but
adds a considerable overhead for deploying new code. Moreover,
machines can be too old to support only signed binaries — it was
introduced with Windows 7/2008 R2 [37]. We could update these,
but updating PLCs would require replacing the factory equip-
ment. Levels: 1) No code testing; 2) Testing all updates; 3) Testing
and code signing on PCs; 4) Code signing on PCs and PLCs.
(8) Wireless security: Since the communication between site ma-
chines and the OT is going over unencrypted UHF radio waves,
our adversary could catch these communications, modify and re-
play them to bring the site out of control. A Polish student did that,
using a modified TV remote controller to control a tram system
in Łódź. [38] Encrypting network traffic is noted to be expensive
since the radio devices have no ability to handle it. DES could be
used without having to replace the whole radio infrastructure.
Levels: 1) No encryption; 2) DES encryption; 3) AES encryption.
(9) WebX authentication: Currently WebX can be accessed from any
external device what is inherently insecure. The factory could
provide 2FA keys or separate devices to the employees which
give them access only to WebX. Levels: 1) Username/password;
2) 2FA with a personal device; 3) 2FA with a physical key; 4)
Company-provided devices used.

(10) ViewX authentication: Currently ViewX is protected only by a

single password. There are no accounts.

Table 2: Basic actions, their direct,
rationale behind them.

indirect costs and

Action

D.1

I.2 Rationale

a
Buying
tool,
e.g.,
USB sticks
or a laptop.
Extra
employee.

1

5

8

0

PC

New
software.

2

8

Buying 50 pen drives is comparatively
cheap. Dealing with employees’ com-
plaints about the new procedures is not.

Extra person to handle the work due
to a new policy. Notably, an extra
administrator to work at the site due
to the limited external access policy
falls into this category.
The cost of a new subscription is more
painful than buying some USB sticks.
The employees’ have to deal with the
change.

40

100

New ICS
software
feature.

New PLC
infrastruc-
ture.

20 A new feature in a bespoke ICS
software is going to be more expensive
to develop than buying an off-shelf MS
Office box.

0 What we want to avoid the most is
changing elements of the bespoke PLC
infrastructure. Such changes remain
transparent to the employees – hence
the negligible indirect cost.

Taking
away per-
missions.

1

40 Taking away permissions from exist-

ing users reduces their productivity.

1(Direct) cost. 2Indirect cost.

Levels: 1) Password; 2) 2FA with a personal device; 3) 2FA with
a physical key.

4.5 Controls’ cost
In order for the optimiser to find the best solution in a budget, we need
to assign to all controls their associated cost. Moreover, the cost does
not have to be only monetary — if we make it harder for the employees
to do their jobs by, for example, taking away their access rights, there
is a loss of productivity, which can be modelled using indirect cost.
Many controls can be divided roughly into “direct cost-intensive"
and “indirect cost-intensive". For example, installing new radio de-
vices, which would allow us to encrypt their communication, would
be very expensive, but the employees should not even notice it. On
the other hand, restricting the capabilities of WebX (the Internet-
facing front-end to the control system) is very cheap to do, but the
employees will be greatly annoyed by having to go to the site to do
their jobs, especially in 2021 when they are told to work from home.
The system is very flexible, so the analyser can easily adapt the costs
to the ever-changing environment.

We express mitigations in some basic actions, like “Employing ex-
tra employee" or “New infrastructure". This way, the costs of the basic
blocks can be adjusted, and it is easier to compare the mitigations.
The actions used are listed in Table 2.

4.6 Controls’ effectiveness
The controls’ effectiveness is the part of the model in which, for each
vulnerability and control, a number in [0;1] is given, specifying the
effectiveness of the control against the vulnerability. This number is
named flow reduction and is the number by which the initial flow on
the edge (see subsection 4.3) is multiplied when the control is active.
Intuitively, flow reduction equal to one means that the control
does not impact the risk; equal to zero means that it eliminates the
risk completely; and equal to, for example, 0.5 halves the risk.

We graded the efficacy of each of the controls on a 4-point scale
(low, medium, high, very high), associated flow reduction with each
point (0.7, 0.5, 0.2, 0.1).

To show some examples:

• DES Encryption – medium, AES Encryption – very high. While ev-
erything is better than plain-text, once the attacker finds out DES
is used, they can use an online GPU cluster to break it, while AES
encryption is considered secure [39] – so a compromise would
have to occur due to an implementation error.

• Yearly updates – low, Monthly updates – medium. While updating
the systems protects against common threats, ICS attacks are usu-
ally made to order, decreasing the probability that their signature
would be detected. Therefore, the updates’ protection is on the
lower end of the scale.

The effectiveness, in the end, corresponds to the opinions of the
analysts. It is planned to verify the model with the agency specialists
to improve the accuracy of the model further. The proposed way
to work with the system is to continuously refine the model and its
probabilities in order to reflect our improving understanding of the
system and verify it using the Pareto frontier. The continuous im-
provement approach is shared with the ATT&CK database. [35, 40].
Alternatively, once an appropriate data source is obtained, a statis-
tical approach, similar to the one in subsection 4.3, can be followed.

5 USE CASES AND RESULTS
Given the security modelling described so far, we are going to show
some use cases of CySecTool which are of interest to security an-
alysts and decision-makers.

The following scenarios could be relevant to a security analyst us-
ing CySecTool to generate portfolios to be shown to the stakeholders
— the protections they are offering and their weak points.

In these scenarios, we consider the Pareto frontier generated by
the tool and will look at some interesting portfolios in the frontier,
explaining how decisions can be made.

5.1 General analysis and findings
Let us consider the frontier in Figure 3. Most crucially, it displays how
with the increasing budget, we can decrease the security damage,
that is, the probability of the most probable attack.

There are several intuitive rules an analyser may follow to narrow

down the portfolios to the most interesting ones:

• If points are close on the x-axis (cost) but distant on the y-axis
(security), a small investment improves the security considerably.
Therefore, the point further to the right will be more interesting.

• Conversely, if the points are distant on the x-axis but close on
the y-axis, a significant investment improves the security slightly.
Therefore, the point further to the right will be less interesting.
• Then, if the points are close on both axes, they are similar in both
cost and security. These can also warrant further analysis since
the control set used can be different, and so the indirect cost, and
so the final decision on which portfolio to employ.
Using the first two rules, we can find several portfolios represen-
tative for “low", “medium", “high" and “very high" costs. Portfolios,
chosen using this method are marked in green in Figure 3 and detailed
in Table 3.

to be done when there were no controls — they opened their laptop
from wherever and logged in with their password. They could have
prepared the data at home to carry it straight to the factory.

Nevertheless, all these controls are very effective– attacks from
the Internet are the most concerning due to how frequent and generic
they are, but damage can be limited to information leakage by se-
verely restricting WebX capabilities. Even when malware infects the
site computers, it can try to guess users’ passwords, but bypassing
2FA is harder. Moreover, they are very cheap to implement, so if
the company does not want to enact controls requiring expensive
infrastructure changes, it may be a good solution.

5.1.2 Medium-cost portfolio. In this portfolio, due to the higher
budget, some high-value investments were made. Notably, AES en-
cryption is added (requiring a replacement of the radio infrastruc-
ture), and a test system needs to be built, so new software can be
tested, limiting an impact of a supply chain compromise.

The direct cost is now at a level similar to the indirect cost, in-
dicating that these changes require a considerable infrastructure
budget and that controls implementable as policies have been largely
exhausted. Note that, despite roughly five times higher direct cost,
the damage is only two times lower than in the low-cost portfolio.

5.2 Analysing similar points
Let us come back to the low-cost portfolio described in subsubsec-
tion 5.1.1. The main problem with this portfolio is the very high
indirect cost in the form of making interacting with the system much
more time consuming for the employees.

One of the ways to solve this problem using CySecTool is to have
a look at the portfolios in a similar price and security range. Such
a close-up on three portfolios is illustrated by a screenshot from
CySecTool in Figure 5.

Table 3: Portfolios representative for cost categories gener-
ated on a naked model.

Name

Naked
Low

Controls

No controls
Company issued drives
only, WebX reduced to
site monitoring, ViewX
access
levels, Wireless
DES encryption, ViewX
2FA with a physical key

High

Medium Code testing, Wireless
AES encryption, Company
issued drives only, WebX
reduced to site monitoring,
access
ViewX
levels,
Update
site machines
monthly, IT network pro-
tection, WebX 2FA with
a personal device, ViewX
2FA with a physical key
Network
segmentation,
Single-use CDs only, WebX
reduced to site monitoring,
ViewX access levels, Code
signing on PCs, Wireless
AES encryption, IT net-
work protection, WebX
2FA with a physical key,
ViewX 2FA with a physical
key
All controls employed at
their highest levels

Full

D.1

0
269

I.2

0
898

Damage

0.27
0.05

1124

1230

0.025

1505

1868

0.01

2042

2028

0.005

1(Direct) cost. 2Indirect cost.

5.1.1 Low-cost portfolio. The low-cost portfolio is notable for its
high indirect costs. Internet access to the control system is reduced to
monitoring only, access levels are introduced to ViewX, and ViewX
users are required to use physical keys for two-factor authorisation.
All of these impact employees’ productivity — to do their job, they
must be at the site, ask to have appropriate permissions granted, and
pick up a key. If they want to upload data to air-gapped computers,
they cannot use their own USB drives anymore. None of these had

Figure 5: The close-up of the neighbourhood of the low-cost
portfolio chosen in subsubsection 5.1.1. Tooltips give de-
tailed information about the costs and security damage of
individual portfolios.

The initially chosen portfolio is the middle one of the portfolios
detailed in Figure 5. Both other portfolios have a lower indirect cost.
Let us list the differences in the controls used in Table 4.

Table 4: Alternative controls in the neighbourhood of the
low-cost portfolio.

No. Differing controls

1. Company issued USB devices only,
2FA with a physical key for ViewX.
2. Company issued USB devices
only, 2FA with a personal device
for ViewX, IT network protection.
3. Monthly updates to site machines,
2FA with a physical key for ViewX.

D.

I. Damage

269

898

0.05059

267

762

0.05456

303

834

0.05057

From the Pareto frontier, it is clear we can go two ways from the
first, originally selected portfolio. The second portfolio has a consid-
erably lower indirect cost, similar direct cost and slightly lower secu-
rity. In contrast, the third portfolio has a higher direct cost, lower in-
direct cost and comparable security to the first one. Similar to the old
idea of the project management triangle, in which one has to choose
two from “good, fast, and cheap" [41], the three portfolios represent
adding indirect cost, sacrificing security and adding direct cost.

The clusters of points on the Pareto frontier are helpful because
they help to identify which controls, given the model, give similar
security. In this particular example, we can see that the following
pairs of sets are considered comparable in terms of provided security:

• {ViewX physical key 2FA} and {ViewX personal device 2FA, IT
network protection}. This reflects the two points of protection –
in the first set, the control system is strongly protected, while in
the second, some of that is sacrificed to protect the IT network,
from which OT can be infected. It is easier to have the employees
use their own devices for 2FA, hence the lower indirect cost.
• {Monthly updates to site machines} and {Company issued USB
devices only}. This reflects the problem with malware spreading
through USB devices. One way is to restrict USB devices usage,
and another is to update even the air-gapped systems regularly,
so they are not vulnerable.

5.3 Naked and clothed model
It is possible that there already exist some controls in the analysed
system, while the Pareto frontier assumes there are no controls. In
subsection 4.4, already applied controls are typed in bold.

In the early parts of the analysis, the applied controls were as-
sumed to be in the system and all controls to be built upon them. We
now remove these protections, creating a so-called naked model, so
a comparison can be drawn between what the optimiser suggests
and the protections already in the system.

In the Figure 6, a portfolio matching controls already applied
in the real system were selected. When compared with portfolios
generated in subsection 5.1, it is clear that, in the model, the current
controls are neither secure nor cost-effective.

In the analysis of such cases, it is helpful that CySecTool marks
the critical path, that is, the attack path with the highest probability,
with a thicker line. One vulnerability, Remote File Copy, was hovered
on to display detailed data. When clicked on, we are taken to the
source database, where we can learn that attacks of this kind on

Figure 6: A portfolio chosen to match the real-life system
on which the case study was done. A vulnerability on the
critical path is hovered on. Refer to subsection 4.4 to see the
controls chosen.

Industrial Control Systems were first observed in 2017, under the
names WannaCry, Bad Rabbit, NotPetya. [42, 43]

Since Industrial Control Systems have lifespans counted in decades,
many of the vulnerabilities and security practices did not exist when
the system was first designed. Indeed, two controls that could help
with the vulnerability in question are listed as a challenge faced by
ICS systems: poor network segmentation and limited access control.
These challenges are said to happen due to an evolution of the cyber
threats landscape in Operational Technology [24].

This is where CySecTool may shine. With new threats discovered,
the basic structure of the model can remain the same, but the probabil-
ities of attacks may change – and new ones can be added. Therefore,
cyber security intelligence can be stored in CySecTool models and
updated on demand. This is the goal that is shared with the ATT&CK
database, which is intended to be a living project, adapting to the
changing conditions [35, 40].

6 CONCLUSION
The primary goal of this work was to demonstrate the feasibility of an
optimisation approach to the problem – choosing a security portfolio
for a ClearSCADA system – while suggesting other areas where it
may be useful. From a cyber-security point of view, CySecTool may
be useful to answer questions like – how many network systems of a
given type are vulnerable to common attacks? What is the impact of
a newly-discovered vulnerability? What kind of redundancy would
be needed to provide security against it? How has network security
changed over the years, and what are the dangers of the years to
come?

A practical tool based on the optimisation routine was developed.
Such a tool may be used by security professionals to demonstrate
to their clients not only the kind of services they provide but also

explain the way vulnerabilities, both technical and organisational,
can be avoided, and if they are not, what would be their impact. Since
the model can be adjusted to a particular type of service, it would
make the decisions and the budget approved seem more justified to
the management, improving overall security awareness.

For researchers and security practitioners, it will allow for a faster
information flow from the "academic" to the "practical" side and
vice versa. The academics would be enabled to analyse in detail the
newest reports, as we have done, and pass the results back.

In future research, we hope to see more models applied to the dif-
ferent areas – both broad, such as general ICS analyses, and narrow,
for example, modelling a newly discovered web browser vulnera-
bility. What needs further attention is the validation of the results.
Decisions made by the system should be compared against decisions
made by practitioners, and the models should be refined in practice.
Overall, our core finding is that CySecTool is ready to be tested in
real conditions and have a positive impact on the security of not only
Industrial Control Systems but also of other networks.

ACKNOWLEDGMENTS
This work was partially supported by Engineering and Physical
Sciences Research Council grants EP/R002983/1 and EP/R004897/1.

REFERENCES
[1] M. Khouzani, Z. Liu, and P. Malacaria, “Scalable min-max multi-objective
cyber-security optimisation over probabilistic attack graphs,” Eur. J. Oper.
[Online]. Available:
Res., vol. 278, no. 3, pp. 894 – 903, Apr 2019.
http://sciencedirect.com/science/article/pii/S0377221719303728

[2] P. R. Garvey and S. H. Patel, “Analytical Frameworks to Assess the Effectiveness
and Economic-Returns of Cybersecurity Investments,” in 2014 IEEE MILCOM, Oct
2014, pp. 136–145.

[3] R. Oppliger, “Quantitative Risk Analysis in Information Security Management:

A Modern Fairy Tale,” IEEE Secur. Priv., vol. 13, no. 6, pp. 18–21, Nov 2015.

[4] CIS, “Controls,” 2018. [Online]. Available: https://cybernetsecurity.com/industry-

papers/CIS-Controls%20Version-7-cc-FINAL.PDF

[5] B. W. Lampson, “Protection,” SIGOPS Oper. Syst. Rev., vol. 8, no. 1, pp. 18–24,

Jan 1974. [Online]. Available: https://doi.org/10.1145/775265.775268

[6] M. A. Harrison, W. L. Ruzzo, and J. D. Ullman, “Protection in operating systems,”
Commun. ACM, vol. 19, no. 8, pp. 461–471, Aug 1976. [Online]. Available:
https://doi.org/10.1145/360303.360333

[7] M. A. Harrison, Theoretical Issues Concerning Protection In Operating Systems, ser.
Advances in Computers. Elsevier, 1985, vol. 24, pp. 61 – 100. [Online]. Available:
http://sciencedirect.com/science/article/pii/S0065245808603654

[8] L. Snyder, “On the synthesis and analysis of protection systems,” in Proceedings
of the Sixth ACM Symposium on Operating Systems Principles, ser. SOSP ’77.
New York: Association for Computing Machinery, 1977, pp. 141–150. [Online].
Available: https://doi.org/10.1145/800214.806557

[9] B. Kordy, L. Piètre-Cambacédès, and P. Schweitzer, “DAG-based attack
the attack trees,”
[Online]. Available:

and defense modeling: Don’t miss
Comp. Sci. Rev., vol. 13-14, pp. 1 – 38, 2014.
http://sciencedirect.com/science/article/pii/S1574013714000100

the forest

for

[15] S. Noel, M. Elder, S. Jajodia, P. Kalapa, S. O’Hare, and K. Prole, “Advances in
topological vulnerability analysis,” in 2009 Cybersec. App. Tech. Conf. for HS, 2009,
pp. 124–129.

[16] X. Ou, S. Govindavajhala, and A. W. Appel, “MulVAL: A logic-based network

security analyzer,” in USENIX Security Symposium, 2005.

[17] J. Homer, X. Ou, and D. Schmidt, “A sound and practical approach to quantifying

security risk in enterprise networks,” Kansas State University, Tech. Rep., 2009.

[18] W. T. Shaw, Cybersecurity for SCADA Systems. PennWell, 2006.
[19] NCSC, “Operational technologies,” https://ncsc.gov.uk/guidance/operational-

technologies, Feb 2017.

[20] T. Macaulay and B. L. Singer, “Threats to ICS,” in Cybersecurity for Industrial
Control Systems: SCADA, DCS, PLC, HMI, and SIS. Auerbach, 2016, pp. 110–141.
test on worm
[Online]. Available:

J. Broad,
called crucial
https://nytimes.com/2011/01/16/world/middleeast/16stuxnet.html

J. Markoff, and D. E. Sanger,
in Iran nuclear delay,”

Jan 2011.

[21] W.

“Israeli

[22] D. Kushner, “The real story of Stuxnet,” Feb 2013. [Online]. Available:

https://spectrum.ieee.org/telecom/security/the-real-story-of-stuxnet

[23] A. Hahn, “Operational Technology and Information Technology in Industrial
Control Systems,” in Cyber-security of SCADA and Other Industrial Control
Systems, E. J. M. Colbert and A. Kott, Eds. Cham: Springer, 2016, pp. 51–68.
[Online]. Available: https://doi.org/10.1007/978-3-319-32125-7_4

[24] A. Lakhani, “Evolution of cyber threats in OT environments,” https://fortinet.com/
blog/industry-trends/evolution-of-cyber-threats-in-ot-environments, Jun 2020.
Sandia National

[25] D. P. Duggan, Penetration Testing of Industrial Control Systems.

Laboratories, 2005.

[26] E. Rencelj Ling and M. Ekstedt, “Generating threat models and attack graphs
based on the IEC 61850 System Configuration Description Language,” in
Proc. of the 2021 ACM Workshop on Secure and Trustworthy Cyber-Physical
Systems. New York, NY, USA: ACM, 2021, pp. 98–103. [Online]. Available:
https://doi.org/10.1145/3445969.3450421

[27] S. Katsikeas, P. Johnson, S. Hacks, and L. Robert, “Probabilistic modeling and
simulation of vehicular cyber attacks: An application of the Meta Attack Language,”
in Proc. of the 5th International Conf. on Information Systems Security and Privacy,
Feb 2019. [Online]. Available: https://doi.org/10.5220/0007247901750182

[28] W. Austin, A. Henry, H. Ben, and D. Greg, “JSON schema: A media
[Online]. Available:

type for describing JSON documents,” Dec 2020.
https://datatracker.ietf.org/doc/draft-bhutton-json-schema/00/

[29] A.

for Supporting the Selection of Engineering Materials

Jahan, K. L. Edwards, and M. Bahraminasab, Multi-criteria Deci-
in
Jahan, K. L. Edwards, and M. Bahram-
[Online]. Available:

sion Analysis
Product Design, 2nd ed., A.
inasab,
Butterworth-Heinemann,
http://sciencedirect.com/science/article/pii/B9780081005361000047

2016.

Eds.

[30] M. M. McKerns, L. Strand, T. Sullivan, A. Fang, and M. A. G. Aivazis,
“Building a framework for predictive science,” CoRR, 2012. [Online]. Available:
http://arxiv.org/abs/1202.1056

[31] S. Mitchell and I. Dunning, “PuLP: A linear programming toolkit for Python,” 2011.
[32] MITRE, “Supply Chain Compromise — ATT&CK for Industrial Control Systems,”

https://collaborate.mitre.org/attackics/index.php/Technique/T0862, Apr 2021.

[33] A. Pennington, A. Applebaum, K. Nickels, T. Schulz, B. Strom, and J. Wunder,
Getting started with ATT&CK. MITRE, Oct 2019. [Online]. Available:
https://www.mitre.org/sites/default/files/publications/mitre-getting-started-
with-attack-october-2019.pdf

[34] K. Nickels, “Using ATT&CK to advance CTI – part 2,” Nov 2018. [Online].
Available: https://medium.com/mitre-attack/using-att-ck-to-advance-cyber-
threat-intelligence-part-2-6f21fdba80c

[35] O. Alexander, M. Belisle, and J. Steele, ATT&CK for Industrial Control Systems:

Design and Philosophy. MITRE, Mar 2020.

[36] B. Jordan, R. Piazza, and T. Darley, STIX™ Version 2.1. OASIS Open 2021, 2021.
[37] Microsoft Corporation,

“Allowing only signed application to run,”
https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-
server-2008-R2-and-2008, Sep 2012.

[38] RMF FM, “Tramwajowy sabotaż w Łodzi: Chłopiec działał od pół roku,”

[10] J. Weiss, “A system security engineering process,” in 14th National Computer

https://archive.is/08qSk (Polish), Jan 2008.

Security Conference. NCSC, 1991.

[39] K. M. Martin, “The DES. The AES,” in Everyday Cryptography. Oxford University

[11] N. Poolsappasit, R. Dewri, and I. Ray, “Dynamic security risk management using
Bayesian attack graphs,” IEEE Trans. Dependable Secure Comput., vol. 9, no. 1, pp.
61–74, 2012.

[12] R. Dewri, N. Poolsappasit, I. Ray, and D. Whitley, “Optimal security hardening
using multi-objective optimization on attack tree models of networks,” in Proc.
of the 14th ACM Conf. on Comp. and Comm. Sec., ser. CCS ’07. New York:
Association for Computing Machinery, 2007, pp. 204–213. [Online]. Available:
https://doi.org/10.1145/1315245.1315272

[13] L. P. Swiler, C. Phillips, D. Ellis, and S. Chakerian, “Computer-attack graph
generation tool,” in Proc. DARPA Inf. Surv. Conf. and Exp. II. DISCEX’01, vol. 2, 2001,
pp. 307–321 vol.2.

[14] R. Lippmann, K. Ingols, C. Scott, K. Piwowarski, K. Kratkiewicz, M. Artz, and
R. Cunningham, “Validating and restoring defense in depth using attack graphs,”
in MILCOM 2006, 2006, pp. 1–10.

Press, 2017, pp. 130–143.

McLean, VA: MITRE, Mar 2020.

and C. B. Thomas, ATT&CK: Design

[40] B. E. Strom, A. Applebaum, D. P. Miller, K. C. Nickels, A. G.
Philoso-
[Online]. Available: https:

Pennington,
phy.
//attack.mitre.org/docs/ATTACK_Design_and_Philosophy_March_2020.pdf
[41] C. J. Van Wyngaard, J. H. C. Pretorius, and L. Pretorius, “Theory of the triple
constraint — a conceptual review,” in 2012 IEEE Int. Conf. on Ind. Eng. and Eng.
Manag., Dec 2012, pp. 1991–1997.

and

[42] MITRE, “Remote File Copy — ATT&CK for Industrial Control Systems,”

https://collaborate.mitre.org/attackics/index.php/Technique/T0867, Apr 2021.

[43] J. Slowik,

“Implications of

IT ransomware

for

ICS environments,”

https://dragos.com/blog/industry-news/implications-of-it-ransomware-
for-ics-environments/, Apr 2019.

