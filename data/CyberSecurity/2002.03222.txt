SUOD: Toward Scalable Unsupervised Outlier Detection

Yue Zhao,1 Xueying Ding,1 Jianing Yang,2 Haoping Bai2
1H. John Heinz III College, Carnegie Mellon University, Pittsburgh, PA 15213, USA
2Machine Learning Department, Carnegie Mellon University, Pittsburgh, PA 15213, USA
zhaoy@cmu.edu, xding2@andrew.cmu.edu, jianing3@cs.cmu.edu, haopingb@andrew.cmu.edu

0
2
0
2

b
e
F
8

]

G
L
.
s
c
[

1
v
2
2
2
3
0
.
2
0
0
2
:
v
i
X
r
a

Abstract

Outlier detection is a key ﬁeld of machine learning for iden-
tifying abnormal data objects. Due to the high expense of
acquiring ground truth, unsupervised models are often cho-
sen in practice. To compensate for the unstable nature of un-
supervised algorithms, practitioners from high-stakes ﬁelds
like ﬁnance, health, and security, prefer to build a large num-
ber of models for further combination and analysis. However,
this poses scalability challenges in high-dimensional large
datasets. In this study, we propose a three-module accelera-
tion framework called SUOD to expedite the training and pre-
diction with a large number of unsupervised detection mod-
els. SUOD’s Random Projection module can generate lower
subspaces for high-dimensional datasets while reserving their
distance relationship. Balanced Parallel Scheduling module
can forecast the training and prediction cost of models with
high conﬁdence—so the task scheduler could assign nearly
equal amount of taskload among workers for efﬁcient paral-
lelization. SUOD also comes with a Pseudo-supervised Ap-
proximation module, which can approximate ﬁtted unsuper-
vised models by lower time complexity supervised regressors
for fast prediction on unseen data. It may be considered as
an unsupervised model knowledge distillation process. No-
tably, all three modules are independent with great ﬂexibility
to “mix and match”; a combination of modules can be chosen
based on use cases. Extensive experiments on more than 30
benchmark datasets have shown the efﬁcacy of SUOD, and a
comprehensive future development plan is also presented.

Introduction
Anomaly detection aims to identify the samples that are de-
viant from the general data distribution (2019). Most of the
existing outlier detection algorithms are unsupervised due
to the high cost of acquiring ground truth (2019). It is noted
that outlier detection can be viewed as a binary classiﬁca-
tion problem under extreme imbalance (i.e., the number of
outliers is way smaller than the number of normal samples).
As a result, using a single unsupervised model is risky by
nature; it is sensible to use a large group of unsupervised
models with variations, e.g., different algorithms, varying
parameters, distinct views of the datasets, etc., and more re-
liable results may be achieved. Outlier ensemble methods

Copyright c(cid:13) 2020, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

that select and combine base detectors are designed for this
purpose (2013; 2014; 2017). The simplest way is to take the
average or maximum values across all the detectors as the
ﬁnal result (2017). More complex combination can also be
done in both unsupervised (2019) and semi-supervised man-
ners (2018).

However, both training and predicting with a large num-
ber of unsupervised detectors are computationally expen-
sive. This problem is more severe on high-dimensional
large samples, especially for proximity-based algorithms
that assume outliers behave very differently in speciﬁc re-
gions (2016). Most algorithms in this category, including k
nearest neighbors (kNN) (2000), local outlier factor (LOF)
(2000), and local outlier probabilities (LoOP) (2009), op-
erate in Euclidean space and suffer from the curse of di-
mensionality. They can be prohibitively slow or even fail
to work completely. The effort has been made to project
high-dimensional data to lower subspaces (2001), like sim-
ple Principal Component Analysis (PCA) (2003) and more
complex subspace method HiCS (2012). Engineering cures
have been explored as well—the process can be expedited by
parallelization on multiple workers (e.g., CPU cores) (2005;
2014). Recently, knowledge distillation emerges as a popu-
lar way of compressing large neural network models (2015),
while its usage in outlier detection is still limited.

The aforementioned treatments face various challenges.
First, deterministic projection methods, e.g., PCA, are fast
but not ideal for building a large number of diversiﬁed out-
lier detectors—it results in the same subspace that cannot
induce diversity for outlier ensembles. Complex projection
and subspace methods may bring performance improvement
for outlier mining, but the generalization capacity is often
reduced with strong assumptions. They are not suited for
general-purpose outlier detector acceleration. Existing par-
allelization learning frameworks can be inefﬁcient if train-
ing and prediction task assignments are not balanced among
workers. In fact, a group of heterogeneous models can have
signiﬁcantly different computational cost. As a simple ex-
ample, let us split 100 heterogeneous models into 4 groups
(cores) for training. If group #2 takes signiﬁcantly longer
time than the others to ﬁnish, it will behave like the bot-
tleneck of the system. More formally, the imbalanced task

 
 
 
 
 
 
scheduling ampliﬁes the impact of slower worker(s) in a sys-
tem; the system efﬁciency is curbed by the slowest group.
As we have shown in the later section, the existing parallel
task scheduling algorithms in popular machine learning li-
braries like scikit-learn (2011) may be inefﬁcient under this
setting. In addition to these limitations, unsupervised mod-
els such as LOF can be slow (high time complexity), or
even inappropriate, to predict on unseen data samples by na-
ture. Another downside of unsupervised and non-parametric
models is their limited interpretability. In summary, training
and predicting with a large number of heterogeneous unsu-
pervised models is computationally expensive, inefﬁcient in
parallelization, and limited in interpretability.

To tap the gap, we propose a three-module accelera-
tion framework called SUOD that leverages random projec-
tion, pseudo-supervised approximation, and balanced par-
allel scheduling for scalability. For high-dimensional data,
SUOD generates a random low-dimensional subspace for
each unsupervised model by Johnson-Lindenstrauss projec-
tion, on which the model is then trained. To improve the
training and prediction efﬁciency in a distributed system, we
propose a balanced parallel scheduling heuristic. The key
idea is to forecast the running time of each model so that
the workload could be evenly distributed among workers.
If prediction is needed for unseen data, lower cost super-
vised regressors are initialized to approximate complex un-
supervised models—the supervised models are trained on
the original feature space using the outlier scores generated
by unsupervised models as the “pseudo ground truth”. The
rationale behind is efﬁcient supervised models are faster for
prediction and usually more interpretable; it can be viewed
as a way of distilling knowledge from unsupervised models
(2015). Notably, all these three modules are designed to be
fully independent for model acceleration from complemen-
tary perspectives. They have great ﬂexibility to be mixed for
different needs.

In this work, we make the following contributions:

1. Examine the effect of various deterministic and ran-
dom projection methods on varying size and dimension
datasets, and identify the applicable cases of using them
for faster execution and diversity induction.

2. Identify an imbalanced scheduling issue in existing dis-
tributed learning systems for heterogeneous detectors and
ﬁx it by a new scheduling schema.

3. Conduct extensive experiments to analyze the results of
using pseudo-supervised regression models for approxi-
mating unsupervised outlier detectors. To our best knowl-
edge, this is the ﬁrst research attempt in outlier detection
setting.

4. Demonstrate the effectiveness of the three modules in-
dependently, and the extensibility of combining them to-
gether as a scalable training and prediction framework.

5. To foster reproducibility, all code, ﬁgure, and datasets
used in this study are openly shared1. A scalable imple-
mentation will also be included in PyOD (2019) soon.

1https://github.com/yzhao062/SUOD

Related Works

Outlier Detection and Outlier Ensembles
Anomaly detection has numerous important applications in
various ﬁelds, such as rare disease detection (2018), fraud-
ulent online review analysis (2013), and network intrusion
detection (2003). Despite, detecting outliers is a challeng-
ing classiﬁcation task due to multiple reasons (2019). First,
anomalies only consist of a small portion of the entire data–
extreme data imbalance incurs difﬁculty. Second, the lim-
ited amount of data and available labels impede learning
data representation accurately. Third, the deﬁnition of out-
liers can be ambiguous; outliers may be heterogeneous that
should be treated as a multi-class problem.

Most of the existing detection algorithms are unsuper-
vised as ground truth is absent; acquiring labels can be pro-
hibitively expensive in practice. As a result, there are a few
established unsupervised anomaly detection algorithms like
Isolation Forest (2008), Local Outlier Factor (LOF) (2000),
and Angle-based Outlier Detection (ABOD) (2009), with
different assumptions of the underlying data. Regarding un-
supervised deep models like autoencoders and generative
adversarial networks (2019), the amount of accessible data
limits their effectiveness on learning representations. No al-
gorithm could always outperform as the assumptions may be
incorrect, and it is hard to asses without ground truth.

Therefore, relying on a single unsupervised model has
an inherently high risk, and outlier ensembles that lever-
age a group of detectors become increasingly popular (2013;
2014). There are a group of unsupervised outlier ensem-
ble frameworks proposed in the last several years from
simple average, maximization, weighted average, second-
phase combination methods (2017) to more complex se-
lective models like SELECT (2016) and LSCP (2019). Al-
though unsupervised outlier ensembles methods can be ef-
fective in certain cases, they could not incorporate the exist-
ing ground truth information regardless of its richness. As a
result, a group of semi-supervised detection frameworks that
leverage existing labels and enhance the data representation
by unsupervised models are proposed. The representative
ones include BORE (2014) and XGBOD (2018). They use
unsupervised outlier detection scores as additional features
to enhance the original feature space, which can be consid-
ered as unsupervised feature engineering or representation
learning (extraction). It is noted that for both unsupervised
and supervised outlier ensembles, a large group diversiﬁed
unsupervised base detectors are needed—SUOD is therefore
designed to facilitate this process.

Knowledge Distillation and Model Approximation
Knowledge distillation refers to the notion of compressing
a or an ensemble of large, often cumbersome model(s) into
a small and more interpretable model. This is often done by
training an ensemble of large models (can be seen as “Teach-
ers”) on a large dataset, followed by using a small and simple
model (“Student”) to learn the output of the ensemble. There
are two main motivations behind knowledge distillation: (i)
to reduce the deployment-time computational cost by re-
placing the large models with a small model and (ii) to in-

crease interpretability as simple models are often more easy
to be understood by human. This strategy has seen success
in tasks including computer vision (2014), automatic speech
recognition (2015), and neural machine translation (2016).
It is noted that the proposed SUOD framework shares a simi-
lar concept as knowledge distillation for computational cost
optimization but comes with a few fundamental differences
as described in Algorithm Design section.

Algorithm Design
The proposed SUOD contains three independent modules. As
shown in Algorithm 1, the modules may be enabled if spe-
ciﬁc conditions are met. For high-dimensional data, SUOD
randomly project the original input onto lower-dimensional
spaces (Module I). For expediting the training and predic-
tion with a large number of models, a balanced parallel
scheduling mechanism is proposed (Module II). If predic-
tion on new samples is needed, an efﬁcient supervised re-
gressor may be initialized to approximate the output of each
costly unsupervised detector for prediction (Module III).

Module I: Random Projection
A widely used algorithm to alleviate the curse of dimension-
ality on high-dimensional data is the Johnson-Lindenstraus
(JL) projection (1984), although its use in outlier mining
is still unexplored. JL projection is a simple compression
scheme without heavy distortion on the Euclidean distances
of the data. Its built-in randomness is also useful for induc-
ing diversity for outlier ensembles. Despite, projection may
be less useful or even detrimental for methods like Isolation
Forests and HBOS that rely on subspace splitting.

This linear transformation is deﬁned as: given a set of data
X = {x1, x2, ...xn}, each xi ∈ Rd, let W be a k × d matrix
with each entry drawing independently from a N (0, 1) dis-
tribution or a Rademacher distribution. Then the JL projec-
tion is a function f : Rd → Rk such that f (xi) = 1√
W xi.
k
JL projection randomly projects high-dimensional data to
lower dimension subspaces, but preserve the distance rela-
tionship between points. In fact, if we ﬁx some v ∈ Rd,
and let W be the k × d matrix such that each entry is from
N (0, 1). For every (cid:15) ∈ (0, 3), we have:

(cid:20)

P

(1 − (cid:15))(cid:107)v(cid:107)2 ≤ (cid:107)

2

W v(cid:107)

≤ (1 + (cid:15))(cid:107)v(cid:107)2

(cid:21)

≤ 2e−(cid:15)2 k

6

1
√
k

(1)
Furthermore, ﬁx v to be the differences between vectors.
Then, the above bound also shows that for a ﬁnite set of N
vectors X = {x1, x2, ...xn} ⊆ Rd, the pairwise Euclidean
distance is preserved within a factor of (1 ± (cid:15)), if we reduce
the vectors to k = O( log(N )

) dimensions.

Four JL projection methods are therefore introduced for
their great property in compression and diversity induction:
(i) basic: the transformation matrix is generated by stan-
dard Gaussian; (ii) discrete: the transformation matrix is
picked randomly from Rademacher distribution (uniform in
{−1, 1}); (iii) circulant: the transformation matrix is ob-
tained by rotating the subsequent rows from the ﬁrst row

(cid:15)2

which is generated from standard Gaussian and (iv) toeplitz:
the ﬁrst row and column of the transformation matrix are
generated from standard Gaussian, and each diagonal uses a
constant value from the ﬁrst row and column.

Let X ∈ Rn×d denote a dataset with n points and d fea-
tures. In this work, we only invoke the projection if the data
dimension exceeds 20 (dimension threshold θ = 20) and re-
duce the original dimension by half (projection dimension
k = 1
2 d). SUOD check whether d is higher the projection
threshold θ. If so, a JL transformation matrix W ∈ Rk×d
is initialized by one of the JL projection methods and X is
projected onto the k dimension subspace by W .

Module II: Balanced Parallel Scheduling

Balanced Parallel Scheduling (BPS) aims for assigning
training and prediction tasks more evenly based on the
model costs, across all available workers. For instance, one
may train 25 detectors with varying parameters from each of
the four algorithm groups {kNN, LOF, ABOD, OCSVM},
resulting in 100 models in total. The existing parallel frame-
works, e.g., the voting machine in scikit-learn (2011), will
simply split the the models into 4 subgroups by order and
schedule the ﬁrst 25 models (all kNNs) on Core 1 (worker 1),
the next 25 models on Core 2, etc. This does not account for
the fact that within a group of heterogeneous detectors, the
computational cost varies. Scheduling the task with equal
number of models can result in highly imbalanced tasks.
In the worst case scenario, one worker may be signiﬁcantly
slower than the rest, and the entire process halts. Obviously,
this problem applies to both training and prediction stage.

The proposed BPS heuristic focuses on designing a more
balanced schedule among workers. Ideally, all workers can
ﬁnish the scheduled tasks within the similar duration of time
and return the result. As shown in Fig. 1, we build a model
cost predictor Ccost to forecast the model running time (sum
of 10 trails) given the input data size, input data dimension,
and the algorithm embedding (one-hot). Given the time and
resource limitation, we built a training set with 11 algorithms
on 47 benchmark datasets (see Experiment section for de-
tails), and a random forest regressor (2001) is trained on the
dataset with 10-fold cross validation. Although the ﬁtted re-
gressor does not have a high R2 score, the Spearman’s Rank
correlation (1904) consistently shows high value (rs > 0.9)
with low p-value (p < 0.0001). This implies that even the
cost predictor Ccost could not predict the running time pre-
cisely, it can predict the rank of the running time with high
accuracy. As a result, we propose a scheduling heuristic by
enforcing nearly equal sum of the rank on running time.
Given there are m models to be trained, cost predictor Ccost
is ﬁrst invoked to forecast the time cost for a given model
Di in D as Ccost(Di). After the prediction is done, the pre-
dicted time is converted to a rank in [1, m]. If there are t
cores (workers), each worker will be assigned a group of
models to achieve the objective of minimizing the workload
imbalance among workers (Eq. 2). So each group has a rank
sum at around m2+m
. One additional advantage of using
rank is transferability: the running time will vary on differ-
ent machines but the relative rank should preserve.

2t

Figure 1: Flowchart of Balanced Parallel Scheduling

t
(cid:88)

i=1

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

(cid:88)

Dj ∈Wi

min
W

Ccost(Di) −

m
(cid:88)

l=1

(cid:12)
(cid:12)
(cid:12)
Ccost(Dl)
(cid:12)
(cid:12)
(cid:12)

(2)

Module III: Pseudo-Supervised Approximation
Once the unsupervised models have been ﬁtted on the re-
duced feature space generated in Module I or the original
space (if no random projection is involved). SUOD can ap-
proximate and replace each of costly unsupervised model
by a faster supervised regression model for predicting on
unseen samples. In other words, not all unsupervised models
should be replaced but only the expensive ones. There is no
efﬁciency incentive to approximate fast algorithms like Iso-
lation Forest. However, most of the proximity-based algo-
rithms like kNN and LOF have high time complexity for pre-
diction (upper bounded by Θ(nd)), which can be effectively
replaced by fast supervised models like random forest (up-
per bounded by Θ(dp) where p denotes the number of base
trees). This “pseudo-supervised” model uses the output of
unsupervised models as “the pseudo ground truth”—the goal
is to approximate and ﬁnd a better mapping from the original
input to “the output of an unsupervised model”. Ensemble-
based tree models are recommended for their outstand-
ing scalability, robustness to overﬁtting, and interpretabil-
ity (e.g., feature importance). Notably, this process can also
be viewed as using supervised regressors to distill knowl-
edge from unsupervised models. However, our approxima-
tion is different from the established knowledge distillation
mainly in three aspects. First, our approximation works in a
fully unsupervised manner unlike the classic distillation un-
der supervised settings. Second, our “teacher” and “student”
models have totally different architectures with little to no
similarity. For instance, we use random forest (an ensemble
tree model) to approximate LOF (a proximity-based density
estimation model). Third, our approximation leads to a clear
interpretability improvement, whereas the student models in
neural networks lack that. See Appendix ??.

As shown in Algorithm 1, for each trained unsupervised
model Di, a supervised regressor Ri might be built with the
original input X and the pseudo ground truth (the output of
Di). The prediction on unseen data will be then made by R.
This approximation shows multiple beneﬁts:

1. Compared with non-parametric unsupervised models,
parametric supervised models may have lower space com-
plexity and faster prediction speed.

2. Supervised models generally show better interpretability
compared with unsupervised counterparts. For instance,
random forest used in this work can generate feature im-
portance automatically to facilitate understanding.

3. Not all unsupervised models are appropriate for making
prediction. Taking LOF as an example, the ﬁtted model
is not supposed to predict on unseen data. A supervised
approximator may be used for prediction in this case.

Algorithm 1 Scalable Unsupervised Outlier Detection

Inputs: a group of m unsupervised outlier detectors D; d
dimension training data Xtrain and test data Xtest (op-
tional); projection threshold θ; projection dimension k;
pre-trained cost predictor Ccost; # of workers t

Outputs: ﬁtted unsupervised models D; ﬁtted pseudo-
supervised regressors R (optional); prediction results on
test data ˆytest (optional)
1: for Each detector Di in D do
2:
3:

// enable random projection
Generate random subspace ψi by JL projection

if d > θ then

on Xtrain (see Module I)

Use the original feature space ψi := Xtrain

// disable random projection

end if

else d < θ

4:
5:
6:
7: end for
8: if Parallel learning == True then
9:

Train each Di on the corresponding ψi by Balanced

Parallel Scheduling on t workers (Eq. (2) and Fig. 1)

10: end if
11: Return D
12: if Xtest is presented and Approximation == True then
Acquire the pseudo ground truth targetψi as the
13:

output of Di on ψi: targetψi := Di(ψi)

14:
15:
16:

for Each detector Di in D do

Initialize a supervised regressor Ri
Fit Ri by {X, targetψi} in pseudo-supervised

approximation described in Module III

ˆyi
test = Ri.predict(Xtest)
end for
Return ˆytest and ﬁtted regressors R

17:
18:
19:
20: end if

Numerical Experiments and Discussion
In this preliminary study, three independent experiments are
conducted to understand: (i) how will random projection
methods affect the performance of outlier detection algo-
rithms; (ii) whether the proposed parallel scheduling algo-
rithm brings performance improvement over the existing ap-
proaches and (iii) will pseudo-supervised models lead to de-
graded prediction performance compared with the original
unsupervised models? Because all three modules are inde-
pendent and can be combined seamlessly, it is assumed that

the (partly) combined framework should also work if indi-
vidual components manage to work.

ity and inducing diversity for the models that are susceptible
to the curse of dimensionality.

Datasets, Evaluation Metrics, and Implementation

More than 30 outlier detection benchmark datasets are used
in this study12); the detail is available on online supplemen-
tary due to the space limit. The data size n varies from 219
(Glass) to 567,479 (HTTP) samples and the dimension d
ranges from 3 to 400. For both random projection and par-
allel scheduling experiments, full datasets are used for train-
ing. For the pseudo-supervised approximation experiments,
60% of the data is used for training and the remaining 40%
is set aside for validation. For all experiments, performance
is evaluated by taking the average of 10 independent trials
using area under the receiver operating characteristic (ROC)
and precision at rank n (P@N). Both metrics are widely used
in outlier research (2008; 2014; 2016; 2017; 2018; 2019;
2019).

All the unsupervised models are from Python Outlier De-
tection Toolbox (PyOD), a popular library for outlier mining
(2019). Supervised regressors and utility functions are from
standard libraries (scikit-learn and numpy). For a fair
comparison, none of the models involve parameter tuning
process—the default values are used. As all three modules
involve time proﬁling, the same machine (Intel i7-9700 @
3.00 GHZ; 32 GB RAM) is used for a fair comparison.

Comparison among Projection Methods

To evaluate the effect of projection methods on outlier detec-
tor performance, we choose three expensive detection algo-
rithms (ABOD, LOF, and kNN) to measure their execution
time, ROC, and P@N with different projection methods. All
three methods directly or indirectly measure sample similar-
ity in the Euclidean space , e.g., pairwise sample distances,
which is susceptible to the curse of dimensionality and pro-
jection may be particularly helpful.

Table 1 shows the comparison among four JL projection
variations with original (no projection is used), PCA, and
RS (randomly select k features from the original d features,
used in Feature Bagging (2005) and LSCP). First, all projec-
tion methods show superiority regarding time cost. Second,
using RS method comes with high instability, and shows
performance decrease on all three datasets. This observa-
tion agrees with the ﬁnding by Zhao et al. (2019), in which
they used an ensemble projection to overcome the instabil-
ity. Third, PCA is slightly faster than JL projection methods,
although the detector performance by PCA projection is not
as good as the ones with JL projections as shown in sub-
table (b)-(i). Moreover, PCA as a deterministic method, may
not be ideal for inducing diversity in outlier ensembles, as it
always result in the same sets of subspaces. Fourth, among
all four JL projection methods, circulant and toeplitz out-
perform in most cases. Since toeplitz is slightly faster than
circulant, it is a reasonable choice for reducing dimensional-

1ODDS Library: http://odds.cs.stonybrook.edu
2DAMI Datasets: http://www.dbs.iﬁ.lmu.de/research/outlier-

evaluation/DAMI

The Effect of Balanced Parallel Scheduling
To verify the effectiveness of the proposed BPS algorithm,
we run the following experiments by varying: (i) the size
(n) and the dimension (d) of the datasets, (ii) the number of
estimators to train (m) and (iii) the number of CPU cores
(t). The time elapsed is measured in seconds. Due to the
space limit, we only show the comparison between the sim-
ple scheduling and BPS on Cardio (n = 1831, d = 21),
PageBlocks (n = 5393, d = 10), and Pendigits (n =
6870, d = 16), by setting t ∈ {2, 4, 6} and m ∈ {100, 500}.
More results can be found on the online supplementary,
and the conclusion holds for all tested datasets. Table 2
shows that the proposed BPS has a clear edge over the sim-
ple scheduling mechanism (denoted as Simple in the tables)
that equally splits the tasks by order. It yields a signiﬁcant
time reduction (denoted as % RED in the tables), and gets
more signiﬁcant if more estimators and cores are involved.
For instance, if 500 estimators and 6 cores are used, the
time reduction over the simple scheduling is more than 40%.
This agrees with our assumption that the imbalanced task
scheduling will lead to more inefﬁcient consequences with
the increasing number of estimators and workers, and will
therefore beneﬁt more from the proposed BPS heuristic.

The Analysis of Pseudo-Supervised Approximation
To better understand the behavior of the pseudo-supervised
approximation, we ﬁrst generate 200 synthetic points with
Normal distribution for outliers (40 points) and Uniform dis-
tribution for normal samples (160 points). In Fig. 2, we plot
the decision surfaces of unsupervised models and their su-
pervised approximators (random forest regressor). It is clear
that the decision surfaces are different and some regular-
ization effect appears (lower errors on Feature Bagging and
kNN). One of the assumptions is that the approximation pro-
cess improves the generalization ability of the model by “ig-
noring” the overﬁtted points. This fails to work with ABOD
because it has a extremely coarse decision surfaces to ap-
proximate (see Fig. 2).

Table 3 and 4 compare prediction performance between
the original unsupervised models and pseudo-supervised ap-
proximators on 8 datasets with 6 algorithms. These algo-
rithms are known to be more computationally expensive than
the supervised random forest regressors. The approximators
with performance degradation are highlighted in bold and
italicized in the tables. The prediction time comparison is
omitted due to space limit, but the gain is clear (see on-
line supplementary). Therefore, the focus is put on predic-
tion ROC and P@N to see whether the approximators could
predict unseen data as good as the original unsupervised
models. The acceptable threshold of performance degrada-
tion between an approximator and its original unsupervised
models is set as [0, 0.01] and any negative difference larger
than 0.01 will be regarded as degradation. The tables reveal
that not all the algorithms can be approximated well by su-
pervised regressors: ABOD has a performance decrease re-
garding ROC on multiple datasets. ABOD is a linear mod-

Table 1: Comparison of various projection methods on different outlier detectors and datasets

(a) ABOD on MNIST

(b) ABOD on Satellite

(c) ABOD on Satimage-2

Method
original
PCA
RS
basic
discrete
circulant
toeplitz

Method
original
PCA
RS
basic
discrete
circulant
toeplitz

Method
original
PCA
RS
basic
discrete
circulant
toeplitz

Time ROC PRN
0.39
0.80
12.89
0.37
0.81
8.93
0.32
0.74
8.27
0.38
0.80
8.94
0.39
0.80
8.86
0.38
0.80
9.33
0.38
0.80
8.96

Method
original
PCA
RS
basic
discrete
circulant
toeplitz

Time ROC PRN
0.41
0.59
4.03
0.44
0.62
3.01
0.44
0.63
3.53
0.45
0.64
3.10
0.46
0.65
3.12
0.48
0.66
3.14
0.47
0.66
3.14

Method
original
PCA
RS
basic
discrete
circulant
toeplitz

Time ROC PRN
0.28
0.85
3.68
0.30
0.88
2.70
0.28
0.89
3.20
0.29
0.91
2.78
0.31
0.91
2.79
0.29
0.91
2.85
0.30
0.92
2.83

(d) LOF on MNIST

(e) LOF on Satellite

(f) LOF on Satimage-2

Time ROC PRN
0.29
0.68
7.64
0.27
0.67
4.92
0.23
0.63
3.65
0.31
0.70
4.87
0.32
0.70
5.21
0.31
0.69
5.06
0.31
0.71
4.97

Method
original
PCA
RS
basic
discrete
circulant
toeplitz

Time ROC PRN
0.38
0.55
0.82
0.36
0.54
0.23
0.37
0.54
0.39
0.37
0.54
0.31
0.37
0.54
0.32
0.37
0.55
0.39
0.37
0.54
0.37

Method
original
PCA
RS
basic
discrete
circulant
toeplitz

Time ROC PRN
0.07
0.54
0.79
0.04
0.52
0.20
0.08
0.53
0.37
0.08
0.52
0.29
0.07
0.53
0.30
0.11
0.59
0.43
0.09
0.54
0.32

(g) kNN on MNIST

(h) kNN on Satellite

(i) kNN on Satimage-2

Time ROC PRN
0.42
0.84
7.13
0.40
0.84
3.92
0.34
0.77
3.33
0.42
0.84
4.17
0.41
0.84
4.11
0.41
0.84
4.13
0.42
0.84
4.11

Method
original
PCA
RS
basic
discrete
circulant
toeplitz

Time ROC PRN
0.49
0.67
0.71
0.50
0.67
0.18
0.49
0.68
0.31
0.49
0.68
0.24
0.50
0.69
0.25
0.50
0.70
0.33
0.51
0.70
0.30

Method
original
PCA
RS
basic
discrete
circulant
toeplitz

Time ROC PRN
0.39
0.94
0.68
0.39
0.94
0.15
0.38
0.94
0.29
0.38
0.94
0.23
0.37
0.95
0.20
0.37
0.96
0.36
0.39
0.96
0.25

els that look for a lower-dimensional subspace to embed the
normal samples (2016), so the approximation may not work
if it has extremely complex decision surfaces as mentioned
before. In contrast, proximity-based models that aim to iden-
tify speciﬁc Euclidean regions in which outliers are differ-
ent, beneﬁt from the approximation. Both table shows, kNN,
LoF, and AkNN (average kNN) experience an performance
gain. Speciﬁcally, all three algorithms yield around 100%
ROC increase on HTTP. Other algorithms, such as Feature
Bagging and CBLOF, the ROC and PRC performances stay
within the acceptable range. In other words, it is useful to
perform pseudo-supervised approximation for these estima-
tors as the time efﬁciency is improved at little to no loss in
accuracy. Through the visualization and quantitative com-
parisons, we believe that the proposed pseudo-supervised
approximation is meaningful for prediction acceleration.

Conclusion and Future Directions
In this work, a three-module framework called SUOD is
proposed to accelerate the training and prediction with a
large number of unsupervised anomaly detectors. The three
modules in SUOD focus on different perspectives of scala-
bility enhancement: (i) Random Projection module gener-

Table 2: Comparison between simple scheduling and BPS

n
1831
1831
1831
1831
1831
1831
5393
5393
5393
5393
5393
5393
6870
6870
6870
6870
6870
6870

d
21
21
21
21
21
21
10
10
10
10
10
10
16
16
16
16
16
16

m t
2
100
4
100
6
100
2
500
4
500
6
500
2
100
4
100
6
100
2
500
4
500
6
500
2
100
4
100
6
100
2
500
4
500
6
500

Simple
26.33
17.93
19.16
100.51
80.38
55.3
51.11
42.49
38.45
197.84
167.36
127.08
80.89
68.31
49.19
336.54
345.69
211.34

BPS % RED
24.61
19.85
23.65
13.69
20.51
15.23
28.21
72.16
50.91
39.46
40.72
32.78
31.19
35.17
61.80
16.23
55.86
16.97
30.52
137.46
54.51
76.14
47.84
66.29
16.89
67.23
48.34
35.29
50.84
24.18
14.98
286.14
52.55
164.02
46.47
113.13

Figure 2: Comparison among unsupervised models and their pseudo-supervised counterparts

ates lower-dimensional subspaces to alleviate the curse of
dimensionality using toeplitz Johnson-Lindenstraus projec-
tion; (ii) Balanced Parallel Scheduling module ensures that
nearly equal amount of workloads are assigned to multiple
workers in parallel training and prediction and (iii) Pseudo-
supervised Approximation module could accelerate costly
unsupervised models’ prediction speed by replacing them
by scalable supervised regressors, which also brings the ex-
tra beneﬁt regarding interpretability and storage cost. The
extensive experiments on more than 30 benchmark datasets
empirically show the great potential of SUOD, and many in-
triguing results are observed. To improve the model repro-
ducibility and accessibility, all code, ﬁgures, implementation
for demo and production, will be released1.

Many investigations are underway. First, we would like to
demonstrate SUOD’s effectiveness as an end-to-end frame-
work by combining three modules, and provide an easy to
use toolkit in Python. Three additional experiments may
be conducted to show that SUOD is useful for: (i) simple
combination like majority vote and maximization (2020);
(ii) more complex unsupervised model combination like
LSCP (2019) and (iii) supervised outlier combination algo-
rithms such as XGBOD (2018). Second, although we pro-
vide a pre-built model cost predictor as part of the frame-
work, a re-trainable cost predictor is expected so practition-
ers can make accurate prediction on their machines. Third,
we would further emphasize the interpretability provided
by the pseudo-supervised approximation, which can be be-
yond simple feature importance provided in tree regressors.

Fourth, we see there is room to investigate why and how
the pseudo-supervised approximation could work in a more
strict and theoretical way. Speciﬁcally, we want to know how
to choose supervised regressors and under what conditions
the approximation could work. This study, as the ﬁrst step,
empirically shows that proximity-based models beneﬁt from
the approximation, whereas linear models may not. Lastly,
we want to verify that SUOD can work with real-world use
cases. We are in contact with a pharmaceutical consultancy
ﬁrm to access their rare disease detection datasets (which
can be viewed as an outlier detection task). Microsoft Mal-
ware Dataset2 is also chosen to explore SUOD’s applicability.

References
[2001] Achlioptas, D. 2001. Database-friendly random pro-
jections. In PODS, 274–281. ACM.
[2017] Aggarwal, C. C., and Sathe, S. 2017. Outlier ensem-
bles: An introduction. Springer, 1st edition.
[2013] Aggarwal, C. C. 2013. Outlier ensembles: position
paper. ACM SIGKDD Explorations Newsletter 14(2):49–58.
[2016] Aggarwal, C. C. 2016. Outlier Analysis. Springer.
2013.
[2013] Akoglu, L.; Chandy, R.; and Faloutsos, C.
Opinion fraud detection in online reviews by network ef-
fects. In ICWSM.
[2001] Breiman, L. 2001. Random forests. Machine learn-
ing.

1https://github.com/yzhao062/SUOD

2https://www.kaggle.com/c/microsoft-malware-prediction

Table 3: Test ROC scores of unsupervised models and their pseudo-supervised approximators (avg of 10 independent trials)

Dataset
Model
ABOD
CBLOF
FB
KNN
AKNN
LOF

HTTP

Cardio

Breastw

Annthyroid
Orig Appr Orig Appr Orig Appr Orig Appr Orig Appr Orig Appr Orig Appr Orig Appr
0.68
0.83
0.77
0.67
0.64
0.81
0.75
0.80
0.74
0.81
0.66
0.74

0.79
0.89
0.83
0.86
0.85
0.76

0.53
0.76
0.70
0.75
0.72
0.68

0.13
1.00
0.97
0.85
0.88
0.75

0.71
0.68
0.45
0.79
0.82
0.85

0.93
0.98
0.10
0.97
0.97
0.45

0.15
1.00
0.34
0.19
0.19
0.35

0.63
0.73
0.61
0.73
0.67
0.60

0.92
0.96
0.34
0.97
0.97
0.44

0.81
0.85
0.72
0.85
0.84
0.72

0.59
0.72
0.53
0.68
0.66
0.53

0.70
0.68
0.63
0.71
0.71
0.65

0.82
0.93
0.51
0.87
0.87
0.47

0.66
0.63
0.59
0.69
0.69
0.59

0.67
0.93
0.39
0.74
0.72
0.38

Pendigits

Satellite

MNIST

Pima

Table 4: Test P@N scores of unsupervised models and their pseudo-supervised approximators (avg of 10 independent trials)

Dataset
Model
ABOD
CBLOF
FB
KNN
AKNN
LOF

HTTP

Cardio

Breastw

Annthyroid
Orig Appr Orig Appr Orig Appr Orig Appr Orig Appr Orig Appr Orig Appr Orig Appr
0.46
0.31
0.57
0.25
0.42
0.24
0.53
0.30
0.52
0.30
0.42
0.27

0.05
0.36
0.07
0.06
0.13
0.08

0.20
0.34
0.26
0.46
0.40
0.23

0.08
0.24
0.02
0.32
0.33
0.36

0.52
0.48
0.44
0.47
0.49
0.44

0.05
0.35
0.03
0.08
0.05
0.03

0.00
0.01
0.04
0.03
0.03
0.03

0.48
0.43
0.37
0.47
0.48
0.40

0.27
0.48
0.36
0.45
0.45
0.32

0.00
0.02
0.02
0.03
0.03
0.01

0.83
0.90
0.07
0.89
0.89
0.35

0.40
0.42
0.34
0.42
0.41
0.33

0.41
0.54
0.37
0.49
0.47
0.37

0.80
0.86
0.03
0.89
0.88
0.19

0.27
0.31
0.23
0.37
0.34
0.23

Pendigits

Satellite

MNIST

Pima

[2000] Breunig, M. M.; Kriegel, H.-P.; Ng, R. T.; and Sander,
J. ¨o. r. 2000. LOF: Identifying Density-Based Local Out-
liers. SIGMOD 1–12.
[2015] Hinton, G.; Vinyals, O.; and Dean, J. 2015. Dis-
tilling the knowledge in a neural network. arXiv preprint
arXiv:1503.02531.
[1984] Johnson, W. B., and Lindenstrauss, J. 1984. Exten-
sions of lipschitz mappings into a hilbert space. Contempo-
rary mathematics 26(189-206):1.
[2012] Keller, F.; Muller, E.; and Bohm, K. 2012. Hics: High
contrast subspaces for density-based outlier ranking.
[2016] Kim, Y., and Rush, A. M. 2016. Sequence-level
knowledge distillation. EMNLP.
[2009] Kriegel, H.-P.; Kr ¨o ger, P.; Schubert, E.; and Zimek,
A. 2009. LoOP: local outlier probabilities. CIKM.
[2005] Lazarevic, A., and Kumar, V. 2005. Feature bagging
for outlier detection. In KDD, 157–166. ACM.
[2003] Lazarevic, A.; Ertoz, L.; Kumar, V.; Ozgur, A.; and
Srivastava, J. 2003. A comparative study of anomaly detec-
tion schemes in network intrusion detection. In SDM.
[2018] Li, W.; Wang, Y.; Cai, Y.; Arnold, C.; Zhao, E.; and
Yuan, Y. 2018. Semi-supervised rare disease detection using
generative adversarial network. In NeurIPS Workshop.
[2019] Liu, Y.; Li, Z.; Zhou, C.; Jiang, Y.; Sun, J.; Wang, M.;
and He, X. 2019. Generative adversarial active learning for
unsupervised outlier detection. TKDE.
[2008] Liu, F. T.; Ting, K. M.; and Zhou, Z.-H. 2008. Isola-
tion forest. In ICDM, 413–422. IEEE.
[2005] Lozano, E., and Acuﬁa, E. 2005. Parallel algorithms
for distance-based and density-based outliers. In ICDM.
[2014] Micenkov´a, B.; McWilliams, B.; and Assent, I. 2014.
Learning outlier ensembles: The best of both worlds–
supervised and unsupervised. In SIGKDD Workshop.
[2014] Oku, J.; Tamura, K.; and Kitakami, H. 2014. Parallel

processing for distance-based outlier detection on a multi-
core cpu. In IWCIA.
[2011] Pedregosa, F.; Varoquaux, G.; Gramfort, A.; Michel,
V.; Thirion, B.; Grisel, O.; Blondel, M.; Prettenhofer, P.;
Weiss, R.; Dubourg, V.; et al. 2011. Scikit-learn: Machine
learning in python. JMLR 12(Oct):2825–2830.
[2000] Ramaswamy, S.; Rastogi, R.; Shim, K.; Hill, M.;
Shim, K.; and Ramaswamy, Sridhar, Rajeev rastogi, K. S.
2000. Efﬁcient algorithms for mining outliers from large
data sets. ACM SIGMOD Record 29(2):427–438.
[2016] Rayana, S., and Akoglu, L. 2016. Less is more:
Building selective anomaly ensembles. TKDD 10(4):42.
[2014] Romero, A.; Ballas, N.; Kahou, S. E.; Chassang, A.;
Gatta, C.; and Bengio, Y. 2014. Fitnets: Hints for thin deep
nets. arXiv preprint arXiv:1412.6550.
[2003] Shyu, M.-L.; Chen, S.-C.; Sarinnapakorn, K.; and
Chang, L. 2003. A novel anomaly detection scheme based
on principal component classiﬁer. Technical report.
[1904] Spearman, C. 1904. The proof and measurement of
association between two things. AJP.
[2018] Zhao, Y., and Hryniewicki, M. K. 2018. Xgbod: Im-
proving supervised outlier detection with unsupervised rep-
resentation learning. In IJCNN. IEEE.
[2019] Zhao, Y.; Nasrullah, Z.; Hryniewicki, M. K.; and Li,
Z. 2019. LSCP: locally selective combination in parallel
outlier ensembles. In SDM, 585–593.
[2020] Zhao, Y.; Wang, X.; Cheng, C.; and Ding, X. 2020.
Combining machine learning models and scores using
combo library. In AAAI.
[2019] Zhao, Y.; Nasrullah, Z.; and Li, Z. 2019. PyOD: A
python toolbox for scalable outlier detection. JMLR.
[2014] Zimek, A.; Campello, R. J.; and Sander, J. 2014. En-
sembles for unsupervised outlier detection: challenges and
research questions a position paper. ACM SIGKDD Explo-
rations Newsletter 15(1):11–22.

