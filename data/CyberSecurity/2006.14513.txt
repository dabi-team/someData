0
2
0
2

n
u
J

5
2

]
I

N
.
s
c
[

1
v
3
1
5
4
1
.
6
0
0
2
:
v
i
X
r
a

Blockchain-Aided Flow Insertion and Veriﬁcation in Software
Deﬁned Networks

Jiejun Hu, Martin Reed, Mays Al-Naday, Nikolaos Thomos
School of Computer Science and Electronic Engineering
University of Essex
Colchester, UK
Email: jiejun.hu@essex.ac.uk, mjreed@essex.ac.uk, mfhaln@essex.ac.uk, nthomos@essex.ac.uk ∗

Abstract

The Internet of Things (IoT) connected by Software
Deﬁned Networking (SDN) promises to bring great
beneﬁts to cyber-physical systems. However, the in-
creased attack surface oﬀered by the growing number
of connected vulnerable devices and complex nature
of SDN control plane applications could overturn the
huge beneﬁts of such a system. This paper addresses
the vulnerability of some unspeciﬁed security ﬂaw in
the SDN control plane application (such as a zero-
day software vulnerability) which can be exploited to
insert malicious ﬂow rules in the switch that do not
match network policies. Speciﬁcally, we propose a
blockchain-as-a-service (BaaS) based framework that
supports switch ﬂow veriﬁcation and insertion; and
additionally provides straightforward deployment of
blockchain technology within an existing SDN in-
frastructure. While use of an external BaaS brings
it obscures knowledge
straightforward deployment,
of the blockchain agents who are responsible for ﬂow
conformance testing through a smart blockchain con-
tract, leading to potential exploitation. Thus, we
design a strategy to prevent the blockchain agents
from acting arbitrarily, as this would result in what
is termed a âĂĲmoral hazardâĂİ. We achieve this
by developing a novel mathematical model of the fair
reward scheme based on game theory. To understand
the performance of our system, we evaluate our model

∗This paper was presented in 2020 Global Internet of Things

Summit (GIoTS) (pp. 1-6). IEEE.

using a Matlab based simulation framework. The
simulation results demonstrate that the proposed al-
gorithm balances the needs of the blockchain agents
to maximise the overall social welfare, i.e. the sum
of proﬁts across all parties.

Keywords: blockchain; SDN; security, IoT, ﬂow

veriﬁcation;

1

Introduction

Software Deﬁned Networking (SDN) has been pro-
posed to increase network scalability and improve
ﬂexibility, through decoupling of the data and control
planes. Such characteristics have rendered SDN as an
attractive choice for connecting Internet of Things
(IoT) use-cases, particularly those cannot be sup-
ported by legacy networks [1,2]. However, the inherit
trust of the switch to the controller and the applica-
tion running in the controller leaves the SDN infras-
tructure vulnerable to a cyber-attack through which
malicious ﬂow rules may be inserted into the SDN
switch(es)[3]. Here, we consider two security prob-
lems in SDN: ﬁrst, there is no ﬂow conformance test
applied when updating the ﬂow table of a switch, i.e.
checking that a ﬂow conforms to some external pol-
icy; second, attackers may attempt to tamper with
messages between the controller and the switch. Ei-
ther of these scenarios would allow an attacker to
seriously undermine the data-plane; for example, by
diverting traﬃc for malicious inspection or blocking

1

 
 
 
 
 
 
services to perform denial of service and these are se-
rious concerns for operators that are deploying SDN.
To address the security issues above, this paper
proposes a novel solution which carries out an inde-
pendent conﬁrmation of the SDN control plane ac-
tion. The use of an independent conﬁrmation is im-
portant as it can be separate from the underlying
SDN application, which may be vulnerable. This
is performed through a ﬂow conformance test im-
plemented within a smart contract of a blockchain
(BC) [4]. BC technology, a sub-concept of distributed
ledger technology, is essentially an append-only data
structure maintained by a group of not-fully-trusted
nodes, that nevertheless provide a trusted data struc-
ture through a suitable consensus algorithm [5]. Fur-
thermore, BC is decentralized, immutable, transpar-
ent, and reliable, which allows it to stand indepen-
dently from the SDN network and the IoT network to
establish a distributed trust mechanism. The mech-
anism described within this paper should be seen as
one part of a wider security architecture. An ex-
ample of such a security architecture for IoT sys-
tems is that proposed by the SerIoT project [6] which
combines novel network security mechanisms [7,8] to-
gether with wider analytic strategies and tests them
in real-world use cases.

The work is inspired by recent studies that
have proposed diﬀerent architectures to establish
blockchain-based SDN scenarios. A novel blockchain-
based distributed cloud architecture has been pro-
posed in [9,10], with fog nodes at the edge provid-
ing functionality of the SDN controller. Their work
introduces a hierarchy with a central blockchain-
based cloud moving towards a blockchain-based edge,
with the latter taking responsibility of updating the
ﬂow rules. Although the works in [9,10] show how
cloud/fog computing would support blockchain, the
solution neglects the issue of ﬂow conformance testing
that we address in this paper. Studies[11,12] also at-
tempt to solve the security challenges in IoT by using
blockchain to dynamically update an attack detec-
tion model. Boukria et al.[13] propose a blockchain-
based controller against false ﬂow rule injection. The
authors mainly focused on the SDN controller au-
thentication. However, these solutions fail to exploit
blockchain technology in a manner that is compatible

Figure 1: System model of blockchain-based SDN

with existing SDN architectures. Speciﬁcally, they do
not consider how to verify a new ﬂow using blockchain
in ﬁne-grained manner; nor, how to enable blockchain
technology without changing the foundation of SDN.
This paper aims to solve these problem by introduc-
ing the novel security solution for blockchain-based
SDN (BC-SDN). We do this through designing a ﬂow
conformance testing workﬂow that uses smart con-
tracts and solve the reward scheme through a novel
mathematical analysis.

1.1 Architecture of Blockchain-based

SDN

We consider an architecture that consists of tra-
ditional SDN and Blockchain-as-a-Service (BaaS)
model [14], in a generic IoT scenario. In this scenario,
IoT devices communicate with each other through
a SDN-based network[6]. The communication is re-
alised through data-plane paths (and actions) that re-
sult from a centralised SDN application in the central
SDN controller; this application inserts ﬂow rules in
the SDN switches according to some predetermined
algorithm.
It is this SDN application, or the con-
troller itself, which is open to vulnerabilities that may
allow an attacker to cause malicious behaviour. We
incorporate a blockchain overlay to act as an inter-
mediary veriﬁcation plane between the control and
forwarding counterparts to stop malicious ﬂow in-
sertion. Fig. 1 shows an architectural view of the
entities in our BC-SDN proposition, including: a)
IoT devices that can sense the environment, upload

2

sensory data and control actuators; b) IoT hubs
that connect the IoT devices to the SDN-switches;
c) SDN switches that detect new ﬂows and exe-
cute a forwarding plan calculated by the SDN con-
troller(s); d) Blockchain agents (BCAs) that are
servers provided by a third party. BCAs are in charge
of ﬂow conformance testing, which includes ﬂow ver-
iﬁcation and validation via smart contract. Further-
more, BCAs also execute basic blockchain functions,
such as consensus process, sending transactions, and
maintaining the shared ledger. And ﬁnally e) the
Controller with a global view of the network and
which calculates the best path of the packets accord-
ing to some pre-deﬁned policy.

In this paper we adopt a permissioned-based con-
sortium blockchain,
such as Hyperledger, which
means that only authorized entities can conduct the
blockchain functions. Futhermore, we adopt BaaS
infrastructure with a BCA colocated with an SDN
switch. There are three main advantages of using the
proposed mechanism for ﬂow conformance testing.
First, as BCAs are colocated with the SDN switches,
providing a blockchain service to the SDN, the BCAs
conﬁrm the secure communication between the con-
troller and the corresponding switch. Second, BCAs
are components provided by an independent entity,
which conducts ﬂow veriﬁcation/validation outside
the SDN network to guarantee the connection pri-
vacy. Finally, BaaS enables straightforward deploy-
ment of blockchain in SDN without the SDN operator
needing to create their own blockchain system.

1.2 Solution and Contribution

In the proposed architecture, BCAs verify the con-
formance of a ﬂow as an external service, while the
SDN network entities are the users of the BCA ser-
vice. Thus, a reward strategy is critical to stimulate
the BCAs to perform the veriﬁcation and validation
action. When a leading BCA initializes the ﬂow con-
formance testing procedure, it hires a group of BCAs
as veriﬁers and oﬀers them a reward. The veriﬁers
have knowledge of: their computation ability, channel
condition, and the size of the task. Hence, the veri-
ﬁers can decide how much reward they want. How-
ever, the veriﬁer may behave greedily and demand a

higher price for a simple task, or else they will not
implement the task. This phenomenon is known as a
"moral hazard" of the veriﬁers. The underlying rea-
son for the moral hazard is the asymmetric relation-
ship about system information, i.e. the veriﬁers have
more information to make a decision than the lead-
ing BCA. To maintain the execution of ﬂow veriﬁca-
tion/validation, the leading BCA needs a new reward
scheme to overcome the moral hazard of veriﬁers.

The design of the reward mechanism is critical in
a cyber-physical system and game theoretic methods
are widely used in solving this problem. Due to the
fact that blockchain technology is a resource consum-
ing application, studies concentrate on optimisation
problems that consider various aspects such as: the
latency, throughput of transactions, ﬁnality, security,
and decentralization[15,16].
In this paper, to solve
the moral hazard of veriﬁers, we analyze and quantify
the veriﬁcation/validation latency which is related to
the blocksize of the BCAs. Then, we design the re-
ward mechanism based on contract theory[17]. The
main contributions of this paper are summarized as
follows:

• We ﬁrst propose a Blockchain-aided Software-
Deﬁned Network, a novel framework that uses
blockchain technology to provide ﬂow conformance
testing in SDN.

• We design the workﬂow of ﬂow insertion and
veriﬁcation of BC-SDN with the assistance of
blockchain.

• We devise a fair reward scheme based on contract

theory to stimulate the BCAs.

To the best of our knowledge, our work is the ﬁrst
to propose the workﬂow of ﬂow rule veriﬁcation in
BC-SDN, and also to use contract theory to study
the quantiﬁed performance of blockchain in this use-
case.

2 Workﬂow of BC-SDN

In order to explain the proposed workﬂow of BC-SDN
we use Fig. 2, which presents a sample network. We

3

is performed as a transparent process; any val-
idation failure is communicated using standard
OpenFlow error messages.

The actions of establishing and testing confor-
mance of a new ﬂow rule are embedded in a smart
contract within the blockchain. The endorsement
policy states that it requires n veriﬁers to establish
a new ﬂow rule. Below, we explain these actions in
more depth.

1. Sensor1 causes Switch1 to initiate a new ﬂow
establishment request when it sends a packet
with source IP/port information, destination
IP/port information, and protocol. The message
is formed as packet = <souIP, desIP, souPort,
desPort, Protocol> without an existing ﬂow rule,
and is sent to the controller over the secure com-
munication channel. The controller calculates
the path according to the packet and generates
new ﬂow rules that it forwards to the correspond-
ing BCA (veriﬁcation initiator, VI). The ID of
ﬂow is ﬁd= hash(packet). This request of the
controller targets BCA1. The VI constructs a
new ﬂow proposal <PROPOSAL, tx, Consig>
ensures the new ﬂow proposal is properly formed;
tx includes: the ID of controller, ID of the ﬂow,
packet, ID of smart contract, endorsement pol-
icy, and time stamp. The VI’s credentials are
used to produce a signature ConSig = hash(tx)
for this proposal.

the proposal is well formed;

2. The VI starts the veriﬁcation of the new ﬂow
by employing veriﬁer peers. The veriﬁers check
that:
it has not
been submitted already in the past; the signa-
ture is valid; and that the VI is properly autho-
rized to perform the proposed operation. The
veriﬁers use the new ﬂow proposal as input to
invoke the smart contract. The smart contract
checks the new ﬂow against the ﬂow conformance
policy and asserts as TRUE or FALSE accord-
ingly. All the response values will be stored in
blockchain’s status database readset and write-
set. The response values along with the veriﬁers’
signature is passed back to the VI as a "proposal
response" ProRes=<TransactionEndorsed, ﬁd,

Figure 2: Workﬂow of BC-SDN

consider that Sensor 1 generates a new packet. First,
we assume that:

1. This blockchain application is using one unique
Hyperledger channel, although other users may
be using diﬀerent channels.

2. The IoT devices/IoT hubs that require new ﬂow
rules have been registered and enrolled with the
organization’s Certiﬁcate Authority and received
back necessary cryptographic material, which is
used to authenticate a device.

3. The BCAs have been fed with previous topol-
ogy and connectivity information from the con-
troller.

4. The controller is responsible for path calcula-
tions, which will result in a set of ﬂow rules ac-
cording to the path.

5. All communication channels are secured through
a mechanism such as transport layer security
(TLS) authenticated using appropriately de-
ployed certiﬁcates.

6. The blockchain implements a next generation
smart contract which keeps all data secure, as
described by Cai et al. [18]

7. The switch and the controller use an unmodi-
ﬁed OpenFlow protocol so that the validation

4

TranProposal, epSig>, where TranProposal =
(epID, ﬁd, chaincodeID, tx, readset, writeset).
If this new ﬂow is invalid, then send message
<TransactionEndorsed, ﬁd, REJECT, epSig>.
Note that no changes are made to the ﬂow ledger
till now.

3. Proposal responses are checked as follows. The
VI inspects the veriﬁers’ signature and conﬁrms
that the number of identical ProRes responses
reach the number expected by the endorsement
policy.
If the VI only enquires of data from
the ledger, then there is no need to update
the blockchain database, the ordering service.
The VI checks the endorsement policy has been
reached before storing the new ﬂow in the ledger.

4. Ordering service: a service in Hyperledger imple-
mented in a separate group of peers called order-
ers that preform transaction ordering and main-
tain the distributed ledger. The VI broadcasts
the proposal <PROPOSAL> with <ProRes> in
one message broadcast =(PROPOSAL, ProRes)
to all of the orderers in the ordering service. The
leader of the ordering service calls the ordering
peers by sending the message deliver(seqno, pre-
vhash, endorsement), where seqno is sequence
number, prevhash is the hash of the most re-
cently delivered endorsement. The ordering ser-
vice orders the messages chronologically and cre-
ates blocks of transactions.

5. New ﬂow validation and committing: The blocks
of transactions are delivered to all BCAs. The
BCAs verify the ID of smart contract, en-
dorsement policy, and consistency of the status
database to avoid violations. If the checks pass,
the transaction is deemed valid or committed.
In this case, the BCAs set the bitmask of the
PeerLedger. If the checks fail, the new ﬂow es-
tablishment is considered invalid and the BCA
unsets the bitmask of the PeerLedger. This in-
valid transaction is stored until it is deleted by
a periodic blockchain function.

6. Ledger updated: Each BCA appends the block
with the new ﬁd. At the same time, the VI is

notiﬁed that the new ﬂow has been immutably
appended to the chain.

3 System model

We use BaaS in BC-SDN, i.e. we rent the servers
from a third party. This means that the VI lacks of
knowledge of the performance (and other abilities)
of the servers, thus there is asymmetry between the
knowledge of the VI and the BaaS. This information
asymmetry leads to what is known as a moral haz-
ard[19]. The moral hazard is commonly solved by
contract theory in ﬁeld of economics. Motivated by
the above, in this paper we design a reward scheme of
BaaS, which can solve the moral hazard of the third-
party BCAs. In BC-SDN, ﬂow conformance testing is
provided by BCA veriﬁers and a contract is designed
based on the outcome of the veriﬁers. The veriﬁer
oﬀers two ﬂow conformance testing plan. A simple
ﬂow conformance testing that only veriﬁes the source
and destination MAC address and Port number. And
a complex ﬂow conformance testing that veriﬁes the
whole path. When a ﬂow conformance initiates, the
VI presents a contract for the veriﬁers oﬀering a re-
ward. Then, the veriﬁers have the option to either
accept the reward or refuse. According to the re-
ward, the veriﬁers exert the ﬂow conformance testing
plan. In this section, we ﬁrst introduce the system
model by analysing the cost and income of the VI
and the veriﬁers. Then, we deﬁne the employed util-
ity functions of both the VI and the veriﬁers. Finally,
we propose our solution based on contract theory.

3.1 Execution cost of a veriﬁer

Veriﬁer i ∈ V = {1, ..., n} who participates in ver-
iﬁcation can select the blocksize from a set S =
{s1, ..., sn}, n ≥ 1. We deﬁne veriﬁer i select block-
size si ∈ S Similarly to [4], the execution cost of a
veriﬁer is deﬁned in quadratic form, which is thus
convex and provides a straightforward evaluation of
the derivative.

φ(si) =

1
2

αs2
i ,

si ∈ S

(1)

5

where α is a parameter that reﬂects the cost factor
of a veriﬁer.

that the VI has full trust in the latency veriﬁer re-
ports. Thus, we substitute li with si, the utility of
VI can be rewritten as

3.2 Performance evaluation of a veri-

ﬁer

In contract theory, the VI can only observe the per-
formance of the veriﬁer but not the real eﬀort it ex-
erts. Consider a blocksize si the veriﬁer exerts is in-
visible from the VI, but the performance of the ver-
iﬁers is observable.
In this paper, the performance
metric is the veriﬁcation/validation latency, and is
deﬁned as L = {l1, ..., ln}, n ≥ 1. We assume the
latency is proportional to the blocksize deﬁned as
li = f (si), where function f (·) is monotonically in-
creasing with si. For the sake of simplicity, we assume
a linear relation as li = si, without aﬀecting the gen-
erality of our conclusions. Note that we assume that
the latency in the Hyperledger fabric iteself is the
same for all users and is thus not considered here.

Uv = βsi − risi

(3)

The utility of the veriﬁer considers the reward plan
minus the execution cost. Thus, the utility of veriﬁer
i is deﬁned as

Ui = risi −

1
2

αs2
i

(4)

3.5 Social Welfare

We deﬁne the social welfare ω of the BaaS service as
the proﬁt of the veriﬁer and the VI. Thus, from the
utility of the veriﬁer (3) and the utility of the VI (4),
the social welfare is

ω = Ui + Uv = βsi −

1
2

αs2
i

(5)

3.3 Reward plan for a veriﬁer

4 Problem formulation

The reward for the veriﬁer i is denoted as R =
{r1, ..., rn}, n ≥ 1. ri ∈ R means the reward for per
unit of performance. We deﬁne the income for the
veriﬁer as rili. In this model, the VI considers only
the latency that the veriﬁer provides and wishes to
incentivise the veriﬁer to provide the more complex
ﬂow conformance test.

3.4 Utility functions of VI and veriﬁer

In our model, the VI considers only the latency of the
veriﬁer because it expects the veriﬁers perform com-
plex ﬂow conformance testing, which leads to long
latency. We deﬁne the utility function of VI as the
gross beneﬁt minus the reward to the veriﬁer. Thus,
the VI’s utility function is written as

As mentioned earlier, a contract is designed as the
tuple (R, L), as the VI rewards the veriﬁers accord-
ing to the latency. The VI aims to use the minimal
reward to obtain the optimal blocksize s∗
to guar-
i
antee the ﬂow veriﬁcation/validation is in progress.
Meanwhile, the veriﬁer chooses the optimal blocksize
according to the reward. According to our system
model, we can formulate the maximization of the ver-
iﬁer’s utility as

max
si

s.t.

αs2
i

risi −

1
2
1
2
si < smax

risi −

αs2

i ≥ σ

(6)

(7)

(8)

Uv = βli − rili

where smax is the biggest blocksize. And the maxi-
mization problem of VI is formulated as

(2)

where β is the income factor of VI and rili is the
reward plan for a veriﬁer. VI needs to enquire the
latency of veriﬁer to oﬀer the reward. So, we assume

βsi − risi

max
ri,s∗
i
s.t. βsi − risi ≥ σ

(9)

(10)

6

where σ is the reservation utility of veriﬁer. Reserva-
tion utility is the minimum proﬁt that must be guar-
anteed by the contract to make it acceptable to the
veriﬁers. The optimization problem aims to maxi-
mize the utility of VI by proposing a reward plan
according to the latency of a veriﬁer. Through solv-
ing the maximization problem (6) we determine the
optimal blocksize s∗
, which is then used to maximize
i
the utility of veriﬁer. The maximization problem (9)
guarantees that under the optimal blocksize, the VI
maximizes its utility by choosing the optimal reward
r∗
i

.
For simplicity, but without loss of generality, we as-
sume only one VI and a group of veriﬁers V. The veri-
ﬁer i oﬀers two diﬀerent veriﬁcation plans. We denote
d as the veriﬁcation plan indicator, where d ∈ {µ, ι}.
When d = µ, the veriﬁer i will preform a complex
veriﬁcation with a larger blocksize sµ
, which has a
i
longer latency lµ. On the contrary, d = ι indicates
a simple veriﬁcation that veriﬁes the source and des-
tination IP address with a smaller sι
, which has the
i
smaller latency lι. An example of a complex veriﬁca-
tion could be a whole path of a ﬂow, as opposed to
a simpler veriﬁcation which could be only the source
and destination addresses.

For a veriﬁcation task, the veriﬁer with probabil-
ity p = pµ chooses the larger blocksize sµ
and with
i
, where
probability pι chooses a smaller blocksize sι
i
pι = 1 − p . We assume that si = sµ
, where
i = εsι
i
ε ∈ (0, 1) is blocksize diﬀerence factor. We can refor-
mulate the optimization problem (6) and (9) in two
stages: the maximization problem of veriﬁers and the
maximization problem of VI by substituting the op-
timal veriﬁer’s blocksize s∗
. The ﬁrst stage of the
i
optimisation problems is deﬁned as

max
si
s.t.

p(risi −

1
2
si < smax

αs2

i ) + (1 − p)(εrisi −

1
2

αε2s2) (11)

(12)

First, we ﬁnd the derivative of the objective function
in (11) and set it equal to zero to ﬁnd the critical
points of the function. Hence, we obtain

= p(ri − αsi) + (1 − p)(εri − αε2si) = 0

∂U
∂si
s∗
i = Ari

(13)

7

where A = p+(1−p)ε
maximization problem is deﬁned as following

pα+(1−p)αε2 . The second stage of the

p(βs∗

i − ris∗

i ) + (1 − p)(εβs∗

i − εris∗

i ) (14a)

max
ri, s∗
i
s.t.

p(ris∗

i −

1
2

αs∗
i

2) + (1 − p)(εris∗

i −

1
2

αε2s∗
i

2) ≥ σ

(14b)

By substituting the optimal s∗
i
we redeﬁne the problem as

in (14a) and (14b),

p(βAri − Ar2

i ) + (1 − p)(εβAri − εAr2
i )

(15)

max
ri,s∗
i

s.t. p(Ar2

i −

1
2

αA2r2

i ) + (1 − p)(εAr2

i −

1
2

i ) = σ

αε2A2r2
(16)

Similarly, by solving the ﬁrst stage of the optimiza-
tion problem, we determine the optimal blocksize, s∗
,
i
and the optimal reward, r∗
i

, which are given by

r∗
i =

s∗
i =

pβ + (1 − p)εβ
pαA + (1 − p)αε2A
pβ + (1 − p)εβ
pα + (1 − p)αε2

(17)

(18)

5 Simulation

In this section, we numerically evaluate the pro-
posed reward scheme in BC-SDN. We assume that
the BCAs work as veriﬁers/validators. The latency
includes the veriﬁcation and validation latency. We
outsource the committing and ledger updating to
GoLevelDB[20], thus the latency of committing and
ledger updating can be neglected.

In the simulation set up, we assume that the reser-
vation utility of VI and veriﬁer σ = 0. The reason we
set the reservation utility is that, the optimal block-
size and reward remain the same, no matter how σ
changes (17) and (18). We demonstrate the impact of
the income factor β, the cost factor α, the probability
p of selecting a bigger blocksize, and the diﬀerence, ε,
between the two blocksizes. For the sake of compar-
ison, we compare the proposed reward scheme with
a solution based on the Stackelberg game [21] which

Figure 3: Social welfare with respect to Cost factor
α

Figure 4: Social welfare with respect to Probability
of selecting a bigger blocksize for diﬀerent α values

assumes the VI knows all the information of veriﬁer
where optimal blocksize will exert according to the
optimal reward.

In Fig. 3, we compare the social welfare of three
reward mechanisms as it varies with the cost factor
α and the probability of selecting a bigger blocksize
p. From the simulation results, we can see as α in-
creases, the social welfare decreases. The reason for
this behaviour is that the larger cost factor, the larger
the cost of the veriﬁer, which means that it is going
to cost more to maintain the same blocksize. How-
ever, the proposed reward mechanism achieves higher
social welfare when α is about 1.3. This is due to the
fact that in the moral hazard scenario, the veriﬁer
can choose a smaller blocksize to compensate the ex-
ecution cost in order to maintain the social welfare.

In Fig. 4, we analyse the impact of the probabil-
ity of selecting the bigger blocksizes on social wel-
fare. From the evaluation, it is obvious that there
is only one optimal blocksize in the Stackelberg sce-
nario. From this ﬁgure, we also note that for diﬀerent
cost factors, the proposed scheme can maintain the
social welfare with a higher cost.

In Fig. 5, we evaluate the impact of the diﬀerence
in the blocksizes with diﬀerent values of ε. Note that
when ε tends to 0, i.e., the diﬀerence between the
blocksizes sµ and sι is bigger. When it is ε = 1,
the blocksize is the same. For a neutral setting with
p = 0.5, α = 0.5, and β = 10, we observe that the

Figure 5: Probability and social welfare

utilities of the veriﬁer and the VI increase when the
blocksize’s diﬀerence is increasing but that the rate of
this increase reduces as the blocksizes tend towards
the same size. At the same time, the biggest blocksize
is observed as when ε = 0.4. The reason is that the
optimal blocksize is only related with p and ε in (14).

To understand the impact of the income factor β
of VI and the cost factor α on the social welfare in
the moral hazard scenario, we conduct a simulation
with results shown in Fig. 6. We can observe that if
the income factor is bigger, the social welfare always
increases irrespective of the probability p. Under the
same income factor, the the bigger cost factor is, the
smaller the social welfare. Also, we can observe that

8

0.511.52Coefficient of cost050100150Social WelfareMoral hazard with p = 0.5Moral hazard with p = 0.8Stackelberg schemeFixed salary00.20.40.60.81Probability of selecting a bigger blocksize050100150200250Social welfareMoral hazard with  = 0.5Stackelberg scheme with  =0.5Moral hazard with  =1.3Stackelberg scheme with  =1.300.20.40.60.81050100150200Utility1010.51111.51212.5BlocksizeSocial welfareUtility of VIUtility of verifierBlocksizeReferences

[1] S. Bera, S. Misra, and A. V. Vasilakos,
“Software-Deﬁned Networking for Internet of
Things: A Survey,” IEEE Internet of Things
Journal, vol. 4, no. 6, pp. 1994–2008, Dec 2017.

[2] J. L. HernÃąndez-Ramos, G. Baldini, R. Neisse,
M. Al-Naday, and M. J. Reed, “A policy-based
framework in Fog enabled Internet of things for
cooperative ITS,” in 2019 Global IoT Summit
(GIoTS), June 2019.

[3] T. Eom, J. B. Hong, S. An, J. S. Park, and D. S.
Kim, “A systematic approach to threat mod-
eling and security analysis for software deﬁned
networking,” IEEE Access, vol. 7, pp. 137 432–
137 445, 2019.

[4] J. Hu, K. Yang, K. Wang, and K. Zhang, “A
blockchain-based reward mechanism for mobile
crowdsensing,” IEEE Transactions on Computa-
tional Social Systems, 2020.

[5] T. T. A. Dinh, J. Wang, G. Chen, R. Liu, B. C.
Ooi, and K.-L. Tan, “Blockbench: A frame-
work for analyzing private blockchains,” in Proc.
of ACM SIGMOD International Conference on
Management of Data, Chicago, IL, USA, May
2017.

[6] E. Gelenbe, J. Domanska, T. Czàchorski,
A. Drosou, and D. Tzovaras, “Security for in-
ternet of things: The SerIoT project,” in Proc.
of ISNCC’18, Rome, Italy, Jun. 2018.

[7] P. Amangele, M. J. Reed, M. Al-Naday, N. Tho-
mos, and M. Nowak,
“Hierarchical machine
learning for IoT anomaly detection in SDN,”
in Proc. of InfoTech’19, Plovdin, Bulgaria, Sep.
2019.

[8] M. Mitev, A. Chorti, E. V. Belmega, and
M. Reed, “Man-in-the-middle and denial of ser-
vice attacks in wireless secret key generation,” in
Proc. of GLOBECOM’19, HW, USA, Dec. 2019.

[9] P. K. Sharma, M.-Y. Chen, and J. H. Park,
“A software deﬁned fog node based distributed

Figure 6: Social welfare with respect to the probabil-
ity of selecting a bigger blocksize for various α and β
values

the lowest point of the social welfare appears when
p = 0.4.

6 Conclusion

In this paper, we have investigated a novel security
solution of SDN by adopting blockchain technology.
According to the architecture of BC-SDN, we have
proposed the workﬂow of new ﬂow veriﬁcation and
insertion. Owing to the fact that we use BaaS, we
have designed a reward scheme to tackle the poten-
tial moral hazard caused by the BCAs from the third
party. By using the proposed reward scheme based
on contract theory, we obtain the optimal blocksize
of the blockchain and the corresponding reward for
it. Finally, we evaluate our system to demonstrate
the impact of diﬀerent parameters using two diﬀer-
ent incentive mechanisms. The results show that the
proposed reward scheme can gain good social welfare
when the cost factor is high compared to Stackelberg
reward scheme.

Acknowledgment

This work was carried out within the project SerIoT,
funded by the European Union’s Horizon 2020 Re-
search and Innovation programme under grant agree-
ment No 780139.

9

00.20.40.60.81Probability of selecting a bigger blocksize100200300400500Social Welfare with Moral Hazard=1.0,  =30=1.5,  =30=1.0,  =20=1.5,  =20[18] C. Cai, Y. Zheng, Y. Du, Z. Qin, and C. Wang,
“Towards private, robust, and veriﬁable crowd-
sensing systems via public blockchains,” IEEE
Transactions on Dependable and Secure Com-
puting, available through early access https://
doi.org/10.1109/TDSC.2019.2941481.

[19] B. Hölmstrom, “Moral hazard and observability,”
The Bell journal of economics, pp. 74–91, 1979.

[20] P. Thakkar, S. Nathan, and B. Viswanathan,
“Performance benchmarking and optimizing hy-
perledger fabric blockchain platform,” in Proc. of
MASCOTS’18, Milwaukee, WI, USA, Sep. 2018.

[21] J. Hu, K. Yang, L. Hu, and K. Wang, “Reward-
aided sensing task execution in mobile crowd-
sensing enabled by energy harvesting,” IEEE Ac-
cess, vol. 6, pp. 37 604–37 614, 2018.

blockchain cloud architecture for IoT,” IEEE Ac-
cess, vol. 6, pp. 115–124, 2017.

[10] P. K. Sharma, S. Rathore, Y.-S. Jeong, and J. H.
Park, “Softedgenet: SDN based energy-eﬃcient
distributed network architecture for edge com-
puting,” IEEE Comms magazine, vol. 56, no. 12,
pp. 104–111, 2018.

[11] A. Muthanna, A. A Ateya, A. Khakimov,
I. Gudkova, A. Abuarqoub, K. Samouylov, and
A. Koucheryavy, “Secure and reliable IoT net-
works using fog computing with software-deﬁned
networking and blockchain,” Journal of Sensor
and Actuator Networks, vol. 8, no. 1, p. 15, 2019.

[12] S. Rathore, B. W. Kwon, and J. H. Park, “Block-
seciotnet: Blockchain-based decentralized secu-
rity architecture for IoT network,” Journal of
Network and Computer Applications, vol. 143,
pp. 167–177, 2019.

[13] S. Boukria, M. Guerroumi, and I. Romdhani,
“BCFR: Blockchain-based controller against
false ﬂow rule injection in SDN,” in Proc. of
ISCC’19, Barcelona, Spain, July 2019.

[14] M. Samaniego and R. Deters, “Blockchain as
a service for IoT,” in Proc. of iThings, Green-
Com, CPSCom, and SmartData’16, Chengdu,
Sichuan, China, Nov. 2016.

[15] J. Kang, Z. Xiong, D. Niyato, D. Ye, D. I.
Kim, and J. Zhao, “Toward secure blockchain-
enabled internet of vehicles: Optimizing consen-
sus management using reputation and contract
theory,” IEEE Transactions on Vehicular Tech-
nology, vol. 68, no. 3, pp. 2906–2920, 2019.

[16] M. Liu, R. Yu, Y. Teng, V. Leung, and M. Song,
blockchain-
optimization
“Performance
enabled industrial
Internet of things (IIoT)
systems: A deep reinforcement learning ap-
proach,”
IEEE Transactions on Industrial
Informatics, 2019.

for

[17] P. Bolton, M. Dewatripont et al., Contract the-

ory. MIT press, 2005.

10

