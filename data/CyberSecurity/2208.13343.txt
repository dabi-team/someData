IoT Droplocks: Wireless fingerprint theft using
hacked smart locks

Accepted to appear in 2022 IEEE International Conference on Internet of Things (iThings)[1]

Steve Kerrison
James Cook University, Singapore
steve.kerrison@jcu.edu.au

2
2
0
2

t
c
O
0
1

]

R
C
.
s
c
[

2
v
3
4
3
3
1
.
8
0
2
2
:
v
i
X
r
a

locks

security-

can provide

Abstract—Electronic

and
convenience-enhancing features, with fingerprint readers an
increasingly common feature in these products. When equipped
with a wireless radio, they become a smart lock and join the
billions of IoT devices proliferating our world. However, such
capabilities can also be used to transform smart locks into
fingerprint harvesters that compromise an individual’s security
without their knowledge. We have named this the droplock attack.
This paper demonstrates how the harvesting technique works,
shows that off-the-shelf smart locks can be invisibly modified to
perform such attacks, discusses the implications for smart device
design and usage, and calls for better manufacturer and public
treatment of this issue.

I. INTRODUCTION

Biometric data such as fingerprints are now widely used
as an authentication factor. They secure smart phones, bank-
ing activities, staff clock in/out and doors to buildings or
rooms. As a “something you are” factor, they are valued for
their uniqueness and permanent attachment to an individual.
However, unlike other factors such as passwords, tokens and
keys, there is a limit to how many times they can be changed.
Fingerprint-based security measures becomes undesirable if
too many compromises occur, and existing technology is not
always able to distinguish fake or copied prints.

Despite this, a growing number of devices have built-in
fingerprint sensors, most notably smartphones. While there
are demonstrations of attacks that bypass or otherwise fool
smartphone fingerprint sensors [2, 3], less attention has been
given towards using such sensors as a means to steal a finger-
print. This is largely because the sensors and the associated
fingerprint processing is handled in a secure domain such as a
Trusted Execution Environment [4] and the fingerprint image
is not easy to extract from them.

Beyond smartphones, various lower-cost IoT devices also
have fingerprint sensors, such as smart locks. These devices
generally feature less powerful processors, cheaper sensors and
do not provide the same level of security as a smartphone.
This is usually deemed acceptable based on the value of the
product itself, or what the sensor is meant to protect.

Even though such IoT devices might not directly protect a
high-value asset such as a person’s bank account, they utilise
a shared authentication factor, thus posing a risk to such assets
if the biometric data can be harvested. Additionally, these
devices may be small, portable, battery powered and have WiFi,
Bluetooth or other wireless communication capabilities. This

Figure 1. A COTS smart lock prepared to receive a droplock firmware.

makes them cheap and convenient to use as a lure for unwitting
individuals who may divulge their biometric data to such a
device and have that data wirelessly collected by a nearby
yet out-of-sight adversary. This is akin to the dropped USB
or dropped memory card attack, whereby malware infiltrates
a system at the behest of the user, whose own intrigue and
lack of awareness leads them to delivering a payload from
an unknown storage device onto a vulnerable computer. In
acknowledgement of this heritage, we term our attack the IoT
droplock or simply droplock.

With this premise, we construct the following thesis:
• Cheap IoT components can be used to capture and

wirelessly harvest fingerprint data.

• Commercial off-the-Shelf (COTS) smart locks can be
modified to achieve the same goal due to lack of adequate
defences in the hardware and software design.

• Fingerprints harvested through the above means can then

be used for authentication with other systems.

In this paper, we demonstrate how both self-made and commer-
cial IoT devices (such as that shown in Figure 1) can be used
as wireless fingerprint harvesters, explore the implications of
this with the support of prior literature, make recommendations
for device manufacturers to improve the trustworthiness of
their products and propose future work to better understand
and influence user behaviour when confronted with potential
threats of this nature.

A. Structure

Section II is a demonstration of a self-made fingerprint
harvester. Section III then elevates this concept to a full-scale
hack of a commercial off-the-shelf (COTS) smart padlock with

Published version DOI: 10.1109/iThings-GreenCom-CPSCom-SmartData-Cybermatics55523.2022.00054, ©2022 IEEE.

 
 
 
 
 
 
Item

Purpose

ESP32-S2 board w/LCD

12V DC solenoid
5V relay breakout board
Fingerprint sensor w/UART Collect fingerprint image and upload to micro-controller.

Micro-controller with WiFi, GPIO for relay control, UART for fingerprint sensor,
wireless comms for data capture and LCD for visual prompt.
Equivalent to locking mechanism present on smart lock.
Interface between I/O voltage of micro-controller and actuation voltage of solenoid.

Figure 2. Components used in droplock PoC

Figure 3. Diagram of the droplock PoC component construction.

integrated fingerprint reader and Bluetooth Low Energy (BLE),
which can ultimately be performed without device disassembly.
Having established the ability to harvest prints, Section IV
reviews literature that explores how people are susceptible
to “drop” style attacks, how fingerprint images can be used
fool security systems and what other vulnerabilities exist in
electronic and smart locks. We make recommendations in
Section V, with a list of security measures that would mitigate
droplock attack attempts and propose further research, including
a behavioural study of how individuals react to droplocks and
similar devices. Finally, Section VI summarises and concludes
this paper.

II. PROOF OF CONCEPT
The objective of a droplock attack is to get a human to supply
a fingerprint image to a device that they find (for example
placed on the floor), then for that device to wirelessly transmit
the image elsewhere for future malicious use. In support of this
concept, a simple demonstrator was created. Figure 2 shows
the major components of the PoC. These could be substituted
for other similar parts, provided the micro-controller possesses
some form of wireless radio support and the fingerprint reader
includes the ability to upload fingerprint images.

A diagram of the PoC’s construction is shown in Figure 3. It
relies on an external power supply to provide 12 V to actuate
the relay, mainly due to component availability at the time of
construction. Additionally, the ESP32-S2’s GPIOs operate at
3.3 V and the relay board uses 5 V logic levels, but its active-
low signalling design means no additional hardware is required
to control the relay.

Figure 4. Sequence diagram of droplock PoC actions and data flows.

1) The droplock device initialises, creates a WiFi AP, web
server and prompts for interaction via its LCD screen.
2) The device polls the fingerprint reader to determine when

a print is captured.
a) After 60 seconds of no input, the device will actuate
the solenoid to draw attention to itself and then reset.
b) If a user presents a fingerprint before this deadline,
the device will request the reader upload the fingerprint
and actuate the solenoid as a reward for interaction.

A sequence diagram for the PoC is shown in Figure 4 and

3) Upon acquisition of a fingerprint, the fingerprint reader

explained below:

uploads the image to the micro-controller.

VictimDroplockPC/phoneAttackerStartWiFI,webserver,LCDpromptopt[Initialise]ConnecttoWiFiAPWaitforprintTouchessensorwithfingerActuatesolenoid,downloadfromsensor,displayonLCD,copyintowebserverHTTPGET/fingerprintHTTPresponse:fingerprintimageCollectstolenprintopt[Printretrieval]loop[Mainloop]Actuatesolenoidandresetopt[Timeout]VictimDroplockPC/phoneAttackerA. The target lock

A target lock needs a fingerprint reader and radio commu-
nications that can be repurposed to serve the droplock goals.
Repurposing is done by modifying the firmware on the target
device. We envisaged three possible routes to achieving this:
1) Find and exploit a vulnerability in the device firmware,
such as a buffer overflow, to upload a malicious payload
that enables the device to perform droplock functions.
2) Find and exploit a vulnerability in the firmware update
process, such as weak or no image validity/signature
checking, to program a new droplock firmware.

3) Use a debug interface to directly reprogram the device

with a droplock firmware and re-assemble it.

In the early stages of assessment, one of the procured locks
was found to be vulnerable to option 3, and so with the
expanded capabilities of debugger access to the device, we
chose to use this method. The device in question features
a fingerprint reader and uses BLE to communicate with a
smartphone app for remote unlocking and device management.
Disclosure of vulnerabilities: We do not believe that dis-
assembly and malicious reprogramming of smart locks has
been considered as a security concern prior to now, except
for companies wishing to protect their IP. We also believe
that similar products will possess the same issue, and until a
broader survey is completed, we have avoided reference to the
brand and product where possible. During the course of this
work we have reached out to the manufacturer to inform them
of the research and any security issues that were discovered
and will engage with them should they wish to do so.

B. Physical compromise

The lock can be non-destructively dismantled by removing a
plastic covering and a specialist screw. The back panel can then
be removed and the PCB extracted. These steps are reversible
without leaving evidence, provided the padlock is unlocked at
the time. This is sufficient if the attacker purchases the target
hardware themselves.

Figure 6 shows the target lock progressively disassembled,
with Figure 6c showing the PCB with breakout cables soldered
to it and annotations of the noteworthy parts. This particular
product is a two-chip solution, with the fingerprint sensor
controlled by one chip, a GigaDevice STM32 clone, which com-
municates over UART with a BLE-enabled micro-controller,
a Nordic Semiconductor (for brevity, Nordic) nRF51822 [7].
They are both ARM-based Cortex-M series CPUs. Debug pads
for both chips are present on the board. Debug capabilities
were found enabled on both chips, with no memory protection.
These debug interfaces were used to dump the flash contents
for the chips using OpenOCD [8] and an ST-Link v2 debug-
ger/programmer [9].

Figure 5. The droplock PoC demonstration [5].

4) The uploaded fingerprint is displayed on the LCD and the

webserver’s fingerprint image is updated.
a) For the PoC, a blank image is swapped for a koala fin-
gerprint image once the user’s print has been acquired.
b) In a true implementation, the raw buffer would be

re-formatted into web-compatible image.

5) The device waits 30 seconds for a user to connect and
fetch the image from the embedded web server over WiFi.

6) The sequence repeats.

The source code of the PoC [6] and a video demonstration [5]
have been made available. The physical appearance of the setup
is shown in Figure 5. After the user presents a fingerprint, it
can be uploaded from the reader to the device in approximately
two seconds. Fetching the image over WiFi can then be done
in a matter of milliseconds, assuming the client has already
connected to the device.

Unlike prints left behind through contact with surfaces, which
could be wiped away, the captured fingerprint from the droplock
can be transferred and stored elsewhere immediately, so an
errant impression upon the device’s fingerprint reader cannot
be undone.

Despite demonstrating adequate technical capabilities, the
PoC is large and cumbersome compared to a commercial
smart padlock or other fingerprint smart
lock. An OEM
design could be purchased, which an attacker can then modify
to include droplock capabilities. Such a device could then
take a convincing form factor and be far more innocuous in
appearance.

III. HACKING A SMART LOCK TO HARVEST PRINTS

To avoid custom building a viable droplock, an attacker may
convert a COTS smart padlock into one. Brand recognition
or user familiarity with the product can then be leveraged to
increase the chance of a successful attack.

We acquired several smart padlock products — some branded
and others unbranded — to find one that could be hacked into
a droplock. While it is likely that several of the products may
be hackable, this paper explores a single successfully hacked
lock and looks to future work to survey the larger market.

Pads are also present on the UART link between the two
chips, allowing wiretapping of the communications between
them. This, combined with chip-maker’s documentation and
flash dumps provided enough starting information to develop
a droplock firmware for the device and reprogram it.

(a) Assembled lock

(b) Lock internals

(c) Lock PCB

Figure 6. Disassembly of the target lock to observe board components and attach cables for debugging, programming and wiretapping.

an attack.

Nordic’s ble_app_uart example application, included in the
nRF5 SDK, was used as a starting point for the droplock
firmware. This sample application bridges an nRF51’s UART
over BLE. The application was modified with a new board
support package that adequately fit the lock’s hardware design.
The UART to BLE bridging of the example application gives
a connecting device direct access to the ID809-like control
protocol of the fingerprint chip.

One significant challenge was buffering and sending finger-
print data over BLE. The UART on the lock runs at 115 200 bps
baud rate by default, which exceeds the data rate achievable
over BLE in the configuration supported by the hardware
and SDK version. Additionally the “SoftDevice” — Nordic’s
proprietary and closed-source portion of the firmware — only
supports 20 bytes of application data per message with this
SDK version. This is smaller even than the shortest command
and response packets for the fingerprint chip, which are 26
bytes long. Complicating matters further, the fingerprint images
are 25,600 bytes which is significantly larger than the free RAM
of the device. A quarter resolution version can be requested,
but we sought to obtain the maximum quality image from the
508 dpi sensor.

These limitations were overcome by implementing a ring
buffer and packet handler that would buffer data while inter-
preting the fingerprint chip’s response headers to determine the
expected packet lengths, sending fragments of 20 bytes until all
expected data was forwarded. These components are depicted
as the FPR packet handler and FPR data buffer in Figure 7.
On startup, the micro-controller instructs the fingerprint reader
to operate at 9 600 bps rather than 115 200 bps, which is much
closer to the data rate achievable over the BLE layer. With
the ring buffer smoothing out any delays in transmission over
BLE, this was adequate to obtain a full fingerprint image.

Figure 7. Structure of the hacked device’s main components, including data
flow through the replacement firmware.

C. Reverse engineering and reprogramming

While some reverse-engineering of the device’s firmware
was performed using Ghidra, it was determined that an easier
modification would be to supply a whole new firmware built
within the Nordic’s nRF5 SDK [10]. Version 12.3.0 (from
2017) of the SDK was chosen based on the features observed
in firmware update packages for the target device, although it
is not known exactly which SDK version the original firmware
is developed in. Figure 7 shows the design of the hacked lock.
A separate micro-controller with two UART interfaces was
used to wiretap the communication in both directions between
the BLE chip and fingerprint chip on the lock. From these
captures it was determined that the device protocol appeared
to be the same as the ID809 fingerprint reader [11], which is
available to purchase for hobbyist projects and has an open
source library [12]. This library was used as reference for
constructing and interpreting commands between the laptop
and fingerprint chip.

OpenOCD was used to observe the configuration and data
registers of the device when running the original firmware to
determine I/O, clock and other peripheral setup. These were
not entirely reverse-engineered, as not all features of the board
were needed for the droplock firmware to be able to perform

D. Remote compromise

Recent versions of Nordic’s SDK use PKI and signed
firmware images to establish a chain of trust between the
update image, its creator and the device. However, the firmware
packages for the target lock have no such signatures, only CRC-
16 checksums, indicating an older SDK and Device Firmware
Update (DFU) process were used, with little protection against
modified firmwares.

The lock in question does have some additional defences.
These include encryption of the messages between the lock and
phone app that involves obtaining a key from the vendor’s web
API. This was reverse engineered, enabling another script based
on the bleak library to communicate with the lock’s original
firmware and trigger DFU mode. Two ways of achieving this
were discovered:

Authenticated: The attacker registers the lock and obtains
the serial and key from the web API, authenticating with the
lock and then activating DFU mode.

Before registration: A new, unregistered lock is given ar-
bitrary serial and key values by exploiting security deficiencies
in the initialisation process. These chosen values are then used
to authenticate and activate DFU mode.

Locks registered by other users need their keys and serials
compromising by some other means in order for the attacker to
gain control of the lock. Obtaining these keys and serials would
also compromise the security of an unmodified firmware, as the
attacker could then unlock any device. This kind of vulnerability
has been found previously [13], but this method does not work
on our target lock and its out-of-the-box firmware version.

An DFU package was created using Nordic’s nfutil tool
(in this case a particularly old version: 0.5.2), based on the
same binary that was previously flashed via cables and a
debugger/programmer. A DFU app (Figure 8), also available
from Nordic, was then used to perform the update once the
device had been entered into DFU mode.

This process takes approximately one minute, after which
DFU mode can be disabled and the droplock firmware becomes
usable. At present the droplock firmware does not include a
DFU activation mechanism, so once a lock has been hacked, it
cannot be restored without physical reprogramming. However,
this capability could be regained by combining additional
components from the nRF5 SDK into the modified ble_app_uart
code.

This brings the attack closer to an ideal case: the attacker
can acquire locks and then reprogram them as droplocks
before dropping them at target locations and capturing victims’
fingerprints. This can even be done without the locks being
registered with the manufacturer and without disassembly. Our
work has now successfully hacked the target device using both
methods 2 and 3 as outlined in Section III-A.

E. Demonstration

The source code of the droplock firmware for the target
lock has been made available [14, Currently private due
to ongoing vulnerability disclosure prior to publication]. A
demonstration video has also been produced [15]. In the video,

Figure 8.

Infecting the lock with droplock firmware via DFU over BLE.

the deconstructed lock from Figure 1 has had its nRF51822
chip reprogrammed with a custom firmware as described
Section III-C. Pressing the button on the device (which when
fully assembled is achieved be depressing the lock shackle)
wakes the device for approximately one minute.

While awake, the device is discoverable via its MAC address
and new name “IoT Droplock”. A Python script utilising the
Bleak BLE library connects to the lock and then issues serial
commands to the fingerprint chip via the droplock firmware’s
BLE to UART bridge. The source code for this has also been
published [16]. The host PC commands the lock to wait for
a fingerprint impression and then upload it to the PC, after
which the image is displayed.

The droplock sequence is somewhat different to that shown
in the PoC from Section II. Firstly, it uses BLE and not WiFi,
because of the available technologies on target device. Secondly,
fingerprint data is directly streamed to the attacker’s PC, rather
than buffered into an embedded web server on the device,
again due to the communication differences of the target. The
attack objective of the lock and the victim’s interactions with
it remain essentially the same.

Fingerprint uploads take approximately 27 seconds and the
data rate after overheads is around 7.5 kbps. This is limited
by the BLE transmission interval and MTU size. Alternative
droplock hardware and/or newer SDK versions may be able to
use shorter intervals and larger MTUs for faster data rates.

The droplock can communicate with a host reliably within
a few metres. The attacker’s receiving device must be within
this range. The Python script could be ported to smartphone,
Raspberry Pi or other more easily concealable device. It may
also be desirable to introduce a more sophisticated buffering
and retransmission mechanism to improve functionality over

(a) Capture result and victim’s thumb.

(b) Screenshot of capture script output and redacted captured image.

Figure 9. Fingerprint capture from the droplock onto a nearby PC with BLE.

longer distances.

IV. RELATED WORK

Our exploration of prior work is divided into three areas:
The propensity for users to interact with dangerous data and
devices, the reconstruction of biometrics from sensor data and
other security vulnerabilities affecting smart locks.

A. Users interacting with dangerous data and devices

People have a tendency to unwittingly interact with data
or devices that may put them at risk. One such example is
the proliferation of Quick Response (QR) codes. These two-
dimensional barcode-like images were created by a Japanese
automotive company in the 1990s [17]. They are easy to
generate and print or display, and are then scannable by any
camera-equipped device with the appropriate software, most
commonly a smartphone and app.

QR codes often encode URLs. However, QR codes lack any
inherent proof of authenticity, which may allow an attacker to
coerce a victim into scanning a QR code that leads them
to a malicious website, with objectives including exploit
payload delivery and phishing. Efforts have been made to
detect malicious URLs in QR codes [18], as well as to allow
verification of code authenticity through the embedding of
digital signatures into them [19]. Users must utilise an app
that integrates such features in order to provide any protection,
leaving a majority unprotected and unaware of the risks.

The uses of QR codes include marketing, supply chain
tracking, contact tracing, user registrations and many more.
They are prolific in society, coupled with the proliferation
of smartphones. As embedded IoT devices become equally
prolific, user familiarity with them may lead to complacency,
especially if good security is not a default posture.

While QR codes can be a visible threat to unaware users,
dropped USB sticks and memory cards pose a more tangible
threat. A user may find a removable storage device and
insert it into a computer to see what is on it, potentially
introducing a malicious payload into a system that might
otherwise be isolated from attack. It has been shown that
users have a tendency to do this [20] and simulations of such
attacks are performed by penetration testers during security
assessments [21]. USB drops have famously been implicated
in high profile incidents involving malware such as Conficker
and Stuxnet [22]. Removable storage has been used to spread

malware for decades, including the first instance of ransomware
which was spread by floppy disk in 1989 [23].

If users have a propensity towards scanning QR codes and
inserting removable storage without establishing their origin or
trustworthiness, then we can infer that users will be similarly
vulnerable to picking up and interacting with a droplock. In
fact, the droplock attack may take less effort on the part of
the user to be successful. They need only pick up the device
and press their finger to the sensor, with no app or physical
connection to a computer required.

B. Reconstructing and using stolen biometric data

Fingerprints are a widely used method of biometric iden-
tification. Formerly reserved for high-security scenarios such
as door entry systems, they are now used far more widely,
including on laptops, smartphones and employee time clocks.
In the taxonomy of authentication methods, biometrics are
something a person is: a physiological aspect to their identity
that no other person is likely to have.

However, fingerprints can be reproduced. In criminal foren-
sics for over a century, fingerprint evidence has been used
to place individuals at scenes of investigations or to identify
people [24]. People leave residue on points of contact that can
then be lifted by a trained person. Similar techniques can be
used for the purpose of stealing a fingerprint.

To impersonate an identity by using a stolen fingerprint, the
attacker must be able to reproduce the print in a form that the
authentication system will accept. An image of the print may
be inadequate, as the biometric sensor may sense the presence
of human skin on the sensor’s surface, along with other liveness
checks such as pulse and temperature. However, 3D printing
can be used to produce a scannable surface [25] and liveness
checks can be defeated even when modern approaches such as
deep neural networks are used [26].

Going some way to defeat the reproduction of fingerprints,
some biometric systems will analyse captured fingerprint
images and generate a template from it to store that rather than
the image itself. This capability can be observed in the sensor
used in our target lock [12]. Authentication attempts take a
scan of a print, generate a new template from it and search
the template database for a match. ISO/IEC 19794-2 defines
fingerprint standards for interoperability between vendors
and systems. However, techniques can be applied to various
template formats to reproduce fingerprint images [27, 28] to
an extent that is sufficient to fool a sensor.

Initially, we had expected to lean on such techniques in
order to reproduce fingerprint’s from our droplock’s template
data. However, we have shown that this was not necessary
because the fingerprint readers of the devices in Section II and
Section III provided the original images on request.

C. Smart lock security

Smart locks are an evolution of electronic or digital locks,
adding communication and IoT capabilities. Electronic locks of
various kinds have previously been found to have vulnerabilities,
such as susceptibility to manipulation of the locking mechanism
with magnets [29] and easily reproducible key cards for which
open source tools and cheap hardware exist [30]. Some smart
locks have also been found to have physical weaknesses,
whereby the spring-loaded mechanism can be overcome with
a tap from a hammer [31].

In addition to physical weaknesses, smart locks may depend
on the security of their communication link, both from lock to
smartphone and also from smartphone to the manufacturer’s
cloud service. Previously, models of smart locks and associated
systems have lacked adequate encryption on cloud API calls,
leaked information via their API through lack of proper
authorization [32] and used easily-reversible key generation
methods enabling them to be unlocked by anyone [13].

D. Linking everything together

Combining the prior work we have reviewed above, a full

droplock attack exploits the following vulnerabilities:

1) Users can be coerced into interacting with an unknown
device. That device may contain a fingerprint reader.
2) Fingerprint readers made for or found in IoT devices may

provide the full fingerprint image.

3) These images can be used to reproduce a fingerprint that

can fool other biometric security systems.

This process may be more involved than dusting and lifting
prints from the surfaces touched by a victim, but is likely to be
less obvious in the short-term and may be quicker to perform.
The smart locks may have other weaknesses, physical or
digital, that compromise their security in the context of their
intended purpose. However, in the case of the droplock, its
ability to lock something securely is not a concern because it
is used only as a lure and is not intended to serve its original
function.

V. RECOMMENDATIONS AND FUTURE WORK
The intent of this work is to highlight the ease with which
devices with benign use cases can be repurposed into malicious
ones, and that victims may have no way of knowing this. In
particular, we suggest that IoT devices, which are small and
un-threatening in appearance, should be viewed with the same
skepticism and caution as unidentified USB sticks and memory
cards. However, while storage devices pose a threat if carelessly
inserted into a vulnerable device, a malicious IoT device could
be a security threat simply by being handled. The stealthy
nature of the data theft is such that the victim will consider
the device broken and never suspect that their print has been
stolen.

A. Recommendations

Assuming fingerprints will, like passwords, remain part of
authentication processes in the forseeable future, we make the
following recommendations for best practices and awareness
to mitigate droplock risks:

a) Disable debug: In addition to a manufacturer being
concerned about their product’s firmware being retrieved and
reversed engineered via debug pads or pins, they should also be
concerned about the device being reprogrammed with malicious
firmware. Disable debug capabilities on production models to
prevent this misuse.

In the case of the nRF51-series chip used in the target lock
from Section III, it is not possible to fully disable the debug
interface, although user configuration registers can disable
reading of memory via debug. However, this protection has
been circumvented [33], so while it would slow down an
attacker, it may not stop them entirely.

b) Use PKI signed firmware updates: Section III-D shows
that without adequate protections, a droplock firmware can
be flashed onto a device via an Over The Air (OTA) DFU
process. Chipset vendors such as Nordic offer secure signed
firmware features in their more recent SDKs, therefore product
manufacturers should consider using these wherever possible.
c) Prevent fingerprint upload: It should not be possible to
retrieve a fingerprint image from the sensor without destructive
or otherwise obvious effort. Production devices should at least
have this capability disabled. Some portability of data, for
example of fingerprint templates, may be acceptable, however
these may also still allow reconstruction of fingerprints in some
cases and might be best left disabled by default.

d) Increase user awareness: A community effort should
be made to educate potential IoT device users (i.e. everyone)
that an untrustworthy device could affect their security. Aside
from fingerprint theft, these devices could be bugged, used as
wireless attack vectors or another invisible threat. Beyond
simple skepticism towards dropped/found storage devices,
we should educate people to be mindful about handling
dropped/found IoT devices.

e) Establishing user trust: It is impossible to visually
determine the authenticity of most IoT devices. While a chain
of trust may be present in the device’s boot process to ensure
that a genuine firmware is running, it may be difficult for a
person to verify this without the vendor’s custom application.
By that time, it may be too late. A standardised method for
advertising and verifying origin and integrity, using an IoT
device’s wireless capabilities would help to mitigate this.

B. Future work

The most compelling area for further work centres upon
studying human behaviour around IoT devices. With the
possibility of fingerprint theft demonstrated in this paper, the
next step is to determine how susceptible users of various
profiles would be to succumbing to such an attack. This
information would better motivate the effort required in
responding to this threat.

Additionally, formalising a standard for security requirements
of any device that possesses a fingerprint scanner that accounts
for the droplock type of threat would have future security
benefits and increase user confidence. So too would researching
the development of a standard for close proximity wireless
verification of an IoT device’s origin and integrity.

Finally, this work examines only one COTS device and
demonstrates the droplock transformation process on it. A
wider examination of a range of COTS products, along with
the considerations required to create a convincing device from
scratch may help to identify opportunities to improve existing
designs as a whole.

VI. CONCLUSION

This paper has shown how a device with biometric and
wireless capabilities can be modified to steal fingerprint images.
These images can be used with pre-existing techniques to
reproduce the victim’s prints and then gain access to other
systems such as smartphones, bank accounts or offices.

A proof-of-concept of the droplock was presented that
demonstrated the wireless theft of fingerprint data using easily
obtainable hardware. Then, a COTS device was disassembled
and reprogrammed with a malicious firmware. The process was
physically reversible, meaning the hacked device would look
no different once re-assembled. A method of reprogramming
the target lock wirelessly and with no disassembly, using DFU
over BLE, was also demonstrated. This culminates in an IoT
device that may carry trusted or familiar branding, but that has
been secretly transformed into a fingerprint harvester.

The security implications of fingerprint theft were explored
and recommendations made for improving the security posture
of both IoT devices and the public with respect
to this
vulnerability. Further work to study human behaviour towards
dropped/found IoT devices, and how to establish trust beyond
visual inspection were proposed.

ACKNOWLEDGMENT

The author wishes to thank Denise Dillon and Robert
Bhurke for their advice, and Belinda Lee and Kevin Wang for
administrative support. Finally, thank you to the reviewers for
their feedback.

REFERENCES
[1] S. Kerrison, “IoT Droplocks: Wireless Fingerprint Theft Using Hacked
Smart Locks,” in 2022 IEEE International Conferences on Internet
of Things (iThings) and IEEE Green Computing & Communications
(GreenCom) and IEEE Cyber, Physical & Social Computing (CPSCom)
and IEEE Smart Data (SmartData) and IEEE Congress on Cybermatics
(Cybermatics), 2022, pp. 107–112.

[2] S. Mccarthy, “Samsung will fix Galaxy S10 flaw that let anyone bypass

fingerprint unlock,” UWIRE Text, pp. 1–, 2019.

[3] S. Arora and M. P. S. Bhatia, “Fingerprint spoofing detection to improve
customer security in mobile financial applications using deep learning,”
Arabian journal for science and engineering (2011), vol. 45, no. 4, pp.
2847–2863, 2019.

[4] Android Source. Android 12 compatibility definition.

[Online].
Available: https://source.android.com/compatibility/12/android-12-cdd#
7310_biometric_sensors

[5] S. Kerrison,

“IoT Droplock

PoC

demonstration,”

https:

//jcu.au.panopto.com/Panopto/Pages/Viewer.aspx?id=c9290f19-8ef7-
418c-9eec-ae8600acd3a2, 2022.

[6] ——, “IoT Droplock PoC,” https://gitlab.com/iot-droplocks-public/

droplock-poc, 2022.

[7] Nordic Semiconductor. (2012) nRF51822. [Online]. Available: https:

//www.nordicsemi.com/products/nrf51822
[8] OpenOCD. Open on-chip debugger.

[Online]. Available: https:

//openocd.org/

[9] ST. (2011) ST-LINK/V2 in-circuit debugger/programmer for STM8
and STM32. [Online]. Available: https://www.st.com/en/development-
tools/st-link-v2.html
[10] Nordic Semiconductor.

[Online].
Available: https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.
nordic.infocenter.sdk5.v12.3.0%2Findex.html

nRF5 SDK v12.3.0.

(2017)

[11] DF Robot. Capacitive fingerprint sensor / scanner. [Online]. Available:

https://www.dfrobot.com/product-2051.html

[12] ——. DFRobot_ID809. [Online]. Available: https://github.com/DFRobot/

DFRobot_ID809/

[13] Pen Test Partners. Totally pwning the Tapplock smart lock. [Online].
Available: https://www.pentestpartners.com/security-blog/totally-pwning-
the-tapplock-smart-lock/

[14] S. Kerrison, “nRF SDK Droplock hack,” https://gitlab.com/iot-droplocks-

public/nrf-sdk/-/tree/droplock-hack, 2022.

[15] ——, “IoT Droplock demo on COTS smartlock using nRF51 SDK,”

https://jcu.au.panopto.com/Panopto/Pages/Viewer.aspx?id=c2c13cac-
b809-4b92-9632-ae8600a1cae0, 2022.

[16] ——, “Bleaky UART,” https://gitlab.com/iot-droplocks-public/bleaky-

uart, 2022.

[17] Denso Wave Inc. History of

the QR code.

[Online]. Available:

https://www.qrcode.com/en/history/

[18] H. Wahsheh and M. Al-Zahrani, “Secure real-time computational
intelligence system against malicious QR code links,” International
Journal of Computers, Communications and Control, vol. 16, pp. 1–9, 6
2021.

[19] R. Focardi, F. L. Luccio, and H. A. Wahsheh, “Usable security for QR
code,” Journal of Information Security and Applications, vol. 48, 10
2019.

[20] M. Tischer, Z. Durumeric, S. Foster, S. Duan, A. Mori, E. Bursztein, and
M. Bailey, “Users really do plug in usb drives they find,” in 2016 IEEE
Symposium on Security and Privacy (SP).
IEEE, 5 2016, pp. 306–319.
[21] CompTIA, Exploiting Physical and Social Vulnerabilities. Wiley, 10

2018, pp. 259–281.

[22] S. Collins and S. McCombie, “Stuxnet: the emergence of a new cyber
weapon and its implications,” Journal of Policing, Intelligence and
Counter Terrorism, vol. 7, pp. 80–91, 4 2012.

[23] A. Kumari, M. Z. A. Bhuiyan, J. Namdeo, S. Kanaujia, R. Amin, and
S. Vollala, Ransomware Attack Protection: A Cryptographic Approach.
Springer, 2019, pp. 15–25.

[24] M. A. Acree, “People v. jennings: A significant case for fingerprint science
in america,” Journal of Forensic Identification, vol. 49, pp. 454–457,
1999. [Online]. Available: https://www.proquest.com/docview/194799240
[25] Y. Levalle, “Bypassing biometric systems with 3d printer and
enhanced grease attacks,” Dreamlab Technologies, Tech. Rep., 2020.
[Online]. Available: https://dreamlab.net/media/img/blog/2020-08-31-
Attacking_Biometric_Systems/WP_Biometrics_v5.pdf

[26] J. Fei, Z. Xia, P. Yu, and F. Xiao, “Adversarial attacks on fingerprint
liveness detection,” EURASIP Journal on Image and Video Processing,
vol. 2020, p. 1, 12 2020.

[27] R. Cappelli, A. Lumini, D. Maio, and D. Maltoni, “Fingerprint image
reconstruction from standard templates,” IEEE Transactions on Pattern
Analysis and Machine Intelligence, vol. 29, 2007.

[28] A. Arakala, K. J. Horadam, J. Jeffers, and S. Bozta¸s, “Protection of
minutiae-based templates using biocryptographic constructs in the set
difference metric,” Security and Communication Networks, vol. 4, 2011.
[29] B. Wels. A new attack on electronic locks: The magnetic ring. [Online].

Available: https://blackbag.toool.nl/?p=204

[30] C. Herrmann, P. Teuwen, O. Moiseenko, M. Walker et al., “Proxmark3 –
Iceman repo,” https://github.com/RfidResearchGroup/proxmark3.
[31] Lock Picking Lawyer. “Tapplock” opened by tapping lock. [Online].

Available: https://www.youtube.com/watch?v=qnkiOvGBuOo

[32] Biometric Technology Today, “Lock vendor

‘false
claims’,” Biometric Technology Today, vol. 2020, no. 5, p. 3, 2020.
[Online]. Available: https://www.sciencedirect.com/science/article/pii/
S0969476520300552

rapped over

[33] L. Browman, “nrfsec,” https://github.com/buildxyz-git/nrfsec.

All links were last followed on 29th April 2022.

