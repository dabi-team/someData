Active TLS Stack Fingerprinting:
Characterizing TLS Server Deployments at Scale

Markus Sosnowski∗, Johannes Zirngibl∗, Patrick Sattler∗, Georg Carle∗,
Claas Grohnfeldt†, Michele Russo†, and Daniele Sgandurra†
∗Chair of Network Architectures and Services, Technical University of Munich, Germany
{sosnowski, zirngibl, sattler, carle}@net.in.tum.de
†AI4Sec, Huawei Technologies Munich, Germany
{claas.grohnfeldt, michele.russo1, daniele.sgandurra}@huawei.com

2
2
0
2

n
u
J

7
2

]
I

N
.
s
c
[

1
v
0
3
2
3
1
.
6
0
2
2
:
v
i
X
r
a

Abstract—Active measurements can be used to collect server
characteristics on a large scale. This kind of metadata can
help discovering hidden relations and commonalities among
server deployments offering new possibilities to cluster and
classify them. As an example, identifying a previously-unknown
cybercriminal infrastructures can be a valuable source for cyber-
threat intelligence. We propose herein an active measurement-
based methodology for acquiring Transport Layer Security (TLS)
metadata from servers and leverage it for their ﬁngerprinting.
Our ﬁngerprints capture the characteristic behavior of the TLS
stack primarily caused by the implementation, conﬁguration, and
hardware support of the underlying server. Using an empirical
optimization strategy that maximizes information gain from every
handshake to minimize measurement costs, we generated 10
general-purpose Client Hellos used as scanning probes to create a
large database of TLS conﬁgurations used for classifying servers.
We ﬁngerprinted 28 million servers from the Alexa and Majestic
toplists and two Command and Control (C2) blocklists over a
period of 30 weeks with weekly snapshots as foundation for two
long-term case studies: classiﬁcation of Content Delivery Network
and C2 servers. The proposed methodology shows a precision of
more than 99 % and enables a stable identiﬁcation of new servers
over time. This study describes a new opportunity for active
measurements to provide valuable insights into the Internet that
can be used in security-relevant use cases.

Index Terms—Active Scanning, TLS, Fingerprinting, Server

Classiﬁcation, Command and Control Servers

I. INTRODUCTION

The Internet is characterized by a high level of complexity
and heterogeneity. The arising metadata can enable novel and
promising data mining use cases. One way to handle the com-
plex data is to represent servers in a simple form, that is, by
devising server ﬁngerprints that succinctly represent their main
characteristics, such as their implementation or conﬁguration
options. The Transport Layer Security (TLS) is currently the
de facto standard for encrypted communication on the Internet
[1] and has grown to a complex ecosystem due to continuous
development and required backward compatibility [2]. Due
to this, the protocol inherently provides a variety of meta-
information related to client and server capabilities that are
exchanged during the initial TLS handshake and that can be
used to characterize a server. In previous work, these meta-

© IFIP, 2022. This is the author’s version of the work. It is posted here by permission of
IFIP for your personal use. Not for redistribution. The deﬁnitive version was published
in TMA CONFERENCE 2022, https://tma.iﬁp.org/2022/

data have been exploited by multiple passive approaches [3–
5]; whereas, in this work we advocate the usage of active
measurements that allow engaging with any responsive server
on a large scale, considering encrypted data, and building a
comprehensive data set from a single vantage point.

Fingerprinting TLS servers can help to understand, model,
and secure the Internet. If TLS ﬁngerprints are able to indicate
a level of trust of an infrastructure, they can be valuable
cyber-threat intelligence, especially because the TLS is in-
creasingly utilized by cybercriminals [6]. Possible use-cases
are: (i) Intrusion Detection Systems ﬁngerprint servers seen
in network ﬂows on-demand and compare results with known
malicious ﬁngerprints; (ii) security researchers use ﬁngerprints
from Internet-wide measurements to ﬁnd unknown threats; or
(iii) regularly monitoring own servers where deviations from
a ﬁngerprints baseline can indicate an unintended software
change or a malware infection. A need for this kind of
information can be derived from the fact that Internet scanning
companies like censys.io have started to incorporate JARM [7]
into their portfolio (according to their host data deﬁnition [8]).
JARM is an open-source TLS server ﬁngerprinting tool that
uses similar data to this work and has just recently emerged.
However, no long-term systematic study has yet been
conducted to show the applicability and the performance of
detection use cases with actively collected TLS ﬁngerprints
nor has the effectiveness of their collection been analyzed.

In this work, we will investigate (i) how to construct a
similarity relation among TLS server deployments, (ii) how
effective scanning conﬁgurations can be found while mini-
mizing the measurement costs, and (iii) how applications built
with these ﬁngerprints perform on a large scale.

We propose Active TLS Stack Fingerprinting as an effective
method for Internet measurements and provide the following
contributions:

(i) reasoned selection of TLS handshake features for ﬁn-
gerprinting the TLS stack and their encoding in an
extendable and shareable format;

(ii) methodology for ﬁnding or tailoring effective TLS Client
Hellos (CHs) for ﬁngerprinting use cases and 10 general-
purpose CHs that maximize complementary information
extraction from servers;

(iii) long running measurement study covering seven months

 
 
 
 
 
 
to validate the methodology, show improvements to the
related work JARM, and demonstrate the potential of
TLS ﬁngerprinting based on two case studies to detect
Content Delivery Network (CDN) and Command and
Control (C2) servers; and

(iv) published data and open-source scanner to enable repro-

ducible results and to support the community.1

II. RELATED WORK

The large amount of metadata from TLS handshakes has
been used in multiple passive trafﬁc classiﬁcation and ﬁnger-
printing related works [3–5]. In the context of the Transmis-
sion Control Protocol (TCP), ﬁngerprinting with active scans
has been successfully used by Refs. [9, 10] and [11] to detect
the Operating System (OS) on a remote server. Similar to our
CH selection, Greenwald et al. [9] used the Entropy from the
information theory as metric to minimize the number of probes
needed for classiﬁcation.

To the best of our knowledge, the only related work we can
directly compare ourselves to is the JARM tool developed by
Althouse et al. [7]. It is a popular open-source tool for TLS
server ﬁngerprinting. Compared to this work, our tool differs
in the selection of CHs and the extracted features from the TLS
handshake. They use 10 custom-deﬁned CHs for ﬁngerprinting
that “have been specially crafted to pull out unique responses
in TLS servers” [7]. In contrast to this work, they do not
complete the TLS handshake, only use unencrypted data, and
do not consider TLS alert nor extension data besides the
Application Layer Protocol Negotiation (ALPN) protocol. We
will show in section V-E that JARM can be used for C2 server
detection; however, the effectiveness can be improved with the
data suggested by this paper.

Tools like testssl.sh [12] can collect ﬁngerprintable
information about TLS servers, but need a very large num-
ber of requests to collect
this information. We observed
testssl.sh to make 100 − 200 requests to the same server.
This makes it time expensive and ethically questionable to
conduct Internet wide scans. Additionally, their focus on the
conﬁgurable part of the TLS on servers (e.g., supported cipher
suites) results in neglecting ﬁngerprintable implementation
speciﬁc features like the extension order.

Chung et al. [13] investigated the usage of the Online
Certiﬁcate Status Protocol (OCSP) stapling from different
webservers and observed Nginx servers, which did not return
OCSP responses to the ﬁrst client connecting, appending
the information only to consecutive requests. These imple-
mentations did not pre-fetch the information nor wait until
the Certiﬁcate Authority (CA) returned the necessary OCSP
response they could forward to the client. This means, from
the clients point of view,
the presence of the OCSP
that
stapling response is non-deterministic. This aligns with our
observations of the non-deterministic presence of the Status
Request extension because this TLS extension is currently
only used to announce an OCSP stapling [14] response in

1https://active-tls-ﬁngerprinting.github.io

the handshake. Gigis et al. [15] investigated Hypergiants,
including CDNs over a period of seven years. They showed the
increasing role of servers deployed in Autonomous Systems
(ASs) not managed by the CDN to inﬂuence and localize
CDN trafﬁc to the user. Their results align with ours because
we were also able to ﬁnd server deployments outside the
networks managed by the CDN and they found indicators of
reverse proxies that inﬂuence the measurement results. Their
results rely on servers correctly offering identiﬁcation material
in the certiﬁcates, while this work is more subtle and can
identify deployments where this information is deliberately
hidden (e.g., to detect C2 servers).

III. METHODOLOGY

The TLS protocol family “is the backbone of secure com-
munication over the Internet” (as introduced in more detail
by Holz et al. [16]) and currently the de facto standard for
encrypted communication [1]. This work exploits the TLS to
discover similarity relations among servers by ﬁngerprinting
their Server Behavior. A Server Behavior is deﬁned as the
totality of the capabilities, the interpretation (deviations from
the standard or implementation of undeﬁned parts, such as
the order of extensions) and the conﬁguration of the TLS on a
server, which can inﬂuence the outcome of the TLS handshake.
Our work is based on the assumption that every TLS server has
a speciﬁc Server Behavior that depends on the implementation,
capabilities, and conﬁguration of the TLS library, hardware,
and application utilizing the TLS. Identifying these behaviors
allows to characterize server deployments either directly or
in conjunction with additional data (e.g., obtained on the
Hypertext Transfer Protocol (HTTP) level).

TLS handshakes are initiated by clients, and servers only
need to react to the initial handshake request (e.g., a server
chooses one cipher from a list that was previously proposed
by the client). Therefore, the Server Behavior we want to
ﬁngerprint is not directly revealed by the server; only the
reaction to different requests (i.e., CHs) can be observed.
Using multiple CH increases the acquirable knowledge and
coverage of the Server Behavior. For each CH, we collect the
TLS version, cipher, and TLS extension data from different
types of TLS messages to construct the ﬁngerprint. We only
initiate handshakes with TLS versions 1.0 to 1.3 but also store
a ﬁngerprint if the server answers with an older version.

This work proposes a methodology for capturing a part of
this Server Behavior by sending a ﬁxed number of speciﬁcally
crafted CHs to a server, extract features as string encoded
information for each CH, as detailed in section III-A, and com-
bine these features to a ﬁngerprint according to section III-B.

A. Features Extracted from TLS Handshakes

Given a CH, we extract features from a single handshake

in a textually encoded format to be used for ﬁngerprinting.

Features are the selected version, cipher suite, received
alerts and extensions data. Extensions are extracted as an
ordered list of key-value pairs each from the Server Hello, En-
crypted Extensions, Certiﬁcate Request, Hello Retry Request

TABLE I
TLS EXTENSIONS WHERE THE DATA CONTAINED IN THE EXTENSIONS ARE
USED FOR ACTIVE TLS STACK FINGERPRINTING.

ID

Name

1 Max Fragment Length
7
Client Authentication
8
Server Authentication
9
Cert Type
10
Supported Groups
11
EC Point Formats
13
Signature Algorithms
15
Heartbeat
16
ALPN

ID

19
20
24
27
28
43
47
50
51

Name

Client Certiﬁcate Type
Server Certiﬁcate Type
Token Binding
Compress Certiﬁcate
Record Size Limit
Supported Versions
Certiﬁcate Authorities
Signature Algorithms Cert
Key Share (only selected group)

and Certiﬁcate TLS messages. The value is only included for
several hand-picked extensions (Table I) or else left empty. An
example of a textually represented ﬁngerprint is

Cipher
1301 43.AwQ-51.23

771

Encrypted Extensions

0.-10.AAo... ___ 18.

Alerts
<40 .

Version

Server Hello Extensions

Certiﬁcate Extensions

In the subsequent paragraphs, we will discuss the reasons
for the inclusion of each feature. The version, selected cipher
suite, and used extensions directly depend on the capabilities
and the conﬁguration of the TLS library used by the server
and are,
therefore, part of the ﬁngerprint. The content of
each individual extension is more diverse, and its ﬁnger-
printing value depends on the actual extension. Information
depending on the current TLS session, speciﬁc server, or TLS
certiﬁcate are excluded. From an analysis of different TLS
extensions [14, 17] and from the observations in our scans,
we infer the content of the extensions listed in Table A.I
as a feature. An exception to this schema is the Key Share
extension, where we remove the session speciﬁc part and
only keep the selected group used for the Difﬁe–Hellman key
exchange. The ﬁngerprints are deﬁned in a format that can
easily be adapted (e.g., to include values speciﬁed in future
extensions). Error handling is implementation speciﬁc; hence,
the TLS alerts sent by the server are also included. We do not
create a ﬁngerprint if the error was caused by the TCP layer.
The current approach cannot differentiate whether the error
is part of the Server Behavior or if it was a nondeterministic
failure of the TCP stack. We consider the order of extensions
as an important and implementation-speciﬁc information that
we include in our ﬁngerprints. The presence of the Status
Request extension was nondeterministic in our measurements
(section V-B); therefore, we removed this extension from the
ﬁngerprints trading the information about the OCSP stapling
support of a server for results consistency.

B. Fingerprinting with Multiple Requests

In this work, data from multiple server responses are com-
bined to construct the TLS ﬁngerprint of the Server Behavior
because a single response was not precise enough to provide
good results in our experiments.

While a single CH reveals only a potentially small request-
dependent subset of the information about the target server,

multiple request–response pairs allow the collection of com-
plementary information and, thus, a more complete picture
about the Server Behavior. Increasing the number of CHs is a
trade–off between learned information and measurement costs.
However, the beneﬁt of sending multiple CHs decreases with
every additional CHs one sends because of the limit to which
extent a Server Behavior can inﬂuence the TLS handshake.
Moreover, the number of CHs should be limited based on time,
resources, and ethical factors. Hence, the input set CH of CHs
is an optimizable parameter inﬂuencing the effectiveness of
ﬁngerprinting. Let f (s, c) return the features from a server s
given a speciﬁc CH c in the format described in Section III-A,
then the server ﬁngerprint is deﬁned as

f p(s) =

(cid:91)

c∈CH

(c, f p(s, c)).

The features obtained with a single CH are only comparable
in the context of the same CH; hence, the CH used to generate
each part of the ﬁngerprint must be stored along the combined
ﬁngerprints. We never compared information obtained with
different CHs because we do not know what combination of
parameters in the CH has caused the particular response.

In conclusion, the number of requests and the design of
different CHs are crucial parameters that can be optimized
to maximize the amount of collectible information while
minimizing measurement costs and respecting ethical aspects.
This will be experimentally done in section IV.

C. Active Measurements under Ethical Considerations

We have used an active measurement pipeline based on

established tools and by following basic ethical principles.

The pipeline takes a list of IP addresses, domains, and CHs
as input. The domains are resolved according to the IPv4 and
IPv6 addresses with MassDNS2 and a local Unbound3 server,
resulting in a set of IP address and domain tuples we call
targets. We ﬁngerprint with multiple CHs; thus, the ﬁnal input
is a randomly ordered cross-product of the targets and the CHs.
This list is fed to the TLS scanner based on an implementation
of Amann et al. [18], a scanner designed for Internet wide
usage. If a domain name is available for an IP address, we
used it as the Server Name Indication (SNI). We designed a
custom TLS library based on the Golang standard library that
allows the deﬁnition of arbitrary CHs as input for each TLS
connection and to extract required TLS handshake meta-data.
Both scanner and library are open-sourced [19].

We reduce the impact on third parties by following the best
practices, as described by Durumeric et al. [20]. Our work
does not harm individuals or reveal private data as covered by
Refs. [21] and [22] and focuses on publicly reachable services.
We use rate limiting, maintain a blocklist, use dedicated scan
servers with abuse contacts, informative rDNS entries, and
websites that inform about our research, and provide contact
information for further details or scan exclusion. Additionally,
because we scan the same target with multiple requests, we

2https://github.com/blechschmidt/massdns
3https://www.nlnetlabs.nl/projects/unbound

every added CH enables to differentiate additional Server Be-
haviors; however, the relative increase of behaviors decreases
the more CHs we use. We could not reach the theoretical upper
limit of distinguishable behaviors. Based on this analysis, we
selected 10 general-purpose CHs with a good performance in
distinguishing Server Behaviors. We thought that this number
was adequate for our use cases because according to Fig. 1
the relative increase of information was quite low when using
more than 10 CHs, we can directly compare related work, and
this number seemed to be acceptable for Internet scanners like
censys.io already ﬁngerprinting with JARM [8]. However,
in section VI, we will illustrate that the number can be lower
for speciﬁc use cases (e.g., detecting C2 servers). We only
manually adapted some cryptographic parameters of these CHs
that were too CPU-expensive, such as the 512-bit version
(secp521r1 [27]) of the elliptic curve domain parameters
for the precomputed TLS 1.3 Key Share. This curve would
have more than doubled our scanning time.

Through the experiment described in this section, we gained
a set of 10 general-purpose CHs that we will use in the
following section to ﬁngerprint servers on the Internet. They
are a good trade-off between limiting the number of requests
and the resulting impact on the scanned infrastructure and
providing a high distinctiveness of the Server Behaviors.

V. LONGITUDINAL STUDY OF TOPLISTS AND BLOCKLISTS

To investigate the applicability of TLS ﬁngerprinting on the
Internet, we performed measurements of two toplists and two
C2 blocklists over 7 months. The following sections analyze
the stability of the ﬁngerprints, apply the methodology to
detect CDN and C2 servers, and compare to related work.
The two case studies were selected to have one with a big
sample size and where the ground truth can be veriﬁed and
one where the value of the study is high, but the sample size
is low.

A. Data

We scanned servers from the two toplists and two blocklists
over a period of 30 weeks using 25 weekly snapshots starting
on July 19, 2021. Five scans failed and the data for these
weeks were skipped.

Table II presents the number of scanned servers. A target
is the scanned combination of IP addresses, TCP port, and
domain name. The targets were aggregated over a period of
seven days from Alexa [25] and Majestic [26] to cover the
weekend effect and the weekly patterns observed by Scheitle et
al. [28]. The last 30 days were used for the SSLBL [29], while
the current list was utilized for the Feodo Tracker [30]. We
took a larger time frame for the SSLBL, because in addition
to the IP addresses, we used the provided certiﬁcate hashes to
reduce false positives. This list of around 4M weekly targets
was taken as input to the scanning pipeline, as described
in section III-C. The scanning probes are both the 10 CHs
designed in section IV and the 10 CHs modeled after JARM [7]
to compare both approaches. However, unless stated otherwise,
the following analyses are only based on the 10 CHs designed

Fig. 1. Experimentally determining the trade-off to increase the number of
CHs versus the ability to distinguish Server Behaviors (measured in distinct
ﬁngerprints). We selected a set of 10 CHs for our following analyses.

limit the interference by spreading the requests over a large
time frame (i.e., two days in the longitudinal study).

IV. SYSTEMATIC DESIGN OF CLIENT HELLOS

The internal mechanism of TLS servers is a black-box for
active scanners. Without knowledge about the implementation
of every TLS server, it is impossible to ﬁnd the best method
for ﬁngerprinting. However, more effective ﬁngerprints can
be developed by optimizing their distinctiveness. We propose
herein an empiric design of CHs by analyzing a large pool
of randomly generated candidates to ﬁnd an optimal subset
maximizing a given metric. We choose the total number
of distinguishable servers as metric to ﬁnd general-purpose
CHs usable for a wide range of use-cases. If the use-case
is known (e.g., detecting CDN or C2 servers), a different
strategy could be to minimize the necessary probes needed
for a classiﬁcation. We will later revisit this use-case driven
design regarding C2 servers in section VI. We have open-
sourced the general-purpose CHs and their generation code as
part of our scanner [23].

The experiment is designed as follows: (i) randomly gen-
erate 5 000 CHs each from the feature space the used TLS
scanner supports and the complete feature space as deﬁned by
IANA [24]; (ii) distribute a measurement with these CHs over
the Alexa [25] and Majestic [26] toplists with a maximum
of 13 CHs per server to gain a ﬁrst impression of good-
performing CHs; and (iii) select the best-performing CHs from
the previous measurement and conduct a second measurement
of the same targets and ﬁngerprint each target with 50 CHs.
We choose the prime-number 13 together with a round-robin
algorithm to increase the variation of the different sets of CHs
sent to a single server. The decision to scan with 50 CHs per
server was a pure trade-off between development speed and
data quality (the scan took more than 4 days).

Figure 1 shows the number of behaviors that can be distin-
guished with subsets of the 50 CHs. The sets were constructed
by iteratively selecting CHs that increase the number of distin-
guishable Server Behaviors most. To remove the potential bias
from nondeterministic TCP errors, we consider only servers
for which every CH produced a ﬁngerprint. We can see that

01020304050Number of Client Hellos (CHs)01000020000300004000050000Distinct Server BehaviorsSelected CHs0%50%100%150%200%Maximum of differentiable behaviors (left)Relative increase of the number of distinctServer Behaviors from N to N+1 CHs (right)TABLE II
TOTAL NUMBER OF COLLECTED DATA SAMPLES OVER 30 WEEKS FOR THE
LONGITUDINAL ANALYSES. ALSO SHOWS THE NUMBER OF DISTINCT
TARGETS AND DOMAIN NAMES THE DATA COVERS (M = 106).

TABLE III
SERVERS SEEN WITH A TLS FINGERPRINT FROM THE RESPECTIVE CDN.
A STRONG CORRELATION BETWEEN BOTH CAN BE SEEN.

Source

Alexa
Majestic
SSLBL
Feodo

Scanned

Successful

Total Targets Domains

Total Targets Domains

80.88M 26.48M 11.69M 68.48M 22.21M 9.87M
37.26M 4.72M 1.58M 31.23M 3.59M 1.36M

951
8.14k

250
1.06k

558
7.07k

127
883

Total

103.77M 27.69M 12.01M 87.87M 23.12M 10.16M

Fig. 2. Percentage of targets with the same TLS ﬁngerprint on the n − 1
and nth measurement in relation to the total targets ﬁngerprinted on both
weeks. The Status Request extensions are responsible for the most unstable
ﬁngerprints with drops under 90% mostly caused by Cloudﬂare.

for this study. Targets are only considered to be successfully
ﬁngerprinted if a ﬁngerprint for each CH was collected. The
total number of targets was less than the sum of each list due
to an overlap between the lists.

B. Consistency of TLS Fingerprints

The ﬁngerprints only provide value for identiﬁcation pur-
poses if they can be unambiguously assigned to a server, and
this assignment does not change, in other words, is stable.

For each measurement, a large number of servers was al-
ready seen in the last measurement (≈ 48% each week); hence,
their ﬁngerprints can be compared over time. Figure 2 shows
the relative number of targets remaining stable during each
measurement. On average the targets remained stable 99% of
the time. The stability drops on average to 90% if the Status
Request extension is considered for ﬁngerprinting. In these
cases, the presence of the extension is nondeterministic. This
is especially visible during stability drops under 90%, where
only ≈ 3
4 of the TLS handshakes to Cloudﬂare contained a
Status Request extension compared to the other weeks.

This analysis concludes that Status Request extensions
should not be considered for obtaining useful ﬁngerprints.
However, they are, without the extension, a very stable and
consistent feature to identify servers. The subsequent sections
analyze how differences in ﬁngerprints can be used to identify
whole deployments of similar servers.

C. Case study: Detecting CDN server deployments

it
A core assumption about TLS ﬁngerprinting is that
reveals groups of similar server deployments. We tested this
assumption, by analyzing the ﬁngerprints of four major CDNs.

Akamai

Alibaba

Cloudﬂare

Fastly

Targets with a TLS ﬁngerprint attributable to a CDN

Total
IP addresses

98 701
24 332

405
267

7 021 087
222 050

572 294
7 238

Targets observed from ASs owned by the CDN

Total
IP addresses

97 022
23 564

403
265

6 991 829
214 436

559 860
1 752

Targets observed from different ASs, but have access to CDN content

Total
IP addresses
ASs

664
212
20

2 493
139
27

On the one hand, these are TLS-enabled servers deployed by
a single actor on a large scale. On the other hand, ground truth
can be used because it is possible to verify if a server is a part
of the CDN. With this analysis, we found servers outside of
the ASs operated by the CDN that served the CDN content.
The analyzed CDNs have in common that they use their
own ASs to deploy servers and CDN caches. Hence, we
can identify them through the AS, determined through the
Border Gateway Protocol (BGP) dumps downloaded from
Routeviews4 and Pyasn5. The content served by a CDN is
independent of the actual server or the IP address. Therefore,
we call servers serving this content a CDN cache. The CDN
decides on the criteria like the SNI which content should be
returned. In the same manner, the proper TLS certiﬁcate for
the requested domain is selected by the CDN. Hence, we can
evaluate whether or not a server is a valid CDN cache with
our TLS scanner. The server is veriﬁed as CDN cache if it
successfully completes a TLS handshake for a domain we have
manually observed to be cached by the CDN and, therefore,
proves possession of a valid certiﬁcate and the respective
private key.

This analysis focused on the CDNs of Cloudﬂare, Fastly,
Akamai and Alibaba. The CDN ﬁngerprints were collected
based on the scanned IP addresses located within their re-
spective AS. The HTTP Server header is used to enhance
the mapping, as described by Gigis et al. [15]. Note that
for Fastly, the AS was sufﬁcient to detect their CDN servers.
Table III lists an overview of the results showing a strong
correlation between the TLS ﬁngerprint and the CDNs. Almost
all targets with a CDN ﬁngerprint were located within a CDN
AS. The rate was higher than 99% for Cloudﬂare and Fastly.
In addition, 7% of the targets we falsely assigned to one of
the CDNs turned out to be valid caches of the CDNs from
Akamai and Cloudﬂare outside of their respective networks.
We will discuss these targets more detailed in section VI.

A simple multi-label classiﬁer can be built using these
data, by identifying a CDN server purely from their TLS

4https://routeviews.org/
5https://pypi.org/project/pyasn/

2021-082021-092021-102021-112021-122022-012022-02Measurement Dates80%90%100%Stable FingerprintsWithout Status RequestIncluding Status RequestTABLE IV
FINGERPRINTING RESULTS FOR THE C2 SERVERS. COMBINING OUR
FINGERPRINT (FP) WITH HTTP DATA RESULTS IN MORE FPS AND
DISTINCT TARGETS (TAR.) UNIQUE TO A C2 LABEL.

C2 Label

Total

Unique Unique (+HTTP)1

New Obs.

Tar. FPs Tar. FPs Tar.

FPs

Total Known FP

9
311
Dridex
276 28
TrickBot
6
127
QakBot
BazarLoader 116 16
3
92
Emotet
2
Ransomware 12
9
11
CobaltStrike
3
11
AsyncRAT

1
31
0
27
1
0
1
0

2 137
8 106
0 122
28
4
1
1
0
0
5
6
0
0

Other

28 18

15 10

16

4
16
3
5
1
0
7
0

13

193
192
86
87
83
11
4
9

13

193
175
72
40
62
10
4
7

6

1 Combining TLS ﬁngerprints with the HTTP Server header.

and Fastly we have used 86, 1, 801, and 87 ﬁngerprints,
respectively.

In summary, with TLS ﬁngerprinting, large CDN deploy-
ments can be identiﬁed because they share a common TLS
behavior. The precision was above 99% for some CDNs,
and we have found several CDN caches in unexpected ASs.
After showing that the approach works with major known
deployments, we will now apply it to a much smaller sample
size identifying potentially malicious C2 servers.

D. Case study: Identifying C2 servers

Aside from identifying CDN deployments, TLS ﬁngerprint-
ing can also be used to identify and track potentially malicious
targets like C2 servers.

Blocklists containing C2 servers are used as an indicator
of malicious behavior. Table IV presents the measurement
results for each C2 label. The Ransomware, AsyncRAT, and
CobaltStrike labels are from the SSLBL [29]. The remaining
labels are from the Feodo Tracker [30]. Several ﬁngerprints
are unique to a certain type of C2 server. However, these
unique ﬁngerprints cover only a small part of all observa-
tions. The number of unique ﬁngerprints gradually increases
by combining ﬁngerprints with additional HTTP data (i.e.,
the HTTP Server header containing values like nginx or
Apache/2.4.18). New servers added to the blocklists re-
peatedly had the same ﬁngerprint as past servers, that is, 95%
of the targets added during week n+1 have ﬁngerprints already
observed for this label during weeks [1..n]. In other words,
these servers could be identiﬁed through ﬁngerprinting.

This work uses a binary classiﬁer to decide whether or not
a server is a C2 server from a blocklist. The classiﬁer takes
a threshold t as a parameter and predicts a C2 server if the
C2 rate of the observed ﬁngerprint is higher than t. This rate
is calculated for each ﬁngerprint by dividing the number of
times observed from a C2 server by the total number of times
seen in the training data (e.g., a threshold of 80% means a
ﬁngerprint must be observed more than 80% of the times from
blocklists such that servers with this ﬁngerprint are classiﬁed
as a C2 server). The classiﬁer is evaluated on every new target

Fig. 3. Evaluation of a CDN server classiﬁer. It was trained with TLS
ﬁngerprints from weeks [1..n] and evaluated on week n.

ﬁngerprints. The classiﬁer was trained with the data of weeks
[1..n]. It classiﬁes a target in the n+1th week as a CDN server
if the ﬁngerprint was observed at least 10 times from the CDN,
and the certiﬁcate was valid in these cases. This decision was
always unambiguous because the ﬁngerprints did not overlap.
We evaluated the metrics precision and recall per CDN for
T P
each week. The precision and the recall are deﬁned as
T P +F P
and T P
P P , respectively. The number of true observations P P
is the sum of targets either (i) located within the CDN AS
with the appropriate HTTP Server header values (according
to Gigis et al. [15]) or (ii) validated as a CDN cache with the
TLS scanner. Figure 3 illustrates the results. The precision was
high with more than 85% for Alibaba and Akamai and more
than 99% for Cloudﬂare and Fastly. The networks of the latter
were much more uniform and easily clusterable compared to
those of Alibaba and Akamai.

An interesting drop of the recall was observed for Fastly
in October 2021. This drop was caused by a Server Be-
havior change, where new behaviors not covered by ﬁnger-
prints from the previous measurement dates were observed.
We particularly noticed fewer handshakes to complete with
http/1.1 as an ALPN. The new behavior was seen in the
later measurements stabilizing the recall. Therefore, a potential
ﬁngerprint database must be regularly updated to provide
the best performance. We introduced a threshold of 10 valid
observations because we had a few cases, in which an Alibaba
server responded with a ﬁngerprint we could attribute in most
other cases to Tengine webservers (inferred from the HTTP
header). This webserver is not only deployed by Alibaba; thus,
it would have produced many false positives. Not considering
these ﬁngerprints caused the recall drop for Alibaba in 2022.
Additionally, Alibaba has a more diverse cloud portfolio on
offer compared to the other examined companies that could
be the reason for the ﬂuctuations in the precision and recall.
Our ﬁngerprints were able to detect minor differences
among the deployments of the same CDN. This means,
the approach was too speciﬁc for the general
sometimes,
use case to detect just the CDN. We mitigated this problem
by mapping multiple ﬁngerprints to each CDN covering all
of these variations. To detect Akamai, Alibaba, Cloudﬂare,

80%90%100%AkamaiAlibaba2021-082021-092021-102021-112021-122022-012022-02Measurement Date80%90%100%Cloudflare2021-082021-092021-102021-112021-122022-012022-02Measurement DateFastlyPrecisionRecall(a) TLS Fingerprint (10 CHs)

(b) HTTP Data (Server Header)

(c) Combined (10 CHs + HTTP Data)

Fig. 4. Precision and recall to identify new observations on our input lists as C2 servers using the data described in Figs. 4a to 4c as input for the classiﬁcation.

T P

added to a toplist or a blocklist during week n + 1 based on
the training data from weeks [1..n]. The precision and the
T P +F P and T P
P P , respectively. The true
recall are deﬁned as
observations P P are the responsive targets found on a block-
list. Figure 4 shows results for different thresholds for three
data sources to construct the input for the classiﬁcation. The
classiﬁer performance will greatly increase if the ﬁngerprints
are combined with additional data from the HTTP Server
headers. This HTTP datum alone is unsuited for a classiﬁer,
but when combined, it achieves a maximum precision of 99%
for 35% of the added C2 servers. In contrast to the CDN
detection, the low recall is an indicator that our ﬁngerprinting
was not ﬁne-grained enough to detect the differences in the
deployments needed to identify all C2 servers. Augmenting
the ﬁngerprints with HTTP data was our solution to improve
this granularity for more effective ﬁngerprinting.

This analysis demonstrates that many C2 servers have a
very unique TLS behavior that can be used to identify them.
We also presented how a classiﬁcation of these servers can be
implemented on a large scale, and that such an approach can
achieve a high precision. Additionally, a potential ﬁngerprint
database for C2 servers would live much longer than the
entries on the used blocklists, which means that they can
provide valuable information about newly deployed C2 servers
until their IP addresses get publicly known.

E. Comparison With JARM

After analyzing the applicability of TLS ﬁngerprintings on
a large scale, the subsequent paragraphs have a look at the
performance of JARM [7] which can also be used to ﬁngerprint
TLS servers. While JARM uses similar data to our approach,
we will show that both the data extracted from the TLS
handshakes and the CH selection of this work provide an
improved base for ﬁngerprinting.

We scanned every target with the CHs used by JARM, as
well as the empirically optimized ones from this work. Thus,
we can compare both approaches. We did not use the open-
source JARM script directly because it was not able to scan
our number of targets on our hardware fast enough. Instead,
we have used our own scanner with the JARM CHs and
extracted the subset of features that JARM uses to construct
its ﬁngerprints from our data. In particular, ﬁngerprints were
stripped from alerts, any TLS message besides the Server
Hello, and any extension data besides the ALPN (i.e., the
IDs and the order of the extensions remained intact, and

TABLE V
COMPARING RELATED WORK JARM WITH ACTIVE TLS STACK
FINGERPRINTING (ATSF) CONSIDERING BOTH THE DIMENSIONS OF
FEATURE SELECTION AND USED CHS.

Feature selection approach

JARM

ATSF

Used CHs

JARM ATSF

JARM ATSF

Unique ﬁngerprints
Unique C2 ﬁngerprints
Unique C2 targets

52 316 63 037
12
43

7
15

65 111 81 180
23
64

16
22

only the data contained in these extensions were removed).
Table V presents a comparison of how the selection of features
and CHs affects the ﬁngerprinting results. The improvements
proposed herein consistently provide better results while main-
taining the number of requests necessary for ﬁngerprinting
the same (i.e., 10 CHs). In total, this work can differentiate
55% more Server Behaviors. Considering the C2 servers,
this improved differentiation results in 16 additional unique
C2 behaviors and four times more C2 servers identiﬁable
with these unique behaviors. In this case, “unique” means no
overlap was observed with any server found on a toplist.

In conclusion, TLS ﬁngerprinting tools like JARM can
beneﬁt from the advanced feature extraction and the systematic
design of the CHs proposed in this work to improve the
effectiveness of the approach.

VI. DISCUSSION

With our ﬁngerprinting approach we gained new insights
into the Internet and found interesting relations among TLS
servers. Some of them, we discuss in the following paragraphs.
a) Advanced Similarity Comparison: This work explic-
itly does not obfuscate any information as done by Refs. [5]
and [7] to keep the syntactic information of each part of the
ﬁngerprint intact. This supports explainability, allows to relate
not only equal but similar behaviors in the future, and to adapt
the ﬁngerprints afterwards (e.g., removing the Status Request
extensions). Similar ﬁngerprints can indicate deployments
from an actor who has done just minor conﬁguration changes.
b) The Success of Random CHs: In the beginning we
have used the standard CH from the Go library and CHs
mimicking popular browsers for ﬁngerprinting. However, they
could not extract enough information from servers to be effec-
tive in use cases because the responses were similar focusing
on few popular TLS conﬁgurations. In contrast, the Random

0%20%40%60%80%100%Threshold0%50%100%0%20%40%60%80%100%Threshold0%50%100%0%20%40%60%80%100%Threshold0%50%100%PrecisionRecallby Cloudﬂare. Additionally, our data contained 1 094 outlier
domain names resolving to the public Domain Name System
(DNS) resolver 1.1.1.1, which was apparently also a cache
of the Cloudﬂare network. 76% of these domain names used a
Cloudﬂare nameserver. In contrast to Cloudﬂare, Akamai has
deployed CDN caches in more than 1k foreign ASs to localize
their trafﬁc [32]. However, we detected just 20 ASs because
we did not scan the full IPv4 address space, but IP addresses
resolved from the toplists. Akamai uses the DNS to distribute
the load on their servers [32]. We assume, we saw these ASs
because our scan trafﬁc was not always directed to the closest
CDN cache but distributed across servers in multiple ASs.

e) CDN Inconsistencies: Some CDN caches were in-
consistent in their responses because not every IP address
successfully responded to every domain name requested. To
the end, multiple domain names were necessary to validate
caches. For Cloudﬂare, this was only a single IP address
located in China. For Akamai, bigger clusters were visible
and multiple domain names were needed to verify them.

f) Unstable Fingerprints: Some targets had inconsistent
ﬁngerprints that could be caused by the server or by more
complex setups. Sometimes, we saw indicators of load bal-
ancers in the HTTP Server header indicating that the actual
ﬁngerprinted server could change during the scan process. This
is also the main limitation of our approach because it relies
on multiple TLS connections to connect to the same Server
Behavior. However, this was rarely an issue (section V-B).

VII. CONCLUSION

This work proposed a methodology for acquiring and
leveraging TLS metadata with the help of large scale active
measurements. The value of the approach is backed by two
measurement studies on the Alexa and Majestic toplists and
two C2 blocklists over half a year to detect CDN and C2
servers. New C2 servers added to the blocklists were classiﬁed
with a precision higher than 99%. Depending on the CDN
and their infrastructure, the detection precision ranged from
85% (Akamai and Alibaba) to more than 99% (Cloudﬂare and
Fastly). Additionally, 351 IP addresses were identiﬁed serving
CDN content outside of the AS operated by the CDN.

The results were obtained with a reasoned selection of the
features extracted from TLS handshakes and with the use of
multiple scanning probes to construct ﬁngerprints of the TLS
stack on servers. These 10 probes were empirically optimized
to provide as much information as possible while minimizing
the measurement time and the ethical impact on targets.

This paper describes in detail how TLS stack ﬁngerprinting
can be efﬁciently conducted and proves that these data can be
applied on real-world classiﬁcation problems like C2 detection
to provide valuable security-related insights.

Moreover, the extended feature extraction and improved CH
design can improve existing TLS ﬁngerprinting tools while
maintaining the active scanning effort. Given the approach is
independent of the actual CHs, we expect future works to tune
their CHs to speciﬁc use cases, or individually adapt them on
a per-server level.

Fig. 5.

Inﬂuence of the CHs on the C2 detection with an 80% threshold.

CHs were empirically optimized to distinguish servers and
have unusual combinations and order of parameters. They
vary in the combination of TLS versions, ciphers, ALPNs, and
supported groups and, sometimes, are not realistic (e.g., offer
ALPNs unsuitable for webservers). Interestingly, two CHs use
TLS 1.3 and none use TLS 1.2 as legacy_version, both
is not conform to the RFC [17]. In contrast, JARM uses more
realistic CHs with fewer variations in the parameters. They
deﬁned them through systematic subsets (e.g., the top half) or
a reversed order from a ﬁxed input. In conclusion, the Random
CHs are very successful for ﬁngerprinting because they have
a fuzzy character triggering more distinctive responses.

c) Adequate number of CHs for C2 detection: We de-
signed the 10 CHs as a general-purpose conﬁguration to
provide a good base for a classiﬁcation. However, for speciﬁc
use cases they can be different. We scanned every server with
10 optimized and 10 JARM CHs; hence, the classiﬁcation
performance shown in Fig. 4a can be recomputed using up
to 20 CHs as input for an 80% threshold. We used the
same strategy to add CHs to the classiﬁcation input as in
section IV. While the precision was high for almost all
sets of CHs, scanning with multiple ones mainly increased
the number of classiﬁed servers (visible in the recall). The
maximum precision and recall was achieved with 16 CHs, but
the gain was minimal after eight CHs. For this detection use
case, multiple CHs are necessary, but eight CHs would have
been sufﬁcient. Additionally, an adaptive scanning approach
could be implemented in the future work, where additional
requests are only sent to a server if the precision of its current
classiﬁcation is not high enough.

d) CDN Caches in a Foreign AS: We were not able to
correctly identify all reasons why some domains resolved to
CDN caches in a foreign AS. In particular, 80% of them were
located in an AS from VTC Digicom, Amazon, or Render.
the whole Render AS was proxied through
Interestingly,
Cloudﬂare and its IP address preﬁx functioned as CDN cache.
It is possible that we have observed the effect of operators
that try to remain in control of their trafﬁc ﬂow (e.g., by
deploying a Meta-CDN [31]) because 68% of the domains
pointing to a CDN cache in a foreign AS used a nameserver
unrelated to the CDN. To our knowledge, Cloudﬂare does
not operate CDN caches outside of their ASs. At least six of
these caches turned out to be reverse proxies set up by third
parties; investigated with a tracing endpoint6 suggested to us

6https://cloudﬂare.com/cdn-cgi/trace

80%85%90%2468101214161820Used Client Hellos10%20%30%PrecisionRecallREFERENCES

[1] C. Labovitz, “Internet trafﬁc 2009-2019,” in Proc. Asia
Paciﬁc Regional Internet Conf. Operational Technolo-
gies, 2019.

[2] P. Kotzias, A. Razaghpanah, J. Amann, K. G. Paterson,
N. Vallina-Rodriguez, and J. Caballero, “Coming of Age:
A Longitudinal Study of TLS Deployment,” in Proc.
ACM Int. Measurement Conference (IMC), 2018.

[3] B. Anderson and D. A. McGrew, “Accurate TLS ﬁnger-
printing using destination context and knowledge bases,”
CoRR, vol. abs/2009.01939, 2020.

J.

J.

and

[5] J.

Althouse,

[4] M. Hus´ak, M. Cerm´ak, T. Jirs´ık, and P. Celeda,
“Network-Based HTTPS Client Identiﬁcation Using SS-
L/TLS Fingerprinting,” in 2015 10th International Con-
ference on Availability, Reliability and Security, 2015.
Atkins,
Atkinson,
“TLS Fingerprinting with JA3 and JA3S,” 2019.
[Online]. Available: https://engineering.salesforce.com/
tls-ﬁngerprinting-with-ja3-and-ja3s-247362855967
[6] Sean Gallagher, “Nearly half of malware now use TLS
to conceal communications,” 2021. [Online]. Available:
https://news.sophos.com/en-us/2021/04/21/nearly-half-
of-malware-now-use-tls-to-conceal-communications/
[7] J. Althouse, A. Smart, R. Nunnally, Jr., and M. Brady,
“Easily Identify Malicious Servers on the Internet
with
https:
//engineering.salesforce.com/easily-identify-malicious-
servers-on-the-internet-with-jarm-e095edac525a

[Online]. Available:

JARM,”

2020.

[8] Censys.io. Data Deﬁnitions. Last

accessed Feb.
24, 2022. [Online]. Available: https://search.censys.io/
search/deﬁnitions

[9] L. G. Greenwald and T. J. Thomas, “Toward unde-
tected operating system ﬁngerprinting,” in Proceedings of
the First USENIX Workshop on Offensive Technologies.
USENIX Association, 2007.

[10] Z. Shamsi, A. Nandwani, D. Leonard, and D. Loguinov,
“Hershel: Single-Packet OS Fingerprinting,” IEEE/ACM
Transactions on Networking, 2016.

[11] G. F. Lyon, Nmap Network Scanning: The Ofﬁcial Nmap
Project Guide to Network Discovery and Security Scan-
ning.

Insecure, 2009.

[12] Dirk Wetter. Testing TLS/SSL encryption. Last accessed
March 1, 2022. [Online]. Available: https://testssl.sh/
[13] T. Chung, J. Lok, B. Chandrasekaran, D. Choffnes,
D. Levin, B. M. Maggs, A. Mislove, J. Rula, N. Sullivan,
and C. Wilson, “Is the Web Ready for OCSP Must-
Staple?” in Proc. ACM Int. Measurement Conference
(IMC), 2018.

[14] D. E. Eastlake, “Transport Layer Security (TLS) Exten-

sions: Extension Deﬁnitions,” RFC 6066, 2011.

[15] P. Gigis, M. Calder, L. Manassakis, G. Nomikos,
V. Kotronis, X. Dimitropoulos, E. Katz-Bassett, and
G. Smaragdakis, “Seven Years in the Life of Hypergiants’
off-Nets,” in Proc. ACM SIGCOMM, 2021.

[16] R. Holz, J. Hiller, J. Amann, A. Razaghpanah, T. Jost,

N. Vallina-Rodriguez, and O. Hohlfeld, “Tracking the
Deployment of TLS 1.3 on the Web: A Story of Exper-
imentation and Centralization,” ACM SIGCOMM Com-
puter Communication Review, 2020.

[17] E. Rescorla, “The Transport Layer Security (TLS) Pro-

tocol Version 1.3,” RFC 8446, Aug. 2018.

[18] J. Amann, O. Gasser, Q. Scheitle, L. Brent, G. Carle, and
R. Holz, “Mission Accomplished? HTTPS Security after
Diginotar,” in Proc. ACM Int. Measurement Conference
(IMC), 2017.

[19] O. Gasser, M. Sosnowski, P. Sattler, and J. Zirngibl.

Goscanner. https://github.com/tumi8/goscanner.

[20] Z. Durumeric, E. Wustrow, and J. A. Halderman, “ZMap:
Fast internet-wide scanning and its security applications,”
in Proc. USENIX Security Symposium, 2013.

[21] D. Dittrich and E. Kenneally, “The Menlo Report: Ethical
principles guiding information and communication tech-
nology research,” US Department of Homeland Security,
2012.

[22] C. Partridge and M. Allman, “Addressing Ethical Con-
siderations in Network Measurement Papers,” Communi-
cations of the ACM, 2016.
TLS

[23] “Active

Fingerprinting: Additional
[Online]. Available: https://active-

Stack

Material”,” 2022.
tls-ﬁngerprinting.github.io/

[24] IANA, “Transport Layer Security (TLS) Parameters,”
[Online]. Avail-
https://www.iana.org/assignments/tls-parameters/

accessed March

2021.

1,

last
able:
tls-parameters.xhtml
“Top

[25] Alexa,
2022.
1.amazonaws.com/alexa-static/top-1m.csv.zip

28 Feb.
last
[Online]. Available: http://s3.dualstack.us-east-

1M sites,”

accessed

[26] Majestic, “The Majestic Million,” last accessed 28 Feb.
2022. [Online]. Available: https://majestic.com/reports/
majestic-million/

[27] D. R. L. Brown, “SEC 2: Recommended Elliptic
Curve Domain Parameters,” 2010. [Online]. Available:
http://www.secg.org/sec2-v2.pdf

[28] Q. Scheitle, O. Hohlfeld, J. Gamba, J. Jelten, T. Zimmer-
mann, S. D. Strowes, and N. Vallina-Rodriguez, “A Long
Way to the Top: Signiﬁcance, Structure, and Stability
of Internet Top Lists,” in Proc. ACM Int. Measurement
Conference (IMC), 2018.

[29] abuse.ch, “SSL Certiﬁcate Blacklist,” last accessed Feb.
28, 2022. [Online]. Available: https://sslbl.abuse.ch/
[30] ——, “Feodo Tracker,” last accessed Feb. 28, 2022.
[Online]. Available: https://feodotracker.abuse.ch/
[31] O. Hohlfeld, J. R¨uth, K. Wolsing, and T. Zimmermann,
“Characterizing a Meta-CDN,” in Proc. Passive and
Active Measurement (PAM), 2018.

[32] E. Nygren, R. K. Sitaraman, and J. Sun, “The Akamai
Network: A Platform for High-Performance Internet Ap-
plications,” ACM SIGOPS Oper. Syst. Rev., 2010.

