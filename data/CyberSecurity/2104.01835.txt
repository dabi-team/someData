1
2
0
2

y
a
M
8

]

R
C
.
s
c
[

2
v
5
3
8
1
0
.
4
0
1
2
:
v
i
X
r
a

Advances In Malware Detection-An Overview

Heenaa,b,c , B. M. Mehtrea,d

aCenter of excellence in cyber security, Institute for Development and Research in Banking Technology (IDRBT),
Hyderabad, India
bSchool of Computer Science and Information Sciences (SCIS), University of Hyderabad, Hyderabad, India
c heenarao014@gmail.com
d bmmehtre@idrbt.ac.in

Abstract

1 Introduction

Malware has become a widely used means in cyber
attacks in recent decades because of various new ob-
In order to
fuscation techniques used by malwares.
protect the systems, data and information, detection of
malware is needed as early as possible. There are vari-
ous studies on malware detection techniques that have
been done but there is no method which can detect
the malware completely and make malware detection
problematic. Static Malware analysis is very effective
for known malwares but it does not work for zero day
malware which leads to the need of dynamic malware
detection and the behaviour based malware detection
is comparatively good among all detection techniques
like signature based, deep learning based, mobile/IOT
and cloud based detection but still it is not able to de-
tect all zero day malware which shows the malware
detection is very challenging task and need more tech-
niques for malware detection. This paper describes a
literature review of various methods of malware de-
tection. A short description of each method is pro-
vided and discusses various studies already done in the
advanced malware detection ﬁeld and their compari-
son based on the detection method used, accuracy and
other parameters. Apart from this we will discuss var-
ious malware detection tools, dataset and their sources
which can be used in further study. This paper gives
you the detailed knowledge of advanced malwares, its
detection methods, how you can protect your devices
and data from malware attacks and it gives the com-
parison of different studies on malware detection.

Keywords- Cyber Security, Malware Detection ap-

proaches, Malware Classiﬁcation, Malware features.

Technology nowadays has become so advanced, ev-
erything is adapting the digital over the manual way of
working. Technology has its pros and cons, if it makes
life easier then at the same time it invites the cyber at-
tacks, loss of data, giving access to your personal life
to someone who can misuse it. So the security of our
devices is very important in today’s cyber world. The
internet usage is increasing day by day. One draw-
back of the widespread use of the internet is that many
computer systems are vulnerable to attacks and get in-
fected with malwares. There are different names for
malware for example malicious code, malicious pro-
gram or malicious executable. Malware is malicious
software which is used with the intention of breach-
ing a computer system’s security policy with respect to
conﬁdentiality, integrity and availability of data[33]. It
can change and remove your system, data without your
knowledge to harm the system. According to multiple
studies the complete 100% malware detection problem
is NP complete problem [39][42], but in every study
the researchers always try to get maximum accuracy
by using different methods.

1.1 Types of Malware

Figure 1 shows the different types of malware .

1.1.1 Virus

Viruses attach their malicious code to clean code and
wait for an unsuspecting user or an automated pro-
cess to execute them. Like a biological virus, they can
spread quickly and widely, causing damage to the core

1

 
 
 
 
 
 
1.1.6 Adware

Adware is malware that forces your browser to redirect
to web advertisements, which often themselves seek to
download further, even more malicious software[34].

1.1.7 Rootkit

Rootkit is, a program or, more often, a collection of
software tools that gives a threat actor remote access to
and control over a computer or other system. It gets its
name because it’s a kit of tools that (generally illicitly)
gain root access (administrator-level control, in Unix
terms) over the target system, and use that power to
hide their presence[43].

Figure 1: Types Of Malware

functionality of systems, corrupting ﬁles and locking
users out of their computers. They usually hide within
an executable ﬁle.[34].

1.1.2 Worm

1.1.8 Cryptojacking

Worms get their name from the way they infect sys-
tems. Starting from one infected machine, they weave
their way through the network, connecting to consecu-
tive machines in order to continue the spread of infec-
tion. This type of malware can infect entire networks
of devices very quickly[34].

1.1.3 Trojans

This type of malware hides within or disguises itself
as legitimate software. Acting discreetly, it will breach
security by creating backdoors that give other malware
variants easy access[34].

1.1.4 Spyware

It Hides in the background on a computer and this type
of malware will collect information without the user
knowing, such as credit card details, passwords and
other sensitive information.
Spyware is software that is installed on your computer
either directly or inadvertently. A Trojan horse pro-
gram is similar to spyware except that it is packaged
as another program[34].

Cryptojacking is the unauthorized use of someone
else’s computer to mine cryptocurrency.
Cryptojacking is another way attackers can force you
to supply them with Bitcoin, only it works without you
necessarily knowing. The crypto mining malware in-
fects your computer and uses your CPU cycles to mine
Bitcoin for your attacker’s proﬁt. The mining software
may run in the background on your operating system
or even as JavaScript in a browser window[43].

1.1.9 Malvertising

Malvertising is the use of legitimate ads or ad net-
works to covertly deliver malware to unsuspecting
user’s computers. For example, a cybercriminal might
pay to place an ad on a legitimate website. When a
user clicks on the ad, code in the ad either redirects
them to a malicious website or installs malware on
their computer. In some cases, the malware embed-
ded in an ad might execute automatically without any
action from the user, a technique referred to as a “drive
by download”[43].

1.1.10 Fileless

1.1.5 Ransomware

Also known as scareware, ransomware comes with a
heavy price. They are able to lockdown networks and
lock out users until a ransom is paid, ransomware has
targeted some of the biggest organizations in the world
today with expensive results[43].

Fileless malware attacks do not download malicious
ﬁles or write any content to the disk in order to com-
promise the systems. The attacker exploits merely
the vulnerable application to inject malicious code di-
rectly into the main memory. The attacker can also
leverage the trusted and widely used applications, i.e.,

2

Microsoft ofﬁce or administration tools native to Win-
dows OS like PowerShell and WMI to run scripts and
load malicious code directly into volatile memory[11].

1.1.11 Stealth Malware

A stealth virus is a hidden computer virus that at-
tacks operating system processes and averts typical
anti-virus or anti-malware scans. Stealth viruses hide
in ﬁles, partitions and boot sectors and are adept at de-
liberately avoiding detection. Stealth malware are of
different types based on what they are hiding. Stealth
malware uses the hooking technique to divert the orig-
inal system call to malware. There are mainly 4 types
of stealth malware rootkits, code mutation, anti em-
ulation, targeting mechanism[30]. Rootkit can use
user mode hooking, kernel mode hooking or hybrid
by combining both to inject malicious code[41]. Code
mutation is malware changing its code to hide from
antivirus using mutation engines but it can be detected
via emulation. The other type of stealth malwares
anti-emulation behaves differently while running in an
emulated environment. They sense the environment
and change the behavior according to the environment.
The targeted mechanism of stealth malware runs and
spreads only on the chosen systems. There are differ-
ent countermeasures for component based and pattern
based stealth malware. To detect component based
stealth malware we can use the technique of detecting
hooks using signature and heuristic methods which re-
sult in high false positive rate or Cross-View Detection
and Speciﬁcation Based Methods in which the output
of API calls are compared with low-level calls that are
designed to do the same thing.The other countermea-
sure is using hardware solution where a clean machine
can be use to monitor another machine for the pres-
ence of rootkits/stealth malware. Virtualization tech-
niques are also able to detect stealth malware but these
are also vulnerable to anti-mutation malware. For de-
tecting pattern based stealth malware signature based,
behaviour, heuristic and model based techniques can
be used. There are multiple studies on stealth malware
detection but no one gives the good result and need to
ﬁnd more good methods and studies[30][41][44][45].

Some strains are delivered over email via a link or exe-
cutable ﬁle. Others are delivered via instant messaging
or social media. Even mobile phones are vulnerable to
attack. It is essential that organizations are aware of all
vulnerabilities so they can lay down an effective line of
defense[22].

1.2.1 Repackaging

Repackaging includes the disassembling of the popu-
lar benign applications, then appending the malicious
content and ﬁnally reassembling and distributing them
on other less monitored third party markets. This is
done by reverse-engineering tools.

1.2.2 Drive By Download

It Occurs when a user visits a website that contains
malicious content and downloads malware into the de-
vice.

1.2.3 Dynamic Payloads

Uses dynamic payload to download an embedded en-
crypted source in an application. After installation, the
application decrypts the encrypted malicious payload
and executes the malicious code.

1.2.4 Stealth Malware Technique

Stealth Malware Technique refers to an exploit of
hardware vulnerabilities to obfuscate the malicious
code to easily bypass the anti-malware.

1.3 Malware Evasion Techniques

1.3.1 Anti-security technique

These techniques are used to avoid detection by secu-
rity devices and programs as anti-malwares, malwares,
ﬁrewalls, and any other tools that protect the environ-
ment.

1.2 Malware Spreading Techniques

1.3.1.1 Fragmentation

Each type of malware has its own unique way of caus-
ing havoc, and most rely on user action of some kind.

The malware splits into several components that only
execute when it is reassembled.

3

1.3.2 Anti-sandbox technique

Anti-sandbox technique is used to detect automatic
analysis and to avoid reports on the behavior of mal-
ware. This can be done by detecting registry keys, ﬁles
or processes related to virtual environments environ-
ments.

1.3.2.1 Stalling Delays

The malware simply does nothing for an extended pe-
riod. Typically, 10 minutes is sufﬁcient for most sand-
boxes[52] to timeout and assume the object is benign.

1.3.2.2 Suspended Activities

The malware postpones these malicious actions while
it is operating within a sandbox.
A) Injection or modiﬁcation of code within other ap-
plications.
B) Establish persistence and download additional
code.
C)Move laterally across the network.
D) Connect to its C&C servers.

1.3.2.3 Rootkits

The malware hides malicious code in the lower layers
of the operating system where conventional sandbox
technology can’t see it.

1.3.3 Anti-analyst techniques

In these techniques, a monitoring tool is used to avoid
reverse engineering. The tools might be process ex-
plorer or Wireshark to perform monitoring and to de-
tect malware analysts[43].

1.3.3.1 ROP Evasion

Return-Oriented Programming (ROP) The malware
injects functionality into another process without al-
tering the code of that process. This is achieved by
modifying the contents of the stack, which is the set of
memory addresses that tell the system which segment
of code to execute next.

1.3.3.2 User Action Required

The malware avoids doing anything malicious until a
user performs a speciﬁc action (e.g., a mouse click,

pressing a key, opening or closing a ﬁle, or exiting the
program).

Malware creators might use two or three of the
above techniques to make detection more difﬁ-
cult[43][44].
The rest of the paper is structured as follows. Sec-
tion(2) gives detailed view of the different type of mal-
ware detection Techniques, section(3) contain the de-
tails of tools for malware detection, section(4) is about
the datasets for malware detection, section(5) contain
the comparison of different malware detection studies,
section(6) has some challenges from previous studies,
section(7) contains the conclusion and the last sec-
tion(8) contains the References used in this paper.All
the tables used are at the end of paper.

2 Malware Detection

Malware detection has multiple stages, which work
together to detect or classify the malware. All
the previous study focuses on malware detection in
windows, smartphones and embedded systems(IOT)
mainly. The study on malware detection is increasing
in smartphones nowadays. The method for detection
of malware is changing day by day as new researches
come based on the increasing complexity of malware.
The main malware detection process remains mostly
same for all the studies as following[1]:
1) Malware analysis
2) Feature Extraction/selection
3)classiﬁcation/detection
There are mainly 2 types of malware analysis static
method and dynamic method which are mainly used
to analyse the malicious ﬁle based on various parame-
ters. Static Malware Analysis (SMA)[34] where only
basic analysis is done and malwares are detected with-
out executing them. The methods used for static analy-
sis are Basic Information Analysis, Structure Analysis,
and Control Flow Analysis etc. But malwares which
uses different measures of Polymorphism, Metamor-
phism, ShellCode etc. Can not be detected by static
analysis.Some of the tools[12] for static analysis are
in table 1. Dynamic Malware Analysis (DMA)[34] is
done at the time of program execution. This technique
is useful in analyzing the malwares which uses tech-
niques such as Polymorphism, Metamorphism, Shell
Code etc. But it is not useful in detecting Zero day

4

malwares. Some of the tools for dynamic analysis
are in table 1. Hybrid Analysis [34] is proposed to
overcome the limitations of static and dynamic analy-
sis techniques. It ﬁrstly analyses the signature spec-
iﬁcation of any malware code and then combines it
with the other behavioral parameters for enhance-
ment of complete malware analysis. Due to this ap-
proach hybrid analysis overcomes the limitations of
both static and dynamic analysis. For detecting the
malicious ﬁle for each technique we need some fea-
tures which will become the inputs to the detection
process. But a ﬁle contains a large number of fea-
tures and not all features are beneﬁcial for a particu-
lar detection/classiﬁcation algorithm and a large num-
ber of features can increase the execution time so we
need to extract the correct features based on require-
ment. Sometimes by just changing the feature selec-
tion criteria we can increase accuracy. Sefer Kurnaz
and Mokhalad Eesee Khudhur[18] used 4 data mining
classiﬁcation algorithms to classify the malware ﬁles.
They used SVM, Random Forest, KNN and Hoeffd-
ing Tree over the dataset[for win32] containing 12593
malicious and 2405 benign ﬁles and they have used
weka tool and three sets of features to pass to data
mining algorithms. According to them random for-
est gives the best results[accuracy 98%] to classify the
malicious ﬁles based on different parameters like TPR,
FPR, Accuracy, Recall, Precision and Receiver Oper-
ating characteristically graph. They claim that with the
same algorithm and dataset their system give better ac-
curacy than previous study by changing the feature se-
lection methods.They used three different sets of fea-
ture selection methods "Symmetrical Uncertainty At-
tributeEval", "Information Gain (IG)", and " Correla-
tion Attribute Eval ", as the best criterion utilized to
select best features and the accuracy by the same algo-
rithm increased.

2.1 Malware Detection techniques

In recent years the studies on malware detection has
increased. The most used detection techniques in past
are the signature based detection and the behaviour
based detection and some studies used them both in
combination as some feature taken from signatures
detection and some are from behaviour of applica-
tion which is under heuristic or hybrid detection. The
subsection(2.1.3) discuss heuristic approach in detail.
Nowday studies of malware detection focus mostly on

mobile devices as the smartphones are the most used
devices and most vulnerable. At the back all of the
studies used machine learning approaches[1]. But we
can classify them according to the platform and detec-
tion methodology in different form as deep learning
based detection (which is part of machine learning but
it mainly focus on neural networks, so we will discuss
them in details), cloud based (as the detection are done
somewhere at remote servers), IOT based(malware in
embedded systems) and many more as shown in ﬁg-
ure 2.

2.1.1 Signature-based detection

Nowadays pattern matching is the most common
method in malware detection, and signature based de-
tection is the most popular method in this area [35].
Signature is a unique feature for each ﬁle, some-
thing like a ﬁngerprint of an executable. Signature
based methods use the patterns extracted from vari-
ous malwares to identify them and are more efﬁcient
and faster than any other methods. These signatures
are often extracted with special sensitivity for being
unique, so those detection methods that use this sig-
nature have small error rates. Where this small error
rate is the main reason that most common commer-
cial antiviruses use this technique. These methods are
unable to detect unknown malware variants and also
require a high amount of manpower, time, and money
to extract unique signatures. These are the main disad-
vantages of these methods. Also, inability to confront
against the malwares that mutate their codes in each
infection such as polymorphic and metamorphic one is
another disadvantage. To tackle these challenges, re-
search societies propose completely new malware de-
tection families. It can not detect unknown and poly-
morphic malware variants.
Ömer ASLAN [29] has compared the Static Malware
Analysis Tools and Antivirus Scanners To Detect Mal-
ware and shows that it is difﬁcult to detect malware by
only using one static tool or a few tools. Using only
static analysis tools or antivirus software may not be
enough as well. To correctly mark a suspicious pro-
gram, it is recommended to use static tools with an-
tivirus scanners. For unknown malware, the perfor-
mance of the antivirus software declined sharply. The
detection rate declined from 79% to 56% and accu-
racy declined from 80% to 65%. These results show
that antivirus software cannot detect zero-day mal-

5

Figure 2: Malware detection Techniques

6

ware. Signature-based detection tools such as antivirus
scanners are fast and effective when detecting existing
malware, but it is almost impossible to detect unknown
malware. On the other hand, static detection tools are
more accurate when detecting more complex and zero-
day malware. However, static analysis tools cannot
detect a lot of new unknown malware too.

2.1.2 Behavior-based detection

Behavior based malware detection techniques observe
behavior of a program to conclude whether it is ma-
licious or not [35]. Since behavior based techniques
observe what an executable ﬁle does, they are not
susceptible to the shortcomings of signature-based
ones. Simply put, a behavior based detector concludes
whether a program is malicious by inspecting what it
does rather than what it says. In these methods, pro-
grams with the same behavior are collected. Thus, a
single behavior signature can identify various samples
of malware. These types of detection mechanisms help
in detecting malware that keep on generating new mu-
tants since they will always use the system resources
and services in the similar manner. A behavior-based
detector basically consists of the following compo-
nents[35]:

1. Data Collector: This component collects dy-
namic/static information about the executable.
2. Interpreter: This component converts raw infor-
mation collected by data collection modules into
intermediate representations.

3. Matcher: It is used to compare this representation

with the behavior signatures.

There’s a multitude of behaviors that point to poten-

tial danger. Here are some examples:

• Adding or modifying user accounts
• Dynamic code building to enhance evasion capa-

bilities

• Executing a dropped ﬁle
• Spawning Powershells
• Performing any actions that are highly abnormal

Disadvantage of Behaviour based detection:

• Non availability of promising false positive ra-

tion(FPR)

• High scanning time.
• Can not detect zero day malwares properly.

2.1.3 Heuristic Based Detection:

In heuristic method detectors use the features from
both signature and behaviour technique and use that
combined to detect the malware which changes de-
pending upon various things. It uses features like API
calls, CFG, opcode, n-gram, list of DLLs and other
hybrid features. At the back this technique can use
any machine learning algorithm to train and test the
model and classify or detect malware. Although it
has a high accuracy rate to detect zero-day malware
to a certain degree, it cannot detect complicated mal-
ware. To overcome the disadvantages of signature,
and behavioral-based malware detection approaches
Z. Bazrafshan[35] gives the survey on heuristic detec-
tion methods and machine learning algorithms used.
He gives detailed study of the features API Calls,
CFG, N-gram, Opcode and hybrid features. He used
a machine learning algorithm to generate a pattern
which was similar to signature. Based on the signa-
ture, new suspicious programs were marked malware
or benign.

• Any attempt to discover a sandbox environment
• Disabling anti-virus or other security controls
• Modifying the boot record or other initialization

ﬁles to alter boot-up

• Installing rootkits
• Registering for autostart
• Shutting down or disabling system services
• Downloading and installing unknown software
• Deleting, altering, or adding system ﬁles
• Modifying other executable programs
• Connecting with known malicious sites
• Encrypting ﬁles that are unrelated to the program

2.1.4 Deep learning Based Detection

Deep learning is part/subﬁeld of artiﬁcial neural net-
works(ANN) and able to learn without human super-
vision, drawing from data that is both unstructured
and unlabeled. This is mainly used to reduce features
in malware detection. Berman[14]gives the detailed
view of various neural networks used in malware de-
tection like deep belief network, Recurrent NN, Con-
volutional NN,Generative adversarial network, Recur-
sive NN and various open datasets with 2k to 4M ﬁles.
Alzaylaee[2] proposed DL-Droid an application using

7

dynamic analysis and stateful input generation in de-
tection of malware in android and compared the de-
tection performance and code coverage of the state-
ful input generation method with the commonly used
stateless approach using the deep learning system. The
DL-Droid gives 97.8% detection rate (with dynamic
features only) and 99.6% detection rate (with both dy-
namic and static features) respectively which outper-
forms traditional machine learning techniques. It runs
the applications on real mobile phones so that more
accuracy can be achieved.
It used the Dynalog dy-
namic analysis framework[31]. Zhongru Ren[10] pro-
posed End-to-end malware detection for android IoT
devices using deep learning. This methods resample
the raw bytecodes of the classes.dex ﬁles of Android
applications as input to deep learning models.Dataset
contains 8K benign applications and 8K malicious ap-
plications from play store[46] and virusshare[47]and
Prepare two models, ﬁrst model called DexCNN with
93.4% detection accuracy and the second model called
DexCRNN can achieve a detection accuracy of 95.8%.
Heba Ziad Alawneh[15] proposes a dynamic malware
detection approach for android applications. They use
data mining over process execution time and extract
process control block(PCB) information and apply a
combination of CNNs, LSTM, and DNNs on it to iden-
tify the malicious application.

2.1.5

IOT and Mobile based detection

Internet of Things (IoT) devices refers to Internet-
connected smart devices such as home appliances, net-
work cameras, and sensors. The IoT and mobile de-
vices are being used more than PCs. Since mobile and
IoT devices are becoming more popular among users
day by day, they are also becoming more favorite tar-
gets for attackers. Because of that the malware de-
tection schema landscape is changing from comput-
ers to IoT and mobile devices. Andrei Costin[19]
gives the analysis of all currently known IoT malware
families and uploaded this work as open-source mate-
rial[59][60]. Xu Jiang[5] proposed Android Malware
Detection Using Fine-Grained Features, which uses
the permission used by application as static feature
and evaluates 1700 benign applications and 1600 ma-
licious applications and achieves a TP rate of 94.5%.
Author claims FDP can detect more malware families
and only requires 15.205 s to analyze one application
on average. Moutaz[4] proposed a system for classify-

ing mobile applications using real-world datasets and
applied two feature selection methods, Chi - Square
and ANOVA with 10 supervised ML algorithms and
achieved 98.1%detection accuracy with a classiﬁca-
tion time of 1.22s on an average application. Limin
Shen[3] proposes an application behavior- detection
method based on multi feature and process algebra for
detecting privilege escalation attacks in Android appli-
cations. By analysis of the privilege escalation attack
model, ﬁve features are extracted. Attack model and
application behaviour is built using process algebra.
Dataﬂow path detection is conducted among the ap-
plications to determine those apps constituted a privi-
lege escalation attack and DroidBench benchmark test
is used to test the accuracy and effectiveness of the
proposed method.

2.1.6 Model Checking based detection

In this detection approach, malware behaviors are
manually extracted and behavior groups are coded us-
ing linear temporal logic (LTL) to display a speciﬁc
feature[1]. Program behaviors are created by looking
at the ﬂow relationship of one or more system calls
and deﬁne behaviors by using properties such as hid-
ing, spreading, and injecting. By comparing these be-
haviors, it is determined whether the program is mal-
ware or benign. Model checking-based detection can
detect some new malware to a certain degree, but can-
not detect all new generations of malware. This is a
very old Technique.Kinder et al. proposed a ﬂexible
method to detect malicious code patterns in executa-
bles by model checking [40]. They introduced the
speciﬁcation language CTPL (computation tree predi-
cate logic) which extends the well-known logic CTL
(computation tree logic), and describes an efﬁcient
model checking algorithm. According to the authors,
test results demonstrated that the proposed method can
detect many worm variants with a single speciﬁcation.
Proposed method has some limitations as, It Can only
detect worm variants, Some part of the process has to
be done manually, Performance of proposed method is
low. To get better results, CTPL can be extended to
detect other malware. In addition, more accurate data
integrity constructions and efﬁcient data structures can
be used to improve the method performance.

8

2.1.7 Cloud based detection

Cloud computing is a very growing technology and
now can be used in the malware detection ﬁeld by us-
ing security as a service. Users can upload any ﬁle
and get the result as it is malicious or not. Cloud has
capacity to store large dataset so it can enhance the de-
tection performance of any pc or mobile by security as
a service. Martignoni presented a framework that en-
hances the capabilities of existing dynamic behavior-
based detectors. The proposed framework enables so-
phisticated behavior based analysis of suspicious pro-
grams in multiple realistic and heterogeneous environ-
ments in the cloud [38]. The suggested schema forces
sample programs to execute in a distributed environ-
ment including security labs and potential victim ma-
chines. The evaluation results demonstrated that the
analysis of multiple execution traces of the same mal-
ware sample in multiple end-users’ environments can
improve the results of the analysis with very small
overhead. On the other hand, the suggested framework
raises the privacy and security issues, and is prone to
various forms of detection and evasion attacks. Solv-
ing security related issues and implementing a resis-
tant framework against evasion attacks will increase
the framework performance. Andrew McDole, Mah-
moud[13] analyzes and compares various Convolu-
tional Neural Networks (CNNs) for online detection of
malware in cloud IaaS. They analyzed seven different
convolutional neural network models and determined
which model is better suited for malware detection in
cloud IaaS. The analysis shows that the LeNet-5 model
is quick but gives less accuracy. This model gives
90% accuracy and can be used in situations where in-
correctness is not too costly but a quick prediction is
needed. Yanfang[36] presented a cloud-based schema
to improve malware detection results by combining
the ﬁle content and ﬁle relations and developed a ﬁle
verdict system. The system incorporated into the Co-
modo’s Anti-malware products, and empirical studies
were conducted on large daily datasets collected by
Comodo cloud security center. The authors claims, the
accuracy and efﬁciency of the Valkyrie system outper-
form other popular anti-malware software tools such
as Kaspersky AntiVirus and McAfee VirusScan, as
well as other alternative data mining based detection
systems.

Figure 3: Features and Machine Learning Algorithms
for Static Analysis.

Figure 4: Features and Machine Learning Algorithms
for Dynamic Analysis.

2.1.8 Machine Learning Algorithms

Most detection uses different types of machine learn-
ing algorithms for classiﬁcation and detection. Fig-
ures 3 ,4 shows the features and machine learning
algorithms for static and dynamic analysis. For the
malware detection we can use any features from ﬁg-
ures 3 ,4 based on the type of ﬁle, can apply any ma-
chine learning algorithm and choose the best algorithm
based upon accuracy, logloss or other performance
measure as discussed in upcoming section 5. For ex-
ample if we have an android(.apk) ﬁle and we want to
classify whether it is malicious or legitimate, we can
extract permission, api call, or system call feature and
can apply any classiﬁcation algorithm like SVM, Ran-
dom forest etc.

The following are the factors which can affect the

9

machine learning algorithm:

1. Dataset
2. Type of features
3. Feature-selection algorithm used to select

the

most prominent features

4. Classiﬁcation algorithm used to categorize apps

as malicious or clean

5. Classiﬁer’s parameter values(Hyperparameters)

3 Tools for Malware Detection

Table 1 shows some tools that are available for detec-
tion and analysis.

4 Datasets for Malware Detection

Some frequently used standard datasets and datset
repositories by researchers are listed in table 2.

• True positive(TP)
• False positive(FP)
• True negative(TN)
• False negative(FN)

6 Challenges

The Followings are some challenges in malware de-
tection.

1. A little information for classiﬁcation.
2. Comparing a few algorithms.
3. High scanning/detecting time.
4. High FP and FN.
5. Small Datasets.
6. Overﬁtting.
7. Can not detect zero day malwares properly.
8. Not detecting Hidden Malwares.
9. Analysis is done on Datasets instead of Real Time

monitoring.

5 Comparison of Malware Detec-

tion Techniques

7 Conclusion

The researchers used different algorithms for malware
detection. Most of the studies uses machine learning
techniques to identify the malware. Table 3 shows the
comparison of different studies in malware detection
with the malware detection methods used and the ac-
curacy of each studies. Tables 4 gives a good com-
parison of malware detection techniques, we have dis-
cussed in section 2.

5.1 Performance Measures

Some of the matrices for identifying how good the
classiﬁcation (performance measures) is are follow-
ing:

• Accuracy
• Precision
• Recall
• False positive ratio
• F1 score
• Area under curve(AUC)
• Log loss

These matrices can be derived from:

We have summarized 8 detection methods for mal-
ware, but no method is completely able to detect all
new generation malware. Only the behaviour based
and the model checking based detection can resist the
obfuscation. According to the discussion the deep
learning based and the cloud based also can detect the
malware very well but they are not able to detect all
types of malware completely. As a future work new
method and work are needed. This paper will help to
understand the techniques available for malware de-
tection till date and it can be used as a good reference
for the further studies.

8 References

1. Ö. A. Aslan and R. Samet, "A Comprehensive
Review on Malware Detection Approaches," in
IEEE Access, vol. 8, pp. 6249-6271, 2020, doi:
10.1109/ACCESS.2019.2963724.

2. Alzaylaee, Mohammed K., Suleiman Y. Yerima,
and Sakir Sezer. "DL-Droid: Deep learning based
android malware detection using real devices."
Computers & Security 89 (2020): 101663.

10

3. Limin Shen, Hui Li, Hongyi Wang, Yihuan
Wang, "Multifeature-Based Behavior of Privi-
lege Escalation Attack Detection Method for An-
droid Applications", Mobile Information Sys-
tems, vol. 2020, Article ID 3407437, 16 pages,
2020. https://doi.org/10.1155/2020/3407437
4. Alazab, Moutaz. "Automated Malware Detection
in Mobile App Stores Based on Robust Feature
Generation." Electronics 9.3 (2020): 435.

5. Xu Jiang, Baolei Mao,

Jun Guan, Xingli
Huang, "Android Malware Detection Using Fine-
Grained Features", Scientiﬁc Programming, vol.
2020, Article ID 5190138, 13 pages, 2020.
https://doi.org/10.1155/2020/5190138

6. Alazab, Moutaz, et al. "Intelligent mobile mal-
ware detection using permission requests and api
calls." Future Generation Computer Systems 107
(2020): 509-521.

7. Y. A. Ahmed, B. Koçer and B. A. S. Al-rimy,
"Automated Analysis Approach for the Detection
of High Survivable Ransomware," KSII Trans-
actions on Internet and Information Systems,
vol. 14, no. 5, pp. 2236-2257, 2020. DOI:
10.3837/tiis.2020.05.021

8. Ali, Abdullah; Eshete, Birhanu; (2020). Best-
Effort Adversarial Approximation of Black-
arXiv preprint
Box Malware Classiﬁers.
arXiv:2006.15725

9. Alper Egitmen,

Irfan Bulut, R. Can Ay-
gun, A. Bilge Gunduz, Omer Seyrekbasan, A.
Gokhan Yavuz, "Combat Mobile Evasive Mal-
ware via Skip-Gram-Based Malware Detection",
Security and Communication Networks, vol.
2020, Article ID 6726147, 10 pages, 2020.
https://doi.org/10.1155/2020/6726147

10. Ren, Zhongru & Wu, Haomin & Ning, Qian &
Hussain, Iftikhar & Chen, Bingcai. (2020). End-
to-end Malware Detection for Android IoT De-
vices Using Deep Learning. Ad Hoc Networks.
101. 102098. 10.1016/j.adhoc.2020.102098.
11. Sudhakar, Kumar, S. An emerging threat
a survey and research
(2020).

Fileless malware:
challenges.
https://doi.org/10.1186/s42400-019-0043-x

Cybersecur

3,

1

12. Talukder, Sajedul.

(2020). Tools and Tech-
for Malware Detection and Analy-

niques
sis.https://arxiv.org/abs/2002.06819

Cloud IaaS." arXiv preprint arXiv:2002.06383
(2020).

14. Berman, D.S.; Buczak, A.L.; Chavis, J.S.; Cor-
bett, C.L. A Survey of Deep Learning Methods
for Cyber Security. Information 2019, 10, 122.
15. Fei Xiao, Zhaowen Lin, Yi Sun, Yan Ma, "Mal-
ware Detection Based on Deep Learning of Be-
havior Graphs", Mathematical Problems in Engi-
neering, vol. 2019, Article ID 8195395, 10 pages,
2019. https://doi.org/10.1155/2019/8195395
16. lawneh, Heba & Umphress, David & Skjellum,
Anthony.
(2019). Android Malware Detection
Using Neural Networks & Process Control Block
Information.

static binary features,

17. Rahim Taheri, Meysam Ghahramani, Reza
Javidan, Mohammad Shojafar, Zahra Poora-
nian, Mauro Conti,Similarity-based Android
malware detection using Hamming distance
of
Future Genera-
tion Computer Systems, Volume 105, 2020,
https://doi.org/10.1016/j.future.2019.11.034
18. Kurnaz, S. and Mokhalad Eesee Khudhur. “Com-
parative and Analysis Study for Malicious Ex-
ecutable by Using Various Classiﬁcation Algo-
rithms.” (2018).

19. Costin, Andrei. “IoT Malware : Comprehensive
Survey , Analysis Framework and Case Studies.”
(2018).

20. S. Anderson and P. Roth,

for

open dataset
ware machine
https://arxiv.org/abs/1804.04637

“EMBER: An
training static PE mal-
2018

learning models,”

21. Pandey, Anjana.

A STUDY ON
(2018).
DIGITAL FORENSICS USING VARIOUS
ALGORITHMS FOR MALWARE DETEC-
of Advanced
TION.
Research in Computer Science.
85-89.
10.26483/ijarcs.v9i3.6084.

International

Journal

9.

22. Amro, Belal. (2017). Malware Detection Tech-
niques for Mobile Devices. International Journal
of Mobile Network Communications & Telemat-
ics. 7. 10.5121/ijmnct.2017.7601.

23. Nikola Milosevic a , Ali Dehghantanha b and
Kim-Kwang Raymond Choo, "Machine learning
aided Android malware classiﬁcation," Comput-
ers & Electrical Engineering, vol. 61, pp. 266-
274, 2017

13. McDole, Andrew, et al. "Analyzing CNN Based
Behavioural Malware Detection Techniques on

24. A. H. Lashkari, A. F. A. Kadir, H. Gonzalez, K.
F. Mbah, and A. A. Ghorbani, “Towards a net-

11

to

analysis

Inf Secure

work–based framework for Android malware de-
tection and characterization,” in Proc. 15th Annu.
Conf.Privacy,Secur. Trust (PST), Aug. 2017
25. Bat-Erdene M, Park H, Li H, Lee H, Choi
classify
for malware
16(3):227–248.

MS (2017) Entropy
unknown packing algorithms
detection.Int
J
https://doi.org/10.1007/s10207-016-0330-4
26. Narayanan A, Chandramohan M, Chen L,
Liu Y (2017) A multi-view context-aware ap-
proach to Android malware detection and ma-
licious code localization.
Empir Softw Eng.
https://doi.org/10.1007/s10664-017-9539-8
27. Alam S, Qu Z, Riley R, Chen Y, Rastogi
V (2017) DroidNative:
automating and opti-
mizing detection of Android native code mal-
Comput Secur 65:230–246.
ware variants.
https://doi.org/10.1016/j.cose.2016.11.011
28. Bhattacharya, Abhishek & Goswami, Radha.
(2016). DMDAM: Data Mining Based Detection
of Android Malware.10.1007/978-981-10-2035-
3\_20.

29. Aslan, Ömer.

(2017). Performance Compari-
son of Static Malware Analysis Tools Versus An-
tivirus Scanners To Detect Malware.

30. Ethan M. Rudd, Andras Rozsa, Manuel Gün-
ther, and Terrance E. Boult.A Survey of Stealth
Malware: Attacks, Mitigation Measures, and
Steps Toward Autonomous Open World Solu-
tions.https://arxiv.org/abs/1603.06028v2.

31. Alzaylaee, M.K., Yerima, S.Y., and Sezer, S.,
2016. Dynalog: an automated dynamic analy-
sis framework for characterizing android applica-
tions. In: 2016 International Conference On Cy-
ber Security And Protection Of Digital Services
(Cyber Security), pp. 1–8. doi: 10.1109/Cyber-
SecPODS.2016.7502337 .
32. S. Alam, R. Horspool,

and I.
Sogukpinar, “A framework for metamorphic mal-
ware analysis and real-time detection,” Comput.
Secur., vol. 48, pp. 212–233, Feb. 2015

I. Traore,

Survey, INTERNATIONAL JOURNAL OF EN-
GINEERING RESEARCH & TECHNOLOGY
(IJERT) Volume 02, Issue 12 (December 2013),

35. Z. Bazrafshan, H. Hashemi, S. M. H. Fard and A.
Hamzeh, "A survey on heuristic malware detec-
tion techniques," The 5th Conference on Informa-
tion and Knowledge Technology, Shiraz, 2013,
pp. 113-120, doi: 10.1109/IKT.2013.6620049
36. Y. Ye, T. Li, S. Zhu, W. Zhuang, E. Tas, U. Gupta,
and M. Abdulhayoglu, “Combining ﬁle content
and ﬁle relations for cloud based malware detec-
tion,” in Proc. 17th ACM SIGKDD Int. Conf.
Knowl. Discovery Data Mining (KDD), 2011
37. kdd(M. Tavallaee, “A detailed analysis of the
KDD CUP 99 data set,” in Proc.IEEE Symp.
Comput. Intell. Secur. Defense Appl., 2009, pp.
1–6.)

38. L. Martignoni, R. Paleari, and D. Bruschi, “A
framework for behavior based malware analysis
in the cloud,” in Proc. Int. Conf. Inf. Syst. Secur.
Berlin, Germany: Springer, 2009

39. Z. Zuo, Q. Zhu, and M. Zhou, “On the time com-
plexity of computer viruses,” IEEE Trans.
Inf.
Theory, vol. 51, no. 8, pp. 2962–2966,Aug. 2005
40. J. Kinder, S. Katzenbeisser, C. Schallhart, and
H. Veith, “Detecting malicious code by model
Int. Conf. Detection
checking,” in Proc.
Intrusions Malware, Vulnerability Assessment.
Berlin, Germany: Springer, 2005

41. Gergely

Erdelyi,
of

"Hide’n’Seek
malware”

stealth

Anatomy
https://www.blackhat.com/presentations/bh-
europe-04/bh-eu-04-erdelyi/bh-eu-04-erdelyi.pdf
42. D. Spinellis, “Reliable identiﬁcation of bounded-
length viruses is NP-complete,” IEEE Trans. Inf.
Theory, vol. 49, no. 1, pp. 280–284,Jan. 2003

43. https://www.csoonline.com/article/2615925/security-

your-quick-guide-to-malware-types.html
44. https://www.lastline.com/understanding-
advanced-threat-malware-detection

45. https://www.techopedia.com/deﬁnition/4130/stealth-

33. S. K. Pandey and B. M. Mehtre, "Performance
of malware detection tools: A comparison,"
2014 IEEE International Conference on Ad-
vanced Communications, Control and Computing
Technologies, Ramanathapuram, 2014, pp. 1811-
1817, doi: 10.1109/ICACCCT.2014.7019422.
34. Jyoti Landage, Prof. M. P. Wankhade, 2013,
Malware and Malware Detection Techniques : A

virus

46. https://play.google.com/
47. https://virusshare.com/
48. https://www.virustotal.com.
49. http://www.malgenomeproject.org/
50. https://www.comodo.com/home/internet-

security/updates/vdp/database.php
51. http://contagiodump.blogspot.com/

12

52. https://app.sndbox.com/
53. https://www.sec.cs.tu-bs.de/ danarp/drebin/
54. http://nlp.cs.aueb.gr/software_and_datasets/Enron-

Spam/index.html

55. https://spamassassin.apache.org/
56. http://arxiv.org/abs/1802.10135

57. https://kilthub.cmu.edu/articles/dataset/

Insider_Threat_Test_Dataset/12841247/1

58. https://androzoo.uni.lu/
59. http://ﬁrmware.re/malw
60. http://ﬁrmware.re/bh18us

13

Table 1: Tools for malware detection

Tool Type

Detection
Tools

Online
Scanner
and
Sandbox

Static
Analysis
Tools

Dynamic
Analysis
Tools

Tool Name
Analyse PE
CHKrootkit
MASTIFF
MultiScanner
PEV
Andro Total
APK Analyzer
Cuckoo sandbox
Deepviz
PEid

Resource Hacker

Dependency walker

PEView.

apktool

IDA PRO

Rogshot

Process Explorer.
Process monitor
Immunity debugger

ollyDbg

Description
Wrapper for a variety of tools for reporting on window PE ﬁles.
Linux rootkit detector.
Static analysis Framework.
Modular ﬁle scanner.
for analysis of suspicious binar
Online analysis of APKs against multiple mobile antivirus apps.
Dynamic analysis of APKs.
Open source sandbox and automated analysis system.
Multiformat ﬁle analyzer with machine learning classiﬁer.
Detects most common packers, crypters and compilers for PE ﬁles.
Used to add, modify or replace most resources within Windows binaries including
strings, images, dialogs, menus, VersionInfo and Manifest resources.
List the imported and exported functions of a PE ﬁle. It also displays a recursive
tree of all the dependencies of the executable ﬁle.
Provides a quick and easy way to view the structure and content of 32-bit PE and
COFF ﬁles.
Decompile the applications.
Disassembler
executable code.
Capture a snapshot of the system prior to executing malware and then immediately
afterwards.
Give real-time system information about the running process.
Realtime troubleshooting tool.
Write exploits, analyze malware, and reverse engineer binary ﬁles.
Traces registers, recognizes procedures, API calls, switches, tables, constants and
strings, as well as locates routines from object ﬁles and libraries.

to generates assembly language source code from machine-

Table 2: Datasets for malware detection

Sr.No.

Dataset

1.

2.
3.

4.

5.
6.
7.

8.

9.

10

11

12.

13.

14.

15.

Knowledge discovery and dissemination(KDD) 199 dataset[37]

Genome Project dataset[49]
Virusshare[46]

VirusTotal dataset[48]

Comodo dataset[50]
Contigeio dataset[51]
DREBIN dataset[54]

Microsoft dataset[56]

CERT insider threat dataset v6.2[5][57]

EnronSpam[55]

SpamAssassin[55]

LingSpam[14]

SNDBOX[53]

Ember[20]

Androzoo[58]

Description
Approximately 4,900,000 single connection vectors, each contains
41 features.
1,200 malware samples.
106,555 bytes different datasets for various malware families.
Provide 70 antivirus scanner and URL/Domain blacklisting ser-
vices. Need to upload ﬁles to check if it is malicious or not.
79666064 ﬁle till 2/12/20, Updates in every 2 days.
189 malware samples.
5,560 applications from 179 different malware families.
Dataset is almost half a terabyte, malware ﬁles representing a mix
of 9 different families.
Contain multiple dataset over 83 gb ﬁles.
30207 emails of which 16545 emails are labeled as ham and 13662
emails are labeled as spam.
6047 messages, with 31% spam ratio.
Open Source(for Email Spam Check) 2,893 spam and non-spam
messages.
Free open source (200 MB of ﬁles).
500MB, consisting of disassembly and byte- code of around 20K
malicious samples from nine families.(Open source).
Contains 13,996,153 different APKs, each of which has been anal-
ysed by tens of different AntiVirus products to know which appli-
cations are detected as Malware.

14

1.

2.

3.

4.

5.

6.

7.

8.

9.

10.

11.

12.

13.

14.

15.

16.

17.

18.

19.

20.

21.

S.No.

Name

Method

Table 3: Comparison of malware detection Studies

Static analysis tools vs antivirus scanner[29]

Signature based

Digital Forensic- comparing different algo-
rithm[21]

Machine Learning

DL-Droid Deep learning framework[2]

Deep Learning

End-to-end Md for android IOT[10] proposed 2
models

Deep Learning

Analyzing CNN Based Behavioural Malware De-
tection Techniques on Cloud IaaS[13]

Cloud based detection

Comparative and Analysis Study for Malicious
Executable by Using Various Classiﬁcation Algo-
rithms[18]

Machine Learning

Performance Measures
For static -max 68.2%
For antivirus scanner-max 58.9%
FPR- 0.417%
FNP - 0.716802%
GNB - 70.18%
DecisionTree-99.11%
R.Forest - 99.4929%
AdaBoost- 98.4534%
G.Boosting-98.801%
97.8% (with dynamic features only)
99.6% (with dynamic + static features)
DexCNN -93.4%
DexCRNN - 95.8%.
LeNet5 - 89.9%
ResNet50 - 90.7%
ResNet101 - 87.0%
ResNet152 - 88.7%
DenseNet121 - 92.1%
DenseNet169 - 91.9%
DenseNet201 - 91.5
SVM - 96.12%
KNN- 97.87%
Ho-effding Tree- 94.5%
Random forest-98.12%

ROC curve of 0.987
F Rate - 0.007
LGBM -0.88
Decision Tree - 0.85
Random Forest - 0.87
KNN - 0.91
RF - 95.64% on entire dataset, 95% on evasive
only samples.
Svm-81.94%
Decision Tree- 92.04%
Random Subspace - 94.86%
KNN - 94.48%
For test set containing only zero day without in-
cluding them in training set RF- 37.36%
Precision- 0.986
Recall - 0.992
F1-Score - 0.989
For all algorithm and datasets accuracy is greater
than 90% and and in some cases (i.e., considering
API features) are more than 99%.
detection rate (DR) - 93.57%
false positive rate - 2.7%

F-score - 95.1%

accuracy - 91.41%
false positive - 0.085
Accuracy of - 95.35%
precision - 94.13%

A framework for metamorphic malware analysis
and real-time detection[32]

ACFG (Annotated Control Flow Graph) and
SWOD (Sliding Window of Difference and CFG)
- CFWeight

In range 94% - 99.6%

Android Malware Detection Using Fine-Grained
Features[5]

Machine learning

Automated Malware Detection in Mobile App
Stores Based on Robust Feature Generation[4]

IOT and Machine Learning

TP - 94.5%, 15.205 s time on an average applica-
tion.
Detection Accuracy - 98.1%
Classiﬁcation time- 1.22s on an average applica-
tion.

Intelligent mobile malware detection using per-
mission requests and API calls.[6]
Automated Analysis Approach for the Detection
of High Survivable Ransomware.[7]

Mobile based detection

F-measure - 94.31%

Machine Learning and Deep learning based

Black-Box Malware Classiﬁers [8]

Deep Learning based and machine learning

Combat Mobile Evasive Malware via Skip-Gram-
Based Malware Detection[9]

Deep Learning based and machine learning

Malware Detection Based on Deep Learning of
Behavior Graphs[16]

Deep Learning based

Similarity-based Android malware detection us-
ing Hamming distance of static binary fea-
tures[17]
DroidNative: Automating and optimizing detec-
tion of Android native code malware variants[27]
Machine learning aided malware classiﬁcation of
Android applications [23]
Network-Based Framework for Android Malware
Detection [24]
Entropy analysis to classify unknown packing al-
gorithms for malware detection[25]
A Multi-view Context-aware Approach to An-
droid Malware Detection and Malicious Code Lo-
calization[26]

DMDAM: Data Mining Based Detection of An-
droid Malware[28]

Deep Learning based

Mobile based

Mobile based

Mobile based

Machine Learning based

Mobile based and machine based

average recall - 94%

Mobile and machine learning based

TPR rate - 96.70% ,
Accuracy is up to 77.13%,
Highest F1 score is 0.8583.

15

Table 4: Comparision of Malware Detection Techniques

Malware Detection Technique

Signature Based
Behavior Based
Heuristic Based
Model Checking Based
Deep Learning Based
Cloud Based
Mobile Based Detection
IOT Based Detection

Detect
Unknown
Malware
×
√
√
√
√
√
√
√

Resistant to
Obfucation

×
√

×
√

×
×
×
×

Well-
Known
Approach
√
√
√
√

×
×
×
×

New Ap-
proach

×
×
×
×
√
√
√
√

16

