6
1
0
2

l
u
J

0
2

]

R
C
.
s
c
[

3
v
2
6
5
2
0
.
7
0
6
1
:
v
i
X
r
a

CPDY: Extending the Dolev-Yao Attacker with
Physical-Layer Interactions

Marco Rocchetto1(cid:63) and Nils Ole Tippenhauer2

1 SnT, University of Luxembourg
2 ISTD, Singapore University of Technology and Design

Abstract. We propose extensions to the Dolev-Yao attacker model to make it
suitable for arguments about security of Cyber-Physical Systems. The Dolev-Yao
attacker model uses a set of rules to deﬁne potential actions by an attacker with re-
spect to messages (i.e. information) exchanged between parties during a protocol
execution. As the traditional Dolev-Yao model considers only information (ex-
changed over a channel controlled by the attacker), the model cannot directly be
used to argue about the security of cyber-physical systems where physical-layer
interactions are possible. Our Dolev-Yao extension, called cyber-physical Dolev-
Yao (CPDY) attacker model, allows additional orthogonal interaction channels
between the parties. In particular, such orthogonal channels can be used to model
physical-layer mechanical, chemical, or electrical interactions between compo-
nents. In addition, we discuss the inclusion of physical properties such as location
or distance in the rule set. We present an example set of additional rules for the
Dolev-Yao attacker, using those we are able to formally discover physical attacks
that previously could only be found by empirical methods or detailed physical
process models.

1

Introduction

In recent years, security of Cyber-Physical systems (CPS) has received increasing at-
tention by researchers from the domain of computer science, electrical engineering,
and control theory [20,29].We use the term CPS to refer to systems that consist of
networked embedded systems, which are used to sense, actuate, and control physical
processes. Examples for such CPS include industrial water treatment facilities, elec-
trical power plants, public transportation infrastructure, or even smart cars. All those
systems have seen a rapid increase in automation and connectivity, which threatens to
increase vulnerability to malicious attacks.

Security analysis of any system relies on well-deﬁned attacker and system mod-
els [16,3]. While the system model provides an appropriate abstraction of the system
under attack, the attacker model ideally fully deﬁnes the possible interactions between
the attacker and the attacked system. In particular, the model will also deﬁne constraints
for the attacker (e.g. ﬁnite computational resources, no access to shared keys).

(cid:63) The work was carried out while Marco was with iTrust at Singapore University of Technology

and Design

 
 
 
 
 
 
In contrast to the domain of information security, where the Dolev-Yao attacker
model [16] (DY) is widely used for protocol analysis, the state-of-the-art for CPS secu-
rity does not have a common terminology for attacker models. Even if the topic has been
broadly discussed in the CPS research community, e.g., in [12], only a small number
of tentative works (e.g., [35,18]) have addressed that problem. The DY model used by
the information security community represents a very strong attacker, who can access
and manipulate all network trafﬁc arbitrarily. One could directly translate this attacker
to CPS by allowing the attacker to intercept any communication in a real system (e.g.
local ﬁeldbus communication), or to be within physical proximity of all (unprotected)
devices. However, such an attacker would only be capable of ﬁnding attacks on the net-
work level of the CPS. Since the network trafﬁc of CPS does not contain information
about all interactions possible in a CPS, it is not sufﬁcient for comprehensive analysis.
As a result, there likely are (physical-layer) interactions between the attacker and the
system that cannot be captured by the DY paradigm.

In this paper, we investigate the application of the DY attacker model for security
analysis of CPS. We present a set of extensions to allow for a more general attacker
model for CPS, that we named CPDY (Cyber-Physical Dolev-Yao) [24].

We summarize our contributions as follows:

– We discuss the general limitations of the DY attacker model for analysis of CPS,

and physical layer interactions between the attacker and the attacked system.
– We propose a number of rule extensions to analyze CPS using the DY model.
– We implement these rule extensions in the ASLan++ [37] formal language, and

present use case examples.

Structure. In Section 2, we summarize the DY attacker model. We discuss the use of
the DY model in the context of CPS in Section 3, and show that the traditional attacker
and system model is only able to represent a subset of possible interactions. We propose
extensions to the DY attacker model in Section 4, and show our results on a real word
water treatment plant use case in Section 5. We summarize the related work in Section 6
and we conclude the paper in Section 7.

2 Background

2.1 Modeling Systems and Communications

Level of Modeling Detail. Formal languages, e.g. HLPSL [36] and ASLan++ [37],
permit a modeler to deﬁne not only the exchanged messages but also the behavior of
entities involved in the communication. Some of the security validation tools allow a
modeler to beneﬁt of some algebraic properties (e.g., [27,8]) but these are typically
represented symbolically by a set of constraints. Intuitively, a high level of details (e.g.,
a concrete highly detailed representation of the behavior of an agent) may result in
non-termination problems while performing the analysis. In addition, even if we could
afford such a level of details, it might not be useful to analyze security protocols against
security properties at that level of detail. Some of the most common attacks (such as
man-in-the-middle and replay attacks) that violate conﬁdentiality or authentication can
be found without the need of detailing the encryption scheme in the protocol.

(a)

(b)

Fig. 1: (a) Example CPS architecture. (b) Use case scenario of water tank with motor-
ized valve and pump controlled by a PLC. A level meter reports to the PLC. A manual
valve is placed between tank and pump.

Modeling Simpliﬁcations. In the so called perfect cryptography assumption, the secu-
rity encryption scheme is suppose to be “perfect”, without any exploitable ﬂaw, and so
the only way for the attacker to decrypt a message is by using the proper key. That as-
sumption is widely accepted in the security protocol community, and most of the formal
reasoning tools for the analysis of security protocols abstract away the mathematical and
implementation details of the encryption scheme [32,8,4,25].
Modeling Architectures. Following the same line of reasoning, when one considers
more complicated architecture representation, such as web applications or Service Ori-
ented Architecture (SOA), some of the components are commonly assumed to be “per-
fect”, in the same way as encryption schemes. Several examples are shown by the case
studies of the AVANTSSAR and SPaCIoS projects [3,34] where researchers have de-
veloped several abstract models of SOAs and web applications using the ASLan++
language, e.g, in [5]. In order to give some speciﬁc examples, databases in SQLi anal-
ysis in [10], CSRF token generation in [23] are assumed to be “perfect”. This is due to
the fact that (as the security of security protocols is not guaranteed only by encryption
schemes) the security of web applications is not guaranteed only by store procedures or
perfect random generation of token. Another example has been presented in [11], where
authors search for attacks in zero-knowledge proof systems abstracting away some of
the mathematical and implementation details of the zero-knowledge algorithms.

2.2 Cyber-Physical Systems

In this work, we use the term Cyber-Physical System (CPS) to refer to systems that
consist of networked embedded systems, which are used to sense, actuate, and control
physical processes. Examples for such CPS include industrial water treatment facilities,
electrical power plants, public transportation infrastructure, or even smart cars. All those
systems have seen a rapid increase in automation and connectivity, which threatens to
increase vulnerability to malicious attacks. While details on network topology, proto-
cols, and control differ between engineering domains, the fundamental architecture is
similar. We now explain that architecture using an industrial control system (ICS).

A modern industrial control system typically consists of several layers of networks.
An example industrial control network is illustrated in Fig. 1a. The physical process is

L1 NetworkHMISwitchHMISCADAHistorianPLC1Process 1HMISensor42.42Sensor42.42Sensor42.42Sensor42.42SensorPLC2Process 2PLC3Process 3ActuatorSensorActuatorSensorActuatorSensorPLCPLCPLCSensorSensor42.42TankMotorizedInﬂow valvePLCNetworkManual valvePumpHMISCADAM1 ∈ M
M1 ∈ DY

Gaxiom

M1 ∈ DY M2 ∈ DY
[M1, M2] ∈ DY

Gpair

M1 ∈ DY M2 ∈ DY
{M1}M2 ∈ DY

Gcrypt

M1 ∈ DY M2 ∈ DY
{|M1|}M2 ∈ DY

Gscrypt

[M1, M2] ∈ DY
Mi ∈ DY

Apairi

{|M1|}M2 ∈ DY M2 ∈ DY
M1 ∈ DY

Ascrypt

{M1}M2 ∈ DY

inv(M2) ∈ DY

M1 ∈ DY

Acrypt

{M1}inv(M2 ) ∈ DY M2 ∈ DY
M1 ∈ DY

A−1
crypt

Fig. 2: The system of rules of the Dolev-Yao attacker

measured by distributed sensors, and manipulated by actuators. These sensors and actu-
ators operate by receiving and sending analog signals. The analog signals are converted
into digital signals by Programmable Logic Controllers (PLCs). The digital signals are
then exchanged between PLCs and a central supervisory control system (SCADA) us-
ing industrial communication protocols (e.g. Modbus/TCP).

Modeling CPS. CPS can also be seen as a set of communicating agents [12] (often with
one node acting as a controller), and related work focuses on the representation of the
concrete behavior of the CPS [31,2,1,33]. This is believed to help the discovery the new
attacks speciﬁc for CPS, e.g. resonance attacks [12]. However, that can lead researchers
to over-complicating the system models even when searching for security attacks.

2.3 The Dolev-Yao Model

The DY attacker model [16] is a de-facto standard for the formal analysis of information
security. The usage of such an attacker model is usually employed for the identiﬁcation
of cyber-related attacks, e.g, Web applications and Service-Oriented architectures as
proposed in [3,23]. Attacker models `a la DY have been proposed [30,26] to reason on
CPS. In this work, we consider the standard DY [16] model of an active attacker who
controls the network but cannot break cryptography.

The attacker can intercept messages and analyze them if he possesses the corre-
sponding keys for decryption, and he can generate messages from his knowledge and
send them under any agent name. As usual, for a set M of messages, we deﬁne DY (for
“Dolev-Yao” knowledge) to be the smallest set closed under the generation (G) and
analysis (A) rules of the system given in Fig. 2. The G rules express that the attacker
can compose messages from known messages using pairing, asymmetric and symmetric
encryption. The A rules describe how the attacker can decompose messages.

The algebra of messages, which tells us how messages are constructed, is deﬁned
following [8], in the standard way. In this paper, we consider the following operations:

– {M1}M2 represents the asymmetric encryption of M1 with public key M2;
– {M1}inv(M2) represents the asymmetric encryption of M1 with private key inv(M2)

(the mapping inv(·) is discussed below);

– {|M1|}M2 represents the symmetric encryption of M1 with symmetric key M2;
– [M1, M2] represents the concatenation of M1 and M2.
– inv(M) gives the private key that corresponds to public key M

3 The Dolev-Yao Model is not Enough

Although the classic DY model can be applied to CPS security analysis straight away,
we argue that it will not be able to detect a large set of attacks possible in that context
(i.e. those that involve physical-layer interactions). To illustrate that argument, we now
provide three example scenarios. For the sake of simplicity, we start by presenting the
intuition behind the model and the goal. Further details on the ASLan++ prototype of
these scenarios along with our results are provided in Section 5 and [24].

3.1 Application of Dolev-Yao for CPS

We base our example on a minimal setup in a water treatment system (see Fig. 1b). In
particular, we use a subprocess of a real water treatment testbed depicted in Fig. 6 (the
SWaT testbed [1,33]). A similar scenario has been considered in [21,22]. The scenario
we considered contains ﬁve different components and a PLC:
1. A motorized inﬂow valve, initially open, let water ﬂows into a tank through a pipe
2. A tank is equipped with a sensor which checks the level of the water inside the tank
3. The sensor communicates its reading of the level of the water inside the tank to a

PLC

4. When the level of the water reaches a certain upper threshold, the PLC communi-

cates to the motorized inﬂow valve to close and to the pump to start

5. Symmetrically, when the water reaches a certain lower threshold, the PLC commu-

nicates to the inﬂow valve to open and to the pump to stop

6. A manual valve (placed between the tank and the pump) can be manually opened/-
closed, e.g., to prevent the water to ﬂow into the rest of the testbed in case the water
in the tank is contaminated or the pump broken

7. A central SCADA control that communicates with the PLC over the network
In the following, we assume that the attacker’s goal is to cause a water spillage (or
burst) in the tank component. The abstract messages exchanged over the network are
quite simple (see Fig. 3a). The valve controls the inﬂow of the water to the tank. The
sensor of the tank reports the current ﬁll state to the PLC as analog signals. The PLC
converts the analog signals into digital messages (value in the picture) that it sends to
the SCADA. If the water level in the tank has crossed certain high/low thresholds, the
SCADA sends a close/open message to the inﬂow valve and on/off to the pump. We
note that in this setting, there is no distinction between the tank and the sensor. Nothing
prevents us in considering them as two separate entities, but this would complicate the
model without beneﬁt in terms of attacks.

We analyzed the ASLan++ model using the AVANTSSAR platform, and found a
simple attack (as expected). In that attack, the attacker drops the messages from the PLC
to the SCADA. As result, the tank will overﬂow and the attacker will achieve his goal.
Even if the attack is simple, it shows that one can easily use state-of-the-art veriﬁcation
tools and the standard DY attacker model to search for attacks on a CPS model. This
basic example demonstrates that it is possible to reason on similar scenarios without
considering the (ﬂuid) mechanics of the process under attack. In particular, even in
such a simple example the equations describing the ﬂow of the water are far from trivial
and are usually considered when reasoning on similar scenarios. In the remainder of

(a)

(b)

Fig. 3: (a) Physical interaction (dashed line) and digital interaction (solid line) between
components in the ﬁrst example. (b) Example interactions, with direct (out-of-band)
communication between PLC, sensor, and actuator.

this section, we consider a modiﬁcation of this scenario in which the network-only DY
attacker model cannot ﬁnd the attack.

3.2 Limitations of Dolev-Yao for CPS

The previous examples demonstrates that the DY attacker model can be used to reason
on network-related security aspects of CPS. We now consider a scenario in which the
agents also interact through physical-layer interactions. In particular, in real-world CPS
the communication between PLCs, sensors and actuators usually uses analog signals.
When a distributed control scheme is used, the logic of the system is usually integrated
directly into the PLC, instead of relying on the SCADA component. In addition, com-
ponents can interact though the physical layer directly (e.g. by exchanging water from
a pipe into a tank). To reﬂect such a setting, we modify the system in the previous
example as follows: the inﬂow valve and the pump are now directly controlled by the
PLC based on analog signals from the sensor. In other words, the valve and the pump
operate without interrogating the SCADA. As a result, the messages on the network
and SCADA are not directly involved in the operations of the valve and the pump. We
can consider the setting as one in which there is just one entity whose internal behav-
ior encapsulate the behaviors of the valves, sensor, tank, pump and PLC (see Fig. 3b).
Since there is no communication over the network related to the opening/closing of the
valve or to the level of the water, there is no way for the DY attacker model to achieve
the goal, i.e., overﬂowing the tank. We conﬁrmed this intuition with a related model in
ASLan++ and evaluation in the AVANTSSAR platform. No successful attack is found.
Nevertheless, it could be expected that attacks by a physically present attacker are
possible in the given setting, in particular if a physically present attacker can manually
open or close the valves. Our ASLan++ model does not ﬁnd such an attack because po-
tential malicious physical-layer interactions with the system have not been considered.

3.3 Proposed Approach

We claim that, (so far) the related work generally models the operation of a CPS as a set
of messages exchanged between entities over a network (see Section 6). For that reason,
we consider prior work as limited modiﬁcation of the DY attacker model. However,
consideration of the physical actions is often crucial to ﬁnd real-world attacks on CPS

tPLCtSCADAtSensorﬂowvalueactiontPumpsignalsignalactionsignaltValvevaluetPLCtSCADAtSensorﬂowtValvesignalsignalsignaltPump(e.g. attacks such as Stuxnet [38]). For that reason, we propose an extension of the DY
attacker model with new physical interaction rules to support reasoning on the physical-
layer security of CPS. We will introduce those rules in Section 4. Before that, we brieﬂy
discuss two aspects of our proposed approach in more detail: abstraction of physical
process behavior, and whether veriﬁcation tools or model checkers are better suited.

Abstraction of Physical Processes. In our proposed approach, physical layer interac-
tions will be modeled as abstract interactions between components. In particular, we do
not model all the details of the behavior of an agent for CPS. We believe that it will be
very challenging for a security veriﬁcation tool (or a model checker in general) to con-
sider all details of the behavior of an agent for CPS. For example, differential equations
that model the behavior of an ultra-ﬁltration process will be difﬁcult to consider by the
DY model or veriﬁcation tool.

In this work, we abstract away all these details, similar to the way that perfect cryp-
tography is used for security protocols analysis where we abstract from cryptographic
primitives (see [15] for more details). In security protocols, that abstraction is justiﬁed
by the observation that most of the attacks rely on the logical aspects of the protocol.
Encryption schemes are treated as black box and the attacker cannot learn any useful
information from an encrypted message without the proper decryption key. As such, a
generic predicate over a term deﬁnes the encryption as {M1}M2 in Section 2. In CPS,
we assume that all the physical processes can be abstractly represented.

Veriﬁcation Tools vs. Model Checkers. In particular, we propose to use a DY veriﬁ-
cation tool, and not a general model checker. Our argument for that is the following: in
order to model a CPS to formally validate it against an attacker model, CPS (or sub-
parts) are often modeled with languages supported by tools which do not implement
the DY attacker model, e.g. NuSMV, SPIN [14]. However, it has been shown [7] that
an ad-hoc implementation of the DY is more advanced in terms of efﬁciency and cov-
erage than using a “general purpose” model checker with the DY model-hard coded in
the speciﬁcation. That is particularly evident when considering the numerous amount
of veriﬁcation tools developed speciﬁcally to reason on the security aspects of various
systems, e.g., [9,8,4,32,17].

4 Physical-Layer Interactions for the Dolev-Yao Attacker

In this section, we present our proposed extensions of the DY model in order to make
it suitable to argue about security of Cyber-Physical Systems. In particular, we discuss
the introduction of additional rules for the DY attacker model to describe physical-layer
interactions.

4.1 New Rules for the DY Attacker and System

New Rules for the System. The new rules for our system model aim to capture the di-
verse physical-layer interactions between components in the system under attack. The
interactions are usually constrained by the laws of physics, which will never be vio-
lated. A very exhaustive coverage of all kinds of physical layer interactions and laws

Tank(level, value) ∈ Sys Pump(status, off )

InﬂwoValve(status, open) ∈ Sys

Tank(level, value(cid:48)) ∈ Sys ∧ (value(cid:48) > value)

raise1(Tank)

Tank(level, value) ∈ Sys ManualValve(status, close) ∈ Sys

InﬂowValve(status, open) ∈ Sys

Tank(level, value(cid:48)) ∈ Sys ∧ (value(cid:48) > value)

raise2(Tank)

C(status, damaged) ∈ Sys C(contains, water) ∈ Sys C(level, value) ∈ Sys
C(level, value(cid:48)) ∈ Sys ∧ (value(cid:48) < value)

damaged(C)

C(operate, manual) ∈ Sys C(status, open) ∨ C(status, close) ∈ Sys

C(status, close) ∈ Sys

C(operate, manual) ∈ Sys C(status, open) ∨ C(status, close) ∈ Sys

C(status, open) ∈ Sys

close(C)

open(C)

Fig. 4: Examples of rules that represent physical-layer interactions in the system

DYProp(distance, physical access) DYProp(tool, damage)

C(status, damaged) ∈ Sys

damageDY

DYProp(distance, physical access) C(operate, manual) ∈ Sys C(status, open) ∈ Sys

C(status, close) ∈ Sys

DYProp(distance, physical access) C(operate, manual) ∈ Sys C(status, close) ∈ Sys

C(status, open) ∈ Sys

manualCloseDY

manualOpenDY

Fig. 5: Examples of rules that represent physical-layer capabilities of attacker

of physics would potentially result into a large set of additional rules (potentially au-
tomatically extracted from a system speciﬁcation, e.g., [28]). In the following, we will
consider only few additional rules to model speciﬁc interactions. In Fig. 4, we present
rules that represent laws of physics related to our example (Fig. 1b). With a slightly
abuse of notation, each rule represents a modiﬁcation of the system status Sys from pre-
conditions (top) to postconditions (bottom). Sys is a set collecting all the physical prop-
erties of the systems (e.g., water level, temperature, pressure) for each component in the
system (e.g., tank). The properties are expressed with the predicate C(property, value)
(C(·) as short form of Component(·)). In Fig. 4, raise1(Tank) and raise2(Tank) relates
a system conﬁguration with its physical effects, i.e., the increase of the water level in
the tank. damaged(C) expresses the effect of the burst of the tank, and close(C) and
open(C) deﬁnes the effect of physical interactions with a component (e.g., a valve)
which can be manually operated to change its status.

Rules for DY Attacker. The new rules for our attacker model aim to capture the diverse
physical-layer interactions between the attacker and the system (see Fig. 5). Similar to
the system speciﬁcation rules, the interactions between attacker and system are usually
constrained by the laws of physics—even a strong attacker would not be able to create
or consume arbitrary amounts of energy, move at inﬁnite speed, or similar.

4.2

Implementation of New Rules for DY

We base our attacker model on a review of related work that aims to proﬁle attackers
for CPS [12,13,33,18]. We found that they all share the idea of deﬁning the attacker
by means of a set of dimensions. These dimensions can be seen as properties of the
attacker, e.g., distance with respect to the CPS, knowledge of the physics of the com-
ponents of the system, tools (software and hardware) available to the attacker, ﬁnancial
support, and preference to stay hidden. We can use dimensions together with physical
properties of the system to deﬁne new rules for the attacker as follows.

attacker property

system property

result of action

action

where one or more attacker’s properties along with the knowledge of one or more sys-
tem property (that might be related to the knowledge of some physical laws connected
to the system property) are the precondition to perform an action action which results
are expressed as postconditions. In other words, an attacker is a malicious agent that
can take advantage from the improper use of some device of the system.

In our ﬁrst example, we can add the damageDY in Fig. 5 which express that an
attacker who has physical access to the CPS could damage or manually operate a com-
ponent, for example, a tank. Other examples are rules expressing that if the attacker has
physical access to the CPS can (as we will discuss in Section 5.3) heat the tank and
increase its pressure. In Section 5, we will show how we can leverage those attacker
rules to ﬁnd new attacks on a CPS which involve physical-layer interactions.

4.3 DY Rule Extension Using Horn Clauses

In order to apply our idea to a concrete example, we require a veriﬁcation tool such that:
(i) allows modiﬁcation to the DY rules, and (ii) provides a language expressive enough
to model a CPS. It is not easy to ﬁnd a security veriﬁcation tool with such constraints
and, to the best of our knowledge, there is no tools in the literature.

In this work, we propose the following two workarounds that allow us to imple-
ment our additional rules even without a tool that satisﬁes the mentioned requirements:
(i) we have used Horn Clauses (HC) to add extra rules to the DY attacker model, and
(ii) we have used databases (shared memories) to store the state of the components the
system, e.g., the level of the water of a tank. Using both ideas, we require only a tool
that supports Horn Clauses and Shared Memories. We chose the ASLan++ speciﬁca-
tion language [37] which supports both HC and shared memories. Using ASLan++, we
have implemented several case studies and obtained preliminary results that support our
proposed approach.

5 Case Studies

In this section, we ﬁrst show that a DY veriﬁcation tool can be used to check security
goals in CPS models. We have used the ASLan++ speciﬁcation language [37] to deﬁne
our examples which are based on a process of the SWaT testbed [19] depicted in Fig. 6

Fig. 6: Process P1 (raw water treatment) – SWaT testbed

Table 1: Summary of the analysis on the use cases

attack found

timing

Network (Section 5.1) (cid:88)
Manual (Section 5.2)
Heating (Section 5.3)

DY CPDY analysis total
(cid:88) 220ms 1.7s
(cid:88) 8ms
1.3s
(cid:88) 4ms
1.0s

total includes time for translation, analysis and attack trace generation

(see Fig. 3a for the message sequence chart). We start by providing more details on the
example summarized in Section 3. In particular, we present a network-only modeling
of the CPS and potential attacks, which shows that the DY model can be used to ﬁnd
attacks similar to ones discussed in related work (e.g., man-in-the-middle attacks in
[2,33]). For that analysis, we abstract away the implementation details of the CPS and
detect the same (network related) security ﬂaw of most of the approaches we have found
in the literature. We then modify the speciﬁcation (as depicted in Fig. 3b) to show that
when some physical operations (which are the at very core of a CPS) are involved in
the process, the standard DY attacker model might not be able to ﬁnd all attacks. To
mitigate this, we modify the DY model to let him physically interact with the system
under certain constraints. This allows the attacker to detect new attacks which involves
physical interaction with the system. We show that almost all the attacks which relay
on attackers’ physical actions cannot be found. We propose a ﬁrst investigation on how
to extend the DY model in order to capture both cyber and physical attacks. Our results,
along with timing, are summarized in Table 1.

5.1 Network-Based Communication Use Case

This section brieﬂy summarizes an implementation of the scenario proposed in Sec-
tion 3.1. We focus on three aspects:

– The status of the system (e.g., the level of water and measurements of sensors)
– The behavior of each entity (i.e., tank, valves, pump, PLC and SCADA)
– The communication between various entities (analog and network channels)

In this example, the PLC converts the analog signals to digital messages and sends
them to the SCADA control. To be coherent with the example, we model an analog
channel (e.g., by using a database) between the inﬂow valve, the tank, the pump, and
the PLC. The PLC then translates and communicates the tank/valve/pump status over
a network channel with the SCADA. For the sake of readability, we assume the PLC
automatically converts and sends the tank/valve/pump status. As a result, the valve, the
tank, and the pump directly communicate with the SCADA over a network channel.
The full implementation is reported in [24].

System Status. CPS can be seen as communicating over two channels: one is the net-
work channel (maybe itself divided into several layers or regions) and the other is the
physical ﬂow of the events, e.g., electricity in power grids or water in water treatment or
distribution CPS. We believe that an understanding on how to model the physical ﬂow
of a CPS, integration of that with the network (in such a way that an attacker model can
concretely ﬁnd new attacks) is still not well deﬁned in the literature.

In this work, the status of the system is deﬁned by a database systemStatus, shared
between all the entities (but hidden to the DY attacker). The database is deﬁned as a set
of pairs (agent, status) that keeps track of the status of all entities of the speciﬁcation.

Inﬂow Valve/Pump. The valve/pump speciﬁcation describes a scenario where a SCADA
changes the status of the valve/pump, e.g., from open/on to close/off, by sending to the
valve a message through the PLC.

Manual Valve. The behavior of the manual valve is the same as the inﬂow valve. The
only difference is that the manual valve can only be manually operated (e.g, to change
its status from open to close), i.e., cannot be operated using network messages.

Tank. In the real testbed the PLC interrogates the sensor of the tank in order to obtain
the level of the water inside the tank. For simplicity, we do not distinguish between the
tank as a container and its sensors. We also assume that the sensor sends the sensed data
of the level of the water whenever the level is above or below a certain threshold. We
can obviously consider the more complicated and realistic tank speciﬁcation containing
a sensor that waits for the PLC to interrogate it. This complicates the analysis but the
performance of the validation phase does not change order of magnitude (there is a
variation of some milliseconds) and the result of the analysis remains the same. We
recall that messages are directly sent to the SCADA instead of PLC for readability.

The tank model checks for two, mutually exclusive, status of the tank.

– If the level of the water has reached an upper threshold overT, the inﬂow valve is
closed, the pump is on, and the manual valve is open, the systemStatus database is
updated as if the water level had lowered to a lower threshold underT. After the
status update, the tank communicates its new status underT to the SCADA.

– Symmetrically, if the level of the water has reached a threshold underT, the in-
ﬂow valve is open, and either the manual valve is closed or the pump is off, the
systemStatus database is updated as if the water level had reached the upper thresh-
old overT.

SCADA. As for the valve entity, we have deﬁned the behavior of the SCADA waiting for
incoming messages from the tank entity. When the tank communicates to the SCADA
that the water has reached the upper threshold overT, the SCADA closes the inﬂow
valve and turns on the pump. Symmetrically, when the tank reaches the lower threshold,
the SCADA opens the inﬂow valve and turns off the pump.

Initial Status of the System. The initial status of the speciﬁcation is deﬁned with the
tank empty (i.e., the level of the water is underT in the systemStatus database), the
inﬂow and the manual valve are open, and the pump is off.

Goal. The goal is to overﬂow the tank and in ASLan++ we can deﬁne our goal as the
following LTL (Linear Temporal Logic) formula.

(cid:3)(inﬂowValve(status, open) ∈ Sys ⇒
manualValve(status, open) ∈ Sys ∧ (tank(status, underT) ∈ Sys ∨ pump(status, on) ∈ Sys))

In the formula, we deﬁne that whenever the inﬂow valve is open, i.e. the systemStatus
database contains valve(status, open), then the manual valve is open, and either the tank
must be empty or the pump turned on. In other words, if we ﬁnd a conﬁguration of the
system such that the inﬂow valve is opened, the tank is full of water, and the pump is
off, then the tank is overﬂowing. The (cid:3) at the beginning of the goal states that the goal
must hold in every state of the system (i.e., LTL global operator).

Security Analysis. The AVANTSSAR platform ﬁnds a violation of the goal (i.e., a
states where the goal does not hold). The goal is violated because there is a state of
the system in which the tank has reached the overT but the valve is still open and the
pump is switched off. In order to achieve the goal, an attacker have to drop the packet,
communicating the overT status, sent from the tank to the SCADA.

5.2 Physics-Based Interaction Use Case

We now modify the scenario by removing the communication of the level of the water
between the PLC and the SCADA, i.e., between tank/valve/pump and SCADA in the
previous speciﬁcation. For that reason, we assume that the PLC automatically close
the inﬂow valve when the level of the water inside the tank reaches the threshold level
overT. The DY attacker cannot spoof or eavesdrop the communication between entities
anymore since there is no more network communication with the SCADA.

Security Analysis. Against the DY model, the AVANTSSAR platform does not report
any attack on the speciﬁcation with respect to the goal deﬁned in Section 5.1.This result
is straightforward since the attacker does not receives any message and there is no
interactions over network between various entities.

As we are considering a CPS, an attacker who could have physical access to the
system could most likely ﬁnd a number of ways to overﬂow the tank. Being in close
proximity of the CPS could give to the attacker an advantage with respect to a cyber-
attacker who can only access the system through the network. For example, an attacker

C(status, heating) ∈ Sys C(contains, water) ∈ Sys C(temperature, Level) ∈ Sys
C(temperature, Level(cid:48)) ∈ Sys ∧ Level(cid:48) > Level

heat1(C)

C(status, heating) ∈ Sys C(contains, water) ∈ Sys C(pressure, Level) ∈ Sys
C(pressure, Level(cid:48)) ∈ Sys ∧ Level(cid:48) > Level

heat2(C)

C(status, heating) ∈ Sys C(contains, water) ∈ Sys C(temperature, TLevel) ∈ Sys C(pressure, PLevel) ∈ Sys
C(temperature, TLevel(cid:48)) ∈ Sys ∧ C(pressure, PLevel(cid:48)) ∈ Sys ∧ (PLevel(cid:48) > PLevel) ∧ (TLevel(cid:48) > TLevel)

heat3(C)

Fig. 7: Rules that represent physical laws in use case of Section 5.3

could manually operates the valves to increase the level of the water in the tank and burst
the tank. In this perspective, it is fair to assume that there are some attacker properties,
e.g., distance, that can be exploited by an attacker to perform some actions (or even
attacks) that leads to some physical consequences in the CPS. As a simple motivating
example, the following rule has been added to the speciﬁcation (as a Horn clause as
discussed in Section 5).

DYProp(distance, physical access) ∧ C(status, open) ∈ Sys ∧ C(operate, manual) ∈ Sys
C(status, close) ∈ Sys

The clause states that whenever the attacker has physical access to the CPS, he can close
any valve which can be manually operated. We also modeled the opening of a valve.

When we run the AVANTSSAR platform searching for a state of the system in
which the level of the water in the tank has reached the upper threshold overT (de-
ﬁned as a goal), we (unsurprisingly) ﬁnd an attack. To perform the attack, the attacker
manually opens the inﬂow valve and closes the manual valve.

5.3 Physics-Based Interaction Use Case – a Stronger Attacker

This use case is a variation of the one in Section 5.2, where we add extra rules to the
attacker. In particular, we have modeled that whenever the attacker has physical access
to the CPS, he can physically interact with the system and heat up the water in tank
(e.g., through microwave or ﬁre).

DYProp(Distance, physical access) DYProp(Tool, heating)
C(status, heating) ∈ Sys

heatDY

Note here that some system properties should hold, e.g., the tank should contain a liquid
but for the sake of simplicity we abstract away system properties in this example.

We have modeled the corresponding physical laws and we report three examples
in Fig. 7. heat1(C) and heat2(C) express the temperature and pressure increase when
heating a generic component containing water respectively. heat3(C) deﬁnes the di-
rect proportionality between temperature and pressure in the presence of water inside a
component.

Goal. We check if the attacker can burst the tank, increasing the pressure of the tank.

(cid:3)(Tank(pressure, overT) (cid:54)∈ Sys)

Security Analysis. The AVANTSSAR platform reports a violation of the goal. The two
clauses heat2 and heatDY have been used to heat the tank component and then to raise
its pressure, bursting the tank.

6 Related Work

The formal veriﬁcation of security properties of CPS is a non trivial task, as CPS in-
troduce physical properties to the system under analysis. SAT/SMT solvers used by
security analysis tools (e.g.,[3]) do not support such properties. In order to overcome
this limitation, one could simulate the process (e.g., [2]) or adapt the level of abstraction
of CPS components. In [35], the author presents a formal deﬁnition of an attacker model
for CPS. The attacker is deﬁned as a set of pairs representing locations and capabilities.
Capabilities are deﬁned as a set of tuples expressing actions, cost (energy/time) and
range (with respect to the topology) of the attacker. The attacker is assumed to perform
two types of attacks: physical, against a device and cyber against the communications;
where the ﬁrst requires physical access while the second proximity to the node. The
actions of the attacker are WSN actions (remove, read/write, reveal, reprogram, starve)
and cyber actions (block, eavesdrop, inject).

In [26,6], the authors present a formalization to reason on security properties of
wireless networks (including a considerations of physical properties related to those
networks). The authors present an attacker model as a variation of the DY attacker
model. The attacker is a malicious agent of the network who cannot break cryptog-
raphy. He has a ﬁxed location, while the usual DY controls the entire network, a set
of transmitters and receivers, an initial knowledge with his private/public keys which
can use to create and analyze messages. The authors also consider constraints on the
distance of communicating parties. An attacker can only intercept messages at his lo-
cation and colluding attackers do not instantaneously exchange knowledge, they are
constrained by the network topology.

7 Conclusions and Future Work

In this paper, we argued that (to the best of our knowledge) current approaches for the
formal reasoning on the security of CPS do not consider most of the physical interaction
between the attacker and the system. Instead, the works we reviewed only focus on the
network interaction between components of a CPS, which is indeed important but not
sufﬁcient for an extensive security analysis. One of the main difﬁculties of considering
physical interaction of the CPS is that usually this leads to the deﬁnition of the physical
processes of various components of the CPS.

We proposed several basic uses cases in which the physical behavior of both the
CPS and the attacker can be used to produce attacks that rely on physical actions of the
attacker that are outside the normal behavior of the CPS. To alleviate that problem, we
presented the idea of extending the DY attacker to a CPDY attacker model that allows to
include physical-layer interaction. We implemented that CPDY model in ASlan++ and
used the AVANTSSAR platform to show that our extended attacker model is indeed
able to discover the physical-layer attacks in CPS.

Acknowledgments. This work was supported by the National Research Foundation of
Singapore under grant NRF2014NCR-NCR001-40.

References

1. S. Adepu and A. Mathur. An investigation into the response of a water treatment system into
cyber attacks. In IEEE Symposium on High Assurance Systems Engineering (HASE), 2015.
2. D. Antonioli and N. O. Tippenhauer. MiniCPS: A toolkit for security research on CPS
networks. In Proceedings of Workshop on Cyber-Physical Systems Security & Privay (SPC-
CPS), co-located with CCS, Oct. 2015.

3. A. Armando, W. Arsac, T. Avanesov, M. Barletta, A. Calvi, A. Cappai, R. Carbone, Y. Cheva-
lier, L. Compagna, J. Cu´ellar, G. Erzse, S. Frau, M. Minea, S. M¨odersheim, D. von Oheimb,
G. Pellegrino, S. E. Ponta, M. Rocchetto, M. Rusinowitch, M. T. Dashti, M. Turuani, and
L. Vigan`o. The AVANTSSAR platform for the automated validation of trust and security of
service-oriented architectures. In Tools and Algorithms for the Construction and Analysis of
Systems (TACAS), pages 267–282, 2012.

4. A. Armando and L. Compagna. SATMC: a SAT-based model checker for security protocols.

In JELIA, LNAI 3229. Springer, 2004.

5. AVANTSSAR. Deliverable 5.3: AVANTSSAR Library of validated problem cases. www.

avantssar.eu, 2010.

6. D. Basin, S. Capkun, P. Schaller, and B. Schmidt. Formal reasoning about physical properties
of security protocols. Transactions on Information and System Security (TISSEC), 14(2):16,
2011.

7. D. Basin, C. Cremers, and C. Meadows. Model checking security protocols. Handbook of

Model Checking, 2011.

8. D. Basin, S. M¨odersheim, and L. Vigan`o. OFMC: A symbolic model checker for security

protocols. Journal of Information Security, 4(3):181–208, 2005.

9. B. Blanchet. An efﬁcient cryptographic protocol veriﬁer based on prolog rules. In Computer

Security Foundation Workshop (CSFW). IEEE, 2001.

10. M. Buchler, K. Hossen, P. Mihancea, M. Minea, R. Groz, and C. Oriat. Model inference
and security testing in the spacios project. In IEEE Conference on Software Maintenance,
Reengineering and Reverse Engineering (CSMR-WCRE), 2014.

11. J. Camenisch, S. M¨odersheim, and D. Sommer. A formal model of identity mixer. In Formal

Methods for Industrial Critical Systems FMICS, 2010.

12. A. A. C´ardenas, S. M. Amin, B. Sinopoli, A. Giani, A. Perrig, and S. S. Sastry. Challenges
for securing cyber physical systems. In Workshop on Future Directions in Cyber-physical
Systems Security. DHS, July 2009.

13. A. A. C´ardenas, T. Roosta, and S. Sastry. Rethinking security properties, threat models, and
the design space in sensor networks: A case study in SCADA systems. Ad Hoc Networks,
7(8):1434–1447, 2009.

14. Y. Choi. From nusmv to SPIN: experiences with model checking ﬂight guidance systems.

Formal Methods in System Design, 30(3):199–216, 2007.

15. V. Cortier, S. Delaune, and P. Lafourcade. A survey of algebraic properties used in crypto-

graphic protocols. Journal of Computer Security, 14(1), 2006.

16. D. Dolev and A. C. Yao. On the security of public key protocols. IEEE Transactions on

Information Theory, 29(2):198–207, 1983.

17. S. Escobar, C. Meadows, and J. Meseguer. Maude-NPA: Cryptographic protocol analysis
modulo equational properties. In Foundations of Security Analysis and Design. 2009.

18. E. LeMay, M. D. Ford, K. Keefe, W. H. Sanders, and C. Muehrcke. Model-based security
metrics using adversary view security evaluation (ADVISE). In Proceedings of Conference
on Quantitative Evaluation of Systems, QEST, 2011.

19. A. Mathur and N. O. Tippenhauer. A water treatment testbed for research and training on ics
security. In Proceedings of Workshop on Cyber-Physical Systems for Smart Water Networks
(CySWater), Apr. 2016.

20. Y. Mo, T.-H. Kim, K. Brancik, D. Dickinson, H. Lee, A. Perrig, and B. Sinopoli. Cyber-
physical security of a smart grid infrastructure. Proc. of the IEEE, 100(1):195–209, 2012.
21. T. Morris, A. Srivastava, B. Reaves, W. Gao, K. Pavurapu, and R. Reddi. A control system
testbed to validate critical infrastructure protection concepts. Journal of Critical Infrastruc-
ture Protection, 4(2):88 – 103, 2011.

22. B. Reaves and T. Morris. An open virtual testbed for industrial control system security

research. Journal of Information Security, 11(4):215–229, 2012.

23. M. Rocchetto, M. Ochoa, and M. Torabi Dashti. Model-based detection of CSRF. In ICT
Systems Security and Privacy Protection, volume 428 of IFIP Advances in Information and
Communication Technology. Springer Berlin Heidelberg, 2014.

24. M. Rocchetto and N. O. Tippenhauer. CPDY (Cyber-Physical Dolev-Yao), 2016. Available

at http://research.scy-phy.net/cpdy/.

25. M. Rocchetto, L. Vigan`o, M. Volpe, and G. D. Vedove. Using interpolation for the veriﬁca-

tion of security protocols. In Security and Trust Management STM, 2013.

26. P. Schaller, B. Schmidt, D. A. Basin, and S. Capkun. Modeling and verifying physical prop-
erties of security protocols for wireless networks. In Computer Security Foundations Sym-
posium (CSF), pages 109–123, 2009.

27. B. Schmidt, R. Sasse, C. Cremers, and D. A. Basin. Automated veriﬁcation of group key
agreement protocols. In Symposium on Security and Privacy (S&P), pages 179–194, 2014.
28. M. Schmidt and H. Lipson. Distilling free-form natural laws from experimental data. science,

324(5923):81–85, 2009.

29. SPaCIoS. Deliverable 3.3.2: Methodology and technology for vulnerability-driven security

testing (ﬁnal version), 2014. Available at http://www.spacios.eu.

30. D. Steinmetzer, M. Schulz, and M. Hollick. Lockpicking physical layer key exchange: Weak
In Proc. ACM Conference Wireless Security (WiSeC),

adversary models invite the thief.
2015.

31. R. Taormina, S. Galelli, N. O. Tippenhauer, E. Salomons, and A. Ostfeld. Simulation of
cyber-physical attacks on water distribution systems with EPANET. In Proceedings of Sin-
gapore Cyber Security R&D Conference (SG-CRC), Jan. 2016.

32. M. Turuani. The CL-Atse Protocol Analyser. In RTA, LNCS 4098, 2006.
33. D. Urbina, J. Giraldo, N. O. Tippenhauer, and A. Cardenas. Attacking ﬁeldbus communica-
tions in ICS: Applications to the SWaT testbed. In Proceedings of Singapore Cyber Security
R&D Conference (SG-CRC), Jan. 2016.

34. L. Vigan`o. The spacios project: Secure provision and consumption in the internet of services.

In Software Testing, Veriﬁcation and Validation (ICST), pages 497–498. IEEE, 2013.

35. R. Vigo. The cyber-physical attacker. In Proceedings of Workshop of Conference on Com-

puter Safety, Reliability, and Security (SAFECOMP), 2012.

36. D. von Oheimb. The high-level protocol speciﬁcation language HLPSL developed in the EU

project AVISPA. In Proceedings of APPSEM 2005 workshop, pages 1–17, 2005.

37. D. von Oheimb and S. M¨odersheim. ASLan++ — a formal security speciﬁcation language

for distributed systems. In FMCO, LNCS 6957. Springer, 2010.

38. S. Weinberger. Computer security: Is this the start of cyberwarfare? Nature, 174:142–145,

June 2011.

