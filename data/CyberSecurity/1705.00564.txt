Attacking Machine Learning Models
as Part of a Cyber Kill Chain

Tam N. Nguyen
North Carolina State University
tam.nguyen@ncsu.edu

8
1
0
2

r
p
A
7

]

R
C
.
s
c
[

2
v
4
6
5
0
0
.
5
0
7
1
:
v
i
X
r
a

Abstract—Machine learning is gaining popularity in the net-
work security domain as many more network-enabled devices
get connected, as malicious activities become stealthier, and
as new technologies like Software Deﬁned Networking emerge.
is a desirable goal.
Compromising machine learning model
In fact, spammers have been quite successful getting through
machine learning enabled spam ﬁlters for years. While previous
works have been done on adversarial machine learning, none has
been considered within a defense-in-depth environment, in which
correct classiﬁcation alone may not be good enough. For the ﬁrst
time, this paper proposes a cyber kill-chain for attacking machine
learning models together with a proof of concept. The intention
is to provide a high level attack model that inspire more secure
processes in research/design/implementation of machine learning
based security solutions.

Index Terms—machine learning, cybersecurity, secure devel-

opment, adversarial machine learning, threat model.

I. INTRODUCTION

There is a signiﬁcant gap between the amounts of connected
devices and the number of cyber security professionals. Per
U.S. Bureau of Labor Statistics [1], a projected growth in
cyber security jobs from 2014 to 2024 is 18% while Cisco
[2] predicted a 100% increase in network-enabled devices,
growing from 4 billions in 2016 to 8 billions units in 2021.
Consequently, global data trafﬁcs will increase by at least
5 times. Furthermore, the emergence of Software Deﬁned
Network makes it very convenient to develop and deploy
machine learning (ML) based network security solutions, some
of which are shown in Table I. Usually, researchers design
new ML-based security solutions and then use benchmark
results to prove the models’ accuracy. Such methodology alone
is not attractive enough in the eyes of cybersecurity leaders
due to the lack of information on how those solutions will
ﬁt into the bigger picture at their organizations. Other than
accuracy, the cybersecurity leaders would also like to know
about the model’s projected maintenance costs, the model’s
ability to withstand abuses, the quality of source codes, the
ways datasets were collected, and so on. For that reason, this
paper offers several recommendations on how to improve the
overall practical robustness of a machine learning enabled
security solution. The main contribution is the ML cyber
kill-chain - a high level threat model tailored speciﬁcally
for ML. The organization of this paper follows the Russian
doll approach. It starts with the biggest picture - the Security
Operation Center (S.O.C) with their missions, operations and
problems. It is then followed by a brief survey on the inherent

limitations of existing ML algorithms being used by S.O.C.
Within that sub-picture, the paper formalizes ML speciﬁc
threats into an attack model - the ML cyber kill chain. Finally,
the paper proposes a list of recommendations for a more secure
process of designing new ML-based security solutions.

tnn
April 05, 2016

II. BACKGROUNDS ON S.O.C PROCESSES

Security Operation Center (S.O.C) is part of a ”Defense
in depth” strategy. Metaphorically, ”defense in depth” is
like an artichoke, consisting of interlaced, overlapping-but-
independent protection layers backing each other. When some
of its layers got pealed away, an artichoke still maintain almost
the same shape (posture). In response, adversaries employs
”advanced persistent” attack strategies in which persistent
organized efforts can be categorized into phases also known
as ”intrusion kill chain” [12].

A. The General Cyber Intrusion Kill Chain

1) Reconnaissance (recon) : adversaries do research about
the targeted system’s structures, capabilities, vulnerabil-
ities, etc

2) Weaponization : adversaries code up deliverable pay-

loads

3) Delivery : adversaries use different ways to deliver

weaponized payloads to the destination

4) Exploitation : payloads were executed and vulnerabili-

ties of target system(s) were exploited

5) Installation : malware(s) were installed and the ”persis-

tent” factor can now be established

6) Command and Control (CnC) : adversaries established a
hidden control channel with compromised entities within
the victim system to further organize and expand the
attack campaign

7) Actions : adversaries now perform actions on their true

objectives

S.O.C daily operations align very closely with cyber kill chains
for several good reasons. It reminds S.O.C analysts about the
big picture in which locating an attack should be looked at
as part of a past-present-future orchestrated campaign. For
example, if an installation of a malware was identiﬁed (phase
5 of the kill chain), it is crucial to traverse to earlier phases
and ﬁnd out: what vulnerability(ies) in what subsystem was

 
 
 
 
 
 
PUBLICATION

FUNCTIONALITY SUCCESS ML METHODOLOGY

AMPS: Application aware multipath ﬂow
routing using machine learning in SDN [3]

Dynamic multipath
ﬂow routing

Dynamic attack detection and mitigation in
IoT using SDN [4]

IoT monitoring and
protection

Analytics-Enhanced Automated Code Ver-
iﬁcation for Dependability of Software-
Deﬁned Networks [5]

Detect and prevent
malicious SDN app
behaviors

98%

98%

99%

Supervised learning on 40-features dataset with C4.5 Decision Tree
algorithm

Support Vector Machine model was used on processed data passed
down from a learning module in order to classify trafﬁcs. Both linear
and non-linear kernel (RBF) were used.

It is a combination of automated code veriﬁcation (Java Path Finder)
with ML analytic model (Ckmeans), being independent of underlying
network topology

An applied pattern-driven corpus to predic-
tive analytics in mitigating SQL injection
attack

Prevent SQL injec-
tion in the cloud

98%

Two-Class Support Vector Machine and Two-Class Logistic Regression
with linear kernel implemented on Microsoft Azure Machine Learning

Forecasting and anticipating SLO breaches
in programmable networks [6]

Cognitive SLA en-
forcement

90%

Protecting Service Level Objectives
response time,
throughput) using Long Short Term Memory Recurrent Neural Network
(able to identify previously seen patterns in new distorted samples)

(availability,

Access point selection algorithm for pro-
viding optimal AP in SDN-based wireless
network [7]

Pick best QoS, less
backhaul
conges-
tion

depends

Trafﬁc classiﬁcation deployed at AP, using C5.0 Decision Tree algo-
rithm

Content Popularity Prediction and Caching
for ICN: A Deep Learning Approach With
SDN [8]

Cache
management

75%
mean
accuracy

Improving cach operations by predicting the popularity of content using
Deep-Learning-based Content Popularity Prediction (Stacked Auto-
Encoders + Softmax)

AWESoME: Big Data for Automatic Web
Service Management in SDN [9]

Web trafﬁc engi-
neering

90%

Annotation module at network edge classiﬁes ﬂows in real time based
on bag-of-domains (using Apache Spark), ﬂow-to-domain, domain-2-
service, and service-to-rule.

Athena: A Framework
Scalable
Anomaly Detection in Software-Deﬁned
Networks [10]

for

security

Network
development
framework

depends

11 ML models were made available as library, allowing developers to
quickly develop network security applications that can perform real-
time detection and responses.

FADM: DDoS Flooding Attack Detection
and Mitigation System in Software-Deﬁned
Networking [11]

framework
DOS prevention

for

depends

Feature extraction is entropy-based and attack detection is powered by
Support Vector Machine

TABLE I
10 ML-BASED SECURITY SOLUTIONS FOR SDNS SINCE 2017

exploited? In what way the initial attack payload was deliv-
ered? How the payload was built? and how did the attackers
know of such vulnerability(ies) ? In the mean time, analysts
also need to look forward and try to predict how attackers
will use the piece of malware to further exploit the system.
There are usually patterns within each phase of the kill chain,
and between kill chains of different attack campaigns. An
advanced persistent attack campaign is usually a combination
of those patterns [12]. Therefore, in-depth knowledge of past
kill chains will help with detecting, preventing and predicting
future kill chains. Since all of those heavy analytical tasks
cannot be carried out by humans alone, Machine Learning
(ML) models are used. Most of ML related work-ﬂows in
S.O.C can be categorized into 3 common steps : Data pre-
processing, clustering/threshold adjustment, and monitoring.

B. Data pre-processing

Raw captured data is huge and came from various sources
such as full packet capture (PCAP), NetFlow (generated by

Cisco network devices), protocol metadata, application logs,
machine logs, telemetry streams. Just within a NetFlow record
itself, there are 104 possible data ﬁelds with 22 additional
ﬁelds reserved by Cisco[13]. Common methods are dimen-
sional reduction (mapping more dimension variables into
fewer ones), clustering (identifying groups of items with sim-
ilar characteristics), Spearman’s rank correlation [14], statisti-
cal sampling, measuring and pick samples based on entropy
and so on. [15]. Common issues include but are not limited
to streaming fact issue, noisy data, and the trustworthiness
of data. Streaming fact issue refers to wrong data clustering
decision based on incomplete facts (key information has not
yet arrived). Some systems try to overcome this problem by
using ML models to make inferences as data are coming
in. Noisy data and untrustworthy data can be caused by
hackers or by aging devices, network congestions, or simply,
conﬁguration mistakes made by ﬁeld admins.

C. Clustering/threshold adjustment

It is estimated that the amount of false positive alarms raised
by signal based IDS is 5 to 20 times the amount of true
positive ones [14]. Having too many false positive alarms will
cost time, money and corrode the credibility of the intrusion
detection system. Therefore, methods like Adaptive Cluster
Tuning process (ACT) is used by S.O.C to adjust the initial
categorization/clustering done by machines [14].

D. Monitoring

Finally, models are deployed. Trafﬁcs are monitored and
packages got sent
to ﬁrst stage for pre-processing - the
cycle repeats. It is important to do so in order to identify
concept-drift due to evolution of attacking methods or to
identify new patterns and concept-evolution.

Besides the above-mentioned issues, S.O.C also has to
balance the goal of early attack detection and the cost of false
positive alarms; to catch up with the speed of evolving attacks
while tuning the existing system. While the human factor
can help the ML models in many ways, it is also important
to note that human is another attack surface. Human makes
mistakes.

III. COMMON MACHINE LEARNING MODELS
USED IN S.O.C

In daily operations, S.O.C should train and re-train several
models simultaneously. It is about the spirit of ”defense-in-
depth” since no one model is perfect for identifying every
security problems as illustrated in the work of Buczak [16].
While some statistics gathered by Buczak will be presented
for the convenience of illustrating the general effectiveness of
each model, the best way to really evaluate and compare ML
models is testing them in one’s own lab environment with the
same analysts tunning the models.

A. Artiﬁcial Neural Networks

By design, ANNs are ﬁt for non-linear problems but tend
to suffer from local minima leading to long learning time,
and as the number of features increases, the longer it will
take to learn. With anomaly and hybrid detection, multi layer
ANNs were used to analyze data. The models can reach deeper
into lower network layer data and are able to detect some
low/slow type attacks. However, the performance of ANNs is
not consistent. While they can identify 100% of the normal
behavior, the amount of false alarms may sometimes reach
76% depending on what kind of attacks were being executed
[16].

B. Bayesian network

Bayesian network is a probabilistic directed acyclic graph
type with nodes as variables and the edges as their rela-
tionships. Based on the relationships, a node can ”walk” to
another. Each node has a probabilistic value and at the end
of the walk, a ﬁnal probabilistic score is formed. Relationship
links that have high true positive score will be veriﬁed and

formed into rules. Therefore, a Bayesian network is proactive
even in misuse mode. In a test of using model to label IRC-
botnet generated data, the precision rate is 93% with a false
positive rate of 1.39% (detecting fewer cases than some other
models but generating less false alerts). In other tests, the
reported precision rates are 89%, 99%, 21%, 7%, and 66%
for DoS, probe/scan, remote-to-local, user-to-root, and ”other”
classes of attacks respectively [16]. In the case of anomaly
detection, ACT process was used to tune the system. Accuracy
of 100% with 0.1% false alarm rate were reported in lab
experiments analyzing TCP/IP packets.

C. Clustering

Some popular clustering models are k-means, k-nearest
neighbor, density-based spatial clustering of applications with
noise (DBSCAN), etc. Because the models were designed in
order to ﬁnd patterns in unlabeled multi-dimensional data,
explicit descriptions of classes are not required. A weakness
of this model is known as the ”curse of dimensionality”. Too
many features may confuse the model and any imbalance in
the feature set will negatively affect its decisions. In some
experiments, this method can detect up to 80% of unknown
attacks. In anomaly mode, studies suggest
that clustering
models can be really accurate (98%) in analyzing captured
PCAP packages but performance goes down when dealing
with streaming data (false alarm rate may go up to 28%)

D. Decision trees

Decision tree is a ﬂow-chart like structure built on concepts
of information gain/entropy where each node choose the best
ﬁt attribute to split current set of examples into subsets.
Normally, decision trees provide the beneﬁts of high accuracy
with simple implementation. However, it is not usually the case
with larger trees. Also with large, complex trees, the model
tends to favor attributes with more levels. To overcome issues
with large trees, analysts will have to do some pruning to get
smaller trees. In anomaly detection mode, experimental results
of using decision tree model to detect bad domain names from
passive DNS queries show that the model is accurate with
acceptable false alarm rates (reduced by constant re-training).

E. Evolutionary computation

While Genetic Algorithm (GA) and Genetic Programming
(GP) are most used Evolutionary Computation (EC) methods;
Particle swarm optimization, Ant Colony Optimization, Evo-
lution Strategies are also parts of the group. The main concept
is based on the idea of ”the strongest will prevail” and basic
operators are selection, crossover, and mutation. Experiments
with various attack types show that the average false alarm rate
is very low. However, the sensitivity in detecting new attacks
varies greatly (from 66% to 100%) depending on attack types.

F. Naive Bayes

Naive Bayes model calculates the ﬁnal conditional prob-
ability of ”attack” (or ”normal”) with a naive assumption
that the used features are independent from each other. That

assumption is the biggest limitation of this model. However,
if the features are indeed independent from each other, naive
bayes can be very powerful thanks to its simple algorithm
that allows the model to be highly scalable and be used as an
online classiﬁer. In misuse mode, experimental results suggest
a decent accuracy (above 90%) but with a quite unacceptable
false alarm rate (around 3%). In anomaly detection mode,
experimental results show a tremendous difference in accuracy.
For example, accuracy of identifying data as ”normal” is 97%
for DoS type attacks and only 9% for remote-to-local type
attacks.

G. Supported vector machine

Supported Vector Machine (SVM) is a binary classiﬁcation
model by design. With a kernel such as linear, polynomial,
Gaussian Radial Basis Function, or hyperbolic tangen; the
model will try to draw a hyperplane that divides the feature
space into two classes. Sometimes, when overlapping is un-
avoidable, slack variables will be added and each overlapping
data point will be be assigned a cost value. In misuse detection
experiments, a large set of features is reduced by using feature
selection policies or feature selection algorithms. The model is
quite accurate but also shows limitations at identifying certain
types of attacks such as user-to-root attack. In anomaly detec-
tion mode, usually SVMs will use more sophisticated kernel to
help with the drawing of the hyperplane. Experimental results
show great variations in accuracy (from 65% to 99.9%) and
sometimes, false negative rate can get really high (over 30%)
[16].

IV. ATTACKS ON
MACHINE LEARNING MODELS

The deﬁnition of ”attack” on ML models should be ﬂexible
and be focusing on the models’ purposes rather than the
models’ functionalities. The accuracy rate is not the only thing
adversaries can target. In one case, if a model was designed
to allow or drop suspicious packets then reducing the model’s
accuracy ﬁts the deﬁnition of an attack. In another case,
adversaries can cause the models to produce true positives that
are very close to false positives. Consequently, it causes burn-
outs on the security analysts who are going to manually inspect
those ﬂags. The model’s functionalities are intact but one of
its purposes - reducing the security analysts’ workloads - was
compromised. ”Attack” can also mean signiﬁcantly increasing
the time it takes for a ML model to make a speciﬁc decision.
No matter what attack end-goals are, attackers must ﬁrst have
some really good insights about the targeted model. Thus,
there is a strong motivation to clone/extract a security ML
model.

When performing extraction, inputs are given to a trained
model, end results (outputs) got harvested, and clone model
learns from those input-output data pairs. While it appears that
training the original model and cloning an existing model are
quite similar, model cloning does not have to deal with broken
or faulty data entries that delay or even mislead the learning
process. Model cloning also does not have to deal with

optimization issues such as local minima/maxima traps. In
2016, Tramer et. al. [17] proposed several methods to perform
model extraction of several ML types but those methods were
not weaponized. For example, it required Tramer and his team
to perform thousands of probes in order to extract a model and
such number of probe is too high to be considered practical in
targeting a protected environment. In the following sections,
we will brieﬂy discuss Tramer’s methods and then propose a
way to weaponize them.

A. Equation-solving attack

This form of attack is ﬁt for logistic regression types
such as binary logistic regression (BLR), multi-class logistic
regression (MLR), and multi-layer perceptron (MLP). Because
the models can be represented as equations with variables,
attackers just need to feed the known variable values in, use
mathematics to solve the equations and get the rest of the
unknown values. For example, with BLR, we have :
w ∈ Rd, β ∈ R with fi(x) = σ(w × x + β)
where
σ(t) = 1/(1 + e−t)
Attacker will feed xi to the trained model and the model will
give yi = f (xi) = σ(w × xi + β). If we have enough xi, yi,
we should be able to solve the equations to get w and β. The
math will be more complicated when dealing with MLRs and
MLPs.With softmax model in MLR for instance, we have:
c > 2, w ∈ Rcd, β ∈ Rc
fi(xi) = ewi×x+βi/(Pc−1
j=0 ewj ×x+βj )
The function can be solved by minimizing its cost/loss func-
tions. The methods proved to be effective in Tramer’s exper-
iments [17]. With BLR, they were able to achieve Rtest =
Runif = 0 with an average probe of 41. The number of probe
is much greater with MLR and MLP. For instance,it required
them to perform 54,100 queries on average in order to achieve
100% accuracy on a 20 hidden node MLP. Unlike BLR, it is
sometimes very hard to estimate a correct amount of probes
needed for MLP and MLR cloning. Especially with MLP, it is
hard for attackers to guess how many hidden neuron layers are
there, and how many neurons per layer. Attackers will also not
be able to tell how many classes an original MLP can identify.
However, everything can be different in actual cyber attack
scenario. Instead of 100% accuracy, attackers may only need
to clone a model with 90% accuracy for their purposes, and the
amount of probes needed may be signiﬁcantly lower. Another
reason to not aiming for 100% accuracy is that original ML
models get tunned on a fast pace, daily. A 100% accurate
cloned model of today maybe different from the actual model
next week.

B. Model inversion attack

Given feature dimension d with feature vector x1, x2, ..., xd,
some knowledge about some of the features, and access to f
- the model, Fredrikson et al. [18] proposed that a black box
model inversion attack which involves ﬁnding an optimal x
that maximizes the probability of some known values.
xopt = argmaxx∈X fi(x)

For instance, if an image of Bob was used to train model M to
recognize category ”man”. If that exact image is fed into M,
the result will be ”man” with 100% conﬁdence while images
do not belong to the training set will never get such absolute
score from the model. An attacker can start with one pixel and
ﬁnd the pixel value that gives the maximum score possible of
category ”man”. The process continues to other pixels and the
end result is an image very close to Bob’s original image in
the training set. Tramer et al. [17] upgraded this approach by
performing inversion attack on a cloned model M’ of M. The
reported improvement is a 6-hour faster recovering time for
40 faces. This kind of attack opens a theoretical possibility of
which attackers can gain some insightful knowledge about a
security model’s trained data set if they could clone the model
with 100% accuracy and somehow was able to tunnel it out.

C. Path-ﬁnding attack

Tramer et al. [17] also extended prior works on tree attacks
and proposed their ”path-ﬁnding” attack which can be used to
map binary trees, multi-nary trees, and regression trees. We
have a tree T with v nodes and at each node, there is an
identiﬁer idv. With x ∈ X, an oracle query will give O(x) =
idv. If x ∈ X1 ∪ ⊥ × ... × Xd ∪ ⊥, O(x) will return the
identiﬁer at the node where T stops. To begin the attack, we
pick x ∈ X1 ∪⊥×X2 ∪⊥×...Xi1 = [a, b]×...×Xd∪⊥. O(x)
gives idLv at the leaves of the tree. We then can separate [a, b]
into n sub ranges where n is the number of the corresponding
known leaves (at this point). For each Xi1 sub range, we repeat
the process and ﬁnd another nodes/leaves. This was referred to
as the top-down approach which is of higher performance than
the bottom-up approach. Reported performance evaluations of
this approach show that in order to achieve 100% on 1 − Rtest
and 1 − Runif , it will take 29,609 queries to clone a tree with
318 leaves, 8 layers of depth; 1,788 queries to clone a tree
with 49 leaves, 11 layers of depth; and 7,390 queries to clone
a tree with 155 leaves and 9 layers of depth.

D. Other attacks

There are several other methods to attack ML models.
The Lowd-Meek attack [19] targets linear classiﬁers that give
only class labels as models’ outputs. The general idea of this
approach is using adaptive queries to throw sample points at
the suspected positions of the hyperplane. Another way to
attack was described by Bruckner [20] as a single Stackelberg
Prediction Game (SPG). In this game, the Leader (L) is the
one with the original ML model M. The Follower (F) is the
attacker. F will attack L by generating and feeding model M
data that at least will prevent M from learning new knowledge
or at most, teach M new faulty knowledge. Theoretically, this
can be achieved by providing learning data that maximize the
cost function of model M. In real life situations, there are more
than one attacker with different attacking goals and L does
not know how many F are there and what exactly each F is
trying to do. This escalates to the Bayesian Stackelberg Game.
Zhou and Kantarcioglu described it as ”Nested Stackelberg
Game” [21] suggesting a solution of using and switching a

set of models to confuse the attacker. Kantarcioglu later on
also proposed the concept of ”planning many steps ahead” in
this game. Details of these methods will be further studied and
evaluated within a defense-in-depth environment and will be
discussed in future works.

V. THE MACHINE LEARNING MODEL
KILL CHAIN

Based on all the above-mentioned ML vulnerabilities and
limitations, this paper proposes the following high level kill
chain tailored speciﬁcally for ML based solutions. It is ex-
tremely important for the ML solution designers to be fully
aware of this threat model and pay full attention to the little
details that may get their solutions to be compromised. At
S.O.C level, this threat model will help analysts to identify
how a particular set of attacks ﬁt into a bigger picture, how
to properly document and categorize current/past attacks, and
how to anticipate the attackers’ next moves.

1) Recon phase

The goal of this early phase is to gather as much basic
information about a targeted ML system as possible.
Important questions to be answered include ”What ML
model(s) being used?”, ”Are the models protecting
against the kind of attacks I am planning to perform?”
and ”Is the targeted system based on an opensource
project?” In reality, defenders will have certain favorite
ML models in defending against certain types of at-
tacks. We also know that open sourcing is the trend
and most commercial cyber security systems have their
own open source siblings. In such case, studying the
anatomy of the open source system(s) may provide
tremendous knowledge about the actual defense system
being used. Probing efforts should be fragmented into
small, seemingly uncorrelated attempts to avoid early
detections. Social engineering or insider leak can be
extremely helpful. Non technical information such as
what model types are being used?, how many analysts
within a certain shift? how many generated alerts created
per day on an average? etc can be safely communicated-
out without bursting the cover of the insider.

2) Weaponization

Based on collected basic knowledge about the targeted
model, attackers at this stage will work on an optimized
set of probes with the help of an adaptive engine. For
example, if the model uses SVM, the values of mali-
cious probes should be close to where the polynomial
hyperplane goes. Because a model has to deal with
many attackers at the same time, the actual polynomial
hyperplane at the point of attack may have a shape that
is slightly different from days before. In this situation,
the adaptive engine will kick in, adjust the probes on
the ﬂy, and try to minimize the number of probes to a
safe threshold.

3) Delivery

Once attackers are conﬁdent that they have prepared
the best set of data probes and a good adaptive engine

to handle real-time data changes, they will launch the
ﬁrst wave of attacks. For example, the attack can target
the decision border where the difference between true-
positives and true-negative is low. After a while, analysts
may ”tune” the model and relax the border and/or the
model’s cost functions resulting in some true-posstive to
be accepted as false-positives.

4) Exploitation

Attackers now want to gather deeper data about the
model and may as well expand probes to other models.
It is reasonable to believe that at this point, attackers can
deliver a full set of probes to clone the model and tunnel
the data out thanks to the relaxed boundaries. Once
having a functional clone in their own lab, attackers
can perform full model inversion attacks in order to
extract further details about the model and its trained
data. Finally, a prediction model can be built from
which, attackers can simulate certain attack scenarios
with answers to: how the targeted system will react; how
the model will be drifted; the rankings of threats etc.

5) Installation

At
this phase, attackers will use coordinated probes
with the helps of the adaptive engine together with the
prediction engine to poison the ML model. The goal
now is mis-training the targeted model and allow future
attacks to happen.
6) Command and Control

Now as the attackers have established a safe path to get
through the ML Model, they will move on with setting
up a hidden command and control channel with the
helps of compromised entities within the victim’s system
to further organize and expand the attack campaign.
This can be combined with the regular attack kill chain
featuring malwares,botnet, etc.

7) Action

Finally, attackers act on their main objectives.

A. Proof of Concept

Let us take a look at an attack on a IBM cognitive classiﬁer
between domestic cats (simulating true negatives) and female
lions (simulating true positives). Choosing this type of dataset
gives us several beneﬁts. First, it is non-linear and is compli-
cated enough, yet classiﬁcation results are easy to be observed
and understood. Second, there are many variations in between
two main classes such as golden cat, jungle cat, cheetah,
bobcat, lynx, etc which can be very helpful to simulate real
life possibilities of attacks which may contain largely same
features as legitimate instances and with only a few ”harmful
features”.

1) Setting up

We will use IBM Watson Visual Recognition demo
[22] to train a model M. The Visual Recognition demo
is a web interface maintained by IBM explicitly for
demonstration purposes and is under IBM’s control.
Four models of M were trained using different sets
of 10, 20, 50 and 70 samples per class for a little

experiment within the next step. However, for the rest of
this demonstration, M will be referred to as the model
M that was trained with 50 samples. The name of each
corresponding set of samples begins with ”A1-1”, ”A1-
2”, ”A1-5”, ”A1-7”. Images used and recorded screen-
capture videos can be found at [23]

2) Probe 1

At this point, we have the following scenario. A trained
model that can detect normal trafﬁcs (cats) and attacks
(female lions). An attacker - Bob - who wants to attack
the model and he wants to start up carefully. Bob will
use set A2 with different images of cats (6 images) and
female lions (6 images) to probe M. Because Bob cannot
afford a large amount of probes (at least not with lions),
ideally Bob will have to carefully choose the samples
in such a way that the samples help Bob explore the
domains as much as possible. For example, with 6 at-
tempts for cats, Bob should choose images such that they
will be all classiﬁed as ”cat” with different conﬁdence
scores of : ”close to 50%”, ”somewhere between 60%
and 80%”, and ”higher than 80%”. However, in our
experiment, we will choose probe pictures randomly.
With each probe, M returns a classiﬁcation (A2-CL) and
a conﬁdence score (A2-CF). As previously mentioned,
we run the probes on different versions of M, and as
the number of training samples increases, there is not
much improvement. For example, M was able to identify
cat pictures with conﬁdence score above 50% with
just 10 training samples for each category. However,
when training samples gets to 70 for each category,
conﬁdence scores do not improve greatly and even fails
to categorize picture named ”c3”. Future works will
involve measuring the learning rates of this model using
a better set of up to 1000 cat pictures.

3) Build a model predicting the other model Based on pairs
of A2-CL and A2-CF, Bob will set up his own model
M’ which, in this case, is also based on IBM Visual
Recognition MLaaS. While the underlying technology
is the same, M’ is independent and different from M.
In M’,
images in set A2 were uploaded with their
associated A2-CL and A2-CF harvested from M. Images
of cats and female lions are put into one ”collection”.
The process is demonstrated in the second video at my
project page.

4) Probe 2

At this point, Bob prepares his set of possible ways
to attack the system. In between a normal use (cat)
and an obvious attack (female lion), Bob came up with
variations such as ”bobcat”, ”cheetah”, ”jaguar”, ”tiger”
etc (pictures in set A3). In his mind, Bob thinks ”bobcat”
maybe the best option to start with the ﬁrst attack since
it is very close to ”cat”. However, Bob decides to run his
attack scenarios (pictures in set A3) through M’ ﬁrst. M’
will compare the image (A3i) with its image library and
return the closest matched image (A2i) with its A2i-CL,
A2i-CF. M’ will also return the score of how conﬁdence

M’ thinks A3i looks like A2i - the A3iA2i-CF score.
For each image (i) in A3 set, we calculate the total
relational conﬁdence score A3i-CF = A3iA2i-CF * A2i-
CF and identify the ith image with the maximum A3i-
CF. Bob then attack M with A3i and if the approximated
score matches or is very close to the score given by
M, Bob will craft a new set of attack variations similar
to that A3i. If the given result by M is signiﬁcantly
different from the M’ predicted result, Bob will need to
put A3i into M’ learned database with values from M,
and replace A3i with a new image.

5) Data poisoning

The ultimate goal is to ﬁnd attacks that is ”mild” enough
to be classiﬁed around 50% by M (right at the border of
”Attack” and ”Normal”). If Bob is able to do that with a
right amount of time and occurrences, M may be ”tuned”
and include Bob’s ”mild” attacks. After that, Bob will
repeat the previous step until the system ”favors” Bob
enough so he can launch his real attack. This effect is
similar to the ”boiling frog” effect.

Further details including source codes, images, outputs, etc can
be found at Project WolfEye [23] on Github. Improved version
of this demonstration as well as more ﬁndings/experiment
results will be included in future works.

VI. RECOMMENDATIONS

A. Invest time on attack/defense model

From the beginning, ML scientists should pay attention to
the ML cyber kill-chain (the attack model) and at least develop
a list of recommendations on safe implementation. Recom-
mendations may include but are not limited to the designer’s
deﬁnition of ”attack”, the meaning of model’s accuracy, the
side channels, etc. This is essentially important in the context
of open-source. As mentioned before, the deﬁnition of ”attack”
should depend on the model’s intended purposes rather than
just its accuracy. Some ML based solutions were designed to
be multi-purposes. Some solutions were originally designed
for a speciﬁc purpose but were used for other purposes in
real-world implementations. Nonetheless, the designers should
clearly communicate the intended purposes of the works they
are proposing and ways to protect them. For example, most
recent works in ML based security for SDNs have accuracy
rates of 98% (Table I) but the meaning of 0.2% increase in
false negatives may differ greatly from one to another. Based
on the attack model, the ML designers may also provide
a default protection model, explaining how the structure of
their designs ﬁt into the protection model, what may be done
to harden their works, what are the security trade-offs to
be considered, what are the potential side channels in real
world deployments, and so on. While research works are not
supposed to be commercial ready, basic recommendations on
how to protect and harden a ML based solution by its designers
are extremely valuable.

B. Design audit-able model

ML based solutions should generate meaningful logs or
even better, having an interface for the model to be audited
automatically. Audits may include information on who made
what changes, how much the model has drifted after a period
of time, the rates of false positives and false negatives, etc.
Ideally, the model itself should be able to give indications on
whether or not it is under attack and which stage of the kill
chain the attackers are at. ML based solution with good audit
capability will also help in case the model needs to be rolled
back to its earlier versions.

C. Follow secure development processes

Because ML based security solutions are softwares, the
designers should at least follow a secure software develop-
ment lifecycle [24]. It involves secure coding practices, static
analysis, test cases, attack surface reviews, and so on. Formal
veriﬁcation is absolutely necessary and should be done to the
largest extend possible considering there are huge challenges
in performing formal veriﬁcations on systems like the artiﬁcial
neural network. Side channels should be limited and there
are mechanisms to protect the privacy of the model and its
data. Finally, datasets used for training should be as organic
as possible.

D. Design an operational cost model

Cost is another factor as important as accuracy. For the
same purpose, a leaner ML algorithm will usually cost less
than a complicated one but there may be cases where it is
justiﬁable to have a complex ML model or even a group of
different ML models working together. The designers should at
least provide a cost model to make practical sense out of their
design decisions. A well designed cost model will help with
evaluating the cost of false negatives - a very important metric
in ML based solutions for cyber security. The paper ”Machine
Learning with Operational Costs” from MIT researchers [25]
may serve as a good start for further readings into optimizing
ML operational costs.

VII. CONCLUSION

The paper addresses the gap between academic researches
on ML based solutions and the operational deployments of
ML based systems. While research works do not have to meet
the strict requirements for a commercial ready product, it is
important that solution designers pay attention and establish
some initial foundations for the hardening of their works just
in case the works are chosen to be implemented in ”the wild”.
It is important to note that even with a well-funded S.O.C,
challenges are still coming from all corners within its systems
and from outside. Also, let’s not forget that attackers are
equipped with Machine Learning powers as well, and can build
systems to predict the behaviors of the defending models. For
those reasons, this paper proposes a high level threat model
tailored speciﬁcally to ML based solutions - the ML cyber kill
chain - together with four speciﬁc recommendations:

[15] N.

Sultana, N. Chilamkurti, W.
network

“Survey
using machine
http://tripsaver.lib.ncsu.edu/pdf/1006585.pdf

on SDN based
learning

approaches.”

Peng,
intrusion

and R. Alhadad,
system
Available:

detection

[Online].

[16] A. L. Buczak and E. Guven, “A Survey of Data Mining and Machine
Learning Methods for Cyber Security Intrusion Detection,” IEEE
Communications Surveys & Tutorials, vol. 18, no. 2, pp. 1153–1176, 22
2016. [Online]. Available: http://ieeexplore.ieee.org/document/7307098/
[17] F. Tram`er, F. Zhang, F. E. Epﬂ, A. Juels, M. K. Reiter, and T. Ris-
tenpart, “Stealing Machine Learning Models via Prediction APIs,” in
Proceedings of the 25th USENIX Security Symposium, 2016.

[18] M. Fredrikson, S. Jha, and T. Ristenpart, “Model Inversion Attacks that
Exploit Conﬁdence Information and Basic Countermeasures.” [Online].
Available: http://dl.acm.org/citation.cfm?id=2813677

[19] D. Lowd and C. Meek, “Adversarial Learning.” [Online]. Available:

http://dl.acm.org/citation.cfm?id=1081950

[20] M. Br¨uckner and T. Scheffer, “Stackelberg Games for Adversarial

Prediction Problems.”

[21] Y. Zhou and M. Kantarcioglu, “Modeling Adversarial Learning as
Nested Stackelberg Games.” [Online]. Available: https://goo.gl/UiJsUK
“IBM - Visual Recognition Demo.” [Online]. Available:

[22] IBM,

https://visual-recognition-demo.mybluemix.net/
“Project Wolf Eye,” 2017.

[23] Tam Nguyen,

https://github.com/genterist/wolfeye

[Online]. Available:

[24] “Microsoft Security Development Lifecycle.” [Online]. Available:
https://www.microsoft.com/en-us/SDL/process/implementation.aspx

[25] T.

and C. Rudin,

Tulabandhula
Operational Costs,”
vol.
14,
http://www.jmlr.org/papers/volume14/tulabandhula13a/tulabandhula13a.pdf

Learning with
Learning Research,
Available:

of Machine
2013.

Journal
1989–2028,

“Machine

[Online].

pp.

[26] Apache Organization,

“Apache

Spot.”

[Online]. Available:

http://spot.incubator.apache.org/

1) Pay attention to threat models while designing ML solu-
tions.
2) Make the ML model audit-able
3) Follow a secure development process
4)Produce an initial operational cost model
It is believed that these new tools will signiﬁcantly improve the
practical properties of ML based solutions. For the near future,
an automatic system will be built and be used to evaluate
the robustness of well-known ML based, open source cyber
security product such as Apache Spot [26]. Hopefully, it can
be developed into a threat model assessment tool that ML
solution designers can use to provide other metrics in addition
to the accuracy rate and prove the robustness of their solutions.

REFERENCES

[1] US Bureau of Labor Statistics, “Occupational Outlook Handbook:
[Online]. Available:

of Labor Statistics,”

2016.

U.S. Bureau
https://goo.gl/foVZk0

[2] C. V. N. I. Forecast, “Cisco visual networking index: Global mobile
data trafﬁc forecast update 2016-2021,” Cisco Public Information,
February, 2017. [Online]. Available: https://goo.gl/tIIk4D

[3] S. T. V. Pasca, S. S. P. Kodali,

“AMPS:
Application aware multipath ﬂow routing using machine learning
Twenty-third National Conference
on
2017
in
Communications (NCC).
IEEE, 3 2017, pp. 1–6. [Online]. Available:
http://ieeexplore.ieee.org/document/8077095/

and K. Kataoka,

SDN,”

in

[4] S. S. Bhunia and M. Gurusamy, “Dynamic attack detection and mitiga-
tion in IoT using SDN,” in 2017 27th International Telecommunication
Networks and Applications Conference (ITNAC).
IEEE, 11 2017, pp.
1–6. [Online]. Available: http://ieeexplore.ieee.org/document/8215418/

[5] L. J. Jagadeesan and V. Mendiratta, “Analytics-Enhanced Automated
Code Veriﬁcation for Dependability of Software-Deﬁned Networks.”

[6] J. Bendriss,

I. G. Ben Yahia, and D. Zeghlache, “Forecasting
in
Internet and
IEEE, 3 2017, pp. 127–134. [Online]. Available:

and anticipating SLO breaches
2017 20th Conference on Innovations
Networks (ICIN).
http://ieeexplore.ieee.org/document/7899402/

in programmable networks,”

in Clouds,

[7] D. Lee and C. S. Hong, “Access point selection algorithm for
providing optimal AP in SDN-based wireless network,” in 2017
19th Asia-Paciﬁc Network Operations and Management Symposium
(APNOMS).
[Online]. Available:
http://ieeexplore.ieee.org/document/8094148/

IEEE, 9 2017, pp. 362–365.

[8] W.-X. Liu, J. Zhang, Z.-W. Liang, L.-X. Peng, and J. Cai, “Content
Popularity Prediction and Caching for ICN: A Deep Learning Approach
With SDN,” IEEE Access, vol. 6, pp. 5075–5089, 2018. [Online].
Available: http://ieeexplore.ieee.org/document/8172025/

[9] M. Trevisan,

I. Drago, M. Mellia, H. H. Song, and M. Baldi,
“AWESoME: Big Data for Automatic Web Service Management
in
SDN,” IEEE Transactions on Network and Service Management,
[Online]. Available:
vol.
http://ieeexplore.ieee.org/document/8233196/

13–26,

2018.

15,

pp.

no.

1,

3

[10] S. Lee, J. Kim, S. Shin, P. Porras, and V. Yegneswaran, “Athena:
A Framework for Scalable Anomaly Detection in Software-Deﬁned
Networks,” in 2017 47th Annual IEEE/IFIP International Conference on
Dependable Systems and Networks (DSN).
IEEE, 6 2017, pp. 249–260.
[Online]. Available: http://ieeexplore.ieee.org/document/8023127/
[11] D. Hu, P. Hong, and Y. Chen, “FADM: DDoS Flooding Attack
Detection and Mitigation System in Software-Deﬁned Networking,”
IEEE Global Communications
in GLOBECOM 2017
Conference.
[Online]. Available:
pp.
http://ieeexplore.ieee.org/document/8254023/

- 2017
2017,

IEEE,

1–7.

12

[12] E. M. Hutchins, M. J. Cloppert, and R. M. Amin, “Intelligence-
Driven Computer Network Defense
Informed by Analysis of
Adversary Campaigns and Intrusion Kill Chains.” [Online]. Available:
https://goo.gl/HOhsqh

[13] Cisco, “NetFlow Version 9 Flow-Record Format

[IP Application

Services],” 6 2011. [Online]. Available: http://tiny.cc/lcvoky

[14] M. Blowers and J. Williams, “Machine Learning Applied to Cyber
[Online].

Springer New York, 2014, pp. 155–175.

Operations.”
Available: https://goo.gl/b0f0tu

