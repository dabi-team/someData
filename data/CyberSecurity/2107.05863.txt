2
2
0
2

y
a
M
3

]

R
C
.
s
c
[

2
v
3
6
8
5
0
.
7
0
1
2
:
v
i
X
r
a

Toward Safe Integration of Legacy SCADA Systems in
the Smart Grid

Aldar C-F. Chan
University of Hong Kong

Jianying Zhou
Singapore University of Technology and Design

May 4, 2022

Abstract

A SCADA system is a distributed network of cyber-physical devices used for in-
strumentation and control of critical infrastructures such as an electric power grid.
With the emergence of the smart grid, SCADA systems are increasingly required to
be connected to more open systems and security becomes crucial. However, many of
these SCADA systems have been deployed for decades and were initially not designed
with security in mind. In particular, the ﬁeld devices in these systems are vulnerable to
false command injection from an intruding or compromised device. But implement-
ing cryptographic defence on these old-generation devices is challenging due to their
computation constraints. As a key requirement, solutions to protect legacy SCADA
systems have to be an add-on. This paper discusses two add-on defence strategies
for legacy SCADA systems — the data diode and the detect-and-respond approach —
and compares their security guarantees and applicable scenarios. A generic architec-
tural framework is also proposed to implement the detect-and-respond strategy, with
an instantiation to demonstrate its practicality.

1

Introduction

A SCADA (Supervisory, Control And Data Acquisition) system is a cyber network of com-
municating devices used for instrumentation and control of a distributed infrastructure, such
as an electric power grid, in order to manage the respective physical processes. The SCADA
system of a power grid can monitor and control various electric equipment along the power
delivery path — including various transformers, circuit breakers, protective relays and au-
tomatic re-closers — while acquiring different measurements, which provide information
about the loading conditions at different parts of the power grid and health conditions of
transmission lines, etc. Hence, correct operation of a SCADA system is critical to the reli-
ability of any power distribution system [2, 3].

A successful malicious attack targeting at the SCADA system could potentially cause
extensive power outage. Such service disruption could even have cascading effects onto
other critical infrastructures [3]. However, most of the SCADA systems currently in ac-
tive use have been deployed for decades and very few of them were originally designed
with security in mind [19, 22, 29]. These legacy SCADA systems were assumed to operate

1

 
 
 
 
 
 
in isolation at ﬁrst, with obscurity and physical isolation being the main security strategy.
But nowadays, this design assumption is challenged not only by new security threats —
including demonstrated break-in’s of power substations [28], discovered worms on PLCs
(Programmable Logic Controllers) and other industrial control system platforms [17, 23],
and the exposure of supposedly obstructed documents (such as SCADA system conﬁgura-
tion and operation manuals) on the Internet [19] — but also by the changing operational
model which desires a higher level of integration with relatively open systems [14], such as
the AMI (Advanced Metering Infrastructure), in the envisioned smart grid for data sharing
and orchestration of process control.

The increasing connectivity of these legacy SCADA systems with external smart grid
systems, with comparatively more open access, could increase the attack surface for attack-
ers to compromise devices inside the SCADA systems or send forged data or commands
directly from outside. Nonetheless, these legacy SCADA systems will take decades to be
phased out from operation since they are so highly integrated with the power equipment
It is thus essential to devise protection mechanisms to safeguard
they monitor [7, 22].
legacy SCADA systems as they are increasingly integrated with newer smart grid systems.
In particular, legacy SCADA systems are typically vulnerable to forged data or com-
mands sent from intruding or compromised devices (i.e. insider attacks) [2, 7, 13, 19, 22,
26]. For instance, a compromised SCADA RTU (Remote Terminal Unit) could launch a
false command attack whereby an attacker impersonates the master station to send false
control commands to other RTUs, say, to maliciously trip a particular circuit breaker. On
the other hand, false readings from compromised instrumentation devices could present a
distorted picture of the system status to the master station, thus possibly triggering a false
alarm and disruptive actions [13]. Currently, most legacy SCADA systems could have little
defense to this kind of attacks as no source authentication or command veriﬁcation mecha-
nism is in place [2, 4, 7, 19, 22, 26].

Implementing cryptographic defence on the old-generation devices in these SCADA
systems is impossible due to their resource constraints, and protection has to resort to the
bump-in-the-wire approach [29], which is generally regarded as very inefﬁcient. While
authentication and authorization frameworks (such as IEC62351-8) — which are increas-
ingly applied for authentication and access policy enforcement in distributed smart grid and
newer SCADA systems [2, 26] — can avoid or minimize false command injection, it re-
mains challenging to deploy them in some legacy SCADA systems and protocols due to the
computational and communication overheads involved, as well as, the need of modiﬁcations
at both the protocol and device level. To avoid protocol modiﬁcation, legacy-compliant
message authentication [7] is proposed to embed authentication data as an additional pay-
load of some speciﬁc SCADA protocols. However, it requires modiﬁcations of the device
software and is applicable only to a few, usually newer SCADA protocols and devices that
are powerful enough to run common cryptographic primitives. Generic strategies through
enhanced incident management [1] or better process monitoring [3] could improve SCADA
system security but require a higher degree of human involvement and intervention. It is
fair to say truly add-on, non-intrusive protection for legacy SCADA systems and protocols
remains challenging.

This paper studies and compares two different strategies to secure legacy SCADA sys-

2

tems for safe integration with smart grid systems. Both approaches do not require any
modiﬁcation on the devices, protocols or communication channels, and are scalable for
different numbers of devices. The need of human intervention is also minimized. The
ﬁrst approach, called the “data diode” approach [10, 24, 30], is commonly adopted in the
industry and aims to preserve the isolation of a legacy SCADA system while facilitating
outward information ﬂow to newer smart grid systems. The second approach aims to open
up a legacy SCADA system for bidirectional information ﬂow, with mechanisms in place
to detect and identify false commands sent by intruding devices or compromised nodes.
This paper proposes a high-level, architectural framework for the second approach to im-
plement a detect-and-respond strategy to neutralize the effects of false command attacks
on a SCADA ﬁeld network. While this paper focuses on false command detection based
on veriﬁcation against an authenticated copy of each command received through a secure
channel, the framework provides a general basis for incorporating other attack detection
methods [13, 18, 12] to implement a defence strategy. This paper will also compare the
applicability and usability of the two approaches.

The contributions of this paper is two-fold. First, a generic architectural framework is
proposed to implement the detect-and-respond strategy for the protection of legacy SCADA
systems against false command attacks, with a view to opening up these SCADA systems
for integration with relatively more open smart grid systems. The proposed technique is
non-intrusive and truly add-on without requiring modiﬁcations on existing devices and sys-
tems. It is also scalable in the sense that only one defending device is needed per ﬁeld
network. To demonstrate the practicality of the proposed framework, an instantiation of
the detect-and-respond strategy on the Siemens Sinaut 8FW protocol [27] — a common
industrial protocol for legacy SCADA systems — is presented with performance results.
Second, this paper presents a comprehensive review of the current landscape of research
in legacy SCADA system protection. It compares the data diode and detect-and-respond
approaches, discussing their beneﬁts and limitations, and provides practical guidelines for
their application.

The rest of this paper is organized as follows.

In the next section, legacy SCADA
systems and false command attacks against them are discussed. The data diode strategy
and the detect-and-respond strategy are presented in Section 3 and Section 4 respectively.
Finally, Section 5 concludes with a comparison of the two strategies.

2 False Command Attacks against Legacy SCADA Systems

A typical SCADA system, as depicted in Figure 1, consists of PLCs and RTUs in the older
versions and IEDs (Intelligent Electronic Devices) in the newer versions as the basic units
for deployment in power substations or remote sites (for monitoring transmission lines) at
different geographic locations. Each of these ﬁeld devices has interfaces to sensors and
actuators used to monitor and control equipment in a power delivery system. The ﬁeld de-
vices in a substation or remote site form a local area network, known as the ﬁeld network,
and are usually connected together over a broadcast medium to a sub-master or data con-
centrator, which in turn is connected to the MTU (Master Terminal Unit) or master station

3

at the main control center through leased lines over a telecom operator’s network. While
various topologies are in use for connecting ﬁeld devices with the sub-master, a broadcast
channel — such as EIA-485 serial ports in the party-line mode over a pilot cable (as shown
in Figure 2) or DNP3 in the multi-drop or data concentrator mode1 — is typically used in
SCADA systems.

Figure 1: A typical legacy SCADA system and the possibility of false command attacks

Despite cost efﬁciency achieved in cable layout and maintenance, the use of broadcast
channels also eases insider attacks from compromised devices. For example, a compro-
mised RTU can pose the MTU to issue a forged command to another RTU or PLC, causing
the latter to behave abnormally. Experiments have been repeatedly reported to demonstrate
the possibility of using off-the-shelf protocol analyzer software to intercept control mes-
sages and inject false commands in some legacy SCADA systems [13], with some showing
the possibility to trip a circuit breaker maliciously. In a few cases, even though the circuit
breaker signaled the master station that it had opened, the master station did not respond as
it had not instructed the circuit breaker to open.

This type of attacks was inconceivable in the original design of SCADA systems, and
SCADA devices have little resource to defend against them. Obscurity in system design,
command formats and operation, combined with physical isolation, have long been the main

1Earlier SCADA systems were designed based on proprietary protocols. DNP3 is a standard adopted in

newer SCADA systems for connecting RTUs and IEDs with an MTU.

4

Figure 2: EIA-485 serial ports connected in the party-line mode

and possibly the only strategy for securing legacy SCADA systems. However, the effective-
ness of obscurity may have become unreasonable. For instance, it has been demonstrated
that fuzzing can effectively discover or recover unknown SCADA commands of a SCADA
device [6]. Physical break-in’s to power substations have been occasionally reported [28].
Even worse, obscurity and isolation are no longer effective in the envisioned smart grid,
wherein SCADA systems have to coexist and possibly communicate with other relatively
more open networks, in order to implement two-way ﬂow of information and energy. Op-
eration in isolation could be an overly strong assumption for SCADA systems to operate
nowadays against the smart grid backdrop.

Exploitation of software vulnerabilities on ﬁeld device computing platforms is a neces-
sary, key step to compromise ﬁeld devices in a SCADA system. This is the only possible
way which allows an attacker to install his code on a target machine and spread it to others.
The belief that embedded processors used in ﬁeld devices have relatively less exploitable
software vulnerabilities or it is difﬁcult to compromise an embedded system has become
untenable, as demonstrated by the case of the Stuxnet worm discovered in 2010, which has
a rootkit to infect PLCs over a proprietary SCADA system and damaged a number of cen-
trifuge equipment in an Iranian nuclear facility [17, 23]. Subsequent generations of Stuxnet
were also discovered. In fact, it has been demonstrated that with crafted instructions and
data, compromising an embedded processor is within reach to attackers in general. These
compromises could normally go undetected by the MTU since, as demonstrated by the
Stuxnet worm, a compromised device could play man-in-the-middle to conceal all mali-
cious activities from the MTU.

In addition, should a physical break-in to a substation or remote site be possible, an
attacker could simply tap in his own attacking devices directly onto the SCADA network to
manipulate other innocent devices. With the increasing connectivity with other systems in
the smart grid, this threat is particularly real since these newer smart grid systems typically
allow more open access to general users. For instance, a smart meter may be accessible to

5

a household user’s computer for reading meter data and setting consumption patterns and
alerts. Similarly, an electric vehicle (EV) charging station in a public car park could have
a digital interface open for the general public for functionalities like making reservation or
checking charging status of an EV.

3 Data Diode Approach

A data diode is a unidirectional gateway, similar to a ﬁrewall, which sets a digital barrier
to enforce network perimeter control for a restricted network (such as a SCADA system)
and fend off unwanted accesses from the less secure networks it is connected to (such as
smart grid systems). Yet a data diode provides a stronger security guarantee than a ﬁre-
wall since strict one-way communication — from the restricted network to the less secure
network only — is enforced by a certain physical law rather than digital logic, with little
chance of reverse communication. Data diodes are often built using ﬁbre optics coupler or
transceivers, through the removal of the transmitter component from one side of the com-
munication and the respective receiver component from the opposite side.2 This makes it
physically impossible to compromise such devices to achieve reverse connectivity. More-
over, they usually do not contain ﬁrmware, thus requiring minimal or no conﬁguration at
all, or have minimal software supported by micro-kernels that can be formally veriﬁed.
Whereas, ﬁrewalls are often prone to conﬁguration mistakes and relatively accessible for
exploit by skilful attackers. While ﬁrmware upgrade is regularly needed in ﬁrewall main-
tenance, patching is seldom needed for data diode deployment. Finally, data diodes are
the only devices receiving the EAL7 (Evaluation Assurance Level 7), the highest grade
in the Common Criteria [9] (an international standard evaluating the level of security of
equipment).

Data diodes allow organisations to retrieve valuable data generated at the process level
from a critical infrastructure for consumption by a wider group of users in a relatively more
open system while assuring the isolation and integrity of the critical infrastructure. As
shown in Figure 3, a data diode allows data acquired by SCADA ﬁeld devices to be pushed
from the SCADA system so that they can be combined with other datasets captured by smart
grid systems like AMI and EV systems which poll the physical conditions of the same elec-
tric power grid, in order to give a more holistic and precise picture of the conditions of the
electric power grid for more accurate data analysis and hence resource planning. The cor-
relation of these different datasets can also provide valuable insights for fault identiﬁcation
and predictive maintenance. Should the analysis lead to desired actions to be carried out
in the SCADA system, the feedback will be through human communications. While exis-
tence of compromised nodes is possible in the smart grid systems, the data diode guarantees
that they cannot send in false commands to ﬁeld devices in the legacy SCADA system or

2Although different hardware implementations of a data diode exist, supporting different physical channels
(e.g. RS-232, EIA-485, USB, Ethernet), most implementations make use of optical couplers to guarantee
physical isolation.

6

Figure 3: Deployment scenario of the data diode approach

Figure 4: TCP message ﬂow in a unidirectional gateway [10]

7

infect/compromise them.

Despite similarities in the isolation mechanism, commercially available data diode solu-
tions differ in supported services and protocols. In order to support TCP/IP-based SCADA
protocols, such as MODBUS/TCP and DNP3, data diodes usually have to make use of
additional software components for each side of the unidirectional link to emulate the bidi-
rectional message ﬂow for the three-way handshake and acknowledgements needed in a
typical TCP session. As demonstrated by [10] and shown in Figure 4, the software compo-
nents include an application proxy and a protocol breaker. The application proxy emulates
the TCP server on the sender side to respond to the SCADA device (TCP client) with TCP
connection-oriented messages and acknowledgements while forwarding messages from the
TCP client to the unidirectional link. Similarly, the application proxy emulates the TCP
client on the receiver side. But it does not forward any message from the TCP server on the
receiver side to the unidirectional link. Note that only TCP connection messages sent from
the SCADA system to the smart grid system are allowed by the data diode. The protocol
breaker acts as a middleware for packet encapsulation and possibly applying encryption
and forward error correction (FEC) to data transferred over the unidirectional link. FEC
is especially important to ensure correct data delivery for the noisy environment of typical
SCADA systems.

4 Detect-and-Respond Approach

While data diodes provide strong security and isolation/decoupling assurance for legacy
SCADA systems, sometimes they are too restrictive for certain application scenarios of
the smart grid. Neither is it optimal to rely on human communications for feedback to a
SCADA system. There is a realistic need for two-way ﬂow of data between a SCADA
system and a smart grid system. Proposals such as [30] therefore emerged to add a reverse
channel to data diodes. But whether the advantages of a data diode over a typical ﬁrewall
can be preserved in such a modiﬁcation is highly uncertain. More importantly, to what
degree that the security assurance of a data diode is undermined with the addition of a
reverse channel needs to be assessed carefully. In scenarios requiring bidirectional data
exchange between a SCADA system and a smart grid system, it is therefore more reasonable
to assume the existence of compromised devices in the SCADA system [13, 16, 18, 12, 19,
22, 23] and devise mechanisms to detect false commands [13, 16, 18, 19] and/or identify
compromised nodes [19, 22]. In general, a detect-and-respond strategy is preferred despite
that many of the proposed schemes in the literature merely cover attack detection. Once
a false command is detected, its impacts should be voided or neutralised promptly, and
ideally, in an automatic manner with minimum human intervention required.

This paper presents a generic, high-level architectural framework to implement the
detect-and-respond strategy for legacy SCADA systems. An embodiment in the form of
a trusted protection agent is also given to illustrate typical steps needed to neutralise the
effects of false commands injected by compromised ﬁeld devices. The notion of the pro-
tection agent is similar to that of a trust node in [12]. The difference is that the protection
agent actively neutralises the effects of false commands, whereas, the trust node only serves

8

as a trusted routing agent to selectively relay messages between ﬁeld devices and the mas-
ter station. Since the framework is deﬁned in a general setting, it should be applicable to
different types of SCADA protocols and provide a basis for systematically crafting defence
mechanisms ﬁt for different SCADA systems and ﬁeld devices. Besides, there is ﬂexibility
for incorporating different detection algorithms or mechanisms such as [13, 18] into the
framework. The framework is also complementary to and could be combined with other
approaches [1, 3, 7] for securing SCADA systems.

The underlying assumption for implementing the detect-and-respond strategy with a
protection agent is that the protection agent is well protected with different protection mech-
anisms in place to implement the defence-in-depth strategy so as to minimize the probability
of its compromise. In practice, there are various conventional techniques to achieve the se-
curity hardening of the protection agent effectively, which will be discussed in Section 4.1
and 4.4. In the worst case, if a physical break-in to a power substation happens, the pro-
tection agent could be compromised. But the question is, if an attacker successfully breaks
in to a power station, he could actually tap in his own device to launch any type of attacks.
The only reason for him to compromise the protection agent is to stop the protection agent
from alerting the master station in order to conceal his attacks. That is, even for physical
break-in’s, the protection agent would only increase the difﬁculty for an attacker to launch
attacks sneakily.

4.1 Protection Agent

As depicted in Figure 5, a protection agent is installed as an add-on device in each ﬁeld
network of a SCADA system, which can be made up of PLCs, RTUs or IEDs. Leveraging
on the broadcast medium typically found in most ﬁeld networks, the protection agent — as
a network sniffer — monitors commands issued to all the ﬁeld devices on the network to
detect malicious activities. As a safe assumption, the protection agent is generally a much
more powerful machine than typical ﬁeld devices, given that the underlying processor used
in the protection agent could be generations away from those used in the ﬁeld device of
a legacy SCADA system. In addition, compared to the low-bandwidth physical channel
used by these ﬁeld devices (typically, in the range of 1.2-19.2 kbps [27, 20, 29]), the pro-
tection agent can easily be equipped with a wireless link of much higher bandwidth to the
MTU or master station. Note that the design of the protection agent does not preclude other
communication channels such as a ﬁber link.3 We can therefore assume that the protection
agent has a faster (with a higher bandwidth and a lower latency) and typically more reliable
communication channel (for most of the time) with the MTU than the ﬁeld devices. On the
basis of a more powerful machine with a faster communication channel to the MTU, secu-
rity hardening on the protection agent is much easier. We assume that the protection agent
has a secured, authenticated channel with the master station. Multi-factor entity authentica-
tion (for example, those based on pre-shared secret keys stored in a tamper-resistant device,
physical unclonable functions [25, 15], or even new approaches [8] etc.) could be adopted
to implement this authenticated channel to strengthen its security assurance. Compared

3A wireless channel is assumed here simply because it is one of the common approaches for adding new

communication channels between a remote substation and a control centre.

9

to the ﬁeld device platforms with little resources for the implementation of cryptographic
defence, the protection agent is more ready to implement cryptographic algorithms and pro-
tocols, and other security mechanisms requiring more resources (such as ﬁrewall or remote
code attestation). In short, the protection agent can be viewed as a trusted proxy for the
MTU.

Figure 5: A SCADA system with protection agents installed

On the other hand, the protection agent can be seen as a reliable incognito for the MTU,
monitoring what is happening in the ﬁeld network. It is assumed that the protection agent
can interpret the underlying protocol messages (as coded in its design) and can sniff mes-
sages in the ﬁeld network. As discussed in Section 2, devices in the same ﬁeld network
are usually connected over a broadcast channel, meaning that such trafﬁc snifﬁng is a prac-
tical assumption. Difference in topology would only affect the number devices that can
be eavesdropped. With the protection agent monitoring the trafﬁc in place, the previously
observed problem of some legacy SCADA systems that the MTU is not aware of a circuit
breaker having been tripped by an attacker since it has not initiated the tripping [11] would
not happen if a protection agent is installed in the ﬁeld network. When the protection agent
observes the tripping command in the ﬁeld network but does not receive the same command
through the trusted communication channel shared with the MTU, it would report the trip-
ping event back to the MTU, which would then be aware of a possible intrusion. While
there is possibility that an attacker might physically remove the protection agent from a
ﬁeld network, security mechanisms could be implemented on the protection agent to detect
any malicious removal. For instance, the MTU can run a challenge-response veriﬁcation

10

protocol with the protection agent by sending a sequence of specially crafted random mes-
sages (i.e. nonces) — destined at a void device identity — to the protection agent via the
ﬁeld network; if the protection agent is disconnected from the ﬁeld network, it would not
be able to receive these messages to respond to the MTU’s challenge correctly. Besides,
remote code attestation could be implemented to provide the assurance that the software
being executed on the protection agent has not been tampered with. It should be empha-
sized that a protection agent offers more resources and ﬂexibility than a typical ﬁeld device
like an RTU or PLC for implementing preventive security measures and intrusion detection
mechanisms.

4.2 Detect-and-Respond Defence of Protection Agent

The detect-and-respond mechanism of the protection agent can simply be implemented as
a ﬁnite state machine as shown in Figure 6. The basic idea is as follows:

1. Whenever the MTU issues a SCADA command to any ﬁeld device, it also sends an
authenticated message of the same command (protected by a certain cryptographic
algorithm such as AES-CCM) to the corresponding protection agent which is con-
nected to the same ﬁeld network as the concerned ﬁeld device is in.

2. The protection agent listens or eavesdrops in the ﬁeld network, snifﬁng all SCADA
commands issued to the ﬁeld devices in the same ﬁeld network, and veriﬁes the au-
thenticity and integrity of each of these SCADA commands by comparing them with
the authenticated commands directly received from the MTU in the authenticated
channel shared between the protection agent and the MTU.

3. For any forged or false command detected (say, by comparing the command received
in the ﬁeld network and that received in the secured channel), the protection agent,
possibly after verifying with the MTU, issues a SCADA command to the affected
ﬁeld device to reverse the action caused by the false command to cancel out any
undesirable action initiated by the attacker. This is called the “ﬁght-back” or neutral-
ization mechanism as the protection agent takes action — in response to a detected
malicious command — to correct it.

In principle, the neutralization mechanism could invalidate or void out forged com-
mands, restoring the ﬁeld device to the original state. But the degree of neutralization or
residual effect of a false command would depend on the actual implementation of the logic
and the SCADA command set of a ﬁeld device. This defence approach shares some simi-
larities with the ﬁght-back mechanism of OSPF (Open Shortest Path First) — a link state
routing protocol used in the Internet — through which an innocent router could publicly
renounce a malicious route update forged by an attacker [21].

In case of missing commands, the protection agent can request the MTU to resend
a command over the secured, authenticated channel for veriﬁcation. Besides, the imple-
mentation of the protection agent could be further extended by including additional false
command detection mechanisms beyond comparison with an authenticated copy of a legit-
imate command. For example, the detection mechanisms of [13, 18] can possibly be used

11

Figure 6: The state machine diagram of a SCADA protection agent

12

State
Queue

Listen

Start

Check Rule

Verify
mand

Com-

Description
State to queue newly re-
ceived SCADA and authenti-
cated commands

Tasks
• read commands from the receiving port
• queue the command to the SCADA or

authenticated queue accordingly

Idle state when the SCADA
queue is empty

• check if the SCADA queue is non-
empty and trigger the “Start” state
when the queue is non-empty

State to tell between a new
SCADA command received
or an old SCADA command
pending the completion and
conﬁrmation of corrective ac-
tions taken

to see if

State to check the local rule
set
the received
SCADA command is illegit-
imate and violates the pre-
scribed rules

State to check whether the re-
ceived SCADA command is
really from the MTU through
the use of the authenticated
channel

• check whether a new SCADA com-
mand arrives and trigger command ver-
iﬁcation if positive

• evaluate the SCADA command against

the local rule set

• if the SCADA does not pass any of
the rules, trigger the correction pro-
cess. Otherwise, check the authenticity
of the SCADA command

• if the SCADA command has a matched
authenticated command received in the
authenticated queue, issue a pass, oth-
the MTU to verify
erwise,
through the authenticated channel and
check again

request

• if the SCADA command fails, trigger

the correction process

Fight-back

State to correct or reverse the
actions caused by a malicious
command

• look up from a pre-set table for the cor-
rective actions needed for a particular
SCADA command

Verify Correc-
tion

State to conﬁrm that the cor-
rection is in effect

• issue the listed SCADA commands to
the affected RTUs to reverse the ac-
tions of the malicious command

• read the status of the affected RTUs to
conﬁrm that the corrective actions have
been applied

Table 1: Details of the protection agent implementation as a state machine

13

by the protection agent to trigger neutralization, preferably after conﬁrmation by the MTU.
However, in order to respond correctly to any maliciously injected commands, the deployed
detection mechanism should provide sufﬁcient details to help identify the commands falsely
injected by the attacker.

In some cases, a forged or malicious command could be immediately detected in the
local ﬁeld network without relying on authenticated messages from the MTU. For example,
the remote software update of a ﬁeld device is normally prohibited by most utility operators.
However, in some SCADA systems composed of RTUs, the denial of a remote software up-
date request is implemented on the MTU side only, while the RTUs in the ﬁeld network
usually have no mechanism to deny a software update request or distinguish whether it is
initiated by the MTU or an intruding device. In other words, a compromised RTU or an in-
truding attacker device could still initiate a remote software update at any RTU in the same
ﬁeld network, which will not be denied by the latter. This ﬂaw would greatly facilitate
the spread of worms or malicious instruction sequences over a ﬁeld network. In a typical
SCADA deployment, a ﬁrewall usually only safeguards a ﬁeld network from external at-
tacks and would not be able to stop such an insider threat since the attack is launched from
within the ﬁeld network by a compromised ﬁeld device or an intruding device connected
to the ﬁeld network.
In contrast, the protection agent could possibly halt the malicious
software update. A local rule set can be implemented on the protection agent, explicitly
specifying that only manual update is allowed. When the protection agent detects an au-
tomatic software update command, it can immediately halt the update by issuing another
command, without having to check with the MTU.

The same technique can be used for other clearly harmful actions. For instance, the pro-
tection agent can enforce that a certain range of parameters is prohibited in some SCADA
commands. With the local rule on protection agents, the damage of the centrifuge equip-
ment caused by the Stuxnet worm could be avoided, since the command with parameters
causing excessive spin speed could be invalidated by the protection agent. Similarly, the
protection agent can be conﬁgured to eliminate or invalidate set point commands — which
are used in typical SCADA systems to preset the thresholds on certain measured system
variables (such as voltages or phase angles at certain point of a power grid) for triggering
protective actions like tripping a circuit breaker — with harmful parameters.

In details, two command queues are implemented in the protection agent, which respec-
tively stores SCADA commands received in the ﬁeld network and authenticated commands
received through the secured, authenticated channel between the MTU and the protection
agent. When the SCADA command queue is empty, the protection agent is at the “Listen”
state waiting for new SCADA commands. The arrival of a new SCADA command will
trigger the protection agent to verify the authenticity of the requested action and reverse it
in case it is a fake command. A list of tasks to be implemented at different states of the
protection agent is shown in Table 1.

The detect-and-respond strategy deviates from intuition and standard techniques used
in securing a communication network. Whereas existing schemes would suggest ﬁltering
all bogus messages injected by an attacker, the proposed mechanism aims to tolerate the
intrusion for a while if the resulting malicious actions are not critically harmful and then
correct or neutralize the malicious actions. For critical actions which are usually banned by

14

norm, the local rule set in the protection agent would stop them immediately from onset.
Since the detect-and-respond approach favors local, distributed defence, it is more scalable
than centralized defence mechanisms.

4.3 Example Implementation with Siemens Sinaut 8FW Protocol

Table 2 illustrates how the detect-and-respond defence strategy can be implemented with
respect to the command set of the Siemens Sinaut 8FW protocol [27], a popular industrial
protocol commonly used in legacy SCADA systems. The Sinaut 8FW protocol was the
standard protocol used by Siemens devices and systems for communicating control and
monitoring messages between MTU systems and RTU devices before being replaced by
IEC 60870-5-101. It was broadly supported by devices provided by other manufacturers
like ABB and GE. While the principle of the detect-and-respond strategy can be equally ap-
plied to newer protocols like IEC 60870-5-101 and 60870-5-104, its implementation with
these protocols is outside the scope of this paper, partly because it is possible to implement
authentication mechanisms in these protocol [26]. In contrast, the resource constraints of
devices running the Sinaut 8FW protocol preclude the possibility of implementing any se-
curity mechanism despite that the protocol is still actively used in a non-negligible fraction
of systems. In other words, it is more critical to investigate add-on protection for the Sinaut
8FW protocol over others. Each command is enclosed in a control message in the form of a
telegram. Table 2 only shows telegram types sent in the control direction (from the MTU to
ﬁeld network), with other telegram types in the monitoring direction (from the ﬁeld network
to the MTU) skipped since these telegram types are largely for messages sent to the MTU.
False commands that may have critical impact on the functioning of a SCADA system
are neutralized ﬁrst and then veriﬁed with the MTU, whereas, the less critical ones are cor-
rected upon conﬁrmation from the MTU. Most of the neutralization actions can be readily
implemented through the replace command telegram. For commands which switch on/off a
certain feature or function, the neutralization can simply be done by toppling the command
in the oppositive direction with respect to the false command. For commands which involve
updating of parameters like thresholds or set points to trigger preventive actions, the protec-
tion agent stores the latest version of all the parameters of a ﬁeld device (with parameters of
different ﬁeld devices stored in different tables) and apply relevant ones to form a replace
command when necessary to revert the parameters affected by a false command.

Experimentation was carried out on an Intel 2.5GHz Quad Core Celeron CPU (with
8GB RAM) — which simulates the protection agent — to estimate the response time of
the protection agent to issue a neutralization command or telegram for different types of
false commands. The protection agent is connected to a server (which simulates the master
station) through a WiFi link. On the other side, the protection agent is connected to another
single board computer through a RS232 serial port (set at a baud rate of 19200), which sim-
ulates a compromised ﬁeld device (in Scenario 1) or a master station (in Scenario 2) to issue
commands to the protection agent. Two types of response time are measured corresponding
to two different scenarios. In the ﬁrst scenario (i.e. Scenario 1), the protection agent is set
to receive no message from the master station and the compromised ﬁeld device (simulated
by the single board computer) injects a false command to the serial port to trigger the pro-

15

Telegram Type

• control (Type 64)
• replace command (Type 195)

neu-

Priority
to
tralize
High

Protection agent’s actions to neutralize

• Topple the command
• Report the action back to MTU and wait
If negative ac-
topple the

for acknowledgement.
knowledgement
command back.

is received,

• analogue/digital set point (Type 65-67/68-

High

• Temporarily store a copy of the suspected

command

• Apply the latest conﬁrmed parameter set-
ting stored in the protection agent to form
a command

• Use replace command (Type 195)

to

switch the parameter setting back

for acknowledgement.

• Report
the action back to MTU and
If nega-
wait
tive acknowledgement is received, apply
the stored suspected command, otherwise,
erase stored command

• Report to the MTU and wait for conﬁrma-
tion. If conﬁrmed, topple the command.

• Report to the MTU and wait for conﬁrma-
tion. If conﬁrmed, topple the command or
restore the stored parameters.

70)

• modiﬁcation of threshold value limit (Type

205)

• modiﬁcation of smoothing factor (Type

206)

• remote parameterization (Type 212)

• start-up request (start up/restart) (Type

Medium

211)

• switch on/off recipient in master station

(Type 203)

• switch off record transfer from/to station

(Type 204)

• switch on/off for temporal lists (Type 201-

Low

202)

• synchronization of ﬁne time (type 207)
• setting of minutes (Type 208)
• setting of calendar (Type 209)
• switch on/off addresses in the lists (Type

210)

• 4-byte-storage interrogation control (Type

214)

• interrogation command ZFBIT and STOP-

cause (Type 215-222)

• check command (Type 192)
• check command (type 192)
• message

repeat

request

Low

• Neutralization is not necessary.

/

TFK-

acknowledge (Type 193)

• start acknowledgement (Type 194)
• single/group interrogation command (Type

196-197)

• multiple request (Type 198-200)
• matrix-check command (Type 213)

Table 2: Implementation of the detect-and-respond defence on Siemens Sinaut 8FW proto-
col
16

tection agent to neutralize the command. The response time needed to issue a neutralization
command after the injection of a false command is measured. In the second scenario (i.e.
Scenario 2), the single board computer simulates an authentic command from the master
station. That is, the injected command is authentic but the protection agent mistakenly con-
siders it as a false command. The protection agent ﬁrst issues a neutralization command and
then queries the master station which always returns a negative acknowledgement. That is,
the protection agent has to switch back the command and cancel the effects of the neutral-
ization command. The response time for the protection agent to issue the second command
after the injection of the ﬁrst command by the single board computer is measured.

The experimental measurements are presented in Figure 7. The average response time
required for the protection agent to look up the parameter for a particular ﬁeld device iden-
tity and issue a neutralization command or telegram for different types of false commands
(at high priority) is 45.52 ms with a standard deviation of 9.28 ms. The average response
time required for the protection agent to switch back the command for the second scenario
is 175.32 ms with a standard deviation of 27.5 ms. Compared to the maximum tolera-
ble delay for SCADA transactions, which is 0.54s [5], this processing delay is acceptable
(respectively, 8.4% and 32.4% of the maximum tolerable delay).

Figure 7: Response time of the protection agent for: (a) Scenario 1: Neutralization of a
malicious command; (b) Scenario 2: Ratiﬁcation of false neutralization.

17

4.4 Security Analysis

The key assumption for the detect-and-respond mechanism based on a protection agent is
that the protection agent is trusted and has a reliable communication channel to the master
station. This should be a reasonable assumption in practice.

First, it is considerably harder to compromise a protection agent than a typical ﬁeld
device. But it is easier to detect any compromise of the protection agent. As discussed in
Section 4.1, since the protection agent is based on a more powerful computing platform
compared to a ﬁeld device, various techniques — such as remote code attestation to ensure
that a correct version of software is executed on the protection agent and challenge-response
veriﬁcation to ensure that the protection agent is not disconnected from the ﬁeld network
— can be readily applied to strengthen the security assurance of the protection agent and
detect any compromise. Besides, if a protection agent is compromised, the attacker can
cause no more harm than what he can achieve with a compromised ﬁeld device when no
protection agent is deployed. Since compromising a protection agent is more difﬁcult than
compromising a ﬁeld device, adding a protection agent would make the job of an attacker
more difﬁcult and strengthen system security.

Second, the more powerful platform used for a protection agent (compared to a ﬁeld
device) enables the implementation of common cryptographic primitives, thereby allowing
the use of standard protocols such as the TLS (Transport Layer Security) to secure the com-
munication channel between a protection agent and the master station. The conﬁdentiality
and authenticity of each message sent over the channel is thus assured. An out-of-band
wireless channel is assumed for the communication between a protection agent and the
master station because it is the most cost-effective way, and a popular means, to add a new
communication channel to a power substation. To address the reliability issues associated
with a wireless channel, the protection agent can request the master station to resend any
missed command or explicitly acknowledge/conﬁrm any command it has sent through the
ﬁeld network. Since such a channel usually has a higher bandwidth and a lower latency
compared to the ﬁeld network, the processing delay is usually reasonable. As demonstrated
by the experimental results, the latency for the conﬁrmation required for a missed command
(Scenario 2) seems practically acceptable. Alternatively, an in-band, authenticated commu-
nication channel [7] or a more reliable communication channel such as a ﬁber link could be
used.

4.5 Cost and Beneﬁt Analysis

The detect-and-respond strategy embodied by the protection agent offers a number of ad-
vantages as follows.

1. The protection mechanism is non-intrusive and truly add-on while strong crypto-
graphic mechanisms can be adopted to protect the communications between a ﬁeld
network and the MTU (via a protection agent), without replacing any ﬁeld devices
or modifying their code. No laying of new cables is needed, as wireless links like
mobile cellular networks could be used between protection agents and the MTU.

18

2. Compared to the bump-in-the-wire approach [1, 14] which adds a new cryptographic
device per ﬁeld device, a smaller number of protection agents are required, with one
required for each ﬁeld network in most cases. A typical ﬁeld network could have
at least 30 devices, whereas, the maximum number of ﬁeld devices per network is
limited by the protocol’s address space. As an example, up to 128 and 65535 devices
per network are allowed for Sinaut 8FW and IEC60870-5-104 respectively. Hence,
compared with the bump-in-the-wire approach, the detect-and-respond approach can
reduce the number of cryptographic devices by a factor between 1/128 and 1/30.
The minimum number of protection agents needed for a SCADA system is roughly
equal to the number of its ﬁeld networks. For instance, less than 100 protection
agents are needed to secure the SCADA system of Singapore’s 22kV distribution
grid (with ∼ 10, 000 substations and the IEDs connected in multiple ﬁeld networks
in a ring topology), whereas, 1-2 protection agents sufﬁce to cover that of its 66kV
distribution grid (with ∼ 100 substations and the ﬁeld devices connected through a
mesh topology). In other words, there are about 100 ﬁeld networks (with each in the
ring topology) for the SCADA system of the 22kV distribution grid, and only one
ﬁeld network in the mesh topology for the SCADA system of the 66kV distribution
grid.

3. The protection agent would not become a bottleneck since additional protection agents
can be deployed to a given ﬁeld network with many ﬁeld devices (say, more than 300
devices). In such cases, the set of ﬁeld devices in a network can be grouped into
partitions based on their identities and multiple protection agents could be installed
in the network with each responsible for a distinct partition. Since any number of
protection agents can be added to a ﬁeld network and the ﬁeld devices need not be
aware of the presence of a protection agent, the solution is scalable.

4. The detect-and-respond strategy is particularly effective for defending against insider
attacks, which existing solutions like ﬁrewalls often cannot withhold. A ﬁrewall
normally cannot ﬁlter messages sent from a ﬁeld device located behind it or forged
messages from outside if no authentication mechanism is in place. Unlike a ﬁrewall,
the protection agent does not present a single point of failure. If it is down, the ﬁeld
network would still operate as usual, which is not the case for a ﬁrewall.

5 Conclusions

The instrumentation and control of a power grid is usually carried out by a SCADA system
which is a distributed network of cyber-physical devices taking measurements and issuing
commands at different parts of a power grid. Obscurity and operation in isolation have long
been the security strategy of SCADA systems. However, this is no longer a reasonable as-
sumption for SCADA systems in the smart grid context with the need of connectivity with
other relatively open networks. False command injection is a real threat to legacy SCADA
systems. While effective security mechanisms and algorithms for command authentication
are largely an overkill for implementation on ﬁeld devices in legacy SCADA systems, these

19

Data diode
Highest (EAL7)

Detect-and-respond
Medium to High

Limited range

Wide range

Security assur-
ance
Applicable
cases
Pros

• Isolation preserved with a

high level of security

• No modiﬁcations on ﬁeld

devices required

• Highly
one
only
required per system

scalable, with
diode

data

Cons

• Only allow unidirectional
data ﬂow from SCADA
systems to other systems

• Little ﬂexibility

• Flexible to incorporate
other techniques for at-
tack detection and neu-
tralization

• Allow bidirectional data

exchange

• No modiﬁcation on ﬁeld

devices required

• Scalable

• More complex design re-
quired to maintain secu-
rity

• Design strongly depen-
dent on the SCADA pro-
tocols in use

Table 3: Comparison between the data diode and detect-and-respond strategy

devices would normally take decades to be phased out as they are closely integrated with
the power equipment. This paper discusses and compares two different approaches, namely,
the data diode strategy and the detect-and-respond strategy, to secure legacy SCADA sys-
tems for safe integration with other smart grid systems. A detailed comparison of the two
approaches can be found in Table 3.

The detect-and-respond strategy proposed in this paper presents a number of advantages
for securing legacy SCADA systems, including scalability and usability for a wide range
of smart grid scenarios. The proposed framework is also generally applicable to different
SCADA protocols and systems, while a concrete instantiation on Siemens Sinaut 8FW
protocol is presented in this paper. While the data diode strategy offers the highest level
of security guarantee, it can only be applied to a restricted number of use cases wherein
unidirectional data exchange sufﬁces. In contrast, the detect-and-respond strategy is a more
ﬂexible approach which can be applied in almost all scenarios but generally offer a lower
level of security guarantee and is more complex to design.

20

References

[1] C. Alcaraz, I. Agudo, D. Nu˜nez, and J. L´opez. Managing incidents in smart grids `a la
cloud. In Proccedings of IEEE CloudCom 2011, pages 527–531, December 2011.

[2] C. Alcaraz, J. L´opez, and S. D. Wolthusen. Policy enforcement system for secure in-
teroperable control in distributed smart grid systems. J. Netw. Comput. Appl., 59:301–
314, 2016.

[3] C. Alcaraz, J. L´opez, J. Zhou, and R. Roman. Secure SCADA framework for the
protection of energy control systems. Concurr. Comput. Pract. Exp., 23(12):1431–
1442, 2011.

[4] R. Amoah and E. Camtepe, S. amd Foo. Securing DNP3 broadcast communications
in SCADA systems. IEEE Transactions on Industrial Informatics, 12(4):1474–1485,
July 2016.

[5] C. L. Bowen, T. K. Buennemeyer, and R. W. Thomas. Next generation SCADA
security: Best practices and client puzzles. In Proceedings of the 6th Annual IEEE
SMC Information Assurance Workshop, June 2005.

[6] S. Bratus, A Hansen, and A. Shubina. LZfuzz: A fast compression-based fuzzer
for poorly documented protocols. Darmouth Computer Science Technical Report
TR2008-634, September 2008.

[7] J. H. Castellanos, D. Antonioli, M. O. Tippenhauer, and M. Ochoa. Legacy-compliant
data authentication for industrial control system trafﬁc. In proc. ACNS’17, Springer-
Verlag LNCS vol. 10355, pages 665–685, July 2017.

[8] A. C-F. Chan, J. W. Wong, J. Zhou, and J. C. M. Teo. Scalable two-factor authenti-
cation using historical data. In proc. ESORICS’16, Springer-Verlag LNCS vol. 9878,
pages 91–110, September 2016.

[9] Common Criteria. Common methodology for information technology security evalu-

ation, Rev. 5 (ISO/IEC 18045), April 2017.

[10] M. B. de Freita, R. T. Cruz, and P. Simoes. SDN-enabled virtual data diode.

In
proc. SECPRE’18, CyberICPS’18, Springer-Verlag LNCS vol. 11387, pages 102–118,
January 2019.

[11] A. Hahn. Cyber security of the smart grid: Attack exposure analysis, detection algo-
rithms, and testbed evaluation. Iowa State University Graduate Theses and Disserta-
tions, 2013.

[12] Md. M. Hasan and H. T. Mouftah. Optimization of trust node assignment for securing
IEEE Systems Journal, 13(2):1505–1513,

routes in smart grid SCADA networks.
September 2018.

21

[13] Y. He, J. Mendis, and J. Wei. Real-time detection of false data injection attacks in
IEEE Transactions on

smart grid: A deep learning-based intelligent mechanism.
Smart Grid, 8(5):2505–2516, May 2017.

[14] E. Heine, H. Khurana, and T. Yardley. Exploring convergence for SCADA networks.

In proc. ISGT’11, January 2011.

[15] C. Herder, M-D. M. Yu, F. Koushanfar, and S. Devadas. Physical unclonable functions
and applications: A tutorial. Proceedings of the IEEE, 102(8):1126–1141, August
2014.

[16] A. Humayed, J. Lin, F. Li, and B. Luo. Cyber-physical systems security — a survey.

IEEE Internet of Things Journal, 4(6):1802–1831, December 2017.

[17] R. Langner. Stuxnet: Dissecting a cyberwarfare weapon. IEEE Security & Privacy,

9(3):49–51, May 2011.

[18] H. Lin, A. Slagell, Z. T. Kalbarczyk, P. W. Sauer, and R. K. Iyer. Runtime semantic
security analysis to detect and mitigate control-related attacks in power grids. IEEE
Transactions on Smart Grid, 9(1):163–178, March 2016.

[19] S. McLaughlin, C. Konstantinou, X. Wang, L. Davi, A-R. Sadeghi, and R. Karri.
The cybersecurity landscape in industrial control systems. Proceedings of the IEEE,
104(5):1039–1057, March 2016.

[20] Mobus. Mobus over serial line — speciﬁcation and implementation guide v 1.02.

Mobus Docummentation, December 2006.

[21] G. Nakibly, A. Kirshon, D. Gonikman, and D. Boneh. Persistent OSPF attacks. In

proc. NDSS’12, February 2012.

[22] S. Nazir, S. Patel, and D. Patel. Assessing and augmenting SCADA cyber security: A

survey of techniques. Computers & Security, 70:436–454, September 2017.

[23] A Nourian and S. Madnick. A systems theoretic approach to the security threats in
cyber physical systems applied to Stuxnet. IEEE Transactions on Dependable and
Secure Computing, 15(1):2–13, February 2018.

[24] H. Okhravi and F. T. Sheldon. Data diodes in support of trustworthy cyber infrastruc-

ture. In proc. CSIIRW’10, pages 1–4, April 2010.

[25] R. Pappu, B. Recht, J. Taylor, and N. Gershenfeld. Physical one-way functions. Sci-

ence, 297:2026–2030, 2002.

[26] D. S. Pidikiti, R. Kalluri, R. K. S. Kumar, and B. S. Bindhumadhava. SCADA commu-
nication protocols: vulnerabilities, attacks and possible mitigations. CSIT, 1:135–141,
2013.

22

[27] Siemens. Sinaut st-7 station control system — system manual. SINAUT Docummen-

tation, Edition 05/2001, May 2001.

[28] K. Tweed. Bulletprooﬁng the grid. IEEE Spectrum, April 2014.

[29] A. K. Wright, J. A. Jinast, and J. McCarty. Low-latency cryptographic protection for

SCADA communications. In proc. ACNS 2004, June 2004.

[30] J-H. Yun, Y. Chang, Kim K-H., and W. Kim. Security validation for data diode with

reverse channel. In proc. CRITIS’16, October 2016.

23

