Software Rejuvenation for Secure Tracking Control

Raffaele Romagnoli†, Bruce H. Krogh‡, Dionisio de Niz‡ and Bruno Sinopoli†
†Dept.of Electrical and Computer Engineering
‡Software Engineering Institute
Carnegie Mellon University
Pittsburgh, PA USA

dionisio
{rromagno
|
|

brunos}@andrew.cmu.edu
krogh
|

8
1
0
2

t
c
O
4
2

]

Y
S
.
s
c
[

1
v
8
6
4
0
1
.
0
1
8
1
:
v
i
X
r
a

Abstract— Software rejuvenation protects cyber-physical sys-
tems (CSPs) against cyber attacks on the run-time code by
periodically refreshing the system with an uncorrupted software
image. The system is vulnerable to attacks when it is commu-
nicating with other agents. Security is guaranteed during the
software refresh and re-initialization by turning off all com-
munication. Although the effectiveness of software rejuvenation
has been demonstrated for some simple systems, many problems
need to be addressed to make it viable for real applications.
This paper expands the scope of CPS applications for which
software rejuvenation can be implemented by introducing
architectural and algorithmic features to support trajectory
tracking. Following each software refresh, while communication
is still off, a safety controller is executed to assure the system
state is within a sufﬁciently small neighborhood of the current
point on the reference trajectory. Communication is then re-
established and the reference trajectory tracking control
is
resumed. A protected, veriﬁed hypervisor manages the software
rejuvenation sequence and delivers trusted reference trajectory
points, which may be received from untrusted communication,
but are veriﬁed using an authentication process. We present the
approach to designing the tracking and safety controllers and
timing parameters and demonstrate the secure tracking control
for a 6 DOF quadrotor using the PX4 jMAVSim quadrotor sim-
ulator. The concluding section discusses directions for further
research.

I. INTRODUCTION

Software rejuvenation, an established method to improve
the robustness against software faults in traditional comput-
ing systems [1], has been proposed recently to deal with
unmodeled and undetectable cyber attacks on cyber-physical
systems (CPSs) [2], [3]. The idea is to periodically refresh
the run-time system completely with a trusted, secure copy of
the control software to thwart attacks that may have changed
the on-line code. Although the basic concept has been imple-
mented for some demonstration systems, applications have
been limited to cases where all of the information required
for control is available a priori so that it can be reloaded with
each software refresh. This paper presents an architecture and
algorithms to support secure tracking control using software
rejuvenation when the reference trajectory points are being
updated from possibly insecure communication throughout
the execution of the mission.

The concept of software rejuvenation was introduced by
Huang et al. in 1995 [4] to address the problem of so-
called software aging; that is, failures that occur when a
running program encounters a state that was not anticipated

when the software was designed. The basic idea is to
restart the software intermittently at a "clean" state, either
through complete system reboot or by returning to a recent
checkpoint, with the hope that this will prolong the time until
unanticipated states occur that might cause failures. Since
the introduction of the concept, there has been considerable
research into the development and performance of software
rejuvenation strategies [5], and it has become a practical tool
for enhancing the robustness of many computing systems [1].
Although software aging remains the primary motiva-
tion for implementing software rejuvenation strategies in
computing systems, a few papers have proposed software
rejuvenation to enhance system security [6], [7]. In contrast
to software aging where mean-time to failure can be the basis
for timing software refresh, the frequency of software refresh
to defend against malicious attacks must be determined by
the length of time a system can remain viable once its
security has been violated.

Arroyo et al. [2], [3] propose software rejuvenation as a
strategy for CPS security and demonstrated the concept for
a quadrotor controller and an automotive engine controller.
These examples illustrate how refreshing software in a CPS
impacts performance and introduces timing constraints and
safety considerations that are not present in traditional com-
puting systems.

trust

Abidi et al. [8] develop software rejuvenation for CPS
further by introducing three concepts. First, the hardware
root of
is a secure onboard module that hosts the
capabilities that must be available without compromise to
implement software rejuvenation. Second, the secure exe-
cution interval (SEI) is a period during which all external
communication is disabled so that no cyber attacks can occur
as the software is refreshed. Third, the safety controller,
which executes immediately following a software refresh
and during the SEI, drives the CPS to a known safe state
before restoring communication and returning the system to
mission control with vulnerability to attacks. Abidi et al. use
a simple, conservative reachability algorithm to determine
the time that can be allowed before the next software reset
and illustrate their approach for a simulated warehouse
temperature controller and a bench-top 3-DOF helicopter.

In this paper, we adopt the overall approach to software
rejuvenation from [8], but modify the timing strategy based
on analysis of the control problem. We also use the concept

 
 
 
 
 
 
of a secure, trusted hypervisor introduced by Vasudevand et
al. [9], rather than separate hardware, to provide the required
secure computing components. We formulate the software
rejuvenation problem for tracking control applications, which
arise in many CPS applications. Using invariant sets to de-
sign the safety controller, an event-based algorithm to switch
reference points for the tracking controller, and data authen-
tication to manage reference points received from possibly
compromised communication, we demonstrate how software
rejuvenation can be used to achieve provable operational
safety and robustness against cyber attacks that take over
the system control by changing the run-time software. We
illustrate our contributions using simulation of the nonlinear
dynamics for a 6-DOF quadrotor.

The paper is organized as follows. Section II describes
the standard architecture of hierarchical
tracking control
systems and the event-based method for switching points to
be tracked along a reference trajectory. Section III presents
the design of safety controllers and timing for software reju-
venation based on invariant sets. Tracking control and safety
control are combined in Sec. IV to implement the software
rejuvenation algorithm using the hypervisor architecture. The
concepts are applied in Sec. V to implement a secure tracking
control system for a 6 DOF drone and simulation results
illustrate the tracking control performance when the system
is subjected to a cyber attack. An appendix provides the
mathematical details for the drone control application. The
concluding section discusses directions for further research
and development.

II. TRACKING CONTROL

CPSs that perform missions involving motion are typi-
cally operated using a hierarchical control architecture, as
illustrated in Fig. 1. A mission controller deﬁnes a sequence
of waypoints to be visited. A reference generator produces a
sequence of points called the reference trajectory to take the
CPS from waypoint to waypoint along a safe and feasible
path. Motion along the reference trajectory is executed by
a tracking controller that generates the commands to the
system actuators. Depending on the application, the mission
controller and reference governor may be onboard or off-
board, but
the trajectory controller usually needs to be
onboard to satisfy the real-time constraints for executing the
trajectory. This paper focuses on the implementation of the
tracking controller.

The tracking controller is typically implemented as a
regulator that will drive the system to a given set point, and
motion is accomplished by switching along the points on
the reference trajectory. Since it is not necessary to actually
stop at the points on the reference trajectory, the switching
from the current reference point to the next reference point
can be implemented using a time-based or event-based
scheme. In time-based schemes, the points on the reference
trajectory have time stamps and the reference point for the
tracking controller is updated as time evolves. In event-based
schemes, the reference point for the tracking controller is
updated when the system is within a given neighborhood

Fig. 1: Hierarchical tracking control systems.

of the current reference point. The secure tracking control
proposed in this paper uses the following event-based scheme
to update the reference points for the trajectory controller.

We assume the reference points along the reference tra-
jectory are equilibrium states for the system. Let xn denote
the current equilibrium reference point and suppose that a
feedback control law is implemented to drive the state of
the system to xn and stabilize it at that equilibrium set.
If xn is not the ﬁnal point in the reference trajectory (the
ﬁnal waypoint), the reference point can be updated to the
next reference point, denoted by xn+1 before xn is reached.
The condition for switching the reference point to xn+1 is
deﬁned by a region about the current reference point, denoted
ET C(xn). Figure 2 illustrates this event-based rule for
by
updating the reference point for tracking control.

Fig. 2: Event-based reference point update for tracking
control.

III. SAFETY CONTROL

This section describes the safety controller that plays a
key role in achieving secure tracking control using software

reference generatortrackingcontrolactuatorssystem dynamicssensorstrajectory executiononboardwaypointsreference trajectorymission controlpossibly off‐boardxnxn‐1xn+1ETC(xn‐1)ETC(xn)ETC(xn+1)switch to xnswitch to xn+1switch to xn+2rejuvenation. The safety controller is designed to guarantee
the state of the system remains within a safe neighborhood
of the current equilibrium point being used as the reference
point by the tracking controller, even if there is a cyber
attack. Let xeq denote the current equilibrium point for
tracking control, which we will refer to as normal control
in this section. The safe neighborhood of xeq, denoted by
EC(xeq), is a set of states satisfying the operating constraints
as well as the range of states around xeq for which the safety
controller is guaranteed to work properly.

During normal control, the system is vulnerable to cyber
attacks, which means that the run-time code may be modiﬁed
and the control actions can drive the system away from xeq.
The controller is also disabled during a software refresh,
which is performed before safety control can be executed. We
call this period of normal control followed by the software
refresh the period of uncertain control, with the duration
denoted by TU C.

To assure the state of the system does not exit

EC(xeq)
during the period TU C, it must be guaranteed the state is in a
sufﬁciently small neighborhood of xeq before normal control
(and vulnerability to attacks) is initiated such that the state
EC(xeq) with any control
trajectory cannot be driven out of
ESC(xeq) denote this
action available to an attacker. We let
EC(xeq) must
smaller neighborhood of xeq, and note that
satisfy one additional condition. That is, if safety control
is initiated when the system is at any state in
EC(xeq),
it must be the case that under safety control, the system
ESC(xeq) in ﬁnite time along a trajectory that
is taken to
does not leave
EC(xeq). Moreover, the safety controller must
keep the state trajectory in
ESC(xeq) once it has entered
ESC(xeq). In control terminology, it is necessary for
EC(xeq)
ESC(xeq) to be invariant under safety control.
and
The requirements for
⊂ EC(xeq)
are summarized by the following technical conditions:

EC(xeq) and

ESC(xeq)

i

ii

iii

t > 0, where
EC(xeq), t; SC)
⊆ EC(xeq)
(
R
EC(xeq), t; SC) is the set of states reached at time
(
R
t applying safety control (SC) starting at time t = 0
from any state in
¯TSC > 0

∀

t

EC(xeq);1
EC(xeq), t; SC)
(
)
ESC(xeq), t;
(

U

(cid:51) R

(cid:51) R

⊆ ESC(xeq)
⊆ EC(xeq)

∀

≥

t <

∀

∃
¯TSC; and

TU C > 0

∃
TU C.

Figure 3 illustrates the deﬁnitions and conditions described
EC(xeq),

above. Section V presents methods for ﬁnding
ESC(xeq) and TU C for a drone control application.
IV. SOFTWARE REJUVENATION FOR TRACKING
CONTROL

This section describes the architecture and the algorithm to
achieve secure tracking control using software rejuvenation
using the tracking controller and safety controller described
in the previous sections.

Figure 4 presents the system architecture. The onboard
trusted and untrusted. The

processor has two partitions,

1We assume the system dynamics are time-invariant.

Fig. 3: Safety control: initiated after the period TU C since the
last initiation of normal control; executed until the state is
ESC(xeq), before returning the system to normal control.
in

trusted partition has protected memory and services that can-
not be accessed by any processes in the untrusted partition.
It hosts the software image that will refresh the run-time
code and memory in the untrusted partition. It also hosts a
veriﬁed, trusted hypervisor [9], which manages the software
rejuvenation cycle, initiates and terminates processes in the
untrusted partition, authenticates reference points for the
tracking controller, and processes control commands from
the controllers to be delivered to the actuators (explained
below). The hypervisor uses a limited, veriﬁed set of OS
services that are also hosted in the trusted partition.

The untrusted partition hosts the safety and tracking
controllers, the operating system and any other functions
required to operate the system. This partition is untrusted
because it is too complex to be veriﬁed formally and it
receives communication from other agents, which includes
sensors and off-board agents. It is this communication, which
is necessary for the system to execute its missions, which
makes the system vulnerable to cyber attacks. As shown in
Fig. 4, although reference points may be received from the
communication, they are not used directly by the controllers.
The received reference points are passed to the hypervisor
for authentication and the hypervisor manages the reference
point update, as described below.

Figure 5 details the timing for the software rejuvenation
cycle and the communication between the trusted and un-
trusted partitions. Before a software refresh, the hypervi-
sor turns off the communication to the untrusted partition,
making it invulnerable to cyber attacks. The communication
remains off through the execution of the safety control, which
follows immediately after the software refresh. As indicated
in the ﬁgure, the safety control executes until the state has
been driven into
ESC for the current reference point. A timer
is set and tracking control is then initiated by the hypervisor,
which provides the reference point to the tracking controller.
Any new reference points received during tracking control
are passed to the hypervisor for authentication. Tracking
control is terminated either when the state reaches
ET C for
the current reference point or the timer times out after the
timer period tr (only the timeout case is shown in Fig. 5).

xeqESC(xeq)EC(xeq)attacksafety controlinitiatedt = t+ TUCnormal controlinitiatedreturn tonormal controlx(t)ESC(xeq)t = tsoftwarerefreshFig. 4: System architecture to support secure software rejuvenation for tracking control.

Fig. 5: Software rejuvenation control modes.

Communication is then turned off and software refresh is
executed again. The software refresh takes a known amount
is
of time, TSR, so by choosing tr ≤
TU C −
guaranteed the state is in
EC when the safety control is
initiated, as indicated in the ﬁgure.
The hypervisor uses algorithm 1 to update the reference

TSR,

it

points for the controllers.2

As is illustrated in the following section, it is useful to
constrain the control actions that can be taken during tracking
control so that any attacks during this period are subjected to
constraints that limit the rate at which an attacker might drive
the system from
EC. Enforcing such
ESC to the boundary of
limits increases TU C. These limits can be imposed by passing
all controls through the hypervisor. On the other hand, the
full control capability is available to the safety controller,
which helps to minimize any time required for safety control
actions. Figure 6 illustrates this processing performed by the
hypervisor to communicate the controls from the controllers
to the actuators. Note that the hypervisor is a relatively small
process that is fully veriﬁed, so it is only able to impose

2Algorithm 1 shows only the functions of the hypervisor relevant to

reference point management.

limits on the control signals.

V. APPLICATION: DRONE CONTROL

This section shows the application of the proposed soft-
ware rejuvenation for secure tracking control for a 6-DOF
Quadrotor (or Unmanned Aerial Vehicle (UAV)) system.
Speciﬁcall,y a Generic 10" Quadrotor + geometry airframe
[10] with full thrust of 4 N, and full torque of 0.05 Nm
for each motor is considered. The simulation are performed
with the jMAVSim ﬂight simulator. A 6-DOF quadrotor is
a nonlinear system described by a 12-dimensional state-
space model that contains position, orientation and linear and
angular velocities of the UAV. [11]. There are four controls:
the normal force to the airframe and three torques related
to the orientation angles of the UAV. The bounds on the
controls are: the max total force normal to the air frame is
16N, the max torque related to the roll and pitch angles is
0.1 Nm for the yaw. Those controls are
±
mapped by a matrix multiplication ("mixer") to the actuator
signals for the four motors. Each signal is normalized with
respect to the maximal power that can be generated by each
motor.

0.66 Nm, and

±

UntrustedTrustedlimited/verified OS servicesOS servicessoftware imageverified hypervisorsafety controller (SC)tracking controller (TC)mission control ‐referencetrajectorygenerationcyberattacksOnboard processoractuatorssensorscontrolsrcvd. ref. pts.status updatesmode switchingSW refresh (SR)authenticated ref. pts.comm. ON/OFFENVIRONTMENTcomm. OFFref. pt.no communicationsoftwarerefreshsafetycontrolTSRTSCTTCsoftwarerefreshTSRsafetycontroltrackingcontrolTSCtimeoutstarttimertimeouttrstarttimerpossible unknown control due to attackno communicationnetwork connected(possible attack)tracking controlguaranteedcontrolxESCuploadsoftwareimageinitiatesafetycontrolSCdoneinitiatetrackingcontrolref. pt.comm. ONrcvd.ref. pts.authenticateref. pts.TRUSTEDhypervisor:refresh timer periodterminatetrackingcontrolcomm. OFFref. pt.uploadsoftwareimageinitiatesafetycontrolUNTRUSTEDxESCtimer:guar.controlsystem state:xECxECcontrol:controlscontrolscontrolsto actuatorsFig. 6: Hypervisor control signal processing.

The UAV is stabilized by an LQR controller designed
considering the linearized model of the system around an
equilibrium point xeq, that without loss of generality can be
considered the origin of the state space [12],[13],[14]. See
the appendix for the details of the computations discussed in
the following subsections.

A. Safety Controller

The safety controller is the LQR controller described in
I12 where I12
the Appendix, using Q = 50
is the identity matrix. The safe set
is a convex polyhedral
subset of the state space R12 which imposes the following
constraints on:

I12 and R = 100

C

·

·

±

• the position:

2.5 m along z (vertical direction), and

1 m along x and y (horizontal direction);

±

• the orientation: the roll φ, pitch θ and yaw ψ angles are

bounded between
±
• the linear velocities:

π/4;

for the horizontal directions;

±

5 m/s for the vertical and

2 m/s

±

5 rad/s for all the angles.

• the angular velocities:
Writing the above set of constraints as in (6), and solving
C(xeq) is the
the maximization problem (8), the safe set
E
maximum volume ellipsoid contained in (6) with the sym-
metric matrix P > 0.

±

The computation of the overapproximation of the reach-
) (16), for the veriﬁcation of
which is,

able set
CSC(xeq), TU C,
the admissible values of (cid:15)SC and TU C requires
in this case, a polytopic set generated by:

+(

R

U

U

1) the bound on the torques related to the pitch and roll

±

angles is

0.0033 Nm, for yaw is

0.0005 Nm.

2) the bound on the max total force is 14 N, and the lowest
admissible value in case of a sudden shut down of the
propellers is 2 N.

±

C,
E

Figures 7 and 8 show the
+(

sets
) projected in the space of
linear and angular velocities

ESC and
the
CSC(xeq), TU C,
R
U
position, orientation,
for
(cid:15)SC = 0.05 and TU C = 0.18s. In all four projections
+(
the safe set
R
).
C(xeq) contains all the vertexes of
E
It is important to note that, despite the conservative effects
due to the bounds on the torques on the reachable set of
the angular velocities (Fig. 8- right), linear velocities (Fig.

C(xeq). In fact,
+(

CSC(xeq), TU C,

CSC(xeq), TU C,

⊆ E

R

U

U

)

8- left) and angles (Fig. 7- right) have the vertexes of their
reachable sets close to the border of

C(xeq).
E

B. Tracking Control

The goal of the tracking control is to follow a sequence of
equilibrium points xeq to drive the system from a speciﬁed
initial point to a speciﬁed ﬁnal point (the two waypoints). For
the quadrotor, an equilibrium point corresponds to hovering
at a certain altitude, with zero roll pitch angles, and a
given value of yaw. All the velocities are zero. A constant
feedforward input is added to the controls in order to provide
a sufﬁcient normal force that compensates the effect of the
g-force. In this case that value is 7.848 N.

The mechanism generating the sequence of equilib-
rium points by the tracking control scheme depends on
⊂ ESC(xeq). When the system moves into
ET C(xeq)
ET C(xeq), the tracking controller switches from xeq to the
next one x(cid:48)
eq after the next reboot. This example considers
ET C(xeq) as an ellipsoids described by the matrix P > 0
with (cid:15)T C = 0.01 and micro-reboots of 0.03 s. The mission of
this simulation consists in moving the UAV from the position
(x = 1, y = 0, z = 2, ψ = 0) to (x = 1, y = 2, z = 4, ψ =
0).

C. Simulation

The aim of the simulation is to illustrate the effectiveness
and robustness against attack of the proposed approach. To
illustrate that, an attack that suddenly turns off the propellers
is considered.

Figure 9 describes the overall simulation considering pro-
jecting the position along z. Besides the actual behaviour of
the UAV along z, it shows the equilibrium points updates,
the switches between the several control modes (TC,SR,SC),
and the value of the Lyapunov function V , respect to the
time. Before that the mission starts, the secure control is
forced to run for 2s. After that, the mission control start
to update the equilibrium points (magenta) if the the state
of the system is in
ET C(xeq). The equilibrium points pull
the altitude of the UAV towards the ﬁnal equilibrium point.
The current equilibrium point xeq switches to the next
one x(cid:48)
eq before that the quadrotor gets to xeq. The gray
plot represents the switches between micro-reboots and TC
where the equilibrium points are updated. The attack happens

control‐to‐actuatormapactuatorsSC or TCcontrolsTC/Attack control limitsactuatorlimitsSC –no control limitsTCAlgorithm 1 Reference Point Update

VI. DISCUSSION

1: xstart : given initial reference point
2: Initialize:
3:
4:
5:
6:
7:

COMMUNICATION OFF;
xcur := xstart : current reference point
SOFTWARE REFRESH
Initiate Safety Control
Send xcur
!Receive Safety Control Completed

8:
9: REPEAT
10:
11:
12:

COMMUNICATION ON
START TIMER with time tr
Initiate Tracking Control
Send xcur
FINISHED := FALSE

13:
14:
15: WHILE NOT FINISHED
16:
17:
18:

xnew := xcur

IF Receive new reference point xnew
IF NOT AUTHENTICATE(xnew)

ENDIF

IF Receive Tracking Control Completed
OR Receive TIMEOUT
FINISHED := TRUE

ENDIF
ENDWHILE
COMMUNICATION OFF;
SOFTWARE REFRESH
Initiate Safety Control
Send xcur
!Receive Safety Control Completed
xcur := xnew
30:
31: END REPEAT

25:
26:
27:
28:
29:

19:
20:
21:
22:
23:
24:

during the period highlighted in red. Since the system is far
away from the current equilibrium point, the reference point
for the tracking controller does not update it until the system
reaches
ET C(xeq). The ﬁgure also shows the values of the
Lyapunov function that are very small except when the attack
occurs.

Figure (10) illustrates the position and the linear velocities
ESC(xeq) (outer)
ET C(xeq) (inner) for several equilibrium points. The

of the UAV respects to the projection of
and
projection of xeq is always 0.

−

−

z and plane ˙y

ESC(xeq) and

The projection of the sets

ET C(xeq) in
correspondence of the attach (Fig. 10-left, blue ellipsoid) on
the y
˙z is illustrated in Fig. 11 . That
ﬁgure shows the behavior of the quadrotor during the several
control modes. After the attack (red) and SR (blue), SC is
active because the velocity (right) along z hits
ESC(xeq)
while the position is still inside that set (left). Instead, when
the position goes back to
ESC(xeq), TC is active again. When
the position hits
ESC(xeq), after SR the equilibrium point
switches to x(cid:48)
eq.

This paper presents a general method for implementing
software rejuvenation for secure tracking control based on an
event-based reference point update scheme for the tracking
controller and an invariant-based safety controller. An archi-
tecture for the onboard processor is presented that provides
the necessary secure computation components to manage the
software rejuvenation sequence, authentication and update
of the reference points for the tracking controller and the
mapping of the controller outputs to the system actuators.
This extends software rejuvenation to a broader class of CPS
applications.

There are several directions for future research. There are
several design trade-offs to be investigated, including the
trade-offs among the control constraints and sizes of the ref-
erence point neighborhoods used for the tracking and safety
control algorithms, the time allotted to tracking control and
the control limits used during tracking control. Disturbances
and modeling uncertainties also need to be incorporated
into the reachability algorithm used to determine the time
bound on the uncertain control period. The integration of
software rejuvenation with algorithms for attack detection
and mitigation should also be investigated to extend the scope
of security and robustness that can be achieved. Finally, we
are currently moving the algorithm from simulation to a
trusted real-time hypervisor platform for drone control and
plan to report these results in future papers.

ACKNOWLEDGMENTS

Copyright 2018 IEEE. All Rights Reserved.
This material is based upon work funded and supported by
the Department of Defense under Contract No. FA8702-15-
D-0002 with Carnegie Mellon University for the operation
of the Software Engineering Institute, a federally funded
research and development center.
Carnegie Mellon R
(cid:13)
Trademark Ofﬁce by Carnegie Mellon University.
DM18-1192

is registered in the U.S. Patent and

REFERENCES

[1] J. Alonso, A. Bovenzi, J. Li, Y. Wang, S. Russo, and K. Trivedi.
Software rejuvenation: Do it amp;amp;amp; telco industries use it?
In 2012 IEEE 23rd International Symposium on Software Reliability
Engineering Workshops, pages 299–304, Nov 2012.

[2] Miguel A. Arroyo, Lakshminarasimhan Sethumadhavan, and Jonathan
Weisz. Secured cyber-physical systems, June 2017. United States
Patent Number 15/618019 (pending).

[3] Miguel Arroyo, Hidenori Kobayashi, Simha Sethumadhavan, and
Junfeng Yang. FIRED: frequent inertial resets with diversiﬁcation
arXiv preprint
for emerging commodity cyber-physical systems.
arXiv:1702.06595, 2017.

[4] Y. Huang, C. Kintala, N. Kolettis, and N.D. Fulton.

Software
In Proceedings of
rejuvenation: Analysis, module and applications.
25th International Symposium on Fault Tolerant Computing, pages
381–390, Pasadena, CA, June 1995. IEEE Computer Society.

[5] Domenico Cotroneo, Roberto Natella, Roberto Pietrantuono, and Ste-
fano Russo. A survey of software aging and rejuvenation studies. J.
Emerg. Technol. Comput. Syst., 10(1):8:1–8:34, January 2014.

(a)

Fig. 7: Projections of
the position (left), and orientation (right).

C(gray),
E

ESC (blue) and

(b)

+(

CSC, TU C,

R

U

) computed for (cid:15) = 0.05 and TU C = 0.18s (red line) on

(a)

(b)

Fig. 8: Projections of
the linear velocity space.

C(gray),
E

ESC (blue) and

R

+(

CSC, TU C,

U

) computed for (cid:15) = 0.05 and TU C = 0.18s (red line) on

[6] Khin Mi Mi Aung and Jong Sou Park.

Software rejuvenation
approach to security engineering.
In Antonio Laganá, Marina L.
Gavrilova, Vipin Kumar, Youngsong Mun, C. J. Kenneth Tan, and
Osvaldo Gervasi, editors, Computational Science and Its Applications
– ICCSA 2004, pages 574–583, Berlin, Heidelberg, 2004. Springer
Berlin Heidelberg.

[7] Chen-Yu Lee, Krishna M. Kavi, Mahadevan Gomathisankaran, and
Patrick Kamongi. Security through software rejuvenation. In The Ninth
International Conference on Software Engineering Advances ICSEA,
Nice, France, Oct 2014.

[8] Fardin Abdi, Chien-Ying Chen, Monowar Hasan, Songran Liu, Sibin
Mohan, and Marco Caccamo. Guaranteed physical security with
restart-based design for cyber-physical systems. In Proceedings of the
9th ACM/IEEE International Conference on Cyber-Physical Systems,
ICCPS ’18, pages 10–21, Piscataway, NJ, USA, 2018. IEEE Press.

[9] Amit Vasudevan, Sagar Chaki, Petros Maniatis, Limin Jia, and Anu-
pam Datta. überspark: Enforcing veriﬁable object abstractions for
In 25th
automated compositional security analysis of a hypervisor.
USENIX Security Symposium, USENIX Security 16, Austin, TX, USA,
August 10-12, 2016., pages 87–104, 2016.

−0.500.5−0.500.5−2−1012xyz−0.500.5−0.500.5−0.8−0.6−0.4−0.200.20.40.60.8φθψ−202−101−4−2024˙x˙y˙z−505−4−2024−4−2024˙φ˙θ˙ψFig. 9: System response along z respect to the time (blue), the equilibrium points (magenta), the switching between the
several control modes (gray) and the Lyapunov function V (x(t)) (black).

(a)

(b)

Fig. 10: Projections of
velocity spaces. The blue line represents the respective system response.

ET C (inner) through the several updated equilibrium points on the position and linear

ESC(outer) and

ﬂight

controller:
geome-
10"
https://github.com/PX4/jMAVSim/blob/

[10] Px4
try.
83bf400d71588131e2c6e179a6c63e8585271275/src/
me/drton/jmavsim/Simulator.java#L314,
09/2018.

Generic

view:

quad

Last

+

[11] Randal Beard. Quadrotor dynamics and control rev 0.1. 2008.
[12] Oualid Araar and Nabil Aouf. Full linear control of a quadrotor
uav, lq vs h∞. In Control (CONTROL), 2014 UKACC International
Conference on, pages 133–138. IEEE, 2014.

[13] Hossein Bolandi, Mohammad Rezaei, Reza Mohsenipour, Hossein
Nemati, and Seed Majid Smailzadeh. Attitude control of a quadrotor
Intelligent Control and Automation,
with optimized pid controller.

4(03):335, 2013.

[14] Samir Bouabdallah, Andre Noth, and Roland Siegwart. Pid vs lq
control techniques applied to an indoor micro quadrotor. In Proc. of
The IEEE International Conference on Intelligent Robots and Systems
(IROS), pages 2451–2456. IEEE, 2004.

[15] Frank L Lewis, Draguna Vrabie, and Vassilis L Syrmos. Optimal

control. John Wiley & Sons, 2012.

[16] Stephen Boyd, Laurent El Ghaoui, Eric Feron, and Venkataramanan
Balakrishnan. Linear matrix inequalities in system and control theory,
volume 15. Siam, 1994.

[17] Inseok Hwang, Dušan M Stipanovi´c, and Claire J Tomlin. Polytopic
approximations of reachable sets applied to linear dynamic games and

05101520253000.511.522.533.544.5V(x(t))Timesz(t)mz(t)ControlModesV(x(t))zeq(t)AttackSRTCSCControlModes100.511.522.533.544.5xmymzm−0.500.5−0.4−0.200.20.4−2−1.5−1−0.500.51˙xm/s˙ym/s˙zm/s(a)

(b)

Fig. 11: The switching modes behaviour in correspondence of the attack projected on the y
left it is illustrated the switch between two consecutive equilibrium points.

−

z and ˙y

−

˙z planes. On the

a class of nonlinear systems. In Advances in control, communication
networks, and transportation systems, pages 3–19. Springer, 2005.

[18] Pravin Varaiya. Reach set computation using optimal control.

In
Veriﬁcation of Digital and Hybrid Systems, pages 323–331. Springer,
2000.

[19] Alexander B Kurzhanski and Pravin Varaiya. Dynamic optimization
Journal of Optimization Theory and

for reachability problems.
Applications, 108(2):227–251, 2001.

A. LQR Control

APPENDIX

The state space representation of the dynamics of a

continuous-time LTI system is

˙x(t) = Ax(t) + Bu(t),

where x
∈
A linear control that stabilizes (1) is

Rn is the state, and u

∈

Rp is the input.

u(t) =

Kx(t)

−

(1)

(2)

where K is computed minimizing the cost function

J =

(cid:90) ∞

0

xT (τ )Qx(τ ) + uT (τ )Ru(τ )dτ.

(3)

where Q
≥
minimum is achieved if

0 and R > 0 are symmetric matrices. The

K = R−1BT S

(4)

where S is the solution of the associated Riccati algebraic
equation [15]. Controller (2) is a linear quadratic regulator.

B. Safe Control

The associated closed-loop system is

˙x(t) = ASC(x(t)

xeq)

−

(5)

where ASC (cid:44) A

BK.

−

Given a convex polyhedral region

space given by

Rn of the state

C ⊂

(xeq) = (cid:8)x

C

ξT
j (x

|

−

xeq)

≤

1, j = 1, ..., nc

(cid:9)

(6)

the largest positively invariant ellipsoid with respect to the
equilibrium point xeq and associated to (5)
C(xeq) = (cid:8)x
E
can be found solving the following maximiza-

xeq)
(cid:107)

2
P ≤

1(cid:9)

(7)

| (cid:107)

(x

−

contained in
tion problem [16]:

C






max log det ¯Q
s.t. ¯QAT
ξT
j
¯Q > 0

SC + ASC ¯Q
¯Qξj ≤

0

≤
1, j = 1, ..., nc

(8)

where P = ¯Q−1 [16]. Set (7) is a positively invariant set,
since

(x

(cid:107)

−

xeq)

2
P = (x
(cid:107)

−

xeq)T P (x

xeq)

−

(9)

is a quadratic Lyapunov function for (5). The set
(cid:9)

(x

2
P ≤
1 is a Lyapunov level-set where
C(xeq). From (6) a convex polyhedron

xeq)
(cid:107)

(10)

(cid:15)SC

−

| (cid:107)

ESC(xeq) = (cid:8)x
with 0
(cid:15)SC ≤
≤
ESC(xeq)
⊆ E
⊆ CSC(xeq) is given by
ESC(xeq)
CSC(xeq) = (cid:8)x
ξT
j (x

xeq)

−

|

≤

√(cid:15)SC, j = 1, ..., nc

(cid:9) .
(11)

00.20.40.60.82.22.42.62.833.23.4ETC(x0eq)ESC(x0eq)ETC(xeq)ESC(xeq)xeqx0eqSwitchtoTCSwitchtox0eqymzmTCSRAttackSC−0.2−0.100.10.2−2−1.5−1−0.500.51ETC(xeq)ESC(xeq)xeq˙ym/s˙zm/sTCSRAttackSCC. Computation of TU C

Given (cid:15)SC, the computation of TU C consists in checking

if the reachable set

R

) =
U
x0

CSC(xeq), t;
(

0 eA(t−τ )Bu(τ )dτ, (12)
.(13)
}

eAtx0 + (cid:82) t
x
{
|
∈ CSC(xeq), u(τ )
C(xeq). The reach set (13) is computed
is contained in
E
considering any value of input in
given to the system (1),
starting from any point in
An approximation of

U
CSC(xeq).
is obtained considering a
(13)
method based on the computation of the supporting hyper-
plans for polytopic sets [17]. The supporting hyperplanes to

∈ U

, 0

≤

≤

τ

t

(
R

CSC(xeq) are
v+
j (x, t) = ξj(t)x,

j = 1, ..., nc

(14)

where ξj(0) = ξj. Using the maximum principle of the
optimal control [18], the normal direction of ξi is

ξj(t) = e−AT τ ξj.

(15)

Representing
u1, ..., unu , the over-approximation of
[19]

as convex combination of nu vertexes
) is

CSC(xeq), t,
(

R

U

U

+(

CSC(xeq), t,

R

U

) = (cid:84)nc
j=1
(cid:82) t
0 maxi (cid:104)
maxx(0)∈C

(cid:8)x
v+
j (x, t)
|
ξj(τ ), Bui(cid:105)
) v+

(§

SC

(cid:101)(cid:113)

≤
dτ +

j (x(0), 0)

(cid:111)

.(16)

The convex polyhedral set (16) can be also represented as
polytope,

+(

R
(cid:40)

x

∈

) =

CSC(xeq), t,
Rn
x =

U
nv(cid:88)

|

αhxk,

nv(cid:88)

k=1

αk = 1 αk ≥

k=1

(cid:41)
0

(17)

then to check if for a given TU C,
⊆
C(xeq) it is sufﬁcient to make that check only in corre-
E
spondence of the verteces xk.

CSC(xeq), t,

R

U

)

+(

