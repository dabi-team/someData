Data Driven Testing of Cyber Physical Systems

Dmytro Humeniuk
Polytechnique Montr´eal
Montreal, Canada
dmytro.humeniuk@polymtl.ca

Giuliano Antoniol
Polytechnique Montr´eal
Montreal, Canada
giuliano.antoniol@polymtl.ca

Foutse Khomh
Polytechnique Montr´eal
Montreal, Canada
foutse.khomh@polymtl.ca

1
2
0
2

r
a

M
3
2

]

R
C
.
s
c
[

2
v
1
9
4
1
1
.
2
0
1
2
:
v
i
X
r
a

Abstract—Consumer grade cyber-physical systems (CPS) are
becoming an integral part of our life, automatizing and sim-
plifying everyday tasks. Indeed, due to complex interactions
between hardware, networking and software, developing and
testing such systems is known to be a challenging task. Various
quality assurance and testing strategies have been proposed.

The most common approach for pre-deployment testing is to
model the system and run simulations with models or software in
the loop. In practice, most often, tests are run for a small number
of simulations, which are selected based on the engineers’ domain
knowledge and experience.

In this paper we propose an approach to automatically
generate fault-revealing test cases for CPS. We have implemented
our approach in Python, using standard frameworks and used
it to generate scenarios violating temperature constraints for a
smart thermostat implemented as a part of our IoT testbed.
Data collected from an application managing a smart building
have been used to learn models of the environment under ever
changing conditions. The suggested approach allowed us to
identify several pit-fails, scenarios (i.e., environment conditions
and inputs), where the system behaves not as expected.

Index Terms—cyber-physical systems, test case generation,

genetic algorithm

I. INTRODUCTION
Ensuring the reliability of cyber-physical systems (CPS),
such as cars with adaptive cruise control, robotic systems
or smart buildings is of vital importance. Testing software
for such systems is challenging, as developers need to take
into account the interaction with hardware as well as the
environment. Consider an autonomous vehicle that may drive
in various conditions (fog, rain, snow) and react to pedestrians
as well as other cars manoeuvres. Or an IoT network, where,
due to extensive trafﬁc, control commands would arrive with
delay or get lost.

The input search space of such systems is substantial,
therefore metaheuristics and random search based techniques,
are often used to generate the test cases [1]. Further, the system
model is used to execute the test cases, as it is unpractical
to use the physical system, especially on the pre-deployment
testing stage [2]. Therefore, it is also important to obtain an
accurate system model, that is not time consuming to execute.
A number of tools have been developed to verify whether a
system, represented by its model, meets speciﬁc requirements
and whether there are any inputs violating them, e.g., S-Taliro,
Breach, falsify ARIsTEO and other tools described in [3].
However, they require to manually specify the requirements,
which is a tedious task and does not guarantee the considera-
tion of all possible requirements.

Another direction of research is automatic search based
generation of test suites for CPS. Those approaches are mostly
often focused on ﬁnding the test cases with the best require-
ments coverage and diversity, but not falsiﬁcation [1], [4], [5].
They lack ﬂexibility as often require an external software to
generate the initial test cases. Also, they are using the Simulink
API to execute the models, which can be computationally
expensive.

We surmise that it is important to design test suites with high
fault revealing power, indicating to developers the possible
worst case scenarios of system execution. Moreover, the test
cases should consider possible combination of environmental
conditions during system execution. For example, a car can
ride on a dry or an icy road, changing the model describing
it’s trajectory evolution.

Motivation. We explain the motivation for our work with
a wirelessly controlled thermostat case study. This system is
described in a greater detail in [6]. The thermostat automati-
cally controls the temperature in a closed room by switching
between ”on” and ”off” modes. The temperature in the room
is set by the user deﬁned schedule. The developer writing
software for the thermostat deﬁnes a number of parameters
such as the sampling rate, the hysteresis value (small threshold
before or after reaching the temperature), etc. In addition,
the environmental conditions affect the system behaviour: the
commands sent from the controller to the thermostat can be
delayed or even lost due to the network overload, the temper-
ature decrease/increase speed can vary depending on the time
of the day, room humidity, etc. Considering all the parameters,
are there scenarios when the system is not able to follow the
schedule? What are the combinations of input parameters and
environmental conditions that drive the system to an unsafe
state? Finding answers to such questions motivated us in
developing an automatic search based approach for CPS test
case generation.

II. PROBLEM FORMULATION

The behaviour of a hybrid system can be described with
modes having continuous output dynamics and discrete mode
switches [7] . Each hybrid system has input(s) Ui, output(s) Yi
and state variables Si. The expected system behaviour B(τ )
is speciﬁed over a time interval τ . Mode switch occurs when
the expected output requirements can’t be met by the system
in a particular mode. For example, when the temperature
is set to be lower, than the current room temperature, the

 
 
 
 
 
 
thermostat will switch from heating to cooling mode. The
dynamics of system state, input and output variables Si, Ui,
Yi in each mode Ni is given by a corresponding mathematical
model Mi, which can be derived from system execution data
using system identiﬁcation or machine learning techniques [8].
Being dependent on the environmental conditions, the models
can get very complex and taking a substantial amount of time
to execute. We therefore surmise that each mode Ni can be
represented by a family of surrogate or simpliﬁed models
Mi, corresponding to certain environmental conditions Ei.
Therefore each family Mi will contain models mij , where i
is the model family identiﬁer and j - model identiﬁer. The test
case (TC) generation problem can thus be thought of as ﬁnding
a combination of models mij and input values Ui maximizing
the difference between simulated system behaviour Bs(T C)
over time interval τ and expected behaviour B(T C), with
system variables satisfying a certain constraint K:

max δ(B(T C), Bs(T C)),
subject to : K(Si, U i, Y i).

to the model. Therefore,

Where δ(B(T C), Bs(T C)) is our ﬁtness function com-
puting the deviation between the expected and simulated
behaviour. The expected behaviour should be deﬁned in the
test cases, such as, for instance, a temperature schedule or a
car trajectory to follow. Typically, these values will be used
the ﬁtness function
as the input
calculates how a system output, as a reaction to a particular
input, is different from the expected output. The constraint
can be represented by an acceptable range of input values,
duration of the simulation, etc. By using different families of
models of the system, we account for its behaviour in different
environmental conditions. Evolution can be done in one way:
for the ﬁxed scenarios ﬁnd a combination of models, violating
the user requirements. Or in both ways: by changing models
and system inputs, ﬁnd the worst possible scenario.

To generate the initial test cases we suggest using hidden
Markov chains.It can be created automatically, given the
system modes and probabilities of switching between them.
This idea is not new, in [9] for example, Markov chains are
used to generate simulation scenarios for a wireless network.
We decide to use the Markov chain for two main reasons. First,
by running the chain for a number of times, the developer can
estimate an average performance of the system. Secondly, in
our experiments, the initial population for genetic algorithm
(GA) generated with Markov chain provided semantically
better test cases, than completely random initialization.

The parameters for the Markov chains, such as states
and probabilities of state change, can be estimated from the
data on typical system usage scenarios. In this case, ”states”
correspond to the system modes. For each state,
there is
a set of possible output values the system can reach, the
duration of being in the state and the model, accounting for the
system behaviour corresponding to particular environmental
conditions. Therefore, for scenario generation, operation in

each state can be represented by a triplet:

Si = (Yi, τi, Mi)

(1)

where Yi is desired system output in a particular state, τi - the
duration of this state (the sum of τi should be equal to τ ) and
Mi - model family to use, to describe the system behaviour.
The duration can be speciﬁed in time units, or other units,
such as total length, as in case of generating road trajectories.
A test case is represented by a sequence of states:

T Ci = (S1, S2, ..., Si)

(2)

Finally, we suggest using evolutionary algorithms to ﬁnd the
combination of the Y , τi and Mi values maximizing the ﬁtness
function δ. For this study we used a single objective genetic
algorithm.

III. CASE STUDY

In our case study we consider an example of a wirelessly

controlled thermostat, described in the Introduction.

For the thermostat two modes of operation can be deﬁned:
M1: “ON” and M2: “OFF”. The behaviour of the system
can be represented by a sequence of switching between these
modes, and time passed in each mode. The input variable
U is the goal temperature (expected behaviour) at a given
point in time. The output variable Y is the value of output
temperature controlled by the system. It can also have such
state variables as S1 - system start temperature in a certain
mode, S2 - time spent in a particular mode, etc. The constraints
for the input variables are the temperature values between 16
and 25 degrees Celsius. The time intervals spent in each mode
can range from 15 minutes to 6 hours.

A. Model creation

To create the system model we used a system identiﬁcation
technique [10], where a model of a dynamical system is built
from the data. The process requires the following steps:

1) Extract the data describing system behaviour in different

modes.

2) Select a model structure.
3) Apply an estimation method to estimate values for the
adjustable coefﬁcients in the candidate model structure.

4) Evaluate the estimated model.

The wireless thermostat, controlling temperature in a closed
room, is a part of our physical testbed of IoT network of more
than 30 devices, based on a Z-wave protocol [6]. Therefore, we
extracted the data for creating the model from the experimental
measurements. We selected the series of data points, corre-
sponding to behaviour of the thermostat after ”switch on” and
”switch off” commands. One model includes two equations
describing behaviour in ”on” and ”off” modes. In total, we
could identify 15 models having different coefﬁcients in the
equations. Evidently, due to varying environmental conditions,
i.e the opened door, higher or lower humidity, heat transfer
from outside, the coefﬁcients in the selected model structure
had to be adjusted to better ﬁt the original data. Creating one
complex model, with high number of inputs, considering the

environmental conditions, would make the execution of the
model computationally expensive.

One of the challenges is to select the model structure. In
our case, the heating and cooling of a closed space is guided
by physical laws, such as Newton Law of cooling [11]. The
law has an exponential nature, therefore our experimentally
selected model structure is based on increasing and decreasing
exponential function.

We propose the following time-discreet model structure for

the M1 (”on”) mode:

Y = kon1 ∗ (1 − e−kon2∗ti ) + T0

and for the M2 (”off”) mode:

Y = kof f 1 ∗ (e−kof f 2∗ti) + T0 − kof f 1

(3)

(4)

Here kon1, kon2, kof f 1, kof f 2 are the unique coefﬁcients
deﬁning the model behaviour in a particular environment. T0 -
is the starting temperature and ti - the discreet time step value.
We keep the coefﬁcients in a table, such as table I. As an
example, we show coefﬁcients for the three obtained models.
To obtain the coefﬁcients, the points from the data must be

TABLE I
MODEL COEFFICIENTS

Model
1
2
3

kon1
6
7.9
7

kon2
0.14170703
0.11180434
0.13425024

kof f 1
4.3
5.2
3.8

kof f 2
0.09531917
0.04803319
0.07661568

ﬁtted by a curve with minimal deviation. We used python
SciPy library, namely curve f it function from Optimize
class, which is based on non-linear least squares method [12].
The average root mean square error between original and
approximated data did not exceed 0.5 degrees.

B. Generating initial test cases

To automatically generate the test cases we represent the
thermostat system as a Markov chain with two states ”on” and
”off”, which is shown in Fig.1. The probabilities of changing
the states were estimated empirically, so that most of the
generated test cases are semantically correct. A change of state
occurs with probability of 0.9 and state remains the same with
0.1 probability.

After reaching a particular state, we randomly choose a
temperature value the system is expected to reach, the time
interval to be spent in the state and the the model coefﬁcients
to use, so that each state is represented by a triplet (tempera-
ture, duration, model), similar to (1). In this way, a test case
represents a temperature schedule a user might deﬁne.

For each execution we indicate the expected duration of the
test case as well as the number of states. We chose the duration
to be 24 hours, representing one day, and having 5 to 12 states
in each test case.

We implemented the algorithm in a python script, which

saves the generated test cases in a ”json” format.

Fig. 1. Thermostat system representation with a Markov chain

C. Genetic algorithm description

To ﬁnd the test cases maximizing the difference between the
expected and simulated behaviour we implemented a genetic
algorithm in Python with Pymoo framework [13]. In our
conﬁguration the number of generations is NG = 90, mutation
rate is mr = 0.4, crossover rate is cr = 0.9 and population size:
psize = 100. These values were established experimentally and
following the common practices.

1) Solution representation: The solution is composed by
at least one test case, containing from 5 to 12 states. The
chromosomes are the test cases, represented in the software
implementation as a dictionary, see Fig.2. They have a variable
number of genes, where each gene corresponds to a system
state. In the ﬁgure, ”temp” parameter describes the expected
temperature in each state, corresponding to the system input
values, ”model” - a family of models to use and ”duration” -
time the system should spend in each state.

Fig. 2. GA chromosome representation, tc - test case, st - state

2) Selection: We use the k-way tournament selection im-

plemented in Pymoo to choose the parents.

3) Crossover operators: We implemented a crossover oper-
ator that exchanges the states between two different test cases
as shown in Fig.3 We use a one point crossover.

Fig. 3. Crossover operator for two test cases of 5 and 6 states with crossover
point at the third state

4) Mutation operators: We deﬁne two mutation operators,

similar to [4]:

• exchange operator:

two states of a chromosome are

randomly selected and exchanged the positions;

• change of variable operator: a state in a chromosome
is randomly selected, then for one of the state variables

(temperature, duration, model) value is changed accord-
ing to its type and maximum as well as minimum values.
5) Fitness function: In our study the ﬁtness function eval-
uates the root mean square error between the simulated and
expected behaviour. The expected behaviour is speciﬁed in
the test cases, which are given as an input to the system
simulation. The test case is executed using the speciﬁed
models and the values of system behaviour are calculated.
The ﬁtness of 1 signiﬁes that the system can provide the
temperature with the difference from the schedule of 1 degree
on average, which might be acceptable for a typical user. As
the Pymoo framework minimizes the ﬁtness function, in our
implementation we multiply its actual value by (-1).

IV. RESULTS
To evaluate the performance of our GA implementation we
ran it 50 times (each run contains 9000 evaluations). After
each run we recorded the ﬁttest individuals. We compared
its performance with the random search (RS). We recorded
the ﬁttest individual after generating 9000 random individuals,
repeating the process 50 times. The obtained boxplot is shown
in the Fig. 4. In the boxplot we also report the ﬁtness values of
all randomly generated individuals during evaluation. We can
see that GA always produces better results with an average
ﬁtness of -7.2, while the average ﬁtness of the RS best
individuals is -2.8. Considering all the randomly generated
individuals, the average ﬁtness is around 0.93. For one of the
runs we also report the convergence of GA in Fig. 5, which
conﬁrms its good performance.

From this evaluation we conclude that our thermostat system
performs well on average (the mean deviation from the sched-
ule is around 1 degree) as shown by all randomly generated
schedules. However, there are potential scenarios, which can
lead to completely wrong system behaviour (deviation from
the schedule for 7 degrees on average). It is up to developer
to decide, whether the found test cases are realistic or not.
If they aren’t, we recommend adjusting the search parameters
and constraints.

Fig. 4. Genetic algorithm and random search comparison after 50 runs

V. DISCUSSION AND CONCLUSION
In this paper we suggested an approach for generating
fault revealing test cases for hybrid CPS, taking into account

Fig. 5. Convergence of GA over 90 generations

variability of system behaviour in changing environmental
conditions. It includes generation of models, initial test cases
and genetic algorithm implementation in Pymoo framework.
The results for the wireless thermostat case study prove the
effectiveness of our implementation comparing to random
search. With our approach we could evaluate the system per-
formance as well as generate potentially dangerous scenarios.
However, it is up to developers to judge if the test cases are
pertinent and take further actions to prevent the failures.

The approach can be applied for a wide range of hybrid
CPS, what we are going to demonstrate in our future case
studies. We also plan to implement our approach as a complete
test case generation tool.

REFERENCES

[1] A. Turlea. Search based model in the loop testing for cyber physical
In 2018 IEEE 16th International Conference on Embedded

systems.
and Ubiquitous Computing (EUC), pages 22–28, 2018.

[2] Arend Aerts, M Reniers, and Mohammad Reza Mousavi. Model-based
In Cyber-Physical Systems, pages

testing of cyber-physical systems.
287–304. Elsevier, 2017.

[3] Gidon Ernst, Paolo Arcaini, Ismail Bennani, Alexandre Donze, Georgios
Fainekos, Goran Frehse, Logan Mathesen, Claudio Menghi, Giulia
Pedrinelli, Marc Pouzet, et al. Arch-comp 2020 category report:
Falsiﬁcation. EPiC Series in Computing, 2020.

[4] Aitor Arrieta, Shuai Wang, Urtzi Markiegi, Goiuria Sagardui, and Leire
Etxeberria. Search-based test case generation for cyber-physical systems.
In 2017 IEEE Congress on Evolutionary Computation (CEC), pages
688–697. IEEE, 2017.

[5] Reza Matinnejad, Shiva Nejati, Lionel C Briand, and Thomas Bruck-
mann. Automated test suite generation for time-continuous simulink
models. In proceedings of the 38th International Conference on Software
Engineering, pages 595–606, 2016.

[6] Cyrine Zid, Dmytro Humeniuk, Foutse Khomh, and Giuliano Antoniol.
In Pro-
Double cycle hybrid testing of hybrid distributed iot system.
ceedings of the IEEE/ACM 42nd International Conference on Software
Engineering Workshops, pages 529–532, 2020.

[7] Rajeev Alur. Principles of cyber-physical systems. MIT press, 2015.
[8] Claudio Menghi, Shiva Nejati, Lionel Briand, and Yago Isasi Parache.
Approximation-reﬁnement testing of compute-intensive cyber-physical
models: An approach based on system identiﬁcation. In 2020 IEEE/ACM
42nd International Conference on Software Engineering (ICSE), pages
372–384. IEEE, 2020.

[9] Jing Liu and Yixu Yao. Modeling and analysis of wireless cyberphysical
systems using stochastic methods. Wireless Communications and Mobile
Computing, 2019, 2019.

[10] Lennart Ljung and Torkel Glad. Modeling of dynamic systems. Number

BOOK. Prentice-Hall, 1994.

[11] RHS Winterton. Newton’s law of cooling. Contemporary Physics,

40(3):205–212, 1999.

[12] Python scipy library, curve ﬁt function from optimize class. https://docs.

scipy.org/doc/scipy/reference/generated/scipy.optimize.curve ﬁt.html.

[13] J. Blank and K. Deb. Pymoo: Multi-objective optimization in python.

IEEE Access, 8:89497–89509, 2020.

