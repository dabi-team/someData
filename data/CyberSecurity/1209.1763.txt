On the Efﬁciency-vs-Security Tradeoff in the Smart Grid

Yara Abdallah, Zizhan Zheng, Ness B. Shroff and Hesham El Gamal

2
1
0
2

p
e
S
9

]
I

N
.
s
c
[

1
v
3
6
7
1
.
9
0
2
1
:
v
i
X
r
a

Abstract— The smart grid is envisioned to signiﬁcantly en-
hance the efﬁciency of energy consumption, by utilizing two-way
communication channels between consumers and operators. For
example, operators can opportunistically leverage the delay
tolerance of energy demands in order to balance the energy
load over time, and hence, reduce the total operational cost.
This opportunity, however, comes with security threats, as
the grid becomes more vulnerable to cyber-attacks. In this
paper, we study the impact of such malicious cyber-attacks
on the energy efﬁciency of the grid in a simpliﬁed setup.
More precisely, we consider a simple model where the energy
demands of the smart grid consumers are intercepted and
altered by an active attacker before they arrive at the operator,
who is equipped with limited intrusion detection capabilities.
We formulate the resulting optimization problems faced by the
operator and the attacker and propose several scheduling and
attack strategies for both parties. Interestingly, our results show
that, as opposed to facilitating cost reduction in the smart
grid,
increasing the delay tolerance of the energy demands
potentially allows the attacker to force increased costs on the
system. This highlights the need for carefully constructed and
robust intrusion detection mechanisms at the operator.

I. INTRODUCTION

Over the past few years,

the smart grid has received
considerable momentum, exempliﬁed in several regulatory
and policy initiatives, and research efforts (see for example
[1], [2] and the references therein). Such efforts have ad-
dressed a wide range of topics spanning energy generation,
transportation and storage technologies, sensing, control and
prediction, and cyber-security [3].

Demand response/load balancing and energy storage are
two promising directions for enhancing energy efﬁciency
in the smart grid. Non-emergency demand response has
the potential of lowering real-time electricity prices and
reducing the need for additional energy sources. The basic
idea is that, by utilizing two-way communication channels,
the emergency level of each energy demand (at the end-users
or central distribution stations) is sent to the grid operator
that, in turn, schedules these demands in a way that ﬂattens
the load. This potential gain, however, comes at the expense
of the security threat posed by the vulnerability of the
communication channels to interception and impersonation.
This paper is, to the best of our knowledge, the ﬁrst
attempt to characterize the impact of cyber-attacks on the
smart grid, in terms of its energy efﬁciency. More specif-
ically, we propose a novel model that captures the above

Yara Abdallah, Zizhan Zheng, Ness B. Shroff and Hesham El Gamal
are with the Department of Electrical and Computer Engineering, The
Ohio State University, Columbus, Ohio, USA. {abdallay, zhengz,
shroff, helgamal}@ece.osu.edu

This work has been funded in part by the Army Research Ofﬁce MURI
award W911NF-08-1-0238 and National Science Foundation awards ECCS-
1232118.

Fig. 1: A system model for a smart grid in the presence of a
single attacker. The forward channels between the consumers and
the grid operator are fully compromised by the attacker. (a, d, e) is
the vector of the start times, deadlines and energy requirements of
the consumer demands, respectively.

scenario in the presence of a single attacker. Our model of
the smart grid, similar to [4], includes a grid operator and n
consumers that are capable of energy storage, harnessing the
potential cost savings in the smart grid. Each consumer has a
single energy demand that includes the amount of energy the
consumer requests, the service start time, and the deadline
by which the requested energy should be delivered. The
consumers send their demands, simultaneously, over separate
communication channels to the operator. The grid operator
attempts to schedule these demands so as to balance the
load across a ﬁnite period of time, and hence minimize the
total cost paid to serve these demands. In our model, we
also assume the presence of a single attacker who is fully
capable of intercepting and altering the consumer demands
before they arrive at the operator, as shown in Figure 1.
The end goal of the attacker, as opposed to the operator,
is to maximize the operational cost paid by the system
for these demands, hence reducing the energy efﬁciency of
the system. We differentiate between two scenarios. The
ﬁrst corresponds to a naive operator who fully trusts the
incoming energy demands, whereas in the second, a simple
intrusion detection mechanism (that will be discussed later)
is assumed to be deployed by the operator. The attacker’s
desire to remain undetected imposes more limitations on
its capabilities, and hence, reduces the potential harm. This
desire can be justiﬁed, for example, by considering the long-
term performance of the grid, i.e., successive instances of the
problem considered in our model, where in each instance n
energy demands are issued and altered by an attack. From
this perspective, one can envision scenarios where the total
impact of successive attacks is more damaging when the
attacker remains undetected.

Based on the aforementioned assumptions, we ﬁrst for-
mulate the optimization problems faced by the operator
and the attacker. For the operator, when being oblivious to
any attacks, a minimization problem needs to be solved.
On the other hand, the attacker is aware of the optimal

Customer1Customer2CustomernAttacker(a,d,e)maxminCOperator(a0,d0,e0)minC(a1,d1,e1)(a2,d2,e2)(an,dn,en)(a0,d0,e0)AlteredDemands 
 
 
 
 
 
strategy employed by the operator, and hence, a maximin
optimization problem needs to be solved. In our formulation,
we limit
the attack’s strength by the number of energy
demands he is capable of altering, without being detected.
For the case where the attacker is capable of altering all of
the consumer’s energy demands (the attacks thus reach their
full potential and force the system to operate at the maximum
achievable total cost), we show that the attacker’s maximin
problem is reduced to a maximization problem. Our main
contribution can be summarized as follows.

•

•

•

•

For both the operator and an unlimited attacker, we
propose optimal ofﬂine strategies (Section III). The gap
between the two indicates the maximum damage that an
attack possibly causes. We also provide efﬁcient online
strategies for both of them, which are more practical in
terms of operability and indicate a lower bound on the
possible damage due to an unlimited attack.
For more limited attacks (Section IV), we use a simple
greedy algorithm to arrive at a lower bound on the re-
sulting total cost in terms of the ﬂexibility allowed to the
stealthy attacker for altering the demands. Additionally,
we provide a Dynamic Programming-based algorithm
that computes an upper bound on the total cost achieved
by such attacks.
We provide numerical results that support our theoreti-
cal claims under different scenarios (Section V). In these
studies, we compare the average system performance in
the presence/absence of attacks with the expected sys-
tem performance when the delay tolerance of the jobs
is not exploited by the operator (resembling the current
electric gird where the communication infrastructure is
absent). Moreover, we show the trade-off between the
strength of the intrusion detection at the operator and
the reduction in the system’s efﬁciency due to stealthy
attacks.
From our analysis and numerical results, we conclude
that in the absence of security threats an increase
in the delay tolerance of the energy demands increases
the energy efﬁciency of the system, as expected, since
the smart grid’s operator is offered more scheduling
opportunities. On the other hand, with a limited defense
mechanism at the operator, this increase offers a similar
opportunity to the attacker to force costs even higher
than those incurred by the regular grid, transposing
the purpose of the communication capabilities provided
to the consumers.

II. PROBLEM FORMULATION

In this paper, we consider the control and optimization
framework ﬁrst proposed in [4] for the demand side of the
smart grid. This framework assumes a central controller and
n energy consumers that send their energy service demands
to the controller using perfect channels. We consider a
time-slotted system with this model and add to it a single
active attacker, that is capable of intercepting and altering
the consumer demands. Let J =
denote the set
of energy demands. The jth energy demand is composed

1, . . . , n
}
{

∈

≤

a2

. . .

N+ denote the the
of the tuple (a j, d j, e j), where a j, d j
R+
demand’s arrival time and deadline, respectively, e j
denotes the requested total energy by the consumer, and
a1
to the
controller over a perfect channel that is fully intercepted by
the attacker. Hence the attacker can substitute each demand
(a j, d j, e j) by (a(cid:48)j, d(cid:48)j, e(cid:48)j), which are then received by the
controller. For ease of notation, we deﬁne a = [a1, . . . , an].
a(cid:48), d, d(cid:48), e, e(cid:48) are deﬁned similarly.

an. Each energy demand is sent

≤

≤

∈

∈

Upon receiving the n (altered) demands, an admissible
schedule of these jobs is to be determined by the controller.
A schedule is admissible if each job is served its requested
energy upon or after its arrival and before or upon its
deadline (job preemption is allowed). Letting T = max j d(cid:48)j,
T , where s jt denotes the
R+n
a schedule is given by S
×
in time slot t. Let
amount of energy allocated to job j
ES(t) be the total energy consumed at time slot t
[0, T ]
under the schedule S, i.e., ES(t) = ∑ j
J s jt . Let C(ES(t))
∈
denote the cost paid for the total energy consumed at time
slot t with schedule S, where C : R+
R+ is assumed to
be non-decreasing and convex. The convexity assumption
implies that, as the demand increases, the differential cost
at the operator increases, i.e., serving each additional unit of
energy to increasing demand becomes more expensive [4].
Accordingly, the controller attempts to ﬁnd an admissible
schedule that balances the load over [0, T ]. The optimization
problem at the controller side is then deﬁned as follows:

→

∈

Cmin(a(cid:48), d(cid:48), e(cid:48)) = min

S

T
∑
t=1

C(ES(t))

s.t.

J,

t
∀

∈

[0, T ],

∈

j

∀

≥
s jt = e(cid:48)j,

0,

s jt
T
∑
t=1
s jt = 0,

j

J,

∀

∈
t < a(cid:48)j,t > d(cid:48)j,
∀

J.

j

∀

∈

(Pmin)

On the other hand, the attacker attempts to ﬁnd appropriate
values of a(cid:48), d(cid:48), e(cid:48) such that the cost achieved by the legit-
imate controller is maximized, without being detected (see
Figure 1). The intrusion detection capability at the controller
is modeled as the number of energy demands the attacker is
capable of altering without being detected. This threshold is
known a priori to all parties and the attacker solves:

Cmaxmin(a, d, e, β) = max

a(cid:48),d(cid:48),e(cid:48),J∗

Cmin(a(cid:48), d(cid:48), e(cid:48))

s.t.

N+,

a(cid:48)j, d(cid:48)j ∈
e(cid:48)j = e j,
a(cid:48)j ≥
J∗
|
| ≤
1, βn
∈
J : a(cid:48)j (cid:54)

a j, d(cid:48)j ≤
βn,

N+ and
= a j or d(cid:48)j (cid:54)

j

∀
J,

j
∀
∈
d j,

J,

∈

j

∀

J,

∈
(Pmaxmin)

= d j

.
}

(1)

where β

∈

R, 0

β

≤
J∗ =

≤
j

{

∈

In the above formulation, J∗ denotes the set of jobs altered
by the attacker, and β denotes the fraction of jobs that can
be altered without being detected. The remainder of the
constraints imply that, if the energy requirement of a job is

not satisﬁed or a job is served outside its legitimate service
duration, the attacker can be easily detected, e.g., by the
corresponding consumer. Under this formulation, the case
β = 1 is of special interest to us as Problem (Pmaxmin) can
be transformed into a maximization problem. To see this,
consider any undetectable strategy followed by the attacker
such that a(cid:48)j = d(cid:48)j = t j, for some t j
J.
All such strategies are always feasible to the attacker by our
assumption of β = 1 and, if employed by the attacker, leave
no degrees of freedom to the controller. Moreover, due to
the monotonicity and convexity of C, it is easy to see that it
sufﬁces for the attacker to consider only this set of strategies.
Therefore the Problem (Pmaxmin), under (β = 1), reduces to
a cost maximization problem which looks for a strategy that
serves each job in a single feasible time slot. The attacker
hence solves the following problem:

[a j, d j], for all jobs j

∈

∈

Cmax(a, d, e) = max

S

T
∑
t=1

C(ES(t))

s.t.

s jt = 0,
s jt j = e j,
t j

[a j, d j],

∈

j

∀

∀

J,

t
∀
J,

∈
j

∈
j

∀

[0, T ],t

= t j

∈

J.

∈

(Pmax)

We provide efﬁcient ofﬂine and online solutions to Prob-
lems (Pmin) and (Pmax) in the next section, and upper
and lower bounds for Problem (Pmaxmin) in Section IV.
For comparison purposes, we will also consider an inelastic
scheduling policy for the controller as a baseline, where each
job is served its total energy immediately upon its arrival.
This strategy represents the case when the delay tolerance
of the jobs is not exploited. Therefore, the resulting cost
resembles that paid in the current regular gird, where no
communication channels are established, and accordingly,
the system is not vulnerable to the cyber-attacks discussed
in this paper. The resulting baseline cost
is deﬁned as:
[0,T ] C
Cbase(a, d, e) = ∑t
∈

(cid:16)
∑ j:a j=t e j
Finally, the following deﬁnitions are used throughout this
paper. For each job j
J, deﬁne its job allowance to be l j =
d j
J l j, and emax =
−
∈
Je j. Denote the set of the endpoints of the job intervals
max j
∈
a1, . . . , an
by X : =
. For every
{
}
}
pair k
X, let I (k, l) be the set of all jobs whose intervals
l
∈
are entirely contained in [k, l], that is, I (k, l) =
k, d j

J l j, lmin = min j
∈

a j and let lmax = max j

d1, . . . , dn

1, . . . , q

J : a j

} ∪ {

≥

≤

=

∈

∈

(cid:17)

{

{

l

j

.

.

≤

}

III. OPTIMAL STRATEGIES AND PERFORMANCE BOUNDS

In this section, we ﬁrst ﬁnd the optimal scheduling strategy
for the controller (the solution to Problem (Pmin)). Second,
we study Problem (Pmax) and propose both an optimal
ofﬂine attack and a simple online attack and compare their
performance. Finally, an explicit bound on the impact of an
attack is presented.

A. Optimal Scheduling for the Controller

The optimization problem at the controller (Problem Pmin)
can be directly mapped to the “minimum-energy CPU
scheduling problem" studied in [5]. Our discussion below

−

is an adapted discrete-time version to that of [5]. Deﬁne the
energy intensity on I (k, l) to be
∑ j
l

I (k,l) e j
∈
k + 1

E(I (k, l)) =

(2)

,

∈

and let I ∗(k∗, l∗) be the set of jobs that maximizes E(I (k, l))
X. It is shown in [5] that the optimal strategy
over all k, l
schedules a total energy of E(I ∗(k∗, l∗)) in each time slot
in [k∗, l∗]. Hence a greedy algorithm that searches for I ∗,
schedules the jobs in I ∗ and then removes those jobs (and
the corresponding interval) from the problem instance, can
be used to solve Problem (Pmin):

Algorithm 1: Repeat the steps below until J is empty.
1) Identify I ∗(k∗, l∗). Schedule the jobs in I ∗(k∗, l∗), such
[k∗, l∗], according
that ES(t) = E(I ∗(k∗, l∗)), for all t
to the Earliest Deadline First (EDF) policy (which is
always feasible).

∈

2) Modify the problem to reﬂect the deletion of the jobs
J

∈
k∗)

I ∗, if a j
←
\
2); modify d j similarly. Set
−

k∗, set a j

≥

in I ∗: For all jobs j
(l∗ −
1, a j
max(k∗ −
J
J
I ∗.
\
←

−

The above algorithm arrives at the optimal schedule with
complexity O(n2). In our simulations (Section V), we also
compute an upper bound on the solution using an online
algorithm that simply distributes the energy requirement of
each job evenly on its service interval [5].

B. The Fully-compromised Controller

∈

We now turn our attention to Problem (Pmax) and form
a graph theoretic version of this problem. This is useful for
describing the optimal full attack strategy, and for studying
the impact of more limited attacks. Let G = (V, E) be the
interval graph induced by the jobs in J, i.e., each vertex
v j
V corresponds to a job interval, given by [a j, d j], while
an edge is thrown between any two vertices iff the two
corresponding job intervals intersect at one or more time slots
[6]. We deﬁne the corresponding cost function over subsets
(cid:1)
of V as f : 2V
S e j
∈
V . In the induced interval graph, a clique is
for any S
⊆
a subset of vertices S
V , such that every two vertices in
S are connected by an edge. A maximal clique (inclusion-
wise) is a clique that is not a subset of a larger clique. By
these deﬁnitions, our problem corresponds to ﬁnding a clique
partition of G that maximizes the total cost taken over the
cliques in this partition, i.e., ﬁnd
Cmax(G) = max

R+, given by f ( /0) = 0, f (S) = C (cid:0)

f (K),

(3)

∑ j

→

⊆

∈

⊆

≤

V such that f (S)

f (T ), whenever S

T
⊆
⊆
f (T ), and u

∈
where P (G) is the set of all clique partitions of G. By
our assumptions on C, the set function f is non-decreasing,
V . Moreover, for every
i.e., f (S)
S, T
S), we have
∈
f (S + u) + f (T )
f (S) + f (T + u). By these two properties,
the optimal clique partition, solving (3), includes a maximal
clique . In fact, if we let G(I (k, l)) be a subgraph of G re-
stricted only to the jobs in any I (k, l), then Cmax(G(I (k, l)))
is achieved by a partition that contains a maximal clique
of the subgraph G(I (k, l)) as well. Hence, for any such

(T

≥

≥

∪

V

\

P (G) ∑

K

Q

Q

(cid:54)
subgraph, each maximal clique contained in the subgraph
separates the optimization problem into two subproblems
and a Dynamic Programming algorithm (adapted from [7])
solves the problem accordingly.

Let C(k, l) be the maximum feasible cost that could be
achieved by scheduling the jobs in I (k, l). Given k < z < l,
let Kz
k,l be the set of all the jobs whose intervals contain time
slot z, i.e., Kz
k,l is a maximal clique contained in I (k, l). By
our discussion, the following recursion clearly holds.






e j

 +C(k, z

−

1) +C(z + 1, l)

 .

(4)

C(k, l) = max
[k,l]

z

∈

C


 ∑
Kz
j
k,l
∈

Our algorithm iterates over all intervals [k, l], k, l

l,
with increasing interval length. In each iteration step, the
algorithm computes C(k, l), where the last two terms are
obtained from previous iterations. A formal description of
this Dynamic Program is now presented.

X, k

≤

∈

Algorithm 2: [7] For all k

∈
(cid:32)

C(k, k) = C

X, set the initial condition

(cid:33)

e j

.

∑
I (k,k)

∈

j

(5)

With increasing subproblem width (l
ing Dynamic Program:

−

k), apply the follow-

Q (k, l) =

1) Solve the optimization (4). Denote the solution by z∗.
2) Update the clique partition
(cid:40)

/0, if I (k, l) = /0,
Kz∗
Q (k, z∗ −

1)

k,l ∪

Q (z∗ + 1, l), o.w.

∈

∪
The optimal cost is C(1, q) and the optimal clique partition
is Q (1, q), which are computed in the ﬁnal step of the above
program. From the obtained clique partition, one can easily
J and set a(cid:48)j = d(cid:48)j = t j,
compute a set of time slots, t j, j
solving Problem (Pmax). The obtained schedule leaves no
degrees of freedom to the controller as, after the attacker’s
modiﬁcations, all jobs become virtually urgent to controller
and must be scheduled immediately upon their arrival. It is
also clear that, as the jobs’ allowance increases, the attacker
is capable of forming larger cliques and hence imposing
higher costs on the controller. Our goal in the remainder
of this section is to formalize this observation. Towards this
end, we ﬁrst present a simple online attack where the jobs
in J are partitioned into cliques according to an EDF policy.
That is, starting from the earliest deadline, all the jobs that
arrive before or upon each deadline are grouped in a single
clique and then removed from the problem instance:

Algorithm 3: Set i = 1, m = 0. Repeat until J is empty:
1) Set ˜d = min j
J d j.
∈
˜d
2) Set Ni =
J : a j
j
.
}
∈
Ni, set t j = ˜d.
3) For all j
4) Update J
Ni, m
J
Once the clique partition

i + 1.
1, . . . , m

{
∈
←

≤

\

m + 1, i
←
, i
Ni
{

}

←
∈ {

, has been
}

established, the resulting cost is computed as

Cmax =

(cid:32)

m
∑
i=1

C

∑
Ni
j
∈

(cid:33)

e j

.

(6)

Fig. 2: A lower bound on Cmax plotted for various values of n and
lmin under a quadratic cost function (i.e., b = 2). The average
energy demand is 10 while the average inter-arrival time is 5.

Our next result shows that, despite its simplicity and online
operation, Algorithm 3 could still achieve a signiﬁcant loss
in the system’s efﬁciency:

Proposition 1: For C(E) = Eb, b
1
rb

has an approximation factor of
Moreover, when C(.) is a power function of the form C(E) =
Eb, b
1, the simple structure of the online solution
also allows us to arrive at an explicit lower bound for Cmax:

1, Algorithm 3
lmax
lmin (cid:101)

R, b
∈
1 , r : =
−

R, b

≥
(cid:100)

+ 1.

≥

∈

Proposition 2: For C(E) = Eb, b

R, b
∈
(cid:18) lmin ∑ j
J e j
∈
2lmin + an

≥

1,
(cid:19)b

≥

a1

−

Cmax(a, d, e)

.

(7)

The proofs for both propositions are provided in the Ap-
pendix. The above result can be used to estimate the growth
of Cmax with lmin. For instance, if we ﬁx the average energy
demand and the average inter-arrival time to arbitrary values,
the bound obtained in Proposition 2 versus an increasing lmin
can be plotted. See Figure 2 for an example. As shown in
the ﬁgure, Cmax grows at least linearly with lmin, and the rate
of growth increases as the sample size n increases. More
numerical results are reported in Section V.

Our numerical results in Section V provide more insights

on the performance of the online attack.

IV. PERFORMANCE BOUNDS UNDER LIMITED ATTACKS

In this section, we study the case where the attacker is
capable of changing the arrival times and the deadlines of
only B = βn jobs. Similar to our argument in Section II, the
attacker could only consider the following strategy: Choose
J such that
= βn, and set a(cid:48)j = d(cid:48)j = t∗j
J∗|
a set of jobs J∗ ⊂
|
for all jobs j
J∗ and leave all other jobs unaltered. We
∈
propose two polynomial time algorithms that render a lower
and an upper bound, respectively, on the performance due to
the considered limited attack. For simplicity, we let Cmax =
Cmax(a, d, e) and Cmaxmin(β) = Cmaxmin(a, d, e, β).

A. A lower bound

Inspired by the standard greedy algorithm for the fractional
knapsack problem [8], we propose a simple variant that is
tailored to our problem. In the classical fractional knapsack
problem, m items are given, each with a weight wi and a
value vi. We need to specify which items to collect such

12345678910050100150200250300350400lminLower bound on Cmax  n=500n=100n=50n=30n=20n=10β0

that their total weight does not exceed a speciﬁed quantity
(β0 ∑i wi, 0
1) and their total value is maximized. A
fraction of any item might be collected, and the correspond-
ing value is scaled according its chosen weight. The greedy
algorithm below solves this problem.

≤

≤

Algorithm 4: Given (v1, w1), . . . , (vm, wm) and β0
1) Sort (vi, wi) according to vi/wi

in a non-increasing

order.

2) Choose the ﬁrst k pairs, (v1, w1), . . . , (vk, wk) s.t.

k
∑
i=1

wi

β0

≤

m
∑
i=1

wi,

k+1
∑
i=1

m
∑
i=1

wi > β0

wi.

(8)

The optimal set is the chosen k items in step (2), and a
fraction of the k + 1-th item as the budget allows. Moreover,
if we let the remaining weight budget after selecting the
ﬁrst k pairs to be β1 = (cid:0)β0 ∑m
(cid:1) /wk+1, by the
greedy selection, we have

i=1 wi

i=1 wi

∑k

−

k
∑
i=1

vi + β1vk+1

β0

≥

m
∑
i=1

vi.

(9)

The proposed attack strategy builds on this algorithm:
ﬁrst, the attacker ﬁnds the optimal clique partition using
Algorithm 2, assuming a full budget. Then, it utilizes the
above algorithm twice; once to choose a set of cliques to
fully compress (i.e., to collapse the job allowances within
each clique to one common time slot), and to choose a set
of jobs within a given clique to fully compress. The choice
that results in a higher cost is adapted.

≤

≤

Algorithm 5:

Ki e j and Ni =
∈

1) Find the optimal clique partition of
the jobs, K1, . . . , Km, 1
n, using Algorithm 2
m
(assuming a full budget). For each clique Ki, set Ei =
∑ j

Ki
.
|
|
2) Apply Algorithm 4 to the pairs (C(Ei), Ni), 1

m,
and β, and pick the resulting k cliques (ignoring the
fraction generated by the algorithm). Compute the cost
C1 resulting from fully compressing those k cliques.
That is, C1 = ∑k

i=1 C(Ei).

3) For the (k +1)-th clique, apply Algorithm 4 to the pairs
. Compute the cost C2
(e j, 1), j
resulting from fully compressing the chosen k(cid:48) jobs.
(cid:17)
That is, C2 = C
.

Kk+1 and β2 : = βn
Nk+1

(cid:16)
∑k(cid:48)

≤

≤

∈

i

j=1 e j

4) If C1

≥

C2, fully compress the jobs in cliques 1, . . . , k.
Otherwise, fully compress the chosen jobs from clique
k + 1. Set Cmaxmin(β) = max(C1,C2).

To get insights on the performance of this attack, suppose
that, under no budget constraints, the optimal clique partition
(obtained from Algorithm 2) is composed of cliques of size
one. In this case, our greedy attack will choose to fully
compress the βn jobs of the highest energy demands. This
βCmax. Another extreme case
guarantees that Cmaxmin(β)
is when the optimal clique partition is composed of one
clique containing the n jobs. Here, our greedy selection
(cid:1). When C(.) is a
J e j
guarantees that Cmaxmin(β)
∈
R, b
power function of the form C(E) = Eb, b
1, we then
βbCmax. For more general clique partitions,
get Cmaxmin(β)
these two insights are used to arrive at the achievable bound
below (the proof is found in the Appendix).

C (cid:0)β ∑ j

≥

≥

≥

≥

∈

Proposition 3: For C(E) = Eb, b
βb
2

Cmaxmin(β)

≥

1,

≥

R, b

∈
Cmax.

(10)

B. An upper bound

\

∈

∈

In order to compute an upper bound on the system’s
performance, we ﬁnd the optimal attack strategy under the
assumption that the controller follows the baseline schedul-
ing strategy given in Section II. We further assume that at
most one job arrives at any given time slot t
[0, T ]. Our
main observation is that, under these assumptions, Problem
Pmaxmin can be solved by a Dynamic Programming al-
gorithm similar to Algorithm 2. To illustrate, consider the
solution to Problem Pmaxmin when the controller follows
the baseline scheduling strategy. The jobs’ schedule under
this solution is a clique partition of the induced graph G,
which we denote by P ∗(G). Let O denote the set of all the
cliques of size one in P ∗(G) and O(cid:48) = P ∗(G)
O. Since at
most one job can arrive at any time slot, without of loss of
optimality, we can assume that each clique K
O(cid:48) contains
exactly a single job, say jK, that has an unaltered arrival time.
The remainder of the jobs would have arrival times altered
to match that of jK. For instance, we can choose jK as the
job with latest arrival in clique K. Hence, the budget used to
form clique K is exactly
1. This observation leads to
| −
the below proposition (the proof is found in the Appendix).
O(cid:48) be the clique containing the
maximum total energy requirement in O(cid:48). If K1 is not a
maximal clique in G, it can be made maximal by adding
job(s) only from O.
The above proposition can be directly applied to any sub-
graph G(I (k, l)), as deﬁned in Section III. Similar to the
case β = 1, for any such subgraph, each maximal clique
contained in the subgraph separates the optimization problem
into two subproblems. Hence, if we dedicate a budget of
m jobs to any interval [k, l], we can construct a recursion
that computes C(k, l, m) by parsing for maximal cliques in
each time slot z
[k, l], investigating all the possibilities of
using only a budget of i out of m for each found clique.
We would also exhaust all the possibilities of distributing the
remaining budget m
i + 1 on the resulting two subproblems
of any chosen clique, and any chosen budget for that clique.
By Proposition 4, the constructed recursion indeed holds. A
Dynamic Program similar to Algorithm 2 is built and the
results are reported in Section V.

Proposition 4: Let K1

K
|

−

∈

∈

V. NUMERICAL RESULTS

In this section, the job arrivals are simulated as a Poisson
arrival process with mean 5. All the job allowances are
independently and identically distributed exponential random
variables. We use a quadratic cost function C(E) = E2 in all
of our simulations. Figure 3 reports our comparison between
the maximum and the minimum cost caused by an opti-
mal/online full attack and an optimal/online uncompromised
controller, for n = 100. The results are obtained by varying
the job allowance mean and are averaged over 20 trials.
The amount of energy demands is uniformly distributed

Fig. 3: Average total cost for different scheduling strategies versus
the job allowance mean. The mean interarrival time is 5.

Fig. 5: Performance of a limited attack with respect to the
allowed budget fraction β for 50 identical jobs with
e j = 5, l j = 50. The interarrival times are all set to Ma.

when Ma = 1, with our chosen parameters, a single clique
of jobs could be formed to achieve the maximum cost,
and hence, in accordance with our theoretical results, the
attacker could achieve approximately β2 of the maximum
achievable cost. As Ma increases, the growth of Cmaxmin/Cmax
with β approaches a linear trend. The reason is that as Ma
increases, the size of the optimal clique partition of jobs
increases, having approximately equally sized cliques. Hence
the maximum cost decreases so does the contribution of each
clique to the maximum cost.

VI. CONCLUSION

In this paper, we have studied the performance of the
smart grid, in terms of energy efﬁciency, in the presence
of active attacks on the system. When the grid operator is
fully compromised, we have proposed optimal scheduling
and undetectable attack strategies. We have derived bounds
on both the minimum and maximum achievable cost by an
attacker with low complexity, online algorithms. In addition,
we gave bounds on the impact of attacks that are limited by
intrusion detection at the operator. In these limited attacks,
we have shown that a signiﬁcant increase in cost could
still be achieved by a simple greedy algorithm. Overall,
our theoretical analysis and numerical results show that an
inelastic utilization of the communication channels in the
smart grid could result in costs signiﬁcantly higher than those
expected for both the smart grid and the current electric
grid, motivating the need for stronger intrusion detection and
defense strategies for grid operators.

REFERENCES

[1] K. Moslehi and R. Kumar, “A reliability perspective of the smart grid,”
Smart Grid, IEEE Transactions on, vol. 1, no. 1, pp. 57 –64, june 2010.
[2] T. Lui, W. Stirling, and H. Marcy, “Get smart,” Power and Energy

Magazine, IEEE, vol. 8, no. 3, pp. 66 –78, may-june 2010.

[3] P. McDaniel and S. McLaughlin, “Security and privacy challenges in
the smart grid,” Security Privacy, IEEE, vol. 7, no. 3, pp. 75 –77, 2009.
[4] I. Koutsopoulos and L. Tassiulas, “Control and optimization meet the
smart power grid-scheduling of power demands for optimal energy
management,” Arxiv preprint arXiv:1008.3614, 2010.

[5] F. Yao, A. Demers, and S. Shenker, “A scheduling model for reduced
cpu energy,” in Foundations of Computer Science, 1995. Proceedings.,
36th Annual Symposium on.

IEEE, 1995, pp. 374–382.

[6] J. Gross and J. Yellen, Graph theory and its applications. CRC press,

2006.

[7] D. Gijswijt, V. Jost, and M. Queyranne, “Clique partitioning of interval
graphs with submodular costs on the cliques,” RAIRO-Operations
Research, vol. 41, no. 03, pp. 275–287, 2007.

Fig. 4: Bounds on the total cost attained by a partial attack with a
varying β for 50 jobs.

on [1, 5]. As shown, as the job allowance mean increases,
more ﬂexibility is offered to the uncompromized controller,
hence enabling further cost reductions. This, however, offers
a similar opportunity for the attacker to form larger cliques of
jobs and increase the harm. For instance, a fully unprotected
controller, on the average, ends up paying 250% of the
expected baseline cost (700% of the expected minimum
cost), under an optimal full attack and large-enough time-
ﬂexibility. Our proposed suboptimal algorithm for the at-
tacker maintains signiﬁcant gains over both the baseline
and minimum costs, even with the increased job allowance
variance. Figure 4 focuses on the performance of partial
attacks that were launched using the proposed algorithms
in Section IV. In our experiment, the simulation sample
is composed of 50 jobs. The energy requirements were
uniformly distributed on [1, 20] while the mean job allowance
was set to 40. The results are averaged over 5 trials. As
shown, with the increased allowance mean, the obtained
clique partitions become denser and therefore the bounds
become tighter. Also, observe that using a simple greedy
algorithm, the attacker is immediately capable of achieving
a cost arbitrarily close to Cbase for our sample, with a chance
of altering only 5 jobs out of 50.

Finally, in a more controlled experiment, we have gener-
ated 50 identical demands, with each requiring a 5 energy
units and offering an allowance of 50. The interarrival times
between jobs are all set to one value, denoted by Ma in
Figure 5. Ma was set
to various values between 1 and
10, and Cmaxmin/Cmax was computed with varying values
of β. This enables us to gain more insights on how the
growth of Cmaxmin, with respect to β, and how this growth
is affected by the clique densities. As shown in the ﬁgure,

12345678910050010001500200025003000Job allowance meanAverage total cost  CmaxCmaxCbaseCminCmin0.10.20.30.40.50.60.70.80.900.511.522.533.544.5x 104βAverage total cost  CmaxCmaxminCmaxminCbaseCmin0.10.20.30.40.50.60.70.80.900.10.20.30.40.50.60.70.80.9βCatt/Cmax  Ma = 1Ma = 2Ma = 5Ma = 10cliques in step (2) of Algorithm 5 and (9), we have C0
β ∑m

i=1 Eb

≥

i = βCmax. We then have
Cmaxmin
C0

=

C2
C2 + β1Eb
βb
2
βb
2 + β1

=

k+1

k+1 ≥

max(C1,C2)
C1 + β1Eb
βb
2Eb
k+1
k+1 + β1Eb
2Eb
βb
k+1
βb
1
βb
−
2
2
βb
βb
1
2 + β2
2 + 1
−
βb
βb
1
1
−
−
1 + 1 ≥
2

βb

=

,

−

=

(a)

≥

(b)

≥

where (a) follows from β1
βb
2 C0
Hence Cmaxmin ≥
≥
D. Proof of Proposition 4

1
−

β2 and (b) follows from β2
≤
βb
2 Cmax.

β.

≥

\

∈

∈

O(cid:48) and a(cid:48)j (cid:54)

Assume that K1 is not maximal. Then there exists a job
j
K1 such that K1 + j is a clique in G. If j is in some
V
= a j then we can schedule job j in
clique K2
K1 without affecting the attacker’s budget. Moreover, by the
convexity of C(.), the resulting cost cannot decrease by this
change. If j is in some clique K2
O(cid:48), and a(cid:48)j = a j, then we
can schedule all the jobs in clique K1 together with job j,
and schedule all the jobs in K2 at the latest arrival time of
the remaining jobs in K2. This leaves the budget unaffected
and could only increase the total resulting cost.

∈

[8] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduction

to Algorithms. The MIT Press, 2009.

A. Proof of Proposition 1

APPENDIX

For a given problem instance, J, a, d, e, let the optimal

partition of the jobs in J be K1, K2, . . . , Km∗ such that

Cmax(a, d, e) =

m∗
∑
z=1

(cid:32)

(cid:33)b

e j

∑
Kz
j
∈
1, . . . , m

.

(11)

Ni
{

, i
, we have that, for
By our construction of
∈ {
}
all i(cid:48) > i, all the jobs in Ni(cid:48)
have arrived strictly later than
the earliest deadline of the jobs in Ni. Consequently, each
Kz, z
1, . . . , m∗}
could have a nonempty intersection with
at most r consecutive sets in the partition
.
}
Letting K(z, i) = Kz

1, . . . , m

Ni
{

∈ {

∈ {

, i

}

}

Cmax(a, d, e) =

∩

Ni, we have
(cid:32) m
∑
i=1

m∗
∑
z=1

(cid:32)

(cid:33)(cid:33)b

e j

∑
K(z,i)
j
∈
(cid:32)

(cid:33)b

e j

rb
1
−

m∗
m
∑
∑
z=1
i=1
rb
1Cmax(a, d, e),
−

∑
K(z,i)
∈

j

(a)

≤

≤

where (a) is obtained by the power mean inequality.

B. Proof of Proposition 2

From Eq(6) and the power mean inequality, we have

Cmax

≥

(cid:18) ∑ j

(cid:19)b

J e j
∈
m

.

(12)

Cmax ≥
n/r + 2, where r = nlmin
a1
−
R

≤
n/r + 2 for (n/r)

, and this
1, we are done. Otherwise, it

N+.

an

∈

\

We will show that m
completes the proof. If r
sufﬁces to show that m

≤

≤

−

k, k

(cid:99) −

(cid:99) −

(cid:99) −

n/r
(cid:98)

n/r
(cid:98)

In the solution of Algorithm 3, the maximum number of
cliques of size 1 is
, for otherwise, our assumption on
(cid:99)
r is violated. We assume that the number of cliques of size 1
0. Hence the summation of the interarrival
is
≥
k) lmin, if they did not
n/r
times of those jobs is GE (
(cid:98)
include the last arrival in J, and is GE (
1) lmin if
k
n/r
(cid:98)
they did. On the other hand, if the number of the remaining
cliques is strictly larger than k + 2,
then necessarily the
summation of the interarrival times corresponding to those
cliques is strictly larger than (k + 1)lmin, if they include the
last arrival, and strictly larger than (k + 1)lmin otherwise.
Combined with the argument above, we ﬁnd that we can
have at most k + 2 remaining cliques, and accordingly m
n/r
(cid:98)
C. Proof of Proposition 3
(N1+...+Nk)

denote the fraction of budget
available to clique k + 1 assuming the ﬁrst k cliques are fully
compressed, and β2 = β n
.
Nk+1

Let β1 = βn
−

By the greedy selection of jobs in step (3) of Algorithm 5
j=1 e j
k+1.
k+1. Then by the greedy selection of

and (9), we have ∑k(cid:48)
Let C0 = C1 + β1Eb

β2Ek+1. Therefore, C2

n/r + 2.

2Eb
βb

+ 2

Nk+1

≤

≥

≤

≥

(cid:99)

