1
2
0
2

b
e
F
0
1

]

R
C
.
s
c
[

2
v
3
3
5
0
0
.
0
1
0
2
:
v
i
X
r
a

Linking Threat Tactics, Techniques, and Patterns with Defensive
Weaknesses, Vulnerabilities and Affected Platform
Configurations for Cyber Hunting

Erik Hemberg
MIT, hembergerik@csail.mit.edu
Jonathan Kelly
MIT, jgkelly@alumn.mit.edu
Michal Shlapentokh-Rothman
MIT, mshlapen@alumn.mit.edu
Bryn Reinstadler
MIT, brynr@mit.edu
Katherine Xu
MIT, katexu@mit.edu
Nick Rutar
Perspecta Labs, nrutar@perspectalabs.com
Una-May O’Reilly
MIT, unamay@csail.mit.edu

ABSTRACT
Many public sources of cyber threat and vulnerability informa-
tion exist to help defend cyber systems. This paper links MITRE’s
ATT&CK MATRIX of Tactics and Techniques, NIST’s Common
Weakness Enumerations (CWE), Common Vulnerabilities and Expo-
sures (CVE), and Common Attack Pattern Enumeration and Classi-
fication list (CAPEC), to gain further insight from alerts, threats and
vulnerabilities. We preserve all entries and relations of the sources,
while enabling bi-directional, relational path tracing within an ag-
gregate data graph called BRON. In one example, we use BRON
to enhance the information derived from a list of the top 10 most
frequently exploited CVEs. We identify attack patterns, tactics, and
techniques that exploit these CVEs and also uncover a disparity in
how much linked information exists for each of these CVEs. This
prompts us to further inventory BRON’s collection of sources to
provide a view of the extent and range of the coverage and blind
spots of public data sources.

CCS CONCEPTS
• Security and Privacy → Usability in security and privacy.

KEYWORDS
cyber security, threat hunting, vulnerabilities, tactics

ACM Reference Format:
Erik Hemberg, MIT, hembergerik@csail.mit.edu, Jonathan Kelly, MIT,
jgkelly@alumn.mit.edu, Michal Shlapentokh-Rothman, MIT, mshlapen@alumn.mit.edu,
Bryn Reinstadler, MIT, brynr@mit.edu, Katherine Xu, MIT, katexu@mit.edu,
Nick Rutar, Perspecta Labs, nrutar@perspectalabs.com, and Una-May O’Reilly,
MIT, unamay@csail.mit.edu . 2021. Linking Threat Tactics, Techniques, and

Conference’17, July 2017, Washington, DC, USA
2021. ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

Patterns with Defensive Weaknesses, Vulnerabilities and Affected Platform
Configurations for Cyber Hunting. In Proceedings of ACM Conference (Con-
ference’17). ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/
nnnnnnn.nnnnnnn

1 INTRODUCTION
Cyber threats are harmful and perpetrated by both state and crim-
inal actors. Large scale community efforts to share information
about them facilitate better security. Similarly, because networks
overlap in their deployed software and hardware, information on
vulnerabilities, affected products, exploits, and patches/fixes is of-
ten shared via community efforts. In this contribution, we data
mine a set of these information sources in order to expand upon
their defensive utility for threat hunting, i.e. actively exploring
and pursuing potential advanced persistent threats [14]. These
sources are all maintained by MITRE and NIST. The sources are:
1) MITRE ATT&CK Tactics [15], 2) MITRE ATT&CK Techniques [15],
3) Common Attack Pattern Enumeration and Classification
(CAPEC) [16], 4) Common Weakness Enumerations (CWE) [18],
5) Common Vulnerability Enumerations (CVE) [17].

On one axis, these sources offer both abstract threat and con-
crete vulnerability information. For example, a CVE has concrete
information about affected products while a ATTACK Tactic is an
abstract goal of an APT, such as Defense Evasion. These two
types of information have complementary value when assessing
a security risk and mitigating it. On another axis, the data spans
information from threat tactics to vulnerabilities, with tactics tar-
geting vulnerabilities. This axis offers insights starting from threat
going to vulnerability or vice versa.

We conduct two related inquiries. The first is centered on se-
curity insight exploration for threat hunting. We query the data

 
 
 
 
 
 
Conference’17, July 2017, Washington, DC, USA

A. Non, et al.

sources to find out how it helps with enlarging the scope of knowl-
edge around cyber threat alerts, how it informs product security
evaluations, and how it identifies connections along the threat to
vulnerability axis. The second follows from a finding of the first:
not all the data we hope to explore for enhancement is present.
The second inquiry, therefore, introspectively examines the sources
as an amalgamation in order to gauge their collective extent (and
consequent value), e.g. not all data sources are connected. This in-
ventory serves to highlight “known and not known”, though there
is inherent ambiguity between what is unknown or missing.

In proceeding, we combine our selected sources within a graph
framework we call BRON, see Figure 1. BRON provides the con-
venience of unification because the sources are independent but
have relational links between them in 3 pairings: ATT&CK tech-
niques are linked to Attack Patterns, Attack Patterns are linked to
CWE Weaknesses, and Weaknesses are linked to CVE Vulnerabilities.
BRON has bi-directional links that simplify traversing from tactic
to affected product (or vice versa) and that simplify starting from
an Attack Pattern and finding both the ATT&CK Technique and
Weakness it links. These links improve technical efficiency when
scripting queries and running on the graph rather than the sources
independently. Each layer of the graph denotes a different source.
Nodes within a layer are entries from the source. For example,
the second top-most layer has Techniques, and the second from
the bottom has Vulnerabilities. Edges in the graph correspond to
relational links between entries from different sources. While these
links are not bi-directional in the sources, they can be traversed
bi-directionally in BRON’s graph.

The contributions of this paper are:
• Investigations of: a) expanded abstract knowledge concerning
alerts, b) queries that access all the information to provide more
context, c) queries that link threats and vulnerabilities.

• Analysis of BRON query performance
• An inventory of the extent of the public sources and their

inter-connections.

• Open source software to create a graph database of BRON,

including Jupyter notebooks for analyses.

Tactic

Technique

Attack Pattern

Weakness

Vulnerability

Affected Product
Configuration

Figure 1: Schematic of BRON’s graph of the combined
sources. Source entries are nodes and relational links are
edges. In the original source most types of links are uni-
directional. The graph facilitates search in the opposite di-
rection of the source links.

Section 2 describes the data sources. Section 3 describes how we
assembled BRON and use it for analyses. Section 4 is the security-
insight threat hunting inquiry. Section 5 is the inventory-driven
inquiry. Section 6 is the analysis of BRON query performance.
Section 7 situates BRON, as a conceptual approach, within related
work. Section 8 is a discussion. Finally, Section 9 presents potential
future work.

2 DATA SOURCES
Table 1 presents the information sources and two fields that are com-
bined with BRON. There is documentation available for all sources
online, see [15–18, 23]. The NIST National Vulnerability Database
(NVD) provides information on security-related software flaws,
related product configurations, and impact metrics. Both sources
– the Common Weakness Enumerations (CWE) [18] and Common
Vulnerability Enumerations (CVE) [17] – are built upon and
fully synchronized with lists maintained by MITRE.

• The MITRE ATT&CK matrix [15, 32, 33] abstractly describes
cyber attack Techniques organized across twelve sequenced Tactics.
• The CWEs are a community-developed source of software and
hardware weakness types. “Weaknesses are flaws, faults, bugs, and
other errors in software and hardware design, architecture, code,
or implementation that if left unaddressed could result in systems,
networks, and hardware being vulnerable to attack.” [19]

• The CVE list holds publicly known cybersecurity vulnerabili-
ties. In it a Vulnerability is defined as a “weakness in the computa-
tional logic (e.g. code) found in software and hardware components
that, when exploited, results in a negative impact to confidentiality,
integrity, or availability.” [25]. Each CVE entry, i.e. Vulnerability,
contains an identification number, a description, and at least one
reference for publicly known cybersecurity vulnerabilities. Addi-
tional entry information can include fix information, severity scores
and impact ratings according to the Common Vulnerability Scoring
System (CVSS), and links to exploit and advisory information [20].
• A CWE entry has a relational link to a CVE entry. The rela-
tionship implies that the Vulnerability is an example of the (type
of) Weakness. The CVE entry provides a field with severity score in
CVSS format and Known Affected Hardware or Software Configura-
tions. These Affected Product Configurations (or Affected Prod Conf s,
our abbreviation) document specific software or hardware releases
that are affected. Affected Product Configurations specifically are of
interest because, with an inventory, security operators and analysts
can scan them to be alerted to specific targets in their systems.

• The CAPEC list enumerates and classifies Attack Patterns to
support identifying and understanding attacks. Attack Patterns con-
nect the ATT&CK matrix to the CWE source, functioning as bridges
that link a Technique within a Tactic to a CWE entry, i.e. Weakness.
They tie a means of attack (serving a specific tactical objective,
i.e. Tactic) to its targeted weakness. Since a Weakness in CWE can
link to a Vulnerability in CVE, and that entry can link to specific
Known Affected Hardware or Software Configurations, Attack Pat-
terns with this “end-to-end” linkage are means of connecting all the
way from a Tactic that an attacker may choose to specific Known
Affected Hardware or Software Configurations that could be affected.
Vice versa, given some Affected Product Configuration, these Attack

Linking Threat Tactics, Techniques, and Patterns with Defensive Weaknesses, Vulnerabilities and Affected Platform Configurations for Cyber Hunting

Conference’17, July 2017, Washington, DC, USA

Table 1: BRON information sources and types, organization and short descriptions.

Source and Type of Entry

ATT&CK Tactics [15]

ATT&CK Techniques [15]

CAPEC Attack Patterns [16]

NVD CWE Common Weakness Enumeration [18]
NVD CVE Common Vulnerabilities and Exposures [17]
NVD CVE entry field: Known Affected Hardware or Soft-
ware Configuration

NIST
NIST
NIST

NVD CVE entry field: Severity score [8]

NIST

Organization Description

MITRE

MITRE

MITRE

12 common tactics of attack staging. The columns of the ATT&CK
matrix.
Means of achieving a tactical objective, organized by Tactic, the row
elements of the ATT&CK matrix. In BRON, a Technique is a child of a
Tactic.
A naming of a relational concept linking to a Technique (parent) and/or
Weakness (child). Relates to abstract how and why (Tactic and Technique)
of an attack objective and/or to abstract “where” (Weakness) target of
the attack.
Security-related flaws in architecture, design, or code.
Security-related flaws in software and applications.
Specific software application or hardware platform releases that are
affected, given a parent Vulnerability. Abbreviated herein as Affected
Product Configuration. We follow the Common Platform Enumeration
(CPE) naming specification for Affected Product Configurations [23] that
is used in this field.
Severity is scored using the Common Vulnerability Scoring System
(CVSS). The higher the score, the greater the impact of a Vulnerability.
CVSS scores range from 0 to 10.

Patterns make it possible to see what Tactic and Techniques an ad-
versary could use to target it. As the forthcoming inventory shows,
Attack Patterns often lack links to either a Weakness or a Technique.
In an example of pairwise linkages, a Discovery Tactic with a
Technique named System Network Configuration Discovery
links to CAPEC-309, Network Topology Mapping which is related
to Weakness CWE-200, Exposure of Sensitive Information to
an Unauthorized Actor. For this Weakness there are 6,624 Vulnera-
bilities such as CVE-2018-8433, Microsoft Graphics Component
Information Disclosure Vulnerability. CVE-2018-8433 is
linked to 15 Affected Product Configurations.

3 BRON
Figure 1 schematically depicts the selected sources as they are rep-
resented in BRON. BRON is a relational graph which represents
the entries of its different information sources as specific types of
nodes and their internal and external linkages as edges. Links that
are unidirectional in the sources are tagged as such and represented
bi-directionally in BRON’s graph. A BRON graph node has prop-
erties which are the (verbatim) information on the specific entry.
Node properties have been standardized across the different entry
types for ease of analysis and extension, e.g. we maintain the CPE
notation for Affected Product Configuration. BRON is populated by
downloading data from the data sources described in Table 1.

To reference BRON’s information is to therefore query a graph.
For example, to quantify relationships, we trace edges and count
them and/or nodes. Since it uses a bi-directional graph, BRON
offers path finding all the way from abstract attacker tactical goals,
such as Persistence, down to the specific applications that can be
targeted as part of an attack, or vice versa. This can be done with
its information sources “in the wild” but less conveniently. BRON
essentially eliminates the need for enumerative search needed to
invert a directional link. BRON offers direct searching capability

from any node, and it provides traversal along any edge relation,
starting and ending from any two entries of different sources.

For the data mining in the following sections, we use the data
available from the information sources in Table 1 as of March 2020
and updated only the CVE data as of June 2020 to populate BRON.

4 EXPLORING BRON FOR SECURITY

INSIGHTS

A cyber threat hunter turns the predator into prey by actively ex-
ploring and pursuing potential advanced persistent threats assumed
to already be in their cyber environment [5, 7, 14]. To proceed, a
hunter initially asks the question: “Am I under attack?” [5] To re-
spond, they must hypothesize where they would find a threat, when
it could have happened, who may lie behind it and what techniques
it uses. This poses a “needle-in-a-haystack’-like problem so good
cyber hunting practice treats the hunt as a scientific experiment
where data is gathered to prove or disprove the hypothesis [34]. The
ATT&CK framework, only one part of BRON, as a knowledge-base
of adversary behavior, provides a compendium of what adversaries
in general are doing but it doesn’t indicate what a hunter should
choose to look for. The hunter, only once they have determined
what’s important to look for, uses ATT&CK [34].

BRON expands on the capabilities of ATT&CK to aid this hypothesis-

driven threat hunting in two ways. First, if a hypothesis starts
from a specific APT or goal at the Tactic-level, it extends ATT&CK
knowledge on Technique to Attack Patterns (CAPEC) that connect
to software weaknesses and applications with specific vulnerabili-
ties or exposures. For example, per Section 4.1, the hypothesis of
“I could be under a persistence-establishing attack” can be refined
all the way down to “More specifically, a persistence-establishing
attack could be coming through our Chrome browsers”. Because
this type of hypothesis starts with ATT&CK information, which
we show at the top of BRON graph visualizations, we call this
BRON’s top-down hunting support.

Conference’17, July 2017, Washington, DC, USA

A. Non, et al.

Second, BRON supports a hypothesis starting from a potential
target. An example is “Our Chrome browsers are under attack and
this will lead to privilege escalation”. The hunter starts with CVE
entry search, looking for instance of Chrome browser vulnerabili-
ties. Knowledge from within CVE entries that list Chrome browser
vulnerabilities potentially allows the hunter to take some actions,
perhaps checking what versions are on their system. Then, the
knowledge within CWE entries linked to these same CVE entries,
informs them of how to leverage tools and logging to give visibility
into activities that reveal privilege escalation. As a final step, links
from the CWE entry to Attack Pattern (CAPEC) and Technique in-
forms them, e.g. to look at activity involving files that would be
dangerous in the wrong hands (access control). Because this type of
hypothesis starts with Vulnerability information, which we show
at the bottom of BRON graph visualizations, we call this BRON’s
bottom-up hunting support.

In Section 4.1 we show how BRON can help during threat hunt-
ing and provide context to a threat, both with top-down and bottom-
up hunting support. Section 4.2 describes a wider threat context
for web browsers. Section 4.3 analyzes properties of alerts about
common Vulnerabilities and Weaknesses.

4.1 Threat Tactics and Affected Products
Here we presume a hunter acknowledges that the network perime-
ter has been compromised. They ask how can they identify whether
a hosted product is targeted by a specific APT tactic, such as per-
sistence, and vulnerable because of a particular weakness? What
Attack Pattern spans the tactic and vulnerabilities?

To help address this question, we investigated the longest paths
within BRON: those that run between a Tactic and Affected Product
Configuration. It took advantage of BRON’s source unification and
bi-directional linking of these sources to find them seamlessly. We
chose a common web browser Google Chrome. Figure 2 shows
some of the paths that link Persistence to CVEs that list Google
Chrome as an affected product.

One example of entries in a path to Google Chrome is:
Tactic (TA0003) Persistence: The adversary is trying to main-
tain a foothold. Persistence consists of techniques that adversaries
use to keep access to systems across restarts, changed credentials,
and other interruptions that could cut off access. Techniques used
for persistence include any access, action, or configuration changes
that let them maintain their foothold on systems, such as replacing
or hijacking legitimate code or adding startup code.

a target binary or permissions on the binary itself are improperly
set, then the target binary may be overwritten with another binary
using user-level permissions and executed by the original process.
If the original process and thread are running under a higher per-
missions level, then the replaced binary will also execute under
higher-level permissions, which could include SYSTEM.

Attack Pattern (CAPEC-17) Using Malicious Files: An at-
tack of this type exploits a system’s configuration that allows an
attacker to either directly access an executable file, for example
through shell access; or in a possible worst case allows an attacker to
upload a file and then execute it. Web servers, ftp servers, and mes-
sage oriented middleware systems which have many integration
points are particularly vulnerable, because both the programmers
and the administrators must be in sync regarding the interfaces
and the correct privileges for each interface.

Weakness (CWE-264) Permissions, Privileges, and Access

Controls

Vulnerability CVE-2011-1185

Known Affected Hardware or Software Configuration CPE is
cpe:2.3:a:google:chrome:*:*:*:*:*:*:*:*, up to (excluding) ver-
sion 10.0.648.127.
Vendor-Product extracted as 3rd and 4th fields of Known Affected
Hardware or Software Configuration, obtaining Google Chrome.

A top-down interpretation of this path is: Given an attack’s ob-
jective is Persistence, an attack Using Malicious Files, by
means of exploiting a Services File Permissions Weakness
Technique, could be used to hijack execution flow and run a ma-
licious binary due to Permissions, Privileges, and Access
Controls weaknesses in all versions of Google Chrome “before
10.0.648.127”. These “do not prevent (1) navigation and (2) close
operations on the top location of a sandboxed frame".

Bottom-up, the interpretation of this path is: If any of a given
network’s computers are running Google Chrome versions before
10.0.648.127, the administrators need to be on alert for the browser
being hijacked to execute a malicious payload that can achieve
persistence by exploiting services file permission weaknesses that
allow the attack to run at a higher permission level where they can
replace legitimate binaries with malicious ones.

4.2 Web Browser threat analysis
When evaluating the security risk of different browsers, how are
different ones vulnerable to threats? That is, how will they be
attacked (via what Techniques) and for what actors’ purposes?

Technique (T1574) Hijack Execution Flow: Adversaries
may execute their payloads by hijacking the way operating systems
run programs. Hijacking execution flow can be for the purposes of
persistence, since this hijacked execution may reoccur over time.
Adversaries may also use these mechanisms to elevate privileges
or evade defenses, such as application control.
Sub-Technique (T1574.010) Services File Permissions Weakness:
Adversaries may execute their own malicious payloads by hijacking
the binaries used by services. Adversaries may use flaws in the per-
missions of Windows services to replace the binary that is executed
upon service start. These service processes may automatically ex-
ecute specific binaries as part of their functionality or to perform
other actions. If permissions on the file system directory containing

To explore this question, we chose a set of 5 web browsers:
Apple Safari, Google Chrome, Mozilla Firefox, Microsoft Edge and
Explorer. Note that Edge is a Chromium based browser that is
developed most recently, with security in mind. We then examined
their security scores across all the occasions they were referenced
as an affected product configuration of a Vulnerability (CVE). This
examination included any version of the browser. The distributions
of each browser’s severity scores is shown in Figure 3. These violin
plots can be cross-referenced to the number of entries per source
per Figure 4. All browsers are identified in the same rough number
of Tactics, Techniques, and Attack Patterns. We observed Edge to be
referenced in significantly fewer Affected Product Configurations
over all versions than any other browser. However, it had relatively

Linking Threat Tactics, Techniques, and Patterns with Defensive Weaknesses, Vulnerabilities and Affected Platform Configurations for Cyber Hunting

Conference’17, July 2017, Washington, DC, USA

Tactic

Persistence

Technique

File
System
Permissions
Weakness

Hypervisor

Attack Pattern

Using
Malicious
Files

Install
Rootkit

Weakness

Permission,
Privileges,
and Access
Controls

Improper
Access
Control

Vulnerability

CVE-
2011-
1185

CVE-
2010-
4624

Vendor-Product

Google
Chrome

Cisco
iOS

Figure 2: Subgraph of BRON showing some of the paths re-
lated to the Tactic Persistence.

Table 2: Most frequent exploited vulnerabilities 2016-
2019 [36] analyzed in BRON. APC is Affected Product Con-
figuration

Vulnerability
CVE-2017-11882
CVE-2017-0199
CVE-2017-5638
CVE-2012-0158
CVE-2019-0604
CVE-2017-0143
CVE-2018-4878
CVE-2017-8759
CVE-2015-1641
CVE-2018-7600

CVSS
8.55
8.55
10.0
9.3
8.65
8.7
8.65
8.55
9.3
8.65

#Tactics
0
0
3
0
3
0
0
3
0
3

#Techniques
0
0
5
0
5
0
0
5
0
5

#Attack Patterns
12
0
50
3
50
0
0
50
0
50

#Weakness
1
0
1
1
1
0
1
1
1
1

#APC
4
9
53
29
4
0
3
8
11
4

similar counts of entries in the other sources, when compared to
Explorer, another Microsoft browser. Figure 5 shows how many
tactics each browser is under threat from, for all its versions. We
see that Firefox is exposed to the most tactics, and approximately
80% of its product versions are exposed to the same 5 Tactics.

4.3 US-CERT Alerts
4.3.1 Top 10 Routinely Exploited Vulnerabilities. The Cybersecurity
and Infrastructure Security Agency (CISA), the Federal Bureau of
Investigation (FBI), and the broader U.S. Government routinely issue

Figure 3: Distribution of severity scores for vendor browsers
using all Vulnerabilities linked to all Affected Product Con-
figuration versions.

Figure 4: Number of unique data types for vendor browsers
using all Affected Product Configuration versions.

technical guidance to advise IT security professionals of the most
commonly known Vulnerabilities exploited by foreign cyber actors.
See [36] and column one of Table 2 for an example. Information
about each Vulnerability is concrete and provided to encourage
patching. For example, it includes Affected Product Configurations
and names the exploit observed to have been used in actual attacks.
An alert can be more helpful if abstract knowledge about it can
be collected. Cyber hunting and security measures can be enhanced
given some understanding of why and how a foreign actor may be
targeting the network. This can make risk decision-making more
informed.

Some threat hunting questions for CVEs of such alerts are: what
Tactics and Techniques drive them and what Attack Patterns feature
the abstract Weaknesses they instantiate? To understand the actual

Conference’17, July 2017, Washington, DC, USA

A. Non, et al.

Privilege Escalation. These 4 CVEs also share the same 5 Techniques,
50 Attack Patterns, and 1 Weakness. In total, given the information
for these top 10 CVEs, 69 Affected Product Configurations are under
the threat of the three Tactics. Microsoft is the most listed vendor
among the Affected Product Configurations and most Known Affected
Hardware or Software Configurations are Microsoft Office.

4.3.2 CWE Top 25 Most Dangerous Software Weaknesses. The 2020
Common Weakness Enumeration (CWE) Top 25 Most Dangerous Soft-
ware Weaknesses list [21] is compiled by considering the prevalence
and severity of CVEs and their associated Weaknesses (implemented
by linking). These Weaknesses highlight “the most frequent and crit-
ical errors that can lead to serious vulnerabilities in software” [21].
For example, an attacker can exploit the vulnerabilities to take
control of a system, obtain sensitive information, or cause a denial-
of-service. The CWE Top 25 list is a resource that can provide
insight into the most severe and current security weaknesses [21].
We use BRON to answer the following questions. What are the
Tactics, Techniques and Attack Patterns linked to these Weaknesses?
What commonalities in these features are there among the Top 25?
Our analysis of the Top 25 CWE [21] is summarized in Table 3.
We observe 4 of 25 Weaknesses lack a presence in any Attack Pattern.
We must recognize again the ambiguity around whether the absence
is due to unfinished efforts or reflects real experience. Reflecting
diversity in threats that could target the Weaknesses, there are 8
distinct Tactics associated with the Top 25.

In terms of commonalities, the most frequent Tactics associated
with the Top 25 weaknesses are Defense Evasion, Privilege
escalation, Discovery. Only 2 Techniques, T1148, T1562.003
occur more than once. The three most frequent Attack Patterns are
Using Slashes in Alternate Encoding, Exploiting Trust
in Client, Command Line Execution through SQL Injection.
Table 3 can be sorted on different columns, affording further
ranked comparisons. The three most frequent Vulnerabilities (i.e. top
3) occur 3 times each and are CVE-2017-7778, CVE-2016-10164,
CVE-2016-7163. The three most frequent Affected Prod Conf (s) are
3 different linux versions occurring 23, 24, 25 times respectively.
We also analyzed the Weakness text descriptions with a frequency
analysis of unigrams and bigrams. Buffer Overflow emerged as a
common Attack Pattern bigram.

We note again that not all weakness are linked with the same
frequency to Attack Patterns, Techniques and Tactics. The ambiguity
of this finding is also noted again: is absent data due to curation
or lack of demonstrated evidence? This prompts a second line of
inquiry: an inventory of BRON in Section 5.

5 ANALYZING BRON’S SOURCES
Many members of the security community rely upon the sources
amalgamated within BRON. Evaluating how completely and accu-
rately these sources provide a view of a current threat landscape
is easier to attempt with BRON. We can start an inventory of the
sources and their inter-connections by first analyzing the breadth
and depth of the entries and relations within BRON’s graph. This
involves counting BRON’s nodes and edges by type using different
filters that offer different resolutions. We proceed to answer some
research questions (RQ).

Figure 5: Heatmap showing number of product versions by
vendor product that are exposed to nine Tactics. Colorbar
represents the number of product versions exposed to the
Tactic divided by the total number of product versions of the
vendor product. Three Tactics are not shown because they
did not expose any of these vendor products. Some product
versions are exposed to multiple Tactics.

issues that threaten today’s systems, what Weaknesses are identifi-
able as common and high impact? Are there commonalities among
the listed CVEs?

To answer these questions we use BRON to trace each CVE
to its Weaknesses. It traces from these Weaknesses to potential
Attack Patterns. Finally, it traces from the Techniques of an Attack
Pattern to the potential Tactic. Table 2 shows results for the Top
10 Most Exploited Vulnerabilities 2016-2019 Alert [36]. Note, CVE-
2017-0143 does not list any connections to Weaknesses or Affected
Product Configurations in the BRON version we used. The top (most
commonly) exploited CVE is CVE-2017-11882. It has 4 different
Affected Product Configurations that all are symptomatic of the same
Weakness: CWE-119, Improper Restriction of Operations
within the Bounds of a Memory Buffer. This Weakness is a
feature of 12 different Attack Patterns though none of these Attack
Patterns identify a Technique.

The third ranked CVE, CVE-2017-5638, has the highest severity
score of 10.0. It lists 53 different Affected Product Configurations and
instantiates only one Weakness. However, this Weakness is a feature
of 50 different Attack Patterns. Five different Techniques are involved
in these Attack Patterns: T1027, T1148, T1562.003, T1574.006,
T1574.007. They are means of achieving three different Tactics:
Defense Evasion, Persistence, Privilege Escalation. This
information provides additional context for cyber hunting such as
if any Affected Product Configurations have not been patched and
thus exposed to exploit.

This inquiry reveals disparities in the threat information related
to the Top 10 CVEs, and the path from CVE to Tactic is often cut
short. Only 4 of the Top 10 CVEs are traceable to some Tactic
and for each CVE, the Tactics are Defense Evasion, Persistence, and

Linking Threat Tactics, Techniques, and Patterns with Defensive Weaknesses, Vulnerabilities and Affected Platform Configurations for Cyber Hunting

Conference’17, July 2017, Washington, DC, USA

Table 3: Top 25 CWE [21]. APC is Affected Product Configuration.

CWE ID

Name

#Tactics

#Techniques

#Attack Pat-

#Vulnerabilities

Sum CVSS

Ave CVSS

#APC

Improper Neutralization of Input During Web Page Gener-
ation (’Cross-site Scripting’)
Out-of-bounds Write

CWE-79

CWE-787

CWE-20
CWE-125
CWE-119

CWE-89

CWE-200

CWE-416
CWE-352
CWE-78

CWE-190
CWE-22

Improper Input Validation
Out-of-bounds Read
Improper Restriction of Operations within the Bounds of a
Memory Buffer
Improper Neutralization of Special Elements used in an
SQL Command (’SQL Injection’)
Exposure of Sensitive Information to an Unauthorized Ac-
tor
Use After Free
Cross-Site Request Forgery (CSRF)
Improper Neutralization of Special Elements used in an OS
Command (’OS Command Injection’)
Integer Overflow or Wraparound
Improper Limitation of a Pathname to a Restricted Direc-
tory (’Path Traversal’)
NULL Pointer Dereference
Improper Authentication
Unrestricted Upload of File with Dangerous Type
Incorrect Permission Assignment for Critical Resource
Improper Control of Generation of Code (’Code Injection’)
Insufficiently Protected Credentials
Improper Restriction of XML External Entity Reference
Use of Hard-coded Credentials
Deserialization of Untrusted Data
Improper Privilege Management
Uncontrolled Resource Consumption

CWE-476
CWE-287
CWE-434
CWE-732
CWE-94
CWE-522
CWE-611
CWE-798
CWE-502
CWE-269
CWE-400
CWE-306 Missing Authentication for Critical Function
CWE-862 Missing Authorization

0

0

1
0
0

0

2

0
0
0

0
0

0
4
0
0
0
5
0
0
0
0
0
0
0

0

0

3
0
0

0

14

0
0
0

0
0

0
3
0
1
0
15
0
0
0
0
0
0
0

terns
6

0

51
2
12

6

58

0
4
5

1
5

0
10
1
11
3
9
1
2
1
3
3
4
0

12,629

1,159

7,820
2,172
10,449

5,477

6,824

1,187
2,377
724

1,218
2,964

1,019
1,654
562
427
2,287
277
488
244
387
1,095
728
112
190

57,890

8,667

49,995
13,549
81,125

41,309

32,813

8,742
16,319
6,131

8,268
18,684

5,994
11,453
4,315
2,654
17,683
1,548
3,381
1,919
3,151
7,421
4,459
793
1,162

4.58

7.48

6.39
6.24
7.76

7.54

4.81

7.37
6.87
8.47

6.79
6.3

5.88
6.92
7.68
6.22
7.73
5.59
6.93
7.87
8.14
6.78
6.13
7.09
6.12

43,013

1,499

44,399
2,029
39,673

14,685

29,874

1,636
11,646
3,325

2,129
14,368

2,342
13,061
1,370
1,151
12,666
923
1,985
543
1,580
3,770
4,303
504
527

In Section 5.1 we look at BRON to explore how comprehensive
(connected) the entries are. In Section 5.2 we investigate how the
data has changed over time. Finally, Section 5.3 explores the severity
scores of the publicly disclosed vulnerabilities.

Tactic

12

Technique

1

195

5.1 Aggregate Entry and Relational Analysis
RQ: How comprehensively connected are the entries in BRON, i.e.
sources of public data?

We start by aggregating the number of entries by information
source and investigating the connectivity between them. By source,
we visualize how many entries are connected in Figure 6. We ob-
serve what we call “Floating Entries”, i.e. entries that are isolated or
“orphaned”. Only a small fraction of Techniques are Floating Entries
(1 of 266). By definition, no Weaknesses or Affected Product Config-
urations are Floating Entries. There are however two obvious sets
of Floating Entries. Of the 71, 715 Vulnerabilities, 28% are floating
entries. Of the 519 Attack Patterns, 25% are Floating Entries. This
draws attention to a level of incompletion within BRON. However,
BRON’s sources are constantly being updated and that Techniques
are a more recent source of information. A valid question is whether
it will ever be possible to keep up.

Figure 6 also indicate Super Entries which equate to specific
entries that are the destination and/or source of many relational
cross-references, i.e. nodes with many edges. We expect Super En-
tries given that there are many more Vulnerabilities and Affected
Product Configurations than other entry types. These naturally
will be more densely inter-connected. We find that many Affected
Product Configurations are different versions of the same software
product. Depending on how long a Vulnerability has been latent,
many historical versions of the software may be affected when it is
identified. For example, a vulnerability in Windows 10 may extend

Attack Pattern

128

14

70

52

325

Weakness

142

100

72

Vulnerability

20,383

25,496

23,980

1,856

Affected Product
Configuration

16,941

Figure 6: Visualization of BRON with Vulnerabilities from
only 2015-2020 (subset of all Vulnerabilities in BRON) and
only the latest version of Affected Product Configurations.

to all prior versions of Windows. BRON presently compiles Vulner-
ability data dating back to 1999 so this could explain Super Entries.
We therefore filtered out Affected Product Configurations that were
not the most recent version of a software product and examined
how this changed the quantities of relational connections between
Vulnerabilities and Affected Product Configurations. The number of
Affected Product Configurations decreased approximately 80%, from

Conference’17, July 2017, Washington, DC, USA

A. Non, et al.

219, 767 to 42, 061 and the number of links of both Affected Product
Configurations and Vulnerabilities also decreased significantly.

5.1.1 Data Source Analysis. RQ: How extensively are each of the
different data sources in BRON connected?

Starting with Tactics in Figure 7a, we find that all of the Tactics
are linked to at least 10 Techniques. Recall ATT&CK is a matrix of
Techniques, organized by a column per Tactic, and a link implies
that a Technique serves the tactical objective named by the Tactic.
The number of Techniques serving each Tactic varies. Several Tactics
are served by a number of Techniques. However, the magnitude of
the difference between the Tactic with the least and most links is
62 (while the median number of relational links is 22.5). The Tactic
served by the most Techniques is Defense Evasion which is linked
to 72 Techniques.

Techniques can serve more than one Tactic, and we observe that
most of the 266 Techniques serves at least one Tactic but very few
serve multiple Tactics. The Technique Valid Accounts serves two
Tactics, and six Techniques each serve three Tactics. We can inven-
tory Technique and Attack Pattern relationships. The relationship
associates the means of an attack, i.e. Techniques, to the attack it-
self. We find that 74% of the Techniques are not associated with
any Attack Pattern. Each of the remaining Techniques, except for
two, serve only one Attack Pattern. The two exceptions are (1) the
Supply Chain Compromise which serves three Attack Patterns
and (2) Endpoint Denial of Service which serves four Attack
Patterns. From a Technique analysis, an overall lack of relational
information connecting the objectives of Tactics and the means of
Techniques with Attack Patterns becomes apparent. We will next
look at Attack Patterns to consider their relations to Techniques and,
further, inquire into the Attack Patterns that connect Techniques
and Weaknesses.

Pivoting to Attack Patterns, we can recall that of the 519 Attack
Patterns, 25% are Floating Entries. They are named attacks with no
indication of how they could be accomplished or what weakness in
a system they would exploit. We observe that only 10% of Attack
Patterns span both Techniques and Weaknesses. Per Figure 7c, most
Attack Patterns have only one relational link and an Attack Pat-
tern has at most 13. There are 3 Attack Patterns with 13 relational
links: (1) Using Leading ’Ghost’ Character Sequences to
Bypass Input Filters, (2) Manipulating Web Input to File
System Calls, and (3) Using Slashes in Alternate Encoding.
All 13 links of each of these Attack Patterns span from Attack Pat-
tern to Weakness. None of the links relate the Attack Pattern to a
Technique. The Attack Pattern Remote Services with Stolen
Credentials identifies the most means of attack with 4 Tech-
nique links. It also links to one Weakness: CWE-522 Insufficiently
Protected Credentials.

One can think of an ideal Attack Pattern as a bridge. It connects
an attack to how it is executed and to where it is targeted. At this
point in time, BRON users could benefit from more connected rela-
tional bridges. It is reasonable to expect that future efforts will more
completely enumerate Attack Patterns to assure a more relationally
informative set of sources. However, given threat assessment tech-
nologies make use of these sources, this inventory-based analysis
reveals possible blind spots or unfinished curation. The ambiguity
between the two possibilities is hard to resolve.

Analyzing the number of links to and from each Weakness entry,
we observe a large comparative increase (orders of magnitude) in
the range, see Figure 8, versus the information sources we have
just analyzed. When, regardless of year, relationships to and from
each Weakness entry are counted, the range is the highest for all
information sources at 12, 291. The facts that Vulnerabilities, to
which Weaknesses connect, have the greatest quantity of entries
and that Weaknesses are general abstract concepts which explains
this ranking.

Around 45% of Weaknesses are targets identified by Attack Pat-
terns. Does this imply that there exist no attacks targeting 55% of
the Weaknesses, or is the record lacking? The Weaknesses with
large number of relations are mostly connected to Vulnerabili-
ties and are identified as the targets of attacks. The Weakness
Information Exposure is a target of 57 Attack Patterns (the high-
est number among Weaknesses) and it further details 6, 624 Vulnera-
bilities, i.e. more specific targets. The Weakness CWE-79, Improper
Neutralization of Input During Web Page Generation,
(Cross-Site Scripting) connects to the most Vulnerabilities at
1, 292. Six Attack Patterns identify this Weakness as a target. How-
ever, 44% of these Vulnerabilities date before 2015. When we focus
only on Weaknesses from 2015-2020, the range of number of Vul-
nerabilities decreases significantly but is still quite substantial with
several Super Entries. In the future, we can look at parent-child
connections within Weaknesses to better understand the extent of
comprehensive linking.

Moving to Vulnerabilities, most Vulnerabilities on average, re-
gardless of what years they were reported and how many Affected
Product Configuration versions are referenced, tend to connect to
600 or fewer entries, either Weaknesses or Affected Product Con-
figurations. Figure 9 shows four combinations of connections: all
or recent Vulnerabilities, and all or latest Affected Product Config-
urations. The distribution when all Affected Product Configuration
versions are referenced is right-skewed with a long tail. The distribu-
tion when only the latest version of Affected Product Configurations
is used is also right-skewed but has a shorter tail. As would be
expected when removing earlier versions of a software application
from consideration, many Vulnerability Floating Entries emerge and
the number of Super Entries decreases drastically. When we filter
down to only recent Vulnerabilities, while considering all Affected
Product Configuration entries, we observe an increase in the number
of Floating Entry Vulnerabilities but we see a decrease when the
number of Affected Product Configuration entries decreases.

Severity scores are assigned by CVE Numbering Authorities
(CNAs). All 10 members of this vendor set are CNAs. Although
CVSS is an industry-standard, the calculated severity score within
a vendor and among vendors is likely to vary. Variance can depend
on the interpretation and details within vulnerability report. Addi-
tionally, analysts who calculate severity scores for vulnerabilities
that do not contain sufficient details and data assume a worst-case
scenario and assign a 10 to Vulnerabilities with no information.1
As a result, some vendors may have Vulnerabilities with higher
severity scores because of missing data.

The Vulnerability with the most connections, when all versions of
an Affected Product Configuration are considered, is CVE-2016-1409.

1https://nvd.nist.gov/vuln-metrics/cvss

Linking Threat Tactics, Techniques, and Patterns with Defensive Weaknesses, Vulnerabilities and Affected Platform Configurations for Cyber Hunting

Conference’17, July 2017, Washington, DC, USA

(a)

(b)

(c)

Figure 7: Plots showing relational linkage statistics for (a) Tactics, (b) Techniques, and (c) Attack Patterns.

Figure 8: Relational linkage statistics for Weakness entries
when all Vulnerabilities and only more recent Vulnerabili-
ties are counted.

Figure 9: Count of Vulnerability connections when all Vul-
nerabilities or more recent Vulnerabilities are used, and
when all versions or only the latest version of Affected Prod-
uct Configurations are referenced.

This describes a bug in Cisco IOS that creates a vulnerability to
Denial of Service attacks. It has a severity score of 6.25 (on the
CVSS scale of 0 to 10). However, the Vulnerability with the most
connections changes when only the latest version of any Affected
Product Configuration is considered. It is CVE-2020-0551 which
describes a vulnerability in an Intel product with a severity score
of 3.75.

In general, the large portion of floating Vulnerabilities indicates a
gap between the data informing its users of an abstract vulnerability.
That is, what types or features of products pose risk versus informing
them of an operational vulnerability that indicates specific products
and versions that are affected and indicates what may need to be
patched or updated. In addition, Figure 9 shows difference of which
CVEs to select and which versions to use for analysis. It verifies
what we expected regarding version “noise”. This can be useful
when considering versions of applications.

Affected Product Configuration connection statistics are shown
in Figure 10. The distribution when all versions are referenced is
right-skewed with a long tail. The distribution when only the latest
version of Affected Product Configurations is referenced is right-
skewed but has a shorter tail. The vendor and product that has
the most connections spanning Vulnerabilities and its versions is
Linux Version 8 from Debian. However, when we only consider
one version of a Affected Product Configuration, the Affected Product
Configuration with the most connections is a Windows Server from
2012. The Debian Linux 8 connections decrease because there are
more recent versions of Debian Linux. We see a similar pattern
when focusing on more recent Vulnerability data. Debian Linux 8
is the most commonly linked Affected Product Configuration when
all versions are considered, but a version of Windows 8 RT (which
is discontinued) is the most commonly linked when only the latest
version of a product is considered. We can observe how the tail of

Conference’17, July 2017, Washington, DC, USA

A. Non, et al.

Vulnerabilities are reported. This may be due to more products
use and more bug reporting. When we filter down to only recent
Vulnerabilities, while considering all Affected Product Configuration
entries, we observe an increase in the number of Floating Entry
Vulnerabilities but we see a decrease when the number of Affected
Product Configuration entries decreases. Figure 11b shows that the
ratios of paths from Vulnerabilities to other data types have been
relatively stable since 2008.

5.3 BRON Severity Scores
RQ: Are newly discovered Vulnerabilities becoming more severe?
Are the CVSS scores uniformly distributed over time or value? Are
the Vulnerability Floating Entries harmless?

Because of the large number of Floating Entries, especially Vul-
nerability Floating Entries, we define BRON’s “non-demonstrated”
severity as the sum of CVSS severity scores assigned to Vulnerabili-
ties which are not yet linked to any Affected Product Configurations
i.e. specific products and versions. It contrasts with “operational”
severity which is the sum of severity scores assigned to Vulnera-
bilities which have at least one Affected Product Configuration. We
define total severity as the sum of non-demonstrated and linked
severity. In general, Floating Entry Vulnerabilities tend to have low
severity scores (see Figure 12). This is regardless of whether all or
most recent Affected Product Configuration versions are considered.
Nearly 25% of non-demonstrated Vulnerabilities have severity scores
of 0. Recent Vulnerabilities contribute more to non-demonstrated
severity than those of previous years. A possible explanation for this
could be that it takes time (in the scale of years) after a Vulnerability
is documented to identify a specific Affected Product Configuration.
[3] discuss the release of only CVEs in more detail.

The number of Vulnerabilities with lower severity scores in-
creases over the years, and most of these Vulnerabilities are not
connected. For example, the percentage of Vulnerabilities that are
not connected to Weaknesses decreased from 87% in 2006 to 18%
in 2008, see Figure 11b, while the number of severity scores of 0
for those Vulnerabilities has increased between 2006 and 2008. This
correlation between the number of Floating Entry Vulnerabilities
and the number of low severity scores suggests that Vulnerabilities
not linked to Weaknesses tend to have lower severity scores. We
observe a similar situation in that Vulnerabilities not connected to
Affected Product Configurations tend to have lower severity scores
as seen in Figure 12. We observe a similar situation in that Vulner-
abilities not connected to Affected Product Configurations tend to
have lower severity scores, see Figure 12.

The amount of Floating Entry severity was unexpected when
we tried to answer questions about where the severity was, see
Figure 12. The length of the tails for the different public threat data
types are very interesting. Does that imply categorization error
(should have more refined categories) or that some analysts spend
more effort finding and writing out the vulnerabilities?

6 BRON USEABILITY
BRON is intended to make information that is already accessi-
ble, though manually, more useable. This usability depends on its
graph-database implementation. To measure the value of this im-
plementation through comparison, rather than perform human

Figure 10: Count of Affected Product Configuration connec-
tions when all Vulnerabilities or more recent Vulnerabilities
are considered, and when all versions or only the latest ver-
sion of a software product are counted.

Table 4: BRON source and relational quantities for non-
Floating Entries. Median refers to the median number of re-
lations in or out of an entry. The rightmost column provides
the lowest and highest counts of entries’ relations with the
range in brackets.

Source

Tactic
Technique
Attack Pattern
Weakness
Vulnerability
Affected Prod Conf

Total
Entries
12
266
519
314
144,594
219,767

Median
#Links
22.5
1
1
4
1
1

Count Range

10-72 (62)
1-4 (3)
1-13 (12)
1-12,292 (12,291)
1-4,891 (4,890)
1-2,573 (2,572)

the connection distribution shrinks as more recent data is in focus
and multiple older versions are filtered, see Figure 10.

We provide precise aggregate source and connective quantities
in Table 4. We consider every version of a Affected Product Configu-
ration. The mean number of links from a Tactic to a Technique is
28.4 (stdev 18.9), and the mean number of Weakness links is 8.16
(stdev 46.70).

5.2 Vulnerability paths
RQ: Does the coverage of the threats become more comprehensive
over time, i.e. have the paths starting from Vulnerabilities changed?
We consider paths connecting through Vulnerabilities, calling
them Vulnerability paths. Figure 11a shows yearly trends of how
many such paths start from, respectively, a Tactic, an Attack Pattern,
or a Weakness, and end at a Vulnerability. It also shows how many
Vulnerabilities are not connected to a Weakness. Another interesting
aspect of Vulnerability entries is how their quantity has changed
over time. We examined this using Figure 11a. Over time, more

Linking Threat Tactics, Techniques, and Patterns with Defensive Weaknesses, Vulnerabilities and Affected Platform Configurations for Cyber Hunting

Conference’17, July 2017, Washington, DC, USA

(a) Number of Vulnerabilities reported by year.

(b) Percentage of Vulnerabilities reported by year.

Figure 11: Number and percentage of Vulnerabilities reported by year connected to a Tactic, Attack Pattern, or Weakness. Note
2020 has only ≈ 5 months of data in these plots. In general, the number and percentage of Vulnerabilities connected to each
data type is increasing over the years.

time and memory costs for BRON-Graph-DB and draw compar-
isons between it and BRON-JSON for a set of small, medium and
large queries.

Initialization and Coding. The data within BRON-Graph-DB is
populated by a depth-first search of unique nodes and edges. The
time complexity is 𝑂 (|𝑁 | + |𝐸|) where 𝑁 denotes nodes, and 𝐸
denotes edges. Nodes, represent Tactics, Techniques, Attack Patterns,
Weaknesses and Vulnerabilities. Edges link node entries linked in
the sources.

Comparison Setup. We used an Ubuntu 20.04 LTS instance on a
private OpenStack cloud with 4 Intel Xeon CPU E5-2630 v4 2.20
GHz and 16 GB RAM. BRON-JSON uses 294 MB of disk space, and
BRON-Graph-DB uses 351 MB of disk space.

Per Table 5, Query Time is the time taken between running the
query and returning the query results using the Python time module.
Query Memory is the memory usage of running the query using the
Python memory profiler. We recorded the execution statistics of
three queries, each repeated 30 times. To compare the queries, we
display how many nodes in BRON accessed to obtain the output
of the query. In this count, nodes are not unique.

There are 3 queries. Two require searching graph paths. For
them, the input is a CSV file of node IDs and the output is a CSV file
with the IDs of nodes connected to each of the input nodes along
an edge in BRON. For the third query, about riskiest software, the
output is the Affected Product Configuration with the highest sum
of CVSS scores for Vulnerabilities connected to the Affected Product
Configuration.

Query Performance Results. The results for the queries are sum-

marized in Table 5.

Threats connected to top 10 CVEs. This query set is examined
in Section 4.3.1. Query Time: The mean query time for BRON-
Graph-DB is nearly 4 times faster than when querying BRON-JSON.

Figure 12: Severity scores when referencing all Vulnerabil-
ities from 1999-2020 or only recent Vulnerabilities from
2015-2020. Operational and non-demonstrated severity are
shown.

experiments, we reference an implementation where all informa-
tion extracted from BRON’s sources is stored in files using JSON
formatting. These files are then read into memory and queried.
This is faster than manual querying. We name BRON’s implemen-
tation(which uses ArangoDB 2) BRON-Graph-DB, and the JSON-
based implementation, BRON-JSON. In this section we present the

2http://arangodb.com

Conference’17, July 2017, Washington, DC, USA

A. Non, et al.

Table 5: Query performance results from 30 repeats

Query Measurement

Min

Max

Mean

SD

Threats connected to top 10 CVEs (Small: 390 nodes)
12.29
3.58
2.5e3
62

BRON-JSON Time (sec)
BRON-Graph-DB Time (sec)
BRON-JSON Memory (MB)
BRON-Graph-DB Memory (MB)

18.46
4.85
3.6e3
62

15.62
4.00
3.1e3
62

1.35
0.35
0.22
0.01

Threats and vulnerabilities for top 25 CWEs (Medium: 322K nodes)
BRON-JSON Time (sec)
64.71
BRON-Graph-DB Time (sec)
26.54
BRON-JSON Memory (MB)
2.59e3
BRON-Graph-DB Memory (MB)
65.77

72.54
37.85
3.35e3
105.82

67.69
29.03
3.04e3
76.61

2.15
2.61
0.18e3
9.61

BRON-JSON Time (sec)
BRON-Graph-DB Time (sec)
BRON-JSON Memory (MB)
BRON-Graph-DB Memory (MB)

Riskiest software (Large 2,453K nodes)
19.45
14.25
28.68
24.70
3.25e3
2.88e3
217.76
216.21

24.21
37.36
3.50e3
222.79

1.70
2.94
0.17e3
1.86

Threats and vulnerabilities connected to top 25 CWEs. This
query set is examined in Section 4.3.2. Query Time: The mean query
time for BRON-Graph-DB is at least twice as fast as that for BRON-
JSON.

Riskiest software. Query Time: The mean query time for riski-
est software using BRON-Graph-DB is nearly 10 seconds slower
than when using BRON-JSON.

Availability. The code is available at https://github.com/ALFA-
group/BRON. Code and data for the analysis are available in Python
with tutorials in Jupyter notebooks. There is also a public instance
of BRON hosted in an ArangoDB that is updated daily at http:
//bron.alfa.csail.mit.edu:8529.

7 RELATED WORK
The sources of BRON are variously described as industry stan-
dard of common names (CVE), a list (CVE and CWE), an encyclope-
dia (CWE), comprehensive dictionary and classification taxonomy
(CAPEC) and knowledge base (ATT&CK). They have multiple coun-
terparts, also with a variety of descriptors. Among them, but not
exclusively are MISP [37], CTI [13], OVM [38], FireEye OpenIOC
[4], STIX [28], IDS rules [30], OpenC2 [22], UCO [35], VERIS [8],
and IODEF [2]. We chose BRON’s sources for their composite in-
formation value and their popularity. Public data sources have been
analyzed previously. For example, [27] studied and analyzed NVD,
and pointed out several limitations. [1] describe some statistics of
Vulnerabilities and Weakness. The Vulnerabilities and CVSS was
analyzed by [3]. BRON contributes an analysis over more public
threat data sources.

Similar threat and vulnerability data within knowledge graphs
and ontologies exist. For example, the STUCCO ontology and
knowledge graph incorporates information from 13 structured data
sources and provides relationships among 15 entity types includ-
ing software, vulnerabilities, and attacks [6]. The SEPSES knowl-
edge graph links information from standard data sources including
CVEs, CAPECs, CWEs, CPEs, and CVSS for vulnerability scor-
ing [11]. SEPSES provides use cases for vulnerability assessment
and intrusion detection with sample queries. SEPSES uses some of

BRON’s sources but BRON support a broader set of analyses and
inform users of the extent of the data. This same claim holds for
www.cvedetails.com which provides an easy to use web interface
to CVE vulnerability data only.

Threat modeling models the software system, potential attacker
goals and techniques, and potential threats to the system so that cy-
ber defenders can identify and mitigate vulnerable assets. There are
several threat modeling methods that vary in comprehensiveness,
abstraction, and focus. These methods include but are not limited
to STRIDE, PASTA, LINDDUN, and Attack Trees [31]. BRON uses
a single graph to relationally connect entries from sources ranging
from tactics to vulnerable software.

A community-based approach like The Githubification of InfoSec
can speed learning for defenders [9]. It has three components: In-
sight, Analytics, and Analysis. For Insight the MITRE ATT&CK
framework is suggested. For analytics and analyses sharing ana-
lytic security data mining via Jupyter notebooks is proposed. On
example is CALDERA Pathfinder [10] that show what a vulner-
ability exposes to an adversary. It is arguable that BRON could
enhance these approaches. In terms of insights, it includes more
than ATT&CK and unifies inter-source linking. The Python scripts
in BRON are lower level stack components. BRON offers abstract
knowledge linked to concrete knowledge.

8 DISCUSSION
BRON offers a more coherent access point to new data consumers
of these sources. It lowers the entry bar for performing cross-
referenced analyses and enables analysts to think more contextually
about attacks and vulnerabilities. It enables both cyber-hunting and
reactive, preventative and forensic security analysis on strategic, op-
erational and tactical levels. However, there are several limitations
to our data-driven approach and its support by BRON’s graph.

First, BRON relies only publicly reported data from NVD, and
numerous vulnerabilities exist that do not have CVE IDs. Addition-
ally the data has biases due to reporting by diverse sources with
different interests and product offerings. All the data biases of each
individual source, exist in BRON. See [21] for examples of data and
metric bias.

Second, given BRON is reliant on the quality of the available
public data, a major threat to this work’s validity is the integrity of
the same data. There could be curation errors such as inconsistent
severity scores and we have uncovered gaps. No public resource in
this context will ever be complete. The sources are also sensitive
to data aging and heterogeneity: not all products use the same
versioning standard, and older products can accumulate newly
disclosed vulnerabilities. We tried to address these sensitivities in
one instance when we considered only the most recently released
version of a Affected Product Configuration. gaps. The risks for the
data breaching confidentiality is low since the data is public. The
threat to availability of data depends on the availability of the data
sources we amalgamated. Directly ascribable to BRON is a risk
that BRON’s snapshot of the sources is out of date and misses new
updates to them. This is mitigated by the simple creation script we
have developed.

In terms of the findings of our inquiries, we found both “local”
uneven availability in the data sources (when we looked at Top 10

Linking Threat Tactics, Techniques, and Patterns with Defensive Weaknesses, Vulnerabilities and Affected Platform Configurations for Cyber Hunting

Conference’17, July 2017, Washington, DC, USA

and Top 25 Alerts) and aggregate uneven availability. This places a
caveat on the particular query responses we found. The same public
data is also used to build predictive models, so the caveat carries over
to this domain. Examples of modeling include addressing situational
awareness [12], predicting missing edges between CVE, CWE and
CAPEC [39], and investigating data breaches with semantic analysis
of ATT&CK [26]. BRON’s analysis of the comprehensiveness of
the public sources could potentially be extended to inform the bias
and performance validity of predictive models.

9 FUTURE WORK
In future work, we plan analyses that take additional care to align
comparisons along a date or age of product. CAPEC and CWE has
information regarding similar entries that can be utilized as well.
We have not studied data source entity similarity (connections),
only similarity between data sources. In the future the CAPEC and
CWE sources offer information regarding similar entries that can be
leveraged. In addition, we can try to use BRON to predict missing
connections.

BRON can also potentially support threat modeling and network
vulnerability analysis of existing networks. There is also scope for
performance enhancements by storing BRON in a dedicated graph
database format. Finally, the utility of BRON for practitioners needs
to be further evaluated.

ACKNOWLEDGMENTS
This material is based upon work supported by the DARPA Ad-
vanced Research Project Agency (DARPA) and Space and Naval
Warfare Systems Center, Pacific (SSC Pacific) under Contract No.
N66001-18-C-4036

REFERENCES
[1] Benjamin L Bullough, Anna K Yanchenko, Christopher L Smith, and Joseph R
Zipkin. Predicting exploitation of disclosed software vulnerabilities using open-
source data. In Proceedings of the 3rd ACM on International Workshop on Security
And Privacy Analytics, pages 45–53, 2017.

[2] R Danyliw, J Meijer, and Y Demchenko. The Incident Object Description Exchange

Format. Technical report, RFC Editor, 2007.

[3] Andrew Feutrill, Dinesha Ranathunga, Yuval Yarom, and Matthew Roughan. The
effect of common vulnerability scoring system metrics on vulnerability exploit
delay.
In 2018 Sixth International Symposium on Computing and Networking
(CANDAR), pages 1–10. IEEE, 2018.

[14] Sadegh M Milajerdi, Birhanu Eshete, Rigel Gjomemo, and VN Venkatakrish-
nan. Poirot: Aligning attack behavior with kernel audit records for cyber threat
hunting. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and
Communications Security, pages 1795–1812, 2019.

[15] MITRE. ATT&CK Matrix for Enterprise. https://attack.mitre.org/.
[16] MITRE. Common Attack Pattern Enumeration and Classification. https://capec.

mitre.org/.

[17] MITRE. Common Vulnerabilities and Exposure. https://cve.mitre.org/.
[18] MITRE. Common Weakness Enumeration. https://cwe.mitre.org/.
[19] MITRE. Common Weakness Enumeration. https://cwe.mitre.org/about/faq.html.
[20] MITRE. Cve and nvd relationship. https://cve.mitre.org/about/cve_and_nvd_

relationship.html.

[21] MITRE. Top 25 cwe. https://cwe.mitre.org/top25/archive/2020/2020_cwe_top25.

html.

[22] Pat Muoio and Paul Green. Open Command and Control (OpenC2). Technical

report, G2, 2015.

[23] NIST. Common Platform Enumeration.
[24] NIST. Cve-2019-2432 detail. https://nvd.nist.gov/vuln/detail/CVE-2019-2432.
[25] NIST. National vulnerability databased. https://nvd.nist.gov.
[26] Umara Noor, Zahid Anwar, Asad Waqar Malik, Sharifullah Khan, and Shahzad
Saleem. A machine learning framework for investigating data breaches based on
semantic analysis of adversary’s attack patterns in threat intelligence repositories.
Future Generation Computer Systems, 95:467–487, 2019.

[27] James Andrew Ozment. Vulnerability discovery & software security. PhD thesis,

University of Cambridge, 2007.

[28] Rich Piazza, John Wunder, and Bret Jordan. STIX™ Version 2.0. Part 1: STIX Core
Concepts, July 2017. https://oasis-open.github.io/cti-documentation/stix/intro.
[29] Ravi Das. Top 31 threat-hunting interview questions and answers for 2019, 2019.
[30] Mohsen Rouached and Hassen Sallay. An Efficient Formal Framework for In-
trusion Detection Systems. Procedia Computer Science, 10:968–975, December
2012.

[31] Nataliya Shevchenko, Timothy A Chick, Paige O’Riordan, Thomas P Scanlon,
and Carol Woody. Threat modeling: a summary of available methods. Technical
report, Carnegie Mellon University Software Engineering Institute Pittsburgh
United . . . , 2018.

[32] Blake E Strom, Andy Applebaum, Doug P Miller, Kathryn C Nickels, Adam G
Pennington, and Cody B Thomas. Mitre att&ck™: Design and philosophy. 2018.
[33] Blake E Strom, Joseph A Battaglia, Michael S Kemmerer, William Kupersanin,
Douglas P Miller, Craig Wampler, Sean M Whitley, and Ross D Wolf. Finding
Cyber Threats with ATT&CK-Based Analytics. Technical report, MITRE, 2017.
[34] Suzanne Strobel. Q&A: Visibility, Testing Critically Important for Hunting, 2018.

https://redcanary.com/blog/qa-threat-hunting-testing-visibility/.

[35] Zareen Syed, Ankur Padia, M. Lisa Mathews, Tim Finin, and Anupam Joshi. UCO:

A Unified Cybersecurity Ontology. AAAI Press, February 2016.

[36] US-CERT. Top 10 most exploited vulnerabilities 2016-2019. https://us-cert.cisa.

gov/ncas/alerts/aa20-133a.

[37] Cynthia Wagner, Alexandre Dulaunoy, Gérard Alexandre, and Andras Iklody.
MISP: The Design and Implementation of a Collaborative Threat Intelligence
Sharing Platform. pages 49–56, October 2016.

[38] Ju An Wang and Minzhe Guo. OVM: An Ontology for Vulnerability Management.

April 2009.

[39] Hongbo Xiao, Zhenchang Xing, Xiaohong Li, and Hao Guo. Embedding and
predicting software security entity relationships: A knowledge graph based
approach. In Tom Gedeon, Kok Wai Wong, and Minho Lee, editors, Neural Infor-
mation Processing, pages 50–63, Cham, 2019. Springer International Publishing.

[4] Fire Eye. Indicators of Compromise (IOC).
to
[5] Fred O’Connor.

steps

8

start

threat

hunting,

2018.

https://www.cybereason.com/blog/blog-the-eight-steps-to-threat-hunting.
[6] Michael Iannacone, Shawn Bohn, Grant Nakamura, John Gerth, Kelly Huffer,
Robert Bridges, Erik Ferragut, and John Goodall. Developing an ontology for
cyber security knowledge graphs. In Proceedings of the 10th Annual Cyber and
Information Security Research Conference, pages 1–4, 2015.

[7] IBM. The awakening of cyber threat hunting: Intelligence analysis for security

and risk, 2017.

[8] Information Technology Laboratory. Vulnerability Metrics CVSS. https://nvd.

nist.gov/vuln-metrics/cvss#.

[9] John Lambert. The githubification of infosec. https://medium.com/@johnlatwc/

the-githubification-of-infosec-afbdbfaad1d1.

[10] Jon Baker. Caldera pathfinder. https://medium.com/mitre-engenuity/caldera-

pathfinder-7564e63f3082.

[11] Elmar Kiesling, Andreas Ekelhart, Kabul Kurniawan, and Fajar Ekaputra. The
SEPSES Knowledge Graph: An Integrated Resource for Cybersecurity. In Inter-
national Semantic Web Conference, pages 198–214. Springer, 2019.

[12] Bin Liu, Xixi Zhu, Junfeng Wu, and Li Yao. Rule reduction after knowledge graph
mining for cyber situational awareness analysis. Procedia Computer Science,
176:22–30, 2020.

[13] Luatix. Open Cyber Threat Intelligence Platform.

