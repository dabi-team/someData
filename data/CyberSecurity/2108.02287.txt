A Survey of Honeypots and Honeynets for
Internet of Things, Industrial Internet of Things, and
Cyber-Physical Systems

1
2
0
2

g
u
A
4

]

R
C
.
s
c
[

1
v
7
8
2
2
0
.
8
0
1
2
:
v
i
X
r
a

Javier Franco1, Ahmet Aris1, Berk Canberk2, and A. Selcuk Uluagac1
1 Cyber-Physical Systems Security Lab., Florida International University, Florida, USA
2 Department of Computer Engineering, Istanbul Technical University, Istanbul, Turkey
Emails: {jfran243, aaris, suluagac}@ﬁu.edu, canberk@itu.edu.tr

Abstract—The Internet of Things (IoT), the Industrial Internet
of Things (IIoT), and Cyber-Physical Systems (CPS) have become
essential for our daily lives in contexts such as our homes,
buildings, cities, health, transportation, manufacturing, infras-
tructure, and agriculture. However, they have become popular
targets of attacks, due to their inherent limitations which create
vulnerabilities. Honeypots and honeynets can prove essential to
understand and defend against attacks on IoT, IIoT, and CPS
environments by attracting attackers and deceiving them into
thinking that they have gained access to the real systems. Hon-
eypots and honeynets can complement other security solutions
(i.e., ﬁrewalls, Intrusion Detection Systems - IDS) to form a
strong defense against malicious entities. This paper provides a
comprehensive survey of the research that has been carried out
on honeypots and honeynets for IoT, IIoT, and CPS. It provides
a taxonomy and extensive analysis of the existing honeypots
and honeynets, states key design factors for the state-of-the-art
honeypot/honeynet research and outlines open issues for future
honeypots and honeynets for IoT, IIoT, and CPS environments.

Keywords—Honeypot, honeynet, IoT, IIoT, CPS

I.

INTRODUCTION

The Internet of Things (IoT) is a network of Internet-
connected devices, such as sensors, actuators, and other em-
bedded devices that are able to collect data and communicate.
Industrial IoT (IIoT) is the application of IoT to automation
applications using industrial communication technologies [1].
Cyber-Physical Systems (CPS) on the other hand, are networks
of devices such as sensors, actuators, Programmable Logic
Controllers (PLCs), Remote Terminal Units (RTUs), Intelligent
Electronic Devices (IEDs), and other embedded devices that
monitor and control physical processes in critical and non-
critical application areas. CPS includes, but is not limited to
Industrial Control Systems (ICS), Smart Grid and other smart
infrastructures (e.g., water, gas, building automation), medical
devices, and smart cars [2], [3]. As it can be seen from the
descriptions of IoT, IIoT, and CPS, these concepts do not have
explicit separation points. Border et al. [2] and the National
Institute of Standards and Technology’s (NIST) special report
by Greer et al. [4] analyzed the deﬁnitions of IoT and CPS
in the literature and indicated that these concepts are viewed
either as the same, or different but they have overlapping parts,
or they are subsets of each other. Greer et al. [4] pointed
out that IoT and CPS are similar as they both connect the
physical world of engineered systems and the logical world
of communications and information technology. These two

worlds are connected by sensors that collect data about the
physical elements of a system and transmit it to the logical
elements, and to the actuators that respond to the logical
elements and apply changes to the physical elements. At the
same time, however, Greer et al. [4] stated that IoT and CPS
are different in that IoT places more emphasis on information
technology and networking things in the physical world, while
CPS is more of a closed system and is focused more on
the exchange of information for sensing and controlling the
physical world. IIoT further connects the deﬁnitions of IoT
and CPS, as it possesses characteristics from both.

IoT, IIoT, and CPS are converting almost every aspect of
life to smart in the 21st century. Sensors, actuators, wearables,
embedded devices, and many other devices are becoming
ubiquitous around the world with uses in diverse contexts such
as homes, buildings, cities, health, transportation, automotive,
manufacturing, critical (e.g., nuclear reactors, power plants,
oil reﬁneries) and non-critical infrastructures, and agriculture.
While this promises connectivity and efﬁciency, the various
devices in IoT, IIoT, and CPS environments have their unique
properties in terms of resource limitations, network lifetimes,
and application Quality-of-Service (QoS) requirements which
affect the security of such applications crucially [5].

IoT devices typically have constrained power, storage,
computing, and communications resources which limit
the
accommodation of good security mechanisms [6], [7]. On the
other hand, devices used in IIoT and CPS were not initially
designed with security in mind and they had been considered
secure, as they were isolated. This security by obscurity as-
sumption was broken by the uncovering of the Stuxnet (2010),
DuQu (2011), and Flame (2012) attacks [8]. As an increasing
number of industrial environments are being connected to the
Internet, security updates and patches are becoming serious
problems in decades-old industrial devices [8]–[11].

In order to protect IoT, IIoT, and CPS environments from
malicious entities,
traditional security mechanisms such as
cryptography, ﬁrewalls, Intrusion Detection and Prevention
Systems (IDS, IPS), antivirus, and anti-malware solutions can
be utilized. However, they do not transparently allow security
researchers to observe and analyze how attackers perform
attacks and ﬁnd out
their behaviors [12]. Honeypots and
honeynets come to the scene as viable solutions at this point,
as they can provide actionable intelligence on the attackers.
A honeypot is a tool that is used with the purpose of be-

 
 
 
 
 
 
Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

ing attacked and possibly compromised [13]. Two or more
honeypots implemented on a system form a honeynet [14].
Honeypots are used to attract attackers and deceive them into
thinking that they gained access to real systems. Honeypots
can be integrated with ﬁrewalls and IDSs to form an IPS in
order to capture all the information about attackers, study all
of their actions, develop ways to improve system security and
prevent attacks in the future [12].

Although there exist a number of honeypot and honeynet
works on IoT, IIoT, or CPS, no study exists in the literature
which considers all of the honeypot and honeynet models, ana-
lyzes their similarities and differences, and extracts key points
in the design and implementation of honeypots and honeynets
for IoT, IIoT, and CPS. In order to ﬁll this important research
gap, we propose our comprehensive survey on honeypot and
honeynet models that have been proposed for IoT, IIoT, and
CPS environments over the period 2002-2020. To the best of
our knowledge, our work is the ﬁrst study in the literature
that surveys the current state-of-the-art honeypot and honeynet
models not only for IoT, but also for IIoT and CPS.

Contributions: The contributions of our survey are as follows:

•

•

•

•

Taxonomy of honeypots and honeynets proposed for
IoT, IIoT, and CPS environments,

Comprehensive analysis of IoT, IIoT, and CPS honey-
pots and honeynets, and intriguing characteristics that
are shared by studies,

Statement of the key design factors for future IoT,
IIoT, and CPS honeypots and honeynets,

Presentation of open research problems that still need
to be addressed in honeypot and honeynet research for
IoT, IIoT, and CPS.

Organization: The paper is organized as follows: Section II
gives the related work. Section III provides background infor-
mation on honeypots, honeynets, and related terms. Section IV
provides a methodology for the classiﬁcation of honeypot
and honeynet characteristics. Section V classiﬁes and presents
diverse IoT honeypot and honeynet models and research. Sec-
tion VI presents a taxonomy of the proposed IoT honeypot and
honeynet models. Section VII classiﬁes and presents diverse
CPS and IIoT honeypot and honeynet models and research.
Section VIII presents a taxonomy of the proposed CPS and
IIoT honeypot and honeynet models. Section IX provides
lessons learned and design considerations for honeypot and
implementations. In Section X, conclusions and
honeynet
future work are presented.

II. RELATED WORK

The security of IoT, IIoT, and CPS environments is a very
broad ﬁeld of research, and it is possible to ﬁnd a myriad of
studies. Without going into much detail, we refer the readers
to the works of Butun et al. [15] and Makhdoom et al. [5] for
extensive overviews of vulnerabilities, threats, and attacks, the
security surveys of Lee et al. [16] on IoT standards and Granjal
et al. [17] on the existing IoT protocols, the study of Neshenko
et al. [7] for a recent comprehensive IoT security survey, the
study of Sikder et al. [18] for a survey of threats to IoT sensors,
the study of Humayed et al. [3] for an extensive survey on

the threats, vulnerabilities, attacks, and defense solutions to
CPS, the survey of Al-Garadi et al. [19] for machine and deep
learning techniques for IoT security, the comprehensive survey
of Yu et al. [10] for CPS security and Cintuglu et al. [20] for
CPS testbeds. There are also studies like that of Babun et
al. [21] which develop innovative ways to protect networks
with vulnerable IoT devices.

The honeypot and honeynet research has been a very active
ﬁeld. In terms of general honeypots and honeynets that are
not speciﬁc to IoT, IIoT, or CPS, Fan et. al. [22] proposed
criteria and a methodology for the classiﬁcation of honeynet
solutions and analyzed the advantages and disadvantages of
each criterion used in their taxonomy. In 2018, Fan et al. [12]
expanded on their earlier research and proposed a taxonomy
of decoy systems with respect to decoys and captors. There
also exist other survey studies on general honeypot and hon-
eynet solutions, which include but are not limited to [23],
[24], and [25]. In addition, privacy and liability issues when
honeypots are deployed were analyzed by Sokol et al. [26],
[27]. In terms of honeypots and honeynets for IoT, IIoT,
and CPS, only a few surveys exist in the literature. Razali
et al. [28] analyzed types, properties, and interaction levels
of IoT honeypots and classiﬁed honeynet models based on
interaction, resources, purpose, and role. Dalamagkas et al.
[29] surveyed the honeypot and honeynet frameworks for
smart-grid environments. Dowling et al. [30] proposed a frame-
work for developing data-centric, adaptive smart city honeynets
that focus on the key values of data complexity, security,
and criticality. Furthermore, Neshenko et al. [7] discussed
the IoT and CPS honeypots in their survey on IoT security.
However, they did not provide a comprehensive survey on such
honeypots since the focus of their study was on the security
of IoT.

In addition to proposing novel honeypot/honeynet models
or surveying the existing studies,
there has been research
on the development of honeynet description languages and
also on the detectability of honeypots. Fan et al. [31] pre-
sented a technology-independent, ﬂexible honeynet description
language and a tool called HoneyGen for the deployment
and modiﬁcation of virtual honeynets based on the VNX
and Honeyd platforms. Acien et al. [32] analyzed the steps
and requirements to deploy honeypots in IoT environments
they can look like real devices
effectively in a way that
to attackers. Surnin et al. [33] focused on techniques for
honeypot detection with SSH and Telnet, identifying issues of
software architecture and implementation that make honeypots
easily detected [34]. Zamiri-Gourabi et al. [35] proposed a
methodology to detect the ICS honeypots deployed on the
Internet by means of ﬁngerprinting methodologies.

Differences from the existing work: While the recent years
have seen an increase in honeypot and honeynet research,
our study is different because it is the ﬁrst comprehensive
study that analyzes the existing honeypot and honeynet models
and research for IoT, IIoT, and CPS environments holistically,
provides a taxonomy of honeypots and honeynets and identiﬁes
key design considerations and open issues for honeypots and
honeynets in IoT, IIoT, and CPS.

III. BACKGROUND INFORMATION

In this section, we give some brief information on honey-

2

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

pots, honeynets, and other related terms.

A. Honeypots and Honeynets

A honeypot is a tool that serves as a decoy to attract
attackers and deceive them into thinking that they have gained
access to a real system. There exist various views of a
honeynet: A honeynet can be deﬁned simply as two or more
honeypots implemented on a system [14], or in a more narrow
deﬁnition, a honeynet is a high interaction honeypot system of
Generation I, II, or III [36]. Although honeypots and honeynets
are deﬁned in the mentioned ways, it is interesting to note that
very few authors refer to their honeypot system as a honeynet,
despite their research implementing multiple honeypots. For
instance, as it will be reviewed in the following sections, only a
few honeypots ( [37]–[41]) in the literature were implemented
with a single honeypot. For this reason, we adhered to the
statements of authors about their view of their systems as
honeypots or honeynets while we are reviewing the studies
in this survey.

Three main architectures/generations that are used in hon-
eynets are described in [42]. Generation I was developed in
1999 and is composed of a ﬁrewall and an IDS, with honeypots
behind these. Generation I can capture in-depth information
and unknown attacks. However, Generation I honeynets can
be easily detected by attackers. Generation II was developed
in 2002 and had a honeynet sensor that serves the purpose
of the IDS sensor and of the ﬁrewall used in Generation I.
This sensor works like a bridge, so it is much more difﬁcult
for attackers to detect that they are in a honeynet. Generation
III was developed in 2004 and had the same architecture as
Generation II but has improved deployment and management
capabilities.

Figure 1 depicts a basic honeynet architecture. There are
three essential elements to any honeynet: data control, data
capture, and data collection. Data control involves controlling
the ﬂow of data so that the attackers do not realize they
are in a honeynet and making sure that if the honeynet is
compromised, it will not be used to attack other systems.
The data capture involves capturing all the data regarding
movements and actions within the honeynet [36]. The data
collection involves the ability to securely transfer all
the
captured data to a centralized place [22].

Honeypots and honeynets can be deployed at various loca-
tions. They can be deployed at cloud computing environments
(e.g., Amazon EC2), Demilitarized Zones (DMZ) of enterprise
networks, actual application/production environments (e.g., at
an IoT, IIoT, or CPS network), and private deployment envi-
ronments with public IP addresses. Each of these deployment
options has its own advantages and disadvantages. In addition,
the decision of the deployment environment may have an effect
on the choice of the most appropriate type of honeypot or
honeynet.

B. Other Related Terms

Other concepts and terms exist related to honeypots and
honeynets for IoT, IIoT, and CPS applications. These are
testbeds, network emulators, and simulation frameworks. Sim-
ilar to honeypots and honeynets, such systems simulate or

Fig. 1: Basic honeynet architecture.

emulate devices, protocols, or even provide a physical envi-
ronment where CPS devices operate and communicate using
industrial protocols. However, unlike honeypots and honeynets,
they do not act as decoy systems that aim to grab the attention
of attackers and analyze their attacks. As we explain in the
following sections, honeypot and honeynet researchers used
such tools to create their decoy systems. The MiniCPS frame-
work [43], the IMUNES emulator/simulator [44], the GridLab-
D power distribution simulator [45], the SoftGrid smart grid
security toolkit [46], the PowerWorld simulator [47], and the
Mininet emulator [48] were all used in a number of studies to
simulate protocols, emulate devices and scale decoy systems.
Front-end and back-end are also related terms that are used in
various studies. The front-end of a honeypot/honeynet system
is the part attackers interact with and gathers data, while
the back-end receives data from the front-end for analysis,
decryption, and storage. Self-adapting refers to the ability of
a honeypot to analyze information and adapt its responses or
behavior accordingly in order to accomplish its purpose better.

IV. CLASSIFICATION METHODOLOGY

Honeypots and honeynets can be classiﬁed in various ways.
In order to classify the honeypots and honeynets for IoT,
IIoT, and CPS in this survey, we build upon prior surveys
[12], [24], [25], [28]. However, our classiﬁcation in this work
improves the existing works by identifying some of the re-
curring key characteristics of the surveyed works. Speciﬁcally,
we classify the honeypots and honeynets for IoT, IIoT, and
CPS with respect to their purpose, role, level of interaction,
scalability, resource level, availability of the source code, and
their application as shown in Fig. 2. We also consider the
simulated services, the inheritance relationships between the
honeypots and honeynets, the platforms they were built on,
and the programming languages they used.

Classiﬁcation by Purpose: Honeypots can be categorized

3

RouterInternetHoneynet sensor /     Firewall + IDS   External UserHoneypotVirtual-PCIoT DeviceTerminalHoneypotHoneypotAnomalous trafficAttackerServer  Log Server(Data Capture)(Data Collection)(Data Control)Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

Fig. 2: Classiﬁcation categories of honeypots and honeynets for IoT, IIoT, and CPS in which some of the items in the categorization
build upon [12], [24], [25], [28]. Details of works corresponding to each category are tabulated in Tables I, II, and III.

into two classes based on the purpose for which they were
created: research and production honeypots. Research honey-
pots are used to gather and analyze information about attacks
in order to develop better protection against those attacks.
Production honeypots are more defense-focused. They are
usually implemented to keep an attacker from accessing the
actual system of the organization that implements it [13].

Classiﬁcation by Role: Role refers to whether a honeypot
actively detects or passively captures trafﬁc. A client honeypot
can actively initiate a request to a server to investigate a
malicious program while a server honeypot waits for attacks.
The great majority of honeypots are server honeypots [12].

Classiﬁcation by Level of Interaction: Honeypots can be
classiﬁed by the level of interaction that they allow to the
attacker: low interaction, medium interaction, high interaction,
and hybrid. Low interaction honeypots emulate one or more
services with simple functions and do not give access to an
operating system. The beneﬁts of low interaction honeypots
are ease of setup, low risk, low cost, and low maintenance.
However, low interaction honeypots are identiﬁed much more
easily by attackers because of their limitations, and the infor-
mation they gather is limited and has low ﬁdelity [28].

High interaction honeypots provide much more interaction,
not only emulating services but also allowing access to an
operating system [28]. While some of the research refers
to high interaction when a honeypot is created using real
devices, other works also include virtual environments that
emulate complete devices and services as high interaction.
High interaction honeypots collect information about all of
the attacker’s movements and actions, which is an advantage
of high interaction honeypots because the information gathered
has high ﬁdelity. However, they come with high risk because
everything they allow attackers to access is on real resources to
gather more information. Moreover, they are more complex to
set up, they collect much more data, and they are more difﬁcult
to maintain and run [28]. Once they are compromised, rebuild-
ing them becomes necessary. Also, attackers can compromise
them to attack other targets, which creates liability issues.

As the name indicates, medium interaction honeypots
provide a level of interaction in-between a low and a high
interaction honeypot. Although there are different perspectives
on whether they have a real operating system or an emulated
operating system, they do emulate more services than a low-
interaction honeypot, providing for more interaction which in-
creases risk, and makes them more difﬁcult to detect compared
to low interaction honeypots.

Figure 3 shows how the level of interaction varies in
relation to the different characteristics. This should be seen
as more of a ﬂuid continuum rather than set characteristics.

A mix of honeypots with different levels of interaction
implemented in the same system is called a hybrid honeynet.
Hybrid honeynets are able to provide a better balance by
providing the beneﬁts of each type of honeypot [29].

Classiﬁcation by Scalability:

Scalability refers to the
ability of a honeypot to grow and provide more decoys. An
unscalable honeypot has only a certain number of decoys
and cannot be changed. A scalable honeypot can expand the
number of decoys it deploys and monitors [12]. Scalability is
important because various honeypots implemented together in
a honeynet provide greater protection, services, data collection,
and variety of data compared to a single honeypot. Physical
honeypots are usually harder to scale because of the resources
needed. High-interaction honeypots also tend to have lower
scalability because of their complexity.

Classiﬁcation by Resource Level: The type of resources
used to create the honeypot system can be physical or virtual.
A physical honeypot system is composed of several honeypots
running on physical machines, while a virtual honeypot system
is made up of virtual honeypots that are hosted on one or more
physical machines. Physical honeypots have high interaction
and have more data capture ﬁdelity than virtual honeypots.
However, they are more costly and require more resources
to implement. Virtual honeypots require fewer resources to
implement and are therefore less costly. A hybrid honeynet
that uses both physical and virtual honeypots is able to better

4

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

balance cost and data capture ﬁdelity [22].

Classiﬁcation by Availability of Source Code: Open-source
refers to a software’s source code being released in a way that
anyone can have access to it, modify it, and/or distribute it.
Open-source software allows for collaborative development.
Not all of the honeypot and honeynet authors provide the
source code of their decoy systems. Making the source code
available allows other researchers and developers to understand
and improve the existing honeypots and honeynets.

Classiﬁcation by Application: Application refers to the
intended application for which the honeypot system is created.
In this survey, we classify the IoT honeypot systems as general
use, IoT, or Smart Home IoT. General use honeypots are
those that were not originally created for IoT. However, these
are relevant because they have subsequently been used in
research with IoT honeypots. IoT honeypots target general
IoT applications. IoT Smart Home honeypots are honeypots
with a speciﬁc focus on applications for Smart Home uses.
We classify the CPS and IIoT honeypot systems as ICS,
Smart Grid, Water System, Gas System, Building Automation
System, and IIoT applications. Although the boundary between
ICS and other smart infrastructures are not very obvious, we
adhere to the authors’ statements about their honeypots in this
paper for the classiﬁcation by application purposes.

V. HONEYPOTS AND HONEYNETS FOR
INTERNET OF THINGS

In this section, we give a brief overview of honeypot
and honeynet studies for IoT. First, we identify some general
application honeypots available. Next, we present the research
with IoT honeypots and honeynets with full device emulation.
Finally, we present the IoT honeypot and honeynet research
focused on the type of attack. We would like to note that,

Fig. 3: Characteristics by level of interaction.

5

unless otherwise stated, honeypots reviewed in this section are
in the role of server honeypots.

A. General Application Honeypots

There are various general application honeypots that have
an inheritance relationship with later research and honeypots
for IoT applications. In other words, while these honeypots
and honeynets were not speciﬁcally created for IoT, they are
being used in research for IoT honeypots and honeynets. It
is important to note that all of these are open-source, except
for the Adaptive Honeypot Alternative (AHA) with Rootkit
Detection [49]. Table I provides a list of the considered general
IoT honeypots.

TABLE I: List of General IoT Honeypots.

Honeypot

HoneyD [50]
Dionaea [51]

Interaction
Level
Low
Medium

Simulated Services

FTP, SMTP, Telnet, IIS, POP
Black hole, EPMAP, FTP, HTTP, Mem-
cache, MongoDB, MQTT, MySQL, Nfq,
PPTP, SIP, SMB, TFTP, UPnP
SSH

Kippo [52]
Cowrie [53]
HoneyPy [54]
AHA [55]
AHA with Rootkit
Detection [49]
RASSH [56]
QRASSH [57]

Medium
Medium/High SSH, Telnet, SFTP, SCP
Low/Medium Created as required
SSH
Low/High
SSH
Medium

Medium
Medium

SSH
SSH

Honeyd: HoneyD [50] is an open-source software for
the creation of low interaction, scalable honeypots. Honeyd
creates virtual honeypots, but it also allows physical machine
integration. It can simulate UDP, TCP, FTP, SMTP, Telnet, IIS,
and POP services. Staﬁra [58] examined if HoneyD is able to
create effective honeypots to attract attackers. They compared
honeypots simulating IoT devices with real devices. The results
showed that, although the content served by both honeypots
and real devices were similar, there are signiﬁcant differences
between average times for query responses and Nmap scans.

Dionaea: Dionaea [51] is an open-source software for the
creation of medium interaction honeypots that can simulate
several services (e.g., FTP, HTTP, MongoDB, MQTT, MySQL,
SIP, SMB, TFTP, UPnP, etc.) [59]. It
targets adversaries
that attack hosts on the Internet with vulnerable services.
Since adversaries try to install malware on the infected hosts,
Dionaea aims to obtain a copy of malware and help researchers
to analyze it. Dionaea has a static conﬁguration, which makes
it difﬁcult to adapt the conﬁguration as needed to respond
to events [12]. Metognon et al. [60] used Dionaea in their
IoT honeypot research. Kaur and Pateriya [61] proposed the
setup of a cost-effective honeypot for IoT using Dionaea on
Raspberry Pi and analyzed captured data using VirusTotal tool
and Shodan search engine to identify the characteristics and
vulnerabilities of devices in order to improve their security.

Kippo: Kippo [52] is an open-source, medium interaction,
scalable honeypot. It focuses on SSH, and it logs brute force
attacks, as well as interactions from automated or individual
attacks [62]. Dowling et al. [62] modiﬁed Kippo in order to
implement a ZigBee IoT honeypot. Kippo is chosen because of
the high number of attacks that SSH receives. Pauna [56] used

IoTCPSIndustrialApplicationIIoTLow		InteractionMediumInteractionHigh	Interaction-																																Interaction	permitted	to	attackers																													+CostDifficulty	of	ImplementationRiskMaintenance+																																											Scalability																																																									-Difficulty	of	DetectionInformation	gathering	/	FidelityEmulated	ApplicationsEmulated	OperatingSystemReal	Applications	Real	Operating	SystemMore	EmulatedApplications	and	Realor	Emulated	OperatingSystemRiskCost-																																Interaction	permitted	to	attackers																													+Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

Kippo for the creation of Reinforced Adaptive SSH (RASSH)
honeypot.

Adaptive Honeypot Alternative (AHA): Wagener [55] used
both a low- and a high-interaction honeypot to gather data from
attackers. With this data, he applied game-theory and Machine
Learning (ML) techniques to develop a self-adaptive SSH
honeypot called Adaptive Honeypot Alternative (AHA) [63].
While Wagener does not implement his honeypot in an IoT
environment, his honeypot serves as the basis for Pauna’s
works [49], [56], [57], [64]. Wagener reported that attackers
three times more interactions when they were
carried out
responding to the customized tools of an adaptive honeypot,
which shows the important role that adaptive honeypots can
play in honeypot research.

AHA with Rootkit Detection: In 2012, Pauna [49] improved
on Wagener’s adaptive honeypot, creating a medium interac-
tion, scalable, virtual honeypot with the ability to detect rootkit
malware installed by attackers. Pauna’s honeypot resides on
the Argos emulator as a guest OS, and utilizes Argos to detect
rootkit malware. This research was followed by [56], [57],
[64].

RASSH: In 2014, Pauna et al. presented an adaptive
honeypot, RASSH [56], which uses a medium-interaction
Kippo honeypot integrated with two modules: Actions module
and Reinforcement Learning module. RASSH interacts with
attackers and takes dynamic actions (e.g., allowing, blocking,
delaying, etc.) using the Reinforcement Learning module. This
research was followed by [57] [64], which led to the creation
of IRASSH-T [65] self-adaptive IoT honeypot.

it

Cowrie: Cowrie [53] is a software for the creation of
medium to high interaction, scalable, virtual honeypots. As
a medium interaction honeypot,
logs an attacker’s shell
interaction on a simulated UNIX system via emulating several
commands. As a high interaction honeypot, it is a proxy for
SSH and Telnet to observe an attacker’s interaction on another
system. To be more speciﬁc, it can act as a proxy between an
attacker and a pool of virtual machines conﬁgured in a backend
site which allows ﬂexibility. Cowrie was forked from Kippo
honeypot and simulates SSH, Telnet, SFTP, SCP, and TCP/IP
services. It supports integration to ElasticSearch, LogStash,
and Kibana for logging, storage, and visualization. It has been
used in the IoT honeypot research for Metognon et al. [60],
IRASSH-T [64], ML-Enhanced Cowrie [66], and Lingenfelter
et al. [67].

HoneyPy: HoneyPy [54] is a software for the creation of
low to medium interaction honeypots, depending on services
that are simulated. HoneyPy comes with a large range of
plugins that can be used for simulating services such as
DNS, NTP, SIP, SMTP, web, etc. It can also be conﬁgured to
run with custom conﬁgurations as needed. HoneyPy provides
researchers several options for logging, which include but
are not limited to ElasticSearch, Logstash, RabbitMQ, Slack,
Splunk, Twitter. In this way, external services can be used to
analyze HoneyPy logs. Metognon et al. [60] used HoneyPy in
their IoT honeypot research.

QRASSH: In 2018, Pauna et al. [57] proposed another SSH
honeypot, namely Q Reinforced Adaptive SSH (QRASSH)
[68] honeypot, which uses Cowrie and Deep Q-learning.
However, Pauna et al. identiﬁed that the reward functions in the

algorithms used in QRASSH were subjective. For this reason,
they proposed further research for being able to generate
optimal reward functions for the desired behavior. This study
was further advanced in [64] and led to the creation of IoT
Reinforced Adaptive SSH (IRASSH-T) [65] honeypot.

Metongnon and Sadre: Metongnon and Sadre [60] carried
out a measurement study to observe attacks against protocols
that are commonly used by IoT devices. They used a large
/15 network telescope to observe large-scale events/trafﬁc on
the dark address-space of the Internet. They deployed three
honeypots: Cowrie [53], HoneyPy [54], and Dionaea [59] to
get more details about speciﬁc attacks. The top three most
attacked protocols observed via telescope were Telnet (Ports
23 and 2323), SSH (Port 22), and HTTP(S) (Ports 80, 81, 8080,
443). The most attacked protocols observed on the honeypots
were Telnet, SMB, and SSH.

B. Research with IoT Honeypots and Honeynets with Full
Device Emulation

IoT honeypots and honeynets that provide full device
emulation provide the most versatility. Full device emulation
allows for greater realism and increases the difﬁculty for
attackers to detect it as a honeypot. In this section, only those
honeypots/honeynets which have the ability to fully emulate all
kinds of devices are included. It is important to note that ﬁve of
the six IoT honeypot/honeynet studies which are identiﬁed as
providing full device emulation are also self-adaptive. Table II
provides a list of the considered IoT honeypots that perform
full IoT device emulation.

TABLE II: List of IoT Honeypots for Full Device Emulation.

Honeypot

FIRMADYNE [69]
ThingPot [70]
ML-Enhanced
ThingPot [71]
IoTCandyJar [72]
Chameleon [73]
Honware [74]

Interaction
Level
High
Medium
Medium

Emulated Devices

COTS network-enabled IoT devices
Philips Hue, Belkin, Wemo, Tplink
General IoT devices

Intelligent
Hybrid
High

General IoT devices
Any real IoT device
CPE devices

et

al.

Chen
an

open-source,

network-enabled

[69]
extensible,

commercial-off-the-shelf

FIRMADYNE:
presented
FIRMADYNE [75],
self-
adaptive automated framework for discovering vulnerabilities
in
devices.
FIRMADYNE works by emulating the full system with
an instrumented kernel. It has a web crawler component to
download ﬁrmware images and their metadata, an extract
ﬁrmware ﬁlesystem, an initial emulation component, and a
dynamic analysis component. FIRMADYNE was evaluated
using a real-world dataset of more than 23,000 ﬁrmware
images from 42 device vendors and 74 exploits. Out of 9,486
ﬁrmware images that were successfully extracted, 887 prove
vulnerable to at least one exploit, and 14 previously unknown
vulnerabilities were discovered.

ThingPot and ML-Enhanced ThingPot: Wang et al. [70]
proposed ThingPot [76], a medium-interaction, scalable, vir-
tual open-source honeypot that simulates the complete IoT
platform and all supported application layer protocols. Thing-
Pot was tested for 45 days with Extensible Messaging and

6

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

Presence Protocol (XMPP) and REST API, and most of the
captured requests were HTTP REST requests. The authors
noted that the attackers were looking for certain devices like
Philips Hue, Belkin, Wemo, and TPlink, scanning to get
information about the devices, and then using more targeted
attacks such as brute force or fuzzing to control them. They
also noted that the attackers were using The Onion Router
(TOR) network [77] to stay anonymous. Vishwakarma and
Jain [71] used ThingPot to propose ML-Enhanced ThingPot,
a self-adaptive honeypot solution for the detection of DDoS
attacks through the Telnet port that uses unsupervised machine
learning (ML) techniques in real-time.

IoTCandyJar: Luo et al. [72] proposed a new type of
honeypot which they deﬁne as intelligent
interaction, and
has the beneﬁts of both low and high interaction honeypots,
simulating the behaviors of IoT devices without the risk of the
honeypot being compromised. The honeypot uses ML with
Markov Decision Process to automatically learn the behaviors
of IoT devices that are publicly available on the Internet and
learn which has the best response to extend the session with
attackers. IoTCandyjar captured 18 million raw requests during
the time of the study, including about 1 million IoT related
requests. Ports 80, 7547, 8443, 81, 8080, and 88 were the
most scanned, with the majority of requests being HTTP.

Chameleon: Zhou [73] proposed a self-adaptive IoT honey-
pot that can emulate all kinds of IoT devices. Chameleon has
front-end responder, evaluator, and back-end interactor mod-
ules. The front-end responder processes requests and responds
accordingly. If the request is new, the responder sends the
request to the evaluator. The evaluator evaluates the security
of the request with the IP whitelist. If the source is untrusted,
Chameleon responds with a default response and the request
is stored for manual study. The back-end interactor establishes
a connection with the target IoT device and detects the open
ports and services to open/start them on Chameleon. As the
honeypot receives more requests, Chameleon’s characteristics
become more like those of the target device. Chameleon is
evaluated by simulating a variety of 100 IoT devices on the
Internet, and comparing this to 100 traditional honeypots using
Shodan Honeyscore [78] ﬁngerprinting tool. The honeypots
simulated by Chameleon were not ﬁngerprinted while all the
traditional honeypots were.

Honware: Vetterl and Clayton [74] presented a high inter-
action virtual self-adaptive honeypot that emulates diverse IoT
and Customer Premise Equipment (CPE) devices by processing
a standard ﬁrmware image and extracting and adapting the
ﬁlesystem. Honware uses Quick Emulator (QEMU) to be able
to fully emulate devices, and runs this with a customized pre-
built kernel and the ﬁlesystem on a host OS.

C. Research with IoT Honeypots and Honeynets Focused on
Type of Attack

This section contains all of the remaining research with IoT
honeypots and honeynets, organized by their focus on attack
type. Table III provides a list of the considered IoT honeypots
by their target attack types.

TABLE III: List of IoT Honeypots that Focus on Speciﬁc
Attacks.

Target Attack(s)

Honeypots

Telnet

SSH and Telnet

Telnet, SSH, HTTP, and
CPE WAN Management
Man-in-the-Middle

D/DoS

Fileless attacks
SSH on Zigbee networks
UPnP
Attacks on
Authentication
Reconnaissance
Attacks on home
networks

Attacks on device
characteristics

IoTPOT [79]
MTPot [80],
Semic and Mrdovic [81]
Phype [82]
Shrivastava et al. [66], IRASSH-
T [65], Lingenfelter et al. [67]
Krishnaprasad [83]

Oza et al. [84]
Anirudh et al. [85],
Vishwakarma and Jain [71]
Tambe et al. [86], Molina et al. [87]
HoneyCloud [88]
Dowling et al. [62]
U-Pot [89]
HioTPot [90]

HoneyIo4 [37]
Pot2DPI [91]

Siphon [92]
Metongnon and Sadre [60]
Zhang et al. [93]

Interaction
Level
Hybrid
Low

Medium
Medium

Hybrid

High
Medium

High
High
Medium
Medium
Not
ﬁed
Low
Medium

identi-

High
Low/Medium
Hybrid

uses a front-end low-interaction responder that simulates IoT
devices by responding to TCP requests, banner interactions,
authentication, and command interactions. It is proposed to
work on the back-end with a high-interaction virtual environ-
ment called IoTBOX running a Linux OS to analyze the attacks
and the captured malware, and run the malware on multiple
CPU architectures.

MTPot [80] is a low-interaction, unscalable, virtual IoT
honeypot
that was designed speciﬁcally for Mirai attacks.
According to Evron [38], it detects connections on ports using
Telnet, identiﬁes Mirai based on the commands requested,
alters parameters to identify Mirai attacks, and reports to a
syslog server. Evron notes that while the tool can be easily
ﬁngerprinted, it is simple and can also prove useful.

Semic and Mrdovic [81] presented a multi-component low-
interaction honeypot with a focus on Telnet Mirai attacks. The
front-end of their honeypot is designed to attract and interact
with attackers by using a weak, generic password. Instead
of using an emulation ﬁle, the front-end is programmed to
generate responses based on the input from the attacker, with
the logic deﬁned in the code. The back-end is protected by
a ﬁrewall and receives the information from the front-end for
decryption, reporting, and storage.

Phype Telnet IoT Honeypot [82] is an open-source soft-
ware for the creation of medium interaction, scalable, virtual
honeypots with a focus on IoT malware. According to the
Phype GitHub repository [82], Phype simulates a UNIX system
shell environment. It tracks and analyses botnet connections,
mapping together connections and networks. The application
includes a client honeypot that accepts Telnet connections and
a server to receive and analyze the information gathered about
these connections.

Only Telnet Attacks: IoTPOT [79] is a hybrid honeypot
proposed by Pa et al. [94] that simulates Telnet services for
different IoT devices and focuses on Telnet intrusions. IoTPOT

Telnet and SSH Attacks: Shrivastava et al. [66] focused on
the use of Cowrie Honeypot to detect attacks on IoT devices
and created a Machine Learning (ML)-Enhanced Cowrie. They

7

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

opened the Telnet and SSH ports, and classiﬁed requests
as malicious payload, SSH attack, XOR DDoS, suspicious,
spying, or clean (non-malicious). They evaluated various ML
algorithms to analyze and classify data, and concluded that
Support Vector Machine (SVM) gives the best results with an
accuracy of 97.39 %.

Based on the their prior QRASSH honeypot, Pauna
et al. [64] proposed a self-adaptive IoT honeypot named
IRASSH-T that focuses on SSH/Telnet. IRASSH-T uses re-
inforcement learning algorithms to identify optimal reward
functions for self-adaptive honeypots to communicate with
attackers and capture more information about target malware.
Their evaluation shows that IRASSH-T improves on previously
identiﬁed reward functions for self-adaptive honeypots and will
be able to attract more attacks and enable collection of more
malware from attackers.

Lingenfelter et al. [67] focused on capturing data on IoT
botnets using three Cowrie SSH/Telnet honeypots to emulate
an IoT system. Their system sets the prefab command outputs
to match those of actual IoT devices and uses sequence
matching connections on ports to facilitate as much trafﬁc as
possible. They analyzed remote login sessions that created or
downloaded ﬁles. They also used a clustering method with
edit distance between command sequences to ﬁnd identical
attack patterns. During their study, two Mirai attack patterns
accounted for 97.7 % of the attacks received on the honeypot.
They concluded that botnet attacks on Telnet ports are the most
common attack to download or create ﬁles, and many attacks
on IoT devices are carried out with Mirai.

Telnet, SSH, HTTP, and CWMP Attacks:

Krish-
naprasad [83] used IoTPOT [94] as a model in creating a
honeypot with a low interaction front-end. The front-end has
a proxy for Telnet, SSH, HTTP, and CPE WAN Manage-
ment (CWMP) protocols and gathers attack data. The high
interaction backend on Krishnaprasad’s model can be physical
or virtual, a single machine or a network of machines, and
has a module for each of the protocols. The honeypot uses
Twisted [95] event-driven networking engine, and employs
Logstash [96] to collect log data. The log data is pushed to
Elasticsearch [97] for storage and Kibana [98] is used for
visualization. For evaluation, Docker containers were setup to
simulate IoT devices, and the honeypot was deployed in seven
locations around the world. In seven days, the honeypot was
reported to have received attacks from 6774 distinct IPs. More
than half of these were Telnet attacks, followed by CWMP
and SSH, with HTTP receiving signiﬁcantly less attacks than
the others.

Man-in-the-middle Attacks: Oza et al. [84] addressed
the issue of Man-in-the-Middle (MitM) attacks and presented
a deception and authorization mechanism called OAuth to
mitigate these attacks. When a user sends a request to an IoT
device in the system, if the user information is not stored in the
database, it is sent to an Authenticator that sends a message to
the valid user. If the request is not authenticated by the user,
it is sent to the honeynet instead of sending to the IoT device.

DoS Attacks: Anirudh et al. [85] investigated how a DoS
attack in an IoT network can be blocked by a medium-high
interaction honeypot. Their system employs an IDS which
passes malicious requests to the honeypot for further analysis.

In order to evaluate their system, they simulated IoT data, and
compared the performance of their system in blocking DoS
attacks with and without the honeypot.

DDoS and Other Large Scale Attacks: Using Thing-
Pot [70], Vishwakarma and Jain [71] proposed a self-adaptive
honeypot to detect malware and identify unknown malware like
those used in zero-day DDoS attacks. The proposed solution
collects logs of attacks received by ThingPot honeypots and
uses the logs to train ML classiﬁers. The authors considered
deploying virtual box images of ThingPot on the IoT devices
in a network, and placing the ML classiﬁer on the router.

Tambe et al. [86] proposed a scalable high interaction
honeypot to attract and detect large scale botnet attacks. In
order to solve the scalability problem of high interaction
honeypots using real devices, Tambe et al. used VPN tunnels
which allowed a small number of real IoT devices to appear
as multiple IoT devices with different IP addresses around
the world. Their evaluations using commercial-off-the-shelf
IoT devices showed that
the devices were being detected
as honeypots by Shodan Honeyscore [78]. The authors also
proposed two live trafﬁc analysis methods for the detection of
large scale attacks.

Molina et al. [87] presented a self-adaptive high interaction
IoT honeynet as part of a full cyber-security framework. Their
framework uses Network Function Virtualization (NFV) and
Software Deﬁned Networks (SDN) to emulate a network of
physical devices and allow IoT systems to self-protect and
self-heal from DDoS botnet attacks. The honeynet uses NFV to
allow for the autonomic deployment of virtual high interaction
honeypots with dynamic conﬁguration and reconﬁguration.
They used SDN for connectivity, data control, trafﬁc ﬁltering,
forwarding, and redirecting between the honeynet and the real
IoT environment. This allowed them to deploy honeynets both
pro-actively and reactively.

Fileless Malware Attacks: Dang et al. [88] presented
HoneyCloud for ﬁleless attacks on Linux-based IoT devices.
HoneyCloud was implemented using both physical and virtual
honeypots. The virtual honeypots provided full device emula-
tion for the six IoT device types. They used four physical IoT
honeypots (a Raspberry Pi, a Beaglebone, a Netgear R6100,
and a Linksys WRT54GS) and 108 virtual IoT honeypots to
attract and closely analyze the ﬁleless attacks and to propose
defense strategies. Their research revealed that approximately
9.7% of malware-based attacks on IoT devices are ﬁleless and
these attacks can be powerful. They also identiﬁed the top
ten most used shell commands in ﬁleless attacks, 65.7% of
which are launched through rm, kill, ps, and psswd commands,
enabled by default on Linux-based IoT devices.

Only SSH Protocol Attacks: Dowling et al. [62] focused
on SSH protocol attacks on Zigbee networks. A Wireless
Sensor Network (WSN) was created with Arduino and XBee
modules to transmit medical information in pcap ﬁles that
serve as honeytokens to catch the attention of attackers. A
Kippo medium interaction SSH honeypot was modiﬁed to
simulate a Zigbee Gateway available through SSH to attract
the maximum amount of trafﬁc. The attacks were analyzed
to see which ones were directed at Zigbee. Of all the attacks
documented, only individual attacks demonstrated interest in
the honeytokens, or the ﬁles, leading to the conclusion that the

8

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

attacks were not geared toward Zigbee in particular. On the
other hand, 94% of honeypot activity was dictionary attacks
that continuously tried to access the network by sequentially
trying different username and password combinations.

Attacks on UPnP Devices: U-Pot [89] is an open-source
medium-interaction, virtual honeypot platform for Universal
Plug and Play-based (UPnP) IoT devices. U-Pot can be used to
emulate real IoT devices, and can be scaled to mimic multiple
instances at once. A honeypot can even be automatically
created using UPnP device description documents for a UPnP
IoT device. The main beneﬁts of U-Pot are its ﬂexibility,
scalability, and low cost.

Authentication Attacks: HIoTPot [90] is a virtual IoT
honeypot created on a Raspberry Pi for both research and pro-
duction. Using Raspberry Pi 3 as a server, HIoTPoT maintains
a database of authenticated users. When any user attempts to
gain access to the IoT network, it compares the user with the
MySQL database. Unidentiﬁed users are sent to the honeypot,
where their attack patterns, logs, and chat details are tracked,
while the system sends an alert to notify all devices in the
network of the attempted intrusion.

HoneyIo4 [37]

Reconaissance Attacks:

is a low-
interaction virtual production honeypot that simulates four IoT
devices (a camera, a printer, a video game console, and a
cash register). HoneyIo4 fools network scanners conducting
reconnaissance attacks by simulating IoT OS ﬁngerprints. With
this fake OS information, the attack is redirected and becomes
unsuccessful.

Attacks on Home Networks: Martin et al. [91] presented
a comprehensive system for home network defense with four
major components: a local honeypot to interact with attackers
and collect data, a module to capture packet patterns and
recognize malicious trafﬁc, a deep packet inspection (DPI)
for signature-based ﬁltering, and a port manager for port re-
mapping between the router and IoT devices. HoneyD [99]
low interaction honeypot is used to monitor the ports that are
supposed to be inactive and Pot2DPI serves as a connection
between the port manager and honeypot to inform the honeypot
when packet forwarding port mapping has happened. Evalu-
ation of the proposed system was carried out using Alman-
trojan, Cerber, Fereit, and Torrentlocker pcap traces and the
system was able to detect the ﬁrst three with 99.84 % accuracy,
while it was only 48.84 % accurate in detecting Torrentlocker.

Attacks Focused on Device Characteristics: Guarnizo et.
al [92] proposed Siphon, a high-interaction, scalable, physical
honeypot. Siphon was implemented on seven IoT devices (IP
cameras, a network video recorder (NVR), and an IP printer).
The devices were made visible as 85 geographically distributed
unique services on the Internet by connecting them to Amazon,
LiNode, and Digital Ocean cloud servers in different cities via
creating wormholes.

They used a Docker image to package and rapidly deploy the
honeynet to capture IoT attacks.

VI. TAXONOMY OF HONEYPOTS AND
HONEYNETS FOR INTERNET OF THINGS

Honeypots and honeynets proposed for IoT are listed in Ta-
ble IV and the tools, implementation and attack type details of
the corresponding honeypots and honeynets are also outlined
in Table V. In this section, we consider all of the proposals
for IoT and provide an overview of these studies based on the
development of research over time, common characteristics,
level of interaction, application, scalability, resource level,
simulated services, most commonly used tools, availability of
the source codes, and the most common attacks.

A. Development of Research Over Time

Research of honeypots speciﬁcally created for IoT begins
in 2015 with the creation of IoTPOT [94]. Previous research
included in this survey was originally created for general
application and later built upon for IoT applications. As shown
in Figure 4, about half of IoT honeypot models have a form of
inheritance with each other, where a honeypot is built based
on another. Cowrie [53] is the open-source honeypot with
the greatest number of IoT honeypots which have been built
directly from it. This could be in part because Cowrie continues
to be actively maintained. In 2016, Firmadyne honeypot was
the second IoT speciﬁc honeypot, and the ﬁrst self-adaptive
IoT honeypot. After the worldwide effects of Mirai malware
in 2016, including attacks on IoT devices, it is interesting to
note there was a large increase in IoT honeypot and honeynet
research in 2017. Of the nine studies published in 2017, seven
studies explicitly refer to Mirai [72] [37] [92] [91] [83] [38]
[81]. Also, as the number of IoT devices has increased rapidly
in recent years, so has the research. 2019 saw a noticeable
increase in the development of self-adaptive IoT honeypots.
We can also see that more than half of the studies proposed
independent honeypots, which may be due to shortcomings of
existing honeypots to meet their needs.

B. Common Characteristics

All of the honeypot/honeynet models surveyed were cre-
ated for research purposes, except for HoneyIo4 [37] and the
IoT honeynet presented by Molina [87], which are production,
and HIoTPot [90] which is identiﬁed as both research and
production. All of the decoys use Linux, and all can be
classiﬁed as having a server role, except for Phype Telnet IoT
Honeypot [82], which has both a client and a server role. In
addition, all of the open-source models were written in Python
programming language.

C. Level of Interaction

Zhang et al. [93] focused on attacks aimed at the Huawei
CVE-2017-17215 vulnerability that can be exploited for re-
mote code execution. They implemented a medium-high inter-
action honeypot to simulate UPnP services, a high interaction
honeypot using IoT device ﬁrmware, and a hybrid multi-port
honeypot using Simple Object Access Protocol (SOAP) service
ports to increase the honeynet capacity and simulate honeypots.

In this study, classiﬁcation based on level of interaction
proved to be the most ﬂuid of all the classiﬁcations regarding
honeypots. Although most research can agree when a honeypot
is low-interaction, deﬁnitions for the other levels can vary. For
the purposes of this paper, level of interaction identiﬁed by the
authors was used. Most research seeks to leverage the beneﬁts
of both low-interaction and high-interaction honeypots, many

9

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

are standard TCP/IP protocols, none of which are IoT speciﬁc.
Two reasons for this may be that these common application
protocols are targeted because they are in the most exposed
and vulnerable layer and 75% of attacks on IoT devices were
carried out through a router [100]. Each of the models and
studies considered in this survey have their focus and speciﬁc
purpose. However, there are ﬁve research models that stand out
as the most versatile as they emulate full devices and are self-
adaptive: IoTCandyJar [72], Chameleon [73], Firmadyne [69],
Honware [74], and ML-enhanced ThingPot [71]. However, of
these, only IoTCandyJar and Firmadyne are open-source.

H. Availability of Open-Source Honeypot and Honeynet Solu-
tions

Approximately half of the IoT honeypot and honeynet
models considered in this survey are open-source. This high-
lights the importance of open-source software in contributing
to the development of improved models.

I. Most Commonly Used Tools

The three tools that were most commonly used in
the honeypot research studies included in this survey are
Shodan [101], Nmap [102], and MASSCAN [103].

Shodan [101] is a search engine for Internet-connected
devices, which includes everything from web cams, to medical
devices, appliances, and water treatment facilities. Shodan
indexes everything that is somehow connected to the Internet,
their location, and their users, providing valuable informa-
tion about the vulnerabilities of today’s interconnected world.
Shodan is used around the world, especially by corporations,
researchers, security professionals, and law enforcement.

Nmap [102] is an open-source, free tool for exploring
networks and security auditing. It works by sending packets
and then analyzing the responses. It is especially used by
network administrators, auditors, and hackers to scan and
determine what hosts are available on a network, the services
they are offering, their operating systems, and other valuable
information. The Nmap suite also has an advanced GUI, a
data transfer and debugging tool called Ncat, a tool to compare
scan results called Ndiff, and a packet generation and response
analysis tool. Nmap is a ﬂexible, easy, and powerful tool.
Nmap is used by honeypot and honeynet developers as a tool
to gain valuable information including checking for network
connectivity, scanning for open ports on real or simulated
devices, comparing scan results of real vs. simulated devices,
and testing the ﬁngerprintability of honeypots.

MASSCAN [103] is another open-source, free tool, which
is very similar to Nmap and has many similar functionalities.
It is a TCP port scanner and its speed sets it apart from similar
tools because it transmits 10 million packets per second, which
allows it to scan the entire Internet in less than six minutes.

Although there are many other diverse tools (e.g. Wire-
shark, VirusTotal, Pcap, Zmap, Censys, Scapy, etc.) that have
been used in IoT honeynet research, these three are by far the
most commonly used. This can be attributed to their availabil-
ity, their low cost, their ease of use, and their effectiveness.
Nmap is the most widely recognized and used network and
security auditing tool and Shodan is the ﬁrst and largest search
engine for Internet connected devices.

Fig. 4: Evolution of Inheritance for the IoT Honeypot and
Honeynet Models and Research

times calling this medium interaction. In other cases, this is
done using hybrid honeynet systems.

D. Resource Level

The great majority of available research on IoT honeynets
has been carried out with virtual resources rather than physical
resources. Only Siphon [92], Staﬁra [58], and Scalable VPN
forwarded Honeypots [28] were carried out with physical
resources.

E. Scalability

Most of the honeypot and honeynet research was carried
out using scalable honeypot systems, except for Dionaea [59]
and HoneyIo4 [37], which can only deploy one simulation
at a time. It is interesting to note that despite using virtual
resources rather than physical resources, these two systems
cannot be expanded to provide more decoys.

F. Application

Considering the application areas of honeypots and hon-
eynets for IoT, nine of the models and research studies
considered were for general use, 22 were for IoT application,
and four were created for Smart Home applications.

G. Simulated Services

The most commonly simulated services in the research co-
incide with the top three most attacked protocols identiﬁed by
Metongnon and Sadre [60]: Telnet, SSH, and HTTP(S). These

10

200220092011HoneyD201520162017Kippo20142015201820192020StafiraRASSH2014CowrieQRASSH201720122011AHAAHA w/ Rootkit DetectionIoTPOTIoT CandyJarHoneyPyKrishnaprasadAnirudh et al. SiphonMTPotSemic & MrdovicPot2DPIDionaeaDowling et al.FirmadyneHIoTPOTThingPotHoneyCloudPhypeScalable VPN-FWDML-    Enhanced ThingPotML-        Enhanced CowrieIRASSH-THoney Io4ZhangMetongnon et al. U-PotHonwareSelf-AdaptiveOpen-SourceClosed SourceChameleonAAAAAAAAAAAAAAAAAAAAAAAAAACreated for IoTLingenfelter et al.AOza et al.AAMolina et al.Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

TABLE IV: Classiﬁcation of IoT Honeypots and Honeynets

Work

Year

of

Scalability Resource

Simulated services

HoneyD [99]
Dionaea [59]

Kippo [52]
Adaptive Honeypot
Alternative [55]
AHA with Rootkit
Detection [49]
RASSH [56]
Cowrie [53]
HoneyPy [54]
IoTPOT [94]
Firmadyne [69]
Dowling et al. [62]
IoT CandyJar [72]
Krishnaprasad [83]
Anirudh et al. [85]
HoneyIo4 Production
Honeypot [37]
Siphon [92]
MTPot [38]
Semic and
Mrdovic [81]
Pot2DPI [91]
Metongnon et al. [60]

QRASSH [57]
ThingPot et al. [70]
HIoTPOT [90]

Staﬁra [58]
IRASSH-T [64]
ML enhanced
Cowrie [66]
ML enhanced
ThingPot [71]
Scalable
VPN-forwarded
Honeypots [86]
Zhang [93]
U-Pot [89]
HoneyCloud [88]

Phype [82]
Oza et al. [84]
Honware [74]
Chameleon [73]
Lingenfelter
et al. [67]
Molina et al. [87]

X

X

X

Level
Interac-
tion
Low

2002
2009 Medium

2009 Medium
2011

Low and
High

2012 Medium

2014 Medium
2015 Medium/High
Low/Medium
2015
Hybrid
2015
2016
High
2017 Medium
Intelligent
2017
2017
Hybrid
2017 Medium/High
Low
2017

2017
2017
2017

High
Low
Low

2017 Medium
2018

Low/Medium

2018 Medium
2018 Medium
2018

Not identi-
ﬁed
Low

2019
2019 Medium
2019 Medium

level

Virtual
Virtual

Virtual
Virtual

FTP, SMTP, Telnet,IIS, POP
Black hole, EPMAP, FTP, HTTP,
Memache, Mirror, MongoDB,
MQTT, MSSQL, MySQL, nfq,
PPTP, SIP, SMB, TFTP, UPnP
SSH
SSH

Role

Open-
source

Application

Server
Server

Yes
Yes

General
General

Server
Server

Yes
Yes

General
General

Virtual

SSH

Server

No

General

Virtual
Virtual
Virtual
Virtual
Virtual
Virtual
Virtual
Virtual
Virtual
Virtual

Physical
Virtual
Virtual

Virtual
Virtual

Virtual
Virtual
Virtual

Physical
Virtual
Virtual

SSH
SSH, Telnet, SFTP, SCP
Created as required
Telnet
Full device emulation
Zigbee, SSH, HTTP
Full device emulation
Telnet, SSH, HTTP, CWMP
Not identiﬁed
SNMP, SSH, SMTP, DNS, HTTP

HTTP, Telnet, SSH, RTSP
Telnet
Telnet

Telnet, UPnP
SSH, Telnet, EPMAP, FTP, HTTP,
Memcache, MQTT, MSSQL,
MySQL, PPTP, SIP, SMB, UPnP,
TFTP, TR-069.1,TR-069.2, CoAP
SSH
Full device emulation
Not identiﬁed

TCP/IP, HTTP
SSH
SSH, Telnet

Server
Server
Server
Server
Server
Server
Server
Server
Server
Server

Server
Server
Server

Server
Server

Server
Server
Server

Server
Server
Server

Yes
Yes
Yes
No
Yes
Yes
Yes
Yes
No
No

No
Yes
No

No
No

Yes
Yes
No

Yes
Yes
Yes

2019 Medium

Virtual

Full device emulation

Server

No

2019

High

Physical

HTTP, TFTP, Telnet, others not
speciﬁed

Server

No

Hybrid

2019
2019 Medium
2019

High

2019 Medium
2019
2019
2019
2020 Medium

High
High
Hybrid

Physical/Virtual UPnP, SOAP
Virtual
Physical/Virtual SSH, Telnet, SMB, HTTP, HTTPS,

UPnP

Virtual
Virtual
Virtual
Virtual
Virtual

RDP, MySQL, SQL Server
Telnet
Not identiﬁed
Full device emulation
Full device emulation
SSH, Telnet, SMTP, HTTP

Server
Server
Server

Server
Server
Server
Server
Server

No
Yes
No

Yes
No
No
Yes
Yes

2020

High

Virtual

Not identiﬁed

Server

No

11

General
General
General
IoT
IoT
IoT
IoT
IoT
IoT
IoT

IoT
IoT
IoT

Smart Home
IoT

General
Smart Home
IoT

Smart Home
IoT
IoT

IoT

IoT

IoT
IoT
Smart Home

IoT
IoT
IoT
IoT
IoT

IoT

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

TABLE V: Tools, Implementation and Attack Types of Honeypots and Honeynets for IoT

Work

Tools

Simulated services

Attack Types

Data Analyzed

Length
of
the
Study

N/A

N/A

N/A

8 hours

HoneyD [99]

Dionaea [59]

N/A

N/A

FTP, SMTP, Telnet,IIS, POP

Black TTP, Memache, Mirror,
MongoDB, MQTT, MSSQL,
MySQL, Nfq, PPTP, SIP, SMB,
TFTP, UPnP

Kippo [52]

N/A

Adaptive
Honeypot
Alternative [55]

AHA Daemon

with

AHA
Rootkit
Detection [49]

AHA Daemon, Ker-
nel
rootkit Kbeast,
Argos

SSH

SSH

SSH

N/A

N/A

N/A

N/A

N/A

N/A

SSH-brute force

User/passwords, TTY buffer,
TCP/UDP packets

Rootkit malware

Keystroke logging, Rootkit mal-
ware

7 days

RASSH [56]

Pybrain RL, SARSA,
Markov

SSH

SSH attack

Logs, commands offering down-
loading

Cowrie [53]

HoneyPy [54]

N/A

N/A

SSH, Telnet, SFTP, SCP

Created as required

N/A

N/A

N/A

N/A

IoTPOT [94]

Masscan, pcap

Telnet

DNS Water Torture, SSL
attack, DoS, DDoS, UDP
Flood, SYN Flood, ACk
Flood, SynAck Flood, Null
Flood, Telnet Scan, DNS
attacks, Fake Web Hosting

PCAP analysis includes total #
of packets, start/end time of
packet captures, data byte/bit
rate, average packet size and
rate, number of victim IP ad-
dress for each attack

N/A

N/A

N/A

39 days

Firmadyne
[69]

IoT CandyJar
[72]

Nmap,
Metasploit
framework, Binwalk,
Scrapy,
QEMU,
Sasquatch, Firmware-
mod-kit

pyLDAvis,
Digital
Ocean VM, Amazon
AWS, MDP, Censys,
ZoomEye,
Shodan,
MASSCAN

HTTP, Telnet, DNS, dec-notes,
HTTPS, UPnP, RIPD, Freeciv

Reconnaissance
buffer overﬂow

attacks,

Firmwares,
results
analysis, MIB ﬁles

from web

N/A

HTTP, RTSP, SOAP Envelope

HTTP,
UDP,
TCP,
RTSP, HTTP CONNECT

HTTP HEAD,
HTTP OPTIONS,
SOAP Envelope,

Attack types and characteristics

1
month

Krishnaprasad
[83]

Twisted, ELK Stack,
Docker,

Telnet, SSH, HTTP, CWMP

Brute-force attack, Hajime,
ZmEu attacks

Attack types and characteristics

7 days

IDS, logs

N/A

DoS attacks

IP Address, MAC Address

N/A

Shodan, Nmap, Wire-
shark, Scapy, VM.

SNMP,
HTTP

SSH,

SMTP, DNS,

Reconnaissance attacks

TCP, UDP and ICMP packets

N/A

Anirudh et al.
[85]

HoneyIo4
Production
Honeypot [37]

Siphon [92]

Shodan,
Nmap

Tcpdump,

HTTP, Telnet, SSH, RTSP

Brute-force login attempts

TCP connections per worm-
hole, services consulted, access
gained, movements statistics

60 days

Incoming connections on any
port using telnet

N/A

MTPot [38]

N/A

Semic and
Mrdovic [81]

N/A

Telnet

Telnet

N/A

Telnet attack

Protocols, IP addresses, logs

N/A

Pot2DPI [91]

N/A

Telnet, UPnP

Mirai and Persirai attacks
protocols, ports scans

Packet traces, attack signatures,
protocols, ports

N/A

12

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

TABLE V: Tools, Implementation and Attack Types of Honeypots and Honeynets for IoT (Cont.)

Work

Tools

Simulated services

Attack Types

Data Analyzed

Metongnon et
al. [60]

Eemo, Shodan

SSH, Telnet, EPMAP, FTP,
HTTP, Memcache, MQTT,
MSSQL, MySQL, PPTP, SIP,
SMB, UPnP, TFTP, TR-069.1,
TR-069.2, CoAP

Attack
SYN
URL,
packet, Mirai and Mirai-
Harvest
like
cryptocurrencies,
Login
attempts, Reconaissance

attacks,

Protocols,
packets characteristics

packets

per

Length
of
the
Study

5
months

port,

QRASSH [57]

Deep
Q-learning,
Keras with Theano
backend, Nmap

SSH

ThingPot et al.
[70]

Skipﬁsh,
Masscan

Nikto,

HTTP, XMPP, ZigBee

SSH attack

Commands(downloading, hack-
ing, linux)

N/A

HTTP
request,
POST
HTTP GET with URLs,
scanning
SQL
malware

tools,

HTTP request, SQL access re-
quest, scanning network

1.5
months

Staﬁra [58]

Nmap, Wireshark,
VMWare Workstation

TCP/ IP, HTTP

Only user testing

Access time, HTML code, net-
work headers and Nmap scan

IRASSH-T
[64]

Apprenticeship
Learning

SSH

SSH attack

N/A

N/A

N/A

SSH, Telnet

Malicious payload, SSH at-
tack, XOR DDoS, Spying,
Suspicious, Clean

System logs, IP, attack types and
characteristics, commands exe-
cuted, behavior analysis

40 days

Telnet, MQTT, XMPP, AMQP,
CoAP, UPnP, HTTP, REST

DDoS, malware, TCP SYN
ﬂood, UDP ﬂood, HTTP
GET ﬂood

Network trafﬁc, payload, mal-
ware samples, the toolkit by at-
tacker

N/A

HTTP, TFTP, Telnet, others not
speciﬁed

DDoS style attacks

Protocols,
packets characteristics

packets

per

Zhang [93]

Tc, own script

UPnP, SOAP

U-Pot [89]

Shodan, Zmap, U-Pot

UPnP

UPnP

N/A

SSH, Telnet,
SMB, HTTP,
HTTPS, RDP, MySQL, SQL
Server

Fileless attacks, malware-
based attacks

ML enhanced
Cowrie [66]

ML enhanced
ThingPot [71]

Scalable VPN-
forwarded
Honeypots
[86]

Vector
Support
(SVM),
Machine
Forest,
Random
J48
Naive Bayes,
tree,
decision
VirusTotal website,
Weka,
machine
learning algorithms

Linux bash scripts,
Azure,
Microsoft
MATLAB

VPN,
TShark,
HONAN, pcap, VM,
MySQL, own script

HoneyCloud
[88]

Cloud
antivirus

VM,
storage,
communities,
Honeycomb,
VirusTotal website

Phype [82]

Phype Telnet

Chameleon
[73]

Honware [74]

Nmap, Shodan

QEMU,
Wireshark,
Nmap,
Shodan

Binwalk,
Ping,
Firmadyne,

Telnet

N/A

N/A

N/A

Reconnaissance attacks

IP whitelist, received requests

SSH, Telnet, HTTP, UPnP,
DHCP, DNS, dec-notes, freciv,
netbios, HTTPS, MDNS, TFTP

Reconnaissance
attacks,
Zero days, capture attacks
trafﬁc

Kernel logs, ﬁrmwares,

Oza et al. [84]

OAuth2,
QEMU

MySQL,

N/A

Man in the Middle attacks

MAC address, Unauthorized ac-
cess

N/A

Lingenfelter
[67]

Filebeat, ELK stack,
Logstash, VirusTotal

SSH, Telnet

IoT botnet malware

Packets per port, System logs,
IPs, Brute-force scan, ﬁle hash

40 days

13

Protocols,
timestamp, inject behaviors

packets

per

N/A

Symmetry/asymmetry of data
ﬂows, packets analysis, attack
characteristics,
types
keystrokes,
trace of network
activities, CPU usage, Process
list.

and

port,

16
months

port,

7 days

N/A

1 year

N/A

N/A

<
2
months

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

J. The Most Common Attacks

The most commonly detected/tested attacks in IoT honey-
pots/honeynets are Telnet, SSH, DoS/DDoS, and HTTP(S) at-
tacks. In addition, reconnaissance attacks, brute-force attacks,
malware, and Mirai attacks were also detected/tested in the
proposed honeypots and honeynets. Although less common
than the mentioned attacks, botnet, Man-in-the-Middle, mali-
cious cryptocurrency mining, and buffer overﬂow attacks were
also detected/tested in the proposed systems.

VII. HONEYPOTS AND HONEYNETS FOR IIOT
AND CPS

In this section, we give brief overview of honeypots and
honeynets proposed for IIoT and CPS applications. We group
the IIoT and CPS honeypots and honeynets based on the
application types as follows: ICS, Smart Grid, Water Systems,
Gas Pipeline, Building Automation Systems, and IIoT.

A. Honeypots and Honeynets for Industrial Control Systems

In this subsection, we give brief overview of honeypots
and honeynets ICS. Table VI provides a list of the considered
general ICS honeypots.

CISCO SCADA HoneyNet Project: The ﬁrst honeynet for
SCADA ICS was proposed by Pothamsetty and Franz in Cisco
Systems’ SCADA HoneyNet Project [104] in 2004. SCADA
HoneyNet is based on the Honeyd [50] open-source honeypot
framework and is a low-interaction honeynet that supports the
simulation of Modbus/TCP, FTP, Telnet, and HTTP services
running on a programmable logic controller (PLC).

Digital Bond SCADA Honeynet: The second honeynet
for SCADA ICS was introduced by Digital Bond in 2006
under the name of SCADA Honeynet [105], [106]. It consists
of two virtual machines: one of them simulates a PLC with
Modbus/TCP, FTP, Telnet, HTTP, and SNMP services while
the other one is a Generation III Honeywall. The Honeywall
is a modiﬁed version of SCADA HoneyNet [104] that aims
to monitor and control
the honeypot’s trafﬁc and attacker
interactions.

in
Wade [107] used Digital Bond’s SCADA honeynet
her thesis to analyze the attractiveness of honeypots in ICS
systems. Her honeypot simulated a Schneider Modicon PLC
with Modbus TCP, FTP, Telnet, and SNMP services.

Conpot and Conpot-based ICS Honeypots: One of the
most popular ICS honeypots that has been used by researchers
is Conpot [108]. It is an open-source low-interaction honeypot
that was developed under the Honeynet Project [109] and
is still being maintained. Conpot supports various industrial
protocols including IEC 60870-5-104, Building Automation
and Control Network (BACnet), EtherNet/IP, Guardian AST,
Kamstrup, Modbus, S7comm, and other protocols such as
HTTP, FTP, SNMP, Intelligent Platform Management Interface
(IPMI), and TFTP. It provides templates for Siemens S7 class
PLCs, Guardian AST tank monitoring systems, and Kamstrup
382 smart meters.

Jicha et al. [118] deployed Conpot honeypots at six dif-
ferent locations around the world via Amazon Web Services
platform. The authors conﬁgured and deployed two Conpot

TABLE VI: List of General ICS Honeypots.

Honeypots

Interaction
Level

Simulated Services

CISCO [104]

Digital Bond [105]

Conpot [108]

Low

Low

Low

Modbus/TCP, Telnet, HTTP, FTP

Modbus/TCP, Telnet, HTTP, FTP, SNMP

IEC 60870-5-104, BACnet, EtherNet/IP,
Guardian
Kamstrup, Modbus,
S7comm, HTTP, FTP, SNMP, IPMI, TFTP

AST,

Zhao and Qin [110]

Medium

S7comm, Modbus, SNMP, HTTP

DiPot [111]

Low

HTTP, Modbus, Kamstrup, SNMP, IMPI,
BACnet, Guardian AST, S7comm

XPOT [112]

Medium

S7comm, SNMP

HosTaGe [113]

Low

Modbus, S7comm, HTTPS, FTP, MySQL,
SIP,SSH, SNMP, HTTP, Telnet, SMB, and
SMT

S7CommTrace [114] Medium

S7comm

Honeyd+ [115]

Gallenstein [116]

Abe et al. [117]

High

Low

Low

EtherNet/IP, HTTP

EtherNet/IP. ISO-TSAP, HTTP

Modbus,
Guardian AST, HTTP, SNMP

S7comm,

BACNet,

IPMI,

instances at every location, one with the default conﬁgura-
tion and the other one with gas tank level SCADA Conpot.
Honeypots ran for 15 days and they analyzed the behavior of
simulated protocols against Nmap scanning tool and Shodan
search engine scan data. They realized that the ports identiﬁed
by Shodan and Nmap may differ.

Zhao and Qin [110] improved Conpot honeypots with addi-
tional Siemens S7comm protocol functions and sub-functions
support and a dynamic Human Machine Interface (HMI) for
evaluation of threats to ICS environments. The authors state
that their study improved the interaction level of Conpot and
provided better support for the simulation of Siemens S7 class
PLCs. Their 43-day long deployment received trafﬁc from 244
valid IP addresses from 34 different countries.

Cao et al. proposed a distributed ICS honeypot called
DiPot [111]. DiPot is based on Conpot honeypot framework.
It enhances Conpot framework by adding higher-ﬁdelity ICS
protocol simulations, data capture and analysis with K-means
clustering, and visualization and statistics support. The authors
indicated that deployed DiPot honeypots in cloud virtual ma-
chines around the world successfully deceived Shodan search
engine and were recognized as real ICS devices.

Lu et al. [119] deployed Conpot on a Raspberry Pi to
simulate Siemens S7 class PLCs. In addition, they used an
Arduino board to simulate a PLC and another Arduino for
sensor simulations. However, they did not give much detail
about PLC simulation on Arduino and the supported industrial
protocols. The authors did not perform any deployments or
tests against the proposed honeypot architecture.

Ferretti et al. [120] aimed to analyze the scanning trafﬁc on
the Internet that is targeting ICS. To analyze the scanners and
their behaviors, the authors deployed several low interaction
Conpot honeypots. Each Conpot honeypot was conﬁgured to
simulate a speciﬁc ICS device with a speciﬁc communication
protocol (i.e., S7comm, Modbus/TCP, IEC-61850-104, Ether-
Net/IP, BACnet, HTTP, FTP, and SSH). Their analysis, which

14

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

covered four months of operation, showed that the majority
of the scanners were legitimate (e.g., Shodan, Censys, etc.)
and showed certain scanning patterns. The authors pointed out
that the usage of legitimate scanner patterns could give a clue
in detecting malicious scanning and attack activities targeting
ICS environments.

Honeyd honeypots with templates that mimic ICS PLCs. The
performance analysis of the authors indicated that Honeyd+ is
able to simulate 75 ICS honeypots using a single PLC device
with a Rapsberry Pi board. However, the analysis showed that
Honeyd+ starts to see serious performance drops starting from
ﬁve simultaneous connections from attackers.

CamouﬂageNet: Naruoka et al. [121] proposed Camou-
ﬂageNet, which is a honeypot system for ICS environments.
CamouﬂageNet creates a set of Honeyd honeypots in the
ICS network with the same ﬁngerprints (i.e., services, ports.
vendors) and changes the IP addresses of the devices in the
network dynamically when an intrusion attempt is caught by
one of the honeypots. In terms of ICS protocols and devices,
CamouﬂageNet does not emulate any ICS-speciﬁc protocols
or simulate any ICS device.

XPOT: Lau et al. [112] proposed an ongoing study of a
medium-interaction honeypot for ICS, namely XPOT. XPOT
simulates Siemens S7-300 series PLCs, and allows the attacker
to compile, interpret and load PLC program onto XPOT. It
supports S7comm and SNMP protocols.

HosTaGe: Vasilomanolakis et al. [113] proposed HosTaGe
ICS honeypot which is an ICS protocols-extended version of
their earlier mobile honeypot [122]. The proposed honeypot
system consists of three parts: protocol emulation, multi-stage
attack detection, and signature generation for IDS. Protocol
emulation supports several protocols (e.g., Modbus, S7comm,
HTTP(S), FTP, SIP, SSH, SNMP, etc.). The attack detection
module employs an Extended Finite State Machine model to
detect multiple-stage attacks that consist of attacks applied by
the same source in a serial manner within a speciﬁed time
window. HosTaGe ICS honeypot can generate signatures that
open-source Bro IDS can use. In addition, the honeypot system
uploads attacker-injected ﬁles to VirusTotal to determine if
they are malicious or not. The authors deployed HosTaGe
along with a Conpot honeypot.

S7CommTrace: S7CommTrace [114] is a honeypot for ICS
that uses Siemens S7comm protocol. It consists of TCP com-
munication, S7 communications protocol, user template, and
data storage modules. Compared to Conpot, S7CommTrace
supports more S7comm functions and sub-fuctions. Both
S7CommTrace and Conpot instances were deployed to four
different locations around the world on cloud environments and
analyzed for 60 days. The analysis showed that S7CommTrace
was able to receive more connections and provide more
attack data compared to Conpot. In addition, while all Con-
pot instances were ﬁngerprinted by Shodan, S7CommTrace
instances were not ﬁngerprinted.

ICS Honeypots based on Honeyd: Disso et al. [123] re-
searched the security of SCADA systems from the honeypots’
point of view. They created a testbed which consists of a real
PLC device as a high-interaction honeypot and a Honeyd-based
low-interaction honeypot. They placed Honeynet Project’s Roo
honeywall [124] in front of the honeypots. They conducted
latency, network trafﬁc counter and background trafﬁc level
analysis (i.e., anti-honeypot techniques) to compare the high
and low interaction honeypots.

Winn et al. [115] proposed Honeyd+, which aims to con-
struct several high-interaction ICS honeypots using a proxying
technique with a single physical PLC device. Honeyd+ uses

Gallenstein conducted research on the automated creation
and conﬁguration of ICS PLC honeypots that would emulate
PLCs from different vendors with minimum effort. In his
thesis [116], he integrated Honeyd with ScriptGenE framework
proposed by Warner [125]. ScriptGenE is an extended version
of ScriptGen which is automated protocol replay framework
proposed by Leita et al. [126]. Gallenstein emulated a prison
ICS environment
that had three PLCs from Allen-Bradley
and Siemens. He tested the legitimacy of his honeypots with
Shodan Honeyscore, Nmap and vendor tools (i.e., RSLinkx
and STEP7).

Abe et al. [117] proposed an ICS honeypot system that
employs Honeyd and Conpot frameworks and adds a traceback
capability to gain more information about attackers. The pro-
posed system is able to emulate the ICS protocols and devices
by means of Conpot framework, and performs basic honeypot
functions by means of Honeyd. The authors implemented
Nmap in the Honeyd to perform a reverse scan to the attackers
and obtain useful information regarding the attack.

ICS Honeypots based on Network Simulators/Emulators:

In this category, we give brief overview of honeypots
and honeynets for ICS that are based on network simula-
tors/emulators. Table VII provides a list of the ICS honeypots
that are based on network emulators/simulators.

TABLE VII: List of ICS Honeypots Based on Network Sim-
ulators/Emulators.

Honeypots

Interaction Level

Simulator/Emulator

Haney et al. [127]

High

IMUNES Simulator, JAMOD Library

Kuman et al. [128]

Low

IMUNES Simulator

Ding et al. [129]

Medium

IMUNES Simulator

Haney and Mauricio proposed a SCADA honeynet frame-
work [127] based on the IMUNES Network Simulator [44].
The proposed honeynet employs a honeywall to control the
activities of attackers and IMUNES-based honeypots that sim-
ulate PLCs and RTUs in SCADA systems. The authors used
Java Modbus library (JAMOD) to simulate Modbus/TCP and
developed Java code for PLC state variables, control logic,
and process to be controlled by the simulated PLC. They also
utilized Honeyd to provide Telnet, SSH, and HTTP(S) services
for the virtual PLC.

Kuman et al. [128] utilized Conpot honeypot on top of
IMUNES network emulator to analyze attacks targeting ICS
networks. They modiﬁed IMUNES emulated nodes so that they
were able to install Conpot instances simulating Siemens S7-
300 PLCs. They also employed OSSEC host-based IDS to
monitor the activities with the Conpot instances. Two weeks
long experiments showed that Siemens S7-300 PLC honeypots
received port scanning activities to Modbus and web server
ports.

15

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

Ding et al. [129] proposed an ICS honeypot that used
and modiﬁed Siemens S7comm protocol on top of IMUNES
network emulator. The authors paid attention to conﬁgure
SNAP7 tool to provide a ﬁngerprint like real Siemens PLC
devices. They also added SNMP service support. IMUNES
gives the proposed honeypot chance to use lightweight Docker
container technology to quickly start up. The authors used
Nmap and PLCscan tools to verify the ﬁngerprinting results
of the proposed honeypot.

Honeypots and Honeynets Using Real ICS Devices:

In this category, we give brief overview of honeypots and
honeynets that use real ICS devices. Table VIII provides a
list of the ICS honeypots that are based on network emula-
tors/simulators.

TABLE VIII: List of ICS Honeypots that Use Real Devices.

Honeypots

Interaction
Level

Used Device(s)

Bodenheim [130]

Piggin et al. [39]

Haney [131]

Hilt et al. [40]

High

High

Low

High

Allen-Bradley PLCs

Not Speciﬁed

Direct Logic PLC

Siemens
1100, Omron CP1L

S7-1200, Allen-BradleyMicroLogix

Bodenheim deployed four high-interaction ICS honeypots
to an integrator’s site in his thesis [130]. He aimed to analyze
the impact of Shodan search engine on identiﬁcation of the
Internet-connected ICS devices and understand if being in-
dexed by Shodan increases the number of attacks. He used
real PLCs of Allen-Bradley. He conﬁgured two honeypots
with standard settings, one honeypot with obfuscated banner
information and the last one with a banner that advertised
itself clearly as an Allen-Bradley PLC. A 55 day deployment
period showed no evidence that Shodan’s indexing increased
the number of attacks.

Piggin and Buffey [39] presented a high-interaction hon-
eypot for ICS production environments. They used real PLC
hardware to obtain high ﬁdelity data and prevent being detected
as a honeypot. They also implemented a process simulation
for the PLC hardware. However, they did not give details in
regards to the PLC used, supported protocols, and the process
simulation. They also implemented a Situational Awareness
and Forensics platform for honeypot trafﬁc analysis. Their
results show that a majority of the attacks were scanning activ-
ities. In addition, they realized some targeted attacks, including
a password attack with default credentials, a dictionary attack,
an SSH brute-force attack, an attack to the industrial protocols
of the PLC, and a knowledgeable attack originating from the
TOR network.

Haney proposed a hybrid high interaction honeynet frame-
work for ICS in [131]. The proposed honeynet consists of
a honeywall system, a SCADA HMI on a virtual machine,
physical PLC devices, virtual nodes emulating PLC devices
and services (e.g., HTTP, SNMP, SSH, Telnet), and a physical
process simulation. Haney paid attention to not only the
requirements of Gen III honeynets (i.e., data control, data
capture and information sharing), but also other requirements
of realism, scalability, and detection resistance.

Hilt et al. [40] constructed the most realistic ICS hon-
eypot to date. They set up a smart-factory honeypot using
four real PLC devices (i.e., Siemens S7-1200, Allen-Bradley
MicroLogix 1100, and Omron CP1L) with corresponding role
implementations (i.e., agitator, burner control, belt control,
palletizer). They implemented HMIs for each PLC on virtual
machines. In addition to PLCs and HMIs, they also accom-
modated robotics and engineering workstations and installed
corresponding software to them. Moreover, they set up a ﬁle
server and placed fake ﬁles on it. In order to monitor the
honeypots, they used Ethernet taps connected to a Raspberry
Pi to collect monitoring information. Their honeypot system
opened Siemens S7comm, Omron FINS, EtherNet/IP, and
VNC protocols and services to the Internet. To convince the
attackers that they are not a honeypot, they created a fake
company proﬁle with employees, Artiﬁcial Intelligence (AI)-
generated pictures, proﬁles, website, e-mail addresses, and
phone numbers. They tried to attract the attackers using mes-
sages posted on Pastebin. Analysis of honeypot deployments
for seven months shows that the honeypots received scanning
activities from unknown sources as well as from legitimate
scanners. They were attacked by three ransomware attacks,
one malicious cryptomining operation and robotic workstation
beaconing attempt. However,
the PLC honeypots did not
receive any targeted attacks but only scanning activities.

Other ICS Honeypots and Honeynets:

In this category, we give brief overview of the other ICS
honeypots and honeynets. Table IX provides a list of rest of
the ICS honeypots.

TABLE IX: Other ICS honeypots.

Honeypots

Berman [132]

Jaromin [133]

Holczer et al. [134]

Serbanescu
et al. [135]

Sim˜oes et al. [136]

Ahn et al. [137]

Interaction
Level

Simulated Services

Low

Low

High

Low

Low

Low

Modbus/TCP

Modbus/TCP, HAP, HTTP

S7comm, SNMP, HTTP(S)

IEC-104, Modbus,

DNP3,
TFTP, XMPP

ICCP, SNMP,

Modbus, SNMP, FTP

Modbus

Belqruch et al. [138] Medium

SSH

Berman [132] designed and implemented a PLC emulator
on a Gumstix board that could be used as an ICS honey-
pot. The proposed emulator was developed in Python using
Scapy library and acts like an Allen-Bradley PLC running
Modbus/TCP protocol. Berman evaluated the performance of
the emulator via ﬁngerprinting and standard trafﬁc response
tests.

Jaromin proposed an ICS honeypot [133] that emulated
Koyo DirectLogic 405 PLC devices. His honeypot used
Berman’s Modbus/TCP emulator [132] and added Host Au-
tomation Products (HAP) protocol emulation and a web server
implementation. He performed several tests to compare the
Gumstix deployment, laptop Personal Computer (PC) deploy-
ment, and the real Koyo DirectLogic PLC device.

Holczer et al. [134] proposed a high interaction PLC

16

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

honeypot for ICS which simulates the main functionalities
of Siemens ET 200S PLCs. It can support Siemens STEP7
PLC management service, HTTP(S) and SNMP services. The
authors deployed the honeypot within the IP range of their
university and realized that they did not receive much trafﬁc
from the attackers.

Serbanescu et al. [135] proposed a low-interaction hon-
eynet architecture for ICS environments. Their work extends
their earlier honeypot [139] with ICS protocols and cre-
ates a honeynet. Deployment of the honeynet was made on
the Amazon EC2 platform with six honeypots supporting
combinations of different protocols (i.e., Distributed Network
Protocol 3 (DNP3), IEC-104, Modbus, ICCP, SNMP, TFTP,
XMPP). Analysis of the collected data for 28 days showed
that the honeypots received only the reconnaissance activities.
the popularity of the ICS
In addition,
protocols based on the received trafﬁc is as follows: Modbus,
ICCP, DNP3, and IEC-104 in descending order. They drew two
important inferences: i) Attackers are using the Shodan results
to determine which ICS systems to attack, ii) Attackers send
non-ICS-speciﬁc trafﬁc to the standard ports of ICS protocols.

they indicated that

Sim˜oes et al. [136] proposed a SCADA honeypot architec-
ture for ICS which is extremely similar to the honeypot archi-
tecture proposed in their previous work [9]. Their architecture
simulates ICS devices and supports both ICS-speciﬁc protocols
and other protocols (i.e., SNMP, FTP). It also employs a port
scan module to detect the reconnaissance activities, a ﬁrewall
to prevent the honeypot from being used as an attack tool, an
event monitoring module to observe the trafﬁc and attacker
interactions, and a management and watchdog module for
conﬁguration of the honeypot. As a Proof-of-Concept (PoC),
they implemented two low-interaction Modbus honeypots on
a Rapsberry Pi, one placed in an ICS network, and the second
placed in a datacenter.

Ahn et al. [137] proposed a security architecture for
SCADA ICS systems that uses a low interaction honeypot to
detect a possible intruder and performs ARP poisoning attack
to poison the ARP table of the attacker later on. The authors
did not provide any implementation details or any performance
evaluation results.

Belqruch and Maach [138] implemented a Kippo [52]
honeypot for brute-force SSH attacks on an SCADA ICS. They
simulated attacks via Kali Linux tools.

B. Honeypots and Honeynets for Smart Grid

In this category, we give brief overview of the smart grid
honeypots and honeynets. Table X provides a list of the smart
grid honeypots.

CryPLH: Buza et al. [140] proposed CryPLH, a low
interaction and a virtual Smart-Grid ICS honeypot simulating
Siemens Simatic 300 PLC devices. CryPLH uses NGINX and
miniweb web servers to simulate HTTP(S), a Python script
to simulate Step 7 ISO-TSAP protocol and a custom SNMP
implementation. The authors deployed the honeypot within the
university’s IP range and observed scanning, pinging, and SSH
login attempts.

SHaPe: Kołty´s and Gajewski proposed a low-interaction
honeypot, namely SHaPe [141], for electric power substations.

TABLE X: List of Smart Grid Honeypots and Honeynets.

Honeypots

Interaction
Level

Simulated Services

CryPLH [140]

SHaPe [141]

Low

Low

HTTP(S), SNMP, Step7 ISO-TSAP

IEC 61850 MMS, HTTP, FTP, SMB

GridPot [142]

Hybrid

IEC 61850 GOOSE/MMS, Modbus, HTTP

Scott [8]

Mashima et al. [143]

Pliatsios et al. [144]

Mashima et al. [145]

Low

Low

Low

Low

Modbus/TCP, HTTP, SNMP

IEC 60870-5-104, IEC 61850, SSH

Modbus/TCP

TCP port
listener on IEC 61850 MMS,
S7comm, Modbus/TCP, Niagara Fox, Ether-
Net/IP, IEC 60870-5-104, DNP3, BACnet

SHaPe is capable of emulating any IEDs in an electric power
substation that is compliant with IEC 61850 standard. The
proposed honeypot extended the general purpose open-source
Dionaea honeypot by means of libiec61850 library.

GridPot: Redwood et al. [142] proposed a symbolic hon-
eynet framework, namely SCyPH, for SCADA systems. The
proposed framework aims to incorporate emulated SCADA
system components with physics simulations and employ
anomaly detection systems based on the changes on the data
obtained from the physics simulation. In their demonstration,
namely GridPot, the authors utilized GridLab-D simulator [45]
for electric substation simulations and IEC 61850-based com-
munication, and implemented Newton-Raphson power ﬂow
solver algorithm for the voltage and current ﬂow between
the actors. They utilized Conpot to emulate IEDs and also
implemented GOOSE/MMS and Modbus protocols for the
interactions between the devices.

Kendrick and Rucker [146] deployed GridPot in their thesis
to analyze the threats to smart energy grids. Their honeypot
deployment emulated Modbus TCP, S7comm, HTTP, and
SNMP services. Although Shodan Honeyscore detected their
deployment as a honeypot, a 19-day period of data collection
showed that, GridPot received heavy HTTP scanning activities,
over 600 Modbus, and 102 S7comm connections.

Scott [8] implemented a SCADA honeypot that uses the
open-source Conpot honeypot to simulate a Scheider Electric
PowerLogic ION6200 smart meter. They deployed the honey-
pot in a facilities network beside other SCADA components.
They conﬁgured the honeypot to send its logs to a logging
server, which alerts the network administrators based on the
severity of the interactions that attackers are performing. Their
honeypot supports Modbus, HTTP (for HMI), and SNMP.

Mashima et al. [143] proposed a scalable high-ﬁdelity
honeynet system for electrical substations in smart-grid en-
vironments. The proposed honeynet consists of a virtual
substation gateway that supports the standardised smart-grid
communication protocols (i.e., IEC 60870-5-104 and IEC
61850) and opens the entry point to the external attackers;
virtual IEDs that are represented by Mininet [48] virtual
hosts and SoftGrid [46] IED simulations; and simulation of
smart grid components (e.g., circuit breakers, transformers,
etc.) via POWERWORLD [47] power simulator. The proposed
honeynet
to ﬁngerprinting
against Shodan and attacker tools such as Nmap.

is highly scalable and resistant

17

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

Hyun [147] used Conpot honeypot to discover the compro-
mise attempt indicators for ICS environments. She conﬁgured
Conpot to simulate a Siemens S7-200 PLC in an electric power
plant. The simulated instance supported HTTP, Modbus/TCP,
S7comm, SNMP, BACnet, IMPI, and EtherNet/IP services.
The deployment of the honeypot outside of the university’s
network for four months revealed that popular choices for com-
promise attempts were HTTP, Modbus, and S7comm services.

Pliatsios et al. [144] proposed a honeypot system for Smart-
Grid which is based on the Conpot honeypot framework. The
proposed honeypot consists of real Human-Machine Interface
HMI and real Remote Terminal Unit RTU devices, and two
virtual machines, one for virtual HMI and the other for a
Conpot-based honeypot emulating an RTU device. The Conpot
honeypot uses the real trafﬁc generated by the real RTU device
in order to make the attackers believe that they are interacting
with a real ICS device.

Mashima et al. [145] deployed low interaction smart-grid
honeypots in ﬁve geographic regions via Amazon cloud plat-
form and analyzed the trafﬁc coming to the honeypots for six
months. They did not use open-source honeypot frameworks
in order to avoid ﬁngerprinting by attackers. Instead, they set
up TCP listeners on several ports for ICS protocols. They
realized that their honeypot instances received SYN-ﬂooding
DoS attack on IEC 61850 and S7comm protocols’ port and
also scanning activity for DNP3 and Modbus/TCP protocols.
Their analysis showed that the same group of attackers, using
the same IP addresses, was targeting smart grid devices on
their honeypot instances around the world and sometimes an
attack targeting a speciﬁc honeypot instance was applied to
another instance the following week.

C. Honeypots and Honeynets for Water Systems

In this category, we give brief overview of the honeypots
and honeynets for water systems. Table XI provides a list of
the water system honeypots.

Wilhoit [148], [153] deployed high and low interaction
honeypots to understand the sources and motivations of attacks
targeting ICS environments. His honeypot system mimicked a
water pressure station. For high interaction honeypots, he used
Nano-10 PLC and Siemens Simatic PLC. As low interaction
honeypots, he created virtual HMI instances which look like
controlling PLCs of an ICS. The low-interaction honeypots
were deployed on Amazon EC2 cloud environments around
the world.

Antonioli et al. [149] proposed a virtual high interaction
honeypot for ICS that is based on the MiniCPS ICS simulation

TABLE XI: List of ICS Honeypots for Water Systems.

Honeypots

Interaction
Level

Simulated Services

Wilhoit [148]

Hybrid

Modbus/TCP, HTTP, FTP

Antonioli et al. [149]

Murillo et al. [150]

High

Low

EtherNet/IP, SSH, Telnet, VPN

EtherNet/IP

Petre and Korodi [151] Medium

Modbus

MimePot [152]

High

Modbus/TCP

framework [43]. The proposed design separates the honeypot
system from the real ICS, and places virtual VPN, Telnet
and SSH servers as the entry points for attackers to the
honeypot. Network, ICS devices and physical process simula-
tions/emulations are performed utilizing MiniCPS framework.
In addition, the authors considered to manage the bandwidth,
delay, and packet loss of the emulated links in the honeypot
via Tc program, and enabled EtherNet/IP communication via
cpppo Python library. As a PoC, the authors implemented a
water treatment ICS.

A virtual

testbed environment for ICS which can be
used to deploy ICS honeypots was proposed by Murillo et
al. [150]. The presented virtual testbed environment which uses
MiniCPS [43] pays attention to realistic mathematical model-
ing of the ICS plants and the response time of the simulated
ICS devices. The authors added a nonlinear plant model to
MiniCPS to create a realistic ICS plant. An emulated network
of a nonlinear control system which represents three water
tanks, sensors, actuators and PLC devices was developed. In
addition, the authors simulated a bias injection attack on the
control system and proposed a mitigation mechanism.

Petre and Korodi [151] proposed a solution for protecting
water pumping stations from threats using a honeypot inside
an Object Linking and Embedding Process Control (OPC)
Uniﬁed Architecture (UA) wrapping structure. OPC UA [154]
is a middleware that can be used to interface standard ICS
protocols (e.g., Modbus) to Service Oriented Architecture
(SOA) systems and web services. The proposed honeypot uses
Node-RED library to simulate a system consisting of two water
pumps and two water tanks and runs in an OPC UA Wrapper.

Bernieri et al. [152] presented a model-based ICS honey-
pot, namely MimePot, that utilizes Software Deﬁned Network
SDN for trafﬁc redirection and network address camouﬂage
for the real devices. The proposed honeypot simulates the ICS
components and control routines based on the Linear Time
Invariant model. The authors provided a water distribution PoC
implementation which used a simulated attacker that injects
and modiﬁes the communication between honeypot elements.

D. Honeypots and Honeynets for Gas Pipelines

Wilhoit and Hilt developed a low-interaction virtual hon-
eypot, namely GasPot [155], for gas-tank-monitoring systems.
Their honeypot represented a virtual Guardian AST gas-tank-
monitoring system. Based on their deployments with physical
IP addresses in seven countries around the world, they realized
reconnaissance attempts and DDoS attacks were performed by
attackers.

Zamiri-Gourabi et al. [35] proposed an enhanced version
of GasPot honeypot for ICS. Their upgrade applied patches
to GasPot so that it will not be detected as a honeypot on
the Internet. They ﬁxed the incomplete command support for
ATG protocol, made response times more realistic, and patched
the problem of responding with static inventory values and
the output formatting issue which can help an attacker to
understand that it is a honeypot.

E. Honeypots and Honeynets for Building Automation Systems

Litchﬁeld et al. [41] stated that high interaction honey-
pots are unsuitable for CPS due to safety risks, costs, and

18

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

limitations with the usefulness of the honeypot without the
physical part of the CPS. Therefore, they suggested the use
of hybrid interaction honeypots in which real CPS devices
interact with the simulation of the physical part of the CPS,
and proposed HoneyPhy. HoneyPhy consists of three modules:
Internet interface(s), process model(s), and device model(s).
A PoC implementation of HoneyPhy was given where a
Heating, Ventilation and Air Conditioning (HVAC) honeypot is
constructed by means of a physical SEL-751A relay, a black-
box simulation model of a physical relay and a heating and
cooling process simulation model. The extendability of the
proposed honeypot framework for other CPS applications is
limited since device and process models for the corresponding
CPS application are needed.

F. Honeypots and Honeynets for IIoT

Ammar and AlSharif [156] proposed a model called Hon-
eyIo3, composed of three honeynets carried out with three
Raspberry Pi devices with Linux OS and Honeeepi sensor, that
mimic IIoT/ICS services. Services/Protocols used in HoneyIo3
model are IPMI, S7comm, HTTP, Kamstrup, SNMP and SSH.

Du and Wang [157] focused on DDoS attacks on SDNs in
IIoT environments. They identiﬁed a new kind of attack that
could identify a honeypot being used in an SDN and disable
it. Analyzing attacker strategies,
they presented a pseudo-
honeypot game strategy to dynamically protect SDNs. The
evaluation was performed on a testbed using servers and hybrid
honeypots, and showed that the proposed strategy can protect
against DDoS attacks.

VIII. TAXONOMY OF HONEYPOTS AND
HONEYNETS FOR IIOT AND CPS

Honeypots and honeynets proposed for IIoT and CPS are
listed in Table XII and the tools, implementation, and attack
type details of the corresponding honeypots and honeynets are
also outlined in Table XIII. In this section, we consider all of
the proposals for IIoT and CPS and provide an overview of
these studies based on the development of research over time,
common characteristics, scalability, simulated services, most
commonly used tools, availability of the source codes, and the
most common attacks.

A. Development of research over time

We analyzed the studies and depicted the development
of research over time and also the inheritance relationship
between the honeypots and honeynets for IIoT and CPS in
Figure 5. As shown in the ﬁgure, honeypots and honeynets
for IIoT and CPS started with the SCADA HoneyNet [104]
project of Pothamsetty and Franz from Cisco Systems in
2004. This project was followed by Digital Bond’s SCADA
Honeynet [105] in 2006. In terms of the honeypot and honeynet
research for IIoT and CPS systems in the literature, we
can see that Berman’s thesis [132] in 2012 was the ﬁrst
study. His thesis was followed by another thesis conducted by
Jaromin [133] the following year. It is interesting to note that
both studies were performed in the US Air Force Institute of
Technology. This also corresponds to a time in which notorious
malware (i.e., Stuxnet (2010), DuQu (2011), Night Dragon
(2011) and Flame (2012)) appeared in the wild against nations’

Fig. 5: Evolution of Inheritance for the honeypots and hon-
eynets of IIoT and CPS.

critical infrastructure environments, and quickly grabbed the
attention of military/defense organisations. In the same year,
2013, the most popular ICS honeypot - Conpot [108] started
and Wilhoit from Trend Micro Research published the white
paper of their low interaction ICS honeypots [148]. After these
works, honeypot and honeynet research and practice in IIoT
and CPS gained a momentum.

As shown in Figure 5, more than one-third of works have a
form of inheritance relationship with each other, where a hon-
eypot is built based on another. In this respect, Conpot [108] is
the leading honeypot, as six honeypots were developed based
on Conpot (this number does not include the studies that do
not extend Conpot but only use it). The underlying reasons can
be manifold. Conpot is open-source and is still being actively
maintained. It supports several industrial and non-industrial
protocols. In addition, it is being developed under the umbrella
of Honeynet Project [109], which has a signiﬁcant background
with honeypots such as Honeyd, Honeywall CDROM, Dionaea
and Kippo.

In addition to extending the existing honeypots, researchers
also considered to employ simulators, emulators, or frame-
works as the main building block for their studies. As Figure 5
shows, Mininet and IMUNES emulators, GridLab-D, SoftGrid
and POWERWORLD simulators, and MiniCPS framework
were utilized in a number of honeypot/honeynet studies.

19

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

Apart from extending honeypots or using simulators, em-
ulators and frameworks, we can see that half of the studies
proposed independent honeypots. This may be due to the
shortcomings of existing honeypots to support CPS and IIoT
environments or ﬁngerprintability of them from attackers’
point of view.

B. Common characteristics

protocol and process speciﬁc attacks only with medium and
high interaction honeypots. However, one has to be extremely
careful when deploying a high interaction honeypot especially
in IIoT and CPS environments since they allow attackers to
compromise the system and then apply other operations using
the honeypot (e.g., downloading malware, trying to exploit
other devices on the same network, performing attacks on
behalf of the attacker).

Honeypots and honeynets proposed for IIoT and CPS have

several characteristics in common.

D. Resource Level

In terms of purpose of the honeypots, we can see that the
majority of the honeypots and honeynets outlined in Table
XII and Table XIII have research purposes. The only studies
which have production purposes are Antonioli et al. [149],
Piggin et al. [39], and Scott [8]. This is understandable since
IIoT and CPS environments have unique features that make
it hard for security tools including honeypots to be actively
deployed in such areas. Equipments in SCADA environments
work continuously, and interruptions and downtimes are highly
refrained from [8], [9]. In addition to this, industrial devices
typically have real-time constraints with guaranteed response
times [134]. For these reasons, it is very difﬁcult to insert
a honeypot in an ICS production environment which may
affect the ICS communication and has the danger of being
compromised (if it is a high-interaction honeypot).

Considering the roles of honeypots, we see that the over-
whelming majority of the proposals have server roles. The
honeypots and honeynets that have components which act
like clients are Haney et al. [131], Pliatsos et al. [144], and
MimePot [152].

Linux is by far the most popular operating system environ-
ment choice of honeypot and honeynet developers. Apart from
Linux, we see that only Haney et al. [127] used FreeBSD.

In terms of the programming languages used for the devel-
opment of honeypots and honeynets for IIoT and CPS, we note
that Python is the most favored one. Aside from Python, C/C++
and Java are also used by the studies. We believe that this has
a relation with the library support that these languages have
for industrial protocols. In this regard, Modbus-tk, pymodbus
and cpppo EtherNet/IP libraries of Python; libiec61850 and
OpenDNP3 libraries of C/C++ and JAMOD Modbus library of
Java are utilized by the developers in the studies. In addition,
Conpot - the most popular open-source honeypot for IIoT and
CPS is also written in Python.

C. Level of interaction

Honeypots and honeynets proposed for IIoT and CPS envi-
ronments exhibit all possible interaction levels. In this respect,
as Table XII shows, half of the works allow low interaction
capabilities to an attacker. On the other hand, numbers of
medium, high and hybrid interaction honeypots are almost
equal to each other. We had to make a decision on setting
the interaction level for some of the studies since not every
author explicitly stated that information in their proposals. Low
interaction honeypots in IIoT and CPS systems can provide
valuable information in terms of scanning, target protocol,
attack origin and brute-force attempts. On the other hand, it
is possible to see other more advanced attacks and industrial

20

In terms of resource levels of honeypots and honeynets for
IIoT and CPS, we can see that most of the decoy systems use
virtual resources. However, honeypots and honeynets utilizing
real industrial devices and a combination of real and virtual
devices also exist. One of the biggest driving factor for
researchers to propose virtual honeypots may be the high
cost of actual
industrial devices. As several researchers (
[115], [116], [143] and [158]) highlighted, components of an
industrial system such as PLCs have high costs in the order
of tens of thousands of dollars.

E. Scalability

The majority of the honeypots and honeynets for IIoT and
CPS have scalable designs. This is also related to these honey-
pots having virtual resources. As we explained in Section IV,
physical honeypots are difﬁcult to scale as they need more
physical resources, and real industrial environments can have
several industrial devices. For instance, Mashima et al. [143]
noted the number of substations in a power grid in Hong Kong
as 200. In order to propose a realistic decoy system, scalable
honeypot design gains importance.

F. Target IIoT and CPS Application

As target application areas of the existing honeypots, we
can state that more than half of the works targeted ICS
environments. However, considerably fewer decoys exist for
speciﬁc CPS and IIoT applications such as smart grid, water,
gas, and building automation systems. Although the majority
of the studies are for ICS, we would like to note the fact that
the similar industrial devices (e.g., PLCs) can be used both by
ICS and smart infrastructures (e.g., grid, water, gas).

G. Industrial process simulations

In terms of industrial process simulations, we see that
only ﬁve studies considered to employ some form of simu-
lations. For water management CPS environments, Antonioli
et al. [149] used equation of continuity from hydraulics and
Bernoulli’s principle for the trajectories (for drain oreﬁce),
Murillo et al. [150] utilized a nonlinear model with Luenberger
observer, and Bernieri et al. [152] employed linear time in-
variant model for plant simulation. GridPot [142] made use of
Newton-Raphson power ﬂow solver for electrical grid process.
Lastly, for building automation systems, Litchﬁeld et al. [41]
considered Newton’s Law of Cooling for the building process
model.

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

TABLE XII: Classiﬁcation of Honeypots and Honeynets for IIoT and CPS

Work

Year Level of In-

Scalability Resource

Simulated services

Role

Application

CISCO [104]
Digital Bond [105]
Conpot [108]

2004
2006
2013

teraction
Low
Low
Low

Zhao and Qin [110]
DiPot [111]

2017 Medium
2018

Low

CamouﬂageNet [121]
XPOT [112]
HosTaGe [113]

Low

2015
2016 Medium
2016

Low

S7CommTrace [114]
Disso et al. [123]
Honeyd+ [115]
Gallenstein [116]
Abe et al. [117]

2018 Medium
2013 Hybrid
2015 High
Low
2017
Low
2018

Haney et al. [127]
Kuman et al. [128]
Ding et al. [129]
Bodenheim [130]
Piggin et al. [39]
Haney [131]

Low
Low

2014
2017
2018 Medium
2014 High
2016 High
2019 High

Hilt et al. [40]
Berman [132]
Jaromin [133]
Holczer et al. [134]
Serbanescu
et al. [135]
Sim˜oes [136]
Ahn et al. [137]
Belqruch et al. [138]
SHaPe [141]
GridPot [142]
Scott [8]
Mashima et al. [143]

CryPLH [140]
Pliatsios et al. [144]

2020 High
Low
2012
2013
Low
2015 High
Low
2015

Low

Low
Low

2015
2019
2019 Medium
2015
2015 Hybrid
2014
Low
2017 Medium /
High
Low
Low

2018
2019

Mashima et al. [145]

2019

Low

Murillo et al. [150]
Petre et al. [151]
Wilhoit [148]
Antonioli et al. [149]
MimePot [152]

GasPot [155]
Zamiri et al. [35]
HoneyPhy [41]
HoneyIo3 [156]

Low

2018
2019 Medium
2013 Hybrid
2016 High
2019 High

Low

2015
2019 Medium
2016 Hybrid
2018 Hybrid

Du and Wang [157]

2020 Hybrid

level
Virtual
Virtual
Virtual

Virtual
Virtual

Virtual
Virtual
Virtual

Virtual
Hybrid
Hybrid
Virtual
Virtual

Virtual
Virtual
Virtual
Physical
Physical
Hybrid

Hybrid
Virtual
Virtual
Virtual
Virtual

Virtual
Virtual
Virtual
Virtual
Virtual
Virtual
Virtual

Virtual
Hybrid

Virtual

Virtual
Virtual
Hybrid
Virtual
Virtual

Virtual
Virtual
Hybrid
Hybrid

Virtual

Limited
Limited

Limited
X

X
Limited
Limited

Limited

Limited

X

BACnet,

60870-5-104,

Modbus/TCP, Telnet, HTTP, FTP
Modbus/TCP, Telnet, HTTP, FTP, SNMP
EtherNet/IP,
IEC
Guardian AST, Kamstrup, Modbus, S7comm,
HTTP, FTP, SNMP, IPMI, TFTP
S7comm, Modbus, SNMP, HTTP
HTTP, Modbus, Kamstrup, SNMP, IMPI, BAC-
net, Guardian AST, S7comm
N/A
S7comm, SNMP
Modbus, S7comm, HTTPS, FTP, MySQL, SIP,
SSH, SNMP, HTTP, Telnet, SMB and SMT
S7comm
N/A
EtherNet/IP, HTTP
EtherNet/IP. ISO-TSAP, HTTP
Modbus, S7comm, BACNet,
AST, HTTP, SNMP
Modbus/TCP, Telnet, SSH, HTTP(S)
Modbus/TCP
S7comm, SNMP
HTTP, EtherNet/IP, SNMP
SSH, HTTP, RDP
Modbus/TCP, SSH, Telnet, SNMP, HTTP

IPMI, Guardian

S7comm, Omron FINS, EtherNet/IP, VNC
Modbus/TCP
Modbus/TCP, HAP, HTTP
S7comm, SNMP, HTTP(S)
DNP3, IEC-104, Modbus, ICCP, SNMP, TFTP,
XMPP
Modbus, SNMP, FTP
Modbus
SSH
IEC 61850 MMS, HTTP, FTP, SMB
IEC 61850 GOOSE/MMS, Modbus, HTTP
Modbus/TCP, HTTP, SNMP
IEC 60870-5-104, IEC 61850, SSH

HTTP(S), SNMP, Step7 ISO-TSAP
Modbus/TCP

TCP port listener on IEC 61850 MMS, S7comm,
Modbus/TCP, Niagara Fox, EtherNet/IP,
IEC
60870-5-104, DNP3 and BACnet ports
EtherNet/IP
Modbus
Modbus/TCP, HTTP, FTP
EtherNet/IP, SSH, Telnet, VPN
Modbus/TCP

N/A
Veeder-Root ATG
DNP3
IPMI, S7comm, Kamstrup, SNMP, HTTP(S),
Ntopng, SSH
Not identiﬁed

21

Server
Server
Server

Server
Server

Server
Server
Server

Server
Server
Server
Server
Server

Server
Server
Server
Server
Server
Client,
Server
Server
Server
Server
Server
Server

Server
Server
Server
Server
Server
Server
Server

Server
Client,
Server
Server

ICS
ICS
ICS

ICS
ICS

ICS
ICS
ICS

ICS
ICS
ICS
ICS
ICS

ICS
ICS
ICS
ICS
ICS
ICS

ICS
ICS
ICS
ICS
ICS

ICS
ICS
ICS
Smart Grid
Smart Grid
Smart Grid
Smart Grid

Smart Grid
Smart Grid

Smart Grid

Server Water System
Server Water System
Server Water System
Server Water System
Water System
Client,
Server
Server
Server
Server
Server

Gas System
Gas System
Building Auto.
IIoT

Server

IIoT

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

TABLE XIII: Summary of Tools, Implementation, and Attack Types of Honeypots and Honeynets for IIoT and CPS

Work

Tools

Ports

Attack Types

Data Analyzed

N/A

N/A

N/A

Modbus/TCP (502), Telnet (23),
HTTP (80), FTP (21)

Modbus/TCP
SNMP
(161), Telnet (23), HTTP (80),
FTP (21)

(502),

60870-5-104

(2404),
IEC
BACnet
(47808), EtherNet/IP
(44818), Guardian AST (10001),
Kamstrup
50100),
(1025,
Modbus (502), S7comm (102),
HTTP (80), FTP (21), SNMP
(161), IPMI (623), TFTP (69)

N/A

N/A

N/A

CISCO
[104]

Digital
Bond
[105]

Conpot
[108]

N/A

Sebek, Argus, Walleye,
Snort IDS

N/A

Zhao and
Qin [110]

Flask framework, Wire-
shark

DiPot
[111]

N/A

CamouﬂageNet
[121]

Nmap, Kali Linux

Nmap, nfqueue

XPOT
[112]

HosTaGe
[113]

N/A

N/A

N/A

N/A

Wireshark, Bro IDS, snp4j Modbus (502)

Trafﬁc from 244 IP ad-
dresses from 34 countries

and Kamstrup
Modbus
scan, Modbus over-length
packets

Types, sources, requests from IPs

43
days

Access sequences to protocols and
their IPs

6
months

Scanning

N/A

N/A

S7comm handshakes and queries

Multi-stage attacks con-
sisting of different scan-
ning and attack attempts

Attacks
to Modbus, S7comm,
HTTP, Telnet and IP addresses tar-
geting HosTaGe and Conpot

S7CommTrace
[114]

N/A

S7comm (102)

Disso
al. [123]

et

N/A

N/A

N/A

N/A

Honeyd+
[115]

Gallenstein
[116]

Nmap, Zenmap, Wget

EtherNet/IP
HTTP (80)

(44818,

2222),

Scanning

Nmap,
Honeyscore,
STEP7, Wget, Wireshark

Shodan
RSLinx,

EtherNet/IP (44818), ISO-TSAP
(102), HTTP (80)

Scanning

Abe et al.
[117]

Nmap

Modbus (502), S7comm (102),
BACNet
(623),
Guardian AST (10001), HTTP
(80), SNMP (161)

(47808),

IPMI

Havex
Stager, PLC blaster

RAT, Modbus

Indexing in Shodan, valid and in-
valid requests, function coverage
of S7comm, received IP address
diversity

latency,

Link
trafﬁc
counting and connection limiting,
background network trafﬁc

network

Fingerprints of Honeyd+ hosts, er-
ror rates and protocol data rates

Nmap ﬁngerprint similarity, Hon-
eyscore performance, RSLinx and
STEP7 PLC module discovery
performance, comparison of re-
sponses to Wget requests

Behavior
against Havex RAT,
Modbus Stager and PLC blaster
attacks

Haney et
al. [127]

IMUNES,
JAMOD
Library, Snort IDS, Snort
daemon
Sebek,
logger,
Honeywall

Modbus/TCP (502), HTTP (80),
HTTPS (443), Telnet (23), SSH
(22)

Network and port scan,
Modbus packet capture,
injection and out of band
packets

N/A

Kuman et
al. [128]

OSSEC host-based IDS,
PLCScan, Shodan, iptables

Modbus/TCP (502)

Port scans on Modbus and
HTTP protocols

Conpot logs

Ding
al. [129]

et

Nmap, snmpwalk, STEP7
software, PLCscan

S7comm (102)

Scanning

Scanning result

22

Length
of the
Study

N/A

N/A

N/A

N/A

1
month

12
weeks

60
days

N/A

N/A

N/A

N/A

N/A

2
weeks

N/A

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

TABLE XIII: Summary of Tools, Implementation, and Attack Types of Honeypots and Honeynets for IIoT and CPS (Cont.)

Work

Tools

Ports

Attack Types

Data Analyzed

Bodenheim
[130]

Nmap, TCPdump, SSH,
Tshark, Wireshark, Shodan
API, Security Onion Linux,
Snort, netcat

EtherNet/IP (44818), HTTP (80)
SNMP (161)

Scanning

Shodan’s functionality and index-
ing, effect of being indexed on the
received trafﬁc, effect of modify-
ing device service banners

Length
of the
Study

55
days

Piggin et
al. [39]

Google Dorks

N/A

Origin and target protocols of the
attacks

N/A

Scanning, password at-
tack,
execute malicious
program, SSH brute-force,
an attack originated from
TOR network, DoS on the
PLC

Haney
[131]

SecurityOnion,
iptables,
SnortSam, Sebekd, Argus,
IMUNES,
JAMOD,
LabVIEW,
Matlab
Simulink

Modbus/TCP (502), HTTP (80),
SSH (22), SNMP (161)

Modbus
via
Shodan, brute-force login

scanning

The most common usernames and
passwords used for attacks, attack
origins

2
weeks

Hilt et al.
[40]

Tshark, Moloch, Chaos-
reader, VNCLogger, Suri-
cata, Syslog

S7comm (102), Omron FINS
(44818),
(9600), EtherNet/IP
VNC (5900, 5901)

Modbus/TCP (502)

Nmap, Wireshark, SSH,
TCPDump, Syslog, Trian-
gle MicroWorks Protocol
Test Harness

Nmap, Metasploit, NetE-
dit3, DirectSOFT5,
ipta-
bles and netﬁlter modules,
libpcap library, HAP API,
Syslog

Modbus/TCP
(28784), HTTP (80)

(502),

HAP

Brute-force
guessing, ﬁngerprinting

password

Scanning,
malicious
robotic
beaconing attempt

ransomware,
cryptomining,
workstation

Scanning, invalid ICS traf-
ﬁc

Unique IP addresses, amount of
trafﬁc, protocol-speciﬁc trafﬁc and
commands to PLCs, communica-
tion with scanners, VNC screen
recording, attacker’s downloads

tests,

Modbus/TCP trafﬁc
re-
sponse statistics, ﬁngerprint analy-
sis, response to invalid ICS trafﬁc,
logging capabilities

Packet
level accuracy and log-
ging capability, OS ﬁngerpring ac-
curacy, Metasploit attack perfor-
mance, response timing

Step7, Szilu SSL, Mini-
Web, iptables

S7comm (102), HTTP (80),
HTTPS (443), SNMP (161)

Pings, port
scans

scans, SSH

Attack origins, logs

Snort, Matlab, Amazon
EC2 environment

N/A

Modbus-tk,
and
Libpcap
NET-SNMP, VSFTPd

Pymodbus
libraries,

N/A

Scanning

N/A

Modbus trafﬁc (connections, re-
quests, port scans, activity types,
country of origin),
impact of
Shodan listing the devices, attrac-
tiveness of ICS protocols

Resource usage of honeypot, re-
sponse time, reliability

N/A

N/A

Modbus (502)

ARP poisoning

N/A

Kali Linux

SSH (22)

SSH brute force

N/A

Username-password
combinations, password attempts

TCP connection information (con-
nection ID, source and destination
IPs and ports), Dionaea logs

IED switching attack

Physics impact of the attack

N/A

libiec61850

ETSY Skyline
anomaly
modules,
hpfeeds logging

project
detection
GridLab-D,

N/A

N/A

Scott [8]

Tenable Nessus, Splunk
Enterprise, Rsyslog

Modbus/TCP (502), HTTP (80),
SNMP (161), Syslog
(514),
Splunk (8000), SMTP (25)

Scanning attack

Alerts generated by Splunk

N/A

23

Berman
[132]

Jaromin
[133]

Holczer
et
[134]

al.

Serbanescu
et
[135]

al.

Sim˜oes
[136]

Ahn et al.
[137]

Belqruch
et
al.
[138]

SHaPe
[141]

GridPot
[142]

7
months

N/A

N/A

50
days

28
days

N/A

N/A

N/A

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

TABLE XIII: Summary of Tools, Implementation, and Attack Types of Honeypots and Honeynets for IIoT and CPS (Cont.)

Work

Tools

Ports

Attack Types

Data Analyzed

Length
of the
Study

N/A

38
days

N/A

N/A

N/A

28
days

Capture
the
Flag
Com-
peti-
tion

N/A

N/A

N/A

N/A

Mashima
et
al.
[143]

CryPLH
[140]

Pliatsios
et
al. [144]

Mashima
al.
et
[145]

Murillo
et
[150]

al.

VirtualBox, Mininet, Soft-
Grid and POWERWORLD
simulators, SOCAT port
forwarding, OpenMUC

Nessus, Nmap, Backtrack
Linux, Miniweb, NGINX,
SNMPWalk

IEC 60870-5-104 (2404),
61850 (102), SSH (22)

IEC

Nmap scan, Shodan

Fingerprinting, latency, scalability
and cost analysis

ISO-TSAP (102), HTTP (80),
HTTPS (443), SNMP (161)

Attack tests with Back-
track Linux (Kali Linux),
Nmap, nessus

Honeypot logs

Wireshark, Tshark

N/A

N/A

N/A

Wireshark, ELK stack,
Amazon Cloud

IEC 61850 MMS and S7comm
(102), Modbus/TCP (502), Ni-
agara Fox (1911, 4911), Eth-
erNet/IP (ENIP) (2222, 44818),
IEC 60870-5-104 (2404), DNP3
(19999, 20000), BACnet (47808)

Mininet, MiniCPS, Odeint
solver

N/A

SYN-ﬂooding DoS, scan-
ning

Access trends, protocol speciﬁc
attempts, correlation of honey-
pots’ data, attack origin dynamics

6
months

Bias injection attack

Tank levels and plant behavior
without attack, with attack and
defense

Unauthorized access

Database entries

Petre
al. [151]

et

Node-RED, Softing OPC
UA Client, SQLite

N/A

Wilhoit [148],
[153]

Snort,
Amazon EC2

tcpdump, Pastebin,

Antonioli
al.
et
[149]

Mininet, MiniCPS, ocserv
tc
VPN,
link
cpppo
EtherNet/IP emulation

sshd,
shaping,

telnetd,

Modbus/TCP (502), HTTP (80),
FTP (21)

Ethernet/IP (44818), HTTP (80),
SSH (22), Telnet (23)

MimePot [152]Mininet, Scapy

N/A

Scanning,
spearphishing,
unauthorized access and
modiﬁcation,
Modbus
trafﬁc modiﬁcation, CPU
fan speed modiﬁcation on
the water pump, malware
exploitation

DoS, Man in the Middle,
port scan, service enumer-
ation, physical process at-
tacks (i.e., tank overﬂow)

Man in the Middle and
integrity attack

GasPot
[155]

N/A

Zamiri et
al. [35]

Nmap

N/A

Reconnaissance, DDoS

Veeder-Root ATG (10001)

N/A

N/A

Attack types and origins

Network metrics (address, packet
loss, delay, bandwidth, topology,
protocols, etc.) and physical met-
rics (realistic mathematical model,
sensor and actuator operations,
etc.)

Tank water levels, Mime Estima-
tion and Control status by time,
water pump status, ﬂows between
tanks

Connection attempts, commands,
attack origins

N/A

Heating and cooling curve from
both physical system and the pro-
cess model

DDoS attacks, SYN Flood
attack, FTP ﬂow

Protocols, packets per port, packet
characteristics

N/A

Reconnaissance attacks

Protocols, packets per port, pack-
ets characteristics

N/A

HoneyPhy
[41]

OpenDNP3 library, Lab-
VIEW

N/A

and

SDN testbed

N/A

Du
Wang
[157]

HoneyIo3
[156]

Shodan, Nmap

IPMI
(623), S7comm (102),
Kamstrup (1025), SNMP (161),
HTTP
(443),
(80), HTTPS
ntopng (3000), SSH (9002)

24

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

H. Simulated services

Honeypots and honeynets for IIoT and CPS support a
wide variety of protocols and services that are both speciﬁc
and not speciﬁc to industrial environments. The protocols and
services supported by the honeypots and honeynets are shown
in Table XII while ports that are exposed for such protocols in
the honeypots are outlined in Table XIII. When we consider
the protocols, we can see that Modbus, HTTP, SNMP, and
S7comm are the most popular protocols among the studies.
Our ﬁndings are also validated by a number of researchers [3],
[127], [135], [144], [151], [159], [160] who cite Modbus as the
most widely used industrial protocol. Popularity of industrial
protocols along with number of honeypots supporting them
can be expressed as follows: Modbus (22), S7comm (12),
EtherNet/IP (8), IEC 60870-5-104 (4), BACnet (4), Kam-
strup (4), DNP3 (3), Guardian AST (3), IEC 51850 (3),
and ISOTSAP (2). The popularity of non-industrial protocols,
HTTP and SNMP are very reasonable. HTTP is used as the
interface of HMIs of industrial systems [8], [149] and also
it enables the remote conﬁguration of industrial components
such as PLCs [113], [134]. For these reasons, it is stated
as the target of scanning activities performed by malicious
entities [146]. SNMP on the other hand is used for monitoring
and management purposes in industrial environments [115],
[134].

I. Availability of open-source honeypot and honeynet solu-
tions

There exist eight honeypot and honeynet studies that
provide their implementation openly. In this respect, CISCO
SCADA HoneyNet [104] source code is still available. How-
ever, the last shared version was in 2015. Unfortunately, Digital
Bond’s SCADA Honeynet [105] is not reachable right now.
Conpot on the other hand, is open-source and is still being
actively maintained. Considering the rest of the honeypot and
honeynet studies, only the honeypot of Zamiri et al. [35] is ac-
tively maintained. However, their study was performed in 2019
and it is not known if they will continue to actively maintain
it. The implementations of GridPot [142] and SHaPe [141] are
still available, but their last update was in 2015. The last update
for GasPot [155] was in 2016, and honeypot-like testbed of
Murillo et al. [150] was maintained in 2018.

J. Most commonly used tools

The most commonly used tool for IIoT and CPS hon-
eypot and honeynet studies is Nmap, which is followed by
Wireshark, Snort IDS, Shodan tools, Mininet, iptables, tshark,
TCPDUMP, and syslog. Researchers used Nmap to obtain
ﬁngerprints of their honeypots and to indetify the exposed
ports. Wireshark was used for trafﬁc capture and analysis.
Snort IDS is used for attacker control attempts especially in
honeywall conﬁgurations. Shodan tools were used to ﬁnd out
indexing information, honeypot’s ﬁngerprint from Shodan’s
point of view, and also to ﬁnd out if Shodan detects the decoy
system as a honeypot or not.

K. Most Common Attacks

The most commonly detected/tested attacks in IIoT and
CPS honeypots/honeynets are scanning attacks. Majority of

the studies detected/tested scanning attacks to the IIoT and
CPS environments. In addition to DoS/DDoS, SSH, brute-
force, and Man-in-the-Middle attacks were also detected/tested
in the proposed honeypots and honeynets. Although less
common than the mentioned attacks, ransomware, malicious
cryptocurrency mining, malware and ICS speciﬁc attacks such
as HAVEX RAT, PLC Blaster, and tank overﬂow attacks were
also detected/tested in the proposed systems.

IX. LESSONS LEARNED AND OPEN ISSUES

Considering the honeypot and honeynets for IoT, IIoT, and
CPS environments, we believe that it is crucial to stress the
importance of key points. This is valuable to interpret the state-
of-the-art and to motivate for further research and practice.

A. Lessons Learned

Any honeypot/honeynet developer and researcher for IoT,
IIoT, and CPS needs to consider a few key factors at the very
beginning of his/her work. The key factors that should be taken
into account are target application area, purpose of the hon-
eypot/honeynet, cost, deployment location, intended level of
interaction with the attacker, resource level, services that will
be provided, simulated, or emulated, and their realistic service
to the attackers, tools that will be used, ﬁngerprintability and
indexing, and liability issues that may come up.

Target Application Area Selection:
IIoT and CPS envi-
ronments have their own characteristics which may affect
the entire honeypot/honeynet design. Devices, communication
channel characteristics, protocols, trafﬁc rates, application QoS
requirements, and many other factors can be different for each
unique application. CPS and IIoT devices have quite different
characteristics from regular IoT devices. In addition, they work
with industrial protocols which are not used in traditional ICT
or IoT environments. Such industrial devices have life-times
in the order of decades and work with real-time constraints
which strictly require them to work without interruptions [9],
infrastructures of nations are controlled by
[134]. Critical
such industrial devices. While typical IoT applications do not
have any physical processes to be continuously monitored and
controlled, it is very common for IIoT and CPS applications.
For these reasons, it is extremely important to determine the
target application and its characteristics.

Purpose of the Honeypot/Honeynet: The purpose of a
honeypot or honeynet signiﬁcantly affects the measures that
need to be taken to ensure that attacks on the honeynet do
not compromise the infrastructure on which it is implemented.
In a research environment, this can be done by isolating the
honeynet system. For example, by implementing it in a DMZ.
However, if production honeypots are to be deployed in IIoT
and CPS environments where industrial devices monitor and
control critical plant processes, then extra care has to be given
to the decoy system design. Such production honeypots in
industrial environments need to ensure that they cannot be
compromised by attackers, as well as ensure that they do
not interfere with the communication and control processes
(i.e., operational resources) of the existing industrial devices.
In addition, one has to note that honeypots and honeynets do
not stop attacks [8]. For this reason, the alerts or logs created
by them have to be considered by administrators.

25

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

Deployment Location: While deployment location can have
an important effect on honeypot activity, only twelve of the
reviewed studies stated their deployment locations. Two CPS
studies [130], [134] deployed their honeypots within the IP
range of universities, which may call the attention of attackers
who check the IP address spaces of their targets. Another
two CPS studies [139], [145] and three IoT studies [74],
[88], [93] chose cloud environments as deployment targets.
Such an approach would provide a global view of attacks to
honeypot/honeynet owners and also may be more attractive
to attackers than the university option. However, attackers can
still ﬁnd out that the target system operates within the IP range
of a cloud provider. Additionally, two CPS studies [40], [155]
and three IoT studies [63], [86], [92] use public IP addresses
which is the better option. In addition to this, Guarnizo [92]
in terms of
identiﬁed that geographical
country or city of deployment, or at least the location shown
to attackers, is an important consideration. This is because
attackers might seek to attack devices in certain cities if they
are looking for a point to start targeted attacks or if they have
an interest in reselling IPs after they are infected.

location selection,

Cost: Cost is a crucial consideration in developing honeypots
and honeynets. Setting up a honeypot or honeynet can be
very expensive if physical resources and closed source tools
are used instead of virtual resources and open source tools.
Also, it is important to note that the PLCs, IEDs, RTUs, and
RIOs used in industrial applications are considerably more
expensive than Commercial of-the-shelf (COTS) IoT devices.
In addition, complexity of a honeypot, especially a honeynet,
can be another contributing factor for the cost of the system.
Complexity is directly proportional to the level of interaction
provided and also the number of services/protocols supported.
As the interaction level and number of supported services
increase for honeypots and honeynets, higher ﬁdelity data in
high volume is collected, which requires more resources to
store and process. Moreover, deployment locations can have an
effect on the cost of the system. To be more speciﬁc, although
deployment of a honeypot or a honeynet
in a university
IP address space can be cost efﬁcient for research, it can
easily call
the attention of adversaries. Honeypot/honeynet
deployments in cloud environments would be signiﬁcantly
more costly compared to university environments. However,
attackers can still determine that the IP addresses are in the
cloud provider space. The third option would be renting private
IP addresses to avoid suspicion by attackers, but such an option
can be more costly than the cloud option. For these reasons,
honeypot/honeynet developers and researchers need to consider
how resource and interaction levels as well as deployment
environment and complexity affect the cost.

Level of Interaction Considerations: The level of interaction
of a honeypot/honeynet affects many different aspects, as
explained in Section IV. Considering the existing honeypots
and honeynets for IoT, IIoT, and CPS, almost every possi-
ble level of interaction choice can be seen as reviewed in
Section VI and Section VIII. However, high interaction is
needed in order to identify complex attacks that may target
IoT, IIoT, and CPS devices and understand possible effects
on industrial processes and critical infrastructures. Although
COTS IoT devices are more affordable, industrial devices in
the order of thousands of dollars can be a signiﬁcant issue
to consider. Therefore, resource level choice and realistic

simulation/emulation become important considerations. These
are further discussed in the following categories.

Resource Level Selection: The question of whether real,
simulated, or both types of devices are to be used in hon-
eypots/honeynets for IoT, IIoT, and CPS is quite a vital one.
Real devices can act as high-interaction honeypots and provide
high ﬁdelity information. In addition, they would be almost
impossible to be detected as a honeypot by outsiders. However,
as explained earlier, costs of real devices can change based
on the target application area and constructing a realistic
honeynet with a realistic number of industrial devices may
cost a fortune. These important factors motivated researchers
and developers to design honeypots/honeynets with virtual
components. Virtualization enables scalability, heterogeneity,
easy maintenance and cost-effective deployment of IoT, IIoT,
and CPS honeypots. In this respect, Dang et al. [88] found
that approximately 92.1% of malware-based attacks target
multiple IoT device architectures and emphasized the need
for a virtual IoT honeypot solution. At the same time, they
identiﬁed that virtual honeypots attracted 37% fewer suspicious
connections and 39% fewer attacks than physical honeypots.
Also, the variety of attacks virtual honeypots captured were
more than with physical honeypots. Dang et al. [88] also
pointed out that a virtual honeypot costs 12.5x less to maintain
than a physical honeypot. These factors should be weighed in
considering honeypot/honeynet design. Balancing the beneﬁts
of both physical and virtual resources in a hybrid solution is
an important consideration. In addition to this, the choice of
which model of devices to select, either real or simulated, can
play a factor in attracting attackers. Guarnizo [92] identiﬁed
that models with known vulnerabilities tend to be attacked
more frequently.

Choice of Services to Provide/Simulate and Realism:
Choice of services to provide or simulate, and ensuring realism
in such services are very critical factors in honeypot/honeynet
design. These considerations get even more important for IIoT
and CPS systems. Which services will be provided? Is it
logical to support all of the protocols and services in the
target application area? If not, how to choose among the set
of protocols/services? Scott [8] pointed out that honeypots
and honeynets should simulate only the services that
the
mimicked device would usually accommodate. If the mimicked
device does not have a certain service or does not support
it, but
then attackers may realise that
they are interacting with a decoy system. After determining
the services/protocols to be supported, then comes another
important aspect: realism.

the honeypot does,

One of the principal considerations when deploying a
honeypot or honeynet system for IoT, IIoT, or CPS is how
to simulate a real system effectively in order to avoid hackers
and search engines from identifying that they are interacting
with a decoy system. This is vital for the honeypot system
to be able to attract attackers and to gather as much infor-
mation as possible from their interactions. In order to avoid
detection more effectively for a honeynet deployed in an IoT
environment, Surnin et al. [33] recommended the following: a
limited number of services should be run to simulate a more
realistic environment, ping command host requests should
yield an existing host, ﬁles created by attackers should not be
deleted, commands for utilities should return a list of running

26

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

processes, no hardcoded values should be used, simulated
Linux utilities should have full functionality from the origin,
and attacker ﬁle requests should be sent to a sandbox with
a speciﬁed delay before checking them on external services
such as VirusTotal. Zamiri-Gourabi et al. [35] pointed out
the fact that default hardcoded conﬁgurations, missing features
of the simulated services or protocols, unusual or unrealistic
behaviors, ﬁngerprintability of the hosting platform and re-
sponse times can be the possible ﬁngerprints of honeypots and
honeynets. Simulations of plant processes in a realistic way
comes to the scene for IIoT and CPS honeypots/honeynets.
Unfortunately, only a small portion of honeypots/honeynets
considered this vital issue with IIoT and CPS honeypots.With
IoT honeypots, this factor was considered by various studies.
In fact, the most commonly used tools for IoT honeypot and
honeynet research were all tools which were used to check
the available services, realism in responses, including response
times, and other factors that affect ﬁngerprintability, which will
be discussed in the following sections.

Choice of Tools: A honeypot or honeynet designer should
consider the deployment area or target application area char-
acteristics when he/she is choosing the tools such as scanners.
Not every tool may support all of the IoT, IIoT, and CPS
applications, their corresponding protocols and services. In
addition, tools that also support vulnerability checks should be
considered to be employed [8]. A designer should also consider
how to pair their honeypot or honeynet with tools that will
best complement the honeynet for effective attack mitigation.
While medium and high interaction honeypots enable more
interactivity for attackers, attackers may have tools to check
whether they are interacting with a virtual environment and
whether their activities are being recorded/logged. Tools such
as Sebek are used by researchers in order to seamlessly log
the activities of the attackers.

Appearance on the Search Engines and Fingerprintability:
One of the most important factors in honeypot/honeynet design
is ensuring appearance on the search engines while not being
ﬁngerprinted as a decoy system. For this reason, honey-
pot/honeynet owners have to monitor IoT search engines which
identify and detect devices and honeypots on the Internet, such
as Shodan. Different views exist in the literature whether being
indexed by such search engines has an effect on the attacks
to be received. For example, Guarnizo [92] identiﬁed that the
number of attacks on a device increase signiﬁcantly in the
ﬁrst few weeks after they are listed on Shodan. Nevertheless,
such indexing services can make the jobs of attackers easier by
pointing out Internet-connected ready-to-attack targets. Being
indexed by such search engines veriﬁes the accessibility of
the honeypot/honeynet system. Being listed as a real system
rather than a honeypot/honeynet is an achievement that helps
honeypot owners to reach their ultimate goal.

Comparison of IoT, IIoT, and CPS Honeypots/Honeynets:
Honeypot and honeynet research for IoT, IIoT, and CPS
environments is an important research area. Although we sum-
marized the studies and provided taxonomies in the previous
sections, comparison of the decoy systems for IoT, IIoT, and
CPS, and highlighting their similarities and differences can be
very crucial. The ﬁrst signiﬁcant difference arises from the
supported services. While the IoT decoys considered mostly
support Telnet, SSH, and HTTP which are not IoT-speciﬁc,

the CPS decoys considered mostly support industrial protocols
such as Modbus, S7comm, EtherNet/IP, and non industry-
speciﬁc protocols such HTTP and SNMP. Since there are only
two decoys for IIoT and only one of them is disclosing its
services, we can see that IIoT decoys stay in the intermediary
position in this regard, supporting both industrial and non-
industrial protocols. The second difference arises from the
process simulations. While some CPS decoys employ simula-
tions of industrial processes for ICS plants, water management,
electrical grid, and building HVAC systems, we do not see
such process simulations in the proposed IoT decoys. The
third difference arises from the interaction level of proposed
honeypots and honeynets. While the majority of the decoys
proposed for IoT are medium interaction decoys (10 studies),
the majority of the decoys for CPS are low interaction (16
studies). The cost of physical ICS devices and difﬁculty of
realistic process simulations play an important role in the
interaction level choice of CPS honeypots and honeynets.
Considering the similarities, we see that decoys with virtual
resources and server roles are common between IoT, IIoT, and
CPS environments.
Control and Liability: When deploying a honeypot or
honeynet for IoT, IIoT, and CPS environments, control and
liability issues are the aspects that are greatly overlooked, but
designers should always consider. The greater the level of in-
teraction a honeypot allows, the greater the risk that it could be
compromised and used by attackers for harming other systems
in the network or even launching attacks on other networks.
Scott [8] advised to be familiar with laws before deployment
of honeypots since honeypots are interpreted as entrapment
by jurisdictions in some places. Haney [131] emphasized the
importance of taking liability and legal issues into account
and putting data control as a ﬁrst priority, even if this means
data capture may be affected. Haney proposed setting up both
automated as well as manual data control mechanisms, with
at least two protection mechanisms to always have a second
option if one data control method fails. Sokol [26] highlighted
that a honeynet should contain the following parts in order to
address security, data control, and liability issues: a ﬁrewall
with only the necessary network ports opened, a dynamic
(re)connection mechanism to determine if a connection is
trusted and can be allowed, a testbed for analysis, an emulated
private virtual network to restrict attackers, and a control center
to monitor connections and respond to issues quickly.

Improving Security of IoT, IIoT, and CPS Devices: The
information gathered from research with honeypots and hon-
eynets can lead to innovative ways to improve the security
of IoT devices despite their constraints. One example of this
is the proposal by Dang et al. [88] of a series of measures
called IoTCheck to increase the security of IoT devices, which
include asking whether the IoT device has a unique strong
password, whether the default system user is a non-root user,
and whether there are unnecessary components on the devices
which can be eliminated. The same authors also suggest for
manufacturers to disable shell commands that are enabled by
default on Linux-based IoT devices but are not necessary, as
these are used for attacks.

B. Open Issues

Honeypots and honeynets for IoT, IIoT, and CPS have
been a very active ﬁeld of research during the last decade.

27

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

We studied 79 honeypots/honeynets in greater detail in this
study. However, there are still open issues which need to be
addressed by researchers.

Emerging Technologies/Domains: In terms of decoy systems
for IoT, we see that there are honeypots/honeynets for Smart
Home, but not for emerging domains or technologies such as
wearable devices, medical devices, and smart city. In terms
of decoy systems for IIoT and CPS, we see that there are
honeypots/honeynets for general ICS, smart grid, water, gas
and building automation systems. However, we do not see such
decoys for other IIoT and CPS applications such as smart city,
transportation, nuclear plants, medical devices. As smart med-
ical devices in modern healthcare applications are becoming
more prevalent and are threatened by various attacks [161]–
[163], decoy systems for modern healthcare applications are
needed. In addition, to the best of our knowledge, there is
only one honeypot system for building automation systems.
Considering the rapid increase of notorious ransomware at-
tacks [164], cryptocurrency mining attacks [165], [166], and
attacks to enterprise IoT systems [167]–[170], we believe that
further research is needed which may enable us to protect
smart buildings from ransomware attacks. We would like to
note that building honeypots and honeynets for the unexplored
IoT, IIoT and CPS applications may require realistic process
models (e.g., patient vitals models, vehicle operation models,
nuclear process models, etc.) in case virtual or hybrid decoy
systems are targeted.

Unexplored Protocols: Existing IoT, IIoT, and CPS honey-
pots/honeynets support a wide range of ICT, IoT, and indus-
trial protocols. Various IoT honeypots emulate full devices.
However, one cannot claim that the state-of-the-art honey-
pot/honeynet research considered every protocol or service.
In addition to this, very few current studies focus on IoT
speciﬁc protocols. There are also protocols and services that
still need to be addressed by honeypot research. For instance,
we did not ﬁnd any study that supports Highway Address-
able Remote Transducer (HART) and WirelessHART [171]
industrial protocols. In addition, Enterprise IoT environments
can employ various proprietary communication protocols that
rely on security through obscurity [170]. For this reason,
decoy designs for such type of proprietary solutions are
needed. Researching unexplored protocols and services may
provide valuable information for honeypot/honeynet research
and practice. A potential solution to unexplored protocols for
IoT, IIoT, and CPS honeypots/honeynets could be extending
open source honeypots and honeynets such as Conpot, Honeyd,
Dionaea, Kippo, etc. for the unexplored protocols. Although
open source libraries for the unexplored well-known protocols
can be found, researchers would have to perform reverse
engineering for the proprietary communication protocols.

Emerging Platforms: In the recent years, several platforms
were proposed/developed by both researchers and vendors for
the management of the IoT devices [172]. In this regard, plat-
forms such as openHAB, Samsung SmartThings, thingworx,
Amazon AWS IoT, IBM Watson IoT, Apple HomeKit, etc.
emerged for IoT applications. Such platforms have different
characteristics in terms of supported IoT devices, communi-
cation protocols and network topologies, data processing and
event handling approaches, and security. Although there exist
decoy systems for generic IoT applications, one does not see

any studies focusing on honeypot and honeynet design for the
mentioned emerging IoT platforms. Since popularity of such
platforms is increasing in recent years, IoT applications that
are built on top of such platforms can be sweet spots for the
adversaries. Therefore, there is a need for honeypot/honeynet
research for the emerging IoT platforms. In order to propose
novel decoy systems for the emerging platforms, researchers
can beneﬁt from the existing IoT honeypot/honeynet research
and extend the open source IoT decoys.

Optimized Deployment Location: Honeypots and honeynets
proposed for IoT, IIoT, and CPS employed various deployment
locations (i.e., university, cloud, private locations) as explained
in the previous sections. Each deployment location option has
its own beneﬁts and pitfalls in terms of ﬁngerprintability [21],
[173], suitability for IoT, IIoT, or CPS application, complexity,
and cost. Although a few studies investigated how a limited set
of deploy locations attract attackers, one does not see any study
in the literature that aims to optimize the deployment location
for the decoy system with respect to a set of constraints. We
believe that, this is an important gap in the honeypot/honeynet
research and there is a need for extensive analysis and novel
frameworks in order to optimize deployment location deci-
sions. Although this problem is hard to tackle, researchers
can employ relaxation strategies in order to approximate the
optimal deployment location solution for the IoT, IIoT, and
CPS decoys.

Remote Management: Several tools can be utilized to manage
honeypots/honeynets locally or remotely. While the decoys
with virtual resources can be managed locally or remotely
without much efforts, the decoys with physical resources may
require researchers to be physically present in such locations
for maintenance purposes. However, the Covid-19 pandemic
caused lockdowns all around the world which forced re-
searchers to perform their tasks remotely. Extraordinary times
like the current pandemic, natural hazards, etc. can cause
similar situations that can force people to remotely manage
their decoy systems. We believe that researchers have to
consider such conditions while designing and deploying their
decoy systems for IoT, IIoT, and CPS. Remote management
of decoy systems require employment of secure tools and
secure conﬁgurations. However, vulnerabilities of such tools
that are considered to be secure can be found, as in the case of
SolarWinds [174], which require continuous efforts to check
for vulnerabilities and patch.

Anti-Detection Mechanisms: Honeypots and honeynets that
are using virtual resources have been widely used in IoT,
IIoT, and CPS environments. Such an approach has several
advantages as discussed in the previous section. However, from
the malware research domain we know that virtual environment
detection techniques are frequently used by malicious software
developers. When we checked the honeypot/honeynet studies
for IoT, IIoT, and CPS that use virtual resources, we did not
see any study which considers this important issue. In addition,
the analysis parts of the studies did not mention detecting an
attacker which uses such techniques. Although research did
not observe the existence of a sample case, we think that
attackers will be using such methods in the near future. For this
reason, future honeypots and honeynets for IoT, IIoT, and CPS
should consider to employ anti-detection mechanisms in their
medium/high interaction virtual decoy systems. Researchers

28

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

in this regard can beneﬁt from existing anti-detection research
from the malware analysis domain such as hiding the artifacts
regarding the analysis environment, moving analysis logic to
lower levels such as hypervisors or bare-metal, etc. [175].

Vulnerabilities of Industrial Devices:
IoT, IIoT, and CPS
environments consist of several devices produced by different
vendors. Vulnerabilities with device ﬁrmware, OS and other
software are often found and listed in vulnerability databases
such as Common Vulnerabilities and Exposures (CVE) [176].
As explained earlier, devices with such vulnerabilities attract
the attackers and stand as vulnerable targets to compromise.
Considering the honeypots and honeynets, we see that there
exist studies which take such vulnerabilities into account when
designing honeypots. However, we did not encounter any
proposal for IIoT and CPS that considers vulnerabilities of
industrial devices. We believe that a research gap exists in
the literature in regards to whether attackers really pay atten-
tion to industrial device vulnerabilities or not when choosing
targets. A potential way to address this open problem could
be deploying honeypots for IIoT and CPS environments that
advertise both vulnerable and patched versions of ICS device
ﬁrmware or management software. In this way, it would be
possible to understand if adversaries pay attention to disclosed
vulnerabilities when choosing their targets.

Insider Attacks: The target users for IoT, IIoT, and CPS are
very diverse and have very different skill levels for deploying
honeypot/honeynet systems. However, none of the IoT research
studies consider how the systems being proposed could be
implemented on a wider scale in the future, taking into account
the need for simple deployment. In addition to this, none
of the current research places focus on attacks initiated and
carried out from inside the network. These types of attacks
could be carried out by disgruntled employees or for corporate
espionage. However, researchers may not deploy physical or
virtual honeypots on a network in a straightforward way since
insiders may have a chance to reach the decoys physically or
virtually. We believe that virtualization technologies such as
Network Function Virtualization (NFV) and containers, and
SDN technologies can be utilized to develop moving target
defense-like honeypot solutions for insider attackers.

Machine Learning: Another open issue is the employment of
ML and AI techniques for honeypot design. Considering the
studies, we see that ML techniques have been employed by a
limited number of honeypot/honeynet works for conﬁguration
and data analysis purposes. Although eight studies ( [55]–
[57], [64], [66], [67], [70], [72]) employed ML for IoT
honeypots/honeynets, we see that only one study [111] used
ML techniques for IIoT and CPS honeypots. We believe that
future IoT, IIoT, and CPS honeypots and honeynets can beneﬁt
from ML techniques to propose smarter decoy systems that
can i) adapt themselves based on the actions of attackers,
ii) discriminate known attacks from new attacks thus enable
researchers to focus more on novel threats, and iii) increase
the efﬁciency and prevalence of honeypots and honeynets.

Discrimination of Benign Decoy Trafﬁc: Honeypots and
honeynets are traditionally assumed to receive only malicious
trafﬁc which are in fact helpful for the existing IDS and IPS
elements in the network to increase their true positive rates.
However, IoT honeypots and honeynets employing physical
IoT devices can receive benign trafﬁc from vendors. For

instance smart home devices provided by Google, Apple, Sam-
sung, and Amazon can receive benign trafﬁc from their vendors
with application-speciﬁc motivations (e.g., cloud connectivity,
health check, updates, etc.). Such benign trafﬁc originating
from device vendors targeting the decoy system, as well as the
trafﬁc generated by benign bots such as Shodan and Censys to
index the Internet-connected devices, break the aforementioned
assumption of incoming trafﬁc to decoy systems. For this
reason, researchers have to take such benign trafﬁc into account
while analyzing the decoy trafﬁc. We believe that IP address
lookup for the trafﬁc sources can provide information on the
benign origins of the decoy trafﬁc. In addition, analysis of
Ferretti et al. [120] on the scanning patterns of legitimate
scanners such as Shodan can give clues to researchers on
discriminating legitimate trafﬁc.

Production Decoys: Considering the reviewed honeypots and
honeynets for IoT, IIoT, and CPS environments, we see that
the majority of the reviewed works are research honeypots.
Although research honeypots are important to understand the
attacks and new tactics of attackers,
they do not actively
participate in securing an IoT, IIoT, or CPS environment. For
this reason, more production honeypots are needed that can
actively participate in securing IoT, IIoT, and CPS networks.
Efforts in combining honeypots/honeynets with IDS solutions
are noteworthy in this regard. Researchers can employ open
source IDS solutions such as Snort, Zeek, Suricata etc., mal-
ware analysis platforms such as Cuckoo, and next generation
networking technologies such as SDN to propose novel decoy
solutions for IoT, IIoT, and CPS environments.

X. CONCLUSION

In this paper, we provided a comprehensive survey of
honeypots and honeynets for IoT, IIoT, and CPS environments.
We provided a taxonomy of honeypots and honeynets based
on purpose, role,
level of interaction, scalability, resource
level, availability of source code and target IoT, IIoT, or
CPS application. In addition, we analyzed the existing hon-
eypots and honeynets extensively and extracted the common
characteristics of state-of-the-art honeypots and honeynets for
IoT, IIoT, and CPS. Moreover, we outlined and discussed
the key design factors for honeypots and honeynets for IoT,
IIoT, and CPS applications. We also summarized the open
research problems that can be addressed by future honeypot
and honeynet studies. As future work, we are planning to
propose novel honeypot/honeynet systems for IoT and CPS
environments that build upon this survey.

ACKNOWLEDGEMENTS

This work is partially supported by the US National Sci-
ence Foundation Awards: NSF-CAREER-CNS-1453647 and
NSF-1663051. The views expressed are those of the authors
only, not of the funding agencies.

REFERENCES

[1] E. Sisinni, A. Saifullah, S. Han, U. Jennehag, and M. Gidlund, “In-
dustrial internet of things: Challenges, opportunities, and directions,”
IEEE Trans. on Ind. Inf., vol. 14, no. 11, pp. 4724–4734, 2018.
[2] B. Bordel, R. Alcarria, T. Robles, and D. Mart´ın, “Cyber–physical
systems: Extending pervasive sensing from control
theory to the
internet of things,” Pervasive Mobile Comput., vol. 40, pp. 156 – 184,
2017.

29

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

[3] A. Humayed, J. Lin, F. Li, and B. Luo, “Cyber-physical systems
security—a survey,” IEEE Internet of Things J., vol. 4, no. 6, pp.
1802–1831, Dec 2017.

[4] C. Greer, M. Burns, D. Wollman, and E. Griffor, “Cyber-physical
systems and internet of things,” NIST, Tech. Rep., March 2019.
[Online]. Available: https://doi.org/10.6028/NIST.SP.1900-202

[5]

I. Makhdoom, M. Abolhasan, J. Lipman, R. P. Liu, and W. Ni,
“Anatomy of threats to the internet of things,” IEEE Communications
Surveys Tutorials, vol. 21, no. 2, pp. 1636–1675, 2019.

[6] F. Meneghello, M. Calore, D. Zucchetto, M. Polese, and A. Zanella,
“Iot: Internet of threats? a survey of practical security vulnerabilities
in real iot devices,” IEEE Internet of Things J., vol. 6, no. 5, pp.
8182–8201, Oct 2019.

[7] N. Neshenko, E. Bou-Harb, J. Crichigno, G. Kaddoum, and N. Ghani,
“Demystifying iot security: An exhaustive survey on iot vulnerabilities
and a ﬁrst empirical look on internet-scale iot exploitations,” IEEE
Communications Surveys Tutorials, vol. 21, no. 3, pp. 2702–2733,
2019.

Scott,
“Designing
SCADA Network,”

for
[8] C.
a
[Online].
Available: https://www.sans.org/reading-room/whitepapers/detection/
designing-implementing-honeypot-scada-network-35252

Implementing
2014, White

a Honeypot

and
June

Paper.

[9] P. Sim˜oes, T. Cruz, J. Gomes, and E. Monteiro, “On the use of
honeypots for detecting cyber attacks on industrial control networks,”
in Proc. 12th Eur. Conf. on Inf. Warfare and Secur. (ECIW 2013),
2013, pp. 263–270.

[10] Z. Yu, Z. Kaplan, Q. Yan, and N. Zhang, “Security and privacy in
the emerging cyber-physical world: A survey,” IEEE Communications
Surveys Tutorials, pp. 1–1, 2021.

[11]

J. Lopez, L. Babun, H. Aksu, and S. Uluagac, “A survey on function
and system call hooking approaches,” Journal of Hardware and
Systems Security, vol. 1, 06 2017.

[12] W. Fan, Z. Du, D. Fern´andez, and V. A. Villagr´a, “Enabling an
anatomic view to investigate honeypot systems: A survey,” IEEE Syst.
J., vol. 12, no. 4, pp. 3906–3919, Dec 2018.

[13] L. Spitzner, “The value of honeypots, part one:deﬁnitions and val-
ues of honeypots,” http://www.symantec.com/connect/articles/value-
honeypots-part-onedeﬁnitions-and-values-honeypots/, Oct 2001, [On-
line; accessed 14-Apr-2020].

[14] P. Kumar and R. Verma, “A review on recent advances & future trends
of security in honeypot,” Int. J. of Adv. Res. Computer Science, vol. 8,
no. 3, pp. 1108–1113, Mar-Apr 2017.
I. Butun, P. ¨Osterberg, and H. Song, “Security of the internet of things:
Vulnerabilities, attacks, and countermeasures,” IEEE Communications
Surveys Tutorials, vol. 22, no. 1, pp. 616–644, 2020.

[15]

[16] E. Lee, Y.-D. Seo, S.-R. Oh, and Y.-G. Kim, “A survey on standards
for interoperability and security in the internet of things,” IEEE
Communications Surveys Tutorials, vol. 23, no. 2, pp. 1020–1047,
2021.

[17]

J. Granjal, E. Monteiro, and J. S´a Silva, “Security for the internet
of things: A survey of existing protocols and open research issues,”
IEEE Communications Surveys Tutorials, vol. 17, no. 3, pp. 1294–
1312, 2015.

[18] A. K. Sikder, G. Petracca, H. Aksu, T. Jaeger, and A. S. Uluagac,
“A survey on sensor-based threats and attacks to smart devices and
applications,” IEEE Communications Surveys Tutorials, vol. 23, no. 2,
pp. 1125–1159, 2021.

[19] M. A. Al-Garadi, A. Mohamed, A. K. Al-Ali, X. Du, I. Ali, and
M. Guizani, “A survey of machine and deep learning methods for
internet of things (iot) security,” IEEE Communications Surveys Tuto-
rials, vol. 22, no. 3, pp. 1646–1685, 2020.

[20] M. H. Cintuglu, O. A. Mohammed, K. Akkaya, and A. S. Uluagac,
“A survey on smart grid cyber-physical system testbeds,” IEEE Com-
munications Surveys Tutorials, vol. 19, no. 1, pp. 446–464, 2017.

[21] L. Babun, H. Aksu, L. Ryan, K. Akkaya, E. Bentley, and A.S.Uluagac,
“Z-iot: Passive device-class ﬁngerprinting of zigbee and z-wave iot
devices,” in 2020 IEEE Int. Conf. Commun. (ICC).
IEEE, 2020, pp.
1–7.

[22] W. Fan, Z. Du, and D. Fern´andez, “Taxonomy of honeynet solutions,”

in 2015 SAI Intelligent Systems Conference (IntelliSys), Nov 2015, pp.
1002–1009.

[23] A. Mairh, D. Barik, K. Verma, and D. Jena, “Honeypot in network
security: A survey,” in Proceedings of the 2011 International Con-
ference on Communication, Computing & Security, ser. ICCCS ’11.
New York, NY, USA: Association for Computing Machinery, 2011, p.
600–605.

[24] R. M. Campbell, K. Padayachee, and T. Masombuka, “A survey of
honeypot research: Trends and opportunities,” in 2015 10th Interna-
tional Conference for Internet Technology and Secured Transactions
(ICITST), 2015, pp. 208–212.

[25] L. Zobal, D. Kol´aˇr, and R. Fujdiak, “Current state of honeypots
and deception strategies in cybersecurity,” in 2019 11th International
Congress on Ultra Modern Telecommunications and Control Systems
and Workshops (ICUMT), 2019, pp. 1–9.

[26] P. Sokol and M. Andrejko, “Deploying honeypots and honeynets: Is-
sues of liability,” in Computer Networks. Cham: Springer International
Publishing, 2015, pp. 92–101.

[27] P. Sokol, M. Husak, and F. Lipt´ak, “Deploying honeypots and hon-
eynets: Issue of privacy,” in 2015 10th International Conference on
Availability, Reliability and Security, 2015, pp. 397–403.

[28] M. F. Razali, M. N. Razali, F. Z. Mansor, G. Muruti, and N. Jamil,
“Iot honeypot: A review from researcher’s perspective,” in 2018 IEEE
Conference on Application, Information and Network Security (AINS),
Nov 2018, pp. 93–98.

[29] C. Dalamagkas, P. Sarigiannidis, D. Ioannidis, E. Iturbe, O. Nikolis,
F. Ramos, E. Rios, A. Sarigiannidis, and D. Tzovaras, “A survey on
honeypots, honeynets and their applications on smart grid,” in 2019
IEEE Conference on Network Softwarization (NetSoft), June 2019, pp.
93–100.

[30] S. Dowling, M. Schukat, and H. Melvin, “Data-centric framework for
adaptive smart city honeynets,” in 2017 Smart City Symposium Prague
(SCSP), 2017, pp. 1–7.

[31] W. Fan, D. Fern´andez, and V. A. Villagr´a, “Technology independent
honeynet description language,” in 2015 3rd International Conference
on Model-Driven Engineering and Software Development (MODEL-
SWARD), Feb 2015, pp. 303–311.

[32] A. Acien, A. Nieto, G. Fernandez, and J. Lopez, “A comprehensive
methodology for deploying iot honeypots,” in TrustBus 2018, vol.
11033, Sept 2018, pp. 229–243.

[33] O. Surnin, F. Hussain, R. Hussain, S. Ostrovskaya, A. Polovinkin,
J. Lee, and X. Fernando, “Probabilistic estimation of honeypot de-
tection in internet of things environment,” in 2019 International
Conference on Computing, Networking and Communications (ICNC),
Feb 2019, pp. 191–196.

[34] O. Surnin, “honeypot,” https://gitlab.com/legik/honeypot, [Online; ac-

cessed 1-Apr-2020].

[35] M.-R. Zamiri-Gourabi, A. R. Qalaei, and B. A. Azad, “Gas what? i
can see your gaspots. studying the ﬁngerprintability of ics honeypots
in the wild,” in Proceedings of the Fifth Annual Industrial Control
System Security (ICSS) Workshop. ACM, 2019, p. 30–37.

[36] Honeynet

Project,

“Know
http://www.symantec.com/connect/articles/knowyour-enemy-
honeynets, April 2001, [Online; accessed 2-Apr-2020].

enemy:

your

Honeynets,”

[37] A.Guerra Manzanares, “Honeyio4: The construction of a virtual, low-
interaction iot honeypot,” Ph.D. dissertation, Universitat Polit`ecnica
de Catalunya, 2017. [Online]. Available: https://pdfs.semanticscholar.
org/3124/456d251e3657746de4c34472224f5b2d8efe.pdf

[38] G. Evron, “Mirai open-source iot honeypot: New cymmetria research
release,” https://cymmetria.com/blog/mirai-open-source-iot-honeypot-
new-cymmetria-research-release/, Nov. 2016, [Online; accessed 16-
Apr-2020].

[39] R. Piggin and I. Buffey, “Active defence using an operational tech-
nology honeypot,” in 11th International Conference on System Safety
and Cyber-Security (SSCS 2016), 2016, pp. 1–6.

[40] S. Hilt, F. Maggi, C. Perine, L. Remorin, M. R¨osler, and
R. Vosseler, “Caught
in the Act: Running a Realistic Factory
Honeypot to Capture Real Threats,” 2020, White Paper. [Online].
https://documents.trendmicro.com/assets/white papers/
Available:

30

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

wp-caught-in-the-act-running-a-realistic-factory-honeypot-to-capture\
-real-threats.pdf

[65] A. Pauna, “Irassh,” https://github.com/adpauna/irassh/, 2018, [Online;

accessed 23-Apr-2020].

[41] S. Litchﬁeld, D. Formby, J. Rogers, S. Meliopoulos, and R. Beyah,
“Rethinking the honeypot for cyber-physical systems,” IEEE Internet
Computing, vol. 20, no. 5, pp. 9–17, Sep. 2016.

[42] A. D. Oza, G. N. Kumar, and M. Khorajiya, “Survey of snaring cyber
attacks on iot devices with honeypots and honeynets,” in 2018 3rd
International Conference for Convergence in Technology (I2CT), April
2018, pp. 1–6.

[43] D. Antonioli and N. O. Tippenhauer, “Minicps: A toolkit for security
research on cps networks,” in Proc. First ACM Workshop on Cyber-
Physical Systems-Secur. and/or Privacy, 2015, p. 91–100.

[44] M. Zec, “Implementing a clonable network stack in the freebsd kernel,”
in Proceedings of the FREENIX Track: USENIX Annual Technical
Conference, June 9-14, San Antonio, Texas, USA, 2003, pp. 137–150.
“GridLab-D Simulation Software,” https://www.gridlabd.org/, 2020,
[Online; accessed 7-April-2020].

[45]

[46] P. Gunathilaka, D. Mashima, and B. Chen, “Softgrid: A software-based
smart grid testbed for evaluating substation cybersecurity solutions,” in
Proc. 2nd ACM Workshop on Cyber-Physical Syst. Secur. and Privacy,
2016, p. 113–124.

[47] Powerworld, “PowerWorld Simulator,” https://www.powerworld.com/,

2020, [Online; accessed 15-May-2020].

[48] B. Lantz, B. Heller, and N. McKeown, “A network in a laptop: Rapid
prototyping for software-deﬁned networks,” in Proceedings of the 9th
ACM SIGCOMM Workshop on Hot Topics in Networks, 2010.
[49] A. Pauna, “Improved self adaptive honeypots capable of detecting
rootkit malware,” in 2012 9th International Conference on Communi-
cations (COMM), June 2012, pp. 281–284.

[50] N. Provos, “Honeyd,” https://github.com/DataSoft/Honeyd, 2007, [On-

line; accessed 2-Apr-2020].

[51] DinoTools, “Dionaea,” https://github.com/DinoTools/dionaea, [Online;

accessed 2-Apr-2020].

[52] Kippo, “Kippo-

ssh honeypot,” https://github.com/desaster/kippo,

2016, [Online; accessed 2-Apr-2020].

[53] Cowrie, “Cowrie ssh and telnet honeypot,” https://www.cowrie.org/,

[54]

2019, [Online; accessed 2-Apr-2020].
foospidy,
[Online; accessed 30-Apr-2020].

“Honeypy,” https://github.com/foospidy/HoneyPy, 2013,

[55] G. Wagener, “Self-adaptive honeypots coercing and assessing attacker
behaviour,” Ph.D. dissertation, Institut National Polytechnique de Lor-
raine - INPL, 2011. [Online]. Available: https://tel.archives-ouvertes.
fr/tel-00627981/ﬁle/thesis gerard wagener after defense.pdf
[56] A. Pauna and I. Bica, “Rassh - reinforced adaptive ssh honeypot,”
in 2014 10th International Conference on Communications (COMM),
May 2014, pp. 1–6.

[57] A. Pauna, A. Iacob, and I. Bica, “Qrassh - a self-adaptive ssh
honeypot driven by q-learning,” in 2018 International Conference on
Communications (COMM), June 2018, pp. 441–446.

[58] L. Staﬁra, “Examining effectiveness of web-based internet of things
honeypots,” Ph.D. dissertation, Air Force Institute of Technology,
2019. [Online]. Available: https://scholar.aﬁt.edu/etd/2284

[59] Dionaea, “Service,” https://dionaea.readthedocs.io/en/latest/introduction

.html, 2015, [Online; accessed 2-Apr-2020].

[60] L. Metongnon and R. Sadre, “Beyond telnet: Prevalence of iot proto-
cols in telescope and honeypot measurements,” in 2018 WTMC, Aug.
2018, pp. 21–26.

[61] B. Kaur and P. K. Pateriya, “A survey on security concerns in internet
of things,” in 2018 Second International Conference on Intelligent
Computing and Control Systems (ICICCS), June 2018, pp. 27–34.

[62] S. Dowling, M. Schukat, and H. Melvin, “A zigbee honeypot to assess
iot cyberattack behaviour,” in 2017 28th Irish Signals and Systems
Conference (ISSC), June 2017, pp. 1–6.

[63] G.Wagener,

“Adaptive

honeypot

alternative

(aha),”

http://git.quuxlabs.com/, 2018, [Online; accessed 23-Apr-2020].
[64] A. Pauna, I. Bica, F. Pop, and A. Castiglione, “On the rewards of
self-adaptive iot honeypots,” Annals of Telecommunications, vol. 74,
pp. 501–515, Jul 2019.

[66] R. Shrivastava, B. Bashi, and C. Hota, “Attack detection and forensics
using honeypot in iot environment,” in International Conference on
Distributed Computing and Internet Technology, Bhubaneswar, India,
Jan 2019, pp. 402–409.

[67] B. Lingenfelter, I. Vakilinia, and S. Sengupta, “Analyzing variation
among iot botnets using medium interaction honeypots,” in 2020 10th
Annual Computing and Communication Workshop and Conference
(CCWC), 2020, pp. 0761–0767.

[68] A. Pauna, “Qrassh,” https://github.com/adpauna/qrassh/, 2018, [On-

line; accessed 16-Apr-2020].

[69] D. Chen, M. Egeley, M. Woo, and D. Brumley, “Towards automated
dynamic analysis for linux-based embedded ﬁrmware,” in 2016 NDSS.
Internet Society, Feb. 2016, pp. 21–24.

[70] M. Wang, J. Santillan, and F. Kuipers, “Thingpot: an interactive
internet-of-things honeypot,” Computing Research Repository, vol.
abs/1807.04114, Jul 2018. [Online]. Available: http://arxiv.org/abs/
1807.04114

[71] R. Vishwakarma and A. K. Jain, “A honeypot with machine learning
based detection framework for defending iot based botnet ddos at-
tacks,” in 2019 3rd International Conference on Trends in Electronics
and Informatics (ICOEI), April 2019, pp. 1019–1024.

[72] T. Luo, Z. Xu, X. Jin, Y. Jia, and X. Ouyang, “Iotcandyjar: Towards
an intelligent-interaction honeypot for iot devices.” in Black Hat 2017,
2017.

[73] Y. Zhou, “Chameleon: Towards adaptive honeypot for internet of
things,” in Proceedings of the ACM Turing Celebration Conference
- China, May 2019.

[74] A. Vetterl and R. Clayton, “Honware: A virtual honeypot framework
for capturing cpe and iot zero days,” in 2019 APWG Symposium on
Electronic Crime Research (eCrime), 2019, pp. 1–13.

[75] D. Chen, M. Egeley, M. Woo, and D. Brumley, “Firmadyne,”
https://github.com/ﬁrmadyne/ﬁrmadyne, 2016, [Online; accessed 30-
Apr-2020].

[76] M. Wang, “Thingpot,” https://github.com/Mengmengada/ThingPot,

2017, [Online; accessed 14-May-2020].

[77]

I. Tor Project, “Tor project,” https://www.torproject.org/, [Online;
accessed 26-Jul-2020].

[78] Shodan, “Honeyscore,” https://honeyscore.shodan.io/,

[Online; ac-

cessed 26-Jul-2020].

[79] Y. M. P. Pa, S. Suzuki, K. Yoshioka, T. Matsumoto, T. Kasama,
and C. Rossow, “Iotpot – analysing the rise of iot compromises,”
https://ipsr.ynu.ac.jp/iot/, June 2016, [Online; accessed 2-Apr-2020].

[80] Cymmetria, “Mtpot,” https://github.com/Cymmetria/MTPot, [Online;

accessed 1-Apr-2020].

[81] H. Semic and S. Mrdovic, “Iot honeypot: A multicomponent solution
for handling manual and mirai-based attacks,” in 2017 Telecommuni-
cation Forum (TELFOR), 2017, pp. 1–4.

[82] Phype, “Telnet

iot honeypot,” https://github.com/Phype/telnet-iot-

honeypot, 2019, [Online; accessed 2-Apr-2020].

[83] P. Krishnaprasad,
a multi-purpose
Institute
https://security.cse.iitk.ac.in/sites/default/ﬁles/15111021.pdf

attacks
Ph.D.
2017.

“Capturing
iothoneypot,”

on
iot
deviceswith
Indian
dissertation,
[Online]. Available:

of Technology Kanpur,

[84] A. Oza, G. Kumar, M. Khorajiya, and V. Tiwari, Snaring Cyber Attacks
on IoT Devices with Honeynet. Springer Nature Singapore Pte Ltd.,
2019.

[85] M. Anirudh, S. A. Thileeban, and D. J. Nallathambi, “Use of hon-
eypots for mitigating dos attacks targeted on iot networks,” in 2017
International Conference on Computer, Communication and Signal
Processing (ICCCSP), Jan 2017, pp. 1–4.

[86] A. Tambe, Y. Aung, R. Sridaran, M. O. an A. K. Jain, N. Tippenhauer,
A. Shabtai, and Y. Elovici, “Detection of threats to iot devices
using scalable vpn-forwarded honeypots,” in Proceedings of the Ninth
ACM Conference on Data and Application Security and Privacy
(CODASPY), Mar 2019, pp. 85–96.

[87] A. Molina Zarca, J. B. Bernabe, A. Skarmeta, and J. M. A. Calero,

31

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

“Virtual iot honeynets to mitigate cyberattacks in sdn/nfv-enabled iot
networks,” IEEE Journal on Selected Areas in Communications, 2020.
[88] F. Dang, Z. Li, Y. Liu, E. Zhai, Q. I. Chen, T. Xu, Y. Chen, and
J. Yang, “Understanding ﬁleless attacks on linux-based iot devices
with honeycloud,” in 17th Annual International Conference on Mobile
Systems, Applications, and Services, Nov 2019, pp. 482–493.
[89] M. A. Hakim, “u-pot,” https://github.com/azizulhakim/u-pot/, [Online;

accessed 1-Apr-2020].

[90] U. Gandhi, P. Kumar, S. Kadu, R. Varatharajan, G. Manogaran, and
R. Sundarasekar, “Hiotpot: Surveillance on iot devices against recent
threats,” Wireless Personal Communications, vol. 103, no. 2, pp. 1179–
1194, 2018.

[91] V. Martin, Q. Cao, and T. Benson, “Fending off iot-hunting attacks
at home networks,” in Proceedings of the 2nd Workshop on Cloud-
Assisted Networking. ACM, Dec. 2017, pp. 67–72.
J. Guarnizo, A. Tambe, S. Bhunia, M. Ochoa, N. Tippenhauer,
A. Shabtail, and Y. Elovici, “Siphon: Towards scalable high-interaction
physical honeypots,” in 2017 Cyber Physical Systems Security Work-
shops (CPSS), April 2017, pp. 57–68.

[92]

[93] W. Zhang, B. Zhang, Y. Zhou, H. He, and Z. Ding, “An iot honeynet
based on multi-port honeypots for capturing iot attacks,” IEEE Internet
of Things Journal, pp. 1–1, 2019.

[94] Y. M. P. Pa, S. Suzuki, K. Yoshioka, T. Matsumoto, T. Kasama,
and C. Rossow, “Iotpot: Analysing the rise of iot compromises,”
in 9th USENIX Workshop on Offensive Technologies (WOOT 15),
Washington, D.C., Aug 2015.
“Welcome

[95] T. M.

twisted

Labs,

the

to

https://twistedmatrix.com/documents/current/, Sept. 2014,
accessed 9-Apr-2020].

documentation,”
[Online;

[96] Elastic,

“Getting

started

with

logstash,”

https://www.elastic.co/guide/en/logstash/current/getting-started-
with-logstash.html, 2020, [Online; accessed 9-Apr-2020].

[97] ——, “Elasticsearch 5.2.2,” https://www.elastic.co/downloads/past-

releases/elasticsearch-5-2-2/, 2017, [Online; accessed 9-Apr-2020].

[98] ——,

“Kibana: Your window into

the

elastic

stack,”

https://www.elastic.co/kibana, 2020, [Online; accessed 9-Apr-2020].

[99] N.

Provos,

“Honeyd

frequently

http://www.honeyd.org/faq.php, May 2007,
Apr-2020].

asked

questions,”
[Online; accessed 1-

[101]

[100] Symantec, “Internet security threat report (istr) 2019,” Symantec,
Tech. Rep., Feb 2019. [Online]. Available: https://www.symantec.
com/security-center/threat-report
“Shodan,” https://www.shodan.io/, 2020, [Online; accessed 14-May-
2020].
“Nmap,” https://nmap.org/, 2020, [Online; accessed 14-May-2020].

[102]
[103] R. Graham, “Masscan,” https://github.com/robertdavidgraham/masscan/,

2019, [Online; accessed 14-May-2020].

[104] V.

Pothamsetty

and M.

Building

Project:
http://scadahoneynet.sourceforge.net/,
2-May-2020].

Honeypots

Franz,
for

“SCADA
Industrial

2004,

[Online;

HoneyNet
Networks,”
accessed

[105] D. Peterson, “SCADA Honeywall: Use Your Own PLC As The Tar-
get,” https://dale-peterson.com/2008/07/08/scada-honeywall-use-your-
own-plc-as-the-target/, 2006, [Online; accessed 2-May-2020].

[106] D.

Bond,

Honeynet,”
https://web.archive.org/web/20111215085656/http://www.digitalbond.
com/tools/scada-honeynet/, 2011, [Online; accessed 2-May-2020].

SCADA

“Digital

Bond

[111]

J. Cao, W. Li, J. Li, and B. Li, “Dipot: A distributed industrial
honeypot system,” in Smart Computing and Communication, M. Qiu,
Ed. Cham: Springer International Publishing, 2018, pp. 300–309.

[112] S. Lau, J. Klick, S. Arndt, and V. Roth, “Poster: Towards highly
interactive honeypots for industrial control systems,” in Proc. 2016
ACM SIGSAC Conf. on Computer and Commun. Sec., ser. CCS ’16,
2016, p. 1823–1825.

[113] E. Vasilomanolakis, S. Srinivasa, C. G. Cordero, and M. M¨uhlh¨auser,
“Multi-stage attack detection and signature generation with ics honey-
pots,” in IEEE/IFIP Network Operations and Management Symposium,
2016, pp. 1227–1232.

[114] F. Xiao, E. Chen, and Q. Xu, “S7commtrace: A high interactive
honeypot for industrial control system based on s7 protocol,” in Infor-
mation and Communications Security. Cham: Springer International
Publishing, 2018, pp. 412–423.

[115] M. Winn, M. Rice, S. Dunlap, J. Lopez, and B. Mullins, “Construct-
ing cost-effective and targetable industrial control system honeypots
for production networks,” International J. of Critical Infrastructure
Protection, vol. 10, pp. 47 – 58, 2015.
J. K. Gallenstein, “Integration of
the Network and Application
Layers of Automatically-Conﬁgured Programmable Logic Controller
Honeypots,” Master’s thesis, Air Force Institute of Technology Air
University, March 2017. [Online]. Available: https://apps.dtic.mil/dtic/
tr/fulltext/u2/1054643.pdf

[116]

[117] S. Abe, Y. Tanaka, Y. Uchida, and S. Horata, “Developing deception
network system with traceback honeypot in ics network,” SICE Journal
of Control, Measurement, and System Integration, vol. 11, no. 4, pp.
372–379, 2018.

[118] A. Jicha, M. Patton, and H. Chen, “Scada honeypots: An in-depth
analysis of conpot,” in 2016 IEEE Conference on Intelligence and
Security Informatics (ISI), Sep. 2016, pp. 196–198.

[119] K.-C. Lu, I.-H. Liu, J.-W. Liao, S.-C. Wu, Z.-C. Liu, J.-S. Li, and C.-F.
Li, “Evaluation and build to honeypot system about scada security for
large-scale iot devices,” Journal of Robotics, Networking and Artiﬁcial
Life, vol. 6, pp. 157–161, 2019.

[120] P. Ferretti, M. Pogliani, and S. Zanero, “Characterizing background
noise in ics trafﬁc through a set of low interaction honeypots,”
in Proceedings of the ACM Workshop on Cyber-Physical Systems
Security & Privacy, 2019, p. 51–61.

[121] H. Naruoka, M. Matsuta, W. Machii, T. Aoyama, M. Koike, I. Koshi-
jima, and Y. Hashimoto, “Ics honeypot system (camouﬂagenet) based
on attacker’s human factors,” Procedia Manufacturing, vol. 3, pp. 1074
– 1081, 2015, 6th Int. Conf. Applied Human Factors and Ergonomics.
[122] E. Vasilomanolakis, S. Karuppayah, M. Fischer, M. M¨uhlh¨auser,
M. Plasoianu, L. Pandikow, and W. Pfeiffer, “This network is in-
fected: Hostage - a low-interaction honeypot for mobile devices,” in
Proceedings of the Third ACM Workshop on Security and Privacy in
Smartphones & Mobile Devices, 2013, p. 43–48.
J. P. Disso, K. Jones, and S. Bailey, “A plausible solution to scada
security honeypot systems,” in 8th Int. Conf. on Broadband and
Wireless Comput., Comm. and Applications, 2013, pp. 443–448.

[123]

[124] Honeynet

Project,

“Honeywall

https://www.honeynet.org/projects/old/honeywall-cdrom/,
[Online; accessed 15-May-2020].

CDROM,”
2011,

[125] P. C. Warner, “Automatic conﬁguration of programmable logic
Institute of
[Online]. Available:

controller
emulators,” Master’s
Technology Air University, March 2015.
https://apps.dtic.mil/dtic/tr/fulltext/u2/a620212.pdf

thesis, Air Force

[107] S. M. Wade, “SCADA Honeynets: The attractiveness of honeypots
as critical infrastructure security tools for the detection and analysis
of advanced threats,” Master’s thesis, Iowa State University, 2011.
[Online]. Available: https://lib.dr.iastate.edu/etd/12138

[108] L. Rist, J. Vestergaard, D. Haslinger, A. De Pasquale, and J. Smith,
“Conpot ICS/SCADA Honeypot,” http://conpot.org/, 2020, [Online;
accessed 2-May-2020].
“Honeynet Project,” https://www.honeynet.org/, 2020, [Online; ac-
cessed 2-May-2020].

[109]

[110] C. Zhao and S. Qin, “A research for high interactive honepot based
on industrial service,” in 2017 3rd IEEE International Conference on
Computer and Communications (ICCC), 2017, pp. 2935–2939.

[126] C. Leita, K. Mermoud, and M. Dacier, “Scriptgen: an automated
script generation tool for honeyd,” in 21st Annual Computer Security
Applications Conference (ACSAC’05), 2005, pp. 12 pp.–214.
[127] M. Haney and M. Papa, “A framework for the design and deployment
of a scada honeynet,” in Proceedings of the 9th Annual Cyber and
Information Security Research Conference. New York, NY, USA:
ACM, 2014, p. 121–124.

[128] S. Kuman, S. Groˇs, and M. Mikuc, “An experiment in using imunes
and conpot to emulate honeypot control networks,” in 2017 40th Inter-
national Convention on Information and Communication Technology,
Electronics and Microelectronics (MIPRO), 2017, pp. 1262–1268.

[129] C. Ding, J. Zhai, and Y. Dai, “An improved ics honeypot based

32

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

on snap7 and imunes,” in Cloud Computing and Security. Cham:
Springer International Publishing, 2018, pp. 303–313.

[130] R. C. Bodenheim, “Impact of the Shodan Computer Search Engine on
Internet-facing Industrial Control System Devices,” Master’s thesis,
Air Force Institute of Technology Air University, March 2014.
[Online]. Available: https://apps.dtic.mil/docs/citations/ADA601219

[131] M. Haney, “Leveraging cyber-physical system honeypots to en-
hance threat intelligence,” in Critical Infrastructure Protection XIII.
Springer International Publishing, 2019, pp. 209–233.

[132] D.

J. Berman, “Emulating Industrial Control System Devices
using Gumstix Technology,” Master’s thesis, Air Force Institute
of Technology Air University, June 2012.
[Online]. Available:
https://scholar.aﬁt.edu/etd/1080/

[133] R. M. Jaromin, “Emulation of

Industrial Control Field Device
Protocols,” Master’s thesis, Air Force Institute of Technology Air
University, March 2013. [Online]. Available: https://apps.dtic.mil/dtic/
tr/fulltext/u2/a582482.pdf

[134] T. Holczer, M. Felegyhazi, and L. Buttyan, “The design and implemen-
tation of a plc honeypot for detecting cyber attacks against industrial
control systems,” in Proc. Int. Conf. on Computer Security in a Nuclear
World: Expert Discussion and Exchange.

IAEA, 2015.

[135] A. V. Serbanescu, S. Obermeier, and D.-Y. Yu, “Ics threat analysis us-
ing a large-scale honeynet,” in Proceedings of the 3rd Int. Symposium
for ICS & SCADA Cyber Security Research.
Swindon, GBR: BCS
Learning & Development Ltd., 2015, p. 20–30.

[136] P. Sim˜oes, T. Cruz, J. Proenc¸a, and E. Monteiro, Specialized Honeypots
Springer International Publishing, 2015, pp.

for SCADA Systems.
251–269.

[137] S. Ahn, T. Lee, and K. Kim, “A study on improving security of ics
through honeypot and arp spooﬁng,” in Int. Conference on Information
and Communication Technology Convergence, Oct 2019, pp. 964–967.
[138] A. Belqruch and A. Maach, “Scada security using ssh honeypot,” in
2019 Proceedings of the 2nd International Conference on Networking,
Information Systems & Security, Mar 2019, pp. 1–5.

[139] A. V. Serbanescu, S. Obermeier, and D. Yu, “A ﬂexible architecture
for industrial control system honeypots,” in 12th Int. Joint Conference
on e-Business and Telecommunications, vol. 04, 2015, pp. 16–26.

[140] D. I. Buza, F. Juh´asz, G. Miru, M. F´elegyh´azi, and T. Holczer, “Cryplh:
Protecting smart energy systems from targeted attacks with a plc
honeypot,” in Smart Grid Security.
Cham: Springer International
Publishing, 2014, pp. 181–192.

[141] K. Kołty´s and R. Gajewski, “Shape: A honeypot for electric power
substation,” Journal of Telecommunications and Information Technol-
ogy, vol. nr 4, pp. 37–43, 2015.

[142] O. Redwood, J. Lawrence, and M. Burmester, “A symbolic honeynet
framework for scada system threat intelligence,” in Critical Infras-
tructure Protection IX. Springer International Publishing, 2015, pp.
103–118.

[143] D. Mashima, B. Chen, P. Gunathilaka, and E. L. Tjiong, “Towards a
grid-wide, high-ﬁdelity electrical substation honeynet,” in 2017 IEEE
International Conference on Smart Grid Communications (SmartGrid-
Comm), Oct 2017, pp. 89–95.

[144] D. Pliatsios, P. Sarigiannidis, T. Liatiﬁs, K. Rompolos, and I. Sin-
iosoglou, “A novel and interactive industrial control system honeypot
for critical smart grid infrastructure,” in 2019 IEEE 24th International
Workshop on Computer Aided Modeling and Design of Communica-
tion Links and Networks (CAMAD), Sep. 2019, pp. 1–6.

[145] D. Mashima, Y. Li, and B. Chen, “Who’s scanning our smart grid?
empirical study on honeypot data,” in 2019 IEEE Global Communi-
cations Conference (GLOBECOM), Dec 2019, pp. 1–6.

[146] M. M. Kendrick and Z. A. Rucker, “Energy Grid Threat Analysis
Using Honeypots,” Master’s thesis, Naval Postgraduate School, June
2019. [Online]. Available: https://calhoun.nps.edu/handle/10945/62843
[147] D. Hyun, “Collecting cyberattack data for industrial control systems
using honeypots,” Master’s thesis, Naval Postgraduate School, March
2018. [Online]. Available: http://hdl.handle.net/10945/58316

[148] K.

Wilhoit,

“Who’s

ICS
line].
whos-really-attacking-your-ics-equipment-whitepaper-en.pdf

Your
2013,
[On-
https://www.trendmicro.com.tr/media/wp/

Equipment?”
Available:

Attacking
Paper.

Really

White

[149] D. Antonioli, A. Agrawal, and N. O. Tippenhauer, “Towards high-
interaction virtual ics honeypots-in-a-box,” in Proceedings of the 2nd
ACM Workshop on Cyber-Physical Systems Security and Privacy,
2016, p. 13–22.

[150] A. F. Murillo, L. F. C´ombita, A. C. Gonzalez, S. Rueda, A. A.
Cardenas, and N. Quijano, “A virtual environment for industrial control
systems: A nonlinear use-case in attack detection, identiﬁcation, and
response,” in Proceedings of the 4th Annual Industrial Control System
Security Workshop. New York, NY, USA: ACM, 2018, p. 25–32.

[151] C. Petre and A. Korodi, “Honeypot inside an opc ua wrapper for water
pumping stations,” in 2019 22nd International Conference on Control
Systems and Computer Science (CSCS), 2019, pp. 72–77.

[152] G. Bernieri, M. Conti, and F. Pascucci, “Mimepot: a model-based hon-
eypot for industrial control networks,” in 2019 IEEE Int. Conference
on Systems, Man and Cybernetics (SMC), Oct 2019, pp. 433–438.

That

Your

“The

Didn’t

Really

SCADA

Attacking

2013, White

[153] K. Wilhoit,
Who’s
2),”
//www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/
white-papers/wp-the-scada-that-didnt-cry-wolf.pdf
“OPC Uniﬁed Architecture,” https://opcfoundation.org/about/opc-
technologies/opc-ua/, 2020, [Online; accessed 2-May-2020].
[155] K. Wilhoit and S. Hilt, “The GasPot experiment : Unexamined perils

Cry Wolf
(Part
https:

Equipment?
Available:

ICS
[Online].

Paper.

[154]

in using gas-tank-monitoring systems,” in Black Hat USA, 2015.

[156] Z. Ammar and A. AlSharif, “Deployment of iot-based honeynet
model,” in ICIT 2018: Proceedings of the 6th Int. Conference on
Information Technology: IoT and Smart City, Dec 2018, pp. 134–139.
[157] M. Du and K. Wang, “An sdn-enabled pseudo-honeypot strategy for
distributed denial of service attacks in industrial internet of things,”
IEEE Transactions on Industrial Informatics, vol. 16, no. 1, pp. 648–
657, Jan 2020.

[158] B. Green, A. Lee, R. Antrobus, U. Roedig, D. Hutchison, and
A. Rashid, “Pains, gains and plcs: Ten lessons from building an indus-
trial control systems testbed for security research,” in 10th USENIX
Workshop on Cyber Security Experimentation and Test, Vancouver,
BC, Aug. 2017.

[159] T. Alves, R. Das, and T. Morris, “Virtualization of industrial control
system testbeds for cybersecurity,” in Proceedings of the 2nd Annual
Industrial Control System Security Workshop. New York, NY, USA:
ACM, 2016, p. 10–14.

[160] S. Almulla, E. Bou-Harb, and C. Fachkha, “Cyber security threats
targeting CPS systems: A novel approach using honeypot,” in SE-
CURWARE 2018: The Twelfth International Conference on Emerging
Security Information, Systems and Technologies, Dec 2018, pp. 85–91.
[161] A. I. Newaz, A. K. Sikder, M. A. Rahman, and A. S. Uluagac, “A
survey on security and privacy issues in modern healthcare systems:
Attacks and defenses,” 2020.

[162] A. I. Newaz, A. K. Sikder, L. Babun, and A. S. Uluagac, “Heka:
A novel intrusion detection system for attacks to personal medical
devices,” in 2020 IEEE Conference on Communications and Network
Security (CNS), 2020, pp. 1–9.

[163] A. I. Newaz, A. K. Sikder, M. A. Rahman, and A. S. Uluagac,
“Healthguard: A machine learning-based security framework for smart
healthcare systems,” in 2019 Sixth International Conference on Social
Networks Analysis, Management and Security (SNAMS), 2019, pp.
389–396.

[164] H. Oz, A. Aris, A. Levi, and A. Selcuk Uluagac, “A Survey on
Ransomware: Evolution, Taxonomy, and Defense Solutions,” arXiv e-
prints, p. arXiv:2102.06249, Feb. 2021.

[165] F. Naseem, A. Aris, L. Babun, E. Tekiner, and S. Uluagac, “MINOS: A
lightweight real-time cryptojacking detection system,” in 28th Annual
Network and Distributed System Security Symposium, NDSS, February
21-24, 2021. The Internet Society, 2021.

[166] E. Tekiner, A. Acar, A. Selcuk Uluagac, E. Kirda, and A. Ay-
din Selcuk, “SoK: Cryptojacking Malware,” arXiv e-prints, p.
arXiv:2103.03851, Mar. 2021.

[167] L. P. Rondon, L. Babun, K. Akkaya, and A. S. Uluagac, “Hdmi-walk:
Attacking hdmi distribution networks via consumer electronic control
protocol,” in Proceedings of
the 35th Annual Computer Security
Applications Conference, ser. ACSAC ’19. ACM, 2019, p. 650–659.

33

Version Accepted to the IEEE Communication Surveys and Tutorials

FOR EDUCATIONAL PURPOSES ONLY

[168] L. C. PucheRondon, L. Babun, K. Akkaya, and A. S. Uluagac, “Hdmi-
watch: Smart intrusion detection system against hdmi attacks,” IEEE
Transactions on Network Science and Engineering, pp. 1–1, 2020.

[169] L. P. Rondon, L. Babun, A. Aris, K. Akkaya, and A. S. Uluagac,
“Poisonivy: (in)secure practices of enterprise iot systems in smart
buildings,” in Proceedings of the 7th ACM International Conference
on Systems for Energy-Efﬁcient Buildings, Cities, and Transportation,
ser. BuildSys ’20. ACM, 2020, p. 130–139.

[170] L. Puche Rondon, L. Babun, A. Aris, K. Akkaya, and A. Selcuk
Uluagac, “Survey on Enterprise Internet-of-Things Systems (E-IoT): A
Security Perspective,” arXiv e-prints, p. arXiv:2102.10695, Feb. 2021.
Protocol,”
https://ﬁeldcommgroup.org/technologies/hart, 2020, [Online; accessed
14-May-2020].

[171] FieldComm

Communication

“HART

Group,

[172] L. Babun, K. Denney, Z. B. Celik, P. McDaniel, and A. S. Uluagac,
“A survey on iot platforms: Communication, security, and privacy
perspectives,” Computer Networks, 2021.

[173] H. Aksu, A. S. Uluagac, and E. Bentley, “Identiﬁcation of wearable
devices with bluetooth,” IEEE Transactions on Sustainable Computing,
pp. 1–1, 2018.

[174] Center for Internet Security, “The SolarWinds Cyber-Attack: What You
Need to Know,” https://www.cisecurity.org/solarwinds/, 2021, [Online;
accessed 26-March-2021].

[175] A. Aﬁanian, S. Niksefat, B. Sadeghiyan, and D. Baptiste, “Malware
dynamic analysis evasion techniques: A survey,” ACM Comput. Surv.,
vol. 52, no. 6, Nov. 2019.

[176] The MITRE Corporation, “Common Vulnerabilities and Exposures,”
https://cve.mitre.org/, 2020, [Online; accessed 17-May-2020].

34

