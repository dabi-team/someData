7
1
0
2

g
u
A
6

]

R
C
.
s
c
[

1
v
4
3
8
1
0
.
8
0
7
1
:
v
i
X
r
a

Exploiting Physical Dynamics to Detect Actuator and Sensor
Attacks in Mobile Robots

Pinyao Guo, Hunmin Kim, Nurali Virani, Jun Xu, Minghui Zhu and Peng Liu
Pennsylvania State University
University Park, PA, 16802

ABSTRACT
Mobile robots are cyber-physical systems where the cyberspace
and the physical world are strongly coupled. Attacks against mobile
robots can transcend cyber defenses and escalate into disastrous
consequences in the physical world. In this paper, we focus on the
detection of active attacks that are capable of directly influencing
robot mission operation. Through leveraging physical dynamics
of mobile robots, we develop RIDS, a novel robot intrusion de-
tection system that can detect actuator attacks as well as sensor
attacks for nonlinear mobile robots subject to stochastic noises. We
implement and evaluate a RIDS on Khepera mobile robot against
concrete attack scenarios via various attack channels including
signal interference, sensor spoofing, logic bomb, and physical dam-
age. Evaluation of 20 experiments shows that the averages of false
positive rates and false negative rates are both below 1%. Average
detection delay for each attack remains within 0.40s.

1 INTRODUCTION
Recent years have witnessed a rapid growth in the robotics industry.
According to International Data Corporation [24], global spending
on robotics and related services will reach $135 billion in 2019. The
sheer size of robotics volume is mainly accounted from defense
and security, agricultural, medical care, and manufacturing applica-
tions [1]. Recent market predicts a major growth in household and
entertainment applications [5]. Mobile robots, as a typical type of
robot systems, have capabilities of movement in particular work
environments and carry out specific missions. Some representative
mobile robots include household cleaning robots such as Roomba,
military surveillance drones such as Global Hawk, aerial photogra-
phy unmanned aerial vehicles (UAV) such as DJI Phantom, Amazon
warehouse robots, etc. Major tech companies, e.g., Google, Uber,
and Tesla are leading intensive development of autonomous cars
to replace human drivers in near future [38].

The popularity of this emerging technology introduces new se-
curity threats to the community. Unlike traditional cyber systems
such as computers or mobile phones, mobile robots are character-
ized by a strong coupling of the cyberspace and the physical world
in which they operate. Mobile robots equip sensors, actuators, and
electronic control units (ECUs). In a typical control iteration, sen-
sors (e.g., GPS, accelerometer) measure the states (e.g., position,
orientation, velocity, etc.) of robots and their surrounding world,
and feed the readings to ECUs. ECUs generate control commands
based on mission specifications, and actuators (e.g., rotor, wheel)
execute them in the physical world. Mobile robots inherit vulnera-
bilities from their cyber components, and such vulnerabilities can be
exploited by adversaries to transcend cyber defenses and further es-
calate into disastrous consequences in the physical world. Recently,

1

researchers demonstrated several remote hacks into a Jeep Chero-
kee [40] and Tesla newest models [2], and were able to control their
actuators such as steering wheels and gas pedals. Moreover, actua-
tors and sensors introduce extra attack surfaces and vulnerabilities
into mobile robots. In 2011, an American surveillance drone was
brought down by Iranian cyber warfare unit through GPS spoofing
attacks [61]. In 2013, a multi-million yacht was demonstrated to
be hijacked and controlled using spoofed GPS signals [67]. Many
missions of robots are safety critical. Hence, it becomes an urgent
issue to ensure the security of mobile robots.

In this paper, we focus on intrusion detection for mobile robots.
We consider attacks that are capable of transcending cyber defenses,
actively altering robot behavior and causing damages in the phys-
ical world. Down to attack consequences, active attacks can be
classified into actuator attacks and sensor attacks. Actuator attacks,
e.g., steering wheel take-over, directly alter control commands exe-
cuted by robot actuators. Sensor attacks, e.g., GPS spoofing, alter
authentic sensor readings received by controllers.

Cyber-layer or cyberspace intrusion detection has been stud-
ied extensively in past decades. Traditional host-based [60, 63]
and network-based [47, 53] IDSs monitor cyberspace behaviors,
e.g., system calls, network events, etc. However, attacks launched
through physical channels cannot be detected, since no abnormal
cyberspace behavior would be triggered and captured. Wireless
sensor network intrusion detection approaches [34, 37] leverage
sensor redundancy to do majority voting on sensor readings and de-
tect inconsistencies between each other. These approaches resort to
particular Byzantine thresholds [8] on the number of uncorrupted
sensors. When a powerful attack is launched that compromises
more sensors than the threshold, the detection fails.

Mobile robots are cyber-physical systems. Beyond the knowl-
edge audited by cyber-layer intrusion detection approaches, they
can also access to a second source of knowledge learned from inter-
acting with the physical world. In particular, the physical dynamics
of mobile robots impose constraints on the maneuver of mobile
robots. These constraints can be leveraged as a detection vector to
provide essential information that reflects ground truth statuses.
The second source of knowledge is neither obtained nor used in
cyber-layer intrusion detection approaches. Noticeably, the infor-
mation provided by physical dynamics allows for detecting sensor
and actuator attacks without resorting to majority voting or Byzan-
tine thresholds.

In this paper, we propose a robot intrusion detection system
(RIDS) for nonlinear mobile robots subject to stochastic noises,
which leverages the physical dynamics of mobile robots. The pro-
posed RIDS does not assume any sensor or actuator is clean. It is
able to detect, pinpoint and quantify sensor and actuator attacks
when not all sensors are simultaneously corrupted. The detection

 
 
 
 
 
 
world through sensors and actuators in its physical-layer. Robot
cyber-layer runs programs including device drivers, utility pro-
cesses that perform data processing or translation, etc. We define
each sensing procedure from capture of physical signal (e.g., elec-
tromagnetic waves, acoustic waves), signal digitization, data pro-
cessing, to data transmission to the planner as a sensing workflow.
Analogously, we define the counterpart procedure that receives,
translates and executes control commands in an actuator as an
actuation workflow. Figure 1 reflects the system model of many
real-world robots, such as MIT autonomous car [36] and Tartan
Racing robot [58].

For extensibility and security purposes, recent advances in robot
systems adopt modular design principle instead of bulky integra-
tion. The development of embedded systems shows a trend of run-
ning different tasks of a robot system on separate mission-specific
micro-processing chips. For instance, a modern car integrates more
than 100 ECUs virtually into every functioning and diagnostics as-
pect [32]. Microkernels are extensively supported and employed in
embedded systems [16, 59] to keep device drivers and applications
isolated by a secure layer. Given these popular design patterns,
we model that each sensing workflow or actuation workflow, i.e.,
device drivers and utility processes, runs in isolation with each
other.

The planner is the control center of a robot. Because of the
security and robustness significance of the planner, separation is
also enforced between the planner and the robot platform. For
instance, the planner could run in a separate chip, or the trust-zone
of a processor, or even reside in a physically remote location. It
receives sensor readings and sends control commands to the robot
platform using certain communication protocols (e.g., CAN) [18].
In what follows, we depict the attacker and the defender consid-

ered in this paper.

2.2 Threat Model
The attacker considered in this work can observe real-time robot
states and has knowledge about robot actuators and sensors. The
attacker can launch actuator attacks and/or sensor attacks on one
or multiple sensing or actuation workflow(s) through different
channels, including malware (e.g., logic bomb), signal interference
(e.g., spoofing) or physical damage (e.g., wire cut-off).

Given the attacker model, our detection system does not as-
sume any particular sensing workflow or actuation workflow to
be trusted. We assume that an attacker could not compromise all
sensing workflows and corrupt all sensor readings simultaneously.
Under the design where workflows run with isolation (see Sec-
tion 2.1), the attacker’s ability to compromise a workflow does not
imply the ability to compromise another. To the best of the authors’
knowledge, no reported attack is capable of compromising all sen-
sor workflows and tampering all sensor readings. Admittedly, such
attacks could be possible; however, it poses enormous difficulty for
attackers. Firstly, for heterogeneous sensors, holding a vulnerabil-
ity and corresponding exploit targeted on one sensing workflow
is costly for an attacker [48, 62]. Hence, it is tough to corrupt all
sensors. Secondly, even if an attacker is capable of corrupting all
sensors, the attacker needs to launch the attacks simultaneously to

Figure 1: Mobile robot system model which consists of a
robot platform and a planner. The physical world is per-
ceived by different sensors. Sensor readings go through dif-
ferent processing in utility processes and reach to the plan-
ner through a communication module. Control commands
are generated from the planner and executed via actuators.
(Hollow arrows stand for sensor reading data, and filled ar-
rows stand for control command data.)

capabilities are produced by explicitly leveraging physical dynamics
of mobile robots.

Our main contributions are summarized as follows:

• To the best of our knowledge, RIDS is the first one that detects
sensor and actuator attacks in nonlinear mobile robots subject
to stochastic noises.

• A unique feature provided by RIDS is that it can detect sensor
and actuator attacks without resorting to majority voting or
Byzantine thresholds.

• Beyond detection, RIDS is capable of pinpointing attack targets
and quantifying attack vectors. The information facilitates intru-
sion forensics and response.

• We implement a RIDS for Khepera ground mobile robot and
evaluate the RIDS against various concrete attacks. Results in-
dicate that as long as at least 1 out of 3 sensors on Khepera is
uncorrupted, the evaluation shows less than 1% of false positive
and false negative detection rate on average. Detection delay
remains within an average of 0.40s.

2 OVERVIEW
This section describes the background for general mobile robots
and the threat model considered in the paper. For succinctness
reason, mobile robots are referred to as robots in the remaining of
the paper.

2.1 Sensing and Actuation Workflow
Figure 1 shows a general system model for robots. It consists of a
robot platform and a planner. The robot interacts with the physical

2

PlannerControl ModuleRIDS ModuleCommunication ModuleActuator 1Sensor 1DriverSensor 1UtilityProcess 4Actuator 1DriverUtility Process 1Sensor 2DriverSensor 2Utility Process 2............SensingWorkflow 1SensingWorkflow 2ActuationWorkflow 1Sensor 3DriverSensor 3Utility Process 3SensingWorkflow 3Actuator 2UtilityProcess 5Actuator 2DriverActuationWorkflow 2Robot PlatformFigure 2: Correlation between control commands, robot
states, and sensor readings.

avoid detection. It is a great challenge to launch such coordinated
attacks on different target sensing workflows. [49].

The planner contains a defender that aims to detect sensor and
actuator attacks targeted on the robot. Because of its security sig-
nificance, the planner typically maintains minimal code complexity.
Its code is extensively tested before deployment, and isolated from
the rest of the system. We consider the planner as a trusted com-
puting base (TCB), and the defender keeps no secret information
from adversaries.

2.3 Our Approach
In robotics and control theory, state refers to the instantaneous
description of a dynamical system which changes over time, e.g.,
the position and orientation of a vehicle, the pitch, yaw, and roll of
a drone, etc. Control algorithms utilize sensor readings to estimate
system states and generate control commands for robot actuators.
Key insight In mobile robots, control commands and sensor
readings are correlated using robot states as an intermediate (shown
in Figure 2). Specifically, executed control commands determine
how the robot evolves from an initial state to a new state during a
period of time. And the new state is captured by sensor readings.
Sensor readings can be utilized to estimate new states. Executed
control commands can be estimated through the comparison of
the initial and new states. Hence, a discrepancy between planned
control commands and executed control commands estimated by
sensor readings indicates the existence of actuator attacks. More-
over, multiple sensors in a mobile robot typically have redundancy
regarding their measured signals [12, 13, 21]. For instance, dur-
ing a short period, a wheel encoder sensor measures the traveled
distance by a wheel, and a LiDAR sensor measures distances be-
tween a robot and nearby obstacles. With the knowledge of the
robot initial position and heading, both sensors can estimate the
current position and heading. Because of sensor redundancy, the
states estimated by different sensors could overlap, which can be
utilized for detecting sensor attacks by cross-validation. Therefore,
by comparing estimated control commands and planned control
commands, we can detect actuator attacks. By comparing estimated
states across sensors, we can detect sensor attacks. We develop a
RIDS based on this key insight.

3 ROBOT FORMALIZATION AND PROBLEM

STATEMENT

In this section, we formally model the general mobile robot system
shown in Figure 1 and formulate our detection problem. We provide
the high level intuition of our approach at the end.

3

Figure 3: Robot formal modeling considering actuator at-
tacks and sensor attacks.

3.1 Robot Formal Modeling
A mobile robot can be modeled as a nonlinear discrete time dy-
namic system. In each control iteration k ∈ {1, 2, · · · }, the planner
generates planned control commands uk−1. After the commands
being executed by robot actuators, the robot states evolve from
xk − 1 to xk . Under the new states, the planner receives new sensor
readings zk . The system model can be formally described by the
following equations:

xk
zk

= f (xk−1, uk −1) + ζk −1
= h(xk ) + ξk .

(1)

The first equation in (1) is referred to as the kinematic model,
which describes robot state transitions caused by control commands.
The kinematic model specifies the relation between states and con-
trol commands based on the actuator properties, e.g., how the actu-
ators function, and where the actuators are located. For instance, a
quadcopter’s controller adjusts the speeds of the 4 rotors to maneu-
ver itself, while a two-wheel differential drive robot sets different
speeds of individual wheels to move along a straight line or take a
turn. Function f (·) is referred to as the kinematic function.

The second equation in (1) is the measurement model, which
describes the relations between sensor readings and robot states.
The measurement model is determined by the robot sensor set-
tings, such as sensors types, sensor placement, etc. Function h(·)
is referred to as the measurement function. Vectors ζk −1 repre-
sents process noises, which account for external disturbances in
the kinematic model. Vectors ξk stand for measurement noises,
which account for sensing inaccuracy. We assume noise vectors
are Gaussian with zero mean and known covariances Q and R, re-
spectively. Note that Gaussian noise approximation is common in
control system modelings [33].

System (1) is general to model all nonlinear robots. Note that
the system model is an essential requirement for control purposes
during robot design phase. Hence, the modeling described in this
section does not introduce extra burden to security administrators.
Sensor Attack tampers data in a sensor workflow and results
in wrong sensor readings received by the planner. When sensor
attack is launched, sensor readings zk received by the planner can
be modeled as:

zk

= h(xk ) + ds
k

+ ξk

(2)

where ds
k is the attack vector representing corruptions on authentic
sensor readings. The robot is free of sensor attack when ds
= 0.
k
Corruptions might exist for multiple sensors. After sensor attacks
occur, the control algorithm of the robot might be lured to generate
erroneous control commands.

Sensor reading zk,1Robot state xkSensor reading zk,2Sensor reading zk,mControl command uk-1,1...Control command uk-1,n...Figure 4: High-level intuition for sensor attack and actuator attack detection in robots. The detection is enabled by comparison
between measured sensor readings and predicted states. Red circle and red star denotes corrupted states (actuator attack) and
corrupted sensor readings (sensor attack), respectively.

Actuator Attack directly alters the control commands executed
by the actuators in an actuation workflow. Considering actuator
attacks, the kinematic model can be modeled as:

xk

= f (xk −1, uk −1

+ da

k −1

) + ζk −1

(3)

where da
attack when da

= 0.

k −1

k −1 is actuator attack vector. The robot is free of actuator

3.2 Problem Statement
Consider a robot as modeled in Figure 3 that receives sensor read-
ings zk from m sensing workflows and sends control commands
uk −1 to n actuation workflows. An attacker could launch actuator
attack by attack vector da
k −1 and/or launch sensor attack by attack
vector ds

k . The robot model with sensor and actuator attacks is:
+ da

) + ζk −1

k −1

xk
zk

= f (xk −1, uk −1
= h(xk ) + ds
k

+ ξk

(4)

In this work, we aim to detect the occurrence of sensor and/or
actuator attacks in the robot.. In addition, we intend to identify
the specific workflow(s) i ∈ {1, 2, · · · , m} and j ∈ {1, 2, · · · , n} on
which attacker targets, and quantify the attack vectors ds
as diagnosis information for future analysis.

k and da

k−1

4 HIGH-LEVEL INTUITION ON WHY

MAJORITY VOTING FAILS AND OUR
APPROACH WORKS

Under powerful attack scenarios when majority of sensors are cor-
rupted, the IDS’s perception of the physical status (e.g., position) of a
robot could be greatly distorted. Majority-voting based approaches
solely rely on measured sensor readings zk . In our approach, how-
ever, the IDS achieves the detection leveraging not only zk but also
physical dynamics. In particular, physical dynamics are leveraged
to predict state evolution when attacks are absent. Deviations be-
tween such state predictions and measured sensor readings indicate
occurrence of attacks.

To understand the intuition of our approach, we tentatively
consider a robot with 3 sensors at a time instant k − 1. For ease
of presentation, we tentatively do not consider measurement and
process noises. After the execution of control commands, the robot
will evolve from the previous states into the current states.

We consider the following possible attack conditions within one

control iteration from k − 1 to k.

4

• When the robot is free of attack, the 3 measured sensor readings
are consistent with each other as shown in Figure 4 (a). Majority-
voting based approaches raise no alarm. In our approach, we
firstly predict state evolution. Then we compare measured sensor
readings with the predicted states. The consistency indicates that
the robot is not under attack.

• When only sensor attack is launched, and 2 out of 3 sensors are
corrupted (Figure 4 (b)), majority voting-based approaches regard
the two sensors that are consistent with each other to be correct
and the other one as corrupted. Hence, majority voting makes
an obvious mistake here. In our approach, the predicted states
serve as the ground truth, and the deviation between predicted
states and the 2 measured sensor readings indicates sensor attack.
Moreover, our approach can correctly tell which sensors are
corrupted and which is not.

• When only actuator attack is launched (Figure 4 (c)), measured
sensor readings reflect the actual current states and are consistent
with each other, and majority voting-based approaches raises no
alarm. On the contrary, in our approach, we notice deviations
between the measured sensor readings and the predicted states.
The deviations indicate existence of actuator attacks.

Based on the intuition, we present the design of proposed robot
intrusion detection system in the next section.

5 ROBOT INTRUSION DETECTION SYSTEM

DESIGN

We develop a robot intrusion detection system (RIDS) framework
based on estimation theory for the detection of actuator attacks
and sensor attacks. RIDS runs inside the planner (see Figure. 1). The
defender’s goal is as follows: 1) detect actuator and sensor attacks; 2)
identify the targets of detected attacks, i.e., which sensing/actuation
workflows are attacked; 3) quantify the data corruptions of the
detected attacks. Figure 5 shows the schematic of RIDS. Algorithm 1
describes the step-by-step procedure of RIDS. The complete RIDS
algorithm is described as Algorithm 2 in Appendix. Some notations
used in the algorithm are explained in Table 1.

RIDS consists of four modules: a monitor, a multi-mode esti-
mation engine, a mode selector, and a decision maker. RIDS runs
iteratively from the start until the end of a mission. In each control
iteration, the monitor firstly collects data and sends it to the esti-
mation engine. The estimation engine generates a set of estimation
results under different hypothesis and their corresponding likeli-
hoods. Then the mode selector accepts the more likely hypothesis.
Finally the decision maker leverages the estimation results from

Previous statesPredicted statesCurrent statesMeasured sensor readingsState predictionState changeDeviation (a) No attack.                                (b) Sensor attack only.                     (c) Actuator attack only.Figure 5: Robot intrusion detection system (RIDS) overview.

the accepted hypothesis to detect attacks. We explain the detail of
each module in the sequel.

Table 1: Selected notations in Algorithm 1

Notation
ws /wa
cs /ca
αs /αa
M
zj
1,k
N j
k

/zj

2, k

Explanation

sliding window size for sensor/actuator attack
decision criterion for sensor/actuator attack
confidence level for sensor/actuator attack
different modes in RIDS
testing/reference sensor readings in mode j

likelihood of mode j

5.1 Monitor
In each control iteration, control module delivers a copy of control
commands uk −1 to the monitor of RIDS (Algorithm 1 line 2). After
control commands execution, the monitor collects sensor readings
from all onboard sensors zk through the communication module
(line 3). The monitor sends the received data to the multi-mode
estimation engine.

5.2 Multi-mode Estimation Engine
The goal of the estimation engine is to obtain minimum variance
unbiased estimates for actuator attack vectors da
k −1 and sensor at-
tack vectors ds
k in order to determine attack occurrences. Minimum
variance unbiased estimates require that the expected value of es-
timates should equal to their corresponding target value, and the
estimation error variance must be minimized. To achieve this goal,
we use robot state estimates ˆxk as an intermediate, and obtain the
attack vector estimates leveraging the correlation between robot

5

states, sensor readings, and control commands as shown in Figure 2.
However, the estimation engine faces several challenges.

Challenge 1: Majority of sensors could be potentially corrupted,
and we have no knowledge about which sensor(s) is(are) corrupted.
Using corrupted sensor readings would result in wrong state and
attack vector estimates.

Challenge 2: Existing work does not consider actuator attacks,
and directly use planned control commands for state prediction.
Under actuator attacks, executed control commands deviate from
planned control commands. Since executed control command can-
not be directly monitored from the physical world, estimation in
the presence of actuator attacks is challenging.

Challenge 3: Real-world robots are nonlinear systems, and they
are rooted with inaccuracies in sensing and actuation. It is challeng-
ing to build a RIDS which can detect attacks on nonlinear system
subject to noises.

To address challenge 1, we propose a multi-mode estimation
engine that calculates estimates along with the likelihoods of pos-
sible attack conditions. In particular, the multi-mode estimation
engine maintains a set of possible sensor attack conditions. Each
condition is referred to as a mode, which represents a hypothesis
that a particular subset of sensors is potentially attacked, and re-
maining sensors are clean. The potentially attacked sensors are
referred to as testing sensors, and the clean sensors are referred to as
reference sensors. Each mode runs a nonlinear unknown input and
state estimation (NUISE) algorithm in parallel (line 4-7). Leveraging
the reference sensor readings and planned control commands from
the last iteration, NUISE estimates new robot states, corruptions
on testing sensor readings, corruptions on control commands, and
a likelihood for each mode.

NUISE algorithm The NUISE algorithm is described in Figure 6.
At control iteration k − 1, the algorithm predicts the states at next

Algorithm 1 Robot Intrusion Detection System (RIDS)
Input: Initial state estimates ˆx0 |0; robot kinematic function f (·);
measurement function h(·); parameters ws , wa, cs , ca, αs , αa ;

Output: Detection decision; attack vector estimates

1: for control iteration k ← 1 to ∞ do
Receive control commands uk−1;
2:
Receive sensor readings zk ;
for mode j = 1 to M do

3:

4:

Run NUISE with input (uk −1, ˆxk −1|k−1, zj

1,k , zj

2,k ), and

generate ( ˆxj

s, j
, ˆd
k , ˆd
k |k
← max{N j

a, j
k −1, N j
k );
µ j
k µ j
, ϵ };
k −1
k
end for
Select mode Jk ← argmaxj normalized µ j
k ;
Obtain state estimates ˆxj
, sensor attack estimates ˆd
k |k
a, j
and actuator attack estimates ˆd
k −1 from Jk ;
← Chi-square test on sensor attack;
← Chi-square test on actuator attack;

bs
k
ba
k
if bs
k
for each testing sensor t in mode Jk do
s
s
Split sensor attack vector estimates ˆd
k,t from ˆd
k ;
s
if Chi-square test on ˆd
k,t

= True and sliding window condition met then

= True then
Confirm sensor attack on sensor t;

s, j
k ,

end if

end for

= True and sliding window condition met then

end if
if ba
k
Confirm actuator attack;
for each actuator t in all do

a
Split actuator attack vector estimates ˆd
k −1,t from

a
ˆd
k −1;

end for

5:

6:

7:

8:

9:

10:

11:

12:

13:

14:

15:

16:

17:

18:

19:

20:

21:

22:

23:

24:

end if

25:
s
26: return Confirmed attack(s); sensor attack estimates ˆd
k,t (t ∈
a
{testing sensors in mode Jk }); actuator attack estimates ˆd
k −1,t
(t ∈ {1, · · · , n});

27: end for

iteration using using current state estimates ˆxk −1|k−1 and planned
control commands uk −1. The predicted states should reflect a match
with the reference sensor readings z2,k in each mode. Whenever a
deviation is detected between z2,k and the reflected readings, actu-
ator attacks can be detected (Step 1). With the identified actuator
attack estimates from step 1, we conduct a new state prediction
a
+ ˆd
with corrected control commands uk −1
k−1 (Step 2). Then the
predicted states is corrected by reference sensor readings z2,k , and
we obtain the state estimates ˆxk |k (Step 3). Finally, sensor readings
reflected by the state estimates should match all sensor readings,
and the deviations between that and testing sensor readings result
s
in the detection of sensor attacks ˆd
k,t (Step 4). The full NUISE
algorithm is presented as Algorithm 3 in Appendix.

When a mode is not consistent with the actual attack condition,
i.e., corrupted sensors are falsely trusted, reference sensor readings

6

would have a larger discrepancy with state prediction, Subsequently,
the state prediction in step 2 cannot be correctly compensated using
the actuator attack estimates from step 1. NUISE leverages this
discrepancy to generate a likelihood inverse proportional to the
discrepancy.

It is a noteworthy point that the proposed detection algorithm
does not base on voting mechanism. Even when a majority of sensor
readings are corrupted, NUISE generates a higher likelihood for
the mode that reflects the ground truth, independent of the number
of testing/reference sensors in the mode. The number of modes
to be tested grows with the number of sensors in a robot. More
information on how to select the mode set is discussed in Section 7.

Challenge 2 is also addressed in NUISE algorithm. Using previous
state estimates, planned control commands, and reference sensor
a, j
readings, we calculate the actuator attack vector estimates ˆd
k−1
(Step 1). We compensate the actuator attack vector estimates into
the state prediction step (Step 2) to obtain unbiased state prediction.
In order to address challenge 3, we model noises with error co-
variance matrices. The matrices (i.e. noise models) propagation are
tracked during each calculation step for all estimation results (see
Algorithm 3 in Appendix A.2). The matrices serve two purposes:
1) minimizing the variances of the estimates during the estimation
process; 2) normalizing attack vector estimates for hypothesis tests.
In terms of the nonlinearity of the system, we incorporate nonlin-
ear kinematic and measurement models to minimize estimation
error, and use their linearized models to obtain minimum variance
estimates. Notice that linearization is performed at the states and
controls of each iteration.

5.3 Mode Selector
After a normalization, the mode selector compares the likelihood of
each mode µ j
k , and selects the mode Jk with the highest likelihood
(line 8). The state and attack vector estimates of the selected mode
Jk (line 9) will be leveraged for the decision-making process as
follows.

5.4 Decision Maker
s
a
Using the attack vector estimates ˆd
k−1 and ˆd
k , the decision maker
conducts Chi-square test to check whether estimated sensor and
actuator attack vectors exceed the threshold under a certain level
of confidence (line 10-11). In order to reduce the impact of transient
fault during the mission, e.g., uneven ground or bump, etc., testing
results go through a sliding window and RIDS raises alarm only
when a certain number of positives appear in consecutive iterations
(line 12 and line 20).

When the number of sensor attack positives exceeds the decision
criteria cs , RIDS raises sensor attack alarm. To further confirm that
testing sensors are under attack, we separate the sensor attack
estimates and conduct Chi-square test separately for an individual
testing sensor (line 13-18). RIDS reports the confirmed sensors and
their corresponding sensor attack vector. Analogously, RIDS raises
actuator attack alarm, when the actuator attack positives exceed
decision criteria ca (line 21). RIDS calculates actuator attack vector
a
estimates for each actuator ˆd
k −1,i . Note that RIDS does not conduct
Chi-square test on an individual actuator attack. Instead, it only

Figure 6: Nonlinear unknown input and state estimation algorithm execution. Step 1: actuator attack estimation. Step 2: State
prediction with compensation. Step 3: State estimation. Step 4: Testing sensor attack estimation.

and orientation. LiDAR scans laser beams in 240 degrees and re-
ceives reflection to obtain distances from surrounding objects. IPS
is powered by Vicon motion capturing system (see 7(b)), which
tracks the position of the robot. The Kinematic model of Khepera
and the measurement models of the three sensors are described in
Appendix A.3.

Mission We conduct a motion planning mission where the ro-
bot is steered from an initial location to a target location. It avoids
collisions with some obstacles on its path. The mission proceeds
as follows: 1) Before the mission starts, Khepera receives map in-
formation containing the environment setup (obstacles and wall
boundaries) and the target location. 2) The planner calculates a
collision free path using optimal rapidly-exploring random trees
(RRT*) algorithm [28]. 3) The robot executes PID closed-loop con-
trol [51] to track the planned path using real-time positioning data
from IPS.

6.2 Experiment and Attack Setups
Evaluation setup For comparison purpose, we use an identical
path generated from RRT* for all scenarios in the experiments. In
each experiment, Khepera travels from a starting point at (0m,
−1.2m) to a target point (0m, 1m) inside a 3m × 4m confined space
shown in Figure 7(b), with constant 7000 speed units1. Three 0.8m ×
0.2m × 0.2m cube-shaped obstacles are on the ground between the
starting and the target location. RRT* algorithm generates a path
that avoids the obstacles, and Khepera follows the path using PID
(P = 0.8, I = 0, D = 0.001) control. We identify measurement noise
covariance R and the process noise covariance Q by referring to the
data sheets of the sensors along with some empirical experiments
(refer to [6] for more systematic approaches). RIDS generates detec-
tion results under confidence level of 0.05 for actuator attacks, and
0.005 for sensor attacks. We choose 2 positives out of 2 windows
as the decision criteria for sensor attacks, and choose 3 positives
out of 6 windows as the decision criteria for actuator attacks. We
will justify how these configurations are chosen in Section 6.6 by
evaluating RIDS across a range of different parameters.

Attack setup We conduct multiple attack scenarios during the
mission as described in Table 2. We intend to demonstrate that RIDS
works well regardless of the attack channels or sensor/actuator tar-
gets on the robot. The attack scenarios target on different sensing

1Speed ratio 144010 units per m/s, 7000 units is approximately 0.05m/s.

7

(a) Khepera differential drive mo-
bile robot.

(b) Indoor experiment environment with Vi-
con indoor positioning system.

Figure 7: Khepera robot testbed and indoor positioning sys-
tem.

checks the aggregated test statistics of actuator attack (explained
in Appendix A.4).

Finally, the decision maker reports confirmed attack(s), sensor
attack estimates, and actuator attack estimates to the security ad-
ministrative as output.

6 EVALUATION
To understand the detection effectiveness and efficiency of RIDS for
real-world robots, we implement RIDS on a Khepera mobile robot
testbed, and conduct experiments under multiple attack scenarios.
In this section, we first introduce the testbed and the mission. Then
we describe the experiment setups and attack scenarios launched
against Khepera. We analyze the detection results and discuss key
parameter selection at last.

6.1 Robot Platform and Mission
Figure 7(a) shows an image of the robot system. It consists of Khep-
era III [3] differential drive robot mounted with KoreBot II [4]
extension chip. Khepera is actuated by two wheels on its chassis.
KoreBot runs OpenEmbedded Linux, which enables in-robot pro-
gramming and control. The robot is equipped with three sensors:
a wheel encoder, a laser range finder (LiDAR), and an indoor po-
sitioning system (IPS). The wheel encoder calculates the traveled
distance of each wheel in a short period. Given its previous state,
the traveled distance is further processed into its current position

Table 2: Attack scenarios launched against Khepera mobile robot.

Attack Scenario
Wheel controller logic bomb
Wheel jamming
IPS logic bomb
IPS spoofing
Wheel encoder logic bomb
LiDAR sensor blocking
LiDAR DOS
Wheel controller and IPS logic bombs
LiDAR DOS and wheel encoder logic bomb Blocking LiDAR readings and altering wheel encoder readings
IPS spoofing and LiDAR DOS
IPS and wheel encoder logic bombs

Attack Scenario Description
Logic bomb in the actuator utility library that alters the control commands to be executed
Physically jamming a particular wheel so that the wheel sticks
Logic bomb in the IPS data processing library that alters authentic positioning data
Fake IPS signal that overpowers authentic source and sends out fake positioning data
Logic bomb in the wheel encoder data processing library that alters readings
Blocking laser ejection and reception in particular angles of the LIDAR
Denial of service by cutting off the LiDAR sensor wire connection
Altering both wheel control commands and IPS readings through logic bombs

Altering IPS readings and blocking LiDAR readings
Altering both IPS and wheel encoder readings through logic bombs

or actuation workflows of the robot, and launch actuator and sen-
sor attacks through various channels including cyber and physical
channels. We inject several logic bombs into the data processing
libraries of the IPS and the wheel encoder. The logic bombs can be
triggered at a particular time after the mission starts, and continu-
ously alter the authentic sensor readings afterward. For instance,
we can trigger the logic bomb to stealthily shift the positioning
data received from IPS by a certain distance along the X axis. A
logic bomb is also injected into the wheel controller library to alter
control commands for the two wheels. Wheel jamming attack is
launched by physically jamming a wheel so that the wheel stops
moving. IPS spoofing attack is launched by overriding authentic IPS
signals from the Vicon system and sending fake positioning data,
analogously to GPS spoofing attacks. For LiDAR, we launch sensor
attack by blocking the signal ejection and reception channel in par-
ticular directions. Besides, we launch the attack that sabotages the
signal transmission by physically cutting off its wire connection. To
evaluate the RIDS when multiple sensing workflows or actuation
workflows are under attack, we launch several attack scenarios
where several of the aforementioned attacks are combined. Table 3
shows quantitative information about the details of the attack sce-
narios. In addition to attack scenarios, we also conduct 9 scenarios
under which the mission finishes without attack.

6.3 Detection Effectiveness
RIDS aims at detecting, identifying, as well as quantifying attacks
in robots. To evaluate the effectiveness of RIDS, we define true
positive as a time instant that 1) raises alarm if the robot is under
attack, and 2) identifies the correct sensor/actuator attack condition,
i.e., which sensing or actuation workflow is attacked. Otherwise,
positive detection result is considered as false positive. False negative
is defined as a time instant when RIDS does not raise alarm when
any workflow is under attack. If all workflows are free of attacks and
RIDS does not raise any alarm, the time instant is referred to as true
negative. The detection result column in Table 3 shows identification
of attack type and attack condition for different scenarios. From the
11 attack scenarios, we observe that both types of attacks launched
from different channels can be successfully detected and identified.
Scenario #1, #2 and #8 involves actuator attacks launched from
different channels. The robot is under both actuator and sensor

8

attack under scenario #8. Under scenario #8, #9 and #10, 2 out of
3 sensors on the robot are corrupted and only one sensor remains
uncorrupted.

For the ease of presenting classification results, Table 4 defines
the possible attack conditions for actuator and sensor attacks. We
refer to these attack conditions as sensor modes and actuator modes.
Figure ?? presents graphical details of the detection results for sev-
eral attack scenarios. Each figure includes eight plots that depicts
the outputs from RIDS: 1) IPS sensor attack vector estimates (ds
k, I );
2) wheel encoder sensor attack vector estimates (ds
k,W ); 3) LiDAR
sensor attack vector estimates (ds
k, L); 4) actuator attack vector esti-
mates for the wheels (da
k ); 5) sensor attack Chi-square hypothesis
test statistic and threshold under confidence level α = 0.005; 6)
sensor mode selection; 7) actuator attack Chi-square hypothesis
test statistic and threshold under confidence level α = 0.05; 8)
actuator mode selection. Figure ?? shows a scenario when wheel
controller control commands and IPS sensor readings are tampered
by logic bombs at different time instants. Around 4s, IPS sensor
attack vector estimates on the X axis surge (plot 1). Accordingly,
sensor attack test statistic surges above the threshold (plot 5), and
sensor mode selection (plot 6) indicates that the robot is under IPS
sensor attack. Around 10s, actuator attack vector estimates on the
left and right wheel significantly deviate from 0. Accordingly, we
notice an oscillating surge over the threshold for actuator attack
(plot 7), and actuator mode selection (plot 8) indicates that the
robot is under actuator attack. Throughout the experiment, both
sensor attack estimates for wheel encoder and LiDAR remain silent.
Figure ?? shows a scenario where attacks against multiple sensors
are launched/revoked at four different time instants. We observe
that the detection results are highly consistent with the attack sce-
nario. Detection results for some other scenarios can be found in
Appendix A.6.

We examine the false positive and false negative time instants
occurred in the experiments. Majority of false classifications are
introduced by the sliding window for the purpose of transient fault
tolerance. False positives and false negatives are inevitable at the
edge when an attack becomes active or revoked, and the choice

2False positive rate and false negative rate.
3Subscript i → j stands for transition from sensor/actuator mode i to mode j. W, I,
and L stands for wheel encoder, IPS, and LiDAR, respectively.

Table 3: Attack scenarios and detection results from RIDS.

Attack Scenario

Launch
Time (s)

Attack Type
(Channel)

Attack Description

Detection
Result

Detection
Delay (s)

FPR/FNR2

#

1

Wheel controller
logic bomb

16.0

2 Wheel jamming

5.3

19.0

26.0

16.0

0.0

7.0

W: 10.0
I: 3.8

W: 16.0
L: 25.0

L: 10.0
I: 17.0
L: 25.0

3

4

5

6

7

8

9

IPS logic bomb

IPS spoofing

Wheel encoder
logic bomb

LiDAR DOS

LiDAR sensor
blocking
Wheel controller &
IPS logic bomb
LiDAR DOS &
wheel encoder
logic bomb

10

11

IPS spoofing &
LiDAR DOS

IPS &
wheel encoder
logic bomb

Actuator
(cyber)
Actuator
(physical)
Sensor
(cyber)
Sensor
(physical)
Sensor
(cyber)
Sensor
(physical)
Sensor
(physical)
Sensor&Actuator
(cyber)

-6000 units on vL
+6000 units on vR

0 unit on vL

shift +0.07m on X

shift −0.1m on X

increment 100 steps on
left wheel encoder
received distance reading is
0m in each direction
received distance reading to
the left wall is incorrect
∓6000 units on vL , vR
shift +0.07m on X

A0→1

3

A0→1

S0→1

S0→1

S0→2

S3

S0→3

A0→1
S0→1

Sensor
(cyber&physical)

increment 100 steps on left wheel
0m in each direction from LiDAR

S0→2→4

Sensor
(physical)

0m in each direction from LiDAR
shift +0.07m on X
LiDAR readings are restored to normal

S0→3→5→1

0.49

0.76

0.30

0.24

0.43

0.23

0.55

W: 0.59
I: 0.50

W: 0.43
L: 0.29

L: 0.36
I: 0.29
L: 0.30

W: 0.33
I: 0.31

A: 0 / 0.83%
S: 1% / -
A: 0 / 3.1%
S: 0 / -
A: 0 / -
S: 1.6% / 0.24%
A: 2.24% / -
S: 1.55% / 1.39%
A: 1.4% / -
S: 0 / 0.45%
A: 0 / -
S: 0 / 0
A: 0.22% / -
S: 0 / 0.80%
A: 0 / 1.8%
S: 0 / 0.24%

A: 0 / -
S: 0.48% / 0.72%

A: 0.25% / -
S: 0.25% / 0.58%

A: 0 / -
S: 0.25% / 0.33%

W: 10.0
I: 28.0

Sensor
(cyber)

increment 100 steps on left wheel
shift +0.1m on X

S0→2→6

Table 4: Sensor and actuator mode definition.

Sensor
Mode #
S0
S1
S2
S3
S4
S5
S6
Actuator
Mode #
A0
A1

Robot Attack Condition

under no sensor attack
under IPS sensor attack
under wheel encoder sensor attack
under LiDAR sensor attack
under wheel encoder and LiDAR sensor attack
under IPS and LiDAR sensor attack
under IPS and wheel encoder sensor attack

Robot Attack Condition

under no actuator attack
under actuator attack

of window size and decision criteria determines the number of
false classifications. For sensor attack false positives, we observe
only a small portion is caused by sensor or actuator mode selection
errors, while the majority is caused by bogus test statistics increases.
The average false positive rate and false negative rates are 0.86%
and 0.97%, respectively. Therefore, we believe the RIDS can be
considered as effective in detecting and identifying both actuator
attacks and sensor attacks targeted on our testbed.

9

6.4 Detection Delay
Detection delay indicates the time between when an attack is
launched/revoked, and when RIDS captures the change. Theoret-
ically, in each control iteration, attack vectors can be revealed in
the very next iteration after launch. However, we add a sliding
window in the decision maker to eliminate transient fault impact.
Hence, detection delays will depend on the parameter choice. In
our experiment, we choose 2/2 and 3/6 as the decision criteria and
sliding window size. The detection delay for each attack scenario
is shown in Table 3. We observe that the detection delays are quite
small. Specifically, average detection delay for sensor attacks is
0.35s, and the counterpart for actuator attacks is 0.61s. The average
delays are consistent with our parameter selection for actuator and
sensor attacks. Through our analysis of the detection statistics, we
notice that the test statistics raises above the threshold mostly in
the next iteration after an attack occurs. Most delays are incurred
by the sliding window decision making.

Once the magnitude of an attack exceed predetermined thresh-
old, the maximal detection delay is a constant multiple of control
iterations. The frequency of the control iteration is determined by
hardware configurations (e.g., CPU frequency) and control algo-
rithm design, which is chosen to meet the specifications of robots
and mission requirement. Fast moving robots have higher frequency
of control cycles, hence the detection delay would be small.

6.5 Attack Vector Quantification
Actuator attack and sensor attack vector estimates provide quan-
titative information about the attacks, which can assist security
administrative for further diagnosis and attack response. For in-
stance, after sensor attack detection in scenario #9, IPS sensor attack
vector estimates on X axis ds,x
k, I is +0.069m with a standard devia-
tion of ±0.002m. Average error between estimated vector and the
ground truth (+0.07m) is 1.91%. After actuator attack detection,
average actuator attack vector estimates on the left wheel and right
wheel are da, L
= −5975.4 ± 1188 units and da, R
= +5892.4 ± 1091
units, respectively. Average error between the estimated vector and
the ground truth (∓6000 units) are 0.41% and 1.79%, respectively.
We observe that the estimation results are fairly accurate for both
actuator and sensor attack vector estimates.

k

k

6.6 Parameter selection
We evaluate the detection effectiveness of RIDS across different
choices of detection window sizes (w), detection criteria (c), and
detection confidence level (α) in detection of actuator and sensor
attacks. The analysis is conducted over the 20 experiments including
11 different attack scenarios and 9 no-attack scenarios. Figure ??
depicts the ROC curve for actuator attack detection under different
confidence levels range from α = 0.0005 ∼ 0.995. From the figure,
we notice that the detection achieves an acceptable performance
when α = 0.05 under different w and c settings. The selection
of w and c eliminates the impact of faults during the mission and
determines whether a positive time instant should be regarded as an
attack. with a chosen α, Figure ?? depicts the detection performance
under different w and c. The results indicate that under certain
window size, detection performance increases first and reduces
afterward. We select c/w = 3/6 as the configuration, which yields
the best performance. Analogously, we select α = 0.005 as the
optimal confidence level, and c/w = 2/2 as the optimal decision
criteria/window size configuration for sensor attack detection.

6.7 Evasive attacks
An attacker’s ideal goal is to bypass the detection of RIDS, yet be ca-
pable of causing significant impact to the robot or the environment
it operates in. We can think of two possible ways of crafting such
evasive attacks: 1) reduce attack vectors so that the test statistics
in RIDS do not raise alarms; 2) frequently switch attack targets so
that sliding window will treat the attack vectors as faults. Under
the current RIDS configuration (α, w, c and sensor accuracy) in our
experiments, the attack vector needs to be extremely small to re-
main alarm silence. For instance, we find that the distance shift for
IPS sensor attack needs to remain under 0.02m to avoid detection.
The speed alteration needs to remain under 900 units (0.006m/s)
to avoid detection. Moreover, the control algorithm ensures that
attack impact does not accumulate as time goes. Hence, we believe
that an attacker cannot make a significant impact with the first
approach. Since we demonstrate that the detection delay is small in
Section 6.4, the impact of the second attack cannot succeed either.

7 DISCUSSION
In this section, we discuss some issues related to applying the RIDS
to real-world robots.

10

General applicability RIDS is applicable to nonlinear systems,
which covers majority of real-world complicated robot systems,
such as UAV [43] and quadrotor [35]. The design and implementa-
tion of RIDS only require the kinematic model and the measurement
model. In fact, both models are the essential requirements for any
robot mission. Therefore, the RIDS incurs little extra mathemati-
cal modeling burden for security administrative. We present how
RIDS can be applied to UAV as another type of nonlinear system in
Appendix A.5.

Mimicry attacks Admittedly, RIDS cannot handle all active at-
tacks targeted on robots. The attacker might carefully craft attacks
vectors such that the mode probability of an incorrect mode be
large as that of the true mode, for all the time. If this happens, RIDS
can detect attacks as long as one sensor is clean, but might not be
able to identify the correct attack vectors. Consider the case that
the attacker launch mimicry attacks but at least one sensor is clean.
If the mode estimator chooses incorrect mode, the actuator attack
estimates would be incorrect since corrupted sensor is used as a
reference sensor, but RIDS would notice that physical dynamics
with incorrect actuator attack estimates are inconsistent with the
testing sensor reading (uncorrupted sensor). Thus, RIDS will raise
the alarm, although the attack vector estimates remain incorrect. If
the mode selector chooses the correct mode, then RIDS estimates
correct attack vectors as we explained beforehand. It is notewor-
thy that launching mimicry attacks requires more knowledge and
computational power for the attacker, because the attacker should
consider the influence of attacks on physical dynamics.

Noise, fault, and attack RIDS models measurement noises
and process noises of a robot and estimates data corruptions with
tracked noise propagation. Under certain confidence level, RIDS
would not raise alarm under the influence of noises. In this paper,
data corruptions model the effects of actuator and sensor attacks. In
fact, unintentional actuator and sensor fault/malfunctioning may
also result in the detection of data corruptions. From security and
safety perspective, both fault and attack may thwart mission execu-
tion, and RIDS conducts the detection without distinguishing the
two cases. Approaches to distinguish faults and attacks can lever-
age statistical or knowledge-based fault modeling [14, 45], which is
beyond the scope of this paper. For the attacks that can be detected
and identified, RIDS cannot distinguish different attack channels
which result in the same attack vectors.

Mode set selection In the multi-mode estimation engine de-
sign, each mode represents a hypothesis that particular reference
sensors are clean and the rest of testing sensors are potentially
corrupted. The number of modes M grow linearly with the number
of onboard sensors in a robot, and the computational complexity
grows accordingly. The choice of M is a trade-off between com-
putational complexity and detection accuracy. In particular, with
m sensing workflows, the number of possible attack conditions
= 2m − 1 (exclude the con-
grows exponentially where Mcompl et e
dition when all sensors are corrupted). Noticeably, the mode set
that assumes only one reference sensor remains the same detec-
= 2m − 1
tion capability with that which considers Mcompl et e
as demonstrated in [30]. Hence, we employ the current mode set
in the multi-mode estimation engine in favor of computational
complexity. In the NUISE algorithm of each mode, reference sensor

readings are leveraged in the estimation process, and their sensing
variances are propagated into the the state and attack vector esti-
mates (see the propagation of Rj
2,k in Algorithm 3). When multiple
reference sensors are available in a mode, the estimation process
can perform sensor fusion [52] and reduce estimation variances.
Hence, adding more modes into the estimation engine increases
the detection accuracy when multiple sensors remain uncorrupted.
Table 5 shows actuator attack vector variance comparison in dif-
ferent modes. Noticeably, the mode which assumes all sensors are
uncorrupted generates lowest variance.

Table 5: Actuator attack vector quantification variance un-
der different mode.

Reference Sensor(s) Var on Vl (×10−5) Var on Vr (×10−5)
IPS
Wheel encoder
LiDAR
all sensors

2.39
2.76
21.7
2.32

1.94
2.04
20.3
1.88

Sensor capability This paper only considers mobile robot states
in terms of movements. Hence, sensors that measure other statuses
of robots, e.g., temperature, tire pressure, are out of scope. During
the estimation process, the NUISE Algorithm estimates robot states
using reference sensor readings in each mode. A requirement is that
the reference sensor(s) in each mode are capable of reconstructing
all robot states in a control iteration. However, some sensors might
not be utilized to reconstruct all states of a robot. For instance,
consider a ground robot equipped with a magnetometer which can
only measure the orientation θM of the robot. Since robot states
are described as (xk , yk , θk ), the measurement from magnetometer
cannot reconstruct the robot states. If the robot runs RIDS, then
the mode that only takes magnetometer as reference sensor will
fail to estimate the states and the attack vectors. Under such cases,
RIDS designers can group multiple sensors together to ensure the
reference sensors of each mode can reconstruct robot states. For
instance, the magnetometer can be grouped together with a GPS
sensor and use h(xk ) = [xk , yk , θk , θk ]T as their joint measurement
model.

8 RELATED WORK
The security of robots and other cyber-physical systems (CPS) has
been attracting increasing attention. In this section, we review some
preliminary studies concerning several topics related to this work.
Existing attacks on robots Preliminary works identified at-
tacks launched through different channels, including physical dam-
age, network communication, signal interference, malware, etc.
Koscher et al. demonstrated that virtually any ECUs inside the
internal vehicular network of a modern vehicle can be infiltrated
through physical access [32]. Checkoway et al. further demon-
strated that remote exploitation through wireless channels, such
as Bluetooth or cellular radio, is also possible [9]. AnonSec group
took over a NASA Global Hawk drone and tried to crash the drone
into the ocean by breaking into internal network [54]. Several stud-
ies [23, 57, 67] investigated spoofing attacks targeted on civilian
GPS signals. Some researchers have also implemented deceptive

spoofers and conducted proof of concept attack experiments [23, 42].
Son et al. [56] demonstrated that resonant frequency of sound could
be used to incapacitate a drone through its gyroscope sensor. Al-
though at an early development stage, robot malware has already
debuted. Sasi [29] developed a backdoor program which allows
attackers to control the drone remotely.

Intrusion detection for CPSs State estimation theory has been
utilized to detect sensor attacks for linear cyber-physical systems
in recent works [7, 41, 44, 45]. Several works [20, 46, 64] study both
actuator and sensor attacks for linear cyber-physical systems with
estimation theory. In contrast, most real-world robots are modeled
as nonlinear systems, such as Khepera and UAVs. In [20, 44–46],
processing and measurement noises rooted in actuators and sen-
sors are not considered or considered with bounded support. In
contrast, real-world robots are subject to stochastic noises with
unbounded support. Shoukry et al. [55] proposed a sensor attack
detection approach against signal interference attacks by verifying
randomly inserted probes. A few studies in sensing systems pro-
posed GNSS attack detection techniques [42, 50]. Montgomery et al.
proposed to detect GNSS attacks by exploiting the effects of inten-
tional high-frequency antenna motion [42]. Psiaki et al. validated
the correctness of civilian GPS signals using dual-receiver corre-
lation of military signals [50]. Some of these techniques require
homogeneous sensors or extra hardware to enable a comparison
between sensors, and some require cryptography for authentica-
tion purposes. In robot systems, sensors usually measure different
physical signal configurations. Extra hardware brings additional
costs and burdens for power supply and weight carrying.

9 CONCLUSION AND FUTURE WORK
Sensor attacks and actuator attacks targeted on mobile robots im-
pose a huge security threat. In this study, we propose the first practi-
cal robot intrusion detection system framework called RIDS, which
is capable of detecting, identifying and quantifying both types of
attacks. We conduct experiments on Khepera testbed which runs
a motion planning mission. Our evaluation results show satisfac-
tory detection performance under high significance levels with
negligible detection delays. Future work will focus on designing
and synthesizing computationally efficient intrusion response algo-
rithms after detection.

REFERENCES
[1] 2009. Executive Summary of World Robotics 2009. http://www.dis.uniroma1.it/

~deluca/rob1_en/2009_WorldRobotics_ExecSummary.pdf. (2009).

[2] 2016. Car Hacking Research: Remote Attack Tesla Motors. Keen Security Lab
of Tencent. http://keenlab.tencent.com/en/2016/09/19/Keen-Security-Lab-of-
Tencent-Car-Hacking-Research-Remote-Attack-to-Tesla-Cars/. (2016).

[3] 2016. K-Team Mobile Robotics - Khepera III. http://www.k-team.com/mobile-

robotics-products/old-products/khepera-iii. (2016).

[4] 2016. K-Team Mobile Robotics - KoreBot II. http://www.k-team.com/mobile-

robotics-products/old-products/korebot-ii. (2016).

[5] Kahraman D Akdemir, Deniz Karakoyunlu, Taskin Padir, and Berk Sunar. 2010.

An emerging threat: eve meets a robot. In Trusted Systems.

[6] Vinay A Bavdekar, Anjali P Deshpande, and Sachin C Patwardhan. 2011. Identi-
fication of process and measurement noise covariance for state and parameter
estimation using extended Kalman filter. Journal of Process control (2011).
[7] Nicola Bezzo, James Weimer, Miroslav Pajic, Oleg Sokolsky, George J Pappas,
and Insup Lee. 2014. Attack resilient state estimation for autonomous robotic
systems. In IROS.

[8] Miguel Castro, Barbara Liskov, et al. 1999. Practical Byzantine fault tolerance. In

OSDI.

11

[9] Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav
Shacham, Stefan Savage, Karl Koscher, Alexei Czeskis, Franziska Roesner, Ta-
dayoshi Kohno, et al. 2011. Comprehensive Experimental Analyses of Automotive
Attack Surfaces.. In USENIX Security.
Jie Chen, Ron J Patton, and Hong-Yue Zhang. 1996. Design of unknown input
observers and robust fault detection filters. Internat. J. Control (1996).

[10]

[11] Yue Cheng, Hao Ye, Yongqiang Wang, and Donghua Zhou. 2009. Unbiased
minimum-variance state estimation for linear systems with unknown input.
Automatica (2009).
Jung Jin Cho, Yong Chen, and Yu Ding. 2004. Redundancy Analysis of Linear Sen-
sor Systems and Its Applications. https://ww.orchampion.org/content/download/
55235/522615/file/redundancy.pdf. (2004).

[12]

[14]

[13] EYEY Chow and A Willsky. 1984. Analytical redundancy and the design of robust
failure detection systems. IEEE Transactions on automatic control (1984).
Jonny Carlos da Silva, Abhinav Saxena, Edward Balaban, and Kai Goebel. 2012.
A knowledge-based system approach for sensor fault modeling, detection and
mitigation. Expert Systems with Applications (2012).

[15] Mohamed Darouach and Michel Zasadzinski. 1997. Unbiased minimum variance

estimation for systems with unknown exogenous inputs. Automatica (1997).

[16] Rodrigo Maximiano Antunes de Almeida, Luis Henrique de Carvalho Ferreira,
and Carlos Henrique Valério. 2013. Microkernel development for embedded
systems. Journal of Software Engineering and Applications (2013).

[17] Giuseppe De Nicolao, Giovanni Sparacino, and Claudio Cobelli. 1997. Nonpara-
metric input estimation in physiological systems: problems, methods, and case
studies. Automatica (1997).

[18] Marco Di Natale. 2008. Understanding and using the Controller Area network.

(2008).

[19] Hugh Durrant-Whyte and Tim Bailey. 2006. Simultaneous localization and

mapping. IEEE robotics & automation magazine (2006).

[20] Hamza Fawzi, Paulo Tabuada, and Suhas Diggavi. 2014. Secure estimation
and control for cyber-physical systems under adversarial attacks. IEEE Trans.
Automat. Control (2014).

[21] Anita M Flynn. 1985. Redundant sensors for mobile robot navigation. (1985).
[22] M Hou and RJ Patton. 1998. Optimal filtering for systems with unknown inputs.

IEEE Trans. Automat. Control (1998).

[23] Todd E Humphreys, Brent M Ledvina, Mark L Psiaki, Brady W OâĂŹHanlon,
and Paul M Kintner Jr. 2008. Assessing the spoofing threat: Development of a
portable GPS civilian spoofer. In ION GNSS.
IDC. 2016. MANUFACTURING Press Release. http://www.idc.com/getdoc.jsp?
containerId=prUS41046916. (2016).

[24]

[39] W Liu and I Hwang. 2011. Robust estimation and fault detection and isolation
algorithms for stochastic linear hybrid systems with unknown fault input. IET
control theory & applications (2011).

[40] Charlie Miller and Chris Valasek. 2015. Remote exploitation of an unaltered

passenger vehicle. Black Hat USA (2015).

[41] Yilin Mo, Emanuele Garone, Alessandro Casavola, and Bruno Sinopoli. 2010.
False data injection attacks against state estimation in wireless sensor networks.
In CDC.

[42] Paul Y Montgomery, Todd E Humphreys, and Brent M Ledvina. 2009. Receiver-
autonomous spoofing detection: Experimental results of a multi-antenna receiver
defense against a portable civil GPS spoofer. In ITM.

[43] Abdelkrim Nemra and Nabil Aouf. 2009. Robust INS/GPS sensor fusion for UAV
localization using SDRE nonlinear filtering. IEEE Sensors Journal (2009).
[44] Miroslav Pajic, Paulo Tabuada, Insup Lee, and George J Pappas. 2015. Attack-
resilient state estimation in the presence of noise. In 2015 54th IEEE Conference
on Decision and Control (CDC).
Junkil Park, Radoslav Ivanov, James Weimer, Miroslav Pajic, and Insup Lee. 2015.
Sensor attack detection in the presence of transient faults. In ICCPS.

[45]

[46] Fabio Pasqualetti, Florian Dorfler, and Francesco Bullo. 2013. Attack detection and
identification in cyber-physical systems. Automatic Control, IEEE Transactions
on (2013).

[47] Vern Paxson. 1999. Bro: a system for detecting network intruders in real-time.

[48]

[49]

Computer networks (1999).
Jonathan Petit, Bas Stottelaar, Michael Feiri, and Frank Kargl. 2015. Remote
Attacks on Automated Vehicles Sensors: Experiments on Camera and LiDAR. In
Black Hat Europe. https://www.blackhat.com/docs/eu-15/materials/eu-15-Petit-
Self-Driving-And-Connected-Cars-Fooling-Sensors-And-Tracking-Drivers-
wp1.pdf
Jonathan Petit, B Stottelaar, M Feiri, and F Kargl. 2015. Remote attacks on
automated vehicles sensors: Experiments on camera and lidar. Black Hat Europe
(2015).

[50] Mark L Psiaki, Brady W O’Hanlon, Jahshan A Bhatti, Daniel P Shepard, and
Todd E Humphreys. 2011. Civilian GPS spoofing detection based on dual-receiver
correlation of military signals. ION GNSS (2011).

[51] Daniel E Rivera, Manfred Morari, and Sigurd Skogestad. 1986. Internal model
control: PID controller design. Industrial & engineering chemistry process design
and development (1986).
JA Roecker and CD McGillem. 1988. Comparison of two-sensor tracking methods
based on state vector fusion and measurement fusion. IEEE Trans. Aerospace
Electron. Systems (1988).

[52]

[25] Andrew H Jazwinski. 2007. Stochastic processes and filtering theory. Courier

[53] Martin Roesch et al. 1999. Snort: Lightweight Intrusion Detection for Networks..

Corporation.

[26] Leopoldo Jetto, Sauro Longhi, and Giuseppe Venturini. 1999. Development and
experimental validation of an adaptive extended Kalman filter for the localization
of mobile robots. Robotics and Automation, IEEE Transactions on (1999).
[27] Thomas Kailath, Ali H Sayed, and Babak Hassibi. 2000. Linear estimation. Prentice

Hall.

[28] Sertac Karaman and Emilio Frazzoli. 2011. Sampling-based algorithms for optimal

motion planning. The International Journal of Robotics Research (2011).

[29] Swati Khandelwal. 2015.

MalDrone - First Ever Backdoor Malware
for Drones. http://thehackernews.com/2015/01/MalDrone-backdoor-drone-
malware.html. (2015).

[30] Hunmin Kim, Pinyao Guo, Minghui Zhu, and Peng Liu. 2017. Attack-resilient Es-
timation of Switched Nonlinear Cyber-Physical Systems, to appear. In American
Control Conference (ACC).

[31] Peter K Kitanidis. 1987. Unbiased minimum-variance linear state estimation.

Automatica (1987).

[32] Karl Koscher, Alexei Czeskis, Franziska Roesner, Shwetak Patel, Tadayoshi Kohno,
Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav
Shacham, et al. 2010. Experimental security analysis of a modern automobile. In
S&P.
Jayesh H Kotecha and Petar M Djuric. 2003. Gaussian particle filtering. IEEE
Transactions on signal processing (2003).

[33]

[34] Bhaskar Krishnamachari and Sitharama Iyengar. 2004. Distributed Bayesian
algorithms for fault-tolerant event region detection in wireless sensor networks.
IEEE Trans. Comput. (2004).

[35] Vijay Kumar and Nathan Michael. 2012. Opportunities and challenges with

[36]

autonomous micro aerial vehicles. IJRR (2012).
John Leonard, Jonathan How, Seth Teller, Mitch Berger, Stefan Campbell, Gaston
Fiore, Luke Fletcher, Emilio Frazzoli, Albert Huang, Sertac Karaman, et al. 2008.
A perception-driven autonomous urban vehicle. Journal of Field Robotics (2008).
[37] Feng Li, Avinash Srinivasan, and Jie Wu. 2008. PVFS: a probabilistic voting-based
filtering scheme in wireless sensor networks. International Journal of Security
and Networks (2008).

[38] Todd Litman. 2014. Autonomous vehicle implementation predictions. Implica-

tions for transport planning. http://www.vtpi.org/avip.pdf. (2014).

In LISA.

[54] Mary Ann Russon. 2016.

$222m drone, releases secret flight videos and employee data.
http://www.ibtimes.co.uk/nasa-hack-anonsec-attempts-crash-222m-drone-
releases-secret-flight-videos-employee-data-1541254

NASA hack: AnonSec attempts to crash
(2016).

[55] Yasser Shoukry, Paul Martin, Yair Yona, Suhas Diggavi, and Mani Srivastava.
2015. PyCRA: Physical Challenge-Response Authentication For Active Sensors
Under Spoofing Attacks. In Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security.

[56] Yunmok Son, Hocheol Shin, Dongkwan Kim, Youngseok Park, Juhwan Noh,
Kibum Choi, Jungwoo Choi, and Yongdae Kim. 2015. Rocking drones with
intentional sound noise on gyroscopic sensors. In USENIX Security.

[57] Nils Ole Tippenhauer, Christina Pöpper, Kasper Bonne Rasmussen, and Srdjan
Capkun. 2011. On the requirements for successful GPS spoofing attacks. In CCS.
[58] Chris Urmson, J Andrew Bagnell, Christopher R Baker, Martial Hebert, Alonzo
Kelly, Raj Rajkumar, Paul E Rybski, Sebastian Scherer, Reid Simmons, Sanjiv
Singh, et al. 2007. Tartan racing: A multi-modal approach to the darpa urban
challenge. (2007).

[59] Carl van Schaik and Gernot Heiser. 2007. High-performance microkernels and
virtualisation on ARM and segmented architectures. In Proceedings of the 1st
International Workshop on Microkernels for Embedded Systems, Sydney, Australia.
[60] Christina Warrender, Stephanie Forrest, and Barak Pearlmutter. 1999. Detecting
intrusions using system calls: Alternative data models. In Security and Privacy,
1999. Proceedings of the 1999 IEEE Symposium on.

[61] Wikipedia. 2016. Iran-U.S. RQ-170 incident — Wikipedia, The Free Encyclopedia.

(2016).

[62] Chen Yan, X Wenyuan, and Jianhao Liu. 2016. Can you trust autonomous vehicles:

Contactless attacks against sensors of self-driving vehicle. DEF CON (2016).

[63] Dit-Yan Yeung and Yuxin Ding. 2003. Host-based intrusion detection using

dynamic and static behavioral models. Pattern recognition (2003).

[64] S Yong, M Zhu, and E Frazzoli. 2015. Resilient state estimation against switching

attacks on stochastic cyber-physical systems. In CDC.

[65] S Z Yong, M Zhu, and E Frazzoli. 2016. A unified filter for simultaneous input and
state estimation of linear discrete-time stochastic systems. Automatica (2016).
[66] Zheng Yong, Minghui Zhu, and Emilio Frazzoli. 2016. Simultaneous Mode, Input
and State Estimation for Switched Linear Stochastic Systems. arXiv preprint

12

arXiv:1606.08323 (2016).

[67] S Zaragoza and E Zumalt. 2013. Spoofing a Superyacht at Sea. Cockrell School of

Engineering, UT Austin (2013).

A APPENDIX
A.1 Complete RIDS Design Algorithm

Algorithm 2 Complete Robot Intrusion Detection System (RIDS)
Input: Initial state estimates ˆx0 |0; robot kinematic function f (·);

measurement function h(·)

Output: Detection decision; attack vector estimates

1: Set parameters ws , wa, cs , ca, αs , αa ;
2: Initialize;
3: for control iteration k ← 1 to ∞ do
Receive control commands uk −1;
4:
Receive sensor readings zk ;
for mode j = 1 to M do

6:

5:

Run NUISE with input (uk −1, ˆxk −1|k −1, zj
a, j
k , P a, j
k −1, P x, j
, ϵ };

, ˆd
k |k
← max{N j

k , P s, j

1,k , zj
k −1, N j
k );

2,k , P x

k −1),

s, j
k , ˆd
k µ j

and generate ( ˆxj
µ j
k
end for
for mode j = 1 to M do
µ j
k
(cid:205)M
i =1 µ i
k

¯µ j
k

k −1

←

;

end for
Sensor mode accept Jk ← argmaxj ¯µ j
k ;
Obtain estimates and covariance matrices from Jk : ˆxk |k ←
s, Jk
a, Jk
s
a
, ˆd
k ← ˆd
, ˆd
k −1 ← ˆd
k −1 , P x
k
k
T
(P s, Jk
← ( ˆds
)−1 ˆds
k
k
a T
k −1(P a, Jk
← ( ˆd
k−1
= T rue and (cid:205)ws −1

ˆxJk
k |k
bs
k
ba
k
if bs
i=0 bs
k
for each testing sensor t in mode Jk do

k > χ 2
s
p= | ˆd
k |
a
)−1 ˆd
k −1 > χ 2

← P x, Jk
k
(αs ));

a
p= | ˆd
k −1 |
≥ cs then

(αa ));

k −i

;

s
ˆd
k,t

Sensor attack vector estimate for testing sensor t:

s
= (cid:205)ws −1
ˆd
k −i,t /ws ;
i=0
s T
s
k,t (P s, Jk
if ˆd
)−1 ˆd
k,t ≥ χ 2
k,t
Confirm sensor attack on sensor t;

s
p= | ˆd
k, t |

then

end if

end for

end if
= True and (cid:205)wa −1
i=0 ba
if ba
k
Confirm actuator attack;
for each actuator t in all do

k −i

≥ ca then

Actuator attack vector estimate for actuator t:

a
ˆd
k −1,t

= (cid:205)wa −1
i=0
end for

a
ˆd
k −1−i,t /wa ;

7:

8:

9:

10:

11:

12:

13:

14:

15:

16:

17:

18:

19:

20:

21:

22:

23:

24:

25:

26:

27:

28:

29:

31:

30:

end if
return Confirmed attack type(s) and attack tar-
∈
get(s);
{testing sensors in mode Jk }); actuator attack vector es-
a
timates ˆd
k −1,t (t ∈ {1, · · · , n});
32: end for

attack vector

estimates

s
ˆd
k,t

sensor

(t

A.2 NUISE Algorithm Derivation
Minimum variance unbiased state and unknown input estimation is
first introduced in [31] with indirect feedthrough only. This result
is extended by many research. A general parameterized gain matrix
is derived in [15], and direct feedthrough unknown input estima-
tion is integrated into the system in [11, 22]. Paper [65] analyze
the stability of the system with direct and indirect feedthrough
unknown input. The estimator with indirect feedthrough unknown
input has been applied to system fault detection [10] without noise
and [17, 39] with noise. The estimator with direct and indirect
feedthrough unknown input is applied to attack detection [66] with
noise in which the attack location is unknown. However, all the
current research is limited to linear dynamic systems. The proposed
NUISE is an extension of the above references to nonlinear systems.
It is also an extension of the extended Kalman filters [25] for state
estimation of nonlinear systems by integrating unknown input
estimation. This is the first time to study the state and unknown
input estimation on a class of stochastic nonlinear systems.

To find an optimal estimate, we first define what is the meaning
of being optimal. The optimality contains two properties. Firstly, the
estimate is unbiased; i.e., its expected value is equal to the targeted
value. Secondly, the estimate has the minimum error covariance
matrix; i.e., estimation error variance must be minimized given
information.

We will derive the NUISE through 4 steps: 1) actuator attack
estimation, 2) state prediction, 3) state estimation, 4) sensor at-
tack estimation. In each intermediate step, estimation error and
covariance matrix are calculated to find the optimal estimates.

Consider the following system which contains (4) as a special

case:

) + ζ j
k
+ ξ j

1,k

+ da, j
(xk , uk
k
(xk ) + ds, j
k
(xk ) + ξ j
2,k

1,k

2,k

= f j
k
= hj
= hj

xk +1
zj
1,k
zj
2,k
and da, j
k

(5)

where attack ds, j
represent sensor attack and actuator
k
attack. Testing sensor readings zj
1,k might be modified by attack
vector ds, j
2,k is assumed to be clean
in mode j. We omit mode index j in the NISE derivation because
each NUISE is associated with fixed j. Dynamic system (5) can be
linearized into

k . Reference sensor readings zj

xk+1 ≃ Ak xk
z1,k ≃ C1,k xk
z2,k ≃ C2,k xk

+ Bk uk
+ ds
k
+ ξ2,k

+ Gk da
k
+ ξ1,k

+ ζk

(6)

where

Ak

≜

(cid:12)
(cid:12) ˆxk |k,uk + ˆd a

≜ ∂ fk
∂x
∂h1,k
∂x
(cid:12)
(cid:12) ˆxk |k,uk + ˆd a

≜ ∂ fk
∂da

(cid:12)
(cid:12) ˆxk |k −1

C1,k

Gk

.

k −1

, Bk

k −1

, C2,k

≜

≜ ∂ fk
∂u
∂h2,k
∂x

(cid:12)
(cid:12) ˆxk |k,uk + ˆd a

k −1

,

(cid:12)
(cid:12) ˆxk |k −1

Attack da

k −1 estimation: Given unbiased previous state esti-
mate ˆxk −1|k −1, we can predict the current state using the known

13

kinematic function fk (·) as follows
ˆx∗
k |k−1

= fk −1( ˆxk −1|k −1, uk −1).

The estimate error is described by
= xk − ˆx∗
ζk −1.

˜x∗
k |k −1

k |k −1

= Ak −1 ˜xk −1|k −1

+ Gk−1da

k −1

+

k |k−1

Noticeably, the estimation is biased, i.e., E[ ˆx∗
] (cid:44) xk |k −1 be-
cause we do not consider possible unknown attacks yet Gk −1da
(cid:44)
0. To have the unbiased state prediction, it is now needed to find
the estimate of actuator attack. The expected output without con-
sidering the actuator attack will be C2,k ˆx∗
k |k −1. The informational
discrepancy between what we expected and what we actually obtain
z2,k − C2,k ˆx∗
k |k −1 shows us the effect of attack da
k −1 and thus this
term is used to estimate it. Actuator attacks are estimated linearly
from sensor output bias

k −1

a
ˆd
k −1

= M2,k (z2,k − C2,k fk −1( ˆxk −1 |k −1, uk −1))
+ C2,kGk −1da
= M2,k (C2,k Ak −1 ˜xk −1|k −1
+ ξ2,k )
+ C2,k ζk −1

k −1

where the estimator gain M2,k represents a weight average of sensor
bias based on the trustfulness of each sensor. The unknown input
a
estimate is unbiased, i.e., E[ ˆd
k −1] = da
k −1 if E[ ˜xk −1|k −1] = 0, and
= I . In order to achieve optimal estimates, matrix
M2,kC2,kGk −1
gain Mk should be carefully chosen with minimum variance. To do
this, consider the sensor output bias

˜z2,k

= C2,k (Gk −1da
where E[C2,k Ak −1 ˜xk −1|k −1
is calculated by
˜R∗
2,k
≜ Ak −1P x

≜ E[˜z2,k ˜zT
2,k
k−1AT

k −1

where ˜Pk
using the Gauss Markov theorem [27] as
k−1CT
2,k

= (GT

M2,k

+ Ak −1 ˜xk −1|k −1

+ ζk ) + ξk
+ ξk ] = 0 and its covariance

k −1
+C2,k ζk −1

] = C2,k ˜Pk −1CT
2,k
+ Qk −1. We choose the matrix Mk

+ R2,k

˜R∗−1
2,k C2,kGk −1
≜

˜R∗−1
2,k C2,kGk −1)−1GT
˜R∗−1
k −1CT
2,k
2,k
= I . We assume that GT
k −1CT
2,k

k −1

which satisfies M2,kC2,kGk −1
is invertible. Attack vector estimation error covariance is P a
a
a
k−1( ˜d
E[ ˜d
k−1)T ] = M2,k ˜R∗
2,k MT
2,k .
State prediction: Estimate ˆx∗

k |k −1 was calculated under a par-
k−1

tial knowledge on the attack. Since now we have the estimate da
of attack, we can update the state estimate
= fk −1( ˆxk −1|k −1, uk −1

a
+ ˆd
k −1)
a
and it is now unbiased E[ ˆxk |k ] = xk since E[ ˆd
k −1] = da
next step, we find the state prediction error covariance matrix

ˆxk |k−1

k −1. For the

we again utilize the difference between the newly predicted out-
put C2,k ˆxk |k −1 and real sensor output z2,k to reflect the effect of
unknown noises:

ˆxk |k

= ˆxk |k −1

+ Lk (z2,k − h2,k ( ˆxk |k −1))

where the state estimate is unbiased E[ ˆxk |k ] = xk and the estimate
gain matrix Lk will be chosen such that the new estimate ˆxk |k has
a smaller error variance. Error dynamic and covariance are

˜xk |k

= xk − ˆxk |k

= (I − LkC2,k ) ˜xk |k −1 − Lk ξ2,k

and

P x
k

(I − LkC2,k )T + Lk R2,k LT
k

k |k −1

= (I − LkC2,k )P x
− (I − LkC2,k )Gk −1M2,k R2,k LT
k
2,kGT
− Lk R2,k MT

(I − LkC2,k )T .

k −1

To achieve the optimal estimates, we solve the variance minimiza-
tion program: minLk tr(P x
). We can take derivative the objective
k
function with respect to the decision variable Lk and set it to zero to
2,k where
find the solution: Lk
≜ C2,k P x
˜R2,k
k −1CT
2,kGT
k |k −1
2,k
must be invertible.
Attack ds, j
unknown input ds
k can be
s
ˆd
k

k estimation: Given ˆxk |k , the linear estimation for

+R2,k MT
2,kGT
+C2,kGk−1M2,k R2,k

= (C2,k Pk |k −1
+R2,k

)T ˜R−1
2,k −1
+R2,k MT

CT
2,k

= M1,k (z1,k − h1,k ( ˆxk |k ))
= M1,k (C1,k ˜xk |k

+ ds
k
s
where the estimate is unbiased E[ ˆd
k ] = ds
= I . This also can
be found by Gauss Markov theorem. By the theorem, the optimal
estimate is

k if M1,k

+ ξ1,k )

(8)

M1,k
k CT
1,k

= C1,k P x

where ˜R1,k
by

≜ ( ˜R−1
1,k

)−1 ˜R−1
1,k

= I

+ R1,k . Covariance matrices are found

P s
k

= ˜R1,k
Likelihood of the mode: It is natural that the predicted output
must be matched with the measured output if the mode j is the true
mode. For ∀j, we quantify the discrepancy between the predicted
output and the measured output as follows
ν j
k

= z2,k − hj

( ˆxj

k |k −1

)).

2,k
We approximate the output error ν j
random variable. Then, the likelihood function is given by
≜ P(yk |j = true) = N (ν j
)T ( ¯P j
)†ν j
k
|1/2
+

exp(−(ν j
k
(2π )n j /2| ¯P j

k ; 0, ¯P j
/2)

N j
k

k |k −1

k |k −1

=

)

k as a multivariate Gaussian

P x
k |k −1

= ¯Ak −1P x
= (I −Gk −1M2,kC2,k )Ak −1 and ¯Q j
k −1.

where ¯Ak −1
Gk −1M2,kC2,k )T + Gk−1M2,k R2,k MT

2,kGT

¯AT

k −1

k −1

k−1

+ ¯Qk −1

State estimation: Predicted state ˆxk |k −1 is not perfect because
of process and measurement errors. To have the estimate more
accurate, we correct the state estimate using sensor readings. Here,

k |k −1

= C j

− C j
where ¯P j
−
= (I −Gk −1M2,kC2,k )Qk −1(I −
Rj
(M j
)T is the error covariance matrix of ν j
k −1
2,k
2,k
2,k
k
and nj = Rank( ¯P j
). Notations † and | · |+ refer pseudoin-
verse and pseudodeterminant, respectively. By the Bayes’ theo-
rem, the a posteriori probability is µ j
≜ P(j = true|yk , · · · , y0) =
k

2,k P x, j
)T (C j

k−1M j

2,kG j

2,k Rj

)T (G j

k |k −1

k |k−1

(C j

2,k

2,k

2,k

k |k −1
)T + Rj

(7)

14

Algorithm 3 Nonlinear Unknown Input and State Estimation Al-
gorithm (NUISE)
Input: uk −1, ˆxk −1 |k −1, zj
1,k , zj
a, j
k −1, P x, j
Output: ˆxj
k |k
1: Initialize;
← Aj
2:
← C j

2,k , P x
k , P s, j

k , P a, j

s, j
k , ˆd

k −1;

N j
k

, ˆd

k −1

k −1

k −1

)T (C j

)T ( ˜R

∗, j
2,k

)−1C j

2,kG j

k−1

)−1

2,k

∗, j
)−1;
2,k
− C j
2,k f ( ˆxk−1|k −1, uk−1));
(M j
)T ;

)T + Q j
2,k ;

k −1
)T + Rj
((G j

k−1

11:

2,k

2,k

2,k

k −1

k −1

k −1

k |k −1

(Aj
(C j

˜P j
k−1
∗, j
˜R
3:
2,k
4: M j
2,k
(G j
)T (C j
k−1
2,k
a, j
k −1 ← M j
2,k
← M j

k−1P x
˜P j
k −1
2,k
←
)T ( ˜R
(zj
2,k
∗, j
˜R
2,k
← f ( ˆxk −1|k −1, uk −1
← (I − G j
k−1M j
← (I − G j
2,k Rj
(M j
2,k
2,k
← ¯Aj
k −1P x
2,k P x, j
← C j
)T (G j
2,k P x, j

2,kC j
k −1M j
)T (G j
( ¯Aj
k −1
(C j
)T (C j
+ Rj
(zj
2,k
)P x, j
2,k Rj

k |k −1
+ Lj
k
kC j
k −1M j

5: ˆd
6: P a, j
k−1
7: ˆxj
8: ¯Aj
9: ¯Q j
G j
k −1M j
10: P x, j
k |k −1
˜Rj
2,k
(M j
Rj
2,k
2,k
← (C j
12: Lj
k
← ˆxj
13: ˆxj
k |k −1
k |k
14: P x, j
← (I − Lj
k
kC j
(I − Lj
2,k
Lj
kC j
)T ;
2,k
s, j
k ← zj
15: ˆd
1,k
16: P s, j
← C j
k
17: ν j
← zj
k
18: ¯P j
k |k −1
Rj
(M j
2,k
19: nj ← rank( ¯P j

− hj
( ˆxj
1
1,k P x, j
(C j
k
( ˆxj
− hj
2
2,k
2,k P x, j
← C j

k |k −1
)T (C j
);

);
)T + Rj
);
(C j

)T (G j

2,k
)T ;

k |k −1

k |k −1

)G j

k −1

k −1

k |k

2,k

2,k

1,k

2,k

2,k

2,k

2,k

2,k

k |k −1

a, j
k −1);

+ ˆd
)Aj
2,kC j

2,k

k −1;
)Q j

k−1;

k −1

2,k

2,k
)T ;
k −1
)T + ¯Q j
)T + Rj
)T ;
)T (G j
(M j
2,k
( ˆxj
− hj
2
(I − Lj
)T − Lj

k |k −1

k |k−1
(Lj
k

1,k ;

20: N j
k

←

1
(2π )n j /2 | ¯P j

k |k −1

exp(−

|1/2
+

(ν j
k

)T ( ¯P j
k |k −1
2

)†ν j
k

);4

(I − G j

k −1M j

2,kC j

2,k

)T +

+ C j

2,kG j

k −1M j

2,k Rj

2,k

+

)−1;

2,k

)T )T ( ˜Rj
k−1
));
kC j
k Rj

)T + Lj
(M j

2,k

2,k

2,k

k Rj
2,k
)T (G j

(Lj
)T −
k
)T (I −

k −1

)T + Rj

2,k

− C j

2,kG j

k −1M j

2,k Rj

2,k

−

The raw data measured by the wheel encoder are the distances
traveled by each wheel (lL, lR ). For convenience reason, we convert
them into robot states using previous states xk −1 before we feed
the data to planner:

xk
yk
θk

= xk −1
= yk −1
= θk−1

+ (lL + lR ) cos θk /2
+ (lL + lR ) sin θk /2
+ (lR − lL)/r

Analogously with IPS, the measurement model for the wheel en-
coder is specified as:

zk,W

= xk

+ ds

k,W

+ ξk,W

(11)

Figure 8: LiDAR sensor measurement model.

P(yk |j=true)P(j=true |yk −1, ···,y0)
i =1 P(yk |j=true)P(j=true|yk −1, ···,y0)

(cid:205)M
update might allow that some µ j
we modify the posterior probability update to

k µ j
N j
i =1 N j

(cid:205)M

=

k −1

k µ j

k −1

k converge to zero. To prevent this,

. However, such

=

¯µ j
k

µ j
k
(cid:205)M
i=1 µi
k

,

k µ j

= max{N j

where µ j
, ϵ } and ϵ > 0 is a pre-selected small
k
constant preventing the vanishment of the mode probability. The
last step is to generate the state, attack vector, and mode estimates
of the maximum a posteriori mode.

k −1

Algorithm 3 shows the complete nonlinear unknown input and

state estimation algorithm.

A.3 Kinematic Model and Measurement

Models

Kinematic model The kinematic model of Khepera includes three
states: (x, y) is the robot location at a 2-D plane and θ is its heading.
The control commands are determined by two variables: vL and vR
are the speeds of the left and right wheels, respectively. Considered
= [da, L
with actuator attack da
]T on the left and right
k −1
k −1
wheel, the kinematic model can be presented as:

, da, R
k −1

xk

yk

= xk −1
= yk −1

θk

= θk−1

+ T cos θk −1(vL + da, L
k −1
+ T sin θk −1(vL + da, L
k −1
− vL − da, L
+ T (vR + da,R
k −1
k −1
, ζ y

+ vR + da, R
k−1
+ vR + da, R
k −1
D
+ ζ θ
2

, ζ θ

)/

k −1

)/2 + ζ x
)/2 + ζ y

k −1

k −1

= [ζ x

]T is assumed to be zero mean Gauss-
where ζk −1
ian process noises, and D is the distance between the left and right
wheel on Khepera.

k −1

k −1

k −1

Measurement model The sensor readings include data from
= [zk, I , zk,W , zk, L]T where zk, I is from IPS, zk,W

three sensors: zk
is from wheel encoder, and zk, L is from LiDAR.

IPS sensor directly measures the states of Khepera, hence, the

measurement model can be directly specified by:

zk, I

= xk

+ ds

k, I

+ ξk, I

(10)

(9)

, ξ y
= [ξ x
, ξ θ
k, I
k, I
k, I
, ds,y
= [ds,x
, ds,θ
k, I
k, I
k, I

k, I

where ξk, I
IPS and ds
on IPS.

]T refers to measurement noises from

] refers to the sensor attack vector

4Notations † and | · |+ refer pseudoinverse and pseudodeterminant, respectively. n j
refers to the rank of ¯P j

k |k −1.

15

, ξ y

= [ξ x
where ξk,W
k,W
, ds,y
from the wheel encoder and ds
k,W
to the sensor attack vector on the wheel encoder.

]T refers to measurement noises
]T refers

= [ds,x
k,W

, ds,θ
k,W

, ξ θ

k,W

k,W

k,W

The LiDAR sensor is placed on top of the robot with a shift dis-
tance of [x ′, y ′]T from the origin O ′ as shown in the left of Figure 8.
Raw sensor readings returned from LiDAR are the distances be-
tween LiDAR and surrounding walls and obstacles (see Figure 7(b)).
Given the LiDAR readings, we process the raw data into the perpen-
dicular distance l j
k from each boundary wall j ∈ {1, 2, 3, 4} and the
orientation θk, Lof Khepera. Specifically, we recognize the straight
line segments using raw distances from all direction, and calculate
the distances to each wall as follows:

l j
k

+ x ′ sin θk

= r j − (xk
− (yk − x ′ cos θk

+ y ′ cos θk ) cos ϕ j
+ y ′ sin θk ) sin ϕ j + ds, j
k, L

+ ξ j

k, L

(12)

= [ξ j
k, I

]T , j ∈ {1, 2, 3, 4} refers to measurement noises
where ξk, L
from LiDAR. Distance r j and angle ϕ j for each wall is known in
advance as the map information. Using ϕ j of each wall and the 240
degrees of range, we can also infer the angle of the robot. We use
the distances to each wall and the angle as the readings from LiDAR:
k, , θk ]T , j ∈ {1, 2, 3, 4}. In outdoor environments, LiDAR
zk, L
measurement model can be obtained using more complicated si-
multaneous localization and mapping (SLAM) algorithms [19]. For
demonstration purpose, we apply a simple transformation in the
indoor environment [26].

= [l j

A.4 Separating Actuator Attack Vector
Without loss of generosity, we consider a robot with two actuators
such as Khepera. During actuator attack vector estimation, we
a
obtain ˆd
k . In Algorithm 1,
k
we test

]T , with error covariance P a

= [ ˆd L
k

, ˆdR
k

a
( ˆd
k )T (P a
k

a
)−1 ˆd
k ≥ χp=2(α)

(13)

to determine the existence of actuator attacks. Threshold χp=2(α) is
a Chi-square test value with degree of freedom p = 2 and confidence
level α.

In order to confirm actuator attack on each actuator, we need to
k , with corresponding

separately conduct Chi-square test ˆd L
marginal variances P a
k
(1, 1))−1 ˆd L
( ˆd L
)T (P a
k
k
k
(2, 2))−1 ˆdR
)T (P a
( ˆdR
k
k
k

(1, 1), and P a
k

k , and ˆdR
(2, 2):

≥ χ 2
≥ χ 2

p=1(α)
p=1(α).

(14)

However, a positive testing result in (13) does not guarantee a
positive testing result in (14) because off-diagonal terms of matrix
P a
k are neglected in (14). The explanation is shown as follows:
)T (P a
= ( ˆd L
k
k
)−1(1, 2) ˆdR
k
)−1(2, 2) ˆdR
k
)T (P a
= ( ˆd L
k
k
)T (P a
= ( ˆdR
k
k

a
a
)−1 ˆd
( ˆd
k )T (P a
k
k
)T (P a
+ ( ˆd L
k
k
+ ( ˆdR
)T (P a
k
k
(1, 1))−1 ˆd L
k
(2, 2))−1 ˆdR
k

)−1(1, 1) ˆd L
k
)T (P a
+ ( ˆdR
k
k

(1, 1))−1 ˆd L
k
(1, 1))−1 ˆdR
k

)T (P a
k
)T (P a
k

)−1(2, 1) ˆd L
k

( ˆd L
k
( ˆdR
k

(15)

a
a
)−1 ˆd
Note that ( ˆd
= ( ˆd L
k )T (P a
k
k
k
2))−1 ˆdR
k if P a
k is a diagonal matrix.

)T (P a
k

(1, 1))−1 ˆd L
k

+ ( ˆdR
k

)T (P a
k

(2,

Another problem for the separation is that Chi-square test thresh-
p=2(0.01) =
k is a diagonal matrix and the test scores after sep-
= 5.
)T (P a
k

old is nonlinear. For instance, χ 2
9.210. Suppose P a
(2, 2))−1 ˆdR
(1, 1))−1 ˆd L
aration are ( ˆd L
k
k
k
The actuator attack would be detected by (13) but not by (14).

p=1(0.01) = 6.635 and χ 2

= 5 and ( ˆdR
k

)T (P a
k

Hence, we conduct the Chi-square test for the aggregated actua-

tor attacks.

A.5 Building RIDS on UAV
To further demonstrate the general applicability of RIDS, we will
elaborate how to build an RIDS on UAV. Consider an UAV which is
mounted with an inertial navigation system (IMU) and a GPS. The
, vz
,
state of the UAV can be specified as xk
k
ϕk , θk ,ψk ]T , which denotes displacements, velocities, and angles
≜ [p, q, r , ax , ay , az ]T are rotation
on X, Y and Z axises. Inputs uk
rates and accelerations on three axises. The kinematic model of the
UAV is given in (4) where the kinematic function f (·) is as follows:

≜ [xk , yk , zk , vx
k

, vy
k

f (xk , uk ) =

vx
k
vy
k
vz
k








+T























ϕk





θk





ψk



where Rk is
0
1
c(ϕk )
0
0 −s(ϕk )


























+T RT
k

xk



yk


zk


+ vy
ax
k
ay
k r + vz
− vx
k
k q − vy
+ vx
az
k
s(ϕk )tan(θk )
c(ϕk )
s(ϕk )sec(θk )

vx

k

vy


k

vz


k

kq + дs(θk )
k r − vz
kp − дc(θk )s(ϕk )
k p − дc(θk )c(ϕk )
c(ϕk )t(θk )




−s(ϕk )






c(ϕk )sec(θk )

































pk
qk
rk



































+T

1
0
0

0


s(ϕk )



c(ϕk )



c(θk )



0


s(θk )



0 −s(θk )



1


0



0
c(θk )









c(ψk )
−s(ψk )
0

s(ψk )
c(ψk )
0

0



0


1



and c(·), and s(·) refer to cos(·) and sin(·) respectively. GPS only
measures the location of UAV, hence the measurement function
is h(xk ) = [xk , yk , zk ]T . An IMU generates full states, hence the
measurement function can be described as h(xk ) = xk . With the
above model, we can apply RIDS to detect the attacks on UAV.

A.6 Detection Results under Attack Scenarios
More detection results from RIDS under attack scenarios in Table 3
are shown in Figure ??. Figure ?? shows the detection output when
there is neither actuator attack nor sensor attack. Estimation results
in plot 1-4 show nearly zero attack vector estimates. The Chi-square
test statistics shown in plot 5 and 7 indicate both actuator and sensor
attack remain under the threshold, except some occasional spikes.
After the sliding window filtering, plot 6 and 8 indicates an attack
silence.

16

