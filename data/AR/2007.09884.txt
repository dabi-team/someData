0
2
0
2

l
u
J

0
2

]

C
H
.
s
c
[

1
v
4
8
8
9
0
.
7
0
0
2
:
v
i
X
r
a

Parallel Oculomotor Plant Mathematical Model for Large Scale
Eye Movement Simulation

Alex Karpov
Jacob Liberman
Dillon Lohr
Oleg Komogortsev
ak26@txstate.edu
jl1496@txstate.edu
djl70@txstate.edu
ok11@txstate.edu
Texas State University
San Marcos, Texas

ABSTRACT
The usage of eye tracking sensors is expected to grow in virtual (VR)
and augmented reality (AR) platforms. Provided that users of these
platforms consent to employing captured eye movement signals
for authentication and health assessment, it becomes important to
estimate oculomotor plant and brain function characteristics in real
time. This paper shows a path toward that goal by presenting a par-
allel processing architecture capable of estimating oculomotor plant
characteristics and comparing its performance to a single-threaded
implementation. Results show that the parallel implementation im-
proves the speed, accuracy, and throughput of oculomotor plant
characteristic estimation versus the original serial version for both
large-scale and real-time simulation.

KEYWORDS
human oculomotor system, biological system modeling, parallel
algorithms

1 INTRODUCTION
Virtual (VR) and augmented reality (AR) technologies are being
adopted at an increasing rate. The agency Digi Capital has estimated
that the global market for both technologies will reach $150 billion
in 2020, including $120 billion for AR alone [8]. Eye tracking is
expected to become an intrinsic component of such devices. An eye
tracking based technology called foveated rendering—or perceptual
compression—minimizes the computational burden of VR and AR
[9].

Given that the use and accuracy of eye tracking sensors in VR
and AR are expected to grow, one should consider how they can be
applied to areas beyond interacting with the environment [7, 12].
Eye tracking sensors can potentially provide a platform for other
important applications including health assessment (e.g. concussion
diagnosis) [6] and user authentication via eye movements [10]. Both
of these applications require the ability to estimate physiological
characteristics related to oculomotor plant and brain function in
near real-time.

Oculomotor plant characteristics (OPCs) quantitatively describe
the physiological and neurological components of a subject’s oculo-
motor plant. These include values for the eye globe and its surround-
ing tissues, ligaments, the six extraocular muscles each containing
thin and thick filaments, tendon-like components, and the various
tissues and liquids surrounding the eye globe [21]. By estimating
a subject’s unique OPC vector, eye tracking can be applied to bi-
ologically mediated applications such as health assessment and
biometric identification.

Previously, a single-threaded architecture was proposed for OPC
estimation and tested for user authentication [13]. One of the
biggest drawbacks of that architecture was the slow speed at which
it was able to estimate OPCs. It took approximately 15 minutes to
process a single eye movement on a personal computer [10]. This
simulation speed is unacceptable for either real-time authentication
or health assessment. This paper presents and evaluates a parallel
architecture that extracts OPCs in real-time. The architecture was
tested with an implementation in CUDA, a framework that extends
the C/C++ programming languages with extensions for parallel
processing. The manuscript begins by describing the human ocu-
lomotor system and the model architecture. Next, it introduces
the parallel model’s structure and algorithms. Then, it shares the
results of a study to evaluate the model’s fitness for large-scale
and real-time eye movement simulation. The paper concludes with
directions for future work.

2 OCULOMOTOR PLANT MATHEMATICAL

MODEL

The oculomotor system comprises both mechanical and neurologi-
cal components that control eye movement. The oculomotor plant
includes the mechanical components of the oculomotor system: the
eye globe, the six extraocular muscles that rotate the globe, and the
tendons, tissue, and fluids that surround and connect to the eye. The
neuronal control signal encompasses the neurological components
of the oculomotor system. These components cause the extraocular
muscles to expand and contract. The oculomotor plant responds
to the neuronal control signal with mechanical actions that dictate
the type, magnitude, and direction of the eye movement.

 
 
 
 
 
 
The oculomotor plant mathematical model (OPMM) is a system
of equations that can reproduce characteristics of human eye move-
ment such as amplitude, duration, and velocity. The OPMM takes
recorded eye movement data as input and generates an OPC vector
as output. The OPC vector can reproduce the characteristics of the
eye movement (velocity, amplitude, duration, etc.) when fed into
the simulator. The OPMM is biologically inspired. Its output vector
values describe the hidden properties of the subject’s oculomotor
system, accounting for all of the major physiological components of
the oculomotor plant. Given the appropriate input parameters, the
OPMM is capable of reproducing various types of human eye move-
ments. However, the OPMM is primarily concerned with saccades—
rapid ballistic and stereotypical eye movements that occur between
fixation points.

The OPMM has been productively applied to a wide range of
research areas, including diagnosing mild traumatic brain injuries
[6, 14], biometric identification via eye movement [10], evaluating
eye gaze guided computer interfaces [7, 12, 14], and predicting
eye movements for eye gaze guided compression and foveated
rendering [9].

2.1 Oculomotor plant characteristics
The OPC parameter vectors map to the subject’s hidden biological
characteristics. The OPCs quantitatively describe the physical and
neurological properties exhibited by a subject’s oculomotor system.
OPC parameters that represent physical properties include:

(1) Series elasticity: the resistive force of a tendon in an extraoc-

ular muscle as it expands or contracts.

(2) Length-tension: the relationship between the length of an
extraocular muscle and the force it exerts. This relationship
exists due to properties of the filaments inside of a muscle.
(3) Force-velocity: the relationship between the velocity of mus-
cle expansion/contraction and the force it exerts. This phe-
nomenon exists due to the rate of the chemical reactions that
occur in the extraocular muscle.

(4) Tension slope and tension intercept: properties of the extraoc-
ular muscle force that is exerted at various eccentricities at
the equilibrium points of the oculomotor plant.

(5) Inertial mass of the eye globe.
(6) Passive viscosity of the tissue surrounding the eye globe.

Agonist muscles initiate the eye movement in a particular direc-
tion when innervated. Antagonist muscles resist the force generated
by agonist muscles in order to decelerate or stabilize the eye globe.
Series elasticity, the length-tension relationship, the force-velocity
relationship, and tension slope each vary between the agonist and
antagonist muscles during eye movement. Passive viscosity, the
tension intercept during fixation, and the inertial mass of the eye
globe are constant.

OPC parameters also represent the neuronal control signal, which
is modeled as a pulse-step function. The step indicates the mag-
nitude of the neuronal control signal during a fixation. The pulse
indicates the magnitude of the signal during a saccade. OPC param-
eters related to the neuronal control signal include:

(1) Activation time: latency associated with propagating the

signal at movement onset.

Alex Karpov, Jacob Liberman, Dillon Lohr, and Oleg Komogortsev

Table 1: Parameters and their default values for the 18-
parameter OPMM. AG and ANT refer to the agonist and an-
tagonist muscles, respectively.

Parameter

Series elasticity (AG)
Series elasticity (ANT)
Length-tension (AG)
Length-tension (ANT)
Force-velocity (AG)
Force-velocity (ANT)
Passive viscosity
Tension slope (AG)
Tension slope (ANT)
Inertial mass
Activation time (AG)
Activation time (ANT)
Deactivation time (AG)
Deactivation time (ANT)
Tension intercept
Neural pulse (AG)
Neural pulse (ANT)
Neural pulse width

Shorthand

KS E_AG
KS E_AN T
KLT _AG
KLT _AN T
BAG
BAN T
BP
NC_AG
NC_AN T
J
τAC_AG
τAC_AN T
τDE_AG
τDE_AN T
NC_F I X
NS AC_AG
NS AC_AN T
PW

Default value

2.5
2.5
1.2
1.2
0.046
0.022
0.06
0.8
0.5
0.000 043
11.7
2.4
2.0
1.9
14.0
55
0.5

saccade duration − 6 ms

(2) Deactivation time: latency associated with propagating the

signal at movement offset.

(3) Neural pulse height: magnitude of force generated by muscu-

lature during innervation.

(4) Neural pulse width: duration of the neural pulse.
Activation/deactivation time are both constants and neural pulse

height varies across agonist and antagonist muscles.

2.2 Estimating oculomotor plant

characteristics

The OPMM describes a system of equations capable of accurately
reproducing the characteristics of human eye movements while
accounting for the primary components of the oculomotor system.
This is done by estimating the OPC vector of the underlying model
of human eye movement. By default, the OPMM simulates eye
movement using either a 9- or 18-parameter model of human eye
movement. These models were developed by Komogortsev [11]
based on earlier work by Bahill [1]. Either version can simulate
one-dimensional eye movement—either vertical or horizontal. The
OPC vectors for the 9- and 18-parameter models and their default
values are described below.

18-parameter OPMM. The 18-parameter OPC vector includes
2.2.1
all major mechanical and neurological components for both the
agonist and antagonist muscles. The relationships between model
components are pictured in Figure 1. The model parameters and
their default values are shown in Table 1.

9-parameter OPMM. The 9-parameter model makes simplify-
2.2.2
ing assumptions about the neuronal control signal, series elasticity,
and length-tension relationship. The model parameters and their
default values are shown in Table 2.

Parallel Oculomotor Plant Mathematical Model for Large Scale Eye Movement Simulation

Figure 1: The 18-parameter OPMM employed for positive amplitude saccades. Arrows show the direction of forces for each
component. ∆θ represents the eye rotation. J is the rotational inertia of the eye globe.

3 PARALLEL OPMM ARCHITECTURE
One drawback of the initial OPMM model implementation was
parameter estimation speed. Finding the optimal OPC vector for a
given saccade requires an exhaustive search of potential parameter
values. This consumes a large amount of the total simulation time
due to the computational demands of OPC estimation. However, it
was observed by the authors that many simulation tasks could be
executed in parallel, which could greatly improve overall simulation
time.

The initial implementation of the parallel OPMM is written in
CUDA, a parallel programming platform developed by NVIDIA
to program massively parallel graphics processing units (GPUs)
for general purpose computation. Using CUDA, the programmer
can develop in a familiar low-level language such as C/C++, then
compile the application so it is optimized for a GPU. Once a program
has been written in CUDA it can inherit performance improvements
in successive generations of CUDA hardware without modification
[17, 18].

The OPMM pipeline (visualized in Figure 2) will be discussed in

the following sections.

Table 2: Parameters and their default values for the 9-
parameter OPMM. AG and ANT refer to the agonist and an-
tagonist muscles, respectively.

Parameter

Shorthand Default value

Series elasticity
Length-tension
Force-velocity (AG)
Force-velocity (ANT)
Passive viscosity
Tension slope (AG)
Tension slope (ANT)
Inertial mass
Tension intercept

KS E
KLT
BAG
BAN T
BP
NC_AG
NC_AN T
J
NC_F I X

2.5
1.2
0.046
0.022
0.06
0.8
0.5
0.000 043
14.0

Figure 2: OPMM pipeline

3.1 OPMM input
The OPMM uses recorded saccade trajectory data as input. The first
three stages of the OPMM analysis pipeline depicted in Figure 2 are
concerned with generating high quality input for analysis. These
stages occur outside of the OPMM application. Eye movements are
typically recorded using video oculography on a commercial eye
tracker [2]. Irregular artifacts are filtered from the recording data
during a cleaning phase. These artifacts can be caused by subject
movement (e.g. blinking), environmental factors such as ambient
moisture, or machine recording error. Saccades are then identified
and extracted from the composite eye movement data. Only the
extracted saccades are presented to the OPMM for analysis.

3.2 Model selection and parameter

initialization

The OPMM has a pluggable architecture and is therefore not tied to
a specific model of human eye movement. It can simulate eye move-
ment using many common models. The user selects the relevant
model at run time. The OPMM is initialized with the number of
parameters required by the chosen model and default values culled
from literature. By default, the OPMM simulates eye movements

Alex Karpov, Jacob Liberman, Dillon Lohr, and Oleg Komogortsev

using an 18-parameter model developed by Komogortsev [11, 13].
It has also been tested with the following alternatives:

(1) Komogortsev 2004 [9]: The 9-parameter model is similar to
the 18-parameter model but it makes simplifying assump-
tions about the neuronal control signal, series elasticity, and
length-tension relationship.

(2) Robinson 1965 [19]: A 10-parameter model that includes a
pulse-step neuronal control signal capable of generating
saccades of various amplitudes.

(3) Enderle 1995 1 and 2 [3]: 19-parameter models. Version 1
recalculates the neuronal control signal at each time step.
The control signals are constant in version 2.

(4) Enderle 2010 1 and 2 [4]: Version 1 has 28 parameters includ-
ing state switch time constants for the agonist and antagonist
muscles and a steady-state parameter for the peak of the ag-
onist pulse. Version 2 has 19 parameters.

3.3 Parameter estimation
Once the model is selected and the model parameters are initial-
ized to default values, the user supplies a vector of eye movement
recordings as input. Then the OPMM uses iterative parameter esti-
mation techniques to find OPC values that minimize the difference
between the recorded and simulated saccade trajectories. Parameter
estimation is a type of multi-dimensional search where parameter
values are sought that form agreement between a model and data
[5].

The OPMM utilizes a well known parameter estimation algo-
rithm called Nelder-Mead simplex to minimize the difference be-
tween the recorded and simulated saccade trajectory by adjusting
the model’s default OPC values. Nelder-Mead is a non-linear, un-
constrained multi-dimensional search algorithm [16] that performs
an iterative search from an initial guess. It uses simplex transfor-
mations to explore a multi-dimensional topography, searching for
values that minimize the difference between the recorded and sim-
ulated saccade trajectories. Nelder-Mead is not provably optimal
[20]. There are situations where it does not converge.

OPMM uses an original parallel implementation of Nelder-Mead
based on a serial implementation by Lagarias [15]. The pseudocode
in Algorithm 1 illustrates the parameter estimation workflow. In the
parallel version, all of the simplex transformations are calculated
in simultaneously. The solutions are sorted for accuracy at every
iteration. There are two minimum tolerance thresholds that both
must be reached before the minimization routine exits. First, the
maximum coordinate difference between the current best point
and the other points in the simplex must be less than or equal to a
distance tolerance. Second, the corresponding difference in function
output values must be less than or equal to the absolute difference
between the measured and simulated eye movement trajectories.
The Nelder-Mead minimization routine iterates until both of the
preceding conditions are true, or until the maximum number of
iterations is exceeded.

The parallel OPMM implementation can estimate parameters for
thousands of eye movements simultaneously, greatly increasing the
rate at which the OPMM can simulate eye movements. Conducting
parameter estimation in parallel reduces the latency of the entire
simulation task. Reducing latency and increasing throughput are

Eye Movement RecordingData CleaningEye Movement ClassificationModel SelectionParameter InitializationParameter Sort/CountParameter OptimizationFunction Minimized?OPC VectorNoYesOPMMParallel Oculomotor Plant Mathematical Model for Large Scale Eye Movement Simulation

s0
Serial OPMM

s1

s2

sn

Time

s2,i
s1,1
s0,1

s2,i
s1,2
s0,2

s2,i
s1,0
s0,0

Parallel OPMM

s2,i
s1, j
s0, j

Figure 3: Parallel saccade simulation

both critical considerations for applying the OPMM to large-scale
eye movement analysis tasks. Figure 3 depicts serial versus parallel
saccade simulation. The parallel version processes multiple saccades
at every time step.

: Saccade trajectory data and initial model parameters

Input
Output : Oculomotor plant characteristic vector that

minimizes the error function

foreach saccade s do

Spawn CUDA optimization task t;
Set initial NM-simplex values vt to model values v;

end
foreach task t do
sort(fvt);

end
while non-finished tasks present do

foreach task t do

if exit criteria for test t is met then

Mark t complete;

end

end
if all tasks finished then

break;

end
foreach active task t do

Prepare reflection points xr , expansion points xe,
outside contraction points xco, inside contraction
points xci, and shrink points xs;
Perform NM decision step;
sort(fvt);

end

end
return vt1

Algorithm 1: OPMM extraction algorithm

As mentioned previously, the parallel model was implemented
for the CUDA architecture. CUDA has a heterogeneous comput-
ing model. Data is initialized on the host CPU then transferred
to the GPU memory for processing. The GPU returns the results
to the CPU when the processing is complete. Transferring data
between the host and GPU memory introduces latency that slows
performance. Therefore, the parallel OPMM was designed to simul-
taneously processes all saccades in the input set on the GPU in
order to minimize the data transfer overhead.

SacNo , OptErr , CPU_check , SE_ag , SE_ant , LT_ag , LT_ant , PE_ag ,
PE_ant , Vis , FV_ag , FV_ant , Inert , Act_ag , Act_ant ,
Deact_ag , Deact_ant , Step , H_ag , H_ant , W

1 ,10.701933 ,10.701933 ,25.000000 ,2.035655 ,1.661605 ,
0.120000 ,8.000000 ,0.050064 ,0.006063 ,0.026839 ,
0.050331 ,0.000043 ,5.818619 ,1.517864 ,1.526640 ,
1.518075 ,6.410131 ,3.022952 ,19.199562 ,14.02288
2 ,1.115680 ,1.115681 ,2.903223 ,2.599483 ,0.746196 ,1.110741 ,
0.874736 ,0.513325 ,0.008178 ,0.078129 ,0.022898 ,
0.000054 ,15.102122 ,1.968479 ,2.562555 ,1.695454 ,
2.916430 ,126.041275 ,5.574565 ,7.316801

...

Figure 4: Example output from OPMM 18-parameter model

3.4 OPMM output
Figure 4 shows example OPMM output for simulated saccades using
the Komogortsev 18-parameter model. The output consists of an
OPC vector of model parameter values that minimizes the opti-
mization error between the simulated trajectory and the recorded
trajectory of each eye movement. SacNo is the saccade number,
OptErr is the optimization error computed by the parallel imple-
mentation, CPU_check is the optimization error computed by a
serial implementation for validation purposes, SE_ag and SE_ant
are the agonist and antagonist series elasticity, LT_ag and LT_ant
are the agonist and antagonist length-tension, PE_ag and PE_ant
are the agonist and antagonist tension slope, Vis is the passive
viscosity, FV_ag and FV_ant are the agonist and antagonist force-
velocity, Inert is the interital mass, Act_ag and Act_ant are the
agonist and antagonist activation time, Deact_ag and Deact_ant
are the agonist and antagonist deactivation time, Step is the tension
intercept, H_ag and H_ant are the agonist and antagonist neural
pulse height, and W is the neural pulse width.

The optimization error is the absolute difference between the
recorded and simulated eye movement trajectories. Optimization
error quantifies the goodness of fit between the model and the input.
It is also used to compare accuracy across models when simulating
the same recorded input.

4 RESULTS
This section of the paper compares the performance of the original
serial OPMM algorithm running in MATLAB to the CUDA parallel
implementation. The MATLAB and CUDA versions were compared
for speed and accuracy using well known metrics for computer
system performance:

(1) Speedup: the relative performance of two computer systems

solving the same problem.

(2) Accuracy: the mean absolute difference between the mea-

sured and simulated eye movement trajectories.

(3) Throughput: the rate at which each implementation can

return OPC vectors for a series of eye movements.

Input data was recorded from 32 subjects. Subjects’ eye move-
ments were recorded as they followed a jumping dot stimulus with
10◦ amplitude in the visual field. Eye movements were captured on
an EyeLink 1000 tracker operating at 1000 Hz sampling frequency.
Subjects were seated 70 cm from the display and rested their heads
on a chin rest to ensure high eye movement recording accuracy. The
Velocity-Threshold (I-VT) algorithm was used to identify saccades

Dell R740 server
-- Intel Xeon Silver 4116 CPU @ 2.10 GHz (24)
-- 8 x 16384 MB DIMM DDR4 @2666 MHz (128 GB )
-- PCI Express Gen 3 (8.0 GT /s)

NVIDIA 2 G183 [ Tesla T4 ]
-- CUDA compilation tools , release 10.1 , V10 .1.105

Red Hat Enterprise Linux server 7.6 ( Maipo )
-- Linux kernel 3.10.0 -957.10.1. el7
-- GCC 4.8.5 20150623 ( Red Hat 4.8.5 -36)

Figure 5: Test system hardware and software configuration

Table 3: Performance results

Version

Runtime

Speedup

Residual

Throughput

MATLAB
CUDA

832.8 sec
42.6 sec

1.0
19.55

43.8
7.1

9.22/sec
464.61/sec

within the recorded eye movement data. Saccades with amplitudes
of less than 4◦/s or durations of less than 6 ms were discarded in
order to improve result quality. All saccades were identified and
processed offline.

4.1 Test environment
The OPMM implementations were compared across two test sys-
tems tuned for maximum performance: (1) a MATLAB implemen-
tation running on a commodity server and (2) a CUDA implemen-
tation running on an NVIDIA TU102 GPU. They are described in
Figure 5.

4.2 Performance results
Table 3 compares performance between the original MATLAB im-
plementation and the CUDA version. Speedup is the first metric for
comparison. It compares the relative run time of the two implemen-
tations. This metric demonstrates each implementations’ fitness
for simulating saccades in real time. The CUDA version achieved a
peak relative speedup of 19.55 versus the MATLAB implementation,
with a runtime of 42.6 seconds versus 832.8 sec processing the same
input data set.

Accuracy was compared by computing the absolute residual
difference between the recorded and simulated trajectories. A lower
absolute residual difference indicates higher fidelity between the
recording and the simulation. The MATLAB version attained an
accuracy of 43.8. The CUDA implementation achieved an accuracy
of 7.1. Because the Nelder-Mead is not proven to converge, both
implementations will exit if the maximum number of iterations
is not reached within a time boundary. Therefore, the accuracy
difference between the serial and parallel implementation are likely
due to the parallel version exploring the parameter value search
space further than the serial version before the time boundary is
reached.

The throughput results compare the rate at which the OPMM
implementations processed input when performing approximately
60,000 saccade simulations. Throughput is measured in simulations
per second. This performance metric assesses fitness for large-scale

Alex Karpov, Jacob Liberman, Dillon Lohr, and Oleg Komogortsev

eye movement simulation. The MATLAB implementation achieved
a maximum throughput of 9.22 samples/second. The CUDA imple-
mentation achieved a maximum throughput of 464.61 samples/sec-
ond.

5 CONCLUSION AND FUTURE WORK
The oculomotor plant mathematical model can reproduce human
eye movements by estimating the quantitative anatomical character-
istics of the subject’s oculomotor plant. It has already been applied
to a wide range of use cases. These include biometric identification,
testing eye-gaze guided computer interfaces, and identifying trau-
matic brain injuries. However, the slow parameter estimation speed
of the original model makes it impractical for real-time and large-
scale applications. This paper introduces a parallel implementation
of the OPMM. Written in CUDA, the parallel OPMM is capable of
processing thousands of eye movement records simultaneously. It
features a pluggable architecture that supports many well-known
models of human eye movement with the same parallel search
algorithm.

The authors conducted a performance study evaluating the par-
allel OPMM’s suitability for both large-scale and real-time sim-
ulations. Parallel OPMM performance on a GPU was compared
to OPMM performance on a commodity processor. The parallel
OPMM running on a GPU outperformed the CPU version both in
terms of speed and accuracy when processing approximately 60,000
saccade simulations, reducing the total processing time from 832.8
seconds down to 42.6 seconds (a 19.5x speedup).

These speed increases translate into an overall throughput in-
crease from 9.22 to 464.61 simulations per second. Additionally, the
residual error fell from 43.8 to 7.1 when switching to the parallel
version. Taken together, the results suggest that the parallel imple-
mentation can move the OPMM toward real-world and large-scale
applications without sacrificing accuracy.

Although the parallel version showed impressive speedup ver-
sus the original, further latency reduction is required in order to
process input in true real-time, which can be defined as the same
amount of time it takes to record the input. Additional work is also
needed to determine how much of the observed performance im-
provement is inherent to the parallel algorithm versus the hardware
platform differences. Finally, Nelder-Mead simplex is not provably
optimal. Alternative parameter estimation algorithms—such as gra-
dient descent—should be tested for OPMM to avoid situations where
Nelder-Mead does not converge.

ACKNOWLEDGMENTS
This material is based upon work supported by the National Science
Foundation Graduate Research Fellowship under Grant No. DGE-
1144466. The study was also funded by 3 grants to Dr. Komogortsev:
(1) National Science Foundation, CNS-1250718 and CNS-1714623,
www.NSF.gov; (2) National Institute of Standards and Technology,
60NANB15D325, www.NIST.gov; (3) National Institute of Standards
and Technology, 60NANB16D293. Any opinions, findings, and con-
clusions or recommendations expressed in this material are those
of the author(s) and do not necessarily reflect the views of the Na-
tional Science Foundation or the National Institute of Standards
and Technology.

Parallel Oculomotor Plant Mathematical Model for Large Scale Eye Movement Simulation

REFERENCES
[1] A. Terry Bahill. 1980. Development, validation, and sensitivity analyses of human
eye movement models. Critical reviews in bioengineering 4 4 (1980), 311–55.

[2] Andrew T Duchowski. 2007. Eye tracking methodology. Springer.
[3] John D Enderle. 2010. Models of horizontal eye movements, Part I: Early models
of saccades and smooth pursuit. Synthesis Lectures on Quantum Computing 5, 1
(2010), 1–163.

[4] John D Enderle and Wei Zhou. 2010. Models of Horizontal Eye Movements, Part
II: A 3rd Order Linear Saccade Model. Synthesis Lectures on Quantum Computing
5, 1 (2010), 1–159.

[5] Neil Gershenfeld. 1999. The Nature of Mathematical Modeling. Cambridge Uni-

versity Press, USA.

[6] D Gobert. 2012. Automated classification of complex oculomotor behavior. 8th

World Congress on Brain Injury (2012).

[7] Do Hyong Koh, Sandeep A Munikrishne Gowda, and Oleg V Komogortsev. 2009.
Input evaluation of an eye-gaze-guided interface: kalman filter vs. velocity thresh-
old eye movement identification. In Proceedings of the 1st ACM SIGCHI symposium
on Engineering interactive computing systems. 197–202.

[8] Oleg Komogortsev. 2016. NSF Career. https://userweb.cs.txstate.edu/~ok11/

NSF_CAREER.html

[9] Oleg Komogortsev and Javed Khan. 2004. Predictive perceptual compression for
real time video communication. In Proceedings of the 12th annual ACM interna-
tional conference on Multimedia. 220–227.

[10] Oleg V. Komogortsev and Corey D. Holland. 2014. The Application of Eye Move-
ment Biometrics in the Automated Detection of Mild Traumatic Brain Injury. In
CHI âĂŹ14 Extended Abstracts on Human Factors in Computing Systems (Toronto,
Ontario, Canada) (CHI EA âĂŹ14). Association for Computing Machinery, New
York, NY, USA, 1711âĂŞ1716. https://doi.org/10.1145/2559206.2581150

[11] Oleg V Komogortsev and Ukwatta KS Jayarathna. 2008. 2D Oculomotor Plant
Mathematical Model for eye movement simulation. In 2008 8th IEEE International
Conference on BioInformatics and BioEngineering. IEEE, 1–8.

[12] Oleg V Komogortsev and Javed I Khan. 2007. Kalman filtering in the design
of eye-gaze-guided computer interfaces. In International Conference on Human-
Computer Interaction. Springer, 679–689.

[13] Oleg V Komogortsev and Javed I Khan. 2008. Eye movement prediction by Kalman
filter with integrated linear horizontal oculomotor plant mechanical model. In
Proceedings of the 2008 symposium on Eye tracking research & applications. 229–
236.

[14] Oleg V Komogortsev, Young Sam Ryu, Do Hyong Koh, and Sandeep M Gowda.
2009. Instantaneous saccade driven eye gaze interaction. In Proceedings of the
International Conference on Advances in Computer Enterntainment Technology.
140–147.

[15] Jeffrey C Lagarias, James A Reeds, Margaret H Wright, and Paul E Wright. 1998.
Convergence properties of the Nelder–Mead simplex method in low dimensions.
SIAM Journal on optimization 9, 1 (1998), 112–147.

[16] J. A. Nelder and R. Mead. 1965. A Simplex Method for Function Minimiza-
tion. Comput. J. 7, 4 (01 1965), 308–313.
https://doi.org/10.1093/comjnl/7.
4.308 arXiv:https://academic.oup.com/comjnl/article-pdf/7/4/308/1013182/7-4-
308.pdf

[17] NVIDIA. 2018. NVIDIA T4 70W LOW PROFILE PCIe GPU ACCELERA-
TOR. https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/tesla-
t4/t4-tensor-core-datasheet.pdf

[18] NVIDIA. 2018.

NVIDIA TensorCore T4 GPU datasheet.

https:

//www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/tesla-t4/t4-
tensor-core-product-brief.pdf

[19] DA Robinson. 1964. The mechanics of human saccadic eye movement. The

Journal of physiology 174, 2 (1964), 245–264.

[20] Stephen Senn and John Nelder. 2003. A conversation with John Nelder. Statist.

Sci. (2003), 118–131.

[21] D. R. Wilkie. 1956. THE Mechanical Properties of Muscle. British Medical Bulletin
12, 3 (09 1956), 177–182. https://doi.org/10.1093/oxfordjournals.bmb.a069546
arXiv:https://academic.oup.com/bmb/article-pdf/12/3/177/834131/12-3-177.pdf

