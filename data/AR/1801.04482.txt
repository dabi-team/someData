Semantic integration of UML class diagram with 
semantic validation on segments of mappings 

Hicham Elasri1, Elmustapha Elabbassi2, Sekkaki Abderrahim1, and Muhammad 
Fahad3 
1Departement of Mathematics and Computer Science 
University Hassan II, Ain Chock, Faculty of Sciences  
Casablanca, Morocco 

2Departement of Mathematics and Computer Science  
University Mohamed V, Rabat, Faculty of Sciences  
Rabat, Morocco 

3Department of Computer Science, 
 University of Lyon, France 

Abstract. Recently, attention has focused on the software development, specially 
by different teams that are geographically distant to support collaborative work. 
Management,  description  and  modeling  in  such  collaborative  approach  are 
through several tools and techniques based on UML models. It is now supported 
by a large number of tools. Most of these systems have the ability to compare 
different UML models, assist developers, designers and also provide operations 
for the merging and integration, to produce a coherent model. The contribution 
in this article is both to integrate a set of UML class diagrams using mappings 
that are result of alignment and assist designers and developers in the integration. 
In addition, we will present a detail integration of UML models with the valida-
tion of mappings between them. Such validation helps to achieve correct, con-
sistent and coherent integrated model. 

Keywords: semantic integration, ontologies, UML, validation of mappings 

1 

Introduction 

The  field  of  information  systems  engineering  has  always been a sector very 
claimant in techniques and new methods to improve both the quality of the products 
and the  performance  related  to  the  process  used  for  its development.  In  addition,  
applications  are  becoming increasingly  complex  and  are  covering  wide  range  of 
fields. The increasing and diversifying role played by the Web and the Internet in the 
design and implementation of online applications (Semantic web and Cloud Compu-
ting) do amplify this situation. 

 
 
 
 
This field, therefore, has evolved enormously since the advent of the world wide web 
and  advancements  in  computer  technologies.  These    developments    have  constantly  
provided  reliable  software  and  have  been tailored  to  meet  business  needs,  espe-
cially  by  reducing costs  and  delays.  These  developments  have  focused simultane-
ously on how to represent the targeted field by the  software  production,  as  well  as  
conceptual, technological  and  methodological  frameworks  that facilitate  and  guide  
the  process  of  software  production. 

In  the  past,  information  systems  engineering programming activities were the first 
to be subject to this situation  and  to  be  experimented  with  this  approach. Proposals  
based on models  emerged  later  to  address problems  of  engineering requirements,  
specification  and modeling  systems.  Approaches based on Model-driven engineering 
(MDE) are part of this trend.  They usually have similar concepts representing different 
objects.  Their similarity  and  difference  in  terms  of  concepts,  or  their appearance  
necessitate  a  common  specific  interpretation of  the  models,  their  information and 
their  general  specifications. 

Our    problem    is    inscribed    at    the    intersection    of    two  scientific    fields:    the  
integration  of  models  and  the    ontology    alignment.    The  integration  of  models  is  a 
research  problem  that  has  been  identified  in  the  field  of  Model-Driven  Integration 
(MDI) [28]. Our proposal aims to assist designers in the IS integration phase. Our novel 
integration process is guided by the background ontology (The Background ontology 
describes concepts and relations among concepts of the information system) to achieve 
semantic integration of  models.  This process allows the  detection and resolution of 
semantics conflicts encountered in the process of integration of models also permit the 
validation of the mappings produced from matching of ontologies related to the candi-
date models.   

We hypothesize that the conception of an Information System (IS) generally targets 
management business area and models represented in a high  -level language such as 
UML. Moreover, semantic integration systems rely mostly on ontology alignment.  We 
relied on the results of these studies to support the semantic integration process.  

Our paper is organized as follow: our  motivation is described in section 2. In the 
section 3 the ontologies and ontologies alignments is presented. In section 4 semantic 
integration  of  UML  classes  diagrams  are  described.  In  section  5  we  present  incon-
sistency, incompleteness and redundancy errors occur in the integration phase. Map-
pings validation for resolving in order to hide inconsistency presented in section 6. Our 
proposal of UML diagrams classes integration process is given in section 7. Finally, 
section 8 presents the conclusion and perspectives of our work. 

2  Motivation 

The automatic semantic integration of UML class diagrams derived from different 
sources involves detecting the semantic, syntactic and structural relationships. Seman-
tic similarity  measures play an important role  for  detecting different relationships  in 
order to ensure alignment and merging of class diagrams. The majority of systems and 
alignment approaches address this problem by calculating the similarities between en-
tities (concepts, roles, etc...) and produce candidate alignments based on the similarities 

obtained by comparing the entities one by one. Similarity-based  methods using more 
sophisticated means for calculating spread and refine similarities speaking in the con-
text of these entities. The alignment produces a set of mappings that can be used in the 
merging phase, but before that, a process of validating must be conducted in order to 
find incoherent and inconsistent mappings and keep only valid ones. This validation 
step is highly required to produce the correctness and consistency of final integrated 
model. Therefore,    all steps of our semantic integration process are formalized by the 
mathematical approach in order to facilitate automation and validation of our semantic 
integration process. 

3 

Related work 

Model integration is a crucial activity in Model Driven Engineering (MDE).  Several 
approaches have been proposed to solve the problems of integration. These approaches 
have  been  proposed  mainly  in  the  field  of  heterogeneous  databases  integration.  The 
work of models integration is focused primarily on syntactic and technical levels, very 
few studies, however, are concerned with the semantic aspect of the integration of con-
ceptual  models.  Numerous  works  have  adopted  MDE  techniques  in  order  to  define 
model integration as model transformations [31] [30].The AAM approach (Architec-
ture Aspect Modeling) [32] proposes to use the directives of composition. However, 
The Theme approach [33] deals  with the integration problem by combining a  set of 
strategies for reconciliation upon a relationship kind of merge. Several types of recon-
ciliation  are  offered  (transformation,  redefinition,  etc.).  The  AMW  approach  [3]  is 
based on model weaving and model transformation. It offers two resolution strategies: 
the first is automatic based on the use of heuristics to identify matches; another inter-
active,  allows  manual  refining  the  correspondence  links.  The  studies  in  the  field  of 
model differencing, which consist in a stage of integration; present syntactic differenc-
ing at either the concrete  or the abstract syntax level. However, they  not  are able to 
represent the semantic differences between two versions of a class diagram [34]. 
In this paper, we propose a novel approach that addresses the model integration problem 
by means of graph segment, isomorphism of graphs segment and ontologies. 

4 

ONTOLOGIES AND ONTOLOGIES ALIGNMENTS 

Ontologies are recently being developed for structuring knowledge and are defined 
as a collection of concepts and their interrelationships, which provide an abstract view 
of an application domain. According to Gruber, ontology is defined as an explicit for-
mal specification of terms of a domain and relations among them [9]. Aligning ontolo-
gies consists in establishing semantic relations among concepts of various ontologies 
which describe the same or overlapping field of knowledge. Aligning ontologies repre-
sents  a  great  interest  in  various  application  domains  that  manipulate  heterogeneous 
overlapping  knowledge,  such  as  semantic  web,  communication  in  multi-Agent  Sys-
tems, data Waterhouse, schemas/ ontologies integration [10], etc. Several works on the 
alignment of ontologies have emerged over recent years; most of them are based on an 

 
external resource that can be either a general ontology or domain ontology [11], [10]. 
In the following, we give an account of the concepts that we will use throughout the 
paper and in the metrics that we used for computing our alignments, mapping, graphs 
and sub-graph isomorphism. 

Ontology:  Ontology can be  defined  with different  manners according to its type 
and use. In our case, we define ontology as a tuple(C, R, T), where C is the set of con-
cepts  or  OWL-classes,  R  is  the  set  of  relationships  between  concepts  or  OWL-
properties, and T the set of relationships types.  
concept 

as  V =
 (T, At1, . . . , Atn, P1, . . . , Pm) where T is the concept label  Ati (i = 1, . . . , n) are the at-
tributes that describe the concept. Finally, Pj (j = 1, . . . , m) represent concept proper-
ties. They can be OWL datatype properties or object properties.  

attribute  vector  V  defined 

Concept:  A 

an 

is 

Relationship:  A relationship is an attribute vector Vr defined as Vr = (c1, c2, Tr) 
and Vr ∈ R, with c1 and c2  are two concepts ((c1, c2) ∈ C2) and Tr is the type of the 
relationship between c1 and c2. 

Relationship type: is the type of relationship, for example in UML, the relationship 

type are: inheritance, aggregation, composition. 

Similarity measure: Similarity measure allows finding the semantic equivalence 
or similarities between entities. It is based on the concept terminology and properties. 
There are some approaches in literature for the classification of the Similarity measure 
[26]:  

  Syntactic indexes. These indexes aim to detect the syntactical similarities among 

the various components of an ontology.  

  Semantic indexes. These indexes aim to compare the ontologies from a semantic 

point of view using the WordNet taxonomy. 

  Structural indexes: These indexes compare the ontologies from a structural point 

of view. 

TABLE 1 : Example of classification of the similarity measure 

Syntactic indexes 

Semantic indexes 

Structural indexes 

Editing Distance 

Semantic Similarity 

Attributes 

Trigram Function 

Granularity 

Acronym 

Synonym Index 

Similarity Index for 

properties 
Similarity Index for En-
tities 

Fingerprint 
Abbreviation 

Label 
Attributes 

Derived 
Label 

 
  
 
 
 
 
 
 
Graph: A graph G  =  (V,  E) comprising a V of vertices or nodes together with  a 

set E of edges or lines. 

Subgraph: Let G (V, E) be a graph. A subgraph of G is a graph G′(V′, E′) such as 

V' ⊂ V and E′ ⊂ E. For simplicity we write: G′ ⊂  G 

Graphs Isomorphism: Two graphs G1(V1, E1) and G2(V2, E2)  are isomorphic if 

there is a bijection f ∶  V1 → V2 such as: 

∀a, b  ∈   V1, (a, b)   ∈   E 1 ⇔   (f(a), f(b))   ∈   E2 
The function f is an isomorphism of graphs. For simplicity we write:  G1 ≅   G2. 
In the case of ontologies (see definition above) relations are not of the same type; 

therefore the definition is as follows: 

Ontologies Isomorphism: Two ontologies O1(C1, R1, T) and O2(C2, R2, T) are iso-

morphic if there is a bijection f ∶  V1 → V2 such as: 

∀a, b  ∈   C1 et t ∈ T, (a, b, t)   ∈   R 1 ⇔   (f(a), f(b), t)   ∈   R2 

The similarity function of two graphs: Given two graphs G1(V1, E1) and G2(V2, E2), 
the similarity function is defined with a  vertices based similarity measure,  b ∈   V1 is 
image of  a  ∈   V2 if a is similar to b. 

Subgraphs isomorphism: Given two graphs G1(V1, E1), G2(V2, E2),  and given two 
′ ) of G1and G2 , It is said that G′1 and 
′ (V2

sub-graphs respectively  G1
G′2  are isomorphic if they are isomorphic as graphs. 

′ ) and G2

′ (V1

′, E2

′, E1

Matching process: A  matching  process can be seen as a function f which takes 
two ontologies O and  O′,  a  set  of  parameters P,  and  a  set  of  oracles  and resources 
R, and returns an alignment between O and O′.  

Mappings: Given O1(C1, R1) and  O2(C2, R2) two ontologies and α a measure of 
similarity  between  two  concepts,  a  mapping  is  an  element  (a, b)  of    C1 ×
C2 such as α(a, b) >  𝑡ℎ𝑟𝑒𝑠ℎ𝑜𝑙𝑑 

Set  of  mappings:  Given  {Oi}1<𝑖<𝑛  a  family  of  ontologies.  Set  of  mapping 
Smappings  family is the set of all the feasible mapping between couples of ontology 
(Oi , Oj) with  1 < 𝑖 ≠ 𝑗 < 𝑛   

Smappings   = {(a, b) ∈ Ci   × Cj, 1 < 𝑖 ≠ 𝑗 < 𝑛   𝑒𝑡 𝛼(𝑎, 𝑏) >  𝑡ℎ𝑟𝑒𝑠ℎ𝑜𝑙𝑑}. 

4.1  Transformation UML Class Diagrams into ontologies 

A comparison between models and ontologies is given in [7].The differences be-
tween the classes of the UML and OWL are studied in [8] and [9].  [14] Provided an 
analysis of approaches for transforming UML to ontologies. Transformations of UML 
models to ontologies can be grouped into three categories: 

UML  Extension  [15]  presents  a  UML  extension  that aims  to  improve  the  
description  (draped  Agent  Markup Language  based)  ontologies  using  UML.  [16] 
Presents a graphical representation of OWL based on UML; it is extended by OWL 

annotation  [17] presents a method for the automated  determination  of semantic  rela-
tions between concepts of an ontology generated from conceptual models specified in 
UML. 

  An approach based on XSLT: Gasevic [18] provided transformation rules of UML 
class diagrams into OWL ontologies.  Transformations are performed by Extensi-
ble Stylesheet Language Transformation (XSLT) operating models in XML for-
mat. In addition, UML profile was used to model specific aspects of ontologies.  
  Approaches  based  on  Meta-Models:  [15]  described  a meta-model  for  OWL  

based  on  Meta  Object  Facility (MOF) and a UML profile for  modeling  ontol-
ogies using UML.  [19]  is  a  preparation  for  the  specification  of  the Ontology  
Definition  Meta-Model  (DOM).  

  OWL meta-model as a UML profile [20] gave a transformation between UML and 
OWL ontologies based on Atlas Transformation Language (ATL). [21] used the 
MOF Script tool to perform the transformation from UML to owl2.  However, they 
aimed at the validation of the Metamodels. They introduced several elements of 
UML in the  ontology,  which  are  necessary  to  achieve  this  goal, but  it  com-
plicates  the  use  of  ontology.  [23]  proposed  a methodology  based   on  the  
driven    engineering    models  (MDA)    for    the    generation    of    ontologies    from  
annotated UML  business  model.  The authors presented a transformation of class 
diagrams in ontologies represented by owl2[13]. They specified the transformation 
in M2 using the QVT transformation language and metamodels and UML owl2.  

Recently  a  promising  new  tool  named  umlTUowl  proposed  in  European  project 
(TwoUse Toolkit) for the transformation of class diagrams into an ontology [22]. um-
lTUowl has been developed to overcome the problems that arise during the transfor-
mation process of evaluated UML2OWL tools. It is not only optimized to transform 
UML class data models, as used by partners of CDL-Flex (Visual Paradigm for UML 
V7.2, 8.2; XMI 2.1, Microsoft Visio 2010 XMI 1.0) into OWL 2 DL ontologies. um-
lTUowl eases the integration of new transformation scripts, e.g. support for ArgoUML 
0.32.2  XMI  2.1(freeware)  has  been  already  implemented.  Its  maxim  is:  don’t  try  to 
provide an overall transformation solution for all vendors, because parsing of XMI is 
too fragile. Be prepared for variations and UML-model-vendor updates that affect the 
structure of the resulting XMI code by providing traceability of supported UML tools, 
as well as providing high testability, modifiability and extensibility. We will base on 
umlTUowl in the phase the transformation of class diagram into an otology of our in-
tegration process. 

5 

Semantic integration of uml classes diagrams  

The  semantic  integration  of  different  UML Class Diagram  in  the  same infor-
mation system goes through a process  of detection and  resolution  of  semantics  con-
flicts  that  may  exist among  different  models.  We  consider  that  each conflict  is  
generated  by  a  non-definition  of  a  semantic relation (e.g.,: equivalence semantic 
relationship which may cause a conflict type naming). We based in this paper on ontol-
ogies alignment in order to align the ontologies related to UML Class Diagram, due to 
its  ability  of  producing  an  ontology  called  Correspondant  Ontology  (CO)  which  in-
cludes the concepts and their semantic relationships derived from the multiple sources 
ontologies.  This task is required and appropriate in the process of semantic integration. 

That's why, we show the usefulness of CO and how it can be  used  either  in  an  auto-
matic  process  as  an input  of  the integration phase as well as process assisted by the 
designers of information  systems. This allows to deduct a set of actions (add, edit or 
delete  a  concept or relation)  in  order  to  achieve  semantic  integration  of  UML  Class 
Diagram.  The integration of UML Class Diagram aims to detect and resolve conflicts 
caused by the heterogeneity of UML Class Diagram. The goal is to produce a single 
unified  model.  We  define   the binary  UML  Class Diagram  semantic  integration  
based  on  semantic integration  of  ontologies  related to  the  UML Class Diagram.  
We have  proposed  [1]  and  [2]  an  integration  processes  that reduces  the  problem  
of  semantic  integration  of  UML Class Diagram  to  a problem of ontologies align-
ment.  Bezivin [3], defined the models integration as follow:  

“Takes two models MA, MB and a Correspondence Model CMAB between them as 

input and combines their elements into a new output model”. 

We are based on this definition to define integration of UML Class Diagram:  The  
integration  of  UML Class Diagram takes  two  models   BC1  and  BC2  and Corre-
spondence Model CM1,2 between them as input and combines  their  elements  into  a  
new  output  model BC1,2: 

Integration : 

2
Smodels

× SC−models   → Smodels   

(BC1 , BC2, CM1,2)   → BC1,2 

Integration is a binary integration, we rely on the latter to  define  the  integration  
of  a  set  of  models,  denoted  BC1,...,BCn,  takes  a  set  of  models:  BC1,...,BCn  and 
correspondence  model  CM1,nbetween  them  as  input and  combines  their  elements  
into  a  new  output component BC1,n. 

Integration: 

Pf(Smodels) × SC−models   → Smodels   

({BC1 , … , BCn}, CM1,n)   → BC1,n 

Pf(Smodels) is the set of finite subsets of Smodels. 
The  semantic  integration  requires  several  preprocessing  steps  including  trans-
formation  step  of  UML Class Diagram  to ontologies and ontologies alignment  step,  
resulting from transformation  that  fit  into  a  phase  called preIntegration that  we  can  
present  it  by  function.  The  latter  takes  as input  two  UML Class Diagram:   (BC1and  
BC2  and  a    background  ontology  DO1,2  to  produce    an    Correspondence    Ontology  
CO1,2,  which means: 

PreIntegration: 

2
SUML−D

× SD−Ontology → SC−Ontologies  

 (BC1 , BC2, DO1,2) → CO1,2 

We  present  the  transformation  step  of  UML Class Diagram to  the  ontology  by  
function  "Transformation"    which    takes    as    input    a    set    of    UML  Class  Dia-
gram, BC1,...,BCn  to  produce  a  set  of  ontologies  BCO1,...,BCOn, which means: 

Transformation: 

Pf(SUML−D)

→       P(Sontologies )                       

             {BC1 , … , BCn}

→        {BCO1 , … , BCOn} 

Pf(S)is the set of finite subsets of the set S. 

We present ontologies alignment step of ontologies derived from UML Class Dia-
gram  by  the  function  "alignment"  that  takes  as  input    a    set    of    ontologies  
BCO1,...,BCOnand  Background Ontology  DO1,n  and  outputted  correspondence  on-
tology CO1,n, which means: 

Alignment: 

 Pf(SUML−D) × SD−Ontology → SC−Ontologies  

({BC1 , … , BCn}, DO1,n) → CO1,n 

The  semantic  integration  of  models  takes  as  input  two    UML  Class  Diagram:  
BC1and  BC2and  correspondence  ontology resulting  from  “preintegration” CO1,2 for  
produce  a  single  UML Class Diagram Integrated BC1,2, which means: 

Integration: 

2
SUML−D

× SC−Ontologies  → SUML−D  

(BC1 , BC2, CO1,2) → BC1,2 

Based on the binary integration we define semantic integration among UML Class 

Diagram:  

SemanticIntegration: Pf(SUML−D) × SC−Ontologies  → SUML−D  

({BC1 , … , BCn}, CO1,n) → BC1,n 

5.1 

Inconsistency, incompleteness and redundancy errors 

In  ontologies,  there  is  a  possibility  of  inconsistency,  incompleteness  and  redun-
dancy errors that may occur in a single ontology or arise in the merged global model 
due to conflicts and the  semantic heterogeneities between source ontologies [27]. In 
this paper, we are more concerned to relate these errors to the merged model or inte-
gration phases. 

Incompleteness in the merged model means that any important axiom or definition 
is missing in the merged model but that can be inferred from the source models. Re-
dundancy in the merged model means that some information (axiom or definition) can 

                      
                       
 
be  inferred  more  than  once  by  different  inferring  mechanisms  or  modeled  multiple 
times in the merged model. Inconsistency in the merged model means that any contra-
dictory information can be deducted among the axioms and definitions of concepts be-
tween the merged model and the source models. Inconsistency is the most severe type 
of problem in the integration world that spoils the resultant merged model, therefore, 
in  our  contribution  of  semantic  integration  we  are  focusing  on  the  semantic  incon-
sistency errors. 

Semantic Inconsistency in the merged ontology occurs when the merging system 
makes an incorrect class hierarchy by classifying a concept as a subclass of a concept 
to which it does not really (or partially) belong. This can happen due to conflicts; such 
as instantiation violation, property mismatches, subsumption violation, domain breach, 
or constraint dissatisfaction.   

Another aspect which is crucial to avoid inconsistencies in the merging of hetero-
geneous ontologies is to analyze disjoint axioms between concepts in the source ontol-
ogies. On one side, their omissions create incompleteness in the global ontology. On 
the other side, they can create inconciseness (or redundancies) or may lead to semantic 
inconsistencies. Semantic Inconsistency such as common class between disjoint classes 
occurs when the merging system creates a class between two disjoint classes in the class 
hierarchy of concepts. 

Detection of such errors in the pre-integration phase is vital and is done by the anal-
ysis of mappings so that their integration can result a conflict-free union of source mod-
els. Therefore, our aim is to integrate a semantic validation step in the pre-integration 
phase to get more reliable output. 

6  Mappings validation for resolving inconsistency  

Over the last decade researchers have debated the effectiveness of algorithms for the 
merging and the automatic integration of ontologies in order to circumvent the com-
plexity of these tasks manual performing. Despite the great effort, the alignment and 
merging systems ontologies are still semi -automatic, which reduces the burden of cre-
ating and maintaining manual applications. These systems require human intervention 
to validate the alignment and merge ontologies. In addition, they use various aids, such 
as the common vocabulary, reference ontology, etc. [25] to detect mapping candidates. 
The validation process after the detection of initial mappings helps  to find inconsistent 
mappings; which is usually done by domain experts and  performed manually in most 
cases.  During  the  validation  phase,  the  domain  expert  is  responsible  for  classifying 
mappings results from alignment based on a similarity measure in equivalence mapping 
and is-a mapping [24]. 
In this paper our goal is to validate the mappings resulted from the alignment of a set 
of ontologies related to UML Class Diagrams integration candidates. Only few studies 
have addressed the validation of ontology in several aspects business, semantic, struc-
tural and syntactic, among those who used  the ontologies validation in the alignment  
process to detect some inconsistencies in the alignment relationships such as multiple 
correspondences and the following ones : 

  ASMOV (Automated Semantic Mapping of Ontologies with Validation) [29] is an 
ontology alignment system designed to cooperate ontologies from heterogeneous 
data sources. ASMOV allows producing mappings between concepts and / or prop-
erties and / or instances of two ontologies. Then ASMOV uses a process of seman-
tic validation for the candidate mappings, by checking the consistency of discov-
ered correspondences with regard to the ontologies. 

  RSMR (Reasoning Support for Mapping Revision) [5]: The semi-automatic tech-
nical review of the mapping aims to identify and repair invalid mappings. It pro-
poses the use of formal methods based on the description logics to assist the user 
in  the  revision  of  invalid  mappings  automatically  generated  by  alignment  algo-
rithms. 

  MRVPR (Mapping validation by probabilistic reasoning)[4] : A probabilistic ap-
proach to perform mappings validation according to the semantics of involved on-
tologies. 

The methodology of DKP -OM [25] proposed a unit for checking consistency of map-
ping and ensure that consistency of global merged ontology is generated by mappings, 
the unit are responsible for finding semantic inconsistency in the initial mapping when 
detectors discover any inconsistent mapping, they notify it to the ConsistencyChecker 
that warns the user about the inconsistent situations, which occur in global merged on-
tology by inconsistent following initial mapping. Hence, it reduces the human response 
by validating the merged ontology automatically. 
The RSMR and MVPR techniques can be applied to detect invalid mapping after the 
ontology evolution. However, they require very formal ontologies expressed using log-
ical languages. In addition, maintenance actions are limited to the removal of invalid 
mappings [6].  
We present mappings based on correspondence ontology for the validation step gener-
ated  from  alignment  step,  that  takes  as  input    a    set    of    mappings  CO1,n,  the  set  of 
ontologies candidates for integration {BCO1,...,BCOn} and the set of rules aims to vali-
date and to detect inconsistence mappings RV = {rv1, … , rvp} and  output a set validate 
mapping COV1,n, which means: 

Validation: 

𝐒𝐂−𝐎𝐧𝐭𝐨𝐥𝐨𝐠𝐢𝐞𝐬  × 𝐏𝐟(𝐒𝐔𝐌𝐋−𝐃) × {𝐑𝐕} → 𝐒𝐂−𝐎𝐧𝐭𝐨𝐥𝐨𝐠𝐢𝐞𝐬  

(𝐂𝐎𝟏,𝐧, {𝐁𝐂𝐎𝟏,...,𝐁𝐂𝐎𝐧}, {𝐫𝐯𝟏, … , 𝐫𝐯𝐩} ) → 𝐂𝐎𝐕𝟏,𝐧 

𝐏𝐟(𝐒𝐔𝐌𝐋−𝐃) is the set of finite subsets of 𝐒𝐔𝐌𝐋−𝐃. 

Table 2: Some example for validation rules [25] 

7 

UML diagrams classes integration process. 

In this section we propose a solution of semantic integration of UML diagrams clas-

ses. The following are the prominent features of our solution:  

N° 
Rule 
1 

Cause 

Rules description 

be-
con-

Cycle 
tween 
cepts 

Let {A, B, C, … , L} ∈ O1and {M, N, O, … , Z} ∈ O2 are concepts of 
ontologies  Mapping  (A, M)  and  Mapping  (B, O)  are  inconsistent 
(create cycle in class hierarchy) when in O1, A ⊂ B, and in O2, O ⊂
M 

Rule 
2 

Redundant 
concept  sub-
sumption 

Mapping  (A, M),  Mapping  (B, N)  then  Mapping  (C, L)  create  re-
dundant subsumption  when in O1, C ⊂ B ⊂ A, and in O2, N ⊂ M, 
L ⊂ M, but L ⊄ N. Or simply we can say, Mapping (A, M), Map-
ping (B, N) create redundant subsumption when in O1, B ⊂ A di-
rectly, and in O2, N ⊂ M, but indirectly. 

 
 
 
 
Figure 1 : semantic integration of uml diagrams classes 

1.  Transformation of UML class diagrams in ontologies  

2.  Use of a set of similarity measure to generate a set of mappings between 

ontologies on UML class diagrams  

3.  Validating mappings by set of validation rules  

4. 

Identification of subgraphs isomorphic  

a.  Construction of the set of mapping segments  

b.  Construction  of  the  set  of  equivalence  classes  of  the  relation 

bound by segments.  

c.  Construction of the set subgraphs isomorphic.  

5. 

Integration of UML class diagrams using subgraphs isomorphic and a cat-
alog of conflict resolution rules  

Produce a new BC resulting from the integration of UML diagrams classes sources.  

 
 
 
 
 
 
 
 
Our proposal relies on the results of several research projects including those on the 
components  transformation  from  a  component  modeling  language  into  an  ontology 
modeling  language,  and  those  related  to  the  alignment  ontologies  [11],  this  solution 
consists of two complementary sub-processes:  

-  The process of semantic pre-integration.  

-  The process of semantic integration.  

The objective of process perintegration is the production a set of semantic relation 
between concepts derived from the UML diagrams classes candidates for integration, 
represented  by  a  Correspondence  Ontology  (CO). This  process  consists  of  a  process 
description is provided in the following: The inputs of the integration process are:  

-  A set of UML diagrams classes selected by the designer in order to inte-
grate them in the future Information system. We denote{BC1,...,BCn } these 
UML diagrams classes.  

-  A Background ontology chosen by the designer according to the new IS. 

 The Background ontology describes concepts and relations among concepts of the 
IS. The Background ontology will thereafter be used to support the integration process.  

The outputs obtained at the end of the Pre-integration process:  

Correspondence  ontology  (Alignment):  In  the  first  step,  IS  designer  can  use  this 

ontology to detect and resolve semantics conflicts in a semi-automatic process.  

In the second step, the ontology could be reused in an automated process from the 
perspective  of  integrating  UML  diagrams  classes  while  defining  a  set  of  integration 
rules derived from the correspondence of UML diagrams classes. It will later be used 
as the ontology support during the second phase: the integration process.  

An correspondence ontology (Alignment) can be used as input in integration pro-

cess  

The pre-integration process comprises the following steps:  

-  Transformation the BC candidates for the integration into ontologies  

-  Aligning ontologies obtained based on the background ontology.  

- 

Produce the correspondence ontology.  

7.1  UML diagrams classes transformation into ontologies.  

UML  and  OWL  have  similar  concepts  in  many  ways  such  as:  classes,  associations, 
properties, packages, types,  generalization and instances.  UML is used to  model the 
dynamic behavior of a system. However, OWL does not allow this type of modeling. 
OWL is indeed able to infer navigating through relations between generalization and 
specialization classes, also individuals of a class based on the constraints imposed on 
the properties in the class definition, however, UML does not this feature [13]. A com-
parison  between  models  and  ontologies  is  given  in  [7].The  differences  between  the 
classes of the UML and OWL are studied in [8] and [9]. 

7.2  Ontologies alignment.  

Aligning ontologies is a crucial issue in the field of semantic  integration,  which  aims  
to  find  semantic  correspondences  between  a  pair  of  elements  of  ontologies  by 
identifying  semantic  relations. 
The ontologies alignment use one or more similarity measures (syntactic, semantic and 
structural) to detect the set of mappings. 
In the present paper our goal is to detect common parts between different ontologies on 
diagrams UML class. To better  meet our objective, and to significantly increase  the 
performance of integration algorithms following our approach, it is clear that the com-
mon parts that we should use are the largest parts. In the  next section we define the 
maximum isomorphic sub-graphs and we propose a method of construction the set of 
these sub-graphs from the set of mappings result from the alignment of ontologies. 
a)  Some specifications : 

- 

In this chapter, we will work with simple graphs but all properties and pro-
posals are applicable in the case of ontologies. 

-  The work is done on a set of two graphs; therefore we assume that the con-
structing algorithm of the setof maximal isomorphic graphs will also work 
on the graphs two by two. 

-  We will say that G1 is isomorphic toG2 (G1 ≅ G2) if the similarity function 

(see definition above) between the two graphs is an isomorphism. 

b)  Maximum isomorphic sub-graphs 

Let G1(V1, E1),  G2(V2, E2)  be  a  graphs  and I(G1, G2) ≔ { (P1, P2)\P1 ⊂ G1, P2 ⊂
G2, P1 ≅ P2}. We called I(G1, G2) the set of isomorphic sub-graphs of G1 e G2 (see Fig-
ure 1). 

Figure 2 : Example of two maximum isomorphic subgraphs 

′, P2
Let (P1, P2) and (P1
′. 
′ et P2 ⊂ P2

if P1 ⊂ P1

′) be two elements in I(G1, G2) ; we say that (P1, P2) ⊂   (P1

′, P2

′) 

 
 
Inclusion ⊂ is an order relation in I(G1, G2), which is finite, therefore let Max(I)  be 
the set of these maximal elements. For example in « Figure 1 »  (P1, P2) is a maximal 
element  because  we  cannot  find  another  element  in  I(G1, G2)that  contains  it  strictly 
′). 
(ie :(P1

′)\ (P1, P2) ⊊ (P1

′) et P1

′ ≅ P2

′, P2

′, P2

Max(I), by construction, contains the maximal isomorphic sub-graphs of G1and G2, 

in the next section we will give a method that facilitates the construction of this set.  

The relationship "Linking segment" 
Définition 1 (Segment): 
Let G(V, E) be a graph, a segment S of G is a family of member of V,   {ai}1≤i≤n , 
such that for each 1 ≤ i ≤ n, one of the two pairs, (ai, ai+1) and (ai+1, ai), belongs to 
E. 

In the case of ontologies, we must take into consideration the types of relationships, 

So the definition is as follows: 

Let O(C, R, T) be an ontology, a segment S of O is a family of member of C,  {ci}1≤i≤n 
, such that for each 1 ≤ i ≤ n, one of the two vectors, (ci, ci+1, t) and (ci+1, ci, t), be-
longs to E (with t ∈ R). 

Notation 1: we will write S(a, b) for denote a segment with a and b as ends. 
ordered 
can 
In 

« Figure 

that 

see 

2 » 

the 

we 

set 

microproc, Système unit, memory, ROM} is a segment. 

Figure 3 : Example of segment 

The way by which we define the segment, shows us that we can see it as a sub-graph 
by adding to the set of {ai}1≤i≤n a set of relations which contains, for each1 ≤ i ≤ n, 
one of the two pairs, (ai, ai+1) or (ai+1, ai), according to what is in the original graph 
(see « figure 2 »).  

Definition 2 (Isomorphism of segments) :Let G1, G2 be two graphs and S1, S2two 
segments of G1and  G2 , We say that S1 and S2 are isomorphic if they are isomorphic 
as subgraphs (see « figure 3 »). 

 
 
Figure 4 : Example of two isomorphics segments 

Definition 3 (Segment of  mappings) : Let  G1(V1, E1), G2(V2, E2) be two graphs, 
and M the set of mapping of these two graphs, a segment of mappings S is a family of 
members of M, {(ai, bi)}1≤i≤n , Such that the two families {ai}1≤i≤n and {bi}1≤i≤n are 
two isomorphic segments of G1 and G2 (see « Figure 4 »). 

Notation 2: We will write S[(a, b), (c, d)] for denote a segment of mappings with 

(a,b)  and (c, d) as ends. 

Notation 3: Will write S[(a, b), (c, d)] for denote the set of all possible segments of 

mappings in M. 

Figure 5: Example of mapping segment 

Definition 4 (The relation « bonding by segment») : Let M be the set of mapping 
for two graphs G1 and G2, We say that a mappings (a1, b1) is bonded by segment with 
(a2, b2), and we write (a1, b1) <> (a2, b2), if there is a segment of mappings whose 
two ends are (a1, b1) and (a2, b2) (see Figure 5). 

(a1, b1) <> (a2, b2)   ≡   ∃ S[(a1, b1) , (a2, b2)]   ∈  S(M) 

 
 
 
Figure 6 : Example relation bonding by segment between two mappings 

Proposition 1 
The relation « bonding by segment» is an equivalence relation. 
Proof: 
Reflexive: ∀ (a,b) ∈ M , S[(a,b) ,(a,b)] ∈ S(M) therefore (a,b) <> (a,b). 
symmetric:  

(a1,b1) <>(a2,b2) ⇔ ∃ S[(a1,b1) ,(a2,b2)] ∈ S(M) 

                ⇔S[(a2,b2) ,(a1,b1)] ∈ S(M) 

                  ⇔ (a2,b2)<>(a1,b1) 
Transitive:  
Let 

and 

(a1, b1) <> (a2, b2) 

therefore 
∃S1[(a1, b1) , (a2, b2)]   ∈  S(M)  and  ∃S2[(a2, b2) , (a3, b3)]   ∈  S(M).  S1  and  S2  can 
be  written  as  families  of  mappings  {(x_i, y_i)}1≤i≤n  and  {(x_i, y_i)}n≤i≤m ,  with 
(x1, y1) =   (a1, b1), (xn, yn) =   (a2, b2), (xm, ym) =   (a3, b3), since  (xn, yn)  belongs 
to S1 and to S2, therefore the familie {(x_i, y_i)}1≤i≤m constructed from two segments is 
a segment of mappings to, hence (a1, b1) <> (a3, b3). 

(a2, b2) <> (a3, b3) 

Notation4: Will write C(M) for denote the set of equivalence classes of the relation 

<> and (a, b)

̅̅̅̅̅̅̅ for denote equivalence class of mapping (a, b). 

Proposition 2: 
The set of equivalence classes of the relation <>, C(M), is identical (up to a bijec-

tion) to the set of the maximal isomorphic sub-graphs of G1 and G2, Max(I). 

Proof : 
Let the function: 

Such that (a, b)

̅̅̅̅̅̅̅ ⊂ V1 × V2 with V1 is the set of the vertices of P1 and V2 the set of the 

 F ∶ C(M) →  Max(I) 
̅̅̅̅̅̅̅ → ( P1, P2)  
(a, b)

vertices of P2. 

Show that F is well-defined: 

 
′). 

′, P2

′, P2

′, P2

′, E2

Let (a, b)

̅̅̅̅̅̅̅}  and V2

̅̅̅̅̅̅̅ an element of C(M). (a, b)

̅̅̅̅̅̅̅ contains all the elements bonded by segment 
with (a, b), and by definition each segment of mapping is constructed by two isomor-
′ ) et 
phic segments, so we can build two isomorphic subgraphs of G1 and G2, P1
′(V2
′ ) such that V1
P2
Now  we’ll show that  (P1

′, E1
′(V1
̅̅̅̅̅̅̅}. 
′ = {y ∶   ∃(x, y) ∈   (a, b)

′ = {x ∶   ∃(x, y) ∈   (a, b)

such that (P1, P2) ∈ I(G1, G2) and (P1
′ ⊂ V1, b ∈   V2
V1 × V2. As a ∈   V1
(a, b)  are  linked  by  segment,  then  (x, y)) ∈   (a, b)
(P1, P2) ⊂ ( P1
F((a, b)

′) is  maximal in  I(G1, G2) : Let P1(V1, E1) et P2(V2, E2)  
′) ⊂   (P1, P2)  and let x similar to y with (x, y) ∈
′ ⊂ V2 and P1 and P2 are isomorphic, then (x, y) and 
′  et  y ∈ V2
′  and  then 
′)  is  maximal  and 

̅̅̅̅̅̅̅,  then  x ∈ V1
′, P2
′)  hence  ( P1

′)  therefore  (P1, P2) = ( P1
′, P2

′, P2
̅̅̅̅̅̅̅) = ( P1
Show that F is bijective : 
Surjectivity : Let (P1, P2)   ∈  Max(I), then P1(V1, E1) ≅ P2(V2, E2) therefore there is 
an element (a, b) of the set of mapping M, such that (a, b)   ∈ V1 × V2, and by the same 
̅̅̅̅̅̅̅) = (P1, P2). 
method above can be shown that F((a, b)
Injectivity :  Suppose  that  F((a, b)

2  the  set 
of vertices of P1, therefore that is a segment S1={ai}1≤i≤n of P1with a1 = a and an = c. 
(P1, P2)   ∈  Max(I) then isomorphic then that is a segment S2={bi}1≤i≤n of P2 isomor-
phic to S1, which means that ( a, b1)and ( c, bn)belongs to the set of mappings M (a is 
similar to b1and c is similar to bn), so as ( a, b)and ( c, d) belongs to M and also a graph 
can not contain two similar vertices, then b1 = b and bn = d, therefore it is possible to 
form  a  segment  of  mapping  by  S1and  S2  whose  two  ends  are  (a, b)  and  (c, d), 
hence (a, b)

̅̅̅̅̅̅̅)  =( P1, P2),  then  (a,c) ∈ V1

̅̅̅̅̅̅̅) =  F((c, d)

̅̅̅̅̅̅̅. 
̅̅̅̅̅̅̅̅ = (c, d)

Remark: the previous proposition gives a very interesting result in this study, in the 
following we will define a function that share the same principle to give birth to the 
algorithm of construction of the set Max (I). 
Identification of subgraphs isomorphic 
Let G1(V1, E1) , G2(V2, E2) and M the set of mapping of this two graphs. 
Definition  5:  The  “Equivalence  Class  Function”  is  a  function  that  allowed  us  to 
browse the mappings linked by segment with a fixed member of the set of mapping  M, 
which gives as a result its equivalence class, this function is of M into P(M ) the set of 
all subset of M: 

ECF ∶ M →  P(M) 

(a, b) → A ∈  P(M) 

With  A = {(a′, b′) ∈ M /  {(a, b), (a′, b′)} ∈ S(M)} . 
Now  let  (a, b) ∈ M,  By  recursivity  we  can  define  the  sequence  (An)n∈ℕ  in  P(M) 

such that : 

A0 = {(a, b)}

{

An = ECF(An−1)\ ⋃ Ai

0≤i≤n

By  construction  the  An are  disjoint  and  M  is  finite,  so  from  a  certain  rank  R  the 

Anwill be empty, this can be used as a test for stoping the recursive function. 

We will call R the rank of (a, b) and we denote it by rg(a, b). 
Proposition 3 : 

 
Let (a, b) ∈ M and (An)n∈ℕ the sequence defined by (a, b)as above, then ⋃

̅̅̅̅̅̅̅. 
(a, b)

n∈ℕ

An

=

Proof : 
Let (a′, b′) ∈   ⋃

n∈ℕ

n∈ℕ

An

An

Let Now (a′, b′) ∈ (a, b)

 then (a′, b′) ∈   An0 for some n0 ∈ ℕ, by construction of An 
we can say that there is an element of An0−1 bonded by segment with (a′, b′), and so 
̅̅̅̅̅̅̅ and we 
on until we reach A0 = {(a, b)} then (a′, b′) <> (a, b) hence (a′, b′) ∈ (a, b)
conclude that ⋃

̅̅̅̅̅̅̅. 
⊂ (a, b)
̅̅̅̅̅̅̅ then (a′, b′) <> (a, b) then there is a segment of mappings 
{(ai, bi)}1≤i≤nsuch  that  (a1, b1) = (a, b)and  (an, bn) = (a′, b′)  then  (a′, b′)   ∈ An 
hence (a′, b′) ∈   ⋃
Remarks:  
Knowledge  of ranks of elements of M  in advance (where  an approximation), can 
help us in the choice of the inputs of algorithm, because we can gain a lot in terms of 
performance by choosing the elements of smallest ranks. 

 and we conclude that(a, b)

̅̅̅̅̅̅̅ ⊂ ⋃

An

An

n∈ℕ

n∈ℕ

. 

The function ECF facilitates algorithm construction of C(M) that is identical to the 

set of maximal isomorphic subgraphs Max (I) (proposition 3). 

Semantic integration process  

The  alignment  process  BC  candidates  for  the integration outputs  a  Correspondence  
Ontology  (CO)  between  the concepts of  BC. The Correspondence Ontology eventu-
ally externalize resource or support ontology for the integration process, which can help 
developers to achieve their  information  system  design tasks or  integrate  BC  auto-
matically  using  a  set  of  rules  for resolving conflicts that operate the semantic rela-
tionships in  CO.  The Correspondence   Ontology  is  used  as  a  new ontology  support  
in  future  iterations  in  the  integration phase there by increasing the efficiency of the 
process. 

A set of UML diagrams classes, denoted as BC1, BC2, ... BCn selected by the de-

signer for their integration in the future information system. 

A correspondence ontology between the concepts of BC is the result from the pre-
integration phase. The semantic integration often requires to find the correspondences 
between the entities: components, classes, attributes, services. It is in this context that 
we   proposed  to  create  an   ontology  that   includes correspondence  of  concepts  
candidates  for integration and relationships starting and semantic relationships detected 
in the pre-integration. 

A  catalog  of  conflict  resolution  rules,  which includes  a  set  of  resolution  rules  
(e.g.,  for  the conflict type  homonomie  resolution  rule  is  the  re-naming by different 
names, if the concepts are synonymous must  remove  one  of  the  two)  by  default  
which operate  according  to  the  types  of  conflicts. 
We  consider  that  every  conflict  is  generated  by  a non-definition of a semantic 
relation (e.g., synonymy  semantic  relationship  which   may  cause  a  conflict type 
naming). 

8 

Example 

The purpose of this example is to explain the steps respectful of our approach. We will 
work on two simple graphs G_1 and G_2 (see Figure 7). 

Figure 7 : Graphs G_1  and G_2 

The first step is to transform UML class diagrams into ontologies. So the result is O_1 
(C_1,R_1,T_1) and O_2 (C_2,R_2,T_2), with 
C_1= {Desktop PC,Keyboard, System unit,…} 
R_1= {(Desktop PC,Keyboard, Composition),…} 
T_1= {Inheritance, Aggregation, Composition} 
C_2= {PC portable, Souris,Unité centrale,…} 
R_2= {(Stockag, Disque dur, Inheritance),…} 
T_2= {Inheritance, Aggregation, Composition} 
Use of a similarity measure to generate a set of mappings between ontologies on UML 
class diagrams M 
M= {(Monitor,Ecran),(Storage,Stockage), 
(Hard disk,Disque dur),(RAM,RAM),…} 

 
 
 
 
After validating mappings by set of validation rules, we will use the ECF algorithm (see 
VII.B.d), based on segments mapping, to identify the equivalences class’s. In “Figure 
8” we have some example for a mapping segments: 

Figure 8: Mappings Segments 

For example the following mappings are bonded by segment (RAM,RAM) and (Mi-
croproc, Microproc) (Memory, Mémoire) and (Microproc, Microproc) (ROM,ROM) 
and (System unit, Unité centrale) (Hard disk, Disque dur) (Storage, Stockage) 
The result of this step is the set of equivalences class’s C(M) 
C(M)={{(Monitor,Ecran)},{(Storage,Stockage), 
(Hard  disque,Disque  dur)},{(RAM,RAM),(ROM,ROM),(System  unit,Unité  cen-
trale),(Cache,Cache),(Memory,Mémoire),(Microproc,Microproc)}}. 
By “proposition 3”  C(M) is identical to the set of maximals isomorphic subgraphs I(M) 
presented in “Figure 9”. 

 
 
 
 
Figure 9: maximals isomorphic subgraphs 

Now, using the set of maximals isomorphic subgraphs, we can construct the graph G, 
result of integration of G_1 and G_2 (see “Figure 10”) . 

 
 
 
 
Figure 10 : The diagram G result of integration of G_1 and G_2. 

9 

Conclusions 

In this paper, we contributed semantic integration of UML class diagram with the se-
mantic validation based on the segments of mappings. We proposed the naming seman-
tics conflict resolution of UML classes diagrams in the conceptual phases of analysis 
and design. Our novel solution for the semantic integration of UML class diagrams is 
based on the comparison of the source UML class diagrams in the pre-integration phase 
through concepts measurement. We contributed a set of validation rules for the detec-
tion of consistent and correct mapping derived from the alignment of ontologies related 
to the UML class diagrams. Our methodology is composed of segments measurement 
that is formalized using mathematical approach. We hope that our solution is a signifi-
cant milestone towards the semantic integration of UML class diagrams to enable in-
teroperability among multi-vendor engineering information systems. 
               Our  ongoing  research  is  to  analyze  semantic  heterogeneities  among  UML 
class diagrams and integrate other semantic errors (such as incompleteness and redun-
dancies) in the semantic integration phase to achieve the global model with higher level 
of quality. 

 
  
References 

1.  Elasri  H.,  Sekkaki  A.,  Kzaz  L.  "An  Ontology-Based Method  for  Semantic  Integration  
of  UML diagrams classes",  IEEE  New  Technologies  of  Distributed Systems  (NOTERE),  
2011  11th  Annual  International Conference on, 9-13 May 2011, Paris, france.  

2.  Benammar  O.,  Elasri  H.and  Sekkaki  A.,  "Semantic matching  of  security  policies  to  
support  security    experts"  The  Sixth  International  Conference  on  Emerging  Security 
Information,  Systems  and  Technol-ogies,  (SECURWARE 2012), August 19 – 24, 2012 – 
Rome, Italy.  

3.  Jean    Bézivin,    Salim    Bouzitouna,    Marcos    Didonet    Del  Fabro,  Marie-Pierre  Gervais, 
Frédéric Jouault, Dimitrios S. Kolovos,  Ivan  Kurtev,  Richard  F.  Paige  "A  Canonical 
Scheme  for  Model  Composition"  EBCDA-FA  2006: Bilbao, Spain. 

4.  Castano, S., Ferrara, A., Lorusso, D., Näth, T. H., & Möller, R. (2008).  Mapping Validation 
By  Probabilistic  Reasoning.  Paper  Presented  At  The  Proceedings  Of  The  5th  European 
Semantic Web Conference On The  Semantic Web: Research And Applications. 

5.  Meilicke, C., Stuckenschmidt, H., & Tamilin, A. . Reasoning Support for Mapping Revision. 

Journal of Logic and Computation, 2009, pp.807-829. 

6.  Duy Dinh, Julio Cesar Dos Reis, Marcos DaSilveira, Cédric Pruski and Chantal Reynaud: 
Identification  des  informations  conceptuelles  définissant  un  alignement  entre  ontologies 
médicales. 2e édition du Symposium sur l'Ingénierie de l'Information Médicale. SIIM 2013, 
Lille, 1 Juillet 2013 

7.  Atkinson, Gutheil, and Kiko: On the Relationship of Ontologies and Models. In:Proceedings 
of  the  2nd  Workshop  on  Meta-Modeling  and  Ontologies,  p.  47{60.Gesellschaft  f(cid:127)ur 
Informatik, Bonn, October 2006. 

8.  Hart, Emery, Colomb, Raymond, Taraporewalla, Chang, Ye, Kendall, and Dutra: OWL Full 

and UML 2.0 Compared, March 2004. 

9.  Kiko,  and  Atkinson:  A  Detailed  Comparison  of  UML  and  OWL.  Technischer  Bericht  4, 

Dep. for Mathematics and C.S., University of Mannheim, 2008. 

10.   Safar B, Chantal R., "Alignement d’ontologies basé sur des ressources complémentaires : 
illustration sur le système Taxo-Map" In Revue Technique et Science Informatiques (TSI), 
22p, 2009. . 

11.  J. Euzenat and P. Shvaiko, "Ontology Matching". Springer, Heidel-berg, 2007.  
12.  Viviana Mascardi, Angela Locoro, Paolo Rosso "Automatic Ontology Matching via Upper 
Ontologies: A Systematic Evaluation". IEEE Trans. Knowl. Data Eng. 22(5): 609-623, 2010.  
13.  Jesper Zedlitz, Jan Jörke and Norbert Luttenberger "From UML to OWL 2 ", 3 rd Semantic 
Technology  and  Knowledge  Engineering  (STAKE  2011),  July  2011,  UNITEN  Putrajaya 
Campus, Malaysia.  

14.   K.  Falkovych,  M.  Sabou,    and  H.  Stuckenschmidt,      "UML  for  the  Semantic  Web: 
Transformation-Based  Approaches",    ;presented  at  Knowledge  Transformation  for  the 
Semantic Web, 2003, pp.92-106.  

15.  Baclawski, Kokar, Kogut, Hart, Smith, Holmes, Letkowski, and Aronson "Extending UML 
to Support Ontology Engineering for the Semantic Web". The Unifed Modeling Language. 
Modeling Languages, Concepts, and Tools, p. 342-360, 2001.  

16.  Schreiber: A UML Presentation Syntax for OWL Lite, Technical Report, 2005. 
17.  M.  B.A.  Mhiri,  F.  Gargouri,  D.  Benslimane,  "Détermination  automatique  des  relations 
sémantiques entre les concepts d’une ontologie", conference Inforsid 2006, isbn : 2-906855-
22-7, page 627-642, 2006.  

18.  Gasevic,  Djuric,  Devedsic,  and  Damjanovic:  Converting  UML  to  OWL  Ontologies.  In: 
Proceedings of the 13th international World Wide Web conference on Alternate track papers 
& posters, p. 488{489. ACM, Mai  2004. 

19.  Brockmans, Colomb, Haase, Kendall, Wallace, Welty, and Xie "A model driven approach 
for building OWL DL and OWL Full ontologies" The Semantic Web -ISWC, p. 187-200, 
2006.  

20.  Milanovic,  Gasevic,  Giurca,  Wagner,  and  Devedzic  "On  Interchanging  between 
OWL/SWRL  and  UML/OCL"  .In:  Proceedings  of  6th  OCLApps  Workshop  at  the  9th 
ACM/IEEE MoDELS, p. 81-95, October 2006.  

21.  Hoglund,  Khan,  Lui,  Porres  "Representing  and  Validating  Metamodels  using  the  Web 

Ontology Language OWL2", TUCS Technical Report, May 2010.  

22.  Andreas  Grünwald, Thomas  Moser: umlTUowl  -  A  Both  Generic  and  Vendor-specific 

Approach for UML to OWL Transformation. SEKE 2012 

23.  C.  Faucher,  F.  Bertrand  J.Y.  :  Génération  d’ontologie  à  partir  d’un  modèle  métier  UML 

annoté, revue des nouvelles technologies de l'information, 12 ,2008.  

24.  Valentina  Ivanova,  J  Laurila  Bergman,  Ulf  Hammerling,  Patrick  Lambrix,  Debugging 
taxonomies  and  their  alignments:  the  ToxOntology-MeSH  use  case,  1st  International 
Workshop on Debugging Ontologies and Ontology Mappings, 2008 

25.  Muhammad Fahad, Néjib Moalla, Abdelaziz Bouras: Detection and resolution of semantic 
inconsistency and redundancy in an automatic ontology merging system. J. Intell. Inf. Syst. 
39(2): 535-557, 2012 

26.  Shi-Kuo Chang, Francesco Colace, Massimo De Santo, Emilio Zegarra, YongJun Qie: An 
Approach for Software Component Reusing Based on Ontological Mapping. SEKE 2012: 
180-187. 

27.  Fahad, M., & Qadir, M. A. A framework for ontology evaluation. In Proceedings of 16th 
int’l conference on conceptual structures, France. ICCS Supplement, Ceurws (Vol. 354, pp. 
149158), 2008. 

28.  Youness Lemrabet, Michel Bigand, David Clin, Nordine Benkeltoum, Jean-Pierre Bourey, 
Model  Driven  Interoperability  in  practice:  preliminary  evidences  and  issues  from  an 
industrial  project,  Proceedings  of  the  First  International  Workshop  on  Model-Driven 
Interoperability, 2010 

29.  Jean-Mary  Y.,  Shironoshita  E.P.,  Kabuka,  M.:  “Ontology  Matching  with  Semantic 
2009 

Semantics, 

Web 

Verification”, 
http://dx.doi.org/10.1016/j.websem.2009.04.001  

Journal 

of 

30.  Anwar, A., Ebersold, S., Coulette, B., Nassar, M., Kriouile, A.: A rule-driven approach for 
composing viewpoint-oriented models. Journal of Object Technology 9(2), 89–114 (2010) 
31.  Kolovos,  D.S.,  Paige,  R.F.,  Polack,  F.A.C.:  Merging  models  with  the  epsilon  merging 
language (eml). In: Wang, J., Whittle, J., Harel, D., Reggio, G. (eds.) MoDELS 2006. LNCS, 
vol. 4199, pp. 215–229. Springer, Heidelberg (2006). 

32.  France, R., Fleurey, F., Reddy, R., Baudry, B., Ghosh, S. “Providing Support for 

 Model Composition in Metamodels”. In procc of the 11th IEEE EDOC conference, pp 253-

264. 2007 

33.  Clarke  S.  “Aspect-Oriented  Design  with  Theme\UML”.  UPGRADE  vol. V,  No. 2,  April 

2004, pp 14-20 

34.  Uli  Fahrenberg,  Mathieu  Acher,  Axel  Legay,  Andrzej  Wasowski:  Sound  Merging  and 
Differencing  for  Class  Diagrams.  Fundamental  Approaches  to  Software  Engineering 
(FASE), 2014: 63-78 

 
