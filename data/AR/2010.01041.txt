0
2
0
2

t
c
O
2
2

]

V
C
.
s
c
[

2
v
1
4
0
1
0
.
0
1
0
2
:
v
i
X
r
a

Homography Estimation with Convolutional Neural Networks Under Conditions
of Variance

David K. Niblick
Purdue University
610 Purdue Mall, West Lafayette, IN 47907
dniblick@purdue.edu

Avinash Kak
Purdue University
610 Purdue Mall, West Lafayette, IN 47907
kak@purdue.edu

Abstract

Planar homography estimation is foundational to many
computer vision problems, such as Simultaneous Localiza-
tion and Mapping (SLAM) and Augmented Reality (AR).
However, conditions of high variance confound even the
In this report, we analyze
state-of-the-art algorithms.
the performance of two recently published methods using
Convolutional Neural Networks (CNNs) that are meant to
replace the more traditional feature-matching based ap-
proaches to the estimation of homography. Our evaluation
of the CNN based methods focuses particularly on measur-
ing the performance under conditions of signiﬁcant noise,
illumination shift, and occlusion. We also measure the ben-
eﬁts of training CNNs to varying degrees of noise. Addition-
ally, we compare the effect of using color images instead of
grayscale images for inputs to CNNs. Finally, we compare
the results against baseline feature-matching based homog-
raphy estimation methods using SIFT, SURF, and ORB. We
ﬁnd that CNNs can be trained to be more robust against
noise, but at a small cost to accuracy in the noiseless case.
Additionally, CNNs perform signiﬁcantly better in condi-
tions of extreme variance than their feature-matching based
counterparts. With regard to color inputs, we conclude that
with no change in the CNN architecture to take advantage
of the additional information in the color planes, the differ-
ence in performance using color inputs or grayscale inputs
is negligible. About the CNNs trained with noise-corrupted
inputs, we show that training a CNN to a speciﬁc magni-
tude of noise leads to a “Goldilocks Zone” with regard to
the noise levels where that CNN performs best.

1. Introduction

A homography is a planar projective transformation rep-
resented by a 3 × 3 non-singular matrix in the homoge-
neous coordinate system. The matrix H maps homogeneous
coordinates x to x(cid:48). This transformation is foundational

to many computer vision problems, including Simultane-
ous Localization and Mapping (SLAM), 3D reconstruction,
Augmented Reality (AR), etc. [4] [19] Failing to accurately
estimate a homography, especially in non-ideal conditions
for automated applications, can cause signiﬁcant error that
propagates through the system. For example, in AR ap-
plications that require tracking the pose of a camera, even
“minor” camera motions create estimation error that cause
state-of-the-art systems to fail [12].

The baseline homography estimation algorithms depend
on detecting features in a pair of images, determining can-
didate feature correspondences by comparing the descrip-
tor vectors associated with the features, eliminating the out-
liers in the candidate correspondences with RANSAC [5],
and, ﬁnally, using a nonlinear least-squares method (like the
Levenberg-Marquardt algorithm) over the inlier set to esti-
mate the homography. Commonly used algorithms for fea-
ture detection and description include Scale Invariant Fea-
ture Transform (SIFT) [13], Speeded Up Robust Features
(SURF) [1], and Oriented FAST and Rotated BRIEF (ORB)
[17]. While these algorithms have been used in various ap-
plications for over a decade, they all produce inaccurate re-
sults under non-ideal conditions. Noise, illumination vari-
ance, and obscuration are common occurrences in many au-
tomated computer vision applications that are vulnerable to
the erroneous estimations of homography as produced by
the feature-matching based methods.

The recent success of Convolutional Neural Networks
(CNNs) in computer vision applications has inspired re-
search in using deep learning for homography estimation.
In computer vision, CNNs have achieved immense success
at object detection and classiﬁcation, image synthesis, and
stereo matching [18] [6] [7]. Against these advances in
deep-learning based solutions to computer vision problems,
this report presents an exhaustive evaluation of two CNN
based tools for estimating homographies [3] [15]. The au-
thors of these two networks have reported signiﬁcant im-
provements over what can be achieved with the traditional
homography estimation methods using the ORB [17] fea-

1

 
 
 
 
 
 
tures.1

The CNN-based homograpahy estimation solution pre-
sented in [3] uses an altered version of the VGG-14 [11]
architecture to calculate the four point parameterization of
the homography matrix between an image and a warped im-
age. They used the Common Objects in Context (COCO)
Dataset [11] for training and testing. A key part of their
method is the process they employed for generating the
training data, in which they warped an image with a ran-
domly generated homography, and then passed that homog-
raphy as the ground truth. The reported results were approx-
imately 20% more accurate than those based on the feature-
matching method using ORB.

The second CNN-based homograpahy estimation solu-
tion, presented in [15], uses multiple Siamese CNNs in
a sequence with an attempt to achieve accuracies better
than those reported in [3]. With the “boosting-like” ef-
fect achieved by their architecture, they claimed a 67% er-
ror reduction compared to what could be achieved with the
feature-based method using ORB.

Our main focus in this paper is the analysis of the per-
formance of the CNN based approaches for homography
estimation under conditions of high variance — that is,
when the image data is corrupted with varying amounts
of noise, with varying degrees of illumination changes, and
with varying degrees of occlusion. In addition to comparing
the two CNN based approaches with each other, we also re-
port on their comparison with the baseline methods based
on SIFT, SURF, and ORB.

With regard to noise, of particular signiﬁcance in our
comparative evaluations is the effect on performance when
the CNNs are trained on noise-corrupted data vis-a-vis the
case when they are trained on just clean data. When the
CNNs are trained with noise-corrupted inputs, we show
that training a CNN at a speciﬁc level of noise leads to a
“Goldilocks Zone” with regard to the noise level where that
CNN performs best. That is, the CNN-based homography
estimator produces the best average performance when the
noise level (as characterized by its statistical properties) that
was used during the training matches the noise level in the
images on which the CNN is tested.

Our comparative evaluation also includes results on
color images. That part of the evaluation has required mod-
ifying slightly the CNNs proposed in [3] and [15] since now
we must account for the three color planes at the input to the

1It is surprising that the authors of neither [3] nor [15] compared the
performance of their CNN based homography estimators with what can
be achieved with SIFT and SURF — two very commonly used operators
used in calculating the homography between two images. A comparison
of the CNN-based homography estimation with the SIFT-based approach
has been reported in [14]. With regard to a comparison of CNN-based ho-
mography estimators with the feature-matching based methods, our report
here expands on the work in [14] through a more exhaustive comparison
that not only includes varying degrees of noise but also varying degrees of
illumination and obscuration effects.

CNNs. For the case of color, we show that, with the same
overall CNN architecture, the additional information in the
color planes makes negligible contributions to the accura-
cies of the estimated homographies, implying that, perhaps,
with additional channels in the convolutional layers — es-
pecially those that are closer to the input — one might be
able to enhance the accuracies.

All our tests were conducted on the Open 2019 Dataset
[10] [9], which is the ﬁrst attempt at using this dataset for
homography estimation with CNNs. We ﬁnd that, although
SIFT is more accurate under ideal conditions, CNNs per-
form signiﬁcantly better under conditions of variance, es-
pecially with regard to additive noise. We also show that
the performance of a CNN-based homography estimator for
noisy images can be improved if the CNN is trained with
noisy training data containing roughly the same level of
noise as is expected in the test data. This improvement vis-
a-vis the noise comes at a small cost to the performance for
the noiseless case. The key takeaway from our paper is that
no one method should be treated as “universally superior”
to all others, but instead environmental conditions and engi-
neering constraints need to be deliberately considered when
choosing the best method for any application.

In the rest of this paper, we start in Section 2 with a re-
view of the two CNN-based homography estimators men-
tioned above. We talk about the datasets and the metrics
used in our comparative evaluation in Section 3. In Sec-
tion 4, we describe the experiments we have carried out for
meeting the goals of this paper. Section 5 presents the re-
sults of our comparative evaluation. Finally, we conclude in
Section 6.

2. Homography Estimation With CNNs

In this section, we provide a brief review of the two
CNN-based approaches to homography estimation that we
have used in our comparative evaluation.

2.1. Deep Image Homography Estimation (DH)

The CNN-based approach to homography estimation as
proposed in [3] uses the VGG-14 Net [18] to process two
patches from an image pair. The two input patches are con-
verted to grayscale, normalized, and then are stacked onto
each other. The architecture uses eight convolutional lay-
ers, followed by two fully connected layers (Figure 1). The
convolutional layers use a 3 × 3 kernel. ReLu activation
and batch normalization follows each layer. Max Pooling
occurs prior to the third, ﬁfth, and seventh convolutional
layers. Dropout with a factor of 0.5 is applied before each
fully connected layer.

The output of the neural network is a parameterized form
of the homography matrix — the parameterized form is
known as the four-point parameterization and denoted H4pt.
To avoid confusion in the rest of the paper, we will use

Figure 1. Deep Homography Estimation Model [3]

Hmat to denote the original homography matrix and H4pt
its four-point parameterization. Using homogeneous co-
ordinates, if x is a point in one image and x(cid:48) the corre-
sponding point in the other image, the two are related by
x(cid:48) = Hmatx.
If the relationship between homogeneous
coordinates and the actual pixel coordinates is given by
(cid:2)x1 x2 x3
1(cid:3) , we can write the following
(cid:3) = (cid:2)u v
form for the matrix H4pt:

H4pt =







u1 − u(cid:48)
1
u2 − u(cid:48)
2
u3 − u(cid:48)
3
u4 − u(cid:48)
4







v1 − v(cid:48)
1
v2 − v(cid:48)
2
v3 − v(cid:48)
3
v4 − v(cid:48)
4

(1)

i, v(cid:48)

where (ui, vi), i = 1, 2, 3, 4 are the pixel coordinates of
some four corners in one image and (u(cid:48)
i), i = 1, 2, 3, 4
the corresponding four corners in the other image. By
adding the elements of H4pt to the coordinates of the cor-
ners in the ﬁrst image of an image pair, we obtain the co-
ordinates of the corresponding points in the second image.
We can subsequently use the pixel coordinates of the four
corresponding corners to calculate Hmat from H4pt.

The training of the CNN in [3] is done through a self-
supervised method in which a patch is randomly selected
from the image, no closer than ρ pixels from any image
edge. A random perturbation (of no more than ρ pixels) is
applied to the corners of the patch, creating warped cor-
ners. The correspondences between the original corners
and warped corners are used to calculate a homography,
Hmat. The homography is applied to the image, and a patch
(from same coordinates as original patch) is extracted from
the warped image as the warped patch. The original and
warped patches are stacked and input into the neural net-
work, with the corner perturbation values used as the ground
truth, Htarget
. This “label on the ﬂy” method is both sim-
ple and ﬂexible. The ability to use any image dataset for
training and testing makes this a powerful approach for ho-
mography estimation.

4pt

2.2. Homography Estimation with Hierarchical

Convolutional Networks (HH)

The CNN-based approach for homography estimation
as presented in [15] attempts to improve on the accuracy
achievable by the previous approach by using multiple

Siamese CNNs stacked end-to-end. Much like the previous
CNN based method, this method also takes for input the two
image patches and outputs the estimated corner perturbation
values H4pt, which can be mapped to a homography matrix
Hmat.

This CNN architecture also uses eight convolutional lay-
ers followed by two fully connected layers (Fig. 2). How-
ever, the ﬁrst four convolutional layers are two parallel
branches with shared weights. The ﬁrst branch takes the
original patch as input, and the second branch takes the
warped patch, as opposed to stacking the patches and in-
putting into the same layer. The branches merge after the
fourth layer, concatenating along the feature dimension.
Each layer is followed by ReLu activation and batch nor-
malization. Max Pooling is applied after the second, ﬁfth,
and seventh convolutional layers. Dropout of factor 0.5 is
applied prior to the ﬁrst fully connected layer.

This architecture is repeated through separate modules
stacked end-to-end as shown in Fig. 3. The original patch
and the corresponding warped patch are fed into the ﬁrst
module, which estimates H4pt. That estimated homography
is subtracted from the target to create a new target for the
next module.

Htarget
i

= Hest

i−1 − Htarget

i

(2)

The new target is used to create a new warped patch. The
input data to the following module is the original patch and
new warped patch, with the new target as ground truth. (I
represents the input image patch.)

(Ioriginal

i

, Iwarped

i

) = (Ioriginal
i−1

, Ioriginal
i−1

∗ Htarget
i

) (3)

This process is repeated iteratively, with a “boosting”
like effect that drives the error down. In other words, the
magnitude of the error residuals shrinks between each iter-
ation. By training each module speciﬁc to those error resid-
ual ranges, the overall accuracy is increased.

3. Dataset Used and the Metrics for the Com-

parative Evaluation

Our study is based on the Open Images 2019 Test Set
(approximately 100k images) [10] [9]. This is the ﬁrst

Figure 2. Hierarchical Homography Model [15]

Figure 3. Hierarchical Homography Stack [15]

published use of CNNs for homography estimation on the
Open Images Dataset. Additionally, we use the COCO 2017
Unlabeled Dataset (approximately 123k images) [11] for
CNN training and validation. By using a different dataset
for training/validation and for testing, we ensured that the
CNNs generalized appropriately.

The primary metric for testing accuracy was Average
Corner Error. This is the Euclidean distance between corner
locations after applying the target and output homographies.
The value was averaged over the four corners.

(OR). This is the ratio of extremely high outlier ACE values
compared to the rest of the dataset. For the sake of consis-
tency, we deﬁne a value to be an outlier if it exceeds an ACE
of 50 pixels, or is undeﬁned because the feature-matching
method failed to produce enough correspondences for a so-
lution. We choose 50 since it is such extreme error that
if a homography maps points that are greater than 50 pixels
away from ground truth in an image patch of size 128×128,
that estimated homography has little practical use. This OR
metric can be heuristically thought of as the rate at which a
certain method will produce a practically unusable homog-
raphy in given conditions.

ACE =

1
4

4
(cid:88)

i=1

||Htarget

mat xi − Houtput

mat xi||

(4)

4. Setting Up the Experiments for Compara-

Here, xi refers to one of the four corners of the original
patch, Htarget
is the ground truth homography in the orig-
inal matrix parameterization, and Houtput
is the estimated
homography from the technique being evaluated.

mat

mat

We present median ACE as opposed to mean ACE due to
the unbounded error at the positive extreme. The ACEs of
the highest error greatly skew the mean. This skewing effect
heavily favors CNNs and fails to illustrate which method is
most accurate for the majority of the data.

Previous publications on homography estimation with
deep learning did not report on how the error is distributed
over the dataset for each method [3] [15]. Therefore, in this
report we also include a novel metric named Outlier Ratio

tive Evaluation

We implemented and analyzed the performance of the
two deep learning solutions under conditions including
those of high variance. And we have also compared the
performance obtained with the deep-learning based meth-
ods with the baseline method that derive a homography us-
ing the interest points generated by using the SIFT, SURF,
and ORB operators.

We execute the homography estimation tests for all
methods on the Open Images 2019 Test Set [10] [9]. Us-
ing this dataset, we conduct four experiments by simulat-
ing different conditions of variance, including the ideal (i.e.
unaltered input images), noise, illumination shifts, and ran-

dom occlusions.

In addition to the performance evaluations mentioned
above, we chose the DH method for evaluating the CNN-
based homography estimation when the CNN is trained on
noisy data itself. The DH method was chosen for such ex-
periments because the architecture is the same as that of
the widely used VGG network, which makes it more likely
that the trends found with DH-based experiments are more
likely to be experienced with other common CNNs. On the
other hand, the HH network uses a Siamese architecture in
a sequentially modular layout, which makes HH harder and
longer to train and makes it more challenging to select the
best hyperparameters for convergence.

We also trained DH on color images (which required

making slight modiﬁcations to the network).

All training and validation for CNNs was conducted on

the COCO Unlabeled 2017 Dataset [11].

As mentioned earlier, the performance was measured
with the Average Corner Error (ACE), as well as the Outlier
Ratio (OR). Finally, we report the results in tables compar-
ing ACE and OR, as well as ﬁgures illustrating the distribu-
tion of sorted ACE values for each method per experiment.

4.1. Implementation

As mentioned in the Introduction, in addition to com-
paring the two deep-learning method for homography es-
timation, we also compare them with the traditional base-
line methods that estimate homographies using the interest
points returned by the SIFT, SURF, and ORB operators. For
these operators, we used OpenCV 3’s [2] default implemen-
tation. After determining correspondences, we solve the ho-
mography and reﬁne it with RANSAC.

We implemented and trained the neural networks using
the PyTorch library [16]. Labels were created “on the ﬂy”
per the method developed in [3] during training and valida-
tion. We used the Adam optimizer [8] for both networks,
training for approximately 30 epochs at a learning rate of
0.005. (One epoch here is deﬁned as a single pass over the
entire training dataset.) The learning rate was halved every
ﬁve epochs. PyTorch’s MSELoss function was used as the
loss function.

4.2. Evaluation Experiments

We conducted four experiments over the entire dataset.
Each experiment simulates a different form of variance ex-
perienced in natural conditions. The four experiments are
Ideal Conditions (where the dataset is unaltered), Gaus-
sian Noise, Illumination Shift, and Occlusion. For the lat-
ter three experiments, the process is repeated three times
with different variance values to better illustrate the sensi-
tivity of each method as the variance increases. Table 1
breaks down each experiment with the variance values.

To simulate noise, we added normal Gaussian noise

Experiment
Ideal Conditions
Gaussian Noise
Illumination Shift
Occlusion

Magnitude of Variance
No Variance
η = 0.5
η = 0.3
η = 0.1
λ = 1.2
λ = 1.6
λ = 1.4
α = 0.2 α = 0.4 α = 0.6

Table 1. Experiments for investigating the performance of CNN-
based homography estimation under four types of variance.
In
each experiment (except for Ideal), three different magnitudes of
variance are used to better illustrate the sensitivity of each method.

scaled by a factor η (such as 0.4) relative to pixel range,
and clipped the results to normalized pixel range.

Xnoisy = min(max(X + ηN (0, 1), −1), 1)

(5)

To simulate illumination, we multiplied the pixel values
in the warped patch by a factor λ (such as 1.4) and clip the
results to normalized pixel range.

Xillum = min(max(λX, −1), 1)

(6)

To simulate occlusions, We replaced an n × n box of
random location with a random color in the warped image.
The size of n × n is determined by a factor α (such as 0.6)
relative to the total patch space.

After comparing CNNs to the baseline feature matching
methods, we analyzed the affect of training on noisy data
will have on performance. We used the trained Deep Image
Homography Net, train it for an additional 30 epochs in η =
0.1 noisy data, and then measure performance. We then
train it for another 30 epochs on η = 0.3, tested again, and
then repeat with η = 0.5.

Finally, to measure the effect of using color images in-
stead of grayscale images for input, we modiﬁed the Deep
Image Homography Net to accept six channels for input
instead of two. We then train the network from scratch
on color images, and measure performance against the
grayscale counterpart.

5. Results of Comparative Evaluation

We illustrate our results with tables depicting the me-
dian ACE and OR values for each method under a speciﬁc
variance. We also present ﬁgures that compare the sorted
ACE values as line charts for each method in each experi-
ment. This best illustrates the distribution of error over the
dataset, and therefore conveys a qualitative sense of con-
sistency. The lines depict sorted ACE values, from least to
greatest, for each input patch pair. For brevity, DH refers
to the CNN based method described in Section 2.1 and HH
refers to the CNN based method described in Section 2.2.
In the tables below, the best ACE is in bold. The methods
above the dotted line are CNNs, and the methods below are
feature matching.

5.1. Ideal Conditions

Under ideal conditions, meaning that when the dataset
is unaltered, as shown in Table 2, SIFT gives superior per-
formance for 90% of the dataset. It has sub-pixel ACE for
approximately half the dataset. HH is the most consistent,
remaining below an ACE of 50 for over 99% of the dataset.
Method Median ACE OR
0
DH
0.01
HH
0.08
SIFT
0.09
SURF
0.12
ORB

3.97
2.25
0.89
3.15
7.82

Table 2. Median ACE and OR in Ideal Conditions. SIFT has
the lowest median ACE, followed by HH. ORB was the worst-
performing method, with a high median ACE and OR.

Fig. 4 shows the plots of the ACE values achieved with
all ﬁve approaches to homography estimation, the three tra-
ditional methods based SIFT, SURF, and ORB, and the
two CNN based methods. As is evident from the plot,
the feature-matching approach based on SIFT produces the
most accurate homographies for 90% of the dataset. How-
ever, when it fails for the rest of the dataset, it fails mis-
erably. On the other hand, the CNN based solution have
slightly worse accuracies, but produce usable results for a
larger fraction of the dataset.

Noise η
Method
DH
HH
SIFT
SURF
ORB

0.1

13.60 / 0.01
6.79 / 0.01
2.33 / 0.18
5.42 / 0.17
12.20 / 0.16

0.5

0.3
Median ACE / OR
28.49 / 0.03
21.73 / 0.01
13.38 / 0.01
17.30 / 0.01
NAN / 0.66 NAN / 0.94
NAN / 0.62 NAN / 0.93
53.12 / 0.52
26.50 / 0.34

Table 3. Median ACE and OR value in the presence of additive
noise. HH has the best median ACE for “moderate” and “high”
noise levels. “NAN” stands for “Not a Number”.

Fig. 5 shows the plots for the case of additive noise at
the additive level of η = 0.3. It is interesting to see while
the traditional approach to homography estimation based
on SIFT gives the best results on a small fraction of the
dataset, it essentially fails to produce any usable results at
all for a large part of the dataset. The other two traditional
approaches do worse than the one based on SIFT. On the
other hand, the two CNN based approaches work better for
a much larger fraction of the overall dataset, although not
matching the best (in terms of accuracy) that one can get
with a SIFT based method.

Figure 4. Sorted ACE for Ideal Conditions. SIFT gives superior
performance for 90% of the data. However, in the ﬁnal 8% of the
dataset, SIFT has incredibly high error.

5.2. Noise

As shown in Table 3, the traditional feature-matching
based methods are much more sensitive to noise than the
CNN based methods. The SIFT and the SURF based ho-
mography estimators maintain a lower median ACE value
than the CNN-based methods at η = 0.1. However, when
η = 0.3, both the SIFT and the SURF based methods fail to
ﬁnd a sufﬁcient number of feature correspondences for re-
liable homography estimation for over half the dataset. The
two CNN method, though obviously affected by noise, re-
main much more robust over a signiﬁcant fraction of the
dataset.

Figure 5. Sorted ACE for the noise level η = 0.3. At a “moderate”
level of noise, SIFT and SURF fail to give viable results for over
60% of the dataset. ORB is more robust, but not as robust as the
CNNs.

5.3. Illumination

As shown in Table 4, the traditional feature-matching
based methods have a better median ACE at “low” and
“moderate” levels of shifts in illumination, but the HH
based CNN homography estimator shows better Between
the two CNNs, DH is impacted much more signiﬁcantly by
illumination shift. The discrepancy between the two CNNs
could be explained by the fact that HH is based on a Siamese
network, where two input patches are transformed by four
convolutional layers before the features are combined. By
contrast, DH stacks the input patches at the very beginning.
The discrepancy in input patches, therefore, has a larger im-
pact, as there is no opportunity for the network to isolate in-

0.6

Occlude α
Method
DH
HH
SIFT
SURF
ORB

0.2

4.74 / 0.01
2.27 / 0.01
0.91 / 0.10
3.52 / 0.12
9.75 / 0.21

0.4
Median ACE / OR
6.99 / 0.01
2.39 / 0.01
0.99 / 0.13
4.85 / 0.20
22.04 / 0.39

11.23 / 0.01
3.01 / 0.01
1.29 / 0.21
14.94 / 0.41
96.03 / 0.74

Table 5. Values for the Median ACE and OR under occlusion.
SIFT has the best median ACE for the different degrees of occlu-
sion and experiences only a minor degradation of OR at α = 0.6.

other hand, the two CNN based methods fail completely at
a much smaller rate than SIFT.

variant features within each patch, independent of the other.

1.2

1.6

Illum λ
Method
DH
HH
SIFT
SURF
ORB

1.4
Median ACE / OR
26.45 / 0.01
2.86 / 0.01
1.35 / 0.17
5.65 / 0.26
11.92 / 0.26

23.08 / 0.01
2.35 / 0.01
0.95 / 0.10
3.41 / 0.12
8.48 / 0.18

28.38 / 0.01
5.50 / 0.01
10.70 / 0.47
NAN / 0.67
48.26 / 0.50

Table 4. Depicted are the ACE and OR for each method for the
caes of illumination shifts. SIFT has a lower median ACE at “low”
and “moderate” levels. At “high”, HH has a lower median ACE.

Fig. 6 shows how the performance varies across the
dataset for illumination variance at λ = 1.6. Under con-
ditions of illumination variance, the traditional approaches
to homography estimation work for only a small fraction of
the dataset. Of the two CNN based methods, the DH solu-
tion does miserably across the board. While DH does not
pass muster for this difﬁcult case, what is achieved by the
HH solution is indeed impressive.

Figure 7. Sorted ACE values for the occlusion level of α = 0.6.

5.5. Color vs. Grayscale

As shown in Table 6, training the DH CNN with color in-
puts instead of grayscale inputs resulted in a slightly larger
median error for the ACE metric.

Method
DH Grayscale
DH Color

Median ACE OR
0
0

3.97
4.74

Table 6. Comparison of the DH network trained with grayscale
images.

The performance plots are shown in Fig. 8. The graph
for the grayscale case is consistently below the graph for
color, implying that, with the same CNN architecture, the
grayscale images result in slightly more accurate homogra-
phies than the color images.

5.6. DH Trained with Noise-Corrupted Inputs

Table 7 presents the results obtained when the DH is
trained with different amounts of noise added to the training
dataset. The CNN based homography estimator achieved
signiﬁcantly superior performance when trained to the spe-
ciﬁc level of noise. However, this performance enhance-
ment came with a small degradation in the performance for
the noiseless case (Ideal). Additionally, training at a lower
level of noise only slightly improved the performance at
higher levels of noise.

Figure 6. Sorted ACE for Illumination λ = 1.6. HH has the lowest
ACE for 56% of the dataset.
5.4. Occlusion

In comparison with additive noise and illumination vari-
ations, it is interesting to see that the traditional feature-
matching based methods for homography estimation are
not as sensitive to occlusions. As shown in Table 5, the
SIFT based homography estimator retains the lowest me-
dian ACE at all three levels of occlusion while the two CNN
based methods remain more consistent. This suggests that,
as long as there is enough opportunity for distinct key points
to be identiﬁed and matched, feature matching will experi-
ence little degradation.

Fig. 7 shows the performance plots for all ﬁve cases.
SIFT does the best compared to the other two traditional
methods. And, what is even more interesting, for a signif-
icant fraction of the images, SIFT even beats out the two
CNN-based methods. But, as can be inferred from the rapid
rise of the SIFT plot, it fails miserably at 79%. On the

However, in conditions of moderate to heavy variance,
especially with Gaussian noise, CNN-based homography
estimation achieves a lower median ACE. Under these con-
ditions, the feature matching based methods consistently
suffered sensitivity to variance. The CNN-based homog-
raphy estimators learned to be more robust even when the
training was conﬁned to ideal conditions.

Our experiments have also demonstrated that the robust-
ness to noise for CNN-based homography estimators can
be further improved by training with noisy data. Our ex-
periments showed that the performance improved signiﬁ-
cantly at the speciﬁc level of noise with which the CNN
trained. However, that improved performance comes at a
slight degradation to accuracy in ideal conditions. There
was only little improvement to performance in higher mag-
nitudes of noise. Essentially, by training to a speciﬁc mag-
nitude of noise, a “Goldilocks Zone” is created where that
CNN performs best. More experiments need to be con-
ducted to determine the ideal process for training in noise
that optimizes performance across all potential magnitudes
of noise.

CNN-based homography estimators produced more con-
sistent results than the feature-matching based estimators in
all conditions. While SIFT produced outputs with unaccept-
able errors on 8% of the Ideal conditions, the CNN based
methods produced such outputs for less than one percent in
any conditions. This is likely because CNNs can be trained
to a speciﬁc range of homography values, unlike feature-
matching. Many applications, such as real-time tracking for
AR, might beneﬁt in consistency over absolute error.

Explicitly including color channels at the input for train-
ing CNN based homography estimators did not produce sig-
niﬁcantly better results for CNN based methods. Despite
the additional information provided by the different color
channels, the CNN-based homography estimation actually
performed slightly worse. However, it is possible that a
more elaborate architecture would yield higher accuracies
for the homographies estimated from color images. Ad-
ditionally, given the redundancy between the RGB chan-
nels of a color image, such inputs might increase robustness
against noise. More research is necessary to ﬁnd the op-
timal architecture and training methods that best leverages
the additional information available in color images.

The overall lesson learned from our research is that no
one method for homography estimation can be treated as
“universally superior” to all others. The environmental con-
ditions and engineering constraints need to be deliberately
considered when choosing the most appropriate technique
in any application. While CNN-based homography esti-
mators may not be as accurate as the best “hand-crafted”
feature-based algorithms, they are more consistent and per-
form better in conditions of variance (noise, illumination
shifts, and occlusions).

Figure 8. Performance plots for the color vs. grayscale compari-
son. Contrary to intuition, the results with color are slightly worse.

0.5

0

Noise η
Method
DH
DH Noise 10
DH Noise 30
DH Noise 50

0.3
0.1
Median ACE
21.73
13.60
4.24
20.93
4.99
5.99
5.62
5.54

3.97
10.08
6.25
5.66

28.49
26.40
20.17
5.70

Table 7. Deep Image Homography Trained With Noise. The table
shows the median ACE values for the case when the DH network
is trained with different degrees of noise.

Shown in Fig. 9 are the percentile plots for the case when
the three different DH networks, each trained with one of
the three noisy input datasets as listed in Table 7), are tested
on the same input-plus-noise data set corresponding to η =
0.5. Since the red-dotted plot for the case “DH Noise 50” is
the slowest rising graph in the ﬁgure, this again shows that
one gets the best results when the level of noise at which the
DH is trained matches the level of noise in the input images.

Figure 9. Sorted ACE values for the DH network that is trained to
noise with the η = 0.5 dataset. The CNN trained with the highest
level of noise also performs the best under high noise conditions.

6. Conclusion

Under what we have referred to as the Ideal conditions
and under conditions of low variance, feature matching
based homography estimation (particularly SIFT) is still the
most accurate method (per median ACE).

Computer Vision Workshops (ICCVW), pages 904–911, Oct
2017. 1, 2, 3, 4

[16] A. Paszke, S. Gross, S. Chintala, G. Chanan, E. Yang, Z. De-
Vito, Z. Lin, A. Desmaison, L. Antiga, and A. Lerer. Auto-
matic differentiation in PyTorch. In NIPS Autodiff Workshop,
2017. 5

[17] E. Rublee, V. Rabaud, K. Konolige, and G. R. Bradski. ORB:
In ICCV, vol-

An efﬁcient alternative to SIFT or SURF.
ume 11, page 2. Citeseer, 2011. 1

[18] K. Simonyan and A. Zisserman.

Very deep convolu-
tional networks for large-scale image recognition. CoRR,
abs/1409.1556, 2014. 1, 2

[19] E. Vincent and R. Lagani`ere. Detecting planar homographies
in an image pair. ISPA 2001. Proceedings of the 2nd Interna-
tional Symposium on Image and Signal Processing and Anal-
ysis. In conjunction with 23rd International Conference on
Information Technology Interfaces (IEEE Cat., pages 182–
187, 2001. 1

References

[1] H. Bay, T. Tuytelaars, and L. Van Gool. SURF: Speeded
Up Robust Features. In European conference on computer
vision, pages 404–417. Springer, 2006. 1

[2] G. Bradski. The OpenCV Library. Dr. Dobb’s Journal of

Software Tools, 2000. 5

[3] D. DeTone, T. Malisiewicz, and A. Rabinovich. Deep image
homography estimation. CoRR, abs/1606.03798, 2016. 1, 2,
3, 4, 5

[4] E. Dubrofsky. Homography estimation, 2009. 1
[5] M. A. Fischler and R. C. Bolles. Random sample consen-
sus: A paradigm for model ﬁtting with applications to im-
age analysis and automated cartography. Commun. ACM,
24(6):381–395, June 1981. 1

[6] I. Goodfellow,

J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio. Gen-
erative adversarial nets. In Advances in neural information
processing systems, pages 2672–2680, 2014. 1

[7] X. Han, T. Leung, Y. Jia, R. Sukthankar, and A. C. Berg.
Matchnet: Unifying feature and metric learning for patch-
In Proceedings of the IEEE Conference
based matching.
on Computer Vision and Pattern Recognition, pages 3279–
3286, 2015. 1

[8] D. P. Kingma and J. Ba. Adam: A method for stochastic

optimization. CoRR, abs/1412.6980, 2014. 5

[9] I. Krasin, T. Duerig, N. Alldrin, V. Ferrari, S. Abu-El-
Haija, A. Kuznetsova, H. Rom, J. Uijlings, S. Popov,
S. Kamali, M. Malloci, J. Pont-Tuset, A. Veit, S. Be-
longie, V. Gomes, A. Gupta, C. Sun, G. Chechik, D. Cai,
Z. Feng, D. Narayanan, and K. Murphy.
Openim-
ages: A public dataset for large-scale multi-label and
multi-class image classiﬁcation. Dataset available from
https://storage.googleapis.com/openimages/web/index.html,
2017. 2, 3, 4

[10] A. Kuznetsova, H. Rom, N. Alldrin, J. Uijlings, I. Krasin,
J. Pont-Tuset, S. Kamali, S. Popov, M. Malloci, T. Duerig,
and V. Ferrari. The open images dataset v4: Uniﬁed image
classiﬁcation, object detection, and visual relationship detec-
tion at scale. arXiv:1811.00982, 2018. 2, 3, 4

[11] T.-Y. Lin, M. Maire, S. J. Belongie, L. D. Bourdev, R. B. Gir-
shick, J. Hays, P. Perona, D. Ramanan, P. Doll´ar, and C. L.
Zitnick. Microsoft COCO: Common objects in context. In
ECCV, 2014. 2, 4, 5

[12] H. Liu, G. Zhang, and H. Bao. Robust keyframe-based
monocular slam for augmented reality. In 2016 IEEE Inter-
national Symposium on Mixed and Augmented Reality (IS-
MAR), pages 1–10, Sep. 2016. 1

[13] D. G. Lowe.

Distinctive image features from scale-
International journal of computer vi-

invariant keypoints.
sion, 60(2):91–110, 2004. 1

[14] T. Nguyen, S. W. Chen, S. S. Shivakumar, C. J. Taylor, and
V. Kumar. Unsupervised deep homography: A fast and ro-
bust homography estimation model. CoRR, abs/1709.03966,
2017. 2

[15] F. E. Nowruzi, R. Laganiere, and N. Japkowicz. Homogra-
phy estimation from image pairs with hierarchical convolu-
tional networks. In 2017 IEEE International Conference on

