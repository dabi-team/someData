Online Service Provisioning in NFV-enabled
Networks Using Deep Reinforcement Learning

Ali Nouruzi, Abolfazl Zakeri, Student Member, IEEE, Mohamad Reza Javan, Senior Member, IEEE, Nader
Mokari, Senior Member, IEEE, Rasheed Hussain, Senior Member, IEEE, Ahsan Syed Kazmi, Student Member,
IEEE

1

1
2
0
2

v
o
N
3

]

Y
S
.
s
s
e
e
[

1
v
9
0
2
2
0
.
1
1
1
2
:
v
i
X
r
a

Abstract—In this paper, we study a Deep Reinforcement
Learning (DRL) based framework for an online end-user service
provisioning in a Network Function Virtualization (NFV)-enabled
network. We formulate an optimization problem aiming to
minimize the cost of network resource utilization. The main
challenge is provisioning the online service requests by fulﬁlling
their Quality of Service (QoS) under limited resource availability.
Moreover, fulﬁlling the stochastic service requests in a large
network is another challenge that is evaluated in this paper.
To solve the formulated optimization problem in an efﬁcient
and intelligent manner, we propose a Deep Q-Network for
Adaptive Resource allocation (DQN-AR) in NFV-enable network
for function placement and dynamic routing which considers
the available network resources as DQN states. Moreover, the
service’s characteristics,
including the service life time and
number of the arrival requests, are modeled by the Uniform and
Exponential distribution, respectively. In addition, we evaluate
the computational complexity of the proposed method. Numerical
results carried out for different ranges of parameters reveal
the effectiveness of our framework. In speciﬁc, the obtained
results show that the average number of admitted requests of the
network increases by 7 up to 14% and the network utilization
cost decreases by 5 and 20%.
Index Terms— Deep reinforcement learning, service lifetime,
resource allocation, NFV.

I. INTRODUCTION

A. State of The Art and Motivation

In recent years, new applications have emerged rapidly
with diverse Quality of Service (QoS) requirements [1]. To
meet their requirements in an efﬁcient manner with a com-
mon physical
infrastructure, exploiting advanced technolo-
gies is indispensable where these technologies are expected
to have pivotal impacts on network performance in terms
of enhancing QoS and resource efﬁciency which result in
cost reduction. One such technology is Network Function
Virtualization (NFV) providing an array of beneﬁts such as
great ﬂexibility, resource efﬁciency, and cost reduction [2].
However,
in such an NFV-enabled network, providing an
efﬁcient resource allocation algorithm is a challenging task.
In addition, handle online service requests and also service
arrival and departure and its effect on the network resources
are the other challenges that we have in this paper. To tackle

A. Nouruzi, A. Zakeri and N. Mokari are with the Department of Electrical
and Computer Engineering, Tarbiat Modares University, Tehran, Iran, (e-
mail: nader.mokari@modares.ac.ir). M. R. Javan is with the Department of
Electrical Engineering, Shahrood University of Technology, Iran, (e-mail:
javan@shahroodut.ac.ir). R. Hussain and A. S. Kazmi are with the Institute
of Information Security and Cyber-Physical Systems, Innopolis University,
Russia, (e-mail: r.hussain@innopolis.ru).

these challenges and design adaptive and intelligent networks,
recently, Deep Reinforcement Learning (DRL) based methods
have been used to solve various resource allocation problems
[3], [4].

Besides, devising online and adaptive/on-demand service
provisioning algorithms under dynamic network resource vari-
ations is another challenging task in NFV-enabled networks.
Online and on-demand services by considering lifetime, i.e,
while previously provisioned services are running, new service
requests can arrive. Recently, some researchers have made
great efforts to address the mentioned challenges, but, to the
best of our knowledge, a few researchers consider the lifetime
and online service requests, and the effect of this, on the
Resource Allocation (RA) problem [5]–[7]. The prevailing
works inspire us to seek a “smart“ and “online” service
provisioning method with considering service “lifetime” in
a NFV-enabled network. The term “service” indicates a type
of end user request with speciﬁc QoS and Service Function
Chain (SFC) characteristics, and “provisioning” means that
such request’s requirements are fulﬁlled, hence, the service
request is admitted. In brief, this work focuses on a main
question which is: how a service provider offers heterogeneous
services with a probabilistic lifetime on the common physical
resources in a smart and efﬁcient manner?

B. Research Outputs and Contributions

Different from previous works [7]–[9], this work provides a
DRL-based online service provisioning algorithm in an NFV-
enabled network in which the considered service requests are
online with a probabilistic lifetime. In addition, by deploying
the proposed online service provisioning method, new requests
can be served while previously accepted services are running.
The main results and contributions of this work are listed as
follows:
• We propose a new service assurance model leveraging NFV
to perform their Network Functions (NFs) and guarantee QoS
in terms of latency and bandwidth. To this end, we formulate
an optimization problem with constraints on the QoS and the
limitation of network resources.
• We deploy DRL method to fulﬁll the different requests at
each time under dynamic network resources in a long-term
run. To improve the convergence speed of the considered case
with large number of states and large action space, we deploy
a Deep Q-Network (DQN) algorithm.
• We propose an online service provisioning method in which

 
 
 
 
 
 
each user has a service timeline and new users can request ser-
vice at each time slot while some services are running from the
previous time slots. We also consider the dynamics of resource
consumption and release in the network due to admitting new
services and terminating previous services. Moreover, request
arrivals are modeled by Uniform distribution, and service
duration time (service time) is modeled by the exponential
distribution.
• To apply the DQN algorithm for RA (i.e., solving the
optimization problem), we develop the available calculation
algorithm that updates the state space (e.g., due to resource
releasing or failure occurring) at the beginning of each time
slot to ﬁnd an appropriate action.
• To evaluate the performance of the proposed method, we
consider different baselines. The obtained results unveil that
the proposed method has considerable performance. The main
baselines are greedy and online-Tabu search algorithms which
are well known methods in online algorithm consideration.

C. Related Work

Recently some works deﬁne a service with a speciﬁc SFC
which includes a set of Virtual Network Functions (VNFs)
and these VNFs need to be executed in a tolerable delay [10],
[11]. These VNFs run on a speciﬁc virtual machines which
are created on top of the physical network by leveraging NFV.
Hereupon, service provisioning means that the requested SFC
with QoS requirement for each request is done successfully
by performing the SFC and RA in the NFV environment [12].
The basic principles of NFV Resource Allocation (NFV-RA)
is studied in [5] comprehensively. Also, online scheduling with
minimizing the total execution time of VNFs is studied in [13].
Furthermore, the authors in [6] propose NFV-RA for trafﬁc
routing by deploying game theory. They focus on routing
and embedding of VNFs and do not consider the scheduling
problem. Similarly, placement of VNF instances for different
services with link allocation and ﬁxed delay for links is studied
in [14]. Delay-aware cost minimization for random arrival
service requests by deploying stochastic dual gradient method
is studied in [15].

At the same time, DRL-based methods to solve various RA
problems have attracted much attention [16]–[18]. In [19], a
ML algorithm for extracting feature of data trafﬁc in NFV-
cloud network for predicting computation and demands of
resources is deployed. In [20], DRL based mechanism with
Markov Decision Process (MDP) is proposed for reducing
congestion probability and also choosing transmission path
for routing and trafﬁc engineering. Network congestion prob-
ability reduce to 50% with compare to Open Short First
Path (OSFP) routing method. Because routing and function
placement problems are related to each other, [21] proposes a
function placement and chaining schemes, jointly with Binary
Integer Programming (BIP) for minimizing End to End (E2E)
delay, and then use Restricted Boltzmann Machine (RBM)
output
to determine the next hope node in the network.
The authors in [22] proposes multi-task deep learning for
routing and dynamic SFC with considering network status for
predicting the routing path. Lastly, in [23], the authors use

2

Integer Linear Programming (ILP) and multi layer perceptron
to minimize E2E delay and placement of VNFs. In [24],
the authors propose multi-objective programming and assume
that access points work as a player in a game theory based
problem that minimizes OpEx and average response time.
In [25],the authors study providing IoT services in an NFV-
enabled network by deploying DRL. Aiming to minimize the
processing and transition delay, the proposed DRL method
reduces the total delay to around 200ms that has decreased up
to 3 times compared to other baselines. In [26], the anthers
propose a matching-based scheduling method that reduces
the scheduling time in a NFV-enabled network up to 50%
compared to the Round-Robin scheduling method. Aiming to
provide a cost-efﬁcient dynamic resource management in a
NFV-enabled network, the authors in [27] propose a practical
method that reduces CPU utilization up to 10% compared to
the traditional approaches. In addition, the authors in [28]–
[30] study the performance of the DRL-based methods for RA
in the context of a NFV-enabled network where th obtained
results show a signiﬁcant improvement in the results obtained
results compared to the traditional optimization methods.
Motivated by signiﬁcant effectiveness of DRL-based algorithm
for RA in NFV-enabled networks, we propose a DRL-based
algorithm for service provision in an NFV-enabled network.
In addition, concerning the ability of DRL to support online
algorithms, the proposed DQN algorithm is adopted an online
RA algorithm that different from previous works [31]–[33],
we assume that the services arrive based on the real stochastic
model. Moreover, the required resources are allocated to the
services while the subsequent services arrive. We summarize
related works and compare them with our work in Table. I.

D. Paper Organization

This paper is arranged as follows: Section II displays the
proposed system model and problem formulation. Section III
presents the solution methods of the formulated problem.
Computational complexity of the proposed algorithm and
baselines is evaluated in Section IV. Simulation results are
provided in Section V. At the end, concluding remarks are
stated in Section VII.

Symbol Notations: We use (cid:98).(cid:99) for representing ﬂoor func-
tion, that takes input and gives the greatest integer less than
or equal to the input. |.| denotes the absolute value or size of
input argument and ai shows the i-th element of vector a and
ai,j shows the i, j element of matrix A. Also to deﬁne a set
and its elements, we use B and bn respectively where bn is
the n-th elements of B. We use R+ and N to show the set
of positive real numbers and natural numbers, receptively. In
addition, for representing modulo operation for the remainder
of the division of a by n, we use a ≡n.

II. PROPOSED SYSTEM MODEL AND PROBLEM
FORMULATION

The proposed system model that has two parts: 1) user’s
request with service characteristics and requirements and 2)
NFV-enabled infrastructure, and an optimization problem for
allocating the resources of the infrastructure to the services.

3

TABLE I: Related Works Summary

Ref.

[20]

[25]

[26]

[22]

[21]

[27]

[28]

[7]

[29]

[30]

Scenarios
Routing and trafﬁc
engineering

NFV
(SFC & Routing)

NFV
(SFC & Scheduling)

NFV
(SFC & Routing)

NFV
(SFC & Routing)

NFV (SFC)

NFV
(SFC & Routing)

Strategy
Using DQN
for Routing algorithm
SFC embedding for
NFV-enabled IoT
and routing by shortest path algorithm
Matching-Based
VNF Scheduling

Multi task Deep learning

Applying Deep learning (RBM)
to solve a BIP

Deploying testbed

Deploying DRL to solve
MILP for optimize resource utilization

NFV (SFC)

Deploying DRL to function placement

NFV (SFC & Routing)

NFV (SDN & Routing)

Deploying DRL for solving BIP
Deploying DRL to solve mixed
integer quadratic constrained (MIQCP) programming

Main Contribution
Proposing an online routing
for Routing algorithm

Differences with this work
Considering nodes with several
VMs and services speciﬁcation

Dynamic SFC embedding

Dynamic routing algorithm by considering links state

RA to VNF over time
with a matching scheme

Learning trafﬁc routing by SFC
information

Minimizing E2E delay
with considering SFC path
Real-time ﬂow monitoring and
dynamic resource management

Online service assurance with
considering VM and links and using DQN
Objective, function placement
with considering VM states and dynamic routing algorithm
by considering links state
Objective, VM state function placement
consideration and link’s state dynamic routing
Real service consideration and
evaluation of service life time

Near optimal results is obtained

Evaluation of effect of network topology and geo-distributed DC

Deploying DRL for SFC

Dynamic SFC embedding

Dynamic routing and
considering real service characteristics
Objective and node by node dynamic routing

Real time trafﬁc model and NF migration

Objective and service life time consideration and evaluation of network topology

Fig. 2: An example of SFC with different scenarios for function
placement. We assume that the functions can placed on the successive
nodes (a) or non successive nodes (b).

by following:

(cid:16)

Rk =

ni,k, ne,k, Bk, τk, Dk

(cid:17)

, ∀k ∈ K,

(1)

where ni,k and ne,k are the ingress and egress nodes of service
k [21], [36] and {ni,k, ne,k} ∈ N . It is worth mentioning
that each of the services has a speciﬁc sequence of functions.
For example, in the VoIP service, FW runs after NAT [37]. In
addition, Bk is the data rate in bits per second. Moreover, τk is
the tolerable time which is dependent on the type of services
of the top layer with respect to their latency requirements.1
Also, we deﬁne dk
f to determine the corresponding processing
requirement for virtualized NF (VNF) f in CPU cycle per bits
of ﬂow/packet in service k [37]. Accordingly, for each service,
we have a set of corresponding processing requirements as
bellow: 2

Dk = {dk

f },

∀f ∈ Fk, ∀k ∈ K.

(2)

Also, to determine the order of the successive functions in
a certain SFC, we deﬁne the order of functions by f i and
f i+1, where f i is i-th function of the SFC and f i+1 is run
after function f i. To increase the readability of this paper,
the main parameters and variables are summarized in Table
II. Moreover, we consider a set U of users with different
service requests. We assume that each user u requests only

1Note that τk is not the E2E latency and is the SFC latency. Hence, it is

the latency of the core network in the view of the cellular network.

2Obviously, the layer two and layer three NFs have different characteristics

and requirements as layer-2/3 processing in [38].

Fig. 1: High level representation of the considered system model.

We assume a central controller for providing cooperation and
coordination between the network component, and a software-
based network control. The high-level representation of the
proposed system model is depicted in Fig. 1. More details
about this ﬁgure are provided in the following subsection.

A. Service Speciﬁcation and Requirements

Based on the 3rd Generation Partnership Project (3GPP)
standardization perspective [34], each communication service
needs some NFs that run on the ﬂow/packets of the services.
European Telecommunications Standards Institute (ETSI) de-
ﬁnes a set of NFs with speciﬁc chaining and descriptors
as a Network Service (NS) [35] in the NFV environments.
According to these, we consider a set of K services which
is denoted by K = {1, . . . , K} and a set of all NFs as
F = {1, . . . , F }. Each service k has some NFs with speciﬁc
ordering as an SFC that is shown in Fig. 2. We assume that
Fk ⊂ F is the set of speciﬁc functions of service k like
Firewall (FW), Network Address Translator (NAT), Intrusion
Detection Prevention System (IDPS), and Video Optimization
Controller (VOC). We assume that each service k is speciﬁed

Node 2Node 3Node 7Node 4Node 1Node 10Node 11Node 12Node 9Node 6Node 5Node 8SDN ControllerNETWORK SYMBOLES:Network Functions:Physical  nodeVirtual MachineNetwork Address TranslationTraffic MonitorFirewallVideo Optimization ControllerIntrusion Detection Prevention SystemSwitchSwitchUser data trafficUser data trafficPhysical LinkPhysical LinkControl LinkVMs’ Management Component ….Dk = {d1, d2, d3,…}Node 5Node 4Node 3Node 1Node 2Node 4Node 3Node 2Node 1VNFs:User data flow:(Send and Receive)(a)(b)Forwarding device (e.g., switch):Example of network serviceTABLE II: Main notations and parameters

Notation
G(N , L)
N /n
L
U /u
F /f
Fk
V/v
P/p
E/e
L
xn,n(cid:48)
wm,v
ˆwn,n(cid:48)
ni,k, ne,k
pm,m(cid:48)
i
n,n(cid:48)

Bk
˜Bk
Dk

dk
f

τk
ξf,u
v,m ∈ {0, 1}
γ
α

k,ev,v(cid:48)
m,m(cid:48)
pm,m(cid:48) ∈ {0, 1}

ρ

Ψv,m

δk
u

zt
v,m

yt
n,n(cid:48)

Deﬁnition
Network graph
Set/index of nodes
Set of links
Set/index of users
Set/index of NFs
Set NFs of service k
Set/index of VMs
Set/index of the physical paths
Set/index of the virtual paths
Connectivity matrix of graph
Capacity of the link between nodes n and n(cid:48) in bit per second
Weight/unit costs of VM v on node m
Weight/unit costs of the link between nodes n and n(cid:48)
The ingress and egress nodes of service k
Link indicator that shows that link between nodes
n and n(cid:48) is placed on the physical path pm,m(cid:48)
Data rate for service k in bits per second
Packet size in bits
Set of the corresponding processing
requirement in CPU cycle per bit
for the functions of service k
Corresponding processing requirement in CPU cycle per bit
for function f of service k
Tolerable latency of service k
Selection indicator of VM v for NF f on node m for user u
Decay factor of reinforcement learning
Learning rate for DQN

Path selection variable that mapping the virtual
path e between virtual machine
v and v(cid:48) for service k to physical path pn,n(cid:48)
between nodes n and n(cid:48)
Processing resource at VM v
on nodes m in CPU cycle per second
Service request indicator where set to 1
for user u that requests service k
Available processing resource of VM v that is
raised on node m at time slot t
Available capacity resource of link between
nodes n and n(cid:48) at time slot t

one service. We deﬁne a binary indicator δk
requests service k, it is 1 and otherwise 0.

u, where if user u

B. Infrastructure Model

In order to model and formulate the NFV-enabled network,
we consider graph G = (N , L), where N represents the set of
nodes where |N | = N and L is the set of links between
nodes. We further assume that each node m hosts several
VMs that is denoted by Vm = {1m, . . . , Vm} and created
by a hypervisor, hence the set of total VMs in the network
is denoted by VTotal = ∪N
m=1Vm. In addition, we denote the
maximum number of the VMs on each nodes by Vmax.

Each VM v on node m has a speciﬁc processing resource
that is denoted by Ψv,m in CPU cycle per second. Hence,
matrix Ψ = [Ψv,m] ∈ RV ×N
indicates the amount of
+
processing resources and also determine the VMs of each
node. It is possible that each VM processes a set of NFs for
different users based on the allowable capacity [9]. Moreover,
we consider connectivity matrix as L = [ln,n(cid:48)], that is deﬁned
as

ln,n(cid:48) =

a link between nodes n and n(cid:48) exists,

(cid:40)

1,
0, otherwise.

(3)

+

Also, the link between nodes n and n(cid:48) has a limited bandwidth
that is represented by matrix X = [xn,n(cid:48)] ∈ RN ×N
, where
xn,n(cid:48) is the capacity of link between nodes n and n(cid:48) in bits
per second. Note that as the considered network is connected,
there is at least one path between two nodes. Let pm,m(cid:48) denotes
the p-th path between nodes m and m(cid:48). Therefore, we have
a set Pm,m(cid:48) = {1m,m(cid:48), . . . , pm,m(cid:48), . . . , Pm,m(cid:48)} of all possible
physical paths between nodes m and m(cid:48) such that each path
contains a set of links. To determine which of the physical
links are in a path, we deﬁne a link-to-path binary indicator

4

as follows:

pm,m(cid:48)
i
n,n(cid:48) =






1,

the link between nodes n and n(cid:48)
is in the path pm,m(cid:48),

(4)

0, otherwise.

Moreover, we consider the set of virtual paths between vir-
tual machine v and v(cid:48) on nodes m and m(cid:48) as E v,v(cid:48)
m,m(cid:48) =
(cid:110)
m,m(cid:48), . . . , ev,v(cid:48)
1v,v(cid:48)
m,m(cid:48) is the e-th path
of this set [39], [40], and [41]. 3

m,m(cid:48), . . . , Ev,v(cid:48)

where ev,v(cid:48)

m,m(cid:48)

(cid:111)

C. Optimization Variables

We deﬁne a binary decision variable ξf i,k

v,m to determine that
i-th function of service k is running on VM v that is raised
on node m as follows:



1, NF f i of service k is running on VM v in

ξf i,k
v,m =

node m,
0, otherwise.



(5)

Moreover, to send data trafﬁc of service k, we deﬁne a binary
k,ev,v(cid:48)
pm,m(cid:48) where it maps the virtual path ev,v(cid:48)
m,m(cid:48)

decision variable ρ
to the physical path pm,m(cid:48) as follows:

m,m(cid:48)

k,ev,v(cid:48)
m,m(cid:48)
pm,m(cid:48) =

ρ

the physical path pm,m(cid:48) is selected to tarnsmit
of service the data trafﬁc of service k from
from virtual machine v to v(cid:48),


1,


0, otherwise,

(6)

where for each virtual path just one physical path is selected.
Based on this, we deﬁne the following constraint:

(cid:88)

k,ev,v(cid:48)
m,m(cid:48)
pm,m(cid:48) = 1, ∀k ∈ K.

ρ

(7)

pm,m(cid:48) ∈Pm,m(cid:48)

We note that the virtual path ev,v(cid:48)
m,m(cid:48) is between two successive
functions of SFC of service k, (f i, f i+1), with respect to
the ordering of SFC. For example, in a certain service, the
functions like web browsing, NAT function are always run
before FW.
Moreover, the path between ni,k and the VM that the ﬁrst
function of SFC is placed is determined by ˆev
ni,k,n and also
for the path between the VM that the last function placed on
it and ne,k is determined by ˆev

n,ne,k .

D. Delay Model

This work considers three types of delays as: 1) processing

delay, 2) propagation delay and 3) transmission delay.

3In addition, we assume that in each of physical nodes, there are unlimited
bandwidth links between the VMs. Moreover, we assume that there is at least
a physical path for each virtual path.

5

Fig. 3: The illustration of equations (10) and (11) for calculation of
propagation and transmission delay. These equations are included
three terms that calculate the propagation and transmission delay
between the ingress nodes and the ﬁrst VM’ node and the last VM’s
node and egress node of services.

∀k ∈ K, ∀f i ∈ Fk.

To have better understanding and realization of (11) and (10),
the details of these equations are depicted in Fig. 3. Based
on the formulated latency, the total delay for each packet of
service k is obtained as:

Dk

Total = Dk

Proc + Dk

Prop + Dk

Tran, ∀k ∈ K.

(12)

1) Processing delay: The processing delay of NF f on node
v,m in seconds is given

m for service k in VM v denoted by τ f,k
by

τ f,k
v,m =

˜Bk
dk
f
Ψv,m

, ∀k ∈ K, v ∈ Vm, m ∈ N ,

(8)

where ˜Bk is the packet size in bits. In this paper, we assume
the packet size is equal to the number of bits transmitted in one
second. For example, by considering a service with required
100 Kbps data rate, the packet size is 100 Kbits [9]. Also, the
total of processing delay of service k can be calculated by

Dk

Proc =

Fk(cid:88)

(cid:88)

(cid:88)

i=1

m∈N

v∈Vm

v,m τ f i,k
ξf i,k

v,m , ∀k ∈ K, f i ∈ Fk, ∈ K.

(9)

2) Propagation Delay: To formulate the propagation delay
in the considered system, we deﬁne κn,n(cid:48)as the amount of
propagation delay for the data trafﬁc that traverses on link
between nodes n and n(cid:48) depends on the length of this link
and the speed of light. Therefore, the total propagation delay
for service k is obtained by:

Dk

Prop =

(cid:88)

κn,ni

pni,k ,m
n,n(cid:48)

ˆev
pni,k ,m ξf 1,k
ni,k ,m

v,m + (10)

ρ

n,n(cid:48),m∈N
pni,k ,m(cid:48) ∈Pni,k ,m(cid:48)
v∈Vm

Fk−1
(cid:88)

i=1

(cid:88)

κn,n(cid:48)i

pm(cid:48) ,m(cid:48)(cid:48)
n,n(cid:48)

ρ

n,n(cid:48),m(cid:48),m(cid:48)(cid:48)∈N
pm(cid:48),m(cid:48)(cid:48) ∈Pm(cid:48) ,m(cid:48)(cid:48)
v(cid:48),v(cid:48)(cid:48)∈Vm

ev(cid:48) ,v(cid:48)(cid:48)
pm(cid:48) ,m(cid:48)(cid:48) ξf i,k
m(cid:48) ,m(cid:48)(cid:48)

v(cid:48),m(cid:48)ξf i+1,k

v(cid:48)(cid:48),m(cid:48)(cid:48) +

E. Objective Function

We deﬁne a weighted cost function that includes the cost of
processing and bandwidth resources at the level of VMs and
links that is given by:

(cid:88)

n,n(cid:48),m(cid:48)(cid:48)(cid:48)∈N

κn,n(cid:48)i

pm(cid:48)(cid:48)(cid:48),ne,k
n,n(cid:48)

ˆev(cid:48)(cid:48)(cid:48)
m(cid:48)(cid:48)(cid:48),ne,k
pm(cid:48)(cid:48)(cid:48),ne,k

ρ

ξf Fk ,k
v(cid:48)(cid:48)(cid:48),m(cid:48)(cid:48)(cid:48),

pm(cid:48)(cid:48)(cid:48),ne,k

∈Pm(cid:48)(cid:48)(cid:48),ne,k

v(cid:48)(cid:48)(cid:48)∈Vm

∀k ∈ K.

In the ﬁrst term of (10), we calculate the propagation delay
between ni,k and the ﬁrst VM that the ﬁrst function is placed.
In addition, the second term calculate the propagation delay
of the link between the next functions. Finally the last term
calculates the propagation delay on the link between the last
VM that and ne,k.

3) Transmission Delay: The total transmission delay of

service k is calculated by:

Dk

Tran =

(cid:88)

pni,k ,m
i
n,n(cid:48)

ρ

n,n(cid:48),m∈N
pni,k ,m∈Pni,k ,m
v∈Vm

(cid:88)

pm(cid:48) ,m(cid:48)(cid:48)
i
n,n(cid:48)

ρ

n,n(cid:48),m(cid:48),m(cid:48)(cid:48)∈N
pm(cid:48) ,m(cid:48)(cid:48) ∈Pm(cid:48),m(cid:48)(cid:48)
v(cid:48),v(cid:48)(cid:48)∈Vm

Fk−1
(cid:88)

i=1

k,ˆev
pni,k ,m ξf 1,k

ni,k ,m

v,m

˜Bk
xn,n(cid:48)

+

k,ev(cid:48) ,v(cid:48)(cid:48)
pm(cid:48) ,m(cid:48)(cid:48) ξf i,k
m(cid:48),m(cid:48)(cid:48)

v(cid:48),m(cid:48)ξf i+1,k

v(cid:48)(cid:48),m(cid:48)(cid:48)

˜Bk
xn,n(cid:48)

+

φ(ρ, ξ) =

(cid:88)

(cid:88)

k∈K

u∈U
m∈N
v∈Vm
f ∈Fk

wm,vdk

f Bkδk

uξf,k

v,m+

(13)

(cid:88)

k∈K

(cid:88)

ˆwn,n(cid:48)δk
ui

pm,m(cid:48)
n,n(cid:48) ρ

u∈U
n,n(cid:48),m,m(cid:48)∈N
pm,m(cid:48) ∈Pm,m(cid:48)
v,v(cid:48)∈Vm

k,ev,v(cid:48)
m,m(cid:48)
pm,m(cid:48) ξf,k

v,mξf (cid:48),k

v(cid:48),m(cid:48)Bk,

where wm,v > 0 denotes the unit cost of VM v on node m that
converts the utilized resources to the cost. By considering the
service bandwidth and the processing requirement for each of
the functions that are placed in the VMs, the total processing
cost is calculated by the ﬁrst term. Subsequently, ˆwn,n(cid:48) > 0
denotes the unit cost of the link between nodes n and n(cid:48). By
considering the links that are included in the selected paths and
the bandwidth of the requested services, the total bandwidth
utilization cost is calculated by the second term.
The values of parameters wm,n and ˆwn,n(cid:48) depend on the type
of nodes, and links, for example, the edge or core nodes has
different (cost) weights. Based on the deﬁnitions, our main
aim is to solve the following optimization problem:

(cid:88)

pm(cid:48)(cid:48)(cid:48),ne,k
n,n(cid:48)

i

n,n(cid:48),m(cid:48)(cid:48)(cid:48)∈N

k,ˆev(cid:48)(cid:48)(cid:48)
pm(cid:48)(cid:48)(cid:48),ne,k

m(cid:48)(cid:48)(cid:48),ne,k

ρ

pm(cid:48)(cid:48)(cid:48),ne,k

∈Pm(cid:48)(cid:48)(cid:48),ne,k

v(cid:48)(cid:48)(cid:48)∈Vm

ξf Fk ,k
v(cid:48)(cid:48)(cid:48),m(cid:48)(cid:48)(cid:48)

˜Bk
xn,n(cid:48)

, (11)

min
ρ,ξ

φ

(cid:88)

m,m(cid:48)∈N

s.t.

pm,m(cid:48)
i
n,n(cid:48) ρ

k,ev,v(cid:48)
m,m(cid:48)
pm,m(cid:48) Bk ≤ xn,n(cid:48), ∀k ∈ K,

(14a)

(14b)

ni,kmm'ne,kf1nfFkn'lni,k,npni,k,mlm,n'pm',ne,kpm,m'n''lm',n''Virtual Machine(VM)nPhysical nodePhysical linkPath of the servicesVirtual path∀v, v(cid:48) ∈ Vm, ∀n, n(cid:48) ∈ N ,
(cid:88)

ξf i,k
v,m df

kBk ≤ Ψv,m, f i ∈ Fk, ∀k ∈ K, ∀v ∈ Vm,

m∈N

(cid:88)

(cid:88)

ξf i,k
v,m = 1, ∀k ∈ K, f ∈ Fk,

(14c)

(14d)

(14e)

v ∈ Vm, f ∈ Fk, m ∈ N , ∀k ∈ K,

(14f)

∀k ∈ K, pm,m(cid:48) ∈ Pm,m(cid:48),

(14g)

m∈N
v∈Vm
Dk
Total ≤ τk,
ξf i,k
v,m ∈ {0, 1},

∀k ∈ K,

k,ev,v(cid:48)
m,m(cid:48)
ρ
pm,m(cid:48) ∈ {0, 1} ,
k,ev,v(cid:48)
m,m(cid:48)
pm,m(cid:48)

] and ξ = [ξf,k

where ρ = [ρ
v,m]. Constraint (14b) ensures
that the total resources allocated to service k in all links in
path pm,m(cid:48) are less that the link capacity. Constraint (14c)
ensures that the total resources allocated to all users are less
than the processing capacity of VM v on node m. Constrain
(14d) indicates that each NF is assigned to one VM. By (14e),
we consider that the total delay is less than the predeﬁned
tolerable latency of the services.

III. PROPOSED SOLUTION

Problem (14) is a integer linear problem witch is compli-
cated to solve efﬁciently. Therefore, we adopt an RL-based
algorithm to solve it. Adopting a RL-based solution for solving
problem (14) is a challenge that has signiﬁcant effect on the
obtained results. In this section, ﬁrst, we evaluate the basic
principles of RL algorithms, and second, we describe how to
adopt these principles to solve the proposed problem.

A. Proposed DQN Adaptive Resource (DQN-AR) Allocation
Algorithm

We propose a RL-based RA algorithm with considering the
basic concepts of RL. The basics of RL are agent, state, action,
reward, and an environment. The agent in each iteration, with
considering the state of the environment, selects an action that
causes that the state changes into the next state. Subsequently,
to evaluate the performance of each action, the agent gets
a reward from the environment. The set of states, actions,
rewards and next state is collocated in each step of RL based
algorithm to the agent, so that based on these experiments, the
agent can select better actions in the same states. Based on the
mentioned assumptions, the main equation for the Q-learning
algorithm is deﬁned as follows [42]:

Q(st, at) ← Q(st, at)+

(cid:20)
rt + γ arg max

α

a(cid:48)

(cid:0)Q(st+1, a(cid:48)) − Q(st, at)(cid:1)

(cid:21)

,

(15)

where st, at, and rt denote the state, action, and the obtained
reward in the t-th step, respectively. In addition, the learning
rate and discount factor are denoted by α and γ, respectively.
Because deploying Q-learning for the huge state-action space
is not possible [17], [30], a DNN is deployed for estimating
the Q-function values.
Based on the mentioned above, we consider the network

6

components as the basics of components RL.
Descriptions of DQN: We adopt Algorithm 2 where the DQN
algorithm chooses a random action with probability (cid:15). The
parameter (cid:15) is set to 1 in the ﬁrst iteration and has a ﬁnal
value, (cid:15) = 0.1 whereas the decay coefﬁcient of epsilon is set
to 0.9. To make sure that the algorithm does not get the local
optimum, in each time slot with probability 0 ≤ (cid:15) < 1, we
choose a random action [43]. In fact, (cid:15) parameters determine
the ratio between exploration and exploitation in the search
algorithm [42]. In addition, we store the current sate, action,
new state, and reward in ˆD memory with a certain size. To
update the parameters of DQN, we sample the set ˆB of the
transactions with the number | ˆB|. We set the memory size
| ˆD| = 2000 for storing transactions and the size of mini-batch
ˆB is set to 8 transactions [25]. The learning rate α and the
discount factor γ is set to 0.001 and 0.95, receptively [7], [43].
The reason for using a discount factor γ is that it prevents the
total reward from going to inﬁnity [44].
• Agent: We consider the SDN controller as the agent that
by considering the network’s states, chooses the actions form
action spaces. For each selected action, the agent gets a reward
and the network’ state changes to the next state over the time.
To have a smart and adaptive algorithm, the agent needs to
have knowledge about the network state and condition in each
time slot t. For this reason, available resources or capacity of
nodes and links at each time slot t is necessary [29]. To this
end, we propose a available calculation algorithm that more
details follow in Algorithm 1.
• Network States: We denote the state space at each time
slot t by St as network resources that includes the available
resources in terms of processing resources of VMs and links’
bandwidth as follows:

St = (Zt, Yt),
Zt = [zt

v,m] ∈ RV ×N

+

,

Yt = [yt

n,n(cid:48)] ∈ RN ×N

+

(16)

,

v,m and yt

where zt
n,n(cid:48) are the available processing resource of
VM v on physical node m and bandwidth of link between
nodes n and n(cid:48) in time slot t, respectively, and obtained by
Algorithm 1. First, we divide the amount of each resource to
I levels. To represent the resources state, we normalized the
gap between beginning time and time slot t as bellow [29]:

st
n,n(cid:48) = (cid:98)I

n,n(cid:48) − yt
y0
y0
n,n(cid:48)

n,n(cid:48)

(cid:99),

st
v,n = (cid:98)I

v,n − zt
z0
z0
v,n

v,n

(cid:99).

(17)

In order to apply resources’ state to input of the DQN,
the values of each network component (links and VMs) are
normalized. In addition, we set I to 1000 [7]. In addition, in
RA algorithm, the agent considers the service speciﬁcation,
the previous selected node and VM in the path from ingress
to egress nodes, and order of the function in SFC as state.
Moreover, we assume that in each time slot t, the agent has
some steps to choose action and perform the RA algorithm.
We denote the state and action at time slot t and step j, for
service k, by st,j and at,j
k , respectively. To ensure a limited
solving time in each time slot, we assume a upper bound for
the steps that is denoted by J and it is set to 100 in each time
slot.

• Calculating Available Resources: As mentioned before, we
need to have an algorithm that returns the available resources
at each time slot. Based on service duration time, the service
of users is terminated and their resources are released. Also,
to calculate the available resources, it is outlined in Algorithm
1.

Algorithm 1: Resource Allocation and Calculating of
Available Resources

Input: The network graph and capacity of the links and VMs; G, Ψ, and X

for each services k do

for each users u do

1 for each time slot t do
2
3
4
5
6

Save the arrival time tu for user u
if the request accepted (By the Actions) then
if at the begining time then

7

8

9

10

11

12
13

14

15

16

17

tu
v,m = Ψv,m − dk
z

f Bk ξ

f,k
v,m

tu
n,n(cid:48) = x
y
else

p
n,n(cid:48) − Bk i
n,n(cid:48)

m,m(cid:48)

k,e

v,v(cid:48)
m,m(cid:48)

ρ

p

m,m(cid:48)

tu
v,m = z

z

tu−ˆt
v,m − dk

f Bk ξ

f,k
v,m

tu
n,n(cid:48) = y
y

p
tu−ˆt
n,n(cid:48) + Bk i
n,n(cid:48)

m,m(cid:48)

if

the user departure then

Release the user u resource’s
tu
v,m + dk
zt
v,m = z

f Bk ξ

f,k
v,m

k,e

v,v(cid:48)
m,m(cid:48)

ρ

p

m,m(cid:48)

yt
n,n(cid:48) = y
tu ← 0

p
tu
n,n(cid:48) + Bk i
n,n(cid:48)

m,m(cid:48)

ρ

k,e

v,v(cid:48)
m,m(cid:48)

p

m,m(cid:48)

Update State :Zt, Yt according to the utilization of links and nodes

based on the bandwidth and processing resources

Output: Zt, Yt

Algorithm 2: DQN Algorithm

1

Initialize the DNN with random weights and consider the network graph and capacity of the links and VMs;

G, Ψ, X, and set the initial weighth for DNN : θ0

2 if the central controller want taking an action then

3

4

5

6

Action a

is selected;

t,j
k

(cid:40)

a

t,j
k

=

select a random action
arg maxa (Q(st,j , a)) with probability 1 − (cid:15)

with probability (cid:15),

t,j
Store transaction (st,j , a
, r
k
Sample random minibatch with batch size ˆB of transitions (st,j , a

, st+1,j ) in memory ˆD

t,j
k

ˆD

7 if a request accepted then
8

Perform Algorithm 1

9 else

t,j
k

, r

t,j
k

, st+1,j ) from

10

Perform gradient descent step on Mean Square Erorr (MSE) of (r

and update parameter θt of network

t,j
k

− Q(st,j , a

t,j
k

; θ))2

Action Space: The action space is denoted by A which
includes all
the network VMs on the nodes that can be
considered for function placement or as a switch. Based on
the network state and SFC requirements, a subset of actions
is possible that is denoted by Ap ⊂ A. For example, if user
u requests service chain (cid:8)f 1 → f 2 → f 3(cid:9), the corresponding
action determines that the next node and VM is selected for
function placement or just it is a switch. In fact, we propose
a smart and adaptive NFV-RA algorithm that perform joint
function placement and node by node dynamic routing. More
details are given in Algorithm 3. Thus, the size of all action
space for each of service request is calculated by

|A| = |N | × |VTotal| × 2.

(18)

k ∈ N at time slot t in jth step of Algorithm 3.

Consequently, the agent for user u in the service k selects
action at,j
• DQN-AR for RA, Dynamic Routing, and Function
Placement: To adopt Algorithm 2 for dynamic routing and

7

function placement, we propose an algorithm that by an
interactive approach with Algorithm 2, performs a node by
node routing and function placement beginning from ni,k and
in each step of routing algorithm, considers the current node
as nc,k and continues to reach ne,k. On the other hand, for
each of service requests, with considering the network state
and service speciﬁcation as inputs of DQN, the output of the
DQN determines the corresponding action as the next node and
VM in SFC path. It is worth mention that in each step, only a
set of the actions is possible. We consider the set of nodes that
are directly connected to current node nc,k and it is denoted
by Nc,k. Subsequently, we consider the set of VMs in which
they are on the set Nn,c as set of the possible actions and it
is denoted by ˆNc,k. In addition, we assume that the agent can
choose a VM form ˆNc,k. The agent can placed a function on
the selected VM or consider the selected VM as a forwarding
(cid:110) ˆNnc,k
(cid:111)
device. Furthermore, we assume Ap,p = Ap,s =
where Ap,p and Ap,s are the sets of possible actions for
function placement and router selection, respectively. Thus,
the set of possible action is deﬁned by Ap = Ap,p ∪ Ap,s.
To determine the type of each action, we deﬁne an auxiliary
binary variable as at,k

s,k as follows:

at,k
s,k =

(cid:40)

If at,k
0,
1, otherwise.

k ≡2 0,

(19)

It is worth to mention that, if the agent chooses a possible
action, (at,j
s,k determines the type
of each action. Based on this, type of each action is deﬁned
by

k ∈ Ap), the sub action at,j

at,j
k ∈

(cid:40)

Ap,p, at,j
Ap,s,

s,k = 1,
otherwise.

(20)

In each step, if the selected action is possible, then we check
that this action belongs to which set. If constraints (14c) and
(14b) are satisﬁed, the function is placed on selected VM on
corresponding node otherwise the request is rejected. Simi-
larly, for the links, we check the constraint (14b) sanctiﬁcation.
Nevertheless, the processing and propagation delay that incur
the action at,j
k,u is denoted by ˆτ and calculated by

ˆτ =






k,ev,v(cid:48)
m,m(cid:48)
pm,m(cid:48) κn,n(cid:48),

τ f,k
v,m + i
pm,m(cid:48)
n,n(cid:48) ρ
i

pm,m(cid:48)
n,n(cid:48) ρ
k,ev,v(cid:48)
m,m(cid:48)
pm,m(cid:48) κn,n(cid:48),

at,k
s,j = 1,

otherwise.

(21)

In each step, by checking constraints (14e), we ensure the
tolerable time of service request.
• Reward Function: The agent after doing action at,j
k obtains
a reward that is denoted by rt,j
k in jth step of the RA algorithm
to service k in time slot t. Nevertheless, the agent selects a
VM on a node for function placement or as forwarding device
in jth step of Algorithm 3. Subsequently, if the link between
the current node, and the next node and processing capacity of
the next node’s VM satisfy constraints (14b), (14c) and (14e),
the agent obtains reward that is calculate by the following:

rt,j
k = wacc − wcost

˜φj
k

, ∀k ∈ K, ∀t,

(22)

where wacc and wcost are coefﬁcient factors of constraint
satisfaction and cost and ˜φj
k is the cost of the action, given
below:

8

˜φj
k = at,k

ˆwn,n(cid:48)Bki

s,kwm,vdk
pm,m(cid:48)
n,n(cid:48) ρ

f Bkδk
k,ev,v(cid:48)
m,m(cid:48)
pm,m(cid:48)

uξf,k

v,m+

, ∀u ∈ U, ∀f ∈ Fk, ∀k ∈ K.

(23)

Otherwise, if the constraints are not satisﬁed, the request is
rejected and the agent reward is set to 0. Based on this the
reward of each step j is calculated by following:

rt,j
k =

(cid:40)

wacc − wcost
0,

˜φj
k,

if the constraints satisﬁed,
otherwise.

(24)

In fact, for each step j of the Algorithm 3, we deﬁne a reward
that depends on constraints sanctiﬁcation and cost of each
action. Finally, the total reward that the agent obtained is
deﬁned by

rt
k =

(cid:88)

rt,j
k .

j

(25)

The designed DQN is depicted in Fig. 5. According to the

Fig. 4: An example of function placement and node by node routing
algorithm for a speciﬁc service

Algorithm 3: DQN-based NFV-RA algorithm for dy-
namic routing and function placement
1 for each time slot t do
2
3
4
5
6

tu ←Arivial time, to ← 0, if ← 0, j ← 0, ˆp = {}, nc,k ← ni,k
while Constraint (14e) is satisﬁed, to < τk do

while nc,k (cid:54)= ne,k do

for each service k do

while j < J do

7

8

9
10
11

12

13

14
15
16

17

18
19

20
21

22
23

24
25
26

27
28
29

30

31

32
33
34

if a

t,j
k,u

∈ Ap then

(cid:111)

a

ˆp ← ˆp (cid:83) (cid:110)
t,j
k

t,j
k
∈ Ap,p then
if if < Fk then

if a

if Constraints (14c) and (14b) are satisﬁed then

t,j
k

Calculate r
if ← if + 1, f ← f (cid:48), j ←

j + 1, to ← to + ˆτ

else

request is rejected
rt
k ← 0

t,j
k

consider a
j ← j + 1, to ← to + ˆτ

as switch

else

else

if Constraint (14b) is satisﬁed then

Calculate r
j ← j + 1, to ← to + ˆτ

t,j
k

else

request is rejected
rt
k ← 0

if if < Fk then

if Constraint (14c) and if < Fk then

Function f is placed on engress node;

t,j
k

Calculate r
if ← if + 1, f ← f (cid:48) , j ← j + 1, to ← to + ˆτ

if to > τk then

request is rejected
rt
k ← 0

ﬁgure, by considering the network state as DQN input, the
DNN output layer determines the actions. Note that some of
the nodes in the path are only forwarding devices (e.g., switch)
(see Fig. 2 and 4).

Fig. 5: The DQN based on the network state and service speciﬁcation
determines the action.

IV. COMPUTATIONAL COMPLEXITY

We analyze the computational complexity of the proposed
DQN-AR algorithm and then we compare it with the NFV
deep algorithm [7], Tabu search algorithm [45], and greedy
search algorithm which is the well know algorithm that is de-
ployed in [46]–[48]. The complexity of DNN based algorithms
is depended on the architecture, conﬁguration, number of input
and output, and hidden layers. Moreover, for deploying DNN
in the DQN-AR algorithm, considering the action space size
and state space size is required [7]. Also, by considering the
number of output layer neurons as Po, number of the input
layer neurons as Pi, and number of the hidden layers as Ph,
the time complexity of the proposed DQN-AR for each action
is obtained by following:

O(Pn × (Pi + Ph × Pn + Po)),

(26)

where Pn is the hidden layer’s neuron number [29]. Also,
as can be seen from Fig. 5, Pi = |L| + |N | × |VTotal| + 5
and Po = |N | × |VTotal| × 2. Moreover, by considering E
iterations in the case of Tabu search, for |K| number of service
requests, the time complexity is obtained by O(E × |K| × F )

Node 2Node 3Node 7Node 4Node 1Node 10Node 11Node 12Node 9Node 6Node 5Node 8SDN ControllerService Function ChainService Function ChainLinks’ Available resources|NxN|VMs’ Available resources|NxVTotal|Ingress nodeEgress nodeCurrent nodeCurrent VMFunction numberService SpecificationInput layerHidden layerOutput layerAction space|NxVmaxx2|9

TABLE III: Simulation Setting

Parameters

Service Speciﬁcation

Network Resources

Network Conﬁguration

Value
Average Duration Time:
240, 600, 900, 1200 seconds [29]
Data Rate:
Max = 4 Mbps Min = 64Kbps [37]
Average Tolerable Time
Max = 500ms Min = 100ms
VNF and Services:
FW, NAT, IDNS, TM, VOC [37]
Web Browsing, Voice over IP, Video Streaming
VM’s Capacity:
Max = 1200 CPU Cycle per second
Min = 200 CPU Cycle per second
[40]
Link’s Capacity:
Max = 6400 Mbps
Min = 1600 Mbps
[40]
Number of the Server Node:
10, 20, 30, 50, 100 [7]
Propagation delay on the links
Max = 15ms Min = 5ms
Number VMs of each nodes
Vmax=6

for F number of functions in a certain SCF. Accordingly, by
increasing the number of iterations, the complexity of the Tabu
search is increasing that can cause more complexity in the case
of problems with a larger space of feasible solutions. Finally,
to ﬁnd the shortest path from ingress node to egress nodes
for each of services with F functions, in a network with |N |
nodes and |L| links, the total time complexity is obtained by
O(|K| × (|L| + |N | log(|N |) + F × K).

V. SIMULATION RESULTS

We analyze the performance of the proposed method using
simulations. Accordingly, ﬁrst we investigate the convergence
of the proposed method. Next, we evaluate the effect of the
coefﬁcient factors in the the objective function. Afterwards, we
compare the results of the proposed method with the baselines.

A. Simulation Setup

As listed in Table. III, we consider some of the service
speciﬁcations based on their QoSs [37] and service lifetime.
We assume that each time slot is equal to one second. We
consider 1000 to 6000 time slots for the simulation time,
and 2000 iterations [7] with 10 Monte Carlo repetitions.
Moreover, we generate the number of service requests by the
Uniform random process [20] and the service life time by the
exponential random process. Also, to set the ingress and egress
nodes for set K, at the beginning of the simulation, we select
some random nodes among the network nodes.

Subsequently, to have a network with certain number of
edges and nodes, we generate a random connected graph
through NetworkX libraries in Python [25], [40]. Also, to
deploy DNN, we use Tensorﬂow and Keras libraries in Python.
Moreover, for the cost weight, we consider wn,v and ˆwn,n(cid:48) in
range of 25 to 75 $/Mbps [9]. In addition, the source code of
the proposed DQN-AR is available in [49].

B. Simulation Results Discussions

We evaluate the effect of the main parameters, such as,
services’ life time, number of the server nodes of the network
(network topology), and the number of the arrival service
requests on different baseline algorithms.

Fig. 6: AAR over the iterations for different network topology

1) Average Acceptance Ratio (AAR): As the network topol-
ogy, such as the number of the nodes and links and their
conﬁgurations, has a signiﬁcant effect on the routing algorithm
and protocols, we evaluate the AAR on different network
typologies. To have a comparison of the effect of the network
topology on the performance of the agent, we consider the
networks with size 10 to 100 nodes to evaluate the AAR
over the iteration number. As can be seen in Fig. 6, in the
ﬁrst iteration, the AAR for the different network typologies
have signiﬁcant differences, specially, in the networks with
large number of the server nodes. It is because that in a
large network, the agent needs to select more actions to ﬁnd
appropriate path from ingress node to egress node and also
the SFC placement on the VMs for each service request.
is
Gradually,
because the agent learns how to handle the requests and ﬁnd
the appropriate path from ingress nodes into egress nodes in
different states.

the AAR increases over the iterations. That

2) Average Network Utilization Cost (ANUC): Network
topology and conﬁguration have a signiﬁcant effect on the
length of the paths. To evaluate the effect of the network
topology on the ANUC, we consider the network with 10
to 100 nodes. Because of the signiﬁcant differences in the
length of the paths from ingress to egress nodes in small and
big networks, ANUC depends on the network size as shown
in Fig. 7. Since the initial actions are selected by the agent
randomly, we see that the obtained utilization cost is very high.
After that, the agent gets more experience and take the actions
based on the obtained experience and the ANUC gradually
decreases over the iterations.

C. Baselines Algorithms

In order to evaluate the performance of the proposed DQN-
AR, we consider baselines for comparing the results for differ-
ent setting. Since DQN-AR is an online and adaptive algorithm
in routing and function placement, it shows good performance
in different conditions. To evaluate the performance of the
proposed algorithm, we consider NFVdeep as baseline 1,
Tabu search algorithm as baseline 2, and greedy algorithm as
baseline 3, that are studied in [7], [45], and [48], respectively.

0200400600800100012001400160018002000Iteration0.70.750.80.850.90.951Average Acceptance Ratio10 Nodes20 Nodes30 Nodes50 Nodes100 Nodes10

Fig. 7: ANUC over the iterations for different network topologies

Fig. 8: Average network utilization cost versus the average number
of requests per second

1) Effect of average number of the requests over time:
To analyze the effect of the number of requested services on
the ANUC, we increase the average number of users from
5 to 25 requests per second. As can be seen in Fig. 8, by
increasing the number of arrival services, ANUC increases.
By deploying adaptive function placement and dynamic
routing in the proposed DQN-AR, we obtain lower ANUC
for different number of arrival services.

2) Effect of the coefﬁcient wcost on AAR: The ANUC is very
dependent on the AAR, since when the accepted requests in-
creases, the network utilization cost increases simultaneously.
Based on this, we try to maximize the number of accepted
requests with respect
to the constraints and minimize the
utilization cost at the same time. Also, as we denote in (24),
we consider the reward function with certain coefﬁcients as
wacc and wcost. Accordingly, the coefﬁcient wcost determines
the priority of cost in each action. As we show in Fig. 9, by
increasing the coefﬁcient wcost, the AAR deceases.

3) Effect of the coefﬁcient wcost on ANUC: By considering
the coefﬁcient wcost, the agent has more attention to minimize
the ANUC. Therefore, the agent chooses actions that have less
cost, but these actions can not provide sufﬁcient resources
for the next requests Fig. 10. Because ANUC is closely

Fig. 9: Comparing AAR with considering different coefﬁcient of the
cost in reward function

dependent on the AAR, by decreasing AAR, ANUC gradually
decreases, but by considering this coefﬁcient, AAR decreases
12% and ANUC decreases 20% in the proposed DQN-AR
method. In addition, to evaluate the effect of coefﬁcient wcost
on the baselines, we illustrate the obtained results in Fig. 10.
Baseline 1, by placing the VNF in the VMs by the NFVdeep
algorithm achieves more ANUC compared to the proposed
method. Baseline 2 deploys Tabu-search algorithm for function
placement and routing and achieves higher cost than baseline
1. Finally, baseline 3, by deploying greedy-based selection
criteria, has the worst results speciﬁcally in the case of large
networks.

4) Effect of Average Service Life Time on AAR: Average
service life is a parameter that depends on the type of services.
To evaluate the effect of the service life time on AAR, we
consider the service life time with 240 to 1200 seconds. As
can be seen in Fig. 12, increasing the services lifetime has
more effect on AAR compared to the number of requests.
This is because when service lifetime becomes large,
the
available resource decreases. In addition, by considering the
exponential distribution for the users’ service lifetime, after a
period of time equal to the mean of exponential distribution
from the users’ arrival time, as can be seen in Fig. 11, only
36% of these users departure the services. Because effective
resource allocation according to the service speciﬁcation have
a signiﬁcant effect on the AAR, DQN-AR by considering
network resources and the service speciﬁcation in the network
state can adapt to the conditions that the available resources
of network is limited. In addition, DQN-AR by performing
an adaptive resource allocation, and dynamic routing achieves
better results than baselines.

5) Effect Network Resources on AAR: To evaluate the effect
of the available network resource on AAR, we consider that
the users have maximum (1200 seconds) service life time.
As can be seen in Fig. 13, by increasing the server nodes
and links, the available resources increases and the agent can
accept more service requests. Because the proposed DQN-AR
algorithm can consider some of the nodes as switch or for
function placement and also deploy a dynamic node by node

0200400600800100012001400160018002000Iteration300400500600700800900Average Network Utilization Cost ($)10 Nodes20 Nodes30 Nodes50 Nodes100 Nodes510152025Average Number of the Requests (per second)20040060080010001200140016001800Average Network Utilization Cost ($)DQN-ARBaseline 1Baseline 2Baseline 310203050100Number of the Server Nodes0.70.750.80.850.90.951Average Acceptance Ratiowcost=0.1wcost=0.25wcost=0.5wcost=0.75wcost=111

Fig. 10: Performance evaluation of the proposed method and the baselines by changing the coefﬁcient wcost

Fig. 11: Average probability of the presence of a user in the network
after service arrival time.

Fig. 13: The effect of the network resources on AAR

Fig. 12: The effect of the service life time on AAR

Fig. 14: Effect of the network size and number of the server nodes
on ANUC

routing, it has higher AAR in different network typologies.

6) Effect of the network topology on ANUC: As we evalu-
ated in Section V-B2, by increasing the network size and the
number of the server nodes, because the paths become longer,
the AUNC is increased as shown in Fig. 14. In fact, by increas-
ing the server nodes, the network becomes bigger and also

more scattered. By solving the routing and function placement
jointly in the proposed DQN-AR algorithm, the ANUC is less
than that of the other baselines. In summery, since DQN-AR
is an online and adaptive algorithm in routing and function
placement, it shows good performance in different conditions.

10203050100Number of the Server Nodes0100200300400500600700Average Network Utilization Cost ($)DQN-AR, wcost=0.1DQN-AR, wcost=0.25DQN-AR, wcost=0.5DQN-AR, wcost=0.75DQN-AR, wcost=110203050100Number of the Server Nodes0200400600800Average Network Utilization Cost ($)Baseline 1, wcost=0.1Baseline 1, wcost=0.25Baseline 1, wcost=0.5Baseline 1, wcost=0.75Baseline 1, wcost=110203050100Number of the Server Nodes0200400600800Average Network Utilization Cost ($)Baseline 2, wcost=0.1Baseline 2, wcost=0.25Baseline 2, wcost=0.5Baseline 2, wcost=0.75Baseline 2, wcost=110203050100Number of the Server Nodes0100200300400500600700Average Network Utilization Cost ($)Baseline 3, wcost=0.1Baseline 3, wcost=0.25Baseline 3, wcost=0.5Baseline 3, wcost=0.75Baseline 3, wcost=101000200030004000500060007000Time Slots (seconds)00.10.20.30.40.50.60.70.80.91AverageProbabilityofthePresenceofa User in the Network After Service Arrival Timemu = 240smu = 600smu = 900smu = 1200s2406009001200Mean of Exponentioal Distriution (Service Life Time)0.650.70.750.80.850.90.951Average Acceptance RatioDQN-ARBaseline 1Baseline 2Baseline 310203050100Number of the Server Nodes00.10.20.30.40.50.60.70.80.91Average Acceptance RatioDQN - ARBaseline 1Baseline 2Baseline 310203050100Number of the Server Nodes0100200300400500600700800Average Network Utilization Cost ($)DQN - ARBaseline 1Baseline 2Baseline 3VI. FUTURE WORKS

It will be important that future researches investigate the
performance of the new RL-based methods that deploy com-
bined methods like Recurrent Deterministic Policy Gradient
(RDPG) to provide proactive and predictive resource allocation
in future
algorithms in NFV-enabled networks. Therefore,
works, we will study other RL-algorithms in NFV-enabled
networks.

VII. CONCLUSION

We studied an online service provision framework by con-
sidering lifetime for each service and using RA approach in a
NFV-enabled network. To this end, we formulated the cost
of the network resource utilization for function placement
and routing of the requested services by considering services
requirements and resource constraints. To minimize the re-
source utilization cost by maximizing the service acceptance
ratio, we deﬁned the reward as a piecewise function. Because
of the large number of actions and states space, we used a
DQN structure. Simulation results show the effectiveness of
the proposed model. By evaluating the baselines, the network
utilization cost is decreases by 5 and 20% and average number
of admitted request increases by 7 up to 20%.

REFERENCES

[1] M. Series, “IMT vision–framework and overall objectives of the future
development of imt for 2020 and beyond,” Recommendation ITU,
pp. 2083–0, Sep. 2015.

[2] R. Cziva and D. P. Pezaros, “Container network functions: Bringing
NFV to the network edge,” IEEE Communications Magazine, vol. 55,
no. 6, pp. 24–31, June. 2017.

[3] J. Pei, P. Hong, and D. Li, “Virtual network function selection and
chaining based on deep learning in SDN and NFV-enabled networks,”
in Proc. IEEE International Conference on Communications Workshops
(ICC Workshops), Kansas City, USA, May. 2018, pp. 1-6.

[4] Q. Mao, F. Hu, and Q. Hao, “Deep learning for intelligent wireless
networks: A comprehensive survey,” IEEE Communications Surveys
Tutorials, vol. 20, no. 4, pp. 2595–2621, Jun. 2018.

[5] J. G. Herrera and J. F. Botero, “Resource allocation in NFV: A
comprehensive survey,” IEEE Transactions on Network and Service
Management, vol. 13, no. 3, pp. 518–532, August. 2016.

[6] M. Hamann and M. Fischer, “Path-based optimization of NFV-resource
allocation in SDN networks,” in Proc. IEEE International Conference
on Communications (ICC), Shanghai, China, July. 2019, pp. 1-6.
[7] Y. Xiao, Q. Zhang, F. Liu, J. Wang, M. Zhao, Z. Zhang, and J. Zhang,
“NFVdeep: Adaptive online service function chain deployment with
learning,” in Proc. International Symposium on
deep reinforcement
Quality of Service (IWQoS), Phoenix, Arizona, USA, June. 2019, pp.
1–10.

[8] C. Zhang, H. Zhang, J. Qiao, D. Yuan, and M. Zhang, “Deep transfer
learning for intelligent cellular trafﬁc prediction based on cross-domain
big data,” IEEE Journal on Selected Areas in Communications, vol. 37,
no. 6, pp. 1389–1401, March. 2019.

[9] N. Gholipoor, H. Saeedi, N. Mokari, and E. Jorswieck, “E2E QoS
guarantee for the tactile internet via joint NFV and radio resource
allocation,” IEEE Transactions on Network and Service Management,
June. 2020.

[10] A. Alleg, T. Ahmed, M. Mosbah, R. Riggio, and R. Boutaba, “Delay-
aware VNF placement and chaining based on a ﬂexible resource allo-
cation approach,” in Proc. IEEE International Conference on Network
and Service Management (CNSM), Tokyo, Japan, USA, Nov. 2017, pp.
1-7.

[11] H. Ren, Z. Xu, W. Liang, Q. Xia, P. Zhou, O. F. Rana, A. Galis, and
G. Wu, “Efﬁcient algorithms for delay-aware NFV-enabled multicasting
in mobile edge clouds with resource sharing,” IEEE Transactions on
Parallel and Distributed Systems, March. 2020.

12

[12] I. R. D. Kamgang, G. E. M. Zhioua, and N. Tabbane, “A slice-based
decentralized NFV framework for an End-to-End QoS-based dynamic
resource allocation,” Journal of Ambient Intelligence and Humanized
Computing, pp. 1–19, Jan. 2020.

[13] R. Mijumbi, J. Serrat, J.-L. Gorricho, N. Bouten, F. De Turck, and
S. Davy, “Design and evaluation of algorithms for mapping and schedul-
ing of virtual network functions,” in Proc. IEEE Conference on Network
Softwarization (NetSoft), London, UK, April. 2015, pp. 1–9.

[14] T.-H. Nguyen, J. Lee, and M. Yoo, “A practical model for optimal place-
ment of virtual network functions,” in Proc. IEEE International Con-
ference on Information Networking (ICOIN), Kuala Lumpur, Malaysia,
May. 2019, pp. 239–241.

[15] X. Chen, W. Ni, T. Chen, I. B. Collings, X. Wang, R. P. Liu, and
G. B. Giannakis, “Multi-timescale online optimization of network func-
tion virtualization for service chaining,” IEEE Transactions on Mobile
Computing, vol. 18, no. 12, pp. 2899–2912, Dec. 2018.

[16] Q. Mao, F. Hu, and Q. Hao, “Deep learning for intelligent wireless
networks: A comprehensive survey,” IEEE Communications Surveys &
Tutorials, vol. 20, no. 4, pp. 2595–2621, 2018.

[17] J. Li, H. Gao, T. Lv, and Y. Lu, “Deep reinforcement learning based
computation ofﬂoading and resource allocation for MEC,” in Proc.
IEEE Wireless Communications and Networking Conference (WCNC),
Barcelona, Spain, June. 2018, pp. 1–6.

[18] S. Ayoubi, N. Limam, M. A. Salahuddin, N. Shahriar, R. Boutaba,
F. Estrada-Solano, and O. M. Caicedo, “Machine learning for cognitive
network management,” IEEE Communications Magazine, vol. 56, no. 1,
pp. 158–165, Jan. 2018.

[19] L. M. M. Zorello, M. G. T. Vieira, R. A. G. Tejos, M. A. T. Rojas,
C. Meirosu, and T. C. M. de Brito Carvalho, “Improving energy
efﬁciency in NFV clouds with machine learning,” in Proc. IIEEE In-
ternational Conference on Cloud Computing (CLOUD), San Francisco,
CA, USA, July. 2018, pp. 710–717.

[20] R. Ding, Y. Xu, F. Gao, X. Shen, and W. Wu, “Deep reinforcement
learning for router selection in network with heavy trafﬁc,” IEEE Access,
vol. 7, pp. 37109–37120, March. 2019.

[21] J. Pei, P. Hong, and D. Li, “Virtual network function selection and
chaining based on deep learning in SDN and NFV-enabled networks,”
in Proc. IEEE International Conference on Communications Workshops
(ICC Workshops), Kansas City, MO, USA, July. 2018, pp. 1–6.
[22] J. Zhou, P. Hong, and J. Pei, “Multi-task deep learning based dynamic
service function chains routing in SDN/NFV-enabled networks,” in Proc.
IEEE International Conference on Communications (ICC), Shanghai,
China, May. 2019, pp. 1–6.

[23] T. ZSubramanya and R. Riggio, “Machine learning-driven scaling and
placement of virtual network functions at the network edges,” in Proc.
IEEE International Conference on Network Softwarization (NetSoft),
Paris, France, Aug. 2019, pp. 414–422.

[24] B. Wu, J. Zeng, L. Ge, S. Shao, Y. Tang, and X. Su, “Resource allocation
optimization in the NFV-enabled MEC network based on game theory,”
in Proc. IEEE International Conference on Communications (ICC),
Shanghai, China, July. 2019, pp. 1–7.

[25] X. Fu, F. R. Yu, J. Wang, Q. Qi, and J. Liao, “Dynamic service function
chain embedding for NFV-enabled IoT: A deep reinforcement learning
approach,” IEEE Transactions on Wireless Communications, Oct. 2019.
[26] C. Pham, N. H. Tran, and C. S. Hong, “Virtual network function
scheduling: A matching game approach,” IEEE Communications Letters,
vol. 22, no. 1, pp. 69–72, Aug. 2017.

[27] M. Li, Q. Zhang, and F. Liu, “Finedge: A dynamic cost-efﬁcient edge
resource management platform for NFV network,” in Proc. IEEE/ACM
International Symposium on Quality of Service (IWQoS), Hang Zhou,
China, Oct. 2020, pp. 1–10.

[28] Z. Ning, N. Wang, and R. Tafazolli, “Deep reinforcement learning for
NFV-based Service Function Chaining in Multi-Service Networks,” in
Proc. IEEE International Conference on High Performance Switching
and Routing (HPSR), Newark, NJ, USA, May. 2020, pp. 1–6.

[29] J. Pei, P. Hong, M. Pan, J. Liu, and J. Zhou, “Optimal VNF placement
via deep reinforcement learning in SDN/NFV-enabled networks,” IEEE
Journal on Selected Areas in Communications, vol. 38, no. 2, pp. 263–
278, Dec. 2019.

[30] K. Qu, W. Zhuang, Q. Ye, X. Shen, X. Li, and J. Rao, “Dynamic
ﬂow migration for embedded services in SDN/NFV-enabled 5G core
networks,” IEEE Transactions on Communications, vol. 68, no. 4,
pp. 2394–2408, Jan. 2020.

[31] Y. Jia, C. Wu, Z. Li, F. Le, and A. Liu, “Online scaling of NFV service
chains across geo-distributed datacenters,” IEEE/ACM Transactions on
Networking, vol. 26, no. 2, pp. 699–710, 2018.

13

[32] M. Huang, W. Liang, Y. Ma, and S. Guo, “Maximizing throughput of
delay-sensitive NFV-enabled request admissions via virtualized network
function placement,” IEEE Transactions on Cloud Computing, 2019.

[33] Z. Xu, W. Liang, A. Galis, Y. Ma, Q. Xia, and W. Xu, “Throughput
optimization for admitting NFV-enabled requests in cloud networks,”
Computer Networks, vol. 143, pp. 15–29, 2018.

[34] 3GPP, TS 28.530, “Technical speciﬁcation group services and system
aspects; management and orchestration; Concepts, use cases and require-
ments,” Sep. 2019.

[35] N. ETSI, “GS NFV-MAN 001 v1. 1.1 network functions virtualisation

(NFV); management and orchestration,” tech. rep., Dec. 2014.

[36] P. Hong, K. Xue, D. Li, et al., “Resource aware routing for service
function chains in SDN and NFV-enabled network,” IEEE Transactions
on Services Computing, June. 2018.

[37] M. Savi, M. Tornatore, and G. Verticale, “Impact of processing-resource
sharing on the placement of chained virtual network functions,” IEEE
Transactions on Cloud Computing, May. 2019.

[38] G. Liu, Y. Ren, M. Yurchenko, K. Ramakrishnan, and T. Wood,
“Microboxes: high performance NFV with customizable, asynchronous
TCP stacks and dynamic subscriptions,” in Proc. Conference of the ACM
Special Interest Group on Data Communication (SIGCOMM), Budapest
Hungary, Aug. 2018, pp. 504–517.

[39] M. M. Tajiki, S. Salsano, L. Chiaraviglio, M. Shojafar, and B. Akbari,
“Joint energy efﬁcient and QoS-aware path allocation and VNF place-
ment for service function chaining,” IEEE Transactions on Network and
Service Management, vol. 16, no. 1, pp. 374–388, Oct. 2018.

[40] S. Ebrahimi, A. Zakeri, B. Akbari, and N. Mokari, “Joint resource and
admission management for slice-enabled networks,” in Proc. EEE/IFIP
Network Operations and Management Symposium (NOMS), Budapest,
Hungary, June. 2020, pp. 1–7.

[41] G. Miotto, M. C. Luizelli, W. L. da Costa Cordeiro, and L. P. Gaspary,
“Adaptive placement & chaining of virtual network functions with
NFV,” Journal of Internet Services and Applications, vol. 10, no. 1,
pp. 1–19, Feb. 2019.

[42] R. S. Sutton and A. G. Barto, Reinforcement learning: An introduction.

MIT press, 2018.

[43] M. Tokic and G. Palm, “Value-difference based exploration: adaptive
control between epsilon-greedy and softmax,” in Annual conference on
artiﬁcial intelligence, pp. 335–346, Springer, 2011.

[44] H. Van Hasselt and M. A. Wiering, “Reinforcement learning in continu-
ous action spaces,” in 2007 IEEE International Symposium on Approxi-
mate Dynamic Programming and Reinforcement Learning, pp. 272–279,
IEEE, 2007.

[45] A. Leivadeas, G. Kesidis, M. Ibnkahla, and I. Lambadaris, “VNF
placement optimization at the edge and cloud,” Future Internet, vol. 11,
no. 3, p. 69, March. 2019.

[46] S. Sheikhzadeh, M. Pourghasemian, M. R. Javan, N. Mokari, and
E. A. Jorswieck, “AI-based secure NOMA and cognitive radio enabled
green communications: Channel state information and battery value
uncertainties,” arXiv preprint arXiv:2106.15964, 2021.

[47] Y. Li, L. Gao, S. Xu, Q. Ou, X. Yuan, F. Qi, S. Guo, and X. Qiu,
“Cost-and-QoS-based NFV service function chain mapping mechanism,”
in NOMS 2020-2020 IEEE/IFIP Network Operations and Management
Symposium, pp. 1–9, IEEE, 2020.

[48] S. Agarwal, F. Malandrino, C.-F. Chiasserini, and S. De, “Joint VNF
placement and CPU allocation in 5G,” in Proc. IEEE INFOCOM
Conference on Computer Communications, Honolulu, HI, USA, Oct.
2018, pp. 1943–1951.

[49] A. Nouruzi, “Code of NFV Paper, DOI: https://dx.doi.org/10.21227/r1j8-

tc84, https://ieee-dataport.org/documents/anazmrjnm2021ﬁles,”

