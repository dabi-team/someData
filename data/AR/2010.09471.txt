1
2
0
2

g
u
A
1
1

]

O
L
.
s
c
[

2
v
1
7
4
9
0
.
0
1
0
2
:
v
i
X
r
a

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS
IS EASY

A. R. BALASUBRAMANIAN, JAVIER ESPARZA, AND MIKHAIL RASKIN

Technische Universit¨at M¨unchen, Munich, Germany
e-mail address: bala.ayikudi@tum.de

Technische Universit¨at M¨unchen, Munich, Germany
e-mail address: esparza@in.tum.de

Technische Universit¨at M¨unchen, Munich, Germany
e-mail address: raskin@in.tum.de

Abstract. In rendez-vous protocols an arbitrarily large number of indistinguishable ﬁnite-
state agents interact in pairs. The cut-oﬀ problem asks if there exists a number B such that
all initial conﬁgurations of the protocol with at least B agents in a given initial state can
reach a ﬁnal conﬁguration with all agents in a given ﬁnal state. In a recent paper [HS20],
Horn and Sangnier prove that the cut-oﬀ problem is equivalent to the Petri net reachability
problem for protocols with a leader, and in EXPSPACE for leaderless protocols. Further,
for the special class of symmetric protocols they reduce these bounds to PSPACE and
NP, respectively. The problem of lowering these upper bounds or ﬁnding matching lower
bounds is left open. We show that the cut-oﬀ problem is P-complete for leaderless protocols,
NP-complete for symmetric protocols with a leader, and in NC for leaderless symmetric
protocols, thereby solving all the problems left open in [HS20]. Further, we also consider a
variant of the cut-oﬀ problem suggested in [HS20] and prove that that variant is P-complete
for leaderless protocols and NL-complete for leaderless symmetric protocols.

1. Introduction

Distributed systems are often designed for an unbounded number of participant agents.
Therefore, they are not just one system, but an inﬁnite family of systems, one for each
number of agents. Parameterized veriﬁcation addresses the problem of checking that all
systems in the family satisfy a given speciﬁcation.

In many application areas, agents are indistinguishable. This is the case in compu-
tational biology, where cells or molecules have no identities; in some security applications,
where the agents’ identities should stay private; or in applications where the identities can be
abstracted away, like certain classes of multithreaded programs [GS92, AAD+06, SCWB08,
BMWK09, KKW10, NB15]. Following [BMWK09, KKW10], we use the term replicated
systems for distributed systems with indistinguishable agents. Replicated systems include
population protocols, broadcast protocols, threshold automata, and many other models
[GS92, AAD+06, EFM99, DSTZ12, GKS+14]. They also arise after applying a counter

Key words and phrases: rendez-vous protocols, cut-oﬀ problem, Petri nets.

Preprint submitted to
Logical Methods in Computer Science

© Balasubramanian, Esparza, and Raskin
CC(cid:13) Creative Commons

 
 
 
 
 
 
2

BALASUBRAMANIAN, ESPARZA, AND RASKIN

abstraction [PXZ02, BMWK09]. In ﬁnite-state replicated systems the global state of the
system is determined by the function (usually called a conﬁguration) that assigns to each
state the number of agents that currently occupy it. This feature makes many veriﬁcation
problems decidable [BJK+15, Esp16].

Surprisingly, there is no a priori relation between the complexity of a parameterized
veriﬁcation question (i.e., whether a given property holds for all initial conﬁgurations, or,
equivalently, whether its negation holds for some conﬁguration), and the complexity of
its corresponding single-instance question (whether the property holds for a ﬁxed initial
conﬁguration). Consider replicated systems where agents interact in pairs [GS92, HS20,
AAD+06]. The complexity of single-instance questions is very robust.
Indeed, checking
most properties, including all properties expressible in LTL and CTL, is PSPACE-complete
[Esp96]. On the contrary, the complexity of parameterized questions is very fragile, as
exempliﬁed by the following example. While the existence of a reachable conﬁguration that
populates a given state with at least one agent is in P, and so well below PSPACE, the
existence of a reachable conﬁguration that populates a given state with exactly one agent
is as hard as the reachability problem for Petri nets, and so non-elementary [CLL+19].
This fragility makes the analysis of parameterized questions very interesting, but also much
harder.

Work on parameterized veriﬁcation has concentrated on whether every initial conﬁgu-
ration satisﬁes a given property (see e.g.
[GS92, EFM99, BMWK09, KKW10, DSTZ12]).
However, applications often lead to questions of the form “do all initial conﬁgurations in
a given set satisfy the property?”, “do inﬁnitely many initial conﬁgurations satisfy the
property?”, or “do all but ﬁnitely many initial conﬁgurations satisfy the property?”. An
example of the ﬁrst kind is proving correctness of population protocols, where the speciﬁ-
cation requires that for a given partition I0, I1 of the set of initial conﬁgurations, and a
partition Q0, Q1 of the set of states, runs starting from I0 eventually trap all agents within
Q0, and similarly for I1 and Q1 [EGLM17]. An example of the third kind is the existence
of cut-oﬀs; cut-oﬀ properties state the existence of an initial conﬁguration such that for all
larger initial conﬁgurations some given property holds [EK02, BJK+15]. A systematic study
of the complexity of these questions is still out of reach, but ﬁrst results are appearing. In
particular, Horn and Sangnier have recently studied the complexity of the cut-oﬀ problem
for parameterized rendez-vous networks [HS20]. The problem takes as input a network with
one single initial state init and one single ﬁnal state ﬁn, and asks whether there exists a
cut-oﬀ B such that for every number of agents n ≥ B, the ﬁnal conﬁguration in which all
agents are in state ﬁn is reachable from the initial conﬁguration in which all agents are in
state init.

Horn and Sangnier study two versions of the cut-oﬀ problem, for leaderless networks
and networks with a leader. Intuitively, a leader is a distinguished agent with its own set of
states. They show that in the presence of a leader the cut-oﬀ problem and the reachability
problem for Petri nets problems are inter-reducible, which shows that the cut-oﬀ problem
is in the Ackermannian complexity class Fω [LS19], and non-elementary [CLL+19]. For the
leaderless case, they show that the problem is in EXPSPACE. Further, they also consider the
special case of symmetric networks, for which they obtain better upper bounds: PSPACE
for the case of a leader, and NP in the leaderless case. These results are summarized at the
top of Table 1.

In [HS20] the question of improving the upper bounds or ﬁnding matching lower bounds
is left open. In this paper we close it with a surprising answer: All elementary upper bounds

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

3

Horn and Sangnier
Presence of a leader
Absence of a leader

Asymmetric rendez-vous
Decidable and non-elementary
EXPSPACE

Symmetric rendez-vous
PSPACE
NP

This paper
Presence of a leader
Absence of a leader

Asymmetric rendez-vous
Decidable and non-elementary
P-complete

Symmetric rendez-vous
NP-complete
NC

Table 1: Summary of the results by Horn and Sangnier and the results of this paper.

of [HS20] can be dramatically improved.
In particular, our main result shows that the
EXPSPACE bound for the leaderless case can be brought down to P. Further, the PSPACE
and NP bounds of the symmetric case can be lowered to NP and NC, respectively, as shown
at the bottom of Table 1. We also obtain matching lower bounds. Finally, we provide
almost tight upper bounds for the size of the cut-oﬀ B; more precisely, we show that if B
exists, then B ∈ 2nO(1)

for a protocol of size n.

Our results follow from two lemmas, called the Scaling and Insertion Lemmas, that
connect the continuous semantics for Petri nets to their standard semantics. In the contin-
uous semantics of Petri nets transition ﬁrings can be scaled by a positive rational factor; for
example, a transition can ﬁre with factor 1/3, taking “1/3 of a token” from its input places.
The continuous semantics is a relaxation of the standard one, and its associated reachability
problem is much simpler (polynomial instead of non-elementary [FH15, CLL+19, Blo20]).
The Scaling Lemma1 states that given two markings M, M ′ of a Petri net, if M ′ is reach-
able from M in the continuous semantics, then nM ′ is reachable from nM in the standard
semantics for some n ∈ 2mO(1)
, where m is the total size of the net and the markings. The
Insertion Lemma states that, given four markings M, M ′, L, L′, if M ′ is reachable from M
in the continuous semantics and the marking equation L′ = L + Ax has a solution x ∈ ZT
(observe that x can have negative components), then nM ′ + L′ is reachable from nM + L
in the standard semantics for some n ∈ 2mO(1)
. We think that these lemmas can be of
independent interest.

Finally we also consider the following question which was proposed in [HS20] as a
variant of the cut-oﬀ problem: Given a network with initial state init and ﬁnal state ﬁn,
decide if there is a bound B such that for any number of agents, the initial conﬁguration in
which all agents are in the state init can reach a conﬁguration in which at most B agents
are not in the ﬁnal state ﬁn. We call this the bounded-loss cut-oﬀ problem. Intuitively, in
the cut-oﬀ problem, we ask if for any suﬃciently large population size, all agents can be
transferred from the state init to the state ﬁn. In the bounded-loss cut-oﬀ problem, we ask
if it is always possible to “leave out” a bounded number of agents, and transfer everybody
else from the state init to the state ﬁn. By adapting the techniques developed for the
cut-oﬀ problem, we prove that the bounded-loss cut-oﬀ problem is P-complete for leaderless
networks and NL-complete for symmetric leaderless networks.

This paper is an extended version of the conference paper [BER21] published at FoS-
SaCS 2021. Compared to the conference version, this paper contains full proofs of our
results. Moreover all the results pertaining to the bounded-loss cut-oﬀ problem are new.

1Heavily based on previous results by Fraca and Haddad [FH15].

4

BALASUBRAMANIAN, ESPARZA, AND RASKIN

The paper is organized as follows. Section 2 contains preliminaries; in particular, it
deﬁnes the cut-oﬀ problem for rendez-vous networks and reduces it to the cut-oﬀ problem
for Petri nets. Section 3 gives a polynomial time algorithm for the leaderless cut-oﬀ problem
for acyclic Petri nets. Section 4 introduces the Scaling and Insertion Lemmas, and Section 5
presents the novel polynomial time algorithm for the cut-oﬀ problem. Section 6 presents the
polynomial time algorithm for the bounded-loss cut-oﬀ problem. Sections 7 and 8 present
the results for symmetric networks, for the cases with and without leaders, respectively.

2. Preliminaries

Multisets. Let E be a ﬁnite set. For a semi-ring S, a vector from E to S is a function
v : E → S. The set of all vectors from E to S will be denoted by SE. In this paper, the
semi-rings we will be concerned with are the natural numbers N, the integers Z and the
non-negative rationals Q≥0. The support of a vector v is the set JvK := {e : M (e) 6= 0} and
its size is the number kvk = Pe∈JM K abs(M (e)) where abs(x) denotes the absolute value
of x. Vectors from E to N are also called discrete multisets (or just multisets) and vectors
from E to Q≥0 are called continuous multisets.

Given a multiset M and a number α we let α · M be the multiset given by (α · M )(e) =
M (e)·α for all e ∈ E. Given two multisets M and M ′ we say that M ≤ M ′ if M (e) ≤ M ′(e)
for all e ∈ E and we let M + M ′ be the multiset given by (M + M ′)(e) = M (e) + M ′(e) and
if M ≤ M ′, we let M − M ′ be the multiset given by (M − M ′)(e) = M (e) − M ′(e). The
empty multiset is denoted by 0. We sometimes denote multisets using a set-like notation,
e.g. Ha, 2 · b, cI denotes the multiset given by M (a) = 1, M (b) = 2, M (c) = 1 and M (e) = 0
for all e /∈ {a, b, c}.

Given a I × J matrix A with I and J sets of indices, I ′ ⊆ I and J ′ ⊆ J, we let AI ′×J ′

denote the restriction of M to rows indexed by I ′ and columns indexed by J ′.

Rendez-vous protocols and the cut-oﬀ problem. Let Σ be a ﬁxed ﬁnite set which we will call
the communication alphabet and we let RV (Σ) = {!a, ?a : a ∈ Σ}. The symbol !a denotes
that the message a is sent and ?a denotes that the message a is received.

Deﬁnition 2.1. A rendez-vous protocol P is a tuple (Q, Σ, init, ﬁn, R) where Q is a ﬁnite
set of states, Σ is the communication alphabet, init, ﬁn ∈ Q are the initial and ﬁnal states
respectively and R ⊆ Q × RV (Σ) × Q is the set of rules.

The size |P| of a protocol is deﬁned as the number of bits needed to encode P in {0, 1}∗
using some standard encoding. A conﬁguration C of P is a multiset of states, where C(q)
should be interpreted as the number of agents in state q. We use C(P) to denote the set
of all conﬁgurations of P. An initial (ﬁnal) conﬁguration C is a conﬁguration such that
C(q) = 0 if q 6= init (resp. C(q) = 0 if q 6= ﬁn. We use C n
ﬁn ) to denote the initial
init (init) = n (resp. C n
(resp. ﬁnal) conﬁguration such that C n

init (C n
ﬁn(ﬁn) = n).

The operational semantics of a rendez-vous protocol P is given by means of a transition
system between the conﬁgurations of P. We say that there is a transition between C and C ′,
denoted by C ⇒ C ′ iﬀ there exists a ∈ Σ, p, q, p′, q′ ∈ Q such that (p, !a, p′), (q, ?a, q′) ∈ R,
∗
C ≥ Hp, qI and C ′ = C − Hp, qI + Hp′, q′I. As usual,
=⇒ denotes the reﬂexive and transitive
closure of ⇒.

The cut-oﬀ problem for rendez-vous protocols, as deﬁned in [HS20], is:

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

5

Given: A rendez-vous protocol P
Decide:

Is there B ∈ N such that C n

init

∗
=⇒ C n

ﬁn for every n ≥ B ?

If such a B exists then we say that P admits a cut-oﬀ and that B is a cut-oﬀ for P.

Petri nets. Rendez-vous protocols can be seen as a special class of Petri nets.

Deﬁnition 2.2. A Petri net is a tuple N = (P, T, Pre, Post ) where P is a ﬁnite set of
places, T is a ﬁnite set of transitions, Pre and Post are matrices whose rows and columns
are indexed by P and T respectively and whose entries belong to N. The incidence matrix
A of N is deﬁned to be the P × T matrix given by A = Post − Pre. Further by the weight
of N , we mean the largest absolute value appearing in the matrices Pre and Post.

The size |N | of a N is deﬁned as the number of bits needed to encode N in {0, 1}∗
t = {p : Pre[p, t] > 0} and
using some suitable encoding. For a transition t ∈ T we let
•
t
= {p : Post[p, t] > 0}. We extend this notation to set of transitions in the obvious way.
Given a Petri net N , we can associate with it a graph where the vertices are P ∪ T and the
}. A Petri net N is called acyclic if its associated
edges are {(p, t) : p ∈
graph is acyclic.

t} ∪ {(t, p) : p ∈ t

•

•

•

A marking of a Petri net is a multiset M ∈ NP , which intuitively denotes the number
of tokens that are present in every place of the net. For t ∈ T and markings M and M ′,
t
−→ M ′, if for every place p,
we say that M ′ is reached from M by ﬁring t, denoted M
M (p) ≥ Pre[p, t] and M ′(p) = M (p) + A[p, t].

A ﬁring sequence is any sequence of transitions σ = t1, t2, . . . , tk ∈ T ∗. The support of
σ, denoted by JσK, is the set of all transitions which appear in σ. We let σσ′ denote the
concatentation of two sequences σ, σ′.

Given a ﬁring sequence σ = t1, t2, . . . , tk ∈ T ∗, we let M
t1−→ M1
M1, . . . , Mk−1 such that M
that there exists t ∈ T such that M
M

σ
−→ M ′.
In the following, we will use the notation M

t2−→ M2 . . . Mk−1
t
−→ M ′, and M

σ
−→ (resp.
−→ M ′ (resp. M ′ σ
σ
−→ M ).

exists a marking M ′ such that M

σ
−→ M ′ denote that there exist
tk−→ M ′. Further, M → M ′ denotes
∗
−→ M ′ if there exists σ ∈ T ∗ such that

σ
−→ M ) to denote that there

Marking equation of a Petri net system. A Petri net system is a triple (N , M, M ′)
where N is a Petri net and M 6= M ′ are markings. The marking equation for (N , M, M ′)
is the equation

M ′ = M + Av
−→ M ′ implies M ′ = M + A−→σ , where −→σ ∈ NT
σ
over the variables v. It is well known that M
is the the Parikh image of σ, deﬁned as the vector whose component −→σ [t] for transition t is
−→ M ′ then −→σ is a nonnegative
σ
equal to the number of times t appears in σ. Therefore, if M
integer solution of the marking equation. The converse does not hold.

From rendez-vous protocols to Petri nets. Let P = (Q, Σ, init, ﬁn, R) be a rendez-vous
protocol. Create a Petri net NP = (P, T, Pre, Post) as follows. The set of places is Q. For
each alphabet a ∈ Σ and for each pair of rules r = (q, !a, s), r′ = (q′, ?a, s′) ∈ R, add a
transition tr,r′ to NP and set
• Pre[p, t] = 0 for every p /∈ {q, q′}, Post [p, t] = 0 for every p /∈ {s, s′}

6

BALASUBRAMANIAN, ESPARZA, AND RASKIN

• If q = q′ then Pre[q, t] = −2, otherwise Pre[q, t] = Pre[q′, t] = −1
• If s = s′ then Post[s, t] = 2, otherwise Post [s, t] = Post[s′, t] = 1.

It is clear that any conﬁguration of a protocol P is also a marking of NP, and vice

versa. Further, the following proposition is obvious.

Proposition 2.3. For any two conﬁgurations C and C ′ we have that C

∗
=⇒ C ′ over the

protocol P iﬀ C

∗
−→ C ′ over the Petri net NP.

Consequently, the cut-oﬀ problem for Petri nets, deﬁned by

Given : A Petri net system (N , M, M ′)
Is there B ∈ N such that n · M
Decide:

∗
−→ n · M ′ for every n ≥ B ?

generalizes the problem for rendez-vous protocols.

Our main result in this paper is the following:

Theorem 2.4. The cut-oﬀ problem for Petri nets is decidable in polynomial time.

As a consequence we easily get that,

Corollary 2.5. The cut-oﬀ problem for rendez-vous protocols is decidable in polynomial
time.

3. The cut-off problem for acyclic Petri nets

We show that the cut-oﬀ problem for acyclic Petri nets can be solved in polynomial time.
The reason for considering this special case ﬁrst is that it illustrates one of the main ideas
of the general case in a very pure form.

Let us ﬁx a Petri net system (N , M, M ′) for the rest of this section, where N =
(P, T, P re, P ost) is acyclic and A is its incidence matrix. It is well-known that in acyclic
Petri nets the reachability relation is characterized by the marking equation (see e.g. [Mur89]):
Proposition 3.1 (Theorem 16 of [Mur89]). Let (N , M, M ′) be an acyclic Petri net system.
−→ M ′ iff −→σ is a solution of the marking equation.
σ
For every sequence σ ∈ T ∗, we have M
∗
−→ M ′ iff the marking equation has a nonnegative integer solution.
Consequently, M

This proposition shows that the reachability problem for acyclic Petri nets reduces to
the feasibilty problem (i.e., existence of solutions) of systems of linear diophantine equations
over the nonnegative integers. So the reachability problem for acyclic Petri nets is in NP,
and in fact both the reachability and the feasibility problems are NP-complete [EN94].

There are two ways to relax the conditions on the solution so as to make the feasibility
problem polynomial. Feasibility over the nonnegative rationals and feasibility over all inte-
gers are both in P. The ﬁrst is due to the polynomiality of linear programming. For the
second, feasibility can be decided in polynomial time after computing the Smith or Hermite
normal forms (see e.g.
[PZ89]), which can themselves be computed in polynomial time
[KB79]. We show that the cut-oﬀ problem can be reduced to these two relaxed problems.

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

7

3.1. Characterizing acyclic systems with cut-oﬀs. Horn and Sangnier proved in [HS20]
a very useful charaterization of the rendez-vous protocols with a cut-oﬀ: A rendez-vous pro-
∗
=⇒ C n+1
tocol P admits a cut-oﬀ iff there exists n ∈ N such that C n
The proof immediately generalizes to the case of Petri nets:
Lemma 3.2 (Lemma 23 of [HS20]). A Petri net system (N , M, M ′) (acyclic or not) admits
∗
−→ (n + 1) · M ′.
a cut-oﬀ iﬀ there exists n ∈ N such that n · M
∗
−→ (n + 1) · M ′, then n2 is a cut-oﬀ for the
Moreover if n · M
system.

∗
−→ n · M ′ and (n + 1) · M

∗
−→ n · M ′ and (n + 1) · M

ﬁn and C n+1
init

∗
=⇒ C n

init

ﬁn

∗
−→ nM ′. Notice that if kM

Using this lemma, we characterize those acyclic Petri net systems which admit a cut-oﬀ.
Theorem 3.3. An acyclic Petri net system (N , M, M ′) admits a cut-oﬀ iff the marking
equation has solutions x ∈ QT
≥0 and y ∈ ZT such that JyK ⊆ JxK.
Proof. (⇒): Suppose (N , M, M ′) admits a cut-oﬀ. Hence there exists B ∈ N such that
σ′
−→ lM ′ for some
for all n ≥ B we have nM
σσ′
−−→ (k + l)M ′. So there exists n ∈ N and ﬁring sequences σ, σ′
k, l ∈ N, then (k + l)M
σ′
−→ (n + 1)M ′ and Jσ′K ⊆ JσK. By Lemma 3.1 there exist
such that nM
x′, y′ ∈ NT such that Jy′K ⊆ Jx′K, nM ′ = nM + Ax′ and (n + 1)M ′ = (n + 1)M + Ay′.
Letting x = x′/n and y = y′ − x′, we get our required vectors.
(⇐): Suppose x ∈ QT
≥0 and y ∈ ZT are solutions of the marking equation such that
JyK ⊆ JxK. Let µ be the least common multiple of the denominators of the components of
x, and let α be the largest absolute value of the numbers in the vector y. By deﬁnition of µ
we have α(µx) ∈ NT . Also, since JyK ⊆ JxK it follows by deﬁnition of α that α(µx) + y ≥ 0
and hence α(µx) + y ∈ NT . Since M ′ = M + Ax and M ′ = M + Ay we get
and

(αµ + 1)M ′ = (αµ + 1)M + A(αµx + y)

αµM ′ = αµM + A(αµx)

σ
−→ nM ′, (n + 1)M

σ
−→ kM ′ and lM

Taking αµ = n, by Lemma 3.1 we get that nM
Lemma 3.2, (N , M, M ′) admits a cut-oﬀ.

∗
−→ nM ′ and (n + 1)M

∗
−→ (n + 1)M ′. By

2

i

2

t3

t1

t2

2

f

t4

2

Figure 1: A net with cut-oﬀ 2.

Intuitively, the existence of the rational solution x ∈ QT

∗
−→ nM ′ for
inﬁnitely many n, and the existence of the integer solution y ∈ ZT guarantees that for one
of those n we have (n + 1)M

∗
−→ (n + 1)M ′ as well.

≥0 guarantees nM

Example 3.4. The net system given by the net on Figure 1 along with the markings
M = HiI and M ′ = Hf I admits a cut-oﬀ. The conditions of the theorem are satisﬁed by
x = ( 1

5 ) and y = (−1, 1, 1, 1).

5 , 1

5 , 1

5 , 1

8

BALASUBRAMANIAN, ESPARZA, AND RASKIN

3.2. Polynomial time algorithm. We derive a polynomial time algorithm for the cut-oﬀ
problem from the characterization of Theorem 3.3. The ﬁrst step is the following lemma. A
very similar lemma is proved in [FH15], but since the proof is short we give it for the sake
of completeness:
Lemma 3.5.
maximum support. Moreover, such a solution can be found in polynomial time.
≥0 are solutions of the marking equation, then we have M ′ = M + A((y +
Proof. If y, z ∈ QT
z)/2) and JyK ∪ JzK ⊆ J(y + z)/2K. Hence if the marking equation if feasible over Q≥0, then
it has a solution with maximum support.

If the marking equation is feasible over Q≥0, then it has a solution with

To ﬁnd such a solution in polynomial time we proceed as follows. For every transition
t we solve the linear program M ′ = M + Av, v ≥ 0, vt > 0. (Recall that solving linear
programs over the rationals can be done in polynomial time). Let {t1, . . . , tn} be the set of
transitions whose associated linear programs are feasible over QT
≥0, and let {u1, . . . , un} be
n
i=1 ui is a solution of the marking equation with
solutions to these programs. Then 1/n · P
maximum support.

We now have all the ingredients to give a polynomial time algorithm.

Theorem 3.6. The cut-oﬀ problem for acyclic net systems can be solved in polynomial
time.

Proof. First, we check that the marking equation has a solution over the non-negative
rationals. If such a solution does not exist, by Theorem 3.3 the given net system does not
admit a cut-oﬀ.

Suppose such a solution exists. By Lemma 3.5 we can ﬁnd a non-negative rational
solution x with maximum support in polynomial time. Let U contain all the transitions t
such that xt = 0. We now check in polynoial time if the marking equation has a solution y
over ZT such that yt = 0 for every t ∈ U . By Theorem 3.3 the such a solution exists iff the
net system admits a cut-oﬀ.

4. The Scaling and Insertion lemmas

Similar to the case of acyclic net systems, we would like to provide a characterization of net
systems admitting a cut-oﬀ and then use this characterization to derive a polynomial time
algorithm. Unfortunately, in general net systems there is no characterization of reachability
akin to Lemma 3.1 for acyclic systems. To this end, we prove two intermediate lemmas to
help us come up with a characterization for cut-oﬀ admissible net systems in the general
case. We believe that these two lemmas could be of independent interest in their own right.
Further, the proofs of both the lemmas are provided so that it will enable us later on to
derive a bound on the cut-oﬀ for net systems.

4.1. The Scaling Lemma. The Scaling Lemma shows that, given a Petri net system
∗
−→ nM ′ holds for some n ≥ 1 can be decided in polynomial
(N , M, M ′), whether nM
∗
−→ nM ′ holds for some n, then it holds for some n with at most
time; moreover, if nM
(|N |(log kM k + log kM ′k))O(1) bits. The name of the lemma is due to the fact that the
ﬁring sequence leading from nM to nM ′ is obtained by scaling up a continuous ﬁring
sequence from M to M ′; the existence of the sequence be decided in polynomial time due
to a result by Fraca and Haddad [FH15].

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

9

In the rest of the section we ﬁrst recall continuous Petri nets and the charaterization

of [FH15], and then present the Scaling Lemma2.

M

4.1.1. Reachability in continuous Petri nets. Petri nets can be given a continuous semantics
(see e.g. [AD98, RHS10, FH15]), in which markings are continuous multisets; we call them
continuous markings. A continuous marking M enables a transition t with factor λ ∈ Q≥0
if M (p) ≥ λ · P re[p, t] for every place p; we also say that M enables λt. If M enables λt,
then λt can ﬁre or occur, leading to a new marking M ′ given by M ′(p) = M (p) + λ · A[p, t]
λt
−→Q M ′, and say that M ′ is reached from M by ﬁring
for every p ∈ P . We denote this by M
λt. A continuous ﬁring sequence is any sequence of transitions σ = λ1t1, λ2t2, . . . , λktk ∈
σ
−→Q M ′ denote that there exist continuous markings M1, . . . , Mk−1
(Q≥0 × T )∗. We let M
λktk−−−→ M ′. We can then deﬁne the notations
λ1t1−−−→Q M1
λ2t2−−−→Q M2 · · · Mk−1
σ
σ
−→Q M in a similar manner as before.
−→Q and

such that M
∗
−→Q M ′, M
The Parikh image of σ = λ1t1, λ2t2, . . . , λktk ∈ (Q≥0 × T )∗ is the vector −→σ ∈ QT
≥0
where −→σ [t] = P
k
i=1 δi,tλi, where δi,t = 1 if ti = t and 0 otherwise. The support of σ is the
support of its Parikh image −→σ . If M
−→Q M ′ then −→σ is a solution of the marking equation
over QT
≥0, but the converse does not hold. In [FH15], Fraca and Haddad strengthen this
necessary condition to make it also suﬃcient, and use the resulting characterization to derive
a polynomial algorithm.
Theorem 4.1 (Theorem 20 and Proposition 27 of [FH15]). Let (N , M, M ′) be a Petri net
system.
σ
• M

≥0, and there exist continuous
ﬁring sequences τ , τ ′ and continuous markings L and L′ such that Jτ K = JσK = Jτ ′K,
M

−→Q M ′ iff −→σ is a solution of the marking equation over QT

τ
−→Q L, and L′

τ ′
−→Q M ′.

σ

• It can be decided in polynomial time if M

∗
−→Q M ′ holds.

∗
−→Q M ′. Indeed, if M

∗
−→ nM ′ holds for some n ≥ 1
4.1.2. Scaling. It follows easily from the deﬁnitions that nM
σ
−→Q M ′ for some σ = λ1t1, λ2t2, . . . , λktk ∈ (Q≥0 × T )∗, then
iff M
nσ
−−→Q nM ′ where n is
we can scale this continuous ﬁring sequence to a discrete sequence nM
. . . tnλk
the smallest number such that nλ1, . . . , nλk ∈ N, and nσ = tnλ1
tnλ2
. So Theorem
k
2
∗
−→ nM ′ can be decided
4.1 immediately implies that the existence of n ≥ 1 such that nM
in polynomial time. The following lemma also gives a bound on n.

1

σ
Lemma 4.2. Let (N , M, M ′) be a Petri net system with weight w such that M
−→Q M ′ for
some continuous ﬁring sequence σ ∈ (Q≥0 × T )∗. Let m be the number of transitions in JσK
and let ℓ be k−→σ k. Let k be the smallest natural number such that k−→σ ∈ NT . Then, there
exists a ﬁring sequence τ ∈ T ∗ such that Jτ K = JσK and

(cid:0)16w (w + 1)2mkℓ · M (cid:1)

τ
−→ (cid:0)16w (w + 1)2mkℓ · M ′

(cid:1)

2The lemma is implicitly proved in [FH15], but the bound on the size of n is hidden in the details of the
proof, and we make it explicit.

10

BALASUBRAMANIAN, ESPARZA, AND RASKIN

We shall ﬁrst give an intuitive idea behind the proof of Lemma 4.2. Assume M

σ
−→Q M ′.
For the purpose of studying this ﬁring sequence, we can remove from the net, all transitions
that do not occur in σ, and all places that are neither input nor output places of some
σ
transition of σ. Let N ′ be the resulting net. We show that nM
−→Q nM ′ for a suﬃciently
In a ﬁrst step, we show in Lemma 4.3, that for a suﬃciently large n we can
large n.
ﬁnd markings M1 and M2 that mark every place of N ′ and satisfy the following properties:
∗
−→ nM ′. This reduces the problem to showing that that n′M1 −→ n′M2 holds
nM
for suﬃciently large n′. For this, we apply a folklore lemma showing that if L2 = L1+A(mx)
τ
for some number m and some x ∈ NT , and L1
−→ L2 for some ﬁring sequence τ such
τ m
that −→τ = x, then L1
−−→ L2 where τ m denotes the concatentation of τ with itself m times
(Lemma 4.4). Finally, we show in Lemma 4.3 itself that M1 and M2 can be chosen so that
for suﬃciently large n′, the markings L1 := n′M1 and L2 := n′M2 satisfy the preconditions
of Lemma 4.4.

∗
−→ M1, M2

τ
−→ and

We now proceed to prove Lemmas 4.3 and 4.4 and then we prove Lemma 4.2 using

these two lemmas.

Lemma 4.3. Let M be a marking such that M
the size of JσK and let w be the weight of N . There exists a ﬁring sequence

for some ﬁring sequence σ. Let m be

σ
−→Q

such that Jτ K = JσK, |τ | ≤ 2(w + 1)m and L(p) > 0 for every p ∈ JM K ∪

•

JσK ∪ JσK

•

((w + 1)m · M )

τ
−→ L

Proof. Let t1, t2, . . . , tm be the transitions of JσK, sorted according to the order of their ﬁrst
occurrence in σ. Let β0 = 1, βi = (w + 1)i for every i ∈ {1, . . . , m}, and deﬁne the sequence
τ0 = ǫ
tβi−2
2

τi = tβi−1
1
By the deﬁnition of βi we have |τi| ≤ 2(w + 1)i. We prove for every i ≥ 0 that

· · · tβ0
i

(βi · M )

τi−→ Mi

for some marking Mi such that Mi(p) > 0 for every p ∈ JM K∪
the lemma then follows by taking L := Mm. The proof is by induction on i.

•

•
JτiK∪JτiK

. Since JτmK = JσK,

Basis: i = 0. Then βi = 1 and the result follows from M

ǫ
−→ M .

Induction Step: i ≥ 1. By induction hypothesis,

where Mi−1(p) > 0 for every p ∈ JM K ∪

(βi−1 · M )
•

τi−1−−→ Mi−1
Jτi−1K ∪ Jτi−1K

•

. Since βi = (w + 1)βi−1 we have

(βi · M )

τ (w +1)
i−1−−−−→ ((w + 1) · Mi−1)

Since M

σ
−→Q and ti appears in σ after t1, . . . , ti−1, it follows that every place p ∈

•

at least (w + 1) tokens at the marking (w + 1) · Mi−1. So (w + 1) · Mi−1
marking Mi such that Mi(p) > 0 for every p ∈ JM K ∪
Lemma 4.4. Let (N , M, M ′) be a Petri net system, and let σ be a ﬁring sequence such
−→ M ′, and n−→σ is a solution of the marking equation for some n ≥ 1. Then
σ
that M
M

•
{t1, . . . , ti} ∪ {t1, . . . , ti}

σ
−→,
σn
−→ M ′.

.

•

ti has
ti−→ Mi for some

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

11

Proof. Since n−→σ is a solution of the marking equation, M
σn
−→. We proceed by induction on n.
suﬃces to prove M
σ
−→ and
immediately from M
σ
−→ M ′.
that M
σ
−→ holds. Let σ = t1t2 . . . tm, and let L1, . . . , Lm−1, L′

σ
−→ M ′. Assume n > 2, and let M1, M ′

σn
−→ implies M
If n ≤ 2 then M

σ
−→ M1 and M ′
1

σn
−→ M ′. So it
σn
−→ follows
1 be the markings such

1, . . . , L′

m−1 be

We ﬁrst claim that M1
the markings given by

M ′
1

t1−→ L′

1 · · · L′

t1−→ L1 · · · Lm−1

tm−→ M1

M

and
Further, let σ0 := ǫ and σi := t1 · · · ti for every 1 ≤ i ≤ m, and deﬁne Ki := M1 + A · −→σi.
ti+1−−→ holds for every 1 ≤ i ≤ m, which implies the claim. It suﬃces to
We prove that Ki
ti+1−−→, we have
show that Ki(p) ≥ Pre[p, ti+1] holds for every place p. Since Li
i(p) ≥ Pre[p, ti+1]. Notice that since M ′ = M + A · (n−→σ ), we
Li(p) ≥ Pre[p, ti+1] and L′
i = Li + A · ((n − 1)−→σ ). Let σ[i] be the cyclic permutation of σ starting at ti. By
have L′
−→
σ[i], letting ∆ := A · −→σ ,
the deﬁnition of Ki we have Ki = Li + A ·
we obtain altogether

−→
σ[i]. Since A · −→σ = A ·

ti+1−−→ and L′

m−1

.

i

tm−→ M ′

Li(p)

≥ Pre[p, ti+1]

Ki(p) = Li(p) + ∆(p)
L′

i(p) = Li(p) + (n − 1)∆(p) ≥ Pre[p, ti+1]

This implies Ki(p) ≥ Pre[p, ti+1], and the claim is proved. By the claim we have M1
moreover

σ
−→;
−→ M ′, and (n − 1)−→σ is a solution of the marking equation for (N , M1, M ′). By
σn
−→ M ′.

σn−1
−−−→ M ′, and so M

induction hypothesis M1

σ

We also need the following minor proposition, the proof of which follows by an easy

induction.

Proposition 4.5. Let w be the weight of the net N . Suppose M is a marking and σ is a
ﬁring sequence such that M (p) ≥ w · −→σ (t) for every t ∈ JσK and for every p ∈
t. Then
M

σ
−→.

•

Proof. Very easy induction on Pt∈T

−→σ (t).

Using the above three auxiliary results, we are now ready to prove Lemma 4.2.

Proof of Lemma 4.2. Let β := (w + 1)m and γ := 4w βkℓ. We split the proof into three
parts, by providing the desired ﬁring sequence as a concatenation of three ﬁring sequences
of the form

∗
−→ γL1

∗
−→ γL2

∗
−→ (cid:0)4kβγ · M ′

(cid:1)

(4.1)

for some markings L1 and L2.

(4kβγ · M )

First ﬁring sequence: Since M
a marking M1 such that |τ1| ≤ 2β, Jτ1K = JσK, M1(p) > 0 for all p ∈
(β · M )

σ
−→Q M ′, by Lemma 4.3 there exists a ﬁring sequence τ1 and
and
JσK ∪ JσK
τ1−→ L1. From this it
τ γ
1−→ γL1, thereby completing the ﬁrst part of the run. We

τ1−→ M1. Let L1 = (4k − 1)βM + M1. It is then clear that 4kβM

is once again clear that 4kβγM
note that by construction of L1, we have (γL1)(p) ≥ γ for every p ∈

•
JσK ∪ JσK

.

•

•

•

12

BALASUBRAMANIAN, ESPARZA, AND RASKIN

Third ﬁring sequence: The third part is similar to the ﬁrst part, except that we apply
σ
−→Q M ′ in the Petri net N , it follows that
Lemma 4.3 to the reverse net. Notice that since
M ′ σ−1
in the reverse net N −1 where N −1 := (P, T, Post , Pre) and σ−1 is the reverse of σ.
−−→Q
Using Lemma 4.3, we can get a ﬁring sequence τ ′
2| ≤ 2β,
τ ′
2−→ M2 in the reverse net N −1.
Jτ ′
Let L2 = (4k − 1)βM ′ + M2. By the same argument as the ﬁrst part, we can conclude that
τ γ
4kβγM ′ τ
2−−→ γL2 in the reverse net N −1. Letting τ2 := τ ′−1
2−→ 4kβγM ′.
.
We note that by construction of L2, we have (γL2)(p) ≥ γ for every p ∈

2 and a marking M2 such that |τ ′

2K = JσK, M2(p) > 0 for all p ∈

2 we get that γL2

and (β · M ′)

•
JσK ∪ JσK

JσK ∪ JσK

′γ

•

•

•

Second ﬁring sequence: By construction of τ1 and τ2 we have that |τ1|, |τ2| ≤ 2β. It follows
then that k−→τ1 k + k−→τ2 k ≤ 4β. Once again by construction of τ1 and τ2 we have that Jτ1K =
Jτ2K = JσK. Further by construction of the number k, it follows that all the non-zero
components of 4kβ−→σ are at least 4β. Hence, if we deﬁne
v := 4βk−→σ − (−→τ 1 + −→τ 2)

(4.2)

then v is a non-negative integer vector.

Let τ3 be any ﬁring sequence such that −→τ3 = v. We claim that γL1

τ3−→ γL2 and
γL2 = γL1 + A · (γ · v). Notice that if this claim is true, then by Lemma 4.4 we have that
τ γ
3−→ γL2 and then the second part of equation 4.1 will also be done, thereby making

τ3−→,

γL1
the proof complete.

All that is left to prove are the three claims. As remarked at the end of the ﬁrst part
. Since −→τ3 = v, by
of the construction, notice that (γL1)(p) ≥ γ for every p ∈
equation 4.2, notice that Jτ3K ⊆ JσK and w · k−→τ3 k ≤ w · 4βk · k−→σ k = w · 4βkℓ = γ. Hence it
follows that (γL1)(p) ≥ w k−→τ3 k for every p ∈
. Applying proposition 4.5, we get
that γL1

•
JσK ∪ JσK

Jτ3K ∪ Jτ3K

τ1−→.

•

•

•

−1

τ
2−−→ in the

By the same argument applied to the reverse net N −1, we can get that γL2

reverse net N −1, hence leading to

τ2−→ γL2.

Finally, notice that

L2 = 4kβ · M ′ − A · −→τ2

= 4βk · M + A · 4βk · −→σ − A · −→τ2
= L1 − A · −→τ1 + A · 4βk · −→σ − A · −→τ2
= L1 + A · (4βk · −→σ − (−→τ1 + −→τ2 ))
= L1 + A · v

(L2

τ2−→ 4kβ · M ′)
σ
−→Q M ′)
(M
τ1−→ L1)
(4kβ · M

(Equation 4.2)

and so γ · L2 = γ · L1 + A · (γ · v). Since all the three claims have been proven, the proof is
now complete and we have established the desired run.

We can now prove our main result of this subsection, namely the Scaling Lemma.
σ
−→Q M ′.

Lemma 4.6. (Scaling Lemma). Let (N , M, M ′) be a Petri net system such that M
There exists a number n with a polynomial number of bits in |N |(log kM k + log kM ′k) such
that nM

τ
−→ nM ′ for some τ with Jτ K = JσK.

σ
−→
Q

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

13

σ′
−→
Q

M ′ for some σ′. By ([BFHH17], Proposition 3.2), there is a formula
Proof. Suppose M
φ(M, M ′, v) in the existential theory of linear rational arithmetic whose size is linear in
the size of the net N such that φ(M, M ′, x) is true iﬀ there exists σ such that −→σ = x and
M ′. By ([Son85], Lemma 3.2) if a formula in the existential theory of linear rational
M

σ
−→
Q

arithmetic is satisﬁable, then it is satisﬁable by a solution which can be described using
a polynomial number of bits in the size of the formula. Hence, if there is a solution to
φ(M, M ′, v), then there is a solution which can be described using a polynomial number
of bits in |N |(log kM k + log kM ′k). Combining all this, we get that there is a σ such that
the numerator and denominator of every entry of −→σ can be described using (|N |(log kM k +
log kM ′k))O(1) bits and M

M ′.

Notice that the smallest natural number k such that k · −→σ ∈ NT is at most the least
common multiple of the denominators of all the numbers in the vector −→σ . Since the size
of JσK is at most the number of transitions of N , if we let w be the weight of the net N ,
then it is easy to verify that the quantities (w + 1)JσK, k−→σ k and k can all be described using
(|N |(log kM k + log kM ′k))O(1) bits.

Applying Lemma 4.2 we now get that there exists n with a polynomial number of bits
∗
−→ nM ′.

in |N |(log kM k + log kM ′k) such that nM

4.2. The Insertion Lemma. In the acyclic case, the existence of a cut-oﬀ is characterized
by the existence of solutions to the marking equation over QT
≥0 and ZT . Intuitively, in the
general case we replace the existence of solutions over QT
≥0 by the conditions of the Scaling
Lemma, and the existence of solutions over ZT by the Insertion Lemma:

σ
−→ M ′
Lemma 4.7. (Insertion Lemma). Let M, M ′, L, L′ be markings of N satisfying M
∗
for some σ ∈ T ∗ and L′ = L + Ay for some y ∈ ZT such that JyK ⊆ JσK. Then µM + L
−→
µM ′ + L′ for µ = kyk(k−→σ knw + nw + 1) , where w is the weight of N , and n is the number
of places in

JσK.

•

•

Proof idea. The idea of the proof is a follows: In a ﬁrst stage, we asynchronously execute
multiple “copies” of the ﬁring sequence σ from multiple “copies” of the marking M , until
we reach a marking at which all places of
JσK contain a suﬃciently large number of tokens.
At this point we temporarily interrupt the executions of the copies of σ to insert a ﬁring
sequence with Parikh mapping kyk−→σ +y. The net eﬀect of this sequence is to transfer some
copies of M to M ′, leaving the other copies untouched, and exactly one copy of L to L′. In
the third stage, we resume the interrupted executions of the copies of σ, which completes
the transfer of the remaining copies of M to M ′ .
Proof. Let x be the Parikh image of σ, i.e., x = −→σ . Since M
equation we have M ′ = M + Ax
First stage: Let λx = kxk, λy = kyk and µ = λy(λxnw + nw + 1). Let σ := r1, r2, . . . , rk
r2−→ M2 . . . Mk−1
and let M =: M0
JσK,
there exists a marking Mip ∈ {M0, . . . , Mk−1} such that Mip(p) > 0.

rk−→ Mk := M . Notice that for each place p ∈

σ
−→ M ′, by the marking

r1−→ M1

•

Since each of the markings in {Mip}p∈•

JσK can be obtained from M by ﬁring a (suitable)
preﬁx of σ, it is easy to see that from the marking µM +L = λyM +L+(λxλynw +λynw )M

14

BALASUBRAMANIAN, ESPARZA, AND RASKIN

we can reach the marking First := λyM + L + Pp∈•
our ﬁrst stage.

JσK(λxλyw + λyw )Mip. This completes

Second stage - Insert:
Since JyK ⊆ JσK, if y(t) 6= 0 then x(t) 6= 0. Since x(t) ≥ 0 for
every transition, it now follows that (λyx+y)(t) ≥ 0 for every transition t and (λyx+y)(t) >
0 precisely for those transitions in JσK.

−→
ξ = λyx + y. Notice that for every place
Let ξ be any ﬁring sequence such that
•
JσK, First(p) ≥ λxλyw + λyw ≥ k(λyx + y)k · w . By an easy induction on kξk, it
−→ Second for some marking Second. By the marking equation, it
JσK(λxλyw + λyw )Mip. This completes our second

p ∈
follows that that First ξ
follows that Second = λyM ′ + L′ + Pp∈•
stage.

Third stage: Notice that for each place p ∈
JσK, by construction of Mip, there is a ﬁring
sequence which takes the marking Mip to the marking M ′. It then follows that there is a
ﬁring sequence which takes the marking Second to the marking λyM ′+L′+Pp∈•
JσK(λxλyw +
λyw )M ′ = µM ′ + L′. This completes our third stage and also completes the desired ﬁring
sequence from µM + L to µM ′ + L′.

•

5. Polynomial time algorithm for the general case
Let (N , M, M ′) be a net system with N = (P, T, P re, P ost), such that A is its incidence
matrix. As in Section 3, we ﬁrst characterize the Petri net systems that admit a cut-oﬀ,
and then provide a polynomial time algorithm.

5.1. Characterizing systems with cut-oﬀs. We generalize the characterization of The-
orem 3.3 for acyclic Petri net systems to general systems.
σ
Theorem 5.1. A Petri net system (N , M, M ′) admits a cut-oﬀ iﬀ M
−→Q M ′ for some
rational ﬁring sequence σ and the marking equation has a solution y ∈ ZT such that JyK ⊆
JσK.
Proof. (⇒): Assume (N , M, M ′) admits a cut-oﬀ. Hence there exists B ∈ N such that for
τ ′
−→ lM ′ for some k, l ∈ N,
all n ≥ B we have nM
τ τ ′
−−→ (k + l)M ′. So there exist n ∈ N and ﬁring sequences τ, τ ′ such that

∗
−→ nM ′. Notice that if kM

τ
−→ kM ′ and lM

then (k + l)M

nM

τ ′
−→ (n + 1)M ′ and Jτ ′K ⊆ Jτ K.

τ
−→ nM ′, we can easily conclude by induction on k that M

τ
−→ nM ′, (n + 1)M
Let τ = t1t2 · · · tk. Construct the rational ﬁring sequence σ := t1/n t2/n · · · tk/n. From
σ
−→Q M ′. Further,
−→
τ ′ . Let
−→
τ ′ − −→τ . Then y ∈ ZT and M ′ = M + Ay. Further, since Jτ ′K ⊆ Jτ K = JσK, we have

the fact that nM
by the marking equation we have nM ′ = nM + A−→τ and (n + 1)M ′ = (n + 1)M + A
y =
JyK ⊆ JσK.
(⇐): Assume there exists a rational ﬁring sequence σ and a vector y ∈ ZT such that
σ
−→Q M ′ and M ′ = M + Ay. Let s = |N |(log kM k + log kM ′k). It is well
JyK ⊆ JσK, M
known that if a system of linear equations over the integers is feasible, then there is a
solution which can be described using a number of bits which is polynomial in the size of
the input (see e.g. [KM78]). Hence, we can assume that kyk can be described using sO(1)
bits.

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

15

By Lemma 4.6 there exists n (which can be described using sO(1) bits) and a ﬁring
∗
−→ knM ′ is also possible for
sequence τ with Jτ K = JσK such that nM
any k ∈ N. By Lemma 4.7, there exists µ (which can once again be described using sO(1)
∗
−→ µnM ′ + M ′ is possible. By Lemma 3.2 the system (N , M, M ′)
bits) such that µnM + M
admits a cut-oﬀ with a polynomial number of bits in s.

τ
−→ nM ′. Hence knM

Notice that we have actually proved that if a net system admits a cut-oﬀ then it
admits a cut-oﬀ with a polynomial number of bits in its size. Since the cut-oﬀ problem
for a rendez-vous protocol P can be reduced to a cut-oﬀ problem for the Petri net system
(NP , Hinit I, HﬁnI), it follows that,
Corollary 5.2. If the system (N , M, M ′) admits a cut-oﬀ then it admits a cut-oﬀ with a
polynomial number of bits in |N |(log kM k + log kM ′k). Hence, if a rendez-vous protocol P
admits a cut-oﬀ then it admits a cut-oﬀ which is at most 2nO(1)

where n is the size of P.

It is already known from ([HS20], Section 6.3) that there are protocols whose smallest
cut-oﬀ is at least exponential in the size of the protocol. Hence, the above corollary gives
almost tight bounds on the smallest cut-oﬀ of a protocol.

5.2. Polynomial time algorithm. We use the characterization given in the previous sec-
tion to provide a polynomial time algorithm for the cut-oﬀ problem. The following lemma,
which was proved in [FH15], enables us to ﬁnd a ﬁring sequence between two markings with
maximum support.

Lemma 5.3. (Lemma 12 and Proposition 26 of [FH15]) Among all the rational ﬁring
σ
−→Q M ′, there is one with maximum support. Moreover, the
sequences σ such that M
support of such a ﬁring sequence can be found in polynomial time.

We now have all the ingredients to prove the existence of a polynomial time algorithm.

Theorem 5.4. The cut-oﬀ problem for net systems can be solved in polynomial time.

σ
−→Q M ′, which can
Proof. First, we check that there is a rational ﬁring sequence σ with M
be done in polynomial time by ([FH15], Propostion 27). If such a sequence does not exist,
by Theorem 5.1 the given net system does not admit a cut-oﬀ.

Suppose such a sequence exists. By Lemma 5.3 we can ﬁnd in polynomial time, the
τ
−→Q M ′. We now check in
maximum support S of all the ﬁring sequences τ such that M
polynomial time if the marking equation has a solution y over ZT such that yt = 0 for every
t /∈ S. By Theorem 5.1 such a solution exists iff the net system admits a cut-oﬀ.

This immediately proves that the cut-oﬀ problem for rendez-vous protocols is also in

polynomial time.

5.3. P-hardness. By a logspace reduction from the Circuit Value Problem [Lad75], we
prove that
Lemma 5.5. The cut-oﬀ problem for rendez-vous protocols is P-hard.

16

BALASUBRAMANIAN, ESPARZA, AND RASKIN

Proof. We give a logspace reduction from the Circuit Value Problem (CVP) which is known
to be P-hard [Lad75].

CVP is deﬁned as follows: We are given a boolean circuit C with n input variables
x1, . . . , xn and m gates g1, . . . , gm. We are also given an assignment v for the input variables
and a gate out. We have to check if the output of the gate out is 1, when the input variables
are assigned values according to the assignment v .

We represent each gate g as a tuple (◦, s1, s2) where ◦ ∈ {∨, ∧} denotes the operation
of g and s1, s2 ∈ {x1, . . . , xn, g1, . . . , gm} are the inputs to g. In a similar fashion each unary
gate g is represented as a tuple (¬, s).

Let v (xi) ∈ {0, 1} denote the value assignment to the variable xi by the assignment v .
Similarly, let v (gi) denote the output of the gate gi when the input variables are assigned
values according to the assignment v . Hence, the problem is to determine if v(out) is 1.

We now deﬁne a rendez-vous protocol as follows: Our alphabet Σ will be {a, b, c} ∪
{(g, b1, b2) : g is a gate and b1, b2 ∈ {0, 1}}. We will have an initial state init, a ﬁnal state
ﬁn, 2n states q0
gm. The rules are deﬁned
as follows:
• For each 1 ≤ i ≤ n, we have the rules (init, !a, qv (xi)

xn and 2m states q0

), (init , ?a, qv (xi)

). These two rules

x1, . . . , q0

g1, . . . , q0

gm, q1

xn, q1

x1, q1

g1, q1

xi

xi

correspond to setting the value of xi to v (xi).

• For each binary gate g = (◦, s1, s2) and for each b1, b2 ∈ {0, 1}, we have rules (qb1

s1, !(g, b1, b2), qb1◦b2

g

),

). These rules say that if the output of s1 is b1 and the output of s2

s2, ?(g, b1, b2), qb1◦b2
(qb2
is b2, then set the output of g to b1 ◦ b2.

g

• For each unary gate g = (¬, s) and each b ∈ {0, 1}, we have rules (qb

s, !(g, b), q¬b
g ),
g ). These rules guarantee that the output of g is the negation of the output

s, ?(g, b), q¬b

(qb
of s.

• We then have the rules (q1

out, !b, ﬁn), (q1

out, ?b, ﬁn). These rules guarantee that if the output

of out is 1, then ﬁn can be reached.

• Finally, we have (ﬁn, !c, ﬁn) and (q, ?c, ﬁn) for every state q. These rules guarantee that
once a process reaches the state ﬁn, it can make all the other processes reach ﬁn as well.
Before we proceed to the correctness of the construction, we set up some notation. For
init can
∗
=⇒ D such that D(q) > 0. We say that q is coverable iﬀ

a state q of the protocol P and an initial conﬁguration C k
cover q if there exists a run C k
it can be covered from some initial conﬁguartion C k

init of P, we say that C k

init

We ﬁrst claim that for any h ∈ {x1, . . . , xn, g1, . . . , gm}, v(h) = b iﬀ the state qb
h is
coverable. Indeed, if h1, . . . , hn+m is a topological ordering of the underlying DAG of the
circuit C, then we can prove by induction on this topological ordering that if v(hi) = b
then qb
h) > 0 for some
hi
h ∈ {x1, . . . , xn, g1, . . . , gm}, then by induction on the length of the run we can show that
v(h) = b.

is coverable. For the other direction, if C k

∗
=⇒ D with D(qb

init

This implies that v(out) = 1 iﬀ q1
is easy to see that ﬁn is coverable iﬀ q1

out is coverable. By construction of the protocol P, it
out is coverable. Hence, v(out) = 1 iﬀ ﬁn is coverable.
init can cover a state q then C l
init can also
cover q for any l ≥ k. This implies that v(out) = 1 is coverable iﬀ there exists B such that
for all k ≥ B, C k

By deﬁnition of coverability, notice that if C k

init can cover ﬁn.

init .

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

17

Finally, by using the transitions described in the last point of the construction of the
protocol P, we can show that, if D is a conﬁguration with D(ﬁn) > 0 and |D| = k, then
∗
=⇒ C k
ﬁn . This implies that C k
D can reach the conﬁguration C k
ﬁn.
Combined with the above claims, this means that v(out) = 1 iﬀ there exists B such that
for all k ≥ B, C k

ﬁn . This concludes the proof of correctness of the reduction.

init can cover ﬁn iﬀ C k

∗
=⇒ C k

init

init

Clearly, this also proves that the cut-oﬀ problem for Petri nets is P-hard. Putting

together all of this we get,
Theorem 5.6. The cut-oﬀ problem for Petri nets and rendez-vous protocols is P-complete.

6. Bounded-loss cut-off problem

In this section, we consider the following bounded-loss cut-oﬀ problem for rendez-vous
protocols, which was suggested as a variant of the cut-oﬀ problem in Section 7 of [HS20].

Given: A rendez-vous protocol P
Decide:
Dn with C n

∗
=⇒ Dn and Dn(ﬁn) ≥ n − B?

init

Is there B ∈ N such that for every n ∈ N, there is a conﬁguration

If such a B exists, then we say that the protocol P has the bounded-loss cut-oﬀ property

and that B is a bounded-loss cut-oﬀ for P.

Intuitively, the cut-oﬀ problem asks if for all large enough population sizes n, we can
move n agents from the state init to the state ﬁn. The bounded-loss cut-oﬀ problem asks
if there is a bound B such that for all population sizes n, we can move n − B agents from
the state init to the state ﬁn and leave the remaining B agents in any state of the protocol
P. Intuitively, we are allowed to “leave out” a bounded number of agents while moving
everybody else to the ﬁnal state.

Our main result in this section is that

Theorem 6.1. The bounded-loss cut-oﬀ problem is P-complete.

We prove this by adapting the techniques developed for the cut-oﬀ problem. Similar
to the cut-oﬀ problem, we ﬁrst give a characterization of protocols having the bounded-loss
cut-oﬀ property and then use this characterization to give a polynomial-time algorithm for
deciding the bounded-loss cut-oﬀ problem.

6.1. Characterization of protocols having a bounded-loss cut-oﬀ. For the rest of
this section, we ﬁx a rendez-vous protocol P. We need a couple of small notations to
state the required characterization. Given the protocol P, we consider the Petri net
NP = (P, T, P re, P ost) with incidence matrix A that we constructed in Section 2, and
then consider the associated Petri net system (NP , Hinit I, HﬁnI). In this Petri net, we say
that the marking HinitI can cover the marking HﬁnI using a rational ﬁring sequence σ iﬀ
σ
−→Q M and M (ﬁn) > 0. We now prove that
there exists a marking M such that HinitI

Theorem 6.2. The protocol P has a bounded-loss cut-oﬀ iﬀ in the Petri net system (NP , Hinit I, HﬁnI),
there exists a rational ﬁring sequence σ such that HinitI can cover HﬁnI using σ and the
marking equation has a solution y ∈ QT

≥0 such that JyK ⊆ JσK.

18

BALASUBRAMANIAN, ESPARZA, AND RASKIN

Proof. (⇒): Assume P has the bounded-loss cut-oﬀ property. By deﬁnition of the bounded-
loss cut-oﬀ property and by Proposition 2.3, there must exist B ∈ N such that for all n ∈ N,
there exists Dn with C n

∗
−→ Dn in the Petri net NP and Dn(ﬁn) ≥ n − B.

init

Consider the sequence of markings D1, D2, . . . . Notice that in all of these markings, at
most B tokens are not in the place ﬁn. This means that there must exist a subsequence
Di1, Di2, . . . with B < i1 < i2 < . . . and a marking D of size B′ ≤ B such that each
Dij = D + H(ij − B′) · ﬁnI.

Now, consider the sequence of runs C i1
init

σi2−−→ Di2, . . . and consider the
corresponding Parikh vectors −→σi1, −→σi2, . . . . By Dickson’s lemma, there must exist indices
k < l such that −→σik ≤ −→σil.

σi1−−→ Di1, C i2

init

Let σil = t1t2 · · · tm. Construct the rational ﬁring sequence σ := t1/il, t2/il, · · · , tm/il.
σ
−→Q

σil−−→ Dil, we can easily conclude by induction on m that HinitI

From the fact that C il
init
Dil/il. Since Dil(ﬁn) > 0, this means that HinitI can cover HﬁnI using σ.

Further, by the marking equation we have D + H(ik − B′) · ﬁnI = C ik

init + A · −→σik and
init + A · −→σil. Let y = (−→σil − −→σik )/(il − ik) and so we have HﬁnI =

D + H(il − B′) · ﬁnI = C il
HinitI + A · y. By assumption on k and l, it follows that y ∈ QT
(⇐): Assume there exists a rational ﬁring sequence σ and a vector y ∈ QT
JyK ⊆ JσK, HinitI can cover HﬁnI using σ and HﬁnI = HinitI + Ay. Let Hinit I
following proof is similar to the proof of the Insertion lemma.

≥0 such that
σ
−→Q M . The

≥0 and JyK ⊆ JσilK = JσK.

Zeroeth stage: By Lemma 4.6, there exists n and a ﬁring sequence τ with Jτ K = JσK
τ
−→ nM . Further, since HﬁnI = HinitI + Ay, there must exist n′ such
such that Hn · initI
that Hn′ · ﬁnI = Hn′ · initI + Az where z ∈ NT and JzK = JyK ⊆ JσK = Jτ K.

First stage: Let λz be kzk, w be the weight of NP, m be the number of places in
r2−→ M2 . . . Mk−1
and µ be λzmnw . Let τ = r1, r2, . . . , rk and let Hn · initI := M0
Mk := nM . Notice that for each place p ∈
such that Mip(p) > 0.

Jτ K
rk−→
r1−→ M1
Jτ K, there exists a marking Mip ∈ {M0, . . . , Mk}

•

•

Since each of the markings in {Mip}p∈•

Jτ K can be obtained from M0 by ﬁring a (suitable)
preﬁx of τ , it is easy to see that from the marking Hµ · initI = H(λzmnw ) · initI = λzmw M0
we can reach the marking First := Pp∈•
Second stage: Now, we shall show that for every j > 0, there exists a marking Dj such
∗
that H(µ + n′ + j) · initI
−→ Dj and Dj(ﬁn) ≥ j. By deﬁnition of a bounded-loss cut-oﬀ, this
then allows us to conclude that µ + n′ is a bounded-loss cut-oﬀ for the protocol.

Jτ K λzw Mip.

Let j = kn′ + l for some k ≥ 0 and 0 ≤ l < n′. Let ξ be any ﬁring sequence such
−→
∗
ξ = z. Since we know that Hµ · initI
−→
Jτ K,

that
First + H(n′ + j) · initI = First + H((k + 1)n′ + l) · initI. Notice that for every place p ∈
First(p) ≥ λzw = k

∗
−→ First, it follows that H(µ + n′ + j) · initI

−→
ξ k · w . Further, JξK = JzK ⊆ Jτ K.

•

Now, by applying proposition 4.5 and the marking equation repeatedly, we can conclude
ξ
ξ
that First + H((k + 1)n′ + l) · initI
−→ First + H((k −
−→ First + H(kn′ + l) · initI + Hn′ · ﬁnI
ξ
ξ
−→ First + Hl · initI + H(k + 1)n′ · ﬁnI := Dj. Notice that
1)n′ + l) · initI + H2n′ · ﬁnI
−→ . . .
(k + 1)n′ ≥ j and so Dj(ﬁn) ≥ j, which proves the desired claim.

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

19

Note that this characterization is very similar to the characterization for the cut-oﬀ
property, where the reachability condition is replaced with a coverability condition and the
condition of the marking equation having a solution over the integers is replaced with it
having a solution over the positive rationals.

6.2. Polynomial time algorithm. We use the characterization given in the previous sub-
section to provide a polynomial time algorithm for the bounded-loss cut-oﬀ problem. Sim-
ilar to Lemma 5.3, we have the following lemma which could be inferred from the results
of [FH15].

Lemma 6.3. (Lemma 12 and Proposition 29 of [FH15]) Among all the rational ﬁring
sequences σ such that HinitI can cover HﬁnI there is one with maximum support. Moreover,
the support of such a ﬁring sequence can be found in polynomial time.

We now have all the ingredients to prove the existence of a polynomial time algorithm.

Theorem 6.4. The bounded-loss cut-oﬀ problem can be solved in polynomial time.

Proof. First, we check that there is a rational ﬁring sequence σ such that HinitI can cover
HﬁnI using σ. This can be done in polynomial time by ([FH15], Proposition 29). If such a
sequence does not exist, by Theorem 6.2 the given protocol does not admit a cut-oﬀ.

Suppose such a sequence exists. By Lemma 6.3 we can ﬁnd in polynomial time, the
maximum support S of all the ﬁring sequences τ which can be used to cover HﬁnI from
HinitI. We now check in polynomial time if the marking equation has a solution y over QT
≥0
such that yt = 0 for every t /∈ S. By Theorem 6.2 such a solution exists iff the net system
admits a cut-oﬀ.

6.3. P-hardness. We now show P-hardness of the bounded-loss cut-oﬀ problem.
Lemma 6.5. The bounded-loss cut-oﬀ problem is P-hard.
Proof. Similar to the P-hardness proof of the cut-oﬀ problem, we reduce from CVP. Let C
be a boolean circuit and let v be an assignment to the input variables of C. We consider the
same rendez-vous protocol P that we constructed in the reduction for the cut-oﬀ problem
in Lemma 5.5. We claim that P has a bounded-loss cut-oﬀ iﬀ it has a cut-oﬀ. If this claim
is true, then by the reduction in Lemma 5.5, this would immediately imply P-hardness for
the bounded-loss cut-oﬀ problem.

All that is left is to prove the claim. Clearly if B is a cut-oﬀ for P, then B is also a
bounded-loss cut-oﬀ for P. For the other direction, suppose B is a bounded-loss cut-oﬀ for
P. As mentioned in the proof of Lemma 5.5, the protocol P satisﬁes the following property:
If D is a conﬁguration of P such that D(ﬁn) > 0 and |D| = n, then D

∗
=⇒ C n

ﬁn.

By deﬁnition of a bounded-loss cut-oﬀ, for every n ≥ B, there exists a conﬁguration Dn
∗
=⇒ Dn and Dn(ﬁn) > 0. By the previous paragraph, from Dn it is possible

such that C n
to reach the conﬁguration C n

init

ﬁn . This then immediately implies that B is a cut-oﬀ for P.

20

BALASUBRAMANIAN, ESPARZA, AND RASKIN

7. Symmetric rendez-vous protocols

In [HS20] Horn and Sangnier introduce symmetric rendez-vous protocols, where sending and
receiving a message at each state has the same eﬀect, and show that the cut-oﬀ problem is
in NP. We improve on their result and shown that it is in NC.

Recall that NC is the set of problems in P that can be solved in polylogarithmic parallel
time, i.e., problems which can be solved by a uniform family of circuits with polylogarithmic
depth and polynomial number of gates. Two well-known problems which lie in NC are graph
reachability and feasibility of linear equations over the ﬁnite ﬁeld F2 of size 2 [Pap07, Mul87].
We proceed to formally deﬁne symmetric protocols and state our results.

Deﬁnition 7.1. A rendez-vous protocol P = (Q, Σ, init , ﬁn, R) is symmetric, iﬀ its set of
rules is symmetric under swapping !a and ?a for each a ∈ Σ, i.e., for each a ∈ Σ, we have
(q, !a, q′) ∈ R iﬀ (q, ?a, q′) ∈ R.

Horn and Sangnier show that, because of their symmetric nature, there is a very easy

characterization for cut-oﬀ admitting symmetric protocols.

Proposition 7.2. (Lemma 18 of [HS20]) A symmetric protocol P admits a cut-oﬀ iﬀ there
exists an even number e and an odd number o such that C e

∗
−→ C o

∗
−→ C e

ﬁn and C o

init

ﬁn .

init

From a symmetric protocol P, we can derive a graph G(P) where the vertices are the
states and there is an edge between q and q′ iﬀ there exists a ∈ Σ such that (q, a, q′) ∈ R.
The following proposition is immediate from the deﬁnition of symmetric protocols:
Proposition 7.3. Let P be a symmetric protocol. There exists 2k ∈ N such that C 2k
init
C 2k

ﬁn iﬀ there is a path from init to ﬁn in the graph G(P).

∗
−→

Proof. The left to right implication is clear. For the other side, suppose there is a path
init, q1, q2, . . . , qm−1, ﬁn in the graph G(P). Then notice that H2 · initI → H2 · q1I → H2 ·
q2I · · · → H2 · qm−1I → H2 · qf I is a valid run of the protocol.

Since graph reachability is in NC , this takes care of the “even” case from Proposition 7.2.

Hence, we only need to take care of the “odd” case from Proposition 7.2.

Fix a symmetric protocol P for the rest of the section. As a ﬁrst step, for each state
q ∈ Q, we compute if there is a path from init to q and if there is a path from q to ﬁn in
the graph G(P). Since graph reachability is in NC this computation can be carried out in
NC by parallely running graph reachability for each q ∈ Q. If such paths exist for a state
q then we call q a good state, and otherwise a bad state. The following proposition easily
follows from the symmetric nature of P:
Proposition 7.4.

If q ∈ Q is a good state, then H2 · initI

∗
−→ H2 · qI and H2 · qI

∗
−→ H2 · ﬁnI.

Similar to the general case of rendez-vous protocols, given a symmetric protocol P
we can construct a Petri net NP whose places are the states of P and which faithfully
represents the reachability relation of conﬁgurations of P. Observe that this construction
can be carried out in parallel over all the states in Q and over all pairs of rules in R. Let
N = (P, T, P re, P ost) be the Petri net that we construct out of the symmetric protocol P
and let A be its incidence matrix. We now write the marking equation for N as follows:
We introduce a variable v[t] for each transition t ∈ T and we construct an equation system
Eq enforcing the following three conditions:

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

21

• v[t] = 0 for every t ∈ T such that

•

•

t ∪ t

contains a bad state.

By deﬁnition of a bad state, such transitions will never be ﬁred on any run from an initial
to a ﬁnal conﬁguration and so our requirement is safe.

• Pt∈T A[q, t] · v[t] = 0 for each q /∈ {init, ﬁn}.

Notice that the net-eﬀect of any run from an initial to a ﬁnal conﬁguration on any state
not in {init, ﬁn} is 0 and hence this condition is valid as well.

• Pt∈T A[init, t] · v[t] = −1 and Pt∈T A[ﬁn, t] · v[t] = 1.

It is clear that the construction of Eq can be carried out in parallel over each q ∈ Q
and each t ∈ T . Finally, we solve Eq over arithmetic modulo 2, i.e., we solve Eq over the
ﬁeld F2, which as mentioned before, can be done in NC. We have:
∗
−→ C 2k+1
Proposition 7.5. There exists 2k + 1 ∈ N such that C 2k+1
ﬁn
system Eq has a solution over F2.

iﬀ the equation

init

Proof idea. The left to right implication is true because of taking modulo 2 on both sides
of the marking equation. For the other side, we use an idea similar to Lemma 4.7. Let x
be a solution to Eq over F2. Using Proposition 7.4, we ﬁrst populate all the good states
of Q with enough processes such that all the good states except init have an even number
of processes. Then, we ﬁre exactly once, all the transitions t such that x[t] = 1. Since x
satisﬁes Eq, we can now argue that in the resulting conﬁguration, the number of processes
at each bad state is 0 and the number of processes in each good state except ﬁn is even.
Hence, we can once again use Proposition 7.4 to conclude that we can move all the processes
which are not at ﬁn to the ﬁnal state ﬁn.
σ
Proof. (⇒): Suppose there exists 2k + 1 ∈ N and a ﬁring sequence σ such that C 2k+1
−→
init + A−→σ . Taking modulo 2
C 2k+1
ﬁn
on both sides of the equation, it can be easily seen −→σ mod 2 is a solution to the system
Eq over the ﬁeld F2.

. By the marking equation it follows that C 2k+1

ﬁn = C 2k+1

(⇐): Suppose Eq has a solution x over F2. Let T ′ be the set of all transitions t such
init . We now construct a

that x[t] = 1. Let n = 2|Q| + 3 and consider the conﬁguration C n
run from C n

init

init to C n

ﬁn as follows:

First stage - Saturate: Let G ⊆ Q be the set of good states and let l = 2|Q| − 2|G|.
init we can reach the conﬁguration First :=
By Proposition 7.4, from the conﬁguration C n
H(2l + 3) · initI + Pq∈GH2qI. This completes the ﬁrst stage.

Second stage - Insert: Notice that every transition t ∈ T ′ is enabled at the conﬁguration
First. Hence, we can ﬁre all these transitions exactly once, in any order, from the conﬁg-
uration First to reach some conﬁguration Second.
It is easy to see that Second(q) =
0 for any bad state q. We claim that Second(q) ≡ 0 mod 2 for every q 6= ﬁn and
Second(ﬁn) ≡ 1 mod 2.
Indeed, notice that for every q /∈ {init, ﬁn}, by the mark-
ing equation Second(q) − First(q) = Pt∈T A[q, t] · x[t]. Since x is a solution to Eq, it
follows that Pt∈T A[q, t] · x[t] ≡ 0 mod 2, and so, we can conclude that the diﬀerence
Second(q) − First(q) is even. Since First(q) is even, it follows that so is Second(q). Sim-
ilarly we can argue that Second(init) is even and Second(ﬁn) is odd. This completes the
second stage.

22

BALASUBRAMANIAN, ESPARZA, AND RASKIN

Third stage - Desaturate: Notice that Second(q) = 0 for any bad state q and Second(q)
is even for every q 6= ﬁn. By Proposition 7.4, it follows that from Second(q) we can reach
the conﬁguration C n

ﬁn , thereby constructing the required run.

Hence, we get the following theorem.

Theorem 7.6. The problem of deciding whether a symmetric protocol admits a cut-oﬀ is
in NC.

∗
−→ C e

Proof. By Proposition 7.2 it suﬃces to ﬁnd an even number e and an odd number o such
ﬁn . By Proposition 7.3 the former can be done in NC. By
that C e
Proposition 7.5 and by the fact that the equation system Eq can be constructed and solved
in NC, it follows that the latter can also be done in NC.

ﬁn and C o

∗
−→ C o

init

init

Remark 7.7. We can also consider the bounded-loss cut-oﬀ problem for symmetric pro-
tocols. However, in the case of symmetric protocols, this problem becomes rather easy.
Indeed, for a symmetric protocol to have a bounded-loss cut-oﬀ, it is easy to see that there
must be a path from init to ﬁn in the graph G(P). Moreover, this is also a suﬃcient con-
∗
−→ H2k · ﬁnI and
dition, because if such a path exists, then by Proposition 7.4, H2k · initI
∗
H(2k + 1) · initI
−→ H2k · ﬁnI + HinitI and so we can simply take the bounded-loss cut-oﬀ to
be 1. This proves that the bounded-loss cut-oﬀ problem for symmetric protocols reduces to
(directed) graph reachability which is known to be NL-complete.

Moreover, given a (directed) graph reachability instance (G, s, t), we can interpret it in
a straightforward manner as the graph of a symmetric protocol P whose communication
alphabet is a single letter and where the initial state is s and the ﬁnal state is t. This then
immediately implies that P would have a bounded-loss cut-oﬀ iﬀ s can reach t in the graph
G, which leads to NL-hardness of the bounded-loss cut-oﬀ problem for symmetric protocols.

8. Symmetric protocols with leaders

In this section, we extend symmetric rendez-vous protocols by adding a special process called
a leader. We state the cut-oﬀ problem for such protocols and prove that it is NP-complete.
Deﬁnition 8.1. A symmetric leader protocol is a pair of symmetric protocols P = (P L, P F )
where P L = (QL, Σ, init L, ﬁn L, RL) is the leader protocol and P F = (QF , Σ, init F , ﬁn F , RF )
is the follower protocol where QL ∩ QF = ∅.

A conﬁguration of a symmetric leader protocol P is a multiset over QL ∪ QF such that
Pq∈QL C(q) = 1. This corresponds to the intuition that exactly one process can execute
the leader protocol. For each n ∈ N, let C n
ﬁn ) denote the initial (resp. ﬁnal)
conﬁguration of P given by C(init L) = 1 (resp. C(ﬁn L) = 1) and C(init F ) = n (resp.
C(ﬁn F ) = n). We say that C =⇒ C ′ if there exists (p, !a, p′), (q, ?a, q′) ∈ RL ∪ RF , C ≥ Hp, qI
and C ′ = C − Hp, qI + Hp′, q′I. Since we allow at most one process to execute the leader
protocol, given a conﬁguration C, we can let lead(C) denote the unique state q ∈ QL such
that C(q) > 0.

init (resp. C n

Deﬁnition 8.2. The cut-oﬀ problem for symmetric leader protocols with a leader is the
following.

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

23

Input: A symmetric leader protocol P = (P L, P F ).
Output:

If there exists B ∈ N such that for all n ≥ B, C n

init

∗
=⇒ C n

ﬁn .

Horn and Sangnier show that,

Proposition 8.3. (Lemma 18 of [HS20]) A symmetric leader protocol admits a cut-oﬀ iﬀ
there exists an even number e and an odd number o such that C e
ﬁn .

ﬁn and C o

∗
=⇒ C o

∗
=⇒ C e

init

init

The main theorem of this section is

Theorem 8.4. The cut-oﬀ problem for for symmetric leader protocols is NP-complete.

8.1. A non-deterministic polynomial time algorithm. Let P = (P L, P F ) be a ﬁxed
symmetric leader protocol where P L = (QL, Σ, init L, ﬁn L, RL) and P F = (QF , Σ, init F , ﬁn F , RF ).
Similar to the previous section, from P F we can construct a graph G(P F ) where the vertices
are given by the states QF and the edges are given by the rules in RF . In G(P F ), we can
clearly remove any vertices which are not reachable from the state init and which do not
have a path to ﬁn. In the following, we will assume that such vertices do not exist in G(P F ).
Similar to the general case, we will construct a Petri net NP from the given symmetric
leader protocol P. However, the construction is made slightly complicated due to the
presence of a leader.

From P = (P L, P F ), we construct a Petri net N = (P, T, P re, P ost) as follows: Let P
be QL ∪ QF . For each a ∈ Σ and r = (q, !a, s), r′ = (q′, ?a, s′) ∈ RL ∪ RF such that both r
and r′ do not belong to RL, we will have a transition tr,r′ ∈ T in N such that
• P re[p, t] = 0 for every p /∈ {q, q′}, P ost[p, t] = 0 for every p /∈ {s, s′}
• If q = q′ then P re[q, t] = −2, otherwise P re[q, t] = P re[q′, t] = −1
• If s = s′ then P ost[s, t] = 2, otherwise P ost[s, t] = P ost[s′, t] = 1.

Transitions tr,r′ in which exactly one of r, r′ is in RL will be called leader transitions and
transitions in which both of r, r′ are in RF will be called follower-only transitions. Notice
t ∩ QL and a unique
that if t is a leader transition, then there is a unique place t.from ∈
place t.to ∈ t

∩ QL.

•

•

As usual, we let A denote the incidence matrix of the constructed net N . The following

proposition is clear from the construction of the net N .

Proposition 8.5. For two conﬁgurations C and C ′, we have that C

∗
=⇒ C ′ in the protocol

P iﬀ C

∗
−→ C in the net N .

Because P is symmetric we have the following fact, which is easy to verify.

Proposition 8.6. If q ∈ QF , then H2 · initI

∗
−→ H2 · qI

∗
−→ H2 · ﬁnI

For any set of leader transitions S, we can deﬁne a graph G(S) as follows: The set of
vertices is the set {t.from : t ∈ S} ∪ {t.to : t ∈ S}. The set of edges is the set {(t.from, t.to) :
t ∈ S}.

For any vector x ∈ NT , we deﬁne lead(x) to be the set of all leader transitions such that
x[t] > 0. The graph of the vector x, denoted by G(x) is deﬁned as the graph G(lead(x)).
Further, for any two vectors x, y ∈ NT and a transition t ∈ T , we say that x = y[t--] iﬀ
x[t] = y[t] − 1 and x[t′] = y[t′] for all t′ 6= t.

24

BALASUBRAMANIAN, ESPARZA, AND RASKIN

Deﬁnition 8.7. Let C be a conﬁguration and let x ∈ NT . We say that the pair (C, x) is
compatible if C + Ax ≥ 0 and every vertex in G(x) is reachable from lead(C).

The following lemma states that as long as there are enough followers in every state, it

is possible for the leader to come up with a ﬁring sequence from a compatible pair.
Lemma 8.8. Suppose (C, x) is a compatible pair such that C(q) ≥ 2kxk for every q ∈ QF .
Then there is a conﬁguration D and a ﬁring sequence ξ such that C

ξ
−→ D and

−→
ξ = x.

Proof idea. First, we give an intuition behind the proof. We prove this lemma by induction
on kxk. If x[t] > 0 for some follower-only transition, then we can easily show that if we let
t
C ′ be such that C
−→ C ′ and x′ be x[t--], then (C ′, x′) is compatible and C(q) ≥ 2kx′k for
every q ∈ QF .

Suppose x[t] > 0 for some leader transition. Let p = lead(C). If p belongs to some cycle
r1−→ C ′ and x′ = x[r1--].
S = p, r1, p1, r2, p2, . . . , pk, rk+1, p in the graph G(x), then we let C
We can then verify that C ′ + Ax′ ≥ 0, C ′(q) ≥ 2kx′k for every q ∈ QF and lead(C ′) = p1.
Any path P in G(x) from p to some vertex s either goes through p1 or we can use the cycle
S to traverse from p1 to p ﬁrst and then use P to reach s. This gives a path from p1 to
every vertex s in G(x′).

If p does not belong to any cycle in G(x), then using the fact that C + Ax ≥ 0, we can
t
−→ C ′ and
show that there is exactly one out-going edge t from p in G(x). We then let C
x′ = x[t--]. Since any path in G(x) from p has to necessarily use this edge t, it follows that
in G(x′) there is a path from t.to = lead(C ′) to every vertex.

We now proceed to the formal proof.

Proof of Lemma 8.8. We recall from the construction of the net N that the weight of N is
2, i.e., the largest absolute value appearing in the Pre and Post matrices of N is 2. We will
use this fact implicitly throughout the proof.

Let n = kxk. We will construct a series of compatible pairs (C0, x0), (C1, x1), . . . , (Cn, xn)

and a series of transitions t1, . . . , tn such that
• C0 = C, x0 = x
ti+1−−→ Ci+1 for every i < n.
• Ci
• xi+1 = xi[ti+1--] for every i < n.
• Ci(q) ≥ 2n − 2i for every q ∈ QF and every i < n.

Suppose we have already constructed the pair (Ci, xi) for some i < n. We consider

three cases:

Case 1: xi[t] > 0 for some follower-only transition t: By assumption Ci(q) ≥ 2n − 2i ≥ 2
for every q ∈ QF . Hence, it follows that the transition t can be ﬁred at Ci. We let ti+1 := t,
t
−→ Ci+1 and let xi+1 = xi[t--]. It can be easily checked that (Ci+1, xi+1) is a compatible
Ci
pair.

Case 2: Suppose xi[t] > 0 for some leader transition t. Therefore the graph G(xi) is not
empty. Let p = lead(Ci). We split this into two cases:

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

25

Case 2a. p is part of some cycle in G(xi): Let p, r1, p1, r2, p2, . . . , pk, rk+1, p be a cycle in
G(xi). By construction of G(xi), for each j, rj is a leader transition and xi[rj] > 0. Since
p = lead(Ci) it follows that Ci(p) > 0. Further, by assumption Ci(q) ≥ 2n−2i ≥ 2 for every
q ∈ QF . It follows then that r1 is a transition which can be ﬁred at the conﬁguration Ci.
r1−→ Ci+1 and xi+1 := xi[r1--]. We now have to argue that (Ci+1, xi+1)
We let ti+1 := r1, Ci
is compatible and Ci+1(q) ≥ 2n − 2(i + 1) for every q ∈ QF .

Since it is easy to see that Ci+1 + Axi+1 = Ci + Axi, it follows from the compatibility
of (Ci, xi) that Ci+1 + Axi+1 ≥ 0. Further since Ci(q) ≥ 2n − 2i for every q ∈ QF , it follows
that Ci+1(q) ≥ 2n − 2(i + 1) for every q ∈ QF .

All that is left to prove is that every vertex in G(xi+1) is reachable from lead(Ci+1)
which is p1. Let s be any vertex of G(xi+1). Notice that the graph G(xi+1) is neces-
sarily a sub-graph of G(xi). By compatibility of (Ci, xi), it follows that s is reachable
from p in G(xi). Let p, tr1, s1, tr2, s2, . . . , sl, trl+1, s be a path in G(xi).
If tr1 = r1
then s1 = p1 and hence p1, tr2, s2, . . . , sl, trl+1, s is a path in G(xi+1).
If tr1 6= r1 then
p1, r2, p2, . . . , pk, rk+1, p, tr1, s1, . . . , sl, trl+1, s is a walk in G(xi+1). Hence we are done.

Case 2b): p is not part of some cycle in G(xi): Let Out = {out1, . . . , outb} be the set of
leader transitions t such that t.from = p and let In = {in1, . . . , ina} be the set of leader
transitions t such that t.to = p. Notice that Out and In depend only on P L and not on
G(xi).

We claim that for every in ∈ In, xi[in] = 0 and there is exactly one out ∈ Out such
that xi[out] > 0. Since (Ci, xi) is compatible, every vertex in G(xi) is reachable from p
and by assumption p is not part of any cycle in G(xi). It follows then that there are no
incoming edges to p in G(xi) and hence xi[in] = 0 for every in ∈ In. Also since every
vertex in G(xi) is reachable from p and since G(xi) is not empty, it follows that there is
at least one out ∈ Out such that xi[out] > 0. Finally, since Ci + Axi ≥ 0 it follows that
Ci(p) + Pin∈In xi[in] − Pout∈Out xi[out] ≥ 0. Since xi[in] = 0 for every in ∈ In and since
Ci(p) = 1, it follows that there is exactly one out ∈ Out such that xi[out] > 0. Hence, by
construction of G(xi), there is exactly one outgoing edge from p in G(xi).
Let r be the only outgoing edge in G(xi). We let ti+1 := r, Ci

r
−→ Ci+1 and xi+1 :=
It is once again easy to see that Ci+1 + Axi+1 ≥ 0, and also that Ci+1(q) ≥

xi[r--].
2n − 2(i + 1) for every q ∈ QF .

All that is left to prove is that every vertex in G(xi+1) is reachable from lead(Ci+1)
which is r.to. Let s be any vertex of G(xi+1). Notice that the graph G(xi+1) is necessarily a
sub-graph of G(xi). By compatibility of (Ci, xi), it follows that s is reachable from p in G(xi).
Let p, tr1, s1, tr2, s2, . . . , sl, trl+1, s be a path in G(xi). Since p has only one outgoing edge
in G(xi) (which is r), it follows that tr1 = r and s1 = r.to. Hence s1, tr2, s2, . . . , sl, trl+1, s
is a path in G(xi+1) and so we are done.

Finally it is clear that the constructed sequence C0

ﬁring sequence.

t1−→ C1

t2−→ . . .

tn−→ Cn is the required

Hence, we get the following characterization for a symmetric leader protocol to have a

cut-oﬀ.
Lemma 8.9. Let par ∈ {0, 1}. There exists k ∈ N such that C k
par (mod 2) iﬀ there exists n ∈ N, x ∈ NT such that n ≡ par (mod 2), (C n
compatible and C n

∗
−→ C k

init

ﬁn = C n

init + Ax.

ﬁn and k ≡
init , x) is

26

BALASUBRAMANIAN, ESPARZA, AND RASKIN

Proof. (⇒): Suppose there exists k ∈ N such that k ≡ par (mod 2) and a ﬁring sequence
ﬁn. Let x = −→σ . By the marking equation C k
σ such that C k
init + Ax. Since
init
C k
ﬁn ≥ 0, to prove that (C k
init , x) is compatible it is enough to prove that every vertex in
G(x) is reachable from lead(C k

ﬁn = C k

σ
−→ C k

init ) = init L.

Let t1, . . . , tl be leader transitions sorted by the order in which they appear in the ﬁring
sequence σ. We want to show that for every i, the states ti.from and ti.to are reachable from
init L in G(x). Notice that for each ti, we have that ti.from ∈ {init L, t1.to, t2.to, . . . , ti−1.to}.
Using this and by induction on l, we can easily prove our claim.
(⇐): Suppose there exists n ∈ N, x ∈ NT such that n ≡ par (mod 2), (C n
and C n

init +Ax. We will now ﬁnd a k ∈ N such that k ≡ par (mod 2) and C k

init , x) is compatible
σ
−→ C k
ﬁn.

ﬁn = C n

init

First stage - Saturate: In this stage, we mark all the places in Q with a lot of tokens
by using Proposition 8.6. More formally, let λ = 2kxk · |Q| and let k := λ + n. Note
init we can reach the marking First :=
that k ≡ par (mod 2). By Proposition 8.6, from C k
C n

init + Pq∈QH2kxk · qI.

init , x) is a compatible pair, it follows that (First, x) is
Second stage - Insert: Since (C n
a compatible pair as well. By Lemma 8.8, it follows that there exists a ﬁring sequence ξ
−→ Second

−→. By the marking equation, it is clear that, First ξ

−→
ξ = x and First ξ

such that
where Second := C n

ﬁn + Pq∈QH2kxk · qI.

Third stage - Desaturate: By Proposition 8.6, from Second we can reach the marking
C n
ﬁn . This concludes the third stage and creates the desired run
from C k

ﬁn + H(2kxk · |Q|) · ﬁnI = C k
ﬁn .

init to C k

Lemma 8.10. Given a symmetric leader protocol, checking whether a cut-oﬀ exists can be
done in NP.

init

∗
−→ C o

∗
−→ C e
∗
−→ C 2k

Proof. By Proposition 8.3 it suﬃces to ﬁnd an even number e and an odd number o such
ﬁn and C o
that C e
ﬁn . Suppose we want to check if there exists 2k ∈ N such
init
ﬁn. By Lemma 8.9, this is possible iﬀ there exists 2k ∈ N and x ∈ NT such
that C 2k
init
that (C 2k
init , x) is compatible and C 2k
init + Ax. By deﬁnition of compatibility, this is
equivalent to saying that there exists 2k ∈ N, x ∈ NT and a subset S of leader transitions
such that JxK = S, C 2k
init + Ax and in the graph G(S), every vertex is reachable from
the vertex init L.

ﬁn = C 2k

ﬁn = C 2k

This characterization immediately suggests an NP algorithm as follows: We ﬁrst non-
deterministically guess a set of leader transitions S and check if every vertex in G(S) is
reachable from init L. Then, we write a polynomially sized integer linear program as follows:
We let v denote |T | variables, one for each transition in T and we let n be another variable,
with all these variables ranging over N. We then enforce the following conditions: C 2n
ﬁn =
C 2n
init + Av and v[t] = 0 ⇐⇒ t /∈ S and solve the resulting linear program, which we can
do in non-deterministic polynomial time [Pap81]. If there exists a solution, then we accept.
Otherwise, we reject.

It follows that at least one of our guesses gets accepted iﬀ there exists 2k ∈ N such that
∗
−→ C 2k

ﬁn . Similarly we can check if there exists 2l + 1 ∈ N such that C 2l+1
init

∗
−→ C 2l+1
ﬁn .

C 2k
init

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

27

8.2. NP-hardness. We now show NP-hardness of the cut-oﬀ problem for symmetric leader
protocols. Before we present the result, we make a small remark on notation.
Remark 8.11. Since (q, !a, q′) ∈ R iﬀ (q, ?a, q′) ∈ R for a symmetric protocol, in the
following, we will simply denote rules of a symmetric protocol as a tuple in Q × Σ × Q, with
the understanding that (q, a, q′) denotes that there are two rules of the form (q, !a, q′) and
(q, ?a, q′) in the protocol.

We now have the main result of this subsection.

Lemma 8.12. The cut-oﬀ problem for symmetric leader protocols is NP-hard.
Proof. We prove NP-hardness by giving a reduction from 3-CNF-SAT. Let ϕ = C1 ∧ C2 ∧
· · · ∧ Cm be a 3-CNF formula with variables x1, . . . , xn, where each clause Cj is of the form
for some literals ℓj1, ℓj2, ℓj3. We now construct a symmetric leader
Cj := ℓj1 ∨ ℓj2 ∨ ℓj3.
protocol as follows:

Our alphabet Σ will contain the following symbols: For each clause Cj, we will have a

symbol cj. Further, we will also have a special symbol a.

The leader’s initial state init L will be denoted by p0. For each variable xj with 1 ≤ j ≤ n,

the leader will have three states pj, ⊤j and ⊥j. The leader’s ﬁnal state ﬁn L will be pn.

The follower’s initial state init F will be denoted by q0. For each clause Cj with 1 ≤

j ≤ m, the follower will have a state qj. The follower’s ﬁnal state ﬁn F will be qm.

For each 0 ≤ j ≤ n − 1, the rules for the leader at the state pj are given by the gadget
in Figure 2. Intuitively, if the leader decides to move to ⊤j+1 (resp. ⊥j+1) then she has
decided to set the variable xj+1 to true (resp. false). Hence, upon moving to ⊤j+1 (resp.
⊥j+1), the leader tries to transmit the clauses which have become true by setting xj+1 to
true (resp. false).

pj

a

a

ck1, ck2, . . . , ckr

⊤j+1

⊥j+1

cl1, cl2 , . . . , clw

a

a

pj+1

Figure 2: Gadget at a state pj. Here Ck1, . . . , Ckr denote the set of all clauses in which the
literal xj appears and Cl1, . . . , Clw denote the set of all clauses in which the literal
¯xj appears.

The rules for the followers are simpler: For each 0 ≤ j ≤ m − 1, there is a rule

(qj, cj+1, qj+1). Further, there is a special rule (q0, a, qm).

28

BALASUBRAMANIAN, ESPARZA, AND RASKIN

We now claim that there is a cut-oﬀ for this protocol iﬀ the formula ϕ is satisﬁable.
The ﬁrst observation we note is the following: From the conﬁguration Hp0, 2n · q0I we can
reach the conﬁguration Hpn, 2n · qmI. Indeed, it is easy to verify that the following is indeed
a run in the protocol: Hp0, 2n · q0I) → H⊤1, (2n − 1) · q0, qmI → Hp1, (2n − 2) · q0, 2 · qmI →
H⊤2, (2n−3)·q0, 3·qmI → Hp2, (2n−4)·q0, 4·qmI → . . . H⊤n−1, q0, (2n−1)·qmI → Hpn, 2n·qmI.
Since there is always an initial conﬁguration with an even number of followers from
which we can reach the ﬁnal conﬁguration, by Proposition 8.3, for our reduction to be correct,
it suﬃces to prove that there exists 2l + 1 such that there is a run between Hp0, (2l + 1) · q0I
and Hpn, (2l + 1) · qmI iﬀ the formula ϕ is satisﬁable.

(⇐): Suppose ϕ is satisﬁable. Let T be a satisfying assignment of ϕ. Let var(xj) be
⊤j if T (xj) is true and let it be ⊥j otherwise. We now construct a run between Hp0, (2m +
2n + 1) · q0I and Hpn, (2m + 2n + 1) · qmI.

By Proposition 8.6, it is easy to see that from the conﬁguration Hp0, (2m + 2n + 1) · q0I

we can reach the conﬁguration First := Hp0, (2n + 1)q0I + P1≤i≤mH2qiI.

Let U = ∅. From the conﬁguration First, we construct a run which moves the leader
from p0 to pn in the following manner: Suppose the leader is currently at pj for some j. We
move the leader from pj to var(xj+1) and a single follower from q0 to qm by using the rules
(pj, !a, var(xj+1)) and (q0, ?a, qm) respectively. Then as long as the leader is at the state
var(xj+1), we do the following:
• If there is a rule (var(xj+1), !ck, var(xj+1)) such that ck /∈ U , then we keep the leader at

var(xj+1) and move a single follower from qk−1 to qk by using the rules (var(xj+1), !ck, var(xj+1))
and (qk−1, ?ck, qk). Then, we add the symbol ck to the set U .

• If there is no such rule, then we move the leader from var(xj+1) to pj+1 and a single
follower from q0 to qm by using the rules (var(xj+1), !a, pj+1) and (q0, ?a, qm) respectively.
For every 1 ≤ k ≤ m, notice that the message ck is sent at most once by the leader.
Further, since T is a satisfying assignment, it follows that for every 1 ≤ k ≤ m, the
message ck is sent exactly once by the leader. Hence, at the end of this procedure, exactly
2n followers would have moved from q0 to qm using the rule (q0, ?a, qm), and for every
0 ≤ k ≤ m − 1, exactly 1 follower would have moved from qk to qk+1.
It then follows
that at the end of this procedure, we would have reached the conﬁguration Second :=
Hpn, (2n + 3)qmI + P1≤i≤m−1H2qiI. Once again using Proposition 8.6, from Second we can
reach the conﬁguration Hpn, (2m + 2n + 1)qmI.

(⇒: ) Suppose there exists 2l + 1 such that there is a run between Hp0, (2l + 1) · q0I and
Hpn, (2l + 1) · qmI. Notice that along the run, for every 1 ≤ j ≤ n, the leader has to visit
exactly one of ⊤j or ⊥j. This naturally leads to an assignment T for the variables of ϕ as
follows: We set T (xj) to be true if the leader visited the state ⊤j along the run, otherwise
we set T (xj) to be false.

We now claim that along the run, for every 1 ≤ j ≤ m, the leader sent (or) received the
message cj. By construction of the leader protocol and by construction of the assignment
T , this would immediately imply that T is a satisfying assignment for ϕ.

To prove this, ﬁrst notice that the number of times the leader sends or receives the
message a in order for her to move from p0 to pn is exactly 2n. This implies that the rule
(q0, a, qm) was used by an even number of followers along the run. Since there are 2l + 1
followers to begin with, it follows that an odd number of followers had to use the path
(q0, c1, q1), (q1, c2, q2), . . . (qm−1, cm, qm) to reach the state qm. If the leader had neither sent
nor received the message cj, then the only way for a follower to move out of the qj−1 state

FINDING CUT-OFFS IN LEADERLESS RENDEZ-VOUS PROTOCOLS IS EASY

29

is to pair with a corresponding follower at the state qj−1, at which point both the followers
will go to the state qj. It then follows that followers could only move out of the state qj−1
in pairs. However, since an odd number of followers reach the state qj−1, it would then
follow that not all the followers could reach the ﬁnal state qm, which will then lead to a
contradiction.

References

[AD98]

[BER21]

[AAD+06] Dana Angluin, James Aspnes, Zo¨e Diamadi, Michael J. Fischer, and Ren´e Peralta. Computation
in networks of passively mobile ﬁnite-state sensors. Distributed Computing, 18(4):235–253, 2006.
Hassane Alla and Ren´e David. Continuous and hybrid petri nets. J. Circuits Syst. Comput.,
8(1):159–188, 1998.
A. R. Balasubramanian, Javier Esparza, and Mikhail A. Raskin. Finding cut-oﬀs in leaderless
rendez-vous protocols is easy. In Stefan Kiefer and Christine Tasson, editors, Foundations of
Software Science and Computation Structures - 24th International Conference, FOSSACS 2021,
Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS
2021, Luxembourg City, Luxembourg, March 27 - April 1, 2021, Proceedings, volume 12650 of
Lecture Notes in Computer Science, pages 42–61. Springer, 2021.

[BFHH17] Michael Blondin, Alain Finkel, Christoph Haase, and Serge Haddad. The logical view on contin-

uous petri nets. ACM Transactions on Computational Logic (TOCL), 18(3):24:1–24:28, 2017.

[BJK+15] Roderick Bloem, Swen Jacobs, Ayrat Khalimov, Igor Konnov, Sasha Rubin, Helmut Veith,
and Josef Widder. Decidability of Parameterized Veriﬁcation. Synthesis Lectures on Distributed
Computing Theory. Morgan & Claypool Publishers, 2015.
Michael Blondin. The abc of petri net reachability relaxations. ACM SIGLOG News, 7(3), 2020.
[Blo20]
[BMWK09] G´erard Basler, Michele Mazzucchi, Thomas Wahl, and Daniel Kroening. Symbolic counter ab-
straction for concurrent software. In Ahmed Bouajjani and Oded Maler, editors, 21st Interna-
tional Conference on Computer Aided Veriﬁcation, CAV 2009, Grenoble, France, June 26 - July
2, 2009, Proceedings, volume 5643 of Lecture Notes in Computer Science, pages 64–78. Springer,
2009.

[CLL+19] Wojciech Czerwinski, Slawomir Lasota, Ranko Lazic, J´erˆome Leroux, and Filip Mazowiecki.
The reachability problem for petri nets is not elementary. In Moses Charikar and Edith Cohen,
editors, 51st Annual ACM SIGACT Symposium on Theory of Computing, STOC 2019, Phoenix,
AZ, USA, June 23-26, 2019, Proceedings, pages 24–33. ACM, 2019.

[DSTZ12] Giorgio Delzanno, Arnaud Sangnier, Riccardo Traverso, and Gianluigi Zavattaro. On the com-
plexity of parameterized reachability in reconﬁgurable broadcast networks. In FSTTCS, vol-
ume 18 of LIPIcs, pages 289–300. Schloss Dagstuhl - Leibniz-Zentrum f¨ur Informatik, 2012.
Javier Esparza, Alain Finkel, and Richard Mayr. On the veriﬁcation of broadcast protocols. In
LICS, pages 352–359. IEEE Computer Society, 1999.

[EFM99]

[EGLM17] Javier Esparza, Pierre Ganty, J´erˆome Leroux, and Rupak Majumdar. Veriﬁcation of population

[EK02]

[EN94]

[Esp96]

[Esp16]

[FH15]

protocols. Acta Informatica, 54(2):191–215, 2017.
E. Allen Emerson and Vineet Kahlon. Model checking large-scale and parameterized resource
allocation systems. In TACAS, volume 2280 of Lecture Notes in Computer Science, pages 251–
265. Springer, 2002.
Javier Esparza and Mogens Nielsen. Decidability issues for petri nets - a survey. J. Inf. Process.
Cybern., 30(3):143–160, 1994.
Javier Esparza. Decidability and complexity of petri net problems - an introduction. In Petri
Nets, volume 1491 of Lecture Notes in Computer Science, pages 374–428. Springer, 1996.
Javier Esparza. Parameterized veriﬁcation of crowds of anonymous processes. In Dependable
Software Systems Engineering, volume 45 of NATO Science for Peace and Security Series - D:
Information and Communication Security, pages 59–71. IOS Press, 2016.
Est´ıbaliz Fraca and Serge Haddad. Complexity analysis of continuous petri nets. Fundam. In-
formaticae, 137(1):1–28, 2015.

30

BALASUBRAMANIAN, ESPARZA, AND RASKIN

[HS20]

[GS92]

[KB79]

[Lad75]

[KM78]

[GKS+14] Annu Gmeiner, Igor Konnov, Ulrich Schmid, Helmut Veith, and Josef Widder. Tutorial on
parameterized model checking of fault-tolerant distributed algorithms. In SFM, volume 8483 of
Lecture Notes in Computer Science, pages 122–171. Springer, 2014.
Steven M. German and A. Prasad Sistla. Reasoning about systems with many processes. Journal
of the ACM, 39(3):675–735, 1992.
Florian Horn and Arnaud Sangnier. Deciding the existence of cut-oﬀ in parameterized rendez-
vous networks. In CONCUR, volume 171 of LIPIcs, pages 46:1–46:16. Schloss Dagstuhl - Leibniz-
Zentrum f¨ur Informatik, 2020.
Ravindran Kannan and Achim Bachem. Polynomial algorithms for computing the smith and
hermite normal forms of an integer matrix. SIAM J. Comput., 8(4):499–507, 1979.
[KKW10] Alexander Kaiser, Daniel Kroening, and Thomas Wahl. Dynamic cutoﬀ detection in parameter-
ized concurrent programs. In Tayssir Touili, Byron Cook, and Paul B. Jackson, editors, 22nd
International Conference on Computer Aided Veriﬁcation, CAV 2010, Edinburgh, UK, July
15-19, 2010, Proceedings, volume 6174 of Lecture Notes in Computer Science, pages 645–659.
Springer, 2010.
Ravindran Kannan and Clyde L. Monma. On the computational complexity of integer program-
ming problems. In Rudolf Henn, Bernhard Korte, and Werner Oettli, editors, Optimization and
Operations Research, pages 161–172, Berlin, Heidelberg, 1978. Springer Berlin Heidelberg.
Richard E. Ladner. The circuit value problem is log space complete for p. SIGACT News,
7(1):18–20, 1975.
J´erˆome Leroux and Sylvain Schmitz. Reachability in vector addition systems is primitive-
recursive in ﬁxed dimension. In LICS, pages 1–13. IEEE, 2019.
Ketan Mulmuley. A fast parallel algorithm to compute the rank of a matrix over an arbitrary
ﬁeld. Comb., 7(1):101–104, 1987.
T. Murata. Petri nets: Properties, analysis and applications. Proceedings of the IEEE, 77(4):541–
580, 1989.
Saket Navlakha and Ziv Bar-Joseph. Distributed information processing in biological and com-
putational systems. Communications of the ACM, 58(1):94–102, 2015.
Christos H. Papadimitriou. On the complexity of integer programming. J. ACM, 28(4):765–768,
1981.
Christos H. Papadimitriou. Computational complexity. Academic Internet Publ., 2007.
Amir Pnueli, Jessie Xu, and Lenore D. Zuck. Liveness with (0, 1, infty)-counter abstraction. In
CAV, volume 2404 of Lecture Notes in Computer Science, pages 107–122. Springer, 2002.
Michael E. Pohst and Hans Zassenhaus. Algorithmic algebraic number theory, volume 30 of
Encyclopedia of mathematics and its applications. Cambridge University Press, 1989.
Laura Recalde, Serge Haddad, and Manuel Silva Su´arez. Continuous petri nets: Expressive
power and decidability issues. Int. J. Found. Comput. Sci., 21(2):235–256, 2010.
[SCWB08] David Soloveichik, Matthew Cook, Erik Winfree, and Jehoshua Bruck. Computation with ﬁnite

[Pap07]
[PXZ02]

[RHS10]

[Mur89]

[Mul87]

[Pap81]

[NB15]

[PZ89]

[LS19]

[Son85]

stochastic chemical reaction networks. Nat. Comput., 7(4):615–633, 2008.
Eduardo D. Sontag. Real addition and the polynomial hierarchy. Information Processing Letters,
20(3):115 – 120, 1985.

This work is licensed under the Creative Commons Attribution License. To view a copy of this
license, visit https://creativecommons.org/licenses/by/4.0/ or send a letter to Creative
Commons, 171 Second St, Suite 300, San Francisco, CA 94105, USA, or Eisenacher Strasse
2, 10777 Berlin, Germany

