LEARNING DATA AUGMENTATION POLICIES USING AUGMENTED RANDOM SEARCH

Mingyang Geng1, Kele Xu1, Bo Ding1, Huaimin Wang1 Lei Zhang2

1National University of Defense Technology, Changsha, China
2 Northeastern University, Shenyang, China

8
1
0
2

v
o
N
2
1

]

G
L
.
s
c
[

1
v
8
6
7
4
0
.
1
1
8
1
:
v
i
X
r
a

ABSTRACT

is proposed using reinforcement

Previous attempts for data augmentation are designed
manually, and the augmentation policies are dataset-speciﬁc.
Recently, an automatic data augmentation approach, named
AutoAugment,
learning.
AutoAugment searches for the augmentation polices in the
discrete search space, which may lead to a sub-optimal so-
lution.
In this paper, we employ the Augmented Random
Search method (ARS) to improve the performance of Au-
toAugment. Our key contribution is to change the discrete
search space to continuous space, which will improve the
searching performance and maintain the diversities between
sub-policies. With the proposed method, state-of-the-art
accuracies are achieved on CIFAR-10, CIFAR-100, and Im-
ageNet (without additional data). Our code is available at
https://github.com/gmy2013/ARS-Aug.

Index Terms— Image classiﬁcation, automatic machine
learning, data augmentation, reinforcement learning, aug-
mented random search

1. INTRODUCTION

Neural networks are prone to overﬁt when the labeled data is
limited. Regularization is one of the key components to pre-
vent overﬁtting in the training of deep neural network. Data
augmentation serves as a type of regularization when train-
ing neural networks, and it can greatly reduce the change
of overﬁtting. By generating artiﬁcial training data via
label-preserving transformations of existing training sam-
ples, data augmentation maintains the ability to increase both
the amount and diversity of data [1–3]. Recently, AutoAug-
ment [4] has been proposed to automatic search for better
data augmentation approach that can incorporate invariance
and generalize well across different models and datasets.
AutoAugment enriches the diversity of each policy by intro-
ducing a probability and magnitude for each operation. And it
treats the problem of ﬁnding the best augmentation policy as
a discrete search task and achieves state-of-the-art accuracy
on CIFAR-10, CIFAR-100, SVNH, and ImageNet (without
additional data). However, the probability and magnitude are
divided in a discrete space, which may lead to a sub-optimal
solution. The discrete search task is a common problem in

the ﬁeld of reinforcement learning. The search algorithm
(an RNN controller and the Proximal Policy Optimization
algorithm) chosen by AutoAugment is one of many available
search algorithms to ﬁnd the potential policies. However,
the ﬁnal policy found by AutoAugment may have some dis-
advantages because it contains some sub-policies which are
rarely applied in practice as the probability of an operation
is too small. So we suppose that the rarely-used sub-policies
could be substituted to get better performance if better search
algorithms can be deployed.

Recently, an Augmented Random Search method (ARS)
[5] has shown its immense potential in dealing with contin-
uous control problems. In particular, ARS has been proved
to match or exceed state-of-the-art sample efﬁciency on Mu-
In concrete, it is 15
JoCo locomotion benchmarks [6, 7].
times more computationally efﬁcient than evolution strategy
(ES) [8], which is the fastest competing method. Taking ad-
vantage of the high computational efﬁciency of ARS, we can
explore the large policy space more adequately over many
random seeds and different choices of hyper-parameters. Nat-
urally, with the aim of ﬁnding better-augmented policies, we
explore to apply ARS to the policy search problem.

In more detail, we aim to substitute the discrete search
space with a continuous space while maintaining the efﬁ-
ciency of the search procedure. To achieve this goal, we ﬁrst
apply a sigmoid function to normalize the output. Then, the
normalized output is divided into three categories: operation,
probability, and magnitude. In the implementation, each pol-
icy expresses more accurate states than those generated by
Autoaugment because of the continuous policy space. With
the proposed search approach, state-of-the-art accuracies have
been achieved on the datasets including CIFAR-10, CIFAR-
100, and ImageNet (without additional data). On CIFAR-10,
we achieve an error rate of 1.26%, which is 0.22% better
than the state-of-the-art [4]. On CIFAR-100, we improve
the accuracy of AutoAugment from 10.67% to 10.24%. On
ImageNet, we achieve a Top-1 accuracy of 83.88%.

The followings are organized as: Section 2 describes the
relationship between our work and previous related work.
Section 3 presents the proposed approach, while Section 4
presents the quantitative comparison results. The conclusion
is drawn in Section 5.

 
 
 
 
 
 
2. RELETED WORK

Data augmentation is widely-used for visual recognition
task, while the policies augmentation are designed manually.
Presently, the popular data augmentation approaches include:
(1) geometric transformation, such as scale, shifting, rotation,
ﬂip, afﬁne transformation (such as elastic distortions [2]). (2)
Sample crop and interpolation, such as random Eraser [9],
Mixup [10]. (3) Sample synthetic using Generative Adver-
sarial Neural Networks [11]. In [12], the author proposed to
deploy the augmentation in feature space. All of these manual
augmentation techniques are a form of label-preserving data
augmentation, which relied on the heavy interaction from
the knowledge expert. AutoAugment is proposed in [4] to
ﬁnd the policies from the data in an automatic manner. This
paper aims to improve the performance of AutoAugment by
substituting the discrete search space with the continuous
one.

3. METHOD

We follow the policy deﬁnition of AutoAugment: each sub-
policy consisting of two image operations to be applied in
sequence; each operation is also associated with two hyper-
parameters: 1) the probability of applying the operation,
and 2) the magnitude of the operation [4]. The problem of
augmentation policy search can be formulated as a continu-
ous search problem. Notably, the operations are applied in
the speciﬁed order and the search space for the two hyper-
parameters is continuous, which guarantees a diverse sample
search processing.

We denote our method as ARS-Aug, which build on suc-
cessful heuristics employed in deep reinforcement learning.
The idea of ARS-Aug is to search the best policy directly on
the sphere in parameter space. In concrete, it collects the re-
ward signals on a series of directions in parameter space and
then optimizes the step along each direction to form the best
policy. The reward signal is obtained from the generalization
accuracy of a “child model” (a small neural network which
decreases the training time). The data parallel training across
multiple GPUs using Ray [13] is exploited to speed up the
“child model” training process and collect more reward sig-
nals. For optimizing the steps on each direction to form the ﬁ-
nal best policy, ARS-Aug updates each perturbation direction
δ by the difference of the rewards r(πj,k,+) and r(πj,k,−).
This function quantiﬁes the step to move in a certain direc-
tion. In addition, we improve the updating process by dis-
carding the computation of the update steps on the directions
that yield the least improvement of the reward. This mecha-
nism can guarantee that the update steps are an average over
directions that obtained high rewards.

In order to collect the reward signals, we need to trans-
fer the output of a policy πj,k to the data augmentation pol-
icy. The output πj,k is generated by disturbance on the pol-

Algorithm 1 Augmented Random Search for Data Augmen-
tation
Hyperparameters: step-size α, number of directions sam-
pled per iteration N, standard deviation of the exploration
noise ν, number of top-performing directions to use b.

1: M0 = 0 ∈ R1×30,j = 0;
2: repeat
3:

Sample δ1,δ2,. . . ,δN in R1×30 with i.i.d.

standard

normal entries;

4:

Collect 2N outputs by disturbing the 2N policies,

(cid:26) πj,k,+ = Sigmoid(Mj + νδk),
πj,k,− = Sigmoid(Mj − νδk),

(1)

for k ∈ {1, 2, . . . , N }
Transfer each output πj,k into ﬁve sub-policies based
on the type (operation, probability, magnitude) of each
dimension, and concatenate them into one single policy.
For each generated policy, train a child model using
the policy and get the corresponding reward on the test
set.

Sort the directions δk by max {r(πj,k,+), r(πj,k,−)},
denote by δk the k-th largest direction, and by πj,k,+ and
πj,k,− the corresponding policies.

Make the update step:

5:

6:

7:

8:

Mj+1 = Mj +

α
bσR

b
(cid:88)

k=1

[r (πj,k,+) − r(πj,k,−)] δk (2)

where σR is the standard deviation of the 2b rewards used
in the update step.
j = j + 1

9:
10: until satisfy the ending condition

icy and a sigmoid function for normalizing. The output πj,k
is a 30-dimensional vector, which needs to be transferred to
ﬁve sub-polices, each with two operations, and each opera-
tion requiring an operation type, magnitude, and probability.
For details of the transferring process, we ﬁrst split the 30-
dimensional vector into ten 3-dimensional vectors. Then, for
each 3-dimensional vector a, the three dimensions stand for
operation type (a[0]), probability (a[1]) and magnitude (a[2])
respectively. For the operation type, we discrete the output
space by dividing the interval [0,1] into 16 parts, and then map
the value to the identiﬁer of the sub-interval a[0]/(1/16). The
possibility of each operation is directly represented as the sec-
ond dimension a[1]. Similarly, the magnitude of the operation
is transferred as a[2] × (Operationmax − Operationmin) +
Operationmin.

4. EXPERIMENTAL RESULTS

In this section, we evaluate the performance of ARS-Aug
on the CIFAR-10 [14], CIFAR-100 [14], and ImageNet [15]
datasets. In our experiments, ARS-Aug is implemented with
a parallel version using the Python library Ray [13]. A shared
noise table storing independent standard normal entries is
used in order to avoid the computational bottleneck of com-
municating perturbations δ. This will guarantee that the
workers can communicate indices through the shared noise
table. We also set the random seeds for the generators of
all the workers. The random seeds are distinct from each
other to get a diverse sample efﬁciency. We repeated the
training process 100 times with different random seeds and
hyper-parameters for a thorough search over the policy space.
The random seeds are sampled uniformly from the interval
[0,1000) and are then ﬁxed.

4.1. CIFAR-10 and CIFAR-100 Results

As CIFAR-10 and CIFAR-100 have a close data distribution,
we aim to ﬁnd an augmentation policy which can suit for both
the two datasets. Considering that the search process needs to
take the child models accuracy as the reward signal, we estab-
lish a reduced CIFAR-10 dataset to decrease the training time,
4000 examples are randomly selected to generate the smaller
dataset to decrease the training time. However, the validation
process is stochastic due to the process of randomly choosing
sub-policies and each operations applied probability. To ﬁnd a
suitable number of epochs per sub-policy for ARS-Aug to be
effective, we conduct a series of experiments to ﬁx the most
approximate value. We ﬁnd that 120 epochs are suitable for
ARS-Aug to train the “child model” with ﬁve sub-policies. In
other words, the training time can make the models fully ben-
eﬁt from all of the sub-policies. In addition, we also ﬁx the
training epochs for the datasets (e.g., 1800 epochs for Shake-
Shake on CIFAR-10, and 270 epochs for ResNet-50 on Ima-
geNet).

We now introduce the details for ARS-Aug to ﬁnd the best
augmentation policy. For the child model architecture, we use
small Wide-ResNet-40-2 model, and train for 120 epochs.
The use of a small Wide-ResNet is for computational efﬁ-
ciency. We follow the experimental settings [16]: a weight
decay of 10−4, a learning rate of 0.01, and a cosine learning
decay with one annealing cycle.

It is worthwhile to note that: in order to make full use of
the advantages of augmented policies, the augmented policy
is applied in addition to the standard baseline pre-processing:
on one image, we ﬁrst apply the baseline augmentation pro-
vided by the existing baseline methods, then apply the aug-
mented policy, then apply cutout.

On CIFAR-10, the operations of the policies found by
ARS-Aug have no main difference with those of AutoAug-
ment. However, the probability of each operation has been

optimized since there does not exist the values which are close
to zero. For example, the ”Invert” operation does not appear
in the concatenated policy, which is different from that of Au-
toAugment. This will make room for more meaningful oper-
ations and increase the diversity of the whole policy. In ad-
dition, the value of magnitude is more accurate (two decimal
places) than that of AutoAugment (one decimal), which gives
a more precise measurement of the inﬂuence brought by each
operation.

The importance of diversity in Augmented policies has
been demonstrated in AutoAugment. The hypothesis that
more sub-policies will improve the generalization accuracy
has been validated [4], and the validation accuracy improves
with more sub-policies up to about 25 sub-policies. There-
fore, we concatenate 25 sub-policies and form a single policy
to train on the full datasets.

We now show the advantage of policies found by ARS-
Aug on CIFAR-10. We choose six neural network architec-
tures to make a quantitative comparison with AutoAugment.
In order to guarantee a fair comparison, we ﬁrst ﬁnd the most
approximate hyper-parameters for weight decay, and learning
rate that give the best validation set accuracy with baseline
augmentation. All the other implemented details are the same
as reported in the papers which introduce the corresponding
models [17–19]. As shown from Table 1, the test set accu-
racies of ARS-Aug beat AutoAugment on all the test mod-
els. Additionally, we achieve an error rate of 1.26% with the
ShakeDrop [19] model, which is 0.22% better than AutoAug-
ment.

Table 1. Test set error rates (%) on CIFAR-10. Lower is
better.

Model

AutoAugment ARS-Aug

Wide-ResNet-28-10
Shake-Shake (26 2×32d)
Shake-Shake (26 2×96d)
Shake-Shake (26 2×112d)
AmoebaNet-B (6,128)
PyramidNet + ShakeDrop

2.68
2.47
1.99
1.89
1.75
1.48

2.33
2.14
1.68
1.59
1.49
1.26

We also train three models on CIFAR-100 with the same
policy found by ARS-Aug on reduced CIFAR-10; The results
are shown in Table 2. Taking advantage of the sampling efﬁ-
ciency of ARS-Aug, it outperforms AutoAugment 0.43% on
the error rate.

4.2. ImageNet Results

Similarly to the above experiments, we apply the same
method on ImageNet to ﬁnd the best-augmented policies. All
the implemented details follow those of AutoAugment. The
best policies found on ImageNet mainly focus on color-based
and Rotation transformation, which have some similarity with

Fig. 1. The policies learned by ARS-Aug for ImageNet. The policies can be used to generate augmented data given an original
image used to train a neural network. We visualize the stochastic in applying the sub-policies by showing how one example
image can be transformed differently in different mini-batches. As it can be seen, most of the policies found on ImageNet used
color-based transformations.

Table 2. Test set error rates (%) on CIFAR-100. Lower is
better.

Model

AutoAugment ARS-Aug

Wide-ResNet-28-10
Shake-Shake (26 2×96d)
PyramidNet+ShakeDrop

17.09
14.28
10.67

16.64
13.86
10.24

those found on CIFAR-10. We then concatenate the best ﬁve
sub-policies for ImageNet training with the same details of
AutoAugment. From Table 3, we can see that the accuracies
on all the models are optimized. To our best knowledge, there
only exists a better result of 14.6% Top-1 error rate [20],
which takes advantage of a large amount of weakly labeled
extra data. An illustrative example of selected policies from
ARS-Aug is visualized in Fig. 1.

Table 3. Validation set Top-1 / Top-5 error rates (%) on Ima-
geNet.

Model

AutoAugment ARS-Aug

ResNet-50
ResNet-200
AmoebaNet-B (6,190)
AmoebaNet-C (6,228)

22.37/6.18
20.00/4.99
17.25/3.78
16.46/3.52

22.09/5.98
19.76/4.67
16.88/3.47
16.12/3.28

5. CONCLUSION

We have proposed an augmented random search method
ARS-Aug for searching better data augmentation policies
compared with AutoAugment. The discrete search space
of AutoAugment has been changed to a continuous space
to improve the searching performance. By fully taking ad-
vantage of the higher sample efﬁciency of ARS, ARS-Aug
can ﬁnd better policies for data augmentation and achieve
state-of-the-art accuracy on CIFAR-10, CIFAR-100, and Im-
ageNet (without additional data). Our work still has some
limitations. For example, the datasets we select are limited to
the vision domain. Therefore, we consider our future work
to apply our automatic augmentation approach to the au-
dio/speech domain and try other search strategies to improve
the performance and efﬁciency.

6. ACKNOWLEDGMENT

This work is partially supported by the National Natural Sci-
ence Foundation of China (nos. 61751208)). The authors
would like to acknowledge useful discussions and helpful
suggestions from Zhifeng Gao (Microsoft Asia).

7. REFERENCES

[1] A. Krizhevsky, I. Sutskever, and G. E. Hinton, “Ima-
genet classiﬁcation with deep convolutional neural net-
works,” in Advances in neural information processing
systems, 2012, pp. 1097–1105.

2009. CVPR 2009. IEEE Conference on.
pp. 248–255.

Ieee, 2009,

[16] I. Loshchilov and F. Hutter, “Sgdr: Stochastic gra-
dient descent with warm restarts,” arXiv preprint
arXiv:1608.03983, 2016.

[17] S. Zagoruyko and N. Komodakis, “Wide residual net-
works,” arXiv preprint arXiv:1605.07146, 2016.

[18] X. Gastaldi,

“Shake-shake

regularization,”

arXiv

preprint arXiv:1705.07485, 2017.

[19] Y. Yamada, M. Iwamura, and K. Kise, “Shakedrop reg-

ularization,” arXiv preprint arXiv:1802.02375, 2018.

[20] D. Mahajan, R. Girshick, V. Ramanathan, K. He,
M. Paluri, Y. Li, A. Bharambe, and L. van der Maaten,
“Exploring the limits of weakly supervised pretraining,”
arXiv preprint arXiv:1805.00932, 2018.

[2] P. Y. Simard, D. Steinkraus, and J. C. Platt, “Best prac-
tices for convolutional neural networks applied to vi-
sual document analysis,” in International Conference on
Document Analysis and Recognition, 2003, p. 958.

[3] H. S. Baird, H. Bunke, and K. Yamamoto, Structured
document image analysis. Springer Science & Business
Media, 2012.

[4] E. D. Cubuk, B. Zoph, D. Mane, V. Vasudevan, and
Q. V. Le, “Autoaugment: Learning augmentation poli-
cies from data,” arXiv preprint arXiv:1805.09501, 2018.

[5] H. Mania, A. Guy, and B. Recht, “Simple random search
provides a competitive approach to reinforcement learn-
ing,” arXiv preprint arXiv:1803.07055, 2018.

[6] G. Brockman, V. Cheung, L. Pettersson, J. Schneider,
J. Schulman, J. Tang, and W. Zaremba, “Openai gym,”
arXiv preprint arXiv:1606.01540, 2016.

[7] E. Todorov, T. Erez, and Y. Tassa, “Mujoco: A physics
engine for model-based control,” in Intelligent Robots
and Systems (IROS), 2012 IEEE/RSJ International Con-
ference on.
IEEE, 2012, pp. 5026–5033.

[8] T. Salimans, J. Ho, X. Chen, S. Sidor, and I. Sutskever,
“Evolution strategies as a scalable alternative to rein-
forcement learning,” arXiv preprint arXiv:1703.03864,
2017.

[9] Z. Zhong, L. Zheng, G. Kang, S. Li, and Y. Yang,
“Random erasing data augmentation,” arXiv preprint
arXiv:1708.04896, 2017.

[10] H. Zhang, M. Cisse, Y. N. Dauphin, and D. Lopez-Paz,
“mixup: Beyond empirical risk minimization,” arXiv
preprint arXiv:1710.09412, 2017.

[11] I. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu,
D. Warde-Farley, S. Ozair, A. Courville, and Y. Bengio,
“Generative adversarial nets,” in Advances in neural in-
formation processing systems, 2014, pp. 2672–2680.

[12] T. DeVries and G. W. Taylor, “Dataset augmentation in
feature space,” arXiv preprint arXiv:1702.05538, 2017.

[13] P. Moritz, R. Nishihara, S. Wang, A. Tumanov, R. Liaw,
E. Liang, W. Paul, M. I. Jordan, and I. Stoica, “Ray:
A distributed framework for emerging ai applications,”
arXiv preprint arXiv:1712.05889, 2017.

[14] A. Krizhevsky and G. Hinton, “Learning multiple lay-
ers of features from tiny images,” Citeseer, Tech. Rep.,
2009.

[15] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and
L. Fei-Fei, “Imagenet: A large-scale hierarchical image
database,” in Computer Vision and Pattern Recognition,

