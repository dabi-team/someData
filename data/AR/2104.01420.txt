A Design Process of Visual Analytics Application using Conceptual Graph

Lei Shi
Beihang University

1
2
0
2

r
p
A
3

]

C
H
.
s
c
[

1
v
0
2
4
1
0
.
4
0
1
2
:
v
i
X
r
a

ABSTRACT

State-of-the-art visual analytics techniques in application domains
are often designed by VA professionals over qualitative requirement
collected from end users. These VA techniques may not leverage
users’ domain knowledge about how to achieve their analytical goals.
In this position paper, we propose a user-driven design process of VA
applications centered around a new concept called analytical repre-
sentation (AR). AR features a formal abstraction of user requirement
and their desired analytical trails for certain VA application, and is
independent of the actual visualization design. A conceptual graph
schema is introduced to deﬁne the AR abstraction, which can be
created manually or constructed by semi-automated tools. Designing
VA applications with AR provides a shared opportunity for both opti-
mal analysis blueprint from the perspective of end users and optimal
visualization/algorithm from the perspective of VA designers. We
demonstrate the usage of the design process in two case studies.

1 INTRODUCTION

1.1 Background

Visual analytics (VA) is coined as “the science of analytical rea-
soning facilitated by interactive visual interfaces” [32], or more
speciﬁcally, “combines automated analysis techniques with inter-
active visualizations” [20]. In the new century, VA emerges as a
promising methodology in the ﬁeld of visualization and data science.
Numerous successful VA applications have been presented in the
annual VAST conference [1], contributing to key domains such as
ﬁnance [12], urban computing [6], machine learning [36], and many
others. Yet, state-of-the-art VA applications generally have indi-
rect domain user involvement in their design process. Among six
example papers on VA application & system category provided in
the VIS’20 website [4], ﬁve papers reported certain kind of user re-
quirement or task analysis, the other paper mentioned little from the
end user’s perspective. In most of these works, raw input from end
users is ﬁrst summarized by VA experts (normally the authors) into
list-based requirement/task, and then referenced in the VA design
process. Domain users do not directly contribute to the VA frame-
work constructed for their applications. Notably, only one example
paper planned the detailed analytical reasoning process of their VA
solution in the design phase, for which the authors themselves were
domain experts on the application of scientiﬁc literature analysis [8].
Promoting domain user involvement in the VA design process to
a level beyond qualitative requirement analysis adopted in classi-
cal visualization research can be beneﬁcial. First, compared with
visualization problems mostly dealing with ﬁxed data types, VA
applications are often built over more complex customer data where
not all data input in their raw form are applied in solving the cus-
tomer problem. Picking the right data source, selecting the most
appropriate analysis direction all demand thorough understanding
of user requirement and deep knowledge about the domain. This
calls for closer involvement of end users in the VA design process.
Second, existing requirement/task analyses in VA applications result
in unstructured, textual lists as design guidelines. These guidelines

normally vary a lot across VA applications. The ﬁnal VA pipeline
constructed in each application, though carefully follows these spe-
ciﬁc guidelines, is often seen as an one-time case-by-case design.
It is difﬁcult to reuse successful VA applications to automate the
design in future. Third, from industry’s perspective, the deﬁciency of
domain user involvement in VA applications potentially slows down
the adoption of the technology in the mass. By contrast, the growing
popularity of software such as Tableau [3] and Microsoft Power
BI [2] witnesses the democratization of information visualization
(InfoVis) techniques. Commodity users can freely drag-and-drop
data items to gain much control of the visualization design, which
may be one important reason of its success. Meanwhile, the widest
spontaneous usage of VA technology outside the visualization com-
munity is seen in the deep learning ﬁeld where the black-box models
are analyzed and visualized for interpretability. Interestingly, many
of these VA applications are constructed by machine learning experts
who can gain full control of the design process as domain users. A
similar call to embrace customers in the visualization community
has been made many years before by Lorensen [23].

1.2 Related Work

A central topic of visualization and VA research has been its de-
sign and implementation process. Card et al. proposed the InfoVis
reference model [11], a standard pipeline to create interactive visu-
alization from source data. Keim et al. illustrated a VA paradigm
to integrate visualization with automatic data analysis methods for
interactive decision support [20]. The visual information seeking
mantra by Shneiderman suggested a golden rule in designing the ex-
ploration process with visualization [30]. Mckenna et al. presented
a design activity framework composed of four critical activities for
designing visualizations: understand, ideate, make, and deploy [24].
All these high-level theories for visualization design might have
been followed by many designers, but most of them do not consider
the problem of getting direct involvement of end users in the VA
design process. The theories help to modularize the implementation
of each visualization stage, but provide little guidance in reusing VA
solutions for customer problems. On implementing visualization
software, a number of design patterns have been summarized in the
literature [17] [14]. Nevertheless, our work focuses on the VA design
process, which is generally independent of its implementation.

More relevant to our study, the dataﬂow network used in scien-
tiﬁc visualization (SciVis) [16] provides low-level abstraction of
data analysis and visualization pipeline for each application. By
integrating with software toolkits [27] and user interfaces such as
VisTrails [7], the dataﬂow model allows greater user involvement
in the visualization design. End users could fulﬁll their requirement
and evaluate the visualization performance in the same interactive
interface. Typically, SciVis experts behave as both end users and
visualization designers in these applications. Compared with the
dataﬂow model, we consider a different scenario in VA applications
where domain users are normally not visualization and algorithm
experts. These nonprofessionals may integrate their demand into
the analytical pipeline of VA application through the dataﬂow-like
model, but probably can not assemble the optimal visualization and
algorithm choice, because of their lack of expertise in the VA ﬁeld.
In the InfoVis community, Chi and Riedl also proposed a data state
model for visualization applications [15], which can be seen as a
dual form of the dataﬂow model. The data state model is mainly

 
 
 
 
 
 
Figure 1: (a) Conceptual graph, (b) its adaptation for AR, and (c) an example of AR schema and (d)(e) visualization instances.

used to characterize visualization techniques with a focus on their
interaction aspect. In contrast, we study the abstraction of user
requirement/task in VA applications, which can be independent of
their detailed visualization and interaction design.

Related to our work, the user tasks accomplished in visualization
were intensively discussed in the literature. Shneiderman proposed
a task by data type taxonomy which includes seven data types (1D,
2D, etc.) and seven visualization tasks (overview, zoom, etc.) [30].
Stasko summarized ten low-level analysis tasks in understanding
data with visualization [5], which were compiled over existing low-
level task taxonomies [35]. Brehmer and Munzner studied both
low-level and high-level visualization tasks and proposed a multi-
level typology to orchestrate the task design space [10]. Similar
researches have also been conducted on the taxonomy and design
space of visualization tasks with the multidimensional approach [28],
in cubic views [26], from the perspective of user interaction [18],
and for certain data types [22] [33]. These existing studies on clas-
sifying visualization tasks are orthogonal to our goal of promoting
user involvement to fulﬁll their tasks in VA applications. In fact, we
borrowed some of the high-level task taxonomy in deﬁning the task
node in the representation of user requirement for visual analytics.
Notably, our work is also motivated by Munzner’s nested model for
visualization design [25], which decouples domain problem charac-
terization (user requirement), data/operation abstraction (analysis
and visualization task), and visualization design (user performance).
The VA design process introduced here partially fulﬁlls Munzner’s
nested model in the ﬁrst and second levels of abstraction.

1.3 Two-Stage VA Design Process

Getting user involvement in VA design brings the immediate chal-
lenge of having unprofessional visualizations. The main idea of this
work is to allow structured input of domain requirement/knowledge
from end users, while imposing the separation of satisfying user
requirement from optimizing visualization performance in VA ap-
plications. To achieve this idea, a two-stage VA design process is
proposed. In the ﬁrst stage, an abstraction of end user’s visual analy-
sis trail is described in the form of data analysis and visualization
tasks. The abstraction is independent of the visualization design
so that end users can get involved in this stage to the largest extent
without caring about the genre and performance of ﬁnal visualization
design. In the second stage, the ﬁrst-stage abstraction is translated
by VA designers into the classical VA pipeline, through optimally
selecting data analysis algorithms and visualizations, e.g. by the
design activity framework of Mckenna et al. [24]. The optimal
VA design can not only be used in the current application, but also
recorded in VA knowledge base indexed by structured requirements,
which facilitates reuse/automation of VA applications.

Provisioning the two-stage VA design process is more difﬁcult
than envisioning it. How to isolate user requirement from their
performance when the two are often entangled in visual analytics?

How to design the abstraction in the ﬁrst stage to minimize the
gap for end user’s direct involvement while ensuring formality for
faithful translation into optimal VA designs in the second stage? We
make two contributions to address these challenges.

• The new concept of analytical representation (AR) is intro-
duced as the abstraction of user requirement and analytical
trails in VA applications. We propose a formal method using
conceptual graph to describe the intension of AR, and using
complementary visualization and algorithm instances to illus-
trate its extensions. End users could precisely integrate their
desired visual analytics tasks into AR and offer VA designers
a detailed blueprint for constructing VA applications.

• The VA design process with AR is presented and evaluated.
Case study results show that by the new design process, visual
analytics in our sample applications are made both adaptive and
dedicated to solving end user’s domain problems. In the cases,
the design process generates VA pipelines that are compatible
to existing reference models.

2 ANALYTICAL REPRESENTATION
2.1 Deﬁnition
Analytical representation is the visualization-independent abstrac-
tion of relevant data and processing for certain visual analytics
application. Primarily, AR is deﬁned for and used in VA scenarios
where domain problems are solved by combining automated data
analysis and human-in-the-loop visualization. The main body of AR
is the abstraction of required trails of data analysis and visualization
from the view of end users. Most importantly, the abstraction is
independent of the actual visualization design and data analysis algo-
rithms. In a sense, AR could be the mental map of end users on how
to solve a domain problem using the combination of data analysis
and visualization, though he may not know and need not know the
detailed method in each step of visual analysis. Figure 1(c) gives
an example of AR schema for citation inﬂuence analysis by linked
high-level task abstractions on data analysis and visualization.

Empowered by the concept and tool to create AR, end users could
focus on the requirement and domain knowledge for VA applications,
without considering the performance using particular visualization
design. The AR abstraction can be exempliﬁed by automatically gen-
erated visualization instances, which help end users early evaluate
the effectiveness of VA applications at the design stage. End users
could iterate AR blueprint using evaluation result as feedback. AR
itself also serves as a quantitative index of knowledge base for VA
best practices. Building such knowledge base could push forward
the reuse, automation, and ﬁnally wider adoption of VA technology.

2.2 AR Schema by Conceptual Graph
To achieve formalism in analytical representation, we propose to use
conceptual graph (CG) to deﬁne the schema of AR. Historically, CG

Person:JohnBetweenrockplacehardSentence: John is between a rock and a hard place.ConceptualGraphAnalyticalRepresentationConceptNodeRelationNodeDataNodeAnalysisTask NodeVis. TaskNodeAttr.nD:PapersnD:CitationsExtract:Full citationInfluenceNetwork:FullcitationinfluencegraphSummarize:InfluencegraphstructureNetwork:Influence graph sum marization1D: Text summ. of paper clustersSummarize:Content of paperclustersPresent:CitationinfluencetopicsPresent&Explore:Graph structure(a)(c)(b)(e)(d)T1TaskT2TaskFor T2TaskFor T1Task[nD:papers][nD:citations][Network:full-citation-influence-graph]...[Network:influence-graph-summarization]<Extract:full-citation-influence:papers,citations:full-citation-influence-graph>...(Present,Explore:graph-structure:influence-graph-summarization)...is ﬁrst invented to represent database schema and natural language
(see an example in Figure 1(a) ) [31], and later extended to support
a wider scope of knowledge representation [13]. AR, deﬁned as the
representation of end user’s requirement and domain knowledge for
certain VA application, is also a kind of knowledge representation.
This is the main reason we apply CG as the schema of AR. Addition-
ally, the expressive power of labeled graph notation in CG allows
the level of abstraction in AR deﬁnition.

There are necessary adaptations from the initial deﬁnition of CG
to the schema of AR, which is illustrated in Figure 1(b). CG is
originally composed of the concept nodes and the relation nodes.
The concept node is altered to the data node in AR (boxes in Figure
1(c)). Each data node has a data type and a data instance. The
relation node is altered to two classes of nodes: the analysis task
node (diamonds in Figure 1(c)) and the visualization task node
(circles in Figure 1(c)). Each task node has a task type and a task
target. Directed arcs connecting nodes in AR represent data ﬂows.
The key concept of AR is the typed node representation. Each
class of nodes can deﬁne its own type ontology, i.e., a multi-level
category (lattice) of types. For data nodes, we use the taxonomy
by Shneiderman as the top-level category for data types [30]: 1D,
2D, 3D, nD, temporal, tree, network. A different taxonomy can
also ﬁt in depending on the usage scenario of AR. For visualization
task nodes, we advocate the use of high-level task taxonomy as its
type category, as low-level task nodes can make the abstraction of
AR overly detailed and less reusable. In this work, we apply the
high-level task typology by Brehmer and Munzner [10]: present,
produce, explore, identify, etc. Again, using a different high-level
visualization task taxonomy is possible. Analysis task nodes are not
our focus, any ontology of data analysis algorithms will work.

In the example of Figure 1(c), a visual analysis trail on the citation
inﬂuence of a scientiﬁc paper is represented by the adapted CG form
of AR schema. As end users expect, a full citation inﬂuence graph
of the paper should be extracted and summarized. Then s/he wants
to visualize and interactively explore the inﬂuence graph summa-
rization (T2 visualization task). Also, the user wants to be presented
a text summarization of paper clusters in the graph to understand
the citation inﬂuence content (T1 visualization task). Inherited from
CG notations, the schema of AR can also be represented in a textual
format known as Conceptual Graph Interchange Format (CGIF). The
bottom line of Figure 1(c) gives part of this format for the example.
The CGIF of AR can be analyzed by symbolic computation, similar
to knowledge reasoning and inference on CGs.

CG is an abstract schema of AR. Beyond the abstraction, end
users also need a preview and early evaluation of the VA design over
the AR schema. We propose to link each visualization task node
in AR with at least one instance. The instances can be retrieved
from the knowledge base of VA designs indexed by AR graphs and
nodes. With sufﬁcient VA applications input to the knowledge base,
the instance can be automatically recommended as the design of
the best-matched or most-representative task node in the knowledge
base for the current node. Figure 1(d)(e) presents artiﬁcial instances
for the two visualization task nodes in Figure 1(c). A standard tag
cloud visualization is mapped to T1 visualization task node [34]. A
specialized visualization for clustered citation graph [29] is selected
for T2 task node. If necessary, algorithm instances of the analysis
task node can also be delivered to end users for evaluation.

2.3 Comparison to Other Concepts

AR is related to many existing concepts, but there are clear dis-
tinctions. Data representation is the class of methods primarily
used to prepare data for machine computing and is not designed for
visualization purpose. Visual representation, on the other hand, de-
scribes the mapping from data to visualization, but does not consider
domain-speciﬁc VA tasks. AR can be seen as a concept between
data and visual representation with the focus to abstract high-level

Figure 2: The design process of VA applications with AR.

data analysis and visualization tasks for certain VA application.

In the knowledge representation community, ontology and knowl-
edge graph are widely adopted. They are used for the representation
of subjects and entities in one ﬁeld, while AR is used as the represen-
tation of VA tasks in certain application. Graphical models such as
neural networks are designed to represent data distributions, which
are special types of data representation. They are not at the same
level as AR in the pipeline of visual data analysis.

3 DESIGNING VISUAL ANALYTICS WITH AR

Figure 2 suggests a reference model for designing VA applications
with AR. In the ﬁrst half of the model before AR, user requirement
is analyzed to characterize VA tasks separately on data analysis and
visualization. These tasks and available data input for the application
are connected according to end user’s desired visual analytics trail
of the application. We note that end users can compose an AR of
the application solely by themselves, but the participation of VA
designers in this stage is highly recommended. Users may not be
familiar with the category system of VA tasks and the capability
of related visualizations and algorithms. An alternative AR design
approach is to automatically extract AR blueprint from visualization
sketches of the end user. The automated approach can be highly
challenging and is not the focus of this work.

In the second half of the model in Figure 2, VA designers and
algorithm designers create the actual visualizations used in the VA
application and select appropriate algorithms for the data analysis.
These visualizations and algorithms should cover all task nodes
speciﬁed in the AR blueprint. The AR-based VA design process
exhibits a clear advantage in that designers may pick visualizations
and algorithms according to their experience and expertise, and can
also leverage the AR knowledge base storing the design of qualiﬁed
VA applications. The knowledge base can suggest or even automate
the design of certain AR task nodes using existing best practices.
Another advantage of the proposed VA design process lies in that
the output is still a standard VA pipeline. Every stage is already
decided in the design process and can be implemented by VA system
programmers in the same way with previous VA applications.

4 CASE STUDY

We present two case studies to demonstrate the usage of AR-based
design process for VA applications. In the ﬁrst case study, we show
how the integration of domain knowledge and user requirement
in AR can allow clearer path towards user’s analytical goal. The
background is the well-known application of parallel coordinates
visualization (PCP) by Inselberg in analyzing the production dataset
of VLSI chips [19]. The dataset is composed of 16 variables: X1 and
X2 are yield and quality of each production batch; X3 ∼ X12 are the
number of defects in ten types; X13 ∼ X16 are physical parameters
of each batch. Through iterative navigation of the dataset with PCP,
several data patterns are found to help maintain both high batch yield
and quality, including a small range of X3, X6, and X15.

DataCollection1D2D3DnDtemporaltreenetworkVisualizationTaskAnalyticalRepresentationVisualizationDesignAnalysisTaskAnalysisAlgorithmpresentexplore............extractclassify............GraphVizTagCloud............LRLDA............Visual AnalyticsPipelineVis.DataModelKnowledgeCitation app.VLSI app.End user(&VA designer)VA &algorithm designerVA system programmerAR knowledge baseOwner:Figure 3: VLSI chip production case: (a) AR schema; (b)(c)(d) visualization instances. Citation analysis case: (e) AR; (f)(g) visualization instances.

While we applaud for the detective ingenuity of the author, there
is also doubt about whether ordinary users can discover the same
pattern with PCP. In an alterative approach using visual analytics
and AR, users start from their requirement, i.e., to obtain high
yield and quality in a batch. By VLSI literature [21], it is also
common sense for domain users that yield and quality (X1,X2) can
be modeled by #defects (X3 ∼ X12), which are further determined by
physical parameters (X13 ∼ X16). With this domain knowledge, we
believe end users can achieve the AR design of Figure 3(a), albeit
certain variations among users. In their design, X1 and X2 are ﬁrst
visually correlated to clarify the analytical goal: what is the desired
high range of yield and quality (see the red circle in the scatterplot
instance of Figure 3(b))? To answer which defects affect the most
on high yield/quality, predictive models can be built and visually
analyzed. In simpliﬁed instances by the regression model and visreg
visualization [9] (Figure 3(c)), users could easily identify X3 and
X6 as key types of defects for chip yield and quality where X1 (X2)
changes signiﬁcantly with X3 (X6) outside the selected high range
in red. Adding these dimensions to lookup the desired physical
parameters (X13 ∼ X16), the PCP instance in Figure 3(d) suggests a
small range of X15, the same pattern detected by Inselberg.

The second case study shows that the VA design process with
AR helps to distinguish between different user requirement for the
same domain problem. In our previous work, we have developed
a VA system for citation inﬂuence analysis, whose AR schema has
been used as the example in Figure 1(c). During the research cycle,
we also received from reviewers and other academic users about
different opinions of our work. Notably, they consider the citation
inﬂuence of a paper as the direct 1-hop citation network from the
original paper, instead of the full citation network measuring the
inﬂuence on a ﬁeld. In addition, they also want to understand the
temporal dynamics of the inﬂuence, which is not considered by us.
By the AR-based design, the new user requirement can be satisﬁed
by simply revising the AR blueprint. As shown in Figure 3(e), the
extract task node is changed to analyze 1-hop citation inﬂuence. The
summarize inﬂuence graph node is removed as there may not be
many nodes in the 1-hop citation inﬂuence graph. The time dimen-
sion is incorporated in most task nodes and a new visualization task
node is added to identify evolution patterns from citation inﬂuence
(T2). The visualization instances in Figure 3(f)(g) clearly reﬂect the
different user requirement in comparison to the previous instances
(Figure 1(d)(e)). Using AR-based VA design process, both similar
and divergent user requirement can be represented and executed,
which effectively enhances the reusability of VA applications.

5 DISCUSSION

As a preliminary framework, the current AR design process does
have limitations. First, AR speciﬁes analytical trails in VA applica-

tions, but it is not designed for explorative visual analytics in which
end users have little knowledge about the domain and/or do not have
clear analytical goal. The deﬁciency can be alleviated by adding a
feedback mechanism to the AR design process. An initial AR can
be constructed from general-purpose analysis tasks. After gaining
new knowledge and potential analytical goals in the domain, users
can update the AR design by translating the new knowledge/goal
into visual analytics trails. Repeating the design process helps to
solve domain problems with VA techniques.

Second, there are threats in constructing AR. End users may not
have the capability to summarize their requirement into appropriate
task nodes and an accurate AR schema. While VA designers can
certainly provide support through direct communication, we believe
that the end users designing VA applications with AR should have
moderate skills in data analytics, though they may not be visual-
ization experts. Unlike automatic data analysis applications such
as data mining, visual analytics inherently require end users to un-
derstand and manipulate the data analysis process. For these users,
composing AR blueprints should be possible with training. In addi-
tion, semi-automated AR construction tools providing taxonomies
and instances of visualization/analysis tasks will further reduce the
barrier for the proposed VA design process.

Third, as a position paper, many remaining work need to be
carried out along the direction. The existing taxonomies of data
types, analysis and visualization tasks should be studied for the
best ﬁt in AR design. The design automation tool for AR will also
expedite the usage of AR-based VA applications. The theory and
implementation of AR knowledge base is another promising future
work towards democratization and reusability of VA applications.

6 CONCLUSION

Synthesizing end user’s requirement and their domain knowledge
is challenging in existing VA applications. In this position paper,
we show that it is possible to formally abstract this critical informa-
tion by a new concept called analytical representation. AR adopts
the conceptual graph as its schema and can be evaluated through
extended visualization instances. Designing VA applications with
AR enjoys three advantages. First, AR could be used as a blueprint
for solving speciﬁc domain problem following the analytical trails
recommended by end users. Second, the visualization-independent
nature of AR allows the optimization of visualization and algorithm
designs in the application through separate effort of VA/algorithm
designers. Third, the abstraction enables quantiﬁcation of VA de-
signs and the establishment of VA knowledge base, so that design
automation and reuse of VA applications can be expected. We also
present two case studies to demonstrate the desired advantages of
the new design process.

1D:X11D:X2Present&browse:CorrelationT1 Task1D:X31D:X12Predict:X1Predict:X2Model:X1(X3,...,X12)Present&Explore &Identify:ModelT2 TaskPresent&Lookup:Multi-dim. distributionT3 TasknD:X13……X16nD:X3……X12……Model:X2(X3,...,X12)select var. rangeselect dim.1D:X11D: X21D:X11D: X31D: X61D:X2…………X16X15X14X13X3(a)(b)(c)(d)For T1 TaskFor T2 TaskFor T3 TasknD:PapersnD:CitationsExtract:1-hop citationInfluence& timeNetwork:Timestamped 1-hop citation influence1D:Text summarization of content evolution(e)Summarize:Content evolution of citation InfluencePresent:Topics of citation influencePresent&Explore:Dynamic      ego graphIdentify:Evolution pattern of citation influenceT1TaskT2TaskT3TaskFor T1&T2 Task(f)(g)For T2&T3 Tasktion design and evaluation. Information Visualization, 15(4):288–300,
2016.

[27] W. J. Schroeder, L. S. Avila, and W. Hoffman. Visualizing with vtk:
a tutorial. IEEE Computer Graphics and Applications, 20(5):20–27,
2000.

[28] H.-J. Schulz, T. Nocke, M. Heitzler, and H. Schumann. A design
space of visualization tasks. IEEE Transactions on Visualization and
Computer Graphics, 19(12):2366–2375, 2013.

[29] L. Shi, H. Tong, J. Tang, and C. Lin. Vegas: Visual inﬂuence graph
summarization on citation networks. IEEE Transactions on Knowledge
and Data Engineering, 27(12):3417–3431, 2015.

[30] B. Shneiderman. The eyes have it: A task by data type taxonomy for
information visualizations. In Proceedings of IEEE Symposium on
Visual Languages, pp. 336–343, 1996.

[31] J. F. Sowa. Conceptual structures: information processing in mind and

machine. 1983.

[32] J. J. Thomas and K. A. Cook. Illuminating the Path: The Research and
Development Agenda for Visual Analytics. National Visualization and
Analytics Center, 2005.

[33] E. R. Valiati, M. S. Pimenta, and C. M. Freitas. A taxonomy of
tasks for guiding the evaluation of multidimensional visualizations.
In Proceedings of the 2006 AVI workshop on beyond time and errors:
novel evaluation methods for information visualization, pp. 1–6, 2006.
[34] F. B. Viegas, M. Wattenberg, and J. Feinberg. Participatory visualiza-
tion with wordle. IEEE Transactions on Visualization and Computer
Graphics, 15(6):1137–1144, 2009.

[35] S. Wehrend and C. Lewis. A problem-oriented classiﬁcation of visual-
ization techniques. In Proceedings of IEEE Visualization, pp. 139–143,
1990.

[36] K. Wongsuphasawat, D. Smilkov, J. Wexler, J. Wilson, D. Mane,
D. Fritz, D. Krishnan, F. B. Vi´egas, and M. Wattenberg. Visualiz-
IEEE
ing dataﬂow graphs of deep learning models in tensorﬂow.
Transactions on Visualization and Computer Graphics, 24(1):1–12,
2017.

REFERENCES

[1] IEEE Conference on Visual Analytics Science and Technology, 2006–

2020. http://vis.computer.org/visweek2010/vast/.
[2] Microsoft powerbi, 2020. https://powerbi.microsoft.com/.
[3] Tableau, 2020. https://www.tableau.com/.
[4] Vast paper types, 2020. http://ieeevis.org/year/2020/info/

call-participation/vast-paper-types.

[5] R. Amar, J. Eagan, and J. Stasko. Low-level components of analytic ac-
tivity in information visualization. In Proceedings of IEEE Symposium
on Information Visualization, pp. 111–117, 2005.

[6] G. Andrienko and N. Andrienko. Spatio-temporal aggregation for
visual analysis of movements. In Proceedings of IEEE Symposium on
Visual Analytics Science and Technology, pp. 51–58, 2008.

[7] L. Bavoil, S. P. Callahan, P. J. Crossno, J. Freire, C. E. Scheidegger,
C. T. Silva, and H. T. Vo. Vistrails: Enabling interactive multiple-view
visualizations. In Proceedings of IEEE Visualization, pp. 135–142,
2005.

[8] F. Beck, S. Koch, and D. Weiskopf. Visual analysis and dissemination
of scientiﬁc literature collections with survis. IEEE Transactions on
Visualization and Computer Graphics, 22(1):180–189, 2015.

[9] P. Breheny and W. Burchett. Visualization of regression models using

visreg. The R Journal, 9(2):56–71, 2017.

[10] M. Brehmer and T. Munzner. A multi-level typology of abstract vi-
sualization tasks. IEEE Transactions on Visualization and Computer
Graphics, 19(12):2376–2385, 2013.

[11] S. K. Card, J. D. Mackinlay, and B. Shneiderman. Readings in Infor-

mation Visualization: Using Vision to Think. Academic Press, 1999.

[12] R. Chang, M. Ghoniem, R. Kosara, W. Ribarsky, J. Yang, E. Suma,
C. Ziemkiewicz, D. Kern, and A. Sudjianto. Wirevis: Visualization of
categorical, time-varying data from ﬁnancial transactions. In Proceed-
ings of IEEE Symposium on Visual Analytics Science and Technology,
pp. 155–162, 2007.

[13] M. Chein and M.-L. Mugnier. Graph-based knowledge representation:
computational foundations of conceptual graphs. Springer Science &
Business Media, 2009.

[14] H. Chen. Toward design patterns for dynamic analytical data visual-
ization. In Proceedings of SPIE Visualization and Data Analysis, vol.
5295, pp. 75–86, 2004.

[15] E. H.-h. Chi and J. T. Riedl. An operator interaction framework for visu-
alization systems. In Proceedings of IEEE Symposium on Information
Visualization, pp. 63–70, 1998.

[16] D. S. Dyer. A dataﬂow toolkit for visualization.
Graphics and Applications, 10(4):60–69, 1990.

IEEE Computer

[17] J. Heer and M. Agrawala. Software design patterns for information visu-
alization. IEEE Transactions on Visualization and Computer Graphics,
12(5):853–860, 2006.

[18] J. Heer and B. Shneiderman. Interactive dynamics for visual analysis.

Communications of the ACM, 55(4):45–54, 2012.

[19] A. Inselberg. Multidimensional detective. In Proceedings of IEEE

Symposium on Information Visualization, pp. 100–107, 1997.

[20] D. Keim, G. Andrienko, J.-D. Fekete, C. G¨org, J. Kohlhammer, and
G. Melanc¸on. Visual analytics: Deﬁnition, process, and challenges. In
Information Visualization, pp. 154–175. Springer, 2008.

[21] I. Koren and A. D. Singh. Fault tolerance in vlsi circuits. Computer,

23(7):73–83, 1990.

[22] B. Lee, C. Plaisant, C. S. Parr, J.-D. Fekete, and N. Henry. Task
taxonomy for graph visualization. In Proceedings of the AVI workshop
on beyond time and errors: novel evaluation methods for information
visualization, pp. 1–5, 2006.

[23] B. Lorensen. On the death of visualization. In NIH/NSF Proc. Fall
2004 Workshop Visualization Research Challenges, vol. 1, 2004.
[24] S. McKenna, D. Mazur, J. Agutter, and M. Meyer. Design activity
framework for visualization design. IEEE Transactions on Visualiza-
tion and Computer Graphics, 20(12):2191–2200, 2014.

[25] T. Munzner. A nested model for visualization design and valida-
tion. IEEE Transactions on Visualization and Computer Graphics,
15(6):921–928, 2009.

[26] A. Rind, W. Aigner, M. Wagner, S. Miksch, and T. Lammarsch. Task
cube: A three-dimensional conceptual space of user tasks in visualiza-

