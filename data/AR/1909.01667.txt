0
2
0
2

n
u
J

8

]

O
L
.
s
c
[

5
v
7
6
6
1
0
.
9
0
9
1
:
v
i
X
r
a

Complexity of controlled bad sequences over ﬁnite
sets of Nd
A. R. Balasubramanian∗
Technical University of Munich
Munich, Germany
bala.ayikudi@tum.de

Abstract
We provide upper and lower bounds for the length of con-
trolled bad sequences over the majoring and the minoring
orderings of ﬁnite sets of Nd . The results are obtained by
bounding the length of such sequences by functions from
the Cichon hierarchy. This allows us to translate these re-
sults to bounds over the fast-growing complexity classes.

The obtained bounds are proven to be tight for the ma-
joring ordering, which solves a problem left open by Abri-
ola, Figueira and Senno (Theor. Comp. Sci, Vol. 603). Finally,
we use the results on controlled bad sequences to prove up-
per bounds for the emptiness problem of some classes of
automata.

CCS Concepts: • Theory of computation → Complex-
ity classes; Program veriﬁcation.

Keywords: well-quasi orders, controlled bad sequences, ma-
joring and minoring ordering

ACM Reference Format:
A. R. Balasubramanian. 2020. Complexity of controlled bad sequences
over ﬁnite sets of Nd . In Proceedings of the 35th Annual ACM/IEEE
Symposium on Logic in Computer Science, July 8–11, 2020. ACM,
New York, NY, USA, 19 pages. https://doi.org/10.1145/3373718.3394753

1 Introduction
A well-quasi order (wqo) over a set A is a reﬂexive and transi-
tive relation ≤A such that every inﬁnite sequence x0, x1, x2, . . .
over A has an increasing pair xi ≤A xj with i < j. A normed
wqo (nwqo) is a wqo (A, ≤A) which has a norm function
| · | : A → N such that the pre-image of n under | · | is ﬁnite
for every n. A sequence over a wqo is called a bad sequence

∗Work done when the author was an intern at LSV, ENS-Saclay Paris

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. Copyrights for compo-
nents of this work owned by others than ACM must be honored. Abstract-
ing with credit is permitted. To copy otherwise, or republish, to post on
servers or to redistribute to lists, requires prior speciﬁc permission and/or
a fee. Request permissions from permissions@acm.org.
LICS ’20, July 8–11, 2020, Saarbrücken, Germany
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-7104-9/20/07. . . $15.00
https://doi.org/10.1145/3373718.3394753

if it contains no increasing pair. Hence, all bad sequences
over a well-quasi order are necessarily ﬁnite.

Well-quasi orders are an important tool in logic, combina-
torics and computer science as evidenced by their applica-
tions in term-rewriting systems [8], algorithms [9, 16] and
veriﬁcation of inﬁnite state systems [1, 2, 12]. Indeed, well-
quasi orders form the backbone for the ubiquitous well-structured
transition systems (wsts) [1, 12], whose coverability problem
is shown to be decidable thanks to well-quasi orders.

In recent years, signiﬁcant eﬀort has been put in to under-
stand the complexity of the coverability procedure for vari-
ous well-structured transition systems (See [4, 6, 11, 17, 20]
and also [19] for a catalogue of many problems). The key
idea behind proving upper bounds for the coverability al-
gorithm is the following: For a given class of wsts, the run-
ning time of the coverability procedure for that class can
be bounded by the length of controlled bad sequences of the
underlying normed well-quasi order (See deﬁnition 2.4 for
a formal deﬁnition of controlled bad sequences). Intuitively,
for a function д and a number n, a sequence x0, x1, x2, . . . , xl
is called a (д, n)-controlled bad sequence if |x0| ≤ n, |x1| ≤
д(n), |x2| ≤ д(д(n)) and so on. A simple application of Konig’s
lemma can be used to show that for every n, there is a (д, n)-
controlled bad sequence of maximum length. Hence, for ev-
ery function д we can deﬁne a length function which maps
a number n to the length of the longest (д, n)-controlled bad
sequence.

The main observation made in [4, 6, 11, 17, 19, 20] is that,
for various classes of well-structured systems, an upper bound
on the running time of the coverability procedure could be
obtained by bounding the length function of some speciﬁc
д over the underlying wqo of that class. Motivated by this,
upper bounds on the length of controlled bad sequences
have been obtained for various well-quasi orders: The prod-
uct ordering over Nd ([11]), the lexicographic ordering over
Nd ([4]), the multiset ordering over multisets of Nd ([4]),
the subword ordering over words [20] and the linear order-
ing over ordinals [18], to name a few. Using these results,
time bounds have been established for the following prob-
lems (See [19] for a more detailed overview): coverability
of lossy counter machines, coverability and termination of
lossy channel systems, coverability of unordered data nets,
emptiness of alternating 1-register and 1-clock automata,
the regular Post embedding problem, conjunctive relevant

 
 
 
 
 
 
LICS ’20, July 8–11, 2020, Saarbrücken, Germany

A. R. Balasubramanian

implication and 1-dimensional VASS universality. The present
work is a contribution in this ﬁeld of inquiry.

Our contributions:

In this paper, we prove lower and
upper bounds on the length of controlled bad sequences
for the majoring and minoring ordering (See deﬁnition 2.9)
over the collection of all ﬁnite sets of Nd (hereafter denoted
by Pf(Nd )). Both orderings have been used to prove the de-
cidability of the emptiness problem for some classes of au-
tomata in [14] and [10]. Our main results are the following:

• We show that if the function д is primitive recursive,
then the length function of д for the majoring order-
ing over Pf(Nd ) is bounded by a function in the com-
plexity class F
ω d −1 (For a deﬁnition of F
ω d −1 , see sec-
tion 7). We also show that the length function of д for
the minoring ordering over Pf(Nd ) is bounded by a
function in F

ω d −1 ·2d

• To complement the upper bounds, we also provide
lower bounds on the length functions. We prove the
existence of a primitive recursive (in fact, polynomial)
function д such that the length function of д over the
majoring ordering is bounded from below by a func-
tion in F
ω d −1 . A similar result is also obtained for the
minoring ordering.

• We use the upper bounds on the length functions to
provide upper bounds on the running time for the
emptiness problem of some classes of automata oper-
ating on trees.

Related work: Length functions for the majoring order-
ing over Pf(Nd ) was considered in [4], where the authors
proved an upper bound of F
ω d . However no lower bound
was provided and the authors left open the question of the
tightness of their bound. Our results (theorems 7.1, 7.2) show
that their bound is not optimal and gives tight upper and
lower bounds. Some results concerning the minoring order-
ing were presented in [3], but no bounds on the length func-
tion were proven. To the best of our knowledge, we provide
the ﬁrst upper bounds for length functions of the minoring
ordering over Pf(Nd ).

Our techniques: Various results regarding length func-
tions have been proven using the notion of a reﬂection from
one normed wqo to another (See deﬁnition 3.3 of [20] or def-
inition 2.12). A reﬂection is a map from one nwqo A to an-
other nwqo B, which satisﬁes some properties on the order
and norm. If a reﬂection exists from A to B it can be easily
proven that the length function of д over A is less than the
length function of д over B. However, it turns out that re-
ﬂections are not suﬃcient for our purposes. To this end, we
deﬁne a generalization of reﬂections called polynomial re-
ﬂections (See deﬁnition 2.12). We show that if a polynomial
reﬂection exists from A to B, then bounds on the length func-
tion for д over A can be easily transferred to bounds on the
length function for h over B, where h is a function obtained
by composing a polynomial with д.

We then show that there exists a polynomial reﬂection
from the set of ordinals less than ωω d −1
(with the usual ordi-
nal ordering) to Pf(Nd ) with the majoring ordering (Lemma
3.1). This enables us to establish a lower bound for the ma-
joring ordering in terms of lower bounds for the order on
ordinals, which are already known ([18]).

The upper bound for the majoring ordering is proved by
following the framework established by Schmitz and Sch-
noebelen in a series of papers ([11, 18, 20]), which we brieﬂy
describe here. It is well known that using the descent equa-
tion, the length function for a nwqo can be expressed in-
ductively by length functions over its “residuals”. However,
the residuals of a nwqo can become extremely complex to
derive any useful bounds for the length function. To over-
come this, we associate an ordinal to each residual (called
the order type) and a non-trivial “derivative” operator for
each ordinal. We then show that in the descent equation,
we can replace the residuals of a nwqo with the derivative
operator of the order type of that nwqo, which are much
more amenable to analysis. Once this is carried out, we ex-
ploit some properties of the derivative operator along with
some facts about the Cichon hierarchy and ordinal ordering
to establish bounds on the length function.

The lower bound for the minoring ordering is established
by giving a simple polynomial reﬂection from the majoring
ordering to the minoring ordering (Lemma 5.1). By using
the lower bounds proved for the majoring ordering, we can
infer lower bounds for the minoring ordering. Finally, the
upper bound for the minoring ordering is established by giv-
ing a non-trivial polynomial reﬂection from the minoring or-
dering to a cartesian product of various majoring orderings
(Lemma 6.2). The intuition behind the reﬂection is discussed
in detail in section 6.

Outline of the paper: We recall basic notions of wqos, or-
dinals and sub-recursive hierarchies in section 2. In sections
3 and 4 we prove lower and upper bounds for the majoring
ordering in terms of functions from the Cichon hierarchy.
Similar results are proved in sections 5 and 6 for the mi-
noring ordering. We give a classiﬁcation of these bounds in
the fast-growing hierarchy in section 7. Finally, we conclude
with providing some applications of our results in 8.

2 Preliminaries
We recall some basic facts about well-quasi orders (see [5]).
A quasi ordering (qo) over a set A is a relation ≤ such that
≤ is reﬂexive and transitive. We write x < y if x ≤ y and
y (cid:2) x. We also say x ≡ y if x ≤ y and y ≤ x. A well-quasi
ordering (wqo) over a set A is a qo ≤ such that for every
inﬁnite sequence x0, x1, x2, . . . , there exists i < j such that
xi ≤ xj . A norm function over a set A is a function | · | : A →
|x | < n} is
N such that for every n ∈ N the set {x ∈ A :
ﬁnite.

Complexity of controlled bad sequences over finite sets of Nd

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

Deﬁnition 2.1. A normed wqo is a wqo (A, ≤A, |·|A) equipped
with a norm function | · |A.

The set A will be called as the domain of the nwqo. If
(A, ≤A, | · |A) is a nwqo and S ⊆ A then the nwqo induced
by S is the nwqo (S, ≤S , | · |S ) where ≤S and | · |S are the
restrictions of ≤A and | · |A on S respectively. We use the
notation A≤n to deﬁne the set {x ∈ A : |x | ≤ n}. Whenever
the order ≤A or the norm | · |A is clear from the context, we
will drop those and just refer to the nwqo by the domain A.

Example 2.2. (Some basic nwqos) : The set of natural num-
bers with the usual ordering and the identity norm (N, ≤
, id) is clearly seen to be a nwqo. Another nwqo is any ﬁ-
nite set {a0, a1, . . . , ak−1} such that distinct letters are un-
ordered and |ai | = 0 for every i. We will denote this nwqo
by Γk . Notice that Γ0 is the empty nwqo.

Given two nwqos A and B we write A ≡ B when A and B
are isomorphic structures. In particular the norm functions
must be preserved by the isomorphism.

Good, bad and controlled sequences
Deﬁnition 2.3. A sequence x0, x1, . . . over a qo (A, ≤A) is
called good if there exists i < j such that xi ≤A xj . A se-
quence which is not good is called bad. Notice that every
bad sequence in a wqo is necessarily ﬁnite.

Deﬁnition 2.4. A control function is a mapping д : N → N.
For an n ∈ N, a sequence x0, x1, . . . over a nwqo A is (д, n)-
controlled if

i times

∀i ∈ N, |xi |A ≤ дi (n) =

д(д(. . . (д(n))))
z
{

}|

By a straightforward application of Konig’s lemma, we
have the following proposition: (See proposition 2.5 of [20])

Proposition 2.5. Let A be a nwqo and let д be a control
function. For every n ∈ N, there exists a ﬁnite maximum
length L ∈ N for (д, n)-controlled bad sequences over A.

Therefore the above proposition lets us deﬁne a function
LA,д : N → N which for every n ∈ N, assigns the maximum
length of a (д, n)-controlled bad sequence over A. We will
call this the length function of A and д. From now on, we
assume that д is a strictly increasing inﬂationary function
(Here inﬂationary means that д(n) ≥ n for all n ∈ N).

Descent equation
We can express the length function by induction over nwqos.
To do this we need the notion of residuals.

Deﬁnition 2.6. Let A be a nwqo and x ∈ A. The residual
A/x is the nwqo induced by the subset A/x := {y ∈ A : x (cid:2)A
y}

We have the following proposition: (See proposition 2.8

of [20])

Proposition 2.7.

LA,д(n) = max
x ∈A≤n

{1 + LA/x,д(д(n))}

This equation is called the descent equation. The descent
equation implies that unraveling the length function induc-
tively gives us a way of computing it. If A ) A/x0 ) A/x0/x1 )
. . . , it follows that x0, x1, . . . is a bad sequence and so the
inductive unraveling of proposition 2.7 is well founded.

2.1 Constructing Normed Wqo’s

In this section, we will see how to construct “complex” nwqos
in terms of more simpler nwqos. The constructions we use
in this paper are disjoint sums, cartesian products and ﬁnite
powersets.

Deﬁnition 2.8. (Disjoint sum and cartesian product) Let A1
and A2 be two nwqos. The disjoint sum A1 + A2 is the nwqo
given by

A1 + A2 := {(i, x) : i ∈ {1, 2} and x ∈ Ai }

(i, x) ≤A1+A2 (j, y) ⇔ i = j and x ≤Ai y

|(i, x)|A1+A2 := |x |Ai

The cartesian product A1 × A2 is the nwqo given by

A1 × A2 := {(x1, x2) : x1 ∈ A1, x2 ∈ A2}

(x1, x2) ≤A1×A2 (y1, y2) ⇔ x1 ≤A1 y1 and x2 ≤A2 y2
|(x1, x2)|A1×A2 := max(|x1|A1, |x2|A2)
It is well known that both A1 + A2 and A1 × A2 are nwqos
when A1 and A2 are. Of special interest to us is the cartesian
product (Nd , ≤Nd , | · |Nd ) which is obtained by taking carte-
sian product of (N, ≤, id) with itself d times. From now on,
whenever we refer to the underlying order of Nd , we will
always mean this cartesian product ordering.

Deﬁnition 2.9. (Majoring and minoring orderings) Let A
be a nwqo. We construct two nwqos whose domain will be
the set of all ﬁnite subsets of A, which we denote by Pf(A).
The ﬁrst is called the majoring ordering and is deﬁned as
Pf(A) := {X : X ⊆ A and X is ﬁnite}
Pf(A) Y ⇔ ∀x ∈ X , ∃y ∈ Y such that x ≤A y
|X |Pf(A) := max({|x |A : x ∈ X }, card(X ))
Here card(X ) denotes the cardinality of the set X .

X ⊑maj

The second is called the minoring ordering and it has the
same domain and the norm as that of the majoring ordering.
The diﬀerence lies in the ordering, which is given by
Pf(A) Y ⇔ ∀y ∈ Y , ∃x ∈ X such that x ≤A y

X ⊑min

The fact that (Pf(A), ⊑maj
Pf(A)

, | · |Pf(A)) is a nwqo easily fol-

lows from Higman’s lemma ([13]). However (Pf(A), ⊑min
Pf(A)
, | · |Pf(A)) is not necessarily a nwqo whenever A is ([3]). But,
it is known that (Pf(Nd ), ⊑min
, | · |Pf(Nd )) is a nwqo for ev-
Pf(Nd )
ery d (See [3]). Whenever there is no confusion, we drop the

     
     
LICS ’20, July 8–11, 2020, Saarbrücken, Germany

A. R. Balasubramanian

Pf(A) as a subscript and refer to the majoring (resp. minor-
ing ) nwqo as (Pf(A), ⊑maj) (resp. (Pf(A), ⊑min)).

The results that we prove in this paper will only concern
the nwqos (Pf(Nd ), ⊑maj, |·|Pf(Nd )) and (Pf(Nd ), ⊑min, |·|Pf(Nd )).
However, for the purposes of our proofs, we also need the
following wqos which can be seen as extensions of the ma-
joring and minoring ordering to the set of all subsets of a
wqo.

Deﬁnition 2.10. (Arbitrary subsets) Let (A, ≤A) be a wqo
and let P(A) denote the set of all subsets (ﬁnite and inﬁnite)
of A. Let X , Y ∈ P(A). We deﬁne,

X ⊑maj Y ⇐⇒ ∀x ∈ X , ∃y ∈ Y such that x ≤A y
X ⊑min Y ⇐⇒ ∀y ∈ Y , ∃x ∈ X such that x ≤A y

Further given X ∈ P(A) deﬁne,
• min(X ) := {x ∈ X : ∀x ′ ∈ X , [x ′ (cid:2)A x =⇒ x ≡ x ′]}
• ↑ X = {a : ∃x ∈ X , x ≤A a}
• ↓ X = {a : ∃x ∈ X , a ≤A x }

Notice that if ≤A is also guaranteed to be antisymmetric,
then min(X ) is always a ﬁnite set, irrespective of whether X
is ﬁnite or inﬁnite. Also, observe that we do not endow P(A)
with a norm.

Proposition 2.11. Let X , Y ∈ P(Nd ). The following facts
are known about (P(Nd ), ⊑maj) and (P(Nd ), ⊑min) (see [3]):

1. The ordering (P(Nd ), ⊑maj) is a wqo
2. The ordering (P(Nd ), ⊑min) is a wqo
3. X ⊑maj Y ⇐⇒ ↓ X ⊑maj↓ Y
4. X ⊑min Y ⇐⇒ ↑ X ⊑min↑ Y
5. X ⊑maj Y ⇐⇒ Nd \ ↓ X ⊑min Nd \ ↓ Y
6. X ⊑min Y ⇐⇒ Nd \ ↑ X ⊑maj Nd \ ↑ Y
7. X ⊑min Y ⇐⇒ min(X ) ⊑min min(Y )

Reﬂections

A major tool to prove lower and upper bounds on the length
of controlled bad sequences is the notion of a normed reﬂec-
tion (See deﬁnition 3.3 of [20]). However, for our purposes
we require the following notion of a polynomial normed re-
ﬂection.

Deﬁnition 2.12. A polynomial nwqo reﬂection is a mapping
r : A → B such that there exists a polynomial q : N → N
and

∀x, y ∈ A : r (x) ≤B r (y) implies x ≤A y
∀x ∈ A : |r (x)|B ≤ q(|x |A)
If these conditions are satisﬁed then we say that r is a poly-
nomial nwqo reﬂection with polynomial q and denote it by
q
֒−→ B. If the polynomial q is the identity function, we

r : A
call it a nwqo reﬂection and denote it by r : A ֒→ B.

It is easy to see that if r : A

polynomial nwqo reﬂections, then r ′ ◦ r : A

q
֒−→ B and r ′ : B
q′◦q
֒−−−→ C is also

q′
֒−→ C are

a polynomial nwqo reﬂection. Further, reﬂections are also
a precongruence with respect to disjoint sums and cartesian
products, i.e.,

q
֒−→ B and r ′ :
q′
֒−→ B′ are polynomial nwqo reﬂections. Then there exists
q+q′
֒−−−→ B + B and

Proposition 2.13. (See A.1) Suppose r : A
A′
functions s and p such that s : A + A′
p : A × A′

q+q′
֒−−−→ B × B′.

We have the following important result regarding poly-

nomial nwqo reﬂections.

(See A.2) Let r

p
֒−→ B be a poly-
Proposition 2.14.
nomial nwqo reﬂection. Then LA,д(n) ≤ LB, (q◦д)(q(n)) for
some polynomial q. Further if p is increasing and inﬂation-
ary, then it suﬃces to take q = p.

: A

2.2 Ordinals and subrecursive hierarchies

Since all our results will be phrased in terms of functions
in the Cichon hierarchy, we recall basic facts about ordinals
and subrecursive hierarchies in this section.

Ordinal terms
For basic notions about ordinals and its ordering, we refer
the reader to [18]. We will use Greek letters α, β, . . . to de-
note ordinals and ≤ to denote the ordering on ordinals. We
will always use λ to denote limit ordinals.

An ordinal α has the general form (also called the Cantor
Normal Form) α = ω β1 + ω β2 + · · · + ω βm where β1, . . . , βm
are ordinals such that β1 ≥ β2 ≥ · · · ≥ βm. For an ordinal
α, we let CNF(α) denote the set of all ordinals strictly less
than α. For the purposes of this paper, we will restrict our-
selves to ordinals in CNF(ϵ0) (where ϵ0 is the supremum of
ω, ωω, ωω ω , · · · )

c times

}|

For c ∈ N, let ω β · c denote

ω β + · · · + ω β . We sometimes
write ordinals in a strict form as α = ω β1 · c1 + ω β2 · c2 +
z
{
· · · + ω βm · cm where β1 > β2 > · · · > βm and the coef-
ﬁcients ci must be strictly bigger than 0. Using the strict
form, we deﬁne a norm N on CNF(ϵ0) as follows: if α =
ω β1 · c1 + ω β2 · c2 + · · · + ω βm · cm in the strict form then
N α = max{c1, . . . , cm, N β1, . . . , N βm }. It is not very hard
to notice that for every α < ϵ0, the set CNF(α)≤n is always
ﬁnite for any n. Hence for every α < ϵ0, we have a nwqo
(CNF(α), ≤, N ).

We ﬁnish this sub-section with the deﬁnitions of natural

sum (⊕) and natural product (⊗) for ordinals in CNF(ϵ0):

ω βi ⊕

ω βi ⊗

m

Õi =1

m

Õi =1

n

Õj=1

n

Õj=1

ω β ′

j :=

ω β ′

j :=

m+n

ωγk

Õk=1

m

n

Êi =1

Êj=1

ω βi ⊕β ′

j

           
           
Complexity of controlled bad sequences over finite sets of Nd

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

where γ1 ≥ γ2 · · · ≥ γm+n is a rearrangement of β1, . . . , βm,
1, . . . , β ′
β ′
n.
As mentioned before, all our results will be obtained by
providing reﬂections to and from the ordinal ordering. Hence,
it is important to understand how “fast” the length of con-
trolled bad sequences in the ordinal ordering can grow. For
this purpose, we introduce sub-recursive hierarchies.

Sub-recursive hierarchies

For the purposes of describing the length of controlled bad
sequences over the ordinal ordering, the hierarchies of Hardy
and Cichon are suﬃcient [7]. However, before we introduce
them we need some preliminary deﬁnitions.

A fundamental sequence for a limit ordinal λ is a sequence

(λ(x))x <ω with supremum λ, which we ﬁx to be,
(γ +ω β +1)(x) := γ +ω β · (x + 1),

(γ +ωλ)(x) := γ +ωλ(x )

The predecessor Px of an ordinal α > 0 at x ∈ N is given

by

Px (α + 1) := α,

Px (λ) := Px (λ(x))

Let h : N → N be a function. The Hardy hierarchy for the

function h is given by (hα )α <ϵ0 where

h0(x) := x,

hα (x) := hPx (α )(h(x))

and the Cichon hierarchy (hα )α <ϵ0 is deﬁned as
hα (x) := 1 + hPx (α )(h(x))

h0(x) := 0,

We also deﬁne another hierarchy called the fast growing

hierarchy as follows:
fh, 0(x) = h(x),

fh, α +1(x) = f x +1

h, α (x),

fh, λ(x) = fh, λx (x)

Here f i

h, α denotes i-fold composition of fh, α with itself.

Let Lα,д(n) denote the the length of the longest (д, n)-
controlled bad sequence in CNF(α). The following theorem
states that, for large enough n, the length function Lα,д and
the function дα in the Cichon hierarchy coincide.

Theorem 2.15. (Theorem 3.3 of [18]) Let α < ϵ0 and n ≥
N α. Then Lα,д(n) = дα (n).

3 Lower bound for majoring ordering
In this section we prove a lower bound for length functions
over (Pf(Nd ), ⊑maj, | · |Pf(Nd )). The lower bound is presented
in terms of functions over the Cichon hierarchy.

The following lemma follows an unpublished idea of Abri-
ola, Schmitz and Schnoebelen, which has been adapted to
controlled bad sequences here.

Lemma 3.1. There exists a poly. nwqo reﬂection

R : (CNF(ωω d −1

), ≤, N )

φ

֒−→ (Pf(Nd ), ⊑maj, | · |Pf(Nd ))

where φ(x) = x(x + 1)d .

Proof. We decompose the proof into three parts. As a ﬁrst
step, we deﬁne the map R from CNF(ωω d −1) to Pf(Nd ). In
the second step, we show that R(γ ) ⊑maj R(ζ ) =⇒ γ ≤ ζ .
In the third step, we show that |R(γ )|Pf(Nd ) ≤ φ(Nγ ) where
N is the norm deﬁned on ordinals in section 2.2.
First step. Let γ ∈ CNF(ωω d −1) such that the Cantor normal
form of γ is ω β1 + ω β2 + · · · + ω βl . Notice that each βi ∈
CNF(ωd −1) and hence can be written as βi = ωd −2 ·c(i,d −2) +
ωd −3 · c(i,d −3) + · · · + ω0 · c(i, 0) where the coeﬃcients ci, j can
be 0. The map R is then deﬁned on γ as

R(γ ) := {(i, c(i, 0), c(i, 1), . . . , c(i,d −2)) : 1 ≤ i ≤ l }
Second step. We now show that if R(γ ) ⊑maj R(ζ ) then
γ ≤ ζ . Instead of proving this we prove the contrapositive,
namely: If γ > ζ then R(γ ) @maj R(ζ ).

Let γ ∈ CNF(ωω d −1) such that γ := ω β1 + ω β2 + · · · + ω βp
and β1 ≥ β2 ≥ · · · ≥ βp . Further let each βi := ωd −2·c(i,d −2)+
ωd −3 · c(i,d −3) + · · · + ω0 · c(i, 0). Let ζ ∈ CNF(ωω d −1) such that
ζ := ωη1 + ωη2 + · · · + ωηq and η1 ≥ η2 ≥ · · · ≥ ηq. Further
let each ηi := ωd −2 · e(i,d −2) + ωd −3 · e(i,d −3) + · · · + ω0 · e(i, 0).
Suppose γ > ζ . Hence, there exists i ∈ {1, . . . , p} such that

• Either βi > ηi (or) i > q and
• ∀j such that 0 ≤ j < min(i, q), βj = ηj
Let x := (i, c(i, 0), c(i, 1), . . . , c(i,d −2)). By construction of the
map R we have that x ∈ R(γ ). For every j ∈ {1, . . . , q}, let
yj := (j, e(j, 0), e(j, 1), . . . , e(j,d −2)). By construction of the map
R we have that R(ζ ) = {y1, . . . , yq }. We will now show that
x (cid:2)Nd yj for each j. We consider two cases:

• Case 1:

j < i. Therefore ηj = βj . Hence yj := (j, c(j, 0),

. . . , c(j,d −2)). Since j < i, we have that x (cid:2)Nd yj .

• Case 2:

j ≥ i. Therefore βi > ηi ≥ ηj . Suppose x ≤Nd
yj . Hence (i, c(i, 0), . . . , c(i,d −2)) ≤ (j, e(j, 0), . . . , e(j,d −2))
and so (c(i, 0), . . . , c(i,d −2)) ≤ (e(j, 0), . . . , e(j,d −2)). But
this means that βi ≤ ηj which leads to a contradic-
tion. Hence we have that x (cid:2)Nd yj .

Therefore x (cid:2)Nd yj for every j and so we have R(γ ) @maj

R(ζ ).

|R(γ )|Pf(Nd )

Third step. We now show that |R(γ )|Pf(Nd ) ≤ φ(Nγ ). Let
γ ∈ CNF(ωω d −1) such that the Cantor normal form of γ is
ω β1 + ω β2 + . . . ω βl . Further let each βi
:= ωd −2 · c(i,d −2) +
ωd −3 · c(i,d −3) + · · · + ω0 · c(i, 0). It is clear that
= max(l, {c(i, j)}1≤i ≤l

(1)
Suppose γ in the strict form looks like: ωγ1 · e1 + ωγ2 · e2 +
· · · +ωγm ·em where γ1 > γ2 > · · · > γm and each ei > 0. No-
tice that l =
m
i =1 ei . Further it is also easy to observe that for
all i ∈ {1, . . . , m}, there exists j ∈ {1, . . . , l } such that γi =
βj . With this observation, just unraveling the deﬁnition of
the norm function N implies that

0≤j ≤d −2)

Í

Nγ = max(d − 2, {ei }1≤i ≤m, {ci, j }1≤i ≤l

0≤j ≤d −2)

(2)

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

A. R. Balasubramanian

(i,d −3)

+ ωd −3 · c ′

(i, 0) where each c ′

Since each γi ∈ CNF(ωd −1), we can write each γi as ωd −2 ·
+ · · · + ω0 · c ′
c ′
(i, j) ≤
(i,d −2)
Nγi ≤ Nγ . Notice that each γi is uniquely determined by its
(i,d −2)), i.e., if γi , γj then (c ′
coeﬃcients (c ′
, . . . ,
(i,d −2)) , (c ′
c ′
(j,d −2)). Therefore we have an injec-
tive map from {γi
: 1 ≤ i ≤ m} to the set {x : x ∈
|x |Nd −1 ≤ Nγ }. It then follows that m ≤ (Nγ + 1)d .
Nd −1,
Hence

, . . . , c ′
, . . . , c ′

(i, 0)

(j, 0)

(i, 0)

m

m

l =

ei ≤

Nγ ≤

(N γ +1)d

Nγ = φ(Nγ )

Õi =1

Õi =1

Õi =1

By equations (1) and (2) this implies that |R(γ )|Pf(Nd ) ≤ φ(Nγ ).

(cid:3)

Therefore by applying proposition 2.14 and theorem 2.15

we have,
Theorem 3.2. Let α = ωω d −1
n ≥ N (ωω d −1). Then

, φ(x) = x(x + 1)d and let

дα (n) = Lα,д(n) ≤ L(Pf(Nd ), ⊑maj), (φ◦д)(φ(n))

4 Upper bound for majoring ordering
In this section we will prove upper bounds on the length
of controlled bad sequences for the majoring ordering over
Pf(Nd ). The upper bounds are proven by following the frame-
work established by Schmitz and Schnoebelen in a series
of papers([20],[11],[18]) to prove upper bounds for various
well-quasi orders.

We consider the family of nwqos obtained from

{(Pf(Nd ), ⊑maj)}d >0 and {Γd }d ∈{0, 1} by taking disjoint sums
and cartesian products. We call this family of nwqos the ma-
joring powerset nwqos. From now on, we will denote major-
ing powerset nwqos as a triple (A, ≤maj
, | · |A) where A is the
A
domain of the nwqo, ≤maj
A is the underlying order and | · |A
is the norm.

Similar to the proof of upper bounds for the subword or-
dering in [20], we introduce an ordinal notation for each
majoring powerset nwqo, called the type of that nwqo. The
type of a nwqo will turn out to be useful in bounding the cor-
responding length function using subrecursive hierarchies.
Notice that if α ∈ CNF(ωω ω ) then α can always be de-
j=1 ωω di, j . (Here the empty prod-
composed as α =
uct is taken to be 1 and the empty sum is taken to be 0).
É
We now map each majoring powerset nwqo to an ordinal in
CNF(ωω ω ) as follows:
o(Γ0) = 0,

o(Γ1) = 1,

m
i =1

Ë

ji

o(Pf(Nd )) = ωω d −1
o(A × B) = o(A) ⊗ o(B)

o(A + B) = o(A) ⊕ o(B),

Also with each ordinal α ∈ CNF(ωω ω ) we can associate
a canonical majoring powerset nwqo, which we will denote
by C(α).

C(α ⊕ β) = C(α) + C(β),
It can be easily seen that the operators o and C are bijec-
tive inverses of each other (modulo isomorphism of nwqos).

C(α ⊗ β) = C(α) × C(β)

Derivatives
The next step is to deﬁne a derivative operator for ordinals.
To this end, for each n ∈ N, we deﬁne a Dn operator as
follows:
Dn(k) = k−1,

Dn(ω) = n+1,

) = ωω d −1 ·(d +1)n

Dn(ωω d

k

Dn(ωω p1 +ω p2 +···+ω pk ) =

Dn(ωω pi ) ⊗

ωω pj

Êi =1  
Using this operator, we deﬁne a ∂n operator as follows:

Ìj,i

!

m

∂n

Õi =1

ω βi

=

!

(

Dn(ω βi ) ⊕

ω βj

| i = 1, . . . , m

Êj,i

)

Notice that if α = ω β then ∂n(α) = {Dn(α)}.
Proposition 4.1. (See B.1) If β ∈ ∂n(α) then β < α

The following theorem lets us forget the actual underly-

ing nwqo and remember only its type.

Theorem 4.2. (See B.2) Let A be a majoring powerset nwqo
and let α = o(A). If X ∈ A≤n, then there exists α ′ ∈ ∂n(α)
such that there exists a nwqo reﬂection r : A/X ֒→ C(α ′).

Since o and C are inverses of each other, by combining

the descent equation and theorem 4.2 we get,

Lemma 4.3. (See B.3)

LC (α ),д(n) ≤ max

α ′ ∈∂n (α )

{1 + LC (α ′),д(д(n))}

Upper bound using subrecursive hierarchies
Given α ∈ CNF(ωω ω ) deﬁne
Mα,д(n) = max
α ′ ∈∂n (α )

{1 + Mα ′,д(д(n))}

From the deﬁnition of Mα (n) and lemma 4.3, it is clear that
LC (α ),д(n) ≤ Mα,д(n) or in other words, LA,д(n) ≤ Mo(A),д(n)
for any majoring powerset nwqo A. Therefore, in what fol-
lows, we will concentrate on proving upper bounds for Mα,д(n).
Let α ∈ CNF(ωω ω ). We will say that α is k-lean if N α ≤ k.
Let h(x) = 4x ·д(x) where д is the control function. We have
the following important theorem:

Theorem 4.4. (See B.4) If α is k-lean and n > 0 then Mα,д(n) ≤
hα (4kn)

Using theorem 4.4 and the fact that LA,д(n) ≤ Mo(A),д(n),

we have the following:

Theorem 4.5. Let A be any majoring powerset nwqo such
that o(A) is k-lean. Then for n > 0, we have LA,д(n) ≤
Mo(A),д(n) ≤ ho(A)(4kn) where h(x) = 4x · д(x).

C(0) = Γ0,

C(1) = Γ1,

C(ωω d

) = Pf(Nd +1)

In particular,

 
Complexity of controlled bad sequences over finite sets of Nd

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

Corollary 4.6. Let α = ωω d −1

and let n > 0. Then

L(Pf(Nd ), ⊑maj),д(n) ≤ hα (4dn)

where h(x) = 4x · д(x).

5 Lower bound for minoring ordering
We give a lower bound on the length of controlled bad se-
quences for the nwqo (Pf(Nd ), ⊑min, | · |Pf(Nd )) by giving a
polynomial nwqo reﬂection from (Pf(Nd ), ⊑maj, | · |Pf(Nd )) to
(Pf(Nd ), ⊑min, | · |Pf(Nd )).
Lemma 5.1. There exists a poly. nwqo reﬂection

R : (Pf(Nd ), ⊑maj, | · |Pf(Nd ))

p

֒−→ (Pf(Nd ), ⊑min, | · |Pf(Nd ))

where p(x) = d(x + 1).

Proof. Similar to lemma 3.1, we split the proof into three
parts. In the ﬁrst part, we deﬁne the reﬂection R. In the sec-
ond part we show that R(X ) ⊑min R(Y ) =⇒ X ⊑maj Y .
Finally, we prove that |R(X )|Pf(Nd ) ≤ p(|X |Pf(Nd )).
First part. The reﬂection R is deﬁned as the following sim-
ple map: Given a set X ∈ Pf(Nd ), let R(X ) := min(Nd \ ↓ X ).
Second part. Suppose R(X ) ⊑min R(Y ). By deﬁnition this
means that min(Nd \ ↓ X ) ⊑min min(Nd \ ↓ Y ). By the
last point of proposition 2.11 we have that Nd \ ↓ X ⊑min
Nd \ ↓ Y . By the ﬁfth point of proposition 2.11 it follows
that X ⊑maj Y .

Third part. First, we set up some notation. Let 0d denote
the zero vector in Nd . Given an x = (x1, x2, . . . , xd ) ∈ Nd and
i ∈ {1, . . . , d }, deﬁne x +
:= (x1, x2, . . . , xi −1, xi +1, xi +1, . . . , xd ).
i
Further, if xi > 0 deﬁne x −
i

:= (x1, x2, . . . , xi −1, xi −1, xi +1, . . . , xd ).

We further split this part into two subparts. In the ﬁrst
subpart we prove something about the R mapping. In the
second part, we use the proposition proven in the ﬁrst sub-
part to show that |R(X )|Pf(Nd ) ≤ p(|X |Pf(Nd )).

+
i for some x ∈ X and some i

First subpart: Let X ∈ Pf(Nd ). We ﬁrst claim that
If y ∈ R(X ) then y = x
(3)
Let y ∈ R(X ) = min(Nd \ ↓ X ). Therefore, y (cid:2)Nd x for
any x ∈ X . In particular y , 0d and so there exists i such
that yi , 0. Suppose y−
i ≤Nd y, it
then follows that y < min(Nd \ ↓ X ) = R(X ), leading to a
contradiction.

i ∈ Nd \ ↓ X . Since y−

Hence, if y ∈ R(X ) then there exists i such that yi > 0
i < Nd \ ↓ X . Therefore ∃x ∈ X such that y−
and y−
i ≤Nd x.
Since y ∈ R(X ) = min(Nd \ ↓ X ) it follows that y (cid:2)Nd x.
The only way in which we can have y−
i ≤Nd x but y (cid:2)Nd x
is when y = x +

i , which proves that (3) is true.

: x ∈ X , 1 ≤ i ≤ d }. By

Second subpart: Let X + := {x +
i
(3) it is clear that R(X ) ⊆ X + and so

|R(X )|Pf(Nd ) ≤ |X

+|Pf(Nd )

(4)

We proceed to bound |X +|Pf(Nd ). To do so, we only need to
bound the norm of each element in X + and the cardinality
of X +. By construction, it is easy to see that if y ∈ X +, then
+ 1. Further, by deﬁnition of X +, we have
|y|Nd ≤ |X |Pf(Nd )
card(X +) ≤ d(card(X )) ≤ d(|X |Pf(Nd )). It then follows that
+|Pf(Nd ) ≤ d(|X |Pf(Nd )
(5)

+ 1)

|X

By equations 4 and 5 it follows that |R(X )|Pf(Nd ) ≤ p(|X |Pf(Nd ))

which proves the lemma.

(cid:3)

Let φ(x) = x(x + 1)d and let дφ = φ ◦ д. Since R is a poly-
nomial nwqo reﬂection, by proposition 2.14 and theorem 3.2
we have
Theorem 5.2. Let α = ωω d −1
дα (n) ≤ L(Pf(Nd ), ⊑maj),дφ

and let n ≥ N (ωω d −1 ). Then
(φ(n)) ≤ L(Pf(Nd ), ⊑min), (p◦дφ )(p(φ(n)))

6 Upper bound for minoring ordering
For the rest of this section, we assume that d ≥ 1 is ﬁxed.
Let (Pi , ≤maj
, | · |Pi ) be the majoring powerset nwqo obtained
Pi
by taking cartesian product of (Pf(Ni ), ⊑maj, | · |Pf(Ni )) with
itself

times, i.e., Pi = Pf(Ni )(d
i ).

d
i

Let (Ad , ≤maj
(cid:1)
Ad

(cid:0)

, |·|Ad ) be the majoring powerset nwqo formed

by taking cartesian product of P1, P2, . . . , Pd , i.e., Ad =
i =1 Pf(Ni )(d
i ). Since Ad is a majoring
P1 × P2 × · · · × Pd =
powerset nwqo, it has an associated order type o(Ad ) which
Î
i ). Further it is easy
d
can be easily seen to be
to notice that o(Ad ) is d2d -lean.

i =1 ω(ω i −1)·(d

d

Having introduced Ad , we prove upper bounds on the
length of controlled bad sequences for the minoring order-
ing on Pf(Nd ) by providing a polynomial nwqo reﬂection
to Ad . The reﬂection that we provide will be a map from
(Pf(Nd ) \ ∅, ⊑min) to Ad . However, this can be easily con-
verted to an upper bound for (Pf(Nd ), ⊑min), thanks to the
following proposition:

Ë

Proposition 6.1.

L(Pf(Nd ), ⊑min),д(n) = 1 + L(Pf(Nd )\∅, ⊑min),д(д(n))
≤ L(Pf(Nd )\∅, ⊑min),д(д(n) + 1)

Proof. Notice that for any subset X ∈ Pf(Nd ), X ⊑min ∅ and
so Pf(Nd )/X ⊆ Pf(Nd )/∅. Since X ⊑min ∅ for any subset X ,
it follows that Pf(Nd )/∅ = Pf(Nd ) \ ∅. Combining these two
and applying the descent equation we get,
L(Pf(Nd ), ⊑min),д(n) = max

{1 + L(Pf(Nd )/X, ⊑min),д(д(n))}

|X |Pf (Nd ) ≤n

= 1 + L(Pf(Nd )\∅, ⊑min),д(д(n))

This proves the ﬁrst equality.

The second inequality is true for the following reason:
Let X0, X1, . . . , Xl be a (д, д(n)) controlled bad sequence in
Pf(Nd ) \ ∅. By the last point of proposition 2.11, we can as-
sume that Xi = min(Xi ) for each i. Let x := (a1, a2, . . . , ad ) ∈
0 := (X0 \
X0. Construct x ′ := (a1 + 1, a2, . . . , ad ) and let X ′

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

A. R. Balasubramanian

{x }) ∪ {x ′}. It can be easily veriﬁed that X ′
is a (д, д(n) + 1) controlled bad sequence.

0, X0, X1, . . . , Xl
(cid:3)

Therefore, in what follows, it suﬃces to focus on (Pf(Nd )\

∅, ⊑min). We have the following lemma:

Lemma 6.2. (See C.1) There exists a poly. nwqo reﬂection

R : (Pf(Nd ) \ ∅, ⊑min, | · |Pf(Nd ))

q
֒−→ (Ad , ≤maj
Ad

, | · |Ad )

where q(x) = (x + 1)d .
Proof sketch. We present the proof for the case when d = 2
and then sketch how the proof can be generalised to higher
dimensions.

Let us consider (Pf(N2) \ ∅, ⊑min) and let X , Y ∈ Pf(N2) \ ∅.
By proposition 2.11 X ⊑min Y iﬀ N2\ ↑ X ⊑maj N2\ ↑ Y . Let
comp(X ) := N2\ ↑ X and comp(Y ) := N2\ ↑ Y . Notice that
since X , ∅ and Y , ∅, it follows that ↓ comp(X ) , N2 and
↓ comp(Y ) , N2. Therefore there exists nX and nY such that
(nX , nX ) <↓ comp(X ) and (nY , nY ) <↓ comp(Y ).

Unfortunately comp(X ) and comp(Y ) might be inﬁnite and
so we cannot use the results proved in section 4. However,
we will see that we can “compress” the sets comp(X ) and
comp(Y ) such that the compressed ﬁnite sets preserve the
order between comp(X ) and comp(Y ).

Suppose, for some x ∈ N, there are inﬁnitely many ele-
ments of the form (x, n1), (x, n2), (x, n3), . . . in the set comp(X ).
We need not store all these elements, but rather only store
that there are inﬁnitely many elements in comp(X ) such that
their ﬁrst co-ordinate is x. In accordance with this intuition,
1 := {x : there exists inﬁnitely many n such that
we deﬁne S X
(x, n) ∈ comp(X )}. Notice that S X
1 is a subset of N. Similarly,
2 := {x ′ : there exists inﬁnitely many n such that
we deﬁne S X
(n, x ′) ∈ comp(X )}. To complement these two sets, we now
1 and x ′ < S X
deﬁne S X
2 }. We
3 ). Notice that if (x, x ′) ∈
then consider the tuple (S X
2 or (x, x ′) ∈ S X
comp(X ) then either x ∈ S X
3 . It
2 ⊑maj
1 and S X
Pf(N) SY
is then quite easy to see that if S X
Pf(N)
3 then comp(X ) ⊑maj comp(Y ) and so
Pf(N2) SY
2 and S X
SY
X ⊑min Y .

1 , S X
2 , S X
1 or x ′ ∈ S X
1 ⊑maj

3 := {(x, x ′) ∈ comp(X ) : x < S X

3 ⊑maj

However it is not clear that each of the sets S X

2 and S X
3
are indeed ﬁnite. To prove this, ﬁrst recall that there exists
nX ∈ N such that (nX , nX ) <↓ comp(X ).

1 , S X

Suppose S X

1 is inﬁnite. By deﬁnition this means that there
are inﬁnitely many numbers x1, x2, . . . such that for each xi
there are inﬁnitely many elements in comp(X ) with ﬁrst co-
ordinate xi . Pick an xi such that xi ≥ nX . Now by deﬁnition
of S X
1 we can pick a ni ≥ nX such that (xi , ni ) ∈ comp(X ).
However this means that (nX , nX ) ∈↓ comp(X ) which leads
to a contradiction. Similar arguments also show that S X
2 is
inﬁnite.

Suppose S X

lows that (nX , nX ) <↓ S X
(x, y) ∈ S X

3 is inﬁnite. Since (nX , nX ) <↓ comp(X ) it fol-
3 as well. Hence for every element
3 either x < nX or y < nX . This indicates that if

3 )|A2 ≤ (|X |Pf(N2)+
2 or

1 or S X

there are inﬁnitely many elements in S X
3 then there exists
x ∈ N such that either there are inﬁnitely many elements
in S X
3 with their ﬁrst co-ordinate as x or there are inﬁnitely
many elements with their second co-ordinate as x. In either
case, by deﬁnition of S X

3 we will reach a contradiction.

Finally, we also have to show that |(S X

1 , S X

2 , S X

1)2. First we show that if an element belongs to S X
S X
3 then its norm is bounded by |X |Pf(N2).
Suppose x ∈ S X

1 and x > |X |Pf(N2). Since x ∈ S X

1 it follows
that there exists n ≥ nX such that (x, n) ∈ comp(X ). Since
(x, n) ∈ comp(X ) = N2\ ↑ X it follows that for all (y, m) ∈ X
it is the case that (y, m) (cid:2)N2 (x, n). Since x > |X |Pf(N2) ≥
y it follows that m > n. Hence (y, m) (cid:2)N2 (x + n + 1, n)
as well. Since this is true for every (y, m) ∈ X it follows
that (x + n + 1, n) <↑ X and so (x + n + 1, n) ∈ comp(X ).
Since (x + n + 1, n) ≥N2 (nX , nX ) it follows that (nX , nX ) ∈↓
comp(X ) which leads to a contradiction. Hence if x ∈ S X
1
then x ≤ |X |Pf(N2). A similar argument holds for S X
2 as well.
3 and x > |X |Pf(N2). Since (x, y) ∈ S X
3
there are only ﬁnitely many elements in comp(X ) with y as
their second co-ordinate. Hence we can ﬁnd a ny such that
if n ≥ ny then (n, y) < comp(X ). Now similar to the case of
1 we can now show that (x +ny + 1, x ′) ∈ comp(X ) leading
S X
to a contradiction. A similar argument is employed when
y > |X |Pf(N2).

Suppose (x, y) ∈ S X

Since the norms of the elements of S X

3 are
bounded by |X |Pf(N2), it follows that their cardinalities are
bounded by (|X |Pf(N2) + 1)2. Hence the norms of S X
2 and
3 are each bounded by (|X |Pf(N2) + 1)2, which proves our
S X
claim.

2 and S X

1 , S X

1 , S X

We now sketch the construction for the general case of
higher dimensions, i.e, when the dimension d ≥ 2. Notice
1 , as deﬁned for the case of d = 2, can be stated
that the set S X
in the following manner as well: It is the set of all x such
that if we ﬁx the ﬁrst co-ordinate to be x and then project
comp(X ) to the second axis, the downward closure of the
projection is N. Hence if we want to prove the lemma for
d = 3, one way to deﬁne S X
1 would be: The set of all x such
that if we ﬁx the ﬁrst co-ordinate to be x and then project
comp(X ) on the other two axes, the downward closure of the
projection is N2. In a similar fashion, we can ﬁll in S X
2 and S X
3
by ﬁxing the second co-ordinate and the third co-ordinate.
For S X
4 we ﬁx the ﬁrst and the second co-ordinates and check
if the downward closure of the resulting projection is N and
so on. Then we deﬁne the reﬂection to be (S X
7 ). The
reﬂection for the general case also follows a similar pattern.

1 , . . . , S X

Using lemma 6.2, we can now state upper bounds for the
minoring ordering. Let (Pf(Nd )k , ≤min
Pf(Nd )k ) be the nwqo ob-
tained by taking the cartesian product of (Pf(Nd ), ⊑min) with
, ≤maj
itself k times. Let (Ak
) be the majoring powerset nwqo
d
Ak
d
obtained by taking cartesian product of (Ad , ≤maj
Ad

) with itself

Complexity of controlled bad sequences over finite sets of Nd

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

k times. The following theorem is stated in a way such that
it is useful for our applications.

Theorem 6.3. Let α = ωω d −1 ·(2d ·k) and let n be suﬃciently
large. There exists a constant c (depending only on d and k)
such that

L(Pf(Nd )k , ≤min

),д(n) ≤ tα (c · д(n)2d )

Pf (Nd )k
where t(x) = 4kx · q(д(x)) and q(x) = (x + 1)d .

Proof. Let t(x) := 4kx · q(д(x)). Notice that if д is a strictly
increasing inﬂationary function, then the same is true for t.

k times

Let ∅k denote the tuple (

tion 6.1 can be easily modiﬁed to prove that

∅, . . . , ∅). The proof of proposi-
z
),д(n) ≤ L(Pf(Nd )k \∅k , ≤min

),д(д(n) + 1)

}|

{

Pf(Nd )k

L(Pf(Nd )k , ≤min

Pf (Nd )k

By proposition 2.13 and lemma 6.2 we have a reﬂection

Pf(Nd )k )

(Pf(Nd )k \ ∅, ≤min
sition 2.14 and noticing that for large enough n, we have
q(д(n) + 1) ≤ д(n)2d , we get,

). Combining propo-

, ≤maj
Ak
d

k ·q
֒−−→ (Ak
d

L(Pf(Nd )k \∅k, ≤min

Pf (Nd )k

),д(д(n)+1) ≤ L(Ak

d

, ≤maj
Ak
d

), ((k ·q)◦д)(k·д(n)2d )

Notice that o(Ak

d ) =

k
j=1

d

i =1 ωω i −1 ·(d
i )

is dk2d -lean.

Hence by theorem 4.5 we have

Ë

(cid:16)Ë

(cid:17)

L(Ak

d

, ≤maj
Ak
d

), ((k ·q)◦д)(k · д(n)2d ) ≤ to(Ad )(4dk22dд(n)2d )

Now o(Ad ) < ωω d −1 ·(2d ·k). It is known that, if α < α ′ then
hα (n) ≤ hα ′(n) for suﬃciently large n (See Lemma C.9 of
[20] and prop B.3). Hence for suﬃciently large n,

to(Ad )(4dk22dд(n)2d ) ≤ tω ωd −1 ·(2d ·k ) (4dk22dд(n)2d )
Hence letting c := 4dk22d and α := ωω d −1 ·(2d ·k) and com-

bining all the equations, we have,

L(Pf(Nd )k , ≤min

Pf(Nd )k

),д(n) ≤ tα (c · д(n)2d )

(cid:3)

7 Complexity classiﬁcation
In this section, we will use the results proved in the previous
sections to classify length functions for the majoring and
minoring ordering based on fast-growing complexity classes.
Let S : N → N denote the successor function. Let {Sα }, {S α }, {Fα }
denote the Hardy, Cichon and fast-growing hierarchies for
the successor function respectively. Notice that S α (x) = Sα (x)+
x for all x and for all α < ϵ0.

Using these hierarchies, we deﬁne fast growing function

classes (Fα )α (See [15], [19]).

Fα :=

FD(F c

α (n))

c <ω
Ø

Here FD(F c
α (n)) denotes the set of all functions that can be
computed by a deterministic Turing machine in time F c
α (n)
where F c
α denotes the function that results when Fα is ap-
Fα
plied to itself c times. We remark in passing that
already constitutes the set of all primitive recursive func-
tions (See section 2.2.4 of [19]).

α <ω

Ð

For the rest of this section, let д be a ﬁxed strictly increas-
ing and inﬂationary control function such that д(x) ≥ S(x).

Majoring ordering
Fix a d > 1 and let φ(x) = x(x + 1)d . Our lower bound
for the majoring ordering can be readily translated into a
complexity lower bound as follows:

Theorem 7.1. (See D.2) For suﬃciently large n,
Fω d −1(n) − n ≤ L(Pf(Nd ), ⊑maj),φ◦д(φ(n))

Also L(Pf(Nd ), ⊑maj),φ◦д < Fα for any α < ωd −1.

For upper bounds, we state a general result which will be

useful for our applications.

Theorem 7.2. (See D.3) Let д be a primitive recursive func-
tion and let A = Pf(Nd )k for some numbers d and k. Then
A ),д is eventually bounded by a function in F
L(A, ≤maj
(ω d −1)·k

Minoring ordering
Let p(x) = d(x + 1). The following is a lower bound for the
minoring ordering.

Theorem 7.3. (See D.4) For suﬃciently large n,

Fω d −1(n) − n ≤ L(Pf(Nd ), ⊑min),p◦φ◦д(p(φ(n)))

Also L(Pf(Nd ), ⊑min),p◦φ◦д < Fα for any α < ωd −1.
We also have the following upper bound.

Theorem 7.4. (See D.5) Let д be primitive recursive and let
A = Pf(Nd )k for some numbers d and k. Then L(A, ≤min
A ),д is
eventually bounded by a function in F

ω d −1 ·(2d ·k)

8 Applications
We use the bounds proven in this paper to provide upper
bounds for some problems in automata theory. As a ﬁrst ap-
plication, we consider the emptiness problem of increment-
ing tree counter automata (ITCA) over ﬁnite labelled trees
[14]. We only provide an informal sketch of the model here.
(The reader is referred to [14] for the technical details). In-
crementing tree counter automata are ﬁnite state automata
which operate over trees and have access to counters which
it can increment, decrement or test for zero. To avoid unde-
cidability, the counters are also allowed to have incrementa-
tion errors, i.e., the values of the counters can increase erro-
neously at any time. Based on the theory of well-structured
transition systems, the paper [14] gives a decision procedure
for the emptiness problem for ITCA from a given initial con-
ﬁguration. In [4], the authors argue that if the number of

   
   
LICS ’20, July 8–11, 2020, Saarbrücken, Germany

A. R. Balasubramanian

states q and the number of counters k of the given ITCA
are ﬁxed and the running time is measured as a function
of the inital conﬁguration v0 of the ITCA, then the running
time of this decision procedure could be upper bounded by
a function from F
(ω k )·q. Since the paper [4] uses a diﬀerent
notion of controlled bad sequences compared to ours (and
a diﬀerent well-quasi order than the one constructed in this
paper), we ﬁrst revisit and adapt their analysis to our set-
ting. Then we apply our results to obtain better bounds for
the running time.

Let q, k be ﬁxed natural numbers. Recall that Γq is the well-
quasi order where the domain has q elements such that dis-
tinct elements are unordered and the norm of every element
is 0. By taking cartesian product of Γq with Nk and then
taking the majoring ordering of this resulting construction
we get a well-quasi order which we will denote by (A, ≤A
, | · |A) where A = Pf(Γq × Nk ). Notice that the structure
(A, ≤A, | · |A) is isomorphic to the majoring powerset nwqo
(Pf(Nk )q, ≤maj
Pf(Nk )q , | · |Pf(Nk )q ). Indeed suppose S ∈ A. For ev-
ery a ∈ Γq, let Sa := {v : (a, v) ∈ S }. It is then clear that the
mapping S → (Sa)a ∈Γq is an reﬂection from (A, ≤A, | · |A) to
(Pf(Nk )q, ≤maj
Pf(Nk )q , | · |Pf(Nk )q ). We will use this fact later on.
We now analyse the algorithm given in [14] for testing
the emptiness of an ITCA. Let q and k be the number of
states and the number of counters of the ITCA respectively.
Let v0 ∈ Γq × Nk be the given initial conﬁguration. Let
(A, ≤A, | · |A) be the nwqo on the domain A = Pf(Γq × Nk )
as described above. The algorithm proceeds by constructing
a sequence of ﬁnite sets K0, K1, . . . where each Ki ⊆ A, K0
is the initial conﬁguration {v0} and Ki +1 = Ki ∪ Succ(Ki )
where Succ is the successor function between sets of conﬁg-
urations as described in [14]. The algorithm then ﬁnds the
ﬁrst m such that ↑ Km =↑ Km+1 and checks if there is an
accepting conﬁguration in ↑ Km. The complexity of the al-
gorithm is mainly dominated by the length of the sequence
K0, K2, . . . , Km. Since m is the ﬁrst index such that ↑ Km =↑
Km+1, we can ﬁnd a minimal element xi ∈↑ Ki +1\Ki for each
i < m. Consider the sequence x0, . . . , xm−1 over A. Noticing
that xj (cid:3)A xi if j > i, we can conclude that x0, . . . , xm−1
is a bad sequence over A. Further by a careful inspection
of the Succ relation (as described in [14]) one can easily es-
tablish that x0, . . . , xm−1 is a (д, |v0|A)-controlled sequence
where д is some primitive recursive function depending on
q and k. Now since the nwqo (A, ≤A, | · |A) has a reﬂection
into (Pf(Nk )q, ≤maj
Pf(Nk )q , | · |Pf(Nk )q ), we can apply Theorem 7.2
and Proposition 2.14 to get,

ﬁnite data trees called the alternating top-down tree one reg-
ister automata (ATRA), by providing a PSPACE-reduction to
the emptiness problem for ITCA. If the original ATRA had
q states, then the constructed ITCA has k(q) = 2q − 1 + 24q
many counters and f (q) ∈ O(2q) many states. Hence, we
have

Proposition 8.2. The time complexity of the emptiness prob-
lem for an ATRA with q states is bounded by a function in
F

(ω k (q)−1)·f (q)

As a second application, we consider the emptiness prob-
lem for another class of ﬁnite data tree automata called the
bottom-up alternating one register data tree automata (BUDA)
(See [10] for a complete description of the model). Apart
from having a ﬁnite number of states Q, the transitions of
a BUDA are also deﬁned by a speciﬁed ﬁnite semigroup S.
In [10], the authors prove the decidability of the emptiness
problem for BUDA using the theory of well-structured tran-
sition systems. Let q and s be the number of states and the
size of the ﬁnite semigroup of the given BUDA respectively.
Let k = 2q+s and l = 2q2s2 + 1. The authors construct a
wsts corresponding to the given BUDA whose set of con-
ﬁgurations can be taken to be (Pf(Nk )f (k) (where f (k) is
some function in O(2k )) with the underlying order being
≤min
Pf(Nk )f (k ).
A careful analysis of the decision procedure they describe
over this wsts reveals that the algorithm constructs a se-
quence of ﬁnite sets K0, K1, . . . , where each Ki ⊆ (Pf(Nk )f (k),
K0 is the initial conﬁguration v0 and Ki +1 = Ki ∪ Succ(Ki )
where Succ is the successor function between sets of con-
ﬁgurations as described by the wsts. The algorithm then
ﬁnds the ﬁrst m such that ↑ Km =↑ Km+l and checks if
there is an accepting conﬁguration in ↑ Km. The complexity
of the algorithm is mainly dominated by the length of the
sequence K0, . . . , Km, . . . , Km+l . Since m is the ﬁrst index
such that ↑ Km =↑ Km+l , we can ﬁnd a minimal element
xi ∈↑ Ki +l \ ↑ Ki for each i < m. Let p be the largest number
such that pl ≤ m + l. Similar to the analysis performed for
the ITCA model, we can conclude that x0, xl , x2l , . . . , x(p−1)l
is a (д, |v0|A)-controlled sequence where д is a primitive re-
cursive function depending on k. Applying theorem 7.4 we
then get,

Proposition 8.3. The time complexity of the emptiness prob-
lem for a BUDA with q states and s elements in the semi-
ω k −1 ·(2k ·f (k)) where k =
group, is bounded by a function in F
2q+s .

Proposition 8.1. The time complexity of the emptiness prob-
lem for an ITCA with q states and k counters is bounded by
a function in F

(ω k −1)·q

As noticed in [4], the authors of [14] also prove the decid-
ability of emptiness for a class of tree automata operating on

9 Conclusion
In this paper, we have proved lower and upper bounds for
the length of controlled bad sequences for the majoring and
minoring ordering over ﬁnite sets of Nk . The results were
obtained by giving the bounds in terms of functions from Ci-
chon hierarchy and using known complexity results, were

Complexity of controlled bad sequences over finite sets of Nd

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

727–739. https://doi.org/10.1145/44483.44491

[10] Diego Figueira. 2010.

Reasoning on words and trees with data.
Ph.D. Dissertation. École normale supérieure de Cachan, France.
https://tel.archives-ouvertes.fr/tel-00718605

[11] Diego Figueira, Santiago Figueira, Sylvain Schmitz, and Philippe
Ackermannian and Primitive-Recursive
In Proceedings of the 26th An-
IEEE Symposium on Logic in Computer Science. 269–278.

Schnoebelen. 2011.
Bounds with Dickson’s Lemma.
nual
https://doi.org/10.1109/LICS.2011.39

[12] Alain Finkel and Philippe Schnoebelen. 2001. Well-structured transi-
tion systems everywhere! Theor. Comput. Sci. 256, 1-2 (2001), 63–92.
https://doi.org/10.1016/S0304-3975(00)00102-X

[13] Graham Higman. 1952. Ordering by Divisibility in Abstract Algebras.
Proceedings of the London Mathematical Society s3-2, 1 (1952), 326–336.
https://doi.org/10.1112/plms/s3-2.1.326

[14] Marcin Jurdzinski and Ranko Lazic. 2011. Alternating automata on
data trees and XPath satisﬁability. ACM Trans. Comput. Log. 12, 3
(2011), 19:1–19:21. https://doi.org/10.1145/1929954.1929956

[15] M. H. Löb and S. S. Wainer. 1970. Hierarchies of number-theoretic
functions. I. Archiv für mathematische Logik und Grundlagenforschung
13, 1 (Mar 1970), 39–51. https://doi.org/10.1007/BF01967649

[16] Bojan Mohar. 1996.

Embedding Graphs in an Arbitrary Sur-
face in Linear Time.
the Twenty-Eighth An-
In Proceedings of
nual ACM Symposium on the Theory of Computing. 392–397.
https://doi.org/10.1145/237814.237986

[17] Fernando Rosa-Velardo. 2017. Ordinal recursive complexity of Un-
ordered Data Nets. Information and Computation 254 (2017), 41 – 58.
https://doi.org/10.1016/j.ic.2017.02.002

[18] Sylvain Schmitz. 2014.

Termination

Based
Problems
https://doi.org/10.1007/978-3-319-11439-2_1

(Invited
Talk).
International Workshop,

8th

-

-

Complexity Bounds
In
RP

for Ordinal-
Reachability
1–19.
2014.

[19] Sylvain Schmitz. 2016. Complexity Hierarchies beyond Elementary.

TOCT 8, 1 (2016), 3:1–3:36. https://doi.org/10.1145/2858784

[20] Sylvain Schmitz and Philippe Schnoebelen. 2011. Multiply-Recursive
Upper Bounds with Higman’s Lemma. In Automata, Languages and
Programming - 38th International Colloquium, ICALP 2011. 441–452.
https://doi.org/10.1007/978-3-642-22012-8_35

translated into bounds over the fast-growing hierarchy. To
the best of our knowledge, this is the ﬁrst upper bound re-
sult for length functions over the minoring ordering of Pf(Nd ).
As an application, we used the results to establish upper
bounds for the emptiness problems of three types of au-
tomata working on trees.

The bounds on the length function for the majoring or-
dering on Pf(Nk ) is easily seen to be tight, which solves a
problem left open in [4]. However this is not the case with
the bounds for minoring ordering and it might be an inter-
esting question in the future to bridge this gap.

Acknowledgments
The author is extremely grateful to Prof. Philippe Schnoebe-
len and Prof. Sylvain Schmitz of LSV, ENS-Saclay Paris for
their mentorship and useful discussions regarding the paper.
This work was done when the author was an intern at LSV,
ENS-Saclay Paris.

This material is based upon work supported by the French
National Research Agency (ANR) grant BRAVAS under grant
number ANR-17-CE40-0028 and also by the Indo-French re-
search unit UMI Relax. The author also acknowledges the
support provided by the ERC advanced grant PaVeS under
grant number 787367.

References
[1] Parosh Aziz Abdulla, Karlis Cerans, Bengt Jonsson, and Yih-Kuen
Tsay. 1996. General Decidability Theorems for Inﬁnite-State Systems.
In Proceedings, 11th Annual IEEE Symposium on Logic in Computer Sci-
ence. 313–321. https://doi.org/10.1109/LICS.1996.561359

[2] Parosh Aziz Abdulla and Bengt

completeness of
state systems.
https://doi.org/10.1016/S0304-3975(00)00105-5

Ensuring
Jonsson. 2001.
symbolic veriﬁcation methods
inﬁnite-
Theor. Comput. Sci. 256, 1-2 (2001), 145–167.

for

[3] Sergio Abriola and Santiago Figueira. 2014. A note on the order
type of minoring orderings and some algebraic properties of ω2-well
quasi-orderings. In XL Latin American Computing Conference, CLEI
2014. 1–9. https://doi.org/10.1109/CLEI.2014.6965188

[4] Sergio Abriola, Santiago Figueira, and Gabriel Senno. 2015.
length
bounding
Theor. Comput. Sci. 603 (2015), 3–22.

Linearizing well
of bad sequences.
https://doi.org/10.1016/j.tcs.2015.07.012

quasi-orders

and

the

[5] Joseph B Kruskal.

1972.
Ordering: A Frequently Discovered Concept.
of Combinatorial Theory,
Series A 13
https://doi.org/10.1016/0097-3165(72)90063-5

The Theory of Well-Quasi-
Journal
297–305.

1972),

(11

[6] Pierre Chambart and Philippe Schnoebelen. 2008. The Ordinal Re-
cursive Complexity of Lossy Channel Systems. In Proceedings of
the Twenty-Third Annual IEEE Symposium on Logic in Computer
Science, LICS 2008, 24-27 June 2008, Pittsburgh, PA, USA. 205–216.
https://doi.org/10.1109/LICS.2008.47

[7] E.A. Cichon and E.Tahhan Bittar. 1998. Ordinal recursive bounds for
Higman’s theorem. Theoretical Computer Science 201, 1 (1998), 63 –
84. https://doi.org/10.1016/S0304-3975(97)00009-1

[8] Nachum Dershowitz and Zohar Manna. 1979.

Proving Termina-
tion with Multiset Orderings. Commun. ACM 22, 8 (1979), 465–476.
https://doi.org/10.1145/359138.359142

[9] Michael R. Fellows and Michael A. Langston. 1988. Nonconstructive
tools for proving polynomial-time decidability. J. ACM 35, 3 (1988),

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

A. R. Balasubramanian

The following appendices provide the proofs missing in

B Proofs for upper bound of majoring

the paper.

ordering

A Proofs of basic propositions
A.1 Proof of proposition 2.13

q
֒−→ B and r ′ : A′

q′
֒−→ B′ be two polynomial reﬂec-
Let r : A
tions. Deﬁne a map s : A + A′ → B + B′ where s(x) = r (x) if
x ∈ A and s(x) = r ′(x) if x ∈ A′. It is immediately clear that s
is the desired polynomial reﬂection. For cartesian products,
the map p : A × A′ → B × B′ where p(x, y) = (r (x), r ′(y)) is
easily seen to be the desired polynomial reﬂection.

A.2 Proof of proposition 2.14
Let x0, . . . , xl be a (д, n)-controlled bad sequence in A. Con-
sider the sequence r (x0), . . . , r (xl ) in B. Since r is a polyno-
mial nwqo reﬂection, it follows that r (xi ) (cid:2) r (xj ) for any
i < j. Let q be a strictly increasing inﬂationary polynomial
such that p(n) ≤ q(n) for all n. Therefore, we have |r (xi )|B ≤
p(|xi |A) ≤ q(|xi |A) ≤ q(дi (n)). It can now be easily seen by
induction on i ≥ 0 that q(дi (n)) ≤ (q ◦ д)i (q(n)). Hence we
have that r (x0), . . . , r (xl ) is a (q ◦ д, q(n))-controlled bad se-
quence in B, which proves our claim.

A.3 Results about sums, products and reﬂections
A few properties of sums and products, which can be easily
checked are:

Proposition A.1.

A × B ≡ B × A,

A + B ≡ B + A,
A + (B + C) ≡ (A + B) + C,
Γ0 + A ≡ A,

A × (B × C) ≡ (A × B) × C,
Γ1 × A ≡ A

Γ0 × A ≡ Γ0,
(A + B) × C ≡ (A × C) + (B × C)

Further, the following facts about nwqo reﬂections can be

easily veriﬁed:

Proposition A.2.
A + B/(1, x) ֒→ (A/x) + B,

A + B/(2, x) ֒→ A + (B/x)

(A × B)/(x, y) ֒→ [(A/x) × B] + [A × (B/x)]
A ֒→ A′ and B ֒→ B′ implies A + B ֒→ A′ + B′
A ֒→ A′ and B ֒→ B′ implies A × B ֒→ A′ × B′

A.4 Results about sub-recursive hierarchies

The following facts are known about sub-recursive hierar-
chies: (see Lemma 5.1 and C.9 of [20])

Proposition A.3. Let h be a strictly increasing inﬂationary
function. For all α ∈ CNF(ωω ω ) and x ∈ N we have:

• hα (x) ≤ hα (y) if x ≤ y
• hα (x) ≤ hα (x) − x
• hω α ·r (x) = f r

h, α (x) for all r < ω.

B.1 Proof of proposition 4.1
The proposition is clearly true when α = d (or) α = ωω d
for some d ∈ N. For the general case, ﬁrst observe that the
following three statements are true:

α < α ′ =⇒ α ⊕ β < α ′ ⊕ β
α < α ′ and 0 < β =⇒ α ⊗ β < α ′ ⊗ β

αi < ω β ⇐⇒ αi < ω β for all i

m

Êi =1

Using these statements and ordinal induction, the propo-

sition can be proven for the general case as well.

B.2 Proof of theorem 4.2

For the rest of this section, whenever we want to mention
that there exists a nwqo reﬂection from A to B, we simply
denote it by A ֒→ B.

Let A be a majoring powerset nwqo. Since majoring pow-
erset nwqos are built from {Pf(Nd )}d >0 and {Γd }d ∈{0, 1} by
disjoint sums and cartesian products, we can write A as

m
i =1

ji
j=1 Pf(Ndi, j ) where the empty sum is taken to be Γ0

and the empty product is taken to be Γ1.
Í

Î

Let X ∈ A≤n. We proceed by induction on the structure

of A.

• Suppose A is ﬁnite (i.e ji = 0 for every i). Therefore
Γ1. If m = 0, then A = Γ0 and the claim holds
A =
trivially. Suppose m > 0. Therefore A ≡ Γm for some
m > 0. By deﬁnition

m
i =1

Í

o(A) = m, ∂n(m) = {m − 1}, C(m − 1) = Γm−1

and indeed Γm/X ≡ Γm−1.

• Suppose A = Pf(Nd ) for some d. If d = 1, then

o(A) = ω, ∂n(ω) = {n + 1}, C(n + 1) = Γn+1

Suppose Y is a ﬁnite subset of N such that Y ∈ A/X . By
assumption X ∈ A≤n and so if x ∈ X then x ≤ n. Since
Y ∈ A/X it follows that if y ∈ Y then y < n. Therefore
Y is a subset over {0, 1, . . . , n − 1}. We consider the
following reﬂection R : A/X ֒→ Γn+1: R(∅) = a0 and
R(Y ) = ai +1 if the maximum element in Y is i. This
can be easily seen to be a nwqo reﬂection and so we
are done.
Suppose d > 1. Then

o(A) = ωω d −1, ∂n(ωω d −1

) = {ωω d −2 ·(dn)}

C(ωω d −2 ·(dn)) = Pf(Nd −1)dn

Therefore to prove the claim, it suﬃces to exhibit a
reﬂection of the form R : Pf(Nd )/X ֒→ Pf(Nd −1)dn.

Complexity of controlled bad sequences over finite sets of Nd

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

Let Y ∈ Pf(Nd )/X . Since X ∈ A≤n it follows that if
x ∈ X then |x | ≤ n. Hence

If x ∈ X then x ≤ (n, . . . , n

)

(6)

d times

|

{z

Since Y ∈ Pf(Nd )/X , we have that X @maj Y . This
combined with equation (6) implies that if y ∈ Y then
there exists i such that yi < n. Using this fact, we
deﬁne our reﬂection as follows: For 1 ≤ i ≤ d, 0 ≤
j ≤ n − 1, deﬁne

}

Y j
i

= {(y1, y2, . . . , yi −1, yi +1, yi +2, . . . , yd ) :

(y1, y2, . . . , yd ) ∈ Y , yi = j}

Now consider the map
1 , . . . , Y n−1

Y → (Y 0

, Y 0

1

2 , . . . , Y n−1

2

, . . . , Y 0
d

, . . . , Y n−1

d

)

It is easy to verify that this is indeed a nwqo reﬂection
from Pf(Nd )/X to Pf(Nd −1)dn.
k

i =1 Pf(Ndi +1) (where di can be 0). Then,

• Suppose A =

k

Î

o(A) =

ωω di = ωω d1 ⊕ ···⊕ω dk

α ′ := ∂n(A) =

Ìi =1

k

(

Êi =1  

βi

k

Dn(ωω di ) ⊗

ωω dj

!)

α ′
i

Ìj,i

k

{

=

Õi =1

z
Ìj,i

i ) =
«

ωω dj
}|
{

C(βi )×C(α ′
i )

Dn(ωω di ) ⊗
z
}|
Êi =1 ©

C(α ′) = C 



ª


®


®


®


j,i Pf(Ndj +1) andC(βi ) = C(Dn(ωω di )).
®
Now C(α ′




Let X = (X1, . . . , Xk ) ∈ A≤n. By proposition A.2 we
¬


i =1 Pf(Ndi +1)/Xi ×
k
have a reﬂection A/X ֒→
By induction hypothesis, there is a reﬂection of the
Í
form Pf(Ndi +1)/Xi ֒→ C(Dn(ωω di )) = C(βi ). Combin-
ing these two we get that there is a reﬂection of the
j,i Pf(Ndj +1) ֒→
i =1 Pf(Ndi +1)/Xi ×
form A/X ֒→
i ) = C(α ′).
• Suppose A is of the form

k
i =1 C(βi ) × C(α ′
Í

Î

Î

k
i =1
Í
j=1 Pf(Ndi, j +1) so that A =
ji
Ai =
if α ′ ∈ ∂n(o(Ai )) then α ′ = Dn(o(Ai )). Now

Î

Î
j=1 Pf(Ndi, j +1). Let
ji
k
i =1 Ai . Notice that

Í

k

Î

Í

j,i Pf(Ndj +1).

k

o(A) =

o(Ai )

Êi =1

and

∂n(o(A)) =

Dn(o(Ai )) ⊕

o(Aj ) | i = 1, . . . , k

(

Êj,i
Let X ∈ A≤n such that X = (i, X ′) for some X ′ ∈ Ai .
By proposition A.2 we know that there exists a reﬂec-
j,i Aj . Let α ′ = Dn(o(Ai )) ⊕
tion A/X ֒→ (Ai /X ′) +

)

Í

j,i o(Aj ). By induction hypothesis we have a reﬂec-

j,i o(Aj )) it follows that we have a reﬂection A/X ֒→

tion Ai /X ′ ֒→ C(Dn(o(Ai ))). Since
É
C(
(Ai /X ′) +
É
j,i o(Aj )) = C(α ′).
Í

Í
j,i Aj ֒→ C(Dn(o(Ai ))⊕

j,i Aj ≡

É

B.3 Proof of theorem 4.3
Let A be a majoring powerset nwqo and let α = o(A). The
descent equation tells us that
LA,д(n) = max
X ∈A≤n

{1 + LA/X,д(д(n))}

Since o and C are inverse operators of each other, we can
rephrase the descent equation as

LC (α ),д(n) = max
X ∈A≤n

{1 + LA/X,д(д(n))}

By theorem 4.2, if X ∈ A≤n then there exists α ′ ∈ ∂n(α)
such that A/X ֒→ C(α ′). Hence by proposition 2.14 we have,

LC (α ),д(n) ≤ max

α ′ ∈∂n (α )

{1 + LC (α ′),д(д(n))}

B.4 Proof of theorem 4.4

Similar to the presentation in [20], we present some inter-
mediate results before proving the main theorem.

A main problem with the Cichon hierarchy is that in gen-
eral α < α ′ does not imply hα (x) ≤ hα ′(x). To demonstrate
this, let h be the successor function and let α = n + 2 and
α ′ = ω. Clearly, hn+2(n) = n + 2 whereas hω (n) = n + 1.
This will quickly prove to be a problem in our arguments
for proving upper bounds. To handle this, we introduce the
notion of pointwise at-x ordering [7]. Given x ∈ N, we deﬁne
the relation ≺x between ordinals as the smallest transitive
relation such that for all α, λ:
α ≺x α + 1,

λx ≺x λ

Here λx is the x th term in the fundamental sequence for λ.
The inductive deﬁnition of ≺x implies

α ≺x α ′ ⇐⇒

α ′ = β + 1 and α (cid:22)x β or
α ′ = λ and α (cid:22)x λx
(

The following is true about the pointwise ordering:

Proposition B.1. (See section B.3 of [20])

≺0 . . . ⊂ ≺x ⊂ ≺x +1 ⊂ . . . ⊂

Øx ∈N
where < is the usual ordering on ordinals.

= <

≺x

!

We have already introduced the notion of leanness of ordi-
nals, but we reintroduce it here for the sake of completeness.
Let α ∈ CNF(ϵ0). We say that α is k-lean if N α ≤ k. Observe
that only 0 is 0-lean and if α is k-lean and α ′ is k ′-lean, then
α ⊕ α ′ is k + k ′-lean. We have the following lemma:

   
   
 
 
 
 
    
    
     
     
 
LICS ’20, July 8–11, 2020, Saarbrücken, Germany

A. R. Balasubramanian

Clearly βm is k+(k+1)n-lean. By the same argument given
for the previous case, we can conclude that for i , m, βi is
k + (k + 1)n-lean. Since βm > βm−1 > · · · > β1 it follows
is the strict form of
that
α ′. Since (n + 1)ci ≤ (n + 1)k ≤ k + (k + 1)n and since each
βi is k +(k +1)n-lean, we conclude that α ′ is k +(k +1)n-lean.

ω βm · (n + 1)ci

m−1
i =1 ω βi · ci

(cid:16)É

⊕

(cid:17)

(cid:0)

(cid:1)

Now, we come to the general case. Suppose α =

k
i =1 ω βi .
Notice that if α ′ ∈ ∂n(α) then α ′ = Dn(ω βi ) ⊕
j,i ω βj for
Í
some i. We just proved that Dn(ω βi ) is k +(k +1)n-lean. Since
j,i ω βj is k-lean, it follows that α ′ is 2k + (k + 1)n-lean.
(cid:3)

É

É

Recall that we took the control function д to be a strictly

increasing inﬂationary function.
Proof of theorem 4.4. Let h(x) := 4x · д(x) and let n > 0.
Notice that h is a strictly increasing inﬂationary function as
well.

We prove the theorem by induction on α. The claim is
clear for α = 0. Suppose α > 0. Let α be k-lean. We have that
k > 0 and Mα,д(n) = 1 + Mα ′,д(д(n)) for some α ′ ∈ ∂n(α).
By Lemma B.4 we have that α ′ is 2k + (k + 1)n-lean. Since
n > 0 we have that 2k + (k + 1)n ≤ 4kn and hence α ′ is
4kn-lean as well. By proposition 4.1, α ′ < α and so we can
apply the induction hypothesis on α ′. Hence, by induction
hypothesis we have,

Mα,д(n) = 1 + Mα ′,д(д(n)) ≤ 1 + hα ′(4(4kn) · д(n))
Since д is strictly increasing (by assumption) and hα ′ is

strictly increasing (by proposition A.3) we have

1 + hα ′(4(4kn) · д(n)) ≤ 1 + hα ′(4(4kn) · д(4kn))

By deﬁnition, h(x) := 4x · д(x) and so

1 + hα ′(4(4kn) · д(4kn)) = 1 + hα ′(h(4kn))
Since α ′ is 4kn-lean and α ′ < α, by lemma B.2 we have
that α ′ (cid:22)4kn P4kn (α). Hence by proposition B.1, α ′ (cid:22)h(4kn)
P4kn(α). Hence by point two of proposition B.3 we conclude
that

1 + hα ′(h(4kn)) ≤ 1 + hP4k n (α )(h(4kn))
By deﬁnition of the Cichon hierarchy we have,

1 + hP4k n(α )(h(4kn)) = hα (4kn)

Combining all the equations we now get that

Mα,д(n) ≤ hα (4kn)

thus proving our theorem.

Lemma B.2. (Lemma B.1 from [20]) Let α be x-lean. Then
α < γ iﬀ α (cid:22)x Px (γ )

The following results are know about the pointwise or-

dering:

Proposition B.3. (See Lemma C.9 of [20]) Let h be a strictly
increasing inﬂationary function. Then,
• x ≤ y =⇒ hα (x) ≤ hα (y)
• α (cid:22)x α ′ =⇒ hα (x) ≤ hα ′(x)
• If α is x-lean and α < α ′ then ∀y ≥ x, hα (y) ≤ hα ′(y)

Using the notions of leanness and pointwise ordering and

the above mentioned results, we prove the following:
Lemma B.4. Let k, n > 0. Suppose α ∈ CNF(ωω ω ) is k-lean
and α ′ ∈ ∂n(α). Then α ′ is 2k + (k + 1)n-lean.
Proof. We ﬁrst prove that if α = ω β for some β ∈ CNF(ωω )
and α ′ ∈ ∂n(α) then α ′ is k + (k + 1)n-lean. Notice that if
α = ω β then ∂n(α) = {Dn(α)}.

The claim is clearly true when α = k for some k ∈ N
for some d ≥ 0. Suppose α = ωω p1 +···+ω pl . Let
m
i =1 ωqi ·ci ,

or α = ωω d
β := ωp1 +· · ·+ωpl . Further let β in strict form be
where q1 > q2 > · · · > qm.

We distinguish between two cases: Suppose qm , 0. There-
fore qi , 0 for any i. In this case, notice that if α ′ ∈ ∂n(α)
then

Í

α ′ =

m

Êi =1  

m

Dn(ωω qi ) · ci ⊗ ωω qi ·(ci −1) ⊗

ωω qj ·c j

!

Ìj,i

=

ω βi · ci

Êi =1 (cid:16)

where

(cid:17)

βi = ωqi −1 · (qi + 1)n ⊕ ωqi · (ci − 1) ⊕

ωqj · cj

Êj,i

Notice that the coeﬃcients of βi when written in strict
form can be only one of the four possible choices: (qi +
1)n, ci −1, cj and can also be ci +1 +(qi +1)n if qi −qi +1 = 1. In
either case notice that βi is k + (k + 1)n-lean. Further since
q1 > q2 > · · · > qm it follows that βm > βm−1 > · · · > β1
is the strict form of α ′. Since each
and so
ci ≤ k and each βi is k + (k + 1)n-lean, it follows that α ′ is
k + (k + 1)n-lean as well.

ω βi · ci

m
i =1

É

(cid:0)

(cid:1)

Suppose qm = 0. In this case, if α ′ ∈ ∂n(α) then

m−1

α ′ =

ω βi · ci

⊕

!

ω βm · (n + 1)ci
(cid:16)

Êi =1

where
βi = ωqi −1 · (qi + 1)n ⊕ ωqi · (ci − 1) ⊕

βm = ωqi · (ci − 1) ⊕

ωqj · cj

Êj,i

Êj,i

(cid:17)

C Proofs for upper bound of minoring

ωqj · cj (for i , m)

ordering

C.1 Proof of lemma 6.2

We need new notations for this lemma, which we introduce
here. For every n ∈ N, let nj denote the vector (n, n, . . . , n) ∈

 
Complexity of controlled bad sequences over finite sets of Nd

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

Nj . Further, given z = (z1, z2, . . . , zd ) ∈ Nd and numbers
1 ≤ i1 < i2 < · · · < ik ≤ d, let

zi1,i2, ...,ik

= (zi1, zi2, . . . , zik )

z−i1, −i2, ..., −ik

= (z1, . . . , zi1−1, zi1+1, . . . , zi2−1, zi2+1,

. . . , zik −1, zik +1, . . . , zd )

By convention we let z−1, ..., −d = () where () is the empty
vector and we let N0 denote the singleton set containing the
empty vector.

Let 1 ≤ i1 < i2 < · · · < ik ≤ d and j1, j2, . . . , jk be natural

numbers. Given an arbitrary subset Z of Nd , deﬁne

projZ

i1,i2, ...,ik

(j1, j2, . . . , jk ) := {z−i1, −i2, ..., −ik : z ∈ Z ,

zi1, ...,ik

= (j1, . . . , jk )}

Intuitively projZ

from Z whose ith
then projects all these elements on the remaining co-ordinates.

1 value is j1, ith

(j1, j2, . . . , jk ) collects all elements
2 value is j2 and so on and

i1,i2, ...,ik

We now set out to deﬁne the desired polynomial reﬂec-
tion. Let X ∈ Pf(Nd ) \ ∅ and let comp(X ) := Nd \ ↑ X . No-
tice that comp(X ) is downward closed, (i.e), ↓ comp(X ) =
comp(X ). Also since X , ∅ we have the following very im-
portant fact, which we will extensively use:

↓ comp(X ) , Nd

(7)

For ease of understanding, we break the construction of
the polynomial reﬂection into several steps: As a ﬁrst step,
for every sequence i1, i2, . . . , ik such that 1 ≤ i1 < i2 <
· · · < ik ≤ d, we deﬁne an element Xi1, ...,ik of Pf(Nk ). In
the second step, we show that each of these sets are ﬁnite.
In the third step, for every k such that 1 ≤ k ≤ d, we deﬁne
an element X k of Pf(Nk )(d
k) by using the sets deﬁned in the
ﬁrst step. In the fourth step, we deﬁne our reﬂection to be
R(X ) = (X1, . . . , Xd ) and show that if R(X ) ≤maj
R(Y ) then
Ad
X ⊑min Y . In the last step, we will show that |R(X )|Ad ≤
q(|X |Pf(Nd )) where q(x) = (x + 1)d .

First step. Let 1 ≤ i ≤ d. Deﬁne

Xi := {xi : x ∈ comp(X ), ↓ projcomp(X )

i

(xi ) = Nd −1}

Note that following our notation, xi is the ith co-ordinate
of x. Intuitively, xi ∈ Xi implies that if we pick all elements
in comp(X ) such that their ith co-ordinate is xi and project
all these elements on all the other axes, the projection is
‘scattered everywhere’ over Nd −1. Since with respect to the
other co-ordinates it ‘looks like’ Nd −1 we can discard all
the other co-ordinates of x and remember only the ith co-
ordinate.

For the general case, let i1, i2, . . . , ik be a sequence such

that 1 ≤ i1 < i2 < · · · < ik ≤ d. Deﬁne
Xi1,i2, ...,ik :={xi1,i2, ...,ik : x ∈ comp(X ),
↓ projcomp(X )
i1, ...,ik
strict subsequence j1, . . . , jl of i1, . . . , ik ,
(xj1, ..., jl ) < X j1, ..., jl }

(xi1, ...,ik ) = Nd −k , and for any

The intuition behind this deﬁnition is the same as the pre-
vious one, except now we do not allow an element in the set
if ‘some part of it’ is already present in a ‘lower set’.

Second step. We now prove that for every sequence i1, i2, . . . , ik
such that 1 ≤ i1 < i2 < · · · < ik ≤ d, the set Xi1, ...,ik is a ﬁ-
nite set. Before proving that we have the following lemmas:

Lemma C.1. Let i1, . . . , ik be such that 1 ≤ i1 < · · · < ik ≤
d. Then,

∃n ∈ N, ∀(m1, . . . , mk ) ∈ Xi1, ...,ik , ∃j such that mj < n

Proof. For ease of notation, assume (without loss of gener-
ality) that i1 = 1, i2 = 2, . . . , ik = k. By equation (7), ↓
comp(X ) , Nd and so there exists n ∈ N such that

nd <↓ comp(X )

(8)

We now claim that

∀(m1, . . . , mk ) ∈ X1, ...,k , ∃j such that mj < n

(9)

Suppose (9) is false. We have the following series of impli-
cations, all of which follow immediately from the deﬁnitions
introduced so far:
(9) is false =⇒ ∃(m1, . . . , mk ) ∈ X1, ...,k s.t. (m1, . . . , mk ) ≥ nk

1, ...,k (m1, . . . , mk ) = Nd −k

=⇒ ↓ projcomp(X )
=⇒ ∃(mk+1, . . . , md ) ∈ projcomp(X )

1, ...,k (m1, . . . , mk )

such that (mk+1, . . . , md ) ≥ nd −k
=⇒ (m1, . . . , mk , mk+1, . . . , md ) ∈ comp(X )

Since (m1, . . . , mk ) ≥ nk and (mk+1, . . . , md ) ≥ nd −k
it follows that (m1, . . . , md ) ≥ nd . Since (m1, . . . , md ) ∈
comp(X ) it follows that nd ∈↓ comp(X ) which contradicts
(cid:3)
(8). Therefore (9) is true, which proves the lemma.

Notice that lemma C.1 immediately implies that Xi is ﬁ-
nite for every i ∈ {1, . . . , d }. However to prove the same for
the general case requires another lemma which we prove
next.

Lemma C.2. Let 1 ≤ i1 < · · · < ik ≤ d and 1 ≤ j1 < · · · <
jl ≤ k such that 1 ≤ l < k. Further let m1, . . . , ml be natural
numbers. Then

∃n ∈ N, ∀(ml +1, . . . , mk ) ∈ proj

Xi1, . . ., ik
j1, ..., jl

(m1, . . . , ml ),
∃q ∈ {l + 1, . . . , k} s.t. mq < n

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

A. R. Balasubramanian

Proof. The proof of this lemma is very similar to the proof of
the previous lemma, but for completeness sake we present
the proof here.

To make notation easier in the proof, (without loss of gen-
erality) we assume that i1 = 1, i2 = 2, . . . , ik = k and j1 =
1, j2 = 2, . . . , jl = l. If projX1, . . ., k
1, ...,l (m1, . . . , ml ) is empty then
there is nothing to prove. Hence in the sequel we assume
that projX1, . . ., k
1, ...,l (m1, . . . , ml ) is non-empty. Let (xl +1, . . . , xk ) ∈
projX1, . . ., k

1, ...,l (m1, . . . , ml ). By deﬁnition we have,

(xl +1, . . . , xk ) ∈ projX1, . . ., k

1, ...,l (m1, . . . , ml )
=⇒ (m1, . . . , ml , xl +1, . . . , xk ) ∈ X1, ...,k
=⇒ ↓ projcomp(X )
=⇒ ∃n ∈ N such that nd −l <↓projcomp(X )

(m1, . . . , ml ) , Nd −l

1, ...,l

1, ...,l

(m1, . . . , ml )

Hence there exists n ∈ N such that

nd −l <↓ projcomp(X )
1, ...,l

(m1, . . . , ml )

(10)

We now claim that

∀(ml +1, . . . , mk ) ∈ projX1, . . ., k

1, ...,l (m1, . . . , ml ),

∃q ∈ {l + 1, . . . , k} such that mq < n (11)

Suppose (11) is false. We make the following series of im-
plications, all of which follow immediately from deﬁnitions
introduced so far:
(11) is false =⇒ ∃(ml +1, . . . , mk ) ∈ projX1, . . ., k

1, ...,l (m1, . . . , ml )

such that (ml +1, . . . , mk ) ≥ nk−l

=⇒ (m1, . . . , ml , ml +1, . . . , mk ) ∈ X1, ...,k
=⇒ ↓ projcomp(X )
=⇒ ∃(mk+1, . . . , md ) ∈ projcomp(X )

1, ...,k (m1, . . . , mk ) = Nd −k

1, ...,k (m1, . . . , mk )

such that (mk+1, . . . , md ) ≥ nd −k
=⇒ (m1, . . . , mk , mk+1, . . . , md ) ∈ comp(X )
=⇒ (ml +1, . . . , md ) ∈ projcomp(X )

(m1, . . . , ml )

1, ...,l

Since (ml +1, . . . , mk ) ≥ nk−l and (mk+1, . . . , md ) ≥ nd −k
it follows that (ml +1, . . . , md ) ≥ nd −l . Since (ml +1, . . . , md ) ∈
projcomp(X )
(m1, . . . , ml ) it follows that nd −k ∈
1, ...,l
↓ projcomp(X )
(11) is true, which proves the lemma.

(m1, . . . , ml ) which contradicts (10). Therefore
(cid:3)

1, ...,l

A consequence of C.2 is the following:

Lemma C.3. Let 1 ≤ i1 < · · · < ik ≤ d and 1 ≤ j1 < · · · <
jl ≤ k such that 1 ≤ l < k. Further let m1, . . . , ml be natural
numbers. Then proj

(m1, . . . , ml ) is ﬁnite.

Xi1, . . ., ik
j1, ..., jl

Proof. Once again, to make notation easier in the proof, we
assume that i1 = 1, i2 = 2, . . . , ik = k and j1 = 1, j2 =
2, . . . , jl = l.

We ﬁx a k and prove the lemma by backward induction on
l. Suppose l = k −1. Then projX1, . . ., k
1, ...,l (m1, . . . , ml ) is a subset
of N. The statement of lemma C.2 immediately implies that
projX1, . . ., k

1, ...,l (m1, . . . , ml ) is ﬁnite.

Suppose l < k − 1 and suppose projX1, . . ., k

1, ...,l (m1, . . . , ml ) is

inﬁnite. Applying lemma C.2 we have,

∃n ∈ N, ∀(x1, . . . , xk−l ) ∈ projX1, . . ., k

1, ...,l (m1, . . . , ml ),

∃q ∈ {1, . . . , k − l } s.t. xq < n (12)

We now partition projX1, . . ., k

1, ...,l (m1, . . . , ml ) as follows: For

each a ∈ {1, . . . , k − l } and b ∈ {0, . . . , n − 1} we set
1, ...,l (m1, . . . , ml ), xa = b}

b := {x : x ∈ projX1, . . ., k
P a
Equation (12) guarantees us that

projX1, . . ., k

1, ...,l (m1, . . . , ml ) =

P a
b

Ø1≤a ≤k−l, 0≤b ≤n−1

is inﬁnite, it is then easy to see that proj

Since we assumed that projX1, . . ., k
follows that at least one P a
erality assume that a = 1.

1, ...,l (m1, . . . , ml ) is inﬁnite, it
b is inﬁnite. Without loss of gen-

Notice that if x, y ∈ P 1

b then x1 = y1 = b. Since P 1
b
P 1
1 (b) is also in-
b
P 1
1 (b) is the same as
b

ﬁnite. It is also easy to see that proj
projX1, . . ., k
projX1, . . ., k
diction.

1, ...,l,l +1(m1, . . . , ml , b). By induction hypothesis,
1, ...,l,l +1(m1, . . . , ml , b) is ﬁnite which leads to a contra-
(cid:3)

Using lemma C.3 we now prove that each set Xi1, ...,ik is

ﬁnite.
Theorem C.4. Let i1, . . . , ik be such that 1 ≤ i1 < · · · <
ik ≤ d. Then Xi1, ...,ik is a ﬁnite set.
Proof. Once again, for ease of notation we assume that i1 =
1, . . . , ik = k.

Suppose k = 1, i.e., we only have one number i1 = 1. By
deﬁnition X1 is a subset of N. Lemma C.1 then immediately
implies that X1 is a ﬁnite set.

Suppose k > 1 and suppose X1, ...,k is inﬁnite. Applying

lemma C.1 we have

∃n ∈ N, ∀(m1, . . . , mk ) ∈ X1, ...,k , ∃j such that mj < n

(13)
We now partition X1, ...,k as follows: For each a ∈ {1, . . . , k}
and b ∈ {0, . . . , n − 1} we set

b := {(m1, . . . , mk ) : (m1, . . . , mk ) ∈ X1, ...,k, ma = b}
P a
Equation (13) guarantees us that

X1, ...,k =

P a
b

Ø1≤a ≤k, 0≤b ≤n−1

Since we assumed that X1, ...,k is inﬁnite it follows that at
least one P a
b is inﬁnite. Without loss of generality assume
that a = 1.

Complexity of controlled bad sequences over finite sets of Nd

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

Notice that if x, y ∈ P 1

nite, it is then easy to see that proj

b then x1 = y1 = b. Since P 1

b is inﬁ-
P 1
1 (b) is inﬁnite. It is also
b
P 1
1 (b) is the same as projX1, . . ., k
(b). By
b
(b) is ﬁnite which leads to a contra-
(cid:3)

1

easy to see that proj
lemma C.3, projX1, . . ., k
diction.

1

d
k

Third step. We now combine the sets deﬁned in the ﬁrst
step to get sets X1, . . . , Xd . To do this, ﬁrst notice that if we
want to deﬁne a tuple of size
, we can choose to index
the positions by sequences of the form i1, . . . , ik where 1 ≤
i1 < i2 < · · · < ik ≤ d. We adopt this indexing method for
the rest of the section.

We now deﬁne Xk as an element in Pf(Nk )(d

k) where the el-
ement in the position indexed by i1, . . . , ik is the set Xi1, ...,ik .
By theorem C.4, each Xi1,i2, ...,ik is a ﬁnite subset of Nk

(cid:0)

(cid:1)

and so each X k is an element of Pf(Nk )(d
k).
Fourth step. Deﬁne R(X ) = (X1, . . . , Xd ). It is clear that
R(X ) is a function from Pf(Nd ) to Ad . We now show that
R(X ) ≤maj
Ad

R(Y ) then X ⊑min Y .

Lemma C.5.

R(X ) ≤maj
Ad

R(Y ) =⇒ X ⊑min Y

Proof. Let X , Y be such that R(X ) ≤maj
R(Y ). To prove that
Ad
X ⊑min Y , by proposition 2.11 it is enough to prove that
comp(X ) ⊑maj comp(Y ). This is what we will prove in the
sequel.

To prove that comp(X ) ⊑maj comp(Y ), we have to show
that if x ∈ comp(X ) then there exists y ∈ comp(Y ) such that
x ≤Nd y. In the sequel we ﬁx a x ∈ comp(X ).

Let k be the least integer such that there exists indices
(xi1, ...,ik ) = Nd −k and for

i1, . . . , ik such that ↓ projcomp(X )
i1, ...,ik
every strict subsequence j1, . . . , jl of i1, . . . , ik we have
↓ projcomp(X )
(xj1, ..., jl ) , Nd −l . (Notice that such a k always
j1, ..., jl
exists since ↓ projcomp(X )
1, ...,d (x1, ...,d ) = N0). Without loss of
generality assume that i1 = 1, i2 = 2, . . . , ik = k. By deﬁni-
tion, it is easily seen that (x1, . . . , xk ) ∈ X1, ...,k .

Let n ∈ N be such that nd −k ≥ (xk+1, . . . , xd ). We now
have the following series of implications, each of which can
be easily seen to be true:

(x1, . . . , xk ) ∈ X1, ...,k and R(X ) ≤maj
Ad

R(Y )
=⇒ ∃(y1, . . . , yk ) ∈ Y1, ...,k such that
(x1, . . . , xk ) ≤ (y1, . . . , yk )
1, ...,k (y1, . . . , yk ) = Nd −k

=⇒ ↓ projcomp(Y )
=⇒ ∃(yk+1, . . . , yd ) ∈ projcomp(Y )

1, ...,k (y1, . . . , yk )

such that (yk+1, . . . , yd ) ≥ nd −k

=⇒ (y1, . . . , yk , yk+1, . . . , yd ) ∈ comp(Y )

Since (y1, . . . , yk ) ≥ (x1, . . . , xk ) and (yk+1, . . . , yd ) ≥
nd −k ≥ (xk+1, . . . , xd ) it follows that if we set y to be (y1, . . . , yd )
then y ∈ comp(Y ) and y ≥ x, thereby proving our claim. (cid:3)

Fifth step.

Lemma C.6.

|R(X )|Ad ≤ q(|X |Pf(Nd ))

where q(x) = (x + 1)d .

Proof. Let X ∈ Pf(Nd ). To bound the norm of R(X ), it is
enough to bound the norm of every set of the form Xi1,i2, ...,ik .
For ease of notation, we will only show that the norm of
X1, ...,k can be bounded. (The proof of the general case is just
a syntactic modiﬁcation of the following proof). Notice that
to bound the norm of X1, ...,k it is enough to bound the norm
of every element in X1, ...,k and the cardinality of X1, ...,k .

Let (x1, . . . , xk ) ∈ X1, ...,k . To bound the norm of (x1, . . . , xk )

it is enough to bound each xi . For this purpose, we claim that
∀i, xi ≤ |X |Pf(Nd )
Suppose equation (14) is false and there exists i such that
xi > |X |Pf(Nd ). Without loss of generality assume that i = k.
We consider two cases:

(14)

Case 1: k = 1: By equation (7) we have that ↓ comp(X ) ,

Nd and so there exists n ∈ N such that

nd <↓ comp(X )

(15)

We now have the following implications:

x1 ∈ X1 =⇒ ↓ projcomp(X )

1

(x1) = Nd −1

1

(x1)

=⇒ ∃(x2, . . . , xd ) ∈ projcomp(X )
such that (x2, . . . , xd ) ≥ nd −1
=⇒ (x1, x2, . . . , xd ) ∈ comp(X )
=⇒ (x1, . . . , xd ) ∈ Nd \ ↑ X
=⇒ ∀(y1, . . . , yd ) ∈ X , (y1, . . . , yd ) (cid:2) (x1, . . . , xd )
Now since x1 > |X |Pf(Nd ) it has to be the case that for
every (y1, . . . , yd ) ∈ X , y1 < x1 < x1 + n + 1. This combined
with the last implication gives us that
∀(y1, . . . , yd ) ∈ X , (y1, y2, . . . , yd ) (cid:2) (x1 + n + 1, x2, . . . , xd )
and so (x1 + n + 1, x2, . . . , xd ) ∈ comp(X ). Since (x1 + n +
1, x2, . . . , xd ) ≥ nd , equation (15) is contradicted.

Case 2: k > 1. The proof is very similar to the ﬁrst case.

We have the following:
(x1, . . . , xk ) ∈ X1, ...,k =⇒ ↓ projcomp(X )

1, ...,k−1(x1, . . . , xk−1) , Nd −k+1

=⇒ ∃nd −k+1 such that

nd −k+1 <↓ projcomp(X )

1, ...,k−1(x1, . . . , xk−1)

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

A. R. Balasubramanian

Hence there exists n ∈ N such that

nd −k+1 <↓ projcomp(X )

1, ...,k−1(x1, . . . , xk−1)

(16)

We now have the following implications:

(x1, . . . , xk ) ∈ X1, ...,k

=⇒ ↓ projcomp(X )
1, ...,k
=⇒ ∃(xk+1, . . . , xd ) ∈ projcomp(X )

(x1, . . . , xk ) = Nd −k

1, ...,k (x1, . . . , xk )

such that (xk+1, . . . , xd ) ≥ nd −k
=⇒ (x1, . . . , xk , xk+1, . . . , xd ) ∈ comp(X )
=⇒ (x1, . . . , xd ) ∈ Nd \ ↑ X
=⇒ ∀(y1, . . . , yd ) ∈ X ,

(y1, . . . , yd ) (cid:2) (x1, . . . , xd )

Now since xk > |X |Pf(Nd ), it has to be the case that for all
(y1, . . . , yd ) ∈ X , yk < xk < xk + n + 1. This combined with
the previous implication gives us that

∀(y1, . . . , yd ) ∈ X , (y1, y2, . . . , yd ) (cid:2) (x1, . . . , xk−1,

xk + n + 1, xk+1, . . . , xd )

and so (x1, . . . , xk−1, xk + n + 1, xk+1, . . . , xd ) ∈ comp(X )
which in turn implies that (xk + n + 1, xk+1, . . . , xd ) ∈
projcomp(X )
nd −k+1, equation (16) is contradicted.

1, ...,k−1(x1, . . . , xk−1). Since (xk + n + 1, xk+1, . . . , xd ) ≥

(cid:3)

D Results and proofs for fast-growing

hierarchies

D.1 Useful results for fast-growing hierarchies
We present a collection of useful results for fast-growing
classes before we proceed to prove the main theorems for
majoring and minoring ordering.

Let S(x) be the successor function. Recall that {Sα }, {S α }, {Fα }

denote the Hardy, Cichon and fast-growing hierarchies for
the successor function respectively. Notice that
∀x ∈ N, ∀α < ϵ0, Sα (x) = S α (x) − x

(17)

Proposition D.1. (see Sections 2.2 and 5.3.1 of [19]): The
class Fα is the class of functions obtained by closure under
substitution and limited recursion of the constant, sum, pro-
jections and the function Fα . Each class Fα is closed under
(ﬁnite) composition. Also for every 0 < α < β < ϵ0, we have
Fα ⊆ Fβ . Further F2 is the set of all elementary functions
Fα is the set of all primitive recursive functions.
and

α <ω

Ð

For the rest of this section, let д be a ﬁxed strictly increas-
ing inﬂationary control function such that д(x) ≥ S(x). The
following lemma is easy to see by induction on ordinals:

Lemma D.2. For all α < ϵ0 and for all x ∈ N, fд, α (x) ≥
Fα (x), дα (x) ≥ Sα (x), дα (x) ≥ S α (x).

The following facts are known about the fast growing hi-
erarchy and the fast growing function classes (see section
2.3.3 of [19], Lemmas C.12 and C.15 of [20] respectively):
Proposition D.3. For any 0 < α < β < ϵ0, Fβ ∈ Fβ
and Fβ < Fα . Further if h is a function such that eventually
h(x) ≥ Fβ (x), then h < Fα as well. (Consequently F c
< Fα
β
as well for any constant c).

Theorem D.4. Let д be eventually bounded by a function
in Fγ where γ > 0. Then,

• If α < ω then fд, α is bounded by a function in Fγ +α

and

• If γ < ω and α ≥ ω then fд, α is bounded by a function

in Fα .

Using these facts we now prove the required theorems.

D.2 Proof of theorem 7.1
Fix a d > 1. Let α = ωω d −1
and let n be a suﬃciently large nat-
ural number. By lemma D.2 we have that Hα (n) ≤ дα (n). By
equation (17), Hα (n) = H α (n) −n and by proposition A.3 we
have that H α (n) = Fω d −1 (n). Therefore Fω d −1(n) − n ≤ дα (n).
By theorem 3.2 we have that дα (n) ≤ L(Pf(Nd ), ⊑maj),φ◦д(φ(n))
which proves the ﬁrst part.

For the second part, suppose L(Pf(Nd ), ⊑maj),φ◦д ∈ Fα for
some α < ωd −1. Since d > 1, without loss of generality, we
can let 2 ≤ α < ωd −1. Proposition D.1 then implies that
L(Pf(Nd ), ⊑maj),φ◦д(φ(n)) + n ∈ Fα . Since Fω d −1 (n) ≤
L(Pf(Nd ), ⊑maj),φ◦д(φ(n))+n, proposition D.3 now implies a con-
tradiction.

D.3 Proof of theorem 7.2
Let h(x) = 4x ·д(x) and let α = ω(ω d −1)·k . Since д is primitive
recursive, so is h and so by proposition D.1, h ∈ Fγ for some
γ < ω. Notice that o(Pf(Nd )k ) is α and α is 4dk-lean.

Let n be a suﬃciently large number. Hence, by theorem
4.5 we have that L(Pf(Nd )k , ⊑maj),д(n) ≤ hα (4dkn). Now propo-
sition A.3 implies that hα (4dkn) ≤ hα (4dkn) = fh, (ω d −1)·k (4dkn).
Hence L(Pf(Nd )k , ⊑maj),д(n) ≤ fh, (ω d −1)·k (4dkn). Now applying
theorem D.4 (and proposition D.1) gives us the required up-
per bound.

D.4 Proof of theorem 7.3

By theorem 5.2 we have that

L(Pf(Nd ), ⊑maj),φ◦д(φ(n)) ≤ L(Pf(Nd ), ⊑min), (p◦φ◦д)(p(φ(n)))
By theorem 7.1 we have that

(18)

Fω d −1(n) − n ≤ L(Pf(Nd ), ⊑maj),φ◦д(φ(n))
Combining these two equations, we get the ﬁrst part of
the theorem. By the same argument used in the proof of
theorem 7.1, we can show that if L(Pf(Nd ), ⊑min),p◦φ◦д ∈ Fα
for some α < ωd −1 then Fω d −1 ∈ Fα , thereby contradicting
proposition D.3.

(19)

Complexity of controlled bad sequences over finite sets of Nd

LICS ’20, July 8–11, 2020, Saarbrücken, Germany

D.5 Proof of theorem 7.4
Let A = Pf(Nd )k and let α = ωω d −1 ·(2d ·k). Let t(x) := 4x ·
q(д(x)). Notice that t is primitive recursive and so t ∈ Fγ
for some γ < ω. Now for suﬃciently large n, there exists a
constant c such that

L(A, ≤min

A ),д(n) ≤ tα (c · д(n)2d )
≤ t α (c · д(n)2d )
= ft, ω d −1 ·(2d ·k)(c · д(n)2d )

by theorem 6.3

by proposition A.3

by proposition A.3

Combining theorem D.4 and proposition D.1, we get the

required result.

