Kunster - AR Art Video Maker - Real time video
neural style transfer on mobile devices

Wojciech Dudzik, Damian Kosowski
Netguru S.A.,
ul. Małe Garbary 9 61-756 Pozna´n, Poland
Email: wojciech.dudzik@netguru.com, damian.kosowski@netguru.com

0
2
0
2

y
a
M
7

]

V
C
.
s
c
[

1
v
5
1
4
3
0
.
5
0
0
2
:
v
i
X
r
a

Abstract—Neural style transfer is a well-known branch of deep
learning research, with many interesting works and two major
drawbacks. Most of the works in the ﬁeld are hard to use by non-
expert users and substantial hardware resources are required.
In this work, we present a solution to both of these problems.
We have applied neural style transfer to real-time video (over
25 frames per second), which is capable of running on mobile
devices. We also investigate the works on achieving temporal
coherence and present the idea of ﬁne-tuning, already trained
models, to achieve stable video. What is more, we also analyze
the impact of the common deep neural network architecture on
the performance of mobile devices with regard to number of
layers and ﬁlters present. In the experiment section we present
the results of our work with respect to the iOS devices and
discuss the problems present in current Android devices as well as
future possibilities. At the end we present the qualitative results of
stylization and quantitative results of performance tested on the
iPhone 11 Pro and iPhone 6s. The presented work is incorporated
in Kunster - AR Art Video Maker application available in the
Apple’s App Store.

I. INTRODUCTION

Painting as a form of art has accompanied us through the
history, presenting all sorts of things, from the mighty kings
portraits through, historic battles to ordinary daily activities.
It all changed with the invention of photography, and later,
digital photography. Nowadays, most of us carry a smart phone
equipped with an HD camera. In the past, re-drawing an image
in a particular style required a well-trained artist and lots of
time (and money).

This problem has been studied by both artists and computer
science researchers for over two decades within the ﬁeld of
non-photorealistic rendering (NPR). However, most of these
NPR stylization algorithms were designed for particular artis-
tic styles and could not be easily extended to other styles. A
common limitation of these methods is that they only use low-
level image features and often fail to capture image structures
effectively. The ﬁrst to use convolution neural networks (CNN)
for that task was Gatys et al. [1], [2]. They proposed a neural
algorithm for automatic image style transfer, which reﬁnes
a random noise to a stylized image iteratively constrained
by a content loss and a style loss. This approach resulted
in multiple works that attempted to improve the original and
addressed its major drawbacks, such as: the long time needed
to obtain stylization or applying this method to videos. In our
work, we studied the possibility of delivering these neural

style transfer (NST) methods for videos on mobile phones,
especially the iPhone. In order to do this, we investigate
the problem of temporal coherence among existing methods
and propose another approach as we found problems with
applying them to mobile devices. We also reﬁned the neural
network architecture with regard to its size; therefore, our main
contributions are as follow:

• Real-time application of neural style transfer to videos

on mobile devices (iOS).

• Investigation into achieving temporal coherence with ex-

isting methods.

• Analyzing the size of the models present in literature, and

proposing a new smaller architecture for the task.

First we shall review the current status of the NST ﬁeld
related to image and video style transfer (see II). Further in
(section III) we describe the training regime and proposed
neural network architecture. And ﬁnally, achieving temporal
coherence will be presented in Section III-B. In Section IV,
we will discuss the results obtained during our experiment and
show performance on mobile devices.

II. RELATED WORK

In this section, we will brieﬂy review the selected methods
for NST related to our work, while for a more compre-
hensive review, we recommend [3]. The ﬁrst method for
NST was proposed by Gatys et al. [1]. He demonstrated
exciting results that caught eyes in both academia and industry.
That method opened many new possibilities and attracted
the attention of other researchers, i.e.: [4], [5], [6], [7], [8],
whose work is based on Gatys original
idea. One of the
best successory projects was proposed by Johnson et al. [4]
with the feed-forward perceptual losses model. In his work,
Johnson used a pre-trained VGG [9] to compute the content
and style loss. This allowed real-time inference speed while
maintaining good style quality. A natural way to extend this
image processing technique to videos is to perform a certain
image transformation frame by frame. However, this scheme
inevitably brings temporal
inconsistencies and thus causes
severe ﬂicker artifacts for the methods that consider single
image transformation. One of the methods that solved this
issue was proposed by Ruder et al. [10], which was speciﬁcally
designed for video. Despite its usability for video, it requires a
time-consuming computations (dense optical ﬂow calculation),

 
 
 
 
 
 
and may take several minutes to process a single frame. Due
to this fact, it makes it not applicable for real-time usage.
To obtain a consistent and fast video style transfer method,
some real-time or near real-time models have recently been
developed.

Using a feed-forward network design, Huang et al. [11] pro-
posed a model similar to the Johnson’s [4] with an additional
temporal
loss. This model provides faster inference times
since it neither estimates optical ﬂows nor uses information
about the previous frame at the inference stage. Another, more
recent, development published by Gao et al. [12] describes a
model that does not estimate optical ﬂows but involves ground-
truth optical ﬂows only in loss calculation in the training stage.
The use of the ground-truth optical ﬂow allows us to obtain
an occlusion mask. Masks are further used to mark pixels that
are untraceable between frames and should not be included
in temporal loss calculations. Additionally, temporal loss is
considered not only on the output image but also at the feature
level of DNN. Gao’s lightweight and feed-forward network is
considered to be one of the fastest approach for video NST.
Still, applying methods mentioned above may be trouble-
some due to limited capabilities of mobile devices. Even
though modern smartphones are able to run many machine
learning models, achieving real-time performance introduces
more strict requirements about the model design. There was
several noticeable reports dealing with this issue, i.e. [13],
[14], [15]. In these papers, authors are focusing on running
current methods such as Johnson [4], on mobile platforms. In
order to meet the desired performance authors are encompass-
ing the use of specialized ARM instructions - NEON or GPU
computation while all of them perform only image to image
style transfer. Other implementations include [16] and very
popular Prisma application. Both of them relay on processing
images on server side (although Prisma added later option for
on device processing). As a consequence, both of them heavily
depend on the internet connection and enable processing of
single images at the same time.

Since the pace of progression in the hardware capabilities
(CPU, GPU) of mobile devices is very fast, the computation
power grows each year. This trend was shown clearly in
Ignatov et al[17], where the authors present a comprehensive
review of smartphones performance against popular machine
learning and deep learning technologies used nowadays. In
particular, they analyzed devices with Android operating sys-
tems. The introduction of fourth generation (according to
Ignatov’s designations) neural processing units (NPU) for
Android phones makes it easier for any deep neural network
application as many limitations are removed by the newer
hardware. Moreover, unifying programming interface with
frameworks like Tensorﬂow Lite, Android NNAPI, or CoreML
(for iPhones) ease the development process for any DNN
application. Before that, deploying a single model to multiple
devices was difﬁcult since one would need to integrated
it with multiple different SDKs prepared by each of chip
manufacturer, e.g., MNN, Mace. Each of them also provided
also certain limitations in term of supported operations, model

quantization options, and hardware usage.

This motivated us to pursue possibilities for work involved
in both areas of interest: NST and mobile applications of
DNN. As a result, we propose improvements by combining
the methods from those ﬁelds and propose a real-time video
neural style transfer on mobile devices.

III. PROPOSED METHOD

We propose a reliable method for achieving real-time neural
style transfer on mobile devices. In our approach, we are
primarily focused on iPhones. There are still some differences
between them and Android-based phones, which we will
address in Section IV-A. In this section, we will present our
network architecture and training procedure.

A. Network architecture

In Fig. 2, we present the architecture of our network, which
is the architecture present in [12]. In this paper, the architecture
is composed of three main components: 1) the encoder, 2) the
decoder, 3) the VGG-16 network. The encoder part is respon-
sible for obtaining feature maps while the decoder generates
stylized images from these feature maps. The last part of the
VGG network is used for perceptual loss calculation. During
the inference, only the encoder and decoder parts are used. A
detailed description of each layer of the network was presented
in Tab. I, with a focus on the number of ﬁlters.

We provide modiﬁcations to the original architecture, in-
cluding changes in the number of ﬁlters at each layer (showed
in last column of Tab. I), and removing the TanH opertation
at the last layer. Moreover, all of the kernel sizes were equal
to 3 × 3 as opposed to [12] where ﬁrst and last layer have
kernel size of 9 × 9. We used reﬂection padding for each
of the convolutions. For the upsample layer, we used the
nearest neighbors method. A visualization of the residual layer
architecture is presented in Fig. 1. The β is introduced in order
to investigate the inﬂuence of the number of residual layers
on the ﬁnal result of stylization.

TABLE I: Detailed layer by layer architecture of network used

Layer
1
2
3
4
5-8
9
10
11
12
13

Type
Input
Conv + instnorm + Relu
Conv + instnorm + Relu (stride 2)
Conv + instnorm + Relu (stride 2)
Residual ×4 · β
Upsample
Conv + instnorm + Relu
Upsample
Conv + instnorm + Relu
Conv

Filters in [12]

Our ﬁlters

48
96
192
192

96

48
3

α · 32
α · 48
α · 64
α · 64

α · 48

α · 32
3

B. Training procedure

As there is no code published by the authors of [12],
we tracked an open source implementation on the GitHub
webpage1. As far as we know, this implementation closely
resembles the work presented in the paper but shows addi-
tional artifacts (in the form of white bubbles) that were not

1https://github.com/EmptySamurai/pytorch-reconet

Fig. 1: Architecture of residual block

The ﬁnal form of the loss function for the ﬁrst stage is:

L(t) = γLcontent + ρLstyle + τ Ltv

(1)

During the second stage of ﬁne-tuning and achieving tempo-
ral consistency we adopt the solution presented in [12], where

L(t − 1, t) =

(cid:88)

i∈{t−1,t}

(γLcontent(i) + ρLstyle(i) + τ Ltv(i))

+λf Ltemp,f (t − 1, t) + λoLtemp,o(t − 1, t)
(2)
where λf Ltemp,f (t − 1, t) + λoLtemp,o(t − 1, t) are feature
temporal and output temporal loss components respectively, as
presented in [12].

The key idea in achieving temporal consistency is the usage
of optical ﬂow information between the consecutive frames
and occlusion masks for marking untraceable pixels, which
should be excluded from the loss calculation. By doing this
during the training, we are able to provide models that do not
need these information during inference stage, thus making it
a lot faster, as estimating dense optical ﬂow is operationally
expensive (time and computational wise).

The content loss and the style loss utilize feature maps of
the VGG network at the relu2_2 layer and [relu1_2, relu2_2,
relu3_3, relu4_3] layers respectively. We used VGG16 pre-
trained in ImageNet for calculating all of the losses.

IV. EXPERIMENTS AND DISCUSSION

For the training of the network, we used Coco [21] and
MPI Sintel [22] datasets. All image frames were resized to
256 × 256 pixels for the ﬁrst stage of the training. In the
second phase we used MPI Sintel, which required 640 × 360
resolution. We implement our style transfer pipeline on Py-
Torch 1.0.1 with Cuda 10.1 and cuDNN 7.1.4. All of the
experiments were performed on a single GTX 1080 GPU. In
the next subsections, we will discuss the differences between
deploying DNN on the Android and iPhone system .

The results of the two-stage training procedure is depicted
in the Fig. 5, while the content image is presented in the Fig.
4. The ﬁrst row presents the style images, while the second
row we presents the result of the model after the ﬁrst phase
of training. In the third row, we present the same images
after incorporating ﬁne-tuning for stabilization of the video.
As we can see, especially in the example of Weeping Woman
and Scream, introducing temporal coherence into the model
weakened the style that was learned by the neural network.
The weakening of the style is mainly visible as smoothing out
the resulting image so the colors are more uniﬁed across a
wide area of the image. As presented, achieving the desired
stabilization introduces some trade-off in the case of some
particular styles. As an advantage over other methods, our
two-stage training approach can provide both models (with
and without stabilization) thus letting the author decide what
effect is desired.

mentioned in original work. These phenomena are presented
in Fig. 3c, where artifacts can be easily seen. An interesting
and detailed explanation of this problem was presented in
[18]. The authors discovered that artifacts appear because of
instance normalization employed to increase training speed.
It is known that the latter is considered a better alternative
than batch normalization [19] for style transfer tasks. The
solution proposed by the author of this repository is to use
ﬁlter response normalization [20]. All instance normalization
layers are replaced by ﬁlter response normalization (FRN) and
all ReLU operations are replaced by a thresholded linear unit
(TLU). Despite the fact that this solution removes problematic
artifacts, it still cannot be deployed on mobile devices, because
FRN is not yet supported by any major framework at the time
of writing. Of course, it can be computed on the general CPU,
but this results in a major performance drop. On the other
hand, our implementation of ReCoNet, in particular cases may
present faded colors, as seen in Fig. 3b, and the ﬁnal effect
may not be as good as expected (3a). The result presented in
Fig. 3a was achieved by training the same architecture only
with content and style loss. This schema reassembles the work
of [4]. In our opinion, there might be some implementation
details in ReCoNet that we are missing, which are crucial
for reaching the desired result. While we were not able to
reproduce ReCoNet work or hit the obstacles with deployment
on mobile devices, we came up with the idea of two-stage
training as follows:

1) Training only with content and style loss, as in [4].
2) Fine-tuning the network with feature and output tempo-

ral losses added (losses came from [12]).

During the ﬁrst stage of the training we adopt the content
loss Lcontent and the style loss Lstyle and the total variation
regularizer Ltv in the perceptual losses model based on [4].

Fig. 2: ReCoNet architecture. Symbols are as follow: It, Ft, Ot are input image, encoded feature map and output image
respectively at time point t. The It−1, Ft−1, Ot−1 are the results obtained in previous frame t − 1. The Style represents the
artistic image used for stylization while Mt and Wt denote the occlusion mask and optical ﬂow between frames t − 1 and t1.
The loss function are denoted with red text [12].

A. iOS vs Android implementation

Deployment of DNN on mobile devices introduces many
difﬁculties. These difﬁculties include, among other things:
hardware capabilities, proper drivers for hardware, and deep
learning frameworks implementation. What is more, there are
some noticeable differences between Android and iOS devices.
First of all, Apple introduced a dedicated NPU with the A11
Bionic system on chip (SoC) back in 2017. Although not
available to third-party applications, the next-generation A12
SoC changed that in 2018. This allows for very fast and power-
efﬁcient calculations with the dedicated NPU. What is more
thanks to the Apple ecosystem, they were able to provide
the CoreML library that hides the technical details from the
developer. During multiple numerical experiments, we have
noticed that our neural network implementation worked fast
on Apple devices without a dedicated NPU. This was possible
due to the fact that CoreML library can also exploit the GPU.
The switch between NPU and GPU on different devices is
done automatically, depending on their hardware. Another
advantage of the CoreML, is that it supports a wide variety of
formats as well as provides a proper conversion mechanism for
different models e.g ONNX → CoreML, Keras → CoreML.
The Android devices are not so uniﬁed which brings a num-
ber of problems during development. The ﬁrst to follow, there
is no single library to cover multiple use-cases. In our opinion,
most promising solution for DNN projects is Tensorﬂow Lite,
however this may change in the future. Being relatively mature
library, TF Lite, it is not a silver bullet. Depending on the
backend used (CPU, GPU or dedicated hardware) different
operations (layers) might not be supported. It may depend on

things such as: kernel size, stride value, or padding options.
These dependencies involves an automatic mechanism of
switching computation from the desired hardware to the CPU
when operation is not supported (CPU is often the slowest
possible option). These situations must be carefully examined
and addressed. Another problem when using Tensorﬂow Lite is
the conversions of models trained using different frameworks.
Some of the conversion tools that exists might
introduce
additional layers. A great example can be shown in converting
Pytorch to Tensorﬂow through the common format of ONNX.
As these frameworks depends on a different layout of data
(Tensorﬂow uses NHWC order of data while Pytorch uses
NCHW), any kind of conversion adds transform layers which
signiﬁcantly impact the performance. Numerical experiments
with conversion (not published) showed, that our application
noted a 30-40% drop in the frames per second.

Another library worth mentioning is Pytorch, which with the
version 1.3, allowed the execution of the models on mobile
devices. While this is s promising development direction, it
is still lacking the GPU and Andorid Neural Network API
(NNAPI) support, which is currently the major drawback. The
variety of Android devices results in another problem. There
are multiple device manufactures and chip manufacturers,
which causes slow adoption of the NNAPI. What is more
the usage of NNAPI depends on the drivers provided by the
device manufacturer. With no drivers provided,
it defaults
there might be
to the use of CPU. On the other hand,
major differences between smartphones models in terms of
supporting the NNAPI as some of them might support only
quantized (INT8) or ﬂoat (FP32) only models. All of that make

a) Expected

b) Bad colors

c) Artifacts

Fig. 3: Problems that turned out on achieving temporal coherence

Fig. 4: Content image for experiments presented in the Fig. 5

B. Investigation on size of network

In Tab. I, we introduced α and β parameters for the number
of ﬁlters and number of residual
layers. We ran training
sessions with these parameters, to check how they impact
achieved style transfer. In the Tab. II, we present the results of
our experiments. The qualitative (visual) comparison for the
network trained with "Scream" by Munch as style image is
presented in the Fig. 8 while the content and style image for
these models are presented in Fig. 7. All of the networks were
trained with the exactly the same settings for hyperparameters.
We also did preliminary experiments with the quantization
of the networks to INT8 format but we did not notice a signif-
icant improvement in terms of processing speed (frames per
second). As our networks run on mobile GPU, it might happen
that there is no special hardware to exploit the quantization.
As a result, the calculation with INT8 or FLOAT32 take a
similar amount of time. While this is an uncommon situation,
we need to investigate it further because this might depend on
certain device models used for those experiments. While the
pruning of an already trained network can be another solution
to ﬁnding the optimal size of the networ,k we did not have a
chance to investigate it deeply enough. The problem that we
see for these techniques is that the value of loss function for
style transfer is not showing the ﬁnal results that the network
will provide. This makes it hard to assess the neurons that
should be deleted during the pruning with the restriction of
providing a similar result to the original network. The best
way to measure tha,t is the qualitative approach of comparing

it hard to predict how a deployed neural network model will
behave across multiple devices. As mentioned in Ignatov et
al[17], the newest generation of NPU seems to provide a wide
set of commonly supported operations. These NPUs supports
both quantized and ﬂoat models at the same time. All of that
shows a great progress made in recent years on the Android
device which should make it easier to deploy deep learning
model on both of the platforms, as until now, Android was
inferior in comparison with iOS.

a) Scream

b) Mona Lisa

c) Weeping Woman

d) Starry Night

Fig. 5: Examples of different stylization achieved with the presented training technique. First row is style image, second is
result after ﬁrst phase of training, the last row presents ﬁnal model’s results.

Fig. 6: A graph showing FPS versus number of parameters
(in thousands) in DNN model tested with iPhone 11 Pro and
iPhone 6s. The x-axis is presented in logarithmic scale

two images which might be subjective and opinion-based.
Moreover, pruning tends to produce sparse networks (with
sparse matrices) which may not be faster than the full network.
Also as presented in [23] pruning mostly happens in fully
connected layers which we do not use in our architecture.

As we can see in Fig. 8, the smallest networks (id: 5, 10
and 15) provided very poor results, with multiple deformations
which made it hard to recognize the original content image. At
the same time, networks denoted with id 4, 9 and 14 provide
much better results and are able to capture both: style and
content. In our opinion, these results indicate that there is
a tradeoff between the keeping good-looking stylization and
remaining proper content. What is interesting we see that the
model 14 is able to provide the most ﬁne details (look at the
clock tower of Big Ben) from those three while being the
smallest, however, this type of evaluation is purely subjective.
We can also hypothesize that the model capacity of all of these
networks id 4, 9, and 14 should be sufﬁcient for learning
the style. However, achieving subjectively good results may
depend on the initialization of network parameters. In some
cases, it may be difﬁcult to recognize the differences between
the rest of the models. As there are some clear differences
visible between them, in our opinion the style and content
is represented with the same level of detail and choosing one
over another would be a matter of individual preferences about
the certain style.

No surprise, the reduction of the model’s size on disk is
proportional to the reduction of the number of parameters .

TABLE II: Conﬁgurations tested

Id

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

α

β

parameters

% of ReCoNet

Size (MB)

% of ReCoNet

1.000
0.750
0.500
0.250
0.125
1.000
0.750
0.500
0.250
0.125
1.000
0.750
0.500
0.250
0.125

1
1
1
1
1
0.75
0.75
0.75
0.75
0.75
0.5
0.5
0.5
0.5
0.5

470k
267k
122k
33k
9k
307k
173k
78k
20k
5k
233k
131k
59k
15k
4k

15.16
8.64
3.94
1.06
0.30
9.93
5.61
2.51
0.64
0.17
7.54
4.26
1.91
0.49
0.13

1.79
1.02
0.47
0.12
0.04
1.17
0.66
0.30
0.08
0.02
0.89
0.50
0.23
0.06
0.02

15.14
8.63
3.98
1.02
0.34
9.90
5.58
2.54
0.68
0.17
7.53
4.23
1.95
0.51
0.17

iPhone 11 Pro

iPhone 6s

FPS (480 × 320)
12.26
14.91
21.91
27.72
34.08
15.1
16.66
21.28
38.63
49.92
15.66
18.21
22.64
40.01
51.92

(320 × 240)
19.57
21.41
25.17
40.91
46.41
18.53
21.52
34.77
51.37
60.41
18.93
23.43
37.68
53.90
62.43

FPS (480 × 320)
4.96
6.13
13.27
19.33
22.77
8.49
8.56
18.29
22.82
33.75
9.25
9.40
19.07
24.19
35.93

FPS (320 × 240)
9.48
13.65
19.45
24.16
33.98
12.93
17.65
21.73
35.03
48.38
14.05
18.65
23.21
38.16
50.56

It is well-known that it is the parameters of networks that
take the most space in the saved model (see Tab. I). We are
also showing the reduction in both of those terms comparing
it to ReCoNet [12]. The size of the network is an important
matter when deploying it to mobile devices as the size of the
application may depend heavily on that. When each network
provides a single artist style, having multiple styles in a
single application can quickly increase its size. The original
ReCoNet network size is 11.82 MB while our experiments
ranges form 1.79 to 0.02 MB. Thus we are able to provide
multiple models while keeping a smaller memory footprint.
The performance of our model in terms of frames per second
(FPS) was measured on the iPhone 11 Pro and iPhone 6s
with two different resolutions of the input for model. The
measurement was taken by applying the model to the video
with a resolution of 1920 × 1080, length of 21, seconds coded
with H.264 and 25 FPS. The results present in Tab. I are
the average speed of each model after processing this video
(resizing the image to network input size is included into this
measurement). As we can see, decreasing the number of pa-
rameters for the network gives non-linear growth in the speed
of processing. This trend is presented in the Fig. 6. We can see
the logarithmic relationship between the number of FPS and
number of parameters. The difference between the models 1
and 2 is around 200k parameters while this shrinking provides
only 2 more FPS (for both tested devices) on averaged in favor
of the smaller model. The further shrinking of models (id 3,
8, and 13) provides near real-time performance with 22 FPS
on the 480 × 320 resolution and real-time performance (over
25 FPS) with 320 × 240 resolution for the iPhone 11 Pro.
In the case of the iPhone 6s device, smaller models, id 4,
9, and 14, are needed to achieve similar performance. While
we are not aware of the hardware design of the Apple chips,
what can be seen is that removing residual layers has rather a
small impact on the overall performance of the model while
α is much more important. This is true for both of the tested
devices. This performance impact can be especially be seen
when comparing models with α = 1.0 and different β. Despite
a great overall difference in the number of parameters between
them, the ﬁnal performance stays is similar for 320 × 240
resolution and the iPhone 11 Pro device. In this case, we

can see the ﬂuctuation of measurement where smaller models
show decreased performance as we were simulating a real
use case with some applications running in background. To
conclude, we have proven that the size of the network, in
terms of number of parameters and the model size on the disk,
can be greatly reduced and we are able to provide real-time
performance on mobile devices without losing the quality of
the expected result.

a) Content image

b) Style image

Fig. 7: Content and style images for experiments in Fig. 8

V. CONCLUSIONS

In this paper, we presented a feed-forward neural network
based on ReCoNet [12] for real-time video style transfer on
mobile devices. We showed technical challenges in deploying
CNN to mobile devices and the differences between the
Android and iPhone ecosystems with recommendations for
any future work. This includes that we need to be very careful
about using certain layers and kernel sizes in order to achieve
expected performance. We also proposed a novel way of
achieving temporal consistency by re-training already available
models. By this, we made it easy to use models that are trained
with other methods. At last, we also investigated the network
size regarding the number of ﬁlters and number of residual
layers and showed that shrinking them to less than 4% of
the number of parameters present in [12] we are still able to
achieve good looking results as shown by our experiments.
The results of that work can be checked with the Kunster –
AR Art Video Maker mobile application on iOS devices.

α

1

5
7
0

.

5
.
0

5
2
.
0

5
2
1
0

.

1

β
0.75

0.5

Fig. 8: Qualitative comparison of stylization performed by networks with different size

COCO: common objects in context,” CoRR, vol. abs/1405.0312, 2014.
[Online]. Available: http://arxiv.org/abs/1405.0312

[22] D. J. Butler, J. Wulff, G. B. Stanley, and M. J. Black, “A naturalistic
open source movie for optical ﬂow evaluation,” in European Conf. on
Computer Vision (ECCV), ser. Part IV, LNCS 7577, A. Fitzgibbon et al.
(Eds.), Ed. Springer-Verlag, Oct. 2012, pp. 611–625.

[23] Q. Huang, S. K. Zhou, S. You, and U. Neumann, “Learning to prune
ﬁlters in convolutional neural networks,” CoRR, vol. abs/1801.07365,
2018. [Online]. Available: http://arxiv.org/abs/1801.07365

REFERENCES

[1] L. A. Gatys, A. S. Ecker, and M. Bethge, “Image style transfer using
convolutional neural networks,” 2016 IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), pp. 2414–2423, 2016.

[2] ——, “A neural algorithm of artistic style,” CoRR, vol. abs/1508.06576,

2015. [Online]. Available: http://arxiv.org/abs/1508.06576

[3] Y. Jing, Y. Yang, Z. Feng, J. Ye, and M. Song, “Neural style transfer:
A review,” CoRR, vol. abs/1705.04058, 2017. [Online]. Available:
http://arxiv.org/abs/1705.04058

[4] J. Johnson, A. Alahi, and F. Li, “Perceptual

losses for real-time
style transfer and super-resolution,” CoRR, vol. abs/1603.08155, 2016.
[Online]. Available: http://arxiv.org/abs/1603.08155

[5] V. Dumoulin, J. Shlens, and M. Kudlur, “A learned representation for
artistic style,” CoRR, vol. abs/1610.07629, 2016. [Online]. Available:
http://arxiv.org/abs/1610.07629

[6] A. J. Champandard, “Semantic style transfer and turning two-bit
into ﬁne artworks,” CoRR, vol. abs/1603.01768, 2016.

doodles
[Online]. Available: http://arxiv.org/abs/1603.01768

[7] F. Luan, S. Paris, E. Shechtman, and K. Bala, “Deep photo style
[Online]. Available:

transfer,” CoRR, vol. abs/1703.07511, 2017.
http://arxiv.org/abs/1703.07511

[8] L. A. Gatys, A. S. Ecker, M. Bethge, A. Hertzmann,
in neural
“Controlling perceptual

factors

E. Shechtman,
transfer,” CoRR, vol. abs/1611.07865, 2016.
http://arxiv.org/abs/1611.07865

and
style
[Online]. Available:

[9] K. Simonyan and A. Zisserman, “Very deep convolutional networks for
large-scale image recognition,” in International Conference on Learning
Representations, 2015.

[10] M. Ruder, A. Dosovitskiy, and T. Brox, “Artistic style transfer
for videos,” CoRR, vol. abs/1604.08610, 2016. [Online]. Available:
http://arxiv.org/abs/1604.08610

[11] H. Huang, H. Wang, W. Luo, L. Ma, W. Jiang, X. Zhu, Z. Li, and W. Liu,
“Real-time neural style transfer for videos,” in The IEEE Conference on
Computer Vision and Pattern Recognition (CVPR), July 2017.

[12] C. Gao, D. Gu, F. Zhang, and Y. Yu, “Reconet: Real-time coherent
video style transfer network,” CoRR, vol. abs/1807.01197, 2018.
[Online]. Available: http://arxiv.org/abs/1807.01197
[13] S. Lin, P. Xiong, and H. Liu, “Tiny transform net

for mobile
image stylization,” in Proceedings of the 2017 ACM on International
Conference on Multimedia Retrieval, ser. ICMR ’17. New York,
NY, USA: Association for Computing Machinery, 2017, p. 402–406.
[Online]. Available: https://doi.org/10.1145/3078971.3079034

[14] R. Tanno, S. Matsuo, W. Shimoda, and K. Yanai, “Deepstylecam:
A real-time style transfer app on ios,” in MultiMedia Modeling,
L. Amsaleg, G. ó. Guomundsson, C. Gurrin, B. ó. Jónsson, and
S. Satoh, Eds. Cham: Springer International Publishing, 2017, pp.
446–449. [Online]. Available: https://link.springer.com/chapter/10.1007/
978-3-319-51814-5_39

[15] S. Pasewaldt, A. Semmo, M. Klingbeil, and J. Döllner, “Pictory -
neural style transfer and editing with coreml,” in SIGGRAPH Asia
2017 Mobile Graphics & Interactive Applications, ser. SA ’17. New
York, NY, USA: Association for Computing Machinery, 2017. [Online].
Available: https://doi.org/10.1145/3132787.3132815

[16] F. Becattini, A. Ferracani, L. Landucci, D. Pezzatini, T. Uricchio,
and A. Del Bimbo, “Imaging novecento. a mobile app for automatic
recognition of artworks and transfer of artistic styles,” in Digital
Heritage. Progress in Cultural Heritage: Documentation, Preservation,
and Protection, M. Ioannides, E. Fink, A. Moropoulou, M. Hagedorn-
Saupe, A. Fresa, G. Liestøl, V. Rajcic, and P. Grussenmeyer, Eds. Cham:
Springer International Publishing, 2016, pp. 781–791.

[17] A. Ignatov, R. Timofte, A. Kulik, S. Yang, K. Wang, F. Baum, M. Wu,
L. Xu, and L. V. Gool, “Ai benchmark: All about deep learning on
smartphones in 2019,” 2019.

[18] T. Karras, S. Laine, M. Aittala, J. Hellsten, J. Lehtinen, and T. Aila,
“Analyzing and improving the image quality of stylegan,” 2019.
[19] D. Ulyanov, A. Vedaldi, and V. S. Lempitsky, “Instance normalization:
The missing ingredient for fast stylization,” CoRR, vol. abs/1607.08022,
2016. [Online]. Available: http://arxiv.org/abs/1607.08022

[20] S. Singh and S. Krishnan, “Filter response normalization layer: Elimi-
nating batch dependence in the training of deep neural networks,” 2019.
[21] T. Lin, M. Maire, S. J. Belongie, L. D. Bourdev, R. B. Girshick,
J. Hays, P. Perona, D. Ramanan, P. Dollár, and C. L. Zitnick, “Microsoft

