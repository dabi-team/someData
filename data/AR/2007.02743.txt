1
2
0
2

v
o
N
1
1

]
T
R
.
h
t
a
m

[

2
v
3
4
7
2
0
.
7
0
0
2
:
v
i
X
r
a

GROUP PARTITION CATEGORIES

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

Abstract. To every group G we associate a linear monoidal category Par (G) that we call a group
partition category. We give explicit bases for the morphism spaces and also an eﬃcient presentation
of the category in terms of generators and relations. We then deﬁne an embedding of Par (G) into
the group Heisenberg category associated to G. This embedding intertwines the natural actions of
both categories on modules for wreath products of G. Finally, we prove that the additive Karoubi
envelope of Par (G) is equivalent to a wreath product interpolating category introduced by Knop,
thereby giving a simple concrete description of that category.

Contents

Introduction
1.
2. Wreath products
3. Group partition categories
4. Presentation
5. Categorical action
6. The group Heisenberg category
7. The embedding functor
8. Compatibility of categorical actions
9.
References

Interpolating categories

1
3
5
8
12
15
16
20
24
27

1. Introduction

The partition category is a k-linear monoidal category, depending on a parameter d in the com-
mutative ground ring k, that encodes the homomorphism spaces between tensor powers of the per-
mutation representation of all the ﬁnite symmetric groups in a uniform way. Its additive Karoubi
envelope is the category Rep(Sd), introduced by Deligne in [Del07]. Deligne’s category Rep(Sd) in-
terpolates between categories of representations of symmetric groups in the sense that the category
of representations of Sn is equivalent to the quotient of Rep(Sn) by the tensor ideal of negligible
morphisms.

When working with linear monoidal categories in practice, it is useful to have two descriptions.
First, one would like to have an explicit basis for each morphism space, together with an explicit
rule for the tensor product and composition of elements of these bases. Second, one wants an
eﬃcient presentation of the category in terms of generators and relations. Such a presentation
is particularly useful when working with categorical actions, since one can deﬁne the action of
generators and check the relations. Both descriptions exist for the partition category. Bases for
morphisms spaces are given in terms of partition diagrams with simple rules for composition and

2020 Mathematics Subject Classiﬁcation. Primary 18M30; Secondary 20E22.
Key words and phrases. Partition category, Heisenberg category, Deligne category, wreath product, string diagram,

linear monoidal category.

 
 
 
 
 
 
2

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

tensor product. Additionally, there is an eﬃcient presentation, which can be summarized as the
statement that the partition category is the free k-linear symmetric monoidal category generated
by a d-dimensional special commutative Frobenius object.

Deligne’s original paper [Del07] has inspired a great deal of further research. Of particular
In [Kno07], Knop
importance for the current paper are the generalizations of Knop and Mori.
generalized Deligne’s construction by embedding a regular category A into a family of pseudo-
abelian tensor categories T (A, δ), which are the additive Karoubi envelope of categories T 0(A, δ)
depending on a degree function δ. Deligne’s original construction corresponds to the case where A
is the category of ﬁnite boolean algebras (equivalently, the opposite of the category of ﬁnite sets).
Knop’s construction, which is inspired by the calculus of relations on A, has the advantage of being
very general, but the disadvantage of being rather abstract. In particular, Knop does not give a
presentation of his categories in terms of generators and relations.

In [Mor12], Mori generalized Deligne’s construction in a somewhat diﬀerent direction. For each
d ∈ k, Mori deﬁnes a 2-functor Sd sending a tensor category C to another tensor category Sd(C),
which should be thought of as a sort of interpolating wreath product functor. Morphisms are
described in terms of recollements and one has a presentation using the string diagram calculus for
braided monoidal categories.

In the current paper, we are interested in a setting where the constructions of Knop and Mori
are closely related. This occurs when A is the category of ﬁnite boolean algebras with a locally free
action of a ﬁnite group G, and when C is the category of representations of G. With these choices, the
categories deﬁned by Knop and Mori can both be viewed as interpolating categories for the categories
of representations of the wreath products Gn ⋊ Sn. In fact, Mori’s interpolating category contains
Knop’s as a full subcategory; see [Mor12, Rem. 4.14] for a precise statement. These “wreath Deligne
categories” and other variations have been further studied in [Eti14, FS18, Har16, Ryb21, Ryb19].
Wreath products of groups and algebras appear in a surprising number of areas of mathematics,
including vertex operators, the geometry of the Hilbert scheme, and categoriﬁcation. In particular,
to every Frobenius algebra (or, more generally, graded Frobenius superalgebra) A and choice of
central charge k ∈ Z, there is a Frobenius Heisenberg category Heis k(A), introduced in [RS17, Sav19]
and further studied in [BSW]. When k = ±1, this category encodes the representation theory of all
the wreath product algebras A⊗n ⋊Sn, n ∈ N, simultaneously. (For other choices of k it encodes the
representation theory of more general cyclotomic quotients of the aﬃne wreath product algebras
introduced in [Sav20].) Generating objects of Heis ±1(A) correspond to induction and restriction
functors with respect to the natural embedding A⊗n ⋊ Sn ֒→ A⊗(n+1) ⋊ Sn+1.

In the current paper, we are interested in the case where the Frobenius algebra A is the group
In this case, we call Heis(G) := Heis −1(kG) the group Heisenberg
algebra of a ﬁnite group G.
category. When G is trivial, this category was ﬁrst introduced by Khovanov in [Kho14]. In [NLS],
the authors described a natural embedding of the partition category into Khovanov’s Heisenberg
category. This, in turn, induces an embedding of Deligne’s interpolating category Rep(Sd) into the
additive Karoubi envelope of the Heisenberg category.

The goal of the current paper is to give simple, explicit descriptions of wreath product analogues
of partition categories and to relate these to group Heisenberg categories. First, to any group
G we associate a G-partition category Par (G) (Deﬁnition 3.6). The deﬁnition is given in terms
of explicit G-partition diagrams, which form bases for the morphism spaces of the category. We
then give an eﬃcient presentation of Par (G) in terms of generators and relations (Theorem 4.4).
There is a natural categorical action of the G-partition category on tensor products of permutation
representations of wreath products of G. This action can be described in terms of the generators
(Theorem 5.1) or the bases of G-partition diagrams (Proposition 5.2). The action functor is full,
and we give an explicit description of its kernel (Theorem 5.4). This gives a categorical analogue

GROUP PARTITION CATEGORIES

3

of a double centralizer property akin to Schur–Weyl duality, generalizing work of Bloss [Blo03] who
deﬁned G-colored partition algebras which are isomorphic to the endomorphism algebras in Par (G).
Next, we give an explicit embedding of Par (G) into the group Heisenberg category Heis(G)
(Theorem 7.1), generalizing the main result of [NLS]. This embedding intertwines the natural
categorical actions of Par (G) and Heis(G) on modules for wreath products (Theorem 8.1).

Finally, we prove (Theorem 9.5) that the group partition category Par (G) is equivalent to Knop’s
category T 0(A, δ) when A is the category of ﬁnite boolean algebras with a locally free G-action
(equivalently, the opposite of the category of ﬁnite sets with a free G-action). Thus, one can view
Par (G) as a concrete, and very explicit, realization of the wreath product interpolating categories
of Knop and Mori. In particular, the calculus of G-partition diagrams is signiﬁcantly simpler than
the previous constructions. (Although the latter are, of course, more general.) In addition, the pre-
sentation of Par (G), in terms of generators and relations, given in the current paper is considerably
more eﬃcient that the presentation given by Mori in [Mor12, Prop. 4.26]; see Remark 9.7 for further
details.

The structure of the current paper is as follows. In Section 2 we recall some basic facts about
wreath products. We deﬁne our main object of interest, the group partition category, in Section 3.
We then give a presentation of Par (G) in terms of generators and relations in Section 4. In Section 5
we deﬁne the natural categorical action of Par (G). We recall the deﬁnition of the group Heisenberg
category Heis(G) in Section 6 and then, in Section 7, we deﬁne the embedding of Par (G) into
Heis(G). In Section 8 we prove that this embedding intertwines the natural categorical actions of
these categories on modules for wreath products. Finally, in Section 9 we relate Par (G) to the
constructions of Knop and Mori.

Acknowledgements. This research of A. Savage was supported by Discovery Grant RGPIN-2017-
03854 from the Natural Sciences and Engineering Research Council of Canada. S. Nyobe Likeng
was also supported by this Discovery Grant. The authors would like to thank S. Henry and P. Scott
for helpful conversations concerning boolean algebras.

2. Wreath products

Fix a commutative ground ring k and a group G with identity element 1G. We use an unadorned
tensor product ⊗ to denote the tensor product over k. We will often deﬁne linear maps on tensor
products by specifying the images of simple tensors; such maps are always extended by linearity.

For n ≥ 1, the symmetric group Sn acts on Gn by permutation of the factors, where we number

factors from right to left :

The wreath product group Gn := Gn ⋊ Sn has underlying set Gn × Sn, and multiplication

π · (gn, . . . , g1) = (gπ−1(n), . . . , gπ−1(1)).

(g, π)(h, σ) = (g(π · h), πσ),

g, h ∈ Gn, π, σ ∈ Sn.

We identify Gn and Sn with the subgroups Gn × {1Sn } and {1G} × Sn, respectively, of Gn ⋊ Sn.
Hence we write gπ for (g, π).

Let A := kG be the group algebra of G. Then the group algebra An := kGn is isomorphic
to the wreath product algebra A⊗n ⋊ Sn, which is isomorphic to A⊗n ⊗ kSn as a k-module, with
multiplication given by

(a ⊗ π)(b ⊗ σ) = a(π · b) ⊗ πσ,
We adopt the convention that G0 is the trivial group, so that A0 = k.

a, b ∈ A⊗n, π, σ ∈ Sn.

For 1 ≤ i ≤ n − 1, let si ∈ Sn be the simple transposition of i and i + 1. The elements

πi := sisi+1 · · · sn−1,

i = 1, . . . , n,

4

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

form a complete set of left coset representatives of Sn−1 in Sn. Here we adopt the convention that
πn = 1Sn.

There is an injective group homomorphism

Gn−1 ֒→ Gn,

(gn−1, . . . , g1) 7→ (1G, gn−1, . . . , g1).

This induces an embedding of the wreath product algebra An−1 into An. For g ∈ G and 1 ≤ i ≤ n,
deﬁne

Then the set

(2.1)

g(i) := (1G, . . . , 1G
n−i entries

, g, 1G, . . . , 1G

) ∈ Gn.

i−1 entries

|

{z

}

|

{z

}

{g(i)πi = πig(n) : 1 ≤ i ≤ n, g ∈ G}

is a complete set of left coset representatives of Gn−1 in Gn. Hence it is a basis for An as a right
An−1-module.

Throughout the paper, we adopt the convention that g = (gn, . . . , g1) and h = (hn, . . . , h1).
That is, gi denotes the i-th component of g (counting from right to left, as usual), and similarly for
hi. This convention applies to all boldface letters denoting elements of Gn for some n ∈ N.
Deﬁnition 2.1. The permutation representation of An is the k-module V = An, with action given
by

gπ · (an, . . . , a1) = (gnaπ−1(n), . . . , g1aπ−1(1)),
(2.2)
g ∈ Gn, π ∈ Sn, an, . . . , a1 ∈ A, extended by linearity. In other words, Sn acts by permuting the
entries of elements of An, while Gn acts by componentwise multiplication.

For i = 1, . . . , n, deﬁne ei = (0, . . . , 0, 1, 0, . . . , 0) ∈ V , where the 1 appears in the i-th position.

Then (2.2) implies that

(2.3)

The set

(2.4)

gπ · (aei) = gπ(i)aeπ(i),

g ∈ Gn, π ∈ Sn, a ∈ A, 1 ≤ i ≤ n.

Bk := {gkeik ⊗ · · · ⊗ g1ei1 : g1, . . . , gk ∈ G, 1 ≤ i1, . . . , ik ≤ n}

is a basis for V ⊗k.

For the remainder of the paper, we write ⊗n for ⊗An.

Lemma 2.2. For any An-module W , we have an isomorphism of An-modules

An ⊗n−1 W → V ⊗ W,

γ ⊗ w 7→ γen ⊗ γw,

γ ∈ Gn, w ∈ W,

with inverse

V ⊗ W → An ⊗n−1 W,

gei ⊗ w 7→ g(i)πi ⊗ π−1

i

g−1

(i)

w,

1 ≤ i ≤ n, g ∈ G, w ∈ W.

Proof. The ﬁrst map is well-deﬁned since An−1 acts trivially on en, and it is clearly a homomorphism
(cid:3)
of An-modules. It is straightforward to verify that the second map is the inverse of the ﬁrst.

(cid:1)

(cid:0)

Denote by 1n the trivial one-dimensional An-module. Let B denote An, considered as an

(An, An−1)-bimodule, and, for k ≥ 1, deﬁne

Bk := B ⊗n−1 B ⊗n−1 · · · ⊗n−1 B

.

k factors

{z

|

}

GROUP PARTITION CATEGORIES

5

Corollary 2.3. For k ≥ 1, we have an isomorphism of An-modules

βk : V ⊗k ∼=−→ Bk ⊗ 1n,

gkeik ⊗ · · · ⊗ g1ei1 7→ g(ik )

k πik ⊗ π−1
ik

g−1
k

(ik)

g(ik−1)
k−1 πik−1 ⊗ · · · ⊗ π−1
i2

g−1
2

(i2)

g(i1)
1 πi1 ⊗ 1,

with inverse map

(cid:0)

(cid:1)

(cid:0)

(cid:1)

k : Bk ⊗ 1n
β−1

∼=−→ V ⊗k,

γk ⊗ · · · ⊗ γ1 ⊗ 1 7→ (γken) ⊗ (γkγk−1en) ⊗ · · · ⊗ (γk · · · γ1en),

γk, . . . , γ1 ∈ Gn.

3. Group partition categories
We continue to ﬁx a group G and a commutative ring k. For k, l ∈ N = Z≥0, a partition of type
is a partition of the set X l
is a pair (P, g),
k . We deﬁne a part of (P, g)

l
k := {1, . . . , k, 1′, . . . , l′}. A G-partition of type
k
l
where P is a partition of type
(cid:0)
k
to be a part of the partition P .
(cid:0)

and g = (g1, . . . , gk, g1′, . . . , gl′) ∈ GX l

, with P = {P1, . . . , Pr}. We say these G-
partitions are equivalent, and we write (P, g) ∼ (P, h), if there exist t1, . . . , tr ∈ G such that, for
each i = 1, . . . , r, we have

Let (P, g) and (P, h) be G-partitions of type

l
k

l
k

(cid:1)

(cid:1)

(cid:1)

(cid:0)

(cid:0)

(cid:1)

This clearly deﬁnes an equivalence relation on the set of G-partitions of type
denote the equivalence class of (P, g).

ha = tiga

for every a ∈ Pi.

We depict the G-partition (P, g) of type

as a graph with l vertices in the top row, labelled
g1′, . . . , gl′ from right to left, and k vertices in the bottom row, labelled g1, . . . , gk from right to left.
(We will always number vertices from right to left.) We draw edges so that the parts of the partition
are the connected components of the graph.

(cid:0)

(cid:1)

l
k

(cid:0)

(cid:1)

For example, the equivalence class of the G-partition (P, g) of type

with

7
5

l
k

. We let [P, g]

P =

{1, 5}, {2}, {3, 1′ }, {4, 4′, 7′}, {2′, 3′}, {5′}, {6′}
(cid:1)

(cid:0)

can be depicted as follows:

(cid:8)

(cid:9)

g7′ g6′ g5′ g4′ g3′ g2′ g1′

g5 g4 g3 g2 g1

We call this a G-partition diagram. Forgetting the labels, we obtain a partition diagram for P .
Note that diﬀerent G-partition diagrams can correspond to the same G-partition since only the
connected components of the graph are relevant, and similarly for partition diagrams. Two G-
partition diagrams are equivalent if their graphs have the same connected components and the vertex
labels of one are obtained from those of the other by, for each connected component, multiplying
the labels in that component on the left by the same element of G.

Example 3.1. For g, h, s, t ∈ G, the following G-partition diagrams of type

g4′

g3′

g2′

g1′

gg4′ hg3′ hg2′ sg1′

∼

g4

g3

g2

g1

tg4

gg3

sg2

gg1

are equivalent:

4
4

(cid:0)

(cid:1)

6

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

l
k

and Q is a partition of type

Suppose P is a partition of type

. We can stack the partition
diagram of Q on top of the partition diagram of P and identify the middle row of vertices to obtain
a diagram stack(Q, P ) with three rows of vertices. We deﬁne Q ⋆ P to be the partition of type
k
deﬁned as follows: vertices are in the same part of Q ⋆ P if and only if the corresponding
m
vertices in the top and bottom row of stack(Q, P ) are in the same connected component. We let
(cid:0)
α(Q, P ) denote the number of connected components containing only vertices in the middle row of
stack(Q, P ).

(cid:1)

(cid:1)

(cid:0)

(cid:1)

(cid:0)

m
l

Example 3.2. If

P =

and

Q =

then α(P, Q) = 2 and

stack(Q, P ) =

, Q ⋆ P =

.

Suppose (P, g) and (Q, h) are G-partitions of types

, respectively. We deﬁne
stack((Q, h), (P, g)) to be the graph stack(Q, P ) with vertices labeled by elements of G as fol-
lows: vertices in the top and bottom rows are labeled as in the top and bottom rows of Q and P ,
respectively, while the i-th vertex in the middle row is labelled by the product gi′h−1
. (As usual,
we label vertices from right to left.) We say that the pair ((Q, h), (P, g)) is compatible if any two
vertices in the middle row of stack((Q, h), (P, g)) that are in the same connected component of Q
have the same label. If ((Q, h), (P, g)) is compatible, we deﬁne h ⋆Q,P g to be the element t ∈ GXm
k
where

and

(cid:1)

(cid:0)

(cid:1)

(cid:0)

i

l
k

m
l

• for 1 ≤ i ≤ m, ti′ = ghi′, where g is the common label of vertices in the middle row that
are in the same connected component as the i-th vertex of the top row of Q (i.e. the vertex
labeled by hi′), where we adopt the convention g = 1G if there are no such vertices;

• for 1 ≤ i ≤ k, ti = gi.

Lemma 3.3. Suppose that ((Q, h), (P, g)) and ((Q, h′), (P, g′)) are compatible, that (Q, h) ∼ (Q, h′),
and that (P, g) ∼ (P, g′). Then (Q ⋆ P, h ⋆Q,P g) ∼ (Q ⋆ P, h′ ⋆Q,P g′).

Proof. By transitivity, it suﬃces to consider the case where h = h′ and the case where g = g′.
Suppose h = h′ and consider a connected component Y of stack(Q, P ). Then Y is a union of some
connected components of Q and some connected components P1, . . . , Pr of P . (The case where Y
is a single connected component of Q or a single connected component of P are straightforward,
so we assume Y is a union of a positive number of connected components of P and a positive
number of connected components of Q.) Since (P, g) ∼ (P, g′), there exist v1, . . . , vr ∈ G such that
a = viga for all a ∈ Pi, i ∈ {1, 2, . . . , r}. Now, the fact that ((Q, h), (P, g)) and ((Q, h), (P, g′))
g′
are compatible and that P1, . . . , Pr are in the same connected component of stack(Q, P ) implies
that v1 = v2 = · · · = vr. Thus, if t = h ⋆Q,P g and t′ = h ⋆Q,P g′, we have t′
a = v1ta for
all vertices a ∈ Y . Since this holds for each connected component Y of stack(Q, P ), we have
(cid:3)
(Q ⋆ P, h ⋆Q,P g) ∼ (Q ⋆ P, h ⋆Q,P g′), as desired. The case where g = g′ is analogous.

We say that the pair ([Q, h], [P, g]) is compatible if there exist representatives (Q, h′) and (P, g′)
of the equivalence classes [Q, h] and [P, g] such that ((Q, h′), (P, g′)) is compatible. Whenever we

GROUP PARTITION CATEGORIES

7

refer to a compatible pair ([Q, h], [P, g]), we assume that ((Q, h), (P, g)) is a compatible pair of
representatives. By Lemma 3.3, we can deﬁne

(3.1)

[Q, h] ⋆ [P, g] := [Q ⋆ P, h ⋆Q,P g]

for a compatible pair ((Q, h), (P, g)), and this deﬁnition is independent of our choice of a compatible
pair of representatives.

Example 3.4. If P and Q are as in Example 3.2, then

stack((Q, h), (P, g)) =

h5′ h4′ h3′ h2′ h1′

g4 g3 g2 g1

where the vertices in the middle row are labeled g1′h−1
7 , g8′h−1
g7′h−1
and only if g1′h−1
is compatible, then

5 , g6′h−1
2 , g3′h−1
6 ,
11 from right to left. The pair ((Q, h), (P, g)) is compatible if
11 . If the pair

9 , and g7′h−1

10 = g11′ h−1

8 = g10′h−1

6 = g9′ h−1

1 = g5′ h−1

7 = g8′h−1

10 , g11′ h−1

9 , g10′h−1

3 , g4′h−1

1 , g2′h−1

4 , g5′h−1

8 , g9′h−1

5 , g6′h−1

(Q ⋆ P, h ⋆Q,P g) =

g7′ h−1

7 h4′ h3′

h2′

g7′ h−1

7 h5′

g1′ h−1

1 h1′

.

g4

g3

g2

g1

Convention 3.5. From now on we will consider equivalent G-partition diagrams to be equal. In
other words, G-partition diagrams represent equivalence classes of G-partitions. We will also use
the terms part (of a partition) and (connected) component (of the corresponding partition diagram)
interchangeably.

Recall that k is a commutative ring, and ﬁx d ∈ k.

Deﬁnition 3.6. The G-partition category Par (G, d) is the strict k-linear monoidal category whose
objects are nonnegative integers and, given two objects k, l in Par (G, d), the morphisms from k to l
are k-linear combinations of equivalence classes of G-partitions of type
. The vertical composition
is given by deﬁning

l
k

[Q, h] ◦ [P, g] = dα(Q,P )[Q ⋆ P, h ⋆Q,P g]
if ([Q, h], [P, g]) is compatible, deﬁning [Q, h] ◦ [P, g] = 0 otherwise, and then extending by linearity.
The tensor product is given on objects by k⊗l := k+l, and on morphisms by horizontal juxtaposition
of G-partition diagrams, extended by linearity. When we do not wish to make the group G explicit,
we call Par (G, d) a group partition category.

(cid:0)

(cid:1)

For example, if the pair ((Q, h), (P, g)) of Example 3.4 is compatible, then

[Q, h] ◦ [P, g] = d2

g7′ h−1

7 h4′ h3′

h2′

g7′ h−1

7 h5′

g1′ h−1

1 h1′

.

g4

g3

g2

g1

It is straightforward to verify that Par (G, d) is, in fact, a category, i.e. the composition of morphisms
is associative.

8

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

The category Par ({1}, d) is the partition category; see [Com20, §2]. In fact, we have a faithful

functor

(3.2)

Par ({1}, d) → Par (G, d)

sending any partition diagram P to the corresponding G-partition diagram where all vertices are
labelled by 1G. (More generally, we have a faithful functor Par (H, d) → Par (G, d) for any subgroup
H of G.) In what follows, we will identify a partition diagram P with its image under this functor.
In other words, we write P and [P ] for (P, 1) and [P, 1], respectively, where 1 is the identity element
of GX l
k . An arbitrary equivalence class of G-partitions [P, g] : k → l can be written in the form

(3.3)

[P, g] =

· · ·

◦ [P ] ◦

· · ·

,

gk

g2 g1

gl′

g2′ g1′

where we adopt the convention that unlabelled vertices implicitly carry the label 1G.

4. Presentation

In this section we give a presentation of group partition categories by generators and relations.
We use the usual string diagram calculus for monoidal categories. We denote the unit object of a
monoidal category by 1 and the identity morphism of an object X by 1X.
Deﬁnition 4.1. Let Par (G) be the strict k-linear monoidal category with one generating object V,
where we denote

and generating morphisms

:= 1V,

: V ⊗ V → V,
: 1 → V,

: V → V ⊗ V,

: V ⊗ V → V ⊗ V,

: V → 1,

g : V → V, g ∈ G,

subject to the following relations:

(4.1)

(4.2)

(4.3)

(4.4)

(4.5)

= ,

= =

,

=

=

,

=

=

,

,

=

=

,

,

=

,

=

,

=

,

g

h = δg,h g ,

g = gh ,
h

1 = ,

g

=

g ,

g = g

g ,

g = .

Remark 4.2. The relations (4.1) are equivalent to the statement that (V,
, ) is a Frobenius
object (see, for example, [Koc04, Prop. 2.3.24]). Relations (4.2) and (4.3) and the third relation in
equips Par (G) with the structure of a symmetric monoidal
(4.5) are precisely the statement that
category (see, for example, [Koc04, §1.3.27, §1.4.35]). Then the ﬁrst relation in (4.4) is the statement
that the Frobenius object V is commutative. When g = h = 1G, the second relation in (4.4) is the
statement that the Frobenius object V is special.

,

,

GROUP PARTITION CATEGORIES

We refer to the morphisms g as tokens, and the open dots in

and

as pins. We call

merge,

a split, and

a crossing. Deﬁne cups and caps by

9

a

Proposition 4.3. The following relations hold in Par (G):

:=

and

:=

.

(4.6)

(4.7)

(4.8)

(4.9)

(4.10)

(4.11)

=

,

=

,

= ,

=

,

=

=

=

g

=

g−1 ,

g

,

=

= =

,

=

,

=

=

,

= =

,

= =

,

g−1

,

g = g

g

= g

g−1 ,

g =

g−1
g

,

g = g

g ,

g

=

,

g

g = ,

g−1 ,

g =

g
g−1

.

Proof. The ﬁrst two relations in (4.6) follow from the ﬁrst two relations in (4.3) by composing on
the top and bottom, respectively, with the crossing and using (4.2). Then the third relation in (4.6)
follows from the ﬁrst relation in (4.1) using the ﬁrst relation in (4.4) and the ﬁrst relation in (4.6).
(The fourth relation in (4.6) will be proved below.)

The relations (4.7) follow from the fourth and ﬁfth equalities in (4.1) after placing pins on the
merges and splits. The ﬁrst equality in (4.8) follows from the ﬁfth equality in (4.1) after placing a
pin on the bottom-left of both diagrams involved in the equality. The remaining equalities in (4.8)
are proved similarly.

Starting with the third relation in (4.3), adding a pin to the top-right strand, a crossing to the
two rightmost strands at the bottom, and using the second relation in (4.3) and the ﬁrst relation
in (4.2), we obtain the relation

=
Adding a strand on the left (i.e. tensoring on the left with 1V), then adding a cup to the two
leftmost bottom strands and using (4.7), yields the ﬁrst equality in (4.9). The second equality in
(4.9) is proved similarly. The remaining relations in (4.9) follow from placing pins at the top of
the morphisms in ﬁrst relation in (4.1) and the third relation in (4.6) and from placing pins at the
bottom of the morphisms in the second two equalities in (4.1).

.

Now the fourth relation in (4.6) follows from rotating the ﬁrst relation in (4.4) using the cups

and caps, together with (4.7) to (4.9).

To prove the ﬁrst relation in (4.10), we compute

g

g

=

= g

g−1

g

=

g

g−1

=

g−1

=

g−1

.

Then we prove the second relation in (4.10) as follows:

g

(4.7)
=

g =

g−1

(4.7)
=

g−1

.

The third relation in (4.10) is obtained from the third relation in (4.5) by composing on the top and
bottom with a crossing and then using (4.2). The fourth relation in (4.10) is obtained by starting
with the third equality in (4.9), attaching a token labelled g to the bottom of the strands, then
using the second relation in (4.10) and the ﬁfth relation in (4.5).

10

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

Finally, the relations in (4.11) are obtained from the fourth relation in (4.5) by attaching the
(cid:3)

appropriate cups and caps, then using (4.8) and (4.10).

The relation (4.7) implies that the object V is self-dual. It follows from Proposition 4.3 that the
cups and caps endow Par (G) with the structure of a strict pivotal category: we have an isomorphism
of strict monoidal categories

∗ : Par (G) → (Par (G)op)rev ,
where op denotes the opposite category and rev denotes the reversed category (switching the order
of the tensor product). This isomorphism is the identity on objects and, for a general morphism f
represented by a single string diagram, the morphism f ∗ is given by rotating the diagram through
180◦.

Moreover, we have that morphisms are invariant under isotopy, except that we must use (4.10)
when we slide tokens over cups and caps. In addition, it follows from the ﬁrst two relations in (4.3)
and (4.6) that

(4.12)

= .

In other words, the morphism is strictly central.

Theorem 4.4. Let d ∈ k. As a k-linear monoidal category, Par (G, d) is isomorphic to the quotient
of Par (G) by the relation

(4.13)

= d.

Proof. Let Par ′(G, d) denote the quotient of Par (G) by the additional relation (4.13). We deﬁne a
functor F : Par ′(G, d) → Par (G, d) as follows: On objects, deﬁne F (V⊗k) = k, k ∈ N. We deﬁne F
on the generating morphisms by

7→ ,

7→ ,

7→ ,

7→ ,

7→ ,

g

7→

=

,

g

g−1

where, by convention, unlabelled vertices in G-partition diagrams carry the label 1G. Note that the
image of
(i.e. the vertex there is in the top row),
. It is straightforward to verify
while the image of
that the relations (4.1) to (4.5) and (4.13) are preserved by F , so that F is well deﬁned.

is the unique G-partition diagram of type

is the unique G-partition diagram of type

1
0

0
1

(cid:1)

(cid:0)

Since F is clearly bijective on objects, it remains to show that it is full and faithful. Since
Theorem 4.4 is known to hold in the case where G is the trivial group (see [Com20, Th. 2.1], or
[NLS, Prop. 2.1] for a diagrammatic treatment), it follows from the existence of the functor (3.2)
that any partition diagram [P ] = [P, 1] is in the image of F . Thus, by (3.3) so is an arbitrary
equivalence class [P, g] of G-partitions. Hence F is full.

(cid:0)

(cid:1)

It remains to prove that F is faithful. To do this, it suﬃces to show that
dim HomPar ′(G,d)(V⊗k, V⊗l) ≤ dim HomPar (G,d)(k, l)

for all k, l ∈ N.

We do this by showing that every morphism of Par ′(G, d) obtained from the generators by compo-
sition and tensor product can be reduced to a scalar multiple of a standard form, with the standard
forms being in natural bijection with the number of G-partition diagrams.

We ﬁrst introduce star diagrams Sb

a ∈ HomPar ′(G,d)(V⊗a, V⊗b) for (a, b) ∈ N2 \ {(0, 0)} as follows.

Deﬁne

1 := , S1
S0

0 := , S1

1 := .

Then deﬁne general star diagrams recursively by

GROUP PARTITION CATEGORIES

11

For example, we have

Sb+1
a

:=

1V⊗(b−1) ⊗

◦ Sb
a

for b ≥ 1,

(cid:16)
a+1 := Sb
Sb

a ◦

(cid:17)
1V⊗(a−1) ⊗

for a ≥ 1.

(cid:16)

(cid:17)

S0

2 =

=

, S3

0 =

, S4

3 =

.

Every permutation π ∈ Sk gives rise to a partition of type
with parts {i, π(i)′}, 1 ≤ i ≤ k. Fixing
a reduced decomposition for π induces a decomposition of the corresponding partition diagram as
(cid:0)
and identity morphisms. We ﬁx such a
a composition of tensor products of the generator
decomposition for each permutation, writing Dπ for the corresponding element of Par ′(G, d). For
example, if we choose the reduced decomposition s1s2s1 for the permutation (1 3) ∈ S3, we have

(cid:1)

k
k

D(1 3) =

.

Now, ﬁx a representative (P, g) of each equivalence class [P, g] of G-partitions. Then, for each

such representative, ﬁx a standard decomposition

(4.14)

[P, g] =

· · ·

◦ F (Dπ) ◦ F (S) ◦ F (Dσ) ◦

· · ·

,

gk

g2 g1

gl′

g2′ g1′

where π ∈ Sl, σ ∈ Sk, and S is a tensor product of star diagrams. The existence of such a
standard decomposition follows from (3.3), together with the existence of a decomposition of the
form [P ] = F (Dπ) ◦ F (S) ◦ F (Dσ) for any partition diagram P . (Precisely, S is a tensor product
of star diagrams, one for each connected component in P , and then π and σ are permutations such
that F (Dπ) and F (Dσ) connect the top and bottom vertices of P to the corresponding legs of S.)
Then deﬁne

(4.15)

yP,g :=

g−1
l′

· · · g−1
2′

g−1
1′

◦ Dπ ◦ S ◦ Dσ ◦

gk · · · g2′

g1′

.

Hence F (yP,g) = [P, g]

(cid:16)

(cid:17)

(cid:16)

(cid:17)

To complete the proof that F is faithful, it remains to show that any morphism in Par ′(G, d)
that is obtained from the generators by tensor product and composition is equal to a scalar multiple
of yP,g for some chosen representative (P, g). As noted above, Theorem 4.4 holds for the partition
category, which is the case where G = {1} is the trivial group. Now, if we ignore tokens, the relations
(4.1) to (4.4) and (4.13) correspond to the relations in the G = {1} case, except for the fact that
the second relation in (4.4) gives zero when g 6= h. It follows that every morphism in Par ′(G, d)
obtained from the generators by tensor product and composition is equal to a (potentially zero)
scalar multiple of a morphism obtained from some Dπ ◦ S ◦ Dσ by adding tokens (since, ignoring
tokens, this can be done in the partition category). Then, since the string diagram for Dπ ◦ S ◦ Dσ
is a tree (i.e. contains no cycles), one can use relations (4.5), (4.10), and (4.11) to move all tokens
to the ends of strings and combine them into a single token at each endpoint. This yields a diagram
of the form (4.15), except that the tokens may not correspond to our chosen representative of the
equivalence class of G-partitions. However, we then use the relations (4.5), (4.10), and (4.11) to
(cid:3)
adjust the tokens at the endpoints so that we obtain the chosen representative.

12

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

In the context of Remark 4.2, (4.13) is the statement that the Frobenius object V has dimension
d. From now on, we will identify Par (G, d) with the quotient of Par (G) by the relation (4.13) via
the isomorphism of Theorem 4.4. In particular, we will identify the object k of Par (G, d) with the
object V⊗k of Par (G), for k ∈ N.
Remark 4.5. Suppose we deﬁne Par (G, d) as in Deﬁnition 3.6, but over the ring k[d], so that d
is an indeterminate. It then follows from Theorem 4.4 that Par (G, d) is isomorphic to Par (G) as a
k-linear monoidal category. Under this isomorphism, d11 corresponds to .

For k ∈ N, we deﬁne the G-partition algebra

(4.16)

Pk(G, d) := EndPar (G,d)(V⊗k).
When we do not wish to make G explicit, we call these group partition algebras. These algebras
appeared in [Blo03], where they are called G-colored partition algebras. A diagrammatic description
of these algebras, diﬀerent from that of the current paper, is given [Blo03, §6.2].

5. Categorical action

In this section we assume that the group G is ﬁnite of order |G|. We deﬁne a categorical action of
the G-partition category on the category of modules for the wreath product groups Gn = Gn ⋊ Sn.
We ﬁrst describe this action by giving the action of the generators, and then describe the action of
an arbitrary G-partition diagram. Recall that An = kGn is the group algebra of Gn, and so we can
naturally identify An-modules and representations of Gn.
Theorem 5.1. For n ∈ N, we have a strong monoidal k-linear functor Φn : Par (G, n|G|) → An-mod
given as follows. On objects, Φn is determined by Φn(V) = V . On generating morphisms, Φn is
given by

Φn(

Φn(

Φn(

) : V ⊗ V → V,

) : V → V ⊗ V,

) : V ⊗ V → V,

Φn( ) : 1n → V,
Φn( ) : V → 1n,

Φn( g ) : V → V,

gei ⊗ hej 7→ δg,hδi,jgei,

gei 7→ gei ⊗ gei,

v ⊗ w 7→ w ⊗ v,

1 7→

g∈G

n
i=1 gei,

gei 7→ 1,
P
hei 7→ hg−1ei,

P

for g, h ∈ G, 1 ≤ i, j ≤ n, v, w ∈ V .

Proof. We must show that the action preserves the relations (4.1) to (4.5).

Relations (4.1): To prove the ﬁrst three equalities in (4.1), we compute

n

Φn

◦ Φn

⊗

(gei) =

Φn

(gei ⊗ hej) =

(cid:16)

(cid:17)

(cid:16)

Φn

⊗

◦ Φn

Xh∈G

(cid:17)
(gei) = Φn

j=1
X
⊗

(cid:16)

(cid:17)

Xh∈G

(gei ⊗ gei) = gei = Φn

n

j=1
X
⊗

δg,hδi,jgei = gei,

◦ Φn

(gei).

(cid:16)
To prove the third relation, we compute

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(cid:17)

(cid:16)

(cid:17)

(cid:16)

(cid:17)

Φn(

) ◦ Φn(

)(gei ⊗ hej) = δg,hδi,jΦn(

)(gei) = δg,hδi,j(gei ⊗ gei),

Φn

Φn

⊗

◦ Φn

⊗

(gei ⊗ hej ) = Φn

⊗

(gei ⊗ hej ⊗ hej) = δg,hδi,j(gei ⊗ gei),

⊗

(cid:16)

(cid:16)

(cid:17)

(cid:17)

◦ Φn

(cid:16)

(cid:16)

⊗

(cid:17)

(cid:17)

(gei ⊗ hej ) = Φn

⊗

(cid:16)

(cid:16)

(cid:17)

(cid:17)

(gei ⊗ gei ⊗ hej) = δg,hδi,j(gei ⊗ gei),

GROUP PARTITION CATEGORIES

13

concluding that the three maps are identical.

Relations (4.2): The relations (4.2) are straightforward.

Relations (4.3): To prove the ﬁrst relation in (4.3), we compute

Φn

◦ Φn

⊗

(gei) =

Φn

(gei ⊗ hej ) =

(hej ⊗ gei),

n

n

and

(cid:16)

(cid:17)

(cid:16)

(cid:17)

Xh∈G

j=1
X

(cid:16)

(cid:17)

n

Xh∈G

j=1
X

Φn

⊗

(gei) =

(hej ⊗ gei).

Xh∈G
Similarly, to prove the second relation, we calculate

(cid:17)

(cid:16)

j=1
X

Φn

⊗

◦ Φn

(gei ⊗ hej ) = Φn

⊗

(hej ⊗ gei) = hej = Φn

⊗

(gei ⊗ hej).

The proof of the last two equalities in (4.3) are similar; we only check the last one. We have

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(cid:16)

(cid:17)

Φn

⊗

◦Φn

⊗

◦Φn

⊗

(gei ⊗ hej) = Φn

⊗

◦Φn

⊗

(gei ⊗ hej ⊗ hej )

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(cid:16)

(cid:17)

= Φn

⊗

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(hej ⊗ gei ⊗ hej ) = hej ⊗ hej ⊗ gei

and

(cid:16)

Φn

⊗

◦ Φn

(gei ⊗ hej) = Φn

⊗

(cid:17)
(hej ⊗ gei) = hej ⊗ hej ⊗ gei.

(cid:17)
Relations (4.4): To prove the ﬁrst relation in (4.4), we compute

(cid:17)

(cid:17)

(cid:16)

(cid:16)

(cid:16)

Φn

◦ Φn

(gei ⊗ hej) = Φn

(hej ⊗ gei) = δg,hδi,jgei = Φn

(gei ⊗ hej ).

For the second relation, we have

(cid:16)

(cid:17)

(cid:17)

(cid:16)

(cid:16)

(cid:17)

(cid:16)

(cid:17)

Φn

◦ Φn

g ⊗ h

◦ Φn

(kei) = Φn

◦ Φn

g ⊗ h

(kei ⊗ kei)

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(cid:16)
= Φn

(cid:17)

(cid:16)

(cid:17)

(cid:16)

(kg−1ei ⊗ kh−1ei) = δg,h(kg−1ei) = δg,hΦn( g )(kei).

(cid:17)

Relations (4.5): The relations (4.5) are straightforward to verify.

(cid:16)

(cid:17)

(cid:3)

If (P, g) is a G-partition of type

, then Φn([P, g]) ∈ HomGn(V k, V l) is uniquely described by

l
k

its matrix coeﬃcients:
(5.1) Φn([P, g])(hk eik ⊗ · · · ⊗ h1ei1) =

(cid:0)

(cid:1)

M (P, g)

h1′ ,...,hl′ ,i1′ ,...,il′
h1,...,hk,i1,...,ik

hl′eil′ ⊗ · · · ⊗ h1′ei1′ .

Xh1′ ,...,hl′ ∈G
1≤i1′ ,...,il′ ≤n

The matrix M (P, g) depends only on the equivalence class [P, g] of (P, g).

Proposition 5.2. Suppose (P, g) is a G-partition of type
ia = ib and hag−1
0.

for all a, b ∈ X l

a = hbg−1

b

k in the same part of P . Otherwise, M (P, g)
(cid:1)

(cid:0)

l
k

. Then M (P, g)

h1′ ,...,hl′ ,i1′ ,...,il′
h1,...,hk,i1,...,ik

= 1 if
h1′ ,...,hl′ ,i1′ ,...,il′
h1,...,hk,i1,...,ik

=

Proof. This follows from a straightforward computation using the deﬁnition of Φn in Theorem 5.1
and the isomorphism described in Theorem 4.4, writing each component of P as a composition of
(cid:3)
tokens, merges, splits, and crossings as in (4.14).

Recall the basis Bk for V ⊗k from (2.4). Given a G-partition (P, g) of type

the set of all hkeik ⊗ · · · ⊗ h1ei1 ∈ Bk such that

0
k

, let OP,g denote

(cid:0)

(cid:1)

14

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

• ia = ib if and only if a, b are in the same part of the partition P , and
• hag−1

for all a, b in the same part of the partition P .

a = hbg−1

b

Then we have OP,g = OP,h if and only if (P, g) ∼ (P, h), and so we can deﬁne O[P,g] := OP,g. The
Gn-orbits of Bk are the O[P,g] with [P, g] : V⊗k → 1 having at most n parts (i.e. P is a partition of
{1, . . . , k} having at most n parts).

For [P, g] : V⊗k → 1, let f[P,g] : V ⊗k → k be the k-linear map determined on the basis Bk by

f[P,g](hkeik ⊗ · · · ⊗ h1ei1) =

1 if hkeik ⊗ · · · ⊗ h1ei1 ∈ O[P,g],
0 otherwise.

(

The following lemma is now immediate.
Lemma 5.3. The set of all f[P,g] with [P, g] : V⊗k → 1 having at most n parts is a basis for
HomGn(V ⊗k, 1n).

For partitions P, Q of X l

k, we write Q ≥ P when Q is coarser than P . Thus, Q ≥ P if and only

if every part of P is a subset of some part of Q. It follows from Proposition 5.2 that

(5.2)

Φn([P, g]) =

f[Q,g]

for all [P, g] : V⊗k → 1.

Thus, if we deﬁne a new basis {x[P,g] : [P, g] : V⊗k → V⊗l} of HomPar (G,n|G|)(V⊗k, V⊗l) recursively
by

XQ≥P

(5.3)

x[P,g] = [P, g] −

x[Q,g],

XQ>P
then a straightforward argument by induction shows that

Φn(x[P,g]) = f[P,g]

(5.4)
In particular, Φn(x[P,g]) = 0 if [P, g] : V⊗k → 1 has more than n parts.
Theorem 5.4.

(a) The functor Φn is full.

for any G-partition (P, g) of type

0
k

.

(cid:0)

(cid:1)

(b) The kernel of the induced map

HomPar (G,n|G|)(V⊗k, V⊗l) → HomGn(V ⊗k, V ⊗l)

is the span of all x[P,g] with [P, g] : V⊗k → V⊗l having more than n parts. In particular, this
map is an isomorphism if and only if k + l ≤ n.

Proof. We have a commutative diagram

HomPar (G,n|G|)(V⊗k, V⊗l)

HomPar (G,n|G|)(V⊗(k+l), 1)

Φn

Φn

HomGn(V ⊗k, V ⊗l)

HomGn(V ⊗(k+l), 1n)

where the horizontal maps are adjunction isomorphisms arising from the fact that V is a self-dual
object in Par (G, n|G|) and that V is a self-dual object in the category of An-modules. (We refer
the reader to the proof of [Com20, Th. 2.3] for more details of these adjunctions in the special
case G = {1}. The argument is the same in the case of general G.) It follows from Lemma 5.3
and (5.4) that the right-hand vertical map is surjective and its kernel is the span of all x[P,g] with
[P, g] : V⊗(k+l) → 1 having more than n parts. Since the adjunction isomorphisms preserve the
number of parts of G-partitions, as well as the partial order on G-partitions, the result follows. (cid:3)

GROUP PARTITION CATEGORIES

15

When G = {1} is the trivial group, Theorem 5.4 reduces to [Com20, Th. 2.3].

In general,
Theorem 5.4 is a categorical generalization of the double centralizer property [Blo03, Th. 6.6].
More precisely, recall the G-partition algebras from (4.16). The functor Φn induces an algebra
homomorphism

Pk(G, n|G|) → EndGn(V ⊗k).
Theorem 5.4 implies that this homomorphism is surjective, and is an isomorphism when n ≥ 2k.
When the characteristic of k does not divide n!|G| = |Gn|, so that An is semisimple, the Double
Centralizer Theorem implies that An generates EndPk(G,n|G|)(V ⊗k). Hence Gn and Pk(G, n|G|)
generate the centralizers of each other in Endk(V ⊗k).

6. The group Heisenberg category

In this section we recall a special case of the Frobenius Heisenberg category. We are interested in
the special case of central charge −1, where this category was ﬁrst deﬁned in [RS17]. Furthermore,
we will specialize to the case where the Frobenius algebra is the group algebra of a ﬁnite group G.
We follow the presentation in [Sav19], referring the reader to that paper for proofs of the statements
made here.

Deﬁnition 6.1. The group Heisenberg category Heis(G) associated to the ﬁnite group G is the
strict k-linear monoidal category generated by two objects ↑, ↓, and morphisms

: ↑↑ → ↑↑,

g : ↑ → ↑ ,

g ∈ G,

: 1 → ↓↑,

: ↑↓ → 1,

: 1 → ↑↓,

: ↓↑ → 1,

subject to the relations

(6.1)

(6.2)

(6.3)

=

=

,

,

=

,

g
h = gh ,

1 = ,

g

=

g ,

= ,

= ,

=

−

g

g−1

,

= 0,

g = δg,111.

Xg∈G
Here the left and right crossings are deﬁned by

:=

,

:=

.

The objects ↑ and ↓ are both left and right dual to each other. Furthermore, the cups and caps
endow Heis(G) with the structure of a strict pivotal category, meaning that morphisms are invariant
under isotopy. We deﬁne downwards crossings and downward tokens by

(6.4)

:=

=

,

g

:= g

= g

.

It follows that,

(6.5)

=

for all possible orientations of the strands,

and we that tokens slide over cups and caps:

(6.6)

g

=

g ,

g

=

g ,

g

=

g ,

g = g

.

16

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

(One should compare this to the ﬁrst two relations in (4.10).) Because of this, we will sometimes
place tokens at the critical point of cups and caps, since there is no ambiguity. In addition it follows
from (6.1), (6.2), and (6.6) that

(6.7)

g

=

g ,

g = g

for all possible orientations of the strands.

We will use (6.6) and (6.7) frequently without mention. Note how tokens multiply on downward
strands (using (6.1), (6.4), and (6.6)):

(6.8)

g
h = hg .

7. The embedding functor

In this section we deﬁne an explicit embedding of the group partition category into the group

Heisenberg category. We assume throughout this section that G is a ﬁnite group.
Theorem 7.1. There is a faithful strict k-linear monoidal functor Ψ : Par (G) → Heis(G) deﬁned
on objects by V 7→ ↑ ⊗ ↓ and on generating morphisms by

7→

,

7→

,

7→

+

g−1

7→

,

7→

,

g

7→ g

g−1

,

g ∈ G.

Xg∈G

g

g

g−1

,

The proof of Theorem 7.1 will occupy the remainder of this section. We break the proof into two

parts, ﬁrst showing that Ψ is well deﬁned, and then that it is faithful.

Proposition 7.2. The functor Ψ is well deﬁned.

Proof. It suﬃces to show that the images of the generating morphisms of the partition category
Par (G) satisfy relations (4.1) to (4.5).
Relations (4.1): These relations are easy to check, using isotopy invariance in Heis(G).

Relations (4.2): Using the third relation in (6.3), which says that left curls are equal to zero, we
have

Ψ

◦ Ψ

=

+

h−1g−1

(cid:16)

(cid:17)

(cid:16)

(cid:17)

Xg,h∈G

(6.3)
=

h

hg

g

+

Xg∈G

g−1h−1

g

g−1

(6.3)
=

proving the ﬁrst relation in (4.2). To prove the second relation in (4.2), we compute

(7.1) Ψ

⊗

◦ Ψ

⊗

=

(cid:16)

(cid:17)

(cid:16)

(cid:17)

+

g−1

Xg∈G

+

g

Xg∈G

g

g−1

g

g

g−1 +

g−1

Xg,h∈G

g−1

h−1g

g

= Ψ

,

(cid:16) (cid:17)

h−1

.

h

g−1h

Therefore, using the fact that left curls are zero, we compute

GROUP PARTITION CATEGORIES

17

Ψ

⊗

◦ Ψ

⊗

◦ Ψ

⊗

(cid:17)

(cid:16)

(cid:16)
(6.3)
=
(6.7)

(cid:17)

+

(cid:16)

g−1

g∈G
X

(cid:17)

g

g

g

g

g

g

g−1

+

Xg∈G

+

g−1

g∈G
X

g−1

+

Xg∈G

g

g

(6.1)
=
(6.3)

Similarly,

g

g−1

g−1

+

g

g∈G g−1
X

h−1g

h

g−1

g−1ht

(ht)−1

g−1 +

Xg,h,t∈G

t

gt−1

g−1

g

g−1 +

g

g∈G g−1
X

g−1 +

h

g−1

h−1g

h−1g

g−1

.

Xg,h∈G

h

Ψ

⊗

◦ Ψn

⊗

◦ Ψ

⊗

(cid:16)

=

(cid:17)

(cid:16)

(cid:17)

(cid:16)
g

(cid:17)

+

g−1

g−1 +

g−1

g

g

Xg∈G g−1

g−1 +

g

h

g−1

h−1g

h−1g

g−1

.

Xg,h∈G

h

Xg∈G

g

g

g−1

+

Xg∈G

We then use (6.5) to see that the expressions are equal.

Relations (4.3): We will check the ﬁrst and the fourth relations, since the proofs of the second and
third are analogous. For the ﬁrst relation we compute:

Ψ

◦ Ψ

⊗

(6.1)
=

g

+

g−1

(6.1)
=
(6.3)

= Ψ

⊗

.

(cid:16)
For the fourth relation, we use (7.1) and the fact that left curls are zero to compute

(cid:17)

(cid:16)

(cid:17)

(cid:16)

g∈G
X

Ψ

⊗

◦ Ψ

⊗

◦ Ψn

⊗

=

+

g−1

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(6.1)
=
(6.3)

+

g−1

Xg∈G

Xg,h∈G

g

g

g−1 = Ψ

◦ Ψ

.

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(cid:17)

h−1

h

h−1g

g−1h

g

18

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

Relations (4.4): To check the ﬁrst relation in (4.4), we use the fact that left curls are zero to see
that

Φn

◦ Φn

=

g

g−1

(cid:17)
For the second relation in (4.4), we compute

(cid:17)

(cid:16)

(cid:16)

Xg∈G

g−1

(6.3)
=

g

= Φn

.

(cid:16)

(cid:17)

Φn

◦ Φn

g

h

◦ Φn

(cid:16)

(cid:17)

(cid:16)

(cid:17)

(cid:16)

(cid:17)

g−1h

(6.1)
= g

h−1

(6.3)
= δg,h g

g−1 = δg,hΦn

g

.

(cid:16)

(cid:17)

Relations (4.5): For the third relation in (4.5), we compute

Ψ

◦ Ψ

g

(cid:16)

(cid:17)

(cid:16)

(cid:17)

=

g

h

h−1g

g−1h

h−1

g−1

+

Xh∈G

=

g

g−1

+

t−1

Xt∈G

gt

t

t−1g−1

= Ψ

g

◦ Ψ

,

(cid:16)

(cid:17)

(cid:16)

(cid:17)

where we let t = g−1h. The other relations in (4.5) are straightforward to verify.

(cid:3)

We now wish to show that Ψ is faithful. Our approach is inspired by that of [NLS, App. A],

which deals with the case where G is the trivial group.

In what follows, we will identify a permutation π ∈ Sk with the partition of type

with parts
{i, π(i)′}, 1 ≤ i ≤ k. Recall that, for 1 ≤ i < j ≤ k, the pair (i, j) is an inversion in π ∈ Sk if
l
. We say that a permutation P ∈ Sl is a left
π(i) > π(j). Suppose Q is a partition of type
k
shuﬄe for Q if there is no inversion (i, j) in P such that vertices i′ and j′ lie in the same connected
(cid:0)
component of Q. Intuitively, P is a left shuﬄe for Q if it does not change the relative order of
vertices in each component. Similarly, we say that a permutation P ∈ Sk is a right shuﬄe for Q if
there is no inversion (i, j) in P −1 such that vertices i and j lie in the same component of Q. For
example, if

(cid:0)

(cid:1)

(cid:1)

k
k

P =

and Q =

,

then P is a left shuﬄe for Q but not a right shuﬄe for Q.

We say a partition diagram is tensor-planar if it is a tensor product (horizontal juxtaposition)
of partition diagrams consisting of a single connected component. Note that every tensor-planar
partition diagram is planar (i.e. can be represented as a graph without edge crossings inside of the
rectangle formed by its vertices) but the converse is false.

Every equivalence class [P, g] of G-partitions can be factored as a product

(7.2)

[P, g] =

· · ·

◦ [P1] ◦ [P2] ◦ [P3] ◦

· · ·

.

gk

g2 g1

gl′

g2′ g1′

where P2 is tensor-planar, P1 is a left shuﬄe for P2, and P3 is a right shuﬄe for P2. (See (4.14).)
The number of connected components in P is equal to the number of connected components in P2.
For example, the G-partition diagram

g5′ g4′ g3′ g2′ g1′

g4 g3 g2 g1

GROUP PARTITION CATEGORIES

19

has four connected components and decomposition

g5′ g4′ g3′ g2′ g1′

g5′ g4′ g3′ g2′ g1′

=

◦ [P1] ◦ [P2] ◦ [P3] ◦

,

g4 g3 g2 g1

g4 g3 g2 g1

where

P1 =

, P2 =

= ⊗

⊗

⊗

, P3 =

.

For n, k, l ∈ N, let Hom≤n

Par (G)(V⊗k, V⊗l) denote the subspace of HomPar (G)(V⊗k, V⊗l) spanned by
G-partition diagrams with at most n connected components. Composition respects the correspond-
ing ﬁltration on morphism spaces since the composite of a partition with n connected components
and a partition with m connected components has at most n + m connected components.

Recall the bases of the morphism spaces of Heis(G) given in [BSW, Thm. 7.2]. (The category
in the notation of
For any such basis element f in
, deﬁne the block number of f to be number of distinct closed (possi-

[BSW].)

is Heis −1(kG)
Heis(G)
(↑↓)⊗k, (↑↓)⊗l
HomHeis(G)
bly intersecting) loops in the diagram

(cid:0)

(cid:1)

⊗l ◦ f ◦

⊗k.

For n ∈ N, let Hom≤n
spanned
by basis elements with block number at most n. Composition respects the resulting ﬁltration on
morphism spaces.

denote the subspace of HomHeis(G)

(↑↓)⊗k, (↑↓)⊗l

(↑↓)⊗k, (↑↓)⊗l

Heis(G)

(cid:0)

(cid:1)

(cid:1)

(cid:0)

The image under Ψ of tensor-planar partition diagrams (writing the image in terms of the
aforementioned bases of the morphism spaces of Heis(G)) is particularly simple to describe. Since
each tensor-planar partition diagram is a tensor product of single connected components, consider
the case of a single connected component. Then, for example, we have

Ψ (

) =

and Ψ

=

.

The general case is analogous. (In fact, the images of all planar partition diagrams are similarly easy
to describe.) In particular, if P is a tensor-planar partition diagram with n connected components,
then Ψ(P ) is a planar diagram with block number n.

(cid:16)

(cid:17)

For i = 1, . . . , k − 1, consider the morphism

(7.3) χi := Ψ

1⊗(k−i−1)
V

⊗

(cid:16)

(cid:16)

=

⊗ 1⊗(i−1)
V

(cid:17)

(cid:17)

−

· · ·

· · ·

∈ EndHeis(G)

(↑↓)⊗k

.

For a permutation partition diagram P : k → k, let T (P ) be the morphism in Heis(G) deﬁned as
follows: Write D = si1 ◦ si2 ◦ · · · ◦ sir as a reduced word in simple transpositions and let

(cid:0)

(cid:1)

T (P ) = χi1 ◦ χi2 ◦ · · · ◦ χir .
It follows from the braid relations (6.5) that T (P ) is independent of the choice of reduced word for
P .

Lemma 7.3. Suppose (P, g) is a G-partition diagram with decomposition (7.2). Then

gl′

g2′ g1′

Ψ([P, g]) −

· · ·

◦ [T (P1)] ◦ [P2] ◦ [T (P3)] ◦

· · ·

gk

g2 g1

∈ Hom≤n−1
Heis(G)

(↑↓)⊗k, (↑↓)⊗l

.

(cid:0)

(cid:1)

20

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

Proof. The case where g = 1 is [NLS, Prop. A.1]. Since composition with G-partition diagrams of
the form

gl′

g2′ g1′

· · ·

and

· · ·

gk

g2 g1

does not change the block number, the general case follows.

(cid:3)

Proof of Theorem 7.1. Since Ψ is well deﬁned by Proposition 7.2, it remains to show it is faithful.
As in Remark 4.5, we view Par (G) as Par (G, d) over the ring k[d]. Note that the image of Ψ is
contained in the full monoidal subcategory Heis ↑↓(G) of Heis(G) generated by the object ↑ ⊗ ↓. It
follows from the deﬁning relations of Heis(G) that

=

.

In other words, the clockwise bubble is strictly central in Heis ↑↓(G). Let Heis ↑↓(G, d) be the quotient
of Heis ↑↓(G), deﬁned over k[d], by the additional relation

= d11.

Then, as in Remark 4.5, Heis ↑↓(G), deﬁned over k, is isomorphic as a k-linear category to Heis ↑↓(G, d).
In other words, we can view the clockwise bubble of Heis ↑↓(G) and the morphism of Par (G), both
of which are strictly central, as elements of the ground ring.

Now, it is clear that, in the setting of Lemma 7.3,

gl′

g2′ g1′

(7.4)

· · ·

◦ [T (P1)] ◦ [P2] ◦ [T (P3)] ◦

· · ·

gk

g2 g1

is uniquely determined by [P, g]. Indeed, P is the partition diagram obtained from T (P1) ◦ Ψ(P2) ◦
T (P3) by replacing each pair ↑↓ by a vertex and each strand by an edge. Furthermore, the diagrams
of the form (7.4) are linearly independent by [BSW, Thm. 7.2]. The result then follows by a standard
(cid:3)
triangularity argument.

8. Compatibility of categorical actions

We continue to assume that G is a ﬁnite group. The group Heisenberg category acts naturally
on the direct sum of the categories An-mod, n ∈ N. In this section, we recall this action and show
that it is compatible with the embedding of the group partition category into the group Heisenberg
category and the action of the group partition category described in Theorem 5.1.

For 0 ≤ m, k ≤ n, let k(n)m denote An, considered as an (Ak, Am)-bimodule. We will omit the
subscript k or m when k = n or m = n, respectively. We denote tensor product of such bimodules
by juxtaposition. For instance (n)n−1(n) denotes An ⊗n−1 An, considered as an (An, An)-bimodule,
where we write ⊗m for the tensor product over Am. As explained in [RS17, §7], we have a strong
k-linear monoidal functor

Θ : Heis(G) →

(An, Am)-bimod

!

Ym∈N  

Mn∈N

= ((n)n−2 → (n)n−2, x 7→ xsn−1)n≥2 ,
= ((n − 1) → n−1(n)n−1, x 7→ x)n≥1 ,
= ((n)n−1(n) → (n), x ⊗ y 7→ xy)n≥1 ,

given by

Θ

Θ

Θ

(cid:0)

(cid:0)

(cid:0)

(cid:1)

(cid:1)

(cid:1)

GROUP PARTITION CATEGORIES

21

=

(n) → (n)n−1(n), x 7→ x

1≤i≤n, h∈G h(i)πi ⊗ π−1

i

h−1

(i)

,

n≥1

(cid:16)

=

n−1(n)n−1 → (n − 1), gπ 7→

P

(gn−1, gn−2, . . . , g1)π if π ∈ Sn−1, gn = 1G
0
(

otherwise

(cid:0)

(cid:17)

(cid:1)

,

!n≥1

=

(n)n−1 → (n)n−1, x 7→ x

(n)

g−1

(cid:16)

(cid:1)
= (n−1(n)n−1 → (n − 1)n−2(n − 1),

(cid:0)

,

n≥1

(cid:17)

gπ 7→

(gn−1, . . . , g1)σ1 ⊗ g(n−1)
0
(

n

σ2

if π = σ1sn−1σ2 for σ1, σ2 ∈ Sn−1,
if π ∈ Sn−1

,

!n≥2

= ((n − 1)n−2(n − 1) → n−1(n)n−1, x ⊗ y 7→ xsn−1y)n≥2 ,
= (n−2(n) → n−2(n), x 7→ sn−1x)n≥2 ,

Θ

Θ

(cid:0)

(cid:0)

Θ

g

(cid:0)
Θ

(cid:0)

Θ

Θ

(cid:0)

Θ

(cid:0)

g

(cid:1)

(cid:1)

(cid:1)

(cid:1)

(cid:1)

(cid:1)

=

n−1(n) → n−1(n), x 7→

g−1

(n)

x

.

n≥1

(cid:17)

(cid:16)

(cid:0)

(cid:1)

As noted in the proof of Theorem 7.1, the image of Ψ lies in the full monoidal subcategory

(cid:0)
Heis ↑↓(G) of Heis(G) generated by ↑ ⊗ ↓. For n ∈ N, consider the composition

(cid:1)

Ωn : Heis ↑↓(G) Θ−→

(Am, Am)-bimod

−⊗An 1n
−−−−−→

Am-mod,

where we declare M ⊗An 1n = 0 for M ∈ (Am, Am)-bimod with m 6= n. The functor Ωn is k-linear,
but no longer monoidal.

Mm∈N

Mm∈N

Theorem 8.1. Consider the functors:

(8.1)

Par (G)

Ψ

Φn

Heis ↑↓(G)

.

Ωn

An-mod

The isomorphisms βk, k ∈ N, deﬁned in Corollary 2.3, give a natural isomorphism of functors
Ωn ◦ Ψ ∼= Φn.

Proof. Since the βk are isomorphisms of An-modules it suﬃces to show that they determine a natural
transformation between the given functors. Therefore, following the argument used in the proof of
[NLS, Theorem 5.1] we need to check elements of the form

1V⊗k ⊗ x ⊗ 1V⊗j ,

k, j ∈ N,

x ∈

h ,

,

,

,

,

: h ∈ G

.

Tokens: For h ∈ G,

n

o

β−1
k ◦

Ωn ◦ Ψ

1V⊗(k−j−1) ⊗ h ⊗ 1V⊗(j−1)

◦ βk : V ⊗k → V ⊗k

(cid:16)

(cid:16)

(cid:17)(cid:17)

is the An-module map given by
gkeik ⊗ · · · ⊗ g1ei1 7→ g(ik)

k πik ⊗ π−1
ik
(ik)
(cid:0)

g−1
k

7→ g(ik)

k πik ⊗ π−1
ik

(ik)

g(ik−1)
k−1 πik−1 ⊗ · · · ⊗ π−1
i2

g−1
k
g(ik−1)
(cid:1)
k−1 πik−1 ⊗ · · · ⊗ π−1
ij+1
(ij )

g−1
j+1

ij−1
g
1

πij−1 ⊗ · · · ⊗ π−1
i2

(cid:17)

(cid:0)

(cid:1)

g−1
2
(ij+1)
(cid:1)
(cid:0)

(i2)

g(i1)
1 πi1 ⊗ 1
(n)

h−1

g(ij )
1 πij

(cid:17)
(i2)

(cid:16)
g−1
2

(cid:0)
g(i1)
1 πi1 ⊗ 1

(cid:1)

(cid:0)
⊗ h(n)π−1
ij

(cid:1)
g−1
j
(cid:16)

 
22

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

7→ g(ik)

k πik ⊗ π−1
ik

g−1
k

(ik)

g(ik−1)
k−1 πik−1 ⊗ · · · ⊗ π−1
ij+1

g−1
j+1

(ij+1)

gjh−1

(ij )

πij

⊗ π−1
ij

(ij )

(cid:1)

(cid:0)
hg−1
j

ij−1
g
1

πij−1 ⊗ · · · ⊗ π−1
i2

(cid:16)
g−1
2

(cid:17)
(cid:0)
(i2)
g(i1)
1 πi1 ⊗ 1

(cid:1)

7→ gkeik ⊗ · · · ⊗ gj+1eij+1 ⊗ gjh−1eij ⊗ gj−1eij−1 ⊗ · · · ⊗ g1ei1.

(cid:0)

(cid:1)

(cid:16)

(cid:17)

This is precisely the map Φn(1V⊗(k−j−1) ⊗ h ⊗ 1V⊗(j−1)).

Merge: For g, h ∈ G and 1 ≤ i, j ≤ n,

(8.2)

π−1
i

g−1

(i)

h(j)πj =

g−1

(n)

h(π−1

i

(j))π−1

i πj.

We have π−1
composition

i πj ∈ Sn−1 if and only if i = j, in which case (8.2) is equal to

(cid:1)

(cid:1)

(cid:0)

(cid:0)

g−1h

(n). Thus, the

β−1
k−1 ◦

Ωn ◦ Ψ

1V⊗(k−j−1) ⊗

⊗ 1V⊗(j−1)

(cid:16)
is the An-module map given by

(cid:16)

(cid:17)(cid:17)

◦ βk : V ⊗k → V ⊗(k−1)

(cid:0)

(cid:1)

gkeik ⊗ · · · ⊗ g1ei1 7→ g(ik)

(ik)

g−1
k

k πik ⊗ π−1
ik

g(ik−1)
k−1 πik−1 ⊗ · · · ⊗ π−1
ij+1
g(i1)
1 πi1 ⊗ 1
7→ δij ,ij+1δgj,gj+1gkeik ⊗ · · · ⊗ gj+2eij+2 ⊗ gjeij ⊗ · · · ⊗ g1ei1.

g−1
j+1
(cid:16)

(cid:0)
· · · ⊗ π−1
i2

(cid:1)
g−1
2

(i2)

(cid:17)

(cid:0)

(cid:1)

(ij+1)

g(ij )
j πij ⊗

This is precisely the map Φn

1V⊗(k−j−1) ⊗

⊗ 1V⊗(j−1)

.

Split: The composition

(cid:16)

(cid:17)

β−1
k+1 ◦

Ωn ◦ Ψ

1V⊗(k−j) ⊗

⊗ 1V⊗(j−1)

◦ βk : V ⊗k → V ⊗(k+1)

is the An-module map given by

(cid:16)

(cid:16)

(cid:17)(cid:17)

gkeik ⊗ · · · ⊗ g1ei1 7→ g(ik )

k πik ⊗ π−1
ik

g−1
k

(ik)

g(ik−1)
k−1 πik−1 ⊗ · · · ⊗ π−1
ij+1

⊗ π−1
ij

(cid:0)
g−1
j
(cid:16)

(cid:17)

(ij )
(cid:1)

g(ij−1)
j−1 ⊗ · · · ⊗ π−1
i2

g−1
2

7→ gkeik ⊗ · · · ⊗ gj+1eij+1 ⊗ gjeij ⊗ gjeij ⊗ gj−1eij−1 ⊗ · · · ⊗ g1ei1.

(cid:1)

(cid:0)

(ij+1)

g(ij )
j πij ⊗ 1

g−1
j+1
(cid:16)
(i2)

(cid:17)
g(i1)
1 πi1 ⊗ 1

This is precisely the map Φn

1V⊗(k−j) ⊗

⊗ 1V⊗(j−1)

.

Unit pin: The composition

(cid:16)

(cid:17)

k+1 ◦ (Ωn ◦ Ψ (1V⊗(k−j) ⊗ ⊗ 1V⊗j )) ◦ βk : V ⊗k → V ⊗(k+1)
β−1

is the map

n

gkeik ⊗ · · · ⊗ g1ei1 7→

gkeik ⊗ · · · ⊗ gj+1eij+1 ⊗ hei ⊗ gjeij ⊗ · · · ⊗ g1ei1,

which is equal to the map Φn(1V⊗(k−j) ⊗ ⊗ 1V⊗j ).

Xh∈G

i=1
X

Counit pin: The composition

k−1 ◦ (Ωn ◦ Ψ (1V⊗(k−j) ⊗ ⊗ 1V⊗(j−1))) ◦ βk : V ⊗k → V ⊗(k−1)
β−1

is the map

gkeik ⊗ · · · ⊗ g1ei1 7→ gkeik ⊗ · · · ⊗ gj+1eij+1 ⊗ gj−1eij−1 ⊗ · · · ⊗ g1ei1,

GROUP PARTITION CATEGORIES

23

which is equal to the map Φn(1V⊗(k−j) ⊗ ⊗ 1V⊗(j−1)).
Crossing: Deﬁne the elements f, f ′ ∈ EndHeis(↑↓↑↓) by

(8.3)

Note that

where

f =

,

f ′ =

g−1

Xg∈G

f = f3 ◦ f2 ◦ f1,

g

g

g−1

.

f1 =

,

f2 =

,

f3 =

.

Suppose i, j ∈ {1, . . . , n} and x, y ∈ An. We ﬁrst compute the action of Θ(f ) and Θ(f ′) on

α = xg1

(i)πi ⊗ π−1

g−1
1
(n)

(i)

g2
(π−1
i

(j)πj ⊗ π−1

g−1
j
2
i πj ⊗ π−1
j

(cid:0)

(j))π−1

(j)

y

(j)

(cid:1)

g−1
2

y ∈ (n)n−1(n)n−1(n),

(cid:1)
g2

i
g−1
(cid:0)
1

= xg1
where x, y ∈ An. If i = j, then π−1

(cid:1)

(cid:0)

(i)πi ⊗

i πj = 1Sn, and so Ωn(f1)(α) = 0. Now suppose i < j so that

(cid:1)

(cid:0)

π−1
i πj = sn−1 · · · sisj · · · sn−1 = sj−1 · · · sn−2sn−1sn−2 · · · si.

Thus

Θ(f1)(α) = xg(i)

(π−1
i
1 πig
2

(j))

sj−1 · · · sn−2 ⊗

(n−1)

g−1
1

sn−2 · · · siπ−1

j

g−1
2

(j)

y ∈ (n)n−2(n).

Hence

and so

Θ(f2 ◦ f1)(α) = xg(i)

(π−1
i
1 πig
2

(j))

πj−1 ⊗

(cid:0)

(cid:1)
g−1
1

(n)

i π−1
π−1
j

g−1
2

(cid:0)
(j)

(cid:1)

y ∈ (n)n−2(n),

Θ(f )(α) = xg(i)
= xg(j)
= xg(j)
= xg(j)
= xg(j)

(cid:0)

(n)

(j))

(cid:1)
g−1
1

πj−1 ⊗ sn−1 ⊗

(cid:0)
(π−1
i π−1
π−1
i
1 πig
j
2
2 πjg(i)
1 si · · · sn−2 ⊗ sn−1 ⊗ sn−2 · · · sj−1π−1
(cid:0)
i
2 πj ⊗ g(i)
⊗ π−1
i
(i)
2 πj ⊗ π−1
2 πj ⊗ π−1
j

1 πisn−2 · · · sj−1
j g(i)
1 πi
g−1
2

g−1
2
⊗ π−1
(cid:1)
i
g(i)
1 πi ⊗ π−1
(cid:1)

g−1
1
(i)
g−1
(cid:1)
(cid:0)
1

g−1
2
(j)
(cid:0)

(j−1)
(cid:0)

(j−1)

y.

(cid:0)
y

(cid:0)

(cid:1)

i

(cid:1)
g−1
2
g−1
(cid:1)
2
g−1
(cid:0)
1

(cid:1)

(j)

y

(j)

g−1
1

(i)

y

(i)
(cid:1)

y

(cid:0)

(cid:1)

The case i > j is similar, giving

(cid:0)

(cid:1)

(cid:0)

(cid:1)

Θ(f )(α) =

We also compute that

0
xg(j)

(

2 πj ⊗ π−1
j

Θ(f ′)(α) =

2 πj ⊗ π−1
j

xg(j)
0
(

Thus, for all i, j ∈ {1, . . . , n}, we have

g−1
2

(j)

g(i)
1 πi ⊗ π−1

i

g−1
1

(i)

y

if i 6= j.

if i = j,

(cid:0)

(cid:1)
g−1
2

(cid:0)

(cid:1)

(j)

g(i)
1 πi ⊗ π−1

i

(cid:0)

(cid:1)
g−1
1

(i)

y

(cid:0)

(cid:1)

if i = j,
if i 6= j.

Θ(f + f ′)(α) = xg(j)

2 πj ⊗ π−1
j

g−1
2

(j)

g(i)
1 πi ⊗ π−1

i

g−1
1

(i)

y.

Therefore we have that

(cid:0)

(cid:1)

(cid:0)

(cid:1)

β−1
k ◦

Ωn ◦ Ψ

1V⊗(k−j−1) ⊗

⊗ 1V⊗(j−1)

◦ βk

(cid:16)

(cid:16)

(cid:17)(cid:17)

24

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

is the map

= β−1

k ◦

Ωn

(cid:16)

1⊗(k−j−1)
↑↓
(cid:16)

⊗ (f + f ′) ⊗ 1⊗(j−1)

↑↓

◦ βk

(cid:17)(cid:17)

gkeik ⊗ · · · ⊗ g1ei1 7→ gkeik ⊗ · · · ⊗ gj+2eij+2 ⊗ gjeij ⊗ gj+1eij+1 ⊗ gj−1eij−1 ⊗ · · · g1ei1,

which is precisely the map Φn

1V⊗(k−j−1) ⊗

⊗ 1V⊗(j−1)

.

(cid:16)

(cid:17)

(cid:3)

9. Interpolating categories

We assume throughout this section that G is a ﬁnite group. In [Kno07], Knop generalized the
work [Del07] of Deligne by embedding a regular category A into a family of pseudo-abelian tensor
categories T (A, δ), which are the additive Karoubi envelope of categories T 0(A, δ) depending on a
degree function δ. Deligne’s original construction corresponds to the case where A is the category
of ﬁnite boolean algebras.

As we now explain, the group partition category Par (G, d) is equivalent to T 0(A, δ), where A
is the category of ﬁnite boolean algebras with a locally free G-action and δ is a degree function
depending on d. In this way, Par (G, d) can be viewed as a concrete realization (including explicit
bases of morphisms spaces) of the category T 0(A, δ), whose deﬁnition is rather abstract. Moreover,
Theorem 4.4 can be viewed as giving an eﬃcient presentation of Knop’s category. On the other
hand, the equivalence of Par (G, d) and T 0(A, δ) allows us to deduce from Knop’s work several
important properties of Par (G, d).

For an arbitrary ﬁnite set X, let Pow(X) denote the power set of X. For Y ⊆ X, let ¬Y = X −Y
denote its complement. The 5-tuple (Pow(X), ∩, ∪, ¬, ∅, X) is an example of a ﬁnite boolean algebra.
In what follows, we simply denote this boolean algebra by Pow(X). In turns out that every ﬁnite
boolean algebra is isomorphic to one of this form. In fact, the category FinBoolAlg of ﬁnite boolean
algebras is equivalent to the opposite of the category FinSet of ﬁnite sets. To a map f : X → Y of
ﬁnite sets, the corresponding homomorphism of boolean algebras is the map Pow(Y ) → Pow(X),
Z 7→ f −1(Z). We refer the reader to [GH09, Ch. 15] for details.

By deﬁnition, an action of a group G on the boolean algebra Pow(X) is a group homomorphism
from G to the automorphism group of Pow(X) in FinBoolAlg . It follows from the axioms of a boolean
algebra that this action is uniquely determined by the action of G on singletons or, equivalently, by
a G-action on the set X. In this way, the category FinBoolAlg (G) of ﬁnite boolean algebras with G-
actions (with morphisms being homomorphisms of boolean algebras that intertwine the G-actions)
is equivalent to the opposite of the category of ﬁnite G-sets.

We say that a G-action on a boolean algebra is locally free if every element of the boolean algebra
is a union of elements on which G acts freely. In the case of the ﬁnite boolean algebra Pow(X), this
is equivalent to the condition that G acts freely on the singletons. (Note that, since X is ﬁnite, this
forces the group G to be ﬁnite.) Hence the category FinBoolAlg (G)lf of ﬁnite boolean algebras with
locally free G-actions is equivalent to the opposite of the category of ﬁnite sets with free G-action:

(9.1)

FinBoolAlg (G)lf ≃ FinSet (G)op

free.

The category FinBoolAlg (G)lf is regular, exact, and Malcev, using the deﬁnitions of these concepts
given in [Kno07].

GROUP PARTITION CATEGORIES

25

Knop’s deﬁnition of the category T 0(A, δ) involves the diagram [Kno07, (3.2)]:

r ×y s

(9.2)

r

s ◦ r

s

x

y

z,

where x, y, z ∈ A, r is a subobject of x × y, s is a subobject of y × z, and s ◦ r is the image of the
natural surjective map r ×y s → x × z. To relate Knop’s construction to the G-partition category,
we consider the diagram (9.2) in the case where A = FinBoolAlg (G)lf.

First note that the product Pow(X) × Pow(Y ) is isomorphic to Pow(X ⊔ Y ). Our next goal is

to interpret the subobjects r, s in (9.2) as G-partition diagrams.

Every ﬁnite free G-set is isomorphic to one of the form X × G, where X is a ﬁnite set (indexing

the G-orbits), with G action given by

g · (x, h) = (x, hg−1),

x ∈ X, g, h ∈ G.

Thus, by (9.1), every element of FinBoolAlg (G)lf is isomorphic to one of the form Pow(X × G).
Moreover, every element is, in fact, isomorphic to Pow({1, 2, . . . , r} × G) for some r ∈ N. (We adopt
the convention that {1, 2, . . . , r} = ∅ when r = 0.)

Deﬁne the natural projection map pX : X ×G → X. For a morphism ϕ : Pow({1, 2, . . . , r}×G) →

Pow(X × G), deﬁne

P ϕ
i

:= pX ◦ ϕ({(i, 1G)}) ⊆ X,

1 ≤ i ≤ r,

r

λϕ :=

ϕ({(i, 1G)}) ∈ GX ,

i=1
[

1 , . . . , P ϕ
and set ~P ϕ = (P ϕ
functions X → G, as a subset of X × G. Let
r
i=1 Pi = X, Pi 6= ∅, Pi ∩ Pj = ∅ for all 1 ≤ i, j ≤ r}.
Parr(X) := {(P1, . . . , Pr) ∈ Pow(X)r :

r ). Here we use the formal deﬁnition of an element of GX , the set of

In other words Parr(X) is the set of all r-tuples of nonempty disjoint sets whose union is X. For
x, y ∈ FinBoolAlg (G)lf, let Mon(x, y) denote the set of monomorphisms x → y in FinBoolAlg (G)lf.
Lemma 9.1. The map

S

(9.3)

Mon(Pow({1, 2, . . . , r} × G), Pow(X × G)) → Parr(X) × GX , ϕ 7→ ( ~P ϕ, λϕ),

is a bijection.
Proof. For ( ~P , λ) ∈ Parr(X) × GX , deﬁne ϕ′

~P ,λ

: {1, 2, . . . , r} × G → Pow(X × G) by

ϕ′

~P ,λ

(i, g) = {(x, λ(x)g) : x ∈ Pi} ⊆ X × G.

This induces a map ϕ ~P ,λ : Pow({1, 2, . . . , r} × G) → Pow(X × G). It is straightforward to verify
that the map ( ~P , λ) 7→ ϕ ~P ,λ is inverse to (9.3).
(cid:3)

The proof of the following lemma is straightforward.

Lemma 9.2. The automorphism group of Pow({1, 2, . . . , r} × G) in FinBoolAlg (G)lf is the wreath
product Gr = Gr ⋊ Sr, where the action is determined by its action on elements of {1, 2, . . . , r} × G
as follows:

(9.4)

(g, π) · (i, h) := (π(i), gπ(i)h),

π ∈ Sr, i = {1, 2, . . . , r}, h ∈ G, g ∈ Gr.

26

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

We also have an action of Gr on Powr(X) × GX given by

(9.5)

(g, π) ·

(P1, . . . , Pr), (hx)x∈X

:=

(Pπ−1(1), . . . , Pπ−1(r)), (gπ(ix)hx)x∈X

,

where ix ∈ {1, 2, . . . , r} is determined by x ∈ Pix. The following lemma is also a straightforward
veriﬁcation.

(cid:0)

(cid:0)

(cid:1)

(cid:1)

Lemma 9.3. The bijection (9.3) intertwines the actions (9.4) and (9.5).

Let Par(X) denote the set of partitions of X. For ~P = (P1, . . . , Pr) ∈ Parr(X), let P =
{P1, . . . , Pr} ∈ Par(X) denote the corresponding partition of X. For P = {P1, . . . , Pr} ∈ Par(X),
deﬁne an equivalence relation ∼P on GX as follows: (gx)x∈X ∼P (hx)x∈X if and only if there exist
t1, . . . , tr ∈ G such that gx = tihx for all x ∈ Pi.

Corollary 9.4. The subobjects of Pow(X × G) in the category FinBoolAlg (G)lf are naturally enu-
merated by the set

(9.6)

GX / ∼P .

GP ∈Par(X)

Now consider the diagram (9.2) with x = Pow({1, 2, . . . , k} × G), y = Pow({1, 2, . . . , l} × G),
∼= {1, 2, . . . , k} ⊔ {1, 2, . . . , l}, the set (9.6) can be
and z = Pow({1, 2, . . . , m} × G). When X = X l
k
l
. Thus we can view r
naturally identiﬁed with the equivalence classes of G-partitions of type
k
and s as equivalence classes of G-partitions [P, g] and [Q, h], respectively. We then leave it to the
reader to verify that r ×y s exists if and only if the pair ([Q, g], [P, h]) is compatible. If this pair is
compatible, then r ×y s is the equivalence class of stack((Q, h), (P, g)) and s ◦ r = [Q ⋆ P, h ⋆Q,P g].
Thus we have the following result.

(cid:1)

(cid:0)

Theorem 9.5. The G-partition category Par (G, d) is equivalent to the category T 0(A, δ) deﬁned in
[Kno07, Def. 3.2], where A = FinBoolAlg (G)lf and δ is the degree function of [Kno07, (8.15)] with
the t there equal to d.

Proof. This follows from the above discussion and [Kno07, Example 2, p. 596].

(cid:3)

Let Kar(Par (G, d)) be the additive Karoubi envelope (also known as the pseudo-abelian comple-
tion) of Par (G, d). Let N (G, d) be the tensor radical (also known as the tensor ideal of negligible
morphisms) of Kar(Par (G, d)).

Corollary 9.6. Suppose k is a ﬁeld of characteristic zero.

(a) The category Kar(Par (G, d))/N (G, d) is a semisimple (hence abelian) category.
(b) We have N (G, d) = 0 if and only if d /∈ N|G|.
(c) If N (G, d) = 0, then the simple objects of Kar(Par (G, d)) are naturally parameterized by the
set of N -tuples of Young diagrams, where N is the number of isomorphism classes of simple
G-modules.

(d) If d = n|G|, then Kar(Par (G, d))/N (G, d) is equivalent to the category of kGn-modules.

Proof.

(a) This follows from [Kno07, Th. 6.1(i)].

(b) This follows from [Kno07, Example 2, p. 596].
(c) By parts (iii) and (iv) of [Kno07, Th. 6.1], the simple objects of Kar(Par (G, d)) are in
bijection with the simple modules of the automorphism groups of objects of FinBoolAlg (G)lf which,
by Lemma 9.2, are precisely the wreath products Gn, n ∈ N. The statement then follows from the
classiﬁcation of irreducible modules of wreath product groups. (See, for example, [RS17, Prop. 4.3].)
(cid:3)

(d) This is explained in [Kno07, Example 2, p. 606].

GROUP PARTITION CATEGORIES

27

Remark 9.7. Deligne’s construction has also been generalized by Mori [Mor12], who deﬁned, for
each d ∈ k, a 2-functor Sd sending a tensor category C to another tensor category Sd(C), which
should be thought of as a sort of interpolating wreath product functor. When C is the category
G-mod of G-modules, St(G-mod) can also be thought of as a family of interpolating categories for
modules of the wreath products Gn, n ∈ N. Mori’s interpolating category contains Knop’s as a
full subcategory; see [Mor12, Rem. 4.14]. Mori gives a presentation of his categories, the relations
of which can be found in [Mor12, Prop. 4.26]. The presentation of Deﬁnition 4.1 is considerably
more eﬃcient. For example, Par (G) has just one generating object, whereas Mori’s category (before
taking the additive Karoubi envelope) has a generator for each representation of G. In addition, the
presentation of [Mor12] includes as generating morphisms all morphisms in the category G-mod,
whereas the presentation of Deﬁnition 4.1 only includes a morphism for each element of the group
(the tokens).

References

[Blo03] M. Bloss. G-colored partition algebras as centralizer algebras of wreath products. J. Algebra, 265(2):690–710,

[BSW]

2003. doi:10.1016/S0021-8693(03)00132-7.
J. Brundan, A. Savage, and B. Webster. Foundations of Frobenius Heisenberg categories. J. Algebra. To
appear. arXiv:2007.01642.

[Com20] J. Comes. Jellyﬁsh partition categories. Algebr. Represent. Theory, 23(2):327–347, 2020. arXiv:1612.05182,

doi:10.1007/s10468-018-09851-7.

[Del07] P. Deligne. La catégorie des représentations du groupe symétrique St, lorsque t n’est pas un entier naturel.
In Algebraic groups and homogeneous spaces, volume 19 of Tata Inst. Fund. Res. Stud. Math., pages 209–273.
Tata Inst. Fund. Res., Mumbai, 2007.

[Eti14] P. Etingof. Representation theory in complex rank,

I. Transform. Groups, 19(2):359–381, 2014.

arXiv:1401.6321, doi:10.1007/s00031-014-9260-2.

[FS18] A. Freslon and A. Skalski. Wreath products of ﬁnite groups by quantum groups. J. Noncommut. Geom.,

12(1):29–68, 2018. arXiv:1510.05238, doi:10.4171/JNCG/270.

[GH09] S. Givant and P. Halmos. Introduction to Boolean algebras. Undergraduate Texts in Mathematics. Springer,

New York, 2009. doi:10.1007/978-0-387-68436-9.

[Har16] N. Harman. Generators for the representation rings of certain wreath products. J. Algebra, 445:125–135,

2016. arXiv:1410.1786, doi:10.1016/j.jalgebra.2015.09.003.

[Kho14] M. Khovanov. Heisenberg algebra and a graphical calculus. Fund. Math., 225(1):169–210, 2014.

arXiv:1009.3295, doi:10.4064/fm225-1-8.

[Kno07] F. Knop. Tensor envelopes of regular categories. Adv. Math., 214(2):571–617, 2007. arXiv:math/0610552,

doi:10.1016/j.aim.2007.03.001.

[Koc04] J. Kock. Frobenius algebras and 2D topological quantum ﬁeld theories, volume 59 of London Mathematical

Society Student Texts. Cambridge University Press, Cambridge, 2004.

[Mor12] M. Mori. On representation categories of wreath products in non-integral rank. Adv. Math., 231(1):1–42,

[NLS]

2012. arXiv:1105.5091, doi:10.1016/j.aim.2012.05.002.
S. Nyobe Likeng and A. Savage. Embedding Deligne’s category Rep(St) in the Heisenberg category (appendix
with C. Ryba). Quantum Topol. To appear. arXiv:1905.05620.

[RS17] D. Rosso and A. Savage. A general approach to Heisenberg categoriﬁcation via wreath product algebras.

Math. Z., 286(1-2):603–655, 2017. arXiv:1507.06298, doi:10.1007/s00209-016-1776-9.

[Ryb19] C. Ryba. Stable Grothendieck rings of wreath product categories. J. Algebraic Combin., 49(3):267–307,

2019. arXiv:1704.02226, doi:10.1007/s10801-018-0856-9.

[Ryb21] C. Ryba. The structure of the Grothendieck rings of wreath product Deligne categories and their generalisa-
tions. Int. Math. Res. Not. IMRN, (16):12420–12462, 2021. arXiv:1810.11171, doi:10.1093/imrn/rnz144.
[Sav19] A. Savage. Frobenius Heisenberg categoriﬁcation. Algebr. Comb., 2(5):937–967, 2019. arXiv:1802.01626,

doi:10.5802/alco.73.

[Sav20] A. Savage. Aﬃne wreath product algebras.
arXiv:1709.02998, doi:10.1093/imrn/rny092.

Int. Math. Res. Not.

IMRN,

(10):2977–3041, 2020.

28

SAMUEL NYOBE LIKENG AND ALISTAIR SAVAGE

(S.N.L) Department of Mathematics and Statistics, University of Ottawa, Ottawa, ON K1N 6N5,

Canada

Email address: snyob030@uottawa.ca

(A.S.) Department of Mathematics and Statistics, University of Ottawa, Ottawa, ON K1N 6N5,

Canada

URL: alistairsavage.ca, ORCiD: orcid.org/0000-0002-2859-0239
Email address: alistair.savage@uottawa.ca

