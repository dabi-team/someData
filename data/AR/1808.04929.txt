8
1
0
2

g
u
A
5
1

]

V
C
.
s
c
[

1
v
9
2
9
4
0
.
8
0
8
1
:
v
i
X
r
a

Faculty of Science, Technology and Communication

Holographic Visualisation of Radiology
Data and Automated Machine Learning-
based Medical Image Segmentation

Thesis Submitted in Partial Fulﬁllment of the
Requirements for the Degree of Master in Information
and Computer Sciences

Author:
Lucian TRESTIOREANU

Supervisor:
Dr. Radu STATE

Reviewer:
Prof. Dr. Christoph
SCHOMMER

Advisor:
Patrick Glauner

August 2018

 
 
 
 
 
 
ii

Abstract

Within this thesis we propose a platform for combining Augmented Reality (AR)
hardware with machine learning in a user-oriented pipeline, oﬀering to the medical staﬀ
an intuitive 3D visualization of volumetric Computed Tomography (CT) and Magnetic
Resonance Imaging (MRI) medical image segmentations inside the AR headset, that
does not need human intervention for loading, processing and segmentation of medical
images. The AR visualization, based on Microsoft HoloLens, employs a modular and
thus scalable frontend-backend architecture for real-time visualizations on multiple AR
headsets.

As Convolutional Neural Networks (CNNs) have lastly demonstrated superior perfor-
mance for the machine learning task of image semantic segmentation, the pipeline also
includes a fully automated CNN algorithm for the segmentation of the liver from CT
scans. The model is based on the Deep Retinal Image Understanding (DRIU) model
which is a Fully Convolutional Network with side outputs from feature maps with dif-
ferent resolution, extracted at diﬀerent stages of the network. The algorithm is 2.5D
which means that the input is a set of consecutive scan slices. The experiments have
been performed on the Liver Tumor Segmentation Challenge (LiTS) dataset for liver
segmentation and demonstrated good results and ﬂexibility.

While multiple approaches exist in the domain, only few of them have focused on
overcoming the practical aspects which still largely hold this technology away from the
operating rooms. In line with this, we also are next planning an evaluation from medical
doctors and radiologists in a real-world environment.

iii

iv

Acknowledgements

Firstly, I would like to thank Dr. Radu State for accepting me to join the SEDAN
Lab for my master’s thesis. I gained important knowledge and skills since being part of
the project. I want to specially thank Mr. Patrick Glauner for his continuous support
in all aspects during this whole time, and Dr. Jorge Meira for the advice during the
project. I am happy I had the chance to work with you both and I learned a lot from the
conversations we had along this semester. Thanks also to Mr. Max Gindt for the insights
into practical medicine aspects and Mr. Martin Lehmann for his help with Unity. Finally,
I want to thank my family, and especially my wife Lucia, who has always supported me
and made this master possible. As well, I want to thank everyone I met during this
master’s program and have contributed to my development in computer science!

v

vi

Table of Contents

Abstract

Acknowledgements

Contents

List of Figures

List of Tables

1 Introduction

1.1 Motivation and contributions

. . . . . . . . . . . . . . . . . . . . . . . . .
1.1.1 Virtual and augmented reality head-mounted displays
. . . . . . .
1.1.2 Use of VR and AR devices in the medical area . . . . . . . . . . .
1.1.3 Computer vision: the machine learning algorithms
. . . . . . . . .
1.1.4 Contribution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.2.1 WP1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.2.2 WP2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.2 Work Packages

iii

v

vii

ix

xi

1
1
2
2
2
3
4
4
5

2 State of the Art

2.1 Machine learning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . .

7
7
9
2.1.1 Artiﬁcial neural networks
2.1.2 Machine learning for medical imaging . . . . . . . . . . . . . . . . 10
2.2 Medical imaging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
2.2.1 Current medical imaging equipment
. . . . . . . . . . . . . . . . . 12
2.2.2 Current medical data visualization methods . . . . . . . . . . . . . 13
2.2.3 AR, VR and MR in medical imaging . . . . . . . . . . . . . . . . . 14

3 Medical Image Segmentation

19
3.1 The K-means clustering algorithm . . . . . . . . . . . . . . . . . . . . . . 19
3.2 The deep-learning algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . 20
3.2.1 Deep learning algorithm architecture . . . . . . . . . . . . . . . . . 21
3.2.2 Pre-processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
3.2.3 Loss objective . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
3.2.4
Input multiple 2D slices to take advantage of 3D data . . . . . . . 22
3.2.5 ROI cropping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
3.2.6 Using the liver segmentation for the lesion segmentation . . . . . . 23
3.2.7 Lesion detector module
. . . . . . . . . . . . . . . . . . . . . . . . 23
3D - Conditional random ﬁelds . . . . . . . . . . . . . . . . . . . . 24
3.2.8

vii

viii

TABLE OF CONTENTS

3.3 Evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
3.3.1 Dataset: LiTS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
3.3.2 Metrics
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
3.3.3 Experiments on the LiTS dataset . . . . . . . . . . . . . . . . . . . 26
3.4 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30

4 HoloLens Visualization

31
4.1 Hololens with external rendering . . . . . . . . . . . . . . . . . . . . . . . 31
4.1.1
Signaling server and networking . . . . . . . . . . . . . . . . . . . . 33
4.1.2 Client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
Server . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
4.1.3
4.2 User interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
4.3 Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
4.4 Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36

5 Conclusion and Future Work

Bibliography

39

41

List of Figures

1.1 Microsoft HoloLens . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.2 Medical image segmentation . . . . . . . . . . . . . . . . . . . . . . . . . .
1.3 General system overview . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2
2
3

9
2.1 Machine learning algorithms . . . . . . . . . . . . . . . . . . . . . . . . . .
2.2 Fully connected networks
. . . . . . . . . . . . . . . . . . . . . . . . . . . 10
2.3 Axial head CT in “bone window” and “brain window” . . . . . . . . . . . . 13
2.4 MRI brain scan: axial, coronal and sagittal images . . . . . . . . . . . . . 13
2.5 Comparison between volume rendering and surface rendering . . . . . . . 14
. . . . . . . . . . . . . . . . . . . . . . . . . . 15
2.6 HTC Vive and Oculus Rift
. . . . . . . . . . . . . . . . . . . . . . . 15
2.7 SpectoVive - University of Basel
. . . . . . 16
2.8 HoloLens’ competitors: Meta, Daqri Helmet and Daqri Glasses
2.9 NOVARAD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17

3.1 K-means: the initial image and the result for K = 4 . . . . . . . . . . . . 19
3D K-means: the result for K = 4 . . . . . . . . . . . . . . . . . . . . . . 20
3.2
3.3 DRIU overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
3.4 General algorithm overview . . . . . . . . . . . . . . . . . . . . . . . . . . 22
3.5 Liver segmentation architecture . . . . . . . . . . . . . . . . . . . . . . . . 22
Input uses a series of three consecutive slices . . . . . . . . . . . . . . . . . 23
3.6
3.7 Segmentation vs detection . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
3.8 The lesion detector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
3.9 Structure of data volumes used, and actual 3D visualization . . . . . . . . 26
3.10 Sample liver segmentation result
. . . . . . . . . . . . . . . . . . . . . . . 27
3.11 Liver segmentation: training and validation loss . . . . . . . . . . . . . . . 28
3.12 The LiTS challenge results comparison . . . . . . . . . . . . . . . . . . . . 29

4.1 Volume raycasting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
4.2 System logical architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
4.3 WebRTC extended by 3DToolkit . . . . . . . . . . . . . . . . . . . . . . . 32
4.4 Hardware architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
4.5 Application screenshot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
Improving GPU memory access . . . . . . . . . . . . . . . . . . . . . . . . 36
4.6

ix

x

LIST OF FIGURES

List of Tables

3.1 LiTS challenge: lesion and liver segmentation dice scores . . . . . . . . . . 29
3.2 Training and testing times for the liver segmentation . . . . . . . . . . . . 29

4.1 Client and server feature matrices . . . . . . . . . . . . . . . . . . . . . . . 33
. . . . . . . . . . . 36
4.2 Diﬀerent GPUs’ performance for the reference volume

xi

xii

LIST OF TABLES

Chapter 1

Introduction

Contemporary radiology is constantly evolving, giving us sharper and deeper medical
imaging, from the initial capturing of Contrast Tomography (CT) images through to the
handcrafted analysis. Organ and lesion segmentation helps doctors accurately diagnose
disease, plan surgical interventions and the treatment of patients. Generally, the doctors
are using CT and Magnetic Resonance Imaging (MRI) images segmented by manual or
semi-automatic techniques.

1.1 Motivation and contributions

Despite some advancements in the domain, the current pipeline used by the practi-
tioners is not automated and the quality of the ﬁnal results, which are key to pre-operative
decision making, depends on the resources available for segmentation and ad-hoc manip-
ulation. In the recent years, automatic solutions which are less time-consuming and do
not rely on the human factor have been investigated. Also, the volumetric image, three
dimensional in nature, is viewed on two-dimensional displays. As such, a mass of infor-
mation stays hidden from the viewer and the cognitive eﬀort required to interpret the
results is higher.

Today there are diﬀerent approaches to present the 3D information provided by the
diﬀerent medical investigations in a 3D manner, but few of them address aspects of prac-
ticality and ergonomics such as the ones oﬀered by AR and more speciﬁcally HoloLens:
surroundings awareness and interaction using mechanisms unbound by traditional input
hardware, which opens the possibility of using this technology in the operations the-
aters with strict hygiene requirements. Besides aspects like almost real-time access to
segmented data, this work tries to leverage practical HoloLens advantages to create a
valuable product for real-life and real-time medical usage.

More speciﬁcally, our project strives to address aspects like:

• Being able to access the information (3D medical image and patient data) while

during the situation (surgery, medical emergency),

• Information sharing (multiple users working in the same time on the same data,

marking and pointing),

• Strict hygiene rules in the operations rooms - the ability to control the device

without having to touch any dedicated hardware,

• Surroundings awareness (be able to see the real-world environment in the same

time with the medical data).

1

2

CHAPTER 1.

INTRODUCTION

The main challenge in using HoloLens is the inherent limited rendering power as-
sociated to any mobile device, worsened by the high GPU demands required by the
rendering of the 3D medical volumetric images (CTs and MRIs), which we address by
using dedicated external hardware.

1.1.1 Virtual and augmented reality head-mounted displays

As progress has been made on virtual reality
(VR) and augmented reality (AR) devices, cur-
rent headsets have demonstrated higher quality and
lower prices. The most popular AR platform, Mi-
crosoft HoloLens [1], presented in Figure 1.1 , of-
fers an advanced development and experimental
platform. VR and AR devices oﬀer 360◦ vision
as well as haptics and interactions using mecha-
nisms unbound by traditional machine-human in-
teraction devices (like keyboards, pointer devices,
controllers).

Figure 1.1: Microsoft HoloLens.a

aSource: http://www.microsoft.com/

en-us/hololens

1.1.2 Use of VR and AR devices in the medical area

With the rapid progress of Graphics Processing Units (GPUs), the combined possibil-
ities of AR or VR devices, and stronger GPUs, enable opportunities also in the medical
area, where they can be used for the cognition of, and interaction with medical imaging
not only during analysis but also during surgical interventions. Thanks to the GPUs
massive computational power, heavy processing can be oﬄoaded to a dedicated backend
in order to be light on the low-resource headsets, e.g the HoloLens headset.

Preoperative as well as intraoperative use of VR or AR models aiding decision-making
has been proven to provide support to medical staﬀ in diverse settings, inter alia in sup-
port of laparoscopic (or minimally invasive) surgery [2, 3] or by fusing endoscopic vision
with MRI images [4], which leads more and more research institutions into the area [5].

1.1.3 Computer vision: the machine learning algorithms

Segmentation of images is the pro-
cess of partitioning the image into se-
mantically meaningful parts and clas-
sifying each part into pre-determined
classes. An example is depicted in
Figure 1.2. As segmentation of med-
ical images is a time consuming man-
ual process, involving machine learning
into this use-case has gained a high in-
terest in the last years.

Figure 1.2: Medical image segmentation [6].

Generally, the automatic liver segmentation is challenging for reasons like noise in
the CT scans, lesions variability, and low contrast of image elements such as liver, lesions
and other organs. At present, the state of the art in solving these challenges has been
achieved by Convolutional Neural Networks (CNNs) based approaches.

The algorithm we use for segmentation, adapts DRIU - Deep Retinal Image Under-
standing [7], for the task of liver segmentation. This method has already had success

1.1. MOTIVATION AND CONTRIBUTIONS

3

with segmenting the eye’s blood vessels and optical disk, as well as for One Shot Video
Objects Segmentation (OSVOS) [8].

Some important aspects of the algorithm we are using, are:

• For solving the data imbalance, as explained in Section 3.3.3, a weighting of the

Binary Cross Entropy (BCE) loss used for training has been introduced.

• The employed framework is Tensorﬂow [45], starting from OSVOS’ [3] open source

code.

• The network is 2.5D, i.e. the input is a sequence of 3 consecutive CT scan slices,

which improves the performance versus using a single slice.

• A 3D Conditional Random Field post-processing is also introduced in order to

obtain spatial coherence for the predictions.

This model has already demonstrated good performance during a liver segmentation
dedicated competition, and also its generality is demonstrated on diﬀerent anatomical
structures from the Visceral dataset.

1.1.4 Contribution

Because of the high regulatory and scientiﬁc requirements of any medical device al-
lowed to enter the operation rooms we decided to evaluate the best existing solutions
and technologies that could be leveraged to achieve the stated goals. As a 3D medical
image visualization solution we chose the HoloLens headset, and we chose to make use of
the "3D Toolkit" project actively developed by the Microsoft Catalyst Partner Team [9]
as the solution to power the external image rendering.

In regards to the liver segmentation requirement, the dataset we used comprises of
200 liver scans downloaded from the LiTS competition [10]. The CNN liver segmentation
model was made public at the same competition [11].

In Figure 1.3, we present a general overview of the pipeline we propose. The CT

Figure 1.3: General system overview.

scans acquired by the CT scanner [Figure 1.3(1)] are stored in Shared storage 1. Script
1, running on the Linux machine [Figure 1.3 (2)], continuously monitors Shared storage
1, and queues a new liver segmentation job as soon as it detects a new CT scan. Script 2,
running also on the Linux machine, manages the new segmentation results: as soon as a
new segmentation result is available it copies it in DICOM format on Shared storage 2 for
classic visualization, starts the ﬁle conversion and copying procedure towards the Unity
engine format, and optionally sends an update email to interested parties that a new
segmentation result is available on Shared storage 2. Shared storage 1 and Shared storage

4

CHAPTER 1.

INTRODUCTION

2 can use the same physical hardware. Further, a 3D volumetric image rendering server
based on the Unity game engine and running on the Windows 10 machine [Figure 1.3
(3)] powered by one or more high-end NVIDIA GPUs connected in SLI, renders the 3D
volumetric image liver segmentation, encodes the video frames and sends them, through
the 5Ghz 802.11ac router, towards the HoloLens Client for visualization and manipula-
tion as a mixed reality 3D volumetric image. Through the UI, the user can browse, load
or unload for visualization the liver segmentations already prepared in Unity format on
Shared storage 2 by the Script 2 running on the Linux machine.

The advantage of having two dedicated machines is twofold: as both the 3D visualiza-
tion and the medical volumetric image segmentation using a CNN are resource-intensive,
the visualization performance will not be aﬀected by a (possibly overlapping) running
segmentation (ensure no hardware resource sharing), and also, the machine learning
works at its best on Linux. Our experiments have also shown that for best latency, the
router should be a model capable of running in the 802.11ac WiFi standard at 5Ghz,
and channel bandwidth should be set as large as possible (we used 80Mhz).

In Chapter 2 we review the State of the Art in the ﬁeld, to detail in Chapter 2.2.3 why
we chose the Microsoft HoloLens for the 3D visualization, and in the following Chapters
we explain how we used the solutions stated above to achieve the desired outcomes.

1.2 Work Packages

As already discussed, the overall goal of the project is to present the end-user (medical
staﬀ) with an intuitive and high-value 3D visualization inside their headsets, that does
not need human intervention for the segmentation. The Microsoft HoloLens headset
has been selected because, especially in situations where several surgeons and medical
staﬀ are interacting in stressful situations with strict hygiene constraints, the use of this
lightweight AR device needing no controllers could be beneﬁcial, as it could provide new
ways of interacting with the imagery and analysis during the situation.

1.2.1 WP1

The aim is to build a fully automated pipeline, using a modular and thus scalable
frontend-backend architecture, that should deliver real-time visualizations to multiple
AR or VR headsets. A number of elements are needed in this context:

• A modular backend architecture deployed in a (CUDA based) GPU architecture;
• Input ﬁle types must include DICOM as well as ultrasound industry-standard ﬁles;
• Output ﬁles should be optimized for visualization on the Unity game engine;
• UI and volumetric (or equivalent) rendering in a Unity-based executable;
• The executable needs to include basic volume information of the region of interest,

needed for medical decision making;

• Multiple headsets should be able to view the same 3D objects at the same time,
with an option for shared cooperative visualization (a few clients seeing the same
thing at the same time) and marking/pointing;

• The architecture needs to be low-latency and should oﬄoad a maximum of pro-
cessing to the backend in order to be light on the low-resource headsets, in the case
of the HoloLens headset.

1.2. WORK PACKAGES

1.2.2 WP2

5

After the acquisition of CT or ultrasound images and their deposit on the backend,
they should be segmented without human intervention. The inference process and the
subsequent transformation/conversion of the ﬁle should be near-real-time (under 60 sec-
onds). Signiﬁcant progress has been achieved in the domain, through the usage of state
of the art machine learning algorithms. For this, WP2 needs to achieve these complex
targets:

• Human equivalent ML-based image segmentation of an organ in CT imagery;
• Calculate the volumetric data of the segmented organ;
• Anatomical feature segmentation inside the organ (i.e.arteries) or region of interest;
• Clean-up of intraoperative ultra-sound imagery, identiﬁcation of features based on

the region of interest identiﬁed in the CT image.

The last point, possibly the most complex to implement, could increase the situational
awareness of medical staﬀ in intra-operative situations by simplifying the analysis of
ultrasound imagery.

6

CHAPTER 1.

INTRODUCTION

Chapter 2

State of the Art

This chapter contains a presentation and review of the current state of the art in the
ﬁelds of machine learning, augmented reality and virtual reality, which is then narrowed
down more speciﬁcally to their current development and utilization in the ﬁeld of medical
imaging.

2.1 Machine learning

The ﬁeld of Machine Learning (ML) is part of the larger ﬁeld of Artiﬁcial Intelligence
(AI) [12]. The term "machine learning’ was apparently ﬁrst introduced by Mr. Arthur
Samuels, an American scientist, in 1959. He deﬁned it as a “computer’s ability to learn
without being explicitly programmed” [13]. Machine learning receives data and processes
it in order to make predictions. The machine learns as it interacts with new data,
situations and as it checks its prediction against some given example outputs. More
formally, ML algorithms learn a target function f that best maps input variables x to
an output variable y: y = f (x).

There are four types of machine learning algorithms: supervised, unsupervised, semi-

supervised, and reinforcement learning:

In supervised learning, the machine is "taught by example". The algorithm is
given a set of possible real-life inputs and outputs, and it should learn how to correctly
answer a similar input, never seen before. While the human supervisor already knows
the correct answers (has labeled the data set), from the examples it sees, the model has
to make connections and patterns in order to be able to answer new queries. The model
produces its own predictions and is corrected using the data labeling given by the human
supervisor; the process continues until the model learns enough to reach the desired goals
and performance. Ex.: The K-Nearest-Neighbor algorithm estimates how likely a data
point is to be a member of one group or another [14]. It checks the data points around a
given point in order to determine to which group the given point is most likely to belong
to. If the majority of the neighboring points are in the "circle" class, for example, it
is likely that the point of interest is in the same class. In fact, "supervised learning"
includes multiple categories:

• Classiﬁcation: In classiﬁcation tasks, the algorithm should infer a conclusion from
the examples given and further it should be able to determine to which categories
the new inputs belong. For example, when deciding if a given transaction is legiti-
mate, the algorithm should check the examples which it already has been provided
with, and take a decision according to these. Ex.: Naive Bayes Classiﬁer [15,
p. 488], based on Bayes’ theorem, classiﬁes every value as independent of any other

7

8

CHAPTER 2. STATE OF THE ART

value. It allows predicting a class/category, based on a given set of features, using
probability. Support Vector Machines [16] analyze data used for classiﬁcation and
regression analysis. They ﬁlter data into categories, by providing a set of train-
ing examples, each marked as belonging to one or the other of the two categories.
Afterwards, a model that assigns new values to one category or the other is built.
Logistic regression [17] focuses on estimating the probability of an event to oc-
cur, based on the previous data provided. It is used to cover a binary dependent
variable, where only two values, 0 or 1 are possible outcomes.

• Regression: In regression tasks, the algorithm should estimate the relationship be-
tween variables. Regression analysis studies the relation between one dependent
variable and some set of changing variables, which makes it valuable for tasks such
as prediction or forecasting. Ex.: Linear Regression [18], which allows understand-
ing the relationship between multiple continuous variables.
Other examples of classiﬁcation and regression are "Decision Trees" [19,20] - which
can be seen as a diagram with a tree structure that uses branching in order to repre-
sent all possible outcomes of a given problem, and "Random Forests" [21–23] which
is an "ensemble learning" method, and combines multiple algorithms in order to
generate better results for tasks such as classiﬁcation or regression. Alone, each
classiﬁer is "weak", but put together, they are able to produce better results.

• Forecasting, which is the process of making predictions based on the past and

present data. It is used often for trends analysis.

In the case of unsupervised learning, the machine learning algorithm indepen-
dently studies the data to identify patterns, without any answers or instructions provided.
The algorithm identiﬁes correlations and draws conclusions automatically, by analyzing
the provided data. In the case of unsupervised learning, the computer algorithm inter-
prets the data sets and processes the data as needed. The algorithm tries to organize
the data in some way to describe its structure. This might involve data clustering or ar-
ranging it in a more organized way. As it continues to process more data, the algorithm
improves its correct decision-making ability and becomes more reﬁned. The following
most common categories can be identiﬁed:

• Clustering, which involves grouping sets of similar data (based on deﬁned crite-
ria). It’s useful for segmenting data into several groups and performing analysis on
each data set to ﬁnd patterns. Ex.: K-Means Clustering [24], used to categorize
unlabeled data, i.e. data without deﬁned categories or groups. It works by ﬁnding
groups within the data, with K representing the number of groups. The algorithm
performs successive iterations with the goal to assign each data point to one of the
K groups based on the features provided.

• Dimensionality reduction algorithms, such as the Principal Component Analysis
(PCA) [25] reduce the number of variables being considered, in order to ﬁnd some
exact information required.

Semi-supervised learning is similar to supervised learning, with the diﬀerence that
it makes use of both labeled and unlabeled data. Labeled data is information that has
some meaningful tags attached, such that the algorithm can interpret it, while unlabeled
data is missing such tags. This way, machine learning algorithms can learn to label data.
Reinforcement learning (RL) draws inspiration from "behaviorist" psychology,
and is concerned with how software should act in a given environment so as to maximize
some reward. Using as input some parameters, output values and possible actions, the
algorithm must try diﬀerent options and possibilities and evaluate possible results, by

2.1. MACHINE LEARNING

9

means of deﬁning some rules, in order to ﬁnd the best solution. Reinforcement learning
is based on the concept of learning by trial and error. It learns from experience and tries
to adapt according to the given situation, in order to achieve the best possible result.

An overview of the classiﬁcation of machine learning algorithms is illustrated in Figure

2.1.

Figure 2.1: Machine learning algorithms.

2.1.1 Artiﬁcial neural networks

Artiﬁcial neural networks (ANN) [26–28] are an important exponent of supervised
learning. They are made of "units" arranged in layers, each of which being connected
to other layers on its sides. ANNs are inspired by biological systems, such as the brain,
and are in fact a large number of interconnected processing elements, working together
to solve some given problem. ANNs are learning by example or through experience, and
are most useful for tasks such as modeling non-linear relationships in high-dimensional
data or where the variables’ relationship is very complex.

There are diﬀerent variants of ANNs, such as deep multilayer perceptron (MLP),
convolutional neural network (CNN), recursive neural network (RNN), recurrent neu-
ral network (RNN), long short-term memory (LSTM), sequence-to-sequence model, and
shallow neural networks.

In the case of supervised learning, deep Convolutional Neural Networks (CNNs) have
greatly increased in the recent years the accuracy of the computer vision algorithms for
segmentation and detection. Description of features has been a long-standing issue in
machine learning. It has become easier to train algorithms that can recognize optical
features in highly diverse sets of images with acceptable error rates, often similar to hu-

10

CHAPTER 2. STATE OF THE ART

man rates, or better. Starting with AlexNet [29], the proposed solutions have improved.
VGGNet [30] and ResNet [31] are between the best of today. VGGNet is built of con-
volutional stages with pooling layers which decrease the resolution of the feature maps
and increase the neurons’ receptive ﬁeld. The deep network layers learn coarse features
and the local features are learned by the beginning layers. In order to solve the gradient
vanishing problem ResNet shortcuts each layer, creating thus a better gradient ﬂow. For
computer vision, excepting image classiﬁcation, deep learning is also used for tasks like
segmentation or boundary detection [32, 33]. Dense predictions solutions are using Fully
Convolutional Networks [34], as depicted in Figure 2.2.

Figure 2.2: Fully connected networks [34].

While CNNs used for Image Recognition include convolutional, pooling and fully
connected layers, FCNs use just convolutional and pooling layers, and are thus able,
with just one forward pass, to produce segmentation maps for all sizes of inputs. There
are two main possibilities to output the initial resolution:

• An expanding path consisting of deconvolutional or unpooling layers, which recov-
ers spatial information by using features from diﬀerent levels of the contracting
path. As such, important low-level details can be preserved.

• Use of dilated convolutions [35] to increment the ﬁeld of view, and thus preserving

a higher features’ resolution in the network.

2.1.2 Machine learning for medical imaging

Under the machine learning umbrella there is a set of highly diverse algorithms. How-
ever, some techniques have proven to be more useful for medical imaging than others [36].
Some research cases have focused on techniques like clustering algorithms (e.g. nearest
neighbors) or support vector machine algorithms [37], while others have investigated deep
neural networks [38–49].

In regards to liver and lesion segmentation, lastly, most methods are based on sta-
tistical shape and intensity distribution models [50]. In [51], the authors argue that the
statistical shape methods have the disadvantage that the resulting model may be too
constraining if a patient’s liver shape is not adequately represented in the training data.
This may result in limited application to pathological or post-operative livers. Other
approaches rely on classiﬁers and low-level segmentation [52], by using a ﬁrst stage for
organ detection and "active contours" in a second stage for segmenting the lesion. Sup-
port vector machines (SVMs) and random forests approaches, although having a higher

2.1. MACHINE LEARNING

11

discriminative power than the intensity based techniques, can lead to coarse segmenta-
tion and leakage [51].

Because of the ﬂexibility and complexity of the learned features, neural networks, in
their diﬀerent ﬂavors, empirically hold the most potential to infer high-level features in
many computer vision tasks with acceptable error rates. Because they are robust to im-
age variation, which allows building automatic segmentation, deep CNNs have recently
been proven successful for these tasks. This technique allows for the segmentation of
heterogeneous livers obtained using diﬀerent scanners and protocols in under 100 sec-
onds [51]. The initial segmentation of a region of interest (ROI), such as an organ or
a structure like bone, in a medical image, is a use case investigated by a large number
of papers but identifying pathologies or other features (i.e. the vascular system of an
organ) in this segmented ROI is a second interesting use-case.

DRIU [7], the basis of the model presented here, was intended to segment the opti-
cal disc and blood vessels of the eye. The Fully Convolutional Network (FCN) used by
DRIU has side outputs with supervision at diﬀerent convolution stages [11]. The output
is obtained by combining the multi scale side outputs.

In the medical domain, such algorithms have been used to detect anatomical features
or lesions on every possible scale, from the microscopic level upwards. Some challenging
characteristics for training CNNs like the imbalance of the labels for the data, require
some modiﬁcations of the classic approaches though [53, 54].

The medical images, presented in the form of 3D volumes, can be processed using

several methods:

• Using 2D FCNs: DRIU [7], U-net [55] or DCAN [56]. They independently consider
each slice of the volume, to provide in the end the segmentation of the 3D volume
by concatenating the 2D results. They have a disadvantage at spatial correlation
on the z-axis.

• Implementing a 3D-convolutional network - to utilize the 3D characteristic of the
data, or a hybrid one (2D and 3D convolutions) [57]. In [58], Çiçek et al. trans-
form the 2D U-net architecture into a 3D-Unet which inputs 3D volumes and
processes them with similar 3D operations like 3D convolutions, max-pooling, and
up-convolutional layers. The 3D networks face the challenge of high computational
costs.

• Combine several tri-planar schemes, as explained in [59]. These apply three 2D
convolutional networks based on orthogonal planes in order to classify the 3D pixel
(voxel).

• Capture the volume information using Recurrent Neural Networks (RNNs) [60]. A
3D medical image is usually a sequence of 2D images, and RNNs are eﬀective at
processing sequential data.

Concerning liver segmentation, [61] builds 3D Fully Connected Networks and adds
Conditional Random Fields as a post processing step, while [62] proposes 3D CNNs with
a Graph Cut. Some approaches train two FCNs: the ﬁrst processes the liver, while the
second uses the liver mask for a better lesion segmentation [63]. Using the formulation
by [16], they also add a 3D-CRF post-processing step in order to obtain spatial coherence
in all the dimensions of the 3D input image.

The best model from the 2017 LiTS challenge [64] trained from scratch a 2.5D DCNN
having a set of adjacent channels as input, and using long and short range residual blocks
connections. First, they train a network that outputs the approximate liver location and
then they introduce 3D connected component labeling as a post-processing step.

Deep learning (a 2D U-net architecture) together with a regular classiﬁer (random

12

CHAPTER 2. STATE OF THE ART

forest) have also been used by [65]. They ﬁrst perform the liver segmentation with an
ensemble of CNNs. Second, the lesion segmentation is performed on a dedicated network
followed by connected components. In the end a forest classiﬁer ﬁlters the false positives.
A residual network, which creates a cascaded architecture gradually improving on the
segmentation from the previous step, has also been proposed by [66].

While the training period of deep neural networks for liver segmentation using a large
set of images (e.g. for n=100, data size reaches 50Gb) can be time-intensive (depending
on computational resources), the time necessary for the actual usage (inference) of the
algorithm on an image that was not seen before by the network is nearly instant (typi-
cally under 60 seconds, depending on the model). The duration of the training period is
a limiting factor for experimentation as it takes longer to try out diﬀerent possibilities,
but it can be radically shortened by using dedicated hardware (for instance clusters of
GPUs).

2.2 Medical imaging

In 2015, the United States alone spent 17% of its gross domestic product (GDP)
on healthcare, out of which approximately 3% of the GDP includes costs related to
surgery [67]. As such, there is strong motivation to increase the eﬃciency in the operation
rooms in order to both improve patient care and decrease cost. In this section we will
review the state of the current equipment and visualization methods, to ﬁnally show
that augmented reality (AR) and virtual reality (VR) can help increase eﬃciency and
eﬀectiveness, by improving pre-planning and intra-operative surgery [6].

2.2.1 Current medical imaging equipment

The medical imaging equipment can generate 2D images (radiographs) as well as 3D
volumetric images datasets. Examples of 3D imaging systems are computed tomography
(CT), magnetic resonance imaging (MRI), and positron emission tomography (PET).

In the case of the CT scans, the data is stored in "Digital Imaging and COmmuni-
cation in Medicine" (DICOM) ﬁle format where a regular matrix for a CT is 512 by 512
pixels. In a 2D plane, a pixel has one length in the x direction and one length on the
y direction. By adding a third dimension to the pixel, a 3D volume object is created,
which is called a voxel. Each pixel has a gray scale value called a Hounsﬁeld Unit (HU),
which in medical imaging is a function of tissue composition. For example the water’s
HU is zero, and soft tissue like the brain, kidney, muscle has an HU between 30 and 40.
Bones can have an HU of 400 while air (less dense than water) has -1000.

The radiologists perform a task named “windowing and leveling” which means they
set the window “level” and window “width”. An example is depicted in Figure 2.3. The
"window level” is the HU value for representing mid-grays. The “width” is the range of
gray values where everything larger or smaller than the "width" is displayed in black or
white. Also for the case of magnetic resonance imaging (MRI), continuous planar
images can be stacked and axial (head - toes), sagittal (left-right) and coronal (chest to
back) reformats can be reconstructed. An MRI scan is similar to a CT scan in matrix
size and pixel gray scale values. Unlike CT, MRI can produce very good contrast resolu-
tion between tissues of similar density and thus can diagnose some injuries which remain

2.2. MEDICAL IMAGING

13

Figure 2.3: Axial head CT in “bone window” (A) and “brain window” (B) [67].

hidden on CT scans. MRI scans take longer than CTs to acquire, and sometimes the
patient’s breathing can make it diﬃcult to acquire a good quality scan.

2.2.2 Current medical data visualization methods

Current methods for visualization of medical data include the conventional view-
ing of the volumetric data which is a slice-by-slice viewing method for axial, sagittal
and coronal imaging planes or sometimes oblique reformats [67], as shown in Figure 2.4.

Figure 2.4: MRI brain scan: axial (A), coronal (B) and sagittal (C) images [67].

Challenges involved by conventional viewing of the volumetric data include the chal-
lenge of information overload which comes from the volume of the generated datasets. A
second challenge is detecting small lesions, where a very detailed slice by slice analysis
will take considerable time. Also, there is the challenge of mentally building a 3D image
by reviewing slices [68–70].

Surface rendering is the ﬁrst 3D rendering method used for displaying 3D med-
ical images [67, 71]. The surfaces are displayed using segmentation techniques such as
thresholding which helps to select only the designated pixels. A virtual light provides
surface shading. This method allows presenting only a single surface, which results in the
relative advantage of no overlapping tissues. This becomes a limitation, though, when
trying to understand the relationships between multiple organ systems. Also, many or-
gans have similar density with the surroundings and as such, they can be diﬃcult to

14

CHAPTER 2. STATE OF THE ART

separate. Lastly, true depth perception can not be achieved on 2D displays.

Figure 2.5: Comparison between volume rendering (A) and surface rendering (B) [72].

Volume rendering [73, 74] helps visualize complex 3d images. Using a transfer
function, diﬀerent body structures with diﬀerent pixel intensity values can be displayed
with diﬀerent color and intensity, for example, blood vessel voxels can receive one color
and voxels corresponding to bone density can receive a diﬀerent color. In the case of
overlapping structures, this display method is limited when used on 2D displays [75, 76].
A visual comparison between the volume rendering and surface rendering techniques

is presented in Figure 2.5.

The above stated limitation can be minimized using depth 3 dimensional (D3D)
imaging, i.e. displaying stereo 3D images on AR, MR or VR headsets. D3D transforms
and displays cross sectional images on AR and VR headsets. This involves a rendering
engine heavily reliant on the GPU, which generates diﬀerent left and right eye views to
provide a true 3D visualization on the MR or VR HMDs. The rendering engine also pro-
vides some maneuverability possibilities to the user such as moving the viewing position,
rotate or scale. The controller can be hardware such as an Xbox gamepad controller, or
for example in the case of HoloLens, voice and hand gestures.

2.2.3 AR, VR and MR in medical imaging

AR and VR provide enhanced viewing including depth perception and improved
human machine interface (HMI) [12, 13]. AR, mixed reality (MR) and VR head mounted
displays (HMDs) present a unique image for each eye, thus achieving stereoscopy and
depth perception.

Virtual reality has been used to create an immersive and interactive environment.
Virtual Reality (VR) can be full, semi, or non immersive [2]. Full immersive VR (ex.
Oculus Rift and HTC Vive, illustrated in Figure 2.6) displays a virtual image while the
real surroundings are excluded from view [3].

Semi immersive VR (ex. Samsung Gear VR) displays the virtual image while the
real world is partially occluded from view [3]. An example of non-immersive VR is a
desktop computer. VR users can navigate through the virtual world by head movement,
using the HMD tracking or by walking (using external camera tracking). Other ways of
interaction with the virtual environment can be voice, gestures or hardware controllers.
Diﬀerent visualization and interaction techniques have been developed: The Univer-
sity of Basel has developed the "SpectoVive" VR medical visualizations project, illus-
trated in Figure 2.7, which uses a hardware controller and places the user in a dedicated

2.2. MEDICAL IMAGING

15

Figure 2.6: HTC Vive (left) and Oculus Rift (right). a

aSources: https://www.vive.com/eu/ (left); https://www.oculus.com/ (right).

virtual room [5], while in the US, the "DICOM VR" [77] has been developed; however
both projects have some limitations such as the hardware controller and full immersion
(can not be used during live interventions for reasons of hygiene and surroundings aware-
ness).

The limitation of current software and VR systems in medicine comes mainly from

Figure 2.7: SpectoVive - University of Basel.a

aSource:
Medicine.html

https://www.unibas.ch/en/News-Events/News/Uni-Research/Virtual-Reality-in-

the user’s concern towards the surrounding physical world instead of the virtual world.
AR overcomes these by providing a simple and immediate user interface (UI) on top of
the electronically enhanced physical world.

Augmented reality (AR) is divided into AR systems and Mixed Reality (MR)
systems.
In AR and MR, the user wears an HMD which simultaneously displays the
virtual image and the real user environment [71, 78]. In the case of medical applications,
when pre-planning, intraoperative procedures, or a physical examination requiring med-
ical imaging are needed, the real world image can be the actual patient’s body.

As the AR and MR domains are relatively new and the features specter is relatively

16

CHAPTER 2. STATE OF THE ART

continuous, we could not ﬁnd a formal deﬁnition of where the AR stops and MR starts.
Depending on how much we want to strengthen the deﬁnition requirements, the bound-
ary can move between AR and MR. Generally, AR systems "augment" the reality by
overlaying an image such as for example some information regarding address, name or
height of some real world object. The overlayed image is not spatially anchored (changes
position as we maneuver in the real world) and it can be two dimensional. In MR, the
real and virtual worlds are blended and mixed together in order to blur as much as
possible the boundaries between the real-word and the virtual world: the virtual image
is generally three dimensional and carries properties of real objects (position, rotation,
speed; seems aﬀected by gravity; collides with and is visually occluded by real-world
objects; the user can interact with the virtual object and change its position or visual
appearance). Probably by strengthening this model’s requirements, the authors of [79]
also argue that in AR, the virtual image is transparent like a hologram, while in MR it
looks solid, a deﬁnition which makes Meta and DAQRI examples of AR systems, while
Microsoft HoloLens would be an MR example. We think we can however safely state
that at this moment Microsoft HoloLens carries the most MR features: objects are 3
dimensional, look solid, are anchored in space, can be interacted with by voice and ges-
tures, can "collide" with the real world, can be visually occluded by objects in the real
world, the experience can be shared, the user can freely move in the real world as there
are no cables or other devices attached or required by the system, and more.

Meta [80], presented in Figure 2.8(a), is a tethered HMD, i.e. it needs to be connected
to a PC through a physical cable and is conceived to work in a stationary context which
means the user can’t walk around in the real world environment while wearing it. This
limitation determined us to exclude it for this project, although it has a far larger FOV
than HoloLens, and it can directly leverage the PC’s computing power.

Figure 2.8: HoloLens’ competitors: Meta (a), Daqri Helmet (b) and Daqri Glasses (c).a

aSources: http://www.metavision.com/ (a); https://daqri.com/blog/a-look-ahead-at-hannover-

messe/ (b, c).

DAQRI models, illustrated in Figure 2.8(b, c) were conceived mostly for an indus-
trial environment usage and were eliminated for physical characteristics improper for our
project (either helmet or using a cable) and because they provide only gazing as a control
option (no hand gestures for example). It was also argued that the Daqri Helmet was
presenting some tracking problems [81]. We are not aware if collaborative synchroniza-
tion has been implemented yet, or if the new 2018 Daqri glasses model fares better than
HoloLens in regards to tracking performance, however, the Daqri glasses are unsuitable
for our scenario as the headset makes use of an external mini-computer weared on the
hip and connected through a cable.

Through HoloLens, the user can view the virtual image and interact with the real
world scene at the same time. HoloAnatomy is an interesting HoloLens medical applica-

2.2. MEDICAL IMAGING

17

tion, which however displays only 3D Models (surface-rendered hollow objects, and not
volumetric images), and does not oﬀer the possibility for manipulation [82].

One more notable example of using AR or VR in medicine is EchoPixel, which pro-
poses an interesting holographic solution, although with the limitation that it can not
be used during a live situation due to the visualization method and hardware controller
used [83].

One of the most advanced HoloLens systems for medical imaging has been built
by NOVARAD, see Figure 2.9, in the USA. Their product renders patients’ medical im-
ages (CTs, MRIs) in 3D and presents them in an interactive manner, also giving medical
personnel the possibility to interact with the imaging data as well as see it displayed in
the anatomically correct location on the patient.

Figure 2.9: NOVARAD.a

aSource: https://vimeo.com/223168345

The advantages of AR and VR over traditional medical imaging display methods are:

• True depth perception, which considerably improves the diagnostician’s interpre-

tation [84];

• The 3D characteristic, which subsequently provides the possibility of adding novel
user interface (UI) and tools [71] like for example 3D cursors and markers, and
an overall increased eﬃciency in processing high amounts of information (patient
data);

• Introduces the possibility of improved human control [84] interface capabilities like
motion tracking (the scene camera view angle and position updates with head move-
ment and rotation) [71], use of more ergonomic controllers inspired from gaming,
or even voice and gestures which would provide a complete hygienic environment
in the case of live intra-operative situations. We explore the voice and haptic inter-
action in surgical settings which would allow the medical images to be viewed and
manipulated without contact by making use of the HoloLens’ gesture recognition
capability;

• In the case of MR (ex: HoloLens), the possibility of co-registration of the medical
image to the real patient’s image gives the impression of seeing into the patient,
creating a live perception of the medical image inside the patient [84]. This allows
better precision of surgeon’s intervention, as seen in Figure 2.9.

18

CHAPTER 2. STATE OF THE ART

Also, there are still some challenges faced by AR and VR in the medical imaging area:

• The perception of structures overlapping in the image is reduced but not eliminated

[71];

• Only light headsets stand a chance of being accepted into the operations room

(HoloLens may still be considered somewhat bulky and heavy) [71];

• Motion sickness is still a potential problem which can hamper the medical person-

nel’s capacity to best performing the medical act [71];

• The HoloLens, being still an early product, has a limited ﬁeld of view (FOV), which
forces the user to turn his head (possibly away from a live surgical intervention) if
the displayed image is outside FOV [84];

• The HoloLens tinted visor that covers the display dampens the ambient light and

decreases the eﬃcacy of other potential diagnostic monitors involved [84].

Despite the inherent challenges faced by any new technology, AR and VR will continue
to develop to ﬁnally put their footprints into real life, including the medical industry. If
augmented by the PC’s computing power, we believe that at this time HoloLens oﬀers
the best mix of advantages and disadvantages for the medical visualizations usage.

Summarizing, for our project’s use-case, we prefer HoloLens over other devices for
reasons like: surroundings awareness; good tracking (low latency and nosea); the multiple
input methods oﬀered (voice, gestures, gaze) while not requiring any input hardware
device (the best answer to-date to the strict hygiene requirements in the operations
rooms); no cables or other devices attached or needed, which could hamper the doctor’s
movements; relatively lightweight; the possibility of sharing (multiple users viewing in
the same time the same content), and support from Microsoft.

We aim to combine the advantages of MR, in particular the Microsoft HoloLens HMD,
with volumetric image segmentation and rendering, in order to advance this technology
closer to the live operation rooms.

Chapter 3

Medical Image Segmentation

In regards to the medical image segmentation project requirement, we started with
a liver segmentation method based on the K-means clustering algorithm, and written
in python. Because the results achieved were not satisfactory due to the algorithm’s
limitations (lack of context) towards performing almost real-time and without human
intervention a medical image semantic segmentation of body organs such as the liver, we
investigated a more complex approach, using ANN solutions.

3.1 The K-means clustering algorithm

Clustering is one of the most important unsupervised learning problems, which in-
volves the grouping, or clustering, of data points. Given a set of data points, a clustering
algorithm classiﬁes each data point into a speciﬁc group. A cluster is a group of objects
which are “similar” between them and diﬀerent from the objects from other clusters. In
the given case, the similarity is measured in terms of intensity level similarity between
the voxels in the image. The K-means algorithm doesn’t involve any objective or loss
function.

We have experimented with diﬀerent values for the ”K” parameter: K = 3 seemed
to be too small as it could not separate a minimum of the required relevant features in
the image, while starting with K = 5, the result image started to be too fragmented
feature-wise. The 2D result for K = 4 is presented in Figure 3.1. We also tried this
algorithm in 3D on a CT volume for K = 4, as shown in Figure 3.2.

As it can be seen in the Figures 3.1 and 3.2, because the algorithm uses the pixels’ or

Figure 3.1: K-means: the initial image (left) and the result for K = 4 (right).

19

20

CHAPTER 3. MEDICAL IMAGE SEGMENTATION

voxel’s luminance levels to decide to which class each pixel belongs, and because multiple
anatomical structures can have similar HU levels, this algorithm can not be used as such
for the task of liver segmentation without any human intervention.

While some approaches to perform the liver segmentation using the K-means algo-
rithm exist in the literature, they still require some minimal human intervention [85] or
excessive computational power [86], and consequently we had to explore more advanced
solutions like a deep learning algorithm.

Figure 3.2: 3D K-means: the result for K = 4 (fourth color is white).

3.2 The deep-learning algorithm

The deep learning model used [11] is based on the Deep Retinal Image Understanding
(DRIU) network [7], a model which performs the segmentation of the eye’s blood vessels
and optical disc. An overview of DRIU is presented in Figure 3.3. After extracting side
features, DRIU builds special layers for the segmentation of arteries (left) and optical
disc segmentation (right). Using convolutions, activation functions and max poolings,
the architecture is itself inspired from VGG-16 [30]. As such, the base network is VGG-
16 pretrained with Imagenet [87] and is made of convolutional stages which activate at
same feature map resolution and are separated by pooling layers. At deeper levels, the
information is more general and the learned features are closer to semantics [11]. Being

3.2. THE DEEP-LEARNING ALGORITHM

21

ﬁne structures, the blood vessels beneﬁt from the less deep layers, where the information
is more granular. In the same time, the optic disc is advantaged by the deeper layers
and more general features. Thus, DRIU uses several side outputs (convolutional layers
connected at the end of a speciﬁc convolutional stage of the base network) specialized
in diﬀerent feature levels and the output is obtained by scaling and combining the side
outputs.

Figure 3.3: DRIU overview [7].

3.2.1 Deep learning algorithm architecture

Being inspired from DRIU, the algorithm presented uses side outputs after each con-
volutional stage, all contributing to the ﬁnal output. As the algorithm performs also
lesion segmentation, the general architecture comprises multiple modules: liver segmen-
tation, ROI cropping, lesion detector, lesion segmentation. An overview of the general
architecture is presented in Figure 3.4, and a detail of the liver segmentation architecture
is presented in Figure 3.5. The lesion segmentation architecture starts from the same
architecture used for liver segmentation, with diﬀerent added enhancements.

The most important aspects of the algorithm are:

• Pre-processing;
• Binary cross entropy loss weighting (for lesion segmentation);
• Using 3 consecutive slices as input;
• Post-processing (3D CRF).

3.2.2 Pre-processing

The pixel intensities on the LiTS liver scans can have values exceeding |1000|. Many
pixels with value -1024 belong to the background. Pre processing consists in clipping the
pixels intensities values at min-max values that statistically belong to the liver and liver
lesions (range -150 to 250). Afterwards, a min-max normalization is performed on each
volume:

zi =

xi − min(x)
max(x) − min(x)

,

which means we map the range between the old min and max values to the new range
between the new min and max values (-150, 250).

22

CHAPTER 3. MEDICAL IMAGE SEGMENTATION

Figure 3.4: General algorithm overview: after the liver segmentation (1), the segmented
volume is cropped slice by slice around the liver ROI (2, green box). The resulting
smaller liver segmentation volume is fed to both the lesion segmentation network (3)
and the lesion detector (4). In the end, the output predicted by the lesion segmentation
network is compared with the lesion detector’s output, and only if both agree, the lesion
localization is kept. Some elements in this ﬁgure are from [11].

Figure 3.5: Liver segmentation architecture [11].

3.2.3 Loss objective

The loss objective is deﬁned using the Binary Cross Entropy (BCE) loss [88]:

L(y, ˆy) = −y log ˆy − (1 − y) log(1 − ˆy),

where y is the actual truth and ˆy is the predicted value. The BCE provides a per pixel,
individual loss, allowing to distinguish from losses coming from positive or negative truth
pixels. As such, the positive and negative loss can be balanced separately.

3.2.4

Input multiple 2D slices to take advantage of 3D data

Originally the algorithm parsed the data as if the slices were independent, while in
fact they have a strong 3D coherence. Also, the algorithm was pretrained with Imagenet,
and it uses 3 channel images for training - RGB (Red, Green, Blue). Hence, as shown
in Figure 3.6, the three channels can be fed simultaneously three slices of the volume
analyzed, one at each RGB channel (2.5D approach), while during testing only the central
output slice is kept. Figure 3.6 refers to the liver segmentation, but the approach is the
same for the lesion segmentation network.

3.2. THE DEEP-LEARNING ALGORITHM

23

Figure 3.6: Input uses a series of three consecutive slices. For the test, only the middle
output image is used.

3.2.5 ROI cropping

After the liver segmentation, the outputted volume is fed to the ROI cropping, where
the liver segmentation volume is cropped slice by slice around the liver ROI, as shown
in Figure 3.4, module 2. The resulting smaller volume is afterwards used as input for
the lesion detector and the lesion segmentation modules. The number of positive pixels
in each slice of the predicted liver masks resembles a Gaussian, so after a ﬁtting of
a Gaussian, a mean and variance are computed. The ﬁtting is used to remove false
positives, as all images outside a certain threshold are not likely to contain any lesion.
As such, a signiﬁcant number of false positives is removed, at the expense of a few false
negatives.

3.2.6 Using the liver segmentation for the lesion segmentation

The liver segmentation is used in the process of lesion segmentation as a mask which
limits back-propagation only to those pixels which belong to the liver segmented ROI.
This way, only those pixels which can belong to the liver are used for the lesion segmen-
tation learning process, and also, the process is more balanced as there are less negative
pixels in the image. For this stage, the balancing term includes just the pixels contained
inside the liver. This process is illustrated in Figure 3.4 (module 3 - right).

The possible disadvantage of this approach is that if the liver segmentation is not of

good quality, this will negatively aﬀect also the process of lesion segmentation.

Masking

As depicted in Figure 3.4, to perform the lesion segmentation, only those pixels
predicted as belonging to the liver are considered. This improves the detection accuracy
at the expense that if there is a mistake in the liver segmentation , this will propagate.

3.2.7 Lesion detector module

Because as such, the original algorithm was not able to consider a global view when
performing lesion segmentation, false positives were triggered too often. In order to help
the architecture to get a more general context, a lesion detector was added.

The diﬀerence between segmentation and detection is that image semantic segmenta-
tion classiﬁes each pixel of the image as belonging to one class or another, while detection
searches for some object (dog, car, lesion, smile) and localizes it generally with a bound-
ing box. This is illustrated in Figure 3.7.

24

CHAPTER 3. MEDICAL IMAGE SEGMENTATION

Figure 3.7: Segmentation vs detection. a

aSource: https://luozm.github.io/cv-tasks

The detector was added in order to know, from a more global point of view, in which
parts of the image there is actually a lesion. Then, the segmentation result is compared
with the detector result, and only those locations where the results are in sync are kept.

The detector works as a sliding window, placing bounding boxes over the areas where
it predicts a lesion. The window is 50x50 pixels, with a margin of 15 for more context,
resulting in an overall size of 80x80 pixels. As illustrated in Figure 3.8, a box is placed
if it overlaps with the liver on at least a 25% area, and it is considered as positive if at
least 50 pixels are considered as lesion pixels.

Figure 3.8: The lesion detector [11].

The lesion detector module is built from the pre-trained ResNet 50 model, with-
out the Imagenet classiﬁcation. Finally, only one neuron is used to take the healthy or
non-healthy decision.

3.2.8

3D - Conditional random ﬁelds

A 3D Fully Connected Conditional Random Field (3D-CRF) is used for ﬁnal process-
ing. CRFs model the conditional distribution of the prediction by taking into account
all the input. The 3D CRF is applied in order to reﬁne the segmentation by taking into
consideration the spatial coherence and also the input volume’s pixels’ intensities [11].
The 3D CRF uses the algorithm from [63].

The 3D CRF model uses as input the soft prediction of the network output and the
pre-processed volume. The implementation is the one from [63], and uses the mathemati-
cal representation proposed by [89], which models a graph G = (ν, ν) with vertices i, j ∈ ν
representing each voxel in the image, and edges ei,j ∈ ε = {(i, j), ∀i, j ∈ ν s.t. i < j}

3.3. EVALUATION

25

between all the graph’s vertices.

The energy function is represented by Equation 3.1, where x represents each vertex’s

label.

E(x) =

(cid:88)

i∈ν

φi(xi) +

(cid:88)

(i,j)∈ε

φij(xi, xj)

(3.1)

Equation 3.2 represents the unary potentials, where I is the input image’s intensity.

φi(xi) = − log P (xi|I)

(3.2)

Further, the potentials are computed pairwise as depicted in Equation 3.3 [63], where
µ(xi, xj) = 1, with (xi (cid:54)= xj), is the Potts function; pi, pj are the positions; |pi − pj| the
distance between voxels; |Ii, Ij| is the intensity diﬀerence between the color vectors Ii
and Ij, and wpos and wbil represent linear combination weights.

φi(xi, xj) = µ(xi, xj)

wpos exp







(cid:124)

(cid:18)

−

|pi − pj|2
2σ2

pos

(cid:123)(cid:122)
smoothness kernel

(cid:19)

(cid:18)

+ wbil exp

(cid:125)

(cid:124)

−

|pi − pj|2
2σ2
bil
(cid:123)(cid:122)
appearance kernel

−

|Ii − Ij|2
2σ2

int



(cid:19)





(cid:125)

(3.3)

The smoothness kernel removes small isolated regions, while the appearance kernel
is inspired by the observation that nearby pixels with similar color are likely to be in the
same class. The degrees of nearness and similarity are controlled by the parameters σbil
and σint [89].

Using the parameters, the pairwise terms and range can be tuned. Because the size
of the lesions is generally much smaller than the liver, a smaller range is used here for
the 3D CRF post-processing of the liver lesion.

3.3 Evaluation

3.3.1 Dataset: LiTS

The liver dataset used to train the algorithm is obtained from the Liver Tumor
Segmentation challenge (LiTS) [10], opened in 2017 for a ISBI workshop (International
Symposium on Biomedical Imaging Conference). The challenge reopened once more
during 2017, for a MICCAI workshop (Medical Image Computing and Computer Assisted
Interventions Conference). The set consists of 131 CT scan volumes for training and 70
volumes for test. The ﬁle format is Neuroimaging Informatics Technology Initiative
(Nifti), a format usually used for biomedical imaging. The ﬁle extension is ".nii", and
it stores one volume per ﬁle. For encoding and decoding the ﬁle, a Matlab extension
is used. Because each volume consists of multiple slices (74 up to 987 slices for each
volume), the whole set includes in total 58,638 images. Each image is 512x512 pixels.
The 3D image structure is depicted in Figure 3.9.

For the current task, the training set of 131 volumes was split into 80% training

and 20% validation, i.e. 105 training volumes and 26 validation volumes.

26

CHAPTER 3. MEDICAL IMAGE SEGMENTATION

Figure 3.9: Structure of data volumes used (left), and actual 3D visualization (right).

3.3.2 Metrics

The metric used to measure the results is the Dice (or the overlap index), which is
the same as the F1 score. It is the harmonic average of the Precision and Recall, where
an F1 score reaches its best value at 1 (perfect Precision and Recall ) and worst at 0.

F1 = 2 ×

P recision × Recall
P recision + Recall

.

P recision is the number of correct positive results divided by the number of all posi-
tive results returned, and Recall is the number of correct positive results divided by the
number of relevant samples (all who should have been identiﬁed as positive).

The Dice score used is the Dice, which is obtained by averaging the individual dice
scores corresponding to each patient (volume), or the "dice per case". This is also one
of the metrics assessed by the LiTS challenge.

3.3.3 Experiments on the LiTS dataset

The training of the model was performed on a Linux PC and took approximately
6 days on a GTX950M GPU. On a Linux Desktop equipped with a GTX1080 GPU,
training the liver segmentation network took around 30 hours. On a high-end GPU, we
expect this to be accomplished in a matter of hours.

After training, the actual inference of a new segmentation is just a forward propaga-
tion through the network, which can take one or more minutes, depending on the GPU
used. A sample segmentation result is presented in Figure 3.10, where, for reasons of
space, we cropped the image around the liver.

Loss Balancing

In our case, the data imbalance comes from the fact that not all liver scans contain
lesions (most are healthy), and also from the fact that inside the liver, the healthy

3.3. EVALUATION

27

Figure 3.10: Sample liver segmentation result.

(negative) pixels are more than the positive pixels (lesion pixels). Imbalance of data falls
into the general topic of biases in data sets, which is discussed in detail in [90–92]. Because
the negative pixels are the majority, the algorithm risks outputting all the image as
negative, and hence, a new variable, w, is introduced in the BCE formula to compensate
for this:

L(y, ˆy) = −(1 − w)y log ˆy − w(1 − y) log(1 − ˆy).

(3.4)

This is implemented as a general balance factor, taking into account just the positive
samples for each class. This is a global balancing factor and as such, all medical image
volumes participate in the process of learning. Also, the diﬀerent factors take into account

28

CHAPTER 3. MEDICAL IMAGE SEGMENTATION

only those images which contain the class. This is illustrated by the formulas (3.5) [11]:

w(cid:48)

+ =

w(cid:48)

− =

|Positive samples in V|
|Total samples in positive images of V|
|Negative samples in V|
|Total samples in all images of V|
w(cid:48)
+
− + w(cid:48)
+
w(cid:48)
−
− + w(cid:48)
+

w− =

w+ =

w(cid:48)

w(cid:48)

,

,

.

,

(3.5)

Results

The training evolution is somewhat noisy but the network steadily converges, as seen

in the graph presented in Figure 3.11.

Figure 3.11: Liver segmentation: training and validation loss.

For test on the LiTS challenge volumes, the lesion segmentation dice score is 0.586

while for the liver it reaches 0.938.

For comparison, Figure 3.12 and Table 3.1 present the challenge results. The ﬁrst

position was occupied by the Lenovo Research team.

0500010000150002000025000300003500005000100001500020000250000LossTraining stepTraining LossValidation Loss3.3. EVALUATION

29

Figure 3.12: The LiTS challenge results comparison.

Table 3.1: LiTS challenge: lesion and liver segmentation dice scores.

Dice score\Quantile
Lesion
Liver

0.025
0.289
0.043

0.25
0.498
0.927

0.5
0.613
0.943

0.75
0.643
0.959

0.975 Best
0.702
0.699
0.963
0.967

The segmentation times obtained during testing on the two GPUs available are pre-
sented in Table 3.2. Depending on the needs and budget, (after the initial training) a
less powerful GPU can be also used for segmentation.

Table 3.2: The training time for the liver segmentation algorithm, and the average test
time per volume for the two GPUs assessed.

training

GPU\time
GTX950M 135 hours
30 hours
GTX1080

testing
159 sec
35 sec

Data preparation for visualization

For each volumetric image, the output liver segmentation is a folder containing a set
of image slices. At the moment we manually convert the slices to the ".raw" 3D format
for loading and visualization in the Unity game engine using "ImageJ", an external
application (rendering on the Desktop PC Server and visualization on HoloLens).

Lesion segmentationLiver segmentation00.10.20.30.40.50.60.70.80.91Dice score30

CHAPTER 3. MEDICAL IMAGE SEGMENTATION

3.4 Discussion

In this chapter, we have provided and evaluated an algorithm for segmenting the liver.
Our experimentation validates that using the 2.5D algorithm with pre-trained weights is
feasible for our project goal of a near-real-time automatic liver segmentation.

The strategies used by the algorithm which contribute to improving the ﬁnal segmen-
tation results, are: the balancing strategy, the 2.5D approach, volume pre-processing,
backpropagation only through the liver for lesion segmentation, applying the detector
and the 3D-CRF as a ﬁnal post-processing step. The method of limiting the learning
process only to those pixels belonging to the liver is somewhat similar to the "attention"
strategy, as only a speciﬁc region has been selected to focus the learning on.

The segmentation network also has the potential to perform the segmentation of other
diﬀerent structures. As the algorithm is derived from DRIU which was able to perform
also the blood vessels’ segmentation, in the future it would be interesting to investigate
how this can be adapted for the segmentation of other liver structures such as the arter-
ies.

While we are used to encountering in our machine learning tasks much larger datasets,
the datasets speciﬁc to this task are usually much smaller. For example, the original au-
thors [11] have successfully trained and tested this algorithm also on the "Visual Concept
Extraction Challenge in Radiology" (Visceral) dataset [93] which comprises only 20 vol-
umes, out of which 18 were used for training and 2 for validation. The reasons for such
small datasets are related to the diﬃculty of producing these labeled volumetric images
datasets, data privacy and data size.

Chapter 4

HoloLens Visualization

In this chapter, we will present our solution for the visualization of the 3D CT and
MRI medical images using the Microsoft HoloLens MR HMD. We prefer MR over VR
because it "keeps" the user (medical staﬀ) in the real world, thus further limiting pos-
sible nausea (most of the image is the real world which has zero latency) and allowing
the solution to be used in a dynamic situation. Moreover, we prefer HoloLens over other
MR devices for practical reasons like the multiple user input possibilities oﬀered, inte-
grated Wiﬁ connection (no additional cables or connected devices needed), lightweight
(compared to other options) and for technical reasons like features and support. The
GPU computing power limitation is addressed by using a dedicated Desktop Windows
PC rendering server.

4.1 Using Unity and WebRTC to deliver desktop rendering

power to HoloLens

Being made out of voxels, medical imaging data
volumes can be rendered by using a technique called
raycasting. In Unity, a simple cube geometry is as-
signed a material which in its turn loads a shader.
A shader is, in fact, a program with the diﬀerence
that it is written for and it runs on the GPU. The
shader loads the texture, in our case the 3D volu-
metric image made out of voxels, and tells the GPU
how to render the object, in this case using the
technique often called volumetric ray casting, ray
tracing or ray marching. Basically, for each pixel of
the ﬁnal image, a "ray" is sent through the volume
and the values of the nearby pixels intersected by
the ray are interpolated to compute the ﬁnal image
pixel, as depicted in Figure 4.1. A usual medical
volume size of 512x512x1024 voxels, i.e. more than
250 million voxels, is hence computationally inten-
sive in terms of GPU performance and we needed
to externalize these computations to a dedicated
Windows server machine.

As a result, our visualization architecture com-
prises three interconnected applications, running in

31

Figure 4.1: Volume raycasting.a

aSource: https://en.wikipedia.org/

wiki/Volume_ray_casting

32

CHAPTER 4. HOLOLENS VISUALIZATION

the same time: the Hololens Client, the Windows Desktop Server, and a Signaling Server
which manages the communication and connection between the ﬁrst two, as depicted in
Figure 4.2.

Figure 4.2: System logical architecture.

Our solution makes use of the "3D Toolkit" which uses the WebRTC (Web Real-Time
Communications) protocols and API as well as the NVEncode hardware encoding library
from NVIDIA. The system architecture is depicted in Figure 4.3.

Figure 4.3: WebRTC extended by 3DToolkit (green) [9].

The 3D Streaming Toolkit provides server-side libraries for remotely rendering 3D
scenes, client-side libraries for receiving streamed 3D scenes, low-latency audio and video
streams using WebRTC, as well as high-performance video encoding and decoding using
NVEncode [9].

Among others, some of the necessary prerequisites are Windows 10 Anniversary Up-
date, Visual Studio 2017, Windows 10 SDK - 10.0.14393.795, an NVIDIA GPU with
NVIDIA drivers and CUDA Toolkit 9.1 (required for NVEncode) installed and Unity

4.1. HOLOLENS WITH EXTERNAL RENDERING

33

2017.4.4f1 LTS release.

Concerning the hardware architecture, it comprises 3 components: a Router, the
Desktop Windows Server (hosting the Rendering Server app and the Signaling Server
app), and the HololeLens HMD running the DirectX HoloLens Client. The hardware
architecture is presented in Figure 4.4.

Figure 4.4: Hardware architecture.

The features provided are presented in Table 4.1:

Table 4.1: Client and server feature matrices.

HoloLens DirectX Client HoloLens Unity Client Unity Win32 Server
Feature \Platform
Y
AV streaming
Y
Data streaming
Y
HTTP signaling
Y
HTTPS signaling
Signaling heartbeat
Y
OAuth24D authentication Y

Y
Y
Y
N
N
N

Y
Y
Y
N
N
N

4.1.1 Signaling server and networking

For reasons such as control, reliability, transmission speed and latency we have pre-

ferred to use for communication the local network instead of the internet.

The peers interact with the signaling server to share the handshakes and start a di-
rect peer-to-peer transmission. After this point, the actual data is sent directly between
client and server. While the traﬃc and computation load of the signaling server is low, it
is still a core component of the WebRTC connection architecture. To simplify the overall
architecture and improve communication speed, we have deployed the signaling server
on the same windows desktop machine that runs the Rendering Server.

The signaling server code is node.js and is started with the simple command "node

./server.js".

34

CHAPTER 4. HOLOLENS VISUALIZATION

4.1.2 Client

This is a simple DirectX client which connects to the Signaling Server for handshaking,
to ﬁnally establish a peer-to-peer connection with the Rendering Server via WiFi in
order to receive the rendered frames as a stream, and send back to the Rendering Server
updates concerning the HMD’s position and rotation via the dedicated data channel. The
Rendering Server updates the view per the newly received coordinates of the HoloLens
HMD in the world.

4.1.3 Server

The server is built using the Unity game engine and is meant to oﬄoad the heavy
GPU rendering task from the HoloLens client. It is meant to run in a Windows OS, and
makes use of the following technologies:

• NVIDIA drivers and CUDA library to render and encode the scene frames which
will be sent to the HoloLens client. Most NVIDIA graphics cards include dedicated
hardware for video encoding, and NVIDIA’s NVEncode library provides complete
oﬄoading of video encoding without impacting the 3D rendering performance.
• The WebRTC open source project, released by Google in 2011 for the development
of real-time communications between apps, including low latency VOIP audio and
video applications. Communication between peers is managed through one or more
data channels. The Video Engine is oﬀered as a middleware service to establish a
video data channel and to automate buﬀer, jitter, and latency management. The
Audio Engine does the same in regards to audio transmission and is conceived for
eﬃcient processing of voice data. Applications can open diﬀerent data channels for
custom messages [9].

The 3DStreamingToolkit’s additions to the typical WebRTC usage are:

• The NVIDIA NVEncode hardware encoder library for real-time encoding of 3D

rendered content was added to the video encoders.

• A dedicated data channel manages the camera transforms and the user interac-
tion events. This channel is used to update the HoloLens camera position in the
rendering server when the user moves through the room.

These were implemented by means of plugins that engage Unity or native DirectX
rendering engines. The Unity server makes use of a native plugin produced by the 3D
Toolkit build pipeline. The plugin negotiates with clients to conﬁgure a stream, and for
encoding and sending visual frame data from Unity to the client.

The core scripts employed by the server are the StreamingUnityServerPlugin, which
provides a wrapper around the native plugin that powers the experience. An instance of
the wrapper is created by the WebRTCServer, and exposed publicly. The WebRTCServer
is the main WebRTC component, which conﬁgures the native plugin and handles client
input data. Finally, the WebRTCServerDebug enables detailed logging data on request.

4.2 User interface

At this moment we have a basic yet functional UI which allows movement, rotation
and scaling of the 3D medical volumetric image visualized. These scripts are acting
directly on the data cube.

Another set of scripts which activates on the shader level allows volume slicing and

image luminosity adjustments. A sample visualization is presented in Figure 4.5.

4.3. PERFORMANCE

35

Figure 4.5: Application screenshot.

4.3 Performance

The server executable is run through a .bat ﬁle, using the following command:

"server.exe -force-d3d11-no-singlethreaded"

Tests started on a system equipped with a GeForce GTX950M NVIDIA GPU and
an Intel i5 CPU. However, because the raycast drawing technique combined with the
large data volume was too resource intensive for the given machine, we had to try more
powerful solutions:

• An external GPU enclosure, the "Akitio" node equipped with an NVIDIA GTX1070,
proved to be too limited in connectivity options as it requires a machine equipped
with a Thunderbolt 3 slot (typically Apple machines), or a very speciﬁc Windows
machine model (generally laptops) with a USB 3.1 port, and as such it can not
oﬀer a scalable and ﬂexible option.

• Running the executable on a cloud Windows machine was eliminated as it in-
troduces more latency possibilities (important for real-time MR visualization) and
uncontrolled layers in the process, such as an external uncontrollable windows cloud
platform, and also the internet as an additional communication channel which is
undesirable for our use case (a safe and reliable medical application), due to the
unpredictable nature of the internet.

A dedicated local Windows desktop server equipped with an NVIDIA GTX 1080 GPU
and an AMD octa-core CPU from the FX 8000 family running at 3.5Ghz, communicating
over local WiFi proved to be the solution oﬀering the best mix of control, reliability,

36

CHAPTER 4. HOLOLENS VISUALIZATION

scalability and performance.

A comparison between the frame rates obtained by rendering a volume of 512x512x986
voxels, i.e. 260 million voxels, using the raycast volume rendering technique is presented
in Table 4.2.

Table 4.2: Diﬀerent GPUs’ performance for the reference volume.

FPS

GPU
HoloLens GPU 1
4
GTX 950M
18
GTX 1080

4.4 Discussion

We must notice that, as the experience involves stereoscopy, the scene is rendered
twice - once for each eye. The 18fps obtained on the GTX 1080 GPU are stereo fps,
hence the GPU has rendered in fact 36 mono fps. As such, we believe that this is a
pertinent, scalable solution. Using 2 GTX 1080 in SLI mode should almost double the
fps to around 35 stereo fps. Using superior graphics cards should also proportionally
improve performance.

Figure 4.6: Improving memory and cache eﬃciency. a

aSource: http://graphicsrunner.blogspot.com/2009/02/volume-rendering-

201-optimizations.html

Until now we used brute force for rendering, so adding shader quality improvements

like:

• GPU cache eﬃciency and memory access, as depicted in Figure 4.6: as the volume
data is linearly loaded into memory, a ray that is cast through the volume has
poor chances to have the fastest possible memory access to neighboring voxels
information as it traverses the volume. This can be improved by converting the
layout to a block based layout. Thus, as we travel through the volume, we will be
more likely to faster access in memory the neighboring voxels.

4.4. DISCUSSION

37

• Eliminating the 0 alpha voxels: right now, we are ray-casting through the whole
volume in the scene, i.e all voxels, even if the volume contains areas with zero alpha
voxels. The zero alpha voxels can be skipped and we can render only the volume
parts which contain non-zero alpha voxels.

In conclusion, with the right hardware and some shader improvements, we believe that
this solution can provide a stereo medical visualization at around 60 fps. Although not
experimented during this project due to hardware constraints, the 3D Toolkit authors
state that an unlimited number of peers can connect to a single instance of a server.
However, this number will eventually be limited by the hardware, as NVIDIA enforces a
maximum of 2 GPU encoding sessions on desktop series graphics cards. The number of
peers can be limited via signaling, more speciﬁcally, through conﬁguring a ".json" ﬁle.

38

CHAPTER 4. HOLOLENS VISUALIZATION

Chapter 5

Conclusion and Future Work

In this project, we proposed a solution for building a software suite for automated
machine learning segmentation of medical radiology images and advanced true-3D visual-
ization of these images using the Microsoft HoloLens mixed reality head-mounted display.

At present, we have implemented and evaluated the project’s main functionalities
and algorithms such as: converting and loading the medical image ﬁle formats into the
Unity 3D game engine; CT and MRI volumetric image visualization on HoloLens; a basic
yet functional UI for image manipulation; oﬄoading the heavy GPU rendering of vol-
umetric images from the HoloLens client application to a dedicated Windows desktop
server through local WiFi, and a fully automatic solution for the medical image seg-
mentation using a deep learning algorithm. For training and testing of the algorithm,
a labeled set of 200 liver scans has been used. We have demonstrated the performance
improvement and the possibility of scaling the HoloLens Client - Unity Desktop Server
visualization solution using WebRTC and high-end GPUs.

Having studied the possibilities and the feasibility of using these solutions for practi-

cal medical visualization purposes, we are conﬁdent that the results are promising.

While there is yet room for improvement, we are conﬁdent that this system has high
potential for improving the quality, speed and eﬃciency of the medical act while lowering
the overall operative costs, and also step up into the operations rooms in the near future.

Future work comprises performance improvements in regards to latency and frame,
achievable mainly by scaling the hardware and secondly by improving the drawing tech-
nique (shader). While the key feature of automatic liver segmentation has been achieved,
at the moment some minor steps are still manually performed (transferring, converting
and loading data), so our future work will further focus on fully automating the pipeline
so that little to no human intervention is needed.

39

40

CHAPTER 5. CONCLUSION AND FUTURE WORK

Bibliography

[1] Microsoft, Microsoft HoloLens,

[Online] Accessed:

13.06.2018.

https://

www.microsoft.com/en-us/hololens.

[2] N. L. Chen, W. Tang, “Real-time geometry-aware augmented reality in minimally

invasive surgery,” arXiv 170801234 CS, 2017.

[3] F. Cutolo et al., “A new head-mounted display-based augmented reality system in
neurosurgical oncology: a study on phantom,” Computer Assisted Surgery, vol. 22,
pp. 39–53, Jan 2017.

[4] N. Bourdel et al., “Augmented reality in gynecologic surgery: evaluation of potential
beneﬁts for myomectomy in an experimental uterine model,” Surgical Endoscopy,
vol. 31, April 2016.

[5] Universitat Basel: "The MIRACLE project", Virtual Reality in der Medizin: Neue
Chancen für Diagnostik und Operationsplanung.,
[Online] Accessed: 13.06.2018.
https://www.unibas.ch/de/Aktuell/News/Uni-Research/Virtual-Reality-in-
der-Medizin-Neue-Chancen-fuer-Diagnostik-und-Operationsplanung.html.

[6] J. Liua, S. Wanga, M. G. Linguraru, and R. M. Summersa, “Robust Detection of
Renal Calculi from Non-contract CT Images Using TV-ﬂow and MSER Features,”
Proceedings of SPIE, The International Society for Optical Engineering, vol. 8670:06,
March 2013.

[7] K.-K. Maninis, J. Pont-Tuset, P. Arbelaez, and L. V. Gool, “Deep retinal im-
age understanding.,” in International Conference on Medical Image Computing and
Computer-Assisted Intervention, pp. 140–148, Springer, 2016.

[8] S. Caelles, K.-K. Maninis, J. Pont-Tuset, L. Leal-Taixe, D. Cremers, and L. V. Gool,

“One-shot video object segmentation,” arXiv 1611.05198, 2016.

[9] Microsoft, Microsoft Partner Catalyst Team, [Online] Accessed: 22.06.2018. https:

//blogs.msdn.microsoft.com/partnercatalystteam/.

[10] P. Christ, Liver Tumor Segmentation challenge (LiTS),

[Online] Accessed:

18.07.2018. https://competitions.codalab.org/competitions/17094.

[11] M. Bellver, K.-K. Maninis, J. Pont-Tuset, X. G. i Nieto, J. Torres, and L. V. Gool,
“Detection-aided liver lesion segmentation using deep learning,” arXiv171111069 Cs,
Nov. 2017.

[12] P. Glauner, M. Du, V. Paraschiv, A. Boytsov, I. L. Andrade, J. Meira, P. Valtchev,
and R. State, “The top 10 topics in machine learning revisited: A quantitative
meta-study,” in Proceedings of the 25th European Symposium on Artiﬁcial Neural
Networks, Computational Intelligence and Machine Learning (ESANN 2017), 2017.

41

42

BIBLIOGRAPHY

[13] S. Arthur, “Some studies in machine learning using the game of checkers,” vol. 3,

pp. 210–229, IBM, March 1959.

[14] N. S. Altmann, “An introduction to kernel and nearest-neighbor nonparametric re-

gression,” The American Statistician, vol. 46(3), pp. 175–185, 1992.

[15] S. Russell and P. Norvig, Artiﬁcial Intelligence: A Modern Approach (2nd ed.).

Prentice Hall, (2003) [1995].

[16] C. Cortes and V. N. Vapnik, “Support-vector networks,” Machine Learning, vol. 20

(3), p. 273–297, 1992.

[17] D. Cox, “The regression analysis of binary sequences (with discussion),” Journal of

the Royal Statistical Society: Series B, vol. 20, p. 215–242, 1958.

[18] J. M. Stanton, “Galton, Pearson, and the Peas: A Brief History of Linear Regression

for Statistics Instructors,” Journal of Statistics Education, vol. 9:3, 2001.

[19] G. Williams, Decision Trees. In: Data Mining with Rattle and R. Springer, New

York, NY, 2011.

[20] J. N. Morgan and J. A. Sonquist, “Problems in the analysis of survey data, and a
proposal,” Journal of the American Statistical Association, published by American
Statistical Association, vol. 58:302, pp. 415–434, June 1963.

[21] T. K. Ho, “The random subspace method for constructing decision forests,” IEEE
Transactions on Pattern Analysis and Machine Intelligence, pp. 832–844, August
1998.

[22] L. Breiman, “Random forests,” Machine Learning, Kluwer Academic Publishers,

vol. 45:5, June 2001.

[23] T. K. Ho, “Random decision forests,” Proceedings of the 3rd International Conference

on Document Analysis and Recognition, pp. 278–282, August 1995.

[24] A. K. Jain, “Data clustering: 50 years beyond K-means,” Pattern Recognition Let-

ters, vol. 31:08, pp. 651–666, June 2010.

[25] K. Pearson, F.R.S., “On lines and planes of closest ﬁt to systems of points in space,”
The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science,
vol. 2, no. 11, pp. 559–572, 1901.

[26] P. Glauner, “Comparison of training methods for deep neural networks,” arXiv

preprint arXiv:1504.06825, 2015.

[27] P. Glauner, “Deep convolutional neural networks for smile recognition,” arXiv

preprint arXiv:1508.06535, 2015.

[28] P. Glauner, “Deep learning for smile recognition,”

in Uncertainty Modelling in
Knowledge Engineering and Decision Making: Proceedings of the 12th International
FLINS Conference, pp. 319–324, World Scientiﬁc, 2016.

[29] A. Krizhevsky, I. Sutskever, and G. E. Hinton, “Imagenet classiﬁcation with deep
convolutional neural networks,” in Advances in neural information processing sys-
tems, p. 1097–1105, NIPS, 2012.

43

[30] K. Simonyan and A. Zisserman, “Very deep convolutional networks for large-scale

image recognition,” arXiv 1409.1556, 2014.

[31] K. He, X. Zhang, S. Ren, and J. Sun, “Deep residual learning for image recognition,”
in Proceedings of the IEEE conference on computer vision and pattern recognition,
p. 770–778, IEEE, 2016.

[32] K.-K. Maninis, J. Pont-Tuset, P. Arbelaez, and L. V. Gool, “Convolutional oriented
boundaries,” in European Conference on Computer Vision, p. 580–596, Springer,
2016.

[33] S. Xie and Z. Tu, “Holistically-nested edge detection,” in Proceedings of the IEEE

international conference on computer vision, p. 1395–1403, 2015.

[34] J. Long, E. Shelhamer, and T. Darrell, “Fully convolutional networks for semantic
segmentation,” in Proceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, p. 3431–3440, 2015.

[35] F. Yu and V. Koltun, “Multi-scale context aggregation by dilated convolutions.,”

arXiv 1511.07122, 2015.

[36] B. J. Erickson, P. Korﬁatis, Z. Akkus, and T. L. Kline, “Machine learning for medical
imaging,” Radiographics : a review publication of the Radiological Society of North
America, Inc, vol. 37, pp. 505–515, April 2017.

[37] A. Pratondo, C.-K. Chui, and S.-H. Ong, “Integrating machine learning with region-
based active contour models in medical image segmentation,” Journal of Visual
Communication and Image Representation, vol. 43, pp. 1–9, Feb. 2017.

[38] T. A. Ngo, Z. Lu, and G. Carneiro, “Combining deep learning and level set for the
automated segmentation of the left ventricle of the heart from cardiac cine magnetic
resonance,” Medical Image Analysis, vol. 35, pp. 159–171, Jan. 2017.

[39] M. Havaei et al., “Brain tumor segmentation with deep neural networks,” Medical

Image Analysis, vol. 35, pp. 18–31, Jan. 2017.

[40] T. Kooi et al., “Large scale deep learning for computer aided detection of mammo-

graphic lesions,” Medical Image Analysis, vol. 35, pp. 303–312, Jan. 2017.

[41] K. Kamnitsas et al., “Eﬃcient multi-scale 3D CNN with fully connected CRF for
accurate brain lesion segmentation,” Medical Image Analysis, vol. 36, pp. 61–78,
Feb. 2017.

[42] B. Hu, Y. Tang, E. I. C. Chang, Y. Fan, M. Lai, and Y. Xu, “Unsupervised learning
for cell-level visual representation in histopathology images with generative adver-
sarial networks,” arXiv171111317 Cs, Nov. 2017.

[43] J. Merkow, R. Lufkin, K. Nguyen, S. Soatto, Z. Tu, and A. Vedaldi, “DeepRadiolog-
yNet: Radiologist level pathology detection in CT head images,” arXiv171109313
Cs, Nov. 2017.

[44] P. Rajpurkar et al., “CheXNet: Radiologist-level pneumonia detection on chest X-

rays with deep learning,” arXiv171105225 Cs Stat, Nov. 2017.

44

BIBLIOGRAPHY

[45] Y. Xue, T. Xu, H. Zhang, R. Long, and X. Huang, “SegAN: Adversarial network
with multi-scale l1 loss for medical image segmentation,” arXiv170601805 Cs, Jun.
2017.

[46] N. Nie et al., “Medical image synthesis with context-aware generative adversarial
networks,” Medical Image Computing and Computer Assisted Intervention - MIC-
CAI, pp. 417–425, 2017.

[47] P. F. Christ et al., “Automatic liver and lesion segmentation in CT using cas-
caded fully convolutional neural networks and 3D conditional random ﬁelds,” arXiv
161002177 Cs, vol. 9901, pp. 415–423, 2016.

[48] X. Li, H. Chen, X. Qi, Q. Dou, C. W. Fu, and P.A.Heng, “H-DenseUNet: Hybrid
densely connected UNet for liver and liver tumor segmentation from CT volumes,”
arXiv 170907330 Cs, Sep. 2017.

[49] A. Montarzi, J. Burt, and U. Bagci, “Multi-planar deep segmentation networks for
cardiac substructures from MRI and CT,” arXiv 170800983 Cs Stat, Aug. 2017.

[50] A. Hoogi, C. F. Beaulieu, G. M. Cunha, E. Heba, C. B. Sirlin, S. Napel, and D. L.
Rubin, “Adaptive local window for level set segmentation of CT and MRI liver
lesions,” Medical Image Analysis, vol. 37, pp. 46–55, 2017.

[51] A. Gotra, L. Sivakumaran, G. Chartrand, K.-N. Vu, F. Vandenbroucke, C. Kauﬀ-
mann, S. Kadoury, B. Gallix, J. de Guise, and A. Tang, “Liver segmentation: indi-
cations, techniques and future directions,” Insights Imaging, vol. 8(4), p. 377–392,
Aug. 2017.

[52] A. Hoogi, J. W. Lambert, Y. Zheng, D. Comaniciu, and D. L. Rubin, “A fully
automated pipeline for detection and segmentation of liver lesions and pathological
lymph nodes.,” arXiv 1703.06418, 2017.

[53] P. Glauner, A. Boechat, L. Dolberg, R. State, F. Bettinger, Y. Rangoni, and
D. Duarte, “Large-scale detection of non-technical losses in imbalanced data sets,”
in Innovative Smart Grid Technologies Conference (ISGT), 2016 IEEE Power &
Energy Society, pp. 1–5, IEEE, 2016.

[54] P. Glauner, J. A. Meira, P. Valtchev, R. State, and F. Bettinger, “The challenge
of non-technical loss detection using artiﬁcial intelligence: A survey,” International
Journal of Computational Intelligence Systems, vol. 10, no. 1, pp. 760–775, 2017.

[55] O. Ronneberger, P. Fischer, and T. Brox, “U-net: Convolutional networks for
in International Conference on Medical Image

biomedical image segmentation,”
Computing and Computer-Assisted Intervention, p. 234–241, Springer, 2015.

[56] H. Chen, X. Qi, L. Yu, and P.-A. Heng, “Dcan: Deep contour-aware networks for

accurate gland segmentation.,” p. 2487–2496, IEEE, 2016.

[57] K. Lee, A. Zlateski, V. Ashwin, and H. S. Seung, “Recursive training of 2d-3d
convolutional networks for neuronal boundary prediction.,” in Advances in Neural
Information Processing Systems, p. 3573–3581, 2015.

[58] O. Çiçek, A. Abdulkadir, S. S. Lienkamp, T. Brox, and O. Ronneberger, “3D U-Net:
Learning dense volumetric segmentation from sparse annotation,” MICCAI 2016.
Lecture Notes in Computer Science. Springer, Cham, vol. 9901, 2016.

45

[59] K. J. Geras, S. Wolfson, S. Kim, L. Moy, and K. Cho, “High-resolution breast cancer

screening with multi-view deep CNNs,” arXiv 1703.07047, 2017.

[60] J. Chen, L. Yang, Y. Zhang, M. Alber, and D. Z. Chen, “Combining fully convo-
lutional and recurrent neural networks for 3d biomedical image segmentation,” in
Advances in Neural Information Processing Systems, p. 3036–3044, NIPS, 2016.

[61] Q. Dou, H. Chen, Y. Jin, L. Yu, J. Qin, and P.-A. Heng, “3d deeply supervised
network for automatic liver segmentation from CT volumes.,” pp. 149–157, Springer,
2016.

[62] F. Lu, F. Wu, P. Hu, Z. Peng, and D. Kong, “Automatic 3d liver location and seg-
mentation via convolutional neural network and graph cut.,” International journal
of computer assisted radiology and surgery, vol. 12, no. 2, pp. 171–182, 2017.

[63] P. F. Christ, F. Ettlinger, F. Grun, M. E. A. Elshaera, J. Lipkova, S. Schlecht,
F. Ahmaddy, S. Tatavarty, M. Bickel, P. Bilic, et al., “Automatic liver and tumor
segmentation of CT and MRI volumes using cascaded fully convolutional neural
networks.,” arXiv 1702.05970, 2017.

[64] X. Han, “Automatic liver lesion segmentation using a deep convolutional neural

network method.,” arXiv 1704.07239, 2017.

[65] G. Chlebus, H. Meine, J. H. Moltz, and A. Schenk, “Neural network-based au-
tomatic liver tumor segmentation with random forest-based candidate ﬁltering.,”
arXiv 1706.00842, 2017.

[66] L. Bi, J. Kim, A. Kumar, and D. Feng, “Automatic liver lesion detection using

cascaded deep residual networks.,” arXiv 1704.02703, 2017.

[67] D. B. Douglas, D. Venets, C. Wilke, D. Gibson, L. Liotta, E. Petricoin, B. Beck, and
R. Douglas, “Augmented reality and virtual reality: Initial successes in diagnostic
radiology,” State of the Art Virtual Reality and Augmented Reality Knowhow, May
2018.

[68] J. Gurney, “Missed lung cancer at CT: Imaging ﬁndings in nine patients.,” Radiology.,

vol. 199:1, pp. 117–122, 1996.

[69] C. White, A. Salis, and C. Meyer, “Missed lung cancer on chest radiography and com-
puted tomography: Imaging and medico-legal issues.,” Journal of Thoracic Imaging.,
vol. 14:1, pp. 63–68, 1999.

[70] P. Ferroli, G. Tringali, F. Acerbi, M. Schiariti, M. Broggi, D. Aquino, et al., “Ad-
vanced 3-dimensional planning in neurosurgery.,” Neurosurgery., vol. 72(Suppl. 1),
pp. A54–A62, 2013.

[71] D. Douglas, C. Wilke, D. Gibson, J. Boone, and M. Wintermark, “Augmented
reality: Advances in diagnostic imaging.,” Multimodal Technologies and Interact.,
vol. 1:29, 2017.

[72] L. Soler, S. Nicolau, P. Pessaux, D. Mutter, and J. Marescaux, “Real-time 3d image
reconstruction guidance in liver resection surgery,” HSBN - Hepatobiliary Surgery
and Nutrition, vol. 3, April 2014.

46

BIBLIOGRAPHY

[73] K. Hohne, M. Bomans, U. Tiede, and M. Riemer, “Display of multiple 3D–Objects
using the generalized voxel-model.,” Medical Imaging II. Newport Beach: SPIE,
1988.

[74] P. Calhoun, B. Kuszyk, D. Heath, J. Carley and E. Fishman, “Three-dimensional
volume rendering of spiral CT data: Theory and method.,” Radiographics: A Review
Publication of the Radiological Society of North America, Inc., vol. 19:3, pp. 745–764,
1999.

[75] P. Johnson, D. Heath, B. Kuszyk and E. Fishman, “CT angiography with volume
rendering: Advantages and applications in splanchnic vascular imaging.,” Radiology,
vol. 200:2, pp. 564–568, 1996.

[76] E. Fishman, D. Ney, D. Heath, F. Corl, K. Horton and P. Johnson, “Volume ren-
dering versus maximum intensity projection in CT angiography: What works best,
when, and why.,” Radiographics: A Review Publication of the Radiological Society
of North America, Inc., vol. 26:3, pp. 905–922, 2006.

[77] C. Williams and K. Kovtun, DICOM VR, [Online] Accessed: 15.06.2018. http:

//www.dicomvr.com/.

[78] P. Glauner, N. Dahringer, O. Puhachov, J. A. Meira, P. Valtchev, D. Duarte, et al.,
“Identifying irregular power usage by turning predictions into holographic spatial
visualizations,” in Proceedings of the 17th IEEE International Conference on Data
Mining Workshops (ICDMW 2017), 2017.

[79] D. Douglas, C. Wilke, D. Gibson, E. Petricoin, and L. Liotta, “Virtual reality
and augmented reality: Advances in surgery,” Biology, Engineering and Medicine,
vol. 3(1): 1-8, 2017.

[80] M. Gribetz, Meta 2, [Online] Accessed: 22.07.2018. http://www.metavision.com/

about.

[81] N. Gaydhani, The Daqri Smart Helmet – A closer look,

[Online] Accessed:
http://digitalreality.guru/2017/04/the-daqri-smart-helmet-

05.08.2018.
first-thoughts/.

[82] Case Western Reserve University, HoloAnatomy,

[Online] Accessed: 15.06.2018.

https://www.microsoft.com/en-us/p/holoanatomy/9nblggh4ntd3.

[83] Echopixel

Inc., True 3D Viewer,

[Online] Accessed:

15.06.2018.

http://

www.echopixeltech.com/interactive-virtual-reality/.

[84] A. Beydoun, V. Gupta and E. Siegel, “Dicom to 3d holograms: Use case for aug-
mented reality in diagnostic and interventional radiology,” SIIM Scientiﬁc Session
Posters and Demonstrations, 2017.

[85] M. Goryawala, S. Gulec, R. Bhatt, A. McGoron, and M. Adjouadi, “A low-interaction
automatic 3d liver segmentation method using computed tomography for selective
internal radiation therapy,” Biomed Research International, 2014.

[86] M. Goryawala, M. Guillen, S. Gulec, T. Barot, R. Suthar, R. Bhatt, A. Mcgron,
and M. Adjouadi, “An accurate 3d liver segmentation method for selective internal
radiation therapy using a modiﬁed k-means algorithm and parallel computing,” In-
ternational Journal of Innovative Computing Information and Control, vol. 8:10A,
pp. 6515–6538, 2012.

47

[87] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei, “Imagenet: A large-scale
hierarchical image database,” p. 248–255, CVPR - Computer Vision and Pattern
Recognition, IEEE Conference, 2009.

[88] D. Rothman, Artiﬁcial Intelligence By Example: Develop machine intelligence from

scratch using real artiﬁcial intelligence use cases. Packt Publishing, 2018.

[89] P. Krahenbuhl and V. Koltun, “Eﬃcient inference in fully connected CRFs with gaus-
sian edge potentials,” Advances in neural information processing systems, p. 109–117,
2011.

[90] P. Glauner, A. Migliosi, J. A. Meira, P. Valtchev, R. State, and F. Bettinger, “Is
big data suﬃcient for a reliable detection of non-technical losses?,” in Intelligent
System Application to Power Systems (ISAP), 2017 19th International Conference
on, pp. 1–6, IEEE, 2017.

[91] P. Glauner, R. State, P. Valtchev, and D. Duarte, “On the reduction of biases in
big data sets for the detection of irregular power usage,” in Proceedings of the 13th
International FLINS Conference on Data Science and Knowledge Engineering for
Sensing Decision Support (FLINS 2018), 2018.

[92] P. Glauner, P. Valtchev, and R. State, “Impact of biases in big data,” in Proceed-
ings of the 26th European Symposium on Artiﬁcial Neural Networks, Computational
Intelligence and Machine Learning (ESANN 2018), 2018.

[93] A. Hanbury, Visceral, [Online] Accessed: 29.07.2018. http://www.visceral.eu/

contact-us/.

