9
1
0
2

v
o
N
7

]
E
M

.
t
a
t
s
[

2
v
3
5
4
5
0
.
7
0
9
1
:
v
i
X
r
a

MODEL BASED LEVEL SHIFT DETECTION IN
AUTOCORRELATED DATA STREAMS USING A MOVING WINDOW

Jacob Søgaard Larsen∗, Anders Stockmarr, Bjarne Kjær Ersbøll, Murat Kulahci
Department of Applied Mathematics and Compute Science
Technical University of Denmark
Richard Petersens Plads, 2800, Lyngby, Denmark
{jasla,anst,bker,muku}@dtu.dk

ABSTRACT

Standard Control Chart techniques to detect level shift in data streams assume independence between
observations. As data today is collected with high frequency, this assumption is seldom valid. To
overcome this, we propose to adapt the off-line test procedure for detection of outliers based on
one-step prediction errors proposed by Tsay (1988) into an on-line framework by considering a
moving window. Further, we present two algorithms, that in combination, estimate an appropriate
test value for our control chart. We test our method on AR(1) processes exposed to level shifts of
different sizes and compare it to CUSUM applied to one-step prediction errors. We ﬁnd that, even
though both methods perform comparable when tuned correctly, our method has higher probability
of identifying the correct change point of the process. Furthermore, for more complicated processes
our method is easier to tune, as the range of window size to be tested is independent of the process.

Keywords Statistical Process Control · Mean Shift detection · ARMA process · Control Chart · Change Point
Detection · Time Series

1 Introduction

Process surveillance is essential in monitoring the performance of a process over time and discovering special causes
that generate more than an expected amount of variation. Process control charts are the main tools in this pursuit of
determining whether a process is in-control. The classical univariate control charts, also known as Shewhart control
charts, are for example based on the assumption of a constant process only exhibiting random variation due to time
independent noise, which renders the observations also independent in time. Any deviation from this assumption in
the form of a permanent change in the mean (level shift), a spike or a decay (e.g., deterioration due to wear and tear)
is expected to be caught by the control chart. Time independence of the observations has long been questioned as data
collected in time is expected to exhibit serial dependence, which occurs due to interplay between process dynamics
and sampling frequency (Bisgaard and Kulahci, 2009). The former reveals the speed with which a process absorbs
a disturbance. If sampling is performed faster than the impact of the disturbance on the system is eliminated, the
successive observations become correlated as they are affected by the same disturbance that was yet to be eliminated.
With the prevalence of automated data gathering systems and advances in sensor technologies, sampling frequency
can be made almost arbitrarily high inevitably yielding serially dependent (autocorrelated) observations.

There are usually two approaches proposed to alleviate the impact of autocorrelation in the performance of a control
chart: (1) model the dynamics out and have a control chart for the leftover, i.e., the residuals, and (2) obtain more accu-
rate estimates of the parameters by taking into account the autocorrelation in the estimation. For the former, the class
of autoregressive moving average (ARMA) models is usually employed (Box et al., 2008; Montgomery et al., 2015).
The control chart is then constructed for the residuals as they are expected to be uncorrelated if an appropriate model is
used and estimated (Alwan, 1992; Alwan and Roberts, 1988; Montgomery and Friedman, 1989). The ﬁrst concern in
this approach is that the interpretability of the control chart will be negatively affected, as residuals of a model will not
convey the same meaning as the original data when plotted on a control chart. But more importantly, it is shown that

∗Corresponding author

 
 
 
 
 
 
when residuals of a time series model, such as AR(1) with positive autocorrelation are used for constructing the control
chart, the probability of catching a shift in the level is high on the ﬁrst observation after the shift happens but goes
down right after that as the calculations to obtain the residuals adopt to the change in the level (Longnecker and Ryan,
1990; Zhang, 1997). The second approach also requires ﬁtting a time series model to account for the autocorrelation
in the data. Once this is done, then more accurate estimates of the parameters are used to construct the control chart
upon which the original data is plotted and monitored. Even if the model ﬁtting were performed successfully, the next
concern is that the performance measures of the control chart will be affected when the autocorrelated data is used.
The average run length (ARL) is the most commonly used performance measure and refers to the expected number of
observations before an out-of-control signal is seen. For an in-control process, ARL is calculated as the inverse of the
probability of wrongly labelling a process out-of-control for a given observation. For an out-of-control process, it is
deﬁned as the inverse of the probability of correctly declaring an alarm indicating an out-of-control process for a given
observation. Both calculations assume independence of the observations. Therefore when data is autocorrelated, the
interpretation of the ARL calculated through standard approaches will not be correct. Johnson and Bagshaw (1974)
consider Cumulative Sum (CUSUM) charts, which perform better in detecting small shifts in the mean compared to
a Shewhart chart (Harris and Ross, 1991). They propose a formula for adjusting the expected ARL of an in-control
AR(1) process. As this method is not suitable for more general ARMA-processes, Osei-Aning et al. (2017) propose
an optimization scheme, that chooses the optimal parameter settings of either CUSUM or Exponentially Weighted
Moving Average (EWMA) charts, given an ARMA model and a speciﬁed range of interest for the size of a level shift.
Zhang (1998) proposes the method EWMAST, which uses the autocorrelation function up to M steps to estimate the
variation of the EWMA test statistic, and thus correcting the critical value. Apley and Tsung (2002) proposed the
Autoregressive T 2 Chart, which is a Hotelling T 2 chart applied to a moving window of observations from an autocor-
related data series. In order to build the covariance matrix they use the sample autocorrelation function. They conclude
that their method works better for a wide range of level shifts and parameter settings of ARMA(1,1) processes than
both residual based Shewhart and CUSUM charts. Though, for small level shifts CUSUM is superior, they conclude
that the Autoregressive T 2 Chart with a ﬁxed window size is suitable for a wide range of level shifts, while CUSUM
is very specialized to mean size of interest. Dawod et al. (2017) studied the performance of Shewhart X, EWMA and
CUSUM Charts when applied to AR(1), MA(1) and ARMA(1,1) processes. They concluded that the best choice of
monitoring chart is dependent on the process under consideration. The best choice for AR(1) was CUSUM, for MA(1)
it was EWMA and for ARMA(1,1) it was Shewhart X-Chart. Munoz et al. (2017) used an Artiﬁcial Neural Network
to model an AR(1) process and compared the performance of Shewhart X, EWMA and CUSUM Charts when applied
to the one step predictions. They concluded that CUSUM was best ﬁtted for this task.

In statistics, outlier detection is used to identify and eliminate the impact of unusual observation in modelling efforts.
This is an off-line analysis of data and can be used in Phase I studies in SPC when data analysis is performed for the
estimation of the control chart parameters. For real time monitoring (i.e., Phase II), outlier analysis is not suitable
without making further adjustments. Based on our literature study we have found that although several specialized
methods exists, only the Autoregressive T2 chart by Apley and Tsung (2002) consider the problem as being an online
outlier detection problem. We believe this is a very promising approach particularly in cases such as in autocorrelated
data. We expect the univariate approach we propose in this paper will have further implications in multivariate settings.

In this article we consider detecting a shift in the level (mean) of serially dependent data. Our approach is based on
the outlier detection scheme for time series data proposed by Tsay (1988), which utilizes the structure of the one-
step prediction errors to detect level shifts. We adapt this method into a moving window approach, and present two
algorithms, that in combination, is efﬁcient at estimating an appropriate critical value for the control chart. The article
is organized as follows: In Section 2 we describe our proposed method and algorithms, in Section 3 we describe our
test setup. The main results are presented in Section 4 followed by a discussion in Section 5. Finally in Section 6 we
present our main conclusions.

2 Method

p
i=1 φiBi and Θ(B) = 1+

We consider the Autoregressive Moving Average (ARMA) model by Box and Jenkins (1970) as stated in Eq. (1a).
q
i=1 θiBi with B being the backward operator such that Bxt = xt−1.
Here Φ(B) = 1−
We also consider the Autoregressive representation (1b) and the Moving Average representation (1c) of the process
P
p
with Π(B) = Θ−1(B)Φ(B) = 1 −
i=1 ψiBi. We assume that the
model parameters are known and that the process is stationary and invertible.
P

i=1 πiBi and Ψ(B) = Φ−1(B)Θ(B) = 1 +

P

P

p

∗

∗

Φ(B)xt = Θ(B)at
Π(B)xt = at

xt = Ψ(B)at

2

(1a)
(1b)
(1c)

For an AR representation up to degree p∗, the optimal prediction of xt at time t − 1 is (2a), with the corresponding
one-step prediction error deﬁned as (2b).

∗

p

ˆxt =

πixt−i

i=1
X
et = xt − ˆxt

(2a)

(2b)

We deﬁne σa to be the standard deviation of the innovations. Matrices are denoted using uppercased boldfaced letters,
e.g. A, vectors as lowercased boldfaced letters, e.g. a. B is the backward operator and polynomials in B are denoted
using capital Greek letters, e.g. Π(B), with parameters denoted as small indexed Greek letters, e.g. π1.

2.1 Phase I procedure

Tsay (1988) considered a general model where an exogenous disturbance I t
t
series. Here I t
time t∗, and τ being the size of the disturbance.

impacts as in (3a)-(3b) in univariate time
t = 1 if t = t∗ and 0 otherwise, is the indicator variable for an exogenous disturbance, ft occurring at

∗

∗

xt = ft + Ψ(B)at
ω(B)
δ(B)

ft = τ

I t
t

∗

(3a)

(3b)

This paper is restricted to consider exogenous disturbances resulting in a shift in the mean value of xt. Chen and Tiao
this
(1986) proposed to model this disturbance by setting ω(B)/δ(B) = 1/(1 − B), i.e.
t = 1 if t ≥ t∗ and 0 otherwise. Assuming that a disturbance takes the form of a level
produces the step function St
shift, we can convert (3a) into AR-form (4a), and arrive at a model for the behaviour of the one-step prediction error
et, described by the H(B) polynomial.

in combination with I t
t

∗

∗

Π(B)xt = τ

Π(B)
1 − B
= τ H(B)I t

∗

I t
t + at

∗

t + at

H(B) = 1 + η1B + η2B2 + · · · =

ηiBi

∞

i=0
X

(4a)

(4b)

(4c)

Analysing the one-step prediction error in the case of an unobserved level shift, we ﬁnd the structure outlined in Eq.
(5a)-(5c).

et = xt − ˆxt

∗

p

πixt−i + τ H(B)I t

≈



i=1
X
= τ H(B)I t



∗

t + at

∗

t + at


∗

p

−

πixt−i

i=1
X

Note that the expected value of et changes according to H(B) after a level shift has occurred

E(et) =

0,
τ ηi,

(cid:26)

t < t∗

t = t∗ + i,

i ≥ 0

(5a)

(5b)

(5c)

(6)

The parameters of H(B) are given by the Cauchy product Π(B) ∗ (1/(1 − B)). For instance, this means that for an
AR(1) process we arrive at ηi = η1 for i > 1, i.e. the ﬁrst one-step predictions after a level shift will have expected
value τ while the subsequent ones will have a constant expected value at η1τ . Based on the model (6), and assuming
that the parameters of H(B) are known, an unbiased estimate of τ at time d given observations up to time T is given

by Eq. (7) with ρ2

d,T =

1 +

T −d
i=1 η2
i

−1

.

(cid:16)

P

(cid:17)

ˆτd,T = ρ2

d,T

ed +

T −d

i=1
X

ηied+i

!

3

(7)

 
Assuming that no level shift has occurred, we have that ˆτd,T ∼ N (0, ρ2
a). Tsay then uses the corresponding
pointwise Wald test statistics given in (8), and a level shift is considered detected if max1≤d≤T |λd,T | ≥ h, with h
being a suitable critical value.

d,T σ2

λd,T =

ˆτd,T
ρd,T σa

(8)

Tsay does not go into further detail about how to choose the critical value, but states that values of 3.0, 3.5 or 4.0 have
provided satisfactory results. As we will show later, the critical value is dependent on both the number of samples and
the underlying ARMA model.

2.2 Phase II procedure

Applying the above procedure in an on-line monitoring scheme would require all pointwise test statistics to be updated
when a new observation is available. Thus, as time goes, the computational burden and memory requirements increase.
Furthermore, as the number of pointwise test statistics increases, a ﬁxed critical value is not appropriate, as the in-
control false alarm rate will not be constant. For these two reasons, Tsays method is not directly applicable in an
on-line setting. In the following we describe how we have adapted the method, such that it is usable when monitoring
a process.

To convert the method by Tsay into an on-line application, we only consider a moving window of observations. The
width of the window is denoted K, i.e. we test for level shifts at time points T − K + 1 ≤ d ≤ T . This is done as a
necessity, as a too wide window would have at least the following two downsides: 1) The computational burden may
get too big, and 2) The ability to investigate and respond to an event may have vanished if too long time has passed
since it occurred. It is obvious that by setting the window size to 1 the proposed method is equivalent to monitoring
the one-step prediction errors using a standardized residuals chart. In the case of autocorrelation close to or equal to
0 this method has high power towards detecting large level shifts but low power towards detecting small level shifts
(Zhang, 1997). When increasing the window size, more information about the process is included into the test, and a
higher power against detecting small level shifts is achieved. However, this extra power does not come for free, as one
has to increase the critical values, thus increasing the response time for larger level shifts. When choosing the window
size, one should therefore consider this trade-off and not choose a larger window size than needed to detect the level
shift of interest.

Consider now the pointwise test statistics given in Eq. (8). Given a new observation xT +1 and corresponding one-step
prediction error eT +1 we can update the test statistics iteratively according to (9) (note that λT −K+1,T is discarded, as
this falls outside the window considered).

λd,T +1 =

ˆτd,T +1
ρd,T +1σa

ρd,T +1

ed +

T +1−d
i=1

ηied+i

(9)

(cid:16)

ρd,T +1
ρd,T

λd,T +

σa
P
ρd,T +1ηT +1−d
σa

(cid:17)

eT +1

=

=

This provides a fast means of computing test values when a new observation is available, as one only needs to update
the test values. Furthermore, as ρd,T as it only depends on T − d it is clear that ρd,T = ρd+1,T +1 and therefore only
needs to be computed once for each d. Hence, by letting eT in Eq. (10a) be the moving window of one-step prediction
errors and ΛT in Eq. (10b) be the corresponding pointwise test statistics, one can update the test values as the linear
system in Eq. (10c).

eT = [eT −K+1, . . . , eT ]T
ΛT = [λT −K+1,T , . . . , λT,T ]T

ΛT +1 = BΛT + ceT +1

(10a)

(10b)
(10c)

Using this notation an appropriate test statistic to test for a level shift is then the maximum norm of the pointwise test
statistics within the current window as given in Eq. (11).

Λ = kΛT k∞

4

(11)

2.3 Choosing the critical value

Setting the critical value is essential in order to achieve a desired false alarm rate while still being able to detect a
certain level shift in the process. We will here outline a procedure to select the critical value for a given window size.

Using Eq.
consequently is distributed as (12b).

(10a) and (10b), then from (7) and (8) we can write the test values as the linear system (12a) which

ΛT = AeT
ΛT ∼ N

0, AAT

(12a)

(12b)

Therefore, as the test values are correlated, a set of ΛT does not correspond to a sequential hypothesis test, hence one
(cid:0)
cannot do corrections like Bonferoni or Dunn-Sidak (Bonferroni, 1936; Sidak, 1967). Instead a critical value should
be chosen such that for a predeﬁned in-control error rate α, the critical values satisﬁes the following

(cid:1)

1 − α = P (kΛT k∞ < h) =

1
(2π)K|AAT |

exp

−

Z[−h, h]K

(cid:18)

1
2

xT

AAT

−1

x

dx

(cid:0)

(cid:1)

(cid:19)

(13)

Solving this using numerical integration will be feasible for small values of K, but as the number of nodes needed
develops exponentially with the window size K, this procedure is infeasible for large values of K.

p

We propose to utilize the statistical properties of the run length distribution, thus enabling us to determine the critical
values using simulation. Given a critical value candidate, h, we can estimate the corresponding in-control average run
length (ARL0 = 1/α) by performing n repetitions of Algorithm 1.
Assuming that the false alarms are independent, the number of false alarms of a control chart is binomial distributed
and the waiting times between events are geometrically distributed. A Maximum Likelihood estimate of ARL0 is then
the sample mean. Letting ¯x being the mean of N waiting times, a 1 − β conﬁdence interval of the true ARL0 will
then be (14).

2N ¯x
χ2
1−β/2(2N )

< ARL0 <

2N ¯x
χ2
β/2(2N )

(14)

One procedure to select the critical value could be the following:

Given an ARMA(p,q) model estimated from in-control data and a window size K, pick a range for candidate values
for the critical value and do N simulations for each candidate value hcand in this range. Finally pick the critical value
yielding an average run length closest to the desired ARL0.
This procedure has 2 drawbacks. 1: There is the risk of potentially trying a much to wide range of values. 2: For a
large window size, it is computationally expensive to do the simulation compared to a small window size. Instead we
propose to start with a small window size (e.g. K = 2), and then sequentially progress for an increasing window size
as described in Algorithm 2, with Φ(h) being the cumulative distribution of the standard normal distribution. Note
that, since having a window size of 1 corresponds to monitoring the standardized one-step prediction errors, one can
analytically determine the critical value and thereby have a lower bound on the test value for K = 2. One thereby
avoids performing an a grid search on (h,K) pairs as the statistical properties of one window size is exploited when
a larger window size is investigated. Furthermore, the algorithm also utilizes that, as shown in the paragraph below,
any two pointwise test statistics will be non-identical, as the correlation between them is less than 1. This means that
the conditional variance V
is larger than zero. Hence, when increasing the window

λT −(K+1),T |λT −K,T , . . . , λT,T

(cid:0)

(cid:1)

Algorithm 1
Precondition: h, A, H(B)

1: Draw ΛT from N (0, AAT ) s.t. kΛT k∞ < h
2: i ← 0
3: while kΛT +ik∞ < h do
4:
5:
6:
7: end while
8: return i

i ← i+1
eT +i ∼ N (0, σ2
a)
Update λd,T +i, T − K + 1 + i ≤ d ≤ T + i according to (9)

5

Algorithm 2
Precondition: Target ARL0, Window size K, Number of repetitions N , Signiﬁ-

cance level β

1: h(2)
test ← -Φ−1
2: for k ← 2 to K do
3:

(cid:16)

1
2ARL0

(cid:17)

ARL ← mean of N repetitions of Algorithm 1
while ARL0 > 2·N ·ARL(h(k)
test)
1−β/2(2N ) do
χ2

4:

5:

6:
7:

8:

9:

Increase h(k)
test
ARL(h(k)

end while
if any 2·N ·ARL(h(k)
test)
β/2(2N ) < ARL0 then
χ2
test ← largest h(k)
h(k+1)

test) ← mean of N repetitions of Algorithm 1

test satisfying 2·N ·ARL(h(k)
test)
β/2(2N ) < ARL0
χ2

else

end if

h(k+1)
test ← min h(k)

10:
11:
12:
13: end for
14: hopt ← candidate value minimizing |ARL0 − ARL(h(K)
15: return hopt

test

test)|

size from K to K + 1, one has to increase the limits of the integral on the right hand side in (13) in order to satisfy the
identity.

Correlation structure of test statistics when process is in control Given a set of test statistics ΛT and a correspond-
ing window size K, then the correlation between the test statistics λd,T and λd+t,T for T − K + 1 ≤ d, d + t ≤ T is
derived in (15) with I(·, ·) being the indicator function. From this it is clear that if t > 0 then |C(λd,T , λd+t,T )| < 1
since η0 = 1.

C(λd,T , λd+t,T ) = C

ˆτd,T
ρd,T σa

,

(cid:18)

ˆτd+t,T
ρd+t,T σa (cid:19)

T −d

T −(d+t)

=

=

=

1
σ2
a

1
σ2
a

1
σ2
a

ed +

C

ρd,T 




j=1
X

ρd,T ρd+t,T C

ed +

ηj ed+j


, ρd+t,T 

ηj ed+j, ed+t +

T −d

ed+t +

T −(d+t)

j=1
X

ηj ed+t+j







T −d

j=1
X
T −(d+t)

j=1
X

ηjed+t+j


ρd,T ρd+t,T

aηiηjI (i, t + j)
σ2

i=0
X
T −(d+t)

j=0
X

= ρd,T ρd+t,T

ηt+jηj

=

j=0
X
T −(d+t)
j=0

ηt+j ηj

T −d
P
i=0 η2
i

T −(d+t)
i=0

η2
i

< 1

r(cid:16)P

(cid:17) (cid:16)P

(cid:17)

6

(15a)

(15b)

(15c)

(15d)

(15e)

(15f)

3 Test setup

To evaluate our method, we test it on simulated data. To assess how the performance is relative to standard methods,
we have chosen to compare it to the two-sided Cumulative Sum (CUSUM) chart. Below we describe how we have
chosen to initialize our charts, how we simulate our data, how we have chosen the the critical value for each window
size and how we set up the CUSUM chart.

3.1 Initialization of charts

To ensure that our simulations are as true to a real situation as possible, we are not just initializing our test statistics
as 0, but close to the true distribution. For our method, the pointwise test statistics are initialized at time ¯t according
to Eq. (12b) such that kΛ¯tk∞ < h. For CUSUM we have implemented a restart procedure. This procedure sets the
CUSUM statistics to 0 at time t = −50 and update the statistics with simulated in-control one-step prediction errors.
If the CUSUM statistics cross the critical value before time ¯t, the statistics are reset to 0.

3.2 Simulation studies

We perform two sets of simulation studies, both of AR(1) processes with φ1 ∈ [−0.95, 0.95] and σa = 1 and repeated
20,000 times; The ﬁrst simulation evaluates the out-of-control average run length ARL1 for each value of φ1. Both
our method and the CUSUM chart uses ¯t = 0. The second simulation utilizes that both charts are able to estimate the
time point where the level shift occurred. We evaluate the fraction of times the charts signal at t∗ ± 10, where t∗ is the
time point where the level shift occurs. Here both charts uses ¯t = 0. For both simulations a level shift is added at time
t∗ = 1, hence one-step prediction errors are simulated with mean value given by Eq. (6). The size of the exogenous
disturbance τ is parametrized by τ = δσa/
1 with δ ∈ [0, 2.0]. The one-step prediction error is simulated and
the pointwise test statistics for our method are updated according to Eq. (9) until a signal is detected and the time point
is recorded, while we use the update formulas for the two-sided CUSUM chart given in Equations (9.2) and (9.3) p.
418 in (Montgomery, 2012).

1 − φ2

p

3.3 Design of our method

For our method we consider window sizes, K, up to 100. For each pair of φ1 and K the critical value is selected
according to Algorithm 2 with β = 0.05, N = 21512 and a target ARL0 of 370.4 corresponding to the usual ±3
standard deviations of a Shewhart X-chart or residuals chart. We choose the number of repetitions such that the largest
margin of the conﬁdence interval (14) is 5, hence a 95% conﬁdence interval for an estimated ARL0 = 370.4 is
[365.5 375.4].

3.4 Design of the CUSUM chart

To evaluate the performance our method we use a CUSUM chart as a reference method. When designing a CUSUM
chart, one is typically setting the slack variable with the objective to search for a level shift change of a certain size.
However, as one-step predictions for AR(1) processes will change mean value according to Eq. (6) one has to make
a design choice, which balances this behaviour. We have chosen two different settings: Setting 1) tune according to
the stable level (i.e. setting the slack variable, s, to τ η1/2) and Setting 2) based on simulations, pick the optimal slack
variable. We test slack variables in the range [0.05η1, 1.5η1]. The critical value for CUSUM given a slack variable is
determined by solving the related integral equations using the function xcusum.crit from the R-package spc version
0.5.4 (Knoth, 2017).

7

4 Results

In this section the main results are presented when testing our method and CUSUM on the data described in Section
3.2. First we will present the results on each method individually, secondly we will compare our method to CUSUM
applied to the one-step predictions with the two settings described in Section 3.4.

4.1 Applying our method and CUSUM to AR(1)-processes

Figure 1 shows the estimated critical values using Algorithm 2 for window sizes up to 100 and φ1 ∈ [−0.95 0.95].
We see that as φ1 increases from −0.95, the critical value increases as well, but when φ1 approaches 0.95, the critical
value drops towards 3.

100

75

K

50

25

1

−0.95

3.4

3.3

3.2

3.1

3.0

0.00
f 1

0.95

Figure 1: Critical values for different window sizes and values of φ1

The ARL1 for our method for 3 different values of δ and window size up to 100 is shown in Figure 2. It is seen that
as δ increases, the ARL1 drops as expected. Furthermore, for δ = 0.5 and δ = 1.0 we see that the ARL1 increases as
φ1 gets big. For δ = 1.5 ARL1 ﬁrst increases when φ1 is increased from −0.95. However, when φ1 gets big ARL1
drops.

Figure 3 shows the ARL1 for CUSUM applied to the one-step prediction errors for 3 different values of δ and different
values of the slack variable. First we note that in both cases, as φ1 increases from −0.95, then ARL1 increases as well.
Further we see that for each pair of φ1 and δ, if the slack variable is either too large or too small, then ARL1 increases.
I.e. in each case there is an optimal value for the slack variable.
Figure 4 shows the fraction of times our chart signalled a level shift at time t∗ ± 10 for three different values of δ. It
is seen that when the horizon is increased, the fraction of times the chart signalled at the right time point increases.
Figure 5 shows the fraction of times the CUSUM chart signalled a level shift at time t∗ ± 10 for three different values
of δ. It is seen that for small level shifts, the ability to detect the correct change point is sensitive to the choice of slack
variable.

4.2 Comparing our method and CUSUM

A comparison of our method with CUSUM is conducted. As the two methods have different parametrizations, we
pick the setting of our method yielding the lowest ARL1 for each pair of δ and φ1. These are compared with the two
settings for CUSUM described in Section 3.4 in terms of the ratio ARLCUSUM

.

/ARLFILTER
1

1

Figure 6 shows the comparison for both settings. First we note, that there is not much difference between the two
settings. The biggest difference is present for δ > 1 and large negative values of φ1. We see that most of the area is
covered by ratios close to 1. Furthermore, for φ1 ≥ 0 our method is generally better than CUSUM for δ > 1, while
CUSUM is better for δ < 1. For φ1 < 0 this threshold decreases as φ1 becomes more negative.
To investigate the robustness towards level shifts of different sizes, we ﬁx the tuning parameters - window size and
slack variable - for a level shift of a certain size and analyse how the performance is when either a level shift of half
the size or double the size has occurred. The results are shown in Figures 7 and 8, where δ indicates the level shift the
charts has been tuned for, while the actual level shift is either twice as big or half the size. In Figure 7 the performance
of CUSUM and our method are compared when the simulated level shift is twice as large as what the methods are
tuned for. As above, there is not much difference between the two settings of CUSUM when compared to our method.
It is primarily for large δ and large negative values of φ1 there is a difference between the two settings. Furthermore,
the threshold for which values of δ our method performs better than CUSUM has been decreased for all values of φ1

8

100

75

K

50

25

1

−0.95

1

/
s

1.5

1.0

0.5

0.0

−0.95

100

30

10

3

90

10

2

100

75

K

50

25

1

300

100

30

10

3

0.95

−0.95

0.00
f 1

(a) δ = 0.5

0.95

0.00
f 1

(b) δ = 1.0

100

75

K

50

25

1

−0.95

100

30

10

3

0.95

0.00
f 1

(c) δ = 1.5

Figure 2: ARL1 for our method for three different values of δ.

1

/
s

90

10

1.5

1.0

0.5

0.0

0.95

−0.95

0.00
f 1

(a) δ = 0.5

0.95

0.00
f 1

(b) δ = 1.0

1

/
s

1.5

1.0

0.5

0.0

−0.95

10

2

0.95

0.00
f 1

(c) δ = 1.5

Figure 3: ARL1 for CUSUM for three different values of δ.

9

h
h
h
1.00

0.75

0.50

0.25

1.00

0.75

0.50

0.25

100

75

K

50

25

1

−0.95

1.00

0.75

0.50

0.25

100

75

K

50

25

1

0.95

−0.95

0.00
f 1

(a) δ = 0.5

0.95

0.00
f 1

(b) δ = 1.0

100

75

K

50

25

1

−0.95

1.00

0.75

0.50

0.25

0.95

0.00
f 1

(c) δ = 1.5

Figure 4: Probability of signal at t∗ ± 10 for our method for three different values of δ.

1

/
s

1.5

1.0

0.5

0.0

−0.95

1.00

0.75

0.50

0.25

1

/
s

1.5

1.0

0.5

0.0

0.95

−0.95

0.00
f 1

(a) δ = 0.5

0.95

0.00
f 1

(b) δ = 1.0

1

/
s

1.5

1.0

0.5

0.0

−0.95

1.00

0.75

0.50

0.25

0.95

0.00
f 1

(c) δ = 1.5

Figure 5: Probability of signal at t∗ ± 10 for CUSUM for three different values of δ.

10

h
h
h
Figure 8 shows the situation where the simulated level shift is half the size of what the methods are tuned for. First
we note that it is primarily for either large negative or large positive values of φ1 there is a difference between the two
settings of CUSUM when compared to our method. Here, Setting 1 performs better than our method for all values of
δ. For midrange values of φ1 it is only for small values of δ that CUSUM performs better than our method. For Setting
2 we can almost draw a straight line from the lower left corner to the upper right corner, where CUSUM will perform
better below this line. Above the line, our method generally performs better, however not as uniformly as in Figure 6.

Table 1 summarizes the results by providing the largest, smallest and median relative differences between our method
and CUSUM under both settings and the three different conditions. First it is noted that the ranges do not change
between the two settings. However, the median reveals that setting 2 of CUSUM overall performs slightly better than
setting 1. Furthermore, there is not much change of the ranges when a level shift of twice the size of the design size is
considered.

5 Discussion

5.1 Applying our method and CUSUM to AR(1)-processes

The critical values increase as expected when the window size is increased. Further, as φ1 increases from −1, then η1
will decrease from 2. This means that the correlation between the test values will decrease. Hence, we will expect that
the critical value will increase together with φ1. Finally as φ1 approaches 1, a new observed one-step prediction error
has decreasing effect when updating the test values as η1 = 1 − φ1. Hence, at some point this effect will dominate,
the method approaches a standardized residuals chart, and a critical value just above 3 is therefore expected when φ1
approaches 1.

Our method is seen to have longer ARL1 when sequential observations are positively correlated. This is expected, as
the change in mean value of the one-step predictions (i > 0 in Eq. 6) is small. When approaching non-stationary
models τ η0 is large, thus increasing the chance to catch the level shift at the ﬁrst observation. Furthermore, we note
that as the standardized residual chart corresponds to a windoe size of 1, and increasing the window size decreases the
ARL1, our method overall performs better than the standardized residual chart.
CUSUM also shows difﬁculty detecting level shifts when positive serial correlation is present. Further we observe
a sensitivity to correct speciﬁcation of the slack value. This is expected as CUSUM is known to spend more time
catching a large level shift (Harris and Ross, 1991), this corresponding to a slack variable being set too small. Further,
a slack variable being set too high decreases the chance that an observation will be larger, therefore increasing the time
to signal.

For our method it is seen that the probability of detecting the correct change point is an increasing function of the
length of the horizon. The reason for this is that we simultaneously test all time points within our horizon. Naturally,
as the correct change point is therefore more likely to be within the horizon when this is increased. CUSUM, on the
other hand, is seen to have a range of the slack variable, where it is most likely to detect the correct change point. This
range depend both on the underlying process and on the size of the level shift.

5.2 Comparing our method and CUSUM

When comparing our method to CUSUM we see that in the chosen range of δ, our method, as seen in Table 1 overall
performs 39% better than setting 1 of CUSUM, while comparable to setting 2 of CUSUM. We can divide the images
in Figure 6 into two regions, namely for δ < 1 and δ > 1. For δ < 1 we see that CUSUM has an ARL1 up to 33%
lower than our method. For δ > 1 we see that our method performs better than CUSUM. When we consider models
with large positive φ1 our method is up to 48 times better than CUSUM. The reason for this is the behaviour in the
expected value of the one-step predictions, as the ﬁrst will be of the size δη0 = δ and the subsequent of size δη1, which

Setting
Low
Median
High
Low
Median
High

1

2

Optimal
0.57
0.96
34.44
0.57
0.96
29.64

Half
0.62
0.85
1.23
0.60
0.89
1.22

Double
0.57
1.06
37.46
0.57
1.06
27.99

Table 1: Summary of comparison between our method and CUSUM

11

2.0

1.5

1.0

0.5

0.0

−0.95

1.00

0.75

0.50

0.25

0.00

−0.95

30

10

3

1

2.0

1.5

1.0

0.5

0.0

0.95

−0.95

0.00
f 1

(a) Setting 1

0.95

0.00
f 1

(b) Setting 2

Figure 6: Comparison of CUSUM and our method for the optimal parameter setting.

1.00

0.75

0.50

0.25

30

10

3

1

0.95

0.00

−0.95

0.00
f 1

(a) Setting 1

0.95

0.00
f 1

(b) Setting 2

Figure 7: Comparison of CUSUM Setting and our method where the level shift is twice the
size as optimal.

2.0

1.5

1.0

0.5

0.0

−0.95

1.2

1.0

0.8

2.0

1.5

1.0

0.5

0.0

−0.95

0.95

0.00
f 1

(a) Setting 1

0.95

0.00
f 1

(b) Setting 2

Figure 8: Comparison of CUSUM Setting and our method where the level shift is half the size
as optimal.

12

10

3

1

10

3

1

1.2

1.0

0.8

0.6

d
d
d
d
d
d
will be small. This behaviour is directly modelled by our method while setting 1 of CUSUM will be searching for the
permanent (small) level shift. For setting 2, the optimal slack value in this region is set to 1.5η1 (not shown), i.e. the
top end of the tested range. This indicates that the optimal strategy in this region will be to search for the ﬁrst one-step
prediction. This will essentially reduce the CUSUM chart to a residuals chart.

When investigating the ability to catch a larger level shift than what the control charts have been tuned to. This
effectively means that a too small slack variable has been used for the CUSUM and a too large window size has been
used for our method. This means that CUSUM was expected to be affected in terms of a larger ARL1. In Figure 2
we saw that our method was not affected much if the window size was too large. Hence, in this case we would expect
to see a relative improvement for our method compared to CUSUM. For setting 2 of CUSUM we overall saw that
this was the case, while only the largest relative difference between setting 1 and our method increased. Overall our
method still performed better than CUSUM setting 1 as the median was larger than 1.

When the level shift is smaller than what the charts have been tuned to detect, this corresponds to a too large slack
variable or a too small window size for CUSUM and our method respectively. In Figure 2 we saw that our method
was sensitive to choosing a too small window size. Which is why we see a relative improvement of both settings of
CUSUM compared to our method. However, it is often not the concern to catch a smaller level shift than speciﬁcation,
as one could just have decreased the speciﬁcation prior to tuning.

5.3 Method performance in the presence of MA-terms

As we have only investigated AR(1) processes, we have not fully exploited the advances of our method compared to
CUSUM. For instance, it is not difﬁcult to ﬁnd an ARMA(p,q) process where the change in mean value of the one-step
prediction errors will behave in a strange way. For instance the ﬁrst one-step prediction errors after a level shift has
occured of the ARMA(2,1) process xt − 0.4xt−1 − 0.4xt−2 = at + 0.8at−1 will show a damped oscillation around a
constant close to zero. In this case p∗ is chosen such that the AR representation ﬁt sufﬁciently and the horizon is tuned
with respect to desired performance in terms of expected ARL1, probability of signalling the correct change point and
constraints such as memory. CUSUM, on the other hand, will be more difﬁcult to tune, as some time will go before
the expected value of the one-step prediction errors will stop changing sign. We thus expect that studies of our method
for more general ARMA processes will unveil signiﬁcant advantages in terms of parsimony.

6 Conclusion

In this paper we have proposed to adapt a Phase I procedure for detecting level shifts in ARMA(p,q) time series into
an Phase II procedure by considering a moving window, where the size controls the power of the test. Furthermore,
based on statistical properties of the method we have outlined two algorithms, that combined, selects the critical value
given a speciﬁed in-control average run length.

We applied both our method and CUSUM to the one-step predictions of stationary AR(1) processes, exposed to level
shifts of different sizes. The performance of the two methods was measured using the out-of-control average run
length (ARL1) and the fraction of times the chart signalled a level shift within ±10 time steps from the correct change
point. We saw that CUSUM was more sensitive to a correct parameter selection, as both a too large or too small slack
value both increased the ARL1 but also decreased the probability of CUSUM detecting the correct change point of
the process, while only a too small window size affected our method signiﬁcantly.

When comparing the ARL1 of the two methods directly, the two methods performed comparably. Both under optimal
conditions, but also when a level shift of a different size than the design speciﬁcation had to be detected. However, we
saw that especially for large φ1 our method performed much better than CUSUM, while never having an ARL1 more
than 50% larger than that of CUSUM. We saw that it was difﬁcult to design a CUSUM chart to monitor the one-step
prediction errors for an AR(1) process. For more complicated process models, this will be even more difﬁcult. Our
method does not suffer from this, as the range of the window size to be tested is independent of the process, and thus
easier to tune. Further we expect that studies of our method applied to more general ARMA processes will unveil
several advantages compared to other methods.

We recommend that future work should investigate the extension to multivariate time series.

Acknowledgements

The research is partially funded by BIOPRO (www.biopro.nu) which is ﬁnanced by the European Regional Develop-
ment Fund (ERDF), Region Zealand (Denmark) and BIOPRO partners.

13

References

Ruey S. Tsay. Outliers, level shifts, and variance changes in time series. Journal of forecasting, 7(1):1–20, 1988. doi: 10.1002/for.

3980070102.

Søren Bisgaard and Murat Kulahci. Quality quandaries*: Time series model selection and parsimony. Quality Engineering, 21(3):

341–353, 2009. doi: 10.1080/08982110903025197.

George Edward Pelham Box, Gwilym Jenkins, and Gregory C. Reinsel. Time Series Analysis: Forecasting and Control. John Wiley

& Sons, Inc, Hoboken, New Jersey, 4 edition, 2008. ISBN 9781118619193. doi: 10.1002/9781118619193.

Douglas C. Montgomery, Cheryl L. Jennings, and Kulahci Murat. Introduction to Time Series Analysis and Forecasting. John

Wiley & Sons, Inc, Hoboken, New Jersey, 2 edition, April 2015.

Layth C. Alwan. Effects of autocorrelation on control chart performance. Communications in Statistics - Theory and Methods, 21

(4):1025–1049, 1992. doi: 10.1080/03610929208830829. URL https://doi.org/10.1080/03610929208830829.

Layth C. Alwan and Harry V. Roberts.
of Business & Economic Statistics,
https://www.tandfonline.com/doi/abs/10.1080/07350015.1988.10509640.

Time-series modeling for

6(1):87–95,

1988.

doi:

statistical process

control.

10.1080/07350015.1988.10509640.

Journal
URL

Douglas C Montgomery and David J Friedman. Statistical Process Control in Automated Manufactoring, chapter Statistical
process control in a computer-integrated manufacturing environment, pages 67–87. Marcel Dekker, New York, 1989. ISBN
9780824778897.

M. T Longnecker and T. P. Ryan. A deﬁciency in residuals charts for correlated data. Technical Report 131, Texas A&M University,

Department of Statistics, 1990.

Nien Fan Zhang. Detection capability of residual control chart for stationary process data. Journal of Applied Statistics, 24(4):

475–492, 1997. doi: 10.1080/02664769723657. URL https://doi.org/10.1080/02664769723657.

Richard A.

Johnson

and Michael Bagshaw.

effect

serial

correlation

on

the

performance

cusum tests.
https://www.tandfonline.com/doi/abs/10.1080/00401706.1974.10489155.

16(1):103–112,

Technometrics,

10.1080/00401706.1974.10489155.

The
1974.

of
doi:

of
URL

Thomas J. Harris and William H. Ross. Statistical process control procedures for correlated observations. The Canadian Journal

of Chemical Engineering, 69:48–57, February 1991. doi: 10.1002/cjce.5450690106.

Richard Osei-Aning, Saddam Akber Abbasi, and Muhammad Riaz. Optimization design of the cusum and ewma charts for autocor-
related processes. Quality and Reliability Engineering International, 33(8):1827–1841, October 2017. doi: 10.1002/qre.2146.

Nien Fan Zhang. A statistical control chart for stationary process data. Technometrics, 40(1):24–38, 1998. doi: 10.1080/00401706.

1998.10485479. URL https://www.tandfonline.com/doi/abs/10.1080/00401706.1998.10485479.

Daniel W. Apley and Fugee Tsung.

The autoregressive t2 chart

cesses.
https://doi.org/10.1080/00224065.2002.11980131.

Journal of Quality Technology, 34(1):80–96, 2002.

for monitoring univariate autocorrelated pro-
URL

10.1080/00224065.2002.11980131.

doi:

Abdaljbbar B. A. Dawod, Muhammad Riaz, and Saddam Akber Abbasi. On model selection for autocorrelated processes in

statistical process control. Quality and Reliability Engineering International, 2017. doi: 10.1002/qre.2063.

Eliana Munoz, Maria Ruiz, and Rita Peabaena-Niebles. Design of a quality control system for autocorrelated data based on artiﬁcial
In Proceedings of 2017 4th International Conference on Control, Decision and Information Technologies

neural networks.
(CoDIT’17), pages 0265–0270, 2017. doi: 10.1109/CoDIT.2017.8102602.

George Edward Pelham Box and Gwilym Jenkins. Time Series Analysis: Forecasting and Control. Holden-Day, Incorporated, San

Francisco, 1970. ISBN 0816211043.

C. Chen and George C. Tiao. Some diagnostic statistics in time series. Technical report, University of Chicago, Statistical Reseach

Center, 1986.

C.E. Bonferroni. Teoria statistica delle classi e calcolo delle probabilit`a. Pubblicazioni del R. Istituto superiore di scienze eco-
nomiche e commerciali di Firenze. Libreria internazionale Seeber, 1936. URL http://www.jstor.org/stable/23229706.

Zbynek Sidak. Rectangular conﬁdence regions for the means of multivariate normal distributions. Journal of the American Statis-

tical Association, 62(318):626–633, June 1967. doi: 10.2307/2283989.

Douglas C. Montgomery.

Statistical Quality Control - A Modern Introduction.

John Wiley & Sons Inc, 2012.

ISBN

9781118322574.

Sven Knoth.

spc:

Statistical Process Control – Collection of Some Useful Functions,

2017.

URL

https://CRAN.R-project.org/package=spc. R package version 0.5.4.

14

