Adaptive User Perspective Rendering for Handheld Augmented Reality

Peter Mohr1∗

Markus Tatzgern2†

Jens Grubert3‡

Dieter Schmalstieg1§

Denis Kalkofen1¶

1Graz University of Technology

2Salzburg University of Applied Sciences

3Coburg University

7
1
0
2

r
a

M
2
2

]

C
H
.
s
c
[

1
v
9
6
8
7
0
.
3
0
7
1
:
v
i
X
r
a

(a) Device Perspective Rendering

(b) User Perspective Rendering

Figure 1: Hand Interaction in Device and User Perspective Augmented Reality. (a) Device perspective rendering directly augments the video
stream of the handheld device. Objects outside and inside the augmentations appear disconnected. Notice the hand inside the AR device.
(b) User perspective rendering estimates the user’s head pose in order to adapt the AR rendering as seen from the head position. Therefore,
objects outside and inside the AR display visually connect. Notice the ﬁngers visually connect to the hand of the user.

ABSTRACT
Handheld Augmented Reality commonly implements some variant
of magic lens rendering, which turns only a fraction of the users real
environment into AR while the rest of the environment remains un-
affected. Since handheld AR devices are commonly equipped with
video see-through capabilities, AR magic lens applications often
suffer from spatial distortions, because the AR environment is pre-
sented from the perspective of the camera of the mobile device. Re-
cent approaches counteract this distortion based on estimations of
the users head position, rendering the scene from the user’s perspec-
tive. To this end, approaches usually apply face-tracking algorithms
on the front camera of the mobile device. However, this demands
high computational resources and therefore commonly affects the
performance of the application beyond the already high computa-
tional load of AR applications. In this paper, we present a method
to reduce the computational demands for user perspective rendering
by applying lightweight optical ﬂow tracking and an estimation of
the users motion before head tracking is started. We demonstrate
the suitability of our approach for computationally limited mobile
devices and we compare it to device perspective rendering, to head
tracked user perspective rendering, as well as to ﬁxed point of view
user perspective rendering.

Keywords: Augmented Reality, User Perspective Rendering

Index Terms: H.5.1 [Information Interfaces and Presentation]:
Multimedia Information Systems - Artiﬁcial, augmented and virtual
realities—;

∗e-mail: mohr@icg.tugraz.at
†e-mail: markus.tatzgern@fh-salzburg.ac.at
‡e-mail: jg@jensgrubert.de
§e-mail: schmalstieg@icg.tugraz.at
¶e-mail: kalkofen@icg.tugraz.at

1 INTRODUCTION

The computational capabilities of the current generation of smart-
phones and tablets enable handheld Augmented Reality (AR) ap-
plications for various application domains. For example, handheld
AR has been successfully demonstrated to provide visual support in
maintenance [15] and construction site monitoring [28], to interact
in AR games [2] or tourist maps [8], to annotate the real environ-
ment [25], and in many more situations [23].

Handheld AR typically employs smartphone- or tablet-sized
screen formats. The commonly applied Magic Lens metaphor, turns
only a fraction of the users real ﬁeld-of-view into an augmented
scene, while the rest of the environment remains unaffected. Fur-
thermore, AR magic lens applications on video see-through dis-
plays often suffer from spatial distortions, because the AR environ-
ment is presented from the perspective of the camera of the device.
The camera is usually located in a corner on the back of the de-
vice and captures the scene with a camera-dependent ﬁeld of view.
This is commonly deﬁned as device-perspective rendering (DPR).
The mismatch between the camera’s and the user’s point and ﬁeld
of view results in mismatching visualizations inside and outside of
the magic lens (and is also called dual-view problem [7]). The vi-
sualization inside the magic lens depends on the camera parameters
while the user’s perception outside is based on his or her natural vi-
sion (Figure2(a)). This misalignment is especially confusing when
virtual content inside the magic lens has to be visually connected to
real objects outside the magic lens, and during interactions with the
AR environment through the magic lens, i.e., when the user sees its
own hand inside and outside the lens.

This is demonstrated in Figure 1 (a), showing a user interacting
with an AR game through the magic lens of the handheld device. In
the game, the user has to rotate a small physical marker in order to
align a virtual mirror with a laser beam to control reﬂections of the
beam. The interaction requires grasping the physical marker and
subsequently rotating it. While the rotations may be performed en-
tirely inside the AR magic lens, manipulating the marker involves
moving the hand from the outside into the view inside the magic
lens. When rendering the AR scene from the cameras point of view
(Figure 1(a)) the visual mismatch between parts of the hand, which

 
 
 
 
 
 
(a) Device Perspective Rendering

(b) User Perspective Rendering

(c) Approximated User Perspective Rendering

Figure 2: Traditional approaches to magic lens rendering for handheld AR. (a) Device perspective rendering provides augmentations from the
point of view of the camera. (b) User perspective rendering uses 3D head tracking to provide augmentation from the user’s point of view. (c)
Fixed point of view user perspective rendering does not require 3D head tracking. Instead it assumes a static spatial relationship between the
user’s head and the display surface.

are outside, and other parts of the hand which are inside, make
precisely grasping the marker difﬁcult. User perspective rendering
(UPR) has been proposed to overcome this problem [5]. It aligns
the AR view inside the magic lens to the view of the user outside of
the magic lens, to create the illusion of looking through a transpar-
ent glass frame (Figure2(b)). In fact, it has been shown that users,
who were never exposed to handheld AR before, expect UPR as the
default view [7]. Current approaches targeting typically implement
UPR by computing the users head position in each frame before
they align the AR view based respectively. Figure 1(b) shows the
AR view with UPR. Notice that the ﬁngers inside the magic lens vi-
sually connect to the hand outside. This potentially makes selection
tasks easier [5].

Implementations of UPR have often been explored using head
tracking systems in laboratory setups. They either include station-
ary external camera tracking [20] or additional hardware setups
such as depth sensors [5]. On mobile devices, UPR has been im-
plemented using 3D face tracking based on the video feed of front
camera of modern mobile devices [9]. While this approach works in
theory, implementations suffer from the computational demands of
the additional head tracking. Based on our experience, this results
in an overall low performance of the application, which can also
be traced down to the devices’ entering thermal throttling mode to
prevent overheating. As a result, the usability of UPR applications
can be substantially be reduced in real-world settings. A compu-
tationally less demanding alternative for mobile devices has been
proposed by Pucihar et al. [6]. Instead of tracking the users head
pose the authors manually measure the distance of the head to the
device once at the beginning of the application, and they assume the
user looking perpendicular through the center of device over the en-
tirety of the application (Figure2(c)). This approach is called Fixed
Point of View user perspective rendering (FUPR). It avoids the com-
putational effort required to continuously track the users head pose.
However, FUPR fails to generate user perspective graphics for
large interaction spaces. For example, Figure 3(a) shows a main-
tenance scenario, which requires to touch switches and buttons at
the top and at the bottom of a large electric cabinet. In such a sce-
nario, the spatial relationship between the users head position and
the handheld device frequently changes, which in turn will eventu-
ally render FUPR ineffective.

In this paper, we combine the resource-friendly approach of
FUPR with continuously effective UPR. We achieve this by adding
a lightweight Kanade-Lucas-Tomasi (KLT) tracker [24, 14] to the
head-tracking pipeline of traditional UPR systems. We use KLT-
tracking to estimate head motion in image space, which we use to
subsequently decide whether the parameters of FUPR need to be
refreshed. Since simple thresholding of user motion will eventu-
ally introduce a certain amount of error, we present the idea of dual
thresholding which incorporates temporal and spatial thresholding
in order to derive a more precise 3D head pose when head motion

stops. By automatically updating the parameters based on a 3D
head tracker, we furthermore do not require any manual initializa-
tion. Since our approach incorporates less updates of the head pose,
it is also more stable and more robust in environments where visual
tracking is difﬁcult.

In the following we describe our system architecture and we re-
port performance measurements as well as the results of a user ex-
periment comparing DPR, UPR, FUPR to our approach of adaptive
user perspective rendering (AAUPR). Notice, since the approach of
Tomioka et al. [26] is called Approximated User Perspective Ren-
dering (AUPR) we choose AAUPR for our technique.

2 RELATED WORK
Baricevic et al. evaluated the effects of display size on UPR and
found that, using a simulation, a tablet-sized display allows for
signiﬁcantly faster performance of a selection task compared to a
handheld display and that UPR outperformed DPR for a selection
task[5]. They also prototyped a UPR system with geometric re-
construction using a Kinect for reconstruction of the physical sur-
rounding and a Wiimote for head tracking.
In follow up works,
they proposed to replace an active depth sensor by gradient domain
image-based rendering method combined with semi-dense stereo
matching [3, 4]. Other authors also employ depth-sensors for scene
reconstruction in UPR [27].

Tomioka et al. and Hill et al. proposed an UPR implementa-
tion through transforming the back-facing camera image using ho-
mographies [26, 11]. Samini et al. investigated UPR when using
an external outside-in tracking system for spatial registration and
proposed a geometric correction scheme for introduced registration
errors [20].

Pucihar et al. investigated ﬁxed point of view UPR (FUPR) ver-
sus DPR in a target acquisition task with and without scene conti-
nuity across device boundaries [6]. Speciﬁcally, they assume that
the user’s face is in a ﬁxed and predetermined position while inter-
acting with the system They found that most users who never expe-
rienced handheld AR before actually expected UPR as the default
mode of presentation. The study also indicated that UPR outper-
formed DPR in terms of accuracy, task completion time, subjective
workload and preference. They later extended their investigations
to speciﬁcally study the use of surrounding visual context in a map
navigation task [7] and to sketching applications [18]. Pucihar et
al. also proposed a speciﬁc variation of UPR, called contact-view,
which allows pseudo transparent rendering of documents when a
smartphone lies directly on the document [17, 16], achieving simi-
lar effects compared to proprietary solutions using transparent dis-
plays [12, 13].

Grubert et al. employed UPR on mobile devices by combining
head tracking using the built-in front-facing RGB camera for head
tracking and natural feature-based tracking of the AR device using
back-facing RGB camera [9]. Rececently, Samini et al. compared

(a)

(b)

(c)

Figure 3: System overview. In a typical usage scenario the user moves the handheld device from one position (a) to another (c) to view different
AR instructions. The resulting transition of the user’s head pose, in relation to the device, is illustrated in the upper row of (b) showing single
images from the front camera of the mobile device. The diagram in (b) shows a symbolic graph of the CPU usage during our approach (AAUPR)
compared to UPR. During user motion the head position is updated depending on the current threshold value. Once the user has moved to the
desired point of view, the head pose is reﬁned for this position (last peak in the graph).

UPR and DPR for a ﬁnd-and-select and a 3D object manipulation
task [19]. While they found DPR to outperform UPR in terms of
task completion time for the ﬁnd-and-select task, both approaches
where on par for an object manipulation task, and UPR was pre-
ferred by users.

Our approach is speciﬁcally targeting mobile devices which of-
fer limited computational resources. Therefore, we have positioned
our system between fully dynamic, but resource intensive UPR ap-
proaches relying on constant face tracking and the ﬁxed point of
view UPR approach (FUPR) of Pucihar et al. which is only appli-
cable in constrained application scenarios.

3 SYSTEM

The main insight used for the design of our system is that updates
on the users head pose are only necessary after a certain amount of
motion and that small head motion can be ignored. Since FUPR as-
sumes no head motion at all, it cannot support scenarios that require
a large interaction space. Figure 3 shows an example application
where a maintenance worker is receiving visual instructions on a
handheld AR device which include pressing buttons on a large elec-
tric cabinet. In such a scenario, the user has to correctly perceive
instructions both, in the right top corner as well as in the corner on
bottom left of the cabinet. Such large distances between points in
space which need augmentations cannot be handled by FUPR sys-
tems because the calibration of the users spatial relationship to the
display cannot hold.

However, based on the user experiment provided by Pucihar et
al. [6] we assume FUPR provides effective UPR for small to no
changes of the users head position relative to the device. There-
fore, we efﬁciently compute user perspective graphics by adding a
low cost tracker to estimate user motion before we start expensive
head tracking for motion larger than a certain threshold distance. In
the following we explain the main components of our system: (1)
user perspective rendering on mobile devices, (2) efﬁcient motion
estimation, and (3) dual thresholding.

User Perspective Rendering on Mobile Devices. Traditional
UPR requires estimating the user’s 3D head position and the 6 de-
grees of freedom pose of the mobile device at every frame. Im-

plementations on modern mobile smartphones derive the head pose
using a 3D face tracker. The face tracker is usually applied to the
video stream of the front camera while AR scene tracking is per-
formed on the video stream of the back camera [9].

For device tracking we use natural feature tracking. In our cur-
rent prototype we estimate the pose of the device using PTC’s Vu-
foria SDK 1. For 3D head tracking we use a combination of a 2D
deformable FaceTracker [21] and a subsequent 3D model, similar
to the approach of Grubert et al [9].

Motion Estimation. We derive an estimate of the user’s mo-
tion in order to handle updates of the 3D head tracker. While 3D
head tracking is expensive we aim at a low cost motion estimation.
Therefore, we estimate motion in image space only. Our prototype
uses KLT-tracking of few very distinctive features. We use the face
tracker which was applied during the last 3D head pose estimation
in order to ﬁnd the points which describe the eyes of the user. Mo-
tion estimation is subsequently performed on these two points only.
Whenever KLT-tracking fails we start full 3D head tracking to up-
date UPR and to re-initialize the motion estimation.

Dual Thresholding. After estimating the user’s motion in
image-space we apply simple thresholding to decide if an update of
the user’s 3D head pose is necessary. However, simple threshold-
ing introduces an error relative to the size of the current threshold
value. Furthermore, since we apply thresholding in image space the
error increases for distant head poses.

In order to reduce the error during interaction, we combine spa-
tial with temporal thresholding. We assume that the spatial rela-
tionship between the AR display and the 3D head pose of the user
mostly changes during scene exploration or while moving the dis-
play from one point of interaction to the next point. However,
during interaction with the scene the 3D head pose usually stays
rather steady. Therefore, we reduce the threshold over time and re-
initialize it to its maximal value each time we estimate the 3D head
pose using the head tracker. This approach allows us to provide reg-
ular updates of the 3D head pose during scene exploration, while
also ensuring a precise 3D head pose during interaction (assuming
stable head poses during interaction). This approach is outlined in

1https://www.vuforia.com

Figure 4: User Experiment.

Algorithm 1 and illustrated in Figure 3.

Algorithm 1 Dual Thresholding

1: E ← |PosEyeCalc − PosEyeFlow|
2: ∆E ← |PosEyeFlowlast − PosEyeFlow|
3: if E > ε OR (∆E < ε ∗ 0.1 AND !isPrecise) then
4:
5:
6: else
7:

recalculateFacePose
isPrecise ← T RUE

isPrecise ← FALSE

ε refers to the spatial threshold and E to the error in pixels be-
tween the current estimated eye positions and the position calcu-
lated in the last precise detection step. ∆E is the difference of E
between the current and the last head tracking frame. The threshold
ε determines the trade-off between coarse but fast head pose esti-
mation and precise but expensive tracking during user motion. Our
system uses an empirically estimated ε of 3% of the diagonal of the
input image in pixels.

4 PERFORMANCE ANALYSIS
We compared the rendering performance of our system (AAUPR)
to full featured UPR and FUPR (which does not require any head
tracking). The performance measures of have been recorded on an
HTC-M8 Android smartphone. The numbers in Table 1 indicate
mean values over 1000 frames for all conditions. Resolution refers
to the image resolution of the back camera, Frame Time refers to
the average time spend to render a single frame, and Tracking Time
refers to the time spent for head tracking in total over 1000 frames.
The resolution of the back camera was set to 640x480 pixel in all
conditions, and visual tracking was performed in the same envi-
ronment for during all system measurements to provide the same
number of visual features in all conditions. The front camera de-
livered new video frames at a maximum of 15 frames per second
(which is the hardware limit of the camera). Please note that the
head tracker runs in a separate thread.

5 USER EXPERIMENT
Design. We designed a repeated measures within-subjects study
to compare the performance and user experience of different imple-
mentations of user-perspective rendering. Therefore, we introduced
an independent variable rendering with four conditions: device-
perspective rendering (DPR), user-perspective rendering (UPR),

Table 1: Performance measured in milliseconds.

System Resolution
320x240
UPR
320x240
AAUPR
320x240
FUPR
640x480
UPR
640x480
AAUPR
640x480
FUPR

Frame Time
29.379
23.890
20.733
42.860
28.706
20.733

Tracking Time
14.080
4.602
0.0
30.094
13.363
0.0

approximated user-perspective rendering (FUPR), adative user-
perspective rendering (AAUPR).

The task was a pointing task in which participants had to align
the mobile device with a circular target area and touch the target
area while looking through the view of the mobile device. The
target area was only visible in the device view so that participants
were forced to interact with the target area by using the different
rendering conditions. Like Pucihar et al. [6] we are interested in
the effect of the spatial distortion when looking through the device.
Therefore, we do not show the live video during our experiment
so that participants do not see their hands during interaction. The
target area had a radius of 20mm based on the recommended size
of ISO-9241 [1] for button input. The viewpoints of the target areas
were placed randomly. For each rendering condition participants
performed 40 repetitions. Rendering was counterbalanced using a
balanced Latin square.

As dependent variables we measured task completion time
(TCT) and error of each task, subjective workload was measured
by the raw NASA TLX [10], usability using the Single Ease Ques-
tion (SEQ) [22] and overall preference.

Sixteen participants (3 female, X =30.7 (sd=3.5) years old) vol-
unteered for the study. On a scale from one to ﬁve, ﬁve meaning
best, the mean of self-rated AR experience was 3.3 (sd=1.4).

Apparatus. Initially, we planned to perform the experiment us-
ing our mobile implementation on an Android based smartphone
(HTC-M8). However, due to the computational demands of the
head tracking, the phone overheated and throttled the CPU during
the pilot test after approximately 5 minutes in full UPR mode. All
other conditions did not show this behaviour. However, since the
phone didn’t cool down fast enough, CPU throttling had an impact
on all subsequent measurements. Therefore, we did not use a mo-
bile phone in the study setup, but settled with a PC setup and a
wired connection to a mobile display (Figure 4).

The apparatus consists of an installed touch screen and a hand-

held screen. The installed screen was a Dell S2340T multi-touch
monitor of size 23” (506 x 287 mm) and was used for recording
touch input of the user. The handheld touchscreen was a HTC M8
phone (5” screen, 109 x 61 mm) attached to a PC via USB and was
used to achieve an AR view implementing the different rendering
conditions. The circular target areas of the task were shown as aug-
mentation registered on the installed screen. The augmentation was
only visible when viewed through handheld AR device. The touch
screen could be rotated to allow participants to comfortably work
with the screen while standing. The head tracking and the tracking
of the handheld screen was performed on the PC.

Procedure. After an introduction and ﬁlling out a demographic
questionnaire, measurements were taken to calibrate the systems of
the rendering condition. We measured inter-pupillary distance and
the distance between the handheld device and the participant’s head
to set up the ﬁxed viewpoint for FUPR. To determine the distance
participants were asked to hold the handheld device centered onto
the touch screen at a distance of 15 cm. The distance was only
calibrated once. Afterwards, participants familiarized themselves
with the ﬁrst rendering condition by performing the task until they
felt comfortable using the system. Then, the measured tasks started.
Participants were instructed to quickly point to the target area by
performing one ﬂuid natural hand motion to the area, where the
target was expected. Participants were instructed to not move out of
their initial position, but to turn their body to reach the target areas
farther away from the center. This should simulate the movement
of narrow work spaces, where the head position is not always ideal
for FUPR.

For each task, participants ﬁrst had to locate the target area by
searching with the AR view. After locating the target area, partici-
pants touched the handheld device screen and then, with the same
hand, the target area on the screen. The TCT was measured between
the touch of the handheld device and the touch screen. Hence, TCT
does not include search time for the target, but focuses only on the
coordination of the hand as expected to be seen through the AR
device. Error was recorded as the Euclidean distance between the
detected touch point and the center of the target area. Participants
received a distinct visual and audio conﬁrmation, for either hitting
or missing the target area.

Participants performed 40 repetitions per rendering condition.
After a rendering condition, participants ﬁlled out the NASA TLX
and the SEQ. The next rendering condition started thereafter, fol-
lowing the same procedure. After ﬁnishing the last rendering con-
dition and ﬁlling out NASA TLX and SEQ, participants ﬁlled out a
preference questionnaire and a semi-structured interview was con-
ducted. A session took approximately 30 minutes.

With 16 participants, four rendering conditions and 40 repeti-
tions per rendering condition, there were a total of 16 × 4 × 40 =
2560 trials.

Hypotheses. Due to the nature of the pointing task we did not
expect signiﬁcant differences in task completion time. However,
due to the spatial distortion of the view of the DPR condition, we
expected DPR to have a signiﬁcantly higher error rate than any
other condition (H1). Due to the optimal compensation of the spa-
tial distortion, UPR will have less errors than FUPR (H2). We hy-
pothesize that our novel approach taken with AAUPR produces sig-
niﬁcantly less errors than FUPR (H3).

Results The data was evaluated using a level of signiﬁcance of
0.05. The data fulﬁlled sphericity and normality requirements and,
therefore, was analyzed using ANOVA and post-hoc pairwise t-tests
with Bonferroni correction. Questionnaire data was analyzed using
a non-parametric Friedman tests followed by pairwise Wilcoxon
signed rank tests with Bonferroni correction. The reported p-values
have been Bonferroni corrected to reﬂect a signiﬁcance level of
0.05. The statistical analysis was performed using the software R.
The ANOVA revealed a signiﬁcant difference in error for the

Time (s)
Error (pxl)
TLX
SEQ
Preference

DPR
1.5 (0.8)
26.8 (14.4)
52 (16.3)
3.1 (1.6)
0

UPR
2 (1.4)
17.3 (11.6)
38.6 (14.6)
4.75 (1.3)
2

FUPR
1.7 (1.1)
20.9 (12.5)
44.6 (14)
3.6 (1.5)
3

AAUPR
1.8 (1.1)
15.9 (10.4)
30.9 (14.4)
5.3 (1.7)
8

Table 2: Study results. Mean and standard deviation of time and
error, and SEQ and TLX results. Last row indicates the number of
participants preferring the interface. Three participants did not state
a clear preference, except not choosing DPR.

Figure 5: Study results. Boxplot of the error in pixels.

rendering condition (F(3,45)=12.26, p<0.001). Post-hoc tests re-
vealed signiﬁcant differences between DPR and UPR (p<0.001),
DPR and AAUPR (p<0.001) and a weak signiﬁcant difference be-
tween FUPR and AAUPR (p=0.06).

Friedman tests revealed signiﬁcant differences in TLX (χ 2(3) =
20.01, p < 0.001) and SEQ (χ 2(3) = 20.59, p < 0.001). Post-hoc
tests revealed signiﬁcant differences for TLX between DPR and
AAUPR (Z=3.11, p<0.005), FUPR and AAUPR (Z=2.64,p<0.05)
and a near signiﬁcant difference between DPR and UPR (Z=-
2.53, p=0.053). Post-hoc tests revealed signiﬁcant differences for
SEQ between DPR and UPR (Z=2.63, p<0.05), DPR and AAUPR
(Z=3.09, p<0.005) and FUPR and AAUPR (Z=3.04, p<0.01).

Discussion As hypothesized, the results of DPR were worst in
all tested measurements. DPR had a signiﬁcantly higher error than
UPR and AAUPR due to the optimal spatial distortion of the ren-
dered user-perspective view in these conditions. This is also re-
ﬂected in the SEQ, which was rated signiﬁcantly lower compared
to UPR and AAUPR. In terms of TLX, DPR also had a signiﬁcantly
higher workload than AAUPR and a weak signiﬁcant difference to
UPR. However, we could not ﬁnd a signiﬁcant difference between
DPR and FUPR and, therefore, could not replicate the ﬁndings of
Pucihar et al. [6]. One possible explanation could be the nature of
the task, that required interactions over a large distance which even-
tually requires updating the user’s head pose relative to the device.
Overall, we partially accept H1.

Interestingly, UPR did not perform signiﬁcantly better than
FUPR in any measurement. Therefore, we reject H2. We believe
that the lack of performance comes from the implementation of the
head tracking. During the experiments we noticed jitter in the head
tracking, that might inﬂuenced the pointing accuracy. This also
could explain the better performance of AAUPR, which did not suf-

fer from the problem of continuous jitter, because the tracking rate
was lower than the one of UPR. Hence, AAUPR performed signiﬁ-
cantly better than FUPR in terms of error, TLX and SEQ measure-
ment. Thereby, we accept H3. Note that the head tracking could be
implemented more stable using head mounted ﬁducials. However,
we are aiming at a mobile and self contained system, why we have
implemented head tracking based on visual face tracking.

In terms of user preference shown in the last row of Table 2 three
participants did not clearly prefer any user perspective rendering.
However, they were clear in indicating that they did not prefer DPR.
For the preference results of the other 13 participants we performed
an exact binomial test comparing to chance (0.25) and found a sig-
niﬁcant difference in preference for the AAUPR interface (p<0.05).
This is in line with the results of the study, indicating an advantage
of AAUPR over FUPR. The signiﬁcant preference over UPR also
underlines the advantage of AAUPR in terms of more stable, dis-
crete tracking updates.

To be able to record user interactions we performed the exper-
iment on a large touch screen. However, the interaction space is
often much larger which requires the user to move the AR display
much more around (see Figure3 for a real life example). Since our
system is designed to compensate user motion, we believe that in-
teractions in spaces larger than the one used in our experiment will
lead to similar results or to a favorable bias towards AAUPR.

6 CONCLUSION AND FUTURE WORK
We have presented a system for user perspective rendering on hand-
held devices which supports large interaction spaces. Our system
does not perform 3D head tracking in each frame, instead we mea-
sure motion over time to trigger updates. This reduces the overall
computational demands of the system. During our experiment we
furthermore noticed that less updates of the user’s head pose pro-
vides more stable renderings on mobile phones. We believe this
is the reason why users prefer our approach over continuous user
perspective rendering.

While our system reduces the impact of tracking failure, erro-
neous head tracking still impacts the performance of our system to
some degree. Therefore, future work needs to further investigate
3D head tracking on mobile devices. In addition, we will further
optimize the number of necessary updates of user’s head pose. In
this regard, we will incorporate further information available to the
system at run-time, such as the state of the application or the current
task to perform or the estimated distance between the current pose
and an anticipated future pose of the device.

ACKNOWLEDGEMENTS
This work was funded by a grant from the Competence Centers for
Excellent Technologies (COMET) 843272 and the EU FP7 project
MAGELLAN (ICT-FP7-611526).

REFERENCES

[1] Iso. 2000. iso/dis 9241–9 ergonomic requirements for ofﬁce work
with visual display terminals (vdts) - part 9: Requirements for non-
keyboard input devices, international standard, international organiza-
tion for standardization. 2000.

[2] E. Andrukaniec, C. Franken, D. Kirchhof, T. Kraus, F. Sch¨ondorff,
and C. Geiger. Outlive an augmented reality multi-user board game
played with a mobile device. In Proc. of ACE, pages 501–504, 2013.
[3] D. Bariˇcevi´c, T. H¨ollerer, P. Sen, and M. Turk. User-perspective aug-
In Proc. of VRST, pages

mented reality magic lens from gradients.
87–96, 2014.

[4] D. Baricevic, T. Hollerer, P. Sen, and M. Turk. User-perspective
ar magic lens from gradient-based ibr and semi-dense stereo. IEEE
TVCG, PP(99):1–1, 2016.

[5] D. Bariˇcevi´c, C. Lee, M. Turk, T. H¨ollerer, and D. A. Bowman. A
hand-held ar magic lens with user-perspective rendering. In Proc. of
IEEE ISMAR, pages 197–206, 2012.

[6] K. ˇCopiˇc Pucihar, P. Coulton, and J. Alexander. Evaluating dual-view
perceptual issues in handheld augmented reality: device vs. user per-
spective rendering. In Proc. of ACM International conference on Mul-
timodal Interaction, pages 381–388, 2013.

[7] K. ˇCopiˇc Pucihar, P. Coulton, and J. Alexander. The use of surround-
ing visual context in handheld ar: device vs. user perspective render-
ing. In Proc. of CHI, pages 197–206, 2014.

[8] J. Grubert, M. Pahud, R. Grasset, D. Schmalstieg, and H. Seichter.
The utility of magic lens interfaces on handheld devices for touristic
map navigation. Pervasive and Mobile Computing, 18:88–103, 2015.
[9] J. Grubert, H. Seichter, and D. Schmalstieg. Towards user perspective
augmented reality for public displays. In Proc of. IEEE ISMAR, pages
339–340, 2014.

[10] S. G. Hart and L. E. Staveland. Development of nasa-tlx (task load
index): Results of empirical and theoretical research. Advances in
psychology, 52:139–183, 1988.

[11] A. Hill, J. Schiefer, J. Wilson, B. Davidson, M. Gandy, and B. MacIn-
tyre. Virtual transparency: Introducing parallax view into video see-
through ar. In Proc of. IEEE ISMAR, pages 239–240, 2011.

[12] J. D. Hincapi´e-Ramos, S. Roscher, W. B¨uschel, U. Kister, R. Dachselt,
and P. Irani. car: Contact augmented reality with transparent-display
mobile devices. In Proc. of ACM International Symposium on Perva-
sive Displays, 2014.

[13] J. D. Hincapi´e-Ramos, S. Roscher, W. B¨uschel, U. Kister, R. Dachselt,
and P. Irani. tpad: designing transparent-display mobile interactions.
In Proceedings of ACM Conference on Designing Interactive Systems,
pages 161–170, 2014.

[14] B. D. Lucas and T. Kanade. An iterative image registration technique
with an application to stereo vision. In Proceedings of IJCAI, pages
674–679, 1981.

[15] P. Mohr, B. Kerbl, M. Donoser, D. Schmalstieg, and D. Kalkofen. Re-
targeting technical documentation to augmented reality. In Proceed-
ings of CHI ’15, pages 3337–3346, 2015.

[16] K. ˇC. Pucihar and P. Coulton.

[poster] contact-view: A magic-lens
paradigm designed to solve the dual-view problem. In Proc of. IEEE
ISMAR, pages 297–298, 2014.

[17] K. ˇC. Pucihar and P. Coulton. Utilizing contact-view as an augmented
reality authoring method for printed document annotation. In Proc of.
IEEE ISMAR, pages 299–300, 2014.

[18] K. ˇC. Pucihar, J. Grubert, and M. Kljun. Dual camera magic lens for
handheld ar sketching. In Human-Computer Interaction, pages 523–
527. Springer, 2015.

[19] A. Samini and K. Lundin Palmerius. A User Study on Touch Interac-
tion for User-Perspective Rendering in Hand-Held Video See-Through
Augmented Reality, pages 304–317. 2016.

[20] A. Samini and K. L. Palmerius. A perspective geometry approach to
user-perspective rendering in hand-held video see-through augmented
reality. In Proceedings of ACM VRST, pages 207–208, 2014.

[21] J. M. Saragih, S. Lucey, and J. F. Cohn. Face alignment through sub-
space constrained mean-shifts. In Proc of IEEE ICCV, pages 1034–
1041, 2009.

[22] J. Sauro and J. S. Dumas. Comparison of three one-question, post-task
In Proceedings of CHI, pages 1599–1608,

usability questionnaires.
2009.

[23] D. Schmalstieg and T. Hollerer. Augmented Reality: Principles and

Practice. Addison Wesley Professional, 2015.

[24] J. Shi and C. Tomasi. Good features to track. In Proc. ofIEEE CVPR,

pages 593–600, 1994.

[25] M. Tatzgern, D. Kalkofen, R. Grasset, and D. Schmalstieg. Hedgehog
labeling: View management techniques for external labels in 3d space.
In Proceedings of IEEE Virtual Reality, VR ’14, 2014.

[26] M. Tomioka, S. Ikeda, and K. Sato. Approximated user-perspective
rendering in tablet-based augmented reality. In Proc of. IEEE ISMAR,
pages 21–28, 2013.

[27] Y. Unuma, T. Niikura, and T. Komuro. See-through mobile ar system
for natural 3d interaction. In Proceedings of IUI Companion, pages
17–20, 2014.

[28] S. Zollmann, D. Kalkofen, C. Hoppe, S. Kluckner, H. Bischof, and
G. Reitmayr. Interactive 4d overview and detail visualization in aug-
mented reality. In Proc. of IEEE ISMAR, pages 167–176, 2012.

