Enhancing Convolutional Neural Networks for Face Recognition with
Occlusion Maps and Batch Triplet Loss

Daniel S´aez Triguerosa,b, Li Menga,∗, Margaret Hartnettb

aSchool of Engineering and Technology, University of Hertfordshire, Hatﬁeld AL10 9AB, UK
bIDscan Biometrics (a GBG company), London E14 9QD, UK

8
1
0
2

n
u
J

0
1

]

V
C
.
s
c
[

4
v
3
2
9
7
0
.
7
0
7
1
:
v
i
X
r
a

Abstract

Despite the recent success of convolutional neural networks for computer vision applications, unconstrained
face recognition remains a challenge.
In this work, we make two contributions to the ﬁeld. Firstly, we
consider the problem of face recognition with partial occlusions and show how current approaches might
suﬀer signiﬁcant performance degradation when dealing with this kind of face images. We propose a simple
method to ﬁnd out which parts of the human face are more important to achieve a high recognition rate,
and use that information during training to force a convolutional neural network to learn discriminative
features from all the face regions more equally, including those that typical approaches tend to pay less
attention to. We test the accuracy of the proposed method when dealing with real-life occlusions using the
AR face database. Secondly, we propose a novel loss function called batch triplet loss that improves the
performance of the triplet loss by adding an extra term to the loss function to cause minimisation of the
standard deviation of both positive and negative scores. We show consistent improvement in the Labeled
Faces in the Wild (LFW) benchmark by applying both proposed adjustments to the convolutional neural
network training.

Keywords:

face recognition, convolutional neural networks, facial occlusions, distance metric learning

1. Introduction

Deep learning models, in particular convolutional
neural networks (CNNs), have revolutionised many
computer vision applications, including face recog-
nition. As recent benchmarks [1, 2, 3] show, most of
the top performing face recognition algorithms are
based on CNNs. Even though these models need to
be trained with hundreds of thousands of faces to
achieve state-of-the-art accuracy, several large-scale
face datasets [4, 5, 3] have recently been made pub-
licly available to facilitate this.

Most of the recent research in the ﬁeld has fo-
cused on unconstrained face recognition. CNN
models have shown excellent performance on this
task, as they are able to extract features that are
robust to variations present in the training data (if
enough samples containing these variations are pro-
vided). Nonetheless, in this work, we show how

∗Corresponding author
Email address: l.1.meng@herts.ac.uk (Li Meng)

partial facial occlusions remain a problem for un-
constrained face recognition. This is because most
databases used for training do not present enough
occluded faces for a CNN to learn how to deal with
them. Common sources of occlusion include sun-
glasses, hats, scarves, hair, or any object between
the face and the camera. This is of particular rel-
evance to applications where the subjects are not
expected to be co-operative (e.g. in security appli-
cations). One way of overcoming this problem is to
train CNN models with datasets that contain more
occluded faces. However, this task can be challeng-
ing because the main source of face images is usu-
ally the web, where labelled faces with occlusions
are less abundant.

Bearing this in mind, we propose a novel data
augmentation approach for generating occluded
face images in a strategic manner. We use a tech-
nique similar to the occlusion sensitivity experi-
ment proposed in [6] to identify the face regions
where a CNN extracts the most discriminative fea-
In our proposed method, the identi-
tures from.

Preprint submitted to Elsevier

June 12, 2018

 
 
 
 
 
 
ﬁed face regions are covered during training to force
a CNN to extract discriminative features from the
non-occluded face regions with the goal of reducing
the model’s reliance on the identiﬁed face regions.
Our CNN models trained using this approach have
demonstrated noticeable performance improvement
on face images presenting real-life facial occlusions
in the AR face database [7].

CNN models for face recognition can be trained
using diﬀerent approaches. One of them consists of
treating the problem as a classiﬁcation one, wherein
each identity in the training set corresponds to a
class. After training, the model can be used to
recognise faces that are not present in the train-
ing set by discarding the classiﬁcation layer and us-
ing the features of the previous layer as the face
representation. In the realm of deep learning, these
features are commonly referred to as bottleneck fea-
tures. Following this ﬁrst training stage, the model
can be further trained using other techniques to op-
timise the bottleneck features for the target applica-
tion [4, 8]. Another common approach to learning
face representation is to directly learn bottleneck
features by optimising a distance metric between
pairs of faces [9, 10] or triplets of faces [11].

Positive results have been demonstrated when
combining these two techniques, either by (i) jointly
training with a classiﬁcation loss and a distance
metric loss [12]; or (ii) by ﬁrst training with a clas-
siﬁcation loss and then ﬁne-tuning the CNN model
with a distance metric loss [5, 13, 14]. In this work,
we adopt the latter approach and use the triplet
loss to optimise bottleneck features. The goal of
the triplet loss is to separate positive scores (ob-
tained when comparing pairs of faces belonging to
the same subject) from negative scores (obtained
when comparing pairs of faces belonging to diﬀer-
ent subjects) by a minimum margin. We argue that
training with this loss function can lead to unde-
sired results. Thus, we propose a new loss function
to alleviate this issue by also minimising the stan-
dard deviation of both positive and negative scores.
Using the Labeled Faces in the Wild (LFW) bench-
mark, we show that the CNN models trained with
our proposed loss function consistently outperform
those trained with the triplet loss function.

The remainder of this paper is organised as fol-
lows. Section 2 provides a review of the related
work, with a focus on deep learning approaches and
face recognition with occlusion. Section 3 details
our CNN architecture, training procedure and (i)
our method of improving recognition of partially

2

occluded faces; and (ii) our novel loss function. Sec-
tion 4 describes our experimental results, and our
conclusions are presented in Section 5.

2. Related Work

One of the ﬁrst successful applications of convo-
lutional neural networks was handwritten character
recognition [15]. Soon after, the ﬁrst face recogni-
tion algorithm that included a CNN was proposed
in [16]. However, unlike [15], their algorithm [16]
was not entirely based on neural networks. Years
later, [9] proposed an end-to-end Siamese architec-
ture trained with a contrastive loss function to di-
rectly minimise the distance between pairs of faces
from the same subject while increasing the dis-
tance between pairs of faces from diﬀerent subjects.
These CNN-based face recognition models did not
achieve groundbreaking results, mainly due to the
low capacity of the networks used and the relatively
small datasets available for training at the time.
It was not until these models were scaled up and
trained with large amount of data [17] that CNNs
became the state-of-the-art approach for face recog-
nition.

In particular, Facebook’s DeepFace [18], one of
the ﬁrst CNN-based approaches for face recogni-
tion that used a high capacity model, achieved an
accuracy of 97.35% on the LFW benchmark, re-
ducing the error of the previous state-of-the-art by
27%. DeepFace used an eﬀective 3D alignment al-
gorithm to frontalise faces before feeding them to a
CNN with several convolutional, max-pooling and
locally connected layers. The CNN was trained
with a dataset containing 4.4 million faces from
4,030 subjects. Concurrently, the DeepID system
[8] achieved similar results by concatenating the
bottleneck features of 60 CNNs trained on diﬀerent
face crops and optimising the concatenated feature
vector using the Joint Bayesian method proposed in
[19]. More work by the same authors [12] achieved
further performance improvements by simultane-
ously training with a contrastive loss (similar to
the one used in [9]) and a classiﬁcation loss. The
authors claimed that the contrastive loss reduced
intra-personal variations and the classiﬁcation loss
increased inter-personal variations. The described
system achieved an accuracy of 99.15% on the LFW
benchmark using a relatively small training set con-
taining 202,599 face images of 10,177 identities.

As shown in [20], training data is one of the
most important factors for increasing the accuracy

of CNN-based approaches.
In particular, it was
shown that a CNN model becomes more accurate
as the number of diﬀerent identities in the train-
ing set increases, provided that several samples per
identity are available. A good example is Google’s
FaceNet [11], which used between 100 million and
200 million face images of about 8 million diﬀer-
ent people for training. A triplet loss function with
a novel online triplet sampling strategy was used
for training FaceNet, which achieved an accuracy
of 99.63% on the LFW benchmark. The triplet loss
has been subsequently used to ﬁne-tune CNNs pre-
trained with a classiﬁcation loss with good results
[5, 21]. Indeed, the triplet loss has become one of
the most popular training objectives for face ver-
iﬁcation [11, 5, 21, 13, 14], and has been used in
other image similarity tasks such as ranking im-
ages [22, 23, 24] and learning local image descrip-
tors [25, 26]. Other popular tricks to improve the
performance of CNN-based face recognition include
Joint Bayesian [4, 9, 19, 27] and building ensemble
models trained on diﬀerent face crops [9, 19, 21, 27].
Recognition of faces with occlusions has been
typically handled using two diﬀerent types of meth-
ods, namely, (i) methods that extract local features
from the non-occluded regions or (ii) methods that
attempt to reconstruct occluded regions.

In the ﬁrst type of methods, occluded regions are
detected ﬁrst and discarded from the set of local re-
gions used to represent a face. For example, Gabor
wavelet features, PCA and SVM were used in [28]
to detect the occluded regions and LBP descrip-
tors were used to match the non-occluded regions.
In [29], eigen decomposition was used to generate
a reformed image which was subtracted from the
original occluded image to locate the occluded re-
gions. Gabor wavelet features and PCA were used
to extract features from the non-occluded regions.
The method in [30] proposed to extract histograms
of Gabor-LBP features on the entire image and then
use SIFT keypoint matching to select which subre-
gions should be taken into consideration.

Among the methods that attempt to reconstruct
occluded regions, the sparse representation-based
classiﬁcation (SRC) proposed in [31] has received a
lot of attention. This method attempts to represent
an occluded test image by a linear combination of
training images of the same class and an error term
that accounts for the occluded region. The class
that gives the closest reconstruction of the original
image is considered the correct one. Several im-
provements to this method have been proposed. For

3

example, [32] extended SRC by using a Markov ran-
dom ﬁeld to model the prior assumption about the
spatial continuity of the occluded regions. In [33] it
was proposed to weight each pixel in the image inde-
pendently to achieve better reconstructed images.
Another improvement [34] proposed to use linear
combinations of Gabor wavelet features instead of
pixel intensities, which increased the discrimination
power of the face representation and reduced com-
putational costs. The drawback of these methods
is that the reconstruction can only be achieved for
images of the same class as the training images.

Another method that has gained popularity in
image reconstruction tasks such as image denoising
and image inpainting is the denoising autoencoder
[35, 36]. The idea is to train a model to learn a map-
ping between corrupted and clean images. Several
approaches have used this idea to reconstruct oc-
cluded face images. For example, a stacked sparse
denoising autoencoder [36] with two channels was
proposed in [37] to discard noise activations in the
encoder network and achieve better image recon-
structions. Another related method was proposed
in [38]. They used a novel mapping-autoencoder for
occlusion detection and an iterative stacked denois-
ing autoencoder for image reconstruction. More
recently, [39] proposed to use LSTM autoencoders
with two channels to reconstruct faces in the wild.
In this method, one autoencoder channel recon-
structs the image and the other detects an occlu-
sion mask that is used to replace the occluded re-
gion in the original image with the reconstructed
pixels. The quality of the ﬁnal output was further
enhanced by introducing an adversarial discrimina-
tor.

3. Proposed Methods

We use the CNN architecture proposed in [4],
which has demonstrated the ability to achieve high
accuracy on the LFW benchmark while maintain-
ing low computational complexity. This CNN ar-
chitecture is similar to that used in [40] but com-
prises only ten convolutional layers and one fully-
connected layer. The input to this CNN is a
greyscale image of size 100
100 pixels aligned us-
ing a simple 2D aﬃne transformation. More details
about this CNN architecture can be found in [4].

×

As a ﬁrst training stage, our method adopts the
approach of training a classiﬁer wherein the CNN
produces a vector of scores s for each class j, which

is passed to a softmax function to calculate the
probability p of the correct class y:

p =

esy
j esj

(cid:80)

(1)

The total loss of the CNN is deﬁned as the average
cross-entropy loss for each training sample i:

L =

N
(cid:88)

−

i

log pi

(2)

where N is the number of samples in a batch of
training samples.

In order to use the trained CNN classiﬁcation
model to compare face images that are not present
in the training set, the classiﬁcation layer (i.e. the
layer producing the scores s) is discarded and the
features from the previous layer are used as bot-
tleneck features. These bottleneck features can di-
rectly be used as the feature vector representing
a face or can be further optimised as described in
Section 3.2. We have adopted cosine similarity to
compare pairs of feature vectors to get a similar-
ity score that indicates the likelihood of two face
images belonging to the same identity.

We trained such a CNN classiﬁcation model using
the CASIA-WebFace database [4]. This database
contains 494,414 face images of 10,575 diﬀerent
celebrities gathered from the Internet. We ran-
domly selected 10% of the images as validation im-
ages and used the rest as training images. We
consider this CNN model as the baseline for per-
formance comparison in our work and refer to it
henceforth as model A.

3.1. Occlusions Maps

As shown in [6], it is possible to use visualisa-
tion techniques to gain insight into the behaviour of
CNN models after they have been trained. To solve
the facial occlusion challenge, we are interested in
identifying which face regions a CNN model relies
on the most, as we want to avoid this reliance. Us-
ing a classiﬁcation model, one way of visualising
these regions is by observing how a correct class
score ﬂuctuates when diﬀerent face regions are oc-
cluded. A similar type of occlusion sensitivity ex-
periment has been conducted in [6] in the context of
object recognition. In our case, by occluding a face
image for which a CNN model predicts the correct
class, we can generate a binary occlusion map OI
to indicate whether placing an occluder at a partic-
ular spatial location in the image I would cause the

(a)

(b)

(c)

(d)

(e)

(f)

(g)

(h)

(i)

Figure 1: (a), (d), (g) Mean image occluded at a random
location with an occluder of 20 × 20, 20 × 40, and 40 × 40
respectively. (b), (e), (h) Occlusion maps O20×20, O20×40,
and O40×40 generated using model A and the corresponding
occluders. The pixel intensity of the occlusion maps repre-
sents the classiﬁcation error rate when placing the occluder
at each location. (c), (f), (i) Masked mean image using the
occlusion maps O20×20, O20×40, and O40×40 respectively.

model to predict an incorrect class. More formally,
a binary occlusion map OI is deﬁned as follows:

(cid:40)

OI

i,j =

0,
if ˆyi,j = y
1, otherwise

(3)

where ˆyi,j is the predicted class when the centre of
an occluder is placed at the location (i, j) of the
image I and y is the correct class for the image I.
Since we are using face images that are aligned,
we can construct a generic occlusion map O by sim-
ply averaging the binary occlusion maps of a set of
face images. Each value of an occlusion map Oi,j
corresponds to the classiﬁcation error incurred by
a model when an occluder is placed at the location
(i, j) in all the images used to generate O. For con-
venience, we refer to face regions that present high
classiﬁcation error as high eﬀect regions (as these
are the regions in which the model relies on the
most). By contrast, we refer to face regions that
present low classiﬁcation error as low eﬀect regions.
These high and low eﬀect regions correspond to the
bright and dark areas in the occlusion maps shown
in Figure 1 respectively.
Considering the 100

100 face images used as
×
input to our model, we experiment with occluders
In particular, we use (i)
of three diﬀerent sizes.

4

×

a square occluder of 20
20 pixels that can cover
×
small regions such as one eye, the nose or the mouth
as shown in Figure 1a; (ii) a rectangular occluder
of 20
40 pixels that can cover wider regions such
as both eyes simultaneously as shown in Figure 1d;
40 pixels
and (iii) a larger square occluder of 40
that can cover several face regions simultaneously
as shown in Figure 1g. We denote the occlusion
maps generated with the 20
40
occluders by O20×20, O20×40 and O40×40 respec-
tively. Figures 1b, 1e and 1h show an example of
these occlusion maps generated with model A using
1,000 images from our validation set.

40 and 40

20, 20

×

×

×

×

According to Figures 1c, 1f and 1i, the central
part of the face is one of the highest eﬀect regions.
This might be due to the presence of non-frontal
face images in the training set. Since the central
part of the face is typically visible in both frontal
and non-frontal face images, the model learns more
discriminative features from this area compared to
the outer parts of the face, which might not be vis-
ible in non-frontal face images. Simply put, the
model is trained with fewer face images in which the
outer parts of the face are visible, therefore, it relies
more heavily on the central part of the face. We
can reverse this behaviour by training with more
face images that present occlusions located in high
eﬀect regions (central part of the face), as this will
force the model to learn more discriminative fea-
tures from low eﬀect regions (outer parts of the
face).

One way of achieving this is by augmenting the
training set with face images that present occlusions
located at random locations. To do this, during
training we can generate occluded training images
by overlaying the original training images with a
randomly located occluder. However, since we want
to favour occlusions in high eﬀect regions, we pro-
pose to augment the training set with face images
that present occlusions located in high eﬀect regions
more frequently than in low eﬀect regions. For this
reason, the location of the occluder is sampled from
a probability distribution P generated by applying
the softmax function with the temperature param-
eter T to an occlusion map O:

Pi,j =

Oi,j
T

e

(cid:80)

n,m e

On,m
T

(4)

With high temperatures, all
locations have the
same probability. With low temperatures, locations

5

(a)

(b)

(c)

Figure 2: Example occluders used during training with dif-
ferent intensities, noise types and noise levels. (a) Salt-and-
pepper noise. (b) Speckle noise. (c) Gaussian noise.

in high eﬀect regions are assigned a higher proba-
bility.

As shown in Figure 2, we use occluders of random
intensities (or random colours if we were dealing
with colour images) that present diﬀerent types of
random noise (salt-and-pepper, speckle and Gaus-
sian noise). This is important because if the face
is always covered by the same type of occluder,
the CNN would only learn features that are robust
against that particular type of occlusion. For exam-
ple, if a black patch is always used to occlude faces
during training, the CNN model would perform well
when the face is occluded by a black patch, but not
when it is occluded by a patch of a diﬀerent inten-
sity.

This training procedure produces two desired
outcomes, namely, (i) the training set is augmented
with variations not present in the original data, and
(ii) the occluder has a regulariser eﬀect, helping the
CNN to learn features from all face regions equally.
Both of these increase the generalisation capabil-
ity of the model and prevent overﬁtting.
In Sec-
tion 4 we provide experimental results, with both
occluded and non-occluded face images, to validate
these claims.

3.2. Batch Triplet Loss

In order to make the bottleneck features gener-
alise better to classes not present in the training set,
we ﬁne-tune model A using a triplet loss function.
This training objective is also used in other similar
works [5, 21, 13, 14]. However, in this work, we
ﬁne-tune the bottleneck features directly instead of
learning a linear projection from them. It could be
argued that the CNN model could be trained from
scratch using a triplet loss function, as proposed in
[11]. But, according to our experiments, training
with softmax cross-entropy loss oﬀers faster con-
vergence than training with a triplet loss when a
reasonable number of samples per class are avail-
able and the number of classes is not very large.

(a)

(b)

(a)

(b)

Figure 3: Example triplet from the CASIA-WebFace dataset.
(a) Before triplet training. (b) After triplet training.

i , zp

To form a triplet we need an anchor image, a pos-
itive image and a negative image. The anchor and
the positive images belong to the same class and the
negative image belongs to a diﬀerent class. Denot-
ing the output vector of the CNN model as z (in our
setting this would be the bottleneck features), we
can represent the output features for a particular
triplet i as (za
i ), denoting the output fea-
tures for the anchor, positive and negative images
respectively. The goal of a triplet loss function is to
make the distance between za
i (i.e. images
from diﬀerent classes) larger than the distance be-
tween za
i (i.e. images from the same class)
by at least a minimum margin α. Figure 3 shows
a visual representation of a triplet before and after
training. In this work, we consider the following as
the standard triplet loss function:

i and zp

i and zn

i , zn

L =

N
(cid:88)

i

(cid:16)

0,

max

za
i −
(cid:107)

2
zp
i (cid:107)
2 − (cid:107)

za
i −

zn
i (cid:107)

2
2 + α

(cid:17)

(5)
Alternative versions of the standard triplet loss
function can be deﬁned with distance metrics other
than the squared Euclidean distance. For example,
the dot product is used as the similarity measure in
[13]. More generally, we can write:

L =

N
(cid:88)

i

max (0, d(za

i , zp
i )

−

d(za

i , zn

i ) + α)

(6)

where d(x, y) is any function that gives a score in-
dicating distance between two feature vectors. As
seen in Equation 6, only triplets that violate the
margin condition d(za
i ) produce
a loss greater than zero and therefore contribute
to the model’s convergence. To increase the train-
ing eﬃciency, we adopt the online triplet sampling
strategy proposed in [11] to select such triplets and
only use them during training. Taking this into

i )+α > d(za

i , zp

i , zn

Figure 4: (a) Distribution of positive and negative scores
after training a CNN classiﬁcation model. (b) Distribution
of positive and negative scores after ﬁne-tuning the same
CNN model with the standard triplet loss. Observe how
even though the triplet training has been able to further
separate the mean values of the two distributions, there is
more overlapping between them, causing more false positives
and/or false negatives

consideration, we can rewrite Equation 6 as:

L = µap

µan + α

(7)

−
where µap and µan are the mean values of the distri-
bution of positive and negative scores respectively.
From Equation 7 we can see that the loss be-
comes zero whenever µan is equal to µap plus the
margin α. In other words, the triplet loss function
tries to separate the mean values of the distribu-
tion of positive scores µap from the mean value of
the distribution of negative scores µan by a mini-
mum margin α.

A problem with the standard triplet loss func-
tion is that, in general, separating the mean values
of the two score distributions does not ensure that
the model performs well in a veriﬁcation task. In
Figure 4 we show how a CNN model that has been
ﬁne-tuned with the standard triplet loss function
is able to further separate the mean values of the
two score distributions but does not produce a bet-
ter accuracy. This is because there might be more
overlapping between the two distributions, causing
more false positives and/or false negatives. A solu-
tion to this problem is to also minimise the stan-
dard deviation of each score distribution. Our loss
function is inspired by the concept of decidability,
proposed in [41] as a way of measuring the achiev-
able accuracy of a veriﬁcation system regardless of
the selected threshold or operating point. A possi-
ble measure of decidability is deﬁned as follows [41]:

d = |
(cid:113) 1
2

µan

µap
−
|
(cid:0)σ2
ap + σ2
an

(cid:1)

(8)

where σ2
an are the variances of the distri-
butions of positive and negative scores respectively.

ap and σ2

6

0.000.430.641.000.000.380.681.00Equation 8 implies that a higher decidability d
is achieved by increasing the diﬀerence between the
mean values of the two score distributions while de-
creasing both of their variances. Although it would
be possible to use the inverse of Equation 8 as our
training objective, in practice, using the margin pa-
rameter α leads to a better separation between the
two score score distributions. For this reason, we
construct our loss function by adding a new term
to Equation 7 that accounts for the variance in the
two score distributions:

L = (1

β) (µap

−

−

µan + α) + β (cid:0)σ2

ap + σ2
an

(cid:1) (9)

where β is a parameter that balances the contri-
bution of the two terms. In particular, at β = 1,
the term that accounts for the diﬀerence between
the mean values of each score distribution vanishes
and only the term that accounts for the variances of
the score distributions has an eﬀect. The opposite
happens when β = 0.

An advantage of adding this new term to the
triplet loss function is that even if a triplet does
not violate the margin condition, the loss will usu-
ally be greater than zero since the term that ac-
counts for the variances of the score distributions
is non-zero. Even though this means that adopting
an online triplet sampling strategy is not strictly
needed, in our experiments we noticed faster con-
vergence when using it. Concurrent to our work, a
similar loss function has been proposed in [26] to
learn local image descriptors. However, [26] does
not make use of online triplet sampling.

Note that the loss function in Equation 9 can-
not be expressed as the average loss for each train-
ing image since the variances need to be computed
with more than one sample.
Ideally, we need to
train using large enough batches of images so that
the variance estimation is more accurate. For this
reason, we refer to this form of triplet loss as batch
triplet loss. In Section 4.2, we show the improved
accuracy when using our loss function compared to
the standard triplet loss function.

4. Experiments

In this section, we provide experimental results
In Section 4.1 we test
for our two contributions.
diﬀerent CNN models trained with occluded train-
ing images as described in Section 3.1. We use the
CASIA-WebFace database [4] to evaluate the per-
formance on faces that present artiﬁcial occlusions

and the AR face database [7] to evaluate the per-
formance on face images that present real-life oc-
clusions. In Section 4.2 we show our experimental
results on the LFW [1] benchmark using the CNN
models evaluated in Section 4.1 and their ﬁne-tuned
versions using the standard triplet loss function and
the proposed batch triplet loss function.

4.1. Performance on Occluded Faces

In Section 3.1 we described a training procedure
for increasing the CNN model classiﬁcation accu-
racy on occluded faces by using a probability distri-
bution P to augment the training set with occluded
training images.
In this section we will start by
comparing the performance of two diﬀerent train-
ing schemes. The ﬁrst training scheme comprises
ﬁne-tuning our baseline model A, described in Sec-
tion 3, with occluded training images generated by
sampling the occluder locations from a probability
distribution P . The probability distribution P is
obtained by applying Equation 4 to an occlusion
map O of a particular size. Each occlusion map
O was generated with model A using a subset of
1,000 images from the CASIA-WebFace validation
set, as described in Section 3.1. By contrast, the
second training scheme comprises ﬁne-tuning model
A with occluded training images generated by sam-
pling the occluder locations from a standard normal
distribution. The goal of training with these two
training schemes is to assess the beneﬁts of training
CNN models with images overlaid by strategically
located occluders as opposed to randomly located
occluders.

We train several CNN models in this manner,
one for each of the occluder sizes shown in Fig-
ure 1. The temperature value T in Equation 4 was
empirically set to 0.25, 0.4 and 0.6 with O20×20,
O20×40 and O40×40 respectively. We add the size
of the occluder used to generate the occluded train-
ing images to the name of each ﬁne-tuned model.
Additionally, if the model was trained following the
second training scheme, an R is added to the model
name. For example, model A ﬁne-tuned with oc-
cluded training images overlaid by an occluder of
20
20 pixels becomes A20×20 if the locations of the
occluder are sampled from P (ﬁrst training scheme)
and A20×20R if the locations of the occluder are
sampled from a standard normal distribution (sec-
ond training scheme).

×

To compare the accuracy of these ﬁne-tuned
CNN models we generate occlusion maps O with
them (one for each of the occluder sizes). Since an

7

Model

A

A20×20
A20×20R

A20×40
A20×40R

A40×40
A40×40R

O20×20

O20×40

O40×40

92.9%

10.99

±
97.69% ± 2.62
3.55
97.12%

86.18%

18.51

±
95.1% ± 5.64
7.39
93.98%

97.75% ± 2.42

97.62%

2.9

95.85% ± 4.03
5.12
95.45%

98.37% ± 1.7
2.29
98.31%

96.8% ± 3.16
4.14
96.52%

±

±

±

±

±

±

76.19%

27.89

±
88.9% ± 14.13
16.98
86.93%

±
90.64% ± 10.88
13.29
89.54%

±
93.47% ± 6.94
9.13
92.61%

±

Table 1: Mean classiﬁcation accuracy and standard deviation of each occlusion map O generated by diﬀerent CNN models.

−

(cid:80)

occlusion map indicates the classiﬁcation error in-
curred by a model at each spatial location, we can
easily calculate the mean classiﬁcation accuracy as
i,j Oi,j. Table 1 shows the mean classiﬁca-
1
tion accuracy and standard deviation for each oc-
clusion map generated with each ﬁne-tuned model.
For each model in Table 1, we generated the three
occlusion maps O20×20, O20×40 and O40×40 using
a subset of 1,000 images from the CASIA-WebFace
validation set in such a way that all the selected im-
ages can be correctly classiﬁed by the model if no
occluder is used. For example, to generate O20×20,
O20×40 and O40×40 with model A20×20, we used a
subset of 1,000 images that were classiﬁed correctly
by model A20×20. To avoid any bias in the results,
we selected a diﬀerent subset of 1,000 images to gen-
erate the occlusion maps used to compute the re-
sults shown in Table 1 and to generate the probabil-
ity distribution P used when training each model.
In other words, we avoided testing our models using
the same images that were (indirectly) incorporated
in the training stage by the use of P . Observe that
not only all the models ﬁne-tuned with occluded
training images achieve a higher classiﬁcation ac-
curacy than model A but their standard deviations
are considerably smaller. This indicates that the
performance of the ﬁne-tuned models is much less
aﬀected by the location of the occluder, i.e.
the
models are able to extract discriminant features
from all the face regions more equally, regardless
of the location of occluder. Moreover, the results in
Table 1 show the better performance of the models
trained with occluded training images overlaid by
strategically located occluders compared to those
trained with occluded training images overlaid by
randomly located occluders.

Since the goal is to improve the accuracy when
dealing with real-life occlusions, we have further

8

(a)

(b)

(c)

Figure 5: Example images from the AR database. In each
subﬁgure, the highlighted image on the top left is the refer-
ence image (target image) used to compare against the other
three images (query images). (a) Non-occluded. (b) Wearing
sunglasses. (c) Wearing scarf.

evaluated the performance of our CNN models on
the AR face database [7]. The AR face database
contains 4,000 face images of 126 diﬀerent subjects
with diﬀerent facial expressions, illumination con-
ditions and occlusions. Out of these, we only use
faces with diﬀerent illumination conditions and oc-
clusions. The diﬀerent illumination conditions cor-
respond to face images with a light on the left side,
right side or both. The occluded face images con-
sist of people wearing either sunglasses or a scarf.
We carry out three diﬀerent evaluations.
In each
evaluation, we compare non-occluded faces against
(i) other non-occluded faces, (ii) faces occluded by
a pair of sunglasses, and (iii) faces occluded by a
scarf. Figure 5 shows examples of each type of im-
age used in the three evaluations.

As shown by the resulting ROC curves in Fig-
ures 6a to 6c, the performance of the models trained
with occluded training images consistently outper-
form the baseline model A, particularly at low False
Acceptance Rates. Note that the performance does
not seem to be greatly aﬀected by the occluder size.
The ROC curve for the evaluation of non-occluded
faces (Figure 6a) shows that model A40×40 performs

small occluders (not being able to simulate large
occlusions like sunglasses and scarves) and large
occluders (worse performance when presented with
non-occluded faces). Note that we did not repeat
these experiments with the models trained using the
second training scheme described earlier, as their
performance was already shown to be inferior.

4.2. Performance on the LFW benchmark

We now adopt another approach to training by
ﬁne-tuning model A using the standard triplet loss
and the batch triplet loss described in Section 3.2.
We do this by discarding the classiﬁcation layer,
normalising the features of the previous layer (bot-
tleneck features) using the L2-norm and ﬁne-tuning
all the CNN layers with one of the two loss func-
tions. We refer to the CNN model ﬁne-tuned with
the standard triplet loss function as model B, and
the CNN model ﬁne-tuned with the batch triplet
loss function as model C. The parameter α is set to
0.5 when using any of these training objectives and
the parameter β is set to 0.7 when training with the
batch triplet loss function. The values for both α
and β were obtained empirically.

Additionally, we also trained these CNN models
with occluded training images. Similarly to the no-
tation followed in Section 4.1, we append the size
of the occluder used during training to the model
name.
In this case, we trained these models by
ﬁne-tuning a model that has already been trained
with occluded training images instead of ﬁne-tuning
model A. The locations of the occluders were sam-
pled from the same probability distributions P that
were used in Section 4.1. For example, to train
model B20×40 we ﬁne-tuned model A20×40 (and not
model A) with occluded training images overlaid by
an occluder of 20
40 placed at locations sampled
from the same probability distribution P that was
used to train A20×40.

×

Our models are evaluated on the LFW dataset
following the unrestricted, labeled outside data pro-
tocol [42] (i.e.
the protocol that allows training
with data that is not part of the LFW dataset).
The LFW protocol divides the test set in ten splits.
The classiﬁcation accuracy on each test split is cal-
culated by counting the amount of matching and
mismatching pairs given a certain threshold (in our
case, pairs that give a similarity score above the
threshold are counted as matching pairs and pairs
that give a similarity score below the threshold are
counted as mismatching pairs). For each test split,
we selected the threshold that gives the highest

9

(a)

(b)

(c)

Figure 6: AR database ROC curves (a) Non-occluded. (b)
Wearing sunglasses. (c) Wearing scarf.

slightly worse than models A20×20 and A20×40, per-
haps because the large occluder used during train-
ing makes the model rely on fewer features. As a
consequence, the model performs worse when pre-
sented with non-occluded faces in which all the face
regions are visible and contain useful features. In
contrast, model A20×20 performs worse than the
other two when presented with faces occluded by
a pair of sunglasses (Figure 6b) or a scarf (Fig-
ure 6c). This might be because the occluder used
during training is too small to simulate these types
of occlusions.
Observe

even though model A40×40
achieved the best classiﬁcation accuracy when eval-
uated on face images that present artiﬁcial occlu-
sions (Table 1), the results on the AR face database
diﬀer because the evaluation involves comparing
pairs of occluded and non-occluded face images in-
stead of only classifying occluded face images. For
this reason, the models need to perform well not
only when presented with occluded face images but
also with non-occluded face images. It seems that
using a medium-sized occluder like the one used
to train model A20×40 oﬀers the best performance
when taking into account the three diﬀerent evalu-
ations, as it avoids the problems encountered with

that,

10−410−310−210−1FalseAcceptanceRate0.20.30.40.50.60.70.80.91.0TrueAcceptanceRateAA20×20A20×40A40×4010−410−310−210−1FalseAcceptanceRate0.20.30.40.50.60.70.80.91.0TrueAcceptanceRateAA20×20A20×40A40×4010−410−310−210−1FalseAcceptanceRate0.20.30.40.50.60.70.80.91.0TrueAcceptanceRateAA20×20A20×40A40×40over, consistent with the results shown in Figure 6,
40 occluder
the CNN models trained with the 20
are the best performers.

×

5. Conclusions

We have investigated which parts of the human
face have the highest impact on face recognition
accuracy. The proposed occlusion maps are a good
way of visualising these regions and, at the same
time, provide useful information about a classiﬁ-
cation model’s performance on faces that present
artiﬁcial occlusions. According to our experimen-
tal results, even a state-of-the-art CNN-based face
recognition model fails to maintain its high perfor-
mance when these face regions are occluded (e.g.
by a pair of sunglasses or a scarf). We have demon-
strated how these occlusion maps can be used dur-
ing the training procedure to augment the training
set with face images that present artiﬁcial occlu-
sions. These artiﬁcial occlusions are strategically
positioned in locations where the performance of a
CNN model trained in a conventional way is most
sensitive. Training with these augmented training
sets, we produce CNN models that are more ro-
bust to face occlusions. As shown in our experimen-
tal results, our proposed method has shown consis-
tent performance improvement on face images that
present artiﬁcial or real-life occlusions and on face
images that do not present any occlusions.

Additionally, we have revisited the problem of
learning features for a veriﬁcation task using dis-
tance metric objectives. We have extended the
widely used triplet loss function by adding a new
term that minimises the standard deviation of the
distributions of positive and negative scores.
In
our experiments on the LFW benchmark, the pro-
posed batch triplet loss has consistently achieved
better results than the standard triplet loss. Fi-
nally, experimental results have conﬁrmed that the
best CNN models result from a combination of our
two proposed approaches, regardless of whether the
face images are occluded or not.

Acknowledgments

This work resulted from a collaborative research
project between University of Hertfordshire and
IDscan Biometrics (a GBG company) as part of
a Knowledge Transfer Partnership (KTP) pro-
gramme (partnership number: 009547).

(a)

(b)

Figure 7: Example pairs from the LFW benchmark.
Matching pairs. (b) Mismatching pairs.

(a)

Model

Accuracy

A
B
C

A20×20
B20×20
C20×20

A20×40
B20×40
C20×40

A40×40
B40×40
C40×40

0.71
97.33%
97.73%
0.76
98.12% ± 0.65

±
±

0.71
97.4%
97.85%
0.69
98.35% ± 0.73

±
±

0.83
97.68%
97.79%
0.82
98.42% ± 0.68

±
±

97.18%
0.63
±
97.5%
0.57
±
98.16% ± 0.64

Table 2: Mean classiﬁcation accuracy and standard devia-
tion of diﬀerent CNN models evaluated following the LFW
unrestricted, labeled outside data protocol.

amount of correct classiﬁcations in the other nine
splits. The ﬁnal reported value is the mean classi-
ﬁcation accuracy and the standard deviation calcu-
lated from the ten test splits. Note that most of the
face images in the LFW dataset are not occluded,
therefore, we do not expect to see a performance
improvement as large as that seen in our experi-
ments with occluded faces in Section 4.1. Figure 7
shows examples of matching and mismatching pairs
of face images from the LFW benchmark.

As shown in Table 2, all the CNN models ﬁne-
tuned with the batch triplet loss outperform the
CNN models trained with the standard triplet loss,
validating the usefulness of our approach. More-

10

References

[1] G. B. Huang, M. Ramesh, T. Berg, and E. Learned-
Miller, “Labeled faces in the wild: A database for study-
ing face recognition in unconstrained environments,”
tech. rep., Technical Report 07-49, University of Mas-
sachusetts, Amherst, 2007.

[2] I. Kemelmacher-Shlizerman, S. M. Seitz, D. Miller, and
E. Brossard, “The megaface benchmark: 1 million faces
for recognition at scale,” in Proceedings of the IEEE
Conference on Computer Vision and Pattern Recogni-
tion, pp. 4873–4882, 2016.

[3] Y. Guo, L. Zhang, Y. Hu, X. He, and J. Gao, “Ms-
celeb-1m: A dataset and benchmark for large-scale face
recognition,” in European Conference on Computer Vi-
sion, pp. 87–102, Springer, 2016.

[4] D. Yi, Z. Lei, S. Liao, and S. Z. Li, “Learn-
ing face representation from scratch,” arXiv preprint
arXiv:1411.7923, 2014.

[5] O. M. Parkhi, A. Vedaldi, and A. Zisserman, “Deep
face recognition,” in British Machine Vision Confer-
ence, vol. 1, p. 6, 2015.

[6] M. D. Zeiler and R. Fergus, “Visualizing and under-
standing convolutional networks,” in Computer Vision-
ECCV 2014, pp. 818–833, Springer, 2014.

[7] A. M. Martinez, “The ar face database,” CVC Technical

Report, vol. 24, 1998.

[8] Y. Sun, X. Wang, and X. Tang, “Deep learning face
representation from predicting 10,000 classes,” in Com-
puter Vision and Pattern Recognition (CVPR), 2014
IEEE Conference on, pp. 1891–1898, IEEE, 2014.
[9] S. Chopra, R. Hadsell, and Y. LeCun, “Learning a sim-
ilarity metric discriminatively, with application to face
veriﬁcation,” in 2005 IEEE Computer Society Con-
ference on Computer Vision and Pattern Recognition
(CVPR’05), vol. 1, pp. 539–546, IEEE, 2005.

[10] H. Fan, Z. Cao, Y. Jiang, Q. Yin, and C. Doudou,
“Learning deep face representation,” arXiv preprint
arXiv:1403.2802, 2014.

[11] F. Schroﬀ, D. Kalenichenko, and J. Philbin, “Facenet:
A uniﬁed embedding for face recognition and cluster-
ing,” in Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition, pp. 815–823,
2015.

[12] Y. Sun, Y. Chen, X. Wang, and X. Tang, “Deep
learning face representation by joint identiﬁcation-
veriﬁcation,” in Advances in Neural Information Pro-
cessing Systems, pp. 1988–1996, 2014.

[13] S. Sankaranarayanan, A. Alavi, and R. Chellappa,
“Triplet similarity embedding for face veriﬁcation,”
arXiv:1602.03418 [cs], 2016.

[14] S. Sankaranarayanan, A. Alavi, C. Castillo, and
R. Chellappa, “Triplet probabilistic embedding for
face veriﬁcation and clustering,”
arXiv preprint
arXiv:1604.05417, 2016.

[15] Y. LeCun, L. Bottou, Y. Bengio, and P. Haﬀner,
“Gradient-based learning applied to document recog-
nition,” Proceedings of the IEEE, vol. 86, no. 11,
pp. 2278–2324, 1998.

[16] S. Lawrence, C. L. Giles, A. C. Tsoi, and A. D. Back,
“Face recognition: A convolutional neural-network ap-
proach,” Neural Networks, IEEE Transactions on,
vol. 8, no. 1, pp. 98–113, 1997.

[17] A. Krizhevsky, I. Sutskever, and G. E. Hinton, “Ima-
genet classiﬁcation with deep convolutional neural net-

11

works,” in Advances in neural information processing
systems, pp. 1097–1105, 2012.

[18] Y. Taigman, M. Yang, M. Ranzato, and L. Wolf, “Deep-
face: Closing the gap to human-level performance in
face veriﬁcation,” in IEEE Conf. Computer Vision and
Pattern Recognition (CVPR), pp. 1701–1708, IEEE,
2014.

[19] D. Chen, X. Cao, L. Wang, F. Wen, and J. Sun,
“Bayesian face revisited: A joint formulation,” Com-
puter Vision–ECCV 2012, pp. 566–579, 2012.

[20] E. Zhou, Z. Cao, and Q. Yin, “Naive-deep face recog-
nition: Touching the limit of lfw benchmark or not?,”
arXiv preprint arXiv:1501.04690, 2015.

[21] J. Liu, Y. Deng, T. Bai, Z. Wei, and C. Huang, “Tar-
geting ultimate accuracy: Face recognition via deep em-
bedding,” arXiv:1506.07310 [cs], 2015.

[22] J. Wang, Y. Song, T. Leung, C. Rosenberg, J. Wang,
J. Philbin, B. Chen, and Y. Wu, “Learning ﬁne-grained
image similarity with deep ranking,” in Proceedings of
the IEEE Conference on Computer Vision and Pattern
Recognition, pp. 1386–1393, 2014.

[23] E. Hoﬀer and N. Ailon, “Deep metric learning
using triplet network,” in International Workshop
on Similarity-Based Pattern Recognition, pp. 84–92,
Springer, 2015.

[24] A. Gordo, J. Almaz´an, J. Revaud, and D. Larlus, “Deep
image retrieval: Learning global representations for im-
age search,” in European Conference on Computer Vi-
sion, pp. 241–257, Springer, 2016.

[25] P. Wohlhart and V. Lepetit, “Learning descriptors for
object recognition and 3d pose estimation,” in Proceed-
ings of the IEEE Conference on Computer Vision and
Pattern Recognition, pp. 3109–3118, 2015.

[26] B. Kumar, G. Carneiro, I. Reid, et al., “Learning local
image descriptors with deep siamese and triplet convo-
lutional networks by minimising global loss functions,”
in Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pp. 5385–5394, 2016.
[27] C. Ding and D. Tao, “Robust face recognition via mul-
timodal deep face representation,” IEEE Transactions
on Multimedia, vol. 17, no. 11, pp. 2049–2058, 2015.

[28] R. Min, A. Hadid, and J. L. Dugelay, “Improving
the recognition of faces occluded by facial accessories,”
in 2011 IEEE International Conference on Automatic
Face Gesture Recognition and Workshops (FG 2011),
pp. 442–447, 2011.

[29] M. Sharma, S. Prakash, and P. Gupta, “An eﬃcient
partial occluded face recognition system,” Neurocom-
puting, vol. 116, pp. 231–241, 2013.

[30] S. Park, H. Lee, J.-H. Yoo, G. Kim, and S. Kim, “Par-
tially occluded facial image retrieval based on a simi-
larity measurement,” Mathematical Problems in Engi-
neering, vol. 2015, p. e217568, 2015.

[31] J. Wright, A. Y. Yang, A. Ganesh, S. S. Sastry, and
Y. Ma, “Robust face recognition via sparse represen-
tation,” IEEE Transactions on Pattern Analysis and
Machine Intelligence, vol. 31, no. 2, pp. 210–227, 2009.
[32] Z. Zhou, A. Wagner, H. Mobahi, J. Wright, and
Y. Ma, “Face recognition with contiguous occlusion us-
ing markov random ﬁelds.,” in ICCV, pp. 1050–1057,
2009.

[33] H. Jia and A. M. Martinez, “Face recognition with oc-
clusions in the training and testing sets,” in Automatic
Face & Gesture Recognition, 2008. FG’08. 8th IEEE
International Conference on, pp. 1–6, IEEE, 2008.

[34] M. Yang, L. Zhang, S. C. K. Shiu, and D. Zhang, “Ga-
bor feature based robust representation and classiﬁca-
tion for face recognition with gabor occlusion dictio-
nary,” Pattern Recognition, vol. 46, no. 7, pp. 1865–
1878, 2013.

[35] P. Vincent, H. Larochelle, I. Lajoie, Y. Bengio, and P.-
A. Manzagol, “Stacked denoising autoencoders: Learn-
ing useful representations in a deep network with a local
denoising criterion,” Journal of Machine Learning Re-
search, vol. 11, no. Dec, pp. 3371–3408, 2010.

[36] J. Xie, L. Xu, and E. Chen, “Image denoising and in-
painting with deep neural networks,” in Advances in
Neural Information Processing Systems 25 (F. Pereira,
C. J. C. Burges, L. Bottou, and K. Q. Weinberger, eds.),
pp. 341–349, Curran Associates, Inc., 2012.

[37] L. Cheng, J. Wang, Y. Gong, and Q. Hou, “Robust deep
auto-encoder for occluded face recognition,” in Pro-
ceedings of the 23rd ACM International Conference on
Multimedia, MM ’15, (New York, NY, USA), pp. 1099–
1102, ACM, 2015.

[38] Y. Zhang, R. Liu, S. Zhang, and M. Zhu, “Occlusion-
robust face recognition using iterative stacked denoising
autoencoder,” in International Conference on Neural
Information Processing, pp. 352–359, Springer, 2013.

[39] F. Zhao, J. Feng, J. Zhao, W. Yang, and S. Yan,
“Robust lstm-autoencoders for face de-occlusion in the
wild,” arXiv preprint arXiv:1612.08534, 2016.

[40] K. Simonyan and A. Zisserman, “Very deep convo-
lutional networks for large-scale image recognition,”
arXiv preprint arXiv:1409.1556, 2014.

[41] J. Daugman, Biometric decision landscapes. No. 482,
University of Cambridge, Computer Laboratory, 2000.
[42] G. B. Huang and E. Learned-Miller, “Labeled faces
in the wild: Updates and new reporting procedures,”
Dept. Comput. Sci., Univ. Massachusetts Amherst,
Amherst, MA, USA, Tech. Rep, pp. 14–003, 2014.

12

