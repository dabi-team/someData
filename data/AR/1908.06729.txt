9
1
0
2

g
u
A
7
2

]
L
M

.
t
a
t
s
[

2
v
9
2
7
6
0
.
8
0
9
1
:
v
i
X
r
a

AUTOREGRESSIVE-MODEL-BASED METHODS FOR ONLINE
TIME SERIES PREDICTION WITH MISSING VALUES: AN
EXPERIMENTAL EVALUATION

A PREPRINT

Xi Chen
School of Computer Science and Technology
Harbin Institute of Technology
Harbin, P.R.China
18s003022@stu.hit.edu.cn

Hongzhi Wang
School of Computer Science and Technology
Harbin Institute of Technology
Harbin, P.R.China
wangzh@hit.edu.cn

Yanjie Wei
School of Computer Science and Technology
Harbin Institute of Technology
Harbin, P.R.China
weiyanjie10@gmail.com

Jianzhong Li
School of Computer Science and Technology
Harbin Institute of Technology
Harbin, P.R.China
lijzh@hit.edu.cn

Hong Gao
School of Computer Science and Technology
Harbin Institute of Technology
Harbin, P.R.China
honggao@hit.edu.cn

August 28, 2019

ABSTRACT

Time series prediction with missing values is an important problem of time series analysis since
complete data is usually hard to obtain in many real-world applications. To model the generation
of time series, autoregressive (AR) model is a basic and widely used one, which assumes that each
observation in the time series is a noisy linear combination of some previous observations along with
a constant shift. To tackle the problem of prediction with missing values, a number of methods were
proposed based on various data models. For real application scenarios, how do these methods perform
over different types of time series with different levels of data missing remains to be investigated.
In this paper, we focus on online methods for AR-model-based time series prediction with missing
values. We adapted ﬁve mainstream methods to ﬁt in such a scenario. We make detailed discussion
on each of them by introducing their core ideas about how to estimate the AR coefﬁcients and their
different strategies to deal with missing values. We also present algorithmic implementations for
better understanding. In order to comprehensively evaluate these methods and do the comparison,
we conduct experiments with various conﬁgurations of relative parameters over both synthetic and
real data. From the experimental results, we derived several noteworthy conclusions and shows that
imputation is a simple but reliable strategy to handle missing values in online prediction tasks.

Keywords Autoregressive model · Time series · Online prediction · Missing values

 
 
 
 
 
 
A PREPRINT - AUGUST 28, 2019

1

INTRODUCTION

Typically, a time series is a sequence of data collected at successive intervals of time. For example, atmospheric
temperature and stock price are typical examples of time series. Since time series pervasively exist in human and
natural activities, it is necessary to build models for them. With the help of these models, meaningful statistics and
other characteristics of the data can be extracted through time series analysis.

In such a research area, time series prediction has long been an important problem. Its primary goal is to make good
predictions about future data in the time series based on previous data. In many applications, the prediction results
are helpful for decision making. With the good insight of data trend, a system cannot only make better adjustment
accordingly but also avoid potential catastrophes. Therefore, methods for better prediction results are in demand.

A great deal of models and algorithms have been proposed in order to achieve more accurate prediction or accelerate
computation. However, many of them encountered difﬁculty on real-world data-centric applications. One important
reason is that there are missing values in real-world time series. Such data loss is very common because of device
malfunction or channel disturbance. Faced with missing values, traditional methods need to wait for the repair of data
before continuing the prediction process. However, this can be improper sometimes.

For instance, a widely used technique for RTT (Round Trip Time) estimation [23] in computer networks is called
Exponentially Weighted Moving Average (EWMA). In order to compute the estimation, the current observation of RTT
is required. However, if the data is lost, the traditional methods have to remeasure it in extra time, during which the
network state may change to make the repaired observation not reliable. This can make EWMA unable to track the latest
state of the network congestion, which may result in hypofunction of congestion control in reliable data transmission.
Therefore, the limitation of traditional methods in practical use is conspicuous, and developing missing-value-tolerant
methods is a current trend.

To handle the problem of missing values, there are basically two ways of thinking. One is to impute the missing values
before applying the traditional prediction methods. Such an approach can be easy to implement, since we only need
to use the previous prediction results to ﬁll in the missing positions. In this case, classic methods like Yule-Walker
Equation (YW) [13], Online Gradient Descent (OGD) [36] and Kalman Filter (KF) [22] can be easily adapted to become
missing value tolerant. YW focuses on the autocorrelations in time series and compute the weight vector by solving the
Yule-Walker Equation. OGD regards online prediction as a linear regression problem. The stochastic gradient descent
algorithm (SGD) is applied to optimize the weight vector iteratively. KF is based on the state-space model [16], which
assumes an underlying hidden state for the dynamic system. KF is a typical EM algorithm that has a prediction step and
a measurement step to make predictions and update the estimation of the hidden state using MLE [29] repeatedly until
the convergence. Aside from simply replacing the missing values with predictions, multiple imputation [20] is also an
arising trend. This method basically imputes the missing values for multiple times. For each time, the ﬁlled sequence
yields an estimation of the model parameters. The ﬁnal result can be derived from the combination of all estimations. In
statistics, unknown values are usually estimated by maximizing likelihood as parameters [21].

There are also other more subtle ways for imputation if the online setting is not required. A classic method is to
employ Self-Organizing Maps (SOM) [25, 33, 9], whose idea is to group similar fragments of the time series. Then the
missing values in some time series fragments can be estimated using the clustering centers. Another more deterministic
approach, Empirical Orthogonal Function (EOF) [28, 6], takes the power of Singular Value Decomposition (SVD). By
repeatedly decomposing the data matrix and reconstructing it with the q largest singular values, the reconstructed results
of the missing values can converge to give the best estimation. To make it even more accurate, a combination of SOM
and EOF [31] was also proposed, which basically uses SOM to produce a good initialization for EOF. In addition to the
semplice imputation strategy, we can also incorporate expert knowledge from the target area [20], which sometimes
helps signiﬁcantly. In order to improve the imputation performance, a recently proposed RNN-based method [7] tries to
exploit the pattern of missing values with the great representation ability of deep neural networks.

Another class of methods makes predictions directly rather than ﬁlling the missing values in advance. Based on OGD
and the autoregressive (AR) model [2], a missing value tolerant method for online time series prediction was proposed
by Anava et al. [4]. Its core idea is to dynamically extend the data in the current prediction window (with d observations)
according to the structure of the missing values. In order to cover all the possible cases, a weight vector with 2d
dimensions was constructed. The principle advantage compared with other methods is that it does not assume any
structure on the missing data nor on the mechanism that generates the time series. In certain situations, it outperforms
the original imputation-based OGD. However, it fails to give a satisfactory practical performance due to its exponential
expand on the dimension of the weight vector. Such a problem of observation prediction with incomplete data can be
also considered as classiﬁcation of data with absent features. For instance, [30] employs the optimal hyperplane of
max-margin classiﬁcation to predict the future values. As we will disscuss later in detail, Attribute Efﬁcient Ridge
Regression (AERR) is also a direct approach to make predictions with limited attributes.

2

A PREPRINT - AUGUST 28, 2019

Although there are various methods to tackle the problem of time series prediction with missing values, not many of
them can be easily applied on our attempted scenario because we would like to focus on the online setting and the
assumption of AR model over the time series data. In this case, only the ﬁrst several observations are given at start.
After that, in each time step, one new observation is uncovered after the prediction. During this process, the AR model
is learned from the data and at the same time applied to make predictions of future observations.

In our study, we adapted four methods (YW, KF, OGD, AERR) to become both missing value tolerant and online
workable based on the AR model. Generally speaking, each method has its own pros and cons. YW has a rigorous
mathematical foundation to ensure the optimality of the solution, but it has relatively high requirement on the stationarity
of the time series, and its computational cost is also considerable due to the matrix inversion operations in equation
solving. OGD is simple and has no requirement for sequence properties, but is susceptible to drastic change of the
observation value in a short period of time, and the convergence cannot be guaranteed because of the inﬂuence of the
learning rate. KF has great adaptability to different time series, but assumes gaussian noise. AERR avoids the adverse
effect of poor imputation values, but it is difﬁcult to adjust parameters for ideal performance.

Since different methods have different theoretical support and focus, for a given scenario, which one should be applied?
In this paper, we study this problem experimentally by comparing these methods and analyzing their prediction accuracy
in various data settings. To sum up, the major contributions of this paper are summarized as follows.

• We stress the importance of the problem of online prediction with missing values and for the ﬁrst time present a

systematic analysis and comparison of the various approaches tackling this problem experimentally.

• We focused on four online methods with an ofﬂine method provided as the baseline. We conduct extensive

experiments to comprehensively compare all methods from various aspects on both synthetic and real data.

• We deeply analyze the experimental results and draw some noteworthy conclusions, which can contribute to industrial

practice and provide some inspiration for researchers of related ﬁelds.

This paper is organized as follows. We elaborate the AR model and give an overview of our chosen methods in Section
2. We give detailed discussions of these methods respectively in Section 3. In Section 4, we illustrate our experimental
setups and experimentally evaluate performance on prediction accuracy of each method and analyze their strengths and
limitations in light of the comparison results. Last, we draw conclusions in Section 5.

2 OVERVIEW

As a fundamental model for time series analysis, AR model [2] is the most well-studied time series model. It and
its deuterogenic models, such as ARMA (autoregressive moving average) [21, 3], ARCH (autoregressive conditional
heteroscedasticity) [24], ARIMA (autoregressive integrated moving average) [27], have been used for forecasting in
many ﬁelds like economics, medical science, climate analysis and so on [12]. It has been proved by the practice that
such an assumption on the time series is reasonable and representative. Therefore, all our experiments are based on the
AR model.

The idea of the AR model is quite simple. It assumes that each observation in the time series can be represented as
a noisy and shifted linear combination of its past several observations. The AR coefﬁcient vector α ∈ Rp, shifting
constant c and the noise (cid:15) are the three parameters that fully determine the characteristics of an AR process. With Xt
denoting the observation at time t, the mathematical form of an p-order AR model can be shown as follows:

Xt = c +

p
(cid:88)

i=1

α(i)Xt−i + (cid:15)t

where (cid:15)t is the noise term at time t. In order to make a prediction of the current observation Xt, a number of the past
observations and the parameters of the AR process are required. For simplicity, we only consider the zero-mean and
stationary situation where the shifting constant c = 0, and the coefﬁcient vector α does not change over time. Our goal
is to estimate the underlying α by looking into the time series data, and then the prediction of the current observation is
exactly the expectation of the weighted average of the past p observations, which is

˜Xt =

p
(cid:88)

i=1

α(i)Xt−i

To this end, a number of methods have been developed. In this paper, we focus on four methods (YW, KF, OGD,
AERR) that can be applied to perform online predictions of time series based on the AR model. An ofﬂine method,

3

A PREPRINT - AUGUST 28, 2019

autoregressive least square (ARLS), is presented as an auxiliary tool to provide comparison baseline. We selected YW,
KF and OGD, because they are classical and widely used. As for AERR, since it is based on multiple sampling and
does not need missing value imputation for these parameters, it provides a different way to estimate the AR coefﬁcients
out of incomplete data, which is noteworthy. Here we brieﬂy described all the ﬁve methods as follows.

Yule-Walker Estimator (YW) is based on the famous Yule-Walker equation [37, 1, 15]. There are two main operations
in this method. One is the estimation of autocorrelation coefﬁcients and the other is solving the equation to get an
estimation of the AR model coefﬁcients.

Kalman Filter (KF) takes the advantage of the state-space model, which assumes a hidden state of a dynamic system.
The hidden state contains the core information of the whole system, and observations are controlled by the hidden state
but also inﬂuenced by the noise. KF is also an EM algorithm which makes predictions in the E step and updates the
state estimation in the M step. Such two-step process is also known as prediction-measurement iteration.

Online Gradient Descent (OGD) is actually a data-driven method that uses SGD to optimize the estimation of AR
model coefﬁcients. Its idea is to minimize the difference between last prediction and current observation by adaptively
adjusting the weight. For such purpose, computing the gradient is the core operation of this method.

Attribute Efﬁcient Ridge Regression (AERR) is originally designed for the limited attribute observation (LAO) setting
in linear regression problems. We adapted it to ﬁt in our scenario of online prediction with missing values. Since it
employs a sampling-based approach to compute the gradient, we can optimize the estimation of the AR coefﬁcients
without imputing the missing values.

Autoregressive Least Square impute (ARLS) [8] is an ofﬂine method that is proposed to process missing data in the
DNA micro array. Like Kalman Filter, this is also an EM-based method, which in each iteration, applies a least square
estimator to compute AR coefﬁcients and update missing values based on the idea of MLE. We select this method for
providing baselines for other online methods.

3 METHODS

In this section, we describe the ﬁve selected methods in detail. Before the description, we would like to restate the
scenario of the problem that all these methods are tackling. Our goal is to perform online prediction of time series with
missing values. We assume that the time series is generated by a zero-mean AR(p) model which basically means that
each observation in the time series is a noise-involved linear combination of its former p observations, where p is the
order of the model. We believe that such assumption is reasonable since the AR model has been widely used in the
prediction of economics, informatics and natural phenomena [2].

3.1 Yule-Walker Equation

The Yule-Walker Equation is the earliest approach to estimate parameters for a stationary time series with the linear
prediction model. With the information given by autocorrelation coefﬁcients, the underlying AR model coefﬁcients can
be easily derived by solving the equation.

To compute autocorrelation coefﬁcients, we use second moment estimation. As for solving the equation, the only work
is to compute the inversion of the autocorrelation matrix. A brief description of this algorithm is shown in Algorithm 1.

As is exhibited in Algorithm 1, ﬁrst we have the time series set yt, t ∈ {1, · · · , T } and the order of the AR model p
as the input. Since we are under online setting, in each iteration, we only obtain one new observation, which may
be a missing value. At beginning, we make sure that there is no missing values in the ﬁrst p observations and then
initialize the AR model coefﬁcients ˜α randomly. In each iteration, we ﬁrst make prediction of the next observation
using current ˜α and the last p observations. Then we uncover the next observation yt and adopt operations depending
on its situation. If yt is a missing value, we impute it with the last prediction value so that the current exposed sequence
is complete. Then we update ˜α by recalculating the autocorrelation coefﬁcients over this sequence and solving the
equation. Otherwise, we perform the same operations without imputation.

4

A PREPRINT - AUGUST 28, 2019

Algorithm 1 Missing-value-tolerant YW
Input: observation sequence {yt}t=T
Output: prediction sequence {˜yt}t=T

t=1 , AR model order p
t=p+1

Initialize ˜α randomly
for t = p + 1 to T do
˜yt ← (cid:80)p
i=1 ˜α(i)yt−i
if yt is missing then
Impute yt with ˜yt

i=1 (yi − ˆµt)2

(cid:80)t

i=1 yi
(cid:80)t

end if
ˆµt ← 1
t
ˆσt ← 1
t−1
γ0 ← 1
for k = 1 to p do
γk ← 1

ˆσt(t−k)

end for
for i = 1 to p do

(cid:80)t−k

q=1(yq − ˆµt)(yq+k − ˆµt)

for j = 1 to p do
R(i,j) ← γj−i
R(j,i) ← γj−i

end for

end for
γ ← [γ1, γ2, · · · , γp]T
˜α ← R−1γ

end for

3.2 Kalman Filter

Another inﬂuential method is Kalman Filter, which aims at exact Bayesain ﬁltering for linear-Gaussian state space
models. The state space model proposed along with the Kalman Filter in 1960s [22] has been one of the most important
model to deal with the problem of time series prediction. Basically, a state space model (SSM) is very similar to an
HMM while the difference is that its hidden states are continuous. In this case, a hidden state of a dynamic system is
deﬁned as the minimum information that contains all inﬂuence imposed by past external input and is sufﬁcient to fully
describe the future behavior of the system [17]. In order to estimate the hidden state, a system model (or transition
model) and an observation model were proposed to describe the process of a dynamic system [35]. In our scenario, the
hidden state refers to the AR model coefﬁcients. Thus, the system model characterize the variation of the AR model as
time goes by. On the other hand, the observation model builds the relationship between the hidden state and the actual
observations that is exposed to us. Originally, the hidden state of the state space model can change over time since
it is inﬂuenced by its former state, external input and the system noise. However, since our problem is restricted to a
zero-mean and stationary AR process, we assume that the hidden state remains the same. Likewise, in the observation
model, we assume there is no external input so that the observation only depends on the current hidden state and the
observation noise.

With all these restrictions and assumptions, the state space model for time series online prediction is described as below:

xt = xt−1

yt = Htxt + υt
xt = [α1, α2, · · · , αp]T
Ht = [yt−1, yt−2, · · · , yt−p]
υt ∼ N (0, σ2)
Then we apply the Kalman ﬁlter to this model to estimate the hidden state and make prediction about future observations
as the data stream in. A brief ﬂow of this method is shown in Algorithm 2.

Let ˜xt|τ denote E(xt|y1:τ ). Basically, in each iteration, the learning strategy of KF is to ﬁrst forecast ˜xt|t−1 based on
˜xt−1|t−1 and the transition model, and then update ˜xt|t−1 to ˜xt|t with online maximum likelihood estimation (MLE)
using the newly acquired observation. These two steps are called prediction step and measurement step, respectively.
Actually, this is a typical EM algorithm with the above two steps corresponding to E step and M step respectively.

5

A PREPRINT - AUGUST 28, 2019

Algorithm 2 Missing-value-tolerant KF
Input: observation sequence {yt}t=T
Output: prediction sequence {˜yt}t=T

t=1 , AR model order p
t=p+1

Initialize ˜xp|p and Pp|p
for t=p+1 to T do

˜xt|t−1 ← ˜xt−1|t−1
Pt|t−1 ← Pt−1|t−1
˜yt ← Ht ˜xt|t−1
if yt is missing then
Impute yt with ˜yt

(cid:0)HtPt|t−1H T

end if
Gt ← Pt|t−1H T
t
At ← yt − ˜yt
˜xt|t ← ˜xt|t−1 + GtAt
Pt|t ← Pt|t−1 − GtHtPt|t−1

t + σ2(cid:1)−1

end for

To make it more speciﬁc, in the E step, we derive the expectation of the hidden state ˜xt|t−1 and its error covariance
matrix Pt|t−1 according to the transition model. Then we use ˜xt|t−1 and Ht to make prediction of the next observation
˜yt. After that, we uncover the next observation. If it is a missing value, we impute it with the prediction value ˜yt. Then
we come to the M step where we update the Kalman gain Gt and compute the innovation At. Based on these two
values, we update the hidden state and error covariance matrix.

We should ensure that there is no missing values in the ﬁrst p observations because we need at least p numbers for the
very ﬁrst prediction and then start the iteration. Besides, we can initialize ˜xp|p randomly and set Pp|p = cI where c
represents a large positive integer, indicating that we have no prior knowledge about the hidden state.

3.3 Online Gradient Descent

Instead of regarding the time series as a linear dynamic system (LDS) with an estimable hidden state, OGD regards
the estimation of AR coefﬁcient as the problem of parameter optimization. It deﬁnes a loss function associated with
the prediction accuracy. This is denoted by l(Xt, ˜Xt) measuring the error between the real observation Xt and the
prediction ˜Xt at time t. The most commonly used loss function is the least square loss as below:

l(Xt, ˜Xt) = (Xt − ˜Xt)2
In our settings, the OGD Imputer adopts such form of loss function. The core idea of OGD is to use the gradient of the
loss function to adjust AR model coefﬁcients iteratively in order to minimize the loss. The training data conforms the
following form:

xi = [Xi+p−1, Xi+p−2, · · · , Xi]T
yi = Xi+p

With ˜α denoting the estimation of the AR model coefﬁcients, the prediction of Xt is described as follows:

Applying the least square loss function, we obtain

˜Xt = ˜αxt−p

J( ˜α) =

1
m

m
(cid:88)

i=1

cost( ˜α, xi, yi)

cost( ˜α, xi, yi) =

1
2

(yi − ˜αxi)2

OGD uses the gradient of cost( ˜α, xi, yi) to iteratively optimize ˜α as follows:

˜αt+1 = ˜αt − η∇cost( ˜α, xi, yi)

where η is the learning rate, and t denotes the iteration time.

The ﬂow of this method is shown in Algorithm 3. We ﬁrst randomly initialize the AR model coefﬁcients and then
repeatedly make prediction of the next observation based on current AR model coefﬁcients and past p observations.

6

A PREPRINT - AUGUST 28, 2019

Algorithm 3 Missing-value-tolerant OGD
Input: observation sequence {Xt}t=T
Output: prediction sequence { ˜Xt}t=T

t=1 , learning rate η, AR model order p
t=p+1

Initialize ˜α randomly
for t=p+1 to T do
˜Xt ← ˜αxt−p
if Xt is missing then
Impute Xt with ˜Xt

end if
˜α ← ˜α − η∇cost( ˜α, xt−p, yt−p)

end for

When we meet a missing value, we impute it with the last prediction value. At the end of each iteration, we update the
AR coefﬁcient by performing gradient descent on current observation loss.

By choosing different methods to initialize ˜α, adjusting learning rate η to an appropriate value or imposing additional
constraints on ˜α, we can improve the performance of online gradient descent. In this case, regularization techniques
are commonly used to prevent overﬁtting. Two widely applied methods are Ridge [19] and Lasso [32], which adds
2-norm and norm terms to the loss function. Since the proper use of regularization techniques matters a lot in some real
applications, OGD only provides a basic structure where various adaptation can be conducted and incorporated with
the original one. For instance, the AERR method, as mentioned before, takes the advantage of Ridge approach while
updating the weight vector.

3.4 Attribute Efﬁcient Ridge Regression

Some researchers think that simply using predictions to impute missing values will slow down the convergence of
algorithms and even mislead later predictions. Instead of imputation, some other mechanisms are proposed for dealing
with missing observations. [11] makes assumptions of the generating mechanism of the missing values. [10] considers
a scarce pattern of missing values in the observed signals. [5] extends the weight vector’s dimensions in order to
learn from the structure of missing data. Although they all claim to be ideal, the different restrictions on data and the
unsatisfactory time complexity makes them specious. [11] and [10] are both with strict restrictions on data, and they are
not under online settings, which makes it difﬁcult to compare them with other methods experimentally. Although the
method in [4] is originally under our online settings and has simple assumptions, the extension in the algorithm makes
it too slow to be included in our comparisons.

Since the imputation-absent methods that are completely applicable to our scenario are rare and their limitations and
restrictions make it difﬁcult to design experiments, we adapt AERR [18] as an online semi-imputation time series
prediction methods and include it to our experiments as a trial, where semi-imputation means that the previous prediction
results are only used for the future predictions, and the update of the estimated AR coefﬁcients only depends the existing
data. A brief process of this method is shown in Algorithm 4.

According to Algorithm 4, the main operation of AERR is a sampling to compute the gradient. In each iteration, there
are two sampling steps. Firstly, we sample from the past p observations uniformly for k times to obtain an estimation
of their expectation. Secondly, we choose from the past p observations for another time. In this sampling step, each
probability of observation selection is associated with the current (al[j])2
||al||2 . Then we multiply these two estimations to
get an unbiased estimation of the gradient. If we unfortunately get a missing value during the sampling process, we
discard this sample result.

We use ﬁlled sequence ¯y to produce prediction P , so that we can fully use current AR coefﬁcients α to obtain
predictions. Meanwhile we sample from sequence ˜y, which has missing observations represented by ∗, in order to
prevent early poor predictions from continuously misleading the later update of the AR coefﬁcients. Assume that the
missing probability of each observation is equal, the missing rate γ is used to make up for missing values and obtain
unbiased estimations [34].

As described above, with slight adjustment for our intended case, we can add it to our experiments to verify how well
the strategy of sampling may preform in online time series prediction with missing values.

7

A PREPRINT - AUGUST 28, 2019

Algorithm 4 Missing-value-tolerant AERR
Parameters: B > 0, η > 0, p > 0
Input: observation sequence {yt}t=T
Output: predictions {Pt}t=T

t=p+1

Initialize α0
¯y1:p ← y1:p, ˜y1:p ← y1:p
l ← 0
for t=1 to T-p do

t=1 , missing rate γ, sample time k

¯xt ← ¯yt:t+p−1
˜xt ← ˜yt:t+p−1
˜αt ← 1
l+1
Pt+p ← ˜αt ¯xt
if yt+p is missing then

0 αl

(cid:80)l

˜yt+p ← ∗, ¯yt+p ← Pt+p
continue

else

˜yt+p ← yt+p, ¯yt+p ← yt+p

end if
for j=1 to k do

Pick ij,t ∈ [p] uniformly
if ˜xt[ij,t] (cid:54)= ∗ then

xj,t ← p˜xt[ij,t]eij,t /(1 − γ)

(cid:80)k

end if
end for
xt ← 1
j=1 xj,t
k
Choose j with probability αl[j]2
||αl||2
if ˜xt[j] (cid:54)= ∗ then
φ ← ||αl||2 ˜xt[j]

αl[j](1−γ) − yt+p

else

φt ← 0

end if
gt ← φtxt
vt ← αl − ηgt
αl+1 ←
l ← l + 1

vtB
max(||vt||,B)

end for

3.5 Autoregressive Least Square

ARLS is expected to achieve better prediction performance over other online methods because it is an iterative and
ofﬂine method, which means that it can perform global optimization on the whole time series. The basic idea of this
method is to estimate AR weights and recover the missing values at the same time through an iterative way. Initially,
it sets all the missing values to zero. Then, in each iteration, it traverses all the observations and optimizes the AR
parameter based on regression, after which all the missing values are imputed by doing inference with current AR
weight and the known observations. When all the missing values and AR weights converge, we obtain the ﬁnal result.
A brief process of this method is shown in Algorithm 5.

4 EXPERIMENTAL EVALUATION

In this section, we evaluate the selected methods experimentally. Note that though ARLS is not an online method,
we also take it into our experiments in order to provide baselines for better understanding of how well each method
performs. To quantitatively show the accuracy of the prediction results, there are normally several frequently used
measurements in time series analysis, such as MSE (mean square error), RMSE (root mean square error), MAPE (mean
absolute percentage error) and MAD(mean absolute difference). Since in our work, all the time series are normalized
with zero mean, and there is no comparison of prediction accuracy across different time series, MSE is a simple but

8

A PREPRINT - AUGUST 28, 2019

Algorithm 5 ARLSimpute
Input: observation sequence {yt}t=T
t=1 , iteration time N , regression model M
Output: optimized AR parameters ˜α, imputed observation sequence {˜yt}t=T
t=1

Initialize ˜α
for t=1 to T do

if yt is missing then

˜yt ← 0

else

˜yt ← yt

end if
end for
for i=1 to N do

optimize ˜α based on {˜yt}t=T
for t=1 to T do

t=1 and M

if yt is missing then
˜yt ← ˜α˜yt−p:t−1

end if
end for

end for

reasonable measure to make the assessment. Therefore, we use it as a measurement of the prediction accuracy. The
mathematical deﬁnition of MSE is as follows:

M SE (y1:T , ˜y1:T ) =

1

T

T
(cid:88)

t=1

(yt − ˜yt)2

where yi and ˜yi denote the actual observation and prediction value at time t, respectively, and T represents the length
of the time series.

Firstly, we describe the design of the experiments. We have a uniform standard setting for all experiments. It gives a set
of default values of parameters for generating the synthetic data and controlling the order of the prediction model. The
data generation parameter is denoted by θ = (L, σ2, α, miss) with following default values:

L = 2000, σ2 = 0.32

α = [0.3, −0.4, 0.4, −0.5, 0.6]

miss ∈ {0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3}

Note that for all experiments, the missing rate varies from 0 to 0.3 with a step of 0.05. They respectively represent the
length of each time series, the variance of gaussian white noise in the AR model, the AR model coefﬁcient vector, and
the missing rates. The order of the prediction model is denoted by pf it. By default, pf it = 5. On the basis of the
standard setting, we conduct experiments on synthetic data and focus on one single parameter in each experiment and
study the inﬂuence of this parameter on each method when its value varies in a given range.

For some experiments on synthetic data, we choose the parameter values according to the real time series data, trying
to hold more practical signiﬁcance. We ﬁnd that the length of real time series from UCR Archive and Tushare,
which are the data source of the later real data experiments, roughly ranges from 50 to 3000. We set a parameter
L ∈ {1000, 2000, 3000, 4000, 5000}. Also we notice that the observation values of the normalized time series
mostly fall in the range of -1.5 to 1.5, so a noise with the standard deviation of σ ∈ {0.3, 0.6, 0.9, 1.2, 1.5}
approximately takes 10 to 50 percent of the amplitude, which can be quite common in the low SNR environment. As for
the AR coefﬁcients, since not all coefﬁcient vectors can generate a stationary time series, we try to ﬁnd some suitable
cases by trying different permutations and combinations of numbers from

(cid:110) i−10

(cid:111)
.

10 |i ∈ [1, 19], i ∈ Z

At Last, we selected various types of real time series data with different length, local trend, seasonality, degree of
ﬂuctuation and smoothness for comparisons. By running the test in such complex environment, we try to show some
interesting features of these methods concerning their ability to cope with certain types of time series.

9

A PREPRINT - AUGUST 28, 2019

4.1

Impact of Missing Rates

In the ﬁrst experiment, we compare methods on the prediction accuracy as the missing rates increases. For each setting,
we generate 20 different time series with randomized initialization. Missing values are generated by setting each value
to empty with a certain missing rate. The experimental results are shown in Figure 1.

As illustrated in the Figure 1, with the increase of the missing rate, the MSEs of all the methods have an approximately
linear growth. Apparently, higher missing rates yield higher prediction errors, but the increase of the latter is fairly
gentle. Although the growing trend of each method’s MSE is similar, there is still discernible difference among these
ﬁve methods.

As an online method, Kalman Filter (KF) performs considerably good. Its MSE is highly close to that of the ofﬂine
method ARLS, and such advantage keeps on when the missing rate increases. As shown in the Figure 1, MSEs of both
methods are close to the variance of the white noise. Since in maximum likelihood estimation (MLE), the ideal MSE
equals to the variance of the white noise [29], similarly, such results is nearly ideal. Such results are caused by the MLE
in the measurement step in KF. The way that Kalman ﬁlter updates the posterior estimation of the hidden state is known
as the recursive least square (RLS) algorithm [14]. It performs step-size adaptation to the online time series. Despite
the fact that the algorithm needs only one pass over the data, the historical information is stored in both the hidden
state estimation and the Kalman Gain. As time goes by, the prior knowledge about the distribution of the hidden state
is accumulated so that it can soon converge to the optimal posterior. The process of its adaptation to the observation
sequence is similar as object tracking, which is the earliest application of Kalman ﬁltering.

We also observe that the widely used YW has a quite similar performance with KF. Although it still has overall
larger MSEs, the narrow gap does not expand as the missing rate goes up, and eventually they have roughly the same
performance when reaching the highest missing rate. Due to the simplicity of YW and its close performance as the
best KF, in certain cases, it is a better choice. However, when high efﬁciency is required, YW will probably not work
because its time cost is too high. There are two main time expenses of YW. One is the time cost on the computation of
autocorrelation coefﬁcients (short in ACORR). Originally, as the time series grows, this cost also grows. However, we
can easily reduce this cost to a constant by making good use of the previous computational results. The other one is
the time cost on solving the equation. This operation needs to compute the inverse of the matrix, which is very time
consuming.

Different from YW, OGD has a comparatively worse prediction results. Since this method employed stochastic gradient
descent algorithm to optimize the AR coefﬁcients, its performance is bound to a local training data. Owing to the online
setting, in each iteration, only one observation in the whole data space is disclosed to the training model. Therefore, the
new gradient is easy to be affected by the randomness of data due to the presence of the white noise. Furthermore, to
ensure that the optimization process does not collapse, the learning rate cannot be too large, which has restricted the
convergence speed of this method. On the other hand, AERR has the highest MSE under all missing rate settings. This
has shown the strength of imputation strategy to some extent.

Figure 1: MSE VS. missing Rates

10

0.000.050.100.150.200.250.300.0850.0900.0950.1000.1050.1100.1150.120MSEMissing Rate OGD KF YW AERR ARLSA PREPRINT - AUGUST 28, 2019

4.2

Impact of Time Series Length

In this experiment, we adjust the length of the time series to test its impact on the method performance. On the basis of
the standard setting, we vary the length from 1000 to 5000. For each length, we generate 20 time series as our input
data for each length and missing rate. The experimental results are shown in Figure 2.

It is observed from the experimental results that the MSE of all methods increases with the increase of the missing rate.
However, their relative order does not change. This feature is consistent under ﬁve data lengths. With the increase of
the time series length, the MSE of the OGD and AERR signiﬁcantly decreases; the MSE of YW decreases slightly; and
the MSE of the KF and ARLS methods does not change signiﬁcantly. It is observed that although the relative order of
the predictive performance of the various methods has not changed, the gap between them decreases gradually as the
amount of training data increases.

This is caused by the limitations of the random gradient drop (SGD) algorithm. Both the AERR and OGD methods
use the SGD strategy to optimize the parameters of the model. This optimization is ﬁrst-order [26, p. 41], and the
convergence rate of the parameters is affected by the learning rate and the randomness of the current training samples.
This leads to a slower convergence of the AERR and OGD method on the same time series. Such results suggest that it
is better to have sufﬁcient data when using OGD and AERR methods for time series prediction.

(a) L = 1000

(b) L = 5000

(c) miss = 0.05

(d) miss = 0.3

Figure 2: MSE VS. Time Series Length

11

0.000.050.100.150.200.250.300.090.100.110.120.130.140.150.16MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.090.100.110.120.130.14MSEMissing Rate OGD KF YW AERR ARLS100020003000400050000.110.120.130.140.150.16MSELength OGD KF YW AERR ARLS100020003000400050000.110.120.130.140.150.16MSELength OGD KF YW AERR ARLSA PREPRINT - AUGUST 28, 2019

4.3

Impact of Noise Variance

In this experiment, we vary the variance(σ) of the white noise from 0.3 to 1.5. For each noise variance and each missing
rate, we generate 20 time series. The experimental results are shown in Figure 3.

Obviously, with the increase of the variance, the MSE of all methods increases. YW, KF and ARLS achieve very
similar results. Compared with them, the MSE of OGD is larger, but the gap substantially remains stable as the variance
increases. In contrast, the difference between the MSE of AERR and the best MSE is signiﬁcantly expanded with the
increase of variance.

There are two reasons for this result. First, the original design of AERR aims at any-time settings rather than online
ones. In order to make AERR work in the online setting, we have to use the weight to make predictions before the
average computation. Therefore, the randomness of the weight reduced the accuracy. Second, it is observed from the
Algorithm 4 that the operation of weight updating depends on the sampling results of the past p observations. According
to Algorithm 4, when we happen to pick the missing observation in the sampling second step, the gradient is set to
be zero so that the weight will not update. If the missing rate is high, this often happens, which will result in the low
speed of weight convergence. Thus, the predictions produced by the not-converging weight are unable to track the rapid
changes in the observation sequence. In the other words, AERR is comparatively dull to data changes. Therefore, when
the noise variance of the time series gets larger, the gap between the predicted value and the observed one is widened
because the sequence changes more dramatically over time.

(a) σ = 0.3

(b) σ = 1.5

(c) miss = 0.05

(d) miss = 0.3

Figure 3: MSE VS. Noise Variance

12

0.000.050.100.150.200.250.300.090.100.110.120.130.140.15MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.302.02.53.03.54.04.55.0MSEMissing Rate OGD KF YW AERR ARLS0.20.40.60.81.01.21.41.601234MSENoise Standard Deviation OGD KF YW AERR ARLS0.20.40.60.81.01.21.41.6012345MSENoise Standard Deviation OGD KF YW AERR ARLSA PREPRINT - AUGUST 28, 2019

4.4

Impact of AR Model Coefﬁcients

In order to conduct comparisons on various types of synthetic data, we select ﬁve different AR model coefﬁcients to
generate time series data. The setting of coefﬁcients is shown in Table 1 and the experimental results are shown in
Figure 4.

Table 1: Setting of AR Model Coefﬁcients

No.

Coefﬁcients

1
2
3
4
5

[0.3, -0.4, 0.4, -0.5, 0.6]
[-0.4, 0.4, -0.5, 0.3, 0.6]
[0.3, 0.0, 0.5, 0.3, -0.2]
[0.1, 0.7, 0.7, 0.0, -0.5]
[0.1, 0.7, 0.7, 0.0, -0.5]

Comparing the ﬁve experimental results, it is observed that the prediction accuracies are relatively close to each other
when the amplitude of the observation sequence is small (Figure 4(a) and 4(c)). However, only the KF, YW, and ARLS
keep a low MSE when the sequence variation is large (which implies a nonstationarity of the sequence). Consistent
with our analysis in the last experiment, the prediction errors of AERR are signiﬁcantly more conspicuous when the
sequence changes more sharply, which can be observed by comparing Figure 4(b) and 4(d). For the OGD method, we
tried various learning rates to perform a gradient descent. We found that when the sequence change over time is large, it
requires a lower learning rate to ensure that it does not diverge. This has made OGD require more observations to allow
the weight vector to converge. The results in Figure 4(b), 4(d) and 4(e) show that the OGD method can adapt to a time
series with a large variation, but converges more slowly than the KF and YW methods because the low learning rate
limits the speed of optimization.

4.5

Impact of Prediction Model Order

In this experiment, we study the impact of prediction model order. which is used to determine the number of past
observations used to predict the next observation. We set 7 values,

pf it = [1, 2, 3, 4, 5, 10, 20]

For each pf it and each missing rate, we generate 20 time series for testing, and all methods run on these data for 7
times with 7 different prediction model orders. The experimental results are shown in Figure 5.

From the experimental results, we observe that when the prediction model order pf it is lower than the AR model order
pgen which represents the number of AR coefﬁcients, the MSEs of different methods have different degrees of decrease
with the increase of pf it, and their changing trend with respect to the missing rate is closer to a linear growth.

When pf it exceeds pgen, the prediction performance of OGD, YW, KF and ARLS does not change signiﬁcantly, but
the prediction errors of AERR increase. With regard to this result, when the order of the prediction model increases, in
order to ensure the weight vector converges, all these methods require more observations for the training.

For AERR, the increase in the demand for data exceeds the amount of available data, so that the predictions of AERR are
based on the estimation of AR model coefﬁcients that have not converged, resulting in an increase in MSE. Additionally,
note that the prediction performance of other methods is not improved by increasing the order of the model, indicating
that higher order of the prediction model would not lead to better results.

The results of this experiment suggest that time series prediction based on sampling and gradient descent is not suitable
for high-order model training and should not be applied to applications where the amount of data available is small.

4.6 Performance on Real Data

To comprehensively compare these methods, we conduct experiments on real data as well. Compared to synthetic data,
the real data is not generated by a simple static AR model. Besides, the feature of its underlying noise is unknown.
Observing the experimental results, the difference between performance of different methods is obviously larger than
what was shown in the experimental results on synthetic data.

13

A PREPRINT - AUGUST 28, 2019

(a) Coefﬁcients No.1

(b) Coefﬁcients No.2

(c) Coefﬁcients No.3

(d) Coefﬁcients No.4

(e) Coefﬁcients No.5

Figure 4: MSE VS. AR Model Coefﬁcients

14

0.000.050.100.150.200.250.300.090.100.110.120.130.140.15MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.11101001000MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.090.100.110.120.13MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.11101001000MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.11101001000MSEMissing Rate OGD KF YW AERR ARLSA PREPRINT - AUGUST 28, 2019

(a) pf it = 1

(b) pf it = 5

(c) pf it = 20

(d) miss = 0.05

(e) miss = 0.3

Figure 5: MSE VS. Prediction Model Order

15

0.000.050.100.150.200.250.300.2220.2240.2260.2280.2300.2320.234MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.090.100.110.120.130.14MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.080.100.120.140.160.180.20MSEMissing Rate OGD KF YW AERR ARLS051015200.080.100.120.140.160.180.200.220.24MSEPrediction Model Order OGD KF YW AERR ARLS051015200.100.120.140.160.180.200.220.24MSEPrediction Model Order OGD KF YW AERR ARLSTo make it more clear about the experimental data, we show brief information in Table 2. There are four sets of real data.
The data of Stock are collected from TuShare 1 and others are all from UCR Archive 2. Missing values in these real time
series are generated by setting the observation value to empty according to a certain missing rate for each time point.

A PREPRINT - AUGUST 28, 2019

Table 2: Real Data Proﬁle

Category

Number of Groups Length

Stock
Coffee
Inline Skate
Synthetic Control

40
2
6
6

1000
286
1882
60

4.6.1 Stock

In this experiment, we test the performance of these methods on the time series of stock prices. In terms of data source,
we ﬁrst obtain the raw data of 5 years stock price from TuShare. Then we chose 40 stocks and extracted only the close
price of every trading day to make up 40 time series. For the convenience of computing, we preprocessed them by only
keeping the ﬁrst 1000 observations in each time series and conducting z-score to normalize the data. The experimental
results are shown in the Figure 6.

As shown in the Figure 6(a), the difference among all methods become more obvious. AERR, in this case, does not
achieve a satisfactory result. When the missing rate is 0.3, the MSE of AERR even gets up to over 10 times that of
ARLS.

To analyze this phenomenon, we need to brieﬂy review the core idea of AERR. The AERR method has double sampling,
a uniform sampling and a sampling on the basis of the latest weights (AR coefﬁcients). The original AERR is under
any-time setting. we adapt it to the online version according to following steps. Firstly, we perform the double sampling
process without repairing missing observations. In this way, we update the weights without being affected by possible
previous bad predictions. Secondly, we use the new weights and the current observation vector (the latest p observations
or imputed values) to make more stable predictions. Considering the time cost, the sampling time k is not always
good to be large. By testing on several numbers, we set a proper sampling times k = 10 to achieve both accuracy and
efﬁciency.

However, from the experiment results, AERR performs not well especially under the real data setting. One reason is
that for real data, the characters of data are hard to know. Thus, the parameters are difﬁcult to determine. Since AERR
requires more parameters, it is hardly to obtain proper parameters, which causes low accuracy. Another point is that
previous predictions is, to some extent, a compressed form of historical information. The other online methods use both
the latest weights and former predictions to make a new prediction, but AERR discards the latter, which makes AERR
unable to beneﬁt from those information.

In order to make it more clear for the rest methods, we plot MSEs of these methods in Figure 6(b). From the results,
KF performs not so ideal. Its MSEs stand as the highest over that of other methods, and they have the most dramatic
growing trend. However, this is because of its intrinsic assumption of a Gaussian white noise. The dependency on noise
distribution limits its performance in real data situation.

As for OGD, it shows a more stable outcome. Despite the fact that its MSEs still approximately double that of YW and
ARLS, the overall stability and fast speed are strong support for choosing this method in most of the online prediction
situations.

To our surprise, YW outperforms all other online methods. From the results, we observed that YW tends to make the
predicted value gradually approach the actual observations while OGD takes a more direct way by trying to stick to the
current observation as soon as possible. This is the reason for the different performance between these two methods.
Since YW needs to acquire the autocorrelation coefﬁcients with the accumulation of time, the learning process naturally
appears to be slow. However, when the data set gets to be large enough, it can infer the future observation with more
accuracy. In contrary, OGD does not explicitly store historical information, and its target is to optimize the AR model
based on the current observation. This is more like a greedy strategy, so the updating of weight is more easily affected
by sudden changes in time series. As a result, the average prediction error of OGD gets larger.

1http://tushare.org/
2http://www.cs.ucr.edu/~eamonn/time_series_data/

16

A PREPRINT - AUGUST 28, 2019

(a) MSE of all methods

(b) MSE excluding AERR

Figure 6: Experimental Results on Stock

4.6.2 Coffee

The length of the time series in Coffee is 286. This class of data contains two groups of time series with nuances. The
observation values roughly revolve around zero, and the track of their changing over time is similar to the contour of a
mountain. The experimental results are shown in Figure 7.

According to these ﬁgures, KF, YW and ARLS consistently maintain the leading edge under all the missing rates, and
their MSEs’ ascending trend is more gentle. In contrast, AERR has a large MSE at the zero missing rate, and its MSE
grows faster as the missing rate increases. It is noteworthy that OGD performs well at low missing rates, but with the
increase of the data loss, its MSE rapidly approaches the worst MSE of AERR. This observation indicates that OGD is
more sensitive to the absence of data in this type. This is due to the fact that the stochastic gradient descent method is
susceptible to the randomness of the data, and the use of the imputation strategy to deal with the missing values leads to
the accumulation of prediction errors. The effect of this accumulation is particularly pronounced when the missing rate
is large, and the time series changes rapidly and severely.

(a) Group No.1

(b) Group No.2

Figure 7: Experimental Results on Coffee

17

0.000.050.100.150.200.250.300.000.050.100.150.20MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.0050.0100.0150.0200.0250.0300.0350.0400.0450.050MSEMissing Rate OGD KF YW ARLS0.000.050.100.150.200.250.300.000.050.100.150.200.250.30MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.000.050.100.150.200.250.300.35MSEMissing Rate OGD KF YW AERR ARLSA PREPRINT - AUGUST 28, 2019

4.6.3 Inline Skate

Similar experimental results in Figure 8 appear on Inline Skate which contains 6 groups of time series with the length of
1882. The time series is also mountain-like, but the ups and downs of observation values are more drastic, the time span
is longer and the sequence overall is smoother. From the experimental results, the MSE of OGD exceeds that of AERR
at the maximum missing rate, with the largest prediction deviation, which is consistent with our previous speculation.

In addition, experimental results of current two types of data also show that the results of ARLS always keeps the
lowest prediction error, while YW and KF are still ideal. The MSE of KF is slightly higher than that of YW, but the
latter increases faster as the missing rate increases. In the experimental results of the data group 4 and 5 in Figure 8(d)
and 8(e), its MSE signiﬁcantly exceeds that of the KF method at the missing rate of 0.3. This result suggests that the KF
method is more tolerant of data missing than the YW method.

4.6.4 Synthetic Control

For the experimental results in Figure 9 derived from SyntheticControl which contains 6 groups of time series with a
length of 60, we obtain some different observations. First, different from the ﬁrst two types of time series, the length of
this type of time series is shorter, and there are obviously different characteristics between the groups of time series. For
example, the ﬁrst and second groups of data are sequences that are similar to white noise. However the changes of the
observation values are more intensive in the ﬁrst one, while the seasonality in the second one is remarkable. There are
obvious rising or falling trends in the remaining groups of data. Secondly, it is observed from the experimental results of
the ﬁrst group of data that the OGD, AERR and YW methods share similar but not ideal prediction performance, while
the KF method performs well. The poor performance of the YW method suggests that it is not suitable for such type of
time series. This is because the core of the YW method is based on the estimation of the autocorrelation coefﬁcient of
the time series, and the autocorrelation of data within the white-noise-like time series is weak, which is not conducive
to the YW method to obtain information from data. Moreover, compared with the experimental results of the second
group of data, YW achieve good performance when there is an obvious periodicity in the time series, which coincides
with our expectations.

In the remaining experiments, the four groups of time series are with a rising or falling trend or sudden changes. In
spite of this, KF still exhibits a strong adaptive ability, and the rising or falling trend of the sequence does not have a
signiﬁcant effect on it. It has achieved a very good prediction results in all four groups of data. In contrast, YW behaves
not ideal, and sometimes its MSEs get even higher than that of OGD. This is because its predictive ability depends on
the assumption of stationarity that the autoregressive model makes on the time series. In addition, OGD and AERR
keep a relatively high MSE, which is related to the slow convergence of the stochastic gradient descent algorithm on the
data with noise.

4.7 Method Comparison Summary

From the experimental results, we summarize the following conclusions.

• The higher the missing rate, the greater the prediction error. Although the growing trend is closer to linear growth in
case of synthetic data, it is generally non-linear in real data situation. This can be concluded from the experimental
results on missing rates and the real data in Section 4.1 and 4.6.

• The longer the time series, the smaller the difference between performance of different methods. It is observed from

the experimental results on varying time series length, as is demonstrated in Section 4.2.

• AERR is more sensitive to the noise variance than other methods. When the variance is high, AERR tends to get bad

performance, as shown in the experimental results of the impact of noise variance in Section 4.3.

• Both AERR and OGD have weak ability on tracking the rapidly changing time series, and AERR is especially bad
for time series with large range. This can be concluded from the results of the experiment on AR model coefﬁcients
in Section 4.4.

• From the experimental results on the impact of prediction model order in Section 4.5, the best order of prediction

model is the actual order of the underlying AR model.

• The performance of OGD and AERR is generally poor, and they are more sensitive to the lack of data when the
variation range of time series is large. This is concluded from the result of the experiments on Coffee and Inline Skate
data sets in Section 4.6.2 and Section 4.6.3 respectively.

• KF and YW have generally better performance. However, YW method is not suitable for time series with no
seasonality or with unstable trend, and KF has poorer performance in the case of the noise is not Gaussian, as

18

A PREPRINT - AUGUST 28, 2019

(a) Group No.1

(b) Group No.2

(c) Group No.3

(d) Group No.4

(e) Group No.5

(f) Group No.6

Figure 8: Experimental Results on Inline Skate

19

0.000.050.100.150.200.250.300.0000.0050.0100.0150.0200.025MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.0000.0050.0100.0150.0200.0250.030MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.0000.0050.0100.0150.020MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.0000.0050.0100.0150.0200.025MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.0000.0050.0100.0150.0200.0250.030MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.0000.0050.0100.0150.0200.0250.030MSEMissing Rate OGD KF YW AERR ARLSA PREPRINT - AUGUST 28, 2019

(a) Group No.1

(b) Group No.2

(c) Group No.3

(d) Group No.4

(e) Group No.5

(f) Group No.6

Figure 9: Experimental Results on Synthetic Control

20

0.000.050.100.150.200.250.300.60.70.80.91.01.11.21.3MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.00.10.20.30.40.50.60.70.80.91.0MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.300.350.400.450.500.550.600.650.700.750.80MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.30.40.50.60.70.8MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.250.300.350.400.450.500.550.600.650.70MSEMissing Rate OGD KF YW AERR ARLS0.000.050.100.150.200.250.300.300.350.400.450.500.550.600.650.70MSEMissing Rate OGD KF YW AERR ARLSA PREPRINT - AUGUST 28, 2019

the conclusion from the experimental results on Stock and Synthetic Control in Section 4.6.1 and Section 4.6.4
respectively.

In summary, the poor performance of AERR may have implied the weakness of sampling-based method in online
learning, and imputation is still a simple but reliable and effective way to cope with missing values in online prediction
tasks.

5 CONCLUSIONS

In this paper, we compare the online prediction methods for the time series with missing values experimentally. Such
problem is crucial for many applications since online prediction for time series has wide applications, and missing
values are common in real time series.

Based on the assumption of the AR model on time series, we compared ﬁve different methods, including three
imputation-based methods Yule-Walker Estimator (YW), Kalman Filter (KF), Online Gradient Descent (OGD), an
semi-imputation method Attribute Efﬁcient Ridge Regression (AERR) and an ofﬂine method Autoregressive Least
Square impute (ARLS) as the baseline. The comparison is based on the results of extensive experiments on synthetic
time series with various value settings of parameters and different categories of real data.

From the experimental results, we discover some important points: (1) AERR has the worst performance overally and it
is especially weak on time series where the variation range is large, the change of observation value is dramatic and the
missing rate is high; (2) despite of the better performance over AERR, OGD still has generally poor performance, and
it is also sensitive to missing values in real data; (3) KF and YW have generally better performance. However, YW
method is not suitable for time series with no seasonality or with unstable trend, and KF has poorer performance in the
case of the noise is not Gaussian.

These conclusions implies that the imputation-absent methods are not ideal compared to the traditional imputation-based
methods. However, the idea of reducing the adverse effect of bad predictions is still valuable.

Thus, future work includes novel sampling approaches for increasing the accuracy of imputation-absent prediction,
effective parameter determination strategy to improve the precision as well as seek imputation-absent online time
series prediction algorithms without sampling. In addition, although YW works generally well in many cases, its
low efﬁciency limits its power on practical applications. Therefore, speeding up the computation process of YW is a
possible direction to work on.

References

[1] W. C. †, B. D. O. Anderson, M. Deistler, and A. Filler. Solutions of yule-walker equations for singular ar processes.

Journal of Time, 32(5):531–538, 2011.

[2] H. Akaike. Fitting autoregressive models for prediction. Annals of the institute of Statistical Mathematics,

21(1):243–247, 1969.

[3] O. Anava, E. Hazan, S. Mannor, and O. Shamir. Online learning for time series prediction. Journal of Machine

Learning Research, 30:172–184, 2013.

[4] O. Anava, E. Hazan, and A. Zeevi. Online time series prediction with missing data. In Proceedings of the 32nd

International Conference on Machine Learning (ICML-15), pages 2191–2199, 2015.
[5] O. Anava, E. Hazan, and A. Zeevi. Online time series prediction with missing data. 2015.
[6] J. D. Boyd, E. P. Kennelly, and P. Pistek. Estimation of eof expansion coefﬁcients from incomplete data. Deep

Sea Research Part I Oceanographic Research Papers, 41(10):1479–1488, 1994.

[7] Z. Che, S. Purushotham, K. Cho, D. Sontag, and Y. Liu. Recurrent neural networks for multivariate time series

with missing values. 2016.

[8] M. K. Choong, M. Charbit, and H. Yan. Autoregressive-model-based missing value estimation for dna microarray
time series data. IEEE Transactions on Information Technology in Biomedicine A Publication of the IEEE
Engineering in Medicine & Biology Society, 13(1):131–137, 2009.

[9] M. Cottrell and P. Letremy. Missing values : processing with the kohonen algorithm. arXiv: Statistics Theory,

pages 489–496, 2007.

[10] J. Ding, L. Han, and X. Chen. Time series AR modeling with missing observations based on the polynomial

transformation. Elsevier Science Publishers B. V., 2010.

21

A PREPRINT - AUGUST 28, 2019

[11] W. Dunsmuir and P. M. Robinson. Estimation of time series models in the presence of missing data. Journal of

the American Statistical Association, 76(375):560–568, 1981.

[12] A. Earnest, M. I. Chen, D. Ng, and L. Y. Sin. Using autoregressive integrated moving average (arima) models to
predict and monitor the number of beds occupied during a sars outbreak in a tertiary hospital in singapore. BMC
Health Services Research, 5(1):36, 2005.

[13] G. Eshel. The yule walker equations for the ar coefﬁcients. Internet resource, 2:68–73, 2003.
[14] I. H. GRANT. Recursive least squares. Teaching Statistics, 9(1):15–18, 1987.
[15] M. Hallin and J. F. Ingenbleek. Nonstationary yule-walker equations. pages 189–195, 1983.
[16] K. Hangos, R. Lakner, and M. Gerzson. Intelligent Control Systems: An Introduction with Examples. Applied

Optimization. Springer, 2001.

[17] S. S. Haykin, S. S. Haykin, S. S. Haykin, and S. S. Haykin. Neural networks and learning machines, volume 3.

Pearson Upper Saddle River, NJ, USA:, 2009.

[18] E. Hazan and T. Koren. Linear regression with limited observation. Computer Science, 2012.
[19] A. E. Hoerl and R. W. Kennard. Ridge regression: Biased estimation for nonorthogonal problems. Technometrics,

12(1):55–67, 1970.

[20] J. Honaker and G. King. What to do about missing values in time-series cross-section data. American Journal of

Political Science, 54(2):561–581, 2010.

[21] R. H. Jones. Maximum likelihood ﬁtting of arma models to time series with missing observations. Technometrics,

22(3):389–395, 1980.

[22] R. E. Kalman et al. A new approach to linear ﬁltering and prediction problems. Journal of basic Engineering,

82(1):35–45, 1960.

[23] P. Karn and C. Partridge. Improving round-trip time estimates in reliable transport protocols. ACM SIGCOMM

Computer Communication Review, 17(5):2–7, 1987.

[24] G. Kirchgässner, J. Wolters, and U. Hassler. Autoregressive conditional heteroscedasticity. Introduction to Modern

Time Series Analysis, pages 281–310, 2013.

[25] T. Kohonen. Self-organizing maps. Springer Berlin Heidelberg, 1997.
[26] J. Nocedal and S. J. Wright. Numerical Optimization. Springer, New York, 2nd edition, 2006.
[27] I. Ojo. Autoregressive integrated moving average. Asian Journal of Mathematics and Statistics, 3(4):225–236,

2010.

[28] R. W. Preisendorfer and C. D. Mobley. Principal component analysis in meteorology and oceanography. Develop-

ments in Atmospheric Science, 17(50):55–72, 1988.

[29] F. Scholz. Maximum likelihood estimation. Encyclopedia of statistical sciences, 1985.
[30] Z. Shang, L. Zhang, S. Ma, B. Fang, and T. Zhang. Incomplete time series prediction using max-margin classiﬁca-
tion of data with absent features. Mathematical Problems in Engineering,2010,(2010-05-27), 2010(10):242–256,
2010.

[31] A. Sorjamaa and A. Lendasse. Time series prediction as a problem of missing values: Application to estsp2007

and nn3 competition benchmarks. pages 2948–2953, 2007.

[32] R. Tibshirani. Regression shrinkage and selection via the lasso. Journal of the Royal Statistical Society. Series B

(Methodological), pages 267–288, 1996.

[33] S. Wang. Application of self-organising maps for data mining with incomplete data sets. Neural Computing and

Applications, 12(1):42–48, 2003.

[34] Y. Wei, H. Wang, S. Shi, H. Gao, and J. Li. Any-time methods for time-series prediction with missing observations.
In G. Karypis and J. Zhang, editors, 2017 IEEE International Congress on Big Data, BigData Congress 2017,
Honolulu, HI, USA, June 25-30, 2017, pages 427–430. IEEE Computer Society, 2017.

[35] G. Welch and G. Bishop. An Introduction to the Kalman Filter. University of North Carolina at Chapel Hill, 1995.
[36] Y. Ying and M. Pontil. Online gradient descent learning algorithms. Foundations of Computational Mathematics,

8(5):561–596, 2008.

[37] H. M. Zhang and P. Duhamel. On the methods for solving yule-walker equations. Signal Processing IEEE

Transactions on, 40(12):2987–3000, 1992.

22

