Referencing between a Head-Mounted Device and
Robotic Manipulators

David Puljiz1, Katharina S. Riesterer1, Bj¨orn Hein1,2, Torsten Kr¨oger1
1Karlsruhe Institute of Technology, 2 Karlsruhe University of Applied Sciences
Karlsruhe, Germany
david.puljiz@kit.edu, uxecu@student.kit.edu, bjoern.hein@kit.edu, torsten@kit.edu

9
1
0
2

r
p
A
4

]

O
R
.
s
c
[

1
v
0
8
4
2
0
.
4
0
9
1
:
v
i
X
r
a

Abstract—Having a precise and robust transformation between
the robot coordinate system and the AR-device coordinate system
is paramount during human-robot interaction (HRI) based on
augmented reality using Head mounted displays (HMD), both
for intuitive information display and for the tracking of human
motions. Most current solutions in this area rely either on the
tracking of visual markers, e.g. QR codes, or on manual refer-
encing, both of which provide unsatisfying results. Meanwhile
a plethora of object detection and referencing methods exist in
the wider robotic and machine vision communities. The precision
of the referencing is likewise almost never measured. Here we
would like to address this issue by ﬁrstly presenting an overview
of currently used referencing methods between robots and HMDs.
This is followed by a brief overview of object detection and
referencing methods used in the ﬁeld of robotics. Based on these
methods we suggest three classes of referencing algorithms we
intend to pursue - semi-automatic, on-shot; automatic, one-shot;
and automatic continuous. We describe the general workﬂows of
these three classes as well as describing our proposed algorithms
in each of these classes. Finally we present the ﬁrst experimental
results of a semi-automatic referencing algorithm, tested on an
industrial KUKA KR-5 manipulator.

Index Terms—Augmented Reality, Referencing, Human-Robot

Interaction, Manipulators, Registration

I. INTRODUCTION
Overlaying appropriate digital information over a physical
object is an ongoing topic of research in Augmented Reality
(AR). Generally it involves detecting a speciﬁc object from the
data provided by the sensors of the AR-device and compute a
robust transformation between the object and the device itself.
The device needs some form of localization if it’s moving
in space. If the object in question is also moving it needs
it’s own localization and communication with the AR-device
or continuous referencing from the side of the AR-device.
Although the ﬁelds of registration (matching an object model
to the scene), object detection (ﬁnding speciﬁc objects, either
model-based or bounding-box based, in the scene) and object
tracking (object detection when the sensor and/or object are
moving) are mature and well researched, their implementation
in referencing for HMD-based HRI is still in it’s infancy. Some
present solutions reference the position manually, with the user
positioning the hologram over the object themselves, which
is imprecise and requires a lot of time and mental strain for
the user if the overlay needs to be precise. The second, more
used method uses visual markers, whose positions still need
to be well calibrated in regards to the object and suffers from
occlusion problems.

In the ﬁeld of Human-Robot Interaction good referencing is
paramount for interaction modalities such as AR-assisted robot
programming [1], visualization of robot states and knowledge
patching [2], and the tracking of humans in the robot working
cell which, up until now, is mostly done with ﬁxed sensors
inside the robot cell [3].

The aim of this paper is threefold. Firstly, it presents an
overview of the current referencing methods used in AR-based
HRI. Secondly it introduces registration and object detection
methods that are currently in use in robotics, but may be
unknown to those entering AR-based HRI from other areas,
or to those who are otherwise unfamiliar with the methods.
This should provide a good starting point to those who want
to extend current referencing capacities. Lastly it present our
current work in this area, as well as the ﬁrst experiments.

The structure of the paper is as follows. In the next section
we overview the current referencing solutions in AR-based
HRI papers, as well as present a short state of the art in
the ﬁelds of registration and object detection. In section III
we present our three different referencing classes. For each
class we present an algorithm example that we are currently
pursuing. In section IV we describe the tests performed on the
semi- automatic referencing algorithm and present the results
of these tests. Finally in section V we draw conclusions from
our present work and outline future work.

II. STATE OF THE ART

In this section we overview the current referencing methods
in AR-based HRI, focusing on referencing with either hand-
held devices or HMDs. This should give a good overview into
the current state of the art regarding referencing as well as
insight into the problems and possible solutions. To note is that
in the vast majority of cases the precision of the referencing
method is never addressed, mostly focusing on user feedback,
mental strain, completion time and task completion percentage
as evaluation parameters of the systems. We also give a brief
overview of the ﬁelds of registration and object detection.
This is intended to present possible algorithms for future
implementations of referencing systems.

A. Referencing in Augmented Reality

Manual referencing, as stated before, requires the user to
manually position the hologram above the desired object. Such
an approach is tedious if precision is required and even then

 
 
 
 
 
 
it’s often not precise enough. In cases were a precise overlay
is not required however, e.g. when a human wants to interact
with a robot remotely, the ability to reposition and resize the
hologram of the robot and it’s working area is quite useful.
An example of manual referencing can be found in [4]. In
[1] there were two modes of referencing using Microsoft’s
HoloLens, either a completely manual placement or through
the use of the spatial mesh, namely the user places the cursor
on a predeﬁned point on the spatial mesh of the robot -the
middle of the robot base - and clicks to overlay the hologram.
This makes the manual positioning easier and more precise
as it’s constrained on a surface, however it still may produce
errors especially if the mesh is coerce at the speciﬁed point.
Most approaches use a marker-based system [5] [6] [7] [8].
Markers can be either QR codes, ARUCO markers or other
2D identiﬁers such as a sticker or a distinctive 2D surface.
In [9] QR markers on a mobile robot were used for an AR
overlay over a ﬁxed camera data stream. In [2] a Baxter robot
was used, which possesses an in-built screen. A QR track-
ing code was projected on this screen. Unlike other marker
methods, this requires no additional calibration as the screen
is already part of the robot model and the transformation is
known. Obviously such an approach is restricted to systems
with a screen. In [10] a deep learning approach, namely the
YOLO network, was used to generate 3D bounding boxes
around objects, however an ARUCO marker was still used
to transform the coordinate systems between the HMD and a
robot arm.

Some special cases exist. In [11] an additional infra red
marker-based motion tracking system is used for increased
precision and easy referencing between the HMD, in this case
a HoloLens, and an object to be spray painted. Although
precise, it requires again calibrated positioning of the markers
as well as a motion tracking system inside the work cell,
thus limiting ﬂexibility. Commercial systems such as Vuforia
and Visionlib offer 3D referencing based on 2D camera data
through edge-detection. Speciﬁcally, in [12], Vuforia was used
to reference 3D objects based on 2D features, placing invisible
3D models and giving the impression of a virtual character
interacting with real objects. However problems still exist, e.g.
when trying to match a cylindrical robot base with few features
such algorithms usually give quite bad orientation.

B. Registration and Object Detection

In this subsection we will cover methods that may be of
use for referencing algorithms. These methods, to the best of
the authors’ knowledge, have never been implemented in a
referencing algorithm between robots and HMDs. We shall
mainly focus on model-based approaches using point clouds,
however other methods will also be presented.

The most common 3D model-based registration algorithm
is the Iterative-Closest Point (ICP) algorithm [13] spawning a
large number of variations [14]. It is simple, fast and effective,
yet in it’s most basics forms, requires the near overlap of the
model and scene point clouds. This is due to the fact that the
algorithm tends to fall in the local minima of its deﬁned score

function, usually the root mean square distance error between
the points in the scene and the robot model. More advanced
methods relax the amount of overlap needed, however the
initial guess of the object’s location still needs to be quite
close to real object in the scene.

Object detection algorithms on point clouds have several
more steps and usually use ICP in the ﬁnal reﬁnement step.
The main workﬂow is as follows: calculate model 3D features,
match them to the scene features, align the model and the
scene cloud, reﬁne it using ICP, and ﬁnally go through the
likely
hypothesis veriﬁcation steps. In this step the most
hypothesis of how to match all detected objects to the scene
is calculated. As one can see it’s a much bigger pipeline
and therefore more complicated and slower, however they
can provide good results even when there is no initial guess.
They can be divided into algorithms using local features and
the ones using global features. For a good introduction and
implementation tutorial please refer to [15]

Local features describe the 3D space around keypoints.
They are robust to clutter and occlusions. Keypoints are found
in the models and in the scene. Afterwards descriptors are
generated for each keypoint. These descriptors are matched
between the model and the scene and matches between de-
scriptors are found. The ﬁnal step is correspondence grouping,
where the geometrical relations between the matched features
are calculated to get transformation hypotheses. Examples of
3d point cloud descriptors include SHOT [16], FPFH [17] and
RSD [18] to name a few.

Global features describe entire objects, and thus require spe-
ciﬁc objects already segmented from the scene. This is usually
done using a RANSAC based plane removal coupled with
Euclidian Clustering to segment out speciﬁc objects. Global
features are also very susceptible to occlusions and clutter as
the segmentation can fail in those cases, as many outliers can
exist in the clusters. On the plus side global features have
better performance on objects with simpler geometries. Ex-
amples include OUR-CVFH [19], spherical harmonics based
approaches [20], Reeb graph based approaches [21] and 4-
point congruent set based approaches [22]. If segmentation
is possible and the object is scaned from multiple viewpoints,
simpler approaches such as comparing bounding box sizes and
using ICP or it’s derivations are also possible.

Other interesting algorithms are 2D based modelless deep
learning algorithms. The ﬁrst type is bounding box based
object detectors. based on the bounding box from two different
views or through matching camera and depth camera pixels,
one can extract 3D bounding boxes for speciﬁc object classes.
Algorithms such as Faster-RCNN [23] and YOLO9000 [24]
have shown great success and high speeds. Full pixel-by-
pixel semantic segmentation has also seen a lot of progress in
recent years from the original FCN proposed in [25]. Examples
include Deepnetv3 [26] and ReﬁneNet [27].

The next section introduces referencing concepts where the
use of these algorithms in HMD-to-robot referencing should
become clearer.

III. PROPOSED REFERENCING METHODS

In this section we introduce three classes of referencing
algorithms and give examples for each class based on our
current work. We make several assumptions: the HMD has
the ability to localize itself; the HMD has access to RGB
or Grayscale images and/or a depth sensor; the state of the
robot joints is known and can be requested at any time. The
ﬁrst two methods also assume a static manipulator to begin
with. Note that an environmental map or a spatial mesh is
usually mentioned. This can either be provided from the HMD
as is often the case now-days, or it can be generated using
the localization and the depth camera data. Some monocular
SLAM algorithms, meaning that only a camera is used, can
also provide a coarse map of the environment, however usually
not precise enough for most referencing approaches requiring
3D data. Examples of such algorithms are the ORB-SLAM2
[28] and the LSD-SLAM [29]. In our case we use the
Microsoft HoloLens, thus most of the considerations below
will be based on the hardware capabilities of the device.

A. Semi-automatic, One-shot

This method tries to simplify the referencing algorithm by
using human input, yet the input does not have to be overly
precise, thus reducing the time and effort required from the
human operator. This is done e.g. by asking the user to click on
the base of robot, position a seed hologram, indicating if the
robot is inside the ﬁeld of view etc. The user input should serve
to limit the search space of a registration algorithm, such as
ICP, as much as possible without increasing the mental strain
of the user.

1) Proposed Method: The main workﬂow of our algorithm
is as follows. The user positions a ”seed hologram”, a cube,
near the robot’s base and rotates the z coordinate system axis
towards the front of the robot. As stated the positioning does
not have to be precise and thus it can be done in a matter of
seconds. This seed acts both as the center of the volume to
be extracted from the spatial mesh, thus shrinking the search
space, and as a ﬁrst guess for the registration algorithm, thus
improving speed and convergence chance. A spherical region
of the spatial mesh with radius 2 meters (about double the
largest side of the bounding box of the robot used) around the
seed hologram is extracted. Since the registration algorithms
we tested, namely standard ICP and Super4PCS, require point
clouds as input, the mesh is sampled into points and sent
to a computer for registration along with the position of the
seed hologram. The computer has the option to resample the
received point cloud using Moving Least Squares [30]. The
computer runs the Robotic Operating System [31], and the
registration algorithms are implemented using the Point Cloud
Library (PCL) [32] as a ROS node. Once the registration is
done the transform is sent both to the HoloLens to properly
overlay the hologram, as well as published to a tf node [33],
which keeps track of all the coordinate transformations inside
the robot working area. This has the beneﬁt of allowing the
tracking of the human worker without the need of any kind
of on-board sensors or sensors in the robot cell. The system

diagram can be seen in Fig. 1. The experiments and evaluation
of our method will be discussed in section IV.

B. Automatic, One-shot

Similarly to the previous method, this method uses regis-
tration algorithms to match the point cloud extracted from the
spatial mesh to the robot model. This time however, the user is
not involved and the algorithm proceeds entirely automatically.
One option is to use the entire mesh as the search space for
the registration algorithm, then either using a global object
matching or a local one with clustering as described in section
II-B. However this slows down the registration algorithm
massively and precludes the use of simpler methods that may
get stuck in local minima, such as ICP.

Another option is to use RGB or grayscale picture data to
calculate a bounding box automatically as the ﬁrst step, and
then proceed as in the previous case. One may use speciﬁcally
the robot colour if it’s
engineered features for that, e.g.
different than the surroundings and if RGB data is available.
Such approaches are not general enough to be considered a
solution, however. Another option is to use a deep neural
network for bounding box object detection and train it on
different robotic arms. Such approaches have had great success
in other ﬁelds, such as the previously mention YOLO9000
and Faster-RCNN. This method offers a small search space
and a solid ﬁrst guess. Yet another option is to use semantic
segmentation, such as FCN, to extract appropriate pixels from
the depth camera.

In case depth data is unavailable but the HMD still possesses
localization capabilities and 2D camera sensors, structure from
motion methods [34] can be used to generate a point cloud of
the scene. Structure from motion refers to generating a 3D data
representation from several camera frames at different poses.
The accompanying ego-motion of the camera must either be
available or estimated through the optical ﬂow.

1) Proposed Method: Currently we are exploring a method
based on sliding boxes. We ﬁrst generate 3D descriptors of
the robot model, then we slide the bounding box with a step
length of s over the point cloud of the scene (in our case s
is 0.2 times the length of the relevant bounding box side).
We ﬁlter out the boxes that contain too few points. For the
rest we calculate the descriptors and match them to the model
descriptors. The bounding box with the best match is selected.
Only then do we proceed correspondence grouping and/or
ICP to calculate the ﬁnal transform of the robot. So far the
SHOT features provided the best results, selecting the correct
bounding box every time in our test set. The OUR-CVFH
descriptor is the second best with a precision of about 70
%. The selected bounding box is not aligned with the robot
rotation yet, thus a registration step is required. Using feature
correspondence grouping doesn’t always produce satisfying
results in our preliminary experiments. The best method so
far is to use ICP four times with the position guess at the
center of the bounding box and a rotation step of 90°.

Fig. 1. The pipeline of our semi-automatic, one-shot referencing algorithm. Here the seed hologram is called the cube. The HoloLens application collects
and sends the spatial mesh in a 2m radius around the seed. The ROS server application receives the spatial data and the position of the seed in the HoloLens’
world coordinate system. The server proceeds to calculates the transformation of the robot, using the ICP or Super4PCS registration algorithms. The ﬁnal
transform is then sent back to the HMD, where the robot hologram is instantiated at the appropriate coordinates, as well as to the tf node, whick keeps track
of all the transformations in the system, including the robot coordinates and the HoloLens pose.

C. Automatic, Continuous

Having a continuous registration solves several problems
that might occur during HRI, most importantly loss of local-
isation or a change in the world coordinates of the HMD.
Secondly, the manipulator does not have to be stopped at any
time for the registration to work, meaning that it can perform
tasks before the interaction and continue performing them once
the interaction begins without the need to stop and move into
a speciﬁc position for the referencing to be successful.

Two approaches can be taken. The ﬁrst one involves gath-
ering depth data with precise time stamps, either through a
depth sensor, stereo camera or structure from motion. The
computer collecting the robot joint states likewise stamps the
robot states. Provided the two systems are synchronized, the
robot model can be transformed according to the it’s joint
state at the moment of the data capture and a match can be
attempted between the two, e.g. using ICP.

In the second approach we forgo registration altogether,
instead trying to extract the kinematic chain from the input
sensor data, with the base of the kinematic chain being then
the base of the robot. This approach has the beneﬁt of not
needing synchronisation or even robot joint data, however it’s
uch more complex to implement. A very recent paper [35] by
Heindl et al. trained a Recurrent neural Network for end-to-end
estimation of 3D joint positions from RGB data. The network
was trained on artiﬁcial data, proving scalability. Presently,
however, it was trained and tested using a single robot model.
1) Proposed Method: For the HoloLens the refresh rate
of the far-capture depth stream is 2 Fps. Possible problems

here include there being too few points for proper matching
or there being too many erroneous registrations meaning that
even through ﬁltering the referencing becomes unstable.

Using stereo camera data (available to the HoloLens) to
create a denser point cloud at higher Fps (up to 30) seems a
more promising way. We assume a mostly static scene except
for the robot and the HMD user. Given that most parts of the
robot will be in motion, the optical ﬂow of the robot pixels
will be quite different than that of all the other static objects
in the scene. Using a stereo camera pair and the ego-motion
estimation of the HoloLens, we can extract the pixels in both
cameras that don’t follow the predicted optical ﬂow. Thus we
can simultaneously generate a point cloud of the robot and
ﬁlter it each camera frame. A similar example can be found in
[36]. Afterwards the workﬂow continues as in the ﬁrst option.
Our current research in this ﬁeld is still in it’s infancy however.
In the next section we describe the tests and results of
our semi-automatic referencing algorithm described in section
III-A.

IV. EXPERIMENTS

Tests were performed using a Microsoft HoloLens and a
Kuka KR-5 ARC robot as the desired reference target. The
testing pipeline can be seen in Fig. 3. One can note the large
number of different parameters at every step of the algorithm
pipeline. For simplicity’s sake we chose two combinations of
triangles per cubic meter and the number of point samples per
mesh:

• The small one: 1,000 triangles and 16,000 samples per
mesh. 1,000 triangles per cubic meter is the highest

Fig. 2. Top: all the bounding box windows in one of our test scenes. Yellow bounding boxes are those containing enough points (in our tests 3 or more,
one can probably increase that number much further) and are sent to the next step of correspondence matching; Bottom left: the correspondences between the
model and the point cloud contained in the selected bounding box, using SHOT features. Bottom right: light blue is the model, blue is the ﬁnal transformation
using correspondence grouping of SHOT features, red is the ﬁnal transform using the 4 step ICP rotation method.

number where the spatial mapping is stable enough to
walk around. Together with 16,000 samples per mesh it
only takes a short time (approximately 3 s) to sample and
send the point cloud.

• The big one: 1,240,000 triangles and 256,000 samples per
mesh. In this conﬁguration it already takes approximately
1 min to sample and send the point cloud.

For each parameter of the two algorithms, namely ICP and
Super4PCS, we tested around ﬁve different values and ran
all possible combinations to ﬁnd the best parameters. During
the testing it was found that the the segmentation algorithm
required for the Super4PCS, due to it being a global descriptor,
failed to segment the robot from the nearby table due to the

very close proximity as can be seen on Fig 4. Less rigorous
tests with a nearby KR-6 robot proved that when the robot
can be segmented out of the scene Super4PCS has good
performance, although very high variations based on parameter
selection. The parameter tests were performed on a single
captured spatial mesh to avoid variations in the mesh itself.
The test results can been seen in Table I. The root mean
square (RMS) distance between the closest points in the two
point clouds was used as a metric for the precision of the
referencing. The best and worst parameter combinations for
the ICP on the big and small clouds can be seen in Table II.

Next we conducted tests with the best identiﬁed ICP param-
eters and a small point cloud sampling. Twelve point clouds

Please refer to Fig. 4 for the view of the referenced robot
from the HoloLens, alongside it’s seed hologram and the
spatial mesh used in the computing of the ICP. One can see
a visually robust result that overlays the real robot extremely
well.

V. CONCLUSIONS

Referencing between objects and HMDs in general is still
an open research question in AR. Speciﬁcally referencing
between an HMD and a robot is paramount for high-quality
HRI. Yet it’s still a poorly researched topic, with research in
this area relying either on manual referencing or marker-based
referencing.

In this paper we presented an overview of the current ref-
erencing methods, gave a brief overview of related algorithms
that could be of use for robust referencing, and presented
several approaches to referencing we are exploring.

We presented in more detail a semi-automatic approaches
that we already implemented as well as the tests and results
conducted to estimate it’s precision. We used the RMS error
between the closest point of the model and the scene to
estimate the referencing error as no ground truth was available.
The results are quite promising, however tests on other robots
models still need to be completed to detect possible failure
cases and test the generality of this method.

As AR-based HRI shows great promise, we think that
further exploration of precise and robust referencing methods
is extremely important as a basis for high-quality AR-based
interaction paradigms.

ACKNOWLEDGMENT

This work has been supported from the European Unions
Horizon 2020 research and innovation program under grant
agreement No 688117 Safe human-robot interaction in logistic
applications for highly ﬂexible warehouses (SafeLog).

REFERENCES

[1] C. P. Quintero, S. Li, M. K. Pan, W. P. Chan, H. F. M. V. der Loos,
and E. Croft, “Robot programming through augmented trajectories in
augmented reality,” in 2018 IEEE/RSJ International Conference on
Intelligent Robots and Systems (IROS), Oct 2018, pp. 1838–1844.
[2] H. Liu, Y. Zhang, W. Si, X. Xie, Y. Zhu, and S.-C. Zhu, “Interactive
robot knowledge patching using augmented reality,” in 2018 IEEE 21st
International Conference on Robotics and Automation (ICRA), 2018, pp.
1947 –1954.

[3] C. Morato, K. N. Kaipa, B. Zhao, and S. K. Gupta, “Toward safe
human robot collaboration by using multiple kinects based real-time
human tracking,” Journal of Computing and Information Science in
Engineering, vol. 14, no. 1, p. 011006, 2014.

[4] M. Zolotas, J. Elsdon, and Y. Demiris, “Head-mounted augmented
reality for explainable robotic wheelchair assistance,” in 2018 IEEE/RSJ
International Conference on Intelligent Robots and Systems (IROS), Oct
2018, pp. 1823–1829.

[5] H. Fang, S. Ong, and A. Nee, “Interactive robot trajectory planning and
simulation using augmented reality,” Robotics and Computer-Integrated
Manufacturing, vol. 28, no. 2, pp. 227 – 237, 2012. [Online]. Available:
http://www.sciencedirect.com/science/article/pii/S0736584511001116
[6] C. Mateo, A. Brunete, E. Gambao, and M. Hernando, “Hammer: An
android based application for end-user industrial robot programming,”
in Mechatronic and Embedded Systems and Applications (MESA), 2014
IEEE/ASME 10th International Conference on.
IEEE, 2014, pp. 1–6.

Fig. 3. The algorithm pipeline with the different parameters that where tested.

TABLE I
STATISTICS OF THE CONDUCTED PARAMETER TESTS OF ICP, SUPER4PCS
IN COMBINATION WITH MLS. THE STATISTICS ARE BASED ON RMS OF
THE DISTANCES BETWEEN THE CLOSES POINTS IN THE MATCHED ROBOT
AND THE ORIGINAL SCENE POINT CLOUD, IN MILIMETERS (MM)

Algorithm
ICP
ICP
Super4PCS
Super4PCS

Size
big
small
big
small

Min Max
1.18
1.64
0.40
0.15

455.98
14.41
94.72
67.36

Mean
3.93
3.19
17.40
10.31

Standard Deviation
17.75
1.68
29.01
7.71

with a user guess each were taken. Each user guess was
then rotated in steps of 18° to test the inﬂuence of imprecise
rotation of the seed hologram. The inﬂuence of rotation on
the ICP can be seen in Fig. 5. Keeping the original rotation,
the seed algorithm was translated in a 1m volume around the
initial guess with a step of 0.1m. In Table III one can see
the precision of original user guesses, the precision of the ICP
reﬁnement when the seed algorithms were rotated, translated,
and the average statistics of all cases. The ICP reﬁnement
performs much better and with less deviation than a purely
manual method.

TABLE II
PARAMETER TEST RESULTS OF THE ICP TESTS. ALL PARAMETERS LISTED
AS - DID NOT HAVE AN EFFECT ON THE RESULT.

Best, big
Worst, big
Best, small
Worst, small

Max dist.
1,10,50,100
0.1
0.1
0.1

Max iter. MLS method
500
50
500
50

voxel grid
voxel grid
no mls
voxel grid

Search r MLS param
0.05
0.005
-
0.005

0.05
0.5
-
0.1

TABLE III
THE MEAN, MINIMUM, MAXIMUM AND STANDARD DEVIATION IN
MILLIMETRES OF THE CONDUCTED TESTS. THE FIRST ROW REPRESENTS
THE 12 ORIGINAL HUMAN GUESSES. THE ICP-ROTATION AND
ICP-TRANSLATION ARE THE TESTS CONDUCTED BY ROTATING AND
TRANSLATING THE ORIGINAL USER GUESSES RESPECTIVELY

User guess
ICP - all
ICP - rotation
ICP - translation

mean(mm) min(mm) max(mm)
27.53
4.91
5.90
4.74

138.87
14.42
14.21
14.41

3.65
3.22
3.22
3.22

σ (mm)
44.52
1.39
1.90
1.20

Fig. 4. The referenced robot as displayed to the user on the HoloLens alongside the seed hologram and the spatial mesh.

vol. 14, no. 2, pp. 239–256, Feb 1992.

[14] S. Rusinkiewicz and M. Levoy, “Efﬁcient variants of the icp algorithm,”
in Proceedings Third International Conference on 3-D Digital Imaging
and Modeling, May 2001, pp. 145–152.

[15] A. Aldoma, Z. Marton, F. Tombari, W. Wohlkinger, C. Potthast, B. Zeisl,
R. B. Rusu, S. Gedikli, and M. Vincze, “Tutorial: Point cloud library:
Three-dimensional object recognition and 6 dof pose estimation,” IEEE
Robotics Automation Magazine, vol. 19, no. 3, pp. 80–91, Sep. 2012.

[16] F. Tombari, S. Salti, and L. Di Stefano, “Unique signatures of histograms
for local surface description,” in European conference on computer
vision. Springer, 2010, pp. 356–369.

[17] R. B. Rusu, N. Blodow, and M. Beetz, “Fast point feature histograms
(fpfh) for 3d registration,” in Robotics and Automation, 2009. ICRA’09.
IEEE International Conference on. Citeseer, 2009, pp. 3212–3217.

[18] Z.-C. Marton, D. Pangercic, R. B. Rusu, A. Holzbach, M. Beetz
et al., “Hierarchical object geometric categorization and appearance
classiﬁcation for mobile manipulation.” in Humanoids, 2010, pp. 365–
370.

[19] A. Aldoma, F. Tombari, R. B. Rusu, and M. Vincze, “Our-cvfh–
oriented, unique and repeatable clustered viewpoint feature histogram for
object recognition and 6dof pose estimation,” in Joint DAGM (German
Association for Pattern Recognition) and OAGM Symposium. Springer,
2012, pp. 113–122.

[20] M. Kazhdan, T. Funkhouser, and S. Rusinkiewicz, “Rotation invariant
spherical harmonic representation of 3 d shape descriptors,” in Sympo-
sium on geometry processing, vol. 6, 2003, pp. 156–164.

[21] T. Tung and F. Schmitt, “The augmented multiresolution reeb graph
approach for content-based retrieval of 3d shapes,” International Journal
of Shape Modeling, vol. 11, no. 01, pp. 91–120, 2005.

[22] N. Mellado, D. Aiger, and N. J. Mitra, “Super 4pcs fast global
indexing,” Computer Graphics
[Online]. Available:

pointcloud registration via smart
Forum, vol. 33, no. 5, pp. 205–215, 2014.
http://dx.doi.org/10.1111/cgf.12446

[23] S. Ren, K. He, R. B. Girshick, and J. Sun, “Faster R-CNN: towards
real-time object detection with region proposal networks,” CoRR, vol.
abs/1506.01497, 2015. [Online]. Available: http://arxiv.org/abs/1506.
01497

[24] J. Redmon and A. Farhadi, “YOLO9000: better, faster, stronger,”
CoRR, vol. abs/1612.08242, 2016. [Online]. Available: http://arxiv.org/
abs/1612.08242

[25] J. Long, E. Shelhamer, and T. Darrell, “Fully convolutional networks for
semantic segmentation,” in 2015 IEEE Conference on Computer Vision
and Pattern Recognition (CVPR), June 2015, pp. 3431–3440.

[26] L. Chen, Y. Zhu, G. Papandreou, F. Schroff, and H. Adam,
“Encoder-decoder with atrous separable convolution for semantic image
segmentation,” CoRR, vol. abs/1802.02611, 2018. [Online]. Available:
http://arxiv.org/abs/1802.02611

[27] G. Lin, A. Milan, C. Shen, and I. D. Reid, “Reﬁnenet: Multi-path
reﬁnement networks for high-resolution semantic segmentation,” CoRR,
vol. abs/1611.06612, 2016.
[Online]. Available: http://arxiv.org/abs/
1611.06612

[28] R. Mur-Artal and J. D. Tards, “Orb-slam2: An open-source slam
system for monocular, stereo, and rgb-d cameras,” IEEE Transactions
on Robotics, vol. 33, no. 5, pp. 1255–1262, Oct 2017.

Fig. 5. The inﬂuence of rotation on the registration algorithm. One can see
that the algorithm is robust to rotational errors of the seed hologram, meaning
that the user guess doesn’t have to be overly precise. One can also see that
that error is not mirror due to the robot being asymmetric

[7] S. Stadler, K. Kain, M. Giuliani, N. Mirnig, G. Stollnberger, and
M. Tscheligi, “Augmented reality for industrial robot programmers:
Workload analysis for task-based, augmented reality-supported robot
control,” in 2016 25th IEEE International Symposium on Robot and
Human Interactive Communication (RO-MAN), Aug 2016, pp. 179–184.
[8] D. Krupke, F. Steinicke, P. Lubos, Y. Jonetzko, M. Grner, and J. Zhang,
“Comparison of multimodal heading and pointing gestures for co-located
mixed reality human-robot interaction,” in 2018 IEEE/RSJ International
Conference on Intelligent Robots and Systems (IROS), Oct 2018, pp.
1–9.

[9] S. Hashimoto, A. Ishida, M. Inami, and T. Igarashi, “Touchme: An
augmented reality interface for remote robot control.” JRM, vol. 25,
no. 3, pp. 529–537, 2013.

[10] F. Chu, R. Xu, Z. Zhang, P. A. Vela, and M. Ghovanloo, “Hands-free
assistive manipulator using augmented reality and tongue drive system,”
in 2018 IEEE/RSJ International Conference on Intelligent Robots and
Systems (IROS), Oct 2018, pp. 5463–5468.

[11] J. Elsdon and Y. Demiris, “Augmented reality for feedback in a shared
control spraying task,” in 2018 IEEE International Conference on
Robotics and Automation (ICRA), May 2018, pp. 1939–1946.

[12] G. Cimen, Y. Yuan, R. W. Sumner, S. Coros, and M. Guay, “Interacting
with intelligent characters in ar,” International SERIES on Information
Systems and Management in Creative eMedia (CreMedia), no. 2017/2,
pp. 24–29, 2018.

[13] P. J. Besl and N. D. McKay, “A method for registration of 3-d shapes,”
IEEE Transactions on Pattern Analysis and Machine Intelligence,

[29] J. Engel, T. Sch¨ops, and D. Cremers, “Lsd-slam: Large-scale direct
monocular slam,” in Computer Vision – ECCV 2014, D. Fleet, T. Pajdla,
B. Schiele, and T. Tuytelaars, Eds.
Cham: Springer International
Publishing, 2014, pp. 834–849.

[30] M. Alexa, J. Behr, D. Cohen-Or, S. Fleishman, D. Levin, and C. T.
Silva, “Computing and rendering point set surfaces,” IEEE Transactions
on Visualization and Computer Graphics, vol. 9, no. 1, pp. 3–15, Jan
2003.

[31] M. Quigley, B. Gerkey, K. Conley, J. Faust, T. Foote, J. Leibs, E. Berger,
R. Wheeler, and A. Ng, “Ros: an open-source robot operating system,”
in Proc. of the IEEE Intl. Conf. on Robotics and Automation (ICRA)
Workshop on Open Source Robotics, Kobe, Japan, May 2009.

[32] R. B. Rusu and S. Cousins, “3D is here: Point Cloud Library (PCL),”
in IEEE International Conference on Robotics and Automation (ICRA),
Shanghai, China, May 9-13 2011.

[33] T. Foote, “tf: The transform library,” in Technologies for Practical Robot
Applications (TePRA), 2013 IEEE International Conference on, ser.
Open-Source Software workshop, April 2013, pp. 1–6.

¨Ozyesil, V. Voroninski, R. Basri, and A. Singer, “A survey on
structure from motion,” CoRR, vol. abs/1701.08493, 2017. [Online].
Available: http://arxiv.org/abs/1701.08493

[34] O.

[35] C. Heindl, S. Zambal, T. P¨onitz, A. Pichler, and J. Scharinger, “3d
robot pose estimation from 2d images,” CoRR, vol. abs/1902.04987,
2019. [Online]. Available: http://arxiv.org/abs/1902.04987

[36] G. Popovi´c, A. Hadviger, I. Markovi´c, and I. Petrovi´c, “Computationally
efﬁcient dense moving object detection based on reduced space disparity
estimation,” in 12th IFAC Symposium on Robot Control (SYROCO2018),
2018.

