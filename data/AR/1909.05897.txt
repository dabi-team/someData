9
1
0
2

p
e
S
2
1

]

V
C
.
s
c
[

1
v
7
9
8
5
0
.
9
0
9
1
:
v
i
X
r
a

Efﬁcient 2.5D Hand Pose Estimation via Auxiliary Multi-Task Training for
Embedded Devices

Prajwal Chidananda, Ayan Sinha, Adithya Rao, Douglas Lee, and Andrew Rabinovich
Magic Leap, Inc.
(pchidananda, asinha, arao, dlee, arabinovich) @magicleap.com

Abstract

2D Key-point estimation is an important precursor to
3D pose estimation problems for human body and hands.
In this work, we discuss the data, architecture, and train-
ing procedure necessary to deploy extremely efﬁcient 2.5D
hand pose estimation on embedded devices with highly con-
strained memory and compute envelope, such as AR/VR
wearables. Our 2.5D hand pose estimation consists of 2D
key-point estimation of joint positions on an egocentric im-
age, captured by a depth sensor, and lifted to 2.5D using
the corresponding depth values. Our contributions are two
fold: (a) We discuss data labeling and augmentation strate-
gies, the modules in the network architecture that collec-
tively lead to 3% the ﬂop count and 2% the number of pa-
rameters when compared to the state of the art MobileNetV2
[13] architecture. (b) We propose an auxiliary multi-task
training strategy needed to compensate for the small capac-
ity of the network while achieving comparable performance
to MobileNetV2. Our 32-bit trained model has a memory
footprint of less than 300 Kilobytes, operates at more than
50 Hz with less than 35 MFLOPs.

1. Introduction

Hand pose estimation is a critical component of mixed
reality (MR) applications to enable controller-less interac-
tions. It comes in different forms.

• Discrete pose classiﬁcation: The objective is to clas-
sify the hand pose into one of predeﬁned classes such
as OK, thumbs up, open hand etc. [8]

• 2D hand key-point estimation: Here, a select number
of key-points on the hand are detected in the image.
These usually correspond to visible joint positions of
the hand skeleton [14].

• 2.5D hand key-point estimation: Similar to 2D hand
key-point estimation, select skeletal joint positions are

detected in the image. Additionally, the key-points are
lifted to 2.5d using corresponding depth values of the
estimated 2D joint pixels in the image.

• 3D hand key-point estimation: All key-points corre-
sponding to skeletal joint positions are detected in 3D
coordinates. The 3D detection corresponds to plausi-
ble anthropomorphic conﬁgurations of the human hand
[9, 10].

• Fully articulated 3D hand: The full mesh of the hand
is detected and tracked. This corresponds to 3D
hand key-point estimation in conjunction with 3D hand
shape estimation [12, 17].

In this article we focus on 2.5D hand key-point estima-
tion. While such an approach sufﬁces for most hand inter-
actions in AR/VR/MR environments, it fails when the key-
points on the hand are self-occluded and the depth corre-
sponds to hand surface’s depth ignoring occlusions.

2. Data, labeling, and augmentation

The input to the vision-based hand tracking systems is
often either a monocular rgb/grayscale image or a depth
image. Depth-based approaches have been shown to out-
perform RGB-based approaches for 3D pose estimation
[1, 4, 3, 11, 19, 15]. For our implementation, we use a time-
of-ﬂight (TOF) depth sensor.

Using mechanical turk, we labeled 17 key-points per im-
age. The labelers only label the visible key-points which
correspond to all. Although the network only predicts 8
key-points, the additional key points serve as auxiliary su-
pervision (described in section 4). Images of hands are also
labeled with 8 discrete hand key-pose classes, as well as
right/left hand assignments. Later, we describe how addi-
tional labels act as supervisory tasks.

To avoid hand-like (distractor) objects confounding the
predictions, we composite the images containing the hand
with varied backgrounds containing challenging distractor
objects. By collecting data in controlled environments and

1

 
 
 
 
 
 
using augmentation, we expand the training data to general-
ize to different environments. As most of the collected data
is for a user performing single handed interactions, a skew
is introduced in the dataset. To mitigate this, left and right
hands are composited from different images to look like two
handed interactions.

3. Network Modeling

TOF depth sensors capture phase images which are then
translated to a depth image using post-processing. The com-
pute time for post-processing the phase images to calculate
the depth image adds a considerable portion to the end-to-
end latency for hand tracking. Towards addressing this is-
sue, we explore directly using a linear combination of phase
images, which we term amplitude image to perform 2D
key-point estimation and perform depth image processing
in parallel, this effectively reducing the overall latency. As
discussed later, this improves performance while removing
around 20ms latency of the sequential depth processing by
doing it in parallel.

Our network follows an encoder-decoder structure. The
encoder is is organized as a pipeline of tiers; where each tier
is a concatenation of units and each unit is a combination of
blocks as shown in Fig. 1. We use a variant of the DenseNet
[6] block in Tier-2, wherein we use two Conv-BN-ReLU
model blocks instead of the conventional four blocks in or-
der to reduce sequential compute. Unlike in DenseNet, we
do not concatenate the input tensor with the intermediate
feature tensors. This reduces compute and stems from our
observation that the input feature tensor is mostly redun-
dant and does not contribute to performance gains. How-
ever, removing the input tensor slows down training. Hence,
in Tier-3 we replace the standard Conv-BN-ReLU model
blocks with ResNet blocks to improve information ﬂow dur-
ing back-propagation. Furthermore, we use a ladder of bot-
tleneck ResNet blocks wherein each module has convolu-
tion with a different dilation rate, i.e., 4 bottleneck ResNet
blocks with a dilation rate of 1,2,3,4 respectively. Overall,
our network combines the best of DenseNet’s feature reuse
property and ResNet’s [5] information ﬂow property.

We also use small number of channels to reduce parallel
compute with 16 channels after Tier-1, 32 channels after
Tier-2, and 64 channels after Tier-3. Furthermore, we use
dilated convolutions in Tier-3 to increase the receptive ﬁeld
of our relatively shallow network.

We employ grouped convolutions at all but ﬁrst tier so
as to reduce compute. In Tier-2 we use grouping factor of
4 and we use grouping factor of 8 in Tier-3.
In our ex-
periments, we observed that the encoder is responsible for
a majority of the gains in performance, and changing the
decoder architecture only marginally affects performance.
Hence, our key-point decoder is very lean and all convolu-
tions are channel wise, i.e., number of groups is equal to the

number of channels.

Embedded Implementation

The embedded implementation of our network architec-
ture is carefully designed to reduce compute / memory over-
head and energy consumption. The Myriad2 VPU runs
at 600MHz and provides 12 VLIW compute cores called
SHVs. Under typical workloads, total power consumption
of the Myriad2 chip is less than 2W. Each SHV is allo-
cated a 128KB working memory slice out of 2MB on-chip
SRAM. Our Gestures DNN must perform real-time 45FPS
hand tracking and gesture recognition using a single SHV.
Using conventional implementations makes these mini-
mization challenging for several reasons: (a) Typical deep
learning frameworks convert convolution into a large ma-
trix multiply in a highly memory inefﬁcient way (b) Input
data tensors are typically stored in channel planar format,
which is inefﬁcient for vectorization. (c) The kernel sizes
are often not a multiple of the vector instruction width (d)
Off-the-shelf implementations of dilated convolutions have
considerable computational overhead.

To address these challenges, (a) We reorder and inter-
leave the input data channels to each convolution layer to
align with vector instruction ordering. We simultaneously
reorder the kernel stack such that convolutions are reduced
to dot products and the output channel is automatically en-
coded in the interleaved format for the next layer. (b) We
group convolution layers so that the number of ﬁlters per
group is a multiple of the register lanes, consequently, max-
imizing vector register utilization. (c) We use a comb de-
sign for dilated convolutions which minimizes the on-chip
memory footprint. For example, for dilation=2, convolution
splits into four independent ﬁeld-wise computations (even
rows-even columns, even-odd, etc) which are computed in-
dependently and recombined on output. Dilated convolu-
tions are thus computed at zero effective overhead.

4. Training

We adopt a multi-task learning paradigm in the training
procedure by employing multiple network predictions and
loss functions, while maintaining the the prime focus on 2D
key-point prediction. Note that human labeling for auxiliary
tasks such as discrete hand pose or categorical orientation is
much faster than key-point labeling, or comes for free with
key-point labeling such as key-point visibility. At inference
time, only the primary encoder and decoder are part of the
network running on device.

Cross entropy with 1-hot label is used to predict each
of the 16 key-points (8 key-points per hand). We observed
that the aggressive down-sampling in the early layers cou-
pled with the low network capacity, makes the conventional
mean squared loss (MSE) loss ineffective. Cross entropy
has a stronger gradient signal and is much more effective.

Figure 1. (A) Model Blocks used in our network architecture (B) Model Units: a combination of model blocks, (C) Model Tier: a
concatenation of model units, which could be seen as a variant of the DenseBlock, (D) Primary encoder: a pipeline of three tiers, (E)
Overall network architecture along with auxiliary modules with corresponding supervised losses trained end-to-end for our 2.5D hand
key-point estimation. Our Tier-1 is a simple convolution layer, Tier-2 is composed of two 131-ConvBlocks, and Tier-3 is composed of two
Dilated-Ladder units.

We experimented with label smoothing but did not observe
performance gains.

Given that we have 17 key-point labels per hand, we
use the additional key-points as training supervision, even
though they are not part of the ﬁnal inference module. As
our decoder is composed of fully grouped convolutions,
we observed some key-points failing to train all together.
Hence, the decoder for the auxiliary key-points do not use
grouping in the convolutions so as to avoid ﬂoating key-
points and regularize the feature tensor after the encoder.

The binary key-point and hand visibility masks serve
three purposes: make training stable, suppress occluded

key-points and invisible hands during inference, enable an
early out during inference to reduce latency. We use a bi-
nary cross entropy loss to train these tasks.

The data collected was heavily skewed against palm-
facing data causing the trained model to under-perform on
palm-facing data. To address this, we regularized the pre-
dictions using a categorical hand orientation loss. We label
8 categorical hand orientations that could arise from supina-
tion or pronation of the hand. Since the categories are ap-
proximate, we soften the labels and use cross-entropy loss
to train these tasks.

We classify the hand pose into nine discrete classes: OK,

open-hand, pinch, C-pose, ﬁst, L-pose, point, thumbs-up,
and a dummy class capturing all other poses. We use cross-
entropy loss to train the discrete hand-pose classiﬁcation.

Following the architecture of BiseNet proposed [18], we
use our network architecture discussed previously as the
context path and use a spatial path similar to BiseNet as a
training-time artifact to provide useful supervision that reg-
ularizes the key-points that jump off the hand. We train
the network to segment three classes: background, left hand
and right hand using a per-pixel cross entropy loss.

We observe that key-points often fail to train due to the
grouped structure of decoder. Following [16], we add ad-
ditional key-point supervision heads after three intermedi-
ate layers, with different spatial resolutions: tier 3 of the
primary encoder (1/8th the full resolution), the ﬁrst up-
sampling block (1/4th the full resolution) and the second
up-sampling block (1/2 the full resolution). This stabilizes
training and facilitates better gradient ﬂow for training.

Our ﬁnal loss is a weighted sum of all the individual task
losses: primary key-point loss Lkp, auxiliary key-point loss
Lakp, key-point and hand visibility loss Lkphv, categorical
hand orientation loss Lcho, discrete hand pose loss Ldhp,
segmentation loss Lseg, deep supervision loss Lds.

We use task-weighting to weigh the different losses, as
the predictions are not all at the same scale. The weights
for the different tasks were derived heuristically, but can be
replaced with an adaptive weighting using gradient normal-
ization as described in [2]. The full training loss with all
task losses and corresponding weights are shown in Eq 1.

Ltotal = wkpLkp + wakpLakp + wkphvLkphv+

wchoLcho + wdhpLdhp + wsegLseg + wdsLds

(1)

where wkp = 1, wakp = 1, wkphv = 20, wcho = 20, wdhp = 10,
wseg = 50, wds = 1.

We empirically observe that the network ﬁnds it harder
to predict ﬁnger tips when compared to the other key-points.
We address this by simply doubling the losses for ﬁnger tips
while calculating Lkp and Lakp.

Table 1. Ablation study: Each supervision technique is removed
and the corresponding average key-point errors are shown. Wk
here represents key-point loss weighting.
Input mode Lseg Lds Lcho Wk Lkphv Ldhp
×
Depth
×
Amplitude
(cid:88)
Amplitude
(cid:88)
Amplitude
(cid:88)
Amplitude
(cid:88)
Amplitude
×
Amplitude
(cid:88)
Depth
(cid:88)
Amplitude

6.226
6.054
5.941
5.730
5.994
5.690
5.655
5.898
5.556

×
×
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

×
×
(cid:88)
×
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

×
×
×
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

×
×
(cid:88)
(cid:88)
×
(cid:88)
(cid:88)
(cid:88)
(cid:88)

×
×
(cid:88)
(cid:88)
(cid:88)
×
(cid:88)
(cid:88)
(cid:88)

Err (px)

Table 2. Comparison of size, computational cost and performance
between DenseNet, MobileNet-V2 and Our implementation.

Backbone

Parameters GFLOPs Keypoint Error

DenseNet
MobileNetV2
Ours

7.017M
1.893M
0.041M

4.866
1.209
0.035

4.457px
5.306 px
5.556 px

Table 3. Comparison of inference time for a single forward pass
on an Intel Movidius Myriad between mvTensor and our custom
implementation.

Shave #

1

2

3

4

6

mvTensor (ms)
Ours (ms)

205.0
16.0

114.0
-

84.0
-

68.0
-

54.0
-

5. Results and Discussion

We evaluate our method on its 2D key-point estimation
performance and run time performance on an Intel Movid-
ius Myriad chip, which affects latency. We run experiments
on a reduced in-house dataset that has 40 users using a
train/validation/test split of 28/4/8. The dataset has over
5K frames per user, with a total 225733 frames. To quan-
titatively evaluate the key-point estimation, we report the
average 2D euclidean distance between the estimated 2D
key-points and the ground truth, expressed in pixels.

First, we evaluate the impact of all the losses used in the
training scheme by doing an ablation study. The models are
all trained for 20 epochs, with a learning rate of 0.001 with
a linear decay, using Adam as the optimizer. As shown in
Table 1, each loss positively contributed to the performance
and the model which has all the training losses performs
best. Furthermore, the amplitude image as input to the net-
work consistently performs better than the depth image in-
put, while also reducing latency. Note, at run-time we lift
the 2D predictions on amplitude image to 2.5D using the
depth image processed in parallel. We use simple ﬁltering
and heuristics to ensure valid depth for identiﬁed 2D key-
points.

Second, we compare our model with DenseNet-121 [6]
and MobileNet-V2 [13] in terms of the number of model
parameters, the total number of ﬂoating point operations
for a single frame, and the 2D key-point error. We use the
same decoder for all three networks, with the same training
scheme used in the ablation study. Table 2 compares the
three models. We see that our model is 2% the size of Mo-
bileNetV2 in terms of parameters and has 3% the compute
of MobileNetV2, with only 4.7% degradation in key-point
localization performance.

We evaluate the run time performance of our implemen-
tation by comparing its latency with that of the off-the-shelf
mvTensor implementation on the Intel Movidius Myriad
[7]. Table 3 compares the two implementations. By re-

Figure 2. Qualitative results on our in-house dataset. Top row shows 2D key point predictions on depth images, Middle row shows 2D key
point predictions on amplitude images, Bottom row shows corresponding segmentation results.

ordering of input activation channels and the kernel stack,
having grouped convolution layers with a multiple-of-the-
register-length number of kernels per group, and using an
efﬁcient comb design for dilation, our embedded implemen-
tation achieves 16ms latency, which is a 12x speedup over
mvTensor.

Overall, we describe an end-to-end 2.5D key-point es-
timation system with unique insights at each stage of the
pipeline: data, network architecture, training and embed-
ded implementation. The ﬁrst take-away is that auxiliary
labeling and multi-task training is a viable strategy to im-
prove performance of extremely compact network architec-
tures bound by compute constraints on edge devices. Sec-
ond, network architectures crafted in sync with embedded
hardware operating constraints can offer signiﬁcant bene-
ﬁts at run-time, vital for latency critical applications like
hand-tracking.

6. Acknowledgements

We would like to acknowledge Lexin Tang at Magic
Leap, Inc. for her work on the embedded code implementa-
tion.

References

[1] Seungryul Baek, Kwang In Kim, and Tae-Kyun Kim. Aug-
mented skeleton space transfer for depth-based hand pose es-
timation. In Proceedings of the IEEE Conference on Com-
puter Vision and Pattern Recognition, pages 8330–8339,
2018. 1

[2] Zhao Chen, Vijay Badrinarayanan, Chen-Yu Lee, and An-
drew Rabinovich. Gradnorm: Gradient normalization for
adaptive loss balancing in deep multitask networks. arXiv
preprint arXiv:1711.02257, 2017. 4

[3] Chiho Choi, Sang Ho Yoon, Chin-Ning Chen, and Karthik
Ramani. Robust hand pose estimation during the interaction
with an unknown object. In Proceedings of the IEEE Inter-
national Conference on Computer Vision, pages 3123–3132,
2017. 1

[4] Chiho Choi, Sangpil Kim, and Karthik Ramani. Learning
hand articulations by hallucinating heat distribution. In Pro-
ceedings of the IEEE International Conference on Computer
Vision, pages 3104–3113, 2017. 1

[5] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
Deep residual learning for image recognition. In Proceed-
ings of the IEEE conference on computer vision and pattern
recognition, pages 770–778, 2016. 2

[6] Gao Huang, Zhuang Liu, Laurens Van Der Maaten, and Kil-
ian Q Weinberger. Densely connected convolutional net-
works. In Proceedings of the IEEE conference on computer
vision and pattern recognition, pages 4700–4708, 2017. 2, 4

In Proceedings of the IEEE Conference
to future goals.
on Computer Vision and Pattern Recognition, pages 2636–
2645, 2018. 1

[7] Mircea Horea Ionica and David Gregg. The movidius myr-
IEEE

iad architecture’s potential for scientiﬁc computing.
Micro, 35(1):6–14, 2015. 5

[8] Jason Isaacs and Simon Foo. Hand pose estimation for amer-
In Thirty-Sixth Southeast-
ican sign language recognition.
ern Symposium on System Theory, 2004. Proceedings of the,
pages 132–136. IEEE, 2004. 1

[9] Gyeongsik Moon, Ju Yong Chang, and Kyoung Mu Lee.
V2v-posenet: Voxel-to-voxel prediction network for accu-
rate 3d hand and human pose estimation from a single depth
map. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition, pages 5079–5088, 2018. 1

[10] Franziska Mueller, Florian Bernard, Oleksandr Sotny-
chenko, Dushyant Mehta, Srinath Sridhar, Dan Casas, and
Christian Theobalt. Ganerated hands for real-time 3d hand
In Proceedings of the IEEE
tracking from monocular rgb.
Conference on Computer Vision and Pattern Recognition,
pages 49–59, 2018. 1

[11] Franziska Mueller, Dushyant Mehta, Oleksandr Sotny-
chenko, Srinath Sridhar, Dan Casas, and Christian Theobalt.
Real-time hand tracking under occlusion from an egocentric
rgb-d sensor. In Proceedings of the IEEE International Con-
ference on Computer Vision, pages 1284–1293, 2017. 1
[12] Georgios Pavlakos, Vasileios Choutas, Nima Ghorbani,
Timo Bolkart, Ahmed AA Osman, Dimitrios Tzionas, and
Expressive body capture: 3d hands,
Michael J Black.
arXiv preprint
face, and body from a single image.
arXiv:1904.05866, 2019. 1

[13] Mark Sandler, Andrew Howard, Menglong Zhu, Andrey Zh-
moginov, and Liang-Chieh Chen. Mobilenetv2: Inverted
residuals and linear bottlenecks. In Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition,
pages 4510–4520, 2018. 1, 4

[14] Tomas Simon, Hanbyul Joo, Iain Matthews, and Yaser
Sheikh. Hand keypoint detection in single images using mul-
tiview bootstrapping. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, pages 1145–
1153, 2017. 1

[15] Ayan Sinha, Chiho Choi, and Karthik Ramani. Deephand:
Robust hand pose estimation by completing a matrix im-
puted with deep features. In Proceedings of the IEEE con-
ference on computer vision and pattern recognition, pages
4150–4158, 2016. 1

[16] Liwei Wang, Chen-Yu Lee, Zhuowen Tu, and Svetlana
Lazebnik. Training deeper convolutional networks with deep
supervision. arXiv preprint arXiv:1505.02496, 2015. 4
[17] Donglai Xiang, Hanbyul Joo, and Yaser Sheikh. Monocular
total capture: Posing face, body, and hands in the wild. arXiv
preprint arXiv:1812.01598, 2018. 1

[18] Changqian Yu, Jingbo Wang, Chao Peng, Changxin Gao,
Gang Yu, and Nong Sang. Bisenet: Bilateral segmenta-
In Pro-
tion network for real-time semantic segmentation.
ceedings of the European Conference on Computer Vision
(ECCV), pages 325–341, 2018. 4

[19] Shanxin Yuan, Guillermo Garcia-Hernando, Bj¨orn Stenger,
Gyeongsik Moon, Ju Yong Chang, Kyoung Mu Lee, Pavlo
Molchanov, Jan Kautz, Sina Honari, Liuhao Ge, et al. Depth-
based 3d hand pose estimation: From current achievements

