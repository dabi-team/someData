0
2
0
2

l
u
J

2

]

C
C
.
s
c
[

4
v
4
0
0
8
0
.
0
1
8
1
:
v
i
X
r
a

Complexity of Computing the Anti-Ramsey Numbers for Paths

Saeed Akhoondian Amiri∗ Alexandru Popa† Mohammad Roghani‡ §

Golnoosh Shahkarami‡¶ Reza Soltani‡§ Hossein Vahidi ‡¶

Abstract

The anti-Ramsey numbers are a fundamental notion in graph theory, introduced in
1978, by Erd¨os, Simonovits and S´os. For given graphs G and H the anti-Ramsey number
ar(G, H) is deﬁned to be the maximum number k such that there exists an assignment of
k colors to the edges of G in which every copy of H in G has at least two edges with the
same color.

Usually, combinatorists study extremal values of anti-Ramsey numbers for various
classes of graphs. There are works on the computational complexity of the problem
when H is a star. Along this line of research, we study the complexity of computing the
anti-Ramsey number ar(G, Pk), where Pk is a path of length k. First, we observe that
when k is close to n, the problem is hard; hence, the challenging part is the computational
complexity of the problem when k is a ﬁxed constant.

We provide a characterization of the problem for paths of constant length. Our ﬁrst
main contribution is to prove that computing ar(G, Pk) for every integer k > 2 is NP-hard.
We obtain this by providing several structural properties of such coloring in graphs. We
(cid:15) is hard
investigate further and show that approximating ar(G, P3) to a factor of n−
already in 3-partite graphs, unless P = N P . We also study the exact complexity of the
precolored version and show that there is no subexponential algorithm for the problem
unless ETH fails for any ﬁxed constant k.

1/2

−

Given the hardness of approximation and parametrization of the problem, it is natural
to study the problem on restricted graph families. Along this line, we ﬁrst introduce the
notion of color connected coloring, and, employing this structural property, we obtain a
linear time algorithm to compute ar(G, Pk), for every integer k, when the host graph, G,
is a tree. We have introduced several techniques in our algorithm that we believe might
be helpful in providing approximation algorithms for other restricted families of graphs.

1 Introduction

For given graphs G and H, the anti-Ramsey number ar(G, H) is deﬁned to be the maximum
number k such that there exists an assignment of k colors to the edges of G in which every
copy of H in G has at least two edges with the same color. Classically, the graph G is a large
complete graph and the graph H is from a particular graph class.

The study of anti-Ramsey numbers was initiated by Erd¨os, Simonovits and S´os in 1975 [9].
Since then, there have been a large number of papers on the topic. There are papers that

∗University of Cologne, Cologne, Germany amiri@informatik.uni-koeln.de
†University of Bucharest and National Institute of Research and Development in Informatics, Bucharest,

Romania alexandru.popa@fmi.unibuc.ro

‡MPI for Informatics, Saarland Informatics Campus, Saarbr¨ucken, Germany {mohammadroghani43,

rsoltani97}@gmail.com {gshahkar, hovahidi}@mpi-inf.mpg.de

§Sharif University of Technology, Tehran, Iran
¶Saarbr¨ucken Graduate School of Computer Science, Saarbr¨ucken, Germany

1

 
 
 
 
 
 
study the case when G = Kn and H is a: cycle, e.g., [4, 9, 21], tree, e.g., [18, 19], clique,
e.g., [5, 9, 13], matching, e.g., [7, 16, 22] and others, e.g., [3, 9].

The anti-Ramsey numbers are connected with the rainbow number [14] rb(G, H), which is
deﬁned as the minimum number k such that in any coloring of the edges of G with k colors,
there exists a rainbow copy of H. Thus, ar(G, H) = rb(G, H) − 1. We call a coloring without
a rainbow copy of H, an H-free coloring.

Various combinatorial works studied the case when H is a path or a cycle. For instance,
the work of Simonovits and Sos [24] shows that there exists a constant t such that for a
suﬃciently long path ar(Kn, Pt) ∈ O(t · n). The combinatorial analysis of the problem is
extremely diﬃcult when instead of Kn we use an arbitrary graph as the host graph. For a
more detailed exposition of the combinatorial results on anti-Ramsey numbers, we refer the
reader to the following surveys: [14, 23].

Besides the extremal results, the anti-Ramsey numbers have been studied from the
computational point of view in several papers. The anti-Ramsey numbers when G is an
arbitrary graph was studied for the case when H is a star. The problem was introduced by
Feng et al. [10, 11, 12], motivated by applications in wireless mesh networks and was termed
the maximum edge q-coloring.

They provide a 2-approximation algorithm for q = 2 and a (1 + 4q−2

3q2−5q+2 )-approximation
for q > 2. They show that the problem is solvable in polynomial time for trees and complete
graphs in the case q = 2. Later, Adamaszek and Popa [1] show that the problem is APX-hard
and present a 5/3-approximation algorithm for graphs with a perfect matching. For more
results related to the maximum edge q-coloring, the reader can refer to [2].

To improve our understanding on such problems, we continue the recent line of study of
the computational complexity of the problem. Similar to previous works we restrict H to a
basic class of graphs, paths. We let G be either an arbitrary graph or a restricted family of
graphs such as trees or bipartite graphs. We provide a big picture on what is tractable and
what is not tractable when we are dealing with anti-Ramsey numbers on paths. Namely we
prove the following.

Our Results

1. First, we show that computing the value of ar(G, Pk) is NP-hard for every k > 2 via a
reduction from the maximum independent set problem. Namely, we prove the following
theorem.

Theorem 1. For every k > 2, Pk-free coloring problem is NP-hard.

The above theorem basically states that there is no XP algorithm, parameterized by k,
for the problem unless P = N P . The reduction is multi stage: ﬁrstly we distinguish
between the odd and even values of k. Then for each parity of k, given an instance of
independent set, we construct an auxiliary graph and prove several structural lemmas
on that graph to establish a one to one mapping between the maximum independent set
in the original graph and the maximum anti-Ramsey coloring on the auxiliary graph.
By a more careful analysis of the above proof for the special case of k = 3, we show
the problem is inapproximable by a factor n−1/2−(cid:15), even on 3-partite graphs, unless
P = N P .

Given the hardness of the problem, it is natural to investigate what would be the
best exponential algorithm for the problem. We study the running time of the exact
algorithm for a slight variant of the problem, namely, Precolored Pk-free coloring. We

2

prove that the problem does not admit an exact algorithm with running time 2o(|E(G)|)
assuming ETH.

Theorem 2. There is no 2o(|E(G)|) algorithm for Precolored ar(G, Pk), for any ﬁxed k,
unless ETH fails.

To obtain such a reduction, we provide a graph construction with low edge density
gadgets. This is unlike standard hardness proofs where it is possible to blow up the
graph by any polynomially bounded size.

2. Given the above hardness results, even for small values of k, it is natural to explore the
tractability of problem when the host graph has a nice structural property. We ﬁrst
introduce a generic algorithmic idea, of color connected coloring and we exploit this to
develop a linear time algorithm on trees.

Theorem 3. For a tree T , there is an exact linear time algorithm that computes
ar(T, Pk) for every constant integer k; the algorithm runs in time O(|V (T )|k4).

Our algorithm is based on dynamic programming on trees, however, unlike most problems
in trees, this one is not that straightforward and we employed several techniques to
solve the problem. There are known combinatorial results for cycles of length three
on outerplanar graphs [15] and the algorithm for trees for 3-consecutive coloring of [6].
Our algorithm is independent of the latter; however, if we set k = 3 our algorithm
solves the aforementioned problem, while the other direction does not work.

The paper is organized as follows. In Section 2, we introduce preliminaries. Then, we
prove the NP-hardness of computing ar(G, Pk) in Section 3 and next, we show the hardness
of inapproximability for P3-free coloring. In Section 5 we show the exact complexity result for
Precolored P3-free coloring. In Section 6, we provide an exact polynomial time algorithm for
trees. Finally, in Section 7, we summarize the results and present directions for future work.

2 Preliminaries

We use N to denote the set of natural numbers and we write [n] to denote the set {1, . . . , n}.
We refer the reader to [8] for basic notions related to graph theory. All the graphs considered
in this paper are simple and undirected.

Let G be a graph, we write V (G) for its vertices and E(G) for its edges. For any vertex
v ∈ V (G) we deﬁne N (v) = (cid:8)u ∈ V (G) | {u, v} ∈ E(G)(cid:9) to be the open neighborhood of
v, and N [v] = N (v) ∪ {v} as its closed neighborhood. Similarly for any subset of vertices
A ∈ V (G) we deﬁne N [A] = (cid:83)
v∈A N [v], and N (A) = N [A] \ A. For k ∈ N+ we denote by Pk
a path with k + 1 vertices. The length of Pk is k, the number of its edges. Also let p be a Pk,
depending on the context we may write p = (e1, . . . , ek) where ei ∈ E(p) or p = (v1, . . . , vk+1)
where vi ∈ V (p) to describe a path.

Deﬁnition 4 (Coloring). Given an undirected graph G = (V, E), a coloring of the edges of
G is a function c : E → N. Similarly for any subset A ⊆ E we deﬁne c(A) = (cid:83)

e∈A c(e).

We call a coloring of the edges of a graph G a rainbow coloring if for every pair of edges
e (cid:54)= e(cid:48) ∈ E we have c(e) (cid:54)= c(e(cid:48)). Let G, H be two graphs, an edge coloring c of G is H-free
coloring if there is no rainbow subgraph of G isomorphic to H. We denote the number

3

of distinct colors used in c by cG,H . Let C be the set of all H-free colorings of G. The
anti-Ramsey number of G is ar(G, H) = maxc∈C cG,H . We observe that if k is part of the
input, then the problem of computing ar(G, Pk) is at least as hard as ﬁnding a Hamiltonian
path.

Observation 5. Computing ar(G, P|V (G)|−1) is NP-hard.

Proof. ar(G, P|V (G)|−1) = |E| if and only if G does not have a Hamiltonian Path.

In the above we can replace Hamiltonian Path in the proof with longest path and in
addition use the length of this path as parameter to prove the hardness for large values of k.

3 Hardness of Pk Anti-Ramsey Coloring

In this section for every k > 2, we prove the hardness by a reduction from the maximum
independent set (MIS) problem.

Proof Sketch: We construct a new graph G(cid:48) from a graph G such that from a maximum
Pk-free coloring of G(cid:48), we can derive the size of the maximum independent set of G. To obtain
the desired result, we divide the problem into three subproblems. We use the reduction with
diﬀerent approaches for 1. k = 4, 2. every even k > 4, 3. every odd k > 1.

Roughly speaking, we replace every vertex and edge with speciﬁc gadgets; this depends
on the parity of k. Afterward, in each case, intuitively, we prove that if a vertex belongs to
an independent set, its corresponding gadget can be colored with more distinct colors than
a vertex that does not belong to an independent set. On the other hand, for each case, we
design edge gadgets such that their coloring can be (almost) ﬁxed in advance, despite the
choice of colors for the vertex gadgets. The crucial part of the proofs lies in the analysis of
a structure of the maximum Pk-free coloring of G(cid:48) and, exploiting the dependency between
vertex gadgets.

Hardness of the Problem for Odd k > 1

Assumption I: In this part we assume k > 1 is an odd integer.

In the following, we ﬁrst present an upper bound on the number of colors when the graph
H is a path. For certain technical reasons that we will see in the proofs, we deﬁne a constant
ck depending only on k with a particular lower bound.
√

√

Lemma 6. ar(G, Pk) ≤ ck|V (G)| for some ck ∈ Θ(k

log k) and ck > 3k

log k.

Proof. Let c be a Pk-free coloring of G with the maximum number of colors; we take the
maximum size set of edges of distinct colors w.r.t. c. The resulting graph has no Pk as a
subgraph and hence it does not have any Pk as a minor so by Mader’s theorem [8, 20] it has
at most c(cid:48)

log k), we set ck = max{c(cid:48)

k|V (G)| edges where c(cid:48)

k, 1 + 3k(cid:100)

k ∈ O(k

log k(cid:101)}.

√

√

Assumption II: In this section, ck is what we used in Lemma 6. Whenever we write I it
means a maximum independent set in the graph G.

Given an undirected graph G, we construct a graph G(cid:48) as follows:

1. For each v ∈ V (G) we introduce two new vertices sv, tv ∈ V (G(cid:48)) and (fk + 1)ck|V (G)|
(fk+1)ck|V (G)|}, connecting sv

internally disjoint paths of length k − 1, P v = {P v
to tv. Later in Lemma 12 we determine the value of fk.

1 , . . . , P v

4

2. For each edge {v, u} ∈ E(G), add 4 new edges in E(G(cid:48)): {sv, tu}, {tv, su}, {tv, tu},
t , more

{sv, su}. Let us deﬁne the union of all such edges in the entire graph G(cid:48) as Es
formally Es
{u,v}∈E(G){{sv, tu}, {tv, su}, {tv, tu}, {sv, su}}.

t = (cid:83)

An edge coloring is valid if it is a Pk-free coloring. We start by providing some lemmas
and observations on the structure of valid colorings of G(cid:48) to establish a connection between
such a coloring and an independent set in G.

Lemma 7. In any Pk-free coloring of G(cid:48) the edges in Es
distinct colors.

t will receive at most 2ck|V (G)|

Proof. The subgraph of G(cid:48) induced on endpoints of edges in Es
hence the lemma follows from Lemma 6.

t has exactly 2|V (G)| vertices

Lemma 8. If G is a cycle of length 2(k − 1) then ar(G, Pk) = 2(k − 2).

Proof. First of all, we provide a coloring scheme for a cycle of length 2(k − 1) with 2(k − 2)
distinct colors. Consider two vertices s, v of this cycle which are within distance k − 1 from
each other. There are two internally vertex disjoint paths P and P (cid:48) each of length k − 1
between s and v. Recall that k > 1 is an odd number hence k − 1 = 2t, t > 0. Let suppose the
edges of P and P (cid:48) are e1, . . . , e2t and e(cid:48)
2t respectively, w.r.t. their order of appearance
from s to t. We deﬁne a coloring function c as follows.

1, . . . , e(cid:48)

c :

(cid:40)

c(ei) = i, c(e(cid:48)
c(ei) = t, c(e(cid:48)

i) = i + k − 1,
i) = t + k − 1,

if i (cid:54)= t and i (cid:54)= t + 1,
otherwise.

c colors the graph with 2(k − 3) + 2 = 2(k − 2) colors. On the other hand, every path
of length k contains either both of et, et+1 or both of e(cid:48)
t+1, hence, as such pairs have the
same color, every path of length k will have at most k − 1 distinct colors. Thus c deﬁnes a
Pk-free coloring on the cycle of length 2(k − 1).

t, e(cid:48)

Now we prove by contradiction that ar(G, Pk) ≤ 2(k − 2). Assume there is a coloring
with more than 2(k − 2) distinct colors. Hence either P or P (cid:48) has (k − 1) distinct colors, let’s
say it is P , then two edges of P (cid:48) that are incident to end points of P should be colored by
one of the colors that is already in color set of P . So P (cid:48) has at most (k − 1) − 2 colors that
are not in the color set of P , hence we have at most (k − 1) + (k − 1 − 2) = 2(k − 2) distinct
colors.

Lemma 9. Let H be a graph isomorphic to P v for any v ∈ V (G). Then there is a valid
coloring of H with (k − 2) · (fk + 1)ck|V (G)| distinct colors.

Proof. Color each path of H with k − 2 colors: color two middle edges of the path Pi by color
i, color the rest of edges by colors ki + j for j ∈ [k − 3]. By Lemma 8 this is a valid coloring.
The number of distinct colors follows from the number of paths and the number of distinct
colors of each path. Such a scheme is depicted in the lower set of paths of the Figure 2 (vertex
v).

The next lemma bounds the number of distinct colors of each individual P v.

Lemma 10. There is no valid coloring of G(cid:48) with more than (k − 2) · (fk + 1)ck|V (G)| distinct
colors in one P v for v ∈ V (G), |V (G)| ≥ 2.

5

Figure 1: Illustration of Lemma 12 for P3. Highlighted paths are rainbow P3’s. Neither all
possible conﬁgurations are depicted nor all connector edges. No two adjacent nodes could
receive three diﬀerent colors and at the same time avoid a rainbow P3.

Proof. For the sake of contradiction suppose there is a valid coloring of G(cid:48) so that P v is
colored with more than (k − 2) · (fk + 1)ck|V (G)| distinct colors. By Pigeonhole Principle,
at least one of the P v
i ’s has (k − 1) edges with distinct colors c1, . . ., ck−1. By Lemma 8 all
other edges in P v should be colored with at most (k − 3) · ((fk + 1)ck|V (G)| − 1) other colors,
contradicting that P v has more than (k − 2) · (fk + 1)ck|V (G)| distinct colors.

Deﬁnition 11 (Family of Distinct Colored Paths). A set of paths P is a family of distinct
colored paths if the following conditions hold:

1. Their union is a graph with a valid Pk-free coloring.

2. For every P (cid:54)= Q ∈ P and, for every e ∈ P, e(cid:48) ∈ Q we have that c(e) (cid:54)= c(e(cid:48)).

Note that from the above Deﬁnition 11, it is clear that the set of paths should be pairwise
edge disjoint (otherwise it does not meet the second condition), also one path may repeat
some of its own colors.

The following lemma, basically states that we cannot have two adjacent nodes u, v in
G such that their corresponding paths receive many distinct colors in G(cid:48). We employ this
key property later in the hardness proof to obtain an MIS based on the size of the family of
distinct colored paths.

Lemma 12. Let {v, u} ∈ E(G), then there is a constant fk (this is what we used to construct
G(cid:48)), depending only on k, such that, in any valid coloring of G(cid:48) if there are families of distinct
colored paths P ⊆ P v, Q ⊆ P u, such that each P ∈ P ∪ Q is colored with at least k − 2 distinct
colors, then min{|P| , |Q|} < fk.

Proof. We set fk = k + 2 and prove the lemma by contradiction. Suppose |P| , |Q| ≥ fk. Each
path P in P has at least k − 2 distinct colors, if we divide it into two equal sized subpaths,
one of them is rainbow. There are k + 2 such subpaths in P, so w.l.o.g. at least half of them
are incident to sv. Let us call them the set P (cid:48) = {P1, . . . , Pt}, where t = (cid:100) k+2
2 + 2.
Similarly there are t rainbow subpaths Q(cid:48) = {Q1, . . . , Qt} in P u such that w.l.o.g. they have
su as one of their endpoints and length of each of them is k−1
2 .

2 (cid:101) = k−1

Let c1 be the color of the edge {su, sv}. As both of P, Q are families of distinct color
paths, the same holds for P (cid:48), Q(cid:48). Then, we have at least t − 1 paths P (cid:48)(cid:48) ⊆ P (cid:48) and at least
t − 1 paths Q(cid:48)(cid:48) ⊆ Q(cid:48) such that none of their edges are colored with c1. Length of a path
P ∈ P (cid:48)(cid:48) is t − 2 so it can have common color with at most t − 2 paths in Q(cid:48)(cid:48). Hence, as the
number of paths in Q(cid:48)(cid:48) is t − 1, there are at least two paths P ∈ P (cid:48)(cid:48), Q ∈ Q(cid:48)(cid:48) such that union
of P and Q and {su, sv} is a rainbow path of length k. A contradiction to the assumption of
the lemma, hence, the claim of the lemma follows.

6

Figure 2: The coloring scheme of vertex gadgets for P7-free coloring. Colors are represented
by numbers. To simplify the visualization, some connector edges and some parallel paths
are not drawn. For v ∈ I each path gets k − 2 = 5 colors and for u ∈ V \ I each path gets
k − 3 = 4 colors. Two paths of length 7 are highlighted, neither of them are rainbow.

For a better understanding of the above lemma see Figure 2. The following establishes a
lower bound on the number of distinct colors w.r.t. the size of a maximum independent set I.

Lemma 13. ar(G(cid:48), Pk) > |I|(k − 2)(fk + 1)ck|V (G)| + (|V (G)| − |I|)(k − 3)(fk + 1)ck|V (G)|

Proof. For v ∈ I color P v with (k − 2)(fk + 1)ck|V (G)| distinct colors as described in the
proof of Lemma 9 and, for v /∈ I color P v with (k − 3)(fk + 1)ck|V (G)| new distinct colors as
follows: color two middle edges in each P v
i with a same color c, assign new distinct colors to
i . At the end color all other edges of G(cid:48), i.e. all edges in Es
rest of edges of P v
t with the same
color c. It is easy to see that the above coloring uses |I|(k − 2)(fk + 1)ck|V (G)| + (|V (G)| −
|I|)(k − 3)(fk + 1)ck|V (G)| + 1 distinct colors. In the rest it is enough to show that the
mentioned coloring is Pk-free.

By Lemma 9 we do not have a rainbow Pk in P v for any v ∈ I. Also, we do not have
a rainbow Pk in P v for any v /∈ I, since every Pk must contain two middle edges of one of
the P v ∈ P v which have the same color c. Let suppose P is a path of length k that is not
entirely in P v, for any v ∈ V (G). Thus, P has at least an edge of Es
t . If P contains more
than one edge of Es
t have the same color c.
Hence, P contains exactly one edge e of Es
t connecting paths in P u and paths in P v. If P
contains two middle edges of P v ∈ P v (similarly P u ∈ P u) we are done: these middle edges
have the same color so P is not a rainbow path. Otherwise, P has exactly one middle edge e(cid:48)
of P u and a middle edge e(cid:48)(cid:48) of P v; we know that one of u or v is not in I, hence one of e(cid:48) or
e(cid:48)(cid:48) has the color c, the same color as e. Therefore, P is not a rainbow path. See Figure 2 for
an illustration of the explained coloring in the proof.

t then it is not a rainbow, since all edges of Es

Now we can prove the hardness for every odd k > 1.

Lemma 14. For every odd k > 1, Pk-free coloring problem is NP-hard.

7

120034567891000001112131426261516171819202122252527272324sututvsv00Proof. We know that the maximum independent set problem is NP-hard. We show that we
can ﬁnd the maximum independent set of G if we have a maximum Pk-free coloring of G(cid:48).

By Lemma 13, we know that we can color the graph with at least

A = |I|(k − 2)(fk + 1)ck|V (G)| + (|V (G)| − |I|) · (k − 3)(fk + 1)ck|V (G)| colors.

Let c be a maximum Pk-free coloring of G(cid:48), by the above argument c contains at least A
distinct colors. Let us deﬁne a set X = {v ∈ G | P v has more than (k − 3)(fk + 1)ck|V (G)| +
2fk distinct colors}. The following claim enables us to employ Lemma 12 and relate the size
of X to the size of I and therefore conclude the lemma.
Claim 14.1. For a v ∈ X, P v has at least fk paths such that they form a family of distinct
color paths and in addition each of these paths has at least k − 2 distinct colors.
Proof of Claim 14.1. Let v ∈ X, deﬁne a set Y = ∅, add paths of P v to Y as follows: In
the iteration i take a path Pi ∈ P v which satisﬁes the following two conditions: 1) it has
maximum number of distinct colors, 2) it has at least k − 2 distinct colors w.r.t. the colors of
paths that are already in Y .

We claim the size of Y is at least fk. Since there are at most |Y |(k − 1) distinct
colors in the set of edges in Y , and given Lemma 12 there are at most (k − 3) |P v − Y | =
(k − 3)((fk + 1)ck|V (G)| − |Y |) distinct colors in the remaining paths of P v − Y . Adding
the two together we get that the number of distinct colors in P v is bounded above by
(k − 3) · ((fk + 1)ck|V (G)| − |Y |) + |Y | · (k − 1) = (k − 3)((fk + 1)ck|V (G)|) + 2|Y | which if
|Y | < fk it is less than (k − 3)(fk + 1)ck|V (G)| + 2fk + 1, this is a contradiction to the choice
of v and in general X, therefore Y does contain at least fk paths.

In the remaining, we claim Y is a family of distinct colored paths. Given the size of Y , it
is enough to show that no two distinct paths in Y share the same color for any pair of their
edges.

For the sake of contradiction, suppose there are two paths, let say Pi, Pj ∈ Y, i < j, such
that there are edges e ∈ Pi, e(cid:48) ∈ Pj with c(e) = c(e(cid:48)). As i < j we know that there is at most
one edge in Pj of color c(e) otherwise Pj would have at most k − 3 distinct colors w.r.t. Pi
which violates the our way of construction of Y . On the other hand Pj is rainbow: otherwise
if there are two edges e1, e2 ∈ Pj of the same color, then given that the color of e(cid:48) is already
in Pi, Pj will have at most k − 3 distinct colors w.r.t. Pi, a contradiction to the construction
of Y . Hence, Pj is a rainbow path of length k − 1.

Now we perform a case distinction on colors of Pi = ({e1, . . . , ek−1) to show that we could
not have such a Pk-free coloring and at the same time have both Pi, Pj ∈ Y to complete the
contradiction.

1. Either c(e1) (cid:54)= c(e) or c(ek−1) (cid:54)= c(e), let suppose the former. Then by concatenating e1
and Pj we get a rainbow path of length k a contradiction to the fact that the original
given coloring was a Pk-free coloring.

2. The only remaining case is that c(e1) = c(ek−1) = c(e) = c(e(cid:48)), and all other edges of
Pi, Pj will receive distinct colors. But this is not possible, because at the iteration i we
would have chosen Pj over Pi as it has more distinct colors w.r.t. existing elements of
Y .

Given the above case distinction, we conclude that Y is a family of distinct colored paths

as claimed. (cid:4)

By the above claim and Lemma 12, we know that X is an independent set so |X| ≤ |I|.

8

In the rest of the proof, we show |X| = |I|, by the above it is enough to show that

|X| ≥ |I|. Note that it is easy to ﬁnd X once the coloring is given, so the lemma follows.

To aim a contradiction assume |X| < |I|. We calculate the number of distinct colors w.r.t.
c and prove that it is less than A, a contradiction to the fact that c has at least A distinct
colors.

We count the maximum number of possible colors in c based on type of edges of G(cid:48):

1. Edges in P v for v ∈ X: by Lemma 10 we have at most B = (k − 2)(fk + 1)ck|V (G)| · |X|

distinct colors for such edges,

2. Edges in P v for v ∈ V (G) − X: at most

C = ((k − 3)((fk + 1)ck|V (G)|) + 2fk)(|V (G)| − |X|)

distinct colors for them,

3. For the remaining edges, i.e. edges in Es

t : by Lemma 7 we have at most D = 2ck|V (G)|

distinct colors for them.

So to arrive at a contradiction, we just need to prove B +C +D < A, if we put the numbers
together we will get: |V (G)| − |X| ≤ ck|V (G)|, but, this inequality holds for k ≤ n, ck ≥ 1,
which concludes the contradiction as it shows B + C + D < A.

(k − 2)(fk + 1)ck|V (G)| · |X|+
((k − 3)((fk + 1)ck|V (G)|) + 2fk) · (|V (G)| − |X|) + 2ck|V (G)|
< (k − 2)(fk + 1)ck|V (G)| · |I| + ((k − 3)((fk + 1)ck|V (G)|)) · (|V (G)| − |I|) + 1
⇔ 0 < (k − 2)(fk + 1)ck|V (G)| · (|I| − |X|)
− (k − 3)(fk + 1)ck|V (G)|(|I| − |X|)
− 2fk(k − 3)(|V (G))| − |X|) − 2ck|V (G)| + 1
|I|−|X|≥1
⇐====== 0 < (fk + 1)ck|V (G)| − 2fk(k − 3)(|V (G)| − |X|) − 2ck|V (G)| + 1
|V (G)|−|X|≤|V (G)|
⇐============ 0 < (fk + 1)ck|V (G)| − 2fk(k − 3)|V (G)| − 2ck|V (G)| + 1
⇐ 0 < (fk − 1)ck|V (G)| − 2fk(k − 3)|V (G)| + 1
fk=k+2,ck≥3k
⇐========= 0 < (3(k + 1)k − 2(k + 2)(k − 3))|V (G)| + 1
K≥3
⇐=== 0 < (k2 + 5k + 12)|V (G)| + 1

Hardness of the Problem for Even Values of k > 4

Assumption: In this part we assume k = 2t, t > 2.

Deﬁnition 15 (S(d)). For an integer d ≥ 1, let S(d) be a subdivided star, i.e., S(d) is
obtained by subdividing every edge of K1,d. We call the corresponding vertex of K1,d in the
partition with size one, as the center of S(d). Every subdivided edge of K1,d is a branch.
Therefore, S(d) has exactly d branches.

Deﬁnition 16 (wasted edge). In a coloring of G, we choose one arbitrary edge from each
color and call each unchosen edge of G a wasted edge.

9

Figure 3: Illustration of graph construction for k = 6. The left ﬁgure shows the graph G,
and the right ﬁgure shows its corresponding G(cid:48). All black edges of G(cid:48) have some unique new
color. The coloring is the maximum P6-free coloring of G(cid:48).

Therefore, if D is a set of all wasted edges of a maximum H-free coloring of G, then

|D| + ar(G, H) = |E(G)|.

Deﬁnition 17 (Dl,w). We construct an edge gadget Dl,w as follows. Let u1, u2, ..., ul+1 be
l + 1 distinct vertices. Then for every i ∈ [l], we connect ui to ui+1 by w internally disjoint
paths each of length two.

We call u1 head and ul+1 tail of Dl,w.
Graph Construction Given a graph G, we construct a graph G(cid:48) as follows.

1. For each vertex v ∈ V (G) with degree dv, we add one S(dv), named Sv, to G(cid:48). Each

branch of Sv corresponds to one of the incident edges of v.

2. For every edge e = {u, v} ∈ E(G), we add a Dt−2,4|E(G)|+8 to G(cid:48), named De, such that
its head is the leaf of the corresponding branch of e in Su and its tail is the leaf of the
corresponding branch of e in Sv.

For a better understanding of the graph construction see Figure 3.

Lemma 18. In any maximum Pk-free coloring c of G(cid:48), for every De, e ∈ E(G), there exist
at least eight edge disjoint paths, each of length 2t − 4 between its head and tail such that their
union is rainbow.

Proof. We prove the lemma by contradiction. Suppose that there exists e ∈ E(G) such that
De does not satisfy the above condition. There exists a set of edge disjoint paths Q of size
4|E(G)| + 8 in De, such that each of its paths has length 2t − 4 and they all start from the
head of De and end in the tail of De. Let P be the maximum size subset of Q such that
union of its paths is a rainbow. By the assumption, we have |P| < 8. Note that for every
P ∈ Q \ P, we know that either P is not a rainbow or c(E(P )) ∩ c(E(P)) (cid:54)= ∅. Therefore,
there are at least 4|E(G)| + 1 wasted edges in De w.r.t. c.

To arrive at a contradiction, we construct a coloring c(cid:48), that has more distinct colors
than c. In c(cid:48) we color all edges of Sv for each v ∈ V (G) with the same color c1, and color

10

FFEA1ESv1Sv2Sv3Sv4De1v1v2v3e1v4I={v1,v3}remaining edges e(cid:48), i.e. e(cid:48) ∈ E(G(cid:48)) \ E((cid:83)
wasted edges which is less than the number of wasted edges in De w.r.t. the coloring c.

v∈V (G) Sv), with a new color ce(cid:48). c(cid:48) has 4|E(G)| − 1

It is enough to show that c(cid:48) is a valid coloring. Every path that is entirely in De has length
v∈V (G) E(Sv),

at most 2t − 2, therefore every path of length 2t has at least two edges in (cid:83)
hence c(cid:48) is a Pk-free coloring and has more distinct colors than c, a contradiction.

Lemma 19. In any maximum Pk-free coloring of G(cid:48), in each Sv for v ∈ V (G), there are at
least dv − 1 wasted edges.

Proof. If dv = 1 the lemma is obvious. We prove the lemma for dv > 1, by contradiction.
Suppose we can color Sv with at most dv−2 wasted edges. Hence, we have at least two branches
b1, b2 of Sv such that b1 ∪ b2 is rainbow. Let e ∈ E(G) be the edge that is corresponding
to branch b1. By the Lemma 18, there are eight rainbow paths in De each of length 2t − 4.
Since |E(b1) ∪ E(b2)| = 4, there exists a rainbow path Q in De such that it has no common
color with E(b1) ∪ E(b2). Therefore, concatenation of b2, b1 and Q creates a rainbow path of
length 2t, a contradiction. So we need at least dv − 1 wasted edges.

Lemma 20. In any maximum Pk-free coloring of G(cid:48), for any v ∈ V (G) if Sv has dv − 1
wasted edges, then its coloring has the following properties: 1) all incident edges of the center
vertex of Sv have the same color and 2) each remaining edge of Sv has a distinct color.

Proof. First we prove the following claim.
Claim 20.1. In any maximum Pk-free coloring of G(cid:48), for any e ∈ E(G), there exist four
edge disjoint rainbow paths each of length 2t − 3 in De such that their union is rainbow and
they all start from the head of De. Similarly, there exist four rainbow paths each of length
2t − 3 in De such that their union is rainbow and they all start from the tail of De.

Proof of Claim 20.1. By Lemma 18, there exists eight disjoint paths P1, P2, . . . , P8, connecting
the head of De to its tail and P1 ∪ · · · ∪ P8 is rainbow. For i ∈ {1, 3, 5, 7}, by concatenating
Pi with the starting edge of Pi+1, we get a rainbow path of length 2t − 3 which starts from
the tail of De. A similar argument holds for the head of De and the claim follows. (cid:4)

1) /∈ {c(e1), c(e2)} then e2, e1, e(cid:48)

Let w be the center vertex of Sv. We prove that in any valid coloring c of Sv with dv − 1
wasted edges all edges incident to w have the same color. Otherwise, there are at least two
edges e1, e2 incident to w such that c(e1) (cid:54)= c(e2). Let suppose e1, e(cid:48)
1 belong to the same
branch be of Sv. If c(e(cid:48)
1 and one of the 4 rainbow paths in De
from the above claim, form a rainbow path of length k, a contradiction. Hence, c(e(cid:48)
1) is used
in the coloring of incident edges of w. With a similar argument, every edge in Sv which is
not incident to w, has the same color as one of the incident edges of w. Therefore, the total
number of distinct colors in Sv is at most dv, a contradiction that there are at most dv − 1
wasted edges in Sv. Hence, incident edges of w have the same color; then every remaining
edge must have a new distinct color otherwise there would be more than dv − 1 wasted edges
in Sv, thus the lemma follows.

Lemma 21. Let u, v ∈ V (G) and e = {u, v} ∈ E(G). In any maximum Pk-free coloring of
G(cid:48), Sv has at least dv wasted edges or Su has at least du wasted edges.

Proof. Suppose that Su has du −1 wasted edges and Sv has dv −1 wasted edges. By Lemma 19,
we know that the edges in Su ∪ Sv that are not connected to the center vertices of these two
subdivided stars will receive distinct colors and those that are incident to the center vertices
will receive new colors cv (edges incident to the center of Sv) and cu respectively. Then

11

by Lemma 18, we know that there is a rainbow path of length 2t − 4, P , between the head
and the tail of De. Let bu, bv be the corresponding branches of u, v w.r.t. e. By concatenation
of bu, P , and bv, we get a rainbow path of length k = 2t, a contradiction to the assumption
of the lemma.

Lemma 22. Let I be a maximum independent set of G and let D be the set of all wasted
edges in a maximum Pk-free coloring of G(cid:48), then |I| = 2|E(G)| − |D|.

Proof. We provide a coloring c as follows. For every v ∈ I, color Sv with dv − 1 wasted edges
as explained in the Lemma 20. For every u ∈ V (G) \ I, for each branch b of Su, we color
both of its edges with a new color, cvbe . For every e ∈ E(G), we color De as a rainbow with
new distinct colors. See Figure 3 for a better understanding of the coloring c.

First, we claim that c is a maximum Pk-free coloring of G(cid:48) and then we show that |I| can

be derived from the size of c, or equivalently from ar(G(cid:48), Pk).

To show that c is a Pk-free coloring we perform a case distinction for every path of length

k in G(cid:48), in the following u, v are two arbitrary adjacent vertices in the graph G:

1. A path P between the center of Su to the center of Sv for {u, v} ∈ E(G).

2. A path P that contains center of Sv as one of its non-leaf vertices.

For the ﬁrst case, as e = {u, v} by Lemma 21 w.l.o.g. we can suppose Su has been colored
with at least du wasted edges. Therefore, the ﬁrst two edges of P starting from the center of
Su belong to a branch b of Su, have the same color cub in c, so P is not a rainbow path.

For the second case, the path P has at least one branch, b, of Sv and at least one incident
edge to the center of Sv in another branch b(cid:48) of Sv. Hence, if we colored Sv with dv − 1
wasted edges, then by Lemma 20 two edges of P that are incident to the center of Sv have
the same color. Otherwise, if Sv is colored with dv wasted edges, both edges of b have the
same color cvb, therefore P is not a rainbow path.

Now we show that c is a maximum Pk-free coloring of G(cid:48). Note that by Lemma 19, the
minimum number of wasted edges in an individual Sv for v ∈ V (G) is at least dv − 1. Observe
that by Lemma 21, number of Sv’s for v ∈ V (G) with dv − 1 wasted edges is at most |I|.
Moreover, in c, number of such Sv’s is exactly |I| which is the maximum possible number
of them. Also, for each remaining vertex, v ∈ V (G) , Sv has exactly dv wasted edges (the
minimum number of possible wasted edges other than dv − 1). Also, c does not have any
wasted edge in the rest of G(cid:48). Therefore, c has the least number of wasted edges. Hence, c
has the maximum number of distinct colors in any Pk-free coloring of G(cid:48).

Total number of wasted edges in c is |D| = (cid:80)

v∈I (dv − 1) + (cid:80)

v /∈I dv. Hence, we get that

|I| = 2|E(G)| − |D| as claimed.

Hence, we get the following.

Lemma 23. For every even k > 4, Pk-free coloring problem is NP-hard.

Proof. By Lemma 22, we know that solving the maximum Pk-free coloring of G(cid:48) results in
the size of the maximum independent set of G which is NP-hard.

Hardness of the Problem for k = 4

Graph Construction Given a graph G, we construct a graph G(cid:48) as follows.

12

1. For each vertex v ∈ V (G) with degree dv, we add one S(dv), named Sv, to G(cid:48). Each

branch of Sv corresponds to one of the incident edges of v.

2. For each edge e = {u, v} ∈ E(G), we merge the leaf of the corresponding branch of e in
Su with the leaf of the corresponding branch of e in Sv and call the merged vertex ve.
In addition, we add 4|E(G)| + 4 new vertices and connect them to ve. We call the set
of edges between ve and them Le.

Lemma 24. In any maximum P4-free coloring of G(cid:48), for each e ∈ E(G), there exist at least
four edges in Le such that their union is rainbow.

Proof. We prove the lemma by contradiction. Suppose that in a maximum P4-free coloring c
of G(cid:48) there exists e ∈ E(G) such that Le does not contain four edges for which their union is
a rainbow.

Let F ⊆ Le be a maximum size subset of Le such that union of its edges is rainbow. By
the assumption we have |F | < 4. Therefore, there are at least 4|E(G)| + 1 wasted edges in Le.
For the sake of a contradiction, consider a coloring of G(cid:48) such that each edge of Sv for every
v ∈ V (G) have the same color and all other edges of G(cid:48) have a distinct color. The proposed
coloring has exactly 4|E(G)| − 1 wasted edges which is less than the number of wasted edges
in Le. Inside each Le, the length of the longest path is at most 2. Hence our coloring is a
P4-free coloring and has more distinct colors than c, a contradiction.

Lemma 25. In any maximum P4-free coloring of G(cid:48), in every Sv for v ∈ V (G), there are at
least dv − 1 wasted edges.

Proof. If dv = 1 the lemma is obvious, therefore we prove the lemma for dv > 1. For the
sake of contradiction, suppose we can color Sv with at most dv − 2 wasted edges. Hence, we
have at least two branches b1, b2 of Sv such that union of their edges is a rainbow. Therefore,
concatenation of b1 and b2 creates a rainbow path of length 4, a contradiction. Hence, we
need at least dv − 1 wasted edges.

Lemma 26. In any maximum P4-free coloring of G(cid:48), for any v ∈ V (G) if Sv has exactly
dv − 1 wasted edges, then its coloring has the following properties: 1) all incident edges of the
center vertex of Sv have the same color and 2) each remaining edge of Sv has a distinct color.

Proof. We prove that the coloring of Sv with dv − 1 wasted edges should have the two
properties mentioned in the statement of the lemma.

Let w be the center vertex of Sv. For the sake of contradiction, suppose there are at
least two edges e1, e2, such that they have distinct colors and they are incident to w. Let
suppose e1 belongs to a branch be of Sv. Let the other edge of be be e(cid:48)
1 does not have
the same color as either of e1 or e2, then e2, e1, e(cid:48)
1 and one of the 4 rainbow edges in Le from
the Lemma 24, form a rainbow path of length 4, a contradiction to assumption that our
coloring is a P4-free coloring. Hence, c(e(cid:48)
1) is also used in the incident edges of w. With a
similar approach, each edge in Sv which is not incident to w, has a common color to one of
incident edge of w. Therefore, the total number of distinct colors in Sv is at most dv. Hence,
there are at least dv wasted edges in Sv, a contradiction.

1. If e(cid:48)

Lemma 27. Let u, v ∈ V (G) and e = {u, v} ∈ E(G). In any maximum P4-free coloring of
G(cid:48), Sv has at least dv wasted edges or Su has at least du wasted edges.

13

Proof. Suppose that Su has du − 1 wasted edges and Sv has dv − 1 wasted edges. By
Lemma 26, we know that the coloring of Sv and Su must have the mentioned properties
in the Lemma 26 statement. Let bu, bv be the branches of u, v that corresponds to e. Note
that c(E(bu)) ∩ c(E(bv)) = ∅, otherwise Sv has at least dv wasted edges or Su has at least du
wasted edges, a contradiction. Hence, by concatenation of bu, and bv, we get a rainbow path
of length 4, a contradiction.

Lemma 28. Let I be a maximum independent set of G and D the set of all wasted edges in
a maximum P4-free coloring of G(cid:48), then |I| = 2|E(G)| − |D|.

Proof. For every v ∈ I, we color Sv with dv − 1 wasted edges as explained in the Lemma 26.
For every u ∈ V (G) \ I, for each branch b of Su, we color both of its edges with a new color,
cvb. For every e ∈ E(G), we color Le as a rainbow with new colors.

We claim that the above coloring is a maximum P4-free coloring of G(cid:48) and show that |I|

can be derived from ar(G(cid:48), P4).

First, we prove it is a P4-free coloring. There are two cases for any P4 in G(cid:48):

1. A path between the center of Su to the center of Sv for {u, v} ∈ E(G).

2. A path that contains the center of Sv as one of its non-leaf vertices.

For the ﬁrst case, at least one of u and v are not in I for {u, v} ∈ E(G). Assume, w.l.o.g.
u /∈ I, hence Su has been colored with du wasted edges. Therefore, the two ﬁrst edges of this
Pk starting from the center of Su are a branch, b, in Su, then these two edges have same color
cub, so this P4 is not a rainbow.

For the second case, the path has at least one branch b of Sv and at least one incident
edge to the center of Sv in another branch of Sv, since k = 4. Hence, if we colored Sv with
dv − 1 wasted edges, then two edges of the path that are incident to the center of Sv have the
same color. Otherwise, we colored Sv with dv wasted edges and both edges of b have same
color cvb, so the path is not rainbow.

Now we prove that the mentioned coloring is a maximum P4-free coloring of G(cid:48). Note
that by Lemma 27, the number of Sv’s for v ∈ V (G) with dv − 1 wasted edges is at most |I|
and in our coloring it is exactly |I| and all others have at least dv wasted edges and in our
coloring they have exactly dv wasted edges. Also, we do not have any wasted edge in the rest
of G(cid:48). So our coloring has the least number of wasted edges. Hence, our coloring has the
most number of distinct colors.

The total number of wasted edges in our coloring is:

|D| =

(cid:88)

v∈I

dv − 1 +

(cid:88)

v /∈I

(cid:88)

dv =

v∈V (G)

dv − |I| = 2|E(G)| − |I|

Hence, |I| = 2|E(G)| − |D| as claimed.

Lemma 29. For k = 4, Pk-free coloring problem is NP-hard.

Proof. We know that ﬁnding the size of the maximum independent set is NP-hard and by
Lemma 28 we know that solving the maximum P4-free coloring of G(cid:48) results in the size of the
maximum independent set of G.

Proof of Theorem 1. By Lemma 23, Lemma 29, and Lemma 14 we show that for every integer
k > 2 the problem is hard.

14

4 Inapproximability of P3 Anti-Ramsey Coloring

In this section, we show that for every ε > 0 there is no polynomial time

1√

|V (G)|

1−ε -

1
|V (G)|

approximation for P3-free coloring unless P = N P [25], or similarly there is no polynomial
√
1−(cid:15) -approximation to estimate ar(G, P3) unless P = N P . We use basic building
4
blocks from the previous sections and prove the hardness via a gap preserving reduction from
the maximum independent set problem.

Lemma 30. In any P3-free coloring of G there are at most |V (G)| distinct colors.

Proof. Let c be a P3-free coloring of G with maximum number of distinct colors and let
G(cid:48) ⊆ G be an edge minimal subgraph of G which is colored by ar(G, P3) distinct colors w.r.t.
c and let G1, G2 . . . , Gk ⊆ G(cid:48) be the components of G(cid:48). Each Gi, i ∈ [k], is rainbow colored
otherwise it contradicts to the edge minimality condition of our choice of G(cid:48).

We prove that the number of edges in each Gi is at most |V (Gi)| and thus, the lemma
follows. In particular, we prove that for all t ∈ [k], it holds that Gt is either a star or a
triangle.

Fix t and let v be a vertex of maximum degree in Gt. Let v1, . . . , v|N (v)| be neighbors of

v. If |N (v)| = 1 then Gt is a star.

If |N (v)| = 2, then Gt is a star, otherwise there exists an edge e = {v1, u} or e = {v2, u}.
Assume w.l.o.g. that e = {v1, u}. If u = v2, it’s a triangle. Otherwise we have path of length
3: (v2, v, v1, u).

If |N (v)| ≥ 3, then Gt is star. Otherwise, there are two possibilities: a) there is an edge
e = {vi, vj} (i, j ∈ [|N (v)|], i (cid:54)= j) and we have P3 (vj, vi, v, vz) (for z ∈ [|N (v)|], z (cid:54)= j, i);
or b) there is an edge e(cid:48) = {vi, u} (i ∈ [|N (v)|]) and we have a P3 (u, vi, v, vz) (for z ∈
[|N (v)|], z (cid:54)= i).

If Gi is a star then |E(Gi)| + 1 = |V (Gi)|. If Gi is a triangle then |E(Gi)| = |V (Gi)| = 3.
Thus, the lemma follows.

Graph Construction Given an undirected graph G, we construct a 3-partite graph G(cid:48)

as follows:

1. For each v ∈ V (G) we introduce two new vertices sv, tv ∈ V (G(cid:48)) and 4|V (G)| internally
1 , . . . , P v

disjoint paths of length two, P v = {P v

4|V (G)|}, connecting sv to tv.

2. For each edge {v, u} ∈ E(G), add two new edges in E(G(cid:48)): {sv, tu}, {tv, su}. We call

this set of edges Es
t .

Similar to the previous sections, we say that an edge coloring is valid if it is a P3-free
coloring. The following lemmas are similar to the ones for Pk when k is odd, however, there
are minor diﬀerences in some cases, so we repeat some of them customized for P3.

Lemma 31. There is no valid coloring of G(cid:48) with more than 4|V (G)| colors in P v for any
v ∈ V (G).

Proof. The proof of this lemma is similar to the proof of Lemma 10.

Lemma 32. Let {v, u} ∈ E(G). In any P3-free coloring of G(cid:48), if there are at least three
distinct colors in P v then P u is colored with at most two colors.

15

Proof. First, we claim that if P v is colored with at least three distinct colors then sv and
tv are incidents to three edges with distinct colors. Assume the contrary, then w.l.o.g. sv
is incident to two edges e1 = {sv, w1}, e2 = {sv, w2} of distinct colors and there is an edge
e3 = {tv, w3} incident to tv such that c(e1) (cid:54)= c(e2) (cid:54)= c(e3). Then, it holds that w3 (cid:54)= w2 as
otherwise we get a rainbow colored path (tv, w2, sv, w1), similarly w3 (cid:54)= w1. Consider an edge
e(cid:48) = {w3, sv}. We show that c(e(cid:48)) = c(e3) and thus we obtain a contradiction.

Assume that c(e(cid:48)) ∈ {c(e1), c(e2)}.

If c(e(cid:48)) = c(e1) (or c(e(cid:48)) = c(e2)) the path
(tv, w3, sv, w2) (or (tv, w3, sv, w1)) is a rainbow colored path, hence c(e(cid:48)) = c(e3). Thus
there are three edges of distinct colors incident to sv and it follows there are at least three
edges of distinct colors incident to tv.

Now suppose P u has at least three distinct colors then both of its endpoints (su and
tu) are incident to three edges of distinct colors but those edges with edge e = {su, tv} (or
{sv, tu}) and three edges of distinct colors incident to sv and tv will result in a rainbow path
of length three.

Lemma 33. ar(G(cid:48), P3) > 4|V (G)| · |I|

Proof. For v ∈ I color P v with 4|V (G)| diﬀerent colors such that the two edges of the path
Pi get the same color and all other edges of G(cid:48) with the same color c0. There is no rainbow
colored P3 in P v for all v ∈ I and all other P3’s have at least two edges with color c0 or there
is a P v

i which they contain it.

Theorem 34. Unless P = N P , for any ﬁxed δ > 0, there is no polynomial time

1√

|V (G)|

1−δ -

approximation for P3-free coloring even in 3-partite graphs.

Proof. First of all, note that the graph G(cid:48) constructed above is a 3-partite graph: put every
sv for v ∈ V (G) in part 1, every tv in part 2 and every other vertex in part 3.

there is no polynomial time

We provide a reduction from the independent set problem. More precisely we know
|V (G)|1−ε -approximation for MIS for any ﬁxed ε > 0 [25] unless
1−ε(cid:48) -approximation for P3-free coloring (for any

P = N P . We show that if there is a

1

3√
|V (G)|

constant ε(cid:48)) then there is a
Assume that there is a

1

|V (G)|1−ε -approximation for MIS in polynomial time.
3√

1−ε(cid:48) -approximation for P3-free coloring. The graph G(cid:48) has

|V (G(cid:48))|

4|V (G)|2 + 2|V (G)| vertices. By Lemma 33, we conclude that we have at least

(cid:24)

3

(cid:112)

4|V (G)|2 + 2|V (G)|

1−ε(cid:48) · |I| · 4|V (G)|

(cid:25)

colors.

Let X = {v ∈ G | P v has more than 2 colors}. By Lemma 32, we know that X is an

independent set.

Now we just need to show that |X| ≥ (cid:6)
To aim contradiction assume |X| < (cid:6)
|V (G)|1−ε · |I|(cid:7). We calculate the maximum number
1−ε(cid:48) · |I| · 4|V (G)|(cid:7). We have at
of colors and prove that it is less than a (cid:6)
most 4|V (G)| · |X| colors for P vs in X, 2(|V (G)| − |X|) colors for other P vs and 2|V (G)| for
the remaining edges by Lemma 30. So we have:

|V (G)|1−ε · |I|(cid:7).

4|V (G)|2+2|V (G)|

√

1

1

3

16

4|V (G)| · |X| + 2(|V (G)| − |X|) + 2|V (G)| ≤
4|V (G)| · (|X| + 1) ≤
(cid:24)

1

(cid:25)
|V (G)|1−ε · |I| · 4|V (G)|

≤

(cid:24)

(cid:24)

3

(2|V (G)| + 1)1−ε · |I| · 4|V (G)|

(cid:25)

<

3
4|V (G)|2 + 2|V (G)|

(cid:25)
1−ε · |I| · 4|V (G)|
.

(cid:112)

This completes the proof that there is no

3√
|V (G)|

1−ε(cid:48) -approximation for the problem, now

if we let the n be big enough we can conclude that there is no

1√

|V (G)|

1−δ -approximation as

well by replacing appropriate ε(cid:48) with δ.

5 Precoloring ar(G, Pk) Has No Subexponential Algorithm for

all k > 2

In this section, we study the complexity of exact algorithms computing the anti-Ramsey
number ar(G, Pk) where Pk is a path with k edges. We now consider a variant of the problem
for the exact time complexity of the problem.

Problem 35 (Precolored ar(G, H)). The input consists of a graph G = (V, E) where
E = E1 ∪ E2. The edges in E1 have assigned a color while the edges in E2 are uncolored.
Color the edges in E2 with as many new colors as possible such that there is no rainbow copy
of H in G.

For this problem, we provide a ﬁne grained reduction from 3SAT to show the hardness of
the problem. That is, we provide an instance of Precolored ar(G, Pk) problem (for a constant
k > 2), i.e., a graph G where some of the edges are precolored, that asymptotically has the
same size as the instance of the 3SAT problem, and if there is a 2o(|E|) algorithm to compute
precolored ar(G, Pk) then there is a subexponential algorithm to solve the 3SAT problem
and this is impossible unless ETH fails. The main technical contribution of this section is the
following lemma, in which we construct the aforementioned sparse graph.

Lemma 36. The Precolored ar(G, Pk) is NP-hard for ﬁxed k > 2.

We show the hardness using a reduction from the 3-SAT problem. Before going to the

actual proof let us go through our construction and some useful observations.

Construction of the Graph

Given a Boolean formula φ with n variables and m clauses, we create a graph G = (V, E) as
follows. To simplify the understanding, with abuse of notation, we color some edges with
colors {T1, . . . , Tk−2} or {F1, . . . , Fk−2}—one may assume them to be distinct integers.

Literal Gadgets. For each variable Xi ∈ φ we create an edge {xi, ¯xi} and we will not
precolor it. We will see that its color would determine the boolean value of variable Xi ∈ φ.
In the next step, we construct the clause gadgets and connect them to the literal gadgets.

Clause Gadgets. For a clause Ci = (x ∨ y ∨ z) we distinguish two cases:

17

Figure 4: Sketch of a gadget where the clause has exactly one negative literal. Edge {u1, v1}
is forced to get the color of one of its neighbors. The gadget is sparse and has 5k − 7 edges.

• Either all literals are negative variables, or all are positive.

In this case, for each
literal L ∈ Ci we create a path (L1, . . . , Lk−2, L), where the last edge, i.e. {Lk−2, L}, is
connecting our clause gadget to vertex L of the literal gadget. Moreover, if L is a positive
literal we precolor this path by assigning color Tj (or Fj if L is a negative literal)to the
edge {Lj, Lj+1} for j < k − 2 and, precolor {Lk−2, L} with Tk−2 (or Fk−2 if negative).
Finally we add vertex v and connect it to all 3 paths via {v, x1}, {v, y1}, {v, z1} ∈ E,
which are not precolored.

• Two of the literals are either positive or negative. Assume without loss of general-
ity that x and y are both positive literals or both negations of variables. Similar
to the previous case, for each literal L ∈ {x, y, z}, we create path (L1, . . . , Lk−2, L)
and precolor it in the same manner. Finally instead of a vertex v we create a
path (vk−1, . . . , v1, u1, . . . , uk−1) in order to connect the former paths together. To
do that we add edges {vk−1, x1}, {vk−1, y1} and {uk−1, z1} to E. Then, if x and y
are positive literal we precolor each {vj, vj+1} with Tj (Fj if x, y are negative) and
{uj, uj+1} with Fj (Tj). Note that we leave out 4 edges uncolored, for now, namely
{vk−1, x1}, {vk−1, y1}, {uk−1, z1} and {v1, u1}.

See Figure 4 for a sketch of the construction of the gadgets. W.l.o.g., we assume that for
every i ∈ [n] both variable xi and its negation appear in some clauses as literals. Otherwise, if
a variable appears only negative or positive, we can simply satisfy all the clauses that contain
that variable. The above assumption enforces the following observation.

Observation 37. In a Pk-free coloring, for each variable x, c({x, ¯x}) ∈ {Tk−2, Fk−2}, and
for each clause c({v1, u1}) ∈ {T1, F1}.

This follows from the construction, i.e., consider paths P = (x1, x2, . . . , xk−2, x, ¯x, ¯xk−2)
and Q = (¯x1, . . . , ¯xk−2, ¯x, x, xk−2). P contains colors {T1, . . . , Tk−2} ∪ {Fk−2} and Q contains

18

F1Fk 2Tk 2T1C1F1T1T1Tk 2Tk 2Fk 2v2v1vk 2u1u2uk 2z1z2zk 2¯z¯x¯yyzxy1y2yk 2xk 2x1x2vk 1uk 1{F1, . . . , Fk−2} ∪ {Tk−2}. Hence c({x, ¯x}) must be either Tk−2 or Fk−2. The same argument
applies to {v1, u1}.

In the following by new color we mean a color other than Fi’s and Ti’s, i.e. preassigned

colors.

Lemma 38. In a Pk-free coloring, there can be at most 1 new color in each clause gadget.

Proof. Towards a contradiction assume there are two new colors in clause gadget C = z ∨ y ∨ z,
namely c1 and c2.

• x, y, z are all positive literals or all are negative literals. There are three unassigned
edges, namely {v, x1}, {v, y1} and {v, z1}. W.l.o.g. assume that color c1 is assigned to
{v, x1} and c2 is assigned to {v, y1}. Then (y1, v, x1, x2, . . . , xk−2, x) is a rainbow Pk,
contradiction.

• x, y are positive but z is a negative literal (or vice-versa). If c1 and c2 are assigned to
{vk−1, x1} and {vk−1, y1} we immediately have a rainbow Pk similar to the previous
case. Also remember that by Observation 37 edge {u1, v1} cannot get a new color.
Thus there remain two symmetric cases: c1 is assigned to {uk−1, z1} and c2 is assigned
to {vk−1, x1} or {vk−1, y1}. Consider the following two paths, we claim at least one of
them is rainbow:

1. Qz = (z1, uk−1, uk−2, . . . , u1, v1)

2. Qx = (x1, vk−1, vk−2, . . . , v1, u1)

Observe that c(Qz) = {c1} ∪ {F1, . . . , Fk−2} ∪ {c({v1, u1})} and c(Qx) = {c2} ∪
{T1, . . . , Tk−2} ∪ {c({v1, u1})}. Remember that c({v1, u1}) ∈ {T1, F1}. But, either
of them makes at least one of Qx and Qz become rainbow, a contradiction.

We are ready to prove Lemma 36.

Proof of Lemma 36. We claim that the formula φ is satisﬁable if and only if ar(G, Pk) =
m + 2(k − 2), that is there is a coloring of the edges of G with m + 2(k − 2) colors
({T1, . . . , Tk−2},{F1, . . . , Fk−2} and another new m colors, one for each clause).

For the direct implication, if the formula φ is satisﬁable, we color the edges of G as follows.
For each variable Xi, if Xi is assigned to True, then we color the edge {xi, ¯xi} with Tk−2,
otherwise we color this edge with Fk−2.

Let Ci = (x ∨ y ∨ z). Assume without loss of generality that Ci is satisﬁed by the literal
z. Then if all literals are negative or all are positive we color the edge {v, z1} with a new
color. Then, if z corresponds to negation of a variable, we color {v, x1} and {v, y1} with F1
(otherwise T1).

Now assume that x, y are positive literals but z is a negative literal. Again, W.l.o.g.,
assume that Ci is satisﬁed by z. We color {uk−1, z1} by a new color and then if z is negative,
we color {v1, u1} with F1 (T1) and {vk−1, x1}, {vk−1, x1} with T1 (F1).

We now show that the coloring is valid. Suppose that there exists a rainbow Pk path Q
that goes through clause gadget of Ci = x ∨ y ∨ z. Observe that precolored edges do not yield
a rainbow path of length k. Thus Q must contain a newly colored edge. By a case distinction
on value assignment to literals of Ci we have:

19

1. x, y, z are all positive literal (or vice-versa). Assume w.l.o.g., that Ci is satisﬁed by
z. Then all of the edges of the clause gadget get the same color T1 except for {v, z1}
which has a new color. Note that both of the x-branch (the path (v, x1, . . . , xk−2))
and y-branch of the clause gadget starts with consecutive T1’s, that is {v, x1} and
{x1, x2} (respectively {v, y1} and {y1, y2}) are colored with T1. Hence a rainbow
Pk path that contains {v, x1} or {v, y1} cannot go inside x, y or z-branch since it
inevitably gets two T1’s. Thus it can only contains {v, z1} and goes through z-branch,
i.e. (v, z1, . . . , zk−2, z, ¯z). But the latter contains two Tk−2’s.

2. x, y are positive and z is a negative literal (or vice-versa). We assume that Ci is satisﬁed
by z, the other two cases are similar. In this case, Q should contains at least one of the
edges in the sets; {v1, u1}, {vk−1, x1}, {vk−1, y1}, and {uk−1, z1}. Otherwise due to the
construction and Observation 37, it cannot be a rainbow path of length k.

• Q contains edge {v1, u1}. Note that c({v1, u1}) = F1 therefore Q cannot contain
{u1, u2}. Thus Q must be either (u1, v1, . . . , vk−1, x1) or (u1, v1, . . . , vk−1, y1), but
neither of them is a rainbow path.

• Q contains edge {vk−1, x1} (or {vk−1, y1}). Therefore Q cannot contain {vk−1, y1},
{x1, x2} or {v2, v1}, since all of them have color T1 and by Observation 37, we
know that the color of {vk−1, x1} is also T1. But if we remove these edges, the
connected component which contains {vk−1, x1, } has longest path of length k − 1.
Hence a rainbow Pk is not possible.

• Q contains edge {uk−1, z1}. Then any rainbow path of length k must start from
some us and end in zk, i.e. Q = (us, . . . , uk−1, z1, . . . , zt). Since c({us, us+1}) =
c({zs, zs+1}), we have that t = s. Thus |Q| < k. For the corner case of s = k − 1
which a {uk−1, uk} does not exist we have that Q = (uk−1, z1, . . . , zk−2, z, ¯z) which
is not a rainbow since {z, ¯z} and {zk−1, z} are colored by Fk−2.

Hence the coloring is valid.

For the reverse implication, assume that we are given a coloring of G with m + 2(k − 2)
colors. We show how to recover a satisfying assignment for φ. First of all, notice that in
a clause gadget we can add at most one new color by Lemma 38. Thus, we construct a
satisfying assignment as follows. For each variable Xi if the edge {xi, ¯xi} is set to Tk−2 then
we set Xi to True, otherwise we set Xi to False. Note that Observation 37 ensures that the
latter is possible.

Finally, we show that this is a satisfying assignment for φ. Towards a contradiction
suppose that there is a clause Ci = x ∨ y ∨ z that is not satisﬁed. By Lemma 38 each clause
has exactly one new color. Thus, we have two cases:

1. x, y, z are all positive (or all negative). Hence {x, ¯x}, {y, ¯y} and {z, ¯z} are all colored
by Fk−2. W.l.o.g. let {v, x1} be the edge that gets the new color c1 of clause Ci. Then
(v, x1, . . . , xk−1, x, ¯x) has colors {T1, . . . , Tk−2} ∪ {c1, Fk−2}. Thus the coloring is not
Pk-free.

2. x, y are positive and z is a negative literal

Note that
{vk−1, x1}, {vk−1, y1} or {uk−1, z1} cannot get the new color since the same argument
of the above case applies. Thus it must be {v1, u1} that gets the new color. But,
by Observation 37 it can only get T1 or F1. That contradicts with each clause getting
exactly one new color.

(or vice-versa).

20

Hence the assignment must satisfy φ.

Given the above lemma and the sparsiﬁcation lemma [17] we conclude the following

theorem.

Theorem 2. There is no 2o(|E(G)|) algorithm for Precolored ar(G, Pk), for any ﬁxed k, unless
ETH fails.

Proof. We may assume the 3SAT instance used in the construction of the graph G in the
proof of Lemma 36 is sparse, that is the number of clauses m is in the order of number of
variables n, i.e. m ∈ O(n). Thus by the sparsiﬁcation lemma [17] there is no 2o(n) algorithm
to solve 3SAT (unless ETH fails).

On the other hand in the construction of the graph G for each variable we have 1 edge
and for each clause, we have at most 5k − 7 edges so in total the number of edges in the
graph is bounded above by 5km + n hence |E(G)| ∈ O(n) for a constant k. Hence there is no
2o(|E(G)|) algorithm for Precolored ar(G, Pk) unless ETH fails.

6 Color Connected Coloring and its Applications

In this section, we introduce the notion of color connected coloring and using that we provide
a polynomial time algorithm to compute ar(T, Pk), where T is a tree. Roughly speaking, in
a color connected coloring we try to color the graph with the maximum number of colors so
that the set of edges of every color class induces a connected subgraph. The main result of
this section is the following theorem.

Theorem 3. There is an exact algorithm that computes ar(T, Pk) in linear time w.r.t.
|V (T )|, where T is a tree.

Let c be a Pk-free coloring of a graph G and let c1 be one of such colors used in c. Then,
we call the induced graph G[{v | ∃u ∈ V (G), e = {u, v} ∈ E(G), c(e) = c1}] as an induced
c1-graph and we write it G[c1]. If G[c1] is connected then we say c1 is a connected color ;
otherwise, it is a disjoint color.

Deﬁnition 39 (Color Connected Coloring). Given a graph G, a Pk-free coloring c of G is a
color connected coloring if for every color ci used in c, G[ci] is a connected component.

In the rest of this section, we assume that T is a rooted tree with rT as its root. We deﬁne
Tv as the largest subtree with v ∈ V (T ) as its root. Depth of a vertex v ∈ V (T ), Hv, is the
number of edges between v and the root. Furthermore, we deﬁne C(v) as the set of children
of v in a rooted tree. As we can color the graph with at most |E| many colors, in this proof
we use a palette of colors C = {ce | e ∈ E(T )}. That is whenever we color an edge e with a
new color, its color will be ce, otherwise, e will get a color of one of the already colored edges.

Lemma 40. There exists a maximum Pk-free coloring of T , which is color connected.

Proof. Let c be a maximum Pk-free coloring of T with the minimum number of color connected
components. If for every ci, T [ci] has one connected component we are done. Otherwise,
towards the contradiction, let c1 be a color used in c, for which T [c1] has more than one
connected components, {T1, . . . , Tr} for some r > 1. W.l.o.g. suppose T1 is the component of
T [c1] with the deepest root, in other words argmaxi∈[r] minu∈V (Ti) Hu equals to one. Since
r > 1, the root of subtree T1, v, has a parent. Let e be the edge between v and its parent. We

21

recolor all of E(T1) with color c(e). This clearly creates a new coloring c(cid:48) with the same set
of colors as c; however, it has one less color connected component than c which contradicts
our minimality assumption on c. To complete the contradiction, it is suﬃcient to show that
c(cid:48) is a Pk-free coloring.

Towards the contradiction, let P be a rainbow Pk in c(cid:48). We perform a case distinction on

|E(P ) ∩ E(T1)| to derive a contradiction.

1. |E(P ) ∩ E(T1)| = 0: In this case, the coloring of P in c and c(cid:48) is identical. Moreover, P

is not rainbow in c, hence P is not rainbow in c(cid:48) either, a contradiction.

2. |E(P ) ∩ E(T1)| = 1: In this case, let e(cid:48) ∈ E(P ) ∩ E(T1) be the only edge of P that
is recolored in c(cid:48). There must exist another edge e(cid:48)(cid:48) of P which is colored by c1. We
know that e(cid:48)(cid:48) (cid:54)∈ E(T1), so e(cid:48)(cid:48) is not incident to v. We claim that e(cid:48)(cid:48) (cid:54)∈ E(Tv). Suppose
by contradiction, e(cid:48)(cid:48) ∈ E(Tv). Since e(cid:48)(cid:48) (cid:54)∈ E(T1), w.l.o.g. assume e(cid:48)(cid:48) ∈ E(T2). Since T1
and T2 are two disjoint connected components in Tv and v ∈ V (T1), minu∈V (T1) Hu <
minu∈V (T2) Hu which contradicts the fact that T1 is the component of T [c1] with deepest
root. We showed that e(cid:48)(cid:48) (cid:54)∈ E(Tv). Since |E(P ) ∩ E(T1)| = 1, its obvious that e ∈ E(P ).
c(cid:48)(e) = c(cid:48)(e(cid:48)), a contradiction.

3. |E(P ) ∩ E(T1)| > 1: In this case, at least two edges of P have the same color c(e),

hence P is not rainbow, a contradiction.

The purpose of our algorithm is to ﬁnd a maximum Pk-free color connected coloring of a

tree, T , since by Lemma 40 it is a maximum Pk-free coloring of T .

Deﬁnition 41 (Lv
rainbow path in Tv starting from v. Moreover, let Lv
and Lv

2 are edge disjoint and Lv

2 is also rainbow.

1 ∪ Lv

1, Lv

2). For a color connected coloring c of T , we deﬁne Lv

1 to be a longest
2 be the longest rainbow path such that Lv
1

Lemma 42. A color connected coloring c of T is Pk-free if and only if |E(Lv
for all v ∈ V (T ).

1)| + |E(Lv

2)| < k,

Proof. If there exist v ∈ V (T ) such that |E(Lv
since Lv

2 is a rainbow path.

1 ∪ Lv

1)| + |E(Lv

2)| ≥ k, c is not a Pk-free coloring,

To prove the other direction of the lemma, ﬁrst we need to prove the following claim.

Claim 42.1. For any v ∈ V (T ), Lv
Tv.

1 ∪ Lv

2 is a maximum length rainbow path including v in

1)|+|E(Lv

Proof of Claim 42.1. We prove the claim by contradiction, suppose there is a rainbow path
which can be partitioned as L3 ∪ L4, each starting from v, such that |E(L3)| + |E(L4)| >
|E(Lv
2)|.
Hence, L3 and L4 must have a common color with Lv
1. We know that the incident edge of v
in each path Lv
1, L3, L4 must have the same color, since c is a color connected coloring. But
we assumed that L3 ∪ L4 is rainbow, a contradiction. Hence, the claim is proved. (cid:4)

1 is a longest rainbow path we have that |E(L3)|, |E(L4)| > |E(Lv

2)|. Since Lv

Now we can prove the remaining direction of the lemma. Suppose P is a rainbow
path in Tv. Thus, P can be partitioned as P1 ∪ P2, each starting from u ∈ V (Tv). Note
that |E(Lu
2 )| < k by the lemma statement. Also, by the above claim, we know
|E(P )| ≤ |E(Lu
2 )|. Therefore, |E(P )| < k for any arbitrary rainbow path in Tv.

1 )| + |E(Lu

1 )| + |E(Lu

22

Deﬁnition 43 (D(v, i, j)). Let i ≥ j, i + j < k, and v ∈ V (T ), we deﬁne D(v, i, j) to be
the number of distinct colors in a color connected maximum Pk-free coloring of Tv such that
|E(Lv

1)| = i and |E(Lv

2)| = j.

For e = {u, v} where v is the parent of u, we deﬁne Te to be a subgraph of Tv with

E(Tu) ∪ e as its edge set, that is a subgraph of Tv that is hanging from e.

Proof of Theorem 3. By Deﬁnition 43, we know that ar(T, Pk) = max{D(rT , i, j)|i + j < k}.
We show that D(v, i, j) can be computed using the values of D(u, ·) for u ∈ V (Tv) \ {v}.
Hence, D(·) can be computed by a post-order traversal of T .

To compute D(v, i, j), if v is a leaf of T , the only valid case is D(v, 0, 0), since there is no
edge in Tv. Hence, in the remaining, we suppose that v is not a leaf. We proceed by case
distinction based on types of children of v. A child u of v is of the following types: 1. u ∈ Lv
1,
2. u ∈ Lv

2, 3. u /∈ Lv

1 ∪ Lv
2

Now for each child u of v and z ∈ [3], such that e = {v, u} ∈ E(T ), we deﬁne Au,z as the
maximum number of distinct colors in Te if u belongs to case z, such that it does not violate
the deﬁnition of D(v, i, j). Note that only one child of v belongs to the ﬁrst case. Also, for
j > 0, there is only one child of v in the second case. Moreover, for j = 0 there is not any
child in the second case. All other children of v belong to the third case. Therefore, we can
compute D(v, i, j) by Equation (1) and Equation (2), for j > 0 and j = 0, respectively.

D(v, i, j) = max{Au1,1 + Au2,2 +

(cid:88)

Au,3

(cid:12)
(cid:12)u1, u2 ∈ C(v), u1 (cid:54)= u2},

D(v, i, 0) = max{Au1,1 +

u∈C(v)\{u1,u2}

(cid:88)

Au,3

(cid:12)
(cid:12)u1 ∈ C(v)}.

In what follows, we show how to compute the value of Au,z.

u∈C(v)\{u1}

a) u ∈ Lv

1. Then we have that E(Lv

1: Let e = {u, v} ∈ E(T ) and u ∈ Lv

2 )), hence by appending e to their tails, at least one of the two paths, Lu

a rainbow path of length i − 1. Observe that, since c(e) is in at most one of c(E(Lu
c(E(Lu
to a longer rainbow path. If Lu
Otherwise, c(e) ∈ c(E(L1
than L2
c(e), since the coloring is color connected. Hence, Lu
extends to a longer rainbow path which results in |E(Lu
or |E(Lu

1) \ {{v, u}} is
1 )) or
2 , extends
1 )| = i − 1.
u)) and by Deﬁnition 41 every rainbow path with greater length
1 . Moreover the common color is
2 is the longest rainbow path in Tu that
1 )| = i − 1
2 )| = i − 1. Thus, Au,1 equals to the maximum value obtained from these two cases.

1 or Lu
1 extends to a longer rainbow path, we have |E(Lu

u starting from u in Tu has a common color with Lu

2 )| = i − 1. Therefore, |E(Lu

1. |E(Lu

1 )| = i − 1:

In this case, e can get a new color ce. Hence, the maximum number

of distinct colors used in Te for D(v, i, j) is maxx<i D(u, i − 1, x) + 1.

2. |E(Lu

2 )| = i − 1, |E(Lu

1 )| > i − 1 : Then c({v, u}) ∈ c(E(Lu

2 ∪ e forms a rainbow path, since c(e) ∈ c(E(Lu

1 )), since the length of the
longest rainbow path must not exceed i. Also, e must have the same color as the
incident edge of u in Lu
1 , since the coloring is color connected. However, in this case,
P := Lu
2 ))| = 0.
Moreover, P is the longest rainbow path of Tv starting with e, since every other path
with longer length has a common color with Lu
1 and we are looking for a color connected
coloring, thus this color is c(e). So the maximum number of distinct colors used in Te
for D(v, i, j) in this case is maxx≥i D(u, x, i − 1).

1 )) and |c(E(Lu

1 )) ∩ c(E(Lu

b) u ∈ Lv

2: Au,2 can be computed similar to the previous case.

23

(1)

(2)

1 ∪ Lv
2:

c) u /∈ Lv

In the following let e1 = {v, u1} ∈ Lv

2. For
every child u of v such that u /∈ {u1, u2}, suppose that x = |E(Lu
2 )|. Also, let
e = {u, v}. Hence, Au,3 is equal to the maximum value obtained from the following cases by
iterating over all combination of x and y such that x + y < k and x ≥ y.

1 and e2 = {v, u2} ∈ Lv
1 )|, y = |E(Lu

1. x < j: In this case, e can get a new color ce. Therefore, the optimal solution for this

case of Te is D(u, x, y) + 1.

2. j ≤ x < i: In this case, e can not get the new color ce. For the contradiction, suppose
that e has the new color ce. Therefore, Lu
1 will extend to a longer rainbow path with
length x + 1 which starts from v. Moreover, we are looking for color connected coloring,
thus the extended path has not any common color with Lv
1. Since x + 1 > j, it leads
to a contradiction to the assumption that Lv
2 is
rainbow. Thus, e cannot have a new color ce. Hence, the optimal solution for this case
of Te is at most D(u, x, y). Let c(e) = c(e1), then any rainbow path starting from e in
Te has length less than or equal to Lv
1. Therefore, the
optimal solution for this case of Te is exactly D(u, x, y).

1 and has a common color with Lv

2 is the longest path such that Lv

1 ∪ Lv

3. i ≤ x and y < j: In this case, c(e) ∈ c(E(Lu

creates a rainbow path of length x + 1 which is larger than length of Lv
have the same color as the ﬁrst edge of the path Lu
is color connected. Therefore, the optimal solution for this case of Te is D(u, x, y).

1 )), otherwise the concatenation of e and Lu
1
1. Hence, e must
1 starting from u, since the coloring

4. i ≤ x and j ≤ y < i: In this case, c(e) ∈ c(E(Lu

1 creates a rainbow path longer than Lv

1 )), otherwise the concatenation of e
and Lu
1, a contradiction. Let suppose e3 be the
ﬁrst edge of the path Lu
1 which is incident to u. Hence, e must have the same color
as e3, since we are looking for a color connected coloring. In addition, e must have
the same color as e1, otherwise, Lu
2 extends to a rainbow path of length y + 1 which
is longer that Lv
2 and it does not have any common color with Lv
1, a contradiction.
Hence, e, e1, and e3 must have the same color. We have counted the color of e1 as a
distinct color before. On the other hand, we count the color of e3 in the calculation of
D(u, x, y). Therefore, we have to subtract it by one to avoid duplication. Hence, the
optimal solution for this case is at most D(u, x, y) − 1. Consider the coloring of Tu that
results D(u, x, y) distinct colors. Let us recolor all edges in Tu[c(e3)] by c(e1). Also, let
c(e) = c(e1). Length of the longest rainbow path starting from v in Te in the proposed
coloring is y + 1 which is not more than i. Furthermore, all rainbow paths starting
from v in Te have a common color with Lv
1, hence they do not violate the deﬁnition of
Lv

2. Therefore, the optimal solution for this case of Te is exactly D(u, x, y) − 1.

5. i ≤ x and i ≤ y: In this case, as i < y + 1, at least one of the Lu
1, a contradiction to the choice of Lv

1 ∪ {e} or Lu
2 ∪ {e} is a
longer rainbow path than Lv
1. Therefore, this case
is not possible and does not take part in the calculation of the value of the D(v, i, j).

Notice that we only deﬁned D(v, i, j) for i + j < k. Hence, by Lemma 42, our coloring for

every D(v, i, j) is Pk-free color connected coloring.

Claim 43.1. Let A, B, C be three arrays of length n. There is an O(n) algorithm for ﬁnding
max{As + Bt + (cid:80)
Proof First we deﬁne two arrays A(cid:48), B(cid:48) of length n as follow:

r∈[n]\{s,t} Cr|s (cid:54)= t, {s, t} ⊆ [n]}.

A(cid:48)

i = Ai − Ci ∀1≤i≤n

B(cid:48)

i = Bi − Ci ∀1≤i≤n

(3)

24

Now the problem is reduced to ﬁnding m = max{A(cid:48)
i=1 Ci
is equal to max{As + Bt + (cid:80)
r∈[n]\{s,t} Cr|s (cid:54)= t, {s, t} ⊆ [n]}. Let L, R be two arrays of length
(cid:12)
(cid:12)i ≤ j ≤ n}. For i = 1, we have Li = B(cid:48)
n such that Li = max{B(cid:48)
1.
j
For i > 1, we can obtain Li by iterating from 2 to n and calculating Li = max{Li−1, B(cid:48)
i}.
Similarly, we can obtain Ri by iterating from n to 1. This can be done in O(n). Now we
should ﬁnd max{A(cid:48)
(cid:12)1 ≤ i ≤ n} which can be done in O(n) by checking
all possible values of i. (cid:4)

(cid:12)
(cid:12)1 ≤ j ≤ i}, Ri = max{B(cid:48)
j

i + max{Li−1, Ri+1}(cid:12)

(cid:12)
(cid:12)i (cid:54)= j} in O(n), since m + (cid:80)n

i + B(cid:48)
j

According to the previous cases, we can compute Au,z for all z ∈ [3] and u ∈ C(v) in
O(k2). Moreover, by Equation (1), Equation (2), and the above claim we can compute
D(v, i, j) in O(deg(v)), if we use dynamic programming approach. Therefore, the total time
complexity of our algorithm is O(|V (T )|k4), since there are O(|V (T )|k2) values of D(·) that
we need to compute.

7 Conclusions and Open Problems

We studied the complexity of computing the anti-Ramsey number for simple paths. We
proved that computing the ar(G, Pk) is hard for every constant integer k > 2, and for k = 3,
the problem is hard to approximate to a factor of n−1/2−(cid:15). To analyze the exact complexity
of the problem, we provided a ﬁne grain reduction, for a slight variation of it. It remains
unanswered whether the inapproximability result extends to all paths of length at least 3.

On the positive side, we provided a linear time algorithm for trees. Color connected
coloring does not extend to bounded treewidth graphs. However, we believe our techniques
can be employed to provide an approximation algorithm for these graphs. We covered paths
in depth, another natural class of graphs to be considered might be complete graphs or cycles.

References

[1] A. Adamaszek and A. Popa. Approximation and hardness results for the maximum edge

q-coloring problem. In ISAAC (2), pages 132–143, 2010.

[2] A. Adamaszek and A. Popa. Approximation and hardness results for the maximum edge

q-coloring problem. J. Discrete Algorithms, 38-41:1–8, 2016.

[3] M. Axenovich and T. Jiang. Anti-Ramsey numbers for small complete bipartite graphs.

Ars Comb., 73, 2004.

[4] M. Axenovich, T. Jiang, and A. K¨undgen. Bipartite anti-Ramsey numbers of cycles.

Journal of Graph Theory, 47(1):9–28, 2004.

[5] A. Blokhuis, R. J. Faudree, A. Gy´arf´as, and M. Ruszink´o. Anti-Ramsey colorings in

several rounds. J. Comb. Theory, Ser. B, 82(1):1–18, 2001.

[6] C. Bujt´as, E. Sampathkumar, Z. Tuza, C. Dominic, and L. Pushpalatha. 3-consecutive

edge coloring of a graph. Discrete Mathematics, 312(3):561–573, 2012.

[7] H. Chen, X. Li, and J. Tu. Complete solution for the rainbow numbers of matchings.

Discrete Mathematics, 309(10):3370 – 3380, 2009.

25

[8] R. Diestel. Graph Theory, 4th Edition, volume 173 of Graduate texts in mathematics.

Springer, 2012.

[9] P. Erd¨os, M. Simonovits, and V. T. S´os. Anti-Ramsey theorems. Inﬁnite and ﬁnite sets
(Colloq., Keszthely, 1973; dedicated to P. Erd¨os on his 60th birthday), pages 633–643,
1975.

[10] W. Feng, P. Chen, and B. Zhang. Approximate maximum edge coloring within factor 2:

a further analysis. In ISORA, pages 182–189, 2008.

[11] W. Feng, L. Zhang, W. Qu, and H. Wang. Approximation algorithms for maximum edge

coloring problem. In TAMC, pages 646–658, 2007.

[12] W. Feng, L. Zhang, and H. Wang. Approximation algorithm for maximum edge coloring.

Theoretical Computer Science, 410(11):1022–1029, 2009.

[13] A. Frieze and B. Reed. Polychromatic hamilton cycles. Discrete Mathematics, 118(1):69

– 74, 1993.

[14] S. Fujita, C. Magnant, and K. Ozeki. Rainbow generalizations of Ramsey theory: A

dynamic survey. Theory and Applications of Graphs, 0, 2014.

[15] W. Goddard and H. Xu. Vertex colorings without rainbow subgraphs. Discussiones

Mathematicae Graph Theory, 36(4):989–1005, 2016.

[16] R. Haas and M. Young. The anti-Ramsey number of perfect matching. Discrete

Mathematics, 312(5):933–937, 2012.

[17] R. Impagliazzo, R. Paturi, and F. Zane. Which problems have strongly exponential

complexity? Journal of Computer and System Sciences, 63(4):512 – 530, 2001.

[18] T. Jiang. Edge-colorings with no large polychromatic stars. Graphs and Combinatorics,

18(2):303–308, May 2002.

[19] T. Jiang and D. B. West. Edge-colorings of complete graphs that avoid polychromatic

trees. Discrete Mathematics, 274(1-3):137–145, 2004.

[20] W. Mader. Homomorphieeigenschaften und mittlere kantendichte von graphen. Mathe-

matische Annalen, 174(4):265–268, Dec 1967.

[21] J. Montellano-Ballesteros and V. Neumann-Lara. An anti-Ramsey theorem on cycles.

Graphs and Combinatorics, 21(3):343–354, Sep 2005.

[22] I. Schiermeyer. Rainbow numbers for matchings and complete graphs. Discrete Mathe-

matics, 286(1-2):157–162, 2004.

[23] I. Schiermeyer. Rainbow colourings. Invited papers from RIMS, Kyoto University, 2007.

[24] M. Simonovits and V. T. S´os. On restricted colourings of Kn. Combinatorica, 4(1):101–

110, Mar 1984.

[25] D. Zuckerman. Linear degree extractors and the inapproximability of max clique and

chromatic number. In STOC’06, volume 2006, pages 681–690, 9 2006.

26

