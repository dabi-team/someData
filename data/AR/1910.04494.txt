9
1
0
2

t
c
O
0
1

]

O
R
.
s
c
[

1
v
4
9
4
4
0
.
0
1
9
1
:
v
i
X
r
a

Concepts for End-to-end Augmented Reality based Human-Robot
Interaction Systems

David Puljiz1 and Bj¨orn Hein1,2

Abstract— The ﬁeld of Augmented Reality (AR) based Hu-
man Robot Interaction (HRI) has progressed signiﬁcantly since
its inception more than two decades ago. With more advanced
devices, particularly head-mounted displays (HMD),
freely
available programming environments and better connectivity,
the possible application space expanded signiﬁcantly. Here we
present concepts and systems currently being developed at our
lab to enable a truly end-to-end application of AR in HRI,
from setting up the working environment of the robot, through
programming and ﬁnally interaction with the programmed
robot. Relevant papers by other authors will also be overviewed.
We demonstrate the use of such technologies with systems
not inherently designed to be collaborative, namely industrial
manipulators. By trying to make such industrial systems easily-
installable, collaborative and interactive, the vision of universal
robot co-workers can be pushed one step closer to reality. The
main goal of the paper is to provide a short overview of the
capabilities of HMD-based HRI to researchers unfamiliar with
the concepts. For researchers already using such techniques, the
hope is to perhaps introduce some new ideas and to broaden
the ﬁeld of research.

I. INTRODUCTION

Making robots ubiquitous in all

industries, from large
factories to small enterprises, will require considerable effort
and use of new technologies and paradigms. One such
technology is AR. Although not new in the ﬁeld of robotics
- indeed the ﬁrst systems combining the two emerged in the
early nineties - the newer generations of devices considerably
expand the capabilities and use cases of such systems. These
devices include Microsoft’s HoloLens and the upcoming
HoloLens 2, Magic Leap’s Magic Leap One, the Meta’s Meta
2 etc.

AR can be used to facilitate robot set-up, programming
and allow for more intuitive collaboration. It can also be of
use in imitation learning, both as a vector to gather data, and
to inﬂuence the process of learning itself. Furthermore the
vast array of sensors and localisation capabilities present on
HMDs allow for a paradigm shift - instead of relying on an
external sensor suite to track the human coworkers, display
information and so on, one can outsource these capabilities
to the human coworker through wearables, such as HMDs,
allowing simpler, cheaper and reconﬁgurable robot cells.

In this paper we address the use of HMDs to provide
the mentioned capabilities. The structure of the paper will
be organised as follows. In the next section, Section II, we
present the tools and hardware used in development, as well

1Intelligent Process Automation and Robotics Lab, Karlsruhe Insti-
tute of Technology, Karlsruhe, Germany david.puljiz@kit.edu,
bjoern.hein@kit.ed

2Karlsruhe University of Applied Sciences, Karlsruhe, Germany

as the capabilities an HMD must have to use similar concepts
and algorithms. We proceed to present the basic building
blocks of an end-to-end system - referencing (II-A); robot
cell set-up (II-B); programming (II-C); HRI in a working
system (II-D; and imitation robot learning methods (II-E).
Finally a short conclusion is presented in III.

II. SYSTEM COMPONENTS

In this section concepts and research on particular parts of
the end-to-end system will be presented. Currently our re-
search, as in most other groups, uses the Microsoft HoloLens
as the HMD of choice. The vast majority of methods,
however, are also applicable to any HMD device that can:
(1) self-localise in an environment; (2) produce a map/mesh
of the environment; (3) track hands and gestures; (4) have at
least a single RGB camera accessible. These capabilities are
ubiquitous in modern HMDs and will certainly be available
and even expended in next generation devices.

For the robot control and communication, the Robotic
Operating System (ROS) is used, as well as MoveIt! for
path planning. For communication between ROS and the
HoloLens, rosbridge together with ROS# toolkit by Siemens
is used. For HoloLens application development we use
Unity3D. Tests and interactions are carried out on industrial
manipulators such as KUKA’s KR-5 and KR-16.

A. Referencing

The ﬁrst step in any AR-based HRI system is to establish a
robust transformation between virtual objects in the HMD’s
coordinate system and the robot’s coordinate system. We
call this referencing. This allows not just proper overlay
of information over relevant objects, but also allows virtual
objects to convey information to the robot e.g. setting up
virtual waypoints for the robot’s trajectory. Presently most
system achieve this either through use of visual markers or
through manual referencing of coordinates where the user
positions the virtual robot over the real one. AR software
packages such as Vuforia and VisionLib are extending the
approach to include 3D object matching, either from 2D
images or from the 3D spatial mesh generated by HMDs.
We are taking similar approaches, extending the current
referencing methods to include 3D object matching. We pro-
posed a semi-automatic method, where user input is required,
an automatic one where no input is required, and ﬁnally
a continuous automatic one which updates the referencing
during the interaction.

In the semi-automatic method, the user gives a rough
initial guess through a seed hologram which is then processed

 
 
 
 
 
 
by a standard registration algorithm, ICP [1] or Super4PCS
[2]. The registration algorithm reﬁnes the guess and provides
a more precise referencing. In Fig. 3 the spatial mesh used
for referencing, the seed hologram, and the result of the
referencing algorithm can be seen.

The automatic method doesn’t require user input, thus the
ﬁrst guess should be performed autonomously. We dilate the
bounding box of the robot and calculate descriptors - OUR-
CVFH [3], SHOT [4] or a custom-made descriptor consisting
of the centroid, point cloud eigenvalues, eigenvectors and
the number of points in n vertical slices. We then slide
the bounding box through the scene and match descriptors.
The scene box with the best match is selected and one of
the previous registration algorithms applied to the selected
transform. Although each
bounding box to get
descriptor performs well with certain robots and surrounding
environments in our tests, none of them are general, thus
more research is required.

the ﬁnal

The previous two methods perform referencing only once,
which leaves the system vulnerable if the HMD loses lo-
calisation. This usually implies that the HMD will move its
world coordinate system to its current location, invalidating
the original referencing. Although this can be detected and
the user prompted to re-reference, it can be inefﬁcient and
annoying, especially in the interaction stage. To combat this,
a continuous automatic referencing method is also being
developed. The method uses the stream from two of the
HoloLens’ environmental cameras to form a stereo pair. The
frames are captured and compared to previous frames to
extract the optical ﬂow. The part of the optical ﬂow that
coincides with the ego-motion of the HoloLens is subtracted,
leaving only the optical ﬂow of moving objects- in this case
the robot. Using the baseline and parameters of the two
cameras, a point cloud of the moving parts can be created and
compared to the robot model transformed with the current
joint states. This method is still heavily in development and
results are pending.

There are many other methods that can be used for refer-
encing, indeed the problem is equivalent to an autonomous
robot trying to ﬁnd objects in the scene. Other machine vision
algorithms based on deep learning such as the bounding
box generating Faster-RCNN [5], FCNs [6] for semantic
segmentation or end-to-end approaches such as PoseNet [7]
can be used. Alternatively classical approaches using 3D
descriptors, ﬁlters and registration algorithms can also be
used. For an overview of referencing in AR-based HRI and
a more in-depth discussion of the algorithms presented please
see [8].

B. Cell Set-up

The second step after obtaining a precise coordinate
transform is to set-up the robot’s working environment,
meaning setting up safety zones and mapping obstacles.
Robot cells are usually planed ofﬂine with CAD data, which
in turn deﬁnes safety zones. The cell is then built, the safety
zones deﬁned and uploaded to the robot controller, and then
thoroughly tested. Such an approach is time consuming and

Fig. 1. The cell setup process. On the screen the octomap generated from
the Hololens’ spatial mesh is visible. One can also see the the Hololens’
global coordinate system in the robot’s coordinate system as well as the
current position of the device. In the background the real robot with the
obstacles is visible.

not applicable in truly ﬂexible, semi-structured production
environments.

In our approach the in-built spatial mapping capabilities of
the HMD is leveraged to create a map of the manipulator’s
surroundings. The mesh is converted to a point cloud,
ﬁltered, points belonging to the manipulator removed and
ﬁnally converted to an octomap that covers all the obstacles
in the environment. The user can edit this octomap and set
up safety zones immediately, visualising the safety zones and
octomap in the real working environment. The octomap and
the safety zones are then used to deﬁne the planning scene
in the MoveIt! planning framework.

In Fig. 1 one can see the octomap in Rviz. The octomap is
generated from the processed spatial mesh of the HoloLens,
such as the one visible in Fig. 3. The octomap is then used as
the planning scene for the MoveIt! path planning framework.
In Fig. 1 one can also see on the monitor that the robot in
the goal state is in red as it collides with the obstacles in the
environment.

C. Programming

AR also extends the possibilities in robot programming by
allowing waypoint placement and virtual trajectory execution
inside the real robot cell. Similar to [9] we implement a
waypoint based robot programming system, including free-
space wayoints, as well as surface waypoints which are
embedded into the spatial mesh. We extend the approach
to include visualisation of the exact location of waypoints
in the robot coordinate system, the projection of waypoints
onto the spatial mesh of the robot cell (useful e.g. when
trying to position the robot above a certain point in the
workspace) and the integration of the framework with the
MoveIt path planning software (instead of calculating B-
splines as in [9]). The framework allows to visualise the
trajectory, show the virtual robot performing the trajectory
before actual execution and, if the trajectory is not satisfying,

Fig. 2. The robot programming setup. Left: The waypoints, their position in the coordinate system of the robot, their projection to the work surface as
well as the menu are visible. Right: The path and the virtual execution by the robot (different set of waypoints)

adding, deleting and moving waypoints to create a new
trajectory. Combined with the previous step this allows us
to plan custom, collision free trajectories in a cell with static
obstacles.

As an additional modality, we added hand guidance,
such as found on collaborative robots, through the use of
the hand tracking capabilities of the HMD. This approach
doesn’t require any Joint-Torque or other sensors on the
robot, doesn’t require any direct force to move the robot
and isn’t controller or robot dependent, indeed working with
manipulators with any number of joints. The movements of
the hands near a speciﬁc links get transformed to the joint
values of the parent joint, while the rest of the movement that
the joint cannot perform is propagated down the kinematic
chain. The framework also allows the user to both guide
the end-effector (by invoking inverse kinematic calculation
from the path planning software) or move speciﬁc joints
themselves (by the method described above), thus allowing to
make use of any redundant joints. On the downside moving
speciﬁc joints requires more effort and time on the side of the
user. Thus dragging the end-effector should be used for most
of the path planning while the joint movement propagation
should be used to reﬁne robot poses at speciﬁc points for
robots with redundant joints. More details on the approach
can be found in [10].

There are also other possibilities of inputting desired
trajectories. A commonly proposed approach involves the
use of input devices, such as pens [11]. Although classically
tracked by external
this could now be
tracking sensors,
done using the HMD itself. By using the hand tracking
capabilities of HMDs, one can also trace trajectories by hand
motion. Integrating voice commands for speciﬁc higher level
tasks can extend the programming options. Finally one can
also specify forces when in contact with the environment
regardless weather the waypoint method or some other is
used, such as presented in [9]. The HMD-based AR meth-
ods are particularly attractive and useful since they offer
numerous input modalities, virtual trajectory execution and
programming while inside the real robot cell.

D. Interaction

Once the manipulator is programmed, methods to inter-
act with human coworkers while the robot performs the
task need to be developed. The most basic requirement
is knowing the pose of the human to prevent dangerous
collisions. We are developing a method based on an HMD
and wrist mounted inertial measurement units (IMU). The
method doesn’t require external tracking sensors or long
calibration. It reduces the IMU drift through sensor fusion of
the localisation and hand tracking data of the HMD on one
side, and the measurements of the IMUs on the other. While
the hands are outside the ﬁeld of view of the HMD’s sensors,
the ﬁltered data of the IMUs are used for odometry. Here
we apply either Kalman ﬁltering or a combination of low
and high pass ﬁlters. Although this still accumulates drift,
the sensor fusion with the HMD’s hand tracking capabilities
works to reset the drift, allowing for continual use. Thus
the pose of the head and both hands in the robot coordinate
system can be known. The HoloLens hand tracking capability
can be seen in Fig. 3.

Another modality to facilitate intuitive HRI is displaying
robot goals and allowing robots to reference certain objects
such as in [12]. This allows human coworkers to have
much better situational awareness which increases trust and
comfort while working with robots. Such a collaborative
system was shown in [13].

E. Learning

The sensor suit of a modern HMD can provide a signiﬁcant
amount of data to imitation learning algorithms. In particular
data on object grasping, manipulation and the sequence of
actions needed to perform a task. To achieve this a robust
hand skeleton tracking algorithm that is able to cope with
contacts between the hand, the objects and the environment
is quite important. Such an algorithm was proposed in [14].
Additionally, estimation of contact points, contact forces,
and the deformation of objects during manipulation by the
human can provide a plethora of useful data for imitation
learning. This is usually achieve by bulky sensor gloves not
adapted for use in real working environments. Deep learning

grant agreement No 688117 Safe human-robot
interac-
tion in logistic applications for highly ﬂexible warehouses
(SafeLog).

REFERENCES

[1] P. J. Besl and N. D. McKay, “A method for registration of 3-d shapes,”
IEEE Transactions on Pattern Analysis and Machine Intelligence,
vol. 14, no. 2, pp. 239–256, Feb 1992.

[2] N. Mellado, D. Aiger, and N. J. Mitra, “Super 4pcs fast global
indexing,” Computer Graphics
pointcloud registration via smart
Forum, vol. 33, no. 5, pp. 205–215, 2014. [Online]. Available:
http://dx.doi.org/10.1111/cgf.12446

[3] A. Aldoma, F. Tombari, R. B. Rusu, and M. Vincze, “Our-cvfh–
oriented, unique and repeatable clustered viewpoint feature histogram
for object recognition and 6dof pose estimation,” in Joint DAGM
(German Association for Pattern Recognition) and OAGM Symposium.
Springer, 2012, pp. 113–122.

[4] F. Tombari, S. Salti, and L. Di Stefano, “Unique signatures of
histograms for local surface description,” in European conference on
computer vision. Springer, 2010, pp. 356–369.

[5] S. Ren, K. He, R. B. Girshick,

“Faster R-
CNN:
towards real-time object detection with region proposal
networks,” CoRR, vol. abs/1506.01497, 2015. [Online]. Available:
http://arxiv.org/abs/1506.01497

and J. Sun,

[6] J. Long, E. Shelhamer, and T. Darrell, “Fully convolutional networks
for semantic segmentation,” in 2015 IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), June 2015, pp. 3431–3440.
[7] A. Kendall, M. Grimes, and R. Cipolla, “Posenet: A convolutional
network for real-time 6-dof camera relocalization,” in Proceedings
of the IEEE international conference on computer vision, 2015, pp.
2938–2946.

[8] D. Puljiz, K. S. Riesterer, B. Hein, and T. Kr¨oger, “Referencing
between a head-mounted device and robotic manipulators,” in
Proceedings of the 2nd Workshop on Virtual, Mixed and Augmented
Reality Human.Robot
[Online].
Available: http://arxiv.org/abs/1904.02480

Interaction, HRI 2019, 2019.

[9] C. P. Quintero, S. Li, M. K. Pan, W. P. Chan, H. F. M. V. der Loos,
and E. Croft, “Robot programming through augmented trajectories in
augmented reality,” in 2018 IEEE/RSJ International Conference on
Intelligent Robots and Systems (IROS), Oct 2018, pp. 1838–1844.
[10] D. Puljiz, E. St¨ohr, K. S. Riesterer, B. Hein, and T. Kr¨oger, “General
Hand Guidance Framework using Microsoft HoloLens,” arXiv e-
prints, p. arXiv:1908.04692, Aug 2019.

[11] A. Gaschler, M. Springer, M. Rickert, and A. Knoll, “Intuitive robot
tasks with augmented reality and virtual obstacles,” in Robotics and
Automation (ICRA), 2014 IEEE International Conference on.
IEEE,
2014, pp. 6026–6031.

[12] T. Weng, L. Perlmutter, S. Nikolaidis, S. Srinivasa, and M. Cakmak,
“Robot object referencing through legible situated projections,” in
2019 International Conference on Robotics and Automation (ICRA),
May 2019, pp. 8004–8010.

[13] T. Chakraborti, S. Sreedharan, A. Kulkarni, and S. Kambhampati,
“Alternative modes of interaction in proximal human-in-the-loop
operation of robots,” CoRR, vol. abs/1703.08930, 2017. [Online].
Available: http://arxiv.org/abs/1703.08930

[14] F. Mueller, F. Bernard, O. Sotnychenko, D. Mehta, S. Sridhar,
D. Casas, and C. Theobalt, “Ganerated hands for real-time 3d hand
tracking from monocular rgb,” in Proceedings of Computer Vision
and Pattern Recognition (CVPR), June 2018. [Online]. Available:
https://handtracker.mpi-inf.mpg.de/projects/GANeratedHands/

[15] H. Zhang, Z.-H. Bo, J.-H. Yong, and F. Xu, “Interactionfusion:
Real-time reconstruction of hand poses and deformable objects
interactions,” ACM Trans. Graph., vol. 38, no. 4,
in hand-object
pp. 48:1–48:11, Jul. 2019. [Online]. Available: http://doi.acm.org/10.
1145/3306346.3322998

[16] H. Liu, Y. Zhang, W. Si, X. Xie, Y. Zhu, and S.-C. Zhu, “Interactive
robot knowledge patching using augmented reality,” in 2018 IEEE 21st
International Conference on Robotics and Automation (ICRA), 2018,
pp. 1947 –1954.

[17] M. B. Luebbers, C. Brooks, M. J. Kim, D. Szaﬁr, and B. Hayes,
“Augmented reality interface for constrained learning from demonstra-
tion,” in Proceedings of the 2nd International Workshop on Virtual,
Augmented, and Mixed Reality for HRI (VAM-HRI), 2019.

Fig. 3. Referencing and hand detection of HoloLens. Here the spatial mesh
- used in several stages of the system - is visible. The seed hologram (cube)
used as the initial guess for the semi-automatic referencing algorithm is also
visible. The virtual robot is overlayed over the real one. Additionally the
output of the hand tracking is displayed with the red and blue spheres for
the left and right hand respectfully.

algorithms, such as the one proposed in [15], can take depth
and camera data from the HMD as input, and output object
deformation. This would make it possible to gather data in
real working environments provided the user is wearing an
HMD, which should become increasingly common.

Although currently not a strong focus of research in
general, applications to use the HoloLens for knowledge
patching in temporal and-or graphs [16] and visualising and
applying constraints in constrained learning by demonstra-
tion [17] have already been demonstrated.

III. CONCLUSION

In this paper we described concepts and algorithms for
HMDs to allow end-to-end interaction with general robotic
manipulators, from setting up the working environment,
through programming and interaction, to it’s use in imitation
learning. This paper provides a brief overview of the major
topics currently being researched in the ﬁeld of AR-based
HRI. The main goal is to show how, by leveraging the
new generation of HMDs, many problems that prevent a
ﬂexible, collaborative robot work cell can be solved or at
least mitigated.

Still it is not a catch-all solution. To implement it in real
production environments the precision of referencing and
path programming needs to be tested, the safety certiﬁcation
aspects assessed, failure cases identiﬁed, ergonomy studied
etc. In the end other technologies and paradigms will most
likely be needed for a truly ﬂexible and safe collaborative
system. However, it would seem that HMD-based AR will
be a major building block of HRI systems in the future. The
research is still relatively in it’s infancy and there are still
plenty of ways to expand and improve current AR-based HRI
paradigms.

ACKNOWLEDGMENT

This work has been supported from the European Unions
Horizon 2020 research and innovation programme under

