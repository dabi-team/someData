Constructing Category-Speciﬁc Models for Monocular Object-SLAM

Parv Parkhiya1, Rishabh Khawad1, J. Krishna Murthy1, Brojeshwar Bhowmick2, and K. Madhava Krishna1

8
1
0
2

b
e
F
6
2

]

O
R
.
s
c
[

1
v
2
9
2
9
0
.
2
0
8
1
:
v
i
X
r
a

Abstract— We present a new paradigm for real-time object-
oriented SLAM with a monocular camera. Contrary to previous
approaches,
that rely on object-level models, we construct
category-level models from CAD collections which are now
widely available. To alleviate the need for huge amounts of
labeled data, we develop a rendering pipeline that enables
synthesis of large datasets from a limited amount of manually
labeled data. Using data thus synthesized, we learn category-
level models for object deformations in 3D, as well as dis-
criminative object features in 2D. These category models are
instance-independent and aid in the design of object landmark
observations that can be incorporated into a generic monocular
SLAM framework. Where typical object-SLAM approaches
usually solve only for object and camera poses, we also estimate
object shape on-the-ﬂy, allowing for a wide range of objects
from the category to be present
in the scene. Moreover,
since our 2D object features are learned discriminatively, the
proposed object-SLAM system succeeds in several scenarios
where sparse feature-based monocular SLAM fails due to
insufﬁcient features or parallax. Also, the proposed category-
models help in object instance retrieval, useful for Augmented
Reality (AR) applications. We evaluate the proposed framework
on multiple challenging real-world scenes and show — to the
best of our knowledge — ﬁrst results of an instance-independent
monocular object-SLAM system and the beneﬁts it enjoys over
feature-based SLAM methods.

I. INTRODUCTION

Simultaneous Localization and Mapping (SLAM) ﬁnds
various real-world applications such as autonomous naviga-
tion, visual inspection, mapping, and surveillance. Monoc-
ular cameras have evolved as popular choices for SLAM,
especially on platforms such as hand-held devices and Micro
Aerial Vehicles (MAVs). Most state-of-the-art monocular
SLAM systems [1] operate on geometric primitives such as
points, lines, and planar patches. Others operate directly on
images, without the need for expensive feature extraction
steps [2]. However, both these sets of approaches lack the
ability to provide a rich semantic description of the scene.

Recognizing and keeping track of objects in a scene
will enable a robot to build meaningful maps and scene
descriptions. Object-SLAM is a relatively new paradigm
[3]–[5] towards achieving this goal. Summarized in one
sentence, object-SLAM attempts to augment SLAM with
object information so that robot localization, object location
estimation (in some cases, object pose estimation too), and
mapping are achieved in a uniﬁed framework.

There are two dominant paradigms in object-SLAM re-
search, depending on the way objects are characterized in

1 Parv Parkhiya, Rishabh Khawad, J. Krishna Murthy, and K. Madhava
Krishna are with the Robotics Research Center, KCIS, IIIT Hyderabad,
India. albert.author@papercept.net

2 Brojeshwar Bhowmick is with Tata Consultancy Services, Kolkata,

India.

Fig. 1: Sample output of the proposed object-SLAM system.
Given RGB images from a monocular camera (here from a
quadrotor), we estimate the trajectory of the camera, as well
as the poses and shapes of various objects in the scene. The
proposed category-speciﬁc models can be used either in an
incremental setting for online SLAM, or in a batch setting
for ofﬂine factor-graph optimization.

the SLAM framework. In the ﬁrst paradigm [4], [6], object-
level (instance-speciﬁc) models are assumed to be available
beforehand. However, the very nature of monocular SLAM
with scale ambiguity coupled with the loss in information
due to projection onto the image plane renders this paradigm
infeasible for monocular object-SLAM systems. The second
paradigm [7], [8], assumes a generic model, regardless of
the object category. For instance, [8] models all objects as
ellipsoids, and [5], [9] model all objects as cuboids. Both
these approaches suffer a few disadvantages. Relying on
object-level models will result in the need to have precise
object models for all instances of an object category. On the
other hand, generic models do not give much information
about an object beyond the object category label. In many
applications, such as manipulation for instance, it is advan-
tageous to know the object pose.

In this paper, we propose a new paradigm for monoc-
ular object-SLAM, that combines the best-of-both-worlds.
To enjoy the expressive power of instance-speciﬁc models
yet retain the simplicity of generic models, we construct
category-speciﬁc models, i.e., the object category is modeled
as a whole. We employ the widely used linear subspace
model [10]–[12] to characterize an object category and deﬁne
object observations as factors in a SLAM factor graph [13],
[14]. In our object-SLAM formulation, we do not assume
any knowledge about the instance (interchangeably referred
to as shape) of the object. Rather, we explicitly solve for
the object shape in a joint formulation. The object-SLAM
backend estimates robot trajectory and map, as well as poses
and shapes of all objects in the scene.

Naturally, one would expect that a lot of data will be

 
 
 
 
 
 
needed to learn category-speciﬁc models that generalize
well across object instances, and rightly so. Datasets such
as ShapeNet, SceneNet, ObjectNet have made available
CAD collections of various object categories. We exploit
the ready availability of such CAD collections to construct
our category models. These category models capture the
deformation modes of objects in 3D. Correspondingly, we
leverage recent successes of Convolutional Neural Networks
(CNNs) in keypoint localization [10], [15]–[17] to train 2D
object feature extractors. To alleviate the need for large
amounts of manually annotated training data, we design a
render pipeline, along the lines of RenderForCNN [18], to
synthesize enormous amounts of training data for category
model learning. The presented render pipeline takes in a
small volume of manually annotated data and synthesizes
a large dataset that can be used to efﬁciently train a 2D
object feature extraction network. We show that feature
detectors learned from the render pipeline are more precise
compared to ones that are learned over real data alone, which
corroborates claims in [18].

We evaluate our object-SLAM system on multiple chal-
lenging real-world sequences and present — to the best of
our knowledge — ﬁrst steps towards instance-independence
in monocular object-SLAM. Since we use discriminative 2D
features on objects, our system is robust to conditions such as
strong rotation, where monocular SLAM approaches usually
face catastrophic failure. We present both incremental and
batch versions of our object-SLAM pipeline and demonstrate
its advantages qualitatively and quantitatively over feature-
based visual SLAM approaches [1]. Finally, we show that,
using our category-level models, one can perform object
instance retrieval and this can be used in many Augmented
Reality (AR) applications for overlaying object models in a
scene. Fig. 1 illustrates an output from our pipeline. Objects
are consistently embedded onto the robot’s trajectory and
their 3D models are rendered.

II. RELATED WORK

Nearly all state-of-the-art SLAM systems [1], [2], [19]
rely on pose-graph (or other factor graph) optimization [20],
[21]. In this section we review related work on object-SLAM,
and outline certain limitations in them that form motivating
factors for the proposed approach.

A. Object-SLAM

With recent advances and subsequent stabilization of
SLAM systems, the community has been devoting attention
to incorporating objects into the SLAM framework. To this
end, some recent approaches for object-oriented SLAM have
been proposed [3]–[5], [7]–[9].

Most of these works rely on depth information from RGB-
D or stereo sensors [4]–[7]. In [4], [6], assume an instance-
level model of the objects are known a priori. In [4], a
real-time 3D object detection algorithm is applied on an
RGB-D image stream and these objects are fused along with
odometry information in a pose graph optimization scheme.
Similarly in [6], a framework for multi-robot object-SLAM

is proposed. Again, each robot is equipped with an RGB-D
sensor and object models are available a priori.

There is another paradigm in which no instance-level
models are available a priori. In [5], association and object
poses are solved for jointly, in a factor graph framework,
using data from RGB-D cameras. Among monocular object-
SLAM/SfM approaches, [8], [9] fall under this paradigm. In
such approaches, objects are modeled as bounding boxes [7],
[9] or as ellipsoids [8].

Our method hence falls under a third paradigm, where we

assume category-models, and not instance-level models.

B. Object-Category Models

Over the last few years, object-category models have
been applied to several problems in monocular vision. In
[10]–[12], category-level models are employed to obtain
object reconstructions from single images. These approaches
demonstrate that the loss of information in the monocular
imaging process can be compensated for by incorporating
priors on shapes of objects belonging to a particular category.
We use these category models and exploit them to design
object observation factors that can be easily incorporated
into monocular SLAM, and also generalize across several
instances from the category, without the need for modeling
all possible instances from the category.

C. Keypoint Localization Using CNNs

Convolutional Neural Networks (CNNs) have been the
driving reason behind recent advances in object detection
[22], [23] and object keypoint localization [15]–[17], [24].
When run on a GPU, these CNNs are capable of processing
image frames with latencies of about 100-300 milliseconds
and form important components of our pipeline.

D. Render Pipelines for Data Synthesis

With the advent of CAD model collections such as [25],
3D data is now in abundance. In [18], image synthesis using
a rendering engine is proposed as an alternative to training
on real images annotated manually. Models trained for the
task of object viewpoint prediction on rendered data (and
subsequently ﬁnetuned on a smaller dataset comprising real
data) are shown to outperform models that have been trained
on (larger) real datasets alone. Our experiments corroborate
this fact for the task of object keypoint prediction as well.

We build on several of the components described here,
however we craft the outputs to create object factors that can
be augmented to factor graphs [13] constructed using monoc-
ular SLAM approaches. The entire pipeline is summarized
in Fig. 2 and is explained in the subsequent sections.

III. CONSTRUCTING CATEGORY-SPECIFIC MODELS

In this section, we describe the category-level models that
we employ in our object-SLAM system. Our key insight
is that shapes of objects from the same category are not
arbitrary. Instead they all follow a set pattern that can be
learned by examining several instances. We adopt the widely
used linear subspace model [10]–[12], [15] and represent
objects as 3D wireframes.

Fig. 2: Complete pipeline for learning and incorporating category-level models for object-SLAM

A. Category-Level Model

In the proposed approach, we lay an emphasis on the use
of category-level models as opposed to instance-level models
for objects. To construct a category level model, each object
is ﬁrst characterized as a set of 3D locations of salient points

that are common across all instances of the category. For
example, such salient points for the chair category could be
legs of the chair, corners of the chair backrest, and so on.
These points are common across all instances of the category.
We denote by S the 3K-vector comprising of an ordered

collection of 3D locations of these K salient points, which
we refer to as keypoints for that object category. Keypoints
for the chair category which we use throughout this work,
are shown in Fig. 2.

According to the linear subspace model [10], the space
of actual shapes of a category are conﬁned to a much lower
dimensional subspace of R3K. This is easy to see, since there
are several dependencies that exist among the K keypoints,
such as subsets of the keypoints being planar, symmetric,
etc. Any object can then be expressed as a mean shape that
can be deformed along linearly independent directions (basis
vectors) using shape parameters (coefﬁcients of the linear
combination).

Mathematically, if ¯S is the mean shape of the category,
and Vis are a deformation basis obtained from PCA over a
collection of aligned ordered 3D CAD models (such as [25]),

S = ¯S +

B
(cid:88)

b=1

λbVb = ¯S + VΛ

(1)

where B is the number of basis vectors (the top-B eigenvec-
tors after PCA). Here, V represents the learnt 3K ×B defor-
mation modes.Λ is a K-vector containing the deformation
coefﬁcients. Varying the deformation coefﬁcients produces
various shapes from the learnt shape subspace, as shown in
Fig. 2 (panel: Category Level Shape Priors).

B. Discriminative Feature Extraction

Since our category-level models rely on keypoints for that
category, we need reliable discriminative feature extractors
that localize the corresponding keypoints in 2D images. For
the same, we adopt the stacked hourglass model introduced
in [17] and subsequently modiﬁed in [15].
C. Render Pipeline

Inspired by RenderForCNN [18], we implement our cus-
tomized render pipeline for generating huge amounts of
synthetic keypoint annotated chair images using a small set
of 3D annotated keypoints. We brieﬂy summarize the steps
in our render pipeline, and how we exploit its advantages
for learning 3D category-models as well as discriminative
2D feature extractors.

Render Pipeline for 3D Category-level Models: First, we
choose a collection of CAD models of chairs, comprising of
about 250 chairs sampled from the ShapeNet [25] reposi-
tory. For each chair, we synthesize a few (typically 8) 2D
images with predetermined viewpoints (azimuth, elevation,
and camera-tilt angles). Keypoints in these images are then
annotated (in 2D) manually, and then triangulated to 3D to
obtain 3D keypoint locations on the CAD model.

Since the models are already assumed to be aligned,
performing a Principal Component Analysis (PCA) over
the (mean-subtracted) 3D keypoint locations results in the
deformation basis (eigenvector obtained from PCA). This
constitutes the category-level model learning phase.

Blender [26] as the rendering engine. Apart from using the
RenderForCNN [18] framework to randomly sample view
parameters and generate 2D images with overlaid back-
grounds, we also perform a projection of the 3D keypoints to
2D using the same view parameters to obtain 2D keypoint
annotations for training the stacked hourglass architecture
[15]–[17] for keypoint localization.

Advantages of the Proposed Render Pipeline

• Only 2D annotation is required. Annotation on 3D CAD
models requires expensive labeling effort. We, however,
perform annotations on a small set of rendered 2D
images and triangulate them to 3D.

• Keypoint annotations will be available even for oc-
cluded parts. This is one major drawback of keypoint
localization architectures trained over real data. Since
there are no reliable estimates of keypoint locations
for occluded parts, these labels are not present in the
ground-truth in datasets such as PASCAL3D+ [27]. We
demonstrate that our models perform much better due to
the availability of occluded keypoint locations as well.
• Using only small volumes of labeled data, we can
generate millions of training examples for the keypoint
localization CNN.

An overview of the render pipeline developed is illustrated

in Fig. 2.

IV. OBJECT MEASUREMENT FACTORS USING
CATEGORY-MODELS

In this section, we describe how the category-models
thus learned can be incorporated into a monocular SLAM
backend. We ﬁrst introduce the notation we use throughout
the section. Tij ∈ SE(3) denotes a rigid-body transform
that takes a 3D point expressed in the camera frame at time
i and expresses it with respect to the camera frame at time j.
−1 (T∗ denotes a transformation matrix
Hence, Tij = TjTi
that transforms points from frame ∗ to the world frame W ).
Each such matrix Tij is a 4×4 matrix and takes the following
form.

Tij =

(cid:20)Rij
0

(cid:21)

tij
1

whereRij ∈ SO(3), tij ∈ R3

(2)

Each camera frame i is related to camera frame j in the
following manner. If iX denotes the 3D coordinates of a
world point wX in the ith camera frame, jX is given by
iX. We use π : R4 (cid:55)→ R2 that projects 3D
jX = Tij
homogeneous coordinates to 2D Euclidean coordinates. We
subsume the camera intrinsics fx, fy, cx, cy into the function
π.













X
Y
Z
1

π



=







fxX
Z + cx
fyY
Z + cy

(3)

Render Pipeline for 2D Feature Extraction

For training 2D feature extractors, we use the 3D key-
point annotated CAD models to synthesize 2D images with

We use Log(.) to denote the logarithm map that maps an
element of the group SE(3) to a corresponding element in
the exponential coordinates of its tangent space se(3).

A. 3D Pose-SLAM

We formally deﬁne the 3D pose-SLAM problem as fol-
lows. Given a set Z of relative pose measurements ˆTij
among robot poses i, j, where i, j ∈ {1..N }, estimate Ti
for all i ∈ {1..N } such that
the log-likelihood of the
observations (relative pose measurements) is maximized.
This reduces to the problem of minimizing the observation
errors (minimizing the negative log likelihood). We assume
that each relative-pose measurement ˆTij has an associated
uncertainty Σij.

min
Ti,i∈{1..N }

Epose =

(cid:88)

ˆTij∈Z

(cid:107)Log( ˆT−1

ij TjT−1

i

)(cid:107)Σij

(4)

One popular approach of minimizing the error in (4) is
the use of factor graphs [13], [21]. We adopt this approach
since it naturally extends to an incremental optimization
framework that enables online processing.

B. Object Observation Factors

Using the linear subspace model illustrated in (1), we
now design object observation factors that are suitable for
instance-independent monocular object-SLAM. Given 2D
locations of object keypoints s, we use the pose and shape
adjustment scheme proposed in [10] to lift the 2D keypoints
to 3D, thereby estimating the shape and pose of the object
from just a single image.

We assume that, from the ith pose, the robot observes
M objects (M could also be zero). The set of object
observations in frame i is denoted Oi, and each observation
in the set is indexed as ˆTOm
. We denote the number of
keypoints of the object category by K. The kth keypoint of
the mth object observed are denoted by sm
k . The pose and
shape of each object can then be computed by minimizing the
following keypoint reprojection error (see [10] for details).

i

(cid:32) M
(cid:88)

K
(cid:88)

(cid:107)π(K ˆTOm

i

(¯S + VΛm)) − sm

k (cid:107)2
2

+ρ(Λm)

(cid:33)

min

ˆTOm
i

,Λm

m=1

k=1

(5)
In the above equation, ρ(Λm) denotes an appropriate
regularizers (such as an L2 norm, for instance) to prevent
shape parameter (Λ) estimates from deviating too much from
the category-model.

We estimate each object’s shape (Λ) and pose ( ˆTOm
) in
each frame i by alternating minimization of the error term
in (5), with respect to the pose and shape parameters. If the
same object has been associated successfully across multiple
frames, we also exploit temporal consistency [15] for more
precise estimates.

i

C. Object-SLAM

The object pose observations arising from (5) now form
additional factors in the SLAM factor graph. If ˆTOm
denotes
the pose of object m with respect to the ith camera frame,
for each object node in the factor graph, the following pose
error is to be minimized.

i

TABLE I: Keypoint
the
stacked hourglass network trained using the proposed render
pipeline

localization accuracy (2D)

for

Test Accuracy

Train Accuracy

Synthetic only

Real only

Synthetic + Real

Synthetic data
Pascal3D+
Sequence 1 (Ours)

90.67%
75.99%
21.11%

85.90%
87.46%
66.18%

94.51%
93.4%
95.93%

min
Ti,i∈{1..N }

Eobj =

ˆTOm
i

,m∈{1..M }

N
(cid:88)

M
(cid:88)

i=1

m=1

(cid:107)Log(

(cid:16) ˆTi

Om

(cid:17)−1

T−1

i TOφ(m) )(cid:107)

(6)
Here, TOφ(m) denotes the pose of object Oφ(m) with
respect to the global coordinate frame, where φ(m) denotes
the data association function which assigns a globally unique
identiﬁer to each distinct object observed so far. The data
association pipeline is brieﬂy outlined in Section V.

Finally, the object-SLAM error that jointly estimates robot
poses as well as object poses from relative pose observations
is given by

E = Epose + Eobj

(7)

V. IMPLEMENTATION DETAILS

We use the publicly available GTSAM [21] framework
for constructing and optimizing the proposed factor graph
model. Robot pose observations are obtained from a visual
odometry/SLAM approach. We use odometry information
published by ORB-SLAM [1] for this purpose. However,
monocular SLAM inherently suffers from scale ambiguity,
i.e., the absolute scale of reconstruction cannot usually be
recovered. To recover actual scale, we use information from
a range sensor to estimate the height of the drone (camera)
above the ground. Thereby, using objects that lie on the
ground plane (chairs, for instance), we can compute the
absolute scale factor by backprojection via the ground plane
[10], [28]. Moreover, ShapeNet [25] CAD models for the
categories we use are available in metric scale. Hence, a
rough prior on object dimensions is available and can be
used to initialize the solution for faster convergence [10].

A. Object Detection and Data Association

We use the YOLO9000 [22] object detector to detect
objects of interest and perform non-maximum suppression.
Each bounding box detection is then passed to the keypoint
localization network.

Between successive frames, objects are tracked using a
greedy tracker based on the Hungarian algorithm. For long-
term tracking and for Object Loop Closure detection (OLC),
we use the estimated shape and pose parameters as costs in
the Hungarian algorithm. This has shown to be an extremely
simple, yet effective data association method in [29].

The object shape and pose are optimized using Ceres
solver [30] and are cast as observations into the factor graph.
The factor graph can be optimized in incremental or batch
mode, and with or without object loop closures.

Fig. 3: Qualitative results for instance retrieval. Query images and their retrieved CAD models are shown.

VI. RESULTS

A. Object-SLAM Evaluation

In this section, we present experimental results upon
evaluating various modes of operation of the proposed
object-SLAM approach and the render pipeline on multiple
real-world sequences. By explicitly modeling objects in a
SLAM framework, we achieve substantially lower object
localization errors over feature-based SLAM [1]. Also, we
highlight the use of discriminatively learned features that
enable us to obtain trajectory and object pose estimates even
in scenarios where monocular SLAM approaches fail, such
as strong rotational motion.
B. Dataset

To demonstrate object SLAM in a real-world setting,
we collected a dataset comprising of 4 monocular video
sequences from robots operating in ofﬁce and laboratory
environments. These sequences were collected from a micro
aerial vehicle (MAV) ﬂying at a constant height above the
ﬂoor. For one of the sequences, ﬁducial markers were placed
in the environment and were used to estimate ground truth
camera pose and object locations. For two other sequences,
no markers were placed in the environment, to deny any
undue advantage enjoyed by monocular SLAM. In these
sequences, all object locations were measured a priori and
this is used in evaluating the object localization accuracy.
There was a rotation-only run, where the MAV rotates
more-or-less in-place. In all these runs, we evaluate object
localization precision for ORB-SLAM [1] and for various
ﬂavors of the proposed object-SLAM approach.

A brief description of the dataset is as follows.
• Sequence 1 : An elongated loop with two parallel
sides exhibiting dominant straight motion (7.6 meters)
(ﬁducial markers were used for acquiring ground-truth).
• Sequence 2 : Smaller run with smoother turns (no

ﬁducial markers).

• Sequence 3 : 360◦ Rotation in place without any trans-

lation from origin.

• Sequence 4 : 2 meters forward, sharp 90◦ rotation

towards left, 4.2 meters forward

In all these sequences we consider chairs as the objects of
interest. For a fair evaluation, and to demonstrate the efﬁcacy
of the proposed object-SLAM system, we ensure that most
of the frames in the sequence contain various chair instances.

C. Render Pipeline

For the task of training CNNs to detect keypoints for the
chair category, we use our render pipeline to synthesize a
little over a million keypoint annotated images of various
models of chairs. We train the stacked hourglass [15], [17]

Fig. 4: Progress of training the hourglass CNN using the
proposed render pipeline. Loss per epoch when training on
synthetic data followed by ﬁnetuning on a mix of real and
synthetic images is illustrated here.

architecture on this synthesized dataset. We then ﬁnetune the
CNN on a smaller dataset that comprises of real chair images
from the PASCAL3D+ [27] dataset.

Keypoint localization accuracies for several conﬁgurations
of the hourglass network are shown in TABLE I. We see
that CNNs trained on synthetic data alone fail to generalize
to real data from our sequences. Similarly, training on real
data (from the PASCAL3D+ dataset) alone performs fairly
well on test samples from the same dataset, but fails to
generalize to other kinds of data, such as our sequence.
However, ﬁnetuning the CNN on a combination of both real
and synthetic data leads to better generalization. Fig. 4 shows
the decrease of loss with time when the best performing
approach from TABLE I is trained using our render pipeline.

D. Discussion

On the collected dataset, we evaluate the several variants
of the proposed object-SLAM approach, viz. batch mode
(the factor graph is constructed for the entire scene and is
optimized in one go), incremental mode (observations are
processed as they arrive). We also evaluate object-SLAM
with and without object-based loop closures. TABLE II
summarizes the results of these experiments.

For each of the approaches, we evaluate object localization
error (in meters), and also the accumulated drift
in the
trajectory in the X and Z directions. The accumulated drift
is computed only in cases where the robot returns to the
starting position at the end of the run. Signiﬁcant drifts in
the Z-direction occur in sequence 1 for ORB-SLAM [1], but
these are corrected by the object-SLAM system, regardless of
the presence or absence of object loop closures. In sequence
4, there is a strong rotation (a perpendicular turn), where
ORB-SLAM performs poorly.

Our discriminative features enjoy an advantage over
tracked features [1] in that they need to be visible in just a

TABLE II: Quantitative analysis of several variants of the proposed object-SLAM approach. Here, the best and worst object
localization errors refer to the errors in the most accurately localized and the most erroneously localized object respectively.
We also show the average object localization error and accumulated endpoint drifts, wherever applicable.

Sequence ID

Approach

Mode

# Objects

1

2

3

4

ORB-SLAM [1]
Ours (without object loop closure)

Ours (with object loop closure)

ORB-SLAM [1]
Ours (without object loop closure)

Ours (with object loop closure)

ORB-SLAM [1]

Ours (with object loop closure)

ORB-SLAM [1]

Ours (without object loop closure)

-
batch
batch
incremental
-
batch
batch
incremental
-
batch
incremental
-
batch
incremental

11

7

9

7

Object localization Error (metres)
Best
0.3162
0.2526
0.2193
0.2188
0.0607
0.0791
0.0738
0.072

Avg
2.8539
1.0318
0.779
0.7998
0.3734
0.3125
0.2419
0.2364

Worst
4.9535
2.7017
1.6584
1.6756
0.8734
0.7306
0.6005
0.5936

Drift of trajectory

Z direction (in meters)
4.3
2.051
0.804
0.79
0.22
0.19
0.04
0.04

X direction (in meters)
0.9051
0.18
0.326
0.209
0.6181
0.4309
0.13
0.13

ORB-SLAM Fails to initialize

0.0915
0.0825
0.1113
0.0661
0.0614

0.9998
1.0174
0.5993
0.4688
0.4678

0.521
0.5219
0.3657
0.3086
0.3051

0.0194
0.0045
0.101
0.055
0.059

0.0556
0.06
N/A
N/A
N/A

(a) Seq 1 with OLC

(b) Seq 1 without OLC

(c) Seq 2 with OLC

(d) Seq 2 without OLC

(e) Seq 3 without OLC (top)
and Seq 4 with OLC (bottom)

Fig. 5: Estimated Trajectories and Object Locations by ORB-SLAM and Object-SLAM with/without Object Loop Closure
detection (OLC)

single image to enable object measurements. We demonstrate
this in sequence 3 (cf. Fig. 6). In this sequence the robot
purely rotates about its origin. While ORB-SLAM [1] fails
to initialize for this sequence, the object-SLAM proposed
here is able to accurately localize all chairs in the scene.
The circle traced out by our object-SLAM systems has a
radius roughly equal to that of the drone used in the run.

The incremental version performs competitively, and in
cases, better, than the batch-mode object-SLAM. Loop clo-
sures based on object observations further boost the accuracy
of the proposed approach. For batch mode, we perform a
chordal initialization before optimizing the factor graph.

Fig. 5 shows plots of the trajectories estimated by ORB-
SLAM [1], as well as from object-SLAM. We also show
object location estimates overlaid on ground-truth object lo-
cations for the sequence. Sequences 1 and 2 are plotted with
and without incorporating object loop closure constraints, to
show that object loop closure further reduces endpoint drift.

E. Instance Retrieval

The proposed category-level model certainly achieves in-
stance independence, but instance retrieval itself may be of
use in several scenarios, such as Augmented Reality (AR).
The shape parameters estimated by our approach can be used
to guide an instance search over the keypoint annotated CAD
collection. Given a query image (2D), we run a K-Nearest
Neighbors search to retrieve the closest instance possible
from the CAD collection. In Fig. 3, we present results from
running a 5-nearest neighbor search and manually choosing
the closest instance.

These instances can then be used to render the objects in
the scene as well as the robot trajectory. One such rendering
for Sequence 3 is shown in Fig 6.

VII. CONCLUSIONS

In this paper, we have presented an approach for monoc-
ular object-SLAM that relies on category-speciﬁc models,
rather than relying on instance-speciﬁc models or generic

[7] N. S¨underhauf, F. Dayoub, S. McMahon, M. Eich, B. Upcroft, and
M. Milford, “Slam–quo vadis? in support of object oriented and
semantic slam,” 2015.

[8] M. Crocco, C. Rubino, and A. Del Bue, “Structure from motion with
objects,” in Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 2016, pp. 4141–4149.

[9] D. G´alvez-L´opez, M. Salas, J. D. Tard´os, and J. Montiel, “Real-time
monocular object slam,” Robotics and Autonomous Systems, vol. 75,
pp. 435–449, 2016.

[10] J. K. Murthy, G. S. Krishna, F. Chhaya, and K. M. Krishna, “Recon-
structing vehicles from a single image: Shape priors for road scene
understanding,” in Proceedings of the IEEE Conference on Robotics
and Automation, 2017.

[11] M. Z. Zia, M. Stark, and K. Schindler, “Towards scene understanding
with detailed 3d object representations,” International Journal of
Computer Vision, vol. 112, no. 2, pp. 188–203, 2015.

[12] S. Tulsiani, A. Kar, J. Carreira, and J. Malik, “Learning category-
speciﬁc deformable 3d models for object reconstruction.” IEEE trans-
actions on pattern analysis and machine intelligence, 2016.

[13] M. Kaess, H. Johannsson, R. Roberts, V. Ila, J. J. Leonard, and
F. Dellaert, “isam2: Incremental smoothing and mapping using the
bayes tree,” The International Journal of Robotics Research, vol. 31,
no. 2, pp. 216–235, 2012.

[14] D. M. Rosen, M. Kaess, and J. J. Leonard, “Rise: An incremental
trust-region method for robust online sparse least-squares estimation,”
IEEE Transactions on Robotics, vol. 30, no. 5, pp. 1091–1108, 2014.
[15] J. K. Murthy, S. Sharma, and M. Krishna, “Shape priors for real-time
monocular object localization in dynamic environments,” in Proceed-
ings of the IEEE Conference on Intelligent Robots and Systems, 2017.
[16] G. Pavlakos, X. Zhou, A. Chan, K. Derpanis, and K. Daniilidis, “6-
dof object pose from semantic keypoints,” in Proceedings of the IEEE
Conference on Robotics and Automation (In Press), 2017.

[17] A. Newell, K. Yang, and J. Deng, “Stacked hourglass networks for
human pose estimation,” in European Conference on Computer Vision.
Springer, 2016, pp. 483–499.

[18] H. Su, C. R. Qi, Y. Li, and L. J. Guibas, “Render for cnn: Viewpoint
estimation in images using cnns trained with rendered 3d model
views,” in The IEEE International Conference on Computer Vision
(ICCV), December 2015.

[19] C. Forster, Z. Zhang, M. Gassner, M. Werlberger, and D. Scaramuzza,
“Svo: Semidirect visual odometry for monocular and multicamera
systems,” IEEE Transactions on Robotics, vol. 33, no. 2, pp. 249–
265, 2017.

[20] R. K¨ummerle, G. Grisetti, H. Strasdat, K. Konolige, and W. Burgard,
“g 2 o: A general framework for graph optimization,” in Robotics and
Automation (ICRA), 2011 IEEE International Conference on.
IEEE,
2011, pp. 3607–3613.

[21] F. Dellaert et al., “Gtsam,” URL: https://borg. cc. gatech. edu, 2012.
[22] J. Redmon and A. Farhadi, “Yolo9000: Better, faster, stronger,” arXiv

preprint arXiv:1612.08242, 2016.

[23] R. Girshick, “Fast r-cnn,” in International Conference on Computer

Vision (ICCV), 2015.

[24] S. Tulsiani and J. Malik, “Viewpoints and keypoints,” in 2015 IEEE
Conference on Computer Vision and Pattern Recognition (CVPR).
IEEE, 2015, pp. 1510–1519.

[25] A. X. Chang, T. Funkhouser, L. Guibas, P. Hanrahan, Q. Huang,
et al.,
Z. Li, S. Savarese, M. Savva, S. Song, H. Su,
“Shapenet: An information-rich 3d model repository,” arXiv preprint
arXiv:1512.03012, 2015.

[26] Blender Online Community, Blender - a 3D modelling and rendering
package, Blender Foundation, Blender Institute, Amsterdam, 2017.
[Online]. Available: http://www.blender.org

[27] Y. Xiang, R. Mottaghi, and S. Savarese, “Beyond pascal: A benchmark
for 3d object detection in the wild,” in IEEE Winter Conference on
Applications of Computer Vision (WACV), 2014.

[28] S. Song and M. Chandraker, “Joint sfm and detection cues for
monocular 3d localization in road scenes,” in Proceedings of the IEEE
Conference on Computer Vision and Pattern Recognition, 2015, pp.
3734–3742.

[29] J. K. M. K. M. K. Sarthak Sharma, Junaid Ahmed Ansari, “Beyond
pixels: Leveraging geometry and shape cues for online multi-object
tracking,” in Proceedings of the IEEE Conference on Robotics and
Automation (In Press), 2018.

[30] S. Agarwal, K. Mierle, and Others, “Ceres solver,” http://ceres-solver.

org.

Fig. 6: Rendering objects estimated in a run where the robot
rotates in place. ORB-SLAM [1] fails to initialize due to
insufﬁcient parallax.

Fig. 7: Qualitative results on another object category (lap-
tops).

models. This is a new paradigm in the nascent ﬁeld of object-
SLAM research. The proposed category-speciﬁc models can
be adopted to many other such rigid objects, as long as data
for the corresponding category is available in the form of
aligned CAD models (See Fig. for an example). Future work
could focus on further reducing the extent of supervision
required to learn such category-speciﬁc models.

VIII. ACKNOWLEDGEMENTS

The authors acknowledge the support and funding from
Kohli Center for Intelligent Systems (KCIS) IIIT Hyderabad,
and Tata Consultancy Services (TCS) Innovation Labs India
for this work. We also acknowledge the help of Akanksha
Baranwal, Roopal Nahar, Danish Sodhi, Karnik Ram, and
Sarthak Sharma for their timely assistance.

REFERENCES

[1] M. J. M. M. Mur-Artal, Ra´ul and J. D. Tard´os, “ORB-SLAM: a
versatile and accurate monocular SLAM system,” IEEE Transactions
on Robotics, vol. 31, no. 5, pp. 1147–1163, 2015.

[2] J. Engel, T. Sch¨ops, and D. Cremers, “Lsd-slam: Large-scale di-
rect monocular slam,” in European Conference on Computer Vision.
Springer, 2014, pp. 834–849.

[3] N. S¨underhauf, T. Pham, Y. Latif, M. Milford, and I. D. Reid,
“Meaningful maps - object-oriented semantic mapping,” CoRR, vol.
abs/1609.07849, 2016. [Online]. Available: http://arxiv.org/abs/1609.
07849

[4] R. F. Salas-Moreno, R. A. Newcombe, H. Strasdat, P. H. Kelly, and
A. J. Davison, “Slam++: Simultaneous localisation and mapping at the
level of objects,” in Proceedings of the IEEE conference on computer
vision and pattern recognition, 2013, pp. 1352–1359.

[5] B. Mu, S.-Y. Liu, L. Paull, J. Leonard, and J. P. How, “Slam with
objects using a nonparametric pose graph,” in Intelligent Robots and
Systems (IROS), 2016 IEEE/RSJ International Conference on.
IEEE,
2016, pp. 4602–4609.

[6] S. Choudhary, L. Carlone, C. Nieto, J. Rogers, Z. Liu, H. I. Chris-
tensen, and F. Dellaert, “Multi robot object-based slam,” in Interna-
tional Symposium on Experimental Robotics.
Springer, 2016, pp.
729–741.

