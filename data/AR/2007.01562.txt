0
2
0
2

l
u
J

3

]
I

N
.
s
c
[

1
v
2
6
5
1
0
.
7
0
0
2
:
v
i
X
r
a

1

An Edge Computing-based Photo
Crowdsourcing Framework for Real-time 3D
Reconstruction

Shuai Yu, Xu Chen, Shuai Wang, Lingjun Pu, Di Wu

Abstract—Image-based three-dimensional (3D) reconstruction utilizes a set of photos to build 3D model and can be widely used in
many emerging applications such as augmented reality (AR) and disaster recovery. Most of existing 3D reconstruction methods require
a mobile user to walk around the target area and reconstruct objectives with a hand-held camera, which is inefﬁcient and
time-consuming. To meet the requirements of delay intensive and resource hungry applications in 5G, we propose an edge
computing-based photo crowdsourcing (EC-PCS) framework in this paper. The main objective is to collect a set of representative
photos from ubiquitous mobile and Internet of Things (IoT) devices at the network edge for real-time 3D model reconstruction, with
network resource and monetary cost considerations. Speciﬁcally, we ﬁrst propose a photo pricing mechanism by jointly considering
their freshness, resolution and data size. Then, we design a novel photo selection scheme to dynamically select a set of photos with
the required target coverage and the minimum monetary cost. We prove the NP-hardness of such problem, and develop an efﬁcient
greedy-based approximation algorithm to obtain a near-optimal solution. Moreover, an optimal network resource allocation scheme is
presented, in order to minimize the maximum uploading delay of the selected photos to the edge server. Finally, a 3D reconstruction
algorithm and a 3D model caching scheme are performed by the edge server in real time. Extensive experimental results based on
real-world datasets demonstrate the superior performance of our EC-PCS system over the existing mechanisms.

Index Terms—three-dimensional (3D) reconstruction, multi-access edge computing, photo crowdsourcing.

(cid:70)

1 INTRODUCTION

I N recent years, the advances in hardware technology have

induced the emergence of mobile immersive applications
(e.g., Augmented Reality (AR) [1] and 3D gaming [2]).
Generally, these applications require accurate, large-scale,
and dense 3D models of environments in (or close to) real-
time, thus are delay intensive and resource hungry. 3D
reconstruction [3], [4], [5] is a very well studied problem
in computer vision. Traditional image-based reconstruction
techniques [5], [6] require a mobile user to capture multiple
RGB images of the same object from multiple viewpoints.
Obviously, this may not be practical or time-consuming in
large-scale outdoor environments.

One key challenge for image-based 3D reconstruction
is to obtain a set of representative photos that best cover
the target area. As a novel sensing paradigm, photo crowd-
sourcing [7] which leverages the power of ordinary mobile
users for large-scale sensing, has become popular in recent
years. With photo crowdsourcing, photos taken by partici-
pants can be collected and processed in cloud server, and
thus facilitate a variety of image-based mobile applications.
However, reconstructing 3D models through cloud-based
photo crowdsourcing still faces the following challenges: i)
Large photo uploading overhead. Participants may have tons

•

•

•

Shuai Yu, Xu Chen and Di Wu are with the School of Data and Computer
Science, Sun Yat-sen University, Guangzhou 510275, China (Email:
yushuai, chenxu35 and wudi27@mail.sysu.edu.cn).
Shuai Wang is with the Department of Electrical and Electronic Engi-
neering, Southern University of Science and Technology, Shenzhen, China
(Email: wangs3@sustech.edu.cn).
Lingjun Pu is with the College of Computer Science, Nankai University,
Tianjin, China (Email: pulingjun@nankai.edu.cn).

of real-time captured photos for a target area and most
of the photos may contain duplicated information. Thus,
uploading all the photos to remote cloud server will be
unnecessary and consume tremendous network resources;
ii) Long photo collection delay. Achieving omnidirectional
viewpoints of target area through ordinary mobile users
is time-consuming. The cloud server may wait a very long
time until the photos with all viewpoints of target area are
achieved; iii) Limited shooting angles of participants. Ordinary
mobile users with hand-held mobile devices are limited
by their geographic location. Some special shooting angles
are impossible to reach. For example, participants on the
ground can not photograph the roof of a building; and
iv) Risk of privacy leakage. For the participants, their photos
usually contain sensitive personal information (e.g., location
and face information). Thus, participants may hesitate to
upload their photos to remote cloud server.

To this end, multi-access edge computing (MEC) [8],
[9], [10], has been proposed by the European Telecommu-
nications Standards Institute (ETSI), which is viewed as an
ideal solution to address the above challenges. In the MEC
architecture, distributed MEC servers are deployed close to
end users that provide cloud-computing capabilities and IT
services with ultra-low latency, high bandwidth and privacy
protection.

In this paper, we propose a novel framework for photo
crowdsourcing in the 5G MEC network environments, in or-
der to fully exploit the massive mobile and IoT devices (e.g.,
mobile phones, surveillance cameras, UAVs) and MEC re-
sources in proximity for real-time 3D reconstruction. Specif-
ically, our edge computing-based photo crowdsourcing (EC-

 
 
 
 
 
 
PCS) framework mainly consists of: i) a photo/participant
selection module, that can select a set of photos with mini-
mum monetary cost by leveraging photo crowdsourcing; ii)
a 3D reconstruction module, that can reconstruct required
3D models based on the selected photos in the MEC server
side; and iii) a data caching module, that can dynami-
cally decide if a reconstructed 3D reconstruction should be
cached in the MEC server. The major contributions of this
paper are summarized as follows:

• To guarantee good performance of real-time 3D recon-
struction, it is essential to select sufﬁcient and high
quality fresh photos from participants in proximity (i.e.,
ubiquitous 5G mobile and IoT devices in this paper). To
this end, we ﬁrst advocate a monetary-based incentive
scheme by pricing photos according to its data size,
resolution, freshness and the wireless channel states of
their associated participants.

• A photo selection scheme is proposed to select a repre-
sentative set of photos with minimum monetary cost to
satisfy the target coverage requirement. While ﬁnding
the optimal photo set with the minimum monetary cost
is proven to be NP-hard, we propose a greedy-based
approximation algorithm to obtain a near-optimal solu-
tion, and further theoretically characterize its approxi-
mation ratio.

• When a representative set of photos is selected, the
next question is how to efﬁciently utilize the limited
network resources for fast photo uploading. We thus
design an optimal resource allocation scheme in order
to minimize the maximum photo uploading delay.

• Last but not least, the effectiveness of our EC-PCS
framework is evaluated through extensive experiments
based on real-world datasets, which demonstrates the
superior real-time performance of EC-PCS solution
over existing schemes.
The rest of this paper is organized as follows. Section 2
introduces the related works most relevant to this paper. In
Section 3, we present an overview for our proposed edge
computing-based photo crowdsourcing (EC-PCS) frame-
work. Section 4 gives the details of the photo/participant
selection module for our EC-PCS framework. Section 5
introduces the 3D reconstruction module and the model
caching module. Simulation and experimental results are
presented in Section 6. Finally, conclusions are drawn in
Section 7.

2 RELATED WORKS

2.1 Real-time 3D Reconstruction

2

for 5G-based mobile applications. For example, authors
in [11] propose an on-device live 3D reconstruction pipeline
to meet the requirements of real-time 3D reconstruction
scenarios (e.g., museums). Most of existing real-time 3D
reconstruction works are trajectory-based, which means that
a mobile user walks around the target area with a hand-
held device and reconstructs the environment. For example,
authors in [5] present an interactive 3D reconstruction sys-
tem that can quickly build 3D models of indoor and large-
scale outdoor environments. In the system, a mobile user
walks around a building with a Google Tango Tablet and
reconstructs the scene, thus allowing the user to directly
add data where it is needed. Authors in [6] design an
online game PhotoCity that trains its players to take photos
from multiple speciﬁc viewpoints and in great density. The
objective of such game is to create 3D building models by
collecting a set of photos that densely cover the target area
from many different viewpoints.

2.2 Photo Crowdsourcing

Image-based 3D reconstruction requires to collect sufﬁcient
and high quality fresh photos that best cover the reconstruc-
tion target area. Photo crowdsourcing [7] (also known as
mobile crowd photography [12], [13]) can be regarded as an
ideal tool for photo collection, which requires large amounts
of participants to contribute their photos via rich built-
in sensors of their hand-held devices. To guarantee good
performance of photo crowdsourcing results, it is essential
to select a proper set of photos. Authors in [7] propose a
photo selection mechanism for photo crowdsourcing. The
main objective is to select a set of photos to best cover the
target area under limited network resources. To this end,
they ﬁrst deﬁne photo utility based on its metadata (i.e.,
photo properties, such as location, orientation and ﬁeld of
view), in order to measure how well a target area is covered
by a given set of photos. Then, they design an efﬁcient
photo selection algorithm that can select photos with the
largest utility under a resource constraint. Note that the
photo selection process is based on metadata instead of real
images, thus reducing photo transmission overhead. Real-
time crowdsourcing is another important issue for photo
crowdsourcing system. Authors in [14] propose an optimal
participation and reporting decisions (OPRD) algorithm to
support delay-sensitive mobile crowdsensing applications.
The objective is to jointly optimize participation and report-
ing decisions for mobile users, and maximize the reward
for service provider. In addition, they consider the data
collection through cellular or Wi-Fi networks.

Image-based 3D reconstruction technology [3] provides an
efﬁcient and low-cost solution to generate 3D models only
with a set of photos from multiple viewpoints. Although
such reconstruction technology is less accurate compared to
some laser scanning based technologies (e.g., simultaneous
localization and mapping (SLAM) [4]), it is easier to be
popularized with much less effort and cost.

In the 5G era, many emerging applications (e.g., aug-
mented reality (AR) [1]) that require 3D model of objective
can beneﬁt from immediate feedback and low cost. Thus,
constructing 3D model in (or close to) real-time is critical

2.3 Edge Computing

In the
edge/fog computing architecture, distributed
edge/fog servers are deployed close to end users that
provide cloud-computing capabilities and IT services with
ultra-low latency, high bandwidth, reliability and privacy
protection. Low latency task execution is a hot issue for
researchers. For example, authors in [15] study the latency-
driven cooperative task computing in fog computing en-
vironments. In their proposed framework, computational
tasks can be jointly processed across multiple F-RAN nodes
and near-range communications at network edge. They

3

Figure 1: Proposed edge computing-based Photo Crowdsourcing (EC-PCS) framework.

propose a latency-driven cooperative task computing al-
gorithm to minimize the task execution time, and charac-
terize the tradeoff between communication and computing
across multiple F-RAN nodes. Deploying deep learning
algorithms in edge/fog computing is another concern for
researchers. Authors in [16] develop robust mobile crowd
sensing (RMCS) framework that integrates deep learning
based data validation and edge computing based local
processing. The main objective is to provide robust data
validation and local data processing for MCS by leverage
MEC. Authors in [17] generalize the winning price model
to incorporate the deep learning models with different dis-
tributions. To this end, they propose an algorithm to learn
from the historical bidding information, where the winning
price are either observed or partially observed.

In this paper, we will present a novel photo crowdsourc-
ing based 3D reconstruction method in 5G multi-access edge
computing (MEC) environments. MEC servers can quickly
collect RGB images from ubiquitous 5G mobile and IoT de-
vices in proximity that are equipped with built-in cameras.
Thus, omnidirectional 3D models can be reconstructed in
real-time. Compared with the traditional (e.g., centralized
cloud based) photo crowdsourcing schemes (e.g., [7], [12],
[13], [14]), we focus on both real-time photo transmission
on the network side and the selection of high quality fresh
photos on the mobile user side, in order to realize real-time
3D reconstruction. Indeed, our proposal also has the follow-

ing beneﬁts: i) real-time data aggregation and processing,
since edge server is close to data sources, ii) reducing pri-
vacy leakage risks, since sensitive information is processed
locally at edge servers, and iii) enabling location-aware real-
time 3D services and applications.

3 EC-PCS OVERVIEW
In this section, we will ﬁrst illustrate the framework of
our edge computing-based photo crowdsourcing (EC-PCS).
Then, we present two illustrative examples for the EC-
PCS applications in real-world scenario. At last, the system
model will be shown.

3.1 System Framework

The framework of our edge computing-based photo crowd-
sourcing (EC-PCS) is shown in Fig. 1. It consists of three
main modules, which are photo/participant selection mod-
ule, 3D reconstruction module and 3D model caching mod-
ule, respectively. At the beginning, a mobile requester has
a sensing task (step 1), thus takes a photo of the objective(s)
in target area from his viewpoint and sends it to a nearby
MEC server (step 2). The MEC server receives the photo,
ﬁrst feeds it to the 3D model caching module (details will
be shown in Section 5.2). The 3D model caching module
detects the photo’s feature by leveraging the scale-invariant
feature transform (SIFT) algorithm [18], in order to ﬁnd if

3D	Model	RequestMEC	ServerFindCache?Participants(resourceful)	3DReconstructionModuleWirelessInterfaceProcessingUnit（GPU）Where	toCache?BackhaulRemoteCloud13storageUnit3D	ModelCachingModulePhoto/ParticipantSelection	ModulePhoto	SelectionSchemeSelectedPhotos	673D	Model	Requesters(resource-poor)	Sensing	Task2Sensing	AreaYNPhotoInformationUploadingPhoto	InformationRequirementsPhotoUploading3D	ReconstructionScheme45RemoteEdge3DModel83D	Model	DeliveryResource	AllocationSchemePhoto	UploadingRequirementsMonetary-basedIncentive	Scheme3D	Model	CachingSchemethe required 3D model is already cached (step 3) in the
server. If the required 3D model is i) cached locally, the MEC
server sends the model to the requester immediately (step
8), or ii) not cached, the MEC server sends the request to the
photo/participant selection module. The photo/participant
selection module (details will be shown in Section 4) consists
of a photo selection scheme, a monetary-based incentive
scheme and a resource allocation scheme, responsible for
select a set of proper photos from edge participants (i.e.,
the ubiquitous 5G mobile and IoT devices such as mobile
phones, surveillance cameras and UAVs, as shown in Fig. 1)
to reconstruct the required 3D model. To this end, the
MEC server ﬁrst broadcasts photo information uploading
requests to all the edge participants (step 4), in order to
collect the photos’ information within the sensing area. After
receiving the information, MEC server selects an (near) opti-
mal set of photos based on the photo selection scheme, and
sends the photo uploading request to the edge participants
that have selected photos. Motivated by a monetary-based
incentive scheme, the selected edge participants join the
sensing task, and upload the selected photos to the MEC
server (step 5). Based on a resource allocation scheme, the
MEC server receives the selected photos and feeds them
to the 3D reconstruction module. The 3D reconstruction
module (details will be shown in Section 5) responsible
for reconstructing the required 3D model according to a
3D reconstruction scheme. Note that the scheme in our
implement later is based on the VisualSFM [19], and we
also use GPU to speed up the reconstruction process. After
generating the required 3D model, the MEC server not only
sends the model to the mobile requester (step 8), but also
has to decide if the model is worth caching locally (step 7).
The decision making process is determined by a 3D model
caching scheme, as shown in Fig. 1.

Note that in the EC-PCS design later on, we allow the
requester to set the target area coverage requirement as
per its need. Thus, when the number of edge participants
is small, the requester can ﬂexibly either increase its price
or lower its coverage ratio requirement according to its
application demand. We should emphasize that when none
or few fresh photos are available from the mobile and IoT
devices in proximity and user’s application is delay tolerant,
the MEC can forward the user’s request to the remote cloud,
and then the operation turns into the traditional cloud-based
photo crowdsourcing mode. Thus, EC-PCS can be beneﬁcial
and complementary to existing approaches.

3.2 Illustrative Examples

Use Case 1: 5G Mobile Application Scenario

For the emerging 5G mobile applications, an illustrative
case study is the mobile augmented reality (AR) game that
creates a 3D environment for the game players. Assume
that a mobile user Bob (mobile requester) is now playing
a AR game using Google glass in the square of the Notre
Dame de Paris, as shown in Fig. 1. Note that running such
mobile application requires the 3D model of objective (i.e.,
the Cathedral) in real-time. Due to the limited computation
and battery capacities of Google glass, Bob can not generate
the required 3D model locally. Moreover, Bob is in the front
of the objective with limited ﬁeld of vision, and impossible

4

Figure 2: EC-PCS in the disaster monitoring & recovery.

to obtain the whole 3D model of the Cathedral. Thus, Bob
has to send a 3D model request to a nearby MEC server
by taking a photo of the objective. If the MEC server can
not ﬁnd the 3D model of the Cathedral locally at its cache,
the MEC server has to recruit ubiquitous 5G mobile and
IoT devices (i.e., edge participants, such as smartphones,
UAVs and surveillance cameras, as shown in Fig. 1) to
contribute their photos for the sensing task. Note that the
MEC server would collect tons of real-time captured photos
if all the edge participants upload all their photos. Thus,
uploading all these photos is not necessary and inefﬁcient,
a representative subset is preferred. One the other hand, the
edge participants would willing to join the sensing task for
the following two reasons: 1) inspired by a monetary-based
incentive scheme, Bob will pay some money for the selected
photos, 2) privacy protection for the selected photos, the
photos will be processed at
instead of
uploading their sensitive photos to the remote cloud server,
thus reduce the risk of privacy leakage. After receiving the
selected photos, the MEC server performs 3D reconstruction
and use GPU to speed up the process. At last, the MEC
server sends the required 3D model to Bob, and decides if
the model worth caching locally for further reuse.

the edge side,

Use Case 2: Disaster Monitoring & Recovery Scenario

Once again, we take the Notre Dame Cathedral as an ex-
ample. The famous building went up in ﬂames on April 15,
2019, as shown in Fig. 2. From the perspective of ﬁreﬁghters,
they are urgent to know the latest ﬁre behavior: where and
how many are the ignition points, if structure of the building
has been damaged, etc. Thus, every moment’s 3D model
of the cathedral is required in real time. On the one hand,
from the perspective of tourists and residents around the
cathedral, they would take photos all the time and share
the photos on social networks. In such disaster scenario,
it makes sense to collect photos from the peoples and the
surveillance cameras around the cathedral by leveraging our
EC-PCS, in order to provide latest 3D model to the ﬁreﬁght-
ers in real time. Note that in the above photo crowdsourcing
scenario, the freshness and viewpoint of each photo play
key roles in photo selection. To this end, our EC-PCS selects
photos according to the photo’s coverage, freshness, data
size, resolution and the wireless channel states of their

Table 1: Key Notations

Symbol

Deﬁnition

5

M = {1, 2, ..., M }

The set of edge devices (EDs).
The wireless
portfolio for the EDs.

resource allocation

dm

Lm

pu
m

SNRm

B = {B1, B2..., BM }
Pm={Pm,1, Pm,2, ..., Pm,N } The photo set of edge participant
(i.e., ED) m.
The Signal to Noise Ratio (SNR) be-
tween edge device m and the MEC
server.
The transmit power of the edge de-
vice m.
The distance between edge device m
and the MEC server.
The current location for edge partic-
ipant m.
The data size (in MB) of photo Pm,n.
When and where the photo Pm,n is
taken.
The orientation (i.e., viewing direc-
tion) of camera when the photo
Pm,n is taken.
The ﬁeld of view of photo Pm,n.
How far the camera of edge partici-
pant m can see.
The price of photo Pm,n.
The resolution of photo Pm,n.
The target area of a 3D reconstruc-
tion task.

Gm,n
ρm,n
AT ar

tm,n, lm,n

−−−→
dm,n

Dm,n

ϕm,n

rm,n

associated participants.

3.3 System Model

In this section, we will introduce the system model of the
proposed EC-PCS. For ease of reference, we list the key
notations of our system model in TABLE. 1.

3.3.1 Network Model

The EC-PCS framework is composed of one MEC server
and a set of edge devices M = {0, 1, 2, ..., M } (i.e., 5G
mobile and IoT devices) in the sensing area. Without loss
of generality, let m = 0 (m ∈ M) denote the mobile
requester, and m = 1, 2, · · · , M (m ∈ M) represent the M
edge participants. The edge devices can establish 5G cellular
connections with the MEC server, and the connections are
based on the orthogonal frequency division multiple-access
(OFDMA) [20]. Since the edge devices within the cover-
age of MEC server occupy different frequency subcarriers,
these devices would not interfere with each other under
OFDMA. In this paper, a total bandwidth of B is available
to the edge devices for the sensing task. Moreover, let Bm
(m ∈ M) denote the bandwidth that is allocated to edge
device m, and B = {B1, B2..., BM } represents the resource
allocation portfolio of all the edge devices. Thus, we have
(cid:80)M

m=1 Bm = B.
Based on the above network model, the maximum up-
link rate in (bps), achievable for an edge device m (m ∈ M)
during photo uploading procedure, over an additive white
Gaussian noise (AWGN) channel, can be expressed as fol-
lows:

rul
m = Bm log2 (1 + SNRm) ,

(1)

Figure 3: Photo Coverage area for a camera.

where SNRm denotes the Signal to Noise Ratio (SNR) be-
tween edge device m and the MEC server. More speciﬁcally,

,

(2)

SNRm =

m|2
mN0

pu
m|hul
Γ(gul)dβ
where pu
m denotes the transmit power of the edge device
m, dm is the distance between edge device m and the
MEC server, and N0 represents the noise power. On the
other hand, hul
m denotes the channel fading coefﬁcient (in
Rayleigh-fading environment) between edge device m and
the MEC server, with β being the path loss exponent. Lastly,
the function Γ(BER) = − 2ln(5BER)
is the minimum SNR
threshold that achieves the desired target bit error rate
(BER), and gul refers to the target uplink BER. Notice that we
assume that these parameters are not controllable, similar to
the assumptions made in [21].

3

3.3.2 Photo properties
Assume that each edge device m can store at most N
photos. Let Pm={Pm,1, Pm,2, ..., Pm,N } represents the photo
set of edge participant m. We adopt a parameter tuple
−−→
dm,n, rm,n} (Im,n ∈ Im)
Im,n={Lm, Dm,n, tm,n, lm,n, ϕm,n,
to characterize the properties for the photo Pm,n, where
Lm is the current location for edge participant m, Dm,n
represents the data size (in MB) of photo Pm,n. As shown
−−→
dm,n and rm,n are metadata [7]
in Fig. 3, tm,n, lm,n, ϕm,n,
of photo Pm,n, where tm,n and lm,n denote when and
−−→
dm,n is the orientation (i.e.,
where the photo is taken. Vector
viewing direction) of camera when the photo is taken. ϕm,n
represents ﬁeld of view of photo Pm,n, such angle specifying
how wide the camera can see. Range rm,n speciﬁes how far
the camera can see. Note that the above photo properties
can be obtained from the APIs and built-in sensors of most
mobile devices [7]. The properties can also be estimated by
VisualSFM algorithm [19].

4 PHOTO/PARTICIPANT SELECTION MODULE
As stated earlier, the main function of photo/participant
selection module is to select a representative set of photos
for image-based 3D reconstruction by leveraging photo
crowdsourcing. In the EC-PCS, the MEC server recruits a
large number of participants to collect photos. Moreover, the
participants may have tons of real-time captured photos for

φm,nlm,nrm,ndm,nPm,ntm,na target area and most of the photos may contain duplicated
information. It will be inefﬁcient and time consuming to
upload all the photos to the MEC server. Thus, it makes
sense to balance the computation overhead (i.e., 3D recon-
struction) and communication cost (i.e., photo uploading).
To this end, we will present a monetary-based incentive
scheme, a photo selection scheme and a resource allocation
scheme for the photo/participant selection module.

4.1 Monetary-based Incentive Scheme

In the photo crowdsourcing process, the MEC server would
collect photos from multiple edge participants. However,
edge participants are reluctant to share their photos due to
the lack of sufﬁcient incentives. On the one hand, participat-
ing in the photo crowdsourcing task may incur additional
costs for edge participants, such as computation, communi-
cation, and energy overhead on their devices. On the other
hand, the collected photos usually contain sensitive infor-
mation, such as location information and face information.
Therefore, it is conceivable that edge participants will not
participate in this photo crowdsourcing task, unless they
are properly motivated.

Paying for selected photos in photo crowdsourcing is the
most intuitive incentive. Edge participants who are willing
to make some money can sell their photos for the crowd-
sourcing task. Thus, it is critical to pricing the photos. Note
that pricing the photos (also be known as deﬁning the photo
utility) is a key issue in photo crowdsourcing schemes [7],
[13], and is decided by the main objective of the photo
crowdsourcing scheme. Since the main objective of the EC-
PCS is to select a proper set of photos that can minimize
the 3D reconstruction. The photo quality (i.e., resolution and
freshness) and photo transmission overhead (i.e., photo data
size and wireless channel state) should be jointly considered.
Thus, we adopt a heuristic pricing scheme of photo Pm,n
(m ∈ M, n = 1, 2, ..., N ) as follows:

Gm,n = ω ·

ρm,n(t0 − tm,n)
Dm,n SNRm

,

(3)

where Gm,n and ρm,n represent the price and resolution
of photo Pm,n, ω is a price scaling factor that can be set
by the task requester (e.g., as per its budget and coverage
requirement). t0 is the current system time, thus t0 − tm,n
represents the freshness of photo Pm,n.

Such scheme quantiﬁes the price for the photos, where
photos’ freshness, resolution and data size, as well as their
associated edge participants’ wireless channel states are
jointly considered. The main objective of this pricing strat-
egy is to evaluate each photo’s contribution for the photo
selection scheme in the next step. Note that our primary fo-
cus of this study is the system performance optimization of
EC-PCS via efﬁcient photo selection and network resource
allocation, and other pricing mechanisms for incentivizing
participants can also be applied in our framework.

4.2 Photo Selection Scheme

During photo crowdsourcing process, photo selection is
performed by the MEC server to obtain a photo set with
certain coverage considering photo uploading constraints.
Note that the edge participants (e.g., UAVs and Surveillance

6

Figure 4: Locating target area by crowdsourced photos.

Cameras) usually contain tons of real-time captured photos
with varied distances to the objective, and different shooting
angles in the sensing area. Due to the limited computation
and communication resources, it is inefﬁcient and unneces-
sary to upload all the photos of the edge participants. In
this work, we consider a low-overhead photo information
uploading scheme, similar to [7]. All the edge participants
need only to upload their photo properties Im to the MEC
server, in order to: i) locate the target area for the objective,
and ii) provide photo information for a photo selection
mechanism.

4.2.1 Locating the Target Area
Although the photos from different edge participants have
different locations and different shooting angles, they all
prone to shoot towards the target area. For example, multi-
ple tourists in the Notre Dame square prone to shoot photos
of the cathedral with their hand-held devices. Therefore,
the location of target area can be estimated by calculating
the most overlapped areas of crowdsourced photos [22], as
shown in Fig. 4. In this paper, we extend the 2D InstantSense
scenario [22] into our 3D sensing scenarios, where edge par-
ticipants collaborate to cover different aspects of the target
area. Assume that the 3D sensing space can be divided into
G3 grids where the length, width and height of each grid
are all set to be 1m. Let a set G={gi,j,k} (i, j, k = 1, 2, ..., G)
denote the grid set of the sensing space, and ai,j,k represent
binary indicator variables of gi,j,k. ai,j,k = 1 indicates grid
gi,j,k is in the target area, and ai,j,k = 0, otherwise. Since
the shooting direction of each photo has the maximum
probability of passing through the target area, the grids have
different number of times covered by photos. Given a pre-
deﬁne threshold of number of coverage, the set of grids
AT ar that covered by the target area can be estimated as
follows:

AT ar = {gi,j,k},
ai,j,k = 1,
i, j, k = 1, 2, ..., G.

(4)

When a target area AT ar is determined, the aspects of the
target area that is covered by a photo Pm,n can be obtained
as AT ar
m,n. Note that the sets AT ar
m,n (m = 1, 2, ..., M ; n =
1, 2, ..., N ) are the subsets of AT ar.

4.2.2 Cost-aware Photo Selection
Since the performance of 3D reconstruction relies heavily
on the quality of selected photos, we should select photos

RequesterParticipantsTarget	AreaLowHighThresholdSensingAreathat best cover the target area. Note that the selected photos
can be: i) the photos just captured by edge participants, or
ii) relevant photos stored in the participants’ albums. Thus,
we must consider the freshness of the photos, in order to
depict the most recent state of the target area. Moreover,
edge participants are reluctant to upload their personal
photos. The mobile requester has to pay some money to
the participants. The challenge faced in this process is that
the selected photo set should satisfy the required target area
coverage with the minimum monetary cost. To this end, the
optimization problem for the photo selection scheme can be
summarized as follows:
(cid:88)

P ∗ = argmin

Gm,n,

Pm,n∈P ∗
| ∪m∈M,Pm,n∈Pm AT ar

m,n| ≥ η · |AT ar|,

s.t.

(5)

where P ∗ is the optimal (i.e., selected) set of photos, η ∈
(0, 1] represents the coverage ratio factor, |A| denotes the
number of elements in set A. Note that the constraint in (5)
guarantees the selected photos must cover at least η of the
target area.

Theorem 1. The cost-aware photo selection problem in (5) is
NP-hard.

The detailed proof is provided in Proof A of this paper.

The key idea is to show that our problem in (5) can be
reduced from a vertex cover problem [23], which is also NP-
hard. Thus, we utilize an approximation algorithm based on
a greedy strategy [24] to obtain a near-optimal set of photos.
Our greedy-based algorithm is listed in Algorithm 1.

The main principle of Algorithm 1 is to iteratively ﬁnd
the best photo which has the maximum value of number
of covered grids divided by monetary cost. Then, add the
photo to the set of selected photos (i.e., P ∗). The algorithm
stops when the minimum coverage requirement η · |AT ar| is
achieved. The time complexity for the algorithm is O(n2).

We can theoretically characterize the approximation ratio
(i.e., the ratio of the solution by the proposed algorithm over
the optimal solution in the worst case) of the Algorithm 1 as
follows:

Theorem 2. Algorithm 1 for the cost-aware photo selection
problem achieves an approximation ratio of F(cid:100)η·|AT ar|(cid:101), where
Fn =

n
(cid:80)
i=1

1
i .

The detailed proof is provided in Proof B of this paper.
Numerical results in Section 6 corroborate the superior
performance of Algorithm 1.

4.3 Network Resource Allocation Scheme
Once the set P ∗ is determined, the edge participant m (m ∈
M) needs to upload a set {Pm,n, Pm,n ∈ P ∗} of photos in
its local album. As a result, the uploading delay T u
m for edge
participant m to upload its selected photos can be expressed
as follows:

T u
m(B) =

(cid:80)

Pm,n∈P ∗ Dm,n
Bm log2 (1 + SNRm)

.

(6)

To achieve real-time 3D reconstruction, we have to minimize
the global photo uploading delay. With the expression of

Algorithm 1 The greedy-based photo selection algorithm.

Input: The set of photos {Pm,n}, (m ∈ M, n = 1, 2, ..., N );

7

for Pm,c in Pm,n do

if f lagm,c =false then

Initialize: f lagm,n=false, U=AT ar from all Pm,n
while c > 0 do

The price of photo Pm,n, Gm,n;
Output: A set of selected photos, P ∗;
1: function GREEDY(Gm,n, Pm,n)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
end for
12:
end while
13:
ﬁlter the photos where f lagm,n=false
14:
return P ∗
15:
16: end function

run count_covered_grids(Pm,c, U )
weight=covered_grids/Gm,c
choose the max weight Pm,max
U −points in Pm,max
f lagm,max =true

end if

T u
m, the global photo uploading delay of the EC-PCS frame-
work is given by max {T u
M (B)}. Therefore, to
achieve real-time 3D reconstruction, the key is to minimize
the uploading delay by designing the bandwidth B:

1 (B), · · · , T u

B∗ = argmin

max {T u

1 (B), T u

2 (B), · · · , T u

M (B)} ,

B

s.t.

M
(cid:88)

m=1

Bm = B.

(7)

With introduction of a slack variable t such that t ≥
max {T u
M (B)}, the min-max resource al-
location problem in (7) can be equivalently converted into:

2 (B), · · · , T u

1 (B), T u

t,

min
B,t
s.t. hi(B, t) ≤ 0,
g(B) = 0,

i = 1, 2, ..., M,

(8)

where hi(B, t) = T u
m=1 Bm − B. By
deriving the KKT conditions of problem (8), we can obtain
the closed-form solution for the original problem as follows:

i (B) − t and g(B) = (cid:80)M

Theorem 3. The optimal solution to the resource allocation
problem in (7) is B∗ = {B∗

M }, where

1 , B∗
(cid:80)

2 , ..., B∗
Pm,n∈P ∗ Dm,n
log2(1 + SNRm)
(cid:32) (cid:80)

Pm,n∈P ∗ Dm,n
log2(1 + SNRm)

B∗

m =

B ·

(cid:80)M

m=1

(cid:33) .

(9)

The detailed proof is provided in Proof C of this paper.
Theorem 3 indicates that the bandwidth allocation is not
only related to channel conditions, but also determined
by the photo selection. This is in contrast to traditional
communication systems where channel quality is the only
consideration. The allocated bandwidth to a particular user
is linearly proportional to its photo sizes and number of se-
lected photos. The bandwidth is also inversely proportional
to the logarithm of SNR.

8

Table 2: Data Set Parameters.

Data Set
GATE
TEMPLE

Data Size
340MB
719MB

#Photos
68
141

Table 3: Network Parameters.

Parameter
M

SNRm
B

Value
10
(0, 30] dB
10 MHz

Parameter
N
t0 − tm,n
ω

Value
20
(0, 10] min
0.1

mental environments. Then, we examine the effectiveness of
the photo selection scheme and network resource allocation
scheme, respectively.

6.1 Experimental Setup

In our simulations, we use a desktop as the MEC server,
which has a GPU of Nvidia Geforce GTX 1050. The CPU
is Intel i7-7700 with 8G memory. Software environment
we utilized are i) MATLAB R2018b to simulate the edge
computing network environments and ii) VisualSFM [19]
to perform 3D reconstruction. We evaluate the performance
of our EC-PCS framework based on two real-world photo
datasets: old school gate of Tsinghua University (GATE,
as shown in Fig. 5 (a)) and Zhantan Temple (TEMPLE, as
shown in Fig. 5 (b)) [29]. The main difference between the
two datasets is the different number of objectives in the
target area. Note that GATE has only one objective (i.e.,
the gate) in the target area, whereas TEMPLE has three
objectives (i.e., temples). Thus, TEMPLE has a more com-
plex 3D model than GATE, results in higher reconstruction
cost. TABLE 2 shows the parameters of the two datasets,
and TABLE 3 reports the parameters of simulated network
environments.

6.2 Performance for Photo Selection Scheme

We implement our photo selection scheme for EC-PCS, and
compare it with respect to two benchmark related policies,
namely:

• Random Photo Selection Scheme (RPSS):

Photos are randomly selected from the raw data set.

• Clustering-based Photo Selection Scheme (CPSS):

As introduced by [13], photos are clustered into groups,
and the scheme selects one photo from each cluster.
The main objective of our photo selection scheme is to
select a proper set of photos that can: i) minimize the mone-
tary cost, and ii) achieve a certain target area coverage. Fig. 6
and Fig. 7 illustrate the quality of reconstructed 3D models
versus different coverage ratio parameter η. TABLE. 4 and
TABLE. 5 report the corresponding reconstruction costs,
including the number of selected photos and total monetary
cost, respectively.

From the experimental results, we can ﬁnd that achiev-
ing a 100% coverage is not necessary and expensive. Note
that Fig. 6 (c) (i.e., the 3D model whose η = 99.5%) and
Fig. 6 (d) (i.e., the 3D model whose η = 100%) have a very
similar reconstruction quality. However, the method in Fig. 6

(a) Old school gate of Tsinghua Uni-
versity.

(b) Zhantan Temple.

Figure 5: Two real-world photo datasets [29].

AND

3D MODEL

5 3D RECONSTRUCTION
CACHING MODULES
5.1 3D Reconstruction Module
When the MEC server receives the set of selected photos P ∗,
a 3D reconstruction scheme is performed in the MEC server
to reconstruct the required 3D model. One of the widely
used technique is called Structure from Motion (SFM) [25],
which can generate a 3D model in the state of motion. The
main principle of the SFM is to search for the same feature
points from different photos by analyzing the relative and
absolute positions of the ﬁeld image. The location and
orientation of the camera can also be estimated by SFM.
Based on the SFM, a number of software was developed,
such as Meshlab [26] and VisualSFM [19]. In this paper, we
use the more popular and free option VisualSFM as the 3D
reconstruction scheme for our EC-PCS framework.

5.2 3D Model Caching Module

As shown in Fig. 1, the 3D model caching module of our
EC-PCS has two main functions:

i) Checking if the required 3D model has already cached
in the MEC server (i.e., step 3 in Fig. 1). After receiving
the photo (i.e., task request) from the mobile requester, the
MEC server detects and matches keypoints of the photo
by leveraging Scale-Invariant Feature Transform (SIFT) [18].
For the computation part, the computational complexity
of algorithm SIFT for 3D reconstruction is O(ij + k) [27],
where i and j are the width and height of an image, k
represents the number of keypoints of the image, which
can be well supported by the MEC server. ii) Deciding if
the reconstructed 3D model is worth caching in the MEC
server (i.e., step 7 in Fig. 1). Due to the limited storage
capacity of the MEC server, it is impossible to cache all
the reconstructed 3D models of the sensing area. Thus, it
makes sense to cache the most popular 3D models that are
likely to be reused in the future. In this paper, we consider
a popularity-based caching policy [28] that the MEC server
store 3D models based on their highest popularity until the
storage is achieved. The 3D model’s popularity distribution
conditioned on the history that mobile requesters make 3D
model requests.

6 PERFORMANCE EVALUATION
In this section, we evaluate the performance of the proposed
EC-PCS framework. First of all, we describe our experi-

9

(a) η = 80%

(b) η = 95%

(c) η = 99.5%

(d) η = 100%

Figure 7: Evaluation results for the TEMPLE dataset.

Table 5: 3D reconstruction cost for the dataset of TEMPLE.

TEMPLE
#Photos
Monetary

η = 80% η = 95% η = 99.5% η = 100%

37
0.543 $

64
1.434 $

99
3.137 $

141
6.577 $

6.3 Performance for the Network Resource Allocation
Scheme

We evaluate our network resource allocation scheme for
photo uploading by comparing it with 3 resource allocation
schemes and 2 photo uploading schemes. The experiments
is based on the dataset TEMPLE.

• Fair Resource Allocation Scheme (FRAS):

The available bandwidth B is equally shared by the M
edge participants.

• Weighted Resource Allocation Scheme (WRAS):

MEC server allocates the bandwidth according to each
participant’s weight, and the weight is set to be the
number of photos for uploading.

• Random Resource Allocation Scheme (RRAS):

Allocate the bandwidth randomly to the edge partici-
pants.

• Partial Photo Uploading to Cloud Server Scheme (PPU-CS):
Edge participants upload part of raw photos to a remote
cloud server based on a photo selection scheme. The
scheme is widely used in the cloud-based 3D recon-
struction works, such as [25].

• Total Photo Uploading to Edge Server Scheme(TPU-ES):

Edge participants upload all the raw photos to an edge
server, and the photo selection is performed at the edge
server. The scheme is widely used in the edge-based
crowdsensing works.

Fig. 9 reports the photo uploading delay for different re-
source allocation schemes. Our network resource allocation
scheme for EC-PCS obtains the best performance, because
our scheme achieves the optimal solution as shown in
Theorem 3 above. Speciﬁcally, it can achieve more than 61%,
50.1%, and 29% photo upload delay reduction over RRAS,
FRAS and WRAS, respectively. Fig. 10 shows the photo
uploading delay for different photo uploading schemes.
Note that traditional cloud-based photo uploading schemes
performs much worse than the edge-based schemes. The
reason is that cloud-based schemes not only upload photos
to the edge, but also transmit the photos to remote cloud
server. On the other hand, compared with the total upload-

(a) η = 80%

(b) η = 95%

(c) η = 99.5%

(d) η = 100%

Figure 6: Evaluation results for the GATE dataset.

Table 4: 3D reconstruction cost for the dataset of GATE.

GATE
#Photos
Monetary

η = 80% η = 95% η = 99.5% η = 100%

22
0.203 $

38
0.654 $

51
1.361 $

68
1.981 $

(c) can reduce 25% photo uploading and 36.1% monetary
cost, when compared with the method in Fig. 6 (d). Thus, it
makes sense to set η = 99.5% for real-world 3D reconstruc-
tion scenario. The reason for the above phenomenon is that
some of the selected photos have very limited contributions
to the ﬁnal 3D model. Take the GATE as an example, we
ﬁnd that the last ten percent of the photos contribute less
than 10 new keypoints for the ﬁnal 3D model (the ﬁnal 3D
model consists of 20033 keypoints). As a result, uploading
the last 10% of the photos to obtain less than the 0.5% new
keypoints is proven to be unnecessary.

Similar experimental results of TEMPLE are given in
Fig. 7 and TABLE 5. We can reduce 29.78% photo uploading
and 52.30% monetary cost by setting η = 99.5%, and
guarantee the quality of 3D model at the same time.

Fig. 8 shows the target area coverage ratio for different
photo selection schemes. In order to ensure fairness, we ran-
domly select 50 and 100 photos from GATE and TEMPLE
for RPSS, same as our EC-PCS mothod. Note that our photo
selection scheme for EC-PCS always achieves the best area
coverage. Compared with GATE, RPSS performs worse in
TEMPLE. The reason is that the objective in TEMPLE has a
much larger target area and a more complex structure than
the objective in GATE. Due to the fact that CPSS selects
one photo from each cluster, it can guarantee a coarse-
grained coverage. Our photo selection scheme achieves a
ﬁne-grained coverage, thus performs better than the other
methods, e.g., with a signiﬁcant increase of 10.1% and 5.6%
over RPSS and CPSS in the coverage ratio for the TEMPLE
case, respectively.

10

the main modules of the framework. The core functions of
the framework are i) select a proper set of photos that best
cover the target area with minimum monetary cost, and ii)
allocate the limited network resources to the participants,
in order to minimize the uploading delay for the selected
photos. In view of this, we ﬁrst present a photo selection
scheme, and prove that the problem of ﬁnding the optimal
set of photos is NP-hard. Then, in order to minimize the
uploading delay for the selected photos, we propose a
network resource allocation scheme, and obtain the optimal
resource allocation strategy through KKT conditions. Last
but not least, we introduce the 3D reconstruction module
and the 3D model caching module of our framework. Both
simulation and experimental results are based on real-world
datasets to demonstrate the performance of our EC-PCS
framework. In the future, we will address a number of
interesting open questions and directions to extend our EC-
PCS, such as i) classify participants into several categories
(according to their mobility or capacity), ii) cost-effective
photo crowdsourcing iii) auction-based photo selection and
iv) privacy-preserving photo transmission (e.g., differential
privacy and homomorphic encryption based photo aggre-
gation).

PROOF A: PROOF OF THE THEOREM 1

Proof: Given a collection P ∗ of subsets, it is obviously
that we can check the if the union of them can cover at
least η (in %) elements of AT ar in polynomial time. Thus,
the cost-aware photo selection problem is in NP. Then, we
prove that ﬁnding the optimal solution is NP-hard. To prove
that the cost-aware photo selection problem is NP Hard, we
consider a problem which has already been proven to be
NP-Hard, and prove that this problem can be reduced to
our cost-aware photo selection problem. To this end, we
consider the vertex cover problem (VCP), which is NP-
complete (and hence NP-hard), and prove VCP ≤p cost-
aware photo selection problem.

Vertex Cover Problem (VCP): Given a graph G = (V, E)
and a positive integer K, if there is a subset V of vertices
of size at most K, such that every edge in the graph is
connected to some vertex in V.

We ﬁrst deﬁne function f as follows:

< E, C, K >= f (G, K),
C = {Cv, v ∈ V},
Cv = {e ∈ E, v ∈ e}.

(10)

Assume G has a vertex cover W of size K, and let D =
{Cv, v ∈ W }, thus |D| = K. Note that D is a C-cover of E.
To justify, we assume e = u, v ∈ E, then, e is in both Cu and
Cv. However, since W is a vertex cover, at least one of u or
v is in W . Therefore, at least one of the sets Cu or Cv is in
D.

Conversely, assume E has a C-cover D of size K, let W =
{v ∈ V, Cv ∈ D}. Then, |W | = K. Note that W is a vertex
cover of of G. To justify, we assume e ∈ E. Since D is a
C-cover of E. There is a set Cv ∈ D such that e ∈ Cv The
deﬁnition of W then says that v ∈ W , and the deﬁnition of
Cv says that v ∈ e. Thus, the function f is a polynomial-time
reduction of VCP to the cost-aware photo selection problem.

(a) GATE

(b) TEMPLE

Figure 8: Photo selection schemes vs. target area coverage
ratio.

Figure 9: Photo upload-
ing delay for differ-
ent resource allocation
schemes.

Figure 10: Photo up-
loading delay for dif-
ferent photo uploading
schemes.

Table 6: Photo collection delay comparisons.

3D Reconstruction Schemes

EC-PCS

3D modeling on the go [5]
Photo Tourism [25]
Photo City [6]

Photo Collection Delay
a few seconds to tens of
second
ten minutes
a few days
a few weeks

ing scheme TPU-ES, we observe a pre-selection scheme (i.e.,
partial uploading) is useful to reduce the uploading delay,
achieving 28% delay reduction over the TPU-ES scheme.
Indeed, the photo uploading scheme for our EC-PCS is an
edge-based partial uploading method, thus can minimize
the photo uploading delay.

At last, we qualitatively show the effectiveness of our
EC-PCS by comparing it with three existing real-time 3D
reconstruction approaches, 3D modeling on the go [5], Photo
Tourism [25] and Photo City [6], respectively. In this paper,
photo collection delay refers to the sum of photo selection
delay and photo uploading delay. As reported in TABLE. 6,
our EC-PCS can reduce the photo collection delay greatly
for the following reasons: i) Collecting photos directly from
ubiquitous mobile and Internet of Things devices, ii) Up-
loading photos through high-speed MEC network, and iii)
Processing photos at edge server, instead of transmitting to
the remote cloud server.

7 CONCLUSION
In this paper, we address the issue of real-time 3D recon-
struction in 5G multi-access edge computing (MEC) envi-
ronments. To this end, we propose a novel edge computing-
based photo crowdsourcing (EC-PCS) framework and show

(cid:48)

PROOF B: PROOF OF THE THEOREM 2
Let Ai denote the number of grids uncovered at iteration i.
Thus there are |AT ar| − Ai covered grids at iteration i and
i = Ai − (|AT ar| − (cid:100)η · |AT ar|(cid:101)) grids to cover. We
another A
will take the set corresponding to the grid gj that minimizes
i} Let ci be the cost charged to gi, so if gi
i} . We have:

Gm,n
m,n∩Ai|,A(cid:48)
min{|AT ar
belongs to AT ar

m,n we have ci =

min{|AT ar

ci =

Gm,n
m,n ∩ Ai|, A(cid:48)
i}

min{|AT ar

≤

|AT ar

j,k ∩ Ai| > 0

Gm,n
m,n∩Ai|,A(cid:48)
Gj,k
j,k ∩ Ai|, A(cid:48)
i}

min{|AT ar

,

(11)

Thus,

(cid:88)

≥

j∈P ∗

= ci ·

Gm,n
m,n ∩ Ai|, A(cid:48)
i}

min{|AT ar
(cid:88)

min{|AT ar

j,k ∩ Ai|, A

j∈P ∗
i} ≤ ci · A

(cid:48)

(cid:48)

i.

(cid:88)

·

min{|AT ar

j,k ∩ Ai|, A

i}

(cid:48)

j∈P ∗

Note that ∪pm,n∈P ∗ AT ar
≤ V ∗

Therefore, ci ≤ V ∗
A(cid:48)
i
Algorithm 1 can be summarized as follows:

(12)
m,n ∩ Ai covers at least A
i grids.
i . To sum up, the total cost of

(cid:48)

cost =c(cid:100)η·|AT ar|(cid:101) + ... + c1 = V ∗ · (

(cid:100)η·|AT ar|(cid:101)
(cid:88)

i=1

1
i

),

(13)

= F(cid:100)η·|AT ar|(cid:101) · V ∗.

Thus, Algorithm 1 for the cost-aware photo selection prob-
lem achieves an approximation of F(cid:100)η·|AT ar|(cid:101).

PROOF C: PROOF OF THE THEOREM 3
We deﬁne the Lagrangian for the problem (8) as follows:

L(B, t, u, v) = t +

M
(cid:88)

i=1

uihi(B, t) + vg(B).

(14)

The Karush-Kuhn-Tucker (KKT) conditions [30] can be writ-
ten as:

1 −

M
(cid:88)

i=1

ui = 0,

M
(cid:88)

i=1

ui∇Bhi(B, t) + v∇Bg(B) = 0,

ui · hi(B, t) = 0,
hi(B, t) ≤ 0, g(B) = 0,
ui ≥ 0,

i = 1, 2, ..., M,

i = 1, 2, ..., M,

i = 1, 2, ..., M,

where

(cid:34)

∇Bhi(B, t) =

0, · · · , −

∇Bg(B) = 1.

(cid:80)

Pi,n∈P ∗ Di,n
i log2 (1 + SNRi)

B2

(15)

(cid:35)T

, · · · , 0

,

Putting ∇Bhi(B, t) and ∇Bg(B) into (15), we can obtain the
optimal resource allocation policy B∗ as follows:

B∗ = {B∗

1 , B∗
B ·

2 , ..., B∗

M },
Pm,n ∈P∗ Dm,n
log2(1+SNRm)

(cid:80)

(cid:18) (cid:80)

(cid:80)M

m=1

Pm,n ∈P∗ Dm,n
log2(1+SNRm)

B∗

m =

(cid:19) ,

∀m.

(16)

The proof is thus completed.

11

ACKNOWLEDGMENT

supported in part by the National
This work was
(No. U1711265, No.
Science Foundation of China
61972432, No. U1911201);
the Program for Guang-
dong Introducing Innovative and Entrepreneurial Teams
(No.2017ZT07X355);the Pearl River Talent Recruitment Pro-
gram (No.2017GC010465); Guangdong Special Support
Program (No. 2017TX04X148); the Fundamental Research
Funds for the Central Universities (No. 20lgpy135); Guang-
dong Basic and Applied Basic Research Foundation (No.
2019A1515010030).

REFERENCES

[1] B. Reitinger, C. Zach, and D. Schmalstieg, “Augmented reality
scouting for interactive 3d reconstruction,” in 2007 IEEE Virtual
Reality Conference, March 2007, pp. 219–222.

[2] A. Georgiadis and S. Youseﬁ, “Analysis of the user experience in
a 3d gesture-based supported mobile vr game,” in Proceedings of
the 23rd ACM Symposium on Virtual Reality Software and Technology,
ser. VRST ’17. New York, NY, USA: ACM, 2017, pp. 47:1–47:2.
[Online]. Available: http://doi.acm.org/10.1145/3139131.3141224
[3] X. Han, H. Laga, and M. Bennamoun, “Image-based 3d object
reconstruction: State-of-the-art and trends in the deep learning
era,” CoRR, vol. abs/1906.06543, 2019.
[Online]. Available:
http://arxiv.org/abs/1906.06543

[4] H. Durrant-Whyte and T. Bailey, “Simultaneous localization and
mapping: part i,” IEEE Robotics Automation Magazine, vol. 13, no. 2,
pp. 99–110, June 2006.

[5] T. Schops, T. Sattler, C. Hane, and M. Pollefeys, “3d modeling
on the go: Interactive 3d reconstruction of large-scale scenes on
mobile devices,” in 2015 International Conference on 3D Vision, Oct
2015, pp. 291–299.

[6] K. Tuite, N. Snavely, D.-y. Hsiao, N. Tabing, and Z. Popovic,
large-scale image acquisition
“Photocity: Training experts at
through a competitive game,” in Proceedings of
the SIGCHI
Conference on Human Factors in Computing Systems, ser. CHI
’11. New York, NY, USA: ACM, 2011, pp. 1383–1392. [Online].
Available: http://doi.acm.org/10.1145/1978942.1979146

[7] Y. Wu, Y. Wang, and G. Cao, “Photo crowdsourcing for area cov-
erage in resource constrained environments,” in IEEE INFOCOM
2017 - IEEE Conference on Computer Communications, May 2017, pp.
1–9.

[8] ETSI. (2018) Multi-access edge computing (mec). [Online]. Avail-
able: https://www.etsi.org/technologies-clusters/technologies/
multi-access-edge-computing

[9] Z. Zhou, X. Chen, E. Li, L. Zeng, K. Luo, and J. Zhang, “Edge
intelligence: Paving the last mile of artiﬁcial intelligence with edge
computing,” Proceedings of the IEEE, vol. 107, no. 8, pp. 1738–1762,
2019.

[10] S. Wang, Y.-C. Wu, M. Xia, R. Wang, and H. V. Poor, “Machine
intelligence at the edge with learning centric power allocation,”
2019.

[11] P. Tanskanen, K. Kolev, L. Meier, F. Camposeco, O. Saurer, and
M. Pollefeys, “Live metric 3d reconstruction on mobile phones,”
in 2013 IEEE International Conference on Computer Vision, 2013, pp.
65–72.

[12] B. Guo, H. Chen, Z. Yu, X. Xie, and D. Zhang, “Picpick: a
generic data selection framework for mobile crowd photography,”
Personal and Ubiquitous Computing, vol. 20, no. 3, pp. 325–
[Online]. Available: https://doi.org/10.1007/
335,
s00779-016-0924-x

Jun 2016.

[13] T. Zhou, B. Xiao, Z. Cai, M. Xu, and X. Liu, “From uncertain
photos to certain coverage: a novel photo selection approach to
mobile crowdsensing,” in IEEE INFOCOM 2018 - IEEE Conference
on Computer Communications, April 2018, pp. 1979–1987.

[14] M. H. Cheung, F. Hou, and J. Huang, “Delay-sensitive mobile
crowdsensing: Algorithm design and economics,” IEEE Transac-
tions on Mobile Computing, vol. 17, no. 12, pp. 2761–2774, 2018.
[15] A. Pang, W. Chung, T. Chiu, and J. Zhang, “Latency-driven coop-
erative task computing in multi-user fog-radio access networks,”
in 2017 IEEE 37th International Conference on Distributed Computing
Systems (ICDCS), 2017, pp. 615–624.

12

[16] Z. Zhou, H. Liao, B. Gu, K. M. S. Huq, S. Mumtaz, and J. Ro-
driguez, “Robust mobile crowd sensing: When deep learning
meets edge computing,” IEEE Network, vol. 32, no. 4, pp. 54–60,
July 2018.

[17] W. Wu, M.-Y. Yeh, and M.-S. Chen, “Deep censored learning of the
winning price in the real time bidding,” in Proceedings of the 24th
ACM SIGKDD International Conference on Knowledge Discovery and
Data Mining, ser. KDD’18. New York, NY, USA: Association for
Computing Machinery, 2018, pp. 2526–2535.

[18] D. G. Lowe, “Object recognition from local scale-invariant fea-
tures,” in Proceedings of the Seventh IEEE International Conference
on Computer Vision, vol. 2, Sep. 1999, pp. 1150–1157 vol.2.

[19] C. Wu, “Visualsfm : A visual structure from motion system.”

[Online]. Available: http://ccwu.me/vsfm/doc.html

[20] D. Lopez-Perez, A. Valcarce, G. de la Roche, and J. Zhang, “Ofdma
femtocells: A roadmap on interference avoidance,” vol. 47, no. 9,
pp. 41–48, Sep. 2009.

[21] J. Kwak, Y. Kim, J. Lee, and S. Chong, “Dream: Dynamic resource
and task allocation for energy minimization in mobile cloud
systems,” vol. 33, no. 12, pp. 2510–2523, Dec. 2015.

[22] H. Chen, B. Guo, Z. Yu, and Q. Han, “Toward real-time and co-
operative mobile visual sensing and sharing,” in IEEE INFOCOM
2016 - The 35th Annual IEEE International Conference on Computer
Communications, April 2016, pp. 1–9.

[23] G. Karakostas, “A better approximation ratio for the vertex cover
problem,” ACM Trans. Algorithms, vol. 5, no. 4, pp. 41:1–41:8, Nov.
2009. [Online]. Available: http://doi.acm.org/10.1145/1597036.
1597045

[24] L. A. Wolsey, “An analysis of

the greedy algorithm for
the submodular set covering problem,” Combinatorica, vol. 2,
no. 4, pp. 385–393, Dec 1982.
[Online]. Available: https:
//doi.org/10.1007/BF02579435

[25] N. Snavely, S. M. Seitz, and R. Szeliski, “Photo tourism:
in 3d,” ACM Trans. Graph.,
[Online]. Available:
Jul. 2006.

Exploring photo collections
vol. 25, no. 3, pp. 835–846,
http://doi.acm.org/10.1145/1141911.1141964

[26] V. Scarano, R. D. Chiara, U. E. (editors, P. Cignoni, M. Callieri,
M. Corsini, M. Dellepiane, F. Ganovelli, and G. Ranzuglia, “Mesh-
lab: an open-source mesh processing tool.”

[27] P. Drews, R. de Bem, and A. de Melo, “Analyzing and exploring
feature detectors in images,” in 2011 9th IEEE International Confer-
ence on Industrial Informatics, 2011, pp. 305–310.

[28] S. T. ul Hassan, M. Bennis, P. H. J. Nardelli, and M. Latva-aho,
“Caching in wireless small cell networks: A storage-bandwidth
tradeoff,” vol. 20, no. 6, pp. 1175–1178, Mar. 2016.

[29] [Online]. Available: http://vision.ia.ac.cn/zh/data/index.html
[30] J. J. Ye and J. Zhang, “Enhanced karush–kuhn–tucker conditions
for mathematical programs with equilibrium constraints,”
of Optimization Theory and Applications, vol. 163,
Journal
no. 3, pp. 777–794, Dec 2014.
[Online]. Available: https:
//doi.org/10.1007/s10957-013-0493-3

