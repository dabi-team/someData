AReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

9
1
0
2

y
a
M
8
2

]

G
L
.
s
c
[

2
v
0
8
4
8
0
.
2
0
9
1
:
v
i
X
r
a

Gabriele Abbati * 1 Philippe Wenk * 2 3 Michael A Osborne 1 Andreas Krause 2 Bernhard Sch¨olkopf 4
Stefan Bauer 4

Abstract

paper, we use exclusively the Itˆo-form

Stochastic differential equations are an important
modeling class in many disciplines. Consequently,
there exist many methods relying on various dis-
cretization and numerical integration schemes.
In this paper, we propose a novel, probabilistic
model for estimating the drift and diffusion given
noisy observations of the underlying stochastic
system. Using state-of-the-art adversarial and mo-
ment matching inference techniques, we avoid
the discretization schemes of classical approaches.
This leads to signiﬁcant improvements in parame-
ter accuracy and robustness given random initial
guesses. On four established benchmark systems,
we compare the performance of our algorithms
to state-of-the-art solutions based on extended
Kalman ﬁltering and Gaussian processes.

1. Introduction

Modeling discretely observed time series is a challenging
problem that arises in quantitative sciences and many ﬁelds
of engineering. While it is possible to tackle such problems
with difference equations or ordinary differential equations
(ODEs), both approaches suffer from serious drawbacks.
Difference equations are difﬁcult to apply if the observation
times are unevenly distributed. Furthermore, they do not
generalize well across observation frequencies, while nat-
ural laws do not care about this artiﬁcial construct. ODEs
can deal with these challenges, but fail to incorporate the
inherent stochastic behavior present in many physical, chem-
ical or biological systems. These effects can be captured
by introducing stochasticity in the dynamics model, which
brings to stochastic differential equations (SDEs). In this

*Equal contribution 1Department of Engineering Science, Uni-
versity of Oxford 2Learning and Adaptive Systems Group, ETH
Z¨urich 3Max Planck ETH Center for Learning Systems 4Empirical
Inference Group, Max Planck Institute for Intelligent Systems.
Correspondence to: Gabriele Abbati <gabb@robots.ox.ac.uk>,
Philippe Wenk <wenkph@ethz.ch>.

Proceedings of the 36 th International Conference on Machine
Learning, Long Beach, California, PMLR 97, 2019. Copyright
2019 by the author(s).

dx(t) = f (x(t), θ)dt + g(x(t), θ)dw(t),

(1)

where x(t) is the time-dependent vector of states we would
like to model, θ collects the parameters of the model, f is
the drift term, g is the matrix-valued diffusion function and
w(t) is a Wiener-process of the same dimension as the state
vector x.

While SDEs can efﬁciently capture stochasticity and deal
with unevenly spaced observation times and frequency, infer-
ence is rather challenging. Due to the stochasticity of w(t),
the state vector x(t) is itself a random variable. Except
for few special cases, it is not possible to ﬁnd an analytic
solution for the statistics of x(t) for general drift and dif-
fusion terms. The problem is even more challenging if we
were to condition on or state-estimate some discrete time
observations y (ﬁltering/smoothing) or infer some statistics
for the parameters θ (parameter inference). It is well known
that the parameter inference problem is a difﬁcult task, with
most approaches either being very sensitive to initialization
(Picchini, 2007), strongly dependent on the choice of hy-
perparameters like the spacing of the integration grid (Bhat
et al., 2015) or using excessive amount of computational
resources even for small scale systems and state-of-the-art
implementation (Ryder et al., 2018).

The difﬁculty of the parameter estimation problem of esti-
mating parameters of drift and diffusion under observational
noise is readily exempliﬁed by the fact that even major sci-
entiﬁc programming environment providers like MATLAB
are still lack an established toolbox for practical use. In this
paper, we will take a step into a novel direction tackling this
open and exciting research question.

1.1. Related Work

While it is impossible to cover all related research efforts, we
would like to give a quick overview by mentioning some of
the most relevant. For a more in-depth discussion, we recom-
mend Tronarp & S¨arkk¨a (2018), who provide an excellent
review of the current state-of-the-art smoothing schemes.
Moreover, Sørensen (2004), Nielsen et al. (2000) and Hurn
et al. (2007) provide extensive explanations of the more
traditional approaches.

 
 
 
 
 
 
AReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

Most classical methods rely on calculating the probability
of sample paths x conditioned on the system parameters
θ, denoted as p(x|θ). Since p(x|θ) is usually analytically
intractable, approximation schemes are necessary. Elerian
et al. (2001) and Eraker (2001) use the Euler-Maruyama
discretization to approximate p(x|θ) on a ﬁxed, ﬁne grid
of artiﬁcial observation times later to be leveraged in a
MCMC sampling scheme. Pieschner & Fuchs (2018) and
van der Meulen et al. (2017) subsequently reﬁne this ap-
proach with improved bridge constructs and incorporated
partial observability. Ryder et al. (2018) follow up on this
idea by combining discretization procedures with variational
inference. S¨arkk¨a et al. (2015) investigate different approxi-
mation methods based on Kalman ﬁltering, while Archam-
beau et al. (2007) and Vrettas et al. (2015) use a variational
Gaussian process-based approximation. Finally, it should
be mentioned that p(x|θ) can be inferred by solving the
Fokker-Planck-Kolmogorov equations using standard meth-
ods for PDEs (Hurn & Lindsay, 1999; A¨ıt-Sahalia, 2002).

Instead of approximating p(x, θ) in a variational fashion,
Gaussian processes can as well be used to directly model
f (x, θ) and g(x, θ), ignoring in this way any prior knowl-
edge about their parametric form. This approach was inves-
tigated by Ruttor et al. (2013), whose linearization and dis-
cretization assumptions which were later relaxed by Yildiz
et al. (2018). While we will show in our experiments that
these methods can be used for parameter estimation if the
parametric form of drift and diffusion are known, it should
be noted that parameter inference was not the original goal
of their work.

1.2. Our Work

To the best of our knowledge, there are only very few works
that try to circumvent calculating p(x|θ) at all. Our ap-
proach is probably most closely related to the ideas pre-
sented by Riesinger et al. (2016). Our proposal relies on
the Doss-Sussman transformation (Doss, 1977; Sussmann,
1978) to reduce the parameter inference problem to parame-
ter inference in an ensemble of random ordinary differential
equations (RODEs). These equations can then be solved
path-wise using either standard numerical schemes or using
the computationally efﬁcient gradient matching scheme of
Gorbach et al. (2017) as proposed by Bauer et al. (2017).

The path-wise method by Bauer et al. (2017) has natural
parallelization properties, but there is still an inherent ap-
proximation error due to the Monte Carlo estimation of
the expectation over the stochastic element in the RODE.
Furthermore, their framework imposes severe linearity re-
strictions on the functional form of the drift f (x, θ), while
it is unable to estimate the diffusion matrix g(x, θ).

While we will keep their assumption of a constant diffu-
sion matrix, i.e. g(x, θ) = G, our approach gets rid of

the linearity assumptions on the drift f . Furthermore, we
substitute the Monte Carlo approximation by embedding the
SDE into a fully statistical framework, allowing for efﬁcient
estimation of both G and θ using state-of-the-art statistical
inference methods.

Despite a constant diffusion assumption might seem restric-
tive at ﬁrst, such SDE models are widely used, e.g.
in
chemical engineering (Karimi & McAuley, 2018), civil en-
gineering (Jim´enez et al., 2008), pharmacology (Donnet
& Samson, 2013) and of course in signal processing, con-
trol and econometrics. While we believe that this approach
could be extended approximately to systems with general
diffusion matrices, we leave this for future work.

The contributions of our framework are the following:

• We derive a new statistical framework for diffusion
and drift parameter estimation of SDEs using the Doss-
Sussmann transformation and Gaussian processes.

• We introduce a grid-free, computationally efﬁcient and
robust parameter inference scheme that combines a
non-parametric Gaussian process model with adversar-
ial loss functions.

• We demonstrate that our method is able to estimate
constant but non-diagonal diffusion terms of stochas-
tic differential equations without any functional form
assumption on the drift.

• We show that our method signiﬁcantly outperforms the
state-of-the-art algorithms for SDEs with multi-modal
state posteriors, both in terms of diffusion and drift
parameter estimation.

• We share and publish our code to facilitate fu-
ture research at https://github.com/gabb7/
AReS-MaRS.

2. Background

In this section, we formalize our problem and introduce the
necessary notation and background drawn from Gaussian
process-based gradient matching for ODEs.

2.1. Problem Setting

We consider SDEs of the form

dx(t) = f (x(t), θ)dt + Gdw(t),

(2)

where x(t) = [x1(t), . . . , xK(t)](cid:62) is the K-dimensional
state vector at time t; dw(t) are the increments of a stan-
dard Wiener process; f is an arbitrary, potentially highly
nonlinear function whose parametric form is known, save
for the unknown parameter vector θ; G is the unknown but

AReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

constant diffusion matrix. Without loss of generality, we
can assume G to be a lower-diagonal, positive semi-deﬁnite
matrix.

The system is observed at N arbitrarily spaced time points
t = [t1, . . . , tN ], subjected to Gaussian observation noise:

y(tn) = x(tn) + e(tn)

∀ n = 1, . . . , N,

(3)

where we assume the noise variances to be state-dependent
but time-independent, i.e.

The matrix X can be vectorized by concatenating its rows
and deﬁning in this way the vector x = [x1, . . . , xK](cid:62).
This vector should not be confused with x(t), which is still
a time-dependent vector of dimension K.

As we work with Gaussian processes, it is useful to stan-
dardize the state observations by subtracting the mean and
dividing by the standard deviation, in a state-wise fash-
ion. We deﬁne the vector of the data standard deviation
σy = [σy1, . . . , σyK ], and the matrix S as:

p(e(tn)) =

K
(cid:89)

k=1

N (ek(tn) | 0, σk) ,

(4)

for n = 1, . . . , N and k = 1, . . . , K.

2.2. Deterministic ODE Case

In the context of Bayesian parameter inference for deter-
ministic ordinary differential equations, Calderhead et al.
(2009) identify numerical integration as the main culprit
for bad computational performance. Thus, they propose to
turn the parameter estimation procedure on its head: instead
of calculating p(y | θ) using numerical integration, they
extract two probabilistic estimates for the derivatives, one
using only the noisy observations y and one using the dif-
ferential equations. The main challenge is then to combine
these two distributions, such that more information about
y can guide towards better parameter estimates θ. For this
purpose, Calderhead et al. (2009) propose a product of ex-
perts heuristics that was accepted and reused until recently
Wenk et al. (2018) showed that this heuristic leads to se-
vere theoretical issues. They instead propose an alternative
graphical model, forcing equality between the data based
and the ODE based model save for a Gaussian distributed
slack variable.

In this paper, we use another interpretation of gradient
matching, which is aimed at ﬁnding parameters θ such
that the two distributions over ˙x match as closely as pos-
sible. Acknowledging the fact that standard methods like
minimizing the KL divergence are not tractable, we use
robust moment matching techniques while solving a much
harder problem with G (cid:54)= 0. However, it should be clear
that our methodology could easily be applied to the special
case of deterministic ODEs and thus provides an additional
contribution towards parameter estimation for systems of
ODEs.

2.3. Notation

Throughout this paper, bold, capital letters describe matrices.
Values of a time-dependent quantities such as the state vector
x(t) can be collected in the matrix X = [x(t1), . . . , x(tN )]
of dimensions K × N , where the k-th row collect the N
single-state values at times t = [t1, . . . , tN ] for the state k.

S = σy ⊗ IN

(5)

where ⊗ indicates the Kronecker product and IN is the
identity matrix of size N × N . Similarly for the means,
we can deﬁne the N × K vector µy that contains the K
state-wise means of the observations, each repeated N times.
Thus the standardize vector ˜x can be deﬁned as:

˜x = S−

1(x − µy).

(6)

For the sake of clarity, we omit the normalization in the
following sections. It should be noted however that in a
ﬁnite sample setting, standardization strongly improves the
performance of GP regression. In our implementation and
all the experiments in section 4, we assume a GP prior on the
states standardized using the state-wise mean and standard
deviation of the observations y.

For coherence with the current Gaussian process-based gra-
dient matching literature, we follow the notation introduced
by Calderhead et al. (2009) and Wenk et al. (2018) wherever
possible.

3. Methods

In the deterministic case with G = 0, the GP regression
model can be directly applied to the states x. However, if
G (cid:54)= 0, the derivatives of the states with respect to time t no
longer exist due to the contributions of the Wiener process.
Thus, performing direct gradient matching on the states is
not feasible.

3.1. Latent States Representation

We propose to tackle this problem by introducing a latent
variable z, deﬁned via the linear coordinate transformation

z(t) = x(t) − o(t),

where o(t) is the solution of the following SDE:

do(t) = −o(t) + Gdw(t).

(7)

(8)

Without loss of generality, we set z(0) = x(0) and thus
o(0) = 0. While in principle the framework supports any

AReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

initial condition as long as z(0) + o(0) = x(0), the reasons
for this choice will become clear in section 3.2.3.

Using Itˆo’s formula, we obtain the following SDE for z

dz(t) = {f (z(t) + o(t), θ) + o(t)} dt

(9)

This means that for a given realization of o(t), we obtain
a differentiable latent state z(t).
In principle, we could
sample realizations of o(t) and solve the corresponding de-
terministic problems, which is equivalent to approximately
marginalizing over o(t). However, it is actually possible to
treat this problem statistically, completely bypassing such
marginalization. We do this by creating probabilistic gener-
ative models for observations and derivatives analytically.
The equations are derived in this section, while the ﬁnal
models are shown in Figure 1.

3.2. Generative Model for Observations

Let us deﬁne e(t) as the Gaussian observation error at time
t. Using the matrix notation introduced in section 2.3, we
can write

Y = X + E = Z + O + E,

(10)

where Z and O are the matrices corresponding to the lower-
case variables introduced in the previous section. In contrast
to standard GP regression, we have an additional noise term
O, which is the result of the stochastic process described by
equation (8). As in standard GP regression, it is possible to
recover a closed form Gaussian distribution for each term.

3.2.3. ORNSTEIN-UHLENBECK PROCESS

Through the coordinate transformation in equation (7), all
stochasticity is captured by the stochastic process o(t) de-
scribed by equation (8). Such mathematical construct has
a closed-form, Gaussian solution and is called Ornstein-
Uhlenbeck process. For the one-dimensional case with zero
initial condition and unit diffusion

dˆo(t) = −ˆo(t) + dw(t),

we get the following mean and covariance:

E[ˆo(t)] = 0
1
2

cov[ˆo(ti), ˆo(tj)] =

ti

e−|

−

tj

| −

1
2

e−

(ti+tj ).

(14)

(15)

(16)

Sampling ˆo(t) at the N points t = [t1, . . . , tN ] yields the
vector ˆo(t) = [ˆo(t1), . . . , ˆo(tN )], which is Gaussian dis-
tributed:

p(ˆo(t)) = N (ˆo(t) | 0, Ωone),

(17)

where [Ωone]ij = cov[ˆo(ti), ˆo(tj)] according to (16). In the
case of a K-dimensional process with identity diffusion, i.e.

dˆo(t) = −ˆo + IKdw(t),

(18)

we can just treat each state dimension as an independent,
one-dimensional OU process. Thus, after sampling ˆo(t) K
times at the N time points in t and unrolling the resulting
matrix as described in section 2.3, we get

3.2.1. GP PRIOR

p(ˆo) = N (ˆo | 0, Ω),

(19)

We assume a zero-mean Gaussian prior over the latent states
z, whose covariance matrix is given by a kernel function
k(x, y), in turn parameterized by the hyperparameter vector
φ:

p(z | φ) = N (z | 0, Cφ) .

(11)

We treat all state dimensions as independent, meaning that
we put independent GP priors with separate hyperparame-
ters φk on the time evolution of each state. Consequently,
Cφ is a block diagonal matrix with K blocks each of di-
mension N × N . The blocks model the correlation over
time introduced by the GP prior.

3.2.2. ERROR MODEL

In equation (4), we assume that observational errors are i.i.d.
Gaussians uncorrelated over time. The joint distribution
of all errors is thus still a Gaussian distribution, whose
covariance T has only diagonal elements given by the GP
k}K
likelihood variances σ = {σ2
T = σ ⊗ IN .

k=1. More precisely:

(12)

and

where Ω is a block diagonal matrix with one Ωone for each
state dimension.

Using Itˆo’s formula, we can show that the samples of the
original Ornstein-Uhlenbeck process o at each time point
can be obtained via the linear coordinate transformation

o(t) = Gˆo(t).

(20)

Let B be deﬁned as the matrix that performs this linear
transformation for the unrolled vectors o = Bˆo. We can
then write the density of the original OU process as

p(o | G) = N (cid:0)o | 0, BΩB(cid:62)

(cid:1) .

(21)

3.2.4. MARGINALS OF THE OBSERVATIONS

Using equation (10), the marginal distribution of y can
be computed as the sum of three independent Gaussian-
distributed random variables with zero mean, described
respectively by equations (11), (13) and (21). Thus, y is
again Gaussian-distributed, according to

p(e | σ) = N (e | 0, T) .

(13)

p(˜y | φ, G, σ) = N (y | 0, Σ),

(22)

AReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

where δ represents the dirac delta.

3.4. Inference

Combined with the modeling paradigms introduced in the
previous sections, this yields the two generative models
for the observations in Figure 1. The graphical model in
Figure 1a represents the derivatives we get via the generative
process described by the SDEs, in particular the nonlinear
drift function f . The model in Figure 1b represents the
derivatives yielded by the generative process described by
the Gaussian process. Assuming a perfect GP ﬁt and access
to the true parameters θ, intuitively these two distributions
should be equal. We thus want to ﬁnd parameters θ that
minimizes the difference between these two distributions.

Compared to the deterministic ODE case, the graphical
models in Figure 1 contain additional dependencies on the
contribution of the OU process o. Furthermore, the SDE-
driven probability distribution of ˙z in Figure 1a depends
on z, o, and θ through a potentially highly nonlinear drift
function f . Thus, one cannot do analytical inference without
making restrictive assumptions on the functional form of f .

However, as shown in section A.3 of the appendix , it is
possible to derive computationally efﬁcient ancestral sam-
pling schemes for both models, as summarized in Algorithm
1. While this rules out classical approaches like analyti-
cally minimizing the KL divergence, we can now deploy
likelihood-free algorithms that were designed for matching
two probability densities based on samples.

Algorithm 1 Ancestral sampling for ˙z
1: Input: y, f (z, θ), t, σ, G
2: Ancestral sampling the SDE model
3: Sample os by drawing from p(o | G)
4: Sample zs by drawing from p(z | y, o, σ) using os
5: Sample ˙zs by drawing from p( ˙z | o, z, θ) using os, zs
6: Ancestral sampling the Data model
7: Sample zd by drawing from p(z | y, G, σ)
8: Sample ˙zd by drawing from p( ˙z | z, φ)
9: Return: ˙zs, ˙zd

(a) SDE-based model

(b) Data-based model

Figure 1. Generative models for the two different ways to compute
the derivatives of the latent states z.

where

(23)

Σ = Cφ + T + BΩBT .
Thanks to the latent state representation, the diffusion matrix
G is now a part of the hyperparameters of the observation
model. It can then be inferred alongside the hyperparameters
of the GP using maximum evidence (Rasmussen, 2004).
Using a stationary kernel k, Cφ + T captures the stationary
part of z as in standard GP regression, while the parameters
in G describe the non-stationary part due deriving from Ω.
This ultimately leads to an identiﬁable problem.

3.3. Generative Model for Derivatives

Similarly to gradient matching approaches, we deﬁne two
generative models for the derivatives ˙z, one based on the
data and one based on the SDE model.

3.3.1. DATA-BASED MODEL

As shown e.g. in the appendix of Wenk et al. (2018), the
prior deﬁned in equation (11) automatically induces a GP
prior on the conditional derivatives of z. Deﬁning

1
φ ,

D := (cid:48)CφC−
A := C(cid:48)(cid:48)φ − (cid:48)CφC−

1
φ C(cid:48)φ

where

[(cid:48)Cφ]i,j

:=

(cid:2)C(cid:48)φ

(cid:3)
i,j

:=

(cid:2)C(cid:48)(cid:48)φ

(cid:3)
i,j

:=

∂
∂a

∂
∂b

,

(cid:12)
(cid:12)
kφ(a, b)
(cid:12)
(cid:12)a=ti,b=tj
(cid:12)
(cid:12)
kφ(a, b)
(cid:12)
(cid:12)a=ti,b=tj
(cid:12)
(cid:12)
(cid:12)
(cid:12)a=ti,b=tj

kφ(a, b)

,

∂2
∂a∂b

(24)

(25)

(26)

(27)

,

(28)

3.5. Adversarial Sample-based Inference

we can write

p( ˙z | z, φ) = N ( ˙z | Dz, A) .

(29)

3.3.2. SDE-BASED MODEL

There also is a second way of obtaining an expression for
the derivatives of z, namely using equation (9):

p( ˙z | o, z, θ) = δ( ˙z − f (z + o, θ) − o),

(30)

Arguably, generative adversarial networks (GANs) (Good-
fellow et al., 2014) are amongst the most popular algorithms
of this kind; here a parametric neural network is trained to
match the unknown likelihood of the data. The basic GAN
setup consists of a ﬁxed data set, a generator that tries to
create realistic samples of said dataset and a discriminator
that tries to tell apart the fake samples from the true ones.
As recently shown by Yang et al. (2018), GANs have the
potential to solve stochastic partial differential equations

Goσ˙zzyφθGoσ˙zzyφAReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

Algorithm 2 AReS
1: Input: Observations y at times t, a model f , learning
rate α, number of total iterations Nit, the clipping pa-
rameter c, the batch size M , the number of iterations of
the critic per generator iteration ncritic.

2: Train the Gaussian process on the data to recover the

hyperparameters φ, σ and the diffusion G

3: Initialize the critic parameters ω and the SDE parame-

(a) Before Training

(b) After Training

ters θ respectively with ω0 and θ0

Figure 2. Comparing gradients sampled from the graphical model
in Figure 1a (Model-based) and the graphical model in Figure
1b (Data-based) before and after adversarial training on Lotka
Volterra.

(SPDEs). Yang et al. (2018) assume a ﬁxed data set con-
sisting of observations (similar to the y in this paper) and
use an SPDE-inspired neural network as a generator for
realistic observations. In the case of SDEs however, this
would still involve a lot of numerical integration. Thus, we
modify the GAN setup by leaving behind the idea of having
a ﬁxed data set. Instead of relying on bootstrapped samples
of the observations y, we sample the derivatives from the
data-based model shown in Figure 1b. For a sufﬁciently
good model ﬁt, these samples represent the true derivatives
of the latent variable z. We then use the SDE-based model
shown in Figure 1a as a generator. To avoid standard GAN
problems such as training instability and to improve robust-
ness, we choose to replace the discriminator with a critic Cω.
As proposed by Arjovsky et al. (2017), this critic is trained
to estimate the Wasserstein distance between the derivative
samples. The resulting algorithm, summarized in Algorithm
2, can be interpreted as performing Adversarial Regression
for SDEs and will thus be called AReS. In Figure 2, we
show the derivatives sampled from the two models both
before and after training for one example run of the Lotka
Volterra system (cf. Section 4.4). While not perfect, the
GAN is clearly able to push the SDE gradients towards the
gradients of the observed data.

3.6. Maximum Mean Discrepancy

Even though they work well in practical settings, during
training GANs need ad hoc precautions and careful balanc-
ing between their generator and discriminator. Dziugaite
et al. (2015) propose to solve this problem using Maximum
Mean Discrepancy (MMD) (Gretton et al., 2012) as a met-
ric to substitute the discriminator. As proposed by Li et al.
(2015), we choose the rational quadratic kernel to obtain
a robust discriminator that can be deployed without ﬁne-
tuning on a variety of problems. The resulting procedure,
summarized in Algorithm 3, can be interpreted as perform-
ing Maximum mean discrepancy-minimizing Regression
for SDEs and will thus be called MaRS.

4: for nit = 1, . . . , Nit do
5:
6:

for nc = 1, . . . , ncritic do

Sample ˙zs ∼ ps( ˙z) and ˙zd ∼ pd( ˙z) as described

in algorithm 1. Each batch contains M elements
ω( ˙z(i)
s

(cid:104) 1
M

(cid:80)M

(cid:80)M

1
M

(cid:105)

)

i=1 C

ω

∇

gω ←
−
ω ← ω + α · Adam(ω, gω)
ω ← clip(ω, −c, c)

ω( ˙z(i)
d )

i=1 C

7:
8:
9:
10:
11:
12:
13: end for

end for
gθ ←
)
θ ← θ − α · Adam(θ, gθ)

i=1 fω( ˙z(i)

(cid:80)M

−∇

1
M

θ

s

Algorithm 3 MaRS
1: Input: Observations y at times t, SDE model f , learn-
ing rate α, number of iterations Nit, batch size M
2: Train the Gaussian process on the data to recover the

hyperparameters φ, σ and the diffusion G

3: Initialize the SDE parameters with θ0
4: for nit = 1, . . . , Nit do
5:

Sample ˙zs ∼ ps( ˙z) and ˙zd ∼ pd( ˙z) as described in

algorithm 1. Each batch contains M elements

gθ ← ∇θM M D2
u [ ˙zs, ˙zd]
θ ← θ − α · Adam(θ, gθ)

6:
7:
8: end for

4. Experiments

4.1. Setups

To evaluate the empirical performance of our method, we
conduct several experiments on simulated data, using four
standard benchmark systems and comparing against the
EKF-based approach by S¨arkk¨a et al. (2015) and two GP-
based approaches respectively by Vrettas et al. (2015) and
Yildiz et al. (2018).

The ﬁrst system is a simple Ornstein-Uhlenbeck process as
shown in Figure 3a, given by the SDE

dx(t) = θ0(θ1 − x(t))dt + Gdw(t).

(31)

As mentioned in Section 3.2.3, this system has an analytical
Gaussian process solution and thus serves more academic
purposes. We use θ = [0.5, 1.0], G = 0.5 and x(0) = 10.

The second system is the Lorenz ’63 model given by the

t˙z(t)Data-basedModel-basedt˙z(t)Data-basedModel-basedAReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

SDEs

dx1(t) = θ1(x2(t) − x1(t))dt
+ σ1dw1(t)
dx2(t) = (θ2x1(t) − x2(t) − x1(t)x3(t))dt + σ2dw2(t)
+ σ3dw3(t).
dx3(t) = (x1(t)x2(t) − θ3x3(t))dt

In both systems, the drift function is linear in one state or
one parameter conditioned on all the others (cf. Gorbach
et al., 2017). Furthermore, there is no coupling across state
dimensions in the diffusion matrix. This leads to two more
interesting test cases.

To investigate the algorithm’s capability to deal with off-
diagonal terms in the diffusion, we introduce the two dimen-
sional Lotka-Volterra system shown in Figure 3b, given by
the SDEs

dx(t) =

(cid:20) θ1x1(t) − θ2x1(t)x2(t)
−θ3x2(t) + θ4x1(t)x2(t)

(cid:21)

dt + Gdw(t), (32)

where G is, without loss of generality, assumed to be
a lower triangular matrix. The true vector parameter is
θ = [2, 1, 4, 1] and the system is simulated starting from
x(0) = [3, 5]. Since its original introduction by Lotka
(1932), the Lotka Volterra system has been widely used
to model population dynamics in biology. The system is
observed at 50 equidistant points in the interval t = [0, 20].
As it turns out, this problem is signiﬁcantly challenging for
all algorithms, despite the absence of observation noise.

To investigate the effect of strong non-linearities in the drift,
we introduce the Ginzburg-Landau double-well potential
shown in Figure 3c, deﬁned by the SDE

dx(t) = θ0x(θ1 − x2)dt + Gdw(t).

(33)

Using θ = [0.1, 4], G = 0.5 and x(0) = 0, this system
exhibits an interesting bifurcation effect. While there are
two stable equilibria at x = ±2, the one the system will end
up in is completely up to noise. For this reason it represents
a ﬁtting framework to test how well an algorithm can deal
with multi-modal SDEs. The potential value is observed at
50 equidistant points in the interval t = [0, 20], subjected
to observational noise with σ = 0.2.

Lastly, some implementation details are constant throughout
each experiment:
the critic in the adversarial parameter
estimation is a 2-layer fully connected neural network, with
respectively 256 and 128 nodes. Every batch, for both MMD
and adversarial training contains 256 elements. While the
Ornstein-Uhlenbeck process and the double-well potential
were modeled with a sigmoid kernel, for Lotka-Volterra and
Lorenz ’63 we used a common RBF (we point at Rasmussen
(2004) for more information about kernels and GPs).

4.2. Evaluation

For all systems, the parameters θ turn out to be identiﬁable.
Thus, the parameter value is a good indicator of how well an

(a) Ornstein Uhlenbeck

(b) Lotka Volterra

(c) Double Well

Figure 3. Sample trajectories for three different benchmark sys-
tems. While Ornstein Uhlenbeck and Lotka Volterra are rather
tame, the Double Well potential clearly exhibits a bifurcation ef-
fect.

algorithm is able to infer the drift function. However, since
the components of dw(t) are independent, there are multiple
diffusion matrices G that generate the same trajectories. We
thus directly compare the variance of the increments, i.e.
the elements of H := GT G.

To account for statistical ﬂuctuations, we use 100 indepen-
dent realizations of the SDE systems and compare the mean
and standard deviation of θ and H. AReS and MaRS are
compared against the Gaussian process-based VGPA by
Vrettas et al. (2015) and NPSDE by Yildiz et al. (2018) as
well as the classic Kalman ﬁlter-based ESGF recommended
by S¨arkk¨a et al. (2015).

4.3. Locally Linear Systems

As mentioned in Section 4.1, the functional form of the
drift functions of both the Ornstein-Uhlenbeck process and
the Lorenz ’63 system satisﬁes a local linearity assumption,
while their diffusion is kept diagonal. Thus, they serve as
excellent benchmarks for parameter inference algorithms.
The empirical results are shown in Table 1a for the Ornstein-
Uhlenbeck. Unfortunately, VGPA turns out to be rather
unstable if both diffusion and parameters are unknown, de-
spite on average roughly 54 hours are needed to observe
convergence. We then provide it with the true G and show
only its empirical parameter estimates. Since both AReS
and MaRS use Equation (22) to determine G, they share

051015200246810t0.00.511.52.02468t05101520−202tAReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

Table 1. Inferred parameters over 100 independent realizations of respectively the Ornstein-Uhlenbeck, Ginzburg-Landau Double-Well
and Lotka-Volterra dynamics. For every algorithm, we show the median ± one standard deviation.

Ground truth
θ0 = 0.5
θ1 = 1
H = 0.25

NPSDE
0.41 ± 0.11
0.71 ± 1.34
0.00 ± 0.01

VGPA
0.53 ± 0.08
0.96 ± 0.31
/

ESGF
0.49 ± 0.07
0.96 ± 0.24
0.19 ± 0.06

AReS
0.50 ± 0.21
1.06 ± 0.93

MaRS
0.46 ± 0.06
0.99 ± 0.25

0.24 ± 0.09

(a) Ornstein-Uhlenbeck process

Ground truth
θ0 = 2
θ1 = 1
θ2 = 4
θ3 = 1
H1,1 = 0.05
H1,2 = 0.03
H2,1 = 0.03
H2,2 = 0.09

NPSDE
1.58 ± 0.71
0.74 ± 0.31
2.26 ± 1.51
0.49 ± 0.35
/
/
/
/

ESGF
2.04 ± 0.09
1.02 ± 0.05
3.87 ± 0.59
0.96 ± 0.14
0.01 ± 0.03
0.01 ± 0.01
0.01 ± 0.01
0.03 ± 0.02

AReS
2.36 ± 0.18
1.18 ± 0.9
3.97 ± 0.63
0.98 ± 0.18

MaRS
2.00 ± 0.09
1.00 ± 0.04
3.70 ± 0.51
0.91 ± 0.14

0.03 ± 0.004
0.02 ± 0.01
0.02 ± 0.01
0.09 ± 0.03

(b) Lotka-Volterra

Ground truth
θ0 = 0.1
θ1 = 4
H = 0.25

NPSDE
0.09 ± 7.00
3.36 ± 248.82
0.00 ± 0.02

VGPA
0.05 ± 0.04
1.11 ± 0.66
/

ESGF
0.01 ± 0.03
0.11 ± 0.16
0.20 ± 0.05

AReS
0.09 ± 0.04
3.68 ± 1.34

MaRS
0.10 ± 0.05
3.85 ± 1.10

0.21 ± 0.09

(c) Double-Well potential

the same values. Due to space restrictions, the results for
Lorenz ’63 can be found in Table 2 of the appendix. As
demonstrated by this experiment, AReS and MaRS can deal
with locally linear systems, outperforming their competitors,
especially in their estimates of the diffusion terms.

4.4. Non-Diagonal Diffusion

To investigate the effect of off-diagonal entries in G, we
use the Lotka-Volterra dynamics. Since NPSDE is unable
to model non-diagonal diffusions, we provide it with the
true G and only compare parameter estimates. As VGPA
is already struggling in the lower dimensional cases, we
omit it from this comparison due to limited computational
resources. The results are shown in Table 1b. AReS and
MaRS clearly outperform the other methods in terms of
diffusion estimation, while ESGF is the only algorithm that
yields drift parameter estimates of comparable quality.

4.5. Dealing with Multi-Modality

As a ﬁnal challenge, we investigate the Ginzburg-Landau
double well potential. Despite one-dimensional, its state
distribution is multi-modal even if all parameters are known.
As shown in Table 1c, this is deﬁnitely a challenge for all
classical approaches. While the number of data-points is
probably not enough for the non-parametric proxy for the
drift function in NPSDE, the time-dependent Gaussianity
assumptions in both VGPA and ESGF are problematic in

this case. In our gradient matching framework, no such
assumption is made. Thus, both AReS and MaRS are able
to deal with the multimodality of the problem.

5. Conclusion

Parameter and diffusion estimations in stochastic systems
arise in quantitative sciences and many ﬁelds of engineering.
Current techniques based on Kalman ﬁltering or Gaussian
processes approximate the state distribution conditioned on
the parameters and iteratively optimize the data likelihood.
In this work, we propose to turn this procedure on its head
by leveraging key ideas from gradient matching algorithms,
originally designed for deterministic ODEs. By introducing
a novel noise model for Gaussian process regression that
leverages the Doss-Sussmann transformation, we are able to
reliably estimate the parameters in the drift and the diffusion
processes. Our algorithm can keep up with and occasionally
outperform the state-of-the-art on the simpler benchmark
systems, while it is also accurately estimating parameters
for systems that exhibit multi-modal state densities, a case
where traditional methods fail. While our approach is cur-
rently restricted to systems with a constant diffusion matrix
G, it would be interesting to see how it generalizes to other
settings, perhaps using alternative or approximate bridge
constructs. Unfortunately, this is outside of the scope of this
work. We hope nevertheless that the publicly available code
will facilitate future research in that direction.

AReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

Acknowledgements

This research was supported by the Max Planck ETH Center
for Learning Systems. GA acknowledges funding from
Google DeepMind and University of Oxford. This project
has received funding from the European Research Council
(ERC) under the European Union’s Horizon 2020 research
and innovation programme grant agreement No 815943.

References

A¨ıt-Sahalia, Y. Maximum likelihood estimation of dis-
cretely sampled diffusions: a closed-form approximation
approach. Econometrica, 70(1):223–262, 2002.

Archambeau, C., Cornford, D., Opper, M., and Shawe-
Taylor, J. Gaussian process approximations of stochastic
differential equations. Journal of machine learning re-
search, 1:1–16, 2007.

Arjovsky, M., Chintala, S., and Bottou, L. Wasserstein gen-
erative adversarial networks. In International Conference
on Machine Learning, pp. 214–223, 2017.

Bauer, S., Gorbach, N. S., Miladinovic, D., and Buhmann,
J. M. Efﬁcient and ﬂexible inference for stochastic sys-
In Advances in Neural Information Processing
tems.
Systems, pp. 6988–6998, 2017.

Bhat, H. S., Madushani, R., and Rawat, S. Parameter in-
ference for stochastic differential equations with density
tracking by quadrature. In International Workshop on
Simulation, pp. 99–113. Springer, 2015.

Calderhead, B., Girolami, M., and Lawrence, N. D. Ac-
celerating bayesian inference over nonlinear differential
equations with gaussian processes. In Advances in neural
information processing systems, pp. 217–224, 2009.

Donnet, S. and Samson, A. A review on estimation
of stochastic differential equations for pharmacoki-
netic/pharmacodynamic models. Advanced Drug De-
livery Reviews, 65(7):929–939, 2013.

Doss, H. Liens entre ´equations diff´erentielles stochastiques

et ordinaires. 1977.

Dziugaite, G. K., Roy, D. M., and Ghahramani, Z. Training
generative neural networks via maximum mean discrep-
ancy optimization. arXiv preprint arXiv:1505.03906,
2015.

Elerian, O., Chib, S., and Shephard, N. Likelihood inference
for discretely observed nonlinear diffusions. Economet-
rica, 69(4):959–993, 2001.

Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B.,
Warde-Farley, D., Ozair, S., Courville, A., and Bengio,
Y. Generative adversarial nets. In Advances in neural
information processing systems, pp. 2672–2680, 2014.

Gorbach, N. S., Bauer, S., and Buhmann, J. M. Scalable vari-
ational inference for dynamical systems. In Advances in
Neural Information Processing Systems, pp. 4806–4815,
2017.

Gretton, A., Borgwardt, K. M., Rasch, M. J., Sch¨olkopf,
B., and Smola, A. A kernel two-sample test. Journal of
Machine Learning Research, 13(Mar):723–773, 2012.

Hurn, A. and Lindsay, K. Estimating the parameters of
stochastic differential equations. Mathematics and com-
puters in simulation, 48(4-6):373–384, 1999.

Hurn, A. S., Jeisman, J., and Lindsay, K. A. Seeing the
wood for the trees: A critical evaluation of methods to es-
timate the parameters of stochastic differential equations.
Journal of Financial Econometrics, 5(3):390–455, 2007.

Jim´enez, M., Madsen, H., Bloem, J., and Dammann, B. Esti-
mation of non-linear continuous time models for the heat
exchange dynamics of building integrated photovoltaic
modules. Energy and Buildings, 40(2):157–167, 2008.

Karimi, H. and McAuley, K. B. Bayesian objective func-
tions for estimating parameters in nonlinear stochastic
differential equation models with limited data. Industrial
& Engineering Chemistry Research, 57(27):8946–8961,
2018.

Li, Y., Swersky, K., and Zemel, R. Generative moment
matching networks. In International Conference on Ma-
chine Learning, pp. 1718–1727, 2015.

Lotka, A. J. The growth of mixed populations: two species
competing for a common food supply. Journal of the
Washington Academy of Sciences, 22(16/17):461–469,
1932.

Nielsen, J. N., Madsen, H., and Young, P. C. Parameter esti-
mation in stochastic differential equations: an overview.
Annual Reviews in Control, 24:83–94, 2000.

Picchini, U. Sde toolbox: Simulation and estimation of
stochastic differential equations with matlab. 2007.

Pieschner, S. and Fuchs, C. Bayesian inference for diffu-
sion processes: Using higher-order approximations for
transition densities. arXiv preprint arXiv:1806.02429,
2018.

Eraker, B. Mcmc analysis of diffusion models with ap-
plication to ﬁnance. Journal of Business & Economic
Statistics, 19(2):177–191, 2001.

Rasmussen, C. E. Gaussian processes in machine learning.
In Advanced lectures on machine learning, pp. 63–71.
Springer, 2004.

AReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

Riesinger, C., Neckel, T., and Rupp, F. Solving random
ordinary differential equations on gpu clusters using mul-
tiple levels of parallelism. SIAM Journal on Scientiﬁc
Computing, 38(4):C372–C402, 2016.

Ruttor, A., Batz, P., and Opper, M. Approximate gaussian
process inference for the drift function in stochastic dif-
ferential equations. In Advances in Neural Information
Processing Systems, pp. 2040–2048, 2013.

Ryder, T., Golightly, A., McGough, A. S., and Prangle,
D. Black-box variational inference for stochastic differ-
ential equations. International Conference on Machine
Learning, 2018.

S¨arkk¨a, S., Hartikainen, J., Mbalawata, I. S., and Haario,
H. Posterior inference on parameters of stochastic dif-
ferential equations via non-linear gaussian ﬁltering and
adaptive mcmc. Statistics and Computing, 25(2):427–
437, 2015.

Sørensen, H. Parametric inference for diffusion processes
observed at discrete points in time: a survey. International
Statistical Review, 72(3):337–354, 2004.

Sussmann, H. J. On the gap between deterministic and
stochastic ordinary differential equations. The Annals of
Probability, pp. 19–41, 1978.

Tronarp, F. and S¨arkk¨a, S.

Iterative statistical linear
regression for gaussian smoothing in continuous-time
non-linear stochastic dynamic systems. arXiv preprint
arXiv:1805.11258, 2018.

van der Meulen, F., Schauer, M., et al. Bayesian estima-
tion of discretely observed multi-dimensional diffusion
processes using guided proposals. Electronic Journal of
Statistics, 11(1):2358–2396, 2017.

Vrettas, M. D., Opper, M., and Cornford, D. Variational
mean-ﬁeld algorithm for efﬁcient inference in large sys-
tems of stochastic differential equations. Physical Review
E, 91(1):012148, 2015.

Wenk, P., Gotovos, A., Bauer, S., Gorbach, N., Krause, A.,
and Buhmann, J. M. Fast gaussian process based gradi-
ent matching for parameter identiﬁcation in systems of
nonlinear odes. arXiv preprint arXiv:1804.04378, 2018.

Yang, L., Zhang, D., and Karniadakis, G. E. Physics-
informed generative adversarial networks for stochastic
differential equations. arXiv preprint arXiv:1811.02033,
2018.

Yildiz, C., Heinonen, M., Intosalmi, J., Mannerstr¨om, H.,
and L¨ahdesm¨aki, H. Learning stochastic differential equa-
tions with gaussian processes without gradient matching.
arXiv preprint arXiv:1807.05748, 2018.

AReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

A. Supplementary Material

A.1. Parameter Estimation Lorenz ’63

Ground truth
θ0 = 10
θ1 = 28
θ0 = 2.667
√
G =

10

NPSDE
1.28 ± 2.32
20.69 ± 5.73
1.86 ± 1.08
6.51 ± 1.31

ESGF
9.97 ± 0.33
28.00 ± 0.17
2.65 ± 0.06
3.03 ± 0.2

AReS
7.24 ± 1.08
28.16 ± 1.08
2.55 ± 0.10

MaRS
9.82 ± 0.56
27.96 ± 0.21
2.64 ± 0.07

3.54 ± 2.45

Table 2. Median and standard deviation of the 65 best runs of each algorithm. As ESGF crashed in roughly one third of all experiments,
we compare only the best 65 runs, where a crash is treated as a complete failure. While this provides somehow a fair comparison, it should
be noted that this signiﬁcantly overestimates the performance of all algorithms.

A.2. Training Times

OU Process
DW Potential
Lotka-Volterra
Lorenz ’63

NPSDE
48.8 ± 0.9

VGPA
∼ (54 ± 8)hours
406.9 ± 147.9 ∼ (12 ± 6)hours
1421.8 ± 1.0
39273.5 ± 8.9

/
/

ESGF
32.2 ± 0.3
35.2 ± 0.1
244.7 ± 1.2
670.7 ± 10.7

AReS
321.3 ± 0.8
326.0 ± 1.8
47.6 ± 1.3
26274.0 ± 2529.8

MaRS
17.3 ± 0.3
17.7 ± 2.0
19.3 ± 1.1
721.1 ± 10.7

Table 3. Computational times (in seconds) required for training the different algorithms.

A.3. Densities for Ancestral Sampling of the SDE-Based Model

Given the graphical model in Figure 1a, it is straightforward to compute the densities used in the ancestral sampling scheme
in Algorithm 1. After marginalizing out ˙z, the joint density described by the graphical model can be written as

p(o, z, y|φ, G, σ) = p(o|G)p(z|φ)p(y|z, o, σ)

Substituting the densities given by Equations (10), (11), (13) and (21) yields

p(o, z, y|φ, G, σ) = N (o|0, BΩBT )N (z|0, Cφ)N (y|z + o, T).

Using a change of variables to simplify notation, we write

p(o, z, y|φ, G, σ) = N (o|0, ˜Ω)N (z|0, Cφ)N (y|z + o, T).

(34)

(35)

(36)

This equation is now subsequently modiﬁed by observing that the product of two Gaussian densities in the same random
variable is again a Gaussian density:

p(o, z, y|φ, G, σ) = N (o|0, ˜Ω)N (z|0, Cφ)N (y|z + o, T)
= N (o|0, ˜Ω)N (z|0, Cφ)N (z|y − o, T)
= N (o|0, ˜Ω)N (y − o|0, Cφ + T)N (z|mz, Cz)
= N (o|0, ˜Ω)N (o|y, Cφ + T)N (z|mz, Cz)
= N (y|0, ˜Ω + Cφ + T)N (o|mo, Co)N (z|mz, Cz)

where

mz = Cz(T−
Cz = (C−

1

1(y − o))
1
1)−

φ + T−

mo = Co(Cφ + T)−
Co = ( ˜Ω−

1 + (Cφ + T)−

1y

1

1)−

(37)

(38)

(39)

(40)

(41)

AReS and MaRS - Adversarial and MMD-Minimizing Regression for SDEs

This formula can be further reﬁned with the Woodbury identity, i.e.

which leads to

and

which leads to

1
Cz = (C−

φ + T−

1
1)−

= Cφ − Cφ(Cφ + T)−
= Cφ(Cφ + T)−

1T

1Cφ

mz = Cφ(Cφ + T)−

1(y − o)

Co = ( ˜Ω−

1 + (Cφ + T)−

1
1)−
= ˜Ω − ˜Ω( ˜Ω + Cφ + T)−
= ˜Ω( ˜Ω + Cφ + T)−

1 ˜Ω
1(Cφ + T)

mo = ˜Ω( ˜Ω + Cφ + T)−

1y

Since we observe y, we are interested in calculating the conditional distribution

p(o, z|y, φ, G, σ) =

p(o, z, y|φ, G, σ)
p(y|φ, G.σ)

(42)

(43)

(44)

(45)

(46)

Conveniently enough, the marginal density of y is already factorized out in Equation (37) (compare Equation (22)). Thus,
we have

p(o, z|y, φ, G, σ) = N (o|mo, Co)N (z|mz, Cz)
(47)
As N (o|mo, Co) is independent of z, we can employ ancestral sampling by ﬁrst obtaining a sample of o through
N (o|mo, Co), and then utilizing such sample to get z through N (z|mz, Cz).

A.4. Calculating the GP Posterior for Data-Based Ancestral Sampling

Given the graphical model in Figure 1b, we can calculate the densities used in the ancestral sampling scheme in Algorithm
1. After marginalizing out ˙z and using the variable substitutions introduced in Equation (36), the joint density described by
the graphical model can be written as

p(o, z, y|φ, G, σ) = p(o|G)p(y|σ, o, z)p(z|φ)

where

= N (o|0, ˜Ω)N (y|z + o, T)N (z|0, Cφ)
= N (o|0, ˜Ω)N (o|y − z, T)N (z|0, Cφ)
= N (o|m, C)N (y − z|0, ˜Ω + T)N (z|0, Cφ)
= N (o|m, C)N (z|y, ˜Ω + T)N (z|0, Cφ)
= N (o|m, C)N (y|0, ˜Ω + T + Cφ)N (z|µz, Σz),

µz = Σz( ˜Ω + T)−
Σz = (( ˜Ω + T)−

1y
1
1 + C−
φ )−

1

= Cφ − Cφ( ˜Ω + T + Cφ)−
= ( ˜Ω + T)( ˜Ω + T + Cφ)−
= Cφ( ˜Ω + T + Cφ)−

1Cφ
1Cφ
1( ˜Ω + T).

After marginalizing out o and dividing by the marginal of y, we get the conditional distribution

p(z|y, φ, G, σ) = N (z|µz, Σz).

(48)

(49)

(50)

(51)

