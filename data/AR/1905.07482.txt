Learning to Reconstruct 3D Manhattan Wireframes from a Single Image

Yichao Zhou1,2,∗ Haozhi Qi1 Yuexiang Zhai1 Qi Sun2 Zhili Chen2 Li-Yi Wei2 Yi Ma1

1UC Berkeley

2Adobe Research

1
2
0
2

r
p
A
6
1

]

V
C
.
s
c
[

2
v
2
8
4
7
0
.
5
0
9
1
:
v
i
X
r
a

Abstract

In this paper, we propose a method to obtain a compact
and accurate 3D wireframe representation from a single im-
age by eﬀectively exploiting global structural regularities.
Our method trains a convolutional neural network to simul-
taneously detect salient junctions and straight lines, as well
as predict their 3D depths and vanishing points. Compared
with the state-of-the-art learning-based wireframe detection
methods, our network is simpler and more uniﬁed, leading
to better 2D wireframe detection. With global structural
priors from parallelism, our method further reconstructs
a full 3D wireframe model, a compact vector representa-
tion suitable for a variety of high-level vision tasks such
as AR and CAD. We conduct extensive evaluations on a
large synthetic dataset of urban scenes as well as real im-
ages. Our code and datasets have been made public at
https://github.com/zhou13/shapeunity.

1. Introduction

Recovering 3D geometry of a scene from RGB images is
one of the most fundamental and yet challenging problems
in computer vision. Most existing oﬀ-the-shelf commer-
cial solutions to obtain 3D geometry still requires active
depth sensors such as structured lights (e.g., Apple ARKit
and Microsoft Mixed Realty Toolkit) or LIDARs (popular
in autonomous driving). Although these systems can meet
the needs of speciﬁc purposes, they are limited by the cost,
range, and working conditions (indoor or outdoor) of the
sensors. The representations of ﬁnal outputs are typically
dense point clouds, which are not only memory and compu-
tation intense, but also may contain noises and errors due to
transparency, occlusions, reﬂections, etc.

On the other hand, traditional image-based 3D recon-
struction methods, such as Structure from Motion (SfM) and
visual SLAM, often rely on local features. Although the ef-
ﬁciency and reliability have been improving (e.g., Microsoft
Hololens, Magic Leap), they often need multiple cameras
with depth sensors [13] for better accuracy. The ﬁnal scene

∗This work was done when Y. Zhou was an intern at Adobe Research.

(a) Input image

(b) 3D wireframe

(c) Novel view

Figure 1. Column (a) shows the input images overlaid with the
groundtruth wireframes, in which the red and blue dots represent
the C- and T-type junctions, respectively. Column (b) shows the
predicted 3D wireframe from our system, with grayscale visualiz-
ing depth. Column (c) shows alternative views of (b). Note that
our system recovers geometrically salient wireframes, without be-
ing aﬀected by the textural lines, e.g., the vertical textural patterns
on the Big Ben facade.

representation remains quasi-dense point clouds, which are
typically incomplete, noisy, and cumbersome to store and
share. Consequently, complex post-processing techniques
such as plane-ﬁtting [11] and mesh reﬁnement [14, 19] are
required. Such traditional representations can hardly meet
the increasing demand for high-level 3D modeling, content
editing, and model sharing from hand-held cameras, mobile
phones, and even drones.

Unlike conventional 3D geometry capturing systems, the
human visual system does not perceive the world as uni-
formly distributed points.
Instead, humans are remark-
ably eﬀective, eﬃcient, and robust in utilizing geometrically
salient global structures such as lines, contours, planes, and
smooth surfaces to perceive 3D scenes [1]. However, it re-
mains challenging for vision algorithms to detect and utilize
such global structures from local image features, until recent
advances in deep learning which makes learning high-level
features possible from labeled data. The examples include

1

 
 
 
 
 
 
detecting planes [29, 18], surfaces [9], 2D wireframes [12],
room layouts [34], key points for mesh ﬁtting [30, 28], and
sparse scene representations from multiple images [5].

In this work, we infer global 3D scene layouts from
learned line and junction features, as opposed to local corner-
like features such as SIFT [7], ORB [21], or line segments
[10, 4, 23] used in conventional SfM or visual SLAM sys-
tems. Our algorithm learns to detect a special type of wire-
frames that consist of junctions and lines representing the
corners and edges of buildings. We call our representation
the geometric wireframe and demonstrate that together with
certain global priors (such as globally or locally Manhattan
[2, 7, 23]), the wireframe representation allows eﬀective and
accurate recovery of the scene’s 3D geometry, even from a
single input image. Our method trains a neural network to
estimate global lines and two types of junctions with depths,
and constructs full 3D wireframes using the estimated depths
and geometric constraints.

Previously, there have been eﬀorts trying to understand
the indoor scenes with the help of the 3D synthetic datasets
such as the SUNCG [24, 31]. Our work aims at natural urban
environments with a variety of geometries and textures. To
this end, we build two new datasets containing both synthetic
and natural urban scenes. Figure 1 shows the sampled results
of the reconstruction and Figure 2 shows the full pipeline of
our system.
Contributions of this paper. Comparing to existing wire-
frame detection algorithms such as [12], our method

• jointly detects junctions, lines, depth, and vanishing
points with a single neural network, exploiting the tight
relationship among those geometric structures;

• learns to diﬀerentiate two types of junctions: the physi-
cal intersections of lines and planes “C-junctions”, and
the occluding “T-junctions”;

• recovers a full 3D wireframe of the scene from the lines

and junctions detected in a single RGB image.

2. Methods

As depicted in Figure 2, our system starts with a neural
network that takes a single image as input and jointly predicts
multiple 2D heatmaps, from which we vectorize lines and
junctions as well as estimate their initial depth values and
vanishing points. We call this intermediate result a 2.5D
wireframe. Using both the depth values and vanishing points
estimated from the same network as the prior, we then lift
the wireframe from the 2.5D image-space into the full 3D
world-space.

2.1. Geometric Representation

In a geometric wireframe W = (V, E) of the scene, V
and E ⊆ V × V are the junctions and lines. Speciﬁcally, E
represents lines from physical intersections of two planes

while V represents (physical or projective) intersections of
lines among E. Unlike [10, 12], our E totally excludes
planar textural lines, such as the vertical textures of Big Ben
in Figure 1. The so-deﬁned W aims to capture global scene
geometry instead of local textural details.1 By ruling out
planar textural lines, we can group the junctions into two
categories. Let 𝐽𝒗 ∈ {𝐶, 𝑇 } be the junction type of 𝒗, in
which each junction can either be a C-junction (𝐽𝒗 = 𝐶)
or a T-junction (𝐽𝒗 = 𝑇). Corner C-junctions are actual
intersections of physical planes or edges, while T-junctions
are generated by occlusion. Examples of T-junctions (in
blue) and C-junctions (in red) can be found in Figure 1. We
denote them as two disjoint sets V = V𝐶 ∪V𝑇 , in which V𝐶 =
{𝒗 ∈ V | 𝐽𝒗 = 𝐶} and V𝑇 = {𝒗 ∈ V | 𝐽𝒗 = 𝑇 }. We note that
the number of lines incident to a T-junction in E is always
1 rather than 3 because a T-junction do not connect to the
two foreground vertices in 3D. Junction types are important
for inferring 3D wireframe geometry, as diﬀerent 3D priors
will be applied to each type.2 For each C-junction 𝒗𝑐 ∈ V𝐶 ,
deﬁne 𝑧𝒗𝑐 as the depth of vertex 𝒗𝑐, i.e., the 𝑧 coordinate
of 𝒗𝑐 in the camera space. For each occlusional T-junction
𝒗𝑡 ∈ V𝑇 , we deﬁne 𝑧𝒗𝑡 as the depth on the occluded line in the
background because the foreground line depth can always be
recovered from other junctions. With depth information, 3D
wireframes that are made of C-junctions, T-junctions, and
lines give a compact representation of the scene geometry.
Reconstructing such 3D wireframes from a single image is
our goal.

2.2. From a Single Image to 2.5D Representation

Our ﬁrst step is to train a neural network that learns the
desired junctions, lines, depth, and vanishing points from our
labeled datasets. We ﬁrst brieﬂy describe the desired outputs
from the network and the architecture of the network. The
associated loss functions for training the network will be
speciﬁed in detail in the next sections.

Given the image 𝐼 of a scene, the pixel-wise outputs of our
neural network consist of ﬁve outputs − junction probability
𝐽, junction oﬀset 𝑶, edge probability 𝐸, junction depth D,
and vanishing points 𝑽:

𝑌 (cid:17) (𝐽, 𝑶, 𝐸, D, 𝑽),

ˆ𝑌 (cid:17) ( ˆ𝐽, ˆ𝑶, ˆ𝐸, ˆD, ˆ𝑽),

(1)

where symbols with and without hats represent the ground
truth and the prediction from the neural network, respec-
tively. The meaning of each symbol is detailed in Sec-
tion 2.2.2.

1In urban scenes, lines from regular textures (such as windows on a
facade) do encode accurate scene geometry [32]. The neural network can
still use them for inferring the wireframe but only not to keep them in
the ﬁnal output, which is designed to give a compact representation of the
geometry only.

2There is another type of junctions which are caused by lines intersecting

with the image boundary. We treat them as C-junctions for simplicity.

Figure 2. Overall pipeline of the proposed method.

2.2.1 Network Design
Our network structure is based on the stacked hourglass
network [22]. The input images are cropped and re-scaled
to 512 × 512 before entering the network. The feature-
extracting module, the ﬁrst part of the network, includes
strided convolution layers and one max pooling layer to
downsample the feature map to 128 × 128. The following
part consists of 𝑆 hourglass modules. Each module will
gradually downsample then upsample the feature map. The
stacked hourglass network will gradually reﬁne the output
map to match the supervision from the training data. Let the
output of the 𝑗th hourglass module given the 𝑖th image be
𝐹𝑗 (𝐼𝑖). During the training stage, the total loss to minimize
is:

𝐿total (cid:17)

𝑁
∑︁

𝑆
∑︁

𝑖=1

𝑗=1

𝐿 (𝑌 ( 𝑗)
𝑖

, ˆ𝑌𝑖) =

𝑁
∑︁

𝑆
∑︁

𝑖=1

𝑗=1

𝐿 (𝐹𝑗 (𝐼𝑖), ˆ𝑌𝑖),

where 𝑖 represents the index of images in the training dataset;
𝑗 represents the index of the hourglass modules; 𝑁 repre-
sents the number of training images in a batch; 𝑆 represents
the number of stacks used in the neural network; 𝐿(·, ·) rep-
resents the loss of an individual image; 𝑌 ( 𝑗)
represents the
predicted intermediate representation of image 𝐼𝑖 from the
𝑗th hourglass module, and ˆ𝑌𝑖 represents the ground truth
intermediate representation of image 𝐼𝑖.

𝑖

The loss of an individual image is a superposition of the

loss functions 𝐿 𝑘 speciﬁed in the next section:

𝐿 (cid:17) ∑︁
𝑘

𝜆𝑘 𝐿 𝑘 , 𝑘 ∈ {𝐽, 𝑶, 𝐸, D, 𝑽}.

The hyper-parameters 𝜆𝑘 represents the weight of each sub-
loss. During experiments, we set 𝜆 so that 𝜆𝑘 𝐿 𝑘 are of
similar scales.
2.2.2 Output Maps and Loss Functions
Junction Map 𝐽 and Loss 𝐿 𝐽 . The ground truth junction
map ˆ𝐽 is a down-sampled heatmap for the input image,
whose value represents whether there exists a junction in
that pixel. For each junction type 𝑡 ∈ {𝐶, 𝑇 }, we estimate
its junction heatmap

(cid:40)

ˆ𝐽𝑡 ( 𝒑) =

1 ∃𝒗 ∈ V𝑡 : 𝒑 = (cid:98) 𝒗
4 (cid:99)
0 otherwise

, 𝑡 ∈ {𝐶, 𝑇 }.

where 𝒑 is the integer coordinate on the heatmap and 𝒗 is
the coordinate of a junction with type 𝑡 in the image space.
Following [22], the resolution of the junction heatmap is 4
times less than the resolution of the input image.

Because some pixels may contain two types of junctions,
we treat the junction prediction as two per-pixel binary clas-
siﬁcation problems. We use the classic softmax cross en-
tropy loss to predict the junction maps:

𝐿 𝐽 (𝐽, ˆ𝐽) (cid:17) 1
𝑛
𝑡 ∈ {𝐶,𝑇 }

∑︁

𝒑

∑︁

CrossEntropy (cid:0)𝐽𝑡 ( 𝒑), ˆ𝐽𝑡 ( 𝒑)(cid:1) ,

where 𝑛 is the number of pixels of the heatmap. The resulting
𝐽𝑡 (𝑥, 𝑦) ∈ (0, 1) represents the probability whether there
exists a junction with type 𝑡 at [4𝑥, 4𝑥 + 4) × [4𝑦, 4𝑦 + 4) in
the input image.
Oﬀset Map 𝑶 and Loss 𝐿𝑶. Comparing to the input im-
age, the lower resolution of 𝐽 might aﬀect the precision of

Feature Extraction & Hourglass x 4CONVsDepth MapsJunction HeatmapsEdge MapsVanishing PointsWireframe Vectorization3D LiftingNeural Network2.5D InferenceCONVsCONVsCONVsInput Imagejunction positions. Inspired by [27], we use an oﬀset map
to store the diﬀerence vector from ˆ𝐽 to its original position
with sub-pixel accuracy:

ˆ𝑶𝑡 ( 𝒑) =

(cid:40) 𝒗
4 − 𝒑 ∃𝒗 ∈ V𝑡 : 𝒑 = (cid:98) 𝒗
4 (cid:99)
otherwise
0

, 𝑡 ∈ {𝐶, 𝑇 }.

We use the ℓ2-loss for the oﬀset map and use the heatmap
as a mask to compute the loss only near the actual junctions.
Mathematically, the loss function is written as

𝐿𝑶 (𝑶, ˆ𝑶) (cid:17) ∑︁

(cid:205)

𝑡 ∈ {𝐶,𝑇 }

(cid:12)𝑶𝑡 ( 𝒑) − ˆ𝑶𝑡 ( 𝒑)(cid:12)
(cid:12)
(cid:12)
𝒑 ˆ𝐽𝑡 ( 𝒑) (cid:12)
2
(cid:12)
(cid:12)
(cid:12)
2
(cid:205)
𝒑 ˆ𝐽𝑡 ( 𝒑)

,

where 𝑶𝑡 ( 𝒑) is computed by applying a sigmoid and con-
stant translation function to the last layer of the oﬀset branch
in the neural network to enforce 𝑶𝑡 ( 𝒑) ∈ [0, 1)2. We nor-
malize 𝐿𝑶 by the number of junctions of each type.
Edge Map 𝐸 and Loss 𝐿𝐸 . To estimate line positions,
we represent them in an edge heatmap. For the ground
truth lines, we draw them on the edge map using an anti-
aliasing technique [33] for better accuracy. Let dist( 𝒑, 𝑒) be
the shortest distance between a pixel 𝒑 and the nearest line
segment 𝑒. We deﬁne the edge map to be

(cid:40)

ˆ𝐸 ( 𝒑) =

max𝑒 1 − dist( 𝒑, 𝑒) ∃𝑒 ∈ E : dist( 𝒑, 𝑒) < 1,
0

otherwise.

Intuitively, 𝐸 ( 𝒑) ∈ [0, 1] represents the probability of a
line close to point 𝒑. Because the range of the edge map
is always between 0 and 1, we can treat it as a probability
distribution and use the sigmoid cross entropy loss on the 𝐸
and ˆ𝐸:

𝐿𝐸 (𝐸, ˆ𝐸) (cid:17) 1
𝑛

∑︁

𝒑

CrossEntropy (cid:0)𝐸 ( 𝒑), ˆ𝐸 ( 𝒑)(cid:1) .

Junction Depth Maps D and Loss 𝐿 D. To estimate the
depth 𝑧𝒗 for each junction 𝒗, we deﬁne the junction-wise
depth map as

ˆD𝑡 ( 𝒑) =

(cid:40)𝑧𝒗 ∃𝒗 ∈ V𝑡 : 𝒑 = (cid:98) 𝒗
4 (cid:99)
otherwise
0

, 𝑡 ∈ {𝐶, 𝑇 }.

In many datasets with unknown depth units and camera
intrinsic matrix 𝐾, 𝑧𝒗 remains a relative scale instead of ab-
solute depth. To remove the ambiguity from global scaling,
we use scale-invariant loss (SILog) which has been intro-
duced in the single image depth estimation literature [3]. It
removes the inﬂuence of the global scale by summing the
log diﬀerence between each pixel pair.

𝐿𝐷 (D, ˆD) (cid:17) ∑︁

𝑡

∑︁

−

𝑡

1
𝑛𝑡

1
𝑛2
𝑡

∑︁

(cid:0) log D𝑡 ( 𝒑) − log ˆD𝑡 ( 𝒑)(cid:1) 2

𝒑 ∈V𝑡
(cid:0) ∑︁

𝒑 ∈V𝑡

log D𝑡 ( 𝒑) − log ˆD𝑡 ( 𝒑)(cid:1) 2.

Vanishing Point Map 𝑽 and Loss 𝐿𝑽 . Lines in man-
made outdoor scenes often cluster around the three mutually
orthogonal directions. Let 𝑖 ∈ {1, 2, 3} represent these three
directions. In perspective geometry, parallel lines in direc-
tion 𝑖 will intersect at the same vanishing point (𝑉𝑖,𝑥, 𝑉𝑖,𝑦)
in the image space, possibly at inﬁnity. To prevent 𝑉𝑖,𝑥 or
𝑉𝑖,𝑦 from becoming too large, we normalize the vector so
that

𝑽𝑖 =

1
𝑉 2
𝑖,𝑥 + 𝑉 2

𝑖,𝑦 + 1

(cid:2)𝑉𝑖,𝑥, 𝑉𝑖,𝑦, 1(cid:3)𝑇 .

(2)

Because the two horizontal vanishing points 𝑽1 and 𝑽2 are
order agnostic from a single RGB image, we use the Chamfer
ℓ2-loss for 𝑽1 and 𝑽2, and the ℓ2-loss for 𝑽3 (the vertical
vanishing point):

𝐿𝑽 (𝑽, ˆ𝑽) (cid:17) min((cid:107)𝑽1 − ˆ𝑽1(cid:107), (cid:107)𝑽2 − ˆ𝑽1(cid:107))

+ min((cid:107)𝑽1 − ˆ𝑽2(cid:107), (cid:107)𝑽2 − ˆ𝑽2(cid:107)) + (cid:107)𝑽3 − ˆ𝑽3 (cid:107)2
2

.

2.3. Heatmap Vectorization

As seen from Figure 2, the outputs of the neural network
are essentially image-space 2.5D heatmaps of the desired
wireframe. Vecterization is needed to obtain a compact
wireframe representation.
Junction Vectorization. Recovering the junctions V from
the junction heatmaps 𝐽 is straightforward. Let 𝜗𝐶 and 𝜗𝑇
be the thresholds for 𝐽𝐶 and 𝐽𝑇 . The junction candidate sets
can be estimated as

V𝑡 ← { 𝒑 + 𝑶𝑡 ( 𝒑) | 𝐽𝑡 ( 𝒑) ≥ 𝜗𝑡 }, 𝑡 ∈ {𝐶, 𝑇 }.

(3)

Line Vectorization. Line vectorization has two stages.
In the ﬁrst stage, we detect and construct the line candi-
dates from all the corner C-junctions. This can be done
by enumerating all the pairs of junctions 𝒖, 𝒘 ∈ V𝐶 , con-
necting them, and testing if their line conﬁdence score is
greater than a threshold 𝑐(𝒖, 𝒘) ≥ 𝜗𝐸 . The conﬁdence
score of a line with two endpoints 𝒖 and 𝒘 is given as
𝑐(𝒖, 𝒘) = 1
𝒑 ∈𝑃 (𝒖,𝒘) 𝐸 ( 𝒑) where 𝑃(𝒖, 𝒘) represents
|𝒖𝒘 |
the set of pixels in the rasterized line (cid:174)𝒖𝒘, and | (cid:174)𝒖𝒘| represents
the number of pixels in that line.

(cid:205)

In the second stage, we construct all the lines between
“T-T” and “T-C” junction pairs. We repeatedly add a T-
junction to the wireframe if it is tested to be close to a
detected line. Unlike corner C-junctions, the degree of a
T-junction is always one. So for each T-junction, we ﬁnd
the best edge associated with it. This process is repeated
until no more lines could be added. Finally, we run a post-
processing procedure to remove lines that are too close or
cross each other. By handling C-junctions and T-junctions
separately, our line vectorization algorithm is both eﬃcient
and robust for scenes with hundreds of lines. A more detailed
description is discussed in the supplementary material.

2.4. Image-Space 2.5D to World-Space 3D

So far, we have obtained vectorized junctions and lines in
2.5D image space with depth in a relative scale. However, in
scenarios such as AR and 3D design, absolute depth values
are necessary for 6DoF manipulation of the 3D wireframe.
In this section, we present the steps to estimate them with
our network predicted vanishing points.
2.4.1 Calibration from Vanishing Points
In datasets such as MegaDepth [16], the camera calibration
matrix 𝐾 ∈ R3×3 of each image is unknown, although it is
critical for a full 3D wireframe reconstruction. Fortunately,
calibration matrices can be inferred from three mutually or-
thogonal vanishing points if the scenes are mostly Manhat-
tan. According to [20], if we transform the orthogonal van-
ishing points 𝑽𝑖 to the calibrated coordinates ¯𝑽𝑖 (cid:17) 𝐾 −1𝑽𝑖,
then ¯𝑽𝑖 should be mutually orthogonal, i.e.,

𝑽𝑖𝐾 −𝑇 𝐾 −1𝑽 𝑗 = 0, ∀𝑖, 𝑗 ∈ {1, 2, 3}, 𝑖 ≠ 𝑗 .

These equations impose three linearly independent con-
straints on 𝐾 −𝑇 𝐾 −1 and would enable solving up to three
unknown parameters in the calibration matrix, such as the
optical center and the focal length.
2.4.2 Depth Reﬁnement with Vanishing Points
Due to the estimation error, the predicted depth map may
not be consistent with the detected vanishing points 𝑽𝑖. In
practice, we ﬁnd the neural network performs better on esti-
mating the vanishing points than predicting the 2.5D depth
map. This is probably because there are more geometric
cues for the vanishing points, while estimating depth re-
quires priors from data. Furthermore, the unit of the depth
map might be unknown due to the dataset (e.g., MegaDepth)
and the usage of SILog loss. Therefore, we use the vanishing
points to reﬁne the junction depth and determine its absolute
value. Let ˜𝑧𝒗 (cid:17) D𝐽𝒗 (𝒗) be the predicted depth for junction
𝒗 from our neural network. We design the following convex
objective function:

min
𝑧, 𝛼

3
∑︁

𝑖=1

∑︁

(cid:13)
(cid:13)(𝑧𝒖 ¯𝒖 − 𝑧𝒗 ¯𝒗) × ¯𝑽𝑖

(cid:13)
(cid:13)2

(𝒖,𝒗) ∈A𝑖
+ 𝜆𝑅

∑︁

(cid:107)𝑧𝒗 − 𝛼 ˜𝑧𝒗 (cid:107)2
2

(4)

subject to

𝒗 ∈V
𝑧𝒗 ≥ 1, ∀𝒗 ∈ V,
𝜆𝑧𝒖 + (1 − 𝜆)𝑧𝒗 ≤ 𝑧𝒘,
∀𝒘 ∈ V𝑇 , (𝒖, 𝒗) ∈ E : 𝒘 = 𝜆𝒖 + (1 − 𝜆)𝒗,

(5)

(6)

where A𝑖 represents the set of lines corresponding to van-
ishing point 𝑖; 𝛼 resolves the scale ambiguity in the depth
dimension; ¯𝒖 (cid:17) 𝐾 −1 [𝑢 𝑥 𝑢 𝑦 1]𝑇 is the vertex position in the
calibrated coordinate. The goal of the ﬁrst term in Equa-
tion (4) is to encourage the line (𝑧𝒖 ¯𝒖, 𝑧𝒘 ¯𝒘) parallel to van-
ishing point ¯𝑽𝑖 by penalizing over the parallelogram area

spanned by those two vectors. The second term regularizes
𝑧𝒗 so that it is close to the network’s estimation ˜𝑧𝒗 up to a
scale. Equation (5) prevents the degenerating solution 𝒛 = 0.
Equation (6) is a convex relaxation of 𝜆
, the
𝑧𝒖
depth constraint for T-junctions.

+ 1−𝜆
𝑧𝒘

≥ 1
𝑧𝒗

3. Datasets and Annotation

One of the bottlenecks of supervised learning is inad-
equate dataset for training and testing. Previously, [12]
develops a dataset for 2D wireframe detection. However,
their dataset does not contain the 3D depth or the type of
junctions. To the best of our knowledge, there is no public
image dataset that has both wireframe and 3D information.
To validate our approach, we create a hybrid dataset with a
larger number of synthetic images of city scenes and smaller
number of real images. The former has accurate 3D geome-
try and automatically annotated ground truth 3D wireframes
from mesh edges, while the latter is manually labelled with
less accurate 3D information.
SceneCity Urban 3D Dataset (SU3). To obtain a large
number of images with accurate geometrical wireframes,
we use a progressively generated 3D mesh repository,
SceneCity3. The dataset is made up of simple polygons
with artist-tuned materials and textures. We extract the
C-junctions from the vertices of the mesh and compute
T-junctions using computational geometry algorithms and
OpenGL. Our dataset includes 230 cities, each containing
8 × 8 city blocks. The cities have diﬀerent building arrange-
ments and lighting conditions by varying the sky maps. We
randomly generate 100 viewpoints for each city based on cri-
teria such as the number of captured buildings to simulate
hand-held and drone cameras. The synthetic outdoor images
are then rendered through global illumination by Blender,
which provides 23, 000 images in total. We use the images
of the ﬁrst 227 cities for training and the rest 3 cities for
validation.
Realistic Landmark Dataset. The MegaDepth v1 dataset
[17] contains real images of 196 landmarks in the world. It
also contains the depth maps of these images via structure
from motion. We select about 200 images that approxi-
mately meet the assumptions of our method, manually label
their wireframes, and register them with the rough 3D depth.
In our experiments, we pretrain our network on the SU3
dataset, and then use 2/3 of the real images to ﬁnetune the
model. The remaining 1/3 is for testing.

4. Experiments

We conduct extensive experiments to evaluate our method
and validate the design of our pipeline with ablation studies.
In addition, we compare our method with the state-of-the-
art 2D wireframe extraction approaches. We then evaluate

3https://www.cgchan.com/

the performance of our vanishing point estimation and depth
reﬁnement steps. Finally, we demonstrate the examples of
our 3D wireframe reconstruction.

4.1. Implementation Details

Our backbone is a two-stack hourglass network [22].
Each stack consists of 6 stride-2 residual blocks and 6 nearest
neighbour upsamplers. After the stacked hourglass feature
extractor, we insert diﬀerent “head” modules for each map.
Each head contains a 3 × 3 convolutional layer to reduce
the number of channels followed by a 1 × 1 convolutional
layer to compute the corresponding map. For vanishing
point regression, we use a diﬀerent head with two consecu-
tive stride-2 convolution layers followed by a global average
pooling layer and a fully-connected layer to regress the po-
sition of the vanishing points.

During the training, the ADAM [15] optimizer is used.
The learning rate and weight decay are set to 8 × 10−4
and 1 × 10−5. All the experiments are conducted on four
NVIDIA GTX 1080Ti GPUs, with each GPU holding 12
mini-batches. For the SceneCity Urban 3D dataset, we train
our network for 25 epochs. The loss weights are set as
𝜆 𝐽 = 2.0, 𝜆𝑶 = 0.25 𝜆𝐸 = 3.0, and 𝜆 D = 0.1 so that all the
loss terms are roughly equal. For the real-world dataset, we
initialize the network with the one trained on the SU3 dataset
and use a 10−4 learning rate to train for 5 epochs. We hori-
zontally ﬂip the input image as data-augmentation. Unless
otherwise stated, the input images are cropped to 512 × 512.
The ﬁnal output is of stride 4, i.e., with size 128 × 128.
During heatmap vectorization, we use the hyper-parameter
𝜗𝐶 = 0.2, 𝜗𝑇 = 0.3, and 𝜗𝐸 = 0.65.

4.2. Evaluation Metrics

We use the standard AP (average precision) from object
detection [6] to evaluate our junction prediction results. Our
algorithm produces a set of junctions and their associated
scores. The prediction is considered correct if its ℓ2 distance
to the nearest ground truth is within a threshold. By this cri-
terion, we can draw the precision-recall curve and compute
the mean AP (mAP) as the area under this curve averaging
over several diﬀerent thresholds of junction distance.

In our implementation, mAP is averaged over thresh-
olds 0.5, 1.0, and 2.0. In practical applications, long edges
between junctions are typically preferred over short ones.
Therefore, we weight the mAP metric by the sum of the
length of the lines connected to that junction. We use AP𝐶
and AP𝑇 to represent such weighted mAP metric for C-
junctions and T-junctions, respectively. We use the inter-
section over union (IoU) metric to evaluate the quality of
line heatmaps. For junction depth map, we evaluate it on
the positions of the ground truth junctions with the scale
invariant logarithmic error (SILog) [3, 8].

supervisions
𝐸
𝑶

𝐽
CE ℓ1 ℓ2 CE SILog Ord AP𝐶 AP𝑇 IoU𝐸 SILog

D

D

𝐽

metrics
𝐸

(a) (cid:88)
(b) (cid:88) (cid:88)
(c) (cid:88)
(d)
(e) (cid:88)
(f)
(g)
(h) (cid:88)

(cid:88)

(cid:88)

(cid:88) (cid:88)

(cid:88) (cid:88)

65.4 57.1
69.3 55.8
72.8 60.1

/

/

74.3 61.0

/
/

/
/

74.4 61.2

/
/
/

73.3

74.2

/
/
74.3

/
/
/

/

/

3.59
4.14
3.04

(cid:88)
(cid:88)

(cid:88)

(cid:88)

Table 1. The columns under “supervisions” indicate what losses and
supervisions are used during training; the columns under “metrics“
indicate the performance given such supervision during evaluation.
The second row shows the symbols of the feature maps; the third
row shows the loss function names of the corresponding maps.
“CE” stands for the cross entropy loss, “SILog” loss is proposed
by [3], and “Ord” represents the ordinary loss in [16]. “/” indicates
that the maps are not generated and thus not evaluable.

4.3. Ablation on Joint Training and Loss Functions

We run a series of experiments to investigate how diﬀer-
ent feature designs and multi-task learning strategies aﬀect
the wireframe detection accuracy. Table 1 presents our abla-
tion studies with diﬀerent combinations of tasks to research
the eﬀects of joint training. We also evaluate the choice of
ℓ1- and ℓ2-losses for oﬀset regression and the ordinary loss
[16] for depth estimation. We conclude that:

1. Regressing oﬀset is signiﬁcantly important for local-
izing junctions (7.4 points for AP𝐶 and 3 points for
AP𝑇 ), by comparing rows (a-c). In addition, ℓ2 loss is
better than ℓ1 loss, probably due to its smoothness.
2. Joint training junctions and lines improve in both tasks.
Rows (c-e) show improvements with about 1.5 points in
AP𝐶 , and 0.9 point in AP𝑇 and line IoU. This indicates
the tight relation between junctions and lines.

3. For depth estimation, we test the ordinal loss from [16].
To our surprise, it does not improve the performance on
our dataset (rows (f-g)). We hypothesis that this is be-
cause the relative orders of sparsely annotated junctions
are harder to predict than the foreground/background
relationship in [16].

4. According to rows (f) and (h), joint training with junc-
tions and lines slightly improves the performance of
depth estimation by 0.55 SILOG point.

4.4. Comparison with 2D Wireframe Extraction

One recent work related to our system is [12], which
extracts 2D wireframes from single RGB images. However,
it has several fundamental diﬀerences from ours: 1) It does
not diﬀerentiate between corner C-junctions and occluding

Figure 3. Comparison with [12] on 2D wireframe detection. We
improve the baseline method by 4 points.

avg[𝐸V] med[𝐸V]
2.69◦
4.65◦

1.55◦
0.14◦

avg[𝐸f] med[𝐸f]
2.3%
4.02% 1.38%
12.40% 0.21% 20.0%

failures

Ours
[4, 26]

Table 2. Performance comparison between our method and LSD/J-
linkage [4, 26] for vanishing point detection. 𝐸V represents the
angular error of 𝑽𝑖 in degree, 𝐸f represents the relative error of
the recovered camera focal lengths, and “failures” represents the
percentage of cases whose 𝐸V > 8◦.

T-junctions. 2) Its outputs are only 2D wireframes while
ours are 3D. 3) It trains two separated networks for detecting
junctions and lines. 4) It detects texture lines while ours only
detects geometric wireframes.

In this experiment, we compare the performance with
[12]. The goal of this experiment is to validate the impor-
tance of joint training. Therefore we follow the exact same
training procedure and vectorization algorithms as in [12]
except for the uniﬁed objective function and network struc-
ture. Figure 3 shows the comparison of precision and recall
curves evaluated on the test images, using the same evalu-
ation metrics as in [12]. Note that due to diﬀerent network
designs, their model has about 30M parameters while ours
only has 19M. With fewer parameters, our system achieves
4-point AP improvement over [12] on the 2D wireframe
detection task.

As a sanity check, we also train our network separately
for lines and junctions, as shown by the green curve in
Figure 3. The result is only slightly better than [12]. This
experiment shows that our performance gain is from jointly
trained objectives instead of neural network engineering.

4.5. Vanishing Points and Depth Reﬁnement

In Section 2.4, vanishing point estimation and depth re-
ﬁnement are used in the last stage of the 3D wireframe
representation. Their robustness and precision are critical
to the ﬁnal quality of the system output. In this section, we
conduct experiments to evaluate the performance of these

(a) Ground truth

(b) Before reﬁnement

(c) After reﬁnement

Figure 4. (b) shows a rendering of the wireframe from ˜𝑧𝒗 from a
slightly diﬀerent view, while (c) shows the wireframe improved by
the optimization in Section 2.4.2.

methods.

For vanishing point detection, Table 2 shows the per-
formance comparison between our neural network-based
method and the J-Linkage clustering algorithm [26, 25] with
the LSD line detector [4] on the SU3 dataset. We ﬁnd that
our method is more robust in term of the percentage of
failures and average error, while the traditional line cluster
algorithm is more accurate when it does not fail. This is
because LSD/J-linkage applies a stronger geometric prior,
while the neural network learns the concept from the data.
We choose our method for its simplicity and robustness, as
the focus of this project is more on the 3D wireframe repre-
sentation side, but we believe the performance can be further
improved by engineering a hybrid algorithm or designing a
better network structure.

We also compare the error of the junction depth before
and after depth reﬁnement in term of SILog. We ﬁnd that on
65% of the testing cases, the error is smaller after the reﬁne-
ment. This shows that the geometric constraints from van-
ishing points does help improve the accuracy of the junction
depth in general. As shown in Figure 4, the depth reﬁnement
also improves the visual quality of the 3D wireframe. On
the other hand, the depth reﬁnement may not be as eﬀective
when the vanishing points are not precise enough, or the
scene is too complex so that there are many erroneous lines
in the wireframe. Some failure cases can be found in the
supplementary material.

4.6. 3D Wireframe Reconstruction Results

We test our 3D wireframe reconstruction method on both
the synthetic dataset and the real images. Examples illustrat-
ing the visual quality of the ﬁnal reconstruction are shown
in Figures 5 and 6. A video demonstration can be found
in http://y2u.be/l3sUtddPJPY. We do not show the
ground truth 3D wireframes for the real landmark dataset
due to its incomplete depth maps.

Acknowledgement

This work is partially supported by Sony US Research
Center, Adobe Research, Berkeley BAIR, and Bytedance
Research Lab.

0.40.50.60.70.80.9Recall0.20.30.40.50.60.70.80.9Precisionf=0.4f=0.5f=0.5f=0.6f=0.7f=0.8PR Curve for AP and f-measure(AP=67.5, f=72.1) [12](AP=67.8, f=72.6) ours-sep(AP=71.0, f=74.3) ours-jointGround truth 2D Our Inferred 2D [12] Inferred 2D

Ground truth 3D

Inferred 3D

Ground truth 3D

Inferred 3D

Figure 5. Left group: comparison of 2D results between the ground truth (column 1), our predictions (column 2), and the results from
wireframe parser [12] (column 3). Middle (columns 4-5) and right groups (columns 6-7): novel views of the ground truths and our
reconstructions to demonstrate the 3D representation of the scene. The color of the wireframes visualizes depth.

Ground truth

Inferred

Novel views

Ground truth

Inferred

Novel views

Figure 6. Test results on real images from MegaDepth.

References

[1] Marco Bertamini, Mai Helmy, and Daniel Bates. The vi-
sual system prioritizes locations near corners of surfaces (not
just locations near a corner). Attention, Perception, & Psy-
chophysics, 75(8):1748–1760, Nov 2013. 1

[2] James M Coughlan and Alan L Yuille. Manhattan world:
Compass direction from a single image by bayesian inference.
In ICCV, volume 2, pages 941–947, 1999. 2

[3] David Eigen, Christian Puhrsch, and Rob Fergus. Depth
map prediction from a single image using a multi-scale deep
network. In NIPS, 2014. 4, 6

[4] Jakob Engel, Thomas Schöps, and Daniel Cremers. LSD-
SLAM: Large-scale direct monocular slam. In ECCV. 2014.
2, 7

[5] S. M. Ali Eslami, Danilo Jimenez Rezende, Frederic Besse,
Fabio Viola, Ari S. Morcos, Marta Garnelo, Avraham Ruder-
man, Andrei A. Rusu, Ivo Danihelka, Karol Gregor, David P.
Reichert, Lars Buesing, Theophane Weber, Oriol Vinyals,
Dan Rosenbaum, Neil Rabinowitz, Helen King, Chloe Hillier,
Matt Botvinick, Daan Wierstra, Koray Kavukcuoglu, and
Demis Hassabis. Neural scene representation and rendering.
Science, 2018. 2

[6] Mark Everingham, Luc Van Gool, Christopher KI Williams,
John Winn, and Andrew Zisserman. The Pascal visual object
classes (VOC) challenge. International journal of computer
vision, 88(2):303–338, 2010. 6

[7] Yasutaka Furukawa, Brian Curless, Steven M Seitz, and
Richard Szeliski. Manhattan-world stereo. In CVPR, 2009.
2

[8] Andreas Geiger, Philip Lenz, Christoph Stiller, and Raquel
Urtasun. Vision meets robotics: The KITTI dataset. The
International Journal of Robotics Research, 2013. 6

[9] Thibault Groueix, Matthew Fisher, Vladimir G. Kim, Bryan
Russell, and Mathieu Aubry. AtlasNet: A papier-mâché ap-
proach to learning 3D surface generation. In CVPR, 2018.
2

[10] Manuel Hofer, Michael Maurer, and Horst Bischof. Eﬃcient
3D scene abstraction using line segments. Computer Vision
and Image Understanding, Apr. 2017. 2

[11] Jingwei Huang, Angela Dai, Leonidas Guibas, and Matthias
Niessner. 3Dlite: Towards commodity 3D scanning for con-
tent creation. ACM Trans. Graph., 2017. 1

[12] Kun Huang, Yifan Wang, Zihan Zhou, Tianjiao Ding,
Shenghua Gao, and Yi Ma. Learning to parse wireframes
in images of man-made environments. In CVPR, 2018. 2, 5,
6, 7, 8

[13] Shahram Izadi, David Kim, Otmar Hilliges, David
Molyneaux, Richard Newcombe, Pushmeet Kohli, Jamie
Shotton, Steve Hodges, Dustin Freeman, Andrew Davison,
et al. KinectFusion: real-time 3D reconstruction and inter-
action using a moving depth camera. In Proceedings of the
24th annual ACM symposium on User interface software and
technology, pages 559–568. ACM, 2011. 1

[14] Michael Kazhdan, Matthew Bolitho, and Hugues Hoppe.
Poisson surface reconstruction. In Proceedings of the fourth
Eurographics symposium on Geometry processing, volume 7,
2006. 1

[15] Diederik P Kingma and Jimmy Ba. Adam: A method for
stochastic optimization. arXiv preprint arXiv:1412.6980,
2014. 6

[16] Zhengqi Li and Noah Snavely. MegaDepth: Learning single-
In Computer

view depth prediction from internet photos.
Vision and Pattern Recognition (CVPR), 2018. 5, 6

[17] Zhengqi Li and Noah Snavely. MegaDepth: Learning single-
view depth prediction from internet photos. In CVPR, 2018.
5

[18] Chen Liu, Jimei Yang, Duygu Ceylan, Ersin Yumer, and Yasu-
taka Furukawa. PlaneNet: Piece-wise planar reconstruction
from a single RGB image. In CVPR, 2018. 2

[19] William E Lorensen and Harvey E Cline. Marching cubes:
A high resolution 3D surface construction algorithm.
In
ACM siggraph computer graphics, volume 21, pages 163–
169. ACM, 1987. 1

[20] Yi Ma, Stefano Soatto, Jana Kosecka, and S. Shankar Sas-
try. An Invitation to 3D Vision: From Images to Geometric
Models. SpringerVerlag, 2003. 5

[21] Raúl Mur-Artal, JMM Montiel, and Juan D Tardós. ORB-
SLAM: A versatile and accurate monocular SLAM system.
IEEE Transactions on Robotics, 2015. 2

[22] Alejandro Newell, Kaiyu Yang, and Jia Deng. Stacked hour-
glass networks for human pose estimation. In ECCV, 2016.
3, 6

[23] Srikumar Ramalingam and Matthew Brand. Lifting 3D man-
hattan lines from a single image. In Proceedings of the IEEE
International Conference on Computer Vision, pages 497–
504, 2013. 2

[24] Shuran Song, Fisher Yu, Andy Zeng, Angel X. Chang, Mano-
lis Savva, and Thomas Funkhouser. Semantic scene comple-
tion from a single depth image. In CVPR, 2017. 2

[25] Jean-Philippe Tardif. Non-iterative approach for fast and
accurate vanishing point detection. In 2009 IEEE 12th Inter-
national Conference on Computer Vision, pages 1250–1257.
IEEE, 2009. 7

[26] Roberto Toldo and Andrea Fusiello. Robust multiple struc-
tures estimation with J-linkage. In European conference on
computer vision, pages 537–547. Springer, 2008. 7

[27] Xinggang Wang, Kaibing Chen, Zilong Huang, Cong Yao,
and Wenyu Liu. Point linking network for object detection.
arXiv, 2017. 4

[28] Jiajun Wu, Tianfan Xue, Joseph J Lim, Yuandong Tian,
Joshua B Tenenbaum, Antonio Torralba, and William T Free-
In European
man. Single image 3D interpreter network.
Conference on Computer Vision, pages 365–382. Springer,
2016. 2

[29] Fengting Yang and Zihan Zhou. Recovering 3D planes from
a single image via convolutional neural networks. In ECCV,
2018. 2

[30] Kaipeng Zhang, Zhanpeng Zhang, Zhifeng Li, and Yu Qiao.
Joint face detection and alignment using multitask cascaded
IEEE Signal Processing Letters,
convolutional networks.
23(10):1499–1503, 2016. 2

[31] Yinda Zhang, Shuran Song, Ersin Yumer, Manolis Savva,
Joon-Young Lee, Hailin Jin, and Thomas Funkhouser.
Physically-based rendering for indoor scene understanding
using convolutional neural networks. In CVPR, 2017. 2

[32] Zhengdong Zhang, Arvind Ganesh, Xiao Liang, and Yi Ma.
International

Tilt: Transform invariant low-rank textures.
journal of computer vision, 99(1):1–24, 2012. 2

[33] Alois Zingl. A rasterizing algorithm for drawing curves,

2012. 4

[34] Chuhang Zou, Alex Colburn, Qi Shan, and Derek Hoiem.
LayoutNet: Reconstructing the 3D room layout from a single
RGB image. In CVPR, 2018. 2

