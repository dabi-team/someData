9
1
0
2

n
u
J

0
2

]

C
A
.
h
t
a
m

[

1
v
3
4
5
8
0
.
6
0
9
1
:
v
i
X
r
a

Eﬃcient Gr¨obner Bases Computation over Principal Ideal Rings

Christian Eder

University of Leipzig
Department of Mathematics
D-04109 Leipzig

Tommy Hofmann

Technische Universtit¨at Kaiserslautern
Department of Mathematics
D-67663 Kaiserslautern

Abstract

In this paper we present a new eﬃcient variant to compute strong Gr¨obner bases over quotients
of principal ideal domains. We show an easy lifting process which allows us to reduce one
computation over the quotient R/nR to two computations over R/aR and R/bR where n = ab
with coprime a, b. Possibly using available factorization algorithms we may thus recursively
reduce some strong Gr¨obner basis computations to Gr¨obner basis computations over ﬁelds for
prime factors of n, at least for squarefree n. Considering now a computation over R/nR we
can run a standard Gr¨obner basis algorithm pretending R/nR to be ﬁeld. If we discover a non-
invertible leading coeﬃcient c, we use this information to try to split n = ab with coprime a, b.
If no such c is discovered, the returned Gr¨obner basis is already a strong Gr¨obner basis for the
input ideal over R/nR.

Keywords: Gr¨obner bases, Principal ideal rings

1. Introduction

In 1964 Hironaka already investigated computational approaches towards singularities and
introduced the notion of standard bases for local monomial orders, see, for example, Hironaka
(1964); Hironaka, H. (1964); Grauert (1972). In Buchberger (1965, 2006), Buchberger initiated,
in 1965, the theory of Gr¨obner bases for global monomial orders by which many fundamental
problems in mathematics, science and engineering can be solved algorithmically. Speciﬁcally,
he introduced some key structural theory, and based on this theory, proposed the ﬁrst algorithm
for computing Gr¨obner bases. Buchberger’s algorithm introduced the concept of critical pairs
and repeatedly carries out a certain polynomial operation (called reduction).

Once the underlying structure is no longer a ﬁeld, one needs the notion of strong Gr¨obner
bases respectively strong standard bases. Inﬂuential work was done by Kandri-Rody and Kapur

Email addresses: eder@math.uni-leipzig.de (Christian Eder), thofmann@mathematik.uni-kl.de (Tommy

Hofmann)
Preprint submitted to Journal of Symbolic Computation

June 21, 2019

 
 
 
 
 
 
(1988), introducing the ﬁrst generalization of Buchberger’s algorithm over Euclidean domains
computing strong Gr¨obner bases. Since then only a few optimizations have been introduced, see,
for example, Wienand (2011); Lichtblau (2012); Eder et al. (2017). For more general rings, like
principal ideal domains or rings, more recent approaches can be found, for example, in Norton
and Sˇalˇagean (2001); Pauer (2007); Popescu (2016); Francis and Verron (2019). Common to all
these approaches is the idea to transfer ideas from the well studied ﬁeld case, like criteria for
predicting zero reductions or the use of linear algebra, to the setting of rings.

In some sense, we take this approach to the extreme by just treating the underlying ring as
ﬁeld and by hopefully splitting the computation to smaller problems in case it fails. To be more
precise, consider a quotient R/nR of a principal ideal domain R for some non-trivial element
n ∈ R. If I ⊆ (R/nR)[x] is an ideal for which we want to ﬁnd a strong Gr¨obner basis computation,
we pretend that n is prime, that is, R/nR is a ﬁeld and apply a classical Gr¨obner basis algorithm
from the ﬁeld case to I. If this does not encounter a non-invertible element, then we are done.
Otherwise we use a non-invertible element to split n = ab with coprime elements a, b ∈ R.
After computing strong Gr¨obner bases of I over R/aR and R/bR, we pull them back along the
canonical isomorphism R/nR → R/aR × R/bR to obtain a strong Gr¨obner basis of I. In case
we cannot split n, we fall back to a classical algorithm for computing strong Gr¨obner basis.
The most favorable case for the new algorithm are squarefree elements n, since then any non-
invertible element allows us to split n.

The idea of working in R/nR as if n were a prime, is a common strategy in computer alge-
bra. Other examples include the computation of matrix normal forms over R/nR, see Fieker and
Hofmann (2014). To make this approach work in the setting of strong Gr¨obner bases, we inves-
tigate the behavior of strong Gr¨obner bases with respect to quotients and the Chinese remainder
theorem. By properly normalizing the strong Gr¨obner basis, we prove that one can eﬃciently
pull back strong Gr¨obner bases along a projection R → R/nR (Theorem 10) as well as along a
canonical isomorphism R/nR → R/aR × R/bR (Theorem 12).

The algorithm has been implemented to compute strong Gr¨obner bases over residue class
rings of the form Z/nZ, where n ∈ Z>0, see Section 5. Running standard benchmarks for Gr¨obner
basis computations for n of diﬀerent shape shows a consistent speed-up across all examples
In case of squarefree n, the new algorithm improves upon the state of the art
(except one).
implementations by a factor of 10–100.

Acknowledgments

This work was supported by DFG project SFB-TRR 195. The authors thank Claus Fieker for

helpful comments.

2. Basic notions

Let R be a principal ideal ring, that is a unital commutative ring such that every ideal is
principal. Note that R is not necessarily an integral domain. If a, b ∈ R are two elements with
aR ⊆ bR we denote by a/b by abuse of notation any element c ∈ R with c · b = a. Recall that
a least common multiple of two elements a, b is an element l ∈ R such that lR = aR ∩ bR. By
abuse of notation we denote by lcm(a, b) such an element. Similarly, we denote by gcd(a, b) an
element of R with rR + sR = gcd(a, b)R and call it a greatest common divisor. For an element

2

n ∈ R we denote by πn : R → R/nR the canonical projection. For an ideal I ⊂ R we deﬁne the
annihilator of I by

Ann (I) = {c ∈ R | c · a = 0 ∀a ∈ I} .

For an element a ∈ R we denote by Ann (a) := Ann (hai) the annihilator of a.

A polynomial in n variables x1, . . . , xn over R is a ﬁnite R-linear combination of terms

av1,...,vn Q

n

i=1 xvi
i ,

ﬁnite

n

avxv ..=

av1,...,vn

xvi
i ,

f = X
v

Y
i=1

X
v∈Nn
such that v ∈ Nn and av ∈ R. The polynomial ring R[x] ..= R[x1, . . . , xn] in n variables over R
is the set of all polynomials over R together with the usual addition and multiplication. For f =
Pv avxv , 0 ∈ R[x] we deﬁne the degree of f by deg( f ) := max {v1 + · · · + vn | v ∈ Nn, av , 0}.
For f = 0 we set deg( f ) := −1.
We ﬁx once and for all a monomial order < on R[x], which, for the sake of simplicity, is
assumed to be global, that is, xα ≥ 1 for all α ∈ Nn. Given a monomial order < we can highlight
the maximal terms of elements in R[x] with respect to <: For f ∈ R[x] \ {0}, lt ( f ) is the lead
term, lm ( f ) the lead monomial, and lc ( f ) the lead coeﬃcient of f . For any set F ⊂ R[x] we
deﬁne the lead ideal L(F) = hlt ( f ) | f ∈ Fi; for an ideal I ⊂ R[x], L(I) is deﬁned as the ideal of
lead terms of all elements of I.

The reduction process of two polynomials f and g in R[x] depends now on the uniqueness of

the minimal remainder in the division algorithm in R:

Deﬁnition 1. Let f, g ∈ R[x] and let G = {g1, . . . , gr} ⊂ R[x] be a ﬁnite set of polynomials.

1. We say that g top-reduces f if lm (g) | lm ( f ) and lc (g) | lc ( f ). A top-reduction of f by g

is then given by

lc ( f )
lc (g)
2. Relaxing the reduction of the lead term to any term of f , we say that g reduces f . In
general, we speak of a reduction of a polynomial f with respect to a ﬁnite set F ⊂ R[x].
Let

lm ( f )
lm (g)

f −

g.

3. We say that f has a weak standard representation with respect to G if f =

some hi ∈ R[x] such that lm ( f ) = lm (cid:16)h jg j(cid:17) for some j ∈ {1, . . . , r}.

r
i=1 higi for
P

4. We say that f has a strong standard representation with respect to G if f =

r
i=1 higi for
P
some hi ∈ R[x] such that lm ( f ) = lm (cid:16)h jg j(cid:17) for some j ∈ {1, . . . , r} and lm ( f ) > lm (hkgk)
for all k , j.

This kind of reduction is equivalent to deﬁnition CP3 from Kandri-Rody and Kapur (1984)
and generalizes Buchberger’s attempt from Buchberger (1985). The result of such a reduction
might not be unique. This uniqueness is exactly the property Gr¨obner bases give us.

Deﬁnition 2. A ﬁnite set G ⊂ R[x] is called a Gr¨obner basis for an ideal I (with respect to <)
if G ⊂ I and L(G) = L(I). Furthermore, G is called a strong Gr¨obner basis if for any f ∈ I\{0}
there exists an element g ∈ G such that lt (g) | lt ( f ).

Remark 3. Note that G being a strong Gr¨obner basis is equivalent to all elements g ∈ G having
a strong standard representation with respect to G. See, for example, Theorem 1 in Lichtblau
(2012) for a proof.

3

Clearly, assuming that R is a ﬁeld, any Gr¨obner basis is a strong Gr¨obner basis. But in our
setting with R being a principal ideal ring one has to check the coeﬃcients, too, as explained in
Deﬁnition 1. The fact that for an arbitrary principal ideal ring the notions of Gr¨obner bases and
strong Gr¨obner bases do not agree, can be observed already for monomial ideals in univariate
polynomial rings:

Example 4. Let R = Z and I = hxi ∈ R[x]. Clearly, G := {2x, 3x} is a Gr¨obner basis for I:
L(I) = hxi and x = 3x − 2x ∈ L(G). But G is not a strong Gr¨obner basis for I since 2x ∤ x and
3x ∤ x.

In order to compute strong Gr¨obner bases we need to consider two diﬀerent types of special

polynomials:

Deﬁnition 5. Let f, g ∈ R[x], t = lcm (lm ( f ) , lm (g)), t f = t

lm( f ) , and tg = t

lm(g) .

1. Let a = lcm (lc ( f ) , lc (g)), a f = a

lc(g) , and ag = a

lc( f ) . A S-polynomial of f and g is denoted

by

spoly ( f, g) = a f t f f − agtgg.

2. Let b = gcd (lc ( f ) , lc (g)). Choose b f , bg ∈ R such that b = b f lc ( f ) + bglc (g). A GCD-

polynomial of f and g is denoted by

3. Let a ∈ R be a generator of Ann (lc ( f )). An annihilator polynomial of f is denoted by

gpoly ( f, g) = b f t f f + bgtgg.

apoly ( f ) = a f = a tail ( f ) .

Remark 6.

1. Note that spoly ( f, g) , gpoly ( f, g) as well as apoly ( f ) g are not uniquely deﬁned, since

quotients, B´ezout coeﬃcients and generators are in general not unique.

2. If lc ( f ) is not a zero divisor in R then apoly ( f ) = 0. It follows that if R is a domain, there

is no need to handle annihilator polynomials since 0 is the only zero divisor.

3. In the ﬁeld case we do not need to consider GCD-polynomials at all since we can always

normalize the polynomials, that is, ensure that lc ( f ) = 1.

From Example 4 it is clear that the usual Buchberger algorithm as in the ﬁeld case will not
compute a strong Gr¨obner basis as we would only consider spoly (2x, 3x) = 3 · 2x − 2 · 3x = 0.
Luckily, we can ﬁx this via taking care of the corresponding GCD-polynomial:

gpoly (2x, 3x) = (−1) · 2x − (−1) · 3x = x.

It follows that given an ideal I ⊂ R[x] a strong Gr¨obner basis for I can be achieved using a
generalized version of Buchberger’s algorithm computing not only strong standard representa-
tions of S-polynomials but also of GCD-polynomials and annihilator polynomials. We refer, for
example, to Lichtblau (2012) for more details.

So, how do we get a strong standard representations of elements w.r.t. some set G? The

answer is given by the concept of a normal form:

4

Deﬁnition 7. Let G denote the set of all ﬁnite subsets G ⊂ R[x]. We call the map NF : R[x] ×
G −→ R[x], ( f, G) 7−→ NF( f, G), a weak normal form (w.r.t. a monomial ordering <) if for all
f ∈ R[x] and all G ∈ G the following hold:

1. NF(0, G) = 0.
2. If NF( f, G) , 0 then lt (NF( f, G)) < L(G).
3. If f , 0 then there exists a unit u ∈ R[x] such that either u f = NF( f, G) or r = u f −

NF( f, G) has a strong standard representation with respect to G.
A weak normal form NFis called a normal form if we can always choose u = 1.

Algorithm 1 presents a normal form algorithm for computations:

Algorithm 1 Normal form with respect to a global monomial order < (NF)
Input: Polynomial f ∈ R[x], ﬁnite subset G ⊂ R[x]
Output: NF of f w.r.t. G and <

1: h ← f
2: while
3:

(cid:0)

4:
5: return h

h , 0 and Gh := {g ∈ G | g top-reduces h} , ∅

Choose g ∈ Gh.
h ← Top-reduction of h by g (see Deﬁnition 1)

do

(cid:1)

Now we state Buchberger’s algorithm for computing strong Gr¨obner bases, Algorithm 2. For
the theoretical background we refer to Greuel and Pﬁster (2007) and Becker and Weispfenning
(1993).

Algorithm 2 Buchberger’s algorithm for computing strong Gr¨obner bases (sBBA)
Input: Ideal I = h f1, . . . , fmi ⊂ R[x], normal form algorithm NF (depending on <)
Output: Gr¨obner basis G for I w.r.t. <

(cid:8)

apoly ( fi) | 1 ≤ i ≤ n

1: G ← { f1, . . . , fm}
2: P ←
3: P ← nspoly (cid:16) fi, f j(cid:17) , gpoly (cid:16) fi, f j(cid:17) | 1 ≤ i < j ≤ mo
4: while (P , ∅) do
5:

(cid:9)

6:
7:

8:

Choose h ∈ P, P ← P \ {h}
h ← NF (h, G)
if (h , 0) then
P ← P ∪
P ← P ∪
G ← G ∪ {h}

(cid:8)
(cid:8)

9:
10:
11: return G

apoly (h)
(cid:9)
spoly (g, h) , gpoly (g, h) | g ∈ G

(cid:9)

3. Strong Gr¨obner bases over principal ideal rings

In this section we give theoretical results for the computation of strong Gr¨obner bases over
principal ideal rings. These results will then be used in Section 4 for an improved computation of
strong Gr¨obner bases over quotients of principal ideal rings. We begin by analyzing Algorithm 2
in case all occurring leading coeﬃcients are invertible.

5

Lemma 8. Let I = h f1, . . . , fmi ⊂ R[x] be an ideal such that for all i = 1, . . . , m we have that
lc ( fi) is invertible in R. Moreover, assume that for each newly added polynomial h in Line 10 in
Algorithm 2 the polynomial lc (h) is invertible in R. Then Algorithm 2 does not need to consider
GCD-polynomials and annihilator polynomials.

Proof. We show that all GCD-polynomials and all annihilator polynomials are zero in the setting
of the lemma:

1. For each element g in the intermediate Gr¨obner basis G it holds that lc (g) is invertible in

R and thus, not a zero divisor. It follows that apoly (g) = 0 by deﬁnition.

2. For each gpoly ( f, g) for f, g ∈ G it holds that lc ( f ) | lc (g): lc ( f ) is invertible in R, so we

get

Again, by deﬁnition, gpoly ( f, g) = 0.

(cid:16)lc (g) · (lc ( f ))−1

(cid:17) lc ( f ) = lc (g) .

Remark 9. From Lemma 8 it follows that as long as Algorithm 2 does not encounter a lead co-
eﬃcient that is not invertible in R we can use Buchberger’s algorithm from the ﬁeld case without
the need to consider GCD-polynomials and annihilator polynomials for strongness properties.
In Section 4 we discuss how one can use this fact to improve the general computations of strong
Gr¨obner bases over R[x].

We next next show how to pull back a strong Gr¨obner bases along a canonical projection

R[x] → (R/nR)[x].

Theorem 10. Let n ∈ R, n , 0 and I ⊆ R[x] an ideal. Assume that Gn ⊆ R[x] is a set of
polynomials with the following properties:

1. πn(Gn) is a strong Gr¨obner basis of πn(I);
2. for every g ∈ Gn the leading coeﬃcient lc (g) divides n and lc (g) < nR.

Then Gn ∪ {n} is a strong Gr¨obner basis of I + nR[x].

Proof. It is clear that Gn ∪ {n} ⊆ I + nR[x]. Now let f ∈ I. If πn(lc ( f )) = 0, then the leading term
is a multiple of n. Thus we may assume that πn( f ) , 0. Since πn(Gn) is a strong Gr¨obner basis
of πn(I), there exists g ∈ Gn such that lt (πn(g)) divides lt (πn( f )). Hence we can ﬁnd h ∈ R[x]
with πn(h) · lt (πn(g)) = lt (πn( f )). We can assume that h is a term and lm (h) · lm (g) = lm ( f ). By
assumption we have πn(lt (g)) = lt (πn(g)) as well as πn(lt ( f )) = lt (πn( f )). Hence we can write
h · lt (g) − lt ( f ) = c · xdeg( f ) for some c ∈ nR. Since lc (g) divides n and lm (g) divides lm ( f ) it
follows that lt (g) divides lt ( f ).

Remark 11. Assume that we know that an ideal I ⊆ R[x] contains a constant polynomial n ∈ R,
n , 0. As I = I + nR[x], Theorem 10 implies that we can compute a strong Gr¨obner basis of I
be properly choosing the lifts of a strong Gr¨obner basis of the reduction πn(I) ⊆ (R/nR)[x]. For
R = Z, a similar idea can be found in Section 4 of Eder, C. et al. (2018). There it is described
how to check if an ideal I ⊆ Z[x] contains a constant polynomial n ∈ Z, n , 0. In case it exists,
the authors describe an ad hoc method which keeps the size of the coeﬃcients of the polynomials
in Algorithm 2 bounded by n.

We now consider the following situation. Assume that a, b, u, v ∈ R are elements with 1 =

ua + vb and ab = 0. Note that this implies (ua)2 = ua and (vb)2 = vb.

6

Theorem 12. Assume that I ⊆ R[x] is an ideal. Furthermore let K, L be ﬁnite index sets and
Ga = (ga,k)k∈K , Gb = (gb,l)l∈L strong Gr¨obner bases of I + aR[x] and I + bR[x] respectively,
satisfying the following conditions:

1. For k ∈ K, if ga,k is non-constant, then lc
2. For l ∈ L, if gb,l is non-constant, then lc

ga,k(cid:1)
(cid:0)
gb,l(cid:1)
(cid:0)

divides a and lc

divides b and lc

< aR
< bR.

ga,k(cid:1)
(cid:0)
gb,l(cid:1)

(cid:0)

For k ∈ K, l ∈ L deﬁne

lcm

fk,l =ua

lm
(cid:0)

lcm

(cid:0)

+vb

lm

, lm
ga,k(cid:1)
(cid:0)
gb,l(cid:1)
lm
(cid:0)
, lm
ga,k(cid:1)
(cid:0)
ga,k(cid:1)
lm
(cid:0)

gb,l(cid:1)(cid:1)
(cid:0)

gb,l(cid:1)(cid:1)
(cid:0)

· lc

ga,k(cid:1)
(cid:0)

gb,l

· lc

gb,l(cid:1)

(cid:0)

ga,k.

Then G = { fk,l | k ∈ K, l ∈ L} is a strong Gr¨obner basis of I.

Proof. Note that from 1 = ua + vb it follows at once that I = eaI + vbI. Hence I = eaI + vbI =
ea(I + bR[x]) + vb(I + aR[x]) = uahGbi + vbhGai. As lc
are coprime we have
ga,k(cid:1)
. Moreover, since
lcm(lc
gb,l(cid:1)

gb,l(cid:1)
(cid:0)
)R = (lc

)R ) aR ∩ bR = {0}

gb,l(cid:1)
(cid:0)
(lc

ga,k(cid:1)
(cid:0)

ga,k(cid:1)
(cid:0)

ga,k(cid:1)
(cid:0)

)R ∩ (lc

gb,l(cid:1)
(cid:0)

gb,l(cid:1)
(cid:0)

ga,k(cid:1)

and lc

) = lc

(cid:0)
lc

, lc

lc

(cid:0)

(cid:0)

we have

In particular

ua · lc

ga,k(cid:1)

(cid:0)

lc

gb,l(cid:1)
(cid:0)

+ vb · lc

gb,k(cid:1)
(cid:0)

lc

ga,l(cid:1)

(cid:0)

= lc

ga,k(cid:1)
(cid:0)

lc

gb,l(cid:1)

(cid:0)

, 0.

(cid:0)

lt

= lcm

fk,l(cid:1)

gb,l(cid:1)(cid:1)
(cid:0)
Consider now an element h ∈ I. Since h ∈ I + aR[x] and h ∈ I + bR[x], there exist
| lt (h). Thus lm (h) is divisible by
, that is, lt (h) is divisible by
gb,l(cid:1)
(cid:0)

| lt (h) and lt
ga,k(cid:1)
and lc (h) is divisible by lc

ga,k ∈ Ga, gb,l ∈ Gb such that lt
, lm
lcm
lt

gb,l(cid:1)
(cid:0)
ga,k(cid:1)
lc
(cid:0)

gb,l(cid:1)(cid:1)
(cid:0)

ga,k(cid:1)
(cid:0)

ga,k(cid:1)
(cid:0)

ga,k(cid:1)
(cid:0)

gb,l(cid:1)
(cid:0)

lm
(cid:0)

lc

, lm

· lc

(cid:0)

.

lm
(cid:0)
fk,l(cid:1)
.

(cid:0)

4. Algorithmic approach for computing in quotients of principal ideal rings

We now assume that R is a principal ideal domain. Additionally we now also ﬁx an ele-
ment n ∈ R, n , 0. Using the theoretical results from Section 3 we are now able to describe
improvements to the Gr¨obner basis computation over the base ring R/nR.

Corollary 13. Let I ⊆ (R/nR)[x] be an ideal and n = a · b a factorization of n into coprime
elements a, b ∈ R. Let K, L be ﬁnite index sets. Assume that Ga = (ga,k)k∈K ⊆ (R/nR)[x] is a set
of polynomials, such that πa(Ga) ⊆ (R/aR)[x] is a strong Gr¨obner basis of πa(I) ⊆ (R/aR)[x],
a ∈ Ga and for every g ∈ Ga \ {a}, the leading coeﬃcient lc (g) divides a and is not divisible by a.
Assume that Gb = (gb,l)l∈L ⊆ R/nR[x] has similar properties with respect to b. For i ∈ I, j ∈ J
deﬁne

lcm(lm

fk,l =ua

lcm(lm

+vb

gb,l(cid:1)
)
(cid:0)

gb,l(cid:1)
)

(cid:0)

, lm
ga,k(cid:1)
(cid:0)
gb,l(cid:1)
lm
(cid:0)
, lm
ga,k(cid:1)
(cid:0)
ga,k(cid:1)
lm
(cid:0)

· lc

ga,k(cid:1)

(cid:0)

gb,l

· lc

gb,l(cid:1)
(cid:0)

ga,k.

Then G = { fk,l | k ∈ K, l ∈ L} is a strong Gr¨obner basis of I.

7

Proof. Follows at once from Theorems 10 and 12 since for ¯a ∈ ¯R = R/nR we have ¯R/¯a ¯R (cid:27)
R/aR.

To use this, we need, given a divisor a ∈ R of n, a way to lift polynomials from R/aR to

R/nR such that the leading coeﬃcients divide n.

Lemma 14. There exists an algorithm, that given c ∈ R determines u ∈ R such that gcd(u, n) ∈
R× and uc = gcd(c, n) mod n.

Proof. This can be found in (Storjohann and Mulders, 1998, Section 2).

In case we have an algorithm for factoring elements of R into irreducible elements, this allows
us to reduce the strong Gr¨obner basis computation to computations over smaller quotient rings.
This approach is summarized in Algorithm 3.

Algorithm 3 Naive strong Gr¨obner basis over R/nR
Input: Ideal I = h f1 mod n, . . . , fm mod ni ⊂ (R/nR)[x].
Output: Strong Gr¨obner basis G for I
1: Factor n = pe1
1 · · · per
r , with pairwise coprime irreducible elements pi ∈ R.
2: For 1 ≤ i ≤ r compute strong Gr¨obner bases Gi of Ii = h f1 mod pei

(R/pei

i )R[x] using Algorithm 2.

3: Apply Corollary 13 recursively to obtain a strong Gr¨obner basis G of I.

i , . . . , fm mod pei

i i ⊆

Depending on the ring R, the particular n and the factorization algorithm, Step (1) is infea-
sible or not. For example if R = Z, the fastest factorization algorithms are subexponential in n,
rendering this approach futile for non-trivial example with large n. On the other hand, if R = Q[t]
or R = Fp[t] for some prime p, then factoring in R can be done in (randomized) polynomial time
in the size of n and thus is a good idea, at least from a theoretical point of view.

We now consider the case, where we cannot or do not want to factor the modulus n. The
basic idea is to run the algorithm from the ﬁeld case, pretending that R/nR is a ﬁeld, and to
stop whenever we ﬁnd a non-invertible leading coeﬃcient. If the algorithm discovers a non-
invertible element, we try to split the modulus and the computation of the strong Gr¨obner basis.
The splitting is based on the following consequence of so-called factor reﬁnement.

Proposition 15. There exists an algorithm that given a ∈ R with gcd(a, n) < R× ∪ nR, that is,
0 , ¯a < (R/nR)×, either

1. ﬁnds m ∈ R, k ∈ Z>1 with n = mk and m = gcd(a, m), or
2. ﬁnds coprime elements p, q ∈ R \ R× with n = p · q.

Proof. Using an algorithm for factor reﬁnement, for example the algorithm of Bach–Driscoll–
Shallit (see Bach et al. (1993)), we can ﬁnd a set S ⊆ R \ R× of coprime elements such that a
and n factor uniquely into elements of S and for all s ∈ S we have gcd(a, s) or gcd(b, s) not in
R×. Now pick m ∈ S with m | n. We can write n = mk · u with k ∈ Z>0 and u ∈ R coprime to m.
Depending on whether u is a unit or not, we are in case (1) or (2).

Incorporating this into the strong Gr¨obner basis computation we obtain Algorithm 4.

Theorem 16. Algorithm 4 terminates and is correct.

8

Algorithm 4 Strong Gr¨obner basis over R/nR
Input: Ideal I = h f1 mod n, . . . , fm mod ni ⊂ R/nR[x], monomial order <.
Output: Strong Gr¨obner basis G for I w.r.t. <

1: Apply Algorithm 2 to I and stop whenever there is a non-invertible lead coeﬃcient a ∈ R/nR.
2: if Step 1 returned G ⊆ (R/nR)[x] then
3:
4: else
5:

Return G.

Step 1 returned a ∈ R with gcd(a, n) < R× ∪ nR.
Apply Proposition 15 to the pair (a, n)
if Step 6 returned n = p · q with coprime p, q then

Set Ip = h f1 mod p, . . . , fm mod pi ⊆ (R/pR)[x].
Set Iq = h f1 mod q, . . . , fm mod qi ⊆ (R/qR)[x].
Apply Algorithm 4 to obtain strong Gr¨obner bases G p and Gq of Ip and Iq respec-

tively.

Use Corollary 13 to obtain a strong Gr¨obner basis G of I and return G.

else

Apply Algorithm 2 to I and return the resulting strong Gr¨obner basis of I.

6:
7:

8:
9:

10:

11:

12:

13:

Proof. Termination follows since in the recursion, the number of irreducible factors of n is
strictly decreasing. Correctness follows from Corollary 13.

Remark 17. The usefulness of the splitting depends very much on the factorization of n. For
example, if n = pe is the power of an irreducible element p, then Algorithm 4 is the same as
Algorithm 2. The most favorable input for Algorithm 4 are rings R/nR with n squarefree, that is,
n = p1 . . . pr is the product of pairwise coprime irreducible elements (including the case, where
n = p1 is itself irreducible). In this case, every non-invertible element allows us to split the
modulus into coprime elements. Thus all Gr¨obner basis computations can be done as in the ﬁeld
case.

5. Experimental results

In the following we present experimental results comparing our new approach to the current
implementations in the computer algebra systems Singular (Decker et al. (2019)) and Magma
(Bosma et al. (1997)). All computations were done on an Intel R(cid:13) Xeon R(cid:13) CPU E5-2643 v3 @
3.40GHz with 384GB RAM. Computations that took more than 24 hours were terminated by
hand.

Our new algorithm is implemented in the Julia package GB.jl (Eder and Hofmann (2019))
which is part of the OSCAR project of the SFB TRR-195. The package GB.jl is based on
the C library GB (Eder (2019)) which implements Faug`ere’s F4 algorithm (Faug`ere (1999)) for
computing Gr¨obner bases over ﬁnite ﬁelds. The implementation of Algorithm 4 uses GB and
Singular as follows: All the computations over a ring R/nR for which we want to execute the
algorithm from the ﬁeld case are delegated to GB. In case we ﬁnd n ∈ R such that n is not
prime but we cannot ﬁnd a factorization of n into coprime elements (Proposition 15 (1)), we
delegate the corresponding strong Gr¨obner basis computation to Singular. All the lifting and
recombination steps are done in Julia (see Fieker et al. (2017)). Note that in practice we always
compute minimal strong Gr¨obner bases and make sure that minimality is preserved during the
9

recombination using Corollary 13. This makes sure that for all intermediate Gr¨obner bases that
we compute the size is bounded by the size of a minimal strong Gr¨obner basis of the input.

We use a set of diﬀerent benchmark systems focusing on pair handling, the reduction process,
ﬁnding of reducers, respectively. We have computed strong Gr¨obner bases for these systems over
Zn using three diﬀerent settings for n:

1. For n = 2 · 3 · 5 · 7 · 11 · 13 · 17 · 19 · 23 (Table 1) we get a factorization down to the
ﬁnite prime ﬁelds. Thus in all theses examples our new implementation can use the F4
algorithm implemented in GB as base case. With “*” we highlight examples for which
there was no non-invertible element discovered, that is, the computation from the ﬁeld
case runs through without any splitting of n to be considered.

2. For n = 32771 · 32779 (Table 2) we can see that our approach of applying Lemma 8 is
very promising: In none of the examples tested we found non-invertible elements, thus
we compute the basis as if we are working over a ﬁnite ﬁeld, receiving a correct strong
Gr¨obner basis over Zn.

3. For n = 33 · 53 · 73 · 113 (Table 3) we, in general, have to use Singular’s strong Gr¨obner
basis algorithm for computing in Zpk . Still, we can see that our approach is most often
by a factor of at least 3 faster than directly applying Singular’s implementation over Zn.
The only exception is Jason-210, for which Singular is faster: The basis is huge (> 2, 009
generators), thus our new implementation needs roughly 75 of the overall 171 seconds to
apply the recombination and lifting due to Corollary 13. Again, we highlight with “*”
examples for which there was no non-invertible element discovered.

6. Conclusion

We have presented a new approach for computing strong Gr¨obner bases over principal ideal
rings R which exploits the factorization of composite moduli n to recursively compute strong
Gr¨obner bases in smaller rings and lifting the results back to R. In many situations the base cases
of this recursive step boil down to computations over ﬁnite ﬁelds which are much faster than
those over principal ideal rings.

One further optimization of our new approach might be the following: Once we have several
factors of n found, we can run the diﬀerent, independent Gr¨obner basis computations in parallel.
This is one of our next steps. Another one is to implement an optimized version of Faug`ere’s F4
algorithm for R/pkR in GB.

References

Bach, E., Driscoll, J., Shallit, J., 1993. Factor reﬁnement. J. Algorithms 15 (2), 199–222.

URL https://doi.org/10.1006/jagm.1993.1038

Becker, T., Weispfenning, V., 1993. Gr¨obner bases. Vol. 141 of Graduate Texts in Mathematics. Springerg, New York.

URL https://doi.org/10.1007/978-1-4612-0913-3

Bosma, W., Cannon, J., Playoust, C., 1997. The Magma algebra system. I. The user language. Journal of Symbolic

Computation 24 (3-4), 235–265.

Buchberger, B., 1965. Ein Algorithmus zum Auﬃnden der Basiselemente des Restklassenringes nach einem nulldimen-

sionalen Polynomideal. Ph.D. thesis, University of Innsbruck.

Buchberger, B., 1985. Gr¨obner-Bases: An Algorithmic Method in Polynomial Ideal Theory. Reidel Publishing Company,

Dodrecht - Boston - Lancaster.

10

Examples

New Algorithm

Singular

Magma

Cyclic-6
Cyclic-7
Cyclic-8

Katsura-8
Katsura-9
Katsura-10

Eco-10
Eco-11

F-744
F-855

Noon-7
Noon-8

Reimer-5
Reimer-6

Lichtblau

Mayr-42 *

Yang-1 *

Jason-210

0.233
3.871
26.211

2.152
6.831
29.814

2.468
12.329

1.131
4.879

2.309
25.398

0.749
5.748

0.124

32.672

54.851

52.167

4.453
1, 689.805
> 24h

89.154
1, 592.969
21, 316.400

67.440
738.252

61.754
1, 685.831

47.787
2, 809.623

6.899
869.740

2.904

332.307

210.097

178.348

1.170
303.579
8, 304.070

12.980
133.452
2, 546.010

110.530
2, 799.549

24.810
> 24h

388.050
> 24h

4.030
1, 282.950

1.630

199.360

115.130

> 24h

Table 1: Benchmark timings given in seconds, computations in Zn with n = 2 · 3 · 5 · 7 · 11 · 13 · 17 · 19 · 23

Buchberger, B., 2006. An Algorithm for Finding the Basis Elements of the Residue Class Ring of Zero Dimensional

Polynomial Ideal. Journal of Symbolic Computation 41 (3-4), 475 – 511.

Decker, W., Greuel, G.-M., Pﬁster, G., Sch¨onemann, H., 2019. Singular 4-1-2 — A computer algebra system for poly-

nomial computations. http://www.singular.uni-kl.de.

Eder, C., 2019. gb. https://github.com/ederc/gb.
Eder, C., Hofmann, T., 2019. gb. https://github.com/ederc/GB.jl.
Eder, C., Pﬁster, G., Popescu, A., 2017. On Signature-based Gr¨obner Bases over Euclidean Rings. In: ISSAC 2017:

Proceedings of the 2011 international symposium on Symbolic and algebraic computation. pp. 141–148.

Eder, C., Pﬁster, G., Popescu, A., 2018. Standard Bases over Euclidean Domains. https://arxiv.org/abs/1811.

05736.

Faug`ere, J.-C., June 1999. A new eﬃcient algorithm for computing Gr¨obner bases (F4). Journal of Pure and Applied

Algebra 139 (1–3), 61–88, http://www-salsa.lip6.fr/~jcf/Papers/F99a.pdf.

Fieker, C., Hart, W., Hofmann, T., Johansson, F., 2017. Nemo/Hecke: computer algebra and number theory packages
for the Julia programming language. In: ISSAC’17—Proceedings of the 2017 ACM International Symposium on
Symbolic and Algebraic Computation. ACM, New York, pp. 157–164.

Fieker, C., Hofmann, T., 2014. Computing in quotients of rings of integers. LMS J. Comput. Math. 17 (suppl. A), 349–

365.
URL https://doi.org/10.1112/S1461157014000291

Francis, M., Verron, T., 2019. Signature-based M¨oller’s algorithm for strong Gr¨obner bases over PIDs. CoRR

abs/1901.09586.
URL http://arxiv.org/abs/1901.09586

Grauert, H., 1972. ¨Uber die Deformation isolierter Singularit¨aten analytischer Mengen. Inventiones Mathematicae 15 (3),

171–198.

11

Examples

New Algorithm Singular Magma

Cyclic-6
Cyclic-7
Cyclic-8

Katsura-8
Katsura-9
Katsura-10

Eco-10
Eco-11

F-744
F-855

Noon-7
Noon-8

Reimer-5
Reimer-6

Lichtblau

Mayr-42

Yang-1

Jason-210

0.004
0.179
2.481

0.018
0.098
0.613

0.153
0.909

0.016
0.079

0.171
1.234

0.006
0.066

0.002

0.237
53.924
5, 970.100

0.070
3.130
257.180

1.252
11.066
113.251

15.824
201.770

2.182
11.939

3.993
78.320

0.136
3.036

0.041

0.330
2.390
18.960

2.970
22.360

0.250
1.710

1.140
8.920

0.130
2.320

0.010

32.168

53.562

2.781

309.142

333.880

193.240

196.930

12.576

62.040

Table 2: Benchmark timings given in seconds, computations in Zn with n = 32771 · 32779

Greuel, G.-M., Pﬁster, G., 2007. A Singular Introduction to Commutative Algebra, 2nd Edition. Springer Verlag.
Hironaka, H., 1964. Resolution of Singularities of an Algebraic Variety over a Field of Characteristic Zero: I. Annals of

Mathematics 79 (1), 109–203.

Hironaka, H., 1964. Resolution of Singularities of an Algebraic Variety over a Field of Characteristic Zero: II. Annals of

Mathematics 79 (2), 205–326.

Kandri-Rody, A., Kapur, D., 1984. Algorithms for computing Gr¨obner bases of polynomial ideals over various Euclidean

rings. In: Fitch, J. (Ed.), EUROSAM 84. Springer, Berlin, Heidelberg, pp. 195–206.

Kandri-Rody, A., Kapur, D., 1988. Computing a Gr¨obner basis of a polynomial ideal over a Euclidean domain. Journal

of Symbolic Computation 6 (1), 37 – 57.
URL http://www.sciencedirect.com/science/article/pii/S0747717188800208

Lichtblau, D., 2012. Eﬀective computation of strong Gr¨obner bases over Euclidean domains. Illinois J. Math. 56 (1),

177–194.
URL http://projecteuclid.org/euclid.ijm/1380287466

Norton, G. H., Sˇalˇagean, A., 2001. Strong Gr¨obner bases for polynomials over a principal ideal ring. Bulletin of the

Australian Mathematical Society 64 (3), 505–528.

Pauer, F., 2007. Gr¨obner bases with coeﬃcients in rings. Journal of Symbolic Computation 42 (11), 1003 – 1011.

URL http://www.sciencedirect.com/science/article/pii/S0747717107001022

Popescu, A., 2016. Signature Standard Bases over Principal Ideal Rings. Ph.D. thesis, Technische Universit¨at Kaiser-

slautern.
URL http://nbn-resolving.de/urn:nbn:de:hbz:386-kluedo-44575

Storjohann, A., Mulders, T., 1998. Fast algorithms for linear algebra modulo N. In: Algorithms—ESA ’98 (Venice). Vol.

1461 of Lecture Notes in Comput. Sci. Springer, Berlin, pp. 139–150.
URL https://doi.org/10.1007/3-540-68530-8_12

12

Examples

New Algorithm

Singular

Magma

Cyclic-6
Cyclic-7
Cyclic-8

Katsura-8
Katsura-9
Katsura-10

Eco-10
Eco-11

F-744
F-855

Noon-7
Noon-8

Reimer-5
Reimer-6

Lichtblau

Mayr-42 *

Yang-1 *

Jason-210

2.754
679.141
72, 386.042

27.054
433.774
1, 239.260

28.426
778.855

169.179
3, 434.641

1, 210.192
78, 048.640

2.717
92.295

0.279

32.601

60.499

171.565

5.374
1, 638.422
> 24h

59.659
883.497
11, 002.259

66.515
1, 058.806

343.612
21, 941.538

13, 291.706
> 24h

8.061
927.624

5.079

362.176

220.546

122.727

0.720
1, 209.289
9, 471.340

40.050
599.736
8.528.819

574.949
> 24h

28.996.159
> 24h

> 24h
> 24h

27.660
14, 069.210

4.060

327.420

204.740

> 24h

Table 3: Benchmark timings given in seconds, computations in Zn with n = 33 · 53 · 73 · 113

Wienand, O., 2011. Algorithms for symbolic computation and their applications - standard bases over rings and rank

tests in statistics. Ph.D. thesis, Technische Universit¨at Kaiserslautern.

13

