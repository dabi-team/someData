7
1
0
2

t
c
O
3

]
L
P
.
s
c
[

2
v
3
2
1
5
0
.
9
0
7
1
:
v
i
X
r
a

Conﬂuence and Convergence in Probabilistically
Terminating Reduction Systems

Maja H. Kirkeby and Henning Christiansen

Computer Science, Roskilde University, Denmark
majaht@ruc.dk and henning@ruc.dk

Abstract. Convergence of an abstract reduction system (ARS) is the
property that any derivation from an initial state will end in the same ﬁ-
nal state, a.k.a. normal form. We generalize this for probabilistic ARS as
almost-sure convergence, meaning that the normal form is reached with
probability one, even if diverging derivations may exist. We show and ex-
emplify properties that can be used for proving almost-sure convergence
of probabilistic ARS, generalizing known results from ARS.

1

Introduction

Probabilistic abstract reduction systems, PARS, are general models of systems
that develop over time in discrete steps [7]. In each non-ﬁnal state, the choice of
successor state is governed by a probability distribution, which in turn induces
a global, probabilistic behaviour of the system. Probabilities make termination
more than a simple yes-no question, and the following criteria have been pro-
posed: probabilistic termination – a derivation terminates with some probability
> 0 – and almost-sure termination – a derivation terminates with probability
= 1, even if inﬁnite derivations may exist (and whose total probability thus
amounts to 0). When considering a PARS as a computational system, almost-
sure termination may be the most interesting, and there exist well-established
methods for proving this property [6,10].

PARS cover a variety of probabilistic algorithms and programs, scheduling
strategies and protocols [5,7,23], and PARS is a well-suited abstraction level for
better understanding their termination and correctness properties. Randomized
or probabilistic algorithms (e.g., [4,20,21]) come in two groups: Monte Carlo
Algorithms that allow a set of alternative outputs (typically only correct with a
certain probability or within a certain accuracy), e.g., Karger-Stein’s Minimum
Cut [18], Monte Carlo integration and Simulated Annealing [19]; and Las Vegas
Algorithms, that provide one (correct) output and that may be simpler and on
average more eﬃcient than their deterministic counterparts, e.g., Randomized
Quicksort [11], checking equivalence of circular lists [17], probabilistic modular
GCD [30]. We focus on results that are relevant for the latter kind of systems,
and here the property of convergence is interesting, as it may be a necessary
condition for correctness: a system is convergent if it is guaranteed to terminate
with a unique result. We introduce the notion of almost-sure convergence for

Preliminary proceedings of LOPSTR 2017. October 10–12, 2017, Namur, Belgium
The research leading to this paper is supported by The Danish Council for
Independent Research, Natural Sciences, grant no. DFF 4181-00442.

 
 
 
 
 
 
PARS, meaning that a unique result is found with probability = 1, although
there may be diverging computations; this property is a necessary condition for
partial correctness, more precisely a strengthened version of partial correctness
where the probability of not getting a result is zero.

The related notion of conﬂuence has been extensively studied for ARS, e.g., [3,16],

and especially for terminating ones for which conﬂuence implies convergence: a
system is conﬂuent if, whenever alternative paths (i.e., repeated reductions; com-
putations) are possible from some state, these paths can be extended to join in
a common state. Newman’s lemma [22] from 1942 is one of the most central re-
sults: in a terminating system, conﬂuence (and thus convergence) can be shown
from a simpler property called local conﬂuence. In, e.g., term rewriting [3] and (a
subset of) the programming language CHR [1,2], proving local conﬂuence may
be reduced to a ﬁnite number of cases, described by critical pairs (for a deﬁni-
tion, see these references), which in some cases may be checked automatically.
It is well-known that Newman’s lemma does not generalize to non-terminating
systems (and thus neither to almost-sure terminating ones); see, e.g., [16].

Probabilistic and almost-sure versions of conﬂuence were introduced concur-
rently by Fr¨uhwirth et al. [12] – in the context of a probabilistic version of CHR
– and by Bournez and Kirchner [7] in more generality for PARS. However, the
deﬁnitions in the latter reference were given indirectly, assuming a deep insight
into Homogeneous Markov Chain Theory, and a number of central properties
were listed without hints of proofs.

In the present paper, we consider the important property of almost-sure
convergence for PARS and state properties that are relevant for proving it. In
contrast to [7], our deﬁnitions are self-contained, based on elementary math,
and proofs are included. One of our main and novel results is that almost-sure
termination together with conﬂuence (in the classical sense) gives almost-sure
convergence. Almost-sure convergence and almost-sure termination were intro-
duced in an early 1983 paper [13] for a speciﬁc class of probabilistic programs
with ﬁnite state space, but our generalization to PARS’ appears to be new.

In 1991, Curien and Ghelli [9] described a powerful method for proving con-
ﬂuence of non-probabilistic systems, using suitable transformations from the
original system into one, known to be conﬂuent. We can show how this result
applies to probabilistic systems, and we develop an analogous method for also
proving non-conﬂuence.

In section 2, we review deﬁnitions for abstract reduction systems and intro-
duce and motivate our choices of deﬁnitions for their probabilistic counterparts;
a proof that the deﬁned probabilities actually constitute a probability distri-
bution is found in the Appendix. Section 3 formulates and proves important
properties, relevant for showing almost-sure convergence of particular systems.
Section 4 goes in detail with applications of the transformational approach [9] to
(dis-) proving almost-sure convergence, and in Section 5 we demonstrate the use
of this for a random walk system and Hermans’ Ring. We add a few more com-
ments on selected, related work in section 6, and section 7 provides a summary
and suggestions for future work.

2

2 Basic deﬁnitions

The deﬁnitions for non-probabilistic systems are standard; see, e.g., [16,3].

Deﬁnition 1 (ARS). An Abstract Reduction System is a pair R = (A, →)
where the reduction → is a binary relation on a countable set A.
Instead of (s, t) ∈ → we write s → t (or t ← s when convenient), and s →∗ t
denotes the transitive reﬂexive closure of →.

In the literature, an ARS is often required to have only ﬁnite branching. i.e.,
for any element s, the set {t | s → t} is ﬁnite. We do not require this, as the
implicit restriction to countable branching is suﬃcient for our purposes.

The set of normal forms RNF are those s ∈ A for which there is no t ∈ A
such that s → t. For given element s, the normal forms of s, are deﬁned as the
set RNF (s) = {t ∈ RNF | s →∗ t}. An element which is not a normal form is said
to be reducible; i.e., an element s is reducible if and only if {s′ | s → s′} 6= ∅.

A path from an element s is a (ﬁnite or inﬁnite) sequence of reductions
s → s1 → s2 → · · · ; a ﬁnite path s → s1 → s2 → · · · → sn has length n (n ≥ 0);
in particular, we recognize an empty path (of length 0) from a given state to
itself. For given elements s and t ∈ RNF (s), ∆(s, t) denotes the set of ﬁnite paths
s → · · · → t (including the empty path); ∆∞(s) denotes the set of inﬁnite paths
from s. A system is
– conﬂuent if for all s1 ←∗ s →∗ s2 there is a t such that s1 →∗ t ←∗ s2,
– locally conﬂuent if for all s1 ← s → s2 there is a t such that s1 →∗ t ←∗ s2,
– terminating 1 iﬀ it has no inﬁnite path,
– convergent iﬀ it is terminating and conﬂuent, and
– normalizing 2 iﬀ every element s has a normal form, i.e., there is an element

t ∈ RNF such that s →∗ t.

Notice that a normalizing system may not be terminating. A fundamental result
for ARS is Newman’s Lemma: a terminating system is conﬂuent if and only if it
is locally conﬂuent.

The following property indicates the complexity of the probability measures that
are needed in order to cope with paths in probabilistic abstract reduction systems
deﬁned over countable sets.

Proposition 1. Given an ARS as above and given elements s and t ∈ RNF (s),
it holds that ∆(s, t) is countable, and ∆∞(s) may or may not be countable.

Proof. For the ﬁrst part, ∆(s, t) is isomorphic to a subset of
countable union of countable sets is countable, so ∆(s, t) is countable.

n=1,2,... An. A

For the second part, consider the ARS h{0, 1}, {i → j | i, j ∈ {0, 1}}i. Each
inﬁnite path can be read as a real number in the unit interval, and any such
real number can be described by an inﬁnite path. The real numbers are not
countable.
1 A terminating system is also called strongly normalizing elsewhere, e.g., [9].
2 A normalizing system is also called weakly normalizing or weakly terminating else-

S

where, e.g., [9].

3

This means that we can deﬁne discrete and summable probabilities over ∆(s, t),
and – which we will avoid – considering probabilities over the space ∆∞(s)
requires a more advanced measure.

In the next deﬁnition, a path is considered a Markov process/chain, i.e., each
reduction step is independent of the previous ones, and thus the probability of a
path is deﬁned as a product in the usual way. PARS can be seen as a special case
of Homogenous Markov Chains, cf. [7], but for practical reasons it is relevant to
introduce them as generalizations of ARS.

Deﬁnition 2 (PARS). A Probabilistic Abstract Reduction System is a pair
RP = (R, P ) where R = (A, →) is an ARS, and for each reducible element
s ∈ A \ RNF , P (s → ·) is a probability distribution over the reductions from s,
s→t P (s → t) = 1; it is assumed, that for all s and t, P (s → t) > 0 if and
i.e.,
only if s → t.
P
The probability of a ﬁnite path s0 → s1 → . . . → sn with n ≥ 0 is given as

P (s0 → s1 → . . . → sn) =

P (si−1 → si).

n

i=1
Y

For any element s and normal form t ∈ RNF (s), the probability of s reaching t,
written P (s →∗ t), is deﬁned as

P (s →∗ t) =

P (δ);

Xδ∈∆(s,t)

the probability of s not reaching a normal form (or diverging) is deﬁned as

P (s →∞) = 1 −

P (s →∗ t).

Xt∈RNF (s)

When referring to conﬂuence, local conﬂuence, termination, and normalization
of a PARS, we refer to these properties for the underlying ARS.

Notice that when s is a normal form then P (s →∗ s) = 1 since ∆(s, t) contains
0
only the empty path with probability
i=1 P (si−1 → si) = 1. It is important
that P (s →∗ t) is deﬁned only when t is a normal form of s since otherwise, the
Q
deﬁning sum may be ≥ 1, as demonstrated by the following example.

Example 1. Consider the PARS RP given in Figure 1(a); formally, RP = (({0, 1},
{0 (cid:1) 1, 1 (cid:1) 1}), P ) with P (0 (cid:1) 1) = 1 and P (1 (cid:1) 1) = 1. An attempt to deﬁne
P (0 →∗ 1) as in Def. 2, for the reducible element 1, does not lead to a probability,
i.e., P (0 →∗ 1) 6≤ 1: P (0 →∗ 1) = P (0 (cid:1)1) + P (0 (cid:1)1(cid:1)1) + P (0 (cid:1) 1(cid:1)1(cid:1)1) + . . . = ∞.

The following proposition justiﬁes that we refer to P as a probability function.

Proposition 2. For an arbitrary ﬁnite path π, 1 ≥ P (π) > 0. For every el-
ement s, P (s →∗ ·) and P (s →∞) comprise a probability distribution, i.e.,
t∈RNF (s) P (s →∗
∀t ∈ RNF (s) : 0 ≤ P (s →∗ t) ≤ 1; 0 ≤ P (s →∞) ≤ 1; and
t) + P (s →∞) = 1.

P

4

1

1

1

0

1/2

0

1

1

1/2

a

(a)

(b)

1/2

1/2

a

0

1/2

1

b

1/4

1/2

(c)

1−1/4

1−1/42

1−1/43

1−1/44
3

. . .

2

1

1/42

1/43

1/44

. . .

0

a

(d)

Fig. 1. PARS with diﬀerent properties, see Table 1.

Proof. The proofs are simple but lengthy and are given in the Appendix.

Proposition 3 justiﬁes that we refer to P (s →∞) as a probability of divergence.
Proposition 3. Consider a PARS which has an element s for which ∆∞(s) is
i=1,2,...P (si → si+1) be
countable (ﬁnite or inﬁnite). Let P (s1 → s2 → · · · ) =
the probability of an inﬁnite path then P (s →∞) =

δ∈∆∞(s) P (δ) holds.

Q

Proof. See Appendix.

P

We can now deﬁne probabilistic and almost-surely (abbreviated “a-s.”) versions
of important notions for derivation systems. A system is
– almost-surely convergent if for all s1 ←∗ s →∗ s2 there is a normal form

t ∈ RNF such that s1 →∗ t ←∗ s2 and P (s1 →∗ t) = P (s2 →∗ t) = 1,

– locally almost-surely convergent if for all s1 ← s → s2 there is a t ∈ RNF

such that s1 →∗ t ←∗ s2 and P (s1 →∗ t) = P (s2 →∗ t) = 1,

– almost-surely terminating 3 iﬀ every element s has P (s →∞) = 0, and
– probabilistically normalizing iﬀ every element s has a normal form t such

that P (s →∗ t) > 0.

We have deliberately omitted almost-sure conﬂuence and local conﬂuence [7],
since these require a more advanced measure in order to deﬁne the probability
of visiting a perhaps reducible element.

Loc. conﬂ.
Conﬂ.
Term.
A-s. loc. conv.
A-s. conv.
A-s. term.

(d)

(b)

(d′)
(a)
(c)
+ + + + +
+ + – + +
–
–
–
–
–
+
–
– + –
+
– + –
–
+
– + + –

Table 1. A property overview of the systems (a)–(d) in Figure 1 and (d′) with same
ARS as (d), but with all probabilities replaced by 1/2.

3 Almost-sure termination is named probabilistic termination elsewhere, e.g., [28,12].

5

Example 2. The four probabilistic systems in Figure 1 demonstrate these prop-
erties. We notice that (b)–(d) are normalizing in {a}, {a, b} and {a}, respectively.
Furthermore, they are all non-terminating: system (b) and (c) are a-s. terminat-
ing, which is neither the case for (a) nor (d); for element 0 in system (d) we
∞
have P (0 →∞) =
i=1(1 − (1/4)i) ≈ 0.6885 > 0.4 Table 1 summarizes their
properties of (almost-sure) (local) conﬂuence; (d′) refers to a PARS with the
same underlying ARS as (d) and with all probabilities = 1/2.

Q

System (c) is a probabilistic version of a classical example [15,16] which
demonstrates that termination (and not only a-s. termination) is required in
order for local conﬂuence to imply conﬂuence. The diﬀerence between system
(d) and (d′) emphasizes that the choice of probabilities do matter for whether
or not diﬀerent probabilistic properties hold. For any element s in (d′), the
probability of reaching the normal form a is 1/2 + 1/22 + 1/23 + · · · = 1.

3 Properties of Probabilistic Abstract Reduction Systems

With a focus on almost-sure convergence, we consider now relevant relationships
between the properties of probabilistic and their underlying non-probabilistic
systems. Lemmas 1 and 3, below, have previously been suggested by [7] without
proofs, and we have chosen to include them as well as their proofs to provide
a better understanding of the nature of almost-sure convergence. The most im-
portant properties are summarized as follows. For any PARS RP :

– RP is normalizing if and only if it is probabilistically normalizing (Lemma 1),
– if RP is almost-surely terminating then it is normalizing (Lemma 2),
– if RP is terminating then it is almost-surely terminating (Lemma 3),
– RP is almost-surely terminating and conﬂuent, if and only if it is almost-

surely convergent (Theorem 1).

The following inductive characterization of the probabilities for reaching a given
normal form is useful for the proofs that follow.

Proposition 4. For any reducible element s, the following holds.

P (s →∗ t) =

P (s → s′) ×

P (s′ →∗ t)

t∈RNF
X

s→s′(cid:18)
X

t∈RNF
X

(cid:19)

Proof. Any path from s to a normal form t will have the form s → s′ → · · · → t,
for some direct successor s′ of s. The other way round, any normal form for a
direct successor s′ of s will also be a normal form of s. With this observation,
the proposition follows directly from Deﬁnition 2 (prob. of path).

Lemma 1 ([7]). A PARS is normalizing if and only if it is probabilistically
normalizing.

4 Veriﬁed by Mathematica. The exact result is

1

4 ; 1

4

∞; see [29] for the deﬁnition of

this notation.

(cid:0)

(cid:1)

6

Proof. Every element s in a normalizing PARS has a normal form t such that
s →∗ t and by deﬁnition of PARS, P (s →∗ t) > 0, which makes it prob-
abilistically normalizing. The other way round, the deﬁnition of probabilistic
normalizing includes normalization.

Prob. normalization diﬀers from the other properties in nature (requiring prob-
ability > 0 instead of = 1), and is the only one which is equivalent to its non-
probabilistic counterpart. Thus, the existing results on proving and disproving
normalization can be used directly to determine probabilistic normalization. The
following lemma is also a consequence of Proposition 7, parts 3 and 5, of [7].

Lemma 2. If a PARS is almost-surely terminating then it is normalizing.

Proof. For every element s in a almost-surely terminating system, Proposition 2
t∈RNF P (s →∗ t) = 1, and hence s has at least one normal form t
gives that
such that P (s →∗ t) > 0. By Lemma 1, the system is also normalizing.

P

The opposite is not the case, as demonstrated by system (d) in Figure 1; every
element has a normal form, but the system is not almost-surely terminating.

Lemma 3 ([7]). If a PARS is terminating then it is almost-surely terminating.

Proof. In a terminating PARS, ∆∞(s) = ∅ for any element s. By Proposition 3
we have P (s →∞) = 0.

The opposite is not the case, as demonstrated by systems (b)–(d) in Figure 1.
The following theorem is a central tool for proving almost-sure convergence.

Theorem 1. A PARS is almost-surely terminating and conﬂuent if and only if
it is almost-surely convergent.

Thus, to prove almost-sure convergence of a given PARS, one may use the meth-
ods of [10,6] to prove almost-sure termination and prove classical conﬂuence –
referring to Newman’s lemma (cf. our discussion in the Introduction), or using
the method of mapping the system into another system, already known to be
conﬂuent, as described in Section 4, below.

Proof (Theorem 1). We split the proof into smaller parts, referring to properties
that are shown below: “if”: by Prop. 5 and Lemma 6. “only if”: by Lemma 5.

Lemma 4. A PARS is almost-surely terminating if it is locally almost-surely
convergent.

Proof. Let RP be a PARS which is locally almost-surely convergent, and con-
sider an arbitrary element s. We must show P (s →∞) = 0 or, equivalently,

t∈RNF P (s →∗ t) = 1.
When s is a normal form, we have P (s →∗ s) = 1 and thus the desired
P
property. Assume, now, s is not a normal form. This means that s has at least

7

one direct successor; for any two (perhaps identical) direct successors s′, s′′, local
almost-sure convergence implies a unique normal form ts′,s′′ of s′ as well as of
s′′ with P (s′ →∗ ts′,s′′ ) = P (s′′ →∗ ts′,s′′ ) = 1. Obviously, this normal form is
the same for all such successors and thus a unique normal form of s, so let us
call it ts. We can now use Proposition 4 as follows.

P (s (cid:1)∗ t) = P (s (cid:1)∗ ts) =

t∈RNF
X
This ﬁnishes the proof.

P (s (cid:1) s′)·P (s′ (cid:1)∗ ts)
(cid:19)

Xs→s′(cid:18)

=

P (s (cid:1) s′) = 1.

Xs→s′

Since almost-sure convergence implies local almost-sure convergence, we obtain
the weaker version of the above lemma.

Proposition 5. A PARS is almost-surely terminating if it is almost-surely con-
vergent.

The following property for (P)ARS, is used in the proof of Lemma 5, below.

Proposition 6. A normalizing system is conﬂuent if and only if every element
has a unique normal form.

Proof. “If”: By contradiction: Let RP be a normalizing (P)ARS; assume that
every element has a unique normal form and that RP is not conﬂuent. By non-
conﬂuence, there exist s1 ←∗ s →∗ s2 for which there does not exists a t such that
s1 →∗ t ←∗ s2. However, s has one unique normal form t′, i.e., {t′} = RNF (s).
By deﬁnition of normal forms of s, we have that ∀s′ : s →∗ s′ ⇒ RNF (s) ⊇
RNF (s′). This holds speciﬁcally for s1 and s2, i.e., {t′} = RNF (s) ⊇ RNF (s1)
and {t′} = RNF (s) ⊇ RNF (s2). Since R is normalizing, every element has at least
one normal form, i.e., RNF (s1) 6= ∅ and RNF (s2) 6= ∅, leaving one possibility:
RNF (s1) = RNF (s2) = {t′}. From this result we obtain s →∗ s1 →∗ t′ and
s →∗ s2 →∗ t′; contradiction. “Only if”: This is a known result; see, e.g., [3].

Lemma 5. If a PARS is almost-surely terminating and conﬂuent then it is
almost-surely convergent.

Proof. Lemma 2 and Prop. 6 ensure that an a-s. terminating system has a unique
normal form. A-s. termination also ensures that this unique normal form is
reached with probability = 1, and thus the system is almost-surely convergent.

Lemma 6. A PARS is conﬂuent if it is almost-surely convergent.
Proof. Assume almost-sure convergence, then for each s1 ←∗ s →∗ s2 there
exists a t (a normal form) such that s1 →∗ t ←∗ s2.

4 Showing Probabilistic Conﬂuence by Transformation

The following proposition is a weaker formulation and consequence of Theorem
1; it shows that (dis)proving conﬂuence for almost-surely terminating systems is
very relevant when (dis)proving almost-sure convergence.

8

Proposition 7. An almost-surely terminating PARS is almost-surely conver-
gent if and only if it is conﬂuent.

Proof. This is a direct consequence of Theorem 1 (or using Lemma 5 and 6).

Curien and Ghelli [9] presented a general method for proving conﬂuence by
transforming5 the system of interest (under some restrictions) to a new system
which is known to be conﬂuent. We start by repeating their relevant result.

Lemma 7 ([9]). Given two ARS R = (A, →R) and R′ = (A, →R′ ) and a map-
ping G : A → A′, then R is conﬂuent if the following holds.

(C1) R′ is conﬂuent,
(C2) R is normalizing,
(C3) if s →R t then G(s) ↔∗
(C4) ∀t ∈ RNF , G(t) ∈ R′
(C5) ∀t, u ∈ RNF , G(t) = G(u) ⇒ t = u

R′ G(t),
NF , and

We present a version which permits also non-conﬂuence of the transformed sys-
tem to imply non-conﬂuence of the original system. Notice that (C2)–(C5) is
a part of (C2′)–(C5′), and in particular (C4′) requires additionally that only
normal forms are mapped to normal forms.

Lemma 8. Given two ARS R = (A, →R) and R′ = (A, →R′ ) and a mapping
G : A → A′, satisfying

(C1 ′) (surjective) ∀s′ ∈ A′, ∃s ∈ A, G(s) = s′,
(C2 ′) R and R′ are normalizing,
(C3 ′) if s →R t then G(s) ↔∗

if G(s) ↔∗

R′ G(t), and
R t,
(C4 ′) ∀t ∈ RNF , G(t) ∈ R′
NF , and ∀t′ ∈ R′
(C5 ′) (injective on normal forms) ∀t, u ∈ RNF , G(t) = G(u) ⇒ t = u,

NF , G−1(t′) ⊆ RNF ,

R′ G(t) then s ↔∗

then R is conﬂuent iﬀ R′ is conﬂuent.

Proof. “⇒”: follows from Lemma 7.
“⇐”: Assume that R is conﬂuent and R′
1 ←∗
s′
R′ s′ →∗
2 for which ∄t′ ∈ R′ : s′
1 →∗
R′ s′
By (C2′): ∃t′
1, t′
NF : t′
R′ s′ →∗
By (C1′) and (C4′): ∃t1, t2 ∈ RNF : G(t1) = t′
By (C5′): t1 6= t2
By (C3′): t′
1 ↔∗
2 ⇒ t1 ↔∗
By conﬂuence of R: t1 = t2 (contradicts t1 6= t2).

2 ∈ R′

1 ←∗

1 ←∗

R′ s′

R′ t′

R t2

R′ t′ ←∗
R′ s′
2.
R′ s′
2 →∗
1 ∧ G(t2) = t′

R′ t′

2

is not conﬂuent, i.e., there exist

2 where t′

1 6= t′
2.

We summarize the application of the above to probabilistic systems in Theo-
rems 2 and 3.

5 This is also referred to as interpreting a system elsewhere, e.g., [9].

9

Theorem 2. An almost-surely terminating PARS RP = ((A, →R), P ) is almost-
surely convergent if there exists an ARS R′ = (A′, →R′ ) and a mapping G : A →
A′ which together with (A, →R) satisfy (C1)–(C5).

Proof. Since RP is a-s. terminating, R is normalizing (Lemma 2). So, given an
ARS R′ and G be a mapping from R to R′ satisfying (C1), (C3)–(C5), we can
apply Lemma 7 and obtain that R and thereby RP is conﬂuent. A-s. convergence
of RP follows from Prop. 7 since RP is conﬂuent and a-s. terminating

Example 3. We consider the nonterminating, almost-surely terminating system
RP (below to the left) with the underlying normalizing system R (below, middle),
the conﬂuent system R′ (below to the right) and the mapping G(0) = 0, G(a) = a.

RP :

p

0

1-p

a

R :

0

a

R′ : 0

a

The systems R, R′ and the mapping G satisfy (C1)–(C5), and therefore we can
conclude that RP is almost-surely convergent.

Theorem 3. Given an almost-surely terminating PARS RP = (R, P ) with R =
(A, →R), an ARS R′ = (A, →R′ ) and a mapping G from A to A′ which together
with R satisfy (C1′)–(C5′), then system RP is almost-surely convergent if and
only R′ is conﬂuent.

Proof. Assume notation as above. Since RP is a-s. terminating, R is normalizing
(Lemma 2), thus satisfying the ﬁrst part of (C2′). So, given an ARS R′ and G
be a mapping from A to A′ which together with R satisfy (C1′)–(C5′), we can
apply Lemma 7 obtaining that R is conﬂuent iﬀ R′ is conﬂuent. Prop. 7 gives
that the a-s. terminating RP is a-s. convergent iﬀ R′ is conﬂuent.

5 Examples

In the following we show almost-sure convergence in two diﬀerent cases that
exampliﬁes Theorem 3. We use the existing method for showing almost-sure
termination [10,6]: To prove that a PARS RP = ((A, →), P ) is a-s. terminating,
it suﬃces to show existence of a Lyapunov ranking function, i.e., a measure
V : A → R+ where ∀s ∈ A there exists an ǫ > 0 so the inequality of s, V(s) ≥

s→s′ P (s → s′) · V(s′) + ǫ holds.

P
5.1 A Simple, Antisymmetric Random Walk

We consider RP = (R, P ), depicted in Figure 2(a), a simple positive antisym-
metric 1-dimensional random walk. In each step the value n can either increase
to n + 1, P (n → n + 1) = 1/3, or decrease to n − 1 (or if at 0 we “de-
crease” to the normal form a instead), P (n → n − 1) = P (0 → a) = 2/3.

10

Formally, the underlying system R = (A, →) is deﬁned by A = N ⊎ {a} and
→ = {0 → a} ⊎ {n → n′ | n, n′ ∈ N, n′ = n + 1 ∨ n′ = n − 1}.
We start by showing RP a-s. terminating, i.e., that a Lyapunov ranking function
exists: let the measure V be deﬁned as follows.

V(s) =

s + 2,
1,

(

if s ∈ N
if s = a

This function is a Lyapunov ranking since the inequality (see above) holds for
all elements s ∈ A; we divide into three cases s > 0, s = 0, and s = a:

V(s) > 1
V(0) > 1
V(a) > 0

3 · V(s + 1) + 2
3 · V(1) + 2

3 · V(a)

3 · V(s − 1) ⇔ s + 2 > 1

3 · (s + 3) + 2
3 · 1 , and

3 · 3 + 2

⇔ 2 > 1
⇔ 1 > 0.

3 · (s + 1)

(= s + 5
3 )

Since RP is a-s. terminating, it suﬃce to deﬁne R′ = ({number, a}, number → a),
see Figure 2(c), and the mapping G : N ⊎ {a} → {number, a}.

G(s) =

number,
a,

(

if s ∈ N
otherwise.

Because RP is a-s. terminating, R′ is (trivially) a conﬂuent system, and the
mapping G satisﬁes (C1′)–(C5′) then RP is a-s. convergent (by Theorem 3).

5.2 Herman’s self-stabilizing Ring

Herman’s Ring [14] is an algorithm for self-stabilizing n identical processors
connected in an uni-directed ring, indexed 1 to n. Each process can hold one or
zero tokens, and for each time-step, each process either keeps its token or passes
it to its left neighbour (-1) with probability 1/2 of each event. When a process
keeps its token and receives another, both tokens are eliminated.

Herman showed that for an initial state with an odd number of tokens, the
system will reach a stable state with one token with probability =1. This system
is not almost-sure convergent, but proving it for a similar system can be a part
of showing that Herman’s Ring with 3 processes either will stabilize with 1 token
with probability = 1 or 0 tokens with probability = 1. We use a boolean array to

1/3

1/3

1/3

1/3

1

2

3

. . .

2/3

2/3

2/3

2/3

2/3

0

a

0

a

1

2

3

. . .

number

a

(c) Con-
ﬂuent R′.

(a) Original RP .

(b) Underlying R.

Fig. 2. Random Walk (1 Dimension)

11

1/2

[001]

1/4

[111]

1/4

1/4

1/4

1/2

1/2

[010]

1/2

1/4

[101]

1/2

1/2

[100]

1/4

1/4

1/4

1/4

1/4

[000]

1/4

[011]

1/4

1/4

1/4

1/4

[110]

(a) Original RP (both dashed and solid edges) and the almost-surely

terminating R′P (without the dashed edges).

Fig. 3. Herman’s self-stabilizing Ring

1/2

odd

even

[000]

[100]
(b) Conﬂuent R′′.

represent whether each process holds a token (1 indicates a token) and is deﬁned
as in Figure 3(a), where both dashed and solid edges indicate reductions.
Since [000] is a normal form and {[100], [010], [001]} is the set of successor-
states of each of [100],[010] and [001], then we can prove stabilization of RP
by showing almost-sure convergence for a slightly altered system R′P , i.e., the
system in Figure 3(a) consisting of the solid edges only.

To show almost-sure convergence of R′P , we prove almost-sure termination
by showing the existence of a Lyapunov ranking function, namely V([b1 b2 b3]) =
22 · (b1 + b2 + b3) + b1 · 20 + b2 · 21 + b3 · 22, which decreases, ﬁrstly, with the
reduction of tokens and, secondly, by position of the tokens. The only two states
where V increases in a direct successor are [110] and [101] where the inequality
of [110] reduces to 11 > 9 + 1
2 showing RP to be
a-s. terminating.

2 and that of [101] to 14 > 9 + 1

We provide, now, a mapping G from the elements of the underlying system

into the elements of a trivially conﬂuent system, i.e., R′′ in Figure 3(b):

G([100]) = [100]
G([000]) = [000]
G([111]) = G([001]) = G([010]) = odd
G([011]) = G([101]) = G([110]) = even

The RP is a-s. term., R′′ is conﬂuent and G satisfy (C1’)–(C5’), then (by Thm. 3)
RP is a-s. convergent.

6 Related Work

We see our work as a succession of the earlier work by Bournez and Kirchner [7],
with explicit and simple deﬁnitions (instead of referring to Homogeneous Markov
Chain theory) and proofs of central properties, and showing novel properties that
are important for showing (non-) convergence. Our work borrows inspirations
from the result of [12,27,28], given speciﬁcally for probabilistic extensions of the
programming languages CHR. A notion of so-called nondeterministic PARS have
been introduced, e.g., [6,10], in which the choice of probability distribution for
next reduction is nondeterministic; these are not covered by our results.

12

PARS can be implemented directly in Sato’s PRISM System [24,25], which
is a probabilistic version of Prolog, and recent progress for nonterminating pro-
grams [26] may be useful convergence considerations.

7 Conclusion

We have considered almost-sure convergence – and how to prove it – for prob-
abilistic abstract reduction systems. Our motivation is the application of such
systems as computational systems having a deterministic input-output relation-
ship, and therefore almost-sure termination is of special importance. We have
provided properties that are useful when showing almost-sure (non-) convergence
by consequence of other probabilistic and “classic” properties and by transfor-
mation. We plan to generalize these results to almost-sure convergence modulo
equivalence relevant for some Monte-Carlo Algorithms, that produces several
correct answers (e.g. Simulated Annealing), and thereby continuing the work we
have started for (non-probabilistic) CHR [8].

References

1. Slim Abdennadher. Operational semantics and conﬂuence of constraint propaga-

tion rules. In CP97, volume 1330 of LNCS, pages 252–266. Springer, 1997.

2. Slim Abdennadher, Thom W. Fr¨uhwirth, and Holger Meuss. On conﬂuence of
Constraint Handling Rules. In CP96, volume 1118 of LNCS, pages 1–15. Springer,
1996.

3. Franz Baader and Tobias Nipkow. Term rewriting and all that. Cambridge Uni-

versity Press, 1999.

4. Laszlo Babai. Monte-Carlo algorithms in graph isomorphism testing. Universit´e

de Montr´eal Technical Report, DMS, (79):1–33, 1979.

5. Christel Baier and Joost-Pieter Katoen. Principles Of Model Checking, volume

950. 2008.

6. Olivier Bournez and Florent Garnier. Proving positive almost sure termination
In Frank Pfenning, editor, RTA 2006, volume 4098 of LNCS,

under strategies.
pages 357–371. Springer, 2006.

7. Olivier Bournez and Claude Kirchner. Probabilistic rewrite strategies. Applications
to ELAN. In Sophie Tison, editor, RTA 2002, volume 2378 of LNCS, pages 252–
266. Springer, 2002.

8. Henning Christiansen and Maja H Kirkeby. On proving conﬂuence modulo equiv-
alence for Constraint Handling Rules. Formal Aspects of Computing, 29(1):57–95,
jan 2017.

9. Pierre-Louis Curien and Giorgio Ghelli. On conﬂuence for weakly normalizing

systems. In RTA-91, pages 215–225, 1991.

10. Luis Mar´ıa Ferrer Fioriti and Holger Hermanns. Probabilistic termination: Sound-
ness, completeness, and compositionality. In POPL 2015, pages 489–501, 2015.
11. W. Donald Frazer and A. C. McKellar. Samplesort: A sampling approach to

minimal storage tree sorting. J. ACM, 17(3):496–507, 1970.

12. Thom W. Fr¨uhwirth, Alessandra Di Pierro, and Herbert Wiklicky. Probabilistic
Constraint Handling Rules. Electr. Notes Theor. Comput. Sci., 76:115–130, 2002.

13

13. Serglu Hart, Micha Sharir, and A Pnueli. Termination of probabilistic concurrent

program. ACM Trans. Program. Lang. Syst., 5(3):356–380, 1983.

14. Ted Herman. Probabilistic self-stabilization.

Information Processing Letters,

35(2):63–67, jun 1990.

15. J. Roger Hindley. An abstract Church-Rosser theorem. II: applications. J. Symb.

Log., 39(1):1–21, 1974.

16. G´erard P. Huet. Conﬂuent reductions: Abstract properties and applications to
term rewriting systems: Abstract properties and applications to term rewriting
systems. J. ACM, 27(4):797–821, 1980.

17. Alon Itai. A randomized algorithm for checking equivalence of circular lists. Inf.

Process. Lett., 9(3):118–121, 1979.

18. David R. Karger and Cliﬀord Stein. A new approach to the minimum cut problem.

J. ACM, 43(4):601–640, 1996.

19. Scott Kirkpatrick, D. Gelatt Jr., and Mario P. Vecchi. Optimization by simmulated

annealing. Science, 220(4598):671–680, 1983.

20. E. Maﬃoli, M. G. Speranza, and C. Vercellis. Randomized algorithms: An anno-

tated bibliography. Annals of Operations Research, 1(3):331–345, 1984.

21. Rajeev Motwani and Prabhakar Raghavan. Randomized Algorithms. Cambridge

University Press, 1995.

22. M. H. A. Newman. On theories with a combinatorial deﬁnition of “equivalence”.

Annals of Mathematics, 43(2):223–243, 1942.

23. Michael O. Rabin. The choice coordination problem. Acta Informatica, 17(2):121–

134, 1982.

24. Taisuke Sato. A statistical learning method for logic programs with distribution

semantics. In ICLP 1995, pages 715–729, 1995.

25. Taisuke Sato. A glimpse of symbolic-statistical modeling by PRISM. Journal of

Intelligent Information Systems, 31(2):161–176, 2008.

26. Taisuke Sato and Philipp J. Meyer.

Inﬁnite probability computation by cyclic

explanation graphs. TPLP, 14(6):909–937, 2014.

27. Jon Sneyers, Wannes Meert, Joost Vennekens, Yoshitaka Kameya, and Taisuke
Sato. CHR(PRISM)-based Probabilistic Logic Learning. TPLP, 10(4–6), 2010.
28. Jon Sneyers and Danny De Schreye. Probabilistic termination of CHRiSM pro-

grams. In LOPSTR 2011, pages 221–236, 2011.

29. Eric W. Weisstein. q-Pochhammer Symbol. MathWorld – A Wolfram Web Re-

source, 2017.

30. Richard Zippel. Probabilistic algorithms for sparse polynomials. In EUROSAM

1979, pages 216–226, 1979.

14

A Selected proofs

Proposition 2. For an arbitrary ﬁnite path π, 1 ≥ P (π) > 0. For every el-
ement s, P (s →∗ ·) and P (s →∞) comprise a probability distribution, i.e.,
∀t ∈ RNF (s) : 0 ≤ P (s →∗ t) ≤ 1; 0 ≤ P (s →∞) ≤ 1; and
t∈RNF (s) P (s →∗
t) + P (s →∞) = 1.

P

Proof. Part one follows by Deﬁnition 2. Part two is shown by deﬁning a sequence
of distributions P (n), n ∈ N, only containing paths up to length n, and show
that it converges to P . Let∆(n)(s, t) be the subset of ∆(s, t) with paths of length
n or less, and ∆(n)(s, ♯) be the set of paths of length n, starting in s and ending
in a reducible element.
We can now deﬁne P (n) over {∆(n)(s, t) | t ∈ RNF (s)} ⊎ {∆(n)(s, ♯)} as follows:

P (n)(s →∗ t) =
P (n)(s →∞) =

δ∈∆(n)(s,t) P (δ),
π∈∆(n)(s,♯) P (π).

P

and

(1)

(2)

P

First, we prove by induction that P (n) is a distribution for all n. The P (0) is
a distribution because: (i) If s is irreducible, P (0)(s →∗ s) = 1 (the empty-
path); and P (0)(s →∞) = 0 (a sum of zero elements). (ii) If s is reducible,
P (0)(s →∗ s) = 0; and P (0)(s →∞) =
The inductive step: The sets ∆(n+1)(s, t), t ∈ RNF (s), and ∆(n+1)(s, ♯) can be
P
constructed by, for each path in ∆(n)(s, ♯), create its possible extensions by one
reduction. When an extension leads to a normal form t, it is added to ∆(n)(s, t).
Otherwise, i.e., if the new path leads to a reducible, it is included in ∆(n+1)(s, ♯).
Formally, for any normal form t of s, we write:

s→t P (s → t) = 1 by Deﬁnition 2.

∆(n+1)(s, t) = {(s (cid:1) · · · (cid:1) u (cid:1) t) | (s (cid:1) · · · (cid:1) u) ∈ ∆(n)(s, ♯), u → t} ⊎ ∆(n)(s, t)
∆(n+1)(s, ♯) = {(s (cid:1) · · · (cid:1) u (cid:1) v) | (s (cid:1) · · · (cid:1) u) ∈ ∆(n)(s, ♯), u (cid:1) v, u 6∈ RNF (s)}

We show that for a given s, the probability mass added to the ∆( · )(s, t) sets is
equal to the probability mass removed from ∆( · )(s, ♯) as follows (where δsu =
(s (cid:1) · · · (cid:1) u)).

P (n+1)(s →∗ t) + P (n+1)(s →∞) =

P (n+1)(δ) + P (n+1)(s →∞)

Xt∈RNF (s)

Xt∈RNF (s)
δ∈∆(n+1)(s,t)

=

P (n)(δ) +

P (n)(δ)P (u → v) +

P (n)(δ)P (u → v)

Xt∈RNF (s)
δst∈∆(n)(s,t)

Xδsu∈∆(n)(s,♯),
u→v,v∈RNF (s)

Xδsu∈∆(n)(s,♯),
u→v,v6∈RNF (s)

=
Xt∈RNF (s)

=

Xt∈RNF (s)

P (n)(s →∗ t) +

P (n)(δ)P (u → v) =

P (n)(s →∗ t) +

P (n)(δ)

P (u → v)

Xδsu∈∆(n)(s,♯),
u→v

P (n)(s →∗ t) + P (n)(s →∞) = 1

Xt∈RNF (s)

Xδsu∈∆(n)(s,♯)

u→v
X

!

15

 
Thus, for given s, P (n+1) deﬁnes a probability distribution. Notice also that the
equations above indicate that P (n+1)(s →∗ t) ≥ P (n)(s →∗ t), for all t ∈ RNF (s).
Finally, for any s and t ∈ RNF (s), limn→∞ ∆(n)(s, t) = ∆(s, t), we get (as we
in a closed interval)
this,
consequence

consider
increasing sequences of
limn→∞ P (n)(s →∗ t) = P (s →∗ t),
limn→∞ P (n)(s →∞) = P (s →∞). This ﬁnishes the proof.

real numbers
as
and

of

a

Proposition 3. Consider a PARS which has an element s for which ∆∞(s) is
i=1,2,...P (si → si+1) be
countable (ﬁnite or inﬁnite). Let P (s1 → s2 → · · · ) =
the probability of an inﬁnite path then P (s →∞) =

δ∈∆∞(s) P (δ) holds.

Q

Proof. We assume the characterization in the proof of Proposition 2 above, of P
by the limits of the functions P (n)(s →∗ t) and P (n)(s →∞) given by equations
(1) and (2). When ∆∞(s) is countable, limn→∞ P (n)(s →∞) =
δ∈∆∞(s) P (δ).

P

P

16

