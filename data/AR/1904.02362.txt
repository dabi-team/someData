0
2
0
2

n
u
J

2

]

C
C
.
s
c
[

2
v
2
6
3
2
0
.
4
0
9
1
:
v
i
X
r
a

Beyond #CSP: A Dichotomy for Counting Weighted Eulerian
Orientations with ARS

Jin-Yi Caia,1, Zhiguo Fub,2, Shuai Shaoa,1,∗

aDepartment of Computer Sciences, University of Wisconsin-Madison, Madison, USA
bSchool of Information Science and Technology & KLAS, Northeast Normal University, Changchun, China

Abstract

We deﬁne and explore a notion of unique prime factorization for constraint functions, and use this as a new
tool to prove a complexity classiﬁcation for counting weighted Eulerian orientation problems with arrow
reversal symmetry (ars). We prove that all such problems are either polynomial-time computable or #P-
hard. We show that the class of weighted Eulerian orientation problems subsumes all weighted counting
constraint satisfaction problems (#CSP) on Boolean variables. More signiﬁcantly, we establish a novel
connection between #CSP and counting weighted Eulerian orientation problems that is global in nature.
This connection is based on a structural determination of all half-weighted aﬃne linear subspaces over Z2,
which is proved using M¨obius inversion.

Keywords: Eulerian orientation, Holant problem, #CSP, Unique prime factorization.

1. Introduction

A most basic fact in mathematics is that (rational) integers have a unique prime factorization
(UPF). When we consider algebraic extensions, certain primes remain so, while others can be
further factored. For example, for algebraic integers in the extension Q[
−2] ⊃ Q, the rational
prime 3 is no longer a prime, as 3 = (1 + i
2), but 5 remains a prime. Also for algebraic
integers, sometimes UPF still holds, but in general it fails. For example, for algebraic integers in
Q[
5) are two distinct factorizations into irreducible elements, and
thus UPF fails. Unique prime factorization is only restored in Kummer’s theory of prime ideals.
Perhaps more important than what is in the details, in many mathematical investigations the idea
of UPF has been a powerful guiding principle. Is there some analogous notion that is useful for the
complexity classiﬁcation program of counting problems?

−5], 6 = 2 · 3 = (1 + i

2)(1 − i

5)(1 − i

√

√

√

√

√

√

In this paper we show that for a class (which is in fact broader than all weighted counting
CSP) called counting weighted Eulerian orientation problems, we can develop an analogous notion
for the purpose of complexity classiﬁcation of counting problems. We prove a UPF for constraint
functions, (and for the relevant constraint functions there is also a need to extend the scope where
the factorization takes place). Next we develop a merging operation on constraint functions. The

∗Corresponding author
Email addresses: jyc@cs.wisc.edu (Jin-Yi Cai), fuzg432@nenu.edu.cn (Zhiguo Fu), sh@cs.wisc.edu (Shuai

Shao)

1Supported by NSF CCF-1714275.
2Supported by NSFC-61872076, Natural Science Foundation of Jilin Province 20200201161JC and Fundamental

Research Funds for Central Universities.

To appear in Information and Computation (https: // doi. org/ 10. 1016/ j. ic. 2020. 104589 )

May 22, 2020

 
 
 
 
 
 
main technical challenge turns out to be the interplay of these merging operations and the divisibility
relation in the unique prime factorization.

Let us deﬁne the counting problems that we wish to classify. Let G be an undirected Eulerian
graph, i.e., every vertex has even degree. An Eulerian orientation of G is an orientation of its
edges such that at each vertex the number of incoming edges is equal to the number of outgoing
edges. Mihail and Winkler showed that counting the number of Eulerian orientations of an undi-
rected Eulerian graph is #P-complete [28]. In this paper, we consider counting weighted Eulerian
orientations (#EO problems), formulated as a partition function deﬁned by constraint functions
placed at each vertex that represent weightings of various local Eulerian conﬁgurations. There are
a host of problems in statistical physics and combinatorics that can be formulated as computing
this partition function.

This partition function is deﬁned as follows. Suppose G is given, and each vertex v is associated
with a weight function fv taking values in C. The incident edges to v are totally ordered and
correspond to input variables to fv. Each edge has two ends, and an orientation of the edge is
denoted by assigning 0 to the head and 1 to the tail. Thus, locally at every vertex v, a 0 represents
an incoming edge and a 1 represents an outgoing edge. (A loop has both ends at the same vertex.)
An Eulerian orientation corresponds to an assignment to each edge (01 or 10) where the numbers
of 0’s and 1’s at each v are equal. Then a vertex v contributes a weight by the local constraint
function fv evaluated according to the local assignment. The weight of an Eulerian orientation
is the product of weights over all vertices. If every constraint function fv is only nonzero when
the numbers of input 0’s and 1’s are equal, i.e., the support of fv is on half weighted inputs, then
only Eulerian orientations contribute nonzero values. The partition function of #EO is the sum of
weights over all Eulerian orientations. This is a sum-of-product computation.

The signiﬁcance of this partition function is evidenced by its appearance in several diﬀerent
ﬁelds. In statistical physics, the partition function of the so-called ice-type model [30, 33, 31] is
the partition function of Eulerian orientations of some underlying Eulerian graph. When it is
[30]. Literally thousands of
restricted on the square lattice, it is the classical six-vertex model
papers have been written in the literature dealing with the six-vertex model, mainly on the square
lattice, but also on other graphs [3]. It is perhaps one of the three most intensely studied models in
statistical physics, along with that of ferromagnetic Ising and monomer-dimer. The “exact solution”
of the (unweighted) six-vertex model with periodic boundary conditions by Lieb is an important
milestone in statistical physics [25, 26, 24].
In combinatorics, the resolution of the Alternating
Sign Matrix conjecture is linked to the classical six-vertex model with the domain wall boundary
condition [21, 29, 35, 22, 4]. Las Vergnas also observed that the evaluation of the Tutte polynomial
at the point (3, 3) is related to the partition function of Eulerian orientations with a speciﬁc weight
assignment [23]. Cai, Fu and Xia proved a complexity classiﬁcation of the partition function of the
six-vertex model on general 4-regular graphs [13].

The #EO problems have an intrinsic signiﬁcance in the classiﬁcation program for counting
problems. At ﬁrst glance, the #EO framework may appear to be specialized as it requires all
constraint functions to be supported on half weighted inputs. However, surprisingly, we show that
it encompasses all counting constraint satisfaction problems (#CSP) on Boolean variables.

Theorem 1.1. Every complex-weighted #CSP problem on Boolean variables can be expressed as
an #EO problem.

A more detailed statement for this theorem is given as Theorem 6.1. By this theorem, a

2

complexity dichotomy for #EO problems would generalize the complexity dichotomy for #CSP
problems on the Boolean domain, which is already known3 [18, 19, 6, 16].

In physics, a symmetry called the arrow reversal symmetry (ars)4 is usually assumed. For
complex-valued local constraint functions f , ars requires that f (α) = f (α) for all α, where f (α)
denotes the complex conjugation of f (α), and α denotes the bit-wise complement of α. For real-
valued functions, this is f (α) = f (α). This means, if we ﬂip the orientations of all edges, the (real)
function value f is unchanged (or for complex f it is changed to its complex conjugation). We will
see that it is not only natural but also necessary for the proof that we consider complex values.

In complexity theory, there is a more intrinsic reason for considering the arrow reversal sym-
(cid:3), any #EO problem is transformed
metry. Under the holographic transformation Z = 1√
2
to a standard Holant problem, and complex-valued constraint functions with the ars restriction
translate precisely to real-valued constraint functions.

(cid:2) 1 1
i −i

Theorem 1.2. A complex-valued constraint function f satisﬁes ars if and only if after the holo-
graphic transformation Z, f is transformed to a real-valued function.

We will describe holographic transformation and prove this theorem in Section 7. By this
theorem, the classiﬁcation of #EO problems can serve as building blocks towards a classiﬁcation
of general Holant problems. In Section 8, we will give a partial map (Figure 2) for the complexity
classiﬁcation program for Holant problems on the Boolean domain, where we indicate how the
framework of #EO problems ﬁts in this program.

In this paper, we prove a complexity dichotomy theorem for #EO problems with ars.

Theorem 1.3. For any set F of complex-valued constraint functions satisfying the ars condition,
the weighted counting problem for Eulerian orientations speciﬁed by F is either computable in
polynomial time, or #P-hard. The polynomial time tractability criterion on F is explicit.

The explicit tractability criterion will be stated in terms of certain constraint function sets to
be deﬁned in Section 2, where we give some preliminaries. The formal statement of the dichotomy
theorem (Theorem 3.1) and a proof outline will be given in Section 3. The most technical part
of the proof is an induction that guarantees a suitable interplay between the merging operation
and unique factorization. However this inductive proof only works when the arity (i.e., the number
of input variables) of these constraint functions is suﬃciently high (arity (cid:62) 10). For lower arity
cases, we prove it separately. We will give the inductive proof and handle lower arity cases in
Section 4. In addition, we discover a novel connection between #CSP and #EO problems, which
will be introduced in Section 5. We establish this connection by a simulation of #CSP by #EO
that is global in nature. Owing to the restriction that the support of every constraint function
in #EO problems is on half weighted inputs, (provably) no local replacement reduction can work.
One crucial ingredient of the proof in Section 5 is the determination of all half weighted aﬃne
linear subspaces over Z2. This result should be of independent interest. This determination uses
techniques including M¨obius inversion.

3In fact, the full complexity dichotomy for #CSP problems on any ﬁnite domain is also known [7, 20, 5, 10, 9].
4On a square lattice, when there is no external electric ﬁeld, physical considerations imply that the model is
unchanged by reversing all arrows [3]. This zero ﬁeld model includes the ice [30], KDP [33] and F [31] models as
special cases.

3

2. Preliminaries

2.1. Deﬁnitions and notations

A constraint function f , or a signature, of arity m is a map Zm

2 → C. In this paper we assume
all signatures have positive arities, and since we study weighted Eulerian orientation problems, we
may assume each signature f has an even arity, say 2n, for some n = n(f ) > 0. We use f α to denote
f (α). The support of a signature f of arity 2n is S (f ) = {α ∈ Z2n
| f α (cid:54)= 0}. If S (f ) = ∅, i.e., f is
2
identically 0, we say f is a zero signature and denote it by f ≡ 0. Otherwise, f is a nonzero signature.
We use wt(α) to denote the Hamming weight of α ∈ Z2n
| wt(α) = n}.
Note that if α belongs to H2n then its complement string α also belongs to H2n. A signature f of
arity 2n is an Eulerian orientation (EO) signature if S (f ) ⊆ H2n. Let F be any ﬁxed set of EO
signatures. An (EO-)signature grid Ω = (G, π) over F is a tuple, where G = (V, E) is an Eulerian
graph without isolated vertex (i.e., every vertex has positive even degree), π labels each v ∈ V with
a signature fv ∈ F of arity deg(v), and labels the incident edges E(v) at v with input variables
of fv. For any Eulerian graph G, let EO(G) be the set of all Eulerian orientations of G. We view
each edge as having two ends, and an orientation of the edge is denoted by assigning 0 to the head
and 1 to the tail. An Eulerian orientation corresponds to an assignment to the ends of each edge
where the numbers of 0’s and 1’s at each v are equal. Then a vertex v contributes a weight by the
local constraint function fv evaluated according to the local assignment. Each σ ∈ EO(G) gives an
evaluation (cid:81)
v∈V fv(σ|E(v)), where σ|E(v) assigns 0 to an incoming edge and 1 to an outgoing edge.

2 . Let H2n = {α ∈ Z2n
2

Deﬁnition 2.1 (#EO problems). A #EO problem #EO(F) speciﬁed by a set F of EO signatures
is the following: The input is an (EO-)signature grid Ω = (G, π) over F; the output is the partition
function of Ω,

#EOΩ =

(cid:88)

(cid:89)

fv(σ|E(v)).

Example 2.2 (Unweighted #EO problem). Let F = {f2, f4, . . . f2n, . . .}, where f α
wt(α) = n and f α

2n = 0 otherwise. Then #EO(F) counts the number of Eulerian orientations.

2n = 1 when

σ∈EO(G)

v∈V

Example 2.3 (Six-vertex models). Let fsix be an EO signature of arity 4, where f 0011
six = f 1001
six = f 1010
f 0101
vertex model satisfying ars with real parameters (a, b, c).

six = a,
six = c, (where a, b, c ∈ R+). Then #EO(fsix) is the classical six-

six = b, f 0110

six = f 1100

#EO problems can be viewed as special cases of Holant problems. A (general) signature grid
Ω = (G, π) over a set of arbitrary (not necessarily EO) signatures F is a tuple as before, where
G is a graph, each vertex v is assigned some fv ∈ F of arity deg(v), with incident edges E(v)
labeled as input variables. We consider all 0-1 edge assignments σ : E(G) → {0, 1}. Each σ gives
an evaluation (cid:81)
v∈V (G) fv(σ|E(v)), where σ|E(v) denotes the restriction of σ to E(v).

Deﬁnition 2.4 (Holant problems). The input to the problem Holant(F) is a signature grid Ω =
(G, π) over F. The output is the partition function,

HolantΩ =

(cid:88)

(cid:89)

fv(σ|E(v)).

σ:E(G)→{0,1}

v∈V (G)

The bipartite Holant problems Holant (F | G) are Holant problems over bipartite graphs H = (U, V, E),
where each vertex in U or V is labeled by a signature in F or G respectively.

4

We use (cid:54)T (and ≡T ) to denote polynomial-time Turing reductions (and equivalences, respec-
tively). In this paper without loss of generality we assume all signatures have positive arity, i.e., any
signature grid G has no isolated vertices. We use (cid:54)=2 to denote the binary Disequality signature
with truth table (f 00, f 01, f 10, f 11) = (0, 1, 1, 0). It can also be expressed by the matrix

N =

(cid:21)

(cid:20)0 1
1 0

with one variable indexing rows and the other indexing columns respectively.

Lemma 2.5. #EO(F) ≡T Holant((cid:54)=2| F).

Proof. If Ω = (G, π) is an instance of #EO(F), we add a middle vertex on each edge of G and
label it by (cid:54)=2. This deﬁnes an instance Ω(cid:48) of Holant((cid:54)=2| F) with a bipartite graph H (which
is the edge-vertex incidence graph of G), where every edge of G is broken into two. There is a
1-1 correspondence of the terms in the partition functions #EOΩ and HolantΩ(cid:48). The process is
obviously reversible.

Counting constraint satisfaction problems (#CSP) can also be expressed as Holant problems
(Lemma 1.2 in [8]). We use =n to denote the Equality signature of arity n, which takes value 1
on the all-0 or all-1 inputs, and 0 elsewhere. Let EQ = {=1, =2, . . . , =n, . . .} denote the set of all
Equality signatures.

Lemma 2.6. #CSP(F) ≡T Holant (EQ | F).

A signature f of arity n (cid:62) 2 can be expressed as a 4 × 2n−2 matrix M(ij)(f ), which lists the 2n
values of f with variables (xi, xj) ∈ {0, 1}2 as row index and the assignments of the other n − 2
variables as column index, both in lexicographic order. That is,

M(ij)(f ) =







f 00,00...0 f 00,00...1
f 01,00...0 f 01,00...1
f 10,00...0 f 10,00...1
f 11,00...0 f 11,00...1

. . . f 00,11...1
. . . f 01,11...1
. . . f 10,11...1
. . . f 11,11...1







=







.







f 00
ij
f 01
ij
f 10
ij
f 11
ij

We use f ab
and f ab
ij

ij to denote the row vector indexed by (xi, xj) = (a, b) in M(ij)(f ), f ab
T denotes its transpose. Consider the reversal vector f ab
ij N ⊗(n−2) of f ab

ij . We have

ij denotes its conjugate,

ij N ⊗(n−2) = (f ab,11...1, f ab,11...0, . . . , f ab,00...0) = (f ¯a¯b,00...0, f ¯a¯b,00...1, . . . , f ¯a¯b,11...1) = f ¯a¯b
f ab
ij .

The second equality holds by ars. By taking transpose, we have N ⊗(n−2)f ab
ij
is clear from the context, we omit the subscript (ij).

T

T = f ¯a¯b
ij

. When (ij)

We generalize the notion of binary Disequality to signatures of higher arities. A signature
f of arity 2n is called a Disequality signature of arity 2n, denoted by (cid:54)=2n, if f = 1 when
x1 = x2 = . . . = xn (cid:54)= xn+1 = xn+2 = . . . = x2n, and 0 otherwise. By permuting its variables the
Disequality signature of arity 2n also deﬁnes (cid:0)2n
(cid:1)/2 functions which we also call Disequality
n
signatures. Alternatively we can deﬁne a Disequality signature as follows. A signature f of
arity 2n is a Disequality signature if f α = f ¯α = 1 for some α with wt(α) = n, and f β = 0
(cid:1)/2
elsewhere. Since there are (cid:0)2n
n

(cid:1)/2 many possible ways to choose a pair {α, ¯α}, there are (cid:0)2n
n

5

many Disequality signatures of arity 2n. They are equivalent for the complexity of Holant
problems; once we have one we have them all, i.e., if f is obtained from (cid:54)=2n by relabeling its
variables, then for any set F of EO signatures,

Let DEQ = {(cid:54)=2, (cid:54)=4, . . . , (cid:54)=2n, . . .} denote the set of all Disequality signatures.

#EO(F, f ) ≡T #EO(F, (cid:54)=2n).

2.2. Gadget construction

One basic tool used throughout this paper is gadget construction. An F-gate (or simply a
gadget) is similar to a signature grid (G, π) for Holant(F) except that G = (V, E, D) is a graph
with internal edges E and dangling edges D. The dangling edges D deﬁne input variables for the
F-gate. We order the regular edges in E from 1 to m, and order the dangling edges in D from 1
to n. Then the F-gate deﬁnes a function f

f (y1, . . . , yn) =

(cid:88)

(cid:89)

fv(ˆσ |E(v)),

σ:E→{0,1}

v∈V

where (y1, . . . , yn) ∈ {0, 1}n is an assignment on the dangling edges, ˆσ is the extension of σ on E by
the assignment (y1, . . . , yn), and fv is the signature assigned at each vertex v ∈ V . This function f
is called the signature of the F-gate. There may be no internal edges in an F-gate. In this case, f
is simply a tensor product of these signatures fv, i.e., f = (cid:78)
v∈V fv (with possibly a permutation
of variables). We say a signature f is realizable from a signature set F by gadget construction if f
is the signature of an F-gate. In the following, when we describe a gadget construction we identify
a vertex in the graph G = (V, E, D) for the gadget with the signature labeling that vertex.

If f is realizable from a set F, then we can freely include f in the set of signatures while
preserving the complexity (Lemma 1.3 in [8]). Note that by Lemma 2.5, in the setting of #EO(F)
problems (i.e., for Holant ((cid:54)=| F)), every edge in a gadget construction is eﬀectively labeled by (cid:54)=2.
A basic gadget construction is merging. Given a signature f of arity n, we can connect two
variables xi and xj of f using (cid:54)=2, and it gives a signature of arity n − 2. We use ∂(ij)f to
denote this signature and ∂(ij)f = f 01
ij , where f ab
ij denotes the signature obtained by setting
(xi, xj) = (a, b) ∈ {0, 1}2. We use f ab
ij to denote a vector that lists
the truth table of f ab
in a given order. We may further merge variables xu and xv of ∂(ij)f for
ij
any {u, v} disjoint with {i, j}, and we use ∂(uv)(ij)f = ∂(uv)(∂(ij)f ) to denote the realized signature.
Note that these two merging operations commute, ∂(uv)(ij)f = ∂(ij)(uv)f . This is illustrated in the
following commutative diagram.

ij + f 10
ij to denote a function, and f ab

∂(ij)

f

∂(ij)f

∂(uv)

∂(uv)

∂(uv)f

∂(ij)

∂(uv)(ij)f = ∂(ij)(uv)f

(We adopt the notation ∂ for the similarity of the merging operation with taking partial deriva-
tives. They both reduce the number of variables, they both are linear, and under mild smoothness

6

conditions we know ∂2f
∂y∂x . The commutativity of ∂(ij)f and ∂(uv)f is a key property in our
proof.) If by merging any two variables of f , we can only realize the zero signature, then we show
that f itself is “almost” a zero signature.

∂x∂y = ∂2f

Lemma 2.7. Let f be a signature of arity n (cid:62) 3. If for every pair of distinct indices {i, j}, by
merging variables xi and xj of f we have ∂(ij)f ≡ 0, then f α = 0 for any α with 0 < wt(α) < n.
In particular, if f is an EO signature, then f ≡ 0.

Proof. Suppose there exists some α, where 0 < wt(α) < n, such that f α (cid:54)= 0. Since α is not all-0
nor all-1 and α has length at least 3, we can ﬁnd three bits in some order such that on these three
bits, α takes value 001 or 110. Without loss of generality, we assume they are the ﬁrst three bits
of α and we denote α by 001δ or 110δ (δ maybe empty). We ﬁrst consider the case that α = 001δ.
Consider another two strings β = 010δ and γ = 100δ. Note that if we merge variables x1 and x2 of
f , we get ∂(12)f , its entry (∂(12)f )0δ on the input 0δ (for bit positions 3 to n) is the sum of f 010δ
and f 100δ. Since ∂(12)f ≡ 0, we have

f 010δ + f 100δ = 0.

Similarly, by merging variables x1 and x3, we have

f 001δ + f 100δ = 0,

and by merging variables x2 and x3, we have

f 001δ + f 010δ = 0.

These three equations have only a trivial solution, f 001δ = f 010δ = f 100δ = 0. A contradiction.

If α = 110δ, the proof is symmetric.

The following lemma makes sure that a realized signature is suitable for #EO problems.

Lemma 2.8. Any signature realizable from a set F of EO signatures satisfying ars is also an EO
signature satisfying ars.

ij + f 10

ij . Hence for any EO signature satisfying ars, after merging
Proof. By deﬁnition ∂(ij)f = f 01
any two variables, the realized signature is still an EO signature satisfying ars. Then, suppose f is
realized by a graph G with dangling edges and n vertices labeled by signatures f1, f2, . . . , fn ∈ F.
We ﬁrst cut all internal edges in G and get the signature f (cid:48) = f1 ⊗ f2 ⊗ · · · ⊗ fn. Clearly f (cid:48) is an
EO signature satisfying ars since all fi are. Then, f can be realized by merging (with (cid:54)=2) all cut
edges of f (cid:48) in a sequence. After each merging operation, the realized signature is an EO signature
satisfying ars, and hence f is an EO signature satisfying ars.

Having established Lemma 2.8, we have the following reduction.

Lemma 2.9. If f is realizable from a set F of EO signatures, then #EO({f } ∪ F) ≡T #EO(F).

A particular gadget construction often used in this paper is mating. Given an EO signature f
of arity n (cid:62) 3, we connect two copies of f in the following manner: Fix a set S of n − 2 variables
among all n variables of f . For each xk ∈ S, connect xk of one copy of f with xk of the other
copy using (cid:54)=2. The two variables xi, xj that are not in S are called dangling variables. Then,

7

this mating construction realizes a signature of arity 4, denoted by mijf . It can be represented by
matrix multiplication. We have

(ij)(f )

f 00T

(cid:21)⊗(n−2) (cid:104)



=









(cid:20)0 1
1 0

M (mijf ) = M(ij)(f )N ⊗(n−2)M T

f 00
f 01
f 10
f 11
f 00
f 01
f 10
f 11

f 11T

f 10T









=





(cid:104)

f 01T

f 01T

f 10T

f 11T(cid:105)

f 00T(cid:105)

=







0
0
0
|f 11|2

0
(cid:104)f 01, f 10(cid:105)
|f 10|2
0

0
|f 01|2
(cid:104)f 10, f 01(cid:105)
0







|f 00|2
0
0
0

,

(2.1)

where (cid:104)·, ·(cid:105) denotes the (complex) inner product and | · | denotes the norm deﬁned by this inner
product. Note that |(cid:104)f 01, f 10(cid:105)|2 (cid:54) |f 01|2|f 10|2 by Cauchy-Schwarz inequality.

2.3. Signature factorization

Recall that in this paper all signatures have positive arity. A nonzero signature g divides f ,
denoted by g | f , if there is a signature h such that f = g ⊗ h (with possibly a permutation of
variables) or there is a constant λ such that f = λ · g. In the latter case, if λ (cid:54)= 0, then we also
have f | g since g = 1
λ · f . For nonzero signatures, if both g | f and f | g, then they are nonzero
constant multiples of each other, and we say g is an associate of f , denoted by g ∼ f . In terms of
this division relation, we can deﬁne irreducible signatures and prime signatures. We will show that
they are equivalent, and this gives us the unique prime factorization of signatures5.

Deﬁnition 2.10 (Irreducible signatures). A nonzero signature f is irreducible if g | f implies that
g ∼ f . We say a signature is reducible if it is not irreducible or it is a zero signature. By deﬁnition,
if a signature f of arity greater than 1 is reducible, then there is a factorization f = g ⊗ h, for some
signatures g and h (of positive arities).

Deﬁnition 2.11 (Prime signatures). A nonzero signature f is a prime signature, if for any nonzero
signatures g and h, f | g ⊗ h implies that f | g or f | h.

Lemma 2.12. The notions of irreducible signatures and prime signatures are equivalent.

Proof. Suppose f is a prime signature. If f is not irreducible, then there is a nonzero signature g
such that g | f but not g ∼ f . So there is a signature h (of arity (cid:62) 1) such that f = g ⊗ h, up to a
permutation of variables (h (cid:54)≡ 0 due to f (cid:54)≡ 0). Then f | g ⊗ h and by being a prime, either f | g
or f | h. This is impossible because both g and h have lower arity than f .

5The factorization of signatures is synonymous with the decomposition of multipartite quantum states in quantum
information theory. There, the uniqueness of decomposition is usually assumed as a common knowledge. To our best
knowledge, we are not aware of any formal proof.

8

Now, suppose f is irreducible and let f | g ⊗ h, where g and h are nonzero signatures (of arity
(cid:62) 1). If f ∼ g ⊗ h, then f = (λg) ⊗ h for some constant λ (cid:54)= 0. This contradicts f being irreducible.
Thus, there is a nonzero signature e (of arity (cid:62) 1) such that, up to a permutation of variables,

e ⊗ f = g ⊗ h.

(2.2)

Consider the scope of f , i.e., its set of variables. Suppose it intersects with the scopes of both g
and h. Since e (cid:54)≡ 0, we can pick an input β of e such that eβ = λ1 (cid:54)= 0. By setting the variables in
the scope of e to β on both sides of (2.2), we have

λ1 · f = g(cid:48) ⊗ h(cid:48),

where g(cid:48) and h(cid:48) denote the resulting signatures from g and h respectively, both of which have a
non-empty scope, i.e., having arity (cid:62) 1. This is a contradiction to f being irreducible.

Hence the scope of f is a subset of the scope of either g or h. Suppose it is g, then the scope
of h is a subset of the scope of e. Since h (cid:54)≡ 0, we can pick an input α of h such that hα = λ2 (cid:54)= 0.
By setting the variables in the scope of h to α on both sides of (2.2), we have

e(cid:48) ⊗ f = λ2 · g,

where e(cid:48) denotes the resulting signature by setting α in e. Thus, we have f | g. Similarly, if the
scope of f is a subset of the scope of h, then we have f | h.

A prime factorization of a signature f is f = g1 ⊗. . .⊗gk up to a permutation of variables, where
each gi is a prime signature (irreducible). Start with any nonzero signature, if we keep factoring
reducible signatures and induct on arity, any nonzero f has a factorization into irreducible (prime)
signatures. The following important lemma says that the prime factorization of a nonzero signature
is unique up to the order of the tensor factors and constant scaling factors. It can be proved using
Lemma 2.12 and a standard argument, which we omit.

Lemma 2.13 (Unique prime factorization). Every nonzero signature f has a prime factorization.
If f has prime factorizations f = g1 ⊗ . . . ⊗ gk and f = h1 ⊗ . . . ⊗ h(cid:96), both up to a permutation of
variables, then k = (cid:96) and after reordering the factors we have gi ∼ hi for all i.

If a vertex v in a signature grid is labeled by a reducible signature f = g ⊗ h, we can replace
the vertex v by two vertices v1 and v2 and label v1 with g and v2 with h, respectively. The incident
edges of v become incident edges of v1 and v2 respectively according to the partition of variables
of f in the tensor product of g and h. This does not change the Holant value. Clearly, f = g ⊗ h is
realizable from {g, h}. On the other hand, Lin and Wang proved in [27] (Corollary 3.3) that, from a
reducible signature f = g ⊗ h we can freely replace f by g and h while preserving the complexity of
a Holant problem. To apply their theorem to #EO problems we need to take care of one subtlety,
namely from the factorization f = g ⊗ h we have to get EO signatures g and h, so that we can
discuss #EO problems involving signatures g and h. This is true for EO signatures f satisfying
ars.

Lemma 2.14. Let f be a nonzero reducible EO signature satisfying ars. Then,

1. for any factorization f = g ⊗ h, g and h are both EO signatures;
2. there exists a factorization f = g ⊗ h such that g and h are both EO signatures satisfying ars.

9

Proof.

1. Since f (cid:54)≡ 0, we know g (cid:54)≡ 0 and h (cid:54)≡ 0 for any factorization f = g ⊗ h. For a
contradiction, suppose there is a factorization f = g ⊗ h such that g is not an EO signature.
Then, there is an input α of g such that gα (cid:54)= 0, and wt(α) (cid:54)= wt(¯α). (This is true no matter
whether g has even or odd arity.) Since h (cid:54)≡ 0, there is an input β of h such that hβ (cid:54)= 0.
Note that α ◦ β is an input of f and we have

Moreover, since f satisﬁes ars, we have

f α◦β = gα · hβ (cid:54)= 0.

Then, we know g ¯α (cid:54)= 0, and hence

0 (cid:54)= f ¯α◦ ¯β = g ¯α · h

¯β.

f ¯α◦β = g ¯α · hβ (cid:54)= 0.

However, notice that wt(α ◦ β) = wt(α) + wt(β) (cid:54)= wt(¯α) + wt(β) = wt(¯α ◦ β). This implies
that S (f ) (cid:54)⊆ Harity(f ), contradicting f being an EO signature. Thus, for any f = g ⊗ h, f
and g are both EO signatures.

2. By the ﬁrst part of the proof, it suﬃces to show that there exists a factorization f = g ⊗ h
such that g and h both satisfy ars. Suppose f = g ⊗ h. Since f (cid:54)≡ 0, there is α ◦ β such that
f α◦β = gα · hβ (cid:54)= 0. Since f satisfy ars, we have

and also

gα · hβ = f α◦β = f ¯α◦ ¯β = g ¯α · h

¯β (cid:54)= 0,

gα · h

¯β = f α◦ ¯β = f ¯α◦β = g ¯α · hβ (cid:54)= 0.

Multiply these two equalities, and cancel a nonzero common factor, we have

|gα|2 = |g ¯α|2.

Since gα and g ¯α have the same norm, we can pick a scalar λ = 1/(gαg ¯α)1/2 such that
λ h satisfy the ars condition.
λgα = λg ¯α. We have f = (λg) ⊗ ( 1
We rename λg and 1
λ h by g and h, and now we can assume there is an α such that gα = g ¯α (cid:54)= 0.
For any input β of h, we have

λ h) and we will show λg and 1

gα · hβ = f α◦β = f ¯α◦ ¯β = g ¯α · h

¯β = gα · h

¯β,

and hence, hβ = h ¯β. Hence h (cid:54)≡ 0 satisﬁes the ars condition. We can pick a particular β
such that hβ = h ¯β (cid:54)= 0. Then, for any input α(cid:48) of g, since f satisﬁes the ars condition, we
have gα(cid:48) · hβ = gα(cid:48) · hβ = gα(cid:48) · hβ, and hence gα(cid:48) = gα(cid:48). That is, g also satisﬁes ars.

Remark.

1. The ﬁrst part does not hold without assuming ars. For example, f = (0, 0, 1, 0) =

(0, 1) ⊗ (1, 0), where (0, 0, 1, 0) is an EO signature but (0, 1) and (1, 0) are not.

2. The second part does not hold when we restrict signatures to real valued signatures. For
(cid:21)

(cid:20) 0 0

example, f = (0, 1, −1, 0)⊗2 =

is a real valued reducible signature satisfying

ars. (Note that while f satisﬁes ars, the binary factor (0, 1, −1, 0) does not satisfy ars.) In

0 0
0 1 −1 0
0 −1 1 0
0 0
0 0

10

fact it cannot be factorized into two real valued signatures that also satisfy ars. To see that,
ﬁrst f cannot have a unary tensor factor by Lemma 2.14. So any factorization of f must
be with two binary signatures. A real valued binary EO signature satisfying ars has the
form (0, a, a, 0) where a ∈ R. Thus, if f is a tensor product of such two signatures, we have
f = (0, a, a, 0) ⊗ (0, b, b, 0) up to a permutation of variables, which implies all nonzero entries
of f are the same, a contradiction. However, f = (0, i, −i, 0) ⊗ (0, −i, i, 0), which is a tensor
product of two complex valued signatures satisfying ars. Thus, by going to the complex ﬁeld
we restored a closure property for prime factorizations of signatures satisfying ars.

In the following, when we say that a nonzero EO signature f satisfying ars has a factorization
g ⊗ h, we always assume g and h are EO signatures satisfying ars. The following lemma follows
from Corollary 3.3 of Lin and Wang [27].

Lemma 2.15. If a nonzero EO signature f satisfying ars has a factorization g ⊗ h, then

#EO({g, h} ∪ F) ≡T #EO({f } ∪ F)

for any EO signature set F. In this case, we also say g and h are realizable from f .

Deﬁnition 2.16. We use B to denote the set of signatures that are tensor products of (one or
more) binary EO signatures satisfying ars.

Note that a binary EO signature b(xi, xj) over variables xi, xj satisfying ars has a particular
form (0, a, ¯a, 0) for some a ∈ C, and it is irreducible when a (cid:54)= 0. Signatures in B satisfy a closure
property: If f ∈ B and b(y, z) ∈ B where y and z are distinct from variables of f , and we connect
one variable x of f via (cid:54)=2 with y, the new signature also belongs to B. This is easily veriﬁed by
(cid:3). We use the notation bi(·, ·) to denote the binary signature (0, i, −i, 0) in
[ 0 a
¯a 0 ] [ 0 1
B. For signatures in B, we have the following result.

(cid:3) = (cid:2) 0 ab
ab 0

1 0 ] (cid:2) 0 b
¯b 0

Lemma 2.17. Suppose f ∈ B. Then ∂(ij)f ≡ 0 iﬀ the signature bi(xi, xj) = (0, i, −i, 0) divides f .

Proof. If bi(xi, xj)|f , then f = bi(xi, xj) ⊗ g, where g is a constant or a signature on variables other
than xi, xj. We have ∂(ij)f = (i − i) · g ≡ 0.

Now, suppose ∂(ij)f ≡ 0. If f ≡ 0, then it is trivial. Otherwise, f (cid:54)≡ 0. Consider the unique
prime factorization of f . If xi and xj appear in one binary signature b(xi, xj) = (0, a, ¯a, 0), then
a (cid:54)= 0, and f = b(xi, xj) ⊗ g, where g is a constant or a signature on variables other than xi, xj and
g (cid:54)≡ 0 due to f (cid:54)≡ 0. Then, we have ∂(ij)f = (a + ¯a)g ≡ 0, which means a + ¯a = 0. That is, a = λi
for some λ ∈ R. So, we have bi(xi, xj)|f .

Otherwise, xi and xj appear in separate binary signatures b1(xi, xi(cid:48)) = (0, a, ¯a, 0) and b2(xj, xj(cid:48)) =
(0, b, ¯b, 0) in the unique prime factorization of f . That is, f = b1(xi, xi(cid:48))⊗b2(xj, xj(cid:48))⊗g, where g is a
constant or a signature on variables other than xi, xi(cid:48), xj, xj(cid:48) and g (cid:54)≡ 0. Then ∂(ij)f = b(cid:48)(xi(cid:48), xj(cid:48))⊗g
where b(cid:48)(xi(cid:48), xj(cid:48)) = (0, ¯ab, a¯b, 0) (cid:54)≡ 0. Hence, ∂(ij)f (cid:54)≡ 0. A contradiction.

2.4. Tractable signatures and #P-hardness results

We give some known signature sets that deﬁne polynomial time computable (tractable) counting

problems. In this paper, we need two families: aﬃne signatures and product-type signatures.

11

Deﬁnition 2.18. A signature f (x1, . . . , xn) of arity n is aﬃne if it has the form

λ · χAX=0 · iQ(X),

where λ ∈ C, X = (x1, x2, . . . , xn, 1), A is a matrix over Z2, Q(x1, x2, . . . , xn) ∈ Z4[x1, x2, . . . , xn]
is a quadratic (total degree at most 2) multilinear polynomial with the additional requirement that
the coeﬃcients of all cross terms are even, i.e., Q has the form

Q(x1, x2, . . . , xn) = a0 +

n
(cid:88)

k=1

akxk +

(cid:88)

1(cid:54)i<j(cid:54)n

2bijxixj,

and χ is a 0-1 indicator function such that χAX=0 is 1 iﬀ AX = 0. We use A to denote the set of
all aﬃne signatures.

If the support set S (f ) is an aﬃne linear subspace, then we say f has aﬃne support. Clearly,

any aﬃne signature has aﬃne support.

Deﬁnition 2.19. A signature on a set of variables X is of product type if it can be expressed as
a product of unary functions, binary equality functions (1, 0, 0, 1), and binary disequality functions
(0, 1, 1, 0), each on one or two variables of X. We use P to denote the set of product-type functions.

Note that the products of unary, binary equality, and binary disequality functions in the deﬁ-
nition of P can be on overlapping variables. A simple and important observation is that B ⊆ P.
By deﬁnition, it is easy to verify the following lemmas.

Lemma 2.20. Any signature of product type has aﬃne support.

Please see Deﬁnition 2.22 in Section 2.5 of [12] for a proof of Lemma 2.20. More information

on A and P can be found in [8].

Lemma 2.21. Let f be an EO signature of arity 4 satisfying ars with support size 4, say f α, f β,
f α and f β (cid:54)= 0 where α (cid:54)= β, β. Then f ∈ P if and only if |f α| = |f β|.

Proof. Suppose f ∈ P. Then by Lemma 2.20 it has aﬃne support. Being an EO signature with
support size 4, we can show that, after renaming its 4 variables we may assume the support is deﬁned
by (x1 (cid:54)= x2) ∧ (x3 (cid:54)= x4). No binary equality is used in its deﬁnition for being in P, and exactly
these two binary disequalities are used. Then f takes values ac, ad, bc, bd on 0101, 0110, 1001, 1010
for some a, b, c, d (cid:54)= 0. By ars, we have bd = ac and ad = bc. It follows that |a| = |b|. Similarly
|c| = |d|. Therefore all nonzero values of f have the same norm. Hence |f α| = |f β|.

Conversely, suppose f α = reiϕ and f β = reiψ, for some r > 0 and ϕ, ψ. By renaming variables
. Then the unary functions

we may assume α = 0101, β = 0110. Let a = rei ϕ+ψ
(a, ¯a) on x1 and (c, ¯c) on x3, times (x1 (cid:54)= x2) ∧ (x3 (cid:54)= x4) deﬁnes f ∈ P.

and c = ei ϕ−ψ

2

2

The following tractable result is known [16], since ((cid:54)=2) ∈ A ∩ P.

Theorem 2.22. Let F be any set of complex-valued signatures on Boolean variables. If F ⊆ A or
F ⊆ P, then Holant((cid:54)=2| F) is tractable.

12

Problems deﬁned by A and by P are tractable [8]. For an EO signature f of arity 4, the
complexity classiﬁcation of #EO(f ) is known [13]. (This is the six-vertex model for general 4-
regular graphs.) For the special case when the 4-ary EO signature f further satisﬁes ars, the
tractability criterion in [13] simpliﬁes because in this case f ∈ A implies that f ∈ P. We restate
this complexity classiﬁcation of #EO(f ) for our setting.

Theorem 2.23. Let f be an EO signature of arity 4 satisfying ars. Then #EO(f ) is #P-hard
unless f ∈ P.

The complexity classiﬁcation of #CSP is also known [16].

Theorem 2.24. Let F be any set of complex-valued signatures on Boolean variables. Then
#CSP(F) is #P-hard unless F ⊆ A or F ⊆ P, in which cases the problem is tractable.

3. Main Result and Proof Outline

Starting from this section, a signature means a complex-valued EO signature satisfying the ars

condition and F denotes a set of such signatures. The main result of this paper is

Theorem 3.1. Let F be a set of EO signatures satisfying ars. Then, #EO(F) is #P-hard unless
F ⊆ A or F ⊆ P, in which cases it is tractable.

Since a complexity dichotomy of #EO(f ) for a single signature f of arity 4 is known (Theo-
rem 2.23), we wish to leverage this knowledge and realize arity 4 signatures from a given set of
signatures, to which we can apply the known tractability criteria. We will use the mating con-
struction to realize signatures of arity 4, then apply the Cauchy-Schwarz inequality. Consider a
nonzero signature f ∈ F. We may assume that f is irreducible. Otherwise we can replace f by
its irreducible factors without changing the complexity due to Lemma 2.15. We have the following
lemma.

Lemma 3.2. Let f ∈ F be a nonzero irreducible signature of arity n (cid:62) 4. Then one of the following
alternatives holds:

• #EO(F) is #P-hard,

• #EO({(cid:54)=4} ∪ F) (cid:54)T #EO(F), or

• there exists a nonzero constant λ, such that for all pairs of distinct indices {i, j}, M (mijf ) =

λN ⊗2, where N ⊗2 =

(cid:20) 0 0 0 1
0 0 1 0
0 1 0 0
1 0 0 0

(cid:21)
.

We call the third statement the property of (mutual) orthogonality.

Proof. We consider the signature mijf realized by mating two copies of f for all pairs of distinct
If #EO(mijf ) is already #P-hard, then #EO(F) is also #P-hard since
indices {i, j} ⊆ [n].
#EO(mijf ) (cid:54)T #EO(F). Since we already have a complexity dichotomy for arity 4 signatures,
we may assume that mijf satisﬁes the tractability condition and that #EO(mijf ) is computable
in polynomial time for every pair {i, j}. Recall the form (2.1). If there exists some {i, j}, such
that mijf ≡ 0, then f 00
ij ≡ 0, which implies f ≡ 0. A contradiction. So we
have mijf (cid:54)≡ 0, for all pairs {i, j}. Then by Theorem 2.23, #EO(mijf ) is tractable if and only if

ij = f 10

ij = f 01

ij = f 11

13

mijf ∈ P. By Lemma 2.20, we know mijf has aﬃne support, and being nonzero it has support
size either 2 or 4 (by the form in (2.1), the support size is not 1). There are two cases depending
on the support size of mijf for all pairs {i, j}.

1. There exists some pair {i, j} such that mijf has support size 2. Then,

• Either M (mijf ) has the form λij

• or M (mijf ) has the form λij

(cid:21)

where λij = |f 00

ij |2 = |f 11

ij |2 (cid:54)= 0,

(cid:20) 0 0 0 1
0 0 0 0
0 0 0 0
1 0 0 0
(cid:21)

where λij = |f 01

(cid:20) 0 0 0 0
0 0 1 0
0 1 0 0
0 0 0 0
ij |2 = 0 cannot occur since |(cid:104)f 01

ij |2 = |f 10

ij |2 (cid:54)= 0.

The form that (cid:104)f 01
both forms, (cid:54)=4 is realizable since λij (cid:54)= 0. Thus, #EO({(cid:54)=4} ∪ F) (cid:54)T #EO(F).

ij (cid:105) (cid:54)= 0 while |f 01

ij , f 10

ij , f 10

ij (cid:105)| (cid:54) |f 01

ij ||f 10

ij |. In

2. For all pairs {i, j}, mijf has support size 4. By Lemma 2.21,

• Either M (mijf ) has the form λij

0,

(cid:21)

(cid:20) 0 0 0 1
0 0 1 0
0 1 0 0
1 0 0 0

where λij = |f 00

ij |2 = |f 11

ij |2 = |f 01

ij |2 = |f 10

ij |2 (cid:54)=

• or M (mijf ) has the form

ij (cid:105)|2 = |f 01

ij |2|f 10

ij |2 (cid:54)= 0.

(cid:35)

(cid:34) 0

0
0
ij ,f 10
0 (cid:104)f 01
|f 01
ij |2
ij (cid:105)
|f 10
ij |2
(cid:104)f 10
ij ,f 01
0
0
0
0
ij |2 = 0 cannot occur.
ij (cid:105) (cid:54)= 0 while |f 01

0
0
ij (cid:105) 0
0

, where |(cid:104)f 01

ij , f 10

ij , f 10

ij | = |f 10

ij = cf 10
ij
ij |2 = |f 11

Again, the form that (cid:104)f 01
In the ﬁrst form, four
vectors form a set of mutually orthogonal vectors of nonzero equal norm. In the second form,
for some c ∈ C. In addition, we know |c| = 1
by Cauchy-Schwarz, it means that f 01
ij | by ars. Since |f 00
ij = f 11
ij |2 = 0, we have f 00
due to |f 01
ij = 0, the all-zero
vector. Thus, f is factorizable as a tensor product f = b(xi, xj) ⊗ g, for some g and some
binary signature b(xi, xj) = (0, a, a, 0), a contradiction because f is irreducible.
Thus, in this case, M (mijf ) = λijN ⊗2 for all pairs {i, j}. Then, we show that all λij have
the same value. If we mate further the four dangling variables of mijf , i.e., we connect the
remaining xi in one copy of f with another copy using ((cid:54)=2), and similarly for xj, which
totally mates two copies of f , we get a value 4λij. This value clearly does not depend on the
particular indices {i, j}. We denote the common value λij by λ. Thus, there exists λ (cid:54)= 0
such that for all pairs {i, j}, M (mijf ) = λN ⊗2.

Now we return to the proof of Theorem 3.1. By Lemma 3.2, we have two main cases depending
on whether (cid:54)=4 can be realized by mijf from F. We give a proof outline to show how they will be
handled.

1. The signature (cid:54)=4 cannot be realized by mijf from F. That is, every irreducible signature (or

factor of signatures) in F satisﬁes the orthogonality property stated in Lemma 3.2.
We show that this case happens only if F ⊆ B (Theorem 4.8). We want to prove this by
induction. The general strategy is to start with any signature f ∈ F of arity 2n that is not in
B, we realize a signature g of arity 2n−2 that is also not in B, i.e. #EO({g}∪F) (cid:54)T #EO(F)
(Lemma 4.6). If we can reduce the arity down to 4 (this is by a sequence of reductions that is
constant in length independent of the problem instance size of the graph), then we can show
it is impossible for such a signature to satisfy the orthogonality. Thus, we can use it to realize
(cid:54)=4 or a #P-hard signature by Lemma 3.2. However, our induction proof only works when
the arity 2n (cid:62) 10 (there is an intrinsic reason for this). Therefore we must establish the base

14

cases at arity 4, 6 and 8. Fortunately, using the orthogonality of f , we can prove our theorem
for signatures of arity 4, 6 and 8 separately (Lemma 4.7).
For the induction proof, we use merging to realize signatures of lower arity.
It naturally
reduces the arity by two. Given a signature f /∈ B of arity 2n (cid:62) 10, if ∂(ij)f /∈ B for some
{i, j}, then we are done. So we may assume for every {i, j}, ∂(ij)f ∈ B. We further inquire
whether for every {i, j}, ∂(ij)f (cid:54)≡ 0. If for some {i, j}, ∂(ij)f ≡ 0, then it turns out to be
relatively easy to handle (Lemma 2.17). So we may assume for every {i, j}, ∂(ij)f (cid:54)≡ 0. We
If so, the
aim to show that there is a binary signature b(xu, xv) such that b(xu, xv) | f .
“quotient” gives us a signature not in B, but of arity 2n − 2, by Lemma 2.15. In some cases
we have to replace f by another f (cid:48) to accomplish that.
Assuming ∂(ij)f ∈ B for all {i, j}, we prove there is a b(xu, xv) such that b(xu, xv) | f or
b(xu, xv) | f (cid:48) in the following steps:
(a) If there is a binary signature b(xu, xv) such that b(xu, xv) | ∂(ij)f for every {i, j} disjoint

with {u, v}, then b(xu, xv) | f (Lemma 4.1).

(b) We have assumed ∂(ij)f ∈ B for all {i, j}. Suppose there is one ∂(uv)f ≡ 0. We show
that the binary signature bi(xu, xv) = (0, i, −i, 0) divides ∂(ij)f for every {i, j} disjoint
with {u, v} (Lemma 4.2).

(c) Now, we further assume ∂(ij)f (cid:54)≡ 0 for all {i, j}. We want to show that if a binary
signature b(xu, xv) divides a “triangle”, i.e. b(xu, xv) | ∂(rs)f, ∂(st)f, ∂(rt)f (we say f
satisﬁes the ∆-property), it divides ∂(ij)f for every {i, j} disjoint with {u, v} (Lemma
4.4). To prove this, we need the following delicate lemma.

(d) If a binary signature b(xu, xv) divides “two pairs”, i.e. b(xu, xv) | ∂(st)f, ∂(s(cid:48)t(cid:48))f , where
{s, t} and {s(cid:48), t(cid:48)} are distinct but not necessarily disjoint, then it divides ∂(ij)f for any
{i, j} which is disjoint with {u, v} ∪ {s, t} ∪ {s(cid:48), t(cid:48)} that satisﬁes ∂(st)(ij)f (cid:54)≡ 0 and
∂(s(cid:48)t(cid:48))(ij)f (cid:54)≡ 0 (Lemma 4.3).

(e) Finally, we show that either (i) f satisﬁes the ∆-property, or (ii) we can realize a signature
f (cid:48), where f (cid:48) (cid:54)∈ B has the same arity as f , such that either ∂(ij)f (cid:54)∈ B for some {i, j}, or
f (cid:48) satisﬁes the ∆-property (Lemma 4.5).

These steps will accomplish the arity reduction inductive step.
This case is handled in Section 4. We will see that the unique prime factorization plays an
important role in the proof.

2. Otherwise, we have #EO({(cid:54)=4} ∪ F) (cid:54)T #EO(F).

The signature (cid:54)=4 can be used to realize any ((cid:54)=2k) ∈ DEQ (Lemma 5.1), and then the problem
#EO(DEQ ∪ F) can be expressed as Holant (DEQ | F) (Lemma 5.2). The next idea is to
simulate #CSP(G) ≡T Holant (EQ | G) using Holant (DEQ | F) for some G closely related to
F, and we can apply the dichotomy of #CSP (Theorem 2.24) to get hardness results. The
challenge is to simulate EQ using DEQ and F. After some reﬂection one can observe that
it is impossible to realize EQ by direct gadget constructions. Since signatures in DEQ and
F are EO signatures satisfying ars, by Lemma 2.8 any gadget realizable from them is also
an EO signature. But clearly, any (=k) ∈ EQ is not an EO signature. However we found
an alternative way to simulate EQ globally, and this is achieved depending crucially on some
special properties of F, as follows:
(a) First, using ars we show that #CSP(|F|2) (cid:54)T Holant (DEQ | F) (Lemma 5.3), where
|F|2 denotes the set of signatures by taking norm squares of signatures in F, namely
|F|2 = {|f |2 | f ∈ F}. This directly implies that Holant (DEQ | F) is #P-hard unless
every signature in F has aﬃne support (Corollary 5.4).

15

(b) Then, consider an EO signature with aﬃne support. We show its support has a special

structure called pairwise opposite (Deﬁnition 5.5 and Lemma 5.7).

(c) Finally, given the support of every signature f ∈ F is pairwise opposite, we show
#CSP(F) (cid:54)T Holant (DEQ | F) (Lemma 5.8) by a global simulation, and hence the
problem Holant (DEQ | F) is #P-hard unless F ⊆ A or F ⊆ P (Corollary 5.9).
It follows that, in this case, we have #EO({(cid:54)=4} ∪ F) is #P-hard unless F ⊆ A or F ⊆ P
(Theorem 5.10). This case is handled in Section 5. We will introduce the pairwise opposite
structure and show the global reductions from #CSP to #EO problems.

As observed earlier B ⊆ P. Thus #EO(F) is tractable if F ⊆ B, by Lemma 2.5 and The-
In Section 4, we show that if F (cid:54)⊆ B then either #EO(F) is #P-hard, or we have
In Section 5, we show that #EO({(cid:54)=4} ∪ F) is #P-hard unless

orem 2.22.
#EO({(cid:54)=4} ∪ F) (cid:54)T #EO(F).
F ⊆ A or F ⊆ P. This completes the proof of Theorem 3.1.

4. Interplay of Unique Prime Factorization and ∂(ij) Operations

In this section, we show that if F (cid:54)⊆ B then either #EO(F) is #P-hard or we can realize (cid:54)=4,
i.e., #EO({(cid:54)=4} ∪ F) (cid:54)T #EO(F), and then the results from Section 5 take over. Suppose F (cid:54)⊆ B,
then it contains some signature f /∈ B, and we prove the statement by induction on the arity of f .
The general strategy is that we start with any signature f of arity 2n (cid:62) 10 that is not in B, and
realize a signature g of arity 2n − 2 that is also not in B. As stated in Section 1 this induction only
works for arity 2n (cid:62) 10. We prove the base cases of the induction separately, when f has arity 4,
6 or 8.

For the inductive step, we consider ∂(ij)f for all {i, j}. If there exists {i, j} such that ∂(ij)f /∈ B,
then we can realize g = ∂(ij)f which has arity 2n − 2, and we are done. Thus, we assume ∂(ij)f ∈ B
for all {i, j}. We denote this property by f ∈ (cid:82) B. Under the assumption that f ∈ (cid:82) B, our goal
is to show that there is a binary signature b(xu, xv) such that either b(xu, xv) | f or there exists
another f (cid:48) (cid:54)∈ B realizable from f , such that f (cid:48) has the same arity as f , and b(xu, xv) | f (cid:48). In the
second case we may again assume f (cid:48) ∈ (cid:82) B, for otherwise we may take ∂(ij)f (cid:48) for some {i, j}. Now
we may replace f by f (cid:48) in the second case. From the factorization f = b(xu, xv) ⊗ g, it follows from
the deﬁnition of B that g /∈ B since f /∈ B. From the factorization of f , we can realize g from f by
Lemma 2.15, and we are done. We carry out our induction proof in the next ﬁve lemmas.

For convenience, we use the following notations.

• B = {tensor products of one or more binary EO signatures satisfying ars}.
• f ∈ (cid:82) B denotes the property that ∂(ij)f ∈ B for all {i, j}.
• f ∈ (cid:82) B(cid:54)≡0 denotes the property that ∂(ij)f ∈ B and ∂(ij)f (cid:54)≡ 0 for all {i, j}.

• We say f satisﬁes the ∆-property, if there exist three distinct indices {r, s, t} and a binary

signature b(xu, xv) such that {u, v} ∩ {r, s, t} = ∅, and b(xu, xv) | ∂(rs)f, ∂(st)f, ∂(rt)f .
Lemma 4.1. Let f ∈ (cid:82) B be a signature of arity 2n (cid:62) 6. If there exists a binary signature b(xu, xv)
such that b(xu, xv) | ∂(ij)f for all {i, j} disjoint with {u, v}, then b(xu, xv) | f .

Proof. Recall that f bc
uv denotes the signature obtained by setting variables (xu, xv) of f to (b, c) ∈
{0, 1}2. These are called the pinning operations on {u, v}. Clearly, for any {i, j} disjoint with

16

{u, v}, the pinning operations on {u, v} commute with the merging operation ∂(ij), and so we have
(∂(ij)f )bc

uv = ∂(ij)(f bc

uv).

We may assume the binary signature has the form b(xu, xv) = (0, a, ¯a, 0), where a (cid:54)= 0. Consider
the signature f (cid:48) := ¯af 01
uv . It is a signature on variables of f other than xu and xv. For any
{i, j} disjoint with {u, v}, by merging variables xi and xj of f (cid:48), and recalling that ∂(ij) is a linear
operator, we have

uv − af 10

∂(ij)f (cid:48) = ∂(ij)(¯af 01

uv − af 10

uv ) = ¯a∂(ij)(f 01

uv ) − a∂(ij)(f 10

uv ) = ¯a(∂(ij)f )01

uv − a(∂(ij)f )10
uv.

By assumption, ∂(ij)f = b(xu, xv) ⊗ g, where g is a signature on variables other than xu, xv, xi, xj.
(Since ∂(ij)f has arity at least 4, g is not a constant.) Then we have

∂(ij)f (cid:48) = ¯a(∂(ij)f )01

uv − a(∂(ij)f )10

uv = ¯a(ag) − a(¯ag) ≡ 0.

Note that f (cid:48) is also an EO signature. By Lemma 2.7, we have f (cid:48) ≡ 0, and hence ¯af 01
Moreover, by the factorization of ∂(ij)f , we have ∂(ij)(f 00
(∂(ij)f )11
wt(α) = 0 or 2n − 2. By Lemma 2.7 again, we have f 00
(0, a, ¯a, 0) ⊗ ( 1

uv ) = (∂(ij)f )00
uv ≡ 0 for any {i, j} disjoint with {u, v}. Also, since 2n (cid:62) 6, f 00

uv ≡ 0. Hence, f = (f 00

uv ≡ af 10
uv .
uv ) =
uv (α) = 0 when
uv , f 11
uv ) =

uv ≡ 0 and ∂(ij)(f 11
uv (α) = f 11

uv ), and we have b(xu, xv) | f .

uv = f 11

uv , f 10

uv , f 01

a f 01

Notice that for arity 2n (cid:62) 6, if b(xu, xv) | f and thus f = b(xu, xv) ⊗ g, then by the deﬁnition
of B, from f /∈ B we obtain g /∈ B, which has arity 2n − 2, completing the induction step using
Lemma 2.15. Therefore, to apply Lemma 4.1 we want to show that there is a binary signature
b(xu, xv) such that b(xu, xv) | ∂(ij)f for every {i, j} disjoint with {u, v}. We ﬁrst consider the case
that ∂(uv)f ≡ 0 for some {u, v}.
Lemma 4.2. Suppose f has arity (cid:62) 4 and f ∈ (cid:82) B. If ∂(uv)f ≡ 0 for some {u, v}, then the binary
signature bi(xu, xv) = (0, i, −i, 0) satisﬁes bi(xu, xv) | ∂(ij)f for all {i, j} disjoint with {u, v}.

Proof. For any {i, j} disjoint with {u, v}, the operations ∂(ij) and ∂(uv) commute. Since ∂(uv)f ≡ 0,
we have

Since ∂(ij)f ∈ B, by Lemma 2.17, we have bi(xu, xv) | ∂(ij)f .

∂(uv)(∂(ij)f ) = ∂(ij)(∂(uv)f ) ≡ 0.

In the following, for convenience we denote ∂(ij)(∂(uv)f ) by ∂(ij)(uv)f .
Now, we assume ∂(ij)f ∈ B and ∂(ij)f (cid:54)≡ 0 for all {i, j}. We denote this property by f ∈ (cid:82) B(cid:54)≡0.
Each ∂(ij)f has a unique prime factorization. We will show that once we can ﬁnd some binary
signature b(xu, xv) that divides a “triangle”, i.e. b(xu, xv)|∂(rs)f, ∂(st)f, ∂(rt)f for three distinct
{r, s, t} disjoint with {u, v}, then it divides ∂(ij)f for all {i, j} disjoint with {u, v}. We ﬁrst consider
the case that b(xu, xv) divides “two pairs”. The statement of the following lemma is delicate.
Lemma 4.3. Let f be a signature of arity 2n (cid:62) 8 and f ∈ (cid:82) B(cid:54)≡0. Suppose there exist two pairs
of indices {s, t} and {s(cid:48), t(cid:48)} that are distinct but not necessarily disjoint, and a binary signature
b(xu, xv), where {u, v} ∩ ({s, t} ∪ {s(cid:48), t(cid:48)}) = ∅, such that b(xu, xv) | ∂(st)f, ∂(s(cid:48)t(cid:48))f . Then for any
{i, j} disjoint with {u, v} ∪ {s, t} ∪ {s(cid:48), t(cid:48)}, if ∂(st)(ij)f (cid:54)≡ 0 and ∂(s(cid:48)t(cid:48))(ij)f (cid:54)≡ 0, then b(xu, xv) | ∂(ij)f .

17

Proof. By hypothesis f ∈ (cid:82) B(cid:54)≡0, so for any {i, j}, we have ∂(ij)f ∈ B and is nonzero, and thus it has
a unique factorization with binary prime factors. Let {i, j} be disjoint with {u, v} ∪ {s, t} ∪ {s(cid:48), t(cid:48)}.
Suppose it satisﬁes the condition ∂(st)(ij)f (cid:54)≡ 0 and ∂(s(cid:48)t(cid:48))(ij)f (cid:54)≡ 0. We ﬁrst prove that xu and xv
must appear in one single binary prime factor b(cid:48)(xu, xv) in the factorization of ∂(ij)f . That is,

∂(ij)f = b(cid:48)(xu, xv) ⊗ g,

(4.1)

where g (cid:54)≡ 0 is a signature on variables other than xu, xv, xi, xj. For a contradiction, suppose
variables xu and xv appear in two distinct binary prime factors b1(xu, xu(cid:48)) and b2(xv, xv(cid:48)) in the
prime factorization of ∂(ij)f . Then,

∂(ij)f = b1(xu, xu(cid:48)) ⊗ b2(xv, xv(cid:48)) ⊗ g(cid:48),

(4.2)

where g(cid:48) (cid:54)≡ 0 is a signature on variables other than xu, xu(cid:48), xv, xv(cid:48), xi, xj. By hypothesis, b(xu, xv) |
∂(st)f , thus ∂(st)f = b(xu, xv) ⊗ h for some h on variables other than xu, xv, xs, xt, which certainly
include xi, xj. Thus ∂(ij)(st)f = b(xu, xv) ⊗ ∂(ij)h, and we have b(xu, xv)|∂(ij)(st)f = ∂(st)(ij)f . By
hypothesis for this {i, j} we have ∂(st)(ij)f (cid:54)≡ 0. This implies that after merging variables xs and
xt of ∂(ij)f , xu and xv form a nonzero binary signature. By the form (4.2) of ∂(ij)f , the only way
xu and xv can form a nonzero binary signature in ∂(st)(ij)f is that the merge operation is actually
merging xu(cid:48) and xv(cid:48). We conclude that {s, t} = {u(cid:48), v(cid:48)}. We can repeat the same proof replacing
{s(cid:48), t(cid:48)} for {s, t}, and since b(xu, xv) | ∂(s(cid:48)t(cid:48))(ij)f and ∂(s(cid:48)t(cid:48))(ij)f (cid:54)≡ 0, we have {s(cid:48), t(cid:48)} = {u(cid:48), v(cid:48)}.
Hence, we have {s, t} = {s(cid:48), t(cid:48)}. This is a contradiction, and (4.2) does not hold.

Thus (4.1) holds. Since {s, t} is disjoint with {u, v, i, j}, by the form (4.1) of ∂(ij)f , when
merging variables xs and xt of ∂(ij)f , we actually merge variables xs and xt of g and the binary
signature b(cid:48)(xu, xv) is not aﬀected. Thus,

∂(st)(ij)f = b(cid:48)(xu, xv) ⊗ ∂(st)g.

That is, b(cid:48)(xu, xv) | ∂(st)(ij)f. By hypothesis we also have b(xu, xv) | ∂(st)f . By the fact that {i, j}
is disjoint with {u, v, s, t}, we have b(xu, xv) | ∂(ij)(st)f = ∂(st)(ij)f. Thus b(xu, xv) and b(cid:48)(xu, xv)
both divide ∂(st)(ij)f (cid:54)≡ 0. By the unique factorization lemma (Lemma 2.13), we have b(xu, xv) =
λb(cid:48)(xu, xv) for some λ (cid:54)= 0. In particular, by (4.1), b(xu, xv) | ∂(ij)f .

Now we come to the pivotal “triangle” lemma. Recall that the ∆-property was deﬁned just
before Lemma 4.1. Suppose f satisﬁes the ∆-property, i.e., there is a binary b(xu, xv) that divides
a “triangle”, b(xu, xv) | ∂(rs)f, ∂(st)f, ∂(rt)f . A key step in the proof of Lemma 4.4 is to show that
for any {i, j} disjoint with {u, v, r, s, t}, among the three iterated “derivatives” ∂(rs)(ij)f, ∂(st)(ij)f
and ∂(rt)(ij)f , at most one of them can be identically zero. Then Lemma 4.3 applies.
Lemma 4.4. Let f ∈ (cid:82) B(cid:54)≡0 have arity 2n (cid:62) 10. Suppose f satisﬁes the ∆-property. Then there is
a binary signature b(xu, xv) such that for any {i, j} disjoint with {u, v}, we have b(xu, xv) | ∂(ij)f .

Proof. By the ∆-property, there is a binary signature b(xu, xv) and {r, s, t} disjoint with {u, v}
such that b(xu, xv) | ∂(rs)f, ∂(st)f, ∂(rt)f . For any {i, j} disjoint with {u, v}, we ﬁrst consider the
case that {i, j} is also disjoint with {r, s, t}. Our idea is to show that among ∂(rs)(ij)f, ∂(st)(ij)f
and ∂(rt)(ij)f , at most one of them can be a zero signature. This implies that there are two among
these that are not identically zero. Then by Lemma 4.3, we have b(xu, xv) | ∂(ij)f .

By Lemma 2.17, ∂(rs)(ij)f ≡ 0 iﬀ the binary signature bi(xr, xs) = (0, i, −i, 0) divides ∂(ij)f .
Similarly, ∂(st)(ij)f ≡ 0 iﬀ bi(xs, xt) | ∂(ij)f , and ∂(rt)(ij)f ≡ 0 iﬀ bi(xr, xt) | ∂(ij)f . By hypothesis,

18

f ∈ (cid:82) B(cid:54)≡0, so ∂(ij)f (cid:54)≡ 0. The signature ∂(ij)f ∈ B has a unique prime factorization. By Lemma
2.13, since the three signatures bi(xr, xs), bi(xs, xt) and bi(xr, xt) are on pairwise overlapping sets of
variables, at most one of them can be a tensor factor of ∂(ij)f . Thus, among ∂(rs)(ij)f, ∂(st)(ij)f and
∂(rt)(ij)f , at most one of them can be a zero signature, which implies b(xu, xv) | ∂(ij)f , by Lemma
4.3, for all {i, j} disjoint with {u, v, r, s, t}.

Now suppose {i, j} is disjoint with {u, v}, but not disjoint with {r, s, t}. In the union {i, j} ∪
{r, s, t} ∪ {u, v}, there are at most 6 distinct indices. Since the arity of f is at least 10, there are
three indices {r(cid:48), s(cid:48), t(cid:48)} such that {r(cid:48), s(cid:48), t(cid:48)} is disjoint with {i, j} ∪ {r, s, t} ∪ {u, v}. Since {r(cid:48), s(cid:48)}
is disjoint with {u, v, r, s, t}, we can replace {i, j} by {r(cid:48), s(cid:48)} in the proof above for the case when
{i, j} is disjoint with {u, v, r, s, t}, and derive b(xu, xv) | ∂(r(cid:48)s(cid:48))f . By the same reason, we also
have b(xu, xv) | ∂(s(cid:48)t(cid:48))f , and b(xu, xv) | ∂(r(cid:48)t(cid:48))f . In other words we found a new “triangle”, that
is, f satisﬁes the ∆-property with the binary signature b(xu, xv) and the triple {r(cid:48), s(cid:48), t(cid:48)} replacing
{r, s, t}. Note that now {i, j} is disjoint with {r(cid:48), s(cid:48), t(cid:48)}. So, we can apply the proof above with
{r, s, t} now replaced by {r(cid:48), s(cid:48), t(cid:48)}, and we conclude that b(xu, xv) | ∂(ij)f .

Remark. This is the ﬁrst place we require the arity of f to be at least 10.

We go for the kill in the next lemma.

Lemma 4.5. Let f ∈ F be a signature of arity 2n (cid:62) 10, f /∈ B and f ∈ (cid:82) B(cid:54)≡0. Then

• either f satisﬁes the ∆-property;

• or there is a signature f (cid:48)

(cid:54)∈ B that has the same arity as f , such that #EO(f (cid:48) ∪ F) (cid:54)T

#EO(F), and the following hold: either (1) f (cid:48) (cid:54)∈ (cid:82) B or (2) f (cid:48) satisﬁes the ∆-property.

Proof. Consider ∂(12)f . Since ∂(12)f ∈ B and ∂(12)f (cid:54)≡ 0, without loss of generality, we may assume
in the unique prime factorization of ∂(12)f , variables x3 and x4 appear in one binary prime factor,
x5 and x6 appear in one binary prime factor, and so on. That is,

∂(12)f = b1(x3, x4) ⊗ b2(x5, x6) ⊗ b3(x7, x8) ⊗ b4(x9, x10) ⊗ . . . ⊗ bn−1(x2n−1, x2n).

(4.3)

Case 1. For all 1 (cid:54) k (cid:54) n − 1, bk(x2k+1, x2k+2) (cid:54)= a scalar multiple of (0, i, −i, 0).

Then by Lemma 2.17, ∂(34)(12)f (cid:54)≡ 0, and clearly, bk(x2k+1, x2k+2)|∂(34)(12)f for k (cid:62) 2. In
particular, we have

b2(x5, x6), b3(x7, x8), b4(x9, x10)|∂(34)(12)f,

since f has arity at least 10.

Now consider ∂(34)f . We have ∂(34)f ∈ B, ∂(34)f (cid:54)≡ 0, and ∂(12)(34)f = ∂(34)(12)f (cid:54)≡ 0.

• If x1 and x2 appear in one binary prime factor b(cid:48)

1(x1, x2) in the unique prime factorization
of ∂(34)f , then after merging variables x1 and x2, the binary signature b(cid:48)
1(x1, x2) becomes
a nonzero constant, but all other binary prime factors of ∂(34)f are unchanged and appear
in the prime factorization of ∂(12)(34)f . By commutativity ∂(12)(34)f = ∂(34)(12)f , and by
(4.3) the prime factors of ∂(12)(34)f are precisely bk(x2k+1, x2k+2), for 2 (cid:54) k (cid:54) n − 1, we
conclude that the unique prime factorization of ∂(34)f has the following form (up to a
nonzero constant)

∂(34)f = b(cid:48)

1(x1, x2) ⊗ b2(x5, x6) ⊗ b3(x7, x8) ⊗ b4(x9, x10) ⊗ . . . ⊗ bn−1(x2n−1, x2n).

19

• If x1 and x2 appear in two distinct binary prime factors b(cid:48)(cid:48)

2(x2, xj) in the
unique prime factorization of ∂(34)f , then after merging variables x1 and x2, from (4.3)
we have

1(x1, xi) and b(cid:48)(cid:48)

∂(12)(34)f = ∂(34)(12)f = c · b2(x5, x6) ⊗ b3(x7, x8) ⊗ b4(x9, x10) ⊗ . . . ⊗ bn−1(x2n−1, x2n)

for some nonzero constant c. On the other hand, from the form of ∂(34)f , the two
variables xi and xj form a new nonzero binary b(cid:48)(cid:48)(xi, xj). Thus the pair {i, j} is either
{5, 6}, or {7, 8}, etc. and we may assume (i, j) = (5, 6) by renaming the variables. Thus,
we have

∂(34)f = b(cid:48)(cid:48)

1(x1, x5) ⊗ b(cid:48)(cid:48)

2(x2, x6) ⊗ b3(x7, x8) ⊗ b4(x9, x10) ⊗ . . . ⊗ bn−1(x2n−1, x2n).

(In the following proof we can use any bj, for 4 (cid:54) j (cid:54) n − 1; for deﬁniteness we set j = 4,
and since n (cid:62) 5 this choice b4 is permissible.) In both cases above, we have b4(x9, x10)|∂(34)f ,
and ∂(78)(34)f (cid:54)≡ 0 since b3(x7, x8) (cid:54)= (0, i, −i, 0) by assumption. Moreover, note that in both
cases, x6 and x7 do not appear as the two variables of a single binary signature tensor factor
of ∂(34)f . The same is true for x6 and x8. This implies that ∂(67)(34)f (cid:54)≡ 0 and ∂(68)(34)f (cid:54)≡ 0.
So we have derived

b4(x9, x10) | ∂(34)f, ∂(78)(34)f (cid:54)≡ 0, ∂(67)(34)f (cid:54)≡ 0, and ∂(68)(34)f (cid:54)≡ 0.

Clearly, by (4.3), we also have

b4(x9, x10) | ∂(12)f, ∂(78)(12)f (cid:54)≡ 0, ∂(67)(12)f (cid:54)≡ 0, and ∂(68)(12)f (cid:54)≡ 0.

Apply Lemma 4.3 three times (with {u, v} = {9, 10}, {s, t} = {1, 2}, {s(cid:48), t(cid:48)} = {3, 4}, and
taking {i, j} = {6, 7}, {7, 8}, {6, 8} separately), we have

b4(x9, x10) | ∂(67)f, ∂(78)f, ∂(68)f.

Thus f satisﬁes the ∆-property ({u, v} = {9, 10} and {r, s, t} = {6, 7, 8}) and we are done.

Case 2. There is a binary signature bk−1(x2k−1, x2k) in the factorization of ∂(12)f such that
bk−1(x2k−1, x2k) = a scalar multiple of (0, i, −i, 0). Then by Lemma 2.15, we have the reduc-
tion #EO((0, i, −i, 0), f ) (cid:54)T #EO(f ). Connecting the variable x2k−1 of f with (0, i, −i, 0), we
can realize a signature f (cid:48). Consider ∂(12)f (cid:48). Again the operations commute: it is the same as
connecting the variable x2k−1 of ∂(12)f with (0, i, −i, 0). Since ∂(12)f is a tensor product of bi-
nary signatures, connecting the variable x2k−1 of ∂(12)f with (0, i, −i, 0) is just connecting the
variable x2k−1 of the binary bk−1(x2k−1, x2k) with (0, i, −i, 0), which gives a binary (0, 1, 1, 0).
That is, ∂(12)f (cid:48) is still a tensor product of the same binary signatures as in ∂(12)f except that
bk−1(x2k−1, x2k) = (0, i, −i, 0) is replaced by b(cid:48)
k−1(x2k−1, x2k) = (0, 1, 1, 0). Similarly, for any
binary signature b(cid:96)−1(x2(cid:96)−1, x2(cid:96)) = (0, i, −i, 0) in ∂(12)f , we modify it in this way (together all
at once). Thus, we can realize a signature f (cid:48) by connecting some variables with (0, i, −i, 0)
such that

∂(12)f (cid:48) = b(cid:48)

1(x3, x4) ⊗ b(cid:48)

2(x5, x6) ⊗ b(cid:48)

3(x7, x8) ⊗ b(cid:48)

4(x9, x10) ⊗ . . . ⊗ b(cid:48)

n−1(x2n−1, x2n),

k(x2k+1, x2k+2) (cid:54)= a scalar multiple of (0, i, −i, 0) for any 1 (cid:54) k (cid:54) n − 1. Moreover,
where b(cid:48)
we know f (cid:48) /∈ B since f /∈ B; this follows from the closure property of B under the operation

20

of connecting a variable by (0, i, −i, 0) via (cid:54)=2, and the fact that if we connect three times
(0, i, −i, 0) via (cid:54)=2 in a chain from f (cid:48), we get f back: (cid:0)N (cid:2) 0 i
If f (cid:48) /∈ (cid:82) B, we are done. Otherwise, f (cid:48) ∈ (cid:82) B.
If there is {u, v} such that ∂(uv)f (cid:48) ≡ 0,
then by Lemma 4.2, we have bi(xu, xv) | ∂(ij)f (cid:48) for any {i, j} disjoint with {u, v} where
bi(xu, xv) = (0, i, −i, 0). Then clearly f (cid:48) satisﬁes the ∆-property. Otherwise, f (cid:48) ∈ (cid:82) B(cid:54)≡0. As
we just proved in Case 1, now replacing f by f (cid:48), we have b(cid:48)
4(x9, x10) | ∂(67)f (cid:48), ∂(78)f (cid:48), ∂(68)f (cid:48).
This completes the proof.

(cid:3)(cid:1)4 = I.

−i 0

Remark. This proof also requires the arity of f to be at least 10.

Lemma 4.6 (Induction). If F contains a signature f /∈ B of arity 2n (cid:62) 10, then there is a signature
g /∈ B of arity 2n − 2 such that #EO({g} ∪ F) (cid:54)T #EO(F).
Proof. If f (cid:54)∈ (cid:82) B, then there exists {i, j} such that ∂(ij)f /∈ B, and we are done by choosing
g = ∂(ij)f . Thus, we assume f ∈ (cid:82) B. If ∂(uv)f ≡ 0 for some indices {u, v}, then by Lemmas 4.2
and 4.1, the binary signature bi(xu, xv) = (0, i, −i, 0) divides f . That is, f = bi(xu, xv) ⊗ g where g
is a signature of arity 2n − 2, and g /∈ B since f /∈ B. By Lemma 2.15, we have #EO({g} ∪ F) (cid:54)T
#EO(F). So we may assume f ∈ (cid:82) B(cid:54)≡0. Now we apply Lemma 4.5. If the ﬁrst alternative of
Lemma 4.5 holds, then f satisﬁes the ∆-property. Then by Lemmas 4.4 and 4.1, there is a binary
signature b(xu, xv) such that b(xu, xv) | f . This divisibility of f produces a signature not in B
of arity 2n − 2 similar to what we have just proved, and we are done. If the second alternative
of Lemma 4.5 holds, then we have a signature f (cid:48)
(cid:54)∈ B having the same arity as f . We have
#EO({f (cid:48)} ∪ F) (cid:54)T #EO(F). If f (cid:48) (cid:54)∈ (cid:82) B, then there exists {i, j} such that ∂(ij)f (cid:48) /∈ B, and we
can take ∂(ij)f (cid:48) as g, and so we are done. Otherwise, by the conclusion of Lemma 4.5, f (cid:48) satisﬁes
the ∆-property. Similar to the proof above for f , there is a binary signature b(xu, xv) such that
b(xu, xv) | f (cid:48). This divisibility of f (cid:48) produces a signature not in B of arity 2n − 2. This completes
the inductive step.

Now, we use the orthogonality property to prove the base cases.

Lemma 4.7 (Base cases). If F contains a signature f /∈ B of arity 4, 6 or 8, then either #EO(F)
is #P-hard or #EO({(cid:54)=4} ∪ F) (cid:54)T #EO(F).

Proof. Again by Lemma 2.15, we may assume f is irreducible. Otherwise, we just need to analyze
each irreducible factor of f . More speciﬁcally, if f /∈ B and f is reducible, then there exists an
irreducible factor g of f such that g /∈ B, and g has arity 4 or 6. If we can use g to realize a #P-hard
signature or (cid:54)=4, we can also use f to do so.

By Lemma 3.2, we may assume that f satisﬁes the orthogonality. Otherwise, we are done.
Therefore, we have

ij |2 = λ
|f ab
for any (a, b) ∈ {0, 1}2, and any pair {i, j}. This readily leads to a contradiction for signatures of
arity 4 as follows. Suppose f is an irreducible signature on four variables x1, x2, x3, x4. Let (i, j, k, (cid:96))
be an arbitrary permutation of {1, 2, 3, 4}. Consider the vector f 00
ij . It has only one possible nonzero
entry f 0011
ijk(cid:96) since the support of f is on half weight. Thus,

ij |2 = |f 0011
|f 00

ijk(cid:96) |2 = λ

21

for any (xi, xj, xk, x(cid:96)) = (0, 0, 1, 1). Since (i, j, k, (cid:96)) is an arbitrary permutation of {1, 2, 3, 4}, f 0011
ijk(cid:96)
is an arbitrary entry of f at half weight, and since f is nonzero, every weight two entry of f has
the same nonzero norm
ijk(cid:96) and
f 0110
ijk(cid:96) . Hence,

ij , it has two nonzero entries f 0101

λ. However, consider the vector f 01

√

λ = |f 01

ij |2 = |f 0101

ijk(cid:96) |2 + |f 0110

ijk(cid:96) |2 = 2λ,

which means λ = 0. This is a contradiction.

Before we go into the technical details of the proof for signatures of arity 6 and 8, we ﬁrst give
some intuitions. By considering the norm-squares of entries in f as unknowns, the orthogonality
property of f actually gives a linear system. Our proof is to show that when f has small arity 4, 6, 8,
the solution region of such a system only has the trivial zero point. We illustrate this perspective
(cid:1) = 6 possible nonzero entries. These entries
by the arity 4 case. Suppose f has arity 4. It has (cid:0)4
2
satisfy the orthogonality condition. We have

ij |2 − λ = 0,
|f 00

ij |2 − λ = 0,
|f 01

ij |2 − λ = 0,
|f 10

ij |2 − λ = 0
|f 11

for any {i, j} ⊆ {1, 2, 3, 4}. There are (cid:0)4
(cid:1) × 4 = 24 many equations in total. If we view these norm-
2
squares of entries |f 0011|2, |f 0101|2, |f 0110|2, |f 1001|2, |f 1010|2, |f 1100|2 (we omit subscripts here) and
the value λ as variables, those equations are linear equations on these variables. By ars, we have
|f 0011|2 = |f 1100|2, |f 0101|2 = |f 1010|2, and |f 0110|2 = |f 1001|2. So there are only four variables. Our
idea is to show that the matrix of this linear system which has 24 many rows but only 4 columns
has full rank. We only need 4 rows to prove this. In our proof for arity 4, we picked the following
4 rows and showed that the induced linear system has full rank:







1 0 0 −1
0 1 0 −1
0 0 1 −1
0 1 1 −1













|f 0011|2
|f 0101|2
|f 0110|2
λ







=



0
0




0


0

.

For the arity 6 case, we will basically show the same thing (i.e., the linear system has only the
trivial zero solution) with some carefully chosen rows. For arity 8 case, we will use the fact that
the variables take nonnegative values and we show the linear system has no nonnegative solution
except the zero solution.

An intuitive reason why this proof could succeed for signatures of small arity is that in these
cases, we have more equations than variables, which leads to an over-determined linear system. For
the general case of arity n, there are 4(cid:0)n
(cid:1)/2 + 1 many variables. Since
(cid:1) many equations but (cid:0) n
2
n/2
4(cid:0)n
(cid:1)/2 + 1 when n is large, this method will not work for large n. This is why we cannot
2
hope to apply this proof to signatures of large arity.

(cid:1) (cid:28) (cid:0) n
n/2

Now, we give the formal proof for signatures of arity 6 and 8. In what follows we assume f has
ij into two vectors f ab0
ij , we can pick a third variable xk and separate f ab
ijk

arity (cid:62) 6. Given a vector f ab
and f ab1

ijk according to xk = 0 or 1. By setting (a, b) = (0, 0), we have

ij |2 = |f 000
|f 00

ijk |2 + |f 001

ijk |2 = λ.

Similarly, we consider the vector f 00

ik and separate it according to xj = 0 or 1. We have

ik |2 = |f 000
|f 00

ijk |2 + |f 010

ijk |2 = λ.

22

(4.4)

(4.5)

Comparing equations (4.4) and (4.5), we have |f 001
|f 101
ijk |2. Thus, we have |f 001
ijk and f 101
f 001

ijk |2 = |f 101
ijk according to xi = 0 or 1. Therefore,

ijk |2. Note that the vector f 01

ijk |2 = |f 010

ijk |2. Moreover, by ars, we have |f 010

ijk |2 =
jk can be separated into two vectors

Thus, we have |f 001
by ars, we also have |f 111
distinct indices, by symmetry we have

ijk |2 = |f 000

ijk |2 = |f 101

jk |2 = |f 001
|f 01

ijk |2 + |f 101
ijk |2 = λ/2. Then, by equation (4.4), we have |f 000

ijk |2 = λ.

ijk |2 = λ/2, and again
ijk |2 = λ/2. Note that the indices i, j, k can be arbitrary three

for f of arity (cid:62) 6, and for all (xi, xj, xk) = (a, b, c) ∈ {0, 1}3.

ijk |2 = λ/2
|f abc

(4.6)

This leads to a contradiction for signatures of arity 6. Suppose f is an irreducible signature
on 6 variables x1, x2, . . . , x6. Let (i, j, k, i(cid:48), j(cid:48), k(cid:48)) be an arbitrary permutation of {1, 2, . . . , 6}. Note
that the vector f 000

ijk has only one possible nonzero entry f 000111

ijki(cid:48)j(cid:48)k(cid:48). Thus, by (4.6) we have

ijk |2 = |f 000111
|f 000

ijki(cid:48)j(cid:48)k(cid:48)|2 = λ/2

for any (xi, xj, xk, xi(cid:48), xj(cid:48), xk(cid:48)) = (0, 0, 0, 1, 1, 1). That is, any entry of f at half weight has the same
nonzero norm (cid:112)λ/2. However, the vector f 001
ijk has (cid:0)3
ijki(cid:48)j(cid:48)k(cid:48)|2 + |f 001101

(cid:1) = 3 nonzero entries. But,
2

ijki(cid:48)j(cid:48)k(cid:48)|2 + |f 001110

ijki(cid:48)j(cid:48)k(cid:48)|2 = 3λ/2,

ijk |2 = |f 001011

λ/2 = |f 001

which means λ = 0. This is a contradiction.

For signatures of arity 8, we need to go further and use the fact that the norm-square is
ijk , we can continue to pick a fourth variable x(cid:96) and separate f abc
ijk
ijk(cid:96) according to x(cid:96) = 0 or 1. By setting (a, b, c) = (0, 0, 0), we have

nonnegative. Given a vector f abc
into two vectors f abc0
from (4.6)

ijk(cid:96) and f abc1

ijk |2 = |f 0000
|f 000
Similarly, we consider the vector f 001
ij(cid:96) and separate it according to xk = 0 or 1. We have

ijk(cid:96) |2 + |f 0001

ijk(cid:96) |2 = λ/2.

ij(cid:96) |2 = |f 0001
|f 001

ijk(cid:96) |2 + |f 0011

ijk(cid:96) |2 = λ/2.

(4.7)

(4.8)

Comparing equations (4.7) and (4.8), we have |f 0000
signatures of arity 8.

ijk(cid:96) |2 = |f 0011

ijk(cid:96) |2. This leads to a contradiction for

Suppose f is an irreducible signature on 8 variables x1, x2, . . . , x8. Let (i, j, k, (cid:96), i(cid:48), j(cid:48), k(cid:48), (cid:96)(cid:48)) be
ijk(cid:96) has only one possible nonzero entry

an arbitrary permutation of {1, 2, . . . , 8}. The vector f 0000
f 00001111
ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48). Thus,

The vector f 0011

ijk(cid:96) has (cid:0)4

ijk(cid:96) |2 = |f 00001111
|f 0000
(cid:1) = 6 possible nonzero entries including f 00110011
2

ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2.

ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48). Thus,

(4.9)

(4.10)

ijk(cid:96) |2 = |f 00110011
|f 0011

ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2 + ∆,

where ∆ denotes the sum of norm-squares of the other 5 entries in f 0011
the left-hand sides of equations (4.9) and (4.10) are equal, we have

ijk(cid:96) and we know ∆ (cid:62) 0. Since

|f 00001111

ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2 = |f 00110011

ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2 + ∆.

(4.11)

23

Similarly, consider vectors f 0000
one possible nonzero entry. Thus,

iji(cid:48)j(cid:48) and f 0011

iji(cid:48)j(cid:48). We have |f 0000

iji(cid:48)j(cid:48)|2 = |f 0011

iji(cid:48)j(cid:48)|2. The vector f 0000

iji(cid:48)j(cid:48) has only

The vector f 0011

iji(cid:48)j(cid:48) has 6 possible nonzero entries. Thus,

iji(cid:48)j(cid:48)|2 = |f 00110011
|f 0000

ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2.

iji(cid:48)j(cid:48)|2 = |f 00001111
|f 0011

ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2 + ∆(cid:48),

where ∆(cid:48) denotes the sum of norm-squares of the other 5 entries in f 0011
Thus, we have

iji(cid:48)j(cid:48) and we know ∆(cid:48) (cid:62) 0.

|f 00110011

ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2 = |f 00001111

ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2 + ∆(cid:48)

(4.12)

Comparing equations (4.11) and (4.12), we have ∆ = −∆(cid:48), which means ∆ = ∆(cid:48) = 0 due to ∆ (cid:62) 0
and ∆(cid:48) (cid:62) 0. Since ∆ is the sum of 5 norm-squares, each of which is nonnegative, ∆ = 0 means
each norm-square in the sum ∆ is 0. In particular, |f 00111100
ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2 is a term in the sum ∆. We have
ijk(cid:96)i(cid:48)j(cid:48)k(cid:48)(cid:96)(cid:48)|2 = 0. Since the order of indices is picked arbitrarily, all entries of f are zero. Thus, f
|f 00111100
is a zero signature. A contradiction.

Theorem 4.8. If F (cid:54)⊆ B, then either #EO(F) is #P-hard or #EO({(cid:54)=4} ∪ F) (cid:54)T #EO(F).

Proof. The base case is Lemma 4.7 and the inductive step is Lemma 4.6. Done by induction.

5. Reduction from #CSP to #EO Problems

In this section, we will show #EO({(cid:54)=4} ∪ F) is #P-hard unless F ⊆ A or F ⊆ P. The ﬁrst

steps are simple; the availability of (cid:54)=4 allows us to realize any ((cid:54)=2k) and therefore all of DEQ.

Lemma 5.1. #EO(DEQ ∪ F) (cid:54)T #EO({(cid:54)=4} ∪ F).

Proof. Connecting (cid:54)=2k (k (cid:62) 2) and (cid:54)=4 using (cid:54)=2 we get (cid:54)=2k+2. Every occurrence of signatures in
DEQ can be realized by a linear size gadget. Then we have #EO(DEQ∪F) (cid:54)T #EO({(cid:54)=4}∪F).

Recall that #EO(DEQ ∪ F) is just Holant ((cid:54)=2| DEQ ∪ F) expressed in the Holant framework.
We show that after we get DEQ on the right hand side (RHS) in the above Holant problem, we
can also realize DEQ on the left-hand side (LHS).

Lemma 5.2. Holant (DEQ | F) (cid:54)T Holant ((cid:54)=2| DEQ ∪ F), which is equivalent to #EO(DEQ∪F).

Proof. In Holant ((cid:54)=2| DEQ ∪ F) we take 2k copies of (cid:54)=2 on the LHS and connect one variable of
each copy of (cid:54)=2 to all 2k variables of one copy of (cid:54)=2k on the RHS. This gives us the constraint
function (cid:54)=2k on the LHS.

Now, consider an arbitrary instance of Holant (DEQ | F);

it is given by a bipartite graph.
Similar to how we express #CSP(F) using Holant (EQ | F), in Holant (DEQ | F) we can view
vertices on the LHS (labeled by ((cid:54)=2k) ∈ DEQ) as variables, and vertices on the RHS (labeled by
f ∈ F) as constraints. However, the diﬀerence here is that in this setting, both a variable itself and
its negation appear as input variables of constraints, and they always appear the same number of
times. More speciﬁcally, for a variable vertex x labeled by (cid:54)=2k, the entire set of 2k edges incident
to x can be divided into two subsets, each of which consisting of k edges. In each subset, every

24

edge takes the same value, while two edges in diﬀerent sets always take opposite values. Then, we
can view the k edges in one subset as the variable x appearing k times, while another k edges in
the other subset as its negation x appearing k times.

Recall that signatures f ∈ F satisfy ars. Suppose f ∈ F has arity 2n. Then, consider the
function f (x1, x2, . . . , x2n). That is, we replace the input variables by their negations. Then we
have f (x1, x2, . . . , x2n) = f (x1, x2, . . . , x2n) by ars. Deﬁne the norm square function |f |2, which
takes value |f (x1, . . . , x2n)|2 on input (x1, . . . , x2n). Then, we have

|f |2(x1, . . . , x2n) = f (x1, . . . , x2n)f (x1, . . . , x2n) = f (x1, . . . , x2n)f (x1, . . . , x2n),

and this gives the following reduction.

Lemma 5.3. Let |F|2 = {|f |2 | f ∈ F}. Then #CSP(|F|2) (cid:54)T Holant (DEQ | F) .

Proof. Given an instance I of #CSP(|F|2) over m variables. Suppose it contains (cid:96) occurrences of
constraints |fi|2 ∈ |F|2 (i ∈ [(cid:96)]) of arity 2ni, and fi is applied to the variables xi1, . . . , xi2ni
. Then

#CSP(I) =

(cid:88)

(cid:96)
(cid:89)

x1,...,xm∈Z2

i=1

|fi|2(xi1, . . . , xi2ni

) =

(cid:88)

(cid:96)
(cid:89)

x1,...,xm∈Z2

i=1

fi(xi1, . . . , xi2ni

)fi(xi1, . . . , xi2ni

).

(5.1)
Notice that in the ﬁnal form of (5.1), for each variable x ∈ {x1, . . . , xm}, both itself and its
negation appear as input variables to various constraints fi ∈ F. Moreover, there is a one-to-one
correspondence between each occurrence of x and that of ¯x. Thus, x and ¯x appear the same number
of times. Thus the partition function #CSP(I) for the #CSP(|F|2) problem can be expressed as
the partition function of an instance of Holant (DEQ | F) of polynomially bounded size.

Directly by this reduction, we have the following hardness result. Corollary 5.4 follows from

Theorem 2.24.

Corollary 5.4. Holant (DEQ | F) is #P-hard if there is some f ∈ F such that S (f ) is not aﬃne.

Proof. By the deﬁnition of |f |2, we know S (|f |2) = S (f ). Thus, there is some |f |2 ∈ |F|2 such
that S (|f |2) is not aﬃne. This implies that |F|2 (cid:54)⊆ A . Moreover, by Lemma 2.20, we also have
|F|2 (cid:54)⊆ P. By Theorem 2.24, #CSP(|F|2) is #P-hard and hence, by Lemma 5.3, Holant (DEQ | F)
is #P-hard.

Now, we may assume every signature f ∈ F has aﬃne support. Quite amazingly, if an EO
signature has aﬃne support, then its support must have a special structure, called pairwise opposite.

Deﬁnition 5.5 (Pairwise opposite). Let S ⊆ Z2n
be an aﬃne linear subspace. We say S is
2
pairwise opposite if we can partition the 2n variables into n pairs such that on S , two variables of
each pair always take opposite values. If S is pairwise opposite, we ﬁx a pairing. Then each pair
under this paring is called an opposite pair.

Example 5.6. Let S = {(x1, x2, . . . , x2n) | x1, . . . , x2n ∈ Z2, xi = xn+i (i ∈ [n])}. Then S is
pairwise opposite. Moreover, any aﬃne linear subspace of S is pairwise opposite.

For instance, let C be the Hamming (7, 4)-code. We consider its dual Hamming code C⊥. C⊥

is a linear subspace of Z7

2 of dimension 3. Let

SC = {α ◦ α ∈ Z14

2 | α ∈ C⊥}.

25

Then SC is pairwise opposite. This SC is introduced in [17] related to a certain tractable family
of signatures for a class of Holant problems.

Note that if an aﬃne linear subspace S ⊆ Z2n
2

is pairwise opposite, then S ⊆ H2n. Now, we

show the other direction is also true. This result should be of independent interest.

Lemma 5.7. Let S ⊆ Z2n

2 be an aﬃne linear subspace. If S ⊆ H2n, then S is pairwise opposite.
Proof. The lemma is trivially true if |S | = 0, 1. Suppose dim(S ) = k (cid:62) 1. We can pick a set of
free variables F = {x1, . . . , xk}, then on S , every variable x is expressible as a unique aﬃne linear
combination over Z2 of these free variables, x = λ1x1 + . . . + λkxk + λk+1, where λ1, . . . , λk+1 ∈ Z2.
(If x takes a constant value on S , it is still an aﬃne linear combination of these free variables.)

We separate out all 2n variables into two types, those with λk+1 = 0 (linear form) and those
with λk+1 = 1 (aﬃne, but not linear form). If we set all free variables x1, . . . , xk to 0, we get a
vector α ∈ S with wt(α) = n. Each x of the ﬁrst type contributes zero and each x of the second
type contributes one. Hence among all 2n variables, there are exactly n variables of each type,
and the chosen free variables are among the ﬁrst type. Without loss of generality, we may assume
variables of the ﬁrst and second type are U = {x1, . . . , xn} and V = {xn+1, . . . , x2n}.

For any variable x = λ1x1+. . .+λkxk +λk+1, with respect to this unique aﬃne linear expression,
let Λ(x) = {i ∈ [k] | λi = 1}, the set of free variables that do appear in the expression of x. We
have,

(cid:88)

x =

xi

if x ∈ U,

and

x = 1 +

xi

if x ∈ V.

(cid:88)

i∈Λ(x)

i∈Λ(x)

Clearly, for i ∈ [k], Λ(xi) = {i}. For any subset I ⊆ [k], we let

U ⊆(I) = {x ∈ U | I ⊆ Λ(x)},

and

U =(I) = {x ∈ U | Λ(x) = I}.

Deﬁne V ⊆(I) and V =(I) analogously, with V in place of U . For any subset I ⊆ [k], let αI ∈ S be
the vector determined by setting free variables xi = 1 for i ∈ I and xi = 0 for i ∈ [k] − I. Within
the 2n bit positions in the vector αI , for any variable x ∈ U ,

x = 1 if |I ∩ Λ(x)| is odd,

and

x = 0

otherwise.

Symmetrically for any variable x ∈ V , we have

x = 0 if |I ∩ Λ(x)| is odd,

and

x = 1

otherwise.

Let U odd(I) = {x ∈ U | |I ∩ Λ(x)| is odd} and V odd(I) = {x ∈ V | |I ∩ Λ(x)| is odd}. Since

n = wt(αI ) = |U odd(I)| + (n − |V odd(I)|),

we have |U odd(I)| = |V odd(I)|, for all I ⊆ [k].

Claim 1. For all I ⊆ [k],

|U odd(I)| =

(cid:88)

(−2)|J|−1|U ⊆(J)|.

J⊆I:J(cid:54)=∅

26

To prove this Claim, we count the contributions of every x ∈ U to both sides of the equation.
For x ∈ U , let m(x) = |I ∩ Λ(x)|. This x contributes one or zero to the LHS, according to whether
m(x) is odd or even respectively. On the RHS, its contribution is

m(x)
(cid:88)

(−2)j−1 (cid:88)

m(x)
(cid:88)

(−2)j−1

1 =

j=1

J⊆I∩Λ(x):|J|=j

j=1

(cid:19)

(cid:18)m(x)
j

= (−2)−1 (cid:104)

(cid:105)
(1 − 2)m(x) − 1

,

which is also precisely one or zero according to whether m(x) is odd or even respectively.

The same statement is true for V odd(I) replacing U by V , with the same proof.

Claim 2. For all I ⊆ [k],

|V odd(I)| =

(cid:88)

(−2)|J|−1|V ⊆(J)|.

J⊆I:J(cid:54)=∅

We show next that |U ⊆(I)| = |V ⊆(I)| for all I ⊆ [k]. If I = ∅, then U ⊆(I) = U and V ⊆(I) = V ,
and so they have the same cardinality, both being n. Inductively, for any I ⊆ [k], suppose we already
know that |U ⊆(J)| = |V ⊆(J)|, for all proper subsets J (cid:40) I, then since |U odd(I)| = |V odd(I)|, by
the two Claims we have |U ⊆(I)| = |V ⊆(I)| as well, since the coeﬃcient (−2)|I|−1 (cid:54)= 0.

Then, by deﬁnition

|U ⊆(I)| =

(cid:88)

|U =(J)|.

I⊆J⊆[k]

By the M¨obius inversion formula, we have

|U =(I)| =

(cid:88)

(−1)|J|−|I||U ⊆(J)|.

I⊆J⊆[k]

Indeed,

(cid:88)

(−1)|J|−|I| (cid:88)

|U =(J (cid:48))| =

(cid:88)

(cid:88)

(−1)|J|−|I||U =(J (cid:48))|,

I⊆J⊆[k]

J⊆J (cid:48)⊆[k]

I⊆J (cid:48)⊆[k]

I⊆J⊆J (cid:48)

and for a proper containment I (cid:40) J (cid:48) the coeﬃcient of |U =(J (cid:48))| is (1 − 1)|J (cid:48)|−|I| = 0, and it is 1 for
I = J (cid:48).

The same statement is true for V . Thus, we have |U =(I)| = |V =(I)| for all I ⊆ [k].
This allows us to set up a pairing between U and V such that for each pair of paired variables
(x, y) ∈ U × V , we have Λ(x) = Λ(y). For any I ⊆ [k], we arbitrarily pick a pairing between
U =(I) and V =(I). This is achievable because they have the same cardinality. Since the following
decompositions for both U and V are disjoint unions

U =

(cid:91)

U =(I)

and

V =

(cid:91)

V =(I),

I⊆[k]

I⊆[k]

we get a global pairing between U and V , such that for each pair of paired variables (x, y) ∈ U × V ,
we have Λ(x) = Λ(y). Recall that on S , since x ∈ U , we have x = (cid:80)
i∈Λ(x) xi; meanwhile since
y ∈ V we have y = 1 + (cid:80)

i∈Λ(y) xi. It follows that x = y on S .

Now, we are going to simulate #CSP(F) using Holant (DEQ | F) when F consists of signatures
with aﬃne support. Suppose f (x1, . . . , x2n) ∈ F has aﬃne support, by Lemma 5.7, we know S (f )
is pairwise opposite. By permuting variables, we may assume for i ∈ [n], (xi, xn+i) is paired as an
opposite pair. Then, we have the following reduction.

27

Lemma 5.8. Suppose F is a set of EO signatures. If every signature f ∈ F has aﬃne support,
then #CSP(F) (cid:54)T Holant (DEQ | F) .

Proof. Given an instance I of #CSP(F) over m variables V = {x1, . . . , xm}. Suppose it contains
. We deﬁne a
(cid:96) constraints fi (i ∈ [(cid:96)]) of arity 2ni, and fi is applied to the variables xi1, . . . , xi2ni
graph G = (V, E), where V is the variable set and (x, y) ∈ E if variables x, y appear as an opposite
pair in some S (fi). Consider all connected components of G. We get a partition of V . Pick a
representative variable in each connected component and deﬁne V r to be the set of representative
variables. Without loss of generality, we assume V r = {x1, . . . , xmr}. For each variable x ∈ V ,
we use xr ∈ V r to denote its representative variable. By the deﬁnition of opposite pairs, for any
assignment with a nonzero contribution, we have x = xr if there is a path of odd length from x
to xr and x = xr if there is a path of even length from x to xr (if xr is x itself, we say there is
a path of length 0 from xr to x). If for some x, we have both x = xr and x = xr, (that is, the
connected component containing x is not a bipartite graph), then we know #CSP(I) ≡ 0 since
x = ¯x is impossible. Otherwise, for each variable x ∈ V we have either x = xr or x = xr, but not
both.

Then, for any nonzero term in the sum

#CSP(I) =

(cid:88)

(cid:96)
(cid:89)

x1,...,xm∈Z2

i=1

fi(xi1, . . . , xi2ni

),

the assignment of all variables in V can be uniquely extended from its restriction on representative
variables V r. Moreover, since S (fi) is pairwise opposite, for each opposite pair (xis, xin+s), we
know exactly one variable is equal to xr
. Thus each pair
is
(xis, xin+s) is either (xr
). We will write this as ( (cid:99)xr
is
is

while the other one is equal to xr
is
). Then, we have

) or (xr
is

, xr
is

, (cid:99)xr
is

, xr
is

#CSP(I) =

(cid:88)

(cid:96)
(cid:89)

x1,...,xmr ∈Z2

i=1

fi(xi1, . . . , xi2ni

) =

(cid:88)

(cid:96)
(cid:89)

x1,...,xmr ∈Z2

i=1

fi( (cid:99)xr
i1

, . . . , (cid:100)xr
ini

, (cid:99)xr
i1

, . . . , (cid:100)xr
ini

).

(5.2)

The ﬁnal form of (5.2) is an instance of Holant (DEQ | F).

By this reduction, we have the following hardness result.

Corollary 5.9. If every signature f ∈ F has aﬃne support, then Holant (DEQ | F) is #P-hard
unless F ⊆ A or F ⊆ P.

Theorem 5.10. #EO({(cid:54)=4} ∪ F) is #P-hard unless F ⊆ A or F ⊆ P.

Proof. It follows from Lemmas 5.1, 5.2, Corollaries 5.4 and 5.9.

Combining Theorems 2.22, 4.8 and 5.10, we can ﬁnish the proof of the main Theorem 3.1.

Proof. (of Theorem 3.1) If F ⊆ A or F ⊆ P, then by Theorems 2.22, #EO(F) is tractable.
Suppose F (cid:54)⊆ A and F (cid:54)⊆ P, then certainly F (cid:54)⊆ B as B ⊆ P. Then Theorems 4.8 and 5.10
complete the proof.

28

6. #EO Encompasses #CSP

In this section, we will show that the #EO framework encompasses #CSP.
Let g be an arbitrary signature of arity n > 0 (with no assumption on satisfying ars or to be

EO). We associate g with an EO signature (cid:101)g of arity 2n in the following way. We deﬁne
(cid:40)

(cid:101)g(x1, . . . , xn, xn+1, . . . , x2n) =

g(x1, . . . xn)
0

if xi (cid:54)= xi+n
otherwise.

(i ∈ [n]),

Clearly, (cid:101)g is an EO signature. Moreover, its support is pairwise opposite, i.e., xi and xn+i form an
opposite pair. We say xi is in the ﬁrst half of the inputs of (cid:101)g, while xn+i is in the second half. We
deﬁne (cid:101)G = {(cid:101)g | g ∈ G} for an arbitrary signature set G. We show that #CSP is expressible in the
#EO framework by the following theorem.

Theorem 6.1. For every signature set G and the EO signature set (cid:101)G deﬁned above, we have

#CSP(G) ≡T #EO( (cid:101)G).

Remark. Before we give the proof, we remark that this theorem is not merely stating that for an
arbitrary #CSP(G) problem, one can reduce every instance of #CSP(G) to an instance of a suitable
#EO( (cid:101)G) problem. Theorem 6.1 is stronger and categorical: For every signature set G in the #CSP
framework, there is a (uniformly constructible) EO signature set (cid:101)G such that #CSP(G) is the same
as the #EO problem #EO( (cid:101)G). In particular, a complexity dichotomy for #EO problems would
generalize the complexity dichotomy for #CSP problems on Boolean variables (which is already
known). This is similar to the fact that the #CSP framework is encompassed by the Holant
framework (but not vice versa, thus the latter is the more expressive one). In contrast, an instance
dependent reduction in one direction would not have the consequence that a complexity dichotomy
for the latter generalizes a complexity dichotomy for the former.

Proof. We ﬁrst show that every instance of #CSP(G) is expressible canonically as an instance of
#EO( (cid:101)G), thus, #CSP(G) (cid:54)T #EO( (cid:101)G). Let G = (U, V, E) be a bipartite graph representing an
instance I of #CSP(G), where each u ∈ U is a variable and each v ∈ V is labeled by a constraint
function g ∈ G. We will modify the instance I to an instance (cid:101)I of #EO( (cid:101)G) that evaluates to the
same value, as follows.

1. For every u ∈ U , we create k = degG(u) vertices denoted by ui (1 (cid:54) i (cid:54) k). (For example,
in Figure 1, vertices u1, u2 and u3 are decomposed into 3, 2 and 1 vertices respectively.)
Then we connect the k edges originally incident to u to these k new vertices, so that each
new vertex is incident to exactly one edge. (To be speciﬁc we assume the edges at u in I are
ordered from 1 to k, and we connect the i-th edge to ui. These are edges drawn by solid lines
in Figure 1(b).) We denote this graph by G(cid:48). Each ui in G(cid:48) has degree 1 and the degree of
each v ∈ V does not change.

2. For each edge ei = (ui, v) in the graph G(cid:48), we add an edge ¯ei = (ui+1, v) to G(cid:48) and we call
them a pair. (Here if degG(u) = k then we use uk+1 to denote u1; we will add a multiple edge
if ei+1 = (ui+1, v) is already in G(cid:48). These edges ¯ei are drawn by dashed lines in Figure 1(b).)
This deﬁnes a graph (cid:101)G. Each ui in (cid:101)G has degree 2 and we label it by (cid:54)=2. If degG(v) = n
and is labeled by the constraint function g ∈ G, then v in (cid:101)G has degree 2n and we label it

29

by the corresponding (cid:101)g ∈ (cid:101)G. We place the signature (cid:101)g in a way such that every pair of edges
ei = (ui, v) and ei = (ui+1, v) incident to the same v appears as an opposite pair in the inputs
of the function (cid:101)g, and ei appears in the ﬁrst half of the inputs of (cid:101)g while ei appears in the
second half. Recall that (cid:101)g is deﬁned to be pairwise opposite such that its j-th variable in the
ﬁrst half is paired with its (n + j)-th variable in the second half. This deﬁnes an instance (cid:101)I
of #EO( (cid:101)G).

Figure 1: The reduction from #CSP to #EO

1, e1

1, e2

1, v1, u3

We show that #EO

1, v2 back to u1

1 is such a circuit where the edges are successively e1

(cid:101)I has the same value as the instance I for #CSP(G). Consider each variable
u ∈ U . Suppose it has degG(u) = k in the instance I. It corresponds to k vertices u1, . . . , uk and
2k edges e1, e1, . . . , ei, ei, . . . , ek and ek. These 2k edges form a circuit Cu. For example, in Figure1,
u1
1, e3
1, v1, u2
1
(edges drawn by solid lines and dashed lines alternate). Note that, for every pair of edges ei and
ei, we placed the signature (cid:101)g such that ei and ei appear as an opposite pair. Thus, we may assume
ei and ei take opposite values in the evaluation of #EO
(cid:101)I . Also, since each ui is labeled by (cid:54)=2, we
may also assume ei and ei+1 take opposite values in the evaluation. (This is really a consequence
of the deﬁnition of #EO problems.) Thus, for any (possible) nonzero term in the sum #EO
(cid:101)I , as a
consequence of the support of signatures in (cid:101)G and (cid:54)=2, we know on each circuit Cu all edges must
take values (0, 1, 0, 1, · · · , 0, 1) or (1, 0, 1, 0, · · · , 1, 0), i.e., the values of 0, 1 alternate. Therefore,
on the circuit Cu, we have e1, e2, . . . , ek all take the same 0-1 value, which corresponds to the 0-1
assignment on the variable u in the #CSP instance I. Recall in the deﬁnition of (cid:101)g, its value can
be determined by the ﬁrst half of its inputs. By the placement of (cid:101)g, the ﬁrst half of its inputs are
edges in the graph G(cid:48) (drawn by solid lines). Therefore, the contribution of (cid:101)g to #EO
(cid:101)I is exactly
the same as the contribution of g in the #CSP instance I. Thus, these two instances have the same
value.

1, e3

1, e2

For the other direction, we ﬁrst note that #CSP(G ∪ {(cid:54)=2}) (cid:54)T #CSP(G).

If #CSP(G) is
#P-hard, the reduction holds trivially since every #CSP problem can be reduced in P-time to a
#P-hard problem. Otherwise, by Theorem 2.24, #CSP(G) is tractable and G ⊆ A or P. Since
((cid:54)=2) ∈ A ∩ P, we have G ∪ {(cid:54)=2} ⊆ A or P. Thus, #CSP(G ∪ {(cid:54)=2}) is tractable. Then, again
the reduction holds trivially. Then, we will show that #EO( (cid:101)G) (cid:54)T #CSP(G ∪ {(cid:54)=2}).

Consider an arbitrary instance I (cid:48) of #EO( (cid:101)G). Because every signature in (cid:101)G has the pairing
structure among its variables, we can decompose the graph of I (cid:48) into edge disjoint circuits, by

30

always following the paired variables at each constraint vertex. For each edge disjoint circuit,
we choose an arbitrary default orientation. The circuit visits constraint vertices in some order
according to the default orientation. The visit follows successive pairs of edges. Recall that as a
consequence of the support of constraint functions, on each circuit, all these pairs of edges in the
successive order must take the same ordered pair of values (x, ¯x), where x ∈ {0, 1}. Thus, we can
deﬁne a Boolean variable x from the edges on each such circuit. From this a corresponding instance
I for #CSP(G ∪ {(cid:54)=2}) can be obtained that has the same value as I (cid:48) in #EO( (cid:101)G).
More speciﬁcally, suppose g(x1, . . . , xn) ∈ G and let g(cid:48)(x1, . . . , xn) = g(x(cid:15)1
n ), where each
is either xi or xi. To discuss the complexity of #CSP(G ∪ {(cid:54)=2}), using ((cid:54)=2) we may assume

x(cid:15)i
i
every function obtained by ﬂipping any number of variables in a function g ∈ G is also in G.

1 , . . . , x(cid:15)n

Now, consider the default orientation of each circuit. At constraint vertices, the default orien-
tation visits successive pairs of edges corresponding to paired inputs of constraint functions, say,
{xj, xn+j}. If the default orientation always visits in the order xj followed by xn+j, then this is
exactly how the canonical construction given above and we can recover an instance I for #CSP(G)
with the same value. If at some constraint (cid:101)g of arity 2n the default orientation happens to visit in
the order xn+j followed by xj, we can use one copy of (cid:54)=2 to modify the original function g to get
another constraint g(cid:48), so that the corresponding (cid:101)g(cid:48) is just (cid:101)g with a ﬂip between its variables xn+j
and xj. Then according to the default orientation the visit is in the order xj followed by xn+j.

7. Holographic Transformation to Real-Valued Holant Problems

We show that the ars condition corresponds to real-valued signatures under a holographic
transformation without restricting on EO signatures. First we introduce the idea of holographic
transformations. It is convenient to consider bipartite graphs. For a general graph, we can always
transform it into a bipartite graph while preserving the Holant value, as follows. For each edge in
the graph, we replace it by a path of length two. (This operation is called a 2-stretch of the graph
and yields the edge-vertex incidence graph.) Each new vertex is assigned the binary Equality
signature (=2) = (f 00, f 01, f 10, f 11) = (1, 0, 0, 1). For an invertible 2-by-2 matrix T ∈ GL2(C) and
a signature f of arity n, written as a column vector (contravariant tensor) f ∈ C2n, we denote by
T −1f = (T −1)⊗nf the transformed signature. For a signature set F, deﬁne T −1F = {T −1f | f ∈
F} the set of transformed signatures. For signatures written as row vectors (covariant tensors)
(cid:3), we also deﬁne
we deﬁne f T and FT similarly. In the special case of the matrix Z = 1√
2
(cid:3), and (=2)Z⊗2 = ((cid:54)=2), i.e., Z transforms binary
(cid:98)F = ZF and (cid:98)f = Zf . Note that Z−1 = 1√
2
Equality to binary Disequality.

(cid:2) 1 −i
1 i

(cid:2) 1 1
i −i

Let T ∈ GL2(C). The holographic transformation deﬁned by T is the following operation:
given a signature grid Ω = (H, π) of Holant (F | G), for the same bipartite graph H, we get a new
signature grid Ω(cid:48) = (H, π(cid:48)) of Holant (cid:0)FT | T −1G(cid:1) by replacing each signature in F or G with the
corresponding signature in FT or T −1G.
Theorem 7.1 (Valiant’s Holant Theorem [34]). For any T ∈ GL2(C),
Holant(Ω; F | G) = Holant(Ω(cid:48); FT | T −1G).

Therefore, a holographic transformation does not change the value and thus the complexity of
a Holant problem in the bipartite setting. Note that #EO(F) can be expressed as Holant ((cid:54)=2| F)
and ((cid:54)=2)(Z−1)⊗2 = (=2). Thus, we have

#EO(F) ≡T Holant ((cid:54)=2| F) ≡T Holant (cid:0)((cid:54)=2)Z−1 | ZF(cid:1) ≡T Holant(=2| (cid:98)F) ≡T Holant( (cid:98)F).

31

We can determine (cid:98)F, for F consisting of (not necessarily EO) signatures satisfying ars, as follows.

Theorem 7.2. A complex-valued signature f satisﬁes ars if and only if (cid:98)f = Zf is real-valued.

Proof. We ﬁrst prove that if f satisﬁes ars then (cid:98)f is real.

We have 2n/2 (cid:98)f = (cid:2) 1 1

i −i

(cid:3)⊗n f , and thus for all (a1, . . . , an) ∈ {0, 1}n,

Then,

2n/2 (cid:98)f a1...an =

(cid:88)

(b1,...,bn)∈{0,1}n

f b1,...,bn (cid:89)
1(cid:54)j(cid:54)n

(cid:110)

(−1)aj bj iaj

(cid:111)

.

2n/2 (cid:98)f a1...an =

(cid:88)

=

(b1,...,bn)∈{0,1}n
(cid:88)

(c1,...,cn)∈{0,1}n

= 2n/2 (cid:98)f a1...an.

f b1...bn (cid:89)
1(cid:54)j(cid:54)n
f c1...cn (cid:89)
1(cid:54)j(cid:54)n

(cid:110)

(−1)aj bj (−i)aj

(cid:111)

(cid:110)

(−1)aj (1−cj )(−i)aj

(cid:111)

Hence, (cid:98)f is real.

(a1, . . . , an) ∈ {0, 1}n,

Now in the opposite direction, suppose (cid:98)f is real. We have 2n/2f = (cid:2) 1 −i

(cid:3)⊗n

(cid:98)f , and thus for all

1 i

So

Then,

2n/2f a1...an =

(cid:88)

(b1,...,bn)∈{0,1}n

(cid:98)f b1,...,bn (cid:89)
1(cid:54)j(cid:54)n

(cid:110)

(−1)aj bj (−i)bj

(cid:111)

.

2n/2f a1...an =

(cid:88)

(b1,...,bn)∈{0,1}n

(cid:98)f b1,...,bn (cid:89)
1(cid:54)j(cid:54)n

(cid:110)

(−1)(1−aj )bj (−i)bj

(cid:111)

.

2n/2f a1...an =

(cid:88)

(b1,...,bn)∈{0,1}n
(cid:88)

=

(b1,...,bn)∈{0,1}n

= 2n/2f a1...an.

(cid:98)f b1...bn (cid:89)
1(cid:54)j(cid:54)n
(cid:98)f b1...bn (cid:89)
1(cid:54)j(cid:54)n

(cid:110)

(−1)aj bj ibj

(cid:110)

(−1)aj bj ibj

(cid:111)

(cid:111)

Hence, f satisﬁes ars.

Due to this holographic transformation, the classiﬁcation of #EO problems with ars is not
only interesting in its own right, but also it serves as a basic building block in the classiﬁcation
program for real-valued Holant problems over signature sets that are not necessarily symmetric.
The signatures with ars are precisely those signatures that can be transformed into real-valued
signatures in the Holant setting.

32

8. Conclusion and Outlook

The main technical contribution of this paper is to introduce unique prime factorization for
signatures as a method to prove complexity dichotomies. Combined with merging operations, it
is a powerful technique to analyze the complexity of signatures, and build inductive proofs. This
method should be more widely applicable in the study of Holant problems. The results of this
paper can serve as building blocks towards a classiﬁcation of real-valued Holant problems (with
no symmetry assumptions on the signatures). Under a suitable holographic transformation, these
#EO problems with ars correspond to precisely a class of real valued Holant problems. It also
seems that the EO signatures, which have support on half Hamming weight, are where some of the
most intricate cases for the ﬁnal classiﬁcation lie.

We give the following Figure 2 as a partial map for the complexity classiﬁcation program
for Holant problems on the Boolean domain. We indicate how the framework of #EO problems
considered in this paper ﬁts in this program.

Complex
#CSP [16]

Complex
Symmetric Holant [14]

Complex
Holant∗ [15]

Complex
Six-Vertex Model [13]

Complex
#EO with ars

Non-Negative
Holant [27]

Real
Holantc [17]

Complex
Eight-Vertex Model [11]

Complex
#EO (without ars)

Real
Holant

Complex
Holantc [2]

Complex
Holant

Figure 2: A partial map of the complexity classiﬁcation program for Holant problems

The complexity classiﬁcation for Holant problems is built on the dichotomy for #CSP on the
Boolean domain [16]. Based on this result, a dichotomy for complex-valued Holant problems with
symmetric signatures (the function value depends only on the Hamming weight of the input) was
established [14]. For asymmetric signatures, the ﬁrst result is a dichotomy for a restricted class
called Holant∗ problems where all unary signatures are assumed to be available [15]. Later, it was
generalized to (ﬁrst real-valued [17] and then complex-valued [1, 2]) Holantc problems where two
pinning unary signatures (1, 0) and (0, 1) are available. In addition, based on the dichotomy for

33

(cid:118)
(cid:118)
(cid:43)
(cid:43)
(cid:15)
(cid:15)
(cid:120)
(cid:120)
(cid:15)
(cid:15)
(cid:15)
(cid:15)
(cid:47)
(cid:47)
(cid:15)
(cid:15)
(cid:39)
(cid:39)
(cid:15)
(cid:15)
(cid:15)
(cid:15)
(cid:120)
(cid:120)
(cid:43)
(cid:43)
(cid:39)
(cid:39)
(cid:15)
(cid:15)
(cid:119)
(cid:119)
Holant∗ problems, a dichotomy for non-negative Holant problems was proved [27] without assuming
any auxiliary signatures. Simultaneously, progress has been made for Holant problems parameter-
ized by complex-valued signatures of even arities. The base case is a single 4-ary signature. (The
case that all signatures are binary is known to be tractable.) A dichotomy is proved for complex-
valued six-vertex models [13] and later it was generalized to complex-valued eight-vertex models
[11]. The framework of #EO problems generalizes six-vertex models to higher arities. In this paper,
we prove a dichotomy for complex-valued #EO problems with ars, which can be transformed to
a class of real-valued Holant problems. Combining with other results, we hope this result will lead
to a classiﬁcation for all real-valued Holant problems. The ultimate goal is deﬁnitely a full classi-
ﬁcation for all complex-valued Holant problems. In order to achieve this, we think a classiﬁcation
for complex-valued #EO problems without assuming ars may serve as a building block.

Recent Development

Most recently, after this paper was accepted, the vision that is enunciated in this paper has
been realized. A full complexity dichotomy for all real-valued Holant problems on the Boolean
domain has been achieved [32], and the results in the present paper indeed played a crucial role in
its proof.

Acknowledgement

We thank the anonymous referees for their very helpful comments. We also thank the editor
Prof. Lane Hemaspaandra for his very detailed editorial comments. Their many suggestions have
helped us greatly to improve the presentation of the material.

Appendix A. An 8-ary Signature not Satisfying the ∆-Property

Some lemmas in Section 4 (e.g., Lemmas 4.3, 4.4, and 4.5) are subtle both in their precise
statements and proofs. In particular, they require high arities. Here, we give a signature of arity 8
that cannot be handled by using “commutativity of merging operations”, which is the underlying
“principle” that is essential for our induction proof (Lemma 4.6, which requires arity at least
10). This illustrates some of the intricacies and why we have to deal with signatures of lower
arities separately (Lemma 4.7). For convenience, we use (ij) to denote the binary disequality
signature on variables xi and xj, and in the table (A.1) below we omit the tensor product symbol
⊗ between the binary disequality signatures. Let f be an EO signature satisfying ars on eight
variables x1, x2, . . . , x8. Suppose f has the following structural decompositions in B under various
merging operations. (The precise forms in the following 28 tensor product factorizations in B are
meticulously chosen; embedded in it is a nontrivial symmetry subgroup of S8. It is not clear at this

34

point that there are any function that can satisfy all these requirements.)

∂(12)f = (34)(56)(78), ∂(34)f = (12)(56)(78), ∂(56)f = (12)(34)(78), ∂(78)f = (12)(34)(56),
∂(13)f = (24)(57)(68), ∂(24)f = (13)(57)(68), ∂(57)f = (13)(24)(68), ∂(68)f = (13)(24)(57),
∂(14)f = (23)(58)(67), ∂(23)f = (14)(58)(67), ∂(58)f = (14)(23)(67), ∂(67)f = (14)(23)(58),
∂(15)f = (26)(37)(48), ∂(26)f = (15)(37)(48), ∂(37)f = (15)(26)(48), ∂(48)f = (15)(26)(37),
∂(16)f = (25)(38)(47), ∂(25)f = (16)(38)(47), ∂(38)f = (16)(25)(47), ∂(47)f = (16)(25)(38),
∂(17)f = (28)(35)(46), ∂(28)f = (17)(35)(46), ∂(35)f = (17)(28)(46), ∂(46)f = (17)(28)(35),
∂(18)f = (27)(36)(45), ∂(27)f = (18)(36)(45), ∂(36)f = (27)(18)(45), ∂(45)f = (27)(36)(18).

(A.1)
(cid:1) = 28 binary disequalities (ij), each appears exactly three times in (A.1)
There are a total of (cid:0)8
2
(each disequality (ij) appears in a single row in table (A.1)). One can verify that this f does not
satisfy the ∆-property. We carefully design these particular factorizations so that for any binary
disequality signature (ij), it divides exactly three totally disjoint pairs ∂(s1t1)f , ∂(s2t2)f and ∂(s3t3)f ,
which do not form a “triangle”. However (it is tedious but one can verify that) by taking any two
disjoint pairs {i, j} and {u, v}, the above tensor factorizations always satisfy ∂(ij)(uv)f = ∂(uv)(ij)f .
(Of course any actual signature f must satisfy this.) It follows that this case cannot be handled by
our induction proof.

The above structural decompositions (A.1) under various merging operations may look like
artiﬁcially designed and one may wonder whether there exists such a signature that satisﬁes them
all. While not obvious, the answer is yes. We give a signature that does satisfy (A.1).

Consider the following signature f8 which has its support set deﬁned by

S (f8) = {(x1, x2, . . . , x8) ∈ {0, 1}8 | x1 + x2 + x3 + x4 ≡ 0 mod 2, x5 + x6 + x7 + x8 ≡ 0 mod 2,
x1 + x2 + x5 + x6 ≡ 0 mod 2, x1 + x3 + x5 + x7 ≡ 0 mod 2,

and

(cid:88)8

i=1

xi = 4}.

The function is deﬁned to be f8(α) = 1 when α ∈ S (f ) and f8(α) = 0 elsewhere.
It can be
veriﬁed that f8 is an EO signature with ars. Its support has the following structure: (1) it is on
half-weight; (2) the sum of the ﬁrst four variables is even; (3) the last four variables are either
identical to the ﬁrst four variables, or are the complement of the ﬁrst four variables.

One can verify that the signature f8 satisﬁes forms (A.1). Thus, there does exist a case that
cannot be handled by our induction proof alone. This partially explains some of the intricacies of
our proof.

References

[1] Miriam Backens. A new Holant dichotomy inspired by quantum computation. In 44th In-
ternational Colloquium on Automata, Languages, and Programming (ICALP 2017). Schloss
Dagstuhl-Leibniz-Zentrum fuer Informatik, 2017.

[2] Miriam Backens. A complete dichotomy for complex-valued Holantc. In 45th International
Colloquium on Automata, Languages, and Programming (ICALP 2018). Schloss Dagstuhl-
Leibniz-Zentrum fuer Informatik, 2018.

35

[3] Rodney J Baxter. Exactly solved models in statistical mechanics. Elsevier, 2016.

[4] David M Bressoud. Proofs and conﬁrmations: the story of the alternating-sign matrix conjec-

ture. Cambridge University Press, 1999.

[5] Andrei Bulatov, Martin Dyer, Leslie Ann Goldberg, Markus Jalsenius, Mark Jerrum, and
David Richerby. The complexity of weighted and unweighted #CSP. Journal of Computer
and System Sciences, 78(2):681–688, 2012.

[6] Andrei Bulatov, Martin Dyer, Leslie Ann Goldberg, Markus Jalsenius, and David Richerby.
The complexity of weighted Boolean #CSP with mixed signs. Theoretical Computer Science,
410(38-40):3949–3961, 2009.

[7] Andrei A Bulatov. The complexity of the counting constraint satisfaction problem. Journal

of the ACM (JACM), 60(5):1–41, 2013.

[8] Jin-Yi Cai and Xi Chen. Complexity Dichotomies for Counting Problems: Volume 1, Boolean

Domain. Cambridge University Press, 2017.

[9] Jin-Yi Cai and Xi Chen. Complexity of counting CSP with complex weights. Journal of the

ACM (JACM), 64(3):1–39, 2017.

[10] Jin-Yi Cai, Xi Chen, and Pinyan Lu. Nonnegative weighted #CSP: An eﬀective complexity

dichotomy. SIAM Journal on Computing, 45(6):2177–2198, 2016.

[11] Jin-Yi Cai and Zhiguo Fu. Complexity classiﬁcation of the eight-vertex model. arXiv preprint

arXiv:1702.07938, 2017.

[12] Jin-Yi Cai and Zhiguo Fu. Holographic algorithm with matchgates is universal for planar
#CSP over boolean domain. SIAM Journal on Computing, special section STOC 17:50–151,
2019.

[13] Jin-Yi Cai, Zhiguo Fu, and Mingji Xia. Complexity classiﬁcation of the six-vertex model.

Information and Computation, 259:130–141, 2018.

[14] Jin-Yi Cai, Heng Guo, and Tyson Williams. A complete dichotomy rises from the capture of

vanishing signatures. SIAM Journal on Computing, 45(5):1671–1728, 2016.

[15] Jin-Yi Cai, Pinyan Lu, and Mingji Xia. Dichotomy for Holant∗ problems of Boolean domain.
In Proceedings of the twenty-second annual ACM-SIAM symposium on Discrete Algorithms,
pages 1714–1728. SIAM, 2011.

[16] Jin-Yi Cai, Pinyan Lu, and Mingji Xia. The complexity of complex weighted Boolean #CSP.

Journal of Computer and System Sciences, 80(1):217–236, 2014.

[17] Jin-Yi Cai, Pinyan Lu, and Mingji Xia. Dichotomy for real Holantc problems. In Proceedings of
the Twenty-Ninth Annual ACM-SIAM Symposium on Discrete Algorithms, pages 1802–1821.
SIAM, 2018.

[18] Nadia Creignou and Miki Hermann. Complexity of generalized satisﬁability counting problems.

Information and computation, 125(1):1–12, 1996.

36

[19] Martin Dyer, Leslie Ann Goldberg, and Mark Jerrum. The complexity of weighted Boolean

#CSP. SIAM Journal on Computing, 38(5):1970–1986, 2009.

[20] Martin Dyer and David Richerby. An eﬀective dichotomy for the counting constraint satisfac-

tion problem. SIAM Journal on Computing, 42(3):1245–1274, 2013.

[21] Vladimir E Korepin. Calculation of norms of Bethe wave functions. Communications in

Mathematical Physics, 86(3):391–418, 1982.

[22] Greg Kuperberg. Another proof of the alternative-sign matrix conjecture. International Math-

ematics Research Notices, 1996(3):139–150, 1996.

[23] Michel Las Vergnas. On the evaluation at (3, 3) of the Tutte polynomial of a graph. Journal

of Combinatorial Theory, Series B, 45(3):367–372, 1988.

[24] Elliott H Lieb. Residual entropy of square ice. Physical Review, 162(1):162, 1967.

[25] Elliott H Lieb. Exact solution of the F model of an antiferroelectric. In Condensed Matter

Physics and Exactly Soluble Models, pages 453–455. Springer, 2004.

[26] Elliott H Lieb. Exact solution of the two-dimensional Slater KDP model of a ferroelectric. In
Condensed Matter Physics and Exactly Soluble Models, pages 457–459. Springer, 2004.

[27] Jiabao Lin and Hanpin Wang. The complexity of Boolean Holant problems with nonnegative

weights. SIAM Journal on Computing, 47(3):798–828, 2018.

[28] Milena Mihail and Peter Winkler. On the number of Eulerian orientations of a graph. Algo-

rithmica, 16(4-5):402–414, 1996.

[29] William H Mills, David P Robbins, and Howard Rumsey Jr. Alternating sign matrices and
descending plane partitions. Journal of Combinatorial Theory, Series A, 34(3):340–359, 1983.

[30] Linus Pauling. The structure and entropy of ice and of other crystals with some randomness

of atomic arrangement. Journal of the American Chemical Society, 57(12):2680–2684, 1935.

[31] Franz Rys. ¨Uber ein zweidimensionales klassisches Konﬁgurationsmodell. Helvetica Physica

Acta, 36(5):537–559, 1963.

[32] Shuai Shao and Jin-Yi Cai. A dichotomy for real Boolean Holant problems. arXiv preprint

arXiv:2005.07906, 2020.

[33] John C Slater. Theory of the transition in KH2PO4. The Journal of Chemical Physics,

9(1):16–33, 1941.

[34] Leslie G Valiant. Holographic algorithms. SIAM Journal on Computing, 37(5):1565–1594,

2008.

[35] Doron Zeilberger. Proof of the alternating sign matrix conjecture. The Electronic Journal of

Combinatorics, 3(2):R13–R13, 1996.

37

