Low-complexity Architecture for AR(1) Inference

A. Borges Jr.∗

R. J. Cintra†

D. F. G. Coelho‡

V. S. Dimitrov§

Abstract

In this Letter, we propose a low-complexity estimator for the correlation coeﬃcient based on the signed AR(1)
process. The introduced approximation is suitable for implementation in low-power hardware architectures. Monte
Carlo simulations reveal that the proposed estimator performs comparably to the competing methods in literature
with maximum error in order of 10−2. However, the hardware implementation of the introduced method presents
considerable advantages in several relevant metrics, oﬀering more than 95% reduction in dynamic power and
doubling the maximum operating frequency when compared to the reference method.

Keywords

AR(1) inference, low-complexity algorithms

1

Introduction

Due to the raising demand for digital signal processing (DSP) systems capable of operating at low power and low

complexity, approximate methods have been considered for image processing [5,7]. In particular, several approximate

discrete transforms have been recently proposed [6, 14, 18] for image compression, where pixel data often stems from

natural images and are modeled according to the ﬁrst order autoregressive (AR(1)) process [12]. The AR(1) model

depends only on a single parameter, the correlation coeﬃcient ρ, whose identiﬁcation determines the suitable DSP

tools for data analysis [3, 11]. In particular, image sensor networks and mobile computing systems may beneﬁt from

low-complexity fundamental DSP building blocks [2]. In this Letter, we aim at the derivation of a low-complexity

algorithm for the estimation of ρ targeting its implementation on embedded, low-power devices.

2 AR(1) Processes

A real-valued, discrete-time, wide-sense stationary stochastic process {Xn, n = 1, 2, . . .} with null mean and ﬁnite

variance is said to be an AR(1) process if

Xn = ρ Xn−1 + Wn,

(1)

where |ρ| < 1 and Wn is a white noise process independent of Xn.

If the joint distribution of any ﬁnite set of

0
2
0
2

g
u
A
1
2

]
P
S
.
s
s
e
e
[

1
v
3
3
6
9
0
.
8
0
0
2
:
v
i
X
r
a

samples from (1) is Gaussian, then we say that Xn is a Gaussian AR(1) process. Assuming stationarity of Xn, its
autocorrelation function is given by cor(Xn, Xm) = ρ|n−m|, which depends solely on ρ. The traditional estimator
for ρ is given by [9, p. 77]:

ˆρN = P

.

(2)

N
n=2 XnXn−1
N
n=1 X 2n

P

Hereafter we refer to the above statistic as the autocorrelation function (ACF) estimator [9].

∗A. Borges Jr. was with the Universidade Federal de Pernambuco, Brazil.
†R. J. Cintra is with the Signal Processing Group, Universidade Federal de Pernambuco, Brazil. E-mail: rjdsc@de.ufpe.br
‡D. F. G. Coelho is an independent researcher, Calgary, Canada. E-mail: diegofgcoelho@gmail.com
§V. S. Dimitrov is with the University of Calgary, Canada.

1

 
 
 
 
 
 
3 Signed AR(1) Processes

A binary threshold process derived from Xn is deﬁned according to Sn = I(Xn > 0), where I(·) equals 1 if its

argument is true and 0 otherwise. We refer to Sn as the signed AR(1) process. The following theorem proposed by

Kedem [10] relates ρ to the stochastic structure of Sn.

Theorem 1 If Xn is a Gaussian AR(1) process, then the signed AR(1) Sn is a Markov chain over states {0, 1}
with symmetric transition probabilities matrix. Let λ be the probability of remaining at the same state. Then the
correlation coeﬃcient ρ is given by

The unbiased maximum likelihood estimator (MLE) of λ is based on S1, S2, . . . , SN and is given by

ρ(λ) = cos (cid:16)π(1 − λ)(cid:17).

ˆλN =

1
N − 1

N

Xn=2

I(Sn = Sn−1).

(3)

(4)

Invoking the Invariance Principle [4], the MLE for ρ is derived from (3) and is given by ρ(ˆλN ). We refer to it as the
Kedem estimator.

4 Approximate Estimation

A low-complexity estimator for ρ can be derived by means of approximating the function ρ(λ) in (3). By using global

and convex optimization [8, 13], we obtain the optimal 5-interval piecewise linear approximation for ρ(λ) in (3),

furnishing the following proposed low-complexity estimator:

−1.01 + 0.64λ,

−1.20 + 1.97λ,

˜ρ(λ) =

−1.51 + 3.02λ,

−0.77 + 1.97λ,

if λ ∈ [0.00, 0.14),

if λ ∈ [0.14, 0.30),

if λ ∈ [0.30, 0.70),

if λ ∈ [0.70, 0.86),

(5)

0.37 + 0.64λ,

if λ ∈ [0.86, 1.00).






The absolute error satisﬁes: |˜ρ(λ) − ρ(λ)| < 1.4 · 10−2. The proposed approximate estimator is therefore ˜ρ(ˆλN ).

5 Simulations

A Monte Carlo simulation with R = 1000 replicates of the AR(1) process of length N = 512 was used to assess

behavior of the proposed estimator in comparison with the ACF estimator. The selected values of ρ were ρ ∈ [−1, 1]
in steps of 4 · 10−2. The power of the additive white noise in (1) was adjusted such that 90% of its realizations are
within [−1, 1], resulting in Wn ∼ N (0, 0.61). In order to quantify the performance of the proposed low complexity
estimator compared to the ACF estimator in (2), we computed ˆρ(r)
N (ˆλN ) − ρ for each
replicate r = 0, 1, . . . , R − 1, where ˆρ(r)
N , ρ(r)(ˆλN ), and ˜ρ(r)(ˆλN ) are the estimates of ρ according to the ACF, Kedem,
and the proposed estimators for each replicate r, respectively. Fig. 1 displays values of err(ˆρN ) =
N − ρ)/R,
r=1(˜ρ(r)(ˆλN )−ρ)/R along with the 95% conﬁdence intervals
err(ρ(ˆλN )) =
based on the normal distribution.

r=1(ρ(r)(ˆλN )−ρ)/R, and err(˜ρ(ˆλN )) =

N − ρ, ρ(r)(ˆλN ) − ρ, and ˜ρ(r)

r=1(ˆρ(r)

P

P

P

R

R

R

2

PSfrag replacements

Bias

err(ρ(ˆλN ))
err(˜ρ(ˆλN ))
−3 · 10−2

0
PSfrag replacements

3 · 10−2
Bias
err(ˆρN )

2 · 10−2

1 · 10−2

 0

−1 · 10−2

)
N
ˆρ
(
r
r
e

−2 · 10−2

−1.0

−0.5

 0
ρ

0.5

1.0

(a) Average bias for ACF estimator.

err(˜ρ(ˆλN ))
−3 · 10−2

2 · 10−2

1 · 10−2

 0

)
)
N
ˆλ
(
ρ
(
r
r
e

0
PSfrag replacements

−1 · 10−2

−2 · 10−2

−1.0

−0.5

 0
ρ

0.5

1.0

(b) Average bias for Kedem estimator.

3 · 10−2
Bias
err(ˆρN )
err(ρ(ˆλN ))

−3 · 10−2

2 · 10−2

1 · 10−2

 0

−1 · 10−2

)
)
N
ˆλ
(
˜ρ
(
r
r
e

0

−2 · 10−2

−1.0

−0.5

3 · 10−2

 0
ρ

0.5

1.0

(c) Average bias for proposed estimator.

Figure 1: Average bias for for the ACF estimator (1(a)), Kedem estimator (1(b)), and the proposed approximated
estimator (1(c)), respectively, over an ensemble of 1000 Monte Carlo replicates. The upper and bottom dotted lines
for each plot represent the 95% conﬁdence interval based on the normal distribution.

3

Table 1: Complexity arithmetic summary for the implemented designs

Estimator Multiplication Division Addition

Shifts

ACF

Kedem

Proposed

2N

1

0

1

1

0

2(N − 1)

N + 28

N + 1

0

28

2

6 Arithmetic Complexity

The direct implementation of the ACF estimator requires one division, 2N multiplications, 2N −1 additions. Assuming
that ˆλN is known, the estimator for ρ derived from Theorem 1 requires one addition, one multiplication by π, and
one call of the cosine function. The cosine function is implemented through the coordinated rotation digital computer

(CORDIC) algorithm, which is an iterative method that employs successive additions of bit-shifted quantities. Each

iteration of the CORDIC algorithm requires two additions and two shifts at most, depending on the the angles

that are computed. The implementation of the CORDIC block used in the the proposed architectures require

14 iterations [16, pg. 40], resulting in a total of 28 additions and up to 28 bit-shifts for each evaluation of the cosine
function. On its turn, the computation of ˆλN requires N − 1 additions, N − 1 comparisons, and one division by N − 1.
On the other hand, given that ˆλN is available, the proposed approximate estimator ˜ρ(ˆλN ) based on (5) requires
only multiplications by simple constants, additions and bit-shifting operations, amounting to N + 1 additions and at

most 2 shifts. as well as a comparator. Table 1 summarizes the arithmetic complexity for the ACF, Kedem, and the

proposed estimator.

7 Hardware Implementation

The ACF, Kedem, and the proposed approximate estimator were implemented on a Xilinx Artix-7 XC7A35T-

1CPG236C FPGA device. Although there are diﬀerent architectures for digital correlators based on fast Fourier

transforms (FFT) for diﬀerent applications [1], we choose not to implement such scheme given its higher complexity

in terms of resources and power compared to the architecture in Fig. 2. The implementations are capable of providing

an estimate of ρ for every clock pulse using the last N input samples. The ACF estimator in (2) was implemented

using the architecture depicted in Fig. 2. The structure for computing ˆρN possesses two identical (N − 1)-sample

delay lines after the computation of XnXn−1 and XnXn. The values of XnXn−1 and XnXn in N − 1 cycles in the
N
n=1 XnXn, respectively. This scheme allows the
past are subtracted from the current value of
overall system to compute the correlation limited to the last N samples. Without the delay network, the circuit

N
n=2 XnXn−1 and

P

P

would yield the correlation for the whole sequence from its beginning and incur in overﬂow.

The Kedem and the proposed estimators share the structure shown in Fig 3, which is required for computing the

estimated value of λ. The input word representing the samples in time in Fig. 3 is downsized from B = 10 bits to

the sign bit. The current sign bit is then compared to the sign bit of the last sample and the result is stored in a

shift register of size N . We adopted N = 512. Subsequently the output sequence from the comparator is shifted to
the right at every rising edge of the clock. The value of ˆλ is then added to the net value of the immediate sign bit
comparison and the comparison N clock periods earlier. Note that this delay network is the same present on Fig. 2,
allowing the design to account for only a window of size N . This negative loop results in forcing ˆλ to store the number
of comparisons that were evaluated as true in the last N clock pulses, including the current sample compared to the

previous one.

Such estimated value ˆλN is then submitted to the block implementing the functions ρ(·) or ˜ρ(·) for the Kedem or
the proposed estimator, respectively. For the Kedem estimator, a single call for the cosine function is required, being

physically implemented according to the Xilinx implementation of the CORDIC algorithm as described in [16, p. 17].

4

Xn

z−1

z−1

z−1

z−1

|

{z
N − 1 delays

}

XnXn−1

X 2
n

z−1

z−1

z−1

|

{z
N − 1 delays

}

P

N
n=2 XnXn−1

z−1

z−1

ˆρN

÷

P

N
n=1 X 2
n

Figure 2: Architecture for the ACF estimator.

sign(Xn )

Xn

B

1

=

z−1

z−1

z−1

z−1

|
}
{z
N − 1 delays

ˆλN

z−1

Figure 3: Architecture for the estimation of λ.

(cid:19)2

(cid:20)3

ˆλN

(cid:20)5

−1

−5/4

−3/2

(cid:20)1

Mux

˜ρ(ˆλN )

−3/4

−3/8

Figure 4: Architecture for the implementation of ˜ρ(λ), where the constants in (5) where approximated by the ones
in Table 2.

Table 2: Dyadic approximation for the constants required in (5)

Const.

0.64

1.97

3.02

1.01

1.20

1.51

0.77

0.37

Approx.

5/8

63/32

3

1

5/4

3/2

3/4

3/8

5

Table 3: Resource utilization for FPGA implementation using 10-bit wordlength

Resource ACF [9]

Kedem [10]

Proposed

LUT

FF

Slices

1365

2762

513

437 (−67.98%)

98 (−93%)

853 (−69.11%)

582 (−79%)

251 (−51.07%)

129 (−75%)

fmax (MHz)

115.64

165.75 (+30.22%)

242.30 (+110%)

Latency (cycles)

Power (mW)

35

76

22 (−37.14%)

6 (−92.10%)

2 (−94%)

4 (−95%)

In terms of the proposed estimator, aiming at a low-cost hardware implementation, the constants required in (5)

were approximated according to dyadic integers with low magnitude numerator, rendering the values in Table 2. The

computation of ˜ρ(λ) is depicted in Fig. 4. Pipeline stages are not shown for simplicity. The mux block in Fig. 4

selects the appropriate path according to the interval deﬁned in (5). The symmetry of ˜ρ(λ) was exploited in such a

way that the slope coeﬃcients in the ﬁrst three intervals were suﬃcient for the computing ˜ρ(λ) for all possible values

of λ.

The designs were implemented using a signed 10-bit word for representing the the output estimates according to

the ACF, Kedem, and the proposed estimator. Table 3 summarizes the resource utilization in terms of look-up table

(LUT), ﬂip-ﬂops (FF), and slices [17] and performance measurements expressed by maximum operating frequency,

latency, and dynamic power. The percentages in parenthesis inform the variations compared to the ACF estimator.

The proposed design oﬀers signiﬁcant savings in resource consumption: (i) the number of LUTs, latency, and dynamic

power were dramatically reduced in more than 93% compared to the exact implementation of the estimator. The

number of FFs and slices were reduced in more than 75%; and the maximum operating frequency received a two-

fold increase. The signiﬁcant reduction in the latency of the design based on (3) is mainly due to the absence of

multipliers and dividers [15], which demand several clock cycles to complete an operation. In particular, the proposed

design shows better metrics because the consecutive shift-and-add operations of the CORDIC [16] block, employed

to compute the cosine, are substituted by multiplications by hardware-friendly constants, requiring just a few shifts

and additions.

8 Conclusions

A low-complexity approximate method for computing the correlation coeﬃcient in AR(1) processes was introduced.

Numerical simulations indicate the good performance of the proposed estimator when compared with the standard

method in literature. The associate computational complexity favors its implementation in low-power hardware.

Hardware implementation metrics of the proposed estimator are shown to be much more attractive than the ones

resulting from the ACF estimator architecture.

In particular, the dynamic power of the implementation of the

proposed method is almost fourteen times smaller than the traditional method, while the the maximum operating

frequency is doubled.

Acknowledgments

This work has been partially supported by CNPq, Brazil, and NSERC, Canada.

6

References

[1] V. R. Balu and S. M. R. Hasan, Computationally minimized x-part for FX correlator in big-data interferometers, IEEE

Access, 5 (2017), pp. 25353–25364.

[2] F. Betzel, K. Khatamifard, H. Suresh, D. J. Lilja, J. Sartori, and U. Karpuzcu, Approximate communication:
Techniques for reducing communication bottlenecks in large-scale parallel systems, ACM Computing Surveys (CSUR), 51
(2018), p. 1.

[3] V. Britanak, P. Yip, and K. R. Rao, Discrete Cosine and Sine Transforms, Academic Press, 2007.

[4] G. Casella and R. L. Berger, Statistical Inference, vol. 2, Duxbury Paciﬁc Grove, CA, 2002.

[5] R. J. Cintra and F. M. Bayer, A DCT approximation for image compression, IEEE Signal Processing Letters, 18 (2011),

pp. 579–582.

[6] V. de A. Coutinho, R. J. Cintra, and F. M. Bayer, Low-complexity multidimensional DCT approximations for high-

order tensor data decorrelation, IEEE Transactions on Image Processing, 26 (2017), pp. 2296–2310.

[7] T. I. Haweel, A new square wave transform based on the DCT, Signal processing, 81 (2001), pp. 2309–2319.

[8] C. F. Jekel and G. Venter, pwlf: A Python Library for Fitting 1D Continuous Piecewise Linear Functions, 2019.

[9] S. M. Kay, Modern Spectral Estimation, Prentice-Hall, Upper Saddle River, NJ, 1988.

[10] B. Kedem, Estimation of the parameters in stationary autoregressive processes after hard limiting, Journal of the American

Statistical Association, 75 (1980), pp. 146–153.

[11] M. T. Pourazad, C. Doutre, M. Azimi, and P. Nasiopoulos, HEVC: The new gold standard for video compression:

How does HEVC compare with H.264/AVC?, IEEE Consumer Electronics Magazine, 1 (2012), pp. 36 – 46.

[12] K. R. Rao and P. Yip, Discrete Cosine Transform: Algorithms, Advantages, Applications, Academic press, 2014.

[13] R. Storn and K. Price, Diﬀerential evolution – a simple and eﬃcient heuristic for global optimization over continuous

spaces, Journal of Global Optimization, 11 (1997), pp. 341–359.

[14] C. J. Tablada, F. M. Bayer, and R. J. Cintra, A class of DCT approximations based on the Feig-Winograd algorithm,

Signal Processing, 113 (2015), pp. 38–51.

[15] Xilinx, Divider Generator v5.1 LogiCORE IP Product Guide, Oct. 2016.

[16]

[17]

, CORDIC v6.0 LogiCORE IP Product Guide, 2017.

, 7 Series DSP48E1 Slice User Guide, Mar. 2018.

[18] X. Zhao, G. An, Y. Cen, H. Wang, and R. Zhao, Robust generalized low rank approximations of matrices for video

denoising, in 2016 IEEE 13th International Conference on Signal Processing (ICSP), Nov 2016, pp. 815–818.

7

