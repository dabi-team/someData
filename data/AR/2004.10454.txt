A Study of Non-autoregressive Model for Sequence Generation

Yi Ren ∗
Zhejiang University
rayeren@zju.edu.cn

Jinglin Liu ∗
Zhejiang University
jinglinliu@zju.edu.cn

Xu Tan
Microsoft Research Asia
xuta@microsoft.com

Zhou Zhao†
Zhejiang University
zhaozhou@zju.edu.cn

Sheng Zhao
Microsoft STC Asia
Sheng.Zhao@microsoft.com

Tie-Yan Liu
Microsoft Research Asia
tyliu@microsoft.com

Abstract

of a target token on source tokens and thus
eases the training of NAR models.

Non-autoregressive (NAR) models generate
all the tokens of a sequence in parallel, re-
sulting in faster generation speed compared
to their autoregressive (AR) counterparts but
at the cost of lower accuracy. Different tech-
niques including knowledge distillation and
source-target alignment have been proposed to
bridge the gap between AR and NAR mod-
els in various tasks such as neural machine
translation (NMT), automatic speech recogni-
tion (ASR), and text to speech (TTS). With
the help of those techniques, NAR models can
catch up with the accuracy of AR models in
some tasks but not in some others.
In this
work, we conduct a study to understand the
difﬁculty of NAR sequence generation and try
to answer: (1) Why NAR models can catch
up with AR models in some tasks but not
all? (2) Why techniques like knowledge dis-
tillation and source-target alignment can help
NAR models. Since the main difference be-
tween AR and NAR models is that NAR mod-
els do not use dependency among target tokens
while AR models do, intuitively the difﬁculty
of NAR sequence generation heavily depends
on the strongness of dependency among tar-
get tokens. To quantify such dependency, we
propose an analysis model called CoMMA to
characterize the difﬁculty of different NAR se-
quence generation tasks. We have several inter-
esting ﬁndings: 1) Among the NMT, ASR and
TTS tasks, ASR has the most target-token de-
pendency while TTS has the least. 2) Knowl-
edge distillation reduces the target-token de-
pendency in target sequence and thus improves
the accuracy of NAR models. 3) Source-target
alignment constraint encourages dependency

∗ Equal contribution.
† Corresponding author

1

Introduction

Non-autoregressive (NAR) models (Oord et al.,
2017; Gu et al., 2017; Chen et al., 2019; Ren et al.,
2019), which generate all the tokens in a target
sequence in parallel and can speed up inference,
are widely explored in natural language and speech
processing tasks such as neural machine transla-
tion (NMT) (Gu et al., 2017; Lee et al., 2018; Guo
et al., 2019a; Wang et al., 2019; Li et al., 2019b;
Guo et al., 2019b), automatic speech recognition
(ASR) (Chen et al., 2019) and text to speech (TTS)
synthesis (Oord et al., 2017; Ren et al., 2019). How-
ever, NAR models usually lead to lower accuracy
than their autoregressive (AR) counterparts since
the inner dependencies among the target tokens are
explicitly removed.

Several techniques have been proposed to allevi-
ate the accuracy degradation, including 1) knowl-
edge distillation (Oord et al., 2017; Gu et al., 2017;
Guo et al., 2019a,b; Ren et al., 2019), 2) impos-
ing source-target alignment constraint with fertil-
ity (Gu et al., 2017), word mapping (Guo et al.,
2019a), attention distillation (Li et al., 2019b) and
duration prediction (Ren et al., 2019). With the
help of those techniques, it is observed that NAR
models can match the accuracy of AR models for
some tasks (Ren et al., 2019), but the gap still exists
for some other tasks (Gu et al., 2017; Chen et al.,
2019). Therefore, several questions come out natu-
rally: (1) Why the gap still exists for some tasks?
Are some tasks more difﬁcult for NAR generation
than others? (2) Why the techniques like knowl-
edge distillation and source-target alignment can
help NAR generation?

0
2
0
2

y
a
M
1
1

]
L
C
.
s
c
[

2
v
4
5
4
0
1
.
4
0
0
2
:
v
i
X
r
a

 
 
 
 
 
 
The main difference between AR and NAR mod-
els is that NAR models do not consider the depen-
dency among target tokens, which is also the root
cause of accuracy drop of NAR models. Thus, to
better understand NAR sequence generation and an-
swer the above questions, we need to characterize
and quantify the target-token dependency, which
turns out to be non-trivial since the sequences could
be of different modalities (i.e., speech or text).
For this purpose, we design a novel model called
COnditional Masked prediction model with Mix-
Attention (CoMMA), inspired by the mix-attention
in He et al. (2018) and the masked language mod-
eling in Devlin et al. (2018): in CoMMA, (1) the
prediction of one target token can attend to all the
source and target tokens with mix-attention, and
2) target tokens are randomly masked with vary-
ing probabilities. CoMMA can help us to measure
target-token dependency using the ratio of the atten-
tion weights on target context over that on full (both
source and target) context when predicting a tar-
get token: bigger ratio, larger dependency among
target tokens.

We conduct a comprehensive study in this work
and obtain several interesting discoveries that can
answer previous questions. First, we ﬁnd that
the rank of the target-token dependency among
the three tasks is ASR>NMT>TTS: ASR has the
largest dependency while TTS has the smallest.
This ﬁnding is consistent with the accuracy gap be-
tween AR and NAR models and demonstrates the
difﬁculty of NAR generation across tasks. Second,
we replace the target sequence of original training
data with the sequence generated by an AR model
(i.e., through knowledge distillation) and use the
new data to train CoMMA; we ﬁnd that the target-
token dependency is reduced. Smaller target-token
dependency makes NAR training easier and thus
improves the accuracy. Third, source-target align-
ment constraint such as explicit duration predic-
tion (Ren et al., 2019) or implicit attention distilla-
tion (Li et al., 2019b) also reduces the target-token
dependency, thus helping the training of NAR mod-
els.

The main contributions of this work are as fol-

lows:

• We design a novel model, conditional
masked prediction model with mix-attention
(CoMMA), to measure the token dependency
for sequence generation.

• With CoMMA, we ﬁnd that: 1) Among the

three tasks, ASR is the most difﬁcult and TTS
is the least for NAR generation; 2) both knowl-
edge distillation and imposing source-target
alignment constraint reduce the target-token
dependency, and thus reduce the difﬁculty of
training NAR models.

2 CoMMA

In this section, we analyze the token depen-
dency in the target sequence with a novel condi-
tional masked prediction model with mix-attention
(CoMMA). We ﬁrst introduce the design and struc-
ture of CoMMA, and then describe how to measure
the target token dependency based on CoMMA.

2.1 The Design of CoMMA

It is non-trivial to directly measure and compare
the target token dependency in different modali-
ties (i.e., speech or text) and different conditional
source modalities (i.e., speech or text). Therefore,
we have several considerations in the design of
CoMMA: 1) We use masked language modeling in
BERT (Devlin et al., 2018) with source condition to
train CoMMA, which can help measure the depen-
dency on target context when predicting the current
masked token. 2) In order to ensure the dependency
on source and target tokens can be comparable, we
use mix-attention (He et al., 2018) to calculate the
attention weights on both source and target tokens
in a single softmax function.

The model architecture of CoMMA is shown in
Figure 1. Speciﬁcally, CoMMA differs from stan-
dard Transformer (Vaswani et al., 2017) as follows:
1) Some tokens are randomly replaced by a special
mask token (cid:104)M (cid:105) with probability p, and the model
is trained to predict original unmasked tokens. 2)
We employ mix-attention mechanism (He et al.,
2018) where layer i in the decoder can attend to
itself and the layer i in the encoder at the same time
and compute the attention weights in a single soft-
max function. We share the parameters of attention
and feed-forward layer between the encoder and
decoder. 3) Following He et al. (2018), we add
source/target embedding to tell the model whether
a token is from the source or target sequence, and
also add position embedding with the positions of
source and target tokens both starting from zero.
4) The encoder and decoder pre-net (Shen et al.,
2018) vary in different tasks: For TTS, encoder pre-
net consists of only embedding lookup table, and
decoder pre-net consists of 2-layer dense network

(a) The main structure of CoMMA.

(b) The input module of CoMMA.

Figure 1: The architecture of conditional masked prediction model with mix-attention (CoMMA).

with ReLU activation. For ASR, encoder pre-net
consists of 3-layer 2D convolutional network, and
decoder pre-net consists of only embedding lookup
table. For NMT, both encoder and decoder pre-net
consist of only embedding lookup table.

CoMMA is designed to measure the target token
dependency in a variety of sequence generations, in-
cluding AR (unidirectional) generation, NAR gen-
eration, bidirectional generation or even identity
copy. To this end, we vary the mask probability p
(the ratio of the masked tokens in the whole target
tokens1) in a uniform distribution p ∼ U (0.0, 1.0)
when training CoMMA. In this way, p = 1 covers
NAR generation, p = 0 covers identity copy, and
in some cases, p can also cover AR generation.

2.2 How to Measure Target Token
Dependency based on CoMMA

To measure the target token dependency, we deﬁne
a metric called attention density ratio R, which
represents the ratio of the attention density (the
normalized attention weights) on target context in
mix-attention when predicting the target token with
a well-trained CoMMA. We describe the calcula-
tion of R in the following steps.

First, we deﬁne the attention density ratio α for

a single target token i as

αi =

1
N

1
N

(cid:80)N

j=1 Ai,j

(cid:80)N

j=1 Ai,j + 1

M

(cid:80)N +M

j=N +1 Ai,j

,

(1)

1Considering the continuity of the mel-spectrogram frames
in speech sequence, we mask the frames by chunk, each chunk
with frame size 10.

where Ai,j denotes the attention weights from to-
ken i to token j in mix-attention, and i ∈ [1, N ] rep-
resents the target token while j ∈ [N + 1, N + M ]
represents the source token, M and N is the
length of source and target sequence respectively,
(cid:80)N +M
j=1 Ai,j = 1. αi represents the ratio of at-
tention density on target context when predicting
target token i.

Second, we average the attention density ratio
αi over all the predicted tokens (with masked prob-
ability p) in a sentence and get

1
|Mp|

(cid:88)

αi,

i∈Mp

(2)

where Mp represents the set of masked target to-
kens under mask probability p and |Mp| denotes
the number of tokens in the set.

Third, for a given p, we calculate R(p) over all
test data and average them to get the ﬁnal attention
density ratio

R(p) = Avg(

1
|Mp|

(cid:88)

i∈Mp

αi).

(3)

We vary p and calculate R(p) to measure the den-
sity ratio under different conditions, where a small
p represents more target context that can be lever-
aged and a large p represents less context. In the
extreme cases, p = 1 represent NAR generation
while p = 0 represents to learn identity copy.

Given the proposed attention density ratio R(p)
based on CoMMA, we can measure the target token
dependency of the NAR model in different tasks,

CoMMAmodelN ×Add & NormFeed ForwardAdd & NormLinearSelf-AttentionX1       X2       X3       X4        X5     EOSY1       MY3       MY5Y6Source TokenTarget TokenSoftmaxMixed AttentionY2                   Y4Encoder Pre-NetDecoder Pre-NetEsEsEsEsEsEsEtEtEtEtEt         EtSource/Target EmbeddingEx1Ex2      Ex3      Ex4      Ex5    EeosEy1EmEy3      EmEy5     Ey6   Input TokensToken EmbeddingE1E2        E3        E4       E5        E6   E1E2        E3        E4       E5        E6   CoMMAmodelPositionalEmbeddingCoMMAmodelN ×Add & NormFeed ForwardAdd & NormLinearSelf-AttentionX1       X2       X3       X4        X5     EOSY1       MY3       MY5Y6Source TokenTarget TokenSoftmaxMixed AttentionY2                   Y4Encoder Pre-NetDecoder Pre-NetEsEsEsEsEsEsEtEtEtEtEt         EtSource/Target EmbeddingEx1Ex2      Ex3      Ex4      Ex5    EeosEy1EmEy3      EmEy5     Ey6   Input TokensToken EmbeddingE1E2        E3        E4       E5        E6   E1E2        E3        E4       E5        E6   CoMMAmodelPositionalEmbeddingTask

AR
NAR

NMT

ASR

TTS

Transformer (Vaswani et al., 2017)
NAT (Gu et al., 2017) w/ AC

Transformer ASR (Karita et al., 2019)
NAR-ASR (Chen et al., 2019) w/ AC

Transformer TTS (Li et al., 2019a)
FastSpeech (Ren et al., 2019)

Table 1: The AR and NAR model we consider in each task. “AC” means attention constraint we mentioned in
Section 5.

which can help understand a series of important
research questions, as we introduce in the following
three sections.

3 Study on the Difﬁculty of NAR

Generation

In this section, we aim to ﬁnd out why the gap
still exists for ASR and NMT tasks, while in TTS,
NAR can catch up with the accuracy of AR model.
We also analyze the causes of different difﬁculties
for different tasks. We start from evaluating the
accuracy gap between AR and NAR models for
NMT, ASR and TTS, and then measure the token
dependency based on our proposed CoMMA.

3.1 The Accuracy Gap

We ﬁrst train the AR and NAR models in each task
and check the accuracy gap between AR and NAR
models to measure the difﬁculty of NAR generation
in each task.

Conﬁguration of AR and NAR Model The AR
and NAR models we considered are shown in Ta-
ble 1, where we use Transformer as the AR models
while the representative NAR models in each task.
For a fair comparison, we make some modiﬁca-
tions on the NAR models: 1) For ASR, we train a
Transformer ASR ﬁrst as teacher model and then
constrain the attention distributions of NAR-ASR
with the alignments converted by teacher attention
weights, which will be introduced and discussed
in Section 5. 2) For NMT, we constrain the KL-
divergence of the encoder-to-decoder attention dis-
tributions between the AR and NAR models fol-
lowing Li et al. (2019b). We also list the hyperpa-
rameters of AR and NAR models for each task in
the supplementary material (Section 1).

Datasets and Evaluations for NMT, ASR and
TTS We conduct experiments on IWSLT 2014
German-English (De-En) translation dataset2 for
NMT, LibriTTS dataset (Zen et al., 2019) for
ASR and LJSpeech dataset (Ito) for TTS. For

2https://wit3.fbk.eu/mt.php?release=2014-01

speech data, we transform the raw audio into mel-
spectrograms following Shen et al. (2018) with
50 ms frame size and 12.5 ms hop size. For
text data, we tokenize sentences with moses to-
kenizer3 and then segment into subword sym-
bols using Byte Pair Encoding (BPE) (Sennrich
et al., 2015) for subword-level analysis, and con-
vert the text sequence into phoneme sequence
with grapheme-to-phoneme conversion (Sun et al.,
2019) for phoneme-level analysis. We use BPE for
NMT and ASR, while phoneme for TTS by default
unless otherwise stated. We train all models on 2
NVIDIA 2080Ti GPUs using Adam optimizer with
β1 = 0.9, β2 = 0.98, ε = 10−9 and following
the same learning rate schedule in (Vaswani et al.,
2017).

For ASR, we evaluate word error rate (WER) on
test-clean set in LibriTTS dataset. For NMT, we
evaluate the BLEU score on IWSLT 2014 De-En
test set. For TTS, we randomly split the LJSpeech
dataset into 3 sets: 12500 samples for training, 300
samples for validation and 300 samples for testing,
and then evaluate the mean opinion score (MOS)
on the test set to measure the audio quality. The
output mel-spectrograms of TTS model are trans-
formed into audio samples using the pretrained
WaveGlow (Prenger et al., 2019). Each audio is
listened by at least 20 testers, who are all native
English speakers.

Task

NMT (BLEU/WER)

ASR (BLEU/WER)

TTS (MOS)

Model

Accuracy

Transformer
NAT

33.90/47.18
27.12/54.90

Transformer ASR
NAR-ASR

66.60/20.10
39.23/36.20

Transformer TTS
FastSpeech

3.82 ± 0.08
3.79 ± 0.12

Table 2: The accuracy gap between NAR and AR mod-
els.

Results of Accuracy Gap The accuracies of the
AR and NAR models in each task are shown in

3https://github.com/moses-smt/mosesdecoder/blob/mast

er/scripts/tokenizer/tokenizer.perl

Table 2. It can be seen that NAR model can match
the accuracy of AR model gap in TTS, while the
gap still exists in ASR and NMT. We calculate both
the WER and BLEU metrics in ASR and NMT
for better comparison. It can be seen that ASR
has a larger gap than NMT. Larger accuracy gap
may indicate more difﬁcult for NAR generation in
this task. Next, we try to understand what factors
inﬂuence difﬁculties among different tasks.

3.2 The Token Dependency

In the last subsection, we analyze the difﬁculty of
NAR models from the perspective of the accuracy
gap. In this subsection, we try to ﬁnd evidence from
the target token dependency, which is supposed to
be consistent with the accuracy gap to measure the
task difﬁculty.

Conﬁguration of CoMMA We train CoMMA
with the same conﬁguration on NMT, ASR and
TTS: the hidden size and the feed-forward hidden
size and the number of layers are set to 512, 1024
and 6 respectively. We list other hyperparameters
of CoMMA in the supplementary material (Section
2). We also use the same datasets for each task as
described in Section 3.1 to train CoMMA.

Results of Token Dependency We use the at-
tention density ratio calculated from CoMMA (as
described in Section 2.2) to measure the target to-
ken dependency and show the results in Figure 2. It
can be seen that the rank of attention density ratio
R(p) is ASR>NMT>TTS for all p. Considering
that R(p) measures how much context information
from target side is needed to generate a target token,
we can see that ASR has more dependency on the
target context and less on the source context, while
TTS is the opposite, which is consistent with the
accuracy gap between AR and NAR models as we
described in Section 3.1.

As we vary p from 0.1 to 0.5, R(p) decreases
for all tasks since more tokens in the target side are
masked. We also ﬁnd that R(p) in NMT decreases
quicker than the other two tasks, which indicates
that NMT is good at learning from source context
when less context information can be leveraged
from the target side while R(p) in ASR decreases
little. This can also explain why NAR in NMT
achieves less gap than ASR.

Figure 2: Attention density ratio R(p) under different
p in different tasks for performance gap analysis.

4 Study on Knowledge Distillation

In the current and next sections, we investigate
why some techniques can help NAR generation
from the aspect of target token dependency. We
only analyze knowledge distillation and attention
alignment techniques which are widely used in
NAR, but we believe our analysis method can be
applied to other NAR techniques, such as iterative
reﬁnement (Lee et al., 2018), ﬁne-tuning from an
AR model (Guo et al., 2019b) and so on.

Most existing NAR models (Oord et al., 2017;
Gu et al., 2017; Wang et al., 2019; Guo et al.,
2019a,b; Ren et al., 2019) rely on the technique of
knowledge distillation, which generates the new tar-
get sequence given original source sequence from
a pre-trained AR model and trains the NAR model
for better accuracy. In this section, we ﬁrst conduct
experiments to verify the accuracy improvements
of knowledge distillation. Next, based on our pro-
posed CoMMA, we analyze why knowledge distil-
lation could help NAR models.

4.1 The Effectiveness of Knowledge

Distillation

Knowledge Distillation for NAR Models
Given a well-trained AR model θT and source
sequence x ∈ X from the original training data, a
new target sequence can be generated through

y(cid:48) ∼ P (y|x; θT ).

(4)

We can use beam search for NMT and ASR and
greedy search for TTS to generate y(cid:48). Given the set
of generated sequence pairs (X , Y (cid:48)), we train the
NAR models with negative log-likelihood loss

L((X , Y (cid:48)); θ) = −

(cid:88)

log P (y(cid:48)|x; θ),

(x,y(cid:48))∈(X ,Y (cid:48))

(5)

where θ is the parameters set of the NAR model.

Task

Model

Accuracy

NMT (BLEU)

TTS (MOS)

Transformer

NAT
NAT w/o KD

33.90

27.12
21.79

Transformer TTS

3.82 ± 0.08

FastSpeech

3.79 ± 0.12
FastSpeech w/o KD 3.58 ± 0.13

Table 3: The comparison between NAR models with
and without knowledge distillation.

Experimental Results We only conducted
knowledge distillation on NMT and TTS since
there is no previous works on ASR yet. We train
the NAR models in NMT and TTS with raw target
token sequence instead of teacher outputs and
compare the results with that in Table 2. The
accuracy improvements of knowledge distillation
are shown in Table 3. It can be seen that knowledge
distillation can boost the accuracy of NAR in NMT
and TTS, which is consistent with the previous
works.

4.2 Why Knowledge Distillation Works

Recently, Zhou et al. (2019) ﬁnd that knowledge
distillation can reduce the complexity of data sets
and help NAT to better model the variations in the
output data. However, this explanation is reason-
able on its own, but mainly from the perspective
of data level and is not easy to understand. In this
subsection, we analyze knowledge distillation from
a more understandable and intuitive perspective,
by observing the change of the token dependency
based on our proposed CoMMA.

We measure the target token dependency by
training CoMMA with the original training data
and new data generated through knowledge dis-
tillation, respectively. The results are shown in
Figure 3. It can be seen that knowledge distillation
can decrease the attention density ratio R(p) on
both tasks, indicating that knowledge distillation
can reduce the dependency on the target-side con-
text when predicting a target token, which can be
helpful for NAT model training.

5 Study on Alignment Constraint

Figure 3: Attention density ratio R(p) for NMT and
TTS tasks under different p with and without knowl-
edge distillation, where “KD” means knowledge distil-
lation.

cently, many works have proposed a variety of ap-
proaches to help with the source-target alignment
of NAR models, which can improve the estima-
tion of the soft alignment in attention mechanism
model. For example, Li et al. (2019b) constrain the
KL-divergence of the encoder-to-decoder attention
distributions between the AR and NAR models. Gu
et al. (2017) predict the fertility of the source to-
kens to approximate the alignments between target
sequence and source sequence. Guo et al. (2019a)
convert the source token to target token with phrase
table or embedding mapping for alignments. Ren
et al. (2019) predict the duration (the number of
mel-spectrograms) of each phoneme.

In this section, we ﬁrst study the effectiveness of
alignment constraint for NAR models, and then an-
alyze why alignment constraint can help the NAR
models by observing the changes of token depen-
dency based on our proposed CoMMA.

5.1 The Effectiveness of Alignment

Constraint

Alignment Constraint for NAR Models We
choose the attention constraint mechanism which is
commonly used based on previous works for each
task.

For NMT, we follow Li et al. (2019b) to mini-
mize the KL-divergence between the attention dis-
tributions of AR and NAR model as follow:

Lac =

1
N

N
(cid:88)

i=1

DKL(A(cid:48)

i||Ai),

(6)

Without the help of target context, NAR models
usually suffer from ambiguous attention to the
source context, which affects the accuracy. Re-

where A(cid:48)
i and Ai denote the source-target attention
weights from the AR teacher model and NAR stu-
dent model respectively. A(cid:48), A ⊂ RN ×M where N

and M are the number of tokens in the target and
source sequence.

For TTS, we follow Ren et al. (2019) to ex-
tract the encoder-to-decoder attention alignments
from the well-trained AR teacher model and con-
vert them to phoneme duration sequence, and then
train the duration predictor to expand the hidden of
the source sequence to match the length of target
sequence.

j=1 j ∗A(cid:48)

For ASR, since there is no previous work propos-
ing alignment constraint for NAR, we design a new
alignment constraint method and explore its effec-
tiveness. We ﬁrst calculate the expectation position
of teacher’s attention distributions for i-th target
token: Ei = (cid:80)M
i,j and cast it to the nearest
integer. Then we constrain the attention weights of
i-th target token for NAR model so that it can only
attend to the source position between Ei−1 and
Ei+1. Specially, the ﬁrst target token can only at-
tend to the source position between 1 and E2 while
the last target token can only attend to the position
between EN −1 and M . We apply this alignment
constraint for ASR only in the training stage.

Task

Model

Accuracy

NMT (BLEU)

ASR (WER)

TTS (MOS)

Transformer

NAT
NAT w/o AC

Transformer ASR

NAR-ASR
NAR-ASR w/o AC

33.90

27.12
25.03

20.1

33.1
39.23

Transformer TTS

3.82 ± 0.08

FastSpeech
FastSpeech w/o AC

3.79 ± 0.12
1.97 ± 0.16

Table 4: The comparison between NAR models with
and without alignment constraint.

Experimental Results We follow the model con-
ﬁguration and datasets as described in Section 3.1,
and explore the accuracy improvements when
adding attention constraint to NAR models. The
results are shown in Table 4. It can be seen that
attention constraint can not only improve the per-
formance of NMT and TTS as previous works (Li
et al., 2019b; Ren et al., 2019) demonstrated, but
also help the NAR-ASR model achieve better
scores.

5.2 Why Alignment Constraint Works

Figure 4: Attention density ratio R(p) for NMT, ASR
and TTS tasks under different p with and without align-
ment constraint (AC).

of token dependency when adding alignment con-
straint on CoMMA.

For simplicity, we use the method described in
Equation 6 to help the training of CoMMA, where
the teacher model is the AR model and student
model is CoMMA. We minimize KL-divergence
between the per-head encoder-to-decoder atten-
tion distributions of the AR model and CoMMA.
First, we normalize the encoder-to-decoder atten-
tion weights in each head of mix-attention to con-
vert each row of the attention weights to a distribu-
tion:

ˆAi,j =

Ai,N +j
k=1 Ai,N +k
for each i ∈ [1, N ], j ∈ [1, M ],

(cid:80)M

(7)

where A ⊂ RN ×(N +M ) is the weights of mix-
attention described in Section 2.2, ˆA ⊂ RN ×M
is the normalized encoder-to-decoder attention
weights, M and N is the length of source and target
sequence. Then, we compute the KL-divergence
loss for each head as follows:

Lac =

1
N

N
(cid:88)

i=1

DKL(A(cid:48)

i|| ˆAi),

(8)

where A(cid:48) ⊂ RN ×M is the encoder-to-decoder at-
tention of AR teacher model. We average Lac over
all heads and layers and get the ﬁnal attention con-
straint loss for CoMMA.

We further analyze how alignment constraint could
help on NAR models by measuring the changes

We measure the token dependency by calculating
the attention density ratio R(p) based on CoMMA,

and show the results in Figure 4. It can be seen that
alignment constraint can help reduce ratio R(p)
on each task and thus reduce the dependency on
target context when predicting target tokens. In
the meanwhile, alignment constraint can help the
model extract more information from the source
context, which can help the learning of NAR mod-
els.

Another interesting ﬁnding is that NAR model
in TTS beneﬁts from attention constraint most as
shown in Table 4, and in the meanwhile, TTS has
the least attention density ratio as shown in Figure 4.
These observations suggest that NAR models with
small target token dependency could beneﬁt largely
from alignment constraint.

6 Related Works

Several works try to analyze and understand NAR
models on different tasks. We discuss these anal-
yses from the two aspects: knowledge distillation
and source-target alignment constraint.

Knowledge Distillation Knowledge distillation
has long been used to compress the model size (Hin-
ton et al., 2015; Furlanello et al., 2018; Yang et al.,
2018; Anil et al., 2018; Li et al., 2017) or trans-
fer the knowledge of teacher model to student
model (Tan et al., 2019; Liu et al., 2019a,b), and
soon been applied to NAR models (Gu et al., 2017;
Oord et al., 2017; Guo et al., 2019a; Wang et al.,
2019; Li et al., 2019b; Guo et al., 2019b; Ren
et al., 2019) to boost the accuracy. Some works fo-
cus on studying why knowledge distillation works:
Phuong and Lampert (2019) provide some insights
into the mechanisms of knowledge distillation by
studying the special case of linear and deep linear
classiﬁers and ﬁnd that data geometry, optimization
bias and strong monotonicity determine the success
of distillation; Yuan et al. (2019) argue that the
success of KD is also due to the regularization of
soft targets, which might be as important as the
similarity information between categories.

However, few works have studied the cause of
why knowledge distillation beneﬁts NAR training.
Recently, Zhou et al. (2019) investigate why knowl-
edge distillation is important for the training of
NAR model in NMT task and ﬁnd that knowledge
distillation can reduce the complexity of data sets
and help NAR model to learn the variations in the
output data.

Li et al. (2019b) explore the causes of the poor
performance of the NAR model by observing the

attention distributions and hidden states of NAR
model. Lee et al. (2018) presents some experiments
and analysis to prove the necessity for multiple it-
erations generation for NAT. They also investigate
the effectiveness of knowledge distillation in dif-
ferent task and make the assumption that teacher
model can essentially clean the training data so that
the distilled NAR model substantially outperforms
NAR model trained with raw data.

Attention Alignment Constraint Previous
work pointed out that adding additional alignment
knowledge can improve the estimation of the
soft alignment in attention mechanism model.
For example, Chen et al. (2016) uses the Viterbi
alignments of the IBM model 4 as an additional
knowledge during NMT training by calculating the
divergence between the attention weights and the
statistical alignment information.

Compared with AR model, the attention dis-
tributions of NAR model are more ambiguous,
which leads to the poor performance of the NAR
model. Recent works employ attention alignment
constraint between the well-trained AR and NAR
model to train a better NAR model. Li et al.
(2019b) leverages intermediate hidden information
from a well-trained AR-NMT teacher model to
improve the NAR-NMT model by minimizing KL-
divergence between the per-head encoder-decoder
attention of the teacher and the student. Ren et al.
(2019) choose the encoder-decoder attention head
from the AR-TTS teacher as the attention align-
ments to improve the performance of the NAR
model in TTS.

7 Conclusion

In this paper, we conducted a comprehensive study
on NAR models in NMT, ASR and TTS tasks to
analyze several research questions, including the
difﬁculty of NAR generation and why knowledge
distillation and alignment constraint can help NAR
models. We design a novel CoMMA and a metric
called attention density ratio to measure the depen-
dency on target context when predicting a target
token, which can analyze these questions in a uni-
ﬁed method. Through a series of empirical studies,
we demonstrate that the difﬁculty of NAR genera-
tion correlates on the target token dependency, and
knowledge distillation as well as alignment con-
straint reduces the dependency of target tokens and
encourages the model to rely more on source con-
text for target token prediction, which improves the

accuracy of NAR models. We believe our analyses
can shed light on the understandings and further
improvements on NAR models.

Acknowledgments

This work was supported in part by the Na-
tional Key R&D Program of China (Grant
No.2018AAA0100603), Zhejiang Natural Science
Foundation (LR19F020006), National Natural Sci-
ence Foundation of China (Grant No.61836002),
National Natural Science Foundation of China
(Grant No.U1611461), and National Natural Sci-
ence Foundation of China (Grant No.61751209).
This work was also partially funded by Microsoft
Research Asia. Thanks Tao Qin for the valuable
suggestions, comments and guidance on this paper.

References

Rohan Anil, Gabriel Pereyra, Alexandre Passos, Robert
Ormandi, George E Dahl, and Geoffrey E Hin-
ton. 2018. Large scale distributed neural network
training through online distillation. arXiv preprint
arXiv:1804.03235.

Nanxin Chen, Shinji Watanabe, Jes´us Villalba, and
Najim Dehak. 2019.
Non-autoregressive trans-
former automatic speech recognition. arXiv preprint
arXiv:1911.04908.

Wenhu Chen, Evgeny Matusov, Shahram Khadivi,
and Jan-Thorsten Peter. 2016. Guided alignment
training for topic-aware neural machine translation.
CoRR, abs/1607.01628.

Jacob Devlin, Ming-Wei Chang, Kenton Lee, and
Kristina Toutanova. 2018. Bert: Pre-training of deep
bidirectional transformers for language understand-
ing. arXiv preprint arXiv:1810.04805.

Tommaso Furlanello, Zachary C Lipton, Michael
Tschannen, Laurent Itti, and Anima Anandkumar.
2018. Born again neural networks. arXiv preprint
arXiv:1805.04770.

Jiatao Gu, James Bradbury, Caiming Xiong, Vic-
Non-
arXiv

tor OK Li, and Richard Socher. 2017.
autoregressive neural machine translation.
preprint arXiv:1711.02281.

Junliang Guo, Xu Tan, Di He, Tao Qin, Linli Xu, and
Tie-Yan Liu. 2019a. Non-autoregressive neural ma-
In
chine translation with enhanced decoder input.
Proceedings of the AAAI Conference on Artiﬁcial In-
telligence, volume 33, pages 3723–3730.

Tianyu He, Xu Tan, Yingce Xia, Di He, Tao Qin, Zhibo
Chen, and Tie-Yan Liu. 2018. Layer-wise coordi-
nation between encoder and decoder for neural ma-
In Advances in Neural Informa-
chine translation.
tion Processing Systems, pages 7944–7954.

Geoffrey Hinton, Oriol Vinyals, and Jeff Dean. 2015.
Distilling the knowledge in a neural network. arXiv
preprint arXiv:1503.02531.

Keith Ito. The lj speech dataset, 2017a. url ttps. kei-

thito. com/LJ-Speech-Dataset.

Shigeki Karita, Nanxin Chen, Tomoki Hayashi,
Takaaki Hori, Hirofumi
Inaguma, Ziyan Jiang,
Masao Someki, Nelson Enrique Yalta Soplin,
Ryuichi Yamamoto, Xiaofei Wang, et al. 2019. A
comparative study on transformer vs rnn in speech
applications. arXiv preprint arXiv:1909.06317.

Jason Lee, Elman Mansimov, and Kyunghyun Cho.
2018. Deterministic non-autoregressive neural se-
arXiv
quence modeling by iterative reﬁnement.
preprint arXiv:1802.06901.

Naihan Li, Shujie Liu, Yanqing Liu, Sheng Zhao, Ming
Liu, and M Zhou. 2019a. Neural speech synthesis
with transformer network. AAAI.

Yuncheng Li, Jianchao Yang, Yale Song, Liangliang
Cao, Jiebo Luo, and Li-Jia Li. 2017. Learning from
noisy labels with distillation. In ICCV, pages 1928–
1936.

Zhuohan Li, Zi Lin, Di He, Fei Tian, Tao Qin, Liwei
Wang, and Tie-Yan Liu. 2019b. Hint-based training
for non-autoregressive machine translation. arXiv
preprint arXiv:1909.06708.

Xiaodong Liu, Pengcheng He, Weizhu Chen, and
Jianfeng Gao. 2019a.
Improving multi-task deep
neural networks via knowledge distillation for
arXiv preprint
natural
arXiv:1904.09482.

language understanding.

Yuchen Liu, Hao Xiong, Zhongjun He, Jiajun Zhang,
Hua Wu, Haifeng Wang, and Chengqing Zong.
2019b. End-to-end speech translation with knowl-
edge distillation. arXiv preprint arXiv:1904.08075.

Aaron van den Oord, Yazhe Li, Igor Babuschkin, Karen
Simonyan, Oriol Vinyals, Koray Kavukcuoglu,
George van den Driessche, Edward Lockhart, Luis C
Parallel
Cobo, Florian Stimberg, et al. 2017.
wavenet: Fast high-ﬁdelity speech synthesis. arXiv
preprint arXiv:1711.10433.

Mary Phuong and Christoph Lampert. 2019.
To-
In In-
wards understanding knowledge distillation.
ternational Conference on Machine Learning, pages
5142–5151.

Junliang Guo, Xu Tan, Linli Xu, Tao Qin, Enhong
Chen, and Tie-Yan Liu. 2019b. Fine-tuning by cur-
riculum learning for non-autoregressive neural ma-
chine translation. arXiv preprint arXiv:1911.08717.

Ryan Prenger, Rafael Valle, and Bryan Catanzaro.
2019. Waveglow: A ﬂow-based generative net-
In ICASSP 2019-
work for speech synthesis.
2019 IEEE International Conference on Acoustics,

Speech and Signal Processing (ICASSP), pages
3617–3621. IEEE.

Yi Ren, Yangjun Ruan, Xu Tan, Tao Qin, Sheng Zhao,
Zhou Zhao, and Tie-Yan Liu. 2019. Fastspeech:
Fast, robust and controllable text to speech. arXiv
preprint arXiv:1905.09263.

Rico Sennrich, Barry Haddow, and Alexandra Birch.
2015. Neural machine translation of rare words with
subword units. arXiv preprint arXiv:1508.07909.

Jonathan Shen, Ruoming Pang, Ron J Weiss, Mike
Schuster, Navdeep Jaitly, Zongheng Yang, Zhifeng
Chen, Yu Zhang, Yuxuan Wang, Rj Skerrv-Ryan,
et al. 2018. Natural tts synthesis by condition-
ing wavenet on mel spectrogram predictions.
In
2018 IEEE International Conference on Acoustics,
Speech and Signal Processing (ICASSP), pages
4779–4783. IEEE.

Hao Sun, Xu Tan, Jun-Wei Gan, Hongzhi Liu, Sheng
Zhao, Tao Qin, and Tie-Yan Liu. 2019. Token-level
ensemble distillation for grapheme-to-phoneme con-
version. In INTERSPEECH.

Xu Tan, Yi Ren, Di He, Tao Qin, Zhou Zhao, and Tie-
Yan Liu. 2019. Multilingual neural machine trans-
lation with knowledge distillation. arXiv preprint
arXiv:1902.10461.

Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz
Kaiser, and Illia Polosukhin. 2017. Attention is all
you need. In Advances in Neural Information Pro-
cessing Systems, pages 5998–6008.

Yiren Wang, Fei Tian, Di He, Tao Qin, ChengXiang
Zhai, and Tie-Yan Liu. 2019. Non-autoregressive
machine translation with auxiliary regularization. In
AAAI.

Chenglin Yang, Lingxi Xie, Siyuan Qiao, and Alan
Yuille. 2018. Knowledge distillation in genera-
tions: More tolerant teachers educate better students.
arXiv preprint arXiv:1805.05551.

Li Yuan, Francis EH Tay, Guilin Li, Tao Wang,
and Jiashi Feng. 2019. Revisit knowledge distil-
lation: a teacher-free framework. arXiv preprint
arXiv:1909.11723.

Heiga Zen, Viet Dang, Rob Clark, Yu Zhang, Ron J
Weiss, Ye Jia, Zhifeng Chen, and Yonghui Wu. 2019.
Libritts: A corpus derived from librispeech for text-
to-speech. arXiv preprint arXiv:1904.02882.

Chunting Zhou, Graham Neubig, and Jiatao Gu.
2019. Understanding knowledge distillation in non-
autoregressive machine translation. arXiv preprint
arXiv:1911.02727.

Supplementary Material

1 Model Settings of NAR and AR

We show the model settings of NAR and AR in Table 5. The hyperpameters in pre-net follow the methods
in each task listed in Table 1 in the main part of the paper.

Transformer Hyperparameter NMT / NAT ASR / NAR-ASR TTS / FastSpeech
Embedding Dimension
Encoder Layers
Encoder Hidden
Encoder Filter Size
Encoder Heads
Decoder Layers
Decoder Hidden Size
Decoder Filter Size
Decoder Heads
Dropout
Batch Size
Base Learning Rate

512
6
512
1024
4
6
512
1024
4
0.2
64
1e-3

512
6
512
1024
4
6
512
1024
4
0.1
32
1e-3

512
6
512
1024
4
6
512
1024
4
0.2
32
1e-3

Table 5: Hyperparameters of transformer-based AR and NAR models.

2 Model Settings of CoMMA

We show the model settings of CoMMA in Table 6.

Name
Embedding Dimension
Encoder Layers
Encoder Hidden
Encoder Filter Size
Encoder Heads
Decoder Layers
Decoder Hidden Size
Decoder Filter Size
Decoder Heads
Dropout
Batch Size
Base Learning Rate

Hyperparameter
512
6
512
1024
4
6
512
1024
4
0.1
64
1e-3

Table 6: Hyperparameters of CoMMA.

