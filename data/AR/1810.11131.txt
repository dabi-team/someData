8
1
0
2

t
c
O
5
2

]

A
M

.
s
c
[

1
v
1
3
1
1
1
.
0
1
8
1
:
v
i
X
r
a

The Impact of Position Errors on Crowd
Simulation

Lei Zhang∗1, Diego Lai2, and Andriy V. Miranskyy†1

1Department of Computer Science, Ryerson University, Toronto, Canada
2Laipac Technology Inc., Toronto, Canada

Abstract

In large crowd events, there is always a potential possibility that
a stampede accident will occur. The accident may cause injuries or
even death. Approaches for controlling crowd ﬂows and predicting
dangerous congestion spots would be a boon to on-site authorities to
manage the crowd and to prevent fatal accidents. One of the most
popular approaches is real-time crowd simulation based on position
data from personal Global Positioning System (GPS) devices. How-
ever, the accuracy of spatial data varies for diﬀerent GPS devices, and
it is also aﬀected by an environment in which an event takes place.
In this paper, we would like to assess the eﬀect of position errors on
stampede prediction. We propose an Automatic Real-time dEtection
of Stampedes (ARES) method to predict stampedes for large events.
We implement three diﬀerent stampede assessment methods in Menge
framework and incorporate position errors. Our analysis suggests that
the probability of simulated stampede changes signiﬁcantly with the
increase of the magnitude of position errors, which cannot be elimi-
nated entirely with the help of classic techniques, such as the Kalman
ﬁlter. Thus, it is our position that novel stampede assessment methods
should be developed, focusing on the detection of position noise and
the elimination of its eﬀect.

∗Email address: leizhang@ryerson.ca
†Email address: avm@ryerson.ca

1

 
 
 
 
 
 
1 Introduction

In recent decades, the number of events where a stampede has occurred is
increasing, along with the number of people involved in such accidents. In
2014, 36 people were killed and 47 others were injured in a crush at New
Year’s Eve celebrations in Shanghai, China [4]; in 2015, at least 2,177 people
were crushed to death and 934 were injured at the annual Hajj in Saudi
Arabia [50]; in 2017, more than 1,500 soccer fans were injured in stampede
in Turin, Italy [52]; in the same year, at least 22 people were killed and
hundreds were injured in a stampede at Elphinstone road station in Mumbai,
India [51].

To prevent stampede accidents, the Saudi Ministry of Hajj has already
begun considering plans to give each pilgrim an electronic bracelet with in-
dividual identiﬁcation and Global Positioning System (GPS) [1]. Moreover,
the percentage of the population owning smartphones (having built-in GPS)
is increasing. The recent reports show that ten countries now have smart-
phone penetration1 greater than 70% [38], with the numbers growing each
year [45]. This will provide a technological foundation to enable the gather-
ing of locations of most of the people in the near future, even if no specialized
device (such as the electronic bracelet mentioned above) is present.

In recent years, many researches are leveraging data from GPS handheld
devices to prevent stampedes by providing early warning to authorities [60,
15, 68]. However, all GPS devices suﬀer from position errors. The main
GPS error source is due to the satellite synchronization [33]. Other errors
arise because of atmospheric disturbances that distort the signals before they
reach a receiver. Reﬂections from buildings and other large, solid objects
can lead to GPS accuracy problems too. To the best of our knowledge, the
literature is lacking the analysis of the impact of GPS noise on the prediction
of stampedes.

In this paper, we focus on quantifying the impact of GPS measurement er-
rors on stampede probabilities. The main contributions of this paper include:
(1) presentation of a stampede prediction solution by the incorporation of
three diﬀerent stampede assessment methods into a crowd simulator; (2) in-
troduction of a noise modeling technique in crowd simulation and evaluation
of the probability of simulated stampede with various position errors; and (3)
analysis of the impact of position errors on simulated stampede probabilities.

1That is the percentage of the people in the population that own a smartphone.

2

The remainder of this paper is constructed as follows: Section 2 reviews
the related work in crowd management, stampede assessment methods, and
crowd simulation. Section 3 describes our proposed solution, namely, how
we simulate stampede accidents and measure the position errors. Section 4
covers experimental results and analysis. Finally, Section 5 summarizes our
ﬁndings.

2 Related Work

Crowd management based on data from GPS handheld devices (e.g., smart-
phones, smartwatches, and personal ﬁtness trackers) has been widely studied.
Wirz et al. [60] adopted the crowd pressure technique to visualize this in-
formation as heat maps, oﬀered a global view of the crowd situation, and
assessed diﬀerent crowd conditions instantaneously throughout an event.
Franke et al. [15] implemented a smartphone based crowd management sys-
tem, which also uses a heat map representation of the crowd state and its
evolution. Zhou et al. [68] proposed a solution based on Baidu map and
developed a prediction model to perceive the crowd anomaly and to assess
the risk of the crowd event.

Besides GPS-based solutions, vision-based systems have also been devel-
oped to detect congestion spots and pedestrian behaviors. The accuracy
of vision-based systems can be aﬀected by three factors: camera coverage,
camera resolutions, and level of illumination [68, 25]. The existing computer
vision work focuses on real-time detection of the stampedes [24, 35, 26, 36,
69, 42, 43] rather than proactive prediction, making it complementary to our
goal. While the ﬁeld of computer vision is rapidly evolving, modern com-
puter vision methods have not perfected crowd analysis yet. For example,
they have diﬃculty tracking individuals in the crowd [24, 35]. The training
of a computer vision model for each camera has to be individualized [26].
The accuracy of the detection of anomalies ﬂuctuates for various methods,
e.g., going to as low as 57% [36], which may negatively aﬀect the accuracy
of stampede analysis. Last but not least, vision-based detection techniques
face privacy and security related issues [44] (which are conceptually similar to
those based on GPS trackers even though a diﬀerent technology is leveraged).
Recent research of anomaly detection in crowd focuses on developing deep
learning-based approaches, e.g., Convolutional Neural Networks (CNNs),
combined with video analysis [69, 42, 43]. However, they have not yet been

3

tested on high-density scenarios, which result in stampedes; so far the perfor-
mance of CNNs was benchmarked against the UCSD dataset [54], which fo-
cuses on sparse crowds with non-pedestrian anomalous objects (e.g., skaters,
biker, carts, and wheelchairs) and anomalous pedestrian patterns (e.g., a
pedestrian walking in opposite direction to other pedestrians). Conceptu-
ally, one may create a hybrid stampede detection system that would leverage
GPS trackers and video data feeds synergistically, improving the accuracy of
the stampede analysis [5].

Agent-based pedestrian crowd simulation is a well-known solution for
crowd management. Thus, a variety of simulation frameworks were proposed.
Almeida et al. [2] proposed a multi-agent framework to simulate emergency
evacuation scenarios. Curtis et al. [10] introduced an open-source, cross-
platform and agent-based crowd simulation framework—Menge. Mahmood
et al. [34] proposed an agent-based crowd simulation and analysis framework
and used a case study of Hajj as an example for the assessment of crowd
evacuation strategies.

To analyze the risk of stampedes, a number of stampede measuring tech-
niques were presented in the literature. Helbing et al. [20], Johansson et
al. [22] derived crowd pressure formulas (by analyzing video recordings of
the crowd disaster during the Hajj in 2006) and discovered crowd turbulence
phenomenon, in which physical contacts among people are transferred and
accumulated. People try to escape the crowd, which causes crowd panic.
Such phenomenon may trigger crowd disasters, such as stampedes. Lee
and Hughes [29] developed a crowd pressure measuring technique using the
standard forward-backward auto-regressive modeling approach. Elliott and
Smith [14] examined some sporting disasters and found the relationship be-
tween the accidents and the inter-person forces. Helbing et al. [19] introduced
social and physical forces among pedestrians and then treated each pedes-
trian as a particle abiding Newton’s laws. Lee and Hughes [28] studied the
relationship between crushing situation and people density, which gives the
typical threshold of people density of diﬀerent nationalities. However, none of
these work has taken into account the impact of GPS noise on the prediction
of stampedes.

Recent research has attempted to combine data from GPS and external
sensors to improve the tracking accuracy. Groves et al. [17] developed a posi-
tioning technique by integrating GPS and Wi-Fi data (to improve positioning
indoors) and accelerometers (to distinguish pedestrian behavior). Corbetta
et al. proposed an approach to utilize overhead Microsoft KinectTMdepth

4

sensors placed in a walkway to provide reliable automatic pedestrian posi-
tioning for tracking [9]. Suzuki et al. [48] proposed to use infrared cameras
to eliminate the multi-path errors which are caused by diﬀerent positioning
systems. Assisted-GPS (A-GPS) technique is also widely used to improve
the performance of GPS-enabled smartphones [56].
In general, combining
GPS, WiFi, and sensors data improves tracking accuracy indoors (see [47]
for review). Besides employing external sensors, various algorithms were de-
veloped to mitigate GPS measurement noise, e.g., the Kalman ﬁlter [13, 61]
and the autoregressive moving average ﬁlter [30].

As a rule of thumb, the accuracy of GPS can be hugely aﬀected by the
environment. The U.S. government claimed that GPS-enabled smartphones
are typically accurate to within 4.9 m; however, their accuracy worsens near
buildings or other obstacles [39]. Zandbergen and Barbeau’s research showed
that the horizontal error of GPS-enabled smartphones ranges from 5.0 m to
8.5 m [64]. In 2015, Garnett and Stewart tested two personal GPS devices
and two GPS-enabled mobile devices, and they found that the mean relative
accuracy ranges from 3.65 m to 6.50 m [16].

3 The ARES method

In this paper, we propose a simulation-based method to predict a stampede
during large crowd events. The name of the method is ARES, which stands
for Automatic Real-time dEtection of Stampedes. In ARES, we assume that
the venue map is provided before the event, and we can collect all pedestrian
locations via personal GPS devices during the event. We call pedestrians
with wearable GPS devices agents. The word agent is used interchangeably
with pedestrian in this paper. The method employs simulation to monitor
pedestrians’ behavior and measure possible stampede accidents. In case of a
potential stampede, on-site authorities will be notiﬁed by an alert message,
so that the authorities can intervene proactively and prevent the stampede
from occurring.

The key idea of ARES is to run the simulation and estimate the prob-
ability of a future stampede ahead of time. In reality, agent locations are
collected in a discrete time manner to preserve GPS power. The interval
between two GPS data collection points is denoted by T . During this time
interval, GPS locations are unknown. Thus, we use the latest GPS loca-
tions as starting positions and simulate agents’ trajectories for the interval

5

T . To mitigate the uncertainty, we employ Monte Carlo method in simula-
tions to calculate the stampede probabilities. We run simulations in parallel
on a computing platform fast enough (e.g., a computer cluster) to ensure
simulation completion time K is less than T . Once the stampede probabil-
ity is calculated, the result (including position information) is sent to the
authorities, if necessary.

Figure 1: ARES steps to detect stampede accidents in large crowd events.

Figure 1 outlines the major steps of ARES. The details of the steps are

as follows.

1. Collect agents’ current locations and velocities. In the beginning
of each interval T , we collect all agents’ locations and velocities in the
ﬁeld. The locations and velocities are measured in the global coordinate
system.

6

2. Convert agents’ locations and velocities to the local coordi-
nate system. Agents’ longitude and latitude coordinates would be
converted to local coordinates, which are relative locations in the venue
In addition, agents’ velocities in the global coordinate system
map.
would also be converted to the ones in the local coordinate system.

3. Run the simulation with a pedestrian model and a stampede
assessment method. Agents’ locations and velocities from Steps 2
are input parameters for the pedestrian model. We employ Monte Carlo
method to run simulations and execute M simulations in parallel using
GNU parallel [49] (other parallelization techniques can be used as well).
This is done to ensure that K < T and the time diﬀerence is suﬃcient
for on-site authorities to respond.

4. Compute simulated stampede probabilities. Each realization of
simulation reports if a stampede has happened or not. After all the
simulations complete, we calculate the expected value of the simulated
stampede probability p based on the Law of Large Numbers.

5. Send alerts to on-site authorities if necessary. If the value of p
exceeds a threshold, an alert message can be sent out to notify on-site
authorities, so that they could control the crowd near the speciﬁc spot.

6. Repeat the above steps once a new batch of locations and ve-
locities data comes in. Once a new batch of locations and velocities
data has been collected after interval T , we repeat the procedure from
Step 1 to Step 5.

There are two important assumptions in ARES. First, we assume that
each pedestrian has a wearable GPS device. This assumption is reasonable
as mentioned in Section 1. Second, we assume that we know each agent’s
next destination based on the current state in the simulation. We believe
that this is also a reasonable assumption in many cases. For instance, we
know that pilgrims will stop and throw pebbles at three pillars on Jamarat
bridge during Hajj, and soccer fans will move towards the nearest exit (or
the one that they came in) to leave a stadium.

7

3.1 Simulation framework

We employ Menge [10] as our crowd simulation framework. Menge has two
built-in pedestrian models: ORCA and PedVO. The former is based on the
Optimal Reciprocal Collision Avoidance (ORCA) algorithm [55], and the lat-
ter is based on the Pedestrian Velocity Obstacle (PedVO) model [11]. As a
successor to the ORCA model, PedVO preserves ORCA’s geometric opti-
mization technique and introduces a self-adaptive velocity technique by em-
ploying the fundamental diagram—the phenomenon that pedestrian speed
reduces as density increases. The PedVO model captures both physiologi-
cal and psychological factors that give rise to the fundamental diagram. It
computes a collision-free velocity for each pedestrian based on a preferred
velocity and its local neighborhood (i.e., other pedestrians and obstacles).

In our work, we choose PedVO to simulate pedestrians’ behavior, but
others may choose the most suitable pedestrian model (e.g., ORCA or Jo-
hansson et al.’s model [23]) to address their cases. The default parameters
of the PedVO model in Menge are as follows: agents are represented as
ﬁlled circles with radius equals 0.19 m [32], agents’ preferred velocity equals
1.04 m/s [8]. Note that the default preferred velocity is lower than the av-
erage preferred walking speed—1.4 m/s [7]. However, this setup is adequate
for a crowd of people in a pilgrimage setting. The PedVO model uses the
preferred velocity to compute an actual velocity based on the surroundings
(the maximum velocity is 2 m/s [65]). The maximum acceleration rate is
5 m/s2 [3]. Other calibration parameters of PedVO can be found in B. Note
that these values may be adjusted if necessary (other reasonable values of
the parameters are discussed in [12]).

To simulate a representative crowd congestion scenario, we build a simpli-
ﬁed venue map of the Jamarat bridge based on the map in the supplementary
material of Helbing et al.’s work [21]. The Jamarat bridge is the place where
the stampede happened during Hajj in 2006. A simulated scene on the map
can be seen in Fig. 2.

3.2 Stampede assessment methods

We extend Menge with three stampede assessment methods. The three
threshold-based stampede assessment methods that we employ are crowd
pressure method [20], physical force method [14, 19], and density method [28].
Details of these methods are given below.

8

Figure 2: Simulation venue map. A set of emulated agents are generated on
the right ramp (in a rectangular grid), and they are moving towards the left
in the venue. The width of the ramps is 22 m, and the width of the bridge is
44 m. The three obstacles simulate the three pillars on the Jamarat bridge
where pilgrims throw stones. Agents stop at each pillar for an average of
60 simulation time units (i.e., 60 s in our simulation), and they get oﬀ the
bridge after that. Note that this venue is smaller than the actual Jamarat
bridge, but it is suﬃcient to illustrate the concept.

3.2.1 Crowd pressure method

As crowd density reaches a certain dangerous level (typically seven or eight
people per square metre [20]), the physical contacts transfer and accumu-
late among the crowd, and individual motion gets replaced by mass motion.
When the pressure becomes too large, the mass splits up into diﬀerent clus-
ters, which causes strong variations of local strengths and velocities. This
can lead to sudden and uncontrolled pressure release. Such a phenomenon is
referred to as crowd turbulence. Crowd turbulence is observed by analyzing
video recordings of the crowd disaster during the Hajj in 2006 [20]. People
try to escape such a situation; therefore, they push each other. This is called
crowd panic as per [20]2. The crowd panic introduces extra power into the
compressed crowd. Eventually, stampede accidents occur when a signiﬁcant
amount of power accumulates and then releases.

Both crowd turbulence and stampede accident can be quantiﬁed by crowd

2Note that a stampede may also occur in the absence of panic.

9

pressure (which is diﬀerent from physical pressure). Crowd pressure is deﬁned
as local density times the local velocity variance [20].

Formally, the local density at a given place (cid:126)r = (x, y) and time t is deﬁned

as

ρ((cid:126)r, t) = (cid:88)

f

(cid:16)
(cid:126)rj(t) − (cid:126)r

(cid:17)
,

j

(1)

where (cid:126)rj(t) is the position of pedestrian j in the surrounding of (cid:126)r at time t,
and f

is a Gaussian distance-dependent weight function

(cid:16)
(cid:126)rj(t) − (cid:126)r

(cid:17)

(cid:16)
(cid:126)rj(t) − (cid:126)r

(cid:17)

f

=

1
πR2 exp

(cid:104)

−(cid:107)(cid:126)rj(t) − (cid:126)r(cid:107)2/R2(cid:105)

,

(2)

where R deﬁnes the radius of the local measured area. The local velocity at
position (cid:126)r and time t is deﬁned as

(cid:126)V ((cid:126)r, t) =

(cid:80)

(cid:16)
(cid:126)rj(t) − (cid:126)r

j (cid:126)vjf
(cid:16)
(cid:80)
(cid:126)rj(t) − (cid:126)r

j f

(cid:17)
(cid:17) ,

(3)

where (cid:126)vj is the velocity of of pedestrian j in the surrounding of (cid:126)r at time t.
Then, we can determine the local crowd pressure based on Eqs. (1) and (3)
as

P ((cid:126)r, t) = ρ((cid:126)r, t) · Var(cid:126)r,t((cid:126)V ),
(4)
where Var(cid:126)r,t((cid:126)V ) is the local velocity variance at time t, and its value is cal-
culated by Var(cid:126)r,t((cid:126)V ) = (cid:104)[V ((cid:126)r, t) − (cid:104)V (cid:105)(cid:126)r]2(cid:105)(cid:126)r, where (cid:104)V (cid:105)(cid:126)r is the average local
velocity over the circular area centered in (cid:126)r and with radius R. Accord-
ing to [20], crowd turbulence starts when the pressure reaches 0.02 s−2, and
stampede starts when the pressure reaches 0.04 s−2.

3.2.2 Physical force method

The second stampede assessment method is based on physical force [14, 19].
The idea is that physical interactions in jammed crowds add up and can lead
to dangerous consequences.
In simulations, we monitor the physical force
among agents, and set a threshold for the force. A stampede is measured if
any monitored physical force exceeds the threshold. Pure force function is
deﬁned by Newton’s second law, F = m · a, where m is the mass, and a is
the acceleration. Based on the research in [14, 19], 4500 N is the force that,

10

on average, may cause an adult to fall on the ground, potentially causing
stampede accidents.

For parameterization, we set m to follow a normal distribution with mean
value of 70 kg (which is a typical weight of adults in Europe [57]) and standard
deviation of 10 kg [27]. We set the minimum value of m to 50 kg, and the
maximum value of m to 100 kg. Note that these values can be adjusted
according to diﬀerent nationalities and occasions. The value of a can be
calculated by

a =

(cid:126)v(t + ∆t) − (cid:126)v(t)
∆t

,

(5)

where ∆t is the change in time, and (cid:126)v(t) is the velocity at time t.

3.2.3 Density method

Our last stampede assessment method is based on a local density thresh-
old. Lee and Hughes [28] found the correlation between crowds involving
stampede accidents and crowd density. Typical stampede accidents involve
a large number of pedestrians, which is generally about seven or eight pedes-
trians per square metre (possibly up to 13 pedestrians per square metre).
The maximum observable densities are naturally dependent on diﬀerent na-
tionalities [28].

Figure 3: A stampede is observed in the density method. The white ﬁlled
circle is the agent whose neighbors exceed the threshold—22, and the neigh-
bors are within the unﬁlled circle with R = 1 m. All the information about
the agent and its neighborhood can be seen in the left part of the ﬁgure.

11

Compared to the local density calculation (which is an estimate) in the
crowd pressure method, we employ a classical density estimation. We moni-
tor the number of neighbors (local density) for each agent during simulations,
and set a threshold for the local density, which is calculated as D = L/(πR2),
where L is the number of neighbors within the area where the radius is R.
In our experiments, we set the density threshold to seven agents per square
metre as per [28]. A stampede is measured if any local density exceeds this
threshold.

Figure 3 shows a scenario where a stampede is detected with the density
threshold. In this case, we have L = 22 agents and R = 1 m. Thus, D ≈ 7.01
m−2. In our experiments, the maximum density that we observed is 29 agents
within the radius of one metre, i.e., D ≈ 9.24 m−2.

In this method, the density calculation does not take into account the ob-
stacles (i.e., pillars and walls). We conjecture that if we took obstacles into
account (when computing local densities), the simulated stampede probabili-
ties might increase, making the estimates more sensitive (i.e., increasing false
positive error rate). As the coordinates of agents and obstacles are known,
one may create an algorithm to estimate the impact of obstacles on the local
densities.

In the literature, there exist various approaches to estimate local or global
densities [35, 46, 53], but they are not applicable to our experiments. A
fractal-based image processing technique was proposed to estimate crowd
density in [35]. The work of [46] focused on estimating global density rather
than local density. The method in [53] can be used to estimate local density,
but it is not applicable to our setup, because it assumes that local densities
are homogeneous (which is violated in our case). These methods cannot be
directly applied to our case, but they can be extended to take into consider-
ation only the accessible areas. For example, we know all the coordinates of
obstacles and agents in our case study, and we can remove inaccessible ar-
eas from the density estimators. Because the standard approach is suﬃcient
for the density estimation, we leave the research of obstacle-aware density
estimation to future work.

3.3 Noise modeling

Now, we introduce the noise modeling technique in crowd simulation.
In
real world, personal GPS devices often report locations with certain amount
of errors. These errors include horizontal distance errors, vertical distance

12

errors, and velocity errors. In this paper, we only consider horizontal errors
as our map is two-dimensional. Velocity errors may have impact on the
two velocity-dependent measurements, i.e., the crowd pressure method and
the physical force method; however, these errors will not aﬀect the density
method (which is velocity independent). More importantly, it was shown that
velocity errors are negligible3 compared to distance errors: velocity errors are
in the order of centimetres while distance errors are in the order of metres [58].
Therefore, we chose to ignore the velocity error.

The empirical distribution of latitude and longitude errors is very simi-
lar to normal distribution [63, 66]. Consequently, the GPS horizontal error,
which is geometric sum of these two errors, is very similar to Rayleigh dis-
tribution [40]. The Cumulative Distribution Function (CDF) for Rayleigh
distribution is:

P (Z ≤ z) = 1 − exp

−

(cid:32)

(cid:33)

z2
E2

, E > 0,

(6)

where z is the distance error, and E is the root-mean-squared distance error.
Finally, we could use Eq. (6) to generate random errors z to add to the
starting true positions of agents in the simulation. This simulates the sce-
nario where the real-time simulation starts with GPS position errors.
In
our simulations, we vary the values of E from zero to ten metres to test
the vulnerability of the stampede assessment method. As mentioned earlier,
Zandbergen and Barbeau’s research shows that the positional error of smart-
phones ranges from ﬁve to eight metres [64]. Wilson’s tests on personal GPS
devices suggest a similar estimate [59]. Thus, we believe that it is reasonable
to set the range of the values of E as zero to ten metres, so that we could
cover most of the cases. Note that in the case when E = 0, we use the actual
starting positions of the agents; thus, we do not need to use Eq. (6) in this
case.

Figure 4 shows an example, where agents’ starting positions have no noise
added (E = 0). Figures 5 and 6 show two examples, where noise is added to
starting positions. The values of noise are drawn from the Rayleigh distri-
bution as per Eq. (6) with E = 5 and 10 m, respectively. As can be seen in

3The velocity estimate can achieve the accuracy of centimeters per second by using
Doppler frequency shifts of the received signal produced by user-satellite motion [41].
In GPS applications, improved performance is achieved by processing diﬀerences of con-
secutive carrier phase measurements, which are better than the “raw” Doppler measure-
ments [41].

13

Figure 4: Starting positions with E = 0 m.

Figure 5: Starting positions with E = 5 m.

Figs. 5 and 6, some agents are shifted outside of the bridge due to the errors.
We deliberately choose not to alter agents’ behavior in such simulations to
assess the eﬀect of the spread in simulated stampede probabilities (further
discussion can be found in Section 4.1).

3.4 Simulated stampede probabilities

To estimate the simulated stampede probabilities and the impact of posi-
tion errors, we employ Monte Carlo method. Given probabilistic nature of

14

Figure 6: Starting positions with E = 10 m.

Menge simulation, every realization of the trajectories of agents from start
to ﬁnish will be diﬀerent. By the Law of Large Numbers, once we have suf-
ﬁcient number of realizations of the trajectories, we will be able to compute
the expected value of the probability of simulated stampede along with the
conﬁdence interval for the expected value.

Every realization of the simulation will report if a stampede has occurred
in a given run or not. Let us denote the outcome of the simulation by the
indicator variable I, and the total number of realizations is n. If a stampede
occurred in a given realization, I will be equal to one, otherwise—to zero.
Then, the expected value of the probability of simulated stampede p is given
by

p =

(cid:80)n

j=1 Ij
n

.

The 95% conﬁdence interval of this expected value is

≈ [p + 1.96σ/

√

n, p − 1.96σ/

√

n],

where σ is the standard deviation of the realizations of I.

(7)

(8)

3.5 Discussion

As discussed in Section 2, there exists a large number of stampede assessment
methods. For this study, we chose three of these methods. The design of this
study is based on the concept of the critical case [62]. That is, the selected

15

models are representative instances of the stampede assessment methods.
While we cannot generalize these results to other methods, the fact that
these models are all aﬀected by the measurement error suggests that other
models may be aﬀected as well. The same experimental examination can
also be applied to other stamped prediction models and methods with well-
designed and controlled experiments.

The GPS accuracy can be improved using various techniques, e.g., A-
GPS, accelerometers, the Kalman ﬁlter, and the moving average ﬁlter (as
discussed in Section 2). However, the resulting accuracy of the measurements
will not be perfect. To illustrate this, we evaluate the performance of the
standard Kalman ﬁlter applied to the noisy coordinates of the agents. We
chose this particular ﬁlter, as it has been used for decades to eliminate GPS
position noise [6].

Details of the analysis are given in A. In short, we observe that the stan-
dard Kalman ﬁlter reduces the noise signiﬁcantly when an agent is following
a monotonic trajectory (which has been observed in the past [37]). However,
the ﬁlter has diﬃculty in detecting an abrupt change in the direction or ve-
locity of the move, which replaces random error with systemic error [18]. We
also show that, when applied to a set of agents, the average position error
(after application of the Kalman ﬁlter) ranges from 2.6 to 3.0 m. Moreover,
the Kalman ﬁlter ampliﬁes noise when the position errors are small, mak-
ing it impractical for such a case. To conclude, the error after the adoption
of the Kalman ﬁlter is still signiﬁcant and may aﬀect model performance.
Therefore, let us explore how the noise aﬀect the performance of the models.

4 Experimental results

We set up a testbed on our server, which has Ubuntu (4.4.0-103-generic)
system, 56 CPUs, and 512 GB memory. We run simulations in the scene
given in Fig. 2; we use GNU parallel [49] to parallelize the simulations. We
vary the values of the root-mean-squared distance error (E) and the number
of agents (N ), choose a suﬃcient number for repeated realizations (in our
case, n = 1000), and calculate the expected value of probabilities (p), as well
as the 95% conﬁdence interval (C) as follows.

1. For E = 0, 1, 2, . . . , 10 m and N = 1, 5, 10, . . . , 10240 (N increases by
a factor of two, starting from N = 5), repeat 1000 simulations with

16

the same set of {E, N }. For each simulation, return one if stampede
occurs; otherwise, return zero.

2. Upon the completion of simulations with one set of {E, N }, compute

p and C using Eqs. (7) and (8), respectively.

The pseudocode of this process is shown in Algorithm 1.

Algorithm 1 Pseudocode to execute the simulation
Input: E, N
Output: p, C

(cid:46) iterate over R if needed

Run simulation for a given value of E and N
if stampede occurs then

i ← 1
repeat

for E = 0, 1, . . . , 10 do

for N = 1, 5, 10, . . . , 10240 do

1: for each stampede assessment method do
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17: end for

Return 1

Return 0

end for

end for

else

end if
i ← i + 1
until i > 1000
Compute p and C using Eqs. (7) and (8)

4.1 Crowd pressure method

Experimental results of simulated stampede probabilities from the crowd
pressure method are shown in Fig. 7. In this method, the values of the crowd
pressure depend on the choice of R in Eq. (2). Figures 7a, 7b, 7c, and 7d
represent the simulated stampede probabilities when R = 1, 2, 3, and 4 m,
respectively. The threshold of the pressure is set to 0.04 s−2; if we detect
a value of the pressure above the threshold—we record a stampede. In the

17

(a) R = 1 m

(b) R = 2 m

(c) R = 3 m

(d) R = 4 m

Figure 7: Stampede probabilities in the pressure method. Three-dimensional
bar graph of (N, E, p)-tuples. Stampede probabilities with (a) R = 1 m, (b)
R = 2 m, (c) R = 3 m, and (d) R = 4 m.

experiments, we test the sensitivity of this metric to the changes of R and
N . From Fig. 7, we have four observations as follows.

• The crowd pressure method is very sensitive when R = 1 m. It gener-
ates false positive errors when the number of agents is relatively small:
even with 20 agents, the crowd pressure method provides stampede
prediction with p = 1 (almost surely).

• The crowd pressure method becomes less sensitive when R increases:
the greater the R—the closer the local density ρ to the average of the
global density. As R grows large enough to cover the whole area which

18

includes all the agents, all local densities will result in the same value,
which corresponds to the overall number of agents divided by the area.

• When the values of R and E are ﬁxed, the value of p tends to in-
crease with the growth of N . However, this is not always the case (as
shown in Figs. 7c and 7d). The underlying reason is that the pedestrian
model—PedVO—uses the fundamental diagram to model the correla-
tion between velocities and surroundings. Less neighbors means higher
velocities in the beginning of simulations. Consequently, agents may
have to change velocities dramatically when facing the pillars. As a
result, the variance of local velocity in Eq. (4) increases. Experiments
with diﬀerent distributions of agents’ starting positions have been done
(but not presented here to avoid repetition), where the p value can in-
crease with the value of N monotonically.

• Position errors may aﬀect the p values, especially when 0 < p < 1. The
impact of position errors could be positive or negative. For example,
in Fig. 7c, increased position errors decrease the simulated stampede
probability when N = 40. However, the p value rises and then drops
with the growth of E when N = 80. The reason that the p value
decreases, when E increases from seven to ten, is that the crowd is
spread out when the position errors are introduced (as shown in Figs. 5
and 6). Thus, physical contacts among agents are generally small when
E is large. However, the spreading-out positions may randomly gen-
erate some “hot zones”, and this explains why the p value increases in
some cases mentioned above.

To estimate the conﬁdence intervals of simulated stampede probabilities
in the crowd pressure method, we show the conﬁdence intervals calculated
by Eq. (8) with R = 1, 2, 3, and 4 m in Fig. 8. To improve comprehension of
the plots, we choose three representative values of E; namely, E = 0, 5, and
10 m. Besides the observations from Fig. 7, we have two new observations
from Fig. 8 as follows.

• The conﬁdence interval is relatively narrow, which means that the sam-
pling size of the method is reasonable and the estimated stampede prob-
abilities are precise. In other words, we are conﬁdent that we would
get a similar result when re-running the simulations.

19

(a) R = 1 m

(b) R = 2 m

(c) R = 3 m

(d) R = 4 m

Figure 8: Simulated stampede probabilities with conﬁdence levels in the
crowd pressure method. Two-dimensional line plots of simulated stampede
probabilities (p) and conﬁdence levels (C). Values of p are presented in
dots connected by lines, while values of C are presented in bars around the
corresponding values of p. Plots of E = 0 m are in blue, plots of E = 5 m
are in red, and plots of E = 10 m are in yellow. The values of p and C with
(a) R = 1 m and N = 1, . . . , 40, (b) R = 2 m and N = 1, . . . , 80, (c) R = 3
m and N = 1, . . . , 320, (d) R = 4 m and N = 1, . . . , 10240.

• Generally speaking, the larger the position errors we observe, the less
accurate the estimated stampede probabilities are. For example, the
two curves of E = 0 m and E = 5 m are close to each other in Fig. 8a,
while the curve of E = 10 m departs from them.

20

4.2 Physical force method

(a) Force method

(b) Force method

Figure 9: Simulated stampede probabilities and the corresponding conﬁdence
levels in the physical force method. (a) Simulated stampede probabilities of
the physical force method in three-dimensional bar graph of (N, E, p)-tuples.
(b) Values of p and C of the physical force method in two-dimensional line
plot.

Let us now present the experimental results for the physical force method.
Note that unlike the previous method, it does not need to set the R. In this
method, the threshold is 4500 N. The simulated stampede probabilities can
be seen in Fig. 9a. We also plot the simulated stampede probabilities and
conﬁdence intervals for the physical force method in Fig. 9b. The ﬁgures
suggest the following.

• The physical force method is very sensitive to the values of N in the
simulations. The simulated stampede probabilities reach around 0.45
when N = 40.

• The position errors aﬀect the simulated stampede probabilities of the

physical force method, especially when N = 20.

• The conﬁdence intervals are narrow, which indicates that the expected
stampede probabilities would be consistent with repetitive simulations.

21

(a) R = 1 m

(b) R = 1.5 m

(c) R = 1 m

(d) R = 1.5 m

Figure 10: Simulated stampede probabilities and the corresponding conﬁ-
dence levels in the density method. (a) Simulated stampede probabilities
of the density method with R = 1 m in three-dimensional bar graph of
(N, E, p)-tuples. (b) Simulated stampede probabilities of the density method
with R = 1.5 m in three-dimensional bar graph. (c) Values of p and C of the
density method with R = 1 m in two-dimensional line plot. (d) Values of p
and C of the density method with R = 1.5 m in two-dimensional line plot.

4.3 Density method

Results for estimation of p using the density method are given in Fig. 10.
We vary the value of R, setting it to 1 m and 1.5 m to adjust the method’s
sensitivity (as was discussed in Section 4.1). The threshold of density is set
to about 7 m−2. Examining Fig. 10 suggests the following.

22

• The larger the value of R—the less sensitive the density method.

• Similar to the results in Fig. 7, the position errors may aﬀect the value
of p. For example, Figure 10a suggests that the number of agents N is
equal to 320, the p value varies from 8% to 32.7% for diﬀerent values
of E.

• As for the other models, the conﬁdence intervals are narrow, indicating

high precision and reproducibility of the simulations.

4.4 Comparison

Comparing all three stampede assessment methods, we can arrive at the
following conclusions.

• All the three stampede assessment methods can be largely aﬀected by
changes to their corresponding thresholds, i.e., p = 0.04 s−2 for the
crowd pressure method, N = 4500 N for the physical force method,
and D ≈ 7 m−2 for the density method. Moreover, the results of the
crowd pressure method and the density method can be aﬀected by
changing to the value of R.

• The simulated stampede probabilities p can be aﬀected by position er-
rors (especially in the crowd pressure method and the density method)
if the number of agents is not very small or very large. In the former
case p = 0 and in the latter p = 1, almost certainly.

• In general, the value of p increases with the number of agents.

• In all the experiments, the conﬁdence intervals are narrow, suggesting

high precision and reproducibility of the simulations.

To sum up, the results of the stampede prediction can be aﬀected by the
position errors E, as well as some input parameters for stampede assessments,
e.g., R. Thus, these factors need to be taken into account when implementing
stampede measuring techniques. A practitioner can calibrate and validate
the model with the empirical data gathered from the agents.

23

5 Conclusions and future work

To conclude, in this work we analyze the impact of position errors on the ac-
curacy and precision of stampede prediction. To achieve this goal, we propose
an automatic real-time method, called ARES, for stampede prediction. We
implement a prototype of ARES using Menge simulation framework. Then,
we add position errors to three diﬀerent stampede assessment methods. We
compute the corresponding probabilities of the simulated stampede and com-
pare those results. Finally, we analyze the impact of position errors. Exper-
imental results show that the position errors can change the probability of
simulated stampede signiﬁcantly, even when noise reduction technique, such
as the standard Kalman ﬁlter, is applied. This implies that analysis of the
impact of position errors on crowd simulation is crucial, especially when the
GPS signal interference is pronounced. Thus, we argue that more research
is needed to take position errors into account when dealing with stampede
assessments. The results in this paper can be seen as a starting point to
control the position errors in stampede assessments. Future research will
focus on exploring potential approaches for mitigating position errors as well
as exploring the distributions of position errors from hybrid sources of data
(e.g., video cameras and GPS) into this framework, to improve the accuracy
of the solution for stampede prediction.

Acknowledgements

The work reported in this paper is supported and funded by Ontario Centres
of Excellence, Natural Sciences and Engineering Research Council of Canada,
and Laipac Technology Inc. We would like to thank Sheik Hoque for per-
forming initial tests on Menge. Last but not least, we would also like to
thank the editor and the anonymous reviewers for their valuable suggestions
and comments that improved the quality of this paper.

Availability of data

Datasets of experimental results are available on Mendeley Data [67] via
http://dx.doi.org/10.17632/tz7gmrzffh.1

24

A Noise reduction using Kalman ﬁlter

In order to test if the Kalman ﬁlter could improve the tracking accuracy, we
apply a standard Kalman ﬁlter to our simulations. The venue map is the
same as shown in Fig. 2, and the pedestrian model is the same as described
in Section 3.1. We compare ﬁltered estimates to noisy positions (which corre-
spond to measured positions of GPS devices) and true positions. In our case,
the state vector of the Kalman ﬁlter is (xi,s, yi,s, vx
i,s), where (xi,s, yi,s) is
the coordinate of agent i at time s, and (vx
i,s) is the velocity vector of
agent i at time s.

i,s, vy

i,s, vy

We explore the performance of the Kalman ﬁlter in the analysis of a set
of agents in A.1 followed by the analysis of two individual agents in A.2. We
summarize our ﬁndings in A.3.

Algorithm 2 Pseudocode to estimate performance of the standard Kalman
Filter
Input: N, S, E
Output: MAE, KDE

1: Simulate and store true positions for each agent at every step, while

N = 10240 and S = 150
2: for E = 0, 1, . . . , 10 do
3:
4:
5:

for each agent do

Add noise to the position at each step
Feed these noisy positions to the Kalman ﬁlter and estimate the

coordinate at the last step

6:

Compute the error of the noisy (measured) position and the error

of the estimated position by comparing to the true position

end for
Compute the MAEs and plot the KDEs

7:
8:
9: end for

A.1 Estimation of positions for a set of agents

To explore behaviour of a set of agents, we perform the following set of
experiments summarized by the pseudocode in Algorithm 2. Details of the
experiments are given below.

25

We set the number of agents to N = 10240 and the simulation time
horizon, deemed S, to S = 150 s. Each simulation step takes 0.1 s, which
means that each agent has 1500 simulation steps. For each agent, we collect
and save the position and velocity in each simulation step. We choose 1500
simulation steps, because 1) it provides suﬃcient prior observations for the
Kalman ﬁlter, and 2) it spreads agents over the bridge in the end of the
simulation (some agents have already left the bridge while others have just
reached the ﬁrst pillar).

Once the simulation is complete, we perform ten experiments (described
below), repeated for ten values of E = 1, 2, . . . , 10 m. For each value of E, we
take the actual positions of the agents and add the noise to the coordinates.
The noise is drawn from the Rayleigh distribution (see Eq. (6), where the
amount of noise is controlled by the value of E. The velocities are kept
accurate. We then apply the standard Kalman ﬁlter to the noisy trajectories
(and true velocities) of each agent to estimate the ﬁnal position of each agent
at the last step (i.e., when S = 150 s).

After that, for each agent, we compute the absolute errors 1) between the
actual and the noisy position at the last step, deemed measured error and 2)
between the actual and the estimated (by the Kalman ﬁlter) position at the
last step, deemed estimated error.

E Estimated error Measured error
0.89
2.68
1
1.76
2.71
2
2.66
2.74
3
3.59
2.77
4
4.44
2.80
5
5.30
2.83
6
6.23
2.86
7
7.19
2.90
8
8.00
2.93
9
8.83
2.96
10

Table 1: MAEs of measured and estimated errors for E = 1, 2, . . . , 10 m.
The MAEs are measured in metres.

Finally, we compute the mean absolute errors (MAEs), shown in Table 1.
We also plot kernel density estimates (KDEs) of the measured and estimated

26

(a) E = 1 m

(b) E = 4 m

(c) E = 7 m

(d) E = 10 m

Figure 11: KDEs with E = 1, 4, 7, and 10 m. The x-axis represents the
distance errors in metres, and the y-axis represents the probability density.
The rose shaded area represents the KDEs of the Kalman ﬁlter estimates,
and the mint shaded area represents the KDEs of the noisy positions.

errors. To preserve space, in Figure 11, we show KDEs for four representative
values of E, namely, E ∈ {1, 4, 7, 10}.

To compute MAEs, we calculate Euclidean distance errors for each agent’s
ﬁnal coordinates and then compute the average of the Euclidean distances
of all the agents. Table 1 shows the MAEs estimated by the Kalman ﬁlter
as well as the amount of error added to the actual coordinates. The Kalman
ﬁlter yields an error, ranging, on average, between 2.6 and 3.0 m. The amount
of the estimated error increases monotonically with the growth of E. As was
shown in Figs. 7, 9, and 10, the stampede probabilities will be aﬀected by
this amount of noise.

The measured error is smaller than the one yielded by the Kalman ﬁlter
when E < 4 m. Essentially, one should not apply the Kalman ﬁlter when
E < 4 m, as it will decrease the accuracy of the estimated coordinates. It

27

may be beneﬁcial to use the ﬁlter when E ≥ 4 m. However, an error of ≈ 3
m may lead to signiﬁcant variation in the positions of the agents relative
to each other, reducing the performance of the stampede prediction models.
Moreover, KDEs plotted in Figure 11 exhibit heavy right tails: while an
average error is ≈ 3 m, some agents will have a position error greater than
20 m.

A.2 Estimation of positions for two individual agents

Why the Kalman ﬁlter cannot reduce the MAE below ≈ 3 m (as shown
in Table 1)? It has been observed in the past that the Kalman ﬁlter has
diﬃculty detecting non-monotonic trajectories [18]. We conjecture that the
ﬁlter faces this challenge in our experiments too. Too support this conjecture,
let us take a look at the trajectories of two agents from 10240 agents that we
simulated in A.1. We then add noise to the trajectories of the agents using
Eq. (6) and the setting E = 1 m. These trajectories are shown in Fig. 12.

In Fig. 12a, the agent is slowly approaching the ﬁrst pillar (moving from
right to left), because a lot of agents (which are in front of this agent) block
the agent’s path. We can see that the agent’s trajectory is monotone. In ad-
dition, the trajectory estimated by the Kalman ﬁlter and the true trajectory
starts overlapping from the coordinate around (180, -9.5).

However, the Kalman ﬁlter fails to detect abrupt state changes in agent’s
trajectory; Figure 12b depicts such a case. The agent (while moving from
right to left) stops around the ﬁrst two pillars near the coordinates (-10, -6)
and (-30, -6) (changing the velocity). The ﬁlter has diﬃculty detecting this
change and predicts that the agent keeps moving in a straight line. The agent
also changes the direction near the ﬁrst pillar, which the ﬁlter also does not
detect. Thus, the estimates of the Kalman ﬁlter have noticeable distances
from the true trajectory.

A.3 Summary

To conclude, the standard Kalman ﬁlter may help to improve the positional
accuracy of GPS when the position errors are high (E ≥ 4 m). However,
the stampede probabilities will still be aﬀected by the amount of position
error (≈ 3 m) retained by the ﬁlter. This level of noise may be explained
by the diﬃculty the ﬁlter exhibits while dealing with changing movement
patterns. To address this limitation, possible solutions have been proposed

28

(a) An agent is slowly approaching the ﬁrst pillar.

(b) An agent stopped at the ﬁrst two pillars, and is approaching the third one.

Figure 12: Examples of Kalman ﬁlter performance when E = 1 m. One
coordinate unit is equal to one metre.

in the literature by extending the standard Kalman ﬁlter [37] or integrating
other techniques, e.g., mean shift algorithm [31]. We leave the investigation

29

of the applicability of such solutions to future researchers.

B The PedVO model

Parameter
factor
buﬀer
tau
tauObst
turningBias
density_aware Controls if the preferred speed is adjusted to density (true) or not (false)

Description
The factor capturing the relationship between speed and stride length
The psychological stride buﬀer required beyond that needed for stride length
The default time horizon for predicting inter-agent collisions
The default time horizon for predicting agent-obstacle collisions
The default turn bias

Value
1.57
0.9
3.0
0.1
1.0
false

Table 2: Default parameters of PedVO adopted in our experiments.

As mentioned in Section 3.1, we use the fundamental diagram as the
velocity modiﬁer, which represents the relationship between speed and den-
sity. The pedestrian model adopted, namely, PedVO [11], also captures the
underlying physiological and psychological factors besides the fundamental
diagram. In our experiments, we use the default settings of PedVO in the
fundamental diagram example provided by Menge. These settings are shown
in Table 2.

References

[1] Al Arabiya News. Saudi Arabia may soon issue e-bracelets for all hajj

pilgrims, 2015. [Online; accessed 1-July-2018].

[2] J. E. Almeida, R. Rosseti, and A. L. Coelho. Crowd simulation model-
ing applied to emergency and evacuation simulations using multi-agent
systems. In Proceedings of the 6th Doctoral Symposium on Informatics
Engineering, pages 93–104. FEUP, 2011.

[3] F. Alonso-Marroquin, J. Busch, C. Chiew, C. Lozano, and Á. Ramírez-
Simulation of counterﬂow pedestrian dynamics using

Gómez.
spheropolygons. Physical Review E, 90(6):063305, 2014.

[4] BBC News. Shanghai new year crush kills 36, 2015.

[Online; accessed

1-July-2018].

30

[5] E. Bostanci, B. Bostanci, N. Kanwal, and A. F. Clark. Sensor fusion
of camera, GPS and IMU using fuzzy adaptive multiple motion models.
Soft Computing, 22(8):2619–2632, 2018.

[6] R. G. Brown, P. Y. Hwang, et al. Introduction to random signals and

applied Kalman ﬁltering, volume 3. Wiley New York, 1992.

[7] R. C. Browning, E. A. Baker, J. A. Herron, and R. Kram. Eﬀects of
obesity and sex on the energetic cost and preferred speed of walking.
Journal of Applied Physiology, 100(2):390–398, 2006.

[8] M. L. Callisaya, C. P. Launay, V. K. Srikanth, J. Verghese, G. Allali,
and O. Beauchet. Cognitive status, fast walking speed and walking
speed reserve-the gait and alzheimer interactions tracking (GAIT) study.
Geroscience, 39(2):231–239, 2017.

[9] A. Corbetta, J. Meeusen, C. Lee, and F. Toschi. Continuous measure-
ments of real-life bidirectional pedestrian ﬂows on a wide walkway. In
Proceedings of Pedestrian and Evacuation Dynamics 2016, pages 18–24,
2016.

[10] S. Curtis, A. Best, and D. Manocha. Menge: A modular framework for
simulating crowd movement. Collective Dynamics, 1:1–40, 2016.

[11] S. Curtis and D. Manocha. Pedestrian simulation using geometric rea-
soning in velocity space. In U. Weidmann, U. Kirsch, and M. Schrecken-
berg, editors, Proceedings of Pedestrian and Evacuation Dynamics 2012,
pages 875–890, Switzerland, 2014. Springer.

[12] M. H. Dridi. List parameters inﬂuencing the pedestrian movement and
pedestrian database. International Journal of Social Science Studies,
3(4):94–106, 2015.

[13] M. Eliasson. A Kalman ﬁlter approach to reduce position error for

pedestrian applications in areas of bad GPS reception, 2014.

[14] D. Elliott and D. Smith. Football stadia disasters in the United King-
dom: learning from tragedy? Industrial & Environmental Crisis Quar-
terly, 7(3):205–229, 1993.

31

[15] T. Franke, P. Lukowicz, and U. Blanke. Smart crowds in smart cities:
Real life, city scale deployments of a smartphone based participatory
crowd management platform. Journal of Internet Services and Applica-
tions, 6(1):27, 2015.

[16] R. Garnett and R. Stewart. Comparison of GPS units and mobile Apple
GPS capabilities in an urban landscape. Cartography and Geographic
Information Science, 42(1):1–8, 2015.

[17] P. D. Groves, L. Wang, D. Walter, H. Martin, K. Voutsis, and Z. Jiang.
The four key challenges of advanced multisensor navigation and po-
In Proceedings of 2014 IEEE/ION Position, Location and
sitioning.
Navigation Symposium (PLANS), pages 773–792. IEEE, 2014.

[18] F. Gustafsson and F. Gustafsson. Adaptive ﬁltering and change detec-

tion, volume 1. Citeseer, 2000.

[19] D. Helbing, I. J. Farkas, P. Molnar, and T. Vicsek. Simulation of pedes-
trian crowds in normal and evacuation situations. Pedestrian and evac-
uation dynamics, 21(2):21–58, 2002.

[20] D. Helbing, A. Johansson, and H. Z. Al-Abideen. Dynamics of crowd

disasters: An empirical study. Physical review E, 75(4), 2007.

[21] D. Helbing, A. Johansson, and H. Z. Al-Abideen. The dynamics of
crowd disasters: An empirical study (supplementary information), 2007.
[Online; accessed 7-February-2018].

[22] A. Johansson, D. Helbing, H. Z. Al-Abideen, and S. Al-Bosta. From
crowd dynamics to crowd safety: A video-based analysis. Advances in
Complex Systems, 11(04):497–527, 2008.

[23] A. Johansson, D. Helbing, and P. K. Shukla. Speciﬁcation of the social
force pedestrian model by evolutionary adjustment to video tracking
data. Advances in complex systems, 10(supp02):271–288, 2007.

[24] J. C. S. J. Junior, S. R. Musse, and C. R. Jung. Crowd analysis
using computer vision techniques. IEEE Signal Processing Magazine,
27(5):66–77, 2010.

32

[25] B. Krausz and C. Bauckhage. Loveparade 2010: Automatic video anal-
ysis of a crowd disaster. Computer Vision and Image Understanding,
116(3):307–319, 2012.

[26] A. V. Kurilkin and S. V. Ivanov. A comparison of methods to detect
people ﬂow using video processing. Procedia Computer Science, 101:125–
134, 2016.

[27] L. J. Launer and T. Harris. Weight, height and body mass index distri-
butions in geographically and ethnically diverse samples of older persons.
Age and Ageing, 25(4):300–306, 1996.

[28] R. S. Lee and R. L. Hughes. Exploring trampling and crushing in a
crowd. Journal of transportation engineering, 131(8):575–582, 2005.

[29] R. S. Lee and R. L. Hughes. Prediction of human crowd pressures.

Accident analysis & prevention, 38(4):712–722, 2006.

[30] J. Li, K. Miyashita, T. Kato, and S. Miyazaki. GPS time series modeling
by autoregressive moving average method: Application to the crustal
deformation in central Japan. Earth, planets and space, 52(3):155–162,
2000.

[31] Y. Li, Y. Pang, Z. Li, and Y. Liu. An intelligent tracking technology
based on Kalman and mean shift algorithm. In Proceedings of the 2nd
International Conference on Computer Modeling and Simulation (IC-
CMS), volume 1, pages 107–109. IEEE, 2010.

[32] D. Littleﬁeld. Metric handbook: Planning and design data. Routledge,

2012.

[33] J. Liu, B. Priyantha, T. Hart, H. S. Ramos, A. A. Loureiro, and
Q. Wang. Energy eﬃcient GPS sensing with cloud oﬄoading. In Proceed-
ings of the 10th ACM Conference on Embedded Network Sensor Systems,
pages 85–98. ACM, 2012.

[34] I. Mahmood, M. Haris, and H. Sarjoughian. Analyzing emergency evacu-
ation strategies for mass gatherings using crowd simulation and analysis
framework: Hajj scenario.
In Proceedings of the 2017 ACM SIGSIM
Conference on Principles of Advanced Discrete Simulation, pages 231–
240. ACM, 2017.

33

[35] A. N. Marana, L. D. F. Costa, R. Lotufo, and S. A. Velastin. Estimat-
ing crowd density with Minkowski fractal dimension. In Proceedings of
1999 IEEE International Conference on Acoustics, Speech, and Signal
Processing, pages 3521–3524. IEEE, 1999.

[36] H. Mousavi, S. Mohammadi, A. Perina, R. Chellali, and V. Mur. Ana-
lyzing tracklets for the detection of abnormal crowd behavior. In Pro-
ceedings of 2015 IEEE Winter Conference on Applications of Computer
Vision (WACV), pages 148–155. IEEE, 2015.

[37] B. Moussakhani, J. T. Flåm, T. A. Ramstad, and I. Balasingham. On
change detection in a Kalman ﬁlter based tracking problem. Signal
processing, 105:268–276, 2014.

[38] Newzoo. Top countries/markets by smartphone penetration & users,

2018. [Online; accessed 15-August-2018].

[39] Oﬃcial U.S. government information about the Global Positioning Sys-
[Online; accessed

tem (GPS) and related topics. GPS accuracy, 2017.
15-August-2018].

[40] A. Papoulis and S. U. Pillai. Probability, random variables, and stochas-
tic processes. Tata McGraw-Hill Education, New York, 4th edition,
2002.

[41] M. PETOVELLO. How does a GNSS receiver estimate velocity? Inside

GNSS, pages 38–41, 2015.

[42] M. Sabokrou, M. Fayyaz, M. Fathy, and R. Klette. Deep–cascade: Cas-
cading 3D deep neural networks for fast anomaly detection and local-
ization in crowded scenes.
IEEE Transactions on Image Processing,
26(4):1992–2004, 2017.

[43] M. Sabokrou, M. Fayyaz, M. Fathy, Z. Moayed, and R. Klette. Deep-
anomaly: Fully convolutional neural network for fast anomaly detection
in crowded scenes. Computer Vision and Image Understanding, 2018.

[44] D. Sharma, A. P. Bhondekar, A. Shukla, and C. Ghanshyam. A re-
view on technological advancements in crowd management. Journal of
Ambient Intelligence and Humanized Computing, 9(3):1–11, 2016.

34

[45] Statista. Number of smartphone users worldwide 2014 - 2020, 2016.

[Online; accessed 15-August-2018].

[46] B. Steﬀen and A. Seyfried. Methods for measuring pedestrian density,
ﬂow, speed and direction with minimal scatter. Physica A: Statistical
mechanics and its applications, 389(9):1902–1910, 2010.

[47] D. Stojanović and N. Stojanović.

Indoor localization and tracking:
Methods, technologies and research challenges. Facta Universitatis, Se-
ries: Automatic Control and Robotics, 13(1):57–72, 2014.

[48] T. Suzuki, M. Kitamura, Y. Amano, and T. Hashizume. High-accuracy
GPS and GLONASS positioning by multipath mitigation using omni-
directional infrared camera. In Proceedings of 2011 IEEE International
Conference on Robotics and Automation (ICRA), pages 311–316. IEEE,
2011.

[49] O. Tange. GNU parallel 2018, 2018.

[50] The Express Tribune. Hajj stampede death toll rises to 2,177, 2015.

[Online; accessed 1-July-2018].

[51] The New York Times. Stampede at Mumbai railway station kills at least

22, 2017. [Online; accessed 1-July-2018].

[52] The Telegraph News. More than 1,500 Juventus fans injured in stampede

in Turin, 2017. [Online; accessed 1-July-2018].

[53] A. Tordeux, J. Zhang, B. Steﬀen, and A. Seyfried. Quantitative compar-
ison of estimations for the density within pedestrian streams. Journal of
Statistical Mechanics: Theory and Experiment, 2015(6):P06030, 2015.

[54] UCSD. Anomaly detection dataset, 2016. [Online; accessed 15-August-

2018].

[55] J. Van Den Berg, S. J. Guy, M. Lin, and D. Manocha. Reciprocal n-body
collision avoidance. In Robotics research, pages 3–19. Springer, 2011.

[56] F. S. T. Van Diggelen. A-GPS: Assisted GPS, GNSS, and SBAS. Artech

House, 2009.

35

[57] S. C. Walpole, D. Prieto-Merino, P. Edwards, J. Cleland, G. Stevens,
and I. Roberts. The weight of nations: An estimation of adult human
biomass. BMC public health, 12(1):439, 2012.

[58] F. Wang, X. Zhang, and J. Huang. Error analysis and accuracy assess-
ment of GPS absolute velocity determination without SA. Geo-spatial
Information Science, 11(2):133–138, 2008.

[59] D. L. Wilson. GPS horizontal position accuracy. Global Positioning

System Accuracy webpage, 2002.

[60] M. Wirz, T. Franke, D. Roggen, E. Mitleton-Kelly, P. Lukowicz, and
G. Tröster. Inferring crowd conditions from pedestrians’ location traces
for real-time crowd monitoring during city-scale mass gatherings. In Pro-
ceedings of 2012 IEEE 21st International Workshop on Enabling Tech-
nologies: Infrastructure for Collaborative Enterprises (WETICE), pages
367–372. IEEE, 2012.

[61] S. Yamaguchi and T. Tanaka. GPS standard positioning using Kalman
In Proceedings of 2006 International Joint Conference SICE-

ﬁlter.
ICASE, pages 1351–1354. IEEE, 2006.

[62] R. K. Yin. Case study research: Design and methods. Sage publications,

5th edition, 2013.

[63] P. A. Zandbergen. Positional accuracy of spatial data: Non-normal
distributions and a critique of the national standard for spatial data
accuracy. Transactions in GIS, 12(1):103–130, 2008.

[64] P. A. Zandbergen and S. J. Barbeau. Positional accuracy of assisted GPS
data from high-sensitivity GPS-enabled mobile phones. The Journal of
Navigation, 64(3):381–399, 2011.

[65] J. Zębala, P. Ciępka, and A. RezA. Pedestrian acceleration and speeds.

Probl. Forensic Sci., 91:227–234, 2012.

[66] A. Zelenkov, A. Kluga, and E. Grab. Accuracy estimation of GPS re-
ceiver parameters with re-reference system in static mode. Telecommu-
nications & Electronics, 8(31):31–36, 2008.

36

[67] L. Zhang, D. Lai, and A. Miranskyy. Datasets for the impact of position

errors on crowd simulation. Mendeley Data, 2018.

[68] J. Zhou, H. Pei, and H. Wu. Early warning of human crowds based on
query data from Baidu maps: Analysis based on Shanghai stampede.
In Big Data Support of Urban Planning and Management, pages 19–41.
Springer, Cham, 2017.

[69] S. Zhou, W. Shen, D. Zeng, M. Fang, Y. Wei, and Z. Zhang. Spatial–
temporal convolutional neural networks for anomaly detection and lo-
calization in crowded scenes. Signal Processing: Image Communication,
47:358–368, 2016.

37

