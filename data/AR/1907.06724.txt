Real-time Facial Surface Geometry from Monocular Video on Mobile GPUs

Yury Kartynnik

Artsiom Ablavatski

Ivan Grishchenko

Matthias Grundmann

Google Research
1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA
{kartynnik, artsiom, igrishchenko, grundman}@google.com

9
1
0
2

l
u
J

5
1

]

V
C
.
s
c
[

1
v
4
2
7
6
0
.
7
0
9
1
:
v
i
X
r
a

Abstract

We present an end-to-end neural network-based model
for inferring an approximate 3D mesh representation of
a human face from single camera input for AR applica-
tions. The relatively dense mesh model of 468 vertices
is well-suited for face-based AR effects. The proposed
model demonstrates super-realtime inference speed on mo-
bile GPUs (100–1000+ FPS, depending on the device and
model variant) and a high prediction quality that is com-
parable to the variance in manual annotations of the same
image.

1. Introduction

The problem of predicting the facial geometry by align-
ing a facial mesh template, also called face alignment or
face registration, has for a long time been a cornerstone of
computer vision. It is commonly posed in terms of locating
relatively few (typically 68) landmarks, or keypoints. These
points either have distinct semantics of their own or par-
ticipate in meaningful facial contours. We refer the reader
to [4] for a good review of related work on both the 2D and
3D face alignment problems.

An alternative approach is to estimate the pose, scale,
and the parameters of a 3D morphable model (3DMM) [3].
A 3DMM, such as BFM2017, the 2017 edition of the Basel
Face Model [7], is usually obtained through principal com-
ponent analysis. The resulting mesh typically features many
more points (around 50K in the case of BFM), but the range
of possible predictions is limited by the linear manifold
spanned by the PCA basis, which is in turn determined by
the diversity of the set of faces captured for the model. As
a concrete example, the BFM is seemingly incapable of re-
liably representing a face having exactly one eye closed.1

We set forth a problem of estimating positions of the 3D
mesh vertices with a neural network, treating each vertex

1Among the PCA expression basis components accounted for 97% of
the model variance, the one that controls eye closing is acting symmetri-
cally on both eyes.

Figure 1: Face mesh prediction examples

as an independent landmark. The mesh topology is com-
prised of 468 points arranged in ﬁxed quads (see Figure 2a).
The points have been manually selected in accordance with
the supposed applications, such as expressive AR effects,
virtual accessory and apparel try-on and makeup. The ar-
eas that are expected to have higher variability and higher
importance in human perception have been allocated with
higher point density. It allows to build a plausible smooth
surface representation with the application of e.g. Catmull-
Clark subdivision [6] (Figure 2b).

The input to the model is a frame (or, more generally, a
stream of frames) of a single RGB camera—no depth sen-
sor information is required. An example of the model out-
put is presented in Figure 1. Our setup targets real-time
mobile GPU inference, but we have also designed lighter
versions of the model to address CPU inference on the mo-
bile devices lacking proper GPU support. We will call the
GPU-targeting model a “full” model, contrasting it to the
“lightest” model tailored for CPU in the experiments.

2. Image processing pipeline

We organize the processing of an image as follows:
1. The whole frame from the camera input gets processed
by a very lightweight face detector [2] that produces face
bounding rectangles and several landmarks (e.g. eye cen-
ters, ear tragions, and nose tip). The landmarks are used
to rotate a facial rectangle to align the line connecting

1

 
 
 
 
 
 
(a)

(b)

Figure 2: The predicted mesh topology (a) and its 3-level
Catmull-Clark subdivision (b)

the eye centers with the horizontal axis of the rectangle.
2. A rectangle obtained in the previous step is cropped from
the original image and resized so as to form the input
to the mesh prediction neural network (ranging in size
from 256×256 pixels in the full model to 128×128 in
the smallest one). This model produces a vector of 3D
landmark coordinates, which subsequently gets mapped
back into the original image coordinate system. A dis-
tinct scalar network output (face ﬂag) produces the prob-
ability of the event that a reasonably aligned face is in-
deed present in the provided crop.
We have adopted the policy that the x- and y-coordinates
of the vertices correspond to the point locations in the 2D
plane as given by the image pixel coordinates. The z-
coordinates are interpreted as the depth relative to a ref-
erence plane passing through the mesh’s center of mass.
They are re-scaled so that a ﬁxed aspect ratio is main-
tained between the span of x-coordinates and the span of
z-coordinates, i.e. a face that is scaled to half its size has its
depth range (nearest to farthest) scaled down by the same
multiplier.

When used on video input in the face tracking mode, a
good facial crop is available from the previous frame pre-
diction and the usage of the face detector is redundant. In
this scenario, it is only used on the ﬁrst frame and in the
rare events of re-acquisition (after the probability predicted
by the face ﬂag falls below the appropriate threshold).

It should be noted that with this setup, the second net-
work receives the inputs with faces reasonably centered and
aligned. We argue that this allows to save some model rep-
resentational capacity that could otherwise be spent on han-
dling the cases with substantial rotation and translation. In
particular, we could reduce the amount of related augmen-
tations while gaining prediction quality.

3. Dataset, annotation, and training

In our training, we rely on a globally sourced dataset of
around 30K in-the-wild mobile camera photos taken from

Figure 3: The 2D semantic contours used during the initial
bootstrap process

a wide variety of sensors in changing lighting conditions.
During training, we further augment the dataset with stan-
dard cropping and image processing primitives, and also a
few specialized ones: modelling camera sensor noise [8]
and applying a randomized non-linear parametric transfor-
mation to the image intensity histogram (the latter helps
simulating marginal lighting conditions).

Obtaining the ground truth for the 468 3D mesh points
is a labor-intensive and highly ambiguous task. Instead of
manually annotating the points one by one, we employ the
following iterative procedure.
1. Train an initial model using the following two sources of

supervision:

• Synthetic renderings of a 3DMM over the facial rect-
angles of real-world photos (as opposed to e.g. solid
to avoid overﬁtting on them). The
backgrounds,
ground truth vertex coordinates are thus immediately
available from a predeﬁned correspondence between
the 468 mesh points and a subset of 3DMM vertices.
• 2D landmarks corresponding to a small subset of the
mesh vertices participating in a set of semantic con-
tours (see Figure 3) annotated over the actual “in-the-
wild” dataset. The landmarks are predicted as a sepa-
rate output at the end of a dedicated network branch,
introduced with the intent to share the intermediate
face representations between the 2D and 3D paths.

After this ﬁrst model had been trained, up to 30% of the
images in our dataset had predictions suitable for reﬁne-
ment in the subsequent step.

2. Iteratively reﬁne the x- and y-coordinates bootstrapped
by applying the most up-to-date model to the images, ﬁl-
tering out those suitable for such reﬁnement (i.e. where
the prediction error is tolerable). Fast annotation reﬁne-
ment is enabled by a “brush” instrument with adjustable
radius that lets a whole range of points to be moved at
once. The amount of movement is exponentially de-
creasing with the distance along the mesh edges from
the pivot vertex under the mouse cursor. This allows
annotators to adjust substantial area displacements with

large “strokes” before local reﬁnements, while preserv-
ing the mesh surface smoothness. We note that the z-
coordinates are left intact; the only source of supervi-
sion for them being the synthetic 3D rendering outlined
above. Despite the depth predictions being thus not met-
rically accurate, in our experience the resulting meshes
are visually plausible enough to e.g. drive realistic 3D
texture renderings over the face or align 3D objects ren-
dered as part of virtual accessory try-on experience.

4. Model architecture

For the mesh prediction model, we use a custom but
fairly straightforward residual neural network architecture.
We use more aggressive subsampling in the early layers of
the network and dedicate most of the computation to its
shallow part.

Thus, the neurons receptive ﬁelds start covering large ar-
eas of the input image relatively early. When such a recep-
tive ﬁeld reaches the image boundary, its relative location in
the input image becomes implicitly available for the model
to rely on (due to convolution padding). Consequently, the
neurons for the deeper layers are likely to differentiate be-
tween e.g. mouth-relevant and eye-relevant features.

The model is able to complete a face that is slighly oc-
cluded or crossing the image boundary. This leads us to a
conclusion that a high-level and low-dimensional mesh rep-
resentation is built by the model that is turned into coordi-
nates only in the last few layers of the network.

5. Filtering for temporal consistency in video

Since our model is operating on a single-frame level, the
only information that gets passed between frames is the ro-
tated facial bounding rectangle (and whether or not it should
be re-evaluated with face detector). Because of the inconsis-
tencies in pixel-level image representations of faces across
subsequent video frames (due to small afﬁne transforms of
the view, head pose change, lighting variation, as well as
different kinds of camera sensor noise [8]), this leads to
human-noticeable ﬂuctuations, or temporal jitter, in the tra-
jectories of individual landmarks (although the entire mesh
as a surface is less affected by this phenomenon).

We propose to address this issue by employing a one-
dimensional temporal ﬁlter applied independently to each
predicted landmark coordinate. As the primary application
of our proposed pipeline is visually appealing rendering, we
draw inspiration from human-computer interaction meth-
ods, speciﬁcally the 1 Euro ﬁlter [5]. The main premise
of 1 Euro and related ﬁlters is that in the trade-off between
noise reduction and phase lag elimination, humans prefer
the former (i.e. stabilization) when the parameters are virtu-
ally not changing and the latter (i.e. avoiding the lag) when
the rate of change is high. Our ﬁlter maintains a ﬁxed rolling

window of a few timestamped samples for velocity estima-
tions, which are adjusted by the face size to accommodate
for face scale changes in a video stream. Using this ﬁlter
leads to human-appealing prediction sequences on videos
without visible jitter.

6. Results

We use mean absolute distance (MAD) between the pre-
dictions and the ground truth vertex locations, normalized
by interocular distance (IOD), deﬁned as the distance be-
tween the eye centers (estimated as midpoints of eye corner
connecting segments to avoid gaze direction dependence).
This normalization is aimed at avoiding factoring in the
scale of the face. As the z-coordinates are obtained exclu-
sively from the synthetic supervision, we report the 2D-only
errors, but 3D inter-ocular distance is used to account for
possible yaw head rotations.

To quantify the ambiguity of the problem and obtain a
baseline for our metric, we have given the task to anno-
tate a set of 58 images to each of 11 trained annotators and
computed IOD-normalized mean absolute distance between
their annotations of the same image. The estimated IOD
MAD error was 2.56%.

We present the evaluation results on a geographically di-
verse evaluation set of 1.7K images. The speed estimations
are based on the TensorFlow Lite GPU framework [1].

Model (input)

Full (256×256)
Light (128×128)
Lightest (128×128)

Time, ms

IOD
MAD (iPhone XS)
3.96%
5.15%
5.29%

2.5
1
0.7

Time, ms
(Pixel 3)
7.4
3.4
2.6

Table 1: Model performance characteristics

The technology described in this paper is driving major
AR self-expression applications and AR developer APIs on
mobile phones. Figure 4 presents two examples of numer-
ous rendering effects enabled by it.

Figure 4: Application examples: Facial texture painting
and AR object rendering (glasses)

References

[1] TFLite on GPU.

https://github.com/tensorflow/tensorflow/
tree/master/tensorflow/lite/delegates/
gpu. [Online; accessed April 19, 2019]. 3

[2] Authors. Blazeface: Sub-millisecond neural face detection on
mobile GPUs. CVPR 2019: Third Workshop on Computer
Vision for AR/VR. Workshop Submission ID 5. Supplied as
additional material supplemental blazeface.pdf. 1
[3] Volker Blanz and Thomas Vetter. A morphable model for the
In Proceedings of 36th Internaional
synthesis of 3D faces.
Conference and Exhibition on Computer Graphics and Inter-
active Techniques, pages 187–194, 1999. 1

[4] Adrian Bulat and Georgios Tzimiropoulos. How far are we
from solving the 2D & 3D face alignment problem? (and
a dataset of 230,000 3D facial landmarks). In International
Conference on Computer Vision, 2017. 1

[5] G´ery Casiez, Nicolas Roussel, and Daniel Vogel. 1 C ﬁlter:
A simple speed-based low-pass ﬁlter for noisy input in inter-
active systems. In Proceedings of the SIGCHI Conference on
Human Factors in Computing Systems, CHI ’12, pages 2527–
2530, New York, NY, USA, 2012. 3

[6] Edwin Catmull and Jim Clark. Recursively generated B-spline
surfaces on arbitrary topological meshes. Computer-Aided
Design, 10(6):350–355, 1978. 1

[7] Thomas Gerig et al. Morphable face models - an open frame-

work. arXiv preprint arXiv:1709.08398, 2017. 1

[8] Michael D. Grossberg and Shree K. Nayar. What is the space
of camera response functions? In 2003 IEEE Computer Soci-
ety Conference on Computer Vision and Pattern Recognition,
2003. Proceedings., volume 2, pages II–602, 2003. 2, 3

