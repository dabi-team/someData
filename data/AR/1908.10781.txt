An Eye for an Eye: Economics of Retaliation in Mining Pools

Yujin Kwon*, Hyoungshick Kim†, Yung Yi*, Yongdae Kim*

*KAIST
{dbwls8724,yiyung,yongdaek}@kaist.ac.kr

†Sungkyunkwan University
hyoung@skku.edu

9
1
0
2

g
u
A
0
3

]

R
C
.
s
c
[

2
v
1
8
7
0
1
.
8
0
9
1
:
v
i
X
r
a

ABSTRACT
Currently, miners typically join mining pools to solve cryptographic
puzzles together, and mining pools are in high competition. This
has led to the development of several attack strategies such as block
withholding (BWH) and fork after withholding (FAW) attacks that
can weaken the health of PoW systems and but maximize mining
pools’ profits. In this paper, we present strategies called Adaptive
Retaliation Strategies (ARS) to mitigate not only BWH attacks but
also FAW attacks. In ARS, each pool cooperates with other pools
in the normal situation, and adaptively executes either FAW or
BWH attacks for the purpose of retaliation only when attacked.
In addition, in order for rational pools to adopt ARS, ARS should
strike to an adaptive balance between retaliation and selfishness
because the pools consider their payoff even when they retaliate. We
theoretically and numerically show that ARS would not only lead
to the induction of a no-attack state among mining pools, but also
achieve the adaptive balance between retaliation and selfishness.

CCS CONCEPTS
• Security and privacy → Distributed systems security; Eco-
nomics of security and privacy;

KEYWORDS
Bitcoin; Mining; Fork After Withholding Attack; Block Withholding
Attack; Repeated Game

1 INTRODUCTION
Numerous cryptocurrencies based on a peer-to-peer network now
exist, utilizing an open ledger called a blockchain. In such blockchain
systems, network nodes called miners verify the transactions col-
lected through the network, generate a block consisting of valid
transactions, and propagate the block to the entire network. In
general, (public) blockchain systems offer financial incentives to
encourage miners to participate in this process. For example, in
Bitcoin, a miner is currently rewarded with 12.5 BTC for a new
block creation.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AFT ’19, October 21–23, 2019, Zurich, Switzerland
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6732-5/19/10. . . $15.00
https://doi.org/10.1145/3318041.3355472

1

The security and reliability of blockchain systems depend on
their consensus algorithm. Most popular cryptocurrency systems
such as Bitcoin and Ethereum adopt a proof-of-work (PoW) mecha-
nism in order to agree on the same blockchain [27]. In such PoW
mechanisms, miners must solve cryptographic puzzles (i.e., proofs-
of-work) showing that a certain amount of computational resources
(e.g., time and memory) was spent in order to generate a new block.
The mining difficulty is adjusted automatically to maintain an aver-
age mining rate of one block at a fixed time interval with changes
in the total computational power of the blockchain system.

The significant increase in mining difficulty led the formation
of mining pools in which miners gather to mine together; these
pools perform mining as a single node in a network. Most pools
consist of a manager and miners, and the manager assigns a puzzle
to miners at the beginning of every round. The miners then find
partial proofs-of-work (PPoWs) and full proofs-of-work (FPoWs)
for a given puzzle and submit them to the manager. PPoWs are
needed for assessing each miner’s contribution to share the reward
in the pool. If a miner fully solves the puzzle, the manager generates
and propagates a block based on the submitted PoW. The manager
then earns the reward for one block and splits it among miners in
proportion to their number of submitted PPoWs.

However, previous studies [17, 28] demonstrated how existing
mining pools’ protocols can be vulnerable to block withholding
(BWH) [28] and fork after withholding (FAW) attacks [17]. Moreover,
pools in high competition can launch these attacks against each
other by infiltrating a part of their mining power (i.e., computational
power) into other pools. A BWH attacking pool first infiltrates its
mining power into other pools (i.e., victim pools) and submits only
PPoWs but not FPoWs to the victim pools. The FAW attack is an
extended attack of the BWH attack. Similar to the BWH attack,
a FAW attacking pool also infiltrates its mining power into other
pools, and submits only PPoWs but not FPoWs to the victim pools
except for the case when an external honest miner (i.e., neither the
attacker nor a miner in the victim pool) propagates a block. Unlike
the BWH attack, in the case, the attacker intentionally generates
forks through the victim pools.

To analyze the strategic interaction between miners for those
two attacks, we can use game-theoretic models: the BWH game
and the FAW game. Eyal [9] showed that the BWH game between
two pools where they can execute BWH attacks is similar to the
prisoner’s dilemma. For the FAW game between two pools where
they can execute FAW attacks, Kwon et al. [17] showed that mining
pools’ strategies form a Nash equilibrium in which a larger pool
among two pools earns extra profit. Thus, FAW attacks between
pools can cause more centralization of the system because miners

 
 
 
 
 
 
AFT ’19, October 21–23, 2019, Zurich, Switzerland

Kwon et al.

would join in large pools that earn the extra reward through the
FAW attack. The objective of this study is to find strategies inducing
a no-attack state where FAW and BWH attacks do not occur.
System model: To achieve this goal, we take a more macroscopic
view of the system by modeling long-term interactions between
two pools as a notion of repeated game, which we call a repeated
FAW-BWH game, and by considering both FAW and BWH attacks
together in one framework. In the repeated game, the FAW-BWH
game is repeated as a one-stage game over time, where in every
stage each rational pool makes a decision to cooperate or execute
FAW or BWH attacks (see Section 3 for a full description of our
model). Unlike previous studies [9, 17] focusing on a single stage
game, we model a game with multiple stages to analyze the effects
of long-term interactions among pools. Also, we considered both
FAW and BWH attack strategies while they considered a single
attack strategy (i.e., FAW or BWH attack) only.
A novel strategy ARS: In game theory, the iterated prisoner’s
dilemma (i.e., a repeated version of the prisoner’s dilemma) has
been extensively studied in terms of how rational players can co-
operate through retaliation [1]. Using this retaliation concept, we
find how rational pools can cooperate in the repeated FAW-BWH
game. Unlike the iterated prisoner’s dilemma, the repeated FAW-
BWH game leads to a situation where a larger pool always wins the
game (i.e., the pool size game). This occurs when two pools execute
FAW attacks against each other as in the FAW game. Therefore, it
is relatively under-explored to find a cooperation-inducing strat-
egy in such a situation. In this paper, we propose strategies called
Adaptive Retaliation Strategies (ARS), which can lead to the state of
no-attack between two pools. In ARS, a pool cooperates at first and
continues to cooperate, but executes attacks for retaliation only
when attacked. Here, ARS must achieve a good balance between
retaliation and selfishness because rational pools would consider
their payoff even when they retaliate. In other words, if retaliation
is costly, they would not follow ARS, which implies that we should
find a credible retaliation. This is done by ARS’ adaptive retalia-
tion, i.e., adaptively deciding the amount of infiltration power for
retaliation against FAW or BWH attacks.

We formally describe ARS and prove that 1) ARS leads rational
pools to cooperate and 2) pools are likely to adopt ARS, by using
a popular concept of equilibrium in repeated game theory, called
subgame perfect Nash equilibrium (see Section 4). Furthermore,
our numerical analysis demonstrates that ARS makes the FAW and
BWH attacks unprofitable (see Section 5).
Practical requirements for ARS: To apply ARS in real-world
settings, pools should be able to monitor other pools’ information
about whether an attacker executes FAW or BWH attacks, and if
so, how much the attacker’s infiltration power is used. To monitor
these information, victim pool’s some statistical properties can
be used. For example, a pool can detect FAW and BWH attacks
by observing its fork rate and the ratio between the number of
submitted PPoWs and FPoWs, respectively. It can also determine
the attacker’s infiltration power in the victim pool through this
detection method. Another prerequisite for ARS is to identify which
pools have attacked a victim pool, and this may take a long time.
Therefore, we propose investigating the variance of the reward
densities of pools through moles to reduce the identifying time (see

2

Section 6). The benign pool’s reward density is not at all related
with block rewards of other pools. Meanwhile, when a pool executes
either FAW or BWH attacks, its reward density would be correlated
with block rewards of other pools because the attacker earns part
of its reward from the victim. This implies that we can identity the
pools executing attacks based on this correlation information (see
Section 6).
Multiple pools: In addition, for generalization, we extend ARS to
that for multiple pools beyond two pools. Through a case study, we
show that ARS still makes FAW and BWH attacks unprofitable in
the game among multiple pools (see Section 7).

2 BACKGROUND
In current cryptocurrencies, peers verify transactions issued by
clients. Peers record the verified transactions in a “blockchain.” To
maintain the blockchain, many cryptocurrencies including Bitcoin
adopt the PoW mechanism. In this section, we describe the mining
process, focusing on Bitcoin. Further, we demonstrate FAW and
BWH attacks against mining pools.

2.1 Bitcoin Basics
Mining Process: For mining, miners first gather issued transac-
tions, which are not yet recorded in the blockchain, into their local
storage. Then, miners place the transactions into a block and find a
PoW, spending their computational power to generate a valid block.
The header of a block includes a Merkle root [22] of transactions
in the corresponding block and the hash value of the header of the
previous block. The block header also includes a nonce, which is a
key component necessary to become a valid block.

To be a valid block, the hash value of block header must be less
than a given target number T1. In particular, Bitcoin uses the double
SHA256 hash function. The hash value of a block header is obtained
as an output of double SHA256 for an input containing a concatena-
tion of block contents including a nonce. Miners increment a nonce
to find a valid nonce, which makes the hash value less than the
target number T1. If a miner finds a valid nonce as a PoW, the miner
generates the valid block including the nonce and propagates the
block to a peer-to-peer network. Finally, the block is appended to
the blockchain, and the above mining process is repeated.

In Bitcoin, the target number T1 is adjusted every 2016 blocks to
keep the average period of one block generation (i.e, the average
period of one round) at 10 mins. The smaller the value of T1, the
more difficult the mining process will be.
Forks: When a miner A propagates a block, another block can
also be generated and propagated by a miner B who has not yet
received A’s block. Therefore, miners receive two blocks and regard
the first received block as the blockchain head. This situation is
called a fork. When a fork occurs, only one block becomes valid.
Moreover, an attacker can generate intentionally forks to execute
double-spending [15, 25] and selfish mining [11, 13, 23, 29].
Mining Pools: As the mining difficulty has been increasing, mining
pools were introduced, in which miners gather to mine together.
Major pools consist of a manager and many miners. These pools
run as one node in the Bitcoin network, and pool miners only need
to connect to the manager and create IDs. The manager forms and
distributes a potential block to miners, and then miners spend their

An Eye for an Eye: Economics of Retaliation in Mining Pools

AFT ’19, October 21–23, 2019, Zurich, Switzerland

computational power to generate a valid nonce based on the block
form provided by the manager. Moreover, there are open and closed
pools, depending on the policy whether any miner can join or not.
Pools’ reward systems are different from the block reward system
in Bitcoin. Miners in pools receive rewards for nonces, which make
the hash value of the block header less than a new target number
T2. The number T2 is greater than the original target number T1.
We refer to a nonce for the target T2 and T1 as a partial proof-of-
work (PPoW) and a full proof-of-work (FPoW), respectively. When
a miner finds a PPoW or an FPoW, the miner submits it (called
shares) to the manager, where PPoWs are needed to assess each
miner’s contribution in order to share the reward in the pool. When
the submitted share is FPoW, the manager generates a valid block
and earns the block reward. The manager then distributes the block
reward to miners in proportion to the number of submitted shares.

2.2 Existing Attacks on Pools
Block Withholding: To execute the BWH attack [7, 28], an at-
tacker splits her computational power into two parts, which are
used for solo mining and malicious mining in the victim pool, re-
spectively. In the malicious mining, she submits only a PPoW to
the victim without submitting an FPoW. Although she undermines
the victim by withholding blocks in the victim pool, she still earns
a portion of the reward through PPoWs submitted to the victim.
In addition, her solo mining has a higher efficiency compared to
the case where she does not attack because the block reward is
gained in proportion to each pool’s relative computational power
in Bitcoin. In other words, by undermining the victim pool, her
relative computational power would increase. As a result, this point
allows the attacker to earn an extra reward. Naturally, the BWH
attack can be executed in many proof-of-work cryptocurrencies
including Bitcoin, Ethereum, and Litecoin.

In 2015, Eyal [9] developed a BWH game between two pools.
In the game, each pool can launch the BWH attack against an
opponent by infiltrating a part of the computational power into the
opponent. Eyal found that the BWH game results in the miner’s
dilemma. In other words, there is only one Nash equilibrium in
which two pools execute BWH attacks against each other and both
pools suffer losses.

Fork After Withholding: For the FAW attack proposed in 2017 [17],
similar to the BWH attack, an attacker splits her computational
power into two parts, which are used for her solo mining and mali-
cious mining in a victim pool. However, when the attacker finds
an FPoW in the victim pool, she submits the FPoW to the manager
unlike in the BWH attack. This occurs only if an external honest
miner (i.e., neither the attacker nor a miner in the victim pool)
propagates a block. Therefore, the attacker intentionally gener-
ates a fork through pools. In the FAW game, pools can launch FAW
attacks against each other by infiltrating a portion of their computa-
tional power into the other pools. There is unique Nash equilibrium,
where two pools execute the FAW attack against each other. In the
equilibrium, a larger pool earns an extra reward (unlike in the BWH
game) while a smaller pool suffers a loss. In other words, the game
leads to a pool size game. This fact can make the decentralization
level of Bitcoin decrease when occurring FAW attacks among pools.

Countermeasure: Because no viable countermeasure against FAW
and BWH attacks [9, 17] exists, the attacks can be launched in prac-
tice. Indeed, the BWH attack was executed against the “Eligius”
pool in 2014. To detect the attack, a pool’s manager can investi-
gate the ratio of FPoWs to PPoWs. If the ratio is low enough, the
manager can speculate that the BWH attack has occurred in his
pool. However, identification of the attacker is known to be difficult
if she executes BWH attacks using many Sybil nodes (IDs) in the
pool.

For the FAW attack, miners can detect it because the attack will
cause a high fork rate. However, it is still difficult to identify the
attacker because she indirectly generate intentional forks through
pools instead of generating them by herself. Of course, in the vic-
tim pool, the manager can expel any miners suspected of causing
forks. Nonetheless, the attacker’s reward can be unaffected by this
manager’s behavior by planting many Sybil IDs in the victim pool.
In other words, even though an ID that generates a fork is expelled
by the manager, the attacker still earns the extra reward though
other IDs. Eventually, the manager would be unable to prevent FAW
attacks with a simple blacklist of suspects.

Even though many papers [8, 10, 28] proposed a new PoW mecha-
nism that can prevent BWH and FAW attacks, they might be imprac-
tical. These protocols make pool miners not know whether their
found nonce can generate a valid block, and thus the miners cannot
execute BWH and FAW attacks. However, this point causes another
withholding attack of a manager, where she can stealthily withhold
blocks found by a pool miner and earn extra profit through her solo
mining. In addition, the protocols increase the pool operation cost.
The above facts make the protocols impractical [17].

3 MODEL AND FORMULATION
3.1 System Model
Block generation in PoW: In PoW mechanisms, miners attempt
to generate valid blocks by finding an inverse image of a hash
function satisfying a certain condition in each round, where one
round is defined as the time during which a new task is generated
and a valid block is found by a miner. Due to the pseudorandomness
of hash functions, we assume that the number of blocks found by a
miner for one round follows a Poisson distribution with the miner’s
relative computational power. Then, the number of blocks found by
a pool also follows a Poisson distribution because the sum of Poisson
random variables is a Poisson random variable. For simplicity, we
assume that natural forks do not occur in the block generating
process, as the probability (≈0.004 [13]) of natural forks occurring
is significantly low in practice [9, 13, 17].
Computation power and reward: We let I be the set of all pools
and solo miners1, and denote by αi the computational power of i ∈
I. For analytical convenience, we normalize the total computation
power with 1, and thus (cid:205)
i ∈I αi = 1. We assume that a node cannot
possess more than 50% computational power (i.e., αi ≤ 0.5) as in
the previous works. A reward for one block is assumed to be 1,
implying that the total reward of a node i in a round is simply
the total number of blocks found by i in that round. When a pool
finds a block and earns the reward for the block, the pool manager

1A solo miner directly conducts mining, not joining pools.

3

AFT ’19, October 21–23, 2019, Zurich, Switzerland

Kwon et al.

distributes the reward to miners in proportion to the number of
shares submitted for the time duration over which the pool finds
the block. We also assume that the manager honestly distributes
the reward among the pool’s miners. We define node i’s reward
density at round r as Rr
is i’s reward earned for round r .
where Rr
i
αi
i
Attacks: We consider a case in which only two types of attacks,
FAW and BWH, can be executed by pools. In addition, because
most pools are open pools, we consider only open pools, not closed
pools. Closed pools will be discussed in Section 8. For the worst
case analysis, we assume that the FAW attack is executed under the
best network capability2, meaning that the attacker’s blocks always
become valid after forks caused by the FAW attack. During an attack,
we assume that an attacking pool executes either FAW or BWH
attacks, but not both at the same time. Indeed, an attack combining
FAW and BWH is equivalent to the FAW attack under some network
capability. An attacking pool infiltrates a part of its computation
power into “victim” pools. Note that such a choice on the attack
strategy can be time-varying (see stage in the next paragraph). We
consider a regime in which there are a sufficient number of miners
in each pool, so as to assume that each pool’s infiltration power
used for attacks is a real number. Moreover, an attacker infiltrates
its partial computational power into a victim pool using Sybil IDs
in order to make it more difficult to identify who the attacker is.
Nonetheless, we assume that the victim can trace the attacker and
know how much infiltration power the attacker has used for attacks
because the attacking pool is an open pool. In Section 6, we describe
how this becomes possible in practice.
Stage: Our interest lies in investigating how pools interact over
a long-term period. To this end, the entire time is divided into a
sequence of stages, where over each stage a pool can know whether
an attack occurs against itself, how much infiltration power is being
used, and who the attacker is. This notion of stage is the one that
is popularly used in repeated games (see Section 3.2). Therefore, at
the end of each stage, a victim identifies an attacker when an attack
was executed against the victim during the stage. Note that a stage
consists of multiple rounds. At the start of each stage, pools can
change their actions based on other pools’ actions. For analytical
tractability, we assume that stages are synchronized among pools.

3.2 Repeated FAW-BWH Game
Primer on repeated game: We aim at modeling how multiple
pools interact to achieve their own objectives over a long-term pe-
riod. To this end, we use the theory of repeated games, popularly
used to understand the long-term interactions among players. In
repeated games, the interactions among players repeat for multiple
stages, and the players become aware of other players’ past behav-
iors and their future benefits, accordingly adapting their strategies
over time. The main idea of the theory of repeated games is that a
player may be deterred from exploiting her short-term advantage
by the threat of punishment that reduces her long-term payoff.

The basic component of a repeated game is a (simultaneous-
move) stage game G played for each stage. The stage game G is
represented by < N, (Ai )i ∈N, (Ui )i ∈N > , where N is the set of

2A variable 0 ≤ c ≤ 1 represents the network capability [17], where we assume c = 1
in this study. This assumption, which is made for the sake of simplicity, can be relaxed
readily.

:= (at
i

players, Ai is the set of actions of the player i, and Ui (a) is a player
i’s payoff function when the players’ action profile is a ∈ (Ai )i ∈N .
We denote by GT the T -period repeated game of G with perfect
information, where the players play the same stage game G for T
stages, possibly T = ∞. We use the superscript t to express the
stage t in all notations, and let at
)i ∈N denote the action
profile at stage t, i.e., the actions by all players at stage t . Also, we
denote by ai := (at
)0≤t ≤T the actions of player i for T stages. For
i
1, . . . , at −1) denote the history up to stage t −1,
0, a
t ≥ 1, let ht = (a
where H t is the space of all possible stage-t histories. Depending
on whether T < ∞ or T = ∞, we call each case as a finitely or
infinitely repeated game. At each stage t, each player i knows all
past actions ht −1 and chooses the next action at
according to i’s
i
strategy, thus at = (at
)i ∈N is determined. Here, a strategy si for
i
—one for
player i in the repeated game is a sequence of maps st
i
each stage t—that map a (t − 1)-history ht −1 to an action at
in Ai .
i
By perfect information, we mean that at the end of each stage game,
players are able to know other players’ actions and their payoffs.
In this paper, we focus on the infinitely repeated game, in which
given the whole action profiles a = (a1, a2, . . .), the payoff Ui (a)
of player i in the corresponding repeated game is the discounted
average payoff, i.e.,

∞
(cid:213)

Ui (a) =

δ t −1

Ui (at ),

(1)

t =1
where 0 < δ < 1 is the discount factor. The discount factor indicates
how much a player discounts in the future. Next, we introduce the
concept of the subgame perfect Nash equilibrium.

| ht ) for ∀i ∈ N, ∀ht ∈ H t , ∀t > 0,

Ui (s ′

i , s⋆
−i

i , s⋆
−i

Definition 3.1 (Subgame Perfect Nash Equilibrium (SPNE)). For a
given history ht and player i’s strategy si , we denote the discounted
average payoff of player i in the subgame given the history ht as
Ui (si , s−i | ht ). Then the strategy profile s⋆ = (s⋆
i )i ∈N is a subgame
perfect Nash equilibrium if
Ui (s⋆

| ht ) = max
s ′
i ∈Si
where Si is a space of player i’s strategies.
In the repeated game, SPNE is a stronger version of Nash equilib-
rium, roughly meaning a strategy profile, which is a Nash equilib-
rium in every subgame. Thus, a SPNE is regarded as a mathematically-
proved strategy vector that rational players are likely to follow
when players interact over a long-term time period. There is also
Folk Theorem [12] that states the existence of SPNE outcomes un-
der a certain condition. More specifically, it represents that if there
is a credible retaliation, it is likely to achieve cooperation among
rational players, where a credible retaliation indicates that is not
costly for a retaliator.
Repeated FAW-BWH game: As in the previous studies [9, 17],
for simplicity we consider a game only between two pools (Pool1
and Pool2). As mentioned in Section 3.1, we define a stage as the
duration of time when each pool is able to trace other pools’ attack-
ing behaviors, which enables us to obtain the condition of perfect
information in our analytical model.

In defining the repeated FAW-BWH game, it is crucial to define
a stage game G, for which we now describe how we model the set
of actions (Ai )i=1,2 and the payoff function Ui (·). First, each pool
i’s action is defined in terms of which attack is performed and the

4

An Eye for an Eye: Economics of Retaliation in Mining Pools

AFT ’19, October 21–23, 2019, Zurich, Switzerland

two pools do not attack, their payoffs are 0. If Ui is positive, Pooli
earns an extra reward. Otherwise, Pooli suffers a loss.
Homogeneous attacks: The case in which two pools execute the
same attack, FAW or BWH, has been studied in two related studies
[9, 17]. For the FAW-FAW attack, the following payoff function can
be obtained from Kwon’s work [17].

Figure 1: At the start of stage t , two pools can decide their strategy
at
i . They then know the opponent’s strategy at
−i at the end of stage
t . This process is repeated at a new stage t + 1.

= (f t

i , bt
i

and bt
i

amount of infiltration power used. We assume that a pool’s attack
is homogeneous, i.e., it executes either FAW attack or BWH attack.
However, a pool is able to change its attack across stages. Then,
in this stage game, each pool i’s action space is no-attack, FAW,
or BWH, with a choice of some infiltration power for each attack.
More formally, at stage t, each pool i’s action can be expressed as
are the infiltration powers
a vector at
), where f t
i
i
for each FAW and BWH attack, respectively (0 ≤ f t
≤ αi ). It
i , bt
i
= 0 corresponds to no-attack, in
is clear that the case of f t
i
= 0. Moreover, because we
which case we simply denote it by at
i
assume homogeneity in the attack, always only one of f t
is
i
= 0. Fig. 1 depicts a model of our repeated FAW-
positive, i.e., f t
i
BWH game between two pools. When a stage t ends, each pool i
is aware of its opponent pool’s strategy (at
) for this stage game.
−i
Then, pools can change their action, depending on the opponent’s
action at the previous stage, when a new stage game starts. To
complete the definition of the repeated FAW-BWH game, it remains
to define the payoff function Ui (at ) in (1) at each stage game, which
we will delay until Section 4.

or bt
i

= bt
i

×bt
i

4 ANALYSIS OF REPEATED FAW-BWH GAME
In this section, we study how two pools choose their strategies in
the equilibrium of the repeated FAW-BWH game, to understand
the pools’ behaviors in terms of their interaction over a long time.

4.1 Payoff Function in the Stage Game
Because pools play the same game at each stage, we remove the
stage index t in this section for simplicity. For an action profile
a = (a1, a2) of two pools, it seems natural to define the payoff Ui as
its extra reward density with respect to 1, i.e., Ui (a1, a2) = R(a1,a2)
−
1, where R(a1, a2) is the average earned reward in each round.
As described in Section 3.2, each pool’s action is expressed as its
infiltration power for either FAW or BWH attack, i.e., a1 = (f1, b1)
and a2 = (f2, b2) where either fi or bi is 0. Then, for convenience,
we separately present four possible cases as follows: for a given
profile a = (a1, a2),

αi

(cid:16)

Ui

(fi , bi ), (f−i , b−i )

(cid:17) =

bi = 0 and b−i = 0,
U F F (fi , f−i )

bi = 0 and f−i = 0,
U F B (fi , b−i )
fi = 0 and b−i = 0,
U BF (bi , f−i )

U BB (bi , f−i ) bi = 0 and f−i = 0,


where we henceforth provide the forms of four functions: U F F ,
U BB , U BF , and U F B . According to the definition of payoff Ui , if

5

U F F (fi , f−i ) =

+ fi f−i
2

(cid:18)

αi − fi
(1 − fi − f−i )(αi + f−i )
1
1 − fi
(U F F (f−i , fi ) + 1) · fi
αi + f−i

1
1 − f−i

+

+

− 1.

+ f−i (1 − αi − α−i )
(1 − f−i )(αi + f−i )
1 − αi − α−i
(1 − fi − f−i )(αi + f−i )

(cid:19)

(2)

1−f−i

In (2), the first term is obtained from the honest mining of each pool,
achieved with the computational power remaining after deducting
αi −fi
the infiltration power. Note that Pooli gets a reward of
1−fi −f−i
from the honest mining because each node earns a mining reward
based on how many blocks it generated relative to others. The sec-
ond term represents the extra reward density that is earned in the
case where the opponent generates an intentional fork and Pooli
does not generate any block. In this case, both an external honest
miner and the infiltration power of Pool−i generate a block, and the
probabilities of these events are 1−αi −α−i
and f−i , respectively. This
derives the second term. The third term is from intentional forks
caused by both Pool1 and Pool2. In this case, an external honest
miner and infiltration powers of Pool1 and Pool2 find blocks, and
then a fork with three branches occurs. If the infiltration power of
Pooli finds a block faster than that for Pool−i , its probability would
be fi ·
. On the other hand, if the infiltration power
of Pool−i generates a block faster than that for Pooli , its proba-
1−αi −α−i
bility would be f−i ·
. Considering these facts, the
1−fi −f−i
third term is derived. Lastly, the fourth term is from its infiltration
mining into the opponent and is derived from that the opponent
distributes the reward of (U F F (f−i , fi ) + 1) · fi to Pooli . Note that
Pooli infiltrates the computational power of fi into the opponent.
Next, we consider when two pools execute BWH attacks against
each other. In this case, we have the following form of the payoff
function from Eyal’s work [9], where forks are not intentionally
generated so the second and third terms in (2) disappear in (3).

1−αi −α−i
1−fi −f−i

fi
1−f−i

f−i
1−fi

·

·

U BB (bi , b−i ) =

αi −bi
(1−bi −b−i )(αi +b−i )

+ (U B B (f−i, fi )+1)·bi
αi +b−i

− 1. (3)

Heterogeneous attacks: As opposed to the payoff functions in
homogeneous attacks borrowed from previous studies [9, 17], it
still remains to establish the payoff functions for when each of two
pools execute FAW and BWH attacks. We first consider the case
when Pooli and Pool−i execute FAW and BWH attacks, respectively.
Then, the payoff U F B (fi , b−i ), which quantifies the extra reward
density, turns out to be given by:

+ (U B F (b−i,fi )+1)·fi
αi +b−i

αi −fi
(1−fi −b−i )(αi +b−i )

U F B (fi , b−i ) =
This payoff can be easily derived. First, the first term represents
the earned reward density of Pooli through its honest mining with
the computational power remaining after deducting the infiltration
power. The second term is obtained from Pooli ’s infiltration mining
into the opponent, Pool−i . Note that (4) does not have any reward

− 1. (4)

AFT ’19, October 21–23, 2019, Zurich, Switzerland

Kwon et al.

density term earned from generated forks in Pooli because Pool−i
does not generate forks in Pooli .

Now, when Pooli and Pool−i execute BWH and FAW attacks

with infiltration power bi and f−i , respectively, we have:
αi − bi
(1 − bi − f−i )(αi + f−i )

U BF (bi , f−i ) =

+ f−i
1 − bi

×

1 − αi − α−i
(1 − bi − f−i )(αi + f−i )

+

(U F B (f−i , bi ) + 1) · bi
αi + f−i

− 1.

(5)

Because only Pool−i executes the FAW attack, forks are generated
by Pool−i in only Pooli . Thus, (5) is the addition of a similar form
of (4) to the reward density (the second term) earned when forks
occur in Pooli .

4.2 Equilibrium at the Stage Game
We now discuss how two pools would behave at the equilibrium
for each stage game, before we study how rational pools behave
through long-term interactions in the repeated game. This step is of
significant importance because (i) it clearly shows how much a near-
sighted view of pools’ interaction in each stage game (as in prior
work [9, 17]) differs from a far-sighted one in the repeated games,
and (ii) understanding the per-stage equilibrium behaviors is a key
to understanding what happens if such stage games are repeated
among pools. This per-stage equilibrium is stated in Theorem 4.1.

Theorem 4.1 (Nash eqilibrium for stage game). There exists
−i ) in the stage game; it

i , a⋆

a unique Nash equilibrium (NE) a⋆ = (a⋆
is characterized as:
−i ) = (cid:16)
(f ⋆
(a⋆
i

, 0), (f ⋆

i , a⋆

(cid:17)

(8)

(7)

−i , 0)

Ui (a⋆

, where

i > 0 and f ⋆
f ⋆

i , a⋆
Ui (a⋆

if αi > α−i ,
if αi = α−i .

−i ) > 0, U−i (a⋆
−i ) = U−i (a⋆
i , a⋆

−i > 0. (6)
Further, the following payoff values are obtained for different cases of
two pools’ computational powers αi and α−i :
−i ) < 0
−i ) = 0

i , a⋆
i , a⋆
(see Appendix A.1 for our proof of the theorem.) Theorem 4.1 states
the existence and the uniqueness of the Nash equilibrium, which
is technically meaningful in the sense that per-stage equilibrium
is predictably interpretable from a mathematical perspective. The
major messages of Theorem 4.1 are: (i) when both pools are allowed
to execute FAW and BWH attacks, at the Nash equilibrium, the two
pools execute only FAW attacks (see (6)), and (ii) the larger pool
always earns an extra reward, whereas the smaller pool always
suffers a loss (see (7)). However, when they possess the same com-
putational power, no additional reward is provided to both pools
(see (8)). This is in stark contrast to the previous game where only
BWH is allowed [9]. Note that Theorem 4.1 provides the first analy-
sis of a scenario in which both BWH and FAW attacks are possible.
Also, the actions at the Nash equilibrium and their resulting payoffs
differ markedly from those in classical games such as the prisoner’s
dilemma.

4.3 ARS (Adaptive Retaliation Strategies)
We now propose strategies that induce cooperation among two
pools, i.e., no-attack, which is provably verified in the framework
of repeated games. In the classical repeated game theory, it is well-
known that “threat of future punishment” induces cooperation. We

6

Figure 2: ARSK has four states, depending on the two pools’ stand-
ings. In each state box, (G or B,G or B) represents (stndi, stnd−i ), and
Pooli ’s action at
i, ar s is presented for the given pools’ standings ac-
cording to ARSK . The tuple at each edge represents (at
−i ). The
action tuple at each edge results in a stage change.

i , at

inherit such a rationale in our study; however, the following key
differences are noted: (i) As mentioned in Section 4.2, the prisoner’s
dilemma is played repeatedly in many studies, whereas our stage
game significantly differs from the prisoner’s dilemma, and (ii) our
stage game is also defined for a continuous action space, and thus,
in punishing other pools deviating from cooperation, it is criti-
cally important to adaptively determine the amount of infiltration
power for retaliation. As a result, considering the above facts, we
should find a credible retaliation, which is necessary for inducing
cooperation according to Folk Theorem.

i,ar s

4.3.1

i , at
−i

from a different strategy. Thus, at
i

Strategy description. In this paper, we denote by (at

i , at
)
−i
the resulting actions of two pools at stage t. A given strategy of
)∞
both pools would produce the sequence of actions (at
t =0. We
now describe special strategies, named ARS (Adaptive Retaliation
Strategies), which call a subroutine Retaliate of Algorithm 2. Here
Retaliate has infinitely many versions, depending on a parameter
K that we will describe in Retaliate subroutine paragraph. There-
fore, we denote by ARSK a strategy belonging to ARS, and ARSK
is represented in Algorithm 1. When playing ARSK , an internal
variable stndi representing the standing of Pooli is maintained by
each pool; stndi represents whether Pooli has followed ARSK well
or not at the previous stage. We use the notation at
to refer to
the action when ARSK is played, in order to differentiate an action
when Pooli plays
at
i
ARSK .
ARSK : In ARSK , Pooli starts to cooperate with no-attack when
t = 0, and initializes its standing variable stndi to GOOD. At each
stage t, Pooli first sets its standing stndi , depending on whether
matches at −1
its stage t − 1 action at −1
from ARSK (S1). Thus, if
i,ar s
Pooli deviates from what ARSK does at the stage t − 1, its standing
at the stage t is set to BAD. Then, different standing values of both
pools lead to the following combinations: (stndi , stnd−i ) = (G, G),
(G, B), (B, G), (B, B), where G = ‘GOOD’ and B = ‘BAD’. To help readers
better understand ARSK , we present a state diagram of ARSK in
Fig. 2, where four states exist, depending on two pools’ standings; in
each state, we also present Pooli ’s action at
at stage t according
to ARSK . In the figure, Rt is the output of Retaliate with K (denoted
by RetaliateK in Algorithm 1), and ¬(∗) denotes an action value
that differs from (∗). The action tuple at each edge (which may
deviate from ARSK ) is what results in a state change, and we did

= at

i,ar s

i,ar s

i

An Eye for an Eye: Economics of Retaliation in Mining Pools

AFT ’19, October 21–23, 2019, Zurich, Switzerland

ARSK for each pool i

Start when t = 0:

Start the stage game with no-attack, (i.e., a
stndi = GOOD.
At each stage t ≥ 1:

0
i

= 0), and set a variable

S1. Set the standing of this stage.
== at −1
i,ar s
S2. Estimate the infiltration power.

If (at −1
i

), stndi = GOOD, else stndi = BAD.

If (stndi == GOOD) and (stnd−i == BAD)
, α−i , at −1
−i

(cid:16)
αi , at −1
i

(cid:17)

, at −1

−i,ar s

F1 = min (cid:110)

= RetaliateK
at
i
= 0.
else at
i
S3. Output at
i .

Input: Local. computation power αi , previous action at −1
Input: Opponent. computation power α−i , previous action at −1
−i

i

,

previous ARSK action at −1

−i,ar s

Output: Pooli ’s action at
i

S.1 Retaliation with FAW

S.1.1 Construct the infiltration set for FAW

IPfaw = IPfaw(at −1

, at −1
−i
S.1.2 Find the following two sets F1 and F2 as follows:

, at −1

−i,ar s

). If (IPfaw == ∅), goto S.2.

i

, at −1

−i )−

i

fi ∈ IPfaw | Ui (at −1
Ui (at −1
, at −1
i
| fi − M F

−i,ar s ) ≥ U−i ((fi , 0), 0)
i (αi , α−i )|,

(cid:111)

,

(9)

F2 = arg min
fi ∈I Pfaw

S.1.3 Compute the infiltration power fi for retaliating with FAW as
fi = min{F1 ∪ F2}, and set at
i

= (fi , 0). Goto S.3.

S.2 Retaliation with BWH

S.2.1 Construct the infiltration set for BWH

IPbwh = IPbwh(at −1

, at −1
−i
S.2.2 Find the following two sets F1 and F2 as follows:

, at −1

−i,ar s

).

i

B1 = min (cid:110)

bi ∈ IPbwh | Ui (at −1
Ui (at −1
, at −1
i

i

, at −1

−i )−

−i,ar s ) ≥ U−i ((0, bi ), 0)
i (αi , α−i )|,

(cid:111)

,

(10)

B2 = arg min
bi ∈I Pbwh

|bi − M B

S.2.3 Compute the infiltration power bi for retaliating with BWH as
bi = min{B1 ∪ B2}, and set at
i
S.3 Terminate. Output at
i .

= (0, bi ). Goto S.3.

Algorithm 2: Retaliate Subroutine where M F
given in (13) and (14), respectively.

i (αi , α−i ) and M B

i (αi , α−i ) are

infiltration set IPfaw for the FAW attack is given as:

IPfaw(at −1

i

, at −1
−i

−i,ar s ) := (cid:110)
, at −1

fi | U−i (at −1

, at −1

i
< U−i (at −1

i

−i ) + K · U−i ((fi , 0), 0)
(cid:111)
, at −1
−i,ar s ), 0 ≤ fi ≤ αi

,

(11)

where K is an arbitrary number in [0, 1). As K gets close to 1, the
retaliator tries to use FAW attacks as much as possible rather than
BWH attacks. Similarly, we define IPbwh for the BWH attack as:

i

i

.

(12)

−i,ar s ) := (cid:110)
, at −1

, at −1

, at −1

, at −1
−i

IPbwh(at −1

−i ) + U−i ((0, bi ), 0)
(cid:111)
−i,ar s ), 0 ≤ bi ≤ αi

bi | U−i (at −1
i
< U−i (at −1
The main goal of Retaliate is to determine which attack to perform
and how much infiltration power is needed to retaliate against the
deviating opponent while maximizing the retaliator’s (long-term)
payoff. Thus, the crux of Retaliate is to strike a good balance
between retaliation and selfishness. To this end, we first prioritize
FAW over BWH, simply because the FAW attack is known to be
more profitable than the BWH attack [17] (see S.1 and S.2, where
S.1 is first attempt). We henceforth focus on the steps for retaliation
with FAW (S.1), which is quite similar to that with BWH, where
we first construct the FAW-infiltration set IPfaw as in (11). In fact,
it is possible for IPfaw to be empty, and this occurs when the FAW
attack has no effect of retaliation, in which case the retaliation with
BWH is then tried (S.2). Note that the BWH-infiltration set (S.2.1) is
provably non-empty. Intuitively, this is because BWH is known to

Algorithm 1: ARS (Adaptive Retaliation Strategies) for two pools.

not present the action tuples that do not change a state (e.g., in
(G,G), the action (0, 0) does not incur the state change).

i

and at −1

To summarize ARSK , Pooli starts with cooperation, and then
retaliates when the opponent deviates from cooperation. However,
if, as a response to Pooli ’s retaliation, the opponent goes back
to cooperation, Pooli stops retaliating and resumes cooperation
with its opponent. If the opponent is not back to cooperation (thus
not following ARSK ) and keeps executing attacks, Pooli , which
follows ARSK , also keeps retaliating. When two pools deviate from
ARSK simultaneously, both of them turn out to cooperate at the
next stage. Retaliation phase is presented in Fig. 2, where Pooli
retaliates against its opponent (S2) only when the standing is (G, B)
(i.e., when Pooli follows ARSK but the opponent deviates from
ARSK ). Considering this fact, at least one of at −1
, which
are two inputs of Retaliate, should be 0 (see the actions at edges
toward (G, B)). This is because (i) if at −1
(cid:44) 0, it indicates that the
i
opponent’s standing at stage t − 1 was BAD, and thus Pool−i should
not attack according to ARSK , i.e., at −1
(cid:44) 0,
at −1
should be 0. After Pooli ’s retaliation, the opponent goes back to
i
cooperation as a contrite behavior; the contrite phase is represented
as a change from (G,B) to (G,G), where two pools cooperate (Fig. 2).
In the (B,B) state where two pools deviate from ARSK , both of
them cooperate at the next stage, making the transition to (G,G).
, ¯at −1
Note that ARS assumes that Pooli has values of at −1
,
−i
−i
stnd−i , and α−i of its opponent; we will discuss how that informa-
tion is available to Pooli in Section 6. Indeed, there exists a strategy,
contrite tit-for-tat (CTFT) [3], which uses standings similar to (not
the same as) that for ARS and induces cooperation in the iterated
prisoner’s dilemma. However, CTFT is studied as a strategy for the
iterated prisoner’s dilemma with a discrete action space including
only two actions, where ARS significantly differs from CTFT.

is 0, or (ii) if at −1

−i,ar s

−i,ar s

−i,ar s

Retaliate subroutine: Prior to explaining Retaliate, we first in-
troduce the notion of an infiltration power candidate set (or simply,
infiltration set) as follows: for given pools’ local and opponent ac-
tions at −1
−i,ar s , we define the infiltration set with
respect to either FAW or BWH as the set of Pooli ’s infiltration
powers that makes Pool−i ’s attack unprofitable as a retaliating re-
sponse to Pool−i ’s deviation from cooperation. Formally, Pooli ’s

, and at −1

, at −1
−i

i

7

AFT ’19, October 21–23, 2019, Zurich, Switzerland

Kwon et al.

have more strength in damaging the opponent more severely [17].
In Appendix A.3, we prove the non-emptiness of IPbwh.

Next, in balancing between retaliation and selfishness, we con-
struct two filtered sets of infiltration powers, F1 and F2 (S.1.2),
which consider retaliation and selfishness, respectively. In F1, Pooli
following ARSK computes the set of infiltration powers in pro-
portion to the degree of Pool−i ’s attack, i.e., generating the same
amount of loss to Pool−i as that to Pooli from Pool−i ’s attack, which
we call "equal retaliation". In F2, the set of infiltration powers is con-
structed so as to maximize Pooli ’s payoff for the FAW attack, where
fi ∈ F2 is chosen to be closest to the infiltration power M F
i (α1, α2)
maximizing Pooli ’s payoff Ui , expressed as:
√

1−αi (1+α−i )−(1−αi −α−i )(1+α−i −αi α−i )

i (α1, α2) = −1+
M F

(13)

,

αi (1−αi −α−i )

which is obtained from [17]. Finally, in S.1.3, Pooli decides to retal-
iate by deciding between equal retaliation (F1) and selfishness (F2).
Retaliate chooses the minimum infiltration power for FAW in F1
and F2, which is the minimum amount of power to achieve retal-
iation while considering its own payoff. Therefore, if Pooli must
use a significant portion of its computational power to infiltrate
for equal retaliation, it instead maximizes its payoff rather than
pursuing equal retaliation. Sets B1 and B2, which are similar to F1
and F2 for the FAW attack, are constructed for the BWH attack,
where M B

i (α1, α2) is derived from [9], given as:

M B

i (α1, α2) =

−α−i (1−αi )+

−i (−1+αi +αi α−i )

(cid:113)

−α 2
1−αi −α−i

(14)

Note that Retaliate outputs 0 if 0 ∈ F1, in which case Pooli does
not need to retaliate. This occurs when the opponent did not attack
at stage t − 1, even though the opponent would retaliate against
Pooli at stage t − 1 according to ARSK . In this case, because the
opponent did not follow ARSK , the opponent’s standing would
be BAD, where Pooli would call Retaliate. However, Retaliate
would usually output 0 in this case, and Pooli would not attack for
retaliation because IPfaw and F1 would include 0 in most cases.

4.3.2 Equilibrium Analysis. Next, we prove that ARS is a sub-

game perfect Nash equilibrium for a sufficiently large δ .

Theorem 4.2. There exists a function FK (α1, α2) such that, for all
discount factor δ ≥ FK (α1, α2), the two-pool strategy vector (ARSK ,
ARSK ) is a subgame perfect Nash equilibrium. Function FK (α1, α2) is
always less than 1, and FK (α1, α2) is an increasing function of K and
|α1 −α2| for given α1. Moreover, (ARSK , ARSK ′) is a Nash equilibrium
for all δ ≥ Fmax(K,K ′)(α1, α2).
A proof of Theorem 4.2 appears in Appendix A.2. In the proof of
Theorem 4.2, we show that it is not more profitable for each player
to deviate ARS at the start of any subgame when compared to the
case where it follows ARS. This implies that ARS is a subgame
perfect Nash equilibrium according to one-time deviation property.
If two pools use one of ARS (their strategies need to be not
necessarily the same), the strategy vector is a Nash equilibrium.
Especially, if two pools use the same strategy, the strategy vector is
a subgame perfect Nash equilibrium. As described in Section 3.2,
a subgame perfect Nash equilibrium refines a Nash equilibrium
by eliminating non-credible threats, which is a strategy vector that
rational pools are actually unlikely to follow. In addition, a large

8

value of δ implies a condition in which pools consider future payoffs
significantly, or the probability that pools are patient enough to
stay inside the system for a long time. Indeed, most pools, including
Slush, Eligius and F2Pool, are operated for a long time in practice.
A large value of δ is also better satisfied when the duration of one
stage is short compared to the pools’ entire operation period. In
Section 6, we explain that the duration of a stage period can be
short, which supports the practical value of our analytical result.
Indeed, there are many other subgame perfect Nash equilibria
(from Folk Theorem in repeated games [12]) in the repeated FAW-
BWH game, which trivially include the one that two pools always
execute FAW attacks against each other. From a manager’s per-
spective, the manager would want to increase its pool size while
earning extra rewards, until the pool increases to a size that does
not seriously threaten the system. This is a good reason for the
manager to execute the FAW attack. Meanwhile, it is unknown
whether the subgame perfect Nash equilibria have cooperation
between pools because the existence of credible retaliation in the
repeated FAW-BWH game has not been studied to the best of our
knowledge. Our results imply that cooperation can be stable when
ARS is used even though the FAW-BWH game has a certain winner;
i.e., a larger pool. Moreover, ARS includes infinitely many strategies
with K in (11). As such, there are infinitely many ways to achieve
cooperation between pools. In addition, ARS restores cooperation
even if FAW and BWH attacks impulsively occur, which is another
advantage of ARS. For example, if Pooli impulsively attacks, the
opponent would retaliate. After that, Pooli does not attack, being
contrite, and two pools achieve the no-attack status.

5 NUMERICAL ANALYSIS
In this section, we use a numerical analysis to demonstrate how
much infiltration power each pool would use for retaliation in
ARSK in response to the opponent’s action. We simulate the re-
peated FAW-BWH game with varying Pool1 and Pool2’s sizes. We
consider a case in which Pool1 deviates from ARSK to attack Pool2
while maximizing its payoff U1 during one stage. As a result, Pool2
would retaliate against Pool1 according to ARSK . In this section,
we consider a strategy ARS1− , where K is close to 1.

and r B
i

Fig. 3 represents when Pool1 optimally executes the FAW attack
to maximize its payoff. Then, Pool2 following ARS1− retaliates
at the next stage. The x and y-axes are Pool1 and Pool2’s sizes,
respectively. Moreover, we define infiltration ratios ri = (r F
i ),
i , r B
are proportions of infiltration power fi and bi for
where r F
i
= fi
= bi
).
Pooli ’s computational power, respectively (i.e., r F
αi
αi
i
Fig. 3a represents Pool2’s infiltration ratio r F
2 for retaliation using
the FAW attack. In the white region of Fig. 3a, Pool2 cannot retaliate
against Pool1 with the FAW attack. Thus, Pool2 should retaliate
using the BWH attack. Fig. 3b represents Pool2’s infiltration ratio r B
2
for retaliation using the BWH attack. Here, we can see that all cases
are covered with the colored regions in Fig. 3a and 3b. Considering
two stages where Pool1 first executes the FAW attack and then
Pool2 retaliates, Fig. 3c and 3d represent average payoffs of Pool1
and Pool2 for two stages, respectively. That is, these figures show
Ui (a0)+Ui (a1)
when we denote each of two stages by stage 0 and
2
1. As shown in Fig. 3c, Pool1’s average payoff is always negative,

, r B
i

An Eye for an Eye: Economics of Retaliation in Mining Pools

AFT ’19, October 21–23, 2019, Zurich, Switzerland

(a) Pool2’s infiltration ratio for retalia-
tion using the FAW attack.

(b) Pool2’s infiltration ratio for retalia-
tion using the BWH attack.

(c) Average relative extra reward (%) of
Pool1 for two stages.

(d) Average relative extra reward (%) of
Pool2 for two stages.

Figure 3: Pool1 optimally executes the FAW attack.

(a) Pool2’s infiltration ratio for retalia-
tion using the FAW attack.

(b) Pool2’s infiltration ratio for retalia-
tion using the BWH attack.

(c) Average relative extra reward (%) of
Pool1 for two stages.

(d) Average relative extra reward (%) of
Pool2 for two stages.

Figure 4: Pool1 optimally executes the BWH attack.

(a) Pool2’s infiltration ratio for retal-
iation with the FAW attack against
Pool1’s FAW attack.

(b) Pool2’s infiltration ratio for retal-
iation with the BWH attack against
Pool1’s FAW attack.

(c) Average relative extra reward (%) of
Pool1 for the two stages when Pool1 ex-
ecutes the FAW attack.

(d) Average relative extra reward (%) of
Pool2 for the two stages when Pool1 ex-
ecutes the FAW attack.

Figure 5: Pool1 with computational power of 20% executes the FAW attack.

(a) Pool2’s infiltration ratio for retal-
iation using the FAW attack against
Pool1’s BWH attack.

(b) Average relative extra reward (%) of
Pool1 for the two stages when Pool1 ex-
ecutes the BWH attack.

(c) Average relative extra reward (%) of
Pool2 for the two stages when Pool1 ex-
ecutes the BWH attack.

Figure 6: Pool1 with computational power of 20% executes the BWH attack.

9

AFT ’19, October 21–23, 2019, Zurich, Switzerland

Kwon et al.

meaning that ARS1− makes FAW attacks unprofitable. Moreover,
Fig. 3d shows that Pool2 can completely recover a loss from Pool1’s
attack in the case where Pool2 retaliates with the FAW attack.

Fig. 4 represents when Pool1 optimally executes the BWH attack
to maximize its short-term payoff. Similar to Fig. 3, Fig. 4a and 4b
represent Pool2’s infiltration ratio r F
2 , respectively. Fig. 4c
and 4d respectively represent the average payoffs of Pool1 and
Pool2 for two stages. Fig. 4c shows that Pool1 always suffers a loss
from the retaliation of Pool2 when Pool1 executes the BWH attack.
Therefore, it shows that ARS makes BWH attacks unprofitable.

2 and r B

As a representative scenario, we simulate the repeated FAW-
BWH game in terms of various Pool1’s infiltration ratio used for
attacks, assuming that Pool1’s size is 0.2 (20%). Fig. 5 and 6 represent
Pool1’s execution of FAW and BWH attacks, respectively. The x
and y-axes are Pool1’s infiltration ratio used for attack and Pool2’s
sizes, respectively. Fig. 5a and 5b show the infiltration ratio r F
2 and
2 for retaliation against Pool1, respectively. Because the extent of
r B
retaliation by ARS depends on the loss caused by the opponent’s
attack, Pool2’s infiltration ratio for retaliation depends on Pool1’s
attack infiltration ratio. Fig. 5c and 5d represent the average payoffs
of Pool1 and Pool2, respectively, for two stages in which Pool1
executes the FAW attack and then Pool2 retaliates. Pool1 always
suffers a loss by deviating from ARS because all colors in Fig. 5c
indicate negative values. Meanwhile, there are some cases in which
Pool2 can earn extra profit in the process of retaliation, as shown
in Fig. 5d. Similar to Fig. 5, Fig. 6 shows Pool2’s infiltration ratio
2 for retaliation, and the attacker’s and victim’s average payoffs
r F
for two stages when Pool1 executes the BWH attack. In most cases,
Pool2 chooses the FAW attack rather than the BWH attack for
retaliation. Even though there exist some cases to execute the BWH
attack in response to ARS1− , we omit Pool2’s infiltration ratio r B
2
for retaliation with the BWH attack because the region of such
cases is very small (see small areas bounded by black bold lines
at left-bottom corners in Fig. 6). As a result, BWH attacks become
unprofitable by ARS.

Table 1: Considering the current power distribution [2] and assum-
ing that BTC.com is an attacker, this table lists infiltration ratios
ri = (r F
i ) that four pools use for retaliation according to ARS1− .

i , r B

Name

AntPool
ViaBTC
DPool
Bixin

i )(%)
i , r B
(r F
against FAW
(0, 14.33%)
(0, 13.7%)
(0, 17.71%)
(0, 21%)

Total
Payoff
-1.89%
-0.54%
-0.004%
-0.025%

i )(%)

i , r B
(r F
against BWH
(46.2%, 0)
(47.2%, 0)
(0, 13.14%)
(0, 13%)

Total
Payoff
-0.78%
-0.15%
-1.1%
-0.63%

Also, we consider the current power distribution obtained from
Blockchain.info [2]. We assume that BTC.com, which is the largest
pool as of Jan 2019 and has a computational power of about 25%,
optimally executes FAW and BWH attacks against each of four
pools (AntPool, ViaBTC, DPool, and Bixin), which have respective
computational powers of 15%, 10%, 3.5%, and 2%. In this case, four
pools would retaliate against BTC.com according to ARS. Table 1
represents the infiltration ratio ri = (r F
i ), which Pooli uses for
retaliation with FAW and BWH against BTC.com, respectively. The
second and fourth columns show how each pool should retaliate

i , r B

against BTC.com’s FAW and BWH attacks, respectively. The third
and fifth columns represent the attacker’s total payoff for each
victim pool when the attacker executes FAW and BWH attacks,
respectively. As shown in Table 1, by retaliating according to ARS1− ,
the four pools make the attacks of BTC.com unprofitable.

i

i

−i,ar s

−i,ar s

−i,ar s

and at −1

, and at −1

, α−i , stnd−i, at −1
−i

6 IDENTIFYING THE OPPONENT’S ATTACK
To follow ARS, Pooli needs to know seven parameters in Table 2: αi ,
stndi, at −1
. In this section, we de-
scribe how the pool can obtain these seven parameters, which make
it possible for pools to adopt ARS. Among these parameters, Pooli
already knows αi , stndi, and at −1
, which are referred to as internal
variables in this paper. Also, Pooli can easily obtain α−i because the
computational power of pools can be approximately calculated from
the mined block information [2]. Among the remaining parameters,
stnd−i, at −1
, and at −1
and at −1
, Pooli needs to know at −1
−i
−i
−i,ar s
because stnd−i is determined by at −1
. Moreover, the
−i
value at −1
is 0 if t − 1 is 0. If t − 1 is positive, the value can be
obtained from pools’ actions at stage t − 2. In other words, Pooli
can determine at −1
at
stage t − 2. As a result, Pooli only needs to know the opponent’s
previous action in order to determine stnd−i, at −1
−i

by obtaining the opponent’s action at −2
−i

To guess the opponents’ actions, Pooli can plant moles in other
pools. Through the moles, Pooli can observe other pools’ average
reward densities and stochastically determine other pools’ actions
from their observed average reward densities. However, it may
take a long time to find out other pools’ actions with their average
reward densities. Note that, if the time duration of a stage increases,
the discount factor δ would be decreased because pools might focus
on the increase of short-term advantages rather than long-term
value. This implies that it is important to shorten the time duration
of a stage. In the following section, we describe how to achieve this.

, and at −1

−i,ar s

−i,ar s

−i,ar s

.

Notation

αi
stndi
at −1
i
α−i
stnd−i
at −1
−i
at −1
−i, ar s

Table 2: List of parameters.

Definition
Computational power of Pooli
Standing of Pooli
The action of Pooli at time t − 1
Computational power of the opponent
Standing of the opponent
The action of the opponent at time t − 1
Output of ARS of the opponent at time t − 1

Detection of Attacks: First, Pooli must determine whether it is
being attacked. Indeed, Pooli can easily detect FAW attacks because
the fork rate increases [17]. Moreover, the manager of victim pool
can detect BWH attacks by investigating the ratio between the
number of submitted shares and the number of found blocks [9, 21].
Furthermore, we found that the period of attack detection can
be reduced if the manager can focus only on the shares submitted
4, rather than all shares.
by unlucky miners
For example, if a victim pool’s size is 20% and a BWH attacking
pool infiltrates 0.5% into the pool, the victim pool would find 20.1%

3 and short-term miners

3Miners who submitted a relatively small number of FPoWs
4Miners who stayed in the pool for relatively short period of time

10

An Eye for an Eye: Economics of Retaliation in Mining Pools

AFT ’19, October 21–23, 2019, Zurich, Switzerland

(0.2/0.995) of all blocks on average. Note that the victim pool would
find 20.5% of all blocks on average in the case that the infiltrating
power of 0.5% belongs to benign miners. When the manager of
the victim pool considers entire 2000 blocks (about two weeks in
Bitcoin), there is an approximately 35.82% probability that the ratio
of the victim pool’s found blocks to all blocks is 0.201, under the
assumption that an attack had not occurred. Therefore, it is difficult
for the manager to determine whether an attack has occurred. How-
ever, if the manager considers the shares submitted by only unlucky
and short-term miners, he would be able to find these shares that ac-
count for about 0.5% of the entire computational power. Assuming
that the attack had not occurred, the probability that these shares
do not contain FPoWs is about 0.0045%. Therefore, the manager can
successfully detect attacks and estimate the infiltration power used
for attacks. If a pool does not detect attacks, other pools’ actions are
set as 0. Otherwise, the pool needs to identify the attacking pool.

Identification of Attackers: The FAW or BWH attacker receives
a portion of the reward earned by the victim pool. Therefore, the
attacker’s reward is related to the number of blocks generated
from the victim pool. We denote by P the period in which the
attacker finds one block in its pool. At the end of P, miners in the
attacker’s pool receive a portion of the reward for the one block
and the rewards gained from the victim pool for period P. For
ease of presentation, we use α and β to represent the attacker’s
size and the victim’s size, respectively, instead of α−i and αi . We
also suppose the attacker infiltrates a fraction γ of the attacker’s
computational power into the victim pool. Moreover, we denote by
Rdp the earned reward density of miners belonging to the attacking
pool for the period P. If the number of generated blocks from the
victim pool for the period P is N , Rdp would be 1
. We can
α
easily check that N has a geometric distribution with a parameter
for BWH attack

(1−γ )α
β +γ α (1−α −β )+(1−γ )α
(see Theorem A.4 in Appendix A.4 for details).

for FAW attack, and (1−γ )α
β +(1−γ )α

+ N γ
β +γ α

If α does not change and the pool does not attack, the reward
density Rdp for the period P is fixed at 1
. Meanwhile, if the pool at-
α
tacks, Rdp would continuously change depending on N . Therefore,
the victim can identify the attacking pool immediately by observ-
ing their variances in Rdp after planting moles in pools. However,
even if attacks do not occur, the reward density as well as α and
β changes in practice. If α usually has a large variance, it would
indeed be difficult to identify the attacker by investigating the vari-
ance in the reward density. Thus, to determine this, we should find
out how much is the variance in pools’ computational powers in
real world when attacks do not occur. To this end, we collected hash
rates from two pools (ViaBTC [31] and BTC.com [4]) by monitoring
their hash rates over one month (Jan. 21, 2019∼Feb. 18, 2019). Two
pools publicly provide their average hash rate (PH/s) for one hour.
Using the data, we first normalized their computational power and
then calculated the reward density when assuming that these pools
are benign, as a reciprocal number of computational power (e.g., if
a pool’s computational power is 0.2, its reward density Rdp would
be 5). The reward density at time t indicates how much of the re-
ward per computational power a pool miner can earn when the
corresponding pool finds one block at time t. Note that the value of

(a) ViaBTC’s reward densities

(b) BTC.com’s reward densities

Figure 7: Reward densities of two pools. In each figure, the
blue and orange lines represent each pool’s reward density
when the pool executes FAW attacks and when the pool co-
operates, respectively.
Rdp
E[P ]
are honest, where E[P] is the mean of P.

for each miner is the same regardless of pool when all miners

We simulated two scenarios with the FAW attack: (1) first sce-
nario (attack pool: ViaBTC) and (2) second scenario (attack pool:
BTC.com) in which the attack pool executes the FAW attack with
an infiltration power of 0.005 (0.5%) against the victim pool with a
computational power 0.2 (20%). Fig. 7 shows the reward densities
Rdp of two pools. Blue and orange lines represent reward densi-
ties observed when each pool executes the FAW attack and when
they are benign, respectively. In Fig. 7, blue lines fluctuate notice-
ably more than the orange lines. By running the simulation several
times, we observed that the variation in the blue lines was usually
about 99∼152 and 24∼32 times the variation in the orange lines for
ViaBTC and BTC.com, respectively.

We also simulated two scenarios with the BHW attack: (1) first
scenario (attack pool: ViaBTC) and (2) second scenario (attack pool:
BTC.com) in which the attack pool executes the BWH attack with
an infiltration power of 0.005 against the victim pool with a compu-
tational power 0.2. Similarly, in two cases, the variance in reward
densities of the attacker when the attack is executed increases about
85∼177 and 22∼36 times that for when the attack is not executed,
respectively. For space reasons, we omit figures representing the
simulation results similar to Fig. 7. These results show that if a pool is
a FAW or BWH attacker, the pool’s reward density Rdp would usually
increase (or decrease) when N increases (or decreases). Therefore, the
victim can identify the attacker by observing the variance in reward
densities in other pools and by comparing it with the number of
blocks found in his pool. Probably, the attacker would try several
methods to reduce the variance in the attacker’s reward density to
hide the attack evidence. However, we note that the victim can still
observe relatively high variance in the attacker’s reward density
even when such evasion methods are used (see Appendix A.5).

11

AFT ’19, October 21–23, 2019, Zurich, Switzerland

Kwon et al.

ARSK for each pool i against pool j (cid:44) i

Start when t = 0:

Start the stage game with no attack, (i.e., a
stndij = GOOD.
At each stage t ≥ 1:

0
i j

= 0), and set a variable

S1. Set the standing of this stage.
== at −1
S2. Estimate the infiltration power.

If (at −1
i j

i j,ar s

), stndij =GOOD, else stndij =BAD.

If (stndij == GOOD) and (stndji == BAD)
, αj , at −1
ji

(cid:16)
αi , at −1
i j

(cid:17)

, at −1

ji,ar s

= RetaliateK
= 0.

at
i j
else at
i j
S3. Output at

i j .

Algorithm 3: ARS for multiple pools.

Summary: In summary, the victim first determines whether attacks
occurred by investigating the fork rate and the ratio of found blocks
to submitted shares. This method also allows the victim to estimate
the infiltration power in the victim pool. The victim then identifies
the attacker by investigating the variance in Rdp in other pools.
Using the above two methods, a pool can identify other pools’
actions. Therefore, a pool can find out all seven parameters in
Table 2 to run ARS.

i j,ar s

)j(cid:44)i , (at

and bt
i j

7 MULTIPLE POOLS
In this section, we present ARS for n pools (Pooli : i = 1 ∼ n). To
this end, we now specify, for all notations of Pooli ’s standing and
action, those against Poolj for each j (cid:44) i, such as stndi j , at
i j , and
i j,ar s . Then, Pooli maintains n − 1 dimensional standing vectors
at
=
(stndi j )j(cid:44)i and action vectors (at
i j
are the infiltration powers for FAW and
(f t
i j , bt
i j
BWH attacks, respectively. ARSK of Pooli against Poolj is described
in Algorithm 3 (similar to Algorithm 1). When Pooli follows ARSK ,
the pool retaliates against Poolj only if stndi j and stndji are GOOD
and BAD, respectively, where Retaliate in Algorithm 3 is similar to
that in Algorithm 2. The difference between Retaliate for n and
two pools is that n-pool Retaliate simply replaces fi and bi in
Algorithm 1 with fi j and bi j , and outputs at
i j

)j(cid:44)i . Note that at
i j

), where f t
i j

For the identification of attackers, a mechanism similar to that
described in Section 6 can be applied. Even if multiple attackers
execute attacks against multiple victims in parallel, each victim can
find out who the attacker is because the corresponding attacker’s
reward density fluctuates depending on the number of blocks found
by the corresponding victim. In addition, when multiple pools target
a victim, the victim can identify those attackers and estimate their
infiltration rates because each attacker’s reward density variance
depends on its infiltration rate. More specifically, the larger infiltra-
tion rate is, the higher variance in the attacker’s reward density is.
To distinguish FAW from BWH, the victim can investigate a fork
rate. Note that, because the FAW attack is to intentionally generate
a fork with blocks generated by a victim and another miner, the
fork rate from the FAW attack pool is relatively low compared with
those of other pools.

.

i j , r B

It seems natural to expect that, similar to ARS for two pools,
ARS for n pools will make attacks unprofitable and thus induce co-
operation, despite the mathematical challenges in formally proving
it due to complex inter-coupling among n pools. We numerically
conduct this analysis through the simulation of the scenario in
which BTC.com (Pool1) possessing 25% computational power op-
timally executes FAW or BWH attacks against four other pools
(AntPool (Pool2), ViaBTC (Pool3), DPool (Pool4), and Bixin (Pool5))
at the same time while maximizing its short-term payoff, and four
other pools follow ARS1− (see Table 3). In Table 3, we denote the
infiltration ratios for FAW and BWH attacks of Pooli against Poolj
by ri j = (r F
i j ). The third and sixth columns show the optimal
(j = 2 ∼ 5) of BTC.com for FAW
infiltration ratios r F
1j
and BWH attacks, respectively; these ratios maximize the payoff
of BTC.com. The fourth and seventh columns show each pool’s
infiltration ratio for retaliation against BTC.com’s FAW and BWH
attacks, respectively. Finally, the fifth (or eighth) column represents
BTC.com’s payoff for two stages in which BTC.com first executes
the FAW (or BWH) attack and then four pools retaliate against
BTC.com. For example, when BTC.com executes FAW attacks using
infiltration ratios of 22.7%, 15.1%, 5.3%, and 3% against AntPool,
ViaBTC, DPool, and Bixin, respectively, the four pools would re-
taliate against BTC.com at the next stage according to the fourth
column. In this case, BTC.com suffers a loss of 5.4 % for two stages
in the aggregate. As such, BTC.com’s total payoff becomes negative
when the pool executes FAW and BWH attacks. Considering these
results, it becomes unprofitable to attack, and rational pools sustain
cooperation without attacks when they follow ARS.

and r B
1j

8 DISCUSSION
8.1 Closed Pools and Solo Miners
Even though we focused on attacks executed only by open pools in
this paper, solo miners or closed pools can also execute FAW and
BWH attacks in practice. If a solo miner or closed pool is an attacker,
the victim cannot retaliate against the attacker because the victim
cannot infiltrate its moles. This fact may lead to a rational solo
miner or closed pool to execute FAW and/or BWH attacks. How-
ever, fortunately, it is widely known that solo miners and closed
pools have limited computational power. To estimate the current
size of solo miners or closed pools, we observed the hashrate distri-
bution in websites given from BTC.com [26] at the time of writing
(Jan. 2019), and we found the total of 22 pools. Among them, BitFury
and 58COIN are only closed pools with about 3.1% and 1.3% compu-
tational powers, respectively. If each of them executes FAW attacks,
separately, against BTC.com, which has about 25% computational
power as the largest mining pool, BitFury and 58COIN earn extra
reward densities of 0.74%, 0.32%, respectively. Moreover, BTC.com
suffers losses of 0.09% and 0.016% from each attack. However, as
we can see, the impacts of those attacks seem rather marginal.

8.2 Infiltration Power
Pooli ’s infiltration power into other pools should be loyal to Pooli [9,
17]. The loyal power can be the manager’s own computational
power or cloud mining [6], or the computational power of miners
with a private relation to the manager. Moreover, pools’ loyal power

12

An Eye for an Eye: Economics of Retaliation in Mining Pools

AFT ’19, October 21–23, 2019, Zurich, Switzerland

Table 3: The simulation results of ARS for multiple pools. The third and sixth columns show the optimal infiltration ratio for BTC.com’s
FAW and BWH attacks, respectively. The fourth and seventh columns show each pool’s infiltration ratio for retaliation against BTC.com’s
FAW and BWH attacks, respectively. Finally, the fifth (or eighth) column represents BTC.com’s payoff for two stages in which BTC.com first
executes the FAW (or BWH) attack and then four pools retaliate against BTC.com.

Name

AntPool
ViaBTC
DPool
Bixin

Computational Power

15%
10%
3.5%
2%

r F
1j
22.7%
15.1%
5.3%
3%

j1, r B
(r F

j1) against FAW
(0, 13.67%)
(0, 13.7%)
(0, 13.14%)
(0, 13%)

U1

−5.4%

r B
1j
9.5%
6.4%
2.2%
1.3%

j1, r B
(r F

j1) against BWH
(46.2%, 0)
(47.2%, 0)
(0, 13.14%)
(0, 13%)

U1

−1.55%

ratios are trade secrets. In Section 5, there exist some cases in which
the infiltration ratio for retaliation against the attacker is greater
than 80%. However, these are extreme cases in which the victim
pool’s size is very small and the attacker’s size is close to 50%. In the
current computational power distribution, the infiltration power
for retaliation is less than 50%, as shown in Table 1. However, it is
possible that a pool has a loyal power of less than 50%. For example,
if AntPool has a loyal power of less than 46.2%, the pool cannot
prevent the BWH attack of BTC.com through retaliation with the
FAW attack. Therefore, to retaliate against BTC.com, Antpool can
execute the BWH attack instead of the FAW attack. In this case,
Antpool needs only about 14.33% infiltration ratio to prevent the
BWH attack through retaliation with the BWH attack of its own.

8.3 Sabotage Attack
We showed that rational pools can cooperate by making attacks
unprofitable through ARS. However, FAW and BWH attacks can
still be executed by a large pool to disable a small pool (called
Sabotage attack) because a small pool’s loss is greater than a large
pool’s loss when the large pool deviates from ARS. This situation is
commonly known as the Chicken Game. If the small pool stops the
operation, the large pool would be the winner despite of the loss
in their reward because the small pool’s miners may migrate into
the large pool. However, if two pools among several pools launch
attacks against each other, other pools not involved in the attack
do not suffer losses stemming from the attack. Therefore, even if
the small pool ceases the mining operation, the small pool’s miners
would move into other pools rather than the large pool. As a result,
the large pool cannot earn a direct profit through sabotage attacks.

9 RELATED WORK
Game theory has been used for analyzing attacks and protocols in
Bitcoin. Kroll et al. [16] analyzed the economics of Bitcoin mining
under the assumption that all miners are rational. They showed that
there is a Nash equilibrium in which all miners comply with the
Bitcoin protocol when considering a 51% attack. Several studies [14,
19] modeled a game in which two pools decide whether to trigger a
DDoS attack against an opponent. Lewenberg et al. [20] considered
miners’ interactions among mining pools as a cooperative game.
They found that some miners would always switch among pools
for their profit if the communication delay in the network is large.
Luu et al. [21] modeled a power splitting game to analyze how an
attacker can optimally execute the BWH attack against multiple
pools. Moreover, Eyal [9] showed that a BWH game between two
pools results in the prisoner’s dilemma. Carlsten et al. [5] and
Tsabary et al. [30] analyzed a game among miners when miners

13

earn only transaction fees as block rewards in the future. Kwon
et al. [17] proposed the FAW attack and analyzed the FAW game
between two pools in which can break the prisoner’s dilemma. Yoo
et al. [32] studied an incentive design in proof-of-work blockchains,
considering a cooperative and non-cooperative strategy of miners.
Kwon et al. [18] analyzed a rational behavior of miners when two
coins with a compatible proof-of-work mechanism exist. To the
best of our knowledge, this paper is the first attempt to consider
and analyze both FAW and BWH attacks together in a repeated
game. Moreover, we propose infinitely many strategies inducing
cooperation among rational pools under the presence of both FAW
and BWH attacks.

10 CONCLUSION
In this paper, by modeling a repeated game, we studied how pools
can cooperate to avoid the health of systems being weakened from
the attacks. Because the stage game, FAW-BWH game, highly differs
from the prisoner’s dilemma, it may be challenging to find a strat-
egy inducing cooperation among pools. To solve this challenging
problem, we proposed novel infinitely many strategies, called ARS,
which are likely to be adopted by rational pools. In ARS, a pool
first cooperates and then retaliates against the attacker in the case
when attacks occur. ARS provably strikes a good balance between
retaliation and selfishness. Moreover, there are several parameters
required to use ARS in practice. Thus, we discuss the methods to de-
termine the parameters, investigating the real-world data collected
from mining pools. As a result, ARS makes cooperation among
pools stable, sustainable, and recoverable.

REFERENCES
[1] Robert Axelrod et al. 1987. The evolution of strategies in the iterated prisonerâĂŹs

dilemma. The dynamics of norms (1987), 1–16.

[2] Blockchain Info 2018. Hashrate Distribution. https://blockchain.info/pools. (2018).

[Online; accessed 02-May-2018].

[3] Robert Boyd. 1989. Mistakes allow evolutionary stability in the repeated pris-

oner’s dilemma game. Journal of theoretical Biology 136, 1 (1989), 47–56.

[4] BTC.com 2018. BTC.com. https://pool.btc.com/pool-stats. (2018).

[Online;

accessed 30-April-2018].

[5] Miles Carlsten, Harry Kalodner, S Matthew Weinberg, and Arvind Narayanan.
2016. On the Instability of Bitcoin without the Block Reward. In Conference on
Computer and Communications Security. ACM.

[6] Cloud Mining 2018. bestcloudmining. http://www.bestcloudmining.net/. (2018).

[Online; accessed 2-May-2018].

[7] Nicolas T Courtois and Lear Bahack. 2014. On Subversive Miner Strategies
and Block Withholding Attack in Bitcoin Digital Currency. arXiv preprint
arXiv:1402.1718 (2014).

[8] Philip Daian, Ittay Eyal, Ari Juels, and Emin Gün Sirer. 2017.

(Short Paper)
PieceWork: Generalized Outsourcing Control for Proofs of Work. In International
Conference on Financial Cryptography and Data Security. Springer, 182–190.
[9] Ittay Eyal. 2015. The Miner’s Dilemma. In Symposium on Security and Privacy.

IEEE.

AFT ’19, October 21–23, 2019, Zurich, Switzerland

Kwon et al.

[10] Ittay Eyal and Emin Gün Sirer. 2014. How to Disincentivize Large Bitcoin Mining

FAW attack rather than the BWH attack as follows:

Pools. (2014). [Online; accessed 1-May-2017].

[11] Ittay Eyal and Emin Gün Sirer. 2014. Majority Is Not Enough: Bitcoin Mining
Is Vulnerable. In International Conference on Financial Cryptography and Data
Security. Springer.

[12] Drew Fudenberg and Eric Maskin. 2009. The folk theorem in repeated games
with discounting or with incomplete information. In A Long-Run Collaboration
On Long-Run Games. World Scientific, 209–230.

[13] Arthur Gervais, Ghassan O Karame, Karl Wüst, Vasileios Glykantzis, Hubert
Ritzdorf, and Srdjan Capkun. 2016. On the Security and Performance of Proof
of Work Blockchains. In Conference on Computer and Communications Security.
ACM.

[14] Benjamin Johnson, Aron Laszka, Jens Grossklags, Marie Vasek, and Tyler Moore.
2014. Game-theoretic analysis of DDoS attacks against Bitcoin mining pools. In
International Conference on Financial Cryptography and Data Security. Springer,
72–86.

[15] Ghassan O Karame, Elli Androulaki, and Srdjan Capkun. 2012. Double-spending
Fast Payments in Bitcoin. In Conference on Computer and Communications Security.
ACM.

[16] Joshua A Kroll, Ian C Davey, and Edward W Felten. 2013. The economics of
Bitcoin mining, or Bitcoin in the presence of adversaries. In Proceedings of WEIS,
Vol. 2013.

[17] Yujin Kwon, Dohyun Kim, Yunmok Son, Eugene Vasserman, and Yongdae Kim.
2017. Be Selfish and Avoid Dilemmas: Fork After Withholding (FAW) Attacks
on Bitcoin. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 195–209.

[18] Yujin Kwon, Hyoungshick Kim, Jinwoo Shin, and Yongdae Kim. 2019. Bitcoin
vs. Bitcoin Cash: Coexistence or Downfall of Bitcoin Cash? arXiv preprint
arXiv:1902.11064 (2019).

[19] Aron Laszka, Benjamin Johnson, and Jens Grossklags. 2015. When bitcoin mining
pools run dry. In International Conference on Financial Cryptography and Data
Security. Springer, 63–77.

[20] Yoad Lewenberg, Yoram Bachrach, Yonatan Sompolinsky, Aviv Zohar, and Jef-
frey S Rosenschein. 2015. Bitcoin mining pools: A cooperative game theoretic
analysis. In Proceedings of the 2015 International Conference on Autonomous Agents
and Multiagent Systems. International Foundation for Autonomous Agents and
Multiagent Systems, 919–927.

[21] Loi Luu, Ratul Saha, Inian Parameshwaran, Prateek Saxena, and Aquinas Hobor.
2015. On Power Splitting Games in Distributed Computation: The Case of Bitcoin
Pooled Mining. In Computer Security Foundations Symposium (CSF). IEEE.
[22] Ralph C Merkle. 1980. Protocols for Public Key Cryptosystems.. In Symposium

on Security and privacy. IEEE.

[23] Kartik Nayak, Srijan Kumar, Andrew Miller, and Elaine Shi. 2016. Stubborn
Mining: Generalizing Selfish Mining and Combining with an Eclipse Attack. In
European Symposium on Security and Privacy. IEEE.

[24] Martin J Osborne. 2004. An Introduction to Game Theory. Oxford university press

New York.

[25] Pete Rizzo 2018. Double Spending Risk Remains After July 4th Bitcoin Fork.
https://www.coindesk.com/double-spending-risk-bitcoin-network-fork/. (2018).
[Online; accessed 30-April-2018].

[26] Pool Distribution 2018. Pool Distribution. https://btc.com/stats/pool. (2018).

[Online; accessed 2-May-2018].

[27] Proof 2018. Proof of Work. https://en.bitcoin.it/wiki/Proof_of_work. (2018).

[Online; accessed 30-April-2018].

[28] Meni Rosenfeld. 2011. Analysis of Bitcoin Pooled Mining Reward Systems. arXiv

preprint arXiv:1112.4980 (2011).

[29] Ayelet Sapirshtein, Yonatan Sompolinsky, and Aviv Zohar. 2015. Optimal Selfish

Mining Strategies in Bitcoin. arXiv preprint arXiv:1507.06183 (2015).

[30] Itay Tsabary and Ittay Eyal. 2018. The Gap Game. In Proceedings of the 2018 ACM
SIGSAC Conference on Computer and Communications Security. ACM, 713–728.
[Online; accessed

[31] ViaBTC 2018. ViaBTC. https://pool.viabtc.com/. (2018).

3-May-2018].

[32] Seunghyun Yoo, Seungbae Kim, Joshua Joy, and Mario Gerla. 2018. Promoting
Cooperative Strategies on Proof-of-Work Blockchain. In 2018 International Joint
Conference on Neural Networks (IJCNN). IEEE, 1–8.

A APPENDIX
A.1 Proof of Theorem 4.1
First, we prove (6) by showing that other actions that at least
one pool has positive BWH infiltration power cannot be a Nash
equilibrium. To this end, we first consider the action profile, say
(0, bi ), (0, b−i ), where both pools execute BWH attacks. In this case,
it is easy to see that Pooli can increase its payoff by executing the

14

Ui ((0, bi ), (0, b−i )) < Ui ((fi , 0), (0, b−i )),

if fi = bi .

Second, consider the case when either of pools execute the BWH at-
tack, i.e., ((fi , 0), (0, b−i )) or ((0, bi ), (f−i , 0)), which can be similarly
shown.

We now prove (7) and (8), for which we expand the FAW attack
game in [17] by defining the following mapping from the action
profile aF in the FAW attack game to that in the FAW-BWH attack
game:

aF = (fi , f−i ) (cid:55)−→ ext(aF ) = (cid:16)

(fi , 0), (f−i , 0)

(cid:17)

.

Lemma A.1 states a necessary and sufficient condition to be a Nash
equilibrium in the FAW-BWH game, whose proof is presented at
the end of this section.

Lemma A.1. The action profile aF is a Nash equilibrium in the FAW
game, if and only if the action profile ext(aF ) is a Nash equilibrium
in the FAW-BWH game.

The above lemma is significantly convenient in that the Nash
equilibrium in the FAW-BWH game can be easily characterized by
the earlier result in the FAW game. Then, from [17], the FAW game
has a unique Nash equilibrium aF
−i ) > 0, U F F (f ⋆
−i ) = U F F (f ⋆
, f ⋆
Therefore, by Lemma A.1, the action profile ext(aF
equilibrium, satisfying (7) and (8). This completes the proof.

−i ) which satisfies:
if αi > α−i ,
if αi = α−i .

ne = (f ⋆
i
−i , f ⋆
i ) < 0
−i , f ⋆
i ) = 0

U F F (f ⋆
, f ⋆
i
U F F (f ⋆
i

ne) is the Nash

, f ⋆

Proof of Lemma A.1. If an action profile aF is not a Nash equi-
librium in the FAW game, the action profile ext(aF ) is trivially not
a Nash equilibrium in the FAW-BWH game. Then we consider that
an action profile aF = (fi , f−i ) is a Nash equilibrium in the FAW
game. Moreover, we assume that there exists b ′
i

such that

Ui (ext(aF )) < Ui ((0, b ′

i ), (f−i , 0)).

In this case, the following

Ui (ext(aF )) < Ui ((0, b ′
i ), (f−i , 0)) < Ui ((f ′
= b ′
i
holds, and it is contradiction because aF is a Nash equilibrium in the
FAW game. As a result, if an action profile aF is a Nash equilibrium
in the FAW game, then ext(aF ) is also a Nash equilibrium in the
□
FAW-BWH game.

i , 0), (f−i , 0)) if f ′
i

A.2 Proof of Theorem 4.2
First, we prove that (ARSK , ARSK ) is a subgame perfect Nash equi-
librium. To prove this, we use the popular one-deviation property
which is a necessary and sufficient condition for subgame perfect
Nash equilibrium (SPNE). If one-deviation property (ODP) is sat-
isfied, no player can increase its payoff by changing its action at
the start of any subgame given the remainder of the player’s own
strategy and the other players’ strategies.

Theorem A.2 ([24]). For any infinitely repeated game with a
discount factor δ < 1, a strategy is a SPNE, if and only if it satisfies
the one-deviation property.

An Eye for an Eye: Economics of Retaliation in Mining Pools

AFT ’19, October 21–23, 2019, Zurich, Switzerland

Without loss of generality, to prove the ODP of (ARSK , ARSK ),
let Pool2 deviates from ARSK , i.e., attempts to change its action
at the start of any subgame, but all the actions of Pool1 and the
actions of Pool2 after deviation follow ARSK . Let time 0 be the
time when the deviation occurs. Then, we have the following four
cases of the subgame. (i) (stndi , stnd−i ) is (G, G) at stage 0 (i.e.,
the start of subgames), (ii) (stndi , stnd−i ) is (G, B) at stage 0, (iii)
(stndi , stnd−i ) is (B, G) at stage 0, and (iv) (stndi , stnd−i ) is (B, B)
at stage 0.
Case (i): In this case, the two pools continue to cooperate from stage
0, and their total payoffs U1 and U2 in the subgames are 0. If Pool2
0
2 (cid:44) 0), Pool1
executes an attack at the start of the subgame (i.e., a
1
(which follows ARSK ) retaliates with infiltration power a
at
1,ar s
stage 1, such that

(15)

U2(0, a

1
1,ar s , 0) < U2(0, 0).

0
2) + U2(a
1
1,ar s , 0) ≤ 0. After stage 1, cooperation

Note that the value of U2(a
would be restored, thus Pool2’s total payoff U2 becomes
0
2) + δU2(a
when the pool deviates from ARSK at the start of the subgame. This
0
2, satisfying the ODP for Pool2 requires the
implies that, for any a
following condition:

1
1,ar s , 0),

U2(0, a

U2(0, a

0
2) + δU2(a

1
1,ar s , 0) ≤ U2(0, 0),

i.e.,

δ ≥

U2(0, 0) − U2(0, a
1,ar s , 0)

U2(a1

0
2)

if U2(a

1
1,ar s , 0) (cid:44) 0.

(16)

comes from IPfaw, not IPbwh, RHS of (16) is less than K. If

comes from IPbwh, RHS of (16) is in a compact set

Retaliate0

(cid:16)
α1, 0, α2, a

0
2, 0

(cid:17) (cid:12)
(cid:12) 0 ≤ f

0
2 ≤ α2 or 0 ≤ b

0
2 ≤ α2

(cid:111)

,

1
1,ar s

If a
1
a
1,ar s
(cid:110)

which is a piecewise continuous image of a compact space and
includes only values less than 1. Therefore, the maximum value of
RHS of Eq. (16) is less than 1; i.e.,

U2(0, 0) − U2(0, a
1,ar s , 0)

U2(a1

0
2)

< 1.

max
a0
2
1, ar s,0)(cid:44)0

U2(a1

(17)

1
1,ar s , 0) is an increasing function of K (i.e., |U2(a

Moreover, U2(a
is a decreasing function of K), which implies that LHS of (17) is
also an increasing function of K. This is because the FAW attack
gives not only the retaliator (Pool1) but also the deviator (Pool2)
more reward when compared with the BWH attack. In addition,
0
1
for given α1 and a
2, when α2 increases, U2(0, a
1,ar s , 0)
respectively increase and decrease (refer to (2) and (3)). Again note
1
0
2) ≥ 0. Therefore, LHS of (17) is also
1,ar s , 0) ≤ 0 if U2(0, a
that U2(a
an increasing function of α2 for given α1.
Case (ii): In this case, Pool1 retaliates against Pool2, and Pool2
cooperate at stage 0. Let Pool1 following ARSK retaliate with the
at stage 0. Then, when Pool2 always follows ARSK
action a
0
in the subgames, Pool2’s total payoff U2 = U2(a
1,ar s , 0). If Pool2
0
2 (cid:44) 0,
deviates from ARSK , executing an attack with an action a

0
2) and U2(a

0
1,ar s

1
1,ar s , 0)|

Pool1 turns out to retaliate with an action a
that

1
1,ar s

at stage 1, such

0
1,ar s , a
in which case Pool2’s total payoff U2 is

0
2) + U2(a

1
1,ar s , 0) < U2(a

U2(a

0
1,ar s , 0),

U2(a

0
1,ar s , a
To satisfy ODP for Pool2, the condition U2 ≤ U2(a
be satisfied, i.e.,

0
2) + δU2(a

1
1,ar s , 0).

0
1,ar s , 0) should

U2(a

δ ≥

0
1,ar s , 0) − U2(a
U2(a1
1,ar s , 0)

0
1,ar s , a

0
2)

.

Similar to the Case (i), the following is satisfied:

U2(a

0
1,ar s , 0) − U2(a
U2(a1
1,ar s , 0)

0
1,ar s , a

0
2)

< 1

max
a0
2
1, ar s,0)(cid:44)0

U2(a1

(18)

(19)

Also, LHS of (19) is an increasing function of K and α2 for given
α1.
Case (iii) and Case (iv): We omit these, because they can be treated
similarly to Cases (i) and (ii).

As a result, we can set FK (α1, α2) as max(X δ
1 , X δ
0
1,ar s , 0) − U2(a
U2(a1
1,ar s , 0)

U2(0, 0) − U2(0, a
1,ar s , 0)

2 ), where

U2(a1

U2(a

0
2)

(cid:40)

,

X δ

1 =

max
a0
2
1, ar s,0)(cid:44)0

U2(a1

0
1,ar s , a

0
2)

,

U2(0, a

0
2,ar s
U2(a1

) − U2(0, a
1,ar s , 0)

0
2)

,

U2(0, 0) − U2(0, a
1,ar s , 0)

U2(a1

(cid:41)

0
2)

and

X δ

2 =

max
a0
1
U1(0,a1
2, ar s )(cid:44)0

(cid:40)

U1(0, 0) − U1(a
U1(0, a1

2,ar s

0
1, 0)
)

,

U1(a

0
1,ar s , 0) − U1(a
U1(0, a1

2,ar s

0
1, a
)

0
2,ar s

)

,

U1(a

0
1,ar s , 0) − U1(a
U1(0, a1
)

2,ar s

0
1, 0)

,

U1(0, 0) − U1(a
U1(0, a1

2,ar s

(cid:41)

.

0
1, 0)
)

The values of X δ
1 and X δ
increasing functions of K. Moreover, X δ
of α2 for given α1, and X δ
α1. Note that X δ
increasing function of |α1 − α2| for given α1.

2 are always less than 1, and they are
1 is an increasing function
1 is a decreasing function of α2 for given
2 when α1 = α2. Therefore, FK (α1, α2) is an

1 = X δ

Next, we prove that (ARSK , ARSK ′) is a Nash equilibrium re-
gardless of whether K is equal to K ′. Indeed, this fact can be easily
proved by using the above result. When Pool1 and Pool2 follow
ARSK and ARSK ′, respectively, they achieve cooperation, where
their total payoff U1 and U2 are 0. Because, in a Nash equilibrium,
each strategy is the best response for given other strategies, we
need to show

U1(s1, ARSK ′) ≤ U1(ARSK , ARSK ′) = 0 if ∀s1 (cid:60) ARS,
U2(ARSK , s2) ≤ U2(ARSK , ARSK ′) = 0 if ∀s2 (cid:60) ARS.

(20)

(21)

Also, we note the following:

U1(ARSK , ARSK ′) = U1(ARSK ′, ARSK ′) = 0.

15

AFT ’19, October 21–23, 2019, Zurich, Switzerland

Kwon et al.

Therefore, for all s1 (cid:60) ARS, (20) would be satisfied because the strat-
egy vector (ARSK ′, ARSK ′) is a subgame perfect Nash equilibrium.
In the same manner, (21) holds. This completes the proof.

A.3 Non-Emptiness of infiltration set for BWH

Theorem A.3. The infiltration set IPbwh is non-empty.
Proof. To prove this theorem, we show that there exists an

U−i (0, at −1

−i,ar s ) − U−i (0, at −1
−i )

(cid:111)

− U−i ((0, M B

i ), 0).

Under the assumption that IPbwh,i includes M B
, we investigated
i
F by varying Pooli ’s size and Pool−i ’s size. If F is always posi-
. Fig. 8a represents
tive, IPbwh,i is a non-empty set, including M B
i
the value of F under the assumption that IPbwh,i includes M B
.
i
However, the figure shows that there are some cases that F is
negative.

infiltration power bi such that
U−i (0, at −1

−i ) + U−i ((0, bi ), 0) < U−i (0, at −1

−i,ar s ),
and there also exists an infiltration power bi such that
−i ) + U−i ((0, bi ), 0) < U−i (at −1

, at −1
U−i (at −1
i
because only one of at −1
can have a value different to
−i,ar s
0. To show this, we need to show that there is an infiltration power
bi satisfying the following:

and at −1

, 0),

i

i

U−i ((0, bi ), 0) <

at −1
i

min
−i ,at −1

,at −1

−i, ar s

(cid:110)
U−i (at −1
i

, 0) − U−i (at −1

i

, at −1
−i ),

U−i (0, at −1

−i,ar s ) − U−i (0, at −1
−i )

(cid:111)

,

(22)

i

i

−i,ar s

, and at −1

where the right-hand side of (22) can have the minimum value when
at −1
have the following forms, (f−i , 0) and (0, b−i ), re-
−i
spectively. Moreover, for an arbitrary value p in [0, αi ], U−i (at −1
, 0)−
U−i (at −1
is (p, 0) is always less than or
i
i
equal to that in the case that at −1

) in the case that at −1

is (0, p).

, at −1
−i

−i,ar s

and at −1

First, we consider the range of at −1

. They are outputs
i
of ARS executed by Pooli and Pool−i , respectively. Note that Pool1,
which calls Retaliate, has good standing. Therefore, ai should be 0
or an output of Retaliate. Also, a−i,ar s is 0 or an output of Retali-
ate called by Pool−i , by its definition. Next, we assume that IPbwh in
Retaliate of Pooli and Pool−i includes M B
, respectively.
and M B
−i
i
Then the element bi of at −1
and element b−i of a−i,ar s would be less
, respectively. Henceforth, IPbwh for
than or equal to M B
i
Pooli and Pool−i is expressed as IPbwh,i and IPbwh,−i , respectively,
unless confusion arises. Similarly, IPfaw would be also expressed
as described above. Moreover, if IPfaw,i is a non-empty set, the set
includes as follows.
(cid:113)

2 + (α1 − α 2
1 − α1 − α2
which is an infiltration power fi that minimizes U2((fi , 0), 0). There-
fore, it is sufficient to consider the range of at −1

i
and M B
−i

(1 − α1)α 2

1 )α2 − α2

(23)

as

,

{(fi , 0) | 0 ≤ fi ≤ max{M B

i
i , Eq. (23)}}

in order to show that there always exists an infiltration power
bi , which satisfies (22), because of the fact that U−i (at −1
, 0) −
U−i (at −1
) in the case that ai is (p, 0) is always less than or
i
equal to that in the case that ai is (0, p), for an arbitrary value p in
[0, αi ].

, at −1
−i

i

We define F as
(cid:110)
U−i (at −1
i

min
−i ,at −1

,at −1

−i, ar s

at −1
i

, 0) − U−i (at −1

i

, at −1
−i ),

16

(a) When assuming that I Pbwh,i in-
cludes M B
i , this figure represents the
value of F.

(b) This figure represents the value
of F′(k ) for a value k , which makes
F′(k ) positive.

Figure 8: The values of F and F ′(k)

In the case that F is negative, all elements of the set IPbwh,i are
, or the set IPbwh,i is an empty set. Therefore, we

greater than M B
i
consider a function F ′(k), which is defined as
(cid:110)
, at −1
U−i (at −1
−i ),
i

, 0) − U−i (at −1

i

min
−i ,at −1

,at −1

−i, ar s

at −1
i

(cid:111)

U−i (0, at −1

−i,ar s ) − U−i (0, at −1
−i )
ranges from 0 to k. When k is M B
i

− U−i ((0, k), 0),

i

and an element fi of at −1
, the
function F ′(k) is equal to F . In the case that F is negative, k should
to ensure that F ′(k) is positive. We find the
be greater than M B
i
value of k such that F ′(k) is positive, considering only k equal to or
in the
greater than M B
i
case that F is positive, we regard the value of k as M B
. Moreover,
i
in this case, b−i in at −1
ranges from 0 to k ′, which corresponds
to k when Pool−i calls Retaliate for retaliation against Pooli .

. For example, even though k is less than M B
i

Fig. 8b represents F ′(k) for k, which makes F ′(k) positive. We
can see that Fig. 8b represents positive values of F ′(k) in all cases. It
also means that there always exists k, which makes F ′(k) positive.
□
As a result, IPbwh,i is a non-empty set.

−i,ar s

A.4 Number of Blocks Found by Attackers

Theorem A.4. Let Nfaw and Nbwh be the number of blocks found
by attackers for FAW and BWH attacks, respectively. Then, the fol-
lowing hold:

(cid:18)

(cid:18)

Nfaw ∼ Geo

Nbwh ∼ Geo

(cid:19)

(1 − γ )α
β + γ α(1 − α − β) + (1 − γ )α
(cid:19)

(1 − γ )α
β + (1 − γ )α

.

An Eye for an Eye: Economics of Retaliation in Mining Pools

AFT ’19, October 21–23, 2019, Zurich, Switzerland

attacker distributes the rewards gained from the victim, the more
unfair the reward system becomes. For these reasons, the number
of periods cannot be large. When the number of periods is small,
the victim can still perceive a relatively large variance in Rdp in the
attacker’s pool.
Case 3: What if the attacker distributes only partial rewards
gained from the victim pool? Another method for the attacker
to reduce the variance of Rdp is to share not entire rewards gained
from the victim. Indeed, in order to distribute extra rewards to
miners in the attacker’s pool, the attacker must share most of the
rewards gained from the victim with the miners. For example, we
consider that a pool, which possesses a computational power of
0.2, executes the FAW attack with an infiltration power of 0.005
against other pool with the same computational power (0.2). Then,
the attacker can earn an extra reward of 0.48%. Meanwhile, if the
attacker does not share rewards earned from the victim with her
miners, the miners suffer a loss of 2.01%. Therefore, the attacker
should divide at least approximately 80.7% (
2.01+0.48 ) of the rewards
earned from the victim pool with the miners, in order to prevent
losses of her miners. As a result, a mole in her pool can still observe
a relatively large variance in reward density Rdp .

2.01

Proof. We consider the FAW attack, where it is straightforward
to see that P has an exponential distribution with rate parameter
(1−γ )α
, and for a given value of P, N has a Poisson distribution
1−γ α
with a parameter P (β +γ α (1−α −β ))

. Then, the following holds:

1−γ α

Pr(N ) =

∫ ∞

0

Pr(N , P)dP =

∫ ∞

0

Pr(N |P)Pr(P)dP

=

=

=

=

∫ ∞

0
(cid:18) β + γ α(1 − α − β)
1 − γ α
(cid:18) β + γ α(1 − α − β)
1 − γ α

(P(β + γ α(1 − α − β)))N e
N !(1 − γ α)N
(cid:19) N
(1 − γ )α
1 − γ α
(1 − γ )α
1 − γ α
(β + γ α(1 − α − β))N (1 − γ )α
(β + γ α(1 − α − β) + (1 − γ )α)N +1 ,

(cid:19) N

·

·

·

0
(cid:18)

− P (β +γ α (1−α −β ))
1−γ α

(1 − γ )αe

− P (1−γ )α
1−γ α

1 − γ α

·

∫ ∞

−P (β +γ α (1−α −β )+(1−γ )α )
1−γ α

P N
N ! e

1 − γ α
β + γ α(1 − α − β) + (1 − γ )α

(cid:19) N +1

which implies that N is a geometric random variable with parameter
for FAW attack. The proof of BWH attack is
□

(1−γ )α
β +γ α (1−α −β )+(1−γ )α
similar to the above.

A.5 Evasion of the Identification Methods

Reducing the Variance

Case 1: What if the attacker (the manager of the attacking
pool) distributes the rewards gained from the victim pool to
miners at a random time? The attacker can pay the rewards
gained from the victim pool to miners at a random time. This
behavior can reduce the variance in Rdp . However, if the victim (the
manager of the victim pool) frequently changes the mole’s account,
the victim still observes a relatively large variance among rewards
in the accounts. Therefore, although identification is slackened by
the attacker, the victim can still identify the attacker by observing
the variance in reward densities.
Case 2: What if the attacker distributes the rewards gained
from the victim pool for one period P in proportion to the
number of shares submitted over several periods? To reduce
the variance in Rdp , the attacker may pay the rewards gained from
the victim pool for one period P to miners in proportion to the
number of shares submitted over several periods. In other words,
even if a miner works in the attacker’s pool for only one period,
the miner can earn part of the rewards gained from the victim pool
for several periods. Indeed, the greater the number of considered
periods for paying rewards, the smaller the variance in Rdp will be.
However, the number of periods cannot be large. This is because
there are side effects: First, miners in the attacker’s pool must wait
for a long time to receive the total reward for their work. Second,
some miners can suffer losses from the continuous changes in α
and β. When α or β changes, the mean value of the N γ
term
β +γ α
of reward density Rdp , which is earned from the victim, as well
5 would change. However, if the attacker
as the infiltration ratio γ
distributes the rewards earned from the victim over large number of
periods, many miners may receive part of the rewards gained from
the victim for some periods even though they did not work during
the corresponding periods. Because the part of reward density Rdp
earned from the victim changes over time, the more periods the

5The optimal infiltration ratio depends on α and β .

17

