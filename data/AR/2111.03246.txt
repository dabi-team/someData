Long-distance Deterministic Transmission among
TSN Networks: Converging CQF and DIP

Weiqian Tan∗, Binwei Wu†
∗Southeast University, Nanjing, China
†Purple Mountain Laboratories, Nanjing, China
Email: t w q@foxmail.com, wubinwei163@163.com

1
2
0
2

v
o
N
5

]
I

N
.
s
c
[

1
v
6
4
2
3
0
.
1
1
1
2
:
v
i
X
r
a

Abstract—With the development of 5G, innovative applications
requiring bounded transmission delays and zero packet loss
emerge, e.g., AR,
industrial automation, and smart grid. In
this circumstance, time-sensitive networking (TSN) is proposed,
which addresses the deterministic transmission in the local area
networks. Nevertheless, TSN is essentially a Layer 2 technique,
which cannot provide deterministic transmission on a large
geographic area. To solve this problem, this paper proposes a
hierarchical network for the end-to-end deterministic transmis-
sion. In the proposed network, we leverage CQF (i.e., one of the
most efﬁcient TSN mechanisms) in the access networks which
aggregates the trafﬁc from end-devices. Meanwhile, in the core
network, we exploit the DIP (i.e., a well-known deterministic
networking mechanism for backbone networks) for long-distance
deterministic transmission. We design the cycle alignment mech-
anism to enable seamless and deterministic transmission among
hierarchical networks. A joint schedule is also formulated, which
introduces the trafﬁc shaping at the network edge to maximize
the network throughput. Experimental simulations show that the
proposed network can achieve end-to-end deterministic transmis-
sion, even in the highly-load scenarios.

Index Terms—deterministic networking, long-distance end-to-

end transmission, DIP, CQF

I. INTRODUCTION

With the development of the Internet and communication
networks, many time-sensitive applications are emerging, such
as factory automation, connected vehicles and smart grids
[1]. Traditional IP networks performing best-effort transmis-
sion provide some Quality of Service (QoS) strategies (e.g.,
DiffServ and congestion control [2]). However, due to micro-
burst trafﬁc [3] existing in networks, these mechanisms can
not achieve deterministic transmission, which means zero
packet loss, bounded delays and jitters (i.e., delay variation)
[4]. Thus, for eliminating micro-burst trafﬁc, IEEE aims to
develop a set of standards named Time-Sensitive Networking
(TSN) to provide deterministic transmission in layer 2. Due
to the high efﬁciency, Cyclic Queuing Forwarding (CQF) [5]
is one of the top choices in TSN [6]. Besides, Credit-Based
Shaper [7] and Time-Aware Shaper [8] are also well-known
mechanisms in TSN. However, TSN cannot provide long-
distance deterministic transmission because of the requests
for high precision time synchronization and low propagation
delays, which leads to the “information isolated island” among
TSN networks. Global management of TSN applications (e.g.
teleprotection, wind farm applications, etc. [9]) requests long-
distance deterministic transmission among TSN networks.

For achieving large-scale deterministic transmission,
the
IETF Deterministic Networking (DetNet) group focus on pro-
moting the standardization in layer 3. The standards of DetNet
are still under discussion. Some drafts have been proposed,
such as Cycle Speciﬁed Queuing and Forwarding (CSQF) [10]
and Deterministic IP (DIP) [11]. CSQF leverages Segment
Routing [12] Identiﬁer to coordinate cyclic transmission times
across large-scale networks to offer deterministic transmis-
sion. DIP is one of the effective mechanisms in DetNet.
The routers performing DIP (named as DIP routers) achieve
frequency synchronization. Packets are transported in a slotted
fashion by carrying a cycle identiﬁer. After investigating
recently proposed deterministic forwarding mechanisms, we
ﬁnd that no researches have been conducted to apply DetNet to
achieve long-distance deterministic transmission among TSN
networks. In this paper, we propose a hierarchical network
for long-distance end-to-end deterministic transmission. CQF
technique is used in the access layer, and DIP supports the
core layer.

Due to the differences between CQF and DIP, it is not
effective to integrate these two mechanisms directly. The ﬁrst
problem is different time synchronization mechanisms in CQF
and DIP. Time synchronization with high precision used in
most TSN mechanisms is hard to achieve in long-distance
deterministic transmission. Thus, DIP only requests frequency
synchronization. The second problem is the duration of a cycle
may be different in CQF and DIP. These two problems are
the barriers to construct correspondences between cycles in
CQF switches and DIP routers because cycles in CQF do
not correspond to cycles in DIP one by one. However, cycle
correspondences are the foundation to achieve deterministic
transmission in CQF and DIP.

To tackle the problems mentioned above, this paper es-
tablishes the network model of the hierarchical network and
proposes a cycle alignment mechanism to establish the cor-
respondences between cycles in CQF and DIP. Based on the
cycle alignment, we propose a trafﬁc shaping mechanism to
solve the disorder of trafﬁc at the edge of access and core
networks to achieve end-to-end joint scheduling across CQF
and DIP. The joint scheduling is formulated as integer linear
programming to maximize the number of acceptable time-
sensitive ﬂows. In the simulations, the scheduling is conducted
in a greedy algorithm. The time-sensitive ﬂows (TS ﬂows)
with high weight are scheduled preferentially. For each TS

 
 
 
 
 
 
ﬂow, the scheduling chooses the transmission pattern assuming
minimum resources.

The rest of this paper is organized as follows. Section II
details the deterministic networking technologies used in this
paper (i.e., CQF and DIP). In Section III, the network model
of the hierarchical network is introduced. Section IV proposes
the end-to-end joint scheduling approach. Section V shows
the setup and the results of simulations. Finally, Section VI
concludes this paper.

II. BACKGROUND

A. Cyclic Queuing Forwarding

IEEE 802.1Qch (CQF) standard [5] proposes a method to
synchronize enqueue and dequeue operations, and schedule
the transmission in a cyclic fashion. Time in CQF networks is
divided into cycles with equal duration d. All CQF switches
in the same CQF network are perfectly synchronized. There
exist two queues (q1 and q2) in a CQF switch output port. In
cycle c, queue q1 is open for dequeuing packets. At the same
time, queue q2 enqueues packets from upstream. In the next
cycle c+1, queue q1 enqueues packets and queue q2 dequeues
packets. Due to the cyclic manner for transmission, the packets
received in cycle c are scheduled to be retransmitted in cycle
c + 1, and the maximum possible delay experienced in a CQF
switch is from the beginning of cycle c to the end of c + 1,
equal to 2d.

The upper and lower bounds are easily calculated in CQF
networks. The number of hops is deﬁned as h . Dmax and
Dmin represent the maximum and minimum latency respec-
tively. The equations to calculate Dmax and Dmin are as
follows:

Dmax = (h + 1) × d

Dmin = (h − 1) × d

(1)

(2)

B. Deterministic IP

Time in DIP is also divided into cycles with equal duration
T . Because perfect time synchronization is hard to achieve
in large geographical coverage, DIP only requests frequency
synchronization and permits the propagation delay exceeding
the cycle duration. DIP leverages correspondences between
cycles to achieve deterministic transmission. Fig. 1 shows
the DIP transmission among three DIP routers (DR1, DR2,
and DR3). Based on the propagation delays between DR1
and DR2, and the one between DR2 and DR3, the following
cycle correspondences are constructed: the cycle x in DR1 is
mapped to cycle y in DR2, and the cycle y is mapped to cycle
z in DR3. These cycle correspondences imply that the packets
sent in cycle x will be received in DR2 not later than cycle
y −1, and retransmitted to DR3 in cycle y in DR2. It is similar
between DR2 and DR3.

The packets sent at cycle x from DR1 carry the cycle
identiﬁer x. After receiving them, DR2 will check the cycles
correspondences table stored in it, and ﬁnd the correspondence
x → y. Then DR2 enqueues these packets to the queue
corresponding to cycle y. At cycle y, the queue will open and

dequeue these packets to DR3. Fig. 1 shows the maximum and
minimum delay from DR1 to DR3, and the maximum jitter is
less than 2T .

Fig. 1. An example of transmission among DIP routers. The packets sent in
cycle x by DR1 will be retransmitted in cycle y by DR2. The transmission
cycle in DR3 is z.

III. HIERARCHICAL NETWORK

We propose a hierarchical network to achieve long-distance
deterministic transmission among TSN networks, as shown
in Fig. 2. The access networks perform CQF and the core
network forwards packets following DIP. The following sub-
sections will demonstrate the transmission mechanisms in the
hierarchical network systematically.

Fig. 2. The hierarchical network. In the access networks, CQF guarantees
deterministic transmission in the local area. In the core network, DIP provides
long-distance deterministic transmission. Hosts and CQF (edge) switches
perform CQF, while DIP (edge) routers perform DIP. Especially, CQF edge
switches and DIP edge routers perform trafﬁc shaping and the cycle alignment
across CQF and DIP.

A. Network model

The whole network is represented as G = {V, E}. V is the
set of network devices, and E is the set of links. Network
devices contain source hosts, destination hosts, CQF switches,
CQF edge switches, DIP routers, and DIP edge routers, i.e.,
V = {Vsrc, Vdest, Vcqf , V edge
dip }. The processing
delays in all devices are ignored.

, Vdip, V edge

cqf

For a link e ∈ E, source v1 and end v2 uniquely identify the
link, i.e., e = (v1, v2). A link e corresponds to a propagation
delay ∆e. The bandwidth of link e is denoted as BWe.

A path from the source v0 ∈ Vsrc to the destination v|p| ∈
Vdest is denoted by p = (v0, v1, · · · , v|p|), where |p| − 1 is the
number of intermediate nodes along path p. A set P contains
all possible paths from Vsrc to Vdest, i.e., p ∈ P .

Time-sensitive applications located in source hosts generate
time-sensitive ﬂows (TS ﬂows). F represents the set of TS
ﬂows. Each TS ﬂow f ∈ F is periodic, and the period is ∆f .

timexpropagation delayDR1Ttimey-1yDR2timez-1zDR3propagation delayminimum delaymaximum delayAccess networkAccess networkCore networkCQF SwitchCQF SwitchDIP Edge RouterDIP RouterDIP RouterDIP RouterDIP RouterDIP Edge RouterCQF SwitchCQF SwitchSource HostDestination HostCQF Edge SwitchCQF Edge SwitchDestination HostSource HostA TS ﬂow f emits packets in size of ωf bits during every
∆f . Moreover, the source and destination of a ﬂow f are
deterministic. The maximum acceptable end-to-end delay of
f is ∆e2e
f .

B. Time models in CQF and DIP

Time models in CQF and DIP are different. We deﬁne every
access and core network as a time-domain named CQF-D
and DIP-D respectively, as shown in Fig. 3. For uniformly
scheduling, we introduce hypercycle, which contains multiple
cycles in CQF and DIP.

CQF-D: CQF-D contains source/destination hosts, CQF
edge switches and CQF switches. Fig. 3 shows that, in CQF-D,
time is divided into time cycles with the same duration ∆cqf . A
hypercycle contains Ncqf consecutive cycles. The length of a
hypercycle is ∆hc = Ncqf ∆cqf . All devices in CQF-D achieve
perfect time synchronization, which means that the start time
of a cycle (also a hypercycle) in all devices is the same.

C. Cycle alignment

We design a cycle alignment mechanism to construct cor-
respondences between cycles in different devices. The cycle
alignment is deﬁned as follows: if packets sent in cycle a in
a node A will all be received no later than cycle b in the
downstream node B, we deﬁne a cycle alignment relationship
as Φ(A,B)(a) = b.

Alignment in CQF-D: Inside CQF-D, packets transmitted
by a node during cycle i must be received by the downstream
node during the same cycle and retransmitted in cycle i + 1.
Thus, the cycle alignment in CQF-D is Φ(i) = i.

Alignment in DIP-D: Fig. 4 illustrates a cycle alignment
in DIP-D. There exist adjacent DIP devices node A and B
with the same cycle length ∆dip. The length of a hypercycle
is ∆hc = 3∆dip (i.e., Ndip = 3). Cycle 0 in node A is mapped
to cycle 2 in node B (i.e., Φ(A,B)(0) = 2).

DIP-D: DIP-D covers DIP routers and DIP edge routers.
Similar to CQF-D, time in DIP-D is divided into time cycles
with the same duration ∆dip. A hypercycle in DIP-D contains
Ndip consecutive DIP cycles. Thus, the length of a hypercycle
is ∆hc = Ndip∆dip. As shown in Fig. 3, DIP-D only requires
frequency synchronization. For a pair of adjacent devices
(A, B) in DIP-D, there may exist a constant gap between the
start time of cycles in A and B. The gap is deﬁned as the
offset of cycles, ∆A,B
is the difference between the
start time of cycles in A and B, and ∆A,B

co . ∆A,B

co

co ≥ 0.

Hypercycle: For allocating deterministic cycles to each TS

ﬂow, the length of a hypercycle should satisfy:

∆hc = Ncqf ∆cqf = Ndip∆dip = NF ∆f

(3)

where Ncqf , Ndip, NF ∈ Z+, Ncqf and Ndip are greater than
the number of queues in output ports of CQF switches and
DIP routers respectively.

Fig. 3 illustrates hypercycles in CQF-D and DIP-D. The
offset of hypercycle between a pair of adjacent devices (A, B)
is deﬁned as ∆A,B
hco . ∆A,B
hco is the difference between the start
time of hypercycles in A and B, and ∆A,B

hco ≥ 0.

Fig. 3. Time models in the hierarchical network. In CQF-D, all devices
achieve perfect time synchronization, while DIP-D only requires frequency
synchronization. Ncqf = 3 and Ndip = 2 in this ﬁgure.

Fig. 4. The cycle alignment in DIP-D. All packets sent in node A’s cycle
0 will be received no later than node B’s cycle 2. The cycle alignment
Φ(A,B)(0) = 2 is established.

The cycle alignment Φ(A,B)(0) = 1 can be calculated
based on the duration of cycles in DIP-D ∆dip, the length
of hypercycle ∆hc, the offset of hypercycles ∆A,B
hco , and the
propagation delay ∆(A,B). Φ(A,B)(·) is deﬁned as

Φ(A,B)(x) = (cid:100)ϕ(A,B)(x) − 1(cid:101) mod Ndip

where
ϕ(A,B)(x) = ((x+1) mod Ndip)·∆dip+∆(A,B)+∆A,B
Note that the index x loops from 0 to Ndip − 1.

∆dip

hco

(4)

(5)

Alignment across CQF-D & DIP-D: Fig. 5 illustrates an
established cycle alignment from node C to its adjacent node
D. Node C and D are located in different time domains. The
length of cycles in node C and D are ∆C and ∆D respectively.
The length of hypercycle is ∆hc = 5∆C = 4∆D, and the
offset of hypercycle is ∆C,D
hco . Cycle 0 in node C is mapped
to cycle 3 in node D, i.e., Φ(C,D)(1) = 3.

Fig. 5. Cycle alignment across CQF-D and DIP-D. Nodes C and D are in
different time domains. Cycle 1 in node C is mapped to cycle 3 in node D.

Due to the inequality of cycle durations in CQF-D and DIP-
is not constant. However, the offset of hypercycles

D, ∆C,D

co

CQF-DDIP-DEnd deviceCQF switch ADIP edge router CDIP router DtimetimetimetimePerfect time syncFrequency synchypercycleCQF edge switch BtimeDIP router EtimetimetimeCycle 0Cycle 1Cycle 2Cycle 0Cycle 1Cycle 2Cycle 0hypercyclehypercycleCycle 0Cycle 1Cycle 2Cycle 0Cycle 1Cycle 2Cycle 0propagation delayNode A(in DIP-D)Node B(in DIP-D)Cycle 1timetimeCycle 0Cycle 1Cycle 2Cycle 3Cycle 4Cycle 0Cycle 1hypercycleCycle 0Cycle 1Cycle 2Cycle 3Cycle 0Cycle 1Cycle 2propagation delayNode C(in time domain D1)Node D(in time domain D2)between CQF-D and DIP-D is a constant. Taking Fig. 5 as
an example, the cycle alignment can be calculated based on
∆C,D
hco , ∆C, ∆D, ∆hc, and ∆(C,D). The cycle alignment across
CQF-D and DIP-D, Φ(C,D)(·), is deﬁned as

Φ(C,D)(x) = (cid:100)ϕ(C,D)(x) − 1(cid:101) mod

∆hc
∆D

where

ϕ(C,D)(x) =

((x+1) mod ∆hc

∆C )·∆C +∆(C,D)+∆C,D

hco

∆D

(6)

(7)

Note that the index x loops from 0.

D. Trafﬁc shaping

The hierarchical network leverages cycle shifting to achieve
trafﬁc shaping. A cycle shift represents the additional cy-
cles for retransmission based on the result of Φ(·). Cycle
shifts in sources, CQF switches/DIP routers, and CQF edge
switches/DIP edge routers are different respectively.

Cycle shifting in sources: A cycle shift rA

f is corresponding
to the TS ﬂow f and the source A. If packets of f arrive at
node A in cycle a, and a hypercycle contains N cycles, these
(cid:17)
packets will be retransmitted in cycle
,
where rA
f ∈ [0, N − 1]. In Fig. 6, packets of TS ﬂows f2 all
arrive at cycle 0 from upper layer. Due to rA
= 3, f2 will be
f2
sent out in cycle ((0 + 3) mod 5).

f ) mod N

(a + rA

(cid:16)

Fig. 6. Cycle shifting in sources. When too many TS ﬂows (f1, f2, and
f3) arrive in a cycle (cycle 0), cycle shifts are introduced for trafﬁc shaping.
rA
= 3 indicates
f1
the retransmitting cycle of f2 is (0+3) mod 5 = 3. f3 will be retransmitted
in cycle ((0 + 2) mod 5 = 2).

= 0 represents that f1 will be retransmitted in cycle 0. rA
f2

Cycle shifting in CQF switches/DIP routers: In the device
v ∈ Vcqf ∪ Vdip, the cycle shift is always 1. Assume that there
is a pair of intermediate nodes (A, B) with Φ(A,B)(a) = b.
TS ﬂow f is sent in node A’s cycle a. A hypercycle contains
N cycles in node B. Because rB
f = 1, ﬂow f is retransmitted
in cycle (b + 1) mod N .

Cycle shifting in edge switches/routers: The cycle shifting
in edge devices is illustrated in Fig. 7. Node C and node D
are in different time domains. A hypercycle contains N = 4
cycles of node D. There exists Φ(C,D)(1) = 3. The cycle shift
of TS ﬂow f1 in node D is rD
= 2, so packets of f1 will be
f1
retransmitted in cycle (Φ(C,D)(1) + rD
) mod N = 1. The
f1
range of rD
is [0, N − 1].
f1

IV. JOINT SCHEDULING

A. Decision variables

There are a series of decision variables to schedule TS
ﬂows in F . These variables can be classiﬁed into three types:
admission control, path selection, and cycle shifting.

Fig. 7. Cycle shifting in edge switches or routers. TS ﬂow f1 is sent in cycle
1 in node C, and cycle 0 is mapped to cycle 3 in node D (i.e., Φ(C,D)(0) =
3). A hypercycle contains 4 cycles in node D. Since rD
= 2, f1 will be
f1
retransmitted in cycle (3 + 2) mod 4 = 1 in node D.

Admission control: For a TS ﬂow f ∈ F , xf is deﬁned
to describe whether f should be accepted (xf = 1) or not
(xf = 0). Let x = {xf |f ∈ F }.

Path selection: pf = (v0, v1, · · · , v|pf |) is deﬁned as the
scheduled path for TS ﬂow f . v0 is the source and v|pf | is the
destination. Let P = {pf |f ∈ F }.

Cycle shifting: The cycle shifting for TS ﬂow f is deﬁned
is the cycle shifts

v|pf |
as rpf = (rv0
), where rvi
f , · · · , r
f
f
for f at node vi. Let r = {rpf |pf ∈ P }.

f , rv1

B. Constraints

There exist two constraints in joint scheduling: constraints

on end-to-end delays and resource capacity.

Constraints on end-to-end delay: The end-to-end delay
of a TS ﬂow f depends on the scheduled path pf and the
cycle shifting rpf . Thus, the end-to-end delay of f is described
as ∆(pf , rpf ), and satisﬁes ∆(pf , rpf ) ≤ ∆e2e
is the
maximum acceptable end-to-end delay of f ).

(∆e2e
f

f

For a link ei = (vi, vi+1) in path pf , we deﬁne the delay
on ei as ∆f
ei, which contains the maximum time staying at vi
and the propagation delay on ei (i.e., ∆ei). Thus, the upper
bound of ∆f

ei can be deﬁned as

U (∆f
ei

) = (rvi

f + 1)∆vi + ∆ei

(8)

where ∆vi is the duration of a cycle in node vi.

The upper bound of path pf ’s end-to-end delay can be

calculated by

U (∆(pf , rpf )) =

|pf |−1
(cid:88)

i=0

U (∆f
ei

)

(9)

For every TS ﬂow f ∈ F , the constraint of end-to-end delay

can be described as

U (∆(pf , rpf )) ≤ ∆e2e

f

(10)

Constraints on resource capacity: The resource in the
hierarchical network is cycles in every node. For a cycle c
in node vi on link e = (vi, vi+1), if a set of TS ﬂows Fc
is assigned to it, the total bits of Fc should not exceed the
transmission capacity of c (i.e., formula (11)).
(cid:88)

f ≤ ∆vi · BWe
ωc

(11)

f ∈Fc

timeCycle 0Cycle 1Cycle 2Cycle 3Cycle 4Cycle 0hypercycleNode A(source)arrivingtimeCycle 0Cycle 1Cycle 0Node A(source)ArrivingtimetimeCycle 0Cycle 1Cycle 2Cycle 3Cycle 4Cycle 0Cycle 1hypercycleCycle 0Cycle 1Cycle 2Cycle 3Cycle 0Cycle 1Cycle 2propagation delayNode C(in time domain D1)Node D(in time domain D2)sendingreceivingwhere ωc
f is the total bits of f transmitted in cycle c, ∆vi is
the duration of a cycle in node vi, and BWe is the bandwidth
of link e.

C. Objective function

The target of the joint scheduling is to accept as many f ∈
F as possible. The priority of every TS ﬂow may be different.
A weight value vf ∈ (0, 1] represents the priority of TS ﬂow
f . The problem can be formulated as an integer programming
(IP):

max
x,P,r

s.t.

(cid:88)

vf xf

f ∈F
vf ∈ (0, 1], xf ∈ {0, 1}

(10), (11)

V. SIMULATION

(12a)

(12b)

(12c)

The hierarchical network shown in Fig. 2 is constructed in
the simulation. The topology of the core network containing
15 DIP routers (with 10 µs as ∆dip) is established based on the
network model Atlanta [13]. The lengths of links in the core
network are 30 km to simulate long-distance transmission. The
bandwidth of ports on DIP routers is 10 Gbps. We deploy 10
access networks, and every access network contains 2 CQF
switches (with 25 µs as ∆cqf ). The bandwidth of ports on
CQF switches is 1 Gbps [14]. TS ﬂows are connected to CQF
switches. Packets of TS ﬂows have to pass through the access
network containing the source hosts, the core network, and the
access network connected by the destination hosts.

Each access network contains 200 TS ﬂows. The data rate of
each TS ﬂow is 500 kbps. Thus, the size of packets is 500 bit,
and the interval of packets is 1ms. Besides, the maximum
acceptable end-to-end delay of these TS ﬂows is 1 ms. The
schedule of packets is conducted in a greedy algorithm. In
the simulation, the best-effort interference ﬂows with a packet
size of 1500 Byte are injected into the converged network. For
verifying the effectiveness of the proposed joint scheduling
in this paper, two experiments are conducted: (1) In different
levels of interference ﬂows, we compare the end-to-end delays
of jointly scheduled ﬂows and best-effort transmitted ﬂows to
verify the capability to providing bounded delays and jitters;
(2) To prove the effectiveness of trafﬁc shaping and path
selection, the comparison of ﬂows admission in three strategies
(i.e., with trafﬁc shaping and path selection, without trafﬁc
shaping, and without path selection) is performed.

Tabel I and Fig. 8 show the result of experiment 1,
and prove the effectiveness of guaranteeing bounded end-to-
end delays and jitters. We randomly choose a TS ﬂow in
an access network to observe. The TS ﬂow is transmitted
in best-effort and the proposed joint scheduling. The total
throughput of all 200 TS ﬂows in the access network is
100 Mbps. With the increase of intensity (i.e., throughput)
of interference ﬂows, the end-to-end delays using best-effort
(BE) grow signiﬁcantly. In the light-load scenario injecting
interference ﬂows with throughput 229 Mbps, the maximum

delay is 980 µs, and the jitter is 375 µs. In the medium-
load scenario with 534 Mbps interference ﬂows, the average
delays are higher compared with light-load scenarios. The
maximum delay is up to 1173 µs, and the jitter is up to
567 µs. Besides, there exist 26 TS ﬂows having end-to-end
delays beyond the maximum acceptable delay (1 ms). The
delays using the joint scheduling is a constant 801 µs with zero
jitters. Delays are not affected by the intensity of interference
ﬂows. In an extremely light-load scenario (i.e., the throughput
of interference ﬂows is 131Mbps), the maximum delay of
best-effort transmission is less than the one in deterministic
transmission. This phenomenon results from the extra delays
introduced from cyclic transmission fashion in deterministic
networking and cycle shifting. For guaranteeing bounded end-
to-end delays and jitters, the extra delays are acceptable, and
the delays in deterministic transmission are signiﬁcantly less
than the maximum delay in light-load, medium-load, and high-
load scenarios.

Fig. 8. The cumulative distribution of end-to-end delays in different intensities
of interference ﬂows. With the increase of interference ﬂows intensity, the
delays and jitters of the TS ﬂow transported in best-effort (BE) increase
sharply. However, the joint scheduling can provide a constant end-to-end delay
in 801 µs, and zero jitters.

Fig. 9 illustrates the result of experiment 2. For verifying
the proposed joint scheduling can raise the throughput of TS
ﬂows, we deploy a different number of TS ﬂows that are
waiting for scheduling in every access network. Obviously, the
total throughput of these TS ﬂows is less than the capacity of
links. Using the joint scheduling with trafﬁc shaping and path
selection, the number of TS ﬂows rejected for deterministic
transmission starts increasing when every access network
contains 1725 TS ﬂows. Without path selection (i.e., all ﬂows
choose the path with a minimum number of hops), the number
of rejected ﬂows starts increasing when 1700 TS ﬂows wait
for scheduling in an access network. Moreover, with the same
number of TS ﬂows, the number of rejected ﬂows is higher
than the one using joint scheduling. Without trafﬁc shaping,
the scheduling starts to reject TS ﬂows when there exist 1200
TS ﬂows. The number of rejected ﬂows starts to increase
sharply when an access network contains 1500 TS ﬂows. The
rejection is severer than the joint scheduling and the scheduling
without path selection. The result shows the trafﬁc shaping and
path selection can improve the throughput of TS ﬂows, and

6008001000120014001600180020002200End-to-end Delay (s)00.20.40.60.81Cumulative Distribution Function (CDF)BE1 (130.848Mbps)BE2 (228.984Mbps)BE3 (534.296Mbps)BE4 (697.856Mbps)Joint SchedulingTABLE I
THE STATISTICS OF END-TO-END DELAYS IN BE AND JOINT SCHEDULING

Intensity of interference ﬂows
(Mbps)
130.848
228.984
534.296
697.856

Best-Effort

mean(µs) max(µs)

612
621
692
847

750
980
1173
2031

jitter(µs)
144
375
567
1426

beyond deadline mean(µs) max(µs)

0
0
26
402

801
801
801
801

Joint scheduling
jitter(µs)
0
0
0
0

801
801
801
801

beyond deadline
0
0
0
0

the trafﬁc shaping is the more important factor to improve the
throughput. Due to trafﬁc shaping can deploy ﬂows to different
transmission cycles, the conﬂict for transmission resources
is reduced. However, because of the tree topology in access
networks, all ﬂows in the same access network have to pass
through common CQF switches, which attenuate the inﬂuence
of path selection. The increase of these three curves is not
linear, because the newly added TS ﬂows may have a high
priority to be scheduled preferentially, and this will make the
TS ﬂows accepted formerly being rejected. Thus, the increase
is not linear.

Fig. 9. The number of rejected TS ﬂows in different intensities of TS
ﬂows. Compared with scheduling without trafﬁc shaping or path selection,
the proposed joint scheduling can decrease the number of rejected TS ﬂows.
Especially compared with scheduling without trafﬁc shaping, the proposed
scheduling can increase network throughput.

VI. CONCLUSION

To empower the end-to-end deterministic transmission, this
paper proposes a hierarchical network that consists of the
access networks and the core networks. In the access net-
work, we use the CQF technique to ensure the deterministic
transmission during the aggregation of the trafﬁc from hosts.
In the core network, DIP is exploited for the long-distance
deterministic transmission over the backbone links. The end-
to-end deterministic transmissions are realized by the cycle
alignment and trafﬁc shaping at the network edge. Moreover,
a joint scheduling approach is also formulated to improve the
network throughput. Simulations results based on the real-
world networks from sndlib show that the proposed network
can achieve a deterministic transmission even in the high-load
scenarios.

ACKNOWLEDGMENT

This work was supported by National Key Research and
Development Program of China (Grant No. 2020YFB1805200,
No. 2020YFB1806400).

REFERENCES

[1] E. Grossman, “Deterministic Networking Use Cases,” RFC 8578, May

2019, [Online]. Available: https://rfc-editor.org/rfc/rfc8578.txt

[2] L. Chettri and R. Bera, “A Comprehensive Survey on Internet of Things
(IOT) toward 5G Wireless Systems,” IEEE Internet of Things Journal,
vol. 7, no. 1, pp. 16–32, 2019.

[3] D. Shan, F. Ren, P. Cheng, R. Shu, and C. Guo, “Observing and
trafﬁc in data center networks,” IEEE/ACM

mitigating micro-burst
Transactions on Networking, vol. 28, no. 1, pp. 98–111, IEEE, 2019.

[4] A. Charny and J.-Y. Le Boudec, “Delay Bounds in a Network with
Aggregate Scheduling,” in International Workshop on Quality of Future
Internet Services, pp. 1–13, Springer, 2000.

[5] “IEEE Standard for Local and metropolitan area networks–Bridges
and Bridged Networks–Amendment 29: Cyclic Queuing and Forward-
ing,” IEEE 802.1Qch-2017 (Amendment to IEEE Std 802.1Q-2014 as
amended by IEEE Std 802.1Qca-2015, IEEE Std 802.1Qcd(TM)-2015,
IEEE Std 802.1Q-2014/Cor 1-2015, IEEE Std 802.1Qbv-2015, IEEE
Std 802.1Qbu-2016, IEEE Std 802.1Qbz-2016, and IEEE Std 802.1Qci-
2017), pp. 1–30, Jun. 2017.

[6] A. Nasrallah, V. Balasubramanian, A. Thyagaturu, M. Reisslein, and
H. ElBakoury, “TSN Algorithms for Large Scale Networks: A Survey
and Conceptual Comparison,” arXiv preprint arXiv:1905.08478, 2019.
[7] “IEEE Standard for Local and Metropolitan Area Networks – Virtual
Bridged Local Area Networks Amendment 12 Forwarding and Queuing
Enhancements for Time-Sensitive Streams,” IEEE Std 802.1Qav-2009
(Amendment to IEEE Std 802.1Q-2005), pp. C1–72, Jan. 2009.

[8] “IEEE Standard for Local and metropolitan area networks–Bridges
and Bridged Networks–Amendment 25: Enhancements for Scheduled
Trafﬁc,” IEEE Std 802.1Qbv-2015 (Amendment to IEEE Std 802.1Q- as
amended by IEEE Std 802.1Qca-2015, IEEE Std 802.1Qcd-2015, and
IEEE Std 802.1Q-/Cor 1-2015), pp. 1–57, Mar. 2016.

[9] R. Salazar, T. Godfrey, N. Finn, C. Powell, B. Rolfe, and M. Seewald,
“White Paper-Utility Applications of Time Sensitive Networking White
Paper,” IEEE, 2019.

[10] M. Chen, X. Geng, and Z. Li, “Segment Routing (SR)-based
Bounded Latency,” Internet Engineering Task Force, Internet-Draft
draft-chendetnet-sr-based-bounded-latency-00, 2018.

[11] L. Qiang, B. Liu, D. Yu, and C. Wang, “Large-scale deterministic
network forwarding technology,” Telecommunications Science, vol. 35,
no. 9, pp. 12–19, 2019.

[12] C. Filsﬁls, S. Previdi, L. Ginsberg, B. Decraene, S. Litkowski, and
R. Shakir, “Segment Routing Architecture.” RFC 8402, Jul. 2018.
[Online]. Available: https://rfc-editor.org/rfc/rfc8402.txt.

[13] S. Orlowski, M. Pi´oro, A. Tomaszewski, and R. Wess¨aly, “SNDlib
1.0–Survivable Network Design Library,” Networks: An International
Journal, vol. 55, no. 3, pp. 276–286, 2010.

[14] J. Yan, W. Quan, X. Jiang, and Z. Sun, “Injection Time Planning: Making
in Time-Sensitive Networking,” in IEEE INFOCOM
CQF Practical
2020-IEEE Conference on Computer Communications, pp. 616–625,
IEEE, 2020.

12001300140015001600170018001900The number of time-sensitive flows0100200300400500600The number of rejected flowswith shaping & path selectionno shapingno path selection