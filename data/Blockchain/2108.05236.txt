1
2
0
2

g
u
A
1
1

]

C
D
.
s
c
[

1
v
6
3
2
5
0
.
8
0
1
2
:
v
i
X
r
a

A Limitlessly Scalable Transaction System

Max Mathys, Roland Schmid, Jakub Sliwinski, and Roger Wattenhofer

ETH Z¨urich

Abstract. We present Accept, a simple, asynchronous transaction sys-
tem that achieves perfect horizontal scaling.
Usual blockchain-based transaction systems come with a fundamental
throughput limitation as they require that all (potentially unrelated)
transactions must be totally ordered. Such solutions thus require serious
compromises or are outright unsuitable for large-scale applications, such
as global retail payments.
Accept provides eﬃcient horizontal scaling without any limitation. To
that end, Accept satisﬁes a relaxed form of consensus and does not
establish an ordering of unrelated transactions. Furthermore, Accept
achieves instant ﬁnality and does not depend on a source of randomness.

1

Introduction

The ﬁnancial world is changing around the globe. With the rise of digital cryp-
tocurrencies like Bitcoin [11] and Ethereum [14], the pressure on the traditional
banking system to implement a digital currency on its own is rising. Due to
the well-known limitations of permissionless blockchain systems thus far, such
a digital currency is mostly envisioned based on permissioned, byzantine fault-
tolerant ledger technology. Furthermore, as both central and commercial banks
have no interest in a fully distributed solution which can hardly be regulated,
the employment of a permissioned system constitutes a good ﬁt to establish such
a digital currency.

Previously, revolutionizing the global ﬁnancial infrastructure was envisioned
on the basis of byzantine agreement protocols. Such systems are popular because
they provide a reliable and robust way of transferring funds between participants
by establishing a total order of all transactions. However, ordering all transac-
tions has proven to be a throughput-limiting factor for these systems, which only
achieve throughputs up to tens of thousands of transactions per second even in
lab environments [13]. Despite byzantine agreement systems being optimized for
high throughput, they only recently matched the demands of leading credit card
providers; hence, this technology does not seem future-proof in our increasingly
digital world.

Our Contribution: We present a system based on A Cheaper Consensus for
Eﬃcient, Parallelizable Transactions (Accept), that features:

– Limitless Scalability: Accept does not order transactions that do not
depend on each other. Thus, any number of parallel transactions can be
processed given suﬃcient amount of hardware.

 
 
 
 
 
 
2

Max Mathys, Roland Schmid, Jakub Sliwinski, and Roger Wattenhofer

– Instant Finality: Accept conﬁrms transactions in 1 round-trip time to the
validator nodes. Conﬁrmed transactions are ﬁnal and cannot be reversed.
– Asynchrony: Accept does not require any network timing assumptions.
An adversary having complete control over the network can halt the progress
of the system (by simply disabling communication), but otherwise cannot
trick the participants in any way, such as reversing a conﬁrmed transaction
or pretending that an impermissible transaction is conﬁrmed.

– Independent Validators: Validator nodes only need to provide a basic
API to accept new transactions, verifying them internally and returning a
valid signature in case of success. This makes the nodes’ implementations
independent, as they only need to interpret other nodes’ (and clients’) sig-
natures. Validators can parallelize and balance workload as they individually
see ﬁt, without changing the way they interact with the system.

– Simplicity: Accept does not rely on randomness, is easy to comprehend
and to implement. Hence, given some deployment scenario, the validators
can easily implement the protocol themselves, thus achieving fault-tolerance
with respect to software bugs in the code. In contrast, existing (complicated)
permissioned blockchain systems rely on reference implementations that are
used as a black-box, where a single bug can compromise the entire system.
We demonstrate Accept’s horizontal scaling on common server hardware and
showcase its transaction throughput to be orders of magnitudes above byzantine
agreement systems.

2 Model and Preliminaries

Accept is maintained by n diﬀerent agents called validators. Similarly to other
byzantine fault tolerant systems, we assume up to f = n−1
3 of the validators are
adversarial and behave in an arbitrary way. Any set of 2f + 1 validators is called
a quorum. In addition, an arbitrary number of clients interact with the system
by issuing and receiving transactions.

The network is asynchronous: The adversary controls the network, dictating
when messages are delivered and in what order. There is no bound on the time
it might take to deliver a message. Under such weak network requirements,
an adversary delaying the delivery of messages can delay the progress of the
protocol, but otherwise will not be able to interfere.

We assume the functionality of digital signatures where a public key allows
to verify a signature of the associated secret key. We also assume cryptographic
hashing, where for every message a succinct, unique hash can be computed.
Apart from these primitives, Accept is completely deterministic.

Security & Threat Model. Validators and clients hold public/private key pairs.
All participants know the public keys of all validators.

The adversary knows the protocol and controls all adversarial validators, and
any number of clients. The adversary controls the network and can delay, replay,
reorder messages etc. The adversary does not know the private key of any correct
participant.

A Limitlessly Scalable Transaction System

3

3 Protocol

The Accept protocol diﬀerentiates two main roles:

– Validators: Validators are agents that verify and sign transactions. There
is a ﬁxed number of validators. Validators do not have to exchange messages
with each other. Validators can be sharded across multiple servers to increase
the throughput of the system.

– Clients: Clients are end users of the system who issue/receive transactions.
The system supports an arbitrary number of clients in the system. Clients
possess funds that can be sent to other clients via a transaction. Clients may
follow the protocol correctly or not; however, it is only guaranteed that they
can spend their funds if following the protocol.

Transactions are processed by the system in the UTXO model [7]. The initial
state of the system, called genesis, consists of (number, public key) pairs, where
the number represents the available funds, and the public key identiﬁes the party
able to spend them. These pairs are called unspent transaction outputs (UTXO).
If a client (sender) wishes to transfer funds to another client (recipient),
the sender issues a transaction. The transaction contains input UTXOs that
the sender can spend. The sender speciﬁes output UTXOs, where inputs and
outputs sum up to the same amount of funds. For example, a single transaction
can specify two outputs, where one output represents the transacted amount and
includes the public key of the recepient, and the second output represents the
change and includes the public key of the sender. Ultimately, the sender signs
the transaction with the private key(s) corresponding to the inputs.

Transaction Pipeline. Accept performs four steps to conﬁrm a transaction from
client c1 to client c2:

1. Issuing a Transaction: The client c1 composes and signs a transaction.
Client c1 sends the transaction to the validators. If the inputs of the trans-
action are not part of genesis, the client also sends the conﬁrmations of the
inputs to the validators.

2. Verifying a Transaction: Each validator vi veriﬁes the transaction signa-
ture and inputs’ conﬁrmations (if not part of genesis). Also, vi checks that
it has not validated any transaction spending the same inputs thus far.
3. Signing a Transaction: If the transaction is valid, validator vi signs the

transaction and returns the signature to c1.

4. Finalizing a Transaction: A set of 2f + 1 signatures of distinct validators
constitutes a conﬁrmation of the outputs. The client c1 can show the corre-
sponding transaction output and the conﬁrmation to c2 to prove the transfer
took place. The client c2 accepts the transfer after verifying the output and
the conﬁrmation.

4

Max Mathys, Roland Schmid, Jakub Sliwinski, and Roger Wattenhofer

3.1 Correctness

Double-spending. Suppose some execution of the protocol produced two con-
ﬁrmed transactions t1 and t2 that spend the same output. Each conﬁrmed trans-
action is signed by a validator quorum. Since the adversary controls at most f
validators, at least f +1 correct validators signed t1 and t2. Since there are 2f +1
correct validators, some correct validator v signed both t1 and t2. However, when
signing a transaction, correct validators check whether they have not signed any
of the inputs previously – a contradiction.

Finality. Given a conﬁrmed UTXO, it can only be invalidated if some validators
observe a transaction that spends the UTXO. Only the owner of the UTXO can
sign such a transaction.

Liveness. Any 2f + 1 validators can conﬁrm any transaction. Since at least
2f + 1 validators are correct, the correct validators can conﬁrm transactions if
the adversary refrains from participating.

3.2 Signature Protocol

Naively, validators can sign each transaction separately and verify separate sig-
natures for each output. In addition to this naive approach, we design two dif-
ferent protocols for batch-processing the transactions, thereby vastly improving
the system’s performance: the Merkle scheme and the BLS scheme.

3.3 Merkle Scheme

In the Merkle scheme, validators combine many transactions into Merkle trees
and only sign the root, eﬀectively signing many transactions at once.

Signing. By pooling multiple signing requests, the validator collects a large num-
ber p of unsigned outputs. The hashes of the outputs h0(i) = h(oi) are hashed
in pairs h1(i) = h(h0(i), h0(i + 1)), the resulting hashes are hashed in pairs
h2(i) = h(h1(i), h1(i + 2)) and so on, to create a complete binary tree of hashes,
where the leaves are the hashes of the UTXOs to be signed.

The validator signs the root of the tree. For each output oi, the validator will
return to the issuer of oi the hashes needed to compute the path from h(oi) to
the root: the hash x1 to compute h1(i) = h(h0(i), x1), the hash x2 to compute
h2(i) = h(h1(i), x2), and so on. These hashes xj together with the signature of
the tree root constitute oi’s signature in the Merkle scheme (see Appendix A.1).
When a validator signs p outputs, only one signing operation is executed
(compared to p signing operations with the naive scheme). However, many hash
operations must be performed for both signing and veriﬁcation in this scheme.

A Limitlessly Scalable Transaction System

5

Signature veriﬁcation. As in the naive scheme, for an output to be conﬁrmed,
there must be > 2
3 n signatures from diﬀerent validators. We verify each Merkle
signature si = ({xj}, sroot
): we reconstruct the hash path to the root using
the xj’s and verify the signature of the root. There are p signatures with the
same Merkle root; hence, the veriﬁcation result can be cached in memory by the
validator such that the validator only veriﬁes the root signature the ﬁrst time it
is observed. For all p − 1 subsequent encounters of the root, it suﬃces that the
validator performs log(p) hash operations.

i

Optimal Merkle Tree Size. If the Merkle tree is very large, the hashing time
dominates the veriﬁcation and signing process. However, if the Merkle tree size
is small, the cryptographic operations dominate. We omit the work not related
to cryptographic operations or hashing, and estimate the optimal tree size.

Let q be the quorum size of the system, N the number of leaves in the
Merkle tree, ch, cs, cv the costs of hashing, signing and veriﬁcation. Let Cnaive
and Cmerkle denote the average time cost incurred by a validator to process
one UTXO under the naive and Merke signature protocols. Each validator signs
a UTXO once, and later has to verify the signatures constituting that UTXO’s
conﬁrmation. Hence, the expected cost for the naive scheme is Cnaive = q·cv +cs.

The expected cost of the Merkle scheme is

Cmerkle = q
(cid:124)

(cid:16)

ch log N +
(cid:123)(cid:122)
Veriﬁcation

+

cv
N

(cid:17)

(cid:125)

2N ch + cs
N
(cid:123)(cid:122)
Signing

(cid:124)

(cid:125)

= log N (qch) +

1
N

(qcv + cs) + 2ch.

The expression is minimized by N = qcv+cs
ln 2. For example, if the relative
operation costs are around ch = 1, cs = 63, cv = 107 and there are 10 validators
(quorum size 7), we estimate the optimal number of leaves in the Merkle tree
at N optimal ≈ 80.4. For binary trees (log N being integer), either a Merkle tree
with 64 or 128 leaves is optimal.

qch

3.4 BLS Scheme

BLS [6] is a signature scheme where signatures can be aggregated. One veriﬁca-
ton operation on an aggregated signature can be used to verify all constituent
signatures at once. Combining the properties of BLS with Shamir’s secret shar-
ing, it is possible to construct a threshold signature scheme. In this scheme,
each validator possesses a diﬀerent private key and signs transactions for clients
individually. Once a client obtains at least 2f + 1 signatures for their transac-
tion, they can use the signatures to compute a unique master signature of their
transaction. The master signature is unique and the same, irrespective of which
2f + 1 validators’ signatures were used to compute it.

Due to space constraints, we do not describe the working of this threshold

scheme in detail (the reader can ﬁnd an instructive description at [5]).

The BLS sigantures are relatively costly to produce and verify. However, the
scheme comes with the great advantage that aggregated BLS threshold signa-

6

Max Mathys, Roland Schmid, Jakub Sliwinski, and Roger Wattenhofer

tures have a constant veriﬁcation time, irrespective of the number of validators
in the system.

Each validator receives a BLS private key, and the corresponding public keys
are publicly known. The master public key is publicly known (or can be computed
given the validator public keys). The validators sign the outputs of the clients
with their BLS keys, similarly to the naive scheme. The validators’ signatures
function on their own as usual, so clients can verify that they receive the correct
signatures. After receiving 2f + 1 signatures, a client can compute the unique
master signature for their outputs. Most importantly, when validators receive
transactions to be signed, they only need to verify one master signature for each
input of the transaction.

4

Implementation

The validator node and client are written in Go due to its performance and ease
of parallelization. The implementation features the three diﬀerent signature pro-
tocols described in Sections 3.2-3.4: the naive scheme, the Merkle scheme and
the BLS scheme. For signing and veriﬁcation, the naive and Merkle schemes
use EdDSA with Curve25519 (Ed25519). A Go library [1] provides bindings to
ed25519-donna [4]. Ed25519-donna is written in C++ and provides a fast im-
plementation of the Ed25519 public-key signature system [3]. Batch veriﬁcation
can be used for greater throughput. The BLS scheme is implemented using the
herumi/bls [9] with Go-bindings [10].

Benchmarking Merkle tree size. The signing and veriﬁcation times for the Merkle
signature scheme have been measured on the AWS reference instance for diﬀerent
Merkle tree sizes and 10 validators. The observed global minimum around 64-128
leaves matched the conclusion from Section 3.3.

4.1 Cryptographic Scheme Comparison

The benchmark of the cryptographic operations executed on a single core on the
reference instance is denoted in Table 1.

If multiple signatures are veriﬁed in one batch, EdDSA can take advantage of
x86 SIMD instructions. This gives veriﬁcation a speedup of up to ≈ 2. Assuming
that the Merkle tree has 64 leaves, the Merkle scheme is about a magnitude
faster than the naive scheme. Since veriﬁcation of threshold BLS signatures is
constant for any number of validators, we ﬁnd BLS to be faster than the naive
and Merkle schemes if the number of validators is > 37 and > 475, respectively.
Moreover, for larger quorum sizes, the naive and Merkle schemes yield larger
transaction conﬁrmations, whereas BLS’ conﬁrmations have a constant size.

4.2 Storage

Each validator keeps track of outputs they signed as spent. The spent outputs
are stored in a thread-safe and eﬃcient hash map. Golang’s built-in thread-
safe hash map, sync/map, exhibits excessive lock usage and coroutine blocking;

A Limitlessly Scalable Transaction System

7

Scheme

Operation

ns per signature

Naive

Merkle

BLS

Signing
Verifying, single
Verifying, batch of 64

Signing
Verifying, no caching
Verifying, cached

Signing
Verifying

29,967
100,663
51,247

2709
106,771
6473

640,205
1,918,578

Table 1: Benchmarks for relevant cryptographic operations for each scheme. Fort
the Merkle scheme, the number of leaves is 64.

hence, we implemented a purpose-built hash map (see Appendix A.2). Running
on the AWS reference instance with one coroutine per processor, Golang’s im-
plementation reaches 7.04·105 inserts per second, and our implementation about
3.30 · 107 inserts per second.

4.3 Sharding

Crucially, validators can easily shard their workload among multiple machines.
Clients are assigned to diﬀerent shards based on their public key; in this imple-
mentation, inputs corresponding to diﬀerent public keys cannot be mixed in one
transaction. In our implementation, the assignment of clients to shards is pub-
licly known and clients request the machines they are assigned to. Alternatively,
validators could use some load balancing approach.

5 Evaluation

We performed end to end benchmarks of the system using the Merkle scheme
with servers rented at AWS. We tested with 4, 10, and 28 validators. For each
number of validators, we performed an experiment with 1, 2, and 4 shards (ma-
chines) for each validator. The server instances used in these benchmarks were
c3.8xlarge with 32 virtual CPU threads and 60 GiB of RAM. Each test consisted
of a preset number of client servers (corresponding to the expected throughput)
generating transactions and sending them to appropriate shards of the valida-
tors. The duration of each test was ten minutes. The results of the experiment
are presented in Table 2. The average CPU utilization observed was 80.9%.

We performed an additional experiment with 4 validators and 37 shards per
validator (and otherwise the same setup), yielding a throughput of 1,449,847
transactions per second on average, with an average CPU utilization of 71.9%.
The results of this experiment are presented with logarithmic scales in Figure 1.

8

Max Mathys, Roland Schmid, Jakub Sliwinski, and Roger Wattenhofer

#validators

4

1 shard
2 shards
4 shards

48,667
92,115
183,380

10

34,451
72,079
141,767

28

22,015
44,764
80,917

Table 2: Average transactions per second in the experiment.

Fig. 1: TPS scalability results for 4 validators, log scales.

6 Related Work

The ﬁrst work to suggest a simpler, consensus-free approach to processing trans-
actions in a permissioned system was Gupta [8]. Gupta focuses on providing
veriﬁable audit trails. We employ a similar transaction conﬁrmation principle
and focus on designing and implementing a system around horizontal scaling
without loss of eﬃciency.

ABC [12] describes how a consensus-free system can be managed similarly
to proof-of-stake blockchains, thus extending the approach to the permissionless
setting. ABC also contributes some features of the protocol, such as pruning
redundant contents from the blockchain, and discusses some economic aspects of
the permissionless setting. However, ABC does not provide an implementation.
FastPay [2] is concurrent work that provides an implementation of a permis-
sioned settlement system and focuses on interfacing with a preceding, primary
system. FastPay is similar in spirit to Accept, but more complicated in crucial
aspects; for example, FastPay employs a two-phase conﬁrmation protocol that
complicates the interaction between the validators. However, FastPay does not
implement eﬃciency improvements similar to those described in Sections 3.3 and
3.4. Parallel processing in FastPay’s implementation is only process-based, and
hence does not exemplify multi-machine sharding. The performance is also not
reported clearly: benchmarks are presented for the two conﬁrmation phases sep-
arately, whereas one exhibits a bottleneck in the process-based implementation.

A Limitlessly Scalable Transaction System

9

References

1. ed25519 - optimized ed25519 for go. https://github.com/oasisprotocol/

ed25519 (2020)

2. Baudet, M., Danezis, G., Sonnino, A.: Fastpay: High-performance byzantine fault

tolerant settlement. arXiv preprint arXiv:2003.11506 (2020)

3. Bernstein, D., Duif, N., Lange, T., Schwabe, P., Yang, B.Y.: High-speed high-

security signatures. Journal of Cryptographic Engineering 2 (2012)

4. Bernstein, D., Duif, N., Lange, T., Schwabe, P., Yang, B.Y.: ed25519 donna. https:

//github.com/floodyberry/ed25519-donna (2020)

5. Block, A.: https://blog.dash.org/secret-sharing-and-threshold-signatures-with-bls-954d1587b5f

(2018)

6. Boneh, D., Lynn, B., Shacham, H.: Short signatures from the weil pairing. Journal

of cryptology 17(4), 297–319 (2004)

7. Delgado-Segura, S., P´erez-Sola, C., Navarro-Arribas, G., Herrera-Joancomart´ı, J.:
Analysis of the bitcoin UTXO set. In: International Conference on Financial Cryp-
tography and Data Security. pp. 78–91. Springer (2018)

8. Gupta, S.: A Non-Consensus Based Decentralized Financial Transaction Processing
Model with Support for Eﬃcient Auditing. Master’s thesis, Arizona State Univer-
sity (Jun 2016)

9. Mitsunari, S.: BLS threshold signature. https://github.com/herumi/bls (2020)
10. Mitsunari, S.: BLS threshold signature for ETH with compiled static library.

https://github.com/herumi/bls-eth-go-binary (2020)

11. Nakamoto, S.: Bitcoin: A peer-to-peer electronic cash system (2008)
12. Sliwinski, J., Wattenhofer, R.: Abc: Proof-of-stake without consensus. arXiv

preprint arXiv:1909.10926 (2019)

13. Stathakopoulou, C., David, T., Vukoli´c, M.: Mir-bft: High-throughput bft for

blockchains. arXiv preprint arXiv:1906.05552 (2019)

14. Wood, G., et al.: Ethereum: A secure decentralised generalised transaction ledger.

Ethereum project yellow paper 151(2014), 1–32 (2014)

10

Max Mathys, Roland Schmid, Jakub Sliwinski, and Roger Wattenhofer

A Concepts

This section will clarify the concepts of Merkle signatures and hash maps. Merkle
signatures are used in Section 3.3 to improve the eﬃciency of validators. A
custom hash map is developed to improve the performance of the UTXO store,
as described in Section 4.2.

A.1 Merkle Signatures

A signature scheme based on Merkle trees is used to optimize the performance
of validators when creating and verifying signatures.

Signing. A validator Si collects n hashes to sign where n = 2k, k ∈ N. The
hashes are combined into a Merkle tree. The validator Si signs the Merkle root
m using EdDSA, denoted as mSi. For each hash hi, i ∈ {1, .., n}, the validator
calculates the Merkle path and outputs pathhi. pathhi consists of the hashes
and side (left or right) of the nodes from hi to the Merkle root (in blue). The
resulting signature for hi by Si is the tuple (pathhi, mSi). An example can be
seen in Figure 2.

Signing n hashes using Merkle signatures is more eﬃcient than signing n
hashes separately: the cost of an EdDSA signing operations cs is much higher
than the cost of a hash operation ch. The cost of signing n hashes with Merkle
signatures is 2n · ch + cv whereas the cost of signing n hashes separately (without
Merkle signatures) is n · cv.

m

h13

h14

h9

h10

h11

h12

h1

h2

h3

h4

h5

h6

h7

h8

pathh3 = {h4, right}, {h9, left}, {h14, right}

sig = (pathh3 , mSi )

Fig. 2: Merkle tree and Merkle signature for hash h3.

Verifying. First, the Merkle root m(cid:48) is reconstructed from the path pathhi . If
pathhi is a valid path, m(cid:48) matches m. Finally, mSi is veriﬁed using EdDSA.

Verifying n hashes using Merkle signatures is also more eﬃcient than verifying
n hashes separately because the cost of an EdDSA veriﬁcation operation is high,
even higher than an EdDSA signing operation (and thus also higher than the

A Limitlessly Scalable Transaction System

11

cost of a hashing operation). The Merkle root can be reconstructed with a cost
of log2(n) · ch where ch is the cost of hashing. The Merkle root m only has to be
veriﬁed for the ﬁrst encountered Merkle signature, after that, the result of the
veriﬁcation can be cached, making this signature perform very well.

A.2 Hash Maps

Hash maps are used to eﬃciently calculate set membership in the context of
spent UTXO identiﬁers. Elements e ∈ E (in our case idi) are hashed into the
hash range H = {0, ..., l} and used as an index to an array of linked lists. A
linked list at index i ∈ {0, ..., l} contains all items e where hash(e) = i. The
linked list is then traversed.

Hashing and indexing are implemented as a lock-free operation; traversing
and modifying a linked list are protected by a mutex. If l is large enough, the
probability of hash collisions is small, minimizing lock contention and the length
of the linked list.

hash(id1)

hash(id2)
...

0

1
...

k
...

l

id1: true

. . .

Fig. 3: A hash map, where id1 indexes into hash(id1) = k

