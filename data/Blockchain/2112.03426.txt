A Survey of Veriﬁcation, Validation and
Testing Solutions for Smart Contracts

Cha¨ımaa Benabbou
Universit´e Paris-Saclay, CEA, List
F-91120, Palaiseau, France
chaimaa.benabbou@cea.fr

¨Onder G¨urcan?
Universit´e Paris-Saclay, CEA, List
F-91120, Palaiseau, France
onder.gurcan@cea.fr

contracts

are programs

Abstract—Smart

stored on a
blockchain that run when predetermined conditions are met.
However, designing and implementing a smart contract is not
trivial since upon deployment on a blockchain, it is no longer
possible to modify it (neither for improving nor for bug ﬁxing).
It is only possible by deploying a new version of the smart
contract which is costly (deployment cost for the new contract and
destruction cost for the old contract). To this end, there are many
solutions for testing the smart contracts before their deployment.
Since realizing bug-free smart contracts increase the reliability,
as well as reduce the cost, testing is an essential activity. In this
paper, we group the existing solutions that attempt to tackle smart
contract testing into following categories: public test networks,
security analysis tools, blockchain emulators and blockchain
simulators.Then, we analyze these solutions, categorize them and
show what their pros and cons are.

Index Terms—blockchain, smart contract, public test network,
security analysis tool, blockchain emulator, blockchain simulator,
VV&T

I. INTRODUCTION

With Bitcoin, the blockchain technology initially gained
traction in 2008 [32]. Nowadays, it is considered as a major
disruptive innovation with the potential to transform most
industries. The blockchain can be regarded as a transparent,
secure technology for storing and transmitting information that
operates without a trusted third party.

For making the blockchain a general-purpose solution,
Ethereum introduced the concept of smart contracts [39], i.e.
immutable code on the blockchain that gets executed auto-
matically once certain conditions are met between parties that
do not necessarily trust each other. With smart contracts, the
blockchain technology has seen a rapid climb to prominence,
with its applications in various domains. They can improve
insurance processes by automating claims when certain events
occur, enable better supply chains1 and more applications in
business, commerce, and governance are still emerging . Given
the wide range of smart contract adoption, best practices for
implementing such code must be taken.

Since smart contracts deployment is deﬁnitive, the vulner-
abilities and the attacks can challenge the sustainability of
applications using them. The most known ones are related to

Ethereum: the DAO attack in May 20162 that helped to gather
around $150 million or the Parity Wallet hack3, on November
8, 2017, that valued at over $152 million.

Moreover, executing smart contracts consumes certain
amount of computation and memory. For instance, Ethereum
community introduced gas, a notion to measure the amount of
computational power needed to be paid to the miners in order
to execute their operations.

Today, there are several blockchain systems that support
smart contracts, such as Ethereum [39] and Quorum [5] that
use Solidity for writing smart contracts, Hyperledger Fabric
[2] that utilizes general-purpose programming languages (Go,
Node.js, JavaScript and Java), Corda [8] that supports Java and
Kotlin languages, Stellar [27] that uses Javascript SDK and
Node.js and NEO [26] that develops smart contracts using
C#. Besides, Tezos[15] designed new functional program-
ming languages for smart contracts: Michelson, SmartPy and
LIGO. Recently, Cardano4 introduced smart contracts using
Plutus, Marlowe & Glow programming languages. Besides,
Tendermint/Cosmos5 supports smart contracts written in any
languages.

Bitcoin is also a pioneer in this ﬁeld by enabling writing
transactional rules using its non Turing-complete language,
called Script6 and soon a completely new way of designing
smart contracts in Bitcoin will be introduced.

The life-cycle of a smart contract consists of the following

stages [16, 19, 25, 36]:

Analysis and design of the intended smart contract:

– Deﬁne the requirements and the use-cases of
the target

the smart contract (i.e.
blockchain, the target language and so on).

the functions,

– Design the clauses and the functions of the smart

contract.

Implementation and testing of the smart contract:

•

•

2DAO

attack

cost,

https://blog.b9lab.com/

the-dao-hack-in-eight-minutes-94919018692d, last access on 07/06/2021.

3Parity

Wallet

hack

cost,

https://cointelegraph.com/news/

parity-multisig-wallet-hacked-or-how-come, last access on 07/06/2021.

4Cardano, https://docs.cardano.org/en/latest/index.html,

last access on

16/06/2021.

1Smart Contract and Supply Chain, https://www.frontiersin.org/articles/10.

3389/fbloc.2020.535787/full, last access on 28/06/2021.

5Tendermint, https://tendermint.com/core/, last access on 18/06/2021.
6Script, https://en.bitcoin.it/wiki/Script, last access on 15/06/2021.

– Select a testing approach and implement the smart

contract using a corresponding language.

– Perform tests and analyze the results.

•

•

•

Repetition of the above steps till the desired smart con-
tract is implemented in the target language for the target
blockchain.
Deployment of the smart contract onto blockchain net-
work deﬁnitively.
Execution of the smart contract through functions calls:
– Select a smart contract function and send a function

call in the form of transaction.

– Upon the conﬁrmation of the transaction, the smart
contract function is executed7 and the blockchain
state is updated8.

•

Termination of the smart contract to stop execution of its
functions9.
Consequently,

implementation and testing phase is not
trivial and should be taken into account seriously. To this
end, there are various different veriﬁcation, validation and
testing (VV&T) solutions for different purposes proposed in
the literature. However, there is no survey covering all the
VV&T solutions for smart contracts.

Based on this observation, in this study, we provide a survey
of these solutions. The survey is organized as follows. First,
we divide the VV&T solutions into four distinctive categories
and explain them (Section II). Then we analyze each category
and compare them with respect to their proprieties (Section
III). After, we provide a discussion about how these solutions
can be used together (Section IV). Finally, we identify open
challenges and conclude the paper (Section V).

II. VV&T SOLUTIONS

From a software engineering point of view, to ensure the
correctness of smart contracts, we use a technique conducted
to perform veriﬁcation, validation and testing (VV&T). Veri-
ﬁcation is the process to ensure that ”we are developing the
right product” (i.e. it meets the speciﬁcations), validation is
to ensure that ”we have developed the product right” (i.e.
it fulﬁlls its intended purpose) and testing is to reveal ”the
existence of errors in the product”, as stated in [6]. This
involves verifying whether the detailed functional VV&T of
business logic and process are operating as expected.

Since they are immutable code, once deployed, they are
ﬁnal and cannot be updated. The only way to ﬁx a bug on a
deployed smart contract is to deploy a new version of it; the old
version remains there forever10. So performing VV&T before

7In fact, this is the case when the blockchain uses the Order-Execute-Update
approach. However, there are also blockchains that use the Execute-Order-
Validate-Update approach [2, 34].

8The world state can always be regenerated from the blockchain. It works

as a cache that only stores the current value of a state.

9Here it should be noted that smart contract can not be deleted from the

blockchain.

10Some permissioned blockchains like Hyperledger Fabric allows the smart
contract logic to be updated so that the buggy version will not be accessible
any longer.

deployment make sure the smart contract has the expected
behaviors.

To tackle these problems, many VV&T solutions have
already been proposed and are still being proposed in the
literature. To better analyze these solutions and compare them,
we grouped them into four main categories : public test
networks, security analysis tools, blockchain emulators with
smart contracts support and blockchain simulators with smart
contracts support.

A. Public Test Networks

Blockchain systems are deployed onto public networks,
called main networks. It is the end product available for the
public to use. For VV&T purposes, there are also public avail-
able networks, called (public) test networks, in which anyone
can access via their clients (i.e. popular wallet interfaces).

Public test networks enable to compile and deploy smart
contracts and perform frequent tasks, such as running tests,
automatically checking code for compilation errors or inter-
acting with smart contracts in a public environment.

When using a public test network, the environment condi-
tions are the same as the main network. The main difference
is that, while in the main network crypto-currencies are traded
for goods and services, in test networks they are given away
for free without the need for mining. Hence, users do not have
sufﬁcient control to conﬁgure the network conditions. They are
created and only conﬁgured by people from the community.
The main steps to test smart contracts using public test

networks are:

•

•

•

•

•

•

Choose a public test network depending on the desired
target blockchain.
Create a wallet to store the crypto-currencies using a
blockchain client.
Claim a desired amount of coins for free from a Faucet
Website.
Connect the blockchain client to the test network.
Write a smart contract using a target language and deploy
it onto the test network.
For each smart contract function, write a test using a
language that can interact with the blockchain client and
execute it through the blockchain client.

There are several public test networks that exist in the lit-
erature. The Ethereum community proposed Ropsten, Rinkby,
Kovan and G¨orli test networks11. While the Tezos commu-
nity introduced Teztnets12, a platform to help in the de-
ployment of Tezos test networks, namely Florencenet and
Granadanet. Testnet313 is another test network proposed by
the Bitcoin community, nearly identical in characteristics to
Bitcoin blockchain, that overcomes some difﬁculties related to

11Ropsten Test Network: https://ropsten.etherscan.io/, Rinkby Test Net-
work: https://rinkeby.etherscan.io/, Kovan Test Network: https://kovan.
etherscan.io/ and G¨orli
last accessed on
26/05/2021.

test network, https://goerli.net/

12Teztnets,https://teztnets.xyz/, last access on 04/06/2021.
13Bitcoin actual

test network, https://en.bitcoinwiki.org/wiki/Testnet#

Testnet vs Testnet2, last access on 14/06/2021.

transaction delay of the previous Testnet2. The Hyperledger
Fabric community has also released two versions of Fabric
test network14 (v1.4 and v2.1) that enable developers to test
their smart contracts and applications. Tendermint community
provides gaia and basecoind tesnets for Tendermint/Cosmos-
like blockchains.

B. Security Analysis Tools

Security analysis tools allow automatically analysing smart
contracts and detecting some of their predeﬁned common vul-
nerabilities. without necessarily deploying the smart contract
to a blockchain test network.

To validate, verify and test smart contracts using such tools,
it is necessary to write the smart contract and either invoke the
dedicated tool command or add the tool plugin, if possible, to
a blockchain emulator that supports it. The security analysis
tools then analyze either the source code of the smart contract
or its compiled blockchain virtual machine bytecode. Most
of the security analysis tools in the literature are developed
for the Ethereum blockchain [1, 3, 18]. The most well-known
ones are Why3 [33], Oyente [24], Securify [38], Osiris [11],
Sereum [31], Mythx15, Mythril16, SmartCheck17, Manticore18,
MAIAN19, Solgraph20, Reguard [23], Slither [14], Fether [40],
FSolidM [28] , VeriSolid [29], ZoKrates [13] and Vandal [7].
Concerning other blockchain systems, to the best of our
knowledge, there are only a few solutions, namely Chaincode
analyzer21 [21] and Reviveˆˆc22 for Hyperledger Blockchain,
Zeus for Ethereum and Hyperledger [20], and SODA [10] for
any blockchain that adopts EVM as its smart contract runtime.

C. Blockchain Emulators with smart contract support

Blockchain emulators are software programs that imitate the
features of a blockchain. They enable reproducing blockchain
networks locally to mimic the outer behavior of the main
network features. In other words, they duplicate completely
the main network in a virtual environment to emulate VV&T
scenarios. Thus, it allows the developer to debug and test smart
contracts.

Generally,

the emulators come with a default network
conﬁguration ﬁle but it can be expanded to change the en-
vironment options (include more networks, choose the mining

14Hyperledger Fabric test netxork , https://hyperledger-fabric.readthedocs.

io/en/latest/test network.html, last access on 26/05/2021.
15Mythx, https://mythx.io/about/,lastaccess26/05/2021,

last

access on

25/05/2021.

16Mythril, https://github.com/ConsenSys/mythril, last access on 25/05/2021.
17SmartCheck,
on

https://smartcontracts.smartdec.net/,

access

last

25/05/2021.

18Manticore,

27/05/2021.

19MAIAN,

27/05/2021.

20Solgraph,

27/05/2021.

21Chaincode

https://github.com/trailofbits/manticore,

last

access

on

https://github.com/ivicanikolicsg/MAIAN,

last

access

on

https://github.com/raineorshine/solgraph,

last

access

on

analyzer,

https://github.com/FujitsuLaboratories/

ChaincodeAnalyzer, last access on 10/06/2021.

22Reviveˆˆc tool, https://github.com/sivachokkapu/revive-cc, last access on

01/06/2021.

mode, adapt the block time and so on) or smart contracts
options.

To test smart contracts on emulators, a user needs to:

Conﬁgure the blockchain if wanted (most of emulators
come with a default conﬁgurations).
Write and compile a smart contract.
Migrate (or deploy) the smart contract locally on to the
emulated blockchain.
Run automated tests or write quick and effective tests.

•

•

•

•

In the literature, several smart contract emulators exist:
Hyperledger Umbra, Hyperledger Caliper, Hardhat, Trufﬂe,
Brownie, Takamaka [37], Ganache, Blockbench [12], Hawk
[22], Remix, Tenderly, and Embark23.

D. Blockchain Simulators with smart contract support

A blockchain simulator can mimic the internal behaviours
of blockchains. They are used when there is the need for
the blockchain to perform in an expected way. It helps
developers create a copy of an existing blockchain into a
virtual environment to get an idea about how, in our case,
smart contracts work. It does not follow all the rules of a
main network but simulate the relevant behaviors. It enables
users design, implement and evaluate a blockchain with the
desired conﬁguration of the network’s initial conditions using
different settings and parameters.

To test smart contracts on simulators, a user should:

•

•

•

Set up the blockchain conﬁguration
Write a smart contract
Deploy the smart contract on the simulated blockchain
Write tests for deployed smart contracts’ functions

•
There are several blockchain simulators in the literature, yet,
to the best of our knowledge, there is only one blockchain
simulator supporting smart contracts: Guantlet24 [4].

III. ANALYSIS OF SOLUTIONS

VV&T solutions are used to build smart contracts more
efﬁciently and aim at improving their security and correctness.
In this section, we examine and compare the aforementioned
VV&T solutions.

Table I summarizes the most known smart contracts vul-
nerabilities with respect to three scopes: (1) smart contract
scope that occurs due to the source code (such as integer
overﬂow/underﬂow when performing operations with value
limitations), (2) application scope that represents interactions
between smart contracts or smart contracts and other entities
(such as Front Running when a user react to a transaction
before it is included in the next block) and (3) blockchain
system scope that exercises the full blockchain entities togheter

23Hyperledger Umbra: https://github.com/hyperledger-labs/umbra, Hyper-
ledger Caliper: https://hyperledger.github.io/caliper/, Hardhat: https://hardhat.
org/, Trufﬂe Suite: https://www.trufﬂesuite.com/, Brownie framework: https://
eth-brownie.readthedocs.io/en/stable/, Ganache: https://www.trufﬂesuite.com/
docs/ganache/overview, Remix: https://remix.ethereum.org/, Tenderly: https://
tenderly.co/transaction-simulator/, Embark: https://framework.embarklabs.io/
docs/contracts conﬁguration.html last access on 09/06/2021.

24Guantlelt, https://gauntlet.network/, last access on 16/06/2021.

(such as Transaction Order Dependence when the order of
transactions can be easily manipulated) .

Table III summarizes the available VV&T solutions for
smart contracts w.r.t target blockchains25, smart contract lan-
guages, testing languages, vulnerabilities and Table II presents
the level of control a developer have while using these different
categories. We can easily see that the security analysis tools
available are numerous compared to other categories. More
precisely, we have 10 public test networks, 20 security analysis
tools, 10 blockchain emulators with smart contract support and
only 1 blockchain simulator with smart contract support.

Besides, it is also easy to see the vast majority of solutions
support Ethereum while support for other blockchains is more
scarse. Bitcoin, despite being the most known blockchain, has
only one VV&T solution, a public test network that supports
smart contracts (i.e. scripts), but there is no tool or emulator
available for it.

A. Target Blockchain

As shown in Table III, most of the VV&T solutions are
dedicated to a very limited number of target blockchains.
It is natural that, all public test networks are dedicated to
speciﬁc target blockchains. Each target blockchain has at least
one dedicated public test network. Most security analysis
tools, however, including Ropsten, Rinkby, Oyente, Mythril
and Smartcheck support only the Ethereum blockchain.
There are only two tools supporting Hyperledger. Concerning
Tendermint/Cosmos-like blockchains, most security analysis
tools are supported, while no tools are available for the other
target blockchains.

Blockchain emulators are similar to public test networks and
thus they are usually dedicated to a single target blockchain
or its derivations. Hardhat, Trufﬂe and Brownie, for instance,
support Ethereum and its variations. But, blockchain emula-
tors also sometimes support other blockchains. Hyperledger
Caliper and Blockbench, for example, support Ethereum and
derivations of Hyperledger.

There is only one simulator solution but it is better at
supporting various target blockchains if they are well designed.
The simulator identiﬁed, Gauntlet, supports several types of
target blockchains, namely Ethereum and Tendermint/Cosmos.

B. Smart Contract and Test Languages

Concerning programming languages, most VV&T solutions
support different ones for writing smart contracts and writing
tests (Table III). The test networks for Ethereum support So-
lidity for smart contracts while tests are written in Javascript.
Hyperledger Fabric and Tendermint/Cosmos test networks
provide a larger range of languages, such as Solidity, Go,
Node.js, Java, Javascript and Python for both smart contracts
and tests.

When we look at security analysis tools, since most of
them are dedicated to Ethereum, they are mostly supporting
Solidity as a smart contract language. Most of these tools

hhhhhhhhhhh

Vulnerab. & Attacks

Scope

Integer Overﬂow/Underﬂow
Call to the unknown
tx.origin usage
Integer Bugs
Callstack depth exception
Unchecked Send Bug
Mishandled Exceptions
Reentrency
Front Running
Timestamp Dependence
Black listed imports
Transaction Order Depend.
Global State Variables
Gas costly patterns
Read after write
DoS Attack
DAO attack

Smart
Contract
X
x
x
X
x
X
X
x
x
x
x
x
x
X
X
x
x

Application

Blockchain
System

x
x
X
x
X
x
x
X
X
X
x
x
x
x
x
X
X

x
X
x
x
x
x
x
x
x
x
X
X
X
x
x
x
x

TABLE I: Scopes of vulnerabilities and attacks [21, 30]

do not permit testers to implement their tests and provide
predeﬁned commands. Concerning emulators, they are similar
to test networks and they support dedicated languages of the
target blockchains. Concerning simulators, Gauntlet supports
python as programming language.

C. Vulnerabilities

Among all VV&T solutions, only security analysis tools
come with pre-deﬁned vulnerability tests that can be directly
used (Table III). More in detail, all security analysis tools have
pre-deﬁned vulnerabilities and it is also possible to improve
the supported vulnerabilities using plug-ins (e.g., FSolidM and
VeriSolid). Public test networks and simulators, in contrast,
provide manual VV&T by user-deﬁned scenarios. Emulators
provide manual and automated VV&T since they can add
security analysis tools as plug-ins. For example, Remix and
Trufﬂe can add Mythx as a plug-ins and make use of its pre-
deﬁned vulnerabilities.

Regarding the vulnerabilities, the ones that are addressed
the most by security analysis tools are Reentrancy, Timestamp
dependence, Transaction Ordering Dependence and Integer
overﬂow/underﬂow as shown in Table III.

Considering Table I, other vulnerabilities26 exist with re-
spect to different scopes. Security analysis tools mostly focus
on the smart contract code and can not perform VV&T from
the blockchain system scope as they do not have a global view
of it. Considering other approaches, they enable us checking
for different scopes of vulnerabilities.

D. Parameter Control

In Table II, a comparison is made between the four cate-
gories considering the conﬁguration parameters in control. For
that, we ﬁx a set of network, blockchain and smart contract
parameters:

Network-level paramaters:

•

25”Target blockchain” covers all the blockchains based on the principle one

26Smart Contract Weakness Classiﬁcation Registry, https://swcregistry.io/,

(e.g., Ethereum covers Parity, Quorum and so on.).

last access on 01/07/2021

VV&T Solutions

Test
Net.
x
x

x

X

trans.

trans.

Size
Msg
delay
Msg
reliability
Genesis
Block
Tx fees
Block size
Batch time
out
BlockCreation
Mode
Size
x
Dependencies X

x
x
x

x

S.A.
Tools
x
x

Bc.
Emu
Partial
Partial

Bc.
Simu
X
X

x

Partial

Partial

X

x
x
x

x

x
X

Partial
Partial
Partial

Partial

Partial
X

X

X

X
X
X

X

X
X

Network

Blockchain

Smart Contract

TABLE II: Control of parameters

– Size : number of nodes of the network
– Message transmission delay : communication delay

between nodes

– Message transmission reliability : the ability of a
message to be successfully transmitted within its
deadline.

Blockchain-level parameters:

– Tx Fees : transaction fees
– BlockSize : the maximum size of blocks
– BatchTimeOut : Block creation frequency.
– BlockCreationMode : deﬁne the mining mode (e.g.,
mine when needed, always mine, turn off the miner),
the consensus to consider, its difﬁculty,

Smart contract level parameters:

– size : the maximum size of a smart contract
– dependencies : speciﬁes the smart contracts it de-

pends on.

s
r
e
t
e
m
a
r
a
P

•

•

In public

test networks

and blockchain emulators,
blockchain-level parameters (e.g., chain conﬁguration, level of
difﬁculty to mine blocks) are deﬁned in the genesis block. In
blockchain simulators, on the other hand, the parameter are
usually conﬁgured in a conﬁguration ﬁle which is used by the
simulator to initialize the simulation.

IV. DISCUSSION

Despite the advances in smart contracts VV&T solutions
during the last couple of years, our study highlights several
open challenges to be tackled by future work. We identify the
following challenges:

A. Pre-deﬁned vs User-deﬁned vulnerabilities

Most security analysis tools have a useful set of pre-
deﬁned vulnerabilities to analyze smart contracts and thus
save time of developing user-deﬁned scenarios. However, these
tools consider generic properties and do not capture speciﬁc
vulnerabilities such as the Front Running vulnerability which
is one of the major security issues. Thus, these tools are
effective in detecting typical errors but ineffective in detecting
atypical vulnerabilities.

Therefore, manual generation of meaningful scenarios be-
comes a necessity. It enables us inspect deep corner cases that
users are already aware of, given the wide range of vulnerabil-
ities that can occur in smart contracts. Still, developing them
could be very costly in time.

The appropriate way to proceed is a mix between pre-
deﬁned and user-deﬁned solutions, which will speed up the
VV&T process. In that way, we do not waste time in writing
scenarios that security analysis tools can already detect and
only focus on detecting the non-deﬁned ones.

B. Programming Languages

As demonstrated in Table III, most testing solutions sup-
port a domain-speciﬁc language (DSL), Solidity, as a smart
contract language. Others (most recent ones) use common
general-purpose languages such as Java that were not initially
conceived for smart contracts and thus make less expressive
but easier to developers since they are more familiar with them.
Hence, the vulnerabilities and risks associated to a certain
language are not the same with others, due to each language
features and restrictions. With DSLs, very useful libraries that
facilitate the programming of smart contracts are provided.
While with general-purpose languages, there are no features
or restrictions to write safe smart contracts. For example, using
Go language, a non determinism may arise, leading to random
number generation or global variables vulnerabilities. This
does not mean that with general-purpose languages, more vul-
nerabilities will occur but using the available libraries in DSLs
(i.e Solidity provides reusable behaviors and implementations
of various standards such as OpenZeppelin, HQ20, DappSys),
a consequent number of them can be avoided due to speciﬁc
restrictions.

C. Community Participation

A smart contract project can be more successful if a com-
munity of volunteers who are globally distributed participate
to the VV&T process through the Internet, as also identiﬁed by
the open source community [35]. This enables the community
to make more tests and thus helps in detecting a large range
of vulnerabilities. There are two ways to this: (1) the smart
contract can be deployed onto a public test network and thus
made available to the community, or (2) the smart contract
project can be made available to community through a public
repository.

D. Conﬁdentiality

There is a big interest from industries to adapt their existing
services or new services as smart contracts. To this end, they
are actively doing several proof-of-concept studies. During
these studies, the industries usually use conﬁdential informa-
tion (e.g. sensitive data, conﬁdential algorithms, solutions) that
they do not want them to be shared publicly until they ﬁnalize
their smart contract based solution. In such cases, obviously
public test networks are not suitable as a VV&T approach. It
is rather better using the other three approaches (i.e. security
analysis tools, blockchain emulators or blockchain simulators)

Target Blockchain

Smart Contract Language

Test Language

n
i
o
c
t
i

B

m
u
e
r
e
h
t
E

c
i
r
b
a
F

r
e
g
d
e
l
r
e
p
y
H

s
o
m
s
o
C

/
t
n
i
m
r
e
d
n
e
T

s
r
e
h
t
O

t
p
i
r
c
S

)
n
i
o
c
t
i

B
(

y
t
i
d
i
l
o
S

o
G

a
v
a
J

t
p
i
r
c
S
a
v
a
J

s
r
e
h
t
O

y
t
i
d
i
l
o
S

o
G

a
v
a
J

t
p
i
r
c
S
a
v
a
J

n
o
h
t
y
P

s
r
e
h
t
O

y
c
n
e
r
t
n
e
e
R

.

.

Vulnerabilities
Pre-deﬁned
w
n
o
e
ﬂ
p
-
e
r
d
e
d
n
u
/
-
r
e
v
o

n
e
p
e
d

r
e
d
r
o

s
r
e
h
t
O

p
m
a
t
s
e
m
i
T

.
s
n
a
r
T

d
e
n
ﬁ
e
d
-
r
e
s
U

X x
X x
X x
x
x
x
x

x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x X x
x
x
x
x
x
x X
x
x
x X
x X
x
x
x X X X X
X X X X X
X X X X X
6
3
5

3

3

x
x
x
x
x
x
x

x
x X x
x
x
x
x X x
x
x
x
x X x
x
x
x
x
x
x X x
x
x
x
x X x
x
x
x
x X x
x X x
x
x
x
x X X X x X x
x X X X x X x
x X X X x X x
0
6
0

3

7

0

3

x
x
x
x
x
x
x
x
x
x
0

x
x
x
x
x
x
x
x
x
x
0

.
t
n
I

x
x
x
x
x
x
x
x
x
x
0

x X
x X
x X
x X
x X
x X
x X
x X
x X
x X
10
0

x
x
x
x
x X x
x X x
x X x
x
x
x
x X x
x
x X x
1
3
2
1

x X x
x X x
x X x
x
X x
x
x
x
x
x
x
x
x
x
x X x
x
x
x
x
x
3
1

Public Test Networks
Ropsten
Rinkby
G¨orli
Testnet3
Florencenet
Granadanet
Cardano Testnet
Hyperledger Testnet
Gaia
Basecoind
Total
Security Analysis Tools
x
Oyente
x
Mythx
x
Mythril
x
SmartCheck
x
Securify
x
Osiris
x
Sereum
x
Manticore
x
MAIAN
x
Solgraph
x
Reguard
x
Slither
x
Fether
x
FSolidM
x
VeriSolid
x
Zokrates
x
Vandal
x
Chaincode Analyzer
x
Zeus
x
SODA
x
Why3
Total
0
Blockchain Emulators with smart contract support
x
Hyperledger Umbra
x
x X X x X x
Hyperldeger Caliper
x
x
x X x
Hardhat
x
x
x X x
Trufﬂe
x
x
x X x
Brownie
x
x X x
Ganache
x
x
x X X x
Blockbench
x
x
x X x
Remix
x
x
x X x
Tenderly
x
x
x X x
Embark
Total
0
0
3
9
0
Blockchain Simulators with smart contract support
x X x X X x
Gauntlet
0
0
Total
1
1
Total

x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x X x X x
x
x X x
x
x X X X x
x X x X x
x
x X x
0
2
19
0

x X x

x
x
x
x
x
x
x
x
1

x
19

1
22

1
32

1
5

0
6

x

x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x

x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
x
X x
x
X x
x
x
x X x
X X X X x
x
x
X x
x
x X
x
x
x
0
1
1
2
19

x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
X x
x
x X x
x
x
x
x X x
x
x
x
0
2
1

x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
0

x
x

x
x

x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x X X X x X x
x
x X x
10
1
0

x X X X x X x
x X x
x X X x
x X X X X X x
x X X X X X x
x X x
x X X x
x X x
x
x
x
x
x X x
x X x
x
x X x X X X x
x X x
x
x
x
x X x
x
x X x X x X x
x
x X x X x
x
x
x X x
x
x
x
x X X
x
x
x X X
x
x
x
x X x
x
x
x
x X x
x X x
x X x X x
x
x
x
x X x X x X x
x X
x
0
18
8

x
x
x
x
x

x
5

x
5

x

x
x
x
x

x
x X x
X x X X x
x
x
X x
x
x
X x
x
x
X x
X x
x
x
x X X X X
x
X x
x
x
x X x
x
x
x X x
x
x
1
4
2
2
6

x

x X x
x
x

x
x
x
x
x X X X x
x X x
X x
x
x X x X x
X x
x X x
x
x
x
x
x
x
x
x X x
x
x
x
x X X X x
x
x
x
X x
x
x
x
x
x X x
x
x
x
x
x X x
x
x
0
2
1
7
2
2
3

x
0
30

x
0
7

x
0
6

x X
2
0
9
8

x
0
4

x
0
7

x
0
5

x X x
0
1
0
10
2
13

x
0
10

x
x
x
x
x
x
x
x
x
x
0

x
0
5

x
x
x
x
x
x
x
x
x
x
0

x
0
5

x
x
x
x
x
x
x
x
x
x
0

x
0
4

x X
x X
x X
x X
x X
x X
x X
x X
x X
x X
10
0

x X
2
0
22
18

TABLE III: Resume of VV&T solutions wrt the target blockchain, smart contract language programming, test language programming and
type of vulnerabilities detected.

without putting their smart contract in a public environment.
The disadvantage of this is that they cannot beneﬁt from
the community involvement that can speed up vulnerability
exploration.

E. Flexibility of parameters

An important point to mention about these testing solutions
is the network size. Actually, testing solutions have generally
fewer nodes than a main network. For example, the size of
the main Bitcoin blockchain on May 20, 2021 is about 337

Gigabytes27 whereas the size of the Testnet3 blockchain in
2020 is only about 32 Gigabytes. This makes transactions
lighter and faster which simpliﬁes performing attacks as it
does not require large capacity. Also, depending on the control
parameters, we could perform different
tests, whether on
vulnerabilities, latency, performance and so on.

F. Levels of testing

In traditional testing literature, the major levels of testing
are unit-, integration- and system-levels, and some type of
acceptance-level [9]. Basically, unit testing is used to make
sure that the implemented code meets the user speciﬁcations
and works properly. Integration testing, however, is used to
combine different parts and test them jointly (in our case, it
could be different smart contracts, or the smart contract and
the user interactions). Finally, system testing is used to test all
the components to ensure the overall right functioning.

Considering smart contracts, the scopes of potential vulner-
abilities are identiﬁed in Table I. Based on this observation,
we can say that smart contract, decentralized application and
blockchain system level vulnerabilities should be tested using
unit, integration and system level testing respectively.

As shown in Table III, different testing solutions provides
mechanisms for testing smart contracts against different types
of vulnerabilities and attacks. It is up to the developer/tester
to identify the tests to be accomplished and to choose the
appropriate testing solutions.

For instance, as shown in Section III, except for simulators,
all existing solutions are dedicated to a single blockchain
technology and its variations. Consequently, if we want to
explore what-if scenarios for different blockchains in order
to chose a target platform, obviously simulators are the best
option to do so. However, to facilitate such an exploration, the
simulator should provide some built-in capabilities [17, 41]
that can be applied to various types of blockchain systems.
Currently, there is only Gauntlet that can simulate different
types of blockchain systems supporting smart contracts.

V. CONCLUSION AND PROSPECTS

Smart contracts beneﬁt from a widespread interest because
of their huge potential. However, in order to effectively build
smart contracts, they need to be tested in an effective and
systematic manner. In our survey, we analyzed four categories
of smart contract testing approaches: using test network, using
security analysis tools, using blockchain emulators with smart
contracts support and using blockchain simulators with smart
contract support.

Our survey shows that several VV&T solutions exist, ensure
the correctness and non vulnerable patterns in smart contracts.
Nevertheless, they either focus on speciﬁc security aspects, a
speciﬁc blockchain and a programming language or provide
limited conﬁgurations.

27Size of Bitcoin blockchain on May 20,2021, https://www.statista.
access on

com/statistics/647523/worldwide-bitcoin-blockchain-size/,
14/06/2021

last

Besides, solutions that limit the implementation language or
the environment are less general and require the user to adapt
their applications which could be infeasible or very expensive.
In addition, the variety of testing solutions available make it
confusing and difﬁcult as to where to start working with them.
In this way and in order to improve the VV&T process,
setting up an effective method that compose between different
VV&T solutions could be a better and signiﬁcant approach to
secure smart contracts.

REFERENCES

[1] Mouhamad Almakhour, Layth Sliman, A. Samhat, and
A. Mellouk. ”Veriﬁcation of smart contracts: A survey”.
Pervasive Mob. Comput., 2020.

[2] Elli Androulaki, Artem Barger, V. Bortnikov, C. Cachin,
K. Christidis, A. D. Caro, David Enyeart, Christopher
Ferris, Gennady Laventman, Yacov Manevich, S. Mu-
ralidharan, Chet Murthy, Binh Nguyen, Manish Sethi,
Gari Singh, Keith Smith, A. Sorniotti, C. Stathakopoulou,
M. Vukolic, S. Cocco, and Jason Yellick. ”Hyperledger
fabric: a distributed operating system for permissioned
blockchains”. Proc of the 13th EuroSys Conf, 2018.
[3] Monika Di Angelo and G. Salzer. ”A survey of tools
for analyzing Ethereum smart contracts”. 2019 IEEE
International Conference on Decentralized Applications
and Infrastructures (DAPPCON), 2019.

[4] G. Angeris, H.-T. Kao, R. Chiang, C. Noyes, and T. Chi-
tra. ”An Analysis of Uniswap Markets”. ERN: Other
Microeconomics: General Equilibrium & Disequilibrium
Models of Financial Markets, 2019.

[5] Pandurang Kamat Siddhartha Chatterjee Arati Baliga,
the Quorum

”Performance Evaluation of

I Subhod.
Blockchain Platform”. 2018.

[6] O. Balci. ”Validation, veriﬁcation, and testing techniques
the life cycle of a simulation study.” in
throughout
proc. of the 26th conf. on winter simulation, wsc’94,
pages 215–220, san diego, ca, usa. society for computer
simulation international. 1994.

[7] L. Brent, Anton Jurisevic, Michael Kong, Eric Liu,
Franc¸ois Gauthier, Vincent Gramoli, Ralph Holz, and
Bernhard Scholz. ”Vandal: A scalable security analysis
framework for smart contracts”. ArXiv, 2018.

[8] Carlyle J. Grigg I. Brown, R.G. and M. Hearn. ”Corda:

an introduction.”. 2016.

[9] Ilene Burnstein. Practical Software Testing. Springer,

2003.

[10] T. Li X. Luo G. Gu Y. Zhang C. Ting, R. Cao and
Z. Liao. ”SODA: A Generic Online Detection Framework
for Smart Contracts” ,in network and distributed system
security symposium. 2020.

[11] Radu State Christof Ferreira Torres, Julian Sch¨utte.
”Osiris: Hunting for Integer Bugs in Ethereum Smart
Contracts.”, proceedings of the 34th annual computer
security applications conference. 2018.

[12] Tien Tuan Anh Dinh, Ji Wang, Gang Chen, Rui Liu,
B. Ooi, and K. Tan. Blockbench: A framework for

analyzing private blockchains. Proc of the 2017 ACM
Int Conf on Management of Data, 2017.

[13] J. Eberhardt and S. Tai. ”Zokrates: scalable privacy-
preserving off-chain computations.” in ieee international
conference on internet of things and ieee green comput-
ing and communications and ieee cyber, physical and
social computingand ieee smart data. 2018.

[14] Grieco G. Feist, J. and A. Groce. ”Slither: a static
analysis frame- work for smart contracts.” in proceedings
of the 2nd international work- shop on emerging trends
in software engineering for blockchain. 2019.

[15] LM Goodman. Tezos—a self-amending crypto-ledger

[16]

white paper. 2014.
¨O. G¨urcan, M. Agenis-Nevers, Y. Batany, M. Elmtiri,
F. Le Fevre, and S. Tucci-Piergiovanni. ”An Industrial
Prototype of Trusted Energy Performance Contracts Us-
In 2018 IEEE 20th Int
ing Blockchain Technologies”.
Conf on HPC and Comm, IEEE 16th Int Conf on Smart
City, IEEE 4th Int Conf on Data Sci and Syst, 2018.
¨Onder G¨urcan, Oguz Dikenelli, and Carole Bernon. A
generic testing framework for agent-based simulation
models. Journal of Simulation, 7(3):183–201, Aug 2013.
[18] D. Harz and W. Knottenbelt. ”Towards Safer Smart Con-
tracts: A Survey of Languages and Veriﬁcation Methods”.
ArXiv, 2018.

[17]

[19] Y. Huang, Yiyang Bian, Renpu Li, J. Zhao, and Peizhong
Shi. ”Smart Contract Security: A Software Lifecycle
Perspective”. IEEE Access, 2019.

[20] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh
Sharma. ”ZEUS: Analyzing Safety of Smart Contracts”.
In NDSS, 2018.

[21] Ence Zhou Bingfeng Pi Kazuhiro Yamashita, Yoshi-
hide Nomura and Sun Jun. ”Potential Risks of Hyper-
ledger Fabric Smart Contracts”, in ieee int workshop on
blockchain oriented software engineering (iwbose). 2019.
[22] A. Kosba, Andrew K. Miller, E. Shi, Zikai Wen, and
”Hawk: The Blockchain
Charalampos Papamanthou.
Model of Cryptography and Privacy-Preserving Smart
2016 IEEE Symposium on Security and
Contracts”.
Privacy (SP), 2016.

[23] Chao Liu, H. Liu, Zhao Cao, Z. Chen, Bangdao Chen,
and A. W. Roscoe. ”ReGuard: Finding Reentrancy Bugs
in Smart Contracts”. 2018 IEEE/ACM 40th International
Conference on Software Engineering: Companion (ICSE-
Companion), pages 65–68, 2018.

[24] Loi Luu, D. Chu, Hrishi Olickel, P. Saxena, and Aquinas
Hobor. ”Making Smart Contracts Smarter”. Proceedings
of the 2016 ACM SIGSAC Conference on Computer and
Communications Security, 2016.

[25] Lodovica Marchesi, M. Marchesi, and R. Tonelli.
”ABCDE - Agile Block Chain Dapp Engineering”.
ArXiv, 2019.

[26] Monika di Angelo Marco Bareis and Gernot Salzer.
”Functional Differences of Neo and Ethereum as
Smart Contract Platforms.”published in 2nd international
congress on blockchain and applications. 2020.

[27] David Mazi`eres Graydon Hoare Nicolas Barry Eli Gafni†
Jonathan Jove Rafał Malinowsky Marta Lokhava, Giu-
liano Losa and Jed McCaleb. ”Fast and secure global
payments with Stellar.” proceedings of the 27th acm
symposium on operating systems principles. 2019.

[28] A. Mavridou and A. Laszka.

”Designing secure
Ethereum smart contracts: a ﬁnite state machine based
approach.” in ﬁnancial cryptography and data security -
22nd international conference. 2018.

[29] Laszka A. Stachtiari E. Mavridou, A. and A. Dubey.
”Verisolid:
for
Ethereum.” in ﬁnancial cryptography and data security -
23rd international conference. 2019.

correct-by-design

contracts

smart

[30] A. Mense and M. Flatscher. ”Security Vulnerabilities
in Ethereum Smart Contracts”. Proceedings of the 20th
International Conference on Information Integration and
Web-based Applications & Services, 2018.

[31] Ghassan O. Karame Lucas Davi Michael Rodler, Went-
ing Li. ”Sereum: Protecting Existing Smart Contracts
Against Re-Entrancy Attacks”., in proc of 26th annual
network distributed system security symp (ndss). 2018.
[32] Satoshi Nakamoto. ”Bitcoin : A Peer-to-Peer Electronic

Cash System”. 2008.

[33] Zeinab Nehai and Franc¸ois Bobot. ”Deductive Proof
of Ethereum Smart Contracts Using Why3”. ArXiv,
abs/1904.11281, 2019.

[34] Quang-Trung Ta Meihui Zhang Gang Chen Beng
”A
Chin Ooi Pingcheng Ruan, Dumitrel Loghin.
Transactional Perspective on Execute-order-validate
Blockchains.”. 2020.

[35] Munish Saini Rajdeep Kaur, Kuljit Kaur Chahal. ”Un-
derstanding community participation and engagement in
open source software Projects: A systematic mapping
study.”, journal of king saud university - computer and
information sciences,. 2020.

[36] Christian Sillaber and Bernhard Waltl. ”Life Cycle of
Smart Contracts in Blockchain Ecosystems.”. Daten-
schutz und Datensicherheit - DuD, 41:497–500, 2017.

[37] F. Spoto.

”A java framework for smart contracts.”
in ﬁnancial cryptography and data security - fc 2019
international workshops. 2019.

[38] Petar Tsankov, Andrei Marian Dan, Dana Drachsler-
Cohen, Arthur Gervais, Florian Buenzli, and Martin T.
Vechev. ”Securify: Practical Security Analysis of Smart
Contracts”. Proc of the 2018 ACM SIGSAC Conference
on Computer and Communications Security, 2018.
[39] Gavin Wood. Ethereum: A secure decentralised gener-

alised transaction ledger, 2014.

[41]

[40] Z. Yang and H. Lei. ”Fether: an extensible deﬁnitional
interpreter for smart-contract veriﬁcations in coq.” ieee
access 7, 37770–37791. 2019.
¨Onder G¨urcan, O˘guz Dikenelli, and Carole Bernon.
Towards a generic testing framework for agent-based
In 2011 Federated Conference on
simulation models.
Computer Science and Information Systems (FedCSIS),
pages 635–642, Sep. 2011.

