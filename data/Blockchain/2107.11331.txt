1
2
0
2

l
u
J

3
2

]

C
D
.
s
c
[

1
v
1
3
3
1
1
.
7
0
1
2
:
v
i
X
r
a

How to Trust Strangers:
Composition of Byzantine Quorum Systems

Orestis Alpos
University of Bern
orestis.alpos@inf.unibe.ch

Christian Cachin
University of Bern
cachin@inf.unibe.ch

Luca Zanolini
University of Bern
luca.zanolini@inf.unibe.ch

Abstract

Trust is the basis of any distributed, fault-tolerant, or secure system. A trust assumption speciﬁes the
failures that a system, such as a blockchain network, can tolerate and determines the conditions under
which it operates correctly. In systems subject to Byzantine faults, the trust assumption is usually
speciﬁed through sets of processes that may fail together. Trust has traditionally been symmetric, such
that all processes in the system adhere to the same, global assumption about potential faults. Recently,
asymmetric trust models have also been considered, especially in the context of blockchains, where
every participant is free to choose who to trust.

In both cases, it is an open question how to compose trust assumptions. Consider two or more
systems, run by different and possibly disjoint sets of participants, with different assumptions about
faults: how can they work together? This work answers this question for the ﬁrst time and offers
composition rules for symmetric and for asymmetric quorum systems. These rules are static and do
not require interaction or agreement on the new trust assumption among the participants. Moreover,
they ensure that if the original systems allow for running a particular protocol (guaranteeing consis-
tency and availability), then so will the joint system. At the same time, the composed system tolerates
as many faults as possible, subject to the underlying consistency and availability properties.

Reaching consensus with asymmetric trust in the model of personal Byzantine quorum systems
(Losa et al., DISC 2019) was shown to be impossible, if the trust assumptions of the processes diverge
from each other. With asymmetric quorum systems, and by applying our composition rule, we show
how consensus is actually possible, even with the combination of disjoint sets of processes.

1 Introduction

Secure distributed systems rely on trust. A security assumption deﬁnes the failures and attacks that can
be tolerated and names conditions under which the system may operate. Implicitly, this determines the
trust in certain components to be correct. In fault-tolerant replicated systems, trust has traditionally been
expressed globally, through a symmetric assumption on the number or kind of faulty processes, which is
shared by all processes. An example of this is the well-known threshold fault assumption: the system
tolerates up to a ﬁnite and limited number of faulty processes in the system; no guarantees can be given
beyond this about the correct execution of protocols. More generally, a symmetric trust assumption is
deﬁned through a fail-prone system, which is a collection of subsets of processes, such that each of them
contains all the processes that may at most fail together during a protocol execution.

Quorum systems [18] complement the notion of fail-prone systems and are used within distributed

fault-tolerant protocols to express trust assumptions operationally.

In the classical interpretation, a quorum system is a collection of subsets of processes, called quo-
rums, with two properties, formally known as consistency and availability, respectively, that any two
quorums have a non-empty intersection and that in every execution, there exists a quorum made of cor-
rect processes. Byzantine quorum systems (BQS) have been formalized by Malkhi and Reiter [14] and

1

 
 
 
 
 
 
generalize classical quorum systems by tolerating Byzantine failures, i.e., where faulty processes may
behave arbitrarily. They are the focus of this work and allow for building secure, trustworthy systems.
A BQS assumes one global shared Byzantine fail-prone system and, because of that, use the model of
symmetric trust. Consistency for a BQS demands that any two quorums intersect in a set that contains at
least one correct process in every execution.

Motivated by the requirements of more ﬂexible trust models, particularly in the context of blockchain
networks, new approaches to trust have been explored. It is evident that a common trust model cannot be
imposed in an open and decentralized or permissionless environment. Instead, every participant in the
system should be free to choose who to trust and who not to trust. Damg˚ard et al. [7], and Cachin and
Tackmann [4] extend Byzantine quorum systems to permit subjective trust by introducing asymmetric
Byzantine quorum systems. They let every process specify their own fail-prone system and quorum
system. Global system guarantees can be derived from these personal assumptions. Extending traditional
Byzantine quorum systems that use threshold assumptions, several recent recent suggestions [10, 9, 13]
have also introduced more ﬂexible notions of trust.

In this paper, we study the problem of composing trust assumptions, as expressed by symmetric and
by asymmetric Byzantine quorum systems. Starting from two or more running distributed systems, each
one with its own assumption, how can they be combined, so that their participant groups are joined and
operate together? A simple, but not so intriguing solution could be to stop all running protocols and to
redeﬁne the trust structure from scratch, with full knowledge of all assumptions across the participants.
With symmetric trust, a new global assumption that includes all participants would be deﬁned. In the
asymmetric-trust model, every process would specify new personal assumptions on all other participants.
Subsequently, the composite system would have to be restarted. Although this solution can be effective,
it requires that all members of each initial group express assumptions about the trustworthiness of the
processes in the other groups. In realistic scenarios, this might not be possible, since the participants
of one system lack knowledge about the members of other systems, and can therefore not express their
trust about them. Moreover, one needs to ensure that the combined system satisﬁes the liveness and
safety conditions, as expressed by the B3-condition for quorum intersection. Since the assumptions are
personal, it is not guaranteed, and in practice quite challenging, that the composite system will indeed
satisfy the B3-condition.

This work formulates the problem of composing quorum systems and gives methods for assembling
trust assumptions from different, possibly disjoint, systems to a common model. We do so by introducing
composition rules for trust assumptions, in both the symmetric-trust and asymmetric-trust model. Our
methods describe the resulting fail-prone systems and the corresponding quorum systems.

In a different line of work, subjective trust assumptions have also been introduced with the Stellar
blockchain (www.stellar.org) [17, 11, 12], a cryptocurrency ranked in the top-20 by market cap-
italization today. In contrast to the original, well-understood notion of quorum systems, these works
depart from the classical intersection requirement among quorums. Such systems may fork into separate
consensus clusters, each one satisfying agreement and liveness on its own. This implies that consensus
may hold only “locally”, and a unique consensus across disjoint clusters is not possible. More speciﬁ-
cally, Losa et al. prove [12, Lemma 4] that no quorum-based algorithm can guarantee agreement between
two processes whose quorums do not intersect in their model. Our work overcomes this impossibility
and shows that consensus can be reached even with disjoint sets of participants, whose trust assump-
tions do not intersect. Moreover, we use the established notion of quorums, which enables to run many
well-understood protocols, such as consensus, reliable broadcast, emulations of shared memory, and
more [4, 5].

Speciﬁcally, the contributions of this work are as follows:

1. We show how to join together two or more systems in a way where processes in one system do not

need a complete knowledge of the trust assumptions of those in the other.

2. We allow processes in each system to maintain their trust assumptions within their original system.

3. We deﬁne a deterministic rule to extend the trust assumptions of each system by including the new

2

participants.

4. Our composition rules guarantee that consistency and availability will be satisﬁed in the composite

quorum system.

Organization. The remainder of this work is structured as follows. In Section 2 we review related
work. We present our system model and preliminaries on quorum systems with symmetric and asym-
metric assumptions in Section 3. In Section 4 we focus on the symmetric-trust model and show different
composition rules on both fail-prone systems and quorum systems. These rules achieve different proper-
ties, which we explore formally. A composition rule in the asymmetric model is presented in Section 5.
For this proof, we make use of a deterministic method called puriﬁcation, whose purpose is to streamline
and improve the trust assumption of each participant in a system, making the composition between more
systems possible. We then discuss the implications and the limits of this approach and offer ideas on how
to implement our results. Finally, conclusions are drawn in Section 6.

2 Related work

Byzantine quorum systems (BQS) have originally been formalized by Malkhi and Reiter [14] to general-
ize classical quorum systems toward processes prone to Byzantine failures. They model symmetric trust,
where every process in the system adheres to a global, common assumption. Many distributed proto-
cols employ BQS as their foundation; in the area of state-machine replication, for example, they range
from PBFT [6] to Tendermint [3], HotStuff [19], and other blockchain-speciﬁc protocols. Recently, also
generalized BQS have been demonstrated for implementing consensus [1].

Measures of quality for classical (non-Byzantine) quorum system have been studied by Naor and
Wool [18] in terms of the load, capacity, and availability properties. The load (the probability of access
of the busiest process) and availability (probability of some quorum surviving failures) properties have
then been considered by Malkhi et al. [15] in the context of the Byzantine quorum systems. They
construct different types of Byzantine quorum systems with optimal load or availability.

Subsequent literature extends the BQS model, seeking to overcome some limitations and to take them
into practice. To this end, probabilistic quorum systems have been introduced by Malkhi et al. [16] as a
tool for ensuring consistency of replicated data with high probability despite both benign and Byzantine
failure of processes. They deﬁne the ǫ-intersecting quorum systems by relaxing the intersection property
of a quorum system in a way that every two quorums fail to intersect with some small probability ǫ. By
the quality measures, these new quorums show an improvement over the classic and Byzantine ones.

Alvisi et al. [2] introduce dynamic Byzantine quorum systems in the context of quorum-based Byzan-
tine fault-tolerant data services. They present protocols for dynamically changing the threshold of the
system. In this this way, they solve an intrinsic limitation of standard Byzantine quorums, which is their
dependence on a-priori deﬁned resilience thresholds.

Malkhi et al. [13] deﬁne ﬂexible Byzantine quorums that allow processes in the system to have differ-
ent faults models. This work presents a new approach for designing Byzantine fault-tolerant consensus
protocols which guarantees higher resilience by introducing a new alive-but-corrupt fault type, which
denotes processes that attack safety but not liveness.

Recent work has explored frameworks that loosen the global model of trust, allowing processes to
choose in a subjective way who to trust. Damg˚ard et al. [7] deﬁne the basics of asymmetric trust for
secure computation protocols. Under this model, processes are free to make their personal assumptions
regarding other processes, resulting in a broader and richer trust structure, compared to the symmetric
model. They introduce a wider class of correct processes, differentiated according to their trust choices.
Moreover, they show protocols for synchronous broadcast, veriﬁable secret sharing, and other primitives.
Properties of these protocol can be guaranteed only to a speciﬁc subset of correct processes.

Asymmetric Byzantine quorum systems have been introduced by Cachin and Tackmann [4] as a nat-
ural extension of symmetric Byzantine quorum systems [14] to the model with asymmetric trust. They

3

present protocols for asynchronous Byzantine consistent broadcast, reliable broadcast, and emulations of
shared memory with asymmetric quorums. Their work gives rise to a new structure called a guild, which
is a subset of processes that are called wise because they correctly anticipated the actual faults. Some
protocol guarantees can only be ensured for wise processes or only for those in a guild. Asymmetric
Byzantine consensus protocols have been described as well [5].

With the rise of blockchains, protocols using ﬂexible trust structures have been deployed in practice
as well. Ripple (www.ripple.com) and Stellar (www.stellar.org) do not base their resilience
guarantees on a global threshold, but allow participants to express their own beliefs. However, their for-
malization is not a generalization of the BQS model. In this work, we explore compositions of symmetric
and asymmetric BQS that are based on the well-studied notions.

A related form of recursive composition of (Byzantine) quorum systems has been explored and uti-
lized in the literature. The idea is that, given two systems, each occurrence of a process in the ﬁrst is
replaced by a copy of the second system. Malkhi et al. [15] construct and study composite BQS, such
as recursive threshold BQS, using this idea. Hirt and Maurer [8] use this technique to reason about
multiparty computation over access structures. Our approach is orthogonal to these works, in the sense
that it places the two original systems on the same level. In other words, we explore the failures that two
systems can tolerate when they are joined together, as opposed when one is inserted into the other.

3 System model and preliminaries

3.1 System model

Processes. We consider a system P with an arbitrary number of processes pi, also called participants,
that communicate with each other. A protocol for P consists of a collection of programs with instructions
for all processes.

Executions and faults. An execution starts with all processes in a special initial state; subsequently the
processes repeatedly change their state through computation steps. Every execution is fair in the sense
that, informally, processes do not halt prematurely when there are still steps to be taken.

A process that follows its protocol during an execution is called correct. On the other hand, a faulty
process may crash or deviate arbitrarily from its speciﬁcation, e.g., when corrupted by an adversary; such
processes are also called Byzantine. We consider only Byzantine faults here and assume for simplicity
that the faulty processes fail right at the start of an execution.

3.2 Preliminaries

We start by presenting deﬁnitions and main results in the symmetric-trust model. These will be used in
the next section to construct and prove our composition rules.

Deﬁnition 1 (Fail-prone system). Let P be a set of processes. A fail-prone system F is a collection of
subsets of P, none of which is contained in another, such that some F ∈ F with F ⊆ P is called a
fail-prone set and contains all processes that may at most fail together in some execution.

A complementary structure to the fail-prone system is given by a Byzantine quorum system [14],

deﬁned as follows.

Deﬁnition 2 (Byzantine quorum system). Let P be a set of processes and let F ⊆ 2P be a fail-prone
system. A Byzantine quorum system (BQS) for F is a collection of sets of processes Q ⊆ 2P , where
each Q ∈ Q is called a quorum, such that:

Consistency:

∀Q1, Q2 ∈ Q, ∀F ∈ F : Q1 ∩ Q2 6⊆ F.

4

Availability:

∀F ∈ F : ∃ Q ∈ Q : F ∩ Q = ∅.

A link between the above two deﬁnition is given by the following results.

Deﬁnition 3 (Q3-condition). Let F be a fail-prone system. We say that F satisﬁes the Q3-condition,
abbreviated as Q3(F), if it holds

∀F1, F2, F3 ∈ F : P 6⊆ F1 ∪ F2 ∪ F3.

Lemma 4 (Symmetric quorum system existence [14]). Let F be a fail-prone system. A Byzantine
quorum system for F exists if and only if Q3(F). In particular, if Q3(F) holds, then F , the bijective
complement of F, is a Byzantine quorum system called canonical quorum system of F.

Finally, we present the asymmetric-trust model as introduced by Damg˚ard et al. [7] and Cachin and

Tackmann [4].

Deﬁnition 5 (Asymmetric fail-prone system). An asymmetric fail-prone system F = [F1, . . . , Fn]
consists of an array of fail-prone systems, where Fi ⊆ 2P denotes the trust assumption of pi. We assume
pi 6∈ Fi

One often assumes that ∀F ∈ Fi : pi /∈ F for practical reasons, but this is not necessary. For a

system A ⊆ 2P , let A∗ = {A′|A′ ⊆ A, A ∈ A} denote the collection of all subsets of the sets in A.

Deﬁnition 6 (Asymmetric Byzantine quorum system). Let F = [F1, . . . , Fn] be an asymmetric fail-
prone system. An asymmetric Byzantine quorum system (ABQS) for F is an array of collections of sets
Q = [Q1, . . . , Qn], where Qi ⊆ 2P for i ∈ [1, n]. The set Qi ⊆ 2P is called the quorum system of pi
and any set Qi ∈ Qi is called a quorum (set) for pi whenever the following conditions hold:

Consistency: ∀i, j ∈ [1, n]

∀Qi ∈ Qi, ∀Qj ∈ Qj, ∀Fij ∈ Fi

∗ ∩ Fj

∗ : Qi ∩ Qj 6⊆ Fij.

Availability: ∀i ∈ [1, n]

∀Fi ∈ Fi : ∃ Qi ∈ Qi : Fi ∩ Qi = ∅.

The following property generalizes the Q3-condition from Deﬁnition 3 to the asymmetric-trust model.

Deﬁnition 7 (B3-condition [7, 4]). Let F be an asymmetric fail-prone system. We say that F satisﬁes
the B3-condition, abbreviated as B3(F), whenever it holds for all i, j ∈ [1, n] that

∀Fi ∈ Fi, ∀Fj ∈ Fj, ∀Fij ∈ Fi

∗ ∩ Fj

∗ : P 6⊆ Fi ∪ Fj ∪ Fij.

Lemma 8 (Asymmetric quorum system existence [4]). An asymmetric fail-prone system F satisﬁes
B3(F) if and only if there exists an asymmetric quorum system for F.

For a given asymmetric fail-prone system, we call the list of canonical quorum systems of all pro-

cesses an asymmetric canonical quorum system.

Given a protocol execution with asymmetric Byzantine quorum systems, where F is the actual failed

set, the processes are classiﬁed in three different types:

Faulty: A process pi ∈ F is faulty.

Na¨ıve: A correct process pi for which F 6∈ Fi

∗ is called na¨ıve.

Wise: A correct process pi for which F ∈ Fi

∗ is called wise.

5

Recall that all processes are wise under a symmetric trust assumption. Protocols for asymmetric

quorums cannot guarantee the same properties for na¨ıve processes as for wise ones.

A useful notion for ensuring liveness and consistency for protocols is that of a guild. This is a set of

wise processes that contains at least one quorum for each member.

Deﬁnition 9 (Guild). Given a fail-prone system F, an asymmetric quorum system Q for F, and a protocol
execution with faulty processes F , a guild G for F satisﬁes two properties:

Wisdom: G consists of wise processes, i.e.,

∀pi ∈ G : F ∈ Fi

∗.

Closure: G contains a quorum for each of its members, i.e.,

∀pi ∈ G, ∃ Qi ∈ Qi : Qi ⊆ G.

Observe that the union of two guild is again a guild [5]. Every execution with a guild contains a

unique maximal guild.

Lemma 10 ( [5]). Let G be the guild for a given execution and let pi be any correct process. Then, every
quorum for pi contains at least one process from the guild.

4 Composition of symmetric BQS

Given two Byzantine quorum systems Q1 deﬁned on processes P1 with fail-prone system F1, and Q2
deﬁned on processes P2 with fail-prone system F2, we want to provide a composition rule between the
two that allows the resulting BQS Q3 deﬁned on processes P3 = P1 ∪ P2 with fail-prone system F3 to
run a distributed protocol together. The resulting system should satisfy the consistency and availability
properties of a BQS, that is, it should remain consistent and live in any execution where a fail-prone set
in F3 fails.

In this work we explore the composition of two BQS as a means to allow them jointly run a protocol,
without requiring the processes in one BQS to make new trust assumptions about the processes in the
other. This is useful in practice because remodeling trust from scratch would be a manual and uncertain
process. We do not consider the composition as a way to increase their resilience. For example, joining
four singleton BQS will result in a system with four processes, none of which is expected to fail. This
makes sense if one starts from the trust assumptions of singleton BQS; by deﬁnition, the single process
it contains never fails. There could be other ways to compose the BQS, but they would require changing
the assumptions of each individual BQS and it is subject of future work.

According to the previous discussion, we now state properties that we expect any form of composi-
tion for BQS should satisfy. Characterizing the failures the composite BQS can tolerate now becomes the
challenge because multiple deﬁnitions of F3 are plausible. We want to ensure the following properties:

1. Any B ∈ F3 satisﬁes B|P1 ∈ F ∗
2. Any B ∈ F3 satisﬁes B|P2 ∈ F ∗

1 , i.e., the failure of B is tolerated in the ﬁrst system.

2 , i.e., the failure of B is tolerated in the second system.

3. F3 satisﬁes the Q3-condition.

4. For any B ∈ F3, there exists a Q ∈ Q3, a quorum system in the composite system, such that

B ∩ Q = ∅, i.e., there is always a quorum consisting only of correct processes.

In the text above, the notation X |P denotes the restriction of a set X to P.

We need properties 1 and 2 because, as we shall see next, they imply Property 3, and, hence, ensure
consistency for the composite BQS against any fail-prone set in F3. Moreover, they enable a composition

6

by using the existing assumptions, without requiring a redesign of the two systems. One might also desire
that the inverse of properties 1 and 2 be satisﬁed, i.e., that any fail-prone set in F1 and F2 be tolerated
in F3. However, we will later see that this does not always result in a BQS (i.e., in a fail-prone system
that satisﬁes the Q3-condition). Thus, the objective of a composition rule is to satisfy these properties,
thus ensuring safety, while producing a maximal fail-prone system F3 (in the sense that it contains the
largest fail-prone sets that could be created without having to redeﬁne the trust assumptions within the
original systems). Finally, the composition rule should also satisfy Property 4, which ensures liveness in
the composite system.

Lemma 11. Properties 1 and 2 above imply Property 3.

Proof. Let us assume that Q3(F1) and Q3(F2). Towards a contradiction, let FA, FB, FC ∈ F3 such that
FA ∪ FB ∪ FC = P3. Now consider the restriction of FA, FB and FC to P1 (and similarly to P2). We
have that FA|P1 ∪ FB|P1 ∪ FC |P1 = P1. However, from Property 1, the sets FA|P1, FB|P1, and FC |P1
are each (subsets of) fail-prone sets in F1. We thus have found three fail-prone sets that cover P1, a
contradiction to F1 satisfying the Q3-condition.

With this list of goals, we now proceed to speciﬁc constructions. In the following, we present three
composition methods of increasing suitability and give examples to show their weaknesses and strengths.

Construction 12 (Union composition). Let Q1 be a BQS deﬁned on processes P1 with fail-prone system
F1, and Q2 a BQS deﬁned on processes P2 with fail-prone system F2, where P1 ∩ P2 = ∅. The union
composition of Q1 and Q2 is a system deﬁned on processes P3 = P1 ∪ P2 with fail-prone system

We can easily verify that the previous deﬁnition, given that P1 ∩ P2 = ∅, fulﬁlls Properties 1 and 2.

Thus, F3 satisﬁes the Q3-condition and there exists a BQS Q3 with fail-prone system F3.

F3 = F1 ∪ F2.

Lemma 13. Given F3 as in Construction 12, a BQS Q3 is

Q3 = {Qi ∪ Qj | Qi ∈ Q1, Qj ∈ Q2},

with Q1 and Q2 BQS.

′

′

′

i ∪ Q

j, with Qi, Q

Proof. We ﬁrst show that consistency property holds. So, for every Q1, Q2 ∈ Q3 such that Q1 = Qi∪Qj
j ∈ Q2, and for every F ∈ F3, with F ∈ F1 or F ∈ F2,
and Q2 = Q
we have Q1 ∩ Q2 = (Qi ∪ Qj) ∩ (Q
j), because P1 ∩ P2 = ∅.
By assumption, both Q1 and Q2 are BQS. This means that, if F ∈ F1, then Qi ∩ Q
i 6⊆ F , and if F ∈ F2,
then Qj ∩ Q
j 6⊆ F . The property then follows. Finally, the availability property follows from the fact
that P1 and P2 are disjoint and Q1 and Q2 are BQS.

i ∈ Q1 and Qj, Q
i ∪ Q

j), which equals (Qi ∩ Q

i) ∪ (Qj ∩ Q

′

′

′

′

′

′

′

However, the fail-prone system obtained by Construction 12 results in a fail-prone system that tol-
erates only a few failures, namely those tolerated in each of the two original systems, and not any com-
bination of them. Moreover, it would not work if P1 and P2 had any processes in common. The next
notion moves towards a composition that tolerates any combination of failures that would be tolerated in
the original systems.

Construction 14 (Cartesian composition on disjoint sets). Let Q1 be a BQS deﬁned on processes P1
with fail-prone system F1, and Q2 a BQS deﬁned on processes P2 with fail-prone system F2, where
P1 ∩ P2 = ∅. Then the Cartesian composition of Q1 and Q2 is deﬁned on processes P3 = P1 ∪ P2 and
tolerates the failure of any combination of fail-prone sets of the original BQS. Formally,

F3 = {Fi ∪ Fj | Fi ∈ F1, Fj ∈ F2}.

Lemma 15. If Q3(F1) and Q3(F2), then for the fail-prone system F3 according to Construction 14,
Q3(F3).

7

Proof. Any B ∈ F3 satisﬁes B|P1 ∈ F1 and B|P2 ∈ F2, since P1 ∩ P2 = ∅. Hence, the composition in
Deﬁnition 14 satisﬁes the Properties 1 and 2, and, by Lemma 11, also Q3(F3).

The previous lemma implies the existence of a BQS Q3 with fail-prone system F3. Such a Q3 can

be obtained, as earlier, by

Q3 = {Qi ∪ Qj | Qi ∈ Q1, Qj ∈ Q2}.

It is easy to show, in a similar way as in Lemma 13, that this Q3 satisﬁes consistency and availability

properties. Moreover, if Q1 and Q2 are canonical, Q3 will be the canonical BQS for F3.

Example 16. Let us consider the threshold case. Suppose Q1 and Q2 be two BQS, deﬁned on P1 and
P2, where P1 ∩ P2 = ∅, containing 7 and 10 processes, and tolerating the failure of any 2 and 3
processes, respectively. This means that the ﬁrst fail-prone system contains (cid:0)7
2(cid:1) = 21 sets of processes
and the second fail-prone system contains (cid:0)10
3 (cid:1) = 120 sets. Because in this work we join systems
with already existing failure assumptions, we refrain from changing these assumptions for the composite
system. Nevertheless, according to Lemma 15, the Cartesian product of the fail-prone systems leads to
a fail-prone system where the Q3-condition holds, assuming that the starting systems both satisfy the
Q3-condition and are disjoint.

We apply Construction 14 here, observing that the Q3-condition is the generalization of the condition
n > 3f for the threshold case. As a result we obtain an assumption on 17 processes, which tolerates the
failure of 5 processes, where 2 processes are from P1 and 3 from P2. More formally, the failure of a set
F is tolerated in the composite system if and only if |F ∩ P1| ≤ 2 ∧ |F ∩ P2| ≤ 3.

This gives a total of 2520 possible tolerated subsets. Observe that Q3 is not a threshold BQS any
more, and this was intended. A threshold BQS made of 17 processes would tolerate the failure of any 5
processes, which would lead to a total of (cid:0)17

5 (cid:1) = 6188 fail-prone sets.

Example 17. We now show how Construction 14 fails to create a BQS Q3 if P1 and P2 intersect, because
the Q3-condition may not hold in the composite system. Let Q1 deﬁned on P1 = {a, b, c, d, e} with fail-
prone system F1 = {{a}, {b, c}, {d}, {c, e}} and Q2 deﬁned on P2 = {d, e, f, g, h} with fail-prone
system F2 = {{d}, {e}, {f, g}, {h}}.

It is easy to verify that the Q3-condition is satisﬁed in Q1 and Q2. We also see that, accord-
ing to Construction 14, Q3 with processes P3 = P1 ∪ P2 contains, among others, the fail-prone sets
{a, f, g}, {b, c, h}, {c, e, d}, which cover P3. Consequently, Q3 is not a BQS.

Example 17 shows that the Cartesian composition among fail-prone systems does not lead to a fail-
prone system where the Q3-condition holds, if the two systems have common processes. To overcome
this issue, we introduce a third construction.

Deﬁnition 18. Let A = {A1, . . . , Am} and B = {B1, . . . , Bn} be two sets of subsets of P1 and P2,
respectively. We deﬁne A ⊗ B as the set that contains the union of all sets Ai ∈ A∗ and Bj ∈ B∗, under
the restriction that either both Ai and Bj contain exactly the same subset of the processes common to P1
and P2 or they do not have anything in common. Formally,

A ⊗ B = (cid:8)Ai ∪ Bj | Ai ∈ A∗ ∧ Bj ∈ B∗ ∧ (∀C ⊆ P1 ∩ P2 : C ⊆ Ai ⇔ C ⊆ Bj)(cid:9).

Construction 19 (Cartesian composition). Let Q1 be a BQS deﬁned on processes P1 with fail-prone
system F1 and Q2 a BQS deﬁned on processes P2 with fail-prone system F2, where P1 and P2 might
contain common processes. Then the composition of Q1 and Q2 is deﬁned on P3 = P1 ∪ P2 and
tolerates the failure of any combination of any fail-prone set (or subset of it) of the ﬁrst system and any
fail-prone set (or subset) of the second system, such that both contain exactly the same subset of the
common processes. Formally,

F3 = F1 ⊗ F2 = (cid:8)Fi ∪ Fj | Fi ∈ F ∗

1 ∧ Fj ∈ F ∗

2 ∧ (∀C ⊆ P1 ∩ P2 : C ⊆ Fi ⇔ C ⊆ Fj)(cid:9).

8

The rule of Construction 19 states that any fail-prone set in F3 is of the form Fi ∪ Fj, where Fi and
Fj are fail-prone sets (or subsets of fail-prone sets) that either do not have any processes in common or,
if they do, both contain exactly the same subset of P1 ∪ P2. We demand Fi ∈ F ∗
2 , instead
of Fi ∈ F1 and Fj ∈ F2, in order to construct a maximal F3, in the sense that it contains the maximal
fail-prone sets that satisfy Properties 1 and 2.

1 and Fj ∈ F ∗

Lemma 20. If Q3(F1) and Q3(F2), then Q3(F3), with F3 as in Construction 19.

Proof. Any B ∈ F3 either does not contain a set of common processes C among P1 and P2 or it does.
1 and B|P2 ∈ F ∗
In the former case, it is immediate to see that B|P1 ∈ F ∗
2 . In the latter case, B has
1 and Fj ∈ F ∗
been created as the union between Fi ∈ F ∗
2 , both containing the same subset of P1 ∩ P2,
according to Construction 19. It is thus not possible that a new element of P1 appears in B|P1 that was
not already in Fi, and similarly that a new element of P2 appears in B|P2 that was not already in Fj.
This implies that B|P1 ∈ F ∗

2 , and from Lemma 11 we get Q3(F3).

1 and B|P2 ∈ F ∗

Lemma 21. Given F3 as in Construction 19, a BQS Q3 is

Q3 = {Qi ∪ Qj | Qi ∈ Q1, Qj ∈ Q2},

with Q1 and Q2 BQS.

′

′

′

′

′

i ∪ Q

j, with Qi, Q

j), which results in (Qi ∩ Q

Proof. Consistency and availability properties of Q3 can be proved in a similar way as Lemma 13,
assuming Q1 and Q2 to be BQS. In fact, as in Lemma 13, we have that for every Q1, Q2 ∈ Q3, such
j ∈ Q2, we have Q1 ∩ Q2 =
that Q1 = Qi ∪ Qj and Q2 = Q
j). If P1 ∩ P2 = ∅,
i) ∪ (Qj ∩ Q
i ∪ Q
(Qi ∪ Qj) ∩ (Q
it is trivial to prove the result. Otherwise, given F ∈ F3 with F = Fi ∪ Fj, where Fi ∈ F ∗
1 ∧ Fj ∈
F ∗
2 ∧ ∀C ⊆ P1 ∩ P2 : C ⊆ Fi ⇔ C ⊆ Fj, we have two cases. If there are no common processes
between Fi and Fj, then observe that Fi is contained in F ∗
i and it is then a subset of a fail-prone set
F i in Fi. The same happens for Fj. By assumptions, Q1 (respectively, Q2) are BQS. It follow that,
j)) is not a proper subset of F i and consequently of Fi (respectively
(Qi ∩ Q
of Fj). The result follows. The same reasoning can be applied if Fi and Fj contain a common subset
C ⊆ P1 ∩ P2.

i ∈ Q1 and Qj, Q
j) ∪ (Qj ∩ Q

i) (respectively, (Qj ∩ Q

i) ∪ (Qi ∩ Q

′

′

′

′

′

′

′

Example 22. Let us consider again the threshold case, where Q1 is deﬁned on participants P1 =
{a, b, c, d, e, f, g} and Q2 on P2 = {g, h, i, j, k, l, m, n, o, p}. According to Construction 19, any two
processes in P1 together with any three processes in P2 are tolerated to fail, because these failures would
be tolerated in the original systems. However, if g together with any other process in P1 fails, then only
two more failures in P2 are tolerated, because g ∈ P2 has already failed in the ﬁrst system.

Example 23. Let Q1 be deﬁned on processes P1 = {a, b, c, d, e} and with fail-prone system F1 =
{{a}, {b, c}, {d}, {c, e}} and Q2 be deﬁned on processes P2 = {d, e, f, g, h} with fail-prone system
F2 = {{d}, {e}, {f, g}, {h}}. Then, according to Construction 19 processes in P3 = {a, b, c, d, e, f, g, h}
have fail-prone system

F3 = {{a, f, g}, {a, h}, {b, c, f, g}, {b, c, h}, {d}, {c, e}}.

It is easy to verify that Q3(F3).

5 Composition of asymmetric BQS

We now explore the composition of two asymmetric Byzantine quorum systems. Given two ABQS,
Q1 deﬁned on processes P1 with fail-prone system F1, and Q2 deﬁned on processes P2 with fail-prone
system F2, we want to provide a composition rule that allows the processes P3 = P1 ∪ P2 to form an
ABQS Q3 with fail-prone system F3.

9

5.1 Approaches to asymmetric trust

In the context of blockchains, different models of asymmetric trust have been proposed, united by a
shared principle regarding the subjectivity of truth among the participants, but differentiated by funda-
mental properties that determine their limitations and strengths.

In this section, we compare our model of asymmetric trust [4] with the model of personal Byzantine
quorum system (PBQS) introduced by Losa et al. [12]. PBQS extend and improve the formalization used
by Stellar [17, 11] and give a new interpretation of a quorum system for subjective trust.

In a PBQS, each participant has its own notion of a quorum, with the requirement that if Qi ⊆ P
is a quorum for a process pi and pj ∈ Qi, then it exists Qj for pj such that Qj ⊆ Qi. In other words,
a quorum Qi for pi should contain at least one quorum for each pj ∈ Qi. Given this deﬁnition, a
PBQS consists of a set of participants P, a set of faulty processes F ⊆ P, a set of correct processes
W = P \ F , and a function mapping a participant pi to its non-empty set of quorums. In other words,
Losa et al. construct a PBQS starting from an arbitrary set F . This notion of a quorum system differs
also from the well-known formalization [14] because a quorum in a PBQS is a private notion. In the
traditional model, all quorums are public and known to every participant. From this, it follows that a
global intersection property is absent from PBQS.

An asymmetric Byzantine quorum system (ABQS, cf. Section 3.2) is deﬁned from an asymmetric
fail-prone system, which contains the fail-prone systems of every participant, and requires a global inter-
section property for consistency. ABQS extend the traditional notion of Byzantine quorum systems [14].
With an ABQS, the correct processes can be grouped into na¨ıve and wise ones, depending on their trust
assumptions. According to this distinction, one can guarantee most properties of a protocol only to wise
processes.

An useful structure in an ABQS Q is a kernel [4, 5] of each quorum system Qi for pi. This is a set
Ki ⊆ P with the property that for every Q ∈ Qi : K ∩ Q 6= ∅. In other words, a kernel is a set of
processes that intersects every quorum in a quorum system Qi for a process pi; it generalizes sets of size
f +1 in the traditional symmetric threshold model. Losa et al. deﬁne a similar structure called a blocking
set. In particular, given R a set of participants, a process pi is blocked by R when every quorum of pi
intersects R. Moreover, they show that if a process pi is blocked by the set of faulty processes F , then it
is impossible to guarantee liveness for pi. With ABQS, this cannot happen: by the availability property
of an ABQS, for every set of faulty processes, it always exists a quorum Qi ∈ Qi for pi that consists
only of correct processes. It follows that, eventually, a process pi will hear from a quorum of processes
for itself, even if all the malicious processes remain silent.

Finally, an ABQS execution gives rise to a guild, a set of wise processes that contains at least one
quorum for each of its members. The existence of a guild is essential for protocols with ABQS and it also
plays a fundamental role for the composition of ABQS. Guilds cannot be disjoint and the union of two
guilds is again a guild [5]. The analogue of a guild in a PBQS is a consensus cluster, which is a subset
S ⊆ W such that for every two quorums Qi and Qj of some members of S, it holds Qi ∩ Qj ∩ W 6= ∅,
and for every pi ∈ S, it exists a quorum Qi for pi such that Qi ⊆ S. However, despite these similarities to
a guild, two consensus clusters can be disjoint (due to the missing intersection requirement in a PBQS).
This implies that for consensus with PBQS, agreement may hold only locally, and achieving consensus
across disjoint clusters may not be possible.

5.2 The tolerated system of an ABQS

For deﬁning composition with ABQS, we ﬁrst introduce the central notion of the tolerated system of an
ABQS. Recall that symmetric BQS start from a common understanding of the world; the participants
agree on the possible failures, that is, on which participants might crash or collaborate to break security.
In an asymmetric BQS, no such common understanding exists, either because there is not enough knowl-
edge to make such an assumption on the system, or because the participants simply do not agree with
each other. In this model, every participant expresses its own beliefs and expectations, and no global
notion of “correct” belief exists. In every execution, however, there will be a ground truth, manifested

10

by a set of actually faulty participants, and not all members of the system will have correctly anticipated
this ground truth. Again, since there is no global understanding of the world, this is expected to hap-
pen. However, the participants might still be able to make progress (where progress is deﬁned by the
protocol they are running), exactly in those executions when a guild exists. Recent works on consensus
with ABQS have conditioned safety and liveness properties on the existence of such a set. In the context
of Byzantine consensus, Cachin and Zanolini [5] show that a guild is required to solve asynchronous
consensus and that consensus properties are guaranteed in all executions with a guild.

An external party examining an ABQS without any prior knowledge or beliefs about the participants
cannot assess the trust assumptions of any individual participant. However, the third party can evaluate
the ABQS based on its ability to make progress through a guild.

The central concept for composing two ABQS is the tolerated system of an ABQS. Recall that in an
execution where all processes in B ⊂ P actually fail, there may also be na¨ıve processes, wise processes
that form a guild G, and wise processes outside the guild ([5, Example 1]). For a speciﬁc guild G 6= ∅, the
union of all those processes outside G is called a tolerated set because the guild is autonomous without
any of them. Hence, the tolerated set consists of the faulty, the na¨ıve, and the wise processes outside the
guild. The tolerated system contains all the tolerated sets. Formally, we have the following deﬁnition.

Deﬁnition 24 (Tolerated system). The tolerated system T of an ABQS Q deﬁned on processes P is

T = {P \ G, for any possible guild G of Q}.

Intuitively, the tolerated system of an ABQS reﬂects the resilience of the ABQS: even without the
processes in a tolerated set, there still exists a guild. Therefore, the tolerated system characterizes the
executions in which some of the participants in the asymmetric system will be able to operate correctly
and make progress. In that sense, the tolerated system of an ABQS is the counterpart of the fail-prone
system for a BQS.

Notice that the tolerated system is a global notion emerging from the subjective trust choices of the
participating processes; any party that knows the fail-prone and quorum systems of all processes can
calculate it. We show later that the tolerated systems of two ABQS play a crucial role for composing
them; the processes in the ﬁrst system will use the tolerated sets of the second system as their trust
assumptions, and vice versa. Consequently, the processes in the ﬁrst system only need to know the
tolerated system of the second system.

The following lemma shows that the tolerated system of a canonical ABQS naturally corresponds to

a BQS.

Lemma 25. Let Q be an ABQS on processes P with asymmetric fail-prone system F = Q, i.e., such that
Q is a canonical ABQS. Then the tolerated system T of Q is a BQS. In particular, if B3(F), then Q3(T ).

Proof. Towards a contradiction, let us assume that T does not satisfy the Q3-condition. This means that
there exist T1, T2, T3 ∈ T such that T1 ∪ T2 ∪ T3 = P. Also, let G1, G2, G3 be the corresponding guilds,
i.e., G1 = P \ T1, G2 = P \ T2 and G3 = P \ T3. Without loss of generality every guild contains at least a
process, and at least a quorum for this process is fully contained in the guild. By the consistency property
of an ABQS, these quorums must intersect pairwise, hence the guilds also intersect pairwise. This means
that there exist processes pi ∈ G1 ∩ G2 and pj ∈ G2 ∩ G3. Now, because pi is a member of G1, we can
make the following reasoning: pi has a quorum Qi ∈ Qi such that Qi ⊆ G1, the BQS is canonical, so pi
has a fail-prone set Fi = P \ Qi ∈ Fi, thus we get T1 ⊆ Fi, i.e., T1 ∈ Fi. With similar reasoning, we
get T2 ∈ Fi (because pi ∈ G2), T2 ∈ Fj (because pj ∈ G2), and T3 ∈ Fj (because pj ∈ G3). But this is
a contradiction, because pi and pj with fail-prone sets T1, T2, and T3 violate the B3-condition in Q.

As has been known before, by Lemma 4, if T satisﬁes the Q3-condition, then there exists also a

symmetric BQS for the fail-prone system T ; for instance, this may be the canonical BQS T .

Lemma 25 conﬁrms the intuition that the tolerated set of an ABQS is the counterpart of a fail-prone

set in a BQS.

11

5.3 How clients interact with an ABQS

Many practical replication protocols separate clients from replicas; in state-machine replication, clients
submit commands, replicas totally order and execute them, and then send back responses to the clients.
When the expected failures among replicas are modeled as a BQS, that is, with a symmetric trust as-
sumption, the clients wait for responses from a quorum of replicas. However, if the trust assumption
among the replicas is asymmetric, it is unclear which sets of participants are capable to convince a client
to accept a response. The subjective quorums of the replicas only express their personal beliefs, which
the clients may not share.

One way to resolve this could be to let each client express trust in the replicas through its own quorum
system. But if clients do not have sufﬁcient knowledge to make such assumptions, they need a global
property of the quorum system to decide on its responses, and this can be the tolerated system. Note that
every guild formed by replicas corresponds to the complement of a tolerated set. This indicates that (at
least some) replicas did agree on their trustworthiness, and this may convince the client. Indeed, we will
use this idea in the composition procedure for ABQS. Speciﬁcally, the participants of each system may
operate as clients of the other and could send a composition-request message, waiting for responses from
a guild of participants.

5.4 Composition of ABQS

Based on the remarks above, the we claim that any form of composition between two ABQS must satisfy
the following conditions. Regarding notation, we want to compose Q1 with Q2, resulting in Q3, with
respective asymmetric fail-prone systems F1, F2, and F3. For k = 1, 2 and for any pi ∈ Pk, let F (k)
be
the fail-prone system of pi in Fk, and F (3)
the fail-prone system of pi in the resulting F3. Moreover, let
Tk be the tolerated system of Qk.

i

i

1. If pi ∈ P1 and pi ∈ P2, then any Fi ∈ F (3)

P2, i.e., it must satisfy Fi|P1 ∈ F (1)
for P2), then any Fi ∈ F (3)
Fi|P2 can only be one of the tolerated sets in P2, i.e., Fi|P2 ∈ T2
P2. This generalizes Properties 1 and 2 of the symmetric composition.

i must respect the trust assumptions of pi in P1 and in
. If pi is only in P1 (and the same holds
, and
∗, since pi has no assumptions for

i must respect the assumptions of pi in P1, i.e., Fi|P1 ∈ F (1)

and Fi|P2 ∈ F (2)

∗

∗

∗

i

i

i

2. If the B3-condition holds for F1 and for F2, then it also holds for composite system, for F3. This

is a generalization of Property 3 of the symmetric composition.

3. For any pi ∈ P3 and any Fi ∈ F (3)

i

, there exists a quorum Qi ∈ Q(3)

i

, such that Fi ∩ Qi = ∅.

Up to here, these three properties are generalizations of the corresponding properties of the symmet-

ric composition. However, in the asymmetric case, we also want to achieve the following.

4. Preserving wisdom. In all executions, where there exists a guild G1 in ABQS Q1 and a guild G2
in Q2, the processes in G1 ∪ G2 will form a guild in Q3. The intuition is that, given an execution
with B as actual faulty set, if a process correctly foresees B (and thus enjoys the properties of a
guild) in its own system, and if there is a guild in the other system, then this process should also
enjoy the properties of a guild in the composite system.

5. Reducibility to symmetric. If all processes have the same trust assumptions (in which case Q1
and Q2 reduce to symmetric BQS), then the composite system Q3 is a symmetric BQS and satisﬁes
the properties of symmetric composition.

Lemma 26. Property 1 implies Property 5.

12

Proof. This follows immediately by observing that when all processes in Pk have the same fail-prone
system Fk, for k = 1, 2, then the tolerated system Tk is Fk itself. Then, Property 1 implies that F (3)
is
i
∗, which is
the same for every pi ∈ P3, and that every B ∈ F (3)
what Properties 1 and 2 of the symmetric composition require.

∗ and B|P2 ∈ F2

satisﬁes B|P1 ∈ F1

i

Now let us consider two ABQS Q1 and Q2 on processes P1 and P2 with asymmetric fail-prone sys-
tems F1 and F2, respectively. All processes in P1 and P2 wish to jointly run a protocol, without making
any extra assumption about the participants of the other group. Intuitively speaking, each group might
have their own issues, their own agreements and disagreements, their own good and bad executions, but
they still want to work together. As reasoned earlier, each participant in P1 is an external observer for P2.
Hence, the best a participant in P1 can do, assuming they have no knowledge, beliefs, or assumptions for
the participants of the second group, is to use the tolerated system of Q2. The same applies, of course,
for participants in P2. This leads to the composition procedure we describe next.

Construction 27 (Puriﬁcation). Let Q an ABQS on processes P = {p1, . . . , pn}, with asymmetric fail-
prone system F = {F1, . . . , Fn}, such that B3(F), and let T its tolerated system. Assume Q3(T ). As we
have seen, this is always the case for canonical ABQS. We want to purify F so that B3([F1, . . . , Fn, T ]),
i.e., ∀Fi ∈ Fi, ∀Fj ∈ T , ∀Fij ∈ F ∗
i ∩ T ∗ it holds that P 6⊆ Fi ∪ Fj ∪ Fij. To do so, every process
pi evaluates the B3-condition including T in the asymmetric fail-prone system F. If it does not hold,
then for any Fi ∈ Fi that violates the B3-condition, pi removes Fi from Fi, and adds to Fi all those
subsets of Fi that do not violate the B3-condition. This results in a puriﬁed fail-prone system, which, by
construction, satisﬁes the B3-condition.

Intuitively, the puriﬁcation procedure removes fail-prone systems that are “useless,” in the sense that
they do not inﬂuence the existence of a guild, as shown by the next lemma. Seen from a higher level, it
is an expression of the fact that processes have their own beliefs, but also need to adapt to those of the
others; a process pi might expect a set F to fail during an execution and construct its fail-prone system
Fi so as to be protected against F . However, if the beliefs of other processes are such that the failure of
F does not lead to a guild, i.e., F is not tolerated, then pi can not beneﬁt from including F in Fi.

Lemma 28. For every possible execution with a guild G, a process in G of the non-puriﬁed system is also
contained in some guild of the puriﬁed system.

Proof. Observe that the Fi ∈ Fi which pi removes cannot be in T , because otherwise it would be
possible to cover all P with sets in T ; but this is not possible by the assumption Q3(T ). This implies
that the failure of Fi cannot lead to the existence of a guild, and can be removed from Fi. On the other
hand, subsets of Fi can possibly be in T , and pi keeps those subsets in Fi.

Observe that the puriﬁcation procedure is deterministic and uses information that is available to every
process in the system: evaluating the B3-condition, for example, already assumes that every process in
the system knows the asymmetric fail-prone systems of the others and that Byzantine processes do not
lie about their assumptions.

Construction 29 (Composition of ABQS). Let P1 = {p1, . . . , pm+k} and P2 = {pm+1, . . . , pn} be
two sets of processes, with processes pm+1, . . . , pm+k in common. Let Q1 be an ABQS on processes P1
with asymmetric fail-prone system F1 = {F (1)
1 , . . . , F (1)
m+k}, and Q2 an ABQS on processes P2 with
asymmetric fail-prone system F2 = {F (2)
n }, where F1 and F2 are puriﬁed. Moreover, let T1
and T2 be the tolerated systems of the two ABQS, respectively. The composite fail-prone system F3 on
processes P3 = P1 ∪ P2 is

m+1, . . . , F (2)

F3 = [F (1)

1 ⊗ T2, . . . , F (1)

m ⊗ T2, F (1)

m+1 ⊗ F (2)

m+1, . . . , F (1)

m+k ⊗ F (2)

m+k, F (2)

m+k+1 ⊗ T1, . . . , F (2)

n ⊗ T1].

and the composite ABQS Q3 is any asymmetric quorum system for F3.

Lemma 30. The composed fail-prone system F3 resulting from Construction 29 satisﬁes the B3-condition.

13

i

j

∗

∗

∩ F (3)
j

, Fj ∈ F (3)

, and Fij ∈ F (3)

Proof. Towards a contradiction, let us assume that the B3-condition does not hold on F3. This means
there exist processes pi and pj and fail-prone sets Fi ∈ F (3)
such
that P3 = Fi ∪ Fj ∪ Fij. In the following we consider the restriction of Fi, Fj , and Fij to P1, i.e.,
Fi|P1 , Fj|P1, and Fij|P1, respectively. We distinguish two cases for pi and pj. First, consider the case
where pi and pj belong to different sets of processes and let, w.l.o.g., pi ∈ P1 \ P2 and pj ∈ P2 \ P1. By
the deﬁnition of the ⊗ operator, and with an argument similar to what we used in the proof of Lemma 20,
we get that Fi|P1 ∈ F (1)
1 , and that
their union covers P1. This is a contradiction because F1 is puriﬁed. Second, consider the case where at
least one of pi and pj belongs to both P1 and P2, and let, w.l.o.g., pi ∈ P1, pj ∈ P1 ∩P2. (If pi ∈ P1 ∩P2
∗
the same reasoning can be applied by projecting in P2.) For this case, we observe that Fi|P1 ∈ F (1)
,
Fj|P1 ∈ F (1)
F (1)∗

, and that Fij|P1 is a common subset of a fail-prone set in F (1)∗

∗, that Fij|P1 is a common subset of F (1)∗

. This contradicts the assumption that B3(F1).

and a fail-prone set in

, that Fj|P1 ∈ T1

and T ∗

∗

∗

j

i

i

i

i

i

j

Remark 31. Given an ABQS Q1 for an asymmetric fail-prone system F1 on processes P1, and an ABQS
Q2 for F2 on P2, and assuming that the processes of each BQS make no assumptions about processes
in the other, a composition of the two systems is only possible if the corresponding tolerated systems T1
and T2 both satisfy the Q3-condition. This is because the processes of the ﬁrst ABQS (and vice versa) are
only external observers for the second system, and therefore only assess it through its tolerated system.
Processes in P1 want to make sure that whenever the second system is able to make progresses (that is,
for every T ∈ T2 that leads to a guild G), they will also be able to make progress. To achieve this, they
must consider all the T ∈ T2 as a possible actual failed set. However, because the processes of the ﬁrst
system do not assume anything about the second system, the only way to achieve this is to include all
the T ∈ T2 in their fail-prone sets. This leads to an ABQS if and only if the Q3-condition holds in the
second system (and vice versa).

Lemma 30 and Lemma 8 together imply the existence of an ABQS for F3 as deﬁned in Construc-

tion 29. This is the asymmetric canonical quorum system Q3 = F3.

For instance, let us consider two ABQS Q1 and Q2 on processes P1 = {p1, . . . , pm} and P2 =
{pm+1, . . . , pn} with asymmetric fail-prone systems F1 and F2, respectively, such that P1 ∩ P2 = ∅.
Then, the asymmetric canonical quorum system for F3 is

Q3 = [Q1 ∪ T 2, . . . , Qm ∪ T 2, Qm+1 ∪ T 1, . . . , Qn ∪ T 1],

where Qi = F i, Qi ∪ T j = {Qk ∪ Gl | Qk ∈ Qi ∧ Gl ∈ T j} and Gi is a guild for a tolerated set in Tj.
Notice that, by deﬁnition, T contains all the guilds that can be obtained within an ABQS.

As a short proof of why Q3 is the canonical asymmetric quorum system of F3, we observe that, by

assuming P1 ∩ P2 = ∅, the asymmetric fail-prone system F3 in Construction 29 reduces to

F3 = [F1 ∪ T2, . . . , Fm ∪ T2, Fm+1 ∪ T1, . . . , Fn ∪ T1],

where Fi ∪Tj = {Fk ∪Tl | Fk ∈ Fi ∧Tl ∈ Tj}. If we consider the bijective complement of Fi ∪Tj this is
made by all the sets of the form Fk ∪ Tl in P3 = P1 ∪ P2. Then, Fk ∪ Tl = F k ∩ T l = (Qk ∪ P2) ∩ (Gl ∪
P1) where Qk = F k in P1. Finally, (Qk ∪P2)∩(Gl ∪P1) = (Qk ∩Gl)∪(Qk ∩P1)∪(P2 ∩Gl)∪(P2 ∩P1).
Observe that, by assumption on the sets of processes, it follows that (P2 ∩ P1) = ∅ and (Qk ∩ Gl) = ∅.
So, Fk ∪ Tl = (Qk ∩ P1) ∪ (P2 ∩ Gl) = Qk ∪ Gl.

5.5 Composition in practice

We now sketch a protocol that can be used by two (possibly disjoint) sets of processes P1 and P2 that
form two asymmetric Byzantine quorum systems Q1 and Q2 with asymmetric fail-prone systems F1
and F2, respectively. We assume that processes in P1 and P2 are running two different instances of the
same Byzantine consensus protocol (i.e., providing total-order broadcast) and that F1 and F2 are publicly
known.

14

The composition can be initiated by any process pi in P1. To that end, process pi, acting as a client for
Q1, sends a composition-request message to every process in P2. Upon receiving this request, processes
in P2 start a round of Byzantine consensus: if a sufﬁcient number of processes votes for the composition,
it will be agreed. Assume the protocol instance run by Q2 has a history of delivered messages H2 at this
point. Then, upon deciding, processes in P2 send a composition-response message, which includes H2,
back to P1.

The rest of the protocol is symmetric to the ﬁrst part; any process in P1 that receives the same
composition response from a guild of P2 participates in a round of Byzantine consensus, this time within
P1. This results in P1 sending a composition-acknowledgment message to P2, which now includes H1,
the history of delivered messages in the instance run by P1. The histories H1 and H2 can be used by the
composed system to calculate the initial state of the new protocol instance, presumably using a generic
merge function.

The composition-acknowledgment message signals the start a new protocol instance run by P1 ∪ P2.
From this point on, processes use the composed fail-prone and quorum systems. Since F2 is known,
processes in P1 can calculate both the tolerated system T2 of Q2 (in the simplest case by trying all
possible failures of P2) and the puriﬁed version of F2, and vice versa for processes in P2. Should the
fail-prone systems not be public, the processes could send them in the composition messages; however,
privacy aspects are beyond the focus of this work.

6 Conclusions

Our work shows how trust assumptions of (possibly disjoint) systems can composed deterministically,
such that groups of strangers may join each other and collaborate under a composed trust assumption with
appealing properties. We present composition rules that work in both symmetric and asymmetric-trust
models. Moreover, we overcome existing impossibility results for consensus among disjoint personal
Byzantine quorum systems systems from the literature [12]; given two systems that can reach consensus
on their own, our composition method results in a system that achieves consensus. As intermediate
results we deﬁne the tolerated system of an ABQS, which reﬂects the overall resilience of the ABQS, and
present a puriﬁcation procedure, which aligns the expectations of a process with the realistic capabilities
of an ABQS. We expect these contributions to be of independent interest towards a deeper understanding
and practical adoption of subjective decentralized trust.

Acknowledgments

This work has been funded in part by the Swiss National Science Foundation (SNSF) under grant agree-
ment Nr. 200021 188443 (Advanced Consensus Protocols).

References

[1] O. Alpos and C. Cachin, “Consensus beyond thresholds: Generalized byzantine quorums made

live,” in SRDS, pp. 21–30, IEEE, 2020.

[2] L. Alvisi, E. T. Pierce, D. Malkhi, M. K. Reiter, and R. N. Wright, “Dynamic byzantine quorum

systems,” in DSN, pp. 283–292, IEEE Computer Society, 2000.

[3] E. Buchman, J. Kwon, and Z. Milosevic, “The latest gossip on BFT consensus,” CoRR,

vol. abs/1807.04938, 2018.

[4] C. Cachin and B. Tackmann, “Asymmetric distributed trust,” in OPODIS, vol. 153 of LIPIcs,

pp. 7:1–7:16, Schloss Dagstuhl - Leibniz-Zentrum f¨ur Informatik, 2019.

[5] C. Cachin and L. Zanolini, “Asymmetric byzantine consensus,” CoRR, vol. abs/2005.08795, 2020.

15

[6] M. Castro and B. Liskov, “Practical byzantine fault tolerance and proactive recovery,” ACM Trans.

Comput. Syst., vol. 20, no. 4, pp. 398–461, 2002.

[7] I. Damg˚ard, Y. Desmedt, M. Fitzi, and J. B. Nielsen, “Secure protocols with asymmetric trust,” in
ASIACRYPT, vol. 4833 of Lecture Notes in Computer Science, pp. 357–375, Springer, 2007.

[8] M. Hirt and U. M. Maurer, “Player simulation and general adversary structures in perfect multiparty

computation,” J. Cryptol., vol. 13, no. 1, pp. 31–60, 2000.

[9] H. Howard, A. Charapko, and R. Mortier, “Fast ﬂexible paxos: Relaxing quorum intersection for

fast paxos,” in ICDCN, pp. 186–190, ACM, 2021.

[10] S. Liu, P. Viotti, C. Cachin, V. Qu´ema, and M. Vukolic, “XFT: practical fault tolerance beyond

crashes,” in OSDI, pp. 485–500, USENIX Association, 2016.

[11] M. Lokhava, G. Losa, D. Mazi`eres, G. Hoare, N. Barry, E. Gafni, J. Jove, R. Malinowsky, and
J. McCaleb, “Fast and secure global payments with stellar,” in SOSP, pp. 80–96, ACM, 2019.

[12] G. Losa, E. Gafni, and D. Mazi`eres, “Stellar consensus by instantiation,” in DISC, vol. 146 of

LIPIcs, pp. 27:1–27:15, Schloss Dagstuhl - Leibniz-Zentrum f¨ur Informatik, 2019.

[13] D. Malkhi, K. Nayak, and L. Ren, “Flexible byzantine fault tolerance,” in CCS, pp. 1041–1053,

ACM, 2019.

[14] D. Malkhi and M. K. Reiter, “Byzantine quorum systems,” Distributed Comput., vol. 11, no. 4,

pp. 203–213, 1998.

[15] D. Malkhi, M. K. Reiter, and A. Wool, “The load and availability of byzantine quorum systems,”

SIAM J. Comput., vol. 29, no. 6, pp. 1889–1906, 2000.

[16] D. Malkhi, M. K. Reiter, A. Wool, and R. N. Wright, “Probabilistic quorum systems,” Inf. Comput.,

vol. 170, no. 2, pp. 184–206, 2001.

[17] D.

Mazi`eres,
model

“The

Stellar
Internet-level

consensus
consensus.”

protocol:
Stellar,

A
available

feder-
online,

ated
https://www.stellar.org/papers/stellar-consensus-protocol.pdf,
2016.

for

[18] M. Naor and A. Wool, “The load, capacity, and availability of quorum systems,” SIAM J. Comput.,

vol. 27, no. 2, pp. 423–447, 1998.

[19] M. Yin, D. Malkhi, M. K. Reiter, G. Golan-Gueta, and I. Abraham, “Hotstuff: BFT consensus with

linearity and responsiveness,” in PODC, pp. 347–356, ACM, 2019.

16

