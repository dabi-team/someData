Fair Incentivization of Bandwidth Sharing in
Decentralized Storage Networks

Vahid Heidaripour Lakhani, Leander Jehl
University of Stavanger
Stavanger, Norway
{heidaripour.l.vahid, leander.jehl}@uis.no

Rinke Hendriksen
Ethereum Swarm
Neuchˆatel, Switzerland
rinke@ethswarm.org

Vero Estrada-Gali˜nanes
´Ecole Polytechnique F´ed´erale de Lausanne (EPFL)
Lausanne, Switzerland
vero.estrada@epﬂ.ch

2
2
0
2

g
u
A
5
1

]
I

N
.
s
c
[

1
v
7
6
0
7
0
.
8
0
2
2
:
v
i
X
r
a

Abstract—Peer-to-peer (p2p) networks are not independent
of their peers, and the network efﬁciency depends on peers
contributing resources. Because shared resources are not free,
this contribution must be rewarded. Peers across the network
may share computation power, storage capacity, and bandwidth.
This paper looks at how bandwidth incentive encourages peers
to share bandwidth and rewards them for their contribution.
With the advent of blockchain technology, many p2p networks
attempt to reward contributions by crypto-assets. We conduct
simulations to better understand current incentive mechanisms,
assess the fairness of these mechanisms, and to look for ways to
make those incentives more equitable.
The following are the primary contributions of this study: (i) We
investigate and simulate bandwidth incentives within Swarm, a
cutting-edge p2p storage network; (ii) We demonstrate one ap-
proach to make the current bandwidth incentives more equitable;
(iii) We use the Gini coefﬁcient to deﬁne two quantiﬁable fairness
characteristics to evaluate reward sharing in a decentralized p2p
storage network.

Index Terms—Bandwidth Incentives, Token-based Incentives,

P2P storage networks, Swarm, Fairness, cadCAD

I. INTRODUCTION

A more fair approach to create digital content and reward
participants in a community economy is the dream of many
developers and cypherpunks, who seek to reshape traditional
centralized cloud infrastructures with a diverse offer of decen-
tralized systems enabled with blockchain or p2p infrastructure.
These developments invite us to speculate about the changes in
the income distribution as we move from a vertical (cloud) to
a horizontal (p2p) economic model. To illustrate, a dominant
global cloud provider has an annual revenue of $22 billions;
on the contrary, autonomous participants of a p2p economy
that provides the same service can expect an annual revenue
less than $3 (considering the extremely hypothetical case that
every citizen in the world contributes with an equally equipped
node to a decentralized network that overpowers the dominant
cloud provider, fair incentivization would imply the creation
of 7.7 bn small business (p2p nodes) with $2.85 annual
revenue). Such a hypothetical grassroot movement would be
invaluable for developing and innovating decentralized appli-
cations. Alongside the real experimentation of promising ideas
and novel business models for decentralized applications, a
critical systematic scientiﬁc review of the novel protocols and

This work is partially funded by the BBChain and Credence projects under

grants 274451 and 288126 from the Research Council of Norway.

system properties can help the open source, blockchain, and
p2p communities. Woefully, fair incentivization of resource
sharing in a p2p network is under-researched. Many well-
known and heavily researched systems such as Gnutella [1],
BitTorrent [2], and Tor [3] have surged, especially in the ﬁrst
decade of the 21st century, from community efforts. More
recently, particularly in the area we focus on for this study,
developers have started to offer diverse solutions such as IPFS
[4], Storj [5], and Swarm [6] as alternatives to the centralized
cloud storage owned by a few big corporations. These systems
still face the same challenges, such as mitigating free-riding
and coping with the network churn. However, blockchain and
token-based incentives have changed how one can address
these problems. What motivates this study is the need of
sustainable token economies to incentivize participants of the
Web 3.0 ecosystem.

Today’s web (Web 2.0) has generated massive economic
value at the expense of a growing toxic relationship between
users, developers, content creators, and the cloud dominant
providers. Some case examples that
illustrate this toxicity
are the attention economy,
the neglected need for disin-
termediation, siloed data, and people’s resigned acceptance
of data surveillance. Web 3.0 developers aim at building a
decentralized environment with healthier business models and
user-centric, self-sovereign solutions that address the afore-
mentioned problems. The task is far from trivial, thus, well-
established centralized cloud providers are still considered the
less risky option to host applications. A key question for any
serious Web 3.0 developer is: how can a decentralized infras-
tructure composed of untrusted network peers offer reliable
services with high availability and high performance? Given
that the economic value of the growing Web 3.0 ecosystem is
not negligible, we believe fair reward mechanisms are key to
incentivize reliable peers’ resource contributions.

For example BitTorrent, a network of millions of peers,
incentivizes bandwidth contributions with a tit-for-tat mech-
anisms [7]. Such mechanisms ensure that peers receive fair
rewards, with respect to their contribution, and prevent free
riding. However, since rewards are only given as access to the
service, peers are not incentivized to share resources, when
they are not using the system themselves.

More recent networks use more complex and less studied
mechanisms based on crypto-tokens to ﬁnancially incentivize

 
 
 
 
 
 
participation in the network. IPFS and Swarm are two good
examples. Filecoin [8], an incentive layer in IPFS, encourages
peers to contribute and built-in incentives are used by Swarm
to reward contributions with the BZZ token. Crypto-tokens
allow to decouple rewards from a peer’s usage of the system
and can thus incentivize continued contribution. However, also
token based rewards need to disincentivize free riding.

We deﬁne two fairness properties which capture these dif-
ferent aspects of disincentivizing free riding and encouraging
available contribution. We show that the degree to which a
system fulﬁlls these properties can be measured using the Gini
coefﬁcient, a metric to indicate the inequality of income [9].
Since peers are autonomous agents, orchestrating them is
the task of a distributed hash table (DHT) [10]. In that regard,
many decentralized projects chose Kademlia [11] as the coor-
dinator service for its scalability properties. We present a tool
to analyze reward mechanisms in Kademlia based networks.
As one example, we analyze the bandwidth incentives in
Swarm. Especially, we analyze the effect of parameters in
the underlying Kademlia network on the fairness of rewards
in Swarm, showing that current parameter settings may not
provide optimal motivation to contribute.

The remainder of the paper is structured as follows. Section
II explains why this research is being done, deﬁnes our
fairness properties and presents related work. In Section III
we give an introduction to Swarm network and its incentives.
Section IV delves into the simulation program and the results.
Discussion and future work is presented in Section V. The
paper concludes with ﬁnal remarks in Section VI. We use the
terms nodes and peers interchangeably throughout this paper
to refer to the main entities in a p2p network.

II. MOTIVATION

The adoption of blockchain and crypto-assets in p2p net-
works provides incentives in exchange for contributions. In
that sense, rational peers may be interested in sharing their
resources in order to make a proﬁt. This payment beneﬁts
resource owners while also assisting in the development of
more decentralized services. Ecosystems are built to achieve
this goal of resource sharing and reward. These ecosystems
should be proﬁtable enough to entice reasonable peers to con-
tribute (in exchange for rewards), improve network stability,
and decrease churn (by staying active in the network). In
terms of the storage network, an end-user expects to be able
to access the stored ﬁle in a reliable manner. Intuitively, the
requirement is to keep service providers sufﬁciently motivated
through incentivization. Understanding how incentives inﬂu-
ence peer’s network behavior and network properties to design
mechanisms that enable a fair and diverse ecosystem is what
motivates this study.

A. Fairness properties

For p2p networks that use token rewards to incentivize
participation, we deﬁne the following two fairness properties:
F1 Rewards should be fair (proportional) with regard to a

peer’s resource contribution to the network.

F2 Peers willing to provide the same resources should be

able to receive an equal share of the reward.

F1 states that rewards should be fair, with respect to the
resources actually utilized by the system, while F2 states that
rewards should be fair, with regard to the resources peers are
willing to share. As an example, when peers are rewarded
for shared bandwidth, F1 implies that rewards should be
proportional to the actual number of packets transmitted by
a peer; whereas F2 implies that nodes that make the same
bandwidth available to the system, should be able to receive
the same reward.

The property F1 is suitable to prevent free-riding, since
peers sharing fewer resources will receive fewer rewards. F2
on the other hand ensures that peers get an equal opportunity
to receive rewards. We believe that F2 is important to motivate
peers to provide continuous service.

We regard properties F1 and F2 not as binary. While
perfect fairness may be desirable, systems may for example
trade some degree of F1 for simpler bookkeeping and reward
mechanisms, thus requiring fewer resources to reach a certain
level of utility. Similarly, systems may fail to reach F2 in the
presence of low or skewed workload. We propose to measure
F1 and F2 using the Gini coefﬁcient. For a set of values
v1, ..., vn the Gini coefﬁcient can be computed as

(cid:80)n

i=0

(cid:80)n
2 · (cid:80)

j=0 |vi − vj|

i=0 vi

(1)

For F2 we compute the Gini coefﬁcient for the income
different nodes get in our simulation. For F1 we ﬁrst compute
the amount of resources used by each peer. We divide this
amount by the received reward to get the values vi. We then
compute the Gini coefﬁcient, omitting the peers that did not
receive any reward.

The Gini coefﬁcient is given in a scale from 0 to 1, which

in our use case has the following meaning:

1) For F1 a coefﬁcient of 1 means that only one node
is rewarded for its contribution. A coefﬁcient of 0
means that all nodes get the same reward per provided
bandwidth.

2) Similarly, for F2 a coefﬁcient of 1 means that only one
node receives rewards, while a coefﬁcient of 0 means
that all all nodes receive the exact same reward.

B. Related work

Before the emergence of crypto-assets, there was a lot of
work on incentives for p2p networks. Some of the works are
aimed at deterring free-riding [7], [12]–[14] (to list a few).
Interestingly Rahman et al. [15] already proposed to reward
based on the willingness to share resources rather than based
on the amount of actual resources shared, thus focusing on our
fairness property F2 rather than F1. Reference [16] gives an
overview of recent decentralized storage networks including
their incentives. For various consensus types and perspectives,
fair rewarding systems for blockchain-based applications have
been investigated [17], [18], but
they
usually work based on proof of work or proof of stake and

the problem is that

are not easily applicable to storage networks. Reference [19]
proposes TorCoin, an altcoin to reward bandwidth contribution
in Tor network.

III. SWARM STORAGE NETWORK

Swarm is a p2p network of nodes that collectively provide
a decentralized storage and communication service. Its aim is
to serve as the storage backbone and virtual server for a wide
array of decentralized applications and content while main-
taining censorship resistance and privacy for the users of the
network. The network aims to be self-sustaining and resilient
against various attacks through the usage of a crypto-token
(BZZ). BZZ can be purchased by end-users and exchanged for
a service in the network, being storage of data or utilization
of bandwidth while uploading or downloading content [6].

A. Routing in Swarm

Swarm nodes aim to maintain semi-permanent connectivity
with other nodes in the network based on an overlay addressing
scheme. The connectivity pattern guarantees that, when nodes
exchange messages, each edge in the network can be reached
with a certain maximum number of hops (logarithmic in the
network size). Speciﬁcally, the connectivity is based on the
topological distance; by comparing two Swarm addresses and
counting the number of preﬁx bits which the addresses have
in common, we can deﬁne their proximity. The furthest away
nodes are those nodes with a different ﬁrst bit, the more
similar preﬁx-bits the closer the topological distance between
nodes. Based on this distance, a node groups all other nodes
in buckets and connects to a number of nodes in each bucket.
The zero-bucket comprises approximately half of the network
and includes all nodes with a different ﬁrst bit, the ﬁrst bucket
includes about a quarter of the network and includes all nodes
with the same ﬁrst bit and different second bit, up to the
last bucket (called the neighborhood) which is deﬁned by the
proximity at which the node cannot connect to at least four
other nodes.

Figure 3 demonstrates an example of a routing table for a
node with id 91. E.g., in the provided routing table in Figure 3,
if a chunk is stored by node with id 245, then our node will
contact one of the four nodes in bucket zero. If another chunk
is stored by node 64, then bucket 3 is contacted.

All content

in Swarm, ﬁxed size chunks of 4KB are
addressed on the same address space as nodes. This enables
to get a measure of proximity between content and nodes,
similar to the proximity between two nodes. Content is stored
by the closest nodes according to this distance. To download a
chunk, nodes recursively contact the node closest to the chunks
address. The chunk is then forwarded across the same path.
This is also shown in Figure 1. Upload is done in a similar
fashion, where nodes forward the chunk and eventually return
a conﬁrmation.

This routing scheme called forwarding Kademlia is different
from the Kademlia scheme [11]. For the lookup procedure
in Kademlia, the node that generated the request repeatedly
contacts other nodes for either the chunk, or addresses closer to

Fig. 1. Forwarding Kademlia, which is used by the Swarm network, does not
reveal the requestor’s identity. In step 0, node A receives a download request
and forwards it to the closest possible node while A does not know if the
previous node is the originator or just a forwarder like herself. In step 1, node
S sends back the data chunk via the same route to the originator but no one
knows which node is the ﬁnal destination.

the chunk. In this way, all involved nodes learn the requester’s
identity. Forwarding Kademlia improves privacy and prevents
censorship, since nodes cannot distinguish the originator of a
request.

B. Incentives in Swarm

Incentives are needed in this network for several reasons:
• To motivate nodes to join the network through the expec-

tation of a monetary proﬁt.

• To ensure that the behavior of each node is in line with

the best interest of the network.

• To make deliberate attacks on the network costly to mount

and persist.

Swarm deﬁnes two classes of incentives: storage incentives
and bandwidth incentives. Storage incentives ensure the al-
location of Swarm’s ﬁnite storage capacity while the band-
width incentives ensure collaboration of nodes in the passing
of upload and download messages. Because sharing storage
without bandwidth results in ﬁles being available online but
not retrievable, this study focuses on bandwidth incentives.
Sharing bandwidth without storing data allows for the retrieval
of popular ﬁles at least, which is possible in a network like
BitTorrent. Since this paper’s focus is on bandwidth incentives,
these are detailed further below.

At the heart of Swarm’s bandwidth incentive system is a
system called SWAP: the Swarm Accounting Protocol [20]. In
this system, nodes keep track of the relative bandwidth service
provided for and consumed by connected peer, in form of
accounting units. Each request for either upload and download
is priced respective to the distance between the requester and
the destination. Within balance limits, this system enables
bandwidth service-for-service exchange. If the balance reaches
a certain limit, nodes stop serving each others request unless
dept is settled by means of payment in BZZ. Additionally,
all balances gravitate continuously to zero via a time-based
amortization of balances. Thus, nodes may give away a limited
amount of bandwidth per time-unit and connection for free.
This feature allows anybody to request content from Swarm
for free–albeit at a slow rate, and to thus encourage adoption.
The bandwidth incentive mechanism is also shown in Figure 2.
When a Swarm node downloads a ﬁle, it has to contact the
one node in its routing table for each of the ﬁle’s chunks that
it does not possess. These nodes contacted by the requester are

chunkrequestrequestAB...S...01downloaddownloadrequestdownloadrequestdownloadchunkchunkAB...S...datadatachunkdatadataB. Simulation settings

The simulation environment in this study is designed to
model all relevant aspects of the Swarm network. A 1000-
node p2p network is built, by creating a routing table for every
node, based on the forwarding Kademlia overlay network.
1000 nodes generate a reasonably big address space, while
simulations are possible on a single machine. This number of
nodes was recently used in a Swarm related work [21]. The
routing tables remain static for the entirety of the experiments,
and random numbers are generated using the same seed to
ensure consistency throughout all experiments. For the sake
of simplicity, we assume that only the node closest to a data
chunks address is storing that chunk. The routing tables are
divided into 16 buckets by the address space, which ranges
from 0 to 216. The 16 address bits are used to form buckets.
The i-th bucket of a node contains addresses that have a
common preﬁx of length i with the node’s address. Each
bucket contains at most k addresses. For each given peer, that
half of the network’s nodes are candidates for bucket 0, but
only k nodes are chosen. In the Swarm network, the default
value for k is 4, which means that each node can hold the
address of four other peers in each bucket. On the contrary,
the Kademlia’s paper [11] proposed the value 20 for k. In our
simulation, we compare both settings for k.

To simulate each download request, a random originator
generates random chunk requests (all randomness is generated
from the uniform distribution.). In Swarm, to download a ﬁle,
a peer must download all of the ﬁles data chunks spread
throughout the network. To simulate this, a single originator
requests a random number of chunks, between 100 an 1000.
We call one such step the download of a ﬁle. The addresses
of chunks are chosen uniformly at random from the complete
address space, 0 to 216.

We performed simulations downloading between 100 and
10k ﬁles. We perform different simulations where we pick
originators uniformly from either 20% or 100% of the nodes,
to evaluate the effect of skewed workloads.

To see if there was a difference in the number of accounting
units received by a peer during the download process, each
simulation is conducted with k = 20 and k = 4. We assume, as

Fig. 3. Routing table and buckets for 8 bits of address and k=4.

Fig. 2. p2p accounting protocol. This diagram shows how peers maintain
track of their bandwidth contributions. Starting with a zero balance on both
sides at step 0, a period of message exchange follows, leading through step
1, to step n, until the debt on one side hits a threshold. The obligation can be
paid off over time, or the creditor can be compensated.

said to lie in zero-proximity. The zero-proximity node is the
ﬁrst hop node located in the bucket closest to the destination.
Typically, during a ﬁle download, nodes in zero-proximity
receive signiﬁcantly more requests. Also, nodes in the zero-
bucket are only contacted when downloading a ﬁle, not when
forwarding requests. Therefore, the default behaviour imple-
mented in the current Swarm node is to use paid settlement
for the requests generated by the originator itself to nodes in
the zero-proximity, but to wait for time-based amortization for
other requests.

IV. EVALUATION

We built a simulation tool to examine the incentives within
a p2p storage network. Our simulation tool aims to make
it easier to analyze complex incentive layers within the net-
works. The simulation also allows for the measurement of the
given fairness properties. We currently only modelled Swarm’s
bandwidth incentives using our tool, but aim to model other
networks in the future.

A. Simulator architecture

The tool’s core function is to simulate a p2p network with a
speciﬁed overlay topology. We implement routines to generate
an overlay based on Kademlia. Our tool allows to use the same
overlay for multiple simulations. This allows us to collect data
from runs on multiple machines into a single simulation. The
cadCAD simulation engine is used to create the simulation
phases. For each step, we simulate the download of a single
ﬁle, by letting one node request multiple chunks. There are
895 lines of Python code in the current simulation repository.

p2p accounting ABABrequestresponseABABrequestresponseABABABABsend crypto-asset 0123a3b01011011101000101110101010011010110010110010001000011010001100100001101101101010011110100110101101111000010010100100011001000100010011010101010001010000010101110101011001011111010111000101110101011110010110000101100101011010Bucket 0Bucket 1Bucket 2Bucket 3Bucket 4Bucket 5Bucket 6Bucket 7is the default policy in Swarm, that only nodes within the zero-
proximity of a download originator are paid. The amount of
accounting units paid is calculated by using the XOR metric
to ﬁnd the distance to the closest node to the storer.

C. Simulation results

We only include results for runs with 10k ﬁles downloaded.

The other experiments show similar results.

Figure 5 shows the Lorenz curves for the distribution of
rewarded accounting units and corresponding Gini coefﬁcient,
measuring F2 fairness. Results show that for a bucket size
k of 20, the wealth distribution is more equitable for both
scenarios (20% and 100% requests originators). For down-
loading a ﬁle, an originator node downloads many chunks.
For downloading a chunk, only nodes located in downloader’s
routing table get paid. With larger k the routing table is bigger
and payment spreads among more nodes, while having only 4
options, allows some nodes to accumulate a larger part of the
accounting units. For k = 4, rewards are also distributed even
more unevenly for 20% request originators.

Table I shows the average chunks that were transmitted.
When k = 20, the average sent chunks are lower for the same
download amount, implying that less bandwidth is consumed.
Also, when all nodes in the network operate as originators,
the average sent data chunks are smaller, which is acceptable
because more uniformly distributed originators result in fewer
hops to the destination.

Figure 4 depicts the distribution of forwarded chunks in
the 10k download experiment. Only 20% of peers behave as
originators and produce download requests on the left, with
100% of peers acting as originators on the right. Frequency
on the y axis shows how many chunks are forwarded by
individual node, e.g., with k = 20, more than 400 out of 1000
nodes forward approximately 10000 chunks. On the left ﬁgure,
the area under k = 4 is 1.6x bigger than the area for k = 20,
and 1.25x on the right hand side, indicating that k = 20
uses less bandwidth on both cases. The results also show
that with 20% request originators, bandwidth consumption is
distributed more uneven, with many peers using twice the
average bandwidth.

Figure 6 demonstrates the F1 property. For this Figure, we
compute the relation of chunks peers serve, to the chunks
served as zero-proximity, which peers receive payment for.
The Figure shows Lorenz curves and Gini coefﬁcient for
these numbers. We only consider nodes that actually receive
payment. With k = 20 and 100% of originators, the result
reveals a very close number to entire equity. On the other
hand, with k = 4 and 20% request originators, nodes receive
very uneven rewards for the provided bandwidth.

V. DISCUSSION AND FUTURE WORK

In a p2p network like Swarm, changing the k value in the

overlay network has three basic outcomes:

• Increasing k means that each peer has more open connec-
tions, which translates to a higher cost for keeping those
connections updated.

TABLE I
AVERAGE FORWARDED CHUNKS FOR THE EXPERIMENT WITH 10K
DOWNLOADS

20% originators

100% originators

Average forwarded chunks
k=4
Average forwarded chunks
k=20

17253

11356

16048

10904

• A peer will have more recipients in the payment channel
and issue more payment transactions, resulting each re-
cipient receiving a smaller amount, while the transaction
cost for receiving the reward might be more than the
reward amount.

• With more nodes in each bucket, a peer maintains track of
p2p time-based amortization channels with more peers.
With the simulation, we demonstrated that with k = 20, the
Gini coefﬁcient approaches a smaller value, but we did not
identify the produced overhead in terms of extra bandwidth
consumption. There should be a trade-off between the quantity
of overhead generated and the amount of money received. In
a ﬁrst thread of future research, we extend our simulation tool
in a way that measures the overhead generated. Also, it is
interesting to see what happens in payment distribution if we
only increase the k for a particular bucket, e.g., bucket zero.
Moreover, adding content popularity and caching policies can
also have an impact on time-based amortization due to the
reduced number of forwarded requests.

For the duration of the experiment, it is assumed that all
peers will adhere to the protocol and that no one will attempt
to deviate. For example, in this work we assume that nodes
are not free-riders, nodes always pay to the zero-proximity
node. In a second thread of future work, we will consider what
happens when some peers misbehave. An interesting question
arises here: What happens to F1 and F2 properties?

While creators of these networks claim that the storage in-
centive makes up the majority of the proﬁt for peers contribut-
ing to the network, having not just the bandwidth incentives
simulated but also the storage incentives appears needed to
complete the simulation and gain a better understanding of a
p2p storage network.

VI. CONCLUSION

In this paper, using our simulation program, we investigated
the bandwidth incentives in the growing decentralized p2p
Swarm storage network. We propose two fairness properties
and measure them in our simulations. Simulation results show
that using a larger bucket size k for the overlay network results
in a more fair rewarding system, especially if the system is
operating under a skew workload. We observed a 7% decrease
in the Gini coefﬁcient for F2 and a 6% reduction in the Gini
coefﬁcient for F1.

ACKNOWLEDGMENT

The authors wish to thank the anonymous reviewers for their

constructive feedback.

Fig. 4. Distribution for the forwarded chunks for 10000 ﬁle downloads. Left with 20% originator, on the right, with 100% originators.

[6] V. Tr´on, “The Book of Swarm - v1.0 pre-release 7 November 17, 2020,”
https://www.ethswarm.org/The-Book-of-Swarm.pdf, accessed: 2022-01-
27.

[7] B. Cohen, “Incentives build robustness in bittorrent,” in Workshop on
Economics of Peer-to-Peer systems, vol. 6. Berkeley, CA, USA, 2003,
pp. 68–72.
Labs,

decentralized

“Filecoin:

network,”

storage

[8] P.

A

https://ﬁlecoin.io/ﬁlecoin.pdf, accessed: 2022-03-01.

[9] “Gini

coefﬁcient,”

accessed:

2022-03-08.

[Online]. Available:

https://en.wikipedia.org/wiki/Gini coefﬁcient

[10] E. K. Lua, J. Crowcroft, M. Pias, R. Sharma, and S. Lim, “A survey
and comparison of peer-to-peer overlay network schemes,” IEEE Com-
munications Surveys & Tutorials, vol. 7, no. 2, pp. 72–93, 2005.
[11] P. Maymounkov and D. Mazi`eres, “Kademlia: A peer-to-peer infor-
mation system based on the xor metric,” in Peer-to-Peer Systems,
P. Druschel, F. Kaashoek, and A. Rowstron, Eds. Berlin, Heidelberg:
Springer Berlin Heidelberg, 2002, pp. 53–65.

[12] S. Jun and M. Ahamad, “Incentives in bittorrent induce free riding,” in
Proceedings of the 2005 ACM SIGCOMM workshop on Economics of
peer-to-peer systems, 2005, pp. 116–121.

[13] A. R. Bharambe, C. Herley, and V. N. Padmanabhan, “Analyzing and
improving a bittorrent networks performance mechanisms,” in Proceed-
ings IEEE INFOCOM 2006. 25TH IEEE International Conference on
Computer Communications.

IEEE, 2006, pp. 1–12.

[14] M. Feldman and J. Chuang, “Overcoming free-riding behavior in peer-
to-peer systems,” ACM sigecom exchanges, vol. 5, no. 4, pp. 41–50,
2005.

[15] R. Rahman, M. Meulpolder, D. Hales, J. Pouwelse, D. Epema, and
H. Sips, “Improving efﬁciency and fairness in p2p systems with effort-
based incentives,” in 2010 IEEE International Conference on Commu-
nications, 2010, pp. 1–5.

[16] E. Daniel and F. Tschorsch, “IPFS and Friends: A Qualitative Compari-
son of Next Generation Peer-to-Peer Data Networks,” 2021, unpublished.
[17] G. Fanti, L. Kogan, S. Oh, K. Ruan, P. Viswanath, and G. Wang, “Com-
pounding of wealth in proof-of-stake cryptocurrencies,” in Financial
Cryptography and Data Security, I. Goldberg and T. Moore, Eds. Cham:
Springer International Publishing, 2019, pp. 42–61.
“Fruitchains: A fair

in
Proceedings of
the ACM Symposium on Principles of Distributed
Computing, ser. PODC ’17. New York, NY, USA: Association
for Computing Machinery, 2017, p. 315–324. [Online]. Available:
https://doi.org/10.1145/3087801.3087809

[18] R. Pass

and E. Shi,

blockchain,”

[19] M. Ghosh, M. Richardson, B. Ford, and R. Jansen, “A torpath to
torcoin: Proof-of-bandwidth altcoins for compensating relays,” NAVAL
RESEARCH LAB WASHINGTON DC, Tech. Rep., 2014.

[20] V. Tr´on, A. Fischer, D. Nagy, Z. Felf¨oldi, and N. Johnson, “Swap, swear

and swindle: incentive system for swarm, may 2016.”

[21] R. Nygaard, V. Estrada-Gali˜nanes, and H. Meling, “Snarl: Entangled
merkle trees for improved ﬁle availability and storage utilization,”
the 22nd International Middleware Conference,
in Proceedings of
New York, NY, USA: Association for
ser. Middleware
Computing Machinery, 2021, p. 236–247.
[Online]. Available:
https://doi.org/10.1145/3464298.3493397

’21.

Fig. 5. F2 property using Lorenz curve and the Gini coefﬁcient for 10000
ﬁle downloads.

Fig. 6. Lorenz curve and Gini coefﬁcient for correlation of total forwarded
chunks and forwarded chunks as the ﬁrst hop.

REFERENCES

[1] F. Bordignon and G. Tolosa, “Gnutella: Distributed system for informa-

tion storage and searching model description,” 08 2001.

[2] “Bittorrent,” https://www.bittorrent.com/. Last accessed: January 24,

2022. [Online]. Available: https://www.bittorrent.com/

[3] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The Second-
Generation onion router,” in 13th USENIX Security Symposium
(USENIX Security 04).
San Diego, CA: USENIX Association,
Aug. 2004. [Online]. Available: https://www.usenix.org/conference/13th-
usenix-security-symposium/tor-second-generation-onion-router

[4] J. Benet, “IPFS-Content Addressed, Versioned, P2P File System,” arXiv

preprint arXiv:1407.3561, 2014.

[5] I. Storj Labs, “Storj: A Decentralized Cloud Storage Network Frame-

work,” https://www.storj.io/storjv3.pdf, accessed: 2022-03-09.

