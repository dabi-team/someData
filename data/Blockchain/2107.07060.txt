Blockchain-based Trust Information Storage in
Crowdsourced IoT Services

Mohammed Bahutair
University of Sydney
Sydney, Australia
mbah6158@uni.sydney.edu.au

Athman Bouguettaya
University of Sydney
Sydney, Australia
athman.bouguettaya@sydney.edu.au

1
2
0
2

l
u
J

5
1

]

R
C
.
s
c
[

1
v
0
6
0
7
0
.
7
0
1
2
:
v
i
X
r
a

Abstract—We propose a novel distributed integrity-preserving
framework for storing trust information in crowdsourced IoT en-
vironments. The integrity and availability of the trust information
is paramount to ensure accurate trust assessment. Our proposed
framework leverages the blockchain to build a distributed storage
medium for trust-related information that ensures its integrity.
We propose a geo-scoping approach, which ensures that trust-
related information is only available where needed, thus, enabling
fast access and storage space preservation. We conduct several
experiments using real datasets to highlight the effectiveness of
our framework.

Index Terms—Trust Information, Trust, Crowdsourcing, Inter-

net of Things, IoT Services, Blockchain.

I. INTRODUCTION

The proliferation of Internet-based platforms and mobile
applications has given rise to the concept of the shared
economy. It has introduced a fundamental shift on the way
their social and economic activities [1].
people go about
Traditionally,
there is a clear distinction between service
providers and consumers. Conversely in a shared economy,
any thing can be a provider, consumer, or both at the same
time. A fundamental prerequisite for a successful deployment
of the shared economy is the establishment of trust between
its entities.

The emergence of Internet of Things (IoT) has opened
opportunities for a digital shared economy. In essence, the
Internet of Things (or IoT) is an ecosystem where things (e.g.,
shoes, cars, and watches) are interconnected to share informa-
tion through the Internet [2]. IoT has paved the way for a mul-
titude of applications such as smart cities and smart homes [2].
Crowdsourcing is a fertile ground for leveraging IoT to provide
and consume services. For example, a smartphone (service
provider) may elect to offer its computing resources (e.g., CPU
and memory) to a nearby smartwatch (service consumer). The
smartwatch (which has limited computational power) may use
the offered service to delegate some of its computationally-
intensive tasks to the smartphone. IoT devices can offer a
variety of service types. Examples of such services include but
not limited to: compute resource [3], energy sharing [4]–[6],
environmental sensing [7], and WiFi hotspot [8] services. IoT
services generally consists of two parts: functional and non-
functional parts [8]. The functional part describes the purpose
of the service, whereas the non-functional part represents the
qualities that surround the delivery of the functionalities.

Crowdsourced IoT services can offer potential beneﬁts in
terms of convenience and resource utilization [3]. However,
several challenges may arise in such environments. One key
challenge is the establishment of trust among IoT service
providers and consumers [9]. For example, assume a WiFi
hotspot crowdsourcing environment where IoT devices shared
their Internet with other IoT devices [8]. On one hand, a
service consumer may require some assurances that their data
is not disclosed. On the other hand, a service provider may
require that their services are not being used for illegal actions.
In other words, mutual trust should be established between
the provider and consumer for a successful service provi-
sioning. Existing approaches (e.g., [9] and [10]), proposed
frameworks and techniques for assessing the trustworthiness
of IoT services prior to service consumption. The frameworks
account for the dynamic nature typically exhibited by IoT
environments. We relied mainly on the inherent characteristics
of IoT services as well as context parameters to perform the
trust assessment. Such parameters include device reputation,
device’s model, device’s operating system, owner’s rating, etc.
We refer to these parameters and any data used for trust
evaluation as trust information. Ensuring the veracity of the
trust information is crucial since inaccurate trust information
may potentially lead to unreliable trust evaluation.

One of the main requirements to ensure the correctness of
trust information is a storage medium where data is guaranteed
to be protected from tampering. In other words, it is paramount
to have a trust information storage framework that manages
the data used for trust assessment and preserves its integrity
against unauthorized alternations. The blockchain [11] is a
prime candidate to serve as the basis for such a framework.
The blockchain is a distributed integrity-preserving storage
platform. The data in the blockchain is organized into blocks.
Blocks are connected into one single chain (hence the name
blockchain). In other words, each block has a reference to
the block before it. The blockchain infrastructure consists of
a network of computers typically referred to as nodes. One
of the main goals in blockchain networks is for its nodes
to reach consensus. Consensus is reached when all nodes in
the network have the same copy of the blockchain. Several
methods (i.e., consensus mechanisms) have been proposed that
guarantee consensus between nodes (e.g., Proof-of-Work [11],
Proof-of-Stake [12], and The Stellar Consensus Protocol [13],

 
 
 
 
 
 
Fig. 1: The general architecture of an IoT service crowdsourcing environment.

[14]). The Proof-of-Work mechanism is widely used, however,
a node has to be computationally capable to participate.
Essentially, a node’s role in such networks is to mine new
blocks. Mining is the process of computing a unique value
(called a hash) for a given block that satisﬁes a certain
condition. Computing the hash is carried out in a brute-force
fashion. The goal is to ensure that miners have spent the time
to acquire the hash. Proof-of-Work (while it can guarantee
data integrity) is not applicable for IoT environments, since
IoT devices generally have low processing power. A more
suitable alternative is the Stellar Consensus Protocol, which
relies on federated Byzantine agreement. Nodes in the protocol
can reach consensus by exchanging messages as opposed to
performing computationally extensive tasks, which makes it a
prime candidate for IoT environments.

impractical due to a large number of devices. However, a
distributed storage framework poses data-access-related chal-
lenges. For example, assume a trust management framework
requests certain data from the storage framework. The storage
framework would need ﬁrst to locate where the data is stored.
One way to mitigate such a challenge is by duplicating the
entire trust information collection at each data storage location.
However, this may result in a waste of storage space since not
all information is used equally at every location. Therefore, the
trust information should be distributed based on their usage.
Finally, the availability requirement entails that the distribution
of the trust information should satisfy any potential request.
The contribution of the paper focuses on a trust information
storage framework that satisﬁes the requirements stated earlier.
Speciﬁcally, we propose:

We identify three main requirements for such a trust infor-
mation storage framework: integrity, accessibility, and avail-
ability. Integrity indicates that the trust information remains
intact with no unauthorized alterations. For example, a trust
management framework (e.g., [10]), may request a device’s
reputation to assess a given service’s trust. The storage frame-
work, which the trust framework is requesting the information
from, should guarantee that the provided information is correct
and has not been tampered with. Failing to achieve this
requirement would result in an inaccurate (and potentially
unreliable) trust assessment. Accessibility indicates that the
storage framework should provide a way to address the stored
trust information. The complexity of how trust information
is accessed depends mainly on the storage framework’s type
in terms of deployment. A storage framework can either be
central or distributed. The distributed option is more suited
for IoT environments since a central deployment may be

• A novel blockchain-based framework that ﬁts the dy-
namic nature of IoT environments. The framework aims
at preserving the integrity of trust information at all times.
The framework leverages the Stellar Consensus Protocol
[13], [14]; a light weight consensus mechanism, which
is suitable for low-power devices such as found in IoT
environments.

• A set of techniques that utilize Smart Contracts [15] to
structure the trust information, thus ensuring the accessi-
bility of the information efﬁciently.

• To implement a set of methods that analyzes the stored
trust information and ensures their availability for poten-
tial requests.

A. Motivation Scenario

We use the following motivation scenario to highlight the
importance of our work. Assume an IoT environment where

MICROCELL EMICROCELL BMICROCELL DMICROCELL AMICROCELL CEDGE SERVERPROVIDERPROVIDERPROVIDERCONSUMERCONSUMERCONSUMERCONSUMERTRUST MANAGEMENT FRAMEWORKTRUST INFORMATION STORAGE FRAMEWORKConsumptionRequestServiceRegistrationFig. 2: Converting a set of microcells into its equivalent graph using movement patterns.

users leverage their IoT devices to offer/consume WiFi hotspot
services [8] among each other. Suppose user A uses their
smartwatch to provide their WiFi hotspot service to nearby IoT
devices (i.e., service provider). Conversely, assume a nearby
user B that searches for a WiFi hotspot service to consume
using their smartwatch (i.e., service consumer). Consumer
B ﬁnds out
that provider A is in their vicinity and can
consume their service. However, consumer B wishes to ensure
that provider A is trustworthy before service consumption.
Therefore, the consumer needs to assess the service provider’s
trust level using a trust management framework (e.g., [10]).
The trust management framework relies on trust information
related to service provider A to evaluate their trust. Such trust
information has to be stored in an integrity-preserving storage
solution, since any unauthorized alternation would eventually
result in inaccurate trust assessment.

Upon trust evaluation, the consumer would decide whether
to use the service based on the trust assessment. A rating
(i.e., consumer-sourced trust information) might be given to
the service by the consumer after service consumption ends.
Ratings and other service properties (i.e., trust information)
are then stored into the trust information storage framework.

III. BLOCKCHAIN-BASED TRUST INFORMATION STORAGE

We propose a blockchain-based framework for storing trust
information. The framework covers three main aspects: (1)
infrastructure, which covers how the proposed framework
interacts with existing microcells, (2) trust information block
structure, which addresses how trust information is stored,
accessed, and structured, and (3) block mining, which covers
the mining aspect of the blockchain taken into consideration
the limitations of IoT environments.

II. PRELIMINARIES

A. Infrastructure

We assume an IoT crowdsourcing framework where IoT
devices provide and consume services to and from other IoT
devices [16] (See Fig. 1). In such a framework, we assume that
IoT devices are spatially grouped into microcells (e.g., in Fig.
1 Microcells A through E). IoT devices that lie in the same
microcell can provide/consume services among each other.
Service provisioning in the framework occurs as follows. An
IoT service provider pS announces that it would start providing
a service S to other devices in the same microcell using
their IoT device d. We use the term service session Ssession
to refer to the period where a service is currently available
for consumption by other consumers. An IoT consumer cS
would look for available service sessions in their microcell.
The consumer would rely on a trust management framework
(e.g., [9], [10]) to assess IoT services’ trustworthiness prior
to service consumption. The trust management framework
leverages trust information to evaluate a service’s trustwor-
thiness. Examples of trust information could be the rating
of the owner, device type, number of current consumers, etc.
Trust information is stored at a distributed trust information
storage framework. The trust management framework requests
the trust information it needs from the storage framework.

The goal of the proposed framework is to store trust
information in a distributed fashion. Trust information includes
all data needed by a trust management framework to evaluate
IoT services. Such data represents previous service sessions
information and service providers. In other words, any piece
of trust information is generated because a service session
has occurred. Recall that a service session starts at a speciﬁc
spatial microcell. Note also that services are provided by IoT
devices typically carried/worn by people. As a result, any
data generated at a speciﬁc microcell, might not be needed
in another geographically distant microcell. Hence, some data
is not required to be available at some microcells since they
are not needed at said microcells. Therefore, we introduce the
concept of trust information scoping, where a particular piece
of trust information is scoped to a single microcell (or a group
of microcells) where the data is needed. In other words, for
each group of microcells that share the same trust information,
a scope is created to hold information relevant to them. This
drastically reduces storage use, since only important data is
preserved.

A trust information scope is created by ﬁrst identifying
microcells that share the same trust information. We refer to

MC1MC2MC3MC4MC5MC7MC8MC9MC621121111111123789546such microcells as scoped microcells. Scoped microcells are
detected by relying on the movements of service providers
between microcells. Recall that trust information is generated
based on service providers (e.g., rating, device model, avail-
ability, etc). Therefore, microcells, where the same providers
offer their services, end up sharing the same trust information.
Hence, such microcells should be grouped together and share
the same trust information scope. The rationale behind relying
on movement patterns is that people tend to have a speciﬁc
routine when it comes to their daily movements. For example,
an employee might have a daily habit where they go to a
coffee shop then their workplace then a restaurant for dinner.
All
these places can potentially be microcells, where IoT
devices locating in them may share services among them. For
example, the employee earlier may be a service provider that
chooses to offer their service at the coffee place and restaurant.
Therefore, the two microcells (coffee place and restaurant) can
be considered as scoped microcells since they may share trust
information regarding the employee (i.e., service provider).

An IoT service provider pS at a microcell communicates
ﬁrst with the microcell edge server whenever they decide
to start a service session Ssession (i.e., a state where they
are ready to serve consumers). The service provider shares
whether it had offered its service previously with the microcell.
In case it had, it also shares the ID of the previous microcell.
This way, microcells have the necessary data to identify the
movements of their service providers.

Our aim at the end is to divide the set of microcells into
a set of scoped microcells. By monitoring the movements of
service providers, a given microcell ends up having a list of
microcells that share the same set of service providers. We
use this information to convert the microcells into a graph as
shown in Fig. 2. The ﬁgure depicts a set of nine microcells
(on the left) and their equivalent graph representation (on the
right). Each path between two microcells represents a service
provider movement. For example, M C5 and M C7 share one
single service provider. Microcells M C1 and M C4 share two
service providers since there are two paths going from M C4
to M C1. We use the set of microcells and paths between them
to generate a new weighted graph. Each vertex in the graph
represents a microcell. Edges on the graph represent the paths
between microcells. For instance, the path between M C5 and
M C7 represents the edge between their respective vertices on
the graph. The weight of the edge is governed by the number
of paths between two given microcells. For example, the edge
between vertices 1 and 4 has a weight of 2 since there are two
paths between their respective microcells.

We use graph theory to detect scoped microcells using the
generated graph. More precisely, we apply community detec-
tion on the microcells graph. Community detection techniques
detect vertices in a graph that have some similarity between
them. Since our graph is generated based on the shared
information between microcells, each detected community
would include vertices (aka microcells) that share similar
trust information (essentially scoped microcells). One crucial
point regarding detecting communities in our environment is

Fig. 3: Terminal microcells example.

that it has to be carried out in a decentralized fashion. Our
environment is assumed to be fully distributed with no central
points to manage it. Hence, microcells should be able to detect
their scope (aka community) without relying on a central
authority. We use the technique proposed in [17] to detect the
communities in our graph. The technique starts by labeling
every vertex in the graph with a random label. Then, every
vertex looks to its neighboring vertices’ labels. The vertex then
labels itself with the one with the highest majority. When two
labels have the highest majority, a random choice is made.
This can reduce the performance of the technique. Therefore,
we rely on an optimized version proposed in [18] that picks
the label based on edge strength rather than making a random
selection.

A blockchain network is created for every group of scoped
microcells. The blockchain holds the information relevant to
the microcells in the scope. The nodes of the network consist
of the edge servers of the microcells as well as the IoT
devices inside the microcells. IoT devices are leveraged for
in Section III-C).
mining new blocks (discussed in detail
Note that, the technique should accommodate for cases where
the structure of the graph changes (e.g., movement pattern
changes). However, in this work, we assume that such changes
rarely occur. Dynamic movement patterns will be investigated
in future work.

The aim of scoping trust information is to ensure that only
required information is stored, thus preserving storage space.
However, on rare occasions, a microcell might require trust
information that only exists in an outer blockchain network (or
scope). To overcome such scenarios, each scoped microcells
promote one of their microcells to be an access point to other
blockchain networks for the scope. We refer to such microcells
as terminal microcells. Terminal microcells are selected based
on the number of edges with outer blockchain networks.
For example, Fig. 3 depicts two terminal microcells for two
groups of scoped microcells. Each group of scoped microcells
promoted a microcell that has a connection to the other group.
For instance, the ﬁrst group selected microcell 5 to be the
terminal microcell since it is the only one that has a connection

Scoped Microcells 2Scoped Microcells 1TerminalMicrocellTerminalMicrocell12378954106to the other group.

B. Smart Contract-based Trust Information Handling

Our

A smart contract [15] is a small program that is stored
in the blockchain. A major advantage of smart contracts is
their immutability. In that respect, once a smart contract is de-
ployed, it cannot be modiﬁed thus preventing any unauthorized
alteration. We leverage smart contracts to store and retrieve
trust information into the blockchain. The smart contract is
deployed at each available blockchain network (i.e., for each
scoped microcells group). The addresses of the smart contracts
are stored in their respective edge servers. When a consumer
in a given microcell decides to consume an IoT service, it
ﬁrst tries to evaluate the service’s trustworthiness. A trust
management framework communicates with the edge server to
obtain the address of the smart contract. Then, necessary trust
information is fetched from the smart contract. By the end of
service consumption, a consumer might wish to add new trust
information based on their experience. The consumer would
request the address of the smart contract from the microcell’s
edge server. Finally, the consumer would submit their trust
information to the smart contract, which will eventually store
it on the blockchain.
proposed

namely
contract,
TrustInformationHandler consists of
three main
parts: (1) an information cache for storing the trust
information, (2) a store action to handle saving the data
into the blockchain, and (3) a retrieve action to get trust
information from the blockchain. The information cache
is a hash map that uses a key to address the information. The
key can be one aspect of an IoT service, e.g., service owner
or IoT device. The actual type of the information is a record,
which in turn consists of two ﬁelds: (1) a timestamp ﬁeld
to store how recent the information is, and (2) a data ﬁeld
that stores the actual data (e.g., the rating of the owner). The
action store is typically invoked by a service consumer
information they might wish to report
to store any trust
regarding their IoT service. The consumer should pass in the
type of trust information (e.g., the service owner rating) as the
key, and the actual data (e.g., the value of their rating). The
action retrieve is generally used by a trust management
is required. The
framework whenever a trust assessment
framework would pass the trust
to
which the smart contract would return the actual information.
The implementation of the smart contract is listed in Smart
Contract 1.

information it needs,

smart

C. Mining

Blockchain stores blocks of data in a distributed fashion
across the nodes in its network. A major challenge in such a
case is ensuring that the data between nodes is in sync and
preserving the integrity of the data. Consensus in blockchain
refers to a state where all nodes in a blockchain network agree
on the data they hold. Data integrity on the blockchain is
achieved by ensuring that nodes are in the consensus state.
In such a state, if a malicious node tries to manipulate the

Smart Contract 1 Trust Information Handler

1: contract TrustInformationHandler
record TrustInformation
2:
3:
4:
5:

timestamp
data
end record

6:
7:
8:
9:
10:
11:

12:
13:
14:
15:
16:
17:

information ← {}

action store(key, data)

record ← TrustInformation(

timestamp ← now
data ← data

)
information[key] ← record

end action

action retrieve(key)

value ← information[key]
return value

18:
19:
20:
21: end contract

end action

data, the network would be able to detect and prevent it. A
consensus mechanism is a protocol that nodes in the network
follow to reach the consensus state. The Proof-of-Work con-
sensus mechanism [11] is by far the most widely used. It
works by asking nodes to compete in solving a mathematical
puzzle whenever a new block is to be generated. Essentially,
every node would have to solve the puzzle whenever it wishes
to write data on the blockchain Such puzzles have to be
solved in a short period of time. The node that succeeds in
solving the puzzle ﬁrst gets to add its data to the network.
Therefore, having a computationally capable node is necessary
for generating blocks.

We propose to leverage the large number of devices to
create new blocks. Such blocks would eventually hold the trust
information. While Proof-of-Work guarantees data integrity,
it
is not suitable for IoT environments. IoT devices have
typically low processing power. Conversely, Proof-of-Work is
a computationally-intensive mechanism. One way to adapt the
Proof-of-Work to the less-capable IoT devices is to reduce
the difﬁculty of the mechanism. More speciﬁcally, we reduce
the complexity of the mathematical puzzles so that devices
with lesser processing power would be able to solve them
within the required time period. In such a way, the required
processing power by the mechanism would match with that of
IoT devices. However, lessening the difﬁculty of a blockchain
network has a critical disadvantage. The fact that IoT devices
would generally contribute to the network does not limit the
access to the network from other more capable devices. In
other words, a highly capable malicious node can join the
network and easily solve the relatively easy puzzle faster than
any IoT device.

The Stellar Consensus Protocol (SCP) [13], [14] is another

consensus mechanism that does not rely on the nodes’ (es-
sentially IoT devices) computational power. The mechanism
relies on Federated Byzantine Agreement (FBA) [14] to achieve
consensus. FBA is a distributed form of the traditional Byzan-
tine Agreement (BA) [19], [20]. BA guarantees data integrity
across a network of nodes given that N = 3f + 1, where
N is the number of nodes and f is the maximum number
of malicious nodes the system can tolerate. For example, a
system with N = 10 nodes of which f = 3 are malicious
would always guarantee data integrity. Typically, a BA system
would have a centralized point that manages the nodes; i.e.,
node additions and removals. Such a system is not suitable
for environments such as the IoT. IoT devices can come and
go, therefore, a centralized point that manages them would be
impractical. The FBA’s purpose is to implement BA systems
without the need for a centralized point to manage nodes.
Essentially, any node can join and leave without disrupting
the network.

FBA introduces the concept of quorum slices. Each node
v in the network may have one or more quorum slices. Each
quorum slice contains a set of nodes S that v trusts. A quorum
is another concept that refers to the set of nodes, where each
node has at least a single quorum slice in the quorum. For
instance, assume the nodes A, B, and C. Suppose that A
trusts B and C, B trusts C, and C trusts A and B. The node
A’s quorum slice is B, C, B’s quorum slice is C, and C’s
quorum slice is A, B. Nodes A, B, and C can together form a
valid quorum since each node has its own slice in the quorum.
However, if we introduce a node D into A’s quorum slice, the
three nodes A, B, and C can no longer form a quorum since
A’s slice is not entirely in the quorum. It is worth noting that
FBA networks (such as the Stellar Network) could potentially
have several quorums. As stated earlier, for a quorum to be
valid, it has to include at least one quorum slice for all of its
nodes. Additionally, a quorum should also intersect with every
other quorum in the network with at least one node. Nodes
in FBA reach consensus by exchanging messages regarding
a piece of data to be written on the blockchain. FBA states
that consensus is reached if at least one quorum agrees on
the data. A quorum agreement involves that all nodes in the
quorum accept the data as valid data.

We opt to utilize the Stellar Consensus Protocol in our IoT
environment. Nodes in the network include IoT devices and
microcells’ edge servers. The dynamic nature of IoT devices
should not affect the efﬁciency of the blockchain since FBA
adapts for frequent removals and additions of IoT devices.
Typically, IoT devices along with edge servers would be used
to conﬁrm that a single piece of data is valid (the mining part).
However, edge server nodes will be responsible to preserve the
blockchain data.

IV. EVALUATION

We conduct a set of experiments to examine the efﬁciency
of our proposed framework. We deﬁne two metrics to assess
the quality of the information scoping. On one hand, the
metrics ensure that information needed by a group of scoped

TABLE I: Gowalla dataset.

Data

Nodes

Edges

Count

196,591

950,327

Check-ins

6,442,890

Locations

1,280,969

TABLE II: Brightkite dataset.

Data

Nodes

Edges

Count

58,228

214,078

Check-ins

4,491,143

Locations

772,966

microcells always exists in the scope. On the other hand,
information that is generally not needed by the microcell group
should be kept outside the scope.

A. Dataset Description

We use two real datasets in our experiments, namely,
Gowalla and Brightkite [21]. Both datasets are location-based
social networks. Essentially, each dataset represents a graph,
where each node in the graph is a user and an edge indicates a
friendship relation between two users. Additionally, the dataset
includes check-in information for every user. In that respect,
each user has a list of locations at which they have checked
in. Details about every the two datasets are listed in Tables I
and II.

We map the two datasets to our problem as follows. Every
location in the dataset is assumed to be a microcell. IoT service
providers are represented by the users in the datasets. Check-in
information is used to infer the movements of service providers
between microcells (i.e., locations). For example, assume user
1 in one dataset checked in to locations, A, B, and C. In such
a case, user 1 (i.e., service provider) is assumed to have moved
between the three locations (i.e., microcells) and provided their
services at them.

B. Metrics

We deﬁne two metrics to assess the proposed framework:
storage efﬁciency and access misses. The storage efﬁciency
SE metric examines how efﬁcient the scoped microcells at
leveraging their storage space. More precisely, it is the ratio
of used trust information to the unused trust information inside
a scope. The metric can be obtained as follows:

SE =

Iused
Iunused

(1)

Where Iused and Iunused is the used and unused information
record count in a scope, respectively. The access misses AM
metric is proportional to the times trust information that does
not exist in a scoped group is requested by a member of
the scope. Alternatively,
the access misses metric can be
represented as follows:

Fig. 4: The storage efﬁciency and access misses of the
framework when varying the number of consumers
(Gowalla).

Fig. 5: The storage efﬁciency and access misses of the
framework when varying the number of consumers
(Brightkite).

Fig. 6: The storage efﬁciency and access misses of
the framework when varying the number of providers
(Gowalla).

Fig. 7: The storage efﬁciency and access misses of
the framework when varying the number of providers
(Brightkite).

AM =

M
A

(2)

Where M is the number of misses, and A is the total number
of information accesses.

C. Experimental Results

We conduct three sets of experiments to evaluate our ap-
proach. For every set, we compare our proposed framework
with another variation of the framework. This variation scopes
the trust information for every microcell rather than a group
of microcells, thus we refer to it as Single-Microcell scoping
(SM). The proposed framework scopes multiple microcells
into a single scope. Therefore, we refer to it as Multi-Microcell
scoping (MM). Our aim is to highlight the signiﬁcance of
scoping multiple microcells together rather than having a
single scope for every microcell.

The ﬁrst experiment examines the framework by varying
the number of consumers at each microcell. Speciﬁcally, we

randomly select a total of 5,000 microcells and simulate the
provisioning of 40 IoT services at each one of them. The
number of consumers at each microcell is changed from one
consumer to 100. The experiments are conducted in both
datasets. The results are shown in Fig. 4 and 5. For both
MM and SM scoping, the storage efﬁciency increases as the
number of consumers increase (from 20% to 88%, and 26% to
91% for Gowalla and Brightkite, respectively in MM scoping).
The rationale behind this could be that when a small set
of consumers exist, only a small part of the information is
accessed. Therefore, the microcells are storing information
that they do not use frequently. As the number of consumers
increases, the chances of accessing more trust information
increases as well. Access miss also slightly increases as the
number of consumers increases (from 6% to 15%, and 7% to
15%, for Gowalla and Brightkite, respectively in MM). This
increase can be attributed to the increased chance of accessing
information for providers that do not have any information

20406080100Consumer Count20406080%Storage Efficiency (MM)Access Miss (MM)Storage Efficiency (SM)Access Miss (SM)20406080100Consumer Count20406080%Storage Efficiency (MM)Access Miss (MM)Storage Efficiency (SM)Access Miss (SM)510152025303540Provider Count2030405060708090%Storage Efficiency (MM)Access Miss (MM)Storage Efficiency (SM)Access Miss (SM)510152025303540Provider Count2030405060708090%Storage Efficiency (MM)Access Miss (MM)Storage Efficiency (SM)Access Miss (SM)Fig. 8: The storage efﬁciency and access misses of the
framework when varying the percentage of included
movements between microcells (Gowalla).

Fig. 9: The storage efﬁciency and access misses of the
framework when varying the percentage of included
movements between microcells (Brightkite).

stored in the scope. The difference between the two scoping
methods (i.e., MM and SM) is high (around 22% - 24%). One
reason may be that, with SM scoping, microcells do not share
information, which leads to less information per scope. This
in turn could lead to a higher probability of not ﬁnding the
needed information in a microcell.

The second set of experiments evaluates the framework by
varying the number of providers at each microcell. For this,
we randomly select 5,000 microcells and simulate a varying
number of service providers. More speciﬁcally, We start with
one provider at each microcell and increase the number to up
to 40 providers. For each scenario, we simulate a total of 100
consumers. The results of the experiments are shown in Fig.
6 and 7. The storage efﬁciency of the framework increases as
the number of providers increases in the microcell for both
MM and SM scoping (40% to 88%, and 44% to 91%, for
Gowalla and Brightkite, respectively in MM scoping). The
reason behind this is somewhat similar to the earlier scenario;
increasing the number of providers gives the microcell the
chance to use more of its trust information, thus increasing
the efﬁciency of its storage. Conversely, the access miss in
MM scoping decreases as the number of providers increases
(20% to 15%, and 24% to 15%, for Gowalla and Brightkite, re-
spectively). Increasing the number of providers could decrease
the probability of having a provider that does not have its
information stored in the microcell’s scope, thus minimizing
the number of misses with respect to the total number of
accesses (lower access miss). In the case of SM scoping, the
access increases as the number of providers increase. As a
result, the difference between SM and MM scoping increases
when more providers are added (having many providers is
expected in such environments). The difference between the
two scoping methods reaches 22% - 24%. The reason behind
this increase could be because of the limited trust information
inside each microcell in the case of SM scoping.

The ﬁnal experiment set studies the effect of the number
of movements between microcells. Recall that information

scoping is carried out by detecting communities in the mi-
crocell graph. The microcell graph is obtained by relying
on the microcells and the movements happening between
them. A provider moving between two microcells would
essentially create an edge between them. In this experiment
set, we change the number of movements and examine the
effectiveness of the framework. More speciﬁcally, we start by
removing all movements between microcells and gradually
increasing the number of movements to 25%, 50%, 75%,
and 100% of the original movements. For each scenario, we
simulate a total of 40 providers and 100 consumers at each
microcell. The results of this experiment is shown in Fig. 8,
and 9. As shown in the ﬁgures, the storage efﬁciency slightly
decreases as more movements are considered in MM scoping
(93% to 88%, and 95% to 91%, for Gowalla and Brightkite,
respectively). In the case where all movements are removed,
each microcell has its own information scope. Therefore, each
microcell would utilize almost all of its trust information. As
we add more movements, microcells start sharing their trust
information together, which increases the number of unusable
trust information. Similarly, the access miss also decreases as
more movements are included in MM scoping (37% to 15%,
and 38% to 15%, for Gowalla and Brightkite, respectively).
More movements mean a less sparse graph that leads to more
information sharing between microcells, which in turn leads to
fewer access misses. As for the SM scoping, the movements
between microcells do not affect its performance. This is due
to the fact that, unlike MM scoping, generating the scopes do
not depend on such movements.

V. RELATED WORK

Assessing trust in crowdsourced IoT environments is fairly
new. Several trust management frameworks have been pro-
posed that aim to address trust in IoT [22]–[27]. One major
challenge that needs to be accounted for is storing data and
information used by such frameworks. Any approach that
proposes to address such a challenge should (1) be distributed

020406080100Movements Percentage %2030405060708090%Storage Efficiency (MM)Access Miss (MM)Storage Efficiency (SM)Access Miss (SM)020406080100Movements Percentage %2030405060708090%Storage Efficiency (MM)Access Miss (MM)Storage Efficiency (SM)Access Miss (SM)to ﬁt the dynamic nature of IoT, (2) preserve the informa-
tion’s integrity, and (3) available whenever needed. Several
approaches and techniques were proposed to handle data
storage in distributed environments. The work in [28] proposed
Farsite federated storage that runs on an inherently untrusted
environment. It utilized a Byzantine-fault-tolerant protocol to
achieved data integrity and cryptographic algorithms to ensure
its conﬁdentiality. Another approach proposed in [29] a peer-
to-peer protocol for sharing data based on the trustworthiness
of users. Essentially, keeps track of the users’ reputations, and
any data coming from untrustworthy services are rejected. The
work in [30] proposed a data storage framework that utilizes
the Redundant Residue Number System (RRNS), which leads
to increased safety and reliability and faster data encryption
processing. Another work proposed a system that allows
organizations to store IoT data on the cloud [31]. Their system
relies on access control policies and cryptographic concepts
to ensure the security of the data. The work in [32] proposed
a technique for preserving the conﬁdentiality of outsourced
data. The approach offers ﬂexible cryptography-based access
control by using multiple keys for encrypting different data
blocks.

The aforementioned approaches have several properties that
make them unsuitable to store trust information in IoT en-
vironments. Byzantine-fault-tolerant-based approaches require
a centralized authority that manages the members of the
network. However, in IoT environments managing IoT devices
is impractical because of its dynamism. Other approaches
focus mainly on conﬁdentiality. While conﬁdentiality is critical
in certain scenarios, it is less in the case of trust information.
Therefore, a new storage framework is needed that is speciﬁ-
cally tailored for storing trust information in IoT environments.

VI. CONCLUSION

We proposed a framework for storing trust

information
in crowdsourced IoT environments. The framework preserves
the integrity of the data by leveraging the blockchain as the
primary storage medium. IoT devices and edge servers at each
microcells act as the nodes of the blockchain for validat-
ing new blocks. Trust information stored by the framework
is scoped. In that respect, every group of microcells that
might share the same trust information would have its own
blockchain network. Therefore, the blockchain would store
trust information that is truly needed by the microcell, and
thus, storage space would be preserved. Our conducted ex-
periments show the effectiveness of the proposed framework.
In our future work, we will extend the framework to handle
the dynamic aspects of the microcells. More speciﬁcally, the
framework will be developed to adapt to changes in movement
patterns and handle obsolete trust information.

VII. ACKNOWLEDGEMENTS

This research was partly made possible by DP160103595
and LE180100158 grants from the Australian Research Coun-
cil. The statements made herein are solely the responsibility
of the authors.

REFERENCES

[1] S. Huckle, R. Bhattacharya, M. White, and N. Beloff, “Internet of things,
blockchain and shared economy applications,” Procedia computer sci-
ence, vol. 98, pp. 461–466, 2016.

[2] J. Gubbi, R. Buyya, S. Marusic, and M. Palaniswami, “Internet of things
(iot): A vision, architectural elements, and future directions,” Future
generation computer systems, vol. 29, no. 7, pp. 1645–1660, 2013.
[3] K. Habak, M. Ammar, K. A. Harras, and E. Zegura, “Femto clouds:
Leveraging mobile devices to provide cloud service at the edge,” in
2015 IEEE 8th international conference on cloud computing.
IEEE,
2015, pp. 9–16.

[4] A. Lakhdari, A. Bouguettaya, and A. G. Neiat, “Crowdsourcing energy
as a service,” in International Conference on Service-Oriented Comput-
ing, 2018, pp. 342–351.

[5] A. Dhungana, T. Arodz, and E. Bulut, “Exploiting peer-to-peer wireless
energy sharing for mobile charging relief,” Ad Hoc Networks, vol. 91,
p. 101882, 2019.

[6] E. Bulut, S. Hernandez, A. Dhungana, and B. K. Szymanski, “Is
crowdcharging possible?” in 2018 27th International Conference on
Computer Communication and Networks (ICCCN).
IEEE, 2018, pp.
1–9.

[7] S. D. T. Kelly, N. K. Suryadevara, and S. C. Mukhopadhyay, “Towards
the implementation of iot for environmental condition monitoring in
homes,” IEEE sensors journal, vol. 13, no. 10, pp. 3846–3853, 2013.

[8] A. G. Neiat, A. Bouguettaya, T. Sellis, and S. Mistry, “Crowdsourced
coverage as a service: two-level composition of sensor cloud services,”
IEEE Transactions on Knowledge and Data Engineering, vol. 29, no. 7,
pp. 1384–1397, 2017.

[9] M. Bahutair, A. Bougeuttaya, and A. G. Neiat, “Adaptive trust: Usage-
based trust in crowdsourced iot services,” in 2019 IEEE International
Conference on Web Services (ICWS).

IEEE, 2019, pp. 172–179.

[10] M. N. Ba-hutair, A. Bouguettaya, and A. Ghari Neiat, “Multi-perspective
trust management framework for crowdsourced iot services,” IEEE
Transactions on Services Computing, pp. 1–1, 2021.

[11] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,”

Manubot, Tech. Rep., 2019.

[12] S. King and S. Nadal, “Ppcoin: Peer-to-peer crypto-currency with proof-

of-stake,” self-published paper, August, vol. 19, p. 1, 2012.

[13] M. Lokhava, G. Losa, D. Mazi`eres, G. Hoare, N. Barry, E. Gafni, J. Jove,
R. Malinowsky, and J. McCaleb, “Fast and secure global payments
with stellar,” in Proceedings of the 27th ACM Symposium on Operating
Systems Principles, 2019, pp. 80–96.

[14] D. Mazieres, “The stellar consensus protocol: A federated model for
internet-level consensus,” Stellar Development Foundation, vol. 32,
2015.

[15] V. Buterin et al., “A next-generation smart contract and decentralized

application platform,” white paper, vol. 3, no. 37, 2014.

[16] A. Lakhdari, A. Bouguettaya, S. Mistry, and A. G. Neiat, “Composing
energy services in a crowdsourced iot environment,” IEEE Transactions
on Services Computing, 2020.

[17] U. N. Raghavan, R. Albert, and S. Kumara, “Near linear time algorithm
to detect community structures in large-scale networks,” Physical review
E, vol. 76, no. 3, p. 036106, 2007.

[18] A. Lakhdari, A. Chorana, H. Cherroun, and A. Rezgui, “A link strength
based label propagation algorithm for community detection,” in 2016
IEEE International Conferences on Big Data and Cloud Computing
(BDCloud), Social Computing and Networking (SocialCom), Sustainable
Computing and Communications (SustainCom)(BDCloud-SocialCom-
SustainCom).

IEEE, 2016, pp. 362–369.

[19] M. Pease, R. Shostak, and L. Lamport, “Reaching agreement in the
presence of faults,” Journal of the ACM (JACM), vol. 27, no. 2, pp.
228–234, 1980.

[20] L. Lamport, R. Shostak, and M. Pease, “The byzantine generals prob-
lem,” in Concurrency: the Works of Leslie Lamport, 2019, pp. 203–226.
[21] E. Cho, S. A. Myers, and J. Leskovec, “Friendship and mobility: user
movement in location-based social networks,” in Proceedings of the 17th
ACM SIGKDD international conference on Knowledge discovery and
data mining, 2011, pp. 1082–1090.

[22] D. Chen, G. Chang, D. Sun, J. Li, J. Jia, and X. Wang, “Trm-iot: A trust
management model based on fuzzy reputation for internet of things,”
Computer Science and Information Systems, vol. 8, no. 4, pp. 1207–
1228, 2011.

[23] Z. Malik and A. Bouguettaya, Trust Management for Service-Oriented

Environments. Springer Science & Business Media, 2009.

[24] Y. B. Saied, A. Olivereau, D. Zeghlache, and M. Laurent, “Trust
management system design for the internet of things: A context-aware
and multi-service approach,” Computers & Security, vol. 39, pp. 351–
365, 2013.

[25] M. Nitti, R. Girau, L. Atzori, A. Iera, and G. Morabito, “A subjective
model for trustworthiness evaluation in the social internet of things,”
in Personal Indoor and Mobile Radio Communications (PIMRC), 2012
IEEE 23rd International Symposium on, IEEE.
IEEE, 2012, pp. 18–23.
[26] O. A. Wahab, R. Cohen, J. Bentahar, H. Otrok, A. Mourad, and
G. Rjoub, “An endorsement-based trust bootstrapping approach for
newcomer cloud services,” Information Sciences, 2020.

[27] B. Kantarci and H. T. Mouftah, “Mobility-aware trustworthy crowd-
sourcing in cloud-centric internet of things,” in Computers and Commu-
nication (ISCC), 2014 IEEE Symposium on.

IEEE, 2014, pp. 1–6.

[28] A. Adya, W. J. Bolosky, M. Castro, G. Cermak, R. Chaiken, J. R.
Douceur, J. Howell, J. R. Lorch, M. Theimer, and R. P. Wattenhofer,
“Farsite: Federated, available, and reliable storage for an incompletely
trusted environment,” ACM SIGOPS Operating Systems Review, vol. 36,
no. SI, pp. 1–14, 2002.

[29] T. Zimmermann, J. R¨uth, H. Wirtz, and K. Wehrle, “Maintaining
integrity and reputation in content ofﬂoading,” in 2016 12th Annual
Conference on Wireless On-demand Network Systems and Services
(WONS).

IEEE, 2016, pp. 1–8.

[30] N. Chervyakov, M. Babenko, A. Tchernykh, N. Kucherov, V. Miranda-
L´opez, and J. M. Cort´es-Mendoza, “Ar-rrns: Conﬁgurable reliable dis-
tributed data storage systems for internet of things to ensure security,”
Future Generation Computer Systems, vol. 92, pp. 1080–1092, 2019.

[31] J. D. Bokefode, A. S. Bhise, P. A. Satarkar, and D. G. Modani,
“Developing a secure cloud storage system for storing iot data by
applying role based encryption,” Procedia Computer Science, vol. 89,
pp. 43–50, 2016.

[32] W. Wang, Z. Li, R. Owens, and B. Bhargava, “Secure and efﬁcient
access to outsourced data,” in Proceedings of the 2009 ACM workshop
on Cloud computing security, 2009, pp. 55–66.

