1
2
0
2

p
e
S
5
1

]

R
C
.
s
c
[

1
v
0
4
4
7
0
.
9
0
1
2
:
v
i
X
r
a

Private Attacks in Longest Chain Proof-of-stake Protocols with
Single Secret Leader Elections

Sarah Azouvi
Protocol Labs

Daniele Cappelletti
Politecnico di Torino

ABSTRACT
Single Secret Leader Elections have recently been proposed as
an improved leader election mechanism for proof-of-stake (PoS)
blockchains. However, the security gain they provide has not been
quantified. In this work, we present a comparison of PoS longest-
chain protocols that are based on Single Secret Leader Elections
(SSLE) ‚Äì that elect exactly one leader per round ‚Äì versus those
based on Probabilistic Leader Elections (PLE) ‚Äì where one leader is
elected on expectation. Our analysis shows that when considering
the private attack ‚Äì the worst attack on longest-chain protocols [14]
‚Äì the security gained from using SSLE is substantial: the settlement
time is decreased by ‚àº 25% for a 33% or 25% adversary. Further-
more, when considering grinding attacks, we find that the security
threshold is increased by 10% (from 0.26 in the PLE case to 0.36
in the SSLE case) and the settlement time is decreased by roughly
70% for a 20% adversary in the SSLE case.

ACM Reference Format:
Sarah Azouvi and Daniele Cappelletti. 2021. Private Attacks in Longest
Chain Proof-of-stake Protocols with Single Secret Leader Elections. In 3rd
ACM Conference on Advances in Financial Technologies (AFT ‚Äô21), September
26‚Äì28, 2021, Arlington, VA, USA. ACM, New York, NY, USA, 13 pages. https:
//doi.org/10.1145/3479722.3480996

1 INTRODUCTION
Proof-of-stake has been proposed as a more energy-efficient alter-
native consensus protocol to proof-of-work for cryptocurrencies.
In proof-of-work, miners need to solve a computational puzzle in
order to earn the right to create a block and receive the associated
financial rewards. The amount of blocks that they mine is, hence,
proportional to their computational power. In contrast, the idea
behind PoS is that participants mine a fraction of blocks that is
proportional to the relative amount of coins they own. One crucial
component of PoS consensus protocols is their leader election [2],
used to decide which participants will get to create the next block.
Although leader election protocols have been studied widely in the
traditional field of distributed systems, the setting of blockchains
‚Äì which are decentralized and provide financial rewards for block
creation ‚Äì poses new challenges that are paramount to the secu-
rity of the whole consensus protocol. For example, leader election
protocols must be fair, in the sense that miners must be elected

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AFT ‚Äô21, September 26‚Äì28, 2021, Arlington, VA, USA
¬© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-9082-8/21/09. . . $15.00
https://doi.org/10.1145/3479722.3480996

proportionally to their power (stake or compute resources); this
is to ensure they are compensated fairly for their investment and
to prevent Sybil attacks. They should also be private, i.e., no actor
should be able to guess the next leader until they broadcast their
block with a proof-of-eligibility; this prevents denial-of-service
(DoS) attacks against the next leader. Many attempts have been
made to design an adequate leader election protocol, such as us-
ing hash functions [2, 11] or coin tossing protocols [18]. Another
method that has been adopted by many protocols [3, 12, 12, 16] is
the use of verifiable random functions (VRFs) [20].

Most leader election protocols used in blockchains are private
but probabilistic [11, 12, 16], meaning that one leader will privately
be elected on expectation, but it could be that zero or several leaders
are elected in some rounds. Probabilistic Leader Elections (PLEs)
can be problematic since having multiple leaders elected in a round
leads to different views or forks in the system. Ouroboros [18]
proposed a leader election where exactly one leader is elected per
round. However, the election is not private and exposes the leader
to DoS attacks.

To solve these problems, Single Secret Leader Election (SSLE),
where exactly one leader is privately elected at each round, has been
proposed in [8, 10]. Although current SSLEs are more complex to
implement than, for example, PLEs based on VRFs, they intuitively
improve the security of PoS blockchains because they reduce the
probability of honest forks. However, there is no formal proof of this
statement and, if true, the exact gain in security that they achieve,
compared to PLEs, has yet to be quantified.

Our contribution. In this work, we perform a comparison be-
tween SSLEs and PLEs and investigate the gain in security against
private attacks, where the adversary grows a private chain of blocks
so as to outpace the honest chain. Focusing our analysis on private
attacks, and not general adversaries, is motivated by the work of
Dembo et al. [14], who showed that private attacks are the worst
attack in longest-chain blockchains, in the sense that the true secu-
rity threshold of a longest-chain protocol is the same as the security
threshold against private attacks.

We start our analysis by considering leader elections that have
access to a perfect source of randomness in Section 4, before con-
sidering randomness that is derived from the blockchain itself ‚Äì
as is the case for many PoS longest-chain protocols [3, 12, 12] ‚Äì
and the resulting grinding attack in Section 5. We find that, with
perfect randomness, the persistence parameter (or settlement time)
against private attacks in a synchronous network is decreased by
roughly 25% against a 33% or 25% adversary. In the grinding case,
the security threshold is higher by 10 percentage points in the SSLE
case (36%) than in the PLE case (26%) and the persistence parameter
is decreased by roughly 70%. Although it is not surprising that
SSLEs perform better than PLEs in longest-chain blockchains, we
did not expect to see such significant improvements.

 
 
 
 
 
 
These results are very encouraging and could motivate the switch
from PLE to SSLE in current PoS blockchains. Since SSLEs are
still less efficient than PLEs, quantifying the gain in security is
paramount for evaluating fairly the trade-offs between the two. We
leave a full analysis of PoS with SSLE in a partially synchronous
network and against all possible attacks as future work. Whether
with SSLE or PLE, obtaining an exact formula for the security of
the protocol against any adversary (i.e., the probability of breaking
the consensus) is an open and non-trivial problem. All the known
analyses that consider a general adversary are based on bounds
that would not be useful for our comparison, and hence a general
adversary is beyond the scope of this work.

Lastly, we note that our analysis does not make use of the secret
property of the SSLE (that protects against DoS attacks), and thus
the results would hold for a public single leader election as well.

2 RELATED WORK
Previous works have proposed formal analyses of PoS blockchains
based on PLEs [3, 7, 13]. In most of them, the proof revolves around
finding a special block that guarantees security of the protocol and
bounding the probability that this type of block does not appear
in a sequence of ùëõ consecutive blocks. For example, Kiayias et
al. [17] consider Catalan blocks, Bagaria et al. [3] and Deb et al. [13]
consider Nakamoto blocks, Daian et al. [11] consider pivot point.
In [3], the interpretation given for that special block is that no
private chain started by the adversary at any point in time before
that block will be able to catch up with any chain that includes that
block at any point in the future. They show that any attack can be
modelled as a composition of private attacks.

Dembo et al. [14] considered three different types of longest-
chain blockchain protocols: proof-of-work, proof-of-stake, and
proof-of-space, and showed that in all three cases the true security
threshold of the protocol (i.e., the security threshold when consid-
ering all attacks) is exactly the same as the security threshold of
the private attack. They also prove that the private attack is the
worst attack in the synchronous proof-of-work case. In the case of
PoS protocols, based on the fact that other attacks do not appear
in the security threshold, they conjecture that these attacks should
have at least the same exponent as the private attack. Even though
this conjecture is left open, we decide in this paper to focus on
the private attack and leave a full analysis as future work. While
this limits the generality of our work, we believe that, due to the
conjecture above, studying the private attack alone gives a good
proxy for the security of PoS longest-chain protocols. Furthermore,
this simplifying assumption allows us to get exact bounds, as op-
posed to the loose bounds obtained by other analyses [3, 7, 11, 13],
usually based on Chebyshev‚Äôs inequality or similar inequalities.
Loose bounds on the probability of successful attacks would not
be sufficient to meaningfully quantify the difference between SSLE
and PLE in longest-chain PoS blockchains as even if one bound is
smaller than the other, this does not say anything about how the
exact probabilities compare. Simplifying our model to only con-
sider private attacks alleviates this problem as it allows us to get
closed-form solutions that we are meaningfully able to compare.

3 BACKGROUND, MODEL, AND DEFINITIONS
We start by giving some background on PoS blockchains before
presenting our model. Because we limit our adversary to private
attacks, we will consider a rather simplistic model and abstract
away most of the blockchain concepts.

3.1 Proof-of-stake blockchains
A blockchain is a digital distributed ledger of transactions. Trans-
actions are grouped into blocks that are chronologically ordered in
a linked chain. In a PoS system, participants ‚Äì also called miners or
validators‚Äì are eligible to create blocks based on their relative stake,
as measured from the number of coins that they own. In longest-
chain protocols, eligible miners create their block and append it
to the longest chain of blocks that they are aware of, i.e., the new
block should link to the block atop the longest existing chain of
blocks.

Briefly, the protocol works as follows. Whenever miners receive
a block, they add it to their local view. At each round, they run a
leader election protocol that randomly decides their eligibility for
that round, proportionally to their stake. For now we assume access
to a perfect random beacon [5] that emits a random number at the
beginning of each round. This beacon is then given as an input to
the leader election. If they are elected in that round, miners create
a block on top of their longest chain and broadcast their block to
the network. In the case where there exist two chains of the same
length, e.g., if more than one leader was elected in the previous
round, miners break the tie in a random way. In our model, we will
ignore the content of the blocks as well as associated reward or
financial incentives.

Informally, a blockchain should verify two security properties [14]:
(1) persistence, meaning that once a block has been confirmed by an
honest miner, it should stay in the chain of that miner indefinitely
i.e., it is not possible for an adversary to revert the chain of an
honest miner, except for the last ùëò blocks; and (2) liveness, meaning
that new blocks should be appended to the chain continually, even
in the presence of an adversary.

One important parameter in longest-chain blockchains is the
persistence parameter ‚Äì or settlement time ‚Äì ùëò, which, informally,
represents the number of rounds after which an honest miner will
consider a block confirmed, i.e., after which it will stay in the chain
forever.

3.2 Private attacks
Private attacks are a specific type of attack on longest-chain blockchains,
in which an adversary keeps its blocks private (instead of sending
them to the rest of the miners) and does not mine on other partic-
ipants‚Äô blocks. In other words, the adversary is creating its own
chain, parallel to the honest chain. The adversary succeeds if it can
create a private chain longer than the honest chain. If that is the
case, it will broadcast its chain to the rest of the players, forcing
them to abandon their own chain and mine on top of the adversarial
chain. It is clear that this attack will almost surely be successful if
the adversary can mine blocks at a rate faster than the rest of the
players. In PoS blockchains, this rate is proportional to the relative
amount of stake that one owns. Hence this attack will succeed if
the adversary owns more than half of the total stake. If not, then

2

there exists a time after which this attack becomes very unlikely to
succeed.

3.3 Model
3.3.1 Assumptions. We consider a set of ùëÅ participants, a fraction
ùõº of which are controlled by an adversary A performing a private
attack as specified above. The remaining participants are honest
and follow the protocol. Time is divided into discrete time-steps.
We assume that we have access to a broadcast algorithm and we
consider a synchronous model meaning that each message, i.e.,
block, sent by an honest participant reaches everyone after at most
Œî time steps with Œî > 0. We consider a round-based protocol that
relies on an underlying leader election mechanism as defined below.
We assume that the duration of each round is strictly more than
Œî, such that any message sent by any honest participant at the
beginning of a round will be received before the end of that round.
We assume that we have access to a perfect random beacon that
emits new randomness at the beginning of each round. We will
relax this assumption in Section 5.

For simplicity, we consider a flat model, meaning that each miner
accounts for one unit of stake and that the set of participants is
static.

Leader Election. Every PoS protocol uses a leader election to
3.3.2
decide which miners are eligible to create blocks. In this paper, we
treat it as a black box algorithm that takes as input a random number
ùëü and a set of participants and outputs a (potentially empty) set
of leaders. We consider two types of leader election: Single Secret
Leader Election (SSLE) [8], where exactly one leader is elected per
round, and Probabilistic Leader Election (PLE) [16], where one
leader is elected per round on expectation. This means that, when
using a PLE, there could be multiple leaders or no leader at all in a
round. We denote ùëéùëõ and ‚Ñéùëõ the number of adversarial and honest
leaders elected at round ùëõ, respectively.

We model the PLE case as follows: at each round, every player
‚Äútosses their own coin‚Äù (using the randomness given by the random
beacon) to determine their eligibility; each player wins with proba-
bility 1/ùëÅ . In practice, this is achieved using a verifiable random
function [20]: each player uses the VRF to compute their own ran-
dom number; if it falls below a threshold, they are elected leader.
An adversary controlling a fraction ùõº of the players will thus have
a number of leaders that follows a Binomial distribution with ùëÅ √ó ùõº
trials and success probability 1/ùëÅ , seeing as they get to toss a coin
for each of the players they control. We assume that the number of
participants ùëÅ is big and hence the number of adversarial leaders
elected can be approximated as a Poisson distribution with parame-
ter ùõº. Similarly, the number of honest participants elected in a round
follows a Poisson distribution with parameter 1 ‚àí ùõº. Furthermore,
the number of adversarial and honest leaders are independent from
each other.

In the SSLE case, exactly one of the players is elected, hence
the number of adversarial leaders follows a Bernoulli distribution
with parameter ùõº. However, the number of adversarial and honest
leaders are not independent. In particular, the number of honest
leaders is the complement of the number of adversarial leaders, i.e.,
‚Ñéùëõ = 1 ‚àí ùëéùëõ for every ùëõ ‚àà N‚àó.

In this paper, where we consider a static adversary that performs
a private attack, we ignore some of the practical requirements for
leader elections in PoS blockchains (such as unpredictability and
secrecy) that are not relevant to the model.

Security games. We consider an adversary mounting a pri-
3.3.3
vate attack against the honest players. Accordingly, we define the
following games that capture whether or not the adversary succeeds
in a private attack according to the assumptions above.

Definition 3.1 ((ùêø, ùõº)-PLE Private Game). The PLE private game
with parameters (ùêø, ùõº) is defined as follows: at each round ùëõ ‚àà
[1, . . . , ùêø] a number ùëéùëõ of adversarial leaders and ‚Ñéùëõ of honest lead-
ers are selected at random from, respectively, Poisson distributions
of parameters ùõº and 1 ‚àí ùõº. We say that the adversary wins the PLE
private game of length ùêø and power ùõº if the number of rounds with
non-zero adversarial leaders is greater than or equal to the number
of rounds with non-zero honest leaders, i.e.:

|{ùëõ ‚àà [1, . . . , ùêø] : ùëéùëõ > 0}| ‚â• |{ùëõ ‚àà [1, . . . , ùêø] : ‚Ñéùëõ > 0}|.

Definition 3.2 ((ùêø, ùõº)-SSLE Private Game). The SSLE private game
with parameters (ùêø, ùõº) is defined as follows: at each round ùëõ ‚àà
[1, . . . , ùêø], exactly one leader is elected. This leader is adversarial
(ùëéùëõ = 1, ‚Ñéùëõ = 0) with probability ùõº and honest (ùëéùëõ = 0, ‚Ñéùëõ = 1)
with probability 1 ‚àí ùõº. We say that the adversary wins the SSLE
private game of length ùêø and power ùõº if the number of rounds with
adversarial leaders is greater than or equal to the number of rounds
with honest leaders, i.e.:

|{ùëõ ‚àà [1, . . . , ùêø] : ùëéùëõ = 1}| ‚â• |{ùëõ ‚àà [1, . . . , ùêø] : ‚Ñéùëõ = 1}|.

We now define the persistence parameter ùëõ0 of the games, para-
metric in 0 < ùúñ < 1, that intuitively represents the number of
rounds after which the adversary cannot win the private game,
except with probability ùúñ.

Definition 3.3 (ùúñ‚àípersistence parameter). We say that ùëõ0 is the
ùúñ‚àípersistence parameter of the SSLE, resp. PLE, private game if the
probability that there exists any ùëõ ‚â• ùëõ0 such that the adversary
wins the SSLE, resp. PLE, game of length ùëõ is ùúñ.

In order to study the private games, we define the concept of

gap, already introduced by Blum et al. [7].

ùëõ

Definition 3.4 (Gap). The gap at round ùëõ ‚àà [1, . . . , ùêø] is the differ-
ence between the number of adversarial rounds and honest rounds
in rounds 1 to ùëõ. Let GùëÜùëÜùêøùê∏
(ùõº) and GùëÉùêøùê∏
(ùõº) denote, respectively,
the gap in the PLE and SSLE private games of parameters (ùêø, ùõº).
For ùëõ ‚àà [1, . . . , ùêø], we have:
GùëÜùëÜùêøùê∏
ùëõ
GùëÉùêøùê∏
ùëõ

(ùõº) = |{ùëñ ‚àà [1, . . . , ùëõ] : ùëéùëñ > 0}| ‚àí |{ùëõ ‚àà [1, . . . , ùëõ] : ‚Ñéùëñ > 0}|

(ùõº) = |{ùëñ ‚àà [1, . . . , ùëõ] : ùëéùëñ = 1}| ‚àí |{ùëõ ‚àà [1, . . . , ùëõ] : ‚Ñéùëñ = 1}|

ùëõ

If we consider a general analysis that applies to both settings
(SSLE and PLE), we simply write Gùëõ and talk about the private game.
It is clear that the adversary wins the private game of length ùëõ if
and only if Gùëõ ‚â• 0. In the next section, we will study the behaviour
of the gap. We are specifically interested in the probability that the
adversary wins the PLE and SSLE games for any ùëõ ‚â• ùëõ0, ùëõ0 ‚àà N.
Before this, we briefly explain why the PLE and SSLE private
games are an accurate description of the private attack in PoS

3

systems. In the SSLE case, since there is exactly one leader per
round and the network is synchronous, it is clear that the honest
chain will be exactly the same length as the number of honest
rounds and the adversarial chain will be at most the same length
as the number of adversarial rounds.

In the PLE case, however, there could be honest forks due to
multiple honest leaders being elected in the same round. If that
happens, and since we consider a synchronous network, the longest
chain will still increase by one even if some of the blocks at that
round are being abandoned. Even in the worst case where there
are multiple longest chains for several rounds, each of them will
still be as long as the number of honest rounds. Similarly, in the
adversarial case, even if the adversary has more than one block on
one round, it can only append one block per round and, hence, its
longest chain is bounded by the number of eligible rounds.

4 ANALYSIS
In this section we prove our main theorems, Theorem 4.5 and 4.6,
where we express for ùëõ0 ‚àà N‚àó the probability that an adversary
succeeds in winning the private game for any length greater than
or equal to ùëõ0. This probability corresponds to the value ùúñ for the
corresponding ùúñ‚àípersistence parameter ùëõ0. We will then compare
the ùúñ‚àípersistence parameter in the SSLE and PLE cases.

SSLE and PLE games as biased random walks. In the SSLE game,
it is straightforward to see that the gap will increase by one with
probability ùõº and decrease by one with probability 1 ‚àí ùõº.

In the PLE game, there are two events in which the gap will not
change. The first event is when no leader is elected. The second
event is when an honest leader is elected at the same round as an
adversarial leader. We call these events null events and denote ùëù0
the probability that they happen.

On the other hand having multiple adversarial leaders and no
honest leader is equivalent to having exactly one adversarial leader
since the gap will grow by one at that round regardless of the exact
number of adversarial leaders and vice versa for honest leaders. We
note ùëùùëé = Pr[ùëéùëõ > 0 and ‚Ñéùëõ = 0] the probability that an adversary
is the unique leader in a round - which does not depend on ùëõ - and
ùëù‚Ñé = Pr[ùëéùëõ = 0 and ‚Ñéùëõ > 0] the probability that the honest players
are unique leaders. The PLE game can be modeled as a random walk
that increases by one with probability ùëùùëé, decreases by one with
probability ùëù‚Ñé and stays the same with probability ùëù0 = 1 ‚àí ùëùùëé ‚àí ùëù‚Ñé.
Since ùëéùëõ and ‚Ñéùëõ are independent, we have:

ùëùùëé = Pr[‚Ñéùëõ = 0] √ó Pr[ùëéùëõ ‚â• 1]

= ùëíùõº‚àí1 (1 ‚àí ùëí‚àíùõº )
= ùëíùõº‚àí1 ‚àí ùëí‚àí1

And similarly: ùëù‚Ñé = ùëí‚àíùõº ‚àí ùëí‚àí1.

We now move on to prove our first lemma. For the rest of the

paper, for ùëù ‚àà (0, 1) and ùëõ ‚àà N, we note

Bin(ùëù, ùëõ, ùëò) =

(cid:1)ùëùùëò (1 ‚àí ùëù)ùëõ‚àíùëò,

(cid:26) (cid:0)ùëõ
ùëò
0,

for ùëò ‚àà N
for ùëò ‚àà R \ N

Lemma 4.1. For every (ùëõ, ùë£) ‚àà N2 and ùõº ‚àà (0, 1):

Pr[GùëÜùëÜùêøùê∏
ùëõ

(ùõº) = ùë£] = Bin(ùõº, ùëõ, 1
2

(ùëõ + ùë£)).

Proof. We already noted that (GùëÜùëÜùêøùê∏

ùëõ

such that

(ùõº))ùëõ ‚ààN is a random walk

GùëÜùëÜùêøùê∏
ùëõ+1 (ùõº) =

(cid:26) GùëÜùëÜùêøùê∏
ùëõ
GùëÜùëÜùêøùê∏
ùëõ

(ùõº) + 1, with probability ùõº
(ùõº) ‚àí 1, with probability 1 ‚àí ùõº

The proof of the lemma follows from standard results on random
walks and can be found in [1]. Briefly, for ùëõ ‚àà N: ‚àíùëõ ‚â§ GùëÜùëÜùêøùê∏
(ùõº) ‚â§
ùëõ. We note ùë¢ the number of times that GùëÜùëÜùêøùê∏
(ùõº) increased by
ùëõ
one and ùëë the number of times that GùëÜùëÜùêøùê∏
(ùõº) decreased by one. If
GùëÜùëÜùêøùê∏
(ùõº) = ùë£ for ùë£ ‚àà [‚àíùëõ, ùëõ], we have ùë¢ ‚àíùëë = ùë£ and ùë¢ +ùëë = ùëõ hence
ùëõ
(cid:1) different ways to reach ùë£, starting
ùë¢ = 1
(cid:1)ùõºùë¢ (1 ‚àí ùõº)ùëõ‚àíùë¢ .
from 0 and hence Pr[GùëÜùëÜùêøùê∏
‚ñ°

2 (ùë£ +ùëõ). There are exactly (cid:0)ùëõ

(ùõº) = ùë£] = (cid:0)ùëõ
ùë¢

ùëõ

ùëõ

ùëõ

ùë¢

We now look at the equivalent lemma, in the PLE case.

Lemma 4.2. For every (ùëõ, ùë£) ‚àà N2 and ùõº ‚àà (0, 1):

Pr[GùëÉùêøùê∏
ùëõ

(ùõº) = ùë£] =

ùëõ‚àíùë£
‚àëÔ∏Å

ùëô=0

Bin(ùëù0, ùëõ, ùëô) Pr[GùëÜùëÜùêøùê∏
ùëõ‚àíùëô

(

ùëùùëé
1 ‚àí ùëù0

) = ùë£]

Proof. If GùëÉùêøùê∏

(ùõº) = ùë£, there can be between 0 and ùëõ ‚àí ùë£ null
slots (i.e., slots where the gap does not change from the previous
step); hence, we have:

ùëõ

Pr[GùëÉùêøùê∏
ùëõ

(ùõº) = ùë£] =

ùëõ‚àíùë£
‚àëÔ∏Å

ùëô=0

Pr[GùëÉùêøùê∏
ùëõ

(ùõº) = ùë£ |# null events = ùëô]√ó

Pr[# null events = ùëô]

We start by assuming that there exist exactly ùëô null events in the
PLE game. After removing the ùëô null events from the PLE game, the
remaining ùëõ ‚àíùëô slots are either fully adversarial or fully honest; this
is equivalent to an SSLE game of length ùëõ ‚àí ùëô. The power of the ad-
versary in this new SSLE game needs to be adjusted, accounting for
the fact that null events have been removed. Hence the equivalent
SSLE game has parameters ùëõ ‚àí ùëô and ùëùùëé
due to the independence
1‚àíùëù0
of each round. We thus have the following:

Pr[GùëÉùêøùê∏
ùëõ

(ùõº) = ùë£] =

ùëõ‚àíùë£
‚àëÔ∏Å

ùëô=0

Pr[GùëÜùëÜùêøùê∏

ùëõ‚àíùëô

(

ùëùùëé
1 ‚àí ùëù0

) = ùë£] √ó Pr[# null events = ùëô]

Following standard results on Binomial distribution we have that
Pr[# null events = ùëô] = Bin(ùëù0, ùëõ ‚àí ùë£, ùëô), hence:
ùëõ‚àíùë£
‚àëÔ∏Å

Pr[GùëÉùêøùê∏
ùëõ

(ùõº) = ùë£] =

) = ùë£] √ó Bin(ùëù0, ùëõ ‚àí ùë£, ùëô).

Pr[GùëÜùëÜùêøùê∏

ùëõ‚àíùëô

(

ùëùùëé
1 ‚àí ùëù0

ùëô=0

This result can also be derived using the multinomial distribution.
‚ñ°

Having computed the probability that the gap is equal to some
value ùë£, and in order to study the persistence parameter, we are
also interested in the probability that the gap, starting at some
negative value ‚àíùëÄ, goes back up to zero. In blockchain terms, if
the adversarial chain is behind the honest chain by ùëÄ blocks, we
compute the probability that it eventually catches back.

Lemma 4.3. For ùõº < 1/2, if in round ùëõ0 ‚àà N, Gùëõ0 = ‚àíùëÄ for
ùëÄ > 0, then the probabilities ùëüùëÄ that Gùëõ ever reaches 0 for any
ùëõ ‚â• ùëõ0 in the SSLE and PLE cases are:

ùëü ùëÜùëÜùêøùê∏
ùëÄ

=

(cid:17)ùëÄ

(cid:16) ùõº
1 ‚àí ùõº

; ùëü ùëÉùêøùê∏

ùëÄ =

(cid:19)ùëÄ

(cid:18) ùëíùõº ‚àí 1
ùëí1‚àíùõº ‚àí 1

4

ùëõ

ùëõ

ùëõ

Proof. We start by considering the PLE case. The probability
reaches 0 starting from a position ‚àíùëÄ for ùëÄ > 0 is
ever reaches M when starting

ùëüùëÄ that GùëÉùêøùê∏
the same as the probability that GùëÉùêøùê∏
at 0 (i.e., GùëÉùêøùê∏

has a net increase of M).
Let‚Äôs note ùëü1 = ùëü . Then we have ùëüùëÄ = ùëü ùëÄ (GùëÉùêøùê∏

needs to have
ùëÄ net increase of 1). Furthermore, we have ùëü = ùëùùëé + ùëù‚Ñéùëü 2 + ùëù0ùëü
since GùëÉùêøùê∏
either increases straight away by one (with probability
ùëùùëé), or decreases by one (with probability ùëù‚Ñé) in which case GùëÉùêøùê∏
ùëõ
needs to increase by 2 to have a net increase of 1, or GùëÉùêøùê∏
stays
the same (with probability ùëù0) in which cases GùëÉùêøùê∏
still needs to
increase by 1.

ùëõ

ùëõ

ùëõ

ùëõ

We have ùëü = ùëùùëé + ùëù‚Ñéùëü 2 + ùëù0ùëü ‚áê‚áí ùëùùëé + ùëù‚Ñéùëü 2 + (ùëù0 ‚àí 1)ùëü = 0,
with ùëùùëé + ùëù‚Ñé + ùëù0 = 1. Hence, ùëü satisfies: ùëùùëé + ùëù‚Ñéùëü 2 ‚àí (ùëùùëé + ùëù‚Ñé)ùëü = 0.
The solutions to this equation are (1, ùëùùëé/ùëù‚Ñé). Because ùõº < 1/2,
the random walk is transient with drift towards ‚àí‚àû, hence ùëü < 1.
This means that ùëü = ùëùùëé/ùëù‚Ñé and ùëüùëÄ =
(cid:16) ùëíùõº ‚àí1
ùëí 1‚àíùõº ‚àí1
The analysis in the SSLE case works the same but with ùëù0 = 0,
ùëùùëé = ùõº and ùëù‚Ñé = 1 ‚àí ùõº. We then have ùëü = ùõº + (1 ‚àí ùõº)ùëü 2. The two
solutions of this equation are 1 and ùõº
1‚àíùõº . Since ùëü < 1, we have:
ùëüùëÄ = (cid:0) ùõº
1‚àíùõº

(cid:16) ùëíùõº ‚àí1‚àíùëí‚àí1
ùëí‚àíùõº ‚àíùëí‚àí1

(cid:16) ùëùùëé
ùëù‚Ñé

(cid:1)ùëÄ .

(cid:17)ùëÄ

(cid:17)ùëÄ

(cid:17)ùëÄ

=

=

.

‚ñ°

Interestingly, since ùë• ‚Ü¶‚Üí (ùëíùë• ‚àí 1)(1 ‚àíùë•) is increasing on [0, 1/2],
we notice that for ùõº < 1/2, ùëü ùëÉùêøùê∏
ùëÄ < ùëü ùëÜùëÜùêøùê∏
ùëÄ . Starting from ‚àíùëÄ, the
adversary is, hence, more likely to catch up the honest chain in
the SSLE case than in the PLE case. However, this does not say
anything about whether the adversary is more likely to win the
private game of length ùëõ as one process may be decreasing faster
than the other. We shall now compute the expected value of the
gap in both cases to get a sense of their evolution.

Intuitively, since longest-chain protocols have been proven se-
cure for an adversary that has less than half of the power [14], the
gap should decrease with time. The longer the chain is, the harder
it is for an adversary to catch up with the honest chain and hence
the bigger their disadvantage is, and hence their gap. In the next
lemma, we prove that the expected gap is linear in ùëõ and that the
linear coefficient is bigger for the SSLE than PLE gap, and, therefore,
the disadvantage of the adversary grows faster in the SSLE case,
consistently with the intuition that SSLE is more secure. Figure 1a
show this coefficient for different values of ùõº < 1/2.

Lemma 4.4. For every ùëõ ‚àà N and ùõº ‚àà (0, 1):

E[GùëÜùëÜùêøùê∏
ùëõ
E[GùëÉùêøùê∏
ùëõ

(ùõº)] = (2ùõº ‚àí 1)ùëõ
(ùõº)] = (ùëíùõº‚àí1 ‚àí ùëí‚àíùõº )ùëõ

Proof. Let (ùëÖùëõ)ùëõ ‚ààN denote a random walk that has a probabil-
ity ùëù of going up by 1, a probability ùëû of going down by 1 and a
probability 1 ‚àíùëù ‚àíùëû of staying the same in each round. Additionally
we assume ùëÖ0 = 0.

It is trivial to verify that ùëãùëõ = ùëÖùëõ ‚àí (ùëù ‚àíùëû)ùëõ is a martingale. Since
martingales have constant expectations, we have E[ùëãùëõ] = ùëã0 = 0
and hence E[ùëÖùëõ] = (ùëù ‚àí ùëû)ùëõ. We apply this result to GùëÜùëÜùêøùê∏
and
GùëÉùêøùê∏
. In the SSLE case, ùëù ‚àí ùëû = ùõº ‚àí (1 ‚àí ùõº) = 2ùõº ‚àí 1 and in the
ùëõ
PLE case ùëù ‚àí ùëû = ùëùùëé ‚àí ùëù‚Ñé = ùëíùõº‚àí1 ‚àí ùëí‚àíùõº . This proves the result. ‚ñ°

ùëõ

(a) Linear Coefficient for the Expected Gap

We now move on to prove the main result that gives the proba-

bility of success of the adversary in the SSLE game.

Theorem 4.5. The probability that the adversary wins the SSLE

game for any length greater or equal than ùëõ is:

ùëÉ ùõº
SSLE (ùëõ) =

ùëõ
‚àëÔ∏Å

ùë£=0,
ùëõ+ùë£‚â°0[2]

Bin(ùõº, ùëõ, 1
2

(ùëõ + ùë£)) +

ùëõ
‚àëÔ∏Å

ùë£=1,
ùëõ‚àíùë£‚â°0[2]

Bin(1 ‚àí ùõº, ùëõ, 1
2

(ùëõ ‚àí ùë£))

.

ùëõ

Proof. For readability, in this proof we note Gùëõ instead of GùëÜùëÜùêøùê∏
We start by noting that ‚àíùëõ ‚â§ Gùëõ ‚â§ ùëõ for every ùëõ ‚àà N. There are
two scenarios where the adversary can have a private chain longer
than the honest chain for a length of at least ùëõ: either the gap at ùëõ
is positive, or the gap is negative and the adversary catches up in
the future (i.e., the gap reaches 0 in the future). This gives us the
following:
ùëÉùõº
SSLE (ùëõ) = Pr[Gùëõ ‚â• 0] + Pr[Gùëõ < 0] Pr[Gùëõcatches up|Gùëõ < 0]

ùëõ
‚àëÔ∏Å

ùë£=0

Pr[Gùëõ = ùë£] +

ùëõ
‚àëÔ∏Å

Pr[Gùëõ = ‚àíùë£]ùëüùë£

ùëõ
‚àëÔ∏Å

(cid:18)

ùë£=1
(cid:19)

ùëõ
1
2 (ùëõ + ùë£)

ùõº 1

2 (ùëõ+ùë£) (1 ‚àí ùõº)

1

2 (ùëõ‚àíùë£)

=

=

+

=

+

=

5

ùë£=0,
ùëõ+ùë£‚â°0[2]
ùëõ
‚àëÔ∏Å

ùë£=1,
ùëõ‚àíùë£‚â°0[2]
ùëõ
‚àëÔ∏Å

ùë£=0,
ùëõ+ùë£‚â°0[2]
ùëõ
‚àëÔ∏Å

ùë£=1,
ùëõ‚àíùë£‚â°0[2]
ùëõ
‚àëÔ∏Å

ùë£=0,
ùëõ+ùë£‚â°0[2]

(cid:19)

(cid:19)

(cid:19)

(cid:18)

ùëõ
1
2 (ùëõ ‚àí ùë£)

(cid:18)

ùëõ
1
2 (ùëõ + ùë£)

(cid:18)

ùëõ
1
2 (ùëõ ‚àí ùë£)

ùõº 1

2 (ùëõ‚àíùë£) (1 ‚àí ùõº)

1

2 (ùëõ+ùë£) (cid:16) ùõº
1 ‚àí ùõº

(cid:17) ùë£

ùõº 1

2 (ùëõ+ùë£) (1 ‚àí ùõº)

1

2 (ùëõ‚àíùë£)

ùõº 1

2 (ùëõ+ùë£) (1 ‚àí ùõº)

1

2 (ùëõ‚àíùë£)

Bin(ùõº, ùëõ, 1
2

(ùëõ + ùë£)) +

ùëõ
‚àëÔ∏Å

ùë£=1,
ùëõ‚àíùë£‚â°0[2]

Bin(1 ‚àí ùõº, ùëõ, 1
2

(ùëõ ‚àí ùë£))

‚ñ°

We now move on to prove the result in the PLE case.

Theorem 4.6. The probability that the adversary wins the PLE

private game for any length greater or equal than ùëõ is:

ùëÉùõº
PLE (ùëõ) =

+

ùëõ
‚àëÔ∏Å

ùëõ‚àíùë£
‚àëÔ∏Å

ùë£=1

ùëô=0

ùëõ
‚àëÔ∏Å

ùëõ‚àíùë£
‚àëÔ∏Å

ùë£=0

ùëô=0

Bin(ùëù0, ùëõ, ùëô)Bin(

ùëùùëé
1 ‚àí ùëù0

, ùëõ ‚àí ùëô, 1
2

(ùëõ ‚àí ùëô + ùë£))

Bin(ùëù0, ùëõ, ùëô)Bin(

ùëùùëé
1 ‚àí ùëù0

, ùëõ ‚àí ùëô, 1
2

(ùëõ ‚àí ùëô ‚àí ùë£))

(cid:19) ùë£

(cid:18) ùëíùõº ‚àí 1
ùëí1‚àíùõº ‚àí 1

Proof. We use the same technique as in the previous theorem.

ùëÉùõº
PLE (ùëõ) = Pr[Gùëõ ‚â• 0] + Pr[Gùëõ < 0] Pr[Gùëõcatches up|Gùëõ < 0]

Pr[Gùëõ = ùë£] +

ùëõ
‚àëÔ∏Å

ùë£=1

Pr[Gùëõ = ‚àíùë£]ùëüùë£

Bin(ùëù0, ùëõ, ùëô) Pr[GùëÜùëÜùêøùê∏
ùëõ‚àíùëô

(

Bin(ùëù0, ùëõ, ùëô) Pr[GùëÜùëÜùêøùê∏
ùëõ‚àíùëô

(

ùëùùëé
1 ‚àí ùëù0

ùëùùëé
1 ‚àí ùëù0

) = ùë£]

) = ùë£]

(cid:19) ùë£

(cid:18) ùëíùõº ‚àí 1
ùëí1‚àíùõº ‚àí 1

Bin(ùëù0, ùëõ, ùëô)Bin(

Bin(ùëù0, ùëõ, ùëô)Bin(

ùëùùëé
1 ‚àí ùëù0

, ùëõ ‚àí ùëô, 1
2

ùëùùëé
1 ‚àí ùëù0

, ùëõ ‚àí ùëô, 1
2

(ùëõ ‚àí ùëô + ùë£))

(ùëõ ‚àí ùëô ‚àí ùë£))

(cid:19) ùë£

(cid:18) ùëíùõº ‚àí 1
ùëí1‚àíùõº ‚àí 1

=

=

+

=

+

ùëõ
‚àëÔ∏Å

ùë£=0
ùëõ
‚àëÔ∏Å

ùëõ‚àíùë£
‚àëÔ∏Å

ùë£=0
ùëõ
‚àëÔ∏Å

ùëô=0
ùëõ‚àíùë£
‚àëÔ∏Å

ùë£=1
ùëõ
‚àëÔ∏Å

ùëô=0
ùëõ‚àíùë£
‚àëÔ∏Å

ùë£=0
ùëõ
‚àëÔ∏Å

ùëô=0
ùëõ‚àíùë£
‚àëÔ∏Å

ùë£=1

ùëô=0

‚ñ°

Results interpretation. In order to compare these two probabilities,
we plot them for different values of ùëõ and ùõº. In Figure 2, we see that,
as expected, SSLE performs much better than PLE: the adversary
wins the PLE game with higher probability than the SSLE game.
To cite a few concrete examples, for ùëõ = 300 and a 33% adversary,
the probability of success drops from 10‚àí7 to 10‚àí9 (Figure 2d). For
ùõº = 0.33 and ùúñ = 10‚àí12 the persistence parameter is ùëõ0 = 400
in the SSLE case and 550 in the PLE case. For a blockchain where
one block is emitted every 30 seconds, breaking persistence with
probability 10‚àí12 would roughly occur once every million years.
For all the values of ùõº that we plotted, we see that, at least for ùëõ
big enough, the probability of violating persistence is exponential
(as the graph is linear in logarithmic scale), meaning that it is of
the form ùëí‚àíùëéùëõ for ùëé ‚àà R‚àó
+ in both the PLE and SSLE cases ‚Äì for
different values of ùëé that we denote ùëéùëÜùëÜùêøùê∏ and ùëéùëÉùêøùê∏ . We remark
that this form is consistent with the bound found by Gazi et al. [15]
and Li et al. [19] in the context of Bitcoin and is tighter than the
‚àö
one of ùëí‚àíŒ© (
ùëõ) from Dembo et al. [14] which is based on a looser
inequality (as they consider every attack possible).

0

For a fixed ùúñ and large ùëõ, the persistence parameter of the SSLE
, can thus be expressed as follows: ùëõùëÜùëÜùêøùê∏
ùëõùëÉùêøùê∏
game, ùëõùëÜùëÜùêøùê∏
,
0
where ùëõùëÉùêøùê∏
is the ùúñ-persistence parameter of the PLE game. Find-
ing the value of ùëéùëÉùêøùê∏ and ùëéùëÜùëÜùêøùê∏ is straightforward by computing
a specific value of ùúñ for some big enough ùëõ: ùëé = ‚àí ln(ùúñ)/ùëõ. We

ùëéùëÉùêøùê∏
ùëéùëÜùëÜùêøùê∏

=

0

0

find that the ùúñ‚àípersistence parameter decreases by 17% for a 49%
adversary, by roughly 25% for a 33% or 25% adversary, and by 32%
for a 10% adversary in the SSLE case compared to the PLE case. The
improvement is substantial.

5 GRINDING ANALYSIS
In the previous section, we have assumed that the random beacon
given as input to the leader election at each round came from a
perfect source of randomness. Such an assumption can be achieved
with a decentralized random beacon [21], for example. However
most PoS protocols rely on an internal random beacon, which is
based on the state of the chain. Such random beacons are vulnera-
ble, to some extent, to grinding attacks where an adversary grinds
through the block space in order to bias the randomness and find a
value for which an unfair advantage can be extracted. Bagaria et
al. [3] studied the security of PoS protocols where the randomness
is updated every ùëê blocks and the trade-offs between updating the
randomness more frequently (and being more vulnerable to grind-
ing) or less frequently (and being more predictable). In this section,
we study this specific case and compare the security guarantees of
PoS blockchains against private attacks that use grinding in the PLE
and SSLE case. We start by presenting this new model in Section 5.1
before moving on to the analysis in Section 5.2.

5.1 Model
5.1.1 Random Beacon and Grinding. We assume that the random
beacon given as input to the leader election in each round is based
on the data in the block created in the previous round. A block
created by different miners or a round skipped will all produce
different beacons and thus election results in the next round but
two blocks created by the same leader at the same round with
different content (e.g., different transaction sets) will produce the
same random beacon.

As a concrete, simplified, example, we assume that a random bea-
con ùëü0 is initialized using a multiparty computation protocol [4, 5, 9]
at round 0. Randomness at round ùëñ is then defined as ùëüùëñ = ùúéùë†ùëò (ùëüùëñ‚àí1 ‚äï
ùëñ), where ùúé is the deterministic signature of the player creating the
block in round ùëñ. In practice a Verifiable Random Function [20] will
be used instead of a signature scheme but this does not matter for
our analysis. If no block is created at round ùëñ ‚àí 1 because the elected
leader was offline or no leader was elected (in the PLE case), then
the previous randomness is used, i.e., ùëüùëñ = ùúéùë†ùëò (ùëüùëñ‚àí2 ‚äï ùëñ).

This scenario corresponds to ùëê = 1 in [3] and it could be extended
to the more general case where the randomness is updated every
ùëê blocks instead (i.e., ùëüùëñ = ùúéùë†ùëò (ùëüùëñ‚àí(ùëñ%ùëê) ‚äï ùëñ)) as Bagaria et al. [3]
showed. In the case where ùëê > 1 the grinding is more limited but
the protocol is more predictable which is an undesirable property
(that we ignore in this work). As far as grinding is concerned ùëê = 1
corresponds to the worst-case scenario.

The grinding works as follows: whenever the adversary is elected
leader, it can decide to publish its block or skip the round, thus
biasing the randomness. Furthermore, in the PLE case (where the
adversary can potentially produce more than one block per round),
the adversary could decide which of its blocks to use, if it was
elected more than once, or simply skip this round. By trying out
different combinations of blocks or skipping rounds, the adversary

6

(a) ùõº = 0.49.

(b) ùõº = 0.33.

(c) ùõº = 0.25.

(d) ùõº = 0.1.

Figure 2: ùúñ‚àípersistence parameter for an adversary with power ùõº (logarithmic scale).

may find a particular chain where it is luckier and create a longer
chain.

5.1.2 Branching Random Walks. Similarly to Bagaria et al. [3], we
use the theory of branching random walks to study the problem
of grinding. The rest of the assumptions (e.g., about synchronicity)
are as presented in Section 3.

We consider the following branching random walk that we note
BRW. We first define it using standard branching process vocabu-
lary, before explaining how it relates to grinding and blockchains.
As before, time is divided into discrete time steps. An initial an-
cestor is located at the origin. At each time step a particle gives
birth to a random number of children before dying. Each child is
randomly scattered through N. In the next time-step, each child will
give birth to their own children before dying. The process repeats
indefinitely. Each particle is independent of the others and verifies
the following properties:

(1) Each particle has at least one child. The first child is located

at the same position as its parent.

(2) ùë£ denotes the position of a particle. The other children of the

particle, if they exist, are located at position ùë£ + 1.

(3) The number of children located at position ùë£ + 1 follows a

distribution noted Z.

Such a process is illustrated in Figure 3. We will consider two dif-
ferent distributions for ùëç . In the first case, ùëç will follow a Bernoulli
distribution of parameter ùõº. There is exactly one particle at height
ùë£ + 1 with probability ùõº (and 0 otherwise). In this case, each particle
will have one child with probability 1 ‚àí ùõº and two children (one at
position ùë£ and one at position ùë£ + 1) with probability ùõº. We denote
by BRW1 the associated branching random walk.

In the second case, ùëç follows a Poisson distribution of parameter
ùõº. There will be ùëñ particle in position ùë£ + 1 with probability ùëí‚àíùõº ùõºùëñ
.
ùëñ!
In this case, each particle has one child with probability ùëí‚àíùõº and

7

a total of ùëñ > 1 children with probability ùëí‚àíùõº ùõºùëñ‚àí1
(ùëñ‚àí1)!
BRW2 this branching random walk.

. We denote by

Intuitively, a particle having exactly one child corresponds to
the case where the adversary is not elected leader hence its chain
does not increase by one and the child particle stays at the same
position as its parent. This happens with probability 1 ‚àí ùõº in the
SSLE case and ùëí‚àíùõº in the PLE case. A particle having more than
one child corresponds to the case where the adversary was elected
leader in that round, in which case its private chain increases by
one and, analogously, the position of the other children increases
by one.

In the case where the adversary has ùëö > 1 of its miners elected
leader, then all of them will create a new block with a new ran-
dom value and thus a new potential chain. Each particle therefore
corresponds to a new chain that will grow independently of the
other from then on. The maximum position for BRW at time ùëõ
corresponds to the longest chain that the adversary has been able
to create by grinding. We are interested in comparing this value
with the length of the honest chain.

Honest players do not form a coalition and are not grinding,
hence their chain evolves as a random walk that increases by one
with probability ùõø+ and stays unchanged with probability ùõø0 =
1 ‚àí ùõø+. In the SSLE case, we have ùõøùëÜùëÜùêøùê∏
= 1 ‚àí ùõº and in the PLE
+
= 1‚àíùëíùõº‚àí1. Let ùëÄùëñ denote the maximum position of the generic
ùõøùëÉùêøùê∏
+

Figure 3: Example of a branching random walk. There may
exist more than one particle at each position.

branching random walk BRW described above at time ùëñ ‚àà N. When
ùëç is specified to be a Bernoulli distribution of parameter ùõº we will
write this process ùëÄùëÜùëÜùêøùê∏ (ùõº) and when ùëç is a Poisson distribution
of parameter ùõº, we will write the corresponding stochastic process
ùëÄùëÉùêøùê∏ (ùõº). Similarly, we denote by ùëÜùëñ the position of the generic
honest random walk at time ùëñ and will specify ùëÜùëÜùëÜùêøùê∏
(ùõº)
when needed.

(ùõº) or ùëÜùëÉùêøùê∏

ùëñ

ùëñ

The SSLE and PLE grinding games are then defined as follows.
Definition 5.1 ((ùõº, ùêø)-SSLE Grinding Game). For ùëÄùëÜùëÜùêøùê∏ (ùõº) and
ùëÜùëÜùëÜùêøùê∏ (ùõº) as defined above, we say that the adversary wins the SSLE
grinding game of length ùêø and power ùõº if at timestep ùêø, ùëÄùëÜùëÜùêøùê∏
(ùõº) ‚â•
ùëÜùëÜùëÜùêøùê∏
ùêø

(ùõº).

ùêø

Definition 5.2 ((ùõº, ùêø)-PLE Grinding Game). For ùëÄùëÉùêøùê∏ (ùõº) and
ùëÜùëÉùêøùê∏ (ùõº) as defined above, we say that the adversary wins the PLE

8

grinding game of length ùêø and power ùõº if at timestep ùêø, ùëÄùëÉùêøùê∏
ùëÜùëÉùêøùê∏
ùêø

(ùõº).

ùêø

(ùõº) ‚â•

As before, we will sometimes refer to simply the grinding game

when talking about the generic processes ùëÄ and ùëÜ.

We are interested in comparing the persistence parameter for
SSLE compared to PLE and, hence, comparing the probabilities of
winning the SSLE grinding game and the PLE grinding game.

Additionally, we are interested in the security threshold of the
two grinding games. In the non-grinding case, we already know that
the protocol is secure against private attacks if and only if ùõº < 0.5
for obvious reasons (i.e., the ùúñ‚àípersistence parameter exists and is
finite for every ùúñ ‚àà (0, 1) and ùõº < 0.5). With the grinding attack,
an adversary may win an unfair advantage in the private attack
and take over the honest chain of any length even with less than
half of the stake. For the PLE case, Bagaria et al. [3] proved that the
protocol is secure in the case of grinding if and only if ùõº < 1/(1 +ùëí)
for a network delay Œî = 0. In the next section, we first derive the
security threshold, i.e., the biggest value ùõº0 such that there exists a
finite ùúñ‚àípersistence parameter for every ùúñ ‚àà (0, 1). We then look at
the probabilities of winning the game of length ùëõ for an adversary
with power less than ùõº0 and again, compare the two cases.

Before moving on to the analysis, we make one important remark
in the SSLE case with grinding. Since the randomness on the honest
and adversarial chains are now different, the leader elections on
each of these chains become independent. This is unlike the non-
grinding case, where we had ‚Ñéùëõ = 1 ‚àí ùëéùëõ. The SSLE thus does not
act like an SSLE anymore. There could be more than one winner per
round, each on a different chain, or no block created at all in some
rounds (e.g., if in the adversarial chain the leader elected is honest
and in the honest chain the leader elected is adversarial). The SSLE
thus acts more like a probabilistic leader election where one leader
is elected with probability ùõº at each round on each adversarial
chain, and one leader is elected with probability 1 ‚àí ùõº on the honest
chain. Unlike with the PLE private game, however, there can be at
most one leader elected per round on each chain.

5.2 Analysis
Security Threshold. We start by defining the security thresh-
5.2.1
old of the grinding game. Intuitively, the security threshold captures
the threshold for which the protocol is secure after a certain length.
In other words, the probability of winning the game can be made
as small as desired by choosing a long enough length.

Definition 5.3 (Security threshold). If there exists ùõº0 ‚àà (0, 1)
such that for every ùõº > ùõº0, ùëÄùëñ (ùõº) > ùëÜùëñ (ùõº) asymptotically a.s. and
for ùõº < ùõº0, ùëÜùëñ (ùõº) > ùëÄùëñ (ùõº) asymptotically a.s., we call such ùõº0 the
security threshold of the grinding game.

We note that the above definition does not say anything about the
behaviour of the game with power exactly ùõº0. In order to compute
the security threshold in both cases, we use results from Biggins [6,
Section 6] that we adapt to our discrete time model. Specifically,
Biggins considers a continuous model where particles are scattered
through R and particles are of different types, whereas we only
have one type of particle that is scattered through N. Additionally,
he considers the minimum position of the branching random walk
rather than the maximum. With this mind, we can directly derive

Particle Position012345Time steps02468the following result:

‚Üí ‚àíùõæ a.s. where ùõæ is defined as below:

ùëÄùëõ
ùëõ

lim
ùëõ‚Üí‚àû
ùúô (ùúÉ ) := E[1 + ùëíùúÉ ùëç ]
ùúá (ùëé) := inf {ùëíùúÉùëéùúô (ùúÉ ) : ùúÉ ‚â• 0}
ùõæ := inf {ùëé : ùúá (ùëé) ‚â• 1}

Similarly following the law of large numbers (applied to the
ùëÜùëõ
Binomial distribution), we have limùëõ‚Üí‚àû
ùëõ ‚Üí ùõø+ a.s. Hence,
we conclude that ùëÄùëõ > ùëÜùëõ a.s. asymptotically if ‚àíùõæ > ùõø+ and
ùëÄùëõ < ùëÜùëõ a.s. asymptotically if ‚àíùõæ < ùõø+. As a consequence, the
security threshold corresponds to the case ‚àíùõæ = ùõø+. Based on this
observation, we prove the following theorem.

Theorem 5.4. The security threshold of the SSLE, resp. PLE, grind-

ing games are: ùõºùëÜùëÜùêøùê∏ ‚âÉ 0.36 and ùõºùëÉùêøùê∏ ‚âÉ 0.265.

Proof. In order to prove the theorem, we compute the value of

ùõæ. We start by computing ùúô.

ùúô = E[1 + ùëíùúÉ ùëç ]
= 1 + ùëíùúÉ ùõº

We first note that this expression is independent of whether the
number of blocks (or children at position 1) follows a Bernoulli
or Poisson distribution since they both have the same expecta-
tion. This is in itself an interesting observation since it means that,
asymptotically, both processes ùëÄùëÜùëÜùêøùê∏
behave similarly
(although this is not the case for ùëÜùëÜùëÜùêøùê∏
).

ùëñ
We now move on to compute ùúá and ùõæ, which will be equal for

and ùëÄùëÉùêøùê∏
ùëñ
and ùëÜùëÉùêøùê∏
ùëñ

ùëñ

both branching random walks since they only depend on ùúô.

First, we compute ùúá (ùëé) = inf {ùëíùúÉùëéùúô (ùúÉ ) : ùúÉ ‚â• 0}. We have
ùëíùúÉùëéùúô (ùúÉ ) = ùëíùúÉùëé (1 + ùëíùúÉ ùõº), hence, ùúá (ùëé) = 1 + ùõº for ùëé ‚â• 0, ùúá (ùëé) = 0
for ùëé ‚â§ ‚àí1, so it remains to compute ùúá (ùëé) for ‚àí1 < ùëé < 0. We
ùúïùúÉ (ùëíùúÉùëéùúô (ùúÉ )) = ùëíùúÉùëé (ùëé + ùõº (ùëé + 1)ùëíùúÉ ) ‚â• 0 ‚áî ùúÉ ‚â• ln(‚àí ùëé
have ùúï
ùõº (ùëé+1) ).
Hence ùúÉ ‚Ü¶‚Üí ùëíùúÉùëéùúô (ùúÉ ) is decreasing up until ùúÉ0 = ln(‚àí ùëé
ùõº (ùëé+1) ) and
increasing after this. We therefore have that for ‚àí1 < ùëé < 0,
ùúá (ùëé) = ùëíùúÉ0ùëéùúô (ùúÉ0) = ( ‚àíùëé

.

ùõº (ùëé+1) )ùëé 1
ùëé+1
1 + ùõº,
(cid:16) ‚àíùëé
ùõº (ùëé+1)
0,

(cid:17)ùëé

1
ùëé+1

Ô£±Ô£¥Ô£¥Ô£¥Ô£≤
Ô£¥Ô£¥Ô£¥
Ô£≥

ùúá (ùëé) =

,

for ùëé ‚â• 0
for ‚àí 1 < ùëé < 0
for ùëé < ‚àí1

for ‚àí1 < ùëé < 0. We have ùúï

ùúïùëé ùúÅ ‚â• 0 ‚áî ùëé ‚â§ ‚àí ùõº
ùõº+1

Next we compute ùõæ = inf {ùëé : ùúá (ùëé) ‚â• 1}. We denote ùúÅ (ùëé) =
( ‚àíùëé
ùõº (ùëé+1) )ùëé 1
ùëé+1
and ùúï
. Hence ùúÅ is first increasing then decreas-
ing. Furthermore, we have that limùëé‚Üí0 ùúÅ (ùëé) = 1 and limùëé‚Üí‚àí1 ùúÅ (ùëé) =
ùõº hence ùúÅ reaches one exactly once and ùõæ is the unique solution
to ùúÅ (ùëé) = 1 for ‚àí1 < ùëé < 0. We thus know that gamma solves the
following equation:

ùõº (ùëé+1) )ùëé log( ‚àíùëé

ùëé+1 ( ‚àíùëé

ùúïùëé ùúÅ = 1

ùõº (ùëé+1) )

(cid:19)ùõæ

(cid:18)

‚àíùõæ
ùõº (ùõæ + 1)

1
ùõæ + 1

= 1

In the SSLE case, the threshold corresponds to the case where
‚àíùõæ = 1 ‚àí ùõºùëÜùëÜùêøùê∏ and, in the PLE case, the threshold corresponds

9

to the case ‚àíùõæ = 1 ‚àí ùëíùõº ùëÉùêøùê∏ ‚àí1. Hence ùõºùëÜùëÜùêøùê∏ satisfies the following
equation:

(cid:18) 1 ‚àí ùõºùëÜùëÜùêøùê∏
(ùõºùëÜùëÜùêøùê∏ )2

(cid:19)ùõºùëÜùëÜùêøùê∏ ‚àí1

= ùõºùëÜùëÜùêøùê∏

The solution can be computed numerically giving ùõºùëÜùëÜùêøùê∏ ‚âÉ

0.360.

ùõºùëÉùêøùê∏ on the other hand, satisfies the following equation:

(cid:32)

1 ‚àí ùëíùõº ùëÉùêøùê∏ ‚àí1
ùõºùëíùõº ùëÉùêøùê∏ ‚àí1

(cid:33)ùëíùõºùëÉùêøùê∏

‚àí1‚àí1

= ùëíùõº ùëÉùêøùê∏ ‚àí1

which can be solved numerically giving ùõºùëÉùêøùê∏ ‚âÉ 0.265.

‚ñ°

The above theorem shows that SSLE significantly increases the
security threshold in the grinding private attack. We also remark
that the threshold found in the PLE case is similar to the one found
by Bagaria et al. [3] (1/(1 + ùëí)), although there is a slight difference
between the models. The reference considers a continuous-time
model (i.e., the slot duration ùõø is very small) and a delay of propa-
gation of zero. This means that, for example, if two honest leaders
were to find a block at ùõø milliseconds of interval, where ùõø is very
small, then these two blocks will be added to the honest chain even
though in practice they were found at the same time. In our model,
we consider a discrete time model and a synchronous network with
a strictly positive delay, and so two blocks found in the same round
cannot be added to the same chain.

5.2.2 Persistence parameter. In the previous section, we computed
the security threshold of the SSLE and PLE grinding games. We
therefore know that, for an adversary below that power, we can find
a length ùêø such that the probability of winning the grinding game
of parameter (ùõº, ùêø) is as small as desired. However, our analysis
was only asymptotic and did not give any information about the
persistence parameter or the behaviour of the game for a shorter
time period. In this section, we study the probability of winning
the SSLE and PLE grinding games of length ùëõ in order to give an
estimate of the ùúñ‚àípersistence parameter.

We are interested in the variable (ùê∑ùëñ = ùëÄùëñ ‚àíùëÜùëñ )ùëñ ‚ààN and especially
the event ùëÄùëñ ‚àí ùëÜùëñ ‚â• 0 that corresponds to the adversarial chain
being longer or equal than the honest chain and hence the adversary
winning the grinding game.

We denote ùëéùëñ,ùëó = ùëÉ (ùëÄùëñ < ùëó). Since, by definition, ùëÄ0 = 0, we
have ùëé0,ùëó = 1 for ùëó > 0. We now define the following recursive
formula for ùëéùëñ,ùëó :

ùëéùëñ,ùëó =

‚àû
‚àëÔ∏Å

ùëö=0

ùëÉ (ùëç = ùëö) Pr[ùëÄùëñ < ùëó |ùëç = ùëö]

= ùëéùëñ‚àí1,ùëó

‚àû
‚àëÔ∏Å

ùëö=0

ùëÉ (ùëç = ùëö) (ùëéùëñ‚àí1,ùëó ‚àí1)ùëö

This equality is explained as follows. We start at time 0. We de-
note ùëö the number of children at position 1 of the initial particle
(i.e., the total number of children is ùëö + 1). The first child stays at
position 0, whereas the other ùëö children will increase position by
one. All of the children generate independent processes similar to
their ancestor, except starting at (ùëñ + 1, 0) for the first child, and
(ùëñ + 1, 1) for the other ùëö children. The process ùëÄ will not reach

(a) ùõº = 0.3

(b) ùõº = 0.2

Figure 4: Probability that the adversarial chain is greater or equal than the honest chain when grinding for a chain of length ùëõ

(c) ùõº = 0.1

ùëó at step ùëñ if and only if none of the processes engendered by the
children of the original particle reach ùëó. Since all the processes are
independent, the probability that the process engendered by the
first child never reaches ùëó is ùëéùëñ‚àí1,ùëó . For the rest of the ùëö children,
this probability is ùëéùëñ‚àí1,ùëó‚àí1. Conditional on the particle having ùëö + 1
children, the probability that ùëÄ does not reaches ùëó by time ùëñ is equal
to ùëéùëñ‚àí1,ùëó (ùëéùëñ‚àí1,ùëó‚àí1)ùëö.

Adapting the above probabilities to the SSLE grinding game

yields the following:

ùëéùëÜùëÜùêøùê∏
ùëñ,ùëó

= ùëéùëÜùëÜùêøùê∏

ùëñ‚àí1,ùëó (1 ‚àí ùõº + ùõºùëéùëÜùëÜùêøùê∏

ùëñ‚àí1,ùëó‚àí1)

Whereas in the PLE game, it becomes:

ùëñ‚àí1,ùëó ùëíùõº (ùëéùëÉùêøùê∏
We note we have found a recursive formula for ùëéùëñ,ùëó that depends

ùëñ,ùëó = ùëéùëÉùêøùê∏
ùëéùëÉùêøùê∏

ùëñ‚àí1,ùëó ‚àí1‚àí1)

on (ùëéùëñ‚àí1,ùëó‚àí1, ùëéùëñ‚àí1,ùëó ).

Next, we are interested in ùëèùëñ = Pr[ùëÄùëñ ‚àí ùëÜùëñ ‚â• 0]. We have:

ùëèùëñ = Pr[ùëÄùëñ ‚àí ùëÜùëñ ‚â• 0]

=

=

=

ùëñ
‚àëÔ∏Å

ùë†=0
ùëñ
‚àëÔ∏Å

ùë†=0
ùëñ
‚àëÔ∏Å

ùë†=0

Pr[ùëÜùëñ = ùë†] √ó Pr[ùëÄùëñ ‚â• ùë†]

Pr[ùëÜùëñ = ùë†] √ó (1 ‚àí ùëéùëñ,ùë† )

Bin(ùõø+, ùëñ, ùë†) √ó (1 ‚àí ùëéùëñ,ùë† )

We plot this probability for different values of ùõº and ùëõ in Figure 4.
Here, we quickly remark that this probability does not allow us to
find the exact ùúñ‚àípersistence parameter as it is not the probability
that the adversary violates the persistence of the blockchain for
any length greater than ùëõ but the probability that the adversary
wins the game of length exactly ùëõ. In theory, the probability that

10

(a) PLE with and without grinding: ùõº = 0.1.

(b) PLE with and without grinding: ùõº = 0.2.

(c) PLE with and without grinding: ùõº = 0.3.

(d) SSLE: ùõº = 0.1.

(e) SSLE:ùõº = 0.2.

(f) SSLE: ùõº = 0.3.

Figure 5: Probability of winning the simple or grinding private games of length exactly ùëõ for different values of ùõº (logarithmic
scale). ‚ÄúInd‚Äù corresponds to the Independent SSLE private game.
11

the adversary wins the game for any ùëõ ‚â• ùëõ0 is slightly bigger than
the probability we computed as there is always a small chance that
an adversary that did not win at length ùëõ could catch up in the
future. In the grinding case, this probability is much more complex
to compute than in the previous section. However, the probability
that the adversary wins the grinding game of length exactly ùëõ0
still provides an interesting proxy measure for the security of the
underlying protocol.

Results Interpretation. In Figure 4 we see that SSLE performs
consistently better than PLE in the sense that the probability of
winning the grinding game is smaller for SSLE than for PLE. We
also notice, as before, that for ùëõ big enough, this probability can be
approximated as ùëí‚àíùëéùëõ. Using the same method as before, we can
find that SSLE reduces the persistence parameter by roughly 70% in
the case of a 10% adversary and 80% for a 20% adversary. In this case,
the improvement is even more drastic than in the private game.
Unlike the private game, however, the reduction is more noticeable
for a 20% than for a 10% adversary.

It is also interesting to compare the probabilities of winning
the private game vs winning the grinding game. We plot these
probabilities in Figure 5. In the simple (i.e., non-grinding) case, we
compute the probability that the gap is positive instead of using the
probability in Section 4, as this matches the probability we have
computed in the grinding case. Intuitively, grinding should increase
the probability of winning the game of length ùëõ, which is what we
observe for PLE in Figure 5a, 5b and 5c. However, in the SSLE case,
we observe the opposite for a 10 and 20% adversary. As we have
discussed before, in the case of grinding, the SSLE game does not
act anymore as a single secret leader election since the adversarial
and honest chains are now independent as they operate on different
random beacons. The SSLE grinding game is thus more similar to
the PLE private game than to the SSLE private game, except that
the probabilities ùëùùëé and ùëù‚Ñé should be adapted accordingly. We now
define the following game:

Definition 5.5 ((ùêø, ùõº)-idependent SSLE Private Game). The inde-
pendent SSLE private game with parameters (ùêø, ùõº) is defined as
follows: at each round ùëõ ‚àà [1, . . . , ùêø] a number ùëéùëõ of adversarial
leaders is selected from a Bernoulli distribution of parameter ùõº and
a number ‚Ñéùëõ of honest leaders is selected from an independent
Bernoulli distribution of parameter 1 ‚àíùõº. We say that the adversary
wins the PLE private game of length ùêø and power ùõº if the number
of rounds with non-zero adversarial leaders is greater or equal than
the number of rounds with non-zero honest leaders, i.e.:

|{ùëõ ‚àà [1, . . . , ùêø] : ùëéùëõ = 1}| ‚â• |{ùëõ ‚àà [1, . . . , ùêø] : ‚Ñéùëõ = 1}|.

This game is equivalent to a PLE private game, except that we
now have ùëùùëé = Pr[ùëéùëõ > 0] √ó Pr[‚Ñéùëõ = 0] = ùõº 2 and similarly
ùëù‚Ñé = (1 ‚àí ùõº)2 and ùëù0 = 2ùõº (1 ‚àí ùõº). We plot the probabilities of
winning the independent SSLE private game and compare them to
the SSLE grinding game in Figure 5d, 5e and 5f. We indeed notice
that the independent SSLE game performs much better than the
grinding game but, surprisingly, also better than the SSLE game. The
difference between the independent SSLE and SSLE private games
can be explained by the fact that the adversary in the independent
game is much less likely to be elected sole leader (ùõº 2 vs ùõº) and,
hence, the gap in this case increases less often. The difference

between the independent SSLE and PLE is also explained similarly:
the probability of the gap increase goes from ùëí1‚àíùõº ‚àíùëí‚àí1 to (1 ‚àí ùõº)2.
Although the persistence parameter is smaller in this case, it is also
expected that there will be rounds with no winner as well as more
natural forks (unlike in the SSLE case).

6 CONCLUSION AND FUTURE WORK
In this work, we have performed a comparison of private attacks
against longest-chain PoS protocols that use SSLE and PLE. We
have found that the persistence parameter under this specific attack
is reduced significantly when using SSLE, by around 25% against
a 25 or 33% adversary. We also found that the security threshold
against grinding private attacks is higher (‚âÉ 0.36) in the SSLE
case than in the PLE case (‚âÉ 0.26). These results are encouraging
and should help convince real-world system designers to make the
switch to SSLE in their PoS blockchains. For future work, it will
be interesting to compare the results based on other attacks (e.g.,
balance attack [3] or general case), as well as to relax assumptions
such as the synchronous network or static adversary.

ACKNOWLEDGMENTS
The authors would like to thank Jorge Soares for his valuable feed-
back on this paper. D.C. was supported by the MIUR grant ‚ÄòDiparti-
menti di Eccellenza 2018-2022‚Äô (E11G18000350001).

REFERENCES
[1] Lecture2: Random walks, reflection and reversal. http://cgm.cs.mcgill.ca/~breed/

MATH671/lecture2corrected.pdf.

[2] Sarah Azouvi, Patrick McCorry, and Sarah Meiklejohn. Winning the cau-
cus race: Continuous leader election via public randomness. arXiv preprint
arXiv:1801.07965, 2018.

[3] Vivek Bagaria, Amir Dembo, Sreeram Kannan, Sewoong Oh, David Tse, Pramod
Viswanath, Xuechao Wang, and Ofer Zeitouni. Proof-of-stake longest chain
protocols: Security vs predictability. arXiv preprint arXiv:1910.02218, 2019.
[4] Amos Beimel, Eran Omri, and Ilan Orlov. Protocols for multiparty coin toss with
dishonest majority. In Annual Cryptology Conference, pages 538‚Äì557. Springer,
2010.

[5] Michael Ben-Or and Nathan Linial. Collective coin flipping, robust voting
schemes and minima of banzhaf values. In 26th Annual Symposium on Foundations
of Computer Science (sfcs 1985), pages 408‚Äì416. IEEE, 1985.

[6] JD Biggins. The first-and last-birth problems for a multitype age-dependent
branching process. Advances in Applied Probability, pages 446‚Äì459, 1976.
[7] Erica Blum, Aggelos Kiayias, Cristopher Moore, Saad Quader, and Alexander
Russell. The combinatorics of the longest-chain rule: Linear consistency for
proof-of-stake blockchains. In Proceedings of the Fourteenth Annual ACM-SIAM
Symposium on Discrete Algorithms, pages 1135‚Äì1154. SIAM, 2020.

[8] Dan Boneh, Saba Eskandarian, Lucjan Hanzlik, and Nicola Greco. Single secret
leader election. In Proceedings of the 2nd ACM Conference on Advances in Financial
Technologies, pages 12‚Äì24, 2020.

[9] Ignacio Cascudo and Bernardo David. Scrape: Scalable randomness attested by
public entities. In International Conference on Applied Cryptography and Network
Security, pages 537‚Äì556. Springer, 2017.

[10] Dario Catalano, Dario Fiore, and Emanuele Giunta. Efficient and universally

composable single secret leader election from pairings.

[11] Phil Daian, Rafael Pass, and Elaine Shi. Snow white: Robustly reconfigurable
consensus and applications to provably secure proof of stake. In International
Conference on Financial Cryptography and Data Security, pages 23‚Äì41. Springer,
2019.

[12] Bernardo David, Peter Ga≈æi, Aggelos Kiayias, and Alexander Russell. Ouroboros
praos: An adaptively-secure, semi-synchronous proof-of-stake blockchain. In
Annual International Conference on the Theory and Applications of Cryptographic
Techniques, pages 66‚Äì98. Springer, 2018.

[13] Soubhik Deb, Sreeram Kannan, and David Tse. Posat: Proof-of-work availability
andunpredictability, without the work. arXiv preprint arXiv:2010.08154, 2020.
[14] Amir Dembo, Sreeram Kannan, Ertem Nusret Tas, David Tse, Pramod Viswanath,
Xuechao Wang, and Ofer Zeitouni. Everything is a race and nakamoto always

12

In Proceedings of the 2020 ACM SIGSAC Conference on Computer and

wins.
Communications Security, pages 859‚Äì878, 2020.

[15] Peter Ga≈æi, Aggelos Kiayias, and Alexander Russell. Tight consistency bounds
for bitcoin. Cryptology ePrint Archive, Report 2020/661, 2020. https://eprint.iacr.
org/2020/661.

[16] Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, and Nickolai Zeldovich.
Algorand: Scaling byzantine agreements for cryptocurrencies. In Proceedings of
the 26th Symposium on Operating Systems Principles, pages 51‚Äì68, 2017.
[17] Aggelos Kiayias, Saad Quader, and Alexander Russell. Consistency of proof-
arXiv preprint

of-stake blockchains with concurrent honest slot leaders.
arXiv:2001.06403, 2020.

[18] Aggelos Kiayias, Alexander Russell, Bernardo David, and Roman Oliynykov.
Ouroboros: A provably secure proof-of-stake blockchain protocol. In Annual
International Cryptology Conference, pages 357‚Äì388. Springer, 2017.

[19] Jing Li, Dongning Guo, and Ling Ren. Close latency-security trade-off for the

nakamoto consensus. CoRR, abs/2011.14051, 2020.

[20] Silvio Micali, Michael Rabin, and Salil Vadhan. Verifiable random functions. In
40th annual symposium on foundations of computer science (cat. No. 99CB37039),
pages 120‚Äì130. IEEE, 1999.

[21] Ewa Syta, Philipp Jovanovic, Eleftherios Kokoris Kogias, Nicolas Gailly, Linus
Gasser, Ismail Khoffi, Michael J Fischer, and Bryan Ford. Scalable bias-resistant
distributed randomness. In 2017 IEEE Symposium on Security and Privacy (SP),
pages 444‚Äì460. Ieee, 2017.

13

