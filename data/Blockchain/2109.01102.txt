1
2
0
2

p
e
S
2

]

R
C
.
s
c
[

1
v
2
0
1
1
0
.
9
0
1
2
:
v
i
X
r
a

DAG-Oriented Protocols PHANTOM and
GHOSTDAG under Incentive Attack via Transaction
Selection Strategy

Martin Pereˇs´ıni∗, Federico Matteo Benˇci´c†, Kamil Malinka∗ and Ivan Homoliak∗
iperesini@ﬁt.vutbr.cz, federico-matteo.bencic@fer.hr, malinka@ﬁt.vut.cz, ihomoliak@ﬁt.vutbr.cz
∗Brno University of Technology, Faculty of Information Technology
†University of Zagreb, Faculty of Electrical Engineering and Computing

Abstract—In response to the bottleneck of processing through-
put inherent to single chain PoW blockchains, several pro-
posals have substituted a single chain for Directed Acyclic
Graphs (DAGs). In this work, we investigate two notable DAG-
oriented designs. We focus on PHANTOM (and its optimization
GHOSTDAG), which proposes a custom transaction selection
strategy that enables to increase the throughput of the network.
However, the related work lacks a thorough investigation of
corner cases that deviate from the protocol in terms of transaction
selection strategy. Therefore, we build a custom simulator that
extends open source simulation tools to support multiple chains
and enables us to investigate such corner cases. Our experiments
show that malicious actors who diverge from the proposed
transaction selection strategy make more proﬁt as compared to
honest miners. Moreover, they have a detrimental effect on the
processing throughput of the PHANTOM (and GHOSTDAG) due
to same transactions being included in more than one block
of different chains. Finally, we show that multiple miners not
following the transaction selection strategy are incentivized to
create a shared mining pool instead of mining independently,
which has a negative impact on decentralization.

I.

INTRODUCTION

Blockchains have become popular due to several interesting
properties they offer, such as decentralization, immutability,
availability, and transparency. Thanks to these properties,
blockchains have been adopted in various ﬁelds, such as ﬁ-
nance, supply chains, identity management, Internet of Things
(IoT), record management systems, etc.

Nonetheless, blockchains inherently suffer from the pro-
cessing throughput bottleneck, as consensus must be reached
for each block within the chain. One approach to solving this
problem is to increase the rate at which blocks are created.
However, this approach has its drawbacks. If blocks are not
propagated through the network before a new block (or blocks)
is created, a soft fork can occur, where two blocks reference
the same parent block. A soft fork resolves itself, and thus only
one block is eventually accepted as valid. All other blocks and
transactions they contain are discarded (i.e., orphaned). As
a result, consensus nodes that created orphaned blocks waste
their resources and do not get rewarded for their efforts. This is

© 2021 IEEE. Personal use of this material is permitted. Permission
from IEEE must be obtained for all other uses, in any current or future media,
including reprinting/republishing this material for advertising or promotional
purposes, creating new collective works, for resale or redistribution to servers
or lists, or reuse of any copyrighted component of this work in other works.

Fig. 1: A DAG-oriented blockchain.

problematic because it may discourage consensus nodes from
participating in the consensus protocol.

As a response to the above issue, several proposals [1], [2]
have substituted a single chaining data structure for Directed
Acyclic Graphs (DAGs), as displayed in Fig. 1. Such a
structure can maintain multiple interconnected chains and thus
increase processing throughput. The assumption of some DAG-
oriented solutions is to abandon transaction selection based on
the highest fee, since this approach increases the probability
that the same transaction is included in more than one block
(hereafter transaction collision). Instead, these solutions use
a random transaction selection strategy to avoid transaction
collisions.

However, no one has yet analyzed the performance and
robustness of DAG-oriented approaches within an empirical
study assuming real-world conditions and adversarial setting.
In this work, we focus on the impact of malicious actors
in blockchain networks deploying DAG-oriented designs. In
particular, we study the situation where an attacker (or attack-
ers) deviate from the protocol by not following the random
transaction selection strategy that is assumed by a few DAG-
oriented approaches (i.e., [1], [2]). We conjecture that it might
have two major consequences. First, such an attacker can earn
greater rewards compared to honest participants. Second, such
an attacker has a detrimental effect on transaction throughput,
as transaction collision is increased. We verify our hypothesis
using an open-source simulation tool Bitcoin mining simula-
tor [3], modiﬁed to our needs. We focus on a case study of a
selected DAG-oriented solution called PHANTOM [4].

Contributions. The contributions of this work are as follows:

1) We analyze DAG-oriented protocols, namely PHAN-
TOM [4], GHOSTDAG [4], and select them as the subject
of our research due to their practical features.

2) We show that a malicious actor who selects transactions
based on the highest fee in PHANTOM and GHOSTDAG

B1B2B3B5B4B7B6B8B9B10B11B12B14B13B15B16 
 
 
 
 
 
Fig. 2: The longest-chain rule with orphaned blocks (purple) graph-
ically displayed in Nakamoto consensus.

has a signiﬁcant advantage in making proﬁts compared to
honest participants who select transactions randomly.
3) We show that multiple such malicious actors signiﬁcantly
decrease transaction throughput by increasing the trans-
action collision rate.

4) We show that if the block creation rate is increased while
there are malicious actors present in the network, the
transaction collision rate increases signiﬁcantly.
5) We show that malicious actors have a signiﬁcant

in-
centive to join a mining pool, which as a consequence
degrades the decentralization property of the blockchain
with PHANTOM or GHOSTDAG protocol employed.

II. BACKGROUND

We establish preliminary terms and deﬁnitions that will be

used throughout this work.

Blockchain. The blockchain is a tamper-resistant data struc-
ture in which data records (i.e., blocks) are linked using a
cryptographic hash function, and each new block must be
agreed upon by participants (a.k.a., miners or consensus nodes)
running a consensus protocol.

Nakamoto Consensus. In the Nakamoto consensus [5], blocks
contain the ﬁnite set of transactions, and each block contains
the hash of the previous block, which ensures the immutability
of the history. Nakamoto consensus uses a single chain to
link the blocks, while Proof of Work (PoW) algorithm is
used to establish consensus, which is a mathematical puzzle
of cryptographic zero-knowledge hash proof, where one party
proves to others that it has spent a certain computational effort,
and thus is entitled to be a leader of the round who produces
a block. This effort represents ﬁnding a value below a certain
threshold (i.e., determined by the difﬁculty parameter), which
is computationally intensive. On the other hand, checking the
correctness of the puzzle requires negligible computational
effort. The order of blocks1 in Bitcoin (BTC) was originally
determined using the longest chain rule (see Fig. 2). However,
this rule was later replaced in favour of the strongest chain
rule (see Fig. 3), which takes into account the accumulated
difﬁculty of the PoW puzzle.

Fees and Rewards. Miners who create new blocks are re-
warded with block rewards. Block rewards refer to new crypto
tokens (e.g., BTC) awarded by the blockchain network. It
is assumed that miners earn proﬁts proportionally to their
consensus power (e.g., mining power). Another source of
crypto-token income for active miners are transaction fees,
which are awarded to the miner who includes the corre-
sponding transaction in a newly mined block. Transaction
fees are paid by clients who deliberately choose the amount
based on the priority of a transaction. To maximize proﬁt,

Fig. 3: The strongest-chain rule with the main chain depicted in green
and orphaned blocks in purple. The hash of the current block is
denoted as HB.

miners use a transaction selection mechanism that prioritizes
the transactions with the highest fees for inclusion in a block.

Mempool. The mempool is a data structure containing trans-
actions that can potentially be included (i.e., mined) in a block
by any consensus node. A new transaction is ‘broadcast’,
i.e., sent from a client to its peers, which in turn forward
the transaction to their peers. This process is repeated until
the transaction has propagated throughout the network. Since
transactions are not immediately published (processed) on the
blockchain, the mempool may vary slightly from node to node
until all transactions have completed their propagation.

Block creation time. In BTC, there is a default block creation
time λ set
to create a new block every 10 minutes (i.e.,
every 600 seconds). This parameter is derived directly from
the network difﬁculty, which changes over time, and it is
adjusted every 2016 blocks to ﬁt target value of 10 minutes
(i.e., approximately every two weeks). According to Gervais
the current stale block rate of BTC is 0.41%.
et al. [6],
Other sources [7], [8] state the values around 0.5 − 1%, which
is considered negligible. We assume that the mathematical
model corresponding to the block creation time of BTC is
an exponentially distributed random variable, where the time
between two consecutive blocks is expressed as

fT(t) = Λe−Λt ,

(1)
λ [9], [10], e is the Euler’s number and t is time

where Λ = 1
in seconds.

III. DAG-ORIENTED SOLUTIONS

Although there are some DAG-oriented designs that do
not address the problem of increasing transaction throughput
(e.g., IoTA [11], Nano [12], Byteball [13]), we focus on
the solutions addressing this problem, such as GHOSTDAG,
PHANTOM [1], and SPECTRE [2].

Since SPECTRE is a theoretical design whose complexity
of recursively establishing consensus on the blocks it contains
is impractical, we focus and describe PHANTOM in the
scope of this paper. Furthermore, the use of PHANTOM is
considered impractical for efﬁcient use [4], because it requires
the solution of a NP-hard problem2, the authors of PHANTOM
have developed a greedy algorithm called GHOSTDAG, which
is more suitable for implementation. We emphasize that our
research results are applicable to GHOSTDAG as well as
PHANTOM. In the context of this work, the Maximum k-
cluster SubDAG problem and block ordering are not crucial,
so they have been abstracted in our simulations for simplicity.

1And consequently transactions.

2Maximum k-cluster SubDAG problem

B1B2B3AB4AB5AB6AB7B3BB4BB5BB8AB6BB8BB9BB9AB10B1B3AB4B6B9BB8BB3BB8AB2A=0x005..B2B=0x0AF..B5B=0x00B..B5A=0x000..B7B=0x031..B7A=0x0079.A. PHANTOM

[4]

The PHANTOM protocol

is a generalization of
Nakamoto’s longest chain protocol. While in Nakamoto con-
sensus, each block contains a hash of one previous block in the
chain it extends, PHANTOM organizes blocks in the manner
of a DAG. As a result, each block may contain multiple hash
references to predecessors. The key idea of PHANTOM is
that it performs a complete ordering of all blocks (and thus
transactions). Unlike the Nakamoto consensus, which discards
blocks that are not on the main chain (i.e., orphan blocks),
PHANTOM includes these blocks in a DAG structure, except
for attacker-created blocks, which would be weakly connected
to the DAG ledger.

One notable difference from the Nakamoto consensus is
that PHANTOM does not explicitly deﬁne a scheme for block
rewards and only considers transaction fees. As mentioned in
Sec. II, miners in blockchain networks such as BTC use a
well-known transaction selection mechanism that maximizes
proﬁt by selecting transactions with the highest fees. In the
context of this paper, we refer to this strategy as the rational
strategy. Instead of the rational transaction selection strategy,
PHANTOM uses a randomized strategy proposed by the au-
thors of inclusive blockchain protocols [14]. In the randomized
strategy, the miners do not take into account the fees of the
transactions and instead select transactions randomly. In this
way, the authors aim to eliminate transaction collision within
parallel blocks of a DAG structure, thus using the parallel
blocks as a means to increase the transaction throughput of
the protocol.

The incentive scheme of the protocol revolves around
rewarding all miners who include a new transaction within a
new block A, while assuming that transactions in the parallel
blocks are unique [14] and due to a DAG-based structure will
not be discarded as in single-chain blockchains.3 In this way,
poorly connected miners who were not fast enough to publish
a new block would still receive rewards. However, such an
incentive scheme must be constructed with care, as sidechain
blocks can also be the result of a malicious attack.

Therefore, the reward a miner receives for publishing A is
indirectly proportional to the delay at which A was referenced
by the main chain. For this reason, the protocol deﬁnes a
measure of the delay in publishing A with respect to the main
chain, called the gap parameter c. The amount by which the
reward is reduced is determined by the discount function γ,
where γ(c(A)) ∈ [0, 1] and γ is weakly decreasing.4 Finally, the
miner is rewarded for the inclusion of transactions in A using
the Payoff Function. Speciﬁcally, the miner gets rewarded for
all transactions that were ﬁrst contained in A and after the
discount function γ was applied to the respective transaction
fees.

Comparison with Nakamoto Consensus. As compared
to Nakamoto consensus, PHANTOM brings the following
changes:

• DAG-oriented design instead of a single chain (enabling

parallel blocks),

• randomized transaction selection strategy.

3I.e., duplicate transactions are not rewarded.
4I.e., later inclusion of the side-chain block imposes lower reward.

Fig. 4: Relationship between orphan block rate (i.e., percentage of
duplicate blocks) and block creation time λ .

• a reduction of the rewards for transactions with regards to
the delay in publishing A with respect to the main chain.

B. GHOSTDAG

The use of PHANTOM is considered impractical for ef-
ﬁcient use [4], because it requires the solution of a NP-hard
problem (Maximum k-cluster SubDAG problem). In response,
the authors of PHANTOM have developed a greedy (heuristic)
algorithm called GHOSTDAG, which is more suitable for
implementation.

IV. PROBLEM DEFINITION

Let

there be a PoW blockchain network that uses the
Nakamoto consensus and consists of honest and malicious
miners, with the malicious miners holding a minority of the
mining power. We refer to honest miners as H, malicious
miners as M, and their adversarial mining power as κ (i.e.,
a fraction of the total mining power). Then, we denote the
network propagation delay in seconds as τ, and the block
creation time in seconds as λ . We assume that the minimum
value of λ is constrained by the network propagation delay of
the blockchain network, denoted as τ.

It is well-known Nakamoto-style blockchains generate stale
blocks (a.k.a., orphan blocks). As a result, a fraction of
the mining power is wasted. The rate at which stale blocks
are generated increases when the block creation time λ is
decreased (see Fig. 4), which is one of the reasons why Bitcoin
maintains a relatively high block creation time of 600 seconds.

Furthermore, let the blockchain utilize the DAG-oriented
solution PHANTOM [15] than enables to signiﬁcantly reduce
λ and thus increase transaction throughput since blocks are
produced more often.

Assumptions for Our Attacks. Alike PHANTOM, we assume
that
incentive scheme does not utilize block rewards but
transaction fees. Then, let us assume that no stale blocks are
the result of a malicious action, and the malicious miners may
only choose a different transaction selection strategy to make

100200300400500600[seconds]051015202530Block duplicity rate [%]Bitcoinmore proﬁt than honest miners. This assumption has two major
consequences:

• First, the protocol can safely use the naive approach where
the miner of the block A gets rewarded for all unique
transactions in A, regardless of the distance of A from the
main chain. In other words, for each block A, the discount
function does not penalize a block according to its gap
parameter c(A), i.e. γ(c(A)) = 1. As a consequence, such
a setting maximizes the proﬁt from transaction fees that
honest miners are expected to make when using a random
transaction selection strategy.

• Second, the existence of malicious miners using other
than random transaction selection strategy (e.g., rational
strategy) increases the transaction collision rate. Conse-
quently, there are fewer unique transactions in each block,
and the transaction throughput is reduced.

Identiﬁed Problems. Neither the authors of PHANTOM and
GHOSTDAG nor related work studied the impact of malicious
miners deviating from the random transaction selection strat-
egy and the effect they might have on the throughput of the
protocol as well as a fair distribution of earned rewards (in
the form of transaction fees). Therefore, we focus on studying
the transaction selection strategy. Since honest nodes in the
PHANTOM protocol select transactions from the mempool
using the random selection strategy, one might wonder what
happens in the case of the attacker who selects transactions
based on the maximum fees (i.e., the rational strategy). Our
transaction selection strategy
hypothesis is that a rational
will decrease the relative proﬁt of honest miners as well as
transaction throughput.

V. SETUP & SIMULATION MODEL

We created a simulation model that enables the execution
of various experiments aimed at investigation of the PHAN-
TOM protocol’s behavior under attacks related to the potential
problems identiﬁed in Sec. IV.

A. Network Topology

Our intention was to create a network topology that is
convenient for the simulation and encompasses some aspects
of the real-world blockchain network. In particular, we were
interested in emulating the network propagation delay to be
similar as in Bitcoin. We assumed that Bitcoin contains around
8500 consensus nodes [16], while each node usually has eight
peers (i.e., a default value in Bitcoin Core). Therefore, the
maximum number of hops that a gossiped message requires
to reach all consensus nodes in the network is ∼ 4.35 (i.e.,
log8(8500)). Moreover, if we were to assume that there are
two to three times more independent blockchain clients who
are not consensus nodes, then this number would be increased
by 1.

Therefore, we utilized the ring network topology with 10
consensus nodes (see Fig. 5), which sets the maximum value
of hops required to propagate a message to 5. In this way, we
could adjust the adversarial mining power with the granularity
of 10%.

Fig. 5: The network topology utilized in our simulations.

B. Simulator

There are many simulators [17] aiming at blockchain proto-
cols, mainly focusing on network delays, different consensus
protocols, behavior of speciﬁc attacks (e.g., SimBlock [18],
Blocksim [19], Bitcoin-Simulator [20] etc.). However, none
of these simulators was sufﬁcient for our purposes due to
missing support for multiple chains and incentive schemes
speciﬁc to assumed DAG protocols. To verify our hypothesis,
we have built a simulator that focuses on the mentioned
problems of DAG protocols. In detail, we started with the
Bitcoin mining simulator [3], which is a discrete event sim-
ulator for the PoW mining process in a single chain, and
it enables simulation of network propagation delay within a
speciﬁed network topology. We extended the Bitcoin mining
simulator to support the simulation of (abstracted) multiple
chains of DAG-based blockchains while monitoring transaction
duplicity, throughput, and relative earned proﬁt with regard
to the used mining power. The simulator is written purely in
C++. The implementation utilizes the Boost library [21] for
better performance and special structures used for simulation,
especially the multi-index mempool [22] structure, which
enables effective management of the mempool in the case of
any transaction selection strategy.5

In addition, we have improved and added more simulation
complexity to simulate each block, including the corresponding
transactions (as opposed to simulating only the number of
transactions in a block [3]), added a custom process that creates
transactions and broadcasts them to the network of miners,
and most
importantly, we have implemented two different
transaction selection strategies – a rational strategy and random
strategy. All important parameters of our simulations and their
ranges are summarized in Tab. I.

VI. EVALUATION

During the evaluation, we executed three experiments that
investigated the relative proﬁt of malicious miners, transaction
collision rate, and throughput under different settings. In all
experiments, honest miners used the random transaction selec-
tion strategy (as proposed in PHANTOM and GHOSTDAG),
while malicious miners used the rational transaction selection

5Rational

transaction strategy requires a mempool with transactions
ordered by fees, while random transaction strategy requires the hash-map data
structure. Therefore, they are hard to utilize at the same time.

0124356789~4 hopsparticipants in PHANTOM are only rewarded for transactions
that were ﬁrst to be included in a new block, the proﬁt for
the second and later miner is lost if a duplicate transaction is
included.

This observation might be seen as beneﬁcial for the pro-
tocol as it disincentivizes multiple miners to use the rational
transaction selection strategy. On the other hand, we will show
later that malicious miners are instead incentivized to create a
malicious mining pool (see Sec. VI-C).

Moreover, to supplement our observations, we performed
another related experiment, in which we used the topology
of one malicious and one honest miner, and we experimented
with different adversarial mining power settings. The results
are depicted in Fig. 7, and they demonstrate that under such
the malicious miner’s relative earned proﬁt (as
a setting,
compared to honest miner) grows proportionally to κ.

B. Experiment II

Goal. The goal of this experiment is to investigate the transac-
tion throughput if the blockchain experiences malicious miners
who select transactions based on a rational selection strategy.

Methodology and Results. Alike in the previous experiment,
the block creation time was kept constant (λ =20). The number
of malicious miners (with 10% of mining power) in the
network was incrementally increased, and for each setting,
the transaction collision rate and transaction throughput were
computed. The results are depicted in Fig. 8 and Fig. 9, which
are complementary. The ﬁgures conﬁrm that the increase in
the number of malicious miners also increases the transac-
tion collision rate, which consequently decreases the overall
throughput of the network.

C. Experiment III

Goal. The goal of this experiment is to investigate the value
of transaction collision rate under different λ and malicious
miners present in the network.

Fig. 6: The average proﬁt per honest and malicious miner based
on the number of malicious miners (equipped with 10% of mining
power). The baseline shows the expected average proﬁt of an honest
miner with 10% of the mining power.

strategy. Unless stated otherwise, each miner held 10% of the
mining power.

A. Experiment I

Goal. The goal of this experiment is to investigate relative
earned proﬁts of malicious miners following rational transac-
tion selection strategy in contrast to honest miners who follow
random strategy.

Methodology and Results. The block creation time was kept
constant within this experiment (λ = 20), and we experimented
with the number of malicious miners6 in the network and
monitored the transaction collision rate for each setting.7 The
results are depicted in Fig. 6, and they show that with a single
malicious miner, the average proﬁt of honest miners is roughly
halved as compared to the average proﬁt of the malicious
miners.

In all simulation runs, malicious miners earned proﬁt dis-
proportional to their mining power. Moreover, our experiments
showed that the proﬁt advantage of malicious miners decreases
as their number increases. Intuitively, this happens because
malicious miners increase transaction collision. In detail, since

Parameter

Value

block creation rate (λ )
network propagation delay (τ)
# of total blocks
# of miners
network topology
# of transactions in block
maximum size of mempool
distribution of transaction fees
mining strategies
mining power of each miner

10 to 600
5 seconds
10000
10
ring
100
10000 transactions
exponential (λ = 150)
rational or random
0 to 49%

Tab. I: The summary of parameters in our simulations.

6Each holding 10% of the total mining power.
7Expressed as a percentage of all transactions mined vs. the capacity of

Fig. 7: Proﬁt of a single honest and malicious miner network power
based on varying adversarial mining power κ, while λ = 20.

all blocks during a single simulation run.

012345678910Number of malicious miners in network ()0.500.751.001.251.501.752.00Profit as a baseline factor ()Malicious minersHonest minersBaseline01020304050Adversarial mining power () [%]0123456Profit as a baseline factor ()Malicious minerHonest minerBaselineFig. 8: Transaction collision rate depending on the number of
malicious miners (each with 10% of mining power) and λ . The
worst case scenario shows the transaction collision rate when all
transactions in parallel blocks are duplicates.

Fig. 10: Transaction collision rate depending on λ , while all miners
are either malicious or honest.

Fig. 9: Throughput of
the network depending on the number of
malicious miners (each with 10% of mining power) expressed as the
percentage of all mined transactions that were not duplicate during
a single simulation run.

Methodology and Results. We focused on two extreme
scenarios, namely the scenario where all miners followed the
random selection strategy (i.e., all miners were honest) and
the scenario where all miners followed the rational selection
strategy (i.e., all miners were malicious). The block creation
time λ was changed within a speciﬁc interval. For each λ , we
expressed the transaction collision rate as the percentage of all
transactions mined during a single simulation run. The results
are displayed in Fig. 10 and Fig. 11, which are complementary.

The results conﬁrm our expectations. First, when the ran-
dom transaction selection strategy is followed by all nodes in
the network, the transaction collision rate is negligible. Second,
when all miners follow the rational transaction selection strat-
egy, the transaction collision rate increases signiﬁcantly with
decreasing λ since more blocks and transactions are produced
at the same time.

Fig. 11: Transaction collision rate depending on λ , while all miners
are either malicious or honest.

VII. DISCUSSION AND FUTURE WORK

Centralization. In the scope of Experiment III, we proved that
the relative proﬁt of malicious miners decreases as their num-
ber increases. Therefore, malicious miners are incentivized to
form a single mining pool, maximizing their relative proﬁt. As
a negative consequence, the decentralization of the blockchain
network might be impacted.

Throughput. In our simulations, we adjusted the parameters
not to focus on the maximum throughput of the simulated pro-
tocol but to investigate the potential issues that we discovered.
However, we argue that this had no impact on the principles
of the simulated protocol, and similar results can be achieved
even with higher throughputs.

Kaspa: The Implementation of GHOSTDAG. Kaspa [23] is
a real-world implementation of GHOSTDAG, which does not
follow the originally proposed incentive scheme of random
transaction selection, but selects transactions using a variant
of rational strategy (i.e., taking into account the fees of trans-

012345678910Number of malicious miners in network ()05101520253035404550Transaction collision rate () [%]=10=20=60=10, worst case baseline=20, worst case baseline=60, worst case baseline012345678910Number of malicious miners in network ()30405060708090100Transaction throughput [%]=10 (max throughput is 10 txs/s)=20 (max throughput is 5 txs/s)=60 (max throughput is 1,6 txs/s)=10 (max throughput is 10 txs/s)=20 (max throughput is 5 txs/s)=60 (max throughput is 1,6 txs/s)0100200300400500600 [seconds]051015202530Transaction collision rate () [%]Worst case (all miners are malicious)Best case (all miners are honest)0100200300400500600 [seconds]50556065707580859095100Transaction throughput [%]Worst case (all miners are malicious)Best case (all miners are honest)actions). However, this might lead to the throughput problems
identiﬁed in this work, and we conjecture that it is inefﬁcient
against rational miners as described in the work.

Future Work. In our future work, we plan to study the
inﬂuence of malicious miners on a network of larger size and
different topology while considering various (higher) numbers
of transactions in a block. Further, we plan to study the impact
of malicious miners not only when they deviate from the
protocol by changing the transaction selection strategy but
also when they produce stale blocks as a result of a malicious
action, which in turn requires the use of a particular discount
function γ. In addition, we plan to propose and investigate the
methods enabling DAG-oriented solutions such as PHANTOM
and GHOSTDAG be resilient to demonstrated attacks, thus
meeting the goal of increased throughput.

VIII. RELATED WORK

DAG-Based Consensus Protocols. The beneﬁts of blockchain
protocols come with certain trade-offs when balancing de-
centralization, scalability, and security. We have already men-
tioned the bottleneck in Nakamoto’s consensus protocol. Thus,
alternative approaches are emerging. We focus on the con-
sensus protocols based on DAG that have been proposed
so far. Wang et al. [24] performed a detailed systematic
overview of such designs. They described six categories
containing more than thirty DAG-based blockchain systems
classiﬁed based on their characteristics and principles. They
extend the commonly used classiﬁcation based on the type of
ledgers [25]. GHOST [26], Inclusive Blockchain [14], Con-
ﬂux [27], Haootia [25], and Byteball [13] represent DAG with
the main chain. Ledgers with parallel chains are represented
by Hashgraph [28] and Nano [12].

Nevertheless, our

focus is purely on DAGs with a
main chain,
such as SPECTRE [2], PHANTOM and
GHOSTDAG [4]. For details about these protocols, we refer
the reader to Sec. II.

Performance Analysis of DAGs. While many manuscripts
deal with the security and performance analysis of mentioned
protocols, they consider neither mining strategy nor features
of various incentive schemes. Park et al. [29] address the
performance of DAG-based blockchains and relate it to the
optimization of proﬁt. They show that the average number of
parents n can inﬂuence the transaction processing time and
also transaction speed. As a result, they propose a competitive-
based transaction process system using a dynamic fee policy.

Birmpas et al. [30] propose a new general framework
that captures ledger growth for a large class of DAG-based
implementations to demonstrate structural
limits of DAG-
based protocols. Even with honest miner behaviour, fairness
and efﬁciency of the ledger can be affected by to different
connectivity levels.

One of the key technical problems of DAG-based proto-
cols is the identiﬁcation of honest blocks. Wang proposes a
MaxCord [31], a framework using a different approach for
honest block identiﬁcation problem using graph theory. Based
on the deﬁnition of the disparity measurement between blocks,
they convert the problem into a maximum k-independent set
problem. Cao et al. [32] compared the performance of three

consensus mechanisms: Bitcoin (PoW), Nxt (PoS), and Tangle
(DAG-PoW) in terms of parameters such as average time
to generate a new block or conﬁrmation delay and failure
probability, showing how these mechanisms can affect the state
of network resources or network load condition.

IX. CONCLUSION

In this work, we have provided an overview of DAG-
oriented protocols that promise to increase the transaction
throughput on the blockchain network. Emphasis was given to
the PHANTOM protocol and its optimization GHOSTDAG.
In our experiments, we analyzed the impact of malicious
miners who deviate from the PHANTOM protocol by selecting
transactions for new candidate blocks based on the highest fee
rather than randomly (as proposed in the original design).

Within three dedicated experiments, we proved that mali-
cious actors have a signiﬁcant advantage over honest actors
in terms of proﬁt maximization, even in the situation where
protocol security has been sacriﬁced for the sake of proﬁt
maximization of honest miners (i.e., where a signiﬁcant ad-
vantage was given to honest miners). This implies that the
inﬂuence of malicious miners would only be magniﬁed in a
real-world scenario. Moreover, we show that malicious actors
have a detrimental impact on transaction throughput and have
a signiﬁcant incentive to form a mining pool, sacriﬁcing the
decentralization of the solution.

REFERENCES

[1] Y. Sompolinsky and A. Zohar, “Accelerating bitcoin’s transaction pro-

cessing,” Fast money grows on trees, not chains, 2013.

[2] Y. Sompolinsky, Y. Lewenberg, and A. Zohar, “Spectre: A fast and
scalable cryptocurrency protocol.” IACR Cryptology ePrint Archive,
vol. 2016, p. 1159, 2016.

[3] Gavin

Andresen,

“bitcoin

miningsim,”

https://github.com/

gavinandresen/bitcoin miningsim, 2015.

[4] Y. Sompolinsky and A. Zohar, “Phantom, ghostdag,” 2020.
[5] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[6] A. Gervais, G. O. Karame, K. W¨ust, V. Glykantzis, H. Ritzdorf,
and S. Capkun, “On the security and performance of proof of work
blockchains,” in Proceedings of the 2016 ACM SIGSAC conference on
computer and communications security, 2016, pp. 3–16.

[8]

[7] C. Decker and R. Wattenhofer, “13-th ieee international conference on
peer-to-peer computing information propagation in the bitcoin network.”
J. G¨obel, H. Keeler, A. Krzesinski, and P. Taylor,
“Bitcoin
blockchain dynamics: The selﬁsh-mine strategy in the presence
of propagation delay,” Performance Evaluation, vol. 104, pp. 23–
41, 2016. [Online]. Available: https://www.sciencedirect.com/science/
article/pii/S016653161630089X

[9] R. Bowden, H. P. Keeler, A. E. Krzesinski, and P. G. Taylor, “Block

arrivals in the bitcoin blockchain,” 2018.

[10] C. Grunspan and R. P´erez-Marco, “The mathematics of bitcoin,” 2020.
[11] W. F. Silvano and R. Marcelino, “Iota tangle: A cryptocurrency to
communicate internet-of-things data,” Future Generation Computer
Systems, vol. 112, pp. 307–319, 2020.

[12] C. Lemahieu and clemahieu, “Nano : A feeless distributed cryptocur-

rency network,” 2018.

[13] Anton Churyumov, “Byteball: A decentralized system for storage and
transfer of value,” URL: https://byteball. org/Byteball. pdf, 2016.
[14] Y. Lewenberg, Y. Sompolinsky, and A. Zohar, “Inclusive block chain

protocols,” in Financial Crypto, 2015.

[15] Y. Sompolinsky, S. Wyborski, and A. Zohar, “Phantom and ghostdag:
A scalable generalization of nakamoto consensus,” Cryptology ePrint
Archive, Report 2018/104, 2018, https://eprint.iacr.org/2018/104.

[16] S. Park, S. Im, Y. Seol, and J. Paek, “Nodes in the bitcoin network:
Comparative measurement study and survey,” IEEE Access, vol. 7, pp.
57 009–57 022, 2019.

[17] R. Paulaviˇcius, S. Grigaitis, and E. Filatovas, “A systematic review and
empirical analysis of blockchain simulators,” IEEE Access, vol. 9, pp.
38 010–38 028, 2021.

[18] Y. Aoki, K. Otsuki, T. Kaneko, R. Banno, and K. Shudo, “Simblock:
A blockchain network simulator,” IEEE INFOCOM 2019 - IEEE
Conference on Computer Communications Workshops (INFOCOM
WKSHPS), pp. 325–329, 2019.

[19] M. Alharby and A. van Moorsel, “Blocksim: A simulation framework
for blockchain systems,” vol. 46, no. 3, p. 135–138, Jan. 2019.
[Online]. Available: https://doi.org/10.1145/3308897.3308956

[20] A. Gervais, G. O. Karame, K. W¨ust, V. Glykantzis, H. Ritzdorf,
and S. Capkun, “On the security and performance of proof of work
blockchains,” in Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security, ser. CCS ’16. New
York, NY, USA: Association for Computing Machinery, 2016, p. 3–16.
[Online]. Available: https://doi.org/10.1145/2976749.2978341

[21] Beman Dawes and David Abrahams, “Boost C++ libraries,” https://

[22]

www.boost.org, 2001.
“Boost Multi-index Containers Library,” https://www.boost.org/doc/libs/
1 77 0/libs/multi index/doc/index.html, 2020.
“Kaspa,” online, https://github.com/kaspanet/kaspad/.

[23]
[24] Q. Wang, J. Yu, S. Chen, and Y. Xiang, “Sok: Diving into dag-based

blockchain systems,” ArXiv, vol. abs/2012.06128, 2020.

[25] S. Tang, “Bracing a transaction dag with a backbone chain,” Cryptology
ePrint Archive, Report 2020/472, 2020, https://ia.cr/2020/472.
[26] Y. Sompolinsky and A. Zohar, “Secure high-rate transaction processing

in bitcoin,” in Financial Crypto, 2015.

[27] C. Li, P. Li, D. Zhou, W. Xu, F. Long, and A. Yao, “Scaling nakamoto

consensus to thousands of transactions per second,” 2018.

[28] Leemon Baird, “The swirlds hashgraph consensus algorithm: Fair, fast,

byzantine fault tolerance,” Tech. Rep., 2016.

[29] S. Park, S. Oh, and H. Kim, “Performance analysis of dag-based cryp-
tocurrency,” in 2019 IEEE International Conference on Communications
Workshops (ICC Workshops), 2019, pp. 1–6.

[30] G. Birmpas, E. Koutsoupias, P. Lazos, and F. J. Marmolejo-Coss´ıo,
“Fairness and efﬁciency in dag-based cryptocurrencies,” in Financial
Cryptography, 2020.

[31] X. Wang, G. Gan, and L.-Y. Wu, “Framework and algorithms for
identifying honest blocks in blockchain,” PLOS ONE, vol. 15, no. 1,
pp. 1–14, 01 2020. [Online]. Available: https://doi.org/10.1371/journal.
pone.0227531

[32] B. Cao, Z. Zhang, D. Feng, S. Zhang, L. Zhang, M. Peng, and
Y. Li, “Performance analysis and comparison of pow, pos and
dag based blockchains,” Digital Communications and Networks,
vol. 6, no. 4, pp. 480–485, 2020.
[Online]. Available: https:
//www.sciencedirect.com/science/article/pii/S2352864819301476

GLOSSARY

A
γ
κ
λ
H
M
τ
c
e
t
BTC
DAG
IoT
PoW Proof of Work

A block in the PHANTOM solution
Discount function in PHANTOM
Adversarial mining power
Block creation rate
Honest miner
Malicious miner
Network propagation delay of blocks
Gap parameter in PHANTOM
Euler’s number
Time
Bitcoin
Directed Acyclic Graph
Internet of Things

