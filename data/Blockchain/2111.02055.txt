1
2
0
2

v
o
N
3

]

C
D
.
s
c
[

1
v
5
5
0
2
0
.
1
1
1
2
:
v
i
X
r
a

Salt-based autopeering for DLT-networks

Sebastian Müller∗†, Angelo Capossele†, Bartosz Ku´smierz†, Vivian Lin†,
Hans Moog†, Andreas Penzkofer†, Olivia Saa†, William Sanders†, Wolfgang Welz†
∗Aix Marseille Université, CNRS, Centrale Marseille, I2M - UMR 7373,
13453 Marseille, France
Email: sebastian.muller@univ-amu.fr
†IOTA Foundation
Berlin, Germany
Email: research@iota.org

Abstract—The security of any Distributed Ledger Technology
(DLT) depends on the safety of the network layer. Much effort
has been put into understanding the consensus layer of DLTs.
However, many network layer designs seem ad-hoc and lack
a careful analysis of the inﬂuence of the design decisions on
the whole DLT system. We propose a salt-based automated
neighbor selection protocol that shows the inherent tradeoffs
of certain design decisions and allows a quantitative treatment
of some network topology requirements. This example may
serve as a design framework and facilitate future research.
We provide a selection of results from simulations to highlight
some tradeoffs in the design decisions.

1. Introduction

Distributed Ledger Technologies (DLTs) constitute a
recent approach to recording and sharing data across mul-
tiple data stores. Fundamental elements in the design of a
DLT are the communication level, transaction data storage,
and a distributed consensus protocol. Research and industry
devoted much attention to consensus algorithms, the so-
called core of each DLT. However, most of the works on
DLT usually overlook the essential aspect of the underly-
ing communication layer and give very few details on the
corresponding peer-to-peer (P2P) network.

A recent line of work [1], [2], [3], [4], [5] clearly shows
that the security properties of a DLT rely on the security
of its underlying P2P network. We refer to [6] for a survey
on the network layer aspects of permissionless DLTs. With
such a diversity of DLTs at hand, a one-size-ﬁts-all design
paradigm for an automated neighbor selection mechanism
seems far from being effective. For example, Bitcoin and
Ethereum rely on ﬂat random graph topologies, but Car-
dano and Ripple use a more hierarchical approach where
nodes may play different roles, which inﬂuence how nodes
connect. Only a careful analysis of the speciﬁc requirements
of the DLT may tell whether the underlying P2P network
should enforce a particular network topology or allow the
veriﬁability or hiding of peer connections.

This problem is known to the scientiﬁc community; in
particular, [6] and [7] constitute a “call-to-arms” to the net-

working community to develop network layers that address
the speciﬁc needs of DLTs. We propose a framework for

Topology
hiding

Veriﬁability

Information
propagation

Peer
discovery

Network
topology

Spam
protection

DoS
resistance

Eclipse
resistance

Figure 1: Main requirements on network topology.

neighbor selection that allows a systematic analysis of the
most important properties for DLTs. While every DLT may
have particular needs on the underlying P2P network, they
all should verify some basic requirements. Figure 1 gives
a high level overview of the requirements on the network
topology in DLTs. The main purpose of a P2P is to ensure
the propagation of data to as many participants as fast as
possible. This is required to allow the DLT to establish
which transactions are valid and which are not. Another
essential requirement of a P2P network is robustness against
eclipse attacks. In an eclipse attack, an attacker controls all
of the victim’s connections, and hence isolates the victim
from the rest of the honest peers. Consequently, an attacker
can ﬁlter or alter the victim’s view on the DLT, and ﬁlter
or delay messages issued by the victim. This attack is
of particular interest in permissionless systems, where an
attacker could create a large number of nodes, a so-called
Sybil attack [8], to increase the chances to eclipse the victim.

 
 
 
 
 
 
1.1. Contribution

We propose a framework for the design of neighbor
selection protocols that allows the analytical treatment of
inherent tradeoffs of some design decisions. We present a
speciﬁc example is based on hash chains. These hash chains
allow increasing the robustness against eclipse attacks by
maintaining reasonable concealing of the network topology.
We also present simulation results on network stability.

The implementation of the proposed solution is released
as an open source project [9] and adds up to this paper’s
contribution. It has been used to obtain our simulations
results and is currently used by the IOTA 2.0 DevNet1.

2. Related work

In the DLT space, the DHT is a common approach
for peering, and its variations are used by popular second-
generation DLTs such as Ethereum and Cardano. Let us
note that Kademlia and its derivatives, e.g., [10], have been
used for many years; however, there is no analytical proof
for its performances and robustness. There have been more
theoretical approaches, e.g., [11], [12], [13], but they were
not able to establish a practicable alternative. A main focus
in the analysis of P2P networks lies in the vulnerabilities
and possible defenses against eclipse attacks, e.g. see [3],
[5], [14], [15], and [16].

3. Autopeering model

We require every node to have a unique identiﬁer.
This identiﬁer does not only allow to globally address
and recognize nodes but it may enable an identity-based
Sybil protection. Moreover, it allows the implementation of
mechanisms like node accountability where nodes can gain
or lose reputation or be held responsible for their actions.

The most straightforward approach for implementing
this is to automatically generate a new private/public key
pair for every new node, where the public key (or its hash)
serves as an identiﬁer and the private key can be used by this
node to sign messages. The set of all nodes in the network
is denoted by N and there are N = |N | nodes in total,
denoted n1, ..., nN . We call ni the node id of the ith node,
e.g., the hash of the public key of the node.

To be able to choose peers, every node needs a list of
potential peering partners. In a permissionless system, this
list will not be static but will constantly change, since nodes
can leave or join the network at any point in time. Since we
limit our analysis on neighbor selection we refer to [6] for
a discussion on peer discovery aspect of the autopeering.

3.1. Classifying neighbors according to their roles

For any autopeering to work in an unreliable environ-
ment, a node needs to not only be able to initiate outgoing
connections to other nodes but also be willing to accept

1. http://ressims.iota.cafe:28080/autopeering

incoming connection requests. In general, the average num-
ber of incoming connections needs to match the number
of outgoing connections in the network. In this paper, we
limit ourselves to the case where all nodes have the same
number of incoming and outgoing connections. We deﬁne
two distinct groups of connections or neighbors:

• Outbound Neighbors: The neighbors that the node

•

proactively chose from its list.
Inbound Neighbors: The neighbors that chose the
node as their peer from their list.

As outbound neighbors are chosen proactively, it is generally
harder for an adversary to control a node’s outbound connec-
tions. For instance, a natural strategy to overtake the inbound
connections of a victim is to send a high number of requests
from different nodes controlled by a single entity. In the
next section, we introduce a locally veriﬁable autopeering
that allows better protection of the inbound connections.

3.2. Locally veriﬁable autopeering

Neighbor selection can be done purely randomly or fol-
lowing some different criterion. We propose that each node
maintains a list of outbound and inbound scores. Outbound
connections are chosen to minimize the outbound scores and
inbound connections are selected to minimize the inbound
scores. Both scores are based on periodically updated salts
(i.e., random data used as an additional input to a hash
function). Each node maintains a pair of salts: the private
and the public salt. The private salt is used to “randomize”
the inbound neighbors and the public salt can be used to
verify that a requesting node adheres to the protocol. More
speciﬁcally, for each node ni ∈ N there exists a public node
id ni, a public outbound salt Saltpub, and a private inbound
salt Saltpriv. Node ni chooses a candidate for the outbound
connection based on the outbound scores. We deﬁne the
outbound score between requesting node ni and node nj as
(1)

Sout(ni, nj) = hash(ni||nj||Saltpub(ni)),

where || stands for the concatenation operator and the hash is
normalized to return values in the interval [0, 1]. To request
a new outbound connection a node ni starts requesting
from the smallest to the highest score Sout(ni, ·), until the
maximal number k of outbound neighbors is attained.

A node that is being requested for a connection will base
its decision for acceptance on the following inbound score.
For a node ni we deﬁne the inbound score of nj as follows:
(2)

Sin(ni, nj) = hash(ni||nj||Saltpriv(ni)).

Veriﬁability of the outbound connections allows nodes – up
to some extent – to verify (or test) if the requesting nodes
behave according to the protocol. We call such a test an
eligibility test, described in Section 3.3.

Node ni will accept a request from a node nj if the

requesting node nj passes the eligibility test and either:
ni has less than k inbound connections or

•
• Sin(ni, nj) is smaller than the inbound score of one
of his accepted peers. In this case, node ni will drop
the connection to its neighbor with the highest score.

3.3. Veriﬁability and eligibility tests

The eligibility test uses publicly available information to
check whether a node follows the protocol, which may give
additional protection for the inbound connections. For in-
stance, in the absence of such a test, an adversary can attack
inbound connections by sending more requests than it was
supposed to send. Eligibility tests may include additional
information as for example age of the node, the outbound
scores Sout, or the number of neighbors of the requesting
nodes. In this work we discuss the following test:

The θ-test. Let θ ∈ [0, 1] and assume that node ni requests
a connection with node nj. Then ni passes the θ-test of
node nj if Sout(ni, nj) ≤ θ.

The θ-test reduces the strength of an attacker by re-
quiring the outbound score of a requesting node to be no
larger than a value θ. Thus, the average number of requests
that an adversary controlling NA nodes can send is θNA.
Furthermore, to maintain the effectiveness of this threshold
criterion, the value of θ could be decreased as N increases.
Although a lower θ value would decrease the proportion
of adversary requests, the value should also not be chosen
excessively low, since it might also impact honest requests.
The public veriﬁability of the outbound connections may
increase resistance against eclipse attacks, but also reveals
pieces of information on network topology, facilitating at-
tacks. We refer to Section 4 for a discussion on this tradeoff.

3.4. Salt generation

Nodes need to have a public and private salt, which
should be updated periodically after some time T . The
public salt must satisfy the following requirements:

S1

S2

Future salts must be unguessable. Otherwise, an
attacker could mine node ids with small outbound
scores for a targeted node. This offers protection for
the outbound connections.
Salts must not be arbitrarily chosen. Otherwise, an
attacker could mine a public salt such that a victim
has a low outbound score from the point-of-view of
the attacker, thus circumventing the θ-test.

We propose to set the public salt using hash chains, while
the private salt can be randomly generated on the ﬂy. Every
new node creates a hash chain and publishes its last element
as their initial salt. After a time interval T , the nodes update
their public salt by changing it to the preceding value in the
hash chain. Upon request of a connection, the requesting
node can inform the requested node about the number of salt
updates since the last communication. The requested node
can then check, by computing a small series of hashes, if
the requesting node has followed the protocol.

3.5. Salt updates and network reorganization

Nodes should periodically update both of their salts,
which leads to protection from brute force attacks, prevents

the network to be stuck in states where nodes do not ﬁnd
new peers, and mitigates attacks that use knowledge on the
topology. The salt updates should happen asynchronously
to limit
the negative effects of too heavy network re-
organizations. For instance, a synchronous update may lead
to all neighbors of a given node dropping the connection
at the same time, making this node susceptible to eclipse
attacks.

After a public salt update, the node starts looking for
new outbound neighbors. It does not immediately drop its
previous connections but will replace the existing connec-
tions as soon as it ﬁnds a new outbound neighbor with
a small score that is willing to peer. After a private salt
update, a node starts accepting incoming connections that
have smaller scores than the current inbound neighbors.

The salt updates will regularly cause a certain reorgani-
zation of the network. This enables new nodes to join more
easily the network, since there will always be nodes that
recently updated their salt, which are more likely to accept
new requests. Since the expiry of salts is not synchronized,
the reorganization will affect a small fraction of the network
at a given point in time, and negative effects are limited.

Typically, the evolution of the network topology depends
on the average time between salt changes. If the frequency of
salt changes is low, the network can get stuck in situations
where not every node has the maximal number of peers.
Moreover, stable network situations facilitate attacks that are
based on knowledge of the network topology. On the other
hand, a high frequency of salt updates can lead to situations
of constant network reorganization and instability.

We illustrate the inﬂuence of the salt update frequency
on the network topology in Fig. 2, for a network of N
nodes and k = 4. We measure the salt update interval T as
multiples of the delay d between queries of a node. We refer
to the simulation’s open source code [9] for more details.

100

90

80

100

90

80

100

90

80

]

%

[

s
r
o
b
h
g
e
n

i

8
h
t
i

w
s
e
d
o
N

T=1,000d

T=3,000d

8.0

7.9

7.8

7.7

8.0

7.9

7.8

7.7

8.0

7.9

7.8

7.7

s
r
o
b
h
g
e
n

i

f
o
#
e
g
a
r
e
v
A

T=30,000d

300

600

900

Time [d]
Figure 2: Nodes with 8 neighbors (blue) and average number of
neighbors (red) with time, for N = 100 and some values of T .

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
3.6. Framework

References

The above proposal can be seen as one framework
among many permutations. The main and essential ingre-
dients of the neighbor selection are outbound and inbound
scores. These can be obtained by other means, e.g., XOR-
distances, or involve features of additional Sybil protections,
e.g., staked funds or the age of a node. The scores can be
private or public and also be chosen symmetrically, or the
number of incoming and outgoing connections may differ.

4. Discussion

Many aspects of a DLT that can inﬂuence the design of
an autopeering protocol. Not every aspect can be measured
quantitatively and some tradeoffs may only be discussed
qualitatively. For instance, every P2P is vulnerable to Sybil
attacks. The existence of an autopeering itself may increase
the vulnerabilities to Sybil attacks since it facilitates the
creation of identities. On the other hand, a P2P that relies
on manual peering is not scalable and can lead to network
topologies that are suboptimal for the dissemination of
information, are easily attackable, or may enable attacks
based on social engineering.

When the beneﬁts of autopeering outweigh possible
risks, the autopeering needs a good Sybil protection. This
fact is well-known and resistance to Sybil attacks can be
strengthened on the neighbor selection layer by increasing
the number of connections or ﬁltering the nodes by their age.
The salt-based autopeering introduced in this paper offers an
additional protection through eligibility tests. Note that the
eligibility test may take other parameters into account, such
as the age of the node, response time in ping-pongs, amount
of tokens staked, or more general reputation models.

The above points are only some aspects of design deci-
sions. A complete analysis of the autopeering can only be
done by including peer selection and information dissemina-
tion in the discussion. Moreover, many of the network layer
aspects are far from being well understood and the design
of the autopeering must also take into account the speciﬁc
requirements of the underlying DLT.

5. Conclusion

We propose a salt-based neighbor selection protocol that
allows local veriﬁability. We show that this veriﬁability can
increase the protection against eclipse attacks and discuss
how negative effects on the topology hiding can be miti-
gated. The resulting network will be self-regulating (due to
the scores and the eligibility tests) and self-organizing (due
to the salted scores). At the same time, it will be dynamic
(due to constant reorganizations of parts of the network),
allowing new nodes to join the network and mitigating
attacks based on the knowledge of the network topology.

[1] A. Gervais, G. O. Karame, K. Wüst, V. Glykantzis, H. Ritzdorf,
and S. Capkun, “On the security and performance of proof of work
blockchains,” in Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security, ser. CCS ’16. New
York, NY, USA: Association for Computing Machinery, 2016, p.
3–16.

[2] K. Nayak, S. Kumar, A. Miller, and E. Shi, “Stubborn mining:
Generalizing selﬁsh mining and combining with an eclipse attack,”
in 2016 IEEE European Symposium on Security and Privacy (EuroS
P), 2016, pp. 305–320.

[3] E. Heilman, A. Kendler, A. Zohar, and S. Goldberg, “Eclipse at-
tacks on bitcoin’s peer-to-peer network,” in 24th USENIX Security
Symposium (USENIX Security 15). Washington, D.C.: USENIX
Association, Aug. 2015, pp. 129–144.

[4] A. Gervais, H. Ritzdorf, G. O. Karame, and S. Capkun, “Tampering
with the delivery of blocks and transactions in bitcoin,” in Pro-
ceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security, ser. CCS ’15.
New York, NY, USA:
Association for Computing Machinery, 2015, p. 692–705.

[5] Y. Marcus, E. Heilman, and S. Goldberg, “Low-resource eclipse
attacks on ethereum’s peer-to-peer network.” IACR Cryptology ePrint
Archive, vol. 2018, no. 236, 2018.

[6] T. Neudecker and H. Hartenstein, “Network layer aspects of permis-
sionless blockchains,” IEEE Communications Surveys & Tutorials,
vol. 21, no. 1, pp. 838–857, 2018.

[7] M. Dotan, Y.-A. Pignolet, S. Schmid, S. Tochner, and A. Zohar, “Sok:
Cryptocurrency networking context, state-of-the-art, challenges,” in
Proceedings of the 15th International Conference on Availability,
Reliability and Security, ser. ARES ’20.
New York, NY, USA:
Association for Computing Machinery, 2020.

[8]

[9]

J. R. Douceur, “The sybil attack,” in Peer-to-Peer Systems, P. Dr-
uschel, F. Kaashoek, and A. Rowstron, Eds.
Berlin, Heidelberg:
Springer Berlin Heidelberg, 2002, pp. 251–260.

(2021).
https://github.com/iotaledger/autopeering-sim

[Online].

Available:

[10] I. Baumgart and S. Mies, “S/kademlia: A practicable approach to-
wards secure key-based routing,” in 2007 International Conference
on Parallel and Distributed Systems, 2007, pp. 1–8.

[11] E. Bortnikov, M. Gurevich, I. Keidar, G. Kliot, and A. Shraer,
“Brahms: Byzantine resilient random membership sampling,” Com-
puter Networks, vol. 53, no. 13, pp. 2340–2359, 2009.

[12] M. Young, A. Kate, I. Goldberg, and M. Karsten, “Towards practical
communication in byzantine-resistant dhts,” IEEE/ACM Trans. Netw.,
vol. 21, no. 1, p. 190–203, Feb. 2013.

[13] R. Guerraoui, F. Huc, and A.-M. Kermarrec, “Highly dynamic dis-
tributed computing with byzantine failures,” in Proceedings of the
2013 ACM Symposium on Principles of Distributed Computing, ser.
PODC ’13.
New York, NY, USA: Association for Computing
Machinery, 2013, p. 176–183.

[14] M. Castro, P. Druschel, A. Ganesh, A. Rowstron, and D. S. Wallach,
“Secure routing for structured peer-to-peer overlay networks,” ACM
SIGOPS Operating Systems Review, vol. 36, no. SI, pp. 299–314,
2002.

[15] K. Hildrum and J. Kubiatowicz, “Asymptotically efﬁcient approaches
to fault-tolerance in peer-to-peer networks,” in International Sympo-
sium on Distributed Computing. Springer, 2003, pp. 321–336.

[16] A. Singh et al., “Eclipse attacks on overlay networks: Threats and

defenses,” in In IEEE INFOCOM. Citeseer, 2006.

