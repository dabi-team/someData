1

Toward Timed-Release Encryption in Web3 –
An Efficient Dual-Purpose Proof-of-Work
Consensus

Fanghao Yang, Member, IEEE, Xingqiu Yuan

Abstract Many existing timed-release encryption schemes uses time-lock puzzles to avoid relying on a trusted timeserver or a key
holder which could be a weak spot in data security. However, it is unavoidable to consume massive computing power for solving
time-lock puzzles and it is difficult for encryptors to predict the amount of time to solve a puzzle by decryptors. In this study, an
efficient dual-purpose proof-of-work consensus allows users to release a time-locked content, which is encrypted by an asymmetric
key encryption scheme on a blockchain, without trust in any third-party agents. The release time is predictable as the block time in
a proof-of-work blockchain is adaptively controlled. The mining work is repurposed so that once a new block was mined on the
blockchain network, time-lock puzzles were also solved immediately. No additional work is required to reveal the time-locked
contents and the encryption is secured by monetary incentive mechanisms since it would be very costly to arrange an attack attempt,
which must overtake the total hash rate of the whole blockchain network.
Index Terms—Proof of Work, Consensus Protocol, Blockchains, Timed-Release Encryption

I.

INTRODUCTION1

I

t is highly expected that new digital economy would boom
inside the metaverse beyond the limitation of the physical
world. It would be important
to design efficient data
exchange protocol for protection of privacy in the metaverse,
where everything is digitized as a piece of data. Thus, it is
believed that the foundation of the metaverse shall be built
on top of decentralized networks (Web3) and decentralized
autonomous organizations (DAOs) shall be the major body
of the governance within the metaverse [1]. Many critical
social economic behaviors within the metaverse, e. g. voting
in DAOs and blind bidding in the Web3 market, requires
delayed release of confidential data or actions. To achieve
those applications, a decentralized timed-release encryption
scheme needs to be developed with blockchains on Web3.
Although the timed-release mechanism can be implemented
by a trusted agent as it was seen in Web 2.0, the confidential
contents cannot be securely hidden from the third-party
agents so that the hidden contents may be leaked by whoever
holds the data or the key. To address this issue, many
researchers proposed the use of multiple trusted agents [2],
[3] instead of a single agent to enhance the data securities
and avoid early data leakage, however, it requires to build
many secured messaging channels between multiple agents
which increase the complexity of the whole system and
computation & communication overheads.
the
methods with trusted agents cannot be well adopted and a

In all,

1 Fanghao Yang is with the NexToken Technology, Princeton, NJ 08852

USA (e-mail: yangfanghao@gmail.com).

Xingqiu Yuan is with Argonne National Laboratory, Lemont, IL 60439

USA (e-mail: xyuan@anl.gov).

third-party agent cannot be trusted, if the encrypted message
contains financially or socially valuable data. Instead, the
time-lock puzzle requires time-consuming computations to
solve, and the hidden data in the time-lock puzzle can only
be revealed after certain amount of time. There is no need to
trust any third-party to reveal
the hidden content over
elapsed time. However, to solve those puzzles and decrypt
the message, a significant amount of computation, which
implies a high cost of operation, is required. Moreover, it is
difficult to accurately predict the elapsed time for finding the
puzzle solution because it depends on the speed of the
computer hardware which participants in the problem
solving and the computing power could be augmented or the
computer algorithm/architecture could be optimized over the
time after the release of the time-lock puzzle (e. g. more
processors or a new type of processor may be utilized to
solve the problem and release the message earlier than the
prediction).
In recent years, a proof-of-work (PoW) blockchain, for
example, Bitcoin, was adopted as a decentralized ledger to
store the token transaction history. It is worth mentioning
that the block time, which is the time required to create a new
block on the blockchain, is a controlled to be stable since
there is an adaptive control mechanism within the mining
algorithm and consensus, which adjust its mining difficulty
based on the average block time of the current time window.
Since the deployment and builds of new mining equipment
are based on the physical production rate of computer
time
hardware which is relatively stable within a short
window (for example, a day or a week), if the whole mining
network grows to a very large scale, the mining hash rate,
which represents the computing power in the whole network,
is as stable as the computer production/deployment rate. It

was observed that the whole Bitcoin network can adapt to
gradual hash rate changes over time and maintain stable
stable block time can be the
block time [4]. This
decentralized clock tick to trigger the release of hidden
contents with a decentralized timed-release encryption
scheme for Web3 applications.

II. RELATED WORK

Δ

. Due to that the block time

Jia Liu, Tibor Jager and et al, uses above-mentioned block
time
as a reference clock tick to design a timed-release
encryption scheme mainly based on the witness encryption
[5]. In this scheme, the Bitcoin blockchain, or any other
alternative PoW blockchain, works as a witness to encrypt
messages as current block height x. To decrypt the message,
a witness (Bitcoin Blockchain) with future block height
would be required to compute with a cryptographic
'

multi-linear map. The encrypted message is automatically
released to public once the Bitcoin blockchain grow to
is
certain block height
referred as a stable clock tick, the whole blockchain network
can be used as a computational reference clock to determine
the release time of the hidden message so that the time elapse
. However,
for releasing the message would be
the construction of this theoretical scheme is not only
complex
a
zero-knowledge proof system SNARKs [6], the verification
of mining results is designed to be inefficient [5]. Even with
the SNARKs, yet a huge and complex formula would be too
costly to verify the mining results. Consequently, there is no
implementation for above-mentioned encryption scheme to
achieve a practical timed-release mechanism.
Using the stable block time
as a reference clock tick, a
decentralized and predictable timed-release mechanism was
Δ
also proposed by Sang-Wuk Chae and et al without using

− 
impractical. Without

'
Δ 

using

also

but

'


Δ

the

any complex encryption scheme [7]. In their study, discrete
log problem (DLP) was utilized to implement timed-release
encryptions. They suggested a chained block structure to
store encrypted messages within blocks and each block
contains
corresponding public key for message
encryption. The public key in a DLP-based crypto system
were generated in a deterministically pseudo-random
manner, so that a list of public keys is pre-determined before
the corresponding blocks were mined. The mining algorithm,
which is a SHA-256 hash function, is essentially equivalent
to a generator of pseudo-random numbers, therefore, the
generated hash results are also reduced/mapped to an integer
and tested as the private key against the pre-determined
public keys of the above crypto system. Once the private key
was found, the block was sealed on the blockchain as part of
PoW consensus, and the encrypted message contained in
current new block is then decrypted publicly. The mining
difficulty can be dynamically adjusted by choosing a prime
number p with different bit length based on average block
time of recent blocks. However, their mining approach is
analogous to a brute-force attack on DLP encryption, which
where n is the bit length of the
has time complexity
private key in DLP crypto system. For
finding the

 2
corresponding private key, their approach is significantly
or Pollard-Rho
less
algorithms [8] which has time complexity
. If using
efficient algorithms to search the private key, the attacker
may only take a very small fraction of the total computing
power of the whole blockchain network to get early access to
the encrypted message. Their approach cannot secure
valuable messages and prevent data leaks from low-cost
is not safe to deploy in real-world
attacks so that
applications.
The goal of this study is to enhance the security of
above-mentioned encryption scheme toward a practical

Pohlig-Hellman

efficient

than

0.5

it

Genesis Block
Header

Public Key

(0, 0, ℎ0)

Block Header

Block Header

New Block Header

Nonce

Nonce

Nonce

Hash

Seed

Prev. Header Hash

Prev. Header Hash

Public Key

Public Key

Hash

Seed

(1, 1, ℎ1)

Block Body

Private Key Hint
Verified

(, , ℎ)

Block Body

Private Key Hint
Verified

TX Count

TX Count

Coinbase TX

Coinbase TX

Transactions

Encrypted MSG

Transactions

Encrypted MSG

Prev. Header Hash

Public Key

(+1, +1, ℎ+1)

New Block Body

Private Key Hint Pending

TX Count

Coinbase TX

Pending Transactions

Encrypted MSG

Fig. 1 Diagram of the time-release blockchain. Hash represents the hash function to calculate the hash value of previous block header.
Seed represents the random number generator uses the sum of previous public key as the seed

 
decentralized timed-release blockchain. It is necessary to
find a new mining algorithm which not only meets the
requirements of PoW consensus but also efficiently solve the
time-lock puzzle so that the monetary incentive mechanism
would prevent attackers from using significantly more
efficient algorithms to find the private key and decrypting
the valuable message ahead of time.

III. BLOCKCHAIN WITH TIMED-RELEASE ENCRYPTION

In this study, the chained block structure is similar to the
research of Sang-Wuk Chae and et al [7]. Besides all basic
fields in a PoW blockchain (e. g. timestamp, Merkle tree
root), the block contains three pieces of data to ensure the
immutability and PoW consensus as shown in Fig. 1.

A. Hash of previous block header
like Bitcoin or any other PoW blockchains, the hash result
of previous block header makes all data and history on
blockchains immutable, any changes on previous block must
regenerate the nonce or redo the work.

B. Public key
Each block header contains the corresponding public key
to encrypt the hidden message to be released in current block
time. The public key and private key are based on DLP
crypto system. For example, if a user intends to release a
piece of message in a future block time, the message may be
encrypted by the corresponding public key. If the publisher
of the hidden data wants to make the data immutable and
publicly available after the release time (e. g. DAO voting),
the message may be written into the blockchain as part of
immutable transaction metadata as shown in Fig. 1.

As shown in Fig. 1, the public key for each block is
chained by using previous public key as the seed value for
the random number generator. A deterministic random
number generator (e. g. Mersenne twister pseudorandom
number generator [9]) may be used to generate a list of
chained public key for a blockchain. For example, assume
that the public key of the corresponding block is known,
during the generation of the subsequent public key, the sum
is a safe prime
of previous public key
is the element in the
number,
is the generator and
, , ℎ

subgroup of the cyclic group of the generator
, is used as a
seed for the generation of a new safe prime number
. The first public key is hard coded in the
genesis block; therefore, anyone can generate the same list of
+1, +1, ℎ+1
chained public keys in any time without knowing the private
key.

, where





ℎ

C. Nonce

Nonce value serves dual purposes: like Bitcoin, it is a
solution for a known hard problem (may not be proved as
NP-hard). Unlike Bitcoin, the private key (not necessary the
nonce value itself) shall be easily derived from the nonce
value in constant time. Once the nonce value is found, the
private key is also derived for releasing message within
current block time.

3

IV. TIMED-RELEASE MECHANISM

As descripted in the previous section, the user, who is
going to encrypt a message and schedule the release of the
encrypted message on the blockchain, shall determine the
block height of its release time using the equation below,
where x is current block height,
is the release time and t is
current time.

'

(1)



'


'



− 
∆

+ 

Then, the block height of the release time
=

is derived and
its corresponding public key is generated using the method
in the above section. With this public key, the message is
then encrypted and published into the blockchain as an
attached metadata of a transaction, which pays a fee to the
miner who is supporting the security of the blockchain.

'


'

When the block at the height

is mined on the release
, the corresponding private key is then automatically
time
'

found by below mining mechanism so that the message is
decrypted and released publicly. Anyone can unlock and
acquire the released message by accessing the immutable
blockchain data.



V. MINING MECHANISM AND ALGORITHM

The cornerstone of above mentioned blockchain system is
the mining algorithm which enable dual purposes of the
mining work. The dual purposes mean that the mining work
not only form the network consensus which ensure the
immutability of
(and token
transaction history) but also practically implemented the
time release mechanism by solving the time-lock puzzle in
the release time.

encrypted message

the

In Bitcoin, the SHA256 algorithm, which is represented as
a function SHA256(), essentially serves as a part of a
pseudo-number generator looping through all possible nonce
values embedded in the block header to solve the mining
challenge, which is searching for a few consecutive zeros in
its hash results. As a proof of work, this mining target, nonce,
has no better way to find than brutal force computing. In this
study, instead of looking for the same nonce as Bitcoin uses
in its mining work,
the blockchain protocol will verify
whether the hash results of a randomly generated nonce
could derive the private key for the corresponding public key
of current reference block time. It is assumed that the public
, if using a
key for the candidate block is known as
safe prime number p, the order
is also a
prime number, and we have the header hash function of the
candidate block, where int() represent a cast function convert
the output of a SHA256 function into a large integer and
header(nonce) represent a block header contains a variable
nonce.

, , ℎ
 = ( − 1)/2

hash

SHA256 SHA256

 ≡
mod

ℎ 



(2)







ℎ



and

where

 = 

The mining algorithm is based on pollard rho method[10].
Thus, we need to construct a set of mapping functions for
pseudo random walk in a cyclic graph. The mapping
functions should always ensure
are intermediate parameters for finding the private key with

birthday attacks. The nonce in the block header also casts to
. To simplify this early study, Floyd's
an integer number
cycle-finding algorithm is used to find the collision, but

other cycle-detection methods may be also used for better
space & time efficiency. Thus, two sets of
from
the same cyclic group G walks in the mapped cyclic graph
with different paces until they were collided.
It is worth noting that the nonce value

(, , )
is also contained
within the block header as shown in Fig. 1. Assuming the
other parts in the header were determined while mining, the
only variable in the hash function is the nonce value, thus,
the equation 2 is equivalent to a function of
noted as
hash
for a concise statement. Here, we have three

intermediate
mapping functions
()
parameters from the hash results. The mapping uses three
partitions where

to generate a set of



.
The first mapping function for a:
 = 0 ∪ 1 ∪ 2

hash

hash

+1 =  , 

mod

mod

hash

hash

 ∙
 +

≡
The second mapping function for b:

mod






 ,

 − 1 ,
hash
 − 1 ,

() ∈ 0
() ∈ 1

() ∈ 2
hash

hash

 ∙


hash


mod
+1 = ℎ , 
hash
mod
 − 1 ,

() ∈ 0

mod
 ,

hash
() ∈ 1

≡
In above equations 3 and 4, (p – 1) is the results of Euler’s
 − 1 ,
is

, which ensure the node

() ∈ 2



 +
totient function
always in the same group G.

()
The third mapping function for y:

(3)

(4)

hash

()

hash

hash

()

hash

mod
+1 =  
mod
mod

 ,

hash
hash

() ∈ 0

≡

()


ℎ

∙ 
∙ 

 ,
The mining algorithm is to find the cycle in the mapped
 ,
graph from the group G. A walking step means that mapping
functions were used once to calculate the next node
in the cyclic

from current node

() ∈ 1
 ∈ 2

(, , )

(5)

5

6

7
8

9
10

walk single step from

1
, −1

)

to

to

using equation 3 - 4

1
(−1

1
, −1

walk double steps from
1
1
, 
(

1
, 

)

using equation 3 - 4
2
(−1
2
do
, 
)
2
= 

2
2
if
, 
(
derive the private key from (
1

, 
if private key pairs with the public key do

the pollard rho method [10]

2
, −1

2
, −1

2
, 

2
, 

)

) as

1
1
, 

)

return (

2
, 
Knowing the solution tuple (

2
, 

1
, 

1


2
, −1



1


−1

(mod

2
, 

1
, 

2
, 

) and the public
key, the private key can be easily derived using classical
textbook method [10]. The most recent nonce value
is
also returned to be contained within the block header. The
is unique since it maps to the intermediate
nonce value
parameter
with the mapping equation 5 noted as
−1
. The time
and it shall meet the condition
(−1)
complexity of this mining algorithm is
like Pollard

)
ℎ
Rho method. The mining difficulty may be adjusted by using
a safe prime number with different big length. If a mining
node found the solution and the nonce value, it can broadcast
the solution tuple (
) and the candidate block to
the whole network for validation.

2
, 
Then, we have the following Algorithm 2 to validate the
newly sealed block. The mapping function (equation 4) is
used to verify the nonce value. Since there is no loop or
the time
complex formula in this validation algorithm,
complexity is
, which is a significant improvement over
existing study on witness encryption [5].

 ≡ 

( )

1


, 

, 



1

2

(1)

Algorithm 2: Mining Validation Algorithm
1
2

for all nodes in network do

if receive a new candidate block and its solution tuple

of integer (

) do

3
4

5

6
7

1

2

2

, 

, 

1
nonce value in the block header
, 

(mod
if
−1 ←
(mod
derive the private key from (

and

do

)

1


1


2


2


(−1) ≡ 

)
the pollard rho method [10]

ℎ

ℎ

, 
if the private key pairs with the public key do
add the candidate block to the blockchain

1


1
, 

2
, 

2
, 

(−1) ≡
) as

graph with step length of a single edge.
(+1, +1, +1)
Algorithm 1: Mining Algorithm

(, , )

Input: public key
Output: a tuple of integer (
value y

, , ℎ

) and nonce

1


1

2

2

, 

, 

, 

Prepare initial value for
 ← ( − 1)/2

,

and

:

random integers between 0 and n
0

0

0

1,2
, 0
← 

1,2
0
1,2
0
while
 ← 1

←
0
ℎ

0

do

 < 

1
2

3
4

VI. ANALYSIS OF DATA SECURITY

In this section, two types of attacks are analyzed against
above-mentioned algorithms and methods. The following
analysis is based on a hypothesis that it is not significantly
less difficult to solve the equation 5 reversely than to solve
the puzzle itself. In another word, there is no easy solution
) to find
(time complexity is significantly less than
. This hypothesis seems valid because
equation 5 combines discrete log function and SHA-256
−1

hash function. Both functions are known to be one-way
functions [11], [12].

if knowing

( )

The first type of attacks is attack on immutability of the

ledger data while hackers would try to modify data on the
blockchain including the encrypted message and transaction
history. Once the mining work is finished, the solution tuple
is broadcast into the public network, since then, attackers
shall also know the existing solution tuple of the time-lock
puzzle. If the block is modified by the attacker, the hash
function hash
will generate a different hash result so
in equation 5 would be also
that the result of
depends on hash
).
different (noted that
Therefore, the attacker must either find a new nonce
or
 −1
modify other parts of the block (e. g. timestamp) to replicate
the same hash result to pass the step 4 in the validation
the hacked ledger data
algorithm (Algorithm 2) so that
would be accepted to the blockchain. Since
and
hash
could be any integer number between 0 and p,
with brutal force attacking, the time complexity is
to
meet the condition in step 4 of validation algorithm.

(−1)
−1

(−1)

(−1)

(−1)

−1

()

2

, 

1
, 

2
, 

) with a new nonce value

The attacker may also solve the puzzle again by
regenerating the solution tuple with a set of new
(
. Any changes in
the block data, which is modified by the attacker, will induce
1

the change of the hash function hash
(equation 2),
consequently, generate a new set of mapping functions
(equation 3 - 5). The attacker, who is trying to modify the
block data, must generate a new cyclic graph and find a new
collision by spending the same amount work as mining a
new block with time complexity of

, approximately.

(−1)

−1

In general, the purposed mining algorithm ensures the
the mining

PoW consensus in the blockchain so that
mechanism works as it should be.

( )

The second type of attacks is to release the encrypted
message before its corresponding block is mined. The
premature release of
the message will damage the
time-release mechanism and suppress the usage of this
blockchain system. To attack the DLP-based encryption, the
[13] which
lower limit of the time complexity is
ensure that a significant amount work must be done to
prematurely release the message. Thus, the cost of attacking
on an encrypt message is no less than mining a new block.
Due to the high attack cost, the encrypted message is safe to
be distributed publicly on the blockchain. This is a major
improvement over early study [7] whose encryption message
can be easily attacked with a small fraction of mining work.

( )

VII. TOKEN ECONOMY

Token economy is briefly discussed here to demonstrate
the incentive mechanism of mining since no miner will do
work for free. Like Bitcoin, the miner is driven by a token
economy system. The user of the blockchain pays the miner
with a fee for timely releasing their encrypted message.
Moreover, the miner who found the nonce to seal the new
block (and the private key for corresponding public key) is
rewarded with several newly “mined” tokens as receiving
the coinbase transaction.

The tokens may be exchanged from miners to end users as
a utility tokens and users will pay for the use of the above

5

mentioned time-release blockchain network. Users who are
paying higher fees (more tokens) per size of their contents
will get their encrypted message written into the blockchain
in time with higher priority since each block has limited size
(e. g. 4 MB). The time release mechanism may also be used
by off-chain data; however, the immutability of off-chain
data and its operation history is not secured by PoW
consensus. In many applications, e. g. a decentralized voting
system on Web3, eligibility of the voting data is determined
by the time of its creation and is not allowed to be modified
once it was created. Thus, the users who need their data to be
immutable and later published, shall put their data on a
public blockchain and pays a fee with utility tokens.

Comparing to existing approaches using time-lock
puzzles for each encryption, the cost of unlocking a single
piece of content is relatively low and affordable (in the same
scale of the transaction fee in the Bitcoin network). Because
the release of encrypted data is in a batch after a new block is
mined, the cost for a single use is a fraction, which is the cost
of mining divided by the number of total users, while the
timed-release encryption is secured by the total hash power
of the whole network.

The mining efficiency may be improved with a newly
purposed algorithm and the total hash power in this network
could be increased from new miners because of monetary
incentives
cost of attacking the
timed-release encryption would be so high that the attacker
would rather to earn mining rewards safely with the same
amount computing power. As a result, the on-chain data is
prevented from premature leaks.

from mining. The

VIII. CONCLUSION

In this study, a dual-purpose mining algorithm were
proposed to enhance the security toward a practical
time-release blockchain on Web3. The mining work has
been repurposed as decryption work against the encrypted
message so that no extra cost would be necessary to release
the time-locked message. The timing of release is based on a
reference
the
difficulty-adjustable mining process so that the message can
be released stably and accurately.

block

clock

time

tick

the

as

in

The message is not only encrypted/released in a timely
manner but also immutable if being put on a public
blockchain. This property is critical for many real-world
applications (e. g. decentralized voting) and may create
long-term impact on economics and politics.

This study still has some potential challenges for future
works, for example, the difficulty adjustment depends on the
bit length of prime number. Since the mining difficulty is
hard to predict and adjusted in real-time, the generation of
the public key of future blocks are also unpredictable. We
need to either find a way to stabilize total mining hash rate so
that
the mining difficulty would be predictable in a
reasonable time frame, or multiple parallel chains of public
keys with different bit lengths may be used for redundant
encryption of messages so that any of private keys were
found, the message could be released.

NJ, USA. He was working on experimental data analysis and management,
high-performance computing for tokamak simulation, and real-time system
of plasma control. Since 2020, he was working on development of
decentralized system and its applications in Web3.

Moreover, the mapping functions (Equation 3 - 5) in this
study may be further simplified to provide the same level of
further
protection so that
optimization, provided that
encryption attacking
algorithm (e. g. Pollard-rho algorithm) shares the same big O
notation with our mining algorithm.

the mining efficiency get

the

APPENDIX

The algorithms and methods in this study are implemented
and demonstrated in Python as a minimum viable demo. The
demo software may be accessed with a public GitHub repo
(https://github.com/yangfh2004/Time-Release-Blockchain)

REFERENCES

[1] T. R. Gadekallu et al., “Blockchain for the Metaverse: A Review,”

arXiv:2203.09738 [cs], Mar. 2022, Accessed: May 04, 2022. [Online].
Available: http://arxiv.org/abs/2203.09738

[2] L. B. Swirlds, P. Mukherjee, V. Research, and R. Sinha, “TEMP:

Time-locked Encryption Made Practical,” IACR Cryptol. ePrint Arch.,
vol. 2021, p. 800, 2021.

[4]

[3] K. Yuan, Y. Wang, Y. Zeng, W. Ouyang, Z. Li, and C. Jia, “Provably
Secure Security-Enhanced Timed-Release Encryption in the Random
Oracle Model,” Secur. Commun. Networks, vol. 2021, p.
5593363:1-5593363:10, 2021.
S. Liaskos, B. Wang, and N. Alimohammadi, “Blockchain Networks
as Adaptive Systems,” in 2019 IEEE/ACM 14th International
Symposium on Software Engineering for Adaptive and Self-Managing
Systems (SEAMS), 2019, pp. 139–145. doi:
10.1109/SEAMS.2019.00025.
J. Liu, T. Jager, S. A. Kakvi, and B. Warinschi, “How to build
time-lock encryption,” Designs, Codes and Cryptography, vol. 86, no.
11, pp. 2549–2586, Nov. 2018, doi: 10.1007/s10623-018-0461-x.

[5]

[6] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza,

[7]

[8]

“SNARKs for C: Verifying Program Executions Succinctly and in
Zero Knowledge,” in Advances in Cryptology – CRYPTO 2013,
Berlin, Heidelberg, 2013, pp. 90–108.
S.-W. Chae, J.-I. Kim, and Y. Park, “Practical Time-Release
Blockchain,” Electronics, vol. 9, no. 4, 2020, doi:
10.3390/electronics9040672.
S. D. Galbraith, “Factoring and discrete logarithms using
pseudorandom walks,” in Mathematics of Public Key Cryptography,
Cambridge University Press, 2012, pp. 262–300. doi:
10.1017/CBO9781139012843.015.

[9] M. Matsumoto and T. Nishimura, “Mersenne Twister: A

623-Dimensionally Equidistributed Uniform Pseudo-Random
Number Generator,” ACM Trans. Model. Comput. Simul., vol. 8, no. 1,
pp. 3–30, Jan. 1998, doi: 10.1145/272991.272995.

[10] A. J. Menezes, S. A. Vanstone, and P. C. V. Oorschot, Handbook of
Applied Cryptography, 1st ed. USA: CRC Press, Inc., 1996.

[11] F. Mendel, N. Pramstaller, C. Rechberger, and V. Rijmen, “Analysis

of Step-Reduced SHA-256,” in Fast Software Encryption, Berlin,
Heidelberg, 2006, pp. 126–143.

[12] A. Joux, A. M. Odlyzko, and C. Pierrot, “The Past, Evolving Present,

and Future of the Discrete Logarithm,” 2014.

[13] S. Bai and R. P. Brent, “On the efficiency of Pollard’s rho method for
discrete logarithms,” in Proceedings of the fourteenth symposium on
Computing: the Australasian theory - Volume 77, AUS, Jan. 2008, pp.
125–131.

Fanghao Yang (M’16) was born in Hunan, China. He received the B.Eng.
degree in measurement and instrumentation from Beihang University,
Beijing, China, in 2008, the Ph.D. degree in mechanical engineering from
the University of South Carolina, Columbia, SC, USA, in 2013, and the M.S.
degree in computer science from the Georgia Institute of Technology,
Atlanta, GA, USA, in 2019. From 2014 to 2016, he was a Post-Doctoral
Researcher with IBM Research, Yorktown Heights, NY, USA. He was
working on system modeling and measurement & control of data center
cooling system. From 2016 to 2020, he was a Scientific Application
Software Engineer with the Princeton Plasma Physics Laboratory, Princeton,

