BBS: A Blockchain Big-Data Sharing System

Shan Wang∗‡, Ming Yang∗, Tingjian Ge‡, Yan Luo‡, Xinwen Fu‡
∗ Southeast University. Email: shanwangsec@gmail.com, yangming2002@seu.edu.cn
‡University of Massachusetts Lowell. Email:{Yan Luo, Xinwen Fu}@uml.edu, ge@cs.uml.edu

1
2
0
2

v
o
N
6
1

]

R
C
.
s
c
[

1
v
2
2
8
8
0
.
1
1
1
2
:
v
i
X
r
a

Abstract—Chain of custody is needed to document the se-
quence of custody of sensitive big data. In this paper, we
design a blockchain big-data sharing system (BBS) based on
Hyperledger Fabric. We denote the data stored outside of a
ledger for sharing as “off-state” and “big data” (referring to
extremely large data) is in this category. In our off-state sharing
protocol, a sender registers a ﬁle with BBS for sharing. To acquire
the ﬁle, an authenticated and authorized receiver has to use
transactions and interacts with BBS in four phases, including the
ﬁle transfer request, encrypted ﬁle transfer, key retrieval, and ﬁle
decryption. The corresponding transactions are recorded in the
ledger and serve as chain of custody to document the trail of the
data. Compared with related work, BBS can perform the four
phases autonomously. It utilizes the permissioned blockchain, i.e.
Hyperledger Fabric, for access control and can defeat dishonest
receivers. We design and implement a prototype of BBS for big
ﬁle sharing. Extensive experiments were performed to validate
its feasibility and performance.

Index Terms—Blockchain, Big Data, Big File Sharing, Off-

state, Hyperledger Fabric

I. INTRODUCTION

A blockchain system can build trust in the data that it
maintains without a centralized authority. Data in conventional
blockchain systems is often stored in a ledger, which includes a
world state and a blockchain. The world state stores the current
system state such as the user cryptocurrency balance in Bitcoin
[1] and the blockchain saves all transaction history, which
contains operations on the world state and/or the data used
to update the world state. Smart contract controls operations
on the world state. The whole transaction history produces the
current state values and can work as auditing evidence. The
ledger is synchronized across all blockchain nodes.

In this paper, we use blockchain to share sensitive big data
such as scientiﬁc and biomedical data freely and establish
the chain of custody [2]. Sharing such data with trusted
parties without charge allows independent veriﬁcation of
published scientiﬁc results and enhances opportunities for
new discoveries. With concerns of intellectual property (IP)
theft and industrial espionage [3], we desire secure and
trustworthy big data sharing systems that can record the chain
of custody to document the trail of the data, e.g. who requests
and owns what data.

However, existing blockchain frameworks cannot be directly
applied to big data sharing. In current blockchain frameworks,
the data size and data type in ledgers is limited due to
transaction fees, system performance and other concerns [4]–
[7]. The ledger is conventionally designed to maintain the state
data, such as cryptocurrency balance. All blockchain nodes
often maintain the same ledger. However, because of privacy

and intellectual property (IP) concerns, owners may not want
to share the big data across all nodes.

Related work on big data sharing pertaining to Blockchain
cannot be used for the application we target. FairSwap [8] is
an off-chain based big ﬁle selling application. (i) FairSwap
sells digital goods for money in Ethereum with cryptocur-
rency. Users need pay transaction fees to miners for smart
contract execution. It is not designed for free data sharing
for scientiﬁc discovery. (ii) In FairSwap, the ﬁle transfer and
encryption/decryption operations are conducted off-chain by a
sender and a receiver while the blockchain system conducts
work such as cryptocurrency transfer and encryption key
exchange. That is, FairSwap segregates ﬁle transfer from the
blockchain system and is not designed for autonomous big
data sharing. (iii) FairSwap works on a public blockchain. The
encryption key is revealed to the public on the ledger. Once an
encrypted ﬁle is leaked, for example, intercepted by malicious
cyber players, the encrypted ﬁle can then be decrypted. A
token-based off-chain data sharing scheme is brieﬂy discussed
in [9] and there is no concrete protocol. Their blockchain
system has no control over the actual data sharing process.
Chain of custody cannot be properly established.

We propose a blockchain big-data sharing system (BBS)
based on the permissioned blockchain framework,
the
Hyperledger Fabric [10] (abbreviated as Fabric in the rest
of the paper), so as to securely share sensitive big data with
authenticated and authorized users and record the chain of
custody within the ledger. Our major contributions can be
summarized as follows. We introduce the concept “off-state”,
which is data, particularly big data, maintained at a separate
storage space from the ledger at blockchain nodes. Off-states
can be shared between parties of interest and do not need to
be synchronized across all nodes. Smart contracts can directly
operate on the off-states such as sharing.

To autonomously and securely establish the chain of custody
of off-states, we propose a novel off-state sharing protocol
utilizing the smart contract. Only an authorized receiver can
obtain off-states through transactions, which document the
chain of custody. Requested data is encrypted and transferred
on demand. The receiver has to propose a transaction, which
will be recorded into the ledger, to obtain the key and decrypt
the ﬁle. The key is known only to the sender and receiver.
Therefore, dishonest receivers who obtain the key cannot deny
that they obtain the original data.

We implement a prototypical BBS with Fabric running
our off-state data sharing protocol. Extensive experiments
are performed to evaluate BBS’ feasibility and performance

 
 
 
 
 
 
such as latency of the big ﬁle sharing between pairs of
blockchain nodes. BBS performs similarly or better compared
to SFTP/SCP applications in Linux. A long transaction
involving big ﬁle transfer does not block other operations of
BBS, which can process multiple big ﬁle transfer and other
transactions simultaneously.

The rest of this paper is organized as follows. Section II
introduces the background knowledge—Hyperledger Fabric.
Section III presents the challenges, system model and threat
model for off-state sharing. The off-state sharing protocol is
introduced in Section IV. We evaluate the prototypical BBS
in Section V and conclude this paper in Section VI.

in the world state. Only PDC member peers store the original
data, while PDC non-member peers only store the data hashes.
Multi-level Endorsement Policy: The endorsement policy
setting is ﬂexible in Fabric. An endorsement policy stipulates
which peers need to perform as endorsers to endorse a
transaction. Endorsing involves executing smart contracts and
signing the execution results. Each smart contract has a default
chaincode-level endorsement policy that manages all public
data and PDC data in the world state. A key-level endorsement
policy can be customized to manage one speciﬁc key-value
data. A collection-level endorsement policy can be used to
manage the PDC data.

II. BACKGROUND

III. OFF-STATE DATA SHARING MODELS

In this section, we introduce the Hyperledger Fabric, a

permissioned blockchain framework.

A. Transaction Workﬂow

Fabric has three types of nodes, i.e. peers, orderers and
clients in charge of different
tasks during the transaction
workﬂow. Peers maintain ledgers and smart contracts, and
perform as the backbone of a Fabric network. Involved parties
need to approve the deployment of a smart contract.

Fabric adopts a three-phase “execute-order-validate” trans-
action workﬂow as shown in Fig. 2: (i) A client/user proposes
a transaction proposal to the endorsers, which are a subset
of peers and speciﬁed by an endorsement policy; (ii) Every
endorser independently executes the chaincode, signs the ex-
ecution results, and returns the results with a corresponding
signature to the client as a proposal response. Note that the
execution results are not updated to the world state at this
stage; (iii) If the returned execution results from different
endorsers are the same, the client constructs a transaction,
which contains both the transaction proposal, execution results
and a list of signatures (endorsements). The client sends the
transaction to the orderer nodes. (iv) The orderer nodes bundle
collected transactions into a new block, and distribute the
new block to all peers including both endorsers and non-
endorsers. (v) All peers validate the transactions in the received
new block. For one transaction, if its endorsements pass the
endorsement policy check and its execution results pass the
version conﬂict check, each peer will update the world state
according to execution results. After validating all transactions,
each peer appends the new block to its local blockchain.

B. Access Control Mechanism

Membership Service: Fabric issues each user or node a cer-
tiﬁcate as the identity, which is bonded with one organization
within the consortium of organizations who build the Fabric
system. A node or a user represents an organization. Only
authorized nodes and users can participate in a Fabric system.
Fine-grained Data Isolation: Fabric introduces a ﬁne-
grained data isolation mechanism, i.e., private data collection
(PDC). PDC data is sensitive and shared among only a subset
of peer nodes, i.e. a subset of organizations. The PDC is stored

Our goal is to design a blockchain based big data sharing
system that can establish the chain of custody of the big
data, being able to track the trail. The ledger provides non-
repudiation evidences. The big data is shared between a sender
and a receiver within a consortium of organizations. In this
section, we ﬁrst present the challenges and then present our
system model and threat model.

A. Challenges

We identify three challenges for designing BBS.
Challenge 1—Storage Space Limitation: Due to the storage
limitations of ledgers, it is impractical to store big data in
ledgers or pack big data in transactions.

Challenge 2—Privacy Requirement: Big data may be sen-
sitive. The owner may not want
to share the data with
everyone. Access control shall be adopted. However, in a
conventional blockchain system, all nodes maintain the same
data. Therefore, the blockchain system cannot be directly used
for big data sharing.

Challenge 3—Security Requirement: In a big-data sharing
session, the sender or the receiver may misbehave. The re-
ceiver may dishonestly deny that she/he has received the data
from the sender. The sender may share the data not consistent
with the description that she/he provides. If a dispute occurs,
the blockchain shall provide evidences for the case.

B. System Model

Permissioned Blockchain Settings: A consortium of orga-
nizations O = {O1, ..., On} cooperate together to build a
permissioned blockchain system B. In Fabric, an organization
can have multiple users. For clarity and simplicity but without
loss of generality, assume each organization contributes one
peer node, and authorizes one user to join the system. The
peer node set is denoted as N = {N1, ..., Nn}. The user set is
denoted as U = {U1, ..., Un}. A user interacts with B through
a client node. Ni and Ui belong to Oi. The orderer node setting
will be discussed in Section V-A. All organizations cooperate
to develop and deploy the smart contract C on peers N to
implement a common business goal such as big data sharing.
We introduce the concept of “off-state”, which is stored at
blockchain nodes N , but outside of the ledgers, particularly the

Fig. 1. Blockchain-based off-state sharing model

Fig. 2. Three-phase transaction workﬂow in Fabric

Fig. 3. Four phases in off-state sharing protocol

world state. For example, the off-state can be big data. There-
fore, we generalize big data sharing as off-state data sharing.
Off-states can be inconsistent across {N1, ..., Nn}, and shared
between pairs of nodes. A smart contract C can directly
operate on the off-state for read, write, encryption/decryption
and other operations including data sharing.

Fig. 1 shows our blockchain off-state sharing system model.
Each node maintains a world state database and an off-state
storage space when needed. Users propose transactions to
trigger the smart contracts to transfer the off-state data. An
off-state sharing session occurs between two organizations, OS
and OR, within O. We denote their nodes as N S and N R, and
their users as S and R respectively. The smart contract fully
controls the sharing process and can transfer off-state data f
from N S to N R through an off-state sharing protocol.

C. Threat Model

We assume that the underlying blockchain infrastructure B
including all peers and orderers is secure. A user Ui only
can retrieve ﬁles in his/her off-state storage space of Ni. In
Fabric, the smart contract is deployed in a decentralized way.
No organization can individually control the smart contract.
Therefore, we assume the smart contract C is trusted.

Users S and R may be dishonest. A user interacts with
B through a client node. A user controls the application
that runs on the client node, and may maliciously change
the application. For example, receiver R sends a transaction
proposal and requests C to transfer f from sender S to R.
according to the transaction workﬂow in Section II-A, the
smart contract executes before the transaction ordering and
validation phases. After the smart contract transfers the data
f , a dishonest R may change the client application, and does
not submit the transaction for ordering. Then the blockchain
cannot record this data transfer activity but R has received f .

IV. OFF-STATE SHARING PROTOCOL

In this section, we ﬁrst present our off-state sharing protocol
based on Fabric, and then discuss how it addresses the three
challenges in Section III-A.

A. Overview

The off-state sharing protocol has two stages. We use a
big ﬁle f as an off-state data example. In Stage 1, sender S

Fig. 4. World state and off-state design in the off-state sharing protocol. The
off-state is bound with the world state through hashes and encryption keys
which are called cryptographic locks

prepares the big data f to be shared. f is stored in the off-state
of sender node N S. In Stage 2, blockchain system B takes
over the whole off-state sharing process, and autonomously
and securely establish the chain of custody. Receiver R only
interacts with B through transactions, and does not need to
wait for response from S. Smart contract (i.e., chaincode called
by Fabric) C encrypts f , transfers the encrypted data fz from
the off-state of N S to the off-state of N R, and stores the
symmetric encryption key k in the world state. k is managed
using a PDC of Fabric. R has to request k through a transaction
in order to decrypt fz. If R is legitimate, C will reveal k to
R. C puts critical information in the execution results, which
will be used to update the world state and will be recorded in
transactions which perform as evidences.

B. Stage 1: Preparing Off-State Data

An sender and owner S prepares the big ﬁle to be shared.
S uploads f to the off-state storage of N S. S also proposes
a transaction—“Tx: File upload”—to trigger smart contract C
to calculate and record the metadata of f into the world state.
Fig. 4 illustrates the File entity, i.e.
(cid:104)ID, Name, Hash,
Access_Rule, Description(cid:105), in the world state.

• The ﬁle hash h, calculated and maintained by the
blockchain, can be used to verify the integrity of f . C
calculates and records h in the world state. Every node
maintains h.

Off-StateWorld StateNode1Off-StateWorld StateNode2Off-StateWorld StateNode3fileWorld StateWorld StateWorld StateSmart ContractNode2Smart ContractNode3Smart ContractNode1TXTXTXTransaction (TX) ProposalF2F1F3Off-StateOff-StateOff-StateF1Sender PeerReceiver PeerUsersPeer 1 Peer2ClientTransaction ProposalTransaction ProposalTransactionBlock GenerationTransactionValidationChaincode ExecutionChaincode ExecutionProposal ResponseOrdererProposal ResponseTransactionGenerationBlockBlockTransactionValidationNotificationPeer Node(Receiver )SenderPeer Node(Receiver )Peer Node(Receiver )Peer Node(Receiver ) Peer Node(Sender )ReceiverTx: transfer requestTx: transfer requestencrypt file and set Key entityTx: file transferTx: key accessgrant receiver the access to Key entity Tx: file decryptionquery Key and decrypt file set Event entityset Event entityencrypted fileSenderReceiverOrdererTx: transfer requestTx: transfer requestencrypt file and set Key entityTx: file transferTx: key accessgrant receiver the access to Key entity Tx: file decryptionquery Key and decrypt file set Event entityset Event entityencrypted fileSenderPeer Node(Sender )ReceiverOrderer𝑓𝑧𝑓𝑓𝑧Crypto-lockWorld StateOff-State𝑆𝑓𝑅• The access rules protect the privacy of f . S individually
deﬁnes the access rules based on the identities in the
permissioned blockchain. For example, a rule {O1, O2}
means f only can be shared with organization 1 and
organization 2.

• The ﬁle entity in the world state database is public to all

users for searching.

Once the File entity is set up, B takes over the ﬁle sharing
process. B autonomously shares ﬁles following the access rule
deﬁned by S.

C. Stage 2: Sharing Off-State Data

Fig. 3 shows the workﬂow of sharing a big ﬁle over Fabric.
The sharing process involves four transactions. These four
transactions follow the same transaction workﬂow as intro-
duced in Section II-A. However endorsers for each transaction
are different according to the speciﬁc endorsement policy
setting. An endorsement policy stipulates who should sign
the transaction. Fig. 3 shows only transaction steps of interest
while ignoring other steps such as ordering of the transaction
workﬂow in Fig. 2.

1) Phase 1: File Transfer Request: R shall

request
the transfer of a particular ﬁle f stored at N S and the
request shall pass the access control governed by a speciﬁc
endorsement policy. C can get the identity of the user who
sends the transaction proposal. C running at an endorser peer
checks if the user identity satisﬁes the access rule in the
File entity, and records the results in an Event entity in
the world state. An Event entity is in the form of
(cid:104)ID,
FileID, KeyID, Flag, Sender, Receiver,
Time(cid:105) as shown in Fig. 4, where the F lag is a Boolean
value indicating if the endorser permits the ﬁle transfer. The
endorsement policy can be set as AN D(OS, OR), which
stipulates peers from both OS and OR should endorse the
transaction. A valid transaction means that OS and OR reach
a consensus and sign on the same results (i.e. Event entry),
either denial of or agreement on the ﬁle transfer. We call the
corresponding transaction “Tx: transfer request”.

2) Phase 2: Encrypted File Transfer: After the ﬁle transfer
request is approved, R proposes another transaction—“Tx:
ﬁle transfer”—to initiate the ﬁle transfer. The endorsement
policy for “Tx: ﬁle transfer” can be set as AN D(OS), which
means the sender peer N S works as an endorser and signs the
transaction. C in N S ﬁrst checks F lag in the Event entity.
The ﬁle transfer continues only if F lag is T rue.

C in N S then encrypts f using k, signs the encrypted ﬁle
fz using an asymmetric key (pk, sk), and sends fz to the off-
state of N R via a ﬁle transfer protocol such as SFTP. The
encryption key and the auxiliary information of fz are put in
the world state as an Key entity. The Key entity is in the form
of (cid:104)ID, Key_AES, Hash_Enc_File, Public_Key,
Signature(cid:105). An instance of Key entity is (cid:104) k, hz, pk,
s (cid:105), where hz is the hash of fz. s = Sign(sk, fz), where the
function Sign uses sk to sign fz and outputs the signature
s. Speciﬁcally in Fabric, k is set as a PDC data. PDC
can guarantee that only PDC members can see the actual

encryption key and others only know its hash. In this phase,
only OS is the PDC member. That’s only N S keeps the
original k, and N R only has the hash of k.

3) Phase 3: Key Retrieval: R ﬁrst checks if N R has
received fz and if fz matches with hz and s. R can send
a query request to N R and delegate C to check fz. In Fabric,
the query request will not generate a transaction. Only after
N R has received the ﬁle does R propose a transaction—“Tx:
key access”—to B to request k. The endorsement policy for
“Tx: key access” is set as AN D(OS) so that N S performs as
an endorser. C in N S checks if R is the legitimate receiver
of the corresponding Event entity. If R is, C sets k as a
new PDC data whose members include both OS and OR.
Then the PDC mechanism will store k in both N S and
N R. Therefore, N R will be able to retrieve k. Note that the
corresponding transaction only stores PDC hash. The PDC
value is transmitted using a speciﬁc protocol in Fabric. We
assume the PDC mechanism is reliable and secure since
the PDC mechanism is a part of our underlying blockchain
framework. That is k is updated to the world state database
of N R only after the transaction is validated as valid in the
blockchain. PDC also ensures that k is deﬁnitely shared with
the legitimate R and not publicly disclosed.

4) Phase 4: File Decryption: Finally, R proposes the last
transaction —“Tx: ﬁle decryption”—to decrypt fz. In Fabric,
the endorsement policy can be set as AN D(OR) so that N R
performs as an endorser. N R can access fz in its off-state
storage and access k in its world state. N R uses k to decrypt
fz to get f , and further veriﬁes if f matches with h in the
File entity.

D. Analysis

Our off-state sharing protocol and system addresses the
three challenges that are introduced in Section III-A as follows.
Challenge 1—storage space limitation: We introduce the

concept of “off-state” and store the big data off the ledger.

Challenge 2—privacy requirement: Our protocol involves
access control mechanisms to allow off-states to be shared
between pairs of nodes, not across all blockchain nodes.
Besides, an owner can deﬁne access rules to control the data
sharing permission. This feature also saves storage space at
nodes that do not need the off-state data.

Challenge 3—security requirement. Our protocol securely
establishes the chain of custody of the off-state data. (i) The
critical information such as h and hz generated during the data
sharing process is recorded in the corresponding transactions
and the world state. S cannot deny the content of f which
has been shared unless S ﬁnds a collision of the cryptographic
hash function. (ii) The built-in PDC mechanism can guarantee
that R only knows the encrypted ﬁle fz and the hash of k if R
does not submit the transaction—“Tx: key access”. Only after
“Tx: key access” is validated as valid and recorded into the
blockchain, R can get k. R has to propose and submit “Tx: key
access” to get k to decrypt fz unless R cracks the hash of k.
The trusted C generates h, hz and k, and can guarantee their
correctness. Therefore, S cannot deny the content of the shared

Recall that a ﬁle sharing session involves four transactions
as shown in Fig. 3. We evaluate the latency of different
transactions and the latency of the whole session.

1) File Size: For each ﬁle in Table I, we conduct the ﬁle
sharing session 32 times. Each time only one ﬁle sharing
session is performed. The results are shown in Figs. 7–9.
The ﬁle size has minor effect on the latency of “Tx: transfer
request” and “Tx: key access”. This is reasonable since these
two transactions only operate on the world state data. The
latency of “Tx: ﬁle transfer” and “Tx: ﬁle decryption” rapidly
increase as the ﬁle size increases. The reason is that these two
transactions involve multiple cryptographic calculations and
the Golang SFTP operation. According to Fig. 8 and Table II,
the Golang SFTP latency accounts for a large proportion of the
whole “Tx: ﬁle transfer” latency. As is well know, the SFTP
latency can be optimized by improving the network bandwidth.
Fig. 9 shows the latency of one ﬁle sharing session of
BBS, and compares it with the latency of Linux SFTP and
SCP applications. BBS uses the optimized Golang SFTP
with a buffer size of 1MB. Its latency includes the latency
of ﬁle transfer via Golang SFTP and latency incurred by
the cryptographic computation and transaction processing and
transmission. It can be observed that
the latency of BBS
rapidly increases as the ﬁle size increases. This is because
normally more time is needed to transfer larger ﬁles. It can also
be observed that BBS performs similarly or better compared
with Linux SFTP/SCP applications.

2) Parallel Transfer: We also demonstrate that BBS can
process multiple big ﬁle transfer sessions and other trans-
actions in parallel. A long transaction involving the big ﬁle
transfer does not stop other transactions from running. For
each ﬁle, the number of simultaneous parallel ﬁle sharing
sessions is 1, 2, 4 and 8, denoted as 1-P, 2-P, 4-P and 8-P in
Figs. 10–14, which show the experiment results. In each case,
the ﬁle is transferred 32 times in total. For example, in the
case of 4-P (4 parallel ﬁle sharing sessions), we perform the
experiments 8 times and the ﬁle is transferred 32 times (4×8).
We make the following observations. As the number
of parallel sessions increases, the latency of “Tx: transfer
request” and “Tx: key access” is relatively stable as shown in
Fig. 10 and Fig. 11. However the latency of “Tx: ﬁle transfer”
and “Tx: ﬁle decryption” increases as the number of parallel
sessions increases. Table II shows the percentage of SFTP
incurred latency in the “Tx: ﬁle transfer” latency. The SFTP
latency accounts for the most of the transaction latency.

Fig. 14 shows the average latency of one ﬁle sharing session
in different parallel transfer cases. It can be observed that the
average ﬁle sharing session latency increases as the number of
parallel sharing sessions increases. This is reasonable because
simultaneous parallel ﬁle sharing sessions share the network
bandwidth. More sessions mean less network bandwidth for
each ﬁle sharing session.

VI. CONCLUSION

Fig. 5. Prototypical off-state sharing system based on Hyperledger Fabric

f and R cannot deny she/he has received f . The blockchain
provides non-repudiation evidences.

V. EVALUATION

We have implemented a prototypical off-state sharing sys-
tem, BBS, based on Fabric, and evaluate its feasibility and
performance in this section.

A. Experiment Setup

Fig. 5 shows the prototypical BBS, which has three or-
ganizations O = {O1, O2, O3}. Each party contributes one
physical computer. These three computers access the network
through WiFi. O1 and O2 perform as the sender and the
receiver. The sender computer and the receiver computer are
located in different buildings on a university campus. Fabric
nodes run in Docker containers. The sender computer and
the receiver computer respectively run one peer node and one
client node. The computer of O3 runs one peer node and one
orderer node. We set a single orderer node, which performs the
equivalent functions as a group of orderer nodes, according to
the ofﬁcial Fabric test-network. We integrate an off-state stor-
age and the SFTP [11] service into peer nodes of interest. The
smart contract is called chaincode in Fabric. The chaincode is
developed using Golang. The chaincode runs in peer nodes,
and can transfer and retrieve ﬁles from the local off-state
storage. We use Node.js to develop the client application that a
user uses to propose transactions to the peer nodes. The node.js
application automatically runs one off-state sharing session.

B. Performance and Feasibility

We use Golang’s SFTP package to perform ﬁle transfer and
ﬁnd that the sender’s buffer size parameter affects speed and
latency of SFTP. We set the buffer size as 1MB in our system
based on Fig. 6, which measures the ﬁle transfer latency versus
buffer size. A larger buffer size than 1MB does not help the
latency much any more.

We use ﬁles of different types and various sizes to evaluate
BBS’ feasibility and performance. Table I lists those test ﬁles.

In this paper, we solve a novel problem—how to share
sensitive big data within a blockchain system autonomously

Chaincode:func AddFile ()func Agreement ()func Transfer ()func RequestKey ()func QueryKey ()Peer1Off-State@Node #1I/OWorld State:file recordevent recordI/OWorld State:file recordevent recordOrg 2 – ReceiverOrderer 1Client 11. Proposal2. Response1. Proposal2. Response3. TxOrg 1 – Sender4. Block5. Verify5. Verify4. BlockF1F3F2Chaincode:func AddFile ()func Agreement ()func Transfer ()func RequestKey ()func QueryKey ()Peer2Off-State@Node #2F4F6F5World State:file recordevent recordOrg 3 – Auditor5. VerifyChaincode:func AuditPolicy1 ()func AuditPolicy2 ()func AuditPolicy3 ()Peer3Client 2a. SCPb. SCPc. SFTP4. BlockChaincodePeer1Off-State@Peer 1Computer 2: Receiver@Org2Orderer 1Client 11. Proposal2. Response1. Proposal2. Response3. Tx Computer 1: Sender@Org14. Block5. Validate5. Validate4. BlockF1F3F2ChaincodePeer2Off-State@Peer 2F4F6F5Computer 3: Auditor@Org35. ValidateChaincodePeer3Client 2a. SFTPb. SFTPc. SFTP4. BlockWorld State:file profileevent encryption keyWorld State:file profileevent encryption keyWorld State:file profileevent encryption keyChaincode:func SetPermission ()func TransferFile ()func RequestKey ()Peer1Off-State@Peer 1Org 2 – ReceiverOrderer 1Client 11. Proposal2. Response1. Proposal2. Response3. TxOrg 1 – Sender4. Block5. Validate5. Validate4. BlockF1F3F2Chaincode:func SetPermission ()func DecryptFile()Peer2Off-State@Peer 2F4F6F5Org 3 – Auditor5. ValidateChaincode:func Audit ()Peer3Client 2a. SFTPb. SFTPc. SFTP4. BlockWorld State:file profileevent encryption keyWorld State:file profileevent encryption keyWorld State:file profileevent encryption keyTABLE I
TEST FILE LIST

Type
.pdf
.mp4
.tif
.zip
.rar
.zip

Fig. 6. SFTP latency versus buffer size

Describtion
“C++ Primer Plus” eBook

Size
67MB
218MB An over 5 hours song list video
576MB The image of Moon from NASA
1.2GB
2.6GB
5.3GB

A collection of medical images
The compressed ﬁle of one movie
The compressed ﬁle of two movies

TABLE II
PERCENTAGE OF SFTP LATENCY IN “TX: FILE
TRANSFER” LATENCY

Size
67MB
218MB
576MB
1.2GB
2.6GB
5.3GB

1 Parallel
75.30%
88.05%
92.43%
91.18%
86.24%
85.84%

2 Parallel
85.33%
92.82%
94.86%
85.13%
85.71%
83.56%

4 Parallel
93.38%
95.73%
87.50%
83.86%
84.36%
81.39%

8 Parallel
92.01%
84.13%
82.33%
83.71%
84.08%
82.68%

Fig. 7. Transaction latency of “Tx:
transfer request” and “Tx: key ac-
cess”

Fig. 8. SFTP latency and transac-
tion Latency of “Tx: ﬁle transfer”
and “Tx: ﬁle decryption”

Fig. 9. File sharing session latency

Fig. 10. Transaction latency of “Tx:
transfer request” in different parallel
transfer cases

Fig. 11. Transaction latency of
“Tx: key access” in different par-
allel transfer cases

Fig. 12. Transaction latency of
“Tx: ﬁle transfer” in different par-
allel transfer cases

Fig. 13. Transaction latency of
“Tx: ﬁle decryption” in different
parallel transfer cases

Fig. 14. Average ﬁle sharing session
latency in different parallel
transfer
cases

and with no charge, and establish the chain of custody of the
shared data securely. Such a data sharing application is critical
for protecting intellectual property (IP) and ﬁghting industrial
espionage in ﬁelds including biomedical research. Three chal-
lenges including storage space limitation, privacy requirement
and security requirement are identiﬁed in implementing the
blockchain big-data sharing system (BBS). We denote data
such as a big ﬁle stored at a blockchain node but outside
of the ledger as off-state. We carefully present our off-state
sharing protocol. The transactions generated by our protocol
will serve as auditing evidences for the chain of custody. We
implement BBS over Hyperledger Fabric and conduct exten-
sive experiments to evaluate its feasibility and performance.

REFERENCES

[1] A. M. Antonopoulos, Mastering Bitcoin: unlocking digital cryptocur-

rencies.

” O’Reilly Media, Inc.”, 2014.

[2] Wikipedia, “Chain of custody,” 2021, [Online]. (Accessed 27 October
2021). [Online]. Available: https://en.wikipedia.org/wiki/Chain of cus
tody

[3] K. Budd, “Foreign data theft: What academic institutions can do to

protect themselves,” November 2019.

[4] B. Wiki, “Weaknesses,” 2021, [Online]. (Accessed 26 March 2021).

[Online]. Available: https://en.bitcoin.it/wiki/Weaknesses

[5] B. Forum, “New bitcoin vulnerability: A transaction that takes at least
3 minutes to be veriﬁed by a peer,” 2021, [Online]. (Accessed 26
March 2021). [Online]. Available: https://bitcointalk.org/index.php?to
pic=140078.0

[6] Etherscan, “Ethereum average gas

[Online].
(Accessed 26 March 2021). [Online]. Available: https://etherscan.io/c
hart/gaslimit

limit chart,” 2021,

[7] C. Gorenﬂo, S. Lee, L. Golab, and S. Keshav, “Fastfabric: Scaling
hyperledger fabric to 20 000 transactions per second,” International
Journal of Network Management, vol. 30, no. 5, p. e2099, 2020.
[8] S. Dziembowski, L. Eckey, and S. Faust, “Fairswap: How to fairly
exchange digital goods,” in Proceedings of the 2018 ACM SIGSAC
Conference on Computer and Communications Security, 2018, pp. 967–
984.

[9] P. Zhang, J. White, D. C. Schmidt, G. Lenz, and S. T. Rosenbloom,
“Fhirchain: applying blockchain to securely and scalably share clinical
data,” Computational and structural biotechnology journal, vol. 16, pp.
267–278, 2018.

[10] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin, K. Christidis,
A. De Caro, D. Enyeart, C. Ferris, G. Laventman, Y. Manevich et al.,
“Hyperledger fabric: a distributed operating system for permissioned
blockchains,” in Proceedings of the thirteenth EuroSys conference, 2018,
pp. 1–15.

[11] Wikipedia, “Ssh ﬁle transfer protocol,” 2021, [Online]. (Accessed 6
Apirl 2021). [Online]. Available: https://en.wikipedia.org/wiki/SSH F
ile Transfer Protocol

271.55196.48114.8386.3982.4782.5881.36658.36435.99250.62187.71182.05185.61189.165015025035045055065075010KB20KB200KB1MB100MB500MB1GBSFTP Latency (s)Buffer Size576MB1.2GBFileSize67M218M576M1.2G2.6G5.3GLatency(s)22.533.544.55transfer requestkey accessFileSize67M218M576M1.2G2.6G5.3GLatency(s)020040060080010001200file transferSFTPfile decryption050010001500200067M218M576M1.2G2.6G5.3GLatency (s)File SizeBBSGolang SFTP (Opt)Linux SFTPLinux SCPFileSize67M218M576M1.2G2.6G5.3GLatency(s)22.533.544.551-P2-P4-P8-PFileSize67M218M576M1.2G2.6G5.3GLatency(s)22.533.544.551-P2-P4-P8-PFileSize67M218M576M1.2G2.6G5.3GLatency(s)0100020003000400050006000700080009000100001-P2-P4-P8-PFileSize67M218M576M1.2G2.6G5.3GLatency(s)02004006008001000120014001600180020001-P2-P4-P8-P31.3141.8567.77112.657.0486.81147.52304.58118.57244.05497.30977.67243.03544.581161.572227.06637.891397.922400.965297.641262.722493.734701.379730.880100020003000400050006000700080009000100001-P2-P4-P8-PLatency(s)ParallelNumber67M218M576M1.2G2.6G5.3G