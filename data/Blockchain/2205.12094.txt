2
2
0
2

y
a
M
4
2

]

R
C
.
s
c
[

1
v
4
9
0
2
1
.
5
0
2
2
:
v
i
X
r
a

Towards Better Privacy-preserving Electronic
Voting System

Zipeng Yan, Zichao Jiang, Yiyuan Li
Computer Science Department, University of North Carolina, Chapel Hill

Abstract

This paper presents two approaches of privacy-preserving voting sys-
tem: Blind Signature-based Voting (BSV) and Homorphic Encryption
Based Voting (HEV). BSV is simple, stable, and scalable, but requires ad-
ditional anonymous property in the communication with the blockchain.
HEV simultaneously protects voting privacy against traﬃc-analysis at-
tacks, prevents cooperation interruption by malicious voters with a high
probability, but the scalability is limited. We further apply sampling to
mitigate the scalability problem in HEV and simulate the performance
under diﬀerent voting group size and number of samples.

1

Introduction

Voting is an essential element of the current social and political systems. In-
dividual voting result is a personal privacy which voters may be unwilling to
release publicly, especially to the supports of the lost candidate or proposal. The
prevailing of electronic voting systems with tracable electronic traces increase
the concern of privacy disclosure.

Currently there are many popular privacy-preserving techniques, such as
multi-party computation and diﬀerential privacy. However, in real-world voting,
the security of the former methods relies on splitting an authority into multi-
parties, which usually lacks eﬀective supervisions. Meanwhile, The decision-
making of a voting process is threshold-based. Therefore, it is hard to deploy
diﬀerential privacy-based methods, which requires a less sensitive information
accuracy of individual votes.

In this paper, we present two approaches towards privacy-preserving elec-
tronic voting system. The ﬁrst approach is a blind signature based voting (BSV),
where we apply blind signature to ensure each vote only comes from eligible vot-
ers and the government is not able to access the content. The second approach is
homomorphic encryption based voting (HEV), where we use homomorphic en-
cryption to calculate the encrypted votes directly and hide individual votes. We
also update HEV into homomorphic encryption voting with sampling (HEVS),
which has resistance on malicious voters involved who try to ruin the result.

We explain the background and our threat models in Section 2. In Section 3
we brieﬂy discuss our two protocols. We show possible loopholes for both of
the approaches and possible solutions in Section 4. And we demonstrate and
explain our experiment results in Section 5.

1

 
 
 
 
 
 
2 Background

In our setting, voting consists of at least two parties: voters and the government.
Voters are the main content of voting who submit ballots. The government is the
authority determining the eligibility of voters, counting ballots, and publishing
the results. We assume that government is able to identify all eligible voters
and ignores the votes from any other ineligible voters.

Privacy-preserving voting aims at protecting voters’ voting result(e.g. for or
against) from any others, including the government. The government gets the
overall result only, instead of individual results.

Our voting environment is electronic, where voters and the government com-
municate through electronic devices1. During the communication, everything,
including ballots, can be recorded. Thus, anyone who has recorded individual
data can never revealed the result of its vote.

Threat Models

Our solution assumes two levels of adversaries: semi-honest voters and semi-
honest government will cooperate together to get information but do not deviate
from the protocol speciﬁcation; malicious voters and malicious government may
arbitrarily deviate from the protocol execution and do whatever they want.

Before we introduce our protocol, we argue that both of our protocols are
privacy-preserving under two levels of adversaries. However, there are ways for
malicious adversaries to halt the whole process. We provide combats in Section 4

3 Two Privacy-preserving Approaches

3.1 Blind Signature Based Voting

Blind signature is a form of digital signature where messages are signed without
revealing the content to the signer [1]. The message is blinded using a secret
blinding factor from the user prior to the signature. The signer generates a
signature for the blinded message. Then the user uses the blinding factor to
unblind the message and the signature, resulting in the original message with
a legitimate signature. Throughout the process, the signer has no knowledge
about the message without accessing the blinding factor. Blind signature is
supported by many cryptographic algorithms including RSA and Elliptic Curve.

Protocol Blind Signature Voting (BSV)

Notation.
V = {V1, V2, ...Vi, ...Vn} is the group of eligible voters. ∀i ∈ {1, 2, ...n}, voter Vi
holds a vote mi.
Gt denoted the government who can identify these n voters.
B denoted a decentralized blockchain.
Protocol detail in appendix A

In Protocol A, every voter do a blind signature protocol with the government.
Then voters publish their unblinded vote with the signature of the government

1computers, databases, etc.

2

to a blockchain through some anonymous channel. The blockchain is used B
to make the published ballots unmodiﬁable. After a period of time, B stop
collecting ballots and anyone can check the blockchain to know the voting result.
There are many projects of secure voting system using blind signature and

blockchain [5] [4].

3.2 Homomorphic Encryption Based Voting

Homomorphic encryption is a cryptographic tool of encryption model that al-
lows computation on ciphertexts [3]. To achieve a privacy preserving electronic
voting system, encryption of ballots is needed. And the ballot counting is an
additive computation. Therefore, homomorphic encryption can be used to com-
pute ciphertexts 2 directly, with every ballot encrypted, which inherently pro-
tects voters’ privacy. Moreover, additive homomorphic encryption is the only
encryption involved.

In Protocol B, we use a modiﬁed version of Elgamal encryption with thresh-
old decryption [2]. Speciﬁcally, eligible voters generate secret key pieces sKi and
use them to generate a public key pK with the cooperation of the government
Gt. Then voters use the public key to submit their vote, 0 or 1. The government
aggregates the encrypted result and starts a threshold decryption to decrypt the
aggregated result. During the entire process, the individual secret key sKi is
not exposed to anyone. Therefore, individual result is safe and private in all
circumstances.

Protocol Homomorphic Encryption Voting (HEV)

Notation.
V = {V1, V2, ...Vi, ...Vn} is the group of eligible voters. ∀i ∈ {1, 2, ...n}, voter Vi
holds a vote vi ∈ {0, 1}.
Gt denoted the government who can identify these n voters.
G is a cyclic group of order q with generator g.
o is the aggregated result from Gt.
Protocol detail in appendix B

Theorem 3.1. If the protocol is strictly followed, o = g
pendix C).

(cid:80)n

i=1 vi (Proof in ap-

(cid:80)n

After the threshold decryption 5, the government collects the result o =
i=1 vi, and what we want is (cid:80)n
g
i=1 vi. As a discrete log problem, this is a
n-bounded problem. However, the result can be veriﬁed by matching the re-
sult with g0, g1, g2, ..., gn. Generally, n is bounded by the population, and the
computation and comparison can be paralleled. Thus the result (cid:80)n
i=1 vi can be
retrieved with reasonable cost.

4 Discussion and Improvements

In this section we address potential issues in the design and possible solutions.

2the ballots

3

4.1 Potential Attacks on BSV

Traﬃc Analysis

In BSV protocol, the voter have to publish the ballot to the block chain for it
to be counted. This creates the risk of traﬃc analysis which an adversary can
correlate the ballot with the voter by monitoring the network traﬃc from the
voter to the blockchain. There are several ways to evade such attack. A Mixnet
system can be used in conjunction with the blockchain. Using DC-net system
can achieve similar eﬀect but its limited through put make it less suitable for
large scale voting. To further increase the anonymity set, one can designate all
ballots to be casted in a certain period of time to ensure that there would be
a suﬃcient number of voters posting their ballot at any moment. Depending
on the implementation, the voting authority G can reveal the voter’s identities
through timing analysis if the ballots are casted immediately after the voters
request signatures from G. Thus it is recommended to introduce a large, random
delay between the signing and posting of the ballot. This can be done by making
the ballot signing timeframe and voting timeframe non-overlapping.

4.2 Potential Attacks on HEV

The stability of homomorphic encryption voting protocol relies on the honesty
of all parties involved. The design of HEV protects the privacy of voters against
dishonest authority. On the other hand, the voting result can be easily invali-
dated by repeated voting from malicious voters. The tentative combats on these
threats are explained in the following.

Extra Votes

In the basic encryption setting, each individual voter is supposed to encrypt 0
for against and 1 for support. However, theoretically, voters are free to encrypt
other numbers like 2 or 3 to earn extra votes. For example, with a voter group
of 3, V1 encrypted 3 in its voting message would dominate the aggregated result
if all the other voters are honest. Since the message is encrypted by individual
voters, there is no way for the government to tract this kind of cheating.

One way to combat this is to add a zero-knowledge proof on top of the
voting procedure to prove that the voter is really sending a 0 or 1 instead of
other invalid numbers. To make the failing probability negligible, multiple tests
of zero-knowledge proof are needed, in the cost of extra network traﬃc.

Cooperation Interruption

The original HEV requires all voters to remain cooperative through the entire
protocol. However, this may not hold due to various active and passive actions.
For instance, voters turn oﬄine after voting submissions and during threshold
decryption (one potential reason is the network disconnetion). Moreover, some
voters can decide to not send the decryption result in threshold decryption or
even send something random instead of ˆXi = XR
sKi. The ﬁnal result is hard to
obtain in either way (or being inaccurate) because the government requires de-
cryption results from all voters to compute W . We believe a stochastic approach
in the protocol helps mitigate the interruption eﬀects.

4

Assumption

For simplicity, we assume that malicious voters behave like honest voters and
vote against (0) before threshold decryption but interrupt the cooperation in
threshold decryption by providing fake data (instead of using their own secret
keys). We also assume that the result becomes unreliable if any malicious voters
are involved in the communication. If the result we get matches the result with
same group of voters and all being honest, it is considered as reliable.

Partial Public Key Generation

A primary solution is based on partial public key generation. Speciﬁcally, the
public key generated only relies on a sampled subset of the voter group, in-
stead of the entire group as in the original HEV protocol. To achieve this, the
government randomly samples t public key pieces from n pieces collected from
n voters, and generates the public key only based those t pieces. Therefore,
even though there are m voters being interrupted, the probability of having a
. For instance, when n = 50, m = 5 ( m
n = 0.1), on
2 = 25, P = 0.025, which means even if malicious voters are

reliable result is P =
expectation t = n
not majority, the probability of getting a reliable result is almost 0.

(n−m
t )
(n
t)

K-Sampling

To improve the performance of the HEV protocol with sampling, we can upgrade
the primary solution. In Protocol 4.2, instead of sampling once and generate one
public key, Gt samples k times and generates k public keys. After the threshold
decryption Gt gets k results, then mode is selected as the ﬁnal result. We argue
that if the honest voters are the majority, there are ways to get reliable result
with almost 100% probability by adjusting the parameter k.

5

Protocol 1 HEV with Sampling

Additional Notations.
k is the total number times of sampling Gt does, also being the number of public
key pieces pK uses
tj ∈ {t1, t2, ..., tk} is the number of keys chosen from voters in the j-th sampling
(with replacement).
1 , pK (j)
{pK (j)
pling, where pK (j)

tj } is the set of chosen public key pieces in the j-th sam-

2 , ..., pK (j)

tn can equal for some m, n.

tm , pK (j)

Procedure:

1. Public Key Generation : Same as Protocol B

2. Public Key Broadcast

(a) Receiving all public key pieces {pKi}, i ∈ {1, 2, ...n}.
2 , ..., pK (j)
(b) Gt randomly picks tj pieces {pK (j)

1 , pK (j)

tj } where pK (j)

tj ∈

{pKi}

(c) Gt computes the j-th public key pK (j) = Πtj
(d) Gt repeats 2b - 2c k times, generating {pK (1), pK (2), ..., pK (k)}
(e) Gt broadcasts (pK (1), pK (2), ..., pK (k)) to all members of V.

m=1pK (j)

m

3. Vote Delivery

(a) Same as Protocol 2. for each pK (j), j ∈ {1, 2, ..., k}, the correspond-
)

ing vote for pK (j) is (X (j)

(b) Each Vi sends all (X (j)

i

4. Vote Aggregation

, Y (j)
i

i
, Y (j)
i

) to Gt.

(a) Gt calculates (X (j)
, Y (j)
i
(b) Gt generates {(X (j)

R , Y (j)
) as in Protocol 4.
R , Y (j)

(X (j)
i

R )}, j ∈ {1, 2, ..., k}.

R ) = (ΠR

i=1X (j)

i

, ΠR

i=1Y (j)

i

) for each pair of

5. Threshold Decryption

R , d) to V where d indicates pending decryption

R , Y (j)

(a) Gt sends all (X (j)
action from Vi.
(b) Each Vi sends ( ˆX (j)
i
, Y (j)
(c) For each ( ˆX (j)

sKi

, Y (j)

R ) = (X (j)

R ) to Gt as in Protocol 2.5
, where he only
multiplies the voters’ feedback if Vi is involved in the sampling and
computation of pK (j), then he compute o(j) = YR/W

R ), Gt computes W (j) = Πtj

ˆX (j)
q

, Y (j)

q=1

R

i

(d) Gt gets {o(1), o(2), ..., o(k)}, then he picks the Mode as the ﬁnal result.

Theorem 4.1. If there are more (semi-)honest voters than malicious voters,
the Mode of {o(1), o(2), ..., o(k)} is the reliable result.

6

Proof. Instead of a rigorous proof, we present idea of the proof.

According to assumption 4.2, if the j-th sampling contains honest voters
only, then the result is reliable; otherwise, if the j-th sampling contains any
number malicious voter, we assume the result is unreliable (We ignore fake
positive cases3). The idea is that, even if the same malicious voter participated
in two generation steps of public keys pK (e) and pK (f ) and the corresponding
fake threshold decryption responses ( ˆX (e)
R ) are identical.
i
Since (cid:80) r(e) and (cid:80) r(f ) are diﬀerent, their result o(e) and o(f ) map to two
diﬀerent elements in the group G:
R ) = (X (e)

R
where rd is a random number, then the two results don’t equal.

R ) and ( ˆX (f )

R ) and ( ˆX (f )

R ) = (X (f )

Suppose ( ˆX (e)

, Y (f )

, Y (f )

, Y (f )

, Y (e)

, Y (e)

, Y (e)

R ),

rd

rd

R

i

i

i

o(e) =

(cid:80) r(e)
(gsK(e)
)
(gsK(e)−rd)(cid:80) r(e)

· g

(cid:80) v

(cid:54)= o(f ) =

)

(cid:80) r(f )
(gsK(f )
(gsK(f )−rd)(cid:80) r(f )

· g

(cid:80) v

Thus we can assume that the results of diﬀerent failing sampling groups
(results are unreliable) are diﬀerent.
If you have the same results, there is
negligible probability that they are related to malicious voters. Thus, even two
or three consistent results can be considered as the reliable result. Therefore
choosing the Mode of {o(1), o(2), ..., o(k)} is a reliable result.

5 Experimental Results

According to our assumption 4.2 and Theorem 4.1, we simulate experiments
based on the number of voters n, the probability that a voter is malicious pf ail,
and the number of sampling k. Figure 1 shows the performance of getting
at least two consistent results and Figure 2 shows the performance of getting
at least three consistent results. The result is averaged from 3 random seeds.
Our protocol achieves almost 100% accuracy for no more than 500 voters when
pf ail = 0.01 when sampling more than 6 times. The protocol is almost accurate
for no more than 200 voters when pf ail = 0.1 if sampling more than 16 times,
which improves the performance of almost zero for the primary solution instance.
For more than half malicious voters, the protocol doesn’t remain eﬀectiveness.

6 Conclusion

This work provides two approaches for privacy-preserving electronic voting sys-
tem. Both of them are privacy preserving under semi-honest government. The
BSV protocol widely accepted in current literature, which is stable under semi-
honest and malicious voters. The HEV protocol is stable under semi-honest
voter and the updated HEVS provides stability under malicious voters. There
is no solution for a malicious government who rejects all communications.

References

[1] David Chaum. Blind signatures for untraceable payments. In Advances in

cryptology, pages 199–203. Springer, 1983.

3For example, two malicious voters occasionally do the decryption for each other.

7

[2] Taher ElGamal. A public key cryptosystem and a signature scheme based on
discrete logarithms. In George Robert Blakley and David Chaum, editors,
Advances in Cryptology, pages 10–18, Berlin, Heidelberg, 1985. Springer
Berlin Heidelberg.

[3] Craig Gentry. Fully homomorphic encryption using ideal lattices. In Pro-
ceedings of the forty-ﬁrst annual ACM symposium on Theory of computing,
pages 169–178, 2009.

[4] Yi Liu and Qi Wang. An e-voting protocol based on blockchain. Cryptology

ePrint Archive, 2017.

[5] Freya Sheer Hardwick, Apostolos Gioulis, Raja Naeem Akram, and Kon-
stantinos Markantonakis. E-voting with blockchain: An e-voting protocol
with decentralisation and voter privacy. In 2018 IEEE International Con-
ference on Internet of Things (iThings) and IEEE Green Computing and
Communications (GreenCom) and IEEE Cyber, Physical and Social Com-
puting (CPSCom) and IEEE Smart Data (SmartData), pages 1561–1567,
2018.

8

A Protocol BSV

Protocol 2 Blind Signature Voting (BSV)

Notation. V = {V1, V2, ...Vi, ...Vn} is the group of eligible voters. ∀i ∈ {1, 2, ...n},
voter Vi holds a vote mi.
Gt denoted the government who can identify these n voters.
B denoted a decentralized blockchain

Objective. Parties jointly compute (cid:80)n

i=1 vi without revealing any vi .

Procedure:

1. Public Key Generation

(a) Gt generates a public key pK and private key sK.

(b) Gt announces pK to the public.

2. Ballot Blinding

(a) Each voter generates a ballot in the form of (mi, r), where mi is the

ballot content and r is a large randomly generated number.

(b) Through a secret blinding factor b, each voter blinds the ballot into

(mi, r)(cid:48) and sends it to Gt.

3. Signature

(a) After verifying the voter’s eligibility, G produces signatures s(cid:48) on the

blinded ballots (mi, r)(cid:48) and sends s(cid:48) back to the voters.

4. Ballot Unblinding

(a) Using the blinding factor b, each voter unblinds s(cid:48) into s, where s

equals sig((m, r)).

(b) The voters send the signed ballot (m, r, s) to the blockchain B.

5. Ballot Veriﬁcation

(a) B accept a given ballot (m, r, s) if and only if:
The signature s can be veriﬁed with pK.
The random number r in (m, r, s) did not appear in any of the pre-
vious ballots.

9

B Protocol HEV

Protocol 3 Homomorphic Encryption Voting (HEV)

Notation. V = {V1, V2, ...Vi, ...Vn} is the group of eligible voters. ∀i ∈ {1, 2, ...n},
voter Vi holds a vote vi ∈ {0, 1}.
Gt denoted the government who can identify these n voters.
G is a cyclic group of order q with generator g.
o is the aggregated result from Gt.

Objective. Parties jointly compute (cid:80)n

i=1 vi without revealing any vi .

Procedure:

1. Public Key Generation

(a) Each voter Vi chooses a random number sKi from {1, 2, ..., q − 1}.
(b) Each voter Vi computes public key piece pKi = gsKi and send it to

G.

2. Public Key Broadcast

(a) After receiving all the pKi (i ∈ {1, 2, ...n}), Gt computes the public

key pK = Πn

i=1pKi

(b) Gt broadcasts pK to all members of V.

3. Vote Delivery

(a) After receiving pK, each voter Vi generates a random number ri from

G, and computes Xi = gri, Yi = pK ri · gvi.

(b) Each Vi sends (Xi, Yi) to Gt.

4. Vote Aggregation

(a) Gt calculates (XR, YR) = (ΠR

i=1Xi, ΠR

i=1Yi). with R is the number of

votes received. the computing stops when R equals to n.

5. Threshold Decryption

(a) Gt sends (XR, YR, d) to V where d indicates pending decryption ac-

tion from Vi.

(b) Each Vi sends ( ˆXi, YR) = (XR

sKi, YR) to Gt

(Vi can ﬁrst check whether the received (XR, YR) equals(Xi, Yi), if
so, he refuses to decrypt.)

(c) After receiving all the ( ˆXi, YR), Gt computes W = Πn

ˆXi, then he

i=1

compute o = YR/W

10

C Proof of Theorem 3.1

Proof.

W = Πn

i=1

ˆXi = Πn

sKi

i=1XR
(cid:80)n

i=1 sKi

= X
R
= (ΠR
i=1Xi)
i=1gri)
= (ΠR
(cid:80)R
i=1 ri)

= (g

(cid:80)n

i=1 sKi

(cid:80)n

i=1 sKi

(cid:80)n

i=1 sKi

YR = ΠR
= ΠR

= (pK

i=1Yi
i=1pK ri · gvi
i=1 ri) · g
(cid:80)n

(cid:80)n

= [(Πn

i=1pKi)
i=1gsKi)
= [(Πn
(cid:80)n
i=1 sKi)
(cid:80)R

= [(g

i=1 vi

= W · g

(cid:80)R

i=1 vi

i=1 ri] · g

(cid:80)R

i=1 vi

(cid:80)n

i=1 ri ] · g

(cid:80)R

i=1 vi

(cid:80)n

i=1 ri] · g

(cid:80)R

i=1 vi

Then o = YR/W = g

(cid:80)n

i=1 vi if R = n

D Experiments

11

Figure 1: Accuracy according to diﬀerent failure ratio of the users and number
of sampling times with at least 2 consistent result.

Figure 2: Accuracy according to diﬀerent failure ratio of the users and number
of sampling times with at least 3 consistent result.

12

5102050801002005008001k2k5k8k10kNumber of Voters0.00.10.20.30.40.50.60.70.80.91.0Accuracy#p_fail=0.01sample=1sample=2sample=4sample=8sample=16sample=32sample=645102050801002005008001k2k5k8k10kNumber of Voters0.00.10.20.30.40.50.60.70.80.91.0Accuracy#p_fail=0.1sample=1sample=2sample=4sample=8sample=16sample=32sample=645102050801002005008001k2k5k8k10kNumber of Voters0.00.10.20.30.40.50.60.70.80.91.0Accuracy#p_fail=0.5sample=1sample=2sample=4sample=8sample=16sample=32sample=645102050801002005008001k2k5k8k10kNumber of Voters0.00.10.20.30.40.50.60.70.80.91.0Accuracy#p_fail=0.6sample=1sample=2sample=4sample=8sample=16sample=32sample=645102050801002005008001k2k5k8k10kNumber of Voters0.00.10.20.30.40.50.60.70.80.91.0Accuracy#p_fail=0.01sample=4sample=8sample=16sample=32sample=645102050801002005008001k2k5k8k10kNumber of Voters0.00.10.20.30.40.50.60.70.80.91.0Accuracy#p_fail=0.1sample=4sample=8sample=16sample=32sample=645102050801002005008001k2k5k8k10kNumber of Voters0.00.10.20.30.40.50.60.70.80.91.0Accuracy#p_fail=0.5sample=4sample=8sample=16sample=32sample=645102050801002005008001k2k5k8k10kNumber of Voters0.00.10.20.30.40.50.60.70.80.91.0Accuracy#p_fail=0.6sample=4sample=8sample=16sample=32sample=64