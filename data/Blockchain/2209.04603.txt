Fighting Sybils in Airdrops

Zheng Liu
Nanjing University of Posts and Telecommunications
Nanjing, China
zliu@njupt.edu.cn

Hongyang Zhu
Citrix Systems, Inc.
Nanjing, China
zhuhongyang1998@gmail.com

2
2
0
2

p
e
S
0
1

]

R
C
.
s
c
[

1
v
3
0
6
4
0
.
9
0
2
2
:
v
i
X
r
a

Abstract—Airdrop is a crucial concept in tokenomics. Startups
of decentralized applications (DApps) reward early supporters
by airdropping newly issued tokens up to a certain amount
as a free giveaway. This naturally induces greedy hackers,
called Sybils, to create multiple accounts for more shares. Most
airdrops have prerequisites for qualiﬁcation, in which utilizing
these DApps is unsurprisingly the principal. One particular
characteristic of DApps is to implement users’ interactions
with them in the form of token transfer transactions or smart
contract calling transactions on public blockchains. We argue
that
these individual transactions could reveal underlying
signatures of their sending accounts. Speciﬁcally, accounts con-
trolled by the same Sybil may exhibit some common behaviors.
A careful analysis of Sybil’s behaviors shows that accounts
controlled by the same Sybil may produce similar DApp
activities and regular token transfer patterns. We model the
transactions as graphs by representing accounts as vertices
and transactions as edges. When multiple accounts receive
tokens from the same Sybil to conduct interactions with DApps,
we inspect the graphs for these activities and patterns to
detect suspicious accounts. We demonstrate the effectiveness
of the proposed method in a recent airdrop by presenting the
suspicious accounts controlled by Sybils. All the detected ac-
counts exhibit similar interaction activities and regular transfer
patterns.

1. Introduction

Tokenomics is a crucial factor in the success of de-
centralized applications (DApps) or projects [1]. It
is a
portmanteau of ”token” and ”economics”, which refer to
all aspects of tokens issued by decentralized applications or
projects, from the token’s supply to its allocation, from the
token’s incentive design to its utility. One signiﬁcant part
of tokenomics is the initial coin offering (ICO) [2], which
could raise capital for projects through selling digital assets,
newly issued crypto tokens typically.

However, part of the native tokens in an ICO could
be a free giveaway to early supporters or potential users.
This is called airdrops. There are two reasons why airdrops
give out crypto tokens for free [3], [4]. On the one hand,
crypto airdrops are a market promotion strategy for startups
and new projects. Through airdrops, startups try to gain

public awareness and emerge victorious from the crowded
market with thousands of crypto tokens. Token holders and
users could boost
the building of a community for the
project, eventually bringing a positive inﬂuence on token
demand. On the other hand, with the increasing regulation
and enforcement against ICOs, more startups skip the public
sale of an ICO altogether and use airdrops as a distribution
mechanism to avoid regulatory scrutiny.

With the opportunity to obtain newly issued tokens for
nearly free, it is unsurprising that a considerable number
of greedy hackers, called Sybils, are allured to lurk in
almost all DApp projects with potential airdrops. Sybils exist
everywhere in the crypto ﬁeld [5], [6]. For example, one can
take over a peer-to-peer network by managing many nodes
or computers. Airdrop in tokenomics does not necessarily
mean sending gift tokens to more users is better. The token
supply on the liquidity market directly inﬂuences the token’s
value, so this is a subtle trade-off for DApp startups. DApp
teams often set up rules for airdrop qualiﬁcation, and among
the prevalent prerequisites, utilizing these DApps is known
to be a must.

It is known by Sybils too. To seize bigger proﬁts from
more tokens, A Sybil often creates multiple accounts, oper-
ates each account to utilize dedicated DApps, and expects
airdrop qualiﬁcations of all
the accounts. It seems that
Sybils increase the popularity of DApps by bringing more
activities, but these activities are from factitious users whose
presence degenerates normal users’ rewards. Therefore, de-
tecting the suspicious accounts controlled by Sybiles is a
crucial task in airdrops.

When a Sybil creates multiple accounts, a computer
problem called bot is usually employed to manage these
accounts and their interactions with DApps. One character-
istic of DApps that separates them from traditional applica-
tions is to implement users’ interactions with them in the
form of token transfer transactions or smart contract calling
transactions on public blockchains. We argue that
these
individual transactions could reveal underlying signatures
of their sending accounts. Speciﬁcally, accounts controlled
by the same Sybil may exhibit some common behaviors.

Sybil detection is to ﬁnd accounts possibly controlled by
Sybils. In the following of this paper, we explore solutions
by qualifying and identifying these common behaviors.

 
 
 
 
 
 
• We carefully analyze Sybil’s behaviors along with a
DApp project recently airdropped, Hop Protocol. We
formulate Sybil’s attack model and inspect Sybil’s
activities in the form of transactions. This leads us to
the result that accounts controlled by the same Sybil
exhibit similarities and regularities in transactions
when interacting with DApps. (Section 3).

• We design a new representation of DApp activity se-
quences produced by DApp interactions and employ
a popular clustering algorithm to discover cohesive
groups. We model the token transfer transactions
as graphs by representing accounts as nodes and
transactions as edges and propose algorithms for
searching both sequential and radial patterns. (Sec-
tion 4)

• We demonstrate the effectiveness of the proposed
framework in a recent airdrop event by presenting
and analyzing the suspicious accounts controlled by
Sybils. All the detected accounts exhibit similar ac-
tivities and regular token transfer patterns. (Section
5).

Besides, we discuss some limitations and interesting
issues s in the proposed framework, as well as its possible
improvements and extensions as future work of our study.
(Section 6)

2. Background

This section introduces the background knowledge of
the study in this paper, including blockchains, decentralized
applications, and token economics. Interested readers could
refer to recent surveys and books, such as [7]–[10], for a
comprehensive overview and details.

2.1. Blockchain and Transactions

Since Satoshi Nakamoto’s breakthrough in cryptocur-
rency in 2008 [11], Bitcoin’s underlying infrastructure,
blockchain, has attracted signiﬁcant attention from both
industries and academics. Blockchain is a distributed ledger
designed to maintain a record of transactions in a decen-
tralized manner without the help of a centralized institution.
Here, transactions in the form of singed structure texts are
state-changing instructions indicating the transfer of some
funds or tokens from one account to another1. A blockchain
account has a unique identiﬁer, denoted as an address so
that tokens can be sent and received, similar to a bank
account’s account number. Every address is unique and, in
fact, a hashed version of the public key in an asymmetric
cryptography system [12]. It has 26 to 40 alphanumeric
characters. In the following of this paper, we may use
”account” and ”address” interchangeably when there is no
obvious ambiguity.

1. An account here is an externally-owned account (EOA), which a
particular user with the private key controls. In modern blockchains like
Ethereum, another type of account is the contract account, where a smart
contract is deployed to the network, controlled by code.

In order to embrace the ﬁdelity and security of the dis-
tributed ledger without the trusted central party, a blockchain
organizes its transactions by employing a fundamental struc-
ture, blocks. Each block comprises a series of transactions.
These blocks are coupled by computing the cryptographic
hash of several inputs, such as protocol version, previous
block hash, Merkle root hash of all
transactions in the
block, timestamp, and nonce. It is worth noting that var-
ious blockchains have slight differences in calculating the
block hash. Blockchain exempliﬁes a distributed computing
system with high Byzantine fault tolerance [13]. Typically,
a peer-to-peer network is responsible for managing the dis-
tributed ledger based on well-designed protocols. Nodes in
the network receive newly broadcasted transactions, validate
new transaction blocks, and obtain rewards in return.

2.2. Decentralized Applications and Smart Con-
tracts

With the continuously growing popularity of blockchain
technology, decentralized applications are fruitful in decen-
tralized ﬁnance due to their trustless and transparent nature.
Nowadays, DApps are associated with more areas such
as games, gambling, storage, governance, identity, media,
social, security, energy, insurance, health, and many others.
Developers have different opinions on what precisely a
DApp is [14], [15]. Many new models have emerged. How-
ever, the consensus is that DApp can operate autonomously
and run on a decentralized computing infrastructure such as
blockchains. Here, decentralized means no node instructs
any other node on what to do.

The cornerstones of DApps are smart contracts in ad-
vanced blockchains, which provide the ability to execute
computer programs [16]. The objective of smart contracts
is to enforce the agreements between unrusted parties. The
bitcoin protocol is a weak version of the smart contract
concept. Other recent blockchains, such as Ethereum and
Solana, propose Turing-complete versions based on the So-
lidity or the Rust programming language. Smart contracts
are deployed on the chain and could be triggered by user-
submitting transactions with executing parameters. Smart
contracts enforce the execution of the functions via codes,
which are trackable and irreversible if the execution suc-
ceeds.

2.3. Tokenomics and Airdrops

Tokenomics is a signiﬁcant factor in the success of DApp
projects. Tokenomics refer to all economic aspects of tokens
issued by DApp projects, from token’s supply to allocation,
from token’s incentive design to utility. For instance, the
token incentive is a powerful new tool for bootstrapping
the business in the early stage. When investors inspect the
intricate value of an attractive project, an ingenious design
of incentive mechanism could attract new investments to
these tokens, resulting in boosted token value.

Founders of successful DApps design tokenomics in
their projects very carefully. One key part among them is

the initial coin offering (ICO) [17], which could raise capi-
tal through selling digital assets, i.e., newly issued crypto
tokens. ICO funding activities are escalating since 2017,
and the largest ICO raised a record-breaking $4.1 billion
[18]. ICO is similar to initial public offering (IPO) in the
real-world ﬁnancial market. However, the difference is that
ICO investors do not own an equity state of the company
behind the DApp. Sometimes token issues tend to exploit
the regulatory loopholes due to the opacity, resulting in
signiﬁcant risks to the investors [19].

However, part of the tokens in an ICO could be a free
giveaway to DApp’s early supporters or potential users. This
operation is called airdrop. There are two major reasons
why DApp teams are willing to airdrops give out crypto
tokens for free. On the one hand, token airdrops are a market
promotion strategy for new DApps projects and startups.
Startups try to gain public awareness and emerge victorious
from the crowded market with thousands of crypto tokens
through airdrops. Token users and holders could elevate
the DApp communities to an upper level, which eventually
brings a positive inﬂuence on token demand. On the other
hand, regulation and enforcement against ICOs are increas-
ing. More and more startups skip the public sale of ICOs
altogether and instead use airdrops as a distribution mech-
anism to avoid regultory scrutiny. The ﬁrst cryptocurrency
airdrop, AuroraCoin2, can be traced back to 2014, while now
airdrops are almost a standard routine for DApp startups.

3. Sybil’s Behaviors

We focus on detecting Sybils in airdrops. Sybils in
airdrops expect to receive more airdrop tokens by creating
and controlling multiple accounts. Unlike other similar yet
different problems such as bot detection in social networks
introduced in the related work (Section 7),
there is no
systematic research on Sybil detection in airdrops, not to
mention the lack of corresponding labeled data.

In the following, we will investigate in detail Sybil’s
behaviors in conjunction with two decentralized ﬁnance
(Deﬁ) applications, Uniswap and Hop protocol, to provide a
solid foundation for Sybil detection. Hop protocol recently
ﬁnished its airdrop.

3.1. DApp System Model

DApps deploy smart contracts on public blockchains and
provide Web or mobile clients with graphical user interfaces
(GUI) for Dapp users. It is rare for normal DApp users
to interact with these smart contracts directly by code.
One particular feature of DApps is that DApps stores the
users’ states and interactions in the form of transactions on
blockchains.

Take the most popular decentralized ﬁnance (Deﬁ) proto-
col, Uniswap3, as an example. Uniswap allows users to swap
a particular kind of crypto token for another kind of token

Figure 1. Uniswap GUI

Figure 2. The transaction of a swap

by using the corresponding DApp4, as presented in Fig. 1.
The swapping process is based on a set of smart contracts
deployed on blockchains, such as Ethereum. One key smart
contract among them is the one of automatic market maker
(AMM). AMMs allow digital assets to be traded without
permission and automatically by using liquidity pools (LP)
instead of a traditional market of buyers and sellers. From
the blockchain point of view, users’ swaps are transactions
between users’ accounts and the smart contracts of liquidity
pools. In Fig. 1, a user wants to swap 0.01 ETH to UNI
on Ethereum. Fig. 2 shows the transaction corresponding
to the swap. The transaction shows an interaction between
address 0xb751755 and the smart contract 0x68b346. Smart
contract 0x68b346 is the swap route contract, and the LP
contract is located at 0x4e9961. These transactions record
the changes in users’ state, i.e., token transfers, and are a
proper representation of users’ interactions with DApps.

DApps are ﬂourishing. Other DApps in games, media,
social, and many others might be more complex and in-
clude both decentralized and centralized parts. However,
interactions with these DApps, which change users’ states,
are always traced back to the transactions on blockchains.
This makes it possible to analyze Sybil’s behaviors in these
DApps by studying the details of corresponding transactions.

2. https://www.ibf.is/
3. https://uniswap.org/

4. https://app.uniswap.org/
5. For simplicity, addresses are donated by their ﬁrst eight characters.

3.2. Sybil’s Attack Model

Airdrops can be pre-announced or be a surprise for early
DApp adopters. DApp projects often set up prerequisites for
airdrop qualiﬁcation, such that users need to complete some
basic activities within DApps before being qualiﬁed for an
airdrop. Sybils tend to create multiple accounts and manip-
ulate each account’s activities for airdrop qualiﬁcation, aim-
ing at obtaining more issued tokens. This breaks the original
intention of airdrops in tokenomics. Some DApps require
users to join their discord community, follow the ofﬁcial
Twitter account, or even retweet their promotion tweets.
Integrating multi-source information from social networks
to detect Sybils is not the focus of this paper, but it could
be an exciting topic for future work.

When Sybils control multiple accounts and use them
to interact with the targeted DApp, the activities of these
accounts are not much different from the ones of the or-
dinary user account. Each account usually triggers a few
functions provided by the DApp. Suppose the targeted DApp
is Uniswap, then an interaction could be swapping some
tokens or providing liquidities. However, a Sybil manip-
ulates many accounts while an ordinary user usually has
only a few accounts. In order to control multiple accounts,
a Sybil generally employs a speciﬁcally designed computer
problem, called bot, to execute the interactions from these
accounts automatically. Of course, there are also diligent
Sybils who conduct interactions by hand. In this case, we
consider them to be manual bots, and the following analysis
still holds. In the following of this paper, we may refer to
these accounts as Sybil’s accounts or bot’s accounts.

3.3. The Analysis of Sybil’s Behaviors

In the following, we will investigate in detail Sybil’s
behaviors in conjunction with a Deﬁ application, Hop Pro-
tocol6. Hop Protocol is a scalable rollup-to-rollup general
bridge that allows users to send tokens from one rollup or
sidechain to another almost immediately without having to
wait for the network’s challenge period. There are several
functionalities provided by Hop Protocol, such as ”send”,
”add liquidity”, ”convert”, and ”stake”. Deﬁ application
users can easily understand these functionalities, while in-
terested readers unfamiliar with Deﬁ could refer to Hop
Protocol’s documentation for the concrete meanings of these
functionalities. It is worth noting that the following analysis
of Sybil’s behaviors is independent of the DApp’s domains
and the concrete meanings of DApp’s functionalities.

Sybil detection is to ﬁnd the accounts controlled by the
same Sybil or bot. Recall that transactions on blockchains
record these interactions, and transactions in the form of
singed structure texts are state-changing instructions in-
dicating the transfer of some funds or tokens from one
account to another. We argue that it is possible to infer
bot’s accounts from patterns of the transactions generated
from the activities within their DApp’s interactions.

6. https://hop.exchange/

When a bot triggers activities with DApps from a con-
trolled account, it is indeed that the account interacts with
the smart contracts deployed by the DApp. The correspond-
ing transactions from the address are submitted to nodes of
a blockchain network and will be included in a block. Fig.. 2
already shows an example.

We focus on two facets of the transaction details. One
is the ﬁeld of transaction receipt event
logs, shown in
Fig. 3. These event logs reveal what kind of activities the
account triggers in the DApp. The red boxes in Fig. 3 show
three event logs emitted by the smart contract: 1) a token
transfer occurs; 2) reserves of liquidity pool are updated;
3) tokens are swapped. Then this transaction indicates the
token swap activity of the account. When a Sybil employs
a bot, a computer program to automate these interactions,
the accounts controlled by the same bot may have similar
activities on a DApp. The assumption holds that even if a
diligent Sybil is a manual bot and conducts all the activities
by hand because conducting similar activities saves human
efforts, as demonstrated in the experimental results.

The other is the ﬁeld called transaction fee. For a trans-
action to be included in a block in a blockchain, the account
submitting the transaction must have enough funds to pay
miners and states gas fees as compensation. If the account
interacts with a smart contract, the total amount of gas fees is
calculated based on the execution instructions in the code.
It is often the case that gas fees are paid with the native
token of the blockchain, e.g., Ether (ETH) on Ethereum.
One may already notice the ﬁeld tokens transferred in Fig. 2.
Some interactions between accounts and DApps involve
token transfers, such as ”swap” in Uniswap or ”Send” in
Hop protocol, so it is imperative for accounts to have some
initial funds for these interactions, as well as gas fees.

With the above observation, we propose to study Sybil’s
behaviors, speciﬁcally their account activities, by exploring
the above activity and transaction patterns.

1) DApp activities: If lots of accounts interact with
a DApp, is it possible to qualify the patterns of
similar activities in the transaction details from
accounts potentially controlled by the same bot?
Token transfers: Bot’s accounts need initial funds
for paying gas fees and interacting with DApps,
meaning these accounts must receive the funds
from somewhere. Are there any distinctive patterns
of the token transfer transactions to these accounts?

2)

3.4. DApp Activities

Different DApps could have various activities in users’
interactions. Nevertheless, almost all these interactions in-
volve the transfers of particular tokens, which can be ob-
tained from the corresponding transaction event logs. For
instance, a bot controls multiple accounts to interact with
Hop Protocol. The provided functionalities include ”send”,
”add liquidity”, ”convert” and ”stake”. When an account
triggers these functions to interact with Hop Protocol, all
these activities involve token transfers to smart contracts on
Ethereum or the layer 2 blockchains.

Figure 4. Token transfer pattern: sequential

Figure 5. Token transfer pattern: radial

by accounts cannot fall from the sky. Since bots control these
accounts, they do not hold tokens for an extended period due
to security reasons. Usually, bots manage to send tokens to
these addresses before manipulating them and collect left
tokens after all the interactions are ﬁnished. There are two
fundamental and regular token transfer patterns.

•

Sequential pattern: A bot sends some tokens from
one treasury account to the ﬁrst account. Then these
tokens are transferred from the last account receiving
the tokens to the next address under the bot’s control,
as shown in the dotted box in Fig. 4.

• Radial pattern: A bot sends some tokens from one
treasure account to all the accounts under its control
directly, as shown in the dotted box in Fig. 5. Note
that these transfers are unnecessary to happen at the
same time.

It

is not difﬁcult

these two fundamental
to see that
token transfer patterns could be combined to generate more
complex patterns. According the order of the fundamental
patterns, Fig. 6 and Fig. 7 show two possible combinations.
The pattern in Fig. 6 is radial ﬁrst, sequential later. The
bot sends some tokens from one treasure account to a set
of accounts ﬁrst, and each account in the set then sends
tokens to other accounts. The pattern in Fig. 7 is sequential
ﬁrst, radial later. Each account in the sequential pattern

Figure 3. The transaction receipt event logs of a swap

Let B denote an activity triggered by an account on a
DApp, then B is a triplet, B = (t, a, p), where t is the
timestamp when the activity happens, a is the activity type
which indicates the functionalities in the DApp, and p is the
parameter set such as the number of tokens transferred or
other input data to smart contracts. Then all activities from
account c on a DApp could be represented by a sequence of
these activities, Bc = B1, B2, ..., Bk. In this paper, we only
consider the activity type a and the parameter set p when
qualifying the similarity between interaction sequences.
Deﬁnition 1. Similar sequences. Two activities Bi and Bj
are similar, if ai = aj and pi ≈ pj, where ai, pi ∈ Bi
and aj, pj ∈ Bj. Two activity sequences Bm and Bm
are similar, if there are many activity subsequences in
Bm are similar to activity subsequences in Bm.

Note that activities in subsequences are not necessary to be
consecutive in Bm or Bn.

3.5. Token Transfers

As mentioned, Sybil’s accounts have similar activity
sequences, but to say accounts are controlled by a Sybil
purely based on their similar activity sequences is arbitrary.
There are coincidences. Many users might refer to the same
online tutorial of a DApp. In this case, they may have similar
account activity sequences. We need enhancement.

When a bot manipulates accounts to interact with smart
contracts of DApps, these accounts should have funds for in-
teracting or paying the gas fees of transactions. Tokens held

3.6. Sybil’s Behavior Model

We introduce two typical Sybil’s behavior models cor-
responding to the above two fundamental token transfer
patterns, as shown in Fig. 4 and Fig. 5. The right parts
out of the box in Fig. 4 and Fig. 5 indicate similar activities
triggered by the bot’s accounts. In Fig. 4, when a bot uses the
sequential pattern, the bot sends tokens from one treasury
to the ﬁrst account. The bot then triggers the ﬁrst account
to conduct some interactions with a certain DApp. After
ﬁnishing all the interactions, left tokens are transferred from
the ﬁrst account to the next account, and the subsequent
account continues the process in the same way.

then triggers each account

In Fig. 5, when a bot uses the radial pattern, it sends
tokens from one treasure account to all the addresses under
its control,
to conduct some
interactions with a certain DApp. In both cases, the left
tokens are usually transferred back to the treasury after
ﬁnishing all interactions, but this is optional. Some Sybils
will leave these tokens in these accounts to pretend they are
ordinary users.

Figure 6. Complex token transfer pattern: radial ﬁrst, sequential later

4. Detecting Sybil’s Accounts

This section introduces the proposed framework for de-
tecting Sybil’s accounts. Based on Sybil’s behavior analysis
in Section 3, the bot’s controlled accounts have similar
activity sequences and regular token transfer patterns. So
detecting Sybil’s accounts is discovering groups of cohe-
sive sequences and regular patterns among accounts in the
groups.

4.1. Finding Similar DApp Activities

Let us ﬁrst discuss how to ﬁnd similar DApp activity se-
quences. Recall that activity sequence Bc = B1, B2, ..., Bk
represents all activities from account c on a DApp. The
similarity between two activity sequences Bm and Bn is
deﬁned in Deﬁnition 1. However, Deﬁnition 1 only states the
requirements of the sequence similarity without indicating
how to qualify it. It is necessary to qualify the activity se-
quence similarity before putting them into cohesive groups.
It is easy to tell that two activity sequences Bm and Bn
are similar if |Bm| = |Bn| and Bm
i for i = 1
i
to |Bm|. Nevertheless, Sybils are smart. The bots tend to
add some noise by triggering a random function during the
interactions to make the activity sequences like sequences
from ordinary users. However, bots cannot randomly trigger
activities because if the activities are in totally random order
and involve token transfers, it is complicated to track the
trace of the tokens for both computer programs and manual
bots. Deﬁnition 1 is based on this observation.

is similar to Bn

Now the problem is to qualify the similarity between
activity sequences, which have various lengths. These se-
quences have many similar activities, and the temporal
orders of these similar activities are nearly the same. There
are several choices of similarity measures to qualify the

Figure 7. Complex token transfer pattern: sequential ﬁrst, radial later

receives tokens from the bot’s treasury ﬁrst and then sends
the received tokens to multiple accounts radially.

Although there could be more complex token transfer
patterns by adding more fundamental patterns, capturing
only the fundamental patterns is adequate because they
already show relationships between these accounts. We
present an example of complex patterns in the experimental
evaluation (Section 5).

sequence similarities [20]. Commonly used measures in-
clude cosine distance, hamming distance, Levenshtein dis-
tance,
longest common subsequences, and many others.
Either these measures cannot handle the activity noises
in sequences, or they cannot consider the temporal order
of similar activities. In this paper, we propose to employ
the Jaccard similarity coefﬁcient by representing activity
sequences as activity pairs.

Given an activity sequence B, we extract all activity
pairs from this sequence and represent it by the set of
activity pairs. Each activity pair maintains the temporal
order of the two activities on sequences. For example,
if B = B1, B2, B3, B4,
the corresponding activity pair
set is P airs(B) = {(B1, B2), (B1, B3), (B1, B4), (B2, B3),
(B2, B4), (B3, B4)}. Then a suitable measure to qualify
the sequence similarity is the Jaccard similarity coefﬁcient,
which is

SeqSim(Bm, Bn) =

|P airs(Bm) ∩ P airs(Bn)|
|P airs(Bm) ∪ P airs(Bn)|

.

(1)

With the properly deﬁned activity sequence similarity, it
is easy to see that we can apply popular cluster algorithms to
ﬁnd cohesive sequence clusters. DBSCAN [21] is selected
in this paper, which is a density-based clustering non-
parametric algorithm. DBSCAN does not require to specify
the number of clusters and can ﬁnd clusters of arbitrary
shapes.

4.2. Searching Token Transfer Patterns

This section will introduce the approach to discovering
token transfer patterns among accounts with similar activity
sequences in a cluster.

Preprocessing and Transaction Graph
Bots control accounts with similar activity sequences.
These accounts need initial funds for paying gas fees and
conducting interactions. As analyzed in Section 3.5, iden-
tifying the token transfer patterns among these accounts
can enhance the conclusion that they are Sybil’s accounts.
We propose to search token transfer patterns on the graph
constructed from transactions of token transfers.

A snapshot records the contents of the entire decentral-
ized ledges of blockchains, including all existing addresses
and their associated data such as transactions, fees, balance,
and metadata. When a DApp prepares for an airdrop, its
development team will take a snapshot from the time when
the DApp is online to a speciﬁc point in time before the air-
drop events. The qualiﬁed addresses for airdrop are selected
from the addresses in the snapshot based on pre-deﬁned
qualiﬁcations.

For instance, before the airdrop of Hop Protocol, its de-
velopment team records a snapshot of Ethereum and its four
layer 2 blockchains. There are two types of addresses on
these blockchains, EOA and smart contract addresses. Since
we focus on token transfer patterns on bot’s addresses, all
transactions involving smart contract addresses are removed.
Besides EOA addresses belonging to centralized exchanges,
addresses in the pre-deﬁned whitelists are also removed.

For each blockchain in the snapshot, we construct a
directed transaction graph based on all
the transactions
ﬁltered by prepossessing A vertex u on graphs represents
an address, and there is a directed edge from u to v if there
are token transfer transactions from u to v in the snapshot.
Let G denote either one of these graphs.
Searching Sequential Patterns
Now we discuss searching sequential patterns given
accounts in a cluster with similar activity sequences. The
key task is to ﬁnd a path on G that can pass through
all the vertices corresponding to these accounts. There are
two observations: 1) it is unnecessary to be a simple path
since ﬁnding simple paths can signiﬁcantly increase the
computation complexity; 2) the path should contain as few
vertices which are not in the cluster as possible.

We only consider ﬁnding paths on a subgraph G of G.
Let V (G) and E(G) represent the vertex set and the edge set
of G, respectively. V (G) is the vertex set containing all the
vertices in the clusters and their 2-hop neighbors on G. For
u, v ∈ V (G), if (u, v) ∈ E(G), (u, v) ∈ E(G). Then ﬁnding
paths that contain the vertices in the clusters is equivalent
to ﬁnding cliques on the reachability graph of G, as present
in Theorem 1.
Theorem 1. Let G(cid:48) = (V, E(cid:48)) denote the undirected graph
indicating the vertex reachability on G, then V (G(cid:48)) =
V (G). An edge (u, v) ∈ E(cid:48) if u can be reached from v
in the original graph G, or vice versa. Suppose C ⊆ G(cid:48)
is a clique, then there is a corresponding path π ⊆ G,
and V (C) = V (π).

Sketch of proof:

We prove Theorem 1 by contradiction. Given a vertex
set U , suppose there is no path on G that can contain all
vertex u ∈ U , then we will prove that vertices in U cannot
form a clique on G(cid:48).

Since there is no path on G that passes through all
vertices in U , without loss of generality, let us suppose there
is a path π which contains partial vertices in U , and at least
one vertex u ∈ U is not on path π. Now let us prove U
cannot form a clique on G(cid:48). There are two cases: 1) at least
one vertex v ∈ V (π) cannot reach u on G, and vice versa;
2) all vertices in V (π) can reach u on G, or vice versa.

The proof of the ﬁrst case is obvious. Since u and v
cannot reach each other, there is no edge (u, v) in E(G(cid:48)).
V (π) cannot form a clique on G(cid:48).

The proof of the second case is a little bit complicated.
Each vertex v ∈ V (π) reaches u or u reaches v. Let s and t
be the ﬁrst and the last vertex of π, respectively. It is obvious
that u cannot reach s and t cannot reach u. Otherwise, u and
π can be concatenated to form a new path, which contradicts
there is no path on G that passes through all vertices in U .
Then in this case, s reaches u and u reaches t. For each
vertex w between s and t, either w reaches u or vice versa.
Then there must have two consecutive vertex x and y where
x reaches u and u reaches y, or u reaches x and y reaches
u. We can form a new path by inserting vertex u into π
between x and y. This contradicts there is no path on G
(cid:3)
which passes through all vertices in U .

Algorithm 1 Searching sequential patterns
Require: a vertex set, U
Ensure: sequential pattern set P

1: Build a graph G contains U and all 2-hop neighbors of

2: Build the reachability graph G(cid:48) of G
3: P ← ∅
4: while There are cliques containing U (cid:48), U (cid:48) ⊆ U and

U on G

|U (cid:48)| > 2 do

C ← the clique containing the most vertices in U
U ← U \ V (C)
P ← P ∪ {V (C)}

5:
6:
7:
8: end while
9: return P

Algorithm 2 Searching radial patterns
Require: a vertex set, U
Ensure: the radial pattern set Q

1: Build a graph G contains U and all 2-hop neighbors of

U on G

Vh ← all 1-hop and 2-hop neighbors of u ∈ U
ﬁnd v ∈ Vh and v can reach the most vertices in U
Uv ← {u|u ∈ Vh, v reaches u}
if |Uv| < 2 then

2: Build the reachability graph G(cid:48) of G
3: Q ← ∅
4: while |U | > 0 do
5:
6:
7:
8:
9:
10:
11:
12:
13: end while
14: return Q

end if
U ← U \ Uv
Q ← Q ∪ {(v, Uv}

break

The algorithm for searching sequential patterns is pre-
sented in Algorithm 1. U is the vertex set of the given
clusters. The graph G contains vertices in a given cluster,
and its 2-hop neighbors are constructed at line 1, and the
corresponding reachability graph G(cid:48) is built at line 2. In
each loop from line 4 to line 8, the algorithm tries to ﬁnd
a clique that contains the most vertices in U , remove the
covered vertices from U , and store the sequential patterns.
This loop ends when there is no clique that contains more
than two vertices in U .

Searching Radial Patterns
Searching radial patterns is relatively easier than search-
ing sequential patterns. We use the same subgraph G in
searching sequential patterns. Recall V (G) is the vertex
set containing all the vertices in the clusters and their 2-
hop neighbors on G. For u, v ∈ V (G), if (u, v) ∈ E(G),
(u, v) ∈ E(G). Then searching radial patterns is done by
ﬁnding 1-hop and 2-hop common neighbors of vertices in
the given cluster on G.

The algorithm for searching radial patterns is presented
in Algorithm 2. U is the vertex set of the given clusters. The
graph G contains vertices in a given cluster, and its 2-hop

Algorithm 3 The overall framework for Sybil’s detection

1: Collect Sybil-related transactions T from the DApp’s

snapshot

2: Construct the transaction graph G
3: Discover all connected components S of the undirected

version of G

4: for each connect component S ∈ S do
5:

Build activity sequences Bv for each vertex v ∈

V (S)

C ← DBSCAN(the set of B) based on Eq. 1
for each cluster C ∈ C do

PC ← Search the sequential patterns
QC ← Search the radial patterns
Output PC, QC

6:
7:
8:
9:
10:
11:
12: end for

end for

neighbors are constructed at line 1, and the corresponding
reachability graph G(cid:48) is built at line 2. In each loop from
line 4 to line 13, the algorithm tries to ﬁnd a vertex v from
the 1-hop and 2-hop neighbor set of vertices in U , which
reaches the most vertices in U , remove vertices in Uv from
U , and store the radial pattern which includes u and its
reachable vertex set Uv.

4.3. The Overall Framework

In this section, we present the overall framework to
together

detect Sybil’s accounts in Algorithm 3 by put
everything in Section 4.1 and Section 4.2.

The Sybil-related transactions are extracted on line 1,
and the transaction graph is constructed on line 2. There
is no need to apply Algorithm 1 and Algorithm 2 on the
whole graph, so we ﬁnd all the connected components [22]
of G in line 3. In each loop from line 4 to line 12, the
algorithm builds activity sequences for every vertex and
applies DBSCAN to ﬁnd the clusters of cohesive activity
sequences. Next, the algorithm searches two fundamental
token transfer patterns by calling Algorithm 1 and Algorithm
2 and returns the results.

5. Experimental Evaluation

In this section, we evaluate the proposed framework
based on real-world data set. As mentioned, Hop Protocol
is a scalable rollup-to-rollup general token bridge. It allows
users to send tokens from one rollup or sidechain to another
almost immediately without having to wait for the network’s
challenge period. In the Hop Protocol’s tokenomics, Hop
Protocol’s tokens are allocated among Treasury, Hop team,
investors, and airdrop. Recently, Hop ﬁnished its airdrop,
and it airdropped 8% of its total token supply to early net-
work participants. The prerequisites of airdrop qualiﬁcation
are a minimum of $1K transfer volume and at least two
transactions.

Before Hop Protocol’s airdrop, the Hop team makes
public all transactions in their snapshot, including the user’s

Figure 8. Total and eligible address distributions

Figure 10. ERC20 token transaction distribution

Figure 9. Native token transaction distribution

Figure 11. Hop transaction distribution

transactions on Ethereum and its four layer 2 blockchains
and the users’ interactions with Hop Protocol. There are
43,058 initially eligible addresses, and the team themselves
managed to identify 10,253 addresses as Sybil’s addresses
by removing the isolated connected components on the
transaction graph, which contain only a few addresses. Hop
Protocol announced that
they would provide rewards to
those who could discover Sybil’s addresses in the snapshot.

5.1. Data Characteristics

Hop protocol supports Ethereum and its Layer 2
blockchains: Arbitrum7, Optimism8, Polygon9, and Gno-
sis10. Users can move their ERC20 tokens among these
blockchains using Hop Protocol. Fig. 8 to 11 present some
essential data characteristics of users and transactions on
Hop Protocol.

Similar to the transaction graph in Section 4.2, we
construct a large transaction graph to represent Hop users
and their transactions by combining the transactions from
all the ﬁve blockchains. There are more than 1,000 isolated
connected components (groups) on this graph. In each con-
nected component, according to the prerequisites of airdrop
qualiﬁcation, only partial accounts in each component are
qualiﬁed. In Fig. 8 to Fig. 11, we removed the long tail of
each ﬁgure where the number of eligible accounts is less
than 4.

7. https://bridge.arbitrum.io/
8. https://www.optimism.io/
9. https://polygon.technology/
10. https://gnosis.io/

Fig. 8 shows the account distribution sorted by the
number of accounts. The dotted blue line is the total number
of accounts in each component, and the orange bars indicate
the number of eligible accounts in the airdrop.

Fig. 9 and Fig. 10 show the transaction distributions
sorted by the number of accounts. The dotted blue line is
still the total number of accounts in each component. The
brown bars in Fig. 9 and the green bars in Fig. 9 indicate
the number of native token transactions and ERC20 token
transactions, respectively. Fig. 11 presents Hop Protocol
related transaction distribution. The purple bars indicate the
number of transactions on Hop Protocol in each component.
We found that considering only activity types is enough
to qualify the similarity between activity sequences in the
experimental evaluation. The following results are obtained
by using the Jaccard similarity coefﬁcient based on pairs of
activity types only.

5.2. Clustering Results of DApp Activities

In this section, we present the clustering results of DApp
activities. As mentioned, we construct a transaction graph
for each blockchain in Hop Protocol. The parameters of
DBSCAN, eps, and min pts are shown in Table 1, which
is identiﬁed by grid search based on cluster quality. Table
1 also shows the clustering results, including the number of
clusters, the number of noise points that are not included in
clusters, and the cluster quality. The silhouette coefﬁcient is
a popular quality measure for clustering results.

Fig. 12 and Fig. 13 show the heatmaps of Jaccard
similarity matrices on Arbitrum and Gnosis, respectively.

Connected Components101102103104105# of addresses/transactionsTotal addressesEligible addressesConnected Components100101102103104105# of addresses/transactionsTotal addressesNative token transactionsConnected Components100101102103104105# of addresses/transactionsTotal addressesERC20 token transactionsConnected Components101102103104105# of addresses/transactionsTotal addressesHOP transactionsFigure 12. Jaccard similarity coefﬁcients on Arbitrum

Figure 13. Jaccard similarity coefﬁcients on Gnosis

TABLE 1. THE PARAMETERS AND THE RESULTS OF DBSCAN

eps
min pts
# of cluster
# of noise points
silhouette coefﬁcient

Arbitrum Gnosis
0.550
3
11
1113
0.408

0.405
3
24
1146
0.408

Ethereum
0.285
3
65
2845
0.236

The similarity matrix is not the raw similar matrix, where
we reorder the rows and columns based on the DBSCAN’s
results by putting together rows and columns in the same
cluster. From these two ﬁgures, we can clearly see that
the activity sequences from vertices in the same cluster are
much more similar to the ones from vertices in different
clusters.

Fig. 14 show the statistics of clusters containing Hop
Protocol activity sequences on Arbitrum. The left y-axis
indicates the number of accounts in each cluster, and the
right y-axis indicates the average Jaccard similarity coefﬁ-
cient of each cluster. Fig. 15 show the statistics of clusters
containing Hop Protocol activity sequences on Gnosis. The
values of the Jaccard similarity coefﬁcient in Fig. 14 and
Fig. 15 are close to 1, which means the corresponding cluster
is cohesive.

5.3. Token Transfer Patterns

We present several case studies in this section to demon-
strate the discovery of fundamental token transfer patterns.
Fig. 16 shows a transaction subgraph of a radial pattern. All
the transactions are from Optimism. There is no duplicated
edges on the transaction graph built for Optimism, however,
to clearly show the transactions between these accounts,
duplicated edges are allowed. If there are two token transfer
transactions between two vertices, then there are two edges
between them.

Fig. 16 to Fig. 18 present some preliminary results.
Fig. 16 shows the transaction subgraph of a star transfer
pattern. All the transactions are from Optimism. The corre-

Figure 14. Clusters of similar DApp activities on Arbitrum

sponding Hop transactions of these addresses are presented
in Table 2, which are very similar. Table 2 shows the trans-
actions on Hop Protocol of all the accounts in Fig. 16. The
Hop activity sequences of these accounts are very similar,
and some of them are exactly the same. The amount of
transferred tokens are also in Table 2, as we can see that
almost in all the transactions, the amount of transferred
tokens is around 1. Address 0x4dD1cb26 has similar activity
sequences but of different token amounts, which is the center
of the radial pattern, meaning 0x4dD1cb26 is the treasury
account.

Fig. 17 shows the transaction subgraph of a sequence
transfer pattern, where all the transactions are from Arbi-
trum. Fig. 18 is a more complex pattern, which is corre-
sponding to Fig. 7. All the transactions are from Gnosis.
The complex pattern is found by modifying Algorithm 3.
Suppose we are searching for the sequential ﬁrst, radial later
pattern. We ﬁrst search radial patterns by using Algorithm
1, then search sequential patterns using the center vertices
in the returned set as the input to Algorithm 2.

05101520Clusters040# of accountsTotal accounts01Average SimilarityAverage SimilarityTABLE 2. HOP INTERACTIONS OF ADDRESSES IN FIG. 16 (O IS OPTIMISM, P IS POLYGON, AND E IS ETHEREUM.)

Address
0x4dD1cb26..
0x7faf8b4E..
0xcc36c198..
0xB79d9e71..
0x2A4C5af8..
0x5Ad4873c..
0x969759b8..
0xb95e0351..
0x572e16Cf..
0xEF3D6439..
0x218B7F2A..
0x71a1dEb9..
0x5a9381ff..
0x92ad53dC..
0xEa959Ab6..
0x12C34540..
0xb5A9dDf4..
0x5e764D08..
0xc6c9c166..
0x91654cD3..
0x634195A2..

Activity 1 & Token amount

O → E
2.4948
P → O 0.9936
P → O 0.9936
P → O 0.9936
P → O 0.9919
P → O 0.9922
P → O 1.0004
P → O 0.9940
P → O 0.9942
P → O 0.9942
P → O 0.9942
P → O 0.9942
P → O 0.9942
P → O 0.9942
P → O 0.9936
P → O 0.9936
P → O 0.9936
P → O 0.9987
P → O 0.9997
P → O 0.9965
O → P
0.9988

Activity 2 & Token amount
P → O 1.9893
P → O 1.0007
P → O 1.0007
P → O 1.0007
P → O 1.0004
P → O 1.0004
O → P
0.9975
P → O 0.9995
P → O 0.9995
P → O 0.9995
P → O 0.9995
P → O 0.9995
P → O 0.9995
P → O 0.9995
P → O 0.9997
P → O 0.9997
P → O 0.9997
E → O 0.9780
O → P
0.9980
O → P
0.9980
O → P
0.9988

Activity 3 & Token amount
P → O 2.0020
O → P
0.9985
O → P
0.9985
O → P
0.9985
O → P
0.9975
O → P
0.9975
O → P
0.9975
O → P
0.9982
O → P
0.9983
O → P
0.9982
O → P
0.9982
O → P
0.9982
O → P
0.9982
O → P
0.9982
O → P
0.9980
O → P
0.9980
O → P
0.9980
O → P
0.9989
O → P
0.9980

Activity 4 & Token amount

O → P
O → P
O → P
O → P

1.9971
0.9985
0.9985
0.9985

O → P
O → P
O → P
O → P
O → P
O → P
O → P
O → P
O → P
O → P
O → P

0.9982
0.9983
0.9982
0.9982
0.9982
0.9982
0.9982
0.9980
0.9980
0.9980
0.9989

Figure 15. Clusters of similar DApp activities on Gnosis

Figure 17. Transaction subgraph of a Sybil: sequential transfer pattern

Figure 16. Transaction subgraph of a Sybil: radial transfer pattern

6. Discussion

We highlight the implications, limitations, and potential

future work in the section.

Figure 18. Transaction subgraph of a Sybil: complex transfer pattern

6.1. Implications for DApps

More and more DApps adopt airdrops as a market
promotion strategy, which makes it a crucial task to detect
Sybil’s accounts from the airdrop qualiﬁcation list. The
difﬁculty of detecting Sybils lies in the ground truth and

0246810Clusters050100# of accountsTotal accounts012Average SimilarityAverage Similaritystandard. The analysis and the framework provided in this
paper could contribute to building a detection system. Hop
Protocol held a Sybil hunting event. Anyone interested in
ﬁnding Sybils can participate in the event. It is known
that some later projects directly borrowed Sybil’s addresses
in Hop Protocol and disqualiﬁed those addresses. This is
inappropriate, especially for the manual bots described in
this paper. Without the similar activity sequences and regular
token transfer patterns, one can hardly say that an account
is Sybil’s account for sure.

6.2. Limitations

On the large transaction graph, many accounts obtain
native tokens from hot wallets of Centralized Exchange
(CEX), which form a perfect star token transfer pattern.
The hot wallets of some popular CEX may have up to
hundreds of neighboring vertices. With a large number of
neighbors, there are sometimes similar DApp interactions
between these users if the number of interaction types is
relatively small. In this case, ordinary users’ accounts might
be tagged as Sybil’s account by mistake. This mistake might
be avoided by introducing multi-source interactions, i.e.,
interactions with other DApp. The more types of interactions
there are, the lower chance that this kind of mistake will
happen.

6.3. Future work

There are two promising extensions of the proposed
detection framework, which could further beneﬁt DApps
during airdrops.

What if there is no pre-deﬁned eligible prerequisites?
The proposed method in this paper relies on knowing eligi-
ble airdrop addresses beforehand, where prerequisites need
to be pre-deﬁned. When there are no predeﬁned eligible
prerequisites, can we still identify Sybil’s accounts? The
answer is yes. The DBSCAN clustering algorithm works on
enormous datasets. The bottleneck is located at the transfer
pattern, and faster algorithms are needed for searching token
if one
transfer patterns. Additionally,
can set up prerequisites based on the in-depth analysis of
existing Sybil’s behaviors in the DApp.

it will be helpful

How to utilize external information on other DApps
or blockchains? Hop Protocol is a scalable rollup-to-rollup
general token bridge, so interacting with Hop Protocol can
involve two or more layer 2 blockchains. In the existing
work, building activity sequences only considers those activ-
ities from Hop Protocol’s functionalities, which have limited
activity type. The external information from other DApps or
blockchains could help Sybil detection on a particular DApp.
The motivation for this is that by involving external infor-
mation, the number of activities type is increased. However,
how to merge the information from multiple sources is still
unclear. Should we put them together without considering
their sources, or should we handle the information from
individual sources separately?

7. Related Work

In this section, we discuss previous work related to Sybil
detection. There are research works on Sybil detection or
attacks in several domains. Although, generally speaking,
Sybil is a synonym referring to hackers, the concrete deﬁ-
nition and behaviors of Sybils are different.

In sensor network and Internet of Things (IoT) [23]–
[26], Sybil attack is a gigantic damaging attack the sen-
sor network various veritable characters with manufactured
personalities are utilized for illicit section an organization.
Other kinds of Sybil attacks could target at Routing Protocol
for Low-Power and Lossy Networks (RPL). In Mobile ad
hoc networks [27]–[30], Sybils could intrude network, data
link, application layer, and physical layer functioning. Sybil
attacks are launched by fabricating or creating multiple
pseudonyms to spread false information in the network,
which poses a severe security threat. In machine learning
system [31]–[33], Sybil attacks are usually related to feder-
ate learning since federal learning is over distributed multi-
part data. A single adversary may control malicious devices
to manipulate these devices to attack the learning system.
Sybils in the above domains are related to the ones in the
paper, but the goals of attacks, as well as the methods of
attacks, are totally different.

In social networks, there are research works about ﬁnd-
ing malicious accounts based on their activities on social
networks [34]–[38]. Sybils in social networks are similar
to Sybils in airdrops since Sybils on social networks pro-
duce behavior sequences, such as click streams. Based on
the learning method, the Sybil detection methods in social
network could be categorized into two classes: supervised
learning [39]–[44] or unsupervised learning [44]–[48].

Research work such as [39] and [40] employ machine
learning model on constructed features number of follow-
ings/followers to identify malicious users and analyze the
spammers’ behavior on social networks. Yang et al. [41]
made an empirical analysis of the evasion tactics utilized
by Twitter spammers and then designed robust features to
detect Twitter spammers. Ghosh et al. [42] are the ﬁrst to
investigate link farming in the Twitter network and then
explore mechanisms to discourage the activity. Galan-Garcia
et al. [43] proposed an approach to detect and associate
fake accounts on Twitter that are employed for defamatory
activities to a real account within the same network by
analyzing the content of comments generated by both real
and fake accounts. Wang et al. [44] detect fake identities by
using Support Vector Machine (SVM) based on server-side
clickstream models.

Wang et al. [44] also proposed an unsupervised method
that uses graph clustering to divide users’ behaviors.
Viswanath et al. [45] proposed using unsupervised anomaly
detection techniques over user behavior to distinguish po-
tentially bad behavior from normal behavior. Then model
the behavior of normal users accurately based on the Prin-
cipal Component Analysis (PCA) and identiﬁes signiﬁcant
deviations from it as anomalous. Egele et al. [46] identify
reliably compromises of individual high-proﬁle accounts,

which show consistent behaviors over time. Cai et al. [47]
decompose social networks into dense subgraphs and iden-
tify vertices that connect to these dense subgraphs in an
unnatural or inconsistent manner. Cao et al. [48] proposed
a Sybil detection system, SynchroTrap, by clustering mali-
cious accounts based on behaviors and timestamps.

There are a few research works about Sybil attacks in the
blockchain area [6], [49], [50], but not related to airdrops.
Abdelatif et al. [49] analyzed Sybil attacks in sharding-
based blockchain protocols. Sharding divides the blockchain
network into multiple committees, where Sybils attack the
network by failing some of these committees. Nasrulin et
al. [6] study decentralized reputation schemes. They formu-
lated the trade-offs between limitations and beneﬁts of the
reputation system and proposed MeritRank: Sybil tolerant
feedback aggregation mechanism for reputation. Skowro´nski
and Brzezi´nski [50] fucused on the problem of sybil-proof
data exchange. They proposed the ﬁrst information exchange
framework with integrated routing and reward-function me-
chanics, which is proved to be secure in thwarting Sybil-
nodes in 1-connected or eclipsed networks.

8. Conclusion

As far as we know, this paper is the ﬁrst to explore Sybils
in DApp airdrops. We contribute a Sybil detection method
for discovering bot-controlled accounts. We carefully ana-
lyzed Sybil’s behaviors based on the details of the trans-
actions on blockchains when Sybils manipulate controlled
accounts to interact with DApps. In the proposed detection
framework, the cohesive groups of similar DApp activities
are found by applying a popular cluster algorithm with a
similarity measure deﬁned on the sets of activity pairs. The
same Sybil potentially controls accounts in a single cluster.
The potentiality is further enhanced by ﬁnding the regular
token transfer patterns among these accounts. The exper-
iment results on a recent airdropped DApp demonstrated
that the proposed approach could detect Sybil’s accounts
effectively.

Acknowledgment

We thank the Hop Protocol team for bringing the op-
portunity to study Sybil’s behaviors on the provided data,
as well as the hard work of team members during the Sybil
hunting period.

References

[1] K. Malinova and A. Park, “Tokenomics: when tokens beat equity,”

Available at SSRN 3286825, 2018.

[4]

[5]

J. Chong, “The three tokenomics problems and a productivity-linked
tokenomics design,” SSRN Electronic Journal, 2022.
[Online].
Available: https://doi.org/10.2139/ssrn.4071089

P. Swathi, C. Modi, and D. Patel, “Preventing sybil attack in
blockchain using distributed behavior monitoring of miners,” in 2019
10th International Conference on Computing, Communication and
Networking Technologies (ICCCNT), 2019, pp. 1–6.

[6] A. Haﬁd, A. S. Haﬁd, and M. Samih, “A tractable probabilistic
approach to analyze sybil attacks in sharding-based blockchain pro-
tocols,” IEEE Transactions on Emerging Topics in Computing, pp.
1–1, 2022.

[7] A. I. Sanka, M. Irfan, I. Huang, and R. C. Cheung, “A survey
of breakthrough in blockchain technology: Adoptions, applications,
challenges and future research,” Computer Communications, vol. 169,
pp. 179–201, 2021. [Online]. Available: https://www.sciencedirect.
com/science/article/pii/S0140366421000268

[8] T. Hewa, M. Ylianttila, and M. Liyanage, “Survey on blockchain
based smart contracts: Applications, opportunities and challenges,”
Journal of Network and Computer Applications, vol. 177, p.
102857, 2021. [Online]. Available: https://www.sciencedirect.com/
science/article/pii/S1084804520303234

[9] U. Hacioglu, Blockchain Economics and Financial Market Innova-
tion: Financial Innovations in the Digital Age, ser. Contributions
to Economics.
Springer International Publishing, 2020. [Online].
Available: https://books.google.co.jp/books?id=zWQMzgEACAAJ

[10] E.

Julie,

J. Nayahi, and N.

Fundamentals, Applications, and Case Studies,
of Everything (IoE).
https://books.google.co.jp/books?id=QZ 9DwAAQBAJ

CRC Press, 2020.

Jhanjhi, Blockchain Technology:
Internet
ser.
[Online]. Available:

[11] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” May

2009. [Online]. Available: http://www.bitcoin.org/bitcoin.pdf

[12] C. Paar and J. Pelzl, Understanding Cryptography: A Textbook
for Students and Practitioners, hardcover ed. Springer, 12 2009.
[Online]. Available: https://lead.to/amazon/com/?op=bt&la=en&cu=
usd&key=3642041000

[13] M. Castro and B. Liskov, “Practical byzantine fault tolerance and
proactive recovery,” ACM Trans. Comput. Syst., vol. 20, no. 4,
p. 398–461, nov 2002. [Online]. Available: https://doi.org/10.1145/
571637.571640

[14] S. Raval, Decentralized Applications.

Sebastopol, CA: O’Reilly

Media, Jul. 2016.

[15] N. Six, N. Herbaut, and C. Salinesi, “Blockchain software patterns
for the design of decentralized applications: A systematic literature
review,” Blockchain: Research and Applications, vol. 3, no. 2, p.
100061, 2022. [Online]. Available: https://www.sciencedirect.com/
science/article/pii/S209672092200001X

[16] W. Zou, D. Lo, P. S. Kochhar, X.-B. D. Le, X. Xia, Y. Feng,
Z. Chen, and B. Xu, “Smart contract development: Challenges and
opportunities,” IEEE Transactions on Software Engineering, vol. 47,
no. 10, pp. 2084–2106, 2021.

[17] S. Adhami, G. Giudici, and S. Martinazzi, “Why do businesses
go crypto? an empirical analysis of
initial coin offerings,”
Journal of Economics and Business, vol. 100, pp. 64–75, 2018,
ﬁnTech – Impact on Consumers, Banking and Regulatory Policy.
[Online]. Available: https://www.sciencedirect.com/science/article/
pii/S0148619517302308

[2] E. Lyandres, B. Palazzo, and D. Rabetti, “Initial coin offering (ico)
success and post-ico performance,” Management Science. [Online].
Available: https://doi.org/10.1287/mnsc.2022.4312

[18] B. Dale, “The ﬁrst yearlong ico for eos

raised $4 billion.
the second? just $2.8 million,” 2019. [Online]. Available: https:
//tinyurl.com/bdz55tas

[3] C. R. Goforth, “It’s raining crypto: The need for

regulatory
clariﬁcation when it comes to airdrops,” Indian Journal of Law and
Technology, vol. 15, pp. 321–344, 2019. [Online]. Available: https://
heinonline.org/HOL/Page?handle=hein.journals/indiajoula15&div=11

[19] P. de Andr´es, D. Arroyo, R. Correia, and A. Rezola, “Challenges of
the market for initial coin offerings,” International Review of Finan-
cial Analysis, vol. 79, p. 101966, 2022. [Online]. Available: https:
//www.sciencedirect.com/science/article/pii/S1057521921002842

[20] M. Vijaymeena and K. Kavitha, “A survey on similarity measures in
text mining,” Machine Learning and Applications: An International
Journal, vol. 3, no. 2, pp. 19–28, 2016.

[37] X. Zhang, H. Xie, P. Yi, and J. C. Lui, “Enhancing sybil detection
via social-activity networks: A random walk approach,” IEEE Trans-
actions on Dependable and Secure Computing, pp. 1–1, 2022.

[21] M. Ester, H.-P. Kriegel, J. Sander, and X. Xu, “A density-based
algorithm for discovering clusters in large spatial databases with
noise,” in Proceedings of the Second International Conference on
Knowledge Discovery and Data Mining, ser. KDD’96. AAAI Press,
1996, p. 226–231.

[22] Y. Cohen, R. Stern, and A. Felner, “Solving the longest simple path
problem with heuristic search,” in Proceedings of the International
Conference on Automated Planning and Scheduling, vol. 30, 2020,
pp. 75–79.

[23] B. Barani Sundaram, T. Kedir, M. K. Mishra, S. H. Yesuf, S. M.
Tiwari, and P. Karthika, “Security analysis for sybil attack in sensor
network using compare and match-position veriﬁcation method,” in
Mobile Computing and Sustainable Informatics, S. Shakya, R. Bestak,
R. Palanisamy, and K. A. Kamel, Eds. Singapore: Springer Singa-
pore, 2022, pp. 55–64.

[24] C. Pu and K.-K. R. Choo, “Lightweight sybil attack detection in iot
based on bloom ﬁlter and physical unclonable function,” Computers
& Security, vol. 113, p. 102541, 2022. [Online]. Available: https:
//www.sciencedirect.com/science/article/pii/S0167404821003655

[25] B. A. Sassani Sarrafpour, A. Alomirah, S. Pang, and S. Sarrafpour,
“Coding observer nodes for sybil attacks detection in mobile wireless
sensor networks,” in 2021 IEEE 19th International Conference on
Embedded and Ubiquitous Computing (EUC), 2021, pp. 87–94.

[26] J. Newsome, E. Shi, D. Song, and A. Perrig, “The sybil attack
in sensor networks: analysis & defenses,” in Third International
Symposium on Information Processing in Sensor Networks, 2004.
IPSN 2004, 2004, pp. 259–268.

[27] D. Gupta, J. Saia, and M. Young, “Bankrupting sybil despite churn,”
in 2021 IEEE 41st International Conference on Distributed Comput-
ing Systems (ICDCS), 2021, pp. 425–437.

[28] H. Yang, Y. Zhong, B. Yang, Y. Yang, Z. Xu, L. Wang, and Y. Zhang,
“An overview of sybil attack detection mechanisms in vfc,” in 2022
52nd Annual IEEE/IFIP International Conference on Dependable
Systems and Networks Workshops (DSN-W), 2022, pp. 117–122.

[29] S. Rethinavalli and R. Gopinath, “Classiﬁcation approach-based sybil

node detection in mobile ad hoc networks,” 2022.

[30] S. Hamdan, A. Hudaib, and A. Awajan, “Detecting sybil attacks
in vehicular ad hoc networks,” International Journal of Parallel,
Emergent and Distributed Systems, vol. 36, no. 2, pp. 69–79, 2021.

[31] C. Fung, C. J. M. Yoon, and I. Beschastnikh, “The limitations of
federated learning in sybil settings,” in 23rd International Symposium
on Research in Attacks, Intrusions and Defenses (RAID 2020).
San Sebastian: USENIX Association, 2020, pp. 301–316. [Online].
Available: https://www.usenix.org/conference/raid2020/presentation/
fung

[38] S. Furutani, T. Shibahara, K. Hato, M. Akiyama, and M. Aida, “Sybil
detection as graph ﬁltering,” in GLOBECOM 2020 - 2020 IEEE
Global Communications Conference, 2020, pp. 1–6.

[39] Z. Alom, B. Carminati, and E. Ferrari, “Detecting spam accounts on
twitter,” in 2018 IEEE/ACM International Conference on Advances
in Social Networks Analysis and Mining (ASONAM), 2018, pp. 1191–
1198.

[40] G. Stringhini, C. Kruegel, and G. Vigna, “Detecting spammers on
social networks,” in Proceedings of
the 26th Annual Computer
Security Applications Conference, ser. ACSAC ’10. New York, NY,
USA: Association for Computing Machinery, 2010, p. 1–9. [Online].
Available: https://doi.org/10.1145/1920261.1920263

[41] C. Yang, R. C. Harkreader, and G. Gu, “Die free or live hard?
empirical evaluation and new design for ﬁghting evolving twitter
spammers,” in Recent Advances in Intrusion Detection, R. Sommer,
D. Balzarotti, and G. Maier, Eds. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2011, pp. 318–337.

[42] S. Ghosh, B. Viswanath, F. Kooti, N. K. Sharma, G. Korlam,
F. Benevenuto, N. Ganguly, and K. P. Gummadi, “Understanding
and combating link farming in the twitter
social network,”
in Proceedings of
International Conference on World
the 21st
Wide Web, ser. WWW ’12. New York, NY, USA: Association
for Computing Machinery, 2012, p. 61–70. [Online]. Available:
https://doi.org/10.1145/2187836.2187846

[43] P. Gal´an-Garc´ıa, J. G. de la Puerta, C. L. G´omez, I. Santos, and
P. G. Bringas, “Supervised machine learning for the detection of troll
proﬁles in twitter social network: Application to a real case of cy-
berbullying,” in International Joint Conference SOCO’13-CISIS’13-
ICEUTE’13, ´A. Herrero, B. Baruque, F. Klett, A. Abraham, V. Sn´aˇsel,
A. C. de Carvalho, P. G. Bringas, I. Zelinka, H. Quinti´an, and
E. Corchado, Eds. Cham: Springer International Publishing, 2014,
pp. 419–428.

[44] G. Wang, T. Konolige, C. Wilson, X. Wang, H. Zheng, and B. Y. Zhao,
“You are how you click: Clickstream analysis for sybil detection,”
in Proceedings of the 22nd USENIX Conference on Security, ser.
SEC’13. USA: USENIX Association, 2013, p. 241–256.

[45] B. Viswanath, M. A. Bashir, M. Crovella, S. Guha, K. P. Gummadi,
B. Krishnamurthy, and A. Mislove, “Towards detecting anomalous
user behavior in online social networks,” in Proceedings of the 23rd
USENIX Conference on Security Symposium, ser. SEC’14. USA:
USENIX Association, 2014, p. 223–238.

[46] M. Egele, G. Stringhini, C. Kruegel, and G. Vigna, “Towards detect-
ing compromised accounts on social networks,” IEEE Transactions
on Dependable and Secure Computing, vol. 14, no. 4, pp. 447–460,
2017.

[47] Z. Cai and C. Jermaine, “The latent community model for detecting

[32] ——, “Mitigating sybils in federated learning poisoning,” 2018.

sybils in social networks,” in NDSS, 2012.

[33] S. Awan, B. Luo, and F. Li, “Contra: Defending against poisoning
attacks in federated learning,” in European Symposium on Research
in Computer Security. Springer, 2021, pp. 455–475.

[34] G. Jethava and U. P. Rao, “User behavior-based and graph-based
hybrid approach for detection of sybil attack in online social
networks,” Computers and Electrical Engineering, vol. 99, p.
107753, 2022. [Online]. Available: https://www.sciencedirect.com/
science/article/pii/S0045790622000611

[35] Z. Qu, C. Lyu, and C.-H. Chi, “Mush: Multi-stimuli hawkes process
based sybil attacker detector for user-review social networks,” IEEE
Transactions on Network and Service Management, pp. 1–1, 2022.

[36] Z. Jiang, J. Li, J. Ma, and P. S. Yu, “Similarity-based and sybil
attack defended community detection for social networks,” IEEE
Transactions on Circuits and Systems II: Express Briefs, vol. 67,
no. 12, pp. 3487–3491, 2020.

[48] Q. Cao, X. Yang,

J. Yu, and C. Palow, “Uncovering large
groups of active malicious accounts in online social networks,” in
Proceedings of the 2014 ACM SIGSAC Conference on Computer
and Communications Security, ser. CCS ’14. New York, NY, USA:
Association for Computing Machinery, 2014, p. 477–488. [Online].
Available: https://doi.org/10.1145/2660267.2660269

[49] B. Nasrulin, G. Ishmaev, and J. Pouwelse, “Meritrank: Sybil tolerant
reputation for merit-based tokenomics,” 2022. [Online]. Available:
https://arxiv.org/abs/2207.09950

[50] R.

Skowro´nski

data

incentivized
2022.
2241–2270,
no.
https://doi.org/10.1007/s10586-021-03411-3

jun

3,

p.

J. Brzezi´nski,

and
exchange,” Cluster Computing,

“Spide:

Sybil-proof,
25,
[Online]. Available:

vol.

