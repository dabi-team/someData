Modeling the Block Veriﬁcation Time of Zcash

Fabian Stiehle
Technische Universit¨at Berlin
stiehle@campus.tu-berlin.de

Erik Daniel
Technische Universit¨at Berlin
erik.daniel@tu-berlin.de

Florian Tschorsch
Technische Universit¨at Berlin
ﬂorian.tschorsch@tu-berlin.de

1
2
0
2

n
u
J

8
2

]

R
C
.
s
c
[

1
v
0
6
7
4
1
.
6
0
1
2
:
v
i
X
r
a

Abstract—An important aspect of the propagation delay in
blockchain networks is the block veriﬁcation time, which is
also responsible for the so-called veriﬁer’s dilemma. Models
for the block veriﬁcation time can help to understand and
improve the veriﬁcation process. Moreover, modeling the
veriﬁcation time is necessary for blockchain network simula-
tions. In this paper, we present JOIST, a new model for the
block veriﬁcation time of Zcash. We identify computationally
complex operations in the veriﬁcation process of Zcash,
and derive our model based on characteristic transaction
features. We evaluate JOIST and show that the model
is consistently more accurate than existing models, which
consider the block size only.

Index Terms—Blockchain, Simulation, Zcash

1. Introduction

The independent veriﬁcation of blocks is a core princi-
ple of a permissionless blockchain. While the veriﬁcation
of a block header is simple, the veriﬁcation of transactions
in a block can become much more time consuming. The
large number of transactions and the complexity of trans-
actions drives the required veriﬁcation time. This leads to
a fundamental design ﬂaw, which is captured by the so-
called veriﬁer’s dilemma [1]. It describes the conﬂict of a
miner between verifying a block for the “common good”
and skipping expensive veriﬁcations altogether. In either
way, the consequences are unfavorable as the network and
in particular miners become susceptible to attacks.

Understanding the veriﬁcation of blocks and trans-
actions is therefore crucial to analyze and improve the
mechanics of blockchain networks. For example, the ver-
iﬁcation time plays a role in the block distribution [2,
3, 4], blockchain simulations [5], as well as topology
inference [6]. Today’s models estimating the block veriﬁ-
cation time mainly rely only on the block size as a rough
approximation. The veriﬁcation time, however, depends
on the complexity of included transactions and therefore
can differ between blocks of the same size.

Zcash [7] is a prime example for complex transaction
scripting, where an accurate model of the veriﬁcation time
is highly relevant. Zcash uses various transaction types
and zero-knowledge proofs, which are more complex than
Bitcoin’s transaction scripting [8]. While in Bitcoin the
transfer time seems to be the dominating factor of block
propagation [9], the veriﬁcation time in Zcash can be
expected to have a higher impact on system properties as
the network is smaller and block propagation delays are
shorter [6]. Thus, more sophisticated models are required.
In this paper, we present JOIST, a novel—yet delib-
erately simple—model for the block veriﬁcation time of

Zcash. Our model considers different transaction features
to predict the block veriﬁcation time. We evaluate JOIST
based on a benchmark of real-world Zcash block veriﬁca-
tion time samples. Our model has a lower error compared
to block size-based models, yielding a mean absolute error
of 3 ms compared to approximately 11 ms. In addition,
JOIST captures extreme values better, which have a higher
impact on the overall block propagation. Our results also
provide general insights, i.e., varying transaction complex-
ity of transactions not speciﬁc to Zcash render block size-
based models inaccurate even beyond Zcash.

Our main contributions are (i) a model for the block
veriﬁcation time of Zcash based on transaction features
and (ii) a benchmark of the Zcash client’s block veriﬁca-
tion process and its employed cryptographic primitives to
support and evaluate our model.

The remainder is structured as follows. After re-
viewing related work in Section 2, we introduce JOIST
in Section 3. In Section 4, we show the benchmark and
evaluation of our model. Section 5 concludes the paper.

2. Related Work

Block propagation is an important aspect of analyzing
and modeling blockchain networks. Some approaches try
to reduce the impact of block veriﬁcation [10, 11, 12, 13],
which is orthogonal to our work.

Blockchain simulation models need to consider veri-
ﬁcation time or need to implement the veriﬁcation pro-
cedure. Simulations and analytical models abstract the
Bitcoin logic [2, 3, 4, 5]. These approaches assume a linear
block size-based veriﬁcation time. Block veriﬁcation can
also be a measurement based delay [14, 15].

Research directly related to Zcash’s veriﬁcation time
also exists: The Zerocash paper [16] approximates veriﬁ-
cation time for a transactions with a constant of 10 ms.
Another block size-based model ﬁtted for Zcash considers
veriﬁcation time differences of different nodes [6]. To
the best of our knowledge, we present the ﬁrst block
veriﬁcation model independent of block size for Zcash.

3. JOIST Veriﬁcation Model

We analyzed the Zcash code and identiﬁed relevant
predictors for the block veriﬁcation time. While verifying
the block header can be considered constant, the veriﬁ-
cation steps for transactions differ greatly based on the
set of transaction types. More speciﬁcally, we consider
the number of JoinSplits, Output descriptions, Inputs, and
Spend descriptions in Transactions, i.e., JOIST.

 
 
 
 
 
 
3.1. Transaction Complexity

TABLE 1: r for the veriﬁcation time of 200,000 blocks

Zcash uses shielded and transparent

transactions.
While transparent transactions are comparable to Bitcoin
transactions, shielded transactions use zero knowledge
proofs to hide sender and receiver information as well
as the amount of Zcash coins (ZEC) in a transaction.
Since the Sapling network upgrade shielded transactions
contain Spend and Output descriptions instead of so-called
JoinSplit descriptions. In the following, we identify and
enumerate expensive computations in the transaction and
block veriﬁcation process of Zcash. At the same time, we
strive to ﬁnd simple features to predict the complexity.

For transparent

transactions, we abstract from the
scripting engine and assume P2PKH scripts, which require
one signature check. Therefore, we assume veriﬁcation
time scales linearly with the number of transparent inputs.
For shielded transactions, each Spend, Output, and
JoinSplit description incurs a separate zk-SNARK proof.
Verifying a single zk-SNARK proof can be computed
in O(1). We therefore assume a linear relationship be-
tween the veriﬁcation time of zk-SNARK proofs and the
number of transparent inputs, Spend and Output descrip-
tions, and JoinSplits.

In addition, all transaction types require repeated cal-
culations of transaction hashes, e.g., to check signatures.
One could conclude that the veriﬁcation time scales lin-
early with the number of veriﬁcation steps. Zcash, how-
ever, allows re-use of transaction hashes by caching them.1
Therefore, they do not have to be re-computed for multiple
veriﬁcation steps across one transaction, yielding a con-
stant complexity per transaction. We similarly model the
hash calculations on the block level as constant operation.
Since transparent outputs are referenced by inputs and
do not trigger complex computations on their own, we can
ignore them in our model.

3.2. Statistical Analysis

We analyze the statistical correlation between different
transaction properties and veriﬁcation time. Therefore, we
calculate Pearson’s correlation coefﬁcient r for each se-
lected feature in relation to the block veriﬁcation time (cf.
TABLE 1). As a sample we use Zcash blocks from block
height 715,578 to block height 915,578, which were the
most recent blocks at the beginning of our work. The
veriﬁcation time is determined in a benchmark, described
in detail in Section 4. For each observation i in our sample,
i.e., for each observed block height, let xi be our feature
and let ti be the veriﬁcation time. Then
i=1(xi − ¯x)(ti − ¯t)

(cid:80)n
i=1(xi − ¯x)2(cid:112)(cid:80)n
where n is the sample size, ¯x is the mean over all feature
observations, and ¯t is the mean block veriﬁcation time.

i=1(ti − ¯t)2

(cid:112)(cid:80)n

r =

(1)

,

We show the results for each selected feature in TA-
BLE 1. The results show that the number of JoinSplits,
Output descriptions, transparent inputs, and Spend de-
scriptions of the transactions exhibit a linear relationship

1. See ZIP: 143, Transaction Signature Validation for Overwinter
https://zips.z.cash/zip-0143 and ZIP: 243, Transaction Signature Vali-
dation for Sapling https://zips.z.cash/zip-0243 [Both Accessed: 02-Sep-
2020].

Feature (number of)

Transparent inputs
Transparent outputs
Spend descriptions
Output descriptions
JoinSplit descriptions

r

p-Value

0.11 < 0.01
0.04 < 0.01
0.38 < 0.01
0.53 < 0.01
0.60 < 0.01

TABLE 2: Benchmark system speciﬁcation

Cores
Processor
Clock rate
RAM, SWAP
Disk

Disk I/O

HDD

2
Intel Core i5
2.6 GHz
5 GB, 2 GB
WD Elements
USB 3.0
100 MB/s

SSD

6
AMD Ryzen 5 2600X
3.60 GHz
12 GB, 2 GB
Samsung
SSD 860 Evo
540 MB/s

with respect to the veriﬁcation time. Outputs have only a
small effect on the veriﬁcation process, since they are not
involved in the process.

The analysis further shows that JoinSplits, although
legacy, cannot be ignored. We identiﬁed many blocks
still containing JoinSplits. Once a JoinSplit is included,
veriﬁcation time increases signiﬁcantly as it often includes
the veriﬁcation of two zk-SNARK proofs.

3.3. Model

We consider the number of JoinSplit nj, Output de-
scriptions no, transparent Inputs ni, and Spend descrip-
tions ns of all transactions in the block as the predictors
of JOIST. We derive our model to estimate the veriﬁcation
time ˆt of a given block as

ˆt = βjnj + βono + βini + βsns + k.

(2)

The constant k accounts for veriﬁcation overhead of block
header, hashing transactions, and possible I/O operations.
The values βj, βo, βi, and βs are constant coefﬁcients
used as weights. The coefﬁcients for the model can be
found by performing a benchmark on a local client. It is
certainly possible to parametrize the model by using the
mean or median time of the respective veriﬁcation opera-
tions. For improved accuracy, however, coefﬁcients should
be discovered by linear regression. For our evaluation, we
use ordinary least squares to parametrize JOIST.

4. Evaluation

In this section, we evaluate JOIST and compare it to
block size-based models used in literature. In order to
parametrize the models, we utilize two benchmarks on
two different systems.

4.1. Benchmark Setup

We perform the benchmarks utilizing two different
setups. One benchmark is performed on a low perfor-
mance system with an HDD disk, limited RAM, and re-
stricted CPU. The other system is a high(er) performance,
consumer-grade system with an SSD disk, more RAM,
and faster CPU. The speciﬁc hardware conﬁgurations are
shown in TABLE 2. For short, we refer to the two systems

as HDD and SSD, because we believe that the access times
in general will have a major impact on our results. More
speciﬁcally, we use the limited HDD system to show the
inﬂuence of disk access and slower CPU times on the
overall veriﬁcation process. In contrast, we use the SSD
system to simulate more realistic client hardware.

For our benchmark, we perform a black box-like
benchmark on both systems, capturing the complete block
veriﬁcation process. The veriﬁcation process amounts to
the time the client processes the ProcessNewBlock
function during synchronization with the network. For
a ﬁne grained analysis, we separately performed bench-
marks of singular computational steps, such as verifying
singular inputs or spends, performed during veriﬁcation.
Our evaluation is based on different sequences starting
with the latest block in our sample at block height
915, 578. For improved reproducibility, we compiled and
run the Zcash 3.0 client inside a Docker container. The
used code and data sets are publicly available.2

4.2. Model validation

In order to evaluate JOIST, we consider the mean ab-
solute error (MAE) as well as the error mean ratio (EMR),
which we deﬁne for completeness in Appendix A. In order
to evaluate the general ﬁt of our model, we calculate the
coefﬁcient of determination R2 and the adjusted R2, de-
noted as ¯R2. Let n be the sample size (number of blocks),
ˆti be the predicted, ti the observed veriﬁcation time at
block height i ∈ n, and ¯t be the average veriﬁcation time
over our complete sample. Therefore, R2 and ¯R2 can be
calculated as

R2 = 1 −

(cid:80)n
(cid:80)n

i=1(ti − ˆti)2
i=1(ti − ¯t)2

and

¯R2 = 1 − (1 − R2)

n − 1
n − p − 1

,

(3)

(4)

where p is the number of the model’s predictors.

For the model validation, we use a sample size of 15k
and 220k blocks. We then uniformly at random choose 5k
blocks to ﬁt the model and use the remaining 10k blocks
to predict the veriﬁcation time. For the 220k block sample,
we analogously use 20k to ﬁt the model and use the
remaining 200k blocks to predict veriﬁcation times. We
use ordinary least squares (OLS) to discover coefﬁcients
for JOIST, which are listed in Appendix B.

In TABLE 3, we summarize the results for the HDD
and SSD benchmark. Notably for the SSD benchmark
predicting 10k blocks, JOIST was able to predict
the
block veriﬁcation time with MAE = 3 ms and EMR =
23 %. Moreover, our model was able to explain most of
the variance with R2 = 0.9. For the SSD benchmark
predicting 200k blocks, where approximately 10 % of
blocks were used for parametrization, JOIST performed
expectedly less accurate. However, JOIST sill achieves an
MAE = 7 ms, an EMR = 43 %, and R2 = 0.7.

In Fig. 1a, we compare estimated with measured ver-
iﬁcation time for the SSD benchmark (mind the log scale
on the x axis). While we see some variance for veriﬁcation
times between 10 ms and 100 ms, we observe a generally

2. https://github.com/fstiehle/zcash-benchmark

TABLE 3: Model comparison summary

Model

n

MAE

EMR

k JOIST

r
a
m
h
c
n
e
B
D
S
S

r
a
m
h
c
n
e
B
D
D
H

k JOIST

Block size

Gervais et al.

Block size

Gervais et al.

10k
200k

10k
200k

10k
200k

10k
200k

10k
200k

10k
200k

3.11 ms
7.11 ms

10.60 ms
15.13 ms

11.66 ms
14.60 ms

22.05 ms
30.03 ms

31.20 ms
42.46 ms

32.48 ms
41.25 ms

23 %
43 %

78 %
92 %

86 %
89 %

64 %
69 %

91 %
98 %

95 %
95 %

R2

0.91
0.72

0.25
0.14

0.01
0.04

0.16
0.40

0.09
0.12

¯R2

0.91
0.72

0.25
0.14

0.01
0.04

0.16
0.40

0.09
0.12

-0.03
-0.01

-0.03
-0.01

good ﬁt. Our model is even able to explain most of the
outliers with veriﬁcation times over 250 ms.

As expected, the HDD benchmark is more erratic. The
results yield an MAE = 22 ms and an EMR = 64 %
when predicting 10k blocks and an MAE = 30 ms and
an EMR = 69 % when predicting 200k blocks. For both
benchmarks, ¯R2 is very close to R2 which suggests that
all our predictors actually contribute to the prediction.

4.3. Model Comparison

Previous models [2, 3, 4, 5, 6] assume a linear rela-
tionship between the block size and the block veriﬁcation
time. In order to compare this approach to our model, we
introduce a generic block size-based model, predicting the
veriﬁcation time ˆt of a block as

ˆt = βsb + k,

(5)

where sb is the block size, β a constant weighting coef-
ﬁcient, and k a constant to capture disturbances. In the
following, we refer to this model as Block size model.

In addition, we use the model by Gervais et al. [5],
which is a block size-based model, assuming a mean block
size of 458, 263 B and mean validation time of 0.174 s.
While it is designed for Bitcoin, we include it in our
evaluation due to the prevalent number of transparent
transactions in Zcash, which are identical
to Bitcoin.
An overview over the distribution of different transaction
types is provided in Appendix C.

For the comparison, we evaluate MAE, EMR, R2, and
¯R2. We use a sample size of 15k and 220k blocks and uni-
formly at random choose 5k and 20k blocks to calculate
coefﬁcients, respectively. The remaining blocks, 10k and
200k blocks, are used to predict veriﬁcation times. We
use OLS to calculate coefﬁcients for both models, JOIST
and block size-based. In Appendix B, we list all ﬁtting
parameters for all evaluated models and benchmarks. A
summary of our results is shown in TABLE 3.

For the SSD benchmark predicting 10k blocks, JOIST
provides better estimations than both block sized-based
models. Our model was able to predict the veriﬁcation
time with an MAE of 3 ms, compared to approximately
11 ms. Even when predicting 200k blocks, using only 20k
blocks for ﬁtting the model, our evaluation resulted in an
MAE of 7 ms, compared to 15 ms, an EMR of 43 %,
compared to 89 %, and an R2 = 0.7, compared to 0.14.

(a) JOIST.

(b) Block size.

(c) Gervais et al.

Figure 1: Scatter plots of predicted and measured veriﬁcation times with regression lines (10k blocks, SSD benchmark,
log scaled x-axis).

We compare the ﬁt of the respective models in Fig. 1,
where we show the estimated versus the measured veriﬁ-
cation time and a ﬁtted regression line. We can observe a
good ﬁt for our model. The block size-based models are
unable to explain a number of variances, particularly in
the range between 0 and 100 ms, which contains most of
our observed blocks. The resulting low R2 score of the
block size-based models suggests that these models make
only slightly better predictions than the median.

In addition, JOIST performs well for extreme values,
which have a higher impact on the overall block distribu-
tion time and are therefore important to simulate realistic
block propagation, for example. While the highest predic-
tion of JOIST was 1, 700 ms, only four blocks (0.02 %)
exhibit a higher veriﬁcation time. In contrast, the maximal
prediction of the Block size model was 330 ms and of
Gervais et al. 71 ms. That is, 68 blocks (0.34 %) for the
Block size model and 2,849 blocks (14 %) for Gervais
et al. exhibit a higher measured veriﬁcation time than
the prediction. As a result, JOIST exhibits a max error
of 840 ms, the Block size model a max error of 1.5 s,
and Gervais et al. a max error of 17 s.

4.4. Discussion

While we showed that our model predicts the block
veriﬁcation time of Zcash more accurately than other
models proposed in literature, we observe that it performs
much better for modern systems with faster disk access,
more RAM, and more CPU cores. Low RAM forces
the Zcash client to ﬂush state to disk more frequently,
which leads to unpredictable access times. Similarly, the
impact of multi-core, high(er) clock rate CPUs is visi-
ble. Delays introduced by a single veriﬁcation step, e.g.,
is a magnitude faster in the
verifying a single input,
SSD benchmark (βi = 61.411 µs) when compared to the
HDD benchmark (βi = 246.312 µs). By comparing both
benchmarks and the performance of our model, we can
conclude that I/O operations are a negligible factor during
block veriﬁcation on modern systems.

We additionally observe a high variance of veriﬁcation
time for blocks containing transparent transactions only.
In such scenarios, our modeling approach is not able to

accurately capture this variance. Likely, our abstraction
of the scripting system, i.e., our assumption to consider
P2PKH scripts only, led to this result. Improving our
model towards transparent transactions will require a more
in-depth analysis of the scripting system. A major chal-
lenge would be to classify and identify relevant opcodes
with the highest impact on the veriﬁcation time. Extracting
these features, including sample data, would also be sig-
niﬁcantly more complex. This direction, however, would
increase our model’s applicability for other blockchains.
While we focus on Zcash, we separately evaluated
blocks with transparent transactions only. We observed
that all models perform similarly with a high error yielding
MAE ≈ 4 ms, EMR > 80 %, and R2 = 0. This indicates
a general weakness. That is, models using the block size
as the only predictor might be unable to predict block
veriﬁcation times accurately for blockchains such as Bit-
coin. Therefore, not only blockchains with complex block
veriﬁcation procedures such as Zcash or Ethereum [17]
require additional modeling efforts, but also blockchains
with a rather simple scripting system.

In general, our model is a trade off between abstrac-
tion, complexity, and transparency. We deliberately use
basic, easily acquirable features. Each feature is encoded
in the Zcash RPC response and can be easily retrieved.

5. Conclusion

In this paper, we developed JOIST, a new model
based on transaction features that provides more accurate
results than the prevalent block size-based models. To
this end, we extracted time-consuming primitives from
Zcash’s transaction veriﬁcation process. JOIST is simple
to parametrize and at the same time able to predict the
block veriﬁcation time accurately.

Overall, we believe that JOIST is a promising ﬁrst
step in modeling and predicting the block veriﬁcation time
of blockchains, which in turn can improve modeling and
simulation efforts of the propagation delay and blockchain
systems in general. Furthermore, the model could help
miners to quantify veriﬁcation risk and therefore address
the veriﬁers dilemma.

101100101102103Verification time [ms]02505007501000125015001750Predicted verification time [ms]R2 score=0.91101100101102103Verification time [ms]0100200300400Predicted verification time [ms]R2 score=0.25101100101102103Verification time [ms]020406080Predicted verification time [ms]R2 score=0.01References

Appendix A.
Error Calculation

[1] L. Luu, J. Teutsch, R. Kulkarni, and P. Saxena, “Demystifying
incentives in the consensus computer,” in CCS ’15: Proceedings
of the 22nd ACM SIGSAC Conference on Computer and Commu-
nications Security, Denver, CO, USA, Oct. 2015, pp. 706–719.

[2] S. G. Motlagh, J. Miˇsi´c, and V. B. Miˇsi´c, “An analytical model for
churn process in bitcoin network with ordinary and relay nodes,”
Peer-to-Peer Networking and Applications, vol. 13, pp. 1931–1942,
2020.

[3] E. Rohrer and F. Tschorsch, “Kadcast: A structured approach to
broadcast in blockchain networks,” in AFT ’19: Proceedings of
the ﬁrst ACM conference on Advances in Financial Technologies,
Zurich, Switzerland, Oct. 2019, pp. 199–213.

[4] Y. Shahsavari, K. Zhang, and C. Talhi, “A theoretical model for
block propagation analysis in bitcoin network,” IEEE Transactions
on Engineering Management, pp. 1–18, 2020. DOI: 10.1109/TEM.
2020.2989170.

[5] A. Gervais, G. Karame, K. W¨ust, V. Glykantzis, H. Ritzdorf, and
S. Capkun, “On the security and performance of proof of work
blockchains,” in CCS ’16: Proceedings of the 23rd ACM SIGSAC
Conference on Computer and Communications Security, Vienna,
Austria, Oct. 2016.

[6] E. Daniel, E. Rohrer, and F. Tschorsch, “Map-z: Exposing the
zcash network in times of transition,” in LCN ’19: Proceedings
of the 44th IEEE International Conference on Local Computer
Networks, Osnabr¨uck, Germany, Oct. 2019, pp. 84–92.

Model

JOIST

[7] D. Hopwood, S. Bowe, T. Hornby, and N. Wilcox, Zcash protocol

speciﬁcation (version 2020.1.15), Jun. 2020.

[8] S. Nakamoto, Bitcoin: A peer-to-peer electronic cash system, 2009.

[Online]. Available: http://www.bitcoin.org/bitcoin.pdf.

[9] R. Kanda and K. Shudo, “Estimation of data propagation time
on the bitcoin network,” in AINTEC ’19: Proceedings of the 15th
Asian Internet Engineering Conference, Phuket, Thailand, Aug.
2019, pp. 47–52.

Block size

[10] S. Das, N. Awathare, L. Ren, V. J. Ribeiro, and U. Bellur, “Better
late than never; scaling computations in blockchain by delaying
transactions,” arXiv preprint arXiv:2005.11791, 2020.

[11] B. Liu, Y. Qin, and X. Chu, “Reducing forks in the blockchain via
probabilistic veriﬁcation,” in ICDEW ’19: Proceedings of the 35th
IEEE International Conference on Data Engineering Workshops,
Macao, China, Jul. 2019, pp. 13–18.

[12] J. Eberhardt and S. Tai, “Zokrates-scalable privacy-preserving
off-chain computations,” in BLOCKCHAIN ’18: Proceedings of
the IEEE International Conference on Blockchain, Halifax, NS,
Canada, Aug. 2018, pp. 1084–1091.

[13] M. Corallo. (Apr. 2016). “Bip 152: Compact block relay,” [Online].
Available: https://github.com/bitcoin/bips/blob/master/bip- 0152.
mediawiki.

[14] A. Miller and R. Jansen, “Shadow-bitcoin: Scalable simulation via
direct execution of multi-threaded applications,” in CSET ’15: Pro-
ceedings of the 8th Workshop on Cyber Security Experimentation
and Test, Washington, DC, USA, Aug. 2015.

[15] C. Faria and M. Correia, “Blocksim: Blockchain simulator,” in
Blockchain ’19: Proceedings of the 2019 IEEE International Con-
ference on Blockchain, Atlanta, GA, USA, Jul. 2019, pp. 439–446.

[16] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers, E.
Tromer, and M. Virza, “Zerocash: Decentralized anonymous pay-
ments from bitcoin,” in SP ’14: Proceedings of the 35th IEEE
Symposium on Security and Privacy, San Jose, CA, USA, May
2014.

[17] G. Wood. (2014). “Ethereum: A secure decentralised generalised
transaction ledger,” [Online]. Available: http://gavwood.com/Paper.
pdf.

For completeness, we include the formulas for calcu-
lating MAE and EMR. Let n be the sample size, i.e., the
number of blocks. Let ˆti be the predicted and ti the real
observed veriﬁcation time at block height i ∈ n. We deﬁne
the error ei as the difference between the real veriﬁcation
time ti and the prediction ˆti, i.e., ei = ti − ˆti. Moreover,
let ¯t be the average veriﬁcation time over our complete
sample, i.e., ¯t = 1
i=1 ti. We accordingly deﬁne MAE
n
and EMR as

(cid:80)n

(cid:80)n

i=1 |ei|
n
MAE
¯t

.

and

(6)

(7)

MAE =

EMR =

Appendix B.
Fitting Parameters

TABLE 4: Model ﬁtting parameters

Benchmark

Parameters [µs]

5k, HDD

5k, SSD

20k, HDD

20k, SSD

5k, HDD
5k, SSD
20k, HDD
20k, SSD

βj = 10999.119, βo = 9862.146,
βi = 246.312, βs = 39760.496,
k = 13209.042
βj = 5359.094, βo = 5726.675,
βi = 61.411, βs = 16912.591,
k = 4468.949
βj = 10784.519, βo = 12607.155,
βi = 139.676, βs = 25227.674,
k = 21760.549
βj = 5349.659, βo = 5782.956,
βi = 40.339, βs = 12067.658,
k = 5928.899

β = 4.345 1
β = 1.717 1
β = 2.232 1
β = 0.910 1

B , k = 8784.760
B , k = 3584.715
B , k = 28445.511
B , k = 9647.374

Gervais et al.

N/A

β = 0.3796 1

B , k = 0

Appendix C.
Transaction Types

In Fig. 2, we distinguish the different transaction types
over the last 200k blocks in our sample. To this end, we
consider a block as a set of transparent inputs, Spend,
Output, and JoinSplit descriptions. We ﬁnd that blocks
consist on average of 90 % transparent inputs, while Spend
an Output descriptions make up 9 %, and JoinSplit de-
scriptions remain largely stable at around 1 % per block.

Figure 2: Ratio of transparent inputs, Spend and Output
descriptions, and JoinSplit descriptions per block (200k
blocks).

750800850900Block height * 10001%10%100%Count / Block [%]InputsSpends & OutputsJoinSplits