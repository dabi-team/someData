1
2
0
2

c
e
D
4

]

R
C
.
s
c
[

1
v
7
9
3
2
0
.
2
1
1
2
:
v
i
X
r
a

Towards automated verification of multi-party consensus
protocols

IVAN FEDOTOV, Moscow Institute of Physics and Technology, Russia
ANTON KHRITANKOV, Moscow Institute of Physics and Technology, Russia
ARTEM BARGER, Idea Blockchain Competence Center, Israel

Blockchain technology and related frameworks have recently received extensive attention. Blockchain systems
use multi-party consensus protocols to reach agreements on transactions. Hyperledger Fabric framework
exposes a multi-party consensus, based on endorsement policy protocol, to reach a consensus on a transaction.
In this paper, we define a problem of verification of a blockchain multi-party consensus with probabilistic
properties. Further, we propose a verification technique of endorsement policies using statistical model
checking and hypothesis testing. We analyze several aspects of the policies, including the ability to assign
weights to organizations and the refusal probabilities of organizations. We demonstrate on experiments the
work of our verification technique and how one can use experimental results to make the model satisfiable
the specification. One can use our technique to design enterprise applications with the Hyperledger Fabric
framework.

CCS Concepts: ‚Ä¢ Software and its engineering ‚Üí Formal software verification; Software design engineering;
‚Ä¢ Information systems ‚Üí Enterprise applications.

Additional Key Words and Phrases: Verification, blockchain, consensus protocols, statistical model checking

Ivan Fedotov, Anton Khritankov, and Artem Barger. 2021. Towards automated verification of multi-party
consensus protocols. 1, 1 (), 10 pages.

1 INTRODUCTION
Multi-party consensus protocols nowadays have widespread use in different application domains:
logistic area, internet of things, financial services, and others. In blockchain applications, multi-
party consensus protocol exposes the necessity to reach a consensus between untrusted parties
which need to agree on changes in the system without the help of a third party.

Since blockchain technology has become popular just recently, frameworks and tools for testing
and verification of blockchain systems are still under development. Vulnerabilities in blockchain
applications and particularly in multi-party protocols of Hyperledger Fabric can lead to significant
losses [1].

In our work, we address a statistical model checking of multi-party consensus protocols. Also,
we show that one can apply our approach to verify policies in the Hyperledger Fabric framework
(HLF). In particular, this paper makes the following contributions:

(1) States the verification problem for endorsement policies
(2) Provides algorithms to build a model and specification for consensus protocols
(3) Demonstrates usage of statistical model checking technique to verify consensus protocols

Authors‚Äô addresses: Ivan Fedotov, Moscow Institute of Physics and Technology, Russia, Institutskiy Pereulok, 9, Dolgoprudny,
141701, ivan.fedotov@phystech.edu; Anton Khritankov, Moscow Institute of Physics and Technology, Russia, Institutskiy
Pereulok, 9, Dolgoprudny, 141701, anton.khritankov@phystech.edu; Artem Barger, Idea Blockchain Competence Center,
Israel, Haifa, artem@bargr.net.

¬© 2021
XXXX-XXXX/2021/12-ART

1

 
 
 
 
 
 
2.2 Model Checking of Probabilistic Systems

2

INTRODUCTION

The remainder of the paper is organized as follows. Section 2 states the problem and outlines
techniques that we used to solve it. In section 3 we provide related studies on multi-party consensus
protocols verification. In section 4 we explain in detail our algorithms to build a model and
specifications from the properties of the system. We carry out experiments with further analysis in
section 5. Section 6 provides a discussion and the concluding remarks.

2 BACKGROUND
In the current section, we describe the transaction confirmation process, the statement of the
problem, and the techniques that we use for model checking.

2.1 Transaction Confirmation
Let us consider the transaction confirmation process in Hyperledger Fabric. We choose a blockchain
network based on Fabric, as HLF is one of the most popular blockchain frameworks among enterprise
applications [2]. HLF allows specifying the business logic of transactions through the chaincode.
Agreement on the chaincode proceeds among network members, which called organizations, in
the channel [3]. Chaincode has an endorsement policy that specifies a set of peers on the channel
that must execute the chaincode and endorse the execution results to consider the transaction as
valid in the channel.

To specify organizations that might endorse the transaction, we assign a weight to each organi-
zation. Authors discuss that weighted multi-party consensus protocols provide more flexibility [4]
[5]. HLF allows using weighted members in endorsement policies [6].

In weighted consensus protocols, the result depends on the ratio of weights of organizations that
reach the consensus. We formalize the endorsement policy using a threshold value ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé. If
the organizations in the channel with the total weight greater than ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé reach the consensus,
then the whole network either accepts or rejects the transaction, depending on the responses of
organizations that reached the consensus.

To define a probability for an organization to agree on a transaction, we refer to the historical data
that contains responses of organizations. One can collect statistical data on how each organization
agrees on a transaction. Using well-known techniques [7] [8] chaincode designers can compute
the probability to give a refusal response of each organization. The refusal probability defines the
probability that an organization does not accept the transaction. We introduce a vector of refusal
responses for organizations. Each value in the vector corresponds to the probability to reject a
transaction for a certain organization.

Endorsement policy does not take into account the probabilistic nature of organizations to reach
a consensus. We assign to each organization the probability to give a response with which the
organization does not reach a consensus.

2.2 Model Checking of Probabilistic Systems
We need to use a model checking technique for probabilistic systems which do not require expensive
computations, as usually, designers shall make a decision fast on deployment chaincode in enterprise
applications. Moreover, we need to bound an error of computation to control the accuracy of the
verification result. We consider different probabilistic model checking techniques and choose the
one that fits the most to our requirements.

Given a structure ùëÄ and a property ùúô, the model-checking problem answers whether ùëÄ satisfies
ùúô, which one can write in the following form: ùëÄ |= ùúô. We consider specification in a probabilistic
Linear Temporal Logic (pLTL) form. The model-checking problem for pLTL properties follows
the same steps verification steps as with LTL formulas: model gets composed with the Buchi
automaton representation of the verified property, and then checking that the accepting state

2

4 BACKGROUND

4.1

Formal Modeling of Multy-Party Consensus Protocols

is visited infinitely often. In pLTL formula, a probability that the model satisfies specification is
equal to the probability of reaching a satisfying state. The model checking problem of probabilistic
systems is polynomial in the size of the model but double-exponential in the size of the LTL formula
[9].

Statistical model checking refers to a series of simulation-based techniques that help to answer
two questions: (1) Qualitative: Is the probability that the model satisfies the specification is greater
than a certain threshold? and (2) Quantitative: What is the probability of the system to satisfy the
specification? [10]. This technique fits better for proving the robust satisfaction of a quantitative
property, as the actual probability of satisfying a given specification needs to be bounded away
from the threshold to which it is compared [11]. As we also need to check the probability threshold
to reach a consensus, we use a statistical model checking approach.

Statistical inference comes in one of two flavors: (a) hypothesis testing is used to determine
the extent to which observations ‚Äúconform‚Äù to a given specification, and (b) estimation is used to
determine likely values of parameters based on the assumption that the data is randomly drawn
from a specified type of distribution. In our modeling, we use the hypothesis testing approach, as
estimation appears to be more empiricist in form. In the estimation technique, we need to base an
estimate on the hypothesized model that the probabilistic behavior of a system follows some specific
probability distribution. From our statistical data, we can not always argue about the probability
distribution. In the current work, we model the endorsement policy confirmation system and verify
the probability to agree on a transaction.

3 RELATED WORK
Verification using statistical model checking is well studied and numerous statistical model checking
tools are developed [12]. Recent researches use statistical model checking to verify blockchain
systems [13], [14]. In provided works, authors study different probabilistic aspects of blockchain
network: peer-to-peer system, involving multiple blockchain participants, DNS connection. To the
best of our knowledge, there is a gap in the verification of probabilistic aspects of the consensus
protocols, which we cover in the current work.

4 MODELING AND VERIFICATION
In this section, we describe a verification algorithm that takes as an input parameters of the
system and outputs the verification result. Verification result gives an answer to the question: can
organizations approve or reject a transaction with a certain probability? The algorithm consists of
two phases: constructing a discrete-time Markov chain (DTMC) model and building specification.

4.1 Formal Modeling of Multy-Party Consensus Protocols
The user provides an information about the system with the following parameters:

‚Ä¢ set of organizations
‚Ä¢ weight of each organization
‚Ä¢ probability of each organization to give refusal response for the transaction. This value we
take from the vector of refusal responses that one can construct from a historical dataset.

And specification parameters:
‚Ä¢ weight threshold ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé. If the total weight of organizations that reach consensus is more

than ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé, then the whole system reaches the consensus

‚Ä¢ probability threshold ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé. If the whole system agrees on the transaction with the
probability of more than ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé, then we consider that the multi-party protocol is
valid.

3

4.1

Formal Modeling of Multy-Party Consensus Protocols

4 MODELING AND VERIFICATION

We consider parameters of the system in the following form: Set(organization, probability, weight).
Each element of the set is a tuple that contains an organization identifier, the probability to give
a refusal response, and the weight of the organization. Parameters of the specification one can
provide as two values ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé and ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé. We build a DTMC model from parameters of
the system and pLTL formula from parameters of specification. After that, one can check that the
model satisfies the specification using statistical model checking.

In Algorithm 1 we show the creation of a DTMC model. First, we take one organization from
the set with a corresponding probability and weight. The first organization that we choose is the
root of our DTMC model. Next, we take the second organization and assign it to two successors of
the root. Transition to one successor happens with a probability ùëÉ, which equals the probability
that the root‚Äôs response is refusal. The second transition happens with a probability 1 ‚àí ùëÉ, which
denotes the probability of the root‚Äôs fair response. After that, we remove the root and successor
organizations from the set and recursively apply the algorithm to each subtree. If we traverse from
the root to the state with the transition with the probability ùëÉ, then the root‚Äôs response is refusal,
otherwise, the response is acceptance. Set ùëõùëúùëëùëíùë† in Algorithm 1 is a set where we save the nodes of
the tree. In the input, this set is empty, in the output it keeps all nodes of the tree. Each node keeps
the information about the assigned organization, weight, and probability to give a refusal response
of the organization and corresponding predecessor. Also, a node keeps the information about the
parent‚Äôs reply: was it refusal or acceptance. If the reply was not a refusal, then the transition from
the predecessor happens with a probability 1 ‚àí ùëÉ, otherwise, with a probability ùëÉ. Thus, having a
set of nodes one can build a DTMC model. The order of choosing the organizations to build the
tree can be random, as variables of the considered stochastic process are independent.

Data: Set(organization, Pr, W) orgs, root, Set nodes
Result: Set of nodes for DTMC
if orgs is not empty then

pop an organization ùëõùëíùë•ùë°ùëÇùëüùëî with its probability ùëÉùëü and weight ùëä from the set;
// build a subtree with a fair response:
create a node ùëÅùëõùëíùë•ùë°ùëÇùëüùëîùëê with root as a predecessor, parameters ùëä , ùëÉùëü , and confirmation
predecessor‚Äôs response;
add the node ùëÅùëõùëíùë•ùë°ùëÇùëüùëîùëê with a fair parent‚Äôs response to set nodes;
//run the algorithm recursively to build a subtree for the node with a confirmation

//predecessor‚Äôs response :
DTMC-Creation(orgs, ùëÅùëõùëíùë•ùë°ùëÇùëüùëîùëê , nodes);
// build a subtree with a refusal response:
create a node ùëÅùëõùëíùë•ùë°ùëÇùëüùëîùëü with root as a predecessor, parameters ùëä , ùëÉùëü , and refusal
predecessor‚Äôs response;
add the ùëÅùëõùëíùë•ùë°ùëÇùëüùëîùëü with a refusal parent‚Äôs r response to set nodes;
//run the algorithm recursively to build a subtree for the node with a refusal
//predecessor‚Äôs response: DTMC-Creation(orgs, ùëÅùëõùëíùë•ùë°ùëÇùëüùëîùëü , nodes);

else

return nodes ;

end

Algorithm 1: DTMC-creation.

4

4 MODELING AND VERIFICATION

4.2

Statistical Model Checking of Consensus Protocols

4.2 Statistical Model Checking of Consensus Protocols
Next, we want to check whether the consensus probability ùëÉùëê is greater than the threshold
ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé. ùëÉùëê is the probability to get a fair response from organizations with a total weight more
than ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé. If the probability to get fair responses from a necessary number of organizations ùëÉùëê
is greater than the threshold ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé, then the multi-party protocol is valid.

We assign a value to each node of the DTMC model that corresponds to the total weight of all
fair predecessors‚Äô weights. We check, that the probability to reach at least one node with the total
weight is greater than ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé is greater than ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé. In other words, we check that the
probability to reach the consensus of fair organizations with a total weight more than the weight
threshold is greater than the probability threshold. If this property holds, then the model satisfies
the specification, and the multi-party protocol is valid. Algorithm 2 takes as an input a DTMC
model and outputs nodes with the total weight assignments. The idea is similar to the depth-first
search algorithm. But additionally, we assign the total weight to each node. The total weight of the
node is a sum of the weight of all predecessors that gave a fair response.

Data: root, nodes
Result: Set of nodes with a total sums assignment
foreach successor ùëÅùë† of root do

assign to ùëÅùë† the total weight of the root;
if root give a fair response then

add the weight of its root to the total weight of ùëÅùë†

labeling-sum(ùëÅùë† , nodes);

end

Algorithm 2: labeling-sum

Once we get the set of nodes with the total weights assignments from Algorithm 2, we can build
a pLTL specification. We want to reach at least one of the nodes whose total weight is greater than
ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé with a probability greater than ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé. We can write a disjunction of each node
with a total weight greater than ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé. Further, before the disjunction we put operator "Finally"
ùêπ and the probabilistic operator ùëÉ > ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé. The final specification tells us that at least one
node from the desired set shall be finally reached with a probability greater than ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé.

One can build a specification to compute a transaction rejection instead of confirmation. For this
instead of computing the total weight of confirmed responses, one shall compute the total weight
of refusal responses and build the specification based on this value.

Let us illustrates the work of two algorithms with an example. We consider the model consisting

of three organizations:

‚Ä¢ Organization 1. Weight 1, Probability 0.07.
‚Ä¢ Organization 2. Weight 3, Probability 0.01.
‚Ä¢ Organization 3. Weight 2, Probability 0.02.
We also provide a specification parameters: ùëÉùëüùëúùëèùëéùëèùëñùëôùëñùë°ùë¶ùë°‚Ñé = 0.95, ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé = 5. Applying Algo-
rithm 1, one can get a DTMC model from Fig. 1. Node ùëÇ1 corresponds to organization 1, nodes ùëÇ2,
ùëÇ ‚Ä≤
2 correspond to organization 2, and nodes ùëÇ3, ùëÇ3‚Ä≤, ùëÇ3‚Ä≤‚Ä≤, ùëÇ3‚Ä≤‚Ä≤ correspond to organization 3. Nodes
ùëÇùëôùëõ, where n takes values from 1 to 8, are the leafs of DTMC model. Near from each node we put
the total sum that corresponds to this node. We do not write the total sum 0.

Using Algorithm 2 we assign each node its total weight. In Fig. 1 we depict the total weight near
each node besides those which total weight is zero. Further, we choose nodes with a total weight
greater than ùëä ùëíùëñùëî‚Ñéùë°ùë°‚Ñé to build a pLTL formula. We color these nodes green. The corresponding

5

5 MODELING AND VERIFICATION

pLTL specification one can write in the following form:

ùëÉ > 0.95 ùêπ (ùëÇùëô4 ùëÇùëÖ ùëÇùëô8)
With statistical model checking techniques, one can simulate the model. Using hypothesis testing
we get the threshold probability when the model satisfies the specification. Our model implies
the following assumptions. First, the considered multi-party consensus protocol is ergodistic. We
do not consider changing the probabilities to give a refusal reply during the verification process.
Second, as we take organization for building the DTMC model in an arbitrary order, we assume
that the probabilities of different organizations are independent.

One can use our algorithm to build consensus protocol models with infinite paths. For example,
if the threshold weight is not reached with a certain probability on the model, we can make a
transition from this leaf to the root. That problem refers to the optimization task. Initially, we
need to introduce a metric, the expected number of messages that pass through the system before
accepting the transaction. Then, based on this optimization function we can change the model
by adding transitions in such a way, that the model satisfies the specification with a minimum
expected number of messages. The number of messages is important, as each message can require
a fee from the organization that sends it. This problem is interesting for future research.

Fig. 1. Example of a DTMC endorsement policy model

5 EXPERIMENTAL EVALUATION
In the current section, we build models and investigate how to change the parameters of the
system to satisfy the specification. The goals of the experiments are the following. First, we want
to demonstrate the work of our algorithms, and check that the model satisfies invariants of the
system. Second, we want to show that relying on the experimental results one can modify the
system to make it satisfiable the specifications.

Initially, we provide parameters of the system. We need to choose the number of organizations
in our experiments. In the endorsement policy protocol, the number of organizations can be big,
i.e. dozens and even hundreds. But some organizations can be clients of other ones, which will be
responsible for the reply on the transaction confirmation proposal. For our experiments, we take 3
organizations, similar to the recent research [15].

Next, we choose weight parameters for each organization in such a way that one organization
can not make a decision alone. Also, we take small probabilities to reject a transaction for each
organization, i.e. less than 0.1. If the probability to reject a transaction is big, then either there were
too many incorrect transactions in the past, or the organization is in an incorrect state, i.e. the

6

5 EXPERIMENTAL EVALUATION

5.1 Experimental Evaluation of Verification Algorithms

organization is not synchronized with the network. Thus, we assume that organizations of our
system mostly agree with a transaction. We consider the model similar to one illustrated in Fig. 1.
Further, we choose a statistical model checking tool to verify the model. Based on the survey

[12] we have chosen the tool for our experiments that satisfy the following parameters:

‚Ä¢ based on the hypothesis testing approach
‚Ä¢ allows to build a DTMC model and check pLTL specifications
‚Ä¢ simulates the system at the level of the language (on-the-fly), which do not require a memory

overhead

‚Ä¢ the tool is maintained

The first two points correspond to the requirements of our algorithms. The third and fourth
points facilitate easy integration and usage of the verification algorithms to Hyperledger Fabric
enterprise applications. PRISM tool [16] satisfy all considered properties. We use PRISM to build a
model as a DTMC and a specification in a pLTL form.

First, we compare verification results based on our algorithms with analytical computations. In
the second experiment, we check that the model correctly reflects changes in the system. Finally,
we investigate probability versus weight threshold dependency. That shows us how to change the
threshold parameters to make the system satisfiable the specification. One can provide considered
experiments for the verification of HLF endorsement policies.

We took 10000 samples for each simulation and 0.001 accuracy parameter in PRISM. We run
experiments on a 2,3 GHz Dual-Core Intel Core i5 CPU. The memory limit is 2 GB. We did not put
the time limits, as each experiment takes less than 1 second.

5.1 Experimental Evaluation of Verification Algorithms
Initially, we want to prove with experiments that our algorithms for building models and specifica-
tions are valid. We claim that the proposed method to build a model corresponds to the theoretical
computations of probability to accept a transaction.

The probability threshold for our models is 0.95, the weight threshold is 5. Fig. 1 illustrates the
model for the experiment. The code of the models is available in the Github repository [17]. We take
examples that allow computing analytically the probability to accept a transaction. We considered
different cases:

‚Ä¢ All organizations give the same response on the transaction.
‚Ä¢ Organizations 2 and 3 with weights 3 and 2 correspondingly agree on the transaction with

probability 1, organization 1 refuses a transaction with a probability 1.

‚Ä¢ Organization 1 with weight 1 agrees on the transaction with probability 1, other organizations

refuse a transaction with probability 1.

‚Ä¢ All organizations agree on the transaction with a probability of 0.5.

We build models for each case and compute the probability that the transaction gets accepted. As
the weight threshold is 5, desired nodes correspond to states ùëÇùëô4 and ùëÇùëô8 from the model in Fig. 1.
As expected, in the first case PRISM returns the probability 1 to reach a consensus. The second
experiment also shows probability 1. That corresponds to the analytical computation, as organi-
zations with a total weight greater than the threshold accept a transaction with a probability of
1. In the third case, the probability to accept a transaction is 0, as the majority of organizations
give a refusal response with a probability of 1. The experiment shows the same result. In the fourth
experiment, the probability to accept a transaction is 0.25. We get the same result analytically by
multiplying probabilities.

7

5.2 Effect of the Changing System Parameters on the Verification5 EXPERIMENTAL EVALUATION

5.2 Effect of the Changing System Parameters on the Verification
In this section, we check that changing the system parameters correspond to the changes in the
model and verification result. That proves that the system corresponds to the constructed model.
We considered the following scenarios:

‚Ä¢ Invariant 1. The probability to accept transactions decreases for one organization. We expect

that the overall acceptance probability shall decrease as well.

‚Ä¢ Invariant 2. One organization leaves the channel. The probability of the whole system to

accept the transaction shall either remain the same or decrease.

We take the model from Fig. 1 with the same probability and weight thresholds, 0.95 and 5

correspondently.

Invariant 1. In the current scenario, we decrease the probability to accept the transaction
5.2.1
for organization ùëÇ3. We provide the dependency of the probability to accept the transaction for
organization 3 versus the probability that the whole system agrees on the transaction. We decrease
the probability to accept a transaction for an organization iteratively on 0.01.

Fig. 2. Probability Threshold versus O3 Acceptance Probability Dependency

We illustrated the experimental result in Fig. 2. The dependency is expected: with decreasing
of acceptance rate of organization 3, the probability threshold of the whole system to accept the
transaction decreases as well. We see that the dependency is linear, and the discrepancy is less than
0.001, which corresponds to the experiment setup.

Invariant 2. Now we investigate how changing the number of organizations in the channel
5.2.2
affects the probability to accept the transaction by the whole system. We remove organization 1,
as the total sum of organizations 2 and 3 still equals the threshold. Applying algorithms 1 and 2,
we can get the new model and nodes on this model reaching which the whole system accepts the
transaction. Fig. 3 illustrates this model, the green node is a node returned by Algorithm 2.

Simulating the model we get that the probability of the whole system to accept the transaction is
0.9683. For the system with three organizations the probability to accept the transaction is 0.9689.
We see that the difference between acceptance probability is less than the discrepancy in our
experiment, which is 0.001. Thus, removal organization 1 does not affect the probability of the
whole system accepting the transaction. This is the expected result, as the total sum of organization
1 with either organization 2 or organization 3 is less than the weight threshold of 5. Hence, the
reply of organization 1 does not affect the probability of the system accepting the transaction. We

8

6 EXPERIMENTAL EVALUATION

Fig. 3. DTMC model with 2 organizations

also can see it in Fig. 1: the left and the right subtree of the node ùëÇ1 are the same and similar to the
tree from Fig. 3.

5.3 Relation of the Specification Parameters
In this experiment, we get the dependency of the weight threshold versus the probability threshold.
Table 1 illustrates the dependency. The result is expected: if the weight threshold is low, then
the probability to accept a transaction is also low, as in our model acceptance probability of each
organization is high. With an increase of the weight threshold, the acceptance probability decreases.
When the weight threshold is greater than 6, then the probability to refuse transaction will be
constant 0, as there are no organizations in our model with a total weight greater than 6.

Table 1. Weight threshold versus probability threshold dependency

Weight threshold Probability threshold

1
2
3
4
5
6
7

0.9990 +/-0.0004
0.9997 +/-0.0005
0.9989 +/- 0.001
0.9894 +/- 0.0003
0.9717 +/- 0.0005
0.9035 +/- 0.0009
0

5.4 Analysis of the Experimental Results
We proved with experiments that our algorithms for building models and specifications are valid
and invariants of the system remain the same. Although we cannot provide experimental evaluation
for all possible cases, one can see that the experimental results based on our algorithms correspond
to the analytical computations. We also have shown that if one changes the system parameters,
then the model and verification results also change in the right direction. Based on provided
dependencies, one can choose probability and weight thresholds in such a way that the model
satisfies the specification.

6 CONCLUSION AND FUTURE WORK
In this paper, we analyzed the multi-party consensus problem. To check that the protocol satisfies the
specification we proposed algorithms to build a DTMC model and a pLTL specification. Further, we
verified the model using the statistical model checking approach. One can use proposed algorithms

9

6 CONCLUSION AND FUTURE WORK

and experiments to verify endorsement policies in the Hyperledger Fabric framework, as it allows
to assign weights to organizations.

As further research, we want to investigate the scheduling of sending the confirmation messages
on the model with infinite paths. Also, we are going to collect the data of real-world endorsement
policies to provide experiments on them.

REFERENCES
[1] A. Dabholkar and V. Saraswat, ‚ÄúRipping the fabric: Attacks and mitigations on hyperledger fabric,‚Äù in International

Conference on Applications and Techniques in Information Security, pp. 300‚Äì311, Springer, 2019.

[2] E. Androulaki et al., ‚ÄúHyperledger fabric: a distributed operating system for permissioned blockchains,‚Äù in Proceedings
of the Thirteenth EuroSys Conference, EuroSys 2018, Porto, Portugal, April 23-26, 2018, pp. 30:1‚Äì30:15, ACM, 2018.
[3] C. Cachin et al., ‚ÄúArchitecture of the hyperledger blockchain fabric,‚Äù in Workshop on distributed cryptocurrencies and

consensus ledgers, vol. 310, Chicago, IL, 2016.

[4] S. M√ºller, A. Penzkofer, B. Kusmierz, D. Camargo, and W. J. Buchanan, ‚ÄúFast probabilistic consensus with weighted

votes,‚Äù CoRR, vol. abs/2006.00928, 2020.

[5] L. Gao, H. Fang, W. Chen, and H. Cao, ‚ÄúWeighted consensus problem for multiagent systems with edge- and node-

weighted directed graphs,‚Äù Complex., vol. 2019, pp. 4583465:1‚Äì4583465:13, 2019.

[6] H. Sukhwani, Performance Modeling & Analysis of Hyperledger Fabric (Permissioned Blockchain Network). PhD thesis,

Duke University, Durham, NC, USA, 2019.

[7] J. Duda, ‚ÄúExploiting statistical dependencies of time series with hierarchical correlation reconstruction,‚Äù CoRR,

vol. abs/1807.04119, 2018.

[8] G. Corani and A. Benavoli, ‚ÄúA bayesian approach for comparing cross-validated algorithms on multiple data sets,‚Äù

Mach. Learn., vol. 100, no. 2-3, pp. 285‚Äì304, 2015.

[9] E. M. Clarke Jr, O. Grumberg, D. Kroening, D. Peled, and H. Veith, Model checking. MIT press, 2018.
[10] A. Legay et al., ‚ÄúStatistical model checking,‚Äù in Computing and Software Science - State of the Art and Perspectives,

vol. 10000 of Lecture Notes in Computer Science, pp. 478‚Äì504, Springer, 2019.

[11] H. L. S. Younes and R. G. Simmons, ‚ÄúProbabilistic verification of discrete event systems using acceptance sampling,‚Äù in
Computer Aided Verification, 14th International Conference, CAV 2002,Copenhagen, Denmark, July 27-31, 2002, Proceedings
(E. Brinksma and K. G. Larsen, eds.), vol. 2404 of Lecture Notes in Computer Science, pp. 223‚Äì235, Springer, 2002.
[12] G. Agha and K. Palmskog, ‚ÄúA survey of statistical model checking,‚Äù ACM Trans. Model. Comput. Simul., vol. 28, no. 1,

pp. 6:1‚Äì6:39, 2018.

[13] I. Fedotov and A. Khritankov, ‚ÄúStatistical model checking of common attack scenarios on blockchain,‚Äù CoRR,

vol. abs/2109.02803, 2021.

[14] T. Abdellatif and K. Brousmiche, ‚ÄúFormal verification of smart contracts based on users and blockchain behaviors
models,‚Äù in 9th IFIP International Conference on New Technologies, Mobility and Security, NTMS 2018, Paris, France,
February 26-28, 2018, pp. 1‚Äì5, IEEE, 2018.

[15] P. Thakkar and S. Nathan, ‚ÄúScaling hyperledger fabric using pipelined execution and sparse peers,‚Äù CoRR,

vol. abs/2003.05113, 2020.

[16] M. Z. Kwiatkowska, G. Norman, and D. Parker, ‚ÄúPRISM 4.0: Verification of probabilistic real-time systems,‚Äù in Com-
puter Aided Verification - 23rd International Conference, CAV 2011, Snowbird, UT, USA, July 14-20, 2011. Proceedings
(G. Gopalakrishnan and S. Qadeer, eds.), vol. 6806 of Lecture Notes in Computer Science, pp. 585‚Äì591, Springer, 2011.

[17] I. Fedotov and A. Khritankov, ‚ÄúPrism models.‚Äù https://github.com/1vanan/PRISM-models/tree/master/endorsement-

policy, 2021.

10

