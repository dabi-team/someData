TSGN: Transaction Subgraph Networks Assisting
Phishing Detection in Ethereum

Jinhuan Wang, Pengtao Chen, Xinyao Xu, Jiajing Wu, Senior Member, IEEE, Meng Shen, Member, IEEE,
Qi Xuan, Senior Member, IEEE, Xiaoniu Yang

1

2
2
0
2

g
u
A
7
2

]

R
C
.
s
c
[

1
v
8
3
9
2
1
.
8
0
2
2
:
v
i
X
r
a

Abstract—Due to the decentralized and public nature of the
Blockchain ecosystem, the malicious activities on the Ethereum
platform impose immeasurable losses for the users. Existing
phishing scam detection methods mostly rely only on the analysis
of original transaction networks, which is difﬁcult to dig deeply
into the transaction patterns hidden in the network structure of
transaction interaction. In this paper, we propose a Transaction
SubGraph Network (TSGN) based phishing accounts identiﬁ-
cation framework for Ethereum. We ﬁrst extract transaction
subgraphs for target accounts and then expand these subgraphs
into corresponding TSGNs based on the different mapping mech-
anisms. In order to make our model incorporate more important
information about real transactions, we encode the transaction
attributes into the modeling process of TSGNs, yielding two
i.e., Directed-TSGN and Temporal-TSGN,
variants of TSGN,
which can be applied to the different attributed networks.
Especially, by introducing TSGN into multi-edge transaction
networks, the Multiple-TSGN model proposed is able to preserve
the temporal
transaction ﬂow information and capture the
signiﬁcant topological pattern of phishing scams, while reducing
the time complexity of modeling large-scale networks. Extensive
experimental results show that TSGN models can provide more
potential information to improve the performance of phishing
detection by incorporating graph representation learning.

Index Terms—Ethereum · Phishing identiﬁcation · Subgraph

network · Network representation · Graph classiﬁcation.

I. INTRODUCTION

T HROUGH consensus mechanisms and voluntary respect

for the social contract, the internet can be utilized to
make a decentralised value-transfer system that can be shared
around the world and virtually free to use [1]. Ethereum [2],
a very professional system of a cryptographically secure,
offers us information that has never been seen before in
the ﬁnancial world. In contrast to ﬁat currencies of ﬁnancial

J. Wang, P. Chen,

Institute of Cy-
berspace Security, College of Information Engineering, Zhejiang Univer-
sity of Technology, Hangzhou 310023, China. E-mail: jhwang@zjut.edu.cn;
Pengt.Chen@gmail.com; 654202923@qq.com.

and X. Xu are with the

J. Wu is with the School of Computer Science and Engineering, Sun Yat-sen
University, Guangzhou 510006, China. E-mail: wujiajing@mail.sysu.edu.cn.
M. Shen is with the School of Cyberspace Science and Technology, Beijing
Institute of Technology, Beijing 100081, China, and also with Peng Cheng
Laboratory (PCL), Shenzhen 518066, China. E-mail: shenmeng@bit.edu.cn.
Q. Xuan is with the Institute of Cyberspace Security, College of Information
Engineering, Zhejiang University of Technology, Hangzhou 310023, China,
with the PCL Research Center of Networks and Communications, Peng Cheng
Laboratory, Shenzhen 518000, China, and also with the Utron Technology
Company Ltd., Hangzhou 310056, China. E-mail: xuanqi@zjut.edu.cn.

X. Yang is with the Institute of Cyberspace Security, Zhejiang University
of Technology, Hangzhou 310023, China, and also with the Science and
Technology on Communication Information Security Control Laboratory,
Jiaxing 314033, China. E-mail: yxn2117@126.com.

Corresponding authors: Qi Xuan.

world, the transactions through virtual currencies like Ether are
completely transparent. Accounts can freely and conveniently
conduct transactions with currency and information and do not
have to rely on traditional third parties, and these transactions
of cryptocurrencies are permanently recorded on Blockchain
and are available at any time.

There is no doubt that Ethereum platform facilitates trans-
actions between consenting individuals who are trust with
each other. But,
the cryptocurrency market provided by
Ethereum is inevitably ﬂooded with a variety of cybercrimes
due to anonymity and unsupervised organization, including
smart Ponzi schemes, phishing, money laundering, fraud, and
criminal-related activities. The overall losses caused by DeFi
exploits on Ethereum, the backbone of many DeFi applica-
tions, have totaled $12 billion so far in 2021 according to
Elliptic 1, a ﬁrm which tracks movements of funds on the
digital ledgers that underpin cryptocurrencies. Moreover, it is
reported that phishing scams can break out periodically and are
the most deceptive form of fraud [3]. In general, phishing is a
kind of cybercrime aiming to exploit the weaknesses of users
and obtain personal and conﬁdential information [4]. Some
scams lure investors to visit/click the fake projects/websites by
offering extra Ether coins as the enticement, and to buy digital
assets from scammers for the purpose of phishing scams.
Although the hash mechanism set up inside the blockchain can
prevent transactions from being tampered with, so far, there are
no available internal tools that can detect illegal accounts and
suspicious transactions on the network. Thus it can be seen
that cybercrimes, especially phishing scams, have become a
critical issue on Ethereum and should be worthy of long-term
attention and research to maintain a more secure blockchain
ecosystem.

Existing methods of phishing detection on Ethereum mainly
fall into two categories, propose elaborate handcrafted fea-
tures [5]–[7] and design automatical feature learning mod-
els [8]–[10]. These studies attempt to learn more useful infor-
mation from the raw transaction data to reveal the transaction
patterns, which are effective for phishing detection but have
several important omissions. First, the transaction networks
constructed by sampling the original Ethereum transaction data
may result in missing structural information which can affect
the performance of learning models. This forces researchers to
design more precise and data-targeted representation methods
to improve the effect, but at the expense of the generalization
performance of models on datasets of different attributes and

1https://blockchaingroup.io/

 
 
 
 
 
 
scales. Second, the above models are well-designed only for
learning the original networks, ignoring the potential transac-
tion ﬂow patterns provided by the interaction of transactions.
In this paper, inspired by SGN model [11], we develop a
network model called TSGN to complement the features of
original networks and further assist in identifying phishing
accounts. According to the essential attributes contained in the
transactions, we design the speciﬁc structural mapping strate-
gies in order to encode the weight, direction and timestamp
information into transaction subgraph networks. And then, the
transaction network is mapped into the transaction subgraph
structure space according to the different strategies to obtain
the corresponding TSGN and its variants for the subsequent
feature extraction and detection task. The algorithm framework
is shown in Fig. 1. Speciﬁcally, our contributions can be
concluded as follows:

• We propose a novel transaction network model, transac-
tion subgraph networks (TSGNs). According to original
transaction networks (TN) of various attributes and scales,
our TSGNs can introduce different network mapping
strategies to fully capture the potential structural topo-
logical
information which can not be obtained easily
from raw transaction networks, beneﬁting the subsequent
phishing detection algorithms.

• We built the ﬁrst variant of TSGN model, i.e., Directed-
TSGN, to integrate direction attribute for effectively char-
acterize transaction ﬂow information from the original
transaction data. And, we further introduce timestamp in-
formation into Directed-TSGN, producing the Temporal-
TSGN which can exactly learn the time-aware transac-
tion behaviors and is applied on multi-edge transaction
networks.

• Experimental results demonstrate the effectiveness of the
TSGN models by integrating various phishing detection
models such as Handcrafted features, Graph2Vec, Deep-
the classi-
Kernel, Diffpool, and U2GNN. Especially,
ﬁcation result of Temporal-TSGN increases to 98.43%
(97.00% for Directed-TSGN) when only Diffpool
is
considered, greatly improving the phishing detection per-
formance. More remarkably, compared with TSGN, the
variants of TSGN are of the controllable scale and have
lower time cost.

The rest of the paper is structured as follows. In section
II, we make a brief description of the phishing identiﬁcation
and graph representation methods. In Section III, we mainly
introduce the deﬁnitions and construction methods of transac-
tion subgraph networks. In Section IV, we give several feature
extraction methods, which together with TN, TSGN, Directed-
TSGN, and Temporal-TSGN are applied to six Ethereum
transaction network datasets. Finally, we conclude our paper
in Section V. For further study, our source codes are available
online 2.

II. BACKGROUND AND RELATED WORK
In this section, we provide some necessary background
information on phishing detection methods and graph repre-

2https://github.com/GalateaWang/TSGN-master

2

Fig. 1. The framework of our TSGN algorithm for phishing detection on
Ethereum.

sentation algorithms for blockchain data mining.

A. Phishing Identiﬁcation

To create a good investment environment in the Ethereum
ecosystem, many researchers have paid lots of attention to
study the effective detection methods for phishing scams. Wu
et al. [9] proposed an approach to detect phishing scams on
Ethereum by mining its transaction records. By considering
the transaction amount and timestamp, it introduced a novel
network embedding algorithm called trans2vec to extract the
features of the addresses for subsequent phishing identiﬁca-
tion. Chen et al. [6] proposed a detecting method based on
Graph Convolutional Network (GCN) and autoencoder to pre-
cisely distinguish phishing accounts. Li et al. [12] introduced a
self-supervised incremental deep graph learning model based
on Graph Neural Network (GNN), for phishing scam detection
problem on Ethereum. One can see that these methods men-
tioned above mainly built phishing account detection as a node
classiﬁcation task, which cannot capture more potential global
structural features for phishing accounts. Yuan et al. [13] built
phishing identiﬁcation problem as the graph classiﬁcation task,
which used line graph to enhance the Graph2Vec method
and achieved good performance. However, Yuan et al. only
consider the structural features obtained from line graphs,
ignoring the transaction temporal
information which plays
a signiﬁcant role in phishing scam detection. As we know,
the phishing funds mostly ﬂow from multiple accounts to a
speciﬁc account. Our method takes the direction and temporal
information into consideration and builds the Directed-TSGN
and Temporal-TSGN models, revealing the topological pattern
of phishing scams.

B. Graph Representation on Blockchain

Graphs are a general language for describing and analyz-
ing entities with relations or interactions. Due to its unique
structure characteristics, the Blockchain ecosystem is natu-
rally modeled as transaction networks to carry out related
research. Simultaneously, many graph representation methods
are applied to capture the dependency relationships between
objects in the Blockchain network structures. There are two
main categories of existing representation methods, the former
mostly employs machine learning models with dedicated fea-
ture engineering [5]–[7], and the latter adopts some embedding
techniques and deep learning models such as walk-based [9]
and the GNN methods. For example, Hu et al. [8] presented

Etherscan.ioTSGN mappingAttributesGraph embeddingsModel comparisonDetection analysisTSGN algorithmModel evaluationTransaction addressesTransaction recordsPhishing labelsData collectionAttributed graphsNetwork constructiona novel deep learning scam detection framework assembling
with the Gate Recurrent Unit (GRU) network and attention
mechanism, which produced good results on both Ponzi and
Honeypot scams. Alarab et al. [10] adopted GCNs intertwined
with linear layers to predict illicit transactions in the Bitcoin
transaction graph and this method outperforms graph convolu-
tional methods used in the original paper of the same data. Liu
et al. [14] introduced an identity inference approach based on
big graph analytics and learning, aiming to infer the identity of
Blockchain addresses using the graph learning technique based
on GCNs. Zhang et al. [15] constructed a graph to represent
both syntactic and semantic structures of an Ethereum smart
contract function and introduced the GNN for smart contract
vulnerability detection.

According to the above works, one can ﬁnd that the graph
representation methods, especially GNNs, can indeed be uti-
lized to study the Blockchain data and outperform in many
different applications. However, the existing studies have two
potential problems. Firstly, these researches are mostly based
on a large-scale transaction network where the scarcity of
labels and the huge volume of transactions make it difﬁcult and
intricate to take advantage of GNN methods. Secondly, such
methods largely rely on the original transaction network and
thus may overlook the powerful potential of transaction inter-
actions which contain important hidden transaction patterns.
In this work, we collect the 1-hop neighborhood information
to construct the subgraph for each target address and use the
features of the entire subgraph as the representation of the
target node for avoiding inadequate graph feature learning. We
further obtain the TSGNs and their three variants by structural
space mapping, capturing potential transaction patterns from
various aspects.

III. METHODOLOGY

We ﬁrst give the description of problem formulation of
phishing identiﬁcation and then illustrate the construction
details of the transaction subgraph network models by intro-
ducing several deﬁnitions.

A. Problem Formulation

Generally, a cryptocurrency transaction network is modeled
as an address interaction graph, illustrating the transferring
amount and the ﬂow direction of fund between different
accounts in a certain time bucket. Given a set of addresses on
Ethereum, we can construct transaction network as a directed
graph G = (V, E), where each node v ∈ V indicates an
address that can be an Externally Owned Account (EOA) or
Contract Account (CA), the edge set is represented as a quad,
E = {(vsrc, vdst, w, (cid:96))|vsrc, vdst ∈ V, w ∈ R+ ∪ {0}, (cid:96) ∈ L},
where (vsrc, vdst) indicates the direction of the transaction
(e.g., assets transfer or smart contract invocation) from vsrc
to vdst, weight w represents the amount of transferred cryp-
tocurrencies or is 0 if the kind of transaction is smart contract
invocation, and l is the timestamp of the transaction.

Here, we construct a set of transaction graphs for the cen-
ter addresses G = {(G1, c1), (G2, c2), · · · , (Gn, cn)}, where
ci ∈ C |G|×|φ| is the label of address i and its corresponding

3

TABLE I
MATHEMATICAL NOTATIONS USED IN THIS PAPER.

Notation
G
T
TD
TT
TA
v, u
e
d
t
(cid:96)
w, w(cid:48), w∗, w×
V , V (cid:48), V ∗, V×
E, E(cid:48), E∗, E×
W , W (cid:48)
f (·)
L (·), F (·), K (·)
A(·)
G
c, C

Description
The original Ethereum transaction graph
The TSGN graph
The Directed-TSGN graph
The Temporal-TSGN graph
The generic notation of TSGN graph with an attribute
The account nodes in graph G
A transaction edge in graph G
The directed transaction edge in graph G
The temporal directed transaction edge in graph G
The timestamp attached on the edge t
The edge weights set by the transaction amount
The node sets
The edge sets
The edge weight sets
The weight mapping function
The structural mapping functions
The function for getting the attributed object
The set of graphs
The label of the graph G and the label set

transaction subgraph Gi, where φ is the label set of all target
addresses. In this work, our purpose is to learn a mapping
function C : G → C which can predict the labels of graphs
in G. The label set C includes phishing labels and non-
phishing labels in the scenario of Ethereum phishing account
identiﬁcation.

To keep mathematical formulas uniﬁed in a stricter and
tidier manner, TABLE I shows the notations used in the
progress of TSGNs modeling.

B. Transaction Subgraph Networks

In this section, we introduce the detail of our transaction
subgraph network model. Firstly, we give the deﬁnitions of
transaction subgraph network (TSGN), directed transaction
transac-
subgraph network (Directed-TSGN), and temporal
tion network (Temporal-TSGN). And then, we elaborate the
construction methods of the TSGN, Directed-TSGN, and
Temporal-TSGN, respectively.

Deﬁnition 1 (TSGN). Given a transaction graph G = (V, E)
where e = (vk, vj, w) ∈ E indicates a transaction edge with
the weight w, the TSGN, denoted by T = L (G), is a mapping
from G to T = (V (cid:48), E(cid:48)), with the node and edge sets denoted
by V (cid:48) = {ei ∈ E} and E(cid:48) = {(ei, ej, w(cid:48))}, i, j = 0, 1, 2, · · · .
The transaction subgraphs ea and eb will be connected if they
share the common addresses in the transaction graph G.

According to the Deﬁnition 1, we can ﬁnd that TSGN is the
variant of SGN model [11] for the background of Ethereum
transaction ecosystem. Different from SGN model, TSGN adds
a network weight mapping mechanism W (cid:48) ← f (W ), which
can retain the transaction amount information in the original
transaction network for the downstream behaviour analysis
task. The edge weights of TSGN can be calculated speciﬁcally

4

• ta and tb share the common addresses in the original

directed transaction graph G;

• the source of ta (or tb) is the destination of tb (or ta),
which can form a 2-top path with the same direction.
• the timestamp (cid:96)a < (cid:96)b (or (cid:96)b < (cid:96)a) makes (ta, tb) (or

(ta, tb)) present a sequential transaction ﬂow.

Clearly, the Temporal-TSGN deﬁned in the Deﬁnition 3 is
the substructure which is obtained by ﬁltering the nodes and
edges of of Directed-TSGN according to the time information,
i.e., TT ⊆ TD. By attaching the time attribute on the directed
transaction subgraphs (edges), Temporal-TSGN can capture
neighbor transaction ﬂow information for each target account
address while reducing the scale of the network. The weight
value w× can also be calculated by Eq. (1). Next, we would
focus on the speciﬁc construction methods for the TSGN,
Directed-TSGN, and Temporal-TSGN.

C. Construction of TSGN

Fig. 2 shows the process of constructing TSGN. Given an
original transaction network composed of a center address
and its neighbor addresses, we can ﬁrstly get a plain transac-
tion network with weight values by discarding the direction
attribute and retaining the weight attribute. And then, this
network is mapped into TSGN structural space according to
the rule indicated in the Deﬁnition 1.

Speciﬁcally, the edges in the undirected transaction network
is mapping to the nodes of TSGN, and then new edges are
built between nodes e1, e2, e3, e4, e5 because the edges
of undirected transaction network share the common center
node. There is no doubt that transaction subgraph mapping
strategy of TSGN also works for the case that there are con-
nections between neighbor addresses. The transactions e6 and
e7 are mapped into the TSGN to acquire the neighbor trading
pattern information for the center address. A pseudocode of
constructing TSGN is given in Algorithm 1. The input of
this algorithm is the original transaction network G(V ,E) and
the output is the constructed TSGN, denoted by T (V (cid:48),E(cid:48)),
where V (cid:48) and E(cid:48) represent the sets of nodes and edges in
the TSGN, respectively. Here, we choose the weight mapping
function introduced in Section III-B. Of course, different
weight mapping functions can be deﬁned as required.

D. Construction of Directed-TSGN

Transaction direction is one of the most noteworthy char-
acteristics in the ﬁeld of ﬁnancial research. Most of studies
model the transaction pattern of an account by Indegree and
Outdegree in a transaction graph. In Ethereum or Bitcion plat-
form, transaction direction combined with transaction amount
information can be adopted to study the peculiar unusual
patterns [16], detect abnormal economic interactions [3], pre-
dict virtual currency prices [17] and so on. According to
Section III-C, we can ﬁnd that the TSGN model can not retain
the direction information which may play an important role
in the following phishing identiﬁcation tasks. Moreover, the
TSGN is denser than the original transaction network and even
becomes a fully connected network, which may reduce the

Fig. 2. The process of building TSGN from a given transaction network.

by,

w(cid:48) =

(cid:26)log( wa+wb

2
0,

),

if wa (cid:54)= 0 or wb (cid:54)= 0
if wa = 0 and wb = 0

(1)

where w(cid:48) ∈ W (cid:48) is the mapped weights, and wa, wb ∈ W are
the original weights. Note that transaction amount is set to
0 when the account interaction relationship is the invocation
of contract accounts. Here, TSGN is a classical model which
can be applied for any simple Ethereum account interaction
network. Considering the complex transaction direction infor-
mation, we propose the variant named Directed-TSGN.

Deﬁnition 2 (Directed-TSGN). Given a transaction digraph
G = (V, E), where d = (vsrc, vdst, w) ∈ E indicates a
directed transaction edge,
the Directed-TSGN, denoted by
TD = F (G), is a mapping from G to TD = (V ∗, E∗),
with the node and edge sets denoted by V ∗ = {di ∈
E|i = 0, 1, 2, · · · }. There will be a directed interaction edge
(da, db, w∗) ∈ E∗ between transaction subgraphs da and db
when they meet the following conditions:

• transaction subgraphs da and db share the common
addresses in the weighted directed transaction graph G;
• the source of da (or db) is the destination of db (or da),
which can form a 2-top path with the same direction.

As shown in the Deﬁnition 2, Directed-TSGN based on
TSGN model introduces the direction information into the
mapping mechanism which can capture the path of trans-
action behavior. The weight w∗ can be obtained by Eq.
(1). Also, Ethereum data is dynamic and gets larger and
more complicated over time, which brings the challenge to
analyze transaction behaviors by adopting some graph mining
algorithms. In addition, phishing behaviors generally have
the strong time-aware property. These challenges require the
development of a novel graph model mapping approach that is
suitable for the analysis of time-varying and dense networks.
Hence, we further propose Temporal-TSGN.

Deﬁnition 3 (Temporal-TSGN). Given a temporal transac-
tion digraph G = (V, E), where t = (vsrc, vdst, w, (cid:96)) ∈ E
indicates a directed transaction edge with the timestamp (cid:96), the
Temporal-TSGN, denoted by TT = K (G), is a mapping from
G to TT = (V×, E×), with the node and edge sets denoted
by V× = {ti ∈ E|i = 0, 1, 2, · · · } and E× ⊆ (V× × V×).
A directed edge (ta, tb, w×) ∈ E× will be built between
two temporal directed transaction subgraphs ta and tb when
they meet the stricter conditions: In the original temporal
transaction graph G,

Center addressNeighboraddressesObtain the TSGN through the transaction subgraph mapping2-order-undirected1-order-undirected𝒘𝟕𝒘𝟐𝒘𝟏𝒘𝟑𝒘𝟒𝒘𝟓𝒘𝟔Discard the direction attribute and retain the weight attribute𝒆𝟕𝒆𝟐𝒆𝟏𝒆𝟑𝒆𝟒𝒆𝟓𝒆𝟔5

Fig. 4. The process of building Temporal-TSGN from a given original
temporal transaction network.

on Ethereum [18]. In this section, we further introduce the
temporal attribute of transactions into the TSGN mapping
mechanism. On the basis of Directed-TSGN, Temporal-TSGN
is proposed to fuse crucial temporal and direction attributes
related to phishing detection for enhancing the ability to iden-
tify phishing scams. Temporal-TSGN improves the mapping
strategies compared with Directed-TSGN, which can ﬁnely
captures the temporal transaction ﬂow structural information
in Ethereum, further limiting the network scale.

Fig. 4 shows the progress of constructing Temporal-TSGN.
Given an original transaction network, Directed-TSGN can
be ﬁrstly obtained according to the strategy mentioned in
Section III-D, and then we can get the Temporal-TSGN from
Directed-TSGN by ﬁltering the edges that are not in chrono-
logical order. The timestamps on the edges determine the order
in which transaction are generated, i.e., (t1, t2, t3, t4, t5, t6, t7).
We deﬁne that, in the Temporal-TSGN, the transaction ti
must be linked to transaction tj where i < j, which can
form a 2-hop sequential transaction ﬂow. Here, the edges
(t3, t2), (t7, t3), and (t6, t1) are unsatisﬁed with the formation
condition and are therefore ignored.

is important

At this point, the Temporal-TSGN mapping strategy can
be summarized as the single edges part of Fig. 5. We attach
the timestamps onto the edges of different directions, getting
the fund ﬂow of the transactions within a certain time frame.
to note that, a 2-hop transaction chain is
It
available for the construction of Temporal-TSGN only under
the three conditions described in the Deﬁnition 3. Speciﬁcally,
7s−→ v3) shown in Fig. 5 (a)
the transaction chain (v1
can be successfully mapped into the TSGN structural space,
becoming a 1-hop directed node pair, while the other three
7s←− v3),
7s←− v3), (v1
transaction chains (v1
7s−→ v3) shall be excluded since they do not
4s←− v2
and (v1
satisfy the second condition or the third condition or both in
the Deﬁnition 3, respectively.

4s←− v2

4s−→ v2

4s−→ v2

F. TSGN for Multi-edge Case

Ethereum transaction data poses following several chal-
lenges. First, the transaction network is generally sparse and
dynamic, but it chould be very dense when viewed over a long
period of time. Secondly, the nodes in the transaction graph
appear (i.e., new accounts are created) and disappear (i.e., no
future transactions occur) daily. Thirdly, transaction through-
put on a daily basis ﬂuctuates greatly. So, the time attribute is
a vitally important factor when constructing transaction net-
works, which can exhibit the real complexity of the Ethereum
transaction network from the time dimension. Li [19] modeled

Fig. 3. The process of building Directed-TSGN from a given transaction
network.

representation ability of graph mining algorithms. Directed-
TSGN proposed in this paper can take into account the two
attributes of transaction direction and amount into considera-
tion, beneﬁting for extracting the potential transaction patterns
of the target addresses.

In response to the above problems, we propose one variant
of TSGN, named Directed-TSGN. As shown in Fig. 3, the
construction of Directed-TSGN consists of the following three
steps: (i) hold the direction and weight attributes, (ii) design
the direction mapping strategies, (iii) construct the TSGN. The
ﬁrst step aims to hold the direction and weighted attributes of
the original transaction network and prepare for the subsequent
structural mapping. Similarly, the edges are mapped into the
nodes d1, d2, d3, d4, d5, d6, d7 of the Directed-TSGN. The
two red directed dashed lines indicate that the transactions
d1 and d2 and transactions d3 and d5 can be considered as
two continuous transaction behaviors, respectively. In other
words, the edges d1 and d2 and the edges d3 and d5 can
form two 2-hop paths with the same direction, respectively.
According to the four direction mapping strategies, we can
build the new edges in the Directed-TSGN. Due to the fact
that patterns of (b) and (d) don’t satisfy the requirements of
constructing edges, the Directed-TSGN can limit the network
size and get a relatively sparse transaction subgraph network.
The pseudocodes of constructing Directed-TSGN consist of
Algorithm 1 and 2. The input of Algorithm 2 is two transaction
subgraphs da, db in the attribute attached graph G, and the
is the edge (da, db) matching the mapping rules.
output
Algorithm 2 aiming to illustrate the Directed-TSGN mapping
will be executed when G ← Adirected(G) is attached the
transaction direction attribute.

E. Construction of Temporal-TSGN

Temporal

information,

transaction timestamps, can
clearly indicate when the transaction occurred. Hence, the
transaction time in alliance with trading ﬂow direction of-
fers the possibility for the traceability of transferring funds

i.e.,

Center addressNeighboraddresses𝒘𝟕𝒘𝟐𝒘𝟏𝒘𝟑𝒘𝟒𝒘𝟓𝒘𝟔Directed-TSGN𝒅𝟐𝒅𝟔𝒅𝟓𝒅𝟒𝒅𝟕𝒅𝟑𝒅𝟏Design the direction mapping strategiesHold the direction and weight attributesConstruct the TSGN2-order-directed1-order-directed1(a)(b)2(c)34(d)Temporal-TSGN𝒕𝟐𝒕𝟔𝒕𝟓𝒕𝟒𝒕𝟕𝒕𝟑𝒕𝟏2-order-directed1-order-directedDirected-TSGN𝒕𝟐𝒕𝟔𝒕𝟓𝒕𝟒𝒕𝟕𝒕𝟑𝒕𝟏𝒕𝟕𝒕𝟐𝒕𝟏𝒕𝟑𝒕𝟒𝒕𝟓𝒕𝟔Original TNAlgorithm 1: Constructing TSGN.
Input: A transaction network G(V ,E) with transaction
addresses set V , transaction edges set
E ⊆ (V × V ).

Output: TSGN with the attribute, denoted by TA.

1 Initialize TA with node set V (cid:48) and edge set E(cid:48);
2 for each v ∈ V do
3

Get the neighbor addresses set N (v);
for each u ∈ N (v) do

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

txn ← sorted([v, u]);
Add txn into the set transpool;

end
for txna, txnb ∈ transpool and txna (cid:54)= txnb do

G ← A(G);
// attach the transaction attributes to G
if G is directed then

da, db ← A(txna), A(txnb);
Get (da, db) by executing Algorithm 2;
// Directed-TSGN mapping
Add the edge (da, db) into E(cid:48);

end
if G is directed and time-aware then
ta, tb ← A(txna), A(txnb);
Get (ta, tb) by executing Algorithm 3;
// Temporal-TSGN mapping
Add the edge (ta, tb) into E(cid:48);

end
else

Add (txna, txnb) into E(cid:48);

end

end
Add transpool into V (cid:48);

24
25 end
26 return TA(V (cid:48),E(cid:48)) with corresponding attribute;

Algorithm 2: Directed-TSGN mapping.
Input: Directed da, db ∈ transpool.
Output: Directed edge (da, db).

Add a directed edge from da to db;

Add a directed edge from db to da;

1 if dst(da) = src(db) then
2
3 end
4 if src(da) = dst(db) then
5
6 end
7 else
8
9 end
10 return (da, db) with direction attribute;

continue;

transaction records
the temporal relationship of historical
between nodes to construct the edge representation of the
Ethereum transaction network. In this section, how to deal
with the mapping rules of multi-edge temporal networks is
an urgent problem to be solved for the subsequent phishing
behavior analysis.

6

Algorithm 3: Temporal-TSGN mapping.
Input: Directed temporal ta, tb ∈ transpool.
Output: Directed edge (ta, tb).

1 if dst(ta) = src(tb) then
2

if timestamp(ta) < timestamp(tb) then
Add a directed edge from ta to tb;

end

4
5 end
6 if src(ta) = dst(tb) then
7

3

8

if timestamp(ta) > timestamp(tb) then
Add a directed edge from tb to ta;

end

9
10 end
11 else
12
13 end
14 return (ta, tb) with direction attribute;

continue;

Fig. 5. Strategies of multiple edges and temporal edges cases for constructing
TSGN.

It is worth to note that the temporal mapping mechanism
can be extended to the case of multiple edges. As shown in
Fig. 5 (e)-(l), the case of multi-edge mapping does not alter
the loop of a nodes pair (Fig. 5 (e) and (f)), while the case of
temporal edges can tackle it (Fig. 5 (i) and (j)). The timestamps
can break the cycle in the network structure and orient the
information ﬂow in the TSGN. Intuitively, TSGN under multi-
edge case can yield to a clear path of funding transferring
and capture the fund ﬂow pattern in the complex temporal
transaction network, which is conducive to the detection of
illegal trading activities.

In particular, the construction progress of TSGN for multi-
edge transaction network, denoted as Multiple-TSGN,
is
shown in Fig. 6. Firstly, given a weighted directed multi-edge
graph, it will turn to a MultiDiGraph where each transaction
has its own ﬁxed order of occurrence after being attached
with the timestamp attribute. And then, according to the
Algorithm 3, we can get the variant of Temporal-TSGN for
multi-edge transaction network, i.e., Multiple-TSGN.

To date, it is still the research focus to deeply understand
and analyze the knowledge of multi-edge temporal transaction
networks in Ethereum. In this section, Multiple-TSGN pro-
posed provides a novel perspective to excavate the potential
transaction patterns in Ethereum.

(a)(b)(c)(d)(e)(f)(g)(h)4s10s13s4s10s13s4s10s13s4s10s13sMultiple edgesTemporal edges(i)(j)(k)(l)4s10s13s4s10s13s4s10s13s4s10s13sMultiple edgesTemporal edges(a)(b)(c)(d)(e)(f)(g)(h)Single edges4s7s4s7s4s7s4s7sTABLE II
BASIC STATISTICS OF SIX ETHEREUM DATASETS AFTER ADDING DIFFERENT TRANSACTION ATTRIBUTES. Type DENOTES THE TYPE OF NETWORK
STRUCTURE, NG IS THE NUMBER OF GRAPHS, #Cmax IS THE NUMBER OF GRAPHS BELONGING TO THE LARGEST CLASS, NC IS THE NUMBER OF
CLASSES, #N AND max#N ARE THE AVERAGE AND MAXIMUM NUMBERS OF THE NODES, AND #E AND max#E ARE THE AVERAGE AND MAXIMUM
NUMBERS OF EDGES, RESPECTIVELY, OF THE GRAPHS IN THE DATASET. NOTE THAT, WE DISPLAY THREE DIFFERENT STATISTICS FOR EACH DATASET,
SUCH AS Plain, Directed, AND Multiedge.

7

Dataset

Type

NG

#Cmax

NC

#N

max#N

EtherG1

EtherG2

EtherG3

EtherG4

EtherG5

EtherG6

Star

Star

Star

Net

Net

Net

700

700

700

700

700

700

350

350

350

350

350

350

2

2

2

2

2

2

7

14

96

7

14

96

Plain

Directed

Multiedge

#E

6

13

95

7

17

max#E

12

32

#E

6

13

max#E

12

32

4972

100

4985

20

58

7

18

21

65

#E

8

20

23

163

465

13

33

4972

13

33

4972

161

7534

174

10745

1765

max#E

13

34

12209

24317

24354

68959

we crawl some phishing addresses and non-phishing addresses
as the target nodes and extract their ﬁrst-order neighbor nodes
from the ﬁrst seven million blocks of Ethereum to construct
transaction network datasets (all transactions occerred between
July 30, 2015 and January 2, 2019). After ﬁltering and
preprocessing the raw data, we randomly select 1050 phishing
addresses and 1050 unlabeled addresses according based on
the account label information on the XBlock platform, and
crawl
their neighbor addresses and transaction records to
construct transaction networks. And then, these networks will
be randomly divided so that we ﬁnally get three balanced star-
form network datasets EtherG1, EtherG2, and EtherG3, each of
which has 350 transaction networks of phishing addresses and
350 transaction networks of non-phishing addresses. Besides,
in order to increase the structural complexity of the transaction
networks, we expand the scale of the networks by introducing
the interactive edges between 1-hop neighbors, yielding to
three net-form transaction datasets EtherG4, EtherG5, and
EtherG6. The basic statistics of these datasets are presented in
TABLE II.

As shown in TABLE III, different variants of TSGN model
have their own unique attribute dependencies. Hence, it is
necessary to sketch the transaction network structure under
different attributes. Based on Fig. 7, we further illustrate the
details of edge statistics of TABLE II. Plain indicates no
directed and temporal attributes are included in the network
structures (Fig. 7 (a) and (d)), Directed means the edges of
networks are directed (Fig. 7 (b) and (e)), and Multiedge
signiﬁes the edges are attached directed and temporal attributes
simultaneously to distinguish the multiple same-directed edges
between a node pair (Fig. 7 (c) and (f)). Note that, the weight
is set as the inherent attribute. Apparently, the richer the edge
attributes, the more complex the network structures. And the
next experiments will be conducted on these six datasets to
verify the performance of the four TSGN models.

B. Baseline Methods

In order to better verify the effect of the proposed TSGN
models, we adopt six Ethereum phishing scams detection
models, namely handcrafted features, Graph2Vec, DeepKernel,

Fig. 6. The progress of building TSGN for the multi-edge case and obtain
Multiple-TSGN.

IV. EXPERIMENTS

In this section, we describe the experiments conducted
to evaluate the effectiveness of our TSGN models on the
task of phishing detection. We ﬁrst construct the network
datasets by exploiting transactions records from Ethereum,
then outline several baselines followed by the corresponding
experimental setup. Finally, we show the experimental results
with discussion.

A. Data Collection and Preparation

As today’s largest blockchain-based application, Ethereum
has fully open transaction data which are permanently
recorded and easily accessed through the API of Etherscan 3
or the academic blockchain data platform XBlock 4.

Ethereum has gained massive momentum in recent years,
mainly due to the success of cryptocurrencies. Considering
that the entire cryptocurrency trading network is enormous,

3https://etherscan.io
4http://xblock.pro/

Center addressNeighboraddressesMultiple-TSGNFollow the direction and temporal mapping strategiesAdd the temporal information𝒕𝟐𝒕𝟏𝒕𝟏𝟎𝒕𝟖5s𝒘𝟕𝒘𝟐𝒘𝟖𝒘𝟔𝒘𝟓𝒘𝟒𝒘𝟏𝒘𝟏𝟎𝒘𝟗3s1s24s6s20s10s15s𝒘𝟑𝒕𝟒𝒕𝟓𝒕𝟑𝒕𝟗𝑤(cid:2870)𝑤(cid:2869)𝑤(cid:2869)(cid:2868)𝑤(cid:2875)𝑤(cid:2876)𝑤(cid:2872)𝑤(cid:2873)𝑤(cid:2871)𝑤(cid:2874)𝑤(cid:2877)𝑤(cid:2870)𝑤(cid:2869)𝑤(cid:2869)(cid:2868)𝑤(cid:2875)𝑤(cid:2876)𝑤(cid:2872)𝑤(cid:2873)𝑤(cid:2871)𝑤(cid:2874)𝑤(cid:2877)𝒕𝟖,𝒘𝟖Construct the TSGN𝒕𝟕𝒕𝟔TABLE III
NETWORK ATTRIBUTE STATISTICS REQUIRED BY DIFFERENT TSGN
MODELS.

Model

TSGN

Directed-TSGN

Temporal-TSGN

Multiple-TSGN

Weighted Directed Temporal Multiedge

(cid:33)

(cid:33)

(cid:33)

(cid:33)

(cid:37)

(cid:33)

(cid:33)

(cid:33)

(cid:37)

(cid:37)

(cid:33)

(cid:33)

(cid:37)

(cid:37)

(cid:37)

(cid:33)

Fig. 7.
attributes.

Illustration of datasets where network structures evolving with the

Diffpool, U2GNN and Line Graph2Vec which are introduced
in the following.

Handcrafted Features: Handcrafted features are the most
straightforward method to depict structure properties of net-
works. Different from previous feature designs listing a lot
transaction attributes, we adopted ten classic topological at-
tributes in network science which are widely used in graph
mining tasks [11], [20]–[22]. As a baseline, we aim at building
the representation of the transaction networks by manually
extracting the features for the subsequent account identiﬁ-
cation task. The ﬁrst six handcrafted features are the basic
statistics of topological structures, including Number of ad-
dresses, Number of transactions, Average degree of transaction
subgraph, Percentage of
leaf nodes, Network density, and
Average neighbor degree. And the last four features, mainly
including Average clustering coefﬁcient, Largest eigenvalue of
the adjacency matrix, Average betweenness centrality, and Av-
erage closeness centrality, are the relatively complex network
computing properties. Here, Average clustering coefﬁcient
is a very popular metric to quantify the edge density in
ego networks. Eigenvalues as the isomorphic invariant of a
graph can be used to estimate many static attributes, such
as connectivity, diameter, of transaction networks. Centrality
measures are indicators of the importance (status, prestige,
standing, and the like) of a node in a network. Above various
features provide a comprehensive portrait of the transaction
network.

8

occurrence matrix.

DeepKernel [24]: This method provides a uniﬁed frame-
work, named DGK, that deﬁnes the similarity between graphs
via leveraging the dependency information of sub-structures,
while learning latent representations.

Diffpool [25]: This method proposed a differentiable graph
pooling module, which can generate hierarchical represen-
tations of graphs and can be combined with various GNN
architectures in an end-to-end manner. This method mainly
solves the problem that the traditional GNN methods are ﬂat
and can’t learn the hierarchical representations of graphs.

U2GNN [26]: It presented a GNN model

leveraging a
transformer self-attention mechanism followed by a recurrent
transition to induce a powerful aggregation function to learn
graph representations, which achieved state-of-the-art perfor-
mance on many classical benchmark for graph classiﬁcation.
Line Graph2Vec [13]: This method collected a set of
subgraphs, each of which contains a target address and its
surrounding transaction network, and then converted them into
the corresponding line graphs which can be input into the
Graph2Vec model for acquiring the representation vectors for
all the graphs.

C. Experimental Setup

To investigate the performance of our TSGN models, above
mentioned representation methods are adopted to extract the
feature vectors for TN, TSGN, Directed-TSGN, and Temporal-
TSGN, preparing for training the classiﬁcation model. Here,
the parameters setting of representation models under different
TSGNs are given as follows.

For Handcrafted Features, there are no hyperparameters,
just extract 10 features manually for each graph as the feature
vectors to train the phishing detection model.

For Graph2Vec and Line Graph2Vec, the parameter height
of the WL kernel
to 3. The commonly-used value
of 1,024 is adopted as the embedding dimension. The other
parameters are set to defaults: the learning rate is set to 0.025
and the epoch is set to 1000.

is set

to 2,

is set

For DeepKernel, the Weisfelier-Lehman subtree kernel is
the
used to build the corpus and its height
embedding dimension is set to 10, the window size is set to 5
and skip-gram is used for the word2vec model. Furthermore,
the node degrees are set as the node labels for TN and all
TSGNs. As the key point of this method, the sub-structure
similarity matrix M, is calculated by the matrix V with each
column representing a sub-structure vector, M = VV T. Let
P denote the matrix with each column representing a sub-
structure frequency vector. According to the deﬁnition of
kernel: K = PMP T = PVV TP T = HHT, one can use the
columns in the matrix H = PV as the inputs to the classiﬁer.
For Diffpool, we use the in-degree and out-degree as the
node features for the TN, and initialize the feature matrix
by the edge weights of TN for different TSGNs. The other
parameters of the model are set to defaults.

Graph2Vec [23]: It

is the ﬁrst unsupervised embedding
approach for the entire networks, which constructs Weisfeiler-
Lehman tree features for nodes in graphs and then learn
graph representations by decomposing the graph-feature co-

For U2GNN, we use the in-degree and out-degree as the
node features for the TN, and initialize the feature matrix
by the edge weights of TN for different TSGNs. The other
parameters of the model are set to defaults.

(a)(b)(c)(d)(e)(f)Add direction informationAdd temporal informationStarNet9

TABLE IV
CLASSIFICATION PERFORMANCE OF OUR TSGN MODELS ON SIX ETHEREUM DATASETS, COMBINING DIFFERENT GRAPH CLASSIFICATION METHODS.

Method

Dataset

Star

Net

Classiﬁcation results (F 1-Score, %)

EtherG1

EtherG2

EtherG3

EtherG4

EtherG5

EtherG6

Feature-based Handcrafted

74.29 ± 4.40

79.86 ± 3.01

83.86 ± 2.64

76.21 ± 2.39

81.35 ± 3.48

86.64 ± 2.17

Baseline

Embedding

GNN-based

Graph2Vec

DeepKernel

Diffpool

U2GNN

69.07 ± 2.95

71.79 ± 3.31

64.43 ± 2.51

72.57 ± 3.29

73.00 ± 4.44

70.86 ± 2.59

72.71 ± 5.09

75.29 ± 3.99

73.57 ± 3.35 76.43 ± 5.08 73.71 ± 5.50

74.57 ± 4.03

81.29 ± 3.47

87.00 ± 1.74

95.00 ± 2.49

93.36 ± 1.20

92.36 ± 2.30

93.79 ± 1.36

76.57 ± 3.45

76.57 ± 4.99

70.43 ± 5.57

75.85 ± 4.67

75.71 ± 5.31

73.00 ± 3.03

Line Graph2Vec

69.57 ± 3.32

72.43 ± 4.65

70.29 ± 6.11

73.29 ± 3.56

73.00 ± 3.47

72.57 ± 4.37

Handcrafted w/ TSGN

75.57 ± 3.35

79.00 ± 3.44

85.43 ± 3.49

77.86 ± 5.47

81.86 ± 3.89

88.29 ± 3.71

Avg.

80.36

70.29

74.38

90.47

74.69

71.86

81.34

Handcrafted w/ Directed-TSGN 77.50 ± 5.02

80.07 ± 3.42

85.00 ± 2.21

81.07 ± 2.46

83.35 ± 3.13 89.57 ± 1.87 82.76

Handcrafted w/ Temporal-TSGN 84.14 ± 2.51 85.71 ± 4.65 88.86 ± 4.18 81.43 ± 4.24 85.71 ± 3.94 89.43 ± 3.45

85.88

%Increase

13.26%

7.32%

5.96%

6.85%

5.36%

3.38%

6.87%

Graph2Vec w/ TSGN

69.57 ± 3.32

72.43 ± 4.65

70.29 ± 6.11

73.29 ± 3.56

73.00 ± 3.47

72.57 ± 4.37

Graph2Vec w/ Directed-TSGN

73.57 ± 4.05

73.00 ± 3.44

68.50 ± 3.30

73.57 ± 4.00

76.79 ± 2.81

71.50 ± 3.94

71.86

72.82

Graph2Vec w/ Temporal-TSGN 76.43 ± 3.57 79.00 ± 5.15 73.43 ± 2.57 76.00 ± 5.60 79.29 ± 4.88 75.57 ± 5.55 76.62

%Increase

10.66%

10.04%

13.97%

4.73%

8.62%

6.65%

DeepKernel w/ TSGN

74.29 ± 5.61

77.57 ± 6.13

68.71 ± 5.73

75.29 ± 5.68

75.29 ± 2.65

75.86 ± 3.53

9.01%

74.50

Ours

DeepKernel w/ Directed-TSGN

73.86 ± 2.64

73.86 ± 4.19

69.71 ± 4.94

73.86 ± 3.56

77.14 ± 6.48 78.00 ± 4.00 74.41

DeepKernel w/ Temporal-TSGN 77.71 ± 3.63 78.57 ± 4.61 75.00 ± 4.39 76.14 ± 4.91 78.71 ± 4.58 77.57 ± 5.82

77.26

%Increase

6.88%

4.36%

1.94%

-0.38%

6.78%

4.60%

3.87%

Diffpool w/ TSGN

89.71 ± 3.05 96.29 ± 1.83 96.29 ± 2.65

91.43 ± 3.00 96.57 ± 1.59 95.57 ± 1.49

Diffpool w/ Directed-TSGN

93.14 ± 1.78 92.29 ± 2.73 97.00 ± 1.35 93.43 ± 1.10

94.07 ± 1.36

94.29 ± 1.84

94.31

94.03

Diffpool w/ Temporal-TSGN

89.29 ± 2.95

94.71 ± 2.12

96.71 ± 1.81 94.14 ± 3.16 96.14 ± 2.56 98.43 ± 1.35 94.90

%Increase

14.58%

10.68%

2.10%

0.84%

4.56%

4.95%

U2GNN w/ TSGN

75.29 ± 4.09

76.00 ± 4.77

71.29 ± 4.58

75.29 ± 5.11

76.00 ± 3.92

77.14 ± 2.47

4.90%

75.17

U2GNN w/ Directed-TSGN

76.00 ± 4.03

77.71 ± 3.84

72.86 ± 3.78

76.43 ± 3.63

78.57 ± 3.50 78.00 ± 3.63 76.60

U2GNN w/ Temporal-TSGN

80.71 ± 3.27 84.71 ± 3.56 73.29 ± 4.47 79.14 ± 4.66 82.00 ± 2.80 78.00 ± 3.79 79.64

%Increase

5.41%

10.63%

4.06%

4.34%

8.31%

6.85%

6.63%

Next, for each feature representation method, the feature
vectors of TN is respectively concatenated with those of dif-
ferent TSGNs, and then the dimension of the feature vectors is
reduced to the same as that of the feature vector obtained from
the original transaction network using PCA in the experiments,
for a fair comparison. For each dataset, one randomly split it
into 9 folds for training and 1 fold for testing. In order to
accurately evaluate the quality of each classiﬁcation model, in
this paper, we will use F1-Score as a metric,

F1 =

2P R
P + R

,

(2)

where P is precision and R is recall. F1-Score is the harmonic
mean of precision and recall, so it can more comprehensively
judge the pros and cons of the classiﬁcation models. To
exclude the random effect of fold assignment, the experiment
is repeated 300 times using the Random Forest classiﬁer and
then the average F1-Score and its standard deviation recorded.
Moreover, Percentage Increase (%Increase) is calculated to
measure the performance improvement of the proposed models

relative to the original model.

%Increase =

F model

1

− F ori
1

F ori
1

× 100%,

(3)

D. Experimental Results and Analysis

According to the above setting, we conduct some ex-
periments on the six Ethereum datasets. To investigate the
effectiveness of TSGN models, for each feature extraction
algorithm, the classiﬁcation results are compared on the ba-
sis of TN. Firstly, we present the performance of original
model based on TN. The phishing identiﬁcation performance
of TSGN, Directed-TSGN, Temporal-TSGN, and Multiple-
TSGN, integrating TN, are then displayed respectively. Note
that, the concatenated feature vectors are fed into the same
classiﬁcation model for a fair comparison.

1) TSGN models can enhance phishing account identi-
ﬁcation ability: TABLE IV summarises our results in terms
of the metric F1-Score. On the whole, compared with the
transaction networks, TSGN, Directed-TSGN, and Temporal-
TSGN models indeed have good performance in enhancing

the phishing address detection. TSGN proposed as the most
basic model is comparable with the ﬁve baseline models based
on TN, which produces slight improvement under different
datasets and feature extraction methods. Line Graph2Vec is
the improved version of Graph2Vec, which is equivalent to our
Graph2Vec w/ TSGN in model design and model performance.
Directed-TSGN increases the performance of the original
phishing identiﬁcation in 26 out of 30 cases, with a relative
improvement of 3.28% on average. Moreover, since different
TSGNs generated by different attribute mapping strategies can
capture the different perspectives of a network, one may expect
that the fusion of attributes, i.e., Temporal-TSGN, can produce
even better detection results. Apparently, the proposed TSGN
models improve the identiﬁcation performance of the TN
(original) model in 29 of 30 cases, achieving the optimal result
of 98.43% on EtherG6. Especially, Temporal-TSGN almost
always performs best on the six datasets, which incorporating
with Diffpool outperforms the results based on other baselines.
2) Transaction feature exploration should be paralleled
with topological structure learning: It is undisputed that the
quality of features extracted from transaction networks will af-
fect the performance of downstream phishing detection model,
which is clearly reﬂected in our experiments. It is obvious that
the classiﬁcation results vary widely based on ﬁve different
baseline models. Handcrafted based on feature assembly is
superior to the automatic feature extraction methods relied
i.e., Graph2Vec and DeepKernel, with
on learning model,
average gains of 9.29% and 8.26% respectively. We also ﬁnd
that the handcrafted features elaborately could greatly boost
the performance of our TSGN model, achieving a percentage
increase of 13.26% on EtherG1. And then, the experimental
results have turned the spotlight on the Diffpool. In this case,
our TSGN models produce optimal results exceeding those
of other methods. Besides, U2GNN, which tops the global
graph classiﬁcation leaderboard, did not achieve impressive
performances, even underperforming Handcrafted. It follows
that transaction feature exploiting and topological structure
learning of transaction networks are equally important in the
scenario of Ethereum phishing identiﬁcation. The comprehen-
sive and rational exploration of transaction features in the
progress of network modeling is the main attribution for the
good performance of our TSGNs. Furthermore, we ﬁnd that
the complex topological interaction in the transaction networks
learning of phishing
offers more insights into the model
identiﬁcation. The models on datasets of Net type outperform
those on datasets of Star type in terms of the metric F1-
Score in 43 out of 60 cases. While, the models on datasets of
Star type have great potential for improvement, which produce
higher %Increase values than datasets of Net type in 11 out of
15 cases. It also shows that the interaction information between
1-hop neighbors could indeed enhance the performance of the
detection models.

3) TSGNs with attributes can effectively reduce the mod-
eling time of large Ethereum networks: Furthermore, we
record the computational time and compare the time consump-
tion of constructing TSGN, Directed-TSGN, and Temporal-
TSGN on six Ethereum datasets. The results are presented
in TABLE V, where one can see that the time consumption

10

TABLE V
TIME CONSUMPTION (SEC.) OF CONSTRUCTING TSGN,
DIRECTED-TSGN, AND TEMPORAL-TSGN.

Dataset

TSGN

Directed-TSGN

Temporal-TSGN

EtherG1

EtherG2

2.42

3.29

EtherG3

605.79

EtherG4

EtherG5

3.58

6.54

EtherG6

801.93

2.35

2.62

93.28

3.45

5.92

202.49

2.29

2.60

71.62

3.31

5.56

165.96

of constructing TSGN, Directed-TSGN, and Temporal-TSGN
only show a slight decrease in these small-scale datasets, such
as EtherG1, EtherG2, EtherG4, and EtherG5. However, there is
a signiﬁcant decrease in computational time of Directed-TSGN
compared with that of TSGN when considering the larger
datasets EtherG3 and EtherG6, decreasing from 6 hundred
seconds to less than 93 seconds and from 800 seconds to
200 seconds respectively. In addition, the time consumption
of Temporal-TSGN presents a further reduction on the basis
of Directed-TSGN. Such results suggest that Directed-TSGN
and Temporal-TSGN can further enhance the performance of
the algorithm for phishing account identiﬁcation, while also
greatly improving the efﬁciency of the algorithms.

4) Multiple-TSGN performs well on the multi-edge net-
works: Temporal attributes can be adopted to identify and
distinguish the multiple same-directed transaction edges be-
tween a pair of nodes. Therefore, Multiple-TSGN can dis-
pose of more complex multi-edge transaction networks via
extending the scope of application of Temporal-TSGN. In this
section, the performance of our TSGN is further evaluated
in the case of multi-edge transaction networks, the speciﬁc
statistics of which are shown in the Multiedge collection of
TABLE II. As shown in TABLE VI, experiments on the six
Ethereum datasets show competitive results. We can see that
the classiﬁcation performance of Graph2Vec, DeepKernel, and
U2GNN methods on multi-edge datasets does not show much
difference compared with the cases as shown in TABLE IV.
Interestingly, Multiple-TSGN presents its capacity to integrate
information of Multi-edge networks under the Handcrafted
method, achieving good performance of 93.24% on average,
and Diffpool still preserves the relatively high detection results
of 95.86% and 96.71% on EtherG3 and EtherG4, respec-
tively. Besides, compared with TN and TSGNs models, it
generates a relative improvement of 16.03% and 8.57% on
average, respectively, in terms of the %Increase metric. On
the other hand, Multiple-TSGN increases the performance of
in all cases, with the %Increase
the original TN model
(TN) ranging from 2.13% to 16.03%. It follows that our
Multiple-TSGN model has a considerable performance when
dealing with large-scale transaction networks with complex
structural attributes. Overall, TSGN conducted on multi-edge
cases can further improve the representation capability of the
classiﬁcation methods.

11

TABLE VI
CLASSIFICATION PERFORMANCE OF MULTIPLE-TSGN MODEL ON MULTIPLE-EDGE TRANSACTION NETWORKS.

Multiple-TSGN

Handcrafted

Graph2vec

DeepKernel

Diffpool

U2GNN

EtherG1

EtherG2

EtherG3

EtherG4

EtherG5

EtherG6

95.00 ± 2.65

79.57 ± 3.84

79.43 ± 3.01

91.71 ± 2.37

81.14 ± 4.46

95.28 ± 2.39

76.86 ± 6.99

79.00 ± 4.04

91.57 ± 2.07

83.43 ± 3.95

92.29 ± 2.73

70.00 ± 4.19

80.57 ± 6.83

95.86 ± 1.49

81.86 ± 3.20

92.71 ± 3.16

74.86 ± 6.13

78.86 ± 5.34

96.71 ± 1.92

77.86 ± 5.12

93.00 ± 2.82

73.14 ± 6.18

78.29 ± 5.74

90.00 ± 1.92

78.43 ± 5.01

91.14 ± 2.70

71.43 ± 5.96

77.00 ± 3.16

88.57 ± 3.32

79.57 ± 3.32

Avg.Multiple-TSGN

Avg.TSGNs (best)

Avg.TN

%Increase (TSGNs)

%Increase (TN)

93.24

85.88

80.36

8.57%

16.03%

74.31

76.62

70.29

-3.01%

5.72%

78.86

77.26

74.38

2.07%

6.02%

92.40

94.90

90.47

-2.63%

2.13%

80.38

79.64

74.69

0.93%

7.62%

(a) TN-star

(b) TN-net

(c) TSGN

(d) Directed-TSGN

(e) Temporal-TSGN

(f) Multiple-TSGN

Fig. 8. Visualization of a real transaction network and its TSGNs.

E. Visualization

Moreover, for a better demonstration of network structures,
we provide the visualization of real example network and its
TSGNs as shown in Fig. 8. Fig. 8 (a)-(b) show the transaction
networks of different types, following with TSGN, Directed-
TSGN, and Temporal-TSGN shown in (c)-(e) which are
mapped from (b) the net-form transaction network. Multiple-
TSGN in (f) is constructed based on the multi-edge net-

form transaction network. In these networks, the node with
more dark color has a bigger degree value. The arrow on the
edge represents the direction of fund ﬂows between accounts,
and the thicker edge with higher-level color means a higher
transaction amount (orange, gray, and purple are adopted as
the color levels in turns). It can be found that Directed-
TSGN can indeed reduce the scale of TSGN and yield a clear
structure of transfer ﬂows, and Temporal-TSGN further ﬁlters

012345678910[1.52501505E9, 1.6649999618530273][1.525037352E9, 0.05000000074505806][1.525037868E9, 0.10000000149011612][1.529011446E9, 21.350921630859375][1.525127749E9, 2.059703826904297][1.525092645E9, 5.0][1.525099616E9, 0.5440000295639038][1.525244386E9, 6.664904594421387][1.525325434E9, 0.5][1.525379814E9, 0.5][1.525624251E9, 3.9998950958251953]012345678910[1.525325434E9, 0.5][1.525325434E9, 0.5][1.525037868E9, 0.10000000149011612][1.525037868E9, 0.10000000149011612][1.529011446E9, 21.350921630859375][1.529011446E9, 21.350921630859375][1.52501505E9, 1.6649999618530273][1.52501505E9, 1.6649999618530273][1.499451266E9, 0.19499999284744263][1.499451266E9, 0.19499999284744263][1.525127749E9, 2.059703826904297][1.525127749E9, 2.059703826904297][1.519602508E9, 2.4411038905382156][1.519602508E9, 2.4411038905382156][1.558598652E9, 0.9509387388825417][1.558598652E9, 0.9509387388825417][1.527161384E9, 1.0000000093132257][1.527161384E9, 1.0000000093132257][1.525092645E9, 5.0][1.525092645E9, 5.0][1.527162832E9, 3.1000001206994057][1.527162832E9, 3.1000001206994057][1.525099616E9, 0.5440000295639038][1.525099616E9, 0.5440000295639038][1.515105533E9, 20.96199607849121][1.515105533E9, 20.96199607849121][1.531856575E9, 1.9060171023011208][1.531856575E9, 1.9060171023011208][1.551824389E9, 4.079000011086464][1.551824389E9, 4.079000011086464][1.530632128E9, 348719.72539031506][1.530632128E9, 348719.72539031506][1.525244386E9, 6.664904594421387][1.525244386E9, 6.664904594421387][1.525379814E9, 0.5][1.525379814E9, 0.5][1.525624251E9, 3.9998950958251953][1.525624251E9, 3.9998950958251953]051314161324121771161081590.034427905025403060.03442790502540306-0.2823294969977378-0.2823294969977378-0.5228787452803376-0.52287874528033760.352172383997349850.35217238399734985-0.3010299956639812-0.30102999566398120.55418043046082070.55418043046082071.03843974595440751.0384397459544075-0.05141296006326008-0.051412960063260080.439332693830262630.43933269383026263-0.2823294969977378-0.28232949699773780.55418043046082070.5541804304608207-0.5228787452803376-0.52287874528033760.352172383997349850.352172383997349850.034427905025403060.034427905025403061.03843974595440751.0384397459544075-0.05141296006326008-0.051412960063260080.439332693830262630.439332693830262631.0536091255115931.0536091255115931.10296194282036671.10296194282036671.0393133816192061.0393133816192061.1463734290390281.1463734290390281.11976579896066771.11976579896066771.03041594242594431.03041594242594431.06099835755004431.06099835755004430.59887893357218850.59887893357218850.61961004391304030.61961004391304030.52923169557319740.52923169557319743.7599192437055333.7599192437055330.55683929645984940.55683929645984940.72692271263504380.72692271263504380.58290980001526640.58290980001526640.76585120421894510.76585120421894510.5601999337647510.5601999337647510.167570156434792420.167570156434792420.496702206321085140.49670220632108514-0.16218689774005685-0.16218689774005685-0.09089528043035615-0.090895280430356150.0543663481253730260.054366348125373026-0.04078874108409896-0.040788741084098960.42132475321320220.42132475321320221.04607956599426851.04607956599426850.52277015808589680.52277015808589680.0431657202074537460.0431657202074537460.45216186850831450.45216186850831450.0022959525578851290.002295952557885129-0.05428528594013979-0.05428528594013979-0.031517051446064856-0.031517051446064856-0.17535317882174362-0.17535317882174362-0.5681529501069076-0.56815295010690761.0275044931981361.0275044931981363.7597050036016543.759705003601654-0.09963287134352974-0.099632871343529741.04044402852577591.04044402852577591.02442401793116681.02442401793116680.202079441007388030.20207944100738803-0.4323855572691554-0.43238555726915543.75967498216637753.7596749821663775-0.8203856255349975-0.82038562553499751.0226229981108691.022622998110869-0.4871531872127798-0.48715318721277980.189973408773037420.189973408773037423.7596716756629093.7596716756629090.312530508335199630.312530508335199631.07831172332950031.07831172332950033.7604585222049313.7604585222049311.03152957451821671.03152957451821670.44715803134221920.44715803134221923.7596902763644223.7596902763644220.44279322593976920.44279322593976920.65320744674789680.65320744674789680.40654018043395510.4065401804339551-0.4921441283041691-0.49214412830416910.35639829105572750.35639829105572750.24723654950676410.24723654950676413.75968816164323.75968816164320.18892848376085350.18892848376085350.31174273823503060.31174273823503063.7597805200487293.7597805200487290123456789101112131714151618-0.52287874528033761.0384397459544075-0.054285285940139791.0609983575500443-0.43238555726915541.0244240179311668-0.82038562553499750.202079441007388033.7596749821663775-0.49214412830416911.0393133816192061.04607956599426851.025055630552421.0275044931981361.04044402852577590.312530508335199633.759919243705533-0.162186897740056851.053609125511593-0.41465666431045131.02505563055242-0.77827877362127540.206257939950656923.75967614499335450.002295952557885129-0.56815295010690760.58290980001526640.52923169557319741.1463734290390280.40654018043395511.11976579896066770.5601999337647510.31174273823503061.1029619428203667-0.52287874528033761.038439745954407502314567891011121314151617181.0384397459544075-0.054285285940139791.0609983575500443-0.43238555726915541.0244240179311668-0.82038562553499750.202079441007388033.75967498216637751.0393133816192061.04607956599426851.025055630552421.0275044931981361.04044402852577591.053609125511593-0.4146566643104513-0.77827877362127540.206257939950656923.75967614499335451.1463734290390281.1197657989606677-0.221848749616356371.10296194282036671.0384397459544075023142528567244344454647484950515253545556575859606162636465668676896970717273741023262975767778798081828384858687888990919293161711012141121111.0384397459544075-0.054285285940139791.0609983575500443-0.6108339156354675-0.225483034271450471.044028195942751.0536091255115931.05997965017908753.13065502756041523.17638040290641043.30124687159743553.34261984523640983.24328589805682953.27898188840957962.8457173984305793.39811351808213453.24328589805682953.2043910606547043.47726585070824032.90363197389353463.0972569625354222.69983685901112753.54419192469194983.3012467630780073.54419173861878762.8756382021359293.47726556127487063.30124643751955873.35237491619807053.398113170785193.35237491619807053.54419173861878761.02299115537837573.09693143396822952.69902355475553433.54407563277350323.3010432753176173.54407544665050932.87509580638007023.47712989072433533.3010429496065933.3521940327460983.3979503718570383.3521940327460983.54407544665050933.3979503718570383.24305285316059563.47712733479984863.30103911575234043.35219062486602853.39794730475804663.35219062486602853.54407325585278973.39794730475804663.24304847162878532.8129414178412573.39794730475804663.5118889733636073.7781542904343773.04140926699461023.4771273347998486-0.4146566643104513-0.06314322750313434-0.79616254992765183.24306532051714052.81298677690180383.3979590991334473.5118980460236713.77815920484454633.04143607135690973.47713716349577863.65322311969083823.30105385860962563.54408168047976833.54408168047976833.5118980460236713.0607393402859563.3979590991334473.3522037296833513.20414981113311333.42326388382846723.3324606580471243.3979590991334473.5118980460236713.3522037296833513.2175128688279463.0000477245801763.47713716349577862.8751248949999062.97777384154376361.11976579896066770.52923169557319741.0393133816192061.02226329285874071.025055630552421.03235674484598671.0206097802773970.43960649060330473.2438635281432312.81513223684126863.39851800899713343.51232804487456373.77839217734551853.04270521144483473.4776029750621183.65353372003246253.30175237595376773.54448098020610133.54448098020610133.51232804487456373.0619533826879243.39851800899713343.35282469323549353.205022770429563.42379117779339033.33311048055269633.39851800899713343.51232804487456373.35282469323549353.218359402337031.1463734290390281.03843974595440751.1029619428203667the network structure of Directed-TSGN by the transaction
temporal attribute, where some edges disappear such as (9,14),
(16,14) and (14,1) and forth. Multiple-TSGN is much more
complex than the other TSGNs, providing more interaction
information from different accounts around the target node,
beneﬁting the phishing detection.

As a simple case study, we utilize the t-SNE to visualize the
results of classiﬁcation on EtherG1 dataset based on Diffpool
method to verify the effectiveness of our TSGN model. Here,
we choose the Directed-TSGN to visualize since it produces
the good performance that enhances the detection performance
of Diffpool most, with %Increase of 14.58%. As shown in
Fig. 9, the structural features are located in different places by
utilizing t-SNE. The left shows the original detection result
using Diffpool with TN model, while the right depicts the
optimized distribution of the same dataset using Diffpool with
Directed-TSGN. One can see that the transaction networks in
EtherG1 dataset can indeed be distinguished by the original
features of Diffpool, but it appears that the distinction of net-
works could become more explicit after TSGN mapping with
direction, demonstrating the effectiveness of our Directed-
TSGN model. It also suggests that our TSGN model provides
more predominant features contrasted with original TN model.

Fig. 9. The t-SNE visualization of structural features using Diffpool with (left)
TN and with (right) Directed-TSGN. The same color of points represent the
same class of graphs in EtherG1 dataset.

V. CONCLUSION
In this paper, we propose a novel

transaction subgraph
network (TSGN) model for phishing detection. By introducing
different mapping mechanisms into the transaction networks,
we built TSGN, Directed-TSGN, Temporal-TSGN models
to enhance the classiﬁcation algorithms. Compared with the
baselines only based on the TN, our TSGNs indeed provide
more potential information to beneﬁt the phishing detection.
By comparing with the TSGN, Directed-TSGN and Temporal-
TSGN are of the controllable scale and indeed have much
lower time cost, beneﬁting the network feature extraction
methods to learn the network structure with higher efﬁciency.
Experimental results manifest that, combined with network
representation algorithms, these TSGN models can capture
more features to enhance the classiﬁcation algorithm and
improve phishing nodes identiﬁcation accuracy in Ethereum.
In particular, when integrating the appropriate feature repre-
sentation methods, such as Handcrafted and Diffpool, TSGNs
can achieve the best results on all datasets.

12

In the future, we will extend and improve our model for suit
more blockchain data mining tasks, such as Pondzi scheme
detection, transaction tracking, etc.

ACKNOWLEDGMENT

This work was partially supported by the Key R&D Pro-
gram of Zhejiang under Grant No. 2022C01018, by the
National Natural Science Foundation of China under Grant No.
U21B2001 and 61973273, by the Zhejiang Provincial Natural
Science Foundation of China under Grant No. LR19F030001,
and by the National Key R&D Program of China under Grant
No. 2020YFB1006104.

REFERENCES

[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” Decen-

tralized Business Review, p. 21260, 2008.

[2] G. Wood, “Ethereum: A secure decentralised generalised transaction
ledger,” Ethereum project yellow paper, vol. 151, no. 2014, pp. 1–32,
2014.

[3] W. Chen, X. Guo, Z. Chen, Z. Zheng, and Y. Lu, “Phishing scam detec-
tion on ethereum: Towards ﬁnancial security for blockchain ecosystem,”
in IJCAI, 2020, pp. 4506–4512.

[4] M. Khonji, Y. Iraqi, and A. Jones, “Phishing detection: a literature
survey,” IEEE Communications Surveys & Tutorials, vol. 15, no. 4, pp.
2091–2121, 2013.

[5] Y. Huang, H. Wang, L. Wu, G. Tyson, X. Luo, R. Zhang, X. Liu,
G. Huang, and X. Jiang, “Understanding (mis) behavior on the eosio
blockchain,” Proceedings of the ACM on Measurement and Analysis of
Computing Systems, vol. 4, no. 2, pp. 1–28, 2020.

[6] L. Chen, J. Peng, Y. Liu, J. Li, F. Xie, and Z. Zheng, “Phishing
scams detection in ethereum transaction network,” ACM Transactions
on Internet Technology (TOIT), vol. 21, no. 1, pp. 1–16, 2020.

[7] F. Poursafaei, G. B. Hamad, and Z. Zilic, “Detecting malicious ethereum
entities via application of machine learning classiﬁcation,” in 2020
2nd Conference on Blockchain Research & Applications for Innovative
Networks and Services (BRAINS).

IEEE, 2020, pp. 120–127.

[8] H. Hu and Y. Xu, “Scsguard: Deep scam detection for ethereum smart

contracts,” arXiv preprint arXiv:2105.10426, 2021.

[9] J. Wu, Q. Yuan, D. Lin, W. You, W. Chen, C. Chen, and Z. Zheng, “Who
are the phishers? phishing scam detection on ethereum via network
embedding,” IEEE Transactions on Systems, Man, and Cybernetics:
Systems, 2020.

[10] I. Alarab, S. Prakoonwit, and M. I. Nacer, “Competence of graph con-
volutional networks for anti-money laundering in bitcoin blockchain,”
in Proceedings of the 2020 5th International Conference on Machine
Learning Technologies, 2020, pp. 23–27.

[11] Q. Xuan, J. Wang, M. Zhao, J. Yuan, C. Fu, Z. Ruan, and G. Chen,
“Subgraph networks with application to structural feature space expan-
sion,” IEEE Transactions on Knowledge and Data Engineering, vol. 33,
no. 6, pp. 2776–2789, 2021.

[12] S. Li, F. Xu, R. Wang, and S. Zhong, “Self-supervised incremental deep
graph learning for ethereum phishing scam detection,” arXiv preprint
arXiv:2106.10176, 2021.

[13] Z. Yuan, Q. Yuan, and J. Wu, “Phishing detection on ethereum via learn-
ing representation of transaction subgraphs,” in International Conference
on Blockchain and Trustworthy Systems. Springer, 2020, pp. 178–191.
[14] X. Liu, Z. Tang, P. Li, S. Guo, X. Fan, and J. Zhang, “A graph learning
based approach for identity inference in dapp platform blockchain,”
IEEE Transactions on Emerging Topics in Computing, 2020.

[15] Y. Zhuang, Z. Liu, P. Qian, Q. Liu, X. Wang, and Q. He, “Smart contract
vulnerability detection using graph neural networks,” in Proceedings of
the 2020 29th International Joint Conference on Artiﬁcial Intelligence,
2020, pp. 3283–3290.

[16] D. D. F. Maesa, A. Marino, and L. Ricci, “Detecting artiﬁcial behaviours
in the bitcoin users graph,” Online Social Networks and Media, vol. 3,
pp. 63–74, 2017.

[17] N. C. Abay, C. G. Akcora, Y. R. Gel, M. Kantarcioglu, U. D. Islambekov,
Y. Tian, and B. Thuraisingham, “Chainnet: Learning on blockchain
graphs with topological features,” in 2019 IEEE international conference
on data mining (ICDM).

IEEE, 2019, pp. 946–951.

10-10-505-101050-515-7.50.07.55.02.5-10-5.0-2.550-513

[18] D. Lin, J. Wu, Q. Xuan, and K. T. Chi, “Ethereum transaction tracking:
Inferring evolution of transaction networks via link prediction,” Physica
A: Statistical Mechanics and its Applications, p. 127504, 2022.
[19] S. Li, G. Gou, C. Liu, C. Hou, Z. Li, and G. Xiong, “Ttagn: Temporal
transaction aggregation graph network for ethereum phishing scams
detection,” in Proceedings of the ACM Web Conference 2022, 2022,
pp. 661–669.

[20] G. Li, M. Semerci, B. Yener, and M. J. Zaki, “Graph classiﬁcation via
topological and label attributes,” in Proceedings of the 9th international
workshop on mining and learning with graphs (MLG), San Diego, USA,
vol. 2, 2011.

[21] J. Wang, P. Chen, B. Ma, J. Zhou, Z. Ruan, G. Chen, and Q. Xuan,
“Sampling subgraph network with application to graph classiﬁcation,”
IEEE Transactions on Network Science and Engineering, vol. 8, no. 4,
pp. 3478–3490, 2021.

[22] C. Fu, M. Zhao, L. Fan, X. Chen, J. Chen, Z. Wu, Y. Xia, and Q. Xuan,
“Link weight prediction using supervised learning methods and its
application to yelp layered network,” IEEE Transactions on Knowledge
and Data Engineering, vol. 30, no. 8, pp. 1507–1518, 2018.

[23] A. Narayanan, M. Chandramohan, L. Chen, Y. Liu, and S. Saminathan,
“subgraph2vec: Learning distributed representations of rooted sub-
graphs from large graphs,” in International Workshop on Mining and
Learning with Graphs., 2016.

[24] P. Yanardag and S. Vishwanathan, “Deep graph kernels,” in Proceedings
of the 21th ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining. ACM, 2015, pp. 1365–1374.

[25] R. Ying, J. You, C. Morris, X. Ren, W. L. Hamilton, and J. Leskovec,
“Hierarchical graph representation learning with differentiable pooling,”
in Proceedings of the 32nd International Conference on Neural Infor-
mation Processing Systems, 2018, pp. 4805–4815.

[26] D. Q. Nguyen, T. D. Nguyen, and D. Phung, “Universal graph trans-
former self-attention networks,” in Companion Proceedings of the Web
Conference 2022 (WWW ’22 Companion), 2022.

