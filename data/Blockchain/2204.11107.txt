Debt-Financed Collateral and Stability Risks in the
DeFi Ecosystem

Michael Darlin
School of Management and
Yale Institute for Network Science
Yale University, USA

Georgios Palaiokrassas
Department of Electrical Engineering and
Yale Institute for Network Science
Yale University, USA

Leandros Tassiulas
Department of Electrical Engineering and
Yale Institute for Network Science
Yale University, USA

2
2
0
2

n
u
J

7

]

R
T
.
n
i
f
-
q
[

2
v
7
0
1
1
1
.
4
0
2
2
:
v
i
X
r
a

Abstract—The rise of Decentralized Finance (“DeFi”) on
the Ethereum blockchain has enabled the creation of lending
platforms, which serve as marketplaces to lend and borrow
digital currencies. Initially, we categorize the activity of lending
platforms within a standard regulatory framework. We then
propose an Ethereum address grouping algorithm using activity
over DeFi protocols and employ a novel classiﬁcation algorithm to
calculate the percentage of fund ﬂows into DeFi lending platforms
that can be attributed to debt created elsewhere in the system
(“debt-ﬁnanced collateral”). Based on our results, we conclude
that the wide-spread use of stablecoins as debt-ﬁnanced collateral
increases ﬁnancial stability risks in the DeFi ecosystem.

Index Terms—DeFi, dept-ﬁnanced collateral, address cluster-

ing, heuristics, ﬁnancial stability risks

I. INTRODUCTION

DeFi applications have seen a rapid increase in popularity
and usage since the beginning of 2019. One of the core
functionalities of DeFi is the creation of debt through col-
lateralized lending. In this paper, we examine whether debt
ﬁnancing was the main source of funds deposited into DeFi
protocols, and their risks to overall ﬁnancial stability. We then
develop an algorithm to track debt and collateral balances
across user addresses and calculate the proporiton of “debt-
ﬁnanced collateral” (DFC) into DeFi applications.

We conclude that DFC has been used extensively across
DeFi protocols. While debt usage in general increases ﬁnancial
stability risks, DFC in particular raises risks because the
method links debt across multiple protocols. This intercon-
nectedness increases the risk of contagion in the case of a
run on lending platform deposits, or in the event of a lending
platform’s operational failure.

This paper contributes the following insights:

1) Regulatory assessment of DeFi risks: We apply the
“economic functions” framework used by macropruden-
tial regulators to classify and assess the ﬁnancial risks
posed by DeFi lending platforms.

2) Address Clustering Algorithm: To the best of our
knowledge, we are the ﬁrst to propose an algorithm
that clusters Ethereum addresses using the activity and
interactions of users in the DeFi ecosystem.

3) Debt-creation algorithm: We devise a novel algorithm
to group addresses, classify Ethereum transactions, and
calculate the percentage of DFC.

4) System-level aggregate analysis: We apply the algo-
rithm to transactions from four major DeFi protocols,
and we use the results to assess the risk levels endoge-
nous to DeFi over time, while we release the collected
data and our source code for further research1.

In Section II, we provide an overview of the DeFi ecosystem
and of lending platforms speciﬁcally. In Section III, we
provide a risk assessment of lending platforms according to
a ﬁnancial regulatory framework. Our analysis methodology
is deﬁned in Section IV, and the algorithm parameters are
speciﬁed in Section V. Section VI details the results of our
analysis, and Section VII concludes with brief remarks on
potential avenues for future research.

II. DECENTRALIZED FINANCE

DeFi refers to a set of ﬁnancial applications operating
primarily on top of Ethereum smart contracts. but also in-
cludes a desire to replace existing ﬁnancial intermediaries with
automated ﬁnancial software [1], maintaining an open and
transparent ﬁnancial system, and a commitment to community-
led, decentralized governance of applications [2].

The move towards a decentralized ﬁnancial system was
recently envisioned by the Basel Committee for Banking
Supervision (“BCBS”). In a hypothetical scenario of mostly
disintermediated banks, the BCBS concluded customers would
have “a more direct say in choosing the services and the
provider rather than sourcing such services via an intermediary
bank.” At
the same time, customers would also “assume
more direct responsibility in transactions, increasing the risks
they are exposed to” [3]. DeFi applications exemplify the
possibilities and pitfalls of a “disintermediated bank” scenario.
The public permissionless nature of the Ethereum blockchain
allows any individual to review, develop or interface with DeFi
protocols [2], which interact with each other, creating a tightly-
connected system programmatically and ﬁnancially [4].

Although address clustering methods have been proposed
for Bitcoin’s UTXO model, a limited number of methods
have been proposed for Ethereum’s account model [5]–[7],
focusing in certain airdrops, ICOs or other on-chain activities
and interactions. However, the participation of users in DeFi
platforms has not yet been exploited towards this direction.

1https://github.com/michael-darlin/debt-ﬁnanced-collateral.

 
 
 
 
 
 
DeFi Total Value Locked (“TVL”) was measured at $0.9B
on April 30, 2020 and on May 17, 2022, it was measured at
$56.9B [8]. This increase may be attributed to an increased
usage of DeFi applications, an increasing leveraged capital,
and a more than ten-fold increase in Ethereum prices over the
same period. DeFi transactions commonly involve stablecoins,
cryptocurrencies such as Tether, USD Coin, and DAI [9].

Lending platforms, which are a popular implementation of
DeFi technology, allow users to both lend and borrow cur-
rency, beneﬁting from the existence of many ERC-20 tokens
[10]. Lenders can deposit currency into a lending platform as
liquidity for loans, thereby earning interest on their deposits.
Borrowers deposit currency as collateral for their own loans,
subsequently drawing down debt in a new currency. In essence,
funds deposited for lending act as liquidity for funds being
requested for borrowing. The largest lending platform, Maker,
allows users to borrow only in the Dai stablecoin, which is
created by the loan itself and is backed by the loan collateral.
Other popular platforms, such as Aave and Compound, allow
users to borrow multiple currencies, the liquidity for which is
provided by the pooled currencies of other protocol users.

Interest rates for each currency are adjusted, either manually
or algorithmically, based on the supply and demand. Debt
withdrawn from lending platforms must stay below a certain
percentage of the collateral deposited, in order to avoid liqui-
dation. While the collateral stays locked in the smart contract,
the debt withdrawn can be used freely, and is essentially new
money created through the lending platform.

Fig. 1: Example transaction sequence involving lending plat-
forms and decentralized exchanges

Figure 1 illustrates the process of interacting with multiple
lending platforms, ﬁrst to withdraw a loan (Steps 1-2) and
then to deposit funds as liquidity for loans (Step 5). In
between, users may interact with decentralized exchanges,
which allow them to exchange between currencies (Steps
3-4). These transactions may be undertaken to proﬁt from
differences in interest rates across currencies and protocols,
or to gain exposure to a currency expected to appreciate in
price. Under the parameters of Algorithm 3, described further
in Section V, we would classify Steps 1 and 5 of Figure 1 as
“Collateral Deposit” transactions, Step 2 as a “Debt Create”
transaction, and Steps 3 and 4 as a “Swap” transaction. Two
additional transaction types in Algorithm 3, not depicted in
Figure 1 for simplicity, are “Collateral Withdraw” (the obverse
of Step 1) and “Debt Repay” (the obverse of Step 2).

In our analysis, we focus on the activities of the largest
lending platforms (Aave, Compound and Maker) and one of
the most popular decentralized exchanges (Uniswap) [8], as
these are the drivers of debt creation in DeFi ecosystem.

III. REGULATORY ASSESSMENT

The Financial Stability Board (“FSB”), an international
ﬁnancial monitoring body, deﬁnes the non-bank ﬁnancial inter-
mediation (“NBFI”) sector as “all ﬁnancial institutions that are
not central banks, banks or public ﬁnancial institutions” [11].
The NBFI sector has been a focal point for banking regulators
since the ﬁnancial crisis of 2007-09, when asset price bubbles
were attributed, in part, to the unregulated activities of non-
bank ﬁnancial institutions [12]. Recently, the FSB has issued
reports on several issues related to cryptocurrencies: global
cryptocurrency regulation [13], disintermediation of ﬁnancial
services through new technologies (including, but not limited
to, blockchain) [14], and a proposed regulatory framework for
stablecoins [15]. We build on those reports by examining how
the activities of speciﬁc DeFi protocols (lending pools) could
be placed within the FSB’s monitoring framework. The FSB
concentrates its monitoring function on NBFI activities that
increase ﬁnancial stability risk, analyzed below (Sect. III-A).

A. Activities-based assessment

Credit

Regulatory arbitrage (the ﬁrst of two major NBFI activities
covered by the FSB) is deﬁned as activities that mimic the
functions of traditional banks (e.g. providing credit to con-
sumers) but are conducted outside existing regulatory areas.
These activities enjoy freedom from regulatory purview (hence
the term “arbitrage”) but still increase the amount of risk
within the ﬁnancial system [16], with lending platforms oper-
ating outside the current scope of macroprudential regulations.
intermediation (the second major NBFI activity)
refers to an intermediary assisting in credit creation. Lending
platforms fall into this category, as they provide a marketplace
for users to lend and borrow funds and we consider which spe-
ciﬁc types of intermediation [11] lending platforms provide:
i) Maturity transformation is deﬁned as “the use of short-
term deposits to fund long-term loans” [12]. This transfor-
mation arises when banks originate loans which are repaid
on a long-term schedule, while also holding deposits which
may be redeemed at any time. In lending pools, borrowers
are under no obligation to repay their loans via a ﬁxed
schedule, and they may keep their loan principal for as long as
their collateral balance meets the protocol’s parameters, while
lenders may redeem their deposits at any time. Consequently,
lending platforms engage in maturity transformation.

ii) Liquidity transformation is deﬁned as “the use of liquid
instruments to fund illiquid assets” [12] and is not present
in lending platforms, since both deposits and loans are made
in highly liquid currencies. In theory, lending platforms could
accept deposits in liquid currency and provide loans in an illiq-
uid currency, which would qualify as liquidity transformation.
However, while smaller currencies may have little liquidity, the
majority of DeFi lending and borrowing is concentrated in a

High interestLow interestUserLending Platform A1. Deposit ETH collateral2. Withdraw DAI debtDecentralized Exchange3. Exchange DAI4. Receive USDCLending Platform B5. Deposit USDCfew major currencies (Table II). Even when liquidity decreases
during a market crash, the liquidity of a crypto-asset should
exceed that of an illiquid long-term investment.

iii) Leverage: deﬁned as the amount of debt taken on by an
individual or entity, commonly measured through the leverage
ratio [17]. Since lending platforms allow users to borrow
funds, the protocols are engaged in providing leverage.

iv) Imperfect credit risk transfer refers to credit risk [18]
not being appropriately priced. This leaves the intermediary
exposed to residual credit risk, which does not apply to the
activities of lending platforms, since they do not formally
engage as intermediaries in credit risk transfer.

B. Economic function classiﬁcation

From our activities analysis, we conclude that

lending
platforms engage in leverage creation and maturity transfor-
mation. Using these activities as a ﬁlter, we can place lending
platforms within the FSB’s economic function framework.
The FSB deﬁnes ﬁve economic functions (“EFs”), which may
increase the risk to macro-level ﬁnancial stability [11].

EF1: Like investment funds (“collective investment vehi-
cles”), lending platforms accept deposits from investors, who
receive a return on their deposits through interest and may
withdraw their funds at any time. Unlike investment funds,
however, lending platforms do not actively invest the funds
deposited; interest is earned based on demand from borrowers
interacting with the lending platform’s smart contracts. As a
result, we do not classify lending platforms under EF1.

TABLE I: Economic functions

EF Deﬁnition
EF1 Management of collective investment vehicles with features that make

them susceptible to runs

EF2 Loan provision that is dependent on short-term funding
EF3 Intermediation of market activities that is dependent on short-term

funding or on secured funding of client assets

EF4 Facilitation of credit creation
EF5 Securitisation-based credit

intermediation and funding of ﬁnancial

entities

EF2: The FSB deﬁnes an example EF2 entity as one that
takes “deposits from retail and wholesale customers that are
redeemable at notice or within a short timeframe” [16]. We
have already observed that the main purpose of DeFi protocols
is the provision of credit to borrowers. In addition, deposits
into DeFi protocol are “redeemable at notice,” providing that
a user has no loans outstanding. So, lending platforms can be
classiﬁed under EF2.

EF3 deals with market intermediation performed by broker-
dealers, typically acting as market-makers for their clients.
Lending platforms do handle funds for depositors, but not
as a market-making intermediary (as would a decentralized
exchange), so this EF is not applicable.

EF4 deals with the provision of credit enhancement
to
structured loan products. Because lending platforms do not
provide credit enhancement, this EF is not applicable.

EF5 deals with entities creating asset- and mortgage-backed
securities. Since lending platforms do not engage in this
activity, this EF is not applicable.

C. Stability risk factors

Recent literature has given leverage a central role in the
buildup of asset price bubbles over time [12], [19]. According
to the “marginal buyer of price” theory, market actors are
heterogeneous in respect to their forecasts of asset prices.
Leverage allows the most optimistic market actors to increase
their asset purchases using borrowed funds, a situation which
pushes asset prices up over time. When a negative price shock
triggers margin calls, the most optimistic buyers are forced to
sell their assets to avoid bankruptcy. These forced sales cause
asset prices to decrease sharply. In essence, leverage increases
volatility on both the up and down sides of asset price cycles.
This volatility is further increased when debt is chained
across multiple ﬁnancial products, as occurred with mortgage-
backed securities prior to the ﬁnancial crisis of 2007-09.
The securitization of mortgages, while ﬁnancially efﬁcient,
brought securities to the market that gave little information in
regards to risk assumed. Because mortgage-backed securities
were highly sensitive to house prices, a decline in those
prices adversely affected security prices. The interlinkage of
securities spread the adverse effect through these markets in
a systemic way, leading to a run on multiple asset types [20].
As mentioned in Section III-A, the primary function of
lending platforms is to facilitate debt creation. Following the
marginal buyer theory, debt creation allows the most optimistic
actors in the DeFi ecosystem to buy more assets. This leverage
can both increase asset prices and decrease ﬁnancial stability
overall. Further, the interoperability of DeFi protocols allows
highly leveraged actors to use their debt as collateral
in
other protocols, which further spreads risk across the system,
creating an inherent risk of a system-wide run on assets.

Analyzing DFC allows us to gauge both the extent of debt
ﬁnancing, as well as its interconnectedness across multiple
protocols, a critical step in assessing the risk present in the
DeFi system. With blockchain transparent data, we can begin
to estimate the ﬂow of debt-backed funds temporally (over
time) and cross-sectionally (across protocols).

According to our regulatory assessment, while leverage and
interconnectedness may raise risk levels to the DeFi ecosys-
tem, within which a negative shock within is unlikely to create
signiﬁcant effects in the broader ﬁnancial system, considering
the DeFi TVL. However, if DeFi protocols continue to grow in
popularity, the risk to the global ﬁnancial system, or portions
thereof, will grow proportionally. Therefore, lending platforms
are best described as an emerging risk which regulators may
continue to monitor for future developments.

IV. ANALYSIS METHODOLOGY

A. Scope of analysis

Our goal is to identify the amount of DFC and assess the
build-up of ﬁnancial stability risks across the DeFi ecosystem,
limiting our analysis across the following dimensions: time,
protocols, and currencies.

First, we restrict our analysis to transactions between, and
inclusive of, block 10,000,000 (May 4, 2020 01:22 PM UTC)

and block 11,700,000 (January 21, 2021 04:50 PM UTC).
From the beginning to end of our analysis period, the TVL of
the DeFi ecosystem increased from $0.9B to $21.7B [8].

Second, we choose four protocols to analyze: Aave, Com-
pound, Maker, and Uniswap. Each project has been consis-
tently ranked as one of the largest DeFi protocols in the past 12
months. Maker, Aave, and Compound are (in order) the three
largest DeFi protocols by TVL, as of April 30, 2021. Uniswap
has been the largest decentralized exchange by volume and
TVL, and consequently is involved in many exchanges that
are intended to move funds between lending platforms [8].

Third, we ﬁlter transactions to include only those related to
the currencies Bitcoin (BTC), Ether (ETH), Tether (USDT),
USD Coin (USDC), and Dai (DAI) covering 96% of the
amount borrowed in our selected lending platforms as of Jan-
uary 26, 2021, with protocol-level coverage ranging from 79%
to 100% (see Table II). We also ﬁlter Uniswap transactions to
include only exchanges between these ﬁve currencies.

TABLE II: Borrowing by currency

Currency

Aave

Compound

Maker

WETH
WBTC
USDC
USDT
DAI
Other

Total

64.5
19.0
114.6
110.5
44.2
93.3

446.1

97.3
81.4
874.5
149.3
1,050.8
63.5

0.0
0.0
0.0
0.0
1,571.8
0.0

2,316.7

1,571.8

% coverage

79%

97%

100%

In USD millions (point-in-time) as of Jan. 26, 2021
Values from [21] [22] [23]

B. Heuristic selection

In a transactional dataset, we may calculate the amount debt
created or destroyed by identifying transactions that either
withdraw or repay debt. However, we cannot identify debt
being transferred from one protocol or wallet to another, as
transactions are not speciﬁcally identiﬁed as debt-related or
not. Therefore, we require a heuristic technique to estimate
debt balances for each address. We consider an stylized
scenario (Table III) with three states (S0, S1, S2) and two
transactions (∆1, ∆2). We assume a user holding currencies
α and β, where the exchange rate between the currencies is
1. The user may hold funds in either wallet W or lending
platform P . At initial state S0, the user holds in W 100 non-
debt units of β and 100 debt-ﬁnanced units of α (i.e. the user
has withdrawn 100 α as debt in a separate lending transaction).
In ∆1 the user exchanges 100 α for 100 β. Because the α
balance is a debt balance, we also identify 100 β as a debt
balance. Therefore, at S1, the user holds 200 β, 50% of which
are debt-ﬁnanced units. In ∆2 the user deposits 50 units of β
into P . The user does not speciﬁcally identify what portion
of the deposit, if any, is taken from the debt balance. In order
to identify the debt-ﬁnanced balances as of S2, we consider
three heuristics: proportional, ﬁrst-out, and last-out.

• Proportional method: Debt moves in proportion to the
original debt percentage (50%). Therefore, 25 units of
the deposit are identiﬁed as debt.

• First-out method: Debt-ﬁnanced units are moved ﬁrst. So,

all 50 units of the deposit are identiﬁed as debt.

• Last-out method: Debt-ﬁnanced units are moved last.
Therefore, 0 units of the deposit are identiﬁed as debt.
Both the proportional and last-out methods require a knowl-
edge of the total balance of β before the transaction occurs
and would require gathering the balance of the relevant ERC-
20 token for the calling address after every transaction. These
balances can only be retrieved with access to an archive node,
but their gathering would be resource-prohibitive.

The ﬁrst-out method does not require a knowledge of the
total ERC-20 balance, because the amount of debt moved is
the maximum of the prior debt balance or the amount of the
transaction. A downside of the method is that the calculated
amount of debt involved in each transaction would likely be
higher than the other two methods, because we assume the
debt portion of the wallet balance always move ﬁrst. The
disparity would be most prevalent when the calculated debt
balance is only a small percentage of the actual wallet balance.
Because of the technical limitations involved with using the
proportional or last-out methods, we conclude that the ﬁrst-out
method is the most appropriate heuristic for our analysis.

V. ALGORITHM SPECIFICATION

A. Log ﬁltering

Ethereum Logs L are emitted when a named smart contract
function is called and we analyze only logs created by smart
contracts related to the Aave, Compound, Maker, or Uniswap
protocols. We ﬁrst deﬁne a set of relevant contract addresses
c for each protocol, and a set of function signatures s used
by each relevant contract. Then, we ﬁlter all Ethereum logs to
ﬁnd only the logs associated to contracts in c and generated
by calling functions in s. We deﬁne this set of logs as E.

B. Address grouping

While we could consider each individual address as a
single user, this assumption would not accurately reﬂect user
behavior on Ethereum, for two reasons: ﬁrst, the open nature
of the Ethereum blockchain allows individual users to generate
multiple addresses, and second, protocols often create proxy
contracts for each user interacting with the protocol. As
a result, a single user could control multiple addresses or
proxy contracts. Therefore, an analysis that assumes every
user controls only one address would not accurately capture
user behavior. Identifying users with multiple addresses is
not a straightforward process, as all addresses are inherently
pseudonymous. However, we can rely on the design architec-
ture of the widely used DeFi protocols to perform a partial
grouping of user-controlled addresses.

In the Maker protocol, each user must create a vault in
order to deposit collateral and withdraw debt. A user may open
an unlimited number of vaults, and the vault may be opened
by the user’s original address or by a proxy contract created

TABLE III: Heuristic outcomes

(a) Heuristic 1: Proportional method

(b) Heuristic 2: First-out method

(c) Heuristic 3: Last-out method

Addr. Curr. Type

S0 ∆1

S1 ∆2 S2

Addr. Curr. Type

S0 ∆1

S1 ∆2 S2

Addr. Curr. Type

S0 ∆1

S1 ∆2 S2

W

P

α

β

β

Debt
Non-debt

100 -100
0

0
0

0
0

W

Debt
0
Non-debt 100

+100 100 -25 75
100 -25 75

Debt
Non-debt

0
0

0
0

+25 25
+25 25

P

α

β

β

Debt
Non-debt

100 -100
0

0
0

0
0

W

Debt
0
Non-debt 100

+100 100 -50
100

50
100

Debt
Non-debt

0
0

0
0

+50 50
0

P

α

β

β

Debt
Non-debt

100 -100
0

0
0

Debt
0
Non-debt 100

Debt
Non-debt

0
0

+100 100

100 -50

0
0

+50

0
0

100
50

0
50

S0: Original state —— ∆1: 100 α exchanged for 100 β —— ∆2: 50 β deposited in Compound

Fig. 2: Address grouping and ﬁltering

Input: Set of addresses D, A, H
Output: List of addresses Gae

Ga, Gae ← ()
Gs ← {}
for d ∈ D do

if d ∩ Gs = ∅ then Append d to Ga as new group
else Add d1, d2, d3 to matching group in Ga
d ∪ Gs
for a ∈ A do

if a ∩ Gs = ∅ then Append a to Ga as new group
else Add a to matching group in Ga
a ∪ Gs
for g ∈ Ga do

protocols in ← (cid:80)

y =

s∈Aset

(cid:40)
1
0

if g ⊂ s
else

if protocols in > 1 then Append g to Gae

for each pair (r1, r2) ∈ H do
for each group g ∈ Gae do

if r1 ∩ g (cid:54)= ∅ and r2 ∩ g = ∅ then g ∪ r2
else if r1 ∩ g (cid:54)= ∅ and r2 ∩ gnext (cid:54)= ∅ then

merge(g, gnext)

(cid:46) gnext ∈ Gae

speciﬁcally for the individual user. If Address A creates Vault
1, Contract B creates Vault 2, and Address A created Contract
B, then a single user must control both Vault 1 and Vault 2.
All collateral and debt transactions from these vaults can be
grouped together, and all transactions in other protocols by
Address A and Contract B can also be grouped together.

This grouping logic could not be extended to the Aave
and Compound lending platforms, as these protocols do not
use a vault mechanism for borrowing. However, the thorough
examination of smart contracts and their logs, allows us to
infer heuristics based on the activity of users, which provides
insights on users with multiple addresses.

In the Aave protocol’s smart contracts, the function repay2
allows users to repay a borrowed asset either partially or fully,
for themselves or on behalf of a different user. The later
indicates the same user repaying his/her own loan using funds
from a different owned account. In the Uniswap protocol,

2https://docs.aave.com/developers/v/1.0/developing-on-aave/the-protocol/

the event Swap3 allows us to identify cases where the sender
and the destination addresses of token swaps is not the same,
indicating a single user with two different EOA addresses. In
the Compound’s smart contracts, the function repayBorrow-
Behalf 4 allows a sender to repay a borrow belonging to a
borrower and in a similar direction we assume that the same
user repays a borrow belonging to this single entity. These
three deﬁned heuristics return pairs of addresses, denoted as
H in the last part of our grouping algorithm.

We deﬁne our grouping algorithm as follows: A is the set
of as all addresses initiating the transactions in E. While the
address of the smart contract being called is stored in the
log address ﬁeld La, the address that initiates the call may
be stored as one of the topics in Lt or in the data ﬁeld
Ld, depending on the speciﬁcations of the contract function.
Therefore, we search for the address in either Lt or Ld. We
notate this function-speciﬁc location as Lx.

We deﬁne D as a set of all Maker vaults, with each item d
being a set {d1, d2, d3} containing the user address, the proxy
address, and the urn handler address. Using the set of Maker
vault addresses D, and the set of all addresses A, we then
apply the algorithm shown in Algorithm 2. From Algorithm
2, we obtain a list of all addresses Ga, with related addresses
grouped together (“address groups”). We then ﬁlter Ga to
contain only eligible address groups in which the associated
addresses interact with two or more protocols (Gae). We then
identify more addresses from H, which belong to entities of
eligible address groups and merge groups if one address is
found in more than one groups.

C. Transaction classiﬁcation

We then consider logs E, grouped by every g in Gae. We
utilize Algorithm 3, which iterates through every transaction
related to g. The algorithm calculates debt and non-debt
balances for each address group, both point-in-time and cumu-
latively after every transaction. The purpose of the algorithm
is to track debt balances across protocols, allowing for a
quantiﬁcation of debt withdrawn from one lending platform
and deposited as collateral in another lending platform.

The classiﬁcation of debt and non-debt balances are calcu-
lated according to the ﬁrst-out heuristic previously described.

3https://docs.uniswap.org/protocol/V2/reference/smart-contracts/pair
4https://github.com/compound-ﬁnance/compound-protocol

Fig. 3: Transaction classiﬁcation

Input: List of addresses Gae, set of logs E
Output: Sum of debt ﬂows into each lending pool

for g ∈ Gae do

Eg ← {L ∈ E | Lx ⊂ g}
for e ∈ Eg do

if e.trxType = Debt Create/Repay then
walletDebt[e.currency] += e.amount

else if e.trxType=Col. Deposit/Withdraw then

debtAmt = min(e.amount, debt[e.currency])
walletDebt[e.currency] -= debtAmt
platformDebt[e.currency] += debtAmt
if e.trxType is Collateral Deposit then

sumDebtFlows += debtAmt

else if e.trxType = Swap then

debtPct = min(1, debt[e.curr1] / e.sentAmt)
walletDebt[e.curr1] -= e.sentAmt * debtPct
walletDebt[e.curr2] += e.recvdAmt * debtPct

All debt creation or repayment
transactions are added to
the address group’s debt balance, which is disaggregated by
currency. When swaps are performed, the percentage of debt
in the currency being sent is used to calculate the debt added to
the balance of the receiving currency. Collateral deposits and
withdrawals are also recorded as debt based on the percentage
of debt contained in the group’s wallet at that point in time.
For collateral deposits, which are the focal point of our
analysis, we speciﬁcally track and aggregate the amount of
debt involved in each transaction, for use in our ﬁnal analysis.

VI. DATA ANALYSIS

A. Data collection

All analysis was performed on an Ubuntu 20.04 vir-
tual machine, and all records were stored in a MariaDB
SQL database. Python, NodeJS, and R scripts were used
for data retrieval and analysis. For initial experiments, we
ﬁltered for
the relevant data from the table ‘bigquery-
public-data.˙crypto ethereum.logs’ of Google BigQuery’s pub-
lic Ethereum dataset, before setting up an Ethereum full
Archive node (8-core Intel i7-11700 CPU, 4.8GHz, 32GB
RAM, 10TB SSD). We collected transactions occurring be-
tween block 10,000,000 to 11,700,000, for protocols Aave,
Compound, Maker, and Uniswap. Each protocol has upgraded
the initial versions of their smart contracts, and in some cases
multiple versions of the protocol may exist at one time. So, we
collected data from the set of smart contracts associated to the
protocol version with the most funds as of January 21, 2021.
We took into consideration addresses belonging to exchanges
in order to improve the effectiveness of our methods, using
a public Kaggle dataset5 containing almost 20,000 labeled
addresses and a similar list of labeled addresses [5]. We
ﬁltered the dataset to include transactions that met the fol-
lowing criteria: i) Involving BTC, ETH, USDT, USDC, DAI;

5https://www.kaggle.com/datasets/hamishhall/labelled-ethereum-addressesl

ii) Collateral deposit/withdrawal, or debt creation/repayment
(Aave, Compound, Maker); iii) Currency swaps (Uniswap).

We did not include liquidation transactions in our analysis,
as we concluded that these transactions would not materially
affect our analysis results. We also obtained pricing data for
each of the ﬁve currencies analyzed: hourly pricing data for
BTC, ETH, USDC, and DAI [24], and daily pricing data for
USDT [25]. A summary of our dataset is shown in Table IV.

TABLE IV: Summary of dataset

Statistic

Aave

Compound Maker

Uniswap

Counts

Unique addresses
Transactions

22,645
211,552

293,929
758,638

10,157
171,362

210,214
4,110,761

USD Totals

Collateral deposited
Collateral withdrawn
Debt created
Debt repaid
Currency swapped

13,749
13,345
3,252
2,982
0

43,429
40,138
17,934
15,755
0

8,728
8,152
4,512
3,351
0

0
0
0
0
26,653

USD values in millions, all values cumulative from period analyzed

The majority of funds are channeled through the Compound
protocol (collateral deposits and borrowing originations). The
most common collateral deposited is WETH and the most
common borrowed currency is DAI. Volume increased sig-
niﬁcantly across all protocols at the beginning of 2021.

B. Algorithm results

We applied Algorithm 2 to obtain address groupings, and
Algorithm 3 to quantify the amount of debt created and
used in the DeFi ecosystem. Our results are set out in Table
V, and Figure 4 shows additional detail by protocol. Our
address grouping algorithm yielded 28,599 address groups that
interacted with at least two protocols. These groups contained
47,944 unique addresses. The largest address group contained
97 addresses; however, only 0.12% of groups (n = 33) had
10 or more addresses, and 45.1% of groups (n = 12, 886) had
only one address.

We implemented and executed the self-authorization heuris-
tic proposed in [5] for Ethereum address clustering. ERC-
20 token standard requires an approve function to allow
another address to spend tokens on behalf of the actual owner.
Upon successful function call, the event Approval is emitted,
which contains the owner, spender and permitted amount. This
functionality is exploited under the assumption that there are
users that approve another address they own because of test
purposes or risk distribution over several addresses with partial
accessibility.

While this technique focuses on user activity only on
Ethereum ERC-20 tokens exchange (not including DeFi pro-
tocols) and our algorithm focuses on interactions into DeFi
protocols, the fact that 18 pairs of addresses belonging to same
users were identiﬁed by both methods strengthens the validity
of the approaches and showcases that clustering methods
focusing on different Ethereum activities exhibit common

results. As a future work ,we will compare the results with
additional Ethereum heuristics such as [5]–[7].

TABLE V: Summary of algorithm results

Collateral deposited

Month

Debt

Non-debt

Total

Debt %

May 2020
June 2020
July 2020
August 2020
September 2020
October 2020
November 2020
December 2020
January 2021

3
86
2,183
1,001
728
589
1,277
1,187
3,786

243
2,326
5,031
4,511
5,987
4,706
7,778
8,956
15,527

246
2,412
7,214
5,511
6,716
5,295
9,054
10,143
19,314

1.2
3.6
30.3
18.2
10.9
11.1
14.1
11.7
19.6

All collateral values are monthly totals in USD millions

We observe that

the percentage of DFC ﬂuctuates sig-
niﬁcantly over the analysis period, from a low of 1% in
May 2020 to a high of 30% in May 2020. From August
2020 through January 2021, the percentage of debt-ﬁnancing
ﬂuctuated between 10 and 20% of all collateral deposits in
the ﬁve currencies. The protocol holding the largest amount
of DFC is Compound. Although Maker vaults are used to
create DAI, the Maker protocol itself does not hold signiﬁcant
percentages of DFC.

For the majority of our analysis period, the currency most
often deposited as DFC was DAI. However, beginning in late-
2020, USDC became a signiﬁcant source of DFC. WETH,
USDT, and WBTC are not used in signiﬁcant amounts as DFC.

Fig. 4: Percentage of debt-ﬁnanced collateral by protocol

C. Correlation analysis

We further analyze the correlation of the percentage of DFC
to two variables: the changes in collateral deposited and in
Ethereum price. If changes in DFC were correlated with a
change in collateral deposited, this would suggest the presence
of a feedback loop, in which increased collateral deposits
lead to more DFC, which further increases collateral deposits,
which leads to more DFC, and so on. The correlation of DFC
with a change in Ethereum price would suggest that it is

linked to speculation on the Ethereum price since it enables
more borrowing. In our results (Table VI), we observed a
statistically signiﬁcant correlation between an Ethereum price
change in Day 1 and the percentage of DFC deposited in Day
2 (p = 0.013). That is, an increase in price was positively
correlated with an increase in DFC the following day.

TABLE VI: Variable correlation

Variable 1

Variable 2

Collateral change
Collateral change
Price change
Price change

Debt percentage (next hour)
Debt percentage (next day)
Debt percentage (next hour)
Debt percentage (next day)

R

-0.004
0.024
0.016
0.154**

*p < 0.1; **p < 0.05; ***p < 0.01
R = Pearson correlation coefﬁcient

Beyond observation of its existence, the relationship is not
strong enough to draw deﬁnitive conclusions, particularly in
regards to a casual relationship. An analysis with multiple
independent variables would be required to isolate the effect
price changes have on the prevalence of DFC.

D. Interpretation of results

1) Leverage effects on stablecoins and protocols: From our
algorithm results, we conclude that the use of DFC is preva-
lent within the DeFi ecosystem, particularly with stablecoin
collateral. In [26], the risk of a “deleveraging spiral” breaking
a stablecoin peg has already been noted. This risk is further
sharpened based on the results of this paper, where it is clear
that stablecoins are being used to create multiple layers of debt
ﬁnancing across protocols.

DFC creates a high level of interconnectedness across
lending platforms. This interconnectedness suggests that if one
protocol suffers an operational shutdown or a run on deposits,
the issue could quickly affect multiple DeFi protocols, which
are linked through the use of DFC. In addition, it decreases
the transparency of funding sources, as it is unclear whether
collateral is fully owned by the depositor, or if it is actually
debt owed to another protocol.

A salient step in future research may be the incorporation of
DFC and its effects into a ﬁnancial contagion model. Previous
DeFi models ( [26]), or models in the ﬁeld of traditional
banking networks ( [27], [28]), may be extended to predict
how DFC affects the stability of the DeFi ecosystem overall.
2) Analogies to traditional ﬁnance: DFC can be considered
be one form of “yield farming,” which is the process of moving
currencies amongst protocols in the DeFi ecosystem, in order
to capture the highest-yield investments [29]. Using DFC
allows individuals to arbitrage interest rates across protocols,
as well as to proﬁt from expected price increases.

The use of DFC, and the phenomenon of yield farming
more generally, has few corollaries to the traditional ﬁnancial
system, likely because interest rate differentials are not as easy
to exploit as compared to DeFi. In academic research, previous
ﬁnancial
literature has focused on the reuse of collateral,
either through rehypothecation or securitization [12], [30].

0%25%50%75%100%Jul 2020Oct 2020Jan 2021TimeDebt % of collateralProtocolAaveCompoundMakerHowever, the use of debt as collateral has not been prevalent in
traditional ﬁnance; therefore, the topic has been little explored
in the literature.

One corollary to DFC may be the “debt recycling” process
performed in Australia. Under Australian regulations, interest
on loans used to make investments are tax-deductible, while
mortgage interest is not. As a result, a common strategy is
to draw on a home-equity line of credit, use the debt as
collateral for an investment
the funds in
an income-producing asset [31]. This cycle is similar to the
process of creating DFC in DeFi. In the Australian regulatory
environment, debt is recycled to take advantage of favorable
tax rates; in the DeFi ecosystem, debt may be used to proﬁt
from diverging interest rates or expected price increases.

loan, and invest

While debt recycling can be a cumbersome process to
execute through a banking network, DFC is easier to accom-
plish through DeFi protocols because of the near-instantaneous
settlement of transactions on the blockchain. If DeFi protocols
continue to scale in popularity and usage, the open nature
of DeFi may hold promise for other ﬁnancial innovations to
come.

VII. CONCLUSION

In this paper, we ﬁrst placed the activities of DeFi lending
platforms into the FSB’s NBFI regulatory framework. We con-
cluded that lending platforms engaged in leverage creation and
maturity transformation, and we classiﬁed lending platforms
under the FSB’s economic function “Loan provision that is
dependent on short-term funding.”

We then attempted to show the extent to which leverage
from lending platforms has been used to create DFC. This
use of DFC heightens the risk that negative price shocks will
quickly spread through a chain of debt-backed lending posi-
tions, potentially feeding into a negative price spiral. We found
that in some periods, 10-20% of collateral deposits across ﬁve
major currencies were debt-ﬁnanced, and that USDC and DAI
stablecoins were the currencies most commonly used as DFC,
particularly in the Compound protocol. Based on these, market
participants should be aware of the risk of adverse price shocks
rapidly affecting the DeFi ecosystem.

Our quantitative insights were enabled by the use of a novel
algorithm that grouped Ethereum accounts into user groups,
and then classiﬁed debt balances across these user groups. Our
analysis could be extended and improved through future work
in two primary ways:

1) Our “ﬁrst-out” heuristic was chosen with time and
technical limitations in mind. Additional analyses could
undertake the resource-intensive task of estimating user
balances at every point in time, giving a more accurate
picture of user balances during a given period.

2) Our account grouping algorithm relied on connecting ac-
counts through four major DeFi applications. Additional
grouping techniques could track activities across other
DeFi protocols.

Finally, we observe that the volume of capital ﬂows into
DeFi protocols is relatively small compared to the volume of

ﬂows into the broader universe of non-ﬁnancial intermediaries.
However, the popularity of DeFi has risen rapidly, and ﬁnan-
cial regulators would be well-served by monitoring this new
form of credit intermediation more closely.

REFERENCES

[1] M. Kruppa and H. Murphy.

(2019, December)

‘DeFi’ movement

promises high interest but high risk. Financial Times.

[2] S. Coelho-Prabhu, “A Beginner’s Guide to Decentralized Finance

(DeFi),” January 2020.

[3] Basel Committee on Banking Supervision, “Sound Practices: Implica-
tions of ﬁntech developments for banks and bank supervisors,” Bank for
International Settlements, Policy Documents, February 2018.

[4] L. Gudgeon et al., “The Decentralized Financial Crisis: Attacking DeFi,”

in Crypto Valley Conference.

IEEE, 2020, pp. 1–15.

[5] F. Victor, “Address clustering heuristics for ethereum,” in International
conference on ﬁnancial cryptography and data security. Springer, 2020.
[6] M. Wu and others”, “Tutela: An open-source tool for assessing user-

privacy on ethereum and tornado cash,” 2022.

[7] F. B´eres et al., “Blockchain is watching you: Proﬁling and deanonymiz-
ing ethereum users,” in 2021 IEEE Int. DAPPS Conference, pp. 69–78.
[8] DeFiPulse, “DeFi - The Decentralized Finance Leaderboard at DeFi

Pulse,” 2021. [Online]. Available: https://deﬁpulse.com

[9] T. Geron. (2019, June) Why Stablecoins Stand Out in the Cryptocurrency

World. Wall Street Journal.

[10] N. Reiff, “What Is ERC-20 and What Does It Mean for Ethereum?”

September 2020.

[11] FSB Staff, “Global Monitoring Report on Non-Bank Financial Interme-
diation 2020,” Financial Stability Board, Policy Documents, Dec. 2020.
[12] Z. Pozsar, T. Adrian, A. Ashcraft, and H. Boesky, “Shadow Banking,”
Economic Policy Review, vol. 19, no. 2, pp. 1–16, December 2013.
[13] FSB-Staff, “Crypto-assets: Work underway, regulatory approaches and
potential gaps,” Financial Stability Board, Policy Documents, May 2019.
[14] FSB Staff, “Decentralised ﬁnancial technologies: Report on ﬁnancial
stability, regulatory and governance implications,” Financial Stability
Board, Policy Documents, June 2019.

[15] FSB-Staff, “Regulation, Supervision and Oversight of “Global Sta-
blecoin” Arrangements,” Financial Stability Board, Policy Documents,
October 2020.

[16] FSB Staff, “Strengthening Oversight and Regulation of Shadow Bank-
ing: Policy Framework for Strengthening Oversight and Regulation of
Shadow Banking Entities,” FSB, Policy Documents, August 2013.
[17] M. Halling et al., “Leverage dynamics over the business cycle,” Journal
of Financial Economics, vol. 122, no. 1, pp. 21–41, October 2016.
[18] D. Layton, “Demystifying GSE Credit Risk Transfer: Part I – What
Problems Are We Trying to Solve?” Joint Center for Housing Studies,
Harvard University, Industry Perspectives, January 2020.

[19] J. Geanakoplos, “Leverage caused the 2007-2009 crisis,” in Systemic
Risk in the Financial Sector: Ten Years After the Great Crash, Waterloo,
ON, 2019, ch. 14, pp. 235–262.

[20] G. Gorton, “The Panic of 2007,” in Jackson Hole Conference.

Jackson
Hole, WY: Federal Reserve Bank of Kansas City, 2008, pp. 131–262.
[Online].

[21] Aave, “Aave - Open Source Liquidity Protocol,” 2021.

Available: https://app-v1.aave.com/home

[22] Compound Labs, “Compound — Markets,” 2021. [Online]. Available:

https://compound.ﬁnance/markets

[23] DaiStats.com, “Dai Stats,” 2021. [Online]. Available: https://daistats.com
[24] Coinbase, “Coinbase Pro — API Reference,” 2021. [Online]. Available:

https://docs.pro.coinbase.com/

[25] Nasdaq, “Tether (USDT) Historical Prices — Nasdaq,” 2021.
[26] A. Klages-Mundt and A. Minca, “(in)stability for the blockchain:

Deleveraging spirals and stablecoin attacks,” June 2019.

[27] R. Greenwood, A. Landier, and D. Thesmar, “Vulnerable Banks,”

Journal of Financial Economics, vol. 115, pp. 471–485, March 2015.

[28] P. Glasserman and H. P. Young, “Contagion in Financial Networks,”
Journal of Economic Literature, vol. 54, pp. 779–831, September 2016.
[29] E. Dedezade, D. Phillips, and M. D. Salvo, “What is Yield Farming?

Beginner’s Guide,” November 2020.

[30] B. Holmstrom et al., “Understanding the role of debt in the ﬁnancial
system,” Bank for International Settlements, Working Papers 479, 2015.

[31] AMP, “What is debt recycling?” 2021.

