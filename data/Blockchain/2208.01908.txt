Mass Exit Attacks on the Lightning Network

Cosimo Sguanci
csguan2@uic.edu
University of Illinois at Chicago
Chicago, Illinois, USA

Anastasios Sidiropoulos
sidiropo@uic.edu
University of Illinois at Chicago
Chicago, Illinois, USA

2
2
0
2

g
u
A
4

]

R
C
.
s
c
[

2
v
8
0
9
1
0
.
8
0
2
2
:
v
i
X
r
a

ABSTRACT
The Lightning Network (LN) has enjoyed rapid growth over recent
years, and has become the most popular scaling solution for the
Bitcoin blockchain. The network consists of payment channels that
hold different amounts of BTC in their capacity. The security of
the LN hinges on the ability of the nodes to close a channel by
settling their balances, which requires confirming a transaction
on the Bitcoin blockchain within a pre-agreed time period. This
inherent timing restriction that the LN must satisfy, make it suscep-
tible to attacks that seek to increase the congestion on the Bitcoin
blockchain, thus preventing correct protocol execution.

We study the susceptibility of the LN to mass exit attacks, in the
presence of a small coalition of adversarial nodes. This is a scenario
where an adversary forces a large set of honest protocol participants
to interact with the blockchain. We focus on two types of attacks:
(i) The first is a zombie attack, where a set of 𝑘 nodes become
unresponsive with the goal to lock the funds of many channels
for a period of time longer than what the LN protocol dictates. (ii)
The second is a mass double-spend attack, where a set of 𝑘 nodes
attempt to steal funds by submitting many closing transactions
that settle channels using expired protocol states; this causes many
honest nodes to have to quickly respond by submitting invalidating
transactions.

We show via simulations that, under historically-plausible con-
gestion conditions, with mild statistical assumptions on channel
balances, both of the attacks can be performed by a very small
coalition. For example, a coalition of just 30 nodes could lock the
funds of 31% of the channels for about 2 months via a zombie attack,
and could steal more than 750 BTC via a mass double-spend attack,
if the watchtowers algorithms do not make use of sophisticated
strategies.

To perform our simulations, we formulate the problem of finding
a worst-case coalition of 𝑘 adversarial nodes as a graph cut problem.
Our experimental findings are supported by a theoretical justifi-
cation based on the scale-free topology of the LN. We emphasize
that the proposed attacks should not be considered as an issue of
the protocol design, but rather as an inherent issue of payment
channels network without general computability on layer-1.

CCS CONCEPTS
• Security and privacy → Distributed systems security.

KEYWORDS
Blockchains, Bitcoin, Lightning Network, Layer 2, Blockchain Scal-
ability

1 INTRODUCTION
The Lightning Network (LN) [17] is emerging at the most popular
layer-2 scaling technology for Bitcoin. We model the LN by a graph
𝐺; every vertex can be assumed to be a user and every edge is a
bi-directional payment channel between two nodes1.

The LN is implemented via a cryptographic protocol executed by
the nodes. Effectively, pairs of nodes implement a payment channel
that allows them to exchange promises to pay a certain amount to
each other. These promises are valid, as long as they are redeemable
on layer-1, i.e. the Bitcoin blockchain. The LN is permissionless, that
is, any user can join the protocol pseudonymously. Therefore, users
can have arbitrarily adversarial behavior, so the LN must be able to
handle byzantine failures. This implies that each node in a channel
𝑒 ∈ 𝐸 (𝐺) must be able to unilaterally close 𝑒 by performing layer-
1 transactions. However, in order to prevent double-spend, the
protocol must prohibit a node from closing a channel using a layer-
1 transaction from an earlier state of the channel. This implies that
each closing transaction, 𝑒 ∈ 𝐸 (𝐺), must come with a delay, 𝐷𝑒 ,
measured in block height, that is chosen during the creation of the
channel 𝑒 by the two participating nodes. Specifically, suppose that
a node, 𝑢, broadcasts its intention to unilaterally close a channel,
𝑒 = {𝑢, 𝑣 }, by confirming on the blockchain a transaction, 𝜏, that
corresponds to an old state of 𝑒. Then, the node 𝑣 can get all the
funds in the channel by confirming a transaction, 𝜏 ′, that effectively
proves that 𝜏 has expired, within a time window of 𝐷𝑒 blocks since
the confirmation of 𝜏.

1.1 The attacks
The above inherent timing limitations of the LN protocol renders
it susceptible to attacks that try to force a mass-exit event that
violates the delay bounds of many edges, thus forcing a deviation
from the intended protocol behaviour.

We study the following two attacks of this type, that are per-
formed by an adversary that controls a small coalition of 𝑘 nodes:
(1) Zombie attack: The adversary controls a set of 𝑘 nodes,
𝑍 ⊆ 𝑉 (𝐺), that hold exactly one side of many channels; that
is, 𝐸 ′ = 𝐸 (𝐺) ∩ (𝑍 × (𝑉 (𝐺) \ 𝑍 )). The adversary renders
all channel in 𝐸 ′ unresponsive, simply by not participating
in the protocol. This can be implemented either when 𝑍 is
a coalition of adversarial nodes, or when an eclipse-type
attack (see, e.g. [10, 13]) is performed on all nodes in 𝑍 . This
forces many honest nodes to submit layer-1 channel closing
transactions. We show experimentally that under realistic
layer-1 congestion conditions the zombie attack can cause a
significant amount of funds to be locked for a large window
of time. This deviates from the protocol which attempts to

1We omit private channels and focus on publicly known ones that are broadcasted in
the peer-2-peer (p2p) layer of the LN.

 
 
 
 
 
 
impose a much smaller delay, 𝐷, for closing a channel. This
attack is similar to the griefing attack: the user is forced to
broadcast a transaction on Bitcoin Layer 1 to unilaterally
close the channel, and potentially pay a high fee due to the
congestion generated by the attack. This is an attack that
does not aim at stealing funds, but rather to “vandalize” both
layer-2 (unusable channels) and layer-1 (congestion). The
attack also causes an implicit monetary cost due to the loss
of income from serving LN payments during the period the
funds are locked.
(2) Mass double-spend attack: The adversary again con-
trols 𝑍 as in the zombie attack (in contrast to the zombie
attack, for a mass double-spend attack it is not enough to
simply eclipse 𝑍 ). The adversary attempts to perform multi-
ple double-spends by submitting closing transactions for all
channels in 𝐸 ′ that correspond to earlier states of the proto-
col. The honest nodes that monitor the blockchain respond
by submitting disputing transactions on the blockchain, as
soon as any offending transaction is confirmed. The adver-
sary succeeds in stealing the funds when an honest disput-
ing transaction fails to get confirmed on the blockchain be-
fore the delay 𝐷 has passed. We experimentally show that,
under realistic congestion conditions, if the watchtowers
algorithms monitoring the blockchain are not configured
correctly, the adversary can succeed in stealing significant
amounts of funds.

1.2 Our main results
Informally, our main findings can be summarized as follows.

• Susceptibility to vandalism by a small coalition: We
demonstrate experimentally that the zombie attack can be
used to lock a significant amount of funds for long periods
of time. Our simulations are performed under historically-
plausible congestion conditions. The attack succeeds in forc-
ing the funds of honest protocol participants to be locked
for a duration that is much longer than the intended up-
per bound. A detailed exposition of our findings is given in
Section 4.

• Incentive-incompatibility in the presence of a small
coalition: We demonstrate experimentally that, assuming
an adversarial coalition of 𝑘 = 30 nodes, and under a plau-
sible model for the expected profit of the adversary, the
LN is not incentive compatible. Our simulations are per-
formed on a current LN topology, under historically-realistic
congestion conditions, and assuming a realistic watchtower
algorithm. Our mathematical modeling makes mild statisti-
cal assumptions on channel balances. The full details of our
mathematical modeling are given in Section 2, and our exper-
imental findings are presented in Section 5. We demonstrate
experimentally that with the current LN topology, under
historically-realistic congestion conditions, using a realistic
watchtower algorithm, under mild statistical assumptions
on channel balances, and assuming a coalition of at most
𝑘 = 30 nodes, the LN protocol is not incentive-compatible.
In fact, under reasonable model parameters, the adversarial
coalition has a strategy for stealing funds from the honest

protocol participants, with an expected profit of more than
750 BTC. In this case, clearly there is a simplification since
we are considering that the coalition of attackers has nothing
to lose from the attack, or at least that the business of the
attackers has a volume that is less than the expected profit of
the attack. Nonetheless, we believe that the trustless nature
of the network is questioned by the possibility to perform
these attacks. We emphasize that our results doe not imply
that any 𝑘-coalition can perform this strategy, but rather
that such a 𝑘-coalition exists and can be computed efficiently
in practice.

1.3 Theoretical justification
Our experimental findings outlined above suggest that the LN is
potentially susceptible to mass exit attacks by a small coalition
of adversarial nodes. This phenomenon can be explained by the
topological properties of the graph 𝐺 of the 𝐿𝑁 . In particular, it has
been recently observed that 𝐺 is scale-free, and follows a power-law
degree distribution [14]. This is to be expected due to the complex
social dynamics that lead to the formation of 𝐺. It has been shown
in [7] that in power-law degree graphs, by splitting the nodes into
sets of high and low degree, 𝑉 (𝐺) = 𝑉high ∪ 𝑉low, we obtain a
nearly-optimal max-cut. In fact, this is true even for very small sets
𝑉high (depending on the power-law exponent; see [14] for precise
bounds). As we explain in Section 2, for our attacks this implies
that if the adversary controls 𝑍 = 𝑉high, then both attacks can be
performed effectively by targeting all the channels between 𝑉high
and 𝑉low.

The above observation implies that the effects of the attacks
that we study should be expected to get worse for large sizes of
the LN, in the following sense: the worst-case 𝑘-coalition, for the
same size, 𝑘, can cause more damage in a larger network (either
by causing higher total delay in closing channels, or in total funds
stolen, depending on the attack).

1.4 Organization
The rest of the paper is organized as follows. In Section 2 we show
how both the zombie and the mass double-spend attacks can be mod-
eled mathematically so that the problem of selecting a 𝑘-coalition
of adversarial nodes that maximizes the efficiency of the attack, can
be expressed as a variant of the Max-Cut problem. We also present
a simple greedy heuristic for solving this problem. In Section 3 we
discuss the main statistical assumptions for our simulations. Section
4 presents our experimental results on the zombie attack. Section 5
presents our experimental results on the mass double-spend attack.
In Section 6 we discuss possible measures for mitigating the attacks.
Section 7 reviews related work. We conclude in Section 8.

2 SELECTING AN ADVERSARIAL COALITION

AS A GRAPH CUT PROBLEM

We now describe our methodology for choosing an adversarial 𝑘-
coalition, i.e. a coalition of 𝑘 nodes. To that end, we first formulate an
auxiliary graph-cut combinatorial optimization problem. We then
explain how this problem can be used to compute near-optimal
coalitions.

2

2.1 The graph cut problem
In a graph, 𝐺, a 𝑘-lopsided cut is a bipartition, (𝑍, 𝑉 (𝐺) \ 𝑍 ), of
𝑉 (𝐺), with |𝑍 | = 𝑘. The 𝑘-Lopsided Max-Cut problem (𝑘-LMC) is
defined as follows. The input consists of a graph 𝐺 and some 𝑘 ∈ N,
and the goal is to find a 𝑘-lopsided cut, (𝑍, 𝑉 (𝐺) \ 𝑍 ), maximizing
the number of edges in the cut, i.e. |𝐸 (𝑍, 𝑉 (𝐺) \ 𝑍 )|. Similarly, in
the 𝑘-Lopsided Weighted Max-Cut problem (𝑘-LWMC), the input
consist of a graph, 𝐺, with non-negative edge capacities, and some
𝑘 ∈ N, and the goal is to find a cut maximizing the total capacity of
the edges in the cut, i.e. (cid:205)𝑒 ∈𝐸 (𝑍,𝑉 (𝐺)\𝑍 ) 𝑐 (𝑒), where 𝑐 (𝑒) denotes
the capacity of 𝑒.

2.2 From graph cuts to mass exit attacks
From 𝑘-LMC to zombie attacks. The problem of computing a
2.2.1
worst-possible 𝑘-coalition 𝑍 ⊆ 𝑉 (𝐺) of adversarial nodes to per-
form the zombie attack is precisely the problem of computing a
𝑘-LMC in 𝐺. This is because any edge can be attacked precisely
when exactly one of its endpoints is in the adversarial coalition
(an adversary cannot attack itself, and an honest node cannot at-
tack another honest node). Moreover, the effectiveness of a zombie
attack is maximized when the average delay to close a channel is
maximized. This occurs when the number of channels under attack,
i.e. the number of edges in the cut, is maximized.

From 𝑘-LWMC to mass double-spend attacks. We now argue
2.2.2
that, under mild assumptions, the problem of computing a worst-
possible 𝑘-coalition of adversarial nodes to perform the mass double-
spend attack, can be reduced to the problem of solving 𝑘-LWMC
on 𝐺. For any channel 𝑒 = {𝑢, 𝑣 } ∈ 𝐸 (𝐺) under attack, fix an ori-
entation (𝑢, 𝑣) such that 𝑢 ∈ 𝑍 , and 𝑣 ∉ 𝑍 ; let 𝑏𝑡 (𝑒) ∈ [−𝑐 (𝑒), 𝑐 (𝑒)]
denote the balance of channel at time 𝑡; in particular, 𝑏𝑡 (𝑒) = 𝛼
when at time 𝑡 node 𝑢 owns 𝛼 of the capacity of 𝑒 and 𝑣 owns
𝑐 (𝑒) − 𝛼.

The quantity 𝑏𝑡 (𝑒) as a function of 𝑡 is difficult to model and to
predict during the attack. This is a challenge for our modeling be-
cause the amount of funds that the attacker can steal from a channel
depends on the current balance. We avoid the issue of estimating
𝑏𝑡 (𝑒) by introducing a mild technical assumption. Suppose that the
adversary participates honestly in the protocol for some amount
of time before the attack begins. Let 𝑒 be some channel where the
adversary controls exactly one of its endpoints. Assuming that
funds in the LN are allocated efficiently, it follows that in any long
enough window of time, we expect to observe times 𝑡 and 𝑡 ′ where
𝑏𝑡 (𝑒) ≥ 𝑐 (𝑒) − 𝜀, and 𝑏𝑡 ′ (𝑒) ≤ −𝑐 (𝑒) + 𝜀, for any 𝜀 > 0. This is
because, otherwise, we could remove some of the capacity in 𝑒 and
still be able to route the same set of LN transactions, which would
violate capital efficiency. Before the attack begins, the adversary
participates in the protocol honestly. During this period, for all of
its channels, the adversary collects closing transactions that give
almost all the funds to the adversary.

When the attack begins at time 𝑡, the adversary stops partici-
pating in the LN protocol. Thus, the balances of all channels under
attack remain fixed throughout the duration of the attack. By the
above discussion, it follows that if the adversary succeeds in steal-
ing the funds from a channel, 𝑒, then the adversary profits a total
of at least 𝑐 (𝑒) − 𝑏𝑡 (𝑒) − 𝑐 (𝑒)/2 − 𝜀 = 𝑐 (𝑒)/2 − 𝑏𝑡 (𝑒) − 𝜀, where the
−𝑐 (𝑒)/2 term accounts for the cost of creating the channel. On the

3

other hand, the adversary fails to steal the funds of channel 𝑒 pre-
cisely when an honest node manages to get the justice transaction
confirmed before the expiration; when this happens, the adversary
gets penalized by losing all the funds in the channel, thus the ad-
versary gains −𝑐 (𝑒)/2, due to the cost of creating the channel. In
practice, we first assume that attacked channels are equally funded
by both parties. We believe that this can be considered a reasonable
assumption, since dual funding has been implemented by one of
the major LN client implementations [2].

Unfortunately, the balances of the channels are not publicly
known. There has been some work on estimating balances [5, 20],
but it is not clear how to model them accurately. In addition, since
we cannot probe channel balances because we make use of histor-
ical data in our simulations. Moreover, it is possible for the two
participating nodes to contribute different amounts of capacity dur-
ing channel creating. For these reasons, we make the following
simplifying assumption:

Assumption 1: For any channel 𝑒, conditioned on the ad-
versary successfully stealing the funds from 𝑒, the expected
profit of the adversary is at least 𝑐 (𝑒)/2.

In particular, Assumption 1 holds if we assume that at the time
of channel creation 𝑡0, we have 𝑏𝑡0 (𝑒) = 0, and that for the time
that attack happens, 𝑡, we have E[𝑏𝑡 (𝑒) = 0], and setting 𝜀 = 0.

To support Assumption 1, we performed a brief analysis of the
nodes in 30-LWMC: they are well-connected nodes (in terms of
number of open channels), and most of them seem to be sellers of
inbound liquidity, routing nodes, exchanges, and wallet providers.
This empirically supports the validity of Assumption 1: if a lot of
the nodes in the attacker coalition, for example, sell liquidity, this
means that they open channels with their customers, and then the
customers use these channels in order to get paid to sell goods or
services. Therefore, the coalition of attackers would have a favorable
commitment (i.e., the first one), since they opened the channel
providing the liquidity, but it is expected that, over time, these
channels will be used in order to acquire services, so the balance of
the channels will eventually go to the victim node.

The total profit of the adversary depends on the probability of
stealing the funds of any channel 𝑒. To that end, it is reasonable to
assume that all honest nodes use the same strategy. Therefore, by
symmetry, we arrive at the following assumption:

Assumption 2: There exists some 𝑝 > 0 such that for all
𝑒 ∈ 𝐸 (𝐺) under attack, the adversary succeeds in stealing
the funds from 𝑒, independently, and with probability 𝑝.

Let 𝑃𝑒 denote the profit that the adversary makes by attack-
ing 𝑒, and let 𝑃 = (cid:205)𝑒 𝑃𝑒 be the total profit of the adversary. By
Assumptions 1 & 2 and the linearity of expectation, we get that
E[𝑃] = (cid:205)𝑒 ∈𝐸 (𝑍,𝑉 (𝐺)\𝑍 ) E[𝑃𝑒 ] = (cid:205)𝑒 ∈𝐸 (𝑍,𝑉 (𝐺)\𝑍 ) (𝑝 − 1/2) · 𝑐 (𝑒) =
(𝑝 − 1/2) (cid:205)𝑒 ∈𝐸 (𝑍,𝑉 (𝐺)\𝑍 ) 𝑐 (𝑒). In other words, the expected profit
of the adversary is equal to the total capacity of the computed cut,
times a scaling factor of 𝑝 − 1/2. The following summarizes the
above discussion.

Proposition 2.1. Under Assumptions 1–2, for any 𝑝 > 1/2, the
mass double-spend attack is profitable in expectation. Moreover, the
𝑘-coalition that maximizes the profit of the adversary is precisely an
optimal solution to 𝑘-LWMC.

2.3 Computing lopsided max-cuts
Since the 𝑘-LMC problem is a generalization of Max-Cut, it follows
that it is also NP-hard [12]. Perhaps surprisingly, the generalization
of Max-Cut that we consider does not appear to have been studied
in this precise form previously.

We observe empirically that a simple greedy algorithm computes
very good solutions. The greedy algorithm is as follows. We start
with the cut (∅, 𝑉 (𝐺)), that contains all vertices on the right side.
For 𝑘 steps we repeat the following. We greedily pick the vertex on
the right side to move to the left side, maximizing the total capacity
of edges in the cut.

We compared this greedy algorithm with the implementation
of approximate max-cut solver in the Neo4j Graph Data Science
library, which uses a greedy randomized adaptive search procedure
parallelized (GRASP) style algorithm [3]. When taking the maxi-
mum over all 𝑘 ∈ {1, . . . , |𝑉 (𝐺)| − 1}, the simple greedy algorithm
we consider outperforms the results of the Neo4j library. For this
reason, we have chosen the simple greedy algorithm for our ex-
periments. We remark, however, that obtaining a better solver for
𝑘-LMC and 𝑘-LWMC can only strengthen our results, since better
solutions directly improve the effectiveness of our attacks.

The values of the solutions for 𝑘-LMC and 𝑘-LWMC that we
computed using the greedy algorithm, as a function of 𝑘, are pre-
sented in Figure 1. We remark that the global solution that we
compute for Max-Cut contains OPT = 63251 edges. Similarly, the
best solution computed for weighted Max-Cut has total capacity
of OPTW = 2464.37 BTC, while covering 58531 edges. The results
on the greedy solutions for 𝑘-LMC and 𝑘-LWMC that we obtained
are presented in figure 1. Table 1 gives the solutions for some rep-
resentative values of 𝑘, related to 𝑘-LWMC. We observe that even
for very small coalition size, 𝑘, there exist solutions that are close
the global optimum. For example, even with 𝑘 = 30 nodes, the
adversary can attack a number of channels that is 31% of the global
max-cut, which is 23% of all channels in the network.

This phenomenon agrees with the behavior expected from the
theory of scale-free networks, as discussed in the previous Section.

𝑘

10
30
100
300

capacity in BTC (% of OPTW)
1199.89 (48.69%)
1685.13 (68.38%)
2107.70 (85.53%)
2312.47 (93.84%)

# edges (% of OPT)
10911 (17.25%)
20084 (31.75%)
35447 (56.04%)
44522 (70.39%)

Table 1: Result on the greedy solutions computed for 𝑘-LMC
and 𝑘-LWMC on the LN graph 𝐺.

3 THE EXPERIMENTAL SETUP
We now describe the modeling of the LN used in our experiments.
The graph 𝐺 of the LN used in our experiments is obtained using the
lnd lightning node implementation. The snapshot of the network
that we use was taken on May 2022, and contains 𝑛 = |𝑉 (𝐺)| =
17813 nodes and |𝐸 (𝐺)| = 84927 channels.

4

3.1 Modeling layer-1 congestion
The effectiveness of the attacks we consider depends on the confir-
mation times of the transactions performed by the adversary and
the honest nodes. Therefore, the results depend on the congestion
on the Bitcoin blockchain during the attack.

One way to estimate confirmation times is to use statistical
models, such as [8]. However, this approach requires estimating
the parameters of the models involved, which can introduce bias
on the results. For this reason, we decide to perform simulations
using historical data on the Bitcoin mempool 2.

All of our simulations are performed under two different con-

gestion scenarios:

Scenario 1: The attack starts on Dec. 7, 2017 at 08:15 (CDT),
which marks the beginning of a period of high congestion.
Scenario 2: The attack starts on Jan. 1, 2022 at 00:00 (CDT),
which is during a period of typical congestion.

Scenario 1 represents a worst-case situation for the victims, since
the attack takes place during a period of high congestion on layer-1.
The data used to run the experiments was obtained from [11], with a
snapshot taken every minute regarding the number of transactions
in the mempool for a number of predefined fee ranges. Figure 2
depicts the congestion during the selected period. The mempool
congestion in the selected period lasted approximately until the
end of January (about 8000 blocks).

Figure 2: Levels of congestion between December 2017 and
February 2018, showing the end of the period of congestion
that started around Dec. 6, 2017. Different lines represent
number of transactions for different fee ranges in the mem-
pool, with blue and green lines representing lower fee trans-
actions, and so on. The red square represents approximately
the time window considered for experiments.

3.2 Modeling the strategy of honest nodes
In both of the attacks presented in this paper, we consider two
different strategies for the honest players:

• Static strategy: In this case, all honest nodes use a fixed fee
when transmitting their transactions. This is the optimistic
case for the adversary, since it is harder for honest players
to get their transactions confirmed during periods of high
congestion.

code

2The
can
1jPZHvm2OCovhKUHso6TkPvmJM89vQS5F/view?usp=sharing

following URL:

implementing

simulations

found

the

the

be

at

and

experiments
https://drive.google.com/file/d/

the

Figure 1: The value of the greedy solutions for 𝑘-LMC (left) and 𝑘-LWMC (right), as a function of 𝑘.

• Dynamic strategy: The honest nodes increase the fee of their
transactions until they get confirmed or the delay expires.
The rate of increase is controlled by three parameters: The
initial fee, the step parameter, 𝑡, and a parameter 𝛽 > 1. Every
𝑡 blocks, any honest node increases the fee of any pending
transaction via the replace-by-fee (RBF) mechanism, by mul-
tiplying its fee by 𝛽. Therefore, the fees increase exponen-
tially.

The dynamic strategy requires some considerations regarding
the various type of on-chain transactions that both the attacker and
the victims have to broadcast. First of all, justice transactions only
require honest nodes’ signature, therefore RBF can be used, and
the dynamic case is feasible in the mass double-spend attack. In the
zombie attack, the fee increase is related to channel force-closing
transactions: channel commitments are signed by both parties when
the commitment is created, therefore in general the fee is static
and decided when the transaction is signed. However, with the im-
plementation of anchor output-based channels [1], the fee of force-
closing transactions can be bumped, therefore the dynamic strategy
of honest nodes can also be implemented during the zombie attack.
In the zombie attack, if the strategy is static, the fee will remain the
same for all the duration of the simulation, until all the zombie chan-
nels have been closed. When the dynamic strategy is employed, the
fee will be increased every 𝑡 blocks, for all the transactions that are
still unconfirmed. For example, if 𝑠𝑡𝑒𝑝 = 2, then every 2 blocks the
fee related to unconfirmed zombie channels’ closing transactions
will be bumped. In the mass double-spend attack, honest nodes’
transactions are submitted as soon as the corresponding malicious
transaction is confirmed (effectively simulating the behaviour of
watchtowers). The initial fee for victims’ justice transactions is set
as the average fee at the moment of submission. After submission,
fee increments in the dynamic scenario follow the same mechanism
as in the zombie attack simulation.

4 RESULTS ON THE ZOMBIE ATTACK
4.1 Outline of the experiments
The simulation of the zombie attack works as follows.

(1) At the beginning of the simulation, there are 𝑛 zombie chan-
nels that must be closed. These would typically be the chan-
nels in the solution to 𝑘-LMC.

(2) We compute the number of transactions contained in any
new block from historical blockchain data. For example, in

scenario 1, since the time window starts on Dec. 7, 2017 at
08:15 (CDT), the first block that will be mined is the block
#498084 3.

(3) We check if there is enough space in the block for any transac-
tion by counting the number of transactions in the mempool
with a higher fee (also considering transactions which were
already in the mempool with the same fee rate as our closing
channel transactions).

(4) If the block can fit some of our closing channel transaction,
we remove them from the remaining number of zombie
channels to be closed.

(5) When we reach a state in which all the LN channel closing
transactions have been confirmed, the simulation ends.

In the results we do not consider the delay set at channel open-
ing (to_self_delay). However, as we will see in section 5.2.2, an
average delay can be considered to be about 500 blocks.

4.2 Results
Static Case. Figure 3 shows the number of remaining zombie
4.2.1
channels to be closed as a function of time (measured in blocks)
elapsed during the simulation, for various fees used by honest nodes
(that are fixed since we are in the static case). The results in the high
congestion situation is consistent with respect to the duration of the
congestion: when the fee is less than 50 sat/vByte, all transactions
tend to be confirmed at approximately the same time as congestion
decreases significantly (around the 8000th block from the beginning,
just under two months). This implies that the bottleneck is caused
due to the congestion in the mempool. In the same figure, in the
middle it is possible to notice that, even for small coalition sizes, the
zombie attack causes high delay. Actually, the difference between
attacking MC and 30-LMC is not much pronounced: this is caused
by the fact that in this case the layer-1 congestion is not dominated
by LN transactions, but rather by standard transactions that were
in the mempool in the analyzed time window.

For Scenario 2 (low congestion), in Figure 3 we observe that the

delays to close a channel are significantly smaller.

Figure 4 depicts the number of blocks needed to close all the
zombie channels as a function of the fee used by the victims for the
closing channel transactions, for different values of 𝑘. We observe
that even when attacking only a few nodes (𝑘 = 10), the attacker
cause a lot of damage to users in terms of time their funds are locked,

3https://www.blockchain.com/btc/block/498084

5

Figure 3: Number of remaining Zombie channels to be closed as a function of time measured in blocks, for various fee ranges,
with static honest player strategy, in Scenario 1 (attacking the total LMC on the left and 30-LMC on the middle) and Scenario
2 (attacking the total LMC, on the right).

when the congestion is high. The number of blocks that victims
need to wait in order to unlock their funds varies significantly based
on the fee used to close the channels. In fact, users are forced to
pay a high fee of about 100 sat/vByte to redeem funds before two
weeks (≈ 2000 blocks) since the moment of the attack.

4.2.2 Dynamic Case. In the dynamic case, the fees used by victims
of the attack can increase over time (using RBF) in response to a
delay in the confirmation of the transactions. We consider 𝛽 = 1.01,
so in every bump the fee increases by 1%, and various step values.
Figure 5 depicts the number of blocks needed to close all the
zombie channels, as a function of the parameters of the dynamic
strategy. We observe that, even for a coalition of size 𝑘 = 30, if
honest users wish to close their channels in significantly less that
1000 blocks, then either the initial fee must be set high (about 80
sat/vByte), or the fee must be bumped aggressively (at least once
every 10 blocks).

Figures 5 and 6 also consider a hypothetical attack with 1 million
zombie channels, which corresponds to a much larger graph in a
possible future snapshot of the LN.

5 RESULTS ON THE MASS DOUBLE-SPEND

ATTACK

We now present our results on the mass double spend attack.

5.1 Outline of the experiments
The simulation is performed as follows.

(1) When a new block is minted, we check if some of the LN
transactions can be included in the block, counting the num-
ber of transactions with a higher fee and checking if this
number is less than the number of transactions historically
contained in the block at the current index.

(2) If there is some potential space for LN transactions in the
new block, we start by iterating over them: before including
them into the block, we check their position in their specific
fee range in the mempool. If, at the moment of insertion in
the mempool, there were already some transactions with the
same fee rate, these transactions would need to be confirmed
before those that we are monitoring.

(3) At the beginning, there are only attacker transactions: we
fit as many as we can in the first block that has available
space for them. For each confirmed attacker transaction, we
submit to the mempool the corresponding victim’s justice

6

transaction. The fee of the justice transactions is computed
as the average fee from the mempool data at the moment of
submission of the transaction.

We remark that in this case is that, unlike the zombie attack sim-
ulation, the victims’ justice transactions are submitted at different
times and potentially with different fees. Therefore, we must keep
track of the position of each justice transaction in the mempool
in its fee range, to detect its confirmation block as accurately as
possible.

Another detail is that when we decide that, for example, 𝑛 at-
tacker transactions are included in a block, we are actually replacing
𝑛 transactions which, if we look at historical mempool data, were
removed from the mempool, but in the simulation that we are ex-
ecuting they should still be in the mempool as unconfirmed. For
simplicity, in our simulation we consider only the transactions that
are directly replaced by LN transactions, and we don’t consider the
“cascade” of replaced transactions. This is an optimistic assumption
for victims because it implies less transactions in the mempool and
thus less congestion, therefore it does not weaken our results.

5.2 Results
Static Case. Figure 7 shows the number of justice transac-
5.2.1
tions that get confirmed after the predefined delay (which are there-
fore unsuccessful in avoiding the loss of funds), in Scenario 1, as
a function of the fee paid by the attacker. We observe that, even
for large delays (e.g. 1000 blocks), the number of exploited chan-
nels is high, especially if the attacker is willing to pay a high fee
for its transactions. We also note that, it is not guaranteed that
increasing the fee for the attacker leads to better attack outcome,
as it is possible to see with a delay of 500 blocks. This is due to
the fact that a higher fee also implies that the victim transaction is
submitted earlier, and the effect on the attack results depends on
the level of congestion in the moment that the each victim transac-
tion is submitted. The level of congestion in the considered time
window is not constant, it changes significantly and not monotoni-
cally over time: therefore, it could happen that using a higher fee
causes victim transactions to be submitted in a moment in which
the mempool is less overloaded, hence they can also be confirmed
earlier, actually reducing the effect of the attack. Figure 7 also shows
consistent results with respect to a low congestion period: a small
to_self_delay is generally enough to minimize the risks for LN
users.

Figure 4: Time measured in blocks needed to close all the channels during a zombie attack, as a function of the fee used by
the victims for different number of adversarial nodes (in sat/vByte), with static honest player strategy, in Scenario 1 (left) and
Scenario 2 (right).

Figure 5: Number of blocks needed to close all the Zombie channels, with dynamic honest player strategy, as a function of the
step parameter, with beta=1.01, in Scenario 1, under three different attacks: total LMC (left), 30-LMC (middle), and 1 million
channels (right).

Figure 6: Number of blocks needed to close all the Zombie channels, with dynamic honest player strategy, as a function of the
step parameter, with beta=1.01, in Scenario 2, under three different attacks: total LMC (left), 30-LMC (middle), and 1 million
channels (right).

Figure 7: Number of justice transactions that are not able to be confirmed before the to_self_delay as a function of the fee
used by the attacker (in sat/vByte) for various values of to_self_delay with static honest player strategy, in Scenario 1 (left)
and Scenario 2 (right), attacking the total LWMC.

7

transaction is sent when the corresponding attacker’s transaction
is included in a block, even using an higher fee doesn’t necessarily
always optimize the attacker’s strategy. As a matter of fact, it is pos-
sible that using a fee of 40 sat/vByte leads to victims’ transactions
with an higher initial fee, that allows a greater number of justice
transactions to be confirmed on time, with respect to the usage of
30 sat/vByte as the attacker fee.

5.2.4 Considerations regarding the feasibility of the attack. If the
attackers’ coalition is able to steal funds from all the attacked chan-
nels, then there are no costs for the attacker, other than those of
transaction fees. Nonetheless, in a realistic setting it is possible
that some of the justice transactions submitted by the victims will
be confirmed before the expiration of the to_self_delay. These
transactions will cause a penalty for the attacker, as the balance of
the channel will be claimed by the victim. By Assumption 1, for any
successfully compromised channel, 𝑒, the attacker will gain 𝑐 (𝑒)/2,
in expectation. Therefore, the whole attack is profitable when the
attacker steals funds from a set of channels that contain at least
half of the total capacity of all channels under attack. The profit of
the attacker under different conditions is depicted in Figures 9, 10
and 11. We observe that even with a coalition of 𝑘=30 nodes, under
heavy congestion, using adversarial transaction fee of 50 sat/vByte,
when the honest nodes bump their fee every 3 blocks (i.e. about
every 30’), the adversary has total expected profit of more than 750
BTC.

6 MITIGATIONS
We now discuss potential mitigations for the attacks considered.

6.1 Mitigations for Mass Double-Spend Attack
Increase to_self_delay. As we observed in the simulation
6.1.1
results, increasing the to_self_delay helps in reducing the dam-
age made by the attack. However, this comes at a high cost in terms
of usability: if the other party is unresponsive, an honest user has
to wait for that increased delay to be able to recover and use the
funds locked in the channel. We note also that this modification
would worsen the delay in the zombie attack.

6.1.2 Watchtowers. Watchtowers are services that offer protection
against fraudulent commitment to prevent funds losses when users
are offline. They act in response to a non-valid commitment posted
on-chain, by broadcasting a justice transaction as soon as the at-
tacker transaction has been confirmed. The exact parameters of the
strategy of the watchtower should be carefully set by the operator:
our simulations suggest that during periods of high layer-1 conges-
tion, the watchtowers should bump the fees of unconfirmed justice
transactions aggressively.

6.1.3 Avoid waiting until the attacker transaction is confirmed. A
different watchtower strategy would be to monitor the mempool
for adversarial transactions. In this case, when an adversarial trans-
action is detected in the mempool, the watchtower attempts to
frontrun the adversary by submitting a channel-closing transaction
with a higher fee.

Figure 8: Number of justice transactions that are not able
to be confirmed before the to_self_delay as a function of
attacker fee (in sat/vByte) with dynamic honest player strat-
egy, for various values of the step parameter (Scenario 1),
attacking the total LWMC.

5.2.2 References to LN nodes implementation. We now investigate
how the most popular LN node implementation currently handles
the delay agreed at channel opening, and how this affects our attack.
Currently, the most used LN node implementation is LND (Light-
ning Network Daemon). In the Lightning Network specification
(BOLT), to_self_delay is the parameter that sets the delay (in
blocks) that the other end of the channel must wait before redeem-
ing the funds in case of uncooperative channel closure. LND offers
users the option to set a fixed custom value for this parameter in the
lnd.conf configuration file (the bitcoin.defaultremotedelay
entry). By default, if this parameter is not set, it is handled dynam-
ically and scaled according to the capacity of the channel, with a
maximum delay of 2016 blocks and a minimum delay of 144 blocks.
With respect to the attack that we are describing, it is interesting
to see the effect of the usage of this algorithm to choose the delay.
Currently, as of April, 2022, the average capacity of a LN channel
is 0.044 BTC 4. This means that, with the default LND algorithm, a
channel of average capacity has

𝑑𝑒𝑙𝑎𝑦 = 2016 𝑏𝑙𝑜𝑐𝑘𝑠 ·

𝑐ℎ𝑎𝑛𝐴𝑚𝑡
𝑀𝑎𝑥𝐹𝑢𝑛𝑑𝑖𝑛𝑔𝐴𝑚𝑜𝑢𝑛𝑡

≈ 529 𝑏𝑙𝑜𝑐𝑘𝑠

According to the LND documentation, MaxFundingAmount is
defined the the BOLT-0002 specification and it is a soft-limit of
the maximum channel size at a protocol level: it is currently set to
224 − 1 satoshis. Obviously, in our case chanAmt is set to 0.044 BTC.
For the dynamic case we will make use of the delay computed

above (529 blocks).

5.2.3 Dynamic Case. The dynamic case, in which victims are also
increasing their fee if the corresponding justice transaction is not
confirmed after the number of blocks determined by the step pa-
rameter, has been implemented and is shown in Figure 8. Similarly
to the zombie attack, the study of the dynamic case is useful to
propose possible strategies to defend against this type of attacks.
As a remark, the curves shown in Figure 8 are not monotonic, be-
cause the congestion level in the considered time window is not
constant. Since the initial victim’s fee is computed as the average
fee at the moment of submission to the mempool, and each victim’s

4Data from 1ML.com

8

Figure 9: Attacker profits as a function of the fee used by the attack in Scenario 1 (in sat/vByte), attacking all the edges in the
weighted Max-Cut in the static case (left) and dynamic case (right), for various values of the step parameter.

Figure 10: Attacker profits as a function of the fee used by the attack in Scenario 1 (in sat/vByte), attacking 30-LWMC in the
static case (left) and the dynamic case (right), for various values of the step parameter.

due to the fact that increasing the block size leads to a higher cost
for running a Bitcoin node. Obviously, given the historical implica-
tions of such a modification of the layer-1 protocol, this can only
be considered as a merely theoretical mitigation technique.

6.2.2 Account-based blockchains. The attacks we consider exploit
the fact that the bitcoin blockchain uses UTXOs to keep track of
users’ funds. If a different blockchain is used, such as Ethereum,
where user funds are stored in account balances, then the following
mitigation is possible. The payment-channel protocol can use a
smart contract for depositing funds during channel creation, and for
withdrawing them during channel closing. The same smart contract
is used for all the channels in the network. If, within a short time
period, honest users prove to the smart contract that several invalid
channel closures occurred, then the smart contract pauses channel
closures for a specified period of time. This mechanism can be used
to pause the network during an attack occurring in high congestion
conditions. This solution has the drawback to introduce the risk of
griefing-like attacks: a user could open useless channels, and then
broadcast past commitments in order to pause channel closures for
all the users. To avoid this, the mechanism could be driven by the
votes of a DAO instead of an automatic pause, in order to evaluate
each case to understand if there is a real attack going on in the
network.

Figure 11: Attacker profits as a function of 𝑘 parameter,
in the dynamic case, with 60-69 sat/vByte as attacker fee,
beta=1.01 and step=6.

6.2 Mitigation for Both Attacks
Increased block size. Increasing the block size allows more
6.2.1
transactions to be included, and therefore it increases the through-
put of the network, reducing the effects of the attacks just described.
However, increasing block size decreases decentralization. This is

9

Incentivize low-degree nodes. Our attacks can be effective
6.2.3
even in the presence of small adversarial coalitions. This is because
the LN network has a power-law degree distribution, which implies
that there exists large 𝑘-LMCs and 𝑘-LWMCs, for small values of
𝑘. If LN routing algorithms were to give priority to paths that use
low-degree nodes, then it is reasonable to expect that that degree
distribution of the LN would become closer to uniform, and thus
the sizes of the maximum 𝑘-LMCs and 𝑘-LWMCs should decrease.
This would render both attacks less effective, for the same coalition
size. However, it is unclear how this modification would affect the
routing properties of the LN.

7 RELATED WORK
LN attacks which exploit layer-1 congestion have already been de-
scribed in the literature: [9] presents the Flood & Loot attack. This
attack makes use of HTLCs and multi-hop payments: the attacker
controls two nodes that are not directly connected, the source and
the target. The paths between them are flooded with a high num-
ber of low-value HTLC payments from the source to the target.
When all the HTLC payments have been completed, the source
node refuses to resolve the payments with the first node in the
payment path, which is the victim. The victim is therefore forced
to unilaterally close the channel, since the source node is unrespon-
sive. The high number of unresolved HTLCs and the consequent
congestion on layer-1 cause some of the victim transactions not
to be confirmed in time, allowing the attacker to steal some of the
funds. The exploited mechanisms partially differ from those used
by the attacks presented in this paper, since we do not make use
of multi-hop payments, but rather direct channels between nodes.
An interesting property of this attack is that it causes a lot of con-
gestion on layer-1 with low cost for the attacker: therefore it is
possible to use it to amplify the effects of zombie attacks and mass
double-spend attacks.

Similar results obtained in [16]: however, in this work they target
the entire network, and an attack that is similar to the zombie attack
is described. A greedy algorithm is designed to select the channels
to be flooded in order to maximize the locked capacity. This is
also similar to what is proposed in [19], where they analyze attack
strategies by making use of the topological properties of the LN:
for example they present some strategies to choose nodes to be
removed for partitioning attacks. They propose strategies such as
removing nodes by decreasing degree, by decreasing betweenness
and eigenvector centrality, and by highest ranked minimum cuts.
This is similar to our strategy for selecting an adversarial coalition
for the zombie attack, but with a different objective.

A well-known attack on the LN is the griefing attack [15]. In
this case the attacker saturates HTLC multi-hop payments path,
and makes the channels that constitute the path unusable for new
payments. The corresponding channels must be force-closed on-
chain, therefore the victims’ funds are locked for the delay specified
at channel creation. In general, griefing attacks do not aim to steal
funds, but users are forced to pay high fees to close the channels
in a small number of blocks. Moreover, layer-2 is disrupted since
potentially many channels are out of service and cannot route
payments.

10

The time-dilation attacks described in [18] aim to eclipsing LN
nodes to delay the time at which they become aware of new blocks.
They target layer-2 mechanisms that rely on timely reactions, such
as LN justice transactions. To make detection difficult they exploit
the random arrival of new Bitcoin blocks (it is a Poisson process).
Some countermeasures are proposed, such as watchtowers, which
do not prevent the attack but raise its difficulty, especially if watch-
towers are operated by third-party providers. They mention that
this attack can be also amplified if the attacker performs a DoS
attack against Bitcoin: this brings us to the conclusion that time-
dilation attacks, and in general eclipse attacks, can be used to am-
plify the mass double-spend attack since they can further reduce
the time honest nodes have to react to the attack.

Finally, mass exit attacks on Plasma are studied in [6].

8 CONCLUSIONS
In this paper we have analyzed two attacks that exploit congestion
on the bitcoin blockchain to cause damage on the Lightning Net-
work. Using historical mempool data taken during periods of high
and low congestion, we have simulated two attacks: in the case of
the zombie attack, funds remain locked for a lot of blocks before
users are able to retrieve them, while, in the mass double-spend
attack, funds are at risk of being stolen.

We presented a theoretical justification for the effectiveness of
the attacks, even when the adversary controls only a very small
coalition. This is based on the observation that the LN network
is scale-free, and scale-free graphs have large 𝑘-lopsided cuts, for
small values of 𝑘. This suggests that our attacks should become
more effective for larger network sizes, for the same coalition size,
𝑘. In particular, the average expected profit of a node participating
in the worst-possible 𝑘-coalition should grow in the future with
network size.

Our simulation results suggest that watchtower algorithms should
be configured carefully. Ideally, they should monitor layer-1 con-
gestion, and respond aggressively in the case of high congestion.
We leave as future work the study of both attacks under a more
detailed model that incorporates transaction fees in the costs of the
participants.

REFERENCES
[1] 2019. Anchor outputs. Retrieved May 13, 2022 from https://github.com/lightning/

bolts/pull/688

[2] 2021. Dual Funding.

Retrieved Aug 3, 2022 from https://medium.com/
blockstream/c-lightning-opens-first-dual-funded-mainnet-lightning-channel-
ada6b32a527c

[3] 2022. Approximate Maximum k-cut. Retrieved May 1, 2022 from https://neo4j.

com/docs/graph-data-science/2.0/algorithms/alpha/approx-max-k-cut/

[4] 2022. BOLT #2: Peer Protocol for Channel Management. Retrieved May 3, 2022
from https://github.com/lightning/bolts/blob/master/02-peer-protocol.md
[5] Gijs van Dam, Rabiah Abdul Kadir, Puteri NE Nohuddin, and Halimah Badioze
Zaman. 2020. Improvements of the balance discovery attack on lightning network
payment channels. In IFIP International Conference on ICT Systems Security and
Privacy Protection. Springer, 313–323.

[6] Stefan Dziembowski, Grzegorz Fabiański, Sebastian Faust, and Siavash Riahi.
2021. Lower Bounds for Off-Chain Protocols: Exploring the Limits of Plasma. In
12th Innovations in Theoretical Computer Science Conference (ITCS 2021). Schloss
Dagstuhl-Leibniz-Zentrum für Informatik.

[7] Mikael Gast, Mathias Hauptmann, and Marek Karpinski. 2016. Approximation
Complexity of Max-Cut on Power Law Graphs. arXiv preprint arXiv:1602.08369
(2016).

[8] Rowel Gundlach, Martijn Gijsbers, David Koops, and Jacques Resing. 2021. Pre-
dicting confirmation times of bitcoin transactions. ACM SIGMETRICS Performance

transfers of funds. Whenever at least one of the channel partici-
pants wants to claim their balance on layer-1, the channel must be
closed, either cooperatively (if both parties agree), or unilaterally,
by posting the last state of the channel’s balance sheet.
To ensure the security of users’ funds, the Lightning Network relies
on the assumption that the layer-1 will always be able to process
legitimate users’ transaction in a reasonable amount of time, in
order to close unusable channels and dispute fraudulent behavior
from dishonest actors. If the state which is posted on-chain does
not correspond to the most recent state of the balance sheet, honest
users have a certain time window (agreed on channel opening)
to prove that the posted commitment is not the most recent one,
by broadcasting the so-called justice (or penalty) transaction. The
amount of time (in blocks) that users have to prevent the loss of
funds is agreed on channel opening by both parties, as described
in the BOLT (Basis of Lightning Technology) specifications [4],
which describe the exchange of messages between two LN nodes
that want to establish a payment channel. In particular, when a
new channel is created between two parties, Alice and Bob, the
parameters of the newly created channels are agreed. To do this,
an open_channel message is sent from Alice to Bob: a number of
parameters regarding the channel are agreed; among them, we are
mostly interested in the to_self_delay parameter. This parame-
ter indicates the number of blocks that the other party (i.e., Bob)
has to wait in case he tries to unilateral close the channel. Later,
an accept_channel message is sent from Bob to Alice as a reply,
indicating the desired value to be assumed for the to_self_delay
parameter of Alice.

Evaluation Review 48, 4 (2021), 16–19.

[9] Jona Harris and Aviv Zohar. 2020. Flood & loot: A systemic attack on the
lightning network. In Proceedings of the 2nd ACM Conference on Advances in
Financial Technologies. 202–213.

[10] Ethan Heilman, Alison Kendler, Aviv Zohar, and Sharon Goldberg. 2015. Eclipse
Attacks on Bitcoin’s Peer-to-Peer Network. In 24th USENIX Security Symposium
(USENIX Security 15). 129–144.

[11] Jochen Hoenicke. 2022. Bitcoin Mempool Statistics. Retrieved May 1, 2022 from

https://jochen-hoenicke.de/queue/#BTC,all,count

[12] Richard M Karp. 1972. Reducibility among combinatorial problems. In Complexity

of computer computations. Springer, 85–103.

[13] Yuval Marcus, Ethan Heilman, and Sharon Goldberg. 2018. Low-resource eclipse
attacks on ethereum’s peer-to-peer network. Cryptology ePrint Archive (2018).
[14] Stefano Martinazzi and Andrea Flori. 2020. The evolving topology of the
Lightning Network: Centralization, efficiency, robustness, synchronization, and
anonymity. Plos one 15, 1 (2020), e0225966.

[15] Subhra Mazumdar, Prabal Banerjee, and Sushmita Ruj. 2020. Griefing-penalty:
arXiv preprint

Countermeasure for griefing attack in lightning network.
arXiv:2005.09327 (2020).

[16] Ayelet Mizrahi and Aviv Zohar. 2021. Congestion attacks in payment channel
networks. In International Conference on Financial Cryptography and Data Security.
Springer, 170–188.

[17] Joseph Poon and Thaddeus Dryja. 2016. The bitcoin lightning network: Scalable

off-chain instant payments.

[18] Antoine Riard and Gleb Naumenko. 2020. Time-Dilation Attacks on the Lightning

Network. arXiv preprint arXiv:2006.01418 (2020).

[19] Elias Rohrer, Julian Malliaris, and Florian Tschorsch. 2019. Discharged pay-
ment channels: Quantifying the lightning network’s resilience to topology-based
attacks. In 2019 IEEE European Symposium on Security and Privacy Workshops
(EuroS&PW). IEEE, 347–356.

[20] Sergei Tikhomirov, Rene Pickhardt, Alex Biryukov, and Mariusz Nowostawski.
2020. Probing channel balances in the lightning network. arXiv preprint
arXiv:2004.00333 (2020).

A LIGHTNING NETWORK CHANNELS

MECHANISMS

The Lightning Network introduces the concept of channels, that
can be opened between two parties, in order to execute off-chain

11

