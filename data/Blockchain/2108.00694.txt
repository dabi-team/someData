This is the accepted version of the work. The ﬁnal version will be published in MASS virtual conference, 04-10 Oct 2021. ©2021 IEEE. Personal use of this material is permitted.
Permission from IEEE must be obtained for all other uses, in any current or future media, including reprinting/republishing this material for advertising or promotional purposes,
creating new collective works, for resale or redistribution to servers or lists, or reuse of any copyrighted component of this work in other works.

A Novel Internet-of-Drones and Blockchain-based
System Architecture for Search and Rescue

Tri Nguyen1, Risto Katila2, and Tuan Nguyen Gia2
1Center for Ubiquitous Computing, University of Oulu, Oulu, Finland
2Department of Computing, University of Turku, Turku, Finland
Email: 1tri.nguyen@oulu.ﬁ, and 2{rijukat,tunggi}@utu.ﬁ

1
2
0
2

g
u
A
0
3

]
I

N
.
s
c
[

2
v
4
9
6
0
0
.
8
0
1
2
:
v
i
X
r
a

Abstract—With the development in information and com-
munications technology (ICT) and drones such as Internet-of-
Things (IoT), edge computing, image processing, and autonomous
drones, solutions supporting search and rescue (SAR) missions
can be developed with more intelligent capabilities. In most of
the drone and unmanned aerial vehicle (UAV) based systems
supporting SAR missions, several drones deployed in different
areas acquire images and videos that are sent to a ground control
station (GCS) for processing and detecting a missing person.
Although this offers many advantages, such as easy management
and deployment, the approach still has many limitations. For
example, when a connection between a drone and a GCS has
some problems, the quality of service cannot be maintained.
Many drone and UAV-based systems do not support ﬂexibility,
transparency, security, and traceability. In this paper, we propose
a novel Internet-of-Drones (IoD) architecture using blockchain
technology. We implement the proposed architecture with differ-
ent drones, edge servers, and a Hyperledger blockchain network.
The proof-of-concept design demonstrates that the proposed
architecture can offer high-level services such as prolonging the
operating time of a drone, improving the capability of detecting
humans accurately, and a high level of transparency, traceability,
and security.
Index

Terms—Internet-of-Drones,
Blockchain, Hyperledger Fabric, Search and rescue.

computing,

Edge

I. INTRODUCTION

Search and Rescue (SAR) is a complex operation that com-
bines different activities and actions from multidisciplinary
professionals [1]. The main target of SAR is to search for
missing persons and provide aid for persons who are in danger
in different situations such as earthquakes, ﬂoods, storms, and
snowstorms [1]. SAR can include different missions such as
mountain, cave, and maritime SAR. Each SAR mission can
require a different number of speciﬁc staff and equipment [1].
To perform a maritime SAR mission, staff with a rescue boat
and a rescue helicopter will go to the location where the
last signal or evidence is found. It is challenging to complete
SAR missions in many situations due to many reasons such
as large search areas, harsh environments (i.e., wind, heat,
or GPS unsupported), and strict time requirements [1]. With
the development of technologies such as wireless communi-
cation and cameras, SAR missions become less complicated
as the technologies can help minimize the search time and
improve the performance of a rescue team. For example, it is
difﬁcult for rescue teams to search for shipwreck survivors,
especially at nighttime. However, high-resolution RGB and
thermal cameras and advanced image processing approaches

can help detect the survivors more easily [2]. Although the
existing SAR systems using the technologies above have
provided many advantages for SAR missions, they still have
several limitations. For instance, it is challenging to reduce the
searching time or cover the large searching areas in a short
period. There is a need for more enhanced SAR systems that
can both overcome the challenges of the existing SAR systems
and help improve the possibility of ﬁnding victims of accidents
and disasters.

Drones and UAVs have been widely used in many ap-
plications such as surveillance, geographic mapping, trafﬁc
control, and power line inspection because they offer many
advantages such as cost-saving, large coverage areas, and ease
of deployment [3], [4]. For example, drones and UAVs can
be equipped with different sensors and cameras to cover a
large area and different terrains efﬁciently. Many drones and
UAV systems have recently been developed to serve SAR
missions, including cave, avalanche, and maritime SAR [5],
[6]. However, drones and UAVs still have some limitations,
such as limited computation resources and battery capacity.
Therefore,
they cannot operate for a long period. These
limitations affect the performance of the rescue team. One
of the suitable approaches for extending a drone’s operating
time is to apply computation ofﬂoading that can switch tasks
from a drone into a ground control station. However, when the
connection between the drone and the ground control station
is disconnected, the ofﬂoading approach cannot be carried out.
Internet-of-Things (IoT), consisting of different technolo-
gies such as cloud computing, sensing, and communication,
offers many beneﬁts, including real-time and remote monitor-
ing [7], [8]. However, IoT still has some limitations related
to latency-sensitive issues and data transmission [9]. These
limitations can be overcome by edge computing that can be
described as computing at the edge of the network closer
to the location where the data is collected. Edge computing
helps bring the cloud computing paradigm to the edge of
the network and supports different fundamental features that
cloud computing cannot provide. The combination of IoT and
edge computing can help enhance the energy efﬁciency of
hardware-constrained devices (i.e., smart sensors or drones)
and provide advanced services such as real-time micro-service.
Blockchain technology is a concept of building a unique
database of a decentralized system. In detail, a decentralized
system consists of many participants working together to form

 
 
 
 
 
 
a unique state instead of based on a single participant deciding
the system state [10]. Therefore, blockchain technology de-
mands to replicate any system changes to all participants and
form agreements with operations of the system. Blockchain of-
fers many advantages such as enhanced security, transparency,
traceability, efﬁciency, and automation [11]. For example,
blockchain uses cryptographic hash functions to form a chain
of data blocks linking by storing the ancestor’s hash value. By
participating in a blockchain network, all the participants with
permission can access the same information simultaneously.
Due to blockchain’s merit, blockchain is applied in many
applications such as healthcare, cryptocurrency exchange, and
trading [12]–[15].

SAR missions need to be transparent, efﬁcient, traceable,
secure, and precise. Particularly, to achieve a high level of
effective collaboration and efﬁciency, each participant with
permission, such as remote medical staff at the hospital, can
access the same information related to a SAR mission (e.g.,
the status of a victim) simultaneously as the rescue team. This
helps improve possibilities to save the victim. For example, all
the necessary equipment and medical staff for an operation can
be carefully prepared. When a victim is brought to the hospital,
the operation can be carried out immediately. In addition, it is
required to protect sensitive data related to a victim and the
SAR mission from persons who are not related to the mission.
Due to the blockchain’s beneﬁts, blockchain can be one of the
suitable approaches for fulﬁlling SAR requirements in terms
of security, transparency, and traceability.

It is challenging to develop drone and UAV-based systems
for SAR missions as they often have many strict requirements
large coverage area,
such as low latency, high precision,
and security. Therefore,
this paper proposes an advanced
Internet-of-Drone (IoD) system architecture integrating edge
computing and blockchain for SAR missions. The proposed
architecture consists of different types of drones, including
small drones and big drones that have different sizes, com-
putation resources, ﬂying capabilities, sensors, cameras, and
prices. The proposed architecture provides a solution that
helps overcome the challenges of the drone and UAV-based
system for SAR and offer rooms for further development such
as scalability and fault tolerance. Remarkably, many existing
UAV-based systems need a long period to completely cover
the large searching areas and ﬁnd many people simultaneously
is costly to build an
in a SAR mission. In addition,
advanced UAV-based system that can search a large area with
minimum latency. In this paper, a maritime SAR application
is focused. Therefore, the proposed system architecture will
be implemented for targeting maritime SAR missions.

it

The structure of the paper is as follows: Section II provides
related work. Section III mentions a background of blockchain
technology. Section IV shows the proposed system architec-
ture, while Section V discusses the preliminary knowledge
of computation ofﬂoading. Section VI presents the system
setup and implementation, and the result of experiments is
in Section VII. Finally, Section VIII indicates future work and
conclusion.

II. RELATED WORK

Recently, drone and UAV-based systems for SAR missions
have been developed due to the beneﬁts of UAVs and drones.
However, the number of these approaches is limited. Most
of the works target a single drone or a drone group that
directly connects to a ground station center. Drone and UAV-
based approaches for SAR missions have not simultaneously
considered different aspects of drones/UAVs, remote mon-
itoring, computation ofﬂoading, and blockchain. In general
applications, most of the works consider Internet-of-Drones
with either ofﬂoading or blockchain. Therefore, the paper dis-
cusses drone and UAV-based architectures for SAR missions,
drone architectures for computation ofﬂoading, and drone
architectures utilizing blockchain.

The authors [16] presented a modular architecture for the
UAV system for SAR. The system architecture consists of
UAVs, viewer base stations, and control base stations. A
viewer base station and a control base station have a user in-
terface that allows access to sensed data and controls different
aspects of the system, respectively. The results show that the
proposed architecture can be applied for different scenarios
with different levels of autonomy. A drone of UAVs can join
or leave a system network without compromising the quality.
Koubaa et al. [17] introduced an IoD architecture for
computation ofﬂoading. The architecture with drones, edge,
and cloud allows for ofﬂoading tasks from drones over the
Internet to cloud servers powerful in computation and memory
storage. Mainly, images captured by a drone can be ﬁrstly
processed at edge servers and then at cloud servers. The result
demonstrates that ofﬂoading can help reduce average latency.
In [18], the authors proposed an agent-based architecture
for computation ofﬂoading. The architecture has three layers,
including user devices, access network, and core network. A
user device layer consists of sensor devices collecting and
forwarding data to the access network that comprise UAVs and
edge servers for local data processing or data transmission to
cloud servers. The results show that architecture can be applied
for various applications in different ﬁelds.

In [19],

the authors presented a computation ofﬂoading
system architecture to extend the ﬂight time of surveillance
drones. The architecture includes a response time prediction
module, task ofﬂoading module, and remote task execution
module. The response time prediction module at drones is
responsible for collecting data such as wireless communication
and mobility factors, while the task ofﬂoading module is for
making an ofﬂoading decision based on the collected data. If
computation ofﬂoading is made, the task will be sent to the
remote task execution module that is carried out at the ground
control system. The results demonstrate that
the proposed
architecture help increase the ﬂying time of the drone.

Hou et al. [20] described a swarm of drone architecture
utilizing fog computing for task ofﬂoading. The architecture
supports cloud-based computation ofﬂoading and task allo-
cation optimization. In the architecture, each drone with a
fog node has connections with its adjacent drones or UAVs.

Blockchain’s structure observes as a chain of data blocks
extending by time and linking by the hash pointer concept.
The blockchain structure consists of two main parts: blocks
and transactions, as Fig. 1. The transaction indicates a primary
type of data in the blockchain. Also, a block wraps a set of
chronological transactions in its data part. Besides, each block
forms a header containing metadata, including a hash value of
its predecessor, a root of Merkle Tree data organization [24],
and a puzzle solution. As a result, if there is any modiﬁcation
from the block predecessors, the current block can detect from
the hash pointer. Even if there are changes in the data part, the
current block recognizes the storage of the Merkle root tree.
Consensus mechanisms play a crucial role in blockchain-
based system formation. In particular, consensus provides a
solution of communication to gain the agreement between
network participants. The consensus for a blockchain system
is analyzed by Xiao et al. [25] into ﬁve components, including
block proposal,
information propagation, block validation,
block ﬁnalization, and incentive mechanism. In detail, the
block proposal is to generate a data block candidate that is
then broadcast to other participants in the information propa-
gation. After receiving the block candidates, the participants
verify the block candidate at the block validation and then
ﬁnd a suitable branch to attach the validated block at block
ﬁnalization. Finally, the incentive strategy is to reward partici-
pants contributing to the system or even punish participants
who do not obey the protocol. For example, Bitcoin [13],
the ﬁrst blockchain-based cryptocurrency, proposed Nakamoto
consensus based on the Proof-of-Work concept. A Nakamoto
consensus’s participant forms a block candidate after solving
a computation puzzle. The block candidate is then shared with
others for veriﬁcation of the correctness before attaching the
current blockchain. Once the consensus round is reached, the
participant forming the accepted block is rewarded. In this
way, the system encourages the participants to join in the
consensus process.

An exciting application of blockchain is the blockchain-
based smart contract. After the proposal of blockchain tech-
nology with cryptocurrency use cases, Vitalik established
Ethereum [26] as a blockchain-based smart contract to uti-
lize Ethereum Virtual Machine (EVM), a Turing-complete
machine for arbitrary system activities. Therefore, except
for storing and forming a blockchain structure with transac-
tions, blockchain-based smart contract, as an example with
Ethereum, has application binary interface two-direct convert-
ing between Solidity (a programming language in Ethereum)
function call and EVM byte code. Therefore, each Ethereum
participant organizes an EVM that executes deﬁned smart
contracts and receives requests as function calls. As a result,
the blockchain-based smart contract is observed as the next
evolution of blockchain technology use case for a decen-
tralized autonomous organization (DAO). With this concept,
smart contracts can work autonomously, and those operations
are stored with a blockchain among participants. Although
Ethereum is the ﬁrst blockchain-based smart contract for
permissionless blockchain, our design is based on the use

Fig. 1. The blockchain structure

After local processing of the particular tasks at the drones is
made, the node and its adjacent drones are allocated the tasks
via the task allocation link. A task allocation optimization
is built to reduce a swarm of drones’ energy consumption
while satisfying the latency and reliability requirements. The
task allocation is based on the fast proximal Jacobi alternating
direction method of multiplier proposed in [21]. First, a task
allocation optimization problem is split into smaller sub-tasks
in which each drone is responsible for the speciﬁc sub-tasks
depending on their local status information. When comparing
with other task allocation optimization algorithms, including
the centralized convex optimization algorithm and the heuristic
algorithm developed in [22], the simulated result proves that
the proposed algorithm is more efﬁcient in optimization ca-
pability, expandability, and convergence rate. Compared with
other state-of-the-art drone and UAV-based computation of-
ﬂoading approaches, the proposed fog approach has been more
comprehensively evaluated in terms of reliability performance.
the authors proposed an architecture using a
blockchain network for
IoD. The architecture utilizes a
lightweight blockchain network to offer secure communica-
tions between participants of the system. The result shows
that the proposed architecture can help improve data sharing
between UAVs and their control systems.

In [15],

The authors [23] presented an architecture utilizing drones
and blockchain to improve inter-service operability in terms of
trust. The authors show the beneﬁts of the proposed blockchain
architecture towards the traditional centralized drone-based
systems, although the architecture is not actually implemented.

III. PRELIMINARIES: BLOCKCHAIN TECHNOLOGY

The blockchain succeeds in forming a decentralization by
gaining the consistency of the database replication. In detail,
the consistency ensures the correctness of the system with
a unique state from different replications; however, obtaining
consistency in a decentralized environment is difﬁcult because
of a demand of reliable communication among participants
and agreements with state updates. Therefore, the consistent
feature of a decentralized organization requires a speciﬁc
structure and a consensus mechanism working along with
cryptographic schemes.

Pre-HashValueMerkleRootResult-ProofTx0Tx1Tx2Tx3Hash( ) | Hash( )MerkleRoot= Hash( ) | Hash( )MerkleTreePre-HashValueMerkleRootResult-ProofHeaderDataTx4Tx5Tx6Tx7Tx4Tx5Tx6Tx7Hash( ) | Hash( )of permissioned blockchain to ensure the authentication of
participants in the network.

With blockchain concepts, many blockchain-based applica-
tions have been gaining the advantage of the decentralized
environment. One of the most exciting beneﬁts of blockchain
technology is decentralization, supporting single-failure toler-
ance. Also, blockchain technology provides participants with
trustworthiness through an immutability and transparency fea-
ture by which the system can form audits. Another attraction
for the proposal is the utilization of smart contracts to form
DAO from which the system can swiftly react and operate
issues and even self-organization. For instance, when one
small drone or big drone’s battery is going to end soon, the
system, after gathering the degree of the speciﬁc drone, can
ﬁnd another drone to replace that one. In another scenario, if
one of the edge servers was crash or even in an attack, the
system still operates typically with other edge servers.

IV. ARCHITECTURE

The proposal architecture shown in Fig. 2 consists of ﬁve
layers,
including small drone layer, big drone layer, edge
servers as blockchain layer, cloud layer, and application layer.
The small drone layer can consist of heterogeneous small
drones, small, fast, resource-constrained, and low-cost com-
pared with a big drone. Due to small-load and low battery
capacity limitations, the small drone is often equipped with
a small set of cameras and sensors. Depending on the appli-
cation, the cameras and sensors need to be carefully chosen.
For example, a high-speed RGB camera (e.g., Intel Realsense
D435) and sensors (e.g., digital barometric pressure sensor
for air pressure) can be used to track object applications. In
the proposed architecture, the small drones work as a cluster
in which the small drones work independently and cover a
particular search area depending on the drone’s operating time.
The cluster of small drones and the communication of the
drones are shown in Fig. 3. More small drones should be
added to a cluster to cover the larger area, or the drones of the
cluster should ﬂy higher. However, increasing the ﬂying height
can cause higher energy consumption and reduce the accuracy
of human detection. The number of small drones can vary
depending on the applications or missions. Each cluster has a
leader, which is a big drone. Small drones do not communicate
with each other, but they only communicate directly with a
cluster leader via Wi-Fi. The small drones are responsible for
capturing images or videos which can be local pre-processed
or kept intact before being sent to the leader, depending on
the ofﬂoading decisions.

The system architecture can have several clusters of drones.
Cluster leaders communicate with each other via Wi-Fi and
form a big drone layer. The big drone is equipped with
powerful computation resources capable of processing a large
amount of data quickly in a parallel manner. Embedded
boards with GPU having multiple cores (e.g., NVIDIA Jetson
Xavier NX with 384 cores) can be applied. Depending on the
applications and the budget, the big drone can be equipped
with or without cameras. In most cases, a big drone can

consist of different types of cameras such as RGB and thermal
cameras that are very useful in searching people at night. In
general, the price of the big drone without the camera can be
from 2k euros to 8k euros, while the big drone with RGB and
thermal cameras can be from 10k to 15k euros. The price of the
big drone with cameras is higher than the small drone’s price
(e.g., 2k euros). To improve the accuracy of human detection,
it is recommended that the big drone be equipped with high-
speed cameras, including RGB and thermal, that can capture
high-resolution images and videos at night. Depending on the
drone type and price, the big drone can operate with different
ﬂying times (e.g., DIJ s1000 with 15-minute ﬂying time and
DJI Matrice 300 with 55-minute ﬂying time without any load).
Wi-Fi is used as the primary communication protocol between
the big drones and an edge server placed at a rescue boat in the
proposed architecture since Wi-Fi can support high bandwidth
and high data rate transmission.

The proposed system architecture supports ofﬂoading be-
tween cluster leaders. For example, suppose one cluster has
much fewer members than another cluster. In that case, a
cluster leader with fewer members may have some more
available resources when these leaders’ speciﬁcation is the
same. Correspondingly, a cluster leader with less available
resources can ofﬂoad some of its tasks to its adjacent lead-
ers having more available resources. This ofﬂoading feature
only works if the connection between these leaders is good
and adjacent leaders have available resources. However, this
ofﬂoading feature is not enabled in most situations as it will
cause some challenges (e.g., complex management and extra
communication overhead). Although the ofﬂoading feature
is off, cluster leaders can communicate with each other to
exchange critical information and deal with a bad connection
between a cluster leader and an edge server. Notably, a cluster
leader can provide multicast to all adjacent cluster leaders
to inform the situation or share information (e.g., human
detection results and the current location). Then, the adjacent
cluster leaders will forward the information to an edge server
placed on the rescue boat and send back the edge server’s
temporary location to the cluster leader, who cannot connect
with the edge server temporarily. This will help the leader to
know its current position and distance toward the edge server.
Correspondingly, a rescue boat may relocate into another
position, or the leader may adjust the transmission power
to maintain the stable connection. This can ensure that the
system can work adequately; even GPS has temporary issues
in speciﬁc areas.

The proposed architecture can support different types of
human detection algorithms. However, it is required that the
algorithm for detecting humans at a big drone/a cluster leader
must satisfy some levels of accuracy and low latency require-
ments deﬁned by system administrators. For example, the 90%
accuracy level and maximum latency of 500 ms can be pre-
deﬁned. After the human detection algorithm detects a person
at a cluster leader, the leader can verify the case by using its
camera to capture the images or video of the areas where the
person is detected. In this situation, a leader’s camera will be

Fig. 2. The proposed IoD architecture with integration of edge computing and blockchain

time because an edge server is on a non-stationary rescue boat.
In many cases, the boat may go out of the connection range of
some big drones. For another reason, this can help save energy
consumption of the big drone. Particularly, if each small drone
sends a video of 30 frames per second (fps) to a big drone and
a cluster has six small drone members, the big drone needs
to send 180 fps to an edge server. The big drone can process
the received data and send the pre-processed data, which can
be much smaller, but this still causes latency and consumes
energy. When a Wi-Fi dongle is turned on, it can consume
around 400-500 mJ per second. Although the big drones do
not send images and videos in real-time to an edge server,
the data stored locally in the big drones are transferred to the
edge server when the big drones come back to the boat for
charging the battery or replacing a new battery. This helps
build a dataset for training deep learning-based models such
as YOLOv4 [27]. In addition, at the edge server, the advanced
algorithms and staff from a rescue team can double-check the
received images and videos to avoid missing any victim.

The proposed architecture also supports the case of a big
drone as a gateway. In case of a harsh environment such as
noises or strong wind, the system administrators or the rescue
team can decide to use an extra big drone as gateways which
are responsible for receiving data, including images and videos
from cluster leaders and forwarding the data to an edge server.
This approach helps avoid missing data. In another situation,
the gateway can be used as a backup plan for maintaining
the wireless communication or an extra aid device for helping
the victim. In case of where many victims have been detected
in different areas the aid device can provide some necessary
equipment or aid packages to the victim while waiting for the
rescue boat rescuing other victims.

An edge server is placed at a rescue boat in this archi-
tecture. The edge server connects with big drones via Wi-Fi
while connecting with the Cloud server via 4/5G. The edge
server can work without considering the impact of energy
consumption on the quality of service as it can be supplied
from the rescue boat. The edge server has substantially more
computational resources and data storage compared to the
small and big drones. Mainly, an edge server can store a large
amount of data (e.g., a few Terabytes of data). The edge server

Fig. 3. The cluster of drones and the communication of the drones in the
proposed architecture

zoomed to capture the images and videos. Then, the acquired
images and videos are processed to detect the person. After
that, the cluster leader can ﬂy closer to the area where a victim
is detected to capture images and video sent to an edge server
for further detection by advanced algorithms and rescue staff.
This improves the possibility of ﬁnding the victims. If a cluster
leader is not equipped with any camera, another approach can
be applied. For instance, after the human detection algorithm
at the leader detects a victim from images or videos sent by
a small drone, the leader can send commands to order the
small drone to ﬂy closer to the victim. Correspondingly, better
images and videos related to the victim can be captured. The
acquired data is then forwarded to an edge server to further
detect by complex algorithms or rescue staff.

In the proposed architecture, if a human detection algorithm
running in a big drone detects a person, then the images and
the video will also be forwarded to an edge server. Otherwise,
if a person is not detected, big drones will not send images
and videos to the edge server in real-time because of several
following reasons. Firstly, the good connection between big
drones and an edge server cannot be easily maintained all the

Small Drones LayerBig Drones LayerEdger Servers as Blockchain LayerCloud LayerApplication LayerCluster 1Small droneBig droneBig droneas a gatewayBig droneEdge ServerCluster 2(1)(1)(2)(2)Small droneis powerful enough to train some deep learning models for
human detection.

The cloud layer consists of cloud servers and cloud services.
For example, cloud servers and services provided by Google,
Amazon, or Microsoft can be used. The cloud servers can store
a large amount of data for an extended period. When more
data is stored, additional storage can be added easily without
any effort. The server can perform heavy computations, and
big data analysis, such as training deep learning models for
artiﬁcial intelligence (AI) approaches to remove noises and
detect humans accurately. Similarly, the resources such as CPU
(central processing unit), GPU (graphics processing unit), and
memory can be added easily when necessary. Cloud servers
also offer push notiﬁcations for informing a responsible person
or a group of persons in real-time by sending text messages or
notiﬁcations in a mobile app. A user with permission can use a
mobile app connected to cloud servers to acquire information
related to the search and rescue missions.

The big drones then consider authentication for small drones
in the proposed architecture before submitting to the servers.
The servers can be edger servers that are distributed in a
wide area. Those servers synchronize together to form a
unique blockchain that stores information. The blockchain
information is an audit for later study such as audit or analyzes
the danger area. For example, from victims’ data in dangers
and current tasks of rescue teams such as (Global Positioning
the blockchain system
System) GPS and level of danger,
provides optimized tactics to gain efﬁciency. As a result, with
information from rescue teams nearby, the blockchain system
supports rescuers who quickly react to dangerous accidents.

The architecture satisﬁes requirements from the less pow-
erful devices, and the blockchain has to be handled by
powerful servers. Remarkably, the formation and management
of a blockchain require at least a number of communication
between the participants and even a massive computation for
consensus process, cryptographic schemes, and veriﬁcation.
For example, if the blockchain formation is based on Proof-
of-Work consensus as Bitcoin, the robust computation is an
essential parameter for blockchain management. Therefore,
powerful servers, especially edge servers, have to implement
the blockchain layer in our consideration.

The blockchain layer controls the blockchain by agreeing
and storing information from the system. In detail, the layer
is a network of edge servers communicating among them to
form a unique chain of data blocks to gain the same system
state. Each edge server collects a bunch of data delivered
by big drones before packing up in a block candidate for
the blockchain extension. If the block candidate satisﬁes the
requirement from the correctness of the system, this block
gains agreement from other participants for attaching the
current blockchain. Despite the widespread use of Proof-of-X
consensus [28] in blockchain-based systems, our blockchain-
based architecture desires the use of Raft [29]. Raft is a leader-
based consensus that means to select the next proposer for
a block candidate; the system requires an election algorithm
instead of a powerful computation to solve a puzzle as Bitcoin

Proof-of-Work [13]. Therefore, Raft is an efﬁcient consensus
for the proposed architecture. Since blockchain is a distributed
database, the proposed blockchain system maintains system
operations and information. The blockchain contains partici-
pants’ information, a smart contract system, and transaction
execution. The blockchain stores drone information, including
multimedia data, location, power, and metadata. Hence, the
system can easily and quickly react to any issues through
this information, such as the low battery of drones, crashes
of drones, lousy weather, and obfuscation of speciﬁc areas.

V. COMPUTATION OFFLOADING

In a UAV-based application, computation ofﬂoading can
be described as switching computation (e.g., data processing,
image processing for human detection) from a drone to other
places, such as an edge server or a cloud server to save
energy consumption drone or reducing the system latency. The
proposed architecture supports several types of computation
ofﬂoading, including task ofﬂoading from small drones to a big
drone, ofﬂoading from big drones to an edge server placed at a
rescue boat, and ofﬂoading between the big drones. However,
the cases of computation ofﬂoading from a big drone to an
edge server and computation ofﬂoading between the big drones
are not the main ofﬂoading type because they hardly occur or
do not provide many beneﬁts. Therefore, in our paper, these
ofﬂoading types are often disabled. Depending on the speciﬁc
applications, these ofﬂoading types may be more useful.

In the main case, computation ofﬂoading from small drones
to big drones is carried out to extend the ﬂight time of small
drones, minimize the system latency, or maintain the accuracy
level of human detection. Ofﬂoading consists of policies
deciding that a task is processed locally at a small drone or
ofﬂoaded for remote processing at a big drone. The general
policies are rules based on results that compare the total energy
consumption of performing a task and sending the result to a
big drone with energy consumption of task ofﬂoading to a
big drone. In general, due to the limited resources of a small
drone, such as low battery capacity and low-speed CPU, it
takes a long period to perform data processing for detecting
a human from images or videos. Accordingly, most of the
image processing tasks are ofﬂoaded into big drones. There is a
trade-off between the latency and accuracy of human detection
at big drones. For example, a big drone can use advanced
and complex human detection algorithms (e.g., deep learning-
based or machine learning-based algorithms) to achieve human
detection accuracy. However, it may take a signiﬁcant latency
to run these algorithms. In this paper, several widely used
image processing algorithms for human detection, such as
Haar Cascades [30], Histograms of Oriented Gradients (HOG)
based approach [31], YOLOv3-tiny [32], YOLOv4 [27], and
YOLOv4-tiny [33] have been applied to demonstrate the
policies. In addition to general policies, the system can apply
speciﬁc policies for particular cases or scenarios. For instance,
when a connection between a small drone and a big drone is
interrupted or disconnected, the small drone can run the task

TABLE I
THE HARDWARE COMPONENTS FOR EDGE SERVERS

Docker
Orderer
Peer

Information
Version: 18.09.7
Process: 2, 2GB Memory, fabric:2.2.1
Process: 4, 4GB Memory, fabric:2.2.1

OS/Arch
linux/amd64
linux/x86 64
linux/x86 64

locally or store the images locally based on speciﬁc policies
which are more prioritized than the general policies.

VI. SETUP AND IMPLEMENTATION

The proposed architecture is implemented entirely from
small drones, a big drone, to end-user applications. Notably,
the small drones and big drone shown in Fig. 4 have been
used in the experiments. The components and estimated prices
of these drones are illustrated in Table II. In the setup, four
small drones and a big drone are formed in a cluster. Fig. 4
also shows an image captured by a drone (Autel robotics Evo
II) using a 6K resolution camera at the height of 60m from
the ground. This proves that a human detection algorithm is
required as it is not easy to detect persons in the image by
human eyes for a short moment in terms of seconds. When the
drone ﬂies higher, it is more challenging to detect the persons.
The network of edge servers encompasses six virtual ma-
chines, including three machines for Orderers tasks and three
machines for Peers tasks. Also,
this setup is based on a
virtual machine tool called VirtualBox Version 5.2.22 r126460
(Qt5.6.2) on a physical machine with Intel(R) Core(TM) i7-
8700 CPU @ 3.20GHz, 3.19GHz, 32GB RAM, and 64-bit
OS, x64-based processor. Each edge server can desire to
run Orderer or Peer tasks; even each edge server can run
both services. However,
to simplify tasks in a server, we
desire to separate those services into different virtual machines
with hardware components in Table I. Each organization has
the certiﬁcate
speciﬁc tasks, as in Fig. 5, but notice that
authority (CA) is unique for each organization. The detail for
our edge servers’ communication is speciﬁc in Fig. 6.

TABLE II
DRONE SPECIFICATIONS

Type

Main components

Small drone

holybro x500 frame and properler
4 Holybro ESC & 4 880kV motors
Flight controller Pixhawk 4
Lidar ranging sensor TFmini
Intel Realsense D435 camera
GPS Pixhawk 4 + Wi-Fi Dlink +
Teleradio
Basgibg 5500mAh, 14.8V battery
Intel UP square board
Other components

DJI S1000 drone
DJI FLIR Zenmuse XT2 (Thermal +
visual camera)
Nvidia Jetson Xavier NX
Tattu 26000mAh Lipo Battery Pack
Other components

Big drone

Price
(Euros)
about 1400
100
200
220
50
200
100

70
250
100
about 9.1k
2k
6k

400
600
100

The blockchain layer is based on Hyperledger Fabric, a
permissioned blockchain-based smart contract platform [34].
The system desires to adopt complete blockchain components,
including a consensus mechanism, data model, smart contract
ﬂow, and cryptographic schemes by the Hyperledger Fabric.
Since boat servers are the blockchain participants without
limited resources, a fully functioning blockchain ﬁts further
developments, especially SAR systems that are doing tasks
parallelly. Also, the permissioned blockchain provides a faster
gaining agreement among participants and victim’s conﬁ-
dentiality. In detail, Fabric introduces execute-order-validate
architecture with a Raft consensus, key-value data model,
and CA. Fabric asks the client to send transaction proposals
to speciﬁc peers as known as endorsed peers, for executing
and responding endorsed transaction proposals to the client
in the execution phase. The client then submits an endorsed
transaction proposal to an orderer who operates a total order
and packs transactions into a block in the ordering phase.
Finally, the orderer broadcasts the block candidate to all peers
for validation at the validation phase. This procedure can be
observed from Fig. 7 and the edge communication part of
Fig. 6. Hence, Fabric decomposes a blockchain-based system
into sub-roles, including CA, ordering service nodes, peers,
and clients. Due to a permissioned blockchain, Fabric utilizes
the CA system to create the certiﬁcate and gain the authority
for the system. The ordering service nodes as orderers imple-
ment the total order for transactions and ordered transactions
through a Raft consensus. The peer stores blockchain, system
state, and smart contract execution while the client task is
about interaction with peers. The edge servers deploy the
blockchain system through contribution and veriﬁcation based
on Hyperledger Fabric in the proposed scenario. The edge
servers process and form a CA, consensus, system state, and
ledger storage. The big drones act as clients while other edge
servers split and run peer and orderer roles as aforementioned.
Due to the beneﬁt of smart contracts, the design for the
smart contract is a demand in the scenario. The smart contract
sample consists of three prominent components,
including
drone object, rescue team, and hospital, as Fig. 8. The drone
object smart contract is to receive information from big drones
that can be the location of drones, the connection between
a big drone and small drones, and the history of previous
data. The rescue team contract is a data structure of rescue
team information, such as specialists, location, and previous
records or archives. The hospital contract represents a list
of hospital information like the rescue team’s information
and some extra information related to special equipment and
suppliers. Therefore, once ﬁnding a victim in an emergency,
a small drone sends information to a big drone who forwards
information to the drone object. The system fast reacts and
contacts the closest rescue team or the rescue team with avail-
able specialists by estimating current cases’ priority. Besides,
suppose the case is the most urgent and needs the support or
preparation of a hospital. In that case, the system, through the
smart contract, requests the closest hospital with support, such
as emergency rooms, laboratories, and blood suppliers.

(a) Small drone

(b) Big drone (Customized S1000)

(c) Cluster of drones

(d) An image captured by a drone (Autel robotics Evo II)
with a 6K resolution camera at 60m height

Fig. 4. Examples of small and big drones, and a cluster of drones

Fig. 5. The organization structure of edge servers

Fig. 6.
organization and the peer organization

The design of edge servers’ communication with the orderer

VII. EXPERIMENTAL RESULTS AND ANALYSIS

Latency of sending data (e.g., stream and images) by Wi-
Fi from a small drone to a big drone is measured. In reach
measurement, 100 transmitting times are carried out, and the

mean of them is reported. In addition, different packet sizes
such as 10k and 65508 bytes are sent in User Datagram
Protocol (UDP). The latency results are shown in Table III.
As each transmitted video frame has a size of 2.3MB, it takes
around 200-300ms to send a frame from a small drone to a
big drone. The transmitted latency can vary signiﬁcantly in
terms of dozens of milliseconds as it is affected by different
parameters, including noise source. It is difﬁcult to measure
the accuracy latency in actual applications, especially when
drones are running. Therefore, a latency of 300ms is used in
ofﬂoading decision-making.

TABLE III
LATENCY FOR SENDING PACKETS

Transfer protocol
UDP (10k bytes)
UDP (Max packet size)

Round Trip Latency (ms)
7.4
11.3

Latency (ms)
3.7
5.6

As mentioned in the experiments, state-of-the-art and also
image processing approaches for human detection
general
such as Haar Cascades [30], HOG [31], YOLOv3-tiny [32],
YOLOv4 [27], and YOLOv4-tiny [33] algorithms have been
applied and evaluated with the proposed architecture. Using
Haar Cascade classiﬁers was ﬁrst introduced in [30]. This
method provides fast computation for object detection, but
it is more sensitive to false-positive detection, HOG feature
descriptors can be used with Support Vector Machine (SVM)
or another machine learning algorithm as a classiﬁer [31].
HOG-based detector for detecting humans used in tests was
from the OpenCV library. Frames are scaled down to 680x480
resolution for HOG and Haar Cascades approaches that are
only applied in the smaller drone. For all versions of the

EdgeServersOrderer OrganizationPeer Organization-CA - TLS-CA - Identity-CouchDB-Cli-Peer-CA - Identity-Order123PeersOrderers???Fig. 7. The sequence diagram of the proposal

large processing latencies for running these algorithms.

In the case of YOLOv3-tiny, the latency of processing a
frame at a small drone is around 710ms. In contrast, the total
latency of transmitting a frame from a small drone to a big
drone (i.e., transmission latency of 300ms) and processing a
frame at a big drone (i.e., processing latency of 15-20ms)
is around 320ms. Therefore, it is recommended to ofﬂoad
the computation tasks from a small drone to a big drone to
minimize the total latency.

In the case of using Haar Cascades and HOG, the latency
of processing a frame at a small drone is around 270ms
and 330ms, respectively. The total latency of transmitting a
frame from a small drone to a big drone and processing a
frame on a big drone is around 310ms. In this situation,
the system latency cannot be saved much when ofﬂoading.
Even in the best case, when a frame transmission latency is
around 200ms, the total latency cannot be reduced dramatically
(e.g., around 60-100ms). However, ofﬂoading to a big drone
provides the possibility to process the images with human
detection algorithm with a high mean average precision (mAP)
while maintaining low latency. Therefore, to simultaneously
minimize the latency and achieve highly accurate human
detection results, it is recommended to apply computation
ofﬂoading from a small drone to a big drone according to
the proposed architecture and the experimented drones. The
idle/standby power consumption of the Intel UP Squared board
and Jetson Xavier NX is 3100mW and 4655mW, respectively.

Fig. 8. The sequence diagram of smart contract in the proposal

YOLO algorithms, frames are resized to 416x416 resolution.
Due to the scope of the paper, the mentioned approaches
are tested with a video from the P-DESTRE dataset [35]
to establish the feasibility of doing object detection tasks in
smaller and bigger drones. Video is pre-processed to have
similar technical speciﬁcations as the video output from an
Intel RealSense D435 camera attached to the small drone.
The technical speciﬁcation is 1280x720 resolution, 30 fps
framerate, 8073kB/s bitrate, and 30-second video length.

Some results of running Haar Cascades, HOG, and YOLO3-
tiny based algorithms at a small drone’s Intel UP board are
shown in Table IV. The result shows that the board requires

PeerPeerPeerOrdererOrdererOrdererTransaction proposalTransaction proposalTransaction proposalEndorsed transaction proposal  Endorsed transa...Big DroneSmall DroneMediate dataResponseResponseResponseBlock candidateVote requestVote requestVote acceptVote acceptBlock candidateBlock candidateBlock eventEdge CommunicationBlock candidateBlock candidateRescuer TeamHospitalBig Droneurgent inforequirementDrone Objectupdate inforesponseadd rescuer teamTABLE IV
INTEL UP SQUARED AND JETSON XAVIER NX PERFORMANCE FOR
DIFFERENT APPROACHES

TABLE VI
POWER CONSUMPTION OF JETSON XAVIER NX WHEN RUNNING THE
YOLOV3-TINY

Intel UP Squared
Approach
Haar Cascades
HOG
YOLOv3-tiny

Jetson Xavier NX

Approach

YOLOv3-tiny
YOLOv4-tiny
YOLOv4

Process Time (s)
239
271
604

Frames per Second
3.7
3.3
1.4

Frames per Second

10W
4 CPU Cores
53.2
48.3
4.7

15W
4 CPU Cores
61.8
57.5
4.7

15W
6 CPU Cores
67.8
61.3
4.7

TABLE V
POWER CONSUMPTION OF AN INTEL UP SQUARED

Approach
Haar Cascades
HOG
YOLOv3-tiny

Power Consumption (mW)
7710
7790
7840

The energy consumption of an Intel UP Squared board is about
2083mJ, 2360mJ, and 5600mJ for processing a frame with
Haar Cascades, HOG, and YOLOv3-tiny, respectively, while
energy consumption for sending the frame is approximately
650-975mJ depending on the transmission latency (i.e., 200-
300ms per frame). Therefore, ofﬂoading the processing from a
small drone to a big drone helps reduce the energy consump-
tion of the small drone signiﬁcantly.

As mentioned, Jetson Xavier NX is used as a computation
board for our big drone. Jetson Xavier NX supports several
modes for enabling different power usage and the number of
cores that can impact the ofﬂoading decision-making in terms
of latency. The latency and power consumption results of run-
ning different human detection algorithms with these modes
are shown in Table IV and Table VI, respectively. The power
consumption measurement results can contain an error rate of
1-5% due to the error rate of the power monitoring device. The
results show that the different latency for processing a frame
in various power modes on the Jetson Xavier NX is around
5-7ms, while the different power consumption of these nodes
is around 4-5W. Therefore, it is unnecessary to run the Jetson
Xavier NX with high power modes and with the maximum
number of CPU cores.

The big drone without any computation board consumes
about 1500W in a hover mode, and this can reach 4000W
for the maximum power consumption. The Jetson Xavier NX
consumes about 13-19W for running different human detection
algorithms. The power consumption of the Jetboard is too
small when comparing with the power consumption of the big
drone. Therefore, applying computation ofﬂoading from small
drones to the big drone almost does not affect the working
time of the big drone which is around 20 minutes.

The experiment for edge server communication is to eval-
uate the throughput of the system in the previous section. In
particular, the system deploys a set of smart contracts and

Power modes
10W 2 CPU Cores
10W 4 CPU Cores
15W 6 CPU Cores

Power Consumption (W)
9.31
13.11
18.62

TABLE VII
THE SCALABILITY OF EDGE SERVERS INCLUDES THE AVERAGE SECOND
BEING THE TIME TO HANDLE A REQUEST AND THE CAPACITY OF
MESSAGES

Request Types
Invoke (update info)
Invoke (urgent info-requirement)
Query (data drone)

Average second (s)
0.672
0.219
0.350

Capacity (MB)
4
0.5
16

calculates the throughput for two common requests, such as
invoke and query. The invoke request is to make updates or
changes to the system state, while the query request inquires
information stored by the system. In this scenario, the invoke
request attempts to update an image 1280x720 to the edge
system corresponding to small drone images. The requests
are executed by the peers before ordered and packed into
a block candidate by orderers. The query request retrieves
information at the current state; hence, the request does not
need to communicate to the orderers. In the experiment, we
evaluate the period for a request/query execution. In detail,
the invoke (update info) request represents the messages
transferring images to the edge system. The invoke (urgent
info-requirement) is the big drone’s request and communicates
to all other smart contracts, as Fig. 8, including a request
from the big drone, urgent information message transfer, and
requirement message transfer. Since the invoke request needs
several communications to peers and orderers, the period of
invoke requests is higher than the query result, as in Table VII.
However, the invoke request related to smart contract com-
munication takes a smaller period than the query request. A
possible reason for the higher period of processing a query
request than an invoke (urgent info-requirement) request is the
time for retrieving information from the blockchain. Also, the
query’s capacity of approximately 16 MB is another reason.
The capacity of update info invoke from a big drone to the
system is 4MB for a mediate data update. A difference from
those messages is the low capacity of function calls or requests
among smart contracts. In addition, the evaluation is based on
block conﬁguration parameters, consisting of batch time out
(2s), the maximum messages of a block (10 messages), and
the maximum number of bytes (99MB).

VIII. CONCLUSION AND FUTURE WORK

This paper presented a novel IoD architecture utilizing
blockchain for SAR missions. The architecture consisting of
multi-layer drones (i.e., small drones and big drones) and edge
computing supports computation ofﬂoading for prolonging the
operating time of drones. In addition, the proposed architecture
can help cover the large searching areas. Correspondingly, a

rescue team can search for many people simultaneously in
a large area with minimal time. Furthermore, the proposed
architecture offers a high level of transparency, traceability,
data integrity, and security via the integrating Hyperledger
blockchain network. With the smart contract, many activities
related to post SAR missions, such as operations, can be car-
ried out quickly without interfering or controlling the control
center. Via the experimented results, the proposed architecture
is a promising approach to improve the quality of services of
an Internet-of-Drones system.

Although computation ofﬂoading can help prolong the oper-
ating time of small drones, the efﬁciency is not high. A drone
uses most of the energy for running its motors. Therefore, it is
required to combine computation ofﬂoading with techniques
for reducing the energy consumption of the motors. In future
work, the energy consumption of motors in different cases,
including various heights, will be considered together with
the energy consumption model for ofﬂoading. In addition,
different zoom levels of a big drone’s camera will be applied
in the experiments to ﬁnd out the approach that helps improve
the quality of images without ﬂying the big drone for a long
distance. Also, the small drones and the big drones will be used
for collecting images and videos of volunteers who perform
several water-related activities such as swimming and ﬂoating
on the water. The collected data will be sent to edge servers to
train deep learning models. The trained model will be veriﬁed
at big drones via detecting a person in the stages of SAR.

IX. ACKNOWLEDGEMENTS

Mr. Tri Nguyen is supported by TrustedMaaS project by the
Infotech institute of the University of Oulu and the Academy
of Finland 6Genesis Flagship (grant 318927).

REFERENCES

[1] D. P. Coppola, Introduction to international disaster management.

Elsevier, 2006.

[2] P. Agraﬁotis et al., “Real time earthquake’s survivor detection using a
miniaturized lwir camera,” in Proceedings of the PETRA’16, pp. 1–4,
2016.

[3] Z. Zaheer et al., “Aerial surveillance system using uav,” in 2016 thir-
teenth international conference on wireless and optical communications
networks (WOCN), pp. 1–7, IEEE, 2016.

[4] R. I. H. Abushahma et al., “Comparative features of unmanned aerial
vehicle (uav) for border protection of libya: a review,” in 2019 IEEE
15th International Colloquium on Signal Processing & Its Applications
(CSPA), pp. 114–119, IEEE, 2019.

[5] Q. Li et al., “Towards active vision with uavs in marine search and
rescue: Analyzing human detection at variable altitudes,” in 2020 IEEE
International Symposium on Safety, Security, and Rescue Robotics
(SSRR), pp. 65–70, IEEE, 2020.

[6] J. Pe˜na Queralta et al., “Autosos: Towards multi-uav systems supporting
maritime search and rescue with lightweight ai and edge computing,”
arXiv preprint arXiv:2005.03409, 2020.

[7] I. Tcarenko et al., “Energy-efﬁcient iot-enabled fall detection system
with messenger-based notiﬁcation,” in International Conference on
Wireless Mobile Communication and Healthcare, Springer, 2016.
[8] M. Ali et al., “Intelligent autonomous elderly patient home monitoring
system,” in ICC 2019-2019 IEEE International Conference on Commu-
nications (ICC), pp. 1–6, IEEE, 2019.

[9] A. M. Rahmani et al., “Exploiting smart e-health gateways at the edge
of healthcare internet-of-things: a fog computing approach,” Future
Generation Computer Systems, 2017.

[10] M. Ali et al., “Blockstack: A global naming and storage system se-
cured by blockchains,” in 2016 {USENIX} annual technical conference
({USENIX}{ATC} 16), pp. 181–194, 2016.
Accessed
blockchain.”

June
https://www.ibm.com/topics/beneﬁts-of-blockchain.

2020, Available:

[11] “Beneﬁts

of

[12] T. N. Gia et al., “Artiﬁcial intelligence at the edge in the blockchain of
things,” in International Conference on Wireless Mobile Communication
and Healthcare, pp. 267–280, Springer, 2019.

[13] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[14] A. Nawaz et al., “Edge computing to secure iot data ownership and trade
with the ethereum blockchain,” Sensors, vol. 20, no. 14, p. 3965, 2020.
[15] A. Allouch et al., “Utm-chain: blockchain-based secure unmanned trafﬁc
management for internet of drones,” Sensors, vol. 21, no. 9, p. 3049,
2021.

[16] J. Scherer et al., “An autonomous multi-uav system for search and
rescue,” in Proceedings of the First Workshop on Micro Aerial Vehicle
Networks, Systems, and Applications for Civilian Use, DroNet ’15, (New
York, NY, USA), p. 33–38, Association for Computing Machinery, 2015.
[17] A. Koubˆaa et al., “Deepbrain: Experimental evaluation of cloud-based
computation ofﬂoading and edge computing in the internet-of-drones for
deep learning applications,” Sensors, vol. 20, no. 18, p. 5240, 2020.

[18] R. Wang et al., “Agent-enabled task ofﬂoading in uav-aided mobile edge
computing,” Computer Communications, vol. 149, pp. 324–331, 2020.
[19] W. Jung et al., “Acods: adaptive computation ofﬂoading for drone
surveillance system,” in 2017 16th Annual Mediterranean Ad Hoc
Networking Workshop (Med-Hoc-Net), pp. 1–6, IEEE, 2017.

[20] X. Hou et al., “Distributed fog computing for latency and reliability
guaranteed swarm of drones,” IEEE Access, vol. 8, pp. 7117–7130, 2020.
[21] W. Deng et al., “Parallel multi-block admm with o (1/k) convergence,”
Journal of Scientiﬁc Computing, vol. 71, no. 2, pp. 712–736, 2017.
[22] X. Hou et al., “Fog based computation ofﬂoading for swarm of drones,”
in ICC 2019-2019 IEEE International Conference on Communications
(ICC), pp. 1–7, IEEE, 2019.

[23] V. Sharma et al., “Socializing drones for inter-service operability in ultra-
dense wireless networks using blockchain,” in MIST ´17, pp. 81–84, 2017.
[24] R. C. Merkle, “A digital signature based on a conventional encryption
function,” in Conference on the theory and application of cryptographic
techniques, pp. 369–378, Springer, 1987.

[25] Y. Xiao et al., “A survey of distributed consensus protocols for
blockchain networks,” IEEE Communications Surveys & Tutorials, 2020.
[26] G. Wood et al., “Ethereum: A secure decentralised generalised transac-

tion ledger,” Ethereum project yellow paper, pp. 1–32, 2014.

[27] A. Bochkovskiy et al., “Yolov4: Optimal speed and accuracy of object

detection,” arXiv preprint arXiv:2004.10934, 2020.

[28] F. Tschorsch and B. Scheuermann, “Bitcoin and beyond: A technical
survey on decentralized digital currencies,” IEEE Communications Sur-
veys & Tutorials, vol. 18, no. 3, pp. 2084–2123, 2016.

[29] D. Ongaro and J. Ousterhout, “In search of an understandable con-
sensus algorithm,” in 2014 {USENIX} Annual Technical Conference
({USENIX}{ATC} 14), pp. 305–319, 2014.

[30] P. Viola and M. Jones, “Rapid object detection using a boosted cascade
of simple features,” in Proceedings of the 2001 IEEE Computer Society
Conference on Computer Vision and Pattern Recognition. CVPR 2001,
vol. 1, pp. I–I, 2001.

[31] N. Dalal and B. Triggs, “Histograms of oriented gradients for human
detection,” in 2005 IEEE Computer Society Conference on Computer
Vision and Pattern Recognition, vol. 1, pp. 886–893 vol. 1, 2005.
[32] P. Adarsh et al., “Yolo v3-tiny: Object detection and recognition using
one stage improved model,” in 2020 6th International Conference on
Advanced Computing and Communication Systems (ICACCS), pp. 687–
694, IEEE, 2020.

[33] Z. Jiang et al., “Real-time object detection method based on improved

yolov4-tiny,” arXiv preprint arXiv:2011.04244, 2020.

[34] E. Androulaki et al., “Hyperledger fabric: a distributed operating system
for permissioned blockchains,” in Proceedings of the thirteenth EuroSys
conference, pp. 1–15, 2018.

[35] S. V. A. Kumar et al., “The P-DESTRE: A Fully Annotated Dataset for
Pedestrian Detection, Tracking, and Short/Long-Term Re-Identiﬁcation
From Aerial Devices,” IEEE Transactions on Information Forensics and
Security, vol. 16, pp. 1696–1708, 2020.

