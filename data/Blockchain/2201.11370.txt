An IoT Blockchain Architecture Using Oracles and
Smart Contracts: the Use-Case of a Food Supply
Chain

Hajar Moudoud ∗†, Soumaya Cherkaoui ∗, Lyes Khoukhi †
∗ Department of Electrical and Computer Engineering, Universit´e de Sherbrooke, Canada
† University of Technology of Troyes, France
{hajar.moudoud, soumaya.cherkaoui}@usherbrooke.ca, lyes.khoukhi@utt.fr

2
2
0
2

n
a
J

7
2

]
I

N
.
s
c
[

1
v
0
7
3
1
1
.
1
0
2
2
:
v
i
X
r
a

Abstract—The blockchain is a distributed technology which
allows establishing trust among unreliable users who interact
and perform transactions with each other. While blockchain
technology has been mainly used for crypto-currency,
it has
emerged as an enabling technology for establishing trust in the
realm of the Internet of Things (IoT). Nevertheless, a naive
usage of
the blockchain for IoT leads to high delays and
extensive computational power. In this paper, we propose a
blockchain architecture dedicated to being used in a supply chain
which comprises different distributed IoT entities. We propose a
lightweight consensus for this architecture, called LC4IoT. The
consensus is evaluated through extensive simulations. The results
show that the proposed consensus uses low computational power,
storage capability and latency.

Keywords—Blockchain; Internet of Things (IoT); Consensus;

Supply chain.

I. INTRODUCTION

With the rapid rise of smart devices, smart homes, smart
cities, and smart everything, the Internet of Things (IoT) has
gained popularity among users [1][2]. IoT can be deﬁned as
a group of interconnected things or devices, in a private or
a public network, sharing data to provide a service such as
automation or monitoring. However, in order to fully take
advantage of the IoT paradigm, several problems should be ad-
dressed [3]. These problems include particularly, security and
privacy issues, especially when private and business-related
information are collected and shared among different entities.
Another set of related problems are integrity, trustworthiness,
and non-repudiation of the data shared among the different
entities [4]. For example, in a smart hospital, the subject will
receive treatment based on data provided by sensors; but could
we trust the information provided by these sensors?

Blockchain (BC) has been proposed as a solution to over-
come these problems [5]. Because it is decentralized, BC
eliminates the need of having a third party verify data integrity,
trustworthiness and non-repudiation. Also, BC does not have
a single point of failure. BC is a distributed technology that
allows transaction veriﬁcation by members which could be
dishonest. It is an immutable ledger (chain) that maintains a
continuously growing set of data records called blocks. Data
records store information about each transaction performed by

the users. Once a valid block is gathered, it is connected to
the last block of the chain.

BC uses cryptography signatures, public/private keys, and
a consensus mechanism for appending any new block into the
chain. A consensus corresponds to a protocol that establishes
an agreement among independent entities about
the state
of the BC. The ability of BC to reach consensus among
dishonest distributed peers provides a high system availability
and security for IoT systems involving numerous entities. Still,
the computing power needed to run the BC is somehow in-
compatible with the restrictive features of several IoT systems
[6] [7]. For example, IoT endpoints generally have limited
resources; they are power-constrained with limited computing
energy, storage, and bandwidth.

There have been several works that tried to address the
challenges of using BC in an IoT context [8]. However,
most of these works, if not all, display shortcomings in one
or several of the following aspects; openness, lightweight
consensus, use of smart contracts, and Oracles. We deﬁne
openness as the capacity of non-members of BC to access
stored data. For example, when using an architecture such
as the one proposed in [9], only members of the BC can
access data, which can restrict access to information that
can be of interest to the public in general. A consensus for
IoT BC should be non compute-intensive; in other words,
lightweight. This aspect has not been addressed in several
works [10][11]. Smart contracts implement a formal model to
provide a division of labour between stakeholders, which can
be useful for implementing rules and policies. Smart contracts
are absent in several works like [12]. An Oracle is a third-
party agent who veriﬁes data that cannot be reached or fetched
directly by the BC [13]; in other terms, data that comes from
the physical world (e.g., sensor data). This aspect has not been
addressed in many works [14][15].

In this paper we propose a secure architecture that over-
comes the challenges of using BC in an IoT context, that
IoT
ensures openness, uses a lightweight consensus for
(LC4IoT), smart contracts, and Oracles. To accurately illus-
trate the architecture, a food supply chain use-case will be
adopted throughout the paper. Still, the concepts presented in

 
 
 
 
 
 
this paper are well suited for other types of IoT applications.
The remainder of this paper is organized as follows. In
section II, we present the proposed architecture. Section III
details LC4IoT used in the architecture. Section IV studies
the performance of LC4IoT in comparison with the consensus
used by the Bitcoin architecture. In section V, we give an
overview of some proposed BC IoT architectures. Finally,
section VI concludes the paper.

II. FOOD SUPPLY BLOCKCHAIN

The food supply chain system includes multiple stakehold-
ers such as farmers, distributors, retailers, and consumers
(see Fig. 1). These stakeholders can be located in different
regions, with produce possibly transiting between several
countries before arriving at a consumer. Due to the lack of
trust and transparency among tiers, produce tracing becomes
challenging. In this context, BC ability to permanently record
data and provide real-time access to information could help
overcoming the problem of produce traceability. The proposed
architecture involves four tiers: overlay IoT network, smart
farm, Oracle’s network, and Cloud. Thereafter, we deﬁne each
tier of the architecture.

A. Overlay network

We introduce a peer-to-peer overlay network including
supply chain members. The overlay network forms a dis-
tributed network involving multiple stakeholders. This peer-
to-peer network is built on top of the supply chain system,
enabling stakeholders connected to it to communicate. All
members of the supply chain are initialized at the beginning of
communication and identiﬁed by a public key. A new member
is accepted in the overlay network if she is approved by a
quorum. A “quorum” is the minimal number of members
required to reach an agreement. All members of the overlay
network have a list of approved member keys stored in their
local storage.

We use smart contracts to ensure that rules and policies
are respected by parties in the overlay network. In this
architecture we use smart contracts in two ways; ﬁrst, they are
applied by a third party who offers transparency and efﬁciency,
second, they are implemented to govern operations between
stakeholders.

B. Smart farm

The smart farm is comprised of IoT devices, proxy nodes,

storage and BC.
In general, BC has three main ledger types: public, consor-
tium, and private BC [16]. In a public BC, everyone can
join the network and all BC members are responsible for
transaction validation. The consortium BC is different in that,
it is partly decentralized; only some members oversee the
consensus determination. Generally, consortium BC is built
by several organizations. Lastly, private BC restricts access to
network members only. Private BC is implemented by a single
company or an organization. In the proposed architecture we
use a public/private BC. The private BC is used to store private

Fig. 1: Food supply chain overlay network

information of the smart farm. The public BC is used for
tracking produce, and for providing information to the general
public. Fig. 2 illustrates the smart farm BC architecture.

IoT sensors are responsible for gathering data from the
ﬁeld in a smart farm (e.g. RFID tags for cattle). Since
IoT devices have limited computing power and energy, we
use proxy nodes to outsource computing. The imparting of
information between the smart farm IoT devices is referred to
as a transaction. Every produce is identiﬁed by a public key
that changes with every transaction. Data are stored centrally
in designated storage, while transactions are recorded in the
private/public BC.

C. Oracle network

In the food supply chain, data is generally collected from
sensors scattered across multiple locations. We use Oracles to
check the veracity of sensor data. For example, an Oracle
can inform whether the temperature inside a refrigerated
track transporting produce has come above a certain threshold
during the transportation journey.
To verify data, an Oracle Oi needs to compare received data
x from a sensor with fetched data y by the Oracle (see Eq.
1).

Oi(x) =

(cid:40)

1
0

if Oi.verif y(x, y) == T rue
otherwise.

(1)

In our architecture, multiple Oracles can be used. The
Oracles’ network is able to divide the approval process for
data veracity among multiple parties. We deﬁne the Oracles’
network data veriﬁcation process as follows: M out of N
multi-signature transaction should be reached among Oracle
parties. A transaction is valid when M out of N Oracles sign
it, that is, the sum is greater than a threshold δ (Eq.2).
∀Oi, Oi ∈ {0, 1}∗ → {0, 1}k, 1 ≤ i ≤ M,

δ ≤

M
(cid:88)

i=1

Oi(x)

(2)

Fig. 2: Smart farm architecture based on BC

The δ value depends on the number of active Oracles and
the fault tolerance of the system. Where M is the number of
active Oracles in the network and k is a security parameter.

If all conditions are validated, data is then transferred to the
veriﬁed transaction pool for mining.

D. Cloud

B. Data transfer off-chain

Cloud stores raw data received from the Oracles’ network.
Data is either publicly accessible, ensuring data transparency
or has limited access to preserve the privacy of stakeholders.
Each member of the food supply chain allocates a Cloud space
for personal usage, linked with a Cloud public key CP k. This
process guarantees that data is correctly routed and the source
is identiﬁed.
We propose using a private BC in the Cloud to store data
hash, enabling data trustworthiness and non-repudiation. In
BC, the hash function is the algorithm used to write a new
transaction through the mining process [17]. It maps data and
generates a summary; the unique ﬁngerprint substitutes an
input string from arbitrary to a ﬁxed size. The hash enables
data integrity by comparing the hash value along with some
additional inputs, like timestamp and previous block hash.
BC uses the SHA-256 secure hash algorithm, which provides
almost a unique and ﬁxed size of 256 bits (32 bytes), requiring
low computing power.

III. LIGHTWEIGHT CONSENSUS

In this section, we explain the transaction veriﬁcation pro-
cess and how off-chain storage is performed in the proposed
architecture. Also, we detail LC4IoT.

A. Transaction veriﬁcation

In order to append a new transaction in BC, miners need
to verify some conditions. This veriﬁcation process is divided
into three steps:

1) First, miners verify the sender’s signature to validate
transaction authenticity. This digital signature authen-
ticates the sender, using the public key stored in the
transaction.

2) Second, miners check if the public key is predeﬁned;
which means, the sender public key has a stored trans-
action in the BC. Otherwise, it is a genesis transaction
(see section C).

3) Third, miners verify the Oracles’ network signatures.

The BC could be used as a mediator for data transfer.
Generally, there are two methods used to store data within BC;
ﬁrst, data is sent within a transaction, it is the case with Bitcoin
[18], or, data is stored in smart contracts, it is the case with
Ethereum [19]. Both approaches submit a transaction in the
BC. Nevertheless, the BC block size is limited. To solve this
problem, several proposals have been put forward. A trivial
solution consists in increasing the block size. For example,
Bitcoin Cash [20] upgraded the block size from 1 MB to 8
MB. Still, this solution may affect the operation of nodes and
tends to be more expensive. For our architecture, we store raw
data off-chain and metadata on-chain, to improve latency and
system scalability.

In this section, we outline how data transfer is performed in
BC. We explain mining steps in the case where Alice wants to
transfer 5GB of data to Bob. Let Alice be a member of the BC,
which means that her public key exists in a previous block of
the chain. First, Alice will store the 5GB of data in the Cloud.
Alice is identiﬁed by the triple (P k, P rk, a) where P k is the
distributed public key, P rk is the secret private key, and a is
the address where she stored data. Since block size in BC is
limited, Alice will only store metadata on-chain and the actual
data off-chain. Alice will share the private key with Bob and
encrypt metadata with the public key. Once the transaction is
created, Alice will sign it using the private key. A node in the
network will verify the state of the transaction, by verifying
the signature, public key of both the sender and the receiver.
Afterwards, the transaction is sent to the veriﬁed transaction
pool.

A node in the network can also act as a miner. Miners of the
network choose a transaction form the pool and build a block.
Different miners could pick the same transaction. Miners in
the network will attempt to reach a consensus to append a
block. The ﬁrst miner who reaches a consensus will broadcast
the new block to other miners. The transaction becomes a
permanent part of the ledger, Bob can now have access to the
address where Alice has stored data with her private key.

C. Lightweight consensus for IoT (LC4IoT)

We propose LC4IoT algorithm that integrates the use of
Oracles for block appending in the BC. In step 1, nodes
in the network fetch a random transaction Tk from the
veriﬁed transaction pool and try to create a new block Bi+1.
To simplify, we admit that every block contains only one
transaction. Every transaction has the following arguments,
Tk(P k, CP k, Oi.sig, metadata), where P k is the public key
of the data provider, CP k is the Cloud public key, Oi.sig is
the Oracles signature and metadata is the metadata that we
want to store. The output of the algorithm will be a new block
that contains the transaction. In step 2, the algorithm veriﬁes if
the stored signature in the transaction belongs to the Oracles’
network or not. If the provided signature does not belong to
the list of the Oracles’ network, the algorithm returns False.
Otherwise, the algorithm veriﬁes if the transaction is a storing
transaction or a genesis transaction.

To store a transaction, miners should calculate the times-
tamp T S and the hash of the previous block (step 14). Finally,
in steps 15 to 16, the algorithm return the new block Bi+1,
which contains the hash of the previous block, transaction and
the hash of the new block.

To ensure the system liveness, which means the growth
of the system, we will use PBFT [21] consensus for genesis
transaction. This consensus handles f faulty members of the
network. If the sum of stakeholders Si in the overlay network
is superior to a min 3f + 1 we accept the demand. For a
genesis transaction, the system allocates a new public key to
the requester, which will be stored in a new block.

IV. PERFORMANCE ANALYSIS

In this section, we provide a quantitative performance eval-
uation of LC4IoT. First, we conduct a simulation to evaluate
the computing power and time consumed by the proof of work
consensus. Second, we assess LC4IoT: computational power,
memory footprint, and latency.

A. Proof of work evaluation

The proof of work is the consensus algorithm that secures
the network by demanding to the requester some work. An
example of BC that uses the proof of work consensus is
Bitcoin [22]. To reach an agreement among users, each node
of the network calculates a hash value called “Nonce” in the
block header. Miners in the network will try to estimate a
secret value, then embed it in the block. All information inside
the block header will be combined, next inputted to a SHA-
256 hash function. The ﬁrst miner who will reach a hash
function output less than a threshold can add the new block
to the chain. The new block is then broadcast to network
users. In Bitcoin, a valid block hash requires that it starts
with several zeros, which refer to difﬁculty level, adjusted to
limit block generations. Currently, the difﬁculty reached by the
Bitcoin is ~18 zeros [23]. Since we cannot choose the hash
value of a block, miners try several combinations to solve this
puzzle. To demonstrate the drawbacks of the proof of work
consensus, we implement a proof of work using JavaScript

Algorithm 1 Block appending algorithm
Input ∀Tk ∈ T , ∀Bi ∈ B, ∀Oi ∈ O;
Output New block Bi+1;

1: Initialize:
2: Tk : A transaction from the veriﬁed transaction pool.
3: Bi : The last appended block in the blockchain B.
4: Oi : Oracle,
5: m : The number of Oracles in the network
6: j = 0
7: while j ≤ m||Tk.output(2) (cid:54)= Oj.sig do
8: j ← j + 1
9:
10: end while
11: if j = m + 1
12: Return F alse
13: else
14:
15:
16:
17:

Bi.Ti.outputs(2) == Tk.outputs(o) do

while i ≥ 0 ||

i ← i − 1
end while
if i = 0 then

else
T S ← date.gettime()

Tk ← GenesisT ransaction(Tk)
update transaction pool

18:
19:
20:
21:
22:
23:
24: Bi+1.H ← CalH(i1, Bi.H, T S, Tk)
25: Bi+1 ← Bi+1(Bi.H, T S, Tk, Bi+1.H)
26:
27:
28: end if

Return Bi+1

end if

Fig. 3: Proof of work evaluation

enabling change of difﬁculty. We simulate the appending of
one block on Intel machine Core™ i7-8550U CPU @ 1.80
GHz 2.00 GHz with 16.0 RAM. Fig. 3 shows the results of
processing time and computational power. Simulation result
proves that we cannot use a proof of work consensus in the
context of the food supply chain.

Fig. 4: computational power evaluation

Fig. 5: Memory evaluation

B. Performance evaluation

In this section, we evaluate LC4IoT in contrast

to the
proof of work consensus. In our experiments, we ﬁxed the
difﬁculty variable to 4 for the proof of work. We use the
following evaluation metrics: computational power, memory
footprint and processing time. We run the simulation 3 times
to add 10 blocks into the BC and record CPU evolution
during the time. Fig. 4 shows the results of computational
power used by both consensuses. Local max annotation refers
to the consensus execution peak. As we mentioned before,
we separate transaction veriﬁcation from block appending,
Oracles network oversees transactions, whereas miners append
blocks to the ledger. To quantify the advantages of this design
decision, we perform simulation while we alter the number of
blocks to add to the BC; simulation results are presented in
Fig. 5.

Some BC mining algorithms are memory intensive; RAM
footprint required by consensus is higher than system avail-
ability. By comparing the memory usage of both consensuses,
we display the need for a high-powered computer to perform
mining and solve the complex puzzle for the proof of work.
Even if proof of work algorithm makes memory requirements
seem secondary in comparison with the high-computational
power consumed, a lot of RAM usage will make mining run
more slowly; leading to an increase in the delay. LC4IoT
algorithm improves block veriﬁcation process and entails a
low memory growth rate of 0.362% per block. The delay
metric, shown in Fig. 6, refers to the time consumed by the
algorithm to append blocks into the ledger. In Fig. 6 the delay
evaluation of the proof of work and LC4IoT are illustrated.
As evidenced by the ﬁgure, the proof of work delay increases
with the number of blocks to add in the BC. The proof of
work consumes 7.81s to append 10 blocks, while LC4IoT
only needs 0.139s for the same number of blocks.

V. RELATED WORK

Various works have been conducted for using BC in the IoT
context. Fern´andez-Caram´es et al. reviewed the state of the
art of BC and IoT applications and evaluated the limitations
of BC usage for IoT applications [8]. Likewise, BC who
implements smart contracts were used for several purposes.
Choi et al. utilized BC smart contracts to secure the control
of IoT sensors [15]. Novo et al. proposed a distributed IoT

Fig. 6: Delay evaluation

architecture based on BC smart contracts to ensure access
management. This architecture uses a proof of concept con-
sensus [9] and private BC to secure information. Yet, using a
private BC may restrict access to information with a general
interest for users. Michelin et al. designed a SpeedyChain
framework based on BC, allowing smart vehicles to share data
in a secure matter [12]. Liu et al. presented a BC framework
ensuring data integrity [14]. Further, BC has helped the supply
chain overcoming its limitations such as transparency, relia-
bility and integrity. Tian et al. in [24] proposed a conceptual
framework for agricultural produce traceability using BC and
Radio-Frequency Identiﬁcation (RFID) technology. The BC
stores information provided by the RFID technology to help
track produce. Korpela et al. in [25] studied the requirement
for supply chain integration with the BC. This investigation
proposed the usage of Cloud applications to achieve inter-
operability in the supply chain. However, both proposals in
[24] and [25] do not take into consideration the high number
of transactions managed by BC. The supply chain conveys a
high volume of communications and requires real-time access
to information. A conventional BC needs from seconds to
minutes to append a block into the chain. As an example, for
Bitcoin BC, block generation takes 10 minutes [26]. Several
BC consensuses require high computational power, which is
not suitable for the constrained nature of IoT sensors. In their
work, Su et al. developed and implemented a supply chain
based on BC technology, using Ethereum consensus [10].
Pass et al. proposed a fruitChain protocol using the proof of
work consensus [11]. Both the proof of work consensus and
the Ethereum consensus need high computing resources for

block appending. Dorri et al. proposed a lightweight scalable
blockchain (LSB) that reduces the delay for appending data to
the BC [27]. In [27], however, the proposed BC architecture
does not address how external data outside the network is
accessed.

VI. CONCLUSION

Blockchain (BC) establishes trust among different parties
who could be dishonest, enabling data sharing in a secure
matter. The use of BC in an IoT context may offer several ben-
eﬁts like trustworthiness and data non-repudiation. However,
the constrained nature of IoT sensors is incompatible with the
high computational power needed for the BC. In this paper, we
presented a secure IoT BC architecture whose usage was illus-
trated for the use case of a food supply chain. The proposed
architecture uses an Oracles’ network and smart contracts,
ensuring produce traceability and system openness. Further,
we proposed using a lightweight consensus for IoT (LC4IoT),
which reduces computational power, storage capability, and
latency. Simulation results highlighted the effectiveness of the
proposed consensus.

ACKNOWLEDGEMENT

The authors would like to thank the Natural Sciences and
Engineering Research Council of Canada, as well as FEDER
and GrandEst Region in France, for the ﬁnancial support of
this research.

REFERENCES
[1] E. D. Ngangue Ndih and S. Cherkaoui, “On Enhancing Technology
Coexistence in the IoT Era: ZigBee and 802.11 Case,” IEEE Access,
vol. 4, pp. 1835–1844, 2016.

[2] A. Rachedi, M. H. Rehmani, S. Cherkaoui, and J. J. P. C. Rodrigues,
“IEEE Access Special Section Editorial: The Plethora of Research in
Internet of Things (IoT),” IEEE Access, vol. 4, pp. 9575–9579, 2016.
[3] E. D. Ngangue Ndih, S. Cherkaoui, and I. Dayoub, “Analytic Modeling
of the Coexistence of IEEE 802.15.4 and IEEE 802.11 in Saturation
Conditions,” IEEE Communications Letters, vol. 19, no. 11, pp. 1981–
1984, Nov. 2015.

[4] A. Aris, S. F. Oktug, and T. Voigt, “Security of Internet of Things for

Reliable Internet of Services,” p. 36.

[12] R. A. Michelin, A. Dorri, R. C. Lunardi, M. Steger, S. S. Kanhere,
R. Jurdak, and A. F. Zorzo, “SpeedyChain: A framework for decoupling
data from blockchain for smart cities,” arXiv:1807.01980 [cs], Jul. 2018.
[13] J. Adler, R. Berryhill, A. Veneris, Z. Poulos, N. Veira, and A. Kastania,
“Astraea: A Decentralized Blockchain Oracle,” arXiv:1808.00528 [cs],
Aug. 2018.

[14] B. Liu, X. L. Yu, S. Chen, X. Xu, and L. Zhu, “Blockchain Based Data
Integrity Service Framework for IoT Data,” in 2017 IEEE International
Conference on Web Services (ICWS), Jun. 2017, pp. 468–475.

[15] S. S. Choi, J. W. Burm, W. Sung, J. W. Jang, and Y. J. Reo, “A
Blockchain-based Secure IoT Control Scheme,” in 2018 International
Conference on Advances in Computing and Communication Engineer-
ing (ICACCE), Jun. 2018, pp. 74–78.

[16] Z. Zheng, S. Xie, H. Dai, X. Chen, and H. Wang, “An Overview of
Blockchain Technology: Architecture, Consensus, and Future Trends,”
in 2017 IEEE International Congress on Big Data (BigData Congress),
Jun. 2017, pp. 557–564.

[17] N. Bozic, G. Pujolle, and S. Secci, “A tutorial on blockchain and
applications to secure network control-planes,” in 2016 3rd Smart Cloud
Networks Systems (SCNS), Dec. 2016, pp. 1–8.

[18] S. Nakamoto, “Bitcoin: A Peer-to-Peer Electronic Cash System,” p. 9.
[19] D. G. Wood, “ETHEREUM: A SECURE DECENTRALISED GENER-

ALISED TRANSACTION LEDGER,” p. 32.

[20] “Bitcoin Cash - Peer-to-Peer Electronic Cash.” [Online]. Available:

https://www.bitcoincash.org/

[21] Z. Zheng, S. Xie, H. Dai, X. Chen, and H. Wang, “An Overview of
Blockchain Technology: Architecture, Consensus, and Future Trends,”
in 2017 IEEE International Congress on Big Data (BigData Congress),
Jun. 2017, pp. 557–564.

[22] A. Gervais, G. O. Karame, K. W¨ust, V. Glykantzis, H. Ritzdorf, and
S. Capkun, “On the Security and Performance of Proof of Work
Blockchains,” in Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security, ser. CCS ’16. New York,
NY, USA: ACM, 2016, pp. 3–16.

[23] Blockchain.com,

“Blocks

mined

on

12/04/2019,”

https:

//www.blockchain.com/btc/blocks/, 2019.

[24] “An agri-food supply chain traceability system for China based on
RFID amp;amp; blockchain technology,” in 2016 13th International
Conference on Service Systems and Service Management (ICSSSM),
Jun. 2016, pp. 1–6.

[25] K. Korpela, J. Hallikas, and T. Dahlberg, “Digital Supply Chain
Transformation toward Blockchain Integration,” Jan. 2017. [Online].
Available: http://scholarspace.manoa.hawaii.edu/handle/10125/41666

[26] I. Eyal, A. E. Gencer, E. G. Sirer, and R. van Renesse, “Bitcoin-NG:

A Scalable Blockchain Protocol,” p. 16.

[27] A. Dorri, S. S. Kanhere, R. Jurdak, and P. Gauravaram, “LSB:
A Lightweight Scalable BlockChain for IoT Security and Privacy,”
arXiv:1712.02969 [cs], Dec. 2017.

[5] M. Conoscenti, A. Vetr`o, and J. C. D. Martin, “Blockchain for the
Internet of Things: A systematic literature review,” in 2016 IEEE/ACS
13th International Conference of Computer Systems and Applications
(AICCSA), Nov. 2016, pp. 1–6.
I. Sarhan, “Internet of
issues,” International Journal of
Assurance, vol. 1, no. 1, p. 40, 2018.
http://www.inderscience.com/link.php?id=10011246

things: a survey of challenges and
Internet of Things and Cyber-
[Online]. Available:

[6] Q.

[7] E. D. N. Ndih and S. Cherkaoui, “Chapter 17 - Simulation methods,
techniques and tools of computer systems and networks,” in Modeling
and Simulation of Computer Networks and Systems, M. S. Obaidat,
P. Nicopolitidis, and F. Zarai, Eds. Boston: Morgan Kaufmann, Jan.
2015, pp. 485–504.

[8] T. M. Fern´andez-Caram´es and P. Fraga-Lamas, “A Review on the Use
of Blockchain for the Internet of Things,” IEEE Access, vol. 6, pp.
32 979–33 001, 2018.

[9] O. Novo, “Blockchain Meets IoT: An Architecture for Scalable Access
Management in IoT,” IEEE Internet of Things Journal, vol. 5, no. 2,
pp. 1184–1195, Apr. 2018.

[10] S. Su, C. M. University, K. Wang, C. M. University, H. Kim, and C. M.
University, “SmartSupply: Smart Contract Based Validation for Supply
Chain Blockchain,” p. 6.

[11] R. Pass and E. Shi, “FruitChains: A Fair Blockchain,” in Proceedings of
the ACM Symposium on Principles of Distributed Computing - PODC
’17. Washington, DC, USA: ACM Press, 2017, pp. 315–324.

