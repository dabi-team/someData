1
2
0
2

p
e
S
3
1

]

R
C
.
s
c
[

1
v
9
4
6
5
0
.
9
0
1
2
:
v
i
X
r
a

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion

JON OAKLEY, CARL WORLEY, LU YU, and RICHARD R. BROOKS, Clemson University, USA
İLKER ÖZÇELIK and ANTHONY SKJELLUM, University of Tennessee at Chattanooga, USA
JIHAD S. OBEID, Medical University of South Carolina, USA

Clinical trials are a multi-billion dollar industry. One of the biggest challenges facing the clinical trial research community
is satisfying Part 11 of Title 21 of the Code of Federal Regulations [1] and ISO 27789 [2]. These controls provide audit
requirements that guarantee the reliability of the data contained in the electronic records. Context-aware smart devices and
wearable IoT devices have become increasingly common in clinical trials. Electronic Data Capture (EDC) and Clinical Data
Management Systems (CDMS) do not currently address the new challenges introduced using these devices. The healthcare
digital threat landscape is continually evolving, and the prevalence of sensor fusion and wearable devices compounds the
growing attack surface. We propose Scrybe, a permissioned blockchain, to store proof of clinical trial data provenance. We
illustrate how Scrybe addresses each control and the limitations of the Ethereum-based blockchains. Finally, we provide a
proof-of-concept integration with REDCap to show tamper resistance.

Additional Key Words and Phrases: Blockchain, Clinical Trials, REDCap, Secure Audit, Title 21 CFR Part 11, ISO 27789

ACM Reference Format:
Jon Oakley, Carl Worley, Lu Yu, Richard R. Brooks, İlker Özçelik, Anthony Skjellum, and Jihad S. Obeid. 2021. Scrybe: A
Secure Audit Trail for Clinical Trial Data Fusion. Digit. Threat. Res. Pract. 1, 1 (September 2021), 20 pages. https://doi.org/10.
1145/nnnnnnn.nnnnnnn

INTRODUCTION

1
The SARS-CoV-2 pandemic has brought new attention to the clinical trial process. As the digital threat landscape
has evolved, this new attention has made it more lucrative for attackers. Recent ransomware attacks have focused
on holding SARS-CoV-2 clinical trial data [3] hostage, but this exposes a critical weakness in how all clinical trial
data is stored. The inherent shortcomings in current infrastructure invite attacks on any research group with
promising work.

Part 11 of Title 21 of the Code of Federal Regulations defines the controls for electronic records [1] imposed by
the Food and Drug Administration (FDA). Similarly, ISO 27789 [2] governs the standards for electronic health
records (EHR) and audit trails. These controls provide audit requirements that guarantee the reliability of data
contained in the electronic records. Codifications regulate clinical trials that are necessary for understanding
pathologies, developing new treatments, and improving health. Researchers must guarantee data and consent
form authenticity, integrity, and confidentiality. Electronic Data Capture (EDC) and Clinical Data Management
Systems (CDMS) increase the speed and efficiency of clinical studies [4], but pose challenges for securing clinical

Authors’ addresses: Jon Oakley, joakley@g.clemson.edu; Carl Worley, cworley@g.clemson.edu; Lu Yu, lyu@g.clemson.edu; Richard R. Brooks,
rrb@g.clemson.edu, Clemson University, 105 Sikes Hall, Clemson, South Carolina, USA, 29634; İlker Özçelik, ilker-ozcelik@utc.edu; An-
thony Skjellum, tony-skjellum@utc.edu, University of Tennessee at Chattanooga, 615 McCallie Ave, Chattanooga, Tennessee, USA, 37403;
Jihad S. Obeid, Medical University of South Carolina, 171 Ashley Ave, Charleston, South Carolina, USA, 29425, jobeid@musc.edu.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that
copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first
page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy
otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from
permissions@acm.org.
© 2021 Association for Computing Machinery.
2576-5337/2021/9-ART $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

 
 
 
 
 
 
2

• Oakley and Worley, et al.

Fig. 1. Studies reported to the FDA and registered on ClinicalTrials.gov [11].

data. Digital information can be easily changed, forged, and fabricated, raising questions about authenticity and
integrity.

Recently, smart devices and the Internet of Things (IoT) devices have become more common in clinical trials
[5–7]. The prevalence of these devices presents a unique data fusion security challenge, as it combines context-
aware computing, traditional sensor fusion, and the regulations that govern the handling and processing of
clinical trial research data.

Mobile devices provide electronic questionnaires in a simple format, data validation, and make data aggregation
simple. Other devices, like smartwatches, have been used in recent studies ranging from Parkinson’s [8] to atrial
arrhythmias [9]. These devices generate a rich set of data that must be processed, stored, and analyzed according
to the appropriate provenance and security regulations.

A clinical trial planning phase includes creating a study protocol, which specifies the goals, patient groups
(or cohorts), pharmaceuticals, and tests. This plan must be approved by the institution’s Internal Review Board
(IRB) and then be approved by and registered with a government regulatory agency (FDA in the United States).
Once the study has been approved, patients are recruited and must provide consent before enrollment into the
clinical trial. During the trial, collected data may include physical exam findings, laboratory test results, research
questionnaires, and other research data types. After the trial period, the data is analyzed and published in a
manner that preserves confidentiality.

Researchers must maintain a clear audit trail, track data creation, modification, and deletion. All actions need
to be recorded along with the time and person responsible. REDCap (Research Electronic Data Capture) is a
software toolset and database for electronic collection, management of research, and clinical trial data [10]. Since
REDCap stores acquired data as records, these are the primitive data that must be secured.

The number of new clinical trials is increasing each year, compounding the economic impact of securing
clinical trial data. In 2018 alone, 30,988 new clinical trials were registered with the FDA [11]. Figure 1 shows the
increase in clinical trials over the past decade. As the number of clinical trials grows, so does the amount of data
that needs to be secure.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

2000200520102015202005000100001500020000250003000035000YearPublicationsTable 1. Controls outlined in Part 11.10 of Title 21, Code of Federal Regulations, for a closed clinical trial electronic records
system1 [1].

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion •

3

Designation

11.10(a)

11.10(b)

11.10(c)

11.10(d)

11.10(e)

11.10(g)

11.10(h)

11.10.(k1)

11.10.(k2)

Description
Validation of systems to ensure accuracy, reliability, consistent intended performance,
and the ability to discern invalid or altered records.
The ability to generate accurate and complete copies of records in both human-readable
and electronic form suitable for inspection, review, and copying by the agency. Persons
should contact the agency if there are any questions regarding the agency’s ability to
perform such review and copying of the electronic records.
Protection of records to enable their accurate and ready retrieval throughout the records
retention period.
Limiting system access to authorized individuals.
Use of secure, computer-generated, time-stamped audit trails to independently record
the date and time of operator entries and actions that create, modify, or delete electronic
records. Record changes shall not obscure previously recorded information. Such audit
trail documentation shall be retained for a period at least as long as that required for the
subject electronic records and shall be available for agency review and copying.
Use of authority checks to ensure that only authorized individuals can use the system,
electronically sign a record, access the operation or computer system input or output
device, alter a record, or perform the operation at hand.
Use of device (e.g., terminal) checks to determine, as appropriate, the validity of the
source of data input or operational instruction.
Adequate controls over the distribution of, access to, and use of documentation for
system operation and maintenance.
Revision and change control procedures to maintain an audit trail that documents
time-sequenced development and modification of systems documentation.

Property
Integrity
Authentication

Availability

Availability

Access Control

Integrity
Authentication
Non-repudiation

Access Control

Integrity

Integrity

Integrity

1Designations 11.10(f), 11.10(i), and 11.10(j) were omitted because they refer to administrative controls outside the scope of this framework.

Clinical trial data, and the associated data provenance, is be subject to a large number of external threats [12],
but insider threats are also important considerations. A meta-analysis in Science [13] was only able to reproduce
39% of published psychological studies. In a survey of biostatisticians, 31% of the statisticians surveyed, all active
in medical research, reported being involved in a project that knowingly committed academic fraud [14]. Scrybe
provides an immutable audit trail to satisfy Part 11 of Title 21 and provide controls against insider threat and
intentional fraud.

Table 1 outlines the controls and governances required for all clinical trial electronic records. From Table 1,

several general categories of controls can be inferred.

• Integrity: provenance data cannot be falsified and can only be created by authorized parties.
• Availability: the provenance system must be consistently able to receive new data, and that data must be

able to be consistently viewed.

• Efficiency: the system should have a low overhead.
• Authentication: provenance data is correctly identified as having come from the correct source.
• Non-repudiation: once provenance data has been created, neither creator nor viewer cannot deny its

existence.

• Access control: only authorized parties can view provenance data. Compliance with the Health Insurance
Portability and Accountability Act (HIPAA) privacy and security rules [15] makes this particularly relevant.

This paper proposes Scrybe, a blockchain-based secure audit trail, and discusses how it addresses the security
requirements of clinical trial data outlined in Part 11 of Title 21. A Scrybe proof-of-concept is integrated with
REDCap to show these properties and demonstrate the working system.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

4

• Oakley and Worley, et al.

Section 2 discusses existing solutions in this problem space. Section 3 provides background information on data
provenance, REDCap, and blockchains. Section 4 introduces Scrybe and outlines the architecture of our system.
Section 5 describes the proof-of-concept integration with REDCap and shows how this architecture satisfies the
requirements set from in [1]. Section 6 provides a discussion of our results and directions for future work.

2 RELATED WORK
Existing blockchain-based provenance solutions for EHR consist of novel blockchain technology and existing
blockchain technology. Approaches that propose novel blockchains often overlook critical security details.
Limitations in current blockchain technology make a healthcare blockchain built on these technologies impractical
for widespread adoption. Unfortunately, there is also a non-trivial group of proposed solutions that claim to use
blockchain technology but do not provide enough information to assess the viability of the solution [16–21].

2.1 Application-Specific Blockchain Technologies
One approach is to design a consensus algorithm tailored to the application. These approaches generally address
proof-of-work (PoW) efficiency concerns, but many fail to include integrity and security considerations. Med-
iBchain [22, 23] is one such solution. The specifics of the blockchain are very high-level, and concrete details are
abstracted. Further, other authors have found security issues with their implementation [24]. BBDS is a PoW-based
blockchain designed to facilitate data sharing [25]. Patel designed a blockchain framework for sharing radiology
data using a proof-of-stake (PoS) algorithm [26]. Lee and Yang designed a flawed blockchain specific to their work
(fingernail microscopy). Peterson et al. designed a blockchain that leverages proof-of-interoperability instead of
PoW [27]. While the approach is novel, based on the algorithm description, it appears that two malicious nodes
could control the network.

2.2 Tested Blockchain Technologies
Many EHR blockchain solutions build on either Bitcoin or Ethereum. Bitcoin-based solutions [28–30] leverage
numerous integrations with tools like sidechains and data anchors. Ethereum-based solutions (like MedRec
[31, 32] and others [33–36]) use smart contracts to provide impressive functionality that can easily interface with
complicated systems. Other solutions (Healthchain [24], MedicalChain1 [37], and [38]) are based on Hyperledger
Fabric – a permissioned blockchain developed by IBM. Hyperledger Fabric incorporates functionality present in
Ethereum but does not require a cost or resource overhead. Both Bitcoin and Ethereum currently use PoW as
their consensus algorithm. While this is currently one of the more popular consensus algorithms, it does not
scale well, and it is cost-prohibitive [39].

While proof-of-concept solutions based on PoW are popular, they are not long-term solutions for securing data
provenance. They result in too much overhead and too little throughput [39]. Ethereum has announced a move to
a PoS consensus algorithm. While this is a step in the right direction, it still introduces issues, and any application
running on the blockchain will have associated costs required to keep running the smart contracts. With the
current cryptocurrency volatility, tying a technological solution to any of these blockchains would be a gamble.
Hyperledger is a promising permissioned blockchain architecture that offers pluggable consensus algorithms.
There are several mainstream choices, such as Hyperledger Fabric, Hyperledger Indy, Hyperledger Iroha, and
Hyperledger Sawtooth [40]. There are several popular pluggable ordering/consensus mechanism for Hyperledger
Fabric: practical Byzantine Fault Tolerance (PBFT) [41], BFT-SMaRt [42], SBFT [43], HoneyBadger BFT [44], and
Kafka [45]. Kafka stands out on this list since it is neither crash-tolerant nor fault-tolerant. The other consensus
algorithms are all in the family of PBFT algorithms, which suffer from scalability issues (usually greater than 20
nodes) [46]. SBFT improves on this, but it still suffers from the other shortcoming of PBFT algorithms – electing

1MedicalChain also relies on the Ethereum blockchain.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion •

5

a centralized leader. Similarly, HoneyBadger BFT elects a set of nodes at the beginning of the algorithm that
makes it centralized [47]. Hyperledger Indy uses Robust BFT (RBFT), which is in the same PBFT family that
suffers from node scalability [46]. Hyperledger Iroha uses the Sumeragi consensus, which is based on BChain [48].
Sumeragi also suffers from node scalability issues [40]. Finally, Hyperledger Sawtooth uses PoET as the consensus
algorithm. PoET is based on a Trusted Execution Environment [49]. While TEEs are a huge advancement in the
space of efficient consensus algorithms, vulnerabilities such as Plundervolt [50] show there are ways to bypass
the trusted environment.

Our EHR blockchain solution leverages Scrybe’s lightweight consensus algorithm [51]. This consensus al-
gorithm is designed for a permissioned blockchain, so it does not require excessively wasteful computations.
Scrybe’s complexity is linear as the number of nodes approaches infinity [51], which addresses the scalability
concerns many popular consensus algorithms face. While the current embodiment of our design does not leverage
Hyperledger Fabric, a future version may be integrated with a pluggable Scrybe consensus algorithm.

3 BACKGROUND
Theoretically, provenance provides several different benefits [52]: 1) data integrity, 2) audit trail, 3) replication, 4)
attribution2, and 5) information3. Provenance tools usually rely on inversion or annotation [53, 54]. Inversion
provenance is the set of transformations required to take an empty data set and arrive at the current state.
Annotation involves supplying rich metadata about the changes. Provenance is stored [55]: 1) tightly coupled, 2)
loosely coupled, or 3) uncoupled. Tightly coupled provenance is stored in the data. Loosely coupled provenance
is stored with the data–it is logically separated, usually in a different file on the same system. Uncoupled
provenance is stored remotely. The Open Provenance Model (OPM) [56] and W3C PROV [57] provide standards
for representing provenance.

Various tools have arisen to address the provenance challenge [58]. IPython [59] is an interactive Python
interface that allows users to mix code, text, and media. Taverna [60] is a Java-based workflow tool that exports
OPM-compliant models. VisTrails [61] is a Python-based workflow tool. Karma [62] is an uncoupled provenance
tool that conforms to the OPM standard in a client/server relationship. Komadu [63] is a W3C PROV-based
tool that captures system-level events. Kepler [64] is another environment capture tool that focuses on the
execution environment. Swift [65] is a provenance capture system for parallel processing. Sumatra [66] is another
Python-based provenance system focusing on numerical simulations and analyses. Provenance Aware Storage
System (PASS) [67] is an environmental capture tool that captures all system metadata at execution time.

3.1 REDCap
REDCap is a software toolset and workflow methodology for electronic clinical trial data collection and manage-
ment [10]. REDCap provides web-based tools for data entry, aiding correct entry using real-time validation rules
with automated data type and range checks at the time of entry. The system allows the research teams to create
and design online surveys and allows survey owners to engage respondents using various notification methods.
REDCap data dictionaries can be distributed for reuse at multiple institutions. A library of data dictionaries is
made available for standard data collection forms and validated collection interfaces [68].

These features make REDCap an ideal clinical trial collection tool. We use REDCap as our data management
system, intending to secure the data provenance. The existing REDCap system already has some valuable security
features. The underlying database is typically hosted in secure data centers at the host institutions with layers
of redundancy, failover capability, backups, and extensive security checks. The system is inherently compliant
with the Health Insurance Portability and Accountability Act of 1996 (HIPAA). It has several layers of protection

2Attribution implies that changes can be attributed to a given individual or event.
3Information implies that additional data can be derived from the provenance.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

6

• Oakley and Worley, et al.

including, user/group account management, "Data Access Groups4," audit trails for all changes, queries, reports,
and Secure Sockets Layer (SSL) encryption. In addition to HIPAA, it can be set up to support other regulatory
requirements including Title 21 Part 11 of CFR [1] and FISMA-compliant [69] environments as needed.

Users can export data in native format for several statistical packages, including SPSS, SAS, SATA, R, and comma-
separated values files. REDCap has an Application Programming Interface (API), which allows interoperability
with external tools, plugins, and mobile apps. REDCap provides an interface for database and case report form
creation, either online via a web-based designer or offline using a "data dictionary" spreadsheet template that can
be uploaded later into REDCap. This generalized method for quickly creating clinical trial infrastructure has led
to REDCap being used in over 3000 institutions [70].

REDCap is written in PHP, and it depends on other software, such as MySQL and the underlying HTTP server
[71]. The developers note that REDCap’s security depends on this underlying infrastructure, which is known to
be vulnerable if improperly configured or not maintained [71]. However, even if the underlying infrastructure is
updated, REDCap itself still has documented vulnerabilities. According to the latest REDCap changelog, [72],
version 9.5.0 (released 12/05/2019) fixed an SQL injection vulnerability that would allow "tech-savvy" users to view
any sensitive data they wished. REDCap is an invaluable tool for researchers, but it is not a secure provenance
tool. A malicious user could exploit any of these vulnerabilities to falsify REDCap records.

3.2 Blockchains
In 2008, Satoshi Nakamoto proposed Bitcoin, the first cryptocurrency [73]. Nakamoto’s work extended the ideas
presented by Haber and Stornetta [74], who presented the first cryptographically secured timestamp audit trail.
Bitcoin allowed the digital currency to be exchanged between participants without trusting a central authority
(e.g., a bank or wire service). Bitcoin has two categories of participants–miners and users. Each miner maintains
a local copy of a decentralized ledger tracking the balances in all accounts, and any user transferring bitcoin
broadcasts a signed message that causes all miners to update their local ledgers.

The blockchain is the data structure each miner uses to store all of the transactions making up the local ledger.
Transactions are grouped together in blocks, and each block contains a cryptographic link to the previous block
(hence a “chain” of blocks). This cryptographic link is a hash–a one-way function that takes an arbitrary blob of
data and returns a random value between 0 and 2256 − 1 with uniform probability. Since the hash is a one-way
function, it is computationally hard to determine the original input given the random value. Further, each block
is cryptographically signed–ensuring its authenticity and integrity.

In Bitcoin, creating a valid block requires a computationally expensive proof-of-work (PoW). This process
is called mining. All miners try to guess a random value (nonce) that causes the block’s hash to have specific
properties. The first miner to guess this random value broadcasts the solution. The process begins again, and the
next block contains a hash of the latest solution. The group’s consensus is the longest blockchain.

An attacker must create a valid chain that is longer than the current consensus chain to change the consensus.
The probability of successfully performing this attack decreases exponentially with each block added to the
chain5. Mining ensures that the blockchain is an immutable consensus among all participants, even in the presence
of attackers. One caveat is that the PoW mining process is highly inefficient (computationally and economically),
limiting the scalability of the PoW-based systems.

While the most popular use-case is currency transactions, blockchains can be generalized to any use-case
where a distributed data store requires consensus and immutability. There are many applications and supporting
technologies [75] following this trend. Blockchains have also been used to store provenance metadata [12]. The
immutability property provides strong guarantees of data integrity. The requirement that each block is signed

4Data Access Groups allow data to be entered by multiple groups in one database with segmented user rights for entered data
5The exception to this occurs when the attacker controls more than 50% of all computing power in the network.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion •

7

and contains the hash of the previous block ensures signatures are interleaved throughout the blockchain, and
each miner’s signature validates the signatures of every previous block.

3.3 Hashes
In order to formally prove the fundamental properties of the Scrybe Provenance framework, we provide formal
definitions for the cryptographic primitives. A SHA 256 hash function is defined in Equation 1 for message 𝑀,
and it has the following relevant properties [76]:

(1) 𝐻256 is a one-way function.

𝐻256 : 𝑀𝛼 → {0, 1}256
𝑀𝛼 := {0, 1}𝛼

∀𝛼 ∈ N1

(cid:154)𝐻 −1

256 : {0, 1}256 → 𝑀𝛼

(2) 𝐻256 is a uniform mapping from the domain to the range.

(cid:16)

prob

𝐻256 (𝑀𝛼 ) == 𝐻256
∀𝛼, 𝛽 ∈ N1, 𝑀𝛼 ≠ 𝑀 𝛽

(cid:16)

𝑀 𝛽 (cid:17)(cid:17)

=

1
2512

≈ 0

(1)

(2)

(3)

For perspective, the current Bitcoin network hash rate6 is 8.5 × 1019 hashes per second [77]. At the current

rate, it would take 3.42 × 1049 years before the Bitcoin network found a collision for a given hash.

3.4 Digital Signatures
Public key encryption assumes two keys: 𝐾𝑝𝑟𝑖𝑣𝑎𝑡𝑒 and 𝐾𝑝𝑢𝑏𝑙𝑖𝑐 . The private key is known only to the owner, while
the public key is known to everyone. The formal definition for the public key encryption function is provided in
Equation 4.

Enc : {0, 1}𝑛 → {0, 1}𝑛
Dec : {0, 1}𝑛 → {0, 1}𝑛
The encryption and decryption functions are asymmetric, as shown in Equation 5. 𝐶𝑝𝑢𝑏𝑙𝑖𝑐 is the ciphertext
when the message is encrypted with the public key, and 𝐶𝑝𝑟𝑖𝑣𝑎𝑡𝑒 is the ciphertext when the message is encrypted
with the private key.

(4)

Enc (cid:0)𝑀, 𝐾𝑝𝑟𝑖𝑣𝑎𝑡𝑒 (cid:1) = 𝐶𝑝𝑟𝑖𝑣𝑎𝑡𝑒
Dec (cid:0)𝐶𝑝𝑟𝑖𝑣𝑎𝑡𝑒, 𝐾𝑝𝑢𝑏𝑙𝑖𝑐 (cid:1) = 𝑀
Enc (cid:0)𝑀, 𝐾𝑝𝑢𝑏𝑙𝑖𝑐 (cid:1) = 𝐶𝑝𝑢𝑏𝑙𝑖𝑐
Dec (cid:0)𝐶𝑝𝑢𝑏𝑙𝑖𝑐, 𝐾𝑝𝑟𝑖𝑣𝑎𝑡𝑒 (cid:1) = 𝑀

(5)

From this definition, we can see that anything encrypted using a private key can be decrypted using the public
key. Until recently, RSA has been the standard for public-key cryptography [78]. Elliptic curve cryptography
leverages different mathematical principles to reduce the overall key size (significantly) at a slight performance
cost [79]. Both of these approaches are susceptible to quantum attacks [80], but those are distant concerns.

6The network hash rate is the combined hash rate of all miners currently working to solve the next block.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

8

• Oakley and Worley, et al.

Integrity

3.5
Scrybe uses cryptographic signatures to ensure the integrity of data provenance. The formal definition for a
cryptographic signature, shown in Equation 6.

𝑆 : {0, 1}𝛼 → {0, 1}256
∀𝛼 ∈ N1
𝑆 (𝑀) := Enc (cid:0)𝐻256 (𝑀) , 𝐾𝑝𝑟𝑖𝑣𝑎𝑡𝑒 (cid:1)

(6)

The signature, 𝑆 (𝑀), is appended to the message, 𝑀, so that anyone can verify the message’s integrity. Since
the assumption is that only the signatory knows the private key, it is assumed that if the decrypted signature,
𝐻256(𝑀) ′, is the same as the hash of the message, 𝐻256(𝑀), then the message originated from the owner of
𝐾𝑝𝑟𝑖𝑣𝑎𝑡𝑒 and the message has not been modified. The transaction containing the hash of the changelog entry is
timestamped and cryptographically signed by the researcher, and the block is timestamped and cryptographically
signed by the miner. Together, these layers of cryptographic signatures satisfy the integrity property. Using the
digital signature standard as documented by the National Institute of Standards and Technology [81] guarantees
security and portability.

4 SCRYBE PROVENANCE FRAMEWORK
Scrybe is a blockchain-based provenance framework that can be adapted to secure clinical trial metadata. Scrybe
was initially developed to secure provenance metadata, so clinical trial audit trails are a natural use case. Scrybe
provides the five basic properties of a provenance system listed in Section 3. The framework we propose here
uses an uncoupled inversion-based changelog secured by Scrybe’s annotation-based provenance framework.

This section will describe the data structures used in Scrybe and its mining method, keeping in mind the
required properties. Scrybe uses a blockchain since the immutability property of blockchains provides strong
integrity guarantees. The replication of the blockchain state among all miners also provides strong availability
guarantees. The challenge is to design a system that maintains the other properties. A publicly visible blockchain
makes access control difficult, and PoW mining is extremely inefficient. Figure 2 shows the Scrybe architecture.
The main component of this architecture is the Scrybe blockchain and the changelog. We store the history of all
changes made to institutional database records as entries in a changelog server. A firewall can be placed around
the changelog, and only qualified people may access it, ensuring HIPAA compliance. Since this server is not
publicly accessible, patient privacy is protected. As long as the blockchain remains immutable, the changelog’s
integrity is guaranteed, and the changelog is a secure audit trail tracking every event in the clinical trial.

The changelog entry cryptographic hashes are stored in the blockchain to ensure that data integrity and
non-repudiation are guaranteed despite a centralized changelog server. Because of the immutability property of
the blockchain, these hashes cannot be altered. When an audit is performed, the changelog can be examined,
and the changelog hashes can be compared to the hashes stored on the blockchain. If there is a mismatch, then
the auditor knows tampering has occurred. In the case of an FDA investigation, the blockchain transactions
matching changelog entries that describe each record modification guarantee that the changelog is a trustworthy
audit trail.

Each changelog entry is recorded on the blockchain as a transaction, and transactions are grouped in blocks.

These blocks constitute the blockchain data structure.

4.1 Changelog Entry
A changelog entry describes a single change made to the secure REDCap database. These entries are not a part of
Scrybe–they are an entirely separate primitive used to extend REDCap (or any secure database) with additional
provenance functionality. Whenever a user performs any addition, deletion, or modification, an entry is created

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion •

9

and stored in a changelog server. The changelog server is a sequence of these entries. Each entry has an associated
ID that increases sequentially with each new entry added to the log. The entry contains a modification field
describing the change made to the database. The entry is signed to guarantee non-repudiation. Changelog entries
can be applied sequentially (up to the most recent changelog entry) to an empty database to construct the current
database. The changelog is stored locally by the institution and is not a part of Scrybe. Keeping the changelog
server behind an institutional firewall alongside the REDCap database used for the clinical trial will ensure
HIPAA compliance since only authorized personnel can view the data. When a changelog event occurs, the
changelog server submits a transaction to the Scrybe blockchain containing a hash of the changelog entry and
non-identifying metadata, such as date, time, and trial ID.

4.2 Transactions
Scrybe transactions contain whole pieces of provenance metadata. Any correlations to other pieces of metadata
must be performed at a higher level outside the system. In the case of clinical trials that are performed with
an institutional database, the changelog entries are secured by transactions. Whenever a change is made to a
record, an entry is stored in the changelog server. Then, a transaction with the changelog hash is broadcast to
the blockchain miners. This transaction contains a hash of the created entry, the time, and the entry’s ID. The
hash is used instead of the actual entry to ensure HIPAA compliance.

When a transaction is created, it is cryptographically signed by its creator, the changelog server. The signature
guarantees that if a transaction exists with a particular timestamp, entry hash, and valid signature, the signatory
modified the database in the manner described by that particular entry. The transaction is the foundational
building block of secure provenance.

4.3 Blocks
A block contains a group of transactions, the hash of the previous block, and a record of the mining process.
Since each block contains a previous block’s hash, an attacker must modify all previous blocks to modify the
current block. Since the probability of producing a forged block is almost surely zero (i.e., probability of 0), the
blockchain can be considered immutable. The block size is determined by the volume of transactions and the time
required to mine a block. The time between blocks is adjusted to maintain a reasonable interval for transactions
to accumulate. Each block contains a signature of the miner that generated the block. The signature provides an
added layer of security for transactions on the blockchain–the block itself contains a signed timestamp, and each
transaction also contains a signed timestamp. Both of these attributes provide interleaved trust, allowing us to
trust the timestamp on the changelog entry. Authorized participants can view the transaction, but no one can
change it or deny its existence.

4.4 Mining
Miners generate the blocks in a blockchain and broadcast them to the rest of the miners. Traditionally, PoW mining
is too resource-intensive, requiring the constant generation of hashes until the miner solves a cryptographic
puzzle. Proof-of-Stake (PoS) systems require that miners stake a sizable amount of currency that will be forfeit if
malfeasance is found. While PoS scales better and provides a more economical approach, it requires a native
currency and poses centralization risks if a particular miner controls a majority of the currency.

Scrybe is a permissioned blockchain–only authorized miners can generate blocks. Each block is signed, and any
block signed by an unauthorized miner is immediately discarded. This lightweight hybrid PoS mining approach
allows miners to stake their participation in the mining process [82]. A miner is randomly selected from the
pool of authorized miners, and that miner is delegated to produce the next block. In practice, miners consist
of various companies, research institutions, and regulatory agencies. A detailed description and rigorous proof

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

10

• Oakley and Worley, et al.

of Scrybe’s consensus algorithm is given in [51, 83]. Since Scrybe is a dedicated provenance blockchain, no
underlying currency can introduce volatility or cause the underlying technology to become obsolete. Scrybe is
not based on PoW or PoS, so there are no concerns with environmental impact or greedy nodes. No leader or
initial group of nodes is elected like in PBFT-based algorithms, ensuring the process is truly decentralized. Scrybe
leverages the advantages of a permissioned blockchain with a secure and scalable algorithm. The complexity is
𝑂 (𝑛) as the number of nodes approaches infinity [51].

5 REDCAP SECURED WITH SCRYBE
A proof-of-concept prototype was created to test the ideas behind the Scrybe framework. The core of the prototype
is Scrybe, which was implemented in C++. All data structures are stored as serialized strings in a cached database
for fast access, and peer-to-peer communication happens asynchronously. We used REDCap as our institutional
database for storing clinical trial data. The changelog server that secures REDCap communicates with a Scrybe
client to submit transactions. The changelog server also includes tools for browsing the changelog database and
verifying the integrity of the entries it contains by comparing their hashes with those stored on the blockchain.
For this application, an interface was created to input data into the system. REDCap exposes an API of HTTP
POST requests that allows for data import and export [84]. A Python script was written that allows clients to
input data. That data is then simultaneously imported in REDCap through its API, uploaded to the changelog,
and transactions securing the entries are submitted to the Scrybe miners. This interface is currently a standalone
command-line interface, but REDCap has a tool for creating data entry interfaces. Future work should consider
a daemon that monitors the REDCap database and automatically creates changelog entries whenever changes
occur. Automatic changelog generation would make the provenance backend invisible to the end-user, allowing
for seamless integration.

We present the use-cases shown below to illustrate the properties outlined in Table 1. To satisfy [1], we must
address integrity, authentication, availability, access control, and non-repudiation. These use-cases introduce
several new concepts. The Scrybe provenance consortium is a group of independent institutions using the Scrybe
provenance framework to secure their respective data. The consortium is most robust when the independent
institutions each have a Scrybe node and are unlikely to collude. The auditor represents any authorized individual
who wishes to validate data. The researcher is an individual authorized to store data in the Scrybe provenance
framework. In these use cases, the attacker is an unauthorized individual who is making malicious changes. These
use-cases require public-key cryptography, and there are existing solutions and best practices for enterprise key
management.

Integrity

5.1
Consider the standard use-case, shown in Figure 2. A researcher uploads data to REDCap using the Scrybe
provenance framework. The Scrybe provenance framework breaks the data into a series of changes that can be
incrementally applied to the REDCap database. The metadata for each change is used to create a transaction, and
this transaction is signed using the researcher’s public key (TXN Signature). Simultaneously, each incremental
change is also signed using the researcher’s private key (REDCap Signature). The Scrybe framework stores the
signed changes in a changelog7, allowing the current state of the database to be reconstructed. Then, the Scrybe
transaction is submitted to the miners, where it is incorporated into the blockchain. Finally, the data is uploaded
to REDCap.

When an auditor verifies the data stored in REDCap, the first step is to download a copy of the REDCap
data and the corresponding Scrybe transactions. The transaction signature is used to verify the integrity of the
metadata in the transaction. Next, the REDCap signature is compared to the REDCap signature stored in the

7The changelog is stored on a secure server operated by the institution.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion •

11

Scrybe transaction. Once this signature is verified, it is used to verify the integrity of the REDCap entry. With
this verification complete, the auditor can reconstruct the complete history using the changelog. Auditors may
elect to use software tools to identify anomalies, such as conflicting changes, which may indicate intentional
malfeasance on the researcher’s part.

Consider a malicious user modifying data in the REDCap database without the proper approval. This is shown
in Figure 3. The attacker modifies the blood type of a patient. There are two cases, 1) the attacker does not
attempt to forge the REDCap signature, and 2) the attacker is a researcher and maliciously updates the database
to include false information using the Scrybe framework. The latter case can be addressed by software that scans
the changelog and identifies conflicting anomalous behavior. In the former case (shown in Figure 2, the auditor
downloads a copy of the REDCap data and verifies the signature. The signature is calculated using all of the fields
stored in REDCap. Section 3.5 provided a proof showing that if any of the data changes, it is detected with the
signature. In this scenario, the auditor cannot verify the REDCap signature, showing the data in REDCap was
altered.

The final scenario addresses malicious changes made to the Scrybe blockchain. The prerequisite is that an
attacker compromises every Scrybe node. This compromise would include Scrybe nodes hosted at private, public,
and federal institutions (e.g., the FDA, DHEC, and CDC). By compromising these institutions, the attacker gains
access to the private keys the Scrybe nodes use to sign blocks. The attacker must also compromise the researcher
who signed the transaction they wish to modify, allowing the attacker to forge the REDCap signature and the
transaction signature. With the forged transaction signature, the attacker can reconstruct the entire blockchain
using forged signatures. To our knowledge, there are no security countermeasures that can handle all of the
nodes being compromised.

The general provenance requirements were distilled from Table 1. Scrybe satisfies each of these requirements

in order to provide a secure framework for data provenance.

5.2 Availability
There are two aspects of availability: the original data’s availability and the audit trail’s availability. Scrybe only
stores the audit trail, and storing the actual clinical trial data is outside the scope of Scrybe. Since Scrybe is a
distributed ledger, there are redundant copies stored at various sites. The Scrybe use-case recommends that
each institution and regulatory oversight entity host a Scrybe node. Each of these nodes contains a copy of
the blockchain. Further, it is recommended that the Scrybe miners be hosted on a server with modern storage
redundancy features, such as RAID, which allows data to be recovered in the event of multiple hard drive
failures. With these considerations, the bare minimum availability provided by Scrybe matches the current level
of availability. However, these features ensure that a valid version of the provenance proof will be available in
almost every failure or tampering event.

5.3 Authentication and Access Control
Scrybe is a distributed blockchain and has no central database to control. Instead, the distributed mining process
determines what information is added to the blockchain. There is no need to assign privileges to modify on-
chain data. Instead, each researcher has a public-private keypair that is publicly registered with the blockchain.
Each researcher can only submit transactions when they are signed with a valid key, and these transactions
are incorporated into the blockchain by a miner with a valid key. This signature ensures that only authorized
researchers create transactions on the blockchain.

Assigning rights to modify off-chain data is handled by the institutional database itself. This access control
is not affected by our approach and can be done using existing methods. Care must be taken to ensure that
all off-chain data modification is linked with an on-chain record. Since only hashes of the changelog entry are

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

12

• Oakley and Worley, et al.

Fig. 2. Verifying valid REDCap data using the Scrybe provenance framework.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion •

13

Fig. 3. Detecting altered REDCap data using the Scrybe provenance framework.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

14

• Oakley and Worley, et al.

Fig. 4. Detecting an total system compromise.

stored on the blockchain, there is no need to restrict read access to the transactions. In addition to simplifying
the system, this guarantees HIPAA compliance.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion •

15

5.4 Efficiency
Section 2 discusses the several approaches solutions in this space employ. Most popular blockchains, such as
Ethereum and Bitcoin, use a PoW mining algorithm. Even permissioned Ethereum blockchains still currently use
PoW. Many provenance blockchains leverage existing technology, such as Bitcoin and Ethereum. These mining
algorithms are designed to consume all available resources wherever it is running. Using Bitcoin or Etherereum as
the basis of a provenance blockchain is economically inefficient and morally irresponsible. Despite this limitation,
there are still issues with scalability and volatility. Other solutions, such as Hyperledger’s built-in consensus
algorithms, face challenges with scalability and decentralization. There are also a set of solutions that employ
novel blockchain solutions. As discussed in Section 2, many of these solutions have scalability and security issues.
Scrybe uses a permissioned blockchain that is built with a novel lightweight mining algorithm [82]. Each miner
only expends energy communicating and mining when selected through a non-deterministic algorithm [82]. By
exchanging signed messages containing all the received transactions, nodes can validate the block published
by the selected node. As part of the message exchange, a new node is chosen to produce the next block. The
algorithm is described in detail in [51, 83]. This algorithm was proven to have complexity 𝑂 (𝑛) as 𝑛 approaches
infinity [51]. Scrybe is an efficient alternative consensus algorithm that is capable of registering provenance for
multiple clinical trials.

5.5 Clinical Trial Data Validation
For experimental purposes, the public-use National Longitudinal Mortality Study (NLMS) dataset was acquired
from the National Institute of Health’s Biologic Specimen and Data Repository Information Coordinating Center
[85]. This large-scale dataset relates mortality to many lifestyle factors, such as age, location, or substance use. A
REDCap instance at the Medical University of South Carolina was used to store the data. REDCap instruments
were created for this dataset, allowing the data to be input and processed. An example REDCap input interface is
shown in Figure 5.

The interface script was used to submit the NLMS data in CSV format to REDCap and the changelog server. The
data can be viewed by exporting individual entries in the Scrybe command-line interface. The changelog server’s
pull option can be used to download the entire changelog and the entire blockchain to conduct an item-by-item
comparison to audit integrity. If there is an entry in the changelog with no corresponding transaction in Scrybe, a
warning is given. An error is raised if an entry’s value does not match the hash in the corresponding transaction.
Similarly, if a transaction is modified on the local blockchain database, anyone can verify that the transaction is
invalid due to the invalid "previous block" hash in the following block. If a recent transaction or set of transactions
is missing, synchronization with the rest of the miners resolves the issue.

Figure 6 shows an example of a successful comparison between the blockchain and the changelog. Every
changelog entry hash was stored in a block transaction. The blockchain was manually corrupted, so the hash of
an entry would no longer match a valid changelog entry. This corruption was identified, as shown in Figure 7,
validating the integrity of the changelog.

6 DISCUSSION
Part 11 of Title 21 Code of Federal Regulations [1] and ISO 27789 [2] requires that researchers guarantee the
authenticity, integrity, and confidentiality of data collected for clinical trials. Clinical trials are one of the most
important forms of scientific research mechanisms for advancing human health, and the FDA closely regulates
them in the United States of America. The increased use of smart and wearable IoT devices in clinical trials
presents a unique challenge: the advent of computerized data management in EDC and CDM systems has not yet
been adequately addressed.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

16

• Oakley and Worley, et al.

Fig. 5. REDCap data input instrument for the NLMS dataset.

Fig. 6. Successful comparison of changelog (datastore) and blockchain.

We propose Scrybe, a permissioned blockchain, as a method of storing proof of data provenance. Scrybe uses
a lightweight mining algorithm that is more efficient and economical than popular proof-of-work algorithms
(e.g., Ethereum and Bitcoin). Many existing solutions based on popular cryptocurrencies are subject to additional
overhead and volatility. These solutions are also tied to the cryptocurrency’s future success (or failure). Scrybe is

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion •

17

Fig. 7. On a corrupted local instance, the audit failed.

more decentralized than consensus algorithms based on pBFT, which have become popular in the provenance
blockchain space. By using a distributed consensus among competitors, Scrybe ensures immutability. Considering
the requirements outlined in [1], we demonstrate how Scrybe addresses each of the relevant controls. A proof-of-
concept integration with REDCap is used to show tamper resistance. The REDCap-Scrybe provenance framework
allows researchers to track the provenance of any clinical trial data collected by smart devices.

Future work will include further integration with REDCap and trial runs on more datasets. The Scrybe
transaction process will be integrated as a separate daemon that monitors the REDCap database, automatically
generates changelog entries, and submits a transaction whenever changes are detected, providing seamless
integration with existing EDC systems. As discussed in Section 2, Hyperledger offers pluggable consensus
algorithms. Leveraging the Hyperleger framework and implementing a pluggable Scrybe consensus algorithm
would leverage existing technology with a strong community. Scrybe’s application is not limited to tracking
clinical trial provenance. There are other projects currently leveraging this technology. A future version of Scrybe
will include smart-contract functionality to provide researchers with additional functionality and provenance
security.

ACKNOWLEDGMENT
This project was supported, in part, by the National Center for Advancing Translational Sciences of the National
Institutes of Health under Grant Number UL1 TR001450, the South Carolina SmartState Program, and National
Science Foundation grants CNS-1049765, OAC-1547245, and CNS-1544910. The U.S. Government is authorized to
reproduce and distribute reprints for Governmental purposes, notwithstanding any copyright notation thereon.
The authors gratefully acknowledge this support and take responsibility for the contents of this report. The
views and conclusions contained herein are those of the authors and should not be interpreted as necessarily
representing the official policies or endorsements, either expressed or implied, of the National Institutes of Health,
the National Science Foundation, or the U.S. Government.

REFERENCES
[1] (2018) Code of federal regulations title 21. [Online]. Available: https://www.accessdata.fda.gov/scripts/cdrh/cfdocs/cfcfr/CFRSearch.cfm?

CFRPart=11

[2] ISO/TC 215 Health informatics. (2013) ISO 27789:2013 Health informatics — Audit trails for electronic health records. https://www.iso.

org/standard/44315.html.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

18

• Oakley and Worley, et al.

[3] N. Perlroth. Clinical trials hit by ransomware attack on health tech firm. New York Times. [Online]. Available: https:

//www.nytimes.com/2020/10/03/technology/clinical-trials-ransomware-attack-drugmakers.html

[4] T. Bart, “Comparison of electronic data capture with paper data collection – is there really an advantage?” vol. 2003, pp. 1–4, 01 2003.
[5] J. Schobel, R. Pryss, and M. Reichert, “Using smart mobile devices for collecting structured data in clinical trials: Results from a large-scale

case study,” in 2015 IEEE 28th International Symposium on Computer-Based Medical Systems.

IEEE, 2015, pp. 13–18.

[6] T.-C. Lu, C.-M. Fu, M. H.-M. Ma, C.-C. Fang, and A. M. Turner, “Healthcare applications of smart watches: a systematic review,” Applied

clinical informatics, vol. 7, no. 3, p. 850, 2016.

[7] M. Kang, E. Park, B. H. Cho, and K.-S. Lee, “Recent patient health monitoring platforms incorporating internet of things-enabled smart

devices,” International neurourology journal, vol. 22, no. Suppl 2, p. S76, 2018.

[8] R. López-Blanco, M. A. Velasco, A. Méndez-Guerrero, J. P. Romero, M. D. Del Castillo, J. I. Serrano, E. Rocon, and J. Benito-León,
“Smartwatch for the analysis of rest tremor in patients with parkinson’s disease,” Journal of the Neurological Sciences, vol. 401, pp. 37–42,
2019.

[9] A. N. Koshy, J. K. Sajeev, N. Nerlekar, A. J. Brown, K. Rajakariar, M. Zureik, M. C. Wong, L. Roberts, M. Street, J. Cooke et al., “Smart

watches for heart rate assessment in atrial arrhythmias,” International journal of cardiology, vol. 266, pp. 124–127, 2018.

[10] P. A. Harris, R. Taylor, R. Thielke, J. Payne, N. Gonzalez, and J. G. Conde, “Research electronic data capture (redcap) – a metadata-driven
methodology and workflow process for providing translational research informatics support,” Journal of Biomedical Informatics, vol. 42,
pp. 377–381, 2009.

[11] (2018) Trends, charts, and maps. [Online]. Available: https://clinicaltrials.gov/ct2/resources/trends
[12] O. Hambolu, L. Yu, J. Oakley, R. R. Brooks, U. Mukhopadhyay, and A. Skjellum, “Provenance threat modeling,” CoRR, vol. abs/1703.03835,

2017. [Online]. Available: http://arxiv.org/abs/1703.03835

[13] O. S. Collaboration et al., “Estimating the reproducibility of psychological science,” Science, vol. 349, no. 6251, p. aac4716, 2015.
[14] J. Ranstam, M. Buyse, S. L. George, S. Evans, N. L. Geller, B. Scherrer, E. Lesaffre, G. Murray, L. Edler, J. L. Hutton et al., “Fraud in medical

research: an international survey of biostatisticians,” Controlled clinical trials, vol. 21, no. 5, pp. 415–427, 2000.

[15] Office of Civil Rights, “Standards for privacy of individually identifiable health infor-mation: final rules,” pp. 67(157):53 182–272, 2002.
[16] H. Zhao, Y. Zhang, Y. Peng, and R. Xu, “Lightweight backup and efficient recovery scheme for health blockchain keys,” in 2017 IEEE 13th

international symposium on autonomous decentralized system (ISADS).

IEEE, 2017, pp. 229–234.

[17] Q. Xia, E. B. Sifah, K. O. Asamoah, J. Gao, X. Du, and M. Guizani, “Medshare: Trust-less medical data sharing among cloud service

providers via blockchain,” IEEE Access, vol. 5, pp. 14 757–14 767, 2017.

[18] Y. Yang, X. Li, N. Qamar, P. Liu, W. Ke, B. Shen, and Z. Liu, “Medshare: a novel hybrid cloud for medical resource sharing among

autonomous healthcare providers,” IEEE Access, vol. 6, pp. 46 949–46 961, 2018.

[19] X. Yue, H. Wang, D. Jin, M. Li, and W. Jiang, “Healthcare data gateways: found healthcare intelligence on blockchain with novel privacy

risk control,” Journal of medical systems, vol. 40, no. 10, pp. 1–8, 2016.

[20] BurstIQ, “Bringing health to life,” https://www.burstiq.com/wp-content/uploads/2017/08/BurstIQ-whitepaper_19Jul2017reduced.pdf.
[21] L. A. Linn and M. B. Koo, “Blockchain for health data and its potential use in health it and health care related research,” in ONC/NIST Use

of Blockchain for Healthcare and Research Workshop. Gaithersburg, Maryland, United States: ONC/NIST, 2016, pp. 1–10.

[22] A. Al Omar, M. S. Rahman, A. Basu, and S. Kiyomoto, “Medibchain: A blockchain based privacy preserving platform for healthcare data,”
Springer, 2017, pp. 534–543.
[23] X. Liu, W. Ma, and H. Cao, “Mbpa: A medibchain-based privacy-preserving mutual authentication in tmis for mobile medical cloud

in International conference on security, privacy and anonymity in computation, communication and storage.

architecture,” IEEE Access, vol. 7, pp. 149 282–149 298, 2019.

[24] J. Xu, K. Xue, S. Li, H. Tian, J. Hong, P. Hong, and N. Yu, “Healthchain: A blockchain-based privacy preserving scheme for large-scale

health data,” IEEE Internet of Things Journal, vol. 6, no. 5, pp. 8770–8781, 2019.

[25] Q. Xia, E. B. Sifah, A. Smahi, S. Amofa, and X. Zhang, “Bbds: Blockchain-based data sharing for electronic medical records in cloud

environments,” Information, vol. 8, no. 2, p. 44, 2017.

[26] V. Patel, “A framework for secure and decentralized sharing of medical imaging data via blockchain consensus,” Health informatics

journal, vol. 25, no. 4, pp. 1398–1411, 2019.

[27] K. Peterson, R. Deeduvanu, P. Kanjamala, and K. Boles, “A blockchain-based approach to health information exchange networks,” in

Proc. NIST Workshop Blockchain Healthcare, vol. 1, no. 1, 2016, pp. 1–10.

[28] G. Irving and J. Holden, “How blockchain-timestamped protocols could improve the trustworthiness of medical science,” F1000Research,

vol. 5, 2016.

[29] P. Mamoshina, L. Ojomoko, Y. Yanovich, A. Ostrovski, A. Botezatu, P. Prikhodko, E. Izumchenko, A. Aliper, K. Romantsov, A. Zhebrak
et al., “Converging blockchain and next-generation artificial intelligence technologies to decentralize and accelerate biomedical research
and healthcare,” Oncotarget, vol. 9, no. 5, p. 5665, 2018.

[30] P. Snow, B. Deery, J. Lu, D. Johnston, and P. Kirby, “Factom,” https://4454jm4bovib1sa6vrtflbew-wpengine.netdna-ssl.com/assets/docs/

Factom_Whitepaper_v1.2.pdf.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

Scrybe: A Secure Audit Trail for Clinical Trial Data Fusion •

19

[31] A. Azaria, A. Ekblaw, T. Vieira, and A. Lippman, “Medrec: Using blockchain for medical data access and permission management,” in

2016 2nd International Conference on Open and Big Data (OBD).

IEEE, 2016, pp. 25–30.

[32] A. Ekblaw, A. Azaria, J. D. Halamka, and A. Lippman, “A case study for blockchain in healthcare:“medrec” prototype for electronic

health records and medical research data,” in Proceedings of IEEE open & big data conference, vol. 13, 2016, p. 13.

[33] P. Mytis-Gkometh, G. Drosatos, P. Efraimidis, and E. Kaldoudi, “Notarization of knowledge retrieval from biomedical repositories using

blockchain technology,” in International Conference on Biomedical and Health Informatics.

Springer, 2017, pp. 69–73.

[34] T. Nugent, D. Upton, and M. Cimpoesu, “Improving data transparency in clinical trials using blockchain smart contracts,” F1000Research,

vol. 5, 2016.

[35] M. Benchoufi, R. Porcher, and P. Ravaud, “Blockchain protocols in clinical trials: Transparency and traceability of consent,” F1000Research,

vol. 6, 2017.

[36] M. Benchoufi and P. Ravaud, “Blockchain technology for improving clinical research quality,” Trials, vol. 18, no. 1, pp. 1–5, 2017.
[37] Medicalchain, “Medicalchain – a blockchain for electronic health records.” https://medicalchain.com/Medicalchain-Whitepaper-EN.pdf.
[38] A. Juneja and M. Marefat, “Leveraging blockchain for retraining deep learning architecture in patient-specific arrhythmia classification,”

in 2018 IEEE EMBS International Conference on Biomedical & Health Informatics (BHI).
[39] M. Scherer, “Performance and scalability of blockchain networks and smart contracts,” 2017.
[40] “Introduction to hyperledger business blockchaindesign philosophy and consensus,” vol. 1, https://www.hyperledger.org/wp-content/

IEEE, 2018, pp. 393–397.

uploads/2017/08/Hyperledger_Arch_WG_Paper_1_Consensus.pdf.

[41] M. Castro and B. Liskov, “Practical byzantine fault tolerance and proactive recovery,” ACM Transactions on Computer Systems (TOCS),

vol. 20, no. 4, pp. 398–461, 2002.

[42] A. Bessani, J. Sousa, and E. E. Alchieri, “State machine replication for the masses with bft-smart,” in 2014 44th Annual IEEE/IFIP

International Conference on Dependable Systems and Networks.

IEEE, 2014, pp. 355–362.

[43] G. G. Gueta, I. Abraham, S. Grossman, D. Malkhi, B. Pinkas, M. Reiter, D.-A. Seredinschi, O. Tamir, and A. Tomescu, “Sbft: a scalable and
decentralized trust infrastructure,” in 2019 49th Annual IEEE/IFIP international conference on dependable systems and networks (DSN).
IEEE, 2019, pp. 568–580.

[44] A. Miller, Y. Xia, K. Croman, E. Shi, and D. Song, “The honey badger of bft protocols,” in Proceedings of the 2016 ACM SIGSAC Conference

on Computer and Communications Security, 2016, pp. 31–42.

[45] J. Kreps, N. Narkhede, J. Rao et al., “Kafka: A distributed messaging system for log processing,” in Proceedings of the NetDB, vol. 11, 2011,

pp. 1–7.

[46] M. Vukolić, “The quest for scalable blockchain fabric: Proof-of-work vs. bft replication,” in International workshop on open problems in

network security.

Springer, 2015, pp. 112–125.

[47] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand: Scaling byzantine agreements for cryptocurrencies,” in Proceedings

of the 26th Symposium on Operating Systems Principles, 2017, pp. 51–68.

[48] S. Duan, H. Meling, S. Peisert, and H. Zhang, “Bchain: Byzantine replication with high throughput and embedded reconfiguration,” in

International Conference on Principles of Distributed Systems.

Springer, 2014, pp. 91–106.

[49] P. Sandell, M. Bowman, and P. Shah, “Blockchain and its emerging role in healthcare related research,” https://public-inspection.

federalregister.gov/2016-16133.pdf?1467809533.

[50] K. Murdock, D. Oswald, F. D. Garcia, J. Van Bulck, D. Gruss, and F. Piessens, “Plundervolt: Software-based fault injection attacks against

intel sgx,” in Proceedings of the 41st IEEE Symposium on Security and Privacy (S&P’20), 2020.

[51] N. Bhat, A. Altaranaweh, L. Yu, T. Skjellum, and R. R. Brooks, “Lightweight mining (LWM): A secure and efficientdistributed ledger

consensus protocol,” In Preparation.

[52] C. Goble, “Position statement: Musings on provenance, workflow workflow and (semantic web) annotations for bioinformatics,” in

Workshop on Data Derivation and Provenance, 2002.

[53] Y. L. Simmhan, B. Plale, and D. Gannon, “A survey of data provenance in e-science,” SIGMOD Rec., vol. 34, no. 3, pp. 31–36, Sep. 2005.

[Online]. Available: http://doi.acm.org/10.1145/1084805.1084812

[54] ——, “A survey of data provenance techniques,” Computer Science Department, Indiana University, Tech. Rep. 612, 2005, extended

version of SIGMOD Record 2005. [Online]. Available: http://www.cs.indiana.edu/pub/techreports/TR618.pdf

[55] B. Glavic and K. R. Dittrich, “Data Provenance: A Categorization of Existing Approaches,” in Proceedings of the 12th
[Online]. Available:

GI Conference on Datenbanksysteme in Buisness, Technologie und Web (BTW), 2007, pp. 227–241.
http://cs.iit.edu/%7edbgroup/pdfpubls/GD07.pdf

[56] L. Moreau, J. Freire, J. Futrelle, R. Mcgrath, J. Myers, and P. Paulson, “The Open Provenance Model: An Overview,” 2008, pp. 323–326.

[Online]. Available: http://dx.doi.org/10.1007/978-3-540-89965-5_31

[57] Y. Gil, S. Miles, K. Belhajjame, H. Deus, D. Garijo, G. Klyne, P. Missier, S. Soiland-Reyes, and S. Zednik, “Prov model primer,” W3C, Tech.

Rep., 2012. [Online]. Available: http://www.w3.org/TR/prov-primer/

[58] O. Hambolu, L. Yu, J. Oakley, R. R. Brooks, U. Mukhopadhyay, and A. Skjellum, “Provenance threat modeling,” in 2016 14th Annual

Conference on Privacy, Security and Trust (PST).

IEEE, 2016, pp. 384–387.

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

20

• Oakley and Worley, et al.

[59] F. Pérez and B. E. Granger, “IPython: a system for interactive scientific computing,” Computing in Science and Engineering, vol. 9, no. 3,

pp. 21–29, May 2007. [Online]. Available: http://ipython.org

[60] K. Wolstencroft, R. Haines, D. Fellows, A. Williams, D. Withers, S. Owen, S. Soiland-Reyes, I. Dunlop, A. Nenadic, P. Fisher, J. Bhagat,
K. Belhajjame, F. Bacall, A. Hardisty, A. Nieva de la Hidalga, M. P. Balcazar Vargas, S. Sufi, and C. Goble, “The Taverna workflow suite:
designing and executing workflows of Web Services on the desktop, web or in the cloud,” Nucleic Acids Research, vol. 41, no. Web Server
issue, pp. gkt328–W561, May 2013. [Online]. Available: http://dx.doi.org/10.1093/nar/gkt328

[61] “Vistrails documentation,” September 2016. [Online]. Available: http://www.vistrails.org/usersguide/v1.7/html/VisTrails.pdf
[62] Y. L. Simmhan, B. Plale, and D. Gannon, “Karma provenance collection tool,” 2012. [Online]. Available: http://d2i.indiana.edu/

provenance_karma

[63] I. Suriarachchi, Q. Zhou, and B. Plale, “Komadu: A capture and visualization system for scientific data provenance,” Journal of Open

Research Software, vol. 3, no. 1, 2015. [Online]. Available: http://openresearchsoftware.metajnl.com/articles/10.5334/jors.bq/

[64] “The kepler project,” September 2016. [Online]. Available: https://kepler-project.org
[65] Y. Zhao, M. Hategan, B. Clifford, I. Foster, G. von Laszewski, V. Nefedova, I. Raicu, T. Stef-Praun, and M. Wilde, “Swift: Fast, reliable,

loosely coupled parallel computation,” in Services, 2007 IEEE Congress on, July 2007, pp. 199–206.

[66] “Sumatra,” 2013. [Online]. Available: http://neuralensemble.org/sumatra/
[67] L. Carata, S. Akoush, N. Balakrishnan, T. Bytheway, R. Sohan, M. Seltzer, and A. Hopper, “A primer on provenance,” Queue, vol. 12, no. 3,

pp. 10:10–10:23, Mar. 2014. [Online]. Available: http://doi.acm.org/10.1145/2602649.2602651

[68] J. S. Obeid, C. A. Mcgraw, B. L. Minor, J. G. Conde, R. Pawluk, M. Lin, J. Wang, S. R. Banks, S. A. Hemphill, R. Taylor, and et al.,
“Procurement of shared data instruments for research electronic data capture (redcap),” Journal of Biomedical Informatics, vol. 46, no. 2, p.
259–265, 2013.

[69] S. D. Gantz and D. R. Philpott, FISMA and the risk management framework: the new practice of federal cyber security. Newnes, 2012.
[70] (2018) Project redcap. [Online]. Available: https://www.projectredcap.org/
[71] Vanderbilt University. REDCap General Security Overview. https://www.iths.org/wp-content/uploads/About-REDCap-Vanderbilt.pdf.
[72] REDCap. (2019) REDCap Change Log. https://www.evms.edu/research/resources_services/redcap/redcap_change_log/.
[73] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system. bitcoin. org,” URL: https://bitcoin. org/bitcoin. pdf (accessed: 21.05. 2019),

2008.

[74] S. Haber and W. S. Stornetta, “How to time-stamp a digital document,” in Conference on the Theory and Application of Cryptography.

Springer, 1990, pp. 437–455.

[75] C. Worley and A. Skjellum, “Blockchain Tradeoffs and Challenges for Current and Emerging Applications: Generalization, Fragmentation,

Sidechains, and Scalability,” 2018, presented at IEEE Blockchain 2018, Halifax.

[76] A. W. Appel, “Verification of a cryptographic primitive: Sha-256,” ACM Transactions on Programming Languages and Systems, 2015.
[77] (2019) Blockchain. [Online]. Available: https://www.blockchain.com
[78] R. L. Rivest, A. Shamir, and L. Adleman, “A method for obtaining digital signatures and public-key cryptosystems,” Communications of

the ACM, vol. 21, no. 2, pp. 120–126, 1978.

[79] D. Hankerson and A. Menezes, Elliptic curve cryptography.
[80] “Nsa suite b cryptography - nsa/css,” NSA, Tech. Rep., 2015. [Online]. Available: https://web.archive.org/web/20150905185709/https:

Springer, 2011.

//www.nsa.gov/ia/programs/suiteb_cryptography/

[81] E. B. Barker, “Digital signature standard (dss),” Tech. Rep., 2009.
[82] R. R. Brooks, K. Wang, L. Yu, J. Oakley, A. Skjellum, J. S. Obeid, L. Lenert, and C. Worley, “Scrybe: A blockchain ledger for clinical trials,”

in IEEE Blockchain in Clinical Trials Forum: Whiteboard challenge winner, 2018.

[83] C. Worley, L. Yu, R. Brooks, J. Oakley, A. Skjellum, A. Altarawneh, S. Medury, and U. Mukhopadhyay, “Scrybe: A second-generation
blockchain technology with lightweight mining for secure provenance and related,” Blockchain Cybersecurity, Trust and Privacy, vol. 79,
p. 51, 2020.

[84] S. Burns. (2013) Intro to the redcap api. [Online]. Available: http://sburns.org/2013/07/22/intro-to-redcap-api.html
[85] (2015) National longitudinal mortality study (nlms) biolincc bookmark. [Online]. Available: https://biolincc.nhlbi.nih.gov/studies/nlms/

Digit. Threat. Res. Pract., Vol. 1, No. 1, Article . Publication date: September 2021.

