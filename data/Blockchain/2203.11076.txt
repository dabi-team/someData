Collaborative Learning for Cyberattack Detection
in Blockchain Networks

Tran Viet Khoa, Do Hai Son, Dinh Thai Hoang, Nguyen Linh Trung,
Tran Thi Thuy Quynh, Diep N. Nguyen, Nguyen Viet Ha and Eryk Dutkiewicz.

1

2
2
0
2

p
e
S
5
1

]

R
C
.
s
c
[

2
v
6
7
0
1
1
.
3
0
2
2
:
v
i
X
r
a

Abstract—This article aims to study intrusion attacks and then
develop a novel cyberattack detection framework for blockchain
networks. Speciﬁcally, we ﬁrst design and implement a blockchain
network in our laboratory. This blockchain network will serve
two purposes, i.e., to generate the real trafﬁc data (including
both normal data and attack data) for our learning models and
implement real-time experiments to evaluate the performance
of our proposed intrusion detection framework. To the best
of our knowledge, this is the ﬁrst dataset that is synthesized
in a laboratory for cyberattacks in a blockchain network. We
then propose a novel collaborative learning model that allows
efﬁcient deployment in the blockchain network to detect attacks.
The main idea of the proposed learning model
is to enable
blockchain nodes to actively collect data, share the knowledge
learned from its data, and then exchange the knowledge with
other blockchain nodes in the network. In this way, we can not
only leverage the knowledge from all the nodes in the network
but also do not need to gather all raw data for training at a
centralized node like conventional centralized learning solutions.
Such a framework can also avoid the risk of exposing local data’s
privacy as well as the excessive network overhead/congestion.
Both intensive simulations and real-time experiments clearly
show that our proposed collaborative learning-based intrusion
detection framework can achieve an accuracy of up to 97.7% in
detecting attacks.

Index Terms—Blockchain, deep learning, collaborative learn-

ing, cyberattack detection, cybersecurity.

I. INTRODUCTION

B LOCKCHAIN [1]–[3] has been emerging as a novel

technology in storing and managing data with many
advantages over conventional data management systems. In
particular, unlike traditional centralized data management so-
lutions, blockchain technology allows data to be stored in a
distributed manner across multiple nodes. In this way, data
can be accessed and processed simultaneously at multiple
nodes, and thus avoiding the problem of bottlenecks and single
point of failure. More importantly, one of the most important
features of blockchain technology is to enable data to be stored
in blocks, and once a block of data is veriﬁed and placed in
the chain, it cannot be modiﬁed and/or deleted. In this way, the
data’s integrity can be protected thanks to outstanding features
of blockchain, e.g., decentralization, immutability, auditability

T. V. Khoa, D. T. Hoang, D. N. Nguyen, and E. Dutkiewicz are with the
School of Electrical and Data Engineering, University of Technology Syd-
ney, Sydney, NSW 2007, Australia (e-mail: khoa.v.tran@student.uts.edu.au,
{hoang.dinh, diep.nguyen, eryk.dutkiewicz}@uts.edu.au).

N. L. Trung, D. H. Son, T. T. T. Quynh and N. V. Ha are with the
Advanced Institute of Engineering and Technology (AVITECH), University
of Engineering and Technology, Vietnam National University, Hanoi, Vietnam
(e-mail: {linhtrung, dohaison1998, quynhttt, hanv}@vnu.edu.vn).

and fault tolerance [2]. As a result, there are more and more
applications of blockchain technology in our lives including
ﬁnance, healthcare, logistics and IoT systems [2]–[5].

Due to the rapid success with a wide range of applications
in most areas, especially in money transfer and cryptocurrency,
blockchain-based systems have been becoming targets of many
new generation cyberattacks. For example, in September 2020,
KuCoin, a crypto exchange based in Singapore, announced
that its system was hacked and the hackers stole over $281
million worth of coins and tokens [6]. In May 2019, Binance,
one of the biggest cryptocurrency exchange companies in
the world, reported to be hit by a major security incident.
In particular, the hackers did break the exchange’s security
system and withdraw over 7,000 bitcoins from digital wallets,
causing a total loss of approximately $40 million for the
customers [6]. Most recently, in January 2022, Chainalysis
reported that North Korean hackers performed seven attacks
into cryptocurrency platforms and stole nearly $400 million
from digital assets in 2021 [7]. Although most of current
attacks target on virtual money exchange systems, a number of
blockchain applications in critical areas such as healthcare [8]
and food supply chains [9] could be potential for attackers
in the near future. These attacks, if happen, not only cause
huge losses on our assets, but can also lead to many serious
issues related to human health and lives. Therefore, solutions
to detect and prevent attacks in blockchain networks are
becoming more urgent than ever.

In network security, Machine Learning (ML) has been being
considered as the most effective solution to detect cyberattacks
with very high accuracies [10]–[12]. The main reasons for the
outstanding advantages of using ML for intrusion detection
problems compared with other conventional detection methods
such as signature-based and abnormally-based are threefold.
First, unlike conventional intrusion detection solutions which
are usually designed to detect a speciﬁc type of attack (e.g.,
virus, trojan, spam and botnet), ML solutions allow to detect
many types of attacks at
the same time with very high
accuracies. For example, Deep Learning (DL) allows to detect
cyberattacks in industrial automation and control system with
an accuracy of up to 97.5% [13]. Second, while traditional
solutions are often designed to detect known attacks, ML
allows to detect attacks that have never been detected and
reported before. For example, in [14], the authors showed
that their DL model can detect attacks such as, the DDoS
attack of Mirai and BASHLITE botnets, even though such
types of attacks have never been learned/trained before by
this model. Last but not least, ML algorithms, especially DL,

 
 
 
 
 
 
can be deployed effectively, quickly and ﬂexibly. For example,
after a deep neural network is trained, it can be deployed in
different intrusion detection systems at the same time to detect
cyberattacks quickly with high accuracies. In addition, when
data about new types of attacks is available, we can easily
update new versions of deep neural networks through transfer
learning techniques [15].

As a result, ML has been considering as a highly-
effective solution to detect the cyberattacks for blockchain net-
works [16]. In particular, in [17], the authors proposed to use
Random Forest and XGBoost to detect attacks in a blockchain-
based IoT system. The results show that this solution can
identify different types of attacks and normal behaviors with an
accuracy of up to 99%. However, they only tested their results
on the BoT-IoT dataset that is not real blockchain trafﬁc.
Similarly, in [18], the authors proposed an ML-based method,
called bidirectional
long short-term memory (BiLSTM) to
detect attacks in an IoT network before the data is stored in
the blockchain network. Although the results also showed that
they can detect different kinds of attacks with an accuracy of
up to 99%, they were validated only on conventional network
datasets such as UNSW-NB15 and BoT-IoT datasets. These
datasets are collected in conventional computer networks and
thus cannot reﬂect actual trafﬁc in blockchain networks. In
particular, these datasets have just general attacks in computer
networks without speciﬁc attacks in blockchains, e.g., changes
in blockchain transactions, incorrect consensus protocol or the
break of the chain of blocks.

To the best of our knowledge, there are only few works that
consider to use the real blockchain trafﬁc, e.g., try to generate
artiﬁcial data or try to create data to simulate an attack for
blockchain networks to train ML models such as [19]–[21].
Speciﬁcally, in [19] the authors proposed a method to collect
blockchain trafﬁc data. First, they captured trafﬁc samples
from a public Bitcoin node and used them as the normal
network data. Then, for the malicious trafﬁc data, the authors
performed DoS and Eclipse attacks on a target device (this
device was created to become a node in the Bitcoin network).
After that, the collected data was used to train an autoencoder
deep learning model. This solution showed an accuracy of
attack detection up to 99%. In [20], the authors used a public
dataset and a private dataset from their testbed. Then, they
proposed to use a Long Short-Term Memory Network (LSTM)
to learn the properties of normal samples in the datasets.
After that, they deployed a Condition Generative Adversarial
Networks (CGAN) model to generate the artiﬁcial Low-rate
Distributed DoS (LDDoS) attack samples for their blockchain
dataset. The results showed the accuracy of classiﬁcation up
to 93%. In addition, in [21], the authors performed a DDoS
attack namely Link Flood Attack (LFA) on a the simulation
Ethereum network and collected the traceroute records of the
network in both normal and attack behaviors. After that, the
authors used the Recurrent Neural Network (RNN) to analyze
the traceroute records to identify the attacks in the network.
The results showed that the attack detection rate can achieve
nearly 99%.

From all the above works and others in the literature, we can
observe two main challenges for ML-based intrusion detection

2

systems in blockchain networks which still have not been
addressed. In particular, the ﬁrst challenge is lacking of a
synthetic data from laboratories for training ML models. Most
of current works, e.g., [17] and [18] are using conventional
cybersecurity datasets (e.g., UNSW-NB15 and BoT-IoT) to
train data. However,
these datasets were not designed for
blockchain networks, and thus they are not appropriate to use
in intrusion detection systems in blockchain networks. Other
works, e.g., [19]–[21], tried to build their own datasets for
blockchain networks, e.g., by obtaining the normal samples
from the Bitcoin network [19], creating simulation experiment
to detect the LFA [21] and generating artiﬁcial attack samples
by CGAN [20]. However, these methods have several issues.
First, normal samples of transactions from the Bitcoin network
may include attacks from public blockchain network, but all
collected data are classiﬁed and labeled to be normal data.
Second, the simulation experiment in [21] was to generate
traceroute records only for the LFA so they cannot extend to
other attacks. Furthermore, it is difﬁcult to evaluate the effects
of artiﬁcial attack samples in [20] whether they can simulate
a real attack into blockchain network or not. The another
challenge we can observe here is that all of current ML-
based intrusion detection solutions for blockchain networks are
based on centralized learning models, i.e., all data is collected
at a centralized node for training and detection. However,
this solution is not suitable to deploy in blockchains as they
are decentralized networks. Speciﬁcally, nodes in blockchain
networks may have different data to train and due to privacy
to share their raw data1 to
concerns,
a centralized node (or other nodes) for training processes.
Moreover, sending a huge amount of data to the network
will not only cause excessive network trafﬁc, but also risk
compromising the data integrity of blockchain networks.

they may not want

This article aims to address the aforementioned challenges
by ﬁrst introducing a novel intrusion detection dataset named
BNaT which stands for Blockchain Network Attack Trafﬁc,
created from a real blockchain network in our laboratory and
then proposing an effective decentralized collaborative ma-
chine learning framework to detect intrusions in the blockchain
network. Speciﬁcally, to develop BNaT, we ﬁrst set up and
implement a blockchain network in our laboratory using
Ethereum (an open-source blockchain software) and perform
intensive experiments to generate blockchain data (including
both normal and malicious trafﬁc data). The main objectives
of producing BNaT dataset are fourfold. Firstly, we collect
the BNaT in a laboratory environment to have “clean” data
samples (i.e., to ensure that the obtained data is not corrupted,
error and/or irrelevant), that is especially important for training
ML models. Secondly, the BNaT can be easily extended to
include to new kinds of blockchain attacks, e.g., 51% or
double spending attacks. Thirdly, we perform experiments
with real attacks in the considered blockchain network, and
thus the BNaT can reﬂect better the actual attack behavior of

1The raw data means the network trafﬁc data of a local network that can
be classiﬁed into normal or attack data, that will be used for the learning
process. This data usually contains sensitive information (e.g., cryptographic
keys, usage ports, or local network bandwidth) that the node does not want
to share with other nodes in the network.

network than simulations or by artiﬁcial attack data generated
by GAN in the literature, e.g., [20]. Fourthly, we collect the
data in different blockchain nodes to have a complete view
of effects when the attacks are performed in a decentralized
manner. After that, we develop a highly-effective collaborative
learning framework to make it more effective in deploying
in blockchain networks to detect attacks. In particular, in our
proposed learning framework, working nodes in the blockchain
network (e.g., mining nodes) can be used as learning nodes
to collect blockchain data (e.g., observing its own trafﬁc and
classifying data). However, unlike centralized learning models,
these nodes will train their learning models by using their
own datasets instead of sending their datasets to a centralized
node for processing. After that, these nodes can share their
trained models to other nodes in the network to improve
the accuracy of the trained models. In this case, even the
nodes do not need to share their raw data, they still can learn
useful information from other nodes in the network through
extracting information from shared trained models. The main
contributions of this paper can be summarized as follows.

• We set up experiments in our laboratory to build a
private blockchain network with the aims of not only
obtaining real blockchain datasets, but also testing our
proposed learning model in a real-time manner. To the
best of our knowledge, this is the ﬁrst dataset obtained
from a laboratory for studying cyberattacks in blockchain
networks, and thus we expect that our proposed BNaT
dataset can promote the development of ML-based in-
trusion detection solutions in blockchain networks in the
near future.

• We build an effective tool named Blockchain Intrusion
Detection (BC-ID) to collect data in the blockchain
network. This tool can extract features from the collected
network trafﬁc data, ﬁlter attack samples in network
trafﬁc, and exactly label them in a real-time manner.
• We propose a collaborative decentralized learning model
to not only improve the accuracy of identifying attacks,
but also effectively deploy in decentralized blockchain
networks. This model enables nodes in the network to
effectively share their trained models to improve cyber-
attack detection efﬁciency without sharing their raw data.
• We perform both intensive simulations and real-time
experiments to evaluate our proposed framework. Both
simulation and experimental results clearly show out-
performance of our proposed framework compared with
other baseline ML methods. Furthermore, our results
reveal some important information in designing and im-
plementing learning models in blockchain networks in
practice, e.g., real-time monitoring and detecting attacks.

The rest of this paper is organized as follows. Section II pro-
vides fundamental backgrounds and our designed blockchain
network together with the collaborative learning model. Sec-
tion III presents our proposed collaborative learning model to
detect cyberattacks in the blockchain network. The experiment
setup, dataset collection, and evaluation method are described
in Section IV. After that, the experimental results and perfor-
mance evaluations are discussed more details in Section V.

3

Finally, we conclude the paper in Section VI.

II. BLOCKCHAIN NETWORK: FUNDAMENTALS AND
PROPOSED NETWORK MODEL

A. Blockchain

Blockchain is a novel method in storing and managing data
in a decentralized manner. In a blockchain network, multiple
nodes are used to simultaneously process and store data. In
particular, when a node in the blockchain network receives
transactions (e.g., money exchange in the Bitcoin network), it
will gather all the transactions and put in a block. This node
will then start a mining process to ﬁnd a “nonce” value for
this block. It is important to note that thanks to the feature of
the hash function, there is only a small set of satisfying nonce
values for a block, and these values can only be found through
an intensive searching process [1]. This mining process is a
special process of blockchain networks to provide proofs for
validated blocks, and thus this tamper-proof can signiﬁcantly
enhance security for blockchain networks. After the node ﬁnds
the nonce value for the mining block, this new block will be
broadcast and veriﬁed by other nodes in the network. Finally,
if this block is veriﬁed, it will be put to the chain (linked
to the hash value of the previous block inside its header).
After the block is added to the chain, it is nearly impossible
to change information in this block, and thus this property
can guarantee the immutability of the blockchain. Another
aspect of blockchain is traceability due to infeasible collision
of the hash function, and thus any transaction or block can
be tracked correctly. In summarize, blockchain can be termed
as a decentralization, immutable, traceable, and time-stamped
digital data chain (ledger).

B. Designed Blockchain Network at our Laboratory

In order to launch a blockchain network, there are two main
kinds of blockchain nodes namely full node and bootnode.
Firstly, full nodes take responsibility to store the ledger,
participate in the mining process, and verify all blocks and
states. Furthermore, they can be used to serve the network
and provide data on request, e.g., netstats, which is a vi-
sual
interface for tracking Ethereum network status (e.g.,
the block number, mining status and the number of pending
transactions). Secondly, bootnode is a lightweight application
used for the Node Discovery Protocol. The bootnodes do not
synchronize blockchain ledger but help other Ethereum nodes
discover peers to set up Peer-to-Peer (P2P) connections in the
network.

The system model together with essential components of
our designed blockchain network are set up as illustrated in
Fig. 1. Speciﬁcally, the model includes K full nodes which
are used to receive transactions, mining blocks, and keep the
replica of ledger. These nodes continuously synchronize their
ledgers together by the P2P protocol with equal permissions
and responsibilities for processing data [1]. In order to connect
them together, a management node, known as bootnode, is
set up. The full nodes connect and interrogate this bootnode
for the location of potential peers in the blockchain network.
After being connected, each full node can collect data (i.e.,

4

Fig. 2: The structure of classiﬁcation-based for intrusion
detection learning model for the blockchain network.

To do so, we ﬁrst design a framework in the decentralized
blockchain network in which each participated learning node
(i.e., fullnode in the blockchain network) will use a deep
learning model (we will explain more details in the next
section) to learn from its collected data and then share its
trained model to a Centralized Server (CS). The CS can be
a bootnode or any full node in the blockchain network. After
that, the CS will aggregate all the trained models and send
the aggregated model (i.e., the global model) back to the
participated learning nodes. By doing this process iteratively,
the learning nodes can gradually update their deep learning
models and ﬁnally can reach the convergence (to the global
training model). In this way, we can not only improve the accu-
racy of detecting cyberattacks in blockchain network but also
eliminate the risks of exposing data over the network. Fig. 1
describes our proposed framework for intrusion detection in
the blockchain network. In this design, all the blockchain
nodes can quickly detect and prevent attacks to them. In
addition, thanks to the advantages of our proposed machine
learning model, our framework can detect attacks very quickly
with very high accuracies (more details and results will be
explained in Section V). Therefore, our proposed model can
perform ofﬂine training and real-time detection to quickly
and efﬁciently prevent attacks in decentralized blockchain
networks.

III. PROPOSED COLLABORATIVE LEARNING MODEL FOR
INTRUSION DETECTION IN BLOCKCHAIN NETWORK

In our proposed collaborative learning model, full nodes
in the blockchain networks will be used as Learning Nodes
(LNs) to learn data and share their learned knowledge to
improve learning performance for the whole network. At each
learning node, we propose to use a deep neural network to
learn useful information from its collected data. Then, the
learning nodes will share their trained learning models to the
CS. After that, the CS will calculate the aggregated model (i.e.,
the global model) and share this model back to the LNs. When
a learning node receives this aggregated model from the CS,
it will integrate with its current learning model and train its
local dataset. This process will be repeated until convergence
or reaching a predeﬁned maximum number of iterations. To
the end, we can obtain the global learning model for all the
learning nodes.

Fig. 1: Proposed collaborative learning model for blockchain
network.

transactions) from its network. Transactions can come from
different blockchain applications such as cryptocurrency, smart
city, food supply chain, and IoT. First, when transactions are
sent to a full node, they will be veriﬁed and packed into one
block. After the node ﬁnds the nonce value for this block, it
will broadcast the block together with this nonce value to other
nodes in the network for veriﬁcation. Finally, if the block is
veriﬁed by majority nodes in the network, it will be added to
the chain.

At our laboratory, we design a private blockchain network
based on the Ethereum blockchain network. This network also
uses the Proof-of-Work (PoW) consensus mechanism, but the
block conﬁrmation time is signiﬁcantly faster than the older
version in Bitcoin. Furthermore, the smart contract layer of
Ethereum is suitable for ﬂexible purposes of decentralized
environments as mentioned above. In addition, at each node,
several attacks, that can cause serious damages in the public
blockchain network, will be considered. We then capture the
trafﬁc data to analyze their impacts on the blockchain network
using BC-ID. Note that, in practice, there is no software which
supports automatically capturing the blockchain network traf-
ﬁc so far. Therefore, we have to analyze the blockchain
network trafﬁc data by using the Wireshark [22] and build
a new collection tool, namely BC-ID (more details will be
explained in Section IV). In this way, we can observe effects
of these attacks on different nodes in the blockchain network.

C. Proposed Collaborative Learning Model

In this section, we introduce our proposed collaborative
learning model which can collaborate to effectively and de-
centralizedly detect attacks in the blockchain network. Our
proposed model aims to leverage knowledge learned from all
the nodes in the network without revealing their raw data.

Blockchain Full NodeDeep Learning ModeltransactiontransactiontransactiontransactiontransactiontransactiontransactiontransactiontransactionTransactionsNetwork-KTransactionsNetwork-3TransactionsNetwork-1TransactionsNetwork-2Device-1Device-3Device-KDevice-2Blockchain NetworkGRBMRBMRBMInput layerHidden layersOutput layerNormalBPFoTBlockchainNetwork DatasetDeep Belief NetworkDoSIn our proposed model, each blockchain node has a set of
local collected data, and we propose a deep neural network
(DNN) using Deep Belief Network (DBN) to better learn
knowledge from this data. The DBN is a type of deep neural
network that is used as a generative model of both labeled
and unlabeled data. Therefore, unlike other supervised deep
neural networks which use labeled data to train the neural
networks (e.g., convolutional neural networks [23]), the DBN
has two stages in the training process. The ﬁrst stage is the
pre-training process where the DBN trains its neural network
with unlabeled dataset. The second stage is ﬁne-tuning process
where DBN uses labeled dataset to train its neural network.
Thereby,
the DBN can represent better the characteristics
of dataset, and thus it can classify the normal behavior
and different types of attacks with very high accuracies. In
addition, the DBN includes multiple Restricted Boltzmann
Machines (RBM) layers for latent representation [24]. In
the DBN training process, the current layer generates latent
representation by using latent representation of previous layer
as the input. Unlike other deep neural networks which also
can process both labeled and unlabeled data (e.g., autoencoder
deep learning network [23]), the DBN optimizes the energy
function of each layer to have better latent representations of
data on each RBM layer in each iteration. Thereby, the DBN
is more appropriate to analyze the blockchain network trafﬁc
where the samples and features have relatively coherence with
each other.

The whole processes of DBN are illustrated in Fig. 2. Like
other DNNs, the structure of DBN has three layers including
an input layer, an output layer and multiple hidden layers.
As can be seen in Fig. 2, the Gaussian Restricted Boltzmann
Machines (GRBM) layer, a type of RBM which can process
real values of data, is the input layer to receive and transform
the input data into binary values. We denote k = {1, ..., K}
as the number of learning nodes in the collaborative learning
model, vk and hk to be the vectors of visible and hidden layers
of LN-k, respectively. In addition, M and N are the numbers
of visible and hidden neurons of GRBM, and M (cid:48) and N (cid:48)
are the numbers of visible and hidden neurons of RBM. As
deﬁned in [25] the energy functions of GRBM and RBM of
LN-k are deﬁned as follow:

5

neuron in the visible layer. From the energy functions, we
can ﬁnd the probability that is used in the visible layer of
DBN [25] as follows:

pk(vk) =

(cid:80)

(cid:80)

vk

hk e−E(vk,hk)
(cid:80)

hk e−E(vk,hk)

.

(3)

Then, we use the probability in Equation (3) to calculate
the gradients of each layer with the expectation value (cid:104).(cid:105) as
follows [25]:

∇gk

m,n =

∂ log pk(vk)
∂wm,n
mhk

(4)

mhk

= (cid:104)vk

n(cid:105)model.

n(cid:105)dataset − (cid:104)vk
After learning with multiple GRBM and RBM layers, we
deﬁne X g,r
as the output of the last hidden layer of LN-k.
k
In this paper, the output layer utilizes the softmax regression
function to classify the data samples based on the probability.
We denote W o and bo as the weight matrix and bias vector
between the output and the last hidden layer, respectively. We
then can deﬁne the probability of the output Z belonging to
Class-t as follows:

k(Z = t|X g,r
po

k , W o, bo) = sof tmax(W o, bo)

=

t X g,r

t

k +bo
nX g,r

eW o
n eW o

k +bo
n

(cid:80)

(5)

,

where t ∈ {1, ..., t, ..., T } is a class of the output and T refers
to the total classes (including different types of attacks and
normal behavior). The prediction Z of the probability po is

Zk = argmax

[pk(Z = t|X g,r

k , W o, bo)],

t

(6)

where Z is the output prediction from Z. Then, we can
calculate the gradient between the output layer and the last
hidden layer from Equation (5) as follows:

∂po

k =

∇go

k , W o, bo)

k(Z = t|X g,r
∂W o
After that, the results of Equation (4) and Equation (7) are
used to calculate the total gradient ∇gt
k of DBN with multiple
GRBM, RBM layers and the output layer of LN-k as follows:

(7)

.

Ek

GRBM (vk, hk) =

M
(cid:88)

(vk

m − b1,m)2
2(cid:15)2
m

−

m=1
N
(cid:88)

M
(cid:88)

m=1

n=1

wm,nhk
n

vk
m
(cid:15)m

−

N
(cid:88)

n=1

b2,nhk
n,

∇gt

k =

(cid:88)

vk,hk

(1)

∇gGRBM
k

+

(cid:88)

vk,hk

∇gRBM
k

+ ∇goutput
k

(cid:88)

M
(cid:88)

N
(cid:88)

=

∇gk

m,n +

(cid:88)

M (cid:48)
(cid:88)

N (cid:48)
(cid:88)

∇gk

m,n + ∇go
k.

Ek

RBM (vk, hk) = −

M (cid:48)
(cid:88)

b1,mvk

m−

M (cid:48)
(cid:88)

m=1
N (cid:48)
(cid:88)

wm,nvmhk

n −

m=1

n=1

(2)

N (cid:48)
(cid:88)

n=1

b2,nhk
n,

where wm,n is the weight between visible and hidden neurons,
b1,m and b2,n indicate the bias of visible and hidden neurons,
respectively, and (cid:15)m represents the standard deviation of the

vk,hk

m=1

n=1

vk,hk

m=1

n=1

the DBN ﬁrst

In the training process,

(8)
trains its neural
network with unlabeled data for pre-training. Then, DBN uses
its labeled data to ﬁne-tuning its neural network. At this stage,
the DBN of LN-k calculates its gradient ∇gt
k. After that, this
gradient is sent to the CS to create an updated global model for
all LNs as illustrated in Fig. 3. For example, at iteration i the
CS receives gradients from all K LNs, the CS ﬁrst performs
the average gradient function [26] as follows:

6

Algorithm 1 The classiﬁcation-based collaborative learning
algorithm

1: while i ≤ maximum number of iterations or the training

process is not converged do

for ∀k ∈ K do

DBN of LN-k learns X k and produces Zk.
Calculate gradient ∇gt
k.
Send ∇gt

k to CS.

end for
CS calculates average gradient ∇g∗ and global model
ϕi.
i = i + 1.
CS updates global model ϕi+1.
CS sends global model ϕi+1 to all LNs.
LNs update their DBNs.

2:

3:

4:

5:

6:

7:

8:

9:

10:

11:

12: end while
13: DBN of LNs predict and classify Zk from the training

dataset X k with the optimal global model ϕopt .

Fig. 4: Experiment setup.

Fig. 3: The illustration of the collaborative learning between
DL models and the CS.

∇g∗ =

1
K

K
(cid:88)

k=1

∇gt
k.

(9)

We then denote ϕi as the global model at iteration i which
includes the weight matrix for all layers of the LN’s deep
learning model, and µ represents the learning rate. From
Equation (9), the CS can calculate a new global model at
iteration i + 1 as follows:

ϕi+1 = ϕi + µ∇g∗.

(10)

Next, the CS sends the latest global model ϕi+1 to the LNs
to update their deep learning models. This process is repeated
until it reaches the convergence or gets the maximum number
of iterations. At this time, we can ﬁnd the optimal global
model ϕopt that includes the optimal weights of all layers.
We denotes W o
opt as the optimal weight matrix between the
output layer and the last hidden layer from ϕopt, the output
prediction Zk of LN-k thus can be calculated as follows:

Zk = argmax

[pk(Z = t|X g,r

k , W o

opt, bo)].

t

IV. EXPERIMENT SETUP, DATASET COLLECTION AND
EVALUATION METHOD

(11)

From Equation (11), the softmax regression of each LN
can classify its the blockchain network samples to be normal
behavior or a type of attacks. Algorithm 1 summarizes the
process of our proposed collaborative learning model. In
our proposed model,
the learning model of each network
can be trained by the dataset from its local network and
exchange learning knowledge with those from other nodes
in a blockchain network in an ofﬂine manner. In a practical
blockchain network with a large number of learning nodes, we
can schedule for nodes to exchange the learning knowledge
in the ofﬂine training phase at appropriate times to avoid
network congestion. In this way, each node can effectively
learn the knowledge from other nodes while avoiding the
trafﬁc congestion of the network. After the training process,
the trained models can be used to help nodes to detect attacks
in a real-time manner.

This section will explain more details about experiment
setup, data collection, and feature extraction over our designed
blockchain system.

A. Experiment Setup

In our experiments, we set up a small-scale Ethereum
blockchain network in our laboratory which includes three
Ethereum full nodes, an Ethereum bootnode and a netstats
server. All
these nodes are connected to a Cisco Switch
Catalyst 2950 as illustrated in Fig. 4. The details of these
nodes are as follows:

• Ethereum full nodes are launched by Geth v1.10.14 [27] -
open-source software for implementation of the Ethereum
protocol. These nodes share the same initial conﬁgu-
i.e., PoW consensus mecha-
ration of genesis block,
nism, 8,000,000 gas for block gas limit, initial difﬁculty

DL model 1Centralized Server (CS)Data-1Data-2Data-KDL model KDL model 2Send local gradientSend global model1,000,000. Each node is running on a personal computer
with processor Intel® Core™ i7-4800MQ @2.7 GHz,
RAM of 16 GB.

• Bootnode is also created by Geth v1.10.14 and connected

to all the three Ethereum nodes.

• Ethereum netstats is launched by an open-source software

named “eth-netstats” on Github [28].

The normal trafﬁc data is conﬁgured with the three trust-
ful servers, while an attack device will execute abnor-
mal/malicious activities to the blockchain network trafﬁc. Each
trustful server takes responsibility for generating data and
sending transactions to the corresponding Ethereum node in
its network as visualized in Fig. 4. In summary, in the normal
state, the following tasks are scheduled or randomly occur in
the network:

• The servers are scheduled to send transactions.
• The users call functions in the deployed smart contracts to
explore the ledger. Besides transaction-related functions,
the users also send requests to the Ethereum nodes
for tracking their balances or status of miners. Both
of these works are randomly made by HTTP requests
to the Ethereum node API (Application Programming
Interface).

• Ethereum nodes broadcast transactions and mined blocks
to synchronize their ledgers. The packets of bootnode are
also included in this ﬁeld.

• WebSockets and JSON-RPC are used when netstats get

information from Geth clients.

• HTTP requests and replies to view netstats interface and

results of cyberattack detection.

B. Dataset Collection and Feature Extraction

In this section, we consider network layer aspects of the
permissionless blockchain [29], [30] to detect cyberattacks
in blockchain network [31], [32]. In general, the goals of
an adversary are usually the monetary beneﬁt, e.g., chain
splitting, and wallet theft, or stability of the network, e.g.,
delay and information loss. In this work, we focus on the
attacks at the network layer. Attacks at the application layer,
e.g., 51%, transaction malleability attacks, timejacking, and
smart contract attacks, are out of scope of this work and can
be considered in the future work. Speciﬁcally, we perform
three typical types of network attacks that have been reported
in blockchain networks, i.e., the brute password for wallet
theft, denial of service for information loss, and ﬂooding of
transactions for consensus delay. These are the ubiquitous
attacks in the network trafﬁc layer that cause a number of
serious consequences for many years. More details are as
follows:

• Brute Password (BP) attack: is derived from traditional
cyberattack when hackers perform such attacks to steal
blockchain users’ accounts. In this way, the hackers can
access the users’ wallets and steal their digital assets of
the users. As mentioned in Section I, the BP attack on
KuCoin caused the loss of up to $281 million [6]. To
perform this attack, the attacker retries passwords of an

7

Ethereum public key until it ﬁnds out the correct login
information.

• Denial of Service (DoS) attack: is also another common
type of attack in blockchain networks as it can be easily
performed to attack blockchain nodes. For such kind of
attack, the attackers will launch a huge amount of trafﬁc
to a target blockchain node in a short period of time.
Consequently, the target node will not be able to work
as normal, i.e., mining transactions, and even be sus-
pended. In the real-world, Bitﬁnex [33] was temporarily
suspended due to such kind of attack. Thus, in our setup, a
simple DoS attack is simulated, i.e., an SYN ﬂood attack,
by repeatedly sending initial connection request (SYN)
packets to an Ethereum node.

• Flooding of Transactions (FoT) attack: targets delay the
PoW blockchain network by spamming the blockchain
network with null or meaningless transactions. When

TABLE I: Features of the designed dataset.

Features name

#
Basic features

1

2

3

4

5

6

duration

protocol type

service

src bytes

dst bytes

ﬂag

T

C

D

D

C

C

D

Description

length of the connection
(seconds)
type of the protocol
(i.e., tcp, udp, icmp)
network service
(e.g., http, ssh, etc)
number of data bytes
from source to destination
number of data bytes
from destination to source
normal or error status
of the connection

Statistical features
Features refer to source IP-based Statistical

7

8

count

srv count

C

C

number of connections to
the same source IP
as the current connection
number of connections to
the same service
as the current connection

Features refer to these same source IP connections
9
10

serror rate
same srv rate

C % of ‘SYN’ errors connections
C % of same service connections

11

diff srv rate

C

% of different services
connections

Features refer to these same service connections
12
13
Features refer to destination IP-based Statistical

srv serror rate
srv diff host rate

C % of ‘SYN’ errors connections
C % of different host connections

14

dst host count

15

dst host srv count

C

C

number of connections to
the same destination IP
as the current connection
number of connections to
the same service as
the current connection

Features refer to these same destination IP connections
16

dst host same srv rate

C % of same service connections

17

18

dst host diff srv rate

dst host same src port rate C

C

% of different services
connections
% of same both source port
and destination IP connections
C % of ‘SYN’ errors connections

dst host serror rate

19
Features refer to these same service connections
20
21

dst host srv diff host rate
dst host srv serror rate

C % of different host connections
C % of ‘SYN’ errors connections

8

(a) Learning Node 1

(b) Learning Node 2

(c) Learning Node 3

Combine

(d)
all learning nodes

data

from

Fig. 5: Visualization using t-SNE for collected datasets.

the number of transactions per second in the Ethereum
network suddenly hits the top, a mining node may face
two following issues, i.e., too much trafﬁc (similar as
that of DoS), and the queue of pending transactions is
full. It equates to the unnecessary time burden for mining
process and block propagation [34]. In 2017, the Bitcoin
mempool size was exceeded 115,000 unconﬁrmed trans-
actions which led to $700 million worth of transaction
stall [30]. In our work, FoT attack is implemented by
continuously sending a large number of transactions to
an existing smart contract.

of

an

the

core

utility

In order

open-source

to capture trafﬁc data of

these attacks, we
build a dataset collection tool, named BC-ID, which
inherits
named
“kdd99 feature extractor” [35] and our new designs to
ﬁt the considered Ethereum network, i.e., correct the service
of packets related to Ethereum nodes, remove meaningless
features, and automate label dataset samples based on some
given properties. To do this, we ﬁrst use the ‘libpcap-dev’
library of Linux to capture all the network data (including
normal and different types of attacks) from the local network.
Then, the BC-ID is used to extract features from the collected
data, ﬁlter the attack samples, and label them as normal or
a type of attack. In particular, the BC-ID starts by capturing
raw trafﬁc data based on ‘libpcap-dev’ package of Linux
OS. Since each blockchain network has a few speciﬁc ports
for peer connections, client connections, and so on, BC-ID
targets to ﬁlter and analyze trafﬁc data in these ports. For
example, the Ethereum blockchain network uses port 30303
for the TCP port listener, and port 8545 for JSON-RPC by
default. As KDD99 dataset [36], BC-ID extracts features and
then separates them into two categories, e.g, basic features
(i.e., all
the attributes can be extracted from a TCP/IP
connection) and trafﬁc features (i.e., statistics of packets with
the same destination host or service in a window interval).
Especially, our goal is to achieve a trained model that can be
applied to our proposed real-time blockchain attack detection
system, when the number of samples in a prediction frame is
limited. Thus, the BC-ID collects the dataset frames in which
each frame lasts for 2 seconds and extracts their features.
The BC-ID then puts all collected data in this frame into

TABLE II: The number of samples in the designed dataset.

Ethereum
node

Class
Normal
BP
DoS
FoT

Node-1
(samples)
30,000
3,000
3,000
3,000

Node-2
(samples)
30,000
3,000
3,000
3,000

Node-3
(samples)
30,000
3,000
3,000
3,000

a single ﬁle. Finally, we merge all single ﬁles together to
make the full dataset. In summary, Table I shows 21 features
in the designed dataset, which are separated into two types,
i.e., discrete (D) and continuous (C). For continuous features,
they are calculated in 2 seconds time window (similar to that
of the famous KDD99 dataset [36]).

In each Ethereum node, the separated dataset is collected
in four states (classes), i.e., normal state (Class-0), BF at-
tack (Class-1), DoS attack (Class-2), and FoT attack (Class-3).
The normal state is captured in two hours, the rest of them in
an hour through the designed BC-ID tool. As described above,
when a node is attacked, the normal trafﬁc still exists. There-
fore, the attack samples can be ﬁltered out by features-based
two properties, i.e., the src ip and dst ip of the attack device,
service, src length, and dst length of the samples, which are
analyzed by Wireshark [22]. To improve the diversity of the
designed dataset, the normal trafﬁc data in the attack state is
mixed with trafﬁc data in the normal state. In our experiments,
a number of random samples in each state are selected to
reduce the size of the bulk dataset as shown in Table II. In
fact, we mix normal trafﬁc data in an equal ratio, i.e., 7,500
samples per normal state, normal trafﬁc data at BF, DoS, FoT,
respectively.

Fig. 5 illustrates the visualization of our designed dataset us-
ing t-Distributed Stochastic Neighbor Embedding (t-SNE) [37]
with three most important components. In 3D view, the DoS
and FoT attack samples show a fairly clear separation
from normal state points. Otherwise, the BP attack samples
collide with the normal state samples. This indicates that
discriminating BP samples from the normal data points would
be signiﬁcantly challenging.

colornormalDoSFoTBPcolorBPnormalFoTDoScolornormalBPFoTDoScolornormalFoTBPDoSNormalBPDoSFoTTABLE III: Simulation results.

2 Learning Nodes (LNs)

3 Learning Nodes (LNs)

Proposed CoL

CeL

Accuracy
Precision
Recall

97.780
95.497
95.560

97.923
95.946
95.846

IL

LN-1
96.444
92.713
92.889

LN-2
96.175
93.145
92.350

Proposed CoL

CeL

97.609
95.317
95.219

97.507
94.894
95.014

LN-1
96.034
91.630
92.068

IL
LN-2
95.788
92.514
91.575

LN-3
95.225
90.583
90.450

9

C. Evaluation Method

The confusion matrix with accuracy, precision and recall
proposed in [38], [39] is widely used to evaluate the per-
formance of many machine learning systems. We denote TP,
FP, TN, FN to be “True Positive”, “False Positive”, “True
Negative”, and “False Negative”, respectively. The accuracy of
total system with T classes of normal behaviors and different
types of attacks as follows:

Accuracy =

1
T

T
(cid:88)

t=1

T Pt + T Nt
T Pt + T Nt + F Pt + F Nt

.

(12)

In the next section, we also use the accuracy, precision, re-
call to evaluate and compare the performance of our proposed
Collaborative Learning model (proposed CoL) with two other
baseline methods, i.e., Centralized Learning model (CeL) and
Independent Learning model (IL).

V. EXPERIMENTAL RESULTS AND PERFORMANCE
EVALUATION

In this section, we use the collected datasets of three nodes
described in aforementioned section for the corresponding
LNs. The dataset of each LN is randomly split into training
and testing dataset. All LNs use DBN with the same structure
of neural network for learning and detecting attacks. However,
the LNs have to work in different learning models in various
scenarios. Each LN has itself training and testing dataset, and
thus we can use these datasets to evaluate and compare the
performance of the proposed CoL, the CeL and the IL in
different scenarios.

A. Simulation Results

In this section, we present the simulation results with the
dataset of LNs in different learning models. The details of
datasets using for simulation are as follows:

• Proposed Collaborative Learning Model (proposed
CoL): Each LN learns its training dataset and performs
collaborative learning with other LNs to generate the
global model. Then, we use the global model to test the
merged testing dataset of all participated LNs.

• Centralized Learning Model (CeL): The centralized
node (e.g., one of the mining node in the network) is
assumed to be able to collect data from all the nodes
in the network and train the deep learning model on
the collected datasets. Then, we use the trained model
to test data based on the merged testing dataset of all
participated LNs.

Fig. 6: Training process of considered learning models.

• Independent Learning Model (IL): Each LN learns its
training dataset without sharing knowledge with other
LNs. Then, we use this model to test data based on the
merged testing dataset of all participated LNs.

1) Convergence Analysis: Fig. 6 describes the convergence
of the proposed CoL, the CeL and the IL (in terms of accuracy)
of three LNs in the training process. The proposed CoL is
obtained at the LN-1 after obtaining the global model. The
CeL has a large number of training samples from three LNs
so it can reach the convergence with around 97% accuracy
after 300 epochs. Besides,
the proposed CoL and the IL
converge nearly the same after 750 epochs. After 10,000
learning epochs, we can observe that the proposed CoL has
a higher accuracy compared with that of the IL (i.e., 98% vs
96%). The reason is that the proposed CoL can obtain the
exchange knowledge from DL models of other LNs. Thereby,
it can achieve similar performance as that of the CeL.

i.e.,

2) Performance Analysis: Table III presents the simulation
results in two cases,
two participated LNs and three
participated LNs. In both cases, we can observe the same trend
when the accuracy, precision and recall of the proposed CoL
are higher than those of the IL and nearly equal to those of the
CeL. In particular, the accuracy of the proposed CoL is higher
than that obtained by LN-1 in IL (approximately 1.5%) and
the precision of the proposed CoL is nearly 4% higher than
that obtained by LN-1 in IL in the case of three participated
LNs. These results demonstrate that the proposed CoL can
exchange knowledge with other LNs to improve its ability of
detection, so it can achieve better performance in classifying
attacks in the blockchain network than those of the IL. It also
demonstrates that the learning model of IL should not be used
to classify the data of other LNs. In addition, without sharing
LN’s dataset to a center node for training (e.g., a cloud server),
the proposed CoL can achieve nearly the same accuracy as

010002000300040005000600070008000900010000Epochs0.880.90.920.940.960.98AccuracyProposedCoLCeLILTABLE IV: Real experimental results.

10

2 Learning Nodes (LNs)
CeL

Proposed CoL
LN-2
LN-1
97.342
97.520
95.830
95.796
94.685
95.040

LN-1
97.164
95.765
94.328

LN-2
97.186
95.926
94.373

3 Learning Nodes (LNs)

Proposed CoL
LN-2
97.383
96.081
94.765

LN-1
97.582
96.253
95.164

LN-3
96.693
94.718
93.387

LN-1
96.709
93.985
93.418

CeL
LN-2
96.976
94.662
93.951

LN-3
96.429
93.172
92.859

Accuracy
Precision
Recall

samples in a period of time. Table V presents the number of
samples of each class collecting in 15 minutes. In this table, we
can observe that Class-1 has a very small number of samples
during this period, this can lead to a low accuracy in statistics
for this class and reduce the total accuracy of the model.
However, our proposed CoL still has better performance than
those of the CeL and LN-1 in the three LNs case (i.e., up to
0.8% of accuracy, 2.3% precision and 1.7% recall). Overall,
our proposed CoL always achieves the best performance with
approximately 97.5% accuracy, 95.7% precision and 95%
recall with two LNs and 97.5% accuracy, 96.2% precision and
95.1% recall with three LNs. These results demonstrate that
our proposed CoL can detect attacks with higher accuracies
for all participated LNs than those of CeL.

3) Real-time Monitoring and Detection: Fig. 8 illustrates
the real-time monitoring of our proposed CoL for normal state
and three types of attacks in the network. Fig. 8(a) is the
normal state (Class-0) of the network with a high number of
normal samples and a low number of attack samples. Then,
the BP attack is performed, and Fig. 8(b) shows a slightly
increase in the number of BP attacks. This is because, the
number of BP attack samples is much smaller than other states
in a period of time as in Table V. In this case, the detection
mechanism is activated and alarms the network under the BP
attack (Class-1). Similarly, the DDoS attack in the network is
described in Fig. 8(c) with a high increase in the number of
samples of DoS attack. Finally, Fig. 8(d) describes the FoT
attack. Unlike other attacks, the FoT attack includes a large
number samples, thus it increases both the number of normal
and attack samples (above 300 trafﬁc samples per 2 seconds)
than other attacks (under 50 trafﬁc samples per 2 seconds).
Thereby, in all the cases, we can observe that our proposed
intrusion detection system can detect attacks effectively in a
real-time manner.

4) Real-time Processing Capacity: In this experiment, we
ﬁx the number of input samples in our proposed model to ﬁnd
the maximum real-time processing capacity in capturing and
detecting attacks. Fig. 9 illustrates the real-time processing
capacity of our proposed model. The processing time τ is
counted from the time our proposed model reads the ﬁle
containing the samples, until completing classiﬁcation and
producing the output. This work is repeated 20,000 times to
determine the stability of the detection time of our proposed
model. We vary the number of input samples multiple times
to ﬁnd the appropriate number that is adapted to the condition
in Fig. 7. In most of the cases (98%), our proposed framework
can classify 85,000 samples with less than 2 seconds. These
results demonstrate that our proposed detection framework can

Fig. 7: Timeline of veriﬁcation phase.

those of the CeL in all the scenarios.

B. Experimental Results

In this section, we present the experimental results obtained
through real-time experiments at our laboratory. In this ex-
periment, each blockchain node is installed a learning model
to become an LN. Each LN learns its local dataset and then
performs real-time attack detection in the blockchain network.
We consider the scenario of two LNs and three LNs with
the proposed CoL and the CeL. In the training process, the
proposed CoL and the CeL are fed with the similar datasets
as explained in the previous section. We then implement the
trained model to all the participated LNs to perform real-time
attack detection for both learning models in the testing process.
1) Real-time capturing and processing: In a real-time sys-
tem, the cyberattack detection system continuously receives a
number of the Ethereum network trafﬁc data. Therefore, the
system has to perform capturing, collecting frames, extracting
features, analyzing and predicting within a period of time,
i.e, 2 seconds. Fig. 7 shows the timeline of the cyberattack
detection program. The data frame is exploited by our feature
extractor function (Fe Ex) of BC-ID tool, and this is input for
the trained model to predict (Pred) and classify packets to be
normal or attack. All processes have to complete in 2 seconds
before the next data frame of IP packets coming. To verify
the predicted results from the trained model, all frames and
prediction results are stored. These frames are merged into a
full validation dataset and labeled by own designed BC-ID.
After that, these ground truth labels are compared with the
prediction results to obtain a validation report.

2) Performance Analysis: Table IV presents the experimen-
tal results of the proposed CoL and the CeL with different
participated LNs. We obtain the same trends as those of the
simulation results. The results obtained by two and three
learning models of both proposed CoL and CeL are slightly
lower than those of the simulations at about 0.2%. This is
because each type of attack has different distributions of attack

Fe_ExPredFe_ExPredFrame capturePre-processing& Predictiontime (s)024Data FrameData FrameData FramePackets11

(a) Normal State

(b) BP attack State

(c) DoS attack State

(d) FoT attack State

Fig. 8: Real-time blockchain cyberattack detection: proposed CoL model of 3 LNs in Ethereum node 1.

TABLE V: The number of samples on Ethereum node 1 in
an hour.

Number of samples
Percentage (%)

Class-0 Class-1 Class-2 Class-3
128,509
242,298
33.598
63.347

10,858
2.839

828
0.216

Fig. 9: Histogram of
85,000 samples.

real-time detection duration for

be very potential to deploy to detect attacks in real-world
blockchain networks.

VI. CONCLUSION

In this work, we have proposed a novel collaborative
learning framework for a cyberattack detection system in a
blockchain network. First, we have implemented a private
blockchain network in our laboratory. This blockchain network
is used to (1) generate data (both normal and attack data)
to serve the proposed learning models and (2) validate the
performance of our proposed learning framework in real-time
experiments. After that, we have proposed a highly-effective
learning model that allows to be effectively deployed in the
blockchain network. This learning model allows nodes in the
blockchain can be actively involved in the detection process

by collecting data, learning knowledge from their data, and
then exchanging knowledge together to improve the attack
detection ability. In this way, we can not only avoid problems
of conventional centralized learning (e.g., congestion and
single point of failure) but also protect the blockchain network
right at the edge. Both simulation and real-time experimental
results then have clearly shown the efﬁciency of our proposed
framework. In future, we plan to continue developing this
dataset with other emerging types of attacks and develop more
effective methods to protect blockchain networks.

VII. ACKNOWLEDGEMENT

This work is the output of the ASEAN IVO http://www.nict.
go.jp/en/asean ivo/index.html project “Cyber-Attack Detec-
tion and Information Security for Industry 4.0” and ﬁnancially
supported by NICT http://www.nict.go.jp/en/index.html.

This work was supported in part by the Joint Technology
and Innovation Research Centre – a partnership between
the University of Technology Sydney and the University of
Engineering and Technology, Vietnam National University,
Hanoi.

REFERENCES

[1] S. Nakamoto, “Bitcoin: A Peer-to-Peer Electronic Cash System,” 2008.

[Online]. Available: https://bitcoin.org/bitcoin.pdf

[2] M. S. Ali, M. Vecchio, M. Pincheira, K. Dolui, F. Antonelli, and M. H.
Rehmani, “Applications of blockchains in the Internet of Things: A
comprehensive survey,” IEEE Communications Surveys & Tutorials,
vol. 21, no. 2, pp. 1676–1717, Dec. 2018.

[3] J. Xie, H. Tang, T. Huang, F. R. Yu, R. Xie, J. Liu, and Y. Liu, “A survey
of blockchain technology applied to smart cities: Research issues and
challenges,” IEEE Communications Surveys & Tutorials, vol. 21, no. 3,
pp. 2794–2830, Feb. 2019.

[4] S. Biswas, K. Sharif, F. Li, Z. Latif, S. S. Kanhere, and S. P. Mohanty,
“Interoperability and synchronization management of blockchain-based
decentralized e-health systems,” IEEE Transactions on Engineering
Management, vol. 67, no. 4, pp. 1363–1376, June 2020.

[5] Y. Yuan and F.-Y. Wang, “Blockchain and cryptocurrencies: Model,
techniques, and applications,” IEEE Transactions on Systems, Man, and
Cybernetics: Systems, vol. 48, no. 9, pp. 1421–1428, July 2018.

[6] “The

[7] “North

10

Crypto

Biggest

Exchange Hacks

In History,”
Accessed: Feb. 14, 2022. [Online]. Available: https://crystalblockchain.
com/articles/the-10-biggest-crypto-exchange-hacks-in-history
as

Their
Have
Unlaundered Cryptocurrency Holdings Reach All-time High,”
Accessed:
https:
//blog.chainalysis.com/reports/north-korean-hackers-have-proliﬁc-year-
as-their-total-unlaundered-cryptocurrency-holdings-reach-all-time-high

Available:

[Online].

Hackers

Proliﬁc

Korean

2022.

Year

Feb.

14,

19:25:0019:25:1019:25:2019:25:3019:25:4019:25:5019:26:00Time010203040506070Traﬃcdata(samples)08:30:0008:30:1008:30:2008:30:3008:30:4008:30:50Time0102030405060Traﬃcdata(samples)09:00:1009:00:2009:00:3009:00:4009:00:50Time051015202530354045Traﬃcdata(samples)00:00:1500:00:3000:00:4500:01:00Time0100200300400500600700800Traﬃcdata(samples)NormalBPDoSFoT12

[30] M. Saad, J. Spaulding, L. Njilla, C. Kamhoua, S. Shetty, D. Nyang,
and D. Mohaisen, “Exploring the attack surface of blockchain: A
comprehensive survey,” IEEE Communications Surveys & Tutorials,
vol. 22, no. 3, pp. 1977–2008, Mar. 2020.

[31] B. Hu, C. Zhou, Y.-C. Tian, Y. Qin, and X. Junping, “A collaborative
intrusion detection approach using blockchain for multimicrogrid sys-
tems,” IEEE Transactions on Systems, Man, and Cybernetics: Systems,
vol. 49, no. 8, pp. 1720–1730, Apr. 2019.

[32] P. Ramanan, D. Li, and N. Gebraeel, “Blockchain-based decentralized
replay attack detection for large-scale power systems,” IEEE Transac-
tions on Systems, Man, and Cybernetics: Systems, Aug. 2021.

[33] “Bitﬁnex restored after DDoS attack,” Accessed: Feb. 14, 2022. [Online].
Available: https://www.computerweekly.com/news/450431741/Bitﬁnex-
restored-after-DDoS-attack

[34] J. Ot´avio Chervinski, D. Kreutz, and J. Yu, “Analysis of transaction
ﬂooding attacks against Monero,” in 2021 IEEE International Confer-
ence on Blockchain and Cryptocurrency (ICBC), Sydney, Australia, May
2021, pp. 1–8.

[35] “kdd99 feature extractor,” AI-IDS, Accessed: Feb. 14, 2022. [Online].

Available: https://github.com/AI-IDS/kdd99 feature extractor

[36] “KDD Cup 1999 Data,” The Fifth International Conference on Knowl-
edge Discovery and Data Mining, Accessed: Feb. 14, 2022. [Online].
Available: http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html
[37] L. van der Maaten and G. Hinton, “Visualizing data using t-SNE,”
Journal of Machine Learning Research, vol. 9, no. 86, pp. 2579–2605,
Nov. 2008.

[38] T. Fawcett, “An introduction to ROC analysis,” Pattern Recognition

Letters, vol. 27, no. 8, pp. 861–874, June 2006.

[39] D. M. Powers, “Evaluation: from precision, recall and F-measure to
ROC, informedness, markedness and correlation,” Journal of Machine
Learning Technologies, vol. 2, no. 1, pp. 37–63, Feb. 2011.

[8] C. T. Nguyen, D. T. Hoang, D. N. Nguyen, D. Niyato, H. T. Nguyen,
and E. Dutkiewicz, “Proof-of-stake consensus mechanisms for future
blockchain networks: fundamentals, applications and opportunities,”
IEEE Access, vol. 7, pp. 85 727–85 745, Jun. 2019.

[9] K. Salah, N. Nizamuddin, R. Jayaraman, and M. Omar, “Blockchain-
based soybean traceability in agricultural supply chain,” IEEE Access,
vol. 7, pp. 73 295–73 305, May 2019.

[10] N. Chaabouni, M. Mosbah, A. Zemmari, C. Sauvignac, and P. Faruki,
“Network intrusion detection for IoT security based on learning tech-
niques,” IEEE Communications Surveys & Tutorials, vol. 21, no. 3, pp.
2671–2701, Jan. 2019.

[11] N. Sultana, N. Chilamkurti, W. Peng, and R. Alhadad, “Survey on
SDN based network intrusion detection system using machine learning
approaches,” Peer-to-Peer Networking and Applications, vol. 12, no. 2,
pp. 493–501, Mar. 2019.

[12] M. Idhammad, K. Afdel, and M. Belouch, “Distributed intrusion detec-
tion system for cloud environments based on data mining techniques,”
Procedia Computer Science, vol. 127, pp. 35–41, Jan. 2018.

[13] K.-D. Lu, G.-Q. Zeng, X. Luo, J. Weng, W. Luo, and Y. Wu, “Evo-
lutionary deep belief network for cyber-attack detection in industrial
automation and control system,” IEEE Transactions on Industrial Infor-
matics, vol. 17, no. 11, pp. 7618–7627, Nov. 2021.

[14] L. Vu, V. L. Cao, Q. U. Nguyen, D. N. Nguyen, D. T. Hoang,
and E. Dutkiewicz, “Learning latent representation for iot anomaly
detection,” IEEE Transactions on Cybernetics, pp. 1–14, Sep. 2020.
[15] C. Tan, F. Sun, T. Kong, W. Zhang, C. Yang, and C. Liu, “A survey
on deep transfer learning,” in Int. Conf. on Artiﬁcial Neural Networks.
Rhodes, Greece: Springer, Oct. 2018, pp. 270–279.

[16] M. U. Hassan, M. H. Rehmani, and J. Chen, “Anomaly detection
in blockchain networks: A comprehensive survey,” arXiv preprint
arXiv:2112.06089, Dec. 2021. [Online]. Available: https://arxiv.org/abs/
2112.06089

[17] P. Kumar, R. Kumar, G. Gupta, and R. Tripathi, “A distributed frame-
work for detecting DDoS attacks in smart contract-based Blockchain-
IoT systems by leveraging fog computing,” Transactions on Emerging
Telecommunications Technologies, vol. 32, no. 6, pp. 1–31, June 2021.
[18] O. Alkadi, N. Moustafa, B. Turnbull, and K.-K. R. Choo, “A deep
blockchain framework-enabled collaborative intrusion detection for pro-
tecting IoT and cloud networks,” IEEE Internet of Things Journal, vol. 8,
no. 12, pp. 9463–9472, June 2020.

[19] J. Kim, M. Nakashima, W. Fan, S. Wuthier, X. Zhou, I. Kim, and S.-
Y. Chang, “Anomaly detection based on trafﬁc monitoring for secure
blockchain networking,” in 2021 IEEE International Conference on
Blockchain and Cryptocurrency (ICBC), Sydney, Australia, May 2021,
pp. 1–9.

[20] Z. Liu and X. Yin, “LSTM-CGAN: towards generating low-rate DDoS
adversarial samples for blockchain-based wireless network detection
models,” IEEE Access, vol. 9, pp. 22 616–22 625, Feb. 2021.

[21] W. Cao, Y. Huang, D. Li, F. Yang, X. Jiang, and J. Yang, “A
blockchain based link-ﬂooding attack detection scheme,” in 2021 IEEE
4th Advanced Information Management, Communicates, Electronic and
Automation Control Conference (IMCEC), vol. 4, Chongqing, China,
June 2021, pp. 1665–1669.

[22] “Wireshark Network Analysis,” Accessed: Feb. 14, 2022. [Online].

Available: https://www.wireshark.org

[23] I. Goodfellow, Y. Bengio, and A. Courville, Deep Learning. Cambridge,

MA, USA: MIT Press, 2016.

[24] G. E. Hinton, S. Osindero, and Y.-W. Teh, “A fast learning algorithm for
deep belief nets,” Neural Computation, vol. 18, no. 7, pp. 1527–1554,
July 2006.

[25] G. E. Hinton, “A practical guide to training restricted boltzmann ma-
chines,” in Neural Networks: Tricks of the Trade, 2nd ed., G. Montavon,
G. B. Orr, and K.-R. M¨uller, Eds. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2012, pp. 599–619.

[26] J. Koneˇcn`y, H. B. McMahan, F. X. Yu, P. Richt´arik, A. T.
Suresh, and D. Bacon, “Federated learning: Strategies for improving
communication efﬁciency,” arXiv preprint arXiv:1610.05492, Oct.
2017. [Online]. Available: https://arxiv.org/abs/1610.05492

[27] Ethereum, “Ofﬁcial Go implementation of the Ethereum protocol,”
[Online]. Available: https://github.com/

Accessed: Feb. 14, 2022.
ethereum/go-ethereum

[28] M. Oance, “Ethereum Network Stats,” Accessed: Feb. 14, 2022.

[Online]. Available: https://github.com/cubedro/eth-netstats

[29] T. Neudecker and H. Hartenstein, “Network layer aspects of permission-
less blockchains,” IEEE Communications Surveys & Tutorials, vol. 21,
no. 1, pp. 838–857, Sep. 2019.

