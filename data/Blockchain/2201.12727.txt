IEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

1

Blockchain based AI-enabled Industry 4.0 CPS
Protection against Advanced Persistent Threat

Ziaur Rahman, Xun Yi, and Ibrahim Khalil

2
2
0
2

n
a
J

0
3

]

R
C
.
s
c
[

1
v
7
2
7
2
1
.
1
0
2
2
:
v
i
X
r
a

Abstract—Industry 4.0 is all about doing things in a concur-
rent, secure, and ﬁne-grained manner. IoT edge-sensors and their
associated data play a predominant role in today’s industry
ecosystem. Breaching data or forging source devices after in-
jecting advanced persistent threats (APT) damages the industry
owners’ money and loss of operators’ lives. The existing chal-
lenges include APT injection attacks targeting vulnerable edge
devices, insecure data transportation, trust inconsistencies among
stakeholders, incompliant data storing mechanisms, etc. Edge-
servers often suffer because of their lightweight computation
capacity to stamp out unauthorized data or instructions, which
in essence, makes them exposed to attackers. When attackers
target edge servers while transporting data using traditional
PKI-rendered trusts, consortium blockchain (CBC) offers proven
techniques to transfer and maintain those sensitive data securely.
With the recent improvement of edge machine learning, edge
devices can ﬁlter malicious data at their end which largely
motivates us to institute a Blockchain and AI aligned APT
detection system. The unique contributions of the paper include
efﬁcient APT detection at the edge and transparent recording of
the detection history in an immutable blockchain ledger. In line
with that, the certiﬁcateless data transfer mechanism boost trust
among collaborators and ensure an economical and sustainable
mechanism after eliminating existing certiﬁcate authority. Finally,
the edge-compliant storage technique facilitates efﬁcient predic-
tive maintenance. The respective experimental outcomes reveal
that the proposed technique outperforms the other competing
systems and models.

Index Terms—Blockchain, Industry 4.0, Internet of Things,
Edge IoT, Advanced Persistent Threat (APT), Deep Transfer
Learning (DTL).

I. INTRODUCTION

S INCE the last decade, the world has experienced the latest

iteration of the industrial ecosystem called Industry 4.0.
This fourth revolution demands the adoption of connected de-
vices and techniques to meet the increasingly growing system
protection requirements. The ultimate goals of building such
automated connections range from enhancing productivity,
reducing costs to boosting revenue. After merging advanced
technology such as the Internet of Things (IoT), Artiﬁcial
Intelligence (AI), etc., the latest industrial infrastructure has
laid the foundation for the desired smart factory system,
where the convergence happens between machines and humans
depending on data. Data generated by edge sensors play a
vital role in monitoring the manufacturing process, predicting

Manuscript received September 15, 2021; revised December 16, 2021;
accepted January 19, 2022. Date of publication February , 2022; date of
current version January, 2022. The work was supported by RMIT Research
Stipend Scholarship (RRSS) Program. The work of Xun Yi was supported
in part by the Project “Privacy-Preserving Online User Matching” under the
grant ARC DP180103251. Corresponding author: Ziaur Rahman.

Ziaur Rahman, Xun Yi, and Ibrahim Khalil are with the School of Sci-
ence, RMIT University, Melbourne, Australia. e-mail: (rahman.ziaur, xun.yi,
ibrahim.khalil)@rmit.edu.au

Digital Object Identiﬁer: 10.1109/JIOT.2022.XXXXX

maintenance, and detecting equipment anomalies. As a critical
component, if data fails to comply with the security standard,
all the actions associated with data will undoubtedly affect or
paralyze the entire industrial ecosystem. The recent security
issues published by the Guardian and ABC support the US
and Australian claims and concern of stealing their industry
copy-right data through cyber espionage by other countries.
Even during the worldwide COVID 19 pandemic, Webber
has recorded about 50 cyberattacks only in Australia since
two years.The
January 2020, which was 120 in the last
report shows that most attacks targeted large industries such
as Bunnings, Alinta Energy, and Toyota, including sensitive
health information. The country indulges a 15 billion dollar
package in tackling potential threats and unprecedented loss.
US Defense (DoD) also funded 8.5 billion in Cybersecurity,
with an almost 5 percent increase over the previous year.
On top of the incidents above, security concern has become
an inevitable issue that deserves proper addressing inside all
processes of the Industry 4.0 system. However, the existing
industrial security solutions are mostly designed, relying on
the security mechanism in the server-side, trust provided by the
trusted third party (TTP) such as cloud and certiﬁcate service
provider.

Fig. 1: Cyberattacks to inject Advanced Persistent Threat
(APT) to the Industry 4.0 CPS via a) IoT Edge b) Cyberspace

A. APT Attack Model and Challenges

Among several other intrusions and malwares injected to
IoT edge nodes, the latest ransomware, namely Advanced
Persistent Threat (APT) has caught broader attention because
of its detective nature. As a stealthy threat actor, an APT
strives to control a system network after remaining undetected
over a long period. Though attackers target the server-side,
currently, several incidents were recorded where the edge-side
vulnerability was responsible. Therefore, today’s Industry 4.0
network has to tackle that it has no APT inside the edge
servers. As shown by Figure 1, APT may enter into the
Industry 4.0 Cyber-physical System (CPS) both via edge and

Cyber SpaceIIoT SensorsAPT attack on edge & server nodesa:b: 
 
 
 
 
 
IEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

2

server nodes. There are several techniques that focus solely
server-side protection [1] [2]. Similarly some works focus edge
protection using collaborative machine learning technique.
Undeniably, the system can not be sustainable if there any
security loophole at the edge-end [2]. Existing approaches
seem to be utilizing complex machine learning algorithms that
requires signiﬁcant computational capabilities which are often
NOT edge complaint. Several works have used server-driven
data to evaluate their proposed techniques which may not work
at certain circumstances [3].

Advanced Persistent Threat (APT) is well funded, organized
group that is systematically developed to compromise large-
scale information of government and commercial entities. Mal-
ware is any malicious software or program designed to damage
or disable computer systems or networks. APT is a broad term
used to describe a prolonged, more strategic, and targeted
attack. However, most malware attacks are target-speciﬁc,
quick-damaging attacks. Besides, APT can stay undetected for
an extended period; on the contrary, anti-malware tools can
detect and eradicate malware from the system.

B. Contributions

With a motivation to protect both edge IoT and server-side
data transfer the key contributions of the paper are as follows.
• A blockchain based AI-enabled APT detection system
is proposed that protect Industrial IoT data from being
forged.

• Reusable machine learning method has been incorporated
at the IoT edge that secure data before sending it to the
cyberspace.

• Consrtium blockchain (CBC) brings trust among the
participating stakeholders that prevent system from cen-
tralized dependency and facilitates sustainable system.
• Certiﬁcateless device registration and data transfer teach-
nique has been proposed that save costs after eliminating
certiﬁcate authority and brings collaborative operation
• Immutable recording of both APT detection and data
transaction in the blockchain ledger and storing in the
edge-complaint distributed hash table (DHT) ensures
higher performance and efﬁciency. Because of the DHT
integration, the respective experimental outcomes reveal
that the proposed technique outperforms the other system
with competing machine learning models.

Fig. 2: Consortium Blockchain suitability for Industrial IoT

Blockchain where data as transactions are maintained after
being conﬁrmed through an incentivized system in which
members must compete to complete some proof-of-work like
cryptographic challenge. One block is linked with its nearest
block by using the hash of that block; therefore, any modiﬁca-
tion in the block breaks all the previous chain and consensus.
The latest block establishes the integrity of the last block.

A. Blockchain suitability for Industry 4.0 CPS

Public blockchain best suits where an utterly untrusted net-
work requires to be safe; however, it is slow and expensive. For
example, for setting up a powerful mining node, in reality, is
costly, on top of that, it requires enormous energy consumption
to process the mining works. Besides, public blockchain can
verify only a few transactions per second, which makes it
incompatible for the use cases such as industry where plenty
of data-transactions need to be done in real-time. On the other
hand, consortium or permissioned type of blockchain such as
Hyperledger (HLF), Quorum, Corda have a selective setup
where only invited members instead of arbitrary participants
are allowed to join the network who agreeably trust each
other. Here token for incentives/rewards is not mandatory;
thus, expenses for mining setup can be avoided to make it
adaptable for the real-time and critical system like Industry 4.0
application. As participating nodes are acquainted beforehand,
it brings natural protection against ’Sybil Attacks’. Figure 2
shows that permissioned blockchain (BC) is cheaper, faster
and also has higher tranaction processing rate. For example,
Proof of Work (PoW)-driven BC, i.e. Ethreum has the rate of 4
to 5 transaction per seconf (Tx/s) where permissioned BC, i.e.
HLF Fabric can process about 3,000 to 20,000 Tx/s which in
essence make it a inevitable choice for the proposed industry
4.0 edge communication [4].

C. Organisation

The remainder of this article is organized as follows. Section
II include the background and related state of the art literature.
Section III explains the proposed model where the necessary
evaluation is detailed through subsequent section IV. The ﬁnal
section conclude the future scopes and justify how authors
achieves the claims made throughout the work.

II. BACKGROUND AND RELATED WORK

Blockchain is a growing, publicly distributed, and perma-
nent ledger to which transaction events are posted and veriﬁed
by the peers on the network. The entire process happens
that makes it so
without
appealing, indeed. Bitcoin is the most common example of

the intervein of any third-party,

B. Deep Transfer Learning

Deep Transfer learning (DTL) converges storing knowledge
gained while solving one problem and applying it to another,
i.e., the knowledge to detect malware top up the knowledge
of the model that detects intrusion. Figure 3 depicts how a
model transfers/reuses its knowledge to predict a decision
in cooperation with another model performing different task.
Deep transfer learning (DTL) is given in terms of domains
and tasks. Suppose, a domain D consists of: a feature space
X and a marginal probability distribution P (X), with X =
{x1, ..., xn} ∈ X . Let a domain, D = {X, P (X)}, is an
example of task with two elements. A label space Y and
and objective predictive function f : X → Y. f predicts the
respective label f (x) of an instance x. This task, denoted by

Public BlockchainEnergy intesive, Rewards CostlyConsortium BlockchainNo Rewards & miner cost, CheaperSlow Tx check for new blocksFaster Tx veriﬁcation & additionLess throughput: i.e., 4-15 Tx/sHigher throughput:  3k-20k Tx/sIEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

3

a) Key generation: Purposing to sign a ps for a number
of sensor devices, Bob, Elen and Peter agrees to pick prime
numbers p, q and group generator g (e.g. primitive root) as
if q | p. Private and public key pair are the ring elements
of Zp. Let their private keys are x1, x2 and x3, therefore
calculated public keys will be yi = gx
i where (i = 0, 1, ..., n)
and aggregated public key Y = (cid:81)n
i=1 yi mod p. The key pairs
will be {p, q, g, Y }, {x1, x2, x3}.

i before ﬁnding the R = (cid:81)n

b) Signing data and partial secret: All cosigners choose
random number ri such that 0 < r < Zq and compute
R1 = gr
i Ri mod p. Suppose
T is the time-stamp including the dynamic edge identity
(Eid) formed using all individual sensor ids (IDj) and other
required parameters, then the KGD on Blockchain will ﬁnd
the signature parameter c = H(T (cid:107) Y (cid:107) R (cid:107) P S) here
H : M → G0 treated as random oracle in the security analysis
and P S are the KGD generated Partial Secrets (PS) for m
number of industrial IoT devices at a particular time t that
need to be multi-signed [4]. Then the partial signature will be
si = (ri + cxi) mod q and the desired multi-signature will be
(R, S) where S = (cid:80)n
i=i si mod p as demonstarted by Figure
4.

c) Verifying device and data: The device receives the
multi-signature (R, S) along with the encrypted ps. As public
key parameters such as {g, Y } besides T are already known to
the edge sensors, it produces c = H(T (cid:107) Y (cid:107) R (cid:107) P S) using
the same hash algorithm H. The device will accepts ps before
generating its own public-private key pairs Pj, Sj if and only
if it satisﬁes gS mod p = R × Y c mod p.

Fig. 4: Certiﬁcateless communication between blockchain con-
sortium (KGD) and Industry 4.0 IoT Edge devices

E. Related Work

Blockchain immutable nature besides its pseudo-anonymity,
traceability over the transparent distributed network have
made Blockchain an unbeatable tool for Industry 4.0 CPS.
Blockchain application found in the domain of copyright
protection of digital data/asset, ID veriﬁcation/provenance (no-
tarization), real state land ownership transfer, smart-taxation
immigration, electronic voting, privacy-principle compliance
(e.g., GDPR [7]). Authors seemed to be practicing the im-
mense beneﬁts of distributed hash table (DHT) for storing
access control and compliance data [8]. However, besides
the high-energy conducive miners’ incentive disputes,
the
Blockchain network encounters the scalability issues that some
existing-works concentrated on and aimed at solving through

Fig. 3: Knowledge transfer and prediction technique on dif-
ferent datasets in deep transfer learning (DTL) approach

T = {Y, f (x)}, can be obtained from the training dataset
consisting of pairs {xi, yi}, where xi ∈ X and yi ∈ Y [5] [6].
Assuming an input domain DS and a training task TS, an
output domain DT as if DS (cid:54)= DT OR TS (cid:54)= TT . DTL
improves learning of the target predictive function fT (·) in
DT using the knowledge in DS and TS. Besides, how to store
edge sensor data deserves illustrations.

C. DHT for Edge Data Storage

Storing data in the DHT and its associated pointer-address
into blockchain ledger (BCL) best suits for the IoT edge,
i.e., smart energy, implantable medical system, car, or any
other industry 4.0 CPS, etc because of its salient features.
In our proposed setup, when any external user asks for data
access, thekey generating and distribution (KGD) authenti-
cates in cooperation with the required number nodes running
the consortium blockchain network. It conﬁrms the unique
beneﬁts such as traceability, accountability, removing trusted
party, decentralized mechanisms, etc. over existing the cloud-
driven centralized storage model. The efﬁcient DHT adap-
tion additionally makes the proposed technique robust, self-
organizing, highly scalable, and fault-tolerant against different
attacks, i.e, false query injection attacks, APT, Zeroday, etc.
The proposed Industry 4.0 CPS data protection suits most
of the DHT protocol, however, the demonstration integrates
InterPlanetary File System (IPFS)considering the ﬁxed-sized
routing, malware and APT attacks. Before storing data, both
transaction and devices need to be authenticated.

D. Certiﬁcateless Authentication

Suppose there are three n = 3 parties namely Bob, Elen and
Peter in an industry 4.0 setup who agreed to cosign their partial
secret ps before registering a new device into the system. They
are connected over a CBC and work as KGD authority. KGD
dissipates their public parameter with the connected Industry
4.0 IoT devices.

The partial key is a concept in ordinary certiﬁcate-less au-
thenticated encryption (CLAE) and identity-based encryption
(IBE) that ﬁxes the key-escrow problem. In the Hypeledger
consortium blockchain setup, a built-in Membership Service
Provider (MSP) works as a certiﬁcate authority (CA). The
proposed technique replaces it with a PKI-like key generation
centre (KGC), by adopting a Blockchain (BC) consortium
collaborating with the Industry 4.0 CPS peers.

IoT Data 1Model AHeadPredict XIoT Data 2Model BNew HeadPredict YTASK ITASK IIKnowledgeTransferSensorsEdge cosignershold  keysverify TxConsortiumBCSDK  consensus SC 1: broadcasts cosigners' keys2: request partial key3: return multiSig (ps)4: submit data to BC Ps: partial  secretsIEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

4

plausible remedies [9] [10] [11]. Considering the appealing
features of Blockchain, researchers has incorporated AI (i.e.
Deep learning, DTL, federated learning, etc.) with it. In an
another work authors propose a cloud-based distributed deep
learning framework for phishing and Botnet attack detection
and mitigation [12]. A group of authors proposed a per-
missioned edge blockchain to secure the peer-to-peer (P2P)
energy and knowledge sharing in framework to maximize
edge intelligence efﬁciency [13]. Where [1] proposes a deep
blockchain framework (DBF) designed to offer security-based
distributed intrusion detection and privacy-based blockchain
with smart contracts in IoT networks.

One of the latest and motivating works proposed a con-
sortium Blockchain based framework to protect Industry 4.0
CPS [4]. There are a number of works studied addressed
a novel blockchain-enabled model sharing approach to im-
prove the performance of object detection with cross-domain
adaptation for automatic driving systems [14]. Authors ad-
dressed a special technique namely Authentication mechanism
based on Transfer Learning empowered Blockchain, coined
ATLB where blockchains are applied to achieve the privacy
preservation for industrial applications [2]. Apart from this a
group of researchers proposes a new transfer learning-based
secure data fusion strategy (TSDF) for Industry 4.0 like system
[15]. Beside focusing reinforced machine learning scheme
[16] another group of authors proposed to enable Mobile
Multi-user to make optimal ofﬂoading decisions based on
blockchain transaction states, wireless channel qualities. As
studied, several mechanisms appear to have limitations to peer
with the Industry 4.0 edge IoT protection, however, they have
conceptually motivated us to design our proposed technique.

III. PROPOSED APT PROTECTION MECHANISM
The protection scheme proposed here works in three steps.
In the ﬁrst step a deep transfer learning model gets deployed
inside the edge server. The model is trained based on two
combined and preprocessed datasets [17] [18] and the trained
model is settled down in the edge server. Once edge server
is called, it checks if there any advanced persistent threats
found within that data. Secondly detection history along with
the sensor data are sent to the linked DHT. Before storing
the data it needs to check if there any APT injected during
the data transfer over the network. In this step a blockchain
consortium administers the process and ensure that only the
registered and authenticated devices are sending data. In the
ﬁnal step blockchain smartcontract records the data transaction
into the shared ledger and store data into the DHT storage.
Figure 5 portrays the steps one by one. The captions brieﬂy
shows those respectively.

A. Building DTL Model

In order to identify the problems in the IoT environment
better, Table I gives the topical symbols and descriptions, in
which we set the initial model that has enough labeled data
to build an efﬁcient intrusion detection model. When the new
complex type of cyber-attacks arrives, the detection model is
suitable for the new type of cyber-attacks [19].

Source Domain: The domain where the initial model is
located. The source domain data (Ds : (Xs, Ys)) is the combi-
nation of (Xs1, Ys1), (Xs2, Ys2), (Xs3, Ys3), ......(Xsn, Ysm),

Fig. 5: High Level view of the proposed blockchain based AI
enabled Industry 4.0 CPS Data protection technique. It works
within three steps. 1) Detecting APT at edge-server upon
machine learning model 2) Consortium blockchain (CBC)
validates none but the authentic sensors sending data and 3)
Updating blockchain ledger (BCL) with the data transaction
and APT detection status and ﬁnally storing data in the dis-
tributed hash table (DHT) storage. Connection establishment
mechanism is illustrated in Figure 4 earlier.

in which the class of source domain label data (Ys) is 0, and 1,
where the normal scenario is represented by 1 and the attack
scenario is represented by 0.

Target Domain: The domain has a new type of attacks.
The target domain data (Dt : (Xt, Yt)) is the combination
of (Xt1, Yt1), (Xt2, Yt2), (Xt3, Yt3), ......(Xtn, Ytm), in which
the class of target domain label data (Yt) is 0 and 1, where the
normal scenario is represented by 1 and the attack scenario is
represented by 0.

Furthermore, the source domain label (Ys) and the target
domain label (Yt) contain only “normal” and “attack” data,
but attackers in the source domain and target domain may
be different. Although the source domain label (Ys) and the
target domain label (Yt) have the same feature space, their
performance in speciﬁc features is different. We have used
the formula called maximum mean discrepancy (MMD) [20]
to measure the difference between the source domain and the
target domain.

Distance(Xs, Xt) =

(cid:13)
(cid:13)
(cid:13)
(cid:13)
(cid:13)

1
n

n
(cid:88)

i=0

φ(Xsi) −

1
m

m
(cid:88)

i=0

φ(Xti)

(cid:13)
2
(cid:13)
(cid:13)
(cid:13)
(cid:13)

According to the dependence of Traditional machine Learn-
ing(TML) and DL models, the detection model trained by
source domain data (Ds) does not have good detection ac-
curacy when facing target domain data (Dt), and it has
been completely conﬁrmed by the subsequent experiment. The
TML and DL models need sufﬁcient training data, thus it is
difﬁcult to train an efﬁcient APT Detection model model only
depending on a small-scale of target domain source data (Dt).

TABLE I: Symbols and description

Description
Domain data
Domain feature
Domain label
Number of domain data

Source (s)

Target (t)

Ds : (Xs, Ys) Dt : (Xt, Yt)

Xs
Ys
n

Xt
Yt
m

Therefore, we transfer the knowledge contained in source
domain data (Ds) to the target domain through the proposed

DHT Storage Consortium Blockchain Network APT DetectionData ProtectionAI aligned  Edge-serverhyper-ledger123IEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

5

DTL-ResNet method and combine the target domain data (Dt)
with the same DTL-ResNet method to construct an efﬁcient
APT Detection for the target domain to improve the detection
accuracy for any heterogeneous IoT ecosystems.

B. DTL ResNet APT Detection Technique

Figure 6 shows the block diagram of the proposed DTL-
ResNet based model for APT Detection, which predominantly
includes two parts: the ﬁrst one is the model training part and
the last one is the intrusion detection part. We have applied
to our proposed model after prepossessing the network
it
data. The most signiﬁcant parameters of this model will be
determined through subsequent empirical experiments. The
model with an optimal prediction performance on the training
set will be selected as the ﬁnal intrusion detection model for
heterogeneous IoT applications. as for the intrusion detection
part, we have trained the DTL-ResNet model by randomly
selected training dataset and validated the model by validation
dataset. The detection performance of the models under the
discrete type of parameters are compared. Finally, the optimal
performance model has been selected as the ﬁnal detection
model in the ﬁeld of heterogeneous IoT applications.

Fig. 6: APT Detection ﬂow using DTL ResNet model. The
prediction compares with the previous loss and reuse the
knowledge. Once model is ready and deployed in the edge-
server can detect APT injected to the system.

The network architecture which we have selected for the
DTL approach is a one-dimensional Fully Convolutional Neu-
ral Network (FCN) called Conv1D. Figure 6 shows the archi-
tecture of the proposed DTL-ResNet model. The input of the
network is the same shape. The one-dimensional convolution
layer is used in the ﬁrst, second and third layers respectively.
The ﬁrst layer is the combination of 128 ﬁlters of kernel length
8, the second layer is the combination of 256 ﬁlters of kernel
length 5, and the third layer is the combination of 128 ﬁlters of
kernel length 3. The Rectiﬁed Linear-Unit (ReLU) activation
function is used in the third one-dimensional convolution
layer. Each one-dimensional convolution layer is followed
by a BatchNormalization() operation [21]. The combination
of these three convolution layers has a stride equal to 1.

The procedure repeat
two times for block-2 and block 3
respectively purposing to achieve optimal performance. Each
block takes the previous block outputs as inputs for the
current block and performs some non-linearity’s to transform
it into a multivariate series whose dimensions are deﬁned by
the number of ﬁlters in each layer. The fourth layer is the
combination of a GlobalAveragePooling1D() operation which
takes the input of the third block and averages each series.
This operation reduces drastically the number of parameters
in a deep model while enabling the use of a class activation
map [22] which allows an interpretation of the learned features
[21]. The output of the gap layer is then fed to a softmax
classiﬁcation layer whose number of neurons is equal to the
number of classes in the dataset. Other hyper-parameters and
data corelation are skipped purposing brevity of the paper.
This enabled us to identify the effect of deep transfer learning
in the ﬁeld of APT detection. However, once APT detection
successfully run in the edge-server, the detection status is
kept encrypted purposing to send it during the data transfer
over the consortium blockchain (CBC) network. Suppose, a
detection status is Ts and data transaction is Tx. This will be
recorded in the blockchain ledger (BCL). As mentioned earlier
the CBC works as KGD which establishes the communication
between edge-devices and blcockhain peers. Though, exist-
ing consortium blockchain i.e., hyperledger fabric (HLF) [7]
works in cooperation with the membership service provider
(MSP) which is actually a PKI-driven certiﬁcate authority
(CA), the proposed technique replaces the need of CA need
by facilitating a novel certiﬁcateless technique using Elliptci
curve powered multisiganture (MS), i.e. BLS/Schnorr variant
etc. The following subsection explains how it fullﬁlls that
requirements.

C. Blockchain based Certiﬁcateless Authentication

Identity-based encryption (IBE) encounters crucial key es-
crow issues while it emerges with the legacy of Public Key
Infrastructure (PKI). As discussed in the previous section
certiﬁcate-less cryptography (CLC) solved it by introducing
the partial secret (ps) concept, derived from a master secret
(ms) that keeps the private keys apart from blockchain con-
sortium (KGD) as already mentioned in Figure 4. The (ps)
depends on the device identity, which furthermore ensures the
mutual dependency instead of sole reliance on trusted TTP,
i.e., certiﬁcate authority (CA). In Industry 4.0 use case, once
a device receives the partial secret (ps), it starts generating
public-private key pairs (P k, Sk) using its identities (Ids).
As depicted by the 4 steps ( a : to d :) interaction between
A and B of Figure 4, the entire key generation tasks can be
divided into the following ﬁve (05) consequent processes.

setup(1λ) → (y, ms): It takes a system’s security parameter
λ and returns the system parameter y and master secret (ms).
The algorithm associated with this procedure runs at (KGD).
For example, for the customized Schnorr multisignature (MS),
y includes the prime numbers(p, q), group generators (g) i.e.
primitive roots etc. It ﬁnalizes the after conﬁrming each peer’s
own private keys such as (x1, x2, x3, master secret (ms) and
public keys such as (p, q, g, y as mentioned in the earlier key
generation subsection.

genP S(y, idj, ms) → (psj): As illustrated by Algorithm 1
the algorithm takes inputs of system parameter y, j’th number

Training Data Validation DataClassifierConvolution LayerDense LayerAveragePooling LayerPredictionLabelsVSLossReuse ExistingKnowledgeDTL-ResNet  IDS ModelPredictionAPTDetection IEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

6

of identities (idj that interested to join at a certain time t,
along with the previously created master secret (ms). Here
the device identity, idj ∈ {0, 1}∗, and ms outputs the j’th
number of partial keys (psj) in response. In line with that, it
takes the (idj) and ﬁnds device secret value xj ← (y, idj).

multiSig(xi, psj) → (R, S): At this stage, Blockchain
peers cosign the partial secret (psj) before sending it to the
IIoT sensors through edge platform. Initially, they compute
the shareable parameters Ri ← gr
i after choosing own secret
random number ri. Then aggregates R ← (cid:81)n
i Ri mod p.
Besides, it computes, c → (T (cid:107) Y (cid:107) R (cid:107) psj), individual
signature, si ← (ri + cxi) mod q and lastly aggregate
S ← (cid:80)n
i=i si mod p. Therefore, the signature outcomes as
if σ ← (R, S).

genSk(y, psj, xj) → SKj: At the beginning of this step,
the Edge devices should know the system security parameters,
Y which includes the prime numbers (p, q) group generating
primitive roots g and calculated public key variant y.Then,
edge gateway on behalf of device or the each IIoT device itself
veriﬁes if the partial keys received are valid or not simply by
justifying the conditions such as gS mod p = R × yc mod p.
If the multi-signed partial keys (psj) are valid, the particular
IIoT device run its algorithm to produce its own private keys
(skj).

genP k(y, xj) → pkj: To generate the public keys (pkj)
for the IIoT devices, it takes system parameters along with the
previously generated device secret xj. Please note that, though
it looks similar but the public generation for the devices are
not the same process as the key generation of the Blockchain
peers as discussed earlier.

The above procedures should work in line with some base
method such encrypt(), decrypt() and verif y() along the
associated algorithms that could be simpliﬁed as below.

a) enc(y, ps ∈ m, id, pk) → (c ∈ ∨ ⊥): The base
encryption method takes the system parameters y, partial
secrets (ps) as message (m) and produces the desired
ciper-text (c) within the designated cipher-text space.
b) dec(c ∈ , sk → ps ∈ m ∨ ⊥):The base decryption
method and its associated algorithm takes the cipher-text
and produces the partial-secret (ps) within the designated
message space.

c) ver(y, σ, id, ps) → true(1) ∨ f alse(0) ∨ ⊥:The veriﬁca-
tion algorithm in the edge side, takes the system security
parameters (y), the multi-signed signature (σ), device
identities (id) and the partial secrets (ps), hence veriﬁes
either the multi-signed partial secrets are valid (true ∨ 1)
or invalid (invalid ∨ 0).

D. Device Registration and Veriﬁcation

KGD plays an indispensable rule for security of the
edge sensors. The sensor devices need to get registered with
the KGD consortium. Before posting the transaction (tx),
interested sensors obtain public-private key pairs upon the
completion of the registration process.

1) Registering devices: As discussed earlier, multi-party
industry 4.0 stakeholders agrees to build the KGD coop-
eratively. Suppose, the owner, buyer and insurer along with
other stakeholders cooperatively form the BC network that
represents the KGD peers. They peers broadcasts the system

Algorithm 1: Certiﬁcateless device key generation
Input

: idj – identities of the j(cid:48)th number of IIoT devices
/* prime numbers */

y – system parameters

Output: (pk, sk) – public and private key pairs

/* sys param init */

1 setup(1λ)→ (y)
2 for id ← idj do
3

porocedure keyGen (y, id):
Xj← genSk (y, idj)
requestSend (idj)
psj ← genPS (idj)
multiSig(sn, idj, psj)
responseReceived (idj)
V[0,1,⊥ ] ← verify ()
if V ← 1 then

/* key gen */
/* gensec keys */
/* request to join */
/* KGDs gen partial sec */
/* multi-sig */
/* get ps */
/* verify sig */

skj ← genSk (Y, idj, xj)
pkj ← genPk (y, xj)

/* set pri key */
/* sets pub key */

4

5

6

7

8

9

10

11

12

end

13
14 end

Fig. 7: Consortium blockchain (hyperledger fabric) data trans-
action (Tx), veriﬁcation and recording ﬂow. It has 6 steps,
i.e., a : Proposing Tx ( registrar & submit Tx), b : Endorsing
Tx (run environment & endorse), c : Verifying Tx (validate
propsed Tx ), d : Aggregating Tx (OSN articulate), e :
Committing Tx (broadcast to all), f : Storing Tx ( to ledger &
DHT )

parameters (y) to all sensors. KGD peers keep their individual
signer’s secret such as s1, s2...sn With the help of Edge
computation capacity or its own ability, interested device cre-
ates their own secret value x1, x2, x3...xj generates respective
public keys using xj and the system parameter y, where j is
the number of interested devices at particular time t and n is
the number of co-signing Blockchain peers. Sensor devices
the KGD with their identities id1, id2, ...idj.
will contact
Upon receiving the request, KGD will generate a partial
private seccret ps1, ps2...psi for all requested devices and
will cosign co-sign idi and psi using co-signers private key
sn. KGD sends the signed message back to the edge. The
sensor device itself or edge node (e.g. Azure IoT edge or
Dell Gateway) will verify if the message comes from the
KGD, and if yes, it will generate private - private key pairs
(pk1, pk2, ..., pki, sk1, sk2, ..., ski) using (psi, xi, Y . Note that
only each industrial IoT device will be able to create the
private key because it is the only entity who knows his private
secrets xj. Alg. 1 illustrates the step by process with the
necessary explanations.

OSN1OSNkKafka/RAFT Consenus Protocols P1Ordering ServicesSDK LedgerPnLedgerP2P Gossip Protocols BC Peers with Ledger b:a:c:d:e:f:REST / GRPC API CallsSmart Contract (Chincode) OperationSensorsEdge IEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

7

E. Data Protection and Storing

Once edge sensors are successfully registered to the KGD
upon the certiﬁcate-less cryptography and multi-signature
based authentication, the sensor devices proceed further to
send and store data as illustrated by Figure 7. The transaction
includes the identity of the IIoT devices along with the action
and timestamp at the time (T ) of action (ACT ). There can be
different type of actions such as store data at a speciﬁc DHT
address ( ADS), update previously inserted data or access
permission of the particular data. To verify a transaction
Tx = (IDj, T, ACT ), the blockchain peers have to meet two
conditions: i) Either the public key (P Kj) obtained associates
with the identity (IDj), ii) Can the signed transaction (Tx) be
veriﬁed. Figure 5 illustrates the following steps from 1 to 6.
a) Propose: Client Edge sensors initiate the process by
registering the devices to the Blockchain. It constructs the
encrypted transaction proposal (tx) using (sk) and invoke the
smart contract and SDK.

b) Endorse: SDK requests for endorsement, and BC peer

veriﬁes tx after authenticating the id.

c) Verify: The veriﬁcation requires meeting the policy, i.e.,
business logic. The SC takes a tx as input and returns a multi-
signed 0 or 1 in response to the SDK apps. Tx is determined
as query function using APIs (i.e OAuth 2.0 REST API). In
either case, the SDK apps proceed the tx with the required
operations such as create, retrieve, update, and delete with
the endorsement.

d) Aggregate: The SDK apps aggregates all consents into
single transaction and disseminates those to the Ordering
Service Node (OSN). The OSN works on the consensus
protocols, i.e., Practical Byzantine Fault Tolerance (PBFT)
within Apache Kafka platform.

e) Commit: The tx then relayed to the OSN, associated
channel peers conﬁrm each tx of the block by speciﬁc smart-
contract and checking through concurrency control cersion
(CCV). In case any transaction misses the process is identiﬁed
with an invalid status inside that block. Hence a fresh block
is committed to the blockchain ledger.

Algorithm 2: Secure data transfer and store by BC SC

Input

: Tx – IIoT data transactions

L – access control lists
σ – signaturues of the Tx
IDj – identities of the j(cid:48)th number of IIoT devices
Y – system parameters
/* prime numbers,

primitive roots etc */
Output: (VId ,VTx , S) – set & return veriﬁcation and storing

ﬂag true
1 create := (ID,L,Tx,σ,ADS)
2 signTx (Tx, Sk)
3 castTx (Tx, σ)
4 for Tx ← Txi
5 do
6

V1 ← verID (ID, P k, Y )
V2 ← verTx (Tx,ID, P k, σ)
if (V1 || V2) then

S ← storeDHT (Tx, ID):

7

8

9

/* creates T x */
/* sign T x */
/* broadcasts T x */
/* for all n × Tx */

/* verify (ID) */
/* verifies (T x) */

/* store T x */

end

10
11 end

f) Store: The Gossip protocol of the OSN broadcasts
ledger update across the BC network. Thus pointer is mem-

orized in the ledger, and data-address is securely stored on
the ofﬂine or online DHT data repository upon IPFS or
HL CouchDB. Here, the signature algorithm can be repre-
sented as a triple /4-tuple of probabilistic polynoimial-time
algorithms (G, S, V ) or (G, K, E, D) that includes genera-
tion (G), signing(S), veriﬁcation(V ), Key-distribution(K),
Encryption(E) and Decryption(D) respectively. Besides, the
identities IDj, here the devices require the Access Control List
(ACL) before Transaction (T x) creation and signing (σ). The
industry 4.0 devices along with the Edge Gateway are solely
responsible to create the ACl list (L) in addition to signature
(σ) generation and transaction(Tx) publishing. However, the
same L will be required later to access data. The algorithm
as shown in Alg.2, outcomes three different ﬂags (V1, V2, S)
set after successful execution. If the identities belong to the
derived public keys, V1 := true, while the certiﬁcate-less sig-
nature meets the condition as discussed earlier, (V2 := true).
The Blockchain peers do the transaction (Tx) veriﬁcation in
response to the reception. Interchangeable veriﬁcation proce-
dure works in case of data accessing. Similarly, after data is
written to the DHT, the third ﬂag gets set,(S := true). Lastlt
a new block is added to the blockchain and subsequently the
ledger gets updated including the Tx Pointer (T p).

IV. DATASET AND MODEL TRAINING

There are two fundamental steps that applied during the data
preparation process based on the combined dataset applied
[18] [17]. Some features such as - date, time, and timestamp
have been omitted from feature vectors as they may cause to
overﬁt the training data. Furthermore, for some DL and DTL
models, the input data shape has been reshaped into three di-
mensions to feed the models by applying numpy.reshape with
swapaxes and concatenate methods. As this dataset originates
from multiple heterogeneous sources. So, it is an essential
step to combined all the IoT sensors’ data by redundancy
and correlation analysis which has been evaluated using the
Pearson’s product-moment coefﬁcient equation [23].

r =

(cid:112)(cid:80)n

i=1(xi − ¯x)(yi − ¯y)

(cid:80)n
i=1(xi − ¯x)2(cid:112)(cid:80)n
where n is the number of tuples, xi and yi are the respective
values in tuple i, ¯x and ¯y are the respective mean values of x
and y.

i=1(yi − ¯y)2

i.e.,

As datasets originate from different heterogeneous sources,
it is an essential step to combine all the IoT sensors’ data
by redundancy and correlation analysis. This analysis has
measured how strongly one feature, i.e., door state implies
light status. Table II shows the respective
the other,
correlation analysis where light status (LS), door state (DS),
Smartphone signal (PS), temperature condition (TC), pressure
(PS), current temperature (CT), humidity (HY), temperature
(TE) are in the rows. Similarly thermostat status (TS), motion
status (MS), longitude (LG), latitude (LT), fridge temperature
(FT), temperature (TE), humidity (HY), current temperature
(CT) are in the column, respectively. We have performed these
strategies to scale the selected feature values within a range
between [0.0,1.0] using a technique called minimum-maximum
normalization [24].

IEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

8

NormalizedValue =

(X − Xmin)
(Xmax − Xmin)

Where, X is an original value and Xmax and Xmin is the

maximum and minimum values of the feature, respectively.

TABLE II: Correlation matrix (with color intensity)

LS
0
0
0
0
0
0.01
0
0
0

DS
0
0
0
0
0
0.16
0.01
0
0.12

PS
0
0
0
0
0
0.01
0
0
0

TC
0
0
0
0
0
0.01
0
0
0.01

PR
0.12
0.02
0.02
0.02
0.57
0
0.04
0.55

HY
0.01
0
0
0
0.35
0

CT
0
0
0
0
0.16
0.58
0.33

TE
TS
0.15
0.01 MS
LG
0.03
LT
0.03
FT
0.60
TE
HY
CT
PS

A. Training the DTL ResNet Model

First of all, we have divided the combined dataset into the
training data set (80%) and the validation data set (20%) by
using the train test split method of the scikit learn library.
this splitting ratio has
To avoid the over-ﬁtting problem,
been considered as the best ratio between the training and
the validation dataset [25]. We have used the value of the
random state parameter as true (1), which decided the splitting
of data into the training and the validation set randomly. The
k-fold cross validation has been used for parameter tuning.

V. APT DETECTION EVALUATION

First of all, we consider the quantitative performance of
DTL algorithms. Table III shows the quantitative performance
summary of the DTL algorithms, where the proposed ResNet
model shows an optimal performance compared to the other
DTL algorithms with an accuracy score of 0.87, precision
score of 0.88, recall score of 0.86, f1-score of 0.86, and ROC
AUC score of 0.83. In this model, we used three hidden-
layers where relu is the hidden layer activation function. Also,
softmax is used as a network output activation function, and
“categorical_crossentropy” is used as a loss function along
with adam optimizer.

TABLE III: DTL performance comparison metrics

Algorithm Accuracy

FCN
LeNet
IncepNet
MCDCNN
CNN
LSTM
MLP
ResNet

0.84
0.80
0.80
0.80
0.81
0.85
0.73
0.87

Precision
0.85
0.82
0.86
0.83
0.83
0.84
0.74
0.88

Recall
0.84
0.80
0.80
0.80
0.81
0.77
0.78
0.86

F1Score
0.83
0.79
0.81
0.79
0.80
0.77
0.77
0.86

ROC AUC
0.81
0.76
0.73
0.76
0.76
0.83
0.74
0.83

Figure 8 shows the accuracy score of every single epoch for
both training and validation phases on the above-mentioned
eight discrete DTL models. Considering epoch number 170 to
200 for both phases, the ﬂattening characteristics of the curve
and accuracy are not increasing literally, we have considered

Fig. 8: The training and validation accuracy of the ResNet
model used to detect Advanced Persistent Threat (APT). The
experiment performed within an edge complaint setup.

200 epochs for our analysis. The proposed ResNet model (P-
ResNet) shows the highest accuracy score in both the training
and validation phase. Whereas, MLP model shows the lowest
accuracy score during any settings of the epoch number within
1 to 200. In detail, according to Figure 8, the accuracy of
the MLP model starts around 0.67 for the training phase and
0.63 for the validation phase in the epoch number 10. But it
increase dramatically around 0.78 in epoch number 65 and
0.74 in epoch number 140 for the training and validation
phase, respectively.

However, for the training phase, the accuracy score (0.78)
remains stable in epoch number 66 to 200. On the other hand,
for the validation phase, the accuracy score (0.74) remains
stable between epoch numbers 141 and 200. The training and
validation accuracy of CNN, IncepNet, LeNet, and MCDCNN
models remain steady between the epoch number 1 to 200 as
shown in ﬁgure 8. The accuracy of LSTM and FCN models
starts with a score of 0.82 at the beginning. But this score rises
gradually with the increase if the epoch number and reaches
to approximately 0.86 when the epoch number is 160 and then
remains stable between epoch number 161 to 200 for both of
the phases. The remarkable point is that the behavior of the
training phase almost similar to the validation phase. Figure
8 shows the trend of the accuracy score of both phases for a
better understanding of our proposed model. The accuracy of
the proposed model jumps rapidly in epoch number 60 and it
reaches a peak of point close to 0.87 at epoch number 169.
However, According to Figure 8, which remains almost stable
up to the early stopping checkpoint with an accuracy of 0.87.

VI. BLOCKCHAIN PERFORMANCE EVALUATION

A. Platform Setup

The proposed security approach was deployed inside the
Caliper evaluation toolkit for IBM Hyperledger Fabric (HLF)
v1.4.1. It helps measuring a particular blockchain deployment
with a set of previously deﬁned enterprise use cases. IBM
discloses that no general tool provides performance evaluation
benchmark for Blockchain while releasing initial version of
HLF Caliper [7]. The integrated use-cases were customized to

02550751001251501752000.7000.7250.7500.7750.8000.8250.8500.8750.900Train / Validation AccuracyAccuracy and Loss of DTL ResNetTrain Accuracy0255075100125150175200Validation Accuracy0.250.300.350.400.450.50Train / Validation LossTrain Loss0255075100125150175200No of EpochValidation LossIEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

9

Fig. 9: System performance based on Blockchain transaction
processing rate. Here (a) Performance (b) Latency (c) Re-
sponse time for the use case with 2 to 32 nodes.

Fig. 10: Proposed system scalability. It shows performance
based on an average throughput vs latency

overlap the industry 4.0 edge requirements for generating data.
However, the latest version of the NodeJS Package Manager
(NPM 8.0.1), docker, and curl were installed to set up the run-
time environment inside the Ubuntu 18.04 LTS with 16 GB of
memory where python2 , make, g++ and git ensure additional
SDK supports. A typical conﬁguration for the permissioned
blockchain has programs called Test Harness that
include
client generation and observation and the deployed blockchain
System Under Test (SUT) and the RESTful SDK [7].

B. Blockchain Deployment

The RESTful Software Development Kits (SDK) interfaces
among the required components setup. There are four (04)
steps required to evaluate the performance benchmark, such
as i) Starting a local Verdaccio-server for package publishing,
ii) The connecting the repository to the server, iii) Instal-
lation and binding the CLI from the server side and iv)
Hence, running the integration benchmark. The associated
ledger works with the initial conﬁg.yml ﬁle on command line
interface (CLI).After the initial conﬁguration, the system was
conﬁgured for performance benchmark with the tasks, such as
- a) invoke policy checking functions (READ) and WRITE
T x into the ledger, b) Setup multiple test-cases for about
2 to 35 number of peers representing industry stakeholders
and cosigners, c) Allocating workloads from 100 Tx/sec to
1500 Tx/sec among those peers representing the Industry
4.0 edge data population. However, the future scope of this
work includes increasing the workload to best suit the higher
Industry 4.0 CPS standard.

C. Performance Analysis

The Caliper benchmarking results illustrates the deployed
project performance based on four measurement metrics suc-
cess rate (ρ), latency (∆t and L), throughput (P ), and resource
consumption (W ) for different test cases. Fig 9 shows the
throughput, success rate and delay, respectively. The associated
test-case was run under different number of workload (W )
ranging from 100 to 1000 workloads. The HLF network
occupies two (02) chaincodes, four (04) peer nodes, and three

(03) OSNs running on Apache Kafka for Practical Byzantine
Fault Tolerance (PBFT) consensus algorithm. As seen in
Figure 9(a), the WRITE has 185 at about 200 workload (W )
with the maximum success rate of 93% and an average delay
of 5 seconds. On the other hand, Read operation seems to have
a maximum of 470 throughputs on a similar success rate at
the maximum workload. The usual delay appears to be almost
half of the W delay as W has to incorporate OSNs on Kafka.
The benchmark evaluation explicitly illustrates that
the
setup conﬁgured has lower performance for higher number
workload (W ) though the theoretically solution proves the
consortium Blockchain has signiﬁcant adaptability for higher
number of nodes. As investigated the deep inside,the local
workload processing bottleneck affects throughput and latency.
Hyperledger Tx ﬂow works demands enough responses against
the submitted Tx proposals, in case the responses are queued
due to network overhead, bandwidth or processing loads con-
sequences the latency raising. On top of that, the general pur-
pose workstation conﬁguration slower the evaluation for higher
workloads. Here, Figure 10 portrays the relation between
performance and scalability based on the previously executed
Read, Write Operations. To avoid further complexity, OSN and
peer conﬁguration left resembling to initial setup. However,
two test cases run for 300 and 500 workload. As depicted
by Figure 10, the HLF platform setup has lower scalability.
For the ﬁrst test-case (300 workload), the throughput and
latency respectively reaches 150 tps and 64. However, for the
other test-case, it comes with lower throughput and higher
latency with respect to the number of nodes ranging from
4 to 32. Caliper toolkit allows to run the node subset that
endorse particular chaincodes. The investigation shows that the
proposed technique without a certiﬁcate can respond within 1
to 16 milliseconds. However, it delays 40 to 242 ms with the
default CA of the Hyperledger CBC deployment. The response
latency varies with the increase of workloads.

VII. CONCLUSION
Security of the critical Industry 4.0 Cyber-physical system
deserves immense concern as any leakage should outcome
devastating ﬁnancial damages and loss of lives. On top of
malware, ransomware Advanced Persistent Threat (APT) has

102030100200300400500Performance (Tx/s)RW1020300102030405060Latency (%)RW1020300246810Response(s)RWNumber of Blockchain nodes (2 to 32)51015202530105011001150120012501300Throughput (Tx/sec)Number of WorloadsThroughput102030405060Latency (sec)Latency51015202530IEEE INTERNET OF THINGS JOURNAL, VOL., NO., FEBRUARY 2022

10

been responsible for such loss. Industry 4.0 edge ecosystem
wonders for a cooperative trust-building rather than trusting
a single entity that the proposed security technique purposely
promises to offer through a certiﬁcateless mechanism. Admit-
tedly, an inadequate data-protection mechanism can readily
challenge the security and reliability of the network. Con-
sidering the detection accuracy, the proposed approach has
utilized the salient features of the deep transfer learning
(DTL) algorithm upon the residual neural network (ResNet)
model. After successfully ﬁltering the APT from the edge
that data is transferred to the associated distributed
end,
hash table storage (DHT). Consortium Blockchain (CBC)
network ensures the IoT sensor registration, authentication,
and validation. The immutable ledger records the data and
APT detection transaction. The proposed detection model has
an overall accuracy score of about 90% where CBC increases
the data transaction rate.

REFERENCES

[1] O. Alkadi, N. Moustafa, B. Turnbull, and K.-K. R. Choo, “A deep
blockchain framework-enabled collaborative intrusion detection for pro-
tecting iot and cloud networks,” IEEE Internet of Things Journal, vol. 8,
no. 12, pp. 9463–9472, 2021.

[2] X. Wang, S. Garg, H. Lin, M. J. Piran, J. Hu, and M. S. Hossain,
“Enabling secure authentication in industrial iot with transfer learning
empowered blockchain,” IEEE Transactions on Industrial Informatics,
vol. 17, no. 11, pp. 7725–7733, 2021.

[3] P. Zhang, H. Sun, J. Situ, C. Jiang, and D. Xie, “Federated transfer
learning for iiot devices with low computing power based on blockchain
and edge computing,” IEEE Access, vol. 9, pp. 98630–98638, 2021.
[4] Z. Rahman, I. Khalil, X. Yi, and M. Atiquzzaman, “Blockchain-based
security framework for a critical industry 4.0 cyber-physical system,”
IEEE Communications Magazine, vol. 59, no. 5, pp. 128–134, 2021.
[5] Y.-P. Lin and T.-P. Jung, “Improving eeg-based emotion classiﬁcation
using conditional transfer learning,” Frontiers in human neuroscience,
vol. 11, p. 334, 2017.

[6] S. T. Mehedi, A. Anwar, Z. Rahman, and K. Ahmed, “Deep transfer
learning based intrusion detection system for electric vehicular net-
works,” Sensors, vol. 21, no. 14, 2021.

[7] N. B. Truong, K. Sun, G. M. Lee, and Y. Guo, “Gdpr-compliant personal
data management: A blockchain-based solution,” IEEE Transactions on
Information Forensics and Security, vol. 15, pp. 1746–1761, 2020.
[8] G. Lin, S. Wen, Q.-L. Han, J. Zhang, and Y. Xiang, “Software vulnera-
bility detection using deep neural networks: A survey,” Proceedings of
the IEEE, vol. 108, no. 10, pp. 1825–1848, 2020.

[9] L. Kiffer, R. Rajaraman, and a. shelat, “A better method to analyze
blockchain consistency,” in Proceedings of the 1st International Work-
shop on Emerging Trends in Software Engineering for Blockchain, CCS
18, p. 729–744, Association for Computing Machinery, 2018.

[10] J. Qiu, J. Zhang, W. Luo, L. Pan, S. Nepal, and Y. Xiang, “A survey
of android malware detection with deep neural models,” ACM Comput.
Surv., vol. 53, dec 2020.

[11] M. Zamani, M. Movahedi, and M. Raykova, “Rapidchain: Scaling
blockchain via full sharding,” in Proceedings of the 2018 ACM SIGSAC
Conference on Computer and Communications Security, p. 931–948,
Association for Computing Machinery, 2018.

[12] G. De La Torre Parra, P. Rad, K.-K. R. Choo, and N. Beebe, “Detecting
internet of things attacks using distributed deep learning,” Journal of
Network and Computer Applications, vol. 163, p. 102662, 2020.
[13] X. Lin, J. Wu, A. K. Bashir, J. Li, W. Yang, and J. Piran, “Blockchain-
based incentive energy-knowledge trading in iot: Joint power transfer
and ai design,” IEEE Internet of Things Journal, pp. 1–1, 2020.
[14] X. Jiang, F. R. Yu, T. Song, Z. Ma, Y. Song, and D. Zhu, “Blockchain-
enabled cross-domain object detection for autonomous driving: A model
sharing approach,” IEEE Internet of Things Journal, vol. 7, no. 5,
pp. 3681–3692, 2020.

[15] H. Lin, J. Hu, X. Wang, M. F. Alhamid, and M. J. Piran, “Toward secure
data fusion in industrial iot using transfer learning,” IEEE Transactions
on Industrial Informatics, vol. 17, no. 10, pp. 7114–7122, 2021.
[16] D. C. Nguyen, P. N. Pathirana, M. Ding, and A. Seneviratne, “Privacy-
preserved task ofﬂoading in mobile blockchain with deep reinforcement
learning,” IEEE Transactions on Network and Service Management,
vol. 17, no. 4, pp. 2536–2549, 2020.

[17] N. Moustafa, “The bot-iot dataset,” 2019.
[18] N. Moustafa, “Ton iot datasets,” 2019.
[19] M. Billah, A. Anwar, Z. Rahman, and S. M. Galib, “Bi-level poisoning
attack model and countermeasure for appliance consumption data of
smart homes,” Energies, vol. 14, no. 13, 2021.

[20] K. M. Borgwardt, A. Gretton, M. J. Rasch, H.-P. Kriegel, B. Sch¨olkopf,
and A. J. Smola, “Integrating structured biological data by Kernel
Maximum Mean Discrepancy,” Bioinformatics, vol. 22, pp. e49–e57,
07 2006.

[21] Y. Miao, C. Chen, L. Pan, Q.-L. Han, J. Zhang, and Y. Xiang, “Machine
learning–based cyber attacks targeting on controlled information: A
survey,” ACM Comput. Surv., vol. 54, jul 2021.

[22] J. Zhang, L. Pan, Q.-L. Han, C. Chen, S. Wen, and Y. Xiang, “Deep
learning based attack detection for cyber-physical system cybersecurity:
A survey,” IEEE/CAA Journal of Automatica Sinica, pp. 1–15, 2021.

[23] J. D. Chee, “Pearson’s product-moment correlation: Sample analysis,”

Research Gate, vol. 4, no. 1, pp. 4–90, 2015.

[24] M. E. Aminanto, R. Choi, H. C. Tanuwidjaja, P. D. Yoo, and K. Kim,
“Deep abstraction and weighted feature selection for wi-ﬁ impersonation
detection,” IEEE Transactions on Information Forensics and Security,
vol. 13, no. 3, pp. 621–636, 2018.

[25] I. Guyon et al., “A scaling law for the validation-set training-set size

ratio,” AT&T Bell Laboratories, vol. 1, no. 11, 1997.

Ziaur Rahman is a doctoral research scholar in
Cybersecurity of RMIT University, Melbourne. He
served Mawlana Bhashani Science & Technology
University, Bangladesh as an Associate Professor
in ICT. He casually served RMIT, Monash, Deakin
and Charles Sturt University, Australia. Three (03)
articles he coauthored were nominated and received
the best paper awards. He is afﬁliated with the IEEE,
ACM, Australian Computer Society. His research
interests include blockchain technology, security of
the internet of things (IoT), machine learning.

Xun Yi is currently a full Professor of Cybersecurity
with the School of Computing Technologies with
the School of Science, RMIT University, Melbourne,
VIC, Australia. He has published more than 200
research papers in international journals and con-
ference pro-ceedings. His research interests include
applied cryptography, computer and network secu-
rity, mobile and wireless communication security,
and data privacy protection. Prof. Yi has ever under-
taken program committee members for more than 30
international conferences. Recently, he has led some
Australia Research Council Discovery Projects in Data Privacy Protection.
From 2014 to 2018, he was an Associate Editor for IEEE TRANSACTIONS
ON DEPENDABLE AND SECURE COMPUTING.

Ibrahim Khalil is currently a full Professor with
the School of Computing Technologies, RMIT Uni-
versity, Melbourne, VIC, Australia. He received the
Ph.D. degree from the University of Berne, Berne,
Switzerland, in 2003. Before joining RMIT Univer-
sity, he also worked with EPFL, Lausanne, Switzer-
land, University of Berne, and Osaka University,
Osaka, Japan. He has several years of experience
in Silicon Valley-based companies working on large
network provisioning and management software. His
research interests are in scalable efﬁcient computing
in dis-tributed systems, network and data security, secure data analysis,
including big data security, steganography of wireless body sensor networks,
and high speed sensor streams and smart grids.

