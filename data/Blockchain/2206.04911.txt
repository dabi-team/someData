2
2
0
2

n
u
J

0
1

]

R
C
.
s
c
[

1
v
1
1
9
4
0
.
6
0
2
2
:
v
i
X
r
a

NSSIA: A New Self-Sovereign Identity Scheme with
Accountability

Qiuyun Lyu1, Shaopeng Cheng1, Hao Li1, Junliang Liu2, Yanzhao Shen1, and Zhen Wang1

1School of Cyberspace, Hangzhou Dianzi University, Hangzhou, Zhejiang 310018, China
2Security department, Hangzhou Meichuang Technology Co., Ltd, Hangzhou, Zhejiang
310011, China

June 13, 2022

Abstract

Self-Sovereign Identity (SSI) is a new distributed method for identity management, commonly used to address
the problem that users are lack of control over their identities. However, the excessive pursuit of self-sovereignty
in the most existing SSI schemes hinders sanctions against attackers. To deal with the malicious behavior, a few
SSI schemes introduce accountability mechanisms, but they sacriﬁce users’ privacy. What’s more, the digital
identities (static strings or updatable chains) in the existing SSI schemes are as inputs to a third-party executable
program (mobile app, smart contract, etc.) to achieve identity reading, storing and proving, users’ self-sovereignty
are weakened. To solve the above problems, we present a new self-sovereign identity scheme to strike a balance
between privacy and accountability and get rid of the dependence on the third-party program. In our scheme,
one and only individual-speciﬁc executable code is generated as a digital avatar-i for each human to interact with
others in cyberspace without a third-party program, in which the embedding of biometrics enhances uniqueness
and user control over their identity. In addition, a joint accountability mechanism, which is based on the shamir (t,
n) threshold algorithm and a consortium blockchain, is designed to restrict the power of each regulatory authority
and protect users’ privacy. Finally, we analyze the security, SSI properties and conduct detailed experiments in
term of the cost of computation, storage and blockchain gas. The analysis results indicate that our scheme resists
the known attacks and fulﬁlls all the six SSI properties. Compared with the state-of-the-art schemes, the extensive
experiment results show that the cost is larger in server storage, blockchain storage and blockchain gas, but is still
low enough for practical situations.

1 Introduction

Identity management (IdM) has experienced increased interest due to the ever growing demand for digital iden-
tities, as people become overly dependent on online services [1]. However, each traditional IdM system usually
adopts centralized authorization, authentication and maintains identity data independently [2]. As a result, enor-
mous online IdM services force people to manage a large number of digital identities, which leads to the problem
of identity fragmentation [3] and is vulnerable to identity attacks, such as identity impersonation, privacy leak-
age, identity fraud, etc [4]. Even worse, users are lack of control and ownership over their digital identities in
the traditional IdM [5, 6]. Therefore, a distributed method for identity management called Self-Sovereign Identity
(SSI) is proposed [7], in which the users are central to the administration of identities. And, fortunately, the rise
of distributed ledger technology (DLT), such as blockchain, has also made it possible to construct self-sovereign
identities [8–10]. In comparison to the centralized management used by the traditional IdM, SSI schems shift deci-
sions authority to users through secured DLT [11] and allow them to possess full control of their identities and data
[12–16].

According to the goals to achieve, existing SSI schemes can be divided into the following three categories:
junior SSI schemes [17–21], SSI schemes with sybil-resistance [22–26], and SSI schemes with accountability [27,
28]. To give users’ control over their identities and data, junior SSI schemes adopt DID standard [17], smart
contracts [18, 19] or credential chain [21], etc. And static strings, such as DIDs, addresses of smart contracts, or

1

 
 
 
 
 
 
updatable chains are employed to identify the users. However, the fact that users can hold as many identities as
they want facilitates the implementation of sybil attacks. Therefore, many scholars introduced additional certiﬁcate
authority [22] and biometrics [23–26] to ensure that each user has one and only DID-based digital identity in their
SSI schemes with sybil-resistance. But unfortunately, the above schemes can not reveal the identities of malicious
users. To deal with the problem, SSI schemes with accountability [27, 28] are proposed. Since users are represented
by credential chains in [27], a regulatory authority checks the malicious credentials with the personal information
in a central registry to identify the malicious users. But the audit of malicious users initiated by a single regulatory
authority may lead to the serious problems of inadequate regulation or injustice. Different from the scheme [27], the
problems caused by a single regulation are overcome in the paper [28]. Speciﬁcally, the sanctions lists and a fuzzy
matching method based on secure multi-party computation are applied to identify the credentials of suspicious
users. However, both the central registry [27] and the sanctions lists [28] inevitably leak users privacy.

In the other hand, metaverse, as the evolving paradigm of the next generation of the Internet [29], will contain
enormous amounts of applications and bring new challenges to the SSI. And, metaverse is considered as a massive
virtual environment parallel to the physical world, in which users interact through digital avatars [30]. That is,
digital avatars are executable programs which own and control their identities for the user’s physical self [29, 30].
However, the digital identities (static strings or updatable chains) in the existing SSI schemes are all used as inputs to
a third-party executable program (mobile app, smart contrat, etc.) to achieve identity reading, storing and proving.
Thus, the existing SSI schemes cannot play well in metaverse and also weaken users’ self-sovereignty. In detail,
the dependence on a third-party executable program during the usage of SSI inevitably leads to the problems of
single point of failure and privacy leakage.

Inspired by the digital avatars in metaverse, and taking the above problems in the existing SSI schemes into ac-
count, we propose a new self-sovereign identity scheme with accountability. And the contributions of the proposed
scheme are summarized as follows:

(i) We propose a new self-sovereign identity scheme with accountability (NSSIA), in which executable code is
introduced to allow users to control their identities completely and the balance between privacy and account-
ability is achieved.

(ii) To get rid of the dependence on the third-party programs, one and only individual-speciﬁc executable code is
distributed to each user, where the user’s biometrics are embedded to enhance uniqueness and user control.
The hash of the executable code is used as an identiﬁer and each user can use his/her own local executable
code to store, read, and prove identities with network servers. For simplicity, the term ”digital avatar” in
metaverse is borrowed and reformed to ”digital avatar-i” to denote the executable code focusing on digital
identity.

(iii) In order to regulate malicious users fairly without violating privacy, a joint accountability mechanism is
introduced to decentralize the power of regulatory authorities and hide users’ information in reality through
shamir(t, n) threshold signature algorithm, while the impartial audit is further guaranteed by a consortium
blockchain.

(iv) We analyze the proposed scheme in detail in terms of security, SSI properties in generation phase and conduct

extensive experiments in the cost of computation, storage and blockchain gas.

The rest of this article is organized as follows. Section 2 introduces the related work of SSI schemes. In Section
3, the system model, security model and design goals are introduced and Section 4 describes our scheme in detail.
We analyze our proposed scheme in terms of security and performance in Section 5 and Section 6 respectively.
Finally, the conclusion and future work are given in Section 7.

2 Related Work

2.1 Junior SSI schemes

Junior SSI schemes [17–21], are ﬁrst proposed to allow users to control their own identities. To enable users
to have full control over their identities, Takemiya et al. [17] designed a security protocol for storing encrypted
personal information based on Hyperledger Iroha. The decentralized identiﬁer (DID) [31] was used as the unique
identiﬁer of each user, while entries that characterized a user’s identity were represented in the form of veriﬁable

2

claims [32]. For self-sovereignty, all the claims were stored locally on user’s phone in encrypted form. Different
from Takemiya et al. [17], smart contracts were used to represent the user’s identity in the paper of [18] and [19].
Concretely, they both designed a kind of smart contracts with addresses as identiﬁers, speciﬁcally for managing
identities. Once published, these contracts were owned by the corresponding users. And, the user’s identity infor-
mation was stored in IPFS [18] and stored in the user’s device in the form of a Merkle tree [19] for self-sovereignty.
However, both DIDs and smart contract addresses are machine-readable static strings, which are difﬁcult for users
to understand, leading to the dilemma of managing digital identities.

Then, a decentralized service architecture for self-sovereign social communication, proposed by Westerkamp
et al. [20], solves the above problem. In this scheme, the user’s identiﬁer was represented as a human-readable
name which was generated by the smart-contract based Ethereum Name Service (ENS). Besides, the user’s data
was stored in his/her own API server, and the Uniform Resource Identiﬁer (URI) of the server was stored and linked
to the human-readable name on the blockchain. However, such human-readable identiﬁer is still inherently static,
which are easily impersonated by malicious users during use.

Fortunately, this problem can be alleviated by a general provable claim model proposed in the paper of [21].
With reference to the structure of the blockchain, the self-sovereign identity was designed as a growing chain of
user’s claims. And, the user’s identity could be used only after the authentication of the veriﬁer on the existing
claims, thus alleviating the risk of identity being impersonated. But, due to the lack of necessary authentication
before identity registration, users can create as many identities as they want, which facilitates the implementation
of sybil attacks.

2.2 SSI schemes with Sybil-resistance

In order to let each user have one and only digital identity, SSI schemes with sybil-resistance [22–26] are
proposed. A commitment scheme combined with zk-SNARK were introduced in [22] to provide integrity and
privacy of user information simultaneously. In this scheme, to ensure integrity and avoid reuse, only after the user’s
information and the corresponding commitment were conﬁrmed by the CA, a certiﬁcate would be issued to the user.
And during usage, user’s data was encrypted by zk-SNARK to prevent privacy leakage. However, the veriﬁcation
of the commitment by the CA can only guarantee the integrity of the information from the user, not the authenticity,
which means the CA can be deceived by false information.

For the authenticity and reliability of user identity, biometric identiﬁcation is introduced into SSI schemes [23–
26]. In 2018, Othman et al. [25] designed a novel method for decentralized biometric-based self-sovereign identity.
In this scheme, the user’s identity was created based on the DID speciﬁcation. Also, in order to associate each user
with their own identity, biometrics (ﬁngerprint, face, voice, etc.) were encrypted and stored in the corresponding
DID document. But unfortunately, biometric information is only collected through the user’s mobile app, which
presents an opportunity for adversaries to commit identity fraud.

Then, in 2019, Hamer et al. [24] proposed a unique self-sovereign identity management scheme to deal with the
above problem. A user’s biometrics were authenticated by the trusted organization to make sure that the user did
have these biometrics. Besides, the collected biometrics were encrypted with a homomorphic signature algorithm
to ensure that a user could’t enroll twice in the system. But all the user’s behaviors can be linked to the same digital
identity, which leaks the user’s privacy.

A blockchain-based privacy protection uniﬁed identity authentication scheme is proposed in [23].

In this
scheme, the server would authenticate user information by online face veriﬁcation using photos from a central
database. In addition, a set of key derivation algorithms were designed to ensure the unlinkability between identity
attribute information. However, the way a central database stores user information weakens users’ control over
their identities.

In 2021, Bandara et al.

[26] proposed a blockchain and self-sovereign identity empowered digital identity
platform. For full control over the data, the information required for registration (name, address, photo, etc.)
submitted by the user was stored locally on the mobile device. And only with the user’s consent, these information
would be sent to the service provider (SP). Additionally, veriﬁcation of information is achieved by comparison with
physical documents, eliminating the need for SPs to store information.

In a word, strict identity authentication, especially the introduction of biometrics, ensures that each user has one
and only digital identity, effectively resisting sybil attacks. However, none of these schemes design accountability
mechanisms to regulate malicious users who disrupt the order of the network.

3

2.3 SSI schemes with Accountability

For the purpose of maintaining order in cyberspace, SSI schemes with accountability [27, 28] are proposed. In
2021, Stokkink et al. [27] designed a truly self-sovereign identity system based on Pedersen commitments, where
the digital identities were implemented as data structures that held a list of credentials. And, for self-sovereignty,
these data structures were stored on the users’ devices. In terms of accountability, credential veriﬁers were required
to keep audit logs, which were actually composed of credentials presented by users. Then, malicious users could
be identiﬁed by a single regulatory authority through analyzing audit logs and comparing them with the personal
information in a central registry. But, several problems such as inadequate regulation and injustice may arise due
to the reliance on a single regulatory authority.

Also in 2021, Maram et al. [28] presented a decentralized identity management with legacy compatibility,
sybil-resistance and accountability. Instead of an additional credential issuer, all credentials characterizing the
user’s identity in this scheme were imported from existing web service providers. And a deduplication protocol
based on secure multi-party computation (MPC) was designed to prevent the reuse of these credentials. Besides,
in order to address the drawbacks of the single regulatory authority, an MPC-based fuzzy matching method was
proposed, which can ﬁnd the digital identities of the corresponding malicious users according to the sanctions lists.
However, legacy compatibility does not change the status quo of data stored by existing web service providers,
which remains out of the user’s control. In addition, both the central registry and the sanctions lists introduced in
the above schemes to regulate malicious behavior inevitably sacriﬁce users privacy.

3 Models and Design Goals

3.1 System model

Our system model consists of seven entities, as Figure 1 shows, a natural person (NP), a digital avatar-i (DA),
two blockchains: an identity information chain (IIC), a digital avatar-i behavior chain (DABC) and three groups: an
information collection and veriﬁcation group (ICVG), a digital avatar-i generation group (DAGG), and a regulatory
authority group (RAG).

• NP, Natural Person, refers to a person living in the physical world. He/She can digitize himself/herself

through the ICVG and apply to the DAGG for a DA.

• DA, Digital Avatar-i, is an individual-speciﬁc executable program focusing on the identity dimension of
the digital avatar, which stands for a living person to interact with others in cyberspce, and has one-to-one
relationship with NP.

• ICVG, Information Collection and Veriﬁcation Group, validates that the requestor is one and only breathing
person in the physical world and provides digitalizing service for him/her. It contains two types of entities,
namely metadata veriﬁer (MV) and biometric collector (BC). MV proves the requestor’s existence in physical
space through metadata, such as name, identity number and address, etc. BC collects two types of distinct
biometric data, where one is as a permanent proof and the other is for activating the DA.

• IIC, Identity Information Chain, is a consortium blockchain. It is mainly responsible for recording the proof
of physical identity information (metadata and biometric data), the hash of DA, and making sure each NP
has only one proof.

• DAGG, Digital Avatar-i Generation Group, generates a unique DA for each NP. It contains two types of
entities, namely digital avatar-i generator (DAG) and secure storages (SSs). At ﬁrst, DAG veriﬁes the identity
of the applicant with the data in the IIC, and then generates the sole DA for him/her. SSs, which contain
SS1 · · · SSn, use shamir(t, n) threshold algorithm to safely store the metadata of NP and the hash of DA.

• DABC, Digital Avatar-i Behavior Chain, is an infrastructure which is composed of multiple blockchains, sup-
porting all kinds of decentralized applications (Dapps). These Dapps provide services for DAs in cyberspace
and the DABC keeps their historical records for accountability.

4

Regulatory authority 
group(RAG)

(cid:317)  Find

RA1

RA2

RAn2

(cid:312) Upload

(cid:314) Upload

(cid:316)  Inquire

Information collection and 
verification group(ICVG)

Identity Information Chain
(IIC)

Digital avatar-i generation 
group(DAGG)

MV

BC

Face-to-Face 

On-Line 

Internal 

(cid:311) Digitize

(cid:313) Apply

Natural Person(NP)

DAG

Map

SS1

SSn1

(cid:314) Generate

Digital Avatar-i(DA)
Digital Avatar-i(DA)

Entity logical relationship

(cid:315) Interact

(cid:318)  Regulate

Digital Avatar-i Behavior Chains
(DABC)

Figure 1: System model

5

• RAG, Regulatory Authority Group, is responsible for regulating NP by monitoring the DA’s activities in the
DABC. And it is composed of n regulatory authorities (RA1 · · · RAn), where at least three of them can hold
suspicious users accountable.

In order to securely and privately take part in various activities such as work, study and entertainment in cy-
berspace, especially the metaverse, a NP needs to map himself/herself to one DA. In detail, there are four steps to
achieve the mapping. Firstly, the NP needs to digitize himself/herself through the ICVG, where MV veriﬁes the
descriptive metadata of the NP and BC collects the NP’s biometric data. Secondly, the ICVG uploads the proof
information to the IIC and replies the NP with a certiﬁcate. Thirdly, the NP applies to the DAGG for a DA with
the certiﬁcate. At last, the DAGG veriﬁes the authenticity of the NP by checking whether the live biometric data
matches the proof in the IIC. If the veriﬁcation is passed, the DAGG generates the DA and uploads the hash of
the DA to the IIC. Afterwards, the NP uses the corresponding DA to live in the cyberspace without a third-party
program.

It is worth noting that, once there is a malicious DA, the RAG can map him/her to the corresponding NP throuth
inquiring the IIC and ﬁnding the metadata in DAGG. For constructing a safe and orderly cyberspace, a DA is
supposed to interact with the Dapps based on DABC. In this way, the RAG can regulate a malicious NP through
monitoring the DA’s historical and future behaviors.

3.2 Security model

In NSSIA, we have the following security assumptions.

• An adversary can monitor, intercept, modify and insert the messages into the public channel [33]. And he/she
can breach no more than half of the entities in each group of ICVG, DAGG and RAG within a certain period
of time.

• A NP and a DA are considered as malicious entities. A NP would submit false information or fraudulently
use anyone’s information, and a DA can be modiﬁed or illegally used by an adversary in the cyberspace.

• Entities in the ICVG, DAGG and RAG are regarded as semi-honest. They will perform the protocol strictly

but are curious about the information.

• The DABC is a semi-honest entity. It is a public chain which is secured by consensus algorithms, and the
miners perform the protocol strictly but are curious about the information. The IIC is a trusted consortium
chain which is jointly managed by the ICVG, DAGG and RAG.

• We assume that the standard cryptographic algorithm used in our scheme is secure and unbreakable.

3.3 Design Goals

According to the aforementioned system model and security model, the design goals of our scheme are as

follows.

(i) User friendly: A user (NP) accesses a service in cyberspace with a digital avatar-i (DA) in a convenient way

and the user owns and controls it.

(ii) One-to-one: In order to build an orderly cyberspace, a user (NP) has one and only digital avatar-i (DA). And

all the behaviors of the DA belong to the only one NP.

(iii) Linkability with condition: For the security of cyberspace and the privacy of a user (NP), the identity mapping
(the NP and the DA) is encrypted and stored in a distributed way (different piece of it in each SSi). Only
three or more of the RAs can jointly decrypt it and recover the detail of identity.

6

4 Proposed NSSIA

The NSSIA generates a unique digital avatar-i for a user to ensure his/her conditional identity privacy when
interacting with each others in cyberspace, especially the metaverse. Concretely, the NSSIA is mainly divided into
ﬁve phases. The ﬁrst phase initializes the entities in the IIC, ICVG, DAGG and RAG to generate their keys. The
second phase lets a NP digitize himself/herself through the ICVG, where the ICVG veriﬁes the authenticity of NP’s
metadata, collects NP’s biometric data and writes the proof information to the IIC, as shown in steps ➀-➁ of the
Figure 1. And in the third phase, the NP applies to the DAGG for a DA in which the DAGG checks the metadata of
the NP, generates a DA and records the DA generation transaction to the IIC, as shown in steps ➂-➃ of the Figure 1.
The NP can use his/her own DA to interact with the Dapps built on DABC in the fourth phase, as shown in steps ➄
of the Figure 1. Lastly, the RAG regulates a malicious NP with the mapping DA’s behaviors in the DABC and the
data in the IIC and the DAGG, as shown in steps ➅-➇ of the Figure 1. To elaborate the NSSIA clearly, we give the
notations used in our scheme in Table 1.

Table 1: Notations used in our scheme

Notations Description

M K
P Ke
SKe
SubKe
ESubKe

n1, t1

n2, t2

Master Key
Public key of entity e
Secret key of entity e
Subkey of entity e
Encrypted subkey of entity e
The number of secure storages is n1 and
the corresponding threshold is t1
The number of regulatory authorities is
n2 and the corresponding threshold is t2
XOR operation of a and b
Hash operation on •
Use b to encrypt a
Use b to decrypt a

a ⊕ b
H(•)
En(a, b)
De(a, b)
Sig(a, b) Use b to sign a
V er(a, b) Use b to verify a
SecInf o

Encrypted identity information

4.1 Initialization

The IIC performs initialization to generate the public parameters, the master key (MK) and the corresponding

subkeys (SubKs). In addtion, the entities in RAG, DAGG and ICVG generate their public and private keys.

4.1.1 IIC Initialization

The IIC performs initialization to generate the public parameters, the M K and the SubKe, where the SubKe
is the subkey of the entity e. In detail, it ﬁrstly selects a large prime p, an elliptic curve Ep(a, b) and a base point
G with order n under the ﬁnite ﬁeld Fp. Then, it publishes the public parameters P = {p, Ep(a, b), G, n} to the
genesis block. Afterwards, it randomly selects a 128-bit AES key as the M K. Lastly, the IIC uses the shamir
(t,n) threshold secret sharing algorithm [34] to generate the SubKe for each entities of DAGG and RAG. And we
assume that the number of SSs and RAs is n1 and n2, and the corresponding thresholds are t1 and t2. Here are the
details below.

The IIC ﬁrstly chooses two polynomials of degree t1 − 1 and t2 − 1 shown as Equations (1) and (2), where

a1, ..., at1−1, b1, ..., bt2−1 are random numbers, and N 1, N 2 are bigger than each coefﬁcient.

FSS(x) = M K + a1x + · · · + at1−1xt1−1mod(N 1)

(1)

7

FRA(x) = M K + b1x + · · · + bt2−1xt2−1mod(N 2)

(2)

Next, the IIC chooses random numbers xi, i = 1, 2, ..., n1 + n2, and substitutes the xi into Equations (1) and

(2) to calculate the n1 SubKSSs and n2 SubKRAs (nk = 2 × tk − 1, k = 1, 2).

4.1.2 SS and RA Initialization

The SS and RA use the P published by IIC to generate their own public and private keys, referred to as
P KSS/SKSS and P KRA/SKRA, and publish the public keys. Then, the encrypted subkeys with P KSS and
P KRA are obtained from the IIC by the SS and RA. Next, they decrypt the encrypted subkeys to recover the
SubKSS and SubKRA.

4.1.3 MV, BC and DAG Initialization

MV, BC and DAG use the P published by IIC to generate their own public and private keys, referred to as

P KMV /SKMV , P KBC/SKBC and P KDAG/SKDAG.

4.2 Digitization

To prepare for the generation of a DA, the NP sends the metadata to the ICVG for digitizing himself/herself.
Here, the MV veriﬁes the metadata and records the proof of metadata to the IIC. While the BC collects the NP’s
biometric data, writes the proof of the biometric data to the IIC and sends the NP a digitization credential. The
whole process is shown in Figure 2.

NP

MV

BC
PKBC, SKBC, PKDAG

IIC

(cid:346) MDNP 

(cid:347) Verify  MDNP, 
     Calculate  HM = H(MDNP)

(cid:348) TNum

(cid:349) {MDNP ‖ TNum}

Record HM

(cid:350) Calculate   H' M = H(MDNP)

Obtain HM

Validate   H(cid:10)M  = HM

(cid:351) Collect   {iris, face}
      Calculate   HI = H(iris)

Record HI

(cid:352) Calculate 
     M1= Sig(En((faceꚚHI), PKDAG), SKBC)

M1

Figure 2: The ﬂow chart of digitizing a NP

STEP D1. A NP presents the certiﬁcates, such as ID card, passport, etc., and provides the metadata (M DN P ,

including name, id number, address and gender) to the MV face to face, as shown in step ➀.

8

NP

DAG
PKDAG, SKDAG, PKBC

(cid:346) PIP = {MDNP ‖ TNum ‖ M1}

SSi
PKDAG

IIC

(cid:347) Calculate   H" M=H(MDNP),                        
                        M2=De(Ver(M1,PKBC),SKDAG)  

Obtain {HM ‖ HI}

Validate      HM = H(cid:5) M, 
Calculate     M3 = M2ꚚHI, 
Verify   M3
(cid:348) Generate   DA, 
     Calculate   DAI = H(DA)

Request SubKSSi

ESubKSSi

(cid:349)(cid:3)Calculate   
      ESubKSSi = En(SubKSSi, PKDAG)

(cid:350) Restore   MK, 
     Calculate  SecInfo=En((MDNPꚛDAI), MK), 
     Convert the SecInfo into n1 IRI groups 

n1 {IRI ‖ SI}s

(cid:351) Record {DAI ‖ SI}

(cid:352) Calculate   S = Sig(DA, SKDAG) 

{DA ‖ S}

Figure 3: The ﬂow chart of generating a DA

STEP D2. The MV veriﬁes the authenticity of the M DN P with the certiﬁcates. If it is conﬁrmed, the MV cal-
culates the proof HM = H(M DN P ) and sends a metadata veriﬁcation transaction (TM, as shown in the Equation
(3)) to the IIC, as shown in step ➁.

T M = (T id, T in[P KMV , φ, φ], T out[P KBC, HM , ω])

(3)

In the Equation (3), according to the paper [35], Tid represents the transaction number of the TM. The input
array Tin[] consists of three parts, the input address, the previous transaction and the input script. And the P KMV ,
the input address, is the initiator’s public key, since TM is the original transaction, both the last transaction of the
TM and the input script are denoted to the Φ. The output array Tout[] is composed of three parts, where the P KBC
is the accepter’s address, HM is the data to be recorded in the IIC and ω is an out-script used to signature the TM.

STEP D3. The MV sends the transaction number (TNum) of TM to the NP, as shown in step ➂.
STEP D4. The NP sends the M DN P , TNum to the BC face to face for authentication, as shown in step ➃.
STEP D5. The BC calculates H ′

M = H(M DN P ), uses TNum to ﬁnd the HM of TM recorded in the IIC and

checks whether H ′

M = HM is satisﬁed. If not, the BC aborts and it is shown in step ➄.

STEP D6. The BC collects two kinds of biological characteristics, where the one is as a permanent proof
of NP’s existence in cyberspace and the other one is used to activating the DA. Speciﬁcally, the permanent one
should be unbreakable and needs not to be collected frequently, therefore, we choose the iris data. While for
frequently using the DA to access network services, an easy-to-collect face biometric is introduced. And then, the
BC calculates the HI = H(iris) and sends a iris veriﬁcation transaction (TI, as shown in (4)) to the IIC, as shown
in step ➅.

T I = (T id, T in[P KBC, T M, ϕ], T out[P KDAG, HI , ω])

(4)

In the Equation (4), the Tid is the transaction number of the TI, the P KBC is the creater’s address of the TI,
the TM is the previous transaction, the P KDAG is the accepter’s address of the TI, and the HI is the data to be
recorded in the IIC.

STEP D7. As the Equation (5) shows, the BC encrypts the face data with the P KDAG and then signatures it

9

with the SKBC to generate the M 1.

M 1 = Sig(En((f ace ⊕ HI ), P KDAG), SKBC)

(5)

Finally, the BC sends M 1 to the NP, as shown in step ➆.

4.3 Generation

After the digitization, the DAGG can generate a DA for the NP and the process consists of seven steps. At
ﬁrst, the NP applies to the DAGG for a DA. Secondly, the DAG veriﬁes the authenticity of NP’s identity with the
proof information in the IIC. Thirdly, the DAG generates a DA and requests the SSs’ subkeys. Then, the SSs send
the encrypted subkeys to the DAG. Next, the DAG restores the M K to generate the SecInf o, and splits it into
multiple backup information. Afterwards, the DAG records the proof of DA in the IIC, and lastly sends the DA to
the NP, as shown in Figure 3.

STEP G1. The NP sends the physical identity proof P IP = {M DN P , T N um, M 1} to the DAG, as shown in

step ➀.

STEP G2. The DAG calculates H ′′

M = H(M DN P ) and M2 by Equation (6).
M 2 = De(V er(M 1, P KBC), SKDAG)

(6)

Afterwards, the DAG obtains the HM and the HI with TNum from the IIC and checks whether H ′′

M = HM is
met. At last, the DAG calculates M 3 = M 2 ⊕ HI , and veriﬁes the living face biometric of NP with the M 3, as
shown in step ➁.

STEP G3. If the NP’s identity is conﬁrmed, according to the Algorithm 1, the DAG selects corresponding code
modules (dynamic veriﬁcation, ﬁle transfer, etc.) from the code library to get the DA with the digital avatar-i seed
(DAS) which is produced from M 3 by the algorithm in the paper of [36]. The DA is divided into k modules and
the selected code modules are combined together in order. Then, the DAG calculates the identiﬁer DAI = H(DA)
and requests all SSs to send their respective SubKSS, as shown in step ➂.

Algorithm 1 Digital Avatar-i Generation

Input:

The digital avatar-i seed DAS
The code module template CM Ti, 1 ≤ i ≤ k

Output:

The digital avatar-i DA
1: len = strlen(DAS)/k;
2: DA = 0, m = 0, n = len;
3: for i = 0; i ≤ k − 1; i + + do

4:

5:

str = DAS.substring(m + len × i, n + len × i);
a[i] = Decimal(str) mod (num[i]);
//Decimal is a function that converts a string to
//a decimal
//num[i] is the number of code module templates
//available in CM Ti

6: DA = Combine(DA, CM Ti(a[i]));

//Combine is a function that splices code
//modules in order.

7: end for
8: return DA;

STEP G4. Each SSi encrypts subkey to get ESubKSSi by the Equation (7) and sends it to the DAG, as shown

in step ➃.

ESubKSSi = En(SubKSSi, P KDAG)

(7)

10

STEP G5. The DAG calculates at least t1 − 1 SubKSSi = De(ESubKSSi, SKDAG), i = 1, 2, ..., t1 − 1 and
constructs the Lagrangian interpolation formula (as shown in the Equation (8)) with these SubKSSis to restore the
M K = f ′(0).

f ′(x) =

t1

t1

yi

X
i=1

Y
j=1,j6=i

(x − xj)
xi − xj

(8)

Afterwards, the DAG generates the SecInf o = En((M DN P ⊕DAI), M K) and expands SecInfo to n×t1 ×b

bytes by ﬁlling high bits with zero. The DAG constructs n polynomials, as showed in the Equation (9).

F1(x) = m0 + m1x + · · · + mt1−1xt1−1mod(N )
F2(x) = mt1 + mt1+1x + · · · + m2t1−1xt1−1mod(N )
...
Fn(x) = m(n−1)t1 + m(n−1)t1+1x + · · · + mnt1−1xt1−1
mod(N )

(9)






In the Equation (9), the SecInfo is divided into n × t1 coefﬁcients in order and each coefﬁcient is b bytes. The

N is a prime number bigger than any coefﬁcient mi, and the length of N is b + 1 bytes.

The DAG substitutes n1 xs into each polynomial in the Equation (9) to calculate n × n1 points (xi, yij), i =
1, 2, ...n1, j = 1, 2, ..., n (since xi performs multiple exponentiation operations, the length of xi is set to one byte to
reduce computational overhead, while the length of yij is set to ﬁve bytes to avoid collisions between these points.
If the lengths of xi and yij are too short, the high bits are ﬁlled with zero). Further, the DAG divides all the points
into n1 groups and n points in each group come from the different F (x)s. It is worth mentioning that the xi in
these n points are the same, and the n points (xi, yij) are combined to form a set of identity restoration information
(IRI), which is as shown in the Figure 4. At last, the DAG transmits n1 sets of IRI and storage index (SI) to all the
SSs, as shown in step ➄.

The total length is 5n+1 bytes, i = 1, 2, … , n1

IRIi : 

xi

yi1

yi2

……

yin

Figure 4: The format of the IRIi

STEP G6. If the SSi receives the IRI and SI, he/she sends a response to the DAG. When DAG conﬁrms that
more than half of SSs have received IRI and SI, he/she writes a DA generation transaction (TDA, as shown in (10))
in the IIC, as shown in step ➅.

T DA = (T id, T in[P KDAG, T I, ϕ], T out[P KDAG,
(DAI k SI), ω])

(10)

In the Equation (10), the Tid is the transaction number of the TDA, the TI is the previous transaction, the
P KDAG is the creater and the accepters’ address of the TDA, and the (DAI k SI) is the data to be recorded in the
IIC.

STEP G7. The DAG calculates the DA’s proof S = Sig(DA, SKDAG) and sends it with the DA to the NP, as

shown in step ➆.

4.4 Interaction

After receiving the DA, the NP can access various services provided by Dapps built on DABC through it. At
ﬁrst, the NP activates the DA through live face recognition. And then, the DAI or a random string can be selected
by the activated DA as the identiﬁer for the NP to participate in activities in cyberspace. It is worth mentioning that
all behaviors of the NP accessing network services will be recorded in the DABC for future audit.

11

In a word, the main work of this phase is to use DA for authentication and authorization, which requires
unlinkable identity, informed consent and the right to be forgotten, etc. However, limited by space, details such as
the protocol process, algorithms and data format will be given in our future work.

4.5 Accountability

When a malicious behavior of a DA occurs, the RAG can discover the mapping NP by inquiring the IIC and
ﬁnding the metadata of the NP in the DAGG with the joint participation of multiple RAs. Then, the RAG can
regulate all the historical behaviors of the malicious NP, as shown in Figure 5.

SSs

IIC

RA
PKRA, SKRA

DABC

NP

(cid:346) Monitor the behavior of all DAs

(cid:347)(cid:3)Find a malicious DA

Obtain SI 

(cid:348)(cid:3)Obtain more than half of the IRI 

Restore   SecInfo

(cid:349)  Restore    MK, 
      Calculate  MDNPꚚDAI  = De(SecInfo, MK),                   
                        MD(cid:10)NP = MDNPꚚDAIꚚ DAI

Regulate the mapping NP

Figure 5: The ﬂow chart of regulating the NP

STEP S1. All the RAs are monitoring the DAs’ behavior in DABCs, as shown in step ➀.
STEP S2. When the RAi ﬁnds a suspicious behavior of a DA, he/she can start the accountability mechanism.
Firstly, RAi inquires SI from the IIC with DAI and writes a audit transaction (TA, as shown in (11)) in the IIC, as
shown in step ➁.

T A = (T id, T in[P KRAi, T A, φ], T out[P KRAi,
(timestamp k DAI), ω])

(11)

In the Equation (11), the Tid is the transaction number of the TA, the TA in the Tin[] is the previous audit
transaction, the P KRAi is the creater and the accepters’ address of this TA, and the (timestamp k DAI) is the
data to be recorded in the IIC.

STEP S3. Then, the RAi ﬁnds at least t1 IRIs stored in SSs with the SI. And all the obtained IRIs are processed
as follows: ➀The RAi decomposes each IRIj , j = 1, 2, ..., t1 into n points, where the structure of the IRIj is
shown in the Figure 4 and the decomposed point set is shown in the Equation (12);

(x1, y1,1)
(x2, y2,1)
...
(xt1 , yt1,1)

(x1, y1,2)
(x2, y2,2)
...
(xt1 , yt1,2)

· · ·
· · ·
. . .
· · ·

(x1, y1,n)
(x2, y2,n)
...
(xt1 , yt1,n)





➁Then substituting the t1 points (x1, y1,1), (x2, y2,1),





..., (xt1 , yt1,1) into the Lagrangian interpolation formula (13) to obtain the polynomial F1(x);

F ′(x) =

t1

t1

yi

X
i=1

Y
j=1,j6=i

(x − xj)
xi − xj

12

(12)

(13)

➂Similar to the step ➁, the RAi obtains the polynomials F2(x), · · · , Fn(x).
After the n polynomials are obtained, the SecInf o is restored by splicing the coefﬁcients of these polynomials

in order, as shown in step ➂.

STEP S4. The RAi initializes an audit request to all other RAjs. Each RAj encrypts his/her SubKRAj by the

Equation (14) and sends the ESubKRAj to the RAi.

ESubKRAj = En(SubKRAj , P KRAi)
(j = 1, 2, ..., n2; j 6= i)

(14)

When more than t2 RAjs respond, the RAi decrypts the ESubKeyRA one by one using the Equation (15).

SubKRAj = De(ESubKRAj , SKRAi)
(j = 1, 2, ..., t2; j 6= i)

(15)

Then, the RAi constructs the Lagrangian interpolation formula with the t2 SubKRAs, as shown in the Equation

(16), to calculate the M K = f ′(0).

f ′(x) =

⌊t2⌋

⌊t2⌋

yi

X
i=1

Y
j=1,j6=i

(x − xj)
xi − xj

(16)

After that, the RAi decrypts the SecInf o to get the (M DN P ⊕ DAI) = De(SecInf o, M K), and gets
N P = (M DN P ⊕ DAI) ⊕ DAI. So far, the RAi can discover the malicious NP and regulate him/her through

M D′
the historical behaviors in the DABC, as shown in step ➃.

5 Security analysis

In this section, we discuss the security of the proposed scheme.

5.1 Conditional anonymity

In this scheme, the metadata of a NP (M DN P ) is hidden in the SecInf o by the DAI and M K, and the other
entities except RA cannot recover it without the DAI and M K. The DAI is recorded on the IIC, while the shamir
(t, n) threshold algorithm protects the M K. Therefore, the scheme realizes the anonymity of entities other than the
RA. On the other hand, we allow at least t RAs to restore the M K for revealing the M DN P by the Lagrangian
interpolation formula. In short, the conditional anonymity is achieved in our scheme.

5.2 Anti-sybil attack

In this scheme, each NP needs to digitize himself/herself through the ICVG before applying for a DA, where
the authenticity of the NP’s M DN P is veriﬁed by the MV with NP’s certiﬁcates and the NP’s biometric data is
collected by the BC as a proof of unique identity. In addtion, the hash of the M DN P and biometric data (iris) are
permanently recorded on the IIC. In this way, it can be ensured that each NP has one and only DA and the sybil
attack is avoided.

5.3 Tamper-proof

During the digitization phase, the NP is required to provided M DN P face-to-face, therefore, the tampered
M DN P submitted by the adversary cannot be veriﬁed by the MV with the NP’s certiﬁcates. And the consortium
blockchain records the proof of M DN P and biometric data, no one can easily erase the NP’s information. In
addition, the DAG calculates the signature S = Sig(DA, SKDAG) to prevent the adversary to tamper with the
DA.

13

5.4 Non-repudiation

For each DA, the RAG can ﬁnd the corresponding SecInf o through the data in the IIC and SSs. Then, the RAG
can calculate the M K with the participation of multiple RAs, and get M DN P ⊕ DAI = De(SecInf o, M K).
Using the known DAI in the IIC, the RAG can obtain the M DN P = M DN P ⊕ DAI ⊕ DAI, and track the
mapping NP with it. That is, a NP cannot deny his/her malicious historical behavior.

5.5 Impersonation-resistance

When accessing a DA, the NP’s biometric data needs to be veriﬁed by the DA in advance. In addition, the DA
includes a dynamic veriﬁcation module which will issue dynamic veriﬁcation requests to the NP from time to time.
Once the NP fails to pass the veriﬁcation, the DA will be locked. Therefore, even if an adversary obtains a DA that
does not belong to him/her, he/she cannot use it to participate in network activities.

5.6 Data security

The metadata of a NP (M DN P ) and the hash of a DA (DAI) are ﬁrstly encrypted as the SecInf o, then divided
into n × t1 parts, and ﬁnally converted into n × n1 points by shamir (t,n) threshold algorithm. In this way, the
cost of obtaining a NP’s information by an adversary is greatly increased. Further, the information transmitted
between different entities, such as subkeys, are protected by asymmetric encryption algorithm. Therefore, the
scheme guarantees the security of the data.

6 Performance analysis

This section analyzes the cost of our proposed NSSIA, and compares it with the above schemes [17, 22, 23, 26,

28] in terms of the SSI property in identity generation, computation cost, storage cost, and blockchain Gas cost.

6.1 Property analysis in identity generation

Ten principles are proposed by Christopher Allen [7] to deﬁne an SSI model, which are Existence, Control,
Access, Transparency, Persistence, Portability, Interoperability, Consent, Minimalization and Protection. It can be
said that Allen’s insights on SSI lays the foundation for the research of later generations.

As the shortcomings of the centralized identity model have been revealed in recent years, more and more
scholars have invested in the research of SSI, and their work can be seen from literatures [1, 37].
It is worth
mentioning that before this article is written, Ferdous et al. [37] had introduced in detail the insights of various
scholars on SSI. At the same time, they put forward their own views on the properties of SSI. They divided self-
sovereign identity into ﬁve categories, with a total of seventeen properties. M¨uhle et al. [1] analyzed the work of
Christopher Allen, and then studied four basic components for having a deeper understanding of the concept of
SSI.

As the identity generation is the critical step for users to enter cyberspace, we focus on analyzing the properties

that SSI needs to follow at this stage, as shown in Figure 6. And these properties are depicted next.

• Existence. Digital identities should be strictly veriﬁed before registration to ensure that each digital identity

has a corresponding physical entity.

• Ownership. Digital identities can only be held and controlled by users.

• Protection. The registration of digital identities should pay attention to protecting user privacy and avoiding
the identity link between the physical world and the cyberspace. At the same time, the design of SSI model
should prevent fraudulent use of identity by others.

• Persistence. The digital identity should exist forever if the user does not take the initiative to revoke.

• Portability. When the user’s device is replaced or the system’s infrastructure is updated, the user’s data can

be easily transferred to the new device.

14

Generation

Existence

Ownership

Protection

Persistence

Portability

Standard

Figure 6: Taxonomy of the Identity Generation

• Standard. The SSI model should comply with the laws and regulations of various countries and international

standards, such as GDPR, DID, etc.

Next, we compare our scheme with the previously mentioned schemes on these properties, as shown in Table 2.

Table 2: Property comparison

Schemes

Existence

Ownership

Protection

Persistence

Portability

Standard

[17]
[22]
[23]
[26]
[28]
ours

N
N
Y
Y
P
Y

Y
Y
P
Y
Y
Y

P
P
Y
P
P
Y

Y
Y

Y
Y
Y

P

P

Y

P
P
N
P
P
Y

a The ”Y” and ”N” symbols respectively indicate that a certain property is satisﬁed or not in the corresponding scheme. The
” symbol shows that there is no obvious information about

”P” symbol indicates that part of the property is satisﬁed. The ”
whether the property is satisﬁed or not.

From Table 2, the properties of ”Ownership” and ”Persistence” are satisﬁed in [17], and the part of ”Protec-
tion”, ”Portability” and ”Standard” properties are met, however, the ”Existence” property is unsatisﬁed. In [22],
”Ownership” and ”Persistence” properties, as well as the part of ”Protection” and ”Standard” properties are ful-
ﬁlled, while the ”Existence” property is unsatisﬁed and the rest is uncertain. In [23], ”Existence” and ”Protection”
properties as well as the part of ”Ownership” property is satisﬁed, but the ”Standard” property is unsatisﬁed and
the others is doubtful. The properties of ”Existence”, ”Ownership” and ”Persistence” properties are satisﬁed in
[26], and the part of ”Protection”, ”Portability” and ”Standard” is met. Maram et al. [28] fulﬁlls the properties of
”Ownership” and ”Persistence”, as well as the part of ”Existence”, ”Protection” and ”Standard” properties, but the
rest is doubtful. Compared with them, these properties are all realized in our scheme.

6.2 Computation Cost

6.2.1 The NSSIA

Our scheme includes ﬁve phases, namely initialization, digitization, generation, interaction and accountability.
Since the initialization phase is executed only once and the interaction phase is not the point, we do not evaluate
these two phase, and we mainly focus on the other three phases. Our scheme is run on a PC with windows 10,
Intel(R) Core(TM) i5-1035G1 CPU @ 1.00GHz and RAM 16G. We use Java 8.0 and Python 3.9 to evaluate the
computation cost, where we choose the SHA-1 algorithm, the AES-128 algorithm, and the Secp256k1 elliptic
curve. In order to balance security and computational cost, the n1 and n2 which is the number of SSs and RAs

15

respectively are set to 5 in this simulation, and the corresponding t1 and t2 are 3. In addition, the length of the
SubKe is 17 B. The M DN P , DA, n and b are 256 B, 1 KB, 20 and 5 B separately. That is, the length of SecInf o
is t1 × n × b = 300 B. According to the data in the paper [38], the length of iris and face is 25 KB and 30 KB
respectively.

To elaborate the computation cost clearly, a series of computational notations are deﬁned:

• TH1 denotes the SHA-1 operation. TH11 , TH12 , and TH13 are the computation cost of performing the SHA-1
operation when the parameter sizes are 256 B, 1 KB, and 25 KB, respectively, and they are 0.0169 ms, 0.0353
ms, 0.0748 ms.

• TS1 indicates the AES-128 encryption/ decryption algorithm and the computation cost is 0.4186 ms when

the parameter size is 256 B.

• TAE represents the ECC encryption algorithm. TAE1 and TAE2 are the computation cost of performing the
ECC encryption algorithm when the parameter sizes are 17 B and 30 KB, respectively, and they are 0.0015
ms, 0.0024 ms.

• TAD expresses the ECC decryption algorithm. TAD1 and TAD2 are the computation cost of performing the
ECC description algorithm when the parameter sizes are 17 B and 30 KB, respectively, and they are 0.034
ms, 0.0401 ms.

• TSig serves as the ECDSA signature algorithm. TSig1 and TSig2 are the computation cost of performing the
ECDSA signature algorithm when the parameter sizes are 1 KB and 30 KB, respectively, and they are 0.0014
ms, 0.0283 ms.

• TV er is the ECDSA veriﬁcation algorithm. TV er1 and TV er2 are the computation cost of performing the
ECDSA veriﬁcation algorithm when the parameter sizes are 1 KB and 30 KB, respectively, and they are
0.0007 ms, 0.001 ms.

• TL is the Lagrangian interpolation algorithm and the computation cost is 0.0101 ms when the threshold value

is t = 3.

Since the time cost of XOR operation, split operation and splicing operation is negligible, it is not taken into

consideration.

The computation cost of different phases in our scheme is shown in the Table 3.

Table 3: Computation cost on different phases

Phases

Computation Cost (ms)

Digitization

Generation

Accountability

2TH11 + TH13 + TSig2
+TAE2 = 0.1393

TH11 + TH12 + 2TAE1
+TV er2 + TSig1 + TL + TS1
+2TAD1 + TAD2 = 0.5944

2TAE1 + 2TAD1 + 21TL
+TS1 = 0.7017

In the Table 3, three SHA-1 operations, one ECDSA signature algorithm and one ECC encryption algorithm
are performed in the Digitization phase and the time cost is 2TH11 + TH13 + TSig2 + TAE2 = 0.1393 ms. Two
SHA-1 operations, two ECC encryption algorithms, one ECDSA veriﬁcation algorithm, one ECDSA signature
algorithm, one Lagrangian interpolation algorithm, one AES encryption and three ECC decryption algorithms are
performed in the Generation phase and the time cost is TH11 + TH12 + 2TAE1 + TV er + TSig1 + TL + TS1 +
2TAD1 + TAD2 = 0.5944 ms. The Accountability phase consists of two ECC encryption algorithms, two ECC
decryption algorithms, twenty-one Lagrangian interpolation algorithms and one AES decryption algorithm and
the time cost is 2TAE1 + 2TAD1 + 21TL + TS1 = 0.7017 ms. To generate a unique DA for each NP, the total
0.1393 + 0.5944 + 0.7017 = 1.4354 ms is used.

16

6.2.2 Computation cost comparison

We compare with other schemes in terms of the generation phase and the accountability phase, as shown in

Table 4.

Table 4: Computation cost comparison

Scheme

Generation Cost (ms)

Accountability Cost (ms)

[17]

[22]

[23]

[26]

[28]

Ours

TP + TH2 + TS21 + TS22 = 40.5941

TH11 + TSig1 + TZ = 18217.9183

3TAE2 + 3TSig1 + 3TV er1 + 2TS1 + 3TAD2 = 0.971

TB + 2TR = 6.0892

TO + TZKP = 2350

TM = 1501540

TH11 + TH12 + 2TAE1 + TL + TSig1 + TV er2 + 2TAD1
+TS1 + TAD2 = 0.5944

2TAE1 + 2TAD1 + 21TL + TS1 = 0.7017

a TP is the PBKDF2 algorithm and the computation cost is 40.18 ms when the parameter size is 8 B and the number of rounds is 61337;
TH2 indicates the SHA-256 operation, and the computation cost is 0.035 ms when the parameter size is 32 B; TS2 denotes the AES-256
encryption/ decryption algorithm. TS21 and TS22 are the computation cost of performing the AES-256 encryption/ decryption algorithm
when the parameter sizes are 64 B and 128 B, respectively, and they are 0.187 ms, 0.1921 ms.

b TZ denotes the time complexity of zero-knowledge proof. According to the deﬁnition of identity information in our scheme, we refer to the

performance simulation of [22], and the value of TZ is 18271.9 ms.

c TB serves as the base58 encoding algorithm and the computation cost is 0.086 ms when the parameter size is 256 B; TR expresses the RSA

signature algorithm and the computation cost is 3.002 ms when the parameter size is 450 B.

d TO, TZKP and TM indicates the time complexity of an oracle, zero-knowledge proof and secure multiparty computation respectively.
According to the deﬁnition of identity information in our scheme, we refre to the performance simulation of [28], and the value of TO,
TZKP and TM are 1400 ms, 950 ms and 1501540 ms respectively.

In Table 4, one PBKDF2 algorithm, one SHA-256 operation and two AES-256 encryption algorithm are per-
formed in generation phase in [17], and the time cost is TP + TH2 + TS21 + TS22 = 40.5941 ms. In [22], one
SHA-1 operation, one ECDSA signature algorithm and one zk-SNARK algorithm are performed in generation
phase, in which the time cost is TH11 + TSig1 + TZ = 18217.9183 ms. Zheng et al. [23] performs two AES-128
encryption algorithms, three ECC encryption algorithms, three ECC decryption algorithms, three ECDSA signature
algorithms and three ECDSA veriﬁcation algorithms in generation phase, and the time cost is 3TAE2 + 3TSig1 +
3TV er1 + 2TS1 + 3TAD2 = 0.971 ms. In [26], one base58 encoding algorithm and two RSA signature algorithms
are performed in generation phase, and the time cost is TB + 2TR = 6.0892 ms. One oracle operation and one ZKP
operation are performed in generation phase in [28], and the time cost is TO + TZKP = 2350 ms. As shown in Sec-
tion 6.1, the computation cost is TH11 + TH12 + 2TAE1 + TL + TSig1 + TV er2 + 2TAD1 + TS1 + TAD2 = 0.5944ms
in generation phase in our scheme.

For the accountability phase, since the corresponding mechanism has not been designed in the paper [17, 22,
23, 26], the audit cost cannot be given. While in [28], one secure multiparty computation operation is performed
in accountability phase, where the audit cost is TM = 1501540 ms. As shown in Section 6.1, the accountability
cost in our scheme is 2TAE1 + 2TAD1 + 21TL + TS1 = 0.7017 ms. From Table 4, our scheme has the lowest time
overhead in both the generation phase and the accountability phase.

6.3 Storage cost

We compare the storage cost with other schemes from the perspective of users, servers, and blockchain. The

comparison result is shown in Table 5.

As shown in the Table 5, users in [17] need to store a master key and a corresponding derived key, as well as the
encrypted personal identity information, which are 168 bytes. And users in [22] need to store a random value key
for hash algorithm, and the storage cost is estimated to be 16 − 32 bytes. In [23], three pairs of public and private
keys, as well as a password used for symmetric encryption algorithm are stored locally by the user, which are 304
bytes. And users in [26] need to store a private key for signature algorithm and personal information (name, DID,

17

Table 5: Storage cost comparison

Scheme User(bytes) Server(bytes) Blockchain(bytes)

[17]
[22]
[23]
[26]
[28]
Ours

168
16 ∼ 32
304
≈ 10670
>150
0

108
198
>10240

505

>200
102
20
800

94

photo, etc.) locally, which are exceeds 10670 bytes. In [28], a credential containing user’s information is stored
locally, and the storage cost is estimated to be over 150 bytes. While with the help of the biometrics, there is no
data such as keys need to be stored locally by users in our scheme.

For a server, an estimated cost cannot be given in the paper [26, 28], because there is no detailed description.
A pair of public and private keys encrypted by the AES-256 algorithm needs to be stored in the server in [17],
and the storage cost is 108 bytes. In [22], the user’s identity information and related certiﬁcates are stored in the
server, which are totally 198 bytes. And the server in [23] needs to store the user’s information and the certiﬁcate
containing the user’s phone number, photo and so on, and the storage cost is exceeds 10240 bytes. While the
storage cost is 505 bytes composed of IRIs in our scheme. Because we divide the encrypted user information
into multiple pieces based on the shamir(t, n) threshold algorithm and store them in different servers, so as to audit
malicious users without revealing user privacy.

The last is the storage cost of each scheme on the blockchain. Since there is no evidence that a blockchain
is deployed in [28], an estimated overhead cannot be given. In [17], a public part of the claim used to proof the
identity is written into the blockchain and the cost is exceeds 200 bytes. In [22], the hash value of the user’s identity
information and the corresponding certiﬁcate are recorded in the blockchain, which is 20 + 82 = 102 bytes. And
in [23], the hash value of the user’s identity information is written into the blockchain and the storage cost is 20
bytes. A DID proof with DID, name, signature, etc. is recorded in the blockchain in [26], which is 800 bytes. In
our scheme, the hash value of user’s metadata, biometrics and digital identity, as well as the timestamp are recorded
on the blockchain, which is 20 + 20 + 20 + 20 + 14 = 94 bytes. From Table 5, we achieve lower storage cost in
the blockchain compared to the schemes [17, 22, 26]. Although Zheng et al. [23] has lower overhead than us, the
data recorded on the blockchain in our scheme more intuitively shows the entire process of identity generation and
accountability. In addition, the data is written to the blockchain by different entities, which decentralizes power of
regulatory authorities and reduces the risk of information leakage compared to [23]. In short, we liberate users in
terms of storage, while servers and the blockchain have the necessary storage requirements to balance privacy and
accountability, which are low enough for practical scenarios.

6.4 Blockchain Gas Cost

Considering Gas cost as an important aspect to measure performance, we conduct detailed experiments in this
regard. To visualize the execution cost of our smart contract, we evaluate its practical performance on a public
Ethereum testnet (Rinkeby). We used the plugin Metamask in Chrome v100.0 explorer to access the Rinkeby
testnet and the Remix, a browser-based IDE, to compile and deploy our smart contract. Rinkeby is built in April
2017 by the Ethereum Foundation and it uses the proof-of-authority consensus mechanism. Since the ether supply
is controlled by several trusted parties and only they can write transactions on the blockchain, it can be considered
a consortium blockchain. Hence, the waiting time for a transaction to be conﬁrmed is relatively short to be ignored.
Writing and reading are the main interactions between entities and the consortium blockchain. Therefore, we
record the proof data by deploying smart contract on Rinkeby and count the Gas spent on contract deployment and
invocation. And, since Maram et al. [28] has no blockchain deployed, we compare our scheme with the above SSI
schemes [17, 22, 23, 26] based on the data in Section 6.3, as shown in Fig 7.

As we can see from Figure 7, during the generation phase, there are more than 200 bytes of data recorded on
the blockchain in [17], which costs approximately 25643 Gas. In [22], a total of 102 bytes of data are written to
the blockchain and the cost is 24065 Gas. Zheng et al. [23] records 20 bytes of certiﬁcates on the blockchain,

18

Figure 7: Comparison of Gas cost when writing data

19

costing 22679 Gas. The cost of recalling the contract to write 800 bytes of identity proof in [26] is 35268 Gas.
In the phase 4.1, the contract in our NSSIA is deployed and the cost is 176335 Gas. Unlike the above schemes
where only one entity interacts with the blockchain, in our scheme, different entities are responsible for interacting
with the blockchain at different stages of identity generation descripted in Section 4. Concretely, in the digitization
stage, metadata veriﬁer (MV) and biometric collector (BC) respectively record 20-byte metadata and biometric
proofs into the blockchain, with an overhead of 22679 Gas. And, in the generation stage, the proof of the generated
digital avatar-i (DA) is written into the blockchain by digital avatar-i generator (DAG), which also costs 22679 Gas.
Although the total cost is 22679 ∗ 3 = 68037 Gas which is greater than other schemes, the Gas cost of our scheme is
actually the lowest due to the spread over different entities. In addition, we greatly reduce the risk of centralization
of power compared to other schemes.

In terms of accountability, the overhead of the above schemes is 0 due to the lack of accountability mechanism.
In our scheme, there are 34 bytes of log information recorded by RA on the blockchain, and the cost is 22981
Gas, which is almost the lowest compared with the overhead of the generation phase. All in all, regardless of
the generation stage or the accountability stage, the Gas cost of our scheme is not prohibitive for practice use.
Furthermore, the decentralization of regulatory authorities’ power guarantees fair audit and protects users privacy.

7 Conclusion and future work

A new self-sovereign identity scheme with accountability is proposed in this paper, where the executable code
is introduced to allow each user to independently control their own identity, referred as the digital avatar-i (DA),
and malicious users can be fairly regulated without violating the privacy of legitimate ones. For concreteness, one
and only individual-speciﬁc executable code is generated for each user to interact with others in metaverse without
a third-party program, in which biometrics are integrated into the code to enhance uniqueness and user control.
The hash of the individual-speciﬁc executable code is used as an identiﬁer and each user can store, read and prove
identities with service providers through his/her own local executable code. Furthermore, a joint accountability
mechanism is introduced to balance the privacy and accountability, where shamir(t, n) threshold algorithm is used
to decentralize the power of each regulatory authority and hide users’ information in reality, and the impartial
audit is further guaranteed by a consortium blockchain. The security analysis illustrates that our NSSIA can resist
multiple security threats such as sybil attacks, impersonation attacks and so on. And the analysis result on SSI
properties shows that we have satisﬁed all the six SSI properties in identity generation phase. Compared with the
state-of-the-art schemes, the extensive experiment results in performance indicates that the overhead of our NSSIA
is not unreasonable for practical use.

For future work, we will pay attention to the difﬁculties existing in the use of the DA, such as unlinkability, right
to be forgotten, etc., and the full design of Section 4.4 will be presented. Meanwhile, striking a balance between
privacy and accountability when using the DA to interact with others in cyberspace is also the focus of our research.

References

[1] Alexander M¨uhle, Andreas Gr¨uner, Tatiana Gayvoronskaya, and Christoph Meinel. A survey on essential

components of a self-sovereign identity. Computer Science Review, 30:80–86, 2018.

[2] Yuan Liu, Zheng Zhao, Guibing Guo, Xingwei Wang, Zhenhua Tan, and Shuang Wang. An identity manage-
ment system based on blockchain. In 2017 15th Annual Conference on Privacy, Security and Trust (PST),
pages 44–4409. IEEE, 2017.

[3] Reza Soltani, Uyen Trang Nguyen, and Aijun An. A survey of self-sovereign identity ecosystem. Security

and Communication Networks, 2021, 2021.

[4] Phillip J Windley. Sovrin: An identity metasystem for self-sovereign identity. Frontiers in Blockchain, 4:30,

2021.

[5] Paul Dunphy and Fabien AP Petitcolas. A ﬁrst look at identity management schemes on the blockchain. IEEE

security & privacy, 16(4):20–29, 2018.

20

[6] Andrej J Zwitter, Oskar J Gstrein, and Evan Yap. Digital identity and the blockchain: universal identity

management and the concept of the “self-sovereign” individual. Frontiers in Blockchain, 3:26, 2020.

[7] Christopher Allen. The Path to Self-Sovereign Identity. http://www.lifewithalacrity.com/2016/04/the-path-to-self-soverereign-identity.html,

2016.

[8] Sarah Manski. Distributed ledger technologies, value accounting, and the self sovereign identity. Frontiers in

Blockchain, 3:29, 2020.

[9] Shelby Solomon Darnell, Eddie Joseph Kago, and Joseph Sevilla. 3 stages of a pan african identity framework

for establishing self-sovereign identity with blockchain. Frontiers in Blockchain, 4:26, 2021.

[10] Alex Grech, Ira Sood, and Llu´ıs Ari˜no. Blockchain, self-sovereign identity and digital credentials: Promise

versus praxis in education. Frontiers in Blockchain, 4:7, 2021.

[11] Andre Boysen. Decentralized, self-sovereign, consortium: The future of digital identity in canada. Frontiers

in Blockchain, 4:11, 2021.

[12] Kalman C Toth and Alan Anderson-Priddy. Self-sovereign digital identity: A paradigm shift for identity.

IEEE Security & Privacy, 17(3):17–27, 2019.

[13] Galia Kondova and J¨orn Erbguth. Self-sovereign identity on public blockchains and the gdpr. In Proceedings

of the 35th Annual ACM Symposium on Applied Computing, pages 342–345, 2020.

[14] Frederico Schardong and Ricardo Cust´odio. Self-sovereign identity: A systematic map and review. arXiv

preprint arXiv:2108.08338, abs/2108.08338, 2021.

[15] Fennie Wang and Primavera De Filippi. Self-sovereign identity in a globalized world: Credentials-based

identity systems as a driver for economic inclusion. Frontiers in Blockchain, 2:28, 2020.

[16] Maria Freytsis, Iain Barclay, Swapna Krishnakumar Radha, Adam Czajka, Geoffery H Siwo, Ian Taylor, and
Sherri Bucher. Development of a mobile, self-sovereign identity approach for facility birth registration in
kenya. Frontiers in Blockchain, 4:2, 2021.

[17] Makoto Takemiya and Bohdan Vanieiev. Sora identity: Secure, digital identity on the blockchain. In 2018
ieee 42nd annual computer software and applications conference (compsac), volume 2, pages 582–587. IEEE,
2018.

[18] Tong Zhou, Xiaofeng Li, and He Zhao. Everssdi: blockchain-based framework for veriﬁcation, authorisation
and recovery of self-sovereign identity using smart contracts. International Journal of Computer Applications
in Technology, 60(3):281–295, 2019.

[19] Jianlin Niu and Zhiyu Ren. A self-sovereign identity management scheme using smart contracts. In MATEC

Web of Conferences, volume 336, page 08005. EDP Sciences, 2021.

[20] Martin Westerkamp, Sebastian G¨ond¨or, and Axel K¨upper. Tawki: Towards self-sovereign social communica-
tion. In 2019 IEEE International Conference on Decentralized Applications and Infrastructures (DAPPCON),
pages 29–38. IEEE, 2019.

[21] Quinten Stokkink and Johan Pouwelse. Deployment of a blockchain-based self-sovereign identity. In 2018
IEEE international conference on Internet of Things (iThings) and IEEE green computing and communica-
tions (GreenCom) and IEEE cyber, physical and social computing (CPSCom) and IEEE smart data (Smart-
Data), pages 1336–1342. IEEE, 2018.

[22] Jeonghyuk Lee, Jungyeon Hwang, Jaekyung Choi, Hyunok Oh, and Jihye Kim. Sims: Self sovereign identity

management system with preserving privacy in blockchain. IACR Cryptol. ePrint Arch., 2019:1241, 2019.

[23] Yue Zheng, Yarong Li, Zhen Wang, Chunhua Deng, Yili Luo, Yixin Li, and Jianwei Ding. Blockchain-
based privacy protection uniﬁed identity authentication. In 2019 International Conference on Cyber-Enabled
Distributed Computing and Knowledge Discovery (CyberC), pages 42–49. IEEE, 2019.

21

[24] Tom Hamer, Kerry Taylor, Kee Siong Ng, and Alwen Tiu. Private digital identity on blockchain.

In

BlockSW/CKG@ ISWC, 2019.

[25] Asem Othman and John Callahan. The horcrux protocol: a method for decentralized biometric-based self-
sovereign identity. In 2018 international joint conference on neural networks (IJCNN), pages 1–7. IEEE,
2018.

[26] Eranga Bandara, Xueping Liang, Peter Foytik, Sachin Shetty, and Kasun De Zoysa. A blockchain and self-
sovereign identity empowered digital identity platform. In 2021 International Conference on Computer Com-
munications and Networks (ICCCN), pages 1–7. IEEE, 2021.

[27] Quinten Stokkink, Georgy Ishmaev, Dick Epema, and Johan Pouwelse. A truly self-sovereign identity system.

In 2021 IEEE 46th Conference on Local Computer Networks (LCN), pages 1–8. IEEE, 2021.

[28] Deepak Maram, Harjasleen Malvai, Fan Zhang, Nerla Jean-Louis, Alexander Frolov, Tyler Kell, Tyrone Lob-
ban, Christine Moy, Ari Juels, and Andrew Miller. Candid: Can-do decentralized identity with legacy com-
patibility, sybil-resistance, and accountability. In 2021 IEEE Symposium on Security and Privacy (SP), pages
1348–1366. IEEE, 2021.

[29] Yuntao Wang, Zhou Su, Ning Zhang, Dongxiao Liu, Rui Xing, Tom H Luan, and Xuemin Shen. A survey on
metaverse: Fundamentals, security, and privacy. arXiv preprint arXiv:2203.02662, abs/2203.02662, 2022.

[30] Lik-Hang Lee, Tristan Braud, Pengyuan Zhou, Lin Wang, Dianlei Xu, Zijun Lin, Abhishek Kumar, Carlos
Bermejo, and Pan Hui. All one needs to know about metaverse: A complete survey on technological singu-
larity, virtual ecosystem, and research agenda. arXiv preprint arXiv:2110.05352, abs/2110.05352, 2021.

[31] Manu Sporny, Dave Longley, Markus Sabadello, Drummond Reed, Orie Steele, and Christopher Allen. De-

centralized Identiﬁers (DIDs) v1.0, 2021. https://www.w3.org/TR/did-core/.

[32] Nate Otto, Sunny Lee, Brian Sletten, Daniel Burnett, Manu Sporny, and Ken Ebert. Veriﬁable credentials use

cases, 2019. https://www.w3.org/TR/vc-use-cases/.

[33] Danny Dolev and Andrew Yao. On the security of public key protocols. IEEE Transactions on information

theory, 29(2):198–208, 1983.

[34] Adi Shamir. How to share a secret. Communications of the ACM, 22(11):612–613, 1979.

[35] Qiuyun Lyu, Yizhen Qi, Xiaochen Zhang, Huaping Liu, Qiuhua Wang, and Ning Zheng. Sbac: A secure
blockchain-based access control framework for information-centric networking. Journal of Network and
Computer Applications, 149:102444, 2020.

[36] Ari Juels and Madhu Sudan. A fuzzy vault scheme. Designs, Codes and Cryptography, 38(2):237–257, 2006.

[37] Md Sadek Ferdous, Farida Chowdhury, and Madini O Alassaﬁ. In search of self-sovereign identity leveraging

blockchain technology. IEEE Access, 7:103059–103079, 2019.

[38] Katarzyna Bobkowska, Khaled Nagaty, and Marek Przyborski. Incorporating iris, ﬁngerprint and face bio-
metric for fraud prevention in e-passports using fuzzy vault. IET Image Processing, 13(13):2516–2528, 2019.

22

