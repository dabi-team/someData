2
2
0
2

b
e
F
1
2

]

R
C
.
s
c
[

3
v
7
9
9
5
0
.
2
1
1
2
:
v
i
X
r
a

Two Sequential Squaring Veriﬁable Delay
Function

Souvik Sur

Department of Computer Science and Engineering,
Indian Institute of Technology Kharagpur,
Kharagpur, West Bengal, India
souviksur@iitkgp.ac.in

Abstract. A Veriﬁable Delay Function (VDF) is a function that takes a
speciﬁed sequential time to be evaluated, but can be eﬃciently veriﬁed.
VDFs are useful in several applications ranging from randomness beacons
to sustainable blockchains but are really rare in practice. Most of
the VDFs are based on algebraic assumptions like time-lock puzzle in
unknown group orders [6,8] and isogenies over pairing groups [4]. The
number of modulo squaring required for veriﬁcation in the time-lock
puzzle based VDFs are proportional to their security parameter.
This paper proposes a veriﬁable delay function that requires only 2-
modulo squaring for veriﬁcation. So the sequential eﬀort required for
veriﬁcation is independent of the security parameter.

Keywords: Veriﬁable Delay Functions · Sequentiality · Soundness ·
Time-lock Puzzle

1

Introduction

In 1992, Dwork and Naor [3] introduced the very ﬁrst notion of VDF under a
diﬀerent nomenclature “pricing function”. Basically it is a computationally hard
puzzle that needs to be solved to send a mail, whereas the solution of the puzzle
can be veriﬁed eﬃciently. Later, the concept of veriﬁable delay functions was
formalized in [1]. A veriﬁable delay function is a function with the domain
and
the range
, that takes a speciﬁed number of sequential steps T to be evaluated
(irrespective of the amount of parallelism) and can be veriﬁed eﬃciently (even
without parallelism) and publicly. In order to avoid exponential (processors)
adversary T = 2o(λ) at most.

X

Y

Along with the formalization, a candidate VDF using injective rational maps
has been proposed in [1]. However, it is a weak VDF. i.e, the prover needs a
certain amount of parallelism to evaluate. Wesolowski [8] and Pietrzak [6] come
up with two VDFs separately, although based on the same hardness assumption
of time-lock puzzle [7]. Feo et al. [4] propose a VDF based on super-singular
elliptic curves deﬁned over ﬁnite ﬁelds.

Each of these schemes has the advantages over the others, however the time-
lock puzzle based ones [8,6] shine for their simplicity. The basic idea is to com-
pute g2T
in a multiplicative modulo group (Z/N Z)× of unknown order. Still one

 
 
 
 
 
 
2

Souvik Sur

crucial constraint for both of these VDFs is that the eﬀort by the veriﬁer is pro-
portional to the security parameter λ. In particular Pietrzak’s VDF [6] imposes
O(√T log T ) time (as mentioned above T = 2o(λ)) during veriﬁcation whereas
Wesolowski’s VDF takes log2 ℓ time such that ℓ is at most a 2λ-bits prime. In
section 4, we show that this prime should be at least 2λ-bits in order to avoid an
1/ℓ. This
AW breaking the soundness with the success probability
attacker
enforces Wesolowski’s VDF to incur at least 2λ-time during veriﬁcation. We be-
lieve that the key reason behind this proportional veriﬁcation eﬀort is neither of
these two VDFs can verify if g2T

is really the 2T -th power of g.

≥

Thus the question is that can we have faster veriﬁcation? In particular, can we
design a VDF that takes δ-time such that δ is reasonably small and independent
of the security parameter λ?

2 Related Work

In this section, we mention some well-known schemes qualiﬁed as VDFs, and
summarize their features in Table 1 Sect. 6.1.

≡
≡
(p+1)
4

The pricing function by Dwork–Naor scheme [3] asks a prover, given a prime
3 (mod 4) and a quadratic residue x modulo p, to ﬁnd a y such that
x (mod p). The prover has no other choice other than using the identity y

p
y2
≡
x (mod p).
x
The drawback of this design is that the delay parameter T = log p. Thus the
diﬀerence between the evaluation and the veriﬁcation may be made up by a
prover with poly(T )-processors by parallelizing the ﬁeld multiplications.

(mod p), but the veriﬁer veriﬁes the correctness using y2

≡

O

In 2018, Boneh et al. [1] propose a VDF based on injective rational maps
of degree T , where the fastest possible inversion is to compute the polynomial
GCD of degree-T polynomials. They conjecture that it achieves (T 2, o(T )) se-
quentiality using permutation polynomials as the candidate map. However, it is
a weak VDF as it needs

(T ) processors to evaluate the output in time T .

Rivest, Shamir, and Wagner [7] introduced an another discipline of VDFs
known as time-lock puzzle. These puzzles enables an encryption that can be
decrypted only sequentially. Starting with N = pq such that p, q are large primes,
(mod N ). Then the veriﬁer, uses the
the key y is enumerated as y
2T (mod φ(N )) and ﬁnds out
value of φ(N ) to reduce the exponent to e
xe (mod N ). On the contrary, without the knowledge of φ(N ), the only
y
option available to the prover is to raise x to the power 2T sequentially. As the
veriﬁcation stands upon a secret, the knowledge of φ(N ), it is not a VDF as
veriﬁcation should depend only on public parameters.

x2T

≡

≡

≡

Wesolowski [8] and Pietrzak [6] circumvent this issue independently. The ﬁrst
and a proof π = x⌊2T /l⌋, where
one asks the prover to compute an output y = x2T
x(2T mod l).
l is a 2λ-bit prime chosen at random. The veriﬁer checks if y = πl
Hence the veriﬁcation needs at most 2 log ℓ = 4λ squaring. However in Sect. 4
we show that it should be at least instead of at most. Two candidate groups
suits well in this scheme – an RSA group (Z/N Z)×, and the class group of an

·

imaginary quadratic number ﬁeld. This VDF shines for its short proof which is
a single element in underlying group.

2-modulo squaring VDF

3

∈ {

and r

where y = x2T

Pietrzak’s VDF exploits the identity zry = (xrz)2T /2

, z =
is chosen at random. So the prover is asked to compute

1, . . . , 2λ
}
u1, u2, . . . , ulog T }

x2T /2
the proof π =
. The veriﬁer computes
{
the vi = xri·2T /2i
i . So the veriﬁer needs O(log T ) time.
Trading-oﬀ the size of the proof it optimizes the eﬀort to generate the proof π
in O(√T log T ). As a comparison, Wesolowski’s VDF needs
(T / log T ) time to
do the same. This VDF uses the RSA group and the class groups of imaginary
quadratic number ﬁelds.

such that ui = xri+2T /2i

and checks if vi = u2

+2T

O

G1, G2, G3, G4, G5i
h
G2 →
G5. Also there are two group isomorphisms φ : G1 →
G1, the prover needs to ﬁnd φ(Q), where Q

Feo et al. [4] presents two VDFs based on isogenies of super-singular elliptic
curves. They start with ﬁve groups
of prime order T with
G5 and e34 : G3 ×
two non-degenerate bilinear pairing maps e12 : G1 ×
G4 →
G2.
Given all the above descriptions as the public parameters along with a generator
P
G4, using T sequential steps.
The veriﬁer checks if e12(P, φ(Q)) = e34(φ(P ), Q) in poly(log T ) time. It runs
on super-singular curves over Fp and Fp2 as two candidate groups. While being
inherently non-interactive, there are two drawbacks as mentioned by the authors
themselves. First, it requires a trusted setup, and second, the setup phase may
turn out to be slower than the evaluation.

G3 and φ : G4 →

∈

∈

Mahmoody et al. recently rule out the possibility of having a VDF out of

random oracles only [5].

3 Preliminaries

Now we mention the notations and terminology used in this paper.

3.1 Notation

Z+. The term poly(λ) refers to some
We denote the security parameter with λ
polynomial of λ, and negl(λ) represents some function λ−ω(1). If any randomized
, we mean
algorithm
denotes
x
that x is sampled uniformly at random from
X
|
denotes the cardinality of the set
the bit-length of x, whereas for any set

outputs y on an input x, we write y R

(x). By x $
←− A
. For an element x,

←− X
|

A

∈

,

X

|X |

A

We consider

as eﬃcient if it runs in probabilistic polynomial time (PPT).
We assume (or believe) a problem to be hard if it is yet to have an eﬃcient
algorithm for that problem. We say that an algorithm
runs in parallel time T
with Γ processors if it can be implemented on a PRAM machine with Γ parallel
processors running in time T .

A

.

X

3.2 Veriﬁable Delay Function

We borrow this formalization from [1].

4

Souvik Sur

Deﬁnition 1. (Veriﬁable Delay Function). A VDF is a triple of algorithms
(Setup, Eval, Verify) that implements a function

.

X → Y

• Setup(1λ, T )

• Eval(pp, x)

→

pp is a randomized algorithm that takes as input a security
parameter λ and a delay parameter T , and produces the public parameters
pp. We require Setup to run in poly(λ, log T )-time.
(y, π) takes an input x

, and produces an output y

∈ Y
and a (possibly empty) proof π. Eval may use random bits to generate the
proof π. For all pp generated by Setup(1λ, T ) and all x
, the algorithm
Eval(pp, x) must run in parallel time T with poly(λ, log T ) processors.

∈ X

∈ X

→

• Verify(pp, x, y, π)

, an output y

x
rejects (0). The algorithm must run in poly(λ, log T ) time.

∈ X

∈ Y

→ {

0, 1

is a deterministic algorithm that takes an input
}
, and a proof π (if any), and either accepts (1) or

Subexponentiality of T As Verify is eﬃcient, we need T

2o(λ), otherwise a
prover with poly(T ) processors will always be able to brute-force 2λ possible
2o(λ) enforces the complexity of this brute-force approach to
solutions. T
be 2λ/2o(λ) = 2Ω(λ).

≤

≤

Interactive VDFs Def. 1 uses Fiat–Shamir heuristic to generate the proof π.
It is the non-interactive version of VDFs where the veriﬁer does not interact
with the prover. Fiat–Shamir heuristic replaces this interaction in any public
coin interactive proof using a random oracle. The interactive versions of VDFs
asks the prover to compute the proof π on challenges chosen by the veriﬁer.

The three desirable properties of a VDF are now described.

Deﬁnition 2. (Correctness) A VDF is correct, if for all λ, T , parameters pp,
and x

, we have

∈ X

Pr

Verify(pp, x, y, π) = 1



(cid:12)
(cid:12)
(cid:12)
(cid:12)
Deﬁnition 3. (Soundness) A VDF is sound if for all non-uniform algorithms
(cid:12)





←

Setup(1λ, T )

pp
x $
(y, π) = Eval(pp, x)

←− X

= 1.



that run in time poly(T, λ), we have

A

Pr

"

= Eval(pp, x)

y
Verify(pp, x, y, π) = 1 (cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

We call the VDF perfectly sound if this probability is 0.

Setup(1λ, T )

pp
←
(x, y, π)

(1λ, T, pp) # ≤

← A

negl(λ).

Deﬁnition 4. (Sequentiality) A VDF is (Γ, σ)-sequential if for all pair of ran-
domized algorithms
A1 which runs
in parallel time σ(T ) on at most Γ processors, we have,

A0 with total running time poly(T, λ) and

Pr 

y = Eval(pp, x)





Setup(1λ, T )
pp
←
← A0(1λ, T, pp)
state
x $
←− X
← A1(state, x)
y







(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

negl(λ).

≤

6
2-modulo squaring VDF

5

Here,

A0 is a preprocessing algorithm that precomputes some state based
A1 exploits this additional knowledge in

only on the public parameters, and
Eval(x, pp) in parallel running time σ on Γ processors.

4 Lower Bound for Veriﬁcation of Wesolowski’s VDF

First we give an attacker
AW that breaks the soundness of non-interactive ver-
sion of Wesolowski’s VDF with probability 1/ℓ. Two important observations
relevant to the veriﬁcation of this VDF are,

1. The sampled prime ℓ

Hprime(bin(g)

parameter T . So the prover may claim that y = g2T
of T .

|||

bin(y)) is independent of the delay
for any arbitrary values

2. The equivalence y = πℓ

gr implies y = g2T

if and only if π = g⌊2T /ℓ⌋ which

←

·

is never veriﬁed by the veriﬁer.

4.1 Strategy of AW

|||

←

Z2λ.

Hprime(bin(g)

Z(2λ+1) \

AW chooses a small (2λ + 1-bit suﬃces in this context) number τ and computes
y = gτ . Then (s)he samples the prime ℓ in order to compute π = g⌊τ /ℓ⌋. Now
(s)he ﬁnds a number T > log2 τ such that τ mod ℓ = 2T mod ℓ. In particular
Aw computes,
HG(x).
1. g
2. y = gτ such that τ $
←−
bin(y)).
3. ℓ
←
4. π = g⌊τ /ℓ⌋.
5. T
log2 τ
6. While (τ mod ℓ

g2T mod ℓ = πℓ
For any arbitrary T , Pr[

←
AW announces the tuple (x, G, y, π, T ) to get veriﬁed. The veriﬁer will ﬁnd
gτ mod ℓ = (g⌊τ /ℓ⌋)ℓgτ mod ℓ = y.
AW wins] = Pr[τ mod ℓ = 2T mod ℓ] = 1/ℓ. Inclu-
AW to include only
sion of T in ℓ
|||
this sampling of ℓ within the while loop incurring the same success probability
22λ. As ver-
1/ℓ. In order to have Pr[
2λ modulo
iﬁcation needs O(log2 ℓ) modulo squaring, against
squaring.

negl(λ) we must have ℓ
≥
AW it needs

·
Hprime(bin(g)

|||
AW wins]

= 2T mod ℓ) do T

bin(T )) requires

bin(y)

that πℓ

T + 1.

← ⌈

←

≥

≤

⌉

·

.

5

δ-Squaring Veriﬁable Delay Function

As before, λ
parameter. The three algorithms that specify our VDF are,

Z+ denotes the security parameter, T

∈

∈

2o(λ) denotes the delay

6
6

Souvik Sur

5.1 The Setup(1λ, T ) Algorithm

This algorithm outputs the public parameters pp =
meanings.

H, N
h

i

having the following

1. N = pq where

(a) (p
−
(b) log2 p

1)/2 and (q

1)/2 are primes.
log2 q and are small multiples of λ.

−

≈

2. δ

∈

Z+ is a parameter that tunes the sequential eﬀort during veriﬁcation.
We show that δ = 2 is necessary and suﬃcient. Thus δ is ﬁxed even before
we run the Setup. Still we mention δ in pp, otherwise we had to introduce δ
as another implicit parameter like λ or T .

G

3. Theorem A in [2] states that for a ﬁnite group G having k elements of
mk2
φ(m) where φ() Euler’s totient function. When
maximal order m holds
m is a power of 2 the ratio φ(m)
2 so k
/2. Hence, there are at least
2(T +δ)/2 elements in the group (Z/2T +δ+2Z)× that have maximal order. So
the cardinality of
We take H :

S
|
|
S maps x

−
−
−
to the set S.

1) = 2(T +δ)/2

= 2(T +δ)/2

m = 1

22o(λ)

G
|

q(p

p(q

| ≤

p

1)

≈

≥

−

|

|

.

X →

∈ X

None of the public parameters needs to be computed. The factorization of N
opens up a trapdoor to this VDF and is unknown to the prover, the veriﬁer and
the third-party who runs the Setup.

5.2 The Eval(pp, x, T ) Algorithm

The prover,

H(x).
1. maps g
2. computes y = g(2T +1) mod N .

←

Announce (x, T, y).

5.3 The Verify(pp, x, T, y, ⊥) Algorithm

The veriﬁer,

1. maps g
2. accepts if (y

←

H(x).

g−1)2δ

·
Veriﬁcation needs no proof, so π =

.

⊥

mod N = 1 mod (2T +δ+2 mod N ), rejects otherwise.

6 Eﬃciency Analysis

Here we discuss the eﬃciencies of both the prover
of number of modulo squaring and the memory requirement.

P

and the veriﬁer

in terms

V

2-modulo squaring VDF

7

Proof Size The proof size is essentially zero as the proof π =
is empty.
The output y is an element in the group (Z/N Z)×. So the size of the output is
log2 N -bits.

⊥

Prover’s Eﬃciency The prover
compute g2T
compute g2T +1.

needs at least T sequential time in order to
such that g = H(x). Additionally, one multiplication is needed to

P

Veriﬁer’s Eﬃciency During veriﬁcation only δ number of modulo squaring
are needed. Ee have shown that δ = 2 is necessary and suﬃcient to achieve
soundness.

6.1 Performance Comparison

Each of the existing VDFs suﬀers from at least one limitation. We have already
discussed them in Sect. 2, however, reiterate here to show that the proposed
VDF overcomes all of them.

Sequentiality Adversary with poly(λ, T )-parallelism breaks the sequentiality
of the scheme [3]. It shows that our VDF stands sequential against any
poly(λ, T )-adversary.

Weak VDF We call a VDF is a weak VDF if it demands poly(λ, T )-parallelism
to compute the Eval in time T . The VDF based on injective rational maps is
a weak VDF [1]. In our case, no parallelism is required to compute the VDF
in time T .

Proof The proofs in the Wesolowski’s and Pietrzak’s VDFs consume one and
log T group elements [8,6]. Moreover in Sect. 4 we show that, the proof itself
in Wesolowski’s VDF gave us an edge to attack it. Our VDF requires no
proof.
Furthermore, for the interactive versions they need 1 and log T extra round(s)
of interaction to communicate the proof [8,6]. As the veriﬁcation runs with-
out a proof only 2 rounds suﬃces to execute our VDF. The prover sends the
output y and the veriﬁer replies with its decision.

Slow Setup The Setup in the isogeny-based VDF may turn out to be as slow as
the Eval itself [4] questioning the practicality of the scheme. On the other
hand, the Setup in our VDF is exactly same as the ones in all other time-lock
based VDFs [8,6].

Ω(λ)-Veriﬁability All the existing VDFs need at least λ sequential eﬀort for
veriﬁcation. The attack proposed in Sect. 4 mandates at least 2λ-sequential
eﬀort for veriﬁcation in Wesolowski’s VDF. On the contrary, the most im-
portant advantage of our VDF is that the veriﬁcation requires only 2 modulo
squaring. Thus the sequential eﬀort in veriﬁcation is independent of the pa-
rameters λ and T .

In Table 1, we summarize the above comparison.

8

Souvik Sur

Table 1. Comparison among the existing VDFs. T is the delay parameter, λ is the secu-
rity parameter and Γ is the number of processors. All the quantities may be subjected
to

-notation, if needed.

O

VDFs
(by authors)
Dwork and Naor [3]

Eval
Sequential
T

Eval
Parallel
T 2/3
> T
o(T )
−
Γ log T )T
(1 + 2
(1 + 2

(1 + 2
(1 + 2
√T

T 2
log T )T
)T
T
log T )T

(1 + 2

(1 + 2

Γ √T

)T √T log T
T
λ4
Γ log T )T

2

Verify

T 2/3
log T
λ4

Setup Proof
size
–

T
log T
λ3

λ3
T log λ
λ3

–
λ3

log T
–

–

Boneh et al. [1]

Wesolowski [8]

Pietrzak [6]

Feo et al. [4]

Our work

7 An Open Problem

Beyond this the best that one can think of is a VDF that veriﬁes spending only
one sequential computation without any proof, if possible at all. In case of time-
lock puzzle based VDFs the sequential computation is modulo squaring.

References

1. Boneh, D., Bonneau, J., B¨unz, B., Fisch, B.: Veriﬁable delay functions. In: Shacham,
H., Boldyreva, A. (eds.) Advances in Cryptology - CRYPTO 2018 - 38th Annual
International Cryptology Conference, Santa Barbara, CA, USA, August 19-23, 2018,
Proceedings, Part I. Lecture Notes in Computer Science, vol. 10991, pp. 757–788.
Springer (2018). https://doi.org/10.1007/978-3-319-96884-1 25

2. Cocke, W., Venkataraman, G.: On
in

a
maximal
126(1),
(2019).
https://doi.org/10.1080/00029890.2019.1528826

of
group. The American Mathematical Monthly
https://doi.org/10.1080/00029890.2019.1528826,

order
66–69

elements

number

the

of

3. Dwork, C., Naor, M.: Pricing via processing or combatting junk mail. In: Brick-
ell, E.F. (ed.) Advances in Cryptology - CRYPTO ’92, 12th Annual International
Cryptology Conference, Santa Barbara, California, USA, August 16-20, 1992, Pro-
ceedings. Lecture Notes in Computer Science, vol. 740, pp. 139–147. Springer (1992).
https://doi.org/10.1007/3-540-48071-4 10

4. Feo, L.D., Masson, S., Petit, C., Sanso, A.: Veriﬁable delay functions from super-
singular isogenies and pairings. In: Galbraith, S.D., Moriai, S. (eds.) Advances in
Cryptology - ASIACRYPT 2019 - 25th International Conference on the Theory
and Application of Cryptology and Information Security, Kobe, Japan, December
8-12, 2019, Proceedings, Part I. Lecture Notes in Computer Science, vol. 11921, pp.
248–277. Springer (2019). https://doi.org/10.1007/978-3-030-34578-5 10

5. Mahmoody, M., Smith, C., Wu, D.J.: Can veriﬁable delay functions be based
on random oracles? In: Czumaj, A., Dawar, A., Merelli, E. (eds.) 47th In-
ternational Colloquium on Automata, Languages, and Programming, ICALP
2020, July 8-11, 2020, Saarbr¨ucken, Germany (Virtual Conference). LIPIcs,
vol. 168, pp. 83:1–83:17. Schloss Dagstuhl - Leibniz-Zentrum f¨ur Informatik (2020).
https://doi.org/10.4230/LIPIcs.ICALP.2020.83

2-modulo squaring VDF

9

6. Pietrzak, K.: Simple veriﬁable delay functions. In: Blum, A. (ed.) 10th Innovations
in Theoretical Computer Science Conference, ITCS 2019, January 10-12, 2019, San
Diego, California, USA. LIPIcs, vol. 124, pp. 60:1–60:15. Schloss Dagstuhl - Leibniz-
Zentrum f¨ur Informatik (2019). https://doi.org/10.4230/LIPIcs.ITCS.2019.60

7. Rivest, R.L., Shamir, A., Wagner, D.A.: Time-lock puzzles and timed-release crypto.

Tech. rep., USA (1996)

8. Wesolowski, B.: Eﬃcient veriﬁable delay functions. In: Ishai, Y., Rijmen, V.
(eds.) Advances in Cryptology - EUROCRYPT 2019 - 38th Annual Inter-
national Conference on the Theory and Applications of Cryptographic Tech-
niques, Darmstadt, Germany, May 19-23, 2019, Proceedings, Part III. Lec-
ture Notes in Computer Science, vol. 11478, pp. 379–407. Springer (2019).
https://doi.org/10.1007/978-3-030-17659-4 13

