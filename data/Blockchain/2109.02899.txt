1
2
0
2

c
e
D
1
1

]

R
C
.
s
c
[

6
v
9
9
8
2
0
.
9
0
1
2
:
v
i
X
r
a

Blockchains through ontologies: the case study
of the Ethereum ERC721 standard in OASIS
(Extended Version)

Giampaolo Bella,1 Domenico Cantone,1 Cristiano Longo,2
Marianna Nicolosi Asmundo,1 Daniele Francesco Santamaria1

1 University of Catania
Department of Mathematics and Computer Science
Viale Andrea Doria, 6 - 95125 - Catania, ITALY
{giampaolo.bella, domenico.cantone,
marianna.nicolosiasmundo, daniele.santamaria}@unict.it
2 The Sicilian Wheat Bank S.p.A, longo@dmi.unict.it

Abstract. Blockchains are gaining momentum due to the interest of in-
dustries and people in decentralized applications (Dapps), particularly in
those for trading assets through digital certiﬁcates secured on blockchain,
called tokens. As a consequence, providing a clear unambiguous descrip-
tion of any activities carried out on blockchains has become crucial, and
we feel the urgency to achieve that description at least for trading. This
paper reports on how to leverage the Ontology for Agents, Systems, and
Integration of Services (“OASIS”) as a general means for the seman-
tic representation of smart contracts stored on blockchain as software
agents. Special attention is paid to non-fungible tokens (NFTs), whose
management through the ERC721 standard is presented as a case study.

1

Introduction

The last decade reports vast interest on blockchain technology and related ap-
plications from various realms, including economic, social, business, and aca-
demic ones. Beyond the ﬁnancial speculation concerning cryptocurrencies, the
interest in blockchain technologies is mainly motivated by the fact that they
realize decentralized and publicly shared ledgers, where third-party intermedi-
aries demanding the client’s total and unquestioned trust are no longer required.
Blockchain technologies [6] were precisely introduced to allow users to interact
and run programs in a distributed way without the requirement of trusted en-
tities, yet guaranteeing ownership, transparency, traceability, availability, con-
tinuity, and immutability of digital shared assets. Applications of blockchain
technologies range from the Internet of Things (IoT) and robotics [18], to com-
merce, healthcare, insurance, energy, laws, and communications.

One of the most popular applications of Turing-complete blockchains such
as Ethereum [15] is the smart contract. Smart contracts are self-executing and
immutable programs, autonomously running and veriﬁed on a distributed and

 
 
 
 
 
 
decentralized public network, which implement decentralized applications on
blockchain systems called Dapps. In 2020, Dapps have particularly grown as
an exchange tool for non-fungible tokens (NFTs), namely digital certiﬁcates
stored on the blockchain representing predetermined rights on certain unique
assets. NFTs are mainly used as a proof of ownership of physical or digital prod-
ucts. Such tokens are routinely exchanged by users to witness that assets whose
uniqueness is hard to demonstrate (for example, digital images) are owned in an
exclusive way. At the end of 2020, the market capitalization of NFTs reached
the amount of 338 millions of U.S. dollars.3 However, one of the main limitations
of blockchains is the hard-coded nature of the transactions stored on them. As
a consequence, it is hard to probe a blockchain, for example, to ﬁnd smart con-
tracts trading speciﬁc NFTs that satisfy certain requirements in terms of quality
or quantity.

Therefore, a formal semantic knowledge representation capturing the
blockchain smart contracts as well as the activities carried out on it facilitates
the understanding of blockchain concepts, the interlinking with other out-of-
chain information, and also formal reasoning. Moreover, a semantic conception
of blockchains enables the automatic discovery of smart contracts, the intercon-
nection of services running on diﬀerent blockchains (i.e., cross-chain integration)
and the integration between on-chain and oﬀ-chain services. These features turn
out to be more interesting when smart contracts are implemented as mechanisms
for generating and exchanging tokens. A desirable feature of token exchange sys-
tems is a precise and intelligent query mechanism capable of determining what,
when, and how certain assets have been generated, exchanged or destroyed. For
example, intelligent systems may be aware of the activation of smart contracts
for generating tokens with speciﬁc characteristics, e.g., of the type of exchanged
asset, of the exchange of particular tokens at certain conditions, or of their de-
struction. More in general, intelligent systems may be aware of the activation of
smart contracts and of all the related activities over the blockchain.

Beyond a semantic representation of transactions and information stored
in blocks, a real, semantically represented blockchain is eﬀectively achievable
if smart contracts are interpreted as reactive agents operating on a common
environment, with a fully speciﬁed semantics of available operations, committed
actions, and stored data.

The representation of blockchain actors requires ontological capabilities for
fully representing agents and their interactions in a detailed way. This paper
adopts the Ontology for Agents, Systems, and Integration of Services (“OASIS”)
towards the full, semantic representation of the Ethereum blockchain and the
smart contracts running on it, with a special focus on the smart contracts com-
pliant with the ERC721 standard4 for NFTs management.

The paper is organized as follows. Section 2 presents related work. Section
3 outlines OASIS, whereas Sections 4 and 5 depict the ontology implement-

3 https://www.statista.com/statistics/1221742/nft-market-capitalization-worldwide/

(last access: 08/07/2021).

4 https://ethereum.org/it/developers/docs/standards/tokens/erc-721/

ing the OASIS representation of, respectively, the Ethereum blockchain and
the ERC721 standard. Finally, Section 6 draws some conclusions and delineates
future research directions.

2 Related works

Interest in symbiotically combining semantic web technologies and blockchains is
quite recent [3, 7]. One of the areas of investigation concentrates in developing a
characterization of blockchain concepts and technologies through ontologies and
of blocks and transactions meta-data. An ontological albeit theoretical approach
at blockchain representation exists [11]. Ruta et al. propose a blockchain frame-
work for semantic web of things (SWoT) contexts settled as a Service-Oriented
Architecture (SOA), where nodes can exploit smart contracts for registering,
discovering, and selecting annotated services and resources [14].

Blockchain technologies are also exploited as a secure and public storage
system for small data, including linked data, and to realize a more resilient
architecture for the Semantic Web [7].

Other works aim at representing ontologies within a blockchain context.
In [10], ontologies are used as common data format for blockchain-based ap-
plications such as the proposed provenance traceability ontology, but are limited
to implementation aspects of the blockchain.

Fill discusses blockchains applied for tracking the provenance of knowledge,
for establishing delegation schemes, and for ensuring the existence of patterns
in formal conceptualizations using zero-knowledge proofs [8].

A semantic interpretation of smart contracts as services bases on the Ethon
ontology [12] exist [1]. The main limitation of that approach is the poor semantic
description of smart contracts, thus hindering the discovery of unknown smart
contracts and of the related operations fulﬁlled during their life-span.

The Blockchain Ontology with Dynamic Extensibility (BLONDiE) project
[16] provides a comprehensive vocabulary that covers the structure of diﬀerent
components (wallets, transactions blocks, accounts, etc.) of blockchain platforms
(Bitcoin and Ethereum) and that can be easily extended to other alternative
systems.

Finally, in [5] the authors illustrated how the ontology OASIS is applied
for ontologically describing digital contracts (called ontological smart contracts),
intended as agreement among agents, and how they can be secured on Ethereum.
In this contribution, the deﬁnition of digital contracts in [5] is generalized
to include blockchain smart contracts, intended as programs running on the
blockchain and interpreted as digital agents in the OASIS fashion.

3 Preliminaries

The Ontology for Agents, Systems, and Integration of Services (“OASIS”) [4] is
an OWL 2 ontology for representing agents and their activities. On one hand, the

ontology models (web) agents and, in particular, the way they interact and op-
erate in a collaborative environment, regardless of the framework and language
adopted for their implementation. Agents are mainly represented by means of
the mentalistic notion of agent behavior inspired by [2], encompassing goals and
tasks that are achievable (either publicly available or exposed on request) by the
agent, together with actions, sensors, and actuators used to perform operations.
On the other hand, OASIS is used to deﬁne actions that may be requested to
other agents and their related information such as operation inputs and out-
puts. Such requests are submitted by exchanging suitable fragments of OASIS,
whereas agents whose capabilities are compatible with the requested actions are
discovered by means of SPARQL queries performed over their behaviors. OA-
SIS was applied to build a TRL3 prototype of a home assistant that activates
and manages applications, devices, and users interacting with each other within
the environment [4]. OASIS was also used to deﬁne agent agreements and store
these in the IPFS ﬁle system [13] in order to reduce the transaction data stored
directly on blockchain [5].

Fig. 1. Agent representation in OASIS

OASIS models agents by publicly representing their behaviors. By exposing
behaviors, agents report to the communication peers the set of operations that
they are able to perform and, eventually, the type of data required to execute
these and the expected output. The representation of agents and their interac-
tions in OASIS is carried out along three main steps. The ﬁrst step consists in
deﬁning the template for agent behaviour: templates are high-level descriptions
of behaviors of abstract agents that can be implemented to deﬁne more speciﬁc
and concrete behaviors of real agents. For example, a template may be designed
for agents to sell and ship products to buyers, and it may be implemented by
any phone seller that ships its products using the Fedex courier: templates are
useful to guide developers to deﬁne the most suitable representation of their

Goal DescriptionTask DescriptionconsistsOfTaskDescriptionconsistsOfGoalDescriptiondependsOnTaskFormal Input ParameterhasTaskObjecthasTaskOperatorhasTaskFormalInputParameterdependsOnBehaviorhasBehaviorAgentTaskFormal Output ParameterhasTaskFormalOutputParameterTask ParameterhasTaskOperatorArgumentClass Defined propertyMembership relationLegendTaskOperator ArgumentThingrefersAsNewTo refersExactlyToActionrefersAsNewTo refersExactlyTorefersAsNewTo refersExactlyToTask OperatorTaskObject agents. The second step consists in implementing a template, which requires a
speciﬁcation of the full operational details about the sought behavior.

As depicted in Fig. 1, agent behaviors are represented by the goals to achieve,
which in turn are related with their constitutional elements, namely tasks. Tasks
represent atomic operations that agents execute, and are described by the actions
to be performed. Actions are drawn from a shared and common vocabulary, and
can be simple or composed, eventually associated with requested input parame-
ters and expected outputs. Finally, agent behaviors in OASIS may be associated
with conditionals [5], adding constraints on the execution of actions and ensur-
ing that certain conditions are veriﬁed before or after a task is executed. OASIS
conditionals are OWL sentences that have the fashion of Semantic Web Rule
Language (SWRL) rules [17], describing operations that must be triggered when
certain conditions hold.

4 Representing Ethereum through OASIS

In this section, we describe how the Ethereum blockchain is modelled in OASIS.5
OASIS provides a diﬀerent representation of blockchains with respect to Ethon
[12] and BLONDiE [16], since the description of blockchain has to be aligned
with the deﬁnitions of agent and agent behavior.

Ethereum is represented in OASIS by following the schema illustrated in
Fig. 2. Ethereum blocks embedding transactions are represented by instances
of the class EthereumBlock (subclass of BlockchainBlock ) and connected to the
transactions contained in them by means of the object-property embeds. Each
Ethereum transaction is identiﬁed by an instance of the class EthereumTrans-
action (subclass of BlockchainTransaction), encapsulating all the transaction
information.

Block miners are identiﬁed by instances of the class EthereumNode (subclass
of BlockchainNode) and linked to the mined block through the object-property
mines: instances of BlockchainNode are also instances of the class Agent, repre-
senting agents and provided with a behavior as in the OASIS fashion. Moreover,
instances of BlockchainNode (resp., EthereumNode) are connected to instances
of the class System (resp., EthereumSystem) by means of the object-property
constitutes. Such a characterization of nodes, blocks, and transactions is the
main diﬀerence with analogous approaches such as Ethon and BLONDiE, since
it allows one to describe activities carried out by both in-chain and out-of-chain
agents, thus providing a higher-level model of the two ecosystems and a means
to unify them. Speciﬁcally, Ethereum activities are classiﬁed into two main cat-
egories, namely, deployments of smart contracts, represented by instances of the
class EthereumSmartContratCreation (subclass of BlockchainSmartContractCre-
ation), and interactions with smart contracts, represented by instances of the
class EthereumSmartContractInteraction (subclass of the BlockchainSmartCon-
tractInteraction).

5 The ontology is reachable at

https://www.dmi.unict.it/santamaria/projects/oasis/sources/ether-oasis.owl

In OASIS, smart contracts deployed into the Ethereum blockchain corre-
spond to agents with well-deﬁned behaviors: interactions with smart contracts
are represented by OASIS plan executions and linked to the behavior that in-
duced the action. Speciﬁcally, a smart contract creation is represented by an in-
stance of the class BlockchainSmartContractCreation, which is related with the
description of the agent describing its behavior by the object-property describes,
the latter represented by an instance of the class BlockchainSmartContractA-
gent (subclass of the class Agent). Instances of BlockchainSmartContractCre-
ation are also associated by means of the object-property associatedWith with
the related Ethereum accounts, represented by instances of the class EthereumS-
martContractAccounts (sublcass of the class BlockchainSmartContractAccount,
which, in turn, is a subclass of BlockchainAccount). Users are instead associated
with Ethereum externally owned accounts (EOA) represented by instances of
the class EOA-EthereumAccount (sublcass of EOA-BlockchainAccount, which is
a subclass of BlockchainAccount).

OASIS identiﬁes four main general categories of smart contract agents: a)
smart contracts providing non-fungible token exchange mechanisms compatible
with the Ethereum standard ERC721, which are represented by instances of the
class EthereumERC721SmartContractAgent (subclass of the class NonFungible-
BlockchainSmartContractAgent); b) smart contracts providing fungible token
exchange mechanisms compatible with the Ethereum standard ERC20, which
are represented by instances of the class EthereumERC20SmartContractAgent
(subclass of the class FungibleBlockchainSmartContractAgent); c) agents respon-
sible for exchanging Ether cryptocurrency, which are represented by instances of
the class EtherExchangeSmartContractAgent (subclass of the class Cryptocur-
rencyExchangeBlockchainSmartContractAgent); d) general purpose and user-
deﬁned smart contract agents that do not enjoy the characteristics of the afore-
mentioned smart contracts, which are introduced by instances of the class Gen-
eralPurposeBlockchainSmartContractAgent.

In OASIS, agents may perform actions autonomously or as response to
requests of executing some operations submitted by a peer. Concerning the
blockchain ecosystem, we mainly limit ourselves to take into account only re-
quests that modify the state of the chain (both internal and external), and
hence induce transactions, even through view functions, namely functions that
do not modify the state of the chain may be represented as well.

The transactions (represented by instances of the class EthereumTransac-
tion) induced by interaction requests submitted to smart contracts are related
with instances of the class EthereumContractInteraction (subclass of the class
SmartContractInteraction) by means of the object-property describes. Instances
of EthereumContractInteraction introduce plan descriptions as in the OASIS
fashion by means of the object-property describes. Plan descriptions are ways of
characterizing requests of actions and the related actions performed by agents.
The most notable subclass of EthereumContractInteraction is the class EtherEx-
changeSmartContractInteraction, representing the transferring of Ether cryp-
tocurrency from a wallet to another. The class EtherExchangeSmartContract-

Interaction is also a subclass of the class CryptocurrencyExchangeBlockchainS-
martContractInteraction, which in turn is a subclass of the class BlockchainS-
martContractInteraction.

An example of representing Ethereum transactions in OASIS is illustrated

in Appendix A.

Fig. 2. Representing the Ethereum blockchain in OASIS

5 The ERC721 protocol in OASIS

In this section we show how OASIS represents the main ERC721 standard func-
tions for managing non-fungible tokens on the Ethereum blockchain. For space
limitations, we illustrate how the ERC721 standard for minting non-fungible
tokens is modelled in OASIS, whereas the ERC721 functions for transferring
tokens, burning tokens, granting ownership of single tokens, of all the tokens
stored in the wallet, and to verify the ownership of tokens, as represented in
OASIS, are described in Appendices B, C, D, E, and F, respectively. Finally,
ERC721 tokens are described in Appendix G.

BlockchainNoderdfs:subClassOfBlockchainBlockEthereum TransactionembedsBlockchain Transactionrdfs:subClassOfEthereumSmartContract CreationBlockchainSmartContract Creationrdfs:subClassOfEthereumSmart Contract InteractionBlockchainSmartContract Interactionrdfs:subClassOfEther Exchange SmartContract InteractionBlockchainSmartContract AgentdescribesAgentGeneralPurpose BlockchainSmartContractAgentrdfs:subClassOfNonFungibleBlockchainSmartContractAgentFungibleBlockchainSmartContractAgentEthereumERC20 SmartContract AgentEthereumERC721 SmartContractAgentEthereum SystemconstitutesSystemEOA-Ethereum AccountEthereum-SmartContract-AccountEthereumAccountEOA-Blockchain AccountBlockchain SmartContract-AccountassociatedWithrdfs:subClassOfrdfs:subClassOfrdfs:subClassOfassociatedWithrdfs:subClassOfrdfs:subClassOfrdfs:subClassOfrdfs:subClassOfdescribesPlanDescriptiondescribesCryptocurrency Exchange BlockchainInteractionEthereumNodeminesEthereumBlockBlockchain Accountrdfs:subClassOfrdfs:subClassOfAs seen in the previous section, the smart contracts deﬁned for the
instances of the
ERC721 token management are introduced by means of
class EthereumERC721SmartContractAgent
(subclass of the class Agent).
In OASIS, agents having similar behaviors inherit the representation of
their behavior
from a common template providing general descriptions
that may be customized by single agents. For this purpose, OASIS pro-
vides a template for the ERC721 standard introduced by the individual
ethereum ERC721 smart contract behavior template, which describes the behav-
iors of agents minting, burning, and transferring Ethereum NFTs according
to the guidelines of the standard. Other functions admitted by the standard
ERC721, namely the approve function (delegating wallets for managing single
tokens), the setApprovalForAll function (delegating wallets for managing all the
tokens owned), and ownerOf (for retrieving the owner of a given token), are also
represented in OASIS.

Fig. 3. OASIS behavior template for the ERC721 minting function

Fig. 3 illustrates the behavior template provided by OASIS describing the
ERC721 function for generating new tokens. The behavior template consists of a
single goal, which in turn consists of a single task. Tasks comprise four elements.
The ﬁrst element is the task operator, providing the description of the action
to be performed, namely minting. The latter is introduced by means of the

BehaviorGoal DescriptionTaskDescriptionhasTaskOperatorArgumenthasTaskObjectTemplaterefersAsNewToconsistsOf GoalDescriptionconsistsOf TaskDescriptionhasTaskOperatorhasBehaviorhasTaskOutputParameterTemplateethereum_ERC721_ smart_contract_ behavior_templateAgentBehavior Templaterdf:typemint_ERC721_token _behaviorrdf:typemint_ERC721_token _goal_descriptionrdf:typemint_ERC721_token _task_descriptionrdf:typemint_ERC721_token _task_object_templateTaskObject Templaterdf:typeEthereum TokenERC721mint_ERC721_tokenrdf:typemint_ERC721_token _task_operatorTaskOperatorrdf:typemintrefersExactlyToActionrdf:typeTaskOperator Argumentrdf:typemint_ERC721_token _task_output_templateTaskOutput Parameter Templaterdf:typemint_ERC721_token _task_operator_ argumentblockchain_ digital_tokenrefersExactlyToDescription Objectrdf:typeindividual mint (instance of the class Action), through the the object-property
refersExactlyTo. We recall that in OASIS the object-properties refersExacltyTo
and refersAsNewTo are introduced to describe the way how constituting elements
of agent behaviors must be matched when a veriﬁcation of compatible behaviors
occurs. The object-property refersExactlyTo introduces well-known entities whose
IRIs must correspond to the IRIs of the matched entities or for which the OWL
object-property sameAs has been expressed. On the contrary, the object-property
refersAsNewTo introduces entities (instances of the class ReferenceTemplate) that
are used as general descriptions encapsulating the features that the matching
entities must satisfy.

The second element of the ERC721 token minting task is the operator argu-
ment introducing the individual blockchain digital token by means of the object-
property refersExactlyTo. Operators and operator arguments identify unambigu-
ously that the referred operation consists in the generation of (digital) tokens on
the blockchain. The third and the fourth elements represent the recipient and the
outcome of the operation, respectively. The recipient is introduced by means of
a template of the task object, whereas the outcome is introduced by means of a
template of the output parameter of the task. The object template and the out-
put parameter are both connected through the object-property refersAsNewTo to
the entity mint ERC721 token, which describes the features that the recipient of
the action must have, i.e., being an instance of the class EthereumTokenERC721.

6 Conclusions

This paper leveraged the OASIS ontology towards the representation of the
Ethereum blockchain and the smart contracts deployed on it. Speciﬁc focus was
on those that comply with the ERC721 standard for NFTs management. OA-
SIS is exploited as a means of semantically representing Ethereum with the
aim of probing the blockchain for locating smart contracts and related NFTs
by specifying the desired features. In particular, the ontological representation
of OASIS allows one to ﬁnd smart contracts and related NFTs by inspecting
their behavioural descriptions through purposely crafted SPARQL queries. It
was already clear that the OASIS approach to semantic representation had the
power of generality but our ﬁndings demonstrate it at an applied level.

Future work is dense. The very next step is to extend OASIS so as to model
the standard protocols ERC20 and ERC1155 for fungible and semi-fungible to-
kens, respectively, and to represent diﬀerent blockchains such as Stellar Lumens.
Moreover, we intend to take up the design of a search engine exploiting OASIS
to ﬁnd desired smart contracts and tokens using a mechanism of auto-generating
parametric ad-hoc SPARQL queries that could be borrowed from sibling applica-
tions [4]. The present work supports the claim that the potential of the semantic
representation of blockchains has much to be unveiled in the near future.

References

1. Baqa, H., Truong, N., Crespi, N., Lee, G., Le Gall, F.: Semantic smart contracts
for blockchain-based services in the internet of things. In: 2019 IEEE 18th Inter-
national Symposium on Network Computing and Applications (NCA). pp. 1–5 (09
2019). https://doi.org/10.1109/NCA.2019.8935016

2. Bresciani, P., Perini, A., Giorgini, P., Giunchiglia, F., Mylopoulos, J.: Tropos:
An agent-oriented software development methodology. Autonomous Agents Multi
Agent Systems 8(3), 203–236 (2004)

3. Cano-Benito, J., Cimmino, A., Garc´ıa-Castro, R.: Towards blockchain and seman-
tic web. In: Abramowicz, W., Corchuelo, R. (eds.) Business Information Systems
Workshops. pp. 220–231. Springer International Publishing, Cham (2019)

4. Cantone, D., Longo, C.F., Nicolosi-Asmundo, M., Santamaria, D.F., Santoro, C.:
Towards an Ontology-Based Framework for a Behavior-Oriented Integration of the
IoT. In: Proceedings of the 20th Workshop From Objects to Agents, 26-28 June,
2019, Parma, Italy, CEUR Workshop Proceeding Vol. 2404. pp. 119–126 (2019)
5. Cantone, D., Longo, C.F., Nicolosi-Asmundo, M., Santamaria, D.F., Santoro, C.:
Ontological smart contracts in OASIS: Ontology for agents, systems, and integra-
tion of services. In: To app. in: Proceedings of IDC 2021, The 14th International
Symposium on Intelligent Distributed Computing, 16-18 September, On-line (2021)
6. Christidis, K., Devetsikiotis, M.: Blockchains and Smart Contracts for the Internet

of Things. IEEE Access 4, 2292–2303 (2016)

7. English, M.D., Auer, S., Domingue, J.: Blockchain technologies & the seman-
tic web: A framework for symbiotic development. In: Lehmann, J., Thakkar, H.,
Halilaj, L., Asmat, R. (eds.) Computer Science Conference for University of Bonn
Students. pp. 47–61 (2016)

8. Fill, H.: Applying the concept of knowledge blockchains to ontologies. In: AAAI
Spring Symposium: Combining Machine Learning with Knowledge Engineering
(2019)

9. Gangemi, A., Guarino, N., Masolo, C., Oltramari, A., Schneider, L.: Sweetening
Ontologies with DOLCE. In: G´omez-P´erez, A., Benjamins, V.R. (eds.) Knowledge
Engineering and Knowledge Management: Ontologies and the Semantic Web: 13th
International Conference, EKAW 2002 Sig¨uenza, Spain, October 1–4, 2002 Pro-
ceedings. pp. 166–181. Springer (2002)

10. Kim, H., Laskowski, M.: Toward an ontology-driven blockchain design for supply-
chain provenance. Int. Syst. in Accounting, Finance and Management 25(1), 18–27
(2018)

11. de Kruijﬀ, J., Weigand, H.: Understanding the blockchain using enterprise ontology.

In: CAiSE (2017)

12. Pfeﬀer, J., Beregszazi, A., Li, S.: Ethon - an ethereum ontology (2016), available

on-line: https://ethon.consensys.net/index.html

13. Protocol Labs: The Interplanetary File System (IPFS), https://ipfs.io/
14. Ruta, M., Scioscia, F., Ieva, S., Capurso, G., Pinto, A., Di Sciascio, E.: A blockchain
infrastructure for the semantic web of things. In: 26th Italian Symposium on Ad-
vanced Database Systems (SEBD 2018) (2018)

15. Szabo, N.: Formalizing and securing relationships on public networks. First Monday

2(9) (1997)

16. Ugarte Rojas, H.E.: A more pragmatic web 3.0: Linked blockchain data. In: Google

Scholar (2017)

17. World Wide Web Consortium: SWRL: A Semantic Web Rule Language Combining

OWL and RuleML (2004), http://www.w3.org/Submission/SWRL/

18. Xu, X., Weber, I., Staples, M., Zhu, L., Bosch, J., Bass, L., Pautasso, C., Rimba,
P.: A taxonomy of blockchain-based systems for architecture design. In: Soft-
ware Architecture (ICSA), 2017 IEEE International Conference on. pp. 243–
252. IEEE (2017), http://design.inf.usi.ch/sites/default/files/biblio/
icsa2017-blockchain.pdf

Appendix A - Example of Ethereum transaction in OASIS

Fig. 4 shows an Ethereum transaction storing the smart contract for emit-
ting NFTs of the Sicilian Wheat Bank (SWB) S.p.A.6 The individual
block node 10452395 tran 1 represents the Ethereum transaction and is re-
lated with the individual SWB SmartContractCreation describing the smart
contract by means of the object-property describes. The description of the
agent identifying the SWB smart contract is introduced by the individual
SWB smart contract agent which is linked to SWB smart contract creation by
means of the object-property describes. Finally, the node (SparkPool ) that mines
the block (block node 10452395 ) including the transaction is also associated to
the Ethereum main-net (ethereum mainnet) by means of the object-property
constitutes.

Fig. 4. Example of representing an Ethereum transaction in OASIS

6 https://www.bancadelgrano.it/en/

EthereumSmart ContractCreationdescribesEthereum ERC721 SmartContract AgentdescribesEthereum SystemconstitutesEthereum NodeminesEthereum Blockembedsethereum _mainnetrdf:typeSparkPoolrdf:typeblock_node_ 10452395block_node_ 10452395_tran_1SWB_smart_ contract_creationSWB_smart_ contract_agentrdf:typerdf:typerdf:typerdf:typeEthereum TransactionAppendix B - ERC721 transferring function in OASIS

The behaviour for the ERC721 function for transferring tokens is depicted in Fig.
5. It provides three input parameters, one for the token to be transferred and
one for each externally owned account involved in the transferring of the token,
namely the source wallet and the destination wallet. The source and destina-
tion wallets are introduced by exploiting the object-property refersAsNewTo by
means of two individuals instances of the class EOA-EthereumAccount, namely,
transfer-2 ERC721 EOA-account (the source) and transfer-3 ERC721 EOA-
account (the destination). To ensure that the token is transferred from the wallet
identiﬁed as source to the wallet identiﬁed as destination, the conditional illus-
trated in Fig. 6 is provided.

Fig. 5. OASIS behaviour template for the ERC721 transfer function

The conditional ensures the existence of a transfer activity for each token to
be transferred. The conditional has as conditional object a fresh transfer activity
and as operator the individual exist. In its turn, the transfer activity indicates

BehaviorGoal DescriptionTaskDescriptionhasTaskOperatorArgumenthasTaskObjectTemplaterefersAsNewToconsistsOf GoalDescriptionconsistsOf TaskDescriptionhasTaskOperatorhasBehaviorhasTaskInputParameterTemplateethereum_ERC721_ smart_contract_ behavior_templateAgentBehavior Templaterdf:typetransfer_ERC721 _token_behaviorrdf:typetransfer_ERC721_ token_goal_ descriptionrdf:typetransfer_ERC721 _token_task _descriptionrdf:typetransfer_ERC721 _token_task_object _templateTaskObject Templaterdf:typeEthereum TokenERC721transfer_ERC721_ tokenrdf:typetransfer_ERC721_ token_task_operatorTaskOperatorrdf:typetransferrefersExactlyToActionrdf:typeTaskOperator Argumentrdf:typetransfer_ERC721_ token_task_ input_template_1TaskInput Parameter Templaterdf:typetransfer_ERC721 _token_task_ operator_argumentblockchain_ digital_tokenrefersExactlyToDescription Objectrdf:typetransfer_ERC721_ token_task_ input_template_2hasTaskInputParameterTemplatetransfer_ERC721_ token_task_ input_template_3transfer_ERC721_ EOA-account_1 transfer_ERC721_ EOA-account_2 refersAsNewTorefersAsNewToEOA-Ethereum Accountrdf:typeas transfer source the wallet used as ﬁrst parameter in the token transferring,
as transfer destination the wallet used as second parameter, and as transferred
object the token passed as input parameter.

Fig. 6. Conditional for the ERC721 transfer function

ConditionalConditionalBodyhasConditionalBodyConditionalBody AtomConditional OperatorrefersAsNewTohasConditionalOperatortransfer_ERC721 _conditional rdf:typetransfer_ERC721 _conditional_body rdf:typetransfer_ERC721 _conditional_body _atom hasConditionalBodyAtomtransfer_ERC721 _conditional_body _atom_operator rdf:typeexist refersExactlyToActionrdf:typehasConditionalSubjectConditional Subjecttransfer_ERC721 _conditional_body _atom_subject rdf:typetransfer_ERC721 _conditional_body _atom_subject _transfer_activity Transfer Activityrdf:typetransfer_ERC721_ tokenhasTransferObjecttransfer_ERC721_ EOA-account_1 hasTransferSourcetransfer_ERC721_ EOA-account_2 hasTransferDestinationAppendix C - ERC721 token burning function in OASIS

is

of

this

Fig.

case,

the
in

behaviour

burning
7.

function
In

for
depicted

the ERC721
the

stan-
The
dard
individual
ethereum ERC721 smart contract behavior template (representing the ERC721
behaviour template) is also connected to the behaviour describing the burning
function, whose structure is analogous to the minting function but with a
diﬀerent action and with an input parameter template instead of an output
parameter template. The action introduced in the burning function is the
individual burn, whereas the input parameter template is connected with an
individual representing the token to be burnt that is passed as input to the
burning function.

Fig. 7. OASIS behaviour template for the ERC721 burning function

BehaviorGoal DescriptionTaskDescriptionhasTaskOperatorArgumenthasTaskObjectTemplaterefersAsNewToconsistsOf GoalDescriptionconsistsOf TaskDescriptionhasTaskOperatorhasBehaviorhasTaskInputParameterTemplateethereum_ERC721_ smart_contract_ behavior_templateAgentBehavior Templaterdf:typeburn_ERC721_token _behaviorrdf:typeburn_ERC721_token _goal_descriptionrdf:typeburn_ERC721_token _task_descriptionrdf:typeburn_ERC721_token _task_object_templateTaskObject Templaterdf:typeEthereum TokenERC721burn_ERC721_tokenrdf:typeburn_ERC721_token _task_operatorTaskOperatorrdf:typeburnrefersExactlyToActionrdf:typeTaskOperator Argumentrdf:typeburn_ERC721_token _task_input_templateTaskInput Parameter Templaterdf:typeburn_ERC721_token _task_operator_ argumentblockchain_ digital_tokenrefersExactlyToDescription Objectrdf:typeAppendix D - ERC721 token approve function in OASIS

The standard ERC721 allows the owner of tokens to delegate wallets to man-
age tokens on his behalf. Authorizations may be carried out either on a single
token or on any token stored in his wallet. The ERC721 function approve and
setApprovalForAll are introduced for the former and the latter case, respectively.

In case that an externally owned account is authorized to manage a single
token, the behaviour in Fig. 8 is adopted. Speciﬁcally, the behaviour introduces as
input parameter the account to be authorized and the granted token, as operator
the instance delegate, and as operator argument the instance ownership. The
conditional in Fig. 9 ensures that only the operation of burning and transferring
may be pursued when the wallet is authorized to operate on behalf of his owner.
Such a condition is guaranteed by the existence of a delegation activity (instance
of DelegationActivity), having as delegation property the instances burn and
transfer. The subject and the object of the delegation activity are the authorized
wallet and the granted token, respectively.

Fig. 8. OASIS behaviour template for the ERC721 approve function

BehaviorGoal DescriptionTaskDescriptionhasTaskOperatorArgumenthasTaskObjectTemplaterefersAsNewToconsistsOf GoalDescriptionconsistsOf TaskDescriptionhasTaskOperatorhasBehaviorhasTaskInputParameterTemplateethereum_ERC721_ smart_contract_ behavior_templateAgentBehavior Templaterdf:typeapprove_ERC721_ token_behaviorrdf:typeapprove_ERC721_ token_goal_ descriptionrdf:typeapprove_ERC721_ token_ task_descriptionrdf:typeapprove_ERC721_token _task_object_templateTaskObject Templaterdf:typeEthereum TokenERC721approve_ERC721 _tokenrdf:typeapprove_ERC721 _token_task_operatorTaskOperatorrdf:typedelegaterefersExactlyToActionrdf:typeTaskOperator Argumentrdf:typeapprove_ERC721_token _task_input_template_1TaskInput Parameter Templaterdf:typeapprove_ERC721_ token_task _operator_ argumentownershiprefersExactlyToDescription Objectrdf:typeapprove_ERC721_token _task_input_template_2hasTaskInputParameterTemplateTaskInput Parameter Templaterdf:typeapprove_ERC721 _token_EOA-AccountrefersAsNewToEOA-Ethereum Accountrdf:typeFig. 9. Conditional for the ERC721 approve function

ConditionalConditionalBodyhasConditionalBodyConditionalBody AtomConditional OperatorrefersAsNewTohasConditionalOperatorapprove_ERC721 _conditional rdf:typeapprove_ERC721 _conditional_body rdf:typeapprove_ERC721 _conditional_body _atom hasConditionalBodyAtomapprove_ERC721 _conditional_body _atom_operator rdf:typeexist refersExactlyToActionrdf:typehasConditionalSubjectConditional Subjectapprove_ERC721 _conditional_body _atom_subject refersAsNewTordf:typeapprove_ERC721 _conditional_body _atom_subject_ delegationDelegation Activityapprove_ERC721 _conditional_body _atom_subject_ delegation_propertyhasDelegationPropertyDelegation Propertyrdf:typetransferrefersExactlyToburnapprove_ERC721 _conditional_body _atom_subject_ delegation_subjectDelegation Subjectrdf:typehasDelegationSubjectrdf:typeapprove_ERC721_ token_EOA-AccountrefersAsNewToapprove_ERC721 _tokenapprove_ERC721 _conditional_body _atom_subject_ delegation_objecthasDelegationObjectDelegation ObjectrefersAsNewTordf:typeAppendix E - ERC721 setApprovalForAll function in
OASIS

The Ethereum ERC721 standard allows wallet owners to authorize an account
to manage all the tokens owned. The corresponding behaviour is illustrated in
Fig. 10. The behaviour is close to the behaviour for granting a single token, with
the only diﬀerence that there is no input parameter concerning the granted token.
In such a case, the conditional in Fig. 11 ensures that authorization is extended
to each token owned. Indeed, the delegation object expresses the object-property
hasSpeciﬁcity with value the individual any.

Fig. 10. OASIS behaviour template for the ERC721 setApprovalForAll function

BehaviorGoal DescriptionTaskDescriptionhasTaskOperatorArgumenthasTaskObjectTemplaterefersAsNewToconsistsOf GoalDescriptionconsistsOf TaskDescriptionhasTaskOperatorhasBehaviorethereum_ERC721_ smart_contract_ behavior_templateAgentBehavior Templaterdf:typeapproveAll_ERC721_ token_behaviorrdf:typeapproveAll_ERC721_ token_goal_ descriptionrdf:typeapproveAll_ERC721_ token_ task_descriptionrdf:typeapproveAll_ERC721 _token_task_object _templateTaskObject Templaterdf:typeEthereum TokenERC721approveAll_ERC721 _tokenrdf:typeapproveAll_ERC721 _token_task_operatorTaskOperatorrdf:typedelegaterefersExactlyToActionrdf:typeTaskOperator Argumentrdf:typeapproveAll_ERC721_ token_task_operator _argumentownershiprefersExactlyToDescription Objectrdf:typehasTaskInputParameterTemplateapproveAll_ERC721_ token_task_input_ template EOA-Ethereum AccountapproveAll_ERC721 _token_EOA-AccountrefersAsNewTordf:typeFig. 11. Conditional for the ERC721 approve-all function

ConditionalConditionalBodyhasConditionalBodyConditionalBody AtomConditional OperatorrefersAsNewTohasConditionalOperatorapproveAll _ERC721 _conditional rdf:typeapproveAll_ERC721 _conditional_body rdf:typeapproveAll_ERC721 _conditional_body _atom hasConditionalBodyAtomapproveAll_ERC721 _conditional_body _atom_operator rdf:typeexist refersExactlyToActionrdf:typehasConditionalSubjectConditional SubjectapproveAll_ERC721 _conditional_body _atom_subject rdf:typeapproveAll_ERC721 _conditional_body _atom_subject_ delegationDelegation ActivityapproveAll_ERC721 _conditional_body _atom_subject _delegation_propertyhasDelegationPropertyDelegation Propertyrdf:typetransferrefersExactlyToburnapproveAll_ERC721 _conditional_body _atom_subject _delegation_subjectDelegation Subjectrdf:typehasDelegationSubjectrdf:typeapproveAll_ERC721 _token_EOA-AccountrefersAsNewToapproveAll_ERC721 _tokenapproveAll_ERC721 _conditional_body _atom_subject _delegation_objecthasDelegationObjectDelegation ObjectrefersAsNewTordf:typeEOA-Ethereum Accountrdf:typeanyhasSpecificityAppendix F - ERC721 token ownership retrieval function
in OASIS

The Ethereum ERC721 standard allows one to retrieve the wallet owner of a
token. The corresponding behaviour is illustrated in Fig. 12.

The behaviour is related with a task description providing as recipient and
as input parameter the selected token, whose owner has to be retrieved. The
conditional in Fig. 13 ensures that the wallet retrieved is the eﬀective owner of
the token considered.

Fig. 12. OASIS behaviour template for the ERC721 function for retrieving the token’s
owner

BehaviorGoal DescriptionTaskDescriptionhasTaskOperatorArgumenthasTaskObjectTemplaterefersAsNewToconsistsOf GoalDescriptionconsistsOf TaskDescriptionhasTaskOperatorhasBehaviorhasTaskInputParameterTemplateethereum_ERC721_ smart_contract_ behavior_templateAgentBehavior Templaterdf:typeowner_ERC721_ token_behaviorrdf:typeowner_ERC721_ token_goal_ descriptionrdf:typeowner_ERC721_token task_descriptionrdf:typeowner_ERC721_token _task_object_templateTaskObject Templaterdf:typeEthereum TokenERC721owner_ERC721 _tokenrdf:typeowner_ERC721 _token_task_operatorTaskOperatorrdf:typeretrieverefersExactlyToActionrdf:typeTaskOperator Argumentrdf:typeowner_ERC721_token _task_input_templateTaskInput Parameter Templaterdf:typeowner_ERC721_ token_task _operator_argumentownerrefersExactlyToDescription Objectrdf:typeowner_ERC721_token _task_output_templatehasTaskOutputParameterTemplateTaskOutput Parameter Templaterdf:typeowner_ERC721 _token_EOA-AccountrefersAsNewToEOA-Ethereum Accountrdf:typeFig. 13. OASIS conditional for the ERC721 function for retrieving the token’s owner

ConditionalConditionalBodyhasConditionalBodyConditionalBody AtomConditional OperatorrefersAsNewTohasConditionalOperatorowner_ERC721 _conditional rdf:typeowner_ERC721 _conditional_body rdf:typeowner_ERC721 _conditional_body _atom hasConditionalBodyAtomowner_ERC721 _conditional_body _atom_operator rdf:typeown refersExactlyToActionrdf:typehasConditionalSubjectConditional Subjecttransfer_ERC721 _conditional_body _atom_subject rdf:typerefersAsNewToowner_ERC721 _conditional_body _atom_subject rdf:typeowner_ERC721 _token_EOA-Accounttransfer_ERC721 _conditional_body _atom_object Conditional Objectrdf:typehasConditionalObjectrefersAsNewToowner_ERC721 _tokenAppendix G - ERC721 token representation in OASIS

Tokens are depicted in Fig. 14. There are four main types of token:

– non-fungible tokens, represented by instances of the class EthereumSemi-
FungibleToken, the latter containing the class EthereumTokenERC721 that
represents non-fungible tokens compliant with the ERC721 standard proto-
col;

– fungible tokens, represented by instances of the class EthereumFungibleTo-
ken, the latter containing the class EthereumTokenERC20 that represents
fungible tokens compliant with the ERC20 standard protocol;

– semi-fungible tokens, represented by instance of the class EthereumSemi-
FungibleToken, the latter containing the class EthereumTokenERC1155 that
represents semi-fungible tokens compliant with the ERC1155 standard pro-
tocol;

– custom user-deﬁned tokens not compliant with the ERC standard protocols,

represented by instances of the class EthereumCustomToken.

Fig. 14. Ethereum token representation in OASIS

The four mentioned classes are deﬁned as subclass of the class EthereumTo-
ken. Additionally, tokens that have been deﬁnitively destroyed are also instances
of the class BurnedEthereumToken.

EthereumTokenEthereumTokenERC721EthereumTokenERC20EthereumToken ERC1155rdfs:subClassOfrdfs:subClassOfBurnedEthereumTokenrdfs:subClassOfEthereumToken ActiveEndurantFeaturehasEthereumToken EndurantFeatureEthereumTokenDeprecated EndurantFeatureEthereumWalletOwner EndurantFeaturerdfs:subClassOfEthereumNon FungibleTokenEthereumFungibleTokenrdfs:subClassOfEthereumSemi FungibleTokenrdfs:subClassOfrdfs:subClassOfEthereumTokenFeature ModificationActivityhasEthereumTokenFeature ModificationSourcehasEthereumTokenFeature ModificationResultisEthereumTokenFeature ModifiedInEthereumToken EndurantFeaturerdfs:subClassOfEthereum CustomTokenrdfs:subClassOfTokens carry two types of features [9], a) perdurant features such as the to-
ken ID, that never change and are embedded with the entity representing the
token and b) endurant features, that change during the life-span of the token
and are associated with an instance of the class EthereumTokenEndurantFeatures
(subclass of EndurantFeature), by means of the object-property hasEthereum-
TokenEndurantFeature. The most notable subclass of EndurantFeature is the
class EthereumWalletOwnerEndurantFeature, which describes the wallet of the
token’s owner (by means of the data-properties isInTheWalletOf ). When the en-
durant features of a token are modiﬁed by the smart contract managing it, they
became deprecated and replaced by a new set of features by means of a modiﬁ-
cation activity. Those new features are introduced by means of a fresh instance
of the class EndurantFeature. Modiﬁcation of tokens is allowed only if it involves
endurant features and hence perdurant features cannot change. Endurant fea-
tures may be replaced with other endurant features by introducing an instance
of the class EthereumTokenFeatureModiﬁcationActivity which is connected with:

– the changed endurant feature, which is also instance of the class DeprecatedE-

thereumTokenEndurantFeature, by means of the object-property hasEthereum-
TokenFeatureModiﬁcationSource;

– the new endurant feature, by means of the object-property hasEthereumTo-

kenFeatureModiﬁcationResult.

Moreover, the modiﬁed endurant feature is connected with the endurant fea-
ture that replaces it by means of the object-property isEthereumTokenFeature
ModiﬁedIn, whereas the token embedding the features is connected with the new
endurant feature by means of the object-property hasEthereumTokenEndurant-
Feature as described above.

