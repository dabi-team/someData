A Blockchain-based Secure Storage Scheme for
Medical Information

Zhijie Sun ID Dezhi Han ID , Dun Li

ID , Xiangsheng Wang ID , Chin-Chen Chang, Zhongdai Wu

1

2
2
0
2

l
u
J

3
1

]

R
C
.
s
c
[

1
v
2
0
1
6
0
.
7
0
2
2
:
v
i
X
r
a

Abstract—Medical data involves a large amount of personal
information and is highly privacy sensitive. In the age of big data,
the increasing informatization of healthcare makes it vital that
medical information is stored securely and accurately. However,
current medical information is subject to the risk of privacy
leakage and difﬁcult to share. To address these issues, this
paper proposes a healthcare information security storage solution
based on Hyperledger Fabric and the Attribute-Based Access
Control (ABAC) framework. The scheme ﬁrst utilizes attribute-
based access control, which allows dynamic and ﬁne-grained
information, and then stores the medical
access to medical
information in the blockchain, which can be secured and tamper-
proof by formulating corresponding smart contracts. In addition,
this solution also incorporates IPFS technology to relieve the
storage pressure of the blockchain. Experiments show that the
proposed scheme combining access control of attributes and
blockchain technology in this paper can not only ensure the
secure storage and integrity of medical information but also has
a high throughput when accessing medical information.

Index Terms—Medical Information, Hyperledger fabric, Smart

contracts, ABAC, IPFS.

I. INTRODUCTION

W ITH the development of technology, various emerging

technologies are merging with the healthcare sector,
making the process of building healthcare information technol-
ogy increasingly sophisticated [1]. The World Health Organi-
sation deﬁnes medical information as the most innovative and
shareable asset. Nowadays, the number of medical institutions
around the world presents an index stage growth, and the
medical data generated by medical institutions also present
explosive growth. Due to the deepening of the degree of infor-
mation in hospital information, the information system within
the hospital gradually expands from a single HIS charging
system into a system with electronic medical records. The
medical data is accompanied by the registration, diagnosis,
and hospitalization, medical data is gradually complex and
stereochemical, and the importance of privacy and security is
signiﬁcantly increased [2].

Currently,

the combination of traditional paper medical
records and centralized medical data management systems is

Zhijie Sun, Dezhi Han, and Xiangsheng Wang are with the College of
Information Engineering at Shanghai Maritime University, China. E-mail:
S19117157825@163.com.

Dun Li is with the College of Information Engineering at Shanghai Mar-
itime University, China and Telecom SudParis, IMT, Institut Polytechnique
de Paris, France. E-mail: lidunshmtu@outlook.com. (Corresponding Author)
Chin-Chen Chang is with the Department of Information Engineering
and Computer Science, Feng Chia University, Taichung, Taiwan. E-mail:
alan3c@gmail.com.

Zhongdai Wu is with theCOSCO Shipping Technology Co., Shanghai,

China. E-mail: wzd@cnshipping.com.

still the main form of medical institutions to store patients’
medical data as shown in Fig. 1. However,
this form of
medical system faces severe risks of privacy disclosure [3].
Therefore, the transformation of the centralized medical data
management system to distributed medical data sharing system
is an irresistible trend of the whole society [4].

Fig. 1. Medical data exchange

However, since most medical and health institutions are iso-
lated from each other, they store and maintain medical health
data, forming data islands. This is not only not conducive
to long-term records of patients with their disease develop-
ment, but also caused a waste of medical equipment and a
large number of medical health data resources duplication.
To maximize the value of medical health data, to meet the
core needs of medical information construction, and provide
more humanized and reasonable services for patients, sharing
data between medical institutions is an inevitable trend [5].
In addition, due to the extensive use of emerging Internet
technology in the medical ﬁeld, the medical data transmission
methods and paths have become increasingly diversiﬁed, and
gradually transferred from the internal transmission of hospi-
tals to the transmission between medical institutions, medical
institutions, and insurance and other institutions, and between
patients and medical institutions, which also greatly increases
the difﬁculty of patient data protection [6]. The above reasons
lead to the characteristics of large scale, complex structure,
and rapid growth of medical data, so it is difﬁcult to ﬁnd an

 
 
 
 
 
 
2

ideal method to store medical information.

follows.

Fortunately, in recent years, the rise of blockchain tech-
nology has brought new solutions to the secure storage of
medical information. In essence, blockchain is a distributed
database with the characteristics of decentralization, secu-
rity, and transparency [7]–[9]. As a decentralized database,
blockchain provides a reliable solution to the problems of poor
sharing, low effectiveness, and weak security in medical data
management. Data can be recorded on the real-time shared
blockchain platform, and timestamps are added to ensure
the immutability of the data. The tamper resistance of the
blockchain ensures the security of medical data [10]. On
the licensed blockchain, blockchain members can obtain data
information through access operations.

Speciﬁcally, on the license blockchain, the blockchain mem-
ber can obtain information of data by accessing operations,
allowing the member to view outline information, to ensure
sharing of medical data on a non-licked blockchain. Main-
stream blockchain projects can be divided into four cate-
gories: cryptocurrency, platform, application, and asset token.
Blockchain technology is widely used in smart cities [11],
[12], Internet of things (IoT) [13]–[16], smart ﬁnance [17],
Internet of Vehicles (IoV) [18]–[22], and education [23]–[25].
Medical data involves personal privacy and sensitive informa-
tion, such as personal name, ID number, and home address,
so medical records become the primary goal of information
theft, so it is urgent to combine blockchain technology and
the medical sector.

Furthermore, blockchain has entered a new era with the
emergence and continuous improvement of smart contracts and
further development of blockchain projects such as Ether and
Hyperledger. Smart contracts are programmable and Turing-
complete [26]. Transactions can automatically initiate code
based on rules set by the system, and the emergence of
smart contracts has laid an important foundation for merging
blockchain technology and medical information [27]. In the
open network environment of blockchain, the attribute-based
access control(ABAC) model is a suitable and effective access
control model. As a ﬂexible ﬁne-grained access control method
[28], the model mainly determines that the data requester
has the correct attributes to determine the data requester’s
access control authority to private data resources. So far,
the application of blockchain technology in the medical ﬁeld
is not satisfactory. In this regard, we store medical data into
blockchain by deploying intelligent contracts to ensure the pri-
vacy and security of medical data. At the same time, the ABAC
model is introduced for access control to ensure that users
can access them safely and efﬁciently. In addition, due to the
huge and complex medical information, to alleviate the storage
pressure of blockchain, we also combine the interstellar ﬁle
system to realize the slimming of the whole blockchain and
further improve the efﬁciency of user access.Compared with
existing studies, the model proposed in this paper realizes more
ﬁne-grained access to medical information and at the same
time alleviates the storage pressure of blockchain, making the
throughput of the system greatly improved, which is also the
advantage of this scheme.

Speciﬁcally, the main contributions of this study are as

• This paper applies blockchain to medical information
management and realizes decentralized management and
secure storage with the help of distributed consensus and
authentication mechanisms.

• We design an auxiliary architecture based on ABAC,
which can realize ﬁne-grained access control and dy-
namic management of permissions.

• In this paper, we use smart contracts to deﬁne multi-
tier data structures, access policies, and system workﬂows
to improve the efﬁciency of data storage, retrieval, and
query.

• We ease the storage pressure of blockchain with the

interstellar ﬁle system.

• This paper designs simulation experiments and veriﬁes

the performance of the scheme.

The rest of this article is as follows. Section II describes
the related works. In Section III, we introduce the necessary
background and technologies. Next, Section IV introduces the
model, assumptions, and design objectives of the proposed
scheme. Then, Section V sets up two groups of comparative
experiments and then analyzes the results. Finally, in Section
VI, we summarize this paper and discuss further work.

II. RELATED WORK

In this section, we survey blockchain-based secure stor-
age in section II-A and blockchain-based secure sharing in
section II-B.Although existing models and schemes achieve
secure storage and sharing of medical information, they fail
to realize ﬁne-grained access to medical information, which
will undoubtedly reduce the user experience. In addition, most
existing studies have not considered the storage bottleneck of
blockchain. In order to make up for the deﬁciency of existing
studies, this paper not only achieves the safe storage and
sharing of medical information, but also optimizes the access
control operation of medical information, and alleviates the
storage pressure of blockchain to a certain extent, which is
also the difference between the proposed scheme in this paper
and the existing model.

A. Blockchain-based secure storage of medical data

The extension of blockchain technology to the healthcare
ﬁeld has a profound impact due to its decentralized, tamper-
proof, and transparent nature.

Azaria et al. [29] propose a decentralized blockchain-based
MedRec system to handle EHR. MedRec has a modular design
where the administrative privileges, authorization, and data
sharing of the system are among the participants. Medblock
[30] is a hybrid architecture based on blockchain to protect
EMR. The architecture nodes of the architecture are divided
into endorsement nodes, sorting nodes, and submission nodes.
The consensus algorithm used is a variant of the part consensus
algorithm. Conceic¸ ˜ao et al. [31] propose a generic architecture
for storing patient Electronic Health Record (EHR) data using
blockchain technology. Yang and Li [32] propose an EHR
architecture based on blockchain. The architecture prevents
tampering and abuse of EHR by tracking all events in the

blockchain. Kushch et al. [33] proposed a special data struc-
ture for storing electronic medical data on the blockchain:
blockchain tree. The structure of the blockchain tree is a sub-
chain and one or more of a recorded patient identity and a
sub-chain stored in additional critical information (such as
diagnostic records), and blocks on the main chain are initial
blocks of the sub-chain.

B. Blockchain-based secure sharing of medical data

In addition to safe storage, the blockchain is equally widely
used in security sharing. In medical record management, the
application and research of the blockchain in the medical ﬁeld
have received much attention, and many research institutions
around the world participate.

Xia et al. [34] proposed a blockchain-based system called
men shared. The system can minimize the risk of data privacy
and can be used to solve the problem of medical data sharing
between medical data custodians in an untrusted environment.
Zhang et al. [35] propose a blockchain-based medical data
sharing scheme, which uses the private blockchain owned
by the hospital to store the patient’s health data, and uses
the consortium blockchain to save the security index. Zhang
et al. [36] combined with artiﬁcial intelligence technology
and blockchain technology proposed a safe and transparent
medical data-sharing platform. This platform utilizes the trans-
parency of the zone chain for data tracking, imparting the
characteristics of non-tampered. Liu et al. [37] use blockchain
technology and cloud storage technology to propose a data-
sharing scheme for paying attention to privacy protection in
the medical ﬁeld. The scheme stores the original medical
data in the cloud indexes the data in the blockchain and
prevents the data from being maliciously modiﬁed by the
tamper-proof feature of the blockchain. To realize the dynamic
communication between medical alliance chains, Qiao et al.
[38] propose a scheme that allows dynamic communication
between healthcare alliance chains, which enables patients to
securely and autonomously share their records in an authorized
healthcare alliance chain within milliseconds.

III. PRELIMINARIES

This section mainly introduces the architecture of medical
information security storage schemes based on blockchains
and access controls. Section III-A introduces the structure of
the scheme, section III-B presents the workﬂow, section III-C,
and section III-D describes the smart contract design.

A. Blockchain technology in healthcare information storage

Blockchain helps to build decentralized data sharing and
application mechanisms. Traditionally, medical
information
management is a unilaterally maintained information system.
The drawback of this mode of management is that too cen-
tralized information management power makes it difﬁcult to
achieve real information sharing. Blockchain technology in-
troduces the characteristics of distributed books. Since the ﬁle
information input under the blockchain technology is jointly
maintained and supervised by multiple parties, the joint su-
pervision of various information data by multiple departments

3

ensures the openness and transparency of data information and
also determines the openness and transparency of blockchain
technology transactions rules [39]. This will fundamentally
solve the problems of low work efﬁciency and too chaotic a
working state in traditional medical information management.
Moreover, blockchain can construct a credible deposit sys-
tem. The management of medical archives information is
nothing more than the four most basic processes of addition,
deletion, modiﬁcation, and query. However, in blockchain, the
two basic processes of deletion and modiﬁcation in archives
information management are abandoned, and the process of
archives information processing is reduced. The irreparability
and security of data information in blockchain are guaranteed
from the technical design. In addition, each block of informa-
tion in the blockchain records the creation time and the hash
value of the previous block. This chain structure marked with
time itself facilitates the usual audit, tracking, and traceability,
and improves the utilization rate of medical information.

Finally, blockchain can solidify data exchange and beneﬁt
allocation rules. The combination of intelligent contract and
block link technology can maximize the automation of archival
information sharing. Once the smart contract is implemented,
it cannot stop and is not interfered with by external operations.
Hospitals can use this feature to entrench interest distribution
rules [40]. In medical information sharing, intelligent contracts
can change the behavior of participants involved in information
sharing into active participation, promote the efﬁciency and
speed of information sharing, and truly maximize the value of
medical information. In this compulsory information sharing,
the secret box operation in traditional information sharing is
constrained, and the quality of medical data information is
ensured.

B. Hyperledger Fabric

In recent years, cryptocurrencies, represented by Bitcoin,
have achieved great success, which has successfully drawn the
world’s attention to blockchain technology, however, such pub-
lic chains have problems such as low transaction throughput,
long transaction times, wasted resources, and data consistency.
To address these issues the Linux Foundation created the
Hyperledger project in 2015, which is one of the world’s
largest blockchain projects and is often used as a platform
for enterprise blockchain development. Hyperledger Fabric is
designed with a modular architecture that includes members,
blockchain, transactions, and smart contracts, as shown in
Fig. 2. Member management module for the requirements
of the enterprise-level blockchain to security and privacy,
the member management module has strengthened the user’s
joining permissions, and anyone involved in the transaction
needs to be certiﬁed by the PKI public key infrastructure.
The blockchain module uses the P2P protocol
to manage
distributed books and can conﬁgure different consensus pro-
tocols according to different requirements, and record the
transaction history in chain classiﬁcation, with the latest
state of the World State mechanism,
the speciﬁc state of
the ledger is speciﬁcally shown in Fig. 3.Hyperledger Fab-
ric employs Apache Kafka(Distributed Messaging System)

based on ZooKeeper(Distributed Services Framework). Kafka
is essentially a message processing system where consumers
of messages subscribe to speciﬁc topics and producers are
responsible for publishing messages. In the whole Hyperledger
Fabric network KafKa mainly provides transaction ordering
service, that is, KafKa realizes the ordering service for all
transaction requests in the network.

Fig. 2. The module architecture diagram of Hyperledger fabric

Fig. 3. Structure of the ledger in Hyperledger Fabric.

4

The transaction module controls the data in the transaction
process in the form of deployment transactions and invocation
transactions, where deployment transactions are installed on
all peer nodes by Chaincode when the transaction is success-
fully executed, while invocation transactions are conducted
by invoking the speciﬁed functions in the Chaincode through
the SDK provided by the Fabric Software Development Kit.
Smart contracts record the business logic agreed by members
of Fabric’s federated chain and can be written in common
languages such as Go and Java, overcoming the shortcomings
of traditional blockchains that are limited to domain-speciﬁc
languages.

C. Attribute based access control model

Attribute based access control is a comprehensive considera-
tion of user, resource, operation, and contextual access control
policies. It determines whether to grant access to the requester
to conﬁgure the correct attribute, that is, this policy does not
need to specify the relationship between the data requester and
the private data, but by judging whether the data requester’s
attribute determines its pair access control permissions for this
private data. Since the strategy is a more stable attribute due to
the system operation. Therefore, using the attribute to describe
the access control policy to separate attribute management and
access decision phase, and the speciﬁc implementation can
increase or delete the policy according to the actual situation,
implement the update modiﬁcation of the policy, reﬁne the
access control particle size, and have good ﬂexibility, sexuality
and scalability. Attributes are the core of the policy, which
can be deﬁned by a quadruplet A ∈ {S, O, P, E}, where
each ﬁeld has the following meaning: A represents attributes,
each of which exists as a key-value pair. S represents sub-
ject attributes, including the subject’s identity, role, position,
and credentials. O represents object attributes, including the
object’s identity, location, department, type, data structure,
etc. E represents the environmental attributes, including time,
system status, security level, current access, etc. P represents
the operation attributes, mainly used to describe the subject’s
access to the object type, such as write, modify, delete, etc. The
structure of the model is shown in Fig. 4. An attribute-based
access control request (ABACR) can be deﬁned as ABACR =
{AS ∧ AO ∧ AP ∧ AE}, where AS represents the subject
attribute, AO represents the object attribute, AP represents
the operation attribute, and AE represents the environment
attribute. R represents a set of rules, which can also be de-
ﬁned by a quadruplet: R (A (Si) , A (Oi) , A (Ei) , A (Pi)) →
{Allow,Deny}, this formula indicates that the subject authoriz-
ing attribute Si at the time of access performs an access action
Pi on object Oi in a contextual environment with attribute
value Ei, with two outcomes i.e. allow or deny.

D. InterPlanetary File System (IPFS)

Designed by Juan Benet and developed by Protocol Labs
with the help of the open-source community since 2014,
IPFS (Interstellar File System) is a network transfer protocol
designed to create persistent and distributed storage and shar-
ing of ﬁles. IPFS combines features of existing technologies,

5

A. Scheme architecture

The architecture of the system consists of a user, an
attribute-based access control model, an interstellar ﬁle system,
and a blockchain, the detailed architecture of which is shown
in Fig. 5.

Fig. 4. Structure of the ABAC model

including DHT, BitTorrent, Git, and SFS,
to achieve the
primary function of storing data locally and connecting nodes
to each other for data transfer. IPFS was originally designed to
build a better resource network than the now commonly used
HTTP protocol to compensate for the shortcomings of HTTP.
Compared to HTTP, IPFS exhibits advantages such as fast
download speeds, global storage, security, and data perpetua-
tion. IPFS is essentially a content-addressable, versioned, peer-
to-peer hypermedia distributed storage and transport protocol.
It has the following features. Content Addressable: IPFS only
cares about the content of the ﬁle, generating a unique hash
mark from the ﬁle content, which is accessed by the unique
mark and checked in advance to see if the mark has already
been stored. If it has been stored, it is read directly from
other nodes, without the need for duplicate storage, saving
space in a sense. Slicing large ﬁles: ﬁles placed in IPFS nodes
do not care about their storage path or name. IPFS provides
the ability to slice and dice large ﬁles, downloading multiple
slices in parallel when used. Decentralized, distributed network
structure: Such a network structure is suitable for solving
bottlenecks in the blockchain’s storage capacity by storing
large amounts of hypermedia data on IPFS. Encrypted storage:
IPFS adds a cryptographic hash unique to digital information
to the encrypted data, and the corresponding hash of the stored
ﬁle cannot be changed. The hash corresponds to the ﬁle one-to-
one. In an IPFS network, there is no need to take into account
the location of the server and the name and path of the ﬁle.
When a ﬁle is placed in an IPFS node, each ﬁle is given
a unique hash value calculated based on its contents. When
access to a ﬁle is requested, IPFS ﬁnds the node where the
ﬁle is located based on the hash table and fetches the ﬁle.
IPFS combined with blockchain can be a good solution to the
blockchain storage problem.

IV. EXPERIMENTAL METHODS

This section mainly introduces the architecture of medical
information security storage schemes based on blockchains
and access controls. Section ?? introduces the structure of the
scheme, section IV-B presents the workﬂow, and section IV-C
describes the smart contract design of the scheme.

Fig. 5. The proposed scheme architecture

Users can be divided into two types: normal users, who
can be doctors and patients, both of whom can participate
in the authorization of the solution and thus access medical
data. Administrator users are responsible for managing the
blockchain and can create or update smart contracts. The
combination of the ABAC model and this scheme forms
a medical
information access control model. The speciﬁc
description of the model is as follows.

P = {AS, AO, AP, AE}

AS = {userId, role, department}

AO = {recordId}

AP =

(cid:40)

1, allow
0, deny

AE = {createT ime, endT ime}

(1)

(2)

(3)

(4)

(5)

Policy(P): It represents the access control policy based on
attributes contains four elements in the set, namely AS, AO,
AP, and AE.

Attribute of Subject(AS): It includes three main types of
attributes, namely user ID (identiﬁes the unique identity of
the user), user role (doctor and patient), and user department
(speciﬁc department).

Attribute of Object(AO): It includes the medical record ID

(identiﬁes the uniqueness of the record).

Attribute of Permission(AP): An attribute that

indicates
whether the user has access to the medical record, with 1
representing permission and 0 representing denial.

Attribute of Environment(AE): The environmental condi-
tions required for the access control policy, mainly including
the creation time (when the policy was created) and the end
time (when the policy expires). If the current time of a policy
is later than the end time, it means that the policy is invalid.

6

IPFS: It is mainly used to mitigate the storage pressure of the
blockchain. The medical data stored in IPFS will be stored
in a MerkleDAG to ensure the security of the data, which is
called the address hash. Then, the address hash is stored into
the zone chain, thereby replacing the original data. In IPFS,
the original data is subjected to the SHA256 algorithm twice
and then Base58 encoding, resulting in a hash length of 33
Bytes. So the original medical information is replaced with
the hash address, which will greatly reduce a block. The size
of the whole blockchain is achieved.

Blockchain: The blockchain is the heart of the solution,
a distributed network of trusted nodes that ensures the syn-
chronization and storage of medical data, thus ensuring data
security and accuracy. In this solution the blockchain is
developed based on Hyperledger Fabric and access control
can be implemented by writing smart contracts.

TABLE I
THE SUMMARY OF ACRONYMS & DEFINITIONS

Notations
CA
Cert
conf
F(x)...
CC
ASC
PSC
RSC
Image
Container
TX
AS,AO,AP,AE
Ledger
SDB
IPFS
Cli
ABACP

Discription
Certiﬁcate Authority
Certiﬁcate ﬁle
Conﬁg ﬁle of the node
Functions deﬁned in source code
Chaincode in Hyperledger Fabric
Access Smart Contract
Policy Smart Contract
Record Smart Contract
Docker Image
Docker Container
Transaction in blockchain
Attributes of subject,object,permission,and environment
Ledger in Hyperledger Fabric
State Database in Hyperledger Fabric
InterPlanetary File System
Blockchain system client
Attribute based Access Control Policy

B. Workﬂow

The workﬂow of the proposed scheme mainly contains
four parts. This section describes each part, and the speciﬁc
workﬂow is shown in Fig. 6. The symbols used are shown in
Tab. I.

Fig. 6. The workﬂow of the proposed scheme

1) Part 1: The basic procedure of this program is the in-
stallation of the construction and Chaincode of the blockchain
network. These basic processes need to be completed by the
administrator user. Process 1 is mainly divided into three steps
as follows.

Step 1: Prior to building a speciﬁc blockchain network, all
members of the network must register the certiﬁcate and the
required certiﬁcate is issued by CA.

All peer nodes and orderer nodes run in docker containers
and the relevant certiﬁcates they require need to be packaged
into a docker image before they can be run.

Build(conf, Cert) buid−→ Image run−→ Container

(7)

After setting up all the peer and orderer nodes, start creating

channels, each in a separate blockchain and ledger as

{blockchain, ledger}

join
−→ Channel

(8)

Step 2: After the above operation, a basic blockchain
network has been built, and the Chaincode is written next to
create an application.

Code(F x . . .) → CC

(9)

The administrator user uses the Hyperledger Fabric SDK or
Client to install the Chaincode, and all peer nodes must have
the Chaincode installed.

Install(CC)

SDK/Client

−→ P eer

(10)

Step 3: Once the chaincode is completed, we need to
initialize it by calling the invoke function to complete the
initialization of the chaincode, and the initialized Chaincode
is stored in the container.

Invoke(Init)

SDK/Client
−→ P eer

(11)

2) Part 2: This section requires the speciﬁcation of relevant
access control policies and the whole process needs to be
agreed upon between the user and the administrator. The policy
needs to be saved to the blockchain by the administrator once
it has been created.

Step 1: Administrators and users set access control policies

based on AS, AO, AP , and AE.

CA → {Certpeer, Certorderer, Certchannel, Certuser} (6)

Decide(AS, AO, AP, AE) → ABACP

(12)

Step 2: The administrator uploads the developed access

1) Policy Contract (PSC): The PSC provides the following

control policy to the blockchain network.

methods to manipulate ABACPs.

7

Upload(ABACP) → Contract

(13)

Step 3: The administrator runs PSC to implement operations
such as adding and modifying policies and saves the ﬁnal
policy values to the SDB and ledger.

PSC(ABACP) → {SDB, ledger }

(14)

3) Part 3: This section implements the storage of medical
information by ﬁrst uploading the medical records into IPFS
to get a hash address, and then saving that address to the
blockchain.

Step 1: Users upload medical records to IPFS.

Upload(Medical Record) → IPFS

(15)

Step 2: IPFS translates medical records into a hash address

according to its operational mechanism.

IPFS(Medical Record)

translate−→ hash

(16)

Step 3: Send the hash address to the blockchain.

Send(hash) → blockchain

(17)

Step 4: Save medical information to the SDB and ledger

by running the smart contract RSC.

Run(RSC) → {SDB, ledger }

(18)

4) Part 4: This section is a process for accessing medical
information based on attribute access control and can be
divided into four speciﬁc steps.

Step 1: The user initiates a request for access to medical

data.

Request → blcokchain

(19)

Step 2: Upon receipt of a user request, the ASC contract is

called to verify that the user has access to the data.

ASC( Request ) →

(cid:40)

1,
0,

allow
deny

(20)

Step 3: If the user has access rights, then the blockchain

transfers the hash of the medical information to the IPFS.

Blockchain(hash)

send−→ IPFS

(21)

Step 4: IPFS calculates the medical data requested by the

user based on the hash address.

Response(Medical Record) → Cli

(22)

C. Smart contract of the scheme

Smart contracts are not only related to the implementation
of access control, but also the storage of medical information,
and are therefore at the heart of this solution. There are three
smart contracts in total: policy contract (PSC), access control
contract (ASC), and medical record contract(RSC).

CheckP olicy(): PSC needs to verify the validity of the
ABACP by this method. Each ABACP should contain AS,
AO, AP , and AE, and all
the four attributes should be
satisﬁed for this policy to be valid.

AddP olicy(): The PSC needs to run the CheckP olicy()
method before calling this method to add the policy, and only
after the policy is legal can the policy be written to SDB and
blockchain. The details are shown in Algorithm 1.

DeleteP olicy(): This method will be called in two ways.
Firstly, the administrator will call this method to delete an
ABACP. Secondly, when the CheckAccess() method is exe-
cuted and a policy is found to have expired, then this method
will be called automatically to delete the useless policy. This
is shown in Algorithm 2.

U pdateP olicy(): This method is called when an adminis-
trator needs to modify an ABACP. This method is called when
the administrator needs to modify an ABACP. The modiﬁca-
tion record is also written to the SDB and the blockchain. This
method also executes the AddP olicy() method at the end after
the policy is updated, adding the modiﬁed policy back to the
blockchain.

QueryP olicy(): all policies are stored in the state database
CouchDB (a kind of key-value pair database) and the admin-
istrator can query the details of the desired ABACP by using
the property AS or AO.

return Error(BadPolicy)

Algorithm 1 PSC.AddPolicy()
Require: ABACP
Ensure: Ok or Error
1: APIstub ChaincodeStub ← Invoke()
2: if CheckPolicy(ABACP) == False then
3:
4: end if
5: AS, AO ← ABACP
6: ABACPid ← HASHsha256(AS + AO)
7: err ← A APIstub.PutState(ABACPid, ABACP)
8: if err! = null then
9:
10: end if
11: return Ok

return Error

2) Access Control Contract (ASC): ASC primarily imple-
ments the access control function, i.e. determining whether
a user’s access control-based request matches the prescribed
access control policy. The methods in ASC are as follows.
CheckAccess(): This method is the core of the implemen-
tation of access control, as shown in Algorithm 3. If the
method returns a null result, it proves that there is no policy
that supports the request and the request is invalid. If the
result is not null, it means that there is a policy that matches
the request. Finally, the request is veriﬁed by validating the
eligible policy, and if the attributes AE and AP in the policy
are both satisﬁed, the request is proven to pass the veriﬁcation.
3) Policy Contract (PSC): The RSC is primarily used to
store a hash address representing a complete medical record.
The user ﬁrst uploads the medical record to IPFS, which then

Algorithm 2 PSC.DeletePolicy()
Require: AS, AO
Ensure: Ok or Error
1: APIstubChaincodeStub ← Invoke()
2: PolicyID ← HASHsha256(AS + AO)
3: err ← APIstub.GetState(Id)
4: if err! = null then
5:
6: end if
7: err ← APIstub.DelState(PolicyID)
8: if err! = null then then
return Error
9:
10: end if
11: return Ok

return Error

Algorithm 3 ASC.CheckAccess()
Require: ABAC Request
Ensure: Ok or Error
1: AuS, AuO, AuE ← GetAttrs(ABAC Request)
2: P ← PSC.QueryPolicy(AuS, AuO)
3: if P == Null then
return Error();
4:
5: end if
6: { . . . , ApP, ApE} ← P
7: if Value(ApP) == 1 && ApE.endTime >currentTime then
8:
9: end if
10: return Error()

return Ok;

returns a hash address for the medical record, which is then
uploaded to the blockchain and SDB. AddRecord(): This
method stores the hash address from IPFS into the blockchain,
i.e. the key-value pair < recordId, hash > into the SDB. The
details are shown in Algorithm.4.

Algorithm 4 RSC.AddRecord()
Require: Medical Record(MR)
Ensure: Ok or Error
1: APIstubChaincodeStub ← Invoke()
2: IPFShash ← IPFS(MR)
3: RecordID ← HASHsha256(MR.recordId)
4: err ← APIstub.PutState(RecordID, IPFShash)
5: if err! = null then
6:
7: end if
8: return Ok

return Error

DeleteRecord(): This method ﬁrst deletes the hash address
from the SDB, and then deletes the complete medical record
from the IPFS based on recordId. U pdateRecord(): When
this method is executed, it ﬁrst updates the medical data in the
IPFS to get a new hash address, and then restores this new
hash address to the SDB by calling the AddRecord() method.
QueryRecord(): This method ﬁrst looks up the hash address
of the medical record in the SDB based on the recordId, and
then sends the found hash address to IPFS to be parsed into
a complete medical record.

8

V. EXPERIMENT AND RESULTS

This section introduces the process of the experiment and
the ﬁnal results, which are used to verify the performance
of this solution through comparison. Section V-A introduces
the experimental environment, i.e. the hardware and software
resources required for the experiment. Section V-B introduces
the process of creating and implementing the solution. Section
V-C presents the experimental results, which are used to
compare and analyze the performance of the solution.

A. Experimental environment

The hardware and software resources required for the stand-

alone environment for this solution are shown in Tab. II.

TABLE II
HARDWARE AND SOFTWARE RESOURCES

Hardware
CPU
Memory
Hard Disk
SoftWare
OS
Docker
Docker-compose
Node
Golang
Hyperledger Fabric

i7 7500u 2.9GHz
8G
1T

Ubuntu Linux 16.04
v19.03.2
v1.24.1
v12.12.0
v1.15.8
v1.4.6

B. Creation and realization

This section mainly includes three parts, section V-B1
mainly introduces the network structure of the scheme and
initialization conﬁguration and start. Section V-B2 introduces
the installation of the Chaincode. Section V-B3 mainly intro-
duces how to use the attribute-based access control model to
call intelligent contracts.

1) Network architecture and initialization process: The
scheme consists of a total of eight network nodes, and the
steps for network initialization are shown below.

Step 1: Use cryptogen tools to generate organization struc-

ture and identity certiﬁcates for your network.

Step 2: Use the conﬁgtxgen tool to generate the creation
block for Orderer, the conﬁguration transaction ﬁle for the
channel, and the anchor node conﬁguration update ﬁle for each
organization.

Step 3: First start the fabrics network with docker-compose,
then use client nodes to create channels, and ﬁnally add each
peer node to the channels.

2) Chaincode installation and upgrade: Firstly, installation.
After the initialization of the blockchain network, the chain-
code can be installed. The chaincode is installed through the
hyperledger client node. The client node is used to install the
chaincode into each peer node in turn. Secondly, instantiation.
After installing the chaincode, specify any peer node to
instantiate the installed chain code. Finally, upgrade. Before
updating the chain code, you must install the new chain code,
that is, the chain code update is only valid on the peer node
with the new chain code installed.

9

3) System implementation: In Hyperledger Fabric users can
access the blockchain via a client or an SDK, in this scenario
a client written by the SDK will be used to interact with the
blockchain. The speciﬁc steps are as follows.

Step 1: The CA node generates a key pair for the client,

which is stored in the user’s wallet.

Fig. 10. Results of calling the P SC.DeleteP olicy() method

Step 2: The administrator connects the client to the peer
node, and once the link is complete, the transaction can be
submitted or evaluated.

Step 3: First the orderer node completes the sorting process,
then a consensus is reached between the peer nodes, and ﬁnally
the status database can be queried or updated. If you want to
add a policy, you can call the AddP olicy() method in PSC,
as shown in Fig. 7.

record needs to be adjusted in real-time due to a new change
in the patient’s condition, the U pdateRecord() method in the
RSC can be called to update a medical record. If a medical
record needs to be deleted due to age or other reasons, it can
be deleted by calling the DeleteRecord() method in the RSC.

Fig. 7. The result of calling the P SC.AddP olicy() method

As shown in Fig. 8, if you want to know whether a policy
has been added successfully, you can call the QueryP olicy()
method in the PSC to query the details of a policy.

Fig. 11. Results of calling the RSC.AddRecord() method

Fig. 8. Results of calling the P SC.QueryP olicy() method

As shown in Fig. 9, this policy can be updated by calling
the U pdateP olicy() method in the PSC for some reason to
adapt to the new case.

Fig. 12. The result of calling the RSC.QueryRecord() method

After receiving the user’s request, it will automatically call
the CheckAccess() method in ASC to verify whether the
request is reasonable. If the request is reasonable, it will return
the ’ valid request ! ’, otherwise the request is invalid. The
details are shown in Fig. 13.

Fig. 9. Results of calling the P SC.U pdateP olicy() method

Fig. 13. Results of calling ASC.CheckAccess() method

If a policy becomes invalid or the administrator needs to
force the deletion of a policy, the policy can be deleted by
calling the DeleteP olicy() method in the PSC. This is shown
in Fig. 10.

As shown in Fig. 11, if the Medical Centre needs to add a
new medical record, it can do so by calling the AddRecord()
method in the RSC. As shown in Fig. 12, if the medical center
needs to query the details of a medical record, it can do so by
calling the QueryRecord() method in the RSC. If a medical

C. Results and discussion

To verify the performance of this scheme,

two sets of
experiments are designed. In the ﬁrst set of experiments, the
number of virtual concurrent clients is set to 200, 400, 600,
800, and 1000, showing the time and throughput of PSC,
ASC and RSC in dealing with transactions under different
concurrent requests. The details are shown in Fig. 14 and Fig.
15.

10

(a) Time spent in PSC with different concurrent requests

(b) Time spent by RSC under different concurrent requests

Fig. 14. Time spent on different concurrent requests

(c) Time spent by ASC under different concurrent requests

11

(a) Throughput of PSC under different concurrent requests

(b) Throughput of RSC under different concurrent requests

Fig. 15. Throughput under different concurrent requests

(c) Throughput of ASC under different concurrent requests

The following conclusions are drawn from the above ex-
perimental results: Firstly, add and update operations take
a longer time, while query and delete operations take less
time. Secondly, the throughput of add and update operations is
less than that of query and delete operations. The throughput
does not decrease signiﬁcantly when the number of concurrent
requests reaches a certain value. Although PoW consensus can
achieve complete decentralization, taking too long to reach
consensus results in a large waste of resources. However,
Kafka consensus can not only accomplish high through-
put of transactions, but also provide sufﬁcient fault tolerant
workspace for consensus and ordering services. As shown in
Fig. 16, in the second group of experiments, we compared the
differences in consensus time between the Kafka consensus
mechanism and the PoW consensus mechanism adopted in
this scheme by setting the number of different nodes (between
10 and 100). The results show that this scheme can reach a
consensus in a short time. Through the above two groups of
experiments, it can be proved that this scheme can not only
maintain high throughput in a large-scale request environment
but also effectively reach consensus in a distributed system.

Fig. 16. Comparison of Kafka and PoW in the time of reaching consensus

VI. CONCLUSION

This paper combines blockchain technology with an
attribute-based access control model to take full advantage
of blockchain technology to break down information silos
in medical data and safeguard the security and privacy of
medical information. In addition, the interstellar ﬁle system
is utilized in storage to ease the storage pressure on the
blockchain. The scheme uses a distributed architecture to
achieve dynamic ﬁne-grained access. The deployment and
invocation of the chain code are described in detail and proof is
given through experiments. In conclusion, this paper provides
a practical reference for related research and can provide ideas
for researchers. Future work could make improvements in the
following areas.

1) This scheme is carried out on a single PC, future
consideration could be given to using clusters to further
optimize the performance of the distributed system.
2) This scheme is based on the consensus mechanism
of Kafka. To further reduce the arithmetic power and
improve the consensus efﬁciency, a combination of other
consensus algorithms can be considered in the future,
such as using a consensus approach that combines

12

Byzantine fault-tolerant algorithms with non-Byzantine
fault-tolerant algorithms.

3) This paper combines IPFS and blockchain to alleviate
the storage pressure of blockchain, but this is only a
transitional stage, and in the future, we should consider
solving the data storage problem from the blockchain.

DECLARATION OF INTERESTS

Availability of data and materials

Data sharing is not applicable to this article as no datasets

were generated or analyzed during the current study.

Competing Interest

The authors declare that they have no known competing
ﬁnancial interests or personal relationships that could have
appeared to inﬂuence the work reported in this paper.

Funding

This research is supported by the National Natural Science
Foundation of China under Grant 61873160, Grant 61672338
and Natural Science Foundation of Shanghai under Grant
21ZR1426500.

Authors Contribution

ZS proposed and developed the new idea of the paper
and drafted it. HD and LD have substantially revised it.
WX and WZ conducted the data analysis and text combing.
CC is responsible for supervision. All authors approved the
submitted version. All authors read and approved the ﬁnal
manuscript.

LIST OF ABBREVIATIONS

REFERENCES

[1] V. Sima, I. G. Gheorghe, J. Subi´c, and D. Nancu, “Inﬂuences of the
industry 4.0 revolution on the human capital development and consumer
behavior: A systematic review,” Sustainability, vol. 12, no. 10, p. 4035,
2020.

[2] S. Schulz, R. Stegwee, and C. Chronaki, “Standards in healthcare data,”

Fundamentals of Clinical Data Science, pp. 19–36, 2019.

[3] X. Zhang and Y. Wang, “Research on intelligent medical big data
system based on hadoop and blockchain,” EURASIP Journal on Wireless
Communications and Networking, vol. 2021, 2021.

[4] H. Li, D. HAN, and M. Tang, “A privacy-preserving storage scheme
for logistics data with assistance of blockchain,” IEEE Internet of Thing
Journal(Early Access), 2021.

[5] J. Xu, K. Xue, S. Li, H. Tian, J. Hong, P. Hong, and N. Yu, “Healthchain:
A blockchain-based privacy preserving scheme for large-scale health
data,” IEEE Internet of Things Journal, vol. 6, no. 5, pp. 8770–8781,
2019.

[6] D. Han, N. Pan, and K.-C. Li, “A traceable and revocable ciphertext-
policy attribute-based encryption scheme based on privacy protection,”
IEEE Transactions on Dependable and Secure Computing, vol. 19, pp.
316–327, 2022.

[7] Z. Zheng, S. Xie, H. Dai, X. Chen, and H. Wang, “An overview of
blockchain technology: Architecture, consensus, and future trends,” 2017
IEEE International Congress on Big Data (BigData Congress), pp. 557–
564, 2017.

[8] W. Fang, W. Chen, W. Zhang, J. Pei, W. Gao, and G. Wang, “Digital
signature scheme for information non-repudiation in blockchain: a state
of the art review,” EURASIP Journal on Wireless Communications and
Networking 2020, vol. 2020, 2020.

TABLE III
LIST OF ABBREVIATIONS

Description
Attribute-Based Access Control
InterPlanetary File System
Hospital Information System
Electronic Health Record
Electronic Medical Record
Public Key Infrastructure
Peer-to-Peer
Software Development Kit
Attribute-Based Access Control Request
Distributed Hash Table
Scalable File Service
Hyper Text Transfer Protocol
Attributes of subject
Attributes of object
Attributes of permission
Attributes of environment
Merkle directed acyclic graph
Secure Hash Algorithm 256
Certiﬁcate Authority
Certiﬁcate ﬁle
Conﬁg ﬁle of the node
Functions deﬁned in source code
Chaincode in Hyperledger Fabric
Access Smart Contract
Policy Smart Contract
Record Smart Contract
Docker Image
Transaction in blockchain
State Database in Hyperledger Fabric
Blockchain system client
Attribute based Access Control Policy

Abbreviations
ABAC
IPFS
HIS
EHR
EMR
PKI
P2P
SDK
ABACR
DHT
SFS
HTTP
AS
AO
AP
AE
MerkleDAG
SHA256
CA
Cert
Conf
F(x)...
CC
ASC
PSC
RSC
Image
TX
SDB
Cli
ABACP

[9] D. Li, D. Han, T.-H. Weng, Z. Zheng, H. Li, H. Liu, A. Castiglione, and
K.-C. Li, “Blockchain for federated learning toward secure distributed
machine learning systems: a systemic survey,” Soft Computing, pp. 1–18,
2021.

[10] Q. Tian, D. Han, K.-C. Li, X. Liu, and L. Duan, “Arcangelo castiglione;
an intrusion detection approach based on improved deep belief network,”
2020.

[11] B. Bhushan, A. Khamparia, K. M. Sagayam, S. K. Sharma, M. A. Ahad,
and N. C. Debnath, “Blockchain for smart cities: A review of archi-
tectures, integration trends and future research directions,” Sustainable
Cities and Society, vol. 61, p. 102360, 2020.

[12] P. K. Sharma and J. H. Park, “Blockchain based hybrid network
architecture for the smart city,” Future Gener. Comput. Syst., vol. 86,
pp. 650–655, 2018.

[13] H. Liu, D. Han, and D. Li, “Fabric-iot: A blockchain-based access

control system in iot,” IEEE Access, vol. 8, pp. 18 207–18 218, 2020.

[14] D. Wang, H. Wang, and Y. Fu, “Blockchain-based iot device identiﬁca-
tion and management in 5g smart grid,” EURASIP Journal on Wireless
Communications and Networking, vol. 2021, 2021.

[15] D. Han, Y. Zhu, D. Li, W. Liang, A. Souri, and K.-C. Li, “A blockchain-
based auditable access control system for private data in service-centric
iot environments,” IEEE Transactions on Industrial Informatics, 2021.
[16] Y. Shan and Y. Mai, “Research on sports ﬁtness management based
on blockchain and internet of things,” EURASIP Journal on Wireless
Communications and Networking 2020, vol. 2020, 2020.

[17] D. Li, D. Han, N. Crespi, R. Minerva, and Z. Sun, “Fabric-scf: A
blockchain-based secure storage and access control scheme for supply
chain ﬁnance,” arXiv preprint arXiv:2111.13538, 2021.

[18] C. Wang, X. Cheng, J. Li, Y. He, and K. Xiao, “A survey: applications
of blockchain in the internet of vehicles,” EURASIP Journal on Wireless
Communications and Networking, vol. 2021, 2021.

13

[19] Z. Zhou, B. Wang, Y. Guo, and Y. Zhang, “Blockchain and compu-
tational intelligence inspired incentive-compatible demand response in
internet of electric vehicles,” IEEE Transactions on Emerging Topics in
Computational Intelligence, vol. 3, pp. 205–216, 2019.

[20] M. Cui, D. Han, and J. Wang, “An efﬁcient and safe road condition mon-
itoring authentication scheme based on fog computing,” EEE Internet
of Things Journal, vol. 6, pp. 9076–9084, 2019.

[21] M. Cui, D. Han, J. Wang, K.-C. Li, , and C.-C. Chang, “Arfv: An
efﬁcient shared data auditing scheme supporting revocation for fog-
assisted vehicular ad-hoc networks,” IEEE Transactions on Vehicular
Technology, vol. 69, pp. 15 815–15 827, 2020.

[22] H. Liu, D. Han, and D. Li, “Blockchain based trust management in

vehicular networks,” in BlockSys, 2020.

[23] K. A. Harthy, F. A. Shuhaimi, and K. K. J. A. Ismaily, “The upcoming
blockchain adoption in higher-education: requirements and process,”
2019 4th MEC International Conference on Big Data and Smart City
(ICBDSC), pp. 1–5, 2019.

[24] F. P. Oganda, N. Lutﬁani, Q. Aini, U. Rahardja, and A. Faturahman,
“Blockchain education smart courses of massive online open course
using business model canvas,” 2020 2nd International Conference on
Cybernetics and Intelligent System (ICORIS), pp. 1–6, 2020.

[25] D. Li, D. Han, Z. Zheng, T.-H. Weng, H. Li, H. Liu, A. Castiglione, and
K.-C. Li, “Moocschain: A blockchain-based secure storage and sharing
scheme for moocs learning,” Computer Standards & Interfaces, 2021.
[26] S. Wang, L. Ouyang, Y. Yuan, X. Ni, X. Han, and F. Wang, “Blockchain-
enabled smart contracts: Architecture, applications, and future trends,”
IEEE Transactions on Systems, Man, and Cybernetics: Systems, vol. 49,
pp. 2266–2277, 2019.

[27] D. Li, D. Han, and H. Liu, “Fabric-chain & chain: A blockchain-based
electronic document system for supply chain ﬁnance,” in BlockSys, 2020.
[28] J. Li, W. Yao, Y. Zhang, H. Qian, and J. Han, “Flexible and ﬁne-grained
attribute-based data storage in cloud computing,” IEEE Transactions on
Services Computing, vol. 10, pp. 785–796, 2017.

[29] A. Azaria, A. Ekblaw, T. Vieira, and A. Lippman, “Medrec: Using
blockchain for medical data access and permission management,” 2016
2nd International Conference on Open and Big Data (OBD), pp. 25–30,
2016.

[30] K. Fan, S. Wang, Y. Ren, H. Li, and Y. Yang, “Medblock: Efﬁcient
and secure medical data sharing via blockchain,” Journal of Medical
Systems, vol. 42, pp. 1–11, 2018.

[31] A. F. da Conceic¸ ˜ao, F. S. C. da Silva, V. Rocha, A. Locoro, and J. M.
Barguil, “Eletronic health records using blockchain technology,” ArXiv,
vol. abs/1804.10078, 2018.

[32] G. Yang and C. Li, “A design of blockchain-based architecture for
the security of electronic health record (ehr) systems,” 2018 IEEE
International Conference on Cloud Computing Technology and Science
(CloudCom), pp. 261–265, 2018.

[33] S. Kushch, S. Ranise, and G. Sciarretta, “Blockchain tree for ehealth,”
in 2019 IEEE Global Conference on Internet of Things (GCIoT).
IEEE,
2019, pp. 1–5.

[34] Q. Xia, E. B. Sifah, A. Smahi, S. Amofa, and X. Zhang, “Bbds:
Blockchain-based data sharing for electronic medical records in cloud
environments,” Inf., vol. 8, p. 44, 2017.

[35] A. Zhang and X. Lin, “Towards secure and privacy-preserving data
sharing in e-health systems via consortium blockchain,” Journal of
Medical Systems, vol. 42, pp. 1–18, 2018.

[36] S. Zhang, A. Kim, D. Liu, S. C. Nuckchadyy, L. Huangy, A. Masurkary,
J. Zhangy, L. P. Karnatiz, L. Mart´ınez, T. Hardjono, M. Kellis, and
Z. Zhang, “Genie: A secure, transparent sharing and services platform
for genetic and health data,” ArXiv, vol. abs/1811.01431, 2018.
[37] J. Liu, X. L. Li, L. Ye, H. Zhang, X. Du, and M. Guizani, “Bpds: A
blockchain based privacy-preserving data sharing for electronic medical
records,” 2018 IEEE Global Communications Conference (GLOBE-
COM), pp. 1–6, 2018.

[38] R. Qiao, X.-Y. Luo, S. Zhu, A.-D. Liu, X. Yan, and Q. xian Wang, “Dy-
namic autonomous cross consortium chain mechanism in e-healthcare,”
IEEE Journal of Biomedical and Health Informatics, vol. 24, pp. 2157–
2168, 2020.

[39] Y. Chen, S. Ding, Z. Xu, H. Zheng, and S. Yang, “Blockchain-based
medical records secure storage and medical service framework,” Journal
of Medical Systems, vol. 43, pp. 1–9, 2018.

[40] B. S. Egala, A. K. Pradhan, V. Badarla, and S. P. Mohanty, “Fortiﬁed-
chain: A blockchain-based framework for security and privacy-assured
internet of medical things with effective access control,” IEEE Internet
of Things Journal, vol. 8, pp. 11 717–11 731, 2021.

14

• Figure 15: Throughput under different concurrent re-
quests (a) Throughput of PSC under different concurrent
requests (b) Throughput under different concurrent re-
quests

• Figure 16: Comparison of Kafka and pow in the time of

reaching consensus

Zhijie Sun received the B.S degree in information
management and information system from Henan
Polytechnic University. and he is currently pursuing
the M.S. degree in Shanghai Maritime University.
His main research interests include blockchain tech-
nology and its applications and cryptography.

Dezhi Han received the BS degree from Hefei Uni-
versity of Technology, Hefei, China, the MS degree
and PhD degree from Huazhong University of Sci-
ence and Technology, Wuhan, China. He is currently
a professor of computer science and engineering at
Shanghai Maritime University. His speciﬁc interests
include storage architecture, Blockchain technology,
cloud computing security and cloud storage security
technology.

Dun Li received the B.S. degree in Human Re-
source Management from the Huaqiao University,
Quanzhou, China,
in 2013, and the M.S. degree
in Finance from the Macau University of Science
and Technology, Macau, China,
in 2015. He is
currently doing his Ph.D. degree in Information
Management and Information Systems at Shanghai
Maritime University. His main research interests
include smart ﬁnance, big data, machine learning,
IoT, and Blockchain.

Xiangsheng Wang is currently pursuing the PhD
at Shanghai Maritime University. His main research
interests include natural language processing, image
processing, visual question answering and machine
learning.

[41] Z. Zheng, S. Xie, H. Dai, X. Chen, and H. Wang, “Blockchain challenges
and opportunities: a survey,” Int. J. Web Grid Serv., vol. 14, pp. 352–375,
2018.

[42] E. Munsing, J. Mather, and S. J. Moura, “Blockchains for decentralized
optimization of energy resources in microgrid networks,” 2017 IEEE
Conference on Control Technology and Applications (CCTA), pp. 2164–
2171, 2017.

[43] S. Wang, A. F. Taha, J. Wang, K. Kvaternik, and A. Hahn, “Energy
crowdsourcing and peer-to-peer energy trading in blockchain-enabled
smart grids,” IEEE Transactions on Systems, Man, and Cybernetics:
Systems, vol. 49, pp. 1612–1623, 2019.

[44] H. Liu, D. Han, and D. Li, “Behavior analysis and blockchain based
trust management in vanets,” J. Parallel Distributed Comput., vol. 151,
pp. 61–69, 2021.

[45] L. Zhu, H. Dong, M. Shen, and K. Gai, “An incentive mechanism using
shapley value for blockchain-based medical data sharing,” 2019 IEEE
5th Intl Conference on Big Data Security on Cloud (BigDataSecurity),
IEEE Intl Conference on High Performance and Smart Computing,
(HPSC) and IEEE Intl Conference on Intelligent Data and Security
(IDS), pp. 113–118, 2019.

[46] H. Li, L. Zhu, M. Shen, F. Gao, X. Tao, and S. Liu, “Blockchain-based
data preservation system for medical data,” Journal of Medical Systems,
vol. 42, pp. 1–13, 2018.

[47] Y. Chen, S. Ding, Z. Xu, H. Zheng, and S. Yang, “Blockchain-based
medical records secure storage and medical service framework,” Journal
of medical systems, vol. 43, no. 1, pp. 1–9, 2019.

[48] B. S. Egala, A. K. Pradhan, V. R. Badarla, and S. P. Mohanty, “Fortiﬁed-
chain: a blockchain based framework for security and privacy assured
internet of medical things with effective access control,” IEEE Internet
of Things Journal, 2021.

[49] N. Nizamuddin, H. R. Hasan, and K. Salah, “Ipfs-blockchain-based
authenticity of online publications,” in International Conference on
Blockchain. Springer, 2018, pp. 199–212.

[50] D. Li, D. Han, N. Crespi, R. Minerva, and Z. Sun, “Fabric-scf: A
blockchain-based secure storage and access control scheme for supply
chain ﬁnance,” 2021.

[51] Q. Tian, D. Han, K.-C. Li, X. Liu, and L. Duan, “Arcangelo castiglione;
an intrusion detection approach based on improved deep belief network,”
Applied Intelligence, vol. 50, pp. 3162–3178, 2020.

FIGURE TITLE AND LEGEND

• Figure 1:Medical data exchange
• Figure 2:The module architecture diagram of World state
• Figure 3:The module architecture diagram of World state
• Figure 4:Structure of the ABAC model
• Figure 5:The proposed system architecture
• Figure 6:The workﬂow of the proposed scheme
• Figure 7:The result of calling the P SC.AddP olicy()

method

• Figure 8:Results of calling the P SC.QueryP olicy()

method

• Figure 9:Results of calling the P SC.U pdateP olicy()

method

• Figure 10:Results of calling the P SC.DeleteP olicy()

method

• Figure 11:Results of calling the RSC.AddRecord()

method

• Figure 12:The result of calling the RSC.QueryRecord()

method

• Figure 13:Results of

calling ASC.CheckAccess()

method

• Figure 14:Time spent on different concurrent requests
(a)Time spent in PSC with different concurrent requests
(b) Time spent by ASC under different concurrent re-
quests (c) Throughput under different concurrent requests
(d) Throughput of ASC under different concurrent re-
quests.

15

Chin-Chen Chang received the Ph.D. degree in
computer engineering from National Chiao Tung
University, Hsinchu, Taiwan, in 1982, and the B.E.
and M.E. degrees in applied mathematics, com-
puter and decision sciences from National Tsinghua
University, Hsinchu, Taiwan,
in 1977 and 1979,
respectively. He was with National Chung Cheng
University, Minxiong, Taiwan . Currently, he is a
Chair Professor with the Department of Information
Engineering and Computer Science, Feng Chia Uni-
versity, Taichung, Taiwan, since 2005. His current
research interests include database design, computer cryptography, image
compression, and data structures. Prof. Chang was a recipient of many re-
search awards and honorary positions by and in prestigious organizations both
nationally and internationally, such as the Outstanding Talent in Information
Sciences of Taiwan. He is currently a Fellow of the IEEE, a Fellow of the
IEE, U.K and a Member of the IEICE.

Zhongdai Wu , male, born in August 1976, is the
Deputy General Manager, Chief Engineer, and Chief
Information Ofﬁcer of COSCO Shipping Technol-
ogy Company Limited, with a doctoral degree, a
researcher-level senior engineer, and a senior in-
formation manager of SASAC. He has more than
20 years of experience in shipping and logistics
informatization construction. He has been respon-
sible for the construction of various large-scale
informatization projects of central enterprises and
has presided over the completion of one Shanghai
Key New Product, one Shanghai High-tech Achievement Transformation
Project, one Shanghai Application Demonstration Project, and many software
copyrights, and has rich experience in project planning and management. He
has published more than ten academic papers, two of which were indexed
by EI. He has been awarded as one of the top ten civilizational pacesetters
of China Shipping Group, Shanghai New Long March Pioneer, Shanghai
Federation of Trade Unions Scientiﬁc and Technological Innovation Talent,
State-owned Assets Supervision, and Administration Commission Central
Enterprise Knowledge-based Advanced Worker, Shanghai Young Post Leader,
etc. Main research areas: shipping informationization, container management,
ship and cargo management, logistics and supply chain technology research,
cloud data center construction and management, network security situational
awareness, shipping e-commerce, Internet of Things application, business
intelligence technology, shipping big data application, ship satellite commu-
nication, etc.

