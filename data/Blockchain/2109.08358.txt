Security Analysis of Distributed Ledgers and Blockchains
through Agent-based Simulation(cid:63)

Luca Serena · Gabriele D’Angelo · Stefano Ferretti

1
2
0
2

p
e
S
7
1

]

R
C
.
s
c
[

1
v
8
5
3
8
0
.
9
0
1
2
:
v
i
X
r
a

Abstract In this paper1, we describe LUNES-Blockchain,
an agent-based simulator of blockchains that relies on
Parallel and Distributed Simulation (PADS) techniques
to obtain high scalability. The software is organized as a
multi-level simulator that permits to simulate a virtual
environment, made of many nodes running the proto-
col of a speciﬁc Distributed Ledger Technology (DLT),
such as the Bitcoin or the Ethereum blockchains. This
virtual environment is executed on top of a lower-level
Peer-to-Peer (P2P) network overlay, which can be struc-
tured based on diﬀerent topologies and with a given
number of nodes and edges. Functionalities at diﬀerent
levels of abstraction are managed separately, by diﬀer-
ent software modules and with diﬀerent time granular-
ity. This allows for accurate simulations, where (and
when) it is needed, and enhances the simulation perfor-
mance. Using LUNES-Blockchain, it is possible to simu-
late diﬀerent types of attacks on the DLT. In this paper,
we speciﬁcally focus on the P2P layer, considering the
selﬁsh mining, the 51% attack and the Sybil attack. For
which concerns selﬁsh mining and the 51% attack, our
aim is to understand how much the hash-rate (i.e. a gen-
eral measure of the processing power in the blockchain
network) of the attacker can inﬂuence the outcome of
the misbehaviour. On the other hand, in the ﬁltering de-
nial of service (i.e. Sybil Attack), we investigate which

G. D’Angelo
University of Bologna (Italy)
E-mail: g.dangelo@unibo.it

0 This is the authors’ version of the following arti-
cle: “Luca Serena, Gabriele D’Angelo, Stefano Fer-
retti. Security Analysis of Distributed Ledgers and
Blockchains through Agent-based Simulation. To ap-
pear in Simulation Modelling Practice and Theory
(Elsevier)”.

1 An early version of this work appeared in [26]. This paper
is an extensively revised and extended version where more
than 50% is new material.

dissemination protocol in the underlying P2P network
makes the system more resilient to a varying number
of nodes that drop the messages. The results conﬁrm
the viability of the simulation-based techniques for the
investigation of security aspects of DLTs.

Keywords Simulation, Parallel and Distributed
Simulation, Virtual Environments, Cyber-Security,
Blockchain, Distributed Ledger Technologies

1 Introduction

Distributed ledgers and blockchain-based technologies
have become more and more popular over these years,
due to their suitability to be used in many distributed
application scenarios [6,35]. Traceability, auditing, at-
testation as-a-service, pseudo-anonymity, and coopera-
tion are just few examples, other than the traditional
ﬁntech applications that made these technologies fa-
mous.

A Distributed Ledger Technology (DLT) is a dis-
tributed software system that can be seen organized as
a protocol stack. At its lower level, an overlay network
is built on top of the Internet layer. This Peer-to-Peer
(P2P) system is responsible to manage the dissemi-
nation of the messages. Each node is logically linked
to a certain number of neighbors, and communicates
with them based on a “gossip-like” dissemination pro-
tocol. Furthermore, some discovery mechanism is used,
in order to build the P2P overlay [33]. For instance,
a random selection protocol is used in Bitcoin, while
Ethereum employs a UDP-based node discovery mech-
anism inspired by Kademlia [19].

The actual distributed ledgers are built on top of
this kind of P2P system. Each node has its copy of
the ledger that records all the transactions that have
been generated in the network. Eventual consistency of

 
 
 
 
 
 
2

Luca Serena et al.

the view of the distributed ledger is reached through
the adoption of a consensus scheme. There are several
protocols that may be adopted for this task. Usually,
blockchains are based on “Proof of Work”, “Proof of
Stake” or one of their variants.

Finally, on top of the consensus layer we have the
real transaction ledger, that records transactions and
data. The implementation of the ledger varies, depend-
ing on the technology. In Bitcoin and Ethereum, for in-
stance, the ledger is organized as a sequence of blocks,
each block containing a set of transactions (for this rea-
son, they are called “blockchains”). Some newer alter-
native solutions adopt diﬀerent data structures. Just as
an example, the Tangle ledger employed in IOTA is in
fact a directed acyclic graph of transactions. Moreover,
in traditional blockchains, such as Bitcoin, the trans-
actions that are inserted into the ledger just contain
exchanges of cryptocurrencies. Instead, the so called
blockchains 2.0 (and further) allow for “programmable
transactions”, i.e. the system is able to insert into the
blockchain smart contracts, actual contracts written with
a Turing complete scripting language [6]. Such smart
contracts can be triggered through speciﬁc transactions.
Once activated, a related code is executed whose output
changes the internal state of the smart contract.

While a layered organization of a decentralized sys-
tem, such as DLTs, allows us to isolate the very diﬀerent
aspects of the technology and to obtain a better under-
standing of the components’ protocols, the functioning
of each layer inﬂuences the performance of the other
layers. Thus, it becomes interesting to evaluate all pos-
sible alternatives of each component, and how possible
modiﬁcations aﬀect other aspects of the DLT. However,
the complexity of DLTs, and the large scale nature of
this distributed system make extremely diﬃcult such
evaluation process. This is especially true when deal-
ing with security issues. For this reason, the creation
of a virtual environment, in which DLTs are simulated,
might represent a viable and proﬁtable strategy.

In this work, we present a virtual environment called
LUNES-Blockchain. The main component of LUNES-
Blockchain is a discrete event simulator that is able to
simulate the blockchain behaviour and to trigger cer-
tain attacks on such a decentralized data structure. The
software has been designed to be scalable, thus it fol-
lows a Parallel And Distributed Simulation (PADS) ap-
proach. More in detail, the simulator allows us to create
a synthetic DLT, organized as a virtual environment
of diﬀerent interacting agents. It is worth noticing that
LUNES-blockchain has been designed and implemented
to follow a multilevel approach. In fact, each level of
the virtual environment simulates a diﬀerent layer of a
DLT protocol stack. Thus, a P2P level has been imple-

mented, which is in charge of the modelling the overlay
creation, management and message dissemination. The
upper level models the speciﬁc DLT consensus scheme
and the internals needed to maintain a consistent ver-
sion of the ledger. (For example, as concerns Bitcoin,
the system simulates the Proof-of-Work – PoW mining
approach, in which each node in the blockchain concur-
rently tries to mine a novel block.)

The adoption of a multi-level approach has the ad-
vantage that each level can be conﬁgured to work with
a speciﬁc time granularity, based on the speciﬁc nature
of the events that need to be simulated at diﬀerent lay-
ers. For instance, the events generated at the (upper)
blockchain level can be represented at a coarser grain
than the (underlying) overlay level. In fact, the genera-
tion of a novel transaction, or a block in the blockchain
corresponds to multiple dissemination steps at the over-
lay level, where messages are broadcast through the
overlay, i.e. they are transmitted from a node to its
neighbors, and so on. Following this approach, a vir-
tual environment composed of DLT nodes is created
and it is implemented by a further lower-level simula-
tion middleware as an agent-based framework on top of
a PADS system.

The resulting virtual environment is able to model
the behavior of a blockchain with a high degree of ﬁ-
delity and to obtain fast results even in presence of com-
plex or large-size networks to model. LUNES-Blockchain
can be used as a testbed to study new components to
be integrated in the DLT, to evaluate the performance
of existing algorithms or to verify the reliability of the
blockchain in presence of failures or malicious actors. In
this paper, the developed virtual environment is used
to study some well-known security attacks to the Bit-
coin blockchain, i.e. i) a Denial-of-Service (DoS) attack
(also known as Sybil attack) [12], ii) selﬁsh mining [17],
and iii) 51% attack [28]. Indeed, we claim that the use
of simulation techniques as a part of highly realistic
virtual environments can be a proﬁtable approach to
study and assess the security aspects of a system.

As concerns the evaluation reported in this paper, in
order to show the feasibility of the virtual environment
based on simulation, we provide results related to the
execution of the mentioned security attacks when ap-
plied to diﬀerent conﬁgurations both at the DLT level
and at the overlay level. For instances by changing the
overlay topology and the speciﬁc conﬁguration of the
gossip dissemination strategy. We report on both the
outcomes of the attacks, thus providing results related
to the speciﬁc simulated virtual environment, as well
as the performance of the simulator itself, in terms of
time necessary to complete the simulation execution
and scalability. The obtained results demonstrate the

Security Analysis of Distributed Ledgers and Blockchains through Agent-based Simulation(cid:63)

3

viability of exploiting agent-based simulation for build-
ing virtual environments of DLTs.

The remainder of this paper is organized as follows.
Section 2 provides some background and a discussion
on related works. Section 3 describes the virtual envi-
ronment. Section 4 is related to the presentation of the
security attacks and to the usage of the virtual environ-
ment to assess their impact on the Bitcoin blockchain.
Section 5 provides experimental results, with respect to
the performance evaluation about the simulation tool
we built. Finally, Section 6 provides some conclusions
and ﬁnal remarks.

2 Background and Related Work

The blockchain is a technology that was initially pro-
posed in the Bitcoin system, in 2009, by an anonymous
author with the pseudonym of Satoshi Nakamoto [22].
It can be seen as a decentralized and immutable database
where all participants can transact directly without re-
lying on an intermediary, such as a bank. Crucial for
the proper functioning of the system is the role of cryp-
tography, as well as the use of a consensus protocol,
which ensures that all the various nodes agree on the
content of the distributed ledger. Usually the users are
identiﬁed with a pseudonym derived from their crypto-
graphic public key, so while transactions are known in
the ledger, it is diﬃcult to identify the involved parties.
While Bitcoin is still currently the most famous and
the most commonly used blockchain-based system, cer-
tain kinds of platforms, like Ethereum, are gaining pop-
ularity because they enable to develop more complex
applications through the use of Smart Contracts, which
are actual contracts written with a Turing complete
scripting language. In fact, cryptocurrencies like Bit-
coin basically only allow for money transfer, while blockchains
based on smart contracts make it possible to create dis-
tributed applications. The execution of the public code
composing the smart contract is carried out by the mul-
tiple nodes that are part of the system.

each active participant has a copy of the shared ledger.
For the communication among the nodes the under-
lying network is exploited, using the typical Internet
protocols.

Each novel transaction, generated by a node, is dis-
seminated through the P2P system using a ﬂooding
dissemination protocol [10, 14]. More speciﬁcally, these
protocols (which are usually referred as “gossip proto-
cols”) can implement diﬀerent strategies to maximize
the dissemination of the messages while controlling the
communication overhead. The simplest approach, for a
node that is part of the network, is to broadcast the
newly received message to all the neighbors except the
forwarder. A caching mechanism and a time-to-live as-
sociated with the messages will prevent inﬁnite loops of
messages. However, there are more complex strategies
that enable us to minimize the amount of messages sent
or to enhance the anonymity properties of the sender
of a speciﬁc message (i.e. a transaction recorded in the
blockchain). In the following we brieﬂy introduce the
most common dissemination strategies.

– Fixed Probability: a message is sent to a neighbor
only if a random-generated number is greater than
a certain threshold value (that is a parameter that
can be tuned). The operation is then repeated for
every neighbor of the node, except for the forwarder
of the message.

– Probabilistic Broadcast: a message is sent to all the
neighbors (except the forwarder) only if a random-
generated number is greater than a certain threshold
value. Otherwise no message is sent.

– Dandelion: this dissemination protocol has the spe-
ciﬁc goal to enhance the anonymity of the sender
of a transaction. It consists in two main phases: in
the initial “stem phase”, the message is forwarded
to a single random neighbor. In the following, the
information is broadcast into the network in what
is called the “ﬂuﬀ phase”.

– Dandelion+-: based on Dandelion++ [13], it is an

2.1 The Peer-to-Peer Overlay and the Distributed
Ledger

The blockchain is a type of distributed ledger, where
information is grouped into blocks, which are logically
linked among each other through the use of a hash
pointer to a previous block. Thus, blocks are organized
in a chain, and forks can occur. In the case of forks,
usually the strategy is to continue the longest chain,
ignoring shorter ones. At the distributed system layer,
nodes are organized as a peer-to-peer network, in which

improved version of Dandelion that aims to strengthen
the resilience against the de-anonymization of blockchain
users and the execution of Sybil attacks. In partic-
ular, to avoid having lost transactions (caused by
malicious or defective nodes that drop the messages
during the stem phase), the protocol implements
a fail-safe mechanism. In fact, if a node receives a
message during the stem phase and it does not get
it back after a certain amount of time in the ﬂuﬀ
period, then such a node will start the ﬂuﬀ phase
by itself, by broadcasting the message. In the ac-
tual implementation of Dandelion++ other changes
with respect to Dandelion are performed. Particu-
larly, in Dandelion++ nodes in one epoch (i.e. a

4

Luca Serena et al.

period of about 10 minutes) are either “relayers”
or “diﬀusers”, and thus they relay the messages to
either one neighbor or to all the neighbors. In the
tests reported in this paper, for simplicity and for
being able to evaluate the speciﬁc impact of the re-
covery mechanism, we decided to only consider the
fail-safe mechanism among the upgrades of Dande-
lion++ (and we refer as “Dandelion+-” for this spe-
ciﬁc variant of the protocol.

mechanisms that prevent the same nodes from validat-
ing blocks too often.

Regardless of the protocol used, the hash of the pre-
vious block in the chain is inserted in the novel block,
therefore making it easier to verify the ledger state in
a tamper-proof manner. It is worth reminding that the
work of validating a block is ﬁnancially rewarded. The
reward can be achieved by the act itself of validating a
block and from the fees that the users pay to get their
transactions validated.

2.2 Consensus Scheme

The consensus scheme is a protocol that ensures that all
the nodes of the P2P network maintain the same view
on the current state of the blockchain. The scheme de-
ﬁnes what has to be done to validate a block, ﬁnding a
common agreement among all the nodes of the network.
In the past years, several consensus schemes have been
proposed in the distributed systems research area. Some
of these schemes are utilized today in blockchain tech-
nologies (e.g. Practical Byzantine Fault Tolerance [3]).
However, the main approaches used in blockchain are
the Proof-of-Work (Pow, used in Bitcoin and the actual
Ethereum) and Proof-of-Stake (PoS, that is planned to
be used in the novel Ethereum version) [33].

In PoW systems, in order to validate a block, nodes
have to solve a computational crypto-puzzle that re-
quires a very large amount of computational power.
This activity is called mining and the users partici-
pating in the mining activity are called miners. More
speciﬁcally, a valid block is found when one ﬁnds a spe-
ciﬁc number (called nonce) that, when hashed together
with the proposed block, provides as a hash output a
suﬃciently small number, contained in a certain range.
The diﬃculty of resolving the puzzle can be dynami-
cally updated in order to adapt to the overall growth of
computing power. When using the PoW, it may hap-
pen that more than one node mines a block at the same
time, thus creating a fork in the chain of the mined
blocks. When this occurs, the nodes agree to consider
as valid only the blocks in the longest chain that will
therefore be continued in the future. Conversely, the
content of the shorter chains will be ignored. Proof-
of-Work has often been criticized due to the enormous
waste of energy caused by the mining activity.

The systems based on PoS are much less computation-

consuming. The users who want to participate in the
validation of a block must deposit a certain amount of
cryptocurrency. The probability that a node is chosen
as the next validator is proportional to the amount of
currency deposited in the escrow. To reduce the likeli-
hood of some kinds of attack, there may also be some

2.3 Simulation of Blockchains

At the time of writing, the literature on blockchain sim-
ulators is still not abundant. Usually, the main focus is
on the analysis of the blockchain, the use of smart con-
tracts and sometimes the security issues of blockchain
systems. The typical approach is to develop smart con-
tracts and test them using local blockchains. Remix,
Metamask, Ganache, Multichain and the Ethereum test
networks (e.g. Ropsten, Rinkeby) are examples of en-
vironments though to write, compile and debug smart
contracts. In accordance with the multi-layered vision
of a blockchain we discussed in the previous section, a
common approach is to simulate just a few aspects of a
blockchain at a time.

The majority of scientiﬁc literature about the simu-
lation of blockchains is interested in predicting the per-
formance of blockchain systems or in modelling speciﬁc
aspects such as the consensus algorithms.

For example, in [34], the authors propose to use
modelling and simulation techniques to predict the la-
tency of blockchain-based systems.

The authors of [31] describe the usage of SimPy to
measure some metrics from a simulated Blockchain sys-
tem and compute a general score that is called “quality
of blockchain”.

The focus of [20] is on the mining process. More in
detail, the authors have implemented the simulation of
the mining process based on queuing theory. They ex-
tracted from the Bitcoin real data, the parameters nec-
essary to simulate the process by means of a M/M/n/L
queuing system evaluated using JSIMgraph.

In [2], a blockchain network simulator is presented.
This simulator follows an event-driven approach to model
the neighbor nodes selection of the peer-to-peer over-
lay. As in LUNES-Blockchain, the mining activity is not
simulated in detail, but a block generation is mimicked
based on the computational capabilities of nodes.

VIBES is a blockchain simulator, thought for large
modeling scale P2P networks [30]. The rationale behind
this simulator is to provide a blockchain simulator that

Security Analysis of Distributed Ledgers and Blockchains through Agent-based Simulation(cid:63)

5

is not conﬁned to the Bitcoin protocol, trying to sup-
port large-scale simulations with thousands of nodes.

BlockSim is composed of a Python framework able
to build discrete-event dynamic system models for blockchain
systems [1]. BlockSim is organized in three layers: in-
centive layer, connector layer and system layer. Partic-
ular emphasis is given on the modeling and simulation
of block creation through PoW.

In [21] is described a new methodology that enables
the direct execution of multi-threaded applications in-
side of Shadow that is an existing parallel discrete-event
network simulation framework. This is used to imple-
ment a new Shadow plug-in that directly executes the
Bitcoin reference client software (i.e. Shadow-Bitcoin).
A small number of research activities has focused on
the usage of simulation-based techniques to evaluate the
security of the current blockchain systems or to drive
their future development.

The simulation-based evaluation of a very speciﬁc
kind of blockchain, i.e. Tangle-based blockchains, is dis-
cussed in [32]. The paper shows how a simple simula-
tion model can be deﬁned to model the Parasite Attack,
Double Spending Attacks and Hybrid Attacks on top of
a Tangle.

The authors of [4] propose to use an agent-based
simulation to guide and optimize protocol development
in a Proof-of-Stake parameter optimization and peer-
to-peer networking design. In this work, they describe
a system for simulating how adversarial agents, both
economically rational and Byzantine, interact with a
blockchain protocol.

In [16], the mining strategy of Bitcoin is simulated
and studied. A network is modeled, but the propagation
of transactions is not simulated, since the focal point is
to study the impact of the block size, block interval,
and the block request management system.

To the best of our knowledge, LUNES-Blockchain is
the ﬁrst simulator of blockchains that is able to take ad-
vantage of the performance speedup and extended scal-
ability provided by PADS. A detailed performance eval-
uation of the speedup that can be obtained by employ-
ing PADS techniques in the simulation of blockchains
is left as future work since in this paper we prefer to
focus on the security aspects of DLTs that can be in-
vestigated by means of simulation. However, the simu-
lation of blockchains has a lot common with the simula-
tion of complex networks. For example, the communica-
tion as represented in the peer-to-peer network used to
spread messages in the distributed system that builds
up the DTL is not diﬀerent from a message dissemina-
tion on a complex network (i.e. gossiping on a scale-
free network). On this side, PADS techniques have al-
ready demonstrated that they can signiﬁcantly reduce

the amount of time that is required to complete the
simulation runs while enabling the simulation of larger
network topologies [29,10,24,9,23].

2.4 Security Analysis Through Virtual Environments

Virtual environments are an important tool for study-
ing the security, eﬃciency and scalability of a computer
system. Sometimes, depending on the complexity of the
systems, it is not possible to analyze certain speciﬁc
problems only by analytic methods or model checking,
thus the creation of a virtual environment that relies
on the usage of simulation techniques may be needed.
In certain situations, it could be necessary to build a
model characterized by high ﬁdelity, maybe including
in the virtual testbed also hardware components. Un-
der other circumstances, on the other hand, it might
not be necessary to represent all the system in its com-
plexity but some aspects can be neglected, thus favoring
the execution speed of the virtual environment and its
scalability.

In particular, the creation of a virtual environment
based on simulation has the advantage that made it
possible to study and detect issues in advance with re-
spect to the real implementation of the system to be
built. For example, it is possible to carefully analyze
critical points and possible vulnerabilities of the appli-
cations that are going to be developed. This can be use-
ful above all where the actual implementation is costly
or where potential bugs could lead to dire or not eas-
ily ﬁxable consequences. Another well-known example
are digital twins. A digital twin is deﬁned as a digi-
tal replica of a living or non-living physical entity [25].
That replica can be a very useful testbed for existing
systems as well, since it allows us to test and evaluate
strategies for solving or improving certain known issues
without shutting down the actual system.

While most of the studies about cybersecurity fo-
cus on conﬁdentiality (i.e. data can be accessed only by
those who have the permission), integrity (i.e. data are
not altered or corrupted) and availability (i.e. data and
services are always available to those who have the per-
mission whenever they want), this work aims to inves-
tigate the usage of virtual environments for the study
of high level attacks, speciﬁcally to the overlay network
(i.e. Sybil attack) and to the consensus protocol (51%
and selﬁsh mining attacks).

The focus of this paper is on attacks that, in some
way, involve the whole network. We decided to study
this kind of attacks because they are among the ma-
jor risks in the current blockchains and because they
represent a good opportunity to show the scalability
of LUNES-Blockchain. On the other hand, it is worth

6

Luca Serena et al.

to note that virtual environments can be also used to
study targeted attacks on the virtualized systems or
to investigate speciﬁc conditions of given nodes in the
blockchain network. For example, we could be inter-
ested in evaluating the security aspects of certain dis-
semination protocols in presence of poorly connected
nodes. In fact, the structuring of the overlay network
can aﬀect the level of coverage and eﬃciency that can be
achieved in the system, with the least connected nodes
behaving as most vulnerable ones. LUNES-blockchain
allows us to easily test the network conﬁgurations that
may present criticalities (i.e. corner cases).

3 Simulation of the Bitcoin Network

With the aim to make this paper as self-contained as
possible, in this section we introduce some background
on Discrete Event Simulation (DES) and Parallel And
Distributed Simulation (PADS) techniques. After that,
we describe the ART`IS/GAIA simulation middleware
and the LUNES simulation model that have been used
for implementing LUNES-Blockchain.

DES is a simulation paradigm that allows us to com-
bine likelihood of the representation and ease of use. In
DES, each event (i.e. a change in the simulated model)
happens at a speciﬁc time in the model evolution. In
other words, a DES can be seen as the execution in
chronological order of a sequence of events. Under the
implementation viewpoint, the main components of a
DES are i) a set of state variables that model to the
various entities in the modelled system, ii) an ordered
list of future events to be executed and iii) a global clock
that represents the current time in the simulation and
that triggers the execution of events from the ordered
list.

A DES can be implemented in many diﬀerent ways.
For example, it is possible to rely on both monolithic or
distributed architectures. In a monolithic (i.e. sequen-
tial) simulation, all the model state variables represent-
ing the simulated model are allocated in a single execu-
tion process (usually run on top of a single CPU core)
that is in charge of managing and generating events.
The main advantage of this approach is its simplicity
but often its execution speed is not optimal and it lacks
of scalability. For example, the scalability of the simu-
lator is limited, both in terms of time required to com-
plete the simulation runs and complexity of the system
that can be modelled [11].

When it is necessary to boost execution performances
or to model complex systems then it is possible to fol-
low a PADS approach. In this case, the simulation is
executed on top of a parallel/distributed execution ar-
chitecture composed of multiple interconnected CPUs.

A PADS permits to share the model workload among
multiple LPs (i.e. logical processes, model components
executed by single execution units). Following this ap-
proach there is no more a global state of the simulation
model but each LP manages a speciﬁc portion of the
simulated model. In practice, each LP (that is now run
on a diﬀerent CPU core) deals with just a part of the
pending events and the various LPs communicate via
messages to deliver remote events. The main advantage
of using a PADS is that it enables the modelling and
the processing of larger and more complex simulation
models with respect to a monolithic setup. On the other
hand, the partitioning of the simulated model is not a
complex problem [8] and the usage of a synchronization
algorithm that coordinates the LPs execution is needed
to guarantee the simulation correctness [15]. In other
words, the output obtained by a PADS simulation must
be exactly the same as what obtained when running the
simulation model by using a sequential approach.

3.1 ART`IS/GAIA

The Advanced RTI System (ART`IS) is a parallel and
distributed simulation middleware that implements the
partitioning of the simulation model in a set of LPs.
Following this approach, the simulation is run on top
of a parallel/distributed execution architecture that is
composed of multiple interconnected Physical Execu-
tion Units (PEUs). Each PEU (i.e. a CPU core) runs at
least one LP. The simulation middleware (i.e. ART`IS)
is in charge of providing to the LPs some main services
like i) time management (i.e. synchronization), that is
necessary for obtaining correct simulation results and
ii) data distribution management, that is necessary for
the eﬃcient delivery of interactions between the LPs.

The communication between the diﬀerent partitions
of the simulated model (i.e. LPs) is very relevant in
terms of overhead for the execution of a PADS. This
is due to the amount of time that is spent in deliver-
ing the interactions between the model components. In
other words, the amount of time that is necessary to
complete the execution of a PADS (i.e. wall-clock time)
is highly dependent on the performance of the com-
munication network (i.e. latency, bandwidth and jitter)
that interconnects the PEUs and how the partitioning
of the simulation model has been arranged.

The Generic Adaptive Interaction Architecture (GAIA)

is a software framework that uses the service provided
by ART`IS [5] and that has two main goals: to simplify
the deﬁnition of PADS models and to increase the ef-
ﬁciency of their execution. To achieve these goals, the
simulation model is partitioned in a set of Simulated
Entities (SEs) that can be seen as ﬁne-grained model

Security Analysis of Distributed Ledgers and Blockchains through Agent-based Simulation(cid:63)

7

components. Each LP clusters a set of SEs and provides
to them some basic simulation services (e.g. synchro-
nization and message passing) and some higher level
services (e.g. proximity detection, advanced data struc-
tures etc.). Following the approach implemented in GAIA,
the evolution of the simulation model is obtained through
interactions among the SEs. These interactions are then
encapsulated by timestamped messages that are ex-
changed between the LPs. From the simulation mod-
elling viewpoint, GAIA follows a Multi Agent System
(MAS) approach in which each SE represents an agent.
Depending on the simulation model that is implemented
using GAIA, the SE can be a network node, a car or any
other object used by the simulation model. More gener-
ally, each SE can be seen as an autonomous agent able
to perform some speciﬁc actions (i.e. individual behav-
ior) and to interact with other agents in the simulation
(i.e. group behaviors).

In addition, GAIA implements a rather complex
set of mechanisms that are aimed to reduce the com-
munication overhead in the parallel/distributed exe-
cution setup. This is obtained by clustering the SEs
that have frequent interactions in the same LP. For
example, if a group of SEs is close in the simulated
space, and they communicate using proximity-based
technology (e.g. WiFi networks), then it is likely a good
idea to cluster them together. In terms of communica-
tion overhead, clustering the heavily-interacting enti-
ties has the advantage to reduce the amount of costly
LAN/WAN/Internet communications while increasing
the usage of eﬃcient shared memory messages. In the
current version of GAIA, this is obtained by analyzing
the interaction pattern of each SE during the simula-
tion execution and then triggering the necessary SEs
re-allocations (i.e. migrations) between the LPs. The
decision on when and how to perform migrations can
be taken in many diﬀerent ways. Currently, GAIA im-
plements the clustering of SEs using a set of high-level
heuristics that analyze the communication behavior and
that are independent form the speciﬁc simulation do-
main.

3.2 LUNES

Fig. 1: LUNES-Blockchain system architecture: the
blockchain simulator (i.e. LUNES-Blockchain) runs on
top of the (simulated) communication services provided
by the P2P dissemination simulator (i.e. LUNES).

The simulator has a modular structure in which
each module is in charge of a speciﬁc phase that is ex-
ecuted separately:

– Creation of network topology, which is entrusted to
an external library called “igraph“ [18]. There is
the possibility to choose among diﬀerent network
topologies, as well as setting the network size (i.e. num-
ber of nodes) and the total number of edges.

– Protocol simulation, that implements the data dis-
semination on top of the peer-to-peer network for a
given amount of simulated time. If there is a simula-
tion model implemented on top of the dissemination
protocol, then it is executed in this phase.

– Performance evaluation, batch data evaluation and
computation of main metrics on the data collected
during the simulation.

Given that, LUNES is built on top of ART`IS (i.e. par-
allel and distributed processing) and GAIA (i.e. adap-
tive self-clustering, dynamic computational and com-
munication load-balancing), it can beneﬁt of an eﬃ-
cient approach to simulate detailed protocols on top of
large scale networks. For example, some tests on the
hardware used for the performance evaluation reported
in the following of this paper, showed that running
LUNES using 4 LPs (on top of 4 diﬀerent PEUs) per-
mits to almost halve the time required to complete the
simulation runs with respect to a sequential simulation
(i.e. using a single LP).

LUNES (Large Unstructured NEtwork Simulator) is a
simulator of complex networks implemented on top of
ART`IS/GAIA. The software has been designed to sim-
ulate large scale peer-to-peer networks and to evaluate
the eﬃciency of data dissemination protocols running
on top of them. The tool is thought to be easily expand-
able [10], so that adding new simulation models on top
of the existing services is a rather simple task.

3.3 LUNES-Blockchain

LUNES-Blockchain is a virtual environment based on
LUNES, whose structure is described in Figure 1. This
virtual environment allows us to study both the be-
haviour of the blockchain and the main security attacks
on the modelled system. In LUNES-blockchain, each

8

Luca Serena et al.

node is represented by means of an agent that imple-
ments a local behavior and interacts with other agents.
This kind of representation simpliﬁes the development
of the model and, in our view, it adds a high-level of
extensibility to the virtual environment.

LUNES-Blockchain speciﬁcally simulates the behaviour

of a blockchain based on PoW, such as Bitcoin. Some
of the nodes are deﬁned to be miners, and it is assigned
to them a speciﬁc hash-rate, corresponding to the per-
centage of computational power at the disposal of those
nodes. Furthermore, the software allows us to assign
to certain nodes, representing computationally power-
ful clusters, a bigger amount of cryptographic power.
Finally, during the simulation of the attacks, a speciﬁc
hash-rate is assigned to the malicious node, thus scaling
back the hash-rates of the other nodes.

In the virtual environment, the time in the sim-
ulated systems is represented by using a sequence of
time-steps. As mentioned before, to increase the verac-
ity of the simulation, the virtual environment uses a
multilevel approach, in order to represent separately
the mining steps (about 5 minutes long) and the prop-
agation steps (a few fractions of a second). In LUNES-
Blockchain, the simulation of the mining process is mod-
elled to follow the diﬃculty and the behavior of the Bit-
coin mining process, where a block is mined on average
every 10 minutes. This multi-level approach permits to
model the ﬁne details when it is necessary without af-
fecting the simulator scalability.

The design of LUNES-Blockchain has been struc-
tured in phases: i) modelling and simulation of a generic
blockchain; ii) modelling of the speciﬁc aspects of the
Bitcoin blockchain; iii) modelling of some speciﬁc at-
tacks to the blockchain (i.e. “51% attack”, “denial of
service” and “selﬁsh mining”). This multi-phase ap-
proach, permits to easily add the missing functionalities
(e.g. another type of attack) or to add the support for
another blockchains.

According to the Bitcoin policy, the Bitcoin simu-
lation model included in LUNES-Blockchain (i.e. phase
ii), propagates the new blocks using a broadcast dissem-
ination mechanism [7]. Despite that, LUNES-Blockchain
allows the use of diﬀerent dissemination protocols as
well. This enables to evaluate the impact of these proto-
cols on the blockchain performance and their eﬀects on
the blockchain security. For example, when evaluating
the denial of service attack, the diﬀerent dissemination
protocols provided by LUNES led to diﬀerent spreading
of messages on the P2P network. This permits the use
of the LUNES-Blockchain virtual environment to inves-
tigate the resilience of the dissemination algorithms, as
well as of consensus protocols, against a certain num-
ber of nodes that do not relay the received messages.

LUNES-blockchain is a high level simulator, which aims
to reproduce only the relevant aspects for our purposes,
thus lowering the complexity and enhancing the ease of
management. For example, Proof-of-Work is replaced
by the probability for a node to mine a block in a cer-
tain time interval and the blocks in the simulations are
not structured with all the eﬀective components, be-
cause reproducing an actual exchange of transactions
would be meaningless for our results and would only
bring a signiﬁcant time overhead in the execution. In
accordance to this principle, in the simulations of the
Sybil attack the behaviour of the blockchain is not re-
produced, since this attack is not speciﬁc of the crypto-
systems, but it can be applicable to all the peer-to-peer
systems based on the relays of messages. Finally, the
software is thought to allow the users to easily modify
execution parameters such as the employed gossip pro-
tocol, the overall number of time-steps, the percentage
of nodes acting as miners and the diﬃculty for a node
to mine a block. Regarding the latter, in our default
conﬁguration a block is mined on average every two
mining time-steps, meaning that each time-step repre-
sents a time slot of about 5 minutes.

LUNES-Blockchain is available for peer-review and
it will be included in the forthcoming release of LUNES
that will be available in source code format on the re-
search group website [5].

4 Evaluation of Security Attacks

In this section, we report the results obtained using
LUNES-Blockchain to study some well-known security
attacks on the simulated Bitcoin blockchain. In par-
ticular, regarding to the 51% attack, we study the re-
lationship between the hash-rate of the attacker and
his/her ability to control the ﬂow of the generation of
blocks, which could lead to a misbehaviour like the dou-
ble spending [27]. About selﬁsh mining, we evaluate the
feasibility of the attack and the actual beneﬁts for the
attacker of such a strategy. Finally, for which concerns
the Sybil attack, we analyze the role of the dissemina-
tion protocol used in the underlying peer-to-peer net-
work (i.e. gossip protocol) and the topology of the net-
work in resisting to the attempt to isolate speciﬁc nodes
from the system.

4.1 51% Attack

51% attacks occur when a node, or a group of colluded
nodes, owns a signiﬁcant part (if not the majority) of
the hashing power of the blockchain network, thus un-
dermining the decentralized nature of the system. At-

Security Analysis of Distributed Ledgers and Blockchains through Agent-based Simulation(cid:63)

9

tackers can exploit their computational power to mine
a high amount of blocks in order to carry out fraudulent
behaviour, such as double spending. It is important to
notice that, in order to have a majority of the hash-rate
and be sure to have enough power to control the evo-
lution of the blockchain, the attacker actually needs a
hash-rate strictly higher than 50% (i.e. 50% + 1). How-
ever, for the sake of a simpler name, people usually
refer to this situation as “51%”. Thus, we adopt the
same terminology.

Three diﬀerent criteria have been used to evaluate
how much the cryptographic power, owned by the at-
tacker, can inﬂuence its ability to control the ﬂow of
blocks’ generation. The metrics used are:

– Number of blocks actually mined by the attacker

and then inserted in the main chain;

– Percentage of blocks in the main chain mined by the

attacker;

– Percentage of blocks mined by the attacker which

ends up in the main chain.

The LUNES-Blockchain virtual environment has been
conﬁgured to simulate a random graph composed of 500
nodes and 2000 undirected edges. In this conﬁguration
of the simulator, 99 tests have been made, each one
with an increasing percentage of the attacker’s hash-
rate (from 1% to 99%). For each of the 99 tests several
runs have been executed and the average result have
been calculated and reported. Every setup has been
evaluated twice, in order to check if the presence of the
pools of miners (i.e. miners who group together shar-
ing their cryptographic power to have a better chance
to mine a block) can inﬂuence the attack outcomes.
In the ﬁrst conﬁguration, we simulated the presence of
9 nodes, representing the biggest known Bitcoin pools
and constituting all together the 80.4% of the hash-rate
of the network (attacker excluded). In the second con-
ﬁguration, pools are not considered, meaning that there
are no nodes with a hash-rate signiﬁcantly higher than
the others.

The results show that, unsurprisingly, the higher
the hash-rate of the attacker the higher the number of
blocks mined by the attacker, since the ability of mining
a block for a node is proportional to its computational
power. The curve in Figure 2 has an almost linear be-
haviour. It is worth noticing that, on this aspect, the
presence of mining pools does not aﬀect the behavior
of the attack.

Figure 3 shows a relevant diﬀerence between the
expected and the observed behaviour of the attacker
(i.e. it was expected for a node owning h% of the hash-
rate to validate approximately h% of the blocks in the
main chain). With the attacker having a hash-rate greater

Fig. 2: The X-axis indicates the percentage of crypto-
graphic power owned by the attacker while the Y-axis
indicates the number of blocks mined by the attacker.

than 25%, the percentage of the blocks mined by the
malicious nodes is always greater than what is expected,
with a discrepancy around 10% for certain values. The
motivation of such a behaviour is that when a fork oc-
curs, the nodes are encouraged to extend the part of the
forked chain that contains their own validated blocks.
LUNES-Blockchain implements such a strategy. Fig-
ure 4 shows that the percentage of the blocks mined
by the attacker among all the blocks (and not just the
ones that end up in the main chain) follows the ex-
pected behaviour. This conﬁrms that the discrepancy
noted in Figure 3 occurs just because of the choice of
which chain to extend. Furthermore, from ﬁgure 3 one
can deduce the probability to perform double spend-
ing, since in order to accomplish such fraudulent be-
haviour the attacker needs to mine the next block that
is going to appear in the main chain. Our results agree
with studies like [28], stating that for attackers with
medium-low hash-rate it is diﬃcult (but not impossi-
ble) to succeed in double spending, while for attackers
with a high hash-rate the success of the attack is much
more probable.

Figure 5 shows the percentage of the blocks mined
by the attacker that actually end up in the main chain.
The observed curve is more irregular if compared to
the results presented above. However, the trend that,
the higher the attacker’s hash-rate the higher the per-
centage of blocks ending up in the main chain, is still
evident. This happens for two main reasons: i) with
a growing hash-rate owned by the attacker, there are
less blocks that are mined by other nodes; ii) in case
of forks, the malicious user will continue to extend the

10

Luca Serena et al.

Fig. 3: The X-axis indicates the percentage of the cryp-
tographic power owned by the attacker while the Y-axis
indicates the percentage of blocks in the main chain
mined by the attacker. The blue line indicates the ex-
pected behaviour while the orange curve reports the
observed behaviour.

Fig. 4: The X-axis indicates the percentage of the cryp-
tographic power owned by the attacker while the Y-axis
indicates the percentage of the total blocks mined by
the attacker. The blue line indicates the expected be-
haviour while the orange curve reports the observed
behaviour.

chain where there is a larger amount of blocks mined
by him.

It is relevant to note that the results reported in this
section show that the presence of mining pools does not
signiﬁcantly aﬀect the outcome of 51% attacks.

Fig. 5: The X-axis indicates the percentage of crypto-
graphic power owned by the attacker while the Y-axis
indicates the percentage of blocks mined by the attacker
that actually ended up in the main chain.

4.2 Selﬁsh Mining Attack

Selﬁsh mining is an attack in which a malicious node
does not spread immediately to the network the last
block that it has mined. In fact, it tries to mine further
blocks with the aim to gain an advantage of at least
two unities with respect to the public ledger. In case
of success, the computational eﬀort of the other nodes
becomes useless. This happens because, in the case of
forks, the nodes agree to consider as valid and extend
the longest chain. Thus, if the malicious node is able
to locally mine a sequence of blocks longer than the
main chain of the public blockchain, then the compu-
tational eﬀort of the other miners will be wasted until
when the attacker reveals its blocks. Using the LUNES-
Blockchain virtual environment, we have tested how the
blockchain behaves when an attacker has an advantage
of 2 or 3 units before spreading its blocks.

Similarly to the 51% attack, the selﬁsh mining at-
tack was investigated in the presence of a random graph
with 500 nodes and 2000 edges. Also in this case, we
varied the attacker hash-rate in order to better ﬁgure
out the outcomes of the attack in diﬀerent conditions.
Figure 6 shows that, as expected, increasing the
hash-rate owned by the attacker leads to a greater num-
ber of ﬁnalized attacks. It is worth noticing that our
tests demonstrate that selﬁsh mining is not always con-
venient for the attacker. In fact, if an attacker that
owns 50% or less of the total hash-rate applies a selﬁsh
mining strategy, then the attacker is able to spread in
the public main chain fewer blocks than when he/she
implements a normal behaviour (i.e. not malicious).

Security Analysis of Distributed Ledgers and Blockchains through Agent-based Simulation(cid:63)

11

by creating a large number of fake identities directly
controlled by him/her. More speciﬁcally, in this case the
goal of the attacker is to isolate some speciﬁc nodes from
the system, impeding them to spread their transactions
to the network. Thus, when a Sybil node ( i.e. a node
controlled by the attacker) receives a message created
by the victim, it does not forward such a message to
its neighbors. On the other hand, Sybil nodes behave
according to the dissemination protocol for all the other
messages received.

In the tests described in this section, we report the
outcomes obtained from the LUNES-Blockchain virtual
environment when the attack is executed on random
graphs composed of 10000 nodes. In each simulation
run, we collected the percentage of potential receivers
(i.e. the nodes of the system except the attackers and
the creator of the transaction) that are actually able
to receive the newly generated message that has been
delivered to the network. As described above, the goal
of the attackers is to limit the diﬀusion of messages
(i.e. containing the new transactions) up to the point
to exclude some nodes from the updates. In order to
obtain results that are not inﬂuenced by the position
of the nodes (whether if involved in the creation of the
message or in the attack) within the network, the tests
were repeated several times, choosing each time a diﬀer-
ent node as a message originator and then selecting the
malicious nodes randomly. In these experiments, un-
like other analyzed attacks, the computational power
owned by the nodes is irrelevant for the purpose of the
simulation, thus no hash-rate is assigned to the nodes
in order to lower the complexity of the software. The
employed dissemination protocol and the percentage of
malicious nodes in the network are the only variable
elements considered in this analysis.

We have ﬁrstly investigated a setup in which each
network generated for modelling the message dissemi-
nation is composed of an average of 8 edges per node [26].
The aim of this evaluation is to show which dissemina-
tion protocols are able to ensure a greater level of re-
silience against a varying percentage of malicious nodes
(i.e. nodes that do not relay the received message, try-
ing to isolate the victim user from the system).

Figure 8 shows the results obtained by Dandelion
(in two diﬀerent conﬁgurations of the stem phase) and
Dandelion+- (that is a variant of Dandelion++ de-
scribed in Section 2.1). Figures 9 and 10, report the
results obtained using the Probabilistic Broadcast and
the Fixed Probability dissemination protocols. Also in
this case, diﬀerent setups for the dissemination proto-
cols have been investigated (i.e. dissemination probabil-
ities). The outcomes show that Dandelion is extremely
vulnerable to Sybil attacks if compared to the other al-

Fig. 6: Selﬁsh Mining Attack executed on a simulated
network with random graph topology, 500 nodes and
2000 edges.

Fig. 7: Number of attacker’s blocks that ended up in
the main chain. This number indicates the advantage
(in terms of blocks) that the attacker wants to achieve
before spreading to the world the blocks mined locally
(and not broadcasted to the whole network yet).

Conversely, when the attacker owns a very high hash-
rate (i.e. more than a half of the overall computational
power) then this attack strategy can be convenient. Fig-
ure 7 reports the measured eﬃciency of the selﬁsh min-
ing strategy.

4.3 Sybil Attack

A Sybil Attack is a speciﬁc type of denial of service in
which a malicious user (or a group of colluded users)
tries to gain a disproportionate inﬂuence in the network

12

Luca Serena et al.

Fig. 8: Coverage (Percentage of honest nodes reached) –
Dissemination: Dandelion, Overlay Topology: Random
Graph with 40000 edges.

Fig. 10: Coverage (Percentage of honest nodes reached)
– Dissemination: Fixed Probability, Overlay Topology:
Random Graph with 40000 edges.

Fig. 9: Coverage (Percentage of honest nodes reached) –
Dissemination: Probabilistic Broadcast, Overlay Topol-
ogy: Random Graph with 40000 edges.

Fig. 11: Coverage (Percentage of honest nodes reached)
– Dissemination: Dandelion, Overlay Topology: Ran-
dom Graph with 80000 edges.

gorithms. This situation can be signiﬁcantly improved
by switching to the Dandelion+- dissemination proto-
col. In this way, it is possible to have both better guar-
antees for the anonymity of the blockchain users and a
good resilience against Sybil attacks. The Fixed Prob-
ability and the Probabilistic Broadcast protocols show
similar results, but it is worth noticing that Fixed Prob-
ability constantly behaves slightly better.

Figures 11, 12 and 13 report on the results obtained
when doubling the number of edges in the network. As
shown in the ﬁgures, in this case the attack is much
more diﬃcult to carry out, thus meaning that the aver-

age degree of the nodes is a key factor for withstanding
the Sybil attack.

Finally, we used LUNES-Blockchain to study the
eﬀect of the network topology on the resilience to the
Sybil attacks. More speciﬁcally, we repeated all the pre-
viously described tests but using small-world graphs in-
stead of random graphs. The number of nodes and edges
has been maintained equivalent. The results are not re-
ported in this paper for conciseness but show that in
this speciﬁc case the network topology has no relevant
eﬀects, in fact the obtained results are almost identical.

Security Analysis of Distributed Ledgers and Blockchains through Agent-based Simulation(cid:63)

13

reported in this section were executed on a PC equipped
with an Intel Core i5 processor (8th generation) with
8 GBs of RAM running GNU/Linux Fedora 33 (kernel
5.8.17-300.fc33.x86 64).

First of all, we have measured the amount of time
required for completing the execution of the 51% tests
on a network with 500 nodes and 2000 edges. The se-
quential execution (i.e. LUNES-Blockchain running on
a single CPU core) required on average 19 minutes and
30 seconds. As expected, by doubling the number of
edges the simulation required more than double the
time, precisely 40m40s, while it required 46m09s to run
with 1000 nodes and 4000 edges. When processing the
data, we noticed slight variations among diﬀerent exe-
cutions, in the range of one minute, that are due to the
random behavior of the gossip protocols implemented
for the dissemination phase.

Analogously, selﬁsh mining tests required, on aver-
age, 14m30s on a network with 500 nodes and 2000
edges, 33m17s on a network with double the edges and
36m21s on a graph with 1000 nodes and 4000 edges. It
is interesting to note that the number of links aﬀects the
execution times more than the number of nodes. This
can be easily explained by analyzing the behavior of
the dissemination protocols since every increase in the
number of edges has a huge impact on the number of
messages that need to be disseminated in the network.
This aspect has been already investigated in [10].

As concerns the lower-level of the simulation (up
to the implementation of the dissemination protocols),
adopting a parallel approach (i.e. multiple execution
units are used for running the simulation) can speed
up the execution of the LUNES-Blockchain component
that implements this part of the simulation model (i.e. LUNES).
Table 1 reports the execution times, obtained using the
Fixed Probability algorithm over a 500 nodes graph
with a varying number of edges of the network and us-
ing diﬀerent conﬁgurations of LPs (i.e. CPU cores used
concurrently.

Fig. 12: Coverage (Percentage of honest nodes reached)
– Dissemination: Probabilistic Broadcast, Overlay
Topology: Random Graph with 80000 edges.

Fig. 13: Coverage (Percentage of honest nodes reached)
– Dissemination: Fixed Probability, Overlay Topology:
Random Graph with 80000 edges.

5 Performance Evaluation of
LUNES-Blockchain

In this section, we analyze the runtime performance
of the LUNES-Blockchain virtual environment. More
speciﬁcally, we investigate how much the duration of
the execution is dependent on the graph size and on the
level of parallelization. We report this kind of analysis
since we think that virtual environments should not
only be able to provide correct and precise results but
also to operate, in some speciﬁc cases, so fast that they
can be used to operate real-world systems. For example,
in support of real-time what-if analysis. All the tests

The data reported in the table suggest that even if
several LPs are needed to achieve a signiﬁcant speedup,
it is possible to get a performance gain by using parallel
execution. For example, with 5 LPs it is possible to
achieve a 20% reduction of the execution time of this
part of the simulator.

We think that future systems, that will be based on
larger networks and even more intensive communication
patterns, will be able to further beneﬁt of simulations
following a PADS approach.

14

Luca Serena et al.

Table 1: Execution time of the dissemination protocol (i.e. LUNES) when varying on the number of LPs.

Number of Edges

1 LP 2 LP 3 LP 4 LP 5 LP 6 LP

500 nodes, 1500 edges
500 nodes, 2000 edges
500 nodes, 2500 edges
1000 nodes, 4000 edges

30s
41s
53s
331s

29s
41s
51s
209s

28s
39s
47s
184s

26s
35s
45s
146s

25s
32s
41s
138s

22s
30s
39s
126s

6 Conclusions

In this paper, we have introduced a virtual environ-
ment built on top of an agent-based simulator called
LUNES-Blockchain, which allows us to simulate the
blockchain behaviour even in the presence of attacks.
The virtual environment has been then used to ver-
ify the outcomes of the attacks in presence of diﬀer-
ent blockchain setups. Selﬁsh mining and 51% attack
simulations showed that, as predictable, the feasibility
of the attacks is directly proportional to the hash-rate
owned by the malicious node. However, it was demon-
strated that selﬁsh mining is not an eﬃcient strategy
for the attacker if this one owns less than a half of
the overall computing power. As concerns the 51% at-
tack, the most interesting consideration is that when
the hash-rate h% of the attacker is h > 30%, the at-
tacker is constantly able to mine a greater percentage
of blocks, with respect to the percentage of computa-
tional power. On the other hand, denial of service at-
tacks have a considerably greater success in the least
connected networks, because there is a greater proba-
bility that a node is connected to only malicious nodes.
Finally, the simulation results showed that the gossip
protocols used to spread information also have an im-
pact on the resilience level, in particular an enhanced
version of Dandelion that implements a fail-safe mech-
anism (in this paper referred as Dandelion+-) is able to
ﬁx the issues detected in the original version of Dande-
lion. In general, LUNES-Blockchain demonstrated that
virtual environments based on simulation can be used
to study some relevant security aspects of complex sys-
tems such as blockchains. Moreover, when scalability
is an issue, a parallel/distributed approach can give a
limited but still relevant performance boost with re-
spect to traditional methodologies based on sequential
simulation.

References

1. Alharby, M., van Moorsel, A.: Blocksim: A simulation
framework for blockchain systems. SIGMETRICS Per-
form. Eval. Rev. 46(3), 135–138 (2019)

2. Aoki, Y., Otsuki, K., Kaneko, T., Banno, R., Shudo, K.:
Simblock: A blockchain network simulator. In: Proc. of

the 2nd Workshop on Cryptocurrencies and Blockchains
for Distributed Systems, CryBlock’19. IEEE (2019)
3. Castro, M., Liskov, B.: Practical byzantine fault toler-
ance. In: Proceedings of the Third Symposium on Op-
erating Systems Design and Implementation, OSDI ’99,
pp. 173–186. USENIX Association, Berkeley, CA, USA
(1999)

4. Chitra, T., Quaintance, M., Haber, S., Martino, W.:
Agent-based simulations of blockchain protocols illus-
trated via kadena’s chainweb. In: 2019 IEEE European
Symposium on Security and Privacy Workshops (EuroS
PW), pp. 386–395 (2019). DOI 10.1109/EuroSPW.2019.
00049

5. D’Angelo, G., Ferretti, S.: Parallel And Distributed Simu-
lation (PADS) Research Group. http://pads.cs.unibo.
it (2020)

6. D’Angelo, G., Ferretti, S., Marzolla, M.: A blockchain-
based ﬂight data recorder for cloud accountability.
In:
Proceedings of the 1st Workshop on Cryptocurrencies
and Blockchains for Distributed Systems, CryBlock’18, p.
93–98. Association for Computing Machinery, New York,
NY, USA (2018). DOI 10.1145/3211933.3211950. URL
https://doi.org/10.1145/3211933.3211950

7. Decker, C., Wattenhofer, R.: Information propagation in
the bitcoin network. In: IEEE P2P 2013 Proceedings, pp.
1–10 (2013). DOI 10.1109/P2P.2013.6688704

8. D’Angelo, G.: The simulation model partitioning prob-
lem: An adaptive solution based on self-clustering.
Simulation Modelling Practice and Theory 70, 1–20
(2017). DOI https://doi.org/10.1016/j.simpat.2016.10.
001. URL https://www.sciencedirect.com/science/
article/pii/S1569190X16302350

9. D’Angelo, G., Ferretti, S.: Simulation of

scale-free
DOI 10.4108/ICST.

networks.
SIMUTOOLS2009.5672

ICST (2010).

10. D’Angelo, G., Ferretti, S.: Highly intensive data
dissemination in complex networks.
Journal of Par-
allel and Distributed Computing 99, 28–50 (2017).
DOI https://doi.org/10.1016/j.jpdc.2016.08.004. URL
https://www.sciencedirect.com/science/article/
pii/S0743731516301058

11. Egea-Lopez, E., Vales-Alonso, J., Martinez-Sala, A.,
Pavon-Mario, P., Garcia-Haro, J.: Simulation scalability
issues in wireless sensor networks. IEEE Communications
Magazine 44(7), 64–73 (2006). DOI 10.1109/MCOM.
2006.1668384

12. Eyal, I., Sirer, E.G.: Majority is not enough: Bitcoin min-
ing is vulnerable. Commun. ACM 61(7), 95–102 (2018)
13. Fanti, G., Venkatakrishnan, S.B., Bakshi, S., Denby,
B., Bhargava, S., Miller, A., Viswanath, P.: Dande-
lion++: Lightweight cryptocurrency networking with for-
mal anonymity guarantees. Proc. ACM Meas. Anal.
Comput. Syst. 2(2) (2018). DOI 10.1145/3224424. URL
https://doi.org/10.1145/3224424

14. Ferretti, S.: Gossiping for resource discovering: An
analysis based on complex network theory.
Fu-
ture Generation Computer Systems 29(6), 1631–1644

Security Analysis of Distributed Ledgers and Blockchains through Agent-based Simulation(cid:63)

15

In: Proceedings of the 2021 Annual Modeling and Simu-
lation Conference (ANNSIM 2021) (2021)

30. Stoykov, L., Zhang, K., Jacobsen, H.A.: Vibes:
Fast blockchain simulations
large-scale peer-to-
In: Proceedings of the 18th
peer networks: Demo.
ACM/IFIP/USENIX Middleware Conference: Posters
and Demos, Middleware ’17, pp. 19–20. ACM, New York,
NY, USA (2017)

for

31. Wang, B., Chen, S., Yao, L., Liu, B., Xu, X., Zhu, L.: A
simulation approach for studying behavior and quality of
blockchain networks. In: S. Chen, H. Wang, L.J. Zhang
(eds.) Blockchain – ICBC 2018, pp. 18–31. Springer In-
ternational Publishing, Cham (2018)

32. Wang, B., Wang, Q., Chen, S., Xiang, Y.: Security anal-
ysis on tangle-based blockchain through simulation. In:
J.K. Liu, H. Cui (eds.) Information Security and Privacy,
pp. 653–663. Springer International Publishing, Cham
(2020)

33. Xiao, Y., Zhang, N., Lou, W., Hou, Y.T.: A survey of
distributed consensus protocols for blockchain networks.
IEEE Communications Surveys Tutorials 22(2), 1432–
1465 (2020). DOI 10.1109/COMST.2020.2969706

34. Yasaweerasinghelage, R., Staples, M., Weber, I.: Predict-
ing latency of blockchain-based systems using architec-
tural modelling and simulation. In: 2017 IEEE Interna-
tional Conference on Software Architecture (ICSA), pp.
253–256 (2017). DOI 10.1109/ICSA.2017.22

35. Zichichi, M., Contu, M., Ferretti, S., D’Angelo, G.:
Likestarter: a smart-contract based social dao for crowd-
In: IEEE INFOCOM 2019 - IEEE Confer-
funding.
ence on Computer Communications Workshops (INFO-
COM WKSHPS), pp. 313–318 (2019). DOI 10.1109/
INFCOMW.2019.8845133

(2013). DOI https://doi.org/10.1016/j.future.2012.06.
002. URL https://www.sciencedirect.com/science/
article/pii/S0167739X12001367

15. Fujimoto, R.: Parallel and Distributed Simulation Sys-

tems. Wiley & Sons (2000)

16. Gervais, A., Karame, G.O., W¨ust, K., Glykantzis, V.,
Ritzdorf, H., Capkun, S.: On the security and perfor-
mance of proof of work blockchains. In: Proceedings of
the 2016 ACM SIGSAC Conference on Computer and
Communications Security, CCS ’16, pp. 3–16. ACM, New
York, NY, USA (2016)

17. Grunspan, C., P´erez-Marco, R.: On proﬁtability of selﬁsh

mining. arXiv preprint arXiv:1805.08281 (2018)

18. IGraph library: Network analysis software.

https://

igraph.org/ (2020)

19. Maymounkov, P., Mazi`eres, D.: Kademlia: A peer-to-peer
information system based on the XOR metric. In: P. Dr-
uschel, F. Kaashoek, A. Rowstron (eds.) Peer-to-Peer
Systems, pp. 53–65. Springer Berlin Heidelberg, Berlin,
Heidelberg (2002)

20. Memon, R.A., Li, J., Ahmed, J., Khan, A., Nazir, M.I.,
Mangrio, M.I.: Modeling of blockchain based systems us-
ing queuing theory simulation.
In: 2018 15th Interna-
tional Computer Conference on Wavelet Active Media
Technology and Information Processing (ICCWAMTIP),
pp. 107–111 (2018). DOI 10.1109/ICCWAMTIP.2018.
8632560

21. Miller, A., Jansen, R.: Shadow-bitcoin: Scalable simula-
tion via direct execution of multi-threaded applications.
In: 8th Workshop on Cyber Security Experimentation
and Test (CSET 15). USENIX Association, Washington,
D.C. (2015)

22. Nakamoto, S.: Bitcoin: A peer-to-peer electronic cash sys-

tem,” http://bitcoin.org/bitcoin.pdf (2009)

23. Nguyen, V.T., Fujimoto, R.: Link partitioning in parallel
simulation of scale-free networks. In: Proceedings of the
20th International Symposium on Distributed Simulation
and Real-Time Applications, DS-RT ’16, p. 77–84. IEEE
Press (2016). DOI 10.1109/DS-RT.2016.17. URL https:
//doi.org/10.1109/DS-RT.2016.17

24. Pienta, R.S., Fujimoto, R.M.: On the parallel simulation
of scale-free networks. In: Proceedings of the 1st ACM
SIGSIM Conference on Principles of Advanced Discrete
Simulation, SIGSIM PADS ’13, p. 179–188. Association
for Computing Machinery, New York, NY, USA (2013).
DOI 10.1145/2486092.2486115. URL https://doi.org/
10.1145/2486092.2486115

25. Pokhrel, A., Katta, V., Colomo-Palacios, R.: Digital twin
for cybersecurity incident prediction: A multivocal liter-
In: Proceedings of the IEEE/ACM 42nd
ature review.
International Conference on Software Engineering Work-
shops, ICSEW’20, p. 671–678. Association for Comput-
ing Machinery, New York, NY, USA (2020). DOI
10.1145/3387940.3392199. URL https://doi.org/10.
1145/3387940.3392199

26. Rosa, E., D’Angelo, G., Ferretti, S.: Agent-based simu-
lation of blockchains.
In: G. Tan, A. Lehmann, Y.M.
Teo, W. Cai (eds.) Methods and Applications for Mod-
eling and Simulation of Complex Systems, pp. 115–126.
Springer Singapore, Singapore (2019)

27. Rosenfeld, M.: Analysis of hashrate-based double spend-

ing. arXiv preprint arXiv:1402.2009 (2014)

28. Sayeed, S., Marco-Gisbert, H.: Assessing blockchain con-
sensus and security mechanisms against the 51% attack.
Applied Sciences 9(9), 1788 (2019)

29. Serena, L., Zichichi, M., Ferretti, S., D’Angelo, G.: Simu-
lation of dissemination strategies on temporal networks.

