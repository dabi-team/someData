Towards Veriﬁable Mutability for Blockchains

Erik Daniel
Distributed Security Infrastructures
Technische Universit¨at Berlin
erik.daniel@tu-berlin.de

Florian Tschorsch
Distributed Security Infrastructures
Technische Universit¨at Berlin
ﬂorian.tschorsch@tu-berlin.de

1
2
0
2

n
u
J

0
3

]

R
C
.
s
c
[

1
v
5
3
9
5
1
.
6
0
1
2
:
v
i
X
r
a

Abstract—Due to their immutable log of
information,
blockchains can be considered as a transparency-enhancing
technology. The immutability, however, also introduces
threats and challenges with respect to privacy laws and illegal
content. Introducing a certain degree of mutability, which
enables the possibility to store and remove information, can
therefore increase the opportunities for blockchains. In this
paper, we present a concept for a mutable blockchain struc-
ture. Our approach enables the removal of certain blocks,
while maintaining the blockchain’s veriﬁability property.
Since our concept is agnostic to any consensus algorithms, it
can be implemented with permissioned and permissionless
blockchains.

1. Introduction

Blockchains provide many useful properties, ideally
reducing trust assumptions. The possibility to retrieve
data and verify its validity locally makes blockchains a
transparency-enhancing technology.

While blockchains offer transparency, the immutabil-
ity property brings its own opportunities, challenges and
threats [1, 2]. One big challenge is the inclusion of per-
sonal data. The EU General Data Protection Regulation
(GDPR) allows a data subject the “right to erasure” as
well as the “right to rectiﬁcation” without undue delay.
Therefore, the immutability prevents or at least hinders the
usage of blockchains in cases where personal information
is involved. Some solutions propose to store on-chain
storage locations and hashes of data, storing the real
data off-chain. In these cases, the blockchchain provides
veriﬁability for the data. However, the hash pointers can
still be classiﬁed as personal data, i.e., a pseudonym.

In this concept paper, we propose a blockchain-like
structure that enables the attachment and removal of infor-
mation. To this end, we introduce intentional break points
in the blockchain that allow us to remove certain blocks,
so-called removable blocks. The design combines aspects
of skipchains [3] as well as redactable blockchains [4].
In our approach, however, the delete operation is initiated
through a transaction, making the deletion process veri-
ﬁable. While our approach removes the immutability of
some blocks, we maintain chain integrity and veriﬁability.
Since our approach builds upon a general blockchain
structure, it can extend existing designs, e.g. Bitcoin [5].
For a better understanding of the concept, we apply
it to the use case of consent management. Moreover, we
qualitatively discuss concerns and risks that arise from the
mutability and speciﬁcally the deletion process.

The main contributions of this paper are (i) a struc-
ture for a mutable blockchain that maintains the chain’s
veriﬁability (Section 3), (ii) a mechanism to store data
on-chain in a removable way (Section 4), (iii) a use case
for the structure in the form of explicit blockchain-based
consent management (Section 5), and (iv) a discussion of
risks (Section 6).

2. Related Work

Relaxing the immutability of a blockchain is some-
times a desirable property. While an immutable blockchain
maintains integrity, it prevents removing illegal or mali-
cious content, which should not be replicated [2]. Remov-
ing the immutability property, however, also introduces
new problems. One problem is breaking the chain consis-
tency by removing a block. Every block typically points to
its predecessor by referencing its hash. Removing a block
breaks the link, rendering it impossible to follow the chain
from start to end. Deuber et al. [4] address this problem
with a multi-link blockchain using a voting mechanism to
replace blocks, which breaks one of the links. Ateniese et
al. [6] use chameleon hashes, allowing the computation
of a hash collision through a trapdoor, making restoration
of the link possible. Recent research [7] indicates possible
problems with these forms of redactable blockchains.

Another problem concerns the state of the blockchain
resulting from block removal. Blocks typically hold mul-
tiple transactions, which are potentially all affected by a
block removal. For example, in a rolling blockchain [8],
older blocks are removed to maintain a ﬁxed number of
blocks in the chain. Due to the removal of old blocks,
transactions reference unknown inputs and it becomes im-
possible to verify the validity of the transaction. Another
example are hard forks, where the blockchain starting
from a speciﬁc block is cut and transactions thereby re-
versed. Hard forks are mainly used for substantial protocol
changes, but they can also be used to undo malicious
behavior, e.g., as in the case of the Ethereum DAO hack
and its resulting hard fork [9]. Especially in case of hard
forks the disappearance of transactions is a minor prob-
lem, since all following transactions are removed and the
veriﬁability of previous transactions is secured. Pruning
is another method for removing transactions. Although,
pruning is mainly used for saving storage by deleting
old transactions from blocks [10], and like with a rolling
chain transaction inputs become unknown. Nevertheless,
removing transactions can lead to undesired problems, as

 
 
 
 
 
 
B0

B1

B1.1

permanent
block

removable
block

B2

B2.1

B2.2

interval: |I2| = 2

Figure 1. Visualization of the blockchain structure with a varying inter-
val.

TABLE 1. NEW TRANSACTION TYPES FOR THE STRUCTURE AND USE
CASE

Transaction

Notation

Semantics

Register
Prepare
Delete
Removable

Reg(x)
P rep(x)
Del(x)
Rem(x)

register entity x with pkx
prepare delete of Ix
Ix can be deleted
removable information x

Block type

permanent
permanent
permanent
removable

Information
Consent

Inf o(x)
Con(x, y)

x’s consent collection purpose
x gives consent with value x

permanent
permanent

shown by Puddu et al. [11] in µchain, in which trans-
actions can be modiﬁed after their veriﬁcation. A more
detailed overview of blockchain mutability challenges and
possible solutions can be found in [12].

The data structure of our proposal is similar to a
skipchain [3], allowing to delete certain blocks while
maintaining a chain. The idea is also similar to the
redactable blockchain with multiple links [4]. Instead of
replacing blocks and voting for the acceptance, however,
we distinguish between removable and permanent blocks,
and blocks are removed with transactions included in per-
manent blocks providing conﬁrmation of missing blocks.

3. Mutable Blockhain Structure

In this section, we give a general overview of our con-
cept for a mutable blockchain-based structure, enabling
removal of certain blocks without destroying the chain’s
veriﬁability. Removing blocks allows to “forget” data.
Transactions initiate the removal of speciﬁc blocks.

3.1. Data Structure

In our design, we differentiate between two types of
blocks, permanent blocks and removable blocks, which is
illustrated in Figure 1. Permanent blocks Bi use a hash
pointer to reference a permanent block and a removable
block. Removable blocks Bi.j, on the other hand, refer
only to one previous block. The structure is similar to
the data structure of a skip list, and related to [3, 4].
The number of removable blocks between two consecutive
permanent blocks is called interval. The interval Ii de-
notes the removable blocks Bi.∗ preceding block Bi, e.g.,
I2 = {B2.1, B2.2}. Accordingly, the interval length | Ii |
determines the number of removable blocks. An interval
length of zero results in a blockchain consisting of perma-
nent blocks only, conceptually comparable to immutable
blockchains. The interval length is an adjustable parameter
included in the subsequent permanent block’s header.

3.2. Removable Information

should be allowed to be removed. For our concept and our
use case (see Section 5), we introduce new transaction
types, which are summarized in TABLE 1.

As an example, assume Alice wants to provide remov-
able information. She therefore needs to register ﬁrst with
a register transaction. We denote Alice’s public key with
pkA and her signed transaction as skA(T x). Accordingly,
skA(Reg(A)) is the register transaction for and signed
by Alice. Note, a register transaction has no input, but
requires an output that can be referenced multiple times1.
After the registration, Alice can issue removable trans-
actions to provide removable information. Removable
transactions are self-contained statements, i.e., indepen-
dent of other transactions. They however require the out-
put of the register transaction as an input to create a
traceable link. Removable transactions have no output. In
general, removable transactions can contain any informa-
tion which might be sensitive if included immutably in
the chain, e.g., ﬁles, hash pointers to off-chain storage
locations or personal information about a data subject.

For example, Alice’s removable transaction contains
her e-mail addresses m, i.e., skA(Rem(m)). The remov-
able transaction is conﬁrmed by a removable block, since
it contains data, which should be rectiﬁable, erasable,
or simply removable. If Alice wants to erase her e-mail
address, the removable block containing her transaction
has to (and can) be removed.

4. Block Removal

In our concept, removable blocks and therefore remov-
able transactions can be removed by dropping complete
intervals containing the respective blocks, e.g., B2.1 and
B2.2 for interval I2 in Figure 1. The removal of an inter-
val is initiated with a delete transaction, referencing the
interval to be deleted. Delete transactions are conﬁrmed
in permanent blocks, allowing the veriﬁcation of missing
intervals. In the following, we discuss design considera-
tions, before describing the removal process in detail.

4.1. Methods

We differentiate between authorized removal and
unauthorized removal. The method should be speciﬁed in
advance, since they enforce different block and transaction
validation. In case of an unauthorized removal, intervals
can be removed by anyone by issuing a delete transaction.
The unauthorized delete might be useful for removing sen-
sitive or unwanted content in an interval. For unauthorized
removal, the miners become the judges of the validity of
deletes. A delete transaction would only be conﬁrmed and
therefore included in a block, if they agree to the deletion.
Otherwise, the delete transaction and blocks containing
the delete transaction will be ignored.

When removable transactions contain personal infor-
mation, authorized removal
is preferred. Therefore, a
delete transaction needs to be signed by the issuer of the
removal. A permanent block then requires additionally a
list of public keys Pi of all public keys of the involved
removable transactions of the respective interval. Keys

While permanent blocks contain immutably stored
information, removable blocks contain information, which

1. Maintaining the notion of a UTXO, a register transaction could pre-
pare multiple outputs. restricting the number of subsequent transactions.

State 1: Conﬁrm prepare transaction for delete of I1

B0

| I0 |= 0
P0 = ∅

B1.1

skA(Reg(A))
skB (Reg(B))

skA(Rem(m))
skB(Rem(n))

B1

| I1 |= 1
P1 = {pkA,
pkB }

B2

| I2 |= 1
P2 = {pkB }

B2.1

skB(Rem(n))

skA(Prep(1))

State 2: Delete I1 after additional conﬁrmations of the delete transaction

B0

| I0 |= 0
P0 = ∅

skA(Reg(A))
skB (Reg(B))

B1

| I1 |= 1
P1 = {pkA,
pkB }

B2

| I2 |= 1
P2 = {pkB }

B3.1

B3

| I3 |= 1
P3 = {pkA}

B2.1

skB (Rem(n))

skA(P rep(1))

skA(Rem(o))

skA(Del(1))

Figure 2. Step-by-step example for deleting an interval.

in Pi are eligible to issue the removal of blocks in the
previous interval. Accordingly, if the key is included, Ii
includes a removable transaction of the respective issuer.
A na¨ıve approach to execute a removal would be to
drop the complete interval without any precautions. This
approach is vulnerable to malicious removals, though:
An adversary could issue many removable transactions
to be allowed to remove respective intervals. The adver-
sary can issue removal of intervals containing removable
transactions of other entities, effectively removing benign
entities’ transactions. While the na¨ıve approach preserves
the privacy of the removal initiator, e.g., by using ring
signatures to authorize delete transactions, it has a serious
vulnerability and is therefore not favorable.

A more secure approach is to restrict the conditions
for removing an interval. The interval can only be deleted
after issuing a prepare transaction. This prepare transac-
tion triggers the resending of all transactions from other
entities. These transactions are then re-included in the
transaction memory pool. After conﬁrming the prepare
transaction, the interval can be deleted with the conﬁr-
mation of the delete transaction. The restricted authorized
delete is the most complex method.

4.2. Authorized Block Removal

The restricted authorized block removal is illustrated
in Figure 2. Here, Alice and Bob registered and send each
a removable transaction (cf. State 1). Their removable
transactions are conﬁrmed in the same interval, I1. Alice
got a new e-mail address and wants to delete her old
address stored in skA(Rem(m)). However, Bob’s trans-
action, skB(Rem(n)), should remain. Therefore, Alice
issues a prepare Transaction, skA(P rep(1)), and a delete
transaction, skA(Del(1)), for the interval. This prepare
transaction triggers the movement of all transactions from
other entities except Alice in this case skB(Rem(n))
from Bob, to the memory pool. The conﬁrmation of the
prepare transaction conﬁrms that all necessary transactions
are included in the previous interval. After the prepare
transaction is conﬁrmed and the removable transactions
are therefore duplicated, Alice’s delete transaction for the
interval can be conﬁrmed in a block. After safely conﬁrm-
ing the delete transaction, the interval is deleted (State 2).

The two-step removal process ensures faster veriﬁca-
tion times of prepare and delete transactions. The prepare
transaction conﬁrms the re-inclusion, the condition for
its validity. The delete transaction is validated by using
the list of public keys in the interval. If the list contains
only the corresponding key(s) of the signer(s), it is valid.
Otherwise, the delete transaction needs the prepare trans-
action as an input. Without the prepare transaction, the
veriﬁcation time increases, requiring the check of every
interval following the interval to be deleted.

While this approach prevents information loss by ma-
licious deletes, it reduces the throughput of removable
transactions. A malicious user who managed to insert
removable transactions in many intervals could issue many
prepare transactions, effectively reissuing many personal
transactions. This might be mitigated by dynamically
adjusting the interval length, increasing the removable
transactions throughput and/or by grouping removable
transactions to prevent the necessity of prepare transac-
tions. The simplest prevention of malicious deletes is to
prevent removable transactions of multiple entities in one
interval. Also, delete transactions can temporarily reduce
the throughput in permanent blocks. However, the amount
of intervals is limited and by temporarily reducing interval
lengths to zero the chain can “catch up” with the deletes.
Removing intervals is not reversible. Therefore, con-
sensus algorithms without ﬁnality need sufﬁcient conﬁr-
mations before deleting the interval. After the successful
delete, the second link from B1 points to “nothing”.

In order to synchronize the blockchain, clients ﬁrst re-
trieve permanent blocks before ﬁlling the “gaps” with the
still remaining removable blocks, ensuring the veriﬁability
as potential delete transactions can be processed ﬁrst.

5. Use Case: Consent Management

We propose a possible use case of our concept: consent
management. In our use case removable transactions serve
to create a stronger connection of the digital identity with
the real-world identity of an entity. While revealing further
information about an entity is not strictly required for
the basic functionality of consent management, it makes
processing and collecting data easier. Since in this case
removable transactions contain personal data, we require

authorized deletes. For the use case, we introduce two new
transactions: consent and information transactions.

For example, Alice, host of a website, would like to
replace the HTTP-cookie banner. Therefore, Alice issues
an information transaction skA(Inf o(Reg(A))).

Inf o takes a register transaction’s output as input,
contains information about the process, and addresses the
requirements for consent, i.e., consent must be speciﬁc and
informed. Accordingly, it provides the required informa-
tion (e.g., data controller, recording purpose). Moreover,
purpose and categories are encoded in a binary encoding,
where each bit refers to a predeﬁned purpose for which
the data is used. Therefore, Inf o contains required infor-
mation as well as the encoding scheme, e.g., bit one is for
the strictly necessary cookies, bit two is for the functional
cookies and bit three is for the performance cookies.

Bob wants to give his consent to Alice’s cookies,
and sends a consent transaction. The consent transaction
takes Bob’s register transaction as an input and Alice’s
information transaction as an output, and has one open
output. The transferred value determines the agreement.
Now consider, Bob agrees only to the necessary cookies
and therefore sends 1, i.e., skB(Con1(Reg(B), 1)). After
a while Bob also agrees to functional cookies and sends
a new transaction. The new consent
transaction takes
Bob’s previous unspent consent transaction’s output as
an input, Alice information transaction as an output and
sends 3, i.e., skB(Con2(Con1, 3)). When Bob wants to
revoke his consent, he sends a third consent transaction.
The third consent transaction takes the unspent output
of the second consent transaction as an input, Alice’s
information transaction as an output and sends a 0, i.e.,
skB(Con3(Con2, 0)), indicating the revoke of the con-
sent. After the output of Bob’s ﬁrst and second consent
transaction are spent they loose their validity. In general,
consent transactions with an unspent transaction output
(UTXO) represent the current given consent. By following
the transaction graph, the data controller can see who gave
her the consent to use which information, providing the
required auditability.

At any time Alice and Bob can provide and remove

additional information as previously described.

6. Discussion

The removal method is determined by the use case,
but for personal data, authorized removal is preferable.
The use case can also specify which information should
be stored in removable transactions, but this is eventually
decided by the transaction issuer.

For a P2P data storage and distribution protocol,
deletion in a distributed setting is difﬁcult [13]. Due to
the existence of multiple copies, node churn, backups,
and a lack of control over other devices in general, it
is impossible to guarantee the deletion of all removable
block copies. In that aspect our protocol cannot solve the
problem or guarantee GDPR compliance. However, delete
requests, i.e., delete transactions, are provably informing
data controllers to delete the data.

Furthermore, as similarly discussed by Puddu et
al. [11] transaction dependencies can raise consistency
problems in mutable blockchains, which we call deletion
order. For a better understanding, why the deletion order

has an impact, let us assume we manage removable infor-
mation with a state machine, e.g., a smart contract. A user
interacts with the smart contract by issuing transactions
and therefore can change the state. A sequence of trans-
actions leads to a certain state. Removing information,
i.e., transactions, can lead to a different state of the smart
contract; particularly when multiple entities are involved.
After a deletion, transactions of other entities are reissued,
resulting in a new transaction sequence, which might yield
a new state, effectively violating consistency.

Since the deletion order is a fundamental problem,
we design removable transactions as independent transac-
tions. removing possible inconsistency issues. Dependent
transactions are possible, but require careful consideration.
The simplest approach would be to restrict dependencies
to one interval or enforcing a deletion order.

Our proposed chain structure has two different types
of blocks. The main difference in creating removable or
permanent blocks is the selection of included transaction
types. In a permissioned consortium setting this should not
create any problems. However, permissionless blockchains
require additional considerations. Transfer and mining of
coins should only be possible in permanent blocks. A
miner would be required to mine interval and permanent
block together. This increases block creation and propaga-
tion time, reducing willingness and success rate of mining
longer intervals. To increase willingness, mining intervals
could have decreased difﬁculty requirements or higher
mining rewards. In proof-of-work consensus algorithms,
removable blocks could require no additional work, there-
fore, they do not include a nonce, ensuring their release
with the following permanent block.

Rewarding removable blocks should be carefully con-
sidered. If the reward for removable blocks is high, a
miner could try to create a large interval and immediately
delete the interval, simply for the reward. By implement-
ing a lock for deleting an interval, this problem can be
mitigated. A block mentioning a high interval length with
no removable blocks can then be identiﬁed as faulty. Thus,
rewards for mining removable blocks should generally be
low and accounted in the following permanent block only.
Another aspect of our approach that needs to be
considered, is the introduced overhead, due to additional
required data. The overhead for the second link and the
interval length is around 33 B. To keep the header size
in case of the authorized delete a maximum
constant
amount of public keys can be deﬁned, e.g., 4 keys. Re-
sulting in an overhead of 151 B, assuming 32 B per key.

7. Conclusion

In this work, we presented the concept of a mutable
blockchain and showed its utility for consent management.
In particular, the concept enables temporal storage of on-
chain information, while maintaining the possibility for
erasure. We discussed potential issues that stem from the
structure and mutability.

Acknowledgments

This work was supported by the Federal Ministry
of Education and Research of Germany (project number
16KIS0909).

References

[1] F. Casino, E. Politou, E. Alepis, and C. Patsakis, “Immutability
and decentralized storage: An analysis of emerging threats,” IEEE
Access, vol. 8, pp. 4737–4744, 2019.

[2] R. Matzutt, J. Hiller, M. Henze, J. H. Ziegeldorf, D. M¨ullmann, O.
Hohlfeld, and K. Wehrle, “A quantitative analysis of the impact of
arbitrary blockchain content on bitcoin,” in FC ’18: Proceedings of
the 22nd International Conference on Financial Cryptography and
Data Security, Santa Barbara, Curac¸ao, Feb. 2018, pp. 420–438.

[3] K. Nikitin, E. Kokoris-Kogias, P. Jovanovic, N. Gailly, L. Gasser,
I. Khofﬁ, J. Cappos, and B. Ford, “CHAIN IAC: Proactive
software-update transparency via collectively signed skipchains and
veriﬁed builds,” in USENIX Security ’17: Proceedings of the 26th
USENIX Security Symposium, Vancouver, BC, Canada, Aug. 2017,
pp. 1271–1287.

[4] D. Deuber, B. Magri, and S. A. K. Thyagarajan, “Redactable
blockchain in the permissionless setting,” in SP ’19: Proceedings of
the 40th IEEE Symposium on Security and Privacy, San Francisco,
CA, USA, May 2019, pp. 124–138.

[5] S. Nakamoto, Bitcoin: A peer-to-peer electronic cash system, 2008.

[6] G. Ateniese, B. Magri, D. Venturi, and E. Andrade, “Redactable
blockchain – or – rewriting history in bitcoin and friends,” in EU-
ROS&P ’17: Proceedings of the 2nd IEEE European Symposium
on Security and Privacy, Paris, France, Apr. 2017, pp. 111–126.

[7] M. S. Dousti and A. K¨upc¸ ¨u, “Moderated redactable blockchains: A
deﬁnitional framework with an efﬁcient construct,” IACR Cryptol.
ePrint Arch., vol. 2020,

[8] R. Dennis, G. Owenson, and B. Aziz, “A temporal blockchain: A
formal analysis,” in CTS ’16: Proceedings of the 17th International
Conference on Collaboration Technologies and Systems, Orlando,
FL, USA, Oct. 2017, pp. 430–437.

[9] M. I. Mehar, C. L. Shier, A. Giambattista, E. Gong, G. Fletcher,
R. Sanayhie, H. M. Kim, and M. Laskowski, “Understanding a
revolutionary and ﬂawed grand experiment in blockchain: The
dao attack,” Journal of Cases on Information Technology (JCIT),
vol. 21, no. 1, pp. 19–32, 2019.

[10] M. Florian, S. Henningsen, S. Beaucamp, and B. Scheuermann,
“Erasing data from blockchain nodes,” in EuroS&PW ’19: Pro-
ceedings of
the 2019 IEEE European Symposium on Security
and Privacy Workshops, Stockholm, Sweden, Sweden, Jun. 2019,
pp. 367–376.

[11] I. Puddu, A. Dmitrienko, and S. Capkun, “µchain: How to forget
without hard forks.,” IACR Cryptology ePrint Archive, 2017.

[12] E. Politou, F. Casino, E. Alepis, and C. Patsakis, “Blockchain
mutability: Challenges and proposed solutions,” IEEE Transactions
on Emerging Topics in Computing, 2019.

[13] E. Politou, E. Alepis, C. Patsakis, F. Casino, and M. Alazab,
“Delegated content erasure in ipfs,” Future Generation Computer
Systems, vol. 112, pp. 956–964, 2020.

