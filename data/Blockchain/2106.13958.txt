A Trust-Centric Privacy-Preserving Blockchain for
Dynamic Spectrum Management in IoT Networks

Jingwei Ye, Xin Kang, Senior Member, IEEE, Ying-Chang Liang, Fellow, IEEE, and Sumei Sun, Fellow, IEEE

1

1
2
0
2

n
u
J

6
2

]

R
C
.
s
c
[

1
v
8
5
9
3
1
.
6
0
1
2
:
v
i
X
r
a

Abstract—In this paper, we propose a trust-centric privacy-
preserving blockchain for dynamic spectrum access in IoT
networks. To be speciﬁc, we propose a trust evaluation
mechanism to evaluate the trustworthiness of sensing nodes
and design a Proof-of-Trust
(PoT) consensus mechanism to
build a scalable blockchain with high transaction-per-second
(TPS). Moreover, a privacy protection scheme is proposed to
protect sensors’ real-time geolocatioin information when they
upload sensing data to the blockchain. Two smart contracts
are designed to make the whole procedure (spectrum sensing,
spectrum auction, and spectrum allocation) run automatically.
Simulation results demonstrate the expected computation cost
of the PoT consensus algorithm for reliable sensing nodes is
low, and the cooperative sensing performance is improved with
the help of
trust value evaluation mechanism. In addition,
incentivization and security are also analyzed, which show
that our design not only can encourage nodes’ participation,
but also resist to many kinds of attacks which are frequently
encountered in trust-based blockchain systems.

Index Terms—Dynamic spectrum access, blockchain, trust

model, consensus algorithm, cooperative spectrum sensing.

I. INTRODUCTION

R ECENT years have witnessed the exponential growth

of mobile data trafﬁc. The rapid development of new
wireless applications such as autonomous vehicles, remote
healthcare, augmented and virtual reality will continue driving
the demand for radio spectrum [1]. However, the current static
spectrum management method has resulted in under-utilization
of spectrum resources [2]. To this end, dynamic spectrum
access (DSA) has been proposed to allow secondary users
(SUs) sense and then use the idle spectrum bands. Since single
SU’s sensing capability is usually limited, cooperative sensing
[3] is proposed to fuse the sensing results of multiple SUs to
improve the sensing accuracy. However, the traditional usage
of a centre to collect and fuse sensing results faces the risk
of single point of failure and the increasing management and
regulatory costs. Moreover, SUs usually need to upload their
sensing data to the fusion center at the risk of leakage of their
privacy, such as identity and location.

As an emerging technology, blockchain has attracted atten-
tion from both academia and industry. By using blockchain, a
decentralized resource management system can be established
without the requirement of trustworthy central management

J. Ye, X. Kang and Y.-C. Liang are with the Center for Intelligent Net-
working and Communications (CINC), University of Electronic Science
and Technology of China (UESTC), Chengdu 611731, China (e-mail: jing-
weiye97@gmail.com; kangxin@uestc.edu.cn;
S. Sun is with the Institute for Infocomm Research, Agency for Science,
Technology and Research, Singapore (e-mail: sunsm@i2r.a-star.edu.sg).

liangyc@ieee.org).

agencies [4]–[8]. Moreover, smart contracts which are imple-
mented on a blockchain can be used to replace traditional
central management agencies and facilitate the cooperation
of users [9]. Recently, researchers have investigated how to
apply the blockchain technology to DSA. [10] summarizes the
types of blockchains applicable in different spectrum sharing
scenarios, and the possible advantages and disadvantages of
applying blockchain technology to DSA. With the help of
cryptocurrency issued by the blockchain and smart contracts,
ﬂexible and automatic spectrum trading markets are made
possible for spectrum sellers and buyers. [11]–[15].

However, the integration of blockchain and DSA still faces
many challenges. Firstly, although the data recorded on a
the quality
blockchain is prevented from being tampered,
or value of it cannot be guaranteed. Especially, in a public
blockchain, a malicious user can easily join the blockchain and
record their data in the blockchain. The data from such a mali-
cious user or an unreliable user is valueless or even harmful to
cooperation tasks based on the data, e.g., cooperative sensing.
Therefore, there is compelling need to evaluate the quality of
the data from each user. Secondly, though the communication
among Ethereum external accounts can be protected by en-
cryption and decryption with their public and private key pairs,
a contract account is not equipped with a key pair hence such
protection method is not applicable to smart contracts. As a
result, sensing results uploaded to the smart contract cannot
be encrypted, and the sensitive information in the sensing
results (such as real-time geolocatioin), can thus be accessed
by malicious users. Thirdly, traditional consensus algorithms
like Proof of Work (PoW) used in public blockchain introduce
much computation overhead and thus make the transaction
processing speed very low. As a result, it is inefﬁcient to
directly use existing consensus algorithms (such as PoW)
for spectrum management, especially considering the limited
computation capabilities of IoT devices.

In this paper, we consider the DSA for an IoT network
where IoT devices opportunistically access the licensed spec-
trum bands through cooperative sensing. Blockchain is used
as a platform for dynamic spectrum management. Speciﬁcally,
key component designs for such a blockchain-enabled DSA
system,
including the trust evaluation mechanism, privacy
protection, consensus algorithm and smart contracts, are stud-
ied. The main contributions of this paper are summarized as
follows.

• We propose a trust evaluation mechanism to evaluate the
trustworthiness of sensing nodes which participate in the
collaborative sensing. We show that the proposed trust
evaluation mechanism is effective in incentivizing sensing

 
 
 
 
 
 
nodes to be honest, and thus improving the spectrum
sensing result.

• We propose a strong privacy protection mechanism by
combining ring signature with the commit-and-reveal
scheme for providing sensing nodes’ privacy such as their
real-time location. The ring signature is used to protect
sensing nodes’ identities when they upload sensing data.
The commit-and-reveal scheme is proposed to ﬁgure out
the connection between sensing data packets and its
originated sensing node after the fusion of sensing results,
so that the trust value of each sensing node is updated
and the incentive tokens are distributed.

• We propose a new consensus algorithm named as Proof-
of-Trust (PoT) by connecting the mining difﬁculty with a
miner’s trust value. We show that the proposed PoT can
greatly reduce the computation cost of honest nodes and
enhance the scalability of current blockchian-based DSA
system.

• We design the system protocol and two smart contracts
to make the whole DSA procedure, including spectrum
sensing, spectrum auction, and spectrum allocation, run
automatically. In addition, we implement and verify a
prototype of our proposed protocol and smart contracts
using Solidity [16] on the Ethereum test net.

The rest of the paper is organized as follows. In Section II,
we introduce the basic concept of blockchain and smart con-
tract. In Section III, we describe the works related to the appli-
cation of blockchain to DSA. In Section IV, we introduce our
system model. In Section V, we describe the design of our pro-
posed protocol including the block structure, the trust evalua-
tion mechanism, the consensus algorithm and the privacy pro-
tection scheme. In section VI, the design of smart contract and
workﬂow are introduced. In Section VII, we discuss the perfor-
mance of the trust evaluation mechanism, and analyze the se-
curity of the system. Finally, Section VIII concludes this paper.

II. PRELIMINARIES

A. Blockchain

Blockchain is a growing chain of data blocks with a speciﬁc
data structure constructed using cryptographic algorithms. It
uses hash pointers to connect the data blocks to form an
entangled chain. In this way, the integrity of the data can
be protected. Blockchain uses a measurable and veriﬁable
mechanism to reach a consensus among nodes in the network
on the generation of new blocks. Such a mechanism is usually
referred to as the consensus algorithm. On the premise that the
data block entanglement is guaranteed, the structure and the
consensus algorithm of the blockchain can be ﬂexibly designed
based on the demand of application scenarios.

Blockchain can be roughly classiﬁed into three types,
depending on degree of openness, which are public
blockchain, private blockchain, and consortium blockchain.
Public blockchain is designed to enable and to record the
transactions in a public network, which means that any node
can freely join or leave the blockchain network without
authorization. Bitcoin, the most famous digital cryptocurrency,
is generated and managed by a public blockchain. Consortium

2

blockchain is a permissioned blockchain, which is open to
authorized members of external institutions in limited roles
and functions. The authorization of the node to join are all
determined by an authorized organization. The nodes in a
private blockchain network trust each other. Thus, private
chains can simplify operations in data authentication and the
consensus algorithm to improve the efﬁciency.

B. Smart Contract

In the 1990s, Nick Szabo ﬁrst proposed the concept of smart
contracts [17]. It was deﬁned as computerized transaction
protocols that execute terms of a contract. In the ﬁeld of
cryptocurrency, a smart contract is deﬁned as an application
or a program that runs on a blockchain. Normally, it contains
a set of digital agreements with speciﬁc rules. These rules
are predeﬁned in the form of computer source codes, and all
network nodes will copy and execute these computer source
codes independently. Smart contracts are highly customizable
and can be ﬂexibly designed to provide different services and
solutions.

C. Ring Signature

Ring signatures were ﬁrst introduced in 2001 [18] which
follow a ring-like structure of the signature algorithm. It is a
type of digital signature that can be performed by any member
of a group of users without the agreement of others. Therefore,
the only “open” information is that a message signed with a
ring signature is endorsed by someone in a particular group
of people. Ring signatures are deliberately designed so that
it is computationally infeasible to determine which of the
group members’ keys was used to produce the signature. Ring
signatures are similar to group signatures but differ in two
key ways: ﬁrstly, there is no group administrator to revoke
the anonymity of an individual signature; secondly, any set of
users can be used as a group by the signer without additional
setup.

III. RELATED WORK

Blockchain was ﬁrst proposed as a secure decentralized
ledger for recording spectrum transaction data and analyzing
overall spectrum usage in dynamic spectrum management. In
[19], the authors proposed to use the blockchain as a dis-
tributed database to securely store the transactions in dynamic
spectrum sharing, and to use the digital currency issued by
the blockchain as the currency for spectrum auctions. In [15],
a smart contract running on Ethereum was proposed as a
platform to provide spectrum sensing services.

In [13], a blockchain-based spectrum trading and sharing
scheme was proposed for Mobile Network Operators (MNOs)
to lease their spectrum to secondary Unmanned Aerial Vehicle
(UAV). In [20], spectrum sharing contracts deployed on a
permissioned blockchain platform are constructed for multi-
operators spectrum trading. In [14], the authors proposeds to
use the smart contract to securely store and then autonomously
implement the spectrum leasing agreements, thus to avoid the
interference from the disordered spectrum access.

However, these works did not make any improvement to
the existing blockchain. Thus, the TPS of the blockchain is
low, limiting the performance of the blockchain-based DSA
platform. Thus,

in [21], the authors proposed a consensus algorithm named
as "blockchain-KM protocol" by modifying the PoW, to speed
up the transaction processing for the license-free spectrum
sharing. In [22], a novel consensus algorithm named as proof-
of-strategy was proposed, where the best strategy to allocate
the spectrum bands in the whole network is the proof of
authority to publish a new block. Such a consensus algorithm
can not only regulate the transaction generation, but also
optimize the spectrum allocation.

In [23], by modifying the PoW, the authors proposed a
consensus algorithm named as Proof-of-Device, which selects
a device, represented by its unique identiﬁer, to publish a
new block in a way like lottery. It thus eliminates the heavy
computation cost in PoW.

On the other hand, blockchain system is an open system,
hence the reliability of data source needs to be guaranteed.
In [24], the data uploaded by the sensors are compared with
the data collected by the trustworthy validator to determine
the credibility degree of the sensor, in this way, the system
can evaluate the credibility of nodes for better performance.
However, this method is a semi-centralized method which
needs to deploy trustworthy validators.

Different from the above works, we not only delve into the
design of block structure and consensus algorithm, intending
to overcome the scalability problem of the blockchain tech-
nology, but also design a decentralized trust evaluation mech-
anism and a privacy protection mechanism for the openness
and transparency of blockchain system while protecting the
data’s conﬁdentiality and the sensors’ privacy. To the best of
our knowledge, this is the ﬁrst work of joint trust evaluation
and privacy protection mechanism in cooperative sensing in a
blockchain-enabled DSA system.

IV. SYSTEM MODEL, CHALLENGES AND DESIGN
GUIDELINES

In this section, we introduce the dynamic spectrum sharing
scenario in the future IoT network, and list the difﬁculties and
challenges in applying the blockchain to this scenario. Finally,
we give the guidelines on how to design a blockchain-based
DSA system.

A. Blockchain-enabled DSA System Model

In this paper, we consider the DSA in a two-tier cognitive
radio network consisting of licensed/primary users (PUs) and
unlicensed/secondary users (SUs). In this network, PUs are
inactive users who may not use their spectrum all the time
so SUs can detect these spectrum holes and use them. As
illustrated in Fig.2, SUs can be a variety of heterogeneous
IoT devices, which form a mesh network. SUs access the
spectrum bands of a PU in an opportunistic manner based on
cooperative sensing, and a blockchain is used as the platform
of the cooperative spectrum sensing decision and the spectrum
allocation.

3

Fig. 1: System model

Basically, as shown in Fig. 3, there are four phases in our

blockchain-enabled DSA system.

1) Individual Sensing: The sensors perform spectrum sens-

ing to detect the state of the PU’s spectrum band.

2) Sensing Fusion: Each of the sensor broadcasts its sensing
data which mainly consists of the sensing result and the
geolocation where the sensing is performed. These data
can be raw data or quantized bits, which will be fed to a
smart contract implemented upon a blockchain. Then, the
smart contract provides the ﬁnal sensing result according
to predeﬁned fusion rules.

3) Spectrum Allocation: When the ﬁnal sensing result in-
dicates that PU is inactive, it should be decided which
spectrum requester can access the spectrum. Spectrum
auction, as a common and fair way for spectrum al-
location,
is chosen to achieve that. In the spectrum
auction, the digital cryptocurrency, which is issued by the
blockchain through incentive mechanisms for spectrum
sensing and mining, is commonly considered.

4) Spectrum Access: The SU who obtains the access right
through spectrum auction accesses the idle spectrum for
data transmission.

Compared with traditional cooperative spectrum sensing and
spectrum allocation methods, blockchain-enabled DSA has the
following beneﬁts:

• Decentralized: Blockchain-based dynamic spectrum ac-
cess does not require the deployment of trusted central
nodes which avoids the single point of failure.

• Transparency: The blockchain ledger can record the

whole process of DSA.

• Automatic: Using smart contract instead of traditional
contracts, we can achieve automatic spectrum manage-
ment and on-chain payment settlement.

• Flexibility: For spectrum trading on the blockchain plat-
form, diversiﬁed spectrum trading rules can be dynami-
cally enforced by adjusting parameters of smart contracts.
Compared with the current ﬁxed paper-based contracts
signed between mobile users and operators, this method
has higher ﬂexibility.

PUSUSUBlockchain layerSU4

nodes, and identity the malicious nodes based on the their
trust values.

• Lightweight Consensus Algorithm: Due to the limitation
of the computing power and storage resources of IoT
devices, maintaining a normal public blockchain system
is a heavy burden. To reduce the computing cost, it is
necessary to invent a new consensus algorithm with low
computational and storage complexity.
On the other hand, as time goes by, the length of the
ledger keeps on increasing, resulting in increased node
storage. To reduce the storage cost, methods such as edge
storage can alleviate storage pressure on the blockchain
nodes but may introduce additional budget. Thus, a
method that can directly reduce the storage cost of the
blockchain is preferred.

• Privacy Protection Mechanism: Smart contracts does not
have public-and-private key pair and thus can not com-
municate with external accounts in an encrypted manner.
Therefore, when a smart contract is used as the data
fusion center of cooperative spectrum sensing, a privacy
protection mechanism is needed to ensure that the private
information of the sensors will not be leaked during the
interaction between sensors and the smart contract.

V. BLOCKCHAIN DESIGN, TRUST EVALUATION AND
PRIVACY PROTECTION

In this section, to improve the accuracy of cooperative sens-
ing, we ﬁrst introduce the block structure of our blockchain.
We then propose the trust evaluation mechanism to evaluate
the trustworthiness of each SU on spectrum sensing. After
that, a high-efﬁciency consensus algorithm is proposed for
our blockchain. Finally, a privacy protection mechanism is
proposed for protecting participants’ privacy.

TABLE I: List of notations

Notations
𝑁𝑖,𝑤 (𝑛)
𝑁𝑖,𝑟 (𝑛)
𝑃
D𝑖
𝑛
H ( ·)
𝑅𝑠𝑙𝑒𝑒 𝑝
𝑅𝑁 𝐷𝑖
𝑆𝑅
𝑆𝑅𝑖
𝑁1
𝑁2
𝑇 𝑉𝑡 ℎ𝑟
𝑇𝑑𝑑𝑙
𝑑𝑠
𝑑𝑎
𝑇𝑠𝑒𝑙 𝑓 −𝑑
𝑇 𝑆
𝑙𝑜𝑐

Descriptions
Accumulated number of wrong sensing results of 𝑠𝑒𝑛𝑠𝑜𝑟𝑖 at round 𝑛
Accumulated number of right sensing results of 𝑠𝑒𝑛𝑠𝑜𝑟𝑖 at round 𝑛
Length of window for calculating 𝑁𝑖,𝑤 (𝑛)
Mining difﬁculty of node 𝑖 at block 𝑛
Hash operation
Number of inactive rounds since last active round
Random number picked by 𝑠𝑒𝑛𝑠𝑜𝑟𝑖
Sensing result of unknown but legal sensors
Sensing result of 𝑠𝑒𝑛𝑠𝑜𝑟𝑖
Number of required sensors in Cooperative Sensing Contract (𝐶𝑆𝐶)
Number of required bidders in Spectrum Auction Contract (𝑆 𝐴𝐶)
Trust value threshold set in 𝐶𝑆𝐶
Sensing deadline in 𝑆 𝐴𝐶
Deposit for sensing
Deposit for auction
Time for 𝑆 𝐴𝐶 to self-destruct
Timestamp
Location of unknown but legal sensors

A. Block Structure

The block structure should be tailor-designed for
the
blockchain-based DSA system. Some of the unnecessary com-
ponents in the block header can be removed to reduce the
overheads on the block transmission and storage and other
necessary information, such as the trust value of the block

Fig. 2: Blockchain based DSA

B. Difﬁculties and Challenges

Traditional cooperative spectrum sensing is divided into two
modes: centralized mode and distributed mode. Centralized
collaborative spectrum sensing requires the deployment of a
central fusion node to process the data collected from sen-
sors which usually contain sensors’ geolocation information.
Therefore, this mode not only requires redundant regulation
fees (usually charged to maintain the operation of the central
node), but also faces the risk of data leakage when the central
node is attacked. While the distributed mode often suffers
from the fake reporting issue caused by malicious nodes and
the iterative-based malicious node detection algorithms [25]
introduce extra computation cost.

Therefore, how to implement the cooperative sensing in a
secure and effective way is a challenge. The decentralized
nature of the blockchain system is promising to realize dis-
tributed cooperative sensing and encourage all sensors to share
spectrum sensing results. However, there are still some chal-
lenges when applying blockchain into spectrum management.
Firstly, IoT devices usually lack sufﬁcient computing and
storage resources to maintain and store the whole blockchain
ledger. Secondly, a malicious node can easily join a public
blockchain network and threaten the reliability of the coop-
erative spectrum sensing. Moreover, the sensing-related data
recorded on blockchain or collected by smart contracts is
usually in an unencrypted format which may leak the private
information of IoT devices contained in their sensing data
packets.

C. Design Guidelines

Considering above challenges, our discussion on system

design mainly includes the following four parts.

• Trust Evaluation: Specially, in a public blockchain net-
work, anyone can join or exit the system at will, and
one user can create multiple accounts in the system.
Therefore, if there is no suitable node evaluation mech-
anism, malicious users can launch sybil attacks easily.
This is because, malicious nodes can keep on applying
for accounts and continue launching attacks. Therefore,
the system should be able to evaluate the trust values for

Spectrum sensorssensorsensorsensorSpectrum BuyersbuyerSensor/buyerbuyerSensing dataBidsBlockNBlockN-1Block2Block1Blockchain as basisCooperative Sensing Contract Sealed Auction ContractbuyerdsSensing resultAuction result1. Individual Sensing2. Sensing Fusion3. Spectrum Allocation4. Spectrum Accessgenerator, needs to be recorded in the block header to prevent
possible attacks in the DSA system.

• Block header: As shown in Fig. 3, The block header
mainly contains (i) the merkle root of transactions; (ii)
the merkle root of account states; (iii) the hash value of
the header of the previous block, as the hash pointer of
the chain structure; (iv) the trust value of the miner who
mines this block; (v) the signature of the miner who mines
this block; (vi) a Nonce, which is the solution of Hash
puzzle of the consensus algorithm; (vii) the timestamp
when the block is mined.

• Block body: The block body mainly stores transac-
tion generated during spectrum allocation using merkle
tree. Unlike the unspent transaction output (UTXO) [26]
model used in Bitcoin, the system based on the account
model usually contains an account tree to record the
account states such as the balance and the trust value
of each account. Merkle Patricia Trie (MPT) [27] which
is a commonly adopted data structure, is used here to
store the account states.

Fig. 3: Block structure

B. Trust Evaluation Mechanism

Although the blockchain can guarantee that

the data
recorded in a block will not be tampered, it cannot guarantee
that the data source is trustworthy. Especially, in a public
blockchain, a malicious node can upload misleading data
which may interfere the cooperation sensing based on such
data. In such cases, the performance of the cooperative sensing
will be degraded, and the honest and reliable sensors will be
discouraged from participating in cooperative sensing. To this
end, we design a trust evaluation mechanism to evaluate the
credibility of every sensing node in the blockchain. Instead
of using a central authority to record and maintain every
account’s trust value, we propose to include the trust value
as an attribute of the blockchain account, which is recorded in
the block and maintained by all the miners. In the following,
we will discuss the design of trust value updating method.

Intuitively, the trust value of a sensing node should be
adjusted based on its performance on the current and historical
cooperative sensing. In detail, if it plays a positive role in
the cooperative sensing, its trust value should be increased,
and vice versa. Here, we deﬁne that the effect of a sensor

5

is positive when its sensing result
is consistent with the
cooperative sensing result, and is negative when its sensing
result is inconsistent with the cooperative sensing result, or
when the sensing node does not participate in the cooperative
sensing. Denote the number of times when the sensing result
of the i-th node is consistent with the cooperative sensing
result as 𝑁𝑖,𝑟 ; the number of times when the sensing result
of a node is inconsistent with the cooperative sensing result
as 𝑁𝑖,𝑤 . Inspired by [28], we propose a new model to calculate
trust value of 𝑠𝑒𝑛𝑠𝑜𝑟𝑖 denoted by 𝑇𝑉 (1)
(𝑛) in sensing round
𝑛, where 𝑛 is also the number of sensing tasks published since
this system was created.

𝑖

𝑇𝑉 (1)
𝑖

(𝑛) = 𝑒−𝜌𝑁𝑖,𝑤 (𝑛) (cid:16)

1 − 𝑒−𝜂 𝑁𝑖,𝑟 (𝑛) (cid:17)

,

(1)

where 𝜌 > 0 and 𝜂 > 0 are coefﬁcient that determine how
fast the trust value changes with respect to 𝑁𝑖,𝑤 and 𝑁𝑖,𝑟 ,
respectively.

Moreover, we let 𝑁𝑖,𝑤 (𝑛) decay by 1

𝑃 every time when
the node participates in sensing, and we only consider the
latest 𝑃 sensing rounds of each node. In this way, the effect
of a wrong sensing result on the trust value will gradually be
degraded over time. As a result, a node that unintentionally
submitting an inconsistent result will be gradually forgotten.
Mathematically, 𝑁𝑖,𝑤 (𝑛) can be deﬁned as

𝑁𝑖,𝑤 (𝑛) =

𝑛
∑︁

𝑚=𝑛−𝑃

𝑟𝑖 (𝑚)

(cid:16)

1 −

𝑛 − 𝑚
𝑃

(cid:17)

,

(2)

where 𝑟𝑖 (𝑚) = 1 if 𝑠𝑒𝑛𝑠𝑜𝑟𝑖 broadcasts the wrong sensing
result in round 𝑚, and 𝑟𝑖 (𝑚) = 0 otherwise.

Besides, we denote the number of rounds when a sensing
node is inactive as 𝑅𝑠𝑙𝑒𝑒 𝑝, and we add a function 𝑓 (𝑅𝑠𝑙𝑒𝑒 𝑝)
which models the negative impact of being inactive on the
trust value. It is designed to satisfy the following criteria.

• ∀𝑅𝑠𝑙𝑒𝑒 𝑝 ∈ [1, +∞), 𝑓 (𝑅𝑠𝑙𝑒𝑒 𝑝) ∈ (0, 1],
•

< 0,

𝜕 𝑓𝑑𝑐𝑣
𝜕𝑅𝑠𝑙𝑒𝑒 𝑝

The ﬁrst criterion is for normalization; the second criterion
increases as 𝑅𝑠𝑙𝑒𝑒 𝑝
is to ensure that
the negative effect
increases. Moreover, as 𝑅𝑠𝑙𝑒𝑒 𝑝 increases, the downward trend
of the function is ﬁrst gentle, and then becomes severe. This
is designed to punish the peers that does not participate in the
sensing process. The punishment is light when the peer does
not participate only a few times, but becomes severe when
the node always does not participate in the sensing. 𝑓 (𝑅𝑠𝑙𝑒𝑒 𝑝)
will reach a certain low value when 𝑅𝑠𝑙𝑒𝑒 𝑝 is big enough. For
example, the trust value of a node will reduce to 𝑟1 (𝑟1 < 1)
of its original value for 𝑘1 consecutive non-participation, and
to 𝑟2 (𝑟2 < 𝑟1 < 1) for 𝑘2 consecutive non-participation. Here,
a piecewise function consisting of multiple linear functions is
utilized as our 𝑓 (𝑅𝑠𝑙𝑒𝑒 𝑝).

𝑓 (𝑅𝑠𝑙𝑒𝑒 𝑝) =

𝑘1−𝑅𝑠𝑙𝑒𝑒 𝑝
𝑘1

𝑅𝑠𝑙𝑒𝑒 𝑝−𝑘2
𝑘1−𝑘2

𝑟2






· (1 − 𝑟1) + 𝑟1

0 ≤ 𝑅𝑠𝑙𝑒𝑒 𝑝 ≤ 𝑘1

· (𝑟1 − 𝑟2) + 𝑟2

𝑘1 ≤ 𝑅𝑠𝑙𝑒𝑒 𝑝 ≤ 𝑘2

𝑘2 < 𝑅𝑠𝑙𝑒𝑒 𝑝

(3)

HeaderPrevious hashTimestampNonceRoot of TxsHeaderHeaderBodyBodyRoot of states....................BodyTransactions in the blockAccount states including trust valueTrust value of the minerSignature of minerThese parameters can be set ﬂexibly. If the actual de-
ployment requires stricter penalties, then all these parameters
should be set smaller.

By adding the attenuation function, the model in (1) can be

modiﬁed as:

𝑇𝑉 (2)
𝑖

(𝑛) =






𝑇𝑉 (2)
𝑖

(𝑛 − 1) + Δ𝑇𝑉𝑖 · 𝑓 (𝑅𝑠𝑙𝑒𝑒 𝑝),

if Δ𝑇𝑉𝑖 > 0

𝑇𝑉 (1)
𝑖

(𝑛),

if Δ𝑇𝑉𝑖 < 0

𝑇𝑉 (2)
𝑖

(𝑛 − 1) · 𝑓 (𝑅𝑠𝑙𝑒𝑒 𝑝),

if inactive

𝑖

(𝑛) − 𝑇𝑉 (2)

(4)
where Δ𝑇𝑉𝑖 = 𝑇𝑉 (1)
(𝑛 − 1) is deﬁned as the
𝑖
original increment of trust value, which can be either positive
or negative. The design criterion of (4) is explained as follows.
We consider three cases. First of all, when the sensor senses
correctly, the original increment of trust value is positive,
i.e., Δ𝑇𝑉𝑖 > 0. Such increment
is ﬁrst degraded by the
negative effect of sleeps in the previous sensing activities,
𝑓 (𝑅𝑠𝑙𝑒𝑒 𝑝), and then added to the trust value. Secondly,
i.e.,
when the sensor gives the wrong sensing result, the original
increment of trust value is negative, i.e., Δ𝑇𝑉𝑖 < 0. In this
case, we choose not to consider the negative effect of the sleep
in previous sensing rounds, in order to encourage the sensors
which unintentionally derive the wrong sensing result in this
time. Finally, for sensors who do not participate in sensing,
their trust value will not remain unchanged but gradually
decrease as their sleep time increases. This design is to ensure
that sensors can only maintain its high trust value by actively
participating in spectrum sensing.

C. Consensus Algorithm, Forking and Block Compression

Based on the last block of the block chain, nodes in the
blockchain network will compete for publishing the next
block, and only one block will be accepted as the next valid
block.

The traditional consensus algorithm for public blockchain
like PoW is computation-intensive, which may be inappli-
cable in IoT networks, where IoT nodes are usually with
limited computational capabilities. One reason why the PoW
is designed to be computation-insensitive is that it assumes
there is nearly no trust among nodes in a blockchain network.
Nevertheless, with the trust value mechanism proposed in this
paper, we can evaluate the credibility of a node on spectrum
sensing in the blockchain network. Therefore, based on the
trust value, we can optimize our design of the blockchain
consensus algorithm, forking solution and blockchain com-
pression.

Consensus Algorithm: Intuitively,

the nodes with higher
trust value on sensing are more likely to be honest in publish-
ing a new block. Therefore, we can reduce the difﬁculty of
such nodes to mine a new block. In this way, the computation
consumption for reliable nodes will be decreased, and a block
will thus be more quickly mined and published.

Based on PoW and trust value, we propose a Proof of
Trust (PoT) consensus algorithm. Similar to the Proof-of-Stake
(PoS), PoT assigns different nodes different mining difﬁculties.

6

To be speciﬁc, for successful mining, the miner with the higher
trust value is required to ﬁnd a hash value with fewer leading
zeros and vice versa.

Mathematically, assuming that the difﬁculty of node 𝑖 at

block 𝑛 is denoted as D𝑖

𝑛, which can be denoted as

D𝑖

𝑛 = 𝛽𝑛 ·

(cid:16)

1 − 𝑠𝑖𝑛

· 𝑇𝑉𝑖

(cid:17)(cid:17)

,

(cid:16) 𝜋
2

(5)

where 𝛽𝑛 denotes the base difﬁculty of block 𝑛. 𝑇𝑉𝑖 is the trust
value of node 𝑖. The initial difﬁculty is denoted as 𝛽0. 𝛽0 can
be determined by evaluating the computing power of actual
IoT devices. We will discuss this problem in the simulation
section. A node with 𝑇𝑉𝑖 = 0.8 has about 0.049 · 𝛽𝑛 difﬁculty,
which is 17 times less than a node with 𝑇𝑉𝑖 = 0.1 whose
difﬁculty is about 0.844 · 𝛽𝑛.

We denote the timestamp of block 𝑛 as 𝑇𝑛, the ideal time

interval of two consecutive blocks is 𝑇0. Then,we have

(cid:23)

𝑞 =

(cid:22) 𝑇𝑛−1 − 𝑇𝑛−2
𝑇0
where 𝑞 is deﬁned as adaptive adjustment factor of base difﬁ-
culty, and 𝑔 is deﬁned as the difﬁculty adjustment granularity,
which can be written as

(6)

,

𝑔 =

(cid:23)

,

(cid:22) 𝛽𝑛−1
128

The updating of 𝛽𝑛 can be denoted as

𝛽𝑛 = 𝛽𝑛−1 − 𝑞 · 𝑔,

(7)

(8)

Forking Solution: As the mining speed increases, there may
be multiple blocks mined at nearly the same time. Because
of the communication latency, the block that is ﬁrst mined
might not be the ﬁrst to be received by all the nodes in the
blockchain network. Instead, the block that is ﬁrst received and
recognized by different nodes might be different. In this case,
the blockchain forking occurs. It is harmful and thus needs
to be solved. In Algorithm 1, we propose a trust value based
forking solution. It ﬁrst compares the trust values in the head
of blocks, and it then validates the block with the highest trust
value. If the trust values of multiple blocks are the same, the
block whose timestamp is earlier is selected as the valid block.
If the timestamp is the same, it compares the hash value of the
blocks, and then selects the block with the smallest hash value
as the valid block. Since the probability of hash collision is
negligible, Algorithm 1 can select one valid block eventually.
Blockchain Compression: Since IoT devices are usually
with limited storage space, each time when the blockchain
grows by 𝐿 blocks, compression will be performed. For the
compression of blockchain, in the existing literature, the RSA
accumulator as a data structure, which functions similarly to
that of a Merkle tree, can be used to compress the blockchain
[29]. Another approach to compress blockchain is to use
the chameleon hash function to replace the traditional hash
function of the blockchain [30]. Here, using the trust value,
we propose a compression method called as Trust-based
Compression (TBC). The node with the highest current trust
value will be authorized to compress the blockchain. To be
speciﬁc, such a node will ﬁrst extract the account tree in the
last block as the body of the new block, calculate a hash

Algorithm 1 Block Selection
Input: the block to be compared: 𝐵𝑙𝑜𝑐𝑘𝑖, 𝐵𝑙𝑜𝑐𝑘 𝑗 ;
Output: The winner block;
if 𝑇𝑉𝑖 < 𝑇𝑉 𝑗 then
𝐵𝑙𝑜𝑐𝑘𝑖 wins.
else if 𝑇𝑉𝑖 > 𝑇𝑉 𝑗 then
𝐵𝑙𝑜𝑐𝑘 𝑗 wins.

else

if 𝑇𝑖𝑚𝑒𝑠𝑡𝑎𝑚 𝑝𝑖 < 𝑇𝑖𝑚𝑒𝑠𝑡𝑎𝑚 𝑝 𝑗 then

else if 𝑇𝑖𝑚𝑒𝑠𝑡𝑎𝑚 𝑝𝑖 > 𝑇𝑖𝑚𝑒𝑠𝑡𝑎𝑚 𝑝 𝑗 then

𝐵𝑙𝑜𝑐𝑘𝑖 wins.

𝐵𝑙𝑜𝑐𝑘 𝑗 wins.

else

if H (𝐵𝑙𝑜𝑐𝑘𝑖) < H (𝐵𝑙𝑜𝑐𝑘 𝑗 ) then

𝐵𝑙𝑜𝑐𝑘𝑖 wins.

else

𝐵𝑙𝑜𝑐𝑘 𝑗 wins.

end if

end if

end if

value for the body, and ﬁnally combine the obtained nonce,
miner’s signature, and timestamp to form the block header.
The obtained block is the new genesis block. Since each node
stores the original blockchain, it is easy to check whether the
account status has been tampered by the selected node during
the compression process. After a node veriﬁes the new genius
block, it will clear the original blockchain.

D. Privacy Protection Mechanism

The location where a sensing node senses the spectrum
bands of interest is useful for the fusion centre to cluster
the sensing nodes and to improve the cooperative sensing
accuracy [31]. Therefore, alongside the sensing result, the
location is needed to be uploaded by a sensing node. However,
it is difﬁcult to protect the location information of a sensing
node from being leaked when a smart contract is used as the
fusion centre. This is because a smart contract account is not
equipped with a key pair which can be used by sensors to
encrypt their upload data packet.

The privacy protection issue in this case is to hide the
source of a sensing packet, i.e., from which sensing node the
sensing packet comes. However, the sensing node cannot be
allowed to be totally anonymous when submitting the sensing
packet because this will make the cooperative sensing system
vulnerable to malicious attacks. To this end, we propose the
use of the ring signature [18] by each sensing node to hide
the source of a sensing packet in a group of valid sensing
nodes. Also, the smart contract as the fusion centre can identify
the validity of each received sensing packet. Moreover, since
sensing packets are unencrypted, fusing these sensing results
can be carried out directly and automatically in the smart
contract.

In the following, we illustrate the procedures of one sensor,

denoted by 𝑆𝑒𝑛𝑠𝑜𝑟𝑠, in generating the ring signature.

7

1. 𝑆𝑒𝑛𝑠𝑜𝑟𝑠 selects 𝑛 − 1 legal sensors to form a group and
collect their public keys. The format of a sensing data
packet, denoted as msg, is given as follows

𝑚𝑠𝑔 = {H (𝑚𝑠𝑔𝐼 𝐷), 𝑆𝑅, 𝑡𝑖𝑚𝑒, 𝑙𝑜𝑐𝑎𝑡𝑖𝑜𝑛},

(9)

where H (𝑚𝑠𝑔𝐼 𝐷) is used in the update of the trust value
and 𝑆𝑅 is the sensing result denoted by one bit.

2. 𝑆𝑒𝑛𝑠𝑜𝑟𝑠 uses one-way hash function to compute 𝑘 =
H (𝑚𝑠𝑔), which is a symmetric key of the symmetric
encryption function 𝐸𝑘 .

3. 𝑆𝑒𝑛𝑠𝑜𝑟𝑠 generates a random value for each of other
members in the group where it belongs to. Speciﬁcally,
the random number 𝑥𝑖 is ﬁrst generated for the 𝑖-th node
in the group. It then calculates corresponding 𝑦𝑖=𝑔𝑖 (𝑥𝑖)
using corresponding public key, where the function 𝑔𝑖 (·)
is the encryption function encrypted with the public key
𝑝𝑘𝑖.

4. 𝑆𝑒𝑛𝑠𝑜𝑟𝑠 ﬁnds the solution to the ring equation (10) and
gets the undetermined parameter 𝑦𝑠, where 𝑣 is a random
value chosen by 𝑆𝑒𝑛𝑠𝑜𝑟𝑠. Then, 𝑆𝑒𝑛𝑠𝑜𝑟𝑠 calculates 𝑥𝑠
using its own privacy key: 𝑥𝑠=𝑔−1
𝑠 (𝑦𝑠). To ﬁnd solution,
a private key of a sensor in this group is needed , anyone
who is not in the group cannot generate a legal ring
signature.

𝐶𝑘,𝑣 (𝑦1, 𝑦2, ..., 𝑦𝑛) = 𝐸𝑘 (𝑦𝑛 ⊕ 𝐸𝑘 (𝑦𝑛−1 ⊕ 𝐸𝑘 (...

⊕ 𝐸𝑘 (𝑦1 ⊕ 𝑣)...))) = 𝑣,

(10)

Finally, a valid ring signature, denoted as 𝑅𝑖𝑛𝑔𝑠𝑖𝑔, can be

generated by 𝑆𝑒𝑛𝑠𝑜𝑟𝑠.

𝑅𝑖𝑛𝑔𝑠𝑖𝑔 = ( 𝑝𝑘1, 𝑝𝑘2, ..., 𝑝𝑘 𝑛, 𝑣, 𝑥1, 𝑥2, ..., 𝑥𝑛),

(11)

The signature veriﬁcation by the smart contract as the fusion

centre involves the following three steps.

1. Calculate all 𝑦𝑖 using corresponding public key 𝑝𝑘𝑖 and

𝑥𝑖;

2. Calculate the symmetric key 𝑘 = H (𝑚𝑠𝑔);
3. Verify that if 𝐶𝑘,𝑣 (𝑦1, 𝑦2, ..., 𝑦𝑛) = 𝑣 holds.
If the veriﬁcation succeeds, the smart contract recognizes
that 𝑚𝑠𝑔 is sent by a valid sensing node from the group
{𝑆𝑒𝑛𝑠𝑜𝑟1, 𝑆𝑒𝑛𝑠𝑜𝑟2, ..., 𝑆𝑒𝑛𝑠𝑜𝑟𝑛}. In this way, we can cut the
connection between the data packet and its corresponding
owner.

However, for the trust value update and payments assign-
ment process, it is necessary to know the mapping of the
sensing result and its corresponding sensor. To this end, we
propose a two stage commitment scheme as follows.

This scheme consists of two stages including Commit Stage
and Reveal Stage. As shown in Fig. 4, at the commit stage,
each sensor participating in the cooperative sensing needs
to submit the 𝑚𝑠𝑔 whose privacy is protected by the ring
signature, and the ﬁeld “hash of 𝑚𝑠𝑔𝐼 𝐷”, i.e. H (𝑚𝑠𝑔𝐼 𝐷),
is used as a commitment. 𝑚𝑠𝑔𝐼 𝐷 is an identiﬁer which is the
input of hash function, and can be any message such as "I am
User 3" or "I like apples". At the reveal stage, each sensor
directly uploads the unhashed 𝑚𝑠𝑔𝐼 𝐷 for miners to verify
the consistency. This checking mechanism is effective since
hash function is preimage resistance and second-preimage

resistance [32], i.e., given a hash output R=H (𝑚𝑠𝑔𝐼 𝐷), it
is difﬁculty to ﬁnd the input 𝑚𝑠𝑔𝐼 𝐷 or another input 𝑚𝑠𝑔𝐼 𝐷 (cid:48)
such that H (𝑚𝑠𝑔𝐼 𝐷) = R or H (𝑚𝑠𝑔𝐼 𝐷 (cid:48)) = R.

Fig. 4: Two-Stage commitment scheme.

VI. SMART CONTRACTS AND DSA PROTOCOL DESIGN
Smart contracts are computer codes that

run on the
blockchain platform, which are automatically executed when
the predeﬁned conditions are satisﬁed. Moreover, smart con-
tracts are not controlled by any third party. Therefore, we
propose to use smart contracts to realize the automated op-
eration of cooperative spectrum sensing and spectrum auction
on blockchain. In this section, we will give the designs of
the corresponding smart contracts, and then propose the DSA
protocol based on these smart contracts.

A. Smart Contract Design

We ﬁrst discuss the design of our smart contracts for
cooperative sensing and spectrum auction. In the following,
we describe the parameters and functions in the two smart
contracts, respectively.

Cooperative Sensing Contract (CSC): The parameters in
CSC that need to be predeﬁned are 𝑇𝑑𝑑𝑙, 𝑑𝑠, 𝑁1 and 𝑇𝑉𝑡 ℎ𝑟 ,
which are introduced as follows.

• 𝑇𝑑𝑑𝑙: The deadline for a sensor to send its sensing packet

to CSC;

• 𝑑𝑠: The deposit that a sensor needs to pay before partic-
ipating in sensing, which is used to be a guarantee for
acting honestly. The deposit can be withdrawn only if the
sensor uploads the sensing result which is consistent to
the cooperative sensing result..

• 𝑁1: The maximum number of sensors needed in coop-
erative sensing. If there are more than 𝑁1 sensors who
apply to participate in cooperative sensing, those with 𝑁1
highest trust value will be selected.

• 𝑇𝑉𝑡 ℎ𝑟 : the minimum trust value of a sensor is needed to

participate in cooperative sensing.

The functions in CSC are introduced as follows.
• 𝑆𝑒𝑛𝑠𝑜𝑟 𝑅𝑒𝑔𝑖𝑠𝑡𝑒𝑟 (·): The inputs to this function are ad-
dress 𝐴𝑑𝑑𝑟, deposit 𝑑𝑝𝑡 and trust value 𝑇𝑉 of the node
who invokes this function. This function will decide
whether this node can register successfully by checking
its trust value.

• 𝐶ℎ𝑒𝑐𝑘 𝑅𝑒𝑔𝑖𝑠𝑡𝑒𝑟𝑄𝑢𝑎𝑙𝑖𝑡𝑦(·): This function is used to
check node’s quality of participating in sensing by check-
ing the parameters passed into it, i.e., node’s trust value

8

𝑇𝑉𝑖 and deposit 𝑑𝑒 𝑝𝑜𝑠𝑖𝑡𝑖. For new users, participating
in sensing is the only way to improve their trust value.
This function offers users a way to convert their tokens
to additional trust value, which enables the users whose
trust value is below threshold to participate in sensing by
paying more deposit.

• 𝐹𝑢𝑠𝑖𝑜𝑛(·): The input to this function is 𝑚𝑠𝑔𝐿𝑖𝑠𝑡, which
is a list consisting of all the sensing results from the
registered sensors. This function outputs the ﬁnal sensing
result according to the pre-deﬁned fusion rule.

• 𝑈 𝑝𝑙𝑜𝑎𝑑𝑆𝑒𝑛𝑠𝑖𝑛𝑔𝐷𝑎𝑡𝑎(·): The inputs to this function are
𝑚𝑠𝑔 and 𝑅𝑆𝐼𝐺 , which are the sensing packets in (9) and
the ring signature of the node, respectively. This function
is invoked by legal sensors to upload their sensing result.

The pseudocode of the CSC is summarized in Algorithm 2.
Spectrum Auction Contract (SAC): The parameters in SAC

are as follows.

• 𝐶𝑆𝐶𝑖𝑑: The identity of corresponding CSC, which is used
to identify the connection between SAC and CSC since
every SAC is associated with a particular CSC.

• 𝑁2: The maximum number of the bidders, which is used
to prevent too many nodes from sending bidding message.
• 𝑇𝑠𝑒𝑙 𝑓 −𝑑: The time when this SAC will conduct the self-

destruct operation to release memory.

• 𝑑𝑎: The amount of tokens that the bidders need to deposit

before the ﬁnal sensing result is released.

The functions in SAC are introduced as follows.
• 𝐵𝑖𝑑𝑑𝑒𝑟 𝑅𝑒𝑔𝑖𝑠𝑡𝑒𝑟 (·): Bidders invoke this function to reg-

ister in SAC.

• 𝐶𝑜𝑚𝑚𝑖𝑡 (·): The input to this function is 𝑏𝑙𝑑𝐵𝑖𝑑 which
denotes the commitment of 𝑏𝑖𝑑𝑑𝑒𝑟𝑖. Note that since the
account balance is transparent, nodes can identify others’
bid by checking their balance [33]. Therefore, everyone
makes several commits in order to prevent others from
inferring your bid based on changes of their account
balance.

• 𝑅𝑒𝑣𝑒𝑎𝑙 (·): The inputs to this function include 𝐷 𝑝𝑠,
𝐵𝑜𝑜𝑙𝑠 and 𝑅𝑁 𝐷𝑠. 𝐷 𝑝𝑠 is the list of deposit (𝐷 𝑝)
the bidders make; 𝐵𝑜𝑜𝑙𝑠 is the list of boolean values
which indicate whether these bids are valid or not;
𝑅𝑁 𝐷𝑠 are random values to make the hash of {𝐷 𝑝,
𝐵𝑜𝑜𝑙, 𝑅𝑁 𝐷} hard to guess. A 𝐶𝑜𝑚𝑚𝑖𝑡
is the hash
of these three parameters, i.e., 𝐶𝑜𝑚𝑚𝑖𝑡= H {𝐷 𝑝, 𝐵𝑜𝑜𝑙,
𝑅𝑁 𝐷}. 𝑏𝑖𝑑𝑠𝐿𝑖𝑠𝑡 [𝑚𝑠𝑔.𝑠𝑒𝑛𝑑𝑒𝑟] is the list of the invoker’s
commits. By comparing the reveal messages and the com-
mits, this function can identify which bids are revealed
correctly. Valid bids are added together as the bidder’s
total bid, invalid but correctly revealed bids are allowed
to be withdrawn, bids that are not correctly revealed will
not be returned.

• 𝑊𝑖𝑛(·): The input to this function is 𝑏𝑖𝑑𝑑𝑒𝑟 𝐿𝑖𝑠𝑡, which
is the list of all valid bids. Here we adopt the second-
price sealed-bid auction for better economic proﬁt [34].
Accordingly, this function selects the bidder with the
highest bid as the winner, who only needs to pay the
second highest bid.

For cooperative sensingCommitReveal(cid:43)(cid:68)(cid:86)(cid:75)For trust value updatingmsgID: (cid:256)I am user 3(cid:257)                                                Sensing Result: SRTimestamp: 2020/12/20 12:01:02Two-dimension location: (x,y)Hash of msgID: 7f5d6s8d2d785412sdd(cid:258)(cid:76)(cid:86)(cid:78)(cid:54)(cid:76)(cid:74)(cid:53)(cid:54)(cid:44)(cid:42)(cid:76)(cid:54)(cid:72)(cid:81)(cid:86)(cid:82)(cid:85)9

require(msg.sender==ContractOwner);
initialize 𝑇𝑉𝑡 ℎ𝑟 , 𝑑𝑠, 𝑁1;

Algorithm 2 Cooperative Sensing Contract
1: function INIT(𝑇𝑉𝑡 ℎ𝑟 , 𝑑𝑠, 𝑁1)
2:
3:
4: end function
5:
6: function SENSORREGISTER(𝐴𝑑𝑑𝑟, 𝑑𝑝𝑡, 𝑇𝑉)
7:
8:
9:

𝑠𝑒𝑛𝑠𝑜𝑟𝑛𝑢𝑚 ← 0;
if CHECKREGISTERQUALITY(𝑇𝑉𝑖, 𝑎𝑑𝑑𝑟𝑖) then

𝑠𝑒𝑛𝑠𝑜𝑟 𝑀𝑎 𝑝 ← 𝑠𝑒𝑛𝑠𝑜𝑟𝑖;
𝑠𝑒𝑛𝑠𝑜𝑟𝑛𝑢𝑚 ← 𝑠𝑒𝑛𝑠𝑜𝑟𝑛𝑢𝑚 + 1;
EMIT event("Registration success!");

Algorithm 3 Sealed Spectrum Auction Contract
1: 𝐵𝑖𝑑 ← 𝑏𝑙𝑑𝐵𝑖𝑑𝑖, 𝑚𝑠𝑔.𝑣𝑎𝑙𝑢𝑒;
2: 𝑏𝑖𝑑𝑠𝐿𝑖𝑠𝑡 ← 𝑚𝑎 𝑝 𝑝𝑖𝑛𝑔(𝑎𝑑𝑑𝑟𝑒𝑠𝑠 => 𝐵𝑖𝑑 []);
3: 𝑟𝑒 𝑓 𝑢𝑛𝑑 ← 0
4:
5: function COMMIT(𝑏𝑙𝑑𝐵𝑖𝑑)
6:
7: end function
8:
9: function REVEAL(𝐷 𝑝𝑠, 𝐵𝑜𝑜𝑙𝑠, 𝑅𝑁 𝐷𝑠)
10:
11:

𝑙𝑒𝑛 ← 𝑏𝑖𝑑𝑠𝐿𝑖𝑠𝑡 [𝑚𝑠𝑔.𝑠𝑒𝑛𝑑𝑒𝑟].𝑙𝑒𝑛𝑔𝑡ℎ;
while 𝑙𝑒𝑛 > 0 do

𝑏𝑖𝑑𝑠𝐿𝑖𝑠𝑡 [𝑚𝑠𝑔.𝑠𝑒𝑛𝑑𝑒𝑟].𝑝𝑢𝑠ℎ(𝑏𝑙𝑑𝐵𝑖𝑑);

10:
11:
12:
13:

14:

else

EMIT event("Registration failed, please checkout

the trust value and deposit.");

end if
if 𝑠𝑒𝑛𝑠𝑜𝑟𝑛𝑢𝑚 > 𝑁1 then

end if

Select top 𝑁1 sensors according to trust value;

15:
16:
17:
18: end function
19:
20: function FUSION(𝑚𝑠𝑔𝐿𝑖𝑠𝑡)
21:
22:
23: end function
24:
25: function CHECKREGISTERQUALITY(𝑇𝑉𝑖,𝑑𝑒 𝑝𝑜𝑠𝑖𝑡𝑖)
26:
27:

Decision fusion in majority rule;
return Cooperative sensing result;

if 𝑑𝑒 𝑝𝑜𝑠𝑖𝑡𝑖 > 𝑑𝑠 then

𝑇𝑉 (cid:48)
if (𝑇𝑉𝑖 + 𝑇𝑉 (cid:48)

𝑖 ← 𝑐𝑜𝑛𝑣𝑒𝑟𝑡 (𝑑𝑒 𝑝𝑜𝑠𝑖𝑡𝑖 − 𝑑𝑠)
𝑖 ) > 𝑇𝑉𝑡 ℎ𝑟

then
if 𝑡𝑜𝑡𝑎𝑙𝑁𝑢𝑚 < 𝑁1 or 𝑇𝑉𝑖 > 𝑙𝑜𝑤𝑒𝑠𝑡𝑇𝑉 then

28:
29:

12:
13:
14:
15:
16:

17:
18:

19:
20:
21:

else

end if

end if

end if

Register Successful;

Register Failed;

30:
31:
32:
33:
34:
35:
36: end function
37:
38: function UPLOADSENSINGDATA(𝑚𝑠𝑔, 𝑅𝑆𝐼𝐺)
39:
40:

if 𝑅𝑆𝐼𝐺 is legal then
𝑚𝑠𝑔𝐿𝑖𝑠𝑡 ← 𝑚𝑠𝑔;
EMIT event("Upload successfully!");

else

41:
42:
43:
44:
45: end function

end if

EMIT event("Upload failed, illegal sensor!");

• 𝐸𝑛𝑑𝑂 𝑓 𝐴𝑢𝑐𝑡𝑖𝑜𝑛(·): SAC will execute self-destruct oper-

ation at the preset time 𝑇𝑠𝑒𝑙 𝑓 −𝑑.

The pseudocode of SAC is shown in Algorithm 3.

B. The DSA Protocol

In this part, we illustrate our proposed blockchain-based
DSA protocol. To make it clearer, we elaborate this protocol
in Fig. 5.

𝐶𝑜𝑚𝑚𝑖𝑡 ← H {𝐷 𝑝𝑠[𝑙𝑒𝑛], 𝐵𝑜𝑜𝑙𝑠[𝑙𝑒𝑛], 𝑅𝑁 𝐷𝑠[𝑙𝑒𝑛]};
if 𝐶𝑜𝑚𝑚𝑖𝑡! = 𝑏𝑖𝑑𝑠𝐿𝑖𝑠𝑡 [𝑚𝑠𝑔.𝑠𝑒𝑛𝑑𝑒𝑟] [𝑙𝑒𝑛] then

EMIT event("Illegal Reveal!");
Continue;

else if 𝐶𝑜𝑚𝑚𝑖𝑡 == 𝑏𝑖𝑑𝑠𝐿𝑖𝑠𝑡 [𝑚𝑠𝑔.𝑠𝑒𝑛𝑑𝑒𝑟] [𝑙𝑒𝑛]

and 𝐵𝑜𝑜𝑙𝑠[𝑙𝑒𝑛] == 𝑡𝑟𝑢𝑒 then

𝑟𝑒 𝑓 𝑢𝑛𝑑 ← 𝑟𝑒 𝑓 𝑢𝑛𝑑 + 𝐷 𝑝𝑠[𝑙𝑒𝑛];

else if 𝐶𝑜𝑚𝑚𝑖𝑡 == 𝑏𝑖𝑑𝑠𝐿𝑖𝑠𝑡 [𝑚𝑠𝑔.𝑠𝑒𝑛𝑑𝑒𝑟] [𝑙𝑒𝑛]

and 𝐵𝑜𝑜𝑙𝑠[𝑙𝑒𝑛] == 𝑓 𝑎𝑙𝑠𝑒 then

withdraw invalid but reveal correctly bid;

end if
𝑙𝑒𝑛 ← 𝑙𝑒𝑛 − 1;

return Bidder with the highest bid;

end while
22:
23: end function
24:
25: function WIN(𝑏𝑖𝑑𝑑𝑒𝑟 𝐿𝑖𝑠𝑡)
26:
27: end function
28:
29: function ENDOFAUCTION(𝑇𝑠𝑒𝑙 𝑓 −𝑑)
Execute self-destruct operation;
30:
31: end function

• Phase 1 (Spectrum Sensing Request): To ask for the
channel state, SUs need to send a request message to Task
Issuer (TI) through the control channel. TI is played by
the node whose trust value is currently the highest. The
role of TI is set to prevent multiple contracts from ap-
pearing in the network, which results in users participate
in different contracts. TI will then creates and deploys
the CSC and the corresponding SAC in the blockchain.
• Phase 2 (Smart Contracts and Nodes Register): The CSC
and SAC are instantiated when TI issues the transaction
𝐶𝑆𝐶 = {𝐶𝑆𝐶𝑖𝑑 | 𝑇𝑑𝑑𝑙 | 𝑁1 | 𝑇𝑉𝑡 ℎ𝑟 | 𝐹𝑢𝑠𝑖𝑜𝑛(·) | 𝑑𝑠 }

with the signature 𝑆𝑖𝑔𝑇 𝐼 (𝑆𝑇𝐶), and the transaction

(12)

𝑆 𝐴𝐶 = {𝐶𝑆𝐶𝑖𝑑 | 𝑆 𝐴𝐶𝑖𝑑 | 𝑁2 | 𝑇𝑠𝑒𝑙 𝑓 −𝑑 | 𝑊𝑖𝑛(·) | 𝑑𝑎}

(13)
with the signature 𝑆𝑖𝑔𝑇 𝐼 =( 𝐴𝐶). To register to CSC, a
sensor issues the transaction

𝐷𝑒 𝑝𝑜𝑠𝑖𝑡𝐶𝑆𝐶𝑖𝑑 = {𝑝𝑘𝑖 | 𝑇𝑉𝑖 | 𝐶𝑆𝐶𝑖𝑑 | 𝑑𝑠 }

(14)
with the signature 𝑆𝑖𝑔𝑠𝑘𝑖 (𝐷𝑒 𝑝𝑜𝑠𝑖𝑡𝐶𝑆𝐶𝑖𝑑 ) to make de-
posits. Similarly, a SU who intends to participate in SAC

makes its deposit by issuing

VII. IMPLEMENTATION AND PERFORMANCE ANALYSIS

10

𝐵𝑡𝑦𝑆 𝐴𝐶𝑖𝑑 = {𝑝𝑘𝑖 | 𝑇𝑉𝑖 | 𝑆 𝐴𝐶𝑖𝑑 | 𝑑𝑎 | H (𝑏𝑖𝑑𝑖, 𝑅𝑁 𝐷𝑖)}
(15)
The
commitment

with
H (𝑏𝑖𝑑𝑖, 𝑅𝑁 𝐷𝑖)
this SU makes for the sealed auction.

𝑆𝑖𝑔𝑠𝑘𝑖 (𝐵𝑡𝑦𝑆 𝐴𝐶𝑖𝑑 ).
bidding

signature
denotes

the

the

• Phase 3 (Players selection): Players (including sensors
and bidder) are selected based on 𝑆𝑒𝑛𝑠𝑜𝑟 𝑅𝑒𝑔𝑖𝑠𝑡𝑒𝑟 (·) and
𝐵𝑖𝑑𝑑𝑒𝑟 𝑅𝑒𝑔𝑖𝑠𝑡𝑒𝑟 (·), respectively. Finally, an event will be
triggered to provide an appropriate notiﬁcation to every
eventually selected nodes.

• Phase 4 (Sensing phase): Sensors upload the sensing data

by issuing the transaction

𝑚𝑠𝑔𝑡 𝑥 = {𝐶𝑆𝐶𝑖𝑑 | H (𝑚𝑠𝑔𝐼 𝐷) | 𝑇 𝑆 | 𝑆𝑅 | 𝑙𝑜𝑐}

(16)

with the ring signature generated by (11) before 𝑇𝑑𝑑𝑙,
and 𝑇 𝑆 denotes timestamp, 𝑆𝑅 denotes the sensing result.
In this process, we use the ring signature to protect the
SU’s identity. Meanwhile, these sensors need to make
commitments mentioned in Section V-D by sending the
transaction

𝐶𝑜𝑚𝑚𝑖𝑡𝑖 = {𝐶𝑆𝐶𝑖𝑑 | H (𝑆𝑅, 𝑅𝑁 𝐷𝑖, 𝑚𝑠𝑔𝐼 𝐷) | 𝑝𝑘𝑖)

(17)
with 𝑆𝑖𝑔𝑠𝑘𝑖 (𝐶𝑜𝑚𝑚𝑖𝑡𝑖). After the sensing deadline, data
fusion is done, and the ﬁnal sensing result will be
published in the blockchain network.

• Phase 5 (Auction if necessary): If the cooperative sensing
result indicates that the corresponding spectrum bands
are idle,
the SAC will be invoked. Users who have
been selected will reveal their bids for the spectrum by
sending bids and random numbers. Then the winner will
be published on the blockchain.

• Phase 6 (Trust value updating): In this phase, the trust
value of each node is updated using equation (4) by
miners in the network.

Fig. 5: The workﬂow of our proposed blockchain-based
DSA.

A. Implementation of Smart Contract

We implement the proposed smart contracts using Solidity
[16] in the Ethereum Virtual Machine (EVM). The smart con-
tracts are compiled and deployed in the Remix IDE [35] which
is used for testing. After that, the nodes in the blockchain
network can send transactions to deploy the smart contracts
and invoke functions in these contracts. In the cooperative
sensing phase, ﬁve sensors are considered and the information
of their accounts in the blockchain network are listed in
table II. In the following, we describe the implementation
procedures in detail.

1) Smart Contract Preparation: The smart contract is cre-
ated and deployed by the node with the highest trust
value, i.e., the ﬁfth account in table II. The relevant
parameters and functions which need to be predeﬁned are
set as follows: 𝑁1 is set as 3, the trust value threshold
𝑇𝑉𝑡 ℎ𝑟 is set as 900 where we magnify the trust values by
100 times and make they as integers, since ﬁxed point
numbers are not fully supported by Solidity yet. 𝑑𝑠 is set
as 100 wei,

2) Smart Contract Deployment: Fig.6 shows the details
about the deployed smart contract. The ﬁeld “from" is the
account address of TI. The ﬁeld “decoded input" shows
all of our preset parameters.

3) Sensor Registration: All the ﬁve sensors send their regis-
tration request to the smart contract. Then, three sensors
are selected by the function 𝑆𝑒𝑛𝑠𝑜𝑟 𝑅𝑒𝑔𝑖𝑠𝑡𝑒𝑟 (·).

4) Sensing Results Fusion: The function 𝐹𝑢𝑠𝑖𝑜𝑛(·), where
the majority rule is selected, is used to fuse the sensing
results from three legal sensors.
If the spectrum is detected as idle,

the auction phase
initiates. In this phase, we consider two bidders: each bidder
has one true bid and one false bid. The related information is
listed in Table III. The ﬁrst bidder has two bids: one is a true
bid with 100 wei, the other one is a false bid with 200 wei.
The second bidder also has two bids: one is true with 150 wei,
the other is false with 300 wei.

TABLE II: Related information of sensor accounts

Account addresses

Trust value

Sensing Result

0x5B38Da6a701c568545dCfcB03FcB875f56beddC4
0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2
0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db
0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB
0x5B38Da6a701c568545dCfcB03FcB875f56beddC4

0.91
0.92
0.87
0.93
0.94

0
1
1
0
1

1) Commit: Bidders invoke 𝐶𝑜𝑚𝑚𝑖𝑡 (·) function to make
commits. Fig. 7 shows the log of commit made by bidder
2. There are address information and bid information
about
thus others can know that bidder
2 make a bid with 150 wei, but they can not identify
whether this is a real commit or not.

this commit,

2) Reveal: After the commit phase, bidders invoke the func-
tion 𝑅𝑒𝑣𝑒𝑎𝑙 (·) to reveal its commits. The ﬁeld “decoded
input” in Fig. 8 shows the whole information about this
commit. The smart contract will automatically verify the
information uploaded in the two phase and the ﬁnal
bidding result can be accessed by all nodes in the system.

Spectrum requestCreate STC and SACRegister and make deposits for STC Upload Sensing datasReveal bidding commitmentsMake deposits and commitments for  SACIf channel is idleSecondary usersTask issuerSmart contractsCheck deposit and trust valueCheck upload qualificationsensing resultCheck deposit and  the consistency of commitmentauction resultTV update and payments assignment11

Fig. 6: Initialization of Smart Contract

TABLE III: Related Information of Bidders

Bidder address

Bid

isReal

Commit

0xAb84...5835cb2

0x4B20...2C02db

100wei
200wei
150wei
300wei

yes
no
yes
no

0x591a291ad67...1b62c96a2092
0x4871a30b671...4d08cfaa8bc1
0x4e6a24e35c7be...23643d68efa
0x0c98edecac...74d24d971ec88

Fig. 7: The commit made by bidder 2

B. Performance Analysis of The Proposed PoT Consensus
Algorithm

In this part, we evaluate the performance of the proposed
PoT consensus algorithm. We ﬁrst discuss how to set the initial
mining difﬁculty at the beginning when every node’s trust
value is 0. We simulate the mining process in our personal
computer as a reference to explain how to select a suitable
mining difﬁculty. We use a given string to represent
the
transactions in a block in the blockchain network. The result
is shown in Fig. 9. The running time increases exponentially
when the number of leading zeros is larger than 20. Supposing
that the hash rate of the IoT devices is similar to that of our
personal computer, the interval between two blocks 𝑇0 is about
1 second, then the mining difﬁculty should be less than 18
leading zeros, the 𝛽0 is about 218 = 262144.

It’s worth mentioning that even under the same mining
difﬁculty and experimental environment, the mining time may
be different. For example, given the mining difﬁculty where
32 leading zeros are needed in the target hash, it sometimes

Fig. 8: The reveal made by bidder 2.

take tens of seconds, and sometimes can take more than an
hour. In order to eliminate the impact of luck, we convert the
mining difﬁculty into the expected mining cost and evaluate the
expected mining cost instead of running time. Theoretically,
assuming that the output of each hash calculation is unpre-
dictable, each time when we increase the leading zero by one,
the success probability of each hash trial will be halved. The
trust value is associated with the mining difﬁculty. Therefore,
we ﬁrst convert the trust value into the number of leading
zeros, and then the number of leading zeros is converted
into the expected mining cost proportionally. Simulation is
conducted for 1000 time slots, and the average expected
mining cost of every type of nodes is calculated in Fig.11.
To be speciﬁc, we simulate a network with 20 nodes and 4
types of nodes are considered. Rnode means a node with high
performance and always act honestly; UAnode means a node
with high performance and act honestly, however it participates
in sensing infrequently. OOnode is a node who conducts
malicious behavior periodically. We assume that OOnode will
act maliciously after every two normal sensing rounds. The
Lnode is a node who randomly provides binary sensing result
without sensing. There are 12 Rnode with probability of
detection 𝑝𝑑 = 0.90 and probability of false alarm 𝑝 𝑓 = 0.15
[36]; 3 OOnode whose 𝑝𝑑 = 0.90 and 𝑝 𝑓 = 0.15; 3 Lnode
with 𝑝𝑑 = 0.5 and 𝑝 𝑓 = 0.5; and 2 UAnode with 𝑝𝑑 = 0.90
and 𝑝 𝑓 = 0.15. Besides, it is assumed that they only have a
50% chance to sign up in CSS each sensing round.

In Fig.11, it can be observed that the reliable node performs
best with respect to the average expected mining cost per
timeslot, which is about one third of the other three types
of nodes. The expected mining cost of a on-off node is a
little smaller than Lnode and UAnode but still cost three times
than Rnode. This proves the effectiveness of our proposed
consensus algorithm.

12

Fig. 11: Expected mining consumption of different nodes

value perform worse than that of the last selection scheme.
This indicates that our proposed trust value mechanism can
effectively improve the cooperative sensing performance of
the system. Moreover, in the last selection scheme, 𝑝𝑑 is close
to 1 when 𝑁1 is about one fourth of all network nodes. The
fewer nodes involved, the smaller the total monetary reward
that the network needs to pay to sensors, and the smaller
the economic burden for spectrum buyers. As 𝑁1 grows,
the performance of different schemes will gradually close,
since most of the network nodes (including bad nodes) will
participate in cooperative sensing.

D. Incentive Mechanism Analysis

Since both sensing and mining will consume SU’s comput-
ing power, an incentive mechanism is needed to reward nodes
for the work they have done. The users who upload a sensing
result that is consistent to the ﬁnal cooperative sensing result
will be rewarded with 𝑅𝑠 tokens; The users who successfully
mine will be rewarded with 𝑅𝑚 tokens. The tokens can be
used in auction to bid for spectrum resources. In implemen-
tation, the tokens rewarded for accurate spectrum sensing and
successful mining, i.e., 𝑅𝑠 and 𝑅𝑚, need to be designed based
on the evaluation of the computation consumption of spectrum
sensing and mining.

This incentive mechanism not only encourages the nodes
to participate in spectrum sensing, but also encourage them
to behave honestly and accurately in spectrum sensing. This
is because, on the one hand, an honest and accurate sensing
node is more likely to derive a sensing result that is consistent
to the ﬁnal cooperative sensing result and obtain tokens
rewarded for spectrum sensing. On the other hand, with the
proposed consensus algorithm, the node with a higher trust
value is easier to mine successfully so that they have a higher
probability of obtaining tokens for mining. On the contrary, the
dishonest nodes will be discouraged since they are less likely
to obtain rewards since they need to spend more computing
resources on mining.

Fig. 9: Running time (second) with increasing number of
leading zeros

Fig. 10: Curve of trust value

C. Performance of Cooperative Sensing

In this part, we evaluate the performance of cooperative
spectrum sensing with the help of our proposed trust evaluation
mechanism. In traditional blockchain network, there is no trust
among nodes hence anyone can record the sensing information
into blockchain, including nodes with poor performance or
malicious behavior. However, due to the introduction of the
trust value mechanism, the cooperative sensing contract can
exclude bad nodes according to nodes’ trust value, thus the
system’s sensing performance can be improved. For com-
parison, we consider 3 kinds of selection schemes to select
the candidate nodes for the cooperative sensing. (i) random
selection scheme; (ii) select according to register time; (iii)
select according to sensor’s trust value. We simulate a 20 nodes
network with the same setup in VII-B.

It can be seen from Fig.12 that when the number of needed
sensors 𝑁1 is small, 𝑝𝑑 and 𝑝 𝑓 of cooperative sensing in
the ﬁrst two schemes which do not take advantage of trust

1214161820222426283032Number of leeeading zeros0102030405060708090100Running time (second)01002003004005006007008009001000Sensing round00.10.20.30.40.50.60.70.80.9Trust valueTrust value of 4 types of nodeRnodeUAnodeOOnodeLnodeRnodeUAnodeOOnodeLnode00.10.20.30.40.50.60.70.80.91Normalized expected mining cost per time slotReliable nodeUnactive nodeOn-off attack nodeLazy nodeY: 0.2817Y: 0.9809Y: 0.8771Y: 0.975713

(a) 𝑃𝑑 of cooperative sensing

(b) 𝑃 𝑓 of cooperative sensing

Fig. 12: Performance of cooperative sensing under three selection schemes

E. Security Analysis

• Distributed Denial of Service (DDoS) Attack: The DDoS
attack here means that malicious users try to make the
sensing service unavailable to other users. Our system is
resist to this attack since we adopt the deposit mechanism.
Thus, under our scheme, the cost of launching large-scale
DDoS attack is very high since the attackers need to
obtain lots of tokens in order to launch the attack.

• Spooﬁng Attack: Spooﬁng attack means someone tries to
masquerade others to create forged transactions. Secure
Elliptic Curve Digital Signature Algorithm (ECDSA) [37]
used in our blockchain can prevent this attack on the
premise that attack does not have the user’s private key.
• Free-riding Attack (lazy node): The Free-riding attack
here means lazy users may directly copy others’ sensing
results at the phase of uploading sensing data. Firstly,
there is no motivation for sensors to submit the sensing
result before sensing deadline. Thus, when the lazy nodes
get the sensing result, it is difﬁcult for them to repack the
sensing result and submit before the deadline. Secondly,
even if a few sensors submit sensing results in advance,
the connection between a user’s identity and sensing data
is cut by the ring signature, thus the lazy users cannot
determine the owner of the sensing data, and thus the
credibility of the data cannot be guaranteed. Thus, it is
no better than submit a sensing result randomly.

• On-off Attack: On-off attack means that a node performs
malicious behaviors periodically. If a trust management
mechanism satisfy the condition that the dropping rate
of trust value is larger than its increasing rate,
is
considered to be resist to the on-off attack [28]. However,
the model in [28] may cause the trust value drop a lot
even the misbehavior is unintentional, since the increasing
rate is much smaller than dropping rate. In our proposed
the unintentional mistakes
model, as show in Fig.13,
made by sensors can be compensated by making right

it

𝜂

sensing decision. When the parameters 𝜏 and 𝜂 satisfy
𝜌 >
1−𝑒−𝜂 − 𝜂, our proposed trust value management
mechanism is considered to be resist to the on-off attack,
the proof is given in Appendix A.

VIII. CONCLUSION

In this paper, we have proposed a blockchain-based dynamic
spectrum sharing protocol. This protocol mainly consists of
three parts: the ﬁrst part is the trust value management mech-
anism, which is designed to evaluate the credibility of nodes;
the second part is the PoT consensus algorithm, which make
the mining difﬁculty for malicious nodes greatly increased.
The combination of node’s trust value and their mining
difﬁculty can motivate nodes to be more willing to behave
honestly; the third part is the privacy protection mechanism,
in which we combine the ring signature and the commit-reveal
scheme to solve the problem of privacy issue in the process
of cooperative spectrum sensing. Finally, we implemented the
prototype of our proposed smart contracts and analyzed the
performance of PoT consensus algorithm and the improvement
in cooperative sensing. Security analysis of the system show
that our framework can resist many kinds of attacks which are
frequently encountered in trust-based blockchain systems.

APPENDIX A
PROOF OF THE RESISTANCE OF ON-OFF ATTACK
Proposition 1. The proposed trust model given in (1) is
resistant to on–off attack when 𝜌 > 𝜂

1−𝑒−𝜂 − 𝜂.

𝑓 (𝑁𝑟 , 𝑁𝑤 ) = 𝑒−𝜌·𝑁𝑤 · (cid:0)1 − 𝑒−𝜂 ·𝑁𝑟 (cid:1) denotes the
Proof. Let
trust value update function in (1). Because when 𝑁𝑟 = 0,
𝑓 (𝑁𝑟 , 𝑁𝑤 ) can only increase, this situation is not discussed
here. At any other points (𝑁𝑟 , 𝑁𝑤 ) in this function,
the
decreasing rate should be larger than the increasing rate, that
is:

(cid:13)
(cid:13)
(cid:13)
(cid:13)

𝜕 𝑓
𝜕𝑁𝑤

(cid:13)
(cid:13)
(cid:13)
(cid:13)

>

(cid:13)
(cid:13)
(cid:13)
(cid:13)

𝜕 𝑓
𝜕𝑁𝑟

(cid:13)
(cid:13)
(cid:13)
(cid:13)

,

(18)

02468101214161820Number of needed sensors (N1)0.750.80.850.90.951pdSeqPdTvPdRanPd02468101214161820Number of needed sensors (N1)10-310-210-1100pfTvPfRanPfSeqPf14

(a) Existing model

(b) Proposed model

Fig. 13: Trust value of different types of nodes under two model

where

and

(cid:13)
(cid:13)
(cid:13)
(cid:13)

𝜕 𝑓
𝜕𝑁𝑤

(cid:13)
(cid:13)
(cid:13)
(cid:13)

= 𝜌 · 𝑒−𝜌·𝑁𝑤 ·

(cid:16)

1 − 𝑒−𝜂 ·𝑁𝑟 (cid:17)

(cid:13)
(cid:13)
(cid:13)
(cid:13)

𝜕 𝑓
𝜕𝑁𝑟

(cid:13)
(cid:13)
(cid:13)
(cid:13)

= 𝜂 · 𝑒−𝜌·𝑁𝑤 ·

(cid:16)

𝑒−𝜂 ·𝑁𝑟 (cid:17)

,

then we have
(cid:13)
(cid:13)
(cid:13)
(cid:13)

𝜕 𝑓
𝜕𝑁𝑤

(cid:13)
(cid:13)
(cid:13)
(cid:13)

>

(cid:13)
(cid:13)
(cid:13)
(cid:13)

𝜕 𝑓
𝜕𝑁𝑟

(cid:13)
(cid:13)
(cid:13)
(cid:13)

⇔

𝜌
𝜂

>

𝑒−𝜂 ·𝑁𝑟
1 − 𝑒−𝜂 ·𝑁𝑟

which can also be denoted as:

(19)

(20)

(21)

(cid:13)
(cid:13)
(cid:13)
(cid:13)

𝜕 𝑓
𝜕𝑁𝑤

(cid:13)
(cid:13)
(cid:13)
(cid:13)

>

(cid:13)
(cid:13)
(cid:13)
(cid:13)

𝜕 𝑓
𝜕𝑁𝑟

(cid:13)
(cid:13)
(cid:13)
(cid:13)

⇔

𝜌
𝜂

>

1
1 − 𝑒−𝜂 ·𝑁𝑟

− 1

(22)

When 𝑁𝑟 ≥ 1,

1
1 − 𝑒−𝜂 ·𝑁𝑟

− 1 ≤

Therefore, as long as it is satisﬁed
inequality holds.

1−𝑒−𝜂 − 1, the above
(cid:3)

1

1 − 𝑒−𝜂 − 1,
𝜌
𝜂 >

1

(23)

REFERENCES

[1] G. Forecast, “Cisco visual networking index: global mobile data trafﬁc

forecast update, 2017–2022,” Update, vol. 2017, p. 2022, 2019.

[2] P. Kolodzy and I. Avoidance, “Spectrum policy task force,” Federal
Commun. Comm., Washington, DC, Rep. ET Docket, vol. 40, no. 4, pp.
147–158, 2002.

[3] I. F. Akyildiz, B. F. Lo, and R. Balakrishnan, “Cooperative spectrum
sensing in cognitive radio networks: A survey,” Phy. Commun., vol. 4,
no. 1, pp. 40–62, 2011.

[4] J. Wang, M. Li, Y. He, H. Li, K. Xiao, and C. Wang, “A blockchain based
privacy-preserving incentive mechanism in crowdsensing applications,”
IEEE Access, vol. 6, pp. 17 545–17 556, 2018.

[5] L. Xiao, Y. Ding, D. Jiang, J. Huang, D. Wang, J. Li, and H. Vincent
Poor, “A reinforcement learning and blockchain-based trust mechanism
for edge networks,” IEEE Transactions on Communications, vol. 68,
no. 9, pp. 5460–5470, 2020.

[6] G. Liu, H. Dong, Z. Yan, X. Zhou, and S. Shimizu, “B4SDC: A
blockchain system for security data collection in MANETs,” IEEE
Transactions on Big Data, pp. 1–1, 2020.

[7] W. Feng and Z. Yan, “MCS-Chain: Decentralized and trustworthy mo-
bile crowdsourcing based on blockchain,” Future Generation Computer
Systems, vol. 95, pp. 649–666, 2019.

[8] M. Li, J. Weng, A. Yang, W. Lu, Y. Zhang, L. Hou, J. Liu, Y. Xiang, and
R. H. Deng, “CrowdBC: A blockchain-based decentralized framework
for crowdsourcing,” IEEE Transactions on Parallel and Distributed
Systems, vol. 30, no. 6, pp. 1251–1266, 2019.

[9] M. Yang, T. Zhu, K. Liang, W. Zhou, and R. H. Deng, “A
blockchain-based location privacy-preserving crowdsensing system,”
Future Generation Computer Systems, vol. 94, pp. 408 – 418,
2019. [Online]. Available: http://www.sciencedirect.com/science/article/
pii/S0167739X18320909

[10] M. B. H. Weiss, K. Werbach, D. C. Sicker, and C. E. C. Bastidas, “On the
application of blockchains to spectrum management,” IEEE Transactions
on Cognitive Communications and Networking, vol. 5, no. 2, pp. 193–
205, 2019.

[11] E. D. Pascale, J. McMenamy, I. Macaluso, and L. Doyle, “Smart contract
slas for dense small-cell-as-a-service,” CoRR, vol. abs/1703.04502,
2017. [Online]. Available: http://arxiv.org/abs/1703.04502

[12] G. Qiao, S. Leng, H. Chai, A. Asadi, and Y. Zhang, “Blockchain
empowered resource trading in mobile edge computing and networks,”
in ICC 2019 - 2019 IEEE International Conference on Communications
(ICC), 2019, pp. 1–6.

[13] J. Qiu, D. Grace, G. Ding, J. Yao, and Q. Wu, “Blockchain-based secure
spectrum trading for unmanned-aerial-vehicle-assisted cellular networks:
An operator’s perspective,” IEEE Internet of Things Journal, vol. 7,
no. 1, pp. 451–466, 2020.

[14] T. Ariyarathna, P. Harankahadeniya, S. Isthikar, N. Pathirana, H. M.
N. D. Bandara, and A. Madanayake, “Dynamic spectrum access via
smart contracts on blockchain,” in 2019 IEEE Wireless Communications
and Networking Conference (WCNC), 2019, pp. 1–6.

[15] S. Bayhan, A. Zubow, and A. Wolisz, “Spass: Spectrum sensing as a
service via smart contracts,” in 2018 IEEE International Symposium on
Dynamic Spectrum Access Networks (DySPAN), 2018, pp. 1–10.

[16] Solidity webpage, https://docs.soliditylang.org/en/v0.7.5/.
[17] N. Szabo, “Formalizing and securing relationships on public networks,”
[Online]. Available:

First Monday, vol. 2, no. 9, Sep. 1997.
https://ﬁrstmonday.org/ojs/index.php/fm/article/view/548

[18] R. L. Rivest, A. Shamir, and Y. Tauman, “How to leak a secret,” in
Advances in Cryptology — ASIACRYPT 2001, C. Boyd, Ed. Berlin,
Heidelberg: Springer Berlin Heidelberg, 2001, pp. 552–565.

[19] K. Kotobi and S. G. Bilen, “Secure blockchains for dynamic spectrum
access: A decentralized database in moving cognitive radio networks en-
hances security and user access,” IEEE Vehicular Technology Magazine,
vol. 13, no. 1, pp. 32–39, 2018.

[20] S. Zheng, T. Han, Y. Jiang, and X. Ge, “Smart contract-based spec-
trum sharing transactions for multi-operators wireless communication
networks,” IEEE Access, vol. 8, pp. 88 547–88 557, 2020.

0102030405060708090100Number of Interactions00.10.20.30.40.50.60.70.80.91Trust valueExisting model50% On-Off Attack20% On-Off Attack10% On-Off AttackUnintentionally Wrong0102030405060708090100Number of interactions00.10.20.30.40.50.60.70.80.91Trust valueProposed model50% On-Off Attack20% On-Off Attack10% On-Off AttackUnintentionally Wrong15

[21] X. Fan and Y. Huo, “Blockchain based dynamic spectrum access of non-
real-time data in cyber-physical-social systems,” IEEE Access, vol. 8, pp.
64 486–64 498, 2020.

[22] H. Zhang, S. Leng, and H. Chai, “A blockchain enhanced dynamic
spectrum sharing model based on proof-of-strategy,” in ICC 2020 - 2020
IEEE International Conference on Communications (ICC), 2020, pp. 1–
6.

[23] X. Ling, J. Wang, T. Bouchoucha, B. C. Levy, and Z. Ding, “Blockchain
radio access network (b-ran): Towards decentralized secure radio access
paradigm,” IEEE Access, vol. 7, pp. 9714–9723, 2019.

[24] M. A. A. Careem and A. Dutta, “Sensechain: Blockchain based reputa-
tion system for distributed spectrum enforcement,” in 2019 IEEE Inter-
national Symposium on Dynamic Spectrum Access Networks (DySPAN),
2019, pp. 1–10.

[25] A. Vosoughi, J. R. Cavallaro, and A. Marshall, “Trust-aware consensus-
inspired distributed cooperative spectrum sensing for cognitive radio ad
hoc networks,” IEEE Transactions on Cognitive Communications and
Networking, vol. 2, no. 1, pp. 24–37, 2016.

[26] Vitalik Buterin, Thoughts on UTXOs, 2016, http://timmurphy.org/2009/

07/22/line-spacing-in-latex-documents/.

[27] G. Wood, “Ethereum: A secure decentralised generalised transaction

ledger,” pp. 1–32, 2014.

[28] X. Kang and Y. Wu, “A trust-based pollution attack prevention scheme
in peer-to-peer streaming networks,” Computer Networks, vol. 72,
pp. 62 – 73, 2014. [Online]. Available: http://www.sciencedirect.com/
science/article/pii/S1389128614002667

[29] D. Boneh, B. Bünz, and B. Fisch, “Batching techniques for accumu-
lators with applications to iops and stateless blockchains,” in Annual
International Cryptology Conference. Springer, 2019, pp. 561–586.

[30] G. Ateniese, B. Magri, D. Venturi, and E. Andrade, “Redactable
blockchain – or – rewriting history in bitcoin and friends,” in 2017
IEEE European Symposium on Security and Privacy (EuroS P), 2017,
pp. 111–126.

[31] S. Li, H. Zhu, Z. Gao, X. Guan, Kai Xing, and X. Shen, “Location
privacy preservation in collaborative spectrum sensing,” in 2012 Pro-
ceedings IEEE INFOCOM, 2012, pp. 729–737.

[32] P. Rogaway and T. Shrimpton, “Cryptographic hash-function basics:
Deﬁnitions,
implications, and separations for preimage resistance,
second-preimage resistance, and collision resistance,” in Fast Software
Encryption, B. Roy and W. Meier, Eds. Berlin, Heidelberg: Springer
Berlin Heidelberg, 2004, pp. 371–388.

[33] Solidity webpage, https://docs.soliditylang.org/en/v0.7.5/.
[34] Y.-C. Liang, Blockchain

Spectrum Management.
for Dynamic
Singapore: Springer Singapore, 2020, pp. 121–146. [Online]. Available:
https://doi.org/10.1007/978-981-15-0776-2_5

[35] Remix-Ethereum IDE, https://remix-ide.readthedocs.io/en/latest/.
[36] X. Kang, Y.-C. Liang, H. K. Garg, and L. Zhang, “Sensing-based
spectrum sharing in cognitive radio networks,” IEEE Transactions on
Vehicular Technology, vol. 58, no. 8, pp. 4649–4654, 2009.

[37] D. Johnson, A. Menezes, and S. Vanstone, “The elliptic curve digital
signature algorithm (ecdsa),” Int. J. Inf. Sec., vol. 1, pp. 36–63, 08 2001.

