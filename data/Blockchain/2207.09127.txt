Received: Added at production

Revised: Added at production

Accepted: Added at production

DOI: xxx/xxxx

ARTICLE TYPE

Smart Contract Assisted Blockchain based PKI System

Amrutanshu Panigrahi*1 | Ajit Kumar Nayak2 | Rourab Paul3

1Department of CSE, Siksha O Anusandhan
(Deemed to be University), Odisha, India
2Department of CS& IT, Siksha O
Anusandhan (Deemed to be University),
Odisha, India
3Department of CSE, Siksha O Anusandhan
(Deemed to be University), Odisha, India

Correspondence
*Amrutanshu Panigrahi Email:
amrutansup89@gmail.com

Present Address
Siksha O Anusandhan (Deemed to be
University)

2
2
0
2

l
u
J

9
1

]

R
C
.
s
c
[

1
v
7
2
1
9
0
.
7
0
2
2
:
v
i
X
r
a

Summary

Public Key Infrastructure (PKI) is a reliable solution for Internet communication.
PKI ﬁnds applications in secure email, virtual private network (VPN), e-commerce,

e-governance, etc. It provides a secure mechanism to authenticate users and com-
munications. The conventional PKI system is centralized, which exposes the infras-

tructure to many security issues. The digital certiﬁcate generation and validation
processes in PKI suﬀer from high latency and inadequate authentication processes.

Moreover, it needs enormous time and eﬀort to mitigate the malfeasance of the

Certiﬁcate Authority (CA). The complexity of employing the traditional key and
certiﬁcate management increases by enforcing the centralized 𝐶𝐴, which can com-
promise the transaction security. To overcome the aforementioned issues of PKI,
three diﬀerent solutions have been reported in the literature: Log based PKI (LBPKI),

Web of Trust (WoT), and blockchain based PKI. The blockchain based PKI achieves
more attention as it is the combination of LBPKI and WoT, which serves distributed

trust, log of transactions, and constant sized data to verify the identity of users. Moti-
vated by these facts, this article reports a blockchain-based PKI system which has a

lighter smart contract and less storage capacity and is also suitable for lightweight
applications. The lighter smart contract in our infrastructure uses a 𝑡ℎ𝑟𝑒𝑠ℎ𝑜𝑙𝑑 𝑣𝑎𝑙𝑢𝑒,
which validates the limit of one participating node for becoming the 𝐶𝐴 of any
transaction inside the network. This approach can prevent distributed denial of ser-

vice (DDoS) attacks. This smart contract also checks the signer node address. The
proposed smart contract can prevent seven cyber attacks, such as Denial of Service

(DoS), Man in the Middle Attack (MITM), Distributed Denial of Service (DDoS),

51%, Injection attacks, Routing Attack, and Eclipse attack. The Delegated Proof of
Stake (DPoS) consensus algorithm used in this model reduces the number of val-

idators for each transaction which makes it suitable for lightweight applications.
The timing complexity of key/certiﬁcate validation and signature/certiﬁcate revoca-

tion processes do not depend on the number of transactions. The comparisons of
various timing parameters with existing solutions show that the proposed PKI is

competitively better.

KEYWORDS:
PKI, WoT, LBPKI, Smart Contract, Blockchain based PKI

 
 
 
 
 
 
2

1

INTRODUCTION

Amrutanshu Panigrahi ET AL

PKI is the primary building block of client-server communication over the internet. PKI deﬁnes a set of rules and protocols for
the crypto algorithms: encryption, decryption, digital signature, and digital certiﬁcate veriﬁcation process, which are used in
secure communication. For server identity authentication, traditional PKI uses a digital certiﬁcate which is issued by a trusted
third party named as Certiﬁcate Authority (𝐶𝐴). This certiﬁcate is a data package to identify the identity of the server. The
digital certiﬁcate is associated with the public key, and it is protected by asymmetric key cryptography. The 𝐶𝐴 has three
primary responsibilities (i) issuing, (ii) revoking (iii) distributing digital certiﬁcates. Therefore, it is the most crucial component
of PKI. The digital certiﬁcate standard, ITU-T X.509 1 coheres to the public key with the DNS record. The X.509 standard
certiﬁcate provides a veriﬁcation method for the private and public keys used for the communication. 𝐶𝐴 is the only component
in PKI to validate a transaction. Traditional PKI system adopts a trusted third party for issuing the digital certiﬁcate for every
transaction or communication over the internet. There are various third-party 𝐶𝐴s reported in the literature, such as Comodo,
IdenTrust, DigiCert, Certum, Entrust, etc 2. The degree of the successful transaction between the client and server depends
upon the correctness of the certiﬁcate issued by 𝐶𝐴. The communications in the aforementioned PKIs rely on the third-party
centralized 𝐶𝐴s. If the 𝐶𝐴s used in Comodo, IdenTrust, DigiCert, Certum, Entrust, etc., become malicious, then the entire
communication will be compromised, and it leads to single point failure 3. Comodo is the ﬁrst 𝐶𝐴 which have suﬀered from
cyberattacks. In 2011 it had issued nine fraud digital certiﬁcates to various domains. In the same year DigiNotar has issued
around 600 fraud certiﬁcates to various organizations 4.

Despite single point failure 5, the conventional PKI system has several other drawbacks. The conventional PKI does not have

any feature to detect compromised 𝐶𝐴.

Moreover, the complexity of key generation and key validation processes reduces the performance of the conventional
PKI. Considering these threats, servers which are not able to secure their own identities satisfactorily cannot ensure that their
communications are not compromised by a deceitful certiﬁcate which may cause Man in the Middle attack (MITM) 6.

The malicious certiﬁcate issued by a compromised 𝐶𝐴 can cause severe damage to the transactions of conventional PKI.
A malevolent 𝐶𝐴 like in DigiNotar loses all of its trustworthiness, and it creates a rogue certiﬁcate, which makes the entire
network at risk 3. Therefore, the aforementioned statements brief four major concerns of conventional PKI:

• The trust of existing PKI is centralized to Certiﬁcate Authority (CA) which can cause single point failure.

• The communications governed by PKI rely on the third-party centralized CAs. The literature has reported many incidents

of malicious CAs.

• There are no ways to detect malicious CA.

• The complexity of key generation and key validation processes reduces the performance of the conventional PKI.

Pretty Good Privacy (PGP) 7 is one of the cryptographic solutions against the issues stated above. Unlike traditional 𝐶𝐴, PGP
gives the opportunity to the participating node to verify the digital certiﬁcates of other participating nodes by including their
corresponding signature. This attribute creates a trust model where every participating node becomes the veriﬁer for the other.
As stated above, the issues of conventional PKI systems are properly addressed by 3 diﬀerent approaches, such as 𝑊 𝑒𝑏 𝑜𝑓 𝑇 𝑟𝑢𝑠𝑡,
𝐿𝑜𝑔 𝑏𝑎𝑠𝑒𝑑, and 𝐵𝑙𝑜𝑐𝑘𝑐ℎ𝑎𝑖𝑛 𝑏𝑎𝑠𝑒𝑑 8.

Web of Trust (WoT) is the ﬁrst approach which addresses the centralization issue of conventional PKI. WoT allows the
network participants to choose their own trustworthy certiﬁcate provider for transactions. This feature decentralizes the whole
infrastructure. The crucial drawback of the WoT is the overhead of the new joinee. The selection process of 𝐶𝐴 in WoT network
is very complicated, which makes it inappropriate for conventional applications. At each successful transaction, the 𝐶𝐴 increases
its trust counter value. Thereafter, for the next transaction, the node chooses a validator which has the highest counter value.
The counter value of a new joinee in WoT network is zero. Therefore, the new joinee will never be selected as a validator of any
transaction. This issue makes WoT unrealistic for PKI applications 9.

Public log used in Log Based PKI is one of the solutions which can monitor activities of the 𝐶𝐴. The log server will be visible
to the entire network. Any illegitimate digital certiﬁcate can be identiﬁed by this network, and the corresponding 𝐶𝐴 will be
suspended due to its malicious activity 9. The public log server used in Log Based PKI is always prone to single point failure
issue, which is the main disadvantage of this infrastructure 10. The literature also provides many blockchain based PKIs, which
are discussed in Sec. 1.1 and Sec. 1.2.

Amrutanshu Panigrahi ET AL

1.1

Related Work

3

In the current section, several PKI solutions are discussed. The discussion includes a PKIs without blockchain technology in
Sec. 1.1.1 and blockchain-based PKI solutions in Sec. 1.1.2.

PKI without Blockchain 14 15 16 17 18 19

1.1.1
This section discusses about existing PKIs frameworks which have not used blockchain.This type of PKI is further categorized
into two groups: log based PKI (LBPKI) ( A) and WoT based PKI (B).

A LBPKI: Certiﬁcate Transparency (CT) in articles 14 maintains a public log of all issued certiﬁcates which strives to alleviate
the problem of incorrectly issued certiﬁcates. The public logs are auditable. Therefore, it is easier for any nodes to check dif-
ferent activities like new certiﬁcates generation and certiﬁcate deletion. The public logs do not eliminate the risk of certiﬁcate
misuse. It does not guarantee that the user is able to notice certiﬁcate misuse when it occurs.
Proposed Accountable Key Infrastructure (AKI) 15 is used to defend domains and clients from ﬂaws induced by single points
of failure. The check and balance method in AKI distributes the trust properly among multiple parties including 𝐶𝐴s and
domains. Even if the domain key is lost or breached, the AKI executes routine certiﬁcation processes eﬀectively and grace-
fully. It was presented as a solution for a public-key validation infrastructure. It selects a set of trusted nodes for validating
the entire transactions in the network which decreases the dependency on any one node. Attack Resilient Public-Key Infras-
tructure (ARPKI) 16 makes all of the certiﬁcated-related computations such as (i)certiﬁcate issue, (ii)update, (iii)revocation,
and (iv)validation processes transparent. ARPKI starts working with 2 diﬀerent parts. The ﬁrst part contains two diﬀerent
CAs and the second part contains one Integrated Log Server (ILS) for performing any operations. It ensures that the security
will be preserved, even if the 𝑛 − 1 nodes are compromised out of all 𝑛 number nodes.
Policert 17 is a broad log-based and domain-oriented architecture which uses a more secure authentication process for securing
the domain’s public keys and an extensive certiﬁcate management method for validating the transaction.

B WoT based PKI : LOCALPKI 18 was developed for the Internet of Things applications. In this PKI a local authority binds
the public key with the user identity and the certiﬁcate is issued by a third-party node or local authority. A third-party entity
is used in LOCALPKI to record this binding information and to provide registration updates.
The Notary-based PKI (NBPKI) 19 approach creates a group of trustworthy individuals known as Notarial Authorities (NA).
The NA conﬁrms the reliability of a certiﬁcate for validating a certain signature at a speciﬁed time. The end users depend on
NA’s public keys and self-signed certiﬁcates for producing and validating signatures. The working principle of NBPKI relies
on three diﬀerent components (i)end-user, (ii)Registration Authority (RA), and the Notarial Authority (NA). The end-user
needs to register with RA for signing their transactions. The RA veriﬁes the end-user identity and informs the associated NA.
The NA decides the status of the trustworthiness of the end-user based on the information provided by the RA.

Bloockchain based PKI 20 21 22 23 24 25 26 27 28 29 30 31

1.1.2
This paper primarily addresses 8 attributes to compare diﬀerent PKI system such as feature, type of blockchain network,
blockchain platform, certiﬁcate, trust model, oﬀ-chain storage, on-chain and time complexity. Table 1 shows the detailed study
of diﬀerent blockchain based PKI systems.

• Key Feature: It shows the basic characteristic such as smart contract, CA, public ledge, etc. The blockchain based PKI

is developed based on these key features.

• Blockchain type: The adopted blockchain network can be either of permissioned or permissionless blockchain. In a
permissioned network, the new node can only join when it gets permission from every participating node present in the
network whereas, in the permissionless network, new nodes do not require permissions from other nodes exist in the
network. Instead of that, it takes permission either from one trusted node or from anyone randomly chosen node.

• Blockchain Platform: It shows the platform on which the PKI is implemented. The platform can be on the shelf platform
such as Ethereum or a self-developed custom platform. The shelf platforms are publicly available and it needs to be
downloaded from a trusted source and conﬁgured as per the requirement.

• Certiﬁcate: It shows the type of certiﬁcate used during the PKI development. It can be a X.509 standard or a custom one.

4

Amrutanshu Panigrahi ET AL

• Trust Model: It represents the mechanism for selecting the 𝐶𝐴 for validating a transaction. One node can choose a

trustworthy node or a random node who solves the NONCE ﬁrst.

• Consensus Model: It shows the adopted consensus model during the PKI development.

• Storage: The blockchain data can be stored in two forms such as the entire copy of the data will be stored, or the hash
function of the block will be stored. There are two categories present for blockchain data storage named as on-chain storage
and oﬀ-chain storage. On-chain storage allows the node to store the data directly on the blockchain network. Whereas the
oﬀ-chain storage allows storing the data in a public ledger that is accessible by all other nodes or in a private storage from
which that particular node can access it.

• Time Complexity: This shows the algorithmic computational complexity in terms of time. It has been taken in big O
format as for every PKI all of the deﬁned methods needed to be executed for a successful transaction. So the worst time
complexity has been considered for diﬀerent available blockchain PKI.

1.2

Problem Statement and Motivation

The trust of the traditional PKI systems completely depends on third-party 𝐶𝐴s. The 𝐶𝐴 checks the bindings between public
keys and entities and then provides digital certiﬁcates to those entities. A digital certiﬁcate assures that a 𝐶𝐴 conﬁrms the binding
process 32. There are a very limited number of 𝐶𝐴s which are trusted by the modern browser and OS manufacturers. Therefore,
this CA-based PKI architecture is considered a centralized infrastructure. The present CA-based PKI architecture, such as CT 14,
AKI 15, and ARPKI 16 have adopted many methods to reduce the dependence on the conﬁdence of 𝐶𝐴. The primary concern in
adopting those PKIs is to avoid the centralization issue of the infrastructure.

Blockchain Based PKIs such as PA-PKI 20, Block CAM 21, PB-PKI 24 etc. provide an emerging alternative for conventional
PKI system which adopts diﬀerent features of Log based and WoT approaches. Blockchain based PKI provides an environment
for decentralized authentication and validation of transactions in the network 11. The adoption of diﬀerent 𝐶𝐴s for diﬀerent
transactions in Blockchain based decentralized PKIs eliminates many issues caused by legacy PKIs. The use of diﬀerent 𝐶𝐴s
for diﬀerent transactions increases the fault tolerance capacity of the network and one malicious 𝐶𝐴 can not sabotage the entire
chain. The distributed log in blockchain-based PKI provides a certiﬁcate transparency feature which is similar to the certiﬁcate
transparency (CT) characteristic provided by Google which helps to improve the security of PKIs. The CT allows logging and
observing the scope of digital certiﬁcates. The examples of blockchain based PKI systems are Namecoin and Emercoin 12. The
Namecoin and Emercoin need enormous storage for the entire blockchain information for validation purposes and they also need
to store the entire blockchain copy at the user end. These storage issues have made these blockchain based PKI impractical for
real life applications. The smart contract-based PKI simply dissociates the storage from the validation process where one node
does need not to store the entire blockchain copy for validating a transaction 13. The major lacunas of existing blockchain based
PKIs are :

• All the participants in existing blockchain based PKI do not get a fair chance to become 𝐶𝐴.

• This complexity of the consensus algorithm in blockchain based PKI makes it ineﬃcient specially for the lightweight

application.

• Most of the blockchain based PKIs have concentrated on Denial of Service (DoS) and Man in the Middle Attack (MITM).
They have not addressed Distributed Denial of Service (DDoS), 51% attack, Injection attacks, Routing Attack and Eclipse
attack.

1.3

Contribution

The proposed smart contract-based PKI addresses the challenges of existing blockchain based PKIs. The contribution of the
research article is summarized as follows.

• The proposed smart contract of Blockchain based PKI can prevent DoS, DDoS, MITM, 51%, Injection, Routing, and
Eclipse attacks. The proposed smart checks the validity of the signer node address and it also imposes a threshold value
for becoming 𝐶𝐴 which gives a fair chance to all the participants to become 𝐶𝐴.

Amrutanshu Panigrahi ET AL

5

TABLE 1 Comparative study of existing blockchain based PKI systems based on the deﬁned features

PKI

Key Feature

Certiﬁcate Trust

Model

Blockchain
Type

Block-
chain
Plat-
form
Permissioned Ethereum Custom

Consensus
Model

Oﬀ-
chain
Storage

Time
Complex-
ity

On-
chain
Stor-
age
Hash 𝑂(𝑛)

WoT

PBFT

Private

Identiﬁcation
veri-
and
ﬁcation
of
CA
𝐶𝐴 in cross
domain veri-
ﬁcation
Authentication Permission

Consortium
and Permis-
sioned

PA-PKI 20

Block-
CAM 21

BC-
TRUST 22

BLOCK-
PGP 23

PB-PKI 24

TTA-SC 25

CERT-
CHAIN 26

CERT-
LEDGER 27

DB-PKI 28

IKP 29

FLY-
CLIENT 30

BLOCK-
QUICK 31

process
identi-
the

Access Con-
trol of Cer-
tiﬁcate Revo-
cation
Public
Ledger
Automating
the
of
fying
miscon-
ﬁgured
𝐶𝐴
𝐶𝐴
Trust-
worthy
by
using Dual
Counting
Bloom Filter
(DCBF)
Certiﬁcate
Trans-
parency
𝐶𝐴

light

𝐶𝐴 trustwor-
thy
Transaction
Veriﬁcation
for
client
Transaction
Veriﬁcation
for
client

light

Ethereum X.509 v3

Hierar chi-
cal

NA

Ethereum Custom

WoT

NA

Less

Permissioned Ethereum X.509

WoT

PoW

Permission
Less
Permission
Less

Custom Custom

WoT

NA

Ethereum X.509

Hierarchical NA

Public
Data

Public
Data

Public
Data

Private
Data
Public
Data

Hash
+
Data
Hash
+
Data
NA

𝑂(𝑛3)

–

–

Hash

O(n)

𝑂(𝑛)

Hash
+
Data

Permission
Less

Custom X.509

Hierar-
chical

Hash 𝑂(𝑛2𝑙𝑜𝑔(𝑛))

Public
Data

Dependa-
bility
rank
based

Permission
Less

Ethereum X.509

Hierarchical PBFT

Custom Custom

Permission
Less
Permission
Less
Permissioned Ethereum Custom

Ethereum X.509

WoT

PBFT

Hierarchical NA

Hierarchical PoS

Public

Public
Data

Public
Data
Public

Hash 𝑂(𝑙𝑜𝑔(𝑛))

Hash 𝑂(𝑛2)

Hash
+Data
NA

𝑂(𝑛𝑙𝑜𝑔(𝑛))

𝑂(𝑙𝑜𝑔𝑛)

Permission
Less

Ethereum Custom

WoT

PoPoW

Public

NA

𝑂(𝑛)

• This paper adopted Delegated Proof of Stake (DPoS) consensus algorithm which reduces the number of validators of each

transaction. Therefore it reduces the timing complexity which makes it suitable for lightweight applications.

• The proposed PKI system is evaluated based on the two matrices. (i)lapse time of key generation and key validation
process and (ii) gas cost of the transaction. The result shows the time complexity of the proposed blockchain based PKI
system is eﬃcient compared to existing literature.

6

1.4

Structure

Amrutanshu Panigrahi ET AL

The rest of the paper is structured in the following manner. Section 2 focuses on the background study for the current work. The
proposed blockchain based PKI system based on the smart contract is presented in Sec. 3. The working principle of the proposed
PKI system is elaborated in Sec. 4. The proposed model is evaluated based on the gas cost and latency for key generation and
validation in Sec. 5. Finally, Sec. 6 represents the conclusion and the future scope of the research work.

2

PRELIMINARIES

Various preliminary elements like the notion of blockchain, smart contracts, and the fundamental concept of PKI are reported
in this section.

2.1

Blockchain

In 2008, a whitepaper 34 was released under the pseudonym of "Satoshi Nakamoto" who is considered as the pioneer of the
idea of blockchain. Along with the popularity of Bitcoin, blockchain has sparked a lot of interest in academic research and
practical applications. The information stored in the immutable ledger of the blockchain can be read by any node inside the
network. It combines technologies such as consensus algorithm, smart contract, peer-to-peer (P2P), and encryption to create a
new distributed computing paradigm 35.

Decentralization, immutability, and transparency features of blockchain overcome many problems like high cost, poor
eﬃciency, and single point of failure 36. Blockchain 1.0, reported by Bitcoin, was created only for the decentralization of cryp-
tocurrency. Since then, many ﬂaws have been addressed in the literature. Non-Turing completeness is an issue, which limits
the blockchain’s use in many other ﬁelds. Blockchain 2.0 is mostly represented by Ethereum which introduced a smart contract
feature. Smart contracts are based on distributed architecture and consensus methods, which allow transactions among users
without mutual trust. As a result, smart contracts based blockchain has a lot of potential 37 in existing applications.

2.2

Smart Contract

Externally Owned Addresses (EOA) and smart contract accounts are the two forms of Ethereum accounts. Users own EOA,
which includes private key-public key pairs. A smart contract is a program that does not have any key pair and it checks all
contract criteria 38 required for that speciﬁc application. It includes one or more trigger conditions, such as a speciﬁed time or
occurrence, and the related reactions, such as a speciﬁc transaction or activity 39. Once it is signed by all parties, the contract
is linked to the blockchain data. These contracts are propagated across the P2P network, conﬁrmed by all nodes, and ﬁnally
deposited in a particular block of the blockchain. Users who know the address of the contract, interface, and other certain details
call the smart contract while transactions are started 40. The miner runs the contract code in the local sandbox environment
after getting a call message about the transaction. If the given contract criteria are matched, then all the deﬁned operations for
that transaction will be executed 41. Once the transaction is validated, it is authenticated and inserted into a new block using a
consensus procedure. The blockchain also stores the transaction and the modiﬁed state along with the status of the participants 42.

2.3

Ethereum

Ethereum is an open-source platform where the smart contract is the key functionality. It provides a virtual environment where
multiple live nodes are deployed to create a blockchain network. Smart contracts are written in Turing complete language known
as Solidity which is executed in the Ethereum virtual machine 43. The smart contract code is publicly available to all participating
nodes present in the blockchain network. In the current research work, multiple nodes are deployed with some initial cost and
gas using GETH. For every transaction, the node needs to share some gas (𝐺) and each gas has some price (𝑃 ). So, the total
cost (𝐶) in terms of ether (ETH) can be expressed as equation1.

𝐶 = 𝐺 × 𝑃

(1)

Amrutanshu Panigrahi ET AL

2.4

PKI

7

Certiﬁcate authority (CA), registration authority (RA), certiﬁcate revocation list (CRL), central directory (CD), lightweight
directory access protocol (LDAP), and online certiﬁcate status protocol (OCSP) are all components of a typical PKI system 44.

• CA: In the PKI system, 𝐶𝐴 is a trusted central party. It is in charge of disseminating public keys and issuing certiﬁcates
using the CA’s private key to validate the transaction. The certiﬁcates are kept in a repository for future searches and
veriﬁcation. Normally, 𝐶𝐴 trust is organized in a chain/tree structure with multiple levels. Root 𝐶𝐴 (RCA), intermediate
𝐶𝐴 (ICA), and signing 𝐶𝐴 (SCA) are all included from top to bottom. The RCA is in dominating position, which may
be self-certiﬁed. Certiﬁcates for other sub-CAs may be issued by root CAs.

• RA: The registration of users is the responsibility of RA. When a user requests a certiﬁcate, RA must verify the information
that the user has submitted. In compact PKI systems, the RA and 𝐶𝐴 may be the same entity, or a RA might be an ICA
or SCA. In large PKI systems, the 𝐶𝐴 may also select additional trustworthy parties as RAs.

• CRL: All revoked certiﬁcates signed by the 𝐶𝐴 are stored in the CRL. In addition, the user must additionally search the

CRL to determine the status of a certiﬁcate for the validation process.

• CD: It is a trustworthy server that is used to store the issued certiﬁcate in contrast to the corresponding key.

• LDAP: It is a protocol that allows users to quickly access a certiﬁcate storage repository which may be CD or CRL.

• OCSP: It is a protocol that becomes active when a user request to check the status of a certiﬁcate for validation from CRL.

3

PROPOSED WORK

The proposed smart contract based PKI system is implemented in the open-source Ethereum platform known as the Go Ethereum
or GETH. The main building blocks of the proposed PKI system are smart contract and Ethereum. Ethereum is used as the
platform where the smart contract is the core part of the work.

3.1 Model Description

The proposed PKI system contains three basic modules such as Participant, Smart Contract, Signature, and Revocation. The
participant module contains the method to add the attributes of a participating node when it is new to the network. The signature
module enables the nodes to sign and validate the keypair. The revocation module allows the node to revoke its own signature
so that the corresponding node can resign another transaction.

(A) New Participant: The input of this module is the status of the node. If the node is found as a new node of the network, then
the 3 attributes: 𝑃 𝐼𝐷, 𝐸𝑇 𝐻 𝑎𝑑𝑑𝑟𝑒𝑠𝑠 and 𝐾𝑒𝑦𝑝𝑎𝑖𝑟 will be set to the status of the new node to participate in the transactions
of the network. If a node already exists in the network, the participant module invokes the aforementioned attributes to
participate in the transaction. The pseudo-code for this module is presented in algorithm 1. The attributes of the participant
module are stated below:

• PID:It is a unique random number that can be used to identify a particular node in the network.

• ETH address: It is an address provided by the Ethereum blockchain environment which is required during transactions.

• Keypair: The private and public key pairs will be generated and assigned to a particular node.

As the current research considers a lighter smart contact, only the PID of that corresponding node is stored after deployment.

(B) Smart Contract: The inputs to this module are the 𝑃 𝐼𝐷, 𝑅𝐼𝐷 and 𝐸𝑇 𝐻𝑎𝑑𝑟𝑒𝑠𝑠. The 𝑃 𝐼𝐷 and the 𝐸𝑇 𝐻𝑎𝑑𝑑𝑟𝑒𝑠𝑠 of the
chosen signer node are compared with the stored 𝑃 𝐼𝐷 and 𝐸𝑇 𝐻𝑎𝑑𝑑𝑟𝑒𝑠𝑠. If both of the addresses are matched then the
𝑅𝐼𝐷 of the signer node will be compared with the deﬁned threshold for that node. The transaction will be allowed only
after the successful execution of the above said conditions. The detail pseudocode is reﬂected in algorithm 2.

8

Amrutanshu Panigrahi ET AL

(C) Signature Validation:This module allows the nodes to sign the transactions of the other nodes. When the node is elected as
the signer node, this method will be called with two attributes such as the PID and Expiry. The steps are shown in algorithm
3.

• PID:It is the unique number assigned by the Participant method which provides the unique identity.

• Expiry: After the validation process the node needs to increase the predeﬁned counter by one to ensure that all of the
participant nodes present in the network will get an equal chance to become the transaction lead. This counter value
is the maximum number for which one node can be elected as the transaction lead. In the current research work, it is
deﬁned in the smart contract to avoid the DDoS attack.

(D) Revocation: It is called by the leader node after every transaction. It contains the counter described in the signature module.
The node increases the counter by one after every successful transaction. If the counter exceeds the maximum limit deﬁned
in the light version of the smart contract, the election process is rejected and the process is reinitiated. Revoke ID or 𝑅𝐼𝐷
and Signer ID are two attributes present in this module. The pseudo-code for this module is represented in algorithm 4

• RID:It is a counter which is increased by the leader node after the successful completion of the transaction.

• Signer ID: It is the id of the node which is going to validate the transaction.

For certiﬁcate revocation and key pair updating process, the participating node needs to broadcast its public key inside the
network in the form of a transaction. All the nodes in the network store the data to maintain the distributed trust, therefore, the
content of the mined block can only be changed when the maximum number of the participating node agree on the changed
value.

Algorithm 1 New Participant

BEGIN TRANSACTION
REQUIRE: Set of Nodes N=[𝑁1,𝑁1,𝑁1,...........,𝑁𝑛]
PROC PARTICIPANT()
get 𝑁𝑖.status
if (𝑁𝑖.status==FALSE) then

set PID
set (PRkey, PBkey)
set PID.getETHAddress()
set PID.Limit

else

Node 𝑁𝑖 is present in the Ethereum private network

end if
run CONTRACT()

3.2

Block structure

[H] Each block has 2 components: block header and list of transactions. Block header has 3 ﬁelds: (i) Block root hash, (ii) Hash
of the previous transaction, and (iii) Markel Patricia Tree (MPT). Figure 1 represents the structure of block where 𝑛 is the number
of transactions. Here 𝑇1 to 𝑇𝑛−1 are previous validated transactions and 𝑇𝑛 denotes the current transaction. 𝐻𝑖 denotes the hash
value of 𝑇𝑖 where 𝑖 varies from 1 to 𝑛. The number of transactions stored in a single block may vary with diﬀerent blockchain
platforms. The size of blocks on certain blockchains, such as Bitcoin, is limited. The ’genesis block’, or the ﬁrst block on the
blockchain, is noteworthy. It has no hash that refers to a parent block, and it does not allow any mining process. Blocks are
issued at ﬁxed intervals. In current Ethereum blockchain new blocks can be released at every 15 seconds interval. The merkel
𝐻𝑛 ) and (iii) Root
tree has three type of nodes: (i) Leaf Nodes (𝐻1, 𝐻2, 𝐻3, ... 𝐻𝑛) (ii)Intermediate Nodes (𝐻1

𝐻2,...𝐻𝑛−1

||

||

Amrutanshu Panigrahi ET AL

Algorithm 2 Smart Contract

TRANSACTION PROCESSED
REQUIRE: 𝑁𝑖.RID,𝑁𝑖.PID,𝑁𝑖.ETHAddress
get Signer.PID
get Signer.RID
get Signer.ETHAddress
if (Signer.PID==𝑁𝑖.PID 𝑎𝑛𝑑 (Signer.ETHAddress==𝑁𝑖.ETHAddress) then

if (𝑁𝑖.RID ≤ 𝑁𝑖.limit) then
PROC SIGNATURE

else

Maximum Trial is over for the elected signernode. Please select another node

9

end if

end if

Algorithm 3 Signature Validation

TRANSACTION PROCESSED
REQUIRE: 𝑁𝑖.PID, 𝑁𝑖.ETHAdress
PROC SIGNATURE ()
get Signer.PID
get Singer.ETHAdress
validate(TRANSCATION)
PROC REVOKE()

Algorithm 4 Signature Revocation

TRANSACTION PROCESSED
REQUIRE: 𝑁𝑖.RID
if (TRANSACTION==TRUE) then

RID ++

else

Transaction is rejected

end if

Nodes (𝐻1
(𝐼𝑖), and root node (R) of the MPT are deﬁned as in equations 2,3 and 4 respectively.

𝐻𝑛). These hashes are also used as the node’s reference key. The leaf node (𝐿𝑖), intermediate node

𝐻𝑛−1

𝐻2

...

||

||

||

||

𝐿𝑖 = 𝐻𝑖 = ℎ𝑎𝑠ℎ(𝑥𝑖), {𝑖𝜖1, 2, 3, 4, ...., 𝑚}

𝐼𝑖 = {𝐻𝑖 ∥ 𝐻𝑖+1}

𝑅 = {𝐻𝑖 ∥ 𝐻𝑖+1... ∥ 𝐻𝑁 , 𝑁 = 𝐷𝑒𝑝𝑡ℎ𝑜𝑓 𝑀𝑃 𝑇 }

(2)

(3)

(4)

3.3

Delegated Proof of Stake Consensus Mechanism

The Delegated Proof of Stake (DPoS) 45 consensus algorithm is a variance of the PoS mechanism which improves scalabil-
ity and eﬃciency by lowering and limiting the number of validators on the network. It was designed to address the issue
𝑠𝑐𝑎𝑙𝑎𝑏𝑖𝑙𝑖𝑡𝑦 𝑡𝑟𝑖𝑙𝑒𝑚𝑚𝑎 45. In blockchain terminology, the more number of transactions per unit time refers to more scalability. As
per the blockchain trilemma, more scalability may cause more challenges for security and decentralization features. In DPoS,
token holders do not work on the validity of the blocks directly; instead, they choose delegates to validate transactions on their

10

Amrutanshu Panigrahi ET AL

Block Header

Block root hash

Hash of (n-1)th block 

Merkel Patricia Tree

List of Transaction

T1

T2

Tn-1

Tn

H1 || H2 ||.........||Hn-1

H1 || H2

Hn-1 || Hn

H1

T1

H2

T2

Hn-1

Tn-1

Hn

Tn

FIGURE 1 Block structure of the proposed PKI

behalf. There are typically 21–100 designated delegates in a DPoS system. The chosen delegates are rotated regularly and the
nodes order the delegates to present their blocks. When there are fewer delegates, it is easier to allocate one validator and time
slot for each transaction. If the delegates consistently miss to validate transactions or blocks, it will cause erroneous transactions.
As a result, the token holders vote them out and replace them with another delegate chosen by the token holders.

4 WORKING PRINCIPLE

Once it receives the transaction request, the participant module starts its execution to check the status of the node. If the node
is found as a new node, the required parameters such as the 𝑃 𝐼𝐷, 𝐸𝑇 𝐻 𝐴𝑑𝑑𝑟𝑒𝑠𝑠, 𝑘𝑒𝑦𝑝𝑎𝑖𝑟, and a threshold value for 𝑅𝐼𝐷
will be speciﬁed for the node. This 𝑅𝐼𝐷 is incremented by one in each revocation call and once it reaches to the threshold the
𝑃 𝐼𝐷, 𝐸𝑇 𝐻 𝐴𝑑𝑑𝑟𝑒𝑠𝑠 and 𝑘𝑒𝑦𝑝𝑎𝑖𝑟 of the node will be reset. The 𝑃 𝐼𝐷 and 𝐸𝑇 𝐻 𝐴𝑑𝑑𝑟𝑒𝑠𝑠 identify a particular node at any
time uniquely.

After the successful execution of the participant module, the smart contract is invoked. Thereafter the 𝑃 𝐼𝐷 of the selected
signer node is compared with the stored 𝑃 𝐼𝐷. If both 𝑃 𝐼𝐷s are matched further execution will be allowed otherwise the process
will be aborted. Then the 𝑅𝐼𝐷 counter will be compared with its threshold limit. If the 𝑅𝐼𝐷 exceeds the given threshold, the
transaction will be aborted immediately otherwise, the signature module will be invoked. The adoption of the smart contract in
our methodology helps the network to deal with the DDoS and MITM attacks by verifying the node id and checking the limit
respectively.

The signature module allows the selected signer node to validate the transaction by verifying the public key. The Signature

module allows that particular node to validate the transaction which completes the smart contract veriﬁcation phase.

After every successful transaction, the signature revocation module is invoked where the signer node increments its 𝑅𝐼𝐷

value by 1 and validates the transaction. Figure 2 represents the workﬂow of the proposed work.

5

IMPLEMENTATION & COMPARISON

The proposed work can be evaluated by its performance and comparison with existing literature.

5.1

Implementation

The proposed work is implemented in the open-source Ethereum virtual machine 𝐺𝐸𝑇 𝐻. To invoke the smart contract, the
𝑆𝑜𝑙𝑖𝑑𝑖𝑡𝑦 𝑣0.4.24 scripting language is used along with the 𝐺𝐴𝑁𝐴𝐶𝐻𝐸 𝑡𝑟𝑢𝑓 𝑓 𝑙𝑒 suit. The 𝑡𝑟𝑢𝑓 𝑓 𝑙𝑒 suit deploys the developed
smart contract in the blockchain environment. Initially, the Gas limit of the network is set as 4000000 and all created nodes
have 100𝐸𝑇 𝐻 in their account. The experiment is carried out with a Windows 10 OS, 8 GB RAM, 1 TB HDD, and 𝐼𝑛𝑡𝑒𝑙 𝑖5
processor with a 2.8GHz clock speed machine.

Amrutanshu Panigrahi ET AL

11

Transaction Request

1

3

New to

Network

Status of the 
Requesting 
Node ?

Set Node id
(Randint())

4

Provide GETH address

2

Already present in the network

5

Intialize Signer Node

9

Siigner Node Validation

10

Key Generation

6

Unsuccessful

Successful

7

Initialization 
Successful?

8

12

Not Matched

Smart Contract

Signer Node
Address
Matched?

11
Matched

13

No

Maximum Limit for
becoming Signer
exceeded?

14

Yes

Signature

15

Transcation Validation

16

Increament Limit
Counter by 1

17

Transaction
Successful

FIGURE 2 Workﬂow of proposed Blockchain based PKI

5.2

Performance

The performance of the proposed PKI system is evaluated using the latency and gas utilization during the transaction. Figure
3 shows the latency vs the number of nodes graph for key generation and key validation process. The proposed model is tested
with 100 nodes where latencies of key generation and key validation process reach to 60 seconds and 80 seconds respectively
which is suitable for realistic applications of PKI. Figure 4 shows gas utilization vs the number of transaction graph where the
average gas cost for each transaction is approximately 10 × 104. Table 2 shows the gas used by the diﬀerent modules of the
developed PKI system for doing one transaction.

TABLE 2 Gas usage by various modules

Method
Name
Participant
Signature
Revocation
Smart Contract

Gas Utilized

For Initialization
33781
42856
19798
194837

For Transaction
17484
13752
9689
32675

5.3

Time Complexity Evaluation

There are four executable modules present in the developed blockchain based PKI system, namely 𝑝𝑎𝑟𝑡𝑖𝑐𝑖𝑝𝑎𝑛𝑡, 𝑠𝑖𝑔𝑛𝑎𝑡𝑢𝑟𝑒,
𝑟𝑒𝑣𝑜𝑘𝑒, and 𝑠𝑚𝑎𝑟𝑡 𝑐𝑜𝑛𝑡𝑟𝑎𝑐𝑡. Among these four modules, the time complexity of 𝑝𝑎𝑟𝑡𝑖𝑐𝑖𝑝𝑎𝑛𝑡 and 𝑠𝑚𝑎𝑟𝑡 𝑐𝑜𝑛𝑡𝑟𝑎𝑐𝑡 module is 𝑂(𝑛),

12

Amrutanshu Panigrahi ET AL

Latency Plot for Key Generation vs Key Validation

Key Validation
Key Generation

c
e
S
n

i

i

e
m
T
e
s
p
a
L

90

80

70

60

50

40

30

20

10

1

10

20

40

30
70
50
Number of Participant Nodes

60

80

90

100

104

d
e
z

i
l
i
t

U
s
a
G

14

12

10

8

6

4

2

0

0

500

1000

1500

Number of Transaction

FIGURE 3 Latency vs Number of Nodes for Key generation
and Key validation Processes

FIGURE 4 Gas utilization vs Number of Diﬀerent Transactions
in The Network

whereas the time complexity of 𝑠𝑖𝑔𝑛𝑎𝑡𝑢𝑟𝑒 and 𝑟𝑒𝑣𝑜𝑘𝑒 modules are 𝑂(1). Here 𝑛 is the number of transactions committed to
the procedure in the network. Multiple transaction requests may be raised in the case of participant and smart contract module
resulting in the worst time complexity of these two modules as 𝑂(𝑛). While there is no communication in the other two modules:
𝑠𝑖𝑔𝑛𝑎𝑡𝑢𝑟𝑒 and 𝑟𝑒𝑣𝑜𝑘𝑒 and also, no acknowledgment messages are issued to the transaction initiator. The 𝑠𝑖𝑔𝑛𝑎𝑡𝑢𝑟𝑒 and 𝑟𝑒𝑣𝑜𝑘𝑒
modules allow the chosen signer node (by smart contract module) to sign the transaction and make an increment of 𝑅𝐼𝐷. So
these two procedures do not generate any transaction messages, which results in constant time complexity of 𝑂(1). Implementing
the DPoS consensus mechanism results in a run time complexity of 𝑂(𝑙𝑜𝑔𝑛). The time complexity of the whole system is
𝑂(𝑛 + 𝑙𝑜𝑔𝑛). The time complexity of the proposed model is compared with the diﬀerent exiting models in Table 3.

TABLE 3 Module wise Time Complexity Comparison with diﬀerent existing models

based

Blockchain
PKI
PA-PKI 20
CERT- CHAIN 26
CERT-LEDGER 27
DB-PKI 28
FLY-CLIENT 30
BLOCKQUICK 31
Proposed System

Key/ Certiﬁcate Gen-
eration
–
𝑂(𝑛2)
𝑂(𝑙𝑜𝑔(𝑛))
𝑂(𝑛2)
–
–
𝑂(𝑛)

Key/ Certiﬁcate Vali-
dation
𝑂(𝑛)
–
–
–
𝑂(𝑙𝑜𝑔𝑛)
𝑂(𝑛)
𝑂(1)

Signature/ Certiﬁcate
Revocation
𝑂(𝑛)
𝑂(𝑙𝑜𝑔(𝑛))
–
𝑂(𝑛2)
–
–
𝑂(1)

5.4

Critical Analysis

This work addresses various limitations of the existing PKI solutions including PKI without blockchain stated in Sec. 1.1.1 and
PKI with Blockchain stated in Sec. 1.1.2. The PKI provided in 14 only focuses on making the issued certiﬁcate visible to the
network participants but does not have any circumstances to avoid the single point of failure (SPoF) limitation. In AKI 15 the
ILS is responsible to store the certiﬁcate issued by 𝐶𝐴 and the ILS will be updated at a given time interval even 𝐶𝐴 becomes
untrusted. This becomes the key limitation along with SPoF as it is using a centralized 𝐶𝐴 to issue the certiﬁcate. ARPKI 16
tries to solve the synchronization issue of AKI but it still depends upon a trusted 𝐶𝐴 to issue the certiﬁcate. The unavailability
of the 𝐶𝐴 veriﬁcation process makes it tough to adopt ARPKI as a preferred solution. The approach in PoliCert 17 provides a
centralized way to detect the log misbehavior which is again pruned to SPoF issue. LOCALPKI 18 was created for usage in the
context of IoT, where the local authority is in charge of utilizing the public key to verify the user’s identity. The certiﬁcates issued
by the local authority are stored by a third party, which are trimmed to SPoF. In NBPKI 19 RA is in charge of authenticating the

 
 
 
 
Amrutanshu Panigrahi ET AL

13

user’s identiﬁcation, and the NA maintains the user’s status as trusted or untrusted based on the RA’s decision. The malicious
RA has the potential to compromise the system’s integrity.

The 𝑃 𝐴 − 𝑃 𝐾𝐼 in article 20 uses 𝑃 𝑟𝑎𝑐𝑡𝑖𝑐𝑎𝑙 𝐵𝑦𝑧𝑎𝑛𝑡𝑖𝑛𝑒 𝐹 𝑎𝑢𝑙𝑡 𝑇 𝑜𝑙𝑒𝑟𝑎𝑛𝑐𝑒(𝑝𝐵𝐹 𝑇 ) consensus model which allows a certain
number of faulty nodes. If the number of faulty nodes exceeds that certain limits the whole network will be reset. Moreover,
𝑝𝐵𝐹 𝑇 consensus mechanism used in 𝑃 𝐴 − 𝑃 𝐾𝐼 of article 20 and 𝐷𝐵 − 𝑃 𝐾𝐼 of article 28 is prone to the 𝑆𝑦𝑏𝑖𝑙 𝑎𝑡𝑡𝑎𝑐𝑘. The
𝐵𝑙𝑜𝑐𝑘 − 𝐶𝐴𝑀 in article 21 has used the consortium blockchain platform for developing their PKI. The major limitation of using
this platform is making the entire system semi-centralized since the consensus is managed by a certain number of participating
nodes. Thus, it deviates from the decentralization concept of blockchain. Our proposed model is completely decentralized to all
existing nodes in the network. The transactions of 𝐵𝐶𝑇 𝑅𝑈 𝑆𝑇 in 22, depend upon the degree of trustworthiness of a participating
node. Once the node is declared as the trusted one, then every node in the same network has to consider that node as the same.
Moreover, all the transactions made by that node are also considered as valid transactions which may cause integrity loss and
many other cyber threats. In our model veriﬁcation is done on every transaction where node identity already padded, it does not
verify only such node based identity. This feature makes our model more secure compared to 22. The implementation of PGP
of both server and client-side participating nodes in 𝐵𝑙𝑜𝑐𝑘𝑃 𝐺𝑃 23 causes heavy computational overhead which is the major
drawback of such PGP based infrastructure.

In the case of 𝑃 𝐵 𝑃 𝐾𝐼 24, the transactions is stopped if any anonymous node requests to join the network. When new anony-
mous node requests to join the network, the entire network is disrupted until the joining request is processed. The developed PKI
𝑇 𝑇 𝐴 𝑆𝐶 in article 25 suﬀers from the loss of control issue over the blockchain network if it loses the key pair of the lead node
under some cyber attacks. The DDoS attack to a particular lead node can make the system destabilized. The 𝐶𝐸𝑅𝑇 𝐶𝐻𝐴𝐼𝑁 in
article 26 uses 𝑑𝑒𝑝𝑒𝑛𝑑𝑎𝑏𝑖𝑙𝑖𝑡𝑦 𝑟𝑎𝑛𝑘 based consensus algorithm where the elected 𝐶𝐴 was responsible for increasing the trustwor-
thy degree. Depending upon the degree of trustworthiness the node will be elected as 𝐶𝐴. Thus, a DoS attack on the particular
𝐶𝐴 can cause damage in further transactions. It also uses the 𝑃 𝐵𝐹 𝑇 consensus algorithm which may cause a Sybil attack. In
the 𝐶𝐸𝑅𝑇 𝐿𝐸𝐷𝐺𝐸𝑅 of the article 27, the 𝐶𝐴 is responsible for publishing the revoked data after every transaction. Thus, a
DoS attack on that particular 𝐶𝐴 can disrupt the entire network. The developed PKI 𝐼𝐾𝑃 in article 29 depends on the bitcoin’s
language script which becomes hard to implement. The transaction process in 𝐼𝐾𝑃 depends on the trustworthiness of the 𝐶𝐴
and if the 𝐶𝐴 is misconﬁgured then all transactions within the network will be discarded. The 𝐹 𝐿𝑌 𝐶𝐿𝐼𝐸𝑁𝑇 of article 30 does
not use an authentication process to validate the participating node identiﬁcation. So, the developed PKI is prone to 𝑀𝐼𝑇 𝑀
attack. In 𝐵𝐿𝑂𝐶𝐾 𝑄𝑈 𝐼𝐶𝐾 of the article 31, the malicious block can only be detected by using the consensus group score. So,
for a single malicious node, the whole branch will be discarded which will reduce the eﬃciency of the network.

5.5

Attack and Defense

The primary feature of the developed blockchain based PKI is the smart contract where the conditions such as the validity and
threshold of the signer node are veriﬁed. The smart contract is solely responsible to allow the signer nodes to validate the key
pair of requested nodes otherwise the nodes will be rejected. This feature avoids the DDoS and MITM attacks for the developed
PKI. The proposed permissionless blockchain environment on the 𝐺𝐸𝑇 𝐻 platform adopts the trust model of WoT where nodes
are allowed to choose their own 𝐶𝐴. In the hierarchical trust model, the processing power required to calculate the NONCE is
high, whereas WoT does not require any NONCE calculation. The NONCE calculation can prevent MITM attacks. However,
we have avoided it intentionally in our PKI to make it lighter compared to existing literature. From the storage point of view,
only the hash value of each node is considered for the on-chain storage and the entire data is considered for the oﬀ-chain storage.
Diﬀerent attacks addressed in the current blockchain based PKI are reﬂected in Table 4. Table 5reﬂects the various attack
resistance comparison of the proposed model in contrast to other existing blockchain PKI models.

6

CONCLUSION

The proposed research work identiﬁes several issues of conventional PKI and blockchain based PKI. In this regard, this work
proposes a blockchain based PKI which is assisted by a smart contract and DPoS consensus algorithm. This work explores dif-
ferent existing solutions such as log based PKI, web of trust (WoT), and the blockchain based PKI system to deal with the various
limitations and cyber threats of existing PKIs. The primary objective of this work is to create a blockchain based decentralized
public key infrastructure which takes advantage of both the blockchain transparency and the web of trust model. The inclusion

14

Amrutanshu Panigrahi ET AL

TABLE 4 Diﬀerent Threats & Its Defence

Attack
DoS

Basic Deﬁnition
The elected 𝐶𝐴 may initiate a huge
number of transactions.

DDoS Multiple elected 𝐶𝐴s overload the
network by initiating multiple trans-
actions.

MITM An intermediate node may try to
modify the transaction. This can be
done in two ways such as modi-
fying the content or modifying the
sender/receiver node address.
It is an attack on blockchain where
attackers acquire the control of
more than 50% of the network’s
node address and cause faulty trans-
actions.

51%

Injection Injecting multiple unknown nodes

to access the data

Routing Tampering the data during the

Eclipse
attack

transaction
The attacker may have a distributed
botnets for replacing the actual node
addresses by the false addresses.

Prevention Mechanism
The proposed model deﬁnes a threshold
for every node for becoming a 𝐶𝐴 and
the implemented smart contract checks the
given threshold with the 𝑅𝐼𝐷. If the 𝑅𝐼𝐷
exceeds the threshold, the participation of
𝐶𝐴 will be rejected (see. Algo. 2).
The nodes in the network can become a 𝐶𝐴
if the 𝑅𝐼𝐷 is less compare to the given
threshold. (Algo. 2)
Hash prevents content modiﬁcation. The
node veriﬁcation process at the smart con-
tact resolves the address violation part.

Before initiating the transaction, the node
identity will be checked and only the active
node of the network will be allowed for the
transaction. (Algo. 1)

The adopted WoT does not allow the join-
ing of a random node in the network.
Hashing is used to secure the information.

For every transaction, the 𝑃 𝐼𝐷 will be
checked for availability and WoT model
restricts random joining of nodes

Sustainability
Moderate

Moderate

low

low

low

low

low

TABLE 5 Attack resistance comparison

PKI
PA-PKI 20
Block-CAM 21
BC-TRUST 22
BLOCK-PGP 23
PB-PKI 24
TTA-SC 25
CERT-CHAIN 26
CERT-LEDGER 27
DB-PKI 28
IKP 29
FLY-CLIENT 30
BLOCKQUICK 31
Proposed System

DoS
✗
✓
✓
✗
✓
✗
✗
✗
✗
✗
✗
✗
✓

DDoS
✗
✓
✓
✗
✗
✗
✗
✗
✗
✗
✗
✗
✓

MITM 51%
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓

✗
✗
✗
✓
✗
✓
✗
✗
✗
✗
✗
✗
✓

Injection
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✓

Routing
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✓

Eclipse
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✗
✓
✓

of smart contracts along with participant, signature and revoke modules in our work achieves the aforementioned features. The
primary role of the adopted smart contract is used to validate the identity of the signer node and to check the threshold value for

Amrutanshu Panigrahi ET AL

15

becoming 𝐶𝐴. The DPoS consensus algorithm used in our PKI reduces the timing complexity of the transactions which makes
our PKI aﬀordable for lightweight applications. The performance of the proposed PKI system is evaluated based on the latency
of the key generation, key validation, and signature revocation process. The gas utilization on the Ethereum platform is minimal
for the initialization process and transactions. The proposed PKI can prevent DoS, DDoS, MITM, 51%, Injection, Routing and
Eclipse attacks. The developed smart contract used in our blockchain based PKI system is lighter to address the issue of storage
limitation.

References

1. Li X, Jiang P, Chen T, Luo X, Wen Q. A survey on the security of blockchain systems. Future Generation Computer Systems

2020; 107: 841–853.

2. Wen Y, Lu F, Liu Y, Huang X. Attacks and countermeasures on blockchains: A survey from layering perspective. Computer

Networks 2021; 191: 107978.

3. Singh S, Hosen AS, Yoon B. Blockchain security attacks, challenges, and solutions for the future distributed iot network.

IEEE Access 2021; 9: 13938–13959.

4. Lu Y. The blockchain: State-of-the-art and research challenges. Journal of Industrial Information Integration 2019; 15:

80–90.

5. Almasoud AS, Hussain FK, Hussain OK. Smart contracts for blockchain-based reputation systems: A systematic literature

review. Journal of Network and Computer Applications 2020; 170: 102814.

6. Gourisetti SNG, Mylrea M, Patangia H. Evaluation and demonstration of blockchain applicability framework. IEEE

Transactions on Engineering Management 2019; 67(4): 1142–1156.

7. Xu Y, Huang Y. Segment blockchain: A size reduced storage mechanism for blockchain. IEEE Access 2020; 8: 17434–

17441.

8. Xiong W, Xiong L. Data Trading Certiﬁcation Based on Consortium Blockchain and Smart Contracts. IEEE Access 2020.

9. Ali O, Jaradat A, Kulakli A, Abuhalimeh A. A comparative study: blockchain technology utilization beneﬁts, challenges

and functionalities. IEEE Access 2021; 9: 12730–12749.

10. Paik HY, Xu X, Bandara HD, Lee SU, Lo SK. Analysis of data management in blockchain-based systems: From architecture

to governance. Ieee Access 2019; 7: 186091–186107.

11. Omar IA, Hasan HR, Jayaraman R, Salah K, Omar M. Implementing decentralized auctions using blockchain smart

contracts. Technological Forecasting and Social Change 2021; 168: 120786.

12. Karaarslan E, Adiguzel E. Blockchain based DNS and PKI solutions. IEEE Communications Standards Magazine 2018;

2(3): 52–57.

13. Kfoury EF, Khoury D, AlSabeh A, Gomez J, Crichigno J, Bou-Harb E. A Blockchain-based Method for Decentralizing the

ACME Protocol to Enhance Trust in PKI. In: IEEE. ; 2020: 461–465.

14. Langley A, Kasper E, Laurie B. Certiﬁcate transparency. Internet Engineering Task Force 2013.

15. Kim THJ, Huang LS, Perrig A, Jackson C, Gligor V. Accountable key infrastructure (AKI) a proposal for a public-key

validation infrastructure. In: ; 2013: 679–690.

16. Basin D, Cremers C, Kim THJ, Perrig A, Sasse R, Szalachowski P. ARPKI: Attack resilient public-key infrastructure. In: ;

2014: 382–393.

17. Szalachowski P, Matsumoto S, Perrig A. PoliCert: Secure and ﬂexible TLS certiﬁcate management. In: ; 2014: 406–417.

16

Amrutanshu Panigrahi ET AL

18. Dumas JG, Lafourcade P, Melemedjian F, Orﬁla JB, Thoniel P. LocalPKI: An interoperable and IoT friendly PKI. In:

Springer. ; 2017: 224–252.

19. Vigil MA, Moecke CT, Custódio RF, Volkamer M. The notary based PKI. In: Springer. ; 2012: 85–97.

20. Wang R, He J, Liu C, Li Q, Tsai WT, Deng E. A privacy-aware pki system based on permissioned blockchains. In: IEEE. ;

2018: 928–931.

21. Wang W, Hu N, Liu X. BlockCAM: a blockchain-based cross-domain authentication model. In: IEEE. ; 2018: 896–901.

22. Hammi MT, Bellot P, Serhrouchni A. BCTrust: A decentralized authentication blockchain-based mechanism. In: IEEE. ;

2018: 1–6.

23. Yakubov A, Shbair W, Khan N, Medinger C, Hilger J, others . BlockPGP: A Blockchain-based Framework for PGP Key

Servers. International Journal of Networking and Computing 2020; 10(1): 1–24.

24. Axon L, Goldsmith M. PB-PKI: A privacy-aware blockchain-based PKI. 2016.

25. Ahmed AS, Aura T. Turning trust around: smart contract-assisted public key infrastructure. In: IEEE. ; 2018: 104–111.

26. Chen J, Yao S, Yuan Q, He K, Ji S, Du R. Certchain: Public and eﬃcient certiﬁcate audit based on blockchain for tls

connections. In: IEEE. ; 2018: 2060–2068.

27. Kubilay MY, Kiraz MS, Mantar HA. CertLedger: A new PKI model with Certiﬁcate Transparency based on blockchain.

Computers & Security 2019; 85: 333–352.

28. Toorani M, Gehrmann C. A decentralized dynamic PKI based on blockchain. In: ; 2021: 1646–1655.

29. Matsumoto S, Reischuk RM. IKP: Turning a PKI Around with Blockchains.. IACR Cryptol. ePrint Arch. 2016; 2016: 1018.

30. Bünz B, Kiﬀer L, Luu L, Zamani M. Flyclient: Super-light clients for cryptocurrencies. In: IEEE. ; 2020: 928–946.

31. Exosite L. Blockquick: Super-light client protocol for blockchain validation on constrained devices. 2019.

32. Zhu J, Wan C, Nie P, Chen Y, Su Z. Guided, Deep Testing of X. 509 Certiﬁcate Validation via Coverage Transfer Graphs.

In: IEEE. ; 2020: 243–254.

33. Fadai T, Schrittwieser S, Kieseberg P, Mulazzani M. Trust me, I’m a Root CA! Analyzing SSL Root CAs in Modern

Browsers and Operating Systems. In: ; 2015: 174-179

34. Nakamoto S. Bitcoin: A peer-to-peer electronic cash system. Decentralized Business Review 2008: 21260.

35. Zheng Z, Xie S, Dai H, Chen X, Wang H. An overview of blockchain technology: Architecture, consensus, and future

trends. In: IEEE. ; 2017: 557–564.

36. Kumar A, Abhishek K, Nerurkar P, Ghalib MR, Shankar A, Cheng X. Secure smart contracts for cloud-based manufacturing

using Ethereum blockchain. Transactions on Emerging Telecommunications Technologies 2020: e4129.

37. Bhushan B, Sinha P, Sagayam KM, Andrew J. Untangling blockchain technology: A survey on state of the art, security
threats, privacy services, applications and future research directions. Computers & Electrical Engineering 2021; 90: 106897.

38. Wang S, Ouyang L, Yuan Y, Ni X, Han X, Wang FY. Blockchain-enabled smart contracts: architecture, applications, and

future trends. IEEE Transactions on Systems, Man, and Cybernetics: Systems 2019; 49(11): 2266–2277.

39. Zheng Z, Xie S, Dai HN, et al. An overview on smart contracts: Challenges, advances and platforms. Future Generation

Computer Systems 2020; 105: 475–491.

40. Bartoletti M, Pompianu L. An empirical analysis of smart contracts: platforms, applications, and design patterns. In:

Springer. ; 2017: 494–509.

Amrutanshu Panigrahi ET AL

17

41. Wang Y, He J, Zhu N, et al. Security enhancement technologies for smart contracts in the blockchain: A survey. Transactions

on Emerging Telecommunications Technologies 2021; 32(12): e4341.

42. Patsonakis C, Samari K, Kiayias A, Roussopoulos M. Implementing a smart contract PKI. IEEE Transactions on

Engineering Management 2020; 67(4): 1425–1443.

43. Zhang H, Chen X, Lan X, Jin H, Cao Q. BTCAS: A Blockchain-Based Thoroughly Cross-Domain Authentication Scheme.

Journal of Information Security and Applications 2020; 55: 102538.

44. Adja YCE, Hammi B, Serhrouchni A, Zeadally S. A blockchain-based certiﬁcate revocation management and status

veriﬁcation system. Computers & Security 2021; 104: 102209.

45. Qin K, Gervais A. An overview of blockchain scalability, interoperability and sustainability. Hochschule Luzern Imperial

College London Liquidity Network 2018.

18

AUTHOR BIOGRAPHY

Amrutanshu Panigrahi ET AL

Amrutanshu Panigrahi. Mr. Amrutanshu Panigrahi is currently working as a research scholar in the depart-
ment of CSE, Siksha O Anusandhan (Deemed to be University), Bhubaneswar, Odisha, India. He has
obtained M.Tech in Information Technology from College of Engineering and Technology, Govt. of Odisha
and B.Tech from BPUT Odisha. He is pursuing his PhD in the department of CSE at SOA University,
Bhubaneswar.

Ajit Kumar Nayak. Dr. Nayak is currently the professor and HoD of the Department of Computer Science
and Information Technology, Siksha ‘O’ Anusandhan Deemed to be University, Bhubaneswar, Odisha. He
graduated in Electrical Engineering from the Institution of Engineers, India in the year 1994, obtained M.
Tech. and Ph. D. degree in Computer Science from Utkal University in 2001 and 2010 respectively. His
research interests include Computer Networking, Ad Hoc & Sensor Networks, Machine Learning, Natural
Language Computing, Speech and Image Processing etc. He has published about 55 research papers in
various journals and conferences. Also co-authored a book ‘Computer Network Simulation using NS2’, CRC
Press. He has also participated as an organizing member of several conferences and workshops in International and National
level.

Rourab Paul. At present Dr. Paul is an Assistant Professor at Shiksha‘O’ Anusandhan University,
Bhubaneswar, Odisha. Previously he was Post Doctoral Fellow in Computer Science and Engineering depart-
ment of Indian Institute of Technology Kanpur. He has received his B.Sc.(2008) and M.Sc. (2010) degree
with Electronic Science from University of Calcutta. He has completed his doctoral research on Cryptogra-
phy and related VLSI design at the University of Calcutta, Kolkata, 2012–2017. He was a senior research
fellow at the School of I.T. of Calcutta University. He also worked for the European Organization for Nuclear
Research (CERN), Geneva, Switzerland in Large Ion Collider Experiment (ALICE) during 2015–2016. He
held visiting research fellow position in Electronics and Communication Engineering department, National University of Sin-
gapore (NUS) during Sept 2013 to Jan 2014. He has been engaged in teaching, research and industrial consultancy from 2010
to 2012. He was visiting Lecturer in Acharya Prafulla Chandra College, Madhyamgram, Kolkata and Techno India, Saltlake,
Kolkata, He was a senior academic consultant in Convergent Solutions, Saltlake, and also joined an internship program in i-cee
Design Technology, Kolkata.

This figure "AJK.jpg" is available in "jpg"(cid:10) format from:

http://arxiv.org/ps/2207.09127v1

This figure "AP.jpg" is available in "jpg"(cid:10) format from:

http://arxiv.org/ps/2207.09127v1

This figure "RP.jpg" is available in "jpg"(cid:10) format from:

http://arxiv.org/ps/2207.09127v1

This figure "score.JPG" is available in "JPG"(cid:10) format from:

http://arxiv.org/ps/2207.09127v1

