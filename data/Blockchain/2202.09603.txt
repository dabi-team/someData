Device Identiﬁcation in Blockchain-Based
Internet of Things

Ali Dorri, Member, IEEE, Clemence Roulin, Shantanu Pal, Member, IEEE, Sarah Baalbaki,
Raja Jurdak, Senior Member, IEEE, and Salil S. Kanhere, Senior Member, IEEE

1

2
2
0
2

b
e
F
9
1

]

R
C
.
s
c
[

1
v
3
0
6
9
0
.
2
0
2
2
:
v
i
X
r
a

Abstract—In recent years blockchain technology has received
tremendous attention. Blockchain users are known by a change-
able Public Key (PK) that introduces a level of anonymity,
however, studies have shown that anonymized transactions can
be linked to deanonymize the users. Most of the existing stud-
ies on user de-anonymization focus on monetary applications,
however, blockchain has received extensive attention in non-
monetary applications like IoT. In this paper we study the impact
of de-anonymization on IoT-based blockchain. We populate a
blockchain with data of smart home devices and then apply
machine learning algorithms in an attempt to classify transactions
to a particular device that in turn risks the privacy of the
users. Two types of attack models are deﬁned: (i) informed
attacks: where attackers know the type of devices installed in
a smart home, and (ii) blind attacks: where attackers do not
have this information. We show that machine learning algorithms
can successfully classify the transactions with 90% accuracy.
To enhance the anonymity of the users, we introduce multiple
obfuscation methods which include combining multiple packets
into a transaction, merging ledgers of multiple devices, and
delaying transactions. The implementation results show that these
obfuscation methods signiﬁcantly reduce the attack success rates
to 20% to 30% and thus enhance user privacy.

Index Terms—Internet of Things (IoT), Device Identiﬁcation,

Blockchain, Security, Privacy.

I. INTRODUCTION
Blockchain is a disruptive technology that has received
tremendous attention from practitioners and academia due to
its salient features including auditability, immutability, decen-
tralization, and anonymity [1]. In blockchain, a transaction
forms the basic communication primitive that allows nodes
to exchange information or read/write in the blockchain. It is
possible that there exists dependencies between transactions
where certain ﬁelds generated in one transaction (outputs) are
refrenced in another transaction as inputs [2]. Particular nodes
in the network, known as miners, collate multiple transactions
and form a block which is appended to the blockchain by fol-
lowing a consensus algorithm. Using the consensus algorithm,
e.g., Proof of Work (PoW) [3], participating nodes build a
trusted network over untrusted participants.

New transactions and blocks are broadcast and veriﬁed by
all participating nodes that eliminates the need for central

A. Dorri, S. Pal, and R. Jurdak are with the School of Computer Science,
Queensland University of Technology, Brisbane, QLD 4000, Australia (e-mail:
ali.dorri@qut.edu.au, shantanu.pal@qut.edu.au, r.jurdak@qut.edu.au).
C. Roulin is with CSIRO Data61, Pullenvale QLD 4069 Australia.
S. S. Kanhere is with the School of Computer Science and Engineering,
University of New South Wales, Sydney, NSW 2052, Australia (e-mail:
salil.kanhere@unsw.edu.au).

S. Baalbaki is with the American University of Beirut, Beirut Campus,

Beirut 110236, Lebanon (e-mail: sib09@mail.aub.edu).

authorities and introduces distributed management of trust.
Each block includes the hash of its previous block in the
ledger that ensures blockchain immutability. The modiﬁcation
of the block content, i.e., the transactions, is impossible since
the hash maintained in the subsequent block will not match
with the hash of the modiﬁed block. The transactions are
permanently stored in the public immutable blockchain where
any node can retrieve in any point of time that introduces high
auditability [4].

The transactions are cryptographically sealed using pub-
lic/private keys. The Public Key (PK+) used in each transaction
is employed as the identity of the transaction generator. This
introduces a level of anonymity for the blockchain users as
their real identity remains unknown to the participating nodes.
To enhance their anonymity, the users may change their PK+
for each new transaction. The anonymity of the users in
crytocurrencies, the ﬁrst application of blockchains, has been
widely studied in the literature [5] [6]. The studies suggest
that the malicious nodes can deanonymize a user by: (i) link-
ing multiple transactions with the same PK+, (ii) classifying
transactions with different PK+s based on particular metrics,
e.g., the ﬂow of inputs/outputs, and linking them to a user,
(iii) analyzing real-time network trafﬁc , or (iv) employing
off-chain information, e.g., the information available in the
website of a company.

In recent years, there has been extensive research on adopt-
ing and applying blockchain in non-monetary applications
including the network of billions of connected devices that
form the Internet of Things (IoT) [7] [8]. Due to its salient
features as outlined above, blockchain has the potential to
address security, anonymity, and centralization challenges and
enhance the auditability and transparency of the conventional
IoT frameworks. In IoT each user owns a number of devices
that collect and share data with Service Providers (SP) and/or
other users to offer personalized services to the user. IoT
devices encrypt data in transit to increase security. Exposure
of the user’s activity patterns results in serious privacy and
security concerns, e.g., an attacker may infer the hours that
a home is occupied by monitoring the pattern of transactions
generated by motion sensors [9]. In a blockchain-based IoT,
the transactions reﬂect the activities of a participating IoT de-
vice which potentially may expose the user activity pattern and
thus compromise their privacy. Blockchain transactions may
not contain the raw data shared by the IoT devices; however, an
attacker can still expose the user’s activity without accessing
data, by monitoring the temporal pattern of stored encrypted
communications, i.e., transactions, of IoT devices [10]. An

 
 
 
 
 
 
attacker with the intention of revealing a user’s activities must
ﬁrst determine the types of IoT devices in the user’s premises.
The combination of user deanonymisation and IoT device
identiﬁcation can therefore be a powerful tool for an attacker
to determine a user’s identity and activities.

Device identiﬁcation in blockchain is conceptually similar
to device classiﬁcation in IoT [11] that is a security tool
employed by the network managers to identify the type of
devices installed in their site and thus detect malicious unau-
thorized devices and trafﬁc. Unlike conventional IoT, where
device classiﬁcation is employed to enhance network security,
when applied to blockchain-based IoT, it can lead to privacy
violations. Device classiﬁcation in blockchain is different to
when applied to conventional IoT due to the following reasons:

• Blockchain is an immutable system that makes it impos-
sible to remove or modify transactions that are previously
stored in the chain. This potentially turns blockchain into
a permanent database that exposes the history of the
communications and activities of the IoT participants.
However, in conventional IoT, the historical communi-
cations of a devices is only stored by the device and SP.
To read communications, one shall perform attacks, e.g.,
man-in-the-middle attack to access real-time IoT trafﬁc.
• Blockchain transactions are broadcast to the network and
the transaction recipient (if any) is identiﬁed by the
PK+. Thus, the IP address of the transaction generator
is not stored in the blockchain. In conventional IoT data
classiﬁcation methods, the IP address is employed as
a source to classify the devices, e.g.,
the destination
IP address reveal information about the recipient of the
transaction.

• Transactions contain PK and record the interactions be-
tween the participants, while no network speciﬁc ﬁeld or
data is stored in blockchain. However, in conventional
IoT device classiﬁcation methods real-time access to the
network is needed. Thus, network layer packets can also
be accessed which can facilitate device classiﬁcation.

The major contribution of this paper is to study the pos-
sibility of device identiﬁcation in blockchain-based IoT. To
the best of our knowledge, this is the ﬁrst attempt to identify
types of devices in an IoT blockchain context. We use a smart
home setting as a representative use case to study device
classiﬁcation in IoT. We utilize the smart home trafﬁc dataset
available in [12] to populate a blockchain. Each transaction
in the blockchain corresponds to a particular communication
in the dataset with the same timestamp. We study the success
rate of classifying transactions corresponding to a particular
device and identifying the device type based on the transaction
temporal pattern. The attacker’s aim is to match temporal
signatures observed in the transaction ledger to known IoT
device temporal patterns in order to identify the types of
involved devices. As the attack is a pattern matching problem,
we use machine learning, particularly decision trees, to model
the attacker. We deﬁne two attack models: (i) informed attack
where the attacker knows the number and type of devices
that are in the smart home, but does not know the mapping
of devices to identities in the ledger. This attack is highly

2

unlikely as it requires an attacker to monitor the user’s device
acquisitions over a long period of time, yet we include it as a
worst case scenario for studying user activity privacy risk, and
(ii) blind attack where the attacker has no speciﬁc information
about the number and type of devices in the smart home. Our
results show that up to 90% classiﬁcation accuracy of the type
and number of devices in the ledger can be achieved.

To protect against this attack, we propose four timestamp
obfuscation methods: combining multiple packets into a trans-
action, merging ledgers of multiple devices, randomly delaying
transactions, and adding fake transactions to alter the temporal
pattern of transactions. We study the impact of the proposed
methods on attack success. The timestamp obfuscation meth-
ods can reduce attack success rates to between 20-30%.

The rest of the paper is organized as follows. In Section II,
we present the related work. In Section III, we provide a
detailed discussion on device classiﬁcation in blockchain-
based IoT. System evaluation and results are illustrated in
Section IV. Finally, Section V concludes the paper and outlines
future work.

II. RELATED WORK

In this section, we present a literature review on the user
deanonymization in blockchain-based systems. As outlined in
Section I, blockchain was ﬁrst proposed in cryptocurrencies.
The existing literature in user deanonymization in blockchain
mainly focuses on cryptocurrencies. Thus, we discuss such
methods in this section.

A. User Anonymity in Blockchain

To study the anonymity of the users, it is critical to consider

the following properties [13]:

• Anonymity of an entity is the ability to identify a par-
ticular node within a group of nodes, that are known as
anonymity set.

• Recipient anonymity is the ability to identify a particular

node as the recipient of a (group of) transaction(s).

• Unlinkability refers to the impossibility of linking multi-

ple transactions to a particular user.

• Untraceability refers to the impossibility of tracking a

transaction to the transaction generator.

• Hidden transaction value refers to the impossibility of
ﬁnding the actual input/output value of a transaction.
The anonymity of a blockchain-based system depends on the
degree to which it satisﬁes the outlined properties [14]. In the
rest of this subsection we study the existing methods in the
literature to deanonymize blockchain users.

Active Interaction: In this method, the malicious nodes
directly interact with the target node using transactions and
capture the real-time information about
the target. As an
example, a malicious node may pay the price of a good using
cryptocurrency and gather information about the seller, e.g.,
their IP address, PK, etc. The authors in [15] attempt
to
deanonymize Bitcoin users by directly communicating with
31 service providers (SPs) that include mining pools, wallet
software providers, bank exchanges, vendors and gambling
sites using 344 transaction leading to 16,086,073 transactions

in total in the network. Upon receipt of a transaction from
the SPs, the PK+ of the transaction generator is recorded. The
sender sends multiple transactions to the same SP to increase
the number of collected PK+. The collected information is
then fed into a transaction analysis algorithm that employs
the following two heuristics to analyze the transactions:
• The inputs of a transaction belong to the same user.
• In case a transaction has only one input and one output,
both input and output belong to the same user. Such a
transaction is known as a one-time change address.
Utilizing the ﬁrst heuristic the network is clustered into
5,579,176 clusters of users. The second heuristic is then
applied in the clusters leading to 3,384,179 distinct clusters
where the identity of 2,197 users was revealed. Particular
transactions are linked to a particular SP, e.g., 20 clusters
belong to Mt Gox mining pool.

Analyzing Network Trafﬁc: In this method, the malicious
node sniffs the packets exchanged in the underlying peer-to-
peer network to capture IP address associated with a trans-
action. This in turn enables the malicious nodes to identify
multiple transactions generated by the same node and assists in
user deanonymization. The blockchain participants can employ
Tor [16] to hide their IP address. However, the authors in [17]
demonstrate that malicious nodes can classify transactions
corresponding to a user based on their IP address even if they
employ Tor. Malicious nodes can also identify the users that
are connected through the same ISP and thus have the same IP
address. Malicious nodes connect to the entry points, i.e., the
nodes that connect new nodes to the blockchain, and eavesdrop
the IP address of the newly joined nodes. To increase the
attack’s success rate, the malicious nodes connect to as many
entry points as possible. The malicious node was successful
in identifying 11% of the transactions in Bitcoin.

Analyzing Transactions:

In this method, the malicious
node classiﬁes transactions to identify the transactions corre-
sponding to the same user. To classify transactions, malicious
nodes construct the following graphs [18]:

• Transaction graph: blockchain can be represented as an
acyclic graph G=T,E, where T is a set of transactions and
E represents a set edges. The edges represent the ﬂow of
inputs/outputs between transactions.

• Address graph: the ﬂow of inputs/outputs in a transaction
graph can be represented as an address graph AG=P,E‘
where P is the set of blockchain addresses, i.e., PK+,
and E‘ is the set of edges that represents the relationship
between addresses.

• Entity graph: the PK+s corresponding to a user can be
classiﬁed by constructing the entity graph EG=U,E“
where U is a set of PK+s belonging to the user U
and E“ is the edge connecting the users. Malicious
nodes use the address graph along with some heuristics,
examples discussed earlier in this section, to classify user
transactions.

In [19] the authors classify the blockchain users by forming
the entity graph. First, the address graph is constructed as
outlined above. To evaluate the proposed method, the authors
mimic the shopping behavior of staff and students in a uni-

3

versity. The proﬁle of 40% of the participants was constructed
with 80% accuracy.

Using Off-Chain Information: In this method, the mali-
cious nodes attempt to gather information about a particular
user, i.e., PK+, from off-chain information sources. A user
may reveal their PK+ in a forum discussion or companies may
reveal their PK+s on their website. The authors in [20] employ
cookies set by third parties in online shopping websites to
track the PK+ used by a users. The results demonstrate that
the malicious entity was able to identify 20 out of 25 users.

B. Enhancing User Anonymity

In this section, we study the existing methods to improve the
user anonymity in blockchain. In this paper, we categorize the
existing solutions in two groups which are: (i) mixing services
and (ii) cryptographic methods.

1, PK’

2,...,PK’

Mixing services are widely employed by various cryptocur-
rencies to improve the anonymity of the users [21]. The nodes
that wish to improve their privacy pay a speciﬁc value, say x, to
the mixing service. We represent the input values to the mixing
service as PK1, PK2,...,PKn. The mixing service then shufﬂes
the input coins and randomly assigns them to new set of keys
PK’
n which is then distributed among the nodes,
that have initially contributed. Each node shall receive the
same amount of coin they paid to the mixing service. However,
this may facilitate linking the new keys to the previous key.
Say only one of the input values to the mixing service was
10 coins, and thus the only output with 10 coins will belong
to the same node. To address this challenge, in the mixing
services all input transactions as well as output ones have the
same value.

Cryptographic methods generally employ cryptographic
concepts to enhance the anonymity of the users [13]. The
authors in [22] introduce ZeroCoin that employs zero knowl-
edge proof for spending coins while breaking the historical
link between the transactions owned by the same user. In this
method, all transactions have to use a ﬁxed coin value.

To the best of our knowledge, the existing solutions to study
and improve the user anonymity focus on cryptocurrencies.
The wide spread adoption of blockchain in IoT applications
motivates the need to study anonymity in IoT applications.
The key difference in such applications is that transactions
typically have recurring temporal signatures that are speciﬁc
to device types and manufacturers, which can help an attacker
infer the device types. We next study the impact of user
deanonymization in IoT-based blockchain.

III. DEVICE CLASSIFICATION IN BLOCKCHAIN-BASED IOT

In this section, we outline the details of device classiﬁcation
in blockchain-based IoT. To mimic the actual
transaction
pattern generated by IoT devices, we populate a blockchain
using a real-world smart home trafﬁc dataset as discussed in
Section III-A. Next, we discuss the attack models in Section
III-B. To enhance the anonymity of the users, we propose
multiple timestamp obfuscation methods, which are outlined
in Section III-C.

4

TABLE I
INTER-PACKET TEMPORAL PATTERNS FOR DEVICES.

Device
[0.5ex] Smart Things
Amazon Echo
TPLink Camera
Samsung Camera
Drop Camera
Insteon Camera2
Baby Monitor
TPLink Smartplug
TPLink Smartplug
iHome
Nest Smockalarm
Netatmo Weather
Sleep Sensor
Lifx Smartbulb
Triby Speaker
Pix Photoframe
HP Printer

Patterns of Frequent Time Separation (in sec)
0.207 then 58 then 0.207 then 58 . . .
0.217 then 30 then 0.004 then 30 . . .
0.12 then 61 then 0.12 then 61 . . .
0.165 then 30 then 0.165 then 30 . . .
1.03 or 0.2
9x<0.0001 then 0.216 then 300 ...
600 then 0.28 then 600 then 0.28 . . .
0.24 then 236 then 0.24 then 236 . . .
0.12 then 236 then 0.12 then 236 . . .
60 then 0.205 then 60 then 0.205
0.207 then 0.015 then 0.207 then 0.015 . . .
1.72 then 0.33 then 1.72 the 0.33 . . .
10 then 0.276 then 10 then 0.276 . . .
1.92 or 60
120 – 0.3 - 120 – 0.3 - 56 – 0.3 . . .
0.31 or >=0.3 then 65 then 650
90

most existing blockchains store data in an off-chain database
while the hash of the data is stored in blockchain to maintain
data integrity.

The smart home dataset also consists of network man-
agement packets, e.g., SMTP. Note that
in conventional
blockchain settings, such information is not stored in the
blockchain and only the interactions between the devices is
stored. Thus, we disregard network management packets in
the dataset. We also intentionally disregard the blockchain
consensus process as the main objective of the attacker is
to classify smart home devices using blockchain database
that is not impacted by the underlying consensus algorithm.
A single node functions as validator and stores transactions
in the blockchain in the form of blocks. We assume that
devices change their Public Key PK+ per each transaction they
generate to enhance their anonymity.

The attacker applies machine learning algorithms in the
blockchain database to classify devices as outlined in the next
section.

B. Attack Models

As shown in Table I, the pattern of transactions mostly
represent a sequence of in-order numbers. Different patterns
share some features, e.g., a separation of 0.207s is found for
both the Smarts Things and the Nest smoke alarm. Such pat-
terns represent a classiﬁcation problem that can be represented
by decision trees. Thus,
the machine learning algorithms,
employed by the attacker, use decision trees to analyze the
pattern of transactions in the blockchain and classify devices.
The attacker can read the stored transactions and blocks in
the blockchain, but cannot decrypt the data associated with
the transactions without the corresponding private key. The
attacker trains the machine learning algorithm in a testnet
that is a local network consisting the smart home devices.
Depending on the number of devices in the testnet, the ability
of the attacker to detect the devices varies. We study the
following two attack models:

• Informed Attack: In this attack, the attacker knows the
type, including the manufacturer, of devices installed in a

Fig. 1. The overall structure of the smart home dataset [12].

A. Modeling an IoT-based Blockchain

In this section, we discuss the process of populating the
blockchain database. We use a smart home application as a
representative case on an IoT applications. We populate a
blockchain based on the smart home network trafﬁc dataset
available at [12]. The dataset contains the trafﬁc of a real
smart home network for a period of two weeks that consists
of 30 IoT devices. The type of the devices installed in the
smart home are shown in Figure 1. The devices use a PK+ as
their identity which is changed per transaction to enhance the
anonymity level.

the

smart

transaction

communication

stored
is
structured

corresponding
Each

each
a
blockchain.

in
transaction
is

home
For
in
dataset,
the
as
< T ID, P rvTID , timestamp, Output, pk, sign > where
TID is the unique identiﬁer of the transaction that essentially
is the hash of the transaction content. The identity of the
previous transaction generated by the same device is stored in
PrvTID which potentially chains transactions generated by the
same device. PrvTID also protects against sybil attack where a
malicious node pretends to be multiple nodes by generating
fake transactions [7]. The time when a packet is generated by
a device is stored in timestamp ﬁeld. The hash of the PK+
that will be used in the next transaction is stored in output
ﬁeld. The last two ﬁelds are PK+ of the transaction generator
and its corresponding signature. In case the communication,
in the dataset, corresponding to the transaction involves data,
the transaction generator signs the hash of the data and
populates in sign ﬁeld, otherwise, the hash of the transaction
is signed. Storing data in the blockchain incurs the packet and
thus
memory overhead and reduces blockchain scalability,

smart home. The entire range of devices in the blockchain
must be represented in the trained algorithm, thus, we
employ 10-fold cross validation analysis to model the
informed attacker. As the attacker knows the type of
devices in the smart home, he can acquire similar devices
and collect sufﬁcient network trafﬁc data to populate a
comprehensive training set. While this attack is unlikely
in practical scenarios, as it requires the attackers to
monitor the user’s sensor acquisitions of a long period
of time prior to launching the attack, we include it as a
worst case scenario for activity privacy risk analysis.
• Blind Attack: In this attack, the attacker does not know
the number and type of devices installed in the smart
home. We model blind attackers by using training data
that is collected from a small scale IoT network con-
taining a few popular IoT devices. We then use test sets
which contain fewer or more types of devices than in the
training set. For instance, a motion sensor might be in
the test set but no in the training set. The training set
may contain all, some, or even none of the devices in the
target smart home as the attacker does not know the type
and number of devices installed in the target smart home.

C. Timestamp Obfuscation

In this section, we study the proposed timestamp obfusca-
tion methods. Most of the IoT devices generate transactions
based on a particular pattern which is reﬂected in the times-
tamp of the transactions. To make device classiﬁcation more
difﬁcult, we propose four multiple timestamp obfuscation
methods which are as follows:

1) Delayed Transactions: in this obfuscation method the
transaction t corresponding to a communication c is generated
with a random delay delay. Thus, t.timestamp = c.timestamp +
delay where delay ∈ [0, dmax]. dmax represents the maximum
delay that is deﬁned by the user. delay value for each trans-
action is independent and is selected randomly. The aim is
to obfuscate the pattern of transactions. This potentially may
even change the order of transactions, i.e., ti.timestamp >
ti+1.timestamp where ti is transaction corresponding to the
ith communication.

2) Multi-device Ledgers: in this obfuscation method multi-
ple devices share the same ledger to store their transactions. In
conventional methods, each device employs the same ledger to
chain its transactions which potentially protects against Sybil
attack where a malicious node pretends to be multiple nodes.
However, using the same ledger for each device negatively
impacts the user anonymity as changing the PK+ will not im-
pact the anonymity as all transactions in a ledger belong to the
same device which in turn facilitates transaction classiﬁcation.
Thus, this obfuscation method stores transactions of multiple
devices in the same ledger which in turn mixes the transaction
temporal patterns. The transactions are stored in the ledger
once a communication is made by the devices without any
prioritization or limitation on the number of transactions each
device can store.

3) Multi-packet Transactions: in this obfuscation method
each transaction may reﬂect multiple communications of a

5

device. Depending on the device functions, the maximum time
interval between two consecutive packets may vary, thus the
exact number of combined packets depends on application
and number of packets generated by the device. In this
obfuscation method the transaction can be considered as a
summary of a number of communications made by the device
which in turn reduces the volume of information available
about communications of a device. By applying multi-packet
obfuscation the pattern of transactions will not match with
the device communication pattern which further complicates
device classiﬁcation.

4) Transaction Spooﬁng: in this obfuscation method fake
transactions, i.e., transactions that reﬂect no real communi-
cation, are added randomly to the ledger to mix the pattern
of transactions and thus complicate device classiﬁcation, e.g.,
storing a fake transaction after storing a transaction in the
ledger. This method in turn increases the blockchain overhead
as the size of the blockchain database increases. The device
randomly adds fake transactions in the blockchain to obfuscate
the transaction pattern.

To benchmark the performance of the outlined obfuscation
methods, we consider a baseline method where a single trans-
action is generated and stored in blockchain corresponding to
a single communication. Having discussed the fundamentals,
we analyze the implementation results next.

IV. EVALUATION AND RESULTS

In this section, we evaluate the proposed timestamp ob-
fuscation methods in Section III-C through experiments on
the empirical smart home dataset. We evaluate these methods
for both informed and blind attacks. We ﬁrst evaluate the
obfuscation methods individually, then we study the impact
of combining multiple obfuscation methods.

A. Delayed Transactions

We consider three delay intervals which are [0, 0.5], [0, 2]
and [0, 30] seconds and are selected based on the separation
time observed in devices’ patterns (see Table I).

Figure 2 shows the results for delayed transactions, for both
informed and blind attacks. In informed attacker model, the
accuracy of classiﬁcation is reduced by at least 15% when
applying the random delays. The results for [0, 0.5] and [0, 2]
intervals have small differences given that the differentiable
times are either < 0.4 or ≥ 28 seconds. However, changing
the delay to 30 seconds makes it harder to classify transactions.
For blind attacks, the classiﬁcation accuracy drops for all
approaches. However, there is still a reduction of over 10%
with delayed transactions relative to the baseline approach.

B. Multi-device Ledgers

As outlined earlier in Section III-C, the devices are assigned
randomly to common ledgers where the number of devices in
each ledger varies. As evident from the experiment results
shown in Figure 3 the attack success rate reduced from 98%
for ledgers used by single devices to around 50% for ledger
shared across 17 devices. With a small number of devices shar-
ing the same ledger, the attacker can distinguish transactions

6

Fig. 2. The impact of delayed transactions for informed attacks (a) and blind attacks (b)(points represent error bar).

(a)

(b)

high variance across trials, we examine the maximum possible
attack success in the model. Increasing the number of devices
per ledger from 1 to 17 reduces the maximum attack success
rate from around 85% to 30% for blind attacks.

C. Multi-packet Transactions

Next we explore the effects of merging multiple device
communications into a single transaction. The experimental
results for both informed and blind attacks are shown in
Figure 4. The classiﬁcation accuracy decreases in the informed
attack by 20% on average. In one packet per transaction
mode, the success rate in classifying transactions varies from
50%-60%. Unlike one packet per transaction mode where the
attacker employs short separation times to distinguish devices,
consolidating several packets in a transaction removes the sep-
aration time which in turn complicates device identiﬁcation.
On average, the success rate in classifying devices reduces by
20% when employing multiple packet per transaction mode.
The change is less obvious for blind attackers, but the
accuracy observed with multi-packet transactions is lower than
the baseline method. Recall that a blind attacker only uses
a subset of actual devices in its training set, thus has lower
visibility to distinguish the devices, basing it only on higher
separation times. Concealing the shortest separation times with
multi-packet transactions has a greater impact on an informed
attacker than on a blind attacker given the informed attacker’s
full visibility into the device type and their short separation
times. There is signiﬁcant variation in the differences between
single and multi-packet transactions over different days in
the simulation for blind attacks, as the performance depends
signiﬁcantly on the active devices on that day and whether
these devices are in the blind attacker’s training set.

D. Transaction Spooﬁng

Finally, we quantify the effect of adding fake transactions
to obfuscate the temporal pattern of genuine transactions. The
experimental results for both informed and blind attacks are
shown in Figure 6 that shows the decrease in the classiﬁca-
tion accuracy in both blind and informed attacks based on

Fig. 3. The impact of multi-node ledgers in informed and blind attack models
(points represent error bar).

in the ledger by examining and matching transactions with
pattern of known devices. However, larger number of devices
potentially reduces the success rate in linking transactions
to a known device given the short time intervals between
transactions in the ledger.

The overall success rates for blind attacks is considerably
lower, and interestingly, the general trend for average attack
success rate slightly increases with more devices per ledger.
In this attack model, we train our algorithm to recognize an
available subset of all possible devices, hoping that at least
devices present in the home (the test) are in our training set.
The test set can therefore vary signiﬁcantly from our training
set. A large number of devices within the same ledger will
make the test set more similar to the training set, so the
classiﬁcation accuracy increases on a large sample. When
the number of devices per ledger are small, we observe a
high variance in the results. This variance stems from the
dependence of individual experiment runs on the speciﬁc
selection of devices in the test set. Where there is a high match
in test and training sets, the attacks can be quite successful
and vice versa. We observe a trend of a drop in variance with
an increase in the number of devices per ledger. Given this

Correctly classified with cross validation01020304050607080901000246810121416Correctly classified (%)Number of devices per ledgerInformed attackerBlind attacker7

Fig. 4. The impact of multi-packet transactions for informed attacks (a) and blind attacks (b)(points represent error bar).

(a)

(b)

Fig. 5. The combined impact of multi-packet transactions and multi-node ledgers for informed attacks (a) and blind attacks (b)(points represent error bar).

(a)

(b)

transactions in between the original timestamps, the temporal
patterns are mixed up making device identiﬁcation, based on
pattern matching, more challenging. The improved anonymity
comes with the cost of more transactions to be committed to
the blockchain and thus more overhead in the blockchain.

E. Combined Timestamp Obfuscation

In the previous subsections, we studied the impact of
applying each timestamp obfuscation method separately. As
the number of devices in the dataset is about 20 devices, the
percentage of correctly classiﬁed transactions considering a
strategy that selects devices randomly should remain around
5%. In this subsection, we evaluate the impact of combining
the proposed obfuscation methods.

First, we study the impact of combining multi-packet trans-
actions with multi-node ledgers. As shown in Figure 5, in the
informed attack the success rate of classifying the devices is
reduced by about 10%. Combining multi-packet transactions
with multi-node ledgers yields results extremely close (less
than 5% of difference) to the ones obtained with single-packet
transactions, for blind attackers. Again, the reason is that blind
attackers rely more on longer packet separation time and are
less impacted by obfuscations affecting short separation times.

Fig. 6. The impact of transaction spooﬁng in blind and informed attacks
(points represent error bar).

the different number of spoofed transactions added to the
ledger. A higher number of spoofed transactions results in
reduced classiﬁcation accuracy for an attacker as it is harder
to recognize the timestamp pattern. For the informed attack,
the success rate is reduced from 93% to 28%, and the blind
attack success rate is reduced from 33% to 10% for 3 times
the original amount of transactions added. With more false

8

Fig. 7. The combined impact of multi-packet transactions and delayed for informed attacks (a) and blind attacks (b)(points represent error bar).

(a)

(b)

Fig. 8. The combined impact of combining three methods for informed attacks (a) and blind attacks (b)(points represent error bar).

(a)

(b)

We next evaluate the impact of combining delayed transac-
tions with multi-packet transactions (cf. Figure 7). The three
delay intervals have the same impact as studied in Figure 2
by 30 sec interval having the most visible improvement. Com-
paring the results in Figure 7 with Figure 2, we noticed the
success rate of device classiﬁcation is lower in delayed single-
packet per transaction mode. This can be due to the balanced
distribution of transactions in the dataset. The transaction
distribution signiﬁcantly changes by applying multi-packet per
transaction mode. This can cause some devices to dominate
the ledger leading to a higher success rate in identifying the
devices (as the attacker identiﬁes more dominant devices).

Now we evaluate the impact of combining delayed transac-
tions, multi-packet transactions, and multi-node ledgers (cf.
Figure 8). In an informed attack, the best performance is
achieved by the combination of all three methods with a delay
of 30 sec that reduces the classiﬁcation accuracy to 24%. For
blind attacks, there is a slight advantage for the combined
approach with 2 second delays for ledgers of 1-2 nodes, while
again overall the combined approach with a 30 second delay
achieves the attack success rate at 19%.

V. CONCLUSION AND FUTURE WORK

In this paper, we examined the signiﬁcant issue of IoT
device identiﬁcation. We have quantiﬁed the impact of attacks
in device de-anonymization. That is the re-identiﬁcation of a
device/pattern based on the previous interactions. We used two
attack models, namely informed and blind, to test the attacks
scenarios against four times-stamp obfuscation methods. For
that purpose, we used a data-set of a smart home network
trafﬁc consisting of 20 IoT devices over two weeks. For the
evaluation, we ﬁrst used the obfuscation methods individually,
then investigated the impact of multiple obfuscation methods
together to see the differences in adding complexity. Our
experimental results showed that the success rate of the device
classiﬁcation reduced signiﬁcantly with the employment of the
combination of the times-stamp obfuscation methods for both
the informed and blind attacks.

As future research direction, additional obfuscation methods
can be introduced to reduce the classiﬁcation rate while con-
sidering the overheads. The obfuscation methods introduced
in this paper reduce the sucess rate of classifying attacks.
However, they potentially modify the pattern of transactions

9

in blockchain that may potentially impact services a user
receives based on the blockchain transactions. Studies are
required to allow users to re-create ordered list of their
transactions. This paper studied smart home as an application.
The impact of user/device deanonymization can be studied in
other application domains including smart grids.

REFERENCES

[1] H. Dai, Z. Zheng, and Y. Zhang, “Blockchain for internet of things: A
survey,” IEEE Internet of Things Journal, vol. 6, no. 5, pp. 8076–8094,
2019.

[2] S. Perera, S. Nanayakkara, M. Rodrigo, S. Senaratne, and R. Weinand,
“Blockchain technology: Is it hype or real in the construction industry?”
Journal of Industrial Information Integration, vol. 17, 2020.

[3] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” Decen-

tralized Business Review, 2008.

[4] H. Ru, et al., “A Comprehensive Survey on Blockchain in Industrial
Internet of Things: Motivations, Research Progresses, and Future Chal-
lenges,” IEEE Communications Surveys & Tutorials, 2022.

[5] M. Moser, “Anonymity of bitcoin transactions,” Munster Bitcoin Con-

ference (MBC), Germany, 2013.

[6] G. Fanti and P. Viswanath, “Deanonymization in the bitcoin p2p
network,” in Advances in Neural Information Processing Systems, pp.
1364–1373, 2017.

[7] A. Dorri, S. Kanhere, R. Jurdak, and P. Gauravaram, “Lsb: A lightweight
scalable blockchain for iot security and anonymity,” Journal of Parallel
and Distributed Computing, vol. 134, pp. 180–197, 2019.

[8] R. Kumar, F. Khan, S. Kadry, and S. Rho, “A survey on blockchain for
industrial internet of things,” Alexandria Engineering Journal, vol. 61,
no. 8, pp. 6001–6022, 2022.

[9] S. Pal, M. Hitchens, T. Rabehaja, and S. Mukhopadhyay, “Security
requirements for the internet of things: A systematic approach,” Sensors,
vol. 20, no. 20, 2020.

[10] N. Apthorpe, D. Reisman, and N. Feamster, “A smart home is no castle:
Privacy vulnerabilities of encrypted iot trafﬁc,” arXiv Copy, 2017.

[11] M. Miettinen, S. Marchal, I. Hafeez, N. Asokan, A. Sadeghi, and
S. Tarkoma, “Iot sentinel: Automated device-type identiﬁcation for
security enforcement in iot,” in the 37th International Conference on
Distributed Computing Systems (ICDCS), IEEE, pp. 2177–2184, 2017.
[Online]. Available: https:

[12] “UNSW IoT smart home dataset.”

//iotanalytics.unsw.edu.au/

[13] N. Amarasinghe, X. Boyen, and M. McKague, “A survey of anonymity
of cryptocurrencies,” in the Australasian Computer Science Week Mul-
ticonference, pp. 1–10, 2019.

[14] H. Ke, X. Zhang, Y. Mu, F. Rezaeibagha, and X. Du, “Lsb: A lightweight
scalable blockchain for iot security and anonymity,” Scalable and
redactable blockchain with update and anonymity, vol. 546, pp. 25–41,
2021.

[15] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko, D. McCoy,
G. Voelker, and S. Savage, “A ﬁstful of bitcoins: characterizing payments
among men with no names,” in the Internet measurement conference,
ACM, pp. 127–140, 2013.

[16] “Tor project.” [Online]. Available: https://www.torproject.org/
[17] A. Biryukov, D. Khovratovich, and I. Pustogarov, “Deanonymisation of
clients in bitcoin p2p network,” in the ACM SIGSAC Conference on
Computer and Communications Security, pp. 15–29, 2014.

[18] M. Conti, E. Kumar, C. Lal, and S. Ruj, “A survey on security and
privacy issues of bitcoin,” IEEE Communications Surveys & Tutorials,
vol. 20, no. 4, pp. 3416–3452, 2018.

[19] E. Androulaki, G. Karame, M. Roeschlin, T. Scherer, and S. Capkun,
“Evaluating user privacy in bitcoin,” in the International Conference on
Financial Cryptography and Data Security, Springer, Berlin, Heidelberg,
pp. 34–51, 2013.

[20] S. Goldfeder, H. Kalodner, D. Reisman, and A. Narayanan, “When
the cookie meets the blockchain: Privacy risks of web payments via
cryptocurrencies,” Proceedings on Privacy Enhancing Technologies, vol.
2018, no. 4, pp. 179–199, 2018.

[21] Q. Feng, D. He, S. Zeadally, M. Khan, and N. Kumar, “A survey
on privacy protection in blockchain system,” Journal of Network and
Computer Applications, vol. 126, pp. 45–58, 2019.

[22] I. Miers, C. Garman, M. Green, and A. Rubin, “Zerocoin: Anonymous
distributed e-cash from bitcoin,” in the Symposium on Security and
Privacy, IEEE, pp. 397–411, 2013.

