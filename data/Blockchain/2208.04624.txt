2
2
0
2

g
u
A
9

]

R
C
.
s
c
[

1
v
4
2
6
4
0
.
8
0
2
2
:
v
i
X
r
a

Bottom-up Trust Registry in Self Sovereign
Identity

Kai Jun Eer1, Jesus Diaz2, and Markulf Kohlweiss1,2

1 University of Edinburgh {keeer,markulf.kohlweiss}@ed.ac.uk
2 Input Output Global jesus.diazvico@iohk.io

Abstract. Self sovereign identity is a form of decentralised credential
management. During credential veriﬁcation, data exchange only happens
between the data owner and the veriﬁer without passing through any
third parties. While this approach oﬀers a privacy-centric solution, it
poses a challenge. How do veriﬁers trust that the credential is vouched by
a trusted source? More speciﬁcally, how do veriﬁers know that the issuer
has the reputation or is authorised to issue the credential? In this paper,
we propose a trust registry design that handles the aspect of human trust
in self sovereign identity. We also introduce an incentivisation mechanism
for the trust registry in order to motivate each stakeholder to participate
actively and honestly.

Keywords: Self sovereign identity · Trust registry

1

Introduction

In recent years, self-sovereign identity (SSI) as a decentralised identity system has
been gaining traction, with the Sovrin blockchain being one of the most notable
projects in this area. It aims to return identity data control to the identity owner
through cryptographic proofs rather than relying on external identity providers
[15]. However, as there is no central authority regulating the system, SSI faces
challenges in key recoverability and trust in identity issuers, which needs to be
addressed before SSI can realise its potential.

The foundation of SSI is veriﬁable credentials which contain attributes asso-
ciated with an individual, signed by an issuer. Each credential issuer has an asso-
ciated decentralised identiﬁer (DID), which is recorded on the public blockchain
[12]. A DID is resolvable into a public key and a service endpoint where interac-
tions with the issuer is communicated. Therefore, while it is cryptographically
veriﬁable that a credential is issued by a speciﬁc public-private key pair, there
is still a layer of human trust needed. For a veriﬁable credential to be trusted by
a veriﬁer, the veriﬁer needs to trust the issuer of the credential. In an ecosystem
of SSI, there could be many valid identity issuers, however the veriﬁer might
not recognise all of them. A trust framework that governs the entities which are
authorised to issue credentials is critical in managing the layer of human trust.

 
 
 
 
 
 
2

K. Eer et al.

1.1 Contribution

The need for a secure and privacy-preserving digital identity system will only
increase in the coming years. In this paper, we ﬁrst analyse current trust frame-
works in self sovereign identity, and propose an alternative framework that is
more decentralised in nature.

The main research question of this paper is that in a decentralised setting
without a central authority, how to design a trust framework that regulates and
incentivises the participation of an ecosystem of identity issuers, which can be
trusted by identity veriﬁers?

Our main contributions are in two areas of self sovereign identity:

– propose a trust registry framework that regulates a web of trust of identity

issuers which can be trusted by identity veriﬁers

– propose an incentivisation mechanism in order for the trust registry to be
adopted by identity issuers and identity veriﬁers, while minimising the risk
of misbehaviour

2 Related Work

During identity veriﬁcation, the veriﬁer receives a credential presentation prov-
ing that the credential is signed by the issuer holding the corresponding DID.
However, there might be many identity issuers for the same credential schema,
and the identity veriﬁers should not need to constantly update its local list of all
issuers’ DIDs. A veriﬁer might not trust all the issuers too. A trust framework
is necessary to govern the human trust aspect in self sovereign identity.

2.1 Credential Chaining

One of the current approaches to SSI trust framework is to use veriﬁable cre-
dentials [5]. Each valid issuer in the ecosystem holds a veriﬁable credential that
is issued by an issuer one level above it. For example, education institutions
hold a credential issued by the government that gives them the rights to issue
degrees. During veriﬁcation, the veriﬁer obtains credential proof presentation
by the identity owner. If the veriﬁer does not recognise this level-two credential
issuer, it requests another proof presentation from the credential issuer [14]. The
level-two credential issuer then presents its own credential issued by a level-one
issuer. This approach is similar to the certiﬁcates authority structure [3] widely
adopted in web server authentication.

The foreseeable practicality challenge of the approach is availability and pri-
vacy. To verify credentials, veriﬁers need to create a communication channel with
the issuer(s) in order to climb up the hierarchy and verify credentials. This will
only work if the issuers’ agents are always available to prove their own identi-
ties. Apart from that, privacy of identity owners decreases as issuers can now
correlate the services that the owners access. Issuers gain more control, moving
SSI as a user-centric identity model to an issuer-centric model.

Bottom-up Trust Registry in Self Sovereign Identity

3

2.2 Centralised Trust Registry

A more centralised approach to address the issue of trust in issuers is to have a
trust registry that is managed by a trusted authority [5]. The trusted authority
determines which issuers can be listed in the registry. During credential veriﬁ-
cation, the veriﬁers query the trust registry, where the trusted authority returns
whether the credential issuer is listed in the registry. One drawback of such an
approach is that all the veriﬁers need to trust the single authority to govern the
registry, which is often not possible nor desirable in many use cases. If the single
authority has biased interest or malicious intent, the trustworthiness of the en-
tire registry will collapse. While there could be multiple trusted authorities that
govern the trust registry instead of one, trust is still dependent on a small set of
entities.

3 Bottom-up Trust Framework Design

We designed a bottom-up trust framework. There are four direct stakeholders
for the trust framework, namely the issuers, veriﬁers, credential holders and
maintainers. The issuers issue credentials to credential holders, who are then
able to present these credentials to the veriﬁers. The maintainers are speciﬁc to
our trust framework design, where they are tasked to maintain the privacy of
the trust registry and facilitate the incentivisation mechanism.

From a high-level view, we use a directed graph of issuers to build a web of
trust. Veriﬁers can compute their level of trust to a particular issuer by traversing
the directed graph. To compute the level of trust, veriﬁers need to pay a fee to a
smart contract governing the graph, where the fee will be distributed to issuers.
This is to incentivise issuers to issue credentials and form edges with other issuers
in the web of trust. An overall protocol architecture is shown in Figure 1.

3.1 Trust Registry Design

For the bottom-up trust registry, we designed a directed graph that connects
identity issuers with other issuers that they trust. An example graph is shown
in Figure 2. The graph can be represented as G = (V, E) where V is a set of
identity issuers represented by their DIDs, while E is a set of directional edges
connecting the issuers:

– V = {v1, v2, . . . . . . , vn} where n is the number of issuers listed in the registry.
– E = {eij . . . . . . , } where eij is the edge connecting from vi to vj and carries

a weight of between 0 and 1

An edge of eij means that issuer vi trusts issuer vj by a weight, where higher
weight indicates higher level of trust. The trust is strictly one-way, therefore eij
is not the same as eji. The value of the weight that is assigned is based on the
risk that issuer vi is willing to take on behalf of issuer vj, which is explained in
more details in Section 4.2.

4

K. Eer et al.

Fig. 1. System architecture that shows interaction of trust registry with diﬀerent par-
ticipants. The trust graph is kept private by utilising a private blockchain maintained
by independent maintainers, in order to preserve privacy of issuers and set up an in-
centivisation mechanism.

By implementing the graph as a smart contract, we promise the transparency
and immutability of the graph as long as the majority of the blockchain validators
are honest. Identity issuers ﬁrst need to stake an amount of tokens to be listed
in the public graph. This is to disincentivise malicious behaviours, where in the
event of such behaviour, the involved issuer will lose its stake. Besides that,
identity issuers also need to prove in control of the private key corresponding to
their DIDs by creating digital signatures.

Fig. 2. An example trust graph that connects the identity issuers. Each edge has a
weight which represents the trust score from the source issuer to the destination issuer.

3.2 Privacy Design

We suggest that the web of trust of identity issuers should be conﬁdential. An
identity issuer might want to keep the weight of an edge that it forms with other

Bottom-up Trust Registry in Self Sovereign Identity

5

issuers private, for example, to avoid blackmailing. Therefore, the smart con-
tract which forms the directed graph is deployed on a private and permissioned
blockchain. For ease of reference, we will specify the private blockchain validators
as maintainers going forward. The maintainers are independent third parties
that help to maintain the privacy of the graph and transactions related to it.

As the graph is computed using a private blockchain run by a small set of
maintainers, inevitably it becomes less decentralised. To improve on the trust-
worthiness, the maintainers have to publish a commitment on the state of the
directed graph on a public smart contract at constant timestep. During veriﬁca-
tion, veriﬁers are able to compare the partial state returned by the maintainers
with the commitment to verify the validity.

The commitment is in the form of a merkle tree root. The commitment is
updated at a constant time interval, in which we name the time interval as epoch
in this paper. At each epoch, the maintainers collect all the edges E formed in
the graph and put them into a merkle tree data structure. Each edge is in the
form of ‘source-destination:score’. For example, ‘issuer1-issuer2:0.9’ means that
issuer1 trusts issuer2 by a score of 0.9. Once the merkle tree is formed, the
maintainers create a multi-signature on the merkle tree root and publish it in a
public smart contract.

3.3 Private Blockchain Relay Server

The state of a private blockchain is only accessible by its validators, therefore
anyone outside the set of validators does not have read and write permission
to the blockchain. We introduce the use of relay servers as the bridge between
external actors such as issuers and veriﬁers with the private blockchain. The relay
servers are whitelisted as validators in the private blockchain. When external
actors call a function in the private smart contract, they create a digital signature
using their DID’s private key on the function calls and send it to the relay servers.
The relay servers then make the function call on their behalf to the private smart
contract. This architecture is inspired by the Ethereum gas station network by
OpenGSN [1].

4 Credential Veriﬁcation

4.1 Traversing the Graph during Veriﬁcation

Each veriﬁer has its own list of trusted issuers. During veriﬁcation, if the veriﬁer
receives a credential proof issued by an issuer it doesn’t recognise, the veriﬁer
queries the private blockchain to derive the level of trust. The veriﬁer speci-
ﬁes three arguments, which are its trusted issuers, the credential issuer and a
threshold for the trust score.

Only maintainers have access to the directed graph. When veriﬁers make a
verifcation request (through the relay server), the maintainers return the shortest
path in the directed graph that starts from the trusted issuers speciﬁed by the

6

K. Eer et al.

veriﬁers and ends at the credential issuer that is above the threshold score.
The path is calculated with a breadth ﬁrst search algorithm. The trust score is
calculated by multiplying the weights of the edges through the path. The reason
for using mutiplication is to calculate the transistive trust score, as described in
[10]. If the score is higher than the threshold score speciﬁed by the veriﬁer, there
is a valid path. If there are two or more paths that have the same path length,
the path with the higher trust score is returned. If these paths have the same
trust score, a path is randomly picked out of these paths to ensure fairness.

Recall that at every epoch, maintainers have to publish a merkle tree root
commitment of the state of the graph. Once the maintainers have found a valid
path, the maintainers generate a proof for each of the edges that forms the path.
The maintainers return all the edges that form the path and their corresponding
merkle tree proofs. The veriﬁers are able to check that these edges are accumu-
lated in the merkle tree by verifying the proofs with the merkle tree root stored
in the public smart contract. However, there could be privacy concern depending
on use cases by simply revealing the edges that forms the path. We propose a
alternative described in Section 6.

4.2 Economic Incentive Design for Trust Registry Participants

A common challenge for SSI is the lack of incentivisation for issuers. Unlike
federated identity providers like Google who collect users behavourial data in
exchange for providing free identity service, the privacy by design nature of
SSI excludes issuers’ involvement during the veriﬁcation process, removing their
source of beneﬁts.

In our work, we propose that veriﬁers make a payment P to the trust reg-
istry when making a veriﬁcation query. This is logical as veriﬁers beneﬁt from
the SSI ecosystem, where they receive convenience and security when accepting
credentials issued by trusted issuers. In traditional identity veriﬁcation, veriﬁers
usually have to pay the identity issuers directly too. Example of identity issuers
are Onﬁdo3 and Jumio4. There are two criterias that we aim to achieve for a
trustworthy trust registry:

– Issuers are incentivised to issue credentials
– Issuers are incentivised to form edges with other issuers in the trust graph,

but only with issuers that they truly trust

An issuer receives 0.5P for every veriﬁcation query where it is the credential
issuer, therefore they are incentivized to issue more credentials. When the main-
tainers return a shortest path in the graph that connects the veriﬁers’ trusted
issuers to the credential issuer, all issuers along the path receive an equal share
of the remaining 0.5P paid by the veriﬁer. Thus, issuers are incentivised to form
edges with other issuers, as it increases the chances that they are on a valid path
during a veriﬁcation query to the trust registry. Issuers are also incentivised to

3 https://onﬁdo.com/
4 https://www.jumio.com/

Bottom-up Trust Registry in Self Sovereign Identity

7

form an edge with a higher trust score to increase the probability that the path
is a valid path with overall trust score higher than the threshold score submitted
by the veriﬁer.

For the trust registry to be trustworthy, we propose a staking mechanism for
the issuers as the protocol governance, inspired by [2]. Issuers have to stake a
minimum of T tokens in order to be listed in the trust graph. A veriﬁer that
makes a veriﬁcation query to the trust registry is able to challenge the credential
issuer if it deems that the credential is issued maliciously. The maintainers then
take a vote. If the challenge is successful, the credential issuer loses T tokens,
while other issuers that are connected directly adjacent to the issuer lose T * s
tokens based on the trust score s that they form with the credential issuer. The
stake tokens lost by the issuers are distributed to the veriﬁer as compensation.
With this mechanism, issuers are able to quantify the amount of risk they are
willing to take on other issuers based on the trust score s they assign [11].

When the issuers lose some stake tokens, its staking token balance in the
trust registry might go below the minimum T tokens required. These issuers
need to top up the number of staking tokens to meet the minimum requirement,
otherwise the maintainers remove the issuers from being a node in the trust
graph. In such a scenario, the issuers will not earn any more rewards from future
veriﬁcation queries.

5

Implementation

We use a proof-of-authority (PoA) blockchain for the private blockchain, where
each blockchain validator needs to have its identity veriﬁed before being allowed
to participate. We set up an EVM private blockchain using the Hyperledger Besu
framework to prototype our proposed design. The reason for using Hyperledger
Besu is its capabilities to form a privacy group, where smart contracts in the
privacy group and their corresponding transactions are protected from the public
[8]. This private blockchain is used to maintain the state of the directed graph.
In our work, we use four independent maintainers as the validators.

We use the Kovan blockchain (an Ethereum testnet) as the public blockchain.
The smart contract Registry.sol which stores the directed graph is deployed on
the private blockchain. The smart contract MerkleProof.sol which records the
merkle tree root is deployed on Kovan and can be viewed on a block explorer
such as Kovan Etherscan5.

6 Proposed Improvements

We explore the use of zero knowledge proofs [4] to reduce the trust needed
on maintainers and limit the revealed information to the veriﬁers. Our current
protocol relies on the maintainers to reveal a valid path and its corresponding

5 https://kovan.etherscan.io/address/0xc4516FD2317210a278da78F06f7F1CeBC495A4a8

8

K. Eer et al.

merkle proofs when a veriﬁer makes a veriﬁcation query. The protocol also relies
on the maintainers to distribute the veriﬁcation fees to relevant issuers.

With the use of non-interactive zero knowledge (NIZK) proofs, maintainers
are able to prove that they distribute the veriﬁcation fee honestly. The proposed
protocol is as follows, although we have not analysed this in details and is left
as future work:

1. Maintainers keep a record of the balances of each issuer. The balances are
stored in a merkle tree data structure, and the merkle tree root is recorded
on a public smart contract.

2. The veriﬁer pays the veriﬁcation fee to a public smart contract, and subse-
quently makes a veriﬁcation query to the maintainers, stating the trusted
issuer, the credential issuer and the threshold trust score in order for the
veriﬁcation to be accepted.

3. The maintainers ﬁrst check that the veriﬁer has made the payment to the
public smart contract. Then, the maintainers generate a NIZK proof to prove
the existence of a valid path between the trusted issuer and credential issuer.
The maintainers update the balances of issuers that are part of the valid
path, giving rise to a new merkle tree. The NIZK proof also encapsulates
that the balances of issuers are updated correctly. The maintainers update
the new merkle tree root on the public smart contract and also publish the
zero knowledge proof.

4. Time is divided into epochs, for example an epoch could be one month.
During that epoch, steps 2 and 3 are repeated whenever a veriﬁer makes a
veriﬁcation query.

5. At the end of the epoch, the maintainers reveal the balances of all the issuers.
The correctness of these balances can be veriﬁed through the merkle tree root
and the NIZK proofs generated previously.

6. Once the balances are revealed, issuers are able to claim their corresponding

payments from the public smart contract.

The program used to generate the zero knowledge proof is described in Al-
gorithm 1, where it ﬁrst veriﬁes that these edges are accumulated in the graph
merkle tree, and lastly veriﬁes that the balances of the issuers are updated cor-
rectly based on the edges.

With this proposed use of zero knowledge, we are able to reduce the trust
on maintainers. If the maintainers coerce and update the issuers’ balance ma-
liciously, it is detectable as the correctness of the zero knowledge proof will be
false. We maintain the privacy of the veriﬁcation queries as the balances of the
issuers are aggregated and only revealed at the end of an epoch, therefore it is
diﬃcult to correlate veriﬁcations to issuers in the directed graph, provided there
is a large enough number of issuers in the graph [9]. The tradeoﬀ to this ap-
proach is the reduction in scalability, as maintainers need to update the merkle
tree root of the balances in the public smart contract for each veriﬁcation query.
Generating non-interactive zero knowledge proofs are also costly.

Bottom-up Trust Registry in Self Sovereign Identity

9

Algorithm 1 Generate zero knowledge proof on existence of valid path and
correct update of issuers’ balance
Require: edges, balances, proofedges
(cid:46) private inputs
Require: source, destination, rootgraph, rootbalance(previous), rootbalance(updated),
(cid:46) public inputs
threshold
(cid:46) credential issuer gets half of the veriﬁcation fee
Pcred ← 0.5P
Pothers ← 0.5P/edges.length (cid:46) other issuers along the path gets the remaining half
verify that edges is a valid path from source to destination and above threshold
verify balances corresponds to rootbalance(previous)
for edge in edges do

verify edge accumulated in rootgraph by comparing against proofedges
issuer ← edge.issuer
if issuer is credential issuer then

(cid:46) get the destination issuer in the edge

add Pcred to its balance

else

add Pothers to its balance

end if

end for
verify that updated balances corresponds to rootbalance(updated)

7 Conclusion

Self sovereign identity (SSI) is an emerging ﬁeld in this time where the world is
undergoing rapid digital transformation. It oﬀers a privacy-centric solution where
users are always in control of their data, in terms of what data they consent to
sharing and with whom. However, it is important to understand that human
trust is still the underlying factor under the technology. Anyone is able to vouch
for the correctness of a particular piece of data, however the trustworthiness
of the vouched data depends on the reputation of the issuer. In a multi-party
system where multiple issuers and veriﬁers exist, there is a need for a trust
registry to manage the human trust layer of these diﬀerent entities.

Our work introduces a bottom-up approach for a self sovereign identity trust
registry using the web of trust model. For the trust registry to be adopted, we also
introduce an incentivisation mechanism such that all direct stakeholders of the
trust registry are incentivised to perform proactively and honestly. In comparison
to the current common design and protocols for SSI trust registries, we are able
to oﬀer an alternative method, which can be useful in certain use cases where
there is no single source of truth to verify the validity of the credential issuers.

7.1 Future Work

As mentioned in Section 6, the zero knowledge extension to our protocol is not
fully experimented and evaluated yet. Besides that, our protocol currently relies
on the maintainers to preserve the privacy of the directed graph. It is possible
to use the technique of homomorphic encryption [13] in cryptography such that
the directed graph is stored in an encrypted decentralised storage, and changes

10

K. Eer et al.

to the state of the graph can be made without revealing the graph itself. This
makes it harder for a malicious maintainer to reveal the directed graph outside of
the protocol, however the tradeoﬀ is scalability. Other possible approaches worth
exploring further include using secure multi party computation [6] to compute
the trust score in the directed graph, removing the need for maintainers to answer
veriﬁcation queries. Related work is [7].

Our incentivisation mechanism relies on the veriﬁers paying a small fee to
make a veriﬁcation query. It is worth exploring diﬀerent economic interactions
such as the credential holder being the fee-paying entity. A game theory approach
to validate the incentivisation mechanism will deﬁne clearer parameters too.

References

1. Opengsn gas station network. https://docs.opengsn.org/#architecture, accessed:

2022-02-25

2. Asgaonkar, A., Krishnamachari, B.: Token curated registries-a game theoretic ap-

proach. arXiv preprint arXiv:1809.01756 (2018)

3. Becker, G.: Merkle signature schemes, merkle trees and their cryptanalysis. Ruhr-

University Bochum, Tech. Rep 12, 19 (2008)

4. Blum, M., Feldman, P., Micali, S.: Non-interactive zero-knowledge and its appli-
cations. In: Providing Sound Foundations for Cryptography: On the Work of Shaﬁ
Goldwasser and Silvio Micali, pp. 329–349 (2019)

5. Davie, M., Gisolﬁ, D., Hardman, D., Jordan, J., O’Donnell, D., Reed, D.: The trust
over ip stack. IEEE Communications Standards Magazine 3(4), 46–51 (2019)
6. Du, W., Zhan, Z.: A practical approach to solve secure multi-party computation
problems. In: Proceedings of the 2002 workshop on New security paradigms. pp.
127–135 (2002)

7. Dumas, J.G., Lafourcade, P., Orﬁla, J.B., Puys, M.: Dual protocols for private
multi-party matrix multiplication and trust computations. Computers & security
71, 51–70 (2017)

8. Hasan, H.R., Salah, K., Jayaraman, R., Yaqoob, I., Omar, M.: Blockchain archi-
tectures for physical internet: A vision, features, requirements, and applications.
IEEE Network 35(2), 174–181 (2020)

9. Impagliazzo, R., Naor, M.: Eﬃcient cryptographic schemes provably as secure as

subset sum. Journal of cryptology 9(4), 199–216 (1996)

10. Jøsang, A., Gray, E., Kinateder, M.: Simpliﬁcation and analysis of transitive trust
networks. Web Intelligence and Agent Systems: An International Journal 4(2),
139–161 (2006)

11. Litos, O.S.T., Zindros, D.: Trust is risk: a decentralized ﬁnancial trust platform.
In: International Conference on Financial Cryptography and Data Security. pp.
340–356. Springer (2017)

12. M¨uhle, A., Gr¨uner, A., Gayvoronskaya, T., Meinel, C.: A survey on essential com-
ponents of a self-sovereign identity. Computer Science Review 30, 80–86 (2018)
13. Naehrig, M., Lauter, K., Vaikuntanathan, V.: Can homomorphic encryption be
practical? In: Proceedings of the 3rd ACM workshop on Cloud computing security
workshop. pp. 113–124 (2011)

14. Preukschat, A., Reed, D.: Self-sovereign identity. Manning Publications (2021)
15. Tobin, A., Reed, D.: The inevitable rise of self-sovereign identity. The Sovrin Foun-

dation 29(2016) (2016)

