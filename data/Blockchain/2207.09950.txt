MeritRank: Sybil Tolerant Reputation for
Merit-based Tokenomics*

Bulat Nasrulin, Georgy Ishmaev, Johan Pouwelse
Delft University of Technology
{b.nasrulin, m.a.devos-1, g.ishmaev, j.a.pouwelse,}@tudelft.nl

2
2
0
2

l
u
J

0
2

]

C
D
.
s
c
[

1
v
0
5
9
9
0
.
7
0
2
2
:
v
i
X
r
a

Abstract—Decentralized reputation schemes present a promis-
ing area of experimentation in blockchain applications. These
solutions aim to overcome the shortcomings of simple monetary
incentive mechanisms of naive tokenomics. However, there is a
signiﬁcant research gap regarding the limitations and beneﬁts of
such solutions. We formulate these trade-offs as a conjecture on
the irreconcilability of three desirable properties of the reputation
system in this context. Such a system can not be simultane-
ously generalizable, trustless, and Sybil resistant. To handle
the limitations of this trilemma, we propose MeritRank: Sybil
tolerant feedback aggregation mechanism for reputation. Instead
of preventing Sybil attacks, our approach successfully bounds
the beneﬁts of these attacks. Using a dataset of participants’
interactions in MakerDAO, we run experiments to demonstrate
Sybil tolerance of MeritRank. Decay parameters of reputation in
MeritRank: transitivity decay and connectivity decay, allow for
a ﬁne-tuning of desirable levels of reputation utility and Sybil
tolerance in different use contexts.

Index Terms—Reputation, Sybil attack, Tokenomics, Feedback

Aggregation

I. INTRODUCTION

Reputation mechanisms in blockchain applications can pro-
vide many desirable properties as system components. In gen-
eral, reputation mechanisms can be employed at different lay-
ers of blockchain systems: protocols layer e.g Delegated Proof-
of-Stake [1], middleware e.g. MEV-Boost [2], and most promi-
nently at the application layer of Decentralized Autonomous
Organizations (DAOs) [3]–[6]. However, the implementation
of reputation-based incentives is still not well researched and
rife with challenges. There is a deﬁcit of systematic under-
standing regarding general trade-offs of different approaches
to reputation. The most prominent research gap in this context
is the issue of Sybil attacks, a problem well known in peer-to-
peer protocols [7]. This problem presents a signiﬁcant barrier
to the implementation of reputation systems proposed as a way
to address the limitations of simple tokenomics [?], [9].

Token-based incentives became one of the most prominent
mechanisms in blockchain protocols, solving a number of open
incentivization problems in peer-to-peer networks, such as
network liveness, network security, and open-sources software
maintenance. Experimentation with these mechanisms has
contributed to the emergence of a subﬁeld in the blockchain
design space, sometimes labelled ‘tokenomics’. In fact, all
prominent application cases for blockchain protocols, includ-
ing cryptocurrencies, Decentralized Finance (DeFi), DAOs,

and Non-Fungible Tokens (NFTs), employ these incentives
mechanisms at different levels of abstraction [11].

Limits of such incentives, however, are only slowly becom-
ing apparent with empirical observations. One is a misalign-
ment of incentives that monetary incentives create between
different participants in more complex systems [13], [14]. The
second limitation is the vulnerability of governance schemes
built on naive monetary incentives [15]. Finally, token-based
incentives in blockchain protocols disproportionately reward-
ing large holders tend to encourage re-centralization in decen-
tralized networks [16]. Allocation of rewards for participants1
of decentralized protocols based on merits or contributions
reﬂected in their non-transferable ’reputation’ offers an ap-
pealing approach to overcome these limitations. Merit-based
rewards can provide alignment of incentives for participants in
complex communities and allow for a sustainable distribution
of resources [17].

This paper aims to contribute to the theoretical research gap
on trade-offs of different reputation solutions and propose a
practical, scalable Sybil tolerant reputation mechanism scheme
in decentralized networks. We propose and demonstrate feasi-
bility on the experimental basis of MeritRank: Sybil-tolerant
Aggregated Feedback Reputation Mechanism, compatible with
token-based incentive mechanisms. Our contributions are the
following:

• We analyze and formulate general

trade-offs between
desirable properties of reputation in decentralized settings
as decentralized reputation trilemma in section II.

• We describe the system model for logic and key com-
ponents for reputation-based distribution of rewards in a
generic DAO in section III.

• We present the formalization of MeritRank and three
types of reputation decay as a method to achieve tolerance
against Sybil attacks to manipulate feedback aggregation
reputation in section IV.

• Using experiments on data set from more than 150 weeks
of user interactions in MakerDAO, we demonstrate that
transitivity decay and connectivity decay provide high
tolerance against Sybil attacks on reputation. Another
experimental ﬁnding is that epoch decay, implemented in
other reputation mechanisms [6] worsens Sybil tolerance
(section V).

*pre-print BRAINS confrence, Paris, September 27-30, 2022

1We use terms: participant, node and peer interchangeably.

 
 
 
 
 
 
a generalizable approach as oracles can take any input for
reputation function [21]. The problem of Sybil resistance can
be addressed with a task of Sybil detection outsourced to an
oracle verifying the identities of participants [30].

that oracles use correct

Participants have to trust

input
and provide honest outputs on reputation function, which
undermines the trustless properties of a decentralized system.
Furthermore, dependency on oracles introduces points of fail-
ure in a system that can be exploited, as demonstrated by price
oracles in DeFi [31]. Attempts to provide trustless properties
to oracles essentially create a peer prediction market. However,
this reduces their applicability to a set of cases where agree-
ment on reputation can be achieved through social consensus
voting, thus sacriﬁcing generalizability [32].

Cryptographic Proofs. Another popular tool in reputation
accounting is a method of cryptographic proofs, that can be
employed to address the problem of Sybil attacks. Each peer
performs some contribution or work veriﬁable by any other
peer in the network. Peers keep track of their and others’ rep-
utation scores, generating proofs of contributions and sending
them to all other peers in the network. After validating the
proofs, clients update their reputation scores. A Sybil attack
is undermined by the requirement to provide veriﬁable proof of
contribution. Such a solution can be trustless and decentralized
since no single party is responsible for reputation accounting.
limitations
this approach also has signiﬁcant
regarding generalizability of application. Certain types of
contributions like computation work, proof of bandwidth,
proof of transaction, or proof of storage allow for accounting
mechanisms based on cryptographic proofs, where contribu-
tion accounting can be trustless and universally veriﬁable.
However, this type of accounting does not grasp semantics
for all types of collaborative work and human contributions
Furthermore, even in those application cases where such type
of accounting is conceptually meaningful, practical scalability
can be hampered by the high overhead [?].

However,

Feedback Aggregation. A peer-to-peer reputation is an
approach where participants interact with each other, each
giving feedback on the contribution or work provided by
others. The resulting reputation is computed by aggregating
feedback from participants.

The main beneﬁts of this approach are generalizability and
the absence of trusted third parties. Peer-to-peer feedback
makes such an approach feasible for various application-
speciﬁc contexts, as peers can provide context-speciﬁc feed-
back on any interaction or work. Unlike the cryptographic
proofs approach, feedback aggregation does not introduce high
costs from overhead. However, the big disadvantage of this
approach is that it is susceptible to manipulation, especially
through Sybil attacks [35].

B. Sybil tolerant feedback aggregation

The observations based on the reputation trilemma necessi-
tate a solution for reputation systems in decentralized environ-
ments that do not sacriﬁce completely one of the corners of this
triangle. Hard scalability limitations for Cryptographic Proofs,

Figure 1: Reputation mechanism trade-off triangle. A reputa-
tion mechanism can be only one of the two: Generalizable,
Sybil resistant, Trustless.

II. BACKGROUND AND RELATED WORK

Reputation systems in decentralized environments have been
proposed for various application-speciﬁc cases, and as general
models in peer-to-peer systems [18]–[23]. Accordingly, the
limitations of these solutions are relatively well-understood.
Some of these limitations include scalability [21], contextual
accuracy [20], partial reliance on trusted-setups [20], [21],
vulnerability to certain types of attacks [24]–[28], and sig-
niﬁcant privacy trade-offs [22]. However,
there is also an
identiﬁable research gap regarding general trade-offs inher-
ent to any reputation systems implemented in decentralized
environments. We identify only a small number of surveys
on reputation solutions in decentralized settings [20], [21],
with only limited comparative trade-off analysis [22]. The
absence of engineering research on reputation in the context of
tokenomics and DAOs is characterized by the general deﬁcit
of academic research in this area [29].

A. Decentralized Reputation Trilemma

We formulate these trade-offs as a conjecture on the irrecon-
cilability of three desirable properties of the reputation system
in this context. Such a system can not be simultaneously gen-
eralizable, trustless, or Sybil resistant. The trustless property
means that reputation accounting and evaluation does not rely
on speciﬁc trusted entities. In a fully Sybil-resistant reputation
system, the attacker cannot unfairly manipulate the reputation
system by controlling multiple identities [35]. Generalizable
reputation system allows to account and evaluate any type of
participants’ contribution.

All proposed reputation mechanisms inevitably sacriﬁce one
of these properties to achieve two others,
thus forming a
Decentralized Reputation Trilemma as illustrated in ﬁgure 1.
To illustrate this problem, we look into three conceptually
different methods to implement reputation.

Trusted Oracles. This reputation method is based on some
trusted oracle keeping track of reputation scores. In the context
of a decentralized system, such an oracle can take input
from the actions of participants to calculate their reputation
scores based on a pre-determined reputation function. This is

Figure 2: Merit-Based Tokenomics system model

and fundamental nature of limitations presented by Trusted
Oracles suggest that the Feedback Aggregation side presents
the most feasible direction to achieve acceptable trade-offs.

In the context of open, permissionless systems, strict Sybil
resistance is not achievable entirely [36]. Furthermore, at-
tempts to emulate Sybil resistant properties of closed systems
undermine the privacy of participants and other desirable prop-
erties of decentralized solutions. Different approaches can be
used to minimize the impact of Sybil attacks on peer feedback-
based reputation: Sybil detection and Sybil tolerance [37], [38].
The efﬁciency of Sybil detection, in general, is limited by the
assumptions on the behavior of Sybil nodes that is distinctively
different from the behavior of honest nodes in the network,
which is not necessarily always the case [36].

identities but

Sybil tolerance for aggregated feedback reputation mecha-
nisms is a system property evaluated in the context of speciﬁc
Sybil attacks on reputation. Sybil tolerance does not try to
identify and ﬁlter Sybil
instead limits their
impact on the system. This approach allows for straightforward
application in those cases where impact can be evaluated in
consumed system resources, e.g., rewards pool in a DAO
treasury. We also demonstrate in Section V that two properties
of this approach suggest its feasibility. (1) Tolerance thresh-
old remains constant with the increase in the size of Sybil
participants. (2) Threshold can be adjusted for different fair-
ness and accuracy levels depending on reputation’s contextual
semantics.

III. MERIT-BASED TOKENOMICS

In this section, we present a system model for merit-
based tokenomics. This model is generic and does not make
assumptions about implementation details. It can describe a
reputation system for the participants of a generic DAO,
where peers provide feedback to each other resulting in a
reputation ranking that can be used to distribute rewards from
DAO treasury proportionally to accrued reputation. Figure 2
represents the logic and key components of the system model.

A. System Model

Accounting mechanism. We assume that peers observe and
evaluate each others’ contributions. The evaluation is recorded
in a personal ledger. We model the interaction between peers
as a directed graph G = (V, E, w), called the feedback graph.
An edge (i, j) ∈ E is directed from i to j and total feedback

Figure 3: Example of feedback graph G. Edge represent the
sum of evaluations made by the participant about another
participant.

given to j by i. We model the feedback as a special token
value, which accumulates with time. Peers perform some
work contributing to the community; as a result, they receive
feedback from other peers. The function w : V × V → R≥0
denotes the weight of the edges and shows the total feedback
received.

An example of a feedback graph is presented in Figure 3.
The weights of the edges are cumulative weighted feedback
from participants. Our model
is agnostic to the way the
feedback graph is formed or how the graph weights are chosen.
Speciﬁc semantics of feedback are left out of the scope of
the model. Some examples may include code contributions,
governance proposals, or a rating assigned to j based on
the reactions of i on Github [39]. An accounting mechanism
can be implemented with middleware that deﬁnes feedback
semantics and records evaluations in a personal ledger, similar
to SourceCred [5].

Gossip mechanism. We assume that there is a way for
the peer to discover the feedback graph, for example, through
a gossip protocol. While we acknowledge that reputation
mechanisms in distributed systems face problems, such as the
incompleteness of information about peer interactions, peer
discovery, etc., we disregard these issues assuming that global
information is available through a fault-free gossip protocol.
Practical
implementation may use overlay for peer-to-peer
gossip similar to [40].

Reputation mechanism. A reputation mechanism assigns
some reputation scores for every known node in the feedback
graph. In principle, a reputation score reﬂects the level of
contributions made by the node compared with others.

Deﬁnition III.1 (Reputation score). A reputation score
R(G, j) is a value assigned to node j given known feedback
graph G:

R(G, j) ∈ R ∀j ∈ V

We refer to R(G) as a set of reputation scores for all
nodes in the graph G. The reputation score is computed by
aggregating the feedback from all nodes in the graph.

Allocation mechanism. Reputation mechanisms are used
as an input for some allocation policy that decides, given
a set of nodes to whom distribute the reward. For model
simplicity, it is assumed that allocation happens automatically
per each epoch without participants’ actions. Participants may

claim tokens from the reward pool for each epoch in practical
implementation, corresponding to their reputation at the end
of each epoch.

Deﬁnition III.2 (Allocation policy). An allocation policy A
returns rewards given the feedback graph G and reputation
scores Ri(G):

Ai(Ri(Gi), j) ∈ R

We do not make any assumptions about

the allocation
policies but assume that nodes holding a high reputation score
are more likely to receive rewards or receive higher rewards.
One example of an allocation is winners-take-all, in which
the top ten nodes with the highest reputation receive all the
rewards. Another example of allocation policy is the quadratic
distribution [9], in which nodes receive proportionally less
with the increase in reputation. Different policies will have
different application ﬁt, but discussion on speciﬁc properties
is out-of-scope.

Dynamic model. To capture the diachronic nature of con-
tributions and rewards we consider epochs. This reﬂects the
semantics of reputation which accumulates over time. One
epoch represents one full cycle of system model shown in
Figure 2. We use superscript
to refer to the epoch. For
example, G(τ ), for the feedback graph at epoch τ ≥ 0.

B. Sybil Tolerance Model

We model a Sybil attack as a strategic, in a sense that
the attacker is interested in receiving as many rewards with
only a small amount of work. It does this by creating fake
identities and fake edges connecting identities it controls with
one another. The weights of the edges in the Sybil region
can be chosen arbitrarily by the attacker. We assume that the
attacker knows which reputation algorithm is used and can
execute an optimal attack on the given reputation mechanism.

Deﬁnition III.3 (Sybil Attack). Given the feedback graph
G = (V, E, w), an attacker j performs a Sybil attack σS by
introducing the following elements to the graph:

• A set of Sybil identities S = {j, s1, . . . , sm}, each of
which is called a Sybil and is indistinguishable from an
honest node by other nodes.

• A set of Sybil edges ES ⊂ S × S with edge weights

wS : S × S → R≥0.

• A set of attack edges Ea with weights wa : V × S →

R≥0.

After the attack has been carried out, we obtain a modiﬁed

feedback graph, denoted G(cid:48) := G ↓ σS.

Sybil attack beneﬁt. The attacker is allowed to create
arbitrarily many Sybil nodes and fake edges between Sybils.
However, we require any edge between honest nodes V and
Sybils S to be a real transaction. Therefore, we assume that
the attacker also makes contributions to receive feedback
from honest nodes in order to create an edge connecting the
attacker’s identities to the honest part of the network. To
maximize the beneﬁt of such, the attacker might decide to
get feedback from a highly reputable node via its attack edge.

Due to dynamic nature of allocation we use reputation
scores as proxies for cost and proﬁt of the Sybil attack. The
proﬁt for the Sybil attack σS given the modiﬁed feedback
graph G(cid:48) is deﬁned as:

ω+(σS) =

(cid:88)

R(G(cid:48), s)

s∈S\{j}

The cost for the Sybil attack is deﬁned as reputation gained
through honest work through attack edges Ea. Given an
modiﬁed graph G(cid:48)(cid:48) = (V ∪ S, E ∪ Ea, w) the cost is deﬁned
of the Sybil attack is deﬁned as:
(cid:88)

ω−(σS) =

R(G(cid:48)(cid:48), s)

s∈S

We model the Sybil-Tolerance as a bound on the beneﬁt that
the attacker can gain through a Sybil attack σS on feedback
graph G. A reputation mechanism R is Sybil
if
the gain after performing a Sybil attack is limited by some
constant c ≥ 0:

tolerant

ω+(σS)
ω−(σS)
IV. MERITRANK: SYBIL TOLERANT REPUTATION
MECHANISM

lim
|S|→∞

≤ c

This section introduces a generic Sybil tolerant modiﬁcation
to the ﬂow and walk-based reputation mechanisms. We brieﬂy
demonstrate the limits to Sybil tolerance for these types of
reputation mechanisms. We propose three modiﬁcations that
limit the gain from a Sybil attack.

A. Sybil Tolerance of Existing Reputations

We consider reputation mechanisms that satisfy the fol-
lowing requirements: 1.) The reputation mechanism should
be a graph-based measure of centrality, 2.) It should work
without requiring any central third party, and lastly, 3.) It
should reward contributors.

Naive approaches that are based on simple global cen-
tralities, such as vertex degrees, are easily manipulable. In
fact, even complex global reputation mechanisms, such as
PageRank, are not Sybil
tolerant [24]. Such vulnerability
trivially follows from the fact that any node in the network can
gain a reputation by adding any new edge. Thus, the attacker
can unboundedly gain beneﬁts from the Sybil attack without
the need to create any attack edge.

To address this issue, personalized reputation mechanisms
were proposed [42]. A personalized reputation mechanism
assigns a positive reputation to the node j only if there is a
path from a seed node i to the node j. This, in turn, provides
inherent tolerance to a simple Sybil attacks, as participants
need to perform some work to establish a path.

We analyze three generic reputation mechanisms previ-
ously reported to be Sybil
tolerant. Speciﬁcally, we con-
sider MaxFlow [44], personalized PageRank [43], personalized
Hitting Time [42]. We, however, show that these reputation
mechanisms are vulnerable to the Sybil attack as deﬁned in
III.3. To illustrate their vulnerabilities, we present three Sybil

(a) Cycle attack

(b) Serial attack

(c) Parallel attack

Figure 4: Sybil attack strategies. A beneﬁcial Sybil attack is a combination of these three strategies.

strategies in Figure 4. These strategies, when combined, cover
all Sybil beneﬁcial strategies as shown in [23].

Personalized PageRank: The personalized PageRank algo-
rithm (PPR) with source node i and reset probability α ∈ [0, 1]
on feedback graph Gi is given by the steady-state probability
that an α-terminating random walk initiated at i arrives at j. In
practice, personalized PageRank is implemented as a random
walk-based reputation, counting the number of encounters in
a random walk.

The Sybil-Tolerance of PPR follows from its damping factor
α, which comes at the cost of reputation’s accuracy. The most
effective way to attack PageRank is to use cycles with big
weights. The attack is shown in the Figure 4a. The cycle attack
goes as follows: The attacker inserts one Sybil identity and
adds two edges forming a cycle between the Sybil through
its Sybils and, as a result, increasing the total number of
encounters in a random walk.

Personalized Hitting Time: Given a feedback graph G,
the personalized Hitting Time (PHT) algorithm is given by
the probability of an α-terminating random walk that starts at
i visiting node j before it terminates. As with the PageRank,
PHTs are implemented as random-walk reputation. The dif-
ference is that it accounts only for facts of node encounters in
a random walk.

PHT bounds the gains from both cycle attacks and parallel
attacks. However is still vulnerable to the serial attack (Fig-
ure 4b). The attacker can create a long path connecting all
Sybil nodes. As a result, all Sybil nodes in the path can have
a positive reputation.

MaxFlow: Given a seed node i, MaxFlow (MFW) reputa-
tion score of node j ∈ Vi is given by the maximum ﬂow of
contributions from j to i in the feedback graph G. MaxFlow
takes into account all possible ﬂows of work from the source
node to the target node. The amount a node can gain is
bounded by its aggregated contributions.

MaxFlow is vulnerable to a parallel attack shown in Fig-
ure 4c. The attacker can create multiple Sybil
identities
s1, ..., sm, with each identity gaining the same amount of
reputation, i.e., for all k = 1..m|R(G, sk) = R(G, s1).

B. Bounding the Attacks

We propose three modiﬁcations to the above-mentioned
reputation mechanisms to improve their Sybil tolerance. To
address the vulnerabilities, we require to provide bounds on
parallel reports and serial reports and provide bounds on
transitivity. Formally these bounds are deﬁned as:

• Parallel report bound. Let the attacker execute a parallel
attack or cycle attack, as shown in Figure 4, adding at
each time one Sybil identity. A reputation R is parallel

report bound if

R(G(m), sl) ≤ R(G(1), s1).

• Serial report bound. Reputation R is serial-bound if
there exists a bound on the gain after a serial attack (as

m
(cid:80)
l=1

shown in Figure 4b):

R(G(m), sl) < ∞.

m
(cid:80)
l=1

• Bounded Transitivity. Let node j received some positive
reputation R(G, j) because of the existence of the path
P (i, j). The reputation R is transitive-bound if R(G, j) ≤

min
k∈P (i,j)

(R(G, k)).

Relative feedback. To achieve parallel report bound rep-
utation each edge weight must be considered with respect
to the degree of the node. This can be achieved by mod-
in the graph G, such that, ¯w(i, j) =
ifying each weight
w(i, j)/ (cid:80)
(w(i, k)), where N (i) is the set of neighbours

k∈N (i)

of node i in the graph G.

Transitivity α decay. To achieve serial report bounds, we
introduce transitivity decays. For random walk-based reputa-
tion, we terminate the random walks at each new step with
probability α. The value of α limits the length of random
walks, limiting the effects of serial attacks.

Connectivity β decay. We increase Sybil tolerance even
further by introducing punishment for being in a separate
connected component. The intuition behind this decay is that
the attack edges, as deﬁned in deﬁnition III.3 are often bridges,
i.e., their cut creates two separate components.

We punish the nodes for forming a separate component with
a decay multiplier β. Given the feedback graph G and seed
node i, the modiﬁed reputation for node j is deﬁned as follows:

(cid:40)

Rβ(G, j) =

(1 − β) ∗ R(G, j),
R(G, j),

if Ii(j)
otherwise

(1)

, where I(i, j) is a index indicating that nodes i and j are
connected through a bridge.

In practice, the index I(i, j) is calculated based on the
proportions of random walks Tij starting from a seed node
i that reach node j through some node k in a path P (i, j).
Speciﬁcally, k is a cut vertex if the proportion of random walks
is higher that some given threshold t > 0:

Ii(j) =

max
k∈P (i,j)

|Tij(k)|

|Tij|

≥ t

(a) Gain for given reputation algorithms with α = 0.4 (b) Attacker’s gain with given α decay with |S|= 50.

Figure 5: The total reputation gain by adding Sybil nodes with transitivity α decay.

If the threshold is equal

this would indicate that
vertex k is the only one connecting i and j. The higher
the connectivity decay β, the more important the diversity of
feedback received.

to 1,

Epoch γ decay. Finally, we consider an epoch decay γ. The
attacker can gain an additional advantage by reusing an old
connection. For example, the attacker can create a few attack
edges and then, as a result, gain a positive reputation for a
prolonged period of time.

is applied to reputation values,

We provide two implementations of this decay: (1) when
the multiplier
i.e.,
Rγ(G(τ +1), i) = (1 − γ) ∗ Rγ(G(τ ), i) + R(G(∆(τ +1,τ )), i),
where G(∆(τ +1,τ )) = (V (τ +1), E(τ +1)\)E(τ )), w(τ +1)), and
(2) when the decay is applied to graph weights,
i.e.,
w(τ +1)
(i, j) = w(τ +1)(i, j) − (2 − γ) ∗ w(τ )(i, j).
γ

for

Figure 6: Attacker’s gain with β connectivity decay. We ﬁx
α = 0.4.

V. EXPERIMENTS

In this section, we show the result of a quantitative study of
the attacker manipulation of reputation by simulating multiple
Sybil attacks using real-world dataset. We show effects of
different decay values on different reputation algorithms and
resulting thresholds for Sybil tolerance.

A. Experimental Set-Up

We create a dataset from the forum of one of the biggest
DAOs to this date - MakerDAO. We parse all user interactions,
replies, likes, created posts, and votes on the proposals. The
users’ actions are recorded as contributions to the DAO
weighted in work units. Each participant is rewarded with DAI
token proportional to the reputation at each epoch. Thus the
attacker gain is directly expressed in DAI tokens.

We use weights as deﬁned in SourceCred MakerDAO
project2. For instance, a post created by a user is evaluated
by the number of likes it receives. One like of the post is
equal to 4 work units. The contribution graph is a user-to-user
evaluation, where the weight of an edge (i, j) is the total sum
of work done by j as evaluated by i. Our dataset 3 contains
activity starting from Jun 24, 2019, to May 26, 2022. We use

2http://makerdao.sourcecred.io
3We release source code and the dataset at https://github.com/grimadas/

meritrank

the epoch of one week. The resulting graph G(153) contains
2057 nodes and 35853 edges. The peak week 149 has data of
291 users and 1528 edges.

For our computations, we use a special virtual seed node
inserted to the graph. At each epoch, we connect the seed node
with the top 10 most reputable nodes with equal weights.

We perform the Sybil attack as described in deﬁnition III.3.
We implement all attack strategies as shown in Figure 4. We
pick the attacker node j randomly from the set of 10 most
reputable nodes. The attack is performed repeatedly every
epoch after a period of 20 epochs. We argue that this attack
have the most prominent effects on reputation.

B. Transitivity α Decay

We apply the transitivity decay to personalized PageRank
(PPR), Hitting Time (PHT), and MaxFlow (MFW). We show
that it successfully limits the attacker gain in Figure 5a. Note
that random walk-based reputation achieves higher tolerance
than ﬂow-based reputation.

We report

the attack again with the increase of Sybils
in Figure 5b. Transitivity decay can successfully bound the
number of the gain of the attacker. The effect is most visible
with higher numbers of α. A downside, however,
is the
potential loss of reputation utility, as shown in section V-E.

0.01.05.010.020.050.0Number of Sybils0.00.20.40.60.81.0Attacker's GainReputation AlgorithmPPRPHTMFW0.00.010.20.40.80.95 decay value02468101214Attacker's GainReputation AlgorithmPPRPHTMFW01020304050Number of Sybils0.00.20.40.60.81.0Attacker's Gain decay0.00.50.991.0Figure 7: Cumulative effect of both α and β decay mechanisms
with |S|= 50.

Figure 9: Mean absolute percentage deviation (MAPD) com-
pared with decay value 0 for transitivity decay (α) and
connectivity decay (β).

Informativeness of reputation is an application-speciﬁc met-
ric that shows the utility and goals of the reputation mecha-
nism. As a reference, we propose to measure the informa-
tiveness loss by comparing it with the reputation without
the decay. Speciﬁcally, we use Mean Absolute Percentage
Deviation (MAPD) for decay type and decay value d deﬁned
as:

(a) γ decay applied to reputa-
tion values.

(b) γ decay applied to graph
weights.

M AP D(d) =

1
|V |

(cid:88)

j∈V

|

Rdecay=0(G, j) − Rdecay=d(G, j)
Rdecay=0(G, j)

|

Figure 8: The total reputation gain of the attacker with γ-epoch
decay. We ﬁx α = 0.4 and β = 0.5.

C. Connectivity β Decay

We report the effects of connectivity decay on the attacker’s
gain in Figure 6. We ﬁx the transitivity decay α = 0.4. The
connectivity decay mechanism can further improve the Sybil
tolerance of transitive decay. Note that with β = 0.0, we are
able to eliminate the gains of the attacker fully.

We show in Figure 7 that connectivity and transitivity decay
combined provided a sufﬁcient level of Sybil tolerance. The
ﬁgure shows the effect of decays on the attacker’s gain. Two
decay mechanisms complement each other, providing higher
level of Sybil tolerance.

D. Epoch γ Decay

We run the experiments by applying the γ epoch decay to
reputation and the weights. Surprisingly, epoch decay worsens
Sybil-Tolerance of the reputation mechanism, as can be seen
from Figure 8a and Figure 8b. Attacker gains the minimum
when there are no epoch decays, i.e., γ = 0.0. With the
increase of γ, the attacker is able to gain more from the
Sybil attack. This effect is explained by the fact that reputation
weights are higher for new feedback. However, as the attacker
can always insert new Sybil identities at each epoch, eventu-
ally, these identities receive more walks than honest nodes.

E. Effect of Decays on Informativeness

We show the effects of decays on the informativeness of
the reputation mechanism in Figure 9. The less is the value
of MAPD; the less is the effect of decay on reputation in-
formativeness. As expected, connectivity β decay can achieve
higher informativeness compared to transitivity decay α. Note
that a small increase of MAPD is expected as the decay value
get’s closer to 1. This happens because ﬁrst-hop neighbors get
a higher reputation than more distant nodes, which are not
reachable by random walks.

F. Discussion

Our experiments show that ﬂow-based mechanisms can be
translated from credit networks [37] to feedback graphs to
achieve Sybil tolerance. However, random walk-based mecha-
nisms PPR and PHT provide better tolerance than ﬂow-based
MFW in feedback-based reputation mechanisms. Connectivity
decay is preferable as it allows for minimal informativeness
loss while providing the highest tolerance than transitivity
decay. In practice, both of these parametrizations can be
combined for a desirable threshold tolerance.

that

Our ﬁndings also suggest

the intuitively appealing
concept of time-based epoch-based decay [6] should be im-
plemented with caution. When applied naively, Reputation
mechanism with this decays favor new feedback and feedback
from new users assigning higher weights improving gains from
dynamic Sybil attack.

VI. CONCLUSION

The advances in complex blockchain applications reveal
limits of naive tokenomics based on simple models of mone-

 decay0.00.20.40.60.81.0 decay0.00.20.40.60.81.0Attacker's Gain0.00.20.30.50.70.81.01.21.31.50.250.500.751.001.2501020304050Number of Sybils0.00.20.40.60.81.0Attacker's Gain decay0.00.51.001020304050Number of Sybils0.000.250.500.751.00Attacker's Gain01020304050Number of Sybils0.000.250.500.751.00Attacker's Gain0.00.20.40.60.81.0Decay value0.00.20.40.60.81.01.2MAPDDecay typetary incentives for token holders. Merit-based non-transferable
reputation schemes that reward active contributors present
a promising direction of engineering for novel blockchain
applications such as DAOs. However, application of reputation
in decentralized environments is limited by the reputation
trilemma. We argue that the feedback aggregation mechanism
is the most feasible approach for such solutions as it does
not sacriﬁce the trustless properties of decentralization. While
some existing solutions, such as SourceCred address the
problem of feedback accounting, no solutions are providing
Sybil tolerance for reputation mechanisms based on feedback
aggregation.

We propose MeritRank: a Sybil tolerant reputation mech-
anism based on feedback aggregation from the participants
of decentralized applications. We use data set from inter-
actions of MakerDAO participants to show experimentally
that MeritRank reputation mechanism bounds the proﬁt of
attacker using Sybils. The novelty of this approach lies with
modiﬁcations for reputation decay: transitivity decay, epoch
decay, and connectivity decay. Experimental results show that
a combination of transitivity decay and connectivity decay
can provide a desirable level of Sybil
tolerance. Another
advantage of our approach is the ability to ﬁne-tune the
parameters in order to achieve the context-speciﬁc balance
between the utility of reputation and Sybil tolerance. These
properties suggest that MeritRank provides practical solution
to the reputation trilemma.

REFERENCES

[1] C. T. Nguyen et al., “Proof-of-stake consensus mechanisms for future
blockchain networks: Fundamentals, applications and opportunities,”
vol. 7, pp. 85 727–85 745.

[2] MEV-boost: Merge ready ﬂashbots architecture. [Online]. Available:
https://ethresear.ch/t/mev-boost-merge-ready-ﬂashbots-architecture/
11177

[3] A.

DAO,

“Reputation

Avail-
https://documentation.aragon.org/products/aragon-client/

template.”

[Online].

able:
how-to-create-a-dao-using-aragon-client/page-1

[4] “Coordinape.” [Online]. Available: https://github.com/coordinape
[5] “SourceCred.” [Online]. Available: https://github.com/sourcecred
[6] A. Rea, D. Kronovet, A. Fischer, and J. du Rose, “Colony. technical
white paper.” [Online]. Available: https://colony.io/whitepaper.pdf
[7] J. Dinger and H. Hartenstein, “Defending the sybil attack in p2p
networks: taxonomy, challenges, and a proposal for self-registration,” in
First International Conference on Availability, Reliability and Security
(ARES’06).

IEEE, pp. 8 pp.–763.

[8] P. De Filippi, O. Shimony, and A. Tenorio-Forn´es, “Reputation,” vol. 10,
no. 2. [Online]. Available: https://policyreview.info/glossary/reputation
[9] E. Weyl, P. Ohlhaver, and V. Buterin, “Decentralized society: Finding
web3’s soul.” [Online]. Available: https://ssrn.com/abstract=4105763

[10] J. Chen, D.-C. Lin, and C.-H. Han, “Volatility effect on the adoption
and valuation of tokenomics,” in Proceedings of the 35th Annual ACM
Symposium on Applied Computing. ACM, pp. 294–300.

[11] P. Freni, E. Ferro, and R. Moncada, “Tokenization and blockchain tokens
classiﬁcation: a morphological framework,” in 2020 IEEE Symposium
on Computers and Communications (ISCC).

IEEE, pp. 1–6.

[12] R. Lamberty, D. de Waard, and A. Poddey, “Leading digital socio-
economy to efﬁciency – a primer on tokenomics,” publisher: arXiv
Version Number: 1. [Online]. Available: https://arxiv.org/abs/2008.02538
[13] P. Garg. MakerDAO whale with 94% voting power reduces dai stability

fee by 4%.

[14] K. Liam J. How the

a whale’s
[Online]. Available:
juno-network-dao-proposal-16-voted-to-revoke-tokens-from-whale

tokens.

juno network DAO voted to revoke
https://decrypt.co/95435/

[15] P. Daian, T. Kell, I. Miers, and A. Juels. On-chain vote buying and the
rise of dark DAOs. [Online]. Available: https://hackingdistributed.com/
2018/07/02/on-chain-vote-buying/

[16] S. Martinazzi and A. Flori, “The evolving topology of the lightning
network: Centralization, efﬁciency, robustness, synchronization, and
anonymity,” vol. 15, no. 1.
[17] M. A. Nowak, “Five rules

for

the evolution of cooperation,”
[Online]. Available: https:

vol. 314, no. 5805, pp. 1560–1563.
//www.science.org/doi/10.1126/science.1133755

[18] K. Walsh and E. G. Sirer, “Experience with an object reputation system
for peer-to-peer ﬁlesharing,” in Proceedings of the 3rd Conference on
Networked Systems Design &amp; Implementation - Volume 3, ser.
NSDI’06. USENIX Association, p. 1, event-place: San Jose, CA.
[19] R. Delaviz et al., “SybilRes: A sybil-resilient ﬂow-based decentralized
reputation mechanism,” in 2012 IEEE 32nd International Conference on
Distributed Computing Systems.

IEEE, pp. 203–213.

[20] F. Hendrikx, K. Bubendorfer, and R. Chard, “Reputation systems:
A survey and taxonomy,” vol. 75, pp. 184–197. [Online]. Available:
https://linkinghub.elsevier.com/retrieve/pii/S0743731514001464

[21] E. Bellini, Y. Iraqi, and E. Damiani, “Blockchain-based distributed trust
and reputation management systems: A survey,” vol. 8, pp. 21 127–
21 151.

[22] S. Gurtler and I. Goldberg, “SoK: Privacy-preserving reputation
[Online]. Available:

systems,” vol. 2021, no. 1, pp. 107–127.
https://www.sciendo.com/article/10.2478/popets-2021-0007

[23] A. Stannat et al., “Achieving sybil-proofness in distributed work sys-
tems,” in International Conference on Autonomous Agents and Multia-
gent Systems, 2021.

[24] A. Cheng and E. Friedman, “Sybilproof reputation mechanisms,” in
Proceeding of the 2005 ACM SIGCOMM workshop on Economics of
peer-to-peer systems - P2PECON ’05. ACM Press, p. 128. [Online].
Available: http://portal.acm.org/citation.cfm?doid=1080192.1080202
[25] K. Hoffman et al., “A survey of attack and defense techniques for

reputation systems,” ACM Computing Surveys (CSUR), 2009.

[26] B. Viswanath et al., “Exploring the design space of social network-
based sybil defenses,” in 2012 Fourth International Conference on
Communication Systems and Networks (COMSNETS 2012).
IEEE, pp.
1–8.

[27] E. Koutrouli and A. Tsalgatidou, “Taxonomy of attacks and defense
mechanisms in p2p reputation systems—lessons for reputation system
designers,” vol. 6, no. 2, pp. 47–70.

[28] S. Seuken et al., “Work accounting mechanisms: Theory and practice,”
in Working Paper. Department of Informatics. University of Zurich,
2014.

[29] Y. El Faqir, J. Arroyo, and S. Hassan, “An overview of decentralized
autonomous organizations on the blockchain,” in Proceedings of the 16th
International Symposium on Open Collaboration. ACM, pp. 1–8.
[30] D. Siddarth et al., “Who watches the watchmen? a review of subjective
approaches for sybil-resistance in proof of personhood protocols,” vol. 3,
p. 590171.

[31] S. Eskandari et al., “SoK: oracles from the ground truth to market
manipulation,” in Proceedings of the 3rd ACM Conference on Advances
in Financial Technologies. ACM, pp. 127–141.

[32] Y. Cai et al., “A truth-inducing sybil resistant decentralized blockchain
oracle,” in 2020 2nd Conference on Blockchain Research & Applications
for Innovative Networks and Services (BRAINS).
IEEE, pp. 128–135.
[33] Filecoin. Reputation systems in ﬁlecoin. [Online]. Available: https:

//ﬁlecoin.io/blog/posts/reputation-systems-in-ﬁlecoin/

[34] M. Gupta, M. H. Ammar, and M. Ahamad, “Trade-offs between relia-
bility and overheads in peer-to-peer reputation tracking,” vol. 50, no. 4,
pp. 501–522.

[35] J. R. Douceur, “The sybil attack,” in International workshop on peer-

to-peer systems, 2002.

[36] L. Alvisi, A. Clement, A. Epasto, S. Lattanzi, and A. Panconesi, “Sok:
The evolution of sybil defense via social networks,” in 2013 ieee
symposium on security and privacy.

IEEE, 2013, pp. 382–396.

[37] B. Viswanath, M. Mondal, K. P. Gummadi, A. Mislove, and A. Post,
“Canal: Scaling social network-based sybil tolerance schemes,” in Pro-
ceedings of the 7th ACM european conference on Computer Systems,
2012, pp. 309–322.

[38] B. Viswanath et al., “Exploring the design space of social network-
based sybil defenses,” in 2012 Fourth International Conference on
Communication Systems and Networks (COMSNETS 2012).
IEEE,
2012, pp. 1–8.

[39] E. Miyazono, “Sourcecred: An introduction to calculating cred and
grain,” Mar 2020. [Online]. Available: https://research.protocol.ai/blog/
2020/sourcecred-an-introduction-to-calculating-cred-and-grain/

[40] D. Tarr, E. Lavoie, A. Meyer, and C. Tschudin, “Secure scuttlebutt: An
identity-centric protocol for subjective and decentralized applications,”
in Proceedings of the 6th ACM Conference on Information-Centric
Networking. ACM, pp. 1–11.

[41] A. Cheng and E. Friedman, “Sybilproof reputation mechanisms,” in
ACM SIGCOMM workshop on Economics of peer-to-peer systems, 2005.
[42] B. K. Liu et al., “Personalized hitting time for informative trust mech-
anisms despite sybils,” in Proceedings of the International Conference
on Autonomous Agents & Multiagent Systems, 2016.

[43] B. Bahmani et al., “Fast incremental and personalized pagerank,” VLDB,

2010.

[44] M. Meulpolder et al., “Bartercast: A practical approach to prevent
lazy freeriding in p2p networks,” in IEEE International Symposium on
Parallel & Distributed Processing, 2009.

