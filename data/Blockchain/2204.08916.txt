JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2021

1

Heterogeneous Feature Augmentation for Ponzi
Detection in Ethereum

Chengxiang Jin, Jie Jin, Jiajun Zhou, Jiajing Wu, Senior Member, IEEE, Qi Xuan, Senior Member, IEEE

2
2
0
2

r
p
A
9
1

]

R
C
.
s
c
[

1
v
6
1
9
8
0
.
4
0
2
2
:
v
i
X
r
a

Abstract—While blockchain technology triggers new industrial
and technological revolutions,
it also brings new challenges.
Recently, a large number of new scams with a ”blockchain”
sock-puppet continue to emerge, such as Ponzi schemes, money
laundering, etc., seriously threatening ﬁnancial security. Existing
fraud detection methods in blockchain mainly concentrate on
manual feature and graph analytics, which ﬁrst construct a
homogeneous transaction graph using partial blockchain data
and then use graph analytics to detect anomaly, resulting in
a loss of pattern information. In this paper, we mainly focus
on Ponzi scheme detection and propose HFAug, a generic
Heterogeneous Feature Augmentation module that can capture
the heterogeneous information associated with account behavior
patterns and can be combined with existing Ponzi detection
methods. HFAug learns the metapath-based behavior charac-
teristics in an auxiliary heterogeneous interaction graph, and
aggregates the heterogeneous features to corresponding account
nodes in the homogeneous one where the Ponzi detection methods
are performed. Comprehensive experimental results demonstrate
that our HFAug can help existing Ponzi detection methods achieve
signiﬁcant performance improvement on Ethereum datasets,
suggesting the effectiveness of heterogeneous information on
detecting Ponzi schemes.

Index Terms—Ethereum, Ponzi Scheme Detection, Heteroge-

neous Graph, Metapath

I. INTRODUCTION

B LOCKCHAIN is best known for its crucial applications

in ﬁnancial cryptocurrency platforms such as Ethereum.
According to CoinMarketCap, as of January 2022, the total
value of all digital currencies hits a new high of 2.27 trillion
dollars. However, the huge economic value of digital currency
also makes it a target for cybercriminals, resulting in a large
number of illegal activities such as Ponzi schemes, money
laundering, phish scams, etc. The popularity of digital currency
allows criminals to ﬁnd new ways to transfer funds, bringing
Ponzi schemes, an ofﬂine fraud that originated 150 years
ago, into the digital world. Ponzi scheme [1] is a type of
ﬁnancial fraud disguised as “high-yield” investment programs,
which use the money of new investors to pay interest and
short-term returns to old investors for creating the illusion of

This work was partially supported by the National Key R&D Program
of China under Grant 2020YFB1006104, by the Key R&D Programs of
Zhejiang under Grants 2022C01018 and 2021C01117, by the National Natural
Science Foundation of China under Grant 61973273, and by the Zhejiang
Provincial Natural Science Foundation of China under Grant LR19F030001.
(Corresponding author: Jiajun Zhou.)

C. Jin, J. Jin, J. Zhou, Q. Xuan are with the Institute of Cyberspace
Security, College of Information Engineering, Zhejiang University of Tech-
nology, Hangzhou 310023, China. E-mail:{2112103081, 2112003197, jjzhou,
xuanqi}@zjut.edu.cn.

J. Wu is with the School of Computer Science and Engineering, Sun Yat-sen
University, Guangzhou 510006, China. E-mail: wujiajing@mail.sysu.edu.cn.

proﬁtability and then defraud more investments. One study [2]
estimates that Ponzi schemes operated through Bitcoin have
collected more than 7 million dollars from September 2013
to September 2014. Therefore, understanding the behavior
of Ponzi schemes and detecting them from cryptocurrency
platforms would be crucial to maintaining the stability of the
investment environment in the ﬁnancial market.

There exists plenty of related work to model complex
transaction networks [3], [4] for detecting Ponzi schemes.
Massimo et al. [5] collected rich real data through multi-input
heuristic address clustering and extracted the most discrimi-
nating features associated with Ponzi schemes. Chen et al. [6],
[7] proposed a machine learning-based Ponzi scheme identi-
ﬁcation method that focuses on analyzing the characteristics
of contract transactions and counting contract byte codes. Fan
et al. [8] improved a combination of feature engineering and
machine learning by training a Ponzi detection model using
the idea of ordered augmentation. Wang et al. [9] considered
contract account characteristics and contract code character-
istics, and used LSTM to recognize Ponzi. What’s more,
Chen et al. [10] generated word embedding based on smart
contract source code, and used multi-channel TextCNN and
Transformer to automatically learn code features. Yu et al. [11]
ﬁrst constructed the initial features for Ethereum accounts
via manual feature engineering, and then updated account
features using GCN [12], ﬁnally detected Ponzi schemes.
Zhang et al. [13] extracted the bytecode feature and mixed
it with transaction and opcode frequencies, and then used the
LightGBM to identify Ponzi schemes.

These above-mentioned Ponzi detection methods are
mainly combined with several graph-related algorithms. Deep-
Walk [14] and Node2Vec [15] utilize random walks to obtain
sequences of nodes, and then use skip-gram models to learn
the representation of nodes to predict their structural infor-
mation in homogeneous networks. Among GNNs, apart from
the GCN method mentioned above, GIN [16] is proposed to
make GNNs applicable to different graph structures, which is
as powerful as the WL test in terms of prejudiced power and
expressiveness. GraphSAGE [17] samples neighboring nodes
based on GCN, and trains different aggregation functions to
obtain a more accurate representation of the new nodes.

However, existing methods suffer from several shortcom-
ings. Manual feature engineering usually designs statistical
features related to transaction amount and time, but has
difﬁculty deﬁning more complex features that reﬂect trans-
action behavior. Graph analytics is usually performed on a
simple homogeneous transaction graph, failing in capturing the
structural features associated with speciﬁc behavior patterns.

 
 
 
 
 
 
JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2021

2

Fig. 1. Homogeneous transaction graph and heterogeneous interaction graph.

In this paper, we mainly focus on detecting Ponzi schemes on
Ethereum, and consider improving the feature utilization of
blockchain data and propose HFAug, a generic Heterogeneous
Feature Augmentation module that can be adapted to various
existing Ponzi detection methods. HFAug ﬁrst extracts the
metapath-based features on an auxiliary heterogeneous graph
where the coordinated transaction and contract call
infor-
mation contained, and then aggregates these heterogeneous
features associated with behavior patterns to corresponding
account nodes in the homogeneous graph where the Ponzi
detection methods are performed. Our proposed module allows
for improving the performance of existing Ponzi detection
methods through feature augmentation without adjusting them.
The main contributions of this work are summarized as

follows:

• We collect the labeled data of Ethereum Ponzi schemes
for Ponzi detection research, and construct homogeneous
transaction graph and heterogeneous interaction graph.
• We propose a generic heterogeneous feature augmenta-
tion module, named HFAug, which allows for aggregating
heterogeneous features associated with behavior patterns
to homogeneous transaction graphs, further improving the
performance of existing Ponzi detection methods. To the
best of our knowledge, there are hardly any heterogeneous
algorithms applied to blockchain data mining, and our
work earlier explored the heterogeneous strategies for
Ethereum Ponzi detection.

• Extensive experiments on the Ethereum dataset show the
effectiveness of HFAug module on improving the per-
formance of three categories of existing Ponzi detection
methods. Moreover, the generic compatibility of HFAug
also suggests that heterogeneous behavior pattern infor-
mation can beneﬁt Ponzi scheme detection in Ethereum.

II. ACCOUNT INTERACTION GRAPH MODELING

A. Ethereum Data

An account in Ethereum is an entity that owns Ether, and
can be divided into two categories: Externally Owned Account
(EOA) and Contract Account (CA). EOA is controlled by
a user with the private key and can initiate transactions
on Ethereum, and CA is controlled by smart contract code
and can only send transactions in response to receiving a
transaction. There are generally two categories of interactions

Fig. 2. An interaction graph of real Ponzi scheme.

between Ethereum accounts: transaction and contract call.
The transaction refers to an action initiated by an EOA, and
can be received by EOA or CA. The contract call refers to the
process of triggering smart contract codes which can execute
many different actions, such as transferring tokens or even
creating a new contract.

B. Graph Modeling on Ethereum

1) Homogeneous and Heterogeneous Graph: The existing
Ponzi detection methods usually model Ethereum data as
a homogeneous graph, where all accounts will be treated
as nodes of the same type, and interactions involving only
transaction amounts will be treated as edges. Different from
it, heterogeneous graph with different types of nodes and edges
will retain more information of Ethereum data. More formally,
we use Ghom = (V, E,Y ) and Ghet = (Veoa,Vca, Etrans, Ecall,Y )
to represent the two types of graph respectively, where V
represents the set of arbitrary accounts in the Ethereum data,
E represents the set of directed edges constructed from trans-
action information, Y = {(vp
i , yi)} is the label information of
known Ponzi accounts. Notably, all the known Ponzi schemes
we have collected on Ethereum are based on contract accounts.
The nodes of Ghom and Ghet are aligned, as illustrated in
Fig. 1. Compared with Ghom, Ghet has additional account cat-
egory information (i.e., EOA and CA), and another interactive
edge information (i.e., contract call).

2) Node Feature Construction: We construct initial fea-
tures for account nodes in both Ghom and Ghet using 15 manual
features proposed in existing methods.

• The income and expenditure of the target account (in-

cluding total, average, maximum and variance).
• The expenditure-income ratio of the target account.
• The balance of the target account.
• The number of transactions sent and received by the target

account.

• The investment Gini and return Gini of the target account.
• The life cycle of the target account.
3) Metapath: Metapath [18] is a path in a heterogeneous
graph that contains a sequence of relations deﬁned between
different types of objects. According to the interaction graph
of Ponzi schemes, as schematically depicted in Fig. 2, we
predeﬁne the critical behavior patterns as follows:
(cid:16) call−→ CA1
investors EOA1 will

transfer Ether to the Ponzi
External
account CAt, which would perform subsequent actions. EOA2

(cid:17) trans−→ EOA2

−→ CA2.

call−→ CAt

EOA1

call/trans

(1)

（a）Homogeneous Transaction Graph（a）Heterogeneous InteractionGraph（a）Homogeneous Transaction Graph𝐺ℎ𝑜𝑚（b）Heterogeneous Interaction Graph𝐺ℎ𝑒𝑡CAEOAcalltransRevolution2, Contract2, PonziJOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2021

3

Fig. 3.

Illustration of Heterogeneous Feature Augmentation (HFAug) module.

could be an external investor or the Ponzi contract creator.
The former indicates that trans is a payback, while the latter
indicates that trans is a funds transfer. Notably, very few
call−→ CA1) to perform
Ponzi accounts will trigger internal calls (
subsequent actions.

We then extract two metapaths from above behavior pat-

terns:

P1 : CAt
P2 : EOA call−→ CAt

call−→ CA trans−→ EOA call−→ CA,

trans−→ EOA trans−→ CA.

(2)

Our HFAug will caputre the behavior features from Ghet based
on these metapaths, as detailedly described below.

only aggregate node features in the available subset of it. The
process of feature update can be represented as follows:

¯xt
ca =

(cid:88)

xv,

v∈P(cid:48)∈P

(4)

where x is the account feature, and P (cid:48) is the target metapath
or its subset.

Finally, the updated features ¯X contain heterogeneous struc-
tural information associated with behavior patterns, and will
be used for detecting Ponzi accounts.

III. METHODOLOGY

B. HFAug for Graph Neural Network

A. HFAug for Manual Feature and Graph Random Walks

1) Original Ponzi Detection: For Ponzi detection methods
based on manual feature engineering, we use the 15 manual
features mentioned in Sec. II-B2 to characterize these CA,
yielding the feature matrix X ∈ Rn×15, where n represents the
number of CA to be detected. As for methods based on graph
random walks, we generate structural embeddings as account
node features rather than the predeﬁned manual featres. After
that, the initial feature of arbitrary account node vi is denoted
as follows:

xi =

(cid:40) [x1

i , x2

i , · · · , x15
i
Walk (Ghom, vi)

]

for manual feature

for graph random walks

(3)

Finally, we achieve Ponzi detection by feeding account fea-
tures into machine learning classiﬁers.

2) Detection with HFAug: Here, HFAug module is used
to update the initial node features, as illustrated in Fig. 3(a)
and (b). Speciﬁcally, for a target CA node vt
ca, we ﬁrst search
the target metapaths P1 or P2 where it is located in Ghet.
Notably, in P1 and P2, the CAt is the target CA node. After
getting the metapath P, we update the features of the target
CA in Ghom by aggregating the features of other nodes in the
metapath to it. When the full metapath is not available, we

1) Original Ponzi Detection: GNN-based methods usually
consider Ponzi detection as a node classiﬁcation task. In this
paper, we consider three commonly used GNN models: GCN,
GraphSAGE and GIN. During Ponzi detection, the input is
the homogeneous transaction graph Ghom, and the output is a
prediction of whether the target account is a Ponzi account.
The initial node features are also constructed according to
Sec. II-B2.

2) Detection with HFAug: Here, HFAug module is used
to update the initial node features, as illustrated in Fig. 3(c).
these two metapaths are used to update the
Speciﬁcally,
features of their respective head nodes. In other words, for a
CA/EOA node vt
eoa, we search the target metapath P1/P2
where it serves as the head node in Ghet, and update the
features of head node in Ghom by aggregating the features
of other nodes in the metapath to it. The process of feature
update can be represented as follows:

ca/vt

¯xt =

(cid:26) (cid:80)
(cid:80)

v∈P(cid:48)⊆P1
v∈P(cid:48)⊆P2

xv,
xv,

P (cid:48) start from vt
P (cid:48) start from vt

ca,
eoa.

(5)

Notably, we can update one type of nodes using one meta-
path individually, or update all nodes using both metapaths
simultaneously.

𝒫1𝒫2JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2021

4

TABLE I
STATISTICS OF THE HOMOGENEOUS AND HETEROGENEOUS GRAPHS. |V |
AND |E| ARE THE TOTAL NUMBER OF NODES AND EDGES RESPECTIVELY.
|Vca| AND |Veoa| ARE THE NUMBER OF CA AND EOA RESPECTIVELY, |Ecall|
AND |Etrans| ARE THE NUMBER OF CALL AND TRANS EDGES
RESPECTIVELY, AND |Y | IS THE NUMBER OF LABELED PONZI ACCOUNTS.

TABLE III
PONZI DETECTION RESULTS OF RAW METHODS (GNN-BASED METHODS)
AND THEIR ENHANCED VERSIONS (WITH HFAug). + HFAug(P )
REPRESENTS THE RESULTS OF DETECTION METHODS ENHANCED BY
HFAug WITH METAPATH P .

Dataset
Homogeneous Ghom
Heterogeneous Ghet

|V |
57,130
57,130

|E|
86,602
156,255

|Vca|

|Veoa|

|Ecall|

· · · No label information

4,616

52,514

69,653

|Etrans|
· · ·
86,602

|Y |
191
191

TABLE II
PONZI DETECTION RESULTS OF RAW METHODS (MANUAL FEATURE
ENGINEERING AND RANDOM WALK-BASED GRAPH EMBEDDING) AND
THEIR ENHANCED VERSIONS (WITH HFAug). gain REPRESENTS THE
RELATIVE IMPROVEMENT RATE.

Methods

raw

GCN

82.48

GraphSAGE

78.54

GIN

77.59

+HFAug
(P1)
82.66
+0.22%
74.86
-4.68%
77.50
-0.11%

+HFAug
(P2)
83.03
+0.67%
78.61
+0.10%
77.93
+0.44%

+HFAug
(P1, P2)
84.05
+1.90%
78.70
+0.20%
78.05
+0.60%

Methods

Manual
Feature

DeepWalk

Node2Vec

raw
raw + HFAug
gain
raw
raw + HFAug
gain
raw
raw + HFAug
gain

P1
RF
SVM
LR
77.23
72.79
65.73
71.72
74.61
76.18
+9.11% +4.66% -3.39%
82.74
82.98
80.63
81.43
81.43
84.58
+0.99% +0.19% -0.02%
86.14
84.56
82.22
83.78
86.67
86.93
+1.90% +2.80% +0.62%

LR
65.73
75.12

P2
RF
SVM
77.23
72.79
75.65
76.96
+14.30% +5.73% -2.05%
82.74
82.98
83.26
81.95
+0.63%
-1.24%
86.14
84.56
86.14
84.83
+0.32% +0.00%

80.63
80.64
+0.00%
82.22
81.69
-0.64%

IV. EXPERIMENTS

A. Data

We collected 191 labeled Ponzi data from Xblock1,
Etheriscan2 and other Blockchain platforms. For all detection
methods, we take all the labeled Ponzi accounts as positive
samples, as well as the same number of randomly sampled
CA as negative samples. We construct
the homogeneous
transaction graph using the transaction data of these CA,
yielding a graph with 56,748 nodes and 86,602 edges. For the
heterogeneous interaction graph, we divide all the nodes into
two categories: 4,616 CA and 52,514 EOA, and add additional
69,653 call edges. The statistics of data are shown in Table I.

B. Ponzi Detection Methods and Experimental Setup

To illustrate the effectiveness of our HFAug module, we
combine it with three categories of Ponzi detection methods:
manual feature engineering, random walk-based graph embed-
ding and GNN-based methods.

For manual feature engineering which is the most common
and simplest method for Ponzi detection, we use 15 manual
features listed in Sec II-B2, yielding account feature vectors
with dimension equals to 15. For random walk-based graph
embedding, we consider DeepWalk and Node2Vec. For the
above two categories of methods, we achieve Ponzi detection
by feeding the generated account features into three machine
learning classiﬁers: Logistic Regression (LR), Support Vector
Machine (SVM) and Random Forest (RF). For GNN-based
methods, we compare with three commonly used GNNs: GCN,
GraphSAGE and GIN.

For walk-based methods, we set the dimension of embed-
ding, window size, walk length and the number of walks

per node to 128, 10, 50 and 5 respectively. For Node2Vec,
we perform a grid search of return parameter p and in-out
parameter q in {0.5, 1, 2}. For GNN-based methods, we set
the hidden dimension of GCN, GrahphSAGE and GIN to 128,
512 and 128 respectively, and the learning rate to 0.005, 0.001
and 0.01 respectively. For all methods, we recept 5-fold cross
validation 10 times and report the average micro-F1 score.

C. Evaluation

We evaluate the beneﬁt of our HFAug on enhancing Ponzi

detection, answering the following research questions:

• RQ1: Can HFAug improve the performance of Ponzi
detection when being combined with existing detection
methods?

• RQ2: Whether the enhancement effect of HFAug is
determined by the extracted heterogeneous information?
We combine the proposed heterogeneous feature augmentation
module with all Ponzi detection models to show a crosswise
comparison.

1) Enhancement

for Ponzi Detection: Table II and III
report the results of performance comparison between the raw
methods and their enhanced version (with HFAug), from which
we observe that there is a signiﬁcant boost in detection per-
formance across all methods. Overall, these detection methods
combined with HFAug module obtain higher average detection
performance in most cases, and the HFAug achieves a 70.37%
success rate1 on the enhancement of Ponzi detection.

Speciﬁcally, for manual feature engineering, we observe
4.66% ∼ 14.30% relative improvement on LR and SVM
classiﬁers, as well as a negative gain for RF classiﬁer. It is ob-
vious that manual features have poor expressiveness compared
to other methods and heavily relies on the performance of
classiﬁers. We speculate that our HFAug has a better enhance-
ment for manual feature engineering with weak classiﬁers.
For the walk-based methods and GNN-based methods, the
learnt features are better at capturing the behavior patterns
of accounts than manual features, manifesting as higher raw
performance. For both types of methods, the module achieves
a relatively limited boost.

1http://xblock.pro/ethereum/
2https://cn.etherscan.com/accounts/label/ponzi

1The success rate refers to the percentage of enhanced methods with F1
score higher than that of the corresponding raw methods in Table II and III.

JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2021

5

REFERENCES

[1] M. Artzrouni, “The Mathematics of Ponzi Schemes,” Mathematical

Social Sciences, vol. 58, no. 2, pp. 190–201, 2009.

[2] M. Vasek and T. Moore, “There’s No Free Lunch, Even Using Bitcoin
Tracking The Popularity And Proﬁts of Virtual Currency Scams,” in
International conference on ﬁnancial cryptography and data security.
Springer, 2015, pp. 44–61.

[3] B. Tao, H.-N. Dai, J. Wu, I. W.-H. Ho, Z. Zheng, and C. F. Cheang,
“Complex network analysis of the bitcoin transaction network,” IEEE
Transactions on Circuits and Systems II: Express Briefs, 2021.

[4] D. Lin, J. Wu, Q. Yuan, and Z. Zheng, “Modeling and understanding
ethereum transaction records via a complex network approach,” IEEE
Transactions on Circuits and Systems II: Express Briefs, vol. 67, no. 11,
pp. 2737–2741, 2020.

[5] M. Bartoletti, B. Pes, and S. Serusi, “Data Mining for Detecting Bitcoin
Ponzi Schemes,” in 2018 Crypto Valley Conference on Blockchain
Technology (CVCBT).
IEEE, 2018, pp. 75–84.

[6] W. Chen, Z. Zheng, J. Cui, E. Ngai, P. Zheng, and Y. Zhou, “Detecting
Ponzi Schemes on Ethereum Towards Healthier Blockchain Technol-
ogy,” in Proceedings of the 2018 world wide web conference, 2018, pp.
1409–1418.

[7] W. Chen, Z. Zheng, E. C.-H. Ngai, P. Zheng, and Y. Zhou, “Exploiting
Blockchain Data to Detect Smart Ponzi Schemes on Ethereum,” IEEE
Access, vol. 7, pp. 37 575–37 586, 2019.

[8] S. Fan, S. Fu, H. Xu, and C. Zhu, “Expose Your Mask Smart Ponzi
Schemes Detection on Blockchain,” in 2020 International Joint Confer-
ence on Neural Networks (IJCNN).

IEEE, 2020, pp. 1–7.

[9] L. Wang, H. Cheng, Z. Zheng, A. Yang, and X. Zhu, “Ponzi Scheme
Detection Via Oversampling-based Long Short-Term Memory for Smart
Contracts,” Knowledge-Based Systems, vol. 228, p. 107312, 2021.
[10] Y. Chen, H. Dai, X. Yu, W. Hu, Z. Xie, and C. Tan, “Improving
Ponzi Scheme Contract Detection Using Multi-Channel TextCNN and
Transformer,” Sensors, vol. 21, no. 19, p. 6417, 2021.

[11] S. Yu, J. Jin, Y. Xie, J. Shen, and Q. Xuan, “Ponzi Scheme Detection
in Ethereum Transaction Network,” in International Conference on
Blockchain and Trustworthy Systems. Springer, 2021, pp. 175–186.

[12] T. N. Kipf and M. Welling, “Semi-supervised Classiﬁcation with Graph
Convolutional Networks,” arXiv preprint arXiv1609.02907, 2016.
[13] Y. Zhang, W. Yu, Z. Li, S. Raza, and H. Cao, “Detecting Ethereum Ponzi
Schemes Based on Improved LightGBM Algorithm,” IEEE Transactions
on Computational Social Systems, 2021.

[14] B. Perozzi, R. Al-Rfou, and S. Skiena, “Deepwalk Online Learning
of Social Representations,” in Proceedings of the 20th ACM SIGKDD
international conference on Knowledge discovery and data mining,
2014, pp. 701–710.

[15] A. Grover and J. Leskovec, “Node2vec Scalable Feature Learning for
Networks,” in Proceedings of the 22nd ACM SIGKDD international
conference on Knowledge discovery and data mining, 2016, pp. 855–
864.

[16] K. Xu, W. Hu, J. Leskovec, and S. Jegelka, “How Powerful Are Graph

Neural Networks,” arXiv preprint arXiv1810.00826, 2018.

[17] W. Hamilton, Z. Ying, and J. Leskovec, “Inductive Representation
Learning on Large Graphs,” Advances in neural information processing
systems, vol. 30, 2017.

[18] Y. Sun and J. Han, “Mining Heterogeneous Information Networks
Principles And Methodologies,” Synthesis Lectures on Data Mining and
Knowledge Discovery, vol. 3, no. 2, pp. 1–159, 2012.

These phenomena provide a positive answer to RQ1, indi-
cating that the HFAug module can beneﬁt the existing Ponzi
detection methods via feature augmentation and improve their
performance without adjusting them.

2) Impact of Metapaths: We further investigate the inﬂu-
ence of metapaths in HFAug on the enhancement effect. As we
can see from Table II and III, HFAug with P2 outperforms that
with P1 in most cases, which suggesting that the performance
of HFAug relies on the choice of metapaths.

Both P1 and P2 are extracted from the basic behavior
patterns of Ponzi scheme deﬁned in Eq. 1, and we have
reasonable explanations for their performance difference: 1)
Fewer metapath in heterogeneous interaction graph start with
CA than EOA; 2) Ponzi contracts usually have more frequent
interactions with EOA; 3) metapath P1 contains the behavior
of internal calls (i.e., CA call−→ CA), which is relatively rare.

For manual feature engineering and GNN-based methods,
we use the manual feature rather than embedding as initial
node feature, which does not contain additional structural
information. As a result, metapath P2 which reﬂects more
frequent behavior patterns reasonably achieves superior per-
formance compared with P1. For walk-based methods, the
result with metapath P2 is not better than P1, and we make
the following reasonable explanations. Combine the following
two prior knowledge: 1) metapath P1 starts from the target
node while metapath P2 not, and 2) the embedding of the
target node is generated from the walks starting from the target
node, we speculate that metapath P2 updates the feature of
target node by aggregating the information along the metapath,
including the head node EOA that has a high probability of not
appearing in the walks, which may lead to a conﬂict between
the heterogeneous information deﬁned by the metapath and the
structural information learned by the random walks, further
bringing poor performance.

Furthermore, we observe that a combination of multiple
metapaths can perform better than a single metapath, as
shown in Table III, suggesting that multiple heterogeneous
information can beneﬁt Ponzi detection more. These phenom-
ena provide a positive answer to RQ2, indicating that the
design of the metapaths is critical and determines whether the
HFAug can effectively capture the heterogeneous information
associated with account behavior patterns.

V. CONCLUSION

Existing Ponzi detection methods usually ignore the struc-
tural behavior patterns of Ponzi accounts, resulting in a loss
of information. In this paper, we propose a generic Hetero-
geneous Feature Augmentation module which can capture the
heterogeneous information associated with account behavior
patterns and can be combined with existing Ponzi detection
methods. Comprehensive experiments show that our HFAug
can help existing Ponzi detection methods achieve signiﬁcant
improvement on Ethereum datasets. Moreover, we also con-
clude that the enhancement effect of HFAug is determined by
the extracted heterogeneous information, which encourages us
to design more highly-expressive metapaths in future work.

