2
2
0
2

g
u
A
8

]
E
S
.
s
c
[

4
v
9
2
0
7
0
.
2
0
2
2
:
v
i
X
r
a

The Multibillion Dollar
Software Supply Chain of
Ethereum

César Soto-Valero
KTH Royal Institute of Technology

Martin Monperrus
KTH Royal Institute of Technology

Benoit Baudry
KTH Royal Institute of Technology

Abstract—The rise of blockchain technologies has triggered tremendous research interest,
coding efforts, and monetary investments in the last decade. Ethereum is the single largest
programmable blockchain platform today. It features cryptocurrency trading, digital art, and
decentralized ﬁnance through smart contracts. So-called Ethereum nodes operate the
blockchain, relying on a vast supply chain of third-party software dependencies maintained by
diverse organizations. These software suppliers have a direct impact on the reliability and the
security of Ethereum. In this article, we perform an analysis of the software supply chain of Java
Ethereum nodes and distill the challenges of maintaining and securing this blockchain
technology.

ETHEREUM is a spearhead of the blockchain
paradigm, with its smart contract infrastructure
supporting a vibrant decentralized ﬁnance ecosys-
tem [1] and a blooming art scene [2]. Since
the release of Bitcoin in 2008 [3],
the adop-
tion of blockchain-based solutions has grown
signiﬁcantly, mainly driven by the promise of
secure, reliable, and decentralized monetary and
ﬁnancial transactions [4]. There are several pub-
lic blockchains running today (e.g., Bitcoin,
Ethereum, Litecoin, and NEO), each one of them
serving a particular purpose and solving speciﬁc
problems. In this article, we focus on the single
case of Ethereum, as it is the largest blockchain
platform by most notable metrics.

Ethereum is a feature-rich platform, consid-
ered by some as the avant-garde of blockchain
technologies [5]. It has its own cryptocurrency

(Ether), its own consensus protocol, and its own
smart contract platform. Ethereum digital assets
and contracts are executed in a distributed man-
ner in nodes that support the Ethereum Virtual
Machine (EVM) execution model. Due to this
functionality, the Ethereum platform is often com-
pared to a globally distributed supercomputer. In
January 2022, the Ethereum blockchain held over
hundreds of billion U.S. dollars in digital assets,
and an average of 250 new smart contracts are
deployed and veriﬁed on Etherscan every day.1

The research community has contributed to
the creation and evolution of blockchain technolo-
gies. The recent work focuses on three aspects
[6]: theoretical foundations, scalability, and en-
gineering of smart contracts. However, one key
aspect of the blockchain has been completely

1https://etherscan.io/chart/veriﬁed-contracts

 
 
 
 
 
 
overlooked: its software supply chain.

The software supply chain of an ecosystem
is the set of all software libraries,
tools and
third-party modules that compose it [7]. In the
context of Ethereum, the software supply chain is
ﬁrst and foremost formed of the different open-
source implementations of Ethereum nodes, in
Go, Rust, Java and other languages [8]. The node
implementations themselves depend on hundreds
of components. Overall, the software supply chain
of Ethereum is composed of libraries and tools,
a.k.a. dependencies, to develop, deploy and run
Ethereum nodes.

Recent

studies have shown that a large
network of software dependencies such as in
Ethereum nodes can turn into an application’s
Achilles heel [9]. On the one hand, malicious
actors may infect a target application from within
a reused component [10]. On the other hand,
entire software systems may crash because of a
bug somewhere deep in the reuse chain [11]. The
major stakeholders in the Ethereum ecosystem
want it to be resistant to attackers and robust with
respect to bugs [12]. Consequently, understanding
and hardening its software supply chain has be-
come of utmost importance.

In this article, we deep dive into the software
supply chain of the two main Ethereum nodes
written in Java, namely Besu and Teku. Our
focus on Java is motivated by the strong presence
of Java in banks and ﬁnancial institutions, an
essential target group of Ethereum, as well as by
the availability of advanced tools for analyzing
and hardening the supply chain in Java [11].

We analyze the software supply chains of two
Java Ethereum nodes, looking at their dependen-
cies and their evolution over time. This provides
the community with the ﬁrst ever description
of a mission critical software supply chain for
blockchain. Next, we provide actionable results
and show that we can harden a complex soft-
ware supply chain with relevant tools. Our results
reveal a number of key insights and technical
challenges for both researchers in software supply
chains and well as for developers and stakehold-
ers of the Ethereum community.

SUPPLY CHAIN OF JAVA ETHEREUM
NODES

Overview

Ethereum is a public distributed system of
nodes supporting a ledger. As a distributed sys-
tem, Ethereum nodes agree on a consensus proto-
col to verify the validity of transactions. The pro-
tocol for Ethereum v1.0 (ETH1) is based on proof
of work (PoW), and for Ethereum v2.0 (ETH2),
it is based on proof of stake (PoS). Ethereum
nodes communicate peer-to-peer without a central
organizing institution. They run smart contracts
and receive transactions from client applications.
This is what is depicted in the outer parts of
Figure 1.

The top part of Figure 1 illustrates the network
of Ethereum nodes. The left part of the ﬁgure
illustrates the three main categories of clients
of the Ethereum blockchain: an individual user,
a cryptoexchange marketplace, and a bank. The
individual user is, for example, an artist who
relies on the blockchain to distribute her artwork
[13]. The cryptoexchange marketplace provides
deposits and withdrawals of the Ether cryptocur-
rency. The bank uses Ethereum to accelerate pay-
ments across borders, opening up the possibility
to help underbanked populations [14]. The central
part of Figure 1 focuses on one single Ethereum
node, and provides a deep dive into its software
supply chain.

From now on, we assume this node runs the
Java implementation of Ethereum called Besu.
Figure 1 shows the graph of dependencies for
the core module of Besu, which is only one of
the 41 modules of Besu, focusing on its direct
dependencies. Such a large number of software
dependencies is a potential source of vulnera-
bilities and supply chain attacks [15]. In the
context of Ethereum, this means that the software
dependencies of Besu represent a potential source
of risk for the ﬁnancial system and art market
built on top of it. In the rest of this article, we
study potential counter-measures.

Besu

Besu is the leading Java implementation for
Ethereum ETH1. Besu is led by the Hyperledger
Foundation, a non-proﬁt organization for open-
source enterprise blockchain tools, which started

Figure 1. Excerpt of the software supply chain of one single module in the enterprise Java Ethereum node
Besu v21.10.6: the besu-core module depends on 29 other Besu modules, as well as on 51 third-party
dependencies provided by 16 different supplier organizations; the third-party dependencies are colored
according to the name of the supplier.

in December 2015 as a spin-off of the Linux
Foundation. As of January 2022, there are at least
44 nodes of Besu running on the Ethereum Main-
net public network, according to Ethernodes.2
The source code of Besu is available on GitHub.3
It is a reasonably sized and active project, con-
taining a total of 268,356 lines of code written in
Java, contributed through 3,125 commits. Besu
is an active project, its codebase is developed and
maintained by a total of 115 contributors with a
unique GitHub account (of which 29 are listed
as ofﬁcial maintainers). The contributors reported
and closed 916 issues and merged a total of
739 pull-requests in 2021. More than half of
the contributors work at Hyperledger, according
to their GitHub proﬁles.

In Table 1, we capture some key statistics

2https://www.ethernodes.org
3https://github.com/hyperledger/besu

about the software supply chain of dependencies
for Besu v21.10.6, released on January 5th, 2022.
The raw data and analysis scripts are available
online.4 We collected those dependencies using
the Gradle dependencies’ resolution plugin. On
the analyzed release, Besu is made of 41 Gradle
modules. These modules are internal dependen-
cies, since their development, maintenance and
release lifecycle is under the direct control of
41
the Besu developers. In addition to these
modules, Besu relies on 355 unique third-party
dependencies provided by 165 distinct supplying
organizations. This number represents the number
of different third-party Java libraries in the de-
pendency tree of Besu, without considering the
different versions of a dependency. The supplier
organizations are in charge of maintaining these
artifacts and releasing new versions to external

4https://github.com/chains-project/ethereum-ssc

NodeNodeNodeNodeNodeCryptoexchangeEnterprise Java Node Banks & FintechIndividualNodeNodeNodeGraphqL JavaPicocliFasterXMLReactive StreamsNettyEclipseSpring SecurityConsenSysApacheConnIdGoogleJetBrainsChecker FrameworkANTLRTreasure DataBouncy CastleSuppliers’ Color Legend besu-coreconfigpkicliquecommonplugin-apiibftibftlegacymergeqbftcryptoutildatatypesenclaveapiblockcreationethereum-coreethp2ppermissioningretestethrlptriestratumethstatsevmmetrics-corenatrocksdbkvstorejackson-databindjackson-datatype-jdk8graphql-javapicoclivertx-corevertx-webspring-security-cryptosnappy-javaquorum-mainnet-launchertuweni-unitstuweni-byteslog4j-apilog4j-coretuweni-configtuweni-tomlguavajackson-annotationsjackson-bomjackson-corejava-dataloaderreactive-streamsnetty-handler-proxynetty-codec-httpnetty-handlernetty-transportnetty-buffernetty-commonnetty-resolvernetty-codec-http2netty-resolver-dnsvertx-web-commonvertx-auth-commonvertx-bridge-commonkotlin-stdlib-jdk8frameworkframework-internalantlr4-runtimejsr305failureaccesslistenablefutureerror_prone_annotationsj2objc-annotationschecker-qualnetty-codecnetty-codec-socksnetty-codec-dnskotlin-stdlib-jdk7kotlin-stdlibkotlin-stdlib-commonjetbrains-annotationsbcprov-jdk15onTable 1. Descriptive statistics of the software supply chain of the two major enterprise Java Ethereum nodes: Besu

v21.10.6 (ef7984b) and Teku v22.1.0 (5b85ef1).

LINES OF JAVA CODE
COMMITS
CONTRIBUTORS

UNIQUE INTERNAL DEPENDENCIES
UNIQUE THIRD-PARTY DEPENDENCIES
UNIQUE SUPPLIERS

UNIQUE THIRD-PARTY DEPENDENCIES INTRODUCED SINCE JANUARY 2021
UNIQUE THIRD-PARTY SUPPLIERS INTRODUCED SINCE JANUARY 2021
UNIQUE THIRD-PARTY DEPENDENCY VERSIONS MODIFIED SINCE JANUARY 2021

BESU (ETH1)

TEKU (ETH2)

268,356
3,125
115

209,860
3,142
65

41
355
165

127
49
171

57
293
146

79
22
150

repositories, with no formal ties with Hyperledger
and Besu for most of them.

16

In the central part of Figure 1, we zoom into
the dependency tree of one of the 41 modules
of Besu: besu-core. The compilation of this
module depends on 29 internal dependencies,
shown on the far left of the ﬁgure, as well as
on 51 third-party dependencies that are also
necessary for compilation. The third-party depen-
dencies are colored according to the name of
the supplier organization. For example, the third-
party dependencies in dark yellow are handled
by supplier “Netty.” Overall, the supply chain
of besu-core is made of libraries maintained
by
distinct suppliers. We note that: 1)
Many suppliers are large organizations with high
code quality standards (e.g., Apache, Google,
JetBrains), which are trusted and relied on by
many clients; 2) There are partner suppliers such
as the quorum-mainnet-launcher library devel-
oped by ConsenSys. Although not being main-
tained by Hyperledger, the developers are close to
the professional network of Besu developers; 3)
Some libraries in the supply chain of besu-core
belong to personal GitHub accounts, such as
picocli and snappy-java. They are maintained
and released by a single developer and cannot
arguably be trusted as much as dependencies from
big tech organizations or partner suppliers [16].

Teku

Teku is the leading ETH2 Java node built to
meet enterprise requirements. For example, Teku
provides enterprise features such as monitor-
ing with Prometheus, REST APIs for managing
ETH2 node operations, and external key manage-
ment to handle validator signing keys. Teku is an
open-source project under active development on

GitHub.5 The ﬁrst commit to the Teku codebase
was made on September 9th 2018. Since then,
the project has seen a rapid development pace,
accounting for 3,142 commits contributed by a
total of 65 developers.

Table 1 shows the descriptive statistics for the
software supply chain of Teku v22.1.0, released
on January 3rd, 2022. The project contains a total
of 57 unique internal dependencies and relies
on 293 unique third-party dependencies. Like
Besu, Teku ships a large body of code coming
from third-party dependencies with each new
release. As for Besu, they are provided by 146
distinct suppliers with different code quality and
security standards. For the Ethereum ecosystem,
the security and reliability of Besu’s and Teku’s
supply chain are equally important. One crashing
bug or successful attack on either of them would
potentially be devastating.

Supply Chain Evolution

In the bottom part of Table 1, we give
novel insights about the evolution of the Java
Ethereum software supply chains. We built the
dependency trees of both supply chains, from
January 2021: Besu v20.10.4 (120d0d4) and Teku
v21.1.0 (dcfb0eb). We compare these trees with
the versions released one year later, in January
2022. We collect the number of dependencies in-
troduced and modiﬁed in the supply chain of Besu
and Teku, as well as the number of additional
suppliers that have appeared along the evolution
of these supply chains. We found 127 unique
dependencies in the dependency tree of Besu and
79 dependencies in the dependency tree of Teku
that are present in 2022 and that were not in

5https://github.com/ConsenSys/teku

the tree of 2021. This represents a signiﬁcant
growth of both supply chains, indicating the need
for regular monitoring and assessment of the
projects’ dependencies.

The growth also holds for the number of
there
suppliers of dependencies. In one year,
have been 49 and 22 new suppliers in the
supply chains of Besu and Teku, respectively.
This is clear evidence that a complex supply chain
evolves fast. Consequently, an approach based on
“allow” and “deny” lists of suppliers is not viable,
as it would necessitate frequent updates of these
lists and potential delays in their assessment.
The management of the software supplier risks
must be supported by tools that regularly monitor,
analyze and assess the supply chain in order to
cope with this evolution.

Supply Chain Diversity

The Ethereum community values and explic-
itly promotes the development and the mainte-
nance of a diversity of node implementations [8].
Ethereum experts consider that node diversity is
essential, in order for the network to be healthy
and secure. Besu and Teku are two different
node implementations, built by different devel-
opment teams, following different development
roadmaps. Meanwhile, their software dependen-
cies represent a large body of their code base.
We assess the diversity among these implemen-
tations by looking into the diversity among their
dependencies and suppliers. To do so, we extract
the intersection of the dependencies of Besu and
Teku. The supply chain of both nodes share a
total of 190 third-party dependencies, which
represents the 53.5 % and 64.8 % of the de-
pendencies of Besu and Teku, respectively. This
is illustrated in Figure 2. Furthermore, we observe
that 92 suppliers are common to both node im-
plementations. Even though Besu and Teku may
look like entirely different node implementations,
our results indicate that they actually carry out a
large body of common code, a potential common
failure point. This suggests that the Ethereum
community may work on supply chain diversity
in addition to node diversity for further increasing
resilience.

Let us discuss the case of a dependency that
is shared by both Besu and Teku: the Apache
logging library log4j. In December 2021, a new

Figure 2. Limited diversity among the software sup-
ply chains of Besu and Teku: the former includes
355 unique third-party dependencies and the latter
is made of 293 dependencies, but 190 dependencies
are shared by both supply chains. The shared depen-
dencies represent 53.5% and 64.8% of the Besu and
Teku supply chains.

CVE was published, documenting an exploit af-
fecting all versions of log4j from version 2.0
to 2.14.1 (CVE-2021-44228) [17]. This caused
a major disruption on the web, as log4j is a
third-party dependency in thousands of software
supply chains, including the ones of very critical
services, such as Amazon and Microsoft Azure.
This vulnerability allows an attacker to perform
arbitrary remote code execution on the running
application, exploiting the vulnerable version of
the log4j library. Now, assume that an attacker
had had the time to exploit this vulnerability in
Ethereum Java nodes. Since both nodes share
the same dependency,
the scale
of the repercussions would have been ampliﬁed.
The whole Ethereum ecosystem (both ETH1 and
ETH2) would have suffered from potential chain
splits, violations of the consensus protocol, and
in the worst case, loss of funds and bored apes.
If the two implementations had relied on diverse
suppliers of logging facilities, the common fail-
ure risk would have been reduced. For example,
Logback or Tinylog are trustworthy alternatives
to log4j. Migrating from log4j to Logback in
Besu requires minimal engineering effort: less
than 10 ﬁles need to be modiﬁed,
thanks to
modern Java logging architectures. This diversi-
ﬁcation would beneﬁt Besu nodes by providing

it means that

different logging implementations from different
suppliers, decreasing the chances of vulnerabili-
ties with a blast effect. We believe that the sys-
tematic assessment and enforcement of diversity
in software supply chains is an important and
promising research avenue.

SUPPLY CHAIN REMEDIATIONS

The two enterprise Java Ethereum nodes, Besu
and Teku, depend on hundreds of third-party
dependencies. Today, there exist tools that can
automatically enforce dependency management
policies. Those policies include license checking,
supplier approval, update frequency and security.
In this article, we focus on the solutions for the
latter two:
identify outdated dependencies and
replace vulnerable dependencies.

Remediation of Outdated Dependencies

Third-party libraries constantly evolve to ﬁx
defects, patch vulnerabilities, and add features.
To take full advantage of third-party code, it is
considered best practice to keep the dependencies
up-to-date. However,
is hard to stay up-to-
it
date when the supply chain of a project includes
a large number of dependencies, each of them
having different lifecycles and release schedules.
In a large dependency tree, it is not uncommon
that there is one new version of some dependency
in the tree released per day.

Keeping dependency up-to-date ﬁrst means
being aware of new versions (e.g., due to a new
release announcement or a security advisory).
Once outdated dependencies are identiﬁed, the
developers ensure that the update does not in-
troduce breaking changes. Finally, they commit
a change to bump the dependency version. To
our knowledge, the developers of Besu and Teku
currently perform this monitoring and update
procedure manually. For instance, Listing 1 shows
an example of a manual dependency update
where a Besu developer updated the dependency
commons-codec from version 1.13 to 1.15.

However, there exist software bots that au-
tomatically scan dependency trees and perform
library updates, e.g., Dependabot, Renovate, and
Jared. To our knowledge, none of them are en-
abled in Besu and Teku. To assess their relevance
in the context of these nodes, we performed
a pilot experiment as follows. We forked their

@@ −49,7 +49,7 @@ dependencyManagement {
− dependency ‘commons−codec:commons−codec:1.13’
+ dependency ‘commons−codec:commons−codec:1.15’

Listing 1. Example of a commit diff from a manual
pull request (PR #3235) made by a developer to
update the dependency commons-codec in Besu.

GitHub repositories and conﬁgured Dependabot
and Renovate to identify and remediate outdated
dependencies.

Table 2 shows the number of outdated third-
party dependencies detected and reported by both
dependency bots on January 15th, 2022. Depend-
abot reports 3 and 1 outdated dependencies in
Besu and Teku, respectively, whereas Renovate
reports 49 and 19 outdated dependencies.
Renovate identiﬁes many more updates because
1) it supports various package managers, and 2) it
suggests updating infrastructure dependencies (in
addition to application dependencies ). Overall,
both bots reveal several outdated dependencies
that need to be acted upon. This conﬁrms that us-
ing these state-of-the-art supply chain tools would
allow Besu and Teku developers to be more
up-to-date and more diligent in handling their
dependencies. From an economic perspective, it
would avoid the engineering burden of manually
checking new releases of their dependencies.

Remediation of Vulnerable Dependencies

Blackhat actors perform supply chain at-
tacks [15]. They purposefully compromise one
dependency to achieve malicious goals, such as
theft or denial of service. Put it simply, vulnerable
dependencies may cause a range of problems for
Ethereum nodes related to their conﬁdentiality, in-
tegrity, or availability. Indeed, in December 2021,
the Teku development team urgently mobilized
their engineers after an important vulnerability
disclosure: that of log4j [17] already mentioned
above. Listing 2 shows the commit made to ﬁx
this critical vulnerability. To our knowledge, no
successful attacks have been performed on Besu
or Teku thanks to this timely commit.
As with outdated dependencies,

technol-
ogy exists to remediate vulnerable dependencies
swiftly, such as OWASP Dependency Checker,
Synk, or WhiteSource. The identiﬁcation of
vulnerable dependencies in a software supply

Table 2. Overview of risk metrics in the software supply chain of Besu v21.10.6 (ef7984b) and Teku v22.1.0 (5b85ef1).

The data was obtained in January 15th, 2022.

OUTDATED THIRD-PARTY DEPENDENCY VERSIONS (DEPENDABOT)
OUTDATED THIRD-PARTY DEPENDENCY VERSIONS (RENOVATE)

VULNERABLE THIRD-PARTY DEPENDENCY VERSIONS (OWASP)
VULNERABLE THIRD-PARTY DEPENDENCY VERSIONS (WHITESOURCE)

3
49

11
15

1
19

2
17

BESU (ETH1)

TEKU (ETH2)

@@ −96,7 +96,7 @@ dependencyManagement {
− dependencySet(group: ‘org.apache.logging.log4j’, version:

(cid:44)→ ’2.13.3’) {

+ dependencySet(group: ‘org.apache.logging.log4j’, version:

(cid:44)→ ’2.15.0’) {
entry ‘log4j−api’
entry ‘log4j−core’
entry ‘log4j−slf4j−impl’

Listing 2. Commit diff (a52f376) showing a critical
security update of the dependency log4j made to
prevent a potential remote code exploit in Teku.

chain relies on scanning curated vulnerability
databases, such as the National Vulnerability
Database (NVD), and mapping vulnerability iden-
tiﬁers to versions in package repositories. To our
knowledge, the Teku team runs,as crontab job, a
vulnerability identiﬁcation tool called Trivly, but
without automated remediation.

We searched for vulnerable dependencies in
Besu and Teku with two state-of-the-art tools,
considered as among the best tools in this domain:
the OWASP Dependency Checker and White-
Source. Table 2 shows the results of the analysis,
performed on January 15th, 2022. OWASP de-
tects 11 and 2 vulnerable dependencies in Besu
and Teku, respectively, whereas WhiteSource de-
tects 15 and 17 vulnerable dependencies. These
results show that each tool focuses on different
aspects, thus there is currently no silver bullet to
identify dependency vulnerabilities. Interestingly,
OWASP and WhiteSource both report the depen-
dency netty-transport as affected by several
vulnerabilities, which can be considered as a
severe issue. Also, we note that some vulnerable
dependencies exists in both Besu and Teku, which
is further evidence of the need for supply chain
diversity discussed previously.

Neither Besu nor Teku use OWASP Depen-
dency Checker or WhiteSource on a regular basis,
yet. Indeed, in January 2022, an active developer
of Besu opened a pull-request to add the OWASP

dependency checker in the build pipeline of the
project (see PR #3288, not merged at the time
of writing). Installing the OWASP Dependency
Checker in the continuous integration pipeline of
Besu would allow analyzing its dependency tree
every time the node is built. This way, developers
are notiﬁed early in case of potential security
issues related to third-party dependencies. At the
moment of writing this article, such an initiative
has not been taken for Teku. We believe that both
Besu and Teku will eventually embed vulnerable
dependency checking in their pipeline,
this is
inevitable for any major software project with a
high stake.

CONCLUSION

In this article, we deep-dived into the software
supply chains of Besu and Teku. These two
open-source projects are the major enterprise Java
Ethereum nodes, which are in charge of ﬁnancial
and artistic transactions worth billions of dollars.
Our analysis reveals that both Ethereum node
implementations are large software projects that
depend on hundreds of libraries provided by a
variety of supplier organizations.

Our work contributes to the state-of-the-art
of software supply chains, with unique insights
about complex networks of dependencies. We
outlined the important growth of the software
supply chains, as well as the increase of the
number of suppliers on which Besu and Teku
rely. We showed where the state-of-the-art lies
with respect to remediation tools for hardening
the software supply chain.

While the Ethereum community stresses the
importance of maintaining and incentivizing a di-
versity of node implementations, we have shown
that the supply chains of Besu and Teku share a
majority of their third-party dependencies. This
is a serious limitation for the software diversity
in the Ethereum ecosystem. Also, we have shown

that dependency management for Besu and Teku
can be improved with automated remediation.
The signiﬁcance of our ﬁndings suggests that a
similar analysis would be worthwhile for other
Ethereum node implementations, such as Geth
written in Go. Finally, we sincerely believe that
our insights on the engineering of software supply
chains hold for any blockchain that matters.

ACKNOWLEDGMENTS
This work has been partially supported by the
Wallenberg Autonomous Systems and Software
Program (WASP) funded by the Knut and Al-
ice Wallenberg Foundation, as well as by the
TrustFull and the Chains projects funded by the
Swedish Foundation for Strategic Research.

REFERENCES

Detection of Intrusions and Malware, and Vulnerability

Assessment. Springer, 2020, pp. 23–43.

11. F. Massacci and I. Pashchenko, “Technical

leverage

in a software ecosystem: Development opportunities

and security risks,” in Proceedings of the IEEE/ACM

43rd International Conference on Software Engineering

(ICSE), 2021, pp. 1386–1397.

12. J.-P. Aumasson, D. Kolegov, and E. Stathopoulou, “Se-

curity Review of Ethereum Beacon Clients,” arXiv e-

print 2109.11677, Sep. 2021.

13. @jawn.eth, “Jawn was here,” Ethereum Block Num-

ber: 14129361, https://www.notiﬁ.xyz/messages/1512,

2022.

14. S. Schuetz and V. Venkatesh, “Blockchain, adoption,

and ﬁnancial

inclusion in india: Research opportuni-

ties,” International journal of information management,

vol. 52, p. 101936, 2020.

15.

I. Pashchenko, H. Plate, S. E. Ponta, A. Sabetta, and

F. Massacci, “Vulnerable open source dependencies:

1. C. Dannen,

Introducing Ethereum and solidity.

Counting those that matter,” in Proceedings of

the

Springer, 2017.

ACM/IEEE 12th International Symposium on Empiri-

2. R. Monroe,

“When

n.f.t.s

invade

an

art

cal Software Engineering and Measurement (ESEM),

town,” The New Yorker, 2022.

[Online]. Avail-

2018.

able: https://www.newyorker.com/culture/inﬁnite-scroll/

16. T. Gustavsson, “Managing the open source depen-

why-bored-ape-avatars-are-taking-over-twitter

dency,” Computer, vol. 53, no. 2, pp. 83–87, 2020.

3. S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash

17. National Vulnerability Database,

“CVE-2021-44228,

system,” Technical Report, 2008.

Apache Log4j Vulnerability.” https://nvd.nist.gov/vuln/

4. J. Mackintosh, “Deﬁ is crypto’s wall street, without a

detail/CVE-2021-44228, December 10th, 2021.

safety net,” Wall Street Journal, 2021.

5. G. Wood et al., “Ethereum: A secure decentralised gen-

eralised transaction ledger,” Ethereum project yellow

paper, vol. 151, no. 2014, pp. 1–32, 2014.

6. H. Huang, W. Kong, S. Zhou, Z. Zheng, and S. Guo,

“A survey of state-of-the-art on blockchains: Theo-

ries, modelings, and tools,” ACM Computing Surveys,

vol. 54, no. 2, Mar. 2021.

7. C. Lamb and S. Zacchiroli, “Reproducible builds: In-

creasing the integrity of software supply chains,” IEEE

Software, pp. 1–10, 2021.

8. P.

Ranjan,

“The

state

of

client

diversity

in

ethereum,”

August

20th

2020.

[Online].

Available: https://medium.com/ethereum-cat-herders/

the-state-of-client-diversity-in-ethereum-2ca915a3d768

9. A. Gkortzis, D. Feitosa, and D. Spinellis, “Software

reuse cuts both ways: An empirical analysis of its re-

lationship with security vulnerabilities,” Journal of Sys-

tems and Software, vol. 172, 2021.

10. M. Ohm, H. Plate, A. Sykosch, and M. Meier, “Backstab-

ber’s knife collection: A review of open source software

supply chain attacks,” in International Conference on

a PhD student

ABOUT THE AUTHORS
César Soto-Valero is
in
Software Technology at KTH Royal Institute of
Technology in Stockholm, Sweden. His research
work focuses on leveraging static and dynamic
program analysis techniques to mitigate software
bloat. Read about César on his personal website
https://cesarsotovalero.net.

Martin Monperrus is Professor of Software
at KTH Royal
Technology
of
Technology
Sweden. He
in
researches
engineering, with a
focus on software reliability. He disseminates
his research in industry through open-source and

in software

Stockholm,

Institute

participation to industrial ventures. He counsels
the banking and ﬁnancial sector with regard to
distributed ledgers and digital assets. Read about
Martin at https://monperrus.net/martin.

Benoit Baudry is a Professor of Software Tech-
nology at KTH Royal Institute of Technology
in Stockholm, Sweden. He received his PhD in
2003 from the University of Rennes and was a
research scientist at INRIA from 2004 to 2017.
His research in software engineering focuses on
software testing and automatic diversiﬁcation.
He also minted digital art on the Ethereum
blockchain. Read about Benoit on his personal
website https://softwarediversity.eu.

