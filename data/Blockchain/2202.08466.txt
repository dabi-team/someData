Insightful Mining Equilibria

Mengqian Zhang
Shanghai Jiao Tong University
mengqian@sjtu.edu.cn

Yuhao Li
Columbia University
yuhaoli@cs.columbia.edu

Jichen Li
Peking University
limo923@pku.edu.cn

Chaozhe Kong
Peking University
kcz@pku.edu.cn

Xiaotie Deng
Peking University
xiaotie@pku.edu.cn

Abstract

The selﬁsh mining attack, arguably the most famous game-theoretic attack in blockchain,
indicates that the Bitcoin protocol is not incentive-compatible. Most subsequent works mainly
focus on strengthening the selﬁsh mining strategy, thus enabling a single strategic agent more
likely to deviate.
In sharp contrast, little attention has been paid to the resistant behavior
against the selﬁsh mining attack, let alone further equilibrium analysis for miners and mining
pools in the blockchain as a multi-agent system.

In this paper, ﬁrst, we propose a strategy called insightful mining to counteract selﬁsh mining.
By inﬁltrating an undercover miner into the selﬁsh pool, the insightful pool could acquire the
number of its hidden blocks. We prove that, with this extra insight, the utility of the insightful
pool could be strictly greater than the selﬁsh pool’s when they have the same mining power.
Then we investigate the mining game where all pools can either choose to be honest or take
the insightful mining strategy. We characterize the Nash equilibrium of this mining game, and
derive three corollaries: (a) each mining game has a pure Nash equilibrium; (b) honest mining is
a Nash equilibrium if the largest mining pool has a fraction of mining power no more than 1/3;
(c) there are at most two insightful pools under equilibrium no matter how the mining power is
distributed.

2
2
0
2

b
e
F
7
1

]
T
G
.
s
c
[

1
v
6
6
4
8
0
.
2
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
1

Introduction

Bitcoin [1], as the pioneering blockchain ecosystem, proposes an electronic payment system without
It creatively uses Proof-of-Work (PoW) to incentivise all miners to solve a
any trusted party.
cryptopuzzle (also known as mining). The winner will gain the record-keeping rights to generate a
block and be awarded the newly minted tokens. As more and more computational power is invested
into mining, it may take a sole miner months or even years to ﬁnd a block [2]. In order to reduce the
uncertainty, a group of miners form a mining pool to share their computational resources. Under
the leadership of the pool manager, all miners in a pool solve the same puzzle in parallel and share
the block rewards. In the Bitcoin system, so long as all participants behave honestly, one’s expected
revenue will be proportional to its hashing power.

However, in practice, miners are rational and may act strategically. Thus, game theory naturally
stands out as a tool to analyze the robustness of the Bitcoin protocol. The conventional wisdom
would expect a proof of the incentive compatibility of the Bitcoin protocol and subsequently the
strategyproofness against manipulative miners.

Such a hope was broken by the seminal work [3], which proposed the selﬁsh mining strategy,
arguably the most well-known game-theoretic attack in blockchain. It indicates that the Bitcoin
mining protocol is not incentive-compatible. The key idea behind the attack is to induce honest
miners to waste mining power of honest miners. As a result, the selﬁsh pool could obtain more
revenue than its fair share.

Pushing this approach to the extreme, Sapirshtein et al. [4] expanded the action space of selﬁsh
mining, modeled it as a Markov Decision Process (MDP), and pioneered a novel technique to
resolve the non-linear objective function of the MDP to get a more powerful selﬁsh mining strategy,
for a revenue arbitrarily close to the optimum. A series of works have since been initiated to
study the mining strategies of a rational pool under the same assumption that other pools behave
honestly [5, 6, 7, 8, 9, 10].

In sharp contrast, little attention has been paid to the incentive of the victims, which plays
an important role in studying the strategic interactions among participants and understanding
the stable state of blockchain systems.
In this paper, we propose and study the following vital
questions.

Can a pool strategically defend against the selﬁsh mining attack?
And what equilibrium will the ecosystem of diﬀerent types of agents reach eventually?

1.1 Our Contributions

In this work, we propose a strategy called insightful mining (Fig. 2) and call the pool adopting the
insightful mining strategy as the insightful pool. Once detecting a selﬁsh pool, an insightful pool
can inﬁltrate an undercover miner into it to monitor the number of hidden blocks.1 With this key
information, the insightful pool keeps a clear view of the current mining competition, i.e., the length
of the public branch and the selﬁsh branch of the blockchain. Then it utilizes this information to
respond strategically. At a high level view, when observing that the selﬁsh pool is taking the lead,
the insightful pool would behave honestly to end its leading advantage as quickly as possible. On
the other hand, when the insightful pool is taking the lead, it will execute a strategy similar to
selﬁsh mining, regarding the selﬁsh pool and the honest pool as “others”.

1We discuss this action in more detail in Section 3.1.

1

We model the intersections among the honest pool, the selﬁsh pool, and the insightful pool as
a two-dimensional Markov reward process with an inﬁnite number of states (Fig. 3 and Table 1).
We prove that, when there is a selﬁsh pool and an insightful pool with the same mining power, the
insightful pool would get a strictly greater expected revenue than the selﬁsh pool (Theorem 3.1).
This demonstrates that the extra insight signiﬁcantly reverses the selﬁsh pool’s advantage.

Then we investigate the scene where all n mining pools are strategic. Besides counteracting the
selﬁsh mining attack, insightful mining can be adopted directly as a mining strategy. Speciﬁcally,
insightful mining resembles selﬁsh mining if there is no pool mining selﬁshly. We study the mining
game where each pool plants spies into all other pools, and chooses either to follow the Bitcoin
protocol or to take the insightful mining strategy. Such a mining game can be formulated as an n-
player normal-form game. Note that although there are 2n pure strategy proﬁles, the payoﬀ function
of each player is explicitly represented (Proposition 4.1). Our main result here is a characterization
theorem of the Nash equilibrium in mining games (Theorem 4.2). Concretely, Theorem 4.2 derives
three corollaries: (a) each mining game has a pure Nash equilibrium; (b) honest mining is a Nash
equilibrium if the largest mining pool has a fraction of total hashing power no more than 1/3;
(c) there are at most two insightful pools under equilibrium no matter how the mining power is
distributed.

Beyond our theoretical results, we also conduct a series of simulations to understand insightful
mining. First, we explore the performance of the insightful mining strategy when the insightful
pool and the selﬁsh pool have diﬀerent mining power (Section 5.1). Simulation results provide
compelling evidence that the insightful pool could gain more revenue even if it holds less mining
power than the selﬁsh pool. Second, we learn an optimal insightful mining strategy via Markov
Decision Process (Section 5.2). It tells us that once the insightful branch is overridden during the
mining competition, sticking to it for a while is a better choice than giving up immediately. Finally,
we focus on the mining game and visualize the participants’ equilibrium strategy, as well as the
corresponding utility (Section 5.3).

In the end, we discuss the role of the undercover miner in the context of selﬁsh mining and

blockchain, which sheds new light upon the future research directions (Section 6).

We summarize our main contributions in the following Fig. 1.

1.2 Related Work

The classic selﬁsh mining attack was ﬁrst proposed and mathematically modeled as a Markov
reward process in the seminal paper [3]. Observing that the classic selﬁsh mining strategy could
be suboptimal for a large parameter space, several works [4, 5] further generalized the system as
a Markov Decision Process (MDP) to ﬁnd the optimal selﬁsh mining strategy. Aiming to solve
the average-MDP with a non-linear objective function, [4] proposed a binary search procedure by
converting the problem into a series of standard MDPs, which is also adopted for learning our
optimal insightful mining strategy in Section 5.2. A recent work [11] developed a more eﬃcient
method called Probabilistic Termination Optimization, converting the average-MDP into only one
standard MDP.

It was more challenging to study other agents’ incentives against one selﬁsh miner, due to the
tremendous state spaces and complicated Markov reward processes. The work of [12] presented some
simulation results on systems involving multiple selﬁsh miners [3] or involving multiple stubborn
miners [5]. On the learning side, a recent work [13] proposed a novel framework called SquirRL,
which is based on deep reinforcement learning (deep-RL) techniques. Their experiments suggest
that when facing selﬁsh mining, adopting selﬁsh mining might not be the optimal choice. We prove

2

Figure 1: Summary of our contributions.

such a result by providing the insightful mining strategy and the dominating theorem (Theorem 3.1).
The most strengthen of SquirRL is a more general strategy space generated by deep-RL. We
highlight that it cannot cover our insightful mining strategy since our most strengthen comes from
our undercover miner’s insights (information), which was not discussed in the wide selﬁsh mining
context.

To our best knowledge, the most related work that theoretically studied the equilibria with
multiple selﬁsh mining pools is [14]. Due to the analytical challenges of inﬁnite states in the classic
selﬁsh mining strategy, they proposed a simpliﬁed version called semi-selﬁsh mining, where the
strategic mining pool will only keep a private chain of length at most two. Such a restriction
makes the Markov reward process have ﬁnite states (as long as there are ﬁnite number of semi-
selﬁsh miners) and subsequently simpliﬁes the equilibrium analysis. However, our insightful mining
strategy works against the classic selﬁsh mining strategy, and itself may also keep an arbitrary
long private chain. While this leads to a 2-dimensional Markov reward process with an inﬁnite
number of states, the techniques in mathematical analysis are suﬃcient for us to prove the desired
dominating theorem (Theorem 3.1) and equilibrium characterization (Theorem 4.2).

2 Preliminaries

2.1 Proof of Work

In the context of blockchain, Proof of Work was ﬁrst introduced in Bitcoin [1]. As mentioned,
the security of Bitcoin heavily relies on the Proof-of-Work scheme, which has also been widely
adopted by other blockchain systems like Ethereum [15]. The past decade has seen a great amount
of research around PoW, with respect to its block rewards design [16], strategic deviation [17], the
diﬃculty adjustment algorithm [18, 19], the energy costs [20] and so on.

3

Taking the Bitcoin as an example, PoW requires a miner to randomly engage in the hashing
function calls to solve a cryptopuzzle. Typically, miners should search for a nonce value satisfying
that

H(previous hash; address; M erkle root; nonce)

D

≤

(1)

) is a commonly known hash function (e.g., SHA-256 in Bitcoin); precious hash is the
where H(
·
hash value of the previous block; address is the miner’s address to receive potential rewards; Merkle
root is an integrated hash value of all transactions in the block; and D is the target of the problem
and reﬂects the diﬃculty of this puzzle.2 Started from the genesis block, all miners compete to
ﬁnd a feasible solution, thus generating a new block appended to the previous one. In return, they
will be awarded the newly minted bitcoins for their eﬀorts in maintaining the blockchain system.
The standard Bitcoin protocol treats the longest chain as the main chain. Once encountering two
blocks at the same block height, miners randomly choose one to follow according to the uniform
tie-breaking rule. Thus, in order to be accepted by more miners, it is suggested to publish the
newly generated block immediately. In this paper, the miners who sticks to the Bitcoin protocol
are referred to be honest.

2.2 Mining Pool

With more and more hashing power invested into the Bitcoin mining, the chances of ﬁnding a block
as a sole miner are quite slim. Nowadays, miners tend to participate in organizations called mining
pool.

In general, a mining pool is composed of a pool manager and several peer miners. All partic-
ipants shall cooperate to solve the same puzzle. Speciﬁcally, each miner will receive a task like
(1) above from the pool manager, as well as a work unit containing a particular range of nonce.
Instead of trying all possible nonce values, the miner only needs to search the answer from the
received work unit. In this way, all miners in the pool work in parallel. Once any miner ﬁnd a
valid solution, this pool succeeds in this mining competition. Then a new task will be organised
and further released to all miners in the pool. Also, participants will share the mining rewards
according to the reward allocation protocol like Pay Per Share (PPS), proportional (PROP), Pay
Per Last N Shares (PPLNS) [21] and so on. In expectation, the miners’ rewards is proportional
to their hashing power. As a result, miners who join the mining pool can signiﬁcantly reduce the
variance of mining rewards. Currently, most of the blocks in Bitcoin are generated by mining pools
such as AntPool [22], Poolin [23], F2Pool [24].

2.3 Selﬁsh Mining

It has long been believed that Bitcoin protocol is incentive-compatible. However, Eyal and Sirer [3]
indicates that it is not the case. It describes a well-known attack called selﬁsh mining. A pool
could receive higher rewards than its fair share via the selﬁsh mining strategy. This attack exploits
ingeniously the conﬂict-resolution rule of the Bitcoin protocol, in which when encountering a fork,
only one chain of blocks will be considered valid. With the selﬁsh mining strategy, the attacker
deliberately creates a fork and forces honest miners to waste eﬀorts on a stale branch. Speciﬁcally,
the selﬁsh pool strategically keep its newly found block in secret, rather than publishing it immedi-
ately. Afterwards, it continues to mine on the head of this private branch. When the honest miners

2For security, the diﬃcult of puzzles will be adjusted automatically, to make sure the mean interval of block

generation is 10 minutes.

4

generate a new block, the selﬁsh pool will correspondingly publish one private block at the same
height and thus create a fork. Once the selﬁsh pool’s leads reduces to two, an honest block will
prompt the selﬁsh pool to reveal all its private branch. As a well-known conclusion, assuming that
the honest miners apply the uniform tie-breaking rule, if the fraction of the selﬁsh pool’s mining
power is greater than 25%, it will always get more beneﬁt than behaving honestly.

3

Insightful Mining Strategy

3.1 Model and Strategy

,

,

I

S

H

(cid:80)

n
i=1 mi = 1. Let

This paper considers a system of n miners. Each miner i has mi fraction of total hashing power, such
denote the set of honest miners, selﬁsh miners, and insightful miners
that
respectively. As the honest miners strictly follow the Bitcoin protocol and do not hide any block
information from each other, they are regarded as a whole, which is referred to as the honest pool
in the paper. Similarly, all selﬁsh miners who adopt the selﬁsh mining strategy combine together to
behave as a single agent, which is called the selﬁsh pool. The remaining miners form the insightful
pool and adopt the insightful strategy stated later. Let α and β denote the fraction of mining
i∈S mi
power controlled by the selﬁsh pool and the insightful pool respectively. We have α =
β.
α
i∈I mi. Then the total power of the honest pool can be represented as 1
and β =
−
(cid:80)
Following the previous work [3, 4], in this paper, we also assume that the time to broadcast a block
is negligible, and the transaction fee is negligible. In other words, the pools’ revenue mainly comes
from block rewards. In addition, the block generation is treated as a randomized model, where a
new block is generated in each time slot.

(cid:80)

−

Now we describe the insightful mining strategy. Before getting into the details, we state that the
insightful pool could learn how many blocks the selﬁsh pool has been hiding by doing the following.
The manager of the insightful pool shall pretend to join the selﬁsh pool as a spy. As a pool member,
it will receive a mining task from the manager of the selﬁsh pool. The hash value of the previous
block can be parsed from the task. Normally, this hash value corresponds to the last block of the
main chain. Once the selﬁsh pool mines a block3, its manager will keep the block privately and
publish a new task based on it. From the perspective of the spy, there is no newly published block
in the system, but the selﬁsh manager releases a new task which is based on an unknown block.
Then it is reasonable to believe that the selﬁsh manager is hiding blocks. Furthermore, the number
of hidden blocks is exactly the number of recently received tasks with unmatched previous hash.

By working as a spy4, the insightful pool has a clear understanding of the system’s situation, i.e.,
the mining progress of each player. Although all pools are mining after the main chain, the three
players may hold diﬀerent sub-chain (also referred to as branch) during the mining competition.
Let lh, ls, li denote the length of honest branch, selﬁsh branch, and insightful branch respectively.
In the process of mining, the honest pool only knows the public information lh. The selﬁsh pool
is aware of both lh and ls, while the insightful pool can observe all three lengths. Then the three
types of players compete to generate blocks based on their own information. Their competition
works in rounds. Each round begins with a global consensus on the current longest chain. When
the selﬁsh pool and insightful pool reveal all their private blocks, or they have no hidden blocks
while the honest pool ﬁnds a block (see Case 1 below), the round ends, leading to a new global
consensus. For the ﬁrst block in a round, there are three possible cases.

3A member of the selﬁsh pool ﬁnds an acceptable nonce to the cryptopuzzle and submits it to the manager.
4We assume that the mining power of this spy is negligible, as well as its revenue from the selﬁsh pool.

5

Figure 2: Flow chart of the insightful mining.
selﬁsh branch, and insightful branch respectively.

lh, ls and li are the length of the honest branch,

α

−

−

Case 1: the honest pool generates the ﬁrst block. With probability 1

β, the honest pool
mines a block and broadcasts it immediately. In this case, the insightful pool accepts this newly
generated block and mines after it. According to the selﬁsh mining strategy, the selﬁsh pool will
do the same. Consequently, all players reach consensus in this case and compete for the next block.
Case 2: the selﬁsh pool generates the ﬁrst block. With probability α, the selﬁsh pool mines a
block. Based on the selﬁsh mining strategy, the selﬁsh pool will keep it private, aiming to further
extend its lead. After observing this situation through the spy in the selﬁsh pool, the insightful
pool behaves honestly until the selﬁsh pool reveals all its hidden blocks. Recall that when facing
two branches of the same height, the honest pool uniformly chooses one of the them. The insightful
pool, however, will deterministically mine on the opposite of the selﬁsh branch. The key insight
behind this strategy is to prompt the selﬁsh pool to reveal all its hidden blocks and end its leading
advantage as quickly as possible.

Case 3: the insightful pool generates the ﬁrst block. With probability β, the insightful pool
mines a block.
It hides this block and takes the following actions which are similar to selﬁsh
mining. The insightful pool keeps a watchful eye on how many blocks the selﬁsh pool and the
honest pool have mined respectively. In the following competition, when its lead is larger than
one (i.e., li
> 1), the insightful pool always hides all its mined blocks. Otherwise,
it reveals the private branch all at once. Here, the way of releasing blocks is diﬀerent from selﬁsh
mining which reveals blocks one by one in response to honest behavior. Both methods bring the
same revenue. Releasing all blocks at the last moment, however, can make this strategic behavior
avoid being detected.

lh, ls
{

max

−

}

Fig. 2 visualizes the ﬂow chart of the insightful mining strategy.

6

Conditions

β

−

−

Table 1: The state transitions and corresponding revenues.
State ˜s
(0,0)
(1,0)
(0(cid:48), 0)
(0,0)
(1, 0(cid:48))
(0,0)
(x + 1, 0)
(0,0)

β, 1+3α−β
2

, 1−α+3β
2

, 1+3α−β
2

, β)

−

−

−

≥

x

β

∀

1

)

No. State s

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24

(0,0)
(0,0)
(1,0)
(0(cid:48), 0)
(1,0)
(1, 0(cid:48))
(x, 0)
(2,0)
(x, 0)
(0,0)
(0,1)
(0,1)
(0, 0(cid:48))
(0,1)
(0,2)
(x, y)
(0, y)
(x, y)
(1, y)
(2, y)
(x, y)
(x, 2)
(0(cid:48), 2)
(0(cid:48), y)

α

α
α

−
−

P r[s, ˜s]
1
α
α
1
1
β
1
α
1
1
β
α
1
1
β
1
β
1
1) α
1
1
1
α
1
1

−
−
−

α
α
α

β
β

−

−

−

α

α

β

−

−
−
−

−

−
−

β

β

β
β
β

r[s, ˜s]
(1, 0, 0)
(0, 0, 0)
(0, 0, 0)
( 3−3α−β
2
(0, 0, 0)
(1
α
−
(0,0,0)
(0,2,0)
(0,1,0)
(0,0,0)
(0,0,0)
(0,0,0)
( 3−2α−3β
2
(0,0,0)
(0,0,2)
(0,0,0)
(0,0,1)
(0,0,1)
(0,0,0)
(0,0,0)
(0,0,0)
(0,0,2)
(0,0,2)
(0,0,1)

(x

1, 0)

−
(0,1)
(1, 0(cid:48))
(0, 0(cid:48))
(0,0)
(0,2)
(0,0)
(x, y + 1)
1)
(0, y
−
(x + 1, y
−
(0(cid:48), y)
(0, y)

(x

1, y)

−
(0,0)
(0,0)

(0, y

1)

−

x

∀

≥

3

, α, 1+3β

2

)

N, y

2

≥

(cid:83)
≥

3

2

≥

x
∀
y
∀
x
∀
y
∀
y
∀
3
∀
x
∀

y
∀

}

0(cid:48)
∈ {
3
≥
0, y
≥
2
≥
2
≥
2, y
≥
1
≥

3

≥

3.2 Markov Reward Process

N

0(cid:48)

To analyse the relative revenue of diﬀerent players under this strategy, we use a two-dimensional
state s = (x, y) to reﬂect the system status and further model the mining events as a Markov
Reward Process. The state x denotes the selﬁsh pool’s lead over the honest pool, i.e., the number
of blocks that the selﬁsh pool has not revealed. Similarly, y is the insightful pool’s lead over the
(0(cid:48) will be explained soon). Here, zero means the
selﬁsh pool. Thus, we have x, y
selﬁsh pool (corresponding to x) or the insightful pool (corresponding to y) has no hidden blocks.
Speciﬁcally, it contains two diﬀerent states which we use 0 and 0(cid:48) to distinguish. Take x as an
example. The state x = 0 indicates that the honest pool and the selﬁsh pool are in agreement
about a public chain. In other words, their branches are exactly the same. The state x = 0(cid:48) means
that the selﬁsh pool and others (the honest pool or the insightful pool) hold a separate branch of
the same length, and the selﬁsh pool has revealed all blocks on its branch. In the state of 0(cid:48), the
next block will break the tie and decides the longest chain. For y, the meanings of state 0 and 0(cid:48)
are similar to the above, with the insightful pool and others (the selﬁsh pool and the honest pool)
as two players.

∪ {

∈

}

Let P r[s, ˜s] denote the probability of changing from state s to state ˜s. The vector r[s, ˜s]
represents the expected revenue obtained from this state transition. It contains three components,
corresponding to the revenue of the honest pool, the selﬁsh pool, and the insightful pool respectively.

7

Figure 3: The Markov Process of the system under the insightful mining strategy.

With the help of these notations, Table 1 lists the detailed state transitions and corresponding
revenues in the system. Speciﬁcally, the item (1) formalizes Case 1 in Section 3.1. Items (2)-(9)
correspond to Case 2, and Case 3 contains the items (10)-(24). Fig. 3 also illustrates the overall
state transitions in a more intuitive way. The detailed analysis of each transition can be found in
Appendix A.

Recall that a branch will win at the end of one round. It is easy to verify that in our design

each block of this winning branch will be awarded to some player once and only once.

3.3 The Dominating Theorem

Let M :=

H, IM, SM
{

. The utility of each i
}

∈

M is the relative revenue deﬁned as follows:

RREVi = E

lim inf
T →∞



s0 = (0, 0), st+1

P r[st, st+1]

T
t=1 ri[st, st+1]
(cid:12)
(cid:12)
(cid:12)

T
(cid:80)
t=1

∼
s0 = (0, 0), st+1

j∈M rj[st, st+1]
(cid:12)
(cid:12)
H, SM, IM
(cid:12)
∈ {

.

∼

P r[st, st+1] 



Note that the transition probability P r[st, st+1],
, RREVi and ri[st, st+1] should
i
∀
depend on the mining power α and β. Here we simplify the notation without ambiguity. We denote
the Markov Reward Process of Fig. 3 by M arkov(α, β).

(cid:80)

(cid:80)

}

Like previous work [13], here we focus on the scenario where the selﬁsh pool and the insightful
pool have the same mining power. The following theorem asserts that, in this case, the expected
revenue of the insightful pool is strictly greater than the the expected revenue of selﬁsh pool. The
scenario with diﬀerent pool sizes (i.e., α

= β) will be explored in Section 5.1.

8

(cid:54)
Theorem 3.1. Let α and β be the fraction of mining power that selﬁsh pool and the insightful pool
controls respectively. When 0 < α = β < 1

2 , RREVSM (α, β) < RREVIM (α, β) holds.

Proof. First suppose that the stationary distribution of M arkov(α, β) exists, denoted by π, where
π(i,j) represents the stationary probability of state (i, j). Let S denote the (countable) set of states
in M arkov(α, β).

Let ERH (α, β), ERSM (α, β), ERIM (α, β) denote the expected reward of honest pool, selﬁsh

pool, and insightful pool respectively, which can be calculated as follows.

For each i

H, SM, IM

∈ {

, we have

}
ERi(α, β) =

P r[s, ˜s]

ri[s, ˜s]

πs,

·

·

s∈S
(cid:88)

˜s∈S
(cid:88)

where rH [s, ˜s], rSM [s, ˜s] and rIM [s, ˜s] denote r[s, ˜s](0), r[s, ˜s](1), and r[s, ˜s](2) respectively.

Then we have

and

RREVSM (α, β) =

ERSM (α, β)
ERH (α, β) + ERSM (α, β) + ERIM (α, β)

RREVIM (α, β) =

ERIM (α, β)
ERH (α, β) + ERSM (α, β) + ERIM (α, β)

.

We will give a lower bound of ERIM (α, β) that can be proved to be strictly greater than

ERSM (α, β) to show that RREVIM (α, β) > RREVSM (α, β) always holds.

We ﬁrst represent ERSM (α, β) as h1(α, β)
·

we obtain the following equations:

π(0,0). From the stationary distribution of M arkov(α, β),

π(1,0) = απ(0,0);
π(0,1) = βπ(0,0);
π(1,0(cid:48)) = βπ(1,0) + απ(0,1);
β)π(1,0);
π(0(cid:48),0) = (1
α
−
−
β)π(0,1);
π(0,0(cid:48)) = (1
α
−
−
π(i+1,0) = α
(1−α) π(i,0),

i
∀

≥






Then we have

π(1,0) = απ(0,0);
π(0,1) = βπ(0,0);
π(1,0(cid:48)) = 2αβπ(0,0);
π(0(cid:48),0) = α(1
π(0,0(cid:48)) = β(1
π(2,0) = α2

α
−
−
α
−
−
1−α π(0,0);

β)π(0,0);
β)π(0,0);

∞
i=3 π(i,0) =

α3
(1−α)(1−2α) ·

π(0,0).

=

⇒

1;






(cid:80)

ERSM (α, β) =

s∈S
(cid:88)

˜s∈S
(cid:88)

P r[s, ˜s]

·

rSM [s, ˜s]

πs

·

= (π(0(cid:48),0) + π(1,0(cid:48)))

1

·

·

= h1(α, β)

π(0,0),

·

1 + 3α
2

β

−

+ π(0,0(cid:48)) ·

1

α + π(2,0) ·

·

(1

−

α)

·

2 +

∞

i=3
(cid:88)

π(i,0) ·

(1

−

α)

1

·

where h1(α, β) := α(1

α + β)

We then give a lower bound of ERIM (α, β), denoted by ER∗

−

·

1+3α−β
2

+ α2(1

α

−

−

β) + 2α2 + α3

1−2α .
IM (α, β), which could be written

From the stationary distribution of M arkov(α, β), we obtain the following equations:

as h2(α, β)

π(0,0).

·

(cid:26)

βπ(0,1) = (1
β

−
i π(i,j) = (1

β)(π(0(cid:48),2) + π(0,2)) + α

i≥1 π(i,2);

β)(π(0(cid:48),j+1) + π(0,j+1)) + α

(cid:80)

−

i≥1 π(i,j+1),

j
∀

≥

2.

(cid:80)

9

(cid:80)

Note that α < 1

2 < 1

β. We have

−

βπ(0,1) = (1
i π(i,2) = (1

=

(cid:80)

· · ·

i π(i,j) = (1

β

β

(cid:80)

· · ·

=

In other words,

−
−
· · ·
−
· · ·

β)(π(0(cid:48),2) + π(0,2)) + α
β)π(0(cid:48),3) + (1

β)π(0,3) + α

i≥1 π(i,2) < (1

β)
i≥1 π(i,3) < (1

−

i π(i,2)
β)

i π(i,3)

−

(cid:80)

(cid:80)
−

β)π(0(cid:48),j+1) + (1

β)π(0,j+1) + α

(cid:80)

−

(cid:80)
i≥1 π(i,j+1) < (1
−

β)

i π(i,j+1)

(cid:80)

(cid:80)

i π(i,2) > β
i π(i,3) > β

1−β

1−β π(0,1)

i π(i,2) > ( β

1−β )2π(0,1)

(cid:80)
(cid:80)
· · ·

i π(i,j) > ( β

1−β )j−1π(0,1)

(cid:80)

Now

(cid:80)
· · ·

ERIM (α, β) =

s∈S
(cid:88)

= π(0(cid:48),0) ·

β + π(1,0(cid:48)) ·

˜s∈S
(cid:88)
1

−

P r[s, ˜s]

rIM [s, ˜s]

πs

·

·

α + 3β
2

+ π(0,0(cid:48)) ·

1 + 3β
2

+

(π(0(cid:48),2) + π(0,2))



(1

·

−

β) +

+

(π(0(cid:48),j) + π(0,j))

(1

·

−

β) +

π(i,j) ·

j≥3
(cid:88)

β + π(1,0(cid:48)) ·
= π(0(cid:48),0) ·

1

−

α + 3β
2

i≥1
(cid:88)
+ π(0,0(cid:48)) ·


1 + 3β
2

+ π(0,1) ·

β

·

2



α







+

(π(0(cid:48),j) + π(0,j))

(1

·

−

β) +

π(i,j) ·

α



j≥3
(cid:88)

β + π(1,0(cid:48)) ·
> π(0(cid:48),0) ·
We deﬁne ER∗

1

−

α + 3β
2

i≥1
(cid:88)
+ π(0,0(cid:48)) ·

IM (α, β) to be the last formula, i.e.,


1 + 3β
2

+ π(0,1) ·

2β + π(0,1) ·

1

β2

2β

−

.

(2)

π(i,2) ·

α



·

2



i≥1
(cid:88)

ER∗

IM (α, β) := π(0(cid:48),0) ·

β + π(1,0(cid:48)) ·

1

−

α + 3β
2

+ π(0,0(cid:48)) ·

1 + 3β
2

+ π(0,1) ·

2β + π(0,1) ·

1

β2

2β

−

.

So ER∗

IM (α, β) = h2(α, β)π(0,0), where

h2(α, β) = αβ(1

α

−

−

β) + 2αβ

1

−

α + 3β
2

·

+ β(1

α

−

−

β)

1 + 3β
2

·

+ 2β2 +

β3

2β

1

−

.

It is easy to verify that given α = β, h2(α, β) > h1(α, β) holds, so we have

ERIM (α, β) > ER∗

IM (α, β) > ERSM (α, β),

10

i.e.,

RREVIM (α, β) > RREVSM (α, β).

This completes the ﬁrst part of our proof.
Now suppose that the stationary distribution of M arkov(α, β) does not exist. Notice that our
M arkov(α, β) is irreducible, so every state in M arkov(α, β) is not positive recurrent, i.e., the
expected recurrence time of every state is inﬁnite. If the ﬁrst step of M arkov(α, β) is transferring
from (0, 0) to (1, 0), then in expectation, after ﬁnite steps the Markov Reward Process will return to
(0, 0) because α < 1/2 < 1
α. On the other hand, if the ﬁrst step of M arkov(α, β) is transferring
from (0, 0) to (0, 1), then in expectation, the Markov Reward Process will have inﬁnite steps in the
y≥2(x, y) because (0, 0) is not positive recurrent. During the inﬁnite steps the honest
states
T rewards for the insightful pool,
pool and the selﬁsh pool have no reward but there are about α
where T is the steps. As T
1. This completes the second part of our
proof.

, RREVIM (α, β)

→ ∞

→

(cid:83)

(cid:83)

−

∗

x

4 The Mining Game and Equilibria

In this section, we consider the scenario where all n mining pools are strategic and study its Nash
equilibrium. It is worth noting that insightful mining is a well-deﬁned strategy and can be adopted
directly. If there is no selﬁsh pool in the system, insightful mining will look the same as the selﬁsh
mining. Then we consider the scenario where each pool can choose to follow the Bitcoin protocol
truthfully or take the insightful mining strategy. We will formally deﬁne its strategy space in
Section 4.1, analyze the utility functions in Section 4.2, and characterize the Nash equilibrium in
Section 4.3.

4.1 Strategy Space

There are n mining pools and we denote it by [n] :=
. The fraction of their hashing
n
i=1 mi = 1. Each pool i will inﬁltrate undercover
power is denoted by
miners into all other pools to monitor their real-time state, namely, whether a certain pool is mining
(cid:80)
selﬁshly and if any, how many blocks are hidden. As a result, each pool i could adopt the insightful
mining strategy.

and we have

, n
}

1,
{

, mn

m1,

· · ·

· · ·

}

{

In the mining game, each pool has two strategies: reﬁned honest mining and insightful mining,
denoted by RHonest and Insightful respectively. The insightful mining strategy is exactly the
same as we proposed before, while the reﬁned honest mining is a slightly modiﬁed version of the
standard mining strategy. Speciﬁcally, the reﬁned honest mining requires the pool to mine after
the longest public chain, and to publish its newly-generated block immediately. If someone hides
the block, each pool could detect it through the spy therein. Then when facing two branches of
the same length, the pool who adopts the reﬁned honest mining strategy shall clearly follow the
honest branch, instead of uniformly choosing one of them.

4.2 Expected Reward Functions

In this section, we give the formula of the expected reward function ERi(x1,
i under the pure strategy proﬁle (x1,

RHonest, Insightf ul

, xn)

, xn) of each pool

· · ·

n.
}

· · ·

∈ {

11

Proposition 4.1. For an n-player mining game (m1,
proﬁle. Let c be a value depending on (m1,
pools that adopt Insightf ul strategy. Then we have

· · ·

· · ·
, mn) and (x1,

, mn), let (x1,

· · ·
, xn).5 Let Q

, xn) be a (pure) strategy
[n] be the set of

· · ·

⊆

ERi(x1,

, xn) =

· · ·

c
c

·
·

(cid:26)

(f (mi) + mi
(mi + mi

·

j∈Q 2mj(1

·
j∈Q 2mj(1
(cid:80)

−

mj)),

−
mj)),

Q;
Q,

i
i

∈
(cid:54)∈

(3)

where f (y) := y2

(2

(cid:80)

3y)/(1

2y).

·

−

−
, qk
q1,
}
{
. Other pools (i.e., [n]

· · ·

· · ·

Proof. Suppose that Q =
is the set of insightful pools and their hashing power is
Q) adopt the reﬁned honest mining strategy. Figure. 4
, mqk }
mq1,
{
illustrates the state transitions in the game. The top state 0 is the initial state, meaning that there
is a general consensus among all pools about the longest chain. For others, a state is composed
of two parts, a symbol y
and a pool label (qk), meaning that the insightful pool qk
hides y blocks while others reveal all their blocks. In particular, 0(cid:48)(qk) represents that there are
two branches of the same length 1, in which one is held by qk and the other is held by a pool other
than qk.

∪ {

N+

0(cid:48)

∈

}

\

∈

We ﬁrst analyze the expected reward of an insightful pool. For ease of notation, we focus on the
Q (the right part of Fig. 4). The cases for the other insightful pools are analogous and
pool qk
can be handled via an appropriate relabeling. With probability mqk , the insightful pool qk ﬁnds
a block and keeps it secretly. Then all other pools [n]
will detect this behavior and mine
on the other side. Denote πs as the stationary probability of the state s. We obtain the following
equations

\ {

qk

}

mqk π0 = π0(cid:48)(qk) + (1
(1
mqk πi(qk) = (1

mqk )π1(qk) = π0(cid:48)(qk);

−

−

mqk )πi+1(qk),

mqk )π2(qk);




−

=
⇒ (cid:40)

i
∀

≥

1;

π0(cid:48)(qk) = mqk (1
πi(qk) = mqk

−
mqk
1−mqk

mqk )π0;
i−1

(cid:16)

(cid:17)

π0,

i
∀

≥

1.

Further, we calculate qk’s expected revenue from this branch by



π0(cid:48)(qk) ·

mqk ·

2+π2(qk) ·

(1

−

mqk )

·

πi(qk) ·

(1

−

mqk )

1 = π0

·

i=3
(cid:88)
In addition, the expected revenue of others as a whole from this branch is

2m2

qk (1

−

·(cid:34)

mqk ) +

∞

2+

m2
qk (2
1

−

3mqk )

−
2mqk

.

(cid:35)

π0(cid:48)(qk) ·

(1

mqk )

−
2mqk (1

2 = π0

2mqk (1

·

−

·

mqk )2,

= qk could obtain π0

since each pool i
Similarly, qk can also get revenue from other insightful qj (qj
2mqk mqj (1

mqj ). In total, an insightful pool qk’s expected revenue is

= π0

2mimqk (1
Q and qj

·
∈

−

·

·

mqk )2

mi
1−mqk

−

mqk ) in expectation.
= qk) to obtain π0

·

−

π0

· 

m2
qk (2
1

−

3mqk )

−
2mqk

+ 2mqk

qj ∈Q
(cid:88)

mqj (1

mqj )



.

−


Second, we analyze the expected revenue of a pool i

Q that adopts the RHonest strategy,
which contains two parts. On the one hand, the pool i may win some reward when the insightful

(cid:54)∈



5We note that c will not aﬀect the calculation of a pool’s relative revenue in the subsequent section.

12

(cid:54)
(cid:54)
Figure 4: The state transitions in the mining game. Circles represent states, edges represent
transitions, and the expression beside an edge represents the corresponding transition probability.

pools mine the ﬁrst block. Denote the pool i’s hashing power as mi. As mentioned above, its
expected revenue from this case is π0
mqj )]. On the other hand, with probability
qj ∈Q mqj (1
mi, it mines a block, reveals it immediately, and gets the block’s reward. Thus, in expectation its
revenue from this case is π0

mi. In total, the pool i’s expected revenue is

[2mi

(cid:80)

−

·

·

π0

mi + 2mi

· 

mj(1

mj)



.

−

j∈Q
(cid:88)


So c appeared in Proposition 4.1 is deﬁned as π0, which depends on m1,
This ﬁnishes the proof.



, mn and (x1,

, xn).

· · ·

· · ·

4.3 Equilibria Characterization

We denote the strategy proﬁle other than a mining pool i by x−i.

We prove the following characterization theorem of pure Nash equilibria:

Theorem 4.2. For an n-player mining game (m1,
types of pure Nash equilibrium (x1,

, xn), where

· · ·

, mn) with m1

· · ·

≥ · · · ≥

mn, there are three

1. (x1 =

· · ·

xn = RHonest) is a Nash equilibrium if and only if m1

1/3;

≤

2. (x1 = Insightf ul, x2 =
g(m1);

m2

≤

xn = RHonest) is a Nash equilibrium if and only if m1

1/3 and

≥

· · ·

xn = RHonest) is a Nash equilibrium if and only if m1

1/3

≥

· · ·

3. (x1 = x2 = Insightf ul, x3 =
g(m1),

and m2

≥
where g(y) := −y3+2y2+y−1

2y2+4y−3

.

13

01(q1)0′(q1)2(q1)3(q1)...1(qk)0′(qk)2(qk)3(qk)...···1−Pkj=1mqjmq1mqk1−mq11−mq1mq1mq1mq11−mq1mq11−mq11−mq11−mqk1−mqkmqkmqkmqk1−mqkmqk1−mqk1−mqkTheorem 4.2 has the following three corollaries.

Corollary 4.3. Every n-player mining game (m1,

, mn) has a pure Nash equilibrium.

· · ·

Corollary 4.4. For an n-player mining game (m1,
equilibrium if m1

1/3.

≤

, mn), (RHonest,

· · ·

· · ·

, RHonest) is a Nash

Corollary 4.5. For every n-player mining game (m1,
most two insightful pools.

· · ·

, mn), there is an equilibrium with at

Proof of Theorem 4.2 (1). Let x = (H,
adopt RHonest strategy.

· · ·

, H) be the strategy proﬁle such that all mining pools

If all mining pools follow the strategy proﬁle x, for a mining pool i, we have ERi(x) = mi so

that RREVi(x) = mi.

When the mining pool i deviates to choose the Insightf ul strategy, we have ERi(x−i, Insightf ul) =

f (mi) + 2m2
j

i (1

−

= i. So for the relative revenue, we have

mi) and ERj(x−i, Insightf ul) = mj + 2mjmi(1

mi) for any other mining pool

−

RREVi(x−i, Insightf ul) =

1

−

f (mi) + 2m2
mi + f (mi) + 2mi(1

i (1

−

mi)

−

.

mi)

Then x is a Nash equilibrium if and only if every i

[n] satisﬁes RREVi(x−i, Insightf ul)

RREVi(x). This, (given that 0 < mi

≤

1/2), is equivalent to

∈

≤

f (mi) + 2m2
mi + f (mi) + 2mi(1

i (1

−

mi)

1
−
f (mi)
mi

≤

⇐⇒

⇐⇒

mi,

≤
1/3,

[n]

∈
[n]

i
∀

∈

i
∀

mi,

[n]

i
∀

∈

mi) ≤

−

Recall that m1

≥ · · · ≥

mn. This ﬁnishes the proof.

Proof of Theorem 4.2 (2). Let the strategy proﬁle x be (Insightf ul, RHonest,
, RHonest), i.e.,
the mining pool 1 adopts the Insightf ul strategy and all other mining pools adopt the RHonest
strategy.

· · ·

If all mining pools follow the strategy proﬁle x, then (from the previous proof) for the relative

revenue, we have

RREV1(x) =

1

f (m1) + 2m2
m1 + f (m1) + 2m1(1

1(1

−

m1)

.

m1)

−

−

From Theorem 4.2 (1), we know that RREV1(x)

1/3. This means that “the mining pool 1 has no incentive to deviate if and only if m1

Now it suﬃces for us to prove “the mining pool i

= 1 has no incentive to deviate if and only if

≥

RREV1(x−1, RHonest) if and only if m1
1/3”.

≥

≥

mi

g(m1)”.

≤
On the one hand, notice that when all mining pools follow the strategy proﬁle x, we have

RREVi(x) =

1

−

mi + mi
·
m1 + f (m1) + 2m1(1

2m1(1

−

m1)

−

.

m1)

14

(cid:54)
(cid:54)
On the other hand, when the mining pool i deviates to choose the Insightf ul strategy, we have

ERi(x−i, Insightf ul) = f (mi) + 2mi(m1(1

m1) + mi(1

mi))

−

−

and for any other mining pool j

= i, we have

ERj(x−i, Insightf ul) = mj + 2mj(m1(1

m1) + mi(1

mi)).

−

−

For the relative revenue, we have

RREVi(x−i, Insightf ul) =

Then

f (m1) + f (mi) + 1

f (mi) + 2mi(m1(1
mi + 2(1

m1

−

−

−
−

m1) + mi(1
m1

mi)(m1(1

−

mi))

−

RREVi(x−i, Insightf ul)

RREVi(x)

mi

≤

⇐⇒

≤

i.e., mi

g(m1).

≤

−

m3

1 + 2m2
2m2

1 + 4m1

1 + m1
−
3

−

.

mi))

−

m1) + mi(1

−

1

,

Before proving Theorem 4.2 (3), we ﬁrst note that, in the sense of proof, the following Claim 4.6
is a more natural statement. However, we will show that Claim 4.6 and Theorem 4.2 (3) are essen-
tially equivalent. Since the statement of (3) in Theorem 4.2 is more intuitive given the statements
of (1) and (2), we adopt it in our theorem statement.

Claim 4.6. For an n-player mining game (m1,
(x1 = x2 = Insightf ul, x3 =
g(m1).
and m2

· · ·

· · ·

xn = RHonest) is a Nash equilibrium if and only if m1

≥ · · · ≥

mn, the strategy proﬁle
g(m2)

, mn) with m1

≥

≥

Proof of Claim 4.6. Let the strategy proﬁle x be (Insightf ul, Insightf ul, RHonest,
, RHonest),
i.e., the ﬁrst two mining pools adopt the Insightf ul strategy and all other mining pools adopt the
RHonest strategy.

· · ·

To prove the claim, we will show that “m1

g(m1)” is equivalent to “every
g(m2) and m2
[n] has no incentive to change its strategy”. From the proof of Theorem 4.2

≥

≥

∈

mining pool i
(2), we know that m1
g(m1) is equivalent to RREV2(x)
g(m2) and m2
RREVi(x−i, Insightf ul)”.
For a mining pool i

3,

≥

≥

∈ {

· · ·

, we have

, n
}

g(m2) is equivalent to RREV1(x)

RREV1(x−1, RHonest) and m2
RREV2(x−2, RHonest), so it remains for us to show “m1
, RREVi(x)
}

1, 2

\ {

[n]

≥

∈

≥
≥
≥

≥

g(m1)” is equivalent to “for each mining pool i

RREVi(x) =

and

f (m1) + f (m2) + 1

m1

−

−

mi + 2mi(m1(1

m1) + m2(1

m2))

−
m2 + 2(1

m1

−

−

−
m2)(m1(1

m1) + m2(1

m2))

−

−

RREVi(x−i, Insightf ul) =

1 +

j∈{1,2,i}(f (mj)

−

f (mi) + 2mi(
mj) + 2(1

j∈{1,2,i} mj(1

mj))

−
j∈{1,2,i} mj)(

(cid:80)
−

j∈{1,2,i} mj(1

.

mj))

−

(cid:80)
Then we know that RREVi(x)

RREVi(x−i, Insightf ul) if and only if

(cid:80)

(cid:80)

m1

1

−

−

mi

≤

2m2
3

1 + m3
4m1

−

1 −
−

2m2

1 −

2m3

1m2

−
−
4m2 + 4m1m2 + 4m2

2m2
1m2

2 + 4m1m2
2m2

2 + m3
2 −
2 + 4m1m2
2

2m1m3
2

,

−

≤
m2 + 4m2

1m2

15

(cid:54)
where the right expression is deﬁned as h(m1, m2).

In addition, we have

m1 + m2 + h(m1, m2)

1

≥

for all m1
mi. So we have RREVi(x)

g(m2), m2

≥

≥

g(m1) and 0

m1
RREVi(x−i, Insightf ul), and thus x is a Nash equilibrium.

1/2. This means h(m1, m2)

m1

m2

≤

≥

−

≥

≤

1

≤

m2

−

≥

Proof of Theorem 4.2 (3). Given the Claim 4.6, it suﬃces for us to show the equivalence between
1/3 and m2
“m1

g(m1)” and “m1

g(m1)”, given 0

g(m2) and m2

1/2.

≥

≥

First notice that, given m1

m2, when m1, m2

[0, 1/2] and m2

m2
≤
g(m1), we have m1

m1

≤

≤

≥

g(m1).

≥

≥

∈

≥

This will derive m1

1/3.

≥
So we only need to prove, given m1

g(m1), we have m1
Case 1: m1
Case 2: m1

≥

0.35. Since g(m2)
0.35. Then we have m1

≤

≥
≤

≥

≥

g(m2). We will use two simple cases to prove it.

m2 and m1, m2

[0, 1/2], when m1

∈

1/3 and m2

≥

≥

Notice that g(m2) is decreasing on [0.33, 1/2]. So to show m1

0.35 for 0

m2

≤
[1/3, 0.35], so we have m2

≤

1/2, so our desired result holds.
g(0.35)
≥
g(m2), it suﬃces for us to have

g(m1)

0.33.

≥

≥

∈

≥

m1

g(g(m1)), which is true when m1 is on [1/3, 1/2].

≥
This ﬁnishes the proof.

5 Simulation

5.1 Insightful Mining vs. Selﬁsh Mining

The simulations in this subsection evaluate the eﬀectiveness of the insightful mining strategy. Three
agents are considered, i.e., the honest pool, the selﬁsh pool, and the insightful pool. Their interac-
tions are simulated as a discrete-time random walk process. In each step, one of the pools generates
a block with the probability proportional to its hashing power, and others respond according to
their strategies. The simulation ends after 2,000,000,000 steps. Then we calculate their relative
revenue during the process, which is deﬁned as the number of blocks generated by a pool over the
number of blocks on the main chain.

Recall that α and β are the fractions of hashing power of the selﬁsh pool and the insightful pool,
respectively. First, we focus on the scenario where the insightful pool and the selﬁsh pool have the
same hashing power, i.e., α = β. Fig. 5(a) visualizes the relative revenue of the insightful pool and
the selﬁsh pool when their hashing power belongs to (0.25, 0.5). As can be seen, the insightful pool
can always gain more revenue than the selﬁsh pool. It is exactly consistent with our theoretical
result of Theorem 3.1. Surprisingly, if their hashing power is larger than 1/3 (i.e., α = β > 1/3),
the insightful pool can gain most of the revenue. For clear comparison, we also show their relative
revenue under the circumstance that the insightful pool mines honestly in Fig. 5(b). As mentioned
in the Introduction, the insightful pool therefore will suﬀer heavy losses, which grow rapidly with
the pool size increasing. Comparing Fig. 5(a) and 5(b) shows that the insightful mining strategy
dramatically help the pool turn things around when facing selﬁsh mining.

Then we explore the scenario where α > β, to consider whether less hashing power can also
enable the insightful pool to earn more. Here, two deﬁnitions of the ‘more revenue’ are studied.
One is the aforementioned relative revenue, which corresponds to the dashed line in Fig. 6.
It
demonstrates the threshold above which RREVIM (α, β) > RREVSM (α, β). The other is the unit
relative revenue. The solid line in Fig. 6 represents the corresponding threshold, above which we

16

Figure 5: Relative revenue of the selﬁsh pool and the insightful pool with the same mining power.
The selﬁsh pool adopts the selﬁsh mining strategy. (a) The insightful pool adopts the insightful
mining strategy. (b) The insightful pool mines honestly.

Figure 6: Threshold of the insightful pool’s size, above which it could obtain more relative revenue
or unit relative revenue than the selﬁsh pool.

17

Figure 7: Relative revenue of the selﬁsh pool and the insightful pool under the optimal insightful
mining strategy. Both pools have the same mining power.

have RREVIM (α,β)
and they are all below the line of β = α.
mining strategy, less computing power can also yield more revenue.

. This curve is below the latter. Both curves have similar trends
It provides compelling evidence that with insightful

> RREVSM (α,β)
α

β

5.2 Optimal Insightful Mining

In this subsection, we explore a more powerful insightful mining strategy by modeling the insightful
pool’s as a decision problem and solve it by the Markov Decision Process (MDP). First, we gives
the description of the problem.
Action Space. The insightful pool can take one of the following actions. (1) adopt to honest:
the insightful pool abandons its private fork to mine on the public chain. This action is always
allowed. (2) adopt to selﬁsh: the insightful pool abandons its private fork to mine on the selﬁsh
branch. This action is feasible only when the selﬁsh pool publishes its selﬁsh branch triggered by
the insightful pool publishing its private blocks. (3) override honest: the insightful pool publishes
just enough blocks on its private branch to overtake the public chain. This action is feasible only
if the insightful branch is strictly longer than the public main chain. (4) override selﬁsh: the
insightful pool publishes just enough blocks on its private branch to overtake the selﬁsh branch.
This action is feasible only if the insightful branch is strictly longer than the selﬁsh branch. (5)
wait: the insightful pool continues to mine its private branch without publishing any block. This
action is always feasible. (6) match: the insightful pool publishes just enough blocks to equal
the length of the longest public chain as the block on the longest public chain is being published,
causing a fork.
State Space. The state of system is deﬁned by a tuple of the form (lh, ls, li, f ork). The ﬁrst three
elements lh, ls, li denote the length of of the honest branch, selﬁsh branch, and insightful branch
1 indicates that the honest pool and the selﬁsh pool mine on the
respectively. In particular, ls =
same branch. The last element fork contains three possible values, including relevant, irrelevant,
and active. It describes the event that just happened in the system: fork = relevant when an honest
pool just mined a block; fork = active when the insightful pool just matched the honest branch;
fork = irrelevant otherwise.
Transaction and Reward. The transition matrix and reward matrix have been summarized in

−

18

Figure 8: The relative revenue of pools under diﬀerent distribution of the mining power.

Table 2 in the Appendix B.

Similar to previous work [4], we truncate this MDP into ﬁnite state by setting the maximal
length of a branch as 50. As the objective function of this MDP is not linear, we apply the
techniques presented in [4] to solve this Average Reward Ratio Markov Decision Process (ARR-
MDP).

Fig. 7 shows the relative revenue of two pools under the optimal insightful strategy. It closely
resembles Fig. 5(a). Comparing two ﬁgures, we can ﬁnd that when the mining power is less than
1/3, the optimal insightful mining strategy helps the insightful pool to gain more revenue than
before. The detailed policy tells us that once the insightful branch is overridden during the mining
competition, sticking to it for a while is a better choice than giving up immediately.

5.3 Equilibria Visualization

In this subsection, we visualize the equilibrium results of Theorem 4.2. For the n pools with
mn, the ﬁrst player’s equilibrium strategy only depends on its
ordered mining power m1

≥ · · · ≥

19

own mining power (i.e., m1). For the players i
, in any case, they will always be
, n
}
honest in equilibrium (referred to as honest pools in the following). The strategy of the second
pool, however, is jointly decided by both m1 and m2. For clear understanding, we visualize their
equilibrium strategy and utility in Fig. 8.

∈ {

· · ·

3,

≤

∼

For Fig. 8(a)

(c), the X-axis is the mining power of the largest pool (i.e., m1), which ranges
in (0, 0.5). The Y-axis is the mining power of the second (largest) pool (i.e., m2). Based on the
assumption of m2
m1, the possible values of m2 are between 0 and m1. The Z-axis of these three
ﬁgures correspond to the relative revenue of the largest pool (i.e., RREV1), the other pools, and
the second pool (i.e., RREV2) respectively. As can be seen, RREV1 (RREV2) increases with the
increasing m2, while the relative revenue of all honest pools decreases dramatically. An interesting
observation is that, all these three ﬁgures surfaces have the same structure: when m1
1/3, they
are actually three planes. This is because in the circumstances, all pools will mine honestly in
equilibrium, thus each play’s revenue is proportional to its mining power.

≤

When m1 > 1/3, as mentioned above, the second pool will take diﬀerent strategies, depending
on its m2. For clear understanding, we further illustrate its relative revenue in the form of a 2D
diagram in Fig. 8(d). There are three lines, corresponding to three values of the largest pool’s
mining power (i.e., m1=0.35, 0.4, and 0.45 respectively). For each line, the X-axis m2 varies
between 0 and m1. As we can see, RREV2 grows linearly ﬁrst, then increases abruptly. The red
mark on the line demonstrates the inﬂection point, after which the the second pool chooses to adopt
the insightful mining strategy. By comparison, it can be found that as m1 increases, the second
pool will take insightful mining at a lower power level.

6 Discussion

In blockchain, the action of planting a spy in the pool has been deeply discussed in the context of
Block Withholding Attack [25, 26]. In such an attack, the attacker inﬁltrates miners into opponent
pools to reduce their revenue. The undercover miner sends only partial solutions (i.e., proofs of
work) to the pool manager to share rewards. If it luckily ﬁnds a full solution which means a valid
block, the undercover miner will discard the full proof of work directly, causing a loss to the victim
pool. Our work explores, for the ﬁrst time, the idea of spy in the selﬁsh mining attack. It will shed
new light upon the researchers in the ﬁeld.

Inﬁltrating spies dramatically expands the action spaces that a pool can take to counteract the
selﬁsh mining attack. Besides the insightful mining, other strategies are worth exploring. Here, we
roughly describe a potential idea. Recalling that the spy actually can extract the hash value of the
latest hidden block from the new task issued by the pool manager. With this information, other
pools can mine directly behind the latest block, although its full contents are not yet known.6 By
this strategy, all pools could follow the longest chain, which makes the selﬁsh mining ineﬀective.
In other words, keeping the block secretly for the selﬁsh pool is equivalent to revealing it honestly,
which extremely beneﬁts the blockchain system. Nevertheless, such a strategy might not be the
best choice for the strategic mining pools. Further research should be undertaken to investigate
the optimal mining strategy. It is also worthwhile to extend the action of planting spies to other
blockchain scenarios.

6Such an idea was also discussed in [27]. In that context, the strategic miner mines on a newly generated block
directly even before it is validated. To avoid potential conﬂict, the miner can choose to embed no transaction in the
block being mined, and just try to win the potential block rewards.

20

References

[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” Decentralized Business Review,

p. 21260, 2008. 1, 2.1

[2] O. Schrijvers, J. Bonneau, D. Boneh, and T. Roughgarden, “Incentive compatibility of bitcoin
mining pool reward functions,” in International Conference on Financial Cryptography and
Data Security, pp. 477–498, Springer, 2016. 1

[3] I. Eyal and E. G. Sirer, “Majority is not enough: Bitcoin mining is vulnerable,” in International
conference on ﬁnancial cryptography and data security, pp. 436–454, Springer, 2014. 1, 1.2,
2.3, 3.1

[4] A. Sapirshtein, Y. Sompolinsky, and A. Zohar, “Optimal selﬁsh mining strategies in bitcoin,” in
International Conference on Financial Cryptography and Data Security, pp. 515–532, Springer,
2016. 1, 1.2, 3.1, 5.2

[5] K. Nayak, S. Kumar, A. Miller, and E. Shi, “Stubborn mining: Generalizing selﬁsh mining
and combining with an eclipse attack,” in 2016 IEEE European Symposium on Security and
Privacy (EuroS&P), pp. 305–320, IEEE, 2016. 1, 1.2

[6] C. Feng and J. Niu, “Selﬁsh mining in ethereum,” in 2019 IEEE 39th International Conference

on Distributed Computing Systems (ICDCS), pp. 1306–1316, IEEE, 2019. 1

[7] C. Grunspan and R. P´erez-Marco, “Selﬁsh mining in ethereum,” in Mathematical Research for

Blockchain Economy, pp. 65–90, Springer, 2020. 1

[8] F. Ritz and A. Zugenmaier, “The impact of uncle rewards on selﬁsh mining in ethereum,” in
2018 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW), pp. 50–
57, IEEE, 2018. 1

[9] Q. Li, Y. Chang, X. Wu, and G. Zhang, “A new theoretical framework of pyramid markov
processes for blockchain selﬁsh mining,” Journal of Systems Science and Systems Engineering,
vol. 30, no. 6, pp. 667–711, 2021. 1

[10] K. A. Negy, P. R. Rizun, and E. G. Sirer, “Selﬁsh mining re-examined,” in International
Conference on Financial Cryptography and Data Security, pp. 61–78, Springer, 2020. 1

[11] R. B. Zur, I. Eyal, and A. Tamar, “Eﬃcient mdp analysis for selﬁsh-mining in blockchains,” in
Proceedings of the 2nd ACM Conference on Advances in Financial Technologies, pp. 113–131,
2020. 1.2

[12] H. Liu, N. Ruan, R. Du, and W. Jia, “On the strategy and behavior of bitcoin mining with n-
attackers,” in Proceedings of the 2018 on Asia Conference on Computer and Communications
Security, pp. 357–368, 2018. 1.2

[13] C. Hou, M. Zhou, Y. Ji, P. Daian, F. Tram`er, G. Fanti, and A. Juels, “Squirrl: Automating
attack analysis on blockchain incentive mechanisms with deep reinforcement learning,” in 28th
Annual Network and Distributed System Security Symposium, NDSS 2021, virtually, February
21-25, 2021, The Internet Society, 2021. 1.2, 3.3

21

[14] F. J. M. Coss´ıo, E. Brigham, B. Sela, and J. Katz, “Competing (semi-)selﬁsh miners in bitcoin,”
in Proceedings of the 1st ACM Conference on Advances in Financial Technologies, AFT 2019,
Zurich, Switzerland, October 21-23, 2019, pp. 89–109, ACM, 2019. 1.2

[15] V. Buterin et al., “A next-generation smart contract and decentralized application platform,”

white paper, vol. 3, no. 37, 2014. 2.1

[16] X. Chen, C. Papadimitriou, and T. Roughgarden, “An axiomatic approach to block rewards,”
in Proceedings of the 1st ACM Conference on Advances in Financial Technologies, pp. 124–131,
2019. 2.1

[17] A. Kiayias, E. Koutsoupias, M. Kyropoulou, and Y. Tselekounis, “Blockchain mining games,”
in Proceedings of the 2016 ACM Conference on Economics and Computation, EC ’16, Maas-
tricht, The Netherlands, July 24-28, 2016 (V. Conitzer, D. Bergemann, and Y. Chen, eds.),
pp. 365–382, ACM, 2016. 2.1

[18] S. Noda, K. Okumura, and Y. Hashimoto, “An economic analysis of diﬃculty adjustment
algorithms in proof-of-work blockchain systems,” in Proceedings of the 21st ACM Conference
on Economics and Computation, pp. 611–611, 2020. 2.1

[19] G. Goren and A. Spiegelman, “Mind the mining,” in Proceedings of the 2019 ACM Conference

on Economics and Computation, pp. 475–487, 2019. 2.1

[20] A. Fiat, A. Karlin, E. Koutsoupias, and C. Papadimitriou, “Energy equilibria in proof-of-
work mining,” in Proceedings of the 2019 ACM Conference on Economics and Computation,
pp. 489–502, 2019. 2.1

[21] Y. Zolotavkin, J. Garc´ıa, and C. Rudolph, “Incentive compatibility of pay per last n shares in
bitcoin mining pools,” in International Conference on Decision and Game Theory for Security,
pp. 21–39, Springer, 2017. 2.2

[22] Antpool, “Antpool: Decentralized bitcoin mining pool,” 2014. 2.2

[23] Poolin, “Poolin: a great bitcoin and multi-cryptocurrency mining pool.,” 2017. 2.2

[24] A. E. Gencer, S. Basu, I. Eyal, R. Van Renesse, and E. G. Sirer, “Decentralization in bitcoin
and ethereum networks,” in International Conference on Financial Cryptography and Data
Security, pp. 439–457, Springer, 2018. 2.2

[25] M. Rosenfeld, “Analysis of bitcoin pooled mining reward systems,” arXiv preprint

arXiv:1112.4980, 2011. 6

[26] I. Eyal, “The miner’s dilemma,” in 2015 IEEE Symposium on Security and Privacy, pp. 89–

103, IEEE, 2015. 6

[27] Y. Sompolinsky and A. Zohar, “Bitcoin’s underlying incentives,” Communications of the ACM,

vol. 61, no. 3, pp. 46–53, 2018. 6

22

A Detailed Analysis of State Transitions

This section explains Table 1 in detail.

(1) P r[(0, 0), (0, 0)] = 1

α

β, r[(0, 0), (0, 0)] = (1, 0, 0)

−

−

This transition occurs when the honest pool ﬁnds the ﬁrst block in this round of competition.
The selﬁsh pool and insightful pool will accept this block and mine after it. Thus, the honest
pool obtains the revenue of one block.

(2) P r[(0, 0), (1, 0)] = α, r[(0, 0), (1, 0)] = (0, 0, 0)

This transition occurs when the selﬁsh pool ﬁnds the ﬁrst block and hides it immediately. In
the state of (1, 0), the selﬁsh pool faces the risk of being overtaken by others. The revenue of
this block is uncertain, and will be determined in the later transition.

(3) P r[(1, 0), (0(cid:48), 0)] = 1

β, r[(1, 0), (0(cid:48), 0)] = (0, 0, 0)

α

−

−

This transition occurs when the honest pool ﬁnds a block and publishes it directly. Then
the selﬁsh pool is forced to reveal its private block. It brings the system to state (0(cid:48), 0), as
Fig. 9(a) shows. In the state (0(cid:48), 0), the honest branch and the selﬁsh branch are of the same
length (i.e., lh = ls = 1). Faced with this situation, the honest pool uniformly follows one
of them to mine the next block. The selﬁsh pool persistently works on its branch, while the
insightful pool goes ahead with the honest branch. Thus in state (0(cid:48), 0), the total mining
power on the honest branch and selﬁsh branch is 1−α−β
2 + α respectively. Both
branches are possible to win. It will be determined by the next block. So the revenue of the
block in this transition is uncertain and will be determined later.

2 + β and 1−α−β

(4) P r[(0(cid:48), 0), (0, 0)] = 1, r[(0(cid:48), 0), (0, 0)] = ( 3−3α−β

, 1+3α−β
2

, β)

2

This transition occurs when a block is generated, which breaks the tie in the state (0(cid:48), 0) and
also decides the winner. For this newly generated block, there are four possibilities.

(i) With the probability 1−α−β

It
invalidates the selﬁsh branch and enables that the honest pool gets two blocks’ revenue.

, the honest pool ﬁnds a block on the honest branch.

2

(ii) With the probability of β, the insightful pool ﬁnds a block on the honest branch. Then

honest pool and the insightful pool obtain one block’s revenue respectively.

(iii) With probability 1−α−β

2

, the honest pool ﬁnds a block on the selﬁsh branch. Then honest

pool and the selﬁsh pool obtains one block’s revenue respectively.

(iv) With the probability of α, the selﬁsh pool ﬁnds a block on the its own branch and gets

two blocks’ revenue.

To sum up, we could obtain that
(a) the revenue of the honest pool is 1−α−β
(b) the revenue of the selﬁsh pool is 1−α−β
2
(c) the revenue of the insightful pool is β

2

2 + β
·
1 + α
·
1 = β.

·

1 + 1−α−β
2 = 1+3α−β

2

2

1 = 3−3α−β

2

;

·
;

·
·

(5) P r[(1, 0), (1, 0(cid:48))] = β, r[(1, 0), (1, 0(cid:48))] = (0, 0, 0)

This transition occurs when the insightful pool ﬁnds a block and publishes it immediately.
This event also promotes the selﬁsh pool to reveal its hidden block. As a result, the system
transfers to the state (1, 0(cid:48)), which we show in Fig. 9(b). Similar to what we discussed in
the item (3), two branches in the state (1, 0(cid:48)) have the same length. The honest pool will

23

Figure 9: Illustration of the states.

uniformly choose one branch to work while the selﬁsh pool and the insightful pool will mine
after their own branches. Because which branch will win is still uncertain, we calculate the
revenue of the block in this transition later.

(6) P r[(1, 0(cid:48)), (0, 0)] = 1, r[(1, 0(cid:48)), (0, 0)] = (1

α

β, 1+3α−β
2

, 1−α+3β
2

)

−
This transition occurs when a block is generated, which breaks the tie in the state (1, 0(cid:48)) and
also decides the winner. Similar to the item (4), there are also four possibilities for the newly
generated block.

−

(i) With probability 1−α−β

2

, the honest pool ﬁnds a block on the selﬁsh branch. Then honest

pool and the selﬁsh pool obtains one block’s revenue respectively.

(ii) With the probability of α, the selﬁsh pool ﬁnds a block on the its own branch and gets

two blocks’ revenue.
(iii) With the probability 1−α−β

2

, the honest pool ﬁnds a block on the insightful branch. Then

honest pool and the insightful pool obtain one block’s revenue respectively.

(iv) With the probability of β, the insightful pool ﬁnds a block on its insightful branch and

thus gets two blocks’ revenue.

Then we could obtain that
(a) the revenue of the honest pool is 1−α−β
(b) the revenue of the selﬁsh pool is 1−α−β
(c) the revenue of the insightful pool is 1−α−β

·
·

2

2

1 + 1−α−β
1 + α

1 = 1
2
·
2 = 1+3α−β

−
;

·
1 + β

2
2 = 1−α+3β

.

2

2

β;

α

−

·
(7) P r[(x, 0), (x + 1, 0)] = α, r[(x, 0), (x + 1, 0)] = (0, 0, 0),

·

x

∀

≥

1

This transition occurs when the selﬁsh pool ﬁnds a block and keeps it in secret. This action
brings no revenue instantly. The reward of this block will be given to the selﬁsh pool when
it is released.

(8) P r[(2, 0), (0, 0)] = 1

α, r[(2, 0), (0, 0)] = (0, 2, 0)

−

This transition occurs when the insightful pool or the honest pool ﬁnds a block, which prompts
the selﬁsh pool to reveal its private branch of two blocks. It enables the selﬁsh pool to obtain
two blocks’ revenue.

(9) P r[(x + 1, 0), (x, 0)] = 1

α, r[(x + 1, 0), (x, 0)] = (0, 1, 0),

−

x

∀

≥

2

This transition occurs when the insightful pool or the honest pool ﬁnds a block, and the

24

Figure 10: Detailed state transitions.

selﬁsh pool also reveals one private block at the same height. Because the selﬁsh pool still
has more blocks in secret, its selﬁsh branch will become the main chain eventually. In this
transition, the selﬁsh pool obtain one block’s revenue.

(10) P r[(0, 0), (0, 1)] = β, r[(0, 0), (0, 1)] = (0, 0, 0)

This transition occurs when the insightful pool ﬁnds the ﬁrst block and hides it immediately.
In the state of (0, 1), the insightful pool faces the risk of being overtaken by others. The
revenue of this block is uncertain, and will be determined in the later transition.

(11) P r[(0, 1), (1, 0(cid:48))] = α, r[(0, 1), (1, 0(cid:48))] = (0, 0, 0)

This transition occurs when the selﬁsh pool ﬁnds a block and also hides it. After observing
this situation, the insightful pool reveals its hidden block and the selﬁsh pool does the same
subsequently. This brings the system to state (1, 0(cid:48)), which we show in Fig. 9(b). As discussed
in the item (5), we will calculate the revenue of this block in the subsequent transition.

(12) P r[(0, 1), (0, 0(cid:48))] = 1

β, r[(0, 1), (0, 0(cid:48))] = (0, 0, 0)

α

−

−

This transition occurs when the honest pool ﬁnds a block, promoting the insightful pool to
reveal its hidden block. Then the system comes to a new state of (0, 0(cid:48)). As Fig. 9(c) shows,
there are two branches, namely, the honest branch and the insightful branch. The selﬁsh
pool and the honest pool uniformly choose one of branches to follow, while the insightful pool
sticks to its own branch. The revenue of the block will be determined later.

(13) P r[(0, 0(cid:48)), (0, 0)] = 1, r[(0, 0(cid:48)), (0, 0)] = ( 3−2α−3β

, α, 1+3β

)

2

2

This transition occurs when a block is generated, which breaks the tie in the state (0, 0(cid:48)) and
also decides the winner. There are ﬁve possibilities for the newly generated block.

(i) With the probability 1−α−β

2
enables the honest pool to get two blocks’ revenue.

, the honest pool ﬁnds a block on the honest branch.

It

(ii) With the probability of α

2 , the selﬁsh pool ﬁnds a block on the honest branch. Then the

honest pool and the selﬁsh pool obtain one block’s revenue respectively.

(iii) With the probability 1−α−β

2

, the honest pool ﬁnds a block on the insightful branch. Then

the insightful pool and the honest pool obtain one block’s revenue respectively.

(iv) With the probability of α

2 , the selﬁsh pool ﬁnds a block on the insightful branch. Then

the insightful pool and the selﬁsh pool obtain one block’s revenue respectively.

25

(v) With the probability of β, the insightful pool ﬁnds a block on the its own branch and

gets two blocks’ revenue.

Then we could obtain that
(a) the revenue of the honest pool is 1−α−β
2
·
(b) the revenue of the selﬁsh pool is α
1 + α
2 ·
2 ·
(c) the revenue of the insightful pool is 1−α−β
·

2 + α
2 ·
1 = α;
1 + α
2 ·

2

1 + 1−α−β

2

1 = 3−2α−3β

;

2

·
2 = 1+3β

2

.

1 + β

·

(14) P r[(0, 1), (0, 2)] = β, r[(0, 1), (0, 2)] = (0, 0, 0)

This transition occurs when the insightful pool ﬁnds a block and keeps it in secret. This
action brings no revenue instantly. The reward of this block will be given to the insightful
pool later.

(15) P r[(0, 2), (0, 0)] = 1

β, r[(0, 2), (0, 0)] = (0, 0, 2)

−

This transition occurs when the selﬁsh pool or the honest pool ﬁnd a block. It prompts the
insightful pool to reveal its private branch and therefore receive two blocks’ revenue.

(16) P r[(x, y), (x, y + 1)] = β, r[(x, y), (x, y + 1)] = (0, 0, 0),

x

∀

0(cid:48)

∈ {

}

N, y

2

≥

This transition occurs when the insightful pool ﬁnds a block and keeps it in secret. The
reward of this block will be given to the insightful pool later.

(cid:83)

(17) P r[(0, y), (0, y

1)] = 1

α

β, r[(0, y), (0, y

1)] = (0, 0, 1),

−

−

−

−
This transition occurs when the honest pool ﬁnds a block. It reduces the insightful pool’s leads
by one. The insightful pool will not reveal its private block of the same height immediately,
to avoid being detected by others. This insightful branch, however, will win as the main
chain eventually. In order to facilitate the analysis, we decompose the whole chain rewards
and calculate each block reward in the transition when the insightful pool’s leads (i.e., y)
decrease. Thus, in this transition, the insightful pool obtains one block’s reward.

≥

y
∀

3

(18) P r[(x, y), (x + 1, y

1)] = α, r[(x, y), (x + 1, y

1)] = (0, 0, 1),

−

−

x

∀

≥

0, y

3

≥

This transition occurs when the selﬁsh pool ﬁnds a block. Then the insightful pool’s leads
decrease by one, but it will receive one block’s revenue for this.

(19) P r[(1, y), (0(cid:48), y)] = 1

β, r[(1, y), (0(cid:48), y)] = (0, 0, 0),

This transition occurs when the honest pool ﬁnds a block, forcing the selﬁsh pool to reveal
its only remaining block. This action has no eﬀect on the insightful pool’s leads which are no
less than two, thus bringing no revenue.

(20) P r[(2, y), (0, y)] = 1

α

β, r[(2, y), (0, y)] = (0, 0, 0),

This transition occurs when the honest pool ﬁnds a block. It forces the selﬁsh pool to reveal
its private branch of two blocks. However, it does not inﬂuence the insightful pool’s leads.
Thus, there is no revenue in this transition.

(21) P r[(x, y), (x

1, y)] = 1

α

β, r[(x, y), (x

1, y)] = (0, 0, 0),

x

3, y

2

−
This transition occurs when the honest pool ﬁnds a block, and the selﬁsh pool reveals one
private block at the same height. These is also no revenue.

−

−

−

≥

≥

∀

(22) P r[(x, 2), (0, 0)] = α, r[(x, 2), (0, 0)] = (0, 0, 2),

x

∀

≥

1

This transition occurs when the selﬁsh pool ﬁnds a block. Then the insightful pool’s leads
reduce to one. It makes the insightful pool to reveal all its private blocks, which override
other branches. The insightful pool obtains the last two blocks’ revenue in this transition.

26

y
∀

≥

2

y
∀

≥

2

α

−

−

−

−

(23) P r[(0(cid:48), 2), (0, 0)] = 1

β, r[(0(cid:48), 2), (0, 0)] = (0, 0, 2)

−

This transition occurs when the selﬁsh pool or the honest pool ﬁnds a block. In the state of
(0(cid:48), 2), the selﬁsh pool reveals all its blocks, and the honest pool has a public branch of the
same length, and the insightful pool still has two blocks’ leads. As the the selﬁsh pool or the
honest pool ﬁnds a new block, the tie is broken and the insightful pool’s leads reduce to one.
It prompts the insightful pool to reveal all its private blocks, which override other branches.
The insightful pool obtains the last two blocks’ revenue in this transition.

(24) P r[(0(cid:48), y), (0, y

1)] = 1

β, r[(0(cid:48), y), (0, y

1)] = (0, 0, 1),

−

−

−

y
∀

≥

3

This transition occurs when the selﬁsh pool or the honest pool ﬁnds a block. This newly
generated block break the tie of them in the state of (0(cid:48), y), decreases the insightful pool’ lead
by one. The insightful pool receives one block’s revenue for this.

B Summary of MDP

What we really care is the relative revenue of the insightful pool. So we use (rewardh+rewards, rewardi)
to represent the expected reward. Deﬁne l∗

1 otherwise l∗

s := lh if ls =

s := ls.

−

Table 2: A description of the transition and reward matrices in the decision problem.

State

×
(lh, ls, li,
adopt

Action State
(0, l∗
(0, 0, 0, irrelevant)
(0, ls

s −

),

·

li, 0, irrelevant)

lh, 0, irrelevant)

Probability
1
1
1

Reward
(lh, 0)
(ls, 0)
(li, 0)

1

(0, ls + 1)

Condition
li < lh
li
li

≥
≥
li > ls

≥

lh, ls = li + 1
li + 2
lh, ls

2

≥

(lh, ls, li,
·
overrides

),

(lh, ls, li, f ork),
wait

(lh, ls, li, f ork),
match†

−
(0, 0, li

ls

1, irrelevant)

−

−

1, li, relevant)

−
(lh + 1, lh + 1, li, relevant)
(lh, ls + 1, li, relevant)
(lh, ls, li + 1, active)
(lh, ls, li + 1, irrelevant)
(lh + 1, lh + 1, li, relevant)
(ls, ls, li, relevant)
(lh + 1,
(lh + 1, ls, li, relevant)
(lh + 1, lh + 1, li, relevant)
(lh, ls + 1, li, relevant)
(lh, ls, li + 1, active)
(lh, ls, li + 1, irrelevant)
(1, 1, li
(lh + 1, lh + 1, li, relevant)
(ls, ls, li, relevant)
(lh + 1,
(lh + 1, ls, li, relevant)

1, li, relevant)

lh, relevant)

−

−

(0,0)
(0,0)
(0,0)
(0,0)
(0,0)
(0,0)
(0,0)
(0,0)
(0,0)
(0,0)
(0,0)
(0,0)
(0, lh)
(0,0)
(0,0)
(0,0)
(0,0)

1
ls =
−
ls
1
=
−
fork = active
fork
= active
l∗
lh
s ≤
ls = lh + 2
ls = lh + 1
ls > lh + 2
1
ls =
−
ls
1
=
−
fork = active
= active
fork
l∗
lh
s ≤
l∗
lh
s ≤
ls = lh + 2
ls = lh + 1
ls > lh + 2

α
α
α
α

β
β
β
β

−
−
−
−

−
−
−
−

α
−
α
−
α
−
α
−
α
−

β)/2
−
β)/2
−
β
−
β
−
β
−

† The action match is feasible only when f ork (cid:54)= irrelevant and li ≥ lh.

α
α
β
β
1
1
1
1
α
α
β
β
(1
(1
1
1
1

27

(cid:54)
(cid:54)
(cid:54)
(cid:54)
