Staking Pools on Blockchains∗

Hans Gersbach

Akaki Mamageishvili

Manvir Schneider

CER-ETH and CEPR

CER-ETH

CER-ETH

Z¨urichbergstrasse 18

Z¨urichbergstrasse 18

Z¨urichbergstrasse 18

8092 Zurich, Switzerland

8092 Zurich, Switzerland

8092 Zurich, Switzerland

hgersbach@ethz.ch

amamageishvili@ethz.ch

manvirschneider@ethz.ch

September 2022

Abstract

On several proof-of-stake blockchains, agents engaged in validating transactions

can open a pool to which others can delegate their stake in order to earn higher

returns. We develop a model of staking pool formation in the presence of malicious

agents and establish existence and uniqueness of equilibria. We then identify po-

tential and risk of staking pools. First, allowing for staking pools lowers blockchain

security. Yet, honest stake holders obtain higher returns. Second, by choosing

welfare optimal distribution rewards, staking pools prevent that malicious agents

receive large rewards. Third, when pool owners can freely distribute the returns

from validation to delegators, staking pools disrupt blockchain operations, since

malicious agents attract most delegators by oﬀering generous returns.

Keywords: Delegation, Staking Pool, Blockchain, Governance
JEL Classiﬁcation: C72, D02, D60, G23

2
2
0
2

t
c
O
3

]
T
G
.
s
c
[

4
v
8
3
8
5
0
.
3
0
2
2
:
v
i
X
r
a

∗We would like to thank Jihao Zhang, Phil´emon Bordereau, Christian Matt, Christopher Portmann,
Daniel Tschudi, Christian Ewerhart, Stefanos Leonardos, Jiasun Li, Luyao Zhang, participants of the
Conference on Mechanism and Institution Design 2022 and the 33rd Stony Brook International Confer-
ence on Game Theory for valuable feedback.

 
 
 
 
 
 
1

Introduction

From both the ﬁnancial side and the security side, there are reasons why a proof-of-stake
(PoS) blockchain may want to allow the formation of staking pools. With staking pools,
agents interested in validating transactions are allowed to open a pool, such that others

can delegate their stake for some time to it. For delegating agents who are not interested
in validating transactions, this can provide an additional income on their token holdings.

In turn, their stakes are blocked and cannot be used for other purposes during the time
of commitment. By agents we mean all participants of the decentralized system who own
some stake, which usually takes the form of a native token. Agents interested in running
a staking pool could earn a higher income from their transaction validation activities.1

Ideally, such a staking system makes it more attractive to hold tokens, provides in-

centives for a suﬃcient number of agents to run staking pools and act as transaction
validators, and increases the share of honest agents, weighted by the stakes they hold, in-
volved in transaction validation. As every staking pool acts as a validator, we occasionally

use the word “validator” for a staking pool.

However, malicious agents also run staking pools and may thus enlarge the share of
the stake they control in transaction validation.2 This may undermine the security of the
blockchain and lead to a collapse of the protocol, as the malicious agents take over.

We explore how such a system can be modeled and designed, so that it operates

beneﬁcially for the decentralized consensus mechanism—i.e. by lowering the share of
malicious agents who disrupt the validation of transactions—and for the ecosystem as a

whole. The model invokes a measure of honest agents who are interested in the returns
from holding a stake (of tokens) in a PoS blockchain and thus are also interested in
the proper functioning of the blockchain. An agent is honest if s/he is prepared to

run the software for validation, as required by the system. Otherwise, honest agents
choose actions to maximize their expected returns. The PoS protocol that we consider

in this paper perfectly mimics how the proof-of-work (PoW) protocol works. The PoW
protocol chooses the next block writer according to who ﬁnds the nonce that satisﬁes
certain conditions, that is, the probability that the next writer is chosen proportionally

to his/her hash rate. Similarly, in the PoS protocol, the next writer of the block is chosen
proportionally to his/her stake size. In the PoW protocols, the costs are typically assumed
to be diﬀerent across agents, as they depend on electricity, hardware, and maintenance

costs.
In the PoS protocol, we have a similar situation, except for electricity costs.
Agents have diﬀerent costs in participating in transaction validation, as availability of

1An agent that decides to run a pool and validate transactions is usually referred as a node of a

network.

2Our assumption that malicious agents always run staking pools is justiﬁed, since if they do not,
they do not aﬀect blockchain functioning and thus cannot be considered malicious. If they delegate their
stakes, they act like honest delegators and thus again are not malicious in any way.

2

appropriate computer software and hardware, speed and bandwidth of the internet, the
knowledge of how to run a secure validation node, and opportunity costs to engage in
validation activities(that is, costs of not being able to use tokens for other purposes)

diﬀer across them. The diﬀerence between PoW and PoS protocol pools is the following.
In the former, the costs are incurred by all pool members, and therefore the rewards

In the latter, the costs are incurred only by the pool
are distributed proportionally.
runner, while the rest—the delegators—incur no cost.
In this paper, we examine the
simplest reward distribution, where the pool runner keeps some fraction of the rewards

and distributes the rest to the delegators proportionally.

There is a measure of malicious agents who are only interested in disrupting the

blockchain, and therefore, their costs are ignored by the designer.

A Blockchain Designer aims at maximizing the chance that the blockchain is working
(maximizing blockchain security), which will be captured by maximizing the number of

honest validators. We will also consider an alternative objective where the Blockchain
Designer trades oﬀ the probability that the blockchain is running correctly with the costs

for all honest agents of validating transactions. This is a standard economic welfare
criterion. Two further aspects can be important for a Blockchain Designer: Reducing the
rewards for malicious agents, as this decreases their future inﬂuence and distributing the

rewards to validators as equally as possible.

The Blockchain Designer has two basic options when designing the market for staking
pools. First, s/he can ﬁx the return distribution between the pool owner and the pool

delegators. We call this “return ﬁxing”. Second, s/he can allow competition of pool
runners regarding how the returns from transaction validation are shared between the

pool owner and the pool delegators. This is called “return competition”.

We model the ensuing interaction as a three-stage game. In the ﬁrst stage, agents
decide whether (i) to open a staking pool, (ii) to delegate their stake to some pool or (iii)

to abstain from validation activities. Setting up pools for validating transactions is costly,
and these costs may diﬀer between agents. In the second stage, either the Blockchain

Designer determines the shares uniformly for all running pools (return ﬁxing) or pool
owners determine how returns should be shared between pool owners and delegators
(return competition). In the third stage, transactions are validated and, depending on

the share of stakes controlled by malicious agents, validation either works properly or the
blockchain is disrupted.

Our main insights start from the observation that honest agents with high costs to
set-up a node as a validator may want to delegate their stake to other pool owners, while
honest agents with low costs may want to open their own pool. Malicious agents always

open a pool, as this increases their chances to disrupt the blockchain.

We establish existence and uniqueness of equilibria of the stake pool formation game

with ﬁxed return distribution between pool owners and delegators and show that they

3

are of the threshold type. We show next that there exists a unique sharing rule of the
returns from validation between delegators and pool owners that maximizes the probabil-
ity that the blockchain operates correctly and we do the same for maximizing welfare of

honest agents when costs of running staking pools are taken into account in addition to
blockchain security. Then, we provide numerical illustrations of the equilibria for uniform

distribution of costs.

Subsequently, we identify the potential and risk of staking pools. First, staking pools
can never increase current blockchain security over a system in which no such pools

are allowed. The reason is as follows. Without staking pools, a share of honest agents
participates in validating transactions, as the additional reward is higher than the costs.

With staking pools and if the returns are shared with the validators, the return to pool
owners declines, as the average rewards from validating transactions is given. Hence, less
honest agents are willing to open staking pools, so that malicious agents will control a
larger share of stakes in validating transactions 3.

Yet, by optimally choosing the distribution of the validation returns to delegators,

the allocation of rewards to honest stakes involved in validation increases, which may be
beneﬁcial for subsequent blockchain operations. We show how return splitting between
pool owners and delegators has to be determined in order to minimize the rewards to

malicious agents.

Second, by choosing welfare optimal distribution rewards, staking pools may decrease
blockchain security, but it prevents allocating large rewards to only a fraction of agents.

Third, when pool owners can freely distribute the returns from validation to delega-
tors, staking pools decrease blockchain security, since malicious agents attract delegators

by distributing most of the returns to them.

Finally, we show how our results can be extended to situations in which not only
running a pool but also the act of delegation is costly. Moreover, as we use a continuum

model for tractability reasons, we show how our analysis can be recast—albeit with a
more complex formal apparatus—in a discrete setting.

The paper is organized as follows. In the next section, we discuss the related literature.
In particular, literature motivating the formation of staking pools in PoS blockchains is
In Section 4, we
reviewed.

In Section 3, we introduce the model and preliminaries.

analyze the equilibria of the ﬁxed return game.
In Section 5, we discuss designs for
staking rewards that either maximize security or maximize welfare. Section 6 addresses

a uniform cost distribution and provides numerical examples. In Section 7, we analyze a
return competition game, where pool owners individually decide on the reward sharing
scheme. In Section 8, we study extensions of our basic model. Section 9 concludes.

3The return splitting cannot be strictly enforced by the protocol (designer) itself, but should rather
be a recommendation. Therefore, if some pool owner publicly oﬀers more rewards to delegators than is
recommended, it should be a signal that this pool owner is not honest.

4

2 Related Literature

Staking Pools: Many blockchains have already implemented staking or will implement it
in the near future. Such examples include, but are not limited to Cardano (Kiayias et al.
(2017)), Solana (Yakovenko (2017)), Polkadot (Wood (2016)), Tezos (Goodman (2014))

and Concordium. All these allow staking pools in which agents who do not run their
own staking pool will be able to delegate their stake to an existing pool and beneﬁt from

rewards. By delegation, agents are indirectly involved in block proposal and validation,
via their stake.

Br¨unjes et al. (2020) study staking pools among honest agents from an interesting

mechanism design perspective. Their reward scheme ensures that a desired number of
staking pools is achieved while each pool has approximately the same amount of stake

and low-cost agents are running the pools. The reward scheme ensures that reporting
the true costs is the dominant strategy. Our paper is complementary as we focus on
the design of staking pools in the presence of malicious agents who want to disrupt the

blockchain and thus have quite diﬀerent objectives than honest agents. We examine on
how such staking pools aﬀect blockchain security, how security risks can be alleviated

and how distribution of rewards to malicious agents can be limited. Our mechanism is
also simpler to implement, as there is no communication between the designer and pool
runners, and therefore, no need for contracting, unlike in Br¨unjes et al. (2020). It is also

intuitive to interpret for the agents, than the generic mechanisms studied in there.

Blockchain and Consensus Protocols: There is a rapidly growing literature on blockchains

and consensus protocols. The most common reference is Nakamoto (2008), a Bitcoin
whitepaper, in which the consensus protocol PoW is introduced. Many papers focus-
ing on consensus protocols, that have been published recently, include John et al. (2020)

and Benhaim et al. (2021). PoS protocols were introduced to avoid the signiﬁcant use of
energy associated with PoW protocols. In this paper, we adopt a widely used PoS proto-

col, in which the next validator is chosen proportionally to the available stake. A major
paper on the game-theoretic analysis of blockchain and its folk theorem is Biais et al.
(2019). Benhaim et al. (2021) and Amoussou-Guenou et al. (2020) consider games in the

presence of malicious agents. This aspect is also part of our model. In particular, we argue
that the probability that the blockchain is well-functioning is increasing with the share
of honest validators and achieves complete security (probability one) when the share of

malicious agents falls below a certain threshold. More speciﬁc work on blockchain mining
rewards from a game-theoretic angle are studied in Chen et al. (2019) and Kiayias et al.

(2016).

Model Assumptions: Herrera et al. (2014) study a voting game with two parties where
voters vote for one party or abstain. In their model, voters have individual costs that

are drawn according to some distribution function. Similarly to our paper, Herrera et al.

5

(2014) characterize equilibria of their game which take the form of so called “cut-oﬀ
thresholds”. They obtain a pair of thresholds, one for each party. Then, a citizen whose
If
cost is below the corresponding threshold will turn out and vote for his/her party.

a citizen’s cost is above the threshold, s/he will abstain. Our model works in a similar
manner. We characterize threshold equilibria such that if the cost for an individual is

below that threshold, s/he will run a staking pool, and delegate or abstain otherwise.

Similar to Herrera et al. (2014), Castanheira (2003) studies a voting game where cit-
izens’ costs are drawn from a uniform distribution. In our paper, we also consider a uni-

form distribution for costs. One key diﬀerence, however, is that the costs in Herrera et al.
(2014) and Castanheira (2003) are costs of voting4, whereas in our paper, the costs are
associated with running a pool and the costs connected to it.

Apart from direct mining rewards for the next block miner, there are also rewards
coming from auctions, where users bid on their transactions to be included to the next

block. The rewards from auctions may sometimes even be higher than mining rewards,
see Chitra and Kulkarni (2022) for the extended treatment of maximal extractable value

(MEV) and its role on the security of blockchain protocols. There are even calls for
aligning rewards from MEV with rewards from mining 5, which would result into scaling
up the reward parameter of our paper.

In our paper, we use continuum approach to model the measure of agents, and thus
follow the approach in Gersbach (2009) and Halaburda et al. (2021), for instance. More
concretely, agents are modeled as inﬁnitely small. The continuum approximates large

communities and it proves to be a tractable approach for the staking pool formation
game. The continuum model is thus a limiting case where the number of agents becomes

large and delegation to staking pools is done uniformly at random. In our model, besides
a pool ID (or address), no further information is provided to delegators. From addresses
or pool IDs, no information about pool owners can be inferred. Hence, every pool has
equal chances to be chosen by agents.6
entails no cost.

In the basic version of the model, delegation

Crypto-Democracy and Vote Delegation: There is an extensive research on democ-
racy and blockchains, such as voting on blockchain (see Leonardos et al. (2020), Osgood
(2016) and Allen et al. (2017), for instance). Very recent work on vote delegation in

the presence of malicious agents is Gersbach et al. (2021a). The delegation of votes can
be seen as a delegation of stakes in the blockchain environment. Further literature in

the ﬁeld of vote delegation is known under “liquid democracy”, where besides voting

4See the rational and costly voting literature (Palfrey and Rosenthal (1983), Ledyard (1984), B¨orgers

(2004) and Gersbach et al. (2021b)).

5https://notes.ethereum.org/cA3EzpNvRBStk1JFLzW8qg#Committee-driven-smoothing
6In practice, delegators may have more information about pool owners, but they remain anonymous.
On the Cardano blockchain, for example, agents can ﬁnd all staking pools on pool.pm, which visualizes
all staking pools with the pool IDs, the current stake of the pools, the number of delegators and which
blocks were produced by which staking pool.

6

and abstaining, agents have the additional option to delegate their vote to other agents
(see Bloembergen et al. (2019), for example).

Automated Market Maker (AMM): Staking is also used in other contexts such as yield
aggregation7 and automated market maker. The analogy to staking pools is the following.
There are liquidity providers who add funds to a liquidity pool that is managed by an

AMM. The liquidity providers correspond to agents who delegate their stake in our model.
Hence, the AMMs collect funds in a liquidity pool that can be traded later.8 In return,
liquidity providers receive tokens proportional to their staked amount, which correspond

to the rewards in our model. Besides these analogies, AMMs have other tasks as well,
such as determining prices for traders. A well-known AMM is Uniswap, for example

(see Hayden Adams (2020)).

PoW and Mining Pools: PoW has been studied extensively since the rise of Bitcoin
Nakamoto (2008). While in PoS protocols, the next validator is chosen randomly based on

their amount of stakes, PoW protocols use computational power. That is, the chance that
a miner will mine the next block is proportional to his/her computational power9 relative
to the total computational power of all miners. Similar to PoS protocols, miners in PoW
protocols can form a pool to gather more computational power and hence increase the
chance to mine the next block. Such mining pools have been analyzed game-theoretically

in Lewenberg et al. (2015), Leonardos et al. (2019), Cong et al. (2020), Cheung et al.
(2021), Arnosti and Weinberg (2022) and Chatzigiannis et al. (2022), for example. Cong et al.
(2020) study mining pools and focus on risk sharing as centralizing force. In their model,

miners are modelled as a continuum who can invest a hash rate. Arnosti and Weinberg
(2022) study a model where miners have heterogeneous costs and show that asymmetries

in costs lead to concentration of mining power. Diﬀerent levels of electricity costs, for
example, are a source of heterogeneity of costs. In PoS heterogeneity of costs of valida-
tors to run a pool can arise because of diﬀerent skills and computer facilities to set up a

validator node and oﬀering it as a continuously running validator and pool for other stake
holders and diﬀerent operation costs of validation. Chatzigiannis et al. (2022) models

miners as rational agents who distribute their power across pools and across diﬀerent
cryptocurrencies. Reward functions for mining pools are studied in e.g. Schrijvers et al.
(2017). Fisch et al. (2017) study optimal mining pooling strategies in PoW blockchains.

7Under yield aggregation, investors can passively earn rewards by sending tokens to reward generating

smart contracts (see Cousaert et al. (2021)).

8Note that the liquidity pools hold at least two diﬀerent assets, which is a major diﬀerence to staking

pools.

9As a measure of computational power, one typically uses the hash rate.

7

3 Model

3.1 The General Set-up

There is a continuum of measure H of honest agents10 and there is a continuum of
measure M of malicious agents. The continua can be represented by intervals on the real
line, with length H and M, respectively. Working with a continuum of agents models

a blockchain with a large number of participants and approximates the corresponding
discrete model. Indeed, we show in Section 8.3, how the analysis—albeit in a much more
complicated way—can be performed in a discrete framework and how we can recover

results in that framework. While the continuum model is much more tractable and yields
simpler expressions, it requires more subtle interpretations, though.

We assume H > M, so that, honest agents are in the majority. Each agent (malicious

or honest) has one unit of the stake.11

Each honest agent is identiﬁed by his/her cost level for validation of transactions,
respectively, for running a staking pool on the blockchain.12 Costs are denoted by c and
are heterogeneous across honest agents, as they depend on the availability of appropriate

computer capital and human capital. Let the random variable X correspond to the costs
for honest agents. Speciﬁcally, the costs for honest agents are distributed according to
the atomless density function f (c) deﬁned on [0, T ). Note that the support interval can
be R+, that is, T can be equal to
. The corresponding cumulative distribution function
is denoted by F (c). Malicious agents are of the Byzantine type and do not care about

∞

the costs and returns of running a pool. Hence, we set their costs to zero.

There is also a reward R

R+, paid for creating the next block13. The agents’ types
are private information. As assumed above all honest and malicious agents have the same

∈

amount of stakes, equal to one unit. There is also a Blockchain Designer. The blockchain
is assumed to be functioning better if more of validators are honest.

3.2 Objectives

The Blockchain Designer and the two types of agents have the following general objectives:

• Maximize the chance that the blockchain is working (maximizing blockchain secu-
rity), which will be captured by a maximization of the number of honest validators

(Blockchain Designer).

10These agents are called “rational” by other authors, e.g.

in Amoussou-Guenou et al. (2020)

and Halaburda et al. (2021).

11As the total amount of stakes is inﬁnite, all variables which are integrated over the set of agents are

averages in the continuum model.

12Costs include, for example, the costs for registering, running the software and forwarding messages

on transactions.

13In some contexts it is called mining reward.

8

• Maximize expected reward minus cost (Honest Agents).

• Maximize the measure of stakes delegated to them (Malicious Agents).

We will formally specify the manifestation of these objectives later. As to the Blockchain

Designer, we will consider an alternative objective where s/he trades-oﬀ the probability

that the blockchain is running correctly with the costs for all honest agents to validate
transactions. While we consider maximizing blockchain security as the most important
objective, arguably one could also consider a standard economic welfare criterion as a

guiding principle for the Blockchain Designer.

Two further aspects can be important for a Blockchain Designer. First, s/he may aim

at minimizing the rewards received by malicious agents, as this decreases their future
inﬂuence. Second, the Blockchain Designer may want to distribute rewards to validators
as equally as possible, which is an original motivation of staking. We will discuss to which

extent these aspects materialize when we present our results.

3.3 Staking Pool Formation Game

We consider the following game, which consists of three stages:

Stage 1: Agents decide either to form a staking pool or not (both honest and

malicious). Agents who decide to become a pool owner obtain an identiﬁcation
number, denoted by i.

Stage 2: Agents who did not register for a staking pool decide whether to delegate
their stake to some staking pool or to remain idle.

Stage 3: The blockchain runs, validation takes place (or not), and rewards are
distributed.

If an agent i forms a staking pool, we denote by si the amount of stakes s/he is
receiving. We also denote by P the measure of honest agents who form a staking pool.
D and I denote the measure of honest agents who delegate their stakes or stay idle,

respectively. We have H = P + D + I.

Our main assumption for this game is that delegators distribute themselves evenly

across all possible pools. The rationale is that the type of a pool owner is private informa-
tion, and for delegators, pool owners are all alike. Hence, invoking measure consistency,
this assumption implies

si =

D
P + M

,

i.

∀

We note that all pools obtain the same amount of delegated stakes and thus we write s
for si in the following. The total size of the pool—stakes of the pool owner and delegated
stakes—is then s + 1. We note that (s + 1)(P + M) + I = D + P + M + I = M + H.

9

The payoﬀs are determined as follows: The next validator14 is chosen among the
available pools proportionally to the pool size. This particular rule is already implemented
in major PoS protocols (e.g., see Kiayias et al. (2017)), as it perfectly replicates the PoW

protocol, where probability for the next leader (in our case next validator who writes
the block) is proportional to computing powers. Such a system has the advantage that

splitting and pooling of the stakeholders does not increase the chances to be chosen as a
next validator as the expected return is unaﬀected by such strategies.

The reward for the next block is given by an amount R. Since all pools have the
P +M . Hence, the
same size, the return distribution is a uniform distribution with density
individual reward a pool expects to receive is r = R
P +M . Since we have a continuum model,
we note that both the individual return for an individual and the cost of running a pool
have zero weight in the average return R and the average amount of costs, respectively.
Yet for an agent, only the individual returns and costs matter.

1

The blockchain designer sets a parameter, denoted by λ, 0 < λ

1, which determines
how rewards have to split between pool owners and delegators. To sum up, the individual

≤

expected rewards are as follows:

• A pool receives r = R

P +M .

• The pool owner obtains λ

r.

·

• An individual delegator obtains (1
λ)
·
−
s

r

. The total amount given to the delegators

in a pool is (1

λ)

r.

·

−

• An idle agent obtains 0.

We measure the probability that the blockchain operates correctly by a function

) : [0, T ]

Pc(

·

→

[0, 1],

that depends on the share of honest agents running staking pools, that is (weakly) in-
creasing as a function of this share, and which may reach probability one if a suﬃcient

share of honest agents is participating in validating transactions. Later in this paper,
we will study two diﬀerent versions of this probability function and reward schemes that
depend on it. In the basic version of the staking pool formation game, we assume that

the returns are paid, no matter whether the blockchain operates correctly or not. The
motivation for this assumption is as follows: Whether or not the blockchain operates

correctly may not be immediately detected or agents maybe able to sell their rewards
immediately after writing the next block. Hence, agents involved in validating transac-
tions aim at maximizing the immediate returns from these activities in such cases. The

14In blockchains, transaction validation is done by creating a new block.

10

Blockchain Designer is, of course, interested in how well the blockchain is functioning. In
Section 8.2, however, we make rewards dependent on the operation of blockchains, that
is, rewards are only distributed if the blockchain operates correctly.

The main design parameter λ

[0, 1] is a non-negative real number set by the

Blockchain Designer. A game with a payoﬀ structure as above, together with (H, M, R, F, λ),

∈

is called a “staking pool formation game” and is denoted by

.

G

4 Equilibrium Analysis

In this section, we analyze the equilibria of a staking pool formation game.

4.1 Equilibrium Concept

In a staking game with non-zero reward R, an honest agent will never stay idle. The
reason is that since delegation is free of cost and delegators earn some reward, the expected

payoﬀ is positive for a delegator, whereas the payoﬀ for staying idle is zero. Only in the
case λ = 1, agents would be indiﬀerent between delegation and staying idle. Hence,

delegation weakly dominates staying idle and so H = P + D.

In Section 8.1, we will consider the case where delegation comes at a small ﬁxed cost
and so, staying idle will not be dominated in general. For tractability we assume a tie-

breaking rule. First, if an honest agent is indiﬀerent between delegating and staying idle,
s/he will choose to delegate. This implies that when there are no delegation costs, no

agent remains idle.

We now proceed by focusing on equilibria of the threshold type. In particular, we
solve for the threshold equilibrium by looking at the agent with a speciﬁc cost level c∗ at
which this agent is indiﬀerent between running a pool and delegating, i.e., the expected
utility from delegating is equal to the expected utility from running a pool.

An important remark is in order. If a threshold equilibrium exists, it is unique. If a
threshold equilibrium does not exist, we end up in a corner solution—either no honest
agent will run a pool or all honest agents will run a pool, and thus there will be no

delegation.

We introduce the following deﬁnition:

Deﬁnition 1 (Threshold Equilibrium)
A cost level c∗ > 0 is called a “threshold equilibrium” if an agent with cost c∗ is indiﬀerent
between running a staking pool and delegating. Furthermore, all agents incurring a cost
that is lower than c∗ will run a staking pool, and all agents with a cost greater than c∗
will delegate.

In the threshold equilibrium we have P = F (c∗)H and D = (1

F (c∗))H.

−

11

4.2 Equilibrium Characterization

In the following we are looking for the equilibria, in which at least some fraction of honest

agents decide to run own pools. We characterize the equilibria of the staking game:
Theorem 1

There exists a unique threshold equilibrium to the game

if and only if

G

λ >

M
H + M

.

(1)

Proof. First, we have to set up the indiﬀerence condition for an honest agent. That is,
we have to equate the expected utility from being a delegator with the expected utility

from running a pool. More precisely, the expected utility from being a delegator is

(1

λ)r

,

−
s

λ) of the reward r, divided by the number of delegators, for the

which is the share (1

−

particular pool. Similarly, the expected utility from running a pool is

λr

c,

−

which is the share λ of the reward r, minus the cost c of the particular pool owner. In
the equilibrium point c∗, an honest agent is indiﬀerent between delegating and running
a pool, that is, c∗ solves the indiﬀerence equation:

λ)r

(1

−
s

= λr

c∗.

−

(2)

From the equilibrium deﬁnition, we know that P = F (c∗)H and D = (1
Plugging in these values in (2) and simplifying, we obtain:

−

F (c∗))H.

(1

−

(1

λ)R
−
F (c∗))H

= λ

R

F (c∗)H + M −

c∗.

We reorder equation (3) as follows:

c∗ =

λR

F (c∗)H + M −

(1

λ)R
−
F (c∗))H

.

(1

−

(3)

(4)

We note that the left hand side (LHS) of equation (4) is obviously increasing in c∗, while
the right hand side (RHS) is decreasing in c∗. Indeed, the derivative of the RHS with
respect to c∗ is

λRF ′(c∗)H

−

(F (c∗)H + M)2 −

(1
(1

−
−

λ)RF ′(c∗)
F (c∗))2H

< 0.

Since the LHS of (4) is increasing and is equal 0 for c∗ = 0, and the RHS is decreasing in

12

c∗, the necessary condition to have a solution to the equation is that the RHS is positive
for c∗ = 0. That is, we have the condition

λR

F (c∗)H + M −

(1

λ)R
−
F (c∗))H

(1

−

> 0,

which is, for c∗ = 0, equivalent to the condition in the theorem,

λ >

M
H + M

.

The indiﬀerence condition of the equilibrium of equation (4) to have an internal solu-
tion is obtained by taking c∗ = T . In this case, the LHS has to be larger than the RHS,
which always holds for λ < 1, as the RHS is equal to
To establish uniqueness, suppose that λ > M

H+M . As shown above, if we focus on
threshold equilibria, there exists a unique equilibrium characterized with the cost level
c∗. Suppose that an equilibrium exists which is not of the threshold type. Without loss
of generality, assume two cost levels c1 and c2 with c2 > c1, with the following property.
A agent with cost c2 will run a pool, while a agent with c1 will delegate. Hence, for the
ﬁrst agent, it must hold that

−∞

.

λR

F (c∗)H + M −

c2 >

(1

−

(1

λ)R
−
F (c∗))H

,

while for the second agent, we must have the opposite inequality, that is,

λR

F (c∗)H + M −

c1 <

(1

−

(1

λ)R
−
F (c∗))H

.

Together, this implies that

c2 <

λR

F (c∗)H + M −

(1

λ)R
−
F (c∗))H

(1

−

< c1,

which contradicts the assumption c2 > c1. Hence, any equilibrium will be of threshold
type.

Since all equilibria are of the threshold-type, we simply refer to threshold-type equi-

libria as “equilibria”.

The interpretation of the lower bound condition on λ in the theorem is straightforward.

To have a positive measure of pools owned by honest agents, the share of the reward for
the pool owners should be higher than the share of malicious agents in the whole system.

As long as λ satisﬁes this condition, we have a unique equilibrium of the game
. From
the proof of Theorem 1, it is straightforward to see that if λ = M
H+M , then the only
solution to the indiﬀerence condition is c∗ = 0 and hence, all honest agents will delegate

G

13

and malicious agents control all stakes. If λ < M
solution, where a positive measure of honest agents run pools.

H+M , then there exists no equilibrium

5 Optimal Reward Design

In this section, we use the framework developed in the previous sections to design
blockchains that maximize security or, alternatively, maximize welfare.

5.1 Maximal Blockchain Security

We obtain the equilibrium solution of (3) for a given λ by simply solving for c∗. We
denote it by c∗(λ). The inverse function is denoted by λ(c∗), and can be trivially found
from (3). Namely,

λ(c∗) =

c∗ +
(1
−
R
F (c∗)H+M +

R

F (c∗))H
R

F (c∗))H

(1

−

.

(5)

λ is a designer’s variable.
We assume in this section that the probability that the blockchain operates correctly

is given by:

Pc(c∗) :=

P (c∗)
P (c∗) + M

.

That is, the probability that the next block consists of correct transactions is equal

to a share of honest pool runners. This is a simple formulation, reﬂecting that the next
block writer is chosen uniformly at random. However, our analysis holds qualitatively for
any probability function that is increasing in the share of honest agents and may reach 1

if a suﬃcient share of honest agents is achieved.

The ﬁrst goal of the designer is to maximize the share of honest agents running pools,
that is, to maximize P (c∗). The probability that the blockchain is run correctly depends
on P , which is increasing in c∗. Increasing λ has two eﬀects on the honest agents’ decision.
First, it motivates an agent to run a pool, as a greater share of the rewards is allocated

to the owner of the pool. On the other hand, since a higher λ motivates many agents to
run pools, there are many pools, and therefore, lower chances for each of them to win the
reward. However, we obtain the following result:

Proposition 1

The fraction of honest agents running a pool is maximized for λ = 1.

Proof. Note that the RHS of (4) is increasing in λ. By increasing λ, we have to
λ2, then
increase c∗ to have equality, as the RHS is decreasing in c∗. That is, if λ1 ≤

14

c∗(λ1)

≤

c∗(λ2). Taking the maximum value λ = 1 transforms equation (4) into

c∗ =

R
F (c∗)H + M

.

(6)

The solution to this equation maximizes the share of honest validators.

We note that by setting λ = 1, in the threshold equilibrium of game

, we do replicate
the levels of honest and malicious stakes involved in transaction validation which would
arise in the simple game without delegation and no staking pools. In this game, instead,

G

honest agents are allowed to either validate transactions or abstain. In such a game, the
indiﬀerence condition of the threshold equilibrium corresponds to c∗ = r, equivalent to
λ = 1 in the pool formation game. Yet, with λ = 1 and pool formation, all returns from
validation are channelled to staking pool owners while delegators receive nothing. This
is a concern for the future evolution of the blockchain since stake holding may be more

and more concentrated on pool owners.

We will see next that the solution λ = 1 does not maximize social welfare, and does

not distribute the rewards on honest agents that have high costs of running a pool either.

5.2 Welfare Optimal Reward Schemes

In this section, we consider the alternative objective the Blockchain Designer may pursue,

namely taking into account that achieving maximal security may involve large costs,
as too many honest agents with high costs participate in the validation process. For
the alternative objective, we normalize the returns from a successful operation of the

blockchain per honest agent to one and express the costs relative to these returns. To
quantify the gains and losses, we introduce social welfare of the game

.

G

Deﬁnition 2 (Social Welfare)
Social welfare of the game

is deﬁned as

G

W =

P (c∗)
P (c∗) + M

H

−

P (c∗)E[X

X < c∗].

|

(7)

The social welfare is calculated as the probability that the blockchain runs correctly,

times the measure of honest agents, minus average pool running costs incurred by honest
agents.

Increasing λ has two competing eﬀects on social welfare. First, it increases the number

of honest agents who create their own pools. Therefore, the likelihood that malicious
agents will write the next block is decreasing. Second, increasing the number of honest

agents who create their own pools wastes a lot of costs of running pools. These two eﬀects
work against each other. In the following, we show that for a wide class of distribution
functions, the social welfare optimum value is not polar. We obtain the following result:

15

Theorem 2
Let the cost distribution function satisfy F ′′(c)
(H +
M)2T , then the optimum value maximizing welfare is c∗ = T . On the other hand, if
HM < (H + M)2T , then there is a unique optimum value of c∗ that maximizes the social
welfare.

[0, T ). If HM

0 for any c

≥

≤

∈

Proof. The welfare (7) can be rewritten as

W =

F (c∗)H 2
F (c∗)H + M −

F (c∗)HE[X

X < c∗] =

|

F (c∗)H 2
F (c∗)H + M −

F (c∗)H

c∗
0 xf (x)d(x)
F (c∗)

R

.

The derivative of W with respect to c is equal to:

W ′ =

f (c)H 2M

(F (c)H + M)2 −

cf (c).

H

·

The second derivative is equal to:

W ′′ =

f ′(c)H 2M(F (c)H + M)

−
(F (c)H + M)3

2f (c)2H 3M

Hf (c)

−

−

cHf ′(c).

We note that given F ′′(c) < 0, the second derivative is always negative, that is, the
welfare function is concave. It is easy to verify that W ′(0)
0. That is, if W ′(T ) < 0,
which is equivalent to HM < (H + M)2T , we have a unique optimum solution. If, on the
(H + M)2T , then the optimum is achieved
other hand, W ′(T )
in the point c∗ = T .

0, equivalent to HM

≥

≥

≥

Note that the uniform distribution function satisﬁes the condition F ′′(c)

0. In fact,
1 satisfy the condition of the

≤

all distribution functions of the type F (c) = cα, where α
theorem.

≤

6 Uniform Cost Distribution

In this section, we analyze the equilibria that maximize blockchain security and calculate
the welfare optimal values for c∗ and λ for the case when costs are distributed uniformly
on [0, 1]. Furthermore, we study for the uniform distribution how rewards for malicious

agents can be minimized.

16

6.1 Security Maximization

To maximize the share of honest staking pools, we have to solve equation (6). Hence,
for uniform distribution on the interval [0, 1], that is, F (c∗) = c∗, we have to solve the
following quadratic equation:

The positive solution is given by

c2H + cM

R = 0.

−

c∗ = −

M + √M 2 + 4HR
2H

.

(8)

(9)

If H = 1 and M = 0.4 and R = 1, then the solution to (8) is c∗ = −
solution maximizes the share of honest staking pools. That is, approximately 82% of
honest agents will run pools in the equilibrium. More numerical values are provided in

0.82. This

≈

1+√26
5

Section 6.3.

6.2 Welfare Maximization

For uniform distribution F , the welfare measure (7) simpliﬁes to

W = H

c∗H

c∗H + M −

(cid:18)

1
2

2
c∗

,

(cid:19)

where we used that P (c∗) = F (c∗)H = c∗H and

E[X

|

X < c∗] =

∞

xf (x
|

0

Z

x < c∗)dx =

c∗
0 xf (x)dx
F (c∗)

R

=

1
2
2c∗
c∗

=

c∗
2

.

The derivative of W with respect to c∗ is

W ′(c∗) =

H 2M

(c∗H + M)2 −

c∗H.

H < 0 for
Note that W ′(c∗) = 0 has three solutions. Furthermore, W ′′(c∗) =
any non-negative c∗. This means that the real-valued extremum (which is in the interval
[0, 1]) of W is a maximum. By simply solving W ′(c∗) = 0, we obtain the following
real-valued solution which maximizes W :

−

−

2H 3M
(c∗H+M )3

c∗ =

(1 + i√3)M 2
22/33Z

+

(1

i√3)Z
−
6 3√2H 2 −

2M
3H

,

(10)

where Z =
maximized at c∗. Numerical examples follow in the subsequent section.

2H 3M 3 + 3√3√27H 10M 2 + 4H 8M 4. The welfare function is

27H 5M

−

−

3

p

17

6.3 Numerical Illustrations

In this subsection, we provide detailed security maximizing (see Section 6.1) and welfare

maximizing (see Section 6.2) equilibrium values for three sets of parameters in Table 1
and Table 2. In Table 1 the values for c∗ are given by Equation (9). In Table 2 the values
for λ and c∗ are given by Equations (5) and (10), respectively.

H M R λ
1
1
1
1
1
1

0.5
0.4
1
3

1
1
1

c∗
0.78
0.82
0.85

P (= c∗H) W

0.78
0.82
0.85

0.305
0.336
0.359

Table 1: Maximizing the measure of honest staking pools: P .

H M R
1
0.5
1
1
0.4
1
1
1
1
3

λ
0.83
0.8
0.77

c∗
0.5
0.497
0.491

P (= c∗H) W

0.5
0.497
0.491

0.375
0.431
0.475

Table 2: Maximizing social welfare: W .

For example, consider the case where M = 0.4. Social welfare is maximized for cost
c∗ = 0.497. That is, it is quite diﬀerent from c∗ = 0.82, which is the value for maximizing
the honest agents running a pool. On the other hand, λ = 0.8, the value optimizing
welfare is also quite diﬀerent from λ = 1, the value maximizing the share of honest

agents running their own pools.

6.4 Malicious Reward Minimization

The share of rewards received by malicious agents as a function of λ is calculated in the
following way:

µ(λ) :=

Mλ
F (c∗)H + M

.

(11)

To show the main result of this section, we ﬁrst show a lemma that holds for any cost

distribution function:

Lemma 1
Rewards for malicious agents when λ = M
cost distribution function F .

H+M are lower than rewards for λ = 1, for any

Proof.

In the ﬁrst case, where λ = M

H+M , we have c∗ = 0, and therefore, using (11),

rewards are equal to

M
H + M

µ

(cid:18)

(cid:19)

=

M
0 + M

λ =

M
H + M

.

18

In the second case, rewards are equal to

µ(1) =

M
F (c∗(1))H + M

λ =

M
F (c∗(1))H + M

.

1, the lemma is proved.

Since F (c∗(1))

≤

Next, we show the main result of this section:

Proposition 2
Rewards to malicious agents µ(λ) are minimized for λ = M
H+M for a uniform cost distri-
bution function on the interval [0, 1]. Moreover, µ(λ) is increasing or ﬁrst increasing and
then decreasing on the interval [ M

M +H , 1].

Proof. We verify the derivative of the share of rewards received by malicious agents
with respect to c∗ for a uniform cost distribution. It is given by,

d

M λ
F (c∗)H+M
dc∗

=

Mλ′(c∗)(c∗H + M)
(c∗H + M)2

−

HMλ

.

(12)

Note that the denominator is always positive. In Equation (5), λ is given as a function
of c∗. The derivative is

λ′(c∗) =

1
R(H + M)

(

3c∗

−

2H 2 + 2c∗(H 2

−

HM) + HR + MH).

After plugging this into Equation (12), the numerator of (12), Mλ′(c∗)(c∗H +M)
is given by

−

HMλ,

2H 3Mc∗

−

3 + H 2c∗

2(HM

4M 2) + 2Hc∗(HM 2

−
R(H + M)

M 3) + HM 3

.

−

Again, note that the denominator is always positive and hence, we only consider the
M 3) + HM 3. For c∗ = 0
numerator,
−
M +√M 2+4HR
(equivalent to λ = M/(H + M)), it is positive, and for c∗ = −
(equivalent to
2H
λ = 1), it is, depending on H, M and R, either positive or negative.

4M 2) + 2Hc∗(HM 2

3 + H 2c∗

2H 3Mc∗

2(HM

−

−

As increasing (decreasing) λ yields increasing (decreasing) c∗ and vice versa, (12)
translates easily. Therefore, given µ( M
H+M ) < µ(1) from Lemma 1, the minimum value
is achieved in the point λ = M
H+M ) < µ(1), we see that
the derivative cannot always be negative. Therefore, it is either always positive, implying
that µ(λ) is increasing on the whole interval [ M
H+M , 1], or the derivative is ﬁrst positive
and then negative, implying that µ(λ) is ﬁrst increasing and then decreasing.

H+M . From the observation µ( M

This result suggests that rewards to malicious agents are minimized in the corner
case, where only malicious parties run pools. In that case, however, the probability that
the blockchain functions correctly is equal to 0. Therefore, from the blockchain security

perspective, designer needs a higher λ. Our result suggests that once λ is large enough

19

≥

tλ) for the blockchain security to cross the required threshold speciﬁed by a system,
(λ
the designer only needs to verify endpoints of the interval [tλ, 1], for minimizing rewards
to malicious agents.

We next provide numerical examples for the share of rewards that malicious agents

receive for a uniform cost distribution when λ = 1 and λ < 1.
First, for λ = 1, the malicious agents’ reward share is M

P +M , with P = F (c∗)H, where
c∗ is given by (9). For λ = 1, H = 1, R = 1 the share of rewards that malicious agents
receive is given by

2M
M + √M 2 + 4

.

We summarize some values in Table 3.

H M R Share of Reward
1
1
1

0.390388
0.327922
0.282376

1
1
1

0.5
0.4
1
3

Table 3: Share of rewards for malicious agents when λ = 1.

Second, for λ < 1, the malicious reward share is M

Pλ+M λ, with Pλ = F (c∗)H, where c∗
is the real-valued non-negative solution to (3). We ﬁrst solve the indiﬀerence equation as
follows: With uniform distribution, we obtain from (3),

0 = H 2c∗

3 + (MH

H 2)c∗

2

−

−

(RH + MH)c∗ + λR(H + M)

RM.

−

(13)

To ﬁnd the roots of this cubic equation, we can write (13) as 0 = ac∗
where

3 + bc∗

2 + cc∗ + d,

H 2,

a =

−
b = H(H

M),

−

d = H(M + R),

e =

λR(H + M) + MR.

−

Let

∆0 = b2

3ad

−
= H 2((H

−

∆1 = 2b3

9abd + 27a2e

−

= H 3(2(H

M)2 + 3H(M + R)),

M)3 + 9H(H

−

−

M)(M + R) + 27HMR)

27H 4R(H + M).

λ

·

−

20

(14)

(15)

Then, we deﬁne

C =

3

∆1 +

s

and the three roots of (13) are given by

4∆3
0

,

∆2
2

1 −

p

c∗k =

1
3a

−

b + zkC +

(cid:18)

∆0
zkC

,

(cid:19)

where z = −

1+i√3
2

and k = 0, 1, 2.

We summarize some values in Table 4.

H M R
1
0.5
1
1
0.5
1
1
0.5
1
1
0.5
1
1
0.5
1
1
0.5
1
1
0.4
1
1
0.4
1
1
0.4
1
1
0.4
1
1
1
0.4
1
1
1
3
1
1
1
3
1
1
1
3
1
1
1
3

λ
0.99
0.9
0.8
0.7
0.6
0.5
0.9
0.8
0.6
0.5
0.4
0.9
0.5
0.4
0.3

Share of Reward
0.395647
0.414172
0.416164
0.409608
0.396822
0.378318
0.35305
0.357138
0.345172
0.331877
0.313697
0.307422
0.294599
0.28047
0.261626

Table 4: Share of reward that malicious agents receive.

7 Return Competition

In this section, we reconsider the staking pool formation game. Instead of the Blockchain
Designer, we allow that pool runners choose both their own levels of rewards and the
rewards they want to distribute to delegators. A pool owner i sets his/her own λi. This
game is a variant of the game

studied so far in the paper.
In the ﬁrst part of this section, we allow free return competition, that is, pool owner
G0. Hence, the game unfolds as

[0, 1]. We denote this game by

G

i can choose any λi ∈
follows:

Stage 1: Agents (both honest and malicious) either decide to form a staking pool or
not. Agents who decide to become a pool owner obtain an identiﬁcation number,
denoted by i, and set λi.

21

Stage 2: Agents who did not register for a staking pool decide whether to delegate
their stake to some staking pool or to remain idle.

Stage 3: The blockchain runs, validation takes place (or not), and rewards are

distributed.

We obtain the following result:

Proposition 3
In any equilibrium of the game

action validation and the blockchain is disrupted.

G0, malicious agents control all stakes involved in trans-

Proof. Suppose that there exists an equilibrium in which honest agents run staking

pools. Since running such staking pools is costly and there is zero measure of honest
agents with zero costs, such an equilibrium necessarily must involve that the minimal
value of all oﬀered values λi by staking pool owners, denoted by ˆλ, must be positive.
Otherwise, honest agents are better oﬀ by delegating their stakes. Note that the last
statement holds, since an individual honest agent has no inﬂuence on the probability

that the blockchain operates correctly by his/her decision whether to run a staking pool
or to delegate,

However, every malicious agent has an incentive to deviate and to set a lower value
of ˆλ for his/her own staking pool in order to attract more delegators, thereby making
staking pools for honest agents unattractive. Hence, all honest agents delegate. This
in any equilibrium,
is a contradiction that honest agents run staking pools. Hence,

malicious agents control all stakes involved in transaction validation and the blockchain
is disrupted..

In the second part of this section, agents are only allowed to choose their corresponding
¯λ. Invoking standard

λi from the interval [¯λ, 1], where ¯λ > M
Bertrand competition logic, we obtain the following result in this case:

H+M . We denote this game by

G

Proposition 4

The equilibrium of the extended game

¯λ is the same as the equilibrium of game

G

.

G

Proof. First, we note that in the equilibrium, all malicious agents choose the lowest
possible level ¯λ. If honest agents choose any λ that is strictly larger than ¯λ, then nothing
is delegated to them. Therefore, they also choose the same ¯λ.

That is, imposing a lower bound on λ also guarantees the same upper bound. This

adds to the robustness of the result obtained in Theorem 1 and oﬀers a way to implement
the equilibrium solution. On a practical side, the blockchain system does not need to force
the agents to have the same level of rewards. Rather, they reach it through rational play.
Note that setting any lower bound ¯λ
M
H+M would result in the same (bad) equilibrium
obtained in Proposition 3.

≤

22

8 Extensions

In this section, we study two extensions of our basic model. In ﬁrst extension, we intro-
duce a cost of delegation and in the second extension, we study the case when rewards
are realized endogenously. Finally, we outline how the analysis has to be performed in a

discrete framework and how we can recover results as the one in Theorem 1 in a discrete
framework.

8.1 Costly Delegation

In this subsection, we include costs of delegation. Arguably, such costs are non-zero,

since agents have to obtain the knowledge how to delegate their stakes safely to staking
pools, which lock-up conditions are attached to such operations and how to observe the
returns from delegation in comparison to other alternatives. This takes time and involves
opportunity costs. We denote the costs of delegation by cd > 0.

Costs for delegation introduce new trade-oﬀs, as large values of λ may motivate honest

agents to run pools but simultaneously discourage honest agents from delegating to pools,
as they may simply stay idle. We will see that staking pools and suitably chosen sharing
parameters for λ may increase blockchain security in such cases.

running a pool and delegating. We denote this game by

To prepare the analysis, let us ﬁrst assume that the strategy set only consists of
Gd. The indiﬀerence condition
in this game is the same as (4), with only one diﬀerence—the RHS has the additional
summand cd.

c∗ =

λR

F (c∗)H + M −

(1

We obtain the following auxiliary result:

λ)R
−
F (c∗))H

(1

−

+ cd.

(16)

Proposition 5
For any value of λ > M R
−
the extended game

cdM H

HR+M R , the indiﬀerence cost level of the equilibrium solution of

Gd is higher than the cost level of the equilibrium solution of

.

G

Proof. The proof is analogous to the proof of Theorem 1. The additional term cd
increases the RHS of (16), and therefore, the intersection of the LHS and RHS curves
corresponds to higher c∗. By plugging in c∗ = 0, and requiring LHS is lower than RHS,
and simplifying we obtain:

λ >

MR

cdMH
−
HR + MR

.

Note that the lower bound on λ for a positive equilibrium in the game

Gd is lower than
the lower bound obtained in Theorem 1. However, in this game, it might be that the

expected utility of running a pool minus the expected utility of delegation is negative,

23

but adding cd makes the RHS of (16) positive.
In that case, individual rationality of
i
pool running agents is violated. Therefore, if we consider an extended game
d, in which
honest agents are allowed to be idle, then those with high costs would choose to stay

G

idle instead of delegating. This also changes the behavior of agents that run pools. In
particular, they stay idle. That is, the strategy sets of agents are extended, and also

the deﬁnition of the threshold equilibrium takes a new strategy into account. Namely, in
the indiﬀerence condition, only positive values are compared, as the strategy to stay idle
yields zero utility. Formally, we obtain the following result:

Proposition 6
For λ

[ M R
−

of
idle.

cdM H

∈

HR+M R , M

i
d is lower than the one
Gd. Below the threshold, all honest agents run pools and above it all honest agents stay

M +H ], the equilibrium solution of the game

G

∈

cdM H

Proof. When λ

HR+M R , M

M +H ], the expected gain from running a pool minus the
(1
F (c∗))H < 0. Agents with cost
−
c∗ stay idle. Agents with cost c < c∗ are divided in two groups. Namely, there exists
(0, c∗) such that all agents with cost c < c′ run a pool and others stay idle. The
c′ = 0 and does always

[ M R
−
expected gain from delegation is negative:
c
≥
a c′
threshold c′ is a solution of the following equation:
exist.

λR
F (c∗)H+M −

λR
F (c′)H+M −

λ)R

∈

(1

−

Next, we ask if costly delegation can help to increase the level of honest agents running
a pool. Note that λ = 1 maximizes the level without costly delegation. From equation (6),
we ﬁnd the level of c∗, such that agents with cost lower than this threshold will run a
staking pool and those agents with costs higher than the threshold will stay idle, since
delegation is costly. However, if we decrease λ in such a way that the expected return
from delegation compensates the delegation cost cd, then all honest agents who were
staying idle will delegate or run a staking pool.

We obtain the following result:

Proposition 7
With costly delegation, the highest possible blockchain security level is always lower than
the one in the benchmark game

.15

G

Proof. We ﬁrst look at the decision of agents whether to delegate or to stay idle. For
values of λ that satisfy the following inequality:

(1
(1

−
−

λ(c∗))R
F (c∗))H ≥

cd,

(17)

honest agents delegate instead of staying idle. λd(c∗) is calculated from (16), that is,
Gd. That is, c∗ should satisfy both condi-

from the indiﬀerence condition of the game
tions (16) and (17).

15In knife-edge cases, both security levels can be the same.

24

Recall that in the benchmark case λ = 1 and cd = 0, the equilibrium cost level c∗ is

a solution to the following equation:

c =

R
F (c)H + M

.

In the costly delegation game, however, c∗ solves the equation (16), which together

with (17), yields:

c∗ =

λR

F (c∗)H + M −

(1

λ)R
−
F (c∗))H

(1

−

+ cd ≤

λR

F (c∗)H + M ≤

R
F (c∗)H + M

.

Given the monotonic decreasing property of

λR

F (c∗)H+M , we obtain that the equilibrium

c∗ of the costly delegation game is always lower than the equilibrium level of game

.

G

8.2 Endogenous Rewards

Throughout the paper, we assumed that rewards for writing the next block are exoge-

nously given and are equal to a constant number R, no matter what fraction of honest
In this section, we assume that
agents runs pools and participates in the validation.

rewards are realized only if the blockchain functions correctly, with probability one. This
probability is calculated by the following formula:

Pc(c∗) := min

1,

(cid:20)

(cid:18)

P
P + M

+ θ

.

(cid:19)(cid:21)

Here θ is a real number in [0, 1

2] that describes the tolerance of a system regarding the

share of malicious agents it can handle without compromising network security.

We say that full network security is achieved when

P

P + M ≥

θ.

1

−

Typically, for example in Byzantine-fault-tolerant protocols, θ is about 1

3 in many
consensus protocols (see Lamport et al. (1982), Abd-El-Malek et al. (2005), David et al.
(2017) Aiyer et al. (2005) and Dinsdale-Young et al. (2019)). Thus, in that case, if the
fraction of staking pools run by honest agents is at least 2
3, then full security is achieved.
θ
Requiring the probability of the blockchain security to surpass the threshold 1
imposes a threshold on the cost of pool running in the equilibrium. We denote the
e and the cost threshold by cθ. It is deﬁned by the following

−

corresponding game by
equation:

G

cθ := inf
c

F (c)H

F (c)H + M ≥

θ.

1

−

(18)

25

In this setting, to have a unique threshold equilibrium, we need

cθ <

λR

F (cθ)H + M −

(1

λ)R
−
F (cθ))H

.

(1

−

(19)

We obtain a result similar to the one of Theorem 1:

Theorem 3
There exists a unique threshold equilibrium c∗ > cθ to the game

e if and only if

G

cθ
R (F (cθ)H + M)(1

λ >

F (cθ))H + F (cθ)H + M

−
H + M

.

(20)

The proof is analogous to the proof of Theorem 1.
The results from the Section 7 on return competition are also translated directly in
[0, 1] as their own pool
∈
e
0. Formally, we obtain

this setting. In particular, if the agents are allowed to set any λ

return, the blockchain security fails. We denote this game by
the following result:

G

Proposition 8
In any equilibrium of the game

disrupted.

e
0 no honest agent runs a pool and the blockchain is

G

The proof is analogous of the proof of Proposition 3 and exploits the fact that indi-

vidual honest agents have zero measure. Therefore, any unilateral deviation by an agent
does not aﬀect the probability that the blockchain operates correctly.

8.3 Discrete Case

In this subsection, we show how the analysis can be recast in the discrete framework—
albeit in a much more complicated form.
In particular, we show that the same lower
bound condition on λ for having positive threshold equilibrium as in Theorem 1 can

be obtained if we assume that the number of honest agents is a large integer n > 0,
and replace the expected number of honest agents who run pools with nF (c∗). The
latter approximately holds by Chernoﬀ concentration bounds for large enough n. This

observation adds to the robustness of the continuum approach, as it shows that the result
obtained in Theorem 1 is not a byproduct of our assumption on having inﬁnitely small

agents. Rather, this assumption allows us to derive clean results more easily.

∈

Let m

N denote the number of malicious agents. By the assumption on c∗, we have
k + m pools, where k is distributed as binomial random variable with parameters n and
F (c∗). In expectation, every pool will obtain n
k+m delegated stakes. Hence, every pool
−
has a total expected stake of 1 + n
k+m . If a pool is chosen (i.e. it becomes the new
proposer), then all its delegators receive a reward. In expectation, the probability that

k+m = n+m

−

k

k

26

a pool is chosen is
(1

λ)r.

1
k+m and the reward for all delegators who delegated to this pool is

−
The pool owners always face private cost c∗ and obtain the reward λr with probability
d, where d is the number

1
k+m. The expected utility of the single delegator is
of delegators to that particular pool.

1
k+m(1

λ) r

−

Let d1, ..., dk+m be non-negative numbers, such that

k, where di denotes
the number of delegators to pool i. The ex-post utility of a delegator of a baking pool i,
when pool i has di delegators:

i di = n

P

−

1 + di
n + m

λ)

(1

−

r
di

,

and for the pool owner,

1 + di
n + m

λr

ci.

−
We model di as a binomial random variable, di ∼

Bin(n

k,

1
k+m).

−

Next, we replace random variables with their means in the ex-post indiﬀerence equa-
k+m and instead of k, we insert E[k] = F (c∗)n.
−

k

tion, i.e., instead of di, we insert E[di] = n
Then, we obtain:

1 + di
n + m

(1

λ)

r
di

−

λ)

(1

−

r
F (c∗)n
n
F (c∗)n+m

−

=

=

1 + n

−

F (c∗)n
F (c∗)n+m
n + m

λr

c∗

1 + di
n + m
1 + n

−
F (c∗)n
F (c∗)n+m
n + m

−

λr

c∗

−

c∗ =

1
F (c∗)n + m

λr

1
F (c∗)n

(1

−

λ)r.

−

n

−

The left hand side is equal to 0 for c∗ = 0 and it is increasing in c∗. The right hand
side is a decreasing function in c∗ and therefore, it should be non-negative for c∗ = 0, to
have a positive solution in c∗. That is,

1
F (c∗)n + m

λr

≥

n

−

1
F (c∗)n

λ)r.

(1

−

For c∗ = 0, we take into account that F (0) = 0 for a distribution function F . Thus, we
obtain:

1
m

λ

λ

≥

≥

1
n

−

(1
m
n + m

λ)

.

27

9 Conclusion

In this paper, we initiated the study of the formation of staking pools from game-theoretic
and mechanism design perspectives. Our insights can help to design reward distribution
rules that improve the blockchain security and fairness of reward distribution. This

study might open many further research avenues on how staking pools can be designed
optimally for blockchains. For instance, one might introduce quantity constraints such

as a leverage constraint on staking pools which limits the share of delegators towards the
pool owner. Whether such a constraint further improves the security of the blockchain is
left for future research. One might also allow the history of staking and running staking

pools to play a role in dynamic versions of the game and thus, an agent’s reputation to
behave honestly may be taken into account in such staking pool formation games. Future

research can also extend our model to arbitrary distribution of stakes across agents.

References

Abd-El-Malek, M., Ganger, G. R., Goodson, G. R., Reiter, M. K., and Wylie, J. J.

(2005). Fault-scalable Byzantine fault-tolerant services. ACM SIGOPS Operating Sys-
tems Review, 39(5):59–74.

Aiyer, A. S., Alvisi, L., Clement, A., Dahlin, M., Martin, J., and Porth, C. (2005). BAR
In Herbert, A. and Birman, K. P., editors,

fault tolerance for cooperative services.

Proceedings of the 20th ACM Symposium on Operating Systems Principles 2005, SOSP
2005, Brighton, UK, October 23-26, 2005, pages 45–58. ACM.

Allen, D., Berg, C., Lane, A., and Potts, J. (2017). The economics of crypto-democracy.
In Poblet, M., Casanovas, P., and Plaza, E., editors, Proceedings of the Workshop

on Linked Democracy co-located IJCAI 2017), Melbourne, Australia, August 19, 2017,
volume 1897 of CEUR Workshop Proceedings, pages 63–73. CEUR-WS.org.

Amoussou-Guenou, Y., Biais, B., Potop-Butucaru, M., and Tucci-Piergiovanni, S. (2020).
Rational vs Byzantine players in consensus-based blockchains. In Proceedings of the
19th International Conference on Autonomous Agents and MultiAgent Systems, AA-

MAS ’20, page 43–51, Richland, SC. International Foundation for Autonomous Agents
and Multiagent Systems.

Arnosti, N. and Weinberg, S. M. (2022). Bitcoin: A natural oligopoly. Management

Science, 0(0).

Benhaim, A., Falk, B. H., and Tsoukalas, G. (2021). Scaling blockchains: Can elected
committees help? DecisionSciRN: Other Decision-Making in Computational Design &

Technology (Topic).

28

Biais, B., Bisi`ere, C., Bouvard, M., and Casamatta, C. (2019). The blockchain folk

theorem. Review of Financial Studies, 32(5):1662–1715.

Bloembergen, D., Grossi, D., and Lackner, M. (2019). On rational delegations in liquid

democracy. Proceedings of the AAAI Conference on Artiﬁcial Intelligence, 33(1):1796–
1803.

B¨orgers, T. (2004). Costly voting. American Economic Review, 94(1):57–66.

Br¨unjes, L., Kiayias, A., Koutsoupias, E., and Stouka, A.-P. (2020). Reward sharing
schemes for stake pools. In 2020 IEEE European Symposium on Security and Privacy

(EuroS&P), pages 256–275.

Castanheira, M. (2003). Victory margins and the paradox of voting. European Journal

of Political Economy, 19(4):817–841.

Chatzigiannis, P., Baldimtsi, F., Griva, I., and Li, J. (2022). Diversiﬁcation across mining
pools: optimal mining strategies under pow. Journal of Cybersecurity, 8(1). tyab027.

Chen, X., Papadimitriou, C., and Roughgarden, T. (2019). An axiomatic approach to
block rewards. In Proceedings of the 1st ACM Conference on Advances in Financial

Technologies, AFT ’19, page 124–131, New York, NY. Association for Computing Ma-
chinery.

Cheung, Y. K., Leonardos, S., Piliouras, G., and Sridhar, S. (2021). From grieﬁng to

stability in blockchain mining economies. CoRR, abs/2106.12332.

Chitra, T. and Kulkarni, K. (2022). Improving proof of stake economic security via mev

redistribution.

Cong, L. W., He, Z., and Li, J. (2020). Decentralized mining in centralized pools. The

Review of Financial Studies, 34(3):1191–1235.

Cousaert, S., Xu, J., and Matsui, T. (2021).

SoK: Yield aggregators in DeFi.

https://arxiv.org/pdf/2105.13891.pdf.

David, B., Gaˇzi, P., Kiayias, A., and Russell, A. (2017). Ouroboros praos: An adaptively-
secure, semi-synchronous proof-of-stake protocol. Cryptology ePrint Archive, Report
2017/573.

Dinsdale-Young, T., Magri, B., Matt, C., Nielsen, J. B., and Tschudi, D. (2019). Afgjort:
A partially synchronous ﬁnality layer for blockchains. Cryptology ePrint Archive, Re-

port 2019/504.

29

Fisch, B., Pass, R., and Shelat, A. (2017). Socially optimal mining pools. In R. Devanur,
N. and Lu, P., editors, Web and Internet Economics, pages 205–218, Cham. Springer
International Publishing.

Gersbach, H. (2009). Democratic mechanisms. Journal of the European Economic Asso-

ciation, 7(6):1436–1469.

Gersbach, H., Mamageishvili, A., and Schneider, M. (2021a). Vote delegation and mis-
behavior. In Caragiannis, I. and Hansen, K. A., editors, Algorithmic Game Theory -
14th International Symposium, SAGT 2021, Aarhus, Denmark, September 21-24, 2021,

Proceedings, volume 12885 of Lecture Notes in Computer Science, page 411. Springer.

Gersbach, H., Mamageishvili, A., and Tejada, O. (2021b). The eﬀect of handicaps on

turnout for large electorates with an application to Assessment Voting. Journal of
Economic Theory, 195:105228.

Goodman, L.

(2014).

Tezos — A self-amending crypto-ledger white paper.

https://tezos.com/whitepaper.pdf.

Halaburda, H., He, Z., and Li, J. (2021). An economic model of consensus on distributed

ledgers. Working Paper 29515, National Bureau of Economic Research.

Hayden Adams, Noah Zinsmeister, D. R.

(2020).

Uniswap

v2

core.

https://uniswap.org/whitepaper.pdf.

Herrera, H., Morelli, M., and Palfrey, T. (2014). Turnout and power sharing. Economic

Journal, 124(574):F131–F162.

John, K., Rivera, T., and Saleh, F. (2020).

Economic implications of scaling
blockchains: Why the consensus protocol matters. https://ssrn.com/abstract=3750467
or http://dx.doi.org/10.2139/ssrn.3750467.

Kiayias, A., Koutsoupias, E., Kyropoulou, M., and Tselekounis, Y. (2016). Blockchain
mining games. In Proceedings of the 2016 ACM Conference on Economics and Compu-

tation, EC ’16, page 365–382, New York, NY. Association for Computing Machinery.

Kiayias, A., Russell, A., David, B., and Oliynykov, R. (2017). Ouroboros: A prov-
ably secure proof-of-stake blockchain protocol. In Katz, J. and Shacham, H., editors,

Advances in Cryptology - CRYPTO 2017 - 37th Annual International Cryptology Con-
ference, Santa Barbara, CA, USA, August 20-24, 2017, Proceedings, Part I, volume

10401 of Lecture Notes in Computer Science, pages 357–388. Springer.

Lamport, L., Shostak, R., and Pease, M. (1982). The Byzantine generals problem. ACM

Transactions on Programming Languages and Systems, 4(3):382–401.

30

Ledyard, J. O. (1984). The pure theory of large two-candidate elections. Public Choice,

44(1):7–41.

Leonardos, N., Leonardos, S., and Piliouras, G. (2019). Oceanic games: Centralization

risks and incentives in blockchain mining. In Pardalos, P. M., Kotsireas, I. S., Guo, Y.,
and Knottenbelt, W. J., editors, Mathematical Research for Blockchain Economy, 1st

International Conference, MARBLE 2019, Santorini, Greece, May 6-9, 2019, pages
183–199. Springer.

Leonardos, S., Reijsbergen, D., and Piliouras, G. (2020). Weighted voting on the

blockchain: Improving consensus in proof of stake protocols.
of Network Management, 30(5):e2093.

International Journal

Lewenberg, Y., Bachrach, Y., Sompolinsky, Y., Zohar, A., and Rosenschein, J. S. (2015).
Bitcoin mining pools: A cooperative game theoretic analysis. In Proceedings of the 2015
International Conference on Autonomous Agents and Multiagent Systems, AAMAS

’15, page 919–927, Richland, SC. International Foundation for Autonomous Agents
and Multiagent Systems.

Nakamoto,

S.

(2008).

Bitcoin:

A peer-to-peer

electronic

cash system.

https://bitcoin.org/bitcoin.pdf.

Osgood, R.

(2016).

The

future

of

democracy:

Blockchain

voting.

https://www.cs.tufts.edu/comp/116/archive/fall2016/rosgood.pdf.

Palfrey, T. R. and Rosenthal, H. (1983). A strategic calculus of voting. Public Choice,

41(1):7–53.

Schrijvers, O., Bonneau, J., Boneh, D., and Roughgarden, T. (2017).

Incentive com-
patibility of bitcoin mining pool reward functions. In Grossklags, J. and Preneel, B.,

editors, Financial Cryptography and Data Security, pages 477–498, Berlin, Heidelberg.
Springer Berlin Heidelberg.

Wood, G. (2016).

Polkadot: Vision for a heterogeneous multi-chain framework.

https://polkadot.network/PolkaDotPaper.pdf.

Yakovenko, A. (2017). Solana: A new architecture for a high performance blockchain

v0.8.13. https://solana.com/solana-whitepaper.pdf.

31

