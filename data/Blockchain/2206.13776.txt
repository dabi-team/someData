2
2
0
2

n
u
J

8
2

]

C
D
.
s
c
[

1
v
6
7
7
3
1
.
6
0
2
2
:
v
i
X
r
a

A Scalable Blockchain-based Smart Contract Model
for Decentralized Voltage Stability Using Sharding
Technique

1st Kimia Honari
University of Alberta
honari@ualberta.ca

2nd Xiaotian Zhou
University of Alberta
xzhou9@ualberta.ca

3rd Sara Rouhani
University of Manitoba
sara.rouhani@umanitoba.ca

4th Scott Dick
University of Alberta
sdick@ualberta.ca

5th Hao Liang
University of Alberta
hao2@ualberta.ca

6th Yunwei Li
University of Alberta
yunwei1@ualberta.ca

7th James Miller
University of Alberta
jimm@ualberta.ca

1 Abstract—Blockchain technologies are one possible avenue
for increasing the resilience of the Smart Grid, by decentralizing
the monitoring and control of system-level objectives such as
voltage stability protection. They furthermore offer beneﬁts in
data immutability and traceability, as blockchains are crypto-
graphically secured. However, the performance of blockchain-
based systems in real-time grid monitoring and control has never
been empirically tested. This study proposes implementing a
decentralized voltage stability algorithm using blockchain-based
smart contracts, as a testbed for evaluating the performance
of blockchains in real-time control. We furthermore investigate
sharding mechanisms as a means of improving the system’s
scalability with ﬁxed computing resources. We implement our
models as a proof-of-concept prototype system using Hyperledger
Fabric as our blockchain platform, the Matpower library in
MATLAB as our power system simulator, and Hyperledger
Caliper as our performance evaluation tool. We found that
sharding does indeed lead to a substantial improvement in system
scalability for this domain, measured by both transaction success
rates and transaction latency.

Index Terms—Blockchain, Decentralized Voltage Stability, Per-

formance Evaluation, Sharding Mechanism.

I. INTRODUCTION

The ongoing development of the Smart Grid is putting
increasing pressure on the monitoring and control systems
that keep it stable. Renewable generation, for instance, is a
growing part of our energy mix - but its intermittency demands
rapid, real-time control actions to preserve voltage stability.
Likewise, distributed generation and micro-generation further
complicate the Smart Grid landscape. Meanwhile,
the de-
ployment of Intelligent Electronic Devices (lEDs) and Phasor
Measurement Units (PMUs) - meant to enable ﬁne-grained
monitoring and control of the grid - has in turn created a
tsunami of sensor data that threatens to overwhelm centralized
control systems. Therefore, several studies have investigated
distributed monitoring and control systems, in order to mit-
igate data volumes. This implies that the distributed control

algorithms will principally operate on localized voltage mea-
surements, but must still ensure system-level stability [1] [2]
[3] [4].

Blockchain technology and smart contracts are one possible
approach to creating a decentralized IT infrastructure for the
Smart Grid. In the past few years, there have been studies
applying blockchains to various elements of the Smart Grid
ecosystem. Some previous studies have investigated using
smart contracts to provide ancillary services by tracking and
managing energy distribution in the network [5] or organizing
some DERs to act as voltage regulators and curtail
their
individual power outputs [6]. A few studies also focused on
scheduling and trading energy among Energy Storage Units
(ESUs) to minimize grid ﬂuctuations [7] [8]. However, none
of these studies have investigated or evaluated the capability
and performance of blockchain as a real-time control system
for complex objectives, using PMUs as the data sources. In the
current paper, we design such a system for distributed voltage
stability control. We have implemented an existing distributed
voltage-stabilty control algorithm (DVS [1]) as a collection
of smart contracts operating on a permissioned blockchain.
This is in contrast to the original implementation, which was
built on the Distributed Coordination Blocks (DCBlocks) [9]
framework, which is a classic distributed-computing platform.
In addition, we propose a new transaction processing model
based on the sharding technique to tackle the performance
and scalability requirements of the Smart Grid. In this model,
by growing the smart grid network, one or multiple local
controllers can be assigned to different shards within the
network, and a committee will be selected for each shard.
This allows many more transactions to be processed in parallel
at the same time, further improving the performance of the
system. We used Hyperledger Fabric [10] to implement and
evaluate our proposed model. For the Power ﬂow simulation,
we used the Matpower package 2 [11] in Matlab. We analyzed

1The paper is accepted as a regular paper in IEEE Blockchain Conference

2022

2https://matpower.org/

 
 
 
 
 
 
the performance of our implementation using the Hyperledger
Caliper benchmarking tools [12], ﬁnding that our solution
scales linearly with the number of shards compared to an un-
sharded approach. To the best of our knowledge, this is the ﬁrst
study that presents a practical, scalable decentralized voltage
stability algorithm based on blockchain technology.

The remaining of this paper is organized as follows. In
section II, we provide essential background in voltage stability
and describe the DVS algorithm. In section III, we discuss
the design of our smart contracts and the proposed model
architecture on blockchain. Then we describe our second
proposed model
incorporating the sharding mechanism. In
section IV, we describe our experimental methodology and
results. Finally, we offer a summary and discussion of future
work in section V.

II. DECENTRALIZED VOLTAGE STABILITY (DVS)
ALGORITHM

In the electric power grid, power demand (load) must be less
than or equal to the total available power. If the load in a given
region exceeds the available power and no corrective actions
are taken, the area voltages will become unstable and even
collapse. This can severely damage electric systems, and so the
response is to cut off the power ﬂow to that region completely,
resulting in a blackout. Voltage collapse or instability is a
dynamic circumstance involving many nonlinear power system
components, on a time scale that can range from seconds to
hours [13].

Nowadays, ensuring voltage stability is a challenge due
to the increasing number of renewable sources, increasing
loads, environmental limitations on power system expansion,
and high competition in the energy market. Voltage stability
maintenance is an active process, which can be organized in a
centralized or decentralized fashion. In the centralized voltage
stability algorithms, a control center monitors the state of the
power grid (or a subregion), commonly represented as one
or more voltage stability indexes. These indexes essentially
capture the grid’s current safety margin against a voltage
collapse. When stability is threatened (the indices approach
dangerous values), the control center intervenes. Stored power
from capacitors (purposefully charged for such needs) could
be released,
large-scale power customers might see large
machines idled (such load-shedding contracts are common in
energy markets), or additional generation may be brought on-
stream. However, the volume and velocity of data received
at the control center means that it may not react swiftly to
instabilities in a smaller region. Decentralized algorithms, on
the other hand, should be able to react much more swiftly to
local instabilities. In this case, a voltage stability index would
be calculated just for a limited area of responsibility, implying
a far lower volume of data. The challenge, of course, is that
a local algorithm will have far fewer resources available to
address any instability. A mechanism for escalating interven-
tions so as to call on resources beyond the local area will be
needed [1].

Several studies have proposed or investigated different de-
centralized monitoring and control techniques, but none of
them used blockchain and smart contracts [14] as a distributed
computing platform. Blockchain in this kind of system can
increase trust, security, transparency, and the traceability of
data shared across a power system network. We furthermore
hypothesize that it provides a robust computational framework
to implement local and distributed voltage stability algorithms.
To test this hypothesis, we will implement one such algorithm
as a set of blcokchain-based smart contracts. From the existing
literature, we select the DVS algorithm [9]. First proposed in
2016, DVS includes both monitoring and control algorithms
in their architecture. The authors validated the algorithm in
simulations using the IEEE 30, 57, 118, and 300 bus topologies
[1] (these are standardized power network simulations, with a
varying number of connnections, used as research testbeds in
power delivery systems research. Physically implementing and
testing a new algorithm on the actual power grid is obviously
inadvisable, and physical laboratory testbeds are either too
simple to replicate actual power-system dynamics, or else
prohibitively expensive.) The DVS algorithm is as follows:
Initial Grouping and Group Formation:

The DVS algorithm starts with an initial grouping method,
which splits the power system grid and resources into multiple
small groups. Each group is a set of nodes or substations
aggregated based on their electric distance and network sen-
sitivity. The substations or nodes in our blockchain-based
model are able to instantiate smart contracts. They record and
emit synchrophasor measurements from phasor measurement
units (PMUs) to compute voltage stability indices [15] [16].
They can take control actions based on those measurements,
using local reactive power sources or Volt Var Compensators
(VVCs). At a minimum, each group is assumed to have a few
reactive power sources or VVCs available, as well as at least
one transmission line and load and generator.

The buses in the local group can be classiﬁed into one of
three categories: load bus, tie or boundary bus, and generation
bus. Load buses have a load connected to them. Generation
buses have power sources or generators, and the tie buses are
the interconnections among groups. For simplicity, they split
each tie line in half and replace it with either a virtual load
bus (virtual PQ bus) or a virtual generator (virtual PV bus)
based on the power ﬂow direction to represent power grid
connections outside of the local group.
DVS Monitoring Algorithm:

The DVS monitoring algorithm estimates a voltage sta-
bility index (VSI) using the proposed Thevenin’s Equivalent
approach in [15]. The equivalent voltage and impedance are
calculated based on each group’s information for representing
the external system connected to each load bus. First, they
create an admittance matrix for each group for representing the
network topology. Equation (1) shows the admittance matrix,
in which the G denotes generation bus, L represents Load bus,
and T shows the tie bus. Therefore, YGL, YGT , YT L, YT T ,
YT G, and YLL are the admittances between generator to load,
generator to tie line, tie line to load, tie line to tie line, tie line

to generator, and load to load, respectively.

Y =





YGL YGT YGG
YT G
YT L YT T
YLG
YLL YLT





Zth = ZLL = (YLL − YLT Y −1

T T YT L)−1

Vthj = ((

)∗ ∗ Zthj ) − VLj

SLj
VLj
j = 1, ..., n n = number of load bus.
SLj = complex power f low out of bus j.
VLj = voltage magnitude of load bus j.

(1)

(2)

(3)

Thevenin’s parameters are calculated using equations (2)
and (3). The Vth (voltage equivalent) and Zth (equivalent
impedance) are then used to approximate maximum active
power (Pmax), maximum reactive power (Qmax), and max-
imum complex power (Smax) for each load bus [15]. (Recall
that alternating current power follows a sine-wave pattern,
which is analyzed using complex values; reactive power is the
imaginary component of the complex power vector.) Similary,
(Pload, Qload, Sload) are the real, reactive, and complex power
values of load at each bus, respectively (please refer to [15] for
a detailed derivation). Using calculated maximum power for
each bus, the VSI for each load bus is calculated as follows:

V SI = M in(

Pmax − Pload
Pmax

,

Qmax − Qload
Qmax

,

Smax − Sload
Smax

).

(4)

The VSI for each bus is used in the DVS algorithm to detect
buses with a weak stability margin; the DVS control algorithm
is then used to prevent voltage collapse.
DVS Control Algorithm:

When a bus is found to have a weak stability margin,
additional reactive power from the closest source (in terms
of electrical distance) is injected into the network. In this
algorithm, a Priority Index (PI) matrix is ﬁrst formed for each
group using the admittance matrix. The PI matrix represents
an electrical distance between buses and helps to ﬁnd the
closest VVCs to the weak bus. Based on this matrix, the top
priority is given to a VVC directly connected to the weak
bus; and the next set of priorities is given to reactive power
sources based on the ascending ranking of electrical distance.
After selecting the closest reactive power, the required reactive
power to adequately raise the stability margin at the weak
bus is calculated using the Jacobian Matrix. In Equation (5),
Vreq is the minimum acceptable voltage, Qreqis the required
reactive power, and VW eakBus is the voltage magnitude of the
weak bus.

Qreq =

δQ
δV

∗ (Vreq) − VW eakBus).

(5)

The δQ
δV term represents the sensitivity of the bus where the
VVC is located versus the weak bus. In the DVS algorithm,
the chain rule is used to calculate the sensitivity of buses that
are not directly connected to the weak bus. If needed, the
control algorithm may run multiple times to compensate for
the voltage stability at the target bus. If the DVS algorithm
cannot ﬁnd enough reactive power sources within the group
to correct the stability margin, it then merges the group with
an adjacent group, and calls on that group’s resources as well.
This process will continue, drawing in resources from a wider
and wider area until enough additional power is injected to
restore stability.

III. BLOCKCHAIN-BASED SMART CONTRACT DESIGN FOR
DVS ALGORITHM

Blockchain technology offers security, traceability, decen-
tralization, and immutability; characterisitcs which can lever-
aged in implmenting the DVS algorithm. The blockchain
model provides a secure platform for each group to com-
municate with each other and reach a consensus on what
buses require control action, and how best to organize the
same. Utilizing smart contracts enables us to automate these
procedures,
thus reacting faster to voltage instabilities; as
noted previously, a voltage collapse can potentially happen
in just seconds. At
the security and im-
the same time,
mutability of the blockchain offer enhanced protection and
auditability for critical infrastructure. While other authors have
explored blockchain systems in the past, they either do not use
blockchain as a platform for decentralized voltage stability, or
neglect the performance of their consensus mechanism if they
do [9].

This study proposes and evaluates a blockchain-based smart
contract model to implement the DVS algorithm. We fur-
thermore address scalability; plainly,
in a large-scale grid
there will be many groups, and transactions between groups.
The blockchain network underlying the grid could thus be
overloaded. Therefore, we designed a sharding solution for
our blockchain-based DVS algorithm. We formally discuss the
design of our model for the sharding mechanism based on
two consensus levels: shard-level consensus and mainchain
consensus. This section will elaborate on our blockchain-
based approach and workﬂow and then describe our sharding
mechanism to improve scalability.

A. Workﬂow

In this subsection, we discuss the entire workﬂow of our
proposed framework and elaborate on the network topology
and smart contract details for DVS monitoring and control
algorithms. Firstly, we categorize the participants in our net-
work, following the notation in Fig. 1.

Clients:
We assume that multiple PMU devices are distributed inside
each group for measuring phasor quantity. PMU devices
estimate the magnitude and phase angle of an electrical phasor
quantity such as voltage or current in the power grid. PMUs
can report high temporal resolution measurements, up to 120

Initial grouping: In our prototype system, we assume that
all admittance values are constant, and the system’s topology
will not change; therefore, this transaction will be executed
once during the initializing of the network. The admittance
matrix, Priority Index matrix, and the constant part of the
Jacobian matrix are calculated through Matlab libraries, and
their data are recorded for each group and combination of
groups on the ledger. Note, however, that these values would
change if the topology of the network changed.

ComputeVSI: This transaction receives the data of PMU
measurements and uses the DVS algorithm to calculate the
VSI for each load bus. Then the VSI values are sorted via
the shell sort algorithm, and if the minimum VSI is less than
the speciﬁed threshold, the LocalController transaction will be
called. This transaction also reads information from the ledger,
such as the impedance values of the local group determined
during the initial grouping. Algorithm 1 shows the pseudo-
code of ComputeVSI.

Algorithm 1 ComputeVSI

1: Input: PMU measurements, GroupId
2: Impedance= Retrieve the data from the ledger(GroupId)
3: Calculate Vth and Zth for each load bus (3)(4)
4: Calculate VSI for each load bus (5)
5: Sort VSI ascending
6: if V SI[0] ≤Threshold then
Call LocalController
7:
8: else
9:
10:
11:
12: end if

if mergedgroup == true then

Split the group

end if

LocalController: This transaction will be called inside
of ComputeVSI to calculate the required reactive power to
stabilize a weak bus, and activate VVCs to deliver it. The steps
of this transaction are shown in Algorithm 2. It ﬁrst retrieves
the PI and Jacobian matrix from the ledger. Then it ﬁnds
the electrically closest VVC to the weak bus and calculates
the required reactive power. Two libraries (Jacobian, and List)
were developed to help implement the DVS algorithm on smart
contracts. The ﬁrst one is used to calculate Jacobian Values
with real-time voltage angle and magnitude, and the second
one is used to ﬁnd the top priority buses using the PI matrix. In
the end, we save the amount of reactive power that is injected
into the bus on the ledger. This data can be used to calculate
the amount of money that we owe to each source, or predict
the amount of power we may need in the grid in different
periods, allowing us to actively prevent voltage collapse.

GlobalController: Suppose the LocalController transaction
cannot ﬁnd enough power resources. In that case, the system
will call this transaction to ﬁnd an adjacent group with addi-
tional available resources, and send control actions to merge
the data of these two groups. After that, the ComputeVSI and
LocalController will be called on the merged data until the
weak bus is stabilized. Once this is accomplished, the two

Fig. 1. Blockchain based architecture for the DVS algorithm - without
sharding mechanism.

Hz [17]. Several papers investigated the optimal location of
PMUs when the number of PMUs is limited [18] [19], which
is out of the scope of this paper.

In order to gather measurements, we assume one or multiple
computing devices are responsible for aggregating the PMUs
measurement in each group and instantiating relative smart
contracts through the Fabric SDK. The Hyperledger Fabric
SDK allows applications to interact with a Fabric blockchain
network via a simple API to submit transactions to the ledger
or query the recorded data with minimal code. Furthermore,
the reactive power sources and VVCs are also connected to the
network and update their available resources on the ledger for
control actions. In the case of need, smart contracts can send
a control action to activate or deactivate VVCs on the grid.
For simulating the client-side, we use the Matpower library in
Matlab to run optimal power ﬂow and inject reactive power
to each bus. For interacting with Fabric SDK, the related data
of each group is converted to JSON. Then the data is sent via
an HTTPS request to the RESTful Web-service to submit or
query a transaction on the ledger.

Organization and Peers:
The HyperLedger Fabric blockchain network is built up
from the peers owned and contributed by the different orga-
nizations. Each organization can have one or multiple peers
responsible for various tasks and offering API services for
clients. The smart contracts are executed on the peers, and
peers maintain copies of the ledger. We assigned one or
multiple peers to each group.

Committee Peers:
Members of the committee are responsible for evaluating
and validating every task and data during consensus. In a
network with no sharding mechanism, we assume all peers
in the blockchain network are responsible for validating and
endorsing every executed task.

The Clients can instantiate and submit different transactions
on the network, as managed by the smart contracts. We have
implemented four primary tasks of the DVS algorithm as smart
contracts:

PMUAggregatorSVCsPMUPMUGroupClient:Client:send measurementreceive controlactionsBlockchain NetworkValidation and CommitGenesisBlock#B1#B2.............peerpeerpeerpeerpeerpeerOrg 1Org 2Org 3ValidatingEntityCommittee Peers: Algorithm 2 LocalController

1: Input: WeakBus, Resources, GroupId
2: PI, Jacobian= Retrieve the data from the ledger(GroupId)

3: w=WeakBus
4: Calculate δQw
δVw
5: Calculate Q req (6)
6: if
7:
8: else
9:
10:
11:
12:
13:

resource available at WeakBus then
Activate a VVC at WeakBus

List= Create PI list
while List is not Empty do
i=List.GetNextPriority()
Calculate δQi
δVw
Calculate Q req (6)
if Resource available at Bus i then

Activate a VVC at Bus i
Break

14:
15:
16:
17:
18:
19: end if
20: Save VVC index, Q req,and GroupId on the ledger

end if
end while

groups will again be split. In merging the groups, we consider
that one of the group aggregator devices is responsible for
aggregating all PMUs of two groups.

B. Sharding Mechanism

Adding sharding to the blockchain-based DVS allows scal-
ability by splitting the blockchain network into smaller sub-
groups. The DVS is a real-time control algorithm and needs to
react to each change in the power grid to prevent instability.
However, as the size of the power grid controlled by DVS
grows, it becomes likely that the many components of the grid
are in constant ﬂux. Hence, transaction volume and latency
can be serious issues, which may delay and thus undermine
DVS control actions in a rapidly-evolving voltage collapse.
The sharding mechanism is designed to reduce storage and
communication requirements while increasing throughput as
the number of shards increases (while the physical network
size remains constant) [20]. Sharding techniques and the
scalability of blockchains have been investigated in various
studies and applicaitons such as IoT networks [21], federated
learning [22] [23], and 6G networks [24]. Some of the studies
also proposed a new blockchain protocol and cross-shard
techniques such as RapidChain [25], and OmniLedger [26].

In this paper, we employed a sharding technique to make our
system more scalable and adoptable by expanding the network.
In this technique, instead of using all peers to endorse and
validate tasks in the system, we assign a smaller group of
committee peers for each shard. Each shard can be responsible
for validating shard level
transactions of one or multiple
adjacent groups. Fig. 2 provides an overview of our sharding
model.

Fig. 2. Blockchain based model architecture for the DVS algorithm - sharding
mechanism.

If we assign enough reactive sources for each load bus in
a group, the chance of solving the voltage stability problem
in each group will be increased. Therefore, we can split
transactions based on the importance and occurrence frequency
to shard level and mainchain level. Shard level refers to the
transactions executed and endorsed by a subset of peers in each
shard, and mainchain level refers to the transactions executed
by all peers in the network. At the mainchain level, we assume
that the global controller and all data related to the topology
of each group will be executed and validated by all peers or
a subset of peers assigned to every single group. This will
help to preserve high security for critical control actions and
access to the data of all groups without needing cross-shard
communication. The other transactions such as ComputeVSI
and LocalController, which occur within a single group, are
executed in the shard level consensus.

IV. EXPERIMENT

For our experiments, we seek to quantify what beneﬁt, if
any, is provided to our prototype system by implementing
sharding. Accordingly, we ﬁrst measure throughput and la-
tency without sharding, and then compare this with speciﬁc
levels of sharding; speciﬁcally, a model with two shards, and
a model with three shards.

We used Hyperledger Fabric 3 [10], a permissioned plat-
form, to implement these three models 4. The Fabric has a
modular and conﬁgurable architecture and supports plug-n-
play consensus and membership services. The execute-order-
validate architecture for transactions provided by Fabric allows
each peer to evaluate models in parallel within each shard, as

3https://hyperledger-fabric.readthedocs.io/en/release-2.2/
4https://github.com/Scalable-Blockchain-Systems/DVSCode

peerpeerpeerpeerpeerpeerValidatingEntitypeerpeerpeerpeerpeerpeerSelected Committee- shard2ValidatingEntityGenesisBlock#B2.............#B2PMUAggregatorSVCsPMUPMUGroup1send measurementreceive controlactionsPMUAggregatorSVCsPMUPMUGroup2send measurementreceive controlactionsSelected Committee- shard1TABLE I
EXPERIMENTAL CONFIGURATION

Component
Caliper Benchmark
Fabric peer
Matpower

Version
Caliper 0.4.2
Fabric 2.3.3
Matpower 7.1

CPU
Intel Core i7-9700K
Intel Core i7-9700K
Intel Core i7-9700K

GPU
GeForce RTX 2080 TI
GeForce RTX 2080 TI
GeForce RTX 2080 TI

RAM
62.8 GB
62.8 GB
62.8 GB

Disk (SSD)
500 GB (SSD)
500 GB (SSD)
500 GB (SSD)

Fig. 3. Send rate vs. system throughput (TPS) & Average response latency -
Fixed values: 3 worker over 8000 transactions - ComputeVSI transaction.

Fig. 4. Send rate vs. system throughput (TPS) & Average response latency -
Fixed values: 3 worker over 8000 transactions - ComputeVSI+LocalController
transactions.

opposed to most public blockchain platforms that have ﬁrst-
order transactions and execute them sequentially. Fabric also
provides communication through channels that is a private
layer of communication between two or more speciﬁc network
members such as organizations and peers. Each transaction
executed on a channel must be authenticated and authorized
by channel members to transact on that channel. Peers can
be members of multiple channels and perform channel related
operations.

Networks run locally on a single machine simulating a
Fabric test-network with a single orderer running Raft [27].
For the no-shard model, we consider six peers, each owned by
different organizations and a certiﬁcate authority. Every group
sends their requests to three different peers, and all peers are
responsible for validating and endorsing a transaction. In the 2-
shards model, we consider that each shard has three peers that

evaluate models in parallel within each shard. For the 3-shards
model, we consider each shard has two peers responsible for
validating each group’s requests. We implement two smart
contracts, one for ComputeVSI and local transactions called
VSIContract, and the other for handling Global Controler
called GlobalContract. The smart contract
is known as a
chaincode in Fabric and deployed to a speciﬁc channel. The
channels are used to simulate shards in the system, where
each channel operates independently with the ability to have
different membership and endorsement policies. All six peers
are a member of the ”mainchain” channel that we deployed
the GlobalContract smart contract on, and we deployed a
VSIContract to each shard channel.

For the power grid simulation, we applied the DVS algo-
rithm to the IEEE 30-bus network [28] (also used in [1]).

Fig. 5. Transaction number (txcnt) vs. System throughput (TPS) & Average
response latency - Fixed values: 3 worker with tps of 800 - ComputeVSI
transaction.

Fig. 6. Number of workers vs. System throughput (TPS) & Average response
latency - Fixed values: 8000 transaction with tps of 800 - ComputeVSI
transaction.

Following [1], we split the grid into three different groups and
save the admittance, PI matrix, and constant part of Jacobian
for each group on the ledger. We begin with a normal scenario,
with no voltage stability problems. We collected this normal
data for testing a ComputeVSI transaction with Hyperledger
Caliper. Then, we increase the load of some of the buses,
decreasing the stability margin to trigger the LocalController
transaction.

For evaluation, we used Hyperledger Caliper [12] which
is an open-source benchmarking tool allowing simulation of
various workloads for our system. An independent process is
responsible for sending a transaction with a speciﬁed conﬁg-
uration, and the system’s performance (latency, throughput,
success rate) is reported. We conducted tests with varying
numbers of workers, transactions numbers, and send rates
(TPS) to evaluate the limits of each model for ComputeVSI
and LocalController transactions. The experimental conﬁgura-
tion is summarized in Table I.

A. Result

The ComputeVSI transaction is the only transaction that
will be called multiple times every second (based on the
measurement frequency of the PMUs). In contrast, the Control

transaction will be called a few times when needed. Therefore,
most of the workload is run with the normal data, invoking
just the ComputeVSI transaction.

To test the maximum throughput achieved by our system,
we measure the send rate against the system throughput and
average latency one time with normal data and the other time
with unstable data. Fig. 3 shows the result for normal data
that just run the ComputeVSI transaction, and Fig. 4 shows
the result for unstable data that run both ComputeVSI and
LocalController transactions. These workloads are run with
3 Caliper workers over 8000 transactions. By increasing the
send rate, each model will reach a point that becomes saturated
and is unable to handle a higher send rate. As shown in the
ﬁgures, the no-shard model gets to this threshold sooner than
the sharding model.

To explore the limits of a usage surge, we tested the number
of transactions sent by the system with respect to throughput
and average latency. This workload is run with 3 caliper
workers and ﬁx sent rate (tps) of 800. Fig. 5 shows the
throughput and latency of this workload. As can be seen, the
result shows that the sharding model can signiﬁcantly improve
the overall throughput and latency.

Finally, we tested how the system handles concurrent re-

quests by running multiple workloads, varying the number
of caliper workers. This workload conﬁguration sends 8000
transactions with a send rate of 800 to measure the system
throughput and average latency. The number of caliper workers
allows us to scale the workload generation, and each worker
processes performs the actual workload generation in parallel
and independently of each other. As we can see in Fig. 6,
the throughput of the system has a general downward trend in
the system throughput with respect to the number of workers.
Similarly, we can see an upward trend in average latency. We
can see that the number of shards plays the most important
role for average latency due to these workloads being able to
operate in parallel across shards.

V. CONCLUSION AND FUTURE WORKS

We designed and implemented a scalable blockchain-based
DVS system to compute a voltage stability index and take
control actions in the electrical power system. Our smart
contracts regulate automatic computations of decentralized
DVS algorithm and manage resources in the electric power
system.

The experimental results demonstrate that permissioned
blockchains can handle a large number of power grid trans-
actions in a few seconds, and we can improve system perfor-
mance close to linearly with the addition of shards. This helps
address the scalability issue related to blockchain consensus
in a large-scale power grid network.

In future work, we will analyze the trace and pattern of
data associated with voltage collapse to identify potential
threats in the system, predict possible vulnerabilities in the
power system, and integrate automatic preventative action.
This will also provide data on the required number of reactive
power sources that need to be added to improve the grid’s
stability. Hence, we will
investigate the Machine learning
models and AI techniques integrated with our model to reduce
the complexity or give better intuition about the system.

REFERENCES

[1] H. Lee, A. K. Srivastava, V. V. Krishnan, S. Niddodi, and D. E. Bakken,
“Decentralized voltage stability monitoring and control with distributed
computing coordination,” IEEE Systems Journal, 2021.

[2] H. Mehrjerdi, S. Lefebvre, M. Saad, and D. Asber, “A decentralized
control of partitioned power networks for voltage regulation and pre-
vention against disturbance propagation,” IEEE Transactions on Power
Systems, vol. 28, no. 2, pp. 1461–1469, 2012.

[3] ——, “Coordinated control strategy considering effect of neighborhood
compensation for voltage improvement in transmission systems,” IEEE
Transactions on Power Systems, vol. 28, no. 4, pp. 4507–4515, 2013.

[4] J. Schiffer, T. Seel, J. Raisch, and T. Sezi, “Voltage stability and reac-
tive power sharing in inverter-based microgrids with consensus-based
distributed voltage control,” IEEE Transactions on Control Systems
Technology, vol. 24, no. 1, pp. 96–109, 2015.

[5] M. L. Di Silvestre, P. Gallo, M. G. Ippolito, R. Musca, E. R. Sanseverino,
Q. T. T. Tran, and G. Zizzo, “Ancillary services in the energy blockchain
for microgrids,” IEEE transactions on industry applications, vol. 55,
no. 6, pp. 7310–7319, 2019.

[6] P. Danzi, M. Angjelichinoski, ˇC. Stefanovi´c, and P. Popovski, “Dis-
tributed proportional-fairness control in microgrids via blockchain smart
contracts,” in 2017 IEEE International Conference on Smart Grid
Communications (SmartGridComm).

IEEE, 2017, pp. 45–51.

[7] M. Baza, M. Nabil, M. Ismail, M. Mahmoud, E. Serpedin, and M. A.
Rahman, “Blockchain-based charging coordination mechanism for smart
grid energy storage units,” in 2019 IEEE international conference on
blockchain (blockchain).

IEEE, 2019, pp. 504–509.

[8] X. Yang, G. Wang, H. He, J. Lu, and Y. Zhang, “Automated demand
response framework in elns: Decentralized scheduling and smart con-
tract,” IEEE Transactions on Systems, Man, and Cybernetics: Systems,
vol. 50, no. 1, pp. 58–72, 2019.

[9] H. Lee, S. Niddodi, A. Srivastava, and D. Bakken, “Decentralized volt-
age stability monitoring and control in the smart grid using distributed
computing architecture,” in 2016 IEEE Industry Applications Society
Annual Meeting.

IEEE, 2016, pp. 1–9.

[10] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin, K. Christidis,
A. De Caro, D. Enyeart, C. Ferris, G. Laventman, Y. Manevich et al.,
“Hyperledger fabric: a distributed operating system for permissioned
blockchains,” in Proceedings of the thirteenth EuroSys conference, 2018,
pp. 1–15.

[11] R. D. Zimmerman and C. E. Murillo-S´anchez, “Matpower 6.0 user’s

manual,” Power Systems Engineering Research Center, vol. 9, 2016.

[12] Hyperledger caliper. [Online]. Available: https://www.hyperledger.org/

use/caliper

[13] T. Van Cutsem and C. Vournas, “Voltage stability analysis of electric

power systems,” 1998.

[14] S. Rouhani and R. Deters, “Security, performance, and applications of
smart contracts: A systematic survey,” IEEE Access, vol. 7, pp. 50 759–
50 779, 2019.

[15] Y. Gong and N. Schulz, “Synchrophasor-based real-time voltage stability
index,” in 2006 IEEE PES Power Systems Conference and Exposition.
IEEE, 2006, pp. 1029–1036.

[16] S. S. Biswas, “Synchrophasor based voltage stability monitoring and
control of power systems,” Ph.D. dissertation, Washington State Univer-
sity, 2014.

[17] R. E. Wilson, “Pmus [phasor measurement unit],” IEEE Potentials,

vol. 13, no. 2, pp. 26–28, 1994.

[18] N. H. Abbasy and H. M. Ismail, “A uniﬁed approach for the optimal
pmu location for power system state estimation,” IEEE Transactions on
power systems, vol. 24, no. 2, pp. 806–813, 2009.

[19] D. Carrion and J. W. Gonzalez, “Optimal pmu location in electrical
power systems under n-1 contingency,” in 2018 International Conference
on Information Systems and Computer Science (INCISCOS).
IEEE,
2018, pp. 165–170.

[20] J. Xie, F. R. Yu, T. Huang, R. Xie, J. Liu, and Y. Liu, “A survey on the
scalability of blockchain systems,” IEEE Network, vol. 33, no. 5, pp.
166–173, 2019.

[21] W. Tong, X. Dong, Y. Shen, and X. Jiang, “A hierarchical sharding
protocol for multi-domain iot blockchains,” in ICC 2019-2019 IEEE
International Conference on Communications (ICC).
IEEE, 2019, pp.
1–6.

[22] E. Madill, B. Nguyen, C. K. Leung, and S. Rouhani, “Scalesﬂ: A
sharding solution for blockchain-based federated learning,” pp. 95–106,
2022.

[23] S. Yuan, B. Cao, M. Peng, and Y. Sun, “Chainsﬂ: Blockchain-driven
federated learning from design to realization,” in 2021 IEEE Wireless
Communications and Networking Conference (WCNC).
IEEE, 2021,
pp. 1–6.

[24] Y. Lu, X. Huang, K. Zhang, S. Maharjan, and Y. Zhang, “Low-latency
federated learning and blockchain for edge association in digital twin
empowered 6g networks,” IEEE Transactions on Industrial Informatics,
vol. 17, no. 7, pp. 5098–5107, 2020.

[25] M. Zamani, M. Movahedi, and M. Raykova, “Rapidchain: Scaling
blockchain via full sharding,” in Proceedings of the 2018 ACM SIGSAC
Conference on Computer and Communications Security, 2018, pp. 931–
948.

[26] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and
B. Ford, “Omniledger: A secure, scale-out, decentralized ledger via
sharding,” in 2018 IEEE Symposium on Security and Privacy (SP).
IEEE, 2018, pp. 583–598.

[27] D. Ongaro and J. Ousterhout, “In search of an understandable consensus
algorithm,” in 2014 USENIX Annual Technical Conference (Usenix ATC
14), 2014, pp. 305–319.

[28] O. Alsac and B. Stott, “Optimal load ﬂow with steady-state security,”
IEEE transactions on power apparatus and systems, no. 3, pp. 745–751,
1974.

