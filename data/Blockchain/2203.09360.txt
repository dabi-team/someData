IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

1

Behavior-aware Account De-anonymization
on Ethereum Interaction Graph

Jiajun Zhou, Chenkai Hu, Jianlei Chi, Jiajing Wu, Senior Member, IEEE,

Meng Shen, Member, IEEE, and Qi Xuan, Senior Member, IEEE

2
2
0
2

p
e
S
3
1

]
I
S
.
s
c
[

3
v
0
6
3
9
0
.
3
0
2
2
:
v
i
X
r
a

Abstract—Blockchain technology has the characteristics of
decentralization, traceability and tamper-proof, which creates a
reliable decentralized trust mechanism, further accelerating the
development of blockchain ﬁnance. However, the anonymization
of blockchain hinders market regulation, resulting in increasing il-
legal activities such as money laundering, gambling and phishing
fraud on blockchain ﬁnancial platforms. Thus, ﬁnancial security
has become a top priority in the blockchain ecosystem, calling for
effective market regulation. In this paper, we consider identifying
Ethereum accounts from a graph classiﬁcation perspective, and
propose an end-to-end graph neural network framework named
Ethident,
to characterize the behavior patterns of accounts
and further achieve account de-anonymization. Speciﬁcally, we
ﬁrst construct an Account Interaction Graph (AIG) using raw
Ethereum data. Then we design a hierarchical graph attention
encoder named HGATE as the backbone of our framework,
which can effectively characterize the node-level account features
and subgraph-level behavior patterns. For alleviating account
label scarcity, we further introduce contrastive self-supervision
mechanism as regularization to jointly train our framework.
Comprehensive experiments on Ethereum datasets demonstrate
that our framework achieves superior performance in account
identiﬁcation, yielding 1.13% ∼ 4.93% relative improvement
over previous state-of-the-art. Furthermore, detailed analyses
in identifying and un-
illustrate the effectiveness of Ethident
derstanding the behavior of known participants in Ethereum
(e.g. exchanges, miners, etc.), as well as that of the lawbreakers
(e.g. phishing scammers, hackers, etc.), which may aid in risk
assessment and market regulation.

Index Terms—Blockchain, de-anonymization, behavior pattern,
graph neural network, hierarchical graph attention, contrastive
learning.

I. INTRODUCTION

T HE past few years have witnessed the application of

blockchain technology in new technological and industrial
revolutions, such as cryptocurrency [1], ﬁnancial services [2],

J. Zhou and C. Hu are with the Institute of Cyberspace Security, College
of Information Engineering, Zhejiang University of Technology, Hangzhou
310023, China. E-mail: jjzhou@zjut.edu.cn, ckhu0122@gmail.com.

J. Chi is with the Hangzhou Research Institute of Xidian University,

Hangzhou 311231, China. E-mail: chijianlei@gmail.com.

J. Wu is with the School of Computer Science and Engineering, Sun Yat-sen
University, Guangzhou 510006, China. E-mail: wujiajing@mail.sysu.edu.cn.
M. Shen is with the School of Cyberspace Science and Technology, Beijing
Institute of Technology, Beijing 100081, China, and also with Peng Cheng
Laboratory (PCL), Shenzhen 518066, China. E-mail: shenmeng@bit.edu.cn.
Q. Xuan is with the Institute of Cyberspace Security, College of Information
Engineering, Zhejiang University of Technology, Hangzhou 310023, China,
with the PCL Research Center of Networks and Communications, Peng Cheng
Laboratory, Shenzhen 518000, China, and also with the Utron Technology
Co., Ltd. (as Hangzhou Qianjiang Distinguished Expert), Hangzhou 310056,
China. E-mail: xuanqi@zjut.edu.cn.
Corresponding author: Qi Xuan.

supply chain management [3], healthcare [4], etc. As a
distributed data storage technology, blockchain is decentralized,
traceable and tamper-proof, which guarantees the ﬁdelity
and security of data recording and generates trust without
a third-party notarization. Beneﬁting from these characteristics,
blockchain has attracted considerable attention and is best
known for its crucial role in the ﬁeld of digital cryptocurrencies,
such as Bitcoin and Ethereum. According to statistics from
market analysis sites such as CoinMarketCap1, as of August
2021, about 11,000 types of cryptocurrencies existed, with a
total market value of up to 1.9 trillion dollars.

However, blockchain has become a tempting target for
hackers and other cybercriminals due to its huge economic
value and anonymization. Each individual has a virtual identity
on blockchain unrelated to the real one, called pseudonym.
For instance, in the Ethereum system, the last 20 bytes of
the public key hash are used as the account address (i.e.,
pseudonym). However, while pseudonymous accounts protect
users’ privacy, it also provides shelter for illegal transactions,
making it difﬁcult for regulators to identify the culprit. At
present, the weak regulation of blockchain platforms has led to
endless ﬁnancial crimes such as money laundering, gambling
and phishing scams. In 2018, a statistical report published by
Kaspersky Lab showed that Ether is the most popular digital
asset for criminals, and the loss caused by illegal activities on
decentralized applications (DApps) has reached 900 million
dollars. Therefore, ﬁnancial security has become a top priority
in the blockchain ecosystem, and it is of great signiﬁcance to
study security strategies for public blockchain in application
scenarios such as risk assessment and market regulation.

A. Account Identiﬁcation vs. Address Clustering

Fortunately, the openness and transparency of blockchain
make access to block information without barriers. Recently,
existing related work has focused on using the public transac-
tion information to analyze the behavior patterns of accounts
and mine the identity information behind them, such as
exchanges, phishing scammers, miners and Ponzi schemes,
deriving several typical de-anonymization tasks, especially for
address clustering and account identiﬁcation. Fig. 1 shows an
illustrative example to explain the difference between address
clustering and account
identiﬁcation. From the deﬁnition
perspective, address clustering aims to partition the address set
observed in Bitcoin transactions into maximal address subsets
likely controlled by the same entity, i.e., re-identifying multiple

1https://coinmarketcap.com/

 
 
 
 
 
 
IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

2

sites is relatively scarce, resulting in a poor generalization of
supervised models.

C. Our Contributions

To tackle these challenges, we design a behavior-aware
Ethereum account identiﬁcation framework (Ethident) — an
end-to-end graph neural network model, to characterize the
behavior patterns of accounts and further achieve account
de-anonymization on Ethereum. Speciﬁcally, we ﬁrst collect
and collate large amounts of data involving transaction, smart
contract and public annotation of account identity from the
Ethereum-related platforms, and then construct an Account
Interaction Graph (AIG) and its lightweight version. Since the
large-scale account interaction graph is not feasible for full-
batch training of GNNs, we consider account identiﬁcation as
a subgraph-level classiﬁcation task, and extract neighborhood
subgraphs of target accounts from the complete interaction
graph, yielding micro interaction subgraphs, which allows for
mini-batch training of GNNs. To better capture the account
behavior patterns, we design a Hierarchical Graph ATtention
Encoder named HGATE as the backbone of our framework,
which can effectively characterize the node-level account
features and subgraph-level behavior patterns. Furthermore, we
introduce data augmentation and contrastive self-supervision
mechanism for account identiﬁcation to alleviate the label
scarcity that may lead to poor model generalization during
supervised learning. In this way, our framework jointly trains
the subgraph contrast and classiﬁcation tasks, achieving state-
of-the-art performance in account identiﬁcation. The main
contributions of this work are summarized as follows:

• Data collection: We construct the Account Interaction
Graph (AIG) using collected Ethereum data, and further
publish the subgraph datasets for account identiﬁcation
research on Ethereum.

• Scalability: We consider identifying Ethereum accounts
from a graph classiﬁcation perspective, and design sub-
graph sampling strategies to achieve scalable account
identiﬁcation.

• Powerful feature characterization: We propose a hi-
erarchical graph attention encoder named HGATE to
effectively characterize the node-level account features
and subgraph-level behavior patterns.

• Generalization: We establish a behavior-aware Ethereum
account identiﬁcation framework named Ethident2 which
integrates graph augmentation and self-supervision mech-
anisms, to alleviate the label scarcity and learn highly-
expressive behavior pattern representations.

• State-of-the-art performance: Extensive experiments on
Ethereum datasets demonstrate that our framework can
achieve state-of-the-art performance in account identiﬁca-
tion. We further analyze the behavior patterns of different
accounts and illustrate the superiority of our framework
in terms of performance, scalability and generalization.

2Data and code are available at https://github.com/jjzhou012/Ethident

Fig. 1. Illustration of the difference between account identiﬁcation and address
clustering.

addresses belonging to the same entity. Account identiﬁcation
aims to determine the identity type of the account by mining
the attributes and behavioral characteristics, i.e., attributing
the accounts to speciﬁc types. From the task paradigm, the
former can be regarded as an unsupervised clustering task,
while the latter is generally the supervised classiﬁcation task.
From the application perspective, a large number of existing
address clustering methods are usually designed according
to the characteristics of the Bitcoin system, and are usually
applied to Bitcoin rather than Ethereum due to their technical
differences [5]. While account identiﬁcation methods only rely
on general information such as transaction records on the
blockchain, as well as external technologies such as machine
learning and network science, thus showing better universality.

B. Challenges

In this paper, we focus on de-anonymizing Ethereum
accounts through account
identiﬁcation. Existing account
identiﬁcation methods mainly concentrate on manual feature
engineering [6]–[9] and graph analytics [10]–[13], which are
effective but suffer from several shortcomings and challenges.
First, manual feature engineering relies on the prior knowledge
of feature designers and is incapable of capturing the underlying
information in blockchain data, such as transaction patterns,
resulting in low feature utilization and unsound expressiveness.
In addition, manual features have weak reusability across
different blockchain platforms due to technical differences.
For example, Ethereum data has features associated with
smart contracts that Bitcoin does not, which greatly limits
the reusability of manual features. Second, graph analytics
relies on large-scale transaction graphs constructed from mass
blockchain data, resulting in high computational consumption
and time cost when applying graph random walks or graph
neural networks (GNNs). Meanwhile, the growing number
of transactions on the blockchain drives frequent updates in
the transaction graphs in terms of nodes and edges, which
is not conducive to full-graph learning. Lastly, the annotated
information of account identities published in the third-party

Address ClusteringThese addresses belonging to user A.These addresses belonging to exchange.Account IdentificationThis address behaves like a phishing scam.This address behaves like an exchange.Address ClusteringThese addresses belonging to user A.These addresses belonging to exchange B.Account IdentificationThis address behaves like a phishing scam.This address behaves like an exchange.IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

3

TABLE I
MAIN SYMBOLS USED IN THIS PAPER.

Symbol
G, g
v, V, E
N (i)
x, X
e
y, Y
h
s, g
z
fθ, fψ, fφ
α, β
a
Θ
T
L
N
h
K
λ

Deﬁnition
Graph, subgraph.
Node (account), node set, edge set.
1-hop neighbor set of node vi.
Node feature, node feature matrix.
Edge feature.
Account identity label, label set.
Hidden representation of node feature.
Subgraph representation before/after attentive pooling.
Projection representation of subgraph.
Encoder, prediction head, projection head.
Normalized attention scores.
Unnormalized attention scores.
Weight parameters.
Graph augmentation method.
Loss function.
Parameter: batch size.
Parameter: hop in subgraph sampling.
Parameter: number of sampled neighbors per hop.
Parameter: trade-off hyper-parameter in loss functions.

II. RELATED WORK

De-anonymization in blockchain has received considerable
attention for market analysis, abnormal behavior detection, and
law enforcement, deriving several mainstream techniques, such
as address clustering and account identiﬁcation.

A. Address Clustering

Early studies [14]–[20] mainly focus on address clustering,
also known as user re-identiﬁcation or entity recognition. Reid
et al. [16] proposed the ﬁrst heuristic for re-identiﬁcation,
named multi-input heuristic, which assumes that the input
addresses of a particular transaction are possessed by the same
entity. This heuristic is based on the fact that all private keys
associated with addresses must be used conjointly to sign a
transaction. Androulaki et al. [17] proposed the change address
heuristic, which assumes that a new “change” address created
by a transaction is likely controlled by the same entity that
created the transaction, and has also been applied in [14], [15].
This heuristic stems from the change characteristics of Bitcoin
that serves as a mechanism for enhancing user privacy. Martin
et al. [18] explored the reasons behind the effectiveness of
using the multi-input heuristic for address clustering. Cazabet
et al. [19] proposed to construct an identity hint network and
applied the Louvain algorithm [21] to detect communities
representing the sets of addresses belonging to the same entities.
The aforementioned address clustering methods are widely
used in Bitcoin. Robin [5] analyzed the feasibility of two
Bitcoin de-anonymization methods of IP linking and address
clustering on Ethereum, and concluded that these two methods
meet difﬁculties when applied to Ethereum due to technical dif-
ferences. Friedhelm [22] proposed three heuristics that exploit
patterns related to deposit addresses, multiple participation in
airdrops and token authorization mechanisms, and quantiﬁed

the feasibility of each heuristic over the ﬁrst four years of the
Ethereum. Shlomi et al. [23] assumed that the smart contract
code written by the same author has a unique style, and further
linked contract addresses with similar code styles together,
thinking that these addresses are generated by the same author.

B. Account Identiﬁcation

Thanks to the openness of blockchain transactions, as well
as the development of machine learning and network science,
a new class of de-anonymization strategies — account identi-
ﬁcation, has been proposed and comprehensively developed.
Existing account identiﬁcation methods mainly concentrate on
manual feature engineering and graph analytics.

1) Manual Feature Engineering: Manual feature engineering
extremely relies on the prior knowledge of feature designers.
Normally, the more expert experience involved, the more
reliable the manual features are. Toyoda et al. [6] extracted
seven statistical features such as the rate of bitcoin coinbase
transactions to infer account identities. Lin et al. [7] designed
various features associated with transaction timestamps and
analyzed the importance of each one. Bartoletti et al. [8]
designed the Gini coefﬁcient and the characteristics of possible
abnormal behavior patterns to infer the Ponzi accounts in
the transaction network. Marc et al. [24] designed a large
number of manual features associated with addresses, entities
and graph motifs in Bitcoin transaction networks, and classiﬁed
different Bitcoin entities via LightGBM [25]. In addition, some
emerging public blockchains contain smart contracts, providing
new features. Huang et al. [9] considered the calling information
of smart contracts to expand the feature space, and realized
the identiﬁcation of bot accounts in EOSIO.

2) Graph Analytics: Massive transaction data can be mod-
eled as graphs, and a considerable part of existing methods
regards account identiﬁcation as a classiﬁcation task from a
graph perspective. Li et al. [10] considered the topological
features of accounts and found the difference in topological
structure between the Ponzi accounts and the normal ones. Yuan
et al. [11] applied graph random walks such as DeepWalk [26]
and Node2vec [27] to learn account features in the transac-
tion graph. Wu et al. [28] performed graph random walks
by considering both the transaction amount and timestamp
information, proposing a novel embedding method named
Trans2Vec to extract the address feature for phishing detection.
Yuan et al. [29] extracted the subgraphs for each target account
and embedded their transaction topology via Graph2Vec [30].
Moreover, they introduced the SGN mechanism [31] to further
enhance the transaction structure embedding. Chen et al. [13]
also extracted transaction subgraphs and got the embeddings by
a graph convolution layer combining graph auto-encoder in an
unsupervised manner, ﬁnally achieving phishing detection by
LightGBM. Shen et al. [12] constructed the account interaction
graphs using Ethereum and EOSIO data, and proposed an end-
to-end graph convolution network model to identify different
categories of accounts or bots.

Besides the aforementioned methods, there are other frame-
works to achieve identity identiﬁcation. Phetsouvanh et al.
[32] proposed a graph mining technology to detect suspicious

IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

4

TABLE II
INFORMATION OF RAW ETHEREUM BLOCK DATA.

Data
Field
blockNumber
timestamp
from
to
fromIsContract
toIsContract
callingFunction
value

Custom
Symbol

d
v
v

f
w

Deﬁnition

The block ID where the transcation is located.
The timestamp of a transaction.
The account that initiates the transaction.
The account that receives the transaction.
Whether the transaction is sent by a CA.
Whether the transaction is received by a CA.
The name of function called if there is a contract call.
The transaction amount.

bitcoin ﬂows and accounts by analyzing the path length and
conﬂuence account of the directed subgraph. Zhang et al. [33]
introduced the concept of meta-path from the heterogeneous
network. This method deals with the bitcoin network from
both static and dynamic perspectives and can effectively detect
abnormal accounts and transactions.

III. ACCOUNT INTERACTION GRAPH MODEL

A. Problem Description

In this paper, we mainly focus on identifying accounts in
Ethereum via deep graph analytics, especially from a graph
classiﬁcation perspective. A transaction graph constructed from
blockchain transaction data is typically represented by a graph
G = (V, E, X, E, Y ), where V = {v1, v2, · · · , vn} is the set
of account nodes, E ⊆ {(vi, vj) | vi, vj ∈ V } is the set of
interaction edges, X ∈ Rn×F1 is the node feature matrix, and
E ∈ Rm×F2 is the edge feature matrix (we assume, |E| = m).
We use Y = {(vi, yi) | vi ∈ V } to represent the label set of
partial account nodes. The subgraph of an account node v can
be represented as gv ⊂ G. For the given transaction graph
G, subgraph-level account identiﬁcation is to learn a function
f (gv) (cid:55)→ y mapping the pattern of account subgraph gv to the
identity label y.

B. Ethereum and Block Data

Ethereum is the second-largest blockchain platform after
Bitcoin, and it allows users to conduct complex transactions
based on smart contracts, which are applications that run on
Ethereum virtual machines. An account in Ethereum is an
entity that owns Ether and can be divided into two categories:
Externally Owned Account (EOA) and Contract Account (CA).
EOA is controlled by a user who owns the private key of the
account, and can initiate transactions. CA is controlled by smart
contract code, which cannot initiate transactions actively and
can only be executed according to the pre-written smart contract
code after being triggered. Between Ethereum accounts, there
are usually two types of interactions: transaction and contract
call. The transaction must be initiated by EOA, and can be
received by EOA or CA. The contract call refers to the process
of triggering the smart contract code in CA to perform different
operations. The Ethereum blockchain is a succession of blocks,
and each block contains a set of transactions and contract calls.
The raw block data of Ethereum is structural and provides a
wealth of information, as listed in Table II.

Fig. 2. Constructing Account Interaction Graph and its lightweight version.

C. Account Interaction Graph

The raw block data is informative and provides the details
of transactions and contract calls, by which we can construct
an Account Interaction Graph (AIG), as deﬁned below.

(Account

Interaction Graph, AIG): a di-
Deﬁnition 1.
rected, weighted and heterogeneous multigraph G =
(Veoa, Vca, Et, Ec, Y ), where Veoa and Vca are the set of EOA
and CA respectively, Et = {(vi, vj, d, w) | vi, vj ∈ Veoa} is
the directed edge set constructed from transaction information,
and Ec = {(vi, vj, d, f ) | vi ∈ Veoa ∪ Vca, vj ∈ Vca} is the
directed edge set constructed from contract call information.
The three edge attributes d, w, f represent timestamp, value and
callingFunction respectively in Table II. The AIG is partially
labeled, i.e., a few EOA have identity labels y and can compose
the labeled node set Y = {(vi, yi) | vi ∈ Veoa}.

The original AIG is a heterogeneous multigraph that has
dense connections as well as different types of information
attached to nodes and edges, as shown in Fig. 2(a). The
heterogeneity and multiple edges signiﬁcantly increase the
complexity of information mining. So we further simplify the
AIG into a homogeneous and more sparse graph by interaction
merging and feature construction.

Deﬁnition 2. (Lightweight Account Interaction Graph, lw-
AIG): a directed, weighted and homogeneous graph G =
(Veoa, ˜Et, X, E, Y ), where ˜Et = {(vi, vj, t, ˜w) | vi, vj ∈ Veoa},
X is the node feature matrix constructed from contract call
information and E is the edge feature matrix. The edge attribute
t denotes the number of directed interactions from vi to vj, and
the edge attribute ˜w denotes total transaction amount from vi
to vj.

𝒕:𝟐෥𝒘:𝟎.𝟐𝟖𝒕:𝟐𝐶𝐴1𝐶𝐴2𝐶𝐴3𝒅:𝟏𝟒𝟒𝟓𝟔𝟑𝟐𝟑𝟖𝟐𝒘:𝟎.𝟐𝟑𝒅:𝟏𝟒𝟒𝟓𝟔𝟑𝟑𝟑𝟗𝟐𝒘:𝟎.𝟎𝟓𝒅:𝟏𝟒𝟒𝟓𝟔𝟑𝟑𝟕𝟖𝟖𝒘:𝟎.𝟖𝟖𝐸𝑂𝐴1𝐸𝑂𝐴2𝐶𝐴1𝐶𝐴2𝐶𝐴3𝐸𝑂𝐴1𝐸𝑂𝐴2𝒕:𝟏෥𝒘:𝟎.𝟖𝟖𝒕:𝟏𝒕:𝟏𝒕:𝟏𝐸𝑂𝐴1𝐸𝑂𝐴2210𝐶𝐴2011𝐶𝐴3𝐶𝐴1𝐸𝑂𝐴1𝐸𝑂𝐴2210011𝑡𝑤𝑓𝑑𝒕:𝟏𝒕:𝟏𝒕:𝟏𝒕:𝟐𝒕:𝟏෥𝒘:𝟎.𝟖𝟖𝒕:𝟐෥𝒘:𝟎.𝟐𝟖𝒕:𝟏෥𝒘:𝟎.𝟖𝟖𝒕:𝟐෥𝒘:𝟎.𝟐𝟖𝒕:𝟐෥𝒘:𝟎.𝟐𝟖𝒕:𝟐𝐶𝐴1𝐶𝐴2𝐶𝐴3𝒅:𝟏𝟒𝟒𝟓𝟔𝟑𝟐𝟑𝟖𝟐𝒘:𝟎.𝟐𝟑𝒅:𝟏𝟒𝟒𝟓𝟔𝟑𝟑𝟑𝟗𝟐𝒘:𝟎.𝟎𝟓𝒅:𝟏𝟒𝟒𝟓𝟔𝟑𝟑𝟕𝟖𝟖𝒘:𝟎.𝟖𝟖𝐸𝑂𝐴1𝐸𝑂𝐴2𝐶𝐴1𝐶𝐴2𝐶𝐴3𝐸𝑂𝐴1𝐸𝑂𝐴2𝒕:𝟏෥𝒘:𝟎.𝟖𝟖𝒕:𝟏𝒕:𝟏𝒕:𝟏𝐸𝑂𝐴1𝐸𝑂𝐴2210𝐶𝐴2011𝐶𝐴3𝐶𝐴1𝐸𝑂𝐴1𝐸𝑂𝐴2210011𝒕:𝟏𝒕:𝟏𝒕:𝟏𝒕:𝟐𝒕:𝟏෥𝒘:𝟎.𝟖𝟖𝒕:𝟐෥𝒘:𝟎.𝟐𝟖𝒕:𝟏෥𝒘:𝟎.𝟖𝟖𝒕:𝟐෥𝒘:𝟎.𝟐𝟖𝑡𝑤𝑓𝑑IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

5

Fig. 3. The architecture of Ethident. The complete workﬂow proceeds as follows: (1) sampling subgraphs centered on target accounts from lw-AIG; (2)
applying two augmentation operators on each subgraph to generate two correlated views; (3) encoding subgraphs and corresponding augmented views; (4)
optimizing the GNN encoder by jointly training subgraph contrast and classiﬁcation tasks.

1) Interaction Merging and Edge Feature Construction:
During interaction merging, as shown in Fig. 2(b), multiple
directed interactions (transactions or contract calls) from the
source account vi to the target account vj will be merged into
a single edge with a newly added edge attribute t representing
the number of merged interactions. For transactions, another
new edge attribute ˜w represents the total transaction amount of
merged interactions. In addition, a feature pruning operation
will take effect, removing the two raw edge attributes of
timestamp d and callingFunction f . Finally, we represent the
edge feature vector for arbitrary transaction edge (vi, vj) ∈ Et
as eij = [t, ˜w].

2) Node Feature Construction: The behavior characteristics
of an account are not only related to its transaction objects,
amount and frequency, but also to the smart contracts it calls.
Accounts with different behavior patterns have different calling
preferences for smart contracts. Therefore, we can construct
account features using the information on contract call, as
shown in Fig. 2(c). Speciﬁcally, let n and F be the number
of EOA and CA respectively in AIG, we can construct an
account feature matrix X ∈ Rn×F to represent the preference
for contract call, as formulated below:

X = [x1; · · · ; xi ; · · · ; xn](cid:62),
xi = [t1, · · · , tj , · · · , tF],

where

tj =

(cid:26) t
0

If there are t calls to vca
j ;
If there is no call to vca
j ;

(1)

Note that xi is the feature of veoa
we convert the AIG to a homogeneous lw-AIG.

i

. During feature construction,

In summary, the node features of the lw-AIG reﬂect the
contract call information, and the edge features reﬂect the
transaction information.

IV. METHODOLOGY
In this section, we provide the details of the proposed
framework Ethident, as schematically depicted in Fig. 3. For a
target account vi, the input of Ethident is the account interaction
subgraph gi sampled from lw-AIG, and the output is the predic-
tive identity label ˆyi. Our framework is mainly composed of the

Fig. 4. Subgraph sampling according to different edge information.

following components: (1) a subgraph extractor that captures
the micro interaction subgraphs centered on target accounts
from the lw-AIG topology; (2) a subgraph augmentation module
that generates a series of variant graph views using various
transformations on subgraphs; (3) a GNN encoder that encodes
the subgraphs as expressive representations via hierarchical
graph attention mechanism; (4) a training module that jointly
trains the subgraph contrast and classiﬁcation tasks. Next, we
describe the details of each component.

A. Subgraph Sampling

The raw data contains tens of millions of blocks, making AIG
a large-scale graph and not feasible for full-batch training of
GNNs. Even though the lightweight process greatly simpliﬁes
AIG, it still maintains a large number of EOA nodes. On
the other hand, existing account identiﬁcation methods based
on graph embedding or GNNs generally rely on full-batch
training, which restricts their scalability on large-scale graphs

EdgeFeatureAccount Subgraph𝐱𝑣𝑖𝐱𝐴𝐱𝐵𝐱𝐶NodeFeature𝐞𝐴−𝑣𝑖𝐞𝐵−𝑣𝑖𝐞𝐶−𝑣𝑖𝑣𝑖A∑𝑣𝑖𝐡𝑣𝑖…………∑𝑣𝑖𝐡𝐶𝐡𝐴𝐡𝐵Node-Level Attention𝐡𝑣𝑖𝐡𝐶𝐡𝐴𝐡𝐵Subgraph-Level Attentive Pooling𝐬𝑖𝐡𝑣𝑖𝐡𝐶𝐡𝐴𝐡𝐵𝐠𝑖Max PoolingLinear LayerLinear LayerPrediction HeadICO-WalletMinerExchangePhisher(a)(b)Neighbor Feature AlignmentA𝑣𝑖B𝑣𝑖C𝑣𝑖𝐱𝑗NodeContract InteractionEdge𝐞𝑖𝑗෤𝐱𝑗𝑣𝑖𝑣𝑖𝑣𝑖𝐡𝑣𝑖𝐡𝑣𝑖𝐡𝑣𝑖𝐡𝐴𝐡𝐵𝐡𝐶Softmax𝑒𝑖𝐴Account 𝑣𝑖is ?𝑒𝑖𝐵𝑒𝑖𝐶𝑎𝑖𝐴𝑎𝑖𝐵𝑎𝑖𝐶𝐡𝐴𝐡𝐵𝐡𝐶𝐶Graph Attention MechanismAttention WeightingAttentionScoringContextAggregation-concatenation-linear transformation𝑒-attention score𝑎-attention weight𝐶attentioncontext(c)𝛼𝛽(d)Neighborhood Feature𝐱-node feature𝐞-edge feature𝐱𝑖Hierarchical Attention MechanismAttentivePoolingMaxPoolingGATGAT𝐗𝐄𝐴YLinear𝐡0GAT𝐡1…𝐡𝑘−1𝐡𝑘𝐬𝐠PredictionInputAccount EncodingPattern EncodingOptimizationEncoder ArchitecturePrediction headEncoder𝑓𝜃𝑣𝑎𝑣𝑏𝑣𝑎𝑣𝑏SubgraphSampling𝑣𝑎𝑣𝑏GraphAugmentation𝑣𝑎𝑣𝑏𝒕𝟏: Edge Removing𝒕𝟐: Attribute Maskingො𝑔𝑎1=𝑇1(𝑔𝑎)ො𝑔𝑎2=𝑇2(𝑔𝑎)ො𝑔𝑏1=𝑇1(𝑔𝑏)ො𝑔𝑏2=𝑇2(𝑔𝑏)Encoder: encoding for views𝐠𝑎1, 𝐠𝑎2𝐠𝑏1, 𝐠𝑏2𝐠𝒂𝐠𝒃Encoder: encoding for identities𝒛𝑎1𝒛𝑏1𝒛𝑏2Projection Head𝐳𝐠𝑓𝜃𝑓𝜃𝑓𝜙Subgraph Contrast𝒛𝑎2Subgraph ClassificationPrediction Prediction Head[0.923,0.077]0.374,0.626... …𝑓𝜓𝐠ICO-WalletMinerExchangePhisherAccount𝑣𝑖is ?Account IdentificationLw-AIG𝑔𝑎𝑔𝑏𝑔𝑖ො𝑦𝐡𝑣𝑖𝐡𝑣𝑖′𝑓𝜓Hierarchical Graph Attention Encoder𝑣𝑖Subgraph Contrastive Learning26Amount: ෥𝑤223缩小后的图2162221Times: 𝑡avgAmount: ෥𝑤/𝑡Neighborhood of target account in lw-AIGTopKsampling according to different edge informationSubgraph of target accountIEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

6

Fig. 5. Schematic depiction of the hierarchical graph attention encoder (HGATE): (a) the pipeline of HGATE on account identiﬁcation; (b) the process of
neighbor feature alignment; (c) the illustration of graph attention mechanism; (d) the model architecture of HGATE.

for account representation learning. Thus, we consider account
identiﬁcation as a subgraph-level classiﬁcation task based on
the following facts: (1) different types of accounts have different
behavior patterns, implicit in their local structure; (2) subgraph
consisting of the target account and its local neighborhood
information (neighbors and their interactions) is informative
and plays a critical role in providing behavior patterns for
account identiﬁcation; (3) subgraph is the receptive ﬁeld of
the center target node, which is much smaller than the whole
graph and allows for mini-batch training.

In this work, we consider subgraph sampling that allows for
mini-batch training of GNNs on large-scale graphs. We perform
TopK sampling to obtain the h-hop interaction subgraphs
according to different edge information: Amount ( ˜w), Times
(t) or average Amount (avgAmount, ˜w/t). Speciﬁcally, for
a target account node vi, we sample top-K most important
neighbors based on one of the edge attributes, and again sample
top-K most important neighbors for each account sampled at
the previous hop, and recursive ones in the downstream hops.
The recursive sampling can be formulated as follows:

(cid:91)

Vk =

v∈Vk

1

−

topK (Nv, K, E [v, Nv, i]) , i ∈ {0, 1, 2},

(2)

where Vk is the set of nodes sampled at hop k and V0 = {vi},
Nv is the 1-hop neighbor set of node v, K is the number of
sampled neighbors per hop, E [v, Nv, i] is the edge attributes
of candidate interactions that guides the neighbor sampling, i
is an indicator of which edge attribute to use, and topK is the
function that returns the top-K most important nodes. After
h iterations, we obtain the account set Vi = ∪h
k=0Vk sampled

from lw-AIG, and the subgraph gi of target account vi can be
induced by Vi from the lw-AIG. Fig. 4 illustrates the process of
subgraph sampling according to different edge information. For
the labeled target account set Y , their corresponding subgraphs
form a dataset: D = {(gi, yi) | ∀ (vi, yi) ∈ Y }. Note that we
assign the label of the target account to the subgraph, and aim
to learn a function mapping the subgraph patterns to account
identity labels.

B. Encoder Architecture

The backbone of Ethident is the designed GNN encoder
named HGATE, which is capable of learning expressive
representations for accounts and their behavior patterns, as
schematically depicted in Fig. 5. This encoder learns account
and pattern embeddings via a hierarchical attention mechanism,
and can also implement account identiﬁcation independently
by following a prediction head, as shown in Fig. 5(a). Next,
we describe the details of our encoder fθ.

1) Neighbor Feature Alignment: For lw-AIG, its nodes and
edges are encoded according to contract call and transaction
information. Since our encoder is account-centric, each account
vi has its neighbor features that concatenate both neighboring
account features (xj) and the connecting interaction features
(eij), represented as [xj (cid:107) eij]. Here we need to perform a
column normalization on neighbor features to eliminate the
dimensional differences between different attributes. Note that
the target account feature xi ∈ RF and its neighbor features
[xj (cid:107) eij] ∈ RF +2 do not have the same dimension, so a linear
transformation and a nonlinear activation are performed to align
the feature dimension, as shown in Fig. 5(b). This procedure

EdgeFeatureAccount Subgraph𝐱𝑣𝑖𝐱𝐴𝐱𝐵𝐱𝐶NodeFeature𝐞𝐴−𝑣𝑖𝐞𝐵−𝑣𝑖𝐞𝐶−𝑣𝑖𝑣𝑖A∑𝑣𝑖𝐡𝑣𝑖…………∑𝑣𝑖𝐡𝐶𝐡𝐴𝐡𝐵Node-Level Attention𝐡𝑣𝑖𝐡𝐶𝐡𝐴𝐡𝐵Subgraph-Level Attentive Pooling𝐬𝑖𝐡𝑣𝑖𝐡𝐶𝐡𝐴𝐡𝐵𝐠𝑖Max PoolingLinear LayerLinear LayerPrediction HeadICO-WalletMinerExchangePhisher(a)(b)Neighbor Feature AlignmentA𝑣𝑖B𝑣𝑖C𝑣𝑖𝐱𝑗NodeContract InteractionEdge𝐞𝑖𝑗෤𝐱𝑗𝑣𝑖𝑣𝑖𝑣𝑖𝐡𝑣𝑖𝐡𝑣𝑖𝐡𝑣𝑖𝐡𝐴𝐡𝐵𝐡𝐶Softmax𝑒𝑖𝐴Account 𝑣𝑖is ?𝑒𝑖𝐵𝑒𝑖𝐶𝑎𝑖𝐴𝑎𝑖𝐵𝑎𝑖𝐶𝐡𝐴𝐡𝐵𝐡𝐶𝐶Graph Attention MechanismAttention WeightingAttentionScoringContextAggregation-concatenation-linear transformation𝑒-attention score𝑎-attention weight𝐶attentioncontext(c)𝛼𝛽(d)Neighborhood Feature𝐱-node feature𝐞-edge feature𝐱𝑖Hierarchical Attention MechanismAttentivePoolingMaxPoolingGATGAT𝐗𝐄𝐴YLinear𝐡0GAT𝐡1…𝐡𝑘−1𝐡𝑘𝐬𝐠PredictionInputAccount EncodingPattern EncodingOptimizationEncoder ArchitecturePrediction headEncoder𝑓𝜃𝑣𝑎𝑣𝑏𝑣𝑎𝑣𝑏SubgraphSampling𝑣𝑎𝑣𝑏GraphAugmentation𝑣𝑎𝑣𝑏𝒕𝟏: Edge Removing𝒕𝟐: Attribute Maskingො𝑔𝑎1=𝑡1(𝑔𝑎)ො𝑔𝑎2=𝑡2(𝑔𝑎)ො𝑔𝑏1=𝑡1(𝑔𝑏)ො𝑔𝑏2=𝑡2(𝑔𝑏)Encoder: encoding for views𝐠𝑎1, 𝐠𝑎2𝐠𝑏1, 𝐠𝑏2𝐠𝒂𝐠𝒃Encoder: encoding for identities𝒛𝑎1𝒛𝑏1𝒛𝑏2Projection Head𝐳𝐠𝑓𝜃𝑓𝜃𝑓𝜙Subgraph Contrast𝒛𝑎2Subgraph ClassificationPrediction Prediction Head[0.923,0.077]0.374,0.626... …𝑓𝜓𝐠ICO-WalletMinerExchangePhisherAccount𝑣𝑖is ?Account IdentificationLw-AIG𝑔𝑎𝑔𝑏𝑔𝑖ො𝑦𝐡𝑣𝑖𝐡𝑣𝑖′𝑓𝜓Hierarchical Graph Attention Encoder𝑣𝑖Subgraph Contrastive LearningIEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

7

can be achieved via a fully connected layer parameterized by
Θx as follows, and generates aligned embeddings for neighbors
of the target account.

˜xj = LeakyRelu (Θx · [xj (cid:107) eij]) .

(3)

2) Node-level Attention for Account Embedding: This mod-
ule aims to preserve the relevance of interactive accounts
in the input subgraph, and learns account representation by
focusing on the most relevant parts of the neighborhood. When
identifying a target account in the interaction subgraph, different
neighboring accounts generally contribute differently to it.
For example, both accounts va and vb have transactions with
account vi, if va has many high-volume transactions with vi
while vb has only one low-volume transaction with vi, or if va
has a more similar preference of contract call with vi than vb,
then va often plays a more important role in identifying vi since
it preserves more information associated with the identity of
vi. Based on the above understanding and inspired by previous
work [34], we utilize the node-level attention mechanism, as
illustrated in Fig. 5(c), to learn the hidden representation of
each account in the input subgraph by composing its neighbor
features with different contributions (attentions).

n · [hl

Speciﬁcally, for arbitrary account vi in the input subgraph
g, the node-level attention mechanism learns the contribution
attention scores for its neighbors vj, as follows:
j](cid:1) ,
ij = LeakyRelu (cid:0)Θl
al
where a linear transformation parameterized by Θl
n and a
nonlinear LeakyRelu activation are performed together to
compute the importance of account vj’s hidden features to
account vi in l-th layer. Subsequently, to make attention scores
easily comparable across different accounts, the attention scores
a are further normalized using the softmax function over the
neighbor accounts:

i (cid:107) hl

(4)

ij = Softmax (cid:0)al
αl

ij

(cid:1) =

(cid:1)

exp (cid:0)al
x∈N (i)∪{i} exp (cid:0)al

ij

ix

(cid:80)

(cid:1) ,

(5)

where N (i) is the 1-hop neighbor set of account vi. Once
obtained, the normalized attention scores are used to update the
features of target account via neighborhood context aggregation:

hl+1

i = Elu


αl

ii · Θl

α · hl

i +



ij · Θl
αl

α · hl
j

 ,

(6)

(cid:88)

j∈N (i)

where a linear transformation parameterized by Θl
α and a
nonlinear Elu activation are used to compute the ﬁnal output
features.

The node-level attention mechanism serves for account
embedding. Speciﬁcally, we use a stack of k graph attention
layers to capture the account features, as illustrated in Fig. 5(d).
The input of this stack is the initial account embedding h0
generated by a fully connected layer that accepts the account
and interaction features (Eq. (3)). Notably, for a target account
vi, its initial embedding is h0
i = xi, and that of its neighboring
accounts vj is h0
j = ˜xj. To better characterize accounts, the
stack performs an iterative process of transferring, transforming,
aggregating and updating the representation from interactive

neighbors. And after k iterations, the ﬁnal output account
embeddings hk contain the interaction inﬂuence within k-hops.
3) Subgraph-level Attentive Pooling for Pattern Embedding:
This module aims to characterize the behavior patterns of
target accounts in the input subgraphs by extracting expressive
subgraph-level features. Actually, the behavior patterns of
accounts are associated with their identities, i.e., accounts of
different identities usually behave differently and have different
subgraph patterns. For “Exchange” subgraphs, the center node
generally has an extremely high centrality and frequently
interacts with surrounding neighbors, indicating high-volume
transaction orders. For “Ponzi” or “Gambling” subgraphs, there
exist two explicit characteristics indicating high investment
and low return: (1) bi-directional edges (mutual transactions)
between the center node and surrounding neighbors are rare,
and the center node has high in-degree and low out-degree;
(2) the incoming edges (investment) of the center node contain
larger feature values associated with the digital currency than
the outgoing edges (return). Therefore, different accounts
contribute differently to characterize the subgraph pattern
reﬂecting the behavior of the target account. Meanwhile,
traditional practice usually captures the graph-level features
using sum, mean or max pooling, resulting in feature smoothing
and poor expressiveness. Based on the above understanding,
we design a novel subgraph-level attentive pooling module, as
illustrated in Fig. 5(a), to learn the expressive representation
of account subgraphs.

Speciﬁcally, for a subgraph g, we ﬁrst obtain the initial
subgraph-level embedding s by using global max pooling over
all account embeddings in the subgraph:
s = MaxPooling (cid:0)hk(cid:1) .

(7)

Note that the input of the MaxPooling layer is the ﬁnal account
embeddings hk generated in Sec. IV-B2. To better characterize
the subgraph pattern, we update s by aggregating features of
all accounts with different contributions (attentions). In other
words, for the initial subgraph embedding s, we use an attention
mechanism to learn the contribution attention score for arbitrary
account vj in the subgraph as follows:

aj = LeakyRelu (cid:0)Θs · [s (cid:107) hk

j ](cid:1) ,

(8)

where a linear transformation parameterized by Θs and a
nonlinear LeakyRelu activation are performed to compute
the importance of account vj’s hidden features to the initial
subgraph embedding s. Same as the node-level attention, a
softmax function is applied to compute the normalized attention
scores:

βj = Softmax (aj) =

exp(aj)
x∈Vg∪{s} exp(ax)

,

(cid:80)

(9)

where Vg is the node set of subgraph g, and as is the self-
attention score of s. Finally, the attentive pooling performs the
update process as follows:





g = Elu

βs · Θβ · s +

βj · Θβ · hk
j

 ,

(10)

(cid:88)

j∈Vg

IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

8

where a linear transformation parameterized by Θβ and a
nonlinear Elu activation are used to compute the ﬁnal subgraph
embedding g which characterizes the behavior pattern of the
target account.

TABLE III
STATISTICS OF SUBGRAPH DATASETS SAMPLED FROM ACCOUNT
INTERACTION GRAPH OF ETHEREUM. |G| IS THE NUMBER OF SUBGRAPHS,
Avg. |V | AND Avg. |E| ARE THE AVERAGE NUMBER OF NODES AND EDGES
IN SUBGRAPHS RESPECTIVELY, |x| AND |e| ARE THE NUMBER OF NODE
AND EDGE FEATURES IN SUBGRAPHS.

C. Subgraph Contrastive Learning

To alleviate the account label scarcity as well as learn
highly-expressive pattern embeddings, our Ethident introduce
the contrastive self-supervision learning as a regularization to
jointly train the GNN encoder.

1) Graph Augmentation: Contrastive learning relies heavily
on well-designed data augmentation strategies for view gener-
ation. So far, widely used techniques concentrate on structure-
level and attribute-level augmentation [35]–[37]. In this paper,
we use three categories of graph augmentation methods to
generate the augmented views of subgraphs.

• Structure-level Augmentation

◦ Node Dropping: Each node has a certain probability

P to be dropped from subgraph.

◦ Edge Removing: Each edge has a certain probability

P to be removed from subgraph.

• Attribute-level Augmentation

◦ Node Attribute Masking: Each dimension of node
features has a certain probability P to be set as zero.
◦ Edge Attribute Masking: Each dimension of edge
features has a certain probability P to be set as zero.

• Sampling-based Augmentation

Since each subgraph is sampled from lw-AIG via one of
the three sampling strategies mentioned in Sec. IV-A, we
can use the other two sampling methods to generate the
sampling-based augmented views for this subgraph.
During graph augmentation, we generate two augmented
views ˆg1
i for each target account subgraph gi, and assign
the identity label of target account to them as a pseudo label:

i , ˆg2

Dataset
Eth-ICO-A
Eth-ICO-T
Eth-ICO-aA
Eth-Mining-A
Eth-Mining-T
Eth-Mining-aA
Eth-Exchange-A
Eth-Exchange-T
Eth-Exchange-aA
Eth-Phish&Hack-A
Eth-Phish&Hack-T
Eth-Phish&Hack-aA

|G|
146
146
146
130
130
130
386
386
386
5070
5070
5070

Avg. |N |
42.5
52.2
42.4
23.7
24.7
29.0
33.6
38.0
38.6
37.3
37.8
37.8

Avg. |E|
141.3
152.6
140.7
72.9
67.2
91.9
123.7
113.4
148.6
110.8
101.6
111.3

|x|
14885
14885
14885
14885
14885
14885
14885
14885
14885
14885
14885
14885

|e|
2
2
2
2
2
2
2
2
2
2
2
2

where N is the number of subgraphs in a batch (i.e., batch
size). The loss for each subgraph can be computed as:

Li = − log

i ,z2

ecos(z1
i )/τ
j=1,j(cid:54)=i ecos(z1

(cid:80)N

i ,z2

j )/τ

,

(13)

i (cid:107)(cid:107)z2

where cos(·, ·)
the cosine similarity function with
is
(cid:62)z2
cos(z1
i , z2
j ) = z1
j /(cid:107)z1
j (cid:107), and τ is the temperature
i
parameter. The two correlated views z1
i and z2
i of account
subgraph gi are treated as a positive pair while the rest view
pairs in the batch are treated as negative pairs. The objective
aims to maximize the consistency of positive pairs as opposed
to negative ones, i.e., contrastive learning allows accounts of the
same type to have more consistent representations, and makes
accounts of different types have more obvious differences.

Daug1 = (cid:8)(ˆg1
Daug2 = (cid:8)(ˆg2

i , yi) | ˆg1
i , yi) | ˆg2

i = T1(gi); (vi, yi) ∈ Y (cid:9) ,
i = T2(gi); (vi, yi) ∈ Y (cid:9) .

D. Model Training

(11)

In this way, we can scale up the training data and alleviate
label scarcity. The raw and augmented datasets will be used
together to train the encoder.

i and ˆg2

i = T1(gi) and ˆg2

2) Subgraph Contrast: In our contrastive learning setting, for
each account subgraph gi, its two correlated views ˆg1
i are
generated by undergoing two augmentation operators T1 and T2,
where ˆg1
i = T2(gi). The correlated augmented
views are fed into the encoder fθ, producing the whole subgraph
representations g1
i . Then they are mapped into an
embedding space for contrast via a projection head fφ, yielding
z1
i and z2
i . Note that θ and φ are the parameters of graph
encoder and projection head respectively. Finally, the goal of
subgraph-level contrast is to maximize the consistency between
two correlated augmented views of subgraphs in the contrastive
space via minimizing the contrastive loss:

i and g2

We achieve account identiﬁcation by a prediction head fψ,
which maps the subgraph representations to labels reﬂecting
account identity, yielding a classiﬁcation loss:

Lpred = −

1
N

N
(cid:88)

i=1

yi · log (fψ (gi)) ,

(14)

where Lpred is the cross entropy loss.

The self-supervised subgraph contrast is a pretext task that
serves as a regularization of the subgraph classiﬁcation task.
The encoder HGATE is jointly trained with the pretext and
subgraph classiﬁcation tasks. The loss function consists of both
the self-supervision and classiﬁcation task loss functions, as
formularized below:

L = Lpred + λ · Lself,

(15)

Lself =

1
N

N
(cid:88)

i=1

Li,

(12)

where λ is a trade-off hyper-parameter controls the contribution
of the self-supervision term.

IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

9

TABLE IV
SUMMARY OF PERFORMANCE ON ACCOUNT IDENTIFICATION IN TERMS OF F1-SCORE IN PERCENTAGE WITH STANDARD DEVIATION. THE HIGHEST
PERFORMANCE IS MARKED WITH BOLDFACE; THE HIGHEST PERFORMANCE OF DIFFERENT CATEGORIES OF BASELINES IS UNDERLINED. THE OPS. VALUE
STANDS FOR THE OPTIMAL PERFORMANCE STATISTICS OF ALL GRAPH EMBEDDING AND GNN-BASED METHODS UNDER DIFFERENT SUBGRAPH DATASETS.

Dataset (with different sampling strategy)

avgAmount

Amount

→

←

Method

Amount

←

Manual + LR
Manual + RF
Manual + LGBM
56.69±0.094
DeepWalk + LR
DeepWalk + RF
73.24±0.078
DeepWalk + LGBM 58.28±0.085
80.95±0.054
Node2Vec + LR
Node2Vec + RF
88.21±0.048
Node2Vec + LGBM 81.41±0.064
61.00±0.051
Struc2Vec + LR
61.45±0.069
Struc2Vec + RF
Struc2Vec + LGBM 62.36±0.053
73.77±0.081
Trans2Vec + LR
Trans2Vec + RF
86.50±0.051
Trans2Vec + LGBM 73.91±0.063
65.21±0.061
Graph2Vec + LR
Graph2Vec + RF
66.71±0.072
Graph2Vec + LGBM 61.02±0.070
87.57±0.112
GCN
88.44±0.084
GAT
75.20±0.104
GIN
I2BGNN-A
92.13±0.039
I2BGNN-T
91.02±0.084
Ethident (w/o GC)
93.02±0.029
94.05±0.034
Ethident
OPS.
11

Eth-ICO
Times
76.73±0.059
79.52±0.045
74.71±0.046
58.96±0.054
68.93±0.045
59.18±0.076
62.36±0.055
78.91±0.051
65.53±0.086
58.96±0.082
60.32±0.079
56.01±0.059
61.05±0.064
71.02±0.060
59.88±0.059
68.21±0.067
71.15±0.057
63.02±0.063
86.73±0.109
90.02±0.047
78.66±0.102
91.10±0.042
91.72±0.034
93.36±0.032
92.76±0.038
7

avgAmount

Amount

→

←

59.64±0.049
67.12±0.076
58.28±0.061
79.37±0.079
89.34±0.042
80.95±0.040
55.10±0.084
60.09±0.057
58.05±0.055
59.64±0.066
73.16±0.067
59.30±0.059
63.90±0.063
65.75±0.049
58.29±0.071
86.89±0.126
86.11±0.147
75.17±0.096
92.41±0.033
90.13±0.085
94.38±0.028
94.05±0.033
5

56.94±0.067
65.13±0.045
60.29±0.077
64.36±0.061
74.37±0.041
65.45±0.073
51.82±0.059
63.61±0.080
55.12±0.041
71.41±0.068
73.34±0.072
67.94±0.069
53.25±0.068
53.68±0.080
52.32±0.072
75.25±0.130
80.28±0.111
59.07±0.106
82.24±0.056
82.64±0.077
85.62±0.060
86.38±0.049
2

Eth-Mining
Times
77.15±0.036
81.32±0.044
82.16±0.051
60.26±0.066
71.58±0.078
56.17±0.078
72.85±0.063
78.48±0.068
73.36±0.060
61.56±0.072
69.44±0.058
60.25±0.045
53.78±0.076
61.85±0.084
50.81±0.084
48.33±0.080
49.94±0.072
46.56±0.089
82.91±0.098
78.63±0.152
57.48±0.113
79.52±0.124
82.13±0.101
83.68±0.080
87.00±0.040
4

avgAmount

→

62.07±0.084
65.40±0.035
61.56±0.062
79.24±0.046
78.72±0.058
78.72±0.052
59.80±0.093
60.81±0.059
62.80±0.072
75.87±0.061
77.87±0.065
72.60±0.072
56.24±0.073
57.38±0.081
57.62±0.078
83.52±0.073
82.71±0.084
63.99±0.129
80.20±0.117
83.84±0.062
84.91±0.051
85.30±0.057
16

←

Amount

Eth-Exchange
Times
87.34±0.037
90.13±0.030
91.25±0.030
63.82±0.049
59.17±0.059
80.53±0.038
76.31±0.049
73.21±0.062
73.73±0.035
82.77±0.029
66.06±0.024
88.98±0.033
83.12±0.039
87.68±0.022
80.28±0.033
57.02±0.031
63.48±0.038
71.66±0.035
74.07±0.030
70.97±0.030 71.49±0.024
57.52±0.034 76.81±0.041
72.91±0.046 82.65±0.042
76.30±0.040
68.19±0.035
61.58±0.036
66.45±0.037
63.42±0.033
66.50±0.044
60.65±0.041
64.09±0.046
89.85±0.026
90.23±0.021
91.42±0.023
91.01±0.024
84.35±0.067
81.56±0.074
91.63±0.021
89.64±0.021
91.87±0.022
89.28±0.025
92.77±0.027
92.28±0.027
93.55±0.027
93.16±0.021
11
6

62.53±0.045
80.19±0.020
71.49±0.040
81.05±0.029
86.56±0.012
85.79±0.012
59.09±0.056
69.60±0.033
68.13±0.045
79.75±0.034
87.31±0.025
84.67±0.030
66.79±0.043
64.72±0.034
61.17±0.041
89.79±0.026
90.70±0.021
85.42±0.055
88.76±0.032
89.87±0.028
92.39±0.021
93.34±0.022
5

avgAmount

Eth-Phish&Hack
Times
80.94±0.042
90.10±0.007
90.51±0.007
67.99±0.028
89.77±0.008
89.65±0.009
82.58±0.007
94.06±0.005
94.00±0.005
59.47±0.014
68.93±0.007
68.53±0.009
63.05±0.016
89.75±0.006
88.46±0.010
78.92±0.006
78.97±0.008
80.43±0.009
96.15±0.006
95.68±0.005
95.79±0.007
95.93±0.005
95.98±0.005
97.37±0.004
97.58±0.004
7

→

64.29±0.011
92.71±0.008
92.13±0.007
79.73±0.009
92.17±0.007
91.90±0.005
54.89±0.013
65.02±0.007
64.52±0.010
58.21±0.013
89.98±0.007
89.65±0.006
79.94±0.008
79.60±0.008
81.44±0.006
96.49±0.006
95.91±0.005
95.88±0.005
96.07±0.004
96.11±0.004
97.80±0.003
97.98±0.003
10

58.73±0.020
91.14±0.012
89.78±0.006
66.53±0.020
92.04±0.003
91.67±0.006
57.02±0.012
66.33±0.016
65.25±0.018
68.67±0.019
89.94±0.008
87.90±0.008
80.73±0.009
80.91±0.008
82.11±0.009
96.49±0.005
95.87±0.006
95.89±0.007
95.94±0.005
95.99±0.004
97.79±0.003
97.93±0.002
6

V. EXPERIMENTS

B. Comparison Methods

A. Data Preparation

We intercept

the ﬁrst 10 million block data (the time
interval is between “2015-07-03” to “2020-05-04”) from the
Xblock website3 [38]. Within this time interval, we can extract
in total 309,010,831 transactions and 175,351,541 contract
calls, involving 90,193,755 EOA and 16,221,914 CA. Account
identity labels are obtained from Label Word Cloud in Ethereum
blockchain browser4, including 73 ICO-wallet, 65 Mining, 193
Exchange and 2,535 Phish/Hack.

These four types of accounts are prevalent on blockchain
platforms, and have received widespread attention. It is of
sufﬁcient practical signiﬁcance to identify whether an account
belongs to these types, especially for phish and hack accounts.
For each type of identity label (ICO-wallet, Mining, Exchange
and Phish/Hack), we sample all target account subgraphs with
this label as the positive sample, as well as the same number
of randomly sampled account subgraphs with other labels
as the negative sample. We perform subgraph sampling for
each labeled account according to different edge information
(Amount, Times or avgAmount), yielding three types of
datasets whose names are sufﬁxed with “-A”, “-T”, “-aA”,
respectively. Table III shows the speciﬁcations of subgraph
datasets sampled from lw-AIG with h = 2 and K = 20 .

3http://xblock.pro/
4https://etherscan.io/labelcloud

To illustrate the effectiveness of our Ethident on account
identiﬁcation, we compare with three broad categories of meth-
ods: manual feature engineering, graph embedding methods
and GNN-based methods.

For manual feature engineering that is the most common
and simplest method for account identiﬁcation, we design 16
manual features for Ethereum accounts according to the prior
knowledge and the characteristics of raw Ethereum data, as
detailedly described in Appendix A, yielding account embed-
dings with dimension size of 16. For graph embedding methods,
we consider DeepWalk [26], Node2Vec [27], Struc2Vec [39],
Trans2Vec [28] and Graph2Vec [30] for account embedding.
For the above two categories of methods, we achieve account
identiﬁcation by feeding the generated account embeddings into
three kinds of machine learning classiﬁers: Logistic Regression
(LR), Random Forest (RF) and LightGBM (LGBM).

For GNN-based methods, we ﬁrst compare with three
commonly used GNNs: GCN [40], GAT [34], and GIN [41],
which are adjusted for subgraph classiﬁcation by following
with a pooling layer and a prediction head. We also compare
with previous related work for account identiﬁcation: I2BGNN,
which achieves account identiﬁcation based on different edge
information, yielding two variants: I2BGNN-A and I2BGNN-T.

C. Experimental Settings

For subgraph sampling in Ethident, we set the subgraph
hop h to 2 and sample K = 20 neighbors per hop. For

IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

10

Fig. 6.

Impact of sampling scale on performance and consumption (memory and time).

graph augmentation, we set the probability P to 10%. For
the encoder HGATE, we stack k = 2 graph attention layers
with the hidden dimension of 128 for account embedding, and
use global max pooling for initial subgraph embedding. In
addition, the projection head fφ is a two-layer perceptron with
Relu activation and linear skip connection, and the prediction
head fψ is a two-layer perceptron with Relu and Softmax
activation. We set the temperature parameter τ and trade-off
coefﬁcient λ to 0.2 and 0.01, respectively.

For GCN, GAT, GIN and I2BGNN, the number of the
corresponding message passing layers are 2, 2, 5 and 2
respectively. The global max pooling is used for ﬁnal subgraph
embedding. For all GNN-based methods, we set the embedding
dimension, batch size N , learning rate, dropout to 128, 32,
0.001, 0.2, respectively. During model training, we use early
stopping with patience of 20.

For DeepWalk, Node2Vec, Struc2Vec and Trans2Vec, we
set the length of walks to 20, the number of walks to 40,
and the context size to 3. For Node2Vec, we set the return
parameter p and in-out parameter q to 0.25 and 0.4, respectively.
For the above four random walk-based methods which are
extremely inefﬁcient on large-scale graphs, we generate a
training graph by sampling the connected subgraph containing
all target accounts and their partial 2-hop neighbors from lw-
AIG. For Graph2Vec, we set the number of Weisfeiler-Lehman
iterations to 2, the downsampling frequency to 0.0001, the
minimal count of graph feature occurrences to 5, the epoch
to 500 and the learning rate to 0.025. For the above graph
embedding methods, we set the dimension of output account
embedding to 128.

For each subgraph dataset sampled from lw-AIG, we split
it into training, validation and testing sets with a proportion
of 1:1:1, repeat 3-fold cross validation 10 times and report the
average micro-F1 score as well as standard deviation.

that our Ethident achieves state-of-the-art results with respect
to comparison methods. Speciﬁcally, our Ethident signiﬁcantly
outperforms manual feature engineering and graph embedding
methods across all datasets, and yields 2.09% ∼ 18.27%
relative improvement over best baselines in terms of F1-score,
indicating that the learned subgraph features are better at
capturing the behavior patterns of accounts than manual or
shallow topology features. When compared to GNN-based
methods, our Ethident surpasses strong baselines: we observe
1.13% ∼ 4.93% relative improvement over best baselines.

These observations meet our intuition. As we can see, the
performance of manual features and graph embedding methods
varies largely across different datasets with comparatively
lower performance rankings. This is consistent with our
assertion that they have limited expressiveness for different
kinds of account subgraphs. Because manual features and
graph embedding methods cannot learn task-related features
in an end-to-end manner, they rely heavily on the choice of
classiﬁers to achieve relatively high performance. Meanwhile,
classic GNN baselines normally surpass the manual features
and graph embedding methods since they learn simultaneously
from both graph topology and latent features. Nevertheless,
these baselines like GCN and GAT disregard the important
edge information and generate subgraph-level features via
naive pooling operations. The two variants of I2BGNN only
consider one single interaction information and disregard
others. Combining with the above analysis, we know that
our Ethident learns from both node and edge information
associated with behavior patterns and identities of accounts,
and uses a hierarchical attention mechanism to effectively
characterize node-level account features and subgraph-level
behavior patterns, reasonably achieving superior performance
on account identiﬁcation.

D. Evaluation on Account Identiﬁcation

We evaluate our Ethident on account identiﬁcation and the
results are presented in Table IV, from which we can observe

E. Pattern Analysis in Micro Interaction Subgraphs

After evaluating the overall performance of our method,
we investigate the behavior patterns of different accounts
using experimental results on micro interaction subgraphs.

2 4 6 8 10 12 14 16 18 207580859095F1-score (%)ICO-wallet2 4 6 8 10 12 14 16 18 2075.077.580.082.585.087.5Mining2 4 6 8 10 12 14 16 18 209091929394Exchange2 4 6 8 10 12 14 16 18 20889092949698Phish/Hack2 4 6 8 10 12 14 16 18 207580859095F1-score (%)2 4 6 8 10 12 14 16 18 2075.077.580.082.585.087.5919293942 4 6 8 10 12 14 16 18 20889092949698280029003000310032000.150.200.250.300.350.40270028002900300031000.1500.1750.2000.2250.250280030003200340036000.4902 4 6 8 10 12 14 16 18 200.60.81.01350013550136001365013700Memory (MB)101214161820Time (epoch / s)1-hop & Amount2-hop & Amount1-hop & Times2-hop & Times1-hop & avgAmount2-hop & avgAmount2-hop & Memory2-hop & TimeNumber of sampled neighbors per hop (K)IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

11

Fig. 7. Different categories of accounts generally have different behavior patterns, as embodied in their micro interaction subgraphs. Here we present some
interesting accounts to help explanation.

Furthermore, we list the following Observations as well as
explainable analysis.

1) Obs. 1. Larger subgraphs generally contain more
critical identity-related pattern information: We analyze the
impact of subgraph scale by evaluating our encoder on subgraph
datasets with different scale settings. Speciﬁcally, we vary
h in {1, 2} and K in {2, 4, · · · , 20}. We observe that it is
generally better to infer from 2-hop subgraphs than 1-hop
ones, especially for ICO-wallet and Phish/Hack, judging from
Fig. 6. Meanwhile, as the size of subgraphs increases, the
performance becomes better ﬁrst and then remains stable
or ﬂuctuates slightly in most cases. The above phenomenon
suggests that subgraphs with larger scale beneﬁt account
identiﬁcation more, meeting our intuition that larger subgraphs
generally contain more critical pattern information associated
with account identities.

2) Obs. 2. Different subgraph information highlights the
behavior patterns of accounts with different contributions:
For each category of accounts, the performance of all methods
except manual features varies largely across the datasets with
different sampling strategies. And we count the number of
optimal performances obtained by all methods under different
sampling strategies, yielding the OPS. values. Judging from
the bottom row in Table IV, we have reasonable explanations
for such phenomenon that different sampling strategies beneﬁt
differently for account identiﬁcation.

As we know, different categories of accounts have different
behavior patterns that are embodied in their micro interaction
subgraphs. Here we present some interaction subgraphs of real
accounts to help explain, as shown in Fig. 7. Note that only the
cumulative transaction amount of Ether is displayed between
any two connected nodes in the interaction subgraphs.

• ICO-wallet: Initial Coin Offering (ICO) is a ﬁnancing
method that raises funds for blockchain projects by issuing
tokens. ICO projects usually pre-sell tokens in exchange
for a large amount of Ether, and after a period, the projects
will give supporters a certain return on their investment.
The key behavior pattern is represented as a large number
of outgoing edges with a certain Amount of investment
rewards from the center ICO account to the surrounding
supporters. Since investment actions generally involve a
higher transaction amount, sampling interaction subgraphs
according to Amount information can maximally preserve

the behavior pattern of ICO accounts.

• Mining: Mining pooling is a cooperative mining team
that shares computational power to ﬁnd blocks. The
mining pool will receive a large amount of mining rewards
issued by the system, and distribute them to subordinate
miners according to the proof-of-work (PoW) consensus
protocol. The key behavior pattern is represented as a
large number of outgoing edges with a certain amount
of cumulative rewards from the center mining pool to
the surrounding miner nodes. Since the block reward
of Ethereum is ﬁxed for a period, miners in the same
mining pool generally have a relatively stable average
mining income, which inspires us to use the average
amount (avgAmount) information to guide the sampling
of interactive subgraphs.

• Exchange: The exchange is a platform that provides users
with asset transaction matching and clearing services.
Exchange accounts usually interact frequently with their
clients to process a large number of transaction orders,
and behave as hub nodes with extremely high centrality
(i.e., large in-degree and out-degree) in the interaction
graphs. So sampling interaction subgraphs according to
Times information beneﬁts more.

• Phish/Hack: Both Phishers and Hackers engage in il-
legal fraud activities, in which they usually spread a
large number of websites, emails or links containing
viruses, Trojans, unwanted software, etc., and trick the
recipient into doing remittances directly or providing the
sensitive information of system privileges. As shown in
Fig. 7(d), the center phish/hack account receives large
amounts of Ether through various scams and disperses
them to other phish/hack accounts for concealment. The
key behavior pattern has one explicit characteristic: bi-
directional edges (mutual transactions) between the center
node and surrounding ones are rare, and the center node
has high in-degree and low out-degree. Since illegal frauds
such as fake token exchange or ransomware often set a
speciﬁc threshold amount or ﬁxed ransom which can
be reﬂected in the average amount information, using
subgraphs sampled according to avgAmount information
may beneﬁt more for identifying Phish/Hack accounts.

(a)ICO-walletMining(d)Phish/Hack(c)ExchangeSystemContractIEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

12

Fig. 8. Account Identiﬁcation F1-score gain (%) when contrasting different augmentation pairs, compared to Ethident (w/o GC) which stands for a
no-augmentation version of our framework, under all datasets. “Identity” represents the original view.

F. Effect of Subgraph Contrastive Learning

We further investigate the effectiveness of subgraph contrast
in our Ethident, and list several Observations as well as
explainable analysis.

1) Obs. 3. Graph augmentation is crucial, and structure-
level augmentation seems to beneﬁt more: We ﬁrst apply
various pairs of augmentation views to all datasets, as illustrated
in Fig. 8, and obtain the performance gain of Ethident compared
with Ethident (w/o GC) which stands for a no-augmentation
version of our framework (i.e., identifying accounts by using
our encoder and a followed prediction head). Overall, it seems
more likely to yield positive gain by using either “NodeDrop” or
“EdgeRemove” as one of the augmented views, when compared
to other augmentation pairs. In addition, for exchange accounts
that frequently call various contracts, there will be more non-
zero values in their node features, making attribute masking an
effective augmentation strategy as well. Finally, we note that
the combination of various augmentation views is sensitive to
subgraph datasets with different sampling strategies, i.e., the
performance gain of our Ethident with the same augmentation
pairs varies largely across datasets with different sampling
strategies, which encourages adaptive selections of sampling
strategies and augmentation combinations in future work.

Fig. 9. The UMAP visualization of the subgraph embeddings learned by
Ethident with and without subgraph contract.

2) Obs. 4. Contrastive self-supervision improves the gen-
eralization of model in account feature learning: We utilize
the UMAP [42] to visualize the subgraph embeddings learnt
by Ethident and Ethident (w/o GC) in Fig. 9, where different
colors mean different labels. Compared with Ethident (w/o
GC) which only uses prediction loss Lpred, more obvious inter-
class separability and intra-class compactness are achieved
after applying the contrastive constraint Lself, which illustrates
its effectiveness on learning the behavior pattern differences.

ICO-walletMinerExchangePhish/HackIdentity0.440.15-0.010.51-0.15-0.370.29-0.990.08-1.00-0.54-1.07-0.28-0.180.480.050.650.950.280.280.48-0.03-0.03-0.110.02-0.03-0.01-0.01Times-0.150.080.520.001.020.44-0.29-1.88-1.10-0.20-2.08-1.53-0.99-1.53-0.050.16-0.160.620.200.810.000.02-0.11-0.13-0.03-0.08-0.05-0.12avgAmount-0.220.37-0.370.370.45-0.520.15-1.10-1.81-0.18-0.54-0.64-0.64-0.370.930.340.030.390.370.280.79-0.080.00-0.01-0.02-0.29-0.12-0.13NodeDrop0.230.15-0.150.140.29-0.081.110.27-2.080.00-0.99-0.99-1.89-0.370.370.600.62-0.020.050.090.760.05-0.030.14-0.020.08-0.02-0.11EdgeRemove0.080.080.290.060.370.660.060.36-0.90-0.47-0.28-0.98-1.26-0.470.420.880.510.280.700.730.670.02-0.12-0.15-0.03-0.13-0.12-0.040.080.81-0.080.010.14-0.080.23-0.09-0.29-0.54-0.54-0.47-0.27-0.540.280.760.740.370.400.280.48-0.05-0.06-0.09-0.06-0.070.03-0.05Amount-0.140.15-0.08-0.080.290.520.37-0.72-0.270.89-0.11-0.53-0.63-0.090.120.670.600.200.530.280.51-0.010.05-0.100.07-0.13-0.07-0.12Identity      TimesavgAmount    NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity      TimesavgAmount    NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity      TimesavgAmount    NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity      TimesavgAmount    NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity-1.17-1.23-2.71-0.79-1.97-1.09-2.052.323.153.131.023.602.772.610.030.030.010.310.060.840.45-0.01-0.02-0.040.05-0.09-0.090.00Amount-1.38-1.82-0.80-1.82-1.75-1.31-1.382.142.582.681.773.243.512.950.34-0.36-0.300.120.42-0.020.28-0.14-0.07-0.070.08-0.040.10-0.10avgAmount-1.38-1.75-1.23-1.53-1.46-2.04-0.641.483.972.681.482.863.142.760.03-0.16-0.220.01-0.110.510.03-0.03-0.09-0.010.14-0.020.080.06NodeDrop-1.60-0.79-1.76-1.82-1.16-1.08-1.312.322.502.873.043.063.142.68-0.30-0.16-0.05-0.58-0.39-0.08-0.130.160.170.090.220.140.050.11EdgeRemove-1.67-0.65-1.97-1.67-1.67-1.16-1.752.312.692.682.582.862.951.940.370.060.120.170.29-0.080.260.20-0.060.030.08-0.170.010.04-1.38-1.61-1.38-2.32-1.16-0.65-0.942.683.152.872.682.323.142.12-0.16-0.410.370.260.42-0.02-0.08-0.120.060.040.090.020.150.08Times-2.11-1.09-1.60-0.79-1.01-1.45-1.753.333.503.052.402.772.512.04-0.02-0.160.230.31-0.020.370.120.05-0.130.000.11-0.100.130.01EdgeIdentity      Amount avgAmount    NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity      Amount avgAmount    NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity      Amount avgAmount    NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity      Amount avgAmount    NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity-1.22-1.02-1.02-0.50-1.22-1.07-0.930.19-0.26-2.43-0.71-0.71-0.90-0.980.220.250.280.530.160.500.83-0.13-0.17-0.16-0.04-0.17-0.03-0.17Amount-0.86-1.52-1.22-1.00-0.86-0.78-1.22-0.62-1.07-1.08-0.08-1.26-1.35-0.72-0.140.020.440.440.530.440.19-0.06-0.04-0.080.13-0.080.090.04Times-1.14-1.29-0.86-1.01-1.07-1.44-1.01-0.80-1.07-1.06-1.26-1.53-1.07-1.710.42-0.060.530.580.530.300.64-0.07-0.04-0.040.08-0.070.01-0.05NodeDrop-1.22-0.57-0.57-1.44-0.57-0.93-1.43-0.25-1.15-2.17-1.26-0.90-0.720.380.300.190.16-0.230.220.300.950.000.040.03-0.04-0.090.07-0.02EdgeRemove-1.00-0.35-0.78-1.15-1.22-1.01-1.30-0.160.46-1.71-0.98-0.800.120.460.69-0.371.030.64-0.060.270.08-0.11-0.18-0.120.14-0.09-0.09-0.13-1.02-0.57-1.80-1.22-0.93-1.14-1.65-0.09-0.09-1.63-2.08-0.45-1.80-0.720.220.550.220.300.480.730.000.09-0.03-0.070.02-0.06-0.050.01-1.14-1.15-0.71-0.86-1.29-0.92-0.78-0.45-0.530.19-0.54-0.81-0.45-0.350.34-0.060.360.340.110.190.39-0.14-0.060.180.07-0.130.03-0.14Identity      Amount    Times NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity      Amount    Times NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity      Amount    Times NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskIdentity      Amount    Times NodeDrop  EdgeRemoveNodeAttrMaskEdgeAttrMaskavgAmountEdEdgeAttrMaskLowHighNodeAttrMaskNodeAttrMaskNodeAttrMaskEdgeAttrMaskEdgeAttrMaskEthident(w/oGC)ICO-walletICO-walletOthersMiningMiningOthersExchangeExchangeOthersPhish/HackPhish/HackOthersEthidentICO-walletOthersMiningOthersExchangeOthersPhish/HackOthersIEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

13

TABLE V
COMPARISON OF ENCODER PERFORMANCE WITH AND WITHOUT
SUBGRAPH-LEVEL ATTENTIVE POOLING.

TABLE VII
RESULTS ON THE ORIGINAL AND MALFUNCTIONING EXCHANGE &
PHISHING DATASETS.

Dataset

Method

Eth-ICO

Eth-Mining

Eth-Exchange

Eth-PhishHack

HGATE (w/o AttPooling)1
HGATE
gain
HGATE (w/o AttPooling)
HGATE
gain
HGATE (w/o AttPooling)
HGATE
gain
HGATE (w/o AttPooling)
HGATE
gain

Amount
92.81±0.034
93.02±0.029
0.23%
86.21±0.055
85.62±0.060
-0.68%
91.27±0.026
92.28±0.027
1.11%
96.81±0.006
97.79±0.003
1.01%

Sampling Strategy
Times
93.30±0.039
93.36±0.032
0.06%
84.38±0.072
83.68±0.080
-0.83%
91.12±0.027
92.77±0.027
1.81%
96.15±0.009
97.37±0.004
1.27%

averAmount
93.57±0.034
94.38±0.028
0.87%
85.38±0.030
84.91±0.051
-0.55%
90.98±0.023
92.39±0.021
1.55%
96.72±0.005
97.80±0.003
1.12%

1 AttPooling: subgraph-level attentive pooling operation.

TABLE VI
RESULTS OF ACCOUNT IDENTIFICATION ON EOSIO.

Method

GCN
GAT
GIN
I2BGNN-A
I2BGNN-T
Ethident (w/o GC)
Ethident

h = 1, K = 10
99.59±0.003
99.52±0.002
99.52±0.002
99.47±0.002
99.25±0.002
99.58±0.003
99.75±0.001

EOSIO
h = 1, K = 20
99.47±0.003
99.68±0.002
99.55±0.001
99.53±0.002
99.62±0.002
99.70±0.002
99.75±0.001

h = 2, K = 10
99.30±0.004
99.12±0.004
99.40±0.002
99.12±0.005
99.17±0.005
99.20±0.005
99.47±0.002

Moreover, Ethident separates different patterns with relatively
clearer boundaries, suggesting that contrastive self-supervision
can effectively improve the generalization of models when
training with scarce labels.

G. More Analysis

1) Impact of Subgraph-level Attentive Pooling: To illustrate
the effectiveness of subgraph-level attentive pooling, we
compare the performance of our encoder with and without
this module, as reported in Table V. We observe that the
encoder with AttPooling achieves better performance on 3
out of 4 categories of accounts, validating the effectiveness
of our proposal. For the exception that AttPooling brings a
negative gain on Mining subgraphs, we speculate that a mining
pool organization usually behaves very differently from an
individual miner whose transaction behavior has no signiﬁcant
relationship with the mining pool, so aggregating information
from neighbors may interfere with the characterization of
mining pools’ behavior patterns.

2) Impact of Perturbation Probability: We continue to
analyze the impact of perturbation probability P in data
augmentation. We use a view for data augmentation (in the
form of “Identity & DA”) and vary P in {0.1, 0.2, · · · , 0.5},
the results are shown in Fig. 10. Combined with the statistics
in Table III, we have drawn the following conclusions: (1)
Datasets with larger amounts of samples are more robust to
variation in perturbation probability; (2) Datasets with larger
average sample scales (in terms of Avg. |N | and Avg. |V |) are
less sensitive to variation in perturbation probability; (3) An
effective and reasonable selection interval for the perturbation
probability could be [0.1, 0.3]. Finally, we observe that our

Method

Sample
Strategy

Test with
test or Dmal
test

Dori

averAmount

Amount

Times

Original
Malfunctioning
Loss
Original
Malfunctioning
Loss
Original
Malfunctioning
Loss

Ethident
(w/o GC)

89.74±0.026
89.56±0.038
-0.20%
89.09±0.035
89.28±0.034
0.21%
86.97±0.029
87.21±0.034
0.28%

edgeRemove
&
identity
90.57±0.031
91.32±0.029
0.83%
90.70±0.033
90.13±0.027
-0.63%
87.92±0.029
87.40±0.035
-0.59%

Ethident
edgeRemove
&
edgeRemove
91.22±0.029
91.24±0.031
0.02%
89.39±0.039
89.92±0.030
0.59%
87.51±0.027
87.48±0.028
-0.03%

edgeRemove
&
nodeDrop
91.74±0.025
91.22±0.030
-0.57%
90.86±0.024
90.96±0.030
0.11%
88.83±0.023
88.33±0.031
-0.56%

method still performs well when the perturbation is large, which
is likely to beneﬁt from the attentive graph pooling.

3) Impact of Loss Tradeoff: Here we analyze the impact of
the trade-off coefﬁcient λ which controls the contribution of
subgraph contrast. As we can see from Fig. 11, our Ethident
achieves relatively better performance when λ is less than
1, which meets our intuition. We treat subgraph contrast as
a pretext task or a regularization to subgraph classiﬁcation.
When the coefﬁcient of regularization is greater than 1, the
classiﬁcation task cannot be fully optimized, failing to learn
the task-related features.

4) Tradeoffs between Performance and Consumption: Since
the subgraph extraction allows for mini-batch training of our
framework, greatly reducing computational consumption and
time cost. Here we further investigate the tradeoffs between
performance and consumption under different sampling scales,
as shown in Fig. 6. Since the performance of 2-hop subgraphs
signiﬁcantly outperforms that of 1-hop subgraphs, we just draw
the consumption curves of 2-hop subgraph. We can ﬁrst observe
that the memory and time consumption increase almost linearly
with the sample scale, while the performance converges when
the sample scale increases to a certain extent. We then use the
“ performance
consumption ” metric to roughly analyze the tradeoff between them.
Note that a larger “ performance
consumption ” metric generally indicates better
performance with less consumption. After observation and
calculation, we ﬁnally conclude that an appropriate parameter
setting of sample scale could be h = 2 and K ∈ [8, 10].

5) Generalization Application to Other Cryptocurrency:
To verify the generalization of our framework on other
cryptocurrencies, we collect transaction data of another on-
chain cryptocurrency EOSIO and deploy related experiments.
We ﬁrst construct an account interaction graph including
944,865 nodes and 10,435,037 edges, in which the node
features (X ∈ Rn×1216) are constructed by the contract calling
information and account name restriction mechanism, and
the edge features are constructed in the same way as in
Sec. III-C1. We then collect 2000 target accounts, half of which
are normal accounts and half are bot accounts, and our goal
is to determine the identity of these accounts, that is, normal
accounts or bot accounts. We apply our Ethident framework
to achieve the account identiﬁcation on the EOSIO dataset,
and the experimental settings are similar to that in Sec. V-C.
Table VI report the account identiﬁcation results on EOSIO

IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

14

Fig. 10.

Impact of perturbation probability in data augmentation (P).

as an ‘Exchange’ account instead of a ‘Phishing’ account.

• Randomly select the same number of ‘Exchange’ accounts
and ‘Phishing’ accounts, and extract their transaction sub-
graphs, yielding a new dataset of 386 account subgraphs.
Split the new dataset into training Dtrain, validation Dval
and testing Dori

test sets with a proportion of 1 : 1 : 1.

• Generate the malfunctioning exchange account by remov-
ing the target exchange account’s outgoing edges from
account subgraph. In this way, we yield the malfunction-
ing testing set Dmal
test containing phishing accounts and
malfunctioning exchange accounts.

• Train Ethident model to determine whether an account
is an ‘Exchange’ account or a ‘Phishing’ account using
Dtrain and Dval.

• Evaluate the performance of the model in determining
is an ‘Exchange’ account or a

whether an account
‘Phishing’ account using Dori

test and Dmal

test respectively.

Fig. 11.

Impact of tradeoff coefﬁcient (λ).

dataset. As we can see, our Ethident still achieves the state-
of-the-art identiﬁcation performance on the EOSIO dataset,
showing a good generalization to other cryptocurrencies.

6) Generalization Evaluation on Malfunctioning Exchange
Accounts: Accounts in the same broad category share common
transaction patterns, but also have their own particularities, so
that they can generally still be classiﬁed at a more ﬁne-grained
level. For example, the malfunctioning exchange accounts
which have different transaction patterns from normal ones
are common in real Ethereum, and still belong to ‘Exchange’
accounts. However, these malfunctioning exchange accounts
which only receive amount from trader accounts but do not send
amount back to traders may be more likely to be misclassiﬁed
as a ‘Phishing’ account rather than an ‘Exchange’ account, as
it has a more similar transaction pattern to the former. Here, we
conduct experiments to validate whether our Ethident model
can successfully identify the malfunctioning exchange account

As we can see from Table VII, our Ethident models still
achieve powerful performance in identifying indistinguishable
‘Phishing’ accounts and ‘Malfunctioning Exchange’ accounts.
Compared with the original results in Dori
test, our Ethident show
-0.63% ∼ 0.83% performance ﬂuctuations in malfunctioning
testing set Dmal
test , which is a rational and normal performance
jitter. This phenomenon suggests that our model has almost
no performance loss in distinguishing between phishing ac-
counts and malfunctioning exchange accounts, showing strong
robustness and generalization.

VI. CONCLUSION

Financial security has become a top priority in the blockchain
ecosystem. This paper provides a new perspective on account
de-anonymization, and proposes a behavior-aware Ethereum
account identiﬁcation framework that integrates hierarchical
graph attention and self-supervision mechanism, to effectively
characterize the behavior patterns of different accounts. Ex-
tensive experiments on Ethereum datasets demonstrate the
superiority of our framework in terms of state-of-the-art
performance and powerful generalization. Furthermore, our
framework also has a good transferability to other blockchain
platforms like Bitcoin and EOSIO, which will be discussed in
future work.

0.10.20.30.40.591.091.592.092.593.093.594.094.595.0F1-scoreICO-walletidentity & edgeRemove identity & nodeDrop identity & edgeAttrMask identity & nodeAttrMask0.10.20.30.40.580.080.581.081.582.082.583.083.584.0Mining0.10.20.30.40.5Perturbation probability in data augmentation P91.091.592.092.593.093.594.094.595.0Exchange0.10.20.30.40.595.095.596.096.597.097.598.098.599.0Phish/Hack10−310−210−1110110210380859095100F1-scoreICO-walletAmountTimesaverAmount10−310−210−111011021037075808590Mining8688909294F1-scoreExchange10−310−210−111011021039092949698100Phish/Hack Trade-oﬀ coeﬃcient (λ)10−310−210−11101102103IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

15

TABLE VIII
STATISTICS OF THE AVERAGE OF MANUAL FEATURE FOR VARIOUS ACCOUNTS IN ETHEREUM.

Manual Features
active days
total received
num received tx
inter acct received
total output
num output tx
inter acct output
avg received
avg received day
avg received tx day
avg output
avg output day
avg output tx day
times contract called
times contract called day
num contract called

Phish-Hack
76.94
110.84
27
23.29
124.03
29.91
8.18
29.52
11.66
1.51
30.58
14.66
0.66
11.68
0.5
3.29

Exchange
703.35
1551629.77
88490.39
29985.26
2309107.24
88285.11
46692.69
2002.55
1748.8
113.5
1453.75
2213.77
101.26
66682.01
82.66
2031.6

Mining
595.98
5470.67
68.55
13.6
367339.66
818877.92
16825.85
49.79
6.55
0.16
249.95
389.08
633.21
61002.03
41.84
1256.31

ICO-Wallets
547.84
6642.11
279.86
218.77
33824.02
62.84
37.53
854.35
11.36
0.49
4399.06
80.3
0.2
690.93
1.07
3.26

Common
14.49
245.38
4.13
0.4
370.21
4.56
1.48
7.06
4.93
0.03
9.46
5.39
0.03
1.52
0.02
0.13

Deﬁnition
the number of active days of the account.
the total amount of Ether received by the account.
the number of transactions with Ether received by the account.
the number of accounts sending Ether to the target account.
the amount of Ether spent by the account.
the number of transactions that the account has spent Ether.
the number of accounts receive Ether from the target account.
the average amount of Ether received by the account.
the average amount of Ether received by the account per day.
the number of transactions with Ether received by the account per day.
the average amount of Ether spent by the account.
the average amount of Ether spent by the account per day.
the average number of transactions with Ether spent by the account per day.
the number of times the account calls the smart contract.
the number of times the account calls the smart contract per day.
the number of contracts called by the account.

ACKNOWLEDGMENTS

This work was partially supported by the Key R&D Program
of Zhejiang under Grant 2022C01018, by the National Key
R&D Program of China under Grant 2020YFB1006104, by
the National Natural Science Foundation of China under
Grant 61973273, by the Zhejiang Provincial Natural Science
Foundation of China under Grant LR19F030001, and by
the Major Key Project of PCL under Grants PCL2022A03,
PCL2021A02 and PCL2021A09.

APPENDIX A
MANUAL FEATURE DETAILS

Manual feature engineering is the most common and simplest
way for account identiﬁcation. According to the characteristics
of raw Ethereum data and prior knowledge, we design 16
manual features for Ethereum accounts, as shown in Table VIII.

REFERENCES

[1] M. H. Miraz and M. Ali, “Applications of blockchain technology beyond
cryptocurrency,” Annals of Emerging Technologies in Computing (AETiC),
vol. 2, no. 1, 2018.

[2] K. Fanning and D. P. Centers, “Blockchain and its coming impact on
ﬁnancial services,” Journal of Corporate Accounting & Finance, vol. 27,
no. 5, pp. 53–57, 2016.

[3] G. Blossey, J. Eisenhardt, and G. Hahn, “Blockchain technology in supply
chain management: An application perspective,” in Proceedings of the
52nd Hawaii International Conference on System Sciences, 2019.
[4] T. McGhin, K.-K. R. Choo, C. Z. Liu, and D. He, “Blockchain in
healthcare applications: Research challenges and opportunities,” Journal
of Network and Computer Applications, vol. 135, pp. 62–75, 2019.
[5] R. Klusman and T. Dijkhuizen, “Deanonymisation in ethereum using

existing methods for bitcoin,” 2018.

[6] K. Toyoda, T. Ohtsuki, and P. T. Mathiopoulos, “Multi-class bitcoin-
enabled service identiﬁcation based on transaction history summarization,”
in 2018 IEEE International Conference on Internet of Things (iThings)
and IEEE Green Computing and Communications (GreenCom) and IEEE
Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data
(SmartData).

IEEE, 2018, pp. 1153–1160.

[7] Y.-J. Lin, P.-W. Wu, C.-H. Hsu, I.-P. Tu, and S.-w. Liao, “An evaluation
of bitcoin address classiﬁcation based on transaction history summa-
rization,” in 2019 IEEE International Conference on Blockchain and
Cryptocurrency (ICBC).

IEEE, 2019, pp. 302–310.

[8] M. Bartoletti, B. Pes, and S. Serusi, “Data mining for detecting bitcoin
ponzi schemes,” in 2018 Crypto Valley Conference on Blockchain
Technology (CVCBT).
IEEE, 2018, pp. 75–84.

[9] Y. Huang, H. Wang, L. Wu, G. Tyson, X. Luo, R. Zhang, X. Liu,
G. Huang, and X. Jiang, “Understanding (mis) behavior on the eosio
blockchain,” Proceedings of the ACM on Measurement and Analysis of
Computing Systems, vol. 4, no. 2, pp. 1–28, 2020.

[10] Y. Li, Y. Cai, H. Tian, G. Xue, and Z. Zheng, “Identifying illicit addresses
in bitcoin network,” in International Conference on Blockchain and
Trustworthy Systems. Springer, 2020, pp. 99–111.

[11] Q. Yuan, B. Huang, J. Zhang, J. Wu, H. Zhang, and X. Zhang, “Detecting
phishing scams on ethereum based on transaction records,” in 2020 IEEE
International Symposium on Circuits and Systems (ISCAS).
IEEE, 2020,
pp. 1–5.

[12] J. Shen, J. Zhou, Y. Xie, S. Yu, and Q. Xuan, “Identity inference on
blockchain using graph neural network,” in International Conference on
Blockchain and Trustworthy Systems. Springer, 2021, pp. 3–17.
[13] L. Chen, J. Peng, Y. Liu, J. Li, F. Xie, and Z. Zheng, “Phishing scams
detection in ethereum transaction network,” ACM Transactions on Internet
Technology (TOIT), vol. 21, no. 1, pp. 1–16, 2020.

[14] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko, D. McCoy, G. M.
Voelker, and S. Savage, “A ﬁstful of bitcoins: Characterizing payments
among men with no names,” in Proceedings of the 2013 Conference on
Internet Measurement Conference, 2013, pp. 127–140.

[15] M. Spagnuolo, F. Maggi, and S. Zanero, “Bitiodine: Extracting intelli-
gence from the bitcoin network,” in International Conference on Financial
Cryptography and Data Security. Springer, 2014, pp. 457–468.
[16] F. Reid and M. Harrigan, “An analysis of anonymity in the bitcoin
system,” in Security and Privacy in Social Networks. Springer, 2013,
pp. 197–223.

[17] E. Androulaki, G. O. Karame, M. Roeschlin, T. Scherer, and S. Capkun,
“Evaluating user privacy in bitcoin,” in International Conference on
Financial Cryptography and Data Security. Springer, 2013, pp. 34–51.
[18] M. Harrigan and C. Fretter, “The unreasonable effectiveness of address
clustering,” in 2016 Intl IEEE Conferences on Ubiquitous Intelligence &
Computing, Advanced and Trusted Computing, Scalable Computing and
Communications, Cloud and Big Data Computing, Internet of People, and
Smart World Congress (UIC/ATC/ScalCom/CBDCom/IoP/SmartWorld).
IEEE, 2016, pp. 368–373.

[19] C. Remy, B. Rym, and L. Matthieu, “Tracking bitcoin users activity using
community detection on a network of weak signals,” in International
Conference on Complex Networks and Their Applications. Springer,
2017, pp. 166–177.

[20] M. Lischke and B. Fabian, “Analyzing the bitcoin network: the ﬁrst four

years,” Future Internet, vol. 8, no. 1, p. 7, 2016.

[21] V. D. Blondel, J.-L. Guillaume, R. Lambiotte, and E. Lefebvre, “Fast
unfolding of communities in large networks,” Journal of Statistical
Mechanics: Theory and Experiment, vol. 2008, no. 10, p. P10008, 2008.
[22] F. Victor, “Address clustering heuristics for ethereum,” in International
Conference on Financial Cryptography and Data Security. Springer,
2020, pp. 617–633.

[23] S. Linoy, N. Stakhanova, and S. Ray, “De-anonymizing ethereum
blockchain smart contracts through code attribution,” International
Journal of Network Management, vol. 31, no. 1, p. e2130, 2021.
[24] M. Jourdan, S. Blandin, L. Wynter, and P. Deshpande, “Characterizing

IEEE TRANSACTIONS ON INFORMATION FORENSICS AND SECURITY

16

entities in the bitcoin blockchain,” in 2018 IEEE International Conference
on Data Mining Workshops (ICDMW).

IEEE, 2018, pp. 55–62.

[25] G. Ke, Q. Meng, T. Finley, T. Wang, W. Chen, W. Ma, Q. Ye, and
T.-Y. Liu, “Lightgbm: A highly efﬁcient gradient boosting decision tree,”
Advances in Neural Information Processing Systems 10, vol. 30, pp.
3146–3154, 2017.

[26] B. Perozzi, R. Al-Rfou, and S. Skiena, “Deepwalk: Online learning
of social representations,” in Proceedings of the 20th ACM SIGKDD
International Conference on Knowledge Discovery and Data Mining,
2014, pp. 701–710.

[27] A. Grover and J. Leskovec, “Node2vec: Scalable feature learning for
networks,” in Proceedings of the 22nd ACM SIGKDD International
Conference on Knowledge Discovery and Data Mining, 2016, pp. 855–
864.

[28] J. Wu, Q. Yuan, D. Lin, W. You, W. Chen, C. Chen, and Z. Zheng,
“Who are the phishers? phishing scam detection on ethereum via network
embedding,” IEEE Transactions on Systems, Man, and Cybernetics:
Systems, 2020.

[29] Z. Yuan, Q. Yuan, and J. Wu, “Phishing detection on ethereum
via learning representation of transaction subgraphs,” in International
Conference on Blockchain and Trustworthy Systems. Springer, 2020,
pp. 178–191.

[30] N. Annamalai, C. Mahinthan, V. Rajasekar, C. Lihui, L. Yang, and
J. Shantanu, “Graph2vec: Learning distributed representations of graphs,”
in Proceedings of the 13th International Workshop on Mining and
Learning with Graphs (MLG), 2017.

[31] Q. Xuan, J. Wang, M. Zhao, J. Yuan, C. Fu, Z. Ruan, and G. Chen,
“Subgraph networks with application to structural feature space expansion,”
IEEE Transactions on Knowledge and Data Engineering, vol. 33, no. 6,
pp. 2776–2789, 2019.

[32] S. Phetsouvanh, F. Oggier, and A. Datta, “Egret: Extortion graph explo-
ration techniques in the bitcoin network,” in 2018 IEEE International
Conference on Data Mining Workshops (ICDMW).
IEEE, 2018, pp.
244–251.

[33] R. Zhang, G. Zhang, L. Liu, C. Wang, and S. Wan, “Anomaly detection in
bitcoin information networks with multi-constrained meta path,” Journal
of Systems Architecture, vol. 110, p. 101829, 2020.

[34] P. Veliˇckovi´c, G. Cucurull, A. Casanova, A. Romero, P. Li`o, and Y. Ben-
gio, “Graph attention networks,” Proceedings of the 6th International
Conference on Learning Representations, 2018.

[35] Y. You, T. Chen, Y. Sui, T. Chen, Z. Wang, and Y. Shen, “Graph
contrastive learning with augmentations,” in Proceedings of the 34nd
International Conference on Neural Information Processing Systems,
vol. 33, 2020, pp. 5812–5823.

[36] Y. Wang, W. Wang, Y. Liang, Y. Cai, J. Liu, and B. Hooi, “Nodeaug: Semi-
supervised node classiﬁcation with data augmentation,” in Proceedings
of the 26th ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining, 2020, pp. 207–217.

[37] J. Zhou, J. Shen, and Q. Xuan, “Data augmentation for graph classiﬁ-
cation,” in Proceedings of the 29th ACM International Conference on
Information & Knowledge Management, 2020, pp. 2341–2344.

[38] P. Zheng, Z. Zheng, J. Wu, and H.-n. Dai, “Xblock-eth: Extracting and
exploring blockchain data from ethereum,” IEEE Open Journal of the
Computer Society, vol. 1, pp. 95–106, 2020.

[39] L. F. Ribeiro, P. H. Saverese, and D. R. Figueiredo, “Struc2vec: Learning
node representations from structural identity,” in Proceedings of the 23rd
ACM SIGKDD International Conference on Knowledge Discovery and
Data Mining, 2017, pp. 385–394.

[40] T. N. Kipf and M. Welling, “Semi-supervised classiﬁcation with
graph convolutional networks,” in Proceedings of the 5th International
Conference on Learning Representations, 2017.

[41] K. Xu, W. Hu, J. Leskovec, and S. Jegelka, “How powerful are graph
neural networks?” in Proceedings of the 6th International Conference
on Learning Representations, 2018.

[42] L. McInnes, J. Healy, N. Saul, and L. Grossberger, “Umap: Uniform
manifold approximation and projection,” The Journal of Open Source
Software, vol. 3, no. 29, p. 861, 2018.

Jiajun Zhou received the BS degree in automa-
tion from the Zhejiang University of Technology,
Hangzhou, China, in 2018, where he is currently
pursuing the Ph.D degree in control theory and
engineering with the College of Information and
Engineering. His current research interests include
graph data mining and deep learning, especially for
graph self-supervised learning and blockchain data
analytics.

Chenkai Hu is currently pursuing the bachelor’s
degree in automation at Zhejiang University of
Technology, HangZhou, China. His current research
interests include data mining in blockchain.

Jianlei Chi received the B.S. degree in computer
science and technology from Harbin Engineering
University, China, 2014, and the Ph.D. degree in
computer science and technology in 2022 from
Xi’an Jiaotong University, China. He is currently
an assistant professor at Hangzhou Research Institute
of Xidian University. His research interests include
trustworthy software, software engineering, program
analysis and machine learning.

Jiajing Wu (Senior Member, IEEE) received the
Ph.D. degree from The Hong Kong Polytechnic
University, Hong Kong, in 2014. In 2015, she joined
Sun Yat-sen University, Guangzhou, China, where
she is currently an Associate Professor. Her research
interests include blockchain, graph mining, and
network science.Dr. Wu was awarded the Hong Kong
Ph.D. Fellowship Scheme during her Ph.D. degree in
Hong Kong from 2010 to 2014. She also serves as
an Associate Editor for IEEE TRANSACTIONS ON
CIRCUITS AND SYSTEMS II: EXPRESS BRIEFS.
Meng Shen (Member, IEEE) received the B.Eng.
degree in computer science from Shandong Univer-
sity, Jinan, China, in 2009, and the Ph.D. degree in
computer science from Tsinghua University, Beijing,
China, in 2014. He is currently an Associate Professor
with Beijing Institute of Technology, Beijing. He
has authored over 50 papers in top-level journals
and conferences, such as ACM SIGCOMM, IEEE
JOURNAL ON SELECTED AREAS IN COMMUNI-
CATIONS (JSAC), and IEEE TRANSACTIONS ON
INFORMATION FORENSICS AND SECURITY
(TIFS). His research interests include data privacy and security, blockchain
applications, and encrypted trafﬁc classiﬁcation. He received the Best Paper
Award from IEEE/ACM IWQoS 2021. He was selected by the Beijing Nova
Program 2020 and the winner of the ACM SIGCOMM China Rising Star
Award in 2019. He has guest edited Special Issues on Emerging Technologies
for Data Security and Privacy in IEEE Network and IEEE INTERNET OF
THINGS JOURNAL.

Qi Xuan (M’18) received the BS and PhD degrees
in control theory and engineering from Zhejiang
University, Hangzhou, China, in 2003 and 2008,
respectively. He was a Post-Doctoral Researcher
with the Department of Information Science and
Electronic Engineering, Zhejiang University, from
2008 to 2010, respectively, and a Research Assistant
with the Department of Electronic Engineering, City
University of Hong Kong, Hong Kong, in 2010 and
2017. From 2012 to 2014, he was a Post-Doctoral
Fellow with the Department of Computer Science,
University of California at Davis, CA, USA. He is a senior member of the IEEE
and is currently a Professor with the Institute of Cyberspace Security, College
of Information Engineering, Zhejiang University of Technology, Hangzhou,
China. His current research interests include network science, graph data
mining, cyberspace security, machine learning, and computer vision.

