DeTRM: Decentralised Trust and Reputation
Management for Blockchain-based Supply Chains

Guntur Dharma Putra∗‡, Changhoon Kang†, Salil S. Kanhere∗‡ and James Won-Ki Hong†
∗UNSW Sydney, Australia †POSTECH, South Korea ‡CSCRC, Australia

2
2
0
2

r
a

M
1
1

]

R
C
.
s
c
[

1
v
9
6
7
5
0
.
3
0
2
2
:
v
i
X
r
a

Abstract—Blockchain has the potential to enhance supply
chain management systems by providing stronger assurance in
transparency and traceability of traded commodities. However,
blockchain does not overcome the inherent issues of data trust
in IoT enabled supply chains. Recent proposals attempt to tackle
these issues by incorporating generic trust and reputation man-
agement, which does not entirely address the complex challenges
of supply chain operations and suffers from signiﬁcant draw-
backs. In this paper, we propose DeTRM, a decentralised trust
and reputation management solution for supply chains, which
considers complex supply chain operations, such as splitting or
merging of product lots, to provide a coherent trust management
solution. We resolve data trust by correlating empirical data from
adjacent sensor nodes, using which the authenticity of data can
be assessed. We design a consortium blockchain, where smart
contracts play a signiﬁcant role in quantifying trustworthiness as
a numerical score from different perspectives. A proof-of-concept
implementation in Hyperledger Fabric shows that DeTRM is
feasible and only incurs relatively small overheads compared to
the baseline.

Index Terms—IoT, blockchain, supply chain, trust and repu-

tation management

I. INTRODUCTION

Supply Chain Management Systems (SCMS) aim to pro-
vide an end-to-end audit trail and provenance information of
traded goods and services, which extends across the primary
producers to end customers [1]. In general, SCMS operate
by creating a digital representation of physical commodities,
referred to as digital assets. The subsequent transfers and
ownership changes of the assets are recorded in the system,
as they progress through the different stages of the supply
chain [2]. Internet of Things (IoT) devices have also been
utilised in SCMS to streamline and automate supply chain
processes by collecting relevant sensor readings from the
environment, communicating with related parties and actuating
certain actions as deﬁned in the business logic [3]. For
instance, RFID tags have been widely adopted in warehousing
and transportation of commodities to automate the tracking
process [4], while Wireless Sensor Networks (WSN) are often
deployed to provide efﬁcient monitoring of the commodities.
Supply chains are experiencing exponential growth, which
introduces unprecedented challenges in providing transparency
and traceability for more complex participants, who may not
necessarily trust each other [5]. Recently, blockchain has
demonstrated its potential to enhance conventional SCMS with
stronger assurance in traceability and transparency due to its
inherent data structure of immutable time-stamped records [6].

The ﬁrst and second authors have the same contribution in the paper.

Blockchain also removes the need to trust a centralised
entity to administer the SCMS, as trust is decentralised to
all blockchain participants through a consensus mechanism.
In addition, blockchain allows instant identiﬁcation of the
provenance of a commodity by searching through the linked
blocks, which would take signiﬁcantly longer time in conven-
tional SCMS [2]. Oftentimes this information is not available
in conventional SCMS, due to the inherent data silos in
centralised architectures [7]. Additionally, smart contracts can
also be utilised to record trading agreements between supply
chain participants in a secure and veriﬁable manner.

However, relying solely on blockchain for IoT supported
SCMS does not solve the underlying trust problem associated
with the data. In fact, sensor nodes may become faulty and
send inaccurate and low-quality data, which would become
immutable once stored on the blockchain, contaminating the
ledger with bad data [8]. Trust and Reputation Manage-
ment (TRM) is an effective solution to overcome this issue.
However, existing approaches for incorporating TRM into
blockchain-based SCMS, e.g., [6], [9], [10] adopt a generic
TRM model, which does not cater to the unique challenges
of SCMS, such as dynamic operations in production of
commodities. In addition, the existing work assumes that the
commodities always move across the supply chain in a ﬁxed
way, which is unlikely as supply chains predominantly involve
productions of new commodities from different sources [11].
In this paper, we propose DeTRM, a decentralised TRM
framework for blockchain-based SCMS, which aims to over-
come trust issues in data and behaviour of supply chain partic-
ipants. DeTRM quantiﬁes the quality of sensor observations to
provide a numerical measure of data trust, while the behaviour
of supply chain participants is constantly evaluated as per pre-
determined trade agreements to assess their trustworthiness.
We deﬁne distinct scores for trust and reputation, using which
the consumers can conveniently infer trust from different levels
of perspective. In addition, we incorporate inherent supply
chain operations, e.g., production of commodities, in designing
our tailored TRM model for SCMS to keep track of trust
information across the entire supply chain life cycle, i.e., from
sourcing the raw material to the retail shelf. In DeTRM, each
supply chain entity is required to host blockchain peer nodes
to build and maintain a consortium blockchain, enabling a ﬁrm
decentralised framework. We implemented a proof-of-concept
implementation of DeTRM in a lab-scale Hyperledger Fabric
network, and evaluated the evolution of trust in typical usage
scenarios and benchmarked the incurred overheads. Experi-

 
 
 
 
 
 
mental results show that DeTRM incurs minimal overheads
compared to the baseline with regard to resource utilisation,
throughput and latency.

In summary, we make the following contributions in this

paper:

• We propose DeTRM, a decentralised TRM framework for
blockchain-based SCMS, in which we consider complex
supply chain operations such as splitting or merging of
product lots or processing raw materials to produce a new
product while modelling the TRM.

• DeTRM resolves data trust by correlating observational
data from adjacent sensor nodes, using which the integrity
and authenticity of the data can be assessed and corre-
sponding scores can be quantiﬁed.
• DeTRM provides distinction of

trust and reputation
scores, which offers a convenient way to determine the
trustworthiness of supply chain participants from different
perspectives. Here, smart contracts are utilised to enable
transparent and veriﬁable mechanisms to compute these
scores.

• We develop a proof-of-concept implementation on Hy-
perledger Fabric network hosted on a lab-scale testbed.
We benchmark DeTRM to demonstrate its effectiveness
in tracking the evolution of trust evolution and determine
performance metrics such as transaction throughput and
latency. Experimental results indicate that DeTRM is
feasible and only incurs minimal overheads compared to
the baseline.

The rest of the paper is organised as follows. Section II
discusses the related work, while Section III describes the
proposed system model. We elaborate on the proposed TRM
in Section IV, while the decentralised supply chain framework
is elaborated in Section V. We present the performance evalu-
ation in Section VI. We conclude this paper and present future
work in Section VII.

II. RELATED WORK

Blockchain has received a signiﬁcant amount of attention
from the research community as a fundamental building block
to build secure and trustworthy SCMS, due to its inherent
characteristics, such as immutability and auditability. In [7],
the authors proposed a generic framework for blockchain-
based Food Supply Chain (FSC),
in which a consortium
blockchain acts as a platform for FSC participants to provide
end-to-end provenance of the traded products. The framework
is comprised of a tiered architecture with a built-in support to
distribute the blockchain into multiple shards for maintaining
scalability. Zhang et al. proposed a blockchain-based supply
chain framework with an emphasis on process adaptation [11],
which allows ﬂexibility in deﬁning complex supply chain pro-
cess as a collection of fragments. In [5], the authors proposed
a privacy-preserving framework for achieving provenance in
SCMS, where contamination tracing is introduced to identify
contaminated products in the supply chain. However, these
works [7], [11], [5] disregard the importance of incorporat-
ing trust management to determine the authenticity of the

incoming data and to evaluate the reliability of supply chain
participants.

Researchers have proposed the notion of blockchain-based
TRM, where blockchain is incorporated to provide trustless
and secure evaluation of participants behaviour and the quality
of the exchanged data [12]. For instance, TRM is coupled
with a decentralised Attribute-based Access Control (ABAC)
to quantitatively assess the trustworthiness of network partici-
pants and help protect the network from adversaries [13]. TRM
is also implemented in an IoT data trading scenario to provide
assurance in the reliability of sellers by means of numerical
measures, using which the consumers can select appropriate
sellers based on their previous behaviour [14]. Unfortunately,
these decentralised TRM systems [12], [14] cannot be imple-
mented directly to SCMS, due to inherent characteristics of
supply chain that requires complex operations of the traded
goods and commodities, such as splitting and repackaging of
raw materials.

Some effort to incorporate TRM into SCMS have been
proposed in [6], [9], [10]. A rudimentary TRM for supply
chain in agriculture is proposed in [9], while a smart contract-
based reputation model for SCMS is proposed by Li et al. [10],
in which tokens are used as the proxy of reputation. How-
ever, these approaches [9], [10] incorporate streamlined TRM
concepts and disregard complex operations of supply chain
scenarios. TrustChain [6] is by far one of the few frameworks
that tailors a TRM speciﬁcally for the case of decentralised
SCMS, where the reputation of a supply chain participant is
determined from multiple sources. However, the framework
still suffers from several shortcomings. First, TrustChain fully
delegates the administrative control and management of the
blockchain network to the business network administrator,
essentially a Trusted Third Party (TTP), which undermines
the fundamental motivation of using a blockchain. Second, the
framework’s TRM model is directly adopted from a generic
model [15], which may not accurately resemble real-world
supply chain scenarios. Lastly, TrustChain relies on a strong
assumption that the commodities are static and will not be
reproduced or repackaged as they progress through the supply
chain life cycle. However, in practice commodities would very
likely be split and repackaged through the supply chain life
cycle.

In summary, previous work in the literature fail to provide
a comprehensive TRM solution for blockchain-based SCMS.
In addition, the trust model is either oversimpliﬁed or directly
adopted from generic trust model without proper modiﬁcations
for complex operations in supply chain systems. DeTRM
is designed to overcome the aforementioned shortcomings
and to provide a coherent solution for trust management in
blockchain-based SCMS.

III. SYSTEM MODEL

In this paper, we model our SCMS using diary supply
chain as a representative example. However, our model can
also be generalised and applied to other supply chain use
cases. Fig. 1 depicts an example of diary supply chain, which

TABLE I
SUMMARY OF IMPORTANT NOTATIONS AND THEIR DESCRIPTION

Notations
SC; B
E = (A, P )
am ∈ A
pn ∈ A
dn,q ∈ Dn
(cid:96)k ∈ Ln
sn,p ∈ Sn
gn,k
o,p ∈ vn
vn
o
Vo,p, V C
o,p
em,q

Description

supply chain framework; blockchain network
supply chain entity: authority and participant
food authority m
supply chain participant n
digital asset a owned by pn
locations of participant’s premises
IoT sensor node p
gateway node at location (cid:96)k
measurement data
the value and conﬁdence of an observation
endorsement rating from am

Ctrm & Ccom TRM and commodity smart contracts

(cid:98)tn,q
(cid:98)Tn
(cid:98)Rn
γ

trust score of a commodity dn,q
trust score of a participant pn
reputation of a participant pn
decaying parameter for trust and reputation

owner is the ID of the current owner and Dn,q

Dn,q
prop is a set of
properties for dn,q, including the batch ID. We denote a set
of digital assets owned by pn as Dn = {dn,1, dn,2, . . . , dn,q}.
Speciﬁcally, producers are entities that make the products or
commodities, sourced from raw materials or from existing
commodities in SC, while distributors purchase several com-
modities from producers in large quantities for resale purpose.
We group shipping and logistic entities, who are in charge for
product transportation into this category. On the other hand,
retailers are the entities that trade commodities to individual
consumers for consumption in a relatively smaller quantity.

B. Layered View of the System

Fig. 2 presents a layered view of DeTRM. We categorise
the main components in SC into four interconnected layers,
denoted SC = (cid:104)Lapp, Lbc, Ldata, Lphy(cid:105), namely application,
blockchain, data and physical layer.

Physical layer Lphy: In our model, a participant pn may
store their assets Dn in their premises, denoted Ln =
{(cid:96)1, . . . , (cid:96)k} where (cid:96)k = (cid:104)Llat, Llon(cid:105) corresponds to the
location of the premises. To monitor the assets in each (cid:96)k,
participant pn deploys several IoT sensor nodes, denoted
Sn = {sn,1, . . . , sn,p}. A sensor node sn,p ∈ Sn is represented
by a tuple sn,p = (cid:104)Skey, Smod, Sowner(cid:105), where Skey is a
unique sensor ID, Smod refers to sensor modality and Sowner
is the ID of pn. Function fM : Sn → Ln maps each sensor
node sn,p ∈ Sn to a particular location (cid:96)k ∈ Ln, resulting in
a unique set Mk ⊆ Sn that represents a set of IoT sensor
nodes in location (cid:96)k. To guarantee data authenticity and avoid
erroneous sensory data, we require that each location (cid:96)k is
supplied with at least y sensor nodes with similar Smod provid-
ing sensor redundancy. We assume a set of sensor nodes Mk
is connected to a gateway gn,k, which has enough resources
for performing asymmetric cryptography to communicate with
blockchain B. In our model, we assume that the participants
use Time Temperature Indicator (TTI) sensors. However, our

Fig. 1. An overview of a simpliﬁed dairy supply chain from primary producers
to retail stores. The food authority here is regulating the supply chain and
ensuring that the commodities are up to the safety standard.

generally consists of producers, distributors, retailers and a
food authority.

A. Supply Chain Entities

prop

Our decentralised SCMS model, denoted SC, deﬁnes two
types of supply chain entities, denoted E = (A, P ), where
A = {a1, . . . , am} is a set of regulatory authorities and
P = {p1, . . . , pn} is a set of supply chain participants. In
our model, a participant pn ∈ P is represented as a tuple
role, (cid:10)P n
pn = (cid:10)P n
(cid:11)(cid:11), where P n
id, P n
id is the unique ID of par-
ticipant pn, P n
role, is the participant’s role in the supply chain
(cid:11) is a set of properties for pn. We deﬁne three types
and (cid:10)P n
prop
of role for participant pn, namely producers, distributors and
retailers, denoted P n
role ⊆ {producer , distributor , retailer }.
As such, a participant pn ∈ P can uniquely be a producer
or can have multiple roles at the same time, e.g., be both
a distributor and retailer. We exclude the consumers from
the set of participants P , as consumers are not required to
participate and maintain blockchain network B. However, they
are allowed to access B, for example, to see the trail of supply
chain and its trust scores by using an imprinted QR code on
the product. We present a table of notations in Table I.

Food Authorities: The food authorities, such as NSW Food
Authority1, are mainly responsible to periodically perform reg-
ulatory inspections regarding the safety of the diary products,
according to a particular safety and regulatory standard, e.g.,
HACCP [16].

Supply Chain Participants: In our model, the participants
manage the creation and transfer of digital assets that represent
real physical commodities being traded in the SCMS. In this
paper, we refer to commodities and digital assets interchange-
ably, as they refer to the same object. A digital asset owned by
(cid:11)(cid:11), where
participant pn is denoted as dn,q = (cid:10)Dn,q

owner, (cid:10)Dn,q

prop

1https://www.foodauthority.nsw.gov.au/

Cheese ProducerMilk ProducersDistributorFood AuthorityStrawberry YogurtProducerRetailerDistributorStrawberry ProducerStrawberry ProducerRetailerRetailero,p = (cid:10)Vo,p, V C

(cid:11),
for observation o, denoted as a tuple vn
where Vo refers to measurement value, e.g., temperature
scale (◦C), and V c
o ∈ [0, 1] refers to the conﬁdence of
the observation, using which the quality of observational
data can be derived [17]. We formally deﬁne monitor
operation as:

o,p

o , (cid:96)k)

o,1, vn

o = {vn

dn,q ← monitor(gn,k, vn
where vn
o,2, . . . , vn
o,p} is a set of measure-
ment data of observation o from p sensor nodes in
location (cid:96)k. Here, monitor operation is performed by
gateway gn,k, to which each sensor node sn ∈ Mk
submits the measurement value.

(3)

4) Inspect: Food authorities are required to regularly con-
duct on-site checks of the production, storage and trans-
portation facilities to ensure the quality of the products.
On completion, food authority am records the results to
SC via inspect operation:

(cid:104)dn,q, pn(cid:105) ← inspect(am, em,q, Rq)

(4)

where em,q ∈ [0, 1] is the endorsement rating from am
according to inspection results and Rq is a set of detailed
parameters pertaining to the on-site checks.

5) Trade: This operation corresponds to a change of asset
ownership between two supply chain participants. For
each trade operation, both participants should agree on
a set of terms and conditions (trade agreements), denoted
tcx, such as payment and shipment due date. A trade
operation over an exchange of asset dn,q from participant
pn to p(n+1) is deﬁned as follows:

d(cid:48)
(n+1),q ← trade(dn,q, pn, p(n+1), tcx)

(5)

where d(cid:48)
participant p(n+1).

(n+1),q denotes a new digital asset owned by

Note that these operations are coupled with complementing
blockchain transactions (see Section V). In addition, layer
Ldata also holds meta-data for supporting data collection (e.g.,
inspection paperwork and certiﬁcation), which can be hosted
on a centralised or peer-to-peer storage, as long as they are
accessible by supply chain participants. We require the hash of
the corresponding data to be stored on chain for maintaining
integrity.

Blockchain layer Lbc: We adopt a modular permissioned-
blockchain design [18], where supply chain entities E collec-
tively establish and maintain a consortium blockchain network
B. Each food authority a ∈ A and supply chain participant
p ∈ P host blockchain peer nodes, through which they interact
with other entities. Each peer node is identiﬁable by a pair of
private (secret) and public key, denoted ks, kp. We consider
a modular design of smart contracts, where we design two
smart contracts, namely TRM contract, denoted Ctrm, and
commodity contract, denoted Ccom. Trade agreements and the
trust model are stored in Ctrm, while temperature threshold,
time interval ∆τ and other quality related information are
stored in Ccom. Note that our model is blockchain agnostic

Fig. 2. The layered overview of the proposed system model, which consists of
four interconnected layers namely physical, data, blockchain and application
layer.

model can also be generalised to other types of sensor such
as GPS and humidity sensor, depending on the application
scenario.

Data layer Ldata: Supply chain participants P perform a
set of operations for managing the creation, movements and
transfer of assets, which are recorded via IoT sensor nodes
sn,p, which then stored on the blockchain B. We deﬁne ﬁve
types of operations based on the following supply chain events:
role = producer } are
required to create digital assets for digitising physical
commodities in SC. A create operation results in the
creation of a new digital asset dn,q from producer pn,
which is formally deﬁned as follows:

1) Create: Producers {pn ∈ P | P x

dn,q ← create(Dn,q

owner , (cid:10)Dn,q

prop

(cid:11)).

(1)

For instance, a milk producer creates a new digital asset
for each batch of raw milk, where the properties of each
raw milk batch are manifested in (cid:10)Dn,q

(cid:11).

prop

2) Produce: To record new commodity production in SC,
producer pn is required to perform produce operation
which is deﬁned as:

n,q ← produce(DS, Rp)
d(cid:48)

(2)

where d(cid:48)
n,q is the new digital asset, e.g., strawberry
yogurt, DS = {dn,q, dn,(q+1)} is a set of raw materials
and Rp is a set of required parameters the process. Note
that produce creates new digital assets from existing
ones, while create imports new unrecorded commodities
into SC as new digital assets.

3) Monitor: IoT sensor nodes perform monitor operations
on a regular basis to check if the commodity is stored
within acceptable temperature range as per the safety
standard. A sensor node sn,p submits measurement data

Physical LayerData LayerBlockchain LayerApplication LayerLocation l1Sensor s1,…,spdn,qLocation lkSensor s1,…,spdn,qmonitorOff-chain storageTradeProduceinspectCreateSmartContractsPeer nodesBlockchain(ledger)MonitorInspectqueryQueryIncentivesPenaltiesLeader Boardand can be implemented on any permissioned blockchain
platform that supports smart contracts execution, for instance
Hyperledger Fabric [18] and Corda [19].

Application layer Lapp: This layer mainly provides an
interface for customers and other relevant parties to beneﬁt
from the TRM, e.g., querying the scores for each seller or
commodities. In this layer, Food Authorities A may host
a REST API, through which customers can query for the
reputation of each supply chain participant, e.g., by scanning
a QR code displayed on the traded products.

In our model, we assume that food authority is trusted,
while supply chain participants are not necessarily trusted.
We further assume that DeTRM inherits the assumptions of
a commodity blockchain platform, which include security
against peer-to-peer and consensus attacks, such as Sybil,
eclipse and 51% attacks [20]. All peer nodes in SC are bound
to cryptographic primitives, which prevents manipulation and
duplication of blockchain identities, i.e., public and private key
pairs.

IV. TRUST AND REPUTATION MANAGEMENT MODEL

The main goal of DeTRM is to evaluate the trustworthiness
of the supply chain participants and to provide quality assur-
ance of the traded commodities. We assign trust and reputation
scores for each commodity dn,q and supply chain participant
pn in SC to provide a quantiﬁed measure of trustworthiness.
The scores are mainly derived from the operations in data
layer Ldata, which includes three major supply chain events,
namely monitor, inspect and trade.

In general, the trust score of a commodity dn,q is derived
from monitor operations (i.e., entity-based trust). The trust
score of dn,q, denoted (cid:98)tn,q,
is gradually increased when
monitor operation reports expected temperature readings, i.e.,
Tmin < Vo,p < Tmax, while (cid:98)tn,q is signiﬁcantly decreased
when monitor operation reports otherwise. The value of (cid:98)tn,q
is derived from a set of o observations from p sensor nodes
{sn | ∀sn ∈ Mk} at location (cid:96)k arranged in an o × p matrix:

Vn =









vn
11
vn
21
...
vn
o1

vn
12
vn
22
...
vn
o2

. . .
. . .
. . .
. . .









vn
1p
vn
2p
...
vn
op

introduce γ as a decaying constant (0 < γ ≤ 1) to afford
higher weights to recent observations. V E
j,i ∈ [0, 1] is the
measurement evidence [21] determined via correlation with
other neighbouring sensor nodes M(cid:48)
k = {sn,p ∈ Mk | sn,p (cid:54)=
sn,j}:

V E

j,i =

1
|M(cid:48)
k|

(cid:88)

sn,p∈M(cid:48)
k

ϕn,pV C
o,p

(7)

where

ϕn,p =

(cid:40)

1,

if Vo,p supports Vj,i

−1, otherwise

k| denotes the cardinality of set M(cid:48)

where |M(cid:48)
k, i.e., the number
of neighbouring sensor nodes. Intuitively, the value of (cid:98)tn,q is
directly proportional to the observation conﬁdence V C
j,i and
evidence V E
j,i, in which an observation with high conﬁdence
score, supported with high evidence value would increase (cid:98)tn,q
and vice versa. Consequently, participant pn would have a set
of q trust scores, denoted (cid:98)tn = {(cid:98)tn,1, . . . , (cid:98)tn,q}, for all of their
commodities.

The trust score for participant pn (i.e., behaviour-based
trust) is built gradually from each trade operation. Ctrm eval-
uates how pn fulﬁls trade agreements in tcx by quantifying it
into a scalar value σi ∈ [0, 1]. The score trust score (cid:98)Tn after
r trade operations is calculated as follows:

where

(cid:98)Tn(r) = (1 − γ)

r
(cid:88)

i=1

γ(r−i)σi

σi =

1
|tci|

(cid:88)

tcj ∈tci

ψtcj tcj

(8)

where tcj ∈ [0, 1] is the score for agreement j and ψtcj ∈
{1, −1} is the weight to indicate a successful (1) or unsuc-
cessful (−1) fulﬁlment, which is automated by smart contracts
Ctrm. In general, the more successful trade operations partic-
ipant pn has, the higher trust score (cid:98)Tn grows.

The reputation score of a participant pn, denoted (cid:98)Rn, is a
weighted average of entity and behaviour-based trust scores,
cf. (6), (8), and aggregated endorsement scores from food
authorities. We calculate the score (cid:98)Rn for q commodities, r
trade operations and u endorsements as follows:
(cid:88)

(cid:98)tn,q + wT (cid:98)Tn(r) + we (cid:98)En(u)

(9)

(cid:98)Rn(q, r, u) =

wt
|(cid:98)tn|

(cid:98)tn,q∈(cid:98)tn

(cid:98)En(u) = (1 − γ)

u
(cid:88)

i=1

γ(u−i)ei

(10)

and (cid:98)tn,q is calculated as follows:

(cid:98)tn,q(o, p) =

(1 − γ)
p

o
(cid:88)

p
(cid:88)

i=1

j=1

γ(o−i)δj,iV C

j,iV E
j,i

(6)

where

where

δj,i =

(cid:40)

δmax,
δmin,

if Tmin < Vj,i < Tmax ,
otherwise,

where δmax and δmin are the weights associated with temper-
ature reading within and outside expected threshold, respec-
tively. In addition, δmax serves as the upper limit of (cid:98)tn,q, while
δmin sets the lower boundary, i.e., (cid:98)tn,q ∈ [δmin, δmax]. We

where ei is the endorsement rating, and wt, wT and we refer
to the weight for different reputation components (i.e., (cid:98)tn,q,
(cid:98)Tn and (cid:98)En) and we require that wt + wT + we = 1. How we
derive the weight depends on the setting.

All trust computation models are manifested in the Ctrm
smart contract to deliver an automated and secure decentralised
TRM. In addition, the corresponding evidence and data source
are logged in Ctrm, which ensures transparency and immutable

Fig. 3. An example of the workﬂow of DeTRM, beginning from product creation, trade, production, monitoring, inspection and query. The supply chain
entities E = {a ∈ A, p ∈ P } are shown in a dashed rectangle. The consumers are not considered as supply chain entities.

trail of trust and reputation score evolution. Subse-
audit
quently, supply chain participants and other related parties can
conveniently query the contract Ctrm to get the latest score of
a particular commodity or participant.

V. TRM FRAMEWORK FOR SUPPLY CHAIN

In this section, we describe DeTRM with regard to supply
chain operations in our system model and their blockchain
transactions counterpart, cf. Section III. In addition, this sec-
tion presents how the trust calculation model is implemented
in practice. Please refer to Table I for a summary of notations
and their descriptions.

prop

id, P n

role, (cid:10)P n

To initialise SC, food authorities A are entrusted to conﬁg-
ure and initiate a consortium blockchain network B, includ-
ing policy rules for network governance, e.g, allowing and
revoking network access. Food authorities are also entrusted
to deploy Ctrm contract as the base smart contract in SC.
Subsequently, supply chain participant sn ∈ S can join
the network by sending a join request, denoted Reqn =
(cid:10)P n
(cid:11)(cid:11), to a food authority am over a secure
channel [22]. Upon successful validation, food authority am
provides sn with corresponding network conﬁgurations to join
blockchain B. To participate in the network, each supply chain
entity is required to run blockchain peer nodes with a pair
of public and private key pairs, {kp, ks}, for authentication.
For each traded commodity, e.g., milk and strawberry, a
Ccom contract
is deployed by both am and pn requiring
their signatures (multisig smart contract). The participants may
also deploy off-chain storage in which supplementary data is
stored, cf. Section III-B.

In SC, we deﬁne six supply chain transactions, which
provide a link between data layer Ldata and blockchain layer
Lbc. To illustrate how supply chain operations and transactions
are used in practice, we select yogurt supply chain as a use
case, which is illustrated in Fig. 3.

The supply chain process is commenced by importing raw
materials into blockchain B as digital assets. As a complement
to create operation (cf. (1)), create transaction invoked by a
producer pn is deﬁned as follows:

T xn

c = [ T xn

ID (cid:107) (cid:10)Dn,q

prop

(cid:11) (cid:107) timestamp (cid:107) Sigpn ]

(11)

where T xn
ID is the batch ID and Sigpn is the signature on
(cid:11) (cid:107)timestamp) using the signing key ksp for
hash((cid:10)Dn,q
prop
authentication. Ctrm contract assigns a default trust score for
(cid:11) may
(cid:98)tdef = 0 to dn,q. Here, some properties in (cid:10)Dn,q
include pointers and the hash of off-chain auxiliary data.

prop

Subsequently, pn is required to monitor the quality of dn,q.
Gateway node gn,k submits observational data (cid:104)vn
o , (cid:96)k(cid:105) to a
blockchain peer node over a secure channel to invoke monitor
transaction, which is deﬁned as:

T xn,k

m = [ T xn,k

ID (cid:107) vn

o (cid:107) (cid:96)k (cid:107) timestamp (cid:107) Sigpn ].

(12)

In this transaction, Ctrm contract updates the asset’s trust
score (cid:98)tn,q in each T xn,k
m transaction, cf. (6). Ctrm contract
also checks if any temperature reading is outside the expected
range, i.e., Vj,i /∈ [Tmin, Tmax] and emits an alert to warn the
participant pn when this occurs.

Suppose producer pn would like to produce a new batch
of strawberry yogurt from a batch of raw milk dn,q and
strawberry dn,(q+1), cf. (2). Producer pn is required to invoke
produce for capturing the production of strawberry yogurt,
which is deﬁned as follows:

T xn

p = [ T xn

ID (cid:107) (cid:10)Dn,q

prop

(cid:11) (cid:107) timestamp (cid:107) Sigpn ].

(13)

prop

Note that produce transaction records the commodity prove-
nance by appending the batch ID’s of source commodities to
(cid:10)Dn,q
(cid:11), as well as the source commodities’ trust scores, i.e.,
{(cid:98)tn,1, (cid:98)tn,2, . . .}. The new commodity is assigned a new trust
score from the average of the source commodities’ trust scores.
As a complement to inspect operation, cf. (4), food author-
ity am invokes inspect transaction to permanently store the
inspection report, which is deﬁned as:

T xm

i = [ T xi,m

ID (cid:107) em (cid:107) H(Rq) (cid:107) timestamp (cid:107) Sigpm ] (14)

where T xi,m
ID is a unique inspection ID and H(Rq) is the
hash of inspection report which is stored off-chain. In inspect
transaction, Ctrm updates the reputation score (cid:98)Rn based on
the new endorsement rating scores em,q, cf. (9).

Trade transaction is a multisig transaction, which has to be
signed by both seller and buyer to conﬁrm a purchase two

Milk Prdcr (p1)Strawberry Prdcr p2Yogurt Prdcr p3Distributor p4Retailer p5Food Auth. a1RawmaterialsMilk d1,1TxccreateRawmaterialsStrawberries d2,1TxccreateTxttradeTxttradeTxpproduceTxttradeTxttradeTxmmonitorTxmmonitorConsumerPurchaseREST APITxiinspectTxqqueryStrawberry yogurtd3,1Txiinspectparties, cf. (5). The trade transaction between participant pn
(seller) and pn+1 (buyer) is deﬁned as follows:

T xt = [ T xt

ID (cid:107) (cid:10)Dn,q

prop

(cid:11) (cid:107) tcx (cid:107) timestamp (cid:107) Sigp ]

(15)

where Sigp corresponds to the signature of both pn and pn+1.
Ctrm validates whether both parties have fulﬁlled the terms
and conditions tcx, after which Ctrm updates both (cid:98)Tn and
(cid:98)Rn scores accordingly for both parties, cf. (8) and (9). Note
that supplementary data for trade transaction can be stored
off-chain, while the hash is stored on-chain.

The ﬁnal strawberry yogurt product would be imprinted
with a QR code that would allow the consumers to query
the blockchain B for the provenance and trust scores for the
product. The consumer can access blockchain B through the
REST API in Lapp hosted by food authorities. The query
transaction is deﬁned as:

T xq = [ type (cid:107) timestamp ]

(16)

where type corresponds to trust and provenance of the product
or to check the quality of the ingredients. Note that query only
involves read operation and thus does not alter the state of
blockchain B.

VI. PROOF OF CONCEPT EVALUATION

In this section, we present proof-of-concept evaluation of
DeTRM, which includes evaluation of the proposed TRM and
performance evaluation of the blockchain implementation.

A. Implementation Details

We developed a proof-of-concept implementation of our
proposed framework, DeTRM, on Hyperledger Fabric v2.1, as
it natively supports creation of a permissioned blockchain en-
vironment and it has built-in compatibility for smart contracts,
referred to as chaincodes. We built a private docker container
network2 on an Intel Core i7-9700K CPU 3.6-GHz 8 cores
processor with 8 GB memory, running Ubuntu 18.04 LTS op-
erating system, where we conﬁgure four distinct organisations
to represent a producer, distributor, retailer, and food authority.
Here, each organisation runs two blockchain peer nodes to
communicate with each other and maintain the blockchain.
We consider a fault tolerant consensus mechanism of RAFT
protocol [23] as the ordering service, with with one main
communicating channel. We wrote all supply chain operations
and transactions as chaincodes in Go programming language3.
We used Hyperledger Caliper4, a blockchain benchmark tool,
to measure the performance of the blockchain network, e.g.,
throughput and latency for each transaction.

B. Experimental Results

To study the incurred overheads of DeTRM, we compare the
evaluation results against a baseline blockchain-based system,
which only records provenance and ownership change of
commodities without incorporating any TRM operation. In

2https://www.docker.com/products/docker-desktop
3https://go.dev/
4https://hyperledger.github.io/caliper/

addition, we compare DeTRM against TrustChain to observe
how trust and reputation evolves over time [6].

1) Trust model evaluation: We incorporate a decaying
constant γ in almost all trust and reputation calculation of our
trust model, cf. (6), (8), and (10). To study the effect of having
different values for γ, we simulate a scenario where an asset
dn,q is properly stored as per the quality and safety standard
and plot the evolution of (cid:98)tn,q for γ = {0.75, 0.80, 0.85, 0.90}
in Fig. 4. While different values of γ result
in different
weightings, (cid:98)tn,q converges to the same upper bound. However,
the higher the value of γ the more gradual (cid:98)tn,q grows, which
indicates that the growth of (cid:98)tn,q can be tuned according to
the nature of the commodity. For example, we can set a low
value for γ to get faster (cid:98)tn,q convergence rate for fast-moving
consumer goods, e.g. non-durable food products.

Next, we investigate the evolution of (cid:98)tn,q for four assets
under different practical scenarios, e.g., dn,1 stored in a normal
condition, dn,2 has 1 out of 7 faulty sensor nodes, dn,3 has 2
out of 7 faulty sensor nodes and dn,4 stored in an environment
that does not meet the temperature guidelines. Initially, all
assets receive appropriate treatments up to epoch = 30. We
plot the evolution of (cid:98)tn,q in Fig. 5, in which we set δmax = 1,
δmin = 0, and γ = 0.85. All scores commence at (cid:98)tn,q = 0
and continue to increase at an identical rate up to epoch = 30.
While (cid:98)tn,1 continues to plateau at the upper bound, (cid:98)tn,2, (cid:98)tn,3
and (cid:98)tn,4 begin to decline from epoch = 30. Here, different
scenarios result in different rates of decline, which is a useful
indicator of what is causing the decline of (cid:98)tn,q. Temperature
out of the ideal condition will trigger signiﬁcant decline ((cid:98)tn,4),
while sensor failures produce relatively gradual decline ((cid:98)tn,2
and (cid:98)tn,3). Note that, Ctrm contract will also emit warning
notiﬁcations to alert the owner, e.g., pn, of this abnormality.
Subsequently, pn can take immediate actions to remedy the
condition, such as replacing or re-calibrating the sensor nodes.
To see how DeTRM compares with the baseline [6], we
consider similar scenario as in Fig. 5, where an asset
is
stored in a temperature out of the ideal condition. We use
different modelling of the reputation score and plot the result
in Fig. 6, in which we use the parameters as recommended
in [6]. Ideally, the reputation should grow gradually followed
by a steep decline if an adversarial encounter happens. Our
reputation model ( (cid:98)Rn) exhibits stable and gradual increase of
reputation score, reaching the upper limit near epoch = 30.
Our model also shows a relatively higher rate of decline.
the reputation model of the baseline
On the other hand,
(Repsens) abruptly hits the upper limit when epoch < 10
and seems to be unstable. In addition, the decline during
non ideal temperature is hardly noticeable due to undesirable
ﬂuctuations. In summary, we argue that our model exhibits
better trust score evolution to model the reputation for a supply
chain participant.

2) Performance of blockchain implementation: In DeTRM,
we consider produce and trade transactions, i.e., T xp and T xt,
as important supply chain events. In these transactions, we
incorporate the TRM in addition to recording of ownership
change, which is a key distinction from other blockchain-based

Fig. 4. Convergence of (cid:98)tn,q for normal observa-
tions with variations of γ.

Fig. 5. Evolution of (cid:98)tn,q for abnormal storage
conditions.

Fig. 6. Comparison of reputation score evolution
for participant against the baseline [6].

Fig. 7. Comparison of CPU and memory consumption for produce and
trade transactions between DeTRM and the baseline.

Fig. 8. Throughput and latency for trade transactions with varying number
of transaction send rate.

SCMS. To study the associated overheads of implementing
additional TRM processes in an SCMS, we compare the
resource utilisation for T xp and T xt. We utilised Caliper
monitor module to measure CPU and memory consumption,
where we supplied a load of 500 transactions per second
(tx/second) to the blockchain network. Speciﬁcally, we looked
at CPU and memory consumption and compared the results
in Fig. 7. DeTRM introduced insigniﬁcant overheads in CPU
usage, which are relatively negligible for T xp. Furthermore,
DeTRM incurs a slightly lower memory footprint than the
baseline.

Next, we evaluate the performance of DeTRM against
the baseline for executing trade transactions T xt where we
increase the transaction load from 100 to 1000 tx/second. We
plot the results in Fig. 8. We measure throughput as the rate
at which all requested transactions are executed successfully,
while we consider latency as the overall time for completing a
transaction. Note that this deﬁnition excludes network latency,
which is generally inﬂuenced by various external factors. For
all values of transaction send rate, DeTRM achieved similar
throughput as the baseline, despite some additional TRM
processes. In addition, DeTRM demonstrated insigniﬁcant
latency overheads, which are hardly noticeable especially
for lower transaction send rate. We note that these perfor-
mance measures are achieved with our hardware speciﬁcations,
cf. Section VI-A, and would vary depending on the exact

hardware speciﬁcations and conﬁgurations.

VII. CONCLUSION

In this paper, we presented DeTRM, a decentralised TRM
framework for blockchain-based SCMS, which aims to over-
come trust issues in data and behaviour of supply chain partic-
ipants. We designed a layered architecture, namely physical,
data, blockchain and application, where trust is sourced from
sensor observations in the physical layer and adherence to
trading agreements in blockchain layer. Experimental results
indicated that DeTRM is feasible and only incurs minimal
overheads compared to the baseline. For future work, we
aim to conduct more extensive evaluation which considers a
real world SCMS and investigate the actual performance. In
addition, we plan to introduce fees and incentives mechanisms
in the SCMS and study the economic model and game theory
behind these mechanisms.

ACKNOWLEDGEMENTS

The authors acknowledge the support of the Commonwealth
of Australia and Cyber Security Cooperative Research Centre
for this work. This work was also supported by the Institute
of Information & Communications Technology Planning &
Evaluation (IITP) grant funded by Korea (MSIT) (2020-0-
01594, PSAI industry-academic joint research and education
program) and the ITRC (Information Technology Research
Center) support program (IITP-2021-2017-0-01633).

0102030405060Epoch0.00.20.40.60.8tn,q=0.75=0.80=0.85=0.900102030405060Epoch0.00.20.40.60.8tn,qNormalSensor error (n=1)Sensor error (n=2)Non ideal temperature0102030405060Epoch0.00.20.40.60.8Reputation ScoreDeTRM (Rn)Baseline (Repseller)TxpTxtTxpTxtCPU Usage                                  Mem. Usage020406080100CPU Usage (%)020406080100Memory (MB)CPU Usage           Mem. UsageDeTRMBaselineDeTRMBaseline1002003004005006007008009001000Tx send rate (Tx per second)02004006008001000Throuhgput (Tx per second)0.000.050.100.150.200.25Latency (s)Throughput                  LatencyDeTRMBaselineDeTRMBaselineissues and challenges,” IEEE IoT Journal, vol. 6, no. 2, pp. 2188–2204,
2019.

[21] V. Dedeoglu, R. Jurdak, G. D. Putra, A. Dorri, and S. S. Kanhere,
“A trust architecture for blockchain in IoT,” in Proceedings of the
16th EAI International Conference on Mobile and Ubiquitous Systems:
Computing, Networking and Services. Houston Texas USA: ACM, Nov.
2019, pp. 190–199.

[22] T. Dierks and E. Rescorla, “The transport layer security (tls) protocol

version 1.2,” 2008.

[23] D. Ongaro and J. Ousterhout, “In search of an understandable con-
sensus algorithm,” in 2014 USENIX Annual Technical Conference
(USENIX ATC 14), 2014, pp. 305–319.

REFERENCES

[1] H. Juma, K. Shaalan, and I. Kamel, “A Survey on Using Blockchain
in Trade Supply Chain Solutions,” IEEE Access, vol. 7, pp. 184 115–
184 132, 2019.

[2] P. Gonczol, P. Katsikouli, L. Herskind, and N. Dragoni, “Blockchain
Implementations and Use Cases for Supply Chains-A Survey,” IEEE
Access, vol. 8, pp. 11 856–11 871, 2020.

[3] A. Rejeb, J. G. Keogh, and H. Treiblmaier, “Leveraging the Internet
of Things and Blockchain Technology in Supply Chain Management,”
Future Internet, vol. 11, no. 7, p. 161, Jul. 2019.

[4] M. Tajima, “Strategic value of RFID in supply chain management,”
Journal of Purchasing and Supply Management, vol. 13, no. 4, pp. 261–
273, Dec. 2007.

[5] S. Sahai, N. Singh, and P. Dayama, “Enabling Privacy and Traceability in
Supply Chains using Blockchain and Zero Knowledge Proofs,” in 2020
IEEE International Conference on Blockchain (Blockchain). Rhodes
Island, Greece: IEEE, Nov. 2020, pp. 134–143.

[6] S. Malik, V. Dedeoglu, S. S. Kanhere, and R. Jurdak, “TrustChain: Trust
Management in Blockchain and IoT Supported Supply Chains,” in 2019
IEEE International Conference on Blockchain (Blockchain), Jul. 2019,
pp. 184–193.

[7] S. Malik, S. S. Kanhere, and R. Jurdak, “ProductChain: Scalable
Blockchain Framework to Support Provenance in Supply Chains,” in
2018 IEEE 17th International Symposium on Network Computing and
Applications (NCA). Cambridge, MA: IEEE, Nov. 2018, pp. 1–10.
[8] W. Powell, M. Foth, S. Cao, and V. Natanelov, “Garbage in garbage out:
The precarious link between IoT and blockchain in food supply chains,”
Journal of Industrial Information Integration, p. 100261, Aug. 2021.
[9] A. Shahid, A. Almogren, N. Javaid, F. A. Al-Zahrani, M. Zuair, and
M. Alam, “Blockchain-Based Agri-Food Supply Chain: A Complete
Solution,” IEEE Access, vol. 8, pp. 69 230–69 243, 2020.

[10] H. Li, K. Gai, L. Zhu, P. Jiang, and M. Qiu, “Reputation-Based
Trustworthy Supply Chain Management Using Smart Contract,” in
Algorithms and Architectures for Parallel Processing, ser. Lecture Notes
in Computer Science, M. Qiu, Ed.
Cham: Springer International
Publishing, 2020, pp. 35–49.

[11] D. Zhang, X. Xu, L. Zhu, and H.-Y. Paik, “A Process Adaptation Frame-
work for Blockchain-Based Supply Chain Management,” in 2021 IEEE
International Conference on Blockchain and Cryptocurrency (ICBC).
Sydney, Australia: IEEE, May 2021, pp. 1–9.

[12] G. D. Putra, V. Dedeoglu, S. S. Kanhere, and R. Jurdak, “Blockchain
in Cyber-physical Systems,”

for Trust and Reputation Management
arXiv:2109.07721 [cs], Sep. 2021.

[13] G. D. Putra, V. Dedeoglu, S. S. Kanhere, R. Jurdak, and A. Ignjatovic,
“Trust-Based Blockchain Authorization for IoT,” IEEE Transactions on
Network and Service Management, vol. 18, no. 2, pp. 1646–1658, Jun.
2021.

[14] G. F. Camilo, G. A. F. Rebello, L. A. C. de Souza, and O. C. M. B.
Duarte, “A Secure Personal-Data Trading System Based on Blockchain,
Trust, and Reputation,” in 2020 IEEE International Conference on
Blockchain (Blockchain), Nov. 2020, pp. 379–384.

[15] A. Moinet, B. Darties, and J.-L. Baril, “Blockchain based trust &
authentication for decentralized sensor networks,” arXiv:1706.01730
[cs], Jun. 2017.

[16] S. Mortimore and C. Wallace, HACCP: A practical approach. Springer

Science & Business Media, 2013.

[17] J. Frolik, M. Abdelrahman, and P. Kandasamy, “A conﬁdence-based
approach to the self-validation, fusion and reconstruction of quasi-
redundant sensor data,” IEEE Transactions on Instrumentation and
Measurement, vol. 50, no. 6, pp. 1761–1769, Dec. 2001.

[18] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin, K. Christidis,
A. De Caro, D. Enyeart, C. Ferris, G. Laventman, Y. Manevich,
S. Muralidharan, C. Murthy, B. Nguyen, M. Sethi, G. Singh, K. Smith,
A. Sorniotti, C. Stathakopoulou, M. Vukoli´c, S. W. Cocco, and J. Yellick,
“Hyperledger fabric: A distributed operating system for permissioned
blockchains,” in Proceedings of the Thirteenth EuroSys Conference,
ser. EuroSys ’18. New York, NY, USA: Association for Computing
Machinery, Apr. 2018, pp. 1–15.

[19] R. G. Brown, J. Carlyle, I. Grigg, and M. Hearn, “Corda: an introduc-

tion,” R3 CEV, August, vol. 1, p. 15, 2016.

[20] M. A. Ferrag, M. Derdour, M. Mukherjee, A. Derhab, L. Maglaras, and
H. Janicke, “Blockchain technologies for the internet of things: Research

