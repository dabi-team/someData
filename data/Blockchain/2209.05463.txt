2
2
0
2

p
e
S
5

]

Y
C
.
s
c
[

1
v
3
6
4
5
0
.
9
0
2
2
:
v
i
X
r
a

Modelling Business Agreements in the
Multimodal Transportation Domain
through Ontological Smart Contracts

Mario Scrocca 1, Marco Comerio, Alessio Carenini, and Irene Celino
Cefriel – Politecnico di Milano
Viale Sarca 226, 20126 Milano, Italy
e-mail: name.surname@cefriel.com

Abstract. The blockchain technology provides integrity and reliability of the in-
formation, thus offering a suitable solution to guarantee trustability in a multi-
stakeholder scenario that
involves actors deﬁning business agreements. The
Ride2Rail project investigated the use of the blockchain to record as smart con-
tracts the agreements between different stakeholders deﬁned in a multimodal trans-
portation domain. Modelling an ontology to represent the smart contracts enables
the possibility of having a machine-readable and interoperable representation of
the agreements. On one hand, the underlying blockchain ensures trust in the execu-
tion of the contracts, on the other hand, their ontological representation facilitates
the retrieval of information within the ecosystem. The paper describes the devel-
opment of the Ride2Rail Ontology for Agreements to showcase how the concept
of an ontological smart contract, deﬁned in the OASIS ontology, can be applied to
a speciﬁc domain. The usage of the designed ontology is discussed by describing
the modelling as ontological smart contracts of business agreements deﬁned in a
ride-sharing scenario.

Keywords. business agreement, ontological smart contracts, multimodal transportation

1. Introduction

In the context of multimodal transportation, a wide set of stakeholders should cooperate
to provide passengers with a seamless travel experience. The Shift2Rail Innovation Pro-
gramme 42 (IP4) investigated the design and implementation of an ecosystem of trans-
portation stakeholders relying on an Interoperability Framework to support the commu-
nication among them and the deﬁnition of new services for the users. In this context, the
Ride2Rail project3, focused its attention on the integration of ride-sharing alternatives.

The introduction of new transportation modes, such as ride-sharing, poses additional
challenges related to a business environment blending companies and private actors. For
this reason, Ride2Rail investigated the usage of blockchain technology to offer suitable

1Corresponding Author. E-mail: mario.scrocca@cefriel.com
2Shift2Rail IP4, https://rail-research.europa.eu/research-development/ip4/
3Ride2Rail, https://ride2rail.eu/

 
 
 
 
 
 
Scrocca et al., Modelling Ontological Smart Contracts (2022)

guarantees for trust in a multi-stakeholder scenario involving the deﬁnition of business
agreements. Ride2Rail developed a speciﬁc software module for the deﬁnition of busi-
ness agreements as smart contracts, i.e, executable software applications that implement
self-executing logic in a blockchain. A smart contract could be implemented as a tool to
automate the execution of an agreement that will run when certain conditions are met.

To foster the semantic interoperability of the developed module within the IP4
ecosystem, we designed and adopted an ontology to model the deﬁned agreements
through a shared semantic and decoupling the speciﬁcation of the agreements from its
technological implementation. This paper describes the development of such ontology
and its application within the Ride2Rail project to describe business agreements in the
considered ride-sharing scenario. The main contributions of the paper are: (i) analysis of
the literature surveying approaches for an ontological representation of smart contracts,
(ii) design and development of an ontology for the deﬁnition of business agreements in
a multimodal transportation scenario, and (iii) validation of the ontology and exempliﬁ-
cation of its usage.

The developed Ride2Rail Ontology for Agreements leverages the concept of Onto-
logical Smart Contract deﬁned in the OASIS ontology [1] and investigates how it can
be extended to model the semantic of business agreements. Although we focused our
work on the transportation domain, the proposed approach can be generalised to model
ontological smart contracts in different domains.

The remainder of the paper is structured as follows: Section 2 discusses prelimi-
naries regarding the context, terminology and methodology followed; Section 3 frames
the work considering the state-of-the-art; Section 4 describes the ontology engineering
process and the implemented ontology; Section 5 exempliﬁes the usage of the ontol-
ogy reporting how it is used to describe the agreements deﬁned within the Ride2Rail
project; Section 6 draws the conclusions, discusses how the proposed approach can be
generalised and future work.

2. Preliminaries

This section presents a preliminary introduction to the context and terminology analysed
in the paper and the methodology adopted.

2.1. Context

The Ride2Rail project investigated the speciﬁc requirements of ride-sharing for its inte-
gration in the multimodal transport ecosystem deﬁned in IP4. The idea behind Ride2Rail
is to consider each driver (i.e., a user offering a shared ride with her/his car) as a private
transport service provider (TSP) offering transportation services on a speciﬁc route. The
challenges of such an integration are multiple, for example, the need for a user applica-
tion that could allow passengers to become a driver offering a ride with their own vehicle,
or the need for a dynamic update of shared rides published by drivers for the multimodal
journey planning. Moreover, a major challenge is related to how to guarantee trust in an
environment where private actors can offer, along with companies, a paid transportation
service to passengers. For this reason, the Agreement Ledger Module was designed and
developed in Ride2Rail exploiting the blockchain technology to guarantee trust in the

Scrocca et al., Modelling Ontological Smart Contracts (2022)

deﬁnition of agreements between parties (TSPs, drivers and passengers). The Agreement
Ledger Module is a software module exposing through an API a set of functionalities
relying on smart contracts deployed on a distributed ledger for the digital representa-
tion and execution of business agreements. The overall design and implementation of the
Agreement Ledger Module is documented in the project deliverable [2].

The objective of the ontology engineering activity described in this paper is not to
transpose ontologically the content of the ledger, but to identify and provide a semantic
description of the contracts implemented so that they can facilitate interoperability within
IP4 and their comprehension from IP4 stakeholders.

For this purpose, the Ride2Rail Ontology for Agreements aims at identifying a set of
classes and properties to represent the agreements between parties that could be imple-
mented through the Agreement Ledger Module. In this paper, we demonstrate how the
following agreements could be described using the ontology:

• The Ridesharing Booking, as an agreement between a driver and a passenger.
• The Incentive, as an agreement between different parties to grant, according to
a set of conditions, a reward that could promote more sustainable transportation
alternatives.

2.2. Terminology

In the IP4 scenario, a user with a mobility need can interrogate an application for pas-
sengers that is able to process a mobility request and return a set of multimodal offers to
cover the itinerary between the required origin and destination. Each offer is associated
with a trip and a set of offer items that the passenger can book to be entitled to travel
according to the proposed trip. In the general case, a trip is composed of multiple travel
episodes, i.e., multimodal trip legs, offered by different travel expert systems, provided
by different operators and combined to generate a trip.

In this context, the following terminology is introduced for the considered scenario:

• a lyft is deﬁned as a ride-sharing leg in the (multi-modal) trip of a passenger,

therefore, it is a travel episode for ridesharing;

• a ride is the transportation service offered by a driver that enables a travel episode

for one or more passengers;

• a ridesharing booking represents the booking made by a passenger of an offer item

associated with a ride offered by a driver;

• a Crowd-based Travel Service Provider is a travel expert system handling offer

items for the rides offered by a set of drivers;

• an incentive is an agreement between parties that is offered by an incentive
provider deﬁning the incentive mechanism and incentive conditions for granting
it.

A more detailed discussion of the presented terminology can be found in the

Ride2Rail deliverables [3,4,5].

2.3. Methodology

The methodology adopted for the deﬁnition of the ontology is based on Linked Open
Terms (LOT) [6], a consolidated industrial method to develop ontologies and glossaries.

Scrocca et al., Modelling Ontological Smart Contracts (2022)

The LOT methodology is divided into four steps: ontology requirements speciﬁcation,
ontology implementation, ontology publication and ontology maintenance. In the fol-
lowing paragraphs, we brieﬂy discuss the ﬁrst three steps of the methodology performed
to design and implement the Ride2Rail Ontology for Agreements.

The ontology requirements speciﬁcation consists of the deﬁnition of the ontology
requirements considering the purpose and scope of the ontology, domain analysis and an
investigation of the existing data ﬂows. The activity starts with the identiﬁcation of a set
of use cases and user stories for the ontology. A use case should answer the following
questions: Who will be the actors interested in querying the ontological data? What are
the expected usages of data modelled through the ontology?

Considering the use cases and user stories deﬁned and the domain analysis per-
formed, then the ontological requirements are speciﬁed in the form of competency ques-
tions and facts. The set of competency questions deﬁnes, in the form of hypothetical
questions associated with a user story, the information that should be possible to retrieve
from data modelled using the ontology. The set of facts describes the semantics and the
requirements associated with the domain-speciﬁc terminology (e.g., attributes describ-
ing a speciﬁc term, etc.). In this phase, domain experts and stakeholders, are involved to
ensure a comprehensive set of ontological requirements is speciﬁed.

The second step is the implementation of the ontology. Considering the require-
ments, a ﬁrst conceptual model is produced with the required set of classes and prop-
erties. Then, in line with the best practices of ontology engineering, the relevant and
already existing vocabularies are analysed to assess the possibility of reusing them.

Finally, the actual ontology is coded in the OWL language and it is validated with
the support of automatic diagnosis tools and by manually assessing it with respect to the
ontological requirements speciﬁed.

The third step is the documentation and publication of the ontological model.

3. Related work

Blockchain-based solutions and Semantic Web technologies are complementary and may
beneﬁt each other. Many researchers are investigating how to combine these technologies
and also the European Commission is supporting this research area. As an example,
we cite the H2020 ONTOCHAIN4 project ﬁnanced under the Next Generation Internet
initiative.

Different approaches combining these two areas are reported in the literature. J.
Cano-Benito et al. discuss in [7] six different scenarios: (a) blockchain with semantic
meta-data, (b) blockchain with RDF content, (c) blockchain and virtual RDF service to
publish its content, (d) blockchain with external pointers to RDF data, (e) blockchain ref-
erencing another blockchain through RDF, (f) semantic blockchain implemented relying
on Semantic Web.

The implementation of the mentioned scenarios relies on the deﬁnition of ontolo-
gies to model the content of the blockchain. In Ride2Rail, we were interested in inves-
tigating how smart contracts implemented on the blockchain could be described using
an ontology. This approach addresses two interoperability needs: (i) the description in

4https://ontochain.ngi.eu/

Scrocca et al., Modelling Ontological Smart Contracts (2022)

an implementation-independent way of the smart contracts deﬁned according to a spe-
ciﬁc blockchain-based solution, and (ii) the adoption of proper and shared terminology
to describe domain entities and their relationships. Moreover, even if out of scope for the
Ride2Rail project, it can foster the implementation of virtual RDF services to query the
content of the blockchain using the ontology (scenario c.).

In the following paragraphs, we analyse existing vocabularies that were considered

to evaluate their re-use in the implementation of the ontology.

3.1. Smart Contracts and Ontologies

In the analysis of the literature, we found relevant related work regarding the deﬁnition
of ontologies for smart contracts.

The paper Ontologies for Commitment-Based Smart Contracts [8] deﬁnes a
platform-independent conceptualization of smart contracts, however, as mentioned also
by the authors in their conclusions, it represents an initial model that should be reﬁned
and evaluated before being ﬁnally implemented and published as an ontology.

Kruijff and Weigand in Understanding the Blockchain Using Enterprise Ontol-
ogy [9] adopt an ontology-based approach to formalise the terminology related to the
blockchain, including smart contracts, but the proposed modelling considers a higher
level of abstraction and doesn’t allow for the detailed description of a speciﬁc smart con-
tract. Moreover, the authors mention that the presented ontology is still an initial model
to be validated and ﬁnalised.

Similarly, the Ontology for Smart Contracts proposed by McAdams [10] identiﬁes
the basic terminology for a conceptualisation of smart contracts that could aid in imple-
menting formal reasoning over their behaviour. The proposed contribution is, however,
not implemented as an ontology yet.

Finally, the paper Ontological Smart Contracts in OASIS [1] deﬁnes the concept of
Ontological Smart Contract extending the OASIS ontology for agents, systems, and inte-
gration of services [11]. The proposed ontology deﬁnes the concept of a smart contract
as an entity to deﬁne agreements between agents and specify their terms, independently
from the speciﬁc blockchain implementation. Differently from the other work in the lit-
erature, the OASIS ontology is fully implemented in OWL, published online and its us-
age is documented and exempliﬁed by the authors. Moreover, we contacted the authors
that provided us with additional documentation to re-use the vocabulary and conﬁrmed
that a plan for the maintenance of the ontology is in place. For these reasons, we decided
to adopt this vocabulary as a basis for our work.

In this paper, we discuss how the OASIS ontology can support the modelling of
ontological smart contracts considering different blockchain technologies, and how it can
be extended and leveraged to model business agreements in different domains. Indeed,
the usage of the OASIS ontology is exempliﬁed in [1] considering a trading agent selling
stocks and the Ethereum platform, while, in Section 5, we consider agreements in the
transportation domain implemented through the Hyperledger Fabric API5.

5https://github.com/hyperledger/fabric-contract-api-go

Scrocca et al., Modelling Ontological Smart Contracts (2022)

3.2. IP4 Ontologies

To support the deﬁnition of domain-speciﬁc classes and properties, and to support in-
teroperability within IP4, we analysed the current status of the ontologies for the multi-
modal transportation domain deﬁned in the context of IP4.

The IP4 ontology is currently undergoing an in-depth process of modularization and
extension [12] considering already standardized formats (e.g., Transmodel6, OSDM7,
TRIAS8, GTFS-RT9 etc.). A preliminary release of the new modules of the IP4 ontology,
currently under ﬁnalisation is available on Github10. The two already available modules
of the IP4 ontologies address the Transmodel concepts (Core, Commons, Fares, Facilities
and Journeys submodules) [13] and the Open Sales and Distribution Model (OSDM)
speciﬁcation to model the booking process.

4. Ontology for Agreements

The objective of the Ride2Rail Ontology for Agreements is to provide a conceptualiza-
tion of the basic terms for the description of the business agreements deﬁned in the mul-
timodal transportation context discussed in Section 2.1. The ontology takes into account
the terminology (Section 2.2) and the ontologies already deﬁned within IP4 (Section 3.2)
to support interoperability through shared semantics.

The following sections describe the application of the presented methodology (Sec-
tion 2.3) for the design, implementation and publication of the Ride2Rail Ontology for
Agreements.

4.1. Ontological Requirements Speciﬁcation

This section describes the ontological requirements identiﬁed for the Ride2Rail Ontol-
ogy for Agreements. The collection of requirements leveraged the analysis of the overall
requirements deﬁned for the Ride2Rail project and the speciﬁc ones identiﬁed for the
implementation of the Agreement Ledger Module. Furthermore, additional stakeholders
from the transportation domain were involved to take into account additional considera-
tions from the project consortium and other IP4 actors.

Two use cases were identiﬁed to support the deﬁnition of the ontology.

UC1 – Dispute Resolution about Ridesharing

Description: in case of a dispute between a driver and a passenger regarding a booked
ride, the responsible authority wants to access trusted data to resolve it.
Stakeholders: Driver, Passenger, Authority
Workﬂow: The responsible authority analyses the details of the booking agreement be-
tween the driver and the passenger obtaining trusted information that can help in solving
the dispute.

6https://www.transmodel-cen.eu/
7https://unioninternationalcheminsdefer.github.io/OSDM/
8https://github.com/VDVde/TRIAS
9https://developers.google.com/transit/gtfs-realtime
10Working repository https://github.com/oeg-upm/mobility

Scrocca et al., Modelling Ontological Smart Contracts (2022)

UC2 – Incentives to promote Ridesharing

Description: travellers (both drivers and passengers) are given incentives to involve ride-
sharing in their multimodal rides.
Stakeholders: Passenger, Driver, Travel Service Provider
Workﬂow: Incentives are represented as ontological smart contracts and can be queried
to get information about the conditions and mechanisms of available incentives within
IP4.

For each use case, different user stories considering the stakeholders involved were
identiﬁed. Finally, a set of facts and competency questions was deﬁned considering: (i)
the use cases and user stories deﬁned, (ii) the analysis of the business agreements mod-
elled on the blockchain, and (iii) the relevant terminology in the considered domain.

Table 1 contains the competency questions identiﬁed for the two use cases, terms
starting with a capital letter are concepts described in facts. The complete list of user
stories, facts and competency questions is reported in the ontology repository11.

Competency Question

Expected Result

is

the origin/destination of

What
the
Ridesharing Leg offered by the Driver and
booked by the Passenger?
What is the price agreed upon between the
Driver and the Passenger?

What is the number of seats declared by a
Driver offering a Ride?
What are the incentive agreements involving
a TSP as an incentive provider?
What are the conditions deﬁned for a given
Incentive?
Is there a tangible good or beneﬁt associated
with a given Incentive?

of

for

Origin/Destination
the
Ridesharing Leg involved in
the Ridesharing Booking
Price
the
agreed
Ridesharing Leg involved in
the Ridesharing Booking
Number of seats associated
with a Ride
Incentives involving a TSP in
the agreement
the
Conditions deﬁned for
applicability of the Incentive
Beneﬁt associated with the
Incentive

Use case

UC1

UC1

UC1

UC2

UC2

UC2

Table 1.: Competency Questions identiﬁed for the Ontological Requirements
Speciﬁcation

4.2. Ontology Implementation

To support the ontology implementation phase, we adopted the Chowlk12 notation and
converter [14] that allows building the conceptual model graphically and then to directly
obtain a ﬁrst serialization of the ontology in OWL.

The design of the conceptual model, starting from a glossary of terms extracted from
the ontological requirements, went through several iterations considering also the out-
comes of the review of already available ontological and non-ontological data formats.

To facilitate the description of the ﬁnal conceptual model, we ﬁrst discuss the reused
vocabularies to model the ontological smart contracts and the domain terminology. Then,

11https://github.com/Ride2Rail/agreement-ledger-ontology/tree/main/requirements
12https://chowlk.linkeddata.es/

Scrocca et al., Modelling Ontological Smart Contracts (2022)

we present the ﬁnal version of the ontology through the Chowlk notation. Using the di-
agram, we motivate our design decisions by describing the introduced classes and prop-
erties and the alignment with the re-used vocabularies.

4.2.1. Ontological Smart Contracts

The Ontology for Agents, Systems, and Integration of Services (OASIS) is published on-
line13 with the namespace http://www.dmi.unict.it/oasis.owl# (oasis: preﬁx).
An ontological smart contract in OASIS (oasis:SmartContract) is modelled deﬁning
the set of entries involved in the agreement (oasis:SmartContractEntry) and the set of
conditionals (oasis:ConditionalSet) specifying the terms of the agreement. Agreement
instances are modelled through the class oasis:SmartContractInstance and they are as-
sociated with a speciﬁc oasis:SmartContract.

A oasis:SmartContractEntry can be of class oasis:SmartContractEntryParticipant,

describing a participant involved in the agreement, or class oasis:SmartContractEntry
Value, describing values involved. Each oasis:SmartContractEntry can be described us-
ing the property oasis:refersExactlyTo, if it refers to a speciﬁc individual for each in-
stance of the described agreement, or using the property oasis:refersAsNewTo, if it
describes an individual through an oasis:EntryTemplate. An oasis:EntryTemplate al-
lows to specify the features that an oasis:SmartContractEntry should have in an oa-
sis:SmartContractInstance of the modelled oasis:SmartContract.

The terms of the agreements are modelled using oasis:Conditional, which repre-
sent an implication between an antecedent (oasis:ConditionalBody) and consequent (oa-
sis:ConditionalHead). Whenever the conditions speciﬁed in the antecedent hold, then the
conditions speciﬁed in the consequent must also hold. Both an oasis:ConditionalBody
and an oasis:ConditionalHead can specify multiple conditions modelling different oa-
sis:ConditionalAtom. All the oasis:ConditionalAtom should be satisﬁed to satisfy the
antecedent/consequent. A oasis:ConditionalAtom can be described through:

• oasis:ConditionalSubject: representing the subject;
• oasis:ConditionalObject: representing the object;
• oasis:ConditionalOperator: representing actions (oasis:Action) from subject(s) to

object(s);

• oasis:ConditionalParameter: representing a parameter of the action described
by the operator (the two subclasses oasis:ConditionalInputParameter and oa-
sis:ConditionalOutputParameter representing an input and an output parameter,
respectively);

• oasis:ConditionalOperatorArgument: representing operator arguments for a sub-

ordinate characteristic of the operator

Also in the modelling of conditionals, an oasis:EntryTemplate can be leveraged to

specify the features that the entities involved in the conditional.

4.2.2. Domain Terminology

For the deﬁnition ontology, considering the elicited requirements, we focused mainly on
the OSDM module of the IP4 ontologies. The namespace for the considered ontology is
https://w3id.org/mobility/

13OASIS ontology https://www.dmi.unict.it/santamaria/projects/oasis/oasis.php

Scrocca et al., Modelling Ontological Smart Contracts (2022)

osdm/core# (osdm: module), but the publication process is not ﬁnalised yet. In partic-
ular, we reused classes and properties related to the concepts of:

• osdm:Offer: deﬁned as “a response to a customer mobility request as a result of
the travel shopping process, it is composed of offer item(s) for service(s) designed
to cover each proposed journey, and, optionally, ancillary services”.

• osdm:Booking: deﬁned as “an operational process as part of the sales process to
commit to a sales transaction binding the customer and supplier to the offer”.

To complement the set of classes and properties already available in the IP4 ontolo-
gies, the MaaSive Glossary and the conceptualisation effort made in Ride2Rail WP2.1
(Deliverable D2.1 [3] and D2.4 [4]) and WP3.1 (Deliverable 3.1 [5]) were taken into
account as non-ontological resources to improve the semantic interoperability of entities
modelled in our ontology.

4.2.3. Ride2Rail Ontology for Agreements

The implementation of the Ride2Rail Ontology for Agreements is based on the decision
to reuse the oasis:SmartContract as the class to model a business agreement. Our claim
is that concept of oasis:SmarContract is modelled in the OASIS ontology using a generic
approach that can be extended and applied to different domains once identiﬁed a suitable
vocabulary for the representation of the domain terminology. An oasis:SmarContract
not only enables the representation of the agreement and the entities involved a oa-
sis:SmartContractEntry, but also a detailed model of the terms of the agreements as oa-
sis:Conditionals. The main objective of the ontology is to complement the current IP4
ontologies and extend the OASIS ontology providing the needed terminology to model
ontological smart contracts in the multimodal transportation domain.

Figure 1 adopts the Chowlk notation to describe the classes and properties modelled
and their relations with reused vocabularies. The namespace selected for publication is
https://w3id.org/ride2rail/terms# (r2r: preﬁx).

Figure 1. Chowlk diagram for the Ride2Rail Ontology for Agreements

Scrocca et al., Modelling Ontological Smart Contracts (2022)

To support the modelling of the oasis:SmartContract for a ridesharing book-
ing, the class r2r:RidesharingBooking is deﬁned as a subclass of osdm:Booking. An
osdm:Booking is associated with the booked osdm:Offer and the osdm:Price paid for
the offer. An osdm:Offer represents the pair between a computed osdm:Trip and the set
of products (osdm:OfferPart) offered to an osdm:Passenger and required to perform the
trip.

The ontology extends the concept of osdm:Offer deﬁning an r2r:OfferItem to model
the corresponding term in the IP4 glossary (an offer item is part of an offer, which
is provided by a single TSP). As a result, r2r:RidesharingBooking is associated with
an r2r:OfferItem provided by a ridesharing TSP, i.e. the Crowd-based TSP in the ride-
sharing scenario.
The ontology also deﬁnes two classes, r2r:TravelEpisode and r2r:TransportationService
to model, respectively, the IP4 concepts of travel episode (”part of a trip operated with
the same vehicle”) and transportation service (”service that provides transportation on
a travel episode”). An osdm:Trip may include multiple r2r:TravelEpisode (possibly
aligned with the concept of osdm:Segment), an r2r:TravelEpisode may be operated by
an r2r:TransportationService.
An r2r:OfferItem for an r2r:RidesharingBooking, is associated with an r2r:RidesharingLeg
(subclass of r2r:TravelEpisode) that is made possible through an r2r:Ride (subclass of
r2r:TransportationService) operated by an r2r:Driver. In this sense, r2r:Driver extends
the concept of tmorg:Operator.

As speciﬁed in the requirements, an r2r:Ride may specify an r2r:InventoryAllocation
that indicates a given quantity of available consumables (r2r:Consumable). The ontology
deﬁnes r2r:Seat as an individual of the class r2r:Consumable. An r2r:InventoryReservation
(subclass of osdm:Reservation) can be associated with an r2r:OfferItem deﬁning the
number of consumables reserved by the corresponding booking.

To support the modelling of incentives, the class r2r:IncentiveSmartContract is
deﬁned as subclass of oasis:SmarContract. The ontology also models the concept of
r2r:Voucher to deﬁne a redeemable good issued by a tmorg:Organisation. Two sub-
classes are deﬁned for r2r:Voucher to model the mechanisms of the incentives imple-
mented in Ride2Rail: a r2r:DiscountVoucher allowing to model a certain percentage of
discount granted to the beneﬁciary of the voucher, and a r2r:SeatUpgradeVoucher grant-
ing an upgrade of seat class for the beneﬁciary.
To express the incentive conditions deﬁned in the requirements, the ontology also de-
ﬁnes two oasis:Action individuals, r2r:issue and r2r:book, that can be used as oa-
sis:ConditionalOperator in the modelling of conditionals for an oasis:SmartContract.

Finally, to model the events that can be associated with a ridesharing booking we

decided to implement a SKOS14 Concept Scheme.

As deﬁned in the requirements, ﬁve events are identiﬁed in the ﬁrst level of the tax-
onomy: RidesharingStarted for the start of the ride associated with the ridesharing book-
ing, RidesharingCompleted for the completion of the ride associated with the ridesharing
booking, RidesharingCancelled for the cancellation of the ridesharing booking by the
passenger or by the driver, RidesharingDelayed for a delay in the ride due to the pas-
senger or to the driver, RidesharingNoShow for a passenger or a driver not showing as
expected for the booked ridesharing.

14https://www.w3.org/2004/02/skos/

Scrocca et al., Modelling Ontological Smart Contracts (2022)

The modelled ontology was validated against the ontological requirements and us-
ing OOPS! [15] as the state-of-the-art tool for automatic diagnosis of anomalies in the
ontology15.

4.3. Ontology Publication

The Ride2Rail Ontology for Agreements is published online following the best prac-
tices for ontology publication at https://w3id.org/ride2rail/terms# (r2r: pre-
ﬁx). We adopted the w3id service for permanent identiﬁers16, and we implemented
content negotiation to serve the ontology in different human-readable and machine-
readable formats17. The Widoco [16] tool was used to generate the ontology docu-
mentation, then complemented through diagrams and the description of the main de-
sign decisions. The SKOS taxonomy for ridesharing booking events is published at
https://w3id.org/ride2rail/rb-events# (rbe: preﬁx) using a similar approach.
The license adopted is the Creative Commons with Attribution right (CC-BY),
which allows licensees to copy and distribute the work and make derivative works, giving
the authors proper credits.

All the material related to the ontology and the artifacts produced during the ontol-
ogy engineering process are hosted on Github under the Ride2Rail organisation in the
repository https://github.com/Ride2Rail/agreement-ledger-ontology.

5. Modelling Business Agreements

In this section, we exemplify the usage of the deﬁned Ride2Rail Ontology for Agreements
discussing the RDF representation of the business agreements implemented through the
Agreement Ledger Module in the Ride2Rail project, i.e., the ridesharing booking and the
incentives. We decided to distinguish between the ontology and the agreements since the
deﬁnition of different business agreements (e.g. different conditionals and incentives) is
made possible by relying on the implemented ontology.

The RDF dataset is published at https://w3id.org/ride2rail/agreements#
(ag: preﬁx) and hosted on Github18. A Chowlk diagram is provided in the ontology
documentation for each oasis:SmartContract19. In the following, we discuss the deﬁned
agreements and the expected usage of the terms in the considered scenario.

The ﬁrst agreement is the ag:RidesharingBookingSmartContract that deﬁnes the
entities associated with a ridesharing booking and their relations. Figure 2 represents
the Chowlk diagram describing the modelled oasis:SmartContract. An ag:Ridesharing-
BookingSmartContract involves an r2r:Driver and an osdm:Passenger as participants in
an r2r:RidesharingBooking. The agreement speciﬁes that the r2r:RidesharingBooking
is associated with an r2r:OfferItem for the passenger, that has a speciﬁc osdm:Price, is
associated with an r2r:RidesharingLeg, and includes an r2r:InventoryReservation. The

15A report of the validation is available in the ontology repository https://github.com/Ride2Rail/

agreement-ledger-ontology

16https://w3id.org/
17Recipe 3 from https://www.w3.org/TR/swbp-vocab-pub
18https://github.com/Ride2Rail/agreement-ledger-ontology/tree/main/agreements
19The Chowlk diagrams for the deﬁned r2r:IncentiveSmartContracts are available also in the repository

https://github.com/Ride2Rail/agreement-ledger-ontology/tree/main/docs/diagrams

Scrocca et al., Modelling Ontological Smart Contracts (2022)

Figure 2. Diagram describing the RidesharingBookingSmartContract agreement.

r2r:RidesharingLeg has as transportation service an r2r:Ride offered by the driver with
a speciﬁc r2r:InventoryAllocation.

The ag:RidesharingBookingSmartContract does not deﬁne any oasis:Conditional
since the terms of the agreement are not directly modelled through the Agreement Ledger
Module. Table 2 deﬁnes examples of oasis:Conditional that can be deﬁned exploiting the
ontology, in particular, leveraging the ride-sharing booking events taxonomy. Example 1
describes the fact that the money from the passenger should be transferred to the driver
if the ride is correctly started and ended, examples 2 and 3 describe potential refund
policies if the driver doesn’t show up or cancels the ride.

The Agreement Ledger Module implemented in Ride2Rail deﬁnes three agreements
related to incentives, i.e., three r2r:IncentiveSmartContract: Ride with other passen-
gers (ag:RideWithOtherPassengersIncentive), Multimodal discount (ag: MultimodalD-
iscountIncentive), Multimodal repetition discount (ag:MultimodalDiscountIncentive3).
Table 3 summarises the deﬁned agreements reporting the oasis:SmartContractEntry
involved and the modelled oasis:Conditional. All the agreements are between an
osdm:Passenger and a tmorg:Operator, then:

• ag:RideWithOtherPassengersIncentive deﬁnes a conditional specifying that if the
passenger books a ride also booked by another passenger, then the TSP issues an
r2r:SeatUpgradeVoucher to the passenger;

• ag:MultimodalDiscountIncentive deﬁnes a conditional specifying that if the pas-
senger books a multimodal ride involving an r2r:RidesharingLeg and at least an-
other leg, then the TSP issues an r2r:DiscountVoucher of 10% to the passenger;
• ag:MultimodalDiscountIncentive3 deﬁnes a conditional specifying that if the pas-
senger books a multimodal ride involving an r2r:RidesharingLeg and at least an-
other leg for three times, then the TSP issues an r2r:DiscountVoucher of 20% to
the passenger.

Scrocca et al., Modelling Ontological Smart Contracts (2022)

Conditional

Entities

Participant

Body

Head

Value

Subject

Operator

Subject
Input
Parameter
Operator
Output
Parameter
Object

example-1
Passenger
Driver
Ridesharing
Booking
Ridesharing
Booking
is associated
with

Passenger

Price

pay

-

example-2
Passenger
Driver
Ridesharing
Booking
Ridesharing
Booking
is associated
with
Cancelled
Driver
-

-

refund

Price

example-3
Passenger
Driver
Ridesharing
Booking
Ridesharing
Booking
is associated
with
No Show
Driver
-

-

refund

Price

Passenger
Table 2.: Example of oasis:Conditional for a ride-sharing booking smart contract.

Passenger

Driver

Object

Start Event, End Event

Incentive Smart Contract

Entities

Participant

Body

Subject

Operator

Operator
Argument

Ride
With Other
Passengers
Incentive
Passenger P1
Travel Service
Provider TSP
Passenger P1,
Passenger P2
makes
a booking

-

Multimodal
Discount
Incentive

Passenger P1
Travel Service
Provider TSP

Passenger

makes
a booking

-

Multimodal
Repetition
Discount
Incentive
Passenger P1
Travel Service
Provider TSP

Passenger

makes
a booking

3 times

Object

Ride R1

Head

Subject
Operator

Object

TSP
issue
Seat Upgrade
Voucher for
Passenger P1

Offer for a
Trip involving a
Ridesharing Leg
and another Leg
TSP
issue
10% Discount
Voucher for
Passenger

Offer for a
Trip involving a
Ridesharing Leg
and another Leg
TSP
issue
20% Discount
Voucher for
Passenger

Table 3.: IncentiveSmartContracts implemented in Ride2Rail

The described oasis:SmartContracts not only enable the sharing of the modelled
business agreements between the IP4 stakeholders, but also the representation of smart
contract instances stored on the blockchain to support the use cases deﬁned.

Scrocca et al., Modelling Ontological Smart Contracts (2022)

6. Conclusions

In an ecosystem comprehending various stakeholders, the implementation of business
agreements through a distributed ledger provides several beneﬁts regarding information
trust and the automatic execution of the agreed terms modelled as smart contracts. This
approach, however, doesn’t provide any guarantee about the interoperability of the de-
ﬁned agreements from a technological and semantic perspective. On one hand, the do-
main terminology shared among the involved stakeholders should be referenced by the
modelled entities, on the other hand, other software systems can beneﬁt from a machine-
readable representation of the agreements.

The concept of ontological smart contract, deﬁned in the OASIS ontology, supports
the representation of business agreements independently from their implementation and
relying on standardised vocabularies. The deﬁned Ride2Rail Ontology for Agreements
enables the application of this concept to support the interoperability of business agree-
ments in the multimodal transportation scenario considered by the Ride2Rail project.
Two use cases were considered: the representation of the ride-sharing booking as an
agreement between the driver and the passengers for dispute resolution, and the deﬁni-
tion of incentives as agreements between different stakeholders to promote the usage of
multimodal transportation. In the paper, we validated and exempliﬁed the usage of the
ontology by modelling the speciﬁc business agreements implemented in the project on
the ledger.

The discussed approach can be generalised to support an ontological representation
of smart contracts in different domains. The following steps summarise the discussed
activities: (i) investigation of the business agreements to be modelled in the considered
scenario (use cases and user stories), (ii) analysis of the domain terminology covered by
the business agreements (facts and competency questions), (iii) identiﬁcation of existing
vocabularies covering the relevant domain entities and relationships, and/or implemen-
tation of an ontology supporting their representation, (iv) modelling of each business
agreement as an ontological smart contract identifying the involved entities and the terms
of the agreement, and, optionally, (v) representation of speciﬁc entities of the business
agreement stored on the ledger using the ontology. In this way, different stakeholders
are able to access through uniform terminology a description of the smart contracts and,
possibly, their instances.

In future work, we will investigate the materialisation/virtualisation of smart con-
tracts and/or related instances from the blockchain to enable querying according to the
deﬁned ontology. In particular, we will explore the conﬁguration of semantic conver-
sion pipelines [17] and the exploitation of the obtained knowledge graph. Moreover, we
would like to extend the scope of the deﬁned ontology to enable the representation of
heterogeneous agreements in the multimodal transportation domain, for example, con-
sidering requirements for the sharing and electric mobility [18]. Finally, the evolution of
the suite of IP4 ontologies will be taken into account to extend and update the deﬁned
ontology.

Acknowledgements

The presented research was supported by the RIDE2RAIL project (Grant Agreement
881825), co-funded by the European Commission under the Horizon 2020 Framework

Scrocca et al., Modelling Ontological Smart Contracts (2022)

Programme. We would like to thank Daniele Santamaria for his support regarding the
OASIS ontology.

References

[1] Cantone D, Longo CF, Nicolosi Asmundo M, Santamaria DF, Santoro C. Ontological Smart Contracts
in OASIS: Ontology for Agents, Systems, and Integration of Services. In: Intelligent Distributed Com-
puting XIV. Studies in Computational Intelligence. Cham: Springer International Publishing; 2022. p.
237-47.

[2] Ride2Rail Project. D3.5 - Ride-sharing Agreements Ledger Module; 2022. Project Deliverable (pending

approval by EC). Available from: https://ride2rail.eu/resources-library/.

[3] Ride2Rail Project. D2.1 - First conceptualization of choice criteria and incentives; 2020. Project Deliv-

erable. Available from: https://doi.org/10.5281/zenodo.4537031.

[4] Ride2Rail Project. D2.4 - Final conceptualization of choice criteria and incentives; 2021. Project Deliv-

erable. Available from: https://doi.org/10.5281/zenodo.4607203.

[5] Ride2Rail Project. D3.1 - Quantitative Estimate of Service Quality Factors; 2021. Project Deliverable.

Available from: https://doi.org/10.5281/zenodo.6803935.

[6] Poveda-Villal´on M, Fern´andez-Izquierdo A, Garc´ıa-Castro R. Linked Open Terms (LOT) Methodology;

2019. Publisher: Zenodo. Available from: https://zenodo.org/record/2539305.

[7] Cano-Benito J, Cimmino A, Garc´ıa-Castro R. Towards Blockchain and Semantic Web. In: Business
Information Systems Workshops. Lecture Notes in Business Information Processing. Cham: Springer
International Publishing; 2019. p. 220-31.

[8] De Kruijff J, Weigand H. Ontologies for Commitment-Based Smart Contracts.

In: On the Move to
Meaningful Internet Systems. OTM 2017 Conferences. Lecture Notes in Computer Science. Cham:
Springer International Publishing; 2017. p. 383-98.

[9] De Kruijff J, Weigand H. Understanding the Blockchain Using Enterprise Ontology.

In: Advanced
Information Systems Engineering. Lecture Notes in Computer Science. Cham: Springer International
Publishing; 2017. p. 29-43.

[10] McAdams D. An Ontology for Smart Contracts. IOHK paper; 2017. p. 3. Accessed online at https:

//cryptopapers.info/assets/pdf/ontology_for_smart_contracts.pdf.

[11] Cantone D, Longo CF, Nicolosi-Asmundo M, Santamaria DF, Santoro C. Towards an Ontology-Based
Framework for a Behavior-Oriented Integration of the IoT. In: Proceedings of the 20th Workshop “From
Objects to Agents”. vol. 2404 of CEUR Workshop Proceedings. Parma, Italy: CEUR; 2019. p. 119-26.
ISSN: 1613-0073. Available from: http://ceur-ws.org/Vol-2404/#paper18.

[12] CONNECTIVE Project. D1.2 – Architectural Principles and Design A-REL; 2020. Project Deliverable.

Available from: https://projects.shift2rail.org/s2r_ip4_n.aspx?p=MaaSive.

[13] Ruckhaus E, Anton-Bravo A, Scrocca M, Corcho O. Applying the LOT Methodology to a Public Bus
Transport Ontology aligned with Transmodel: Challenges and Results. Semantic Web. 2021 Jan;Pre-
press:1-19. Publisher: IOS Press. Available from: https://doi.org/10.3233/SW-210451.
[14] Feria SC, Garc´ıa-Castro R, Poveda-Villal´on M. Converting UML-based ontology conceptualizations to

OWL with Chowlk; 2021. Available from: https://openreview.net/forum?id=u1Vp2y_QE1.
[15] Poveda-Villal´on M, Su´arez-Figueroa MC, G´omez-P´erez A. Validating Ontologies with OOPS!

In:
Knowledge Engineering and Knowledge Management. Lecture Notes in Computer Science. Berlin, Hei-
delberg: Springer; 2012. p. 267-81.

[16] Garijo D. WIDOCO: A Wizard for Documenting Ontologies. In: The Semantic Web – ISWC 2017.
vol. 10588. Springer International Publishing; 2017. p. 94-102. Series Title: Lecture Notes in Computer
Science. Available from: http://link.springer.com/10.1007/978-3-319-68204-4_9.
[17] Scrocca M, Comerio M, Carenini A, Celino I. Turning Transport Data to Comply with EU Standards
While Enabling a Multimodal Transport Knowledge Graph. In: Proceedings of the 19th International
Semantic Web Conference. vol. 12507. Springer; 2020. p. 411-29. Available from: https://doi.org/
10.1007/978-3-030-62466-8_26.

[18] Scrocca M, Baroni I, Celino I. Urban IoT ontologies for sharing and electric mobility. Semantic
Web. 2021 Jan;Pre-press:1-22. Publisher: IOS Press. Available from: https://doi.org/10.3233/
SW-210445.

