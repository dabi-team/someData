2
2
0
2

n
u
J

6
1

]

R
C
.
s
c
[

1
v
5
9
8
7
0
.
6
0
2
2
:
v
i
X
r
a

Dual-channel Early Warning Framework for
Ethereum Ponzi Schemes

Jie Jin1,2, Jiajun Zhou1,2 ((cid:0)), Chengxiang Jin1,2,
Shanqing Yu1,2, Ziwan Zheng5, and Qi Xuan1,2,3,4

1 Institute of Cyberspace Security, Zhejiang University of Technology,
Hangzhou 310023, China
2 College of Information Engineering, Zhejiang University of Technology,
Hangzhou 310023, China
3 The PCL Research Center of Networks and Communications,
Peng Cheng Laboratory, Shenzhen 518000, China
4 The Utron Technology Company Limited, Hangzhou 310056, China
5 Zhejiang Police College, Hangzhou 310053, China
jjzhou@zjut.edu.cn

Abstract. Blockchain technology supports the generation and record of
transactions, and maintains the fairness and openness of the cryptocur-
rency system. However, many fraudsters utilize smart contracts to create
fraudulent Ponzi schemes for proﬁting on Ethereum, which seriously af-
fects ﬁnancial security. Most existing Ponzi scheme detection techniques
suﬀer from two major restricted problems: the lack of motivation for tem-
poral early warning and failure to fuse multi-source information ﬁnally
cause the lagging and unsatisfactory performance of Ethereum Ponzi
scheme detection. In this paper, we propose a dual-channel early warning
framework for Ethereum Ponzi schemes, named Ponzi-Warning, which
performs feature extraction and fusion on both code and transaction lev-
els. Moreover, we represent a temporal evolution augmentation strategy
for generating transaction graph sequences, which can eﬀectively increase
the data scale and introduce temporal information. Comprehensive ex-
periments on our Ponzi scheme datasets demonstrate the eﬀectiveness
and timeliness of our framework for detecting the Ponzi contract ac-
counts.

Keywords: Ethereum · Ponzi Scheme Detection · Graph Classiﬁcation
· Early Warning

1

Introduction

Ponzi scheme [1] is a traditional ﬁnancial fraud that lures investors into investing
by promising high returns, and pays proﬁts to earlier investors with funds from
more recent investors, convincing them that the proﬁts came from legitimate
business activity. Traditional Ponzi schemes generally share similar characteris-
tics that deserve high vigilance of the investors: 1) Suspiciously high investment
returns with little or no risk; 2) Overly consistent returns; 3) Secretive or complex

 
 
 
 
 
 
2

J. Jin et al.

strategies [2]. However, with the rapid development of Blockchain technique and
its widespread adoption in the ﬁeld of digital cryptocurrencies, these traditional
Ponzi fraud has also infected the digital ﬁnance world. Fraudsters combine Ponzi
schemes with blockchain technology (i.e, Smart Contracts) to create a new form
of fraud — the smart Ponzi scheme. In Ethereum, the fraudsters create and de-
ploy fraudulent Ponzi contracts, and advertise them as high-return investments,
ﬁnally swindle money without oﬄine publicity by spreading Ponzi contract ad-
dresses to victims in any way such as emails, chat groups, web links, apps, etc.
Although the Ponzi contract code with complex logic is incomprehensible to in-
vestors, it is still trusted because of the openness, transparency and immutability
characteristics of blockchain technique. According to a report published by the
Cryptoanalysis, a cryptocurrency investigation and risk analysis company, Ponzi
schemes, fraudulent ICOs and other forms of fraud are on the rise, causing at
least $725 million in losses so far. As a result, ﬁnancial security has become a
top priority in the blockchain ecosystem [3].

Existing Ponzi scheme detection methods in Ethereum mainly concentrate
on manual feature engineering and graph representation learning. The former
mainly combines traditional machine learning methods and manual features (i.e.
statistical and structural features) of accounts to detect Ponzi contracts. The sta-
tistical features can be code-level [4,5] or transaction-level [6] while the structural
features can be behavior patterns [7,8]. The latter generally constructs Ethereum
transaction graphs and utilizes graph representation learning techniques to cap-
ture implicit features. The transaction graphs generally consist of account nodes
and transaction edges, while the graph representation learning methods can be
random walk [9,10] and graph neural network [11]. However, there are still two
major restricted problems on existing research of Ponzi detection:

• Lack of motivation for temporal early warning. The existing meth-
ods utilize the last transaction records to detect Ponzi contracts from the
moment the fraud has occurred, i.e., following a hindsight perspective, in-
stead of taking temporal information of account behaviors into consideration,
which results in failure to detect the occurrence of Ponzi schemes and impose
sanctions in a timely manner.

• Failure to fuse multi-source information. Multi-source information such
as contract codes and transaction records is available for Ponzi detection.
However, existing methods usually use a single type of features, or simply
concatenate multi-source features for Ponzi detection, without adaptive pro-
cessing and organic fusion.

To address the above problems, in this paper, we propose Dual-channel Early
Warning Framework (Ponzi-Warning) for detecting the Ethereum Ponzi scheme.
We ﬁrst collect and collate all current known Ethereum Ponzi scheme data in-
volving contract addresses and corresponding labels from diﬀerent blockchain
platforms, yielding an Ethereum Ponzi Scheme Dataset. Then we propose a
Temporal Evaluation Augmentation strategy for generating transaction graph
sequences that reserve temporal transaction information of contract accounts. Fi-
nally, we design a dual-channel early warning framework that fuses multi-source

Dual-channel Early Warning Framework for Ethereum Ponzi Schemes

3

information and consists of a code-aware channel and transaction-aware chan-
nel. The code-aware channel can extract contract opcode features via an MLP
model, and the transaction-aware channel can capture the structural transaction
behavior features via arbitrary GNN models. The output of the two channels will
be concatenated and fed into the classiﬁers to identify Ponzi contracts. Extensive
experiments are conducted on real-world datasets to verify the eﬀectiveness of
Ponzi-Warning.

This work has the following contributions:

• We collect and collate all current known Ethereum Ponzi scheme data in-
volving contract addresses and corresponding labels from diﬀerent blockchain
platforms, yielding an Ethereum Ponzi Scheme Dataset.

• We propose a temporal evolution augmentation (TEAug) strategy for gen-
erating transaction graphs of diﬀerent scales, which can alleviate the data
scarcity and imbalance to some extent without using fake data generation
techniques.

• We propose a dual-channel early warning framework (Ponzi-Warning) for
Ponzi schemes, which can extract and fuse code-level and transaction-level
features from raw data, further achieving powerful and timely early warning
for Ponzi schemes on Ethereum.

The rest of the paper is organized as follows. The related work of Ponzi scheme
detection is presented in Sec. 2. The proposed Ponzi-Warning framework is de-
tailedly described in Sec. 3. The experimental results and discussion are pre-
sented in Sec. 4. We conclude our work in Sec. 5.

2 Related Work

Ponzi schemes in Ethereum not only retain the characteristics of traditional
Ponzi schemes, but also make use of smart contracts.

For a newly created contract, there is no transaction record related to it
on the blockchain platforms, so we can only judge its legitimacy by using the
characteristics of contract codes, that is, to detect whether it is a Ponzi contract.
Bartoletti et al. [4] pioneered an Ethereum Ponzi scheme detection method,
where they ﬁrst classiﬁed Ponzi schemes into four categories (i.e. tree, chain,
waterfall and permission transfer) based on the logic of the contract source code,
and further detect Ponzi schemes by using Levenshtein distance to measure the
similarity between bytecodes. Lou et al. [5] converted bytecodes into single-
channel images and used a convolutional neural network for image recognition
to achieve Ponzi scheme detection.

Once the contract is deployed, the transaction record related to it will be
generated once the contract is called. In this case, the transaction features can
also serve to detect whether it is a Ponzi contract. Jung et al. [6] extracted
transaction features from the transaction records of diﬀerent time periods and
combined with the opcode features, ﬁnally inputting them to diﬀerent machine
learning classiﬁers for Ponzi detection. Hu et al. [12] used the transaction records

4

J. Jin et al.

to analyze the investment and return features, and trained LSTM models with
the contract transaction data for future Ponzi scheme detection.

In the ﬁnal stage of a Ponzi scheme, the complete transaction history is
available. At this point, most of the work is to combine the complete transaction
features with the code features for Ponzi scheme detection. Chen et al. [13,14]
used machine learning methods to identify Ponzi contracts by analyzing account
features and opcode features. Zhang et al. [15] considered bytecode features on
top of existing features, again detected by the LightGBM model.

3 Methodology

To be clear, the Ponzi scheme studied in this paper is a blockchain ﬁnancial
fraud generated by the Ponzi contract deployed on the Ethereum platform to
attract external investment, excluding the Ponzi scheme that uses email, social
media and other means to defraud under the guise of spreading the concept of
“blockchain”.

Table 1. Statastics of the Ethereum Ponzi
contract addresses we collected.

Table 2. Statastics of the Ethereum Ponzi
scheme dataset.

Ponzi
Address
code(only)

68
code & trans. 230
298

all

√
√

Num.

Feature

Transaction Num.
code trans. Min. Max. (cid:62) 100

√

0
1
1

0
105005
105005

0
75
75

Num.

Contract
Address
Ponzi

75
Non-Ponzi 325
400

all

√
√
√

√
√
√

Feature

code trans. Min. Max.

Transaction Num.
(cid:62) 100

103 105005 75 (100%)
100 11761 325 (100%)
100 105005

400

3.1 Data Collection

Since the known Ponzi schemes published by diﬀerent platforms are not com-
pletely consistent, we collect and collate all current known Ethereum Ponzi
scheme data involving contract addresses and corresponding labels from dif-
ferent platforms such as Etherscan6, XBlock7 and Google Cloud8, as shown in
Table 1. Moreover, we consider Ponzi detection as a classiﬁcation problem, so
we select an additional part (325) of normal contract accounts with transaction
records as negative samples, and combine them with all Ponzi contract accounts
with transaction records (75), yielding an Ethereum Ponzi Scheme Dataset
(Eth-Ponzi Dataset, symbolized as D here), see Table 2. Formally, we rep-
resent the dataset as D = {(ai, yi)}, where yi is the identity label reﬂecting
whether the account ai is a Ponzi account (1 for Ponzi, 0 for non-Ponzi).

6 https://cn.etherscan.com/
7 http://xblock.pro/
8 http://goo.gl/CvdxBp

Dual-channel Early Warning Framework for Ethereum Ponzi Schemes

5

3.2 Micro Transaction Graph

The fraudulent behavior of Ponzi schemes is mainly manifested in the interac-
tions between the central Ponzi contract and the surrounding investor accounts.
Hence for a target contract account a, we can construct a contract-centric mi-
cro transaction graph using all the transaction records related to this account,
yielding g = (a, V, E(t), xc, Xt, y), where node set V consists of accounts in-
volved in these transactions, edge set E(t) consists of related transactions with
timestamp. Note that the node set V consists of the target contract account(CA)
a, externally owned accounts(EOA) participating in the transactions, and other
possible contract acconts. The CA is controlled by the smart contract code, but
the EOA is not, so we use xc to represent the code features of the target CA a,
and Xt to represent the transaction features of all accounts. The code features
are 76-dimensional vectors consisting of the frequency of diﬀerent opcodes, and
the transaction features are 15-dimensional manual features that are consistent
with [8].

3.3 Temporal Evolution Augmentation of Transaction Graph

As we concern above, existing Ponzi detection methods follow hindsight and uti-
lize the last transaction records (i.e. the full transaction graph) to detect Ponzi
schemes, which fails to provide timely warning and sanctions for such ﬁnancial
risks. In this paper, we propose a Temporal Evolution Augmentation (TEAug)
strategy for transaction graph with the following purposes: 1) Ponzi schemes on
Ethereum begin with the creation and deployment of Ponzi contracts, experi-
ence interactions with surrounding investors, and end with the scammer running
away with the money or being detected, which is a temporal evolution process.
We use TEAug to highlight the micro transaction states of Ponzi contracts in
diﬀerent life cycles. 2) The number of known Ethereum Ponzi schemes is small
(several hundred), and direct training with existing data can easily lead to over-
ﬁtting and low generalization of detection models. We consider TEAug as a data
augmentation strategy and increase the scale of trainable data.

For each CA in Eth-Ponzi Dataset, we can construct corresponding micro
transaction graph, ﬁnally yielding a graph set Dg = {gi | ∀ai ∈ D}. During
TEAug, we perform data augmentation on each transaction graph gi based on
a ﬁxed-scale growth of the number of transactions over time (parameterized by
∆nt), as illustrated in Fig. 1. Formally, for a transaction graph gi, TEAug gen-
erates a series of transaction subgraphs of diﬀerent scales based on transaction
timestamps:

{g1

i ,g2

i , · · · , gm
i } ← TEAug (gi, ∆nt, m) ,
i ⊆ gi and y(gk
gk
where

i ) = y(gi) and |Ek+1

i

(t)| = |Ek

i (t)| + ∆nt.

(1)

Note that each augmented transaction graph gk
is actually the subgraph of gi
i
and has the same label. After TEAug, we obtain a larger transaction graph
dataset with 4000 samples.

6

J. Jin et al.

Fig. 1. Illustration of Temporal Evolution Augmentation for Ethereum Ponzi scheme
dataset.

Fig. 2. Illustration of dual-channel early warning model for Ethereum Ponzi schemes

3.4 Dual-channel Early Warning Model

In this section, we present a dual-channel early warning model for Ethereum
Ponzi schemes, named Ponzi-Warning, which focuses on both the contract code
and transaction behavior for detecting the occurrence of Ponzi schemes in Ethereum.
As illustrated in Fig. 2, this model mainly consists of two channels: the code-
aware channel and the transaction-aware channel. The former characterizes the
code-level features of contract accounts and can take eﬀect at any time after the
smart contract is created, and the latter characterizes the transaction behavior
patterns of contract accounts and will only take eﬀect after the smart contracts
are called and transaction records are generated.

Time∆𝑛t……Contract A𝑚=10𝑚=10𝑚=10TEAugContract BContract CTemporal Evolution Augmentation4000 GraphsContract400 ContractsMicro Transaction Graph∆𝑛t∆𝑛t𝑔𝑖𝑔𝑖1𝑔𝑖2𝑔𝑖3𝑔𝑖𝑚Code Features Extraction ProcessTransaction Features  Extraction Process400 ContractsCode Feature ExtractorTransaction feature ExtractorMLPGraphPoolingFully Connection LayerSoftmaxPonziNon-PonziCode-aware ChannelTransaction-aware ChannelConcatGNNDual-channel Early Warning Framework for Ethereum Ponzi Schemes

7

Code-aware Channel For the contract account dataset D, we use the feature
matrix Xc ∈ Rn×fc to represent the code features of the contract accounts in the
dataset, where the i-th row of the matrix represents the code feature vector of the
i-th contract account ai, n is the number of target contract accounts (n = 400)
and fc is the dimension of initial code features. In this channel, a multi-layer
perceptron (MLP) is applied for capturing the implicit code features:

Zc = MLP (Xc) .

(2)

Transaction-aware Channel This channel is a generic feature extraction mod-
ule that can be compatible with arbitrary GNN layers, aiming at capturing the
behavior features implicit in transaction records. The input of this channel is
the lightweight transaction graphs sampled from the augmented dataset and
processed through merging multiple edges, and the output is the aggregated
graph features Zt.

Formally, graph neural networks (GNN) generalize the convolution operator
to irregular graph domains, which can be expressed as a neighborhood aggrega-
tion or message passing scheme. The message pass graph neural networks can
be represented as:

GNNLayer: x(k)

i = γ(k) (cid:16)

x(k−1)
i

, (cid:3)j∈N (i)φ(k) (cid:16)

x(k−1)
i

, x(k−1)
j

(cid:17)(cid:17)

,

(3)

i

where x(k−1)
∈ RF denotes the node features of vi in layer (k − 1), N (i) denotes
the neighbor set of vi, (cid:3) denotes a diﬀerentiable aggregation function, e.g., sum,
mean or max, and γ and φ denote diﬀerentiable functions such as MLPs.

For an input transaction graph g, we stack multiple GNN layers (e.g. two

layer) to aggregate and update the node (account) features:

Ht = GNNLayer2 (cid:0)GNNLayer1 (cid:0)Xt, A(cid:1)(cid:1) ,

(4)

where A is the adjacency matrix of g that reﬂects the topological information.
Finally, a graph pooling operation will be performed to obtain the whole-graph
representation that reﬂects the graph-level account behavior pattern features:

zt = GraphPoolingLayer (cid:0)Ht(cid:1) .

(5)

Dual-channel Joint for Prediction The code features output by the code-
aware channel and the pattern features output by the transaction-aware channel
will be combined through a concatenation operation, and input into a fully
connected layer for Ponzi detection:

Z = Concat (cid:0)Zc, Zt(cid:1) ,

ˆY = Softmax (MLP (Z)) .

(6)

(7)

where ˆY is the set of predicted labels.

8

J. Jin et al.

4 Experiments

In this section, we perform empirical evaluations to demonstrate the eﬀectiveness
of the proposed Ponzi-Warning framework, answering the following research
questions:

• RQ1: How eﬀective and timely is the proposed Ponzi-Warning framework

for detecting Ponzi schemes in Ethereum?

• RQ2: How do code and transaction features aﬀect Ponzi scheme detection?
• RQ3: What is the appropriate transaction threshold in our framework for

reporting Ponzi schemes?

• RQ3: How does the backbone model aﬀect Ponzi scheme detection?

4.1 Data Setting

As we can see from Table 1, 22.82% of the Ponzi contracts have no transaction
records and 52.01% of the Ponzi contracts have transaction records of no more
than 100. We ﬁlter these contracts with transaction records of less than 100,
and use the remaining Ponzi contracts as well as additionally sampled normal
contracts, as shown in Table 2, to evaluate our proposed model.

We split dataset D into training, validation and testing sets with a proportion

of Dtrain : Dval : Dtest = 256 : 64 : 80. We perform TEAug in the three parts:

Daug

train =

(cid:91)

{g1

i , g2

i , · · · , gm

i } ← TEAug (Dtrain, ∆nt, m) ,

Daug

val =

gi∈Dtrain
(cid:91)
{g1

i , g2

i , · · · , gm

i } ← TEAug (Dval, ∆nt, m) ,

(8)

Daug-i

test = {gi

gi∈Dval
1, gi

2, · · · , gi

|Dtest|}, i ∈ {1, 2, · · · , m} ← TEAug (Dtest, ∆nt, m) .

Note that we mix augmented samples of all scales (1 to m) to form the augmented
training set Daug
train. for Dval, we take augmented samples of all scales to validate
our model performance to ﬁnd the best model parameters. As for Dtest, we mix
all augmented samples of the same scale to form the augmented training set at
that scale, ﬁnally yielding m augmented validation sets and augmented testing
sets, respectively.

4.2 Baselines

Manual feature engineering relies on high-performance downstream classiﬁers to
achieve good task performance, so we use three ensemble learning models, XG-
Boost classiﬁer (XGB), Random forest classiﬁer (RFC) and AdaBoost classiﬁer
(ADA), to directly learn the function mapping manual features to account iden-
tity. Meanwhile, since we emphasize the high compatibility of the transaction-
aware channel, we use ﬁve GNN model for evaluating, namely GCN[11], GAT[16],
ASAPooling[17], SAGPooling[18,19] and GlobalAttentionNet(GLAN)[20].

Dual-channel Early Warning Framework for Ethereum Ponzi Schemes

9

Table 3. Statastics of augmented datasets (after lightweight) of diﬀerent scales. avg.|V |
and avg.|E| are the average numbers of nodes and edges, respectively.

Scale (m = 10, ∆nt = 10)
i
1
2
3
4
5
6
7
8
9
10

|Ek
i (t)|
10
20
30
40
50
60
70
80
90
100

4.3 Experiment Setting

avg.|V |

avg.|E|

Proportion

6.76
11.08
15.12
19.11
23.09
27.01
30.89
34.72
38.45
42.12

6.52
11.35
15.89
20.34
24.74
29.13
33.50
37.76
41.91
46.06

75:325

For the hyperparameter in TEAug, we set the scale growth (∆nt) as 10, and set
the augmentation number (m) as 10. Our model is implemented based on the
Pytorch-geometric 9. For all methods, the random seed is set as 0, the hidden di-
mension of each channel is searched from [16, 32, 64, 128], the graph pooling oper-
ation is chosen from [MaxPooling, MeanPooling, SumPooling], and the transaction-
aware channel is implemented using 2-layer GNN. In addition, all parameters of
the model are initialized using a Gaussian distribution with a mean and stan-
dard deviation of 0 and 0.1, respectively. And the batch size and L2 penalty
are set to 200 and 10−5, respectively, and a negative log-likelihood loss function
is used. The Adam optimizer is used to optimize these parameters, where the
initial learning rate and the dropout rate are set to 0.01 and 0.1, respectively.

We use Daug

train for model training, and validate and test our model using
corresponding augmented sets with diﬀerent scales. We repeat the experiments
ﬁve times and report the average F1-score at diﬀerent stages of the temporal
transaction evolution.

4.4 Evaluation on Ponzi Detection (RQ1)

To answer RQ1, we evaluate the performance of all the methods in the task of
Ponzi scheme detection on Ethereum. Table 4 reports the detection results, from
which we can obtain the following Observations.

(1) Obs.1. Both code and transaction features play an important
role in Ponzi detection, and our framework achieves the best perfor-
mance. Overall, our framework outperforms all the other compared frameworks
by a signiﬁcant margin. When compared with the “code-aware” method that
only uses code features and MLP model for Ponzi detection, our Ponzi-Warning

9 https://github.com/pyg-team/pytorch_geometric

10

J. Jin et al.

Table 4. Performance comparison results w.r.t. F1-score on Ethereum Ponzi scheme
dataset.

Method

Feature

Scale

name

channel-1

channel-2

code-aware MLP

trans-aware

×

Ours

Ours

trans-aware

Ours

Ours

trans-aware

no MLP

MLP

×

no MLP

MLP

×

×

GCN

GCN

GCN

GAT

GAT

GAT

SAGPooling

Ours

Ours

no MLP SAGPooling

MLP

SAGPooling

trans-aware

×

ASAPooling

Ours

Ours

no MLP ASAPooling

MLP

ASAPooling

trans-aware

×

GLAN

Ours

Ours

no MLP

GLAN

MLP

GLAN

code
√

√

√

√

√

√

√

√

√

√

√

trans.

1

2

3

4

5

6

7

8

9

10

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

0.8908 0.8908 0.8908 0.8908 0.8908 0.8908 0.8908 0.8908 0.8908 0.8908

0.8283 0.8582 0.8685 0.8604 0.8627 0.8713 0.8880 0.8858 0.8831 0.8980

0.8740 0.8794 0.8928 0.9056 0.9021 0.9019 0.9077 0.9167 0.9169 0.9164

0.9054 0.9077 0.9077 0.9100 0.9100 0.9100 0.9124 0.9171 0.9171 0.9171

0.8596 0.8659 0.8685 0.8625 0.8627 0.8841 0.8892 0.8863 0.8938 0.8989

0.8802 0.8864 0.8962 0.8946 0.9026 0.9017 0.8976 0.901 0.9093 0.9093

0.9012 0.9016 0.9038 0.9065 0.9134 0.918 0.9228 0.9228 0.9202 0.9230

0.8569 0.8888 0.8869 0.8894 0.9007 0.9119 0.9120 0.9137 0.9170 0.9154

0.8869 0.9017 0.9094 0.9164 0.9164 0.9161 0.9244 0.9177 0.9232 0.9233

0.9040 0.9041 0.9092 0.9212 0.9186 0.9261 0.9288 0.9288 0.9288 0.9311

0.8452 0.8783 0.8774 0.8915 0.9075 0.9064 0.9034 0.9119 0.9119 0.9119

0.8940 0.9054 0.9000 0.9178 0.9199 0.9196 0.9199 0.9231 0.9231 0.9184

0.9233 0.9239 0.9239 0.9239 0.9239 0.9239 0.9239 0.9239 0.9239 0.9245

0.8478 0.8647 0.8937 0.9016 0.8908 0.9038 0.9109 0.9146 0.9017 0.9182

0.8857 0.9025 0.8946 0.9114 0.9009 0.9082 0.9154 0.9185 0.9186 0.9187

0.9164 0.9118 0.9182 0.9182 0.9182 0.9204 0.9280 0.9280 0.9280 0.9280

achieves 0.74% ∼ 4.03% average relative improvement. When compared with the
“transaction-aware” method that only uses transaction graph and GNN model
for Ponzi detection, our Ponzi-Warning achieves 0.98% ∼ 2.41% average rela-
tive improvement. These phenomena suggest that both the smart contract code
and account transaction behavior can expose the information related to account
identity.

(2) Obs.2. Our framework enables timely early warning of Ponzi
schemes. The transaction graph is constructed based on the transaction records
with timestamp information. During TEAug, we only generate the transaction
graphs by using transaction records no more than 100, i.e., yielding small-scale
transaction graphs. A smaller-scale transaction graph (with Scale ID i ≤ 10)
shows a less active time of the central contract account. Our method achieves
high and stable detection performance on small-scale transaction graphs, indicat-
ing that our Ponzi-Warning can achieve timely early warning of Ponzi schemes.

4.5 Single Channel Analysis (RQ2)

To answer RQ2, we analyze the performance of each channel independently and
obtain the following Observations.

(1) Obs.3. The characteristics of the code carry the purpose of the
contract creation. Code features accompany the entire life cycle of a contract
account, and we can use code features to perform Ponzi detection at the ini-
tial stage of contract creation. From Table 4, we can observe that using only
code features has achieved detection accuracy up to 89%, far surpassing the
method of using transaction features in the early stages, indicating that there

Dual-channel Early Warning Framework for Ethereum Ponzi Schemes

11

Table 5. The top 5 most important opcode features of Ponzi and non-Ponzi contracts.

Comparison

Ponzi : non-Ponzi

non-Ponzi : Ponzi

Opcode
returndatasize
returndatacopy
codesize
gaslimit
smod

delegatecall
create2
byte
diﬃculty
sar

Explanation

Size of the last returndata
Copy the returned data
Length of the contract
Block gas limit of the current block
int256 modulo

Proportion
207.13
59.22
6.21
2.53
1.97

Calling another contract’s method using the current contract’s store
Create a subcontract using a deﬁned address
Return (u)int256 x the i-th byte starting from the highest byte
Diﬃculty of the current block
int256 right shift

17.31
14.31
5.31
4.62
3.92

is a strong correlation between the characteristics of the contract code and the
legitimacy of the contract account. We list the top 5 most important opcodes
of Ponzi and non-Ponzi contracts according to the feature importance analysis
of RFC, as shown in Table 5. We observe that Ponzi contracts involve more
“returndata” opcodes and will make plenty of judgments about the “returndata”.
On the contrary, non-Ponzi contracts involve more “delegatecall” and “create”
opcodes, which suggests that normal contracts would have a large number of
methods to call other contracts, while the nature of Ponzi schemes is to attempt
to carry out as much fraud as possible in one contract.

Fig. 3. Performance comparison between our framework and the ordinary graph neural
network methods under diﬀerent scales of transactions.

(2) Obs.4. The characteristics of the transaction records expose the
purpose of the contract creation over time. Transaction features can only
be available after transaction has occurred. From Table 3, we can observe that
with few transaction records (with Scale ID i = 1), the transaction-aware channel

83858789919312345678910F1-score(%)ScalesGCNGATSAGPoolingASAPPoolingGLANOur(GCN)Our(GAT)Our(SAGPooling)Our(ASAPooling)Our(GLAN)MLP12

J. Jin et al.

achieves poor detection performance. And the performance of this channel is
greatly improved as the size of the transaction graph increases, indicating that
more transaction records can expose more account purpose, thereby improving
the Ponzi detection. Furthermore, we ﬁnd that transaction-aware channel can
achieve a higher performance limit than code-aware channel, which inspires us
to perform dynamic detection for better early warning.

4.6 Threshold of Reporting Ponzi Schemes (RQ3)

To answer RQ3, we further analyze the performance curve in Fig. 3 in terms
of detection accuracy and timeliness. The two types of curves (GNNs and our
framework) all show a certain upward trend, in which the former shows a poor
initial performance and a large increase, while the latter shows a power initial
performance and a stable and small increase. In our framework, the high initial
performance beneﬁts from the blessing of the code channel, and the subsequent
increase beneﬁts from the temporal evolution of the transaction. We further ob-
serve that in most cases, the performance curves rise ﬁrst, reach the critical point
when the Scale ID equals to 7, and then gradually stabilize. So we reasonably
consider 70 (with Scale ID i = 7) as the appropriate transaction threshold for
reporting Ponzi schemes.

Fig. 4. Performance comparison between code-aware channels with and without MLP.

4.7 Ablation Study

To answer RQ4, we perform an ablation study by removing or replacing the
backbone models in the two channels. As shown in Fig. 4 and ??, the corre-
sponding observation results have the following aspects:

8788899091929312345678910F1-score(%)ScalesCodeOur(GCN)_noMLPOur(GCN)8788899091929312345678910F1-score(%)ScalesCodeOur(GAT)_noMLPOur(GAT)8788899091929312345678910F1-score(%)ScalesCodeOur(SAGPooling)_noMLPOur(SAGPooling)8788899091929312345678910F1-score(%)ScalesCodeOur(GLAN)_noMLPOur(GLAN)8788899091929312345678910F1-score(%)ScalesCodeOur(ASAPooling)_noMLPOur(ASAPooling)Dual-channel Early Warning Framework for Ethereum Ponzi Schemes

13

(1) Obs.5. Further feature extraction on initial opcode features ben-
eﬁts Ponzi detection. We ﬁrst remove the backbone model (MLP) in the
code-aware channel, and directly concatenate the unprocessed initial code fea-
tures and the output of the transaction-aware channel, yielding the comparison
graph Our(GNN)_noMLP. As shown in Fig. 4, we observe that Our(GNN) al-
ways outperforms Our(GNN)_noMLP across all scales, suggesting that implicit
information extracted from initial code features can signiﬁcantly improve the
Ponzi detection. This phenomenon encourages us to further design more power-
ful backbone models in the code-aware channel.

(2) Obs.6. Powerful GNN models can capture the account interac-
tion behavior beneﬁtting Ponzi detection. We replace the backbone model
(GNN) in the transaction-aware channel with machine learning models, and
compare the performance diﬀerence. As shown in Fig. ??, we observe that three
more powerful GNN models outperform machine learning methods while GCN
and GAT obtain relatively poor performance, indicating that the structural in-
teraction behavior features captured by the GNN models can improve the Ponzi
detection.

5 Conclusion

In this paper, we propose a dual-channel early warning framework for Ethereum
Ponzi schemes, which can eﬀectively extract and fuse code-level and transaction-
level features. Experimental results demonstrate that our framework can achieve
eﬀective and timely early warning for Ponzi schemes. Moreover, we also analyze
the code and transaction level diﬀerences between normal and Ponzi accounts.
In the future work, we will consider designing a more powerful code-aware chan-
nel and replacing the transaction-aware channel with a dynamic graph neural
network model for better Ponzi detection.

Acknowledgments This work was partially supported by the National Key
R&D Program of China under Grant 2020YFB1006104, by the Key R&D Pro-
grams of Zhejiang under Grants 2022C01018 and 2021C01117, by the National
Natural Science Foundation of China under Grant 61973273 and 62103374,
and by the Zhejiang Provincial Natural Science Foundation of China under
Grant LR19F030001, and by Basic Public Welfare Research Project of Zhe-
jiang Province Grant LGF20F020016 and Open Project of the Key Laboratory
of Public Security Informatization Application Based on Big Data Architecture
Grant 2020DSJSYS003.

References

1. Frankel, T.: The Ponzi scheme puzzle: A history and analysis of con artists and

victims. Oxford University Press (2012)

2. Springer, M.: The politics of ponzi schemes: History, theory, and policy (2020)

14

J. Jin et al.

3. Morris, D.Z.: The rise of cryptocurrency ponzi schemes. The Atlantic 31 (2017)
4. Bartoletti, M., Carta, S., Cimoli, T., Saia, R.: Dissecting ponzi schemes on
ethereum: identiﬁcation, analysis, and impact. Future Generation Computer Sys-
tems 102, 259–277 (2020)

5. Lou, Y., Zhang, Y., Chen, S.: Ponzi contracts detection based on improved con-
volutional neural network. In: 2020 IEEE International Conference on Services
Computing (SCC). pp. 353–360. IEEE (2020)

6. Jung, E., Le Tilly, M., Gehani, A., Ge, Y.: Data mining-based ethereum fraud
detection. In: 2019 IEEE International Conference on Blockchain (Blockchain).
pp. 266–273. IEEE (2019)

7. Zhou, J., Hu, C., Chi, J., Wu, J., Shen, M., Xuan, Q.: Behavior-aware account de-
anonymization on ethereum interaction graph. arXiv preprint arXiv:2203.09360
(2022)

8. Jin, C., Jin, J., Zhou, J., Wu, J., Xuan, Q.: Heterogeneous feature augmentation

for ponzi detection in ethereum. arXiv preprint arXiv:2204.08916 (2022)

9. Perozzi, B., Al-Rfou, R., Skiena, S.: Deepwalk: Online learning of social represen-
tations. In: Proceedings of the 20th ACM SIGKDD international conference on
Knowledge discovery and data mining. pp. 701–710 (2014)

10. Grover, A., Leskovec, J.: node2vec: Scalable feature learning for networks. In: Pro-
ceedings of the 22nd ACM SIGKDD international conference on Knowledge dis-
covery and data mining. pp. 855–864 (2016)

11. Kipf, T.N., Welling, M.: Semi-supervised classiﬁcation with graph convolutional

networks. arXiv preprint arXiv:1609.02907 (2016)

12. Hu, T., Liu, X., Chen, T., Zhang, X., Huang, X., Niu, W., Lu, J., Zhou, K., Liu,
Y.: Transaction-based classiﬁcation and detection approach for ethereum smart
contract. Information Processing & Management 58(2), 102462 (2021)

13. Chen, W., Zheng, Z., Cui, J., Ngai, E., Zheng, P., Zhou, Y.: Detecting ponzi
schemes on ethereum: Towards healthier blockchain technology. In: Proceedings
of the 2018 World Wide Web Conference. pp. 1409–1418 (2018)

14. Chen, W., Zheng, Z., Ngai, E.C.H., Zheng, P., Zhou, Y.: Exploiting blockchain
data to detect smart ponzi schemes on ethereum. IEEE Access 7, 37575–37586
(2019)

15. Zhang, Y., Yu, W., Li, Z., Raza, S., Cao, H.: Detecting ethereum ponzi schemes
based on improved lightgbm algorithm. IEEE Transactions on Computational So-
cial Systems (2021)

16. Veličković, P., Cucurull, G., Casanova, A., Romero, A., Lio, P., Bengio, Y.: Graph

attention networks. arXiv preprint arXiv:1710.10903 (2017)

17. Ranjan, E., Sanyal, S., Talukdar, P.: Asap: Adaptive structure aware pooling for
learning hierarchical graph representations. In: Proceedings of the AAAI Confer-
ence on Artiﬁcial Intelligence. vol. 34, pp. 5470–5477 (2020)

18. Lee, J., Lee, I., Kang, J.: Self-attention graph pooling. In: International conference

on machine learning. pp. 3734–3743. PMLR (2019)

19. Knyazev, B., Taylor, G.W., Amer, M.: Understanding attention and generalization
in graph neural networks. Advances in neural information processing systems 32
(2019)

20. Li, Y., Tarlow, D., Brockschmidt, M., Zemel, R.: Gated graph sequence neural

networks. arXiv preprint arXiv:1511.05493 (2015)

