2
2
0
2

g
u
A
4
2

]
L
P
.
s
c
[

1
v
1
4
2
1
1
.
8
0
2
2
:
v
i
X
r
a

Your Blockchain Needn’t Care
How the Message is Spread

Wolfgang Jeltsch1,3[0000−0002−8068−8401] and Javier Díaz2,3[0000−0003−3588−7468]

1 Well-Typed, London, England
wolfgang@well-typed.com
2 Atix Labs (a Globant Division), Buenos Aires, Argentina
javier.diaz@globant.com
3 IO Global, Boulder, Colorado

Abstract. In a blockchain system, nodes regularly distribute data to
other nodes. The ideal perspective taken in the scientiﬁc literature is
that data is broadcast to all nodes directly, while in practice data is dis-
tributed by repeated multicast. Since correctness and security typically
have been established for the ideal setting only, it is vital to show that
these properties carry over to real-world implementations. This can be
done by proving that the ideal and the real behavior are equivalent.
In the work described in this paper, we take an important step towards
such a proof by proving a simpler variant of the above equivalence state-
ment. The simpliﬁcation is that we consider only a concrete pair of
network topologies, which nevertheless illustrates important phenomena
encountered with arbitrary topologies. For describing systems that dis-
tribute data, we use a domain-speciﬁc language of processes that is em-
bedded in a general-purpose process calculus. This allows us to leverage
the rich theory of process calculi in our proof, which is machine-checked
using the Isabelle proof assistant.

Keywords: Blockchain · Networking · Process calculus · Bisimilarity ·
Isabelle · Formal methods

1 Introduction

Blockchains are becoming increasingly relevant in a variety of ﬁelds, such as ﬁ-
nance, identiﬁcation, logistics, and real estate. Incorrect behavior of a blockchain
system may often result in serious damage. Therefore, machine-checked proofs
of correctness and security are of high value in the blockchain ﬁeld.

The fundamental task of a blockchain system is to maintain data consistency
among distributed agents in an open network. To facilitate this, nodes have
to regularly distribute data to other nodes. The perspective usually taken in
the scientiﬁc literature is that such data is broadcast to all nodes directly. For
example, the descriptions of the blockchain consensus protocols of the Ouroboros
family [1,6,9] assume such direct communication. In practice, however, data is
distributed via repeated multicast. Since correctness and security typically have

 
 
 
 
 
 
been established for the ideal setting only, it is vital to show that they carry
over to real-world implementations.

In this paper, we take an important step in this direction by showing that the
ideal behavior of direct broadcast and the real behavior of broadcast via multi-
cast are equivalent in an appropriate sense. Concretely, we make the following
contributions:

– In Sect. 2, we deﬁne a restricted language of processes that are able to
describe network communication. Processes in our language are closely con-
nected to hierarchical Petri nets with exactly one input place per transition.
We deﬁne our language via an embedding in a general-purpose process cal-
culus. This approach enables us to leverage the rich theory of process calculi
while allowing us to use an intuitive graphical notation similar to the one of
Petri nets.

– In Sect. 3, we devise a notion of behavioral equivalence of networks that does
not distinguish between diﬀerent patterns of packet arrival. Our approach
is to start with bisimilarity and weaken it by amending the involved pro-
cesses to allow for additional behavior. Building on bisimilarity permits us
in particular to reason in a modular fashion.

– In Sect. 4, we present a proof of behavioral equivalence of broadcast via
repeated multicast and direct broadcast under the assumption that network
communication may involve packet loss and duplication. Our proof is about
a concrete pair of networks that nevertheless captures important general
phenomena. The proof works by rewriting a process describing the former
form of broadcast into a process describing the latter. For the individual
rewriting steps, we rely on certain fundamental lemmas, not all of which
have been proved so far. We present only the ﬁrst part of our proof in detail,
using the graphical notation for processes, but we have formalized the whole
proof in Isabelle/HOL.

Afterwards, we discuss related work in Sect. 5 and give a conclusion and an
outlook on ongoing and future work in Sects. 6 and 7.

2 A Language for Communication Networks

For describing communication networks, we use a custom language of processes
that communicate via asynchronous channels. Let uppercase letters denote pro-
cesses and lowercase letters denote channels. The syntax of our communication
language is given by the following BNF rule:

Process ::= 0 | P k Q | νa. P | a → b | a ⇒ [b1, . . . , bn] | ¤?a | ¤+a | ¤

∗a

A process is one of the following:

– The stop process 0, which does nothing
– A parallel composition P k Q, which performs P and Q in parallel

2

– A restricted process νa. P , which behaves like P except that the channel a

is local

– A bridge a → b, which continuously forwards packets from channel a to

channel b

– A distributor a⇒[b1, . . . , bn], which continuously forwards packets from chan-

nel a to all channels bi

– A loser ¤?a, which continuously drops packets from channel a
– A duplicator ¤+a, which continuously duplicates packets in channel a
– A duploser ¤∗a, which continuously drops packets from and continuously

duplicates packets in channel a
Our language is embedded in the Þ-calculus4, a general-purpose process cal-
culus that is itself embedded in Isabelle/HOL. The ﬁrst three constructs of our
language stem directly from the Þ-calculus, distributors are deﬁned in terms of
the more primitive send and receive constructs the Þ-calculus provides, and the
remaining constructs are deﬁned in terms of the former ones.

The sublanguage formed by 0, k, ν, and ⇒ corresponds closely to hierarchical
Petri nets with exactly one input place per transition, and the other constructs
can be analogously derived for such Petri nets. Based on this close connection
to Petri nets, we introduce a graphical representation of communication pro-
cesses as communication nets, which is shown in Fig. 1. Note that 0 and k are
represented by absence and composition, respectively.

a

a

a

νa. . . . a . . .

? a

¤?a

+ a

¤+a

∗ a

∗a

¤

a

b

a

·
·
·

b1

bn

a → b

a ⇒ [b1, . . . , bn]

Fig. 1. Elements of communication nets

Two complete communication nets are shown in Fig. 2. They characterize
the two networks whose behavioral equivalence we will show in Sect. 4. In both
communication nets, channels si and ri form the interface of a network node i,
with si accepting packets for sending and ri providing received packets. The
local channel m in the left communication net represents the broadcast medium,
and each local channel lij in the right communication net represents a multicast

4 See https://github.com/input-output-hk/thorn-calculus.

3

link from node i to node j. Note that we assume any communication to be unre-
liable, which is reﬂected by the channel m and all channels lij having duplosers
attached.

r1

s1

r0

s0

∗ m

r3

s3

s0

r0

l01

∗

∗ l02

r2

s2

r1

s1

r2

s2

∗ l30

l13

∗

l23

∗

s3

r3

Fig. 2. Example of direct broadcast (left) and broadcast via multicast (right)

The two communication nets correspond to processes D (direct broadcast)

and M (broadcast via multicast) deﬁned as follows:

∗m k s0 → m k . . . k s3 → m k m → r0 k . . . k m → r3)

D = νm. (¤
M = νl01. νl02. νl13. νl23. νl30. (M∗ k Mi k Mo)
∗l13 k ¤
M∗ = ¤
Mi = s0 ⇒ [l01, l02] k s1 ⇒ [l13] k s2 ⇒ [l23] k s3 ⇒ [l30]
Mo = l01 ⇒ [r1, l13] k l02 ⇒ [r2, l23] k l13 ⇒ [r3, l30] k l23 ⇒ [r3, l30] k

∗l02 k ¤

∗l01 k ¤

∗l23 k ¤

∗l30

l30 ⇒ [r0, l01, l02]

(1)
(2)

(3)
(4)

(5)

3 Loss-Agnostic Behavioral Equivalence

Weak bisimilarity would be a natural choice for the kind of equivalence that
should hold between the two network processes shown in the previous section.
Weak bisimilarity is a well-established notion of behavioral equivalence that
provides a ﬁne-grained distinction of observable behavior and allows for modular

4

reasoning. For our communication language, its notion of behavior characterizes
essentially how handing over packets to global channels may result in packets
appearing on possibly other global channels.

Unfortunately, weak bisimilarity turns out to be too strict for our situation,
as it is able to distinguish between broadcast via multicast and direct broadcast.
To see why, assume in each of the networks shown in Fig. 2 a packet is sent by
node 0 and this packet makes it to node 3. With direct broadcast, it is possible
that neither node 1 nor node 2 receives the packet as well. With broadcast via
multicast, however, node 1 or node 2 must receive it and must do so before
node 3 receives it.

To remove this constraint on arrival patterns, we make the receive channels
lossy. This way, intermediate nodes are no longer guaranteed to receive packets.
It is not suﬃcient, however, to introduce this lossiness for broadcast via mul-
ticast only; we need to introduce it also for direct broadcast. This is because
packet loss in the receive channels is observable and consequently unilateral in-
troduction of such loss would create another behavioral mismatch between the
two networks. The approach of making receive channels lossy leads to a notion
of weak bisimilarity up to loss, which is derived from weak bisimilarity (written
≈ in the following):

Deﬁnition 1 (Weak bisimilarity up to loss). Two processes P and Q are
weakly bisimilar up to loss in channels r1 to rn exactly if

¤?r1 k . . . k ¤?rn k P ≈ ¤?r1 k . . . k ¤?rn k Q .

4 A Proof of Correctness of Broadcast via Multicast

Broadcast via multicast is expected to behave equivalently to direct broadcast
as long as the multicast network is strongly connected. In this work, however,
we prove this equivalence only for the particular networks depicted in Fig. 2,
which nevertheless capture important phenomena that show up in other cases:

– The multicast network has a node with several outgoing and a node with

several incoming links.

– In the multicast network, some nodes are reachable from certain other nodes

only via more than one hop.

Concretely, our goal is to prove that M , deﬁned in Eq. 2, and D, deﬁned in
Eq. 1, are weakly bisimilar up to loss in the receive channels, which is expressed
by the statement

¤?r0 k . . . k ¤?r3 k M ≈ ¤?r0 k . . . k ¤?r3 k D .

We prove this statement by turning its left-hand side into its right-hand side
through a series of transformation steps, each of which replaces subprocesses with
bisimilar ones. The individual transformation steps rely on several fundamental
lemmas about the communication language, not all of which we have proved yet.

5

The ﬁrst transformation step deals with the distributors that forward packets
from link channels. These distributors deliver packets from the link channels lij to
the receive channels rj and also relay them to the follow-up link channels ljk. The
ﬁrst transformation step splits each of these distributors into multiple bridges
and thus in particular separates delivery and relaying of packets. The subse-
quent transformation steps collapse the relaying part into a single channel: the
broadcast medium. We only discuss the ﬁrst step in detail.

The ﬁrst transformation step takes the broadcast-via-multicast process de-
picted in Fig. 2 with the receive channels made lossy and turns it into the process
depicted in Fig. 3. The key justiﬁcation for this transformation is the existence
of the distributor splitting lemma, which is shown in Fig. 4. Note that, in order
to apply this lemma, the respective source channel must have an accompanying
duplicator and the respective target channels must have accompanying losers.
The link channels, which also act as target channels and additionally as source
channels, have duplosers attached to them. Since a duploser is deﬁned as a paral-
lel composition of a loser and a duplicator, the link channels fulﬁll the conditions
we require for source and target channels.

s0

r0

?

∗ l30

∗ l02

? r2

s2

l01

∗

r1

?

s1

l13

∗

∗ l23

s3

?
r3

Fig. 3. The broadcast-via-multicast process after distributor splitting

We have conducted the complete proof using communication nets and ad-
ditionally developed a formal version of it5 using the Isabelle proof assistant.

5 See https://github.com/input-output-hk/network-equivalences.

6

+a

? b1

·
·
·

? bn

≈

+a

·
·
·

? b1

·
·
·

? bn

Fig. 4. The distributor splitting lemma

The formal version is phrased in a style similar to equational reasoning, with the
diﬀerence that we use weak bisimilarity instead of equality. Since Isabelle does
not come with support for automated rewriting based on equivalence relations
other than equality, we have developed a corresponding extension6, which we
use in our proof.

While the formal proof closely follows its communication net counterpart,
it contains more technical details. In particular, it includes applications of ba-
sic bisimilarities, like associativity and commutativity of parallel composition,
which the communication net proof does not need, because the communica-
tion net notation identiﬁes processes that are bisimilar according to these basic
bisimilarities. However, all these bisimilarities together form a conﬂuent and ter-
minating rewrite system, allowing our engine for equivalence-based rewriting to
automatically ﬁnd any proof that consists of a chain of rewriting steps involving
only these bisimilarities. As a result, we can bundle consecutive applications of
said basic bisimilarities in our formal proof, which therefore is still reasonably
concise and readable, while being machine-checked at the same time.

5 Related Work

The correctness of broadcast via multicast, commonly referred to as network
ﬂooding, and similar techniques has been studied to some extent in the literature.
Following are two examples:

– Bani-Abdelrahman [2] formally speciﬁes synchronous and bounded asyn-
chronous ﬂooding algorithms using LTL and veriﬁes them using the model
checker NuSMV. His results are limited to small network sizes and ﬁxed
delays, though.

– Bar-Yehuda et al. [3] emulate a single-hop (direct-broadcast) network with a
multi-hop network using a synchronous gossiping algorithm. With a gossiping
algorithm, a node does not relay an incoming packet to all neighboring nodes,
but only to a randomly chosen one.

The existing literature, however, seems to lack the study of an equivalence of
the two broadcasting approaches, which we provide in this work. The reason for

6 See https://github.com/input-output-hk/equivalence-reasoner.

7

this lack may be related to the complications that arise due to the behavioral
mismatches explained in Sect. 3.

There is a vast amount of literature on the relationship between process cal-
culi and Petri nets. In particular, a long line of research has been developed with
the theme of giving Petri net semantics to process calculi [5,7,10], providing pro-
cess calculi with operational semantics expressing true concurrency as opposed
to the traditional interleaving semantics. Another line of research approaches the
reverse problem, that is, ﬁnding process calculi that are suitable for modeling
Petri nets of certain classes [4,8]. In the light of all this research, our tandem of
the communication language and its communication net notation, described in
Sect. 2, can be regarded as a restricted process calculus that comes with a Petri
net semantics.

6 Conclusion

We have deﬁned a language for describing communication networks, which is
embedded in a process calculus and closely connected to a class of Petri nets.
Based on the connection to Petri nets, we have devised a graphical notation for
our language. Building on this foundation, we have proved behavioral equivalence
of broadcast via multicast and direct broadcast for a typical pair of networks.
The graphical notation has allowed us to reason in an intuitive way, while the
embedding in a process calculus has permitted us to develop a fully machine-
checked proof. For specifying the equivalence between the two realizations of
broadcast, we have devised the notion of weak bisimilarity up to loss.

7 Ongoing and Future Work

At the moment, we are completing the proofs of the fundamental lemmas that
the correctness proof shown in Sect. 4 uses. Furthermore, we are working on a
variant of our correctness proof that deals with broadcast integrated with packet
ﬁltering according to a ﬁxed predicate.

In the future, we want to prove a modiﬁed correctness statement where the
receive channels of direct broadcast are not lossy. This will clarify that broadcast
via multicast has the more constrained behavior, but will require adjustments
to the speciﬁcation of network behavior. Furthermore, we want to generalize our
correctness proofs to apply to arbitrary strongly connected multicast networks
and their direct-broadcast counterparts. Finally, we want to generalize the proof
about broadcast integrated with ﬁltering to work with state-dependent ﬁlters.

Acknowledgements We want to thank James Chapman, Duncan Coutts,
Kevin Hammond, and Philipp Kant, who supported us in our work on net-
work equivalences and the development of all the theory and the vast amount
of Isabelle formalizations that underlie it. We appreciate IO Global funding this
very interesting work.

8

References

In: Proceedings of

1. Badertscher, C., Gaži, P., Kiayias, A., Russell, A., Zikas, V.: Ouroboros
availabil-
Genesis: Composable proof-of-stake blockchains with dynamic
ity.
the 2018 ACM SIGSAC Conference on Com-
puter and Communications Security. pp. 913–930. ACM, New York (Oct
https://iohk.io/en/
2018).
research/library/papers/ouroboros-genesiscomposable- proof-of-stake-
blockchains-with-dynamic-availability/

https://doi.org/10.1145/3243734.3243848,

2. Bani-Abdelrahman, R.: Speciﬁcation and Veriﬁcation of Network Algorithms using
Temporal Logic. Ph.D. thesis, Loughborough University, Loughborough, England
(Jan 2018). https://doi.org/10.26174/thesis.lboro.8138030.v1

3. Bar-Yehuda, R., Goldreich, O., Itai, A.: Eﬃcient emulation of single-hop radio net-
work with collision detection on multi-hop radio network with no collision detec-
tion. In: Bermond, J.C., Raynal, M. (eds.) Distributed Algorithms, Lecture Notes
in Computer Science, vol. 392, pp. 24–32. Springer, Berlin/Heidelberg, Germany
(1989). https://doi.org/10.1007/3-540-51687-5_29

4. Basten, T., Voorhoeve, M.: An algebraic semantics for hierarchical P/T nets. In:
De Michelis, G., Diaz, M. (eds.) Application and Theory of Petri Nets 1995, Lec-
ture Notes in Computer Science, vol. 935, pp. 45–65. Springer, Berlin/Heidelberg,
Germany (1995). https://doi.org/10.1007/3-540-60029-9_33

5. Best, E., Devillers, R., Koutny, M.: A uniﬁed model for nets and process alge-
bras. In: Bergstra, J.A., Ponse, A., Smolka, S.A. (eds.) Handbook of Process
Algebra, chap. 14, pp. 873–944. Elsevier, Amsterdam, The Netherlands (2001).
https://doi.org/10.1016/B978-044482830-9/50032-1

6. David, B., Gaži, P., Kiayias, A., Russell, A.: Ouroboros Praos: An adaptively-
secure, semi-synchronous proof-of-stake blockchain. In: Buus Nielsen, J., Rijmen,
V. (eds.) Advances in Cryptology – EUROCRYPT 2018, Lecture Notes in
Computer Science, vol. 10821, pp. 66–98. Springer, Berlin/Heidelberg, Germany
https://doi.org/10.1007/978-3-319-78375-8_3, https://iohk.io/
(2018).
en/research/library/papers/ouroboros-praosan-adaptively-securesemi-
synchronous-proof-of-stake-protocol/

7. Degano, P., De Nicola, R., Montanari, U.: A distributed operational semantics
for CCS based on condition/event systems. Acta Informatica 26(1–2), 59–91 (Oct
1988). https://doi.org/10.1007/BF02915446

8. Gorrieri, R.: Process Algebras for Petri Nets. Monographs in Theoretical Com-
puter Science. An EATCS Series, Springer, Berlin/Heidelberg, Germany (2017).
https://doi.org/10.1007/978-3-319-55559-1

9. Kiayias, A., Russell, A., David, B., Oliynykov, R.: Ouroboros: A provably
secure proof-of-stake blockchain protocol. In: Katz, J., Shacham, H. (eds.)
Advances in Cryptology –– CRYPTO 2017, Lecture Notes in Computer Sci-
ence, vol. 10401, pp. 357–388. Springer, Berlin/Heidelberg, Germany (2017).
https://iohk.io/en/
https://doi.org/10.1007/978-3-319-63688-7_12,
research/library/papers/ouroborosa-provably-secure-proof-of-stake-
blockchain-protocol/

10. Olderog, E.R.: Nets, Terms and Formulas. No. 23 in Cambridge Tracts in Theoret-
ical Computer Science, Cambridge University Press, Cambridge, England (1991).
https://doi.org/10.1017/CBO9780511526589

9

