2
2
0
2

r
p
A
8

]

M
M

.
s
c
[

1
v
2
7
2
4
0
.
4
0
2
2
:
v
i
X
r
a

Matrix Syncer - A Multi-chain Data Aggregator For
Supporting Blockchain-based Metaverses

1st Xinyao Sun
Matrix Labs Inc.
asun@matrixlabs.org

2nd Yi Lu
Dapper Labs
amberluyi@dapperlabs.team

3rd Jinghan Sun
Chinese University of HongKong, Shenzhen
jinghansun@link.cuhk.edu.cn

4th Bohao Tang
Dapper Labs
bohao.tang@dapperlabs.team

5th Kyle D. Rehak
Matrix Labs Inc.
kyle@matrixlabs.org

6th Shuyi Zhang
White Matrix Tech Ltd.
tim@whitematrix.io

Abstract—Due to the rising complexity of the metaverse’s busi-
ness logic and the low-latency nature of the metaverse, developers
typically encounter the challenge of effectively reading, writing,
and retrieving historical on-chain data in order to facilitate their
functional implementations at scale. While it is true that accessing
blockchain states is simple, more advanced real-world operations
such as search, aggregation, and conditional ﬁltering are not
available when interacting directly with blockchain networks,
particularly when dealing with requirements for on-chain event
reﬂection. We offer Matrix Syncer, the ultimate middleware that
bridges the data access gap between blockchains and end-user
applications. Matrix Syncer is designed to facilitate the consoli-
dation of on-chain information into a distributed data warehouse
while also enabling customized on-chain state transformation
for a scalable storage, access, and retrieval. It offers a uniﬁed
layer for both on- and off-chain state, as well as a fast and
ﬂexible atomic query. Matrix Syncer is easily incorporated into
any infrastructure to aggregate data from various blockchains
concurrently, such as Ethereum and Flow. The system has been
deployed to support several metaverse projects with a total value
of more than $15 million USD.

Index Terms—Blockchain, metaverse, query, indexing, event,

reﬂection

I. INTRODUCTION

Metaverse is a portmanteau of the preﬁx ”meta” (which
means ”beyond”) and the sufﬁx ”verse” (shorthand for ”uni-
is derived from Neal Stephenson’s science ﬁc-
verse”). It
tion novel Snow Crash [1] and literally refers to a cosmos
beyond our physical world. As stated in [2], the metaverse
is predicated on advancements in four key areas: immersive
realism, ubiquitous access and identiﬁcation, interoperability,
and scalability. To enable the construction of a completely
functional metaverse, each of those areas must be adequately
developed. The development can be grouped into several sub-
domains, including numerous multimedia technologies - net-
work transmission and prototyping, computer graphics, image
processing, virtual reality, and augmented reality [2].

Globalization has increased the volume of international
communication and cooperation on a global scale, however
geographic distance is an objective hindrance that increases
costs. Additionally, as a result of the COVID-19 pandemic,
many events have been suspended to comply with pandemic

preventive standards [3]. These stringent requirements have
created a major opportunity for initiatives including telecon-
ferences and virtual gatherings, in which the metaverse could
provide signiﬁcant accessibility to meet those social require-
ments [3]. Moreover, decentralization has been described as
a critical component of initiating the ﬁfth phase of metaverse
development [2]. Decentralized development has resulted in
the decoupling of the client and server sides of a virtual world
system, which the blockchain protocol has facilitated in recent
years. The metaverse is expected to connect everyone on the
entire globe.Study [4] asserted that blockchain technology is
critical for ensuring the sustainability of metaverse ecosystems
by ensuring decentralization and fairness.

From a macro perspective, a three-layer metaverse archi-
tecture is outlined in [3] as 1) ecosystem, 2) interaction, and
3) infrastructure. Each layer is composed of distinct modules
that work together to make a comprehensive, interactive, and
functional metaverse. As a result, having an interoperable,
robust, and low-latency middleware between each module
becomes critical for ensuring that diverse virtual worlds are
able to seamlessly connect and overlap. As we progress
toward a more decentralized metaverse, we must examine the
solutions we wish to emphasize in the metaverse and other
advancements.

II. RELATED WORKS

A. Traditional Web 2.0 Metaverse

Numerous companies, game creators (Roblox1 and Epic
Games2), software giants (Microsoft, Amazon), social media
conglomerates (Facebook - now Meta, Twitter), and graphics
processor manufacturers (Nvidia) are involved in the meta-
verse, beginning with online events. Extensive research and
development has been conducted to optimize virtual gathering
in the metaverse; NVIDIA’s Omnivers3 is a scalable, multi-
GPU real-time reference development platform for 3D simula-
tion and design collaboration; and Alibaba’s Cloud Metaverse4

1https://www.roblox.com/
2https://www.epicgames.com/
3https://developer.nvidia.com/nvidia-omniverse-platform
4https://www.alibabacloud.com/solutions/metaverse

 
 
 
 
 
 
has been released for the purpose of utilizing cloud computing
to construct the entire virtual world as a service. Meta recently
launched Horizon Worlds5, a virtual-reality social networking
platform that allows up to 20 avatars to explore, hang out,
and build in the virtual realm, as well as a number of
revolutionary gadgets, controllers, and supporting hardware,
including VR gloves with haptic feedback. However, all of
these advancements in multimedia technology are web 2.0
based. The service providers are centralized identity providers,
and users’ digital identities are produced and held centrally.
These advancements are not sufﬁcient to create a transparent,
stable, and sustainable digital economy, where digital proper-
ties belong to the users, not the operators [5].

B. Blockchain-based Web 3.0 Metaverse

The success of Bitcoin [6], as a decentralized transaction
system has garnered signiﬁcant attention. Later,
in 2013,
Vitalik Buterin proposed Ethereum [7], a decentralized com-
putation platform that introduced the use of smart contracts
to execute programs autonomously and transparently on the
blockchain. Since then, a variety of different public blockchain
networks have been established, including Flow6, EOS7, etc.
each of which supports the development of decentralized
applications (DApps) and has its own design philosophy
aimed at improving the user experience and system perfor-
mance. Numerous DApp-based metaverses, such as Sandbox8
and Decentraland9, have attracted increasing attention and
consumers in recent years, resulting in signiﬁcant revenues
[3]. This demonstrates how decentralization’s power could
ensure that digital properties are unique, permanent, and
transferable, which beneﬁts the metaverse’s development and
enables the construction of a fair, free, and sustainable society
[8]. Web 2.0’s inadequacies, along with the existence of
public blockchain technology, have gradually increased public
awareness of privacy, data rights, censorship, and identity
difﬁculties. These factors have facilitated the transition of users
to a more decentralized Web 3.0 metaverse.

C. Indexing Blockchain Data

We are still

in the early stages of the development of
decentralized technologies. When developing a decentralized
application for the metaverse, the developer frequently encoun-
ters constraints on on-chain compute power and storage, along
with a wide variety of public blockchain interfaces [9]. Due
to the increasing complexity of the metaverse’s business logic
and the requirements of low-latency user experiences, properly
reading, writing, and retrieving historical on-chain data in
order to support their functional implementation at scale has
always been an inevitable challenge [10]. The Graph10 is a
popular decentralized protocol for indexing and querying data

5https://www.oculus.com/facebook-horizon/
6https://www.onﬂow.org/
7https://eos.io/
8https://www.sandbox.game
9https://decentraland.org/
10https://thegraph.com/

on Ethereum-based blockchains. It enables the querying of
data that was inaccessible directly before. However, its support
provides only a restricted set of interfaces for transforming
data from an on-chain structure to a GraphQL-compatible
schema. It offers fast and efﬁcient querying of historical
blockchain data, but does not address reﬂective requirements
such as making an external service request or initiating trans-
actions in response to on-chain states and received events.

D. Web3 Infrastructure as a Service

Typically, developers

can establish their own web
3.0 infrastructure and communicate directly with a self-
hosted blockchain node in order to fetch the on-chain state
change (event) and perform reﬂective processing on their own
services. Unfortunately, it is widely known that setting up
a self-hosted node is costly and time-consuming [11].There
is a demand for utilities that decrease the entrance barrier
and make blockchain data more accessible. Infrastructure-as-
a-Service (IaaS) offerings are among the most critical. Infura11
is leading the charge, providing developers, decentralized
application teams, and corporations from a variety of industries
with a suite of tools for connecting their apps to blockchain
networks. Alchemy12 further extends Infura by adding sup-
port for Ethereum layer-2 and other public blockchains (e.g.,
Flow). The most signiﬁcant ultility they have introduced is
the Alchemy Notify API, which uses webhooks to trigger
external actions, allowing for on-chain reﬂective implemen-
tations. However, neither of these projects offer a proper way
to retrieve historical on-chain events through traditional query
requests.

E. Gap of Research and Development

Top traditional IT businesses are attempting to improve
the virtual social gathering user experience in order to make
it a more effective and secure new way of living. To meet
the demands of a decentralized metaverse, developers will
need to overcome some key issues caused by current web
3.0 limitations. Numerous products and services have been
developed to facilitate the development and deployment of
smart contracts in the modern era, such as ChainIDE [12]. One
of the key constraints on the scalability and accessibility of the
majority of decentralized projects is the inability to index and
react effectively to on-chain events that trigger self-business
logic after the contracts have been deployed. Furthermore,
blockchain is currently a niche industry, with one of the key
causes being that blockchains lack interoperable infrastructure,
which prevents applications from being deployed on a large
scale [9]. Thus, a solid infrastructure that connects web 2.0 and
web 3.0 development stacks and supports multiple blockchains
is essential to accelerate the decentralized metaverse revolu-
tion.

In this work, we present Matrix Syncer, the ultimate mid-
dleware that bridges the data access and event trigger gaps
between blockchains and end-user services and applications.

11https://infura.io/
12https://www.alchemy.com/

Fig. 1. An overview of the Matrix Syncer architecture

Matrix Syncer is intended to make it easier to consolidate
on-chain data into a distributed data warehouse while also
enabling customizable on-chain state transformation for scal-
able storage, access, and retrieval. It provides a uniform layer
for both on-chain and off-chain states, as well as quick and
ﬂexible atomic querying and event triggering. Furthermore, the
Matrix Syncer can easily be integrated into any infrastructure
to aggregate data from multiple blockchains simultaneously.

III. PROPOSED FRAMEWORK

A. System Design

The metaverse, we believe, is an event-driven environment
in which each user interaction should trigger a chain of
reﬂections altering the state of related properties. Such events
are typically required by an application in the metaverse to
execute reactive activities in response to the current world
state and system logic. Matrix Syncer is a cloud-based IaaS
platform that allows developers to effortlessly develop the
aforementioned workﬂows without having to worry about
blockchain-related setups or maintenance. The overview of the
system architecture is shown in Fig. 1. Matrix Syncer can help
developers to create web 3.0 compatible applications while
maintaining their familiar web 2.0 development style.

B. Event Registration

As seen in the ﬁgure, developers can conﬁgure their EOIs by
registering them in the Block Sync DB, which registers the
EOI’s global unique identity derived from the chain type,
contract address, and event signature. Each event has its own
set of variables that control how the block syncer distributes
jobs; the three most critical ones are initBlockHeight, synced-
StartBlockHeight, and syncedLatestBlockHeight. Developers
deﬁne the initBlockHeight when registering a new event. It
serves as the starting point for synchronizing a speciﬁc event,

which is typically the block height of the contract deployment.
This is necessary because the contract may have previously
been deployed and performed transactions before enrolling
on our platform. Here, syncedStartBlockHeight refers to the
block height at
the time this event was ﬁrst synced, and
syncedLatestBlockHeight refers to the block height that the
block syncer scanned for this event the most recently.

C. Block Synchronization

The block syncer distributes regular synchronization jobs in
parallel for each event with the batch size K = min(mB, cL−
γ − syncedLatestBlockHeight), where mB denotes the
maximum batch size for a given chain and cL indicates the
most recently minted block height from connected archive
node. mB is an adaptive parameter that can be adjusted based
on the transaction per section (TPS) rate as well as the rate of
ﬁnalized blocks in order to ensure that the processing capacity
of the entire system is sufﬁcient for each chain’s throughput.
γ is a chain-speciﬁc parameter that prevents the most recent
conﬁrmed blocks from being reverted, as is the case with
Ethereum when an archive node receives an uncle block and
later reverts it to adhere to the longest chain protocol [13]. As
a result, γ can be set to a number (e.g., 5 for Ethereum, it is the
default number of blocks for conﬁrmation of freshly minted
blocks deﬁned by the Go Ethereum client) to ensure that the
synced block information is already persistent in the network.
When initBlockHeight
is less than syncedStartBlockHeight,
Block Syncer will distribute a dedicated group of backﬁlling
jobs to rapidly scan for the target event between [initBlock-
Height, syncedStartBlockHeight] in parallel. Once the back-
ﬁlling task has been completed, the syncedStartBlockHeight of
this event will be set to equal to the initBlockHeight.

D. Event Fetching

The fetcher is implemented using corresponding interfaces
according to different blockchains. It reads all EOIs for a
certain block range and converts them to a meaningful data
structure that can be stored in a database. The majority of
public blockchains provide an interface or SDK for inter-
acting with their nodes in order to perform simple chain
state or event queries. For example, on Ethereum, we can
use ether.js13to fetch events by block range from an archive
node. It’s a little more complicated when dealing with Flow
since Flow’s blockchain data is segmented via Sporks. Each
spork stores data for a speciﬁc block range. When we use
the ofﬁcial Flow endpoint, we can only request blocks or
events from the current Spork. To address these issues, we
designed the ultimate event fetcher as a middleware module
that automatically subdivides large block ranges into smaller
sections with associated Spork endpoints and then merges all
fetched events together to provide a level of usability similar to
Ethereum’s. The source code is available at [GitHub]. (reveal
later to respect to the double-blind rule). In our instance, we
just need to construct an adapter for each chain using a suitable
library and connect to an archive node capable of retrieving
historical data. The user can specify the type of nodes they
wish to employ. They can either create their own self-hosted
node or provide the endpoint for third-party IaaS platforms
such as Infura or Alchemy. Additionally, Matrix Syncer offers
its own archive node for multiple chains, providing developers
more freedom for cost-effectiveness optimization.

TABLE I
MARKET STATISTICS OF SUPPORTED METAVERSE PROJECTS

Project

Blockchain

# Tokens

# Trans

RiverMen

MatrixWorld

Ethereum
Ethereum
Flow

10.0K
1.8K
2.0K

3327
1416
1518

$ Init
Sales
1.6M
5M
5M

$ Volumn
Traded
4.5M
4M
1.5M

end of each step. During the event fetching and persistence
step, we calculate the number of persisted events grouped by
registered event type and the number of non-persisted events.
The checksum equation is:

count(allEvents) ⇐⇒ count(nonP ersistedEvents)

(cid:88)

type

count(persistedEventsP erT ype)

(1)

If this equation holds, we persisted all registered events, and
non-registered events are correctly skipped. In the Noﬁty
Event phase, we will check if the count(notif icationSent)
equals to (cid:80)
type count(persistedEventsP erT ype), which is
the checksum we calculated in the previous step to make sure
no registered events are missing during the notiﬁcation step.
These checksums are persisted in Block Sync DB as structured
data and can be used for analytic and monitoring purposes. For
instance, any checksum veriﬁcation failure will result in an
instant alarm. Developers can then use the persisted checksums
of each step to expedite debugging and root cause analysis.

E. Event Persistence and Indexing

G. Reﬂective Hook and Event Queue

When registering an event, developers have the option of
specifying a database scheme for converting on-chain events
into a database (event store). All event fetchers will feed
EOIs into a persistent module as decoded data. The persistent
module converts feed-in events into various data structures
deﬁned by the developers and saves them in the event store.
All subsequent queries will be performed at the data model
speciﬁed in the schema. We adopted DynamoDB14 as a cloud
database solution to achieve 1) horizontal scaling via managed
partitioning and sharding, 2) high availability with assured
SLAs, and 3) high-level consistency. After the backﬁlling
process is completed, developers will be able to do advanced
queries, such as ﬁltering, pagination, sorting, grouping, and
joining result sets. Matrix Syncer is designed to accommodate
multiple chains. Hence, it brings the important advantage of
allowing a uniﬁed data structure for DApps, which support
similar business logic on multiple chains. Users can deﬁne
the same schema for different chains in order to convert
heterogeneous raw events into a standard format and facilitate
interoperability in the metaverse.

F. Event Data Integrity Assurance

We assure end-to-end data completeness for each block
fetching task by performing a checksum veriﬁcation at the

To build a fault-tolerant robust system, we employ Apache
Kafka15 on the side to manage inter-module communication
and jobs. It permits asynchronous communication, which op-
timizes the data ﬂow throughout the system. Queues make our
intermediate event data persistent, which improves reliability
and reduces errors when different pieces of our system are
unavailable. Additionally, it can be quickly scaled to distribute
workload among a ﬂeet of users during peak periods. Once
the event has been passed from the fetcher to the event store,
if there are registered subscribers for a synchronized EOI, the
event dispatcher will notify them of the structured event infor-
mation via a webhook. Webhooks enable users to be notiﬁed
when an EOI occurs on the blockchain. Rather than querying
the server continuously to see whether the state has changed,
webhooks deliver information as it becomes available, which is
far more efﬁcient and advantageous for developers. Webhooks
operate by registering a URL endpoint to which notiﬁcations
should be sent when speciﬁed ROI occurs. The developer
maintains complete control over the endpoint, which could
be a third-party service or one of their own.

IV. OPERATION CASES AND STATISTICS

Matrix Syncer has been deployed in the industry to serve
a variety of decentralized metaverse projects, we’ll look at

13https://docs.ethers.io/
14https://aws.amazon.com/dynamodb/

15https://kafka.apache.org/

two of them here: RiverMen16 and MatrixWorld17, which are
both representative projects with good operation cases. Table
III-G provides an overview of their market statistics. Rivermen
is known as the world’s ﬁrst metaverse project dedicated
to exporting traditional Chinese culture and ﬁrst released in
August. MatrixWorld is our ﬁrst-party project, which was
launched in October and is the ﬁrst multi-chain support
metaverse project. It currently supports the Ethereum and Flow
networks and is among the top three projects by transaction
volume (unofﬁcial) on the Flow network.

Fig. 2. Left: MatrixWorld project, where users can interact their lands which
are minted on Ethereum and Flow blockchains, Right: RiverMen pawn tokens
(above) can be used to mint new RiverSpace Token (below).

A. Event Data Indexing

It is commonly established that dApps must provide a front-
end user interface as shown in Figure 2 in order to provide an
interactive user experience. RiverMen’s website has a feature
to display users’ own tokens and perform advanced queries
among their tokens as well as the entire collection. The typical
smart contract’s interface is insufﬁcient for those scenarios.
However, by deﬁning a mapping scheme in Matrix Syncer, all
events emitted by minting and transferring are well tracked in
the event store with a timestamp. To meet the aforementioned
needs, RiverMen’s front-end can easily call query APIs to
our event query service endpoint. Additionally, because all
events are timestamped when they are saved to the store,
developers can perform advanced queries, such as retrieving
the entire transaction history of a particular token or obtaining
stats such as the number of transactions of a given token within
a speciﬁed time window. Similarly, in MatrixWorld, users
can locate and investigate all land information directly from
the map interface 2 (left). We deﬁned minting and transfer
mapping schemas for the Ethereum and Flow blockchains and
uniﬁed their data structures in the event store. Later on, our
front-end can simply query the needed information without
having to write two data parsers for the distinct chains. We
demonstrated that Matrix Syncer platform can signiﬁcantly
reduce the effort required to onboard a new project with

16https://www.rivermen.io/
17https://matrixworld.org/

historical on-chain data querying requirements, regardless of
the blockchain it is built on or the number of chains it supports
concurrently.

B. Event Reﬂection

Apart from advanced on-chain state queries, event reﬂection
processing is critical for many products with more complicated
business logic. RiverMen introduced the RiverSpace18 token,
which is capable of minting new tokens through the fusion of
a set of RiverMen tokens as shown in Figure 2 (right). The
3D model of the newly created RiverSpace token is built and
rendered dynamically based on the metadata of the RiverMen
tokens. However, due to the restricted compute capacity on-
chain, these procedures must be performed off-chain. Here, the
RiverMen team registered an event triggered by the RiverSpace
contract that contained information about the token IDs of each
RiverMen token used to fuse the newly minted RiverSpace
token. By registering the target event and the webhook on
Matrix Syncer,
they only need to develop rendering and
metadata services to handle off-chain processing. Once their
services receive the event, they will begin rendering the new
3D model based on the metadata of the component tokens,
which can be fetched through their token IDs. Once the
they can update their own
rendering process is complete,
metadata services to enable the front end to display RiverSpace
3D mode. Here, developers are able to concentrate entirely
on their own business logic without having to implement or
maintain any of the servers or infrastructure required to interact
with blockchains.

C. Monitoring and Analytics

Following the best practices of web services development,
Matrix Syncer uses GPL19 (Grafana/Prometheus/Loki) stack
for metrics, alarms, and log viewer for regular DevOps pur-
poses. Aside from that, we also utilize our persisted checksums
for real-time alarming and analytics. We set up instant alarms
during the Block Fetching Job execution and stream the
checksum data to Grafana dashboard to have double insurance.
In MatrixWorld, the checksum failure alarm helped us discover
that the data sync error was due to an unstable data node
provider. In RiverMen, the checksum stats mismatch helped
us ﬁnd a bug in the event processing chain. Furthermore, we
ran an analytics query on our persisted checksum stats to help
our customers and our team understand each typed event’s
processing rate and distribution over time.

V. CONCLUSIONS

With instant setup, multi-chain support, and cloud-based
IaaS, our proposed Matrix Syncer is designed to be the ul-
timate solution for developing complex metaverse DApps that
demand advanced on-chain data operation and event reﬂection.
All of these advantageous infrastructures can help hasten the

18https://opensea.io/collection/river-space
19https://www.opencue.io/docs/other-guides/monitoring-with-prometheus-

loki-and-grafana/

Fig. 3. Monitoring dashboard and data analytics with Grafana

construction of a functional metaverse that
is more user-
friendly, interoperable, and accessible. By using the elasticity,
high availability, and ﬂexibility of cloud computing, Matrix
Syncer bridges the barrier between web 2.0 and web 3.0 by
leveraging the strengths of each, and enabling the rapid devel-
opment of a functional, decentralized metaverse with enhanced
user-friendliness, interoperability, and accessibility. The future
direction will be to integrate additional decentralized protocols
into the present system because, as with the advancement of
the blockchain’s fundamental technology, the current web 3.0
shortcomings will undoubtedly be resolved in the future.

REFERENCES

[1] Neal Stephenson, Snow crash, Metropolis Media, 1992.
[2] John David N Dionisio, William G Burns III, and Richard Gilbert, “3d
virtual worlds and the metaverse: Current status and future possibilities,”
ACM Computing Surveys (CSUR), vol. 45, no. 3, pp. 1–38, 2013.

[3] Yiqian Han and Seokhee Oh,

“Investigation and research on the
negotiation space of mental and mental illness based on metaverse,”
in 2021 International Conference on Information and Communication
Technology Convergence (ICTC). IEEE, 2021, pp. 673–677.

[4] Haihan Duan, Jiaye Li, Sizheng Fan, Zhonghao Lin, Xiao Wu, and Wei
Cai, “Metaverse for social good: A university campus prototype,” in
Proceedings of the 29th ACM International Conference on Multimedia,
2021, pp. 153–161.

[5] Bektur Ryskeldiev, Yoichi Ochiai, Michael Cohen, and Jens Herder,
“Distributed metaverse: creating decentralized blockchain-based model
for peer-to-peer sharing of virtual spaces for mixed reality applications,”
in Proceedings of the 9th Augmented Human International Conference,
2018, pp. 1–3.

[6] Satoshi Nakamoto et al.,

“Bitcoin,” A peer-to-peer electronic cash

system, 2008.

[7] Vitalik Buterin et al., “A next-generation smart contract and decentral-

ized application platform,” white paper, vol. 3, no. 37, 2014.

[8] Cameron Harwick and James Caton, “What’s holding back blockchain
ﬁnance? on the possibility of decentralized autonomous ﬁnance,” The
Quarterly Review of Economics and Finance, 2020.

[9] Zhuotao Liu, Yangxi Xiang, Jian Shi, Peng Gao, Haoyu Wang, Xusheng
Xiao, Bihan Wen, Qi Li, and Yih-Chun Hu, “Make web3. 0 connected,”
IEEE Transactions on Dependable and Secure Computing, 2021.
[10] Carson Farmer, Sander Pick, and Andrew Hill, “Decentralized identiﬁers
for peer-to-peer service discovery,” in 2021 IFIP Networking Conference
(IFIP Networking). IEEE, 2021, pp. 1–6.

[11] Jatinder Singh and Johan David Michels,

“Blockchain as a service
(baas): Providers and trust,” in 2018 IEEE European Symposium on
Security and Privacy Workshops (EuroS&PW). IEEE, 2018, pp. 67–74.
[12] Xiao Wu, Han Qiu, Shuyi Zhang, Gerard Memmi, Keke Gai, and
Wei Cai, “Chainide 2.0: Facilitating smart contract development for
consortium blockchain,” in IEEE INFOCOM 2020-IEEE Conference on
Computer Communications Workshops (INFOCOM WKSHPS). IEEE,
2020, pp. 388–393.

[13] Fabian Ritz and Alf Zugenmaier, “The impact of uncle rewards on
selﬁsh mining in ethereum,” in 2018 IEEE European Symposium on
Security and Privacy Workshops (EuroS&PW). IEEE, 2018, pp. 50–57.

