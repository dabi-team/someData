1
2
0
2

n
u
J

7
2

]

R
C
.
s
c
[

1
v
9
4
1
4
1
.
6
0
1
2
:
v
i
X
r
a

Capacity Analysis of Public Blockchain

Xu Wanga,∗, Wei Nib, Xuan Zhac, Guangsheng Yua, Ren Ping Liua, Nektarios
Georgalasd, Andrew Reevesd

aGlobal Big Data Technologies Centre, University of Technology Sydney, Australia
bData61, CSIRO, Australia
cChina Academy of Information and Communications Technology, Beijing, China
dApplied Research, British Telecom, Martlesham, UK

Abstract

As distributed ledgers, blockchains run consensus protocols which trade capacity

for consistency, especially in non-ideal networks with incomplete connectivity

and erroneous links. Existing studies on the tradeoﬀ between capacity and con-

sistency are only qualitative or rely on speciﬁc assumptions. This paper presents

discrete-time Markov chain models to quantify the capacity of Proof-of-Work

based public blockchains in non-ideal networks. The comprehensive model is

collapsed to be ergodic under the eventual consistency of blockchains, achieving

tractability and eﬃcient evaluations of blockchain capacity. A closed-form ex-

pression for the capacity is derived in the case of two miners. Another important

aspect is that we extend the ergodic model to analyze the capacity under strong

consistency, evaluating the robustness of blockchains against double-spending

attacks. Validated by simulations, the proposed models are accurate and re-

veal the eﬀect of link quality and the distribution of mining rates on blockchain

capacity and the ratio of stale blocks.

Keywords: Markov Chain, Blockchain, Capacity, Stale Blocks, Consistency

∗Corresponding author.
Email addresses: Xu.Wang-1@uts.edu.au (Xu Wang), Wei.Ni@data61.csiro.au (Wei

Ni), zhaxuan@caict.ac.cn (Xuan Zha), Guangsheng.Yu@uts.edu.au (Guangsheng Yu),
RenPing.Liu@uts.edu.au (Ren Ping Liu), nektarios.georgalas@bt.com (Nektarios
Georgalas), andrew.reeves@bt.com (Andrew Reeves)

Preprint submitted to Computer Communications

June 29, 2021

 
 
 
 
 
 
1. Introduction

Blockchain provides a distributed tamper-resistant ledger system, which

chains blocks of transactions by cryptographical means, stores and updates the

chain at distributed locations [1]. Blockchain is the enabling technique underly-

ing the proliferating cryptocurrencies, such as Bitcoin [2], and has been devel-

oped to provide tamper-resistant services [3]. Blockchain miners verify trans-

actions, which are created and signed by blockchain users and then propagated

across the peer-to-peer blockchain network, and assemble the transactions into

blocks in a decentralized manner. The blocks are chained together with their

cryptographic hash values and kept at every individual miner as a local record.

Consensus protocols are run by decentralized miners to mitigate forks re-

sulting from inconsistent chains at diﬀerent locations [4]. The most popular

consensus protocol in public blockchains is Proof-of-Work (PoW), such as in

Bitcoin and Ethereum [5, 6]. A miner ﬁrst assembles the hash value of the

latest block in its local chain, transactions and block metadata into a block.

The miner needs to continuously change the nonce in the block until the block

hash value is less than a global target, and then broadcasts the block with the

valid nonce across the network [2]. The blocks mined by diﬀerent miners are

diﬀerent because of inconsistent views on local chains and transactions, but

require the same level of eﬀort to meet the same global target. Apart from

PoW, other consensus protocols in public blockchains include Proof-of-Stake

(PoS) [7] and Proof-of-Activity (PoA) [8]. Diﬀerent from public blockchains,

private blockchains operate in well-controlled networks and adopt negotiation-

based protocols, e.g., Practical Byzantine Fault Tolerance (PBFT) [9], to achieve

consensus among a relatively small number of miners.

In blockchains, capacity deﬁnes the highest rate at which transactions are

admitted into the globally endorsed blockchain. The blockchain capacity is lim-

ited by the consistency requirement, such as strong consistency and eventual

consistency, as distributed ledgers [10, 11]. Speciﬁcally, the block mining pro-

cess needs to be slowed down, to mitigate inconsistency across the blockchain

2

network. This, unfortunately, sacriﬁces capacity. Such tradeoﬀ between capac-

ity and consistency can be particularly severe in public networks where PoW

based public blockchains are typically adopted. The reason is that the non-

ideal connections of public networks, such as incomplete connectivity, multi-

hop delays, and non-deterministic loss per hop, would make it take longer to

deliver blocks across the networks, or even prevent successful deliveries [12].

The capacity would be penalized to preserve consistency. Moreover, the blocks

may not be delivered in time due to the non-ideal network connections, result-

ing in inconsistency across the blockchain network [11]. The globally endorsed

blockchain solves the inconsistency by keeping the blocks in the global longest

chain and discarding any other blocks. This strategy would further reduce the

blockchain capacity [13]. Take Bitcoin as an example, a block is no larger than

one Megabyte and generated every ten minutes on average to preserve consis-

tency. As a consequence, the capacity of Bitcoin is, on average, six blocks per

hour [11].

The blockchain capacity and blockchain extension process have been quanti-

tatively analyzed under assumptions that simplify the complicated interactions

among miners. Some works ignore the inconsistency to decouple the block min-

ing process across miners. For example, miners were assumed to stick on their

local chains and rarely update chains with counterparts [2, 14, 15] or always have

consistent views on the public blockchain [16]. The inconsistency was evaluated

by the ratio of discarded blocks (i.e., the stale block rate) that can be aﬀected

by many factors, such as block intervals, network delay, information propaga-

tion mechanisms and network conﬁguration [17]. Some studies employed stale

block rates from simulations or empirical stale block rates to analyze blockchain

security and performance [17, 15]. The stale block rate was estimated under a

bounded block propagation delay among miners and the assumption that a fork

occurs if new blocks are mined before preceding blocks have propagated to all

miners [18, 19, 20]. This assumption would sacriﬁce accuracy because the new

blocks can be mined by the miners that have learned the latest blockchain.

This paper presents new Markov chain models that can accurately quantify

3

the capacity and consistency of PoW-based public blockchains and capture the

impact of non-ideal links on the blockchain capacity. We start by modeling

under the eventual consistency requirement of public blockchains. A compre-

hensive Discrete-Time Markov Chain (DTMC) model is established, where the

lengths of chains at miners are captured in Markov statuses, and then com-

pressed to be an Ergodic DTMC (EDTMC) for numerical evaluations of generic

network settings. A closed-form expression is derived for the capacity of a

two-miner blockchain system with unreliable links. We further generalize the

EDTMC model to evaluate the capacity of the blockchain system in the state of

strong consistency which is important for instantly verifying transactions and

preventing double-spending attacks.

The contributions of this paper are summarized as follows.

• We propose a DTMC model to characterize blockchains in non-ideal net-

works, which is collapsed to be an EDTMC model under the eventual

consistency to improve the computational feasibility;

• A closed-form expression is derived for the blockchain growth rate and the

stale block rate of two-miner blockchain systems in non-ideal networks;

• We extend the EDTMC model under the strong consistency to trace the

block miners in addition to the blockchain growth rate. A closed-form

expression is derived in the ideal case of two miners which are connected

by error-free and reliable links.

Validated by simulations, the proposed models are able to quantify the im-

pacts of mining rates of the miners and link conditions on the blockchain capac-

ity. We show that the blockchain capacity is strongly aﬀected by the distribution

of the mining rates and lower-bounded by the case with even mining rates.

The rest of this article is organized as follows. Section 2 studies related works,

followed by the system model and deﬁnition in Section 3. Section 4 presents the

DTMC/EDTMC models for the blockchain capacity analysis under the eventual

consistency, followed by the closed-form expression for the capacity of two miners

4

connected by non-ideal links in Section 5. In Section 6, the strong consistency of

a public blockchain is evaluated. The proposed models are numerically validated

in Section 7, followed by conclusions in Section 8.

2. Related Work

Most existing theories on the capacity and consistency of a network, such as

the well-known Brewer’s theorem [21] and PACELC theorem [22], are qualitative

and cannot be readily applied to quantitatively evaluate the capacity of public

blockchains. Some models have been designed to quantify the consistency and

capacity of PoW-based public blockchains [2, 18, 19, 20]. These models rely

on speciﬁc assumptions that simplify [18, 19, 20] or decouple [2] the blockchain

extension process across miners and thus compromise model accuracy.

Brewer’s theorem, also widely known as the Consistency, Availability and

Partition tolerance (CAP) theorem, was established in 2002 [21]. The theorem

extracts three vital guarantees for general distributed systems, namely, con-

sistency, availability and partition-tolerance; and dictates qualitatively that it

is impossible for a distributed system to simultaneously provide all the three

guarantees in the meantime. The CAP theorem is recently extended to be

the PACELC theorem [22] pointing out the overlook of the consistency-latency

trade-oﬀ in the CAP theorem and revealing the existence of the trade-oﬀ be-

tween latency and consistency even in the absence of partitioning. Although

insightful, the theorems do not provide a quantitative understanding of the

trade-oﬀs and practical applications [23]. The consistency referred in the the-

orems is single-copy consistency [24] or linearizability [21], which is a type of

strong consistency [25]. A blockchain is considered to provide strong consis-

tency and serializability by delaying conﬁrmation of the latest blocks in the

blockchain. For example, Bitcoin is strongly consistent with high probability

because of the six-conﬁrmation rule [26]. The physical characteristics of net-

works and links, such as latency, ﬁnite link bandwidth and erroneous link, can

be parametrized as a threshold; which would lead to partitioning a system into

5

isolated subsystems, if violated [24]. However, this threshold has an implicit

assumption of separable networks, while many networks are inseparable [27].

By exploiting distributed consensus protocols, public blockchains have to

trade oﬀ between capacity and consistency, as dictated in the CAP theorem.

Blockchain simulation platforms, such as BlockSim [28] and SimBlock [29], have

been developed to investigate the public blockchain growth from experimental

approaches. The time-consuming PoW mining process is simulated with prob-

ability functions. The blockchain parameters, such as the number of nodes,

block size and block interval, and network parameters, e.g., propagation delay

and bandwidth, can be conﬁgured to evaluate the impact on the blockchain

extension.

Blockchain capacity and consistency have been studied by modeling the

block mining and chain extension process. In Nakamoto’s paper [2], the blockchain

extension at a benign miner and an attacker was formulated with a Binomial

Random Walk model to deduce the attacker’s winning probability. The model

assumed that the miner and the attacker stuck on their local chains and ignored

the interaction between the miner and the attacker. However, the blockchain

extension among multiple benign miners is more complicated. Miners may have

inconsistent views of the blockchain due to non-ideal connections and contin-

uously switch among the chains (according to the chain selection rule). The

impact of inconsistency across miners can be evaluated by the ratio of dis-

carded blocks (i.e., the stale block rate).

In [17], the stale block rates from

observation and simulator were fed into Markov Decision Process (MDP) mod-

els to analyze the security and performance against selﬁsh mining and double-

spending attacks. Instead of carrying out time-consuming simulations of stale

block rates [17], there have been attempts to quantitatively analyze the stale

block rate [19, 20, 18]. By assuming that the blocks are stale if they are mined

before the preceding blocks propagate to all miners within a bounded block

propagation delay, the stale block rate was presented in [19]. The bounded

block propagation delay can be quantiﬁed by formulating the Gossip protocol,

e.g., in [20]. This assumption can overestimate the stale block rate and thus

6

underestimate the blockchain capacity because the blocks can be mined by the

miners who have learned the latest blockchain and are nonstale. By developing

the theory on Markovian systems with a constant delay between two miners, a

closed-form expression was developed for the blockchain capacity [18]. However,

the model and result have some limitations, such as only two miners, unequal

mining rates and a bidirectional and constant delay.

The Markov theory has been developed to model other dynamic processes

in blockchain where blocks are assumed to be generated at a ﬁxed rate as an

inherent blockchain parameter. In [30], the transaction arrivals and mining pro-

cess were analyzed with a Markov process of GI/M/1 type. The number of

unconﬁrmed transactions, i.e., the number of transactions in the transaction

pool, and the transaction conﬁrmation time were calculated with the Markov

model. In [31], a Markov chain was developed to capture the block synchro-

nization process of churning nodes that may leave the blockchain network and

rejoin after some time. The synchronization time and block distribution time

were derived from the Markov chain.

In our recent work [32], a DTMC model was proposed to capture the blockchain

growth under the eventual consistency for the developed blockchain-IoT testbed.

The inﬁnite Markov model of the DTMC was approximated by a ﬁnite Markov

model to evaluate the steady states and the blockchain capacity under the even-

tual consistency. However, the model only considered the eventual consistency

and thus failed to capture the strong consistency which is critical to analyz-

ing the double-spending attacks in blockchains. Meanwhile, the DTMC model

in [32] only gave numerical upper bounds rather than accurate closed-form re-

sults.

3. System Model and Deﬁnition

We consider public blockchains where blocks are mined in parallel based

on consensus problems at diﬀerent miners. Miners can solve the consensus

problems simultaneously and mine more than one blocks that have the same

7

index. These blocks conﬂict with each other and can cause forks, although they

may contain the same set of transactions. Only one of the conﬂicting blocks

can be accepted in a blockchain which acts as a distributed ledger and pursues

eventual consistency. The other blocks are discarded.

The blockchain capacity deﬁnes the highest rate at which transactions are

admitted into the globally endorsed blockchain. The blockchain capacity, de-

noted by R, can be given by

R = δ × ζ,

(1)

where δ is the extension rate of the globally endorsed chain (i.e., the number of

blocks per unit time appended to the longest of the chains maintained at dis-

tributed locations). The maximum number of transactions per block is denoted

by ζ and can be calculated based on the block size limit and the minimum trans-

action size. Without loss of generality, we assume ζ = 1. The blockchain capac-

ity can be assessed as the extension rate of the globally endorsed blockchain.

We consider a public blockchain system with n miners operating on a slotted

basis (e.g., running the network timing protocol (NTP) [33]). The timeslot is

short enough that a miner can mine no more than a block per timeslot. This is

due to the fact that the block mining of a miner is a sequential process because

mining a block needs the hash value of the preceding block and, therefore, can

only be carried out after mining the preceding block. Multiple miners can mine

diﬀerent blocks in parallel in the same timeslot on top of their local chains. We

use c = [c1, c2, · · · , cn] to denote the mining rates of n miners, where ci gives

the probability that the i-th miner produces a block (and appends the block to

its own local chain) in any timeslot.

In an ideal scenario where the miners are connected by error-free links, the

miners could synchronize with their neighbors in terms of their knowledge on

the longest blockchains in every timeslot. For example, the miners within a

local area network (LAN) can have such error-free, ideal links in-between, as

shown in Fig. 1. The blockchain capacity of the n miners connected by ideal

8

Figure 1: An example of a public blockchain network, where miners can be connected by

non-ideal links with error and delay. The network can be partitioned into multiple segments,

due to the non-ideal links.

links, denoted by ¯R, can be calculated with their mining rates,

n
(cid:89)

¯R = 1 −

(1 − ci).

i=1

(2)

This is also the probability that at least one block is mined by diﬀerent miners

in a timeslot. In the ideal scenario, all miners have learned the longest chains

and independently try to extend the chains by a block.

In a timeslot, more

than a block can be mined by diﬀerent miners. These blocks are at the same

chain height, and only one of the blocks is eventually admitted in the globally

endorsed blockchain according to the longest chain rule. The other blocks that

are not admitted are discarded. As a result, the globally endorsed blockchain
can grow by a block with probability ¯R.

In non-ideal networks, the connections among miners can be unreliable, pre-

venting the miners from getting instant views on the longest chain in time.

Let aij and dij be the probability that the i-th miner can successfully pass its

knowledge of the longest chain to the j-th miner in a timeslot and the delay of

the link, respectively. They describe the non-ideal links between the miners, as

given by [34]

dij =

∞
(cid:88)

k=1

aijk(1 − aij)k−1 =

1
aij

,

(3)

where k indicates failed transmissions in the preceding k − 1 timeslots and a

successful transmission in the k-th timeslot. In other words, a message needs

9

an average dij = 1
aij

(re)transmissions to be successfully delivered through the

link with the transmission success rate of aij.

One example is given in Fig. 1 that miners locate in separated LANs that are

connected with non-ideal links. Miners cannot always get instant views of chains

from miners in other LANs. The miners would mine blocks based on their local

chains. When the miners learn chains from other miners, they would compare

their local chains and received chains and then keep the longest one following

the longest chain rule. The interaction among miners and the extension of the

globally endorsed blockchain can be complicated due to decentralized running

of the longest chain rule and the switch between chains and non-ideal links,

i.e., ai,j.

Stale blocks refer to the blocks that are temporarily appended to local chains

at some miners (not the global longest chain) and discarded later when the local

chains are replaced by the global longest chain. Stale blocks are inevitable in de-

centralized blockchain systems and can greatly reduce the security performance

of the blockchain [17]. The ratio of stale blocks, denoted by Or, can be readily

inferred from the blockchain capacity R, as given by

Or =

(cid:80)n

i=1 ci − R
(cid:80)n
i=1 ci

.

(4)

Notations used in this paper are collated in Table 1, and model assumptions

are collated as follows,

• The blockchain follows the longest chain rule, i.e., the longest chain of all

miners is selected as the globally endorsed blockchain;

• The system is discrete-time, where each timeslot consists of a synchro-

nization phase and a mining phase;

• In any timeslot, a miner can mine no more than one block, and diﬀerent

miners can independently mine blocks;

• The links among the miners can be non-ideal and described with trans-

mission success probabilities;

10

• Any blockchain transaction can be instantly processed.

Notation Deﬁnition

Table 1: Notations and Deﬁnitions

R
¯R

Or

δ

ζ

n

ci

ai,j

S

M

b

bi

r

ri

πr

V

vi,j

τi,j

γi

Blockchain capacity

The blockchain capacity of n miners connected by ideal links

The ratio of stale blocks

The growth rate of the blockchain in each timeslot

The number of transactions per block

The number of miners

The mining rate of the i-th miner

The transmission probability from the i-th to the j-th miner

The synchronization phase in a timeslot

The mining phase in a timeslot

The status of the DTMC

The number of blocks in the local chain at the i-th miner

The status of the EDTMC

The relative length of the local chain at the i-th miner

The steady-state probability of the status r

The status of the FDTMC

The miner of the j-th block in the i-th miner’s local chain

The steady-state probability of the status [1i, 2 × 1j]

The ratio of admitted blocks mined by the i-th miner

4. Capacity Analysis under Eventual Consistency

In this section, we start with a Discrete-Time Markov Chain (DTMC) which

captures the PoW blockchain dynamics in non-ideal networks with n miners.

From the perspective of the eventual consistency, we focus on the blockchain

capacity and the stale block rate and ignore the speciﬁc miners of blocks in the

globally endorsed blockchain.

11

In any timeslot, the i-th miner can successfully pass its local chain to the

j-th miner with probability aij as deﬁned in (3). The status of the chains can

be represented with b = [b1, b2, · · · , bn], where bi is the number of blocks in

the local chain at i-th miner. The status of the blockchain network with three

miners is illustrated in Fig. 2.

Figure 2: The statuses of the DTMC/EDTMC model. For example, b = [2, 3, 1] represents

that the three miners have 2, 3, and 1 blocks, which can be collapsed to be r = [1, 2, 0],

indicating that the ﬁrst and second miners have 1 and 2 more blocks than the third miner.

In a timeslot, the chain extension includes a Synchronization (S) phase,

where miners exchange local chains with connected miners and then only keep

the longest one and drop the others. The chain extension also includes a Mining

(M) phase, where the miners independently solve the global mining problems

to mine blocks and append the mined blocks to the end of their local chains.

We assume that the timeslot is small enough that a miner can mine at most one

block. The transition probabilities of the DTMC can be formulated by

Pr{b(cid:48)|b} =

(cid:88)

¯b

Pr{¯b(cid:12)

(cid:12)b, S} Pr{b(cid:48)(cid:12)

(cid:12)¯b, M}.

(5)

Here, ¯b is an intermediate status after the S phase. Pr{¯b(cid:12)
tion probability from status b to ¯b via the S phase, and Pr{b(cid:48)(cid:12)
transition probability from ¯b to b(cid:48) across the M phase.

(cid:12)b, S} gives the transi-
(cid:12)¯b, M} gives the

12

Since every miner independently updates its chain based on its knowledge

of its neighbors, Pr{¯b(cid:12)

(cid:12)b, S} can be given by

Pr{¯b(cid:12)

(cid:12)b, S} =

n
(cid:89)

i=1

Pr{¯bi|bi, S}.

(6)

The transition probability Pr{¯bi|bi, S} is the probability that the i-th miner
replaces its local chain with the length of bi by a chain with the length of ¯bi

from its neighbors, and can be given by

Pr{¯bi|bi, S} =








1 −





n
(cid:89)

j=1
bj =¯bi



(1 − aji)





n
(cid:89)

j=1
bj >¯bi

(1 − aji),

if there exists k (cid:54)= i and bk = ¯bi > bi;
n
(cid:89)

(1 − aji),

j=1
bj >¯bi
if there exists k (cid:54)= i and bk > ¯bi = bi;

1,

0,

if ¯bi = bi > bk, ∀k;

otherwise.

(7a)

(7b)

(7c)

(7d)

Here, (7a) captures the case that the i-th miner receives a chain with ¯bi blocks

from its neighbors and uses one of them to replace the shorter local chain. (7b)

indicates that the miner keeps its bi-block long local chain if it does not receive

any chain longer than bi. (7c) is because the miners having the longest local

chain keep their chains.

In the mining phase, miners independently mine blocks and extend their

local chains. Thus, we have

Pr{b(cid:48)(cid:12)

(cid:12)¯b, M} =

n
(cid:89)

i=1

Pr{b(cid:48)
i

(cid:12)
(cid:12)¯bi, M}.

(8)

Here, the number of blocks in i-th miner’s chain extends from ¯bi to b(cid:48)

i with

13

probability Pr{b(cid:48)
i

(cid:12)
(cid:12)¯bi, M}, which is given by

Pr{b(cid:48)
i

(cid:12)
(cid:12)¯bi, M} =






ci,

(1 − ci),

if b(cid:48)

if b(cid:48)

i = ¯bi + 1;
i = ¯bi;

0,

otherwise.

(9)

We can also conclude that

Pr{b(cid:48) + k × 1n|b + k × 1n} = Pr{b(cid:48)|b}, ∀k ∈ Z +,

(10)

where Z + and 1n denote positive integers and the n-dimensional all-one vector,

respectively.

After building up the DTMC, we collapse the diagonal statuses for an ergodic

DTMC (EDTMC) applying the eventual consistency feature of blockchain. The

statuses of the EDTMC, denoted by r, represent the relative chain lengths rather

than the actual lengths of local chains at diﬀerent miners. This is achieved by

letting r = b − min(b) × 1n, where min(b) captures the shortest length of the

local chains (i.e., the minimum element of b). For example, b = [2, 3, 1] can be

collapsed to be r = [1, 2, 0], as shown in Fig. 2.

The EDTMC preserves the Markov property because only the relative lengths

of the chains are used to evaluate the transition probabilities in (7) and (9). The

transition probabilities of the EDTMC can be given by

Pr{r(cid:48)|r, E} =

∞
(cid:88)

k=0

Pr{r(cid:48) + k × 1n|r}.

(11)

Here, E indicates that this is the transition probability for the EDTMC model,

and Pr{r(cid:48) + k × 1n|r} can be obtained with (5).

The proposed EDTMC model with inﬁnite statuses has unique steady-state

probabilities because the blockchain network can reach the status of r0 =

[0, 0, · · · , 0] when all the local chains at diﬀerent miners have the identical num-

ber of blocks [35, Theorem 16]. With the steady states of the EDTMC model,

the blockchain capacity can be given by

R =

(cid:88)

(πr × ωr).

(12)

r

14

Here, πr is the steady-state probability of the status r. ωr is the expected

blockchain capacity of status r and can be given by







Pr{b(cid:12)

(cid:12)r, S}



1 −





ωr =

(cid:88)

b

n
(cid:89)

i=1
bi=max(b)













(1 − ci)

.

(13)

This captures the case that at least one miner with the longest local chains after

the S phase mines a block and therefore extends the global longest chain.

The EDTMC with inﬁnite statuses can be asymptotically approximated with

a Markov model with ﬁnite statuses to improve the computational feasibility.

We assume that the longest chain can only exceed up to k blocks at most. In

practice, Bitcoin recommends k = 6 that blocks earlier than six blocks have

been eventually endorsed by all the miners [2]. The approximation Markov

model takes the statuses and transition probabilities from the EDTMC when

the maximum relative length of chains is less than m, i.e., max(r) < k. In the

case of max(r) = k, the status is redirected to a status r(cid:48) with max(r(cid:48)) < k.

The status r(cid:48) is given by

r(cid:48)
i =




ri − 1,

ri > 0;



0,

ri = 0.

(14)

Fig. 3 validates the accuracy of the approximation Markov model. There

are ﬁve miners with the identical block mining rate ci and connected with

each other in a complete graph. The synchronization success rates of all the

non-ideal links are set to α. We can see that the capacity obtained from the

approximated Markov model converges to the simulation results with the en-

larging status space, i.e., increasing k. The convergence slows down with the

decreasing transmission success rate and/or the increasing block mining rate.

This is because the decreasing transmission success rate and the increasing min-

ing rate can increase the diﬀerence across the blockchain network, which needs

large status spaces, i.e., large k, to capture the inconsistency.

15

Figure 3: The blockchain capacity of ﬁve miners that are connected with each other in a

complete graph. The identical mining probabilities, ci, and non-partition probability, i.e.,
α = aij are given in the ﬁgure. The dash lines are the simulation results running over 106

timeslots.

5. Capacity of two miners under eventual consistency

In this section, we analyze a special case of the EDTMC model with two par-

ticipating miners, where the closed-form expression for the eventual consistency

capacity of a blockchain can be derived under unreliable connections between

the miners, by employing queuing theory [36]. In this case, the EDTMC consists

of two dimensions, as shown in Fig. 4.

The state transitions among states [i, 0] (or [0, j]) can be interpreted as

a queueing process with queue renovation or queue ﬂushing. From queueing

theory, a queue renovation [37] or ﬂushing [38] process deﬁnes a process where

a queue, e.g., M/M/1 queue [36], can be emptied at a predeﬁned renovation

probability per timeslot. States [i, 0] (i ≥ 0) and [0, j] (j ≥ 0) can be visualized

as two queues, of which the average arrival rates are c1(1−c2) and (1−c1)c2 and

the average service rates are (1 − c1)c2 and c1(1 − c2), and the queue renovation

probabilities [37] are a12 and a21, respectively.

The steady-state probability of state [0, 0], denoted by π0,0, can be given in

(15a), where the three terms account for three mutually exclusive scenarios. (1)

16

k234567R0.10.150.20.250.30.350.40.45RSimulationresultα=0.01,ci=0.2α=0.01,ci=0.1α=0.1,ci=0.2Figure 4: State transition diagram of the two-dimensional EDTMC model of the blockchain

growth between two miners connected by non-ideal links.

state [0, 0] can transit to itself if neither of the two miners mines a new block and

the case that each miner generates a block independently. (2) states [i, 0] and

[0, j] can transit to state [0, 0], if neither of the two miners mines a block or each

miner produces a new block independently after successful synchronization. (3)

states [1, 0] and [0, 1] can transit to state [0, 0] if the miners fail to synchronize

and the miner with the shorter chain mines a new block.

π0,0 =(1 − c1 − c2 + 2c1c2)(π0,0 + a12

∞
(cid:88)

i=1

πi,0 + a21

∞
(cid:88)

j=1

π0,j)

+ (1 − a12)(1 − c1)c2π1,0 + (1 − a21)c1(1 − c2)π0,1;

(15a)

π1,0 =c1(1 − c2)(π0,0 + a12

∞
(cid:88)

i=1

πi,0 + a21

∞
(cid:88)

j=1

π0,j)

+ (1 − a12)(1 − c1 − c2 + 2c1c2)π1,0 + (1 − a12)(1 − c1)c2π2,0;

(15b)

πi,0 =(1 − a12)c1(1 − c2)πi−1,0 + (1 − a12)(1 − c1 − c2 + 2c1c2)πi,0

+ (1 − a12)(1 − c1)c2πi+1,0, for i ≥ 2.

(15c)

Likewise, the steady-state probabilities of state [i, 0], i.e., πi,0, can be given

in (15b) and (15c). Speciﬁcally, state [0, 0] can transit to state [1, 0] at the

17

probability c1(1−c2) after the ﬁrst miner produces a new block. States [i, 0] and

[0, j] can transit to state [1, 0] with probabilities a12c1(1 − c2) and a21c1(1 − c2),

respectively, because only the ﬁrst miner mines a new block after a successful

synchronization. States [i, 0] can also transit to itself in two cases: (1) neither

of the two miners generates a block after a failed synchronization attempt, and

the probability is (1 − a12)(1 − c1)(1 − c2); (2) each of the miners mines a

block independently after a failed synchronization attempt, and the probability

is (1 − a12)c1c2. State [i − 1, 0] can transit to state [i, 0] with the probability (1 −

a12)c1(1 − c2), if the ﬁrst miner mines a new block after a failed synchronization

attempt. State [i + 1, 0] can transfer to state [i, 0] with the probability (1 −

a12)(1 − c1)c2, in the case that the second miner with the shorter chain mines

a new block after a failed synchronization attempt.

The steady-state probabilities of state [0, 1] and state [0, j], i.e., π0,1 and π0,j,

can be obtained by switching the roles of the two miners in (15b) and (15c).

With the expressions of the steady-state probabilities, we can put forward the

following theorem,

Theorem 1. The blockchain capacity of two miners, denoted by R2, is given

by

R2 =(c1 + c2 − c1c2)π0,0

+ (c1 + a12c2 − a12c1c2)

+ (c2 + a21c1 − a21c1c2)

(cid:88)∞
i=1
(cid:88)∞
i=1

πi,0

π0,i.

Proof. The proof of the theorem, and the numerical values of π0,0, (cid:80)∞
and (cid:80)∞

i=1 π0,i, are given in Appendix A.

i=1 πi,0

This theorem presents an accurate, closed-form expression for the blockchain

capacity, which depends on the distribution of mining rates and non-ideal con-

nections. This can avoid time-consuming simulations, e.g., in [17]. The EDTMC

in Section 4 can be hardly computed numerically due to its inﬁnite statuses and

could only be approximated by a Markov model with ﬁnite statuses, as done in

18

Section 4. In contrast, the closed-form expression in this theorem is accurate

and does not involve any approximation. This result does not rely on particular

assumptions, such as unequal mining rates and bidirectional constant delays

in [18], and therefore preserves adaptability.

6. Capacity analysis under strong consistency

Sections 4 and 5 can quantify the blockchain capacity, but cannot diﬀerenti-

ate blocks mined by diﬀerent miners in the globally endorsed blockchain. They

cannot provide the probability at which a block has been admitted by all the

miners. In this section, we develop a Fine-resolution DTMC (FDTMC) model

from the perspective of strong consistency, where both the number and the

miners of blocks are traced. The FDTMC model is extended from the proposed

EDTMC model with increased dimensions recording the miners of individual

blocks in the local chain of each miner.

Figure 5: A diagram of the connections between the proposed DTMC models under eventual

consistency and strong consistency, where diﬀerent local chains of three miners are illustrated

with r3 = 0.

A state of n-dimensional FDTMC is denoted by V, which is a set of n

vectors. The i-th vector in V, denoted by vi, records the miners of the blocks

in the local blockchain of the i-th miner. The j-th entry of vi, denoted by vi,j,

gives the index to the generating miner of the j-th block since the last state

of strong consistency in the local chain of the i-th miner. Fig. 5 provides an

example of V with reference to r (a state of the EDTMC). V = [v1, v2, v3],

19

where the lengths of v1, v2, and v3 are r1 + 2, r2 + 2 and 2, respectively; c.f.,

r = [r1, r2, 0] in Section 4. Nevertheless, the transition probability from V to

V(cid:48) can be evaluated in the same way as in Section 4, and therefore suppressed

for brevity.

Figure 6: States transition diagram of the FDTMC model of two miners connected by non-

ideal links. The blue arrows are the state transitions with successful S phases, while the black

arrows illustrate the state transitions with failed S phases.

Fig. 6 shows an example of the state transitions in a two-miner blockchain,

where state [∅, ∅] is the state of strong consistency, i.e., the local chains of the

two miners are exactly the same. State [1i, 2 × 1j] indicates that the ﬁrst and

the second miners have mined i and j diﬀerent blocks in their local chains,

respectively. “2” labels the j blocks are mined at the second miner. This

is because all states transit to [∅, ∅] once the two miners successfully exchange

their knowledge on the longest chains. The two inconsistent blocks can be mined

by the two miners in the same timeslot, or in diﬀerent timeslots without being

properly synchronized between the miners. With the transition probabilities,

the steady-state probabilities of the FDTMC model with increased dimensions

can be numerically and asymptotically evaluated to assess the strong consistency

of the blockchain; see Section 4.

20

In general, the analysis complexity of strong consistency can be exponentially

higher than that of eventual consistency as studied in Section 4. This is due

to the signiﬁcantly increased dimensions of the states in the FDTMC model

retaining ﬁne details of the miners of individual blocks across the system, and a

curse-of-dimensionality can occur [39]. Even in the case where two miners are

connected by non-ideal links, the closed-form expression for the steady-state

probabilities of the FDTMC with increased dimensions can be computationally

prohibitive to deduce.

In the ideal case where two miners are connected by error-free links, the

closed-form expression for the capacity of blockchain with strong consistency

can be derived. This is because the states can be substantially collapsed to

reduce the dimensions of the FDTMC model, since valid transitions can only

take place between states [1i, 2 × 1j] with |i − j| ≤ 1, as illustrated in Fig. 7.

With the error-free links, the two miners can successfully synchronize their local

chains every timeslot. The diﬀerence between the lengths of the two blockchains

cannot grow beyond one block.

As also shown in Fig. 7, the non-diagonal states can transit to [∅, ∅] after

synchronization. The diagonal states can transit to the non-diagonal states

after a timeslot, in which only a single block is mined from the two miners.

Let τi,j denote the (unique) steady-state probability of state [1i, 2 × 1j], and
(cid:80)
i

j τi,j = 1. Thus, we have the following theorem,

(cid:80)

Theorem 2. After synchronization, the strong consistency probability between

two miners connected by ideal links, denoted by η, is given by

η = τ0,0 +

(cid:88)

(τi,i−1 + τi−1,i) =

i=1

c1 + c2 − 2c1c2
c1 + c2 − c1c2

.

η is also the probability that a mined transaction is admitted by the two miners

when the two miners have the strong consistency view of the globally endorsed

blockchain.

Proof. The proof of this theorem is given in Appendix B.

21

Figure 7: An illustration of the state transition of the FDTMC model of two miners connected

by ideal links. The blue arrows are the state transitions with successful S phases, while the

black arrows illustrate the state transitions with failed S phases.

The FDTMC model uses a large state space to trace all the unsynchronized

blocks and their miners, while the EDTMC model developed in Sections 4 and 5

only captures the relative lengths of unsynchronized local chains. Thus, an

EDTMC state covers multiple states in the FDTMC model. For example, [0, 0]

in the EDTMC model covers states [1i, 2 × 1i], i ≥ 0 in the FDTMC model.

All the states indicate that both local chains at the two miners have the same
number of blocks. As a result, we can prove that π0,0 = (cid:80)∞
i=0, τi,i in the case of
a12 = a21 = 1. In addition to the blockchain capacity derived from the EDTMC

model, the FDTMC model can provide the number of blocks mined by diﬀerent

miners in the globally endorsed blockchain, which can calculate the rewards for

the miners, as stated in the following corollary

Corollary 1. For two miners connected by ideal links, the ratios of the blocks

mined by the ﬁrst and second miner in the globally endorsed blockchain, denoted

22

by γ1 and γ2, respectively, are given by

γ1 =

γ2 =

(cid:80)∞

(cid:80)∞

i=1(iτi,i−1)
¯R2
i=1(iτi−1,i)
¯R2

=

=

c1(1 − c2)
c1 + c2 − 2c1c2
c2(1 − c1)
c1 + c2 − 2c1c2

;

.

This is because the globally endorsed blockchain increases i blocks from the

ﬁrst miner when state [∅, ∅] transits from states [1i, 2 × 1i−1]; see (cid:80)∞
in the corollary. Likewise, γ2 can be obtained.

i=1(iτi,i−1)

7. Numerical Validation and Discussion

We ﬁrst evaluate the blockchain capacity of diﬀerent numbers of miners,

1−q

where the block mining rates meet ci = c1 × qi−1 and q is a scale factor. c1 =
2(1−qn) , if q (cid:54)= 1; and c1 = 1
2n , if q = 1. We can tune the scale factor q to
simulate diﬀerent mining rate distributions, e.g., identical mining rates across

miners when q = 1 and approximately centralized mining when q = 0.1.

Fig. 8 shows R against the number of miners under diﬀerent scale factors

based on the EDTMC in Section 4. All the miners connect with each other in

a complete graph. The synchronization success rate is set to α = 0.5. aij = α

for i (cid:54)= j and aii = 0. The value of q ranges from 0.1 to 1. The accumulated
mining rate is 0.5, i.e., (cid:80)

i ci = 0.5, as shown by the reference line in the ﬁgure.
Each simulation result, indicated by a dot, takes an average of 2 × 106 timeslots.

As shown in the ﬁgure, blockchain capacity drops as the blockchain system is

becoming more decentralized either with even mining rates or more miners. The

centralized mining, e.g., q = 0.1, can achieve higher blockchain capacity than the

decentralized mining, e.g., q = 0.3. The blockchain capacity is lower-bounded

by that of homomorphic blockchain network where all the miners have identical

mining rates. We also notice that the blockchain capacity keeps stable for more
than ﬁve miners. This is because ci = (1−q)qi−1
contributes the block mining. As a result, the blockchain extension process can

is too small for i > 5 and hardly

2

be dominated by the top-tier miners.

23

Figure 8: Capacity of the public blockchain against the number of miners in a complete graph.
The total mining rate is set to be 0.5, i.e., (cid:80) ci = 0.5. ci = c1 × qi−1, and q is a scale factor.
c1 is set to c1 = 1−q

2(1−qn) , q (cid:54)= 1, and c1 = 1

2n , q = 1.

Figure 9: dR2
dc1

with the growth of c1, where c2 = 1 − c1. Three transmission success rates,

i.e., 0.5, 0.1 and 0.001, are considered.

Fig. 9 plots dR2
dc1

with the growth of c1, where we set c2 = 1 − c1. The links

are assumed to provide the same transmission success rates. We can see that R2
reaches the minimum value when c1 = c2, because dR2
dc1
and dR2
dc1

> 0 when c1 > 0.5 > c2. Particularly, the eﬀect of the mining rate

< 0 when c1 < 0.5 < c2

distribution can be analyzed with Theorem 1 and its derivative. For example,

24

Numberofminers234567R0.30.320.340.360.380.40.420.440.460.480.5RSimulationresultTotalminingrateq=1,0.5,0.3,0.1frombottomtotopc100.20.40.60.81dR2dc1-1-0.8-0.6-0.4-0.200.20.40.60.81a12=a21=0.5a12=a21=0.1a12=a21=0.01in the case of a12 = a21 = 0.5, c1 + c2 = 1, we have R2 = 0.99 when c1 = 0.01.

The derivative of R2 can be approximated as

dR2
dc1

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)c1→0

≈ lim
c1→0

(cid:16) 1.5x1.5 + 4x0.5 + 6
x1.5 + x0.5 + 2

+

−

0.5
0.25x2.5 + 1.5x1.5 + 0.25x0.5 + 2
3x0.5 + 4
x0.5 + 1

1
0.5x1.5 + 0.5x0.5 + 1

−

(16)

(cid:17)

+ O(c1)

= −1,

where x = 2c2

1 − 2c1 + 1 and limc1→0 x = 1.

From the perspective of the blockchain growth, the two miners having the

same block mining rates generate blocks at the same speed, which could result

in conﬂicting blocks and slow down the growth of the main chain. This explains

the observation in Fig. 8 that the uniform block mining rates in a blockchain

network would lead to the lowest blockchain capacity. We also can see that the

blockchain capacity of the miners connected with poor links (a12 = a21 = 0.01)

decreases faster than the capacity of miners connected with good links (a12 =

a21 = 0.5), as c1 grows from 0.05 to 0.5.

Figure 10: The ratio of stale blocks, given by (4), with the growth of synchronization success

rate α, where 5-miners star, line and complete graphs are considered. The miners have

identical mining rates, denoted by ci.

25

00.10.20.30.40.500.10.20.30.40.50.60.70.8Miners in a star graphMiners in a line graphMiners in a complete graphSimulation resultWe evaluate the ratio of stale blocks using (4) and (12), against the growth

of the synchronization success rate per link, denoted by α, where the public

blockchain system consists of ﬁve miners having the same block mining rate,

i.e., 0.1 and 0.01, and the miners are connected in diﬀerent graphs. Three

types of graphs are considered, i.e., a line graph with diameter 4 and spectral

radius 1.73, a star graph with diameter 2 and spectral radius 2, and a complete

graph with diameter 1 and spectral radius 4. We can see that Or declines

with the growth of α. Therefore, better link quality can help to reduce stale

blocks. Meanwhile, the graphs with small diameters or large spectral radiuses

can achieve low Or. Blockchains in the complete graph have lower Or, especially

when blocks are rapidly mined, i.e. ci = 0.1. The star graph has the same

number of edges as the line graph, but can achieve a lower stale block ratio.

We also see that blockchains can reduce the ratio of stale blocks to suppress

attacks by slowing down the block mining, e.g., from ci = 0.1 to ci = 0.01,

which scariﬁes blockchain capacity.

Figure 11: The ratio of admitted blocks to computing power at the ﬁrst miner, i.e., γ1/ c1

c1+c2

,

with the growth of

c1
c1+c2

We proceed to evaluate the strong consistency probability and the contribu-

tions of two miners to the blockchain growth based on Section 6. Fig. 11 plots

the rate of successfully admitted blocks of the ﬁrst miner to its computing power,

26

c1c1+c200.20.40.60.81γ1/c1c1+c200.20.40.60.811.21.4c1+c2=1c1+c2=0.5c1+c2=0.1SimulationResultReferencelinei.e., γ1/ c1

c1+c2

, based on Corollary 1, with the growth of

c1
c1+c2

in the ideal case

where the link between the two miners is error-free. Diﬀerent total block mining

rates are considered. We can see that the relative computing power (rather than

the absolute computing power) of a miner has a strong impact on the number

of successfully generated and admitted blocks in the ﬁnal, eventually consistent

blockchain. In general, the miners can increase their computing power to im-

prove their contributions to the ﬁnal consistent blockchain. However, the eﬀect

of increasing computing power is not linear. As shown in the ﬁgure, the ﬁrst

miner achieves the maximum rate of admitted blocks to computing power when

≈ 0.7. Fig. 12 plots the public blockchain growth between two miners

c1
c1+c2
connected by ideal error-free links. To be speciﬁc, Fig. 12(a) plots the strong

consistency probability after synchronization, i.e., η given in Theorem 2, and

the stale block ratio, i.e., Or given by (4), where c1 ranges with [0, 1] and c2 is

set to be 0.1, 0.5 and 0.8. We can see that the strong consistency probability

decreases with the increasing block mining rate, while the stale block ratio in-

creases. Fig. 12(b) shows the contributions of each individual of the two miners

to the consistent blockchain, where c1 ranges with [0, 1] and c2 is set to be 0.5.

We also see the blockchain capacity is upper bounded by 1, i.e., no more than

one block per timeslot can be admitted by the main chain.

(a) The strong consistency probability after

(b) Blockchain capacity contributed by two

synchronization and the stale block ratio of

miners.

the public blockchain.

Figure 12: The blockchain growth between two miners connected by ideal links.

27

c100.20.40.60.81Probability00.10.20.30.40.50.60.70.80.91ηOrSimulationResultc2=0.8,0.5,0.1c2=0.8,0.5,0.1c100.20.40.60.81¯R200.511.5¯R2BytheﬁrstminerBythesecondminerSimulationresultc1+c2max(¯R2)=1We proceed to evaluate the capacity of a blockchain system across two 100-

miner LANs based on the closed-form expression for the blockchain capacity in

Fig. 13. Within each LAN, the miners are connected by error-free and delay-

free links. Between the LANs, the links are unreliable and can incur error,

where we set a12 = a21 = α. Four conﬁgurations are considered. Conﬁguration

(a) corresponds to the case of low mining rates in the LANs. Every miner

in the ﬁrst LAN has the block mining rate of ¯c1 = 0.0001, while every miner

in second LAN has the block mining rate of ¯c2 = 0.0002. Conﬁguration (b)

corresponds to the case of medium block mining rates, i.e., ¯c1 = 0.001 and

¯c2 = 0.002. Conﬁguration (c) corresponds to the case of a high block mining

rate per miner in each of the LANs, i.e., ¯c1 = 0.025 in the ﬁrst LAN and

¯c2 = 0.015 in the second LAN. The last conﬁguration (d) corresponds to the

case where the two LANs have substantially diﬀerent block mining rates per

miner, i.e., ¯c1 = 0.02 in the ﬁrst LAN and ¯c2 = 0.002 in the second LAN.

Each LAN can be interpreted as a miner with its capacity given by (2), i.e.,

c1 = 1 − (1 − ¯c1)100 and c2 = 1 − (1 − ¯c2)100.

We also compare our work with blockchain models developed in [18, 19].

Our result from Theorem 1 is denoted by R2. According to [18, Theorem 9],

the blockchain growth rate of the two LANs, denoted by R(cid:48)

2, can be given by

R(cid:48)

2 =

2e2c2d
1e2c1d − c2
c2
c1e2c1d − c2e2c2d ,

(17)

where e ≈ 2.71828 is Euler’s number. d is the block propagation delay between

the LANs and can be converted from α by using d = 1

According to [19, eq. 5], the blockchain growth rate, denoted by R∗

α for comparison purpose.
2, can be

given by

R∗

2 =

c1 + c2
1 + Pr{fork}

=

c1 + c2
1 + 1 − e−d(c1+c2)

,

(18)

where Pr{fork} is the blockchain fork probability and is given by with 1 −

e−d(c1+c2). The fork probability is under the assumption that a fork occurs if

other blocks are mined before the currently proposed block is fully disseminated

over the network.

28

(a) ¯c1 = 0.0001, ¯c2 = 0.0002

(b) ¯c1 = 0.001, ¯c2 = 0.002

(c) ¯c1 = 0.025, ¯c2 = 0.015

(d) ¯c1 = 0.02, ¯c2 = 0.002

Figure 13: The blockchain capacity between two 100-miner LANs, where ¯c1 and ¯c2 are the

block mining rate per miner in the ﬁrst LAN and the second LAN, respectively. The non-ideal

links between the two LANs have the same transmission success probability α. R2, R(cid:48)
R∗

2 are the theoretical blockchain growth rates from our work, [18] and [19], respectively.

2 and

Fig. 13 conﬁrms that under all the four conﬁgurations, our analytical results,

i.e., Theorem 1, provide good accuracy, evident from the simulation results. It is

also shown in the ﬁgure that the blockchain capacity primarily depends on one

of the LANs with higher capacity, especially when the LANs are connected with

poor link qualities. An example is that the blockchain capacity is 0.868, in the

case where α = 0.05, c1 = 1−(1−0.02)100 = 0.867, and c2 = 1−(1−0.002)100 =

0.181, as shown in Fig. 13(d). The blockchain capacity can achieve its upper

bound, i.e., [1−(1−c1)(1−c2)], when the links between the LANs are error-free,

i.e., α = 1.

29

00.20.40.60.810.020.0220.0240.0260.0280.0300.20.40.60.810.140.160.180.20.220.240.2600.20.40.60.810.20.40.60.811.200.20.40.60.810.8650.870.8750.880.8850.890.8950.90.905The numerical values of R(cid:48)

2 and R∗
ferent levels. It can be seen from Fig. 13(a) and Fig. 13(b) that R(cid:48)

2 mismatch the simulation results at dif-

2 is slightly

below the simulation results. This is because our model allows a chain of blocks

to be synchronized with a successful transmission, while R(cid:48)

2 assumes that all
blocks have the same constant delay. The diﬀerence between our results and R(cid:48)
2

is negligible for low mining rates, e.g., in Fig. 13(a). Rapid block mining, e.g.,

under the setting of Fig. 13(c), can beyond the assumption of R(cid:48)

2 [18, eq. 2] and

result in non-negligible gaps. It is worth noting that R(cid:48)

2 requires that two miners

have diﬀerent mining rates and only considers a bidirectional delay d between

the miners. Our model is general and able to capture the impact of uniform

mining rates and asymmetric connections. It can be seen in Figs. 13(a) – 13(c)

that R∗

2 underestimates the blockchain growth rates, and the gap between R∗
2
and the simulation results decreases with the increase of α or the decline of the

mining rates (i.e., c1 and c2). The reason is that the model treats the case that

the miners extend the longest chain before the end of block propagation delay d

as a fork [19, eq. 5] and therefore underestimates the blockchain growth rate.

Nevertheless, this assumption simpliﬁes the blockchain consensus analysis and

is acceptable in the case of moderate fork rates, e.g., α = 0.95 in Fig. 13(a).

Figure 14: The blockchain capacity with the growth of a12, where two LANs are asymmetri-

cally connected, i.e., a12 (cid:54)= a21.

30

00.20.40.60.810.40.420.440.460.480.50.52Fig. 14 shows the blockchain capacity against the growth of a12, where two

LANs are connected by asymmetric links, i.e., a12 (cid:54)= a21. a12 is set to range

within [0.1,0.9], a21 is set to be 0.2 and 0.8 for the two solid curves. c1 = 0.2 and
c2 = 0.4. Every simulation dot in the ﬁgure is the average of 106 timeslots. We

see that the blockchain capacity increases with the growth of a12 and/or a21.

An interesting ﬁnding is that the switch of the roles between a12 and a21 (or the

ﬁrst and the second LANs, equivalently) does not aﬀect the blockchain capacity.

The blockchain capacity under the conﬁguration of a12 = 0.2 and a21 = 0.8 is

equal to that under the conﬁguration of a12 = 0.8 and a21 = 0.2. Both are

0.455, as shown by the dash reference line. We also see that the improvement of

the lower of a12 and a21 is more eﬀective than the improvement of the higher.

For example, the conﬁguration of a12 = 0.8 and a21 = 0.3 can achieve higher

blockchain capacity than the conﬁguration of a12 = 0.9 and a21 = 0.2 (0.4687 vs.

0.4573). These ﬁndings indicate that it is practical to enhance the blockchain

capacity by improving the lowest transmission success rate.

Figure 15: Comparison between the chain selection rules of the longest chain and GHOST.

Block (i+k, l) indicates the block which is at the height of (i+k) and mined by the l-th miner.

The black arrows (both solid and dashed lines) indicate the hash links chaining the blocks.

The solid arrows are valid under both rules, while the dashed arrow only exists under the

GHOST protocol. The selected chains following the two rules are highlighted in blue. Block

(i + 3, 1) is the leaf block under both chain selection rules. Therefore, Theorem 1 applies to

both rules.

The proposed Markov models could be extended to capture other chain

selection rules [40, 18, 41] by deﬁning Markov states to be the local blocks,

which have not been globally endorsed, and accordingly updating the transition

31

probabilities. For example, the states can be local direct acyclic graphs of blocks

to analyze the chain extension in Ethereum that adopts the Greedy Heaviest

Observed Subtree (GHOST) rule [40, 18] to select the globally endorsed chain,

as opposed to the longest chain rule in Bitcoin. Theorem 1 can be directly

applied to two Ethereum miners running the GHOST chain selection rule. This

is because there are up to two blocks at the same height in the case of two

miners, as discussed in [18] and shown in Fig. 15. We can see that the leaf block

selected by GHOST is also the latest block in the longest chain rule, although

the two chains from the longest chain and GHOST rules can be diﬀerent. Fig. 14

validates that the GHOST simulation results1, denoted by “×”, are consistent

with the theoretical R and the simulation results with the longest chain rule.

8. Conclusion

In this paper, inﬁnite-state Markov models were developed to capture in-

consistent block generations or forks for a PoW based public blockchain. The

steady-state probabilities of the models were shown to be convergent and de-

rived in closed-form, and revealed that the blockchain capacity can be analyzed

in a structured way by sequentially evaluating the capacity of diﬀerent network

partitions in a recursive manner. The impact of the mining rates of individual

miners and the link conditions between miners on the capacity was quantiﬁed.

Conﬁrmed by simulations, our models showed that the blockchain capacity de-

pends on the distribution of the mining rates, and is lower-bounded by the case

with uniform mining rates.

Acknowledgement

This work was supported by BT Group plc through the Blockchain Enabled

Inventory Management - A Pilot Project.

1We developed the GHOST experiment based on the GHOST simulation code from

Ethereum (https://github.com/ethereum/economic-modeling/blob/master/ghost.py)

32

Appendix A. Proof of Theorem 1

To analytically evaluate the blockchain capacity, we deﬁne the probability

generation functions (PGFs) of πi,0 (i ≥ 2) and π0,j (j ≥ 2), as given by

φ(z) =

ψ(z) =

∞
(cid:88)

i=2
∞
(cid:88)

j=2

πi,0zi−1, 0 < z ≤ 1;

π0,jzj−1, 0 < z ≤ 1.

φ(1) =

∞
(cid:88)

i=2

πi,0 and ψ(1) =

∞
(cid:88)

j=2

π0,j.

We have

(A.1)

Multiplying (15c) with zi and then adding up over i, we have

(cid:2)1 − (1 − a12)((1 − c1)(1 − c2) + c1c2)(cid:3)zφ(z)

= (1−a12)c1(1−c2)z2π1,0 +(1−a12)c1(1−c2)z2φ(z)

(A.2)

+(1 − a12)(1 − c1)c2φ(z)−(1−a12)(1 − c1)c2zπ2,0,

which can be rearranged as

(cid:104)

(1 − a12)c1(1 − c2)z2 + (1 − a12)(1 − c1)c2
(cid:105)

− [1 − (1 − a12)((1 − c1)(1 − c2) + c1c2)]z

φ(z)

(A.3)

= (1−a12)(1−c1)c2zπ2,0 −(1−a12)c1(1−c2)z2π1,0.

By plugging diﬀerent values of z, both π2,0 and φ(1) = (cid:80)∞
i=2 πi,0 can be written
as functions of π1,0. We ﬁrst, set both sides of (A.3) to 0, z (cid:54)= 0 and φ(z) (cid:54)= 0.
We have f (z) = (1 − a12)c1(1 − c2)z2 − (cid:2)1 − (1 − a12)((1 − c1)(1 − c2) + c1c2)(cid:3)z +
(1 − a12)(1 − c1)c2 = 0. Because f (0) = (1 − a12)(1 − c1)c2 > 0, f (1) = −a12 < 0

and f (+∞) > 0, f (z) = 0 has a single root within (0, 1), denoted by z1. The

small root, z1, is given in (A.9) by applying the quadratic formula.

Let z = z1 in the right-hand side (RHS) of (A.3). Both the RHS and the

left-hand side (LHS) become 0. We have

π2,0 =

c1(1 − c2)z1
(1 − c1)c2

π1,0.

(A.4)

33

Next, φ(1) can be obtained by substituting (A.4) and z = 1 in (A.3). Both

sides of (A.3) provide the same non-zero value. φ(1) can be given by

φ(1) =

(1 − a12)c1(1 − c2)(1 − z1)
a12

π1,0.

(A.5)

The equation about ψ(z) can be obtained by switching the roles of the two

miners and, subsequently, φ(z) and ψ(z) in (A.3), and can be given by

(cid:104)

(1 − a21)(1 − c1)c2z2 + (1 − a21)c1(1 − c2)
(cid:105)

− [1 − (1 − a21)((1 − c1)(1 − c2) + c1c2)]z

ψ(z)

(A.6)

= (1−a21)c1(1−c2)zπ0,2 −(1−a21)(1−c1)c2z2π0,1.

The quadratic equation g(z) = (1 − a21)(1 − c1)c2z2 − [1 − (1 − a21)((1 − c1)(1 −

c2)+c1c2)]z +(1−a21)c1(1−c2) = 0 has only a single root within (0, 1), denoted

by z3. This is because g(0) = (1 − a21)c1(1 − c2) > 0, g(1) = −a21 < 0 and

g(+∞) > 0. z3 can be obtained by switching the roles of the two miners in

(A.9).

Let z = z3 in the RHS of (A.6). Both sides of (A.6) become 0. We have

π0,2 =

(1 − c1)c2z3
c1(1 − c2)

π0,1.

By plugging (A.7) and z = 1 in (A.6), ψ(1) can be given by

ψ(1) =

(1 − a21)(1 − c1)c2(1 − z3)
a21

π0,1.

(cid:16)

z1 =

2 (1 − a12) c1 (1 − c2)

(cid:17)−1

(cid:18)

×

1 − (1 − a12) (1 − c1 − c2 + 2c1c2)

−

(cid:16)(cid:0)1 − (1 − a12) (1 − c1 − c2 + 2c1c2) (cid:1)2
(cid:17) 1

− 4 (1 − a12)2 c1c2 (1 − c1) (1 − c2)

2 (cid:19)

(A.7)

(A.8)

(A.9)

.

34

(cid:16)

π1,0 =

c1(1 − c2)(cid:0)ea21c2(1 − c1) + d(cid:1)(cid:17)
(cid:16)(cid:0)f + dc1(1 − c2)(cid:1)(cid:0)g + ec2(1 − c1)(cid:1)

×

− dec1c2(1 − c1)(1 − c2)(1 − a12)(1 − a21)

(cid:17)−1

;

π0,0 = 1 − dπ1,0 − eπ0,1.

(A.10a)

(A.10b)

Substituting (15), (A.4), (A.5), (A.7), (A.8) and π0,1 into π0,0 + π1,0 +

φ(1) + π0,1 + ψ(1) = 1, we can obtain π1,0 and π0,0, as given in (A.10), where
d = 1 + (1−a12)c1(1−c2)(1−z1)

, e = 1 + (1−a21)(1−c1)c2(1−z3)

, f = 1 − (1 − a12)[(1 −

a12

a21

c1)(1−c2)+c1c2 +c1(1−c2)z1]−da12c1(1−c2), and g = 1−(1−a21)[(1−c1)(1−

c2) + c1c2 + c2(1 − c1)z3] − ea21c2(1 − c1). π0,1 can be obtained by switching the

roles of the ﬁrst and the second miners, i.e., switching d and e, and switching f

and g in (A.10a). In turn, φ(1) and ψ(1) can also be obtained.

According to (12) and (13), the capacity of the two miners, denoted by R2,

can ﬁnally be given by

R2 =(c1 + c2 − c1c2)π0,0

+ (c1 + a12c2 − a12c1c2)(π1,0 + φ(1))

+ (c2 + a21c1 − a21c1c2)(π0,1 + ψ(1)),

(A.11a)

(A.11b)

(A.11c)

where (A.11a) is because the longer blockchain extends a single block if no less

than one block is mined in the state [0, 0]. (A.11b) is the probability that the

ﬁrst miner generates a new block per timeslot or only the second miner generates

a new block after successful synchronization in state [i, 0], i > 0. (A.11c) is the

probability that the second miner produces a new block per timeslot or only

the ﬁrst miner generates a new block after successful synchronization in state

[0, j], j > 0. It is clear that R2 depends on the error probabilities of the link

and the delay of the links.

In a special case with error-free links, a12 = a21 = 1, (A.11) can be rewritten

35

as

¯R2 = (c1 +c2 −c1c2)(π0,0 +π1,0 +φ(1)+π0,1 +ψ(1))

(A.12)

= c1 + c2 − c1c2.

This is because the system must be one of the Markov states, i.e., π0,0 + π1,0 +
φ(1) + π0,1 + ψ(1) = 1. ¯R2 is consistent with (2).

Appendix B. Proof of Theorem 2

Let θ = (cid:80)

i τi,i. The steady-state probabilities of states [∅, ∅], [11, ∅], [∅, 2 ×
11] and [11, 2 × 11], denoted by τ0,0, τ1,0, τ0,1 and τ1,1, respectively, can be given

by

τ0,0 = (1 − θ + τ0,0)(1 − c1)(1 − c2);

τ1,0 = (1 − θ + τ0,0)c1(1 − c2);

τ0,1 = (1 − θ + τ0,0)(1 − c1)c2;

τ1,1 = (1 − θ + τ0,0)c1c2 + (1 − c1)(1 − c2)τ1,1,

(B.1a)

(B.1b)

(B.1c)

(B.1d)

where (1−θ) = (cid:80)∞

i=0(τi,i+1+τi+1,i) and the rest of the steps are self-explanatory.
The steady-state probabilities of states [1i+1, 2 × 1i+1], [1i+1, 2 × 1i], and

[1i, 2 × 1i+1] (i ≥ 1), denoted by τi+1,i+1, τi+1,i, and τi,i+1, respectively, can be

written in recurrence expressions, as given by

τi+1,i+1 = c1c2τi,i + (1 − c1)(1 − c2)τi+1,i+1
c1c2
1 − (1 − c1)(1 − c2)

τi,i;

=

τi+1,i = c1(1 − c2)τi,i;

τi,i+1 = (1 − c1)c2τi,i, for i ≥ 1.

As a result, θ can be obtained by

θ = τ0,0 +

1 − (1 − c1)(1 − c2)
1 − (1 − c1)(1 − c2) − c1c2

τ1,1.

(B.2)

(B.3)

Despite there are an inﬁnite number of states in the FDTMC model (as

in Section 4), we are able to recursively calculate and solve for closed-form

36

expressions. By jointly solving (B.1) and (B.3), we have a simple and closed-

form expression for τ0,0, as given by

τ0,0 =

(c1 + c2 − 2c1c2)(1 − c1)(1 − c2)
c1 + c2 − c1c2

,

(B.4)

which essentially provides the probability of strong consistency in a public

blockchain, before synchronization is conducted between the miners.

For the rest of the states [1i, 2 × 1i], [1i, 2 × 1i−1], and [1i−1, 2 × 1i] (i ≥ 1),

their steady-state probabilities can be obtained by jointly solving (B.1), (B.2),

(B.3) and (B.4):

τi,i =

(c1c2)i(c1 + c2 − 2c1c2)
(c1 + c2 − c1c2)i+1
1ci−1
ci
2

;

(1 − c2)(c1 + c2 − 2c1c2)
(c1 + c2 − c1c2)i

τi,i−1 =

τi−1,i =

ci−1
1

ci
2(1 − c1)(c1 + c2 − 2c1c2)

(c1 + c2 − c1c2)i

(B.5)

;

.

We note that τ0,0 + (cid:80)

i=1(τi,i−1 + τi−1,i) gives the strong consistency prob-
ability with the eﬀective synchronization taken into account. This is because

the miners in states [1i, 2 × 1i−1], and [1i−1, 2 × 1i] have local chains with dif-

ferent lengths, and they can reach strong consistency after synchronization, i.e.,

transit to [∅, ∅]. The probability of strong consistency of the entire blockchain

system after synchronization is therefore given by

η = τ0,0 +

(cid:88)

(τi,i−1 + τi−1,i) =

i=1

c1 + c2 − 2c1c2
c1 + c2 − c1c2

.

(B.6)

References

[1] X. Wang, X. Zha, W. Ni, R. P. Liu, Y. J. Guo, X. Niu, K. Zheng, Survey

on blockchain for internet of things, Computer Communications 136 (2019)

10 – 29.

[2] S. Nakamoto, Bitcoin: A peer-to-peer electronic cash system (2008).

URL https://bitcoin.org/bitcoin.pdf

37

[3] E. P. Moro, A. K. Duke, Distributed ledger technologies and the internet of

things: A devices attestation system for smart cities, The Journal of The

British Blockchain Association (2020) 12500.

[4] E. K. Kogias, P. Jovanovic, N. Gailly, I. Khoﬃ, L. Gasser, B. Ford, Enhanc-

ing Bitcoin security and performance with strong consistency via collective

signing, in: Proc. USENIX Security Symp. (USENIX Security ’16), Austin,

TX, USA, 2016, pp. 279–296.

[5] G. Wood, Ethereum: A secure decentralised generalised transaction ledger

(Apr. 2014).

URL http://www.cryptopapers.net/papers/ethereum-yellowpaper.

pdf

[6] J. Garay, et al., The Bitcoin backbone protocol: Analysis and applica-

tions, in: Proc. of the 34th Annu. Int. Conf. on the Theory and Appl. of

Cryptographic Techn. (EUROCRYPT 2015), 2015, pp. 281–310.

[7] S. King, S. Nadal, Ppcoin: Peer-to-peer crypto-currency with proof-of-stake

(Aug. 2012).

URL https://peercoin.net/assets/paper/peercoin-paper.pdf

[8] I. Bentov, C. Lee, A. Mizrahi, M. Rosenfeld, Proof of Activity: Extending

Bitcoin’s Proof of Work via Proof of Stake, SIGMETRICS Perform. Eval.

Rev. 42 (3) (2014) 34–37. doi:10.1145/2695533.2695545.

[9] M. Castro, B. Liskov, Practical Byzantine fault tolerance, in: Proc. 3rd

USENIX Symp. Operating Syst. Design and Implementation (OSDI ’99),

Berkeley, CA, USA, 1999, pp. 173–186.

[10] W. Vogels, Eventually consistent, Commun. ACM 52 (1) (2009) 40–44.

[11] C. Decker, R. Wattenhofer, Information propagation in the Bitcoin net-

work, in: Proc. 13rd IEEE Int. Conf. on Peer-to-Peer Comput. (P2P’ 13),

2013, pp. 1–10.

38

[12] X. Zha, et al., Collaborative authentication in decentralized dense mobile

networks with key predistribution 12 (10) (2017) 2261–2275. doi:10.1109/

TIFS.2017.2705584.

[13] F. Tschorsch, B. Scheuermann, Bitcoin and beyond: A technical survey

on decentralized digital currencies, IEEE Commun. Surveys Tuts. 18 (3)

(2016) 2084–2123. doi:10.1109/COMST.2016.2535718.

[14] P.-Y. Piriou, J.-F. Dumas, Simulation of stochastic blockchain models, in:

2018 14th European Dependable Computing Conference (EDCC), IEEE,

2018, pp. 150–157.

[15] R. Yang, X. Chang, J. Miˇsi´c, V. B. Miˇsi´c, Assessing blockchain

selﬁsh mining in an imperfect network: Honest and selﬁsh miner

views, Computers & Security 97 (2020) 101956.

doi:https:

//doi.org/10.1016/j.cose.2020.101956.

URL

https://www.sciencedirect.com/science/article/pii/

S0167404820302327

[16] G. Yu, X. Zha, X. Wang, W. Ni, K. Yu, J. A. Zhang, R. P. Liu, A uniﬁed

analytical model for proof-of-x schemes, Computers & Security 96 (2020)

101934.

[17] A. Gervais, et al., On the security and performance of proof of work

blockchains, in: Proc. 23rd ACM SIGSAC Conf. on Comput. and Com-

mun. Security. (CCS ’16), ACM, 2016, pp. 3–16. doi:10.1145/2976749.

2978341.

[18] Y. Sompolinsky, A. Zohar, Secure high-rate transaction processing in Bit-

coin, in: Proc. 19th Int. Conf. Financial Cryptogr. Data Secur. (FC ’15),

Malta, 2015, pp. 507–527.

[19] Y. Shahsavari, K. Zhang, C. Talhi, A theoretical model for fork analysis in

the bitcoin network, in: 2019 IEEE International Conference on Blockchain

(Blockchain), 2019, pp. 237–244. doi:10.1109/Blockchain.2019.00038.

39

[20] N. Ruan, D. Zhou, W. Jia, Ursa: Robust performance for ¡i¿nakamoto¡/i¿

consensus with self-adaptive throughput, ACM Trans. Internet Technol.

20 (4). doi:10.1145/3412341.

URL https://doi.org/10.1145/3412341

[21] S. Gilbert, N. Lynch, Brewer’s conjecture and the feasibility of consis-

tent, available, partition-tolerant web services, ACM SIGACT News 33 (2)

(2002) 51–59.

[22] D. Abadi, Consistency tradeoﬀs in modern distributed database system

design: CAP is only part of the story 45 (2) (2012) 37–42. doi:10.1109/

MC.2012.33.

[23] M. R. Rahman, et al., Characterizing and adapting the consistency-latency

tradeoﬀ in distributed key-value stores, ACM Trans. Autonomous & Adap-

tive Sys. 11 (4) (2017) 20.

[24] E. Brewer, CAP twelve years later: How the ‘rules’ have changed 45 (2)

(2012) 23–29. doi:10.1109/MC.2012.37.

[25] A. D. Fekete, K. Ramamritham, Consistency Models for Replicated Data,

Springer, Berlin, Heidelberg, 2010, pp. 1–17.

[26] E. Sirer, Bitcoin guarantees strong, not eventual, consistency, Hacking,

Distributed.

URL

https://hackingdistributed.com/2016/03/01/

bitcoin-guarantees-strong-not-eventual-consistency/

[27] X. Wang, et al., Virus propagation modeling and convergence analysis in

large-scale networks 11 (10) (2016) 2241–2254.

[28] M. Alharby, A. van Moorsel, Blocksim: A simulation framework for

blockchain systems, SIGMETRICS Perform. Eval. Rev. 46 (3) (2019)

135–138. doi:10.1145/3308897.3308956.

URL https://doi.org/10.1145/3308897.3308956

40

[29] Y. Aoki, K. Otsuki, T. Kaneko, R. Banno, K. Shudo, Simblock: A

blockchain network simulator, in: IEEE INFOCOM 2019 - IEEE Confer-

ence on Computer Communications Workshops (INFOCOM WKSHPS),

2019, pp. 325–329. doi:10.1109/INFCOMW.2019.8845253.

[30] Q.-L. Li, J.-Y. Ma, Y.-X. Chang, F.-Q. Ma, H.-B. Yu, Markov processes in

blockchain systems, Computational Social Networks 6 (1) (2019) 1–28.

[31] S. G. Motlagh, J. Misic, V. B. Misic, Modeling of churn process in bitcoin

network, in: 2020 International Conference on Computing, Networking and

Communications (ICNC), IEEE, 2020, pp. 686–691.

[32] X. Wang, G. Yu, X. Zha, W. Ni, R. P. Liu, Y. J. Guo, K. Zheng, X. Niu,

Capacity of blockchain based internet-of-things: Testbed and analysis, In-

ternet of Things 8 (2019) 100109.

[33] D. L. Mills, Internet time synchronization: the network time protocol, IEEE

Trans. Commun. 39 (10) (1991) 1482–1493. doi:10.1109/26.103043.

[34] R. Durrett, Probability: theory and examples, Cambridge university press,

2010.

[35] T. Konstantopoulos, Markov chains and random walks (2009).

URL

https://pdfs.semanticscholar.org/251b/

3a804be62da4e0835fcffa704cacb03ce310.pdf

[36] L. Kleinrock, Queueing systems, volume 2: Computer Appl., Vol. 66, wiley,

New York, 1976.

[37] A. Y. Kreinin, Queueing systems with renovation, Int. J. Stochastic Anal-

ysis 10 (4) (1997) 431–441.

[38] D. Towsley, S. K. Tripathi, A single server priority queue with server failures

and queue ﬂushing, Operations Research Lett. 10 (6) (1991) 353 – 362.

doi:https://doi.org/10.1016/0167-6377(91)90008-D.

41

[39] P. Indyk, R. Motwani, Approximate nearest neighbors: towards removing

the curse of dimensionality, in: Proc. of the 30th annual ACM Symp. on

Theory of Comput., ACM, 1998, pp. 604–613.

[40] V. Buterin, V. Griﬃth, Casper the friendly ﬁnality gadget, arXiv preprint

arXiv:1710.09437.

[41] Y. Sompolinsky, Y. Lewenberg, A. Zohar, Spectre: A fast and scalable

cryptocurrency protocol., IACR Cryptol. ePrint Arch. 2016 (2016) 1159.

42

